Graphics Module
---------------

Doesn't clip H/V (V clipped on Char/Sprite Draw)
Keeps track of the last two points.

Default bitmap $10000 (must be on page boundary)
Default GLUT 0
Default height 240
Default sprites $30000 (on page boundary)

Graphics Command passed in AXY.

cccccccx xxxxxxxx yyyyyyyy

Returns CS error , CC okay

*	0 INIT
*	1 BITMAPCTL  X = lut1|lut0|enable, Y = Page # (0 => 8)
*	2 SPRITECTL X = bit 0 enable Y = Page # (0 => 24)
*	3 CLEAR (X colour)
*	4 COLOUR (X fgr, mode bits 7..0)
			Mode Bits: vflip|hflip|s2|s1|s0|bsd|m1|m0
			scale is (s2s1s0+1)
*	5 DRAWC xxxxxxx character (advances horizontally), 2nd byte eor with mode bits.
*	6 DRAWS sprite ID xxxxxx (4+5 only support modes 0/1), 2nd byte eor with mode bits.
*	7 SPRUSE X = sprite# select sprite
*	8 SPRIMG X = set selected sprite image to X, Y = 0, hide, Y = 1
*	9 HIT    Check collision state X,Y. Returns $FF for miss,or max |c1-c0| << 2
*	10 TILECTL X=tiles map page, Y = images page enable bit, X bit 7 = on/off, size to 64x32
*	11 TILESZ  X=width, Y = height
*	12 TILESCLX YX = X Scroll value.
* 	13 TILESCLY YX = Y Scroll value.
*	14 TILEPOS X,Y = Tile
*	15 TILEWRT X = Tile, advance
*	16 TILERD  ->A advance
*	32 MOVE 			
*	33 LINE 	
*	34 RECT
*	35 Fill RECT
*	36 CIRCLE
*	37 Fill CIRCLE
*	40 PLOT point
*	41 SPRMOVE to x,y (fix up sprite positioning)

Tile Interface (GFX)

Tile Interface (BASIC)	
	TILES ON|OFF|AT <image>,<map>|DIM <width>,<height>
	TILE TO xScroll,yScroll|AT <xTile>,<yTile>|PLOT <nn> [FOR <nn>]
	=TILE(x,y)

	LINE
	SPRITE n
	IMAGE n
	TEXT "xxxx"
	RECT
	CIRCLE

	modifiers:
		x,y 			- just move
		HERE 			- draw without moving (BY 0,0)
		TO x,y 			- move & draw
		BY x,y 			- move offset x,y and draw.
		COLOUR c[,m]	- set colour and mode.
		COLOR 			  (synonym)
		DIM <n> 		- set scale for DRAWC/DRAWS
		SOLID 			- set solid/outline mode.
		OUTLINE
		OFF 			- sets off.
		IMAGE 			- set sprite image sets on
		TEXT "xxx" command		

Sprite State
------------

2 x 64 byte records because we can't read Sprite Memory ....
Initialised by INIT and SPRITECTL (where zeroes sprite memory) - LowByte set to $80, HighByte set to $00

LowByte 	hxxxxxxx 	
		xxxxxxx = x pos >> 2 (range 0..79) used for collision testing (set by SPRMOVE)
		h 		= 1 if sprite is invisible (e.g. set by off, cleared by SPRIMG)

HighByte 	ssyyyyyy
		yyyyyy 	= y Pos >> 2 (range 0..59) used for collision testing (set by SPRMOVE)
		ss 		= size bits (00=8,01=16,10=24,11=32) (set by SPRIMG)

