;
;	This file is automatically generated
;

soundIntegrated=1

; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		checkchannel.asm
;		Purpose:	Check if channel should play a note
;		Created:	21st November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;		For channel A, if off, check if there is a sound request in the queue and set up
;		appropriately.
;
; ************************************************************************************************

SNDCheckChannel:
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		enqueue.asm
;		Purpose:	Queue a channel request
;		Created:	21st November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Queue a sound command to YX
;
; ************************************************************************************************

SNDQueueRequest:
		stx 	zTemp0						; save queue address
		sty 	zTemp0+1
		;
		ldx 	SNDLength 					; queue is full, can't take any more.
		cpx 	#SNDQueueSize
		beq 	_SNDQRExit
		;
		and 	#3	 						; channel # and push on stack
		pha
		;
		txa  								; get offset in queue buffer/
		asl 	a
		asl 	a
		asl 	a
		tax
		;
		pla 								; get back and push again
		pha
		sta 	SNDQueue+0,x 				; save the channel #
		ldy 	#0 							; copy the rest in.
_SNDQCopy:
		lda 	(zTemp0),y
		inx
		iny
		sta 	SNDQueue,x
		cpy 	#6
		bne 	_SNDQCopy
		;
		inc 	SNDLength 					; bump queue length.
		;
		pla 								; get channel # back
		jsr 	SNDCheckChannel 			; check if channel needs refreshing.

_SNDQRExit:
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		silence.asm
;		Purpose:	Silence a channel
;		Created:	21st November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Silence a channel A
;
; ************************************************************************************************

SNDSilenceChannel:
		tax 								; zero time left.
		stz 	SNDTimeLeft,x
		;
		;		We do not remove queued entries for this channel because cannot currently silence
		; 		individual channels.
		;
		asl 	a 							; shift into position
		asl 	a
		asl 	a
		asl 	a
		asl 	a
		ora 	#$9F 						; write register attenuation $F
		jsr 	SNDWritePorts
		rts

; ************************************************************************************************
;
;									Write byte to left and right SN76489
;
; ************************************************************************************************

SNDWritePorts:
		stz 	1
		sta 	$D600
		sta 	$D610
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		sound.asm
;		Purpose:	Sound module entry point
;		Created:	21st November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Entry Point (command)
;
; ************************************************************************************************

SNDCommand:
		cmp 	#$0F 						; $0F is initialise
		beq 	_SNDInitialise
		bcc 	_SNDExit
		cmp 	#$3F 						; $3F is silence all
		beq 	_SNDSilence
		bcs 	_SNDExit
		cmp 	#$20 						; $2x is check playing => A
		bcs 	_SNDQueryPlay
		cmp 	#$14 						; $10-$13 is queue sound
		bcs 	_SNDExit
		jsr 	SNDQueueRequest
		bra 	_SNDExit
;
;		Return A != 0 if channel currently playing a note.
;
_SNDQueryPlay:
		and 	#3 							; get channel #
		lda 	SNDTimeLeft,x 				; read time left, if zero then silent
		bra 	_SNDExit
;
;		Initialisation code (currently same as silence code)
;
_SNDInitialise:
;
;		Silence code
;
_SNDSilence:
		stz 	SNDLength 					; empty the queue.
		lda 	#$3 						; silence channel 0-3.
_SNDSilenceLoop:
		pha
		jsr 	SNDSilenceChannel
		pla
		dec 	a
		bpl 	_SNDSilenceLoop
_SNDExit:
		rts

		.send code

; ************************************************************************************************
;
;										Data area
;
; ************************************************************************************************

		.section storage
;
;		Queue of sounds to play
;
SNDQueueSize = 32 							; number of queue entries

SNDLength: 									; count currently in queue
		.fill 	1
SNDQueue: 	 								; 8 bytes per queue entry.
		.fill 	SNDQueueSize * 8
;
;		Current state of the four channels.
;
SNDPitchLow: 								; current pitch
		.fill 	4
SNDPitchHigh:
		.fill 	4

SNDTimeLeft: 								; time remaining, zero = no sound/get next
		.fill 	4

SNDAdjustLow:								; current slide
		.fill 	4
SNDAdjustHigh:
		.fill 	4

		.send 	storage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
