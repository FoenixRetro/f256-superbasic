;
;	This file is automatically generated
;

hardwareIntegrated=1

; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		colours.inc
;		Purpose:	Console colour scheme
;		Created:	17th November 2022
;		Reviewed:
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

CONBlack = 0
CONWhite = 1
CONRed = 2
CONCyan = 3
CONPurple = 4
CONGreen = 5
CONBlue = 6
CONYellow = 7
CONOrange = 8
CONBrown = 9
CONYellowGreen = 10
CONRosa = 11
CONBlueGreen = 12
CONLightBlue = 13
CONPink = 14
CONLightGreen = 15

CONForeground = CONYellow
CONBackground = CONBlue

CLICommandLine = CONGreen

CLIFComment = CONBlack
CLIBComment = CONYellow

CLILineNumber = CONBrown
CLIToken = CONCyan
CLIConstant = CONLightBlue
CLIIdentifier = CONYellow
CLIPunctuation = CONYellowGreen
CLIData = CONWhite

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		charout.asm
;		Purpose:	Output character
;		Created:	14th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Output Character A
;
;		control+'a'  ($01)  begin
;		control+'b'  ($02)  left
;		control+'e'  ($05)  end
;		control+'f'  ($06)  right
;		control+'h'  ($08)  backspace
;		control+'i'  ($09)  tab
;		control+'l'  ($0C)  ff
;		control+'m'  ($0D)  cr
;		control+'n'  ($0E)  down
;		control+'p'  ($10)  up
;					  $8x 	set background
;					  $9x 	set foreground
;
; ************************************************************************************************

EXTPrintCharacter:
PAGEDPrintCharacter:
		pha
		phx
		phy

		ldx 	1
		phx

		ldy 	EXTColumn 					; Y = Row, e.g. points to character.

		ora 	#$00 						; check $80-$FF
		bmi 	_EXPCColour
		cmp 	#$20 						; check $00-$1F
		bcc 	_EXPCControl
		;
		;		Handle character.
		;
		ldx 	#2 							; select char memory
		stx 	1
		sta 	(EXTAddress),y
		inc 	1 							; select colour memory
		lda 	EXTTextColour
		sta 	(EXTAddress),y
		;
		iny 								; advance horizontal position
		sty 	EXTColumn
		cpy 	EXTScreenWidth 				; reached RHS ?
		bcc 	_EXPCExit 					; no, then exit.
		;
		;		Carriage return.
		;
_EXPCCRLF:
		inc 	EXTRow  					; bump row
		stz 	EXTColumn 					; back to column 0
		lda 	EXTRow 						; check if reached the bottom ?
		cmp 	EXTScreenHeight 			; if so, then scroll.
		beq 	_EXPCScroll
		;
		clc 								; add width to address.
		lda 	EXTAddress
		adc 	EXTScreenWidth
		sta 	EXTAddress
		bcc 	_EXPCExit
		inc 	EXTAddress+1
		bra 	_EXPCExit
		;
		;		Move left / beginning of line.
		;
_EXPCLeft:
		dec 	EXTColumn
		bpl 	_EXPCExit
_EXPCBegin:
		stz 	EXTColumn
		bra 	_EXPCExit
		;
		;		Scroll screen up, blank line.
		;
_EXPCScroll:
		dec 	EXTRow 						; the height-1 th line.
		jsr 	EXTScreenScroll 			; scroll the screen
		bra 	_EXPCExit
		;
		;		Set FGR/BGR colour
		;
_EXPCColour:
		cmp 	#$A0						; 80-9F set foreground/background
		bcs 	_EXPCExit
		jsr 	_EXPCHandleColour
		bra 	_EXPCExit
		;
		;		Handle control characters 00-1F 80-FF
		;
_EXPCControl:
		cmp 	#$11 						; only handle 00-10.
		bcs 	_EXPCExit
		asl 	a 							; double into X
		tax
		jmp 	(_EXPCActionTable,x) 		; and execute code.
		;
		;		Up
		;
_EXPCUp:
		lda 	EXTRow 						; already at top ?
		beq 	_EXPCExit
		dec 	EXTRow 						; up one in position/address
		sec
		lda 	EXTAddress
		sbc 	EXTScreenWidth
		sta 	EXTAddress
		bcs 	_EXPCExit
		dec 	EXTAddress+1
		bra 	_EXPCExit
		;
		;		Right/End of line
		;
_EXPCRight:
		iny
		sty 	EXTColumn
		cpy 	EXTScreenWidth
		bne 	_EXPCExit
_EXPCEnd:
		lda 	EXTScreenWidth
		dec 	a
		sta 	EXTColumn
		;
		;		Exit
		;
_EXPCExit:
		jsr 	EXTSetHardwareCursor 		; place the physical cursor.
		pla
		sta 	1
		ply
		plx
		pla
		rts
		;
		;		Clear
		;
_EXPCClearScreen:
		jsr		EXTClearScreenCode
		bra 	_EXPCExit
		;
		;		Down
		;
_EXPCDown:
		lda 	EXTScreenHeight 			; at the bottom
		dec 	a
		cmp 	EXTRow
		beq 	_EXPCExit
		inc 	EXTRow 						; down one in position/address
		clc
		lda 	EXTAddress
		adc 	EXTScreenWidth
		sta 	EXTAddress
		bcc 	_EXPCExit
		inc 	EXTAddress+1
		bra 	_EXPCExit
		;
		;		Tab
		;
_EXPCTab:
		lda 	EXTColumn 					; next tab stop
		and 	#$F8
		clc
		adc 	#8
		sta 	EXTColumn
		cmp 	EXTScreenWidth 				; too far, stick end of line.
		bcc 	_EXPCExit
		bra 	_EXPCEnd
		;
		;		Backspace
		;
_EXPCBackSpace:
		dey
		bmi 	_EXPCExit
		dec 	EXTColumn
		lda 	#2
		sta 	1
		lda 	#32
		sta 	(EXTAddress),y
		bra 	_EXPCExit
		;
		;		Vector table for CTRL+A to CTRL+P
		;
_EXPCActionTable:
		.word 	_EXPCExit 					; 00
		.word 	_EXPCBegin 					; 01 A Start of Line
		.word 	_EXPCLeft 					; 02 B Left
		.word 	_EXPCExit 					; 03 <Break>
		.word 	_EXPCExit 					; 04
		.word 	_EXPCEnd 					; 05 E End of Line
		.word 	_EXPCRight 					; 06 F Right
		.word 	_EXPCExit 					; 07
		.word 	_EXPCBackspace 				; 08 H Backspace
		.word 	_EXPCTab 					; 09 I Tab
		.word 	_EXPCExit 					; 0A
		.word 	_EXPCExit 					; 0B
		.word 	_EXPCClearScreen			; 0C L CLS
		.word 	_EXPCCRLF 					; 0D M CR/LF
		.word 	_EXPCDown 					; 0E N Down
		.word 	_EXPCExit 					; 0F
		.word 	_EXPCUp 					; 10 P Up
;
;		Handle colour change (80-9F)
;
_EXPCHandleColour
		cmp 	#$90 						; 8x foreground 9x background
		bcs 	_EXPCBackground
		;
		asl 	a 							; shift it 4 bits to the right.
		asl 	a
		asl 	a
		asl 	a
		ldx 	#$0F 						; Mask in X
_EXPCUpdate:
		pha 								; save new colour
		txa 								; get mask
		and 	EXTTextColour 				; mask out old.
		sta 	EXTTextColour
		pla 								; or in new colour
		ora 	EXTTextColour
		sta 	EXTTextColour
		rts
_EXPCBackground:
		and 	#$0F 						; get the colour
		ldx 	#$F0 						; mask
		bra 	_EXPCUpdate

EXTScreenScroll:
		lda 	#2 							; select text page
		sta 	1
		lda		#32 						; fill with space
		jsr 	EXTScrollFill
		inc 	1 							; select colour page
		lda 	EXTTextColour
		jsr 	EXTScrollFill
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		cls.asm
;		Purpose:	Clear Screen
;		Created:	14th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Clear the display
;
; ************************************************************************************************

EXTClearScreenCode:
		;
		lda 	#2 							; select text page
		sta 	1
		lda		#32 						; fill with space
		jsr 	_EXTCSFill
		inc 	1 							; select colour page
		lda 	EXTTextColour
		jsr 	_EXTCSFill
		bra 	EXTHomeCursor
		;
		;		Fill all text memory C000-D2FF with A - page set by caller
		;
_EXTCSFill:
		tax
		lda 	#EXTMemory & $FF
		sta 	EXTAddress
		lda 	#EXTMemory >> 8
		sta 	EXTAddress+1
_EXTCSFill1:
		ldy 	#0
		txa
_EXTCSFill2:
		sta 	(EXTAddress),y
		iny
		bne 	_EXTCSFill2
		inc 	EXTAddress+1
		lda 	EXTAddress+1
		cmp 	#$D2
		bne 	_EXTCSFill1
		txa
_EXTCSFill3:
		sta 	(EXTAddress),y
		iny
		cpy 	#$C0
		bne 	_EXTCSFill3
		rts

; ************************************************************************************************
;
;									Home the cursor
;
; ************************************************************************************************

EXTHomeCursor:
		stz 	EXTRow 						; reset row & column
		stz 	EXTColumn
		lda 	#EXTMemory & $FF 			; set address
		sta 	EXTAddress
		lda 	#EXTMemory >> 8
		sta 	EXTAddress+1

; ************************************************************************************************
;
;									Position the cursor
;
; ************************************************************************************************

EXTSetHardwareCursor:
		stz 	1 							; I/O Page zero
		lda 	#1+4 						; enable cursor
		sta 	$D010
		lda 	#$B1
		sta 	$D012
		lda 	EXTColumn
		sta 	$D014 						; set cursor position
		stz 	$D015
		lda 	EXTRow
		sta 	$D016
		stz 	$D017
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		input.asm
;		Purpose:	Input one line, screen scrape
;		Created:	17th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Input line into lineBuffer
;
;		This can use ExtInputSingleCharacter *or* $FFCF, the screen editor or similar.
;
; ************************************************************************************************

EXTInputLine:
		pha
		phx
		phy

		lda 	1 							; save I/O page
		pha
_EILLoop:
		jsr 	PagedInputSingleCharacter
		cmp 	#13 						; scrape line if exit.
		beq 	_EILExit
		cmp 	#8 							; handle backspace
		beq 	_EILBackspace
		cmp 	#' '						; < space, print it
		bcc 	_EILPrintLoop
		cmp 	#$7F 						; if -ve print it
		bcs 	_EILPrintLoop
		;
		pha 								; save character
		lda 	#2  						; insert a space
		sta 	1
		jsr 	EXTILInsert 				; insert in text screen
		inc 	1
		jsr 	EXTILInsert 				; insert in colour screen
		pla 								; get character back.
_EILPrintLoop:
		jsr 	PagedPrintCharacter
		bra 	_EILLoop
		rts
		;
		;		Backspace
		;
_EILBackspace:
		lda 	EXTColumn					; can we backspace ?
		beq 	_EILLoop
		lda 	#2 							; move cursor left
		jsr 	PagedPrintCharacter
		;
		lda 	#2 							; text block
		sta 	1
		lda 	#' ' 						; backspace text.
		jsr 	EXTILDelete
		;
		inc 	1 							; colour block
		ldy 	EXTColumn 					; get attribute of last character
		dey
		lda 	(EXTAddress),y
		jsr 	EXTILDelete 				; backspace attribute
		bra 	_EILLoop 					; and go round.
		;
		;		Copy line from screen into input buffer and right trim.
		;
_EILExit:
		lda 	#2 							; switch to page 2
		sta 	1
		ldy 	#0 							; copy current line into buffer.
_EILScrapeLine:
		lda 	(EXTAddress),y
		sta 	lineBuffer,y
		iny
		cpy 	EXTScreenWidth
		bne 	_EILScrapeLine
		;
_EILTrimSpaces: 							; right trim
		dey
		beq 	_EILEndTrim
		lda 	lineBuffer,y
		cmp 	#' '
		beq 	_EILTrimSpaces
		iny 								; trim after non space character.
_EILEndTrim:
		lda 	#0 							; trim here.
		sta 	lineBuffer,y
		lda 	#13 						; echo the RETURN
		jsr 	PagedPrintCharacter
		pla 								; reset I/O page
		sta 	1

		ply
		plx
		pla
		rts
;
;		Backspace from current position, put A on the end
;
EXTILDelete:
		pha 								; save the new character
		ldy 	EXTColumn 					; start copying from here.
_EXTDLoop:
		iny 								; copy one byte down.
		lda 	(EXTAddress),y
		dey
		sta 	(EXTAddress),y
		;
		iny 								; do till end of line.
		cpy 	EXTScreenWidth
		bcc 	_EXTDLoop
		;
		dey 	 							; write in last slot.
		pla
		sta 	(EXTAddress),y
		rts
;
;		Insert at current position.
;
EXTILInsert:
		ldy 	EXTScreenWidth 				; end position
_EXTILoop:
		dey 								; back one
		cpy 	EXTColumn 					; exit if reached insert point.
		beq 	_EXTIExit
		dey 								; copy one byte up.
		lda 	(EXTAddress),y
		iny
		sta 	(EXTAddress),y
		bra 	_EXTILoop
_EXTIExit:
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		scroll.asm
;		Purpose:	Scroll one part of screen
;		Created:	16th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;						Scroll screen in current i/o page, fill with A
;
; ************************************************************************************************

EXTScrollFill:
		tax									; save value to fill with

		lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
		pha
		lda 	zTemp0+1
		pha
		lda 	zTemp1
		pha
		lda 	zTemp1+1
		pha

		lda 	#$C0 						; copy from C000+length to C000
		sta 	zTemp0+1
		sta 	zTemp1+1
		stz 	zTemp0
		lda 	EXTScreenWidth
		sta 	zTemp1
		ldy 	#0
_EXSFCopy1: 								; do one page
		lda 	(zTemp1),y
		sta 	(zTemp0),y
		iny
		bne 	_EXSFCopy1
		inc 	zTemp0+1 					; next page
		inc 	zTemp1+1
		lda 	zTemp1+1
		cmp 	#$D3
		bne 	_EXSFCopy1

		ldy 	EXTScreenWidth 				; blank the bottom line.
		txa
_EXSFFill1:
		dey
		sta 	(EXTAddress),y
		cpy 	#0
		bpl 	_EXSFFill1

		pla
		sta 	zTemp1+1
		pla
		sta 	zTemp1
		pla
		sta 	zTemp0+1
		pla
		sta 	zTemp0

		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		data.asm
;		Purpose:	Console Data
;		Created:	14th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section storage

EXTMemory = $C000
EXTTextPage = $02
EXTColourPage = $03

EXTDummySpace = 1 							; fake-space for CR character.
EXTCBlack = 0

EXTRow: 									; current row
		.fill 	1
EXTColumn: 									; current column
		.fill 	1
EXTTextColour: 								; current colour
		.fill 	1
EXTScreenWidth:	 							; screen size
		.fill 	1
EXTScreenHeight:
		.fill 	1

		.send storage

		.section zeropage

EXTAddress: 								; current address on screen of start of line.
		.fill 	2

		.send zeropage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		extern.asm
;		Purpose:	External functions
;		Created:	29th September 2022
;		Reviewed:
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Any required initialisation
;
; ************************************************************************************************

EXTInitialise:
		stz 	1 							; Access I/O
		stz 	$D004 						; Disable border
		stz 	$D008
		stz 	$D009
		lda 	#1+8						; Timer On at 70Hz counting up.
		sta 	$D658
		;
		lda 	#CONForeground * 16 + CONBackground
		sta 	EXTTextColour
		;
		lda 	#80 						; set screen dimensions.
		sta 	EXTScreenWidth
		lda 	#60
		sta 	EXTScreenHeight

		stz 	1
		rts

; ************************************************************************************************
;
;											Get Character
;
;	Returns:
;			8 		Backspace, if not far left
;			9 		Tab spacing (Ctrl+I)
;			13 		CR/LF with scrolling if required
;			32..127	Corresponding ASCII character
;
; ************************************************************************************************

EXTInputSingleCharacter:
PagedInputSingleCharacter:
		phx
		phy
_EISCWait:
		jsr 	PagedSNDUpdate
		jsr 	$FFE4
		cmp 	#0
		beq 	_EISCWait
		ply
		plx
		rts

; ************************************************************************************************
;
;				Break Check. Checks Ctrl+C, Escape or whatever. Returns Z if pressed
;
; ************************************************************************************************

EXTBreakCheck:
		jmp		$FFE1

; ************************************************************************************************
;
;						Read Game Controller A -> A (Fire/Up/Down/Left/Right)
;
; ************************************************************************************************

ifpressed .macro
		lda 	#((\1) >> 3)
		jsr 	$FFE7
		and 	#($01 << ((\1) & 7))
		beq 	_NoSet1
		txa
		ora 	#\2
		tax
_NoSet1:
		.endm

EXTReadController:
		phx
		ldx 	#0
		.ifpressed $2D,1 				; X right
		.ifpressed $2C,2 				; Z left
		.ifpressed $32,4 				; M down
		.ifpressed $25,8 				; K up
		.ifpressed $26,16 				; L fire#1
		txa
		plx
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
