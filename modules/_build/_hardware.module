;
;	This file is automatically generated
;

hardwareIntegrated=1

; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		colours.inc
;		Purpose:	Console colour scheme
;		Created:	17th November 2022
;		Reviewed: 	17th February 2022
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

; ************************************************************************************************
;
;									Standard colours
;
; ************************************************************************************************

CONBlack = 0
CONGrey = 1
CONDarkBlue = 2
CONGreen = 3
CONPurple = 4
CONBrown = 5
CONOrange = 6
CONCyan = 7
CONDarkGrey = 8
CONLightGrey = 9
CONLightBlue = 10
CONLightGreen = 11
CONPink = 12
CONRed = 13
CONYellow = 14
CONWhite = 15

; ************************************************************************************************
;
;									BASIC text colours
;
; ************************************************************************************************

CONForeground = CONLightGrey
CONBackground = CONDarkBlue

CLICommandLine = CONLightGrey



; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		charout.asm
;		Purpose:	Output character
;		Created:	14th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;			Print character as standard, but treat all control characters as font
;
; ************************************************************************************************

Export_EXTPrintNoControl:
		pha
		phx
		phy

		ldx 	1
		phx

		ldy 	EXTColumn 					; Y = Row, e.g. points to character.
		bra 	PrintCharacterOnly

; ************************************************************************************************
;
;									Output Character A
;
;		control+'a'  ($01)  begin
;		control+'b'  ($02)  left
;		control+'e'  ($05)  end
;		control+'f'  ($06)  right
;		control+'h'  ($08)  backspace
;		control+'i'  ($09)  tab
;		control+'l'  ($0C)  ff
;		control+'m'  ($0D)  cr
;		control+'n'  ($0E)  down
;		control+'p'  ($10)  up
;					  $8x 	set background
;					  $9x 	set foreground
;
; ************************************************************************************************

Export_EXTPrintCharacter:
PAGEDPrintCharacter:
		pha
		phx
		phy

		ldx 	1
		phx

		ldy 	EXTColumn 					; Y = Row, e.g. points to character.

		ora 	#$00 						; check $80-$FF
		bmi 	EXPCColour
		cmp 	#$20 						; check $00-$1F
		bcc 	EXPCControl
		;
		;		Handle character.
		;
PrintCharacterOnly:
		ldx 	#2 							; select char memory
		stx 	1
		sta 	(EXTAddress),y
		inc 	1 							; select colour memory
		lda 	EXTTextColour
		sta 	(EXTAddress),y
		;
		iny 								; advance horizontal position
		sty 	EXTColumn
		cpy 	EXTScreenWidth 				; reached RHS ?
		bcc 	EXPCExit 					; no, then exit.
		;
		;		Carriage return.
		;
EXPCCRLF:
		inc 	EXTRow  					; bump row
		stz 	EXTColumn 					; back to column 0
		lda 	EXTRow 						; check if reached the bottom ?
		cmp 	EXTScreenHeight 			; if so, then scroll.
		beq 	EXPCScroll
		;
		clc 								; add width to address.
		lda 	EXTAddress
		adc 	EXTScreenWidth
		sta 	EXTAddress
		bcc 	EXPCExit
		inc 	EXTAddress+1
		bra 	EXPCExit
		;
		;		Move left / beginning of line.
		;
EXPCLeft:
		dec 	EXTColumn
		bpl 	EXPCExit
EXPCBegin:
		stz 	EXTColumn
		bra 	EXPCExit
		;
		;		Scroll screen up, blank line.
		;
EXPCScroll:
		dec 	EXTRow 						; the height-1 th line.
		jsr 	EXTScreenScroll 			; scroll the screen
		bra 	EXPCExit
		;
		;		Set FGR/BGR colour
		;
EXPCColour:
		cmp 	#$A0						; 80-9F set foreground/background
		bcs 	EXPCExit
		jsr 	EXPCHandleColour
		bra 	EXPCExit
		;
		;		Handle control characters 00-1F 80-FF
		;
EXPCControl:
		cmp 	#$11 						; only handle 00-10.
		bcs 	EXPCExit
		asl 	a 							; double into X
		tax
		jmp 	(EXPCActionTable,x) 		; and execute code.
		;
		;		Up
		;
EXPCUp:
		lda 	EXTRow 						; already at top ?
		beq 	EXPCExit
		dec 	EXTRow 						; up one in position/address
		sec
		lda 	EXTAddress
		sbc 	EXTScreenWidth
		sta 	EXTAddress
		bcs 	EXPCExit
		dec 	EXTAddress+1
		bra 	EXPCExit
		;
		;		Right/End of line
		;
EXPCRight:
		iny
		sty 	EXTColumn
		cpy 	EXTScreenWidth
		bne 	EXPCExit
		dey
EXPCSetColumnY: 							; set column to Y
		sty 	EXTColumn
		;
		;		Exit
		;
EXPCExit:
		jsr 	EXTSetHardwareCursor 		; place the physical cursor.
		pla
		sta 	1
		ply
		plx
		pla
		rts
		;
		;		Clear
		;
EXPCClearScreen:
		jsr		EXTClearScreenCode
		bra 	EXPCExit
		;
		;		Down
		;
EXPCDown:
		lda 	EXTScreenHeight 			; at the bottom
		dec 	a
		cmp 	EXTRow
		beq 	EXPCExit
		inc 	EXTRow 						; down one in position/address
		clc
		lda 	EXTAddress
		adc 	EXTScreenWidth
		sta 	EXTAddress
		bcc 	EXPCExit
		inc 	EXTAddress+1
		bra 	EXPCExit
		;
		;		Tab
		;
EXPCTab:
		lda 	EXTColumn 					; next tab stop
		and 	#$F8
		clc
		adc 	#8
		sta 	EXTColumn
		cmp 	EXTScreenWidth 				; too far, stick end of line.
		bcc 	EXPCExit
		bra 	EXPCEnd
		;
		;		Backspace
		;
EXPCBackSpace:
		dey
		bmi 	EXPCExit
		dec 	EXTColumn
		lda 	#2
		sta 	1
		lda 	#32
		sta 	(EXTAddress),y
		bra 	EXPCExit
		;
		;		End of line
		;
EXPCEnd:
		lda 	#2 							; access text screen
		sta 	1
		ldy 	EXTScreenWidth 				; point to last character
		dey
EXPCEndSearch:
		dey 								; if past start, move to col 0.
		bmi 	EXPCFound
		lda 	(EXTAddress),y 				; keep going back till non space found
		cmp 	#' '
		beq 	EXPCEndSearch
EXPCFound:
		iny 								; move to following cell.
		bra 	EXPCSetColumnY
		;
		;		Clear to end of line
		;
EXPCClearEOL:
		lda 	#2 							; access character RAM
		sta 	1
		lda 	#' ' 						; write space
		sta 	(EXTAddress),y
		iny
		cpy 	EXTScreenWidth 				; until RHS of screen.
		bcc 	EXPCClearEOL
		bra 	EXPCExit
		;
		;		Vector table for CTRL+A to CTRL+P
		;
EXPCActionTable:
		.word 	EXPCExit 					; 00
		.word 	EXPCBegin 					; 01 A Start of Line
		.word 	EXPCLeft 					; 02 B Left
		.word 	EXPCExit 					; 03 <Break>
		.word 	EXPCExit 					; 04
		.word 	EXPCEnd 					; 05 E End of Line
		.word 	EXPCRight 					; 06 F Right
		.word 	EXPCExit 					; 07
		.word 	EXPCBackSpace 				; 08 H Backspace
		.word 	EXPCTab 					; 09 I Tab
		.word 	EXPCExit 					; 0A
		.word 	EXPCClearEOL 				; 0B K Clear to EOL
		.word 	EXPCClearScreen			; 0C L CLS
		.word 	EXPCCRLF 					; 0D M CR/LF
		.word 	EXPCDown 					; 0E N Down
		.word 	EXPCExit 					; 0F
		.word 	EXPCUp 					; 10 P Up
;
;		Handle colour change (80-9F)
;
EXPCHandleColour:
		cmp 	#$90 						; 8x foreground 9x background
		bcs 	EXPCBackground
		;
		asl 	a 							; shift it 4 bits to the right.
		asl 	a
		asl 	a
		asl 	a
		ldx 	#$0F 						; Mask in X
EXPCUpdate:
		pha 								; save new colour
		txa 								; get mask
		and 	EXTTextColour 				; mask out old.
		sta 	EXTTextColour
		pla 								; or in new colour
		ora 	EXTTextColour
		sta 	EXTTextColour
		rts
EXPCBackground:
		and 	#$0F 						; get the colour
		ldx 	#$F0 						; mask
		bra 	EXPCUpdate

EXTScreenScroll:
		lda 	#2 							; select text page
		sta 	1
		lda		#32 						; fill with space
		jsr 	EXTScrollFill
		inc 	1 							; select colour page
		lda 	EXTTextColour
		jsr 	EXTScrollFill
		rts

; ************************************************************************************************
;
;										Print Hex in space
;
; ************************************************************************************************

PAGEDPrintHex:
		pha
		lda 	#' '
		jsr 	PAGEDPrintCharacter
		pla
		pha
		lsr 	a
		lsr 	a
		lsr 	a
		lsr 	a
		jsr 	_PPHNibble
		pla
_PPHNibble:
		pha
		and 	#15
		cmp 	#10
		bcc 	_PPHOut
		adc 	#6
_PPHOut:adc 	#48
		jsr		PAGEDPrintCharacter
		pla
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;		27/11/22 		Changed End so to end of text line, e.g. after last non space
;						Added Ctrl+K delete to EOL suggested by Jessie O.
;		01/01/23 		Added routine to print using only font characters.
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		cls.asm
;		Purpose:	Clear Screen
;		Created:	14th November 2022
;		Reviewed: 	17th February 2022
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Clear the display
;
; ************************************************************************************************

EXTClearScreenCode:
		;
		lda 	#2 							; select text page
		sta 	1
		lda		#32 						; fill with space
		jsr 	_EXTCSFill
		inc 	1 							; select colour page
		lda 	EXTTextColour
		jsr 	_EXTCSFill
		bra 	EXTHomeCursor				; home cursor
		;
		;		Fill all text memory C000-D2FF with A - page set by caller
		;
_EXTCSFill:
		tax
		lda 	#EXTMemory & $FF
		sta 	EXTAddress
		lda 	#EXTMemory >> 8
		sta 	EXTAddress+1
_EXTCSFill1:
		ldy 	#0
		txa
_EXTCSFill2:
		sta 	(EXTAddress),y
		iny
		bne 	_EXTCSFill2
		inc 	EXTAddress+1
		lda 	EXTAddress+1
		cmp 	#$D2
		bne 	_EXTCSFill1
		txa
_EXTCSFill3:
		sta 	(EXTAddress),y
		iny
		cpy 	#$C0
		bne 	_EXTCSFill3
		rts

; ************************************************************************************************
;
;									Home the cursor
;
; ************************************************************************************************

EXTHomeCursor:
		stz 	EXTRow 						; reset row & column
		stz 	EXTColumn
		lda 	#EXTMemory & $FF 			; set address in I/O memory
		sta 	EXTAddress
		lda 	#EXTMemory >> 8
		sta 	EXTAddress+1

; ************************************************************************************************
;
;									Position the cursor
;
; ************************************************************************************************

EXTSetHardwareCursor:
		stz 	1 							; I/O Page zero
		lda 	EXTColumn
		sta 	$D014 						; set cursor position
		stz 	$D015
		lda 	EXTRow
		sta 	$D016
		stz 	$D017
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;		02/03/23 		Cursor being set up moved to initialise.
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		data.asm
;		Purpose:	Console Data
;		Created:	14th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section storage

EXTMemory = $C000
EXTTextPage = $02
EXTColourPage = $03

EXTDummySpace = 1 							; fake-space for CR character.
EXTCBlack = 0

EXTRow: 									; current row
		.fill 	1
EXTColumn: 									; current column
		.fill 	1
EXTTextColour: 								; current colour
		.fill 	1
EXTScreenWidth:	 							; screen size
		.fill 	1
EXTScreenHeight:
		.fill 	1

		.send storage

		.section zeropage

EXTAddress: 								; current address on screen of start of line.
		.fill 	2

		.send zeropage

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		extern.asm
;		Purpose:	External functions
;		Created:	29th September 2022
;		Reviewed: 	27th November 2022
;		Author : 	Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;									Any required initialisation
;
; ************************************************************************************************

Export_EXTInitialise:
		stz 	1 							; Access I/O page 0
		stz 	$D004 						; Disable border
		stz 	$D008
		stz 	$D009
		lda 	#1+8						; Timer On at 70Hz counting up.
		sta 	$D658
		;
		lda 	#$52
		sta 	EXTTextColour
		;
		lda 	#80 						; set screen dimensions.
		sta 	EXTScreenWidth
		lda 	#60
		sta 	EXTScreenHeight

		lda 	#1+4 						; enable cursor
		sta 	$D010
		lda 	#214 						; cursor character
		sta 	$D012

		jsr 	EXTClearScreenCode 			; clear the screen

_EXMoveDown: 								; move down past prompt
		lda 	#13
		jsr 	PAGEDPrintCharacter
		lda 	EXTRow
		cmp 	#Header_Height-4
		bne 	_EXMoveDown
		jsr 	EXTShowHeader
		stz 	1
		rts



		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;		27/11/22 		Rather than clearing screen, it now goes to line 6 after initialising.
; 		20/12/22 		Joystick data now read from $DC00
;		02/03/23 		Cursor on/character moved here.
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		header.asm
;		Purpose:	Display the header/boot display
;		Created:	14th December 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;											Show header
;
; ************************************************************************************************

EXTShowHeader:
		lda 	1
		pha
		lda 	8+3
		pha
		lda 	8+4
		clc
		adc 	#3
		sta 	8+3
		;
		ldx 	#(Header_jchars & $FF)
		ldy 	#(Header_jchars >> 8)-$40

		stz 	1
		lda 	$D6A7
		and 	#$10
		beq 	_EXTSHNotK1

		ldx 	#(Header_kchars & $FF)
		ldy 	#(Header_kchars >> 8)-$40
_EXTSHNotK1:
		lda 	#2
		jsr 	_ESHCopyBlock
		;
		ldx 	#(Header_jattrs & $FF)
		ldy 	#(Header_jattrs >> 8)-$40

		stz 	1
		lda 	$D6A7
		and 	#$10
		beq 	_EXTSHNotK2

		ldx 	#(Header_kattrs & $FF)
		ldy 	#(Header_kattrs >> 8)-$40
_EXTSHNotK2:
		lda 	#3
		jsr 	_ESHCopyBlock
		;
		stz 	1
		ldx 	#16*4-1
_EXTCopyLUT:
		lda 	Header_Palette-$4000,x
		sta 	$D800,x
		sta 	$D840,x
		dex
		bpl 	_EXTCopyLUT
		pla
		sta 	8+3
		pla
		rts

_ESHCopyBlock:
		sta 	1
		stx 	zTemp0 						; zTemp0 is RLE packed data
		sty 	zTemp0+1
		.set16 	zTemp1,$C000 				; where it goes.
_ESHCopyLoop:
		lda 	(zTemp0) 					; get next character
		cmp 	#Header_RLE 				; packed ?
		beq 	_ESHUnpack
		sta 	(zTemp1) 					; copy it out.
		lda 	#1 							; source add 1
		ldy 	#1 							; dest add 1
_ESHNext:
		clc 								; zTemp0 + A
		adc 	zTemp0
		sta 	zTemp0
		bcc 	_ESHNoCarry
		inc 	zTemp0+1
_ESHNoCarry:
		tya 								; zTemp1 + Y
		clc
		adc 	zTemp1
		sta 	zTemp1
		bcc 	_ESHCopyLoop
		inc 	zTemp1+1
		bra 	_ESHCopyLoop
		;
_ESHUnpack:
		ldy 	#2 							; get count into X
		lda 	(zTemp0),y
		tax
		dey 								; byte into A
		lda 	(zTemp0),y
		beq 	_ESHExit 					; exit if zero.
		ldy 	#0 							; copy start position
_ESHCopyOut:
		sta 	(zTemp1),y
		iny
		dex
		bne 	_ESHCopyOut
		lda 	#3 							; Y is bytes on screen, 3 bytes from source
		bra 	_ESHNext
		;
_ESHExit:
		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
; ************************************************************************************************
; ************************************************************************************************
;
;		Name:		scroll.asm
;		Purpose:	Scroll one part of screen
;		Created:	16th November 2022
;		Reviewed: 	No
;		Author:		Paul Robson (paul@robsons.org.uk)
;
; ************************************************************************************************
; ************************************************************************************************

		.section code

; ************************************************************************************************
;
;						Scroll screen in current i/o page, fill with A
;
; ************************************************************************************************

EXTScrollFill:
		tax									; save value to fill with

		lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
		pha
		lda 	zTemp0+1
		pha
		lda 	zTemp1
		pha
		lda 	zTemp1+1
		pha

		lda 	#$C0 						; copy from C000+length to C000
		sta 	zTemp0+1
		sta 	zTemp1+1
		stz 	zTemp0
		lda 	EXTScreenWidth
		sta 	zTemp1
		ldy 	#0
_EXSFCopy1: 								; do one page
		lda 	(zTemp1),y
		sta 	(zTemp0),y
		iny
		bne 	_EXSFCopy1
		inc 	zTemp0+1 					; next page
		inc 	zTemp1+1
		lda 	zTemp1+1
		cmp 	#$D3
		bne 	_EXSFCopy1

		ldy 	EXTScreenWidth 				; blank the bottom line.
		txa
_EXSFFill1:
		dey
		sta 	(EXTAddress),y
		cpy 	#0
		bpl 	_EXSFFill1

		pla
		sta 	zTemp1+1
		pla
		sta 	zTemp1
		pla
		sta 	zTemp0+1
		pla
		sta 	zTemp0

		rts

		.send code

; ************************************************************************************************
;
;									Changes and Updates
;
; ************************************************************************************************
;
;		Date			Notes
;		==== 			=====
;
; ************************************************************************************************
