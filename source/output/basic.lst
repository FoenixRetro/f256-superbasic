
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Jan 20 13:25:00 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_LEFTDOLLARLPAREN                 = $98; $98 LEFT$(
=$99						KWD_LENLPAREN                        = $99; $99 LEN(
=$9a						KWD_MAXLPAREN                        = $9a; $9a MAX(
=$9b						KWD_MIDDOLLARLPAREN                  = $9b; $9b MID$(
=$9c						KWD_MINLPAREN                        = $9c; $9c MIN(
=$9d						KWD_NOTLPAREN                        = $9d; $9d NOT(
=$9e						KWD_PEEKLPAREN                       = $9e; $9e PEEK(
=$9f						KWD_PEEKDLPAREN                      = $9f; $9f PEEKD(
=$a0						KWD_PEEKLLPAREN                      = $a0; $a0 PEEKL(
=$a1						KWD_PEEKWLPAREN                      = $a1; $a1 PEEKW(
=$a2						KWD_PLAYINGLPAREN                    = $a2; $a2 PLAYING(
=$a3						KWD_RANDOMLPAREN                     = $a3; $a3 RANDOM(
=$a4						KWD_RIGHTDOLLARLPAREN                = $a4; $a4 RIGHT$(
=$a5						KWD_RNDLPAREN                        = $a5; $a5 RND(
=$a6						KWD_SGNLPAREN                        = $a6; $a6 SGN(
=$a7						KWD_SPCLPAREN                        = $a7; $a7 SPC(
=$a8						KWD_STRDOLLARLPAREN                  = $a8; $a8 STR$(
=$a9						KWD_TIMERLPAREN                      = $a9; $a9 TIMER(
=$aa						KWD_TRUE                             = $aa; $aa TRUE
=$ab						KWD_VALLPAREN                        = $ab; $ab VAL(
=$ac						KWD_FOR                              = $ac; $ac FOR
=$ad						KWD_IF                               = $ad; $ad IF
=$ae						KWD_PROC                             = $ae; $ae PROC
=$af						KWD_REPEAT                           = $af; $af REPEAT
=$b0						KWD_WHILE                            = $b0; $b0 WHILE
=$b1						KWD_ENDIF                            = $b1; $b1 ENDIF
=$b2						KWD_ENDPROC                          = $b2; $b2 ENDPROC
=$b3						KWD_NEXT                             = $b3; $b3 NEXT
=$b4						KWD_THEN                             = $b4; $b4 THEN
=$b5						KWD_UNTIL                            = $b5; $b5 UNTIL
=$b6						KWD_WEND                             = $b6; $b6 WEND
=$b7						KWD_AT                               = $b7; $b7 AT
=$b8						KWD_BY                               = $b8; $b8 BY
=$b9						KWD_CALL                             = $b9; $b9 CALL
=$ba						KWD_CIRCLE                           = $ba; $ba CIRCLE
=$bb						KWD_CLEAR                            = $bb; $bb CLEAR
=$bc						KWD_COLOR                            = $bc; $bc COLOR
=$bd						KWD_COLOUR                           = $bd; $bd COLOUR
=$be						KWD_DATA                             = $be; $be DATA
=$bf						KWD_DIM                              = $bf; $bf DIM
=$c0						KWD_DOWNTO                           = $c0; $c0 DOWNTO
=$c1						KWD_ELSE                             = $c1; $c1 ELSE
=$c2						KWD_FROM                             = $c2; $c2 FROM
=$c3						KWD_GFX                              = $c3; $c3 GFX
=$c4						KWD_HERE                             = $c4; $c4 HERE
=$c5						KWD_IMAGE                            = $c5; $c5 IMAGE
=$c6						KWD_LET                              = $c6; $c6 LET
=$c7						KWD_LINE                             = $c7; $c7 LINE
=$c8						KWD_LOCAL                            = $c8; $c8 LOCAL
=$c9						KWD_MEMCOPY                          = $c9; $c9 MEMCOPY
=$ca						KWD_OFF                              = $ca; $ca OFF
=$cb						KWD_ON                               = $cb; $cb ON
=$cc						KWD_OUTLINE                          = $cc; $cc OUTLINE
=$cd						KWD_PALETTE                          = $cd; $cd PALETTE
=$ce						KWD_PLOT                             = $ce; $ce PLOT
=$cf						KWD_POKE                             = $cf; $cf POKE
=$d0						KWD_POKED                            = $d0; $d0 POKED
=$d1						KWD_POKEL                            = $d1; $d1 POKEL
=$d2						KWD_POKEW                            = $d2; $d2 POKEW
=$d3						KWD_READ                             = $d3; $d3 READ
=$d4						KWD_RECT                             = $d4; $d4 RECT
=$d5						KWD_REM                              = $d5; $d5 REM
=$d6						KWD_SOLID                            = $d6; $d6 SOLID
=$d7						KWD_SOUND                            = $d7; $d7 SOUND
=$d8						KWD_SPRITE                           = $d8; $d8 SPRITE
=$d9						KWD_TEXT                             = $d9; $d9 TEXT
=$da						KWD_TO                               = $da; $da TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ac						KWC_FIRST_STRUCTURE = $ac
=$b1						KWC_FIRST_STRUCTURE_DEC = $b1
=$b6						KWC_LAST_STRUCTURE = $b6
=$83						KWC_FIRST_UNARY = $83
=$ab						KWC_LAST_UNARY = $ab

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56				        .text	$f2,$56         			; Signature
>8002		03				        .byte   3               			; 3 blocks
>8003		04				        .byte   4               			; mount at $8000
>8004		40 80				        .word   Boot 	      				; Start here
>8006		00 00				        .word   0 			               	; version
>8008		00 00				        .word   0               			; kernel
>800a		53 75 70 65 72 42 41 53		        .text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c a7 80	jmp $80a7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						EXTInputSingleCharacter:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						GXGraphicDraw:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDCommand:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 ea bb	jsr $bbea		jsr	Export_SNDCommand
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						SNDUpdate:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 1d bc	jsr $bc1d		jsr	Export_SNDUpdate
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKListConvertLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 9b b5	jsr $b59b		jsr	Export_TKListConvertLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts
.809d						TKTokeniseLine:
.809d		e6 0d		inc $0d			inc 8+5
.809f		20 2f b8	jsr $b82f		jsr	Export_TKTokeniseLine
.80a2		08		php			php
.80a3		c6 0d		dec $0d			dec 8+5
.80a5		28		plp			plp
.80a6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80a7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80a9		9a		txs				txs
.80aa		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80ac		09 80		ora #$80			ora 	#$80
.80ae		85 00		sta $00				sta 	0
.80b0		20 cd a6	jsr $a6cd			jsr		UpdateFont 					; update font if between FPGA updates.
.80b3		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80b6		c9 42		cmp #$42			cmp 	#"B"
.80b8		d0 18		bne $80d2			bne 	_NoMachineCode
.80ba		ad 03 20	lda $2003			lda 	$2003
.80bd		c9 54		cmp #$54			cmp 	#"T"
.80bf		d0 11		bne $80d2			bne 	_NoMachineCode
.80c1		ad 04 20	lda $2004			lda 	$2004
.80c4		c9 36		cmp #$36			cmp 	#"6"
.80c6		d0 0a		bne $80d2			bne 	_NoMachineCode
.80c8		ad 05 20	lda $2005			lda 	$2005
.80cb		c9 35		cmp #$35			cmp 	#"5"
.80cd		d0 03		bne $80d2			bne 	_NoMachineCode
.80cf		4c 00 20	jmp $2000			jmp 	$2000
.80d2						_NoMachineCode:
.80d2		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80d5		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80d7		20 99 81	jsr $8199			jsr 	KNLSetDrive
.80da		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80dc		aa		tax				tax
.80dd		a8		tay				tay
.80de		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.80e1		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80e3		20 7f 80	jsr $807f			jsr 	SNDCommand
.80e6		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80e8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80eb		a9 09		lda #$09			lda 	#9
.80ed		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80f0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80f3		64 01		stz $01				stz 	1
.80f5		ad ad d6	lda $d6ad			lda 	$D6AD
.80f8		20 81 83	jsr $8381			jsr 	PrintHex
.80fb		ad ac d6	lda $d6ac			lda 	$D6AC
.80fe		20 81 83	jsr $8381			jsr 	PrintHex
.8101		ad ab d6	lda $d6ab			lda 	$D6AB
.8104		20 81 83	jsr $8381			jsr 	PrintHex
.8107		ad aa d6	lda $d6aa			lda 	$D6AA
.810a		20 81 83	jsr $8381			jsr 	PrintHex
.810d		a9 20		lda #$20			lda 	#32
.810f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8112		ad a8 d6	lda $d6a8			lda 	$D6A8
.8115		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8118		ad a9 d6	lda $d6a9			lda 	$D6A9
.811b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.811e		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8120		a9 2e		lda #$2e			lda 	#Prompt & $FF
.8122		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.8125		20 78 91	jsr $9178			jsr 	NewProgram 					; erase current program
.8128		4c c4 85	jmp $85c4			jmp 	WarmStart					; make same size.
.812b		4c c4 85	jmp $85c4			jmp 	WarmStart
>812e		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8130		09 09 32 30 2f 30 31 2f			.text 9,9,"20/01/23 32"
>8138		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>813d		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8141						ProcessEvents:
.8141		20 d8 81	jsr $81d8			jsr 	KNLSetEventPointer
.8144		20 96 81	jsr $8196			jsr     GetNextEvent 				; get next event
.8147		b0 27		bcs $8170			bcs 	_PEExitZ 					; nothing left to process.
.8149		ad 60 07	lda $0760			lda 	KNLEvent.type 				; go back if event not key.pressed.
.814c		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.814e		d0 f1		bne $8141			bne 	ProcessEvents
.8150		ad 66 07	lda $0766			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8153		d0 ec		bne $8141			bne 	ProcessEvents
.8155		ad 65 07	lda $0765			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8158		c9 03		cmp #$03			cmp 	#3
.815a		f0 11		beq $816d			beq 	_PEReturnBreak  			; no, keep going.
.815c		da		phx				phx
.815d		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8160		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8162		f0 06		beq $816a			beq 	_PENoQueue
.8164		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8167		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.816a						_PENoQueue:
.816a		fa		plx				plx
.816b		80 d4		bra $8141			bra 	ProcessEvents
.816d						_PEReturnBreak:
.816d		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.816f		60		rts				rts
.8170						_PEExitZ:
.8170		a9 00		lda #$00			lda 	#0
.8172		60		rts				rts
.8173						PopKeyboardQueue:
.8173		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8176		f0 17		beq $818f			beq 	_PKQExit 					; zero, then exit.
.8178		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.817b		48		pha				pha
.817c		da		phx				phx 								; drop head of queue
.817d		a2 00		ldx #$00			ldx 	#0
.817f						_PKQLoop:
.817f		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8182		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8185		e8		inx				inx
.8186		e0 07		cpx #$07			cpx 	#7
.8188		d0 f5		bne $817f			bne 	_PKQLoop
.818a		fa		plx				plx
.818b		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.818e		68		pla				pla 								; restore head of queue.
.818f						_PKQExit:
.818f		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8190						TickHandler:
.8190		5a		phy				phy 								; need to preserve Y
.8191		20 89 80	jsr $8089			jsr 	SNDUpdate 					; update sound
.8194		7a		ply				ply
.8195		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8196						GetNextEvent:
.8196		4c 00 ff	jmp $ff00			jmp 	kernel.NextEvent

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8199						KNLSetDrive:
.8199		8d 5f 07	sta $075f			sta 	KNLDefaultDrive
.819c		60		rts				rts
.819d						KNLOpenFileWrite:
.819d		48		pha				pha
.819e		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.81a0		80 03		bra $81a5			bra 	KNLOpenStart
.81a2						KNLOpenFileRead:
.81a2		48		pha				pha
.81a3		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.81a5						KNLOpenStart:
.81a5		85 f5		sta $f5				sta     kernel.args.file.open.mode
.81a7		68		pla				pla
.81a8		20 e3 81	jsr $81e3			jsr 	KNLSetupFileName
.81ab		20 d8 81	jsr $81d8			jsr 	KNLSetEventPointer
.81ae		ad 5f 07	lda $075f			lda 	KNLDefaultDrive 			; currently drive zero only.
.81b1		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.81b3		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.81b6		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.81b8		b0 1d		bcs $81d7			bcs     _out
.81ba						_loop
.81ba		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81bd		20 96 81	jsr $8196			jsr     GetNextEvent
.81c0		b0 f8		bcs $81ba			bcs     _loop
.81c2		ad 60 07	lda $0760			lda 	KNLEvent.type
.81c5		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.81c7		f0 0a		beq $81d3			beq 	_success
.81c9		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.81cb		f0 0a		beq $81d7			beq 	_out
.81cd		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81cf		f0 06		beq $81d7			beq 	_out
.81d1		80 e7		bra $81ba			bra     _loop
.81d3						_success
.81d3		ad 63 07	lda $0763			lda     KNLEvent.file.stream
.81d6		18		clc				clc
.81d7						_out
.81d7		60		rts				rts
.81d8						KNLSetEventPointer:
.81d8		48		pha				pha
.81d9		a9 60		lda #$60			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.81db		85 f0		sta $f0				sta     kernel.args.events+0
.81dd		a9 07		lda #$07			lda     #KNLEvent >> 8
.81df		85 f1		sta $f1				sta     kernel.args.events+1
.81e1		68		pla				pla
.81e2		60		rts				rts
.81e3						KNLSetupFileName:
.81e3		5a		phy				phy 								; save Y on stack
.81e4		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.81e6		86 37		stx $37				stx 	zTemp0+1
.81e8		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.81ea		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.81ec		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.81ee						_KNLGetLength:
.81ee		c8		iny				iny
.81ef		b1 36		lda ($36),y			lda 	(zTemp0),y
.81f1		d0 fb		bne $81ee			bne 	_KNLGetLength
.81f3		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.81f5		7a		ply				ply
.81f6		60		rts				rts
.81f7						KNLReadBlock:
.81f7		85 f3		sta $f3				sta     kernel.args.file.read.stream
.81f9		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81fb		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81fe		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8200		b0 2e		bcs $8230			bcs     _KGNBExitFail               ; report as general error
.8202						_KGRBEventLoop:
.8202		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8205		20 96 81	jsr $8196			jsr     GetNextEvent
.8208		b0 f8		bcs $8202			bcs     _KGRBEventLoop
.820a		ad 60 07	lda $0760			lda 	KNLEvent.type 				; get event
.820d		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.820f		f0 0a		beq $821b			beq     _KNLRBGetNextByte
.8211		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8213		f0 1b		beq $8230			beq 	_KGNBExitFail
.8215		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8217		f0 17		beq $8230			beq 	_KGNBExitFail
.8219		80 e7		bra $8202			bra 	_KGRBEventLoop
.821b						_KNLRBGetNextByte:
.821b		a9 5f		lda #$5f			lda     #<KNLReadBuffer 			; Set the target buffer
.821d		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.821f		a9 06		lda #$06			lda     #>KNLReadBuffer
.8221		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8223		ad 66 07	lda $0766			lda     KNLEvent.file.data.read 	; Set the target length
.8226		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8228		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.822b		ad 66 07	lda $0766			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.822e		18		clc				clc
.822f		60		rts				rts
.8230						_KGNBExitFail:
.8230		38		sec				sec
.8231		60		rts				rts
.8232						KNLWriteBlock:
.8232		da		phx				phx
.8233		5a		phy				phy
.8234		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.8236		a5 36		lda $36				lda     zTemp0 						; save the data location.
.8238		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.823a		a5 37		lda $37				lda     zTemp0+1
.823c		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.823e		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8240		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8243		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.8245		b0 21		bcs $8268			bcs 	_KWBFailed
.8247						_KNLWLoop:
.8247		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.824a		20 96 81	jsr $8196			jsr     GetNextEvent
.824d		b0 f8		bcs $8247			bcs     _KNLWLoop
.824f		ad 60 07	lda $0760			lda     KNLEvent.type 				; various errors.
.8252		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8254		f0 12		beq $8268			beq 	_KWBFailed
.8256		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8258		f0 0e		beq $8268			beq 	_KWBFailed
.825a		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.825c		f0 0a		beq $8268			beq 	_KWBFailed
.825e		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8260		d0 e5		bne $8247			bne 	_KNLWLoop
.8262		18		clc				clc
.8263		ad 66 07	lda $0766			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.8266		80 01		bra $8269			bra 	_KWBExit
.8268						_KWBFailed:
.8268		38		sec				sec
.8269						_KWBExit:
.8269		7a		ply				ply
.826a		fa		plx				plx
.826b		60		rts				rts
.826c						KNLCloseFile:
.826c		85 f3		sta $f3				sta     kernel.args.file.close.stream
.826e		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8271		60		rts				rts
.8272						KNLCheckKeyPressed:
.8272		20 d8 81	jsr $81d8			jsr 	KNLSetEventPointer
.8275		20 96 81	jsr $8196			jsr     GetNextEvent 			; get next event
.8278		b0 0b		bcs $8285			bcs 	_CKPNoEvent 				; no event
.827a		ad 60 07	lda $0760			lda     KNLEvent.type
.827d		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.827f		d0 04		bne $8285			bne 	_CKPNoEvent
.8281		ad 65 07	lda $0765			lda     KNLEvent.key.ascii
.8284		60		rts				rts
.8285						_CKPNoEvent:
.8285		a9 00		lda #$00			lda 	#0
.8287		60		rts				rts
.8288						KNLReadController:
.8288		da		phx				phx
.8289		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.828b		64 01		stz $01				stz 	1 							; switch to I/O 0
.828d		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8290		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8292		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8294		fa		plx				plx
.8295		60		rts				rts
.065f						KNLReadBuffer:
>065f								.fill   256
.075f						KNLDefaultDrive:
>075f								.byte 	?
.0760						KNLEvent
>0760						type        .byte   ?   ; Enum above
>0761						buf         .byte   ?   ; page id or zero
>0762						ext         .byte   ?   ; page id or zero
.0763						key
>0763						keyboard    .byte   ?   ; Keyboard ID
>0764						raw         .byte   ?   ; Raw key ID
>0765						ascii       .byte   ?   ; ASCII value
>0766						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0763						mouse
.0763						delta
>0763						x           .byte   ?
>0764						y           .byte   ?
>0765						z           .byte   ?
>0766						buttons     .byte   ?
.0763						clicks
>0763						inner       .byte   ?
>0764						middle      .byte   ?
>0765						outer       .byte   ?
.0763						joystick
>0763						joy0        .byte   ?
>0764						joy1        .byte   ?
.0763						udp
>0763						token       .byte   ?   ; TODO: break out into fields
.0763						file
>0763						stream      .byte   ?
>0764						cookie      .byte   ?
.0765						data
>0765						requested   .byte   ?   ; Requested number of bytes to read
>0766						read        .byte   ?   ; Number of bytes actually read
.0765						wrote
>0765						requested   .byte   ?   ; Requested number of bytes to read
>0766						wrote       .byte   ?   ; Number of bytes actually read
.0763						directory
>0763						stream      .byte   ?
>0764						cookie      .byte   ?
.0765						volume
>0765						len         .byte   ?   ; Length of volname (in buf)
>0766						flags       .byte   ?   ; block size, text encoding
.0765						file
>0765						len         .byte   ?
>0766						flags       .byte   ?   ; block scale, text encoding, approx size
.0765						free
>0765						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8296						AssembleGroup1:
.8296		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8298		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.829b		80 02		bra $829f			bra 	AsmGroup12
.829d						AssembleGroup2:
.829d		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.829f						AsmGroup12:
.829f		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.82a2		68		pla				pla 								; pop the return address to access the information following.
.82a3		fa		plx				plx
.82a4		20 2b 83	jsr $832b			jsr 	AccessParameters 			; get opcode and save as base
.82a7		8d 20 04	sta $0420			sta 	BaseOpcode
.82aa		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.82ad		d0 08		bne $82b7			bne 	_AG12HaveMask
.82af		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.82b1		20 33 83	jsr $8333			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.82b4		8d 21 04	sta $0421			sta 	ModeMask
.82b7						_AG12HaveMask:
.82b7		20 67 84	jsr $8467			jsr 	TypeAndCalculateOperand 	; get zero page type
.82ba		da		phx				phx 								; save found address mode
.82bb		20 97 83	jsr $8397			jsr 	AssembleModeX
.82be		fa		plx				plx  								; restore address mode
.82bf		b0 0b		bcs $82cc			bcs 	_AG12Exit
.82c1		20 cd 82	jsr $82cd			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82c4		20 97 83	jsr $8397			jsr 	AssembleModeX
.82c7		b0 03		bcs $82cc			bcs 	_AG12Exit
.82c9		4c 5b b1	jmp $b15b			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82cc						_AG12Exit:
.82cc		60		rts				rts
.82cd						PromoteToAbsolute:
.82cd		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82cf		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82d1		f0 19		beq $82ec			beq 	_PTADo
.82d3		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82d5		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82d7		f0 13		beq $82ec			beq 	_PTADo
.82d9		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82db		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82dd		f0 0d		beq $82ec			beq 	_PTADo
.82df		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82e1		e0 d1		cpx #$d1			cpx 	#AM_IND
.82e3		f0 07		beq $82ec			beq 	_PTADo
.82e5		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82e7		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82e9		f0 01		beq $82ec			beq 	_PTADo
.82eb		60		rts				rts
.82ec						_PTADo:
.82ec		aa		tax				tax
.82ed		60		rts				rts
.82ee						AssembleGroup3:
.82ee		68		pla				pla 								; get parameters, which is just the opcode.
.82ef		fa		plx				plx
.82f0		20 2b 83	jsr $832b			jsr 	AccessParameters 			; get and output opcode
.82f3		20 43 83	jsr $8343			jsr 	AssemblerWriteByte
.82f6		20 cb 84	jsr $84cb			jsr 	CalculateOperand 			; get a 16 bit operand
.82f9		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82fb		38		sec				sec
.82fc		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.82ff		48		pha				pha 								; LSB in A
.8300		a5 60		lda $60				lda 	NSMantissa1
.8302		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.8305		aa		tax				tax 								; MSB in X
.8306		68		pla				pla
.8307		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8308		69 7f		adc #$7f			adc 	#$7F
.830a		90 01		bcc $830d			bcc 	_AG3NoCarry
.830c		e8		inx				inx
.830d						_AG3NoCarry:
.830d		38		sec				sec 								; fix back and write out anyways.
.830e		e9 80		sbc #$80			sbc 	#$80
.8310		20 43 83	jsr $8343			jsr 	AssemblerWriteByte
.8313		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8315		f0 0a		beq $8321			beq 	_AG3Exit
.8317		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.831a		29 01		and #$01			and 	#1
.831c		f0 03		beq $8321			beq 	_AG3Exit
.831e		4c 60 b1	jmp $b160			jmp 	RangeError 					; no, branch is out of range
.8321						_AG3Exit:
.8321		60		rts				rts
.8322						AssembleGroup4:
.8322		68		pla				pla 								; pop address
.8323		fa		plx				plx
.8324		20 2b 83	jsr $832b			jsr 	AccessParameters 			; access and get first
.8327		20 43 83	jsr $8343			jsr 	AssemblerWriteByte 			; output it.
.832a		60		rts				rts
.832b						AccessParameters:
.832b		8d 1d 04	sta $041d			sta 	ParamStart
.832e		8e 1e 04	stx $041e			stx 	ParamStart+1
.8331		a9 01		lda #$01			lda 	#1
.8333						GetParameter:
.8333		5a		phy				phy
.8334		a8		tay				tay
.8335		ad 1d 04	lda $041d			lda 	ParamStart
.8338		85 36		sta $36				sta 	zTemp0
.833a		ad 1e 04	lda $041e			lda 	ParamStart+1
.833d		85 37		sta $37				sta 	zTemp0+1
.833f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8341		7a		ply				ply
.8342		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8343						AssemblerWriteByte:
.8343		48		pha			pha
.8344		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8347		29 02		and #$02		and 	#2
.8349		f0 1b		beq $8366		beq 	_AWBNoPrint
.834b		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.834e		20 81 83	jsr $8381		jsr 	PrintHex
.8351		ad 1a 04	lda $041a		lda		AssemblerAddress
.8354		20 81 83	jsr $8381		jsr 	PrintHex
.8357		a9 20		lda #$20		lda 	#' '
.8359		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.835c		68		pla			pla 									; print byte
.835d		48		pha			pha
.835e		20 81 83	jsr $8381		jsr 	PrintHex
.8361		a9 0d		lda #$0d		lda 	#13
.8363		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8366						_AWBNoPrint:
.8366		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.8369		85 36		sta $36			sta 	zTemp0
.836b		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.836e		f0 0e		beq $837e		beq 	_AWBRange
.8370		85 37		sta $37			sta 	zTemp0+1
.8372		68		pla			pla 									; write byte out
.8373		92 36		sta ($36)		sta 	(zTemp0)
.8375		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.8378		d0 03		bne $837d		bne 	_AWBNoCarry
.837a		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.837d						_AWBNoCarry:
.837d		60		rts			rts
.837e						_AWBRange:
.837e		4c 60 b1	jmp $b160		jmp 	RangeError
.8381						PrintHex:
.8381		48		pha				pha
.8382		4a		lsr a				lsr 	a
.8383		4a		lsr a				lsr 	a
.8384		4a		lsr a				lsr 	a
.8385		4a		lsr a				lsr 	a
.8386		20 8a 83	jsr $838a			jsr 	_PrintNibble
.8389		68		pla				pla
.838a						_PrintNibble:
.838a		29 0f		and #$0f			and 	#15
.838c		c9 0a		cmp #$0a			cmp 	#10
.838e		90 02		bcc $8392			bcc 	_NoShift
.8390		69 06		adc #$06			adc 	#6
.8392						_NoShift:
.8392		69 30		adc #$30			adc 	#48
.8394		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8397						AssembleModeX:
.8397		5a		phy				phy
.8398		ad 1f 04	lda $041f			lda 	IsGroup1
.839b		f0 17		beq $83b4			beq 	_AMXGroup2
.839d		8a		txa				txa 							; is it in group # 1
.839e		29 40		and #$40			and 	#AM_ISG1
.83a0		f0 4d		beq $83ef			beq 	_AMXFail 				; no, give up.
.83a2		8a		txa				txa 							; get back.
.83a3		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.83a5		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.83a7		d0 22		bne $83cb			bne 	_AMXHaveInfo
.83a9		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.83ac		c9 81		cmp #$81			cmp 	#$81
.83ae		f0 3f		beq $83ef			beq 	_AMXFail
.83b0		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.83b2		80 17		bra $83cb			bra 	_AMXHaveInfo 			; odd design decision there.
.83b4						_AMXGroup2:
.83b4		8a		txa				txa 							; is it in group 2 ?
.83b5		29 20		and #$20			and 	#AM_ISG2
.83b7		f0 36		beq $83ef			beq 	_AMXFail 				; no, give up.
.83b9		8a		txa				txa 							; get the offset into Y
.83ba		29 1f		and #$1f			and 	#$1F
.83bc		4a		lsr a				lsr 	a 						; make it 0-7.
.83bd		4a		lsr a				lsr  	a
.83be		a8		tay				tay
.83bf		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83c2						_AMXCheckOkay:
.83c2		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83c3		88		dey				dey
.83c4		10 fc		bpl $83c2			bpl 	_AMXCheckOkay
.83c6		90 27		bcc $83ef			bcc 	_AMXFail 				; not allowed.
.83c8		8a		txa				txa  							; get mask back
.83c9		29 1f		and #$1f			and 	#$1F
.83cb						_AMXHaveInfo:
.83cb		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83cd		10 04		bpl $83d3			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83cf		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83d1		d0 1c		bne $83ef			bne 	_AMXFail
.83d3						_AMXAnySize:
.83d3		18		clc				clc 							; add offset to the base opcode
.83d4		6d 20 04	adc $0420			adc 	BaseOpcode
.83d7						_AMXOutputCode:
.83d7		20 43 83	jsr $8343			jsr 	AssemblerWriteByte 		; write the opcode out.
.83da		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83dc		f0 0e		beq $83ec			beq 	_AMXExit
.83de		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83e0		20 43 83	jsr $8343			jsr 	AssemblerWriteByte
.83e3		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83e5		30 05		bmi $83ec			bmi 	_AMXExit
.83e7		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83e9		20 43 83	jsr $8343			jsr 	AssemblerWriteByte
.83ec						_AMXExit:
.83ec		7a		ply				ply
.83ed		38		sec				sec
.83ee		60		rts				rts
.83ef						_AMXFail:
.83ef		a0 00		ldy #$00			ldy 	#0
.83f1						_AMXCheckOddities:
.83f1		8a		txa				txa
.83f2		d9 19 84	cmp $8419,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83f5		d0 15		bne $840c			bne 	_AMXCONext
.83f7		b9 17 84	lda $8417,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83fa		cd 20 04	cmp $0420			cmp 	BaseOpcode
.83fd		d0 0d		bne $840c			bne 	_AMXCONext
.83ff		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8401		10 04		bpl $8407			bpl 	_AMXCONotZero
.8403		a5 60		lda $60				lda 	NSMantissa1
.8405		d0 05		bne $840c			bne 	_AMXCONext
.8407						_AMXCONotZero:
.8407		b9 18 84	lda $8418,y			lda 	ExtraOpcode+1,y 		; get new opcode
.840a		80 cb		bra $83d7			bra 	_AMXOutputCode 			; and assemble it
.840c						_AMXCONext:
.840c		c8		iny				iny
.840d		c8		iny				iny
.840e		c8		iny				iny
.840f		b9 17 84	lda $8417,y			lda 	ExtraOpcode+0,y 		; end of table
.8412		d0 dd		bne $83f1			bne 	_AMXCheckOddities
.8414						_AMXCOFail:
.8414		7a		ply				ply
.8415		18		clc				clc
.8416		60		rts				rts
.8417						ExtraOpcode:
>8417		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>841a		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>841d		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8420		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8423		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8426		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8429		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>842c		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>842f		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8432		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8435		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8436						LabelHere:
.8436		c8		iny				iny 								; skip .
.8437		a2 00		ldx #$00			ldx 	#0 							; get a term
.8439		20 96 a0	jsr $a096			jsr 	EvaluateTerm
.843c		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.843e		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8440		d0 22		bne $8464			bne 	_ALType 					; otherwise typing error
.8442		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8444		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8446		b5 60		lda $60,x			lda 	NSMantissa1,x
.8448		85 37		sta $37				sta 	zTemp0+1
.844a		5a		phy				phy 								; copy address in (64k)
.844b		a0 01		ldy #$01			ldy 	#1
.844d		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8450		92 36		sta ($36)			sta 	(zTemp0)
.8452		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8455		91 36		sta ($36),y			sta 	(zTemp0),y
.8457		c8		iny				iny
.8458		a9 00		lda #$00			lda 	#0 							; zero the rest.
.845a		91 36		sta ($36),y			sta 	(zTemp0),y
.845c		c8		iny				iny
.845d		91 36		sta ($36),y			sta 	(zTemp0),y
.845f		c8		iny				iny
.8460		91 36		sta ($36),y			sta 	(zTemp0),y
.8462		7a		ply				ply
.8463		60		rts				rts
.8464						_ALType:
.8464		4c 65 b1	jmp $b165			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8467						TypeAndCalculateOperand:
.8467		b1 30		lda ($30),y			lda 	(codePtr),y
.8469		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.846b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.846d		f0 5b		beq $84ca			beq 	_TACOExit
.846f		c9 80		cmp #$80			cmp 	#KWC_EOL
.8471		f0 57		beq $84ca			beq 	_TACOExit
.8473		c8		iny				iny
.8474		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8476		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8478		f0 51		beq $84cb			beq 	CalculateOperand
.847a		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.847c		f0 1f		beq $849d			beq 	_TACOIndirect
.847e		88		dey				dey 								; undo get of first character
.847f		20 cb 84	jsr $84cb			jsr 	CalculateOperand 			; get operand
.8482		b1 30		lda ($30),y			lda 	(codePtr),y
.8484		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8486		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8488		d0 40		bne $84ca			bne 	_TACOExit
.848a		c8		iny				iny
.848b		20 d5 84	jsr $84d5			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.848e		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8490		c9 58		cmp #$58			cmp 	#'X'
.8492		f0 36		beq $84ca			beq 	_TACOExit
.8494		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8496		c9 59		cmp #$59			cmp 	#'Y'
.8498		f0 30		beq $84ca			beq 	_TACOExit
.849a						_TACOSyntax:
.849a		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.849d						_TACOIndirect:
.849d		20 cb 84	jsr $84cb			jsr 	CalculateOperand 			; get the operand
.84a0		b1 30		lda ($30),y			lda 	(codePtr),y
.84a2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.84a4		f0 17		beq $84bd			beq 	_TACOIndX
.84a6		20 2f 97	jsr $972f			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.84a9		b1 30		lda ($30),y			lda 	(codePtr),y
.84ab		a2 d1		ldx #$d1			ldx 	#AM_IND
.84ad		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.84af		d0 19		bne $84ca			bne 	_TACOExit
.84b1		c8		iny				iny
.84b2		20 d5 84	jsr $84d5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84b5		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84b7		d0 e1		bne $849a			bne 	_TACOSyntax
.84b9		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84bb		80 0d		bra $84ca			bra 	_TACOExit
.84bd						_TACOIndX:
.84bd		c8		iny				iny
.84be		20 d5 84	jsr $84d5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84c1		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84c3		d0 d5		bne $849a			bne 	_TACOSyntax
.84c5		20 2f 97	jsr $972f			jsr 	CheckRightBracket			; check )
.84c8		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84ca						_TACOExit:
.84ca		60		rts				rts
.84cb						CalculateOperand:
.84cb		48		pha				pha
.84cc		da		phx				phx
.84cd		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84cf		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.84d2		fa		plx				plx
.84d3		68		pla				pla
.84d4		60		rts				rts
.84d5						TACOCheckXY:
.84d5		b1 30		lda ($30),y			lda 	(codePtr),y
.84d7		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84d9		c9 40		cmp #$40			cmp 	#$40
.84db		d0 21		bne $84fe			bne 	_TCXYFail
.84dd		b1 30		lda ($30),y			lda 	(codePtr),y
.84df		18		clc				clc
.84e0		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84e2		85 37		sta $37				sta 	zTemp0+1
.84e4		c8		iny				iny
.84e5		b1 30		lda ($30),y			lda 	(codePtr),y
.84e7		c8		iny				iny
.84e8		85 36		sta $36				sta 	zTemp0
.84ea		5a		phy				phy 								; save position
.84eb		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84ed		b1 36		lda ($36),y			lda 	(zTemp0),y
.84ef		d0 0c		bne $84fd			bne 	_TCXYPopFail
.84f1		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84f3		b1 36		lda ($36),y			lda 	(zTemp0),y
.84f5		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84f7		f0 08		beq $8501			beq 	_TCXYFound
.84f9		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84fb		f0 04		beq $8501			beq 	_TCXYFound
.84fd						_TCXYPopFail:
.84fd		7a		ply				ply
.84fe						_TCXYFail:
.84fe		a9 00		lda #$00			lda 	#0
.8500		60		rts				rts
.8501						_TCXYFound:
.8501		7a		ply				ply 								; restore position
.8502		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8504		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8505						BackloadProgram:
.8505		20 78 91	jsr $9178			jsr 	NewProgram 					; does the actual NEW.
.8508		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.850a		a9 5c		lda #$5c			lda 	#_BLLoad & $FF
.850c		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.850f		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8511		8d 67 07	sta $0767			sta 	BackLoadPage
.8514		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8516		8d 68 07	sta $0768			sta 	0+BackLoadPointer
.8519		a9 60		lda #$60			lda 	#(($6000) >> 8)
.851b		8d 69 07	sta $0769			sta 	1+BackLoadPointer
.851e		a9 ff		lda #$ff			lda 	#$FF
.8520		8d fa ff	sta $fffa			sta 	$FFFA
.8523						_BPLoop:
.8523		a2 ff		ldx #$ff			ldx 	#$FF
.8525		20 71 85	jsr $8571			jsr 	BLReadByte 					; read a byte
.8528		c9 00		cmp #$00			cmp 	#0
.852a		f0 29		beq $8555			beq 	_BPExit 					; if 0 exit
.852c		30 27		bmi $8555			bmi 	_BPExit 					; if -ve exit
.852e						_BPCopy:
.852e		e8		inx				inx  								; copy byte into the lineBuffer
.852f		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8532		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.8535		20 71 85	jsr $8571			jsr 	BLReadByte 					; read next byte
.8538		30 0a		bmi $8544			bmi 	_BPEndLine 					; -ve = EOL
.853a		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.853c		d0 02		bne $8540			bne 	_BPNotTab
.853e		a9 20		lda #$20			lda 	#' '
.8540						_BPNotTab:
.8540		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8542		b0 ea		bcs $852e			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8544						_BPEndLine:
.8544		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.8547		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.854a		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.854d		f0 d4		beq $8523			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.854f		38		sec				sec 								; append not insert
.8550		20 4f b3	jsr $b34f			jsr 	MemoryInsertLine 			; append to current program
.8553		80 ce		bra $8523			bra 	_BPLoop
.8555						_BPExit:
.8555		9c fa ff	stz $fffa			stz 	$FFFA
.8558		20 5a 86	jsr $865a			jsr 	ClearCommand 				; clear variables etc.
.855b		60		rts				rts
.855c						_BLLoad:
>855c		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8564		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8571						BLReadByte:
.8571		da		phx				phx
.8572		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8574		ad 67 07	lda $0767			lda 	BackLoadPage	 			; set current page
.8577		85 0b		sta $0b				sta 	8+3
.8579		ad 68 07	lda $0768			lda 	BackLoadPointer 			; copy pointer to zTemp0
.857c		85 36		sta $36				sta 	zTemp0
.857e		ad 69 07	lda $0769			lda 	BackLoadPointer+1
.8581		85 37		sta $37				sta 	zTemp0+1
.8583		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8585		ee 68 07	inc $0768			inc 	BackLoadPointer 			; bump pointer
.8588		d0 0f		bne $8599			bne 	_BLNoCarry
.858a		ee 69 07	inc $0769			inc 	BackLoadPointer+1
.858d		10 0a		bpl $8599			bpl 	_BLNoCarry 					; need a new page
.858f		48		pha				pha
.8590		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8592		8d 69 07	sta $0769			sta 	BackLoadPointer+1
.8595		ee 67 07	inc $0767			inc 	BackLoadPage 				; next page from source.
.8598		68		pla				pla
.8599						_BLNoCarry:
.8599		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.859b		fa		plx				plx
.859c		c9 00		cmp #$00			cmp 	#0
.859e		60		rts				rts
.0767						BackLoadPage:
>0767								.fill  	1
.0768						BackLoadPointer:
>0768								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.859f						EditProgramCode:
.859f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.85a2		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.85a5		20 f3 b3	jsr $b3f3			jsr 	MemorySearch
.85a8		90 05		bcc $85af			bcc 	_EPCNoDelete 				; reached the end : don't delete
.85aa		d0 03		bne $85af			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.85ac		20 18 b3	jsr $b318			jsr 	MemoryDeleteLine 			; delete the line
.85af						_EPCNoDelete:
.85af		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.85b2		c9 80		cmp #$80			cmp 	#KWC_EOL
.85b4		f0 0d		beq $85c3			beq 	_EPCNoInsert
.85b6		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85b9		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85bc		20 f3 b3	jsr $b3f3			jsr 	MemorySearch
.85bf		18		clc				clc 								; insert at this point.
.85c0		20 4f b3	jsr $b34f			jsr 	MemoryInsertLine 			; insert the line
.85c3						_EPCNoInsert:
.85c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85c4						WarmStart:
.85c4		a2 ff		ldx #$ff			ldx 	#$FF
.85c6		9a		txs				txs
.85c7		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85c9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.85cc		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.85cf		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line
.85d2		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.85d5		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85d8		d0 17		bne $85f1			bne 	_WSEditCode 				; if so,edit code.
.85da		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85dd		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.85df		85 30		sta $30				sta 	codePtr
.85e1		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85e3		85 31		sta $31				sta 	codePtr+1
.85e5		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.85e8		c9 80		cmp #$80			cmp 	#KWC_EOL
.85ea		f0 d8		beq $85c4			beq 	WarmStart
.85ec		20 15 93	jsr $9315			jsr 	RUNCodePointerLine 			; execute that line.
.85ef		80 d3		bra $85c4			bra 	WarmStart
.85f1						_WSEditCode:
.85f1		20 9f 85	jsr $859f			jsr 	EditProgramCode 			; edit the program code
.85f4		20 5a 86	jsr $865a			jsr 	ClearCommand 				; clear all variables etc.
.85f7		80 cb		bra $85c4			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85f9						AssembleCommand:
.85f9		a2 00		ldx #$00			ldx 	#0
.85fb		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger 		; start address
.85fe		a5 58		lda $58				lda 	NSMantissa0
.8600		8d 1a 04	sta $041a			sta 	AssemblerAddress
.8603		a5 60		lda $60				lda 	NSMantissa1
.8605		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8608		20 37 97	jsr $9737			jsr 	CheckComma
.860b		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; options 0-3
.860e		a5 58		lda $58				lda 	NSMantissa0
.8610		8d 1c 04	sta $041c			sta 	AssemblerControl
.8613		60		rts				rts
.8614		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8615						AssertCommand:
.8615		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8617		20 0f a6	jsr $a60f			jsr 	EvaluateInteger 			; the assert test
.861a		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; exit if result is non zero.
.861d		d0 05		bne $8624			bne 	_ACExit
.861f		a9 0a		lda #$0a		lda	#10
.8621		4c 48 97	jmp $9748		jmp	ErrorHandler
.8624						_ACExit:
.8624		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8625						CallCommand:
.8625		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8627		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.862a						_CCClear
.862a		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.862b		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; these are optional sequentially.
.862e		e0 04		cpx #$04			cpx 	#4
.8630		d0 f8		bne $862a			bne 	_CCClear
.8632		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8634						_CCCParam:
.8634		b1 30		lda ($30),y			lda 	(codePtr),y
.8636		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8638		d0 09		bne $8643			bne 	_CCCRun6502
.863a		c8		iny				iny 								; skip comma
.863b		e8		inx				inx	 								; next level
.863c		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.863f		e0 03		cpx #$03			cpx 	#3
.8641		90 f1		bcc $8634			bcc 	_CCCParam 					; done all 3 ?
.8643						_CCCRun6502:
.8643		5a		phy				phy 								; save position
.8644		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8646		85 37		sta $37				sta 	zTemp0+1
.8648		a5 58		lda $58				lda 	NSMantissa0
.864a		85 36		sta $36				sta 	zTemp0
.864c		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.864e		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8650		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8652		20 57 86	jsr $8657			jsr 	_CCCZTemp0 					; call zTemp0
.8655		7a		ply				ply 								; restore position and exit
.8656		60		rts				rts
.8657						_CCCZTemp0:
.8657		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.865a						ClearCommand:
.865a		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.865c		85 36		sta $36				sta 	0+zTemp0
.865e		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8660		85 37		sta $37				sta 	1+zTemp0
.8662						_ClearZeroLoop:
.8662		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8664		f0 24		beq $868a			beq 	_ClearZeroEnd
.8666		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8668		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.866a						_ClearOneVariable:
.866a		91 36		sta ($36),y			sta 	(zTemp0),y
.866c		c8		iny				iny
.866d		c0 08		cpy #$08			cpy 	#8
.866f		d0 f9		bne $866a			bne 	_ClearOneVariable
.8671		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8673		b1 36		lda ($36),y			lda 	(zTemp0),y
.8675		c9 18		cmp #$18			cmp 	#NSTProcedure
.8677		d0 04		bne $867d			bne 	_ClearNotProcedure
.8679		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.867b		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.867d						_ClearNotProcedure:
.867d		18		clc				clc 								; go to the next variable
.867e		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8680		65 36		adc $36				adc 	zTemp0
.8682		85 36		sta $36				sta 	zTemp0
.8684		90 dc		bcc $8662			bcc 	_ClearZeroLoop
.8686		e6 37		inc $37				inc 	zTemp0+1
.8688		80 d8		bra $8662			bra 	_ClearZeroLoop
.868a						_ClearZeroEnd:
.868a		18		clc				clc
.868b		a5 36		lda $36				lda 	zTemp0
.868d		69 01		adc #$01			adc 	#1
.868f		8d 08 04	sta $0408			sta 	lowMemPtr
.8692		a5 37		lda $37				lda 	zTemp0+1
.8694		69 00		adc #$00			adc 	#0
.8696		8d 09 04	sta $0409			sta 	lowMemPtr+1
.8699		20 3b b8	jsr $b83b			jsr 	StackReset
.869c		20 a1 b8	jsr $b8a1			jsr 	StringSystemInitialise
.869f		20 38 96	jsr $9638			jsr 	ProcedureScan
.86a2		20 b7 92	jsr $92b7			jsr 	Command_Restore
.86a5		9c 1a 04	stz $041a			stz 	AssemblerAddress
.86a8		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.86ab		9c 1c 04	stz $041c			stz 	AssemblerControl
.86ae		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.86b1		20 82 a2	jsr $a282			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.86b4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.86b5						XLoadCommand:
.86b5		20 78 91	jsr $9178			jsr 	NewProgram
.86b8		20 05 85	jsr $8505			jsr 	BackloadProgram
.86bb		4c c4 85	jmp $85c4			jmp 	WarmStart
.86be						XGoCommand:
.86be		20 78 91	jsr $9178			jsr 	NewProgram
.86c1		20 05 85	jsr $8505			jsr 	BackloadProgram
.86c4		4c 03 93	jmp $9303			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.86c7						Command_Data:
.86c7		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.86c9		a2 80		ldx #$80			ldx 	#KWC_EOL
.86cb		20 8a 96	jsr $968a			jsr 	ScanForward
.86ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.86cf						DimCommand:
.86cf		b1 30		lda ($30),y			lda 	(codePtr),y
.86d1		29 c0		and #$c0			and 	#$C0
.86d3		c9 40		cmp #$40			cmp 	#$40
.86d5		d0 7a		bne $8751			bne 	_DCSyntax 				; n o, error.
.86d7		b1 30		lda ($30),y			lda 	(codePtr),y
.86d9		18		clc				clc
.86da		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86dc		85 3f		sta $3f				sta 	zaTemp+1
.86de		c8		iny				iny
.86df		b1 30		lda ($30),y			lda 	(codePtr),y
.86e1		c8		iny				iny
.86e2		85 3e		sta $3e				sta 	zaTemp
.86e4		5a		phy				phy
.86e5		a0 02		ldy #$02			ldy 	#2 						; read type byte
.86e7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86e9		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.86eb		c9 18		cmp #$18			cmp 	#NSTProcedure
.86ed		f0 62		beq $8751			beq 	_DCSyntax
.86ef		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.86f1		29 04		and #$04			and 	#NSBIsArray
.86f3		f0 64		beq $8759			beq 	_DCType
.86f5		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.86f7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86f9		d0 59		bne $8754			bne 	_DCRedefine
.86fb		7a		ply				ply
.86fc		20 5c 87	jsr $875c			jsr 	_DCGetSize 				; get array size, check it.
.86ff		5a		phy				phy
.8700		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8702		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8704		7a		ply				ply 							; is there a second (e.g. ,x)
.8705		b1 30		lda ($30),y			lda 	(codePtr),y
.8707		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8709		d0 0a		bne $8715			bne 	_DCOneDimension
.870b		c8		iny				iny 							; skip comma
.870c		20 5c 87	jsr $875c			jsr 	_DCGetSize 				; get 2nd array size
.870f		5a		phy				phy
.8710		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8712		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8714		7a		ply				ply
.8715						_DCOneDimension:
.8715		5a		phy				phy 							; save position
.8716		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8718		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.871a		aa		tax				tax
.871b		c8		iny				iny
.871c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.871e		e8		inx				inx 							; bump them.
.871f		1a		inc a				inc 	a
.8720		20 4d a6	jsr $a64d			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8723		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8725		29 e0		and #$e0			and 	#$E0
.8727		d0 23		bne $874c			bne 	_DCSize
.8729		a0 02		ldy #$02			ldy 	#2 						; get base type
.872b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.872d		20 6a 87	jsr $876a			jsr 	ScaleByBaseType 		; scale by base type
.8730		a5 36		lda $36				lda 	zTemp0
.8732		a6 37		ldx $37				ldx 	zTemp0+1
.8734		20 44 a2	jsr $a244			jsr 	AllocateXABytes 		; allocate memory
.8737		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8739		91 3e		sta ($3e),y			sta 	(zaTemp),y
.873b		c8		iny				iny
.873c		8a		txa				txa
.873d		91 3e		sta ($3e),y			sta 	(zaTemp),y
.873f		7a		ply				ply 							; get position back
.8740		20 2f 97	jsr $972f			jsr 	CheckRightBracket 		; check )
.8743		b1 30		lda ($30),y			lda 	(codePtr),y
.8745		c8		iny				iny 							; consume in case
.8746		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8748		f0 85		beq $86cf			beq 	DimCommand
.874a		88		dey				dey 							; undo consume
.874b		60		rts				rts
.874c						_DCSize:
.874c		a9 16		lda #$16		lda	#22
.874e		4c 48 97	jmp $9748		jmp	ErrorHandler
.8751						_DCSyntax:
.8751		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.8754						_DCRedefine:
.8754		a9 15		lda #$15		lda	#21
.8756		4c 48 97	jmp $9748		jmp	ErrorHandler
.8759						_DCType:
.8759		4c 65 b1	jmp $b165			jmp 	TypeError
.875c						_DCGetSize:
.875c		a2 00		ldx #$00			ldx 	#0 						; get first index.
.875e		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 	; get array dimension
.8761		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8763		f0 e7		beq $874c			beq 	_DCSize
.8765		c9 fe		cmp #$fe			cmp 	#254
.8767		f0 e3		beq $874c			beq 	_DCSize
.8769		60		rts				rts
.876a						ScaleByBaseType:
.876a		29 10		and #$10			and 	#NSBIsString 			; is it string
.876c		d0 19		bne $8787			bne 	_SBBTString
.876e		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8770		48		pha				pha
.8771		a5 36		lda $36				lda 	zTemp0
.8773		48		pha				pha
.8774		06 36		asl $36				asl 	zTemp0 					; x 2
.8776		26 37		rol $37				rol 	zTemp0+1
.8778		06 36		asl $36				asl 	zTemp0 					; x 4
.877a		26 37		rol $37				rol 	zTemp0+1
.877c		68		pla				pla 							; add stacked value = x 5
.877d		65 36		adc $36				adc 	zTemp0
.877f		85 36		sta $36				sta 	zTemp0
.8781		68		pla				pla
.8782		65 37		adc $37				adc 	zTemp0+1
.8784		85 37		sta $37				sta 	zTemp0+1
.8786		60		rts				rts
.8787						_SBBTString:
.8787		06 36		asl $36				asl 	zTemp0
.8789		26 37		rol $37				rol 	zTemp0+1
.878b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.878c						BootDOS:
.878c		a9 9a		lda #$9a	            lda     #dosName & $FF
.878e		85 fb		sta $fb		            sta     kernel.args.buf+0
.8790		a9 87		lda #$87	            lda     #dosName >> 8
.8792		85 fc		sta $fc		            sta     kernel.args.buf+1
.8794		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8797		4c c4 85	jmp $85c4	            jmp 	WarmStart
>879a		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.879e						EndCommand:
.879e		4c c4 85	jmp $85c4			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.87a1						UnaryEvent:
.87a1		fa		plx				plx
.87a2		20 23 96	jsr $9623			jsr 	TimerToStackX 				; timer in +0
.87a5		e8		inx				inx  								; put reference into +1
.87a6		20 96 a0	jsr $a096			jsr 	EvaluateTerm
.87a9		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.87ab		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.87ad		d0 4c		bne $87fb			bne 	_UEType
.87af		e8		inx				inx 								; put the step in +2
.87b0		20 37 97	jsr $9737			jsr 	CheckComma
.87b3		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.87b6		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.87b9		ca		dex				dex
.87ba		ca		dex				dex
.87bb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.87bd		85 36		sta $36				sta 	zTemp0
.87bf		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.87c1		85 37		sta $37				sta 	zTemp0+1
.87c3		5a		phy				phy
.87c4		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.87c6		b1 36		lda ($36),y			lda 	(zTemp0),y
.87c8		30 2d		bmi $87f7			bmi 	_UEFalse 					; exit if signed.
.87ca		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.87cc		b5 58		lda $58,x			lda 	NSMantissa0,x
.87ce		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.87d0		c8		iny				iny
.87d1		b5 60		lda $60,x			lda 	NSMantissa1,x
.87d3		f1 36		sbc ($36),y			sbc		(zTemp0),y
.87d5		c8		iny				iny
.87d6		b5 68		lda $68,x			lda 	NSMantissa2,x
.87d8		f1 36		sbc ($36),y			sbc		(zTemp0),y
.87da		90 1b		bcc $87f7			bcc 	_UEFalse 					; no, return FALSE.
.87dc		18		clc				clc
.87dd		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.87df		b5 58		lda $58,x			lda 	NSMantissa0,x
.87e1		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.87e3		91 36		sta ($36),y			sta 	(zTemp0),y
.87e5		c8		iny				iny
.87e6		b5 60		lda $60,x			lda 	NSMantissa1,x
.87e8		75 62		adc $62,x			adc 	NSMantissa1+2,x
.87ea		91 36		sta ($36),y			sta 	(zTemp0),y
.87ec		c8		iny				iny
.87ed		b5 68		lda $68,x			lda 	NSMantissa2,x
.87ef		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.87f1		91 36		sta ($36),y			sta 	(zTemp0),y
.87f3		7a		ply				ply
.87f4		4c b5 97	jmp $97b5			jmp 	ReturnTrue
.87f7						_UEFalse:
.87f7		7a		ply				ply 								; restore Y
.87f8		4c c0 97	jmp $97c0			jmp 	ReturnFalse 				; and return False
.87fb						_UEType:
.87fb		4c 65 b1	jmp $b165			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.87fe						Command_BLoad:
.87fe		a2 00		ldx #$00			ldx 	#0
.8800		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; file name to load
.8803		20 37 97	jsr $9737			jsr 	CheckComma 					; consume comma
.8806		e8		inx				inx
.8807		20 0f a6	jsr $a60f			jsr 	EvaluateInteger 			; load address (full physical address)
.880a		5a		phy				phy
.880b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.880d		a6 60		ldx $60				ldx 	NSMantissa1
.880f		20 a2 81	jsr $81a2			jsr 	KNLOpenFileRead 			; open file for reading
.8812		b0 4e		bcs $8862			bcs 	CBLErrorHandler 			; error, so fail.
.8814		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.8817		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8819		20 65 88	jsr $8865			jsr 	BLOpenPhysicalMemory 		; open for access.
.881c						_BLReadFile:
.881c		ad 6e 07	lda $076e			lda 	BasicFileStream
.881f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8821		20 f7 81	jsr $81f7			jsr 	KNLReadBlock 				; read next block
.8824		b0 22		bcs $8848			bcs 	_BLFileError 				; file error, which might be EOF.
.8826		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8828		f0 f2		beq $881c			beq 	_BLReadFile
.882a		8d 6c 07	sta $076c			sta 	BLCopyCounter 				; counter.
.882d		ac 6b 07	ldy $076b			ldy 	BLYOffset 					; copy the buffer out here
.8830		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8832						_BLCopyLoop:
.8832		bd 5f 06	lda $065f,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8835		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8837		c8		iny				iny
.8838		d0 03		bne $883d			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.883a		20 8d 88	jsr $888d			jsr 	BLAdvancePhysicalMemory
.883d						_BLNoAdjust:
.883d		e8		inx				inx
.883e		ce 6c 07	dec $076c			dec 	BLCopyCounter
.8841		d0 ef		bne $8832			bne 	_BLCopyLoop
.8843		8c 6b 07	sty $076b			sty 	BLYOffset 					; update Y offset
.8846		80 d4		bra $881c			bra 	_BLReadFile 				; go ask for more.
.8848						_BLFileError:
.8848		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.884a		d0 16		bne $8862			bne 	CBLErrorHandler				; no, it's an actual error
.884c		20 87 88	jsr $8887			jsr 	BLClosePhysicalMemory 		; close the access.
.884f		ad 6e 07	lda $076e			lda 	BasicFileStream 			; close the file
.8852		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.8855		7a		ply				ply
.8856		60		rts				rts
.8857						CBLCloseError:
.8857		48		pha				pha
.8858		20 87 88	jsr $8887			jsr 	BLClosePhysicalMemory
.885b		ad 6e 07	lda $076e			lda 	BasicFileStream
.885e		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.8861		68		pla				pla
.8862						CBLErrorHandler:
.8862		4c 4b 8a	jmp $8a4b			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8865						BLOpenPhysicalMemory:
.8865		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8867		8d 6a 07	sta $076a			sta 	BLNormalMapping
.886a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.886c		8d 6b 07	sta $076b			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.886f		64 3a		stz $3a				stz 	zTemp2
.8871		b5 60		lda $60,x			lda 	NSMantissa1,x
.8873		29 1f		and #$1f			and 	#$1F
.8875		09 60		ora #$60			ora 	#BLAccessPage << 5
.8877		85 3b		sta $3b				sta 	zTemp2+1
.8879		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.887b		16 60		asl $60,x			asl 	NSMantissa1,x
.887d		2a		rol a				rol 	a
.887e		16 60		asl $60,x			asl 	NSMantissa1,x
.8880		2a		rol a				rol 	a
.8881		16 60		asl $60,x			asl 	NSMantissa1,x
.8883		2a		rol a				rol 	a
.8884		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8886		60		rts				rts
.8887						BLClosePhysicalMemory:
.8887		ad 6a 07	lda $076a			lda 	BLNormalMapping
.888a		85 0b		sta $0b				sta 	BLAccessPage+8
.888c		60		rts				rts
.888d						BLAdvancePhysicalMemory:
.888d		48		pha				pha
.888e		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8890		a5 3b		lda $3b				lda 	zTemp2+1
.8892		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8894		d0 06		bne $889c			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8896		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8898		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.889a		85 3b		sta $3b				sta 	zTemp2+1
.889c						_BLAPMExit:
.889c		68		pla				pla
.889d		60		rts				rts
.076a						BLNormalMapping:
>076a								.fill 	1
.076b						BLYOffset:
>076b								.fill 	1
.076c						BLCopyCounter:
>076c								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.889e						Command_BSave:
.889e		a2 00		ldx #$00			ldx 	#0
.88a0		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; file name to load
.88a3		20 37 97	jsr $9737			jsr 	CheckComma 					; consume comma
.88a6		e8		inx				inx
.88a7		20 0f a6	jsr $a60f			jsr 	EvaluateInteger 			; load address (full physical address)
.88aa		20 37 97	jsr $9737			jsr 	CheckComma 					; consume comma
.88ad		e8		inx				inx
.88ae		20 0f a6	jsr $a60f			jsr 	EvaluateInteger 			; data length (3 bytes only)
.88b1		5a		phy				phy
.88b2		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.88b4		a6 60		ldx $60				ldx 	NSMantissa1
.88b6		20 9d 81	jsr $819d			jsr 	KNLOpenFileWrite 			; open file for reading
.88b9		b0 62		bcs $891d			bcs 	CBSErrorHandler 			; error, so fail.
.88bb		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.88be		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.88c0		20 65 88	jsr $8865			jsr 	BLOpenPhysicalMemory 		; open for access.
.88c3		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.88c5		ac 6b 07	ldy $076b			ldy 	BLYOffset 					; used for data offset.
.88c8						_BSWriteToFileLoop:
.88c8		38		sec				sec 								; pre decrement count.
.88c9		a5 5a		lda $5a				lda 	NSMantissa0+2
.88cb		e9 01		sbc #$01			sbc 	#1
.88cd		85 5a		sta $5a				sta 	NSMantissa0+2
.88cf		a5 62		lda $62				lda 	NSMantissa1+2
.88d1		e9 00		sbc #$00			sbc 	#0
.88d3		85 62		sta $62				sta 	NSMantissa1+2
.88d5		a5 6a		lda $6a				lda 	NSMantissa2+2
.88d7		e9 00		sbc #$00			sbc 	#0
.88d9		85 6a		sta $6a				sta 	NSMantissa2+2
.88db		30 15		bmi $88f2			bmi 	_BSFileComplete 			; undercounted, so exit.
.88dd		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.88df		9d 5f 06	sta $065f,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.88e2		e8		inx				inx
.88e3		c8		iny				iny 								; next byte
.88e4		d0 03		bne $88e9			bne 	_BSNoCheck
.88e6		20 8d 88	jsr $888d			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.88e9						_BSNoCheck:
.88e9		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.88eb		d0 db		bne $88c8			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.88ed		20 00 89	jsr $8900			jsr 	BSFlushBuffer 				; yes, flush the buffer
.88f0		80 d6		bra $88c8			bra 	_BSWriteToFileLoop 			; and keep on going
.88f2						_BSFileComplete:
.88f2		20 00 89	jsr $8900			jsr 	BSFlushBuffer 				; write the buffer remainder.
.88f5		20 87 88	jsr $8887			jsr 	BLClosePhysicalMemory 		; close the access.
.88f8		ad 6e 07	lda $076e			lda 	BasicFileStream 			; close the file
.88fb		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.88fe		7a		ply				ply
.88ff		60		rts				rts
.8900						BSFlushBuffer:
.8900		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8902		f0 0d		beq $8911			beq 	_BSFBExit 					; if so, exit.
.8904		a9 5f		lda #$5f			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8906		85 36		sta $36				sta 	zTemp0
.8908		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.890a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.890c		20 07 8b	jsr $8b07			jsr 	CLWriteByteBlock 			; write it.
.890f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8911						_BSFBExit:
.8911		60		rts				rts
.8912						CBSSCloseError:
.8912		48		pha				pha
.8913		20 87 88	jsr $8887			jsr 	BLClosePhysicalMemory
.8916		ad 6e 07	lda $076e			lda 	BasicFileStream
.8919		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.891c		68		pla				pla
.891d						CBSErrorHandler:
.891d		4c 4b 8a	jmp $8a4b			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.8920						Command_Dir:
.8920		ad 5f 07	lda $075f			lda     KNLDefaultDrive				; set drive to list.
.8923		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8925		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.8927		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.892a		b0 4f		bcs $897b			bcs     _CDExit
.892c						_CDEventLoop:
.892c		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.892f		20 96 81	jsr $8196			jsr     GetNextEvent
.8932		b0 f8		bcs $892c			bcs     _CDEventLoop
.8934		ad 60 07	lda $0760			lda     KNLEvent.type
.8937		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8939		f0 40		beq $897b			beq    	_CDExit
.893b		20 40 89	jsr $8940			jsr     _CDMessages 				; handle various messages
.893e		80 ec		bra $892c			bra     _CDEventLoop
.8940						_CDMessages:
.8940		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8942		f0 15		beq $8959			beq     _CDEVRead
.8944		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8946		f0 19		beq $8961			beq     _CDEVVolume
.8948		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.894a		f0 32		beq $897e			beq     _CDEVFile
.894c		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.894e		f0 70		beq $89c0			beq     _CDEVFree
.8950		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8952		f0 6e		beq $89c2			beq     _CDEVEOF
.8954		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8956		f0 6a		beq $89c2			beq     _CDEVEOF
.8958		60		rts				rts
.8959						_CDEVRead:
.8959		ad 63 07	lda $0763			lda     KNLEvent.directory.stream
.895c		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.895e		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8961						_CDEVVolume:
.8961		a9 5b		lda #$5b			lda 	#"["
.8963		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8966		ad 65 07	lda $0765			lda     KNLEvent.directory.volume.len
.8969		20 ca 89	jsr $89ca			jsr     _CDReadData
.896c		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.896f		a9 5d		lda #$5d			lda 	#"]"
.8971		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8974		a9 0d		lda #$0d			lda 	#13
.8976		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8979		80 de		bra $8959			bra     _CDEVRead
.897b						_CDExit:
.897b		4c c4 85	jmp $85c4			jmp 	WarmStart
.897e						_CDEVFile:
.897e		a9 20		lda #$20			lda 	#32
.8980		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8983		ad 65 07	lda $0765			lda     KNLEvent.directory.file.len
.8986		48		pha				pha
.8987		20 ca 89	jsr $89ca			jsr     _CDReadData
.898a		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.898d		68		pla				pla
.898e		49 ff		eor #$ff			eor 	#$FF
.8990		38		sec				sec
.8991		69 10		adc #$10			adc 	#16
.8993		aa		tax				tax
.8994						_CDEVTab:
.8994		a9 20		lda #$20			lda 	#32
.8996		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8999		ca		dex				dex
.899a		10 f8		bpl $8994			bpl 	_CDEVTab
.899c		20 e1 89	jsr $89e1			jsr 	_CDReadExtended
.899f		ad 26 05	lda $0526			lda 	lineBuffer
.89a2		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.89a5		20 b7 9b	jsr $9bb7			jsr 	ConvertInt16
.89a8		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.89ab		a2 89		ldx #$89			ldx 	#_CDEVFMessage >> 8
.89ad		a9 b4		lda #$b4			lda 	#_CDEVFMessage & $FF
.89af		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.89b2		80 a5		bra $8959			bra     _CDEVRead
.89b4						_CDEVFMessage:
>89b4		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>89bc		29 2e 0d 00
.89c0						_CDEVFree:
.89c0		80 00		bra $89c2			bra     _CDEVEOF
.89c2						_CDEVEOF:
.89c2		ad 63 07	lda $0763			lda     KNLEvent.directory.stream
.89c5		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.89c7		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.89ca						_CDReadData:
.89ca		85 fd		sta $fd				sta     kernel.args.recv.buflen
.89cc		a9 26		lda #$26			lda     #lineBuffer & $FF
.89ce		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.89d0		a9 05		lda #$05			lda     #lineBuffer >> 8
.89d2		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.89d4		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.89d7		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.89d9		9e 26 05	stz $0526,x			stz     lineBuffer,x
.89dc		a9 26		lda #$26			lda 	#lineBuffer & $FF
.89de		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.89e0		60		rts				rts
.89e1						_CDReadExtended:
.89e1		a9 02		lda #$02			lda     #2
.89e3		85 fd		sta $fd				sta     kernel.args.recv.buflen
.89e5		a9 26		lda #$26			lda     #lineBuffer & $FF
.89e7		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.89e9		a9 05		lda #$05			lda     #lineBuffer >> 8
.89eb		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.89ed		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.89f0						Command_Drive:
.89f0		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.89f3		20 99 81	jsr $8199			jsr 	KNLSetDrive
.89f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.89f7						Command_Load:
.89f7		20 fd 89	jsr $89fd			jsr 	LoadFile
.89fa		4c c4 85	jmp $85c4			jmp 	WarmStart
.89fd						LoadFile:
.89fd		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; file name to load
.8a00		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a02		a5 36		lda $36				lda 	zTemp0
.8a04		20 a2 81	jsr $81a2			jsr 	KNLOpenFileRead 			; open file for reading
.8a07		b0 42		bcs $8a4b			bcs 	CLErrorHandler 				; error, so fail.
.8a09		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.8a0c		20 9b 8a	jsr $8a9b			jsr     LoadReadByteInit            ; Init reader with the stream
.8a0f		20 78 91	jsr $9178			jsr 	NewProgram 					; does the actual NEW.
.8a12		9c 6d 07	stz $076d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a15						_CLLoop:
.8a15		20 59 8a	jsr $8a59			jsr 	LoadReadLine 				; get next line.
.8a18		f0 10		beq $8a2a			beq 	_CLExit 					; end, exit.
.8a1a		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.8a1d		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8a20		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8a23		f0 f0		beq $8a15			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a25		20 9f 85	jsr $859f			jsr 	EditProgramCode 			; do the editing etc.
.8a28		80 eb		bra $8a15			bra 	_CLLoop
.8a2a						_CLExit:
.8a2a		ad 6e 07	lda $076e			lda 	BasicFileStream
.8a2d		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.8a30						CLComplete:
.8a30		a9 38		lda #$38			lda 	#_CLCMsg & $FF
.8a32		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8a34		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.8a37		60		rts				rts
.8a38						_CLCMsg:
>8a38		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8a40		2e 0d 00
.8a43						CLCloseError:
.8a43		48		pha				pha
.8a44		ad 6e 07	lda $076e			lda 	BasicFileStream
.8a47		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.8a4a		68		pla				pla
.8a4b						CLErrorHandler:
.8a4b		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a4d		f0 05		beq $8a54			beq 	_CLEHNotFound
.8a4f		a9 1a		lda #$1a		lda	#26
.8a51		4c 48 97	jmp $9748		jmp	ErrorHandler
.8a54						_CLEHNotFound:
.8a54		a9 19		lda #$19		lda	#25
.8a56		4c 48 97	jmp $9748		jmp	ErrorHandler
.8a59						LoadReadLine:
.8a59		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8a5b		20 75 8a	jsr $8a75			jsr 	LoadReadCharacter
.8a5e		f0 14		beq $8a74			beq 	_LRLExit 					; eof ?
.8a60		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8a62		90 f5		bcc $8a59			bcc 	LoadReadLine
.8a64						_LRLLoop:
.8a64		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8a67		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8a6a		e8		inx				inx
.8a6b		20 75 8a	jsr $8a75			jsr 	LoadReadCharacter 			; next line
.8a6e		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8a70		b0 f2		bcs $8a64			bcs 	_LRLLoop
.8a72		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8a74						_LRLExit:
.8a74		60		rts				rts
.8a75						LoadReadCharacter:
.8a75		da		phx				phx
.8a76		5a		phy				phy
.8a77		ad 6d 07	lda $076d			lda 	LoadEOFFlag 				; already done EOF.
.8a7a		d0 0c		bne $8a88			bne 	_LRCIsEOF
.8a7c		20 a5 8a	jsr $8aa5			jsr 	LoadReadByte 				; read a byte
.8a7f		90 09		bcc $8a8a			bcc		_LRCExit 					; read okay.
.8a81		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8a83		d0 be		bne $8a43			bne 	CLCloseError
.8a85		ce 6d 07	dec $076d			dec 	LoadEOFFlag
.8a88						_LRCIsEOF:
.8a88		a9 00		lda #$00			lda 	#0
.8a8a						_LRCExit:
.8a8a		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8a8c		d0 02		bne $8a90			bne 	_LRCNotTab
.8a8e		a9 20		lda #$20			lda 	#' '
.8a90						_LRCNotTab:
.8a90		c9 0a		cmp #$0a			cmp 	#$0A
.8a92		d0 02		bne $8a96			bne 	_LRCNotLF
.8a94		a9 0d		lda #$0d			lda 	#$0D
.8a96						_LRCNotLF:
.8a96		7a		ply				ply
.8a97		fa		plx				plx
.8a98		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8a9a		60		rts				rts
.8a9b						LoadReadByteInit:
.8a9b		8d 6f 07	sta $076f			sta     LoadFileStream 				; save stream
.8a9e		9c 70 07	stz $0770			stz     LoadNextCharacter 			; reset buffer
.8aa1		9c 71 07	stz $0771			stz     LoadEndCharacter
.8aa4		60		rts				rts
.8aa5						LoadReadByte:
.8aa5		da		phx				phx
.8aa6		ae 70 07	ldx $0770			ldx     LoadNextCharacter 					; all data consumed ?
.8aa9		ec 71 07	cpx $0771			cpx     LoadEndCharacter
.8aac		d0 12		bne $8ac0			bne     _KNLRBGetNextByte
.8aae		ad 6f 07	lda $076f			lda     LoadFileStream
.8ab1		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8ab3		20 f7 81	jsr $81f7			jsr     KNLReadBlock 				; read next chunk from the stream
.8ab6		b0 0f		bcs $8ac7			bcs     _KNLRBError 				; error has occurred on read.
.8ab8		8d 71 07	sta $0771			sta     LoadEndCharacter 						; # read is the number available
.8abb		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8abd		8e 70 07	stx $0770			stx     LoadNextCharacter
.8ac0						_KNLRBGetNextByte:
.8ac0		bd 5f 06	lda $065f,x			lda     KNLReadBuffer,x 			; get the next data item
.8ac3		ee 70 07	inc $0770			inc     LoadNextCharacter 					; and advance the index
.8ac6		18		clc				clc 								; succeeded
.8ac7						_KNLRBError:
.8ac7		fa		plx				plx
.8ac8		60		rts				rts
.076d						LoadEOFFlag:
>076d								.fill 	1
.076e						BasicFileStream:
>076e								.fill 	1
.076f						LoadFileStream:
>076f								.byte   ?
.0770						LoadNextCharacter:
>0770								.byte   ?
.0771						LoadEndCharacter:
>0771								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8ac9						Command_Save:
.8ac9		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; file name to load
.8acc		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8ace		a5 36		lda $36				lda 	zTemp0
.8ad0		20 9d 81	jsr $819d			jsr 	KNLOpenFileWrite 			; open file for writing
.8ad3		b0 2f		bcs $8b04			bcs 	CSErrorHandler 				; error, so fail.
.8ad5		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.8ad8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ada		85 30		sta $30				sta 	codePtr
.8adc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ade		85 31		sta $31				sta 	codePtr+1
.8ae0						_CSLoop:
.8ae0		b2 30		lda ($30)			lda 	(codePtr)
.8ae2		f0 17		beq $8afb			beq 	_CSExit
.8ae4		20 28 8b	jsr $8b28			jsr 	CSGetCleanLine
.8ae7		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8ae9		85 36		sta $36				sta 	zTemp0
.8aeb		20 07 8b	jsr $8b07			jsr 	CLWriteByteBlock 			; write the block out.
.8aee		18		clc				clc
.8aef		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8af1		65 30		adc $30				adc 	codePtr
.8af3		85 30		sta $30				sta 	codePtr
.8af5		90 02		bcc $8af9			bcc 	_CREExit
.8af7		e6 31		inc $31				inc 	codePtr+1 					; carry
.8af9						_CREExit:
.8af9		80 e5		bra $8ae0			bra 	_CSLoop
.8afb						_CSExit:
.8afb		ad 6e 07	lda $076e			lda 	BasicFileStream 			; close file
.8afe		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.8b01		4c 30 8a	jmp $8a30			jmp 	CLComplete 					; display complete message.
.8b04						CSErrorHandler:
.8b04		4c 4b 8a	jmp $8a4b			jmp 	CLErrorHandler
.8b07						CLWriteByteBlock:
.8b07		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8b09		f0 1c		beq $8b27			beq 	_CLWBBExit					; if so, exit
.8b0b		ad 6e 07	lda $076e			lda 	BasicFileStream 			; stream to write, count in X
.8b0e		20 32 82	jsr $8232			jsr 	KNLWriteBlock 				; call one write attempt
.8b11		b0 f1		bcs $8b04			bcs 	CSErrorHandler 				; error occurred
.8b13		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8b15		8a		txa				txa 								; subtract bytes written from X, total count.
.8b16		38		sec				sec
.8b17		e5 38		sbc $38				sbc 	zTemp1
.8b19		aa		tax				tax
.8b1a		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8b1b		a5 36		lda $36				lda 	zTemp0
.8b1d		65 38		adc $38				adc 	zTemp1
.8b1f		85 36		sta $36				sta 	zTemp0
.8b21		90 e4		bcc $8b07			bcc 	CLWriteByteBlock
.8b23		e6 37		inc $37				inc 	zTemp0+1
.8b25		80 e0		bra $8b07			bra 	CLWriteByteBlock 			; and retry write out.
.8b27						_CLWBBExit:
.8b27		60		rts				rts
.8b28						CSGetCleanLine:
.8b28		a9 00		lda #$00			lda 	#0 							; no indent.
.8b2a		20 93 80	jsr $8093			jsr 	TKListConvertLine 			; convert line into token Buffer
.8b2d		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8b2f		a0 00		ldy #$00			ldy 	#0
.8b31						_CSClean:
.8b31		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8b34		f0 09		beq $8b3f			beq 	_CSDoneClean
.8b36		30 04		bmi $8b3c			bmi 	_CSIgnoreCharacter
.8b38		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b3b		e8		inx				inx
.8b3c						_CSIgnoreCharacter:
.8b3c		c8		iny				iny
.8b3d		80 f2		bra $8b31			bra 	_CSClean
.8b3f						_CSDoneClean:
.8b3f		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8b41		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b44		e8		inx				inx
.8b45		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8b48		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8b4a		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8b4c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.dc77						m
.8b4d						Command_VERIFY:
.8b4d		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; file name to verify
.8b50		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b52		a5 36		lda $36				lda 	zTemp0
.8b54		20 a2 81	jsr $81a2			jsr 	KNLOpenFileRead 			; open file for reading
.8b57		b0 4b		bcs $8ba4			bcs 	_CVErrorHandler 			; error, so fail.
.8b59		8d 6e 07	sta $076e			sta 	BasicFileStream 			; save the reading stream.
.8b5c		20 9b 8a	jsr $8a9b			jsr     LoadReadByteInit            ; Init reader with the stream
.8b5f		9c 6d 07	stz $076d			stz 	LoadEOFFlag 				; clear EOF Flag.
.8b62		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b64		85 30		sta $30				sta 	codePtr
.8b66		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b68		85 31		sta $31				sta 	codePtr+1
.8b6a						_CVLoop:
.8b6a		20 59 8a	jsr $8a59			jsr 	LoadReadLine 				; get next line.
.8b6d		f0 27		beq $8b96			beq 	_CVExit 					; end, exit.
.8b6f		20 9d 80	jsr $809d			jsr 	TKTokeniseLine 				; tokenise the line.
.8b72		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8b75		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8b78		f0 f0		beq $8b6a			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8b7a		a0 00		ldy #$00			ldy 	#0 							; start compare
.8b7c						_CVCompareLoop:
.8b7c		b1 30		lda ($30),y			lda 	(codePtr),y
.8b7e		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8b81		d0 1c		bne $8b9f			bne 	_CVCompareError
.8b83		c8		iny				iny
.8b84		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8b87		d0 f3		bne $8b7c			bne 	_CVCompareLoop
.8b89		18		clc				clc
.8b8a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b8c		65 30		adc $30				adc 	codePtr
.8b8e		85 30		sta $30				sta 	codePtr
.8b90		90 02		bcc $8b94			bcc 	_CREExit
.8b92		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b94						_CREExit:
.8b94		80 d4		bra $8b6a			bra 	_CVLoop
.8b96						_CVExit:
.8b96		ad 6e 07	lda $076e			lda 	BasicFileStream
.8b99		20 6c 82	jsr $826c			jsr 	KNLCloseFile
.8b9c		4c 30 8a	jmp $8a30			jmp 	CLComplete
.8b9f						_CVCompareError:
.8b9f		a9 1b		lda #$1b		lda	#27
.8ba1		4c 48 97	jmp $9748		jmp	ErrorHandler
.8ba4						_CVErrorHandler:
.8ba4		4c 4b 8a	jmp $8a4b			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8ba7						ForCommand:
.8ba7		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8ba9		20 d5 b7	jsr $b7d5			jsr 	StackOpen
.8bac		a2 00		ldx #$00			ldx 	#0
.8bae		20 96 a0	jsr $a096			jsr 	EvaluateTerm
.8bb1		b5 50		lda $50,x			lda 	NSStatus,x
.8bb3		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8bb5		d0 47		bne $8bfe			bne		_FCError
.8bb7		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8bb9		20 3f 97	jsr $973f			jsr 	CheckNextA
.8bbc		e8		inx				inx
.8bbd		20 0f a6	jsr $a60f			jsr 	EvaluateInteger 			; <from> in +1
.8bc0		b1 30		lda ($30),y			lda 	(codePtr),y
.8bc2		c8		iny				iny 								; consume it
.8bc3		48		pha				pha 								; save on stack for later
.8bc4		c9 c0		cmp #$c0			cmp 	#KWD_DOWNTO
.8bc6		f0 04		beq $8bcc			beq 	_FCNoSyntax
.8bc8		c9 da		cmp #$da			cmp 	#KWD_TO
.8bca		d0 35		bne $8c01			bne 	_FCSyntaxError
.8bcc						_FCNoSyntax:
.8bcc		e8		inx				inx
.8bcd		20 0f a6	jsr $a60f			jsr 	EvaluateInteger
.8bd0		20 1a b8	jsr $b81a			jsr 	STKSaveCodePosition 		; save loop back position
.8bd3		68		pla				pla 								; restore DOWNTO or TO
.8bd4		5a		phy				phy 								; save Y on the stack
.8bd5		49 c0		eor #$c0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8bd7		f0 02		beq $8bdb			beq 	_FCNotDownTo
.8bd9		a9 02		lda #$02			lda 	#2
.8bdb						_FCNotDownTo:
.8bdb		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8bdc		a0 10		ldy #$10			ldy 	#16
.8bde		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8be0		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8be2		a5 58		lda $58				lda 	NSMantissa0
.8be4		91 34		sta ($34),y			sta 	(basicStack),y
.8be6		a5 60		lda $60				lda 	NSMantissa1
.8be8		c8		iny				iny
.8be9		91 34		sta ($34),y			sta 	(basicStack),y
.8beb		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8bed		a2 01		ldx #$01			ldx 	#1
.8bef		20 04 8c	jsr $8c04			jsr 	FCIntegerToStack
.8bf2		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8bf4		a2 02		ldx #$02			ldx 	#2
.8bf6		20 04 8c	jsr $8c04			jsr 	FCIntegerToStack
.8bf9		20 1f 8c	jsr $8c1f			jsr 	CopyIndexToReference
.8bfc		7a		ply				ply 								; restore position
.8bfd		60		rts				rts
.8bfe						_FCError:
.8bfe		4c 65 b1	jmp $b165			jmp 	TypeError
.8c01						_FCSyntaxError:
.8c01		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.8c04						FCIntegerToStack:
.8c04		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8c06		10 03		bpl $8c0b			bpl	 	_FCNotNegative
.8c08		20 6b a6	jsr $a66b			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c0b						_FCNotNegative:
.8c0b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c0d		91 34		sta ($34),y			sta 	(basicStack),y
.8c0f		c8		iny				iny
.8c10		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c12		91 34		sta ($34),y			sta 	(basicStack),y
.8c14		c8		iny				iny
.8c15		b5 68		lda $68,x			lda 	NSMantissa2,x
.8c17		91 34		sta ($34),y			sta 	(basicStack),y
.8c19		c8		iny				iny
.8c1a		b5 70		lda $70,x			lda 	NSMantissa3,x
.8c1c		91 34		sta ($34),y			sta 	(basicStack),y
.8c1e		60		rts				rts
.8c1f						CopyIndexToReference:
.8c1f		5a		phy				phy
.8c20		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c22		38		sec				sec 								; (because we copy from offset 8)
.8c23		b1 34		lda ($34),y			lda 	(basicStack),y
.8c25		e9 08		sbc #$08			sbc 	#8
.8c27		85 36		sta $36				sta 	zTemp0
.8c29		c8		iny				iny
.8c2a		b1 34		lda ($34),y			lda 	(basicStack),y
.8c2c		e9 00		sbc #$00			sbc 	#0
.8c2e		85 37		sta $37				sta 	zTemp0+1
.8c30		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c32		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c34		b1 34		lda ($34),y			lda 	(basicStack),y
.8c36		0a		asl a				asl 	a 							; into carry
.8c37		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c39		90 14		bcc $8c4f			bcc 	_CITRNormal
.8c3b		38		sec				sec
.8c3c						_CITRNegative:
.8c3c		a9 00		lda #$00			lda 	#0
.8c3e		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c40		91 36		sta ($36),y			sta 	(zTemp0),y
.8c42		c8		iny				iny
.8c43		ca		dex				dex
.8c44		d0 f6		bne $8c3c			bne 	_CITRNegative
.8c46		88		dey				dey 								; look at MSB of mantissa
.8c47		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c49		09 80		ora #$80			ora 	#$80
.8c4b		91 36		sta ($36),y			sta 	(zTemp0),y
.8c4d		7a		ply				ply
.8c4e		60		rts				rts
.8c4f						_CITRNormal:
.8c4f		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c51		91 36		sta ($36),y			sta 	(zTemp0),y
.8c53		c8		iny				iny
.8c54		ca		dex				dex
.8c55		d0 f8		bne $8c4f			bne 	_CITRNormal
.8c57		7a		ply				ply 								; and exit.
.8c58		60		rts				rts
.8c59						NextCommand:
.8c59		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8c5b		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8c5d		20 02 b8	jsr $b802			jsr 	StackCheckFrame
.8c60		5a		phy				phy
.8c61		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8c63		b1 34		lda ($34),y			lda 	(basicStack),y
.8c65		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8c67		30 02		bmi $8c6b			bmi 	_NCStepNeg
.8c69		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8c6b						_NCStepNeg:
.8c6b		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8c6d		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8c6f		18		clc				clc
.8c70						_NCBump:
.8c70		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8c72		91 34		sta ($34),y			sta 	(basicStack),y
.8c74		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8c76		c8		iny				iny 								; next byte
.8c77		ca		dex				dex 								; do four times
.8c78		d0 f6		bne $8c70			bne 	_NCBump
.8c7a		20 1f 8c	jsr $8c1f			jsr		CopyIndexToReference		; copy it to the reference variable.
.8c7d		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8c7f		b1 34		lda ($34),y			lda 	(basicStack),y
.8c81		0a		asl a				asl 	a 							; sign bit to carry
.8c82		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8c84		85 38		sta $38				sta 	zTemp1
.8c86		90 02		bcc $8c8a			bcc 	_NCCompRev 					; use if step is +ve
.8c88		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8c8a						_NCCompRev:
.8c8a		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8c8c		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8c8e		85 39		sta $39				sta 	zTemp1+1
.8c90		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8c92		38		sec				sec
.8c93						_NCCompare:
.8c93		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8c95		b1 34		lda ($34),y			lda 	(basicStack),y
.8c97		a4 39		ldy $39				ldy 	zTemp1+1
.8c99		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c9b		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8c9d		e6 39		inc $39				inc 	zTemp1+1
.8c9f		ca		dex				dex 								; do it 4 times.
.8ca0		d0 f1		bne $8c93			bne 	_NCCompare
.8ca2		50 02		bvc $8ca6			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ca4		49 80		eor #$80			eor 	#$80
.8ca6						_NCNoOverflow:
.8ca6		7a		ply				ply 								; restore Y position
.8ca7		0a		asl a				asl 	a 							; is bit 7 set.
.8ca8		90 04		bcc $8cae			bcc 	_NCLoopBack 				; if no , >= so loop back
.8caa		20 f4 b7	jsr $b7f4			jsr 	StackClose 					; exit the loop
.8cad		60		rts				rts
.8cae						_NCLoopBack:
.8cae		20 2b b8	jsr $b82b			jsr 	STKLoadCodePosition 		; loop back
.8cb1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8cb2						Command_GOSUB:
.8cb2		a2 00		ldx #$00			ldx 	#0
.8cb4		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8cb7		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8cb9		20 d5 b7	jsr $b7d5			jsr 	StackOpen 					; create frame
.8cbc		20 1a b8	jsr $b81a			jsr 	STKSaveCodePosition 		; save current position
.8cbf		4c d5 8c	jmp $8cd5			jmp 	GotoStackX
.8cc2						Command_RETURN:
.8cc2		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8cc4		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8cc6		20 02 b8	jsr $b802			jsr 	StackCheckFrame
.8cc9		20 2b b8	jsr $b82b			jsr 	STKLoadCodePosition 		; restore code position
.8ccc		20 f4 b7	jsr $b7f4			jsr 	StackClose
.8ccf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8cd0						GotoCommand:
.8cd0		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8cd2		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.8cd5						GotoStackX:
.8cd5		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8cd7		48		pha				pha 								; it is slightly inefficient, just in cases.
.8cd8		b5 58		lda $58,x			lda 	NSMantissa0,x
.8cda		fa		plx				plx
.8cdb		20 f3 b3	jsr $b3f3			jsr 	MemorySearch 				; transfer to line number AX.
.8cde		90 05		bcc $8ce5			bcc 	_GotoError 					; not found, off end.
.8ce0		d0 03		bne $8ce5			bne 	_GotoError 					; not found exactly
.8ce2		4c 0e 93	jmp $930e			jmp 	RunNewLine 					; and go straight to new line code.
.8ce5						_GotoError:
.8ce5		a9 0d		lda #$0d		lda	#13
.8ce7		4c 48 97	jmp $9748		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8cea						IfCommand:
.8cea		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8cec		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber
.8cef		b1 30		lda ($30),y			lda 	(codePtr),y
.8cf1		c9 b4		cmp #$b4			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8cf3		d0 0a		bne $8cff			bne 	_IfStructured 				; we still support it.
.8cf5		c8		iny				iny 								; consume THEN
.8cf6		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; is it zero
.8cf9		f0 01		beq $8cfc			beq 	_IfFail 					; if fail, go to next line
.8cfb		60		rts				rts 								; if THEN just continue
.8cfc						_IfFail:
.8cfc		4c e9 92	jmp $92e9			jmp 	EOLCommand
.8cff						_IfStructured:
.8cff		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; is it zero
.8d02		d0 07		bne $8d0b			bne 	_IfExit 					; if not, then continue normally.
.8d04		a9 c1		lda #$c1			lda 	#KWD_ELSE 					; look for else/endif
.8d06		a2 b1		ldx #$b1			ldx 	#KWD_ENDIF
.8d08		20 8a 96	jsr $968a			jsr 	ScanForward 				; and run from there
.8d0b						_IfExit:
.8d0b		60		rts				rts
.8d0c						ElseCode:
.8d0c		a9 b1		lda #$b1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d0e		aa		tax				tax 								; so just go to the structure exit
.8d0f		20 8a 96	jsr $968a			jsr 	ScanForward
.8d12		60		rts				rts
.8d13						EndIf:
.8d13		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8d14						Command_Input:
.8d14		9c 24 04	stz $0424			stz 	isPrintFlag
.8d17		80 0c		bra $8d25			bra 	Command_IP_Main
.8d19						Command_CPrint:
.8d19		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8d1b		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d1e		80 05		bra $8d25			bra 	Command_IP_Main
.8d20						Command_Print:
.8d20		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8d22		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d25						Command_IP_Main:
.8d25		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8d26						_CPLoop:
.8d26		08		php				php 								; save last action flag
.8d27		b1 30		lda ($30),y			lda 	(codePtr),y
.8d29		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8d2b		f0 54		beq $8d81			beq 	_CPExit
.8d2d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8d2f		f0 50		beq $8d81			beq 	_CPExit
.8d31		68		pla				pla 								; throw last action flag
.8d32		b1 30		lda ($30),y			lda 	(codePtr),y
.8d34		c8		iny				iny
.8d35		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8d37		f0 45		beq $8d7e			beq 	_CPContinueWithSameLine
.8d39		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8d3b		f0 3c		beq $8d79			beq 	_CPTab
.8d3d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8d3f		f0 34		beq $8d75			beq 	_CPNewLine
.8d41		88		dey				dey 								; undo the get.
.8d42		20 4a 9c	jsr $9c4a			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8d45		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8d47		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8d49		f0 0d		beq $8d58			beq 	_CPIsValue 					; no, display it.
.8d4b		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8d4e		d0 05		bne $8d55			bne 	_CPIsPrint 					; otherwise display.
.8d50		20 8a 8d	jsr $8d8a			jsr 	CIInputValue 				; input a value to the reference
.8d53		80 20		bra $8d75			bra 	_CPNewLine
.8d55						_CPIsPrint:
.8d55		20 0f 9f	jsr $9f0f			jsr 	Dereference 				; dereference if required.
.8d58						_CPIsValue:
.8d58		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8d5a		29 10		and #$10			and 	#NSBIsString
.8d5c		f0 09		beq $8d67			beq 	_CPNumber
.8d5e		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8d60		a5 58		lda $58				lda 	NSMantissa0
.8d62		20 ed 8d	jsr $8ded			jsr 	CPPrintStringXA
.8d65		80 be		bra $8d25			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8d67						_CPNumber:
.8d67		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8d69		20 d7 a4	jsr $a4d7			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8d6c		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8d6e		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8d70		20 ed 8d	jsr $8ded			jsr 	CPPrintStringXA 			; print it.
.8d73		80 b0		bra $8d25			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8d75						_CPNewLine:
.8d75		a9 0d		lda #$0d			lda 	#13
.8d77		80 02		bra $8d7b			bra 	_CPPrintCharDirect
.8d79						_CPTab:
.8d79		a9 09		lda #$09			lda 	#9 							; print TAB
.8d7b						_CPPrintCharDirect:
.8d7b		20 08 8e	jsr $8e08			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8d7e						_CPContinueWithSameLine:
.8d7e		38		sec				sec 								; loop round with carry set, which
.8d7f		80 a5		bra $8d26			bra 	_CPLoop 					; will inhibit final CR
.8d81						_CPExit:
.8d81		28		plp				plp 								; get last action flag
.8d82		b0 05		bcs $8d89			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8d84		a9 0d		lda #$0d			lda 	#13 						; print new line
.8d86		20 08 8e	jsr $8e08			jsr 	CPPVControl
.8d89						_CPExit2:
.8d89		60		rts				rts
.8d8a						CIInputValue:
.8d8a		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8d8c						_CIInputLine:
.8d8c		20 0b 8e	jsr $8e0b			jsr 	CPInputVector 				; get key
.8d8f		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8d91		f0 1f		beq $8db2			beq 	_CIHaveValue
.8d93		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8d95		f0 11		beq $8da8			beq 	_CIBackspace
.8d97		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8d99		90 f1		bcc $8d8c			bcc 	_CIInputLine
.8d9b		e0 50		cpx #$50			cpx 	#80 						; max length
.8d9d		b0 ed		bcs $8d8c			bcs 	_CIInputLine
.8d9f		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8da2		e8		inx				inx
.8da3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8da6		80 e4		bra $8d8c			bra 	_CIInputLine
.8da8						_CIBackspace:
.8da8		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8daa		f0 e0		beq $8d8c			beq 	_CIInputLine
.8dac		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8daf		ca		dex				dex
.8db0		80 da		bra $8d8c			bra 	_CIInputLine
.8db2						_CIHaveValue:
.8db2		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8db5		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8db7		29 10		and #$10			and 	#NSBIsString
.8db9		f0 17		beq $8dd2			beq 	_CIAssignNumber 			; assign a number
.8dbb		a2 01		ldx #$01			ldx 	#1
.8dbd		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8dbf		95 58		sta $58,x			sta 	NSMantissa0,x
.8dc1		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8dc3		95 60		sta $60,x			sta 	NSMantissa1,x
.8dc5		74 68		stz $68,x			stz 	NSMantissa2,x
.8dc7		74 70		stz $70,x			stz 	NSMantissa3,x
.8dc9		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8dcb		95 50		sta $50,x			sta  	NSStatus,x
.8dcd		ca		dex				dex 								; X = 0
.8dce		20 80 8e	jsr $8e80			jsr 	AssignVariable
.8dd1		60		rts				rts
.8dd2						_CIAssignNumber:
.8dd2		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8dd4		85 36		sta $36				sta 	zTemp0
.8dd6		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8dd8		85 37		sta $37				sta 	zTemp0+1
.8dda		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8ddc		20 b7 a3	jsr $a3b7			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8ddf		90 07		bcc $8de8			bcc 	_CIIsOkay
.8de1		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8de3		20 00 8e	jsr $8e00			jsr 	CPPrintVector
.8de6		80 a2		bra $8d8a			bra 	CIInputValue
.8de8						_CIIsOkay:
.8de8		ca		dex				dex 								; X = 0
.8de9		20 80 8e	jsr $8e80			jsr 	AssignVariable
.8dec		60		rts				rts
.8ded						CPPrintStringXA:
.8ded		5a		phy				phy
.8dee		86 37		stx $37				stx 	zTemp0+1
.8df0		85 36		sta $36				sta 	zTemp0
.8df2		a0 00		ldy #$00			ldy 	#0
.8df4						_PSXALoop:
.8df4		b1 36		lda ($36),y			lda 	(zTemp0),y
.8df6		f0 06		beq $8dfe			beq 	_PSXAExit
.8df8		20 00 8e	jsr $8e00			jsr 	CPPrintVector
.8dfb		c8		iny				iny
.8dfc		80 f6		bra $8df4			bra 	_PSXALoop
.8dfe						_PSXAExit:
.8dfe		7a		ply				ply
.8dff		60		rts				rts
.8e00						CPPrintVector:
.8e00		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8e03		30 03		bmi $8e08			bmi 	CPPVControl
.8e05		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8e08						CPPVControl:
.8e08		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8e0b						CPInputVector:
.8e0b		4c 6b 80	jmp $806b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8e0e						UnaryJoyX:
.8e0e		18		clc				clc
.8e0f		80 01		bra $8e12			bra 	JoyMain
.8e11						UnaryJoyY:
.8e11		38		sec				sec
.8e12						JoyMain:
.8e12		fa		plx				plx 								; get pos
.8e13		08		php				php 								; save carry (set for Y)
.8e14		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e17		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.8e1a		20 88 82	jsr $8288			jsr 	KNLReadController 			; read the controller.
.8e1d		28		plp				plp
.8e1e		b0 02		bcs $8e22			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8e20		4a		lsr a				lsr 	a
.8e21		4a		lsr a				lsr 	a
.8e22						_JMNoShift:
.8e22		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8e23		b0 07		bcs $8e2c			bcs 	JMIsLeft
.8e25		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8e26		b0 07		bcs $8e2f			bcs 	JMIsRight
.8e28		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; zero result
.8e2b		60		rts				rts
.8e2c						JMIsLeft:
.8e2c		4c b5 97	jmp $97b5			jmp 	ReturnTrue
.8e2f						JMIsRight:
.8e2f		a9 01		lda #$01			lda 	#1
.8e31		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.8e34		60		rts				rts
.8e35						UnaryJoyB:
.8e35		fa		plx				plx 								; get pos
.8e36		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e39		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.8e3c		20 88 82	jsr $8288			jsr 	KNLReadController 			; read the controller.
.8e3f		29 10		and #$10			and 	#$10
.8e41		d0 e9		bne $8e2c			bne 	JMIsLeft
.8e43		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.8e46		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8e47						LetCommand:
.8e47		a2 00		ldx #$00			ldx 	#0
.8e49		b1 30		lda ($30),y			lda 	(codePtr),y
.8e4b		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8e4d		d0 14		bne $8e63			bne 	_LCStandard
.8e4f		c8		iny				iny 								; skip equal
.8e50		20 96 a0	jsr $a096			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8e53		20 0f 9f	jsr $9f0f			jsr 	Dereference 				; dereference it to a value
.8e56		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8e58		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8e5a		95 50		sta $50,x			sta 	NSStatus,x
.8e5c		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8e5e		d0 0f		bne $8e6f			bne 	_LCMain
.8e60		4c 65 b1	jmp $b165			jmp 	TypeError 					; was a reference before.
.8e63						_LCStandard:
.8e63		ad 34 9c	lda $9c34			lda 	PrecedenceLevel+"*"			; precedence > this
.8e66		20 4e 9c	jsr $9c4e			jsr 	EvaluateExpressionAtPrecedence
.8e69		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8e6b		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8e6d		f0 0e		beq $8e7d			beq 	_LetGoProc 					; it's a procedure call.
.8e6f						_LCMain:
.8e6f		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8e71		20 3f 97	jsr $973f			jsr 	CheckNextA
.8e74		e8		inx				inx 								; RHS
.8e75		20 e7 a5	jsr $a5e7			jsr 	EvaluateValue
.8e78		ca		dex				dex
.8e79		20 80 8e	jsr $8e80			jsr 	AssignVariable
.8e7c		60		rts				rts
.8e7d						_LetGoProc:
.8e7d		4c bf 91	jmp $91bf			jmp 	CallProcedure
.8e80						AssignVariable:
.8e80		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8e82		48		pha				pha 								; save a copy
.8e83		55 51		eor $51,x			eor 	NSStatus+1,x
.8e85		29 10		and #$10			and 	#NSBIsString
.8e87		d0 0b		bne $8e94			bne 	_ASError
.8e89		68		pla				pla 								; get back
.8e8a		29 10		and #$10			and 	#NSBIsString 				; check type
.8e8c		d0 03		bne $8e91			bne 	_ASString
.8e8e		4c 4d 9e	jmp $9e4d			jmp 	AssignNumber
.8e91						_ASString:
.8e91		4c ab 9e	jmp $9eab			jmp 	AssignString
.8e94						_ASError:
.8e94		4c 65 b1	jmp $b165			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8e97						Command_List:
.8e97		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8e9a		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8e9c		20 7f 80	jsr $807f			jsr 	SNDCommand
.8e9f		b1 30		lda ($30),y			lda 	(codePtr),y
.8ea1		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8ea3		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8ea5		f0 72		beq $8f19			beq 	_CLListProcedure
.8ea7		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8ea9		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8eab		a9 ff		lda #$ff			lda 	#$FF
.8ead		85 5f		sta $5f				sta 	NSMantissa0+7
.8eaf		85 67		sta $67				sta 	NSMantissa1+7
.8eb1		b1 30		lda ($30),y			lda 	(codePtr),y
.8eb3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8eb5		f0 1a		beq $8ed1			beq 	_CLSecond
.8eb7		20 96 8f	jsr $8f96			jsr 	CLIsDigit 					; if not digit, list all
.8eba		b0 20		bcs $8edc			bcs 	_CLStart
.8ebc		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8ebe		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.8ec1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ec3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ec5		f0 0a		beq $8ed1			beq 	_CLSecond 					; if so go get it
.8ec7		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8ec9		85 5f		sta $5f				sta 	NSMantissa0+7
.8ecb		a5 64		lda $64				lda 	NSMantissa1+4
.8ecd		85 67		sta $67				sta 	NSMantissa1+7
.8ecf		80 0b		bra $8edc			bra 	_CLStart
.8ed1						_CLSecond:
.8ed1		c8		iny				iny 								; consume comma
.8ed2		20 96 8f	jsr $8f96			jsr 	CLIsDigit 					; digit found
.8ed5		b0 05		bcs $8edc			bcs 	_CLStart 					; if not, continue listing
.8ed7		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8ed9		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.8edc						_CLStart
.8edc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ede		85 30		sta $30				sta 	codePtr
.8ee0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ee2		85 31		sta $31				sta 	codePtr+1
.8ee4						_CLLoop:
.8ee4		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8ee6		f0 03		beq $8eeb			beq 	_NoEvents					; if zero, skip with Z flag set.
.8ee8		20 41 81	jsr $8141			jsr 	ProcessEvents
.8eeb						_NoEvents:
.8eeb		d0 27		bne $8f14			bne 	_CLBreak
.8eed		b2 30		lda ($30)			lda 	(codePtr)
.8eef		f0 20		beq $8f11			beq 	_CLExit
.8ef1		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8ef3		20 85 8f	jsr $8f85			jsr 	CLCompareLineNo
.8ef6		90 0c		bcc $8f04			bcc 	_CLNext
.8ef8		a2 07		ldx #$07			ldx 	#7
.8efa		20 85 8f	jsr $8f85			jsr 	CLCompareLineNo
.8efd		f0 02		beq $8f01			beq 	_CLDoThisOne
.8eff		b0 03		bcs $8f04			bcs 	_CLNext
.8f01						_CLDoThisOne:
.8f01		20 72 8f	jsr $8f72			jsr 	CLListOneLine 				; routine to list the current line.
.8f04						_CLNext:
.8f04		18		clc				clc
.8f05		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f07		65 30		adc $30				adc 	codePtr
.8f09		85 30		sta $30				sta 	codePtr
.8f0b		90 02		bcc $8f0f			bcc 	_CREExit
.8f0d		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f0f						_CREExit:
.8f0f		80 d3		bra $8ee4			bra 	_CLLoop
.8f11						_CLExit:
.8f11		4c c4 85	jmp $85c4			jmp 	WarmStart
.8f14						_CLBreak:
.8f14		a9 01		lda #$01		lda	#1
.8f16		4c 48 97	jmp $9748		jmp	ErrorHandler
.8f19						_CLListProcedure:
.8f19		b1 30		lda ($30),y			lda 	(codePtr),y
.8f1b		85 38		sta $38				sta 	zTemp1
.8f1d		c8		iny				iny
.8f1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f20		85 39		sta $39				sta 	zTemp1+1
.8f22		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f24		85 30		sta $30				sta 	codePtr
.8f26		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f28		85 31		sta $31				sta 	codePtr+1
.8f2a						_CLLPSearch:
.8f2a		b2 30		lda ($30)			lda 	(codePtr)
.8f2c		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8f2e		f0 e1		beq $8f11			beq 	_CLExit
.8f30		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8f32		b1 30		lda ($30),y			lda 	(codePtr),y
.8f34		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.8f36		d0 0e		bne $8f46			bne 	_CLLPNext
.8f38		c8		iny				iny 								; check if PROC this.
.8f39		b1 30		lda ($30),y			lda 	(codePtr),y
.8f3b		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8f3d		d0 07		bne $8f46			bne 	_CLLPNext
.8f3f		c8		iny				iny
.8f40		b1 30		lda ($30),y			lda 	(codePtr),y
.8f42		c5 39		cmp $39				cmp 	zTemp1+1
.8f44		f0 0d		beq $8f53			beq 	_CLLPFound
.8f46						_CLLPNext:
.8f46		18		clc				clc
.8f47		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f49		65 30		adc $30				adc 	codePtr
.8f4b		85 30		sta $30				sta 	codePtr
.8f4d		90 02		bcc $8f51			bcc 	_CREExit
.8f4f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f51						_CREExit:
.8f51		80 d7		bra $8f2a			bra 	_CLLPSearch
.8f53						_CLLPFound:
.8f53		b2 30		lda ($30)			lda 	(codePtr)
.8f55		f0 ba		beq $8f11			beq 	_CLExit
.8f57		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8f59		b1 30		lda ($30),y			lda 	(codePtr),y
.8f5b		48		pha				pha
.8f5c		20 72 8f	jsr $8f72			jsr 	CLListOneLine 				; list line and go forward
.8f5f		18		clc				clc
.8f60		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f62		65 30		adc $30				adc 	codePtr
.8f64		85 30		sta $30				sta 	codePtr
.8f66		90 02		bcc $8f6a			bcc 	_CREExit
.8f68		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f6a						_CREExit:
.8f6a		68		pla				pla 								; reached ENDPROC ?
.8f6b		c9 b2		cmp #$b2			cmp 	#KWD_ENDPROC
.8f6d		d0 e4		bne $8f53			bne 	_CLLPFound
.8f6f		4c c4 85	jmp $85c4			jmp 	WarmStart
.8f72						CLListOneLine:
.8f72		20 ed 96	jsr $96ed			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8f75		20 93 80	jsr $8093			jsr 	TKListConvertLine 			; convert line into token Buffer
.8f78		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8f7a		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8f7c		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.8f7f		a9 0d		lda #$0d			lda 	#13 						; new line
.8f81		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8f84		60		rts				rts
.8f85						CLCompareLineNo:
.8f85		38		sec				sec
.8f86		a0 01		ldy #$01			ldy 	#1
.8f88		b1 30		lda ($30),y			lda 	(codePtr),y
.8f8a		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8f8c		85 36		sta $36				sta 	zTemp0
.8f8e		c8		iny				iny
.8f8f		b1 30		lda ($30),y			lda 	(codePtr),y
.8f91		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8f93		05 36		ora $36				ora 	zTemp0
.8f95		60		rts				rts
.8f96						CLIsDigit:
.8f96		b1 30		lda ($30),y			lda 	(codePtr),y
.8f98		c9 30		cmp #$30			cmp 	#"0"
.8f9a		90 03		bcc $8f9f			bcc	 	_CLIDExitFalse
.8f9c		c9 3a		cmp #$3a			cmp 	#"9"+1
.8f9e		60		rts				rts
.8f9f						_CLIDExitFalse:
.8f9f		38		sec				sec
.8fa0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8fa1						Command_LOCAL:
.8fa1		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8fa3		20 af 8f	jsr $8faf			jsr 	LocaliseNextTerm 			; convert term to a local.
.8fa6		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa8		c8		iny				iny
.8fa9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8fab		f0 f4		beq $8fa1			beq 	Command_LOCAL 				; if so, localise another variable.
.8fad		88		dey				dey 								; unpick pre-get
.8fae		60		rts				rts
.8faf						LocaliseNextTerm:
.8faf		20 96 a0	jsr $a096			jsr 	EvaluateTerm 				; evaluate the term
.8fb2		b5 50		lda $50,x			lda 	NSStatus,x
.8fb4		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8fb6		f0 5c		beq $9014			beq		_LNTError
.8fb8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8fba		85 36		sta $36				sta 	zTemp0
.8fbc		b5 60		lda $60,x			lda 	NSMantissa1,x
.8fbe		85 37		sta $37				sta  	zTemp0+1
.8fc0		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8fc2		29 10		and #$10			and 	#NSBIsString
.8fc4		d0 1e		bne $8fe4			bne 	_LNTPushString
.8fc6		5a		phy				phy
.8fc7		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8fc9						_LNTPushNumLoop:
.8fc9		b1 36		lda ($36),y			lda		(zTemp0),y
.8fcb		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.8fce		c8		iny				iny
.8fcf		c0 05		cpy #$05			cpy 	#5
.8fd1		d0 f6		bne $8fc9			bne 	_LNTPushNumLoop
.8fd3		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8fd5		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.8fd8		a5 37		lda $37				lda 	zTemp0+1
.8fda		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.8fdd		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8fdf		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.8fe2		7a		ply				ply
.8fe3		60		rts				rts
.8fe4						_LNTPushString:
.8fe4		5a		phy				phy
.8fe5		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8fe7		85 38		sta $38				sta 	zTemp1
.8fe9		a0 01		ldy #$01			ldy 	#1
.8feb		b1 36		lda ($36),y			lda 	(zTemp0),y
.8fed		85 39		sta $39				sta 	zTemp1+1
.8fef		a0 00		ldy #$00			ldy 	#0 							; output string
.8ff1		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8ff3		f0 0a		beq $8fff			beq 	_LNTStringOut
.8ff5						_LNTPushStrLoop:
.8ff5		b1 38		lda ($38),y			lda 	(zTemp1),y
.8ff7		f0 06		beq $8fff			beq 	_LNTStringOut
.8ff9		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.8ffc		c8		iny				iny
.8ffd		80 f6		bra $8ff5			bra 	_LNTPushStrLoop
.8fff						_LNTStringOut:
.8fff		98		tya				tya									; output length (chars written).
.9000		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.9003		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9005		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.9008		b5 60		lda $60,x			lda 	NSMantissa1,x
.900a		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.900d		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.900f		20 b4 b7	jsr $b7b4			jsr 	StackPushByte
.9012		7a		ply				ply
.9013		60		rts				rts
.9014						_LNTError:
.9014		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.9017						LocalPopValue:
.9017		20 cc b7	jsr $b7cc			jsr 	StackPopByte
.901a		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.901c		d0 17		bne $9035			bne 	_LPVString
.901e		20 cc b7	jsr $b7cc			jsr 	StackPopByte 				; address
.9021		85 37		sta $37				sta 	zTemp0+1
.9023		20 cc b7	jsr $b7cc			jsr 	StackPopByte
.9026		85 36		sta $36				sta 	zTemp0
.9028		5a		phy				phy
.9029		a0 04		ldy #$04			ldy 	#4 							; copy back
.902b						_LPVNumberCopy:
.902b		20 cc b7	jsr $b7cc			jsr 	StackPopByte
.902e		91 36		sta ($36),y			sta 	(zTemp0),y
.9030		88		dey				dey
.9031		10 f8		bpl $902b			bpl 	_LPVNumberCopy
.9033		7a		ply				ply 								; and complete
.9034		60		rts				rts
.9035						_LPVString:
.9035		20 cc b7	jsr $b7cc			jsr 	StackPopByte 				; address of record copied to zTemp0
.9038		85 37		sta $37				sta 	zTemp0+1
.903a		20 cc b7	jsr $b7cc			jsr 	StackPopByte
.903d		85 36		sta $36				sta 	zTemp0
.903f		5a		phy				phy
.9040		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.9042		85 38		sta $38				sta 	zTemp1
.9044		a0 01		ldy #$01			ldy 	#1
.9046		b1 36		lda ($36),y			lda 	(zTemp0),y
.9048		85 39		sta $39				sta 	zTemp1+1
.904a		20 cc b7	jsr $b7cc			jsr 	StackPopByte 				; # chars to get => y
.904d		a8		tay				tay
.904e		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9050		f0 0e		beq $9060			beq 	_LPVStringCopied
.9052		a9 00		lda #$00			lda 	#0 							; NULL on end
.9054		91 38		sta ($38),y			sta 	(zTemp1),y
.9056						_LPVStringCopy:
.9056		88		dey				dey
.9057		30 07		bmi $9060			bmi 	_LPVStringCopied
.9059		20 cc b7	jsr $b7cc			jsr 	StackPopByte
.905c		91 38		sta ($38),y			sta 	(zTemp1),y
.905e		80 f6		bra $9056			bra 	_LPVStringCopy
.9060						_LPVStringCopied:
.9060		fa		plx				plx
.9061		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.9062						MCCommand:
.9062		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.9064		48		pha				pha
.9065		64 01		stz $01				stz 	1
.9067		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.906a		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.906c		8d 72 07	sta $0772			sta 	DMAControlByte
.906f		20 1d 91	jsr $911d			jsr 	MCPosition 					; start position
.9072		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.9074		20 ee 90	jsr $90ee			jsr 	MCCopyAddress
.9077		a2 08		ldx #$08			ldx 	#8
.9079		20 ee 90	jsr $90ee			jsr 	MCCopyAddress
.907c		b1 30		lda ($30),y			lda 	(codePtr),y
.907e		c8		iny				iny
.907f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.9081		f0 09		beq $908c			beq 	_MCSize1D
.9083		c9 d4		cmp #$d4			cmp 	#KWD_RECT 					; RECT <x>,<y>
.9085		f0 11		beq $9098			beq 	_MCRect2D
.9087						_MCSyntax:
.9087		a9 02		lda #$02		lda	#2
.9089		4c 48 97	jmp $9748		jmp	ErrorHandler
.908c						_MCSize1D:
.908c		a2 00		ldx #$00			ldx 	#0 							; get size
.908e		20 0f a6	jsr $a60f			jsr 	EvaluateInteger
.9091		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.9093		20 ee 90	jsr $90ee			jsr 	MCCopyAddress
.9096		80 24		bra $90bc			bra 	_MCDestination
.9098						_MCRect2D:
.9098		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.909a		20 0b 91	jsr $910b			jsr 	MCEvalCopyData16
.909d		20 37 97	jsr $9737			jsr 	CheckComma
.90a0		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.90a2		20 0b 91	jsr $910b			jsr 	MCEvalCopyData16
.90a5		a9 b8		lda #$b8			lda 	#KWD_BY 					; BY keyword.
.90a7		20 3f 97	jsr $973f			jsr 	CheckNextA
.90aa		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.90ac		20 0b 91	jsr $910b			jsr 	MCEvalCopyData16
.90af		a2 12		ldx #$12			ldx 	#$12
.90b1		20 12 91	jsr $9112			jsr 	MCCopyData16
.90b4		ad 72 07	lda $0772			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.90b7		09 02		ora #$02			ora 	#$02
.90b9		8d 72 07	sta $0772			sta 	DMAControlByte
.90bc						_MCDestination:
.90bc		b1 30		lda ($30),y			lda 	(codePtr),y
.90be		c8		iny				iny
.90bf		c9 cf		cmp #$cf			cmp 	#KWD_POKE 					; is it POKE n
.90c1		f0 0e		beq $90d1			beq 	_MCDestPoke
.90c3		c9 da		cmp #$da			cmp 	#KWD_TO 					; is it TO n
.90c5		d0 c0		bne $9087			bne 	_MCSyntax
.90c7		20 1d 91	jsr $911d			jsr 	MCPosition 					; get target address
.90ca		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.90cc		20 ee 90	jsr $90ee			jsr 	MCCopyAddress
.90cf		80 0e		bra $90df			bra 	_MCDoDMA 					; and we can go.
.90d1						_MCDestPoke:
.90d1		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; POKE what
.90d4		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.90d7		ad 72 07	lda $0772			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.90da		09 04		ora #$04			ora 	#$04
.90dc		8d 72 07	sta $0772			sta 	DMAControlByte
.90df						_MCDoDMA:
.90df		ad 72 07	lda $0772			lda 	DMAControlByte 				; set the DMA Control byte to go !
.90e2		8d 00 df	sta $df00			sta 	$DF00
.90e5						_MCWaitBUSD:
.90e5		ad 01 df	lda $df01			lda 	$DF01
.90e8		30 fb		bmi $90e5			bmi 	_MCWaitBUSD
.90ea		68		pla				pla 								; restore I/O.
.90eb		85 01		sta $01				sta 	1
.90ed		60		rts				rts
.90ee						MCCopyAddress:
.90ee		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.90f0		29 fc		and #$fc			and 	#$FC
.90f2		05 70		ora $70				ora 	NSMantissa3
.90f4		d0 10		bne $9106			bne 	_MCRange
.90f6		a5 58		lda $58				lda 	NSMantissa0
.90f8		9d 00 df	sta $df00,x			sta 	$DF00,x
.90fb		a5 60		lda $60				lda 	NSMantissa1
.90fd		9d 01 df	sta $df01,x			sta 	$DF01,x
.9100		a5 68		lda $68				lda 	NSMantissa2
.9102		9d 02 df	sta $df02,x			sta 	$DF02,x
.9105		60		rts				rts
.9106						_MCRange:
.9106		a9 04		lda #$04		lda	#4
.9108		4c 48 97	jmp $9748		jmp	ErrorHandler
.910b						MCEvalCopyData16:
.910b		da		phx				phx
.910c		a2 00		ldx #$00			ldx 	#0
.910e		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.9111		fa		plx				plx
.9112						MCCopyData16:
.9112		a5 58		lda $58				lda 	NSMantissa0
.9114		9d 00 df	sta $df00,x			sta 	$DF00,x
.9117		a5 60		lda $60				lda 	NSMantissa1
.9119		9d 01 df	sta $df01,x			sta 	$DF01,x
.911c		60		rts				rts
.911d						MCPosition:
.911d		a2 00		ldx #$00			ldx 	#0 							; get start address.
.911f		b1 30		lda ($30),y			lda 	(codePtr),y
.9121		c9 b7		cmp #$b7			cmp 	#KWD_AT
.9123		f0 04		beq $9129			beq 	_MCPAt
.9125		20 0f a6	jsr $a60f			jsr 	EvaluateInteger
.9128		60		rts				rts
.9129						_MCPAt:
.9129		c8		iny				iny
.912a		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; X position
.912d		48		pha				pha
.912e		20 37 97	jsr $9737			jsr 	CheckComma
.9131		e8		inx				inx
.9132		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; Y position
.9135		ca		dex				dex
.9136		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.9138		64 58		stz $58				stz 	NSMantissa0
.913a		64 68		stz $68				stz 	NSMantissa2
.913c		64 70		stz $70				stz 	NSMantissa3
.913e		46 60		lsr $60				lsr 	NSMantissa1
.9140		66 58		ror $58				ror 	NSMantissa0
.9142		46 60		lsr $60				lsr 	NSMantissa1
.9144		66 58		ror $58				ror 	NSMantissa0
.9146		68		pla				pla
.9147		18		clc				clc
.9148		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.914a		85 58		sta $58				sta 	NSMantissa0
.914c		a5 60		lda $60				lda 	NSMantissa1
.914e		65 59		adc $59				adc 	NSMantissa0+1
.9150		85 60		sta $60				sta 	NSMantissa1
.9152		90 02		bcc $9156			bcc 	_MCPNoCarry
.9154		e6 68		inc $68				inc 	NSMantissa2
.9156						_MCPNoCarry:
.9156		ad 9b 07	lda $079b			lda 	gxBasePage
.9159		85 69		sta $69				sta 	NSMantissa2+1
.915b		64 59		stz $59				stz 	NSMantissa0+1
.915d		64 61		stz $61				stz 	NSMantissa1+1
.915f		64 71		stz $71				stz 	NSMantissa3+1
.9161		a2 01		ldx #$01			ldx 	#1
.9163		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight
.9166		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight
.9169		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight
.916c		a2 00		ldx #$00			ldx 	#0
.916e		20 42 9a	jsr $9a42			jsr 	AddTopTwoStack
.9171		60		rts				rts
.0772						DMAControlByte:
>0772								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9172						NewCommand:
.9172		20 78 91	jsr $9178			jsr 	NewProgram 					; does the actual NEW.
.9175		4c c4 85	jmp $85c4			jmp 	WarmStart 					; and warm starts straight away.
.9178						NewProgram:
.9178		20 d5 b3	jsr $b3d5			jsr 	MemoryNew
.917b		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.917e		20 5a 86	jsr $865a			jsr 	ClearCommand 				; clear everything.
.9181		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.9182						PokeBCommand:
.9182		a9 01		lda #$01			lda 	#1
.9184		80 0c		bra $9192			bra 	PokeCommand
.9186						PokeWCommand:
.9186		a9 02		lda #$02			lda 	#2
.9188		80 08		bra $9192			bra 	PokeCommand
.918a						PokeLCommand:
.918a		a9 03		lda #$03			lda 	#3
.918c		80 04		bra $9192			bra 	PokeCommand
.918e						PokeDCommand:
.918e		a9 04		lda #$04			lda 	#4
.9190		80 00		bra $9192			bra 	PokeCommand
.9192						PokeCommand:
.9192		48		pha				pha 								; save count on stack
.9193		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.9195		20 22 a6	jsr $a622			jsr		Evaluate16BitInteger 		; address
.9198		20 37 97	jsr $9737			jsr 	CheckComma
.919b		e8		inx				inx
.919c		20 0f a6	jsr $a60f			jsr		EvaluateInteger 			; data
.919f		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.91a1		85 36		sta $36				sta 	zTemp0
.91a3		a5 60		lda $60				lda 	NSMantissa1
.91a5		85 37		sta $37				sta 	zTemp0+1
.91a7		68		pla				pla 								; count -> zTemp1
.91a8		85 38		sta $38				sta 	zTemp1
.91aa		5a		phy				phy 								; save Y position.
.91ab		a0 00		ldy #$00			ldy 	#0 							; index to write
.91ad		a2 00		ldx #$00			ldx 	#0 							; index to read
.91af						_PCLoop:
.91af		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.91b1		91 36		sta ($36),y			sta 	(zTemp0),y
.91b3		c8		iny				iny 								; next byte to write
.91b4		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.91b5		18		clc				clc
.91b6		69 08		adc #$08			adc 	#MathStackSize
.91b8		aa		tax				tax
.91b9		c6 38		dec $38				dec 	zTemp1 						; done them all
.91bb		d0 f2		bne $91af			bne 	_PCLoop
.91bd		7a		ply				ply 								; restore position.
.91be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.91bf						CallProcedure:
.91bf		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.91c1		b1 30		lda ($30),y			lda 	(codePtr),y
.91c3		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.91c5		f0 0c		beq $91d3			beq 	_CPEndParam
.91c7						_CPParamLoop:
.91c7		20 e7 a5	jsr $a5e7			jsr 	EvaluateValue 				; get parameter onto stack
.91ca		e8		inx				inx 								; bump next stack
.91cb		b1 30		lda ($30),y			lda 	(codePtr),y
.91cd		c8		iny				iny
.91ce		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.91d0		f0 f5		beq $91c7			beq 	_CPParamLoop
.91d2		88		dey				dey 								; unpick.
.91d3						_CPEndParam:
.91d3		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.91d6		c8		iny				iny									; skip right bracket
.91d7		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.91d9		20 d5 b7	jsr $b7d5			jsr 	StackOpen
.91dc		20 1a b8	jsr $b81a			jsr 	STKSaveCodePosition 		; save loop position
.91df		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.91e1		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.91e3		a5 60		lda $60				lda 	NSMantissa1
.91e5		85 37		sta $37				sta 	zTemp0+1
.91e7		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.91e9		b2 36		lda ($36)			lda 	(zTemp0)
.91eb		85 30		sta $30				sta 	safePtr
.91ed		b1 36		lda ($36),y			lda 	(zTemp0),y
.91ef		85 31		sta $31				sta 	safePtr+1
.91f1		c8		iny				iny
.91f2		b1 36		lda ($36),y			lda 	(zTemp0),y
.91f4		85 32		sta $32				sta 	safePtr+2
.91f6		c8		iny				iny
.91f7		b1 36		lda ($36),y			lda 	(zTemp0),y
.91f9		85 33		sta $33				sta 	safePtr+3
.91fb		c8		iny				iny 								; get Y offset -> Y
.91fc		b1 36		lda ($36),y			lda 	(zTemp0),y
.91fe		a8		tay				tay
.91ff		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9201		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9204		f0 13		beq $9219			beq 	_ParamExit 					; if so, exit.
.9206						_ParamExtract:
.9206		ca		dex				dex 								; put a local term on the level before
.9207		20 af 8f	jsr $8faf			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.920a		20 80 8e	jsr $8e80			jsr 	AssignVariable 				; assign stacked value to the variable.
.920d		e8		inx				inx 								; advance to next parameter to do.
.920e		e8		inx				inx
.920f		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9212		f0 05		beq $9219			beq 	_ParamExit
.9214		20 37 97	jsr $9737			jsr 	CheckComma 					; comma seperating parameters
.9217		80 ed		bra $9206			bra 	_ParamExtract
.9219						_ParamExit:
.9219		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; check )
.921c		60		rts				rts 								; and continue from here
.921d						Command_ENDPROC:
.921d		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.921f		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9221		20 02 b8	jsr $b802			jsr 	StackCheckFrame
.9224		20 2b b8	jsr $b82b			jsr 	STKLoadCodePosition 		; restore code position
.9227		20 f4 b7	jsr $b7f4			jsr 	StackClose
.922a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.922b						Command_Read:
.922b		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.922d		20 96 a0	jsr $a096			jsr 	EvaluateTerm
.9230		b5 50		lda $50,x			lda 	NSStatus,x
.9232		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9234		f0 4f		beq $9285			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.9236		20 ce 92	jsr $92ce			jsr 	SwapDataCodePtrs 			; swap code and data
.9239		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.923c		d0 25		bne $9263			bne 	_CRContinueData  			; forward for the next one.
.923e		b2 30		lda ($30)			lda 	(codePtr)
.9240		f0 1c		beq $925e			beq 	_CRNoData
.9242						_CRKeepSearching:
.9242		a9 be		lda #$be			lda 	#KWD_DATA 					; scan for instruction
.9244		a2 80		ldx #$80			ldx 	#KWC_EOL
.9246		20 8a 96	jsr $968a			jsr 	ScanForward
.9249		c9 be		cmp #$be			cmp 	#KWD_DATA 					; found data ?
.924b		f0 16		beq $9263			beq 	_CRHaveData 				; found it
.924d		18		clc				clc
.924e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9250		65 30		adc $30				adc 	codePtr
.9252		85 30		sta $30				sta 	codePtr
.9254		90 02		bcc $9258			bcc 	_CREExit
.9256		e6 31		inc $31				inc 	codePtr+1 					; carry
.9258						_CREExit:
.9258		a0 03		ldy #$03			ldy 	#3 							; start of line.
.925a		b2 30		lda ($30)			lda 	(codePtr)
.925c		d0 e4		bne $9242			bne 	_CRKeepSearching
.925e						_CRNoData:
.925e		a9 0b		lda #$0b		lda	#11
.9260		4c 48 97	jmp $9748		jmp	ErrorHandler
.9263						_CRHaveData:
.9263						_CRContinueData:
.9263		a2 01		ldx #$01			ldx 	#1
.9265		20 e7 a5	jsr $a5e7			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9268		ca		dex				dex
.9269		20 80 8e	jsr $8e80			jsr		AssignVariable 				; do the assignment
.926c		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.926f		b1 30		lda ($30),y			lda 	(codePtr),y
.9271		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.9273		d0 04		bne $9279			bne 	_CRSwapBack
.9275		c8		iny				iny 								; consume comma
.9276		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.9279						_CRSwapBack:
.9279		20 ce 92	jsr $92ce			jsr 	SwapDataCodePtrs			; swap them back.
.927c		b1 30		lda ($30),y			lda 	(codePtr),y
.927e		c8		iny				iny
.927f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9281		f0 a8		beq $922b			beq 	Command_Read 				; if so go round again.
.9283		88		dey				dey 								; unpick get.
.9284		60		rts				rts
.9285						_CRSyntax:
.9285		4c 5b b1	jmp $b15b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9288						RemCommand:
.9288		b1 30		lda ($30),y			lda 	(codePtr),y
.928a		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.928c		d0 06		bne $9294			bne 	_RMExit
.928e		c8		iny				iny 								; point to offset
.928f		98		tya				tya 								; A = offset position
.9290		38		sec				sec 								; add size +1 hence SEC
.9291		71 30		adc ($30),y			adc 	(codePtr),y
.9293		a8		tay				tay 								; make current position.
.9294						_RMExit:
.9294		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9295						Command_REPEAT:
.9295		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9297		20 d5 b7	jsr $b7d5			jsr 	StackOpen
.929a		20 1a b8	jsr $b81a			jsr 	STKSaveCodePosition 		; save loop position
.929d		60		rts				rts
.929e						Command_UNTIL:
.929e		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.92a0		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.92a2		20 02 b8	jsr $b802			jsr 	StackCheckFrame
.92a5		a2 00		ldx #$00			ldx 	#0
.92a7		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber 				; work out the number
.92aa		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; check if zero
.92ad		f0 04		beq $92b3			beq 	_CULoopBack 				; if so keep looping
.92af		20 f4 b7	jsr $b7f4			jsr 	StackClose		 			; return
.92b2		60		rts				rts
.92b3						_CULoopBack:
.92b3		20 2b b8	jsr $b82b			jsr 	STKLoadCodePosition 		; loop back
.92b6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.92b7						Command_Restore:
.92b7		20 ce 92	jsr $92ce			jsr 	SwapDataCodePtrs 			; swap code and data
.92ba		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92bc		85 30		sta $30				sta 	codePtr
.92be		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92c0		85 31		sta $31				sta 	codePtr+1
.92c2		20 ce 92	jsr $92ce			jsr 	SwapDataCodePtrs 			; put them back
.92c5		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.92c7		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.92ca		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.92cd		60		rts				rts
.92ce						SwapDataCodePtrs:
.92ce		da		phx				phx
.92cf		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.92d1						_SDCPLoop:
.92d1		b5 30		lda $30,x			lda 	safePtr,x
.92d3		48		pha				pha
.92d4		bd 13 04	lda $0413,x			lda 	dataPointer,x
.92d7		95 30		sta $30,x			sta 	safePtr,x
.92d9		68		pla				pla
.92da		9d 13 04	sta $0413,x			sta 	dataPointer,x
.92dd		ca		dex				dex
.92de		10 f1		bpl $92d1			bpl 	_SDCPLoop
.92e0		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.92e3		8c 17 04	sty $0417			sty 	dataPointer+4
.92e6		a8		tay				tay
.92e7		fa		plx				plx
.92e8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.92e9						EOLCommand:
.92e9		18		clc				clc
.92ea		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92ec		65 30		adc $30				adc 	codePtr
.92ee		85 30		sta $30				sta 	codePtr
.92f0		90 02		bcc $92f4			bcc 	_CREExit
.92f2		e6 31		inc $31				inc 	codePtr+1 					; carry
.92f4						_CREExit:
.92f4		80 18		bra $930e			bra 	RunNewLine
.92f6						CommandRUNOptLoad:
.92f6		b1 30		lda ($30),y			lda 	(codePtr),y
.92f8		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.92fa		f0 07		beq $9303			beq 	RunCurrentProgram
.92fc		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.92fe		f0 03		beq $9303			beq 	RunCurrentProgram
.9300		20 fd 89	jsr $89fd			jsr 	LoadFile 					; load expected name file.
.9303						RunCurrentProgram:
.9303		20 5a 86	jsr $865a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9306		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9308		85 30		sta $30				sta 	codePtr
.930a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.930c		85 31		sta $31				sta 	codePtr+1
.930e						RunNewLine:
.930e		b2 30		lda ($30)			lda 	(codePtr)
.9310		f0 74		beq $9386			beq 	CRNoProgram         		; no then END.
.9312		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9314		9a		txs				txs
.9315						RUNCodePointerLine:
.9315		a0 02		ldy #$02			ldy 	#2 							; start of program
.9317						_CRIncMainLoop:
.9317		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.9319		f0 03		beq $931e			beq 	_NoEvents					; if zero, skip with Z flag set.
.931b		20 41 81	jsr $8141			jsr 	ProcessEvents
.931e						_NoEvents:
.931e		d0 61		bne $9381			bne 	_CRBreak
.9320		a5 01		lda $01				lda 	1 							; save I/O 0
.9322		48		pha				pha
.9323		64 01		stz $01				stz 	1 							; access I/O Page 0
.9325		38		sec				sec 								; calculate timer - LastTick
.9326		ad 59 d6	lda $d659			lda 	$D659
.9329		cd 5e 06	cmp $065e			cmp 	LastTick
.932c		f0 06		beq $9334			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.932e		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.9331		20 90 81	jsr $8190			jsr 	TickHandler 							; go do the code.
.9334						_NoFireTick:
.9334		68		pla				pla 								; restore I/O 0
.9335		85 01		sta $01				sta 	1
.9337						_CRNoBreakCheck:
.9337		c8		iny				iny									; next token
.9338						_CRMainLoop:
.9338		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.933b		b1 30		lda ($30),y			lda 	(codePtr),y
.933d		10 10		bpl $934f			bpl 	_CRNotKeyword				; not a token.
.933f		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9341		b0 04		bcs $9347			bcs 	_CRIsKeyword
.9343		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9345		b0 34		bcs $937b			bcs		_CRSyntaxError
.9347						_CRIsKeyword:
.9347		c8		iny				iny 								; consume command
.9348		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9349		aa		tax				tax 								; put in X for vector jump
.934a		20 7e 93	jsr $937e			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.934d		80 e9		bra $9338			bra 	_CRMainLoop 				; and loop round
.934f						_CRNotKeyword:
.934f		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9351		f0 c4		beq $9317			beq 	_CRIncMainLoop
.9353		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9355		90 05		bcc $935c			bcc 	_CRNotVariable
.9357						_CRGoLet:
.9357		20 47 8e	jsr $8e47			jsr 	LetCommand
.935a		80 dc		bra $9338			bra 	_CRMainLoop
.935c						_CRNotVariable:
.935c		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; handle @
.935e		f0 f7		beq $9357			beq 	_CRGoLet
.9360		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9362		f0 f3		beq $9357			beq 	_CRGoLet
.9364		c9 21		cmp #$21			cmp 	#KWD_PLING
.9366		f0 ef		beq $9357			beq 	_CRGoLet
.9368		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.936a		f0 09		beq $9375			beq 	_CRGoRem
.936c		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.936e		d0 0b		bne $937b			bne 	_CRSyntaxError
.9370		20 36 84	jsr $8436			jsr 	LabelHere
.9373		80 c3		bra $9338			bra 	_CRMainLoop
.9375						_CRGoRem:
.9375		c8		iny				iny
.9376		20 88 92	jsr $9288			jsr 	RemCommand
.9379		80 bd		bra $9338			bra 	_CRMainLoop
.937b						_CRSyntaxError:
.937b		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.937e						_CRCallVector0:
.937e		7c 1c 94	jmp ($941c,x)			jmp 	(VectorSet0,x)
.9381						_CRBreak:
.9381		a9 01		lda #$01		lda	#1
.9383		4c 48 97	jmp $9748		jmp	ErrorHandler
.9386						CRNoProgram:
.9386		4c 9e 87	jmp $879e			jmp 	EndCommand
.9389						Shift1Command:
.9389		b1 30		lda ($30),y			lda 	(codePtr),y
.938b		c8		iny				iny
.938c		0a		asl a				asl 	a
.938d		aa		tax				tax
.938e		7c d2 94	jmp ($94d2,x)			jmp 	(VectorSet1,x)
.9391						Shift2Command:
.9391		b1 30		lda ($30),y			lda 	(codePtr),y
.9393		c8		iny				iny
.9394		0a		asl a				asl 	a
.9395		aa		tax				tax
.9396		7c 1e 95	jmp ($951e,x)			jmp 	(VectorSet2,x)
.9399						Unused1:
.9399						Unused2:
.9399						Unused3:
.9399						Unused4:
.9399		4c 5b b1	jmp $b15b			jmp 	SyntaxError
>939c								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.939c						VectorSetPunc:
>939c		00 9a					.word	ShiftLeft                        ; $00 <<
>939e		eb 97					.word	BinaryCompareLessEqual           ; $01 <=
>93a0		e1 97					.word	BinaryCompareNotEqual            ; $02 <>
>93a2		5b b1					.word	SyntaxError                      ; $03 !!3
>93a4		5b b1					.word	SyntaxError                      ; $04 ><
>93a6		f5 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>93a8		03 9a					.word	ShiftRight                       ; $06 >>
>93aa		5b b1					.word	SyntaxError                      ; $07 !!7
>93ac		5b b1					.word	SyntaxError                      ; $08 !!8
>93ae		5b b1					.word	SyntaxError                      ; $09 !!9
>93b0		5b b1					.word	SyntaxError                      ; $0a !!10
>93b2		5b b1					.word	SyntaxError                      ; $0b !!11
>93b4		5b b1					.word	SyntaxError                      ; $0c !!12
>93b6		5b b1					.word	SyntaxError                      ; $0d !!13
>93b8		5b b1					.word	SyntaxError                      ; $0e !!14
>93ba		5b b1					.word	SyntaxError                      ; $0f !!15
>93bc		5b b1					.word	SyntaxError                      ; $10 @
>93be		5b b1					.word	SyntaxError                      ; $11 !!17
>93c0		5b b1					.word	SyntaxError                      ; $12 !!18
>93c2		5b b1					.word	SyntaxError                      ; $13 [
>93c4		ac 98					.word	IntegerDivide                    ; $14 \
>93c6		5b b1					.word	SyntaxError                      ; $15 ]
>93c8		3e 9b					.word	EorInteger                       ; $16 ^
>93ca		5b b1					.word	SyntaxError                      ; $17 _
>93cc		5b b1					.word	SyntaxError                      ; $18 `
>93ce		5b b1					.word	SyntaxError                      ; $19 !!25
>93d0		5b b1					.word	SyntaxError                      ; $1a !!26
>93d2		5b b1					.word	SyntaxError                      ; $1b {
>93d4		09 9b					.word	OraInteger                       ; $1c |
>93d6		5b b1					.word	SyntaxError                      ; $1d }
>93d8		5b b1					.word	SyntaxError                      ; $1e ~
>93da		5b b1					.word	SyntaxError                      ; $1f <7F>
>93dc		5b b1					.word	SyntaxError                      ; $20
>93de		73 9b					.word	WordIndirect                     ; $21 !
>93e0		5b b1					.word	SyntaxError                      ; $22 "
>93e2		5b b1					.word	SyntaxError                      ; $23 #
>93e4		5b b1					.word	SyntaxError                      ; $24 $
>93e6		ed 98					.word	IntegerModulus                   ; $25 %
>93e8		d4 9a					.word	AndInteger                       ; $26 &
>93ea		5b b1					.word	SyntaxError                      ; $27 '
>93ec		5b b1					.word	SyntaxError                      ; $28 (
>93ee		5b b1					.word	SyntaxError                      ; $29 )
>93f0		5b 99					.word	MulInteger                       ; $2a *
>93f2		76 9a					.word	AddInteger                       ; $2b +
>93f4		5b b1					.word	SyntaxError                      ; $2c ,
>93f6		af 9a					.word	SubInteger                       ; $2d -
>93f8		5b b1					.word	SyntaxError                      ; $2e .
>93fa		2d 9d					.word	FDivideCommand                   ; $2f /
>93fc		5b b1					.word	SyntaxError                      ; $30 0
>93fe		5b b1					.word	SyntaxError                      ; $31 1
>9400		5b b1					.word	SyntaxError                      ; $32 2
>9402		5b b1					.word	SyntaxError                      ; $33 3
>9404		5b b1					.word	SyntaxError                      ; $34 4
>9406		5b b1					.word	SyntaxError                      ; $35 5
>9408		5b b1					.word	SyntaxError                      ; $36 6
>940a		5b b1					.word	SyntaxError                      ; $37 7
>940c		5b b1					.word	SyntaxError                      ; $38 8
>940e		5b b1					.word	SyntaxError                      ; $39 9
>9410		5b b1					.word	SyntaxError                      ; $3a :
>9412		5b b1					.word	SyntaxError                      ; $3b ;
>9414		cd 97					.word	BinaryCompareLess                ; $3c <
>9416		c3 97					.word	BinaryCompareEqual               ; $3d =
>9418		d7 97					.word	BinaryCompareGreater             ; $3e >
>941a		95 9b					.word	ByteIndirect                     ; $3f ?
.941c						VectorSet0:
>941c		e9 92					.word	EOLCommand                       ; $80 !0:EOF
>941e		89 93					.word	Shift1Command                    ; $81 !1:SH1
>9420		91 93					.word	Shift2Command                    ; $82 !2:SH2
>9422		17 a2					.word	AbsUnary                         ; $83 ABS(
>9424		25 a2					.word	AllocUnary                       ; $84 ALLOC(
>9426		95 a2					.word	AscUnary                         ; $85 ASC(
>9428		e6 a3					.word	ChrUnary                         ; $86 CHR$(
>942a		a1 87					.word	UnaryEvent                       ; $87 EVENT(
>942c		bf 97					.word	UnaryFalse                       ; $88 FALSE
>942e		a2 a2					.word	FracUnary                        ; $89 FRAC(
>9430		79 af					.word	ChrGet                           ; $8a GET$(
>9432		55 af					.word	AscGet                           ; $8b GET(
>9434		ff ae					.word	UnaryGetDate                     ; $8c GETDATE$(
>9436		fb ae					.word	UnaryGetTime                     ; $8d GETTIME$(
>9438		76 b6					.word	UnaryHit                         ; $8e HIT(
>943a		80 af					.word	ChrInkey                         ; $8f INKEY$(
>943c		6e af					.word	AscInkey                         ; $90 INKEY(
>943e		b7 a2					.word	IntUnary                         ; $91 INT(
>9440		a5 a3					.word	IsValUnary                       ; $92 ISVAL(
>9442		f8 a3					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>9444		1c a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>9446		35 8e					.word	UnaryJoyB                        ; $95 JOYB(
>9448		0e 8e					.word	UnaryJoyX                        ; $96 JOYX(
>944a		11 8e					.word	UnaryJoyY                        ; $97 JOYY(
>944c		5b a5					.word	Unary_Left                       ; $98 LEFT$(
>944e		c8 a2					.word	LenUnary                         ; $99 LEN(
>9450		e6 a2					.word	Unary_Max                        ; $9a MAX(
>9452		7d a5					.word	Unary_Mid                        ; $9b MID$(
>9454		e2 a2					.word	Unary_Min                        ; $9c MIN(
>9456		31 a3					.word	Unary_Not                        ; $9d NOT(
>9458		44 a3					.word	PeekByteUnary                    ; $9e PEEK(
>945a		50 a3					.word	PeekDUnary                       ; $9f PEEKD(
>945c		4c a3					.word	PeekLUnary                       ; $a0 PEEKL(
>945e		48 a3					.word	PeekWUnary                       ; $a1 PEEKW(
>9460		32 b7					.word	UnaryPlaying                     ; $a2 PLAYING(
>9462		99 af					.word	Unary_Random                     ; $a3 RANDOM(
>9464		68 a5					.word	Unary_Right                      ; $a4 RIGHT$(
>9466		b3 af					.word	Unary_Rnd                        ; $a5 RND(
>9468		7d a3					.word	SgnUnary                         ; $a6 SGN(
>946a		9a a4					.word	SpcUnary                         ; $a7 SPC(
>946c		b5 a4					.word	Unary_Str                        ; $a8 STR$(
>946e		1f 96					.word	UnaryTimer                       ; $a9 TIMER(
>9470		b4 97					.word	UnaryTrue                        ; $aa TRUE
>9472		9b a3					.word	ValUnary                         ; $ab VAL(
>9474		a7 8b					.word	ForCommand                       ; $ac FOR
>9476		ea 8c					.word	IfCommand                        ; $ad IF
>9478		99 93					.word	Unused1                          ; $ae PROC
>947a		95 92					.word	Command_REPEAT                   ; $af REPEAT
>947c		00 97					.word	Command_WHILE                    ; $b0 WHILE
>947e		13 8d					.word	EndIf                            ; $b1 ENDIF
>9480		1d 92					.word	Command_ENDPROC                  ; $b2 ENDPROC
>9482		59 8c					.word	NextCommand                      ; $b3 NEXT
>9484		99 93					.word	Unused4                          ; $b4 THEN
>9486		9e 92					.word	Command_UNTIL                    ; $b5 UNTIL
>9488		21 97					.word	Command_WEND                     ; $b6 WEND
>948a		5b b1					.word	SyntaxError                      ; $b7 AT
>948c		5b b1					.word	SyntaxError                      ; $b8 BY
>948e		25 86					.word	CallCommand                      ; $b9 CALL
>9490		2a b4					.word	CircleCommand                    ; $ba CIRCLE
>9492		5a 86					.word	ClearCommand                     ; $bb CLEAR
>9494		5b b1					.word	SyntaxError                      ; $bc COLOR
>9496		5b b1					.word	SyntaxError                      ; $bd COLOUR
>9498		c7 86					.word	Command_Data                     ; $be DATA
>949a		cf 86					.word	DimCommand                       ; $bf DIM
>949c		99 93					.word	Unused3                          ; $c0 DOWNTO
>949e		0c 8d					.word	ElseCode                         ; $c1 ELSE
>94a0		5b b1					.word	SyntaxError                      ; $c2 FROM
>94a2		49 b6					.word	GfxCommand                       ; $c3 GFX
>94a4		5b b1					.word	SyntaxError                      ; $c4 HERE
>94a6		53 b4					.word	ImageCommand                     ; $c5 IMAGE
>94a8		47 8e					.word	LetCommand                       ; $c6 LET
>94aa		a5 b4					.word	LineCommand                      ; $c7 LINE
>94ac		a1 8f					.word	Command_LOCAL                    ; $c8 LOCAL
>94ae		62 90					.word	MCCommand                        ; $c9 MEMCOPY
>94b0		5b b1					.word	SyntaxError                      ; $ca OFF
>94b2		5b b1					.word	SyntaxError                      ; $cb ON
>94b4		5b b1					.word	SyntaxError                      ; $cc OUTLINE
>94b6		9a b6					.word	PaletteCommand                   ; $cd PALETTE
>94b8		9e b4					.word	PlotCommand                      ; $ce PLOT
>94ba		82 91					.word	PokeBCommand                     ; $cf POKE
>94bc		8e 91					.word	PokeDCommand                     ; $d0 POKED
>94be		8a 91					.word	PokeLCommand                     ; $d1 POKEL
>94c0		86 91					.word	PokeWCommand                     ; $d2 POKEW
>94c2		2b 92					.word	Command_Read                     ; $d3 READ
>94c4		26 b4					.word	RectangleCommand                 ; $d4 RECT
>94c6		88 92					.word	RemCommand                       ; $d5 REM
>94c8		5b b1					.word	SyntaxError                      ; $d6 SOLID
>94ca		4e b7					.word	SoundCommand                     ; $d7 SOUND
>94cc		35 b4					.word	SpriteCommand                    ; $d8 SPRITE
>94ce		6f b4					.word	TextCommand                      ; $d9 TEXT
>94d0		99 93					.word	Unused2                          ; $da TO
.94d2						VectorSet1:
>94d2		5b b1					.word	SyntaxError                      ; $80 !0:EOF
>94d4		5b b1					.word	SyntaxError                      ; $81 !1:SH1
>94d6		5b b1					.word	SyntaxError                      ; $82 !2:SH2
>94d8		f9 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>94da		15 86					.word	AssertCommand                    ; $84 ASSERT
>94dc		e9 b5					.word	BitmapCtrl                       ; $85 BITMAP
>94de		fe 87					.word	Command_BLoad                    ; $86 BLOAD
>94e0		9e 88					.word	Command_BSave                    ; $87 BSAVE
>94e2		da b6					.word	ClearScreen                      ; $88 CLS
>94e4		19 8d					.word	Command_CPrint                   ; $89 CPRINT
>94e6		20 89					.word	Command_Dir                      ; $8a DIR
>94e8		8c 87					.word	BootDOS                          ; $8b DOS
>94ea		f0 89					.word	Command_Drive                    ; $8c DRIVE
>94ec		9e 87					.word	EndCommand                       ; $8d END
>94ee		06 b7					.word	Explode                          ; $8e EXPLODE
>94f0		5b b1					.word	SyntaxError                      ; $8f GO
>94f2		b2 8c					.word	Command_GOSUB                    ; $90 GOSUB
>94f4		d0 8c					.word	GotoCommand                      ; $91 GOTO
>94f6		5b b1					.word	SyntaxError                      ; $92 HIMEM
>94f8		14 8d					.word	Command_Input                    ; $93 INPUT
>94fa		97 8e					.word	Command_List                     ; $94 LIST
>94fc		f7 89					.word	Command_Load                     ; $95 LOAD
>94fe		72 91					.word	NewCommand                       ; $96 NEW
>9500		e2 b6					.word	PingCommand                      ; $97 PING
>9502		20 8d					.word	Command_Print                    ; $98 PRINT
>9504		b7 92					.word	Command_Restore                  ; $99 RESTORE
>9506		c2 8c					.word	Command_RETURN                   ; $9a RETURN
>9508		f6 92					.word	CommandRUNOptLoad                ; $9b RUN
>950a		c9 8a					.word	Command_Save                     ; $9c SAVE
>950c		a6 95					.word	CommandSetDate                   ; $9d SETDATE
>950e		aa 95					.word	CommandSetTime                   ; $9e SETTIME
>9510		fa b6					.word	ShootCommand                     ; $9f SHOOT
>9512		2e b6					.word	SpritesCtrl                      ; $a0 SPRITES
>9514		1a 96					.word	StopCommand                      ; $a1 STOP
>9516		4d 8b					.word	Command_VERIFY                   ; $a2 VERIFY
>9518		be 86					.word	XGoCommand                       ; $a3 XGO
>951a		b5 86					.word	XLoadCommand                     ; $a4 XLOAD
>951c		ee b6					.word	ZapCommand                       ; $a5 ZAP
.951e						VectorSet2:
>951e		5b b1					.word	SyntaxError                      ; $80 !0:EOF
>9520		5b b1					.word	SyntaxError                      ; $81 !1:SH1
>9522		5b b1					.word	SyntaxError                      ; $82 !2:SH2
>9524		1a b0					.word	Assemble_adc                     ; $83 ADC
>9526		12 b0					.word	Assemble_and                     ; $84 AND
>9528		2e b0					.word	Assemble_asl                     ; $85 ASL
>952a		98 b0					.word	Assemble_bcc                     ; $86 BCC
>952c		9c b0					.word	Assemble_bcs                     ; $87 BCS
>952e		a4 b0					.word	Assemble_beq                     ; $88 BEQ
>9530		5b b0					.word	Assemble_bit                     ; $89 BIT
>9532		8c b0					.word	Assemble_bmi                     ; $8a BMI
>9534		a0 b0					.word	Assemble_bne                     ; $8b BNE
>9536		88 b0					.word	Assemble_bpl                     ; $8c BPL
>9538		a8 b0					.word	Assemble_bra                     ; $8d BRA
>953a		ac b0					.word	Assemble_brk                     ; $8e BRK
>953c		90 b0					.word	Assemble_bvc                     ; $8f BVC
>953e		94 b0					.word	Assemble_bvs                     ; $90 BVS
>9540		b4 b0					.word	Assemble_clc                     ; $91 CLC
>9542		08 b1					.word	Assemble_cld                     ; $92 CLD
>9544		c8 b0					.word	Assemble_cli                     ; $93 CLI
>9546		f8 b0					.word	Assemble_clv                     ; $94 CLV
>9548		26 b0					.word	Assemble_cmp                     ; $95 CMP
>954a		6f b0					.word	Assemble_cpx                     ; $96 CPX
>954c		6a b0					.word	Assemble_cpy                     ; $97 CPY
>954e		4c b0					.word	Assemble_dec                     ; $98 DEC
>9550		04 b1					.word	Assemble_dex                     ; $99 DEX
>9552		e0 b0					.word	Assemble_dey                     ; $9a DEY
>9554		16 b0					.word	Assemble_eor                     ; $9b EOR
>9556		51 b0					.word	Assemble_inc                     ; $9c INC
>9558		14 b1					.word	Assemble_inx                     ; $9d INX
>955a		00 b1					.word	Assemble_iny                     ; $9e INY
>955c		83 b0					.word	Assemble_jmp                     ; $9f JMP
>955e		7e b0					.word	Assemble_jsr                     ; $a0 JSR
>9560		22 b0					.word	Assemble_lda                     ; $a1 LDA
>9562		47 b0					.word	Assemble_ldx                     ; $a2 LDX
>9564		65 b0					.word	Assemble_ldy                     ; $a3 LDY
>9566		38 b0					.word	Assemble_lsr                     ; $a4 LSR
>9568		18 b1					.word	Assemble_nop                     ; $a5 NOP
>956a		0e b0					.word	Assemble_ora                     ; $a6 ORA
>956c		c4 b0					.word	Assemble_pha                     ; $a7 PHA
>956e		b0 b0					.word	Assemble_php                     ; $a8 PHP
>9570		0c b1					.word	Assemble_phx                     ; $a9 PHX
>9572		cc b0					.word	Assemble_phy                     ; $aa PHY
>9574		d4 b0					.word	Assemble_pla                     ; $ab PLA
>9576		b8 b0					.word	Assemble_plp                     ; $ac PLP
>9578		20 b1					.word	Assemble_plx                     ; $ad PLX
>957a		dc b0					.word	Assemble_ply                     ; $ae PLY
>957c		33 b0					.word	Assemble_rol                     ; $af ROL
>957e		3d b0					.word	Assemble_ror                     ; $b0 ROR
>9580		c0 b0					.word	Assemble_rti                     ; $b1 RTI
>9582		d0 b0					.word	Assemble_rts                     ; $b2 RTS
>9584		2a b0					.word	Assemble_sbc                     ; $b3 SBC
>9586		bc b0					.word	Assemble_sec                     ; $b4 SEC
>9588		1c b1					.word	Assemble_sed                     ; $b5 SED
>958a		d8 b0					.word	Assemble_sei                     ; $b6 SEI
>958c		1e b0					.word	Assemble_sta                     ; $b7 STA
>958e		10 b1					.word	Assemble_stp                     ; $b8 STP
>9590		42 b0					.word	Assemble_stx                     ; $b9 STX
>9592		60 b0					.word	Assemble_sty                     ; $ba STY
>9594		56 b0					.word	Assemble_stz                     ; $bb STZ
>9596		f4 b0					.word	Assemble_tax                     ; $bc TAX
>9598		f0 b0					.word	Assemble_tay                     ; $bd TAY
>959a		79 b0					.word	Assemble_trb                     ; $be TRB
>959c		74 b0					.word	Assemble_tsb                     ; $bf TSB
>959e		fc b0					.word	Assemble_tsx                     ; $c0 TSX
>95a0		e4 b0					.word	Assemble_txa                     ; $c1 TXA
>95a2		ec b0					.word	Assemble_txs                     ; $c2 TXS
>95a4		e8 b0					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.95a6						CommandSetDate:
.95a6		a9 03		lda #$03			lda 	#3
.95a8		80 02		bra $95ac			bra 	CSDTMain
.95aa						CommandSetTime:
.95aa		a9 00		lda #$00			lda 	#0
.95ac						CSDTMain:
.95ac		48		pha				pha 								; save table offsets 0 or 3
.95ad		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.95af		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.95b2		20 37 97	jsr $9737			jsr 	CheckComma
.95b5		e8		inx				inx
.95b6		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.95b9		20 37 97	jsr $9737			jsr 	CheckComma
.95bc		e8		inx				inx
.95bd		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.95c0		68		pla				pla 								; table offset in Y, saving Y
.95c1		5a		phy				phy
.95c2		a8		tay				tay
.95c3		a2 00		ldx #$00			ldx 	#0 							; first number
.95c5		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.95c7		48		pha				pha
.95c8		64 01		stz $01				stz 	1
.95ca						_CSDTCopy:
.95ca		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.95cc		d9 0e 96	cmp $960e,y			cmp 	RTCWMinValues,y 			; check range
.95cf		90 1b		bcc $95ec			bcc 	_CSDTRange
.95d1		d9 14 96	cmp $9614,y			cmp 	RTCWMaxValues,y
.95d4		b0 16		bcs $95ec			bcs 	_CSDTRange
.95d6		20 f1 95	jsr $95f1			jsr 	CSDTDecimalToBCD
.95d9		da		phx				phx 								; save X
.95da		be 08 96	ldx $9608,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.95dd		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.95e0		fa		plx				plx 								; restore X
.95e1		e8		inx				inx 								; next number
.95e2		c8		iny				iny 								; next table entries
.95e3		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.95e5		d0 e3		bne $95ca			bne 	_CSDTCopy
.95e7		68		pla				pla 								; restore I/O space
.95e8		85 01		sta $01				sta 	1
.95ea		7a		ply				ply 								; restore code pos and exit.
.95eb		60		rts				rts
.95ec						_CSDTRange:
.95ec		a9 04		lda #$04		lda	#4
.95ee		4c 48 97	jmp $9748		jmp	ErrorHandler
.95f1						CSDTDecimalToBCD:
.95f1		da		phx				phx 								; 10 count in X
.95f2		a2 00		ldx #$00			ldx 	#0
.95f4						_CSDTDBLoop:
.95f4		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.95f6		90 05		bcc $95fd			bcc 	_CSDTDBExit
.95f8		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.95fa		e8		inx				inx 								; one more 10s.
.95fb		80 f7		bra $95f4			bra 	_CSDTDBLoop
.95fd						_CSDTDBExit:
.95fd		85 36		sta $36				sta 	zTemp0 						; units
.95ff		8a		txa				txa 								; 10s x 16
.9600		0a		asl a				asl 	a
.9601		0a		asl a				asl 	a
.9602		0a		asl a				asl 	a
.9603		0a		asl a				asl 	a
.9604		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9606		fa		plx				plx
.9607		60		rts				rts
.9608						RTCWOffset:
>9608		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.960e						RTCWMinValues:
>960e		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.9614						RTCWMaxValues:
>9614		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.961a						StopCommand:
.961a		a9 08		lda #$08		lda	#8
.961c		4c 48 97	jmp $9748		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.961f						UnaryTimer:
.961f		fa		plx				plx
.9620		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.9623						TimerToStackX:
.9623		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; zero result
.9626		64 01		stz $01				stz 	1 							; access I/O
.9628		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.962b		95 58		sta $58,x			sta 	NSMantissa0,x
.962d		ad 5a d6	lda $d65a			lda 	$D65A
.9630		95 60		sta $60,x			sta 	NSMantissa1,x
.9632		ad 5b d6	lda $d65b			lda 	$D65B
.9635		95 68		sta $68,x			sta 	NSMantissa2,x
.9637		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9638						ProcedureScan:
.9638		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.963a		85 30		sta $30				sta 	codePtr
.963c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.963e		85 31		sta $31				sta 	codePtr+1
.9640						_PSLoop:
.9640		b2 30		lda ($30)			lda 	(codePtr)
.9642		f0 42		beq $9686			beq 	_PSExit
.9644		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9646		b1 30		lda ($30),y			lda 	(codePtr),y
.9648		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.964a		d0 2d		bne $9679			bne 	_PSNext
.964c		c8		iny				iny 								; get the address of the record to zTemp0 and
.964d		b1 30		lda ($30),y			lda 	(codePtr),y
.964f		29 c0		and #$c0			and 	#$C0
.9651		c9 40		cmp #$40			cmp 	#$40
.9653		d0 32		bne $9687			bne 	_PSSyntax
.9655		b1 30		lda ($30),y			lda 	(codePtr),y
.9657		18		clc				clc
.9658		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.965a		85 37		sta $37				sta 	zTemp0+1
.965c		c8		iny				iny 								; LSB
.965d		b1 30		lda ($30),y			lda 	(codePtr),y
.965f		85 36		sta $36				sta 	zTemp0
.9661		c8		iny				iny 								; character after variable call.
.9662		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9663		a0 07		ldy #$07			ldy 	#7
.9665		91 36		sta ($36),y			sta 	(zTemp0),y
.9667		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9669		a0 02		ldy #$02			ldy 	#2
.966b		91 36		sta ($36),y			sta 	(zTemp0),y
.966d		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.966f						_PSCopy:
.966f		b5 30		lda $30,x			lda 	safePtr,x
.9671		c8		iny				iny
.9672		91 36		sta ($36),y			sta 	(zTemp0),y
.9674		e8		inx				inx
.9675		e0 04		cpx #$04			cpx 	#4
.9677		d0 f6		bne $966f			bne 	_PSCopy
.9679						_PSNext:
.9679		18		clc				clc
.967a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.967c		65 30		adc $30				adc 	codePtr
.967e		85 30		sta $30				sta 	codePtr
.9680		90 02		bcc $9684			bcc 	_CREExit
.9682		e6 31		inc $31				inc 	codePtr+1 					; carry
.9684						_CREExit:
.9684		80 ba		bra $9640			bra 	_PSLoop
.9686						_PSExit:
.9686		60		rts				rts
.9687						_PSSyntax:
.9687		4c 5b b1	jmp $b15b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.968a						ScanForward:
.968a		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.968c		86 37		stx $37				stx 	zTemp0+1
.968e		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9690						_ScanLoop:
.9690		b1 30		lda ($30),y			lda 	(codePtr),y
.9692		c8		iny				iny
.9693		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9695		d0 0e		bne $96a5			bne 	_ScanGoNext
.9697		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9699		f0 04		beq $969f			beq 	_ScanMatch
.969b		c5 37		cmp $37				cmp 	zTemp0+1
.969d		d0 06		bne $96a5			bne 	_ScanGoNext
.969f						_ScanMatch:
.969f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.96a1		d0 01		bne $96a4			bne 	_ScanNotEndEOL
.96a3		88		dey				dey
.96a4						_ScanNotEndEOL:
.96a4		60		rts				rts
.96a5						_ScanGoNext:
.96a5		20 aa 96	jsr $96aa			jsr  	ScanForwardOne 				; allows for shifts and so on.
.96a8		80 e6		bra $9690			bra 	_ScanLoop
.96aa						ScanForwardOne:
.96aa		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.96ac		90 3e		bcc $96ec			bcc 	_SFWExit
.96ae		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.96b0		90 18		bcc $96ca			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.96b2		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.96b4		b0 2f		bcs $96e5			bcs 	_ScanSkipData
.96b6		c9 ac		cmp #$ac			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.96b8		90 32		bcc $96ec			bcc 	_SFWExit 					; if not, ordinary keywords.
.96ba		c9 b7		cmp #$b7			cmp 	#KWC_LAST_STRUCTURE+1
.96bc		b0 2e		bcs $96ec			bcs 	_SFWExit
.96be		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.96c0		c9 b1		cmp #$b1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.96c2		b0 28		bcs $96ec			bcs 	_SFWExit
.96c4		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.96c6		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.96c8		80 22		bra $96ec			bra 	_SFWExit
.96ca						_ScanSkipOne:
.96ca		c8		iny				iny 								; consume the extra one.
.96cb		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.96cd		d0 1d		bne $96ec			bne 	_SFWExit
.96cf		18		clc				clc
.96d0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.96d2		65 30		adc $30				adc 	codePtr
.96d4		85 30		sta $30				sta 	codePtr
.96d6		90 02		bcc $96da			bcc 	_CREExit
.96d8		e6 31		inc $31				inc 	codePtr+1 					; carry
.96da						_CREExit:
.96da		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.96dc		b2 30		lda ($30)			lda 	(codePtr)
.96de		d0 0c		bne $96ec			bne 	_SFWExit 					; if not zero, more to scan
.96e0		a9 13		lda #$13		lda	#19
.96e2		4c 48 97	jmp $9748		jmp	ErrorHandler
.96e5						_ScanSkipData:
.96e5		88		dey				dey 								; point at data token
.96e6		c8		iny				iny 								; point to offset
.96e7		98		tya				tya 								; A = offset position
.96e8		38		sec				sec 								; add size +1 hence SEC
.96e9		71 30		adc ($30),y			adc 	(codePtr),y
.96eb		a8		tay				tay 								; make current position.
.96ec						_SFWExit:
.96ec		60		rts				rts
.96ed						ScanGetCurrentLineStep:
.96ed		64 38		stz $38				stz 	zTemp1
.96ef		a0 03		ldy #$03			ldy 	#3
.96f1						_SGCLSLoop:
.96f1		b1 30		lda ($30),y			lda 	(codePtr),y
.96f3		c8		iny				iny
.96f4		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.96f6		f0 05		beq $96fd			beq 	_SGCLSExit
.96f8		20 aa 96	jsr $96aa			jsr 	ScanForwardOne
.96fb		80 f4		bra $96f1			bra 	_SGCLSLoop
.96fd						_SGCLSExit:
.96fd		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.96ff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9700						Command_WHILE:
.9700		5a		phy				phy 								; save position of the test
.9701		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9703		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber
.9706		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; check if zero
.9709		f0 0e		beq $9719			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.970b		98		tya				tya 								; position *after* test.
.970c		7a		ply				ply 								; restore position before test, at WHILE
.970d		88		dey				dey 								; so we execute the WHILE command again.
.970e		48		pha				pha 								; push after test on the stack
.970f		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9711		20 d5 b7	jsr $b7d5			jsr 	StackOpen
.9714		20 1a b8	jsr $b81a			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9717		7a		ply				ply 								; restore the position *after* the test
.9718		60		rts				rts
.9719						_WHExitLoop:
.9719		68		pla				pla 								; throw post loop position
.971a		a9 b6		lda #$b6			lda 	#KWD_WEND 					; scan forward past WEND
.971c		aa		tax				tax
.971d		20 8a 96	jsr $968a			jsr 	ScanForward
.9720		60		rts				rts
.9721						Command_WEND:
.9721		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9723		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9725		20 02 b8	jsr $b802			jsr 	StackCheckFrame
.9728		20 2b b8	jsr $b82b			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.972b		20 f4 b7	jsr $b7f4			jsr 	StackClose		 			; erase the frame
.972e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.972f						CheckRightBracket:
.972f		b1 30		lda ($30),y			lda 	(codePtr),y
.9731		c8		iny				iny
.9732		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9734		d0 0f		bne $9745			bne 	CNAFail
.9736		60		rts				rts
.9737						CheckComma:
.9737		b1 30		lda ($30),y			lda 	(codePtr),y
.9739		c8		iny				iny
.973a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.973c		d0 07		bne $9745			bne 	CNAFail
.973e		60		rts				rts
.973f						CheckNextA:
.973f		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9741		d0 02		bne $9745			bne 	CNAFail
.9743		c8		iny				iny 								; skip character
.9744		60		rts				rts 								; and exit
.9745						CNAFail:
.9745		4c 5b b1	jmp $b15b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9748						ErrorHandler:
.9748		a8		tay				tay 								; find the error text
.9749		f0 49		beq $9794			beq 	_EHEnd
.974b		a2 00		ldx #$00			ldx 	#0
.974d		a9 74		lda #$74			lda 	#((ErrorText) & $FF)
.974f		85 36		sta $36				sta 	0+zTemp0
.9751		a9 b1		lda #$b1			lda 	#((ErrorText) >> 8)
.9753		85 37		sta $37				sta 	1+zTemp0
.9755						_EHFind:
.9755		88		dey				dey 								; keep looking through text
.9756		f0 0e		beq $9766			beq 	_EHFound
.9758						_EHFindZero:
.9758		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.975a		e6 36		inc $36				inc 	zTemp0
.975c		d0 02		bne $9760			bne 	_EHFNoCarry
.975e		e6 37		inc $37				inc 	zTemp0+1
.9760						_EHFNoCarry:
.9760		c9 00		cmp #$00			cmp 	#0
.9762		d0 f4		bne $9758			bne 	_EHFindZero
.9764		80 ef		bra $9755			bra 	_EHFind
.9766						_EHFound:
.9766		a5 36		lda $36				lda 	zTemp0 						; print message
.9768		a6 37		ldx $37				ldx 	zTemp0+1
.976a		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.976d		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.976f		b1 30		lda ($30),y			lda 	(codePtr),y
.9771		d0 05		bne $9778			bne 	_EHAtMsg
.9773		c8		iny				iny
.9774		b1 30		lda ($30),y			lda 	(codePtr),y
.9776		f0 17		beq $978f			beq 	_EHCREnd
.9778						_EHAtMsg:
.9778		a2 97		ldx #$97			ldx 	#_AtMsg >> 8 				; print " at "
.977a		a9 97		lda #$97			lda 	#_AtMsg & $FF
.977c		20 a1 97	jsr $97a1			jsr 	PrintStringXA
.977f		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9781		b1 30		lda ($30),y			lda 	(codePtr),y
.9783		48		pha				pha
.9784		c8		iny				iny
.9785		b1 30		lda ($30),y			lda 	(codePtr),y
.9787		aa		tax				tax
.9788		68		pla				pla
.9789		20 b7 9b	jsr $9bb7			jsr 	ConvertInt16 				; convert XA to string
.978c		20 a1 97	jsr $97a1			jsr 	PrintStringXA 				; and print it.
.978f						_EHCREnd:
.978f		a9 0d		lda #$0d			lda 	#13 						; new line
.9791		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9794						_EHEnd:
.9794		4c c4 85	jmp $85c4			jmp 	WarmStart
>9797		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>979f		20 00
.97a1						PrintStringXA:
.97a1		5a		phy				phy
.97a2		86 37		stx $37				stx 	zTemp0+1
.97a4		85 36		sta $36				sta 	zTemp0
.97a6		a0 00		ldy #$00			ldy 	#0
.97a8						_PSXALoop:
.97a8		b1 36		lda ($36),y			lda 	(zTemp0),y
.97aa		f0 06		beq $97b2			beq 	_PSXAExit
.97ac		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.97af		c8		iny				iny
.97b0		80 f6		bra $97a8			bra 	_PSXALoop
.97b2						_PSXAExit:
.97b2		7a		ply				ply
.97b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.97b4						UnaryTrue:
.97b4		fa		plx				plx
.97b5						ReturnTrue:
.97b5		a9 01		lda #$01			lda 	#1  						; set to 1
.97b7		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.97ba		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.97bc		95 50		sta $50,x			sta 	NSStatus,x
.97be		60		rts				rts
.97bf						UnaryFalse:
.97bf		fa		plx				plx
.97c0						ReturnFalse:
.97c0		4c a2 a6	jmp $a6a2			jmp 	NSMSetZero 					; set it all to zero
.97c3						BinaryCompareEqual:
.97c3		fa		plx				plx
.97c4		20 ff 97	jsr $97ff			jsr 	CompareBaseCode
.97c7		c9 00		cmp #$00			cmp 	#0
.97c9		f0 ea		beq $97b5			beq 	ReturnTrue
.97cb		80 f3		bra $97c0			bra 	ReturnFalse
.97cd						BinaryCompareLess:
.97cd		fa		plx				plx
.97ce		20 ff 97	jsr $97ff			jsr 	CompareBaseCode
.97d1		c9 ff		cmp #$ff			cmp 	#$FF
.97d3		f0 e0		beq $97b5			beq 	ReturnTrue
.97d5		80 e9		bra $97c0			bra 	ReturnFalse
.97d7						BinaryCompareGreater:
.97d7		fa		plx				plx
.97d8		20 ff 97	jsr $97ff			jsr 	CompareBaseCode
.97db		c9 01		cmp #$01			cmp 	#1
.97dd		f0 d6		beq $97b5			beq 	ReturnTrue
.97df		80 df		bra $97c0			bra 	ReturnFalse
.97e1						BinaryCompareNotEqual:
.97e1		fa		plx				plx
.97e2		20 ff 97	jsr $97ff			jsr 	CompareBaseCode
.97e5		c9 00		cmp #$00			cmp 	#0
.97e7		d0 cc		bne $97b5			bne 	ReturnTrue
.97e9		80 d5		bra $97c0			bra 	ReturnFalse
.97eb						BinaryCompareLessEqual:
.97eb		fa		plx				plx
.97ec		20 ff 97	jsr $97ff			jsr 	CompareBaseCode
.97ef		c9 01		cmp #$01			cmp 	#1
.97f1		d0 c2		bne $97b5			bne 	ReturnTrue
.97f3		80 cb		bra $97c0			bra 	ReturnFalse
.97f5						BinaryCompareGreaterEqual:
.97f5		fa		plx				plx
.97f6		20 ff 97	jsr $97ff			jsr 	CompareBaseCode
.97f9		c9 ff		cmp #$ff			cmp 	#$FF
.97fb		d0 b8		bne $97b5			bne 	ReturnTrue
.97fd		80 c1		bra $97c0			bra 	ReturnFalse
.97ff						CompareBaseCode:
.97ff		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; make both values if references.
.9802		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9804		15 51		ora $51,x			ora 	NSStatus+1,x
.9806		29 10		and #$10			and 	#NSTString
.9808		d0 37		bne $9841			bne 	_CBCString 					; if so do string code, which will check if both.
.980a		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.980c		15 79		ora $79,x			ora 	NSExponent+1,x
.980e		d0 34		bne $9844			bne 	_CBCFloat
.9810		b5 50		lda $50,x			lda 	NSStatus,x
.9812		15 51		ora $51,x			ora 	NSStatus+1,x
.9814		29 08		and #$08			and 	#NSTFloat
.9816		d0 2c		bne $9844			bne 	_CBCFloat
.9818		20 47 98	jsr $9847			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.981b		e8		inx				inx
.981c		20 47 98	jsr $9847			jsr 	CompareFixMinusZero
.981f		ca		dex				dex
.9820		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9822		55 51		eor $51,x			eor 	NSStatus+1,x
.9824		10 0a		bpl $9830			bpl 	_CDCSameSign
.9826		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9828		30 14		bmi $983e			bmi 	_CBCLess 					; return $FF
.982a						_CBCGreater:
.982a		a9 01		lda #$01			lda 	#1
.982c		60		rts				rts
.982d						_CBCEqual:
.982d		a9 00		lda #$00			lda 	#0
.982f		60		rts				rts
.9830						_CDCSameSign:
.9830		20 5c 9a	jsr $9a5c			jsr 	SubTopTwoStack 				; unsigned subtract
.9833		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; or the mantissa together
.9836		f0 f5		beq $982d			beq 	_CBCEqual 					; -0 == 0
.9838		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.983a		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.983c		10 ec		bpl $982a			bpl 	_CBCGreater
.983e						_CBCLess:
.983e		a9 ff		lda #$ff			lda 	#$FF
.9840		60		rts				rts
.9841						_CBCString:
.9841		4c cd 99	jmp $99cd			jmp 	CompareStrings
.9844						_CBCFloat:
.9844		4c 17 9d	jmp $9d17			jmp 	CompareFloat
.9847						CompareFixMinusZero:
.9847		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero
.984a		d0 02		bne $984e			bne 	_CFXMZNotZero
.984c		74 50		stz $50,x			stz 	NSStatus,x
.984e						_CFXMZNotZero:
.984e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.984f						StringConcat:
.984f		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9851		35 51		and $51,x			and 	NSStatus+1,x
.9853		29 18		and #$18			and 	#NSBTypeMask
.9855		c9 10		cmp #$10			cmp 	#NSTString
.9857		d0 50		bne $98a9			bne		_SCType
.9859		64 38		stz $38				stz 	zTemp1 						; counting total length
.985b		e8		inx				inx
.985c		20 7a 98	jsr $987a			jsr 	_SCSetupZ0 					; setup for second
.985f		20 83 98	jsr $9883			jsr 	_SCLengthZ0 				; length for second
.9862		ca		dex				dex
.9863		20 7a 98	jsr $987a			jsr 	_SCSetupZ0 					; setup for first
.9866		20 83 98	jsr $9883			jsr 	_SCLengthZ0 				; length for first
.9869		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.986b		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate
.986e		20 9a 98	jsr $989a			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9871		e8		inx				inx
.9872		20 7a 98	jsr $987a			jsr 	_SCSetupZ0 					; copy second out
.9875		20 9a 98	jsr $989a			jsr 	_SCCopy
.9878		ca		dex				dex
.9879		60		rts				rts
.987a						_SCSetupZ0:
.987a		b5 58		lda $58,x			lda 	NSMantissa0,x
.987c		85 36		sta $36				sta 	zTemp0
.987e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9880		85 37		sta $37				sta 	zTemp0+1
.9882		60		rts				rts
.9883						_SCLengthZ0:
.9883		5a		phy				phy
.9884		a0 00		ldy #$00			ldy 	#0
.9886						_SCLenLoop:
.9886		b1 36		lda ($36),y			lda 	(zTemp0),y
.9888		f0 0e		beq $9898			beq 	_SCLExit
.988a		c8		iny				iny
.988b		e6 38		inc $38				inc 	zTemp1
.988d		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.988f		c9 fd		cmp #$fd			cmp 	#253
.9891		d0 f3		bne $9886			bne		_SCLenLoop
.9893		a9 09		lda #$09		lda	#9
.9895		4c 48 97	jmp $9748		jmp	ErrorHandler
.9898						_SCLExit:
.9898		7a		ply				ply
.9899		60		rts				rts
.989a						_SCCopy:
.989a		5a		phy				phy
.989b		a0 00		ldy #$00			ldy 	#0
.989d						_SCCopyLoop:
.989d		b1 36		lda ($36),y			lda 	(zTemp0),y
.989f		f0 06		beq $98a7			beq 	_SCCExit
.98a1		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.98a4		c8		iny				iny
.98a5		80 f6		bra $989d			bra 	_SCCopyLoop
.98a7						_SCCExit:
.98a7		7a		ply				ply
.98a8		60		rts				rts
.98a9						_SCType:
.98a9		4c 65 b1	jmp $b165			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.98ac						IntegerDivide:
.98ac		fa		plx				plx
.98ad		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98af		15 51		ora $51,x			ora 	NSStatus+1,x
.98b1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98b2		0a		asl a				asl 	a
.98b3		10 05		bpl $98ba			bpl 	_NotRef
.98b5		48		pha				pha
.98b6		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98b9		68		pla				pla
.98ba						_NotRef:
.98ba		0a		asl a				asl 	a
.98bb		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98bd		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98bf		15 79		ora $79,x			ora 	NSExponent+1,x
.98c1		f0 03		beq $98c6			beq 	_IntegerCode 				; if clear, then we have two integers
.98c3		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.98c6						_IntegerCode:
.98c6		20 e0 98	jsr $98e0			jsr 	CheckDivideZero 			; do div zero check
.98c9		20 12 99	jsr $9912			jsr 	Int32Divide 				; do the division
.98cc		20 c3 99	jsr $99c3			jsr 	CalculateSign 				; calculate result sign
.98cf						NSMCopyPlusTwoToZero:
.98cf		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.98d1		95 58		sta $58,x			sta 	NSMantissa0,x
.98d3		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.98d5		95 60		sta $60,x			sta 	NSMantissa1,x
.98d7		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.98d9		95 68		sta $68,x			sta 	NSMantissa2,x
.98db		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.98dd		95 70		sta $70,x			sta 	NSMantissa3,x
.98df		60		rts				rts
.98e0						CheckDivideZero:
.98e0		e8		inx				inx
.98e1		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero
.98e4		f0 02		beq $98e8			beq 	_CDVError
.98e6		ca		dex				dex
.98e7		60		rts				rts
.98e8						_CDVError:
.98e8		a9 03		lda #$03		lda	#3
.98ea		4c 48 97	jmp $9748		jmp	ErrorHandler
.98ed						IntegerModulus:
.98ed		fa		plx				plx
.98ee		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98f0		15 51		ora $51,x			ora 	NSStatus+1,x
.98f2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98f3		0a		asl a				asl 	a
.98f4		10 05		bpl $98fb			bpl 	_NotRef
.98f6		48		pha				pha
.98f7		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98fa		68		pla				pla
.98fb						_NotRef:
.98fb		0a		asl a				asl 	a
.98fc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98fe		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9900		15 79		ora $79,x			ora 	NSExponent+1,x
.9902		f0 03		beq $9907			beq 	_IntegerCode 				; if clear, then we have two integers
.9904		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.9907						_IntegerCode:
.9907						IntegerModulusNoCheck:
.9907		20 e0 98	jsr $98e0			jsr 	CheckDivideZero 			; do div zero check
.990a		20 12 99	jsr $9912			jsr 	Int32Divide 				; do the division
.990d		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.990f		56 50		lsr $50,x			lsr 	NSStatus,x
.9911		60		rts				rts
.9912						Int32Divide:
.9912		48		pha				pha 								; save AXY
.9913		5a		phy				phy
.9914		20 85 a6	jsr $a685			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9917		20 9e a6	jsr $a69e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.991a		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.991c						_I32DivideLoop:
.991c		e8		inx				inx
.991d		e8		inx				inx
.991e		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9921		ca		dex				dex
.9922		ca		dex				dex
.9923		20 b2 a6	jsr $a6b2			jsr 	NSMRotateLeft
.9926		20 51 99	jsr $9951			jsr 	DivideCheckSubtract 		; check if subtract possible
.9929		90 02		bcc $992d			bcc 	_I32DivideNoCarryIn
.992b		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.992d						_I32DivideNoCarryIn:
.992d		88		dey				dey 								; loop round till division completed.
.992e		d0 ec		bne $991c			bne 	_I32DivideLoop
.9930		7a		ply				ply 								; restore AXY and exit
.9931		68		pla				pla
.9932		60		rts				rts
.9933						Int32ShiftDivide:
.9933		48		pha				pha 								; save AY
.9934		5a		phy				phy
.9935		e8		inx				inx 								; clear S[X+2]
.9936		e8		inx				inx
.9937		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.993a		ca		dex				dex
.993b		ca		dex				dex
.993c		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.993e						_I32SDLoop:
.993e		20 51 99	jsr $9951			jsr 	DivideCheckSubtract 		; check if subtract possible
.9941		e8		inx				inx
.9942		e8		inx				inx
.9943		20 b2 a6	jsr $a6b2			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9946		ca		dex				dex
.9947		ca		dex				dex
.9948		20 b2 a6	jsr $a6b2			jsr 	NSMRotateLeft
.994b		88		dey				dey 	 							; do 31 times
.994c		d0 f0		bne $993e			bne 	_I32SDLoop
.994e		7a		ply				ply 								; restore AY and exit
.994f		68		pla				pla
.9950		60		rts				rts
.9951						DivideCheckSubtract:
.9951		20 5c 9a	jsr $9a5c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9954		b0 04		bcs $995a			bcs 	_DCSExit 					; if carry set, then could do, exit
.9956		20 42 9a	jsr $9a42			jsr 	AddTopTwoStack 				; add it back in
.9959		18		clc				clc 								; and return False
.995a						_DCSExit:
.995a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.995b						MulInteger:
.995b		fa		plx				plx
.995c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.995e		15 51		ora $51,x			ora 	NSStatus+1,x
.9960		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9961		0a		asl a				asl 	a
.9962		10 05		bpl $9969			bpl 	_NotRef
.9964		48		pha				pha
.9965		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9968		68		pla				pla
.9969						_NotRef:
.9969		0a		asl a				asl 	a 							; put MSB of type into A:7
.996a		30 09		bmi $9975			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.996c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.996e		15 79		ora $79,x			ora 	NSExponent+1,x
.9970		f0 06		beq $9978			beq 	_IntegerCode 				; if clear, then we have two integers
.9972		4c d9 9d	jmp $9dd9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9975						_StringData:
.9975		4c 6f b1	jmp $b16f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9978						_IntegerCode:
.9978		20 85 99	jsr $9985			jsr 	MultiplyShort
.997b		c9 00		cmp #$00			cmp 	#0
.997d		f0 05		beq $9984			beq 	_MIExit
.997f		a9 04		lda #$04		lda	#4
.9981		4c 48 97	jmp $9748		jmp	ErrorHandler
.9984						_MIExit:
.9984		60		rts				rts
.9985						MultiplyShort:
.9985		5a		phy				phy 								; save Y
.9986		20 85 a6	jsr $a685			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9989		20 9e a6	jsr $a69e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.998c		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.998e						_I32MLoop:
.998e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9990		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9992		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9994		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9996		f0 25		beq $99bd			beq 	_I32MExit 					; exit if zero
.9998		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.999a		29 01		and #$01			and 	#1
.999c		f0 0d		beq $99ab			beq 	_I32MNoAdd
.999e		20 42 9a	jsr $9a42			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.99a1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.99a3		10 06		bpl $99ab			bpl 	_I32MNoAdd
.99a5						_I32ShiftRight:
.99a5		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight 				; shift S[X] right
.99a8		c8		iny				iny 								; increment shift count
.99a9		80 09		bra $99b4			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.99ab						_I32MNoAdd:
.99ab		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.99ad		70 f6		bvs $99a5			bvs 	_I32ShiftRight 				; instead.
.99af		e8		inx				inx
.99b0		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.99b3		ca		dex				dex
.99b4						_I32MShiftUpper:
.99b4		e8		inx				inx 								; shift S[X+2] right
.99b5		e8		inx				inx
.99b6		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight
.99b9		ca		dex				dex
.99ba		ca		dex				dex
.99bb		80 d1		bra $998e			bra 	_I32MLoop 					; try again.
.99bd						_I32MExit:
.99bd		20 c3 99	jsr $99c3			jsr 	CalculateSign
.99c0		98		tya				tya 								; shift in A
.99c1		7a		ply				ply 								; restore Y and exit
.99c2		60		rts				rts
.99c3						CalculateSign:
.99c3		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.99c5		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.99c7		55 51		eor $51,x			eor 	NSStatus+1,x
.99c9		0a		asl a				asl 	a 							; shift bit 7 into carry
.99ca		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.99cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.99cd						CompareStrings:
.99cd		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.99cf		35 51		and $51,x			and 	NSStatus+1,x
.99d1		29 10		and #$10			and 	#NSBIsString
.99d3		f0 28		beq $99fd			beq 	_CSTypeError
.99d5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.99d7		85 36		sta $36				sta 	zTemp0
.99d9		b5 60		lda $60,x			lda 	NSMantissa1,x
.99db		85 37		sta $37				sta 	zTemp0+1
.99dd		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.99df		85 38		sta $38				sta 	zTemp1
.99e1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.99e3		85 39		sta $39				sta 	zTemp1+1
.99e5		5a		phy				phy 								; save Y so we can access strings
.99e6		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.99e8						_CSLoop:
.99e8		c8		iny				iny
.99e9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.99eb		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.99ed		d0 06		bne $99f5			bne 	_CSDifferent
.99ef		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.99f1		d0 f5		bne $99e8			bne 	_CSLoop 					; still comparing
.99f3						_CSExit:
.99f3		7a		ply				ply 								; reached end, return zero in A from EOS
.99f4		60		rts				rts
.99f5						_CSDifferent:
.99f5		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.99f7		90 fa		bcc $99f3			bcc		_CSExit
.99f9		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.99fb		80 f6		bra $99f3			bra 	_CSExit
.99fd						_CSTypeError:
.99fd		4c 65 b1	jmp $b165			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a00						ShiftLeft:
.9a00		38		sec				sec 								; common code, carry determines which way.
.9a01		80 01		bra $9a04			bra 	ShiftMain
.9a03						ShiftRight:
.9a03		18		clc				clc
.9a04						ShiftMain:
.9a04		fa		plx				plx 								; restore X
.9a05		08		php				php 								; save direction
.9a06		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a08		15 51		ora $51,x			ora 	NSStatus+1,x
.9a0a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a0b		0a		asl a				asl 	a
.9a0c		10 05		bpl $9a13			bpl 	_NotRef
.9a0e		48		pha				pha
.9a0f		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a12		68		pla				pla
.9a13						_NotRef:
.9a13		0a		asl a				asl 	a
.9a14		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a16		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a18		15 79		ora $79,x			ora 	NSExponent+1,x
.9a1a		f0 03		beq $9a1f			beq 	_IntegerCode 				; if clear, then we have two integers
.9a1c		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.9a1f						_IntegerCode:
.9a1f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9a21		29 e0		and #$e0			and 	#$E0
.9a23		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9a25		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9a27		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9a29		d0 12		bne $9a3d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9a2b						_SMLoop:
.9a2b		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9a2d		30 11		bmi $9a40			bmi 	_SMExit 					; exit if done.
.9a2f		28		plp				plp 								; restore direction setting
.9a30		08		php				php
.9a31		90 05		bcc $9a38			bcc 	_SMRight
.9a33		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; shift left if CS
.9a36		80 f3		bra $9a2b			bra 	_SMLoop
.9a38						_SMRight:
.9a38		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight 				; shift right if CC
.9a3b		80 ee		bra $9a2b			bra 	_SMLoop
.9a3d						_SMExit0:
.9a3d		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; return zero.
.9a40						_SMExit:
.9a40		28		plp				plp 								; throw direction
.9a41		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9a42						AddTopTwoStack:
.9a42		18		clc				clc
.9a43		b5 58		lda $58,x			lda		NSMantissa0,x
.9a45		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9a47		95 58		sta $58,x			sta 	NSMantissa0,x
.9a49		b5 60		lda $60,x			lda		NSMantissa1,x
.9a4b		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9a4d		95 60		sta $60,x			sta 	NSMantissa1,x
.9a4f		b5 68		lda $68,x			lda		NSMantissa2,x
.9a51		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9a53		95 68		sta $68,x			sta 	NSMantissa2,x
.9a55		b5 70		lda $70,x			lda		NSMantissa3,x
.9a57		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9a59		95 70		sta $70,x			sta 	NSMantissa3,x
.9a5b		60		rts				rts
.9a5c						SubTopTwoStack:
.9a5c		38		sec				sec
.9a5d		b5 58		lda $58,x			lda		NSMantissa0,x
.9a5f		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9a61		95 58		sta $58,x			sta 	NSMantissa0,x
.9a63		b5 60		lda $60,x			lda		NSMantissa1,x
.9a65		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9a67		95 60		sta $60,x			sta 	NSMantissa1,x
.9a69		b5 68		lda $68,x			lda		NSMantissa2,x
.9a6b		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9a6d		95 68		sta $68,x			sta 	NSMantissa2,x
.9a6f		b5 70		lda $70,x			lda		NSMantissa3,x
.9a71		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9a73		95 70		sta $70,x			sta 	NSMantissa3,x
.9a75		60		rts				rts
.9a76						AddInteger:
.9a76		fa		plx				plx
.9a77		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a79		15 51		ora $51,x			ora 	NSStatus+1,x
.9a7b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a7c		0a		asl a				asl 	a
.9a7d		10 05		bpl $9a84			bpl 	_NotRef
.9a7f		48		pha				pha
.9a80		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a83		68		pla				pla
.9a84						_NotRef:
.9a84		0a		asl a				asl 	a 							; put MSB of type into A:7
.9a85		30 09		bmi $9a90			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a87		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a89		15 79		ora $79,x			ora 	NSExponent+1,x
.9a8b		f0 06		beq $9a93			beq 	_IntegerCode 				; if clear, then we have two integers
.9a8d		4c 89 9c	jmp $9c89			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9a90						_StringData:
.9a90		4c 4f 98	jmp $984f			jmp 	StringConcat							; at least one string - don't know both are strings.
.9a93						_IntegerCode:
.9a93						AddCode:
.9a93		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9a95		55 51		eor $51,x			eor 	NSStatus+1,x
.9a97		10 a9		bpl $9a42			bpl 	AddTopTwoStack
.9a99		20 5c 9a	jsr $9a5c			jsr 	SubTopTwoStack 				; do a physical subtraction
.9a9c		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9a9e		10 07		bpl $9aa7			bpl 	_AddExit
.9aa0		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9aa2		95 50		sta $50,x			sta 	NSStatus,x
.9aa4		20 6b a6	jsr $a66b			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9aa7						_AddExit:
.9aa7		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; check for -0
.9aaa		d0 02		bne $9aae			bne 	_AddNonZero
.9aac		74 50		stz $50,x			stz 	NSStatus,x
.9aae						_AddNonZero:
.9aae		60		rts				rts
.9aaf						SubInteger:
.9aaf		fa		plx				plx
.9ab0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ab2		15 51		ora $51,x			ora 	NSStatus+1,x
.9ab4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ab5		0a		asl a				asl 	a
.9ab6		10 05		bpl $9abd			bpl 	_NotRef
.9ab8		48		pha				pha
.9ab9		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9abc		68		pla				pla
.9abd						_NotRef:
.9abd		0a		asl a				asl 	a 							; put MSB of type into A:7
.9abe		30 09		bmi $9ac9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ac0		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ac2		15 79		ora $79,x			ora 	NSExponent+1,x
.9ac4		f0 06		beq $9acc			beq 	_IntegerCode 				; if clear, then we have two integers
.9ac6		4c 8e 9c	jmp $9c8e			jmp 	FloatingPointSub 							; otherwise at least one float.
.9ac9						_StringData:
.9ac9		4c 6f b1	jmp $b16f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9acc						_IntegerCode:
.9acc		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9ace		49 80		eor #$80			eor 	#$80
.9ad0		95 51		sta $51,x			sta 	NSStatus+1,x
.9ad2		80 bf		bra $9a93			bra 	AddCode 					; and do the same code as add.
.9ad4						AndInteger:
.9ad4		fa		plx				plx
.9ad5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ad7		15 51		ora $51,x			ora 	NSStatus+1,x
.9ad9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ada		0a		asl a				asl 	a
.9adb		10 05		bpl $9ae2			bpl 	_NotRef
.9add		48		pha				pha
.9ade		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ae1		68		pla				pla
.9ae2						_NotRef:
.9ae2		0a		asl a				asl 	a
.9ae3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ae5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ae7		15 79		ora $79,x			ora 	NSExponent+1,x
.9ae9		f0 03		beq $9aee			beq 	_IntegerCode 				; if clear, then we have two integers
.9aeb		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.9aee						_IntegerCode:
.9aee		b5 58		lda $58,x			lda		NSMantissa0,x
.9af0		35 59		and $59,x			and 		NSMantissa0+1,x
.9af2		95 58		sta $58,x			sta 	NSMantissa0,x
.9af4		b5 60		lda $60,x			lda		NSMantissa1,x
.9af6		35 61		and $61,x			and 		NSMantissa1+1,x
.9af8		95 60		sta $60,x			sta 	NSMantissa1,x
.9afa		b5 68		lda $68,x			lda		NSMantissa2,x
.9afc		35 69		and $69,x			and 		NSMantissa2+1,x
.9afe		95 68		sta $68,x			sta 	NSMantissa2,x
.9b00		b5 70		lda $70,x			lda		NSMantissa3,x
.9b02		35 71		and $71,x			and 		NSMantissa3+1,x
.9b04		95 70		sta $70,x			sta 	NSMantissa3,x
.9b06		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b08		60		rts				rts
.9b09						OraInteger:
.9b09		fa		plx				plx
.9b0a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b0c		15 51		ora $51,x			ora 	NSStatus+1,x
.9b0e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b0f		0a		asl a				asl 	a
.9b10		10 05		bpl $9b17			bpl 	_NotRef
.9b12		48		pha				pha
.9b13		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b16		68		pla				pla
.9b17						_NotRef:
.9b17		0a		asl a				asl 	a
.9b18		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b1a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b1c		15 79		ora $79,x			ora 	NSExponent+1,x
.9b1e		f0 03		beq $9b23			beq 	_IntegerCode 				; if clear, then we have two integers
.9b20		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.9b23						_IntegerCode:
.9b23		b5 58		lda $58,x			lda		NSMantissa0,x
.9b25		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9b27		95 58		sta $58,x			sta 	NSMantissa0,x
.9b29		b5 60		lda $60,x			lda		NSMantissa1,x
.9b2b		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9b2d		95 60		sta $60,x			sta 	NSMantissa1,x
.9b2f		b5 68		lda $68,x			lda		NSMantissa2,x
.9b31		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9b33		95 68		sta $68,x			sta 	NSMantissa2,x
.9b35		b5 70		lda $70,x			lda		NSMantissa3,x
.9b37		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9b39		95 70		sta $70,x			sta 	NSMantissa3,x
.9b3b		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b3d		60		rts				rts
.9b3e						EorInteger:
.9b3e		fa		plx				plx
.9b3f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b41		15 51		ora $51,x			ora 	NSStatus+1,x
.9b43		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b44		0a		asl a				asl 	a
.9b45		10 05		bpl $9b4c			bpl 	_NotRef
.9b47		48		pha				pha
.9b48		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b4b		68		pla				pla
.9b4c						_NotRef:
.9b4c		0a		asl a				asl 	a
.9b4d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b4f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b51		15 79		ora $79,x			ora 	NSExponent+1,x
.9b53		f0 03		beq $9b58			beq 	_IntegerCode 				; if clear, then we have two integers
.9b55		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.9b58						_IntegerCode:
.9b58		b5 58		lda $58,x			lda		NSMantissa0,x
.9b5a		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9b5c		95 58		sta $58,x			sta 	NSMantissa0,x
.9b5e		b5 60		lda $60,x			lda		NSMantissa1,x
.9b60		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9b62		95 60		sta $60,x			sta 	NSMantissa1,x
.9b64		b5 68		lda $68,x			lda		NSMantissa2,x
.9b66		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9b68		95 68		sta $68,x			sta 	NSMantissa2,x
.9b6a		b5 70		lda $70,x			lda		NSMantissa3,x
.9b6c		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9b6e		95 70		sta $70,x			sta 	NSMantissa3,x
.9b70		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b72		60		rts				rts
.9b73						WordIndirect:
.9b73		fa		plx				plx
.9b74		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b76		15 51		ora $51,x			ora 	NSStatus+1,x
.9b78		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b79		0a		asl a				asl 	a
.9b7a		10 05		bpl $9b81			bpl 	_NotRef
.9b7c		48		pha				pha
.9b7d		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b80		68		pla				pla
.9b81						_NotRef:
.9b81		0a		asl a				asl 	a
.9b82		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b84		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b86		15 79		ora $79,x			ora 	NSExponent+1,x
.9b88		f0 03		beq $9b8d			beq 	_IntegerCode 				; if clear, then we have two integers
.9b8a		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.9b8d						_IntegerCode:
.9b8d		20 93 9a	jsr $9a93			jsr 	AddCode 					; add the two values
.9b90		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9b92		95 50		sta $50,x			sta 	NSStatus,x
.9b94		60		rts				rts
.9b95						ByteIndirect:
.9b95		fa		plx				plx
.9b96		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b98		15 51		ora $51,x			ora 	NSStatus+1,x
.9b9a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b9b		0a		asl a				asl 	a
.9b9c		10 05		bpl $9ba3			bpl 	_NotRef
.9b9e		48		pha				pha
.9b9f		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ba2		68		pla				pla
.9ba3						_NotRef:
.9ba3		0a		asl a				asl 	a
.9ba4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ba6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ba8		15 79		ora $79,x			ora 	NSExponent+1,x
.9baa		f0 03		beq $9baf			beq 	_IntegerCode 				; if clear, then we have two integers
.9bac		4c 65 b1	jmp $b165			jmp 	TypeError 					; anything else, type mismatch.
.9baf						_IntegerCode:
.9baf		20 93 9a	jsr $9a93			jsr 	AddCode 					; add the two values
.9bb2		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9bb4		95 50		sta $50,x			sta 	NSStatus,x
.9bb6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9bb7						ConvertInt16:
.9bb7		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9bb9		86 60		stx $60				stx 	NSMantissa1
.9bbb		64 68		stz $68				stz 	NSMantissa2
.9bbd		64 70		stz $70				stz 	NSMantissa3
.9bbf		64 50		stz $50				stz 	NSStatus 					; positive integer
.9bc1		a2 00		ldx #$00			ldx 	#0 							; stack level
.9bc3		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9bc5		80 00		bra $9bc7			bra 	ConvertInt32
.9bc7						ConvertInt32:
.9bc7		5a		phy				phy
.9bc8		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9bca		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9bcc		10 08		bpl $9bd6			bpl 	_CI32NotNeg
.9bce		48		pha				pha
.9bcf		a9 2d		lda #$2d			lda 	#'-'
.9bd1		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9bd4		c8		iny				iny
.9bd5		68		pla				pla
.9bd6						_CI32NotNeg:
.9bd6		20 e4 9b	jsr $9be4			jsr 	_CI32DivideConvert 			; recursive conversion
.9bd9		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9bdb		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9bde		7a		ply				ply
.9bdf		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9be1		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9be3		60		rts				rts
.9be4						_CI32DivideConvert:
.9be4		e8		inx				inx 								; write to next slot up
.9be5		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte 		 			; write the base out.
.9be8		ca		dex				dex
.9be9		20 12 99	jsr $9912			jsr 	Int32Divide 				; divide
.9bec		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9bee		48		pha				pha
.9bef		20 cf 98	jsr $98cf			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9bf2		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; is it zero ?
.9bf5		f0 05		beq $9bfc			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9bf7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9bf9		20 e4 9b	jsr $9be4			jsr 	_CI32DivideConvert 			; and recusrively call.
.9bfc						_CI32NoRecurse:
.9bfc		68		pla				pla 								; remainder
.9bfd		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9bff		90 02		bcc $9c03			bcc 	_CI32NotHex
.9c01		69 26		adc #$26			adc 	#6+32
.9c03						_CI32NotHex:
.9c03		69 30		adc #$30			adc 	#48
.9c05		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9c08		c8		iny				iny
.9c09		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9c0a						PrecedenceLevel:
>9c0a		04					.byte	 4	; $00 <<
>9c0b		02					.byte	 2	; $01 <=
>9c0c		02					.byte	 2	; $02 <>
>9c0d		00					.byte	 0	; $03 !!3
>9c0e		00					.byte	 0	; $04 ><
>9c0f		02					.byte	 2	; $05 >=
>9c10		04					.byte	 4	; $06 >>
>9c11		00					.byte	 0	; $07 !!7
>9c12		00					.byte	 0	; $08 !!8
>9c13		00					.byte	 0	; $09 !!9
>9c14		00					.byte	 0	; $0a !!10
>9c15		00					.byte	 0	; $0b !!11
>9c16		00					.byte	 0	; $0c !!12
>9c17		00					.byte	 0	; $0d !!13
>9c18		00					.byte	 0	; $0e !!14
>9c19		00					.byte	 0	; $0f !!15
>9c1a		00					.byte	 0	; $10 @
>9c1b		00					.byte	 0	; $11 !!17
>9c1c		00					.byte	 0	; $12 !!18
>9c1d		00					.byte	 0	; $13 [
>9c1e		04					.byte	 4	; $14 \
>9c1f		00					.byte	 0	; $15 ]
>9c20		01					.byte	 1	; $16 ^
>9c21		00					.byte	 0	; $17 _
>9c22		00					.byte	 0	; $18 `
>9c23		00					.byte	 0	; $19 !!25
>9c24		00					.byte	 0	; $1a !!26
>9c25		00					.byte	 0	; $1b {
>9c26		01					.byte	 1	; $1c |
>9c27		00					.byte	 0	; $1d }
>9c28		00					.byte	 0	; $1e ~
>9c29		00					.byte	 0	; $1f <7F>
>9c2a		00					.byte	 0	; $20
>9c2b		05					.byte	 5	; $21 !
>9c2c		00					.byte	 0	; $22 "
>9c2d		00					.byte	 0	; $23 #
>9c2e		05					.byte	 5	; $24 $
>9c2f		04					.byte	 4	; $25 %
>9c30		01					.byte	 1	; $26 &
>9c31		00					.byte	 0	; $27 '
>9c32		00					.byte	 0	; $28 (
>9c33		00					.byte	 0	; $29 )
>9c34		04					.byte	 4	; $2a *
>9c35		03					.byte	 3	; $2b +
>9c36		00					.byte	 0	; $2c ,
>9c37		03					.byte	 3	; $2d -
>9c38		00					.byte	 0	; $2e .
>9c39		04					.byte	 4	; $2f /
>9c3a		00					.byte	 0	; $30 0
>9c3b		00					.byte	 0	; $31 1
>9c3c		00					.byte	 0	; $32 2
>9c3d		00					.byte	 0	; $33 3
>9c3e		00					.byte	 0	; $34 4
>9c3f		00					.byte	 0	; $35 5
>9c40		00					.byte	 0	; $36 6
>9c41		00					.byte	 0	; $37 7
>9c42		00					.byte	 0	; $38 8
>9c43		00					.byte	 0	; $39 9
>9c44		00					.byte	 0	; $3a :
>9c45		00					.byte	 0	; $3b ;
>9c46		02					.byte	 2	; $3c <
>9c47		02					.byte	 2	; $3d =
>9c48		02					.byte	 2	; $3e >
>9c49		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9c4a						EvaluateExpressionAt0:
.9c4a		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9c4c						EvaluateExpression:
.9c4c		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9c4e						EvaluateExpressionAtPrecedence:
.9c4e		48		pha				pha 								; save precedence level
.9c4f		20 96 a0	jsr $a096			jsr 	EvaluateTerm 				; evaluate term into level X.
.9c52		68		pla				pla 								; restore precedence level.
.9c53						_EXPRLoop:
.9c53		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9c55		b1 30		lda ($30),y			lda 	(codePtr),y
.9c57		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9c59		b0 25		bcs $9c80			bcs 	_EXPRExit
.9c5b		da		phx				phx 								; read the operator precedence
.9c5c		aa		tax				tax
.9c5d		bd 0a 9c	lda $9c0a,x			lda 	PrecedenceLevel,x
.9c60		fa		plx				plx
.9c61		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9c63		f0 1b		beq $9c80			beq 	_EXPRExit
.9c65		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9c67		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9c69		c5 37		cmp $37				cmp 	zTemp0+1
.9c6b		b0 13		bcs $9c80			bcs		_EXPRExit 					; if current >= operator exit
.9c6d		48		pha				pha 								; save current precedence.
.9c6e		b1 30		lda ($30),y			lda 	(codePtr),y
.9c70		c8		iny				iny
.9c71		48		pha				pha
.9c72		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9c74		e8		inx				inx 								; work out the right hand side.
.9c75		20 4e 9c	jsr $9c4e			jsr 	EvaluateExpressionAtPrecedence
.9c78		ca		dex				dex
.9c79		68		pla				pla 								; get operator, call the code.
.9c7a		20 83 9c	jsr $9c83			jsr 	_EXPRCaller
.9c7d		68		pla				pla 								; restore precedence level
.9c7e		80 d3		bra $9c53			bra 	_EXPRLoop 					; and go round.
.9c80						_EXPRExit:
.9c80		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9c82		60		rts				rts
.9c83						_EXPRCaller:
.9c83		da		phx				phx 								; save on stack, first thing is to restore it
.9c84		0a		asl a				asl 	a 							; double so can use vectors into X
.9c85		aa		tax				tax
.9c86		7c 9c 93	jmp ($939c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9c89						FloatingPointAdd:
.9c89		20 ff 9d	jsr $9dff			jsr 	FloatPrepare 				; prepare for floats
.9c8c		80 09		bra $9c97			bra 	FloatAdd
.9c8e						FloatingPointSub:
.9c8e		20 ff 9d	jsr $9dff			jsr 	FloatPrepare 				; prepare for floats
.9c91						FloatSubtract:
.9c91		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9c93		49 80		eor #$80			eor 	#$80
.9c95		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9c97						FloatAdd:
.9c97		48		pha				pha
.9c98		5a		phy				phy
.9c99		20 0e 9e	jsr $9e0e			jsr 	NSNormalise 				; normalise S[X]
.9c9c		f0 51		beq $9cef			beq 	_FAReturn1
.9c9e		e8		inx				inx 								; normalise S[X+1]
.9c9f		20 0e 9e	jsr $9e0e			jsr 	NSNormalise
.9ca2		ca		dex				dex
.9ca3		c9 00		cmp #$00			cmp 	#0
.9ca5		f0 60		beq $9d07			beq 	_FAExit 					; if so, just return A
.9ca7		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9ca9		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9cab		f0 18		beq $9cc5			beq 	_FAExponentsEqual
.9cad		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9caf		a8		tay				tay
.9cb0		38		sec				sec 								; do a signed comparison of the exponents.
.9cb1		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9cb3		50 02		bvc $9cb7			bvc 	_FANoSignedChange
.9cb5		49 80		eor #$80			eor 	#$80
.9cb7						_FANoSignedChange:
.9cb7		29 80		and #$80			and 	#$80
.9cb9		10 02		bpl $9cbd			bpl 	_FAHaveMax
.9cbb		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9cbd						_FAHaveMax:
.9cbd		20 0a 9d	jsr $9d0a			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9cc0		e8		inx				inx
.9cc1		20 0a 9d	jsr $9d0a			jsr 	_FAShiftToExponent
.9cc4		ca		dex				dex
.9cc5						_FAExponentsEqual:
.9cc5		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9cc7		55 51		eor $51,x			eor 	NSStatus+1,x
.9cc9		30 0e		bmi $9cd9			bmi 	_FADifferentSigns
.9ccb		20 42 9a	jsr $9a42			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9cce		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9cd0		10 35		bpl $9d07			bpl 	_FAExit 					; if no, we are done.
.9cd2		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9cd5		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9cd7		80 2e		bra $9d07			bra 	_FAExit
.9cd9						_FADifferentSigns:
.9cd9		20 5c 9a	jsr $9a5c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9cdc		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9cde		10 06		bpl $9ce6			bpl 	_FACheckZero 				; if no, check for -0
.9ce0		20 64 a6	jsr $a664			jsr 	NSMNegate 					; netate result
.9ce3		20 6b a6	jsr $a66b			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9ce6						_FACheckZero:
.9ce6		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero	 				; check for -0
.9ce9		d0 1c		bne $9d07			bne 	_FAExit
.9ceb		74 50		stz $50,x			stz 	NSStatus,x
.9ced		80 18		bra $9d07			bra 	_FAExit
.9cef						_FAReturn1:
.9cef		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9cf1		95 58		sta $58,x			sta 	NSMantissa0,x
.9cf3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9cf5		95 60		sta $60,x			sta 	NSMantissa1,x
.9cf7		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9cf9		95 68		sta $68,x			sta 	NSMantissa2,x
.9cfb		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9cfd		95 70		sta $70,x			sta 	NSMantissa3,x
.9cff		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d01		95 78		sta $78,x			sta 	NSExponent,x
.9d03		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d05		95 50		sta $50,x			sta 	NSStatus,x
.9d07						_FAExit:
.9d07		7a		ply				ply
.9d08		68		pla				pla
.9d09		60		rts				rts
.9d0a						_FAShiftToExponent:
.9d0a						_FAShiftToExponent2:
.9d0a		98		tya				tya 								; compare Y to exponent
.9d0b		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9d0d		f0 07		beq $9d16			beq 	_FASEExit 					; exit if so.
.9d0f		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight	 			; shift the mantissa right
.9d12		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9d14		80 f4		bra $9d0a			bra 	_FAShiftToExponent2
.9d16						_FASEExit:
.9d16		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9d17						CompareFloat:
.9d17		20 91 9c	jsr $9c91			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9d1a		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9d1c		29 f8		and #$f8			and 	#$F8
.9d1e		15 68		ora $68,x			ora 	NSMantissa2,x
.9d20		15 70		ora $70,x			ora 	NSMantissa3,x
.9d22		f0 08		beq $9d2c			beq 	_FCExit 					; zero, so approximately identical
.9d24		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9d26		34 50		bit $50,x			bit 	NSStatus,x
.9d28		10 02		bpl $9d2c			bpl 	_FCExit
.9d2a						_FCNegative:
.9d2a		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9d2c						_FCExit:
.9d2c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9d2d						FDivideCommand:
.9d2d		fa		plx				plx	 								; restore stack position
.9d2e		20 ff 9d	jsr $9dff			jsr 	FloatPrepare 				; prepare for floats
.9d31						FloatDivide:
.9d31		48		pha				pha
.9d32		e8		inx				inx
.9d33		20 0e 9e	jsr $9e0e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9d36		ca		dex				dex
.9d37		c9 00		cmp #$00			cmp 	#0
.9d39		f0 1d		beq $9d58			beq 	_FDZero
.9d3b		20 0e 9e	jsr $9e0e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9d3e		f0 16		beq $9d56			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9d40		20 33 99	jsr $9933			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9d43		20 cf 98	jsr $98cf			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9d46		20 0e 9e	jsr $9e0e			jsr		NSNormalise 				; renormalise
.9d49		20 c3 99	jsr $99c3			jsr 	CalculateSign 				; calculate result sign
.9d4c		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9d4e		38		sec				sec
.9d4f		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d51		38		sec				sec
.9d52		e9 1e		sbc #$1e			sbc 	#30
.9d54		95 78		sta $78,x			sta 	NSExponent,x
.9d56						_FDExit:
.9d56		68		pla				pla
.9d57		60		rts				rts
.9d58						_FDZero:
.9d58		a9 03		lda #$03		lda	#3
.9d5a		4c 48 97	jmp $9748		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9d5d						FloatFractionalPart:
.9d5d		5a		phy				phy
.9d5e		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9d60		29 7f		and #$7f			and 	#$7F
.9d62		95 50		sta $50,x			sta 	NSStatus,x
.9d64		20 0e 9e	jsr $9e0e			jsr 	NSNormalise
.9d67		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9d69		38		sec				sec
.9d6a		e9 e0		sbc #$e0			sbc 	#$E0
.9d6c		90 29		bcc $9d97			bcc 	_FFPExit 					; already fractional
.9d6e		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9d70		b0 22		bcs $9d94			bcs 	_FFPZero
.9d72		a8		tay				tay 								; put count to do in Y
.9d73		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9d75		20 99 9d	jsr $9d99			jsr 	_FFPPartial
.9d78		95 70		sta $70,x			sta 	NSMantissa3,x
.9d7a		b5 68		lda $68,x			lda 	NSMantissa2,x
.9d7c		20 99 9d	jsr $9d99			jsr 	_FFPPartial
.9d7f		95 68		sta $68,x			sta 	NSMantissa2,x
.9d81		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d83		20 99 9d	jsr $9d99			jsr 	_FFPPartial
.9d86		95 60		sta $60,x			sta 	NSMantissa1,x
.9d88		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d8a		20 99 9d	jsr $9d99			jsr 	_FFPPartial
.9d8d		95 58		sta $58,x			sta 	NSMantissa0,x
.9d8f		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; zeroed check.
.9d92		d0 03		bne $9d97			bne 	_FFPExit
.9d94						_FFPZero:
.9d94		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.9d97						_FFPExit:
.9d97		7a		ply				ply
.9d98		60		rts				rts
.9d99						_FFPPartial:
.9d99		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9d9b		f0 17		beq $9db4			beq 	_FFFPPExit
.9d9d		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9d9f		b0 0c		bcs $9dad			bcs 	_FFFPPWholeByte
.9da1		5a		phy				phy
.9da2						_FFFPPLeft:
.9da2		0a		asl a				asl 	a
.9da3		88		dey				dey
.9da4		d0 fc		bne $9da2			bne 	_FFFPPLeft
.9da6		7a		ply				ply
.9da7						_FFFPPRight:
.9da7		4a		lsr a				lsr 	a
.9da8		88		dey				dey
.9da9		d0 fc		bne $9da7			bne 	_FFFPPRight
.9dab		80 07		bra $9db4			bra 	_FFFPPExit
.9dad						_FFFPPWholeByte:
.9dad		98		tya				tya 								; subtract 8 from count
.9dae		38		sec				sec
.9daf		e9 08		sbc #$08			sbc 	#8
.9db1		a8		tay				tay
.9db2		a9 00		lda #$00			lda 	#0 							; and clear all
.9db4						_FFFPPExit:
.9db4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9db5						FloatIntegerPart:
.9db5		48		pha				pha
.9db6		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9db8		f0 1d		beq $9dd7			beq 	_FIPExit 					; if so do nothing
.9dba		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; is it zero ?
.9dbd		f0 15		beq $9dd4			beq 	_FIPZero 					; if so return zero.
.9dbf		20 0e 9e	jsr $9e0e			jsr 	NSNormalise 				; normalise
.9dc2		f0 10		beq $9dd4			beq 	_FIPZero 					; normalised to zero, exit zero
.9dc4						_FIPShift:
.9dc4		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9dc6		10 07		bpl $9dcf			bpl 	_FIPCheckZero
.9dc8		20 bb a6	jsr $a6bb			jsr 	NSMShiftRight 				; shift mantissa right
.9dcb		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9dcd		80 f5		bra $9dc4			bra 	_FIPShift
.9dcf						_FIPCheckZero:
.9dcf		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; avoid -0 problem
.9dd2		d0 03		bne $9dd7			bne 	_FIPExit 					; set to zero if mantissa zero.
.9dd4						_FIPZero:
.9dd4		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.9dd7						_FIPExit:
.9dd7		68		pla				pla
.9dd8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9dd9						FloatingPointMultiply:
.9dd9		20 ff 9d	jsr $9dff			jsr 	FloatPrepare 				; prepare for floats
.9ddc						FloatMultiply:
.9ddc		48		pha				pha
.9ddd		20 0e 9e	jsr $9e0e			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9de0		f0 18		beq $9dfa			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9de2		e8		inx				inx
.9de3		20 0e 9e	jsr $9e0e			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9de6		ca		dex				dex
.9de7		c9 00		cmp #$00			cmp 	#0
.9de9		f0 0c		beq $9df7			beq 	_FDSetZero
.9deb		20 85 99	jsr $9985			jsr 	MultiplyShort 				; calculate the result.
.9dee		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9df0		18		clc				clc
.9df1		75 79		adc $79,x			adc 	NSExponent+1,x
.9df3		95 78		sta $78,x			sta 	NSExponent,x
.9df5		80 03		bra $9dfa			bra 	_FDExit
.9df7						_FDSetZero:
.9df7		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; return 0
.9dfa						_FDExit:
.9dfa		20 0e 9e	jsr $9e0e			jsr 	NSNormalise 				; normalise the result
.9dfd		68		pla				pla
.9dfe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9dff						FloatPrepare:
.9dff		20 0a 9f	jsr $9f0a			jsr 	DereferenceTopTwo 			; dereference the top two values
.9e02		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9e04		15 51		ora $51,x			ora 	NSStatus+1,x
.9e06		29 10		and #$10			and 	#NSBIsString
.9e08		d0 01		bne $9e0b			bne 	_FDType
.9e0a		60		rts				rts
.9e0b						_FDType:
.9e0b		4c 65 b1	jmp $b165			jmp 	TypeError
.9e0e						NSNormalise:
.9e0e		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9e10		29 80		and #$80			and 	#$80
.9e12		09 08		ora #$08			ora 	#NSTFloat
.9e14		95 50		sta $50,x			sta 	NSStatus,x
.9e16		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; if zero exit
.9e19		d0 07		bne $9e22			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9e1b		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9e1d		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9e1f		a9 00		lda #$00			lda 	#0 							; set Z flag
.9e21		60		rts				rts
.9e22						_NSNormaliseOptimise:
.9e22		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9e24		d0 19		bne $9e3f			bne 	_NSNormaliseLoop
.9e26		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9e28		30 15		bmi $9e3f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9e2a		95 70		sta $70,x			sta 	NSMantissa3,x
.9e2c		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e2e		95 68		sta $68,x			sta 	NSMantissa2,x
.9e30		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e32		95 60		sta $60,x			sta 	NSMantissa1,x
.9e34		74 58		stz $58,x			stz 	NSMantissa0,x
.9e36		b5 78		lda $78,x			lda 	NSExponent,x
.9e38		38		sec				sec
.9e39		e9 08		sbc #$08			sbc 	#8
.9e3b		95 78		sta $78,x			sta 	NSExponent,x
.9e3d		80 e3		bra $9e22			bra 	_NSNormaliseOptimise
.9e3f						_NSNormaliseLoop:
.9e3f		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9e41		70 07		bvs $9e4a			bvs 	_NSNExit 					; exit if so with Z flag clear
.9e43		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; shift mantissa left
.9e46		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9e48		80 f5		bra $9e3f			bra 	_NSNormaliseLoop
.9e4a						_NSNExit:
.9e4a		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9e4c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9e4d						AssignNumber:
.9e4d		5a		phy				phy
.9e4e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9e50		85 36		sta $36				sta 	zTemp0
.9e52		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e54		85 37		sta $37				sta 	zTemp0+1
.9e56		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9e58		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9e5a		95 50		sta $50,x			sta 	NSStatus,x
.9e5c		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9e5e		c9 08		cmp #$08			cmp 	#NSTFloat
.9e60		f0 24		beq $9e86			beq 	_ANFloat
.9e62		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9e64		f0 03		beq $9e69			beq		_ANNotFloat
.9e66		4c 60 b1	jmp $b160			jmp 	RangeError					; if it is, report an error.
.9e69						_ANNotFloat:
.9e69		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9e6b		29 03		and #$03			and 	#3
.9e6d		d0 05		bne $9e74			bne 	_ANByteWord
.9e6f		20 91 9e	jsr $9e91			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9e72		80 1b		bra $9e8f			bra 	_ANExit
.9e74						_ANByteWord:
.9e74		48		pha				pha 								; save count
.9e75		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9e77		92 36		sta ($36)			sta 	(zTemp0)
.9e79		68		pla				pla
.9e7a		c9 01		cmp #$01			cmp	 	#1
.9e7c		f0 11		beq $9e8f			beq 	_ANExit
.9e7e		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9e80		a0 01		ldy #$01			ldy 	#1
.9e82		91 36		sta ($36),y			sta 	(zTemp0),y
.9e84		80 09		bra $9e8f			bra 	_ANExit
.9e86						_ANFloat:
.9e86		20 91 9e	jsr $9e91			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e89		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e8b		a0 04		ldy #$04			ldy 	#4
.9e8d		91 36		sta ($36),y			sta 	(zTemp0),y
.9e8f						_ANExit:
.9e8f		7a		ply				ply
.9e90		60		rts				rts
.9e91						_ANCopy4PackSign:
.9e91		a0 03		ldy #$03			ldy 	#3
.9e93		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9e95		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e97		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9e99		91 36		sta ($36),y			sta 	(zTemp0),y
.9e9b		88		dey				dey
.9e9c		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9e9e		91 36		sta ($36),y			sta 	(zTemp0),y
.9ea0		88		dey				dey
.9ea1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ea3		91 36		sta ($36),y			sta 	(zTemp0),y
.9ea5		88		dey				dey
.9ea6		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9ea8		91 36		sta ($36),y			sta 	(zTemp0),y
.9eaa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9eab						AssignString:
.9eab		5a		phy				phy
.9eac		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9eae		85 38		sta $38				sta 	zTemp1
.9eb0		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9eb2		85 39		sta $39				sta 	zTemp1+1
.9eb4		b5 58		lda $58,x			lda 	NSMantissa0,x
.9eb6		85 36		sta $36				sta 	zTemp0
.9eb8		b5 60		lda $60,x			lda 	NSMantissa1,x
.9eba		85 37		sta $37				sta 	zTemp0+1
.9ebc		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9ebe		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ec0		f0 23		beq $9ee5			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9ec2		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9ec3		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9ec5		e9 02		sbc #$02			sbc 	#2
.9ec7		85 3c		sta $3c				sta 	zsTemp
.9ec9		a0 01		ldy #$01			ldy 	#1
.9ecb		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ecd		e9 00		sbc #$00			sbc 	#0
.9ecf		85 3d		sta $3d				sta 	zsTemp+1
.9ed1		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9ed3						_ASGetLength:
.9ed3		c8		iny				iny
.9ed4		b1 38		lda ($38),y			lda 	(zTemp1),y
.9ed6		d0 fb		bne $9ed3			bne 	_ASGetLength
.9ed8		98		tya				tya 								; is this length <= current length
.9ed9		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9edb		90 1e		bcc $9efb			bcc 	_ASCopyString
.9edd		f0 1c		beq $9efb			beq 	_ASCopyString
.9edf		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9ee1		a0 01		ldy #$01			ldy 	#1
.9ee3		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ee5						_ASNewStringRequired:
.9ee5		e8		inx				inx 								; concrete the new string.
.9ee6		20 48 b8	jsr $b848			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9ee9		ca		dex				dex
.9eea		18		clc				clc
.9eeb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9eed		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9eef		92 36		sta ($36)			sta 	(zTemp0)
.9ef1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ef3		69 00		adc #$00			adc 	#0
.9ef5		a0 01		ldy #$01			ldy 	#1
.9ef7		91 36		sta ($36),y			sta 	(zTemp0),y
.9ef9		80 0d		bra $9f08			bra 	_ASExit
.9efb						_ASCopyString:
.9efb		a0 00		ldy #$00			ldy 	#0
.9efd						_ASCopyLoop:
.9efd		b1 38		lda ($38),y			lda 	(zTemp1),y
.9eff		c8		iny				iny
.9f00		c8		iny				iny
.9f01		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f03		88		dey				dey
.9f04		c9 00		cmp #$00			cmp 	#0
.9f06		d0 f5		bne $9efd			bne 	_ASCopyLoop
.9f08						_ASExit:
.9f08		7a		ply				ply
.9f09		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9f0a						DereferenceTopTwo:
.9f0a		e8		inx				inx
.9f0b		20 0f 9f	jsr $9f0f			jsr 	Dereference 				; deref x+1
.9f0e		ca		dex				dex  								; falls through to deref x
.9f0f						Dereference:
.9f0f		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9f11		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9f13		f0 48		beq $9f5d			beq 	_DRFExit 					; not a reference, so exit.
.9f15		5a		phy				phy
.9f16		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f18		85 36		sta $36				sta 	zTemp0
.9f1a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f1c		85 37		sta $37				sta 	zTemp0+1
.9f1e		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9f20		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f22		95 58		sta $58,x			sta 	NSMantissa0,x
.9f24		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9f26		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f28		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f2a		f0 0e		beq $9f3a			beq 	_DRFDereferenceTwo
.9f2c		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9f2e		f0 2f		beq $9f5f			beq 	_DRFFull
.9f30		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9f32		29 03		and #$03			and 	#3
.9f34		f0 29		beq $9f5f			beq 	_DRFFull 					; the whole word
.9f36		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9f38		f0 06		beq $9f40			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9f3a						_DRFDereferenceTwo:
.9f3a		a0 01		ldy #$01			ldy 	#1
.9f3c		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f3e		95 60		sta $60,x			sta 	NSMantissa1,x
.9f40						_DRFClear23:
.9f40		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9f42		74 70		stz $70,x			stz 	NSMantissa3,x
.9f44		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9f46		29 18		and #$18			and 	#NSBTypeMask
.9f48		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9f4a		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f4c		d0 0e		bne $9f5c			bne 	_DRFNotString
.9f4e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9f50		15 60		ora $60,x			ora 	NSMantissa1,x
.9f52		d0 08		bne $9f5c			bne 	_DRFNotString
.9f54		a9 5e		lda #$5e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9f56		95 58		sta $58,x			sta 	NSMantissa0,x
.9f58		a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9f5a		95 60		sta $60,x			sta 	NSMantissa1,x
.9f5c						_DRFNotString
.9f5c		7a		ply				ply 								; restore Y and exit
.9f5d						_DRFExit:
.9f5d		60		rts				rts
.9f5e						_DRFNullString:
>9f5e		00						.byte 	0
.9f5f						_DRFFull:
.9f5f		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f61		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f63		95 60		sta $60,x			sta 	NSMantissa1,x
.9f65		c8		iny				iny
.9f66		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f68		95 68		sta $68,x			sta 	NSMantissa2,x
.9f6a		c8		iny				iny
.9f6b		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f6d		95 70		sta $70,x			sta 	NSMantissa3,x
.9f6f		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9f71		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9f73		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f75		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9f77		f0 05		beq $9f7e			beq 	_DRFNoExponent
.9f79		c8		iny				iny 								; if not, read the exponent as well.
.9f7a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f7c		95 78		sta $78,x			sta 	NSExponent,x
.9f7e						_DRFNoExponent:
.9f7e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f80		10 0a		bpl $9f8c			bpl 	_DRFExit2 					; if not, then exit.
.9f82		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f84		95 70		sta $70,x			sta 	NSMantissa3,x
.9f86		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9f88		09 80		ora #$80			ora 	#NSBIsNegative
.9f8a		95 50		sta $50,x			sta 	NSStatus,x
.9f8c						_DRFExit2:
.9f8c		7a		ply				ply
.9f8d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9f8e						EncodeNumberStart:
.9f8e		38		sec				sec
.9f8f		80 01		bra $9f92			bra 	EncodeNumberContinue+1
.9f91						EncodeNumberContinue:
.9f91		18		clc				clc
.9f92						EncodeNumber:
.9f92		08		php				php 								; save reset flag.
.9f93		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9f95		f0 12		beq $9fa9			beq 	_ENIsOkay
.9f97		c9 30		cmp #$30			cmp 	#"0"
.9f99		90 04		bcc $9f9f			bcc 	_ENBadNumber
.9f9b		c9 3a		cmp #$3a			cmp 	#"9"+1
.9f9d		90 0a		bcc $9fa9			bcc 	_ENIsOkay
.9f9f						_ENBadNumber:
.9f9f		28		plp				plp 								; throw saved reset
.9fa0		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9fa3		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9fa5		f0 7b		beq $a022			beq 	_ENConstructFinal
.9fa7						_ENFail:
.9fa7		18		clc				clc 								; not allowed
.9fa8		60		rts				rts
.9fa9						_ENIsOkay:
.9fa9		28		plp				plp 								; are we restarting
.9faa		90 15		bcc $9fc1			bcc 	_ENNoRestart
.9fac						_ENStartEncode:
.9fac		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9fae		f0 0c		beq $9fbc			beq 	_ENFirstDP
.9fb0		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9fb2		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte 					; in single byte mode.
.9fb5		a9 01		lda #$01			lda 	#ESTA_Low
.9fb7						_ENExitChange:
.9fb7		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9fba		38		sec				sec
.9fbb		60		rts				rts
.9fbc						_ENFirstDP:
.9fbc		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; clear integer part
.9fbf		80 3c		bra $9ffd			bra 	_ESTASwitchFloat			; go straight to float and exi
.9fc1						_ENNoRestart:
.9fc1		48		pha				pha 								; save digit or DP on stack.
.9fc2		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9fc5		c9 01		cmp #$01			cmp 	#ESTA_Low
.9fc7		f0 09		beq $9fd2			beq  	_ESTALowState
.9fc9		c9 02		cmp #$02			cmp 	#ESTA_High
.9fcb		f0 26		beq $9ff3			beq 	_ESTAHighState
.9fcd		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9fcf		f0 38		beq $a009			beq 	_ESTADecimalState
>9fd1		db						.byte 	$DB 						; causes a break in the emulator
.9fd2						_ESTALowState:
.9fd2		68		pla				pla 								; get value back
.9fd3		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9fd5		f0 26		beq $9ffd			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9fd7		29 0f		and #$0f			and 	#15 						; make digit
.9fd9		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9fdc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9fde		0a		asl a				asl 	a
.9fdf		0a		asl a				asl 	a
.9fe0		75 58		adc $58,x			adc 	NSMantissa0,x
.9fe2		0a		asl a				asl 	a
.9fe3		6d 06 04	adc $0406			adc 	digitTemp
.9fe6		95 58		sta $58,x			sta 	NSMantissa0,x
.9fe8		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9fea		90 05		bcc $9ff1			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9fec		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9fee		8d 05 04	sta $0405			sta 	encodeState
.9ff1						_ESTANoSwitch:
.9ff1		38		sec				sec
.9ff2		60		rts				rts
.9ff3						_ESTAHighState:
.9ff3		68		pla				pla 								; get value back
.9ff4		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9ff6		f0 05		beq $9ffd			beq 	_ESTASwitchFloat
.9ff8		20 56 a0	jsr $a056			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9ffb		38		sec				sec
.9ffc		60		rts				rts
.9ffd						_ESTASwitchFloat:
.9ffd		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a000		e8		inx				inx 								; zero the decimal additive.
.a001		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.a004		ca		dex				dex
.a005		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a007		80 ae		bra $9fb7			bra 	_ENExitChange
.a009						_ESTADecimalState:
.a009		68		pla				pla 								; digit.
.a00a		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a00c		f0 99		beq $9fa7			beq 	_ENFail
.a00e		e8		inx				inx 								; put digit into fractional part of X+1
.a00f		20 56 a0	jsr $a056			jsr 	ESTAShiftDigitIntoMantissa
.a012		ca		dex				dex
.a013		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a016		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a019		c9 0b		cmp #$0b			cmp 	#11
.a01b		f0 02		beq $a01f			beq 	_ESTADSFail
.a01d		38		sec				sec
.a01e		60		rts				rts
.a01f						_ESTADSFail:
.a01f		4c 60 b1	jmp $b160			jmp 	RangeError
.a022						_ENConstructFinal:
.a022		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a025		f0 2d		beq $a054			beq 	_ENCFExit 					; no decimals
.a027		5a		phy				phy
.a028		0a		asl a				asl 	a 							; x 4 and CLC
.a029		0a		asl a				asl 	a
.a02a		6d 07 04	adc $0407			adc 	decimalCount
.a02d		a8		tay				tay
.a02e		b9 1f b1	lda $b11f,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a031		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a033		b9 20 b1	lda $b120,y			lda 	DecimalScalarTable-5+1,y
.a036		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a038		b9 21 b1	lda $b121,y			lda 	DecimalScalarTable-5+2,y
.a03b		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a03d		b9 22 b1	lda $b122,y			lda 	DecimalScalarTable-5+3,y
.a040		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a042		b9 23 b1	lda $b123,y			lda 	DecimalScalarTable-5+4,y
.a045		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a047		a9 08		lda #$08			lda 	#NSTFloat
.a049		95 52		sta $52,x			sta 	NSStatus+2,x
.a04b		7a		ply				ply
.a04c		e8		inx				inx 								; multiply decimal const by decimal scalar
.a04d		20 dc 9d	jsr $9ddc			jsr 	FloatMultiply
.a050		ca		dex				dex
.a051		20 97 9c	jsr $9c97			jsr 	FloatAdd 					; add to integer part.
.a054						_ENCFExit:
.a054		18		clc				clc 								; reject the digit.
.a055		60		rts				rts
.a056						ESTAShiftDigitIntoMantissa:
.a056		29 0f		and #$0f			and 	#15 						; save digit
.a058		48		pha				pha
.a059		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a05b		48		pha				pha
.a05c		b5 68		lda $68,x			lda 	NSMantissa2,x
.a05e		48		pha				pha
.a05f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a061		48		pha				pha
.a062		b5 58		lda $58,x			lda 	NSMantissa0,x
.a064		48		pha				pha
.a065		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; x 2
.a068		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; x 4
.a06b		18		clc				clc 								; pop mantissa and add
.a06c		68		pla				pla
.a06d		75 58		adc $58,x			adc 	NSMantissa0,x
.a06f		95 58		sta $58,x			sta 	NSMantissa0,x
.a071		68		pla				pla
.a072		75 60		adc $60,x			adc 	NSMantissa1,x
.a074		95 60		sta $60,x			sta 	NSMantissa1,x
.a076		68		pla				pla
.a077		75 68		adc $68,x			adc 	NSMantissa2,x
.a079		95 68		sta $68,x			sta 	NSMantissa2,x
.a07b		68		pla				pla
.a07c		75 70		adc $70,x			adc 	NSMantissa3,x
.a07e		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a080		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; x 10
.a083		68		pla				pla 								; add digit
.a084		18		clc				clc
.a085		75 58		adc $58,x			adc 	NSMantissa0,x
.a087		95 58		sta $58,x			sta 	NSMantissa0,x
.a089		90 0a		bcc $a095			bcc 	_ESTASDExit
.a08b		f6 60		inc $60,x			inc 	NSMantissa1,x
.a08d		d0 06		bne $a095			bne 	_ESTASDExit
.a08f		f6 68		inc $68,x			inc 	NSMantissa2,x
.a091		d0 02		bne $a095			bne 	_ESTASDExit
.a093		f6 70		inc $70,x			inc 	NSMantissa3,x
.a095						_ESTASDExit:
.a095		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a096						EvaluateTerm:
.a096		b1 30		lda ($30),y			lda 	(codePtr),y
.a098		30 18		bmi $a0b2			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a09a		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a09c		b0 6c		bcs $a10a			bcs 	_ETVariable
.a09e		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a0a0		90 6b		bcc $a10d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a0a2		c9 3a		cmp #$3a			cmp 	#'9'+1
.a0a4		b0 67		bcs $a10d			bcs 	_ETPuncUnary
.a0a6		20 8e 9f	jsr $9f8e			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a0a9						_ETNumber:
.a0a9		c8		iny				iny 								; keep encoding until we have the numbers
.a0aa		b1 30		lda ($30),y			lda 	(codePtr),y
.a0ac		20 91 9f	jsr $9f91			jsr 	EncodeNumberContinue
.a0af		b0 f8		bcs $a0a9			bcs 	_ETNumber 					; go back if accepted.
.a0b1		60		rts				rts
.a0b2						_ETCheckUnary:
.a0b2		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a0b4		f0 3f		beq $a0f5			beq 	_ETString
.a0b6		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a0b8		f0 12		beq $a0cc			beq 	_ETHexConstant
.a0ba		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a0bc		90 0b		bcc $a0c9			bcc 	_ETSyntaxError
.a0be		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1
.a0c0		b0 07		bcs $a0c9			bcs 	_ETSyntaxError
.a0c2		da		phx				phx 								; push X on the stack
.a0c3		0a		asl a				asl 	a 							; put vector x 2 into X
.a0c4		aa		tax				tax
.a0c5		c8		iny				iny 								; consume unary function token
.a0c6		7c 1c 94	jmp ($941c,x)			jmp 	(VectorSet0,x) 				; and do it.
.a0c9						_ETSyntaxError:
.a0c9		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.a0cc						_ETHexConstant:
.a0cc		c8		iny				iny 								; skip #
.a0cd		c8		iny				iny 								; skip count
.a0ce		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; clear result
.a0d1						_ETHLoop:
.a0d1		b1 30		lda ($30),y			lda 	(codePtr),y
.a0d3		c8		iny				iny 								; and consume
.a0d4		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a0d6		f0 1c		beq $a0f4			beq 	_ETHExit
.a0d8		48		pha				pha 								; save on stack.
.a0d9		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; x 2
.a0dc		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; x 4
.a0df		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; x 8
.a0e2		20 b1 a6	jsr $a6b1			jsr 	NSMShiftLeft 				; x 16
.a0e5		68		pla				pla 								; ASCII
.a0e6		c9 41		cmp #$41			cmp 	#'A'
.a0e8		90 02		bcc $a0ec			bcc 	_ETHNotChar
.a0ea		e9 07		sbc #$07			sbc 	#7
.a0ec						_ETHNotChar:
.a0ec		29 0f		and #$0f			and 	#15 						; digit now
.a0ee		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a0f0		95 58		sta $58,x			sta 	NSMantissa0,x
.a0f2		80 dd		bra $a0d1			bra 	_ETHLoop 					; go round.
.a0f4						_ETHExit:
.a0f4		60		rts				rts
.a0f5						_ETString:
.a0f5		c8		iny				iny 								; look at length
.a0f6		b1 30		lda ($30),y			lda 	(codePtr),y
.a0f8		48		pha				pha
.a0f9		c8		iny				iny 								; first character
.a0fa		20 e2 b3	jsr $b3e2			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a0fd		68		pla				pla 								; restore count and save
.a0fe		85 36		sta $36				sta 	zTemp0
.a100		98		tya				tya 								; add length to Y to skip it.
.a101		18		clc				clc
.a102		65 36		adc $36				adc 	zTemp0
.a104		a8		tay				tay
.a105		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a107		95 50		sta $50,x			sta 	NSStatus,x
.a109		60		rts				rts
.a10a						_ETVariable:
.a10a		4c 5f a1	jmp $a15f			jmp 	VariableHandler
.a10d						_ETPuncUnary:
.a10d		c8		iny				iny 								; consume the unary character
.a10e		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a110		f0 2b		beq $a13d			beq 	_ETUnaryNegate
.a112		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; @ reference -> constant
.a114		f0 36		beq $a14c			beq 	_ETDereference
.a116		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a118		f0 3e		beq $a158			beq 	_ETParenthesis
.a11a		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a11c		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a11e		f0 06		beq $a126			beq 	_ETIndirection
.a120		e6 36		inc $36				inc 	zTemp0
.a122		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a124		d0 a3		bne $a0c9			bne 	_ETSyntaxError
.a126						_ETIndirection:
.a126		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a128		1a		inc a				inc 	a
.a129		48		pha				pha
.a12a		20 96 a0	jsr $a096			jsr 	EvaluateTerm				; evaluate the term
.a12d		20 0f 9f	jsr $9f0f			jsr 	Dereference 				; dereference it.
.a130		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a132		d0 06		bne $a13a			bne 	_ETTypeMismatch
.a134		68		pla				pla 								; indirection 1-2
.a135		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a137		95 50		sta $50,x			sta 	NSStatus,x
.a139		60		rts				rts
.a13a						_ETTypeMismatch:
.a13a		4c 65 b1	jmp $b165			jmp 	TypeError
.a13d						_ETUnaryNegate:
.a13d		20 96 a0	jsr $a096			jsr 	EvaluateTerm				; evaluate the term
.a140		20 0f 9f	jsr $9f0f			jsr 	Dereference 				; dereference it.
.a143		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a145		29 10		and #$10			and 	#NSTString
.a147		d0 f1		bne $a13a			bne 	_ETTypeMismatch
.a149		4c 64 a6	jmp $a664			jmp 	NSMNegate  					; just toggles the sign bit.
.a14c						_ETDereference:
.a14c		20 96 a0	jsr $a096			jsr 	EvaluateTerm				; evaluate the term
.a14f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a151		29 20		and #$20			and 	#NSBIsReference
.a153		f0 e5		beq $a13a			beq 	_ETTypeMismatch
.a155		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a157		60		rts				rts
.a158						_ETParenthesis:
.a158		20 4c 9c	jsr $9c4c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a15b		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; check for )
.a15e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a15f						VariableHandler:
.a15f		b1 30		lda ($30),y			lda 	(codePtr),y
.a161		18		clc				clc
.a162		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a164		85 37		sta $37				sta 	zTemp0+1
.a166		c8		iny				iny
.a167		b1 30		lda ($30),y			lda 	(codePtr),y
.a169		85 36		sta $36				sta 	zTemp0
.a16b		c8		iny				iny
.a16c		18		clc				clc									; copy variable address+3 to mantissa
.a16d		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a16f		95 58		sta $58,x			sta 	NSMantissa0,x
.a171		a5 37		lda $37				lda 	zTemp0+1
.a173		69 00		adc #$00			adc 	#0
.a175		95 60		sta $60,x			sta 	NSMantissa1,x
.a177		74 68		stz $68,x			stz 	NSMantissa2,x
.a179		74 70		stz $70,x			stz 	NSMantissa3,x
.a17b		74 78		stz $78,x			stz 	NSExponent,x
.a17d		5a		phy				phy
.a17e		a0 02		ldy #$02			ldy 	#2 							; read type
.a180		b1 36		lda ($36),y			lda 	(zTemp0),y
.a182		7a		ply				ply
.a183		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a185		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a187		95 50		sta $50,x			sta 	NSStatus,x
.a189		29 04		and #$04			and 	#NSBIsArray
.a18b		d0 01		bne $a18e			bne 	_VHArray
.a18d		60		rts				rts
.a18e						_VHArray:
.a18e		e8		inx				inx
.a18f		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a192		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a194		95 51		sta $51,x			sta 	NSStatus+1,x
.a196		b1 30		lda ($30),y			lda 	(codePtr),y
.a198		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a19a		d0 06		bne $a1a2			bne 	_VHNoSecondIndex
.a19c		c8		iny				iny 								; skip the comma
.a19d		e8		inx				inx
.a19e		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a1a1		ca		dex				dex
.a1a2						_VHNoSecondIndex:
.a1a2		ca		dex				dex 								; set X back.
.a1a3		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; and check the right bracket.
.a1a6		5a		phy				phy 								; save position
.a1a7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a1a9		85 3e		sta $3e				sta 	zaTemp
.a1ab		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1ad		85 3f		sta $3f				sta 	zaTemp+1
.a1af		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a1b1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1b3		f0 5d		beq $a212			beq 	_VHBadArray
.a1b5		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a1b7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1b9		f0 02		beq $a1bd			beq 	_VHHas2Mask
.a1bb		a9 ff		lda #$ff			lda 	#$FF
.a1bd						_VHHas2Mask:
.a1bd		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a1bf		f0 4c		beq $a20d			beq 	_VHBadIndex
.a1c1		0a		asl a				asl 	a 							; carry will be set if a second index
.a1c2		90 08		bcc $a1cc			bcc 	_VHCheckFirstIndex
.a1c4		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a1c6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1c8		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a1ca		90 41		bcc $a20d			bcc 	_VHBadIndex
.a1cc						_VHCheckFirstIndex:
.a1cc		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a1ce		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1d0		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a1d2		90 39		bcc $a20d			bcc 	_VHBadIndex
.a1d4		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a1d6		64 37		stz $37				stz 	zTemp0+1
.a1d8		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a1da		30 0e		bmi $a1ea			bmi 	_VHNoMultiply
.a1dc		da		phx				phx
.a1dd		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a1df		48		pha				pha
.a1e0		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a1e2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1e4		1a		inc a				inc 	a 							; add 1 for zero base
.a1e5		fa		plx				plx
.a1e6		20 4d a6	jsr $a64d			jsr 	Multiply8x8 				; calculate -> Z0
.a1e9		fa		plx				plx
.a1ea						_VHNoMultiply:
.a1ea		18		clc				clc
.a1eb		a5 36		lda $36				lda 	zTemp0
.a1ed		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a1ef		85 36		sta $36				sta 	zTemp0
.a1f1		a5 37		lda $37				lda 	zTemp0+1
.a1f3		69 00		adc #$00			adc 	#0
.a1f5		85 37		sta $37				sta 	zTemp0+1
.a1f7		b5 50		lda $50,x			lda 	NSStatus,x
.a1f9		20 6a 87	jsr $876a			jsr 	ScaleByBaseType
.a1fc		18		clc				clc
.a1fd		b2 3e		lda ($3e)			lda 	(zaTemp)
.a1ff		65 36		adc $36				adc 	zTemp0
.a201		95 58		sta $58,x			sta 	NSMantissa0,x
.a203		a0 01		ldy #$01			ldy 	#1
.a205		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a207		65 37		adc $37				adc 	zTemp0+1
.a209		95 60		sta $60,x			sta 	NSMantissa1,x
.a20b		7a		ply				ply 								; restore position
.a20c		60		rts				rts
.a20d						_VHBadIndex:
.a20d		a9 17		lda #$17		lda	#23
.a20f		4c 48 97	jmp $9748		jmp	ErrorHandler
.a212						_VHBadArray:
.a212		a9 18		lda #$18		lda	#24
.a214		4c 48 97	jmp $9748		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a217						AbsUnary:
.a217		fa		plx				plx 								; restore stack pos
.a218		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber 				; get a float or int
.a21b		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a21e		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a220		29 7f		and #$7f			and 	#$7F
.a222		95 50		sta $50,x			sta 	NSStatus,x
.a224		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a225						AllocUnary:
.a225		fa		plx				plx 								; restore stack pos
.a226		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger		; get bytes required.
.a229		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a22c		da		phx				phx 								; save X/Y
.a22d		5a		phy				phy
.a22e		8a		txa				txa 								; copy X into Y
.a22f		a8		tay				tay
.a230		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a233		aa		tax				tax
.a234		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a237		20 44 a2	jsr $a244			jsr 	AllocateXABytes 			; allocate memory
.a23a		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a23d		8a		txa				txa 	 							; typing is 16 bit integer.
.a23e		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a241		7a		ply				ply
.a242		fa		plx				plx
.a243		60		rts				rts
.a244						AllocateXABytes:
.a244		5a		phy				phy
.a245		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a248		84 36		sty $36				sty 	zTemp0
.a24a		5a		phy				phy
.a24b		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a24e		84 37		sty $37				sty 	zTemp0+1
.a250		5a		phy				phy
.a251		18		clc				clc 								; add to low memory pointer
.a252		6d 08 04	adc $0408			adc 	lowMemPtr
.a255		8d 08 04	sta $0408			sta 	lowMemPtr
.a258		8a		txa				txa
.a259		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a25c		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a25f		b0 2f		bcs $a290			bcs 	CISSMemory
.a261		20 82 a2	jsr $a282			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a264						_ClearMemory:
.a264		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a267		c5 36		cmp $36				cmp 	zTemp0
.a269		d0 07		bne $a272			bne 	_CMClearNext
.a26b		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a26e		c5 37		cmp $37				cmp 	zTemp0+1
.a270		f0 0c		beq $a27e			beq 	_CMExit
.a272						_CMClearNext:
.a272		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a274		92 36		sta ($36)			sta 	(zTemp0)
.a276		e6 36		inc $36				inc 	zTemp0
.a278		d0 ea		bne $a264			bne 	_ClearMemory
.a27a		e6 37		inc $37				inc		zTemp0+1
.a27c		80 e6		bra $a264			bra 	_ClearMemory
.a27e						_CMExit:
.a27e		fa		plx				plx
.a27f		68		pla				pla
.a280		7a		ply				ply
.a281		60		rts				rts
.a282						CheckIdentifierStringSpace:
.a282		48		pha				pha
.a283		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a286		18		clc				clc
.a287		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a289		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a28c		b0 02		bcs $a290			bcs 	CISSMemory
.a28e		68		pla				pla
.a28f		60		rts				rts
.a290						CISSMemory:
.a290		a9 06		lda #$06		lda	#6
.a292		4c 48 97	jmp $9748		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a295						AscUnary:
.a295		fa		plx				plx 								; restore stack pos
.a296		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; get a string
.a299		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a29b		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte 					; ASC("") will return zero.
.a29e		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a2a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a2a2						FracUnary:
.a2a2		fa		plx				plx 								; restore stack pos
.a2a3		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber 				; get a float or int
.a2a6		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a2a9		b5 50		lda $50,x			lda 	NSStatus,x
.a2ab		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a2ad		f0 04		beq $a2b3			beq 	_IUZero
.a2af		20 5d 9d	jsr $9d5d			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a2b2		60		rts				rts
.a2b3						_IUZero:
.a2b3		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.a2b6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a2b7						IntUnary:
.a2b7		fa		plx				plx 								; restore stack pos
.a2b8		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber 				; get a float or int
.a2bb		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a2be		b5 50		lda $50,x			lda 	NSStatus,x
.a2c0		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a2c2		f0 03		beq $a2c7			beq 	_IUExit
.a2c4		20 b5 9d	jsr $9db5			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a2c7						_IUExit:
.a2c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a2c8						LenUnary:
.a2c8		fa		plx				plx 								; restore stack pos
.a2c9		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; get a string
.a2cc		5a		phy				phy
.a2cd		a0 00		ldy #$00			ldy 	#0 							; find length
.a2cf						_LenFind:
.a2cf		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a2d1		f0 06		beq $a2d9			beq 	_LenExit
.a2d3		c8		iny				iny
.a2d4		d0 f9		bne $a2cf			bne 	_LenFind
.a2d6		4c 60 b1	jmp $b160			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a2d9						_LenExit:
.a2d9		98		tya				tya		 							; return length
.a2da		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.a2dd		7a		ply				ply
.a2de		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a2e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a2e2						Unary_Min:
.a2e2		a9 01		lda #$01			lda 	#1
.a2e4		80 02		bra $a2e8			bra 	UnaryMinMaxMain
.a2e6						Unary_Max:
.a2e6		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a2e8						UnaryMinMaxMain:
.a2e8		fa		plx				plx 								; get index on number stack
.a2e9		48		pha				pha 								; save comparator
.a2ea		20 e7 a5	jsr $a5e7			jsr 	EvaluateValue 				; get the first value.
.a2ed						_UMMMLoop:
.a2ed		b1 30		lda ($30),y			lda 	(codePtr),y
.a2ef		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a2f1		f0 22		beq $a315			beq 	_UMMMDone
.a2f3		20 37 97	jsr $9737			jsr 	CheckComma 					; must be a comma
.a2f6		e8		inx				inx
.a2f7		20 e7 a5	jsr $a5e7			jsr 	EvaluateValue
.a2fa		ca		dex				dex
.a2fb		20 85 a6	jsr $a685			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a2fe		e8		inx				inx
.a2ff		20 85 a6	jsr $a685			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a302		e8		inx				inx
.a303		20 ff 97	jsr $97ff			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a306		ca		dex				dex
.a307		ca		dex				dex
.a308		85 36		sta $36				sta 	zTemp0 						; save required result
.a30a		68		pla				pla 								; get and save comparator
.a30b		48		pha				pha
.a30c		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a30e		d0 dd		bne $a2ed			bne 	_UMMMLoop
.a310		20 18 a3	jsr $a318			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a313		80 d8		bra $a2ed			bra 	_UMMMLoop
.a315						_UMMMDone:
.a315		68		pla				pla 								; throw the comparator
.a316		c8		iny				iny 								; skip )
.a317		60		rts				rts
.a318						ExpCopyAboveDown:
.a318		b5 51		lda $51,x			lda 	NSStatus+1,x
.a31a		95 50		sta $50,x			sta 	NSStatus,x
.a31c		b5 79		lda $79,x			lda 	NSExponent+1,x
.a31e		95 78		sta $78,x			sta 	NSExponent,x
.a320		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a322		95 58		sta $58,x			sta 	NSMantissa0,x
.a324		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a326		95 60		sta $60,x			sta 	NSMantissa1,x
.a328		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a32a		95 68		sta $68,x			sta 	NSMantissa2,x
.a32c		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a32e		95 70		sta $70,x			sta 	NSMantissa3,x
.a330		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a331						Unary_Not:
.a331		fa		plx				plx
.a332		20 0f a6	jsr $a60f			jsr 	EvaluateInteger 			; get integer
.a335		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a338		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; zero mantissa ?
.a33b		f0 04		beq $a341			beq 	_NotZero
.a33d		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.a340		60		rts				rts
.a341						_NotZero:
.a341		4c b5 97	jmp $97b5			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a344						PeekByteUnary:
.a344		a9 01		lda #$01			lda 	#1
.a346		80 0a		bra $a352			bra 	PeekUnary
.a348						PeekWUnary:
.a348		a9 02		lda #$02			lda 	#2
.a34a		80 06		bra $a352			bra 	PeekUnary
.a34c						PeekLUnary:
.a34c		a9 03		lda #$03			lda 	#3
.a34e		80 02		bra $a352			bra 	PeekUnary
.a350						PeekDUnary:
.a350		a9 04		lda #$04			lda 	#4
.a352						PeekUnary:
.a352		fa		plx				plx 								; restore position.
.a353		48		pha				pha 								; save count to copy on stack
.a354		20 22 a6	jsr $a622			jsr		Evaluate16BitInteger 		; address as constant.
.a357		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a35a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a35c		85 36		sta $36				sta 	zTemp0
.a35e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a360		85 37		sta $37				sta 	zTemp0+1
.a362		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; clear the result to zero.
.a365		68		pla				pla 								; count in zTemp2
.a366		85 3a		sta $3a				sta 	zTemp2
.a368		da		phx				phx 								; save stack position and offset of read
.a369		5a		phy				phy
.a36a		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a36c						_PULoop:
.a36c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a36e		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a370		c8		iny				iny 								; next byte to write
.a371		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a372		18		clc				clc
.a373		69 08		adc #$08			adc 	#MathStackSize
.a375		aa		tax				tax
.a376		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a378		d0 f2		bne $a36c			bne 	_PULoop
.a37a		7a		ply				ply 								; restore stack/code pos and exit.
.a37b		fa		plx				plx
.a37c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a37d						SgnUnary:
.a37d		fa		plx				plx 								; restore stack pos
.a37e		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber 				; get a float or int
.a381		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a384		20 c4 a6	jsr $a6c4			jsr 	NSMIsZero 					; if zero
.a387		f0 0e		beq $a397			beq 	_SGZero  					; return Int Zero
.a389		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a38b		48		pha				pha
.a38c		a9 01		lda #$01			lda 	#1 							; set to 1
.a38e		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.a391		68		pla				pla
.a392		29 80		and #$80			and		#$80 						; copy the sign byte out
.a394		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a396		60		rts				rts
.a397		20 a2 a6	jsr $a6a2	_SGZero:jsr 	NSMSetZero
.a39a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a39b						ValUnary:
.a39b		fa		plx				plx 								; restore stack pos
.a39c		20 b1 a3	jsr $a3b1			jsr 	ValMainCode 				; do the main val() code
.a39f		b0 01		bcs $a3a2			bcs 	_VUError 					; couldn't convert
.a3a1		60		rts				rts
.a3a2						_VUError:
.a3a2		4c 65 b1	jmp $b165			jmp 	TypeError
.a3a5						IsValUnary:
.a3a5		fa		plx				plx 								; restore stack pos
.a3a6		20 b1 a3	jsr $a3b1			jsr 	ValMainCode 				; do the main val() code
.a3a9		b0 03		bcs $a3ae			bcs 	_VUBad
.a3ab		4c b5 97	jmp $97b5			jmp 	ReturnTrue
.a3ae						_VUBad:
.a3ae		4c c0 97	jmp $97c0			jmp 	ReturnFalse
.a3b1						ValMainCode:
.a3b1		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; get a string
.a3b4		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; check right bracket present
.a3b7						ValEvaluateZTemp0:
.a3b7		5a		phy				phy
.a3b8		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a3ba		f0 17		beq $a3d3			beq 	_VMCFail2
.a3bc		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a3be		48		pha				pha 								; save first character
.a3bf		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a3c1		d0 01		bne $a3c4			bne 	_VMCStart
.a3c3		c8		iny				iny 								; skip over -
.a3c4						_VMCStart:
.a3c4		38		sec				sec 								; initialise first time round.
.a3c5						_VMCNext:
.a3c5		c8		iny				iny 								; pre-increment
.a3c6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a3c8		f0 0c		beq $a3d6			beq 	_VMCSuccess 				; successful.
.a3ca		20 92 9f	jsr $9f92			jsr 	EncodeNumber 				; send it to the number-builder
.a3cd		90 03		bcc $a3d2			bcc 	_VMCFail 					; if failed, give up.
.a3cf		18		clc				clc 								; next time round, countinue
.a3d0		80 f3		bra $a3c5			bra 	_VMCNext
.a3d2						_VMCFail:
.a3d2		68		pla				pla
.a3d3						_VMCFail2:
.a3d3		7a		ply				ply
.a3d4		38		sec				sec
.a3d5		60		rts				rts
.a3d6						_VMCSuccess:
.a3d6		a9 00		lda #$00			lda 	#0 							; construct final
.a3d8		20 92 9f	jsr $9f92			jsr 	EncodeNumber 				; by sending a duff value.
.a3db		68		pla				pla 								; if it was -ve
.a3dc		c9 2d		cmp #$2d			cmp 	#"-"
.a3de		d0 03		bne $a3e3			bne 	_VMCNotNegative
.a3e0		20 64 a6	jsr $a664			jsr		NSMNegate 					; negate it.
.a3e3						_VMCNotNegative:
.a3e3		7a		ply				ply
.a3e4		18		clc				clc
.a3e5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a3e6						ChrUnary:
.a3e6		fa		plx				plx 								; restore stack pos
.a3e7		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a3ea		48		pha				pha
.a3eb		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a3ee		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a3f0		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate
.a3f3		68		pla				pla 								; write number to it
.a3f4		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.a3f7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a3f8						ItemCountUnary:
.a3f8		fa		plx				plx
.a3f9		20 fa a5	jsr $a5fa			jsr 	EvaluateString
.a3fc		e8		inx				inx
.a3fd		20 70 a4	jsr $a470			jsr 	ICGetSeperator
.a400		ca		dex				dex
.a401		20 91 a4	jsr $a491			jsr 	ICSetPointer 				; zTemp0 = (string)
.a404		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero 					; zero the result.
.a407		5a		phy				phy
.a408		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a40a						_ICULoop:
.a40a		c8		iny				iny
.a40b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a40d		cd 73 07	cmp $0773			cmp 	ICSeperator
.a410		d0 02		bne $a414			bne 	_ICUNoMatch
.a412		f6 58		inc $58,x			inc 	NSMantissa0,x
.a414						_ICUNoMatch:
.a414		c9 00		cmp #$00			cmp 	#0
.a416		d0 f2		bne $a40a			bne 	_ICULoop
.a418		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a41a		7a		ply				ply
.a41b		60		rts				rts
.a41c						ItemGetUnary:
.a41c		fa		plx				plx
.a41d		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; search string
.a420		20 37 97	jsr $9737			jsr 	CheckComma
.a423		e8		inx				inx 								; get count
.a424		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.a427		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a429		f0 61		beq $a48c			beq 	ICGSRange
.a42b		e8		inx				inx 								; get seperator.
.a42c		20 70 a4	jsr $a470			jsr 	ICGetSeperator
.a42f		ca		dex				dex
.a430		ca		dex				dex
.a431		5a		phy				phy
.a432		20 91 a4	jsr $a491			jsr 	ICSetPointer 				; zTemp0 points to string.
.a435		a0 00		ldy #$00			ldy 	#0
.a437		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a439		f0 0e		beq $a449			beq 	_IGUFoundStart
.a43b						_IGUFindNext:
.a43b		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a43d		f0 4d		beq $a48c			beq 	ICGSRange 					; eol, not found.
.a43f		c8		iny				iny
.a440		cd 73 07	cmp $0773			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a443		d0 f6		bne $a43b			bne 	_IGUFindNext
.a445		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a447		d0 f2		bne $a43b			bne 	_IGUFindNext
.a449						_IGUFoundStart:
.a449		84 38		sty $38				sty 	zTemp1 						; save start
.a44b		88		dey				dey
.a44c						_IGUFindLength:
.a44c		c8		iny				iny 								; forward till seperator/EOS
.a44d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a44f		f0 05		beq $a456			beq 	_IGUFoundLength
.a451		cd 73 07	cmp $0773			cmp 	ICSeperator
.a454		d0 f6		bne $a44c			bne 	_IGUFindLength
.a456						_IGUFoundLength:
.a456		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a458		98		tya				tya 								; calculate length of new string.
.a459		38		sec				sec
.a45a		e5 38		sbc $38				sbc 	zTemp1
.a45c		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate 			; allocate bytes for it.
.a45f		a4 38		ldy $38				ldy 	zTemp1
.a461						_IGUCopySub:
.a461		c4 39		cpy $39				cpy 	zTemp1+1
.a463		f0 08		beq $a46d			beq 	_IGUCopyOver
.a465		b1 36		lda ($36),y			lda 	(zTemp0),y
.a467		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.a46a		c8		iny				iny
.a46b		80 f4		bra $a461			bra 	_IGUCopySub
.a46d						_IGUCopyOver:
.a46d		7a		ply				ply
.a46e		60		rts				rts
>a46f		db						.byte 	$DB 						; causes a break in the emulator
.a470						ICGetSeperator:
.a470		20 37 97	jsr $9737			jsr 	CheckComma 					; preceding comma
.a473		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; seperator string
.a476		20 91 a4	jsr $a491			jsr 	ICSetPointer 				; access it
.a479		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a47b		8d 73 07	sta $0773			sta 	ICSeperator
.a47e		f0 0c		beq $a48c			beq 	ICGSRange 					; check LEN(seperator) = 1
.a480		5a		phy				phy
.a481		a0 01		ldy #$01			ldy 	#1
.a483		b1 36		lda ($36),y			lda 	(zTemp0),y
.a485		d0 05		bne $a48c			bne 	ICGSRange
.a487		7a		ply				ply
.a488		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; check following )
.a48b		60		rts				rts
.a48c						ICGSRange:
.a48c		a9 04		lda #$04		lda	#4
.a48e		4c 48 97	jmp $9748		jmp	ErrorHandler
.a491						ICSetPointer:
.a491		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a493		85 36		sta $36				sta 	zTemp0
.a495		b5 60		lda $60,x			lda 	NSMantissa1,x
.a497		85 37		sta $37				sta 	zTemp0+1
.a499		60		rts				rts
.0773						ICSeperator:
>0773								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a49a						SpcUnary:
.a49a		fa		plx				plx 								; restore stack pos
.a49b		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger			; get value
.a49e		5a		phy				phy
.a49f		48		pha				pha 								; save count
.a4a0		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate
.a4a3		7a		ply				ply 								; to do count in Y
.a4a4						_SpcLoop:
.a4a4		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a4a6		f0 08		beq $a4b0			beq 	_SpcExit
.a4a8		a9 20		lda #$20			lda 	#32
.a4aa		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.a4ad		88		dey				dey
.a4ae		80 f4		bra $a4a4			bra 	_SpcLoop
.a4b0						_SpcExit:
.a4b0		7a		ply				ply
.a4b1		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.a4b4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4b5						Unary_Str:
.a4b5		fa		plx				plx
.a4b6		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber  			; get number
.a4b9		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; closing bracket
.a4bc		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a4be		20 d7 a4	jsr $a4d7			jsr 	ConvertNumberToString 		; do the conversion.
.a4c1		a9 21		lda #$21			lda		#33 						; create buffer
.a4c3		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate 			; allocate memory
.a4c6		da		phx				phx  								; copy the converted string into the buffer.
.a4c7		a2 00		ldx #$00			ldx 	#0
.a4c9						_USCopy:
.a4c9		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a4cc		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.a4cf		e8		inx				inx
.a4d0		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a4d3		d0 f4		bne $a4c9			bne 	_USCopy
.a4d5		fa		plx				plx
.a4d6		60		rts				rts
.a4d7						ConvertNumberToString:
.a4d7		5a		phy				phy 								; save code position
.a4d8		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a4db		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a4de		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a4e0		10 09		bpl $a4eb			bpl 	_CNTSNotNegative
.a4e2		29 7f		and #$7f			and 	#$7F 						; make +ve
.a4e4		95 50		sta $50,x			sta 	NSStatus,x
.a4e6		a9 2d		lda #$2d			lda 	#"-"
.a4e8		20 4c a5	jsr $a54c			jsr 	WriteDecimalBuffer
.a4eb						_CNTSNotNegative:
.a4eb		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a4ed		f0 12		beq $a501			beq 	_CNTSNotFloat
.a4ef		e8		inx				inx 								; round up so we don't get too many 6.999999
.a4f0		a9 01		lda #$01			lda 	#1
.a4f2		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.a4f5		ca		dex				dex
.a4f6		b5 78		lda $78,x			lda		NSExponent,x
.a4f8		95 79		sta $79,x			sta 	NSExponent+1,x
.a4fa		a9 08		lda #$08			lda 	#NSTFloat
.a4fc		95 51		sta $51,x			sta 	NSStatus+1,x
.a4fe		20 97 9c	jsr $9c97			jsr 	FloatAdd
.a501						_CNTSNotFloat:
.a501		20 2e a5	jsr $a52e			jsr 	MakePlusTwoString 			; do the integer part.
.a504		20 5d 9d	jsr $9d5d			jsr 	FloatFractionalPart 		; get the fractional part
.a507		20 0e 9e	jsr $9e0e			jsr 	NSNormalise					; normalise , exit if zero
.a50a		f0 20		beq $a52c			beq 	_CNTSExit
.a50c		a9 2e		lda #$2e			lda 	#"."
.a50e		20 4c a5	jsr $a54c			jsr 	WriteDecimalBuffer 			; write decimal place
.a511						_CNTSDecimal:
.a511		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a514		30 16		bmi $a52c			bmi 	_CNTSExit
.a516		e8		inx				inx 								; x 10.0
.a517		a9 0a		lda #$0a			lda 	#10
.a519		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.a51c		a9 08		lda #$08			lda 	#NSTFloat
.a51e		95 50		sta $50,x			sta 	NSStatus,x
.a520		ca		dex				dex
.a521		20 dc 9d	jsr $9ddc			jsr 	FloatMultiply
.a524		20 2e a5	jsr $a52e			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a527		20 5d 9d	jsr $9d5d			jsr 	FloatFractionalPart 		; get the fractional part
.a52a		80 e5		bra $a511			bra 	_CNTSDecimal 				; keep going.
.a52c						_CNTSExit:
.a52c		7a		ply				ply
.a52d		60		rts				rts
.a52e						MakePlusTwoString:
.a52e		da		phx				phx
.a52f		20 85 a6	jsr $a685			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a532		e8		inx				inx 								; access it
.a533		e8		inx				inx
.a534		20 b5 9d	jsr $9db5			jsr 	FloatIntegerPart 			; make it an integer
.a537		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a539		20 c7 9b	jsr $9bc7			jsr 	ConvertInt32
.a53c		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a53e						_MPTSCopy:
.a53e		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a541		20 4c a5	jsr $a54c			jsr 	WriteDecimalBuffer
.a544		e8		inx				inx
.a545		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a548		d0 f4		bne $a53e			bne 	_MPTSCopy
.a54a		fa		plx				plx
.a54b		60		rts				rts
.a54c						WriteDecimalBuffer:
.a54c		da		phx				phx
.a54d		ae 11 04	ldx $0411			ldx 	dbOffset
.a550		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a553		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a556		ee 11 04	inc $0411			inc 	dbOffset
.a559		fa		plx				plx
.a55a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a55b						Unary_Left:
.a55b		fa		plx				plx
.a55c		18		clc				clc 								; only one parameter
.a55d		20 c0 a5	jsr $a5c0			jsr 	SubstringInitial 			; set up.
.a560		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a562		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a564		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a566		80 25		bra $a58d			bra 	SubstringMain
.a568						Unary_Right:
.a568		fa		plx				plx
.a569		18		clc				clc 								; only one parameter
.a56a		20 c0 a5	jsr $a5c0			jsr 	SubstringInitial 			; set up.
.a56d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a56f		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a571		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a573		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a575		b0 02		bcs $a579			bcs 	_URNotUnderflow
.a577		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a579						_URNotUnderflow:
.a579		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a57b		80 10		bra $a58d			bra 	SubstringMain
.a57d						Unary_Mid:
.a57d		fa		plx				plx
.a57e		38		sec				sec 								; two parameters
.a57f		20 c0 a5	jsr $a5c0			jsr 	SubstringInitial 			; set up.
.a582		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a584		f0 04		beq $a58a			beq 	_UMError
.a586		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a588		80 03		bra $a58d			bra 	SubstringMain
.a58a						_UMError:
.a58a		4c 6a b1	jmp $b16a			jmp 	ArgumentError
.a58d						SubstringMain:
.a58d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a58f		d5 78		cmp $78,x			cmp 	NSExponent,x
.a591		b0 27		bcs $a5ba			bcs 	_SSMNull 					; if so, return an empty string.
.a593		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a595		f0 23		beq $a5ba			beq 	_SSMNull 					; return empty string.
.a597		18		clc				clc 								; add the offset +1 to the address and
.a598		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a59a		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a59c		85 36		sta $36				sta 	zTemp0
.a59e		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a5a0		69 00		adc #$00			adc 	#0
.a5a2		85 37		sta $37				sta 	zTemp0+1
.a5a4						_SSMNoCarry:
.a5a4		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5a6		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate 			; allocate that many characters
.a5a9		5a		phy				phy 								; save Y
.a5aa		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5ac						_SSMCopy:
.a5ac		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5ae		f0 08		beq $a5b8			beq 	_SSMEString 				; no more to copy
.a5b0		20 fe b8	jsr $b8fe			jsr 	StringTempWrite 			; and write it out.
.a5b3		c8		iny				iny
.a5b4		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a5b6		d0 f4		bne $a5ac			bne 	_SSMCopy
.a5b8						_SSMEString:
.a5b8		7a		ply				ply
.a5b9						_SSMExit:
.a5b9		60		rts				rts
.a5ba						_SSMNull:
.a5ba		a9 00		lda #$00			lda 	#0
.a5bc		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate
.a5bf		60		rts				rts
.a5c0						SubstringInitial:
.a5c0		da		phx				phx 								; save initial stack position
.a5c1		08		php				php 								; save carry on stack indicating 2 parameters
.a5c2		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; get a string
.a5c5		5a		phy				phy 								; calculate length to exponent.
.a5c6		a0 ff		ldy #$ff			ldy 	#$FF
.a5c8						_SIFindLength:
.a5c8		c8		iny				iny
.a5c9		b1 36		lda ($36),y			lda 	(zTemp0),y
.a5cb		d0 fb		bne $a5c8			bne 	_SIFindLength
.a5cd		98		tya				tya
.a5ce		95 78		sta $78,x			sta 	NSExponent,x
.a5d0		7a		ply				ply
.a5d1		e8		inx				inx
.a5d2		20 37 97	jsr $9737			jsr 	CheckComma 					; comma next
.a5d5		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get next parameter
.a5d8		28		plp				plp 								; is it the last parameter ?
.a5d9		90 07		bcc $a5e2			bcc 	_SSIExit 					; if so, exit.
.a5db		e8		inx				inx
.a5dc		20 37 97	jsr $9737			jsr 	CheckComma 					; comma next
.a5df		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get last parameter
.a5e2						_SSIExit:
.a5e2		fa		plx				plx
.a5e3		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; check closing bracket
.a5e6		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a5e7						EvaluateValue:
.a5e7		48		pha				pha
.a5e8		20 4c 9c	jsr $9c4c			jsr		EvaluateExpression 			; expression
.a5eb		20 0f 9f	jsr $9f0f			jsr 	Dereference					; derefernce it
.a5ee		68		pla				pla
.a5ef		60		rts				rts
.a5f0						EvaluateNumber:
.a5f0		20 e7 a5	jsr $a5e7			jsr 	EvaluateValue 				; get a value
.a5f3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5f5		29 10		and #$10			and 	#NSBIsString
.a5f7		d0 13		bne $a60c			bne 	HelperTypeError
.a5f9		60		rts				rts
.a5fa						EvaluateString:
.a5fa		20 e7 a5	jsr $a5e7			jsr 	EvaluateValue 				; get a value
.a5fd		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a5ff		29 10		and #$10			and 	#NSBIsString
.a601		f0 09		beq $a60c			beq 	HelperTypeError
.a603						CopyAddressToTemp0:
.a603		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a605		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a607		b5 60		lda $60,x			lda 	NSMantissa1,x
.a609		85 37		sta $37				sta 	zTemp0+1
.a60b		60		rts				rts
.a60c						HelperTypeError:
.a60c		4c 65 b1	jmp $b165			jmp 	TypeError
.a60f						EvaluateInteger:
.a60f		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber
.a612		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a614		d0 09		bne $a61f			bne 	HelperValueError 			; if not, it's a float.
.a616		60		rts				rts
.a617						EvaluateUnsignedInteger:
.a617		20 0f a6	jsr $a60f			jsr 	EvaluateInteger 			; check integer is +ve
.a61a		b5 50		lda $50,x			lda 	NSStatus,x
.a61c		30 01		bmi $a61f			bmi 	HelperValueError
.a61e		60		rts				rts
.a61f						HelperValueError:
.a61f		4c 6a b1	jmp $b16a			jmp 	ArgumentError
.a622						Evaluate16BitInteger:
.a622		20 17 a6	jsr $a617			jsr	 	EvaluateUnsignedInteger		; get integer
.a625		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a627		15 68		ora $68,x			ora 	NSMantissa2,x
.a629		d0 f4		bne $a61f			bne 	HelperValueError
.a62b		60		rts				rts
.a62c						Evaluate16BitIntegerSigned:
.a62c		20 0f a6	jsr $a60f			jsr	 	EvaluateInteger				; get integer
.a62f		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a631		15 68		ora $68,x			ora 	NSMantissa2,x
.a633		d0 ea		bne $a61f			bne 	HelperValueError
.a635		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a637		10 03		bpl $a63c			bpl 	_EISNotSigned
.a639		20 6b a6	jsr $a66b			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a63c						_EISNotSigned:
.a63c		60		rts				rts
.a63d						Evaluate8BitInteger:
.a63d		20 17 a6	jsr $a617			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a640		d0 dd		bne $a61f			bne 	HelperValueError
.a642		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a644		15 68		ora $68,x			ora 	NSMantissa2,x
.a646		15 60		ora $60,x			ora 	NSMantissa1,x
.a648		d0 d5		bne $a61f			bne 	HelperValueError
.a64a		b5 58		lda $58,x			lda 	NSMantissa0,x
.a64c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a64d						Multiply8x8:
.a64d		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a64e		85 36		sta $36			  	sta 	zTemp0
.a650		86 37		stx $37				stx 	zTemp0+1
.a652		a9 00		lda #$00			lda 	#0
.a654		a2 08		ldx #$08			ldx 	#8
.a656						_M88Loop:
.a656		90 03		bcc $a65b			bcc 	_M88NoAdd
.a658		18		clc				clc
.a659		65 37		adc $37				adc 	zTemp0+1
.a65b						_M88NoAdd:
.a65b		6a		ror a				ror 	a
.a65c		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a65e		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a65f		d0 f5		bne $a656			bne 	_M88Loop
.a661		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a663		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a664						NSMNegate:
.a664		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a666		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a668		95 50		sta $50,x			sta 	NSStatus,x
.a66a		60		rts				rts
.a66b						NSMNegateMantissa:
.a66b		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a66c		a9 00		lda #$00			lda 	#0
.a66e		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a670		95 58		sta $58,x			sta 	NSMantissa0,x
.a672		a9 00		lda #$00			lda 	#0
.a674		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a676		95 60		sta $60,x			sta 	NSMantissa1,x
.a678		a9 00		lda #$00			lda 	#0
.a67a		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a67c		95 68		sta $68,x			sta 	NSMantissa2,x
.a67e		a9 00		lda #$00			lda 	#0
.a680		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a682		95 70		sta $70,x			sta 	NSMantissa3,x
.a684		60		rts				rts
.a685						NSMShiftUpTwo:
.a685		b5 58		lda $58,x			lda 	NSMantissa0,x
.a687		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a689		b5 60		lda $60,x			lda 	NSMantissa1,x
.a68b		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a68d		b5 68		lda $68,x			lda 	NSMantissa2,x
.a68f		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a691		b5 70		lda $70,x			lda 	NSMantissa3,x
.a693		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a695		b5 78		lda $78,x			lda 	NSExponent,x
.a697		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a699		b5 50		lda $50,x			lda 	NSStatus,x
.a69b		95 52		sta $52,x			sta 	NSStatus+2,x
.a69d		60		rts				rts
.a69e						NSMSetZeroMantissaOnly:
.a69e		a9 00		lda #$00			lda 	#0
.a6a0		80 06		bra $a6a8			bra 	NSMSetMantissa
.a6a2						NSMSetZero:
.a6a2		a9 00		lda #$00			lda 	#0
.a6a4						NSMSetByte:
.a6a4		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a6a6		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a6a8						NSMSetMantissa:
.a6a8		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a6aa		74 60		stz $60,x			stz 	NSMantissa1,x
.a6ac		74 68		stz $68,x			stz 	NSMantissa2,x
.a6ae		74 70		stz $70,x			stz 	NSMantissa3,x
.a6b0		60		rts				rts
.a6b1						NSMShiftLeft:
.a6b1		18		clc				clc
.a6b2						NSMRotateLeft:
.a6b2		36 58		rol $58,x			rol 	NSMantissa0,x
.a6b4		36 60		rol $60,x			rol		NSMantissa1,x
.a6b6		36 68		rol $68,x			rol		NSMantissa2,x
.a6b8		36 70		rol $70,x			rol		NSMantissa3,x
.a6ba		60		rts				rts
.a6bb						NSMShiftRight:
.a6bb		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a6bd		76 68		ror $68,x			ror		NSMantissa2,x
.a6bf		76 60		ror $60,x			ror		NSMantissa1,x
.a6c1		76 58		ror $58,x			ror		NSMantissa0,x
.a6c3		60		rts				rts
.a6c4						NSMIsZero:
.a6c4		b5 70		lda $70,x			lda 	NSMantissa3,x
.a6c6		15 68		ora $68,x			ora		NSMantissa2,x
.a6c8		15 60		ora $60,x			ora		NSMantissa1,x
.a6ca		15 58		ora $58,x			ora		NSMantissa0,x
.a6cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/font_update/newfont.asm

.a6cd						UpdateFont:
.a6cd		a5 01		lda $01				lda 	1 							; save position
.a6cf		48		pha				pha
.a6d0		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a6d2		85 01		sta $01				sta 	1
.a6d4		a9 fb		lda #$fb			lda 	#((FontBinary) & $FF)
.a6d6		85 36		sta $36				sta 	0+zTemp0
.a6d8		a9 a6		lda #$a6			lda 	#((FontBinary) >> 8)
.a6da		85 37		sta $37				sta 	1+zTemp0
.a6dc		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a6de		85 38		sta $38				sta 	0+zTemp1
.a6e0		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a6e2		85 39		sta $39				sta 	1+zTemp1
.a6e4						_UFCopy1:
.a6e4		a0 00		ldy #$00			ldy 	#0
.a6e6						_UFCopy2:
.a6e6		b1 36		lda ($36),y			lda 	(zTemp0),y
.a6e8		91 38		sta ($38),y			sta 	(zTemp1),y
.a6ea		c8		iny				iny
.a6eb		d0 f9		bne $a6e6			bne 	_UFCopy2
.a6ed		e6 37		inc $37				inc 	zTemp0+1
.a6ef		e6 39		inc $39				inc 	zTemp1+1
.a6f1		a5 39		lda $39				lda 	zTemp1+1
.a6f3		c9 c8		cmp #$c8			cmp 	#$C8
.a6f5		d0 ed		bne $a6e4			bne 	_UFCopy1
.a6f7		68		pla				pla 								; restore.
.a6f8		85 01		sta $01				sta 	1
.a6fa		60		rts				rts
.a6fb						FontBinary:
>a6fb		06 09 10 3c 10 21 7e 00				.binary 	"../../common/generated/font.bin"
>a703		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a713		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a723		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a733		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a743		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a753		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a763		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a773		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a783		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a793		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a7a3		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a7b3		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a7c3		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a7d3		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a7e3		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a7f3		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a803		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a813		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a823		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a833		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a843		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a853		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a863		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a873		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a883		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a893		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a8a3		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a8b3		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a8c3		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a8d3		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a8e3		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a8f3		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a903		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a913		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>a923		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a933		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a943		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a953		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a963		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a973		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a983		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a993		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a9a3		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a9b3		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a9c3		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>a9d3		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a9e3		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>a9f3		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aa03		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aa13		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>aa23		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aa33		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aa43		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aa53		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>aa63		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>aa73		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>aa83		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aa93		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aaa3		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>aab3		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>aac3		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>aad3		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>aae3		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>aaf3		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ab03		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ab13		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ab23		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ab33		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ab43		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ab53		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ab63		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ab73		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ab83		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ab93		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>aba3		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>abb3		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>abc3		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>abd3		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>abe3		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>abf3		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ac03		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ac13		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ac23		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ac33		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ac43		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ac53		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ac63		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ac73		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ac83		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ac93		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>aca3		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>acb3		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>acc3		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>acd3		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>ace3		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>acf3		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>ad03		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ad13		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ad23		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ad33		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ad43		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ad53		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>ad63		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ad73		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>ad83		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ad93		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>ada3		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>adb3		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>adc3		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>add3		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>ade3		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>adf3		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>ae03		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>ae13		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>ae23		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ae33		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ae43		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>ae53		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>ae63		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>ae73		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>ae83		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>ae93		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>aea3		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>aeb3		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>aec3		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>aed3		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>aee3		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>aef3		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.aefb						UnaryGetTime:
.aefb		a9 00		lda #$00			lda 	#0
.aefd		80 02		bra $af01			bra 	UGDTMain
.aeff						UnaryGetDate:
.aeff		a9 03		lda #$03			lda 	#3
.af01						UGDTMain:
.af01		fa		plx				plx 								; get stack position back
.af02		48		pha				pha 								; save table offset
.af03		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger			; ignored parameter
.af06		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; closing )
.af09		68		pla				pla 								; table offset in A
.af0a		5a		phy				phy 								; saving Y
.af0b		a8		tay				tay 								; table offset in Y
.af0c		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.af0e		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate
.af11		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.af13		48		pha				pha
.af14		64 01		stz $01				stz 	1
.af16		20 29 af	jsr $af29			jsr 	UGDTDigit 					; do XX:YY:ZZ
.af19		20 24 af	jsr $af24			jsr 	UGDTColonDigit
.af1c		20 24 af	jsr $af24			jsr 	UGDTColonDigit
.af1f		68		pla				pla 								; restore I/O select
.af20		85 01		sta $01				sta 	1
.af22		7a		ply				ply  								; restore code position
.af23		60		rts				rts
.af24						UGDTColonDigit:
.af24		a9 3a		lda #$3a			lda 	#':'
.af26		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.af29						UGDTDigit:
.af29		da		phx				phx 								; save X
.af2a		b9 49 af	lda $af49,y			lda 	RTCROffset,y 				; get offset in RTC register
.af2d		aa		tax				tax
.af2e		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.af31		39 4f af	and $af4f,y			and 	RTCRMask,y 					; and with Mask.
.af34		fa		plx				plx
.af35		48		pha				pha 								; output in BCD
.af36		4a		lsr a				lsr 	a
.af37		4a		lsr a				lsr 	a
.af38		4a		lsr a				lsr 	a
.af39		4a		lsr a				lsr 	a
.af3a		09 30		ora #$30			ora 	#48
.af3c		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.af3f		68		pla				pla
.af40		29 0f		and #$0f			and 	#15
.af42		09 30		ora #$30			ora 	#48
.af44		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.af47		c8		iny				iny
.af48		60		rts				rts
.af49						RTCROffset:
>af49		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.af4f						RTCRMask:
>af4f		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.af55						AscGet:
.af55		fa		plx				plx 								; restore stack pos
.af56						AscGet2:
.af56		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.af59		20 41 81	jsr $8141	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.af5c		d0 0b		bne $af69			bne 	_AGBreak
.af5e		20 73 81	jsr $8173			jsr 	PopKeyboardQueue 			; wait for key.
.af61		c9 00		cmp #$00			cmp 	#0
.af63		f0 f4		beq $af59			beq 	_AGKey
.af65		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.af68		60		rts				rts
.af69						_AGBreak:
.af69		a9 01		lda #$01		lda	#1
.af6b		4c 48 97	jmp $9748		jmp	ErrorHandler
.af6e						AscInkey:
.af6e		fa		plx				plx 								; restore stack pos
.af6f						AscInkey2:
.af6f		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.af72		20 73 81	jsr $8173			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.af75		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte
.af78		60		rts				rts
.af79						ChrGet:
.af79		fa		plx				plx
.af7a		20 56 af	jsr $af56			jsr 	AscGet2
.af7d		4c 84 af	jmp $af84			jmp 	GetInkeyToString
.af80						ChrInkey:
.af80		fa		plx				plx
.af81		20 6f af	jsr $af6f			jsr 	AscInkey2
.af84						GetInkeyToString:
.af84		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.af86		f0 0b		beq $af93			beq 	_GKISNull
.af88		48		pha				pha
.af89		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.af8b		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate
.af8e		68		pla				pla 								; write number to it
.af8f		20 fe b8	jsr $b8fe			jsr 	StringTempWrite
.af92		60		rts				rts
.af93						_GKISNull:
.af93		a9 00		lda #$00			lda 	#0
.af95		20 c5 b8	jsr $b8c5			jsr 	StringTempAllocate
.af98		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.af99						Unary_Random:
.af99		fa		plx				plx
.af9a		20 ea af	jsr $afea			jsr 	URCopyToMantissa  			; put random # in mantissa
.af9d		b1 30		lda ($30),y			lda 	(codePtr),y
.af9f		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.afa1		f0 08		beq $afab			beq 	_URNoModulus 				; then we return a random 30 bit number.
.afa3		e8		inx				inx
.afa4		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.afa7		ca		dex				dex
.afa8		20 07 99	jsr $9907			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.afab						_URNoModulus:
.afab		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.afad		74 78		stz $78,x			stz 	NSExponent,x
.afaf		20 2f 97	jsr $972f			jsr 	CheckRightBracket
.afb2		60		rts				rts
.afb3						Unary_Rnd:
.afb3		fa		plx				plx
.afb4		20 f0 a5	jsr $a5f0			jsr 	EvaluateNumber 				; number to use.
.afb7		20 2f 97	jsr $972f			jsr 	CheckRightBracket 			; closing bracket
.afba		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.afbc		10 20		bpl $afde			bpl 	_URDontSeed
.afbe		a5 01		lda $01				lda 	1 							; switch to page 0
.afc0		48		pha				pha
.afc1		64 01		stz $01				stz 	1
.afc3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.afc5		49 17		eor #$17			eor 	#$17
.afc7		8d a4 d6	sta $d6a4			sta 	$D6A4
.afca		b5 60		lda $60,x			lda 	NSMantissa1,x
.afcc		49 a5		eor #$a5			eor 	#$A5
.afce		8d a5 d6	sta $d6a5			sta 	$D6A5
.afd1		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.afd3		8d a6 d6	sta $d6a6			sta 	$D6A6
.afd6		a9 01		lda #$01			lda 	#1
.afd8		8d a6 d6	sta $d6a6			sta 	$D6A6
.afdb		68		pla				pla
.afdc		85 01		sta $01				sta 	1
.afde						_URDontSeed:
.afde		20 ea af	jsr $afea			jsr 	URCopyToMantissa 			; copy into mantissa
.afe1		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.afe3		95 78		sta $78,x			sta 	NSExponent,x
.afe5		a9 08		lda #$08			lda 	#NSTFloat
.afe7		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.afe9		60		rts				rts
.afea						URCopyToMantissa:
.afea		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.afec		48		pha				pha
.afed		64 01		stz $01				stz 	1
.afef		a9 01		lda #$01			lda 	#1
.aff1		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.aff4		ad a4 d6	lda $d6a4			lda 	$D6A4
.aff7		95 58		sta $58,x			sta 	NSMantissa0,x
.aff9		ad a5 d6	lda $d6a5			lda 	$D6A5
.affc		95 60		sta $60,x			sta 	NSMantissa1,x
.affe		ad a4 d6	lda $d6a4			lda 	$D6A4
.b001		95 68		sta $68,x			sta 	NSMantissa2,x
.b003		ad a5 d6	lda $d6a5			lda 	$D6A5
.b006		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b008		95 70		sta $70,x			sta 	NSMantissa3,x
.b00a		68		pla				pla
.b00b		85 01		sta $01				sta 	1
.b00d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b00e						Assemble_ora:
.b00e		20 96 82	jsr $8296		jsr	AssembleGroup1
>b011		01					.byte $01
.b012						Assemble_and:
.b012		20 96 82	jsr $8296		jsr	AssembleGroup1
>b015		21					.byte $21
.b016						Assemble_eor:
.b016		20 96 82	jsr $8296		jsr	AssembleGroup1
>b019		41					.byte $41
.b01a						Assemble_adc:
.b01a		20 96 82	jsr $8296		jsr	AssembleGroup1
>b01d		61					.byte $61
.b01e						Assemble_sta:
.b01e		20 96 82	jsr $8296		jsr	AssembleGroup1
>b021		81					.byte $81
.b022						Assemble_lda:
.b022		20 96 82	jsr $8296		jsr	AssembleGroup1
>b025		a1					.byte $a1
.b026						Assemble_cmp:
.b026		20 96 82	jsr $8296		jsr	AssembleGroup1
>b029		c1					.byte $c1
.b02a						Assemble_sbc:
.b02a		20 96 82	jsr $8296		jsr	AssembleGroup1
>b02d		e1					.byte $e1
.b02e						Assemble_asl:
.b02e		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b031		02					.byte $02
>b032		75					.byte $75
.b033						Assemble_rol:
.b033		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b036		22					.byte $22
>b037		75					.byte $75
.b038						Assemble_lsr:
.b038		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b03b		42					.byte $42
>b03c		75					.byte $75
.b03d						Assemble_ror:
.b03d		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b040		62					.byte $62
>b041		75					.byte $75
.b042						Assemble_stx:
.b042		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b045		82					.byte $82
>b046		50					.byte $50
.b047						Assemble_ldx:
.b047		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b04a		a2					.byte $a2
>b04b		d0					.byte $d0
.b04c						Assemble_dec:
.b04c		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b04f		c2					.byte $c2
>b050		55					.byte $55
.b051						Assemble_inc:
.b051		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b054		e2					.byte $e2
>b055		55					.byte $55
.b056						Assemble_stz:
.b056		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b059		60					.byte $60
>b05a		44					.byte $44
.b05b						Assemble_bit:
.b05b		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b05e		20					.byte $20
>b05f		55					.byte $55
.b060						Assemble_sty:
.b060		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b063		80					.byte $80
>b064		54					.byte $54
.b065						Assemble_ldy:
.b065		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b068		a0					.byte $a0
>b069		d5					.byte $d5
.b06a						Assemble_cpy:
.b06a		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b06d		c0					.byte $c0
>b06e		d4					.byte $d4
.b06f						Assemble_cpx:
.b06f		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b072		e0					.byte $e0
>b073		d0					.byte $d0
.b074						Assemble_tsb:
.b074		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b077		00					.byte $00
>b078		50					.byte $50
.b079						Assemble_trb:
.b079		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b07c		10					.byte $10
>b07d		50					.byte $50
.b07e						Assemble_jsr:
.b07e		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b081		14					.byte $14
>b082		10					.byte $10
.b083						Assemble_jmp:
.b083		20 9d 82	jsr $829d		jsr	AssembleGroup2
>b086		40					.byte $40
>b087		10					.byte $10
.b088						Assemble_bpl:
.b088		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b08b		10					.byte $10
.b08c						Assemble_bmi:
.b08c		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b08f		30					.byte $30
.b090						Assemble_bvc:
.b090		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b093		50					.byte $50
.b094						Assemble_bvs:
.b094		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b097		70					.byte $70
.b098						Assemble_bcc:
.b098		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b09b		90					.byte $90
.b09c						Assemble_bcs:
.b09c		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b09f		b0					.byte $b0
.b0a0						Assemble_bne:
.b0a0		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b0a3		d0					.byte $d0
.b0a4						Assemble_beq:
.b0a4		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b0a7		f0					.byte $f0
.b0a8						Assemble_bra:
.b0a8		20 ee 82	jsr $82ee		jsr	AssembleGroup3
>b0ab		80					.byte $80
.b0ac						Assemble_brk:
.b0ac		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0af		00					.byte $00
.b0b0						Assemble_php:
.b0b0		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0b3		08					.byte $08
.b0b4						Assemble_clc:
.b0b4		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0b7		18					.byte $18
.b0b8						Assemble_plp:
.b0b8		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0bb		28					.byte $28
.b0bc						Assemble_sec:
.b0bc		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0bf		38					.byte $38
.b0c0						Assemble_rti:
.b0c0		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0c3		40					.byte $40
.b0c4						Assemble_pha:
.b0c4		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0c7		48					.byte $48
.b0c8						Assemble_cli:
.b0c8		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0cb		58					.byte $58
.b0cc						Assemble_phy:
.b0cc		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0cf		5a					.byte $5a
.b0d0						Assemble_rts:
.b0d0		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0d3		60					.byte $60
.b0d4						Assemble_pla:
.b0d4		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0d7		68					.byte $68
.b0d8						Assemble_sei:
.b0d8		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0db		78					.byte $78
.b0dc						Assemble_ply:
.b0dc		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0df		7a					.byte $7a
.b0e0						Assemble_dey:
.b0e0		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0e3		88					.byte $88
.b0e4						Assemble_txa:
.b0e4		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0e7		8a					.byte $8a
.b0e8						Assemble_tya:
.b0e8		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0eb		98					.byte $98
.b0ec						Assemble_txs:
.b0ec		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0ef		9a					.byte $9a
.b0f0						Assemble_tay:
.b0f0		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0f3		a8					.byte $a8
.b0f4						Assemble_tax:
.b0f4		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0f7		aa					.byte $aa
.b0f8						Assemble_clv:
.b0f8		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0fb		b8					.byte $b8
.b0fc						Assemble_tsx:
.b0fc		20 22 83	jsr $8322		jsr	AssembleGroup4
>b0ff		ba					.byte $ba
.b100						Assemble_iny:
.b100		20 22 83	jsr $8322		jsr	AssembleGroup4
>b103		c8					.byte $c8
.b104						Assemble_dex:
.b104		20 22 83	jsr $8322		jsr	AssembleGroup4
>b107		ca					.byte $ca
.b108						Assemble_cld:
.b108		20 22 83	jsr $8322		jsr	AssembleGroup4
>b10b		d8					.byte $d8
.b10c						Assemble_phx:
.b10c		20 22 83	jsr $8322		jsr	AssembleGroup4
>b10f		da					.byte $da
.b110						Assemble_stp:
.b110		20 22 83	jsr $8322		jsr	AssembleGroup4
>b113		db					.byte $db
.b114						Assemble_inx:
.b114		20 22 83	jsr $8322		jsr	AssembleGroup4
>b117		e8					.byte $e8
.b118						Assemble_nop:
.b118		20 22 83	jsr $8322		jsr	AssembleGroup4
>b11b		ea					.byte $ea
.b11c						Assemble_sed:
.b11c		20 22 83	jsr $8322		jsr	AssembleGroup4
>b11f		f8					.byte $f8
.b120						Assemble_plx:
.b120		20 22 83	jsr $8322		jsr	AssembleGroup4
>b123		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b124						DecimalScalarTable:
>b124		66 66 66 66				.dword $66666666 ; 0.1
>b128		de					.byte $de
>b129		1f 85 eb 51				.dword $51eb851f ; 0.01
>b12d		db					.byte $db
>b12e		4c 37 89 41				.dword $4189374c ; 0.001
>b132		d8					.byte $d8
>b133		ac 8b db 68				.dword $68db8bac ; 0.0001
>b137		d4					.byte $d4
>b138		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b13c		d1					.byte $d1
>b13d		83 de 1b 43				.dword $431bde83 ; 1e-06
>b141		ce					.byte $ce
>b142		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b146		ca					.byte $ca
>b147		89 3b e6 55				.dword $55e63b89 ; 1e-08
>b14b		c7					.byte $c7
>b14c		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b150		c4					.byte $c4
>b151		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b155		c0					.byte $c0
>b156		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b15a		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b15b						SyntaxError:
.b15b		a9 02		lda #$02		lda	#2
.b15d		4c 48 97	jmp $9748		jmp	ErrorHandler
.b160						RangeError:
.b160		a9 04		lda #$04		lda	#4
.b162		4c 48 97	jmp $9748		jmp	ErrorHandler
.b165						TypeError:
.b165		a9 05		lda #$05		lda	#5
.b167		4c 48 97	jmp $9748		jmp	ErrorHandler
.b16a						ArgumentError:
.b16a		a9 07		lda #$07		lda	#7
.b16c		4c 48 97	jmp $9748		jmp	ErrorHandler
.b16f						NotDoneError:
.b16f		a9 0c		lda #$0c		lda	#12
.b171		4c 48 97	jmp $9748		jmp	ErrorHandler
.b174						ErrorText:
>b174		42 72 65 61 6b 00			.text	"Break",0
>b17a		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b182		72 72 6f 72 00
>b187		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b18f		20 62 79 20 7a 65 72 6f 00
>b198		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b1a0		61 6e 67 65 00
>b1a5		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b1ad		6d 61 74 63 68 00
>b1b3		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b1bb		65 6d 6f 72 79 00
>b1c1		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b1c9		61 72 67 75 6d 65 6e 74 00
>b1d2		53 74 6f 70 00				.text	"Stop",0
>b1d7		53 74 72 69 6e 67 20 74			.text	"String too long",0
>b1df		6f 6f 20 6c 6f 6e 67 00
>b1e7		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b1ef		6e 20 66 61 69 6c 65 64 00
>b1f8		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b200		61 74 61 00
>b204		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b20c		65 6e 74 65 64 00
>b212		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b21a		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b226		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b22e		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b23b		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b243		74 68 6f 75 74 20 52 65 70 65 61 74 00
>b250		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b258		68 6f 75 74 20 57 68 69 6c 65 00
>b263		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b26b		68 6f 75 74 20 46 6f 72 00
>b274		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b27c		61 63 6b 20 66 75 6c 6c 00
>b285		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b28d		75 63 74 75 72 65 00
>b294		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b29c		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b2a9		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b2b1		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b2bf		41 72 72 61 79 20 73 69			.text	"Array size",0
>b2c7		7a 65 00
>b2ca		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b2d2		79 20 69 6e 64 65 78 00
>b2da		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>b2e2		74 20 64 65 63 6c 61 72 65 64 00
>b2ed		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>b2f5		20 66 6f 75 6e 64 00
>b2fc		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>b304		65 72 72 6f 72 00
>b30a		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>b312		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc77		09 09 32 30 2f 30 31 2f			.text 9,9,"20/01/23 32"
>dc7f		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.b318						MemoryDeleteLine:
.b318		20 37 b3	jsr $b337			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b31b		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b31d		a8		tay				tay
.b31e						_MDDLLoop:
.b31e		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b320		92 30		sta ($30)			sta 	(codePtr)
.b322		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b324		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.b326		d0 07		bne $b32f			bne 	_MDLDLNext
.b328		a5 31		lda $31				lda 	codePtr+1
.b32a		c5 3b		cmp $3b				cmp 	zTemp2+1
.b32c		d0 01		bne $b32f			bne 	_MDLDLNext
.b32e						_MDDLExit:
.b32e		60		rts				rts
.b32f						_MDLDLNext:
.b32f		e6 30		inc $30				inc 	codePtr						; next byte
.b331		d0 eb		bne $b31e			bne 	_MDDLLoop
.b333		e6 31		inc $31				inc 	codePtr+1
.b335		80 e7		bra $b31e			bra 	_MDDLLoop
.b337						IMemoryFindEnd:
.b337		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b339		85 3a		sta $3a				sta 	0+zTemp2
.b33b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b33d		85 3b		sta $3b				sta 	1+zTemp2
.b33f						_MDLFELoop:
.b33f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.b341		f0 0b		beq $b34e			beq 	_MDLFEExit
.b343		18		clc				clc
.b344		65 3a		adc $3a				adc 	zTemp2
.b346		85 3a		sta $3a				sta 	zTemp2
.b348		90 f5		bcc $b33f			bcc 	_MDLFELoop
.b34a		e6 3b		inc $3b				inc 	zTemp2+1
.b34c		80 f1		bra $b33f			bra 	_MDLFELoop
.b34e						_MDLFEExit:
.b34e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.b34f						MemoryInsertLine:
.b34f		08		php				php
.b350		20 37 b3	jsr $b337			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b353		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.b355		1a		inc a				inc 	a
.b356		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b358		b0 36		bcs $b390			bcs 	_MDLIError 					; no, fail.
.b35a		28		plp				plp 								; do at a specific point or the end ?
.b35b		90 08		bcc $b365			bcc 	_MDLIFound 					; if specific point already set.
.b35d		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.b35f		85 30		sta $30				sta 	codePtr 					; end.
.b361		a5 3b		lda $3b				lda 	zTemp2+1
.b363		85 31		sta $31				sta 	codePtr+1
.b365						_MDLIFound:
.b365		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b368		a8		tay				tay
.b369						_MDLIInsert:
.b369		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.b36b		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b36d		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.b36f		c5 3a		cmp $3a				cmp 	zTemp2
.b371		d0 06		bne $b379			bne 	_MDLINext
.b373		a5 31		lda $31				lda 	codePtr+1
.b375		c5 3b		cmp $3b				cmp 	zTemp2+1
.b377		f0 0a		beq $b383			beq 	_MDLIHaveSpace
.b379						_MDLINext:
.b379		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.b37b		d0 02		bne $b37f			bne 	_MDLINoBorrow
.b37d		c6 3b		dec $3b				dec 	zTemp2+1
.b37f						_MDLINoBorrow:
.b37f		c6 3a		dec $3a				dec 	zTemp2
.b381		80 e6		bra $b369			bra 	_MDLIInsert
.b383						_MDLIHaveSpace:
.b383		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.b386		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.b387						_MDLICopy:
.b387		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.b38a		91 30		sta ($30),y			sta 	(codePtr),y
.b38c		88		dey				dey
.b38d		10 f8		bpl $b387			bpl 	_MDLICopy
.b38f		60		rts				rts
.b390						_MDLIError:
.b390		a9 06		lda #$06		lda	#6
.b392		4c 48 97	jmp $9748		jmp	ErrorHandler
.b395						MDLAppendLine:
.b395		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b397		85 36		sta $36				sta 	zTemp0
.b399		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b39b		85 38		sta $38				sta 	0+zTemp1
.b39d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b39f		85 39		sta $39				sta 	1+zTemp1
.b3a1		b2 38		lda ($38)			lda 	(zTemp1)
.b3a3		d0 0a		bne $b3af			bne 	_MDLANoInitialise
.b3a5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3a7		8d 74 07	sta $0774			sta 	0+AppendPointer
.b3aa		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3ac		8d 75 07	sta $0775			sta 	1+AppendPointer
.b3af						_MDLANoInitialise:
.b3af		18		clc				clc
.b3b0		ad 74 07	lda $0774			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b3b3		85 38		sta $38				sta 	zTemp1
.b3b5		72 36		adc ($36)			adc 	(zTemp0)
.b3b7		8d 74 07	sta $0774			sta 	AppendPointer
.b3ba		ad 75 07	lda $0775			lda 	AppendPointer+1
.b3bd		85 39		sta $39				sta 	zTemp1+1
.b3bf		69 00		adc #$00			adc 	#0
.b3c1		8d 75 07	sta $0775			sta 	AppendPointer+1
.b3c4		a0 00		ldy #$00			ldy 	#0
.b3c6						_MDLACopy:
.b3c6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b3c8		91 38		sta ($38),y			sta 	(zTemp1),y
.b3ca		c8		iny				iny
.b3cb		98		tya				tya
.b3cc		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b3ce		d0 f6		bne $b3c6			bne 	_MDLACopy
.b3d0		a9 00		lda #$00			lda 	#0 							; end of program.
.b3d2		91 38		sta ($38),y			sta 	(zTemp1),y
.b3d4		60		rts				rts
.0774						AppendPointer:
>0774								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.b3d5						MemoryNew:
.b3d5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3d7		85 30		sta $30				sta 	codePtr
.b3d9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3db		85 31		sta $31				sta 	codePtr+1
.b3dd		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.b3df		92 30		sta ($30)			sta 	(codePtr)
.b3e1		60		rts				rts
.b3e2						MemoryInline:
.b3e2		98		tya				tya 								; put address into stack,x
.b3e3		18		clc				clc  								; get the offset, add codePtr
.b3e4		65 30		adc $30				adc 	codePtr
.b3e6		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.b3e8		a5 31		lda $31				lda 	codePtr+1
.b3ea		69 00		adc #$00			adc 	#0
.b3ec		95 60		sta $60,x			sta 	NSMantissa1,x
.b3ee		74 68		stz $68,x			stz 	NSMantissa2,x
.b3f0		74 70		stz $70,x			stz 	NSMantissa3,x
.b3f2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.b3f3						MemorySearch:
.b3f3		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.b3f5		86 37		stx $37				stx 	zTemp0+1
.b3f7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3f9		85 30		sta $30				sta 	codePtr
.b3fb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3fd		85 31		sta $31				sta 	codePtr+1
.b3ff						_MTAXLoop:
.b3ff		b2 30		lda ($30)			lda 	(codePtr)
.b401		18		clc				clc
.b402		f0 21		beq $b425			beq 	_MTAXExit 					; reached end, exit with CC.
.b404		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.b406		b1 30		lda ($30),y			lda 	(codePtr),y
.b408		38		sec				sec
.b409		e5 36		sbc $36				sbc 	zTemp0
.b40b		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.b40d		c8		iny				iny 								; do the MSB
.b40e		b1 30		lda ($30),y			lda 	(codePtr),y
.b410		e5 37		sbc $37				sbc 	zTemp0+1
.b412		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.b414		f0 0f		beq $b425			beq 	_MTAXExit	 				; found so exit (CS will be set)
.b416		b0 0d		bcs $b425			bcs 	_MTAXExit 					; current < required exit
.b418		18		clc				clc
.b419		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b41b		65 30		adc $30				adc 	codePtr
.b41d		85 30		sta $30				sta 	codePtr
.b41f		90 02		bcc $b423			bcc 	_CREExit
.b421		e6 31		inc $31				inc 	codePtr+1 					; carry
.b423						_CREExit:
.b423		80 da		bra $b3ff			bra 	_MTAXLoop
.b425						_MTAXExit:
.b425		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.b426						RectangleCommand:
.b426		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.b428		80 02		bra $b42c			bra 	ShapeDrawCmd
.b42a						CircleCommand:
.b42a		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.b42c						ShapeDrawCmd:
.b42c		20 b6 b4	jsr $b4b6			jsr 	RunGraphicsCommand
.b42f						ShapeDraw:
.b42f		0d 77 07	ora $0777			ora 	gxFillSolid  				; adjust AXY for solid fill.
.b432		4c aa b4	jmp $b4aa			jmp 	ExecuteGraphicCommand	 	; and complete
.b435						SpriteCommand:
.b435		a2 00		ldx #$00			ldx 	#0
.b437		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get image number.
.b43a		5a		phy				phy
.b43b		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.b43d		a6 58		ldx $58				ldx 	NSMantissa0
.b43f		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.b441		b0 0d		bcs $b450			bcs 	_SCRange
.b443		a0 ff		ldy #$ff			ldy 	#255
.b445		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b448		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.b44a		7a		ply				ply
.b44b		20 b6 b4	jsr $b4b6			jsr 	RunGraphicsCommand
.b44e		80 5a		bra $b4aa			bra 	ExecuteGraphicCommand
.b450						_SCRange:
.b450		4c 60 b1	jmp $b160			jmp 	RangeError
.b453						ImageCommand:
.b453		a2 00		ldx #$00			ldx 	#0
.b455		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get image number.
.b458		20 b6 b4	jsr $b4b6			jsr 	RunGraphicsCommand
.b45b						ImageRunDraw:
.b45b		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.b45d		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b460		ad 7d 07	lda $077d			lda 	gxDrawScale
.b463		0a		asl a				asl 	a
.b464		0a		asl a				asl 	a
.b465		0a		asl a				asl 	a
.b466		a8		tay				tay
.b467		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.b469		a6 58		ldx $58				ldx 	NSMantissa0
.b46b		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b46e		60		rts				rts
.b46f						TextCommand:
.b46f		a2 00		ldx #$00			ldx 	#0
.b471		20 fa a5	jsr $a5fa			jsr 	EvaluateString 				; get text
.b474		20 b6 b4	jsr $b4b6			jsr 	RunGraphicsCommand
.b477						TextRunDraw:
.b477		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.b479		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b47c		a0 00		ldy #$00			ldy 	#0
.b47e						_IRDLoop:
.b47e		a5 60		lda $60				lda 	NSMantissa1 				; access character
.b480		85 37		sta $37				sta 	zTemp0+1
.b482		a5 58		lda $58				lda 	NSMantissa0
.b484		85 36		sta $36				sta 	zTemp0
.b486		b1 36		lda ($36),y			lda 	(zTemp0),y
.b488		f0 13		beq $b49d			beq 	_IRDExit
.b48a		5a		phy				phy									; save string pos
.b48b		48		pha				pha 								; save char
.b48c		ad 7d 07	lda $077d			lda 	gxDrawScale 				; get scale
.b48f		0a		asl a				asl 	a
.b490		0a		asl a				asl 	a
.b491		0a		asl a				asl 	a
.b492		a8		tay				tay
.b493		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.b495		fa		plx				plx 								; char to draw
.b496		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b499		7a		ply				ply 								; restore string pos
.b49a		c8		iny				iny
.b49b		90 e1		bcc $b47e			bcc 	_IRDLoop 					; go back if no error.
.b49d						_IRDExit:
.b49d		60		rts				rts
.b49e						PlotCommand:
.b49e		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.b4a0		20 b6 b4	jsr $b4b6			jsr 	RunGraphicsCommand
.b4a3		80 05		bra $b4aa			bra 	ExecuteGraphicCommand
.b4a5						LineCommand:
.b4a5		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.b4a7		20 b6 b4	jsr $b4b6			jsr 	RunGraphicsCommand
.b4aa						ExecuteGraphicCommand:
.b4aa		0d 76 07	ora $0776			ora 	gxCommandID 				; make a full command
.b4ad		20 75 80	jsr $8075			jsr 	GXGraphicDraw 				; draw it and exit
.b4b0		b0 01		bcs $b4b3			bcs 	_EGCError
.b4b2		60		rts				rts
.b4b3						_EGCError:
.b4b3		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.b4b6						RunGraphicsCommand:
.b4b6		8d 76 07	sta $0776			sta 	gxCommandID					; save TODO graphics command.
.b4b9		68		pla				pla 								; pop handler address
.b4ba		fa		plx				plx
.b4bb		1a		inc a				inc 	a
.b4bc		d0 01		bne $b4bf			bne 	_RGINoCarry
.b4be		e8		inx				inx
.b4bf						_RGINoCarry:
.b4bf		8d 7b 07	sta $077b			sta 	gxHandler
.b4c2		8e 7c 07	stx $077c			stx 	gxHandler+1
.b4c5						_RGICommandLoop:
.b4c5		b1 30		lda ($30),y			lda 	(codePtr),y
.b4c7		c8		iny				iny
.b4c8		c9 da		cmp #$da			cmp 	#KWD_TO						; is it TO x,y
.b4ca		f0 53		beq $b51f			beq 	_RGI_To
.b4cc		c9 c4		cmp #$c4			cmp 	#KWD_HERE 					; do it here.
.b4ce		f0 55		beq $b525			beq 	_RGI_Here
.b4d0		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.b4d2		f0 3d		beq $b511			beq 	_RGI_Exit
.b4d4		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.b4d6		f0 39		beq $b511			beq 	_RGI_Exit
.b4d8		c9 cc		cmp #$cc			cmp 	#KWD_OUTLINE 				; solid or outline
.b4da		f0 3e		beq $b51a			beq 	_RGI_Frame
.b4dc		c9 d6		cmp #$d6			cmp 	#KWD_SOLID
.b4de		f0 33		beq $b513			beq 	_RGI_Solid
.b4e0		c9 b8		cmp #$b8			cmp 	#KWD_BY 					; by offset
.b4e2		f0 4b		beq $b52f			beq 	_RGI_By
.b4e4		c9 c2		cmp #$c2			cmp 	#KWD_FROM 					; from
.b4e6		f0 17		beq $b4ff			beq 	_RGI_Move2
.b4e8		c9 bf		cmp #$bf			cmp 	#KWD_DIM 					; dim (set scale)
.b4ea		f0 62		beq $b54e			beq 	_RGI_Dim
.b4ec		c9 bd		cmp #$bd			cmp 	#KWD_COLOUR 				; colour or Color
.b4ee		f0 74		beq $b564			beq 	_RGI_Colour
.b4f0		c9 bc		cmp #$bc			cmp 	#KWD_COLOR
.b4f2		f0 70		beq $b564			beq 	_RGI_Colour
.b4f4		ae 76 07	ldx $0776			ldx 	gxCommandID
.b4f7		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.b4f9		d0 03		bne $b4fe			bne 	_RGI_Move 					; move
.b4fb		4c 8c b5	jmp $b58c			jmp		_RGI_SpriteInstructions
.b4fe						_RGI_Move:
.b4fe		88		dey				dey 								; unpick get.
.b4ff						_RGI_Move2:
.b4ff		20 b2 b5	jsr $b5b2			jsr 	GCGetCoordinatePair 		; move to here
.b502		20 d9 b5	jsr $b5d9			jsr 	GCCopyPairToStore 			; save
.b505		5a		phy				phy
.b506		20 cf b5	jsr $b5cf			jsr 	GCLoadAXY 					; load in
.b509		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.b50b		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b50e		7a		ply				ply
.b50f		80 b4		bra $b4c5			bra 	_RGICommandLoop 			; and go round
.b511						_RGI_Exit:
.b511		88		dey				dey 								; unpick : / EOL
.b512		60		rts				rts
.b513						_RGI_Solid:
.b513		a9 02		lda #$02			lda 	#2
.b515		8d 77 07	sta $0777			sta 	gxFillSolid
.b518		80 ab		bra $b4c5			bra 	_RGICommandLoop
.b51a						_RGI_Frame:
.b51a		9c 77 07	stz $0777			stz 	gxFillSolid
.b51d		80 a6		bra $b4c5			bra 	_RGICommandLoop
.b51f						_RGI_To:
.b51f		20 b2 b5	jsr $b5b2			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.b522		20 d9 b5	jsr $b5d9			jsr 	GCCopyPairToStore
.b525						_RGI_Here:
.b525		5a		phy				phy
.b526		20 cf b5	jsr $b5cf			jsr 	GCLoadAXY 					; load it into AXY
.b529		20 89 b5	jsr $b589			jsr 	_RGICallHandler 			; go do whatever it is.
.b52c		7a		ply				ply
.b52d		80 96		bra $b4c5			bra 	_RGICommandLoop 			; and go round
.b52f						_RGI_By:
.b52f		20 bf b5	jsr $b5bf			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.b532		18		clc				clc
.b533		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b535		6d 78 07	adc $0778			adc 	gxXPos
.b538		8d 78 07	sta $0778			sta 	gxXPos
.b53b		a5 61		lda $61				lda 	NSMantissa1+1
.b53d		6d 79 07	adc $0779			adc 	gxXPos+1
.b540		8d 79 07	sta $0779			sta 	gxXPos+1
.b543		a5 5a		lda $5a				lda 	NSMantissa0+2
.b545		18		clc				clc
.b546		6d 7a 07	adc $077a			adc 	gxYPos
.b549		8d 7a 07	sta $077a			sta 	gxYPos
.b54c		80 d7		bra $b525			bra 	_RGI_Here
.b54e						_RGI_Dim:
.b54e		a2 01		ldx #$01			ldx	 	#1
.b550		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.b553		a5 59		lda $59				lda 	NSMantissa0+1
.b555		c9 00		cmp #$00			cmp 	#0
.b557		f0 2d		beq $b586			beq 	_RGIRange
.b559		c9 09		cmp #$09			cmp 	#8+1
.b55b		b0 29		bcs $b586			bcs		_RGIRange
.b55d		3a		dec a				dec 	a
.b55e		8d 7d 07	sta $077d			sta 	gxDrawScale
.b561		4c c5 b4	jmp $b4c5			jmp 	_RGICommandLoop
.b564						_RGI_Colour:
.b564		a2 01		ldx #$01			ldx 	#1 							; colour
.b566		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.b569		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.b56b		20 a2 a6	jsr $a6a2			jsr 	NSMSetZero
.b56e		b1 30		lda ($30),y			lda 	(codePtr),y
.b570		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.b572		d0 04		bne $b578			bne 	_RGICDefaultMode
.b574		c8		iny				iny
.b575		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.b578						_RGICDefaultMode:
.b578		5a		phy				phy
.b579		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.b57b		a6 59		ldx $59				ldx 	NSMantissa0+1
.b57d		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b57f		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b582		7a		ply				ply
.b583		4c c5 b4	jmp $b4c5			jmp 	_RGICommandLoop 			; and go round
.b586						_RGIRange:
.b586		4c 60 b1	jmp $b160			jmp 	RangeError
.b589						_RGICallHandler:
.b589		6c 7b 07	jmp ($077b)			jmp 	(gxHandler)
.b58c						_RGI_SpriteInstructions:
.b58c		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.b58e		f0 07		beq $b597			beq 	_RGISpriteOff
.b590		c9 c5		cmp #$c5			cmp 	#KWD_IMAGE
.b592		f0 13		beq $b5a7			beq 	_RGISetImage
.b594		4c fe b4	jmp $b4fe			jmp 	_RGI_Move
.b597						_RGISpriteOff:
.b597		5a		phy				phy
.b598		a0 01		ldy #$01			ldy 	#1
.b59a		a2 00		ldx #$00			ldx 	#0
.b59c						_RGIDoCommandLoop:
.b59c		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.b59e		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b5a1		7a		ply				ply
.b5a2		b0 e2		bcs $b586			bcs 	_RGIRange
.b5a4		4c c5 b4	jmp $b4c5			jmp 	_RGICommandLoop
.b5a7						_RGISetImage:
.b5a7		a2 01		ldx #$01			ldx 	#1
.b5a9		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger
.b5ac		5a		phy				phy
.b5ad		aa		tax				tax
.b5ae		a0 00		ldy #$00			ldy 	#0
.b5b0		80 ea		bra $b59c			bra 	_RGIDoCommandLoop
.b5b2						GCGetCoordinatePair:
.b5b2		a2 01		ldx #$01			ldx 	#1
.b5b4		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.b5b7		20 37 97	jsr $9737			jsr 	CheckComma
.b5ba		e8		inx				inx
.b5bb		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger
.b5be		60		rts				rts
.b5bf						GCSignedCoordinatePair:
.b5bf		a2 01		ldx #$01			ldx 	#1
.b5c1		20 2c a6	jsr $a62c			jsr 	Evaluate16BitIntegerSigned
.b5c4		20 37 97	jsr $9737			jsr 	CheckComma
.b5c7		e8		inx				inx
.b5c8		20 2c a6	jsr $a62c			jsr 	Evaluate16BitIntegerSigned
.b5cb		60		rts				rts
.b5cc						_GCCPRange:
.b5cc		4c 60 b1	jmp $b160			jmp 	RangeError
.b5cf						GCLoadAXY:
.b5cf		ad 79 07	lda $0779			lda 	gxXPos+1
.b5d2		ae 78 07	ldx $0778			ldx 	gxXPos
.b5d5		ac 7a 07	ldy $077a			ldy 	gxYPos
.b5d8		60		rts				rts
.b5d9						GCCopyPairToStore:
.b5d9		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b5db		8d 78 07	sta $0778			sta 	gxXPos
.b5de		a5 61		lda $61				lda 	NSMantissa1+1
.b5e0		8d 79 07	sta $0779			sta 	gxXPos+1
.b5e3		a5 5a		lda $5a				lda 	NSMantissa0+2
.b5e5		8d 7a 07	sta $077a			sta 	gxYPos
.b5e8		60		rts				rts
.0776						gxCommandID:
>0776								.fill 	1
.0777						gxFillSolid:
>0777								.fill 	1
.0778						gxXPos:
>0778								.fill 	2
.077a						gxYPos:
>077a								.fill 	1
.077b						gxHandler:
>077b								.fill 	2
.077d						gxDrawScale:
>077d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.b5e9						BitmapCtrl:
.b5e9		b1 30		lda ($30),y			lda 	(codePtr),y
.b5eb		c8		iny				iny
.b5ec		a2 01		ldx #$01			ldx 	#1
.b5ee		c9 cb		cmp #$cb			cmp 	#KWD_ON
.b5f0		f0 11		beq $b603			beq 	BitmapSwitch
.b5f2		ca		dex				dex
.b5f3		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.b5f5		f0 0c		beq $b603			beq 	BitmapSwitch
.b5f7		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get the colour
.b5fa		5a		phy				phy
.b5fb		aa		tax				tax
.b5fc		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.b5fe		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b601		7a		ply				ply
.b602		60		rts				rts
.b603						BitmapSwitch:
.b603		5a		phy				phy
.b604		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.b606		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.b608		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b60b		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.b60d		a0 00		ldy #$00			ldy 	#0
.b60f		a2 ff		ldx #$ff			ldx 	#$FF
.b611		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b614		9c 77 07	stz $0777			stz 	gxFillSolid
.b617		9c 78 07	stz $0778			stz 	gxXPos
.b61a		9c 79 07	stz $0779			stz 	gxXPos+1
.b61d		9c 7a 07	stz $077a			stz 	gxYPos
.b620		9c 7d 07	stz $077d			stz 	gxDrawScale
.b623		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.b625		a2 00		ldx #$00			ldx 	#0
.b627		a0 00		ldy #$00			ldy 	#0
.b629		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b62c		7a		ply				ply
.b62d		60		rts				rts
.b62e						SpritesCtrl:
.b62e		b1 30		lda ($30),y			lda 	(codePtr),y
.b630		c8		iny				iny
.b631		a2 01		ldx #$01			ldx 	#1
.b633		c9 cb		cmp #$cb			cmp 	#KWD_ON
.b635		f0 08		beq $b63f			beq 	SpriteSwitch
.b637		ca		dex				dex
.b638		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.b63a		f0 03		beq $b63f			beq 	SpriteSwitch
.b63c		4c 5b b1	jmp $b15b			jmp 	SyntaxError
.b63f						SpriteSwitch:
.b63f		5a		phy				phy
.b640		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.b642		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.b644		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b647		7a		ply				ply
.b648		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.b649						GfxCommand:
.b649		a2 00		ldx #$00			ldx 	#0
.b64b		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; command
.b64e		20 37 97	jsr $9737			jsr 	CheckComma
.b651		e8		inx				inx
.b652		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger 		; X
.b655		20 37 97	jsr $9737			jsr 	CheckComma
.b658		e8		inx				inx
.b659		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; Y
.b65c		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.b65e		4a		lsr a				lsr 	a
.b65f		d0 12		bne $b673			bne 	_GfxError
.b661		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.b663		b0 0e		bcs $b673			bcs 	_GfxError 					; bit 7 should have been zero
.b665		5a		phy				phy 								; save pos
.b666		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.b668		a6 59		ldx $59				ldx 	NSMantissa0+1
.b66a		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b66c		20 75 80	jsr $8075			jsr 	GXGraphicDraw
.b66f		b0 02		bcs $b673			bcs 	_GfxError
.b671		7a		ply				ply 								; restore pos and exit.
.b672		60		rts				rts
.b673						_GfxError:
.b673		4c 60 b1	jmp $b160			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.b676						UnaryHit:
.b676		fa		plx				plx
.b677		a9 36		lda #$36			lda 	#zTemp0
.b679		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.b67c		20 37 97	jsr $9737			jsr 	CheckComma
.b67f		e8		inx				inx
.b680		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.b683		20 2f 97	jsr $972f			jsr		CheckRightBracket
.b686		ca		dex				dex 								; fix back up again.
.b687		da		phx				phx 								; save X/Y
.b688		5a		phy				phy
.b689		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.b68b		b5 58		lda $58,x			lda 	NSMantissa0,x
.b68d		aa		tax				tax
.b68e		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.b690		20 75 80	jsr $8075			jsr 	GXGraphicDraw 				; calculate result
.b693		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.b694		7a		ply				ply 								; restore XY
.b695		fa		plx				plx
.b696		20 a4 a6	jsr $a6a4			jsr 	NSMSetByte 					; return the hit result
.b699		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.b69a						PaletteCommand:
.b69a		a2 00		ldx #$00			ldx 	#0
.b69c		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; colour
.b69f		20 37 97	jsr $9737			jsr 	CheckComma
.b6a2		e8		inx				inx
.b6a3		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger 		; r
.b6a6		20 37 97	jsr $9737			jsr 	CheckComma
.b6a9		e8		inx				inx
.b6aa		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; g
.b6ad		20 37 97	jsr $9737			jsr 	CheckComma
.b6b0		e8		inx				inx
.b6b1		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; b
.b6b4		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.b6b6		85 36		sta $36				sta 	zTemp0
.b6b8		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.b6ba		85 37		sta $37				sta 	zTemp0+1
.b6bc		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.b6be		26 37		rol $37				rol	 	zTemp0+1
.b6c0		06 36		asl $36				asl 	zTemp0
.b6c2		26 37		rol $37				rol	 	zTemp0+1
.b6c4		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.b6c6		85 01		sta $01				sta 	1
.b6c8		5a		phy				phy
.b6c9		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.b6cb		92 36		sta ($36)			sta 	(zTemp0)
.b6cd		a0 01		ldy #$01			ldy 	#1
.b6cf		a5 5a		lda $5a				lda 	NSMantissa0+2
.b6d1		91 36		sta ($36),y			sta 	(zTemp0),y
.b6d3		a5 59		lda $59				lda 	NSMantissa0+1
.b6d5		c8		iny				iny
.b6d6		91 36		sta ($36),y			sta 	(zTemp0),y
.b6d8		7a		ply				ply
.b6d9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.b6da						ClearScreen:
.b6da		5a		phy				phy
.b6db		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.b6dd		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.b6e0		7a		ply				ply
.b6e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b6e2						PingCommand:
.b6e2		5a		phy				phy 								; save pos
.b6e3		a9 01		lda #$01			lda 	#1 						; push channel.
.b6e5		48		pha				pha
.b6e6		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b6e8		a2 06		ldx #$06			ldx 	#6 						; length
.b6ea		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b6ec		80 24		bra $b712			bra 	SoundEffectCommand
.b6ee						ZapCommand:
.b6ee		5a		phy				phy 								; save pos
.b6ef		a9 01		lda #$01			lda 	#1 						; push channel.
.b6f1		48		pha				pha
.b6f2		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b6f4		a2 0a		ldx #$0a			ldx 	#10 						; length
.b6f6		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b6f8		80 18		bra $b712			bra 	SoundEffectCommand
.b6fa						ShootCommand:
.b6fa		5a		phy				phy 								; save pos
.b6fb		a9 03		lda #$03			lda 	#3 						; push channel.
.b6fd		48		pha				pha
.b6fe		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b700		a2 04		ldx #$04			ldx 	#4 						; length
.b702		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b704		80 0c		bra $b712			bra 	SoundEffectCommand
.b706						Explode:
.b706		5a		phy				phy 								; save pos
.b707		a9 03		lda #$03			lda 	#3 						; push channel.
.b709		48		pha				pha
.b70a		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b70c		a2 0a		ldx #$0a			ldx 	#10 						; length
.b70e		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b710		80 00		bra $b712			bra 	SoundEffectCommand
.b712						SoundEffectCommand:
.b712		8d 7e 07	sta $077e			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b715		9c 7f 07	stz $077f			stz 	SoundCommandBlock+1
.b718		a9 0f		lda #$0f			lda 	#15
.b71a		8d 80 07	sta $0780			sta 	SoundCommandBlock+2
.b71d		8e 81 07	stx $0781			stx 	SoundCommandBlock+3
.b720		8c 82 07	sty $0782			sty 	SoundCommandBlock+4
.b723		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b726		68		pla				pla
.b727		09 10		ora #$10			ora 	#$10  						; execute command $11
.b729		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b72b		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b72d		20 7f 80	jsr $807f			jsr 	SNDCommand
.b730		7a		ply				ply
.b731		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b732						UnaryPlaying:
.b732		fa		plx				plx
.b733		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; get channel #
.b736		48		pha				pha
.b737		20 2f 97	jsr $972f			jsr		CheckRightBracket
.b73a		68		pla				pla
.b73b		c9 04		cmp #$04			cmp 	#4
.b73d		b0 0c		bcs $b74b			bcs 	_UPNotPlaying
.b73f		09 20		ora #$20			ora 	#$20 						; query playing ?
.b741		20 7f 80	jsr $807f			jsr 	SNDCommand
.b744		c9 00		cmp #$00			cmp 	#0
.b746		f0 03		beq $b74b			beq 	_UPNotPlaying
.b748		4c b5 97	jmp $97b5			jmp 	ReturnTrue
.b74b						_UPNotPlaying:
.b74b		4c c0 97	jmp $97c0			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b74e						SoundCommand:
.b74e		b1 30		lda ($30),y			lda 	(codePtr),y
.b750		c9 ca		cmp #$ca			cmp 	#KWD_OFF 					; SOUND OFF ?
.b752		d0 09		bne $b75d			bne 	_SNDMain
.b754		c8		iny				iny 								; skip OFF
.b755		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b757		5a		phy				phy
.b758		20 7f 80	jsr $807f			jsr 	SNDCommand
.b75b		7a		ply				ply
.b75c		60		rts				rts
.b75d						_SNDMain:
.b75d		a2 00		ldx #$00			ldx 	#0
.b75f		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; channel
.b762		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b764		b0 4b		bcs $b7b1			bcs 	_SndError
.b766		e8		inx				inx 								; do the rest in slot 1.
.b767		20 37 97	jsr $9737			jsr 	CheckComma
.b76a		20 22 a6	jsr $a622			jsr 	Evaluate16BitInteger 		; Pitch
.b76d		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b76f		c9 10		cmp #$10			cmp 	#16
.b771		b0 3e		bcs $b7b1			bcs 	_SndError
.b773		8d 7f 07	sta $077f			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b776		b5 58		lda $58,x			lda 	NSMantissa0,x
.b778		8d 7e 07	sta $077e			sta 	SoundCommandBlock
.b77b		20 37 97	jsr $9737			jsr 	CheckComma
.b77e		20 3d a6	jsr $a63d			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b781		8d 81 07	sta $0781			sta 	SoundCommandBlock+3
.b784		a9 0f		lda #$0f			lda 	#15
.b786		8d 80 07	sta $0780			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b789		9c 82 07	stz $0782			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b78c		9c 83 07	stz $0783			stz 	SoundCommandBlock+5
.b78f		b1 30		lda ($30),y			lda 	(codePtr),y
.b791		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b793		d0 0e		bne $b7a3			bne 	_SNDPlay
.b795		c8		iny				iny
.b796		20 2c a6	jsr $a62c			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b799		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b79b		8d 82 07	sta $0782			sta 	SoundCommandBlock+4
.b79e		b5 60		lda $60,x			lda 	NSMantissa1,x
.b7a0		8d 83 07	sta $0783			sta 	SoundCommandBlock+5
.b7a3						_SNDPlay:
.b7a3		5a		phy				phy
.b7a4		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b7a6		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b7a8		a2 7e		ldx #$7e			ldx 	#(SoundCommandBlock & $FF)
.b7aa		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b7ac		20 7f 80	jsr $807f			jsr 	SNDCommand
.b7af		7a		ply				ply
.b7b0		60		rts				rts
.b7b1						_SndError:
.b7b1		4c 60 b1	jmp $b160			jmp 	RangeError
.077e						SoundCommandBlock:
>077e								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b7b4						StackPushByte:
.b7b4		48		pha				pha 								; save byte on stack
.b7b5		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b7b7		d0 08		bne $b7c1			bne 	_SPBNoBorrow
.b7b9		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b7bb		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b7bd		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7bf		90 06		bcc $b7c7			bcc 	_SPBMemory
.b7c1						_SPBNoBorrow:
.b7c1		c6 34		dec $34				dec 	basicStack
.b7c3		68		pla				pla 								; get back and write
.b7c4		92 34		sta ($34)			sta 	(basicStack)
.b7c6		60		rts				rts
.b7c7						_SPBMemory:
.b7c7		a9 12		lda #$12		lda	#18
.b7c9		4c 48 97	jmp $9748		jmp	ErrorHandler
.b7cc						StackPopByte:
.b7cc		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b7ce		e6 34		inc $34				inc 	basicStack
.b7d0		d0 02		bne $b7d4			bne 	_SPBNoCarry
.b7d2		e6 35		inc $35				inc 	basicStack+1
.b7d4						_SPBNoCarry:
.b7d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b7d5						StackOpen:
.b7d5		48		pha				pha 								; save frame byte
.b7d6		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b7d8		0a		asl a				asl 	a 							; claim twice this for storage
.b7d9		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b7db		38		sec				sec 								; so basically subtracting from
.b7dc		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b7de		85 34		sta $34				sta 	basicStack
.b7e0		b0 09		bcs $b7eb			bcs 	_SONoBorrow
>b7e2		db						.byte 	$DB 						; causes a break in the emulator
.b7e3		c6 35		dec $35				dec 	basicStack+1
.b7e5		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b7e7		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b7e9		90 04		bcc $b7ef			bcc 	_SOMemory
.b7eb						_SONoBorrow:
.b7eb		68		pla				pla 								; get marker back and write at TOS
.b7ec		92 34		sta ($34)			sta 	(basicStack)
.b7ee		60		rts				rts
.b7ef						_SOMemory:
.b7ef		a9 12		lda #$12		lda	#18
.b7f1		4c 48 97	jmp $9748		jmp	ErrorHandler
.b7f4						StackClose:
.b7f4		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b7f6		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b7f8		0a		asl a				asl 	a 							; claim twice this.
.b7f9		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b7fb		85 34		sta $34				sta 	basicStack
.b7fd		90 02		bcc $b801			bcc 	_SCExit
.b7ff		e6 35		inc $35				inc 	basicStack+1
.b801						_SCExit:
.b801		60		rts				rts
.b802						StackCheckFrame:
.b802		48		pha				pha
.b803						_StackRemoveLocals:
.b803		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b805		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b807		b0 05		bcs $b80e			bcs 	_SCNoLocal
.b809		20 17 90	jsr $9017			jsr 	LocalPopValue 				; restore the local value
.b80c		80 f5		bra $b803			bra 	_StackRemoveLocals 			; gr round again
.b80e						_SCNoLocal:
.b80e		68		pla				pla 								; get the frame check.
.b80f		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b811		29 f0		and #$f0			and 	#$F0 						; check type bits
.b813		d0 01		bne $b816			bne 	_SCFError 					; different, we have structures mixed up
.b815		60		rts				rts
.b816						_SCFError:
.b816		8a		txa				txa 								; report error X
.b817		4c 48 97	jmp $9748			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b81a						STKSaveCodePosition:
.b81a		5a		phy				phy
.b81b		98		tya				tya 								; save Y
.b81c		a0 05		ldy #$05			ldy 	#5
.b81e		91 34		sta ($34),y			sta 	(basicStack),y
.b820		88		dey				dey 								; save Code Pointer
.b821						_STKSaveLoop:
.b821		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b824		91 34		sta ($34),y			sta 	(basicStack),y
.b826		88		dey				dey
.b827		d0 f8		bne $b821			bne 	_STKSaveLoop
.b829		7a		ply				ply
.b82a		60		rts				rts
.b82b						STKLoadCodePosition:
.b82b		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b82d						_STKLoadLoop:
.b82d		b1 34		lda ($34),y			lda 	(basicStack),y
.b82f		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b832		c8		iny				iny
.b833		c0 05		cpy #$05			cpy 	#5
.b835		d0 f6		bne $b82d			bne 	_STKLoadLoop
.b837		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b839		a8		tay				tay
.b83a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b83b						StackReset:
.b83b		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b83d		85 34		sta $34				sta 	0+basicStack
.b83f		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b841		85 35		sta $35				sta 	1+basicStack
.b843		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b845		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b847		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b848						StringConcrete:
.b848		5a		phy				phy 								; save position on stack
.b849		20 82 a2	jsr $a282			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b84c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b84e		85 38		sta $38				sta 	zTemp1
.b850		b5 60		lda $60,x			lda 	NSMantissa1,x
.b852		85 39		sta $39				sta 	zTemp1+1
.b854		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b856						_SALength:
.b856		c8		iny				iny
.b857		b1 38		lda ($38),y			lda 	(zTemp1),y
.b859		d0 fb		bne $b856			bne 	_SALength
.b85b		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b85d		b0 3d		bcs $b89c			bcs 	_SALengthError
.b85f		98		tya				tya 				 				; length of the new string
.b860		18		clc				clc
.b861		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b863		90 02		bcc $b867			bcc 	_SAHaveLength
.b865		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b867						_SAHaveLength:
.b867		48		pha				pha 								; save length.
.b868		38		sec				sec
.b869		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b86b		6d 0a 04	adc $040a			adc 	stringMemory
.b86e		8d 0a 04	sta $040a			sta 	stringMemory
.b871		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b873		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b875		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b877		6d 0b 04	adc $040b			adc 	stringMemory+1
.b87a		8d 0b 04	sta $040b			sta 	stringMemory+1
.b87d		85 3b		sta $3b				sta 	zTemp2+1
.b87f		95 60		sta $60,x			sta 	NSMantissa1,x
.b881		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b882		38		sec				sec
.b883		e9 03		sbc #$03			sbc 	#3
.b885		92 3a		sta ($3a)			sta 	(zTemp2)
.b887		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b889		a0 01		ldy #$01			ldy 	#1
.b88b		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b88d						_SACopyNewString:
.b88d		a0 00		ldy #$00			ldy 	#0
.b88f						_SACopyNSLoop:
.b88f		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b891		c8		iny				iny 								; write two on in string storage
.b892		c8		iny				iny
.b893		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b895		88		dey				dey 								; this makes it one one.
.b896		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b898		d0 f5		bne $b88f			bne 	_SACopyNSLoop
.b89a		7a		ply				ply
.b89b		60		rts				rts
.b89c						_SALengthError:
.b89c		a9 09		lda #$09		lda	#9
.b89e		4c 48 97	jmp $9748		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b8a1						StringSystemInitialise:
.b8a1		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b8a3		8d 0a 04	sta $040a			sta 	0+stringMemory
.b8a6		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b8a8		8d 0b 04	sta $040b			sta 	1+stringMemory
.b8ab		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b8ae		60		rts				rts
.b8af						StringSpaceInitialise:
.b8af		20 82 a2	jsr $a282			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8b2		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8b4		8d 0c 04	sta $040c			sta 	stringInitialised
.b8b7		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b8ba		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b8bd		ad 0b 04	lda $040b			lda 	stringMemory+1
.b8c0		3a		dec a				dec 	a
.b8c1		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8c4		60		rts				rts
.b8c5						StringTempAllocate:
.b8c5		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8c7		b0 30		bcs $b8f9			bcs 	_STALength
.b8c9		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b8cc		30 05		bmi $b8d3			bmi 	_STAAllocate
.b8ce		48		pha				pha 								; save value to subtract.
.b8cf		20 af b8	jsr $b8af			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8d2		68		pla				pla 								; restore it
.b8d3						_STAAllocate:
.b8d3		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8d5		18		clc				clc  								; deliberate allows one more
.b8d6		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b8d9		8d 0d 04	sta $040d			sta 	stringTempPointer
.b8dc		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b8de		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8e0		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b8e3		69 ff		adc #$ff			adc 	#$FF
.b8e5		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b8e8		85 3d		sta $3d				sta 	zsTemp+1
.b8ea		95 60		sta $60,x			sta 	NSMantissa1,x
.b8ec		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b8ee		74 70		stz $70,x			stz 	NSMantissa3,x
.b8f0		a9 10		lda #$10			lda 	#NSTString
.b8f2		95 50		sta $50,x			sta 	NSStatus,x
.b8f4		a9 00		lda #$00			lda 	#0 							; clear the target string
.b8f6		92 3c		sta ($3c)			sta 	(zsTemp)
.b8f8		60		rts				rts
.b8f9						_STALength:
.b8f9		a9 09		lda #$09		lda	#9
.b8fb		4c 48 97	jmp $9748		jmp	ErrorHandler
.b8fe						StringTempWrite:
.b8fe		48		pha				pha
.b8ff		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b901		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b903		d0 02		bne $b907			bne 	_STWNoCarry
.b905		e6 3d		inc $3d				inc 	zsTemp+1
.b907						_STWNoCarry:
.b907		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b909		92 3c		sta ($3c)			sta 	(zsTemp)
.b90b		68		pla				pla
.b90c		60		rts				rts

;******  Return to file: _basic.asm

.b90d						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 85 07	ldy $0785			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 86 07	lda $0786			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 85 07	sty $0785			sty 	EXTColumn
.c02d	a02d	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 84 07	inc $0784			inc 	EXTRow  					; bump row
.c035	a035	9c 85 07	stz $0785			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 84 07	lda $0784			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 88 07	cmp $0788			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 85 07	dec $0785			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 85 07	stz $0785			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 84 07	dec $0784			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 84 07	lda $0784			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 84 07	dec $0784			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 87 07	sbc $0787			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 85 07	sty $0785			sty 	EXTColumn
.c08c	a08c	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 85 07	sty $0785			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 88 07	lda $0788			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 84 07	cmp $0784			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 84 07	inc $0784			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 87 07	adc $0787			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 85 07	lda $0785			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 85 07	sta $0785			sta 	EXTColumn
.c0c9	a0c9	cd 87 07	cmp $0787			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 85 07	dec $0785			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 87 07	cpy $0787			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 86 07	and $0786			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 86 07	sta $0786			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 86 07	ora $0786			ora 	EXTTextColour
.c13c	a13c	8d 86 07	sta $0786			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 86 07	lda $0786			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 86 07	lda $0786			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 84 07	stz $0784			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 85 07	stz $0785			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 85 07	lda $0785			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 84 07	lda $0784			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 5e 06	cmp $065e			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 1d bc	jsr $bc1d			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 72 82	jsr $8272			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 85 07	lda $0785			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 85 07	ldy $0785			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 85 07	ldy $0785			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 87 07	cpy $0787			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 85 07	cpy $0785			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 87 07	lda $0787			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 87 07	ldy $0787			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0784						EXTRow:
>0784								.fill 	1
.0785						EXTColumn:
>0785								.fill 	1
.0786						EXTTextColour:
>0786								.fill 	1
.0787						EXTScreenWidth:
>0787								.fill 	1
.0788						EXTScreenHeight:
>0788								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 86 07	sta $0786			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 87 07	sta $0787			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 88 07	sta $0788			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 84 07	lda $0784			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.0789						gxCurrentX:
>0789								.fill 	2
.078b						gxCurrentY:
>078b								.fill 	2
.078d						gxLastX:
>078d								.fill 	2
.078f						gxLastY:
>078f								.fill 	2
.0791						gxX0:
>0791								.fill 	2
.0793						gxY0:
>0793								.fill 	2
.0795						gxX1:
>0795								.fill 	2
.0797						gxY1:
>0797								.fill 	2
.0799						gxSpritesOn:
>0799								.fill 	1
.079a						gxBitmapsOn:
>079a								.fill 	1
.079b						gxBasePage:
>079b								.fill 	1
.079c						gxSpritePage:
>079c								.fill 	1
.079d						gxHeight:
>079d								.fill 	1
.079e						gxMode:
>079e								.fill 	1
.079f						gxColour:
>079f								.fill 	1
.07a0						gxEORValue:
>07a0								.fill 	1
.07a1						gxANDValue:
>07a1								.fill 	1
.07a2						gxOriginalLUTValue:
>07a2								.fill 	1
.07a3						gxOffset:
>07a3								.fill 	1
.07a4						GSCurrentSpriteID:
>07a4								.fill 	1
.07a5						GSCurrentSpriteAddr:
>07a5								.fill 	2
.07a7						gxSpriteOffsetBase:
>07a7								.fill 	2
.07a9						gxSpriteLow:
>07a9								.fill 	64
.07e9						gxSpriteHigh:
>07e9								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c800	a800	9d 8d 07	sta $078d,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8b 07	sta $078b			sta 	gxCurrentY
.c80a	a80a	9c 8c 07	stz $078c			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 89 07	sta $0789			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8a 07	sta $078a			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8a 07	lda $078a			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 89 07	lda $0789			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8b 07	lda $078b			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9d 07	cmp $079d			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 89 07	lda $0789,x			lda 	gxCurrentX,x
.c83c	a83c	9d 91 07	sta $0791,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2c 08	sta $082c			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2d 08	stz $082d			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2a 08	lda $082a			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2b 08	cmp $082b			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2b 08	lda $082b			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2a 08	lda $082a			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2b 08	ldx $082b			ldx	 	gxYCentre
.c898	a898	8d 2b 08	sta $082b			sta 	gxYCentre
.c89b	a89b	8e 2a 08	stx $082a			stx 	gxxCentre
.c89e	a89e	ad 2d 08	lda $082d			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2d 08	sta $082d			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2c 08	lda $082c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2d 08	lda $082d			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2b 08	lda $082b			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2a 08	lda $082a			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2c 08	lda $082c			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c8df	a8df	8d 2b 08	sta $082b			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 95 07	lda $0795,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 91 07	sta $0791,x			sta 	gxX0,x
.c8f6	a8f6	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 92 07	sta $0792,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2d 08	stz $082d			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2a 08	inc $082a			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2a 08	lda $082a			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2a 08	inc $082a			inc 	gxxCentre					; X++
.c918	a918	ce 2b 08	dec $082b			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2a 08	lda $082a			lda 	gxxCentre
.c91f	a91f	ed 2b 08	sbc $082b			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2d 08	dec $082d			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 97 07	lda $0797			lda 	gxY1
.c958	a958	ed 93 07	sbc $0793			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 29 08	sta $0829			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2a 08	stz $082a			stz 	gxxCentre
.c96c	a96c	ad 29 08	lda $0829			lda 	gxRadius
.c96f	a96f	8d 2b 08	sta $082b			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 95 07	lda $0795,x			lda 	gxX1,x
.c987	a987	7d 91 07	adc $0791,x			adc 	gxX0,x
.c98a	a98a	9d 95 07	sta $0795,x			sta 	gxX1,x
.c98d	a98d	bd 96 07	lda $0796,x			lda 	gxX1+1,x
.c990	a990	7d 92 07	adc $0792,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 96 07	sta $0796,x			sta 	gxX1+1,x
.c997	a997	7e 95 07	ror $0795,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.0829						gxRadius:
>0829								.fill 	1
.082a						gxxCentre:
>082a								.fill 	1
.082b						gxYCentre:
>082b								.fill 	1
.082c						gxIsFillMode:
>082c								.fill 	1
.082d						gxYChanged:
>082d								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9d 07	lda $079d			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9b 07	adc $079b			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9b 07	cmp $079b			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 99 07	stz $0799			stz 	gxSpritesOn
.c9f4	a9f4	9c 9a 07	stz $079a			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 89 07	stz $0789,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9a 07	sta $079a			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9b 07	sta $079b			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9d 07	stx $079d			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 99 07	sta $0799			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9c 07	sta $079c			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a7 07	sta $07a7			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d a8 07	sta $07a8			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a6 07	stz $07a6			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e e9 07	stz $07e9,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a3 07	ldy $07a3			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a1 07	and $07a1			and 	gxANDValue
.cac1	aac1	4d a0 07	eor $07a0			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 30 08	lda $0830			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 91 07	lda $0791			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 95 07	eor $0795			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 92 07	lda $0792			lda 	gxX0+1
.cae7	aae7	4d 96 07	eor $0796			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 97 07	lda $0797			lda 	gxY1
.caee	aaee	4d 93 07	eor $0793			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 32 08	lda $0832			lda 	gxPosition
.caf6	aaf6	6d 33 08	adc $0833			adc 	gxAdjust
.caf9	aaf9	8d 32 08	sta $0832			sta 	gxPosition
.cafc	aafc	9c 35 08	stz $0835			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 34 08	cmp $0834			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 35 08	dec $0835			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 34 08	sbc $0834			sbc 	gxTotal
.cb0d	ab0d	8d 32 08	sta $0832			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 30 08	lda $0830			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 35 08	lda $0835			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 35 08	lda $0835			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 31 08	lda $0831			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 91 07	lda $0791			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 92 07	dec $0792			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 91 07	dec $0791			dec 	gxX0
.cb3e	ab3e	ce a3 07	dec $07a3			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a3 07	lda $07a3			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 91 07	inc $0791			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 92 07	inc $0792			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a3 07	inc $07a3			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 93 07	inc $0793			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 97 07	lda $0797			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 93 07	sbc $0793			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 2f 08	sta $082f			sta 	gxDiffY
.cb86	ab86	9c 31 08	stz $0831			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 95 07	lda $0795			lda 	gxX1
.cb8d	ab8d	ed 91 07	sbc $0791			sbc 	gxX0
.cb90	ab90	8d 2e 08	sta $082e			sta 	gxDiffX
.cb93	ab93	ad 96 07	lda $0796			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 92 07	sbc $0792			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 2e 08	ror $082e			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 2e 08	sbc $082e			sbc 	gxDiffX
.cba6	aba6	8d 2e 08	sta $082e			sta 	gxDiffX
.cba9	aba9	ce 31 08	dec $0831			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 30 08	stz $0830			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 2f 08	lda $082f			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 33 08	sta $0833			sta 	gxAdjust
.cbb5	abb5	ad 2e 08	lda $082e			lda 	gxDiffX
.cbb8	abb8	8d 34 08	sta $0834			sta 	gxTotal
.cbbb	abbb	ad 2f 08	lda $082f			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 2e 08	cmp $082e			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 30 08	dec $0830			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 2e 08	lda $082e			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 33 08	sta $0833			sta 	gxAdjust
.cbcc	abcc	ad 2f 08	lda $082f			lda 	gxDiffY
.cbcf	abcf	8d 34 08	sta $0834			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 34 08	lda $0834			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 32 08	sta $0832			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.082e						gxDiffX:
>082e								.fill 	1
.082f						gxDiffY:
>082f								.fill 	1
.0830						gxIsDiffYLarger:
>0830								.fill 	1
.0831						gxDXNegative:
>0831								.fill 	1
.0832						gxPosition:
>0832								.fill 	1
.0833						gxAdjust:
>0833								.fill 	1
.0834						gxTotal:
>0834								.fill 	1
.0835						gxAddSelect:
>0835								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e 9f 07	stx $079f			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d 9e 07	sta $079e			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a1 07	stz $07a1			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae 9f 07	ldx $079f			ldx 	gxColour
.cbec	abec	8e a0 07	stx $07a0			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a1 07	stx $07a1			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a0 07	stz $07a0			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a1 07	lda $07a1			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a1 07	sta $07a1			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a3 07	ldy $07a3			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a1 07	and $07a1			and 	gxANDValue
.cc16	ac16	4d a0 07	eor $07a0			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9a 07	lda $079a			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 93 07	lda $0793			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 97 07	cmp $0797			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 93 07	inc $0793			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 93 07	lda $0793			lda 	gxY0 						; reached last line
.cc48	ac48	cd 97 07	cmp $0797			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 95 07	lda $0795			lda		gxX1
.cc65	ac65	ed 91 07	sbc $0791			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 96 07	lda $0796			lda 	gxX1+1
.cc6d	ac6d	ed 92 07	sbc $0792			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a3 07	lda $07a3			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a1 07	and $07a1			and 	gxANDValue
.cc8a	ac8a	4d a0 07	eor $07a0			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a1 07	and $07a1			and 	gxANDValue
.cca8	aca8	4d a0 07	eor $07a0			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a1 07	and $07a1			and 	gxANDValue
.ccc0	acc0	4d a0 07	eor $07a0			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a3 07	sta $07a3			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 36 08	sta $0836			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 37 08	sta $0837			sta 	gxMask 						; and mask
.cce7	ace7	ad 9a 07	lda $079a			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 93 07	lda $0793			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 39 08	sty $0839			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 38 08	stx $0838			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3b 08	lda $083b			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3a 08	sta $083a			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3b 08	bit $083b			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 37 08	lda $0837			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3a 08	lda $083a			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 93 07	lda $0793			lda 	gxY0 						; off screen
.cd20	ad20	cd 9d 07	cmp $079d			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 36 08	cmp $0836			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 93 07	sta $0793			sta 	gxY0
.cd39	ad39	ae 3a 08	ldx $083a			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 36 08	lda $0836			lda 	gxSize
.cd40	ad40	6d 91 07	adc $0791			adc 	gxX0
.cd43	ad43	8d 91 07	sta $0791			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 92 07	inc $0792			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 38 08	jmp ($0838)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a3 07	ldy $07a3			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3a 08	lda $083a			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c 9e 07	bit $079e			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 37 08	lda $0837			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3b 08	lda $083b			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a1 07	and $07a1			and 	gxANDValue
.cd84	ad84	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 36 08	cmp $0836			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 93 07	inc $0793			inc 	gxY0
.cda1	ada1	60		rts				rts
.0836						gxSize:
>0836								.fill 	1
.0837						gxMask:
>0837								.fill 	1
.0838						gxAcquireVector:
>0838								.fill 	2
.083a						gxScale:
>083a								.fill 	1
.083b						gxUseMode:
>083b								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d 9e 07	eor $079e			eor 	gxMode
.cda7	ada7	8d 3b 08	sta $083b			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad 9f 07	lda $079f			lda 	gxColour
.cde0	ade0	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 99 07	lda $0799			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d 9e 07	eor $079e			eor 	gxMode
.cdf4	adf4	8d 3b 08	sta $083b			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3c 08	lda $083c			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9c 07	lda $079c			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3d 08	ldx $083d			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 3f 08	adc $083f			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 40 08	adc $0840			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3c 08	cpy $083c			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a4 07	sta $07a4			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a6 07	sta $07a6			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a5 07	sta $07a5			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 99 07	lda $0799			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 3f 08	lda $083f			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 40 08	lda $0840			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a7 07	adc $07a7			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad a8 07	lda $07a8			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 3e 08	ora $083e			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3d 08	lda $083d			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d e9 07	ora $07e9,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 99 07	lda $0799			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a6 07	lda $07a6			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 91 07	adc $0791			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 92 07	lda $0792			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 93 07	adc $0793			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 92 07	lsr $0792			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 91 07	ror $0791			ror 	gxX0
.cf60	af60	4e 91 07	lsr $0791			lsr 	gxX0
.cf63	af63	4e 93 07	lsr $0793			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 93 07	lsr $0793			lsr 	gxY0
.cf69	af69	ae a4 07	ldx $07a4			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd a9 07	lda $07a9,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 91 07	ora $0791			ora 	gxX0
.cf74	af74	9d a9 07	sta $07a9,x			sta 	gxSpriteLow,x
.cf77	af77	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 93 07	ora $0793			ora 	gxY0
.cf7f	af7f	9d e9 07	sta $07e9,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a2 07	sta $07a2			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a2 07	lda $07a2			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 93 07	lda $0793			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 91 07	lda $0791			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a3 07	sta $07a3			sta 	gxOffset
.cfd1	afd1	ad 92 07	lda $0792			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9b 07	adc $079b			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a3 07	lda $07a3			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a3 07	sta $07a3			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d a9 07	ora $07a9,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y
.d023	b023	7d e9 07	adc $07e9,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 e9 07	lda $07e9,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd e9 07	lda $07e9,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 a9 07	lda $07a9,y			lda 	gxSpriteLow,y
.d051	b051	fd a9 07	sbc $07a9,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9c 07	lda $079c			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 40 08	sta $0840			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3d 08	sta $083d			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3c 08	sta $083c			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 3e 08	sta $083e			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 3f 08	sta $083f			sta 	gxSpriteOffset
.d09e	b09e	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a1	b0a1	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 3f 08	asl $083f			asl 	gxSpriteOffset
.d0a7	b0a7	2e 40 08	rol $0840			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083c						gxSizePixels:
>083c								.fill 	1
.083d						gxSizeBits:
>083d								.fill 	1
.083e						gxSpriteLUT:
>083e								.fill 	1
.083f						gxSpriteOffset:
>083f								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 91 07	lda $0791			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 95 07	cmp $0795			cmp 	gxX1
.d0bb	b0bb	ad 92 07	lda $0792			lda 	gxX0+1
.d0be	b0be	ed 96 07	sbc $0796			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 93 07	lda $0793			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 97 07	cmp $0797			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 91 07	lda $0791,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 91 07	lda $0791,y			lda 	gxX0,y
.d0eb	b0eb	9d 91 07	sta $0791,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 91 07	sta $0791,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d17a	b17a	55 4e 54 28
>d17e	b17e	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d186	b186	54 24 28
>d189	b189	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d190	b190	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d197	b197	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d19e	b19e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $98 LEFT$(
>d1a6	b1a6	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $99 LEN(
>d1ac	b1ac	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9a MAX(
>d1b2	b1b2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9b MID$(
>d1b9	b1b9	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9c MIN(
>d1bf	b1bf	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9d NOT(
>d1c5	b1c5	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9e PEEK(
>d1cc	b1cc	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9f PEEKD(
>d1d4	b1d4	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a0 PEEKL(
>d1dc	b1dc	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a1 PEEKW(
>d1e4	b1e4	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a2 PLAYING(
>d1ec	b1ec	47 28
>d1ee	b1ee	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a3 RANDOM(
>d1f6	b1f6	28
>d1f7	b1f7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a4 RIGHT$(
>d1ff	b1ff	28
>d200	b200	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a5 RND(
>d206	b206	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a6 SGN(
>d20c	b20c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a7 SPC(
>d212	b212	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a8 STR$(
>d219	b219	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a9 TIMER(
>d221	b221	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $aa TRUE
>d227	b227	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ab VAL(
>d22d	b22d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ac FOR
>d232	b232	02 8f 49 46				.text	2,$8f,"IF"             ; $ad IF
>d236	b236	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ae PROC
>d23c	b23c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $af REPEAT
>d244	b244	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b0 WHILE
>d24b	b24b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b1 ENDIF
>d252	b252	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b2 ENDPROC
>d25a	b25a	43
>d25b	b25b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b3 NEXT
>d261	b261	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b4 THEN
>d267	b267	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b5 UNTIL
>d26e	b26e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b6 WEND
>d274	b274	02 95 41 54				.text	2,$95,"AT"             ; $b7 AT
>d278	b278	02 9b 42 59				.text	2,$9b,"BY"             ; $b8 BY
>d27c	b27c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b9 CALL
>d282	b282	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ba CIRCLE
>d28a	b28a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bb CLEAR
>d291	b291	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bc COLOR
>d298	b298	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bd COLOUR
>d2a0	b2a0	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $be DATA
>d2a6	b2a6	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bf DIM
>d2ab	b2ab	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c0 DOWNTO
>d2b3	b2b3	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c1 ELSE
>d2b9	b2b9	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c2 FROM
>d2bf	b2bf	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c3 GFX
>d2c4	b2c4	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c4 HERE
>d2ca	b2ca	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c5 IMAGE
>d2d1	b2d1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c6 LET
>d2d6	b2d6	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c7 LINE
>d2dc	b2dc	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c8 LOCAL
>d2e3	b2e3	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c9 MEMCOPY
>d2eb	b2eb	59
>d2ec	b2ec	03 db 4f 46 46				.text	3,$db,"OFF"            ; $ca OFF
>d2f1	b2f1	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cb ON
>d2f5	b2f5	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cc OUTLINE
>d2fd	b2fd	45
>d2fe	b2fe	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cd PALETTE
>d306	b306	45
>d307	b307	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ce PLOT
>d30d	b30d	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cf POKE
>d313	b313	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d0 POKED
>d31a	b31a	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d1 POKEL
>d321	b321	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d2 POKEW
>d328	b328	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d3 READ
>d32e	b32e	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d4 RECT
>d334	b334	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d5 REM
>d339	b339	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d6 SOLID
>d340	b340	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d7 SOUND
>d347	b347	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d8 SPRITE
>d34f	b34f	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d9 TEXT
>d355	b355	02 a3 54 4f				.text	2,$a3,"TO"             ; $da TO
>d359	b359	ff					.text	$FF
.d35a	b35a					KeywordSet1:
>d35a	b35a	00 65					.text	0,$65,""               ; $80 !0:EOF
>d35c	b35c	00 58					.text	0,$58,""               ; $81 !1:SH1
>d35e	b35e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d360	b360	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d368	b368	4c 45
>d36a	b36a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d372	b372	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d37a	b37a	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d381	b381	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d388	b388	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d38d	b38d	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d395	b395	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d39a	b39a	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d39f	b39f	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d3a6	b3a6	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d3ab	b3ab	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d3b3	b3b3	45
>d3b4	b3b4	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d3b8	b3b8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d3bf	b3bf	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3c5	b3c5	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3cc	b3cc	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3d3	b3d3	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3d9	b3d9	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3df	b3df	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $96 NEW
>d3e4	b3e4	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $97 PING
>d3ea	b3ea	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $98 PRINT
>d3f1	b3f1	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $99 RESTORE
>d3f9	b3f9	45
>d3fa	b3fa	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9a RETURN
>d402	b402	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9b RUN
>d407	b407	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9c SAVE
>d40d	b40d	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9d SETDATE
>d415	b415	45
>d416	b416	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9e SETTIME
>d41e	b41e	45
>d41f	b41f	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9f SHOOT
>d426	b426	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a0 SPRITES
>d42e	b42e	53
>d42f	b42f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a1 STOP
>d435	b435	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a2 VERIFY
>d43d	b43d	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a3 XGO
>d442	b442	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a4 XLOAD
>d449	b449	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a5 ZAP
>d44e	b44e	ff					.text	$FF
.d44f	b44f					KeywordSet2:
>d44f	b44f	00 65					.text	0,$65,""               ; $80 !0:EOF
>d451	b451	00 58					.text	0,$58,""               ; $81 !1:SH1
>d453	b453	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d455	b455	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d45a	b45a	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d45f	b45f	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d464	b464	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d469	b469	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d46e	b46e	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d473	b473	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d478	b478	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d47d	b47d	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d482	b482	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d487	b487	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d48c	b48c	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d491	b491	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d496	b496	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d49b	b49b	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d4a0	b4a0	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d4a5	b4a5	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d4aa	b4aa	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d4af	b4af	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4b4	b4b4	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4b9	b4b9	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4be	b4be	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4c3	b4c3	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4c8	b4c8	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4cd	b4cd	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4d2	b4d2	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4d7	b4d7	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4dc	b4dc	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4e1	b4e1	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4e6	b4e6	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4eb	b4eb	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4f0	b4f0	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4f5	b4f5	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4fa	b4fa	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4ff	b4ff	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d504	b504	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d509	b509	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d50e	b50e	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d513	b513	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d518	b518	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d51d	b51d	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d522	b522	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d527	b527	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d52c	b52c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d531	b531	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d536	b536	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d53b	b53b	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d540	b540	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d545	b545	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d54a	b54a	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d54f	b54f	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d554	b554	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d559	b559	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d55e	b55e	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d563	b563	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d568	b568	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d56d	b56d	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d572	b572	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d577	b577	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d57c	b57c	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d581	b581	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d586	b586	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d58b	b58b	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d590	b590	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d595	b595	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d59a	b59a	ff					.text	$FF
.d59b	b59b					Export_TKListConvertLine:
.d59b	b59b	48		pha				pha 								; save indent on the stack
.d59c	b59c	9c 19 04	stz $0419			stz 	tbOffset
.d59f	b59f	9c 29 04	stz $0429			stz 	tokenBuffer
.d5a2	b5a2	9c 25 04	stz $0425			stz 	currentListColour
.d5a5	b5a5	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d5a7	b5a7	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d5aa	b5aa	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d5ac	b5ac	b1 30		lda ($30),y			lda 	(codePtr),y
.d5ae	b5ae	aa		tax				tax
.d5af	b5af	88		dey				dey
.d5b0	b5b0	b1 30		lda ($30),y			lda 	(codePtr),y
.d5b2	b5b2	20 95 b7	jsr $b795			jsr 	LCLWriteNumberXA
.d5b5	b5b5	68		pla				pla 								; adjustment to indent
.d5b6	b5b6	48		pha				pha 								; save on stack
.d5b7	b5b7	10 0c		bpl $b5c5			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5b9	b5b9	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5ba	b5ba	6d 22 04	adc $0422			adc 	listIndent
.d5bd	b5bd	8d 22 04	sta $0422			sta 	listIndent
.d5c0	b5c0	10 03		bpl $b5c5			bpl 	_LCNoAdjust
.d5c2	b5c2	9c 22 04	stz $0422			stz 	listIndent
.d5c5	b5c5					_LCNoAdjust:
.d5c5	b5c5	18		clc				clc		 							; work out actual indent.
.d5c6	b5c6	ad 22 04	lda $0422			lda 	listIndent
.d5c9	b5c9	0a		asl a				asl 	a
.d5ca	b5ca	69 07		adc #$07			adc 	#7
.d5cc	b5cc	85 36		sta $36				sta 	zTemp0
.d5ce	b5ce					_LCPadOut:
.d5ce	b5ce	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5d0	b5d0	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d5d3	b5d3	ad 19 04	lda $0419			lda 	tbOffset
.d5d6	b5d6	c5 36		cmp $36				cmp 	zTemp0
.d5d8	b5d8	d0 f4		bne $b5ce			bne 	_LCPadOut
.d5da	b5da	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5dc	b5dc					_LCMainLoop:
.d5dc	b5dc	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5de	b5de	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d5e1	b5e1	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e3	b5e3	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5e5	b5e5	f0 17		beq $b5fe			beq 	_LCExit
.d5e7	b5e7	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5e9	b5e9	90 1e		bcc $b609			bcc 	_LCDoubles
.d5eb	b5eb	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5ed	b5ed	90 2a		bcc $b619			bcc 	_LCShiftPunc
.d5ef	b5ef	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5f1	b5f1	90 35		bcc $b628			bcc 	_LCPunctuation
.d5f3	b5f3	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5f5	b5f5	90 51		bcc $b648			bcc 	_LCIdentifiers
.d5f7	b5f7	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5f9	b5f9	90 73		bcc $b66e			bcc 	_LCTokens
.d5fb	b5fb	4c ce b6	jmp $b6ce			jmp 	_LCData 					; 254-5 are data objects
.d5fe	b5fe					_LCExit:
.d5fe	b5fe	68		pla				pla 								; get old indent adjust
.d5ff	b5ff	30 07		bmi $b608			bmi 	_LCExit2
.d601	b601	18		clc				clc 								; add to indent if +ve
.d602	b602	6d 22 04	adc $0422			adc 	listIndent
.d605	b605	8d 22 04	sta $0422			sta 	listIndent
.d608	b608					_LCExit2:
.d608	b608	60		rts				rts
.d609	b609					_LCDoubles:
.d609	b609	48		pha				pha
.d60a	b60a	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d60b	b60b	29 02		and #$02			and 	#2
.d60d	b60d	09 3c		ora #$3c			ora 	#60 						; make < >
.d60f	b60f	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d612	b612	68		pla				pla 								; restore, do lower bit
.d613	b613	29 03		and #$03			and 	#3
.d615	b615	09 3c		ora #$3c			ora 	#60
.d617	b617	80 0f		bra $b628			bra		_LCPunctuation 				; print, increment, loop
.d619	b619					_LCShiftPunc:
.d619	b619	aa		tax				tax 								; save in X
.d61a	b61a	29 07		and #$07			and 	#7 							; lower 3 bits
.d61c	b61c	f0 02		beq $b620			beq 	_LCNoAdd
.d61e	b61e	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d620	b620					_LCNoAdd:
.d620	b620	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d622	b622	90 02		bcc $b626			bcc 	_LCNoAdd2
.d624	b624	09 20		ora #$20			ora 	#32 						; adds $20
.d626	b626					_LCNoAdd2:
.d626	b626	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d628	b628					_LCPunctuation:
.d628	b628	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d62a	b62a	d0 03		bne $b62f			bne 	_LCPContinue
.d62c	b62c	20 43 b7	jsr $b743			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d62f	b62f					_LCPContinue:
.d62f	b62f	c9 2e		cmp #$2e			cmp 	#'.'
.d631	b631	f0 08		beq $b63b			beq 	_LCPIsConstant
.d633	b633	c9 30		cmp #$30			cmp 	#'0'
.d635	b635	90 0b		bcc $b642			bcc 	_LCPNotConstant
.d637	b637	c9 3a		cmp #$3a			cmp 	#'9'+1
.d639	b639	b0 07		bcs $b642			bcs 	_LCPNotConstant
.d63b	b63b					_LCPIsConstant:
.d63b	b63b	48		pha				pha
.d63c	b63c	a9 87		lda #$87			lda 	#CLIConstant+$80
.d63e	b63e	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d641	b641	68		pla				pla
.d642	b642					_LCPNotConstant:
.d642	b642	c8		iny				iny 								; consume character
.d643	b643	20 2d b7	jsr $b72d			jsr 	LCLWrite 					; write it out.
.d646	b646	80 94		bra $b5dc			bra 	_LCMainLoop 				; go round again.
.d648	b648					_LCIdentifiers:
.d648	b648	18		clc				clc 								; convert to physical address
.d649	b649	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d64b	b64b	85 37		sta $37				sta 	zTemp0+1
.d64d	b64d	c8		iny				iny
.d64e	b64e	b1 30		lda ($30),y			lda 	(codePtr),y
.d650	b650	85 36		sta $36				sta 	zTemp0
.d652	b652	c8		iny				iny
.d653	b653	5a		phy				phy 								; save position
.d654	b654	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d656	b656	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d659	b659	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d65b	b65b					_LCOutIdentifier:
.d65b	b65b	c8		iny				iny
.d65c	b65c	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d65e	b65e	29 7f		and #$7f			and 	#$7F
.d660	b660	20 7f b7	jsr $b77f			jsr 	LCLLowerCase
.d663	b663	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d666	b666	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d668	b668	10 f1		bpl $b65b			bpl 	_LCOutIdentifier
.d66a	b66a	7a		ply				ply 								; restore position
.d66b	b66b	4c dc b5	jmp $b5dc			jmp 	_LCMainLoop
.d66e	b66e					_LCTokens:
.d66e	b66e	aa		tax				tax 								; token in X
.d66f	b66f	a9 4f		lda #$4f			lda 	#((KeywordSet2) & $FF)
.d671	b671	85 36		sta $36				sta 	0+zTemp0
.d673	b673	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d675	b675	85 37		sta $37				sta 	1+zTemp0
.d677	b677	e0 82		cpx #$82			cpx 	#$82
.d679	b679	f0 16		beq $b691			beq 	_LCUseShift
.d67b	b67b	a9 5a		lda #$5a			lda 	#((KeywordSet1) & $FF)
.d67d	b67d	85 36		sta $36				sta 	0+zTemp0
.d67f	b67f	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d681	b681	85 37		sta $37				sta 	1+zTemp0
.d683	b683	e0 81		cpx #$81			cpx 	#$81
.d685	b685	f0 0a		beq $b691			beq 	_LCUseShift
.d687	b687	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d689	b689	85 36		sta $36				sta 	0+zTemp0
.d68b	b68b	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d68d	b68d	85 37		sta $37				sta 	1+zTemp0
.d68f	b68f	80 01		bra $b692			bra 	_LCNoShift
.d691	b691					_LCUseShift:
.d691	b691	c8		iny				iny
.d692	b692					_LCNoShift:
.d692	b692	20 57 b7	jsr $b757			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d695	b695	b1 30		lda ($30),y			lda 	(codePtr),y
.d697	b697	aa		tax				tax 								; into X
.d698	b698					_LCFindText:
.d698	b698	ca		dex				dex
.d699	b699	10 0e		bpl $b6a9			bpl 	_LCFoundText 				; found text.
.d69b	b69b	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d69d	b69d	1a		inc a				inc 	a 							; one extra for size
.d69e	b69e	38		sec				sec 								; one extra for checksum
.d69f	b69f	65 36		adc $36				adc 	zTemp0 						; go to next token
.d6a1	b6a1	85 36		sta $36				sta 	zTemp0
.d6a3	b6a3	90 f3		bcc $b698			bcc 	_LCFindText
.d6a5	b6a5	e6 37		inc $37				inc 	zTemp0+1
.d6a7	b6a7	80 ef		bra $b698			bra 	_LCFindText
.d6a9	b6a9					_LCFoundText:
.d6a9	b6a9	5a		phy				phy 								; save List position
.d6aa	b6aa	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d6ac	b6ac	aa		tax				tax
.d6ad	b6ad	a9 86		lda #$86			lda 	#CLIToken+$80
.d6af	b6af	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d6b2	b6b2	a0 02		ldy #$02			ldy 	#2
.d6b4	b6b4					_LCCopyToken:
.d6b4	b6b4	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6b6	b6b6	20 7f b7	jsr $b77f			jsr 	LCLLowerCase
.d6b9	b6b9	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6bc	b6bc	c8		iny				iny
.d6bd	b6bd	ca		dex				dex
.d6be	b6be	d0 f4		bne $b6b4			bne 	_LCCopyToken
.d6c0	b6c0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6c2	b6c2	f0 05		beq $b6c9			beq 	_LCNoSpace
.d6c4	b6c4	a9 20		lda #$20			lda 	#' '
.d6c6	b6c6	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6c9	b6c9					_LCNoSpace:
.d6c9	b6c9	7a		ply				ply 								; restore position.
.d6ca	b6ca	c8		iny				iny 								; consume token
.d6cb	b6cb	4c dc b5	jmp $b5dc			jmp 	_LCMainLoop 				; and go around again.
.d6ce	b6ce					_LCData:
.d6ce	b6ce	48		pha				pha 								; save type $FE/$FF
.d6cf	b6cf	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6d1	b6d1	c9 fe		cmp #$fe			cmp 	#$FE
.d6d3	b6d3	f0 22		beq $b6f7			beq 	_LCHaveOpener
.d6d5	b6d5	a2 22		ldx #$22			ldx 	#'"'
.d6d7	b6d7	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6d9	b6d9	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d6dc	b6dc	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6de	b6de	d0 17		bne $b6f7			bne 	_LCHaveOpener
.d6e0	b6e0	88		dey				dey 								; what precedes it ?
.d6e1	b6e1	b1 30		lda ($30),y			lda 	(codePtr),y
.d6e3	b6e3	c8		iny				iny
.d6e4	b6e4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6e6	b6e6	d0 0f		bne $b6f7			bne 	_LCHaveOpener
.d6e8	b6e8	a9 09		lda #$09			lda 	#9 							; tab
.d6ea	b6ea	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6ed	b6ed	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6ef	b6ef	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6f2	b6f2	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6f4	b6f4	20 24 b7	jsr $b724			jsr 	LCLWriteColour
.d6f7	b6f7					_LCHaveOpener:
.d6f7	b6f7	8a		txa				txa 								; output prefix (# or ")
.d6f8	b6f8	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d6fb	b6fb	c8		iny				iny 								; get count
.d6fc	b6fc	b1 30		lda ($30),y			lda 	(codePtr),y
.d6fe	b6fe	aa		tax				tax
.d6ff	b6ff	c8		iny				iny 								; point at first character
.d700	b700					_LCOutData:
.d700	b700	b1 30		lda ($30),y			lda 	(codePtr),y
.d702	b702	c9 00		cmp #$00			cmp 	#0
.d704	b704	f0 03		beq $b709			beq 	_LCNoPrint
.d706	b706	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d709	b709					_LCNoPrint:
.d709	b709	c8		iny				iny
.d70a	b70a	ca		dex				dex
.d70b	b70b	d0 f3		bne $b700			bne 	_LCOutData
.d70d	b70d	68		pla				pla 								; closing " required ?
.d70e	b70e	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d710	b710	d0 0f		bne $b721			bne 	_LCNoQuote
.d712	b712	a9 22		lda #$22			lda 	#'"'
.d714	b714	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d717	b717	ad 86 07	lda $0786			lda 	EXTTextColour
.d71a	b71a	29 0f		and #$0f			and 	#$0F
.d71c	b71c	09 90		ora #$90			ora 	#$90
.d71e	b71e	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d721	b721					_LCNoQuote:
.d721	b721	4c dc b5	jmp $b5dc			jmp 	_LCMainLoop
.d724	b724					LCLWriteColour:
.d724	b724	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d727	b727	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d72a	b72a	d0 01		bne $b72d			bne 	LCLWrite 					; if different, output it
.d72c	b72c	60		rts				rts
.d72d	b72d					LCLWrite:
.d72d	b72d	da		phx				phx
.d72e	b72e	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d731	b731	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d734	b734	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d737	b737	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d73a	b73a	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d73c	b73c	30 03		bmi $b741			bmi 	_LCLNoColour
.d73e	b73e	8d 23 04	sta $0423			sta 	lcLastCharacter
.d741	b741					_LCLNoColour:
.d741	b741	fa		plx				plx
.d742	b742	60		rts				rts
.d743	b743					LCLDeleteLastSpace:
.d743	b743	48		pha				pha
.d744	b744	da		phx				phx
.d745	b745	ae 19 04	ldx $0419			ldx 	tbOffset
.d748	b748	f0 0a		beq $b754			beq 	_LCDLSExit
.d74a	b74a	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d74d	b74d	c9 20		cmp #$20			cmp 	#' '
.d74f	b74f	d0 03		bne $b754			bne 	_LCDLSExit
.d751	b751	ce 19 04	dec $0419			dec 	tbOffset
.d754	b754					_LCDLSExit:
.d754	b754	fa		plx				plx
.d755	b755	68		pla				pla
.d756	b756	60		rts				rts
.d757	b757					LCLCheckSpaceRequired:
.d757	b757	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d75a	b75a	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d75c	b75c	f0 1b		beq $b779			beq 	_LCCSRSpace
.d75e	b75e	c9 29		cmp #$29			cmp 	#')'
.d760	b760	f0 17		beq $b779			beq 	_LCCSRSpace
.d762	b762	c9 23		cmp #$23			cmp 	#'#'
.d764	b764	f0 13		beq $b779			beq 	_LCCSRSpace
.d766	b766	20 7f b7	jsr $b77f			jsr 	LCLLowerCase 				; saves a little effort
.d769	b769	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d76b	b76b	90 11		bcc $b77e			bcc 	_LCCSRExit
.d76d	b76d	c9 3a		cmp #$3a			cmp 	#"9"+1
.d76f	b76f	90 08		bcc $b779			bcc 	_LCCSRSpace
.d771	b771	c9 61		cmp #$61			cmp 	#"a"
.d773	b773	90 09		bcc $b77e			bcc 	_LCCSRExit
.d775	b775	c9 7b		cmp #$7b			cmp 	#"z"+1
.d777	b777	b0 05		bcs $b77e			bcs 	_LCCSRExit
.d779	b779					_LCCSRSpace:
.d779	b779	a9 20		lda #$20			lda 	#' '
.d77b	b77b	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d77e	b77e					_LCCSRExit:
.d77e	b77e	60		rts				rts
.d77f	b77f					LCLLowerCase:
.d77f	b77f	c9 41		cmp #$41			cmp 	#"A"
.d781	b781	90 06		bcc $b789			bcc 	_LCLLCOut
.d783	b783	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d785	b785	b0 02		bcs $b789			bcs 	_LCLLCOut
.d787	b787	69 20		adc #$20			adc 	#$20
.d789	b789					_LCLLCOut:
.d789	b789	60		rts				rts
.d78a	b78a					LCLUpperCase:
.d78a	b78a	c9 61		cmp #$61			cmp 	#"a"
.d78c	b78c	90 06		bcc $b794			bcc 	_LCLUCOut
.d78e	b78e	c9 7b		cmp #$7b			cmp 	#"z"+1
.d790	b790	b0 02		bcs $b794			bcs 	_LCLUCOut
.d792	b792	e9 1f		sbc #$1f			sbc 	#$1F
.d794	b794					_LCLUCOut:
.d794	b794	60		rts				rts
.d795	b795					LCLWriteNumberXA:
.d795	b795	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d797	b797					_LCLWNLoop1:
.d797	b797	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d799	b799					_LCLWNLoop2:
.d799	b799	48		pha				pha 								; save initial LSB
.d79a	b79a	38		sec				sec
.d79b	b79b	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d79d	b79d	f9 ce b7	sbc $b7ce,y			sbc 	_LCLWNTable,y
.d7a0	b7a0	48		pha				pha
.d7a1	b7a1	8a		txa				txa
.d7a2	b7a2	f9 cf b7	sbc $b7cf,y			sbc 	_LCLWNTable+1,y
.d7a5	b7a5	90 07		bcc $b7ae			bcc 	_LCLWNUnderflow
.d7a7	b7a7	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d7a9	b7a9	aa		tax				tax 								; update X
.d7aa	b7aa	68		pla				pla 								; restore A
.d7ab	b7ab	7a		ply				ply 								; throw original
.d7ac	b7ac	80 eb		bra $b799			bra 	_LCLWNLoop2 				; try again.
.d7ae	b7ae					_LCLWNUnderflow:
.d7ae	b7ae	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d7b0	b7b0	d0 06		bne $b7b8			bne 	_LCLWNOut
.d7b2	b7b2	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7b5	b7b5	3a		dec a				dec 	a
.d7b6	b7b6	f0 04		beq $b7bc			beq 	_LCLWNNext
.d7b8	b7b8					_LCLWNOut:
.d7b8	b7b8	98		tya				tya
.d7b9	b7b9	20 c8 b7	jsr $b7c8			jsr 	_LCLWNOutDigit
.d7bc	b7bc					_LCLWNNext:
.d7bc	b7bc	7a		ply				ply 							 	; restore original value.
.d7bd	b7bd	68		pla				pla
.d7be	b7be	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7c0	b7c0	c8		iny				iny
.d7c1	b7c1	c8		iny				iny
.d7c2	b7c2	84 37		sty $37				sty 	zTemp0+1
.d7c4	b7c4	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7c6	b7c6	d0 cf		bne $b797			bne 	_LCLWNLoop1
.d7c8	b7c8					_LCLWNOutDigit:
.d7c8	b7c8	09 30		ora #$30			ora 	#'0'
.d7ca	b7ca	20 2d b7	jsr $b72d			jsr 	LCLWrite
.d7cd	b7cd	60		rts				rts
.d7ce	b7ce					_LCLWNTable:
>d7ce	b7ce	10 27						.word 	10000
>d7d0	b7d0	e8 03						.word 	1000
>d7d2	b7d2	64 00						.word 	100
>d7d4	b7d4	0a 00						.word 	10
.d7d6	b7d6					TOKSearchTable:
.d7d6	b7d6	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7d8	b7d8	85 36		sta $36				sta 	zTemp0
.d7da	b7da	a0 00		ldy #$00			ldy 	#0
.d7dc	b7dc	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7de	b7de	85 38		sta $38				sta 	zTemp1
.d7e0	b7e0					_TSTLoop:
.d7e0	b7e0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7e2	b7e2	30 49		bmi $b82d			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7e4	b7e4	f0 2e		beq $b814			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7e6	b7e6	c8		iny				iny 								; get the hash
.d7e7	b7e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7e9	b7e9	88		dey				dey
.d7ea	b7ea	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7ed	b7ed	d0 25		bne $b814			bne 	_TSTNext
.d7ef	b7ef	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7f2	b7f2	38		sec				sec
.d7f3	b7f3	ed 00 04	sbc $0400			sbc 	identStart
.d7f6	b7f6	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7f8	b7f8	d0 1a		bne $b814			bne 	_TSTNext
.d7fa	b7fa	5a		phy				phy 								; save Y , we might fail to match.
.d7fb	b7fb	c8		iny				iny 								; point to text
.d7fc	b7fc	c8		iny				iny
.d7fd	b7fd	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d800	b800					_TSTCompareName:
.d800	b800	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d803	b803	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d805	b805	d0 0c		bne $b813			bne 	_TSTNextPullY 				; fail, pullY and do next
.d807	b807	e8		inx				inx
.d808	b808	c8		iny				iny
.d809	b809	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d80c	b80c	d0 f2		bne $b800			bne 	_TSTCompareName
.d80e	b80e	7a		ply				ply 								; throw Y
.d80f	b80f	a5 38		lda $38				lda 	zTemp1 						; get token #
.d811	b811	38		sec				sec 								; return with CS = passed.
.d812	b812	60		rts				rts
.d813	b813					_TSTNextPullY:
.d813	b813	7a		ply				ply 								; restore current, fall through.
.d814	b814					_TSTNext:
.d814	b814	e6 38		inc $38				inc 	zTemp1 						; token counter
.d816	b816	98		tya				tya
.d817	b817	18		clc				clc
.d818	b818	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d81a	b81a	1a		inc a				inc 	a 							; +1
.d81b	b81b	1a		inc a				inc 	a 							; +2
.d81c	b81c	a8		tay				tay
.d81d	b81d	10 c1		bpl $b7e0			bpl 	_TSTLoop 					; if Y < $80 loop back
.d81f	b81f	98		tya				tya 								; add Y to zTemp0 and reset Y
.d820	b820	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d822	b822	18		clc				clc  								; but have tables > 255 bytes
.d823	b823	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d825	b825	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d827	b827	90 b7		bcc $b7e0			bcc 	_TSTLoop
.d829	b829	e6 37		inc $37				inc 	zTemp0+1
.d82b	b82b	80 b3		bra $b7e0			bra 	_TSTLoop
.d82d	b82d					_TSTFail:
.d82d	b82d	18		clc				clc
.d82e	b82e	60		rts				rts
.d82f	b82f					Export_TKTokeniseLine:
.d82f	b82f	20 fc b9	jsr $b9fc			jsr 	LCLFixLineBufferCase 		; fix line case
.d832	b832	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d834	b834	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d837	b837	9c 27 04	stz $0427			stz 	tokenLineNumber
.d83a	b83a	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d83d	b83d	a2 ff		ldx #$ff			ldx 	#$FF
.d83f	b83f					_TKFindFirst:
.d83f	b83f	e8		inx				inx
.d840	b840	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d843	b843	f0 62		beq $b8a7			beq 	_TKExit
.d845	b845	c9 20		cmp #$20			cmp 	#' '
.d847	b847	90 f6		bcc $b83f			bcc 	_TKFindFirst
.d849	b849	c9 30		cmp #$30			cmp 	#'0'
.d84b	b84b	90 07		bcc $b854			bcc 	_TKNoLineNumber
.d84d	b84d	c9 3a		cmp #$3a			cmp 	#'9'+1
.d84f	b84f	b0 03		bcs $b854			bcs 	_TKNoLineNumber
.d851	b851	20 26 ba	jsr $ba26			jsr 	TOKExtractLineNumber
.d854	b854					_TKNoLineNumber:
.d854	b854					_TKTokeniseLoop:
.d854	b854	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d857	b857	f0 4e		beq $b8a7			beq 	_TKExit
.d859	b859	e8		inx				inx
.d85a	b85a	c9 20		cmp #$20			cmp 	#' '
.d85c	b85c	f0 f6		beq $b854			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d85e	b85e	ca		dex				dex 								; undo last get, A contains character, X is position.
.d85f	b85f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d861	b861	f0 68		beq $b8cb			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d863	b863	c9 41		cmp #$41			cmp 	#'A'
.d865	b865	90 04		bcc $b86b			bcc 	_TKTokenisePunctuation
.d867	b867	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d869	b869	90 60		bcc $b8cb			bcc 	_TKTokeniseIdentifier
.d86b	b86b					_TKTokenisePunctuation:
.d86b	b86b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d86d	b86d	f0 2e		beq $b89d			beq 	_TKString
.d86f	b86f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d871	b871	f0 2f		beq $b8a2			beq 	_TKHexConstant
.d873	b873	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d875	b875	f0 36		beq $b8ad			beq 	_TKCheckDouble
.d877	b877	c9 3e		cmp #$3e			cmp 	#'>'
.d879	b879	f0 32		beq $b8ad			beq 	_TKCheckDouble
.d87b	b87b					_TKStandardPunctuation:
.d87b	b87b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d87e	b87e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d880	b880	90 0e		bcc $b890			bcc 	_TKNoShift
.d882	b882	48		pha				pha 								; save. we are about to convert this punctuation token from
.d883	b883	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d885	b885	85 36		sta $36				sta 	zTemp0
.d887	b887	68		pla				pla
.d888	b888	29 20		and #$20			and 	#32 						; bit 5
.d88a	b88a	4a		lsr a				lsr 	a 							; shift into bit 3
.d88b	b88b	4a		lsr a				lsr 	a
.d88c	b88c	05 36		ora $36				ora 	zTemp0
.d88e	b88e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d890	b890					_TKNoShift:
.d890	b890	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte 				; write the punctuation character
.d893	b893	e8		inx				inx 								; consume the character
.d894	b894	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d896	b896	d0 bc		bne $b854			bne 	_TKTokeniseLoop 			; and loop round again.
.d898	b898	20 5e b9	jsr $b95e			jsr 	TOKCheckComment 			; comment checl
.d89b	b89b	80 b7		bra $b854			bra 	_TKTokeniseLoop
.d89d	b89d					_TKString:
.d89d	b89d	20 8b b9	jsr $b98b			jsr 	TOKTokenString
.d8a0	b8a0	80 b2		bra $b854			bra 	_TKTokeniseLoop
.d8a2	b8a2					_TKHexConstant:
.d8a2	b8a2	20 c6 b9	jsr $b9c6			jsr 	TOKHexConstant
.d8a5	b8a5	80 ad		bra $b854			bra 	_TKTokeniseLoop
.d8a7	b8a7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d8a9	b8a9	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d8ac	b8ac	60		rts				rts
.d8ad	b8ad					_TKCheckDouble:
.d8ad	b8ad	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d8b0	b8b0	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8b2	b8b2	90 c7		bcc $b87b			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8b4	b8b4	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8b6	b8b6	b0 c3		bcs $b87b			bcs 	_TKStandardPunctuation
.d8b8	b8b8	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8bb	b8bb	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8bd	b8bd	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8be	b8be	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8c1	b8c1	38		sec				sec
.d8c2	b8c2	e9 3c		sbc #$3c			sbc 	#'<'
.d8c4	b8c4	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8c7	b8c7	e8		inx				inx 								; consume both
.d8c8	b8c8	e8		inx				inx
.d8c9	b8c9	80 89		bra $b854			bra 	_TKTokeniseLoop
.d8cb	b8cb					_TKTokeniseIdentifier:
.d8cb	b8cb	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8ce	b8ce	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8d1	b8d1					_TKCheckLoop:
.d8d1	b8d1	e8		inx				inx 								; look at next, we know first is identifier already.
.d8d2	b8d2	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8d5	b8d5	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8d7	b8d7	f0 f8		beq $b8d1			beq 	_TKCheckLoop
.d8d9	b8d9	c9 30		cmp #$30			cmp	 	#"0"
.d8db	b8db	90 0c		bcc $b8e9			bcc 	_TKEndIdentifier
.d8dd	b8dd	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8df	b8df	90 f0		bcc $b8d1			bcc 	_TKCheckLoop
.d8e1	b8e1	c9 41		cmp #$41			cmp	 	#"A"
.d8e3	b8e3	90 04		bcc $b8e9			bcc 	_TKEndIdentifier
.d8e5	b8e5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8e7	b8e7	90 e8		bcc $b8d1			bcc 	_TKCheckLoop
.d8e9	b8e9					_TKEndIdentifier:
.d8e9	b8e9	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8ec	b8ec	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8ee	b8ee	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8f0	b8f0	f0 06		beq $b8f8			beq 	_TKHasTypeCharacter
.d8f2	b8f2	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8f4	b8f4	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8f6	b8f6	d0 07		bne $b8ff			bne 	_TKNoTypeCharacter
.d8f8	b8f8					_TKHasTypeCharacter:
.d8f8	b8f8	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8fb	b8fb	e8		inx				inx 								; consume the type character
.d8fc	b8fc	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8ff	b8ff					_TKNoTypeCharacter:
.d8ff	b8ff	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d901	b901	d0 09		bne $b90c			bne 	_TKNoArray
.d903	b903	e8		inx				inx 								; skip the (
.d904	b904	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d907	b907	09 04		ora #$04			ora 	#$04
.d909	b909	8d 04 04	sta $0404			sta 	identTypeByte
.d90c	b90c					_TKNoArray:
.d90c	b90c	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d90f	b90f	20 e7 b9	jsr $b9e7			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d912	b912	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d914	b914	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d916	b916	20 d6 b7	jsr $b7d6			jsr 	TOKSearchTable
.d919	b919	a2 00		ldx #$00			ldx 	#0
.d91b	b91b	b0 1f		bcs $b93c			bcs 	_TKFoundToken
.d91d	b91d	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d91f	b91f	a9 5a		lda #$5a			lda 	#(KeywordSet1) & $FF
.d921	b921	20 d6 b7	jsr $b7d6			jsr 	TOKSearchTable
.d924	b924	a2 81		ldx #$81			ldx 	#$81
.d926	b926	b0 14		bcs $b93c			bcs 	_TKFoundToken
.d928	b928	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d92a	b92a	a9 4f		lda #$4f			lda 	#(KeywordSet2) & $FF
.d92c	b92c	20 d6 b7	jsr $b7d6			jsr 	TOKSearchTable
.d92f	b92f	a2 82		ldx #$82			ldx 	#$82
.d931	b931	b0 09		bcs $b93c			bcs 	_TKFoundToken
.d933	b933	20 77 ba	jsr $ba77			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d936	b936	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d939	b939	4c 54 b8	jmp $b854			jmp 	_TKTokeniseLoop 			; and go round again.
.d93c	b93c					_TKFoundToken:
.d93c	b93c	48		pha				pha 								; save token
.d93d	b93d	8a		txa				txa 								; shift in X, is there one ?
.d93e	b93e	f0 03		beq $b943			beq 	_TKNoTShift
.d940	b940	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte 				; if so, write it out
.d943	b943					_TKNoTShift:
.d943	b943	68		pla				pla 								; restore and write token
.d944	b944	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d947	b947	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d949	b949	d0 0d		bne $b958			bne 	_TKNotRem 			 		; not shifted ?
.d94b	b94b	c9 d5		cmp #$d5			cmp 	#KWD_REM
.d94d	b94d	d0 09		bne $b958			bne 	_TKNotRem
.d94f	b94f	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d952	b952	20 5e b9	jsr $b95e			jsr 	TOKCheckComment
.d955	b955	4c 54 b8	jmp $b854			jmp 	_TKTokeniseLoop
.d958	b958					_TKNotRem:
.d958	b958	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d95b	b95b	4c 54 b8	jmp $b854			jmp 	_TKTokeniseLoop 			; and go round again.
.d95e	b95e					TOKCheckComment:
.d95e	b95e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d961	b961	e8		inx				inx
.d962	b962	c9 20		cmp #$20			cmp 	#' '
.d964	b964	f0 f8		beq $b95e			beq 	TOKCheckComment
.d966	b966	ca		dex				dex 								; first non space character
.d967	b967	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d969	b969	f0 1f		beq $b98a			beq 	_TOKCCExit 					; then we are okay
.d96b	b96b	c9 00		cmp #$00			cmp 	#0 							; EOL
.d96d	b96d	f0 1b		beq $b98a			beq 	_TOKCCExit 					; then we are okay
.d96f	b96f	da		phx				phx
.d970	b970					_TOKCCLowerCase:
.d970	b970	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d973	b973	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d975	b975	90 09		bcc $b980			bcc 	_TOKKCNotUC
.d977	b977	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d979	b979	b0 05		bcs $b980			bcs 	_TOKKCNotUC
.d97b	b97b	49 20		eor #$20			eor 	#$20
.d97d	b97d	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d980	b980					_TOKKCNotUC:
.d980	b980	e8		inx				inx
.d981	b981	c9 00		cmp #$00			cmp 	#0
.d983	b983	d0 eb		bne $b970			bne 	_TOKCCLowerCase
.d985	b985	fa		plx				plx
.d986	b986	ca		dex				dex 								; tokenise string expects initial skip.
.d987	b987	20 8b b9	jsr $b98b			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d98a	b98a					_TOKCCExit:
.d98a	b98a	60		rts				rts
.d98b	b98b					TOKTokenString:
.d98b	b98b	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d98d	b98d	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d990	b990	e8		inx				inx									; start of quoted string.
.d991	b991	da		phx				phx 								; push start of string on top
.d992	b992	ca		dex				dex 								; because we pre-increment
.d993	b993					_TSFindEnd:
.d993	b993	e8		inx				inx
.d994	b994	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d997	b997	f0 04		beq $b99d			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d999	b999	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d99b	b99b	d0 f6		bne $b993			bne 	_TSFindEnd
.d99d	b99d					_TSEndOfString:
.d99d	b99d	7a		ply				ply  								; so now Y is first character, X is character after end.
.d99e	b99e	48		pha				pha 								; save terminating character
.d99f	b99f	20 a7 b9	jsr $b9a7			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d9a2	b9a2	68		pla				pla 								; terminating character
.d9a3	b9a3	f0 01		beq $b9a6			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d9a5	b9a5	e8		inx				inx
.d9a6	b9a6					_TSNotQuote:
.d9a6	b9a6	60		rts				rts
.d9a7	b9a7					TOKWriteBlockXY:
.d9a7	b9a7	86 36		stx $36				stx 	zTemp0 						; save end character
.d9a9	b9a9	98		tya				tya 								; use 2's complement to work out the byte size
.d9aa	b9aa	49 ff		eor #$ff			eor 	#$FF
.d9ac	b9ac	38		sec				sec
.d9ad	b9ad	65 36		adc $36				adc 	zTemp0
.d9af	b9af	1a		inc a				inc 	a 							; one extra for NULL
.d9b0	b9b0	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9b3	b9b3					_TOBlockLoop:
.d9b3	b9b3	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9b5	b9b5	f0 09		beq $b9c0			beq 	_TOBlockExit
.d9b7	b9b7	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9ba	b9ba	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9bd	b9bd	c8		iny				iny
.d9be	b9be	80 f3		bra $b9b3			bra 	_TOBlockLoop
.d9c0	b9c0					_TOBlockExit:
.d9c0	b9c0	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9c2	b9c2	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9c5	b9c5	60		rts				rts
.d9c6	b9c6					TOKHexConstant:
.d9c6	b9c6	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9c8	b9c8	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.d9cb	b9cb	e8		inx				inx									; start of quoted string.
.d9cc	b9cc	da		phx				phx 								; push start of constant on top
.d9cd	b9cd	ca		dex				dex
.d9ce	b9ce					_THFindLoop:
.d9ce	b9ce	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9cf	b9cf	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9d2	b9d2	c9 30		cmp #$30			cmp 	#"0"
.d9d4	b9d4	90 0c		bcc $b9e2			bcc 	_THFoundEnd
.d9d6	b9d6	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9d8	b9d8	90 f4		bcc $b9ce			bcc 	_THFindLoop
.d9da	b9da	c9 41		cmp #$41			cmp 	#"A"
.d9dc	b9dc	90 04		bcc $b9e2			bcc 	_THFoundEnd
.d9de	b9de	c9 47		cmp #$47			cmp 	#"F"+1
.d9e0	b9e0	90 ec		bcc $b9ce			bcc 	_THFindLoop
.d9e2	b9e2					_THFoundEnd:
.d9e2	b9e2	7a		ply				ply 								; restore start
.d9e3	b9e3	20 a7 b9	jsr $b9a7			jsr 	TOKWriteBlockXY 			; output the block
.d9e6	b9e6	60		rts				rts
.d9e7	b9e7					TOKCalculateHash:
.d9e7	b9e7	da		phx				phx
.d9e8	b9e8	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9eb	b9eb	a9 00		lda #$00			lda 	#0
.d9ed	b9ed					_TCHLoop:
.d9ed	b9ed	18		clc				clc
.d9ee	b9ee	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9f1	b9f1	e8		inx				inx
.d9f2	b9f2	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9f5	b9f5	d0 f6		bne $b9ed			bne 	_TCHLoop
.d9f7	b9f7	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9fa	b9fa	fa		plx				plx
.d9fb	b9fb	60		rts				rts
.d9fc	b9fc					LCLFixLineBufferCase:
.d9fc	b9fc	a2 00		ldx #$00			ldx 	#0
.d9fe	b9fe					_FLBCLoop:
.d9fe	b9fe	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.da01	ba01	f0 22		beq $ba25			beq 	_FLBCExit 					; end of string.
.da03	ba03	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.da05	ba05	f0 11		beq $ba18			beq 	_FLBCInQuotes
.da07	ba07	e8		inx				inx
.da08	ba08	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.da0a	ba0a	90 f2		bcc $b9fe			bcc 	_FLBCLoop
.da0c	ba0c	c9 7b		cmp #$7b			cmp 	#'z'+1
.da0e	ba0e	b0 ee		bcs $b9fe			bcs 	_FLBCLoop
.da10	ba10	38		sec				sec 								; make U/C
.da11	ba11	e9 20		sbc #$20			sbc 	#32
.da13	ba13	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da16	ba16	80 e6		bra $b9fe			bra 	_FLBCLoop
.da18	ba18					_FLBCInQuotes:
.da18	ba18	e8		inx				inx 								; advance
.da19	ba19	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da1c	ba1c	f0 07		beq $ba25			beq 	_FLBCExit 					; exit on EOS
.da1e	ba1e	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da20	ba20	d0 f6		bne $ba18			bne 	_FLBCInQuotes
.da22	ba22	e8		inx				inx 								; skip over it
.da23	ba23	80 d9		bra $b9fe			bra 	_FLBCLoop
.da25	ba25					_FLBCExit:
.da25	ba25	60		rts				rts
.da26	ba26					TOKExtractLineNumber:
.da26	ba26	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da29	ba29	48		pha				pha
.da2a	ba2a	ad 27 04	lda $0427			lda 	tokenLineNumber
.da2d	ba2d	48		pha				pha
.da2e	ba2e	20 64 ba	jsr $ba64			jsr 	_LCLNTimes2 				; line # x 2
.da31	ba31	20 64 ba	jsr $ba64			jsr 	_LCLNTimes2 				; line # x 4
.da34	ba34	18		clc				clc 								; add stacked value
.da35	ba35	68		pla				pla
.da36	ba36	6d 27 04	adc $0427			adc 	tokenLineNumber
.da39	ba39	8d 27 04	sta $0427			sta 	tokenLineNumber
.da3c	ba3c	68		pla				pla
.da3d	ba3d	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da40	ba40	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da43	ba43	20 64 ba	jsr $ba64			jsr 	_LCLNTimes2 				; line # x 10
.da46	ba46	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da49	ba49	e8		inx				inx
.da4a	ba4a	29 0f		and #$0f			and 	#15 						; add to line #
.da4c	ba4c	18		clc				clc
.da4d	ba4d	6d 27 04	adc $0427			adc 	tokenLineNumber
.da50	ba50	8d 27 04	sta $0427			sta 	tokenLineNumber
.da53	ba53	90 03		bcc $ba58			bcc 	_TLENNoCarry
.da55	ba55	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da58	ba58					_TLENNoCarry:
.da58	ba58	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da5b	ba5b	c9 30		cmp #$30			cmp 	#'0'
.da5d	ba5d	90 04		bcc $ba63			bcc 	_TLENExit
.da5f	ba5f	c9 3a		cmp #$3a			cmp 	#'9'+1
.da61	ba61	90 c3		bcc $ba26			bcc 	TOKExtractLineNumber
.da63	ba63					_TLENExit:
.da63	ba63	60		rts				rts
.da64	ba64					_LCLNTimes2:
.da64	ba64	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da67	ba67	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da6a	ba6a	60		rts				rts
.da6b	ba6b					TOKWriteByte:
.da6b	ba6b	da		phx				phx
.da6c	ba6c	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da6f	ba6f	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da72	ba72	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da75	ba75	fa		plx				plx
.da76	ba76	60		rts				rts
.da77	ba77					TOKCheckCreateVariableRecord:
.da77	ba77	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da79	ba79	85 36		sta $36				sta 	0+zTemp0
.da7b	ba7b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da7d	ba7d	85 37		sta $37				sta 	1+zTemp0
.da7f	ba7f					_CCVSearch:
.da7f	ba7f	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da81	ba81	f0 2c		beq $baaf			beq 	_CCVFail
.da83	ba83	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da85	ba85	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da87	ba87	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da8a	ba8a	d0 16		bne $baa2			bne 	_CCVNext
.da8c	ba8c	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da8e	ba8e	ae 00 04	ldx $0400			ldx 	identStart
.da91	ba91					_CCVCompare:
.da91	ba91	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da94	ba94	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da96	ba96	e8		inx				inx 								; advance pointers
.da97	ba97	c8		iny				iny
.da98	ba98	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da99	ba99	d0 07		bne $baa2			bne 	_CCVNext  					; didn't match go to next.
.da9b	ba9b	90 f4		bcc $ba91			bcc 	_CCVCompare 				; not finished yet.
.da9d	ba9d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.daa0	baa0	f0 41		beq $bae3			beq 	_CCVFound 					; yes, we were successful
.daa2	baa2					_CCVNext:
.daa2	baa2	18		clc				clc 								; go to next record.
.daa3	baa3	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.daa5	baa5	65 36		adc $36				adc 	zTemp0
.daa7	baa7	85 36		sta $36				sta 	zTemp0
.daa9	baa9	90 d4		bcc $ba7f			bcc 	_CCVSearch
.daab	baab	e6 37		inc $37				inc 	zTemp0+1
.daad	baad	80 d0		bra $ba7f			bra 	_CCVSearch
.daaf	baaf					_CCVFail:
.daaf	baaf	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.dab1	bab1	ad 03 04	lda $0403			lda 	identHash
.dab4	bab4	91 36		sta ($36),y			sta 	(zTemp0),y
.dab6	bab6	c8		iny				iny 								; offset 2 is the type byte
.dab7	bab7	ad 04 04	lda $0404			lda 	identTypeByte
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	c8		iny				iny
.dabd	babd					_CCVData:
.dabd	babd	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.dabf	babf	91 36		sta ($36),y			sta 	(zTemp0),y
.dac1	bac1	c8		iny				iny
.dac2	bac2	c0 08		cpy #$08			cpy 	#8
.dac4	bac4	90 f7		bcc $babd			bcc 	_CCVData
.dac6	bac6	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dac9	bac9					_CCVCopyName:
.dac9	bac9	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.dacc	bacc	91 36		sta ($36),y			sta 	(zTemp0),y
.dace	bace	e8		inx				inx
.dacf	bacf	c8		iny				iny
.dad0	bad0	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dad3	bad3	d0 f4		bne $bac9			bne 	_CCVCopyName
.dad5	bad5	98		tya				tya 								; patch offset
.dad6	bad6	92 36		sta ($36)			sta 	(zTemp0)
.dad8	bad8	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dada	bada	91 36		sta ($36),y			sta 	(zTemp0),y
.dadc	badc	88		dey				dey
.dadd	badd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dadf	badf	09 80		ora #$80			ora 	#$80
.dae1	bae1	91 36		sta ($36),y			sta 	(zTemp0),y
.dae3	bae3					_CCVFound:
.dae3	bae3	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dae5	bae5	38		sec				sec
.dae6	bae6	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dae8	bae8	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.daea	baea	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.daed	baed	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.daef	baef	20 6b ba	jsr $ba6b			jsr 	TOKWriteByte
.daf2	baf2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.daf3	baf3					SNDCheckChannel:
.daf3	baf3	aa		tax				tax
.daf4	baf4	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; currently playing a note
.daf7	baf7	d0 38		bne $bb31			bne 	_SNDCCExit
.daf9	baf9	da		phx				phx 								; save current channel
.dafa	bafa	8a		txa				txa 								; put in A
.dafb	bafb	20 77 bb	jsr $bb77			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dafe	bafe	68		pla				pla 								; channel # in A
.daff	baff	90 30		bcc $bb31			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.db01	bb01	a8		tay				tay 								; Y is the channel #
.db02	bb02	bd 44 08	lda $0844,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.db05	bb05	99 43 09	sta $0943,y			sta 	SNDPitchLow,y
.db08	bb08	bd 45 08	lda $0845,x			lda 	SNDQueue+2,x
.db0b	bb0b	99 47 09	sta $0947,y			sta 	SNDPitchHigh,y
.db0e	bb0e	bd 46 08	lda $0846,x			lda 	SNDQueue+3,x
.db11	bb11	99 4b 09	sta $094b,y			sta 	SNDVolume,y
.db14	bb14	bd 47 08	lda $0847,x			lda 	SNDQueue+4,x
.db17	bb17	99 4f 09	sta $094f,y			sta 	SNDTimeLeft,y
.db1a	bb1a	bd 48 08	lda $0848,x			lda 	SNDQueue+5,x
.db1d	bb1d	99 53 09	sta $0953,y			sta 	SNDAdjustLow,y
.db20	bb20	bd 49 08	lda $0849,x			lda 	SNDQueue+6,x
.db23	bb23	99 57 09	sta $0957,y			sta 	SNDAdjustHigh,y
.db26	bb26	5a		phy				phy 								; save channel #
.db27	bb27	20 91 bb	jsr $bb91			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db2a	bb2a	ce 42 08	dec $0842			dec 	SNDLength 					; reduce the queue length.
.db2d	bb2d	68		pla				pla
.db2e	bb2e	20 32 bb	jsr $bb32			jsr 	SNDUpdateNote 				; update channel A
.db31	bb31					_SNDCCExit:
.db31	bb31	60		rts				rts
.db32	bb32					SNDUpdateNote:
.db32	bb32	aa		tax				tax 								; so we can access records
.db33	bb33	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db34	bb34	0a		asl a				asl 	a
.db35	bb35	0a		asl a				asl 	a
.db36	bb36	0a		asl a				asl 	a
.db37	bb37	0a		asl a				asl 	a
.db38	bb38	8d 41 08	sta $0841			sta 	SNDChannelBits
.db3b	bb3b	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; are we silent
.db3e	bb3e	f0 2e		beq $bb6e			beq 	_SNDUNIsSilent
.db40	bb40	ad 41 08	lda $0841			lda 	SNDChannelBits 				; push channel bits on stack
.db43	bb43	48		pha				pha
.db44	bb44	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db47	bb47	29 0f		and #$0f			and 	#$0F
.db49	bb49	0d 41 08	ora $0841			ora 	SNDChannelBits 				; set channel bits
.db4c	bb4c	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db4e	bb4e	20 db bb	jsr $bbdb			jsr 	SNDWritePorts
.db51	bb51	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db54	bb54	8d 41 08	sta $0841			sta 	SNDChannelBits
.db57	bb57	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.db5a	bb5a	4e 41 08	lsr $0841			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db5d	bb5d	6a		ror a				ror 	a
.db5e	bb5e	4e 41 08	lsr $0841			lsr 	SNDChannelBits
.db61	bb61	6a		ror a				ror 	a
.db62	bb62	4a		lsr a				lsr 	a 							; put in bits 0-5
.db63	bb63	4a		lsr a				lsr 	a
.db64	bb64	20 db bb	jsr $bbdb			jsr 	SNDWritePorts 				; write as rest of pitch register
.db67	bb67	68		pla				pla
.db68	bb68	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db6a	bb6a	20 db bb	jsr $bbdb			jsr 	SNDWritePorts
.db6d	bb6d	60		rts				rts
.db6e	bb6e					_SNDUNIsSilent:
.db6e	bb6e	ad 41 08	lda $0841			lda 	SNDChannelBits 				; channel bits
.db71	bb71	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db73	bb73	20 db bb	jsr $bbdb			jsr 	SNDWritePorts 				; write to the ports
.db76	bb76	60		rts				rts
.db77	bb77					SNDFindNextNoteForA:
.db77	bb77	ac 42 08	ldy $0842			ldy 	SNDLength 					; queue size into Y
.db7a	bb7a	f0 13		beq $bb8f			beq 	_SNDFNNFail 				; queue empty.
.db7c	bb7c	a2 00		ldx #$00			ldx 	#0
.db7e	bb7e					_SNDFNNSearch:
.db7e	bb7e	dd 43 08	cmp $0843,x			cmp 	SNDQueue,x 					; does it match the channel
.db81	bb81	38		sec				sec
.db82	bb82	f0 0c		beq $bb90			beq 	_SNDFNNExit 				; if so exit with CS.
.db84	bb84	e8		inx				inx 								; next queue slot.
.db85	bb85	e8		inx				inx
.db86	bb86	e8		inx				inx
.db87	bb87	e8		inx				inx
.db88	bb88	e8		inx				inx
.db89	bb89	e8		inx				inx
.db8a	bb8a	e8		inx				inx
.db8b	bb8b	e8		inx				inx
.db8c	bb8c	88		dey				dey 								; done the whole queue
.db8d	bb8d	d0 ef		bne $bb7e			bne 	_SNDFNNSearch 				; no, go back.
.db8f	bb8f					_SNDFNNFail:
.db8f	bb8f	18		clc				clc
.db90	bb90					_SNDFNNExit:
.db90	bb90	60		rts				rts
.db91	bb91					SNDDeleteXFromQueue:
.db91	bb91	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db93	bb93	f0 09		beq $bb9e			beq 	_SNDDXExit
.db95	bb95	bd 4b 08	lda $084b,x			lda 	SNDQueue+8,x
.db98	bb98	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.db9b	bb9b	e8		inx				inx
.db9c	bb9c	80 f3		bra $bb91			bra 	SNDDeleteXFromQueue
.db9e	bb9e					_SNDDXExit:
.db9e	bb9e	60		rts				rts
.0841						SNDChannelBits:
>0841								.fill 	1
.db9f	bb9f					SNDQueueRequest:
.db9f	bb9f	86 36		stx $36				stx 	zTemp0						; save queue address
.dba1	bba1	84 37		sty $37				sty 	zTemp0+1
.dba3	bba3	ae 42 08	ldx $0842			ldx 	SNDLength 					; queue is full, can't take any more.
.dba6	bba6	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dba8	bba8	f0 21		beq $bbcb			beq 	_SNDQRExit
.dbaa	bbaa	29 03		and #$03			and 	#3	 						; channel # and push on stack
.dbac	bbac	48		pha				pha
.dbad	bbad	8a		txa				txa  								; get offset in queue buffer/
.dbae	bbae	0a		asl a				asl 	a
.dbaf	bbaf	0a		asl a				asl 	a
.dbb0	bbb0	0a		asl a				asl 	a
.dbb1	bbb1	aa		tax				tax
.dbb2	bbb2	68		pla				pla 								; get back and push again
.dbb3	bbb3	48		pha				pha
.dbb4	bbb4	9d 43 08	sta $0843,x			sta 	SNDQueue+0,x 				; save the channel #
.dbb7	bbb7	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dbb9	bbb9					_SNDQCopy:
.dbb9	bbb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dbbb	bbbb	e8		inx				inx
.dbbc	bbbc	c8		iny				iny
.dbbd	bbbd	9d 43 08	sta $0843,x			sta 	SNDQueue,x
.dbc0	bbc0	c0 06		cpy #$06			cpy 	#6
.dbc2	bbc2	d0 f5		bne $bbb9			bne 	_SNDQCopy
.dbc4	bbc4	ee 42 08	inc $0842			inc 	SNDLength 					; bump queue length.
.dbc7	bbc7	68		pla				pla 								; get channel # back
.dbc8	bbc8	20 f3 ba	jsr $baf3			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbcb	bbcb					_SNDQRExit:
.dbcb	bbcb	60		rts				rts
.dbcc	bbcc					SNDSilenceChannel:
.dbcc	bbcc	aa		tax				tax 								; zero time left.
.dbcd	bbcd	9e 4f 09	stz $094f,x			stz 	SNDTimeLeft,x
.dbd0	bbd0	0a		asl a				asl 	a 							; shift into position
.dbd1	bbd1	0a		asl a				asl 	a
.dbd2	bbd2	0a		asl a				asl 	a
.dbd3	bbd3	0a		asl a				asl 	a
.dbd4	bbd4	0a		asl a				asl 	a
.dbd5	bbd5	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbd7	bbd7	20 db bb	jsr $bbdb			jsr 	SNDWritePorts
.dbda	bbda	60		rts				rts
.dbdb	bbdb					SNDWritePorts:
.dbdb	bbdb	da		phx				phx 								; save X
.dbdc	bbdc	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbde	bbde	64 01		stz $01				stz 	1 							; access I/O page 0
.dbe0	bbe0	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbe3	bbe3	8d 10 d6	sta $d610			sta 	$D610
.dbe6	bbe6	86 01		stx $01				stx 	1 							; restore I/O
.dbe8	bbe8	fa		plx				plx 								; restore X
.dbe9	bbe9	60		rts				rts
.dbea	bbea					Export_SNDCommand:
.dbea	bbea	da		phx				phx 								; save XY
.dbeb	bbeb	5a		phy				phy
.dbec	bbec	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbee	bbee	f0 1d		beq $bc0d			beq 	_SNDInitialise
.dbf0	bbf0	90 28		bcc $bc1a			bcc 	_SNDExit
.dbf2	bbf2	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbf4	bbf4	f0 17		beq $bc0d			beq 	_SNDSilence
.dbf6	bbf6	b0 22		bcs $bc1a			bcs 	_SNDExit
.dbf8	bbf8	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbfa	bbfa	b0 09		bcs $bc05			bcs 	_SNDQueryPlay
.dbfc	bbfc	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbfe	bbfe	b0 1a		bcs $bc1a			bcs 	_SNDExit
.dc00	bc00	20 9f bb	jsr $bb9f			jsr 	SNDQueueRequest
.dc03	bc03	80 15		bra $bc1a			bra 	_SNDExit
.dc05	bc05					_SNDQueryPlay:
.dc05	bc05	29 03		and #$03			and 	#3 							; get channel #
.dc07	bc07	aa		tax				tax
.dc08	bc08	bd 4f 09	lda $094f,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dc0b	bc0b	80 0d		bra $bc1a			bra 	_SNDExit
.dc0d	bc0d					_SNDInitialise:
.dc0d	bc0d					_SNDSilence:
.dc0d	bc0d	9c 42 08	stz $0842			stz 	SNDLength 					; empty the queue.
.dc10	bc10	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc12	bc12					_SNDSilenceLoop:
.dc12	bc12	48		pha				pha
.dc13	bc13	20 cc bb	jsr $bbcc			jsr 	SNDSilenceChannel
.dc16	bc16	68		pla				pla
.dc17	bc17	3a		dec a				dec 	a
.dc18	bc18	10 f8		bpl $bc12			bpl 	_SNDSilenceLoop
.dc1a	bc1a					_SNDExit:
.dc1a	bc1a	7a		ply				ply
.dc1b	bc1b	fa		plx				plx
.dc1c	bc1c	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0842						SNDLength:
>0842								.fill 	1
.0843						SNDQueue:
>0843								.fill 	SNDQueueSize * 8
.0943						SNDPitchLow:
>0943								.fill 	4
.0947						SNDPitchHigh:
>0947								.fill 	4
.094b						SNDVolume:
>094b								.fill 	4
.094f						SNDTimeLeft:
>094f								.fill 	4
.0953						SNDAdjustLow:
>0953								.fill 	4
.0957						SNDAdjustHigh:
>0957								.fill 	4
.dc1d	bc1d					Export_SNDUpdate:
.dc1d	bc1d					PagedSNDUpdate:
.dc1d	bc1d	ad 4f 09	lda $094f			lda 	SNDTimeLeft+0 				; look at time remaining
.dc20	bc20	f0 05		beq $bc27			beq 	_SNDUNot0 					; not playing
.dc22	bc22	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc24	bc24	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel 			; update it.
.dc27	bc27					_SNDUNot0:
.dc27	bc27	ad 50 09	lda $0950			lda 	SNDTimeLeft+1
.dc2a	bc2a	f0 05		beq $bc31			beq 	_SNDUNot1
.dc2c	bc2c	a2 01		ldx #$01			ldx 	#1
.dc2e	bc2e	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel
.dc31	bc31					_SNDUNot1:
.dc31	bc31	ad 51 09	lda $0951			lda 	SNDTimeLeft+2
.dc34	bc34	f0 05		beq $bc3b			beq 	_SNDUNot2
.dc36	bc36	a2 02		ldx #$02			ldx 	#2
.dc38	bc38	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel
.dc3b	bc3b					_SNDUNot2:
.dc3b	bc3b	ad 52 09	lda $0952			lda 	SNDTimeLeft+3
.dc3e	bc3e	f0 05		beq $bc45			beq 	_SNDUNot3
.dc40	bc40	a2 03		ldx #$03			ldx 	#3
.dc42	bc42	20 46 bc	jsr $bc46			jsr 	SNDUpdateChannel
.dc45	bc45					_SNDUNot3:
.dc45	bc45	60		rts				rts
.dc46	bc46					SNDUpdateChannel:
.dc46	bc46	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc48	bc48	f0 2c		beq $bc76			beq 	_SNDUCExit
.dc4a	bc4a	3a		dec a				dec 	a 							; decrement and update timer
.dc4b	bc4b	9d 4f 09	sta $094f,x			sta 	SNDTimeLeft,x
.dc4e	bc4e	f0 1d		beq $bc6d			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc50	bc50	bd 53 09	lda $0953,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc53	bc53	1d 57 09	ora $0957,x			ora 	SNDAdjustHigh,x
.dc56	bc56	f0 1e		beq $bc76			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc58	bc58	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc59	bc59	bd 43 09	lda $0943,x			lda 	SNDPitchLow,x
.dc5c	bc5c	7d 53 09	adc $0953,x			adc 	SNDAdjustLow,x
.dc5f	bc5f	9d 43 09	sta $0943,x			sta 	SNDPitchLow,x
.dc62	bc62	bd 47 09	lda $0947,x			lda 	SNDPitchHigh,x
.dc65	bc65	7d 57 09	adc $0957,x			adc 	SNDAdjustHigh,x
.dc68	bc68	29 03		and #$03			and 	#3
.dc6a	bc6a	9d 47 09	sta $0947,x			sta 	SNDPitchHigh,x
.dc6d	bc6d					_SNDUCUpdate:
.dc6d	bc6d	8a		txa				txa 								; which channel.
.dc6e	bc6e	48		pha				pha
.dc6f	bc6f	20 32 bb	jsr $bb32			jsr 	SNDUpdateNote 				; update the current note
.dc72	bc72	68		pla				pla
.dc73	bc73	20 f3 ba	jsr $baf3			jsr 	SNDCheckChannel 			; more to do ?
.dc76	bc76					_SNDUCExit:
.dc76	bc76	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
