
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 12 15:30:18 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_BY                               = $a6; $a6 BY
=$a7					KWD_CALL                             = $a7; $a7 CALL
=$a8					KWD_CIRCLE                           = $a8; $a8 CIRCLE
=$a9					KWD_CLEAR                            = $a9; $a9 CLEAR
=$aa					KWD_CLS                              = $aa; $aa CLS
=$ab					KWD_COLOR                            = $ab; $ab COLOR
=$ac					KWD_COLOUR                           = $ac; $ac COLOUR
=$ad					KWD_DATA                             = $ad; $ad DATA
=$ae					KWD_DIM                              = $ae; $ae DIM
=$af					KWD_DOWNTO                           = $af; $af DOWNTO
=$b0					KWD_ELSE                             = $b0; $b0 ELSE
=$b1					KWD_GFX                              = $b1; $b1 GFX
=$b2					KWD_GOSUB                            = $b2; $b2 GOSUB
=$b3					KWD_GOTO                             = $b3; $b3 GOTO
=$b4					KWD_HERE                             = $b4; $b4 HERE
=$b5					KWD_IMAGE                            = $b5; $b5 IMAGE
=$b6					KWD_LET                              = $b6; $b6 LET
=$b7					KWD_LINE                             = $b7; $b7 LINE
=$b8					KWD_LOCAL                            = $b8; $b8 LOCAL
=$b9					KWD_OUTLINE                          = $b9; $b9 OUTLINE
=$ba					KWD_PRINT                            = $ba; $ba PRINT
=$bb					KWD_READ                             = $bb; $bb READ
=$bc					KWD_RECT                             = $bc; $bc RECT
=$bd					KWD_REM                              = $bd; $bd REM
=$be					KWD_RETURN                           = $be; $be RETURN
=$bf					KWD_SOLID                            = $bf; $bf SOLID
=$c0					KWD_SPRITE                           = $c0; $c0 SPRITE
=$c1					KWD_TEXT                             = $c1; $c1 TEXT
=$c2					KWD_TO                               = $c2; $c2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 55 b2	jsr $b255			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 62 97	jsr $9762			jsr 	PrintStringXA
.8014	20 1f 91	jsr $911f			jsr 	NewCommand 					; erase current program
.8017	20 e7 a3	jsr $a3e7			jsr 	BackloadProgram
.801a	4c 9a 92	jmp $929a			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1722."
>8065	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 31 37 32 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 3d		bra $80cf			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.809a	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a4	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 29 06	sta $0629			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b2	f0 07		beq $80bb			beq 	_GDXOkay 					; check X range
.80b4	ad 29 06	lda $0629			lda 	gxCurrentX
.80b7	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b9	b0 1e		bcs $80d9			bcs 	_GDError
.80bb					_GDXOkay:
.80bb	ad 2b 06	lda $062b			lda 	gxCurrentY
.80be	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c1	b0 16		bcs $80d9			bcs 	_GDError
.80c3	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c5					_GDCopy2:
.80c5	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c8	9d 31 06	sta $0631,x			sta 	gxX0,x
.80cb	ca		dex				dex
.80cc	10 f7		bpl $80c5			bpl 	_GDCopy2
.80ce	68		pla				pla 								; get command back
.80cf					_GDExecuteA:
.80cf	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d1	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d3	b0 05		bcs $80da			bcs 	_GDError2
.80d5	aa		tax				tax
.80d6	7c df 80	jmp ($80df,x)			jmp 	(GRVectorTable,x)
.80d9					_GDError:
.80d9	68		pla				pla 								; throw command
.80da					_GDError2:
.80da	38		sec				sec
.80db	60		rts				rts
.80dc					GXMove:
.80dc	18		clc				clc
.80dd	60		rts				rts
.80de					GRUndefined:
>80de	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80df					GRVectorTable:
>80df	ae 82					.word	GXInitialise             ; $00 Initialise
>80e1	c5 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e3	0d 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e5	60 82					.word	GXClearBitmap            ; $03 Clear
>80e7	8b 84					.word	GXSetColourMode          ; $04 Colour
>80e9	4f 86					.word	GXFontHandler            ; $05 DrawFont
>80eb	97 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ed	ff 86					.word	GXSelect                 ; $07 SPRUSE
>80ef	34 87					.word	GXSelectImage            ; $08 SPRIMG
>80f1	de 80					.word	GRUndefined              ; $09
>80f3	de 80					.word	GRUndefined              ; $0a
>80f5	de 80					.word	GRUndefined              ; $0b
>80f7	de 80					.word	GRUndefined              ; $0c
>80f9	de 80					.word	GRUndefined              ; $0d
>80fb	de 80					.word	GRUndefined              ; $0e
>80fd	de 80					.word	GRUndefined              ; $0f
>80ff	dc 80					.word	GXMove                   ; $10 Move
>8101	59 83					.word	GXLine                   ; $11 Line
>8103	d4 84					.word	GXFrameRectangle         ; $12 FrameRect
>8105	d1 84					.word	GXFillRectangle          ; $13 FillRect
>8107	17 81					.word	GXFrameCircle            ; $14 FrameCircle
>8109	13 81					.word	GXFillCircle             ; $15 FillCircle
>810b	de 80					.word	GRUndefined              ; $16
>810d	de 80					.word	GRUndefined              ; $17
>810f	b9 84					.word	GXPlotPoint              ; $18 Plot
>8111	8b 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8113					GXFillCircle:
.8113	a9 ff		lda #$ff			lda 	#255
.8115	80 02		bra $8119			bra 	GXCircle
.8117					GXFrameCircle:
.8117	a9 00		lda #$00			lda 	#0
.8119					GXCircle:
.8119	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811c	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811f	f0 26		beq $8147			beq 	_GXCFail
.8121	20 8b 88	jsr $888b			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.8127	20 19 82	jsr $8219			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 4d 06	stz $064d			stz 	gxYChanged
.812d					_GXCircleDraw:
.812d	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8130	cd 4b 06	cmp $064b			cmp 	gYCentre
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4c 81	jsr $814c			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 49 81	jsr $8149			jsr 	GXPlot2 					; draw it
.8142	20 c6 81	jsr $81c6			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					_GXCFail:
.8147	38		sec				sec
.8148	60		rts				rts
.8149					GXPlot2:
.8149	20 4c 81	jsr $814c			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814c					GXPlot1:
.814c	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814f	f0 03		beq $8154			beq 	_GXPlot1Only
.8151	20 70 81	jsr $8170			jsr 	GXPlot0 						; plot and negate
.8154					_GXPlot1Only:
.8154	20 70 81	jsr $8170			jsr 	GXPlot0 						; twice, undoing negation
.8157	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.815a	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815d	8d 4b 06	sta $064b			sta 	gYCentre
.8160	8e 4a 06	stx $064a			stx 	gXCentre
.8163	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8166	a9 ff		lda #$ff			lda 	#$FF
.8168	8d 4d 06	sta $064d			sta 	gxYChanged
.816b	60		rts				rts
.816c	20 70 81	jsr $8170			jsr 	GXPlot0 						; do once
.816f	60		rts				rts
.8170	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8173	f0 05		beq $817a			beq 	_GXPlot0Always
.8175	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8178	f0 2d		beq $81a7			beq 	GXPlot0Exit
.817a					_GXPlot0Always:
.817a	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817c	ad 4b 06	lda $064b			lda 	gYCentre
.817f	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.8182	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8184	ad 4a 06	lda $064a			lda 	gXCentre
.8187	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.818a	48		pha				pha 									; save last offset X
.818b	20 de 87	jsr $87de			jsr 	GXPositionCalc 					; calculate position/offset.
.818e	68		pla				pla
.818f	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8190	85 36		sta $36				sta 	gxzTemp0
.8192	64 37		stz $37				stz 	gxzTemp0+1
.8194	26 37		rol $37				rol 	gxzTemp0+1
.8196	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8199	69 80		adc #$80			adc 	#128
.819b	20 24 85	jsr $8524			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819e	38		sec				sec 									; GY = -GY
.819f	a9 00		lda #$00			lda 	#0
.81a1	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a4	8d 4b 06	sta $064b			sta 	gYCentre
.81a7					GXPlot0Exit:
.81a7	60		rts				rts
.81a8					GXSubCopy:
.81a8	85 36		sta $36				sta 	gxzTemp0
.81aa	64 37		stz $37				stz 	gxzTemp0+1
.81ac	29 80		and #$80			and 	#$80
.81ae	f0 02		beq $81b2			beq 	_GXNoSx
.81b0	c6 37		dec $37				dec 	gxzTemp0+1
.81b2					_GXNoSx:
.81b2	38		sec				sec
.81b3	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b6	e5 36		sbc $36				sbc 	gxzTemp0
.81b8	9d 31 06	sta $0631,x			sta 	gXX0,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c0	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c3	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c5	60		rts				rts
.81c6					GXCircleMove:
.81c6	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c9	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81cb	10 0d		bpl $81da			bpl 	_GXEMPositive
.81cd	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81d0	ad 4a 06	lda $064a			lda 	gXCentre
.81d3	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d6	a9 06		lda #$06			lda 	#6  						; and add 6
.81d8	80 15		bra $81ef			bra 	_GXEMAddD
.81da					_GXEMPositive:
.81da	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dd	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81e0	38		sec				sec 								; calculate X-Y
.81e1	ad 4a 06	lda $064a			lda 	gXCentre
.81e4	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e7	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ea	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ec	ce 4d 06	dec $064d			dec 	gxYChanged
.81ef					_GXEMAddD:
.81ef	18		clc				clc
.81f0	65 38		adc $38				adc 	gxzTemp1
.81f2	85 38		sta $38				sta 	gxzTemp1
.81f4	90 02		bcc $81f8			bcc 	_GXEMNoCarry
.81f6	e6 39		inc $39				inc 	gxzTemp1+1
.81f8					_GXEMNoCarry:
.81f8	60		rts				rts
.81f9					_GXAdd4TimesToD:
.81f9	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fb	29 80		and #$80			and 	#$80
.81fd	f0 02		beq $8201			beq 	_GXA4Unsigned
.81ff	a9 ff		lda #$ff			lda 	#$FF
.8201					_GXA4Unsigned:
.8201	85 37		sta $37				sta 	gxzTemp0+1
.8203	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8205	26 37		rol $37				rol 	gxzTemp0+1
.8207	06 36		asl $36				asl 	gxzTemp0
.8209	26 37		rol $37				rol 	gxzTemp0+1
.820b	18		clc				clc 								; add
.820c	a5 36		lda $36				lda		gxzTemp0
.820e	65 38		adc $38				adc 	gxzTemp1
.8210	85 38		sta $38				sta 	gxzTemp1
.8212	a5 37		lda $37				lda		gxzTemp0+1
.8214	65 39		adc $39				adc 	gxzTemp1+1
.8216	85 39		sta $39				sta 	gxzTemp1+1
.8218	60		rts				rts
.8219					GXCircleSetup:
.8219	38		sec				sec
.821a	ad 37 06	lda $0637			lda 	gxY1
.821d	ed 33 06	sbc $0633			sbc 	gxY0
.8220	4a		lsr a				lsr 	a
.8221	8d 49 06	sta $0649			sta 	gxRadius
.8224	a2 00		ldx #$00			ldx 	#0
.8226	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.8229	a2 02		ldx #$02			ldx 	#2
.822b	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.822e	9c 4a 06	stz $064a			stz 	gXCentre
.8231	ad 49 06	lda $0649			lda 	gxRadius
.8234	8d 4b 06	sta $064b			sta 	gYCentre
.8237	0a		asl a				asl 	a 							; R x 2
.8238	85 36		sta $36				sta 	gxzTemp0
.823a	38		sec				sec
.823b	a9 03		lda #$03			lda 	#3
.823d	e5 36		sbc $36				sbc 	gxzTemp0
.823f	85 38		sta $38				sta 	gxzTemp1
.8241	a9 00		lda #$00			lda 	#0
.8243	e9 00		sbc #$00			sbc 	#0
.8245	85 39		sta $39				sta 	gxzTemp1+1
.8247	60		rts				rts
.8248					_GXCalculateCentre:
.8248	38		sec				sec
.8249	bd 35 06	lda $0635,x			lda 	gxX1,x
.824c	7d 31 06	adc $0631,x			adc 	gXX0,x
.824f	9d 35 06	sta $0635,x			sta 	gXX1,x
.8252	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8258	4a		lsr a				lsr 	a
.8259	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825c	7e 35 06	ror $0635,x			ror 	gXX1,x
.825f	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8260					GXClearBitmap:
.8260	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8263	f0 24		beq $8289			beq 	_GXCBFail
.8265	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start access
.8268	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.826a	ad 3d 06	lda $063d			lda 	gxHeight
.826d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8271					_GXCalcLastPage:
.8271	98		tya				tya 								; add to base page
.8272	18		clc				clc
.8273	6d 3b 06	adc $063b			adc 	gxBasePage
.8276	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8278					_GXClearAll:
.8278	20 8b 82	jsr $828b			jsr 	_GXClearBlock 				; clear 8k block
.827b	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827d	a5 0b		lda $0b				lda 	GXEditSlot
.827f	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8282	b0 f4		bcs $8278			bcs 	_GXClearAll
.8284	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap	 			; stop access
.8287	18		clc				clc
.8288	60		rts				rts
.8289					_GXCBFail:
.8289	38		sec				sec
.828a	60		rts				rts
.828b					_GXClearBlock:
.828b	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828d	85 38		sta $38				sta 	0+gxzTemp1
.828f	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8291	85 39		sta $39				sta 	1+gxzTemp1
.8293					_GXCB0:
.8293	a5 36		lda $36				lda 	gxzTemp0
.8295	a0 00		ldy #$00			ldy 	#0
.8297					_GXCB1:
.8297	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8299	c8		iny				iny
.829a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829c	c8		iny				iny
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	d0 f2		bne $8297			bne 	_GXCB1
.82a5	e6 39		inc $39				inc 	gxzTemp1+1
.82a7	a5 39		lda $39				lda 	gxzTemp1+1
.82a9	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82ab	d0 e6		bne $8293			bne 	_GXCB0
.82ad	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ae					GXInitialise:
.82ae	64 01		stz $01				stz 	1
.82b0	a9 01		lda #$01			lda 	#1
.82b2	8d 00 d0	sta $d000			sta 	$D000
.82b5	18		clc				clc
.82b6	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b9	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bc	a2 0f		ldx #$0f			ldx 	#15
.82be					_GXIClear:
.82be	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c1	ca		dex				dex
.82c2	10 fa		bpl $82be			bpl 	_GXIClear
.82c4	60		rts				rts
.82c5					GXControlBitmap:
.82c5	64 01		stz $01				stz 	1
.82c7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c9	29 01		and #$01			and 	#1 							; set bitmap flag
.82cb	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82ce	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82cf	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d6	90 02		bcc $82da			bcc 	_CBNotOn
.82d8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82da					_CBNotOn:
.82da	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dd	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82df	29 07		and #$07			and 	#7
.82e1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e6	d0 02		bne $82ea			bne 	_CBNotDefault
.82e8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82ea					_CBNotDefault:
.82ea	8d 3b 06	sta $063b			sta 	gxBasePage
.82ed	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f0	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f2	8d 03 d1	sta $d103			sta 	$D103
.82f5	a5 36		lda $36				lda 	gxzTemp0
.82f7	8d 02 d1	sta $d102			sta 	$D102
.82fa	9c 01 d1	stz $d101			stz 	$D101
.82fd	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82ff	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8302	29 01		and #$01			and 	#1
.8304	f0 02		beq $8308			beq 	_CBHaveHeight
.8306	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8308					_CBHaveHeight
.8308	8e 3d 06	stx $063d			stx 	gxHeight
.830b	18		clc				clc
.830c	60		rts				rts
.830d					GXControlSprite:
.830d	64 01		stz $01				stz 	1
.830f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8311	29 01		and #$01			and 	#1 							; set sprites flag
.8313	8d 39 06	sta $0639			sta 	gxSpritesOn
.8316	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8317	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.831a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831e	90 02		bcc $8322			bcc 	_CSNotOn
.8320	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8322					_CSNotOn:
.8322	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8325	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8327	d0 02		bne $832b			bne 	_CSNotDefault
.8329	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832b					_CSNotDefault:
.832b	8d 3c 06	sta $063c			sta 	gxSpritePage
.832e	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8331	a5 36		lda $36				lda 	zTemp0
.8333	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8336	a5 37		lda $37				lda 	zTemp0+1
.8338	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833d					_CSClear:
.833d	9e 00 d9	stz $d900,x			stz 	$D900,x
.8340	9e 00 da	stz $da00,x			stz 	$DA00,x
.8343	ca		dex				dex
.8344	d0 f7		bne $833d			bne 	_CSClear
.8346	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8349	18		clc				clc
.834a	60		rts				rts
.834b					GXCalculateBaseAddress:
.834b	85 36		sta $36				sta 	gxzTemp0
.834d	64 37		stz $37				stz 	gxzTemp0+1
.834f	a9 05		lda #$05			lda 	#5
.8351					_GXShift:
.8351	06 36		asl $36				asl 	gxzTemp0
.8353	26 37		rol $37				rol 	gxzTemp0+1
.8355	3a		dec a				dec		a
.8356	d0 f9		bne $8351			bne 	_GXShift
.8358	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8359					GXLine:
.8359	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835c	f0 28		beq $8386			beq 	_GXLFail
.835e	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap
.8361	20 a9 88	jsr $88a9			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8364	20 2c 84	jsr $842c			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8367	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; calculate position/offset.
.836a					_GXDrawLoop:
.836a	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836f	2d 41 06	and $0641			and 	gxANDValue
.8372	4d 40 06	eor $0640			eor 	gxEORValue
.8375	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8377	20 88 83	jsr $8388			jsr 	GXLineIsComplete 			; is the line complete ?
.837a	f0 05		beq $8381			beq 	_GXLExit
.837c	20 a3 83	jsr $83a3			jsr 	GXLineAdvance 				; code as per advance method
.837f	80 e9		bra $836a			bra 	_GXDrawLoop
.8381					_GXLExit:
.8381	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.8384	18		clc				clc
.8385	60		rts				rts
.8386					_GXLFail:
.8386	38		sec				sec
.8387	60		rts				rts
.8388					GXLineIsComplete:
.8388	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838b	d0 0f		bne $839c			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838d	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8390	4d 35 06	eor $0635			eor 	GXX1
.8393	d0 06		bne $839b			bne 	_GXLICExit
.8395	ad 32 06	lda $0632			lda 	GXX0+1
.8398	4d 36 06	eor $0636			eor 	GXX1+1
.839b					_GXLICExit:
.839b	60		rts				rts
.839c					_GXLICCompareY:
.839c	ad 37 06	lda $0637			lda 	GXY1
.839f	4d 33 06	eor $0633			eor 	GXY0
.83a2	60		rts				rts
.83a3					GXLineAdvance:
.83a3	18		clc				clc 								; add adjust to position
.83a4	ad 52 06	lda $0652			lda 	GXPosition
.83a7	6d 53 06	adc $0653			adc 	GXAdjust
.83aa	8d 52 06	sta $0652			sta 	GXPosition
.83ad	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83b0	b0 05		bcs $83b7			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b2	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b5	90 0a		bcc $83c1			bcc 	_GXLANoExtra
.83b7					_GXLAOverflow:
.83b7	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83ba	38		sec				sec 								; subtract total and write back
.83bb	ed 54 06	sbc $0654			sbc 	GXTotal
.83be	8d 52 06	sta $0652			sta 	GXPosition
.83c1					_GXLANoExtra:
.83c1	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c4	f0 0d		beq $83d3			beq 	_GXDXLarger
.83c6	20 25 84	jsr $8425			jsr 	GXIncrementY
.83c9	ad 55 06	lda $0655			lda 	GXAddSelect
.83cc	f0 10		beq $83de			beq 	_GXLAExit
.83ce	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d1	80 0b		bra $83de			bra 	_GXLAExit
.83d3					_GXDXLarger:
.83d3	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d6	ad 55 06	lda $0655			lda 	GXAddSelect
.83d9	f0 03		beq $83de			beq 	_GXLAExit
.83db	20 25 84	jsr $8425			jsr 	GXIncrementY
.83de					_GXLAExit:
.83de	60		rts				rts
.83df					GXAdjustX:
.83df	ad 51 06	lda $0651			lda 	GXDXNegative
.83e2	10 25		bpl $8409			bpl 	_GXAXRight
.83e4	ad 31 06	lda $0631			lda 	GXX0
.83e7	d0 03		bne $83ec			bne 	_GXAXNoBorrow
.83e9	ce 32 06	dec $0632			dec 	GXX0+1
.83ec					_GXAXNoBorrow:
.83ec	ce 31 06	dec $0631			dec 	GXX0
.83ef	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f2	ad 44 06	lda $0644			lda 	gsOffset
.83f5	c9 ff		cmp #$ff			cmp 	#$FF
.83f7	d0 0f		bne $8408			bne 	_GXAYExit 					; underflow
.83f9	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fb	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fd	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83ff	b0 07		bcs $8408			bcs 	_GXAYExit
.8401	18		clc				clc
.8402	69 20		adc #$20			adc 	#$20 						; fix up
.8404	85 3d		sta $3d				sta 	gxzScreen+1
.8406	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8408					_GXAYExit:
.8408	60		rts				rts
.8409					_GXAXRight:
.8409	ee 31 06	inc $0631			inc 	GXX0
.840c	d0 03		bne $8411			bne 	_GXAXNoCarry
.840e	ee 32 06	inc $0632			inc 	GXX0+1
.8411					_GXAXNoCarry:
.8411	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8414	d0 0e		bne $8424			bne 	_GXAXExit 					; if not overflowed, exit.
.8416	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8418	a5 3d		lda $3d				lda 	gxzScreen+1
.841a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841c	90 06		bcc $8424			bcc 	_GXAXExit
.841e	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8420	85 3d		sta $3d				sta 	gxzScreen+1
.8422	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8424					_GXAXExit:
.8424	60		rts				rts
.8425					GXIncrementY:
.8425	ee 33 06	inc $0633			inc 	GXY0
.8428	20 34 88	jsr $8834			jsr 	GXMovePositionDown
.842b	60		rts				rts
.842c					GXLineSetup:
.842c	ad 37 06	lda $0637			lda 	GXY1
.842f	38		sec				sec
.8430	ed 33 06	sbc $0633			sbc 	GXY0
.8433	4a		lsr a				lsr 	a
.8434	8d 4f 06	sta $064f			sta 	GXDiffY
.8437	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.843a	38		sec				sec
.843b	ad 35 06	lda $0635			lda 	GXX1
.843e	ed 31 06	sbc $0631			sbc 	GXX0
.8441	8d 4e 06	sta $064e			sta 	GXDiffX
.8444	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8447	ed 32 06	sbc $0632			sbc 	GXX0+1
.844a	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844b	6e 4e 06	ror $064e			ror 	GXDiffX
.844e	0a		asl a				asl 	a
.844f	10 0c		bpl $845d			bpl 	_GDXNotNegative
.8451	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8453	38		sec				sec
.8454	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8457	8d 4e 06	sta $064e			sta 	GXDiffX
.845a	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845d					_GDXNotNegative:
.845d	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8460	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8463	8d 53 06	sta $0653			sta 	GXAdjust
.8466	ad 4e 06	lda $064e			lda 	GXDiffX
.8469	8d 54 06	sta $0654			sta 	GXTotal
.846c	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846f	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8472	90 0f		bcc $8483			bcc 	_GDXNotLarger
.8474	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8477	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.847a	8d 53 06	sta $0653			sta 	GXAdjust
.847d	ad 4f 06	lda $064f			lda 	GXDiffY
.8480	8d 54 06	sta $0654			sta 	GXTotal
.8483					_GDXNotLarger:
.8483	ad 54 06	lda $0654			lda 	GXTotal
.8486	4a		lsr a				lsr 	a
.8487	8d 52 06	sta $0652			sta 	GXPosition
.848a	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848b					GXSetColourMode:
.848b	a6 36		ldx $36				ldx 	gxzTemp0
.848d	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8490	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8492	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8495	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8497	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.849a	ae 3f 06	ldx $063f			ldx 	gxColour
.849d	8e 40 06	stx $0640			stx 	gxEORValue
.84a0	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a2	90 03		bcc $84a7			bcc 	_GXSDCNotAndColour
.84a4	8e 41 06	stx $0641			stx 	gxANDValue
.84a7					_GXSDCNotAndColour:
.84a7	d0 03		bne $84ac			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a9	9c 40 06	stz $0640			stz 	gxEORValue
.84ac					_GXSDCNotAnd:
.84ac	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ad	90 08		bcc $84b7			bcc 	_GXSDCNoFlip
.84af	ad 41 06	lda $0641			lda	 	gxANDValue
.84b2	49 ff		eor #$ff			eor 	#$FF
.84b4	8d 41 06	sta $0641			sta 	gxANDValue
.84b7					_GXSDCNoFlip:
.84b7	18		clc				clc
.84b8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b9					GXPlotPoint:
.84b9	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.84bc	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84bf	ac 44 06	ldy $0644			ldy 	gsOffset
.84c2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c4	2d 41 06	and $0641			and 	gxANDValue
.84c7	4d 40 06	eor $0640			eor 	gxEORValue
.84ca	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cc	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; stop drawing and exit
.84cf	18		clc				clc
.84d0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d1					GXFillRectangle:
.84d1	38		sec				sec
.84d2	80 01		bra $84d5			bra 	GXRectangle
.84d4					GXFrameRectangle:
.84d4	18		clc				clc
.84d5					GXRectangle:
.84d5	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d8	f0 35		beq $850f			beq 	_GXRFail
.84da	08		php				php 								; save Fill flag (CS)
.84db	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.84de	20 8b 88	jsr $888b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e1	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e4	38		sec				sec 								; sec = Draw line
.84e5	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e8	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84eb	cd 37 06	cmp $0637			cmp 	gxY1
.84ee	f0 19		beq $8509			beq 	_GXRectangleExit
.84f0					_GXRectLoop:
.84f0	20 34 88	jsr $8834			jsr 	GXMovePositionDown 			; down one.
.84f3	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f6	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f9	cd 37 06	cmp $0637			cmp 	gXY1
.84fc	f0 07		beq $8505			beq 	_GXLastLine
.84fe	28		plp				plp 								; get flag back
.84ff	08		php				php
.8500	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8503	80 eb		bra $84f0			bra 	_GXRectLoop
.8505					_GXLastLine:
.8505	38		sec				sec
.8506	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0
.8509					_GXRectangleExit:
.8509	68		pla				pla 								; throw fill flag.
.850a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; stop drawing and exit
.850d	18		clc				clc
.850e	60		rts				rts
.850f					_GXRFail:
.850f	38		sec				sec
.8510	60		rts				rts
.8511					GXDrawLineX1X0:
.8511	08		php				php 								; save solid/either-end
.8512	38		sec				sec
.8513	ad 35 06	lda $0635			lda		gXX1
.8516	ed 31 06	sbc $0631			sbc 	gXX0
.8519	85 36		sta $36				sta 	gxzTemp0
.851b	ad 36 06	lda $0636			lda 	gXX1+1
.851e	ed 32 06	sbc $0632			sbc 	gXX0+1
.8521	85 37		sta $37				sta 	gxzTemp0+1
.8523	28		plp				plp
.8524					GXDrawLineTemp0:
.8524	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8526	48		pha				pha
.8527	a5 3d		lda $3d				lda 	gxzScreen+1
.8529	48		pha				pha
.852a	ad 44 06	lda $0644			lda 	gsOffset
.852d	48		pha				pha
.852e	a5 0b		lda $0b				lda 	GXEditSlot
.8530	48		pha				pha
.8531	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8534	90 1e		bcc $8554			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8536					_GXDLTLine:
.8536	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8538	2d 41 06	and $0641			and 	gxANDValue
.853b	4d 40 06	eor $0640			eor 	gxEORValue
.853e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8540	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8542	d0 04		bne $8548			bne 	_GXDLTNoBorrow
.8544	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8546	30 2e		bmi $8576			bmi 	_GXDLTExit
.8548					_GXDLTNoBorrow:
.8548	c6 36		dec $36				dec 	gxzTemp0
.854a	c8		iny				iny 								; next slot.
.854b	d0 e9		bne $8536			bne 	_GXDLTLine
.854d	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854f	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.8552	80 e2		bra $8536			bra 	_GXDLTLine
.8554					_GXDLTEndPoints:
.8554	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8556	2d 41 06	and $0641			and 	gxANDValue
.8559	4d 40 06	eor $0640			eor 	gxEORValue
.855c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855e	98		tya				tya 								; advance to right side
.855f	18		clc				clc
.8560	65 36		adc $36				adc 	gxzTemp0
.8562	a8		tay				tay
.8563	a5 3d		lda $3d				lda 	gxzScreen+1
.8565	65 37		adc $37				adc 	gxzTemp0+1
.8567	85 3d		sta $3d				sta 	gxzScreen+1
.8569	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap 			; fix up.
.856c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856e	2d 41 06	and $0641			and 	gxANDValue
.8571	4d 40 06	eor $0640			eor 	gxEORValue
.8574	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8576					_GXDLTExit:
.8576	68		pla				pla
.8577	85 0b		sta $0b				sta 	GXEditSlot
.8579	68		pla				pla
.857a	8d 44 06	sta $0644			sta 	gsOffset
.857d	68		pla				pla
.857e	85 3d		sta $3d				sta 	gxzScreen+1
.8580	68		pla				pla
.8581	85 3c		sta $3c				sta 	gxzScreen
.8583	60		rts				rts
.8584					GXDLTCheckWrap:
.8584	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8586	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8588	90 06		bcc $8590			bcc 	_GXDLTCWExit
.858a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858c	85 3d		sta $3d				sta 	gxzScreen+1
.858e	e6 0b		inc $0b				inc 	GXEditSlot
.8590					_GXDLTCWExit:
.8590	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8591					GXDrawGraphicElement:
.8591	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8594	3a		dec a				dec 	a
.8595	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8598	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859b	9c 5c 06	stz $065c			stz 	gxHFlip
.859e	2c 5d 06	bit $065d			bit 	gxUseMode
.85a1	10 03		bpl $85a6			bpl 	_GXNotVertical
.85a3	8d 5b 06	sta $065b			sta 	gxVFlip
.85a6					_GXNotVertical:
.85a6	50 03		bvc $85ab			bvc 	_GXNotHorizontal
.85a8	8d 5c 06	sta $065c			sta 	gxHFlip
.85ab					_GXNotHorizontal:
.85ab	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ae	f0 5f		beq $860f			beq 	_GXSLFail
.85b0	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b3	48		pha				pha
.85b4	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b7	8e 58 06	stx $0658			stx 	gxAcquireVector
.85ba	20 c0 87	jsr $87c0			jsr 	gxOpenBitmap 				; open the bitmap.
.85bd	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	4a		lsr a				lsr 	a
.85c3	29 07		and #$07			and		#7
.85c5	1a		inc a				inc 	a
.85c6	8d 5a 06	sta $065a			sta 	gxScale
.85c9	64 38		stz $38				stz 	gxzTemp1						; start first line
.85cb					_GXGELoop:
.85cb	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cd	4d 5b 06	eor $065b			eor 	gxVFlip
.85d0	aa		tax				tax 								; get the Xth line.
.85d1	20 11 86	jsr $8611			jsr 	_GXCallAcquire 				; get that data.
.85d4	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d7	85 39		sta $39				sta 	gxzTemp1+1
.85d9					_GXGELoop2:
.85d9	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85dc	cd 3d 06	cmp $063d			cmp 	gxHeight
.85df	b0 10		bcs $85f1			bcs 	_GXDGEExit
.85e1	20 14 86	jsr $8614			jsr 	GXRenderOneLine 			; render line
.85e4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e6	d0 f1		bne $85d9			bne 	_GXGELoop2
.85e8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85ea	a5 38		lda $38				lda 	gxzTemp1
.85ec	cd 56 06	cmp $0656			cmp 	gxSize
.85ef	d0 da		bne $85cb			bne 	_GXGELoop
.85f1					_GXDGEExit:
.85f1	68		pla				pla 								; restore Y for next time
.85f2	8d 33 06	sta $0633			sta 	gxY0
.85f5	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f8					_GXShiftLeft:
.85f8	18		clc				clc
.85f9	ad 56 06	lda $0656			lda 	gxSize
.85fc	6d 31 06	adc $0631			adc 	gxX0
.85ff	8d 31 06	sta $0631			sta 	gxX0
.8602	90 03		bcc $8607			bcc 	_GXSLNoCarry
.8604	ee 32 06	inc $0632			inc 	gxX0+1
.8607					_GXSLNoCarry:
.8607	ca		dex				dex
.8608	d0 ee		bne $85f8			bne 	_GXShiftLeft
.860a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.860d	18		clc				clc
.860e	60		rts				rts
.860f					_GXSLFail:
.860f	38		sec				sec
.8610	60		rts				rts
.8611					_GXCallAcquire:
.8611	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8614					GXRenderOneLine:
.8614	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; calculate position/offset.
.8617	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.861a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861c					_GXROLLoop1:
.861c	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861f	85 3b		sta $3b				sta 	gxzTemp2+1
.8621					_GXROLLoop2:
.8621	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8623	4d 5c 06	eor $065c			eor 	gxHFlip
.8626	aa		tax				tax 								; read from the pixel buffer
.8627	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.862a	f0 0a		beq $8636			beq 	_GXZeroPixel 				; don't draw if zero.
.862c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862e	2d 41 06	and $0641			and 	gxANDValue
.8631	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8634	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8636					_GXZeroPixel:
.8636	c8		iny				iny 								; advance pointer
.8637	d0 05		bne $863e			bne 	_GXNoShift
.8639	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863b	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.863e					_GXNoShift:
.863e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8640	d0 df		bne $8621			bne 	_GXROLLoop2
.8642	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8644	a5 3a		lda $3a				lda 	gxzTemp2
.8646	cd 56 06	cmp $0656			cmp 	gxSize
.8649	d0 d1		bne $861c			bne 	_GXROLLoop1
.864b	ee 33 06	inc $0633			inc 	gxY0
.864e	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864f					GXFontHandler:
.864f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8651	4d 3e 06	eor $063e			eor 	gxMode
.8654	8d 5d 06	sta $065d			sta 	gxUseMode
.8657	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8659	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865b	26 37		rol $37				rol	 	gxzTemp0+1
.865d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865f	26 37		rol $37				rol	 	gxzTemp0+1
.8661	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8663	26 37		rol $37				rol	 	gxzTemp0+1
.8665	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8667	09 c0		ora #$c0			ora 	#$C0
.8669	85 37		sta $37				sta 	gxzTemp0+1
.866b	a9 08		lda #$08			lda 	#8 							; size 8x8
.866d	a2 75		ldx #$75			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866f	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8671	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.8674	60		rts				rts
.8675					GXGetGraphicDataFont:
.8675	8a		txa				txa 								; X->Y
.8676	a8		tay				tay
.8677	a6 01		ldx $01				ldx 	1 							; preserve old value
.8679	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867b	85 01		sta $01				sta 	1
.867d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867f	86 01		stx $01				stx 	1 							; put old value back.
.8681	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8683					_GXExpand:
.8683	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8686	0a		asl a				asl 	a 							; shift bit 7 into C
.8687	90 08		bcc $8691			bcc 	_GXNoPixel
.8689	48		pha				pha 								; if set, set pixel buffer to current colour.
.868a	ad 3f 06	lda $063f			lda 	gxColour
.868d	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8690	68		pla				pla
.8691					_GXNoPixel:
.8691	e8		inx				inx 								; do the whole byte.
.8692	e0 08		cpx #$08			cpx 	#8
.8694	d0 ed		bne $8683			bne 	_GXExpand
.8696	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8697					GXSpriteHandler:
.8697	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8699	4d 3e 06	eor $063e			eor 	gxMode
.869c	8d 5d 06	sta $065d			sta 	gxUseMode
.869f	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a1	da		phx				phx
.86a2	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; can access sprite information
.86a5	68		pla				pla
.86a6	20 4f 88	jsr $884f			jsr 	GXFindSprite 				; get the sprite address
.86a9	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.86ac	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86af	a2 b7		ldx #$b7			ldx 	#GXSpriteAcquire & $FF
.86b1	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b3	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.86b6	60		rts				rts
.86b7					GXSpriteAcquire:
.86b7	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86ba	85 0b		sta $0b				sta 	GXEditSlot
.86bc	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86be	a9 00		lda #$00			lda 	#0
.86c0	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c3					_GXTimesRowNumber:
.86c3	18		clc				clc
.86c4	65 36		adc $36				adc 	zTemp0
.86c6	ca		dex				dex
.86c7	10 fa		bpl $86c3			bpl 	_GXTimesRowNumber
.86c9	64 37		stz $37				stz 	gxzTemp0+1
.86cb	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cc	26 37		rol $37				rol 	gxzTemp0+1
.86ce	0a		asl a				asl 	a 							; row x 4,8,12,16
.86cf	26 37		rol $37				rol 	gxzTemp0+1
.86d1	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d2	26 37		rol $37				rol 	gxzTemp0+1
.86d4	85 36		sta $36				sta 	gxzTemp0
.86d6	18		clc				clc 								; add base address.
.86d7	a5 36		lda $36				lda 	gxzTemp0
.86d9	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86dc	85 36		sta $36				sta 	gxzTemp0
.86de	a5 37		lda $37				lda 	gxzTemp0+1
.86e0	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e3					_GXSAFindPage:
.86e3	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e5	90 06		bcc $86ed			bcc 	_GXSAFoundPage
.86e7	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e9	e6 0b		inc $0b				inc 	GXEditSlot
.86eb	80 f6		bra $86e3			bra 	_GXSAFindPage
.86ed					_GXSAFoundPage:
.86ed	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ef	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f1	a0 00		ldy #$00			ldy 	#0
.86f3					_GXSACopyLoop:
.86f3	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f5	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f8	c8		iny				iny
.86f9	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fc	d0 f5		bne $86f3			bne 	_GXSACopyLoop
.86fe	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86ff					GXSelect:
.86ff	ad 39 06	lda $0639			lda 	gxSpritesOn
.8702	f0 2e		beq $8732			beq 	_GXSFail
.8704	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8706	c9 40		cmp #$40			cmp 	#64
.8708	b0 28		bcs $8732			bcs 	_GXSFail
.870a	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870c	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870e	06 36		asl $36				asl 	gxzTemp0
.8710	06 36		asl $36				asl 	gxzTemp0
.8712	06 36		asl $36				asl 	gxzTemp0
.8714	2a		rol a				rol 	a
.8715	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8717	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.871a	85 37		sta $37				sta 	gxzTemp0+1
.871c	a5 36		lda $36				lda 	gxzTemp0
.871e	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8721	98		tya				tya 								; control value
.8722	29 01		and #$01			and 	#1
.8724	85 38		sta $38				sta 	gxzTemp1 					; save it handily.
.8726	64 01		stz $01				stz 	1 							; access sprite control.
.8728	b2 36		lda ($36)			lda 	(gxzTemp0) 					; update enable bit only.
.872a	29 fe		and #$fe			and 	#$FE
.872c	05 38		ora $38				ora 	gxzTemp1
.872e	92 36		sta ($36)			sta 	(gxzTemp0) 					; write to control register
.8730	18		clc				clc
.8731	60		rts				rts
.8732					_GXSFail:
.8732	38		sec				sec
.8733	60		rts				rts
.8734					GXSelectImage:
.8734	ad 39 06	lda $0639			lda 	gxSpritesOn
.8737	f0 50		beq $8789			beq 	_GXSIFail
.8739	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.873c	f0 4b		beq $8789			beq 	_GXSIFail
.873e	64 01		stz $01				stz 	1
.8740	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8742	48		pha				pha
.8743	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap
.8746	68		pla				pla
.8747	20 4f 88	jsr $884f			jsr 	GXFindSprite
.874a	a0 01		ldy #$01			ldy 	#1
.874c	ad 45 06	lda $0645			lda 	GSCurrentSprite
.874f	85 36		sta $36				sta 	gxzTemp0
.8751	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8754	85 37		sta $37				sta 	gxzTemp0+1
.8756	ad 61 06	lda $0661			lda 	GXSpriteOffset
.8759	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.875b	18		clc				clc
.875c	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.875f	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8762	c8		iny				iny
.8763	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8765	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.8768	69 00		adc #$00			adc 	#0
.876a	c8		iny				iny
.876b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.876d	b2 36		lda ($36)			lda 	(gxzTemp0)					; get LSB into gxzTemp1
.876f	29 01		and #$01			and 	#1
.8771	85 38		sta $38				sta 	gxzTemp1
.8773	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8776	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8778	2a		rol a				rol 	a 							; x 2
.8779	0a		asl a				asl 	a 							; x 4
.877a	0a		asl a				asl 	a 							; x 8
.877b	0a		asl a				asl 	a 							; x 16
.877c	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.877f	0a		asl a				asl 	a 							; 1 shift
.8780	05 38		ora $38				ora 	gxzTemp1 					; Or in the enable bit
.8782	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8784	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.8787	18		clc				clc
.8788	60		rts				rts
.8789					_GXSIFail:
.8789	38		sec				sec
.878a	60		rts				rts
.878b					GXMoveSprite:
.878b	ad 39 06	lda $0639			lda 	gxSpritesOn
.878e	f0 2e		beq $87be			beq 	_GXSIFail
.8790	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8793	f0 29		beq $87be			beq 	_GXSIFail
.8795	85 37		sta $37				sta 	gxzTemp0+1
.8797	a0 04		ldy #$04			ldy 	#4
.8799	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879c	85 36		sta $36				sta 	gxzTemp0
.879e	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87a0	38		sec				sec
.87a1	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a4	4a		lsr a				lsr 	a
.87a5	48		pha				pha
.87a6	18		clc				clc
.87a7	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87aa	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ac	c8		iny				iny
.87ad	ad 32 06	lda $0632			lda 	gxX0+1
.87b0	69 00		adc #$00			adc 	#0
.87b2	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b4	c8		iny				iny
.87b5	68		pla				pla
.87b6	18		clc				clc
.87b7	6d 33 06	adc $0633			adc 	gxY0
.87ba	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87bc	18		clc				clc
.87bd	60		rts				rts
.87be					_GXSIFail:
.87be	38		sec				sec
.87bf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87c0					GXOpenBitmap:
.87c0	78		sei				sei 								; no interrupts here
.87c1	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c3	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c6	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c8	85 00		sta $00				sta 	0
.87ca	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87cc	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87cf	58		cli				cli
.87d0	60		rts				rts
.87d1					GXCloseBitmap:
.87d1	78		sei				sei
.87d2	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d5	85 0b		sta $0b				sta 	GXEditSlot
.87d7	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87da	85 00		sta $00				sta 	0
.87dc	58		cli				cli
.87dd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87de					GXPositionCalc:
.87de	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87e0	48		pha				pha
.87e1	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e4	85 3c		sta $3c				sta 	gxzScreen
.87e6	64 3d		stz $3d				stz 	gxzScreen+1
.87e8	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87ea	26 3d		rol $3d				rol 	gxzScreen+1
.87ec	06 3c		asl $3c				asl 	gxzScreen
.87ee	26 3d		rol $3d				rol 	gxzScreen+1
.87f0	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87f1	65 3c		adc $3c				adc 	gxzScreen
.87f3	85 3c		sta $3c				sta 	gxzScreen
.87f5	90 02		bcc $87f9			bcc 	_GXPCNoCarry
.87f7	e6 3d		inc $3d				inc 	gxzScreen+1
.87f9					_GXPCNoCarry:
.87f9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87fb	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fd	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87ff	85 36		sta $36				sta 	gxzTemp0
.8801	64 3d		stz $3d				stz 	gxzScreen+1
.8803	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8805					_GXPCMultiply32:
.8805	06 3c		asl $3c				asl 	gxzScreen
.8807	26 3d		rol $3d				rol 	gxzScreen+1
.8809	3a		dec a				dec 	a
.880a	d0 f9		bne $8805			bne 	_GXPCMultiply32
.880c	18		clc				clc
.880d	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8810	65 3c		adc $3c				adc 	gxzScreen
.8812	8d 44 06	sta $0644			sta 	gsOffset
.8815	ad 32 06	lda $0632			lda 	GXX0+1
.8818	65 3d		adc $3d				adc 	gxzScreen+1
.881a	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881c	90 04		bcc $8822			bcc 	_GXPCNoOverflow
.881e	29 1f		and #$1f			and 	#$1F 						; fix it up
.8820	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8822					_GXPCNoOverflow:
.8822	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8824	85 3d		sta $3d				sta 	gxzScreen+1
.8826	64 3c		stz $3c				stz 	gxzScreen
.8828	18		clc				clc
.8829	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.882b	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882e	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8830	68		pla				pla
.8831	85 36		sta $36				sta 	gxzTemp0
.8833	60		rts				rts
.8834					GXMovePositionDown:
.8834	18		clc				clc 								; add 320 to offset/temp+1
.8835	ad 44 06	lda $0644			lda 	gsOffset
.8838	69 40		adc #$40			adc 	#64
.883a	8d 44 06	sta $0644			sta 	gsOffset
.883d	a5 3d		lda $3d				lda 	gxzScreen+1
.883f	69 01		adc #$01			adc 	#1
.8841	85 3d		sta $3d				sta 	gxzScreen+1
.8843	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8845	90 07		bcc $884e			bcc 	_GXMPDExit
.8847	38		sec				sec  								; next page
.8848	e9 20		sbc #$20			sbc 	#$20
.884a	85 3d		sta $3d				sta 	gxzScreen+1
.884c	e6 0b		inc $0b				inc 	GXEditSlot
.884e					_GXMPDExit:
.884e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884f					GXFindSprite:
.884f	aa		tax				tax
.8850	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8853	85 0b		sta $0b				sta 	GXEditSlot
.8855	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8858	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.885b	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885e	48		pha				pha 								; save twice
.885f	48		pha				pha
.8860	29 03		and #$03			and 	#3 							; get sprite size
.8862	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8865	aa		tax				tax
.8866	bd 87 88	lda $8887,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8869	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886c	68		pla				pla 								; get LUT
.886d	4a		lsr a				lsr		a
.886e	4a		lsr a				lsr		a
.886f	29 03		and #$03			and 	#3
.8871	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8874	68		pla				pla 								; address, neeeds to be x 4
.8875	29 f0		and #$f0			and 	#$F0
.8877	8d 61 06	sta $0661			sta 	GXSpriteOffset
.887a	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887d	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8880	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8883	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8886	60		rts				rts
.8887					_GXFXSSTTable:
>8887	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.888b					GXSortXY:
.888b	20 a9 88	jsr $88a9			jsr 	GXSortY 					; will be sorted on Y now
.888e	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8891	cd 35 06	cmp $0635			cmp 	gxX1
.8894	ad 32 06	lda $0632			lda 	gXX0+1
.8897	ed 36 06	sbc $0636			sbc 	gXX1+1
.889a	90 0c		bcc $88a8			bcc 	_GXSXYExit 					; X0 < X1 exit
.889c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889e	a0 04		ldy #$04			ldy 	#4
.88a0	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88a3	e8		inx				inx
.88a4	c8		iny				iny
.88a5	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88a8					_GXSXYExit:
.88a8	60		rts				rts
.88a9					GXSortY:
.88a9	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88ac	cd 37 06	cmp $0637			cmp 	gxY1
.88af	90 0b		bcc $88bc			bcc 	_GXSYSorted
.88b1	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b3	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b5					_GXSwap1:
.88b5	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88b8	88		dey				dey
.88b9	ca		dex				dex
.88ba	10 f9		bpl $88b5			bpl 	_GXSwap1
.88bc					_GXSYSorted:
.88bc	60		rts				rts
.88bd					GXSwapXY:
.88bd	bd 31 06	lda $0631,x			lda 	gxX0,x
.88c0	48		pha				pha
.88c1	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c4	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c7	68		pla				pla
.88c8	99 31 06	sta $0631,y			sta 	gxX0,y
.88cb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.88cc					RunDemos:
.88cc					loop:
.88cc	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.88ce	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d0	a0 00		ldy #$00			ldy 	#(0)
.88d2	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88d5	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.88d7	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d9	a0 00		ldy #$00			ldy 	#(0)
.88db	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88de	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.88e0	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.88e2	a0 00		ldy #$00			ldy 	#(0)
.88e4	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88e7	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.88e9	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.88eb	a0 00		ldy #$00			ldy 	#(0)
.88ed	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88f0	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.88f2	a2 82		ldx #$82			ldx 	#((130) & $FF)
.88f4	a0 1e		ldy #$1e			ldy 	#(30)
.88f6	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88f9	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.88fb	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.88fd	a0 08		ldy #$08			ldy 	#(1*8)
.88ff	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8902	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.8904	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.8906	a0 08		ldy #$08			ldy 	#(1*8)
.8908	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.890b	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.890d	a2 00		ldx #$00			ldx 	#((0) & $FF)
.890f	a0 08		ldy #$08			ldy 	#(1*8)
.8911	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8914	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8916	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8918	a0 08		ldy #$08			ldy 	#(1*8)
.891a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.891d	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.891f	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8921	a0 08		ldy #$08			ldy 	#(1*8)
.8923	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8926	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8928	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.892a	a0 0a		ldy #$0a			ldy 	#(10)
.892c	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.892f	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.8931	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8933	a0 64		ldy #$64			ldy 	#(100)
.8935	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8938	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.893a	a2 03		ldx #$03			ldx 	#((3) & $FF)
.893c	a0 01		ldy #$01			ldy 	#(1)
.893e	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8941	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.8943	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8945	a0 00		ldy #$00			ldy 	#(0)
.8947	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.894a	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.894c	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.894e	a0 c8		ldy #$c8			ldy 	#(200)
.8950	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8953	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.8955	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8957	a0 01		ldy #$01			ldy 	#(1)
.8959	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.895c	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.895e	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8960	a0 00		ldy #$00			ldy 	#(0)
.8962	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8965	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.8967	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8969	a0 c8		ldy #$c8			ldy 	#(200)
.896b	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.896e	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.8970	a2 05		ldx #$05			ldx 	#((5) & $FF)
.8972	a0 01		ldy #$01			ldy 	#(1)
.8974	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8977	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.8979	a2 00		ldx #$00			ldx 	#((0) & $FF)
.897b	a0 00		ldy #$00			ldy 	#(0)
.897d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8980	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.8982	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8984	a0 c8		ldy #$c8			ldy 	#(200)
.8986	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8989	60		rts				rts
.898a	20 72 a0	jsr $a072	demo:	jsr 	Random32Bit
.898d	ee 40 06	inc $0640			inc 	gxEORValue
.8990	a9 30		lda #$30			lda 	#24*2
.8992	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8995	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8998	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.899b	80 ed		bra $898a			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.899d					AssembleGroup1:
.899d	a9 ff		lda #$ff			lda 	#$FF
.899f	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89a2	80 02		bra $89a6			bra 	AsmGroup12
.89a4					AssembleGroup2:
.89a4	a5 00		lda $00				lda 	$00
.89a6					AsmGroup12:
.89a6	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89a9	68		pla				pla 								; pop the return address to access the information following.
.89aa	fa		plx				plx
.89ab	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; get opcode and save as base
.89ae	8d a4 04	sta $04a4			sta 	BaseOpcode
.89b1	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89b4	d0 08		bne $89be			bne 	_AG12HaveMask
.89b6	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89b8	20 3c 8a	jsr $8a3c			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89bb	8d a5 04	sta $04a5			sta 	ModeMask
.89be					_AG12HaveMask:
.89be	20 77 8b	jsr $8b77			jsr 	TypeAndCalculateOperand 	; get zero page type
.89c1	da		phx				phx 								; save found address mode
.89c2	20 a0 8a	jsr $8aa0			jsr 	AssembleModeX
.89c5	fa		plx				plx  								; restore address mode
.89c6	b0 0b		bcs $89d3			bcs 	_AG12Exit
.89c8	20 d4 89	jsr $89d4			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89cb	20 a0 8a	jsr $8aa0			jsr 	AssembleModeX
.89ce	b0 03		bcs $89d3			bcs 	_AG12Exit
.89d0	4c ae b0	jmp $b0ae			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89d3					_AG12Exit:
.89d3	60		rts				rts
.89d4					PromoteToAbsolute:
.89d4	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89d6	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89d8	f0 19		beq $89f3			beq 	_PTADo
.89da	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89dc	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89de	f0 13		beq $89f3			beq 	_PTADo
.89e0	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89e2	e0 80		cpx #$80			cpx 	#AM_ZEROY
.89e4	f0 0d		beq $89f3			beq 	_PTADo
.89e6	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.89e8	e0 d1		cpx #$d1			cpx 	#AM_IND
.89ea	f0 07		beq $89f3			beq 	_PTADo
.89ec	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89ee	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89f0	f0 01		beq $89f3			beq 	_PTADo
.89f2	60		rts				rts
.89f3					_PTADo:
.89f3	aa		tax				tax
.89f4	60		rts				rts
.89f5					AssembleGroup3:
.89f5	68		pla				pla 								; get parameters, which is just the opcode.
.89f6	fa		plx				plx
.89f7	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; get and output opcode
.89fa	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.89fd	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get a 16 bit operand
.8a00	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a03	38		sec				sec
.8a04	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a07	48		pha				pha 								; LSB in A
.8a08	ad 10 04	lda $0410			lda 	NSMantissa1
.8a0b	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a0e	aa		tax				tax 								; MSB in X
.8a0f	68		pla				pla
.8a10	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a11	69 7f		adc #$7f			adc 	#$7F
.8a13	90 01		bcc $8a16			bcc 	_AG3NoCarry
.8a15	e8		inx				inx
.8a16					_AG3NoCarry:
.8a16	38		sec				sec 								; fix back and write out anyways.
.8a17	e9 80		sbc #$80			sbc 	#$80
.8a19	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8a1c	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a1e	f0 0a		beq $8a2a			beq 	_AG3Exit
.8a20	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a23	29 01		and #$01			and 	#1
.8a25	f0 03		beq $8a2a			beq 	_AG3Exit
.8a27	4c b3 b0	jmp $b0b3			jmp 	RangeError 					; no, branch is out of range
.8a2a					_AG3Exit:
.8a2a	60		rts				rts
.8a2b					AssembleGroup4:
.8a2b	68		pla				pla 								; pop address
.8a2c	fa		plx				plx
.8a2d	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; access and get first
.8a30	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte 			; output it.
.8a33	60		rts				rts
.8a34					AccessParameters:
.8a34	8d a1 04	sta $04a1			sta 	ParamStart
.8a37	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a3a	a9 01		lda #$01			lda 	#1
.8a3c					GetParameter:
.8a3c	5a		phy				phy
.8a3d	a8		tay				tay
.8a3e	ad a1 04	lda $04a1			lda 	ParamStart
.8a41	85 36		sta $36				sta 	zTemp0
.8a43	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a46	85 37		sta $37				sta 	zTemp0+1
.8a48	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a4a	7a		ply				ply
.8a4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a4c					AssemblerWriteByte:
.8a4c	48		pha			pha
.8a4d	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a50	29 02		and #$02		and 	#2
.8a52	f0 1b		beq $8a6f		beq 	_AWBNoPrint
.8a54	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a57	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a5a	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a5d	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a60	a9 20		lda #$20		lda 	#' '
.8a62	20 61 b2	jsr $b261		jsr 	EXTPrintCharacter
.8a65	68		pla			pla 									; print byte
.8a66	48		pha			pha
.8a67	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a6a	a9 0d		lda #$0d		lda 	#13
.8a6c	20 61 b2	jsr $b261		jsr 	EXTPrintCharacter
.8a6f					_AWBNoPrint:
.8a6f	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a72	85 36		sta $36			sta 	zTemp0
.8a74	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a77	f0 0e		beq $8a87		beq 	_AWBRange
.8a79	85 37		sta $37			sta 	zTemp0+1
.8a7b	68		pla			pla 									; write byte out
.8a7c	92 36		sta ($36)		sta 	(zTemp0)
.8a7e	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a81	d0 03		bne $8a86		bne 	_AWBNoCarry
.8a83	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a86					_AWBNoCarry:
.8a86	60		rts			rts
.8a87					_AWBRange:
.8a87	4c b3 b0	jmp $b0b3		jmp 	RangeError
.8a8a					PrintHex:
.8a8a	48		pha				pha
.8a8b	4a		lsr a				lsr 	a
.8a8c	4a		lsr a				lsr 	a
.8a8d	4a		lsr a				lsr 	a
.8a8e	4a		lsr a				lsr 	a
.8a8f	20 93 8a	jsr $8a93			jsr 	_PrintNibble
.8a92	68		pla				pla
.8a93					_PrintNibble:
.8a93	29 0f		and #$0f			and 	#15
.8a95	c9 0a		cmp #$0a			cmp 	#10
.8a97	90 02		bcc $8a9b			bcc 	_NoShift
.8a99	69 06		adc #$06			adc 	#6
.8a9b					_NoShift:
.8a9b	69 30		adc #$30			adc 	#48
.8a9d	4c 61 b2	jmp $b261			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8aa0					AssembleModeX:
.8aa0	5a		phy				phy
.8aa1	ad a3 04	lda $04a3			lda 	IsGroup1
.8aa4	f0 17		beq $8abd			beq 	_AMXGroup2
.8aa6	8a		txa				txa 							; is it in group # 1
.8aa7	29 40		and #$40			and 	#AM_ISG1
.8aa9	f0 50		beq $8afb			beq 	_AMXFail 				; no, give up.
.8aab	8a		txa				txa 							; get back.
.8aac	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aae	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8ab0	d0 22		bne $8ad4			bne 	_AMXHaveInfo
.8ab2	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ab5	c9 81		cmp #$81			cmp 	#$81
.8ab7	f0 42		beq $8afb			beq 	_AMXFail
.8ab9	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8abb	80 17		bra $8ad4			bra 	_AMXHaveInfo 			; odd design decision there.
.8abd					_AMXGroup2:
.8abd	8a		txa				txa 							; is it in group 2 ?
.8abe	29 20		and #$20			and 	#AM_ISG2
.8ac0	f0 39		beq $8afb			beq 	_AMXFail 				; no, give up.
.8ac2	8a		txa				txa 							; get the offset into Y
.8ac3	29 1f		and #$1f			and 	#$1F
.8ac5	4a		lsr a				lsr 	a 						; make it 0-7.
.8ac6	4a		lsr a				lsr  	a
.8ac7	a8		tay				tay
.8ac8	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8acb					_AMXCheckOkay:
.8acb	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8acc	88		dey				dey
.8acd	10 fc		bpl $8acb			bpl 	_AMXCheckOkay
.8acf	90 2a		bcc $8afb			bcc 	_AMXFail 				; not allowed.
.8ad1	8a		txa				txa  							; get mask back
.8ad2	29 1f		and #$1f			and 	#$1F
.8ad4					_AMXHaveInfo:
.8ad4	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8ad6	10 05		bpl $8add			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8ad8	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8adb	d0 1e		bne $8afb			bne 	_AMXFail
.8add					_AMXAnySize:
.8add	18		clc				clc 							; add offset to the base opcode
.8ade	6d a4 04	adc $04a4			adc 	BaseOpcode
.8ae1					_AMXOutputCode:
.8ae1	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte 		; write the opcode out.
.8ae4	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8ae6	f0 10		beq $8af8			beq 	_AMXExit
.8ae8	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8aeb	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8aee	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8af0	30 06		bmi $8af8			bmi 	_AMXExit
.8af2	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8af5	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8af8					_AMXExit:
.8af8	7a		ply				ply
.8af9	38		sec				sec
.8afa	60		rts				rts
.8afb					_AMXFail:
.8afb	a0 00		ldy #$00			ldy 	#0
.8afd					_AMXCheckOddities:
.8afd	8a		txa				txa
.8afe	d9 26 8b	cmp $8b26,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b01	d0 16		bne $8b19			bne 	_AMXCONext
.8b03	b9 24 8b	lda $8b24,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b06	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b09	d0 0e		bne $8b19			bne 	_AMXCONext
.8b0b	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b0d	10 05		bpl $8b14			bpl 	_AMXCONotZero
.8b0f	ad 10 04	lda $0410			lda 	NSMantissa1
.8b12	d0 05		bne $8b19			bne 	_AMXCONext
.8b14					_AMXCONotZero:
.8b14	b9 25 8b	lda $8b25,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b17	80 c8		bra $8ae1			bra 	_AMXOutputCode 			; and assemble it
.8b19					_AMXCONext:
.8b19	c8		iny				iny
.8b1a	c8		iny				iny
.8b1b	c8		iny				iny
.8b1c	b9 24 8b	lda $8b24,y			lda 	ExtraOpcode+0,y 		; end of table
.8b1f	d0 dc		bne $8afd			bne 	_AMXCheckOddities
.8b21					_AMXCOFail:
.8b21	7a		ply				ply
.8b22	18		clc				clc
.8b23	60		rts				rts
.8b24					ExtraOpcode:
>8b24	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b27	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b2a	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b2d	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b30	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b33	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b36	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b39	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b3c	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b3f	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b42	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b43					LabelHere:
.8b43	c8		iny				iny 								; skip .
.8b44	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b46	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm 				; get a term
.8b49	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b4c	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b4e	d0 24		bne $8b74			bne 	_ALType
.8b50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b53	85 36		sta $36				sta 	zTemp0
.8b55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b58	85 37		sta $37				sta 	zTemp0+1
.8b5a	5a		phy				phy 								; copy address in.
.8b5b	a0 01		ldy #$01			ldy 	#1
.8b5d	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b60	92 36		sta ($36)			sta 	(zTemp0)
.8b62	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b65	91 36		sta ($36),y			sta 	(zTemp0),y
.8b67	c8		iny				iny
.8b68	a9 00		lda #$00			lda 	#0
.8b6a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6c	c8		iny				iny
.8b6d	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6f	c8		iny				iny
.8b70	91 36		sta ($36),y			sta 	(zTemp0),y
.8b72	7a		ply				ply
.8b73	60		rts				rts
.8b74					_ALType:
.8b74	4c b8 b0	jmp $b0b8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b77					TypeAndCalculateOperand:
.8b77	b1 30		lda ($30),y			lda 	(codePtr),y
.8b79	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b7b	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b7d	f0 5b		beq $8bda			beq 	_TACOExit
.8b7f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b81	f0 57		beq $8bda			beq 	_TACOExit
.8b83	c8		iny				iny
.8b84	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b86	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b88	f0 51		beq $8bdb			beq 	CalculateOperand
.8b8a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b8c	f0 1f		beq $8bad			beq 	_TACOIndirect
.8b8e	88		dey				dey 								; undo get of first character
.8b8f	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get operand
.8b92	b1 30		lda ($30),y			lda 	(codePtr),y
.8b94	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b98	d0 40		bne $8bda			bne 	_TACOExit
.8b9a	c8		iny				iny
.8b9b	20 3f aa	jsr $aa3f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b9e	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ba0	c9 58		cmp #$58			cmp 	#'X'
.8ba2	f0 36		beq $8bda			beq 	_TACOExit
.8ba4	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ba6	c9 59		cmp #$59			cmp 	#'Y'
.8ba8	f0 30		beq $8bda			beq 	_TACOExit
.8baa					_TACOSyntax:
.8baa	4c ae b0	jmp $b0ae			jmp 	SyntaxError
.8bad					_TACOIndirect:
.8bad	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get the operand
.8bb0	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bb4	f0 17		beq $8bcd			beq 	_TACOIndX
.8bb6	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bb9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbb	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bbd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bbf	d0 19		bne $8bda			bne 	_TACOExit
.8bc1	c8		iny				iny
.8bc2	20 3f aa	jsr $aa3f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bc5	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bc7	d0 e1		bne $8baa			bne 	_TACOSyntax
.8bc9	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bcb	80 0d		bra $8bda			bra 	_TACOExit
.8bcd					_TACOIndX:
.8bcd	c8		iny				iny
.8bce	20 3f aa	jsr $aa3f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bd1	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bd3	d0 d5		bne $8baa			bne 	_TACOSyntax
.8bd5	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket			; check )
.8bd8	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bda					_TACOExit:
.8bda	60		rts				rts
.8bdb					CalculateOperand:
.8bdb	48		pha				pha
.8bdc	da		phx				phx
.8bdd	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bdf	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger
.8be2	fa		plx				plx
.8be3	68		pla				pla
.8be4	60		rts				rts
.aa3f					TACOCheckXY:
.aa3f	b1 30		lda ($30),y			lda 	(codePtr),y
.aa41	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.aa43	c9 40		cmp #$40			cmp 	#$40
.aa45	d0 21		bne $aa68			bne 	_TCXYFail
.aa47	b1 30		lda ($30),y			lda 	(codePtr),y
.aa49	18		clc				clc
.aa4a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aa4c	85 37		sta $37				sta 	zTemp0+1
.aa4e	c8		iny				iny
.aa4f	b1 30		lda ($30),y			lda 	(codePtr),y
.aa51	c8		iny				iny
.aa52	85 36		sta $36				sta 	zTemp0
.aa54	5a		phy				phy 								; save position
.aa55	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.aa57	b1 36		lda ($36),y			lda 	(zTemp0),y
.aa59	d0 0c		bne $aa67			bne 	_TCXYPopFail
.aa5b	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.aa5d	b1 36		lda ($36),y			lda 	(zTemp0),y
.aa5f	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aa61	f0 08		beq $aa6b			beq 	_TCXYFound
.aa63	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aa65	f0 04		beq $aa6b			beq 	_TCXYFound
.aa67					_TCXYPopFail:
.aa67	7a		ply				ply
.aa68					_TCXYFail:
.aa68	a9 00		lda #$00			lda 	#0
.aa6a	60		rts				rts
.aa6b					_TCXYFound:
.aa6b	7a		ply				ply 								; restore position
.aa6c	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aa6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8be5					EditProgramCode:
.8be5	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8be8	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8beb	20 20 a3	jsr $a320			jsr 	MemorySearch
.8bee	90 05		bcc $8bf5			bcc 	_EPCNoDelete 				; reached the end don't delete
.8bf0	d0 03		bne $8bf5			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8bf2	20 a5 b2	jsr $b2a5			jsr 	MemoryDeleteLine 			; delete the line
.8bf5					_EPCNoDelete:
.8bf5	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8bf8	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bfa	f0 0d		beq $8c09			beq 	_EPCNoInsert
.8bfc	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bff	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c02	20 20 a3	jsr $a320			jsr 	MemorySearch
.8c05	18		clc				clc 								; insert at this point.
.8c06	20 dc b2	jsr $b2dc			jsr 	MemoryInsertLine 			; insert the line
.8c09					_EPCNoInsert:
.8c09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c0a					WarmStart:
.8c0a	a2 ff		ldx #$ff			ldx 	#$FF
.8c0c	9a		txs				txs
.8c0d	20 77 b2	jsr $b277			jsr 	EXTInputLine 				; get line to lineBuffer
.8c10	20 c0 a7	jsr $a7c0			jsr 	TokeniseLine 				; tokenise the line
.8c13	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8c16	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8c19	d0 17		bne $8c32			bne 	_WSEditCode 				; if so,edit code.
.8c1b	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c1e	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8c20	85 30		sta $30				sta 	codePtr
.8c22	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c24	85 31		sta $31				sta 	codePtr+1
.8c26	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8c29	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c2b	f0 dd		beq $8c0a			beq 	WarmStart
.8c2d	20 ac 92	jsr $92ac			jsr 	RUNCodePointerLine 			; execute that line.
.8c30	80 d8		bra $8c0a			bra 	WarmStart
.8c32					_WSEditCode:
.8c32	20 e5 8b	jsr $8be5			jsr 	EditProgramCode
.8c35	20 a3 8c	jsr $8ca3			jsr 	ClearCommand
.8c38	80 d0		bra $8c0a			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c3a					AssembleCommand:
.8c3a	a2 00		ldx #$00			ldx 	#0
.8c3c	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger 		; start address
.8c3f	ad 08 04	lda $0408			lda 	NSMantissa0
.8c42	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c45	ad 10 04	lda $0410			lda 	NSMantissa1
.8c48	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c4b	20 d0 aa	jsr $aad0			jsr 	CheckComma
.8c4e	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; options
.8c51	ad 08 04	lda $0408			lda 	NSMantissa0
.8c54	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c57	60		rts				rts
.8c58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c59					AssertCommand:
.8c59	a2 00		ldx #$00			ldx 	#0
.8c5b	20 38 a2	jsr $a238			jsr 	EvaluateInteger 			; the assert test
.8c5e	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; exit if result is non zero.
.8c61	d0 05		bne $8c68			bne 	_ACExit
.8c63	a9 0a		lda #$0a		lda	#10
.8c65	4c 09 97	jmp $9709		jmp	ErrorHandler
.8c68					_ACExit:
.8c68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c69					CallCommand:
.8c69	a2 00		ldx #$00			ldx 	#0
.8c6b	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger
.8c6e					_CCClear
.8c6e	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c6f	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero
.8c72	e0 04		cpx #$04			cpx 	#4
.8c74	d0 f8		bne $8c6e			bne 	_CCClear
.8c76	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c78					_CCCParam:
.8c78	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c7c	d0 09		bne $8c87			bne 	_CCCRun6502
.8c7e	c8		iny				iny 								; skip comma
.8c7f	e8		inx				inx	 								; next level
.8c80	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c83	e0 03		cpx #$03			cpx 	#3
.8c85	90 f1		bcc $8c78			bcc 	_CCCParam 					; done all 3 ?
.8c87					_CCCRun6502:
.8c87	5a		phy				phy 								; save position
.8c88	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c8b	85 37		sta $37				sta 	zTemp0+1
.8c8d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c90	85 36		sta $36				sta 	zTemp0
.8c92	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c95	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c98	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c9b	20 a0 8c	jsr $8ca0			jsr 	_CCCZTemp0 					; call zTemp0
.8c9e	7a		ply				ply 								; restore position and exit
.8c9f	60		rts				rts
.8ca0					_CCCZTemp0:
.8ca0	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ca3					ClearCommand:
.8ca3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ca5	85 36		sta $36				sta 	0+zTemp0
.8ca7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ca9	85 37		sta $37				sta 	1+zTemp0
.8cab					_ClearZeroLoop:
.8cab	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cad	f0 24		beq $8cd3			beq 	_ClearZeroEnd
.8caf	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cb1	a9 00		lda #$00			lda 	#0
.8cb3					_ClearOneVariable:
.8cb3	91 36		sta ($36),y			sta 	(zTemp0),y
.8cb5	c8		iny				iny
.8cb6	c0 08		cpy #$08			cpy 	#8
.8cb8	d0 f9		bne $8cb3			bne 	_ClearOneVariable
.8cba	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cbc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cbe	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cc0	d0 04		bne $8cc6			bne 	_ClearNotProcedure
.8cc2	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cc4	91 36		sta ($36),y			sta 	(zTemp0),y
.8cc6					_ClearNotProcedure:
.8cc6	18		clc				clc 								; go to the next variable
.8cc7	b2 36		lda ($36)			lda 	(zTemp0)
.8cc9	65 36		adc $36				adc 	zTemp0
.8ccb	85 36		sta $36				sta 	zTemp0
.8ccd	90 dc		bcc $8cab			bcc 	_ClearZeroLoop
.8ccf	e6 37		inc $37				inc 	zTemp0+1
.8cd1	80 d8		bra $8cab			bra 	_ClearZeroLoop
.8cd3					_ClearZeroEnd:
.8cd3	18		clc				clc
.8cd4	a5 36		lda $36				lda 	zTemp0
.8cd6	69 01		adc #$01			adc 	#1
.8cd8	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cdb	a5 37		lda $37				lda 	zTemp0+1
.8cdd	69 00		adc #$00			adc 	#0
.8cdf	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ce2	20 da a3	jsr $a3da			jsr 	StackReset
.8ce5	20 bf b3	jsr $b3bf			jsr 	StringSystemInitialise
.8ce8	20 29 96	jsr $9629			jsr 	ProcedureScan
.8ceb	20 68 92	jsr $9268			jsr 	Command_Restore
.8cee	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8cf1	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8cf4	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cf7	20 d0 9f	jsr $9fd0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8cfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cfb					Command_Data:
.8cfb	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cfd	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cff	20 7b 96	jsr $967b			jsr 	ScanForward
.8d02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d03					DimCommand:
.8d03	b1 30		lda ($30),y			lda 	(codePtr),y
.8d05	29 c0		and #$c0			and 	#$C0
.8d07	c9 40		cmp #$40			cmp 	#$40
.8d09	d0 7a		bne $8d85			bne 	_DCSyntax
.8d0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0d	18		clc				clc
.8d0e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d10	85 3f		sta $3f				sta 	zaTemp+1
.8d12	c8		iny				iny
.8d13	b1 30		lda ($30),y			lda 	(codePtr),y
.8d15	c8		iny				iny
.8d16	85 3e		sta $3e				sta 	zaTemp
.8d18	5a		phy				phy
.8d19	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d1b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d1d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d1f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d21	f0 62		beq $8d85			beq 	_DCSyntax
.8d23	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d25	29 04		and #$04			and 	#NSBIsArray
.8d27	f0 64		beq $8d8d			beq 	_DCType
.8d29	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d2b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d2d	d0 59		bne $8d88			bne 	_DCRedefine
.8d2f	7a		ply				ply
.8d30	20 90 8d	jsr $8d90			jsr 	_DCGetSize 				; get array size, check it.
.8d33	5a		phy				phy
.8d34	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d36	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d38	7a		ply				ply 							; is there a second (e.g. ,x)
.8d39	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d3d	d0 0a		bne $8d49			bne 	_DCOneDimension
.8d3f	c8		iny				iny 							; skip comma
.8d40	20 90 8d	jsr $8d90			jsr 	_DCGetSize 				; get 2nd array size
.8d43	5a		phy				phy
.8d44	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d46	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d48	7a		ply				ply
.8d49					_DCOneDimension:
.8d49	5a		phy				phy 							; save position
.8d4a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d4c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4e	aa		tax				tax
.8d4f	c8		iny				iny
.8d50	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d52	e8		inx				inx 							; bump them.
.8d53	1a		inc a				inc 	a
.8d54	20 4a af	jsr $af4a			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d57	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d59	29 e0		and #$e0			and 	#$E0
.8d5b	d0 23		bne $8d80			bne 	_DCSize
.8d5d	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d5f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d61	20 9e 8d	jsr $8d9e			jsr 	ScaleByBaseType 		; scale by base type
.8d64	a5 36		lda $36				lda 	zTemp0
.8d66	a6 37		ldx $37				ldx 	zTemp0+1
.8d68	20 92 9f	jsr $9f92			jsr 	AllocateXABytes 		; allocate memory
.8d6b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d6d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6f	c8		iny				iny
.8d70	8a		txa				txa
.8d71	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d73	7a		ply				ply 							; get position back
.8d74	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 		; check )
.8d77	b1 30		lda ($30),y			lda 	(codePtr),y
.8d79	c8		iny				iny 							; consume in case
.8d7a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d7c	f0 85		beq $8d03			beq 	DimCommand
.8d7e	88		dey				dey 							; undo consume
.8d7f	60		rts				rts
.8d80					_DCSize:
.8d80	a9 16		lda #$16		lda	#22
.8d82	4c 09 97	jmp $9709		jmp	ErrorHandler
.8d85					_DCSyntax:
.8d85	4c ae b0	jmp $b0ae			jmp 	SyntaxError
.8d88					_DCRedefine:
.8d88	a9 15		lda #$15		lda	#21
.8d8a	4c 09 97	jmp $9709		jmp	ErrorHandler
.8d8d					_DCType:
.8d8d	4c b8 b0	jmp $b0b8			jmp 	TypeError
.8d90					_DCGetSize:
.8d90	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d92	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 	; get array dimension
.8d95	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d97	f0 e7		beq $8d80			beq 	_DCSize
.8d99	c9 fe		cmp #$fe			cmp 	#254
.8d9b	f0 e3		beq $8d80			beq 	_DCSize
.8d9d	60		rts				rts
.8d9e					ScaleByBaseType:
.8d9e	29 10		and #$10			and 	#NSBIsString 			; is it string
.8da0	d0 19		bne $8dbb			bne 	_SBBTString
.8da2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8da4	48		pha				pha
.8da5	a5 36		lda $36				lda 	zTemp0
.8da7	48		pha				pha
.8da8	06 36		asl $36				asl 	zTemp0 					; x 2
.8daa	26 37		rol $37				rol 	zTemp0+1
.8dac	06 36		asl $36				asl 	zTemp0 					; x 4
.8dae	26 37		rol $37				rol 	zTemp0+1
.8db0	68		pla				pla 							; add stacked value = x 5
.8db1	65 36		adc $36				adc 	zTemp0
.8db3	85 36		sta $36				sta 	zTemp0
.8db5	68		pla				pla
.8db6	65 37		adc $37				adc 	zTemp0+1
.8db8	85 37		sta $37				sta 	zTemp0+1
.8dba	60		rts				rts
.8dbb					_SBBTString:
.8dbb	06 36		asl $36				asl 	zTemp0
.8dbd	26 37		rol $37				rol 	zTemp0+1
.8dbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8dc0					EndCommand:
.8dc0	4c 0a 8c	jmp $8c0a			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8dc3					ForCommand:
.8dc3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8dc5	20 75 a3	jsr $a375			jsr 	StackOpen
.8dc8	a2 00		ldx #$00			ldx 	#0
.8dca	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm
.8dcd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dd0	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8dd2	d0 49		bne $8e1d			bne		_FCError
.8dd4	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8dd6	20 d8 aa	jsr $aad8			jsr 	CheckNextA
.8dd9	e8		inx				inx
.8dda	20 38 a2	jsr $a238			jsr 	EvaluateInteger 			; <from> in +1
.8ddd	b1 30		lda ($30),y			lda 	(codePtr),y
.8ddf	c8		iny				iny 								; consume it
.8de0	48		pha				pha 								; save on stack for later
.8de1	c9 af		cmp #$af			cmp 	#KWD_DOWNTO
.8de3	f0 04		beq $8de9			beq 	_FCNoSyntax
.8de5	c9 c2		cmp #$c2			cmp 	#KWD_TO
.8de7	d0 37		bne $8e20			bne 	_FCSyntaxError
.8de9					_FCNoSyntax:
.8de9	e8		inx				inx
.8dea	20 38 a2	jsr $a238			jsr 	EvaluateInteger
.8ded	20 b9 a3	jsr $a3b9			jsr 	STKSaveCodePosition 		; save loop back position
.8df0	68		pla				pla 								; restore DOWNTO or TO
.8df1	5a		phy				phy 								; save Y on the stack
.8df2	49 af		eor #$af			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8df4	f0 02		beq $8df8			beq 	_FCNotDownTo
.8df6	a9 02		lda #$02			lda 	#2
.8df8					_FCNotDownTo:
.8df8	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8df9	a0 10		ldy #$10			ldy 	#16
.8dfb	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dfd	a0 06		ldy #$06			ldy 	#6
.8dff	ad 08 04	lda $0408			lda 	NSMantissa0
.8e02	91 34		sta ($34),y			sta 	(basicStack),y
.8e04	ad 10 04	lda $0410			lda 	NSMantissa1
.8e07	c8		iny				iny
.8e08	91 34		sta ($34),y			sta 	(basicStack),y
.8e0a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e0c	a2 01		ldx #$01			ldx 	#1
.8e0e	20 23 8e	jsr $8e23			jsr 	FCIntegerToStack
.8e11	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e13	a2 02		ldx #$02			ldx 	#2
.8e15	20 23 8e	jsr $8e23			jsr 	FCIntegerToStack
.8e18	20 43 8e	jsr $8e43			jsr 	CopyIndexToReference
.8e1b	7a		ply				ply 								; restore position
.8e1c	60		rts				rts
.8e1d					_FCError:
.8e1d	4c b8 b0	jmp $b0b8			jmp 	TypeError
.8e20					_FCSyntaxError:
.8e20	4c ae b0	jmp $b0ae			jmp 	SyntaxError
.8e23					FCIntegerToStack:
.8e23	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8e26	10 03		bpl $8e2b			bpl	 	_FCNotNegative
.8e28	20 76 a2	jsr $a276			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e2b					_FCNotNegative:
.8e2b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e2e	91 34		sta ($34),y			sta 	(basicStack),y
.8e30	c8		iny				iny
.8e31	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e34	91 34		sta ($34),y			sta 	(basicStack),y
.8e36	c8		iny				iny
.8e37	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e3a	91 34		sta ($34),y			sta 	(basicStack),y
.8e3c	c8		iny				iny
.8e3d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e40	91 34		sta ($34),y			sta 	(basicStack),y
.8e42	60		rts				rts
.8e43					CopyIndexToReference:
.8e43	5a		phy				phy
.8e44	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e46	38		sec				sec 								; (because we copy from offset 8)
.8e47	b1 34		lda ($34),y			lda 	(basicStack),y
.8e49	e9 08		sbc #$08			sbc 	#8
.8e4b	85 36		sta $36				sta 	zTemp0
.8e4d	c8		iny				iny
.8e4e	b1 34		lda ($34),y			lda 	(basicStack),y
.8e50	e9 00		sbc #$00			sbc 	#0
.8e52	85 37		sta $37				sta 	zTemp0+1
.8e54	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e56	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e58	b1 34		lda ($34),y			lda 	(basicStack),y
.8e5a	0a		asl a				asl 	a 							; into carry
.8e5b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e5d	90 14		bcc $8e73			bcc 	_CITRNormal
.8e5f	38		sec				sec
.8e60					_CITRNegative:
.8e60	a9 00		lda #$00			lda 	#0
.8e62	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e64	91 36		sta ($36),y			sta 	(zTemp0),y
.8e66	c8		iny				iny
.8e67	ca		dex				dex
.8e68	d0 f6		bne $8e60			bne 	_CITRNegative
.8e6a	88		dey				dey 								; look at MSB of mantissa
.8e6b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e6d	09 80		ora #$80			ora 	#$80
.8e6f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e71	7a		ply				ply
.8e72	60		rts				rts
.8e73					_CITRNormal:
.8e73	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e75	91 36		sta ($36),y			sta 	(zTemp0),y
.8e77	c8		iny				iny
.8e78	ca		dex				dex
.8e79	d0 f8		bne $8e73			bne 	_CITRNormal
.8e7b	7a		ply				ply 								; and exit.
.8e7c	60		rts				rts
.8e7d					NextCommand:
.8e7d	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e7f	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e81	20 a1 a3	jsr $a3a1			jsr 	StackCheckFrame
.8e84	5a		phy				phy
.8e85	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e87	b1 34		lda ($34),y			lda 	(basicStack),y
.8e89	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e8b	30 02		bmi $8e8f			bmi 	_NCStepNeg
.8e8d	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e8f					_NCStepNeg:
.8e8f	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e91	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e93	18		clc				clc
.8e94					_NCBump:
.8e94	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e96	91 34		sta ($34),y			sta 	(basicStack),y
.8e98	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e9a	c8		iny				iny 								; next byte
.8e9b	ca		dex				dex 								; do four times
.8e9c	d0 f6		bne $8e94			bne 	_NCBump
.8e9e	20 43 8e	jsr $8e43			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ea1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ea3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ea5	0a		asl a				asl 	a 							; sign bit to carry
.8ea6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ea8	85 38		sta $38				sta 	zTemp1
.8eaa	90 02		bcc $8eae			bcc 	_NCCompRev 					; use if step is +ve
.8eac	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8eae					_NCCompRev:
.8eae	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8eb0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8eb2	85 39		sta $39				sta 	zTemp1+1
.8eb4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8eb6	38		sec				sec
.8eb7					_NCCompare:
.8eb7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8eb9	b1 34		lda ($34),y			lda 	(basicStack),y
.8ebb	a4 39		ldy $39				ldy 	zTemp1+1
.8ebd	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ebf	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ec1	e6 39		inc $39				inc 	zTemp1+1
.8ec3	ca		dex				dex 								; do it 4 times.
.8ec4	d0 f1		bne $8eb7			bne 	_NCCompare
.8ec6	50 02		bvc $8eca			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ec8	49 80		eor #$80			eor 	#$80
.8eca					_NCNoOverflow:
.8eca	7a		ply				ply 								; restore Y position
.8ecb	0a		asl a				asl 	a 							; is bit 7 set.
.8ecc	90 04		bcc $8ed2			bcc 	_NCLoopback 				; if no , >= so loop back
.8ece	20 93 a3	jsr $a393			jsr 	StackClose 					; exit the loop
.8ed1	60		rts				rts
.8ed2					_NCLoopBack:
.8ed2	20 ca a3	jsr $a3ca			jsr 	STKLoadCodePosition 		; loop back
.8ed5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommands.asm

.8ed6					BitmapCtrl:
.8ed6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ed8	c8		iny				iny
.8ed9	a2 01		ldx #$01			ldx 	#1
.8edb	c9 91		cmp #$91			cmp 	#KWD_ON
.8edd	f0 11		beq $8ef0			beq 	BitmapSwitch
.8edf	ca		dex				dex
.8ee0	c9 90		cmp #$90			cmp 	#KWD_OFF
.8ee2	f0 0c		beq $8ef0			beq 	BitmapSwitch
.8ee4	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; get the colour
.8ee7	5a		phy				phy
.8ee8	aa		tax				tax
.8ee9	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.8eeb	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8eee	7a		ply				ply
.8eef	60		rts				rts
.8ef0					BitmapSwitch:
.8ef0	5a		phy				phy
.8ef1	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.8ef3	a9 02		lda #$02			lda 	#1*2
.8ef5	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ef8	7a		ply				ply
.8ef9	60		rts				rts
.8efa					SpritesCtrl:
.8efa	b1 30		lda ($30),y			lda 	(codePtr),y
.8efc	c8		iny				iny
.8efd	a2 01		ldx #$01			ldx 	#1
.8eff	c9 91		cmp #$91			cmp 	#KWD_ON
.8f01	f0 08		beq $8f0b			beq 	SpriteSwitch
.8f03	ca		dex				dex
.8f04	c9 90		cmp #$90			cmp 	#KWD_OFF
.8f06	f0 03		beq $8f0b			beq 	SpriteSwitch
.8f08	4c ae b0	jmp $b0ae			jmp 	SyntaxError
.8f0b					SpriteSwitch:
.8f0b	5a		phy				phy
.8f0c	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.8f0e	a9 04		lda #$04			lda 	#2*2
.8f10	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f13	7a		ply				ply
.8f14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.8f15					GfxCommand:
.8f15	a2 00		ldx #$00			ldx 	#0
.8f17	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; command
.8f1a	20 d0 aa	jsr $aad0			jsr 	CheckComma
.8f1d	e8		inx				inx
.8f1e	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger 		; X
.8f21	20 d0 aa	jsr $aad0			jsr 	CheckComma
.8f24	e8		inx				inx
.8f25	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; Y
.8f28	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.8f2b	4a		lsr a				lsr 	a
.8f2c	d0 16		bne $8f44			bne 	_GfxError
.8f2e	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.8f31	b0 11		bcs $8f44			bcs 	_GfxError 					; bit 7 should have been zero
.8f33	5a		phy				phy 								; save pos
.8f34	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.8f37	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8f3a	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8f3d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f40	b0 02		bcs $8f44			bcs 	_GfxError
.8f42	7a		ply				ply 								; restore pos and exit.
.8f43	60		rts				rts
.8f44					_GfxError:
.8f44	4c b3 b0	jmp $b0b3			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8f47					Command_GOSUB:
.8f47	a2 00		ldx #$00			ldx 	#0
.8f49	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8f4c	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8f4e	20 75 a3	jsr $a375			jsr 	StackOpen 					; create frame
.8f51	20 b9 a3	jsr $a3b9			jsr 	STKSaveCodePosition 		; save current position
.8f54	4c 6a 8f	jmp $8f6a			jmp 	GotoStackX
.8f57					Command_RETURN:
.8f57	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8f59	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8f5b	20 a1 a3	jsr $a3a1			jsr 	StackCheckFrame
.8f5e	20 ca a3	jsr $a3ca			jsr 	STKLoadCodePosition 		; restore code position
.8f61	20 93 a3	jsr $a393			jsr 	StackClose
.8f64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8f65					GotoCommand:
.8f65	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8f67	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger
.8f6a					GotoStackX:
.8f6a	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8f6d	48		pha				pha 								; it is slightly inefficient, just in cases.
.8f6e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8f71	fa		plx				plx
.8f72	20 20 a3	jsr $a320			jsr 	MemorySearch 				; transfer to line number AX.
.8f75	90 05		bcc $8f7c			bcc 	_GotoError 					; not found, off end.
.8f77	d0 03		bne $8f7c			bne 	_GotoError 					; not found exactly
.8f79	4c a5 92	jmp $92a5			jmp 	RunNewLine 					; and go straight to new line code.
.8f7c					_GotoError:
.8f7c	a9 0d		lda #$0d		lda	#13
.8f7e	4c 09 97	jmp $9709		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8f81					IfCommand:
.8f81	a2 00		ldx #$00			ldx 	#0 							; If what.
.8f83	20 15 a2	jsr $a215			jsr 	EvaluateNumber
.8f86	b1 30		lda ($30),y			lda 	(codePtr),y
.8f88	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8f8a	d0 0a		bne $8f96			bne 	_IFStructured
.8f8c	c8		iny				iny 								; consume THEN
.8f8d	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; is it zero
.8f90	f0 01		beq $8f93			beq 	_IfFail 					; if fail, go to next line
.8f92	60		rts				rts 								; if THEN just continue
.8f93					_IfFail:
.8f93	4c 0a 93	jmp $930a			jmp 	EOLCommand
.8f96					_IfStructured:
.8f96	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; is it zero
.8f99	d0 07		bne $8fa2			bne 	_IfExit 					; if not, then continue normally.
.8f9b	a9 b0		lda #$b0			lda 	#KWD_ELSE 					; look for else/endif
.8f9d	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.8f9f	20 7b 96	jsr $967b			jsr 	ScanForward 				; and run from there/
.8fa2					_IfExit:
.8fa2	60		rts				rts
.8fa3					ElseCode:
.8fa3	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8fa5	aa		tax				tax 								; so just go to the structure exit
.8fa6	20 7b 96	jsr $967b			jsr 	ScanForward
.8fa9	60		rts				rts
.8faa					EndIf:
.8faa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8fab					LetCommand:
.8fab	a2 00		ldx #$00			ldx 	#0
.8fad	b1 30		lda ($30),y			lda 	(codePtr),y
.8faf	c9 10		cmp #$10			cmp 	#KWD_AT
.8fb1	d0 16		bne $8fc9			bne 	_LCStandard
.8fb3	c8		iny				iny 								; skip equal
.8fb4	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm 				; get a number
.8fb7	20 27 9c	jsr $9c27			jsr 	Dereference 				; dereference it
.8fba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8fbd	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8fbf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8fc2	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8fc4	d0 10		bne $8fd6			bne 	_LCMain
.8fc6	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; was a reference before.
.8fc9					_LCStandard:
.8fc9	ad fa 9a	lda $9afa			lda 	PrecedenceLevel+"*"			; precedence > this
.8fcc	20 14 9b	jsr $9b14			jsr 	EvaluateExpressionAtPrecedence
.8fcf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8fd2	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8fd4	f0 0e		beq $8fe4			beq 	_LetGoProc 					; it's a procedure call.
.8fd6					_LCMain:
.8fd6	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8fd8	20 d8 aa	jsr $aad8			jsr 	CheckNextA
.8fdb	e8		inx				inx 								; RHS
.8fdc	20 0c a2	jsr $a20c			jsr 	EvaluateValue
.8fdf	ca		dex				dex
.8fe0	20 e7 8f	jsr $8fe7			jsr 	AssignVariable
.8fe3	60		rts				rts
.8fe4					_LetGoProc:
.8fe4	4c 80 91	jmp $9180			jmp 	CallProcedure
.8fe7					AssignVariable:
.8fe7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8fea	48		pha				pha 								; save a copy
.8feb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fee	29 10		and #$10			and 	#NSBIsString
.8ff0	d0 0b		bne $8ffd			bne 	_ASError
.8ff2	68		pla				pla 								; get back
.8ff3	29 10		and #$10			and 	#NSBIsString 				; check type
.8ff5	d0 03		bne $8ffa			bne 	_ASString
.8ff7	4c 4f 9b	jmp $9b4f			jmp 	AssignNumber
.8ffa					_ASString:
.8ffa	4c bd 9b	jmp $9bbd			jmp 	AssignString
.8ffd					_ASError:
.8ffd	4c b8 b0	jmp $b0b8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.9000					Command_List:
.9000	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.9003	9c 14 04	stz $0414			stz 	NSMantissa1+4
.9006	a9 ff		lda #$ff			lda 	#$FF
.9008	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.900b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.900e	b1 30		lda ($30),y			lda 	(codePtr),y
.9010	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9012	f0 1e		beq $9032			beq 	_CLSecond
.9014	20 90 90	jsr $9090			jsr 	CLIsDigit 					; if not digit, list all
.9017	b0 24		bcs $903d			bcs 	_CLStart
.9019	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.901b	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger
.901e	b1 30		lda ($30),y			lda 	(codePtr),y
.9020	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9022	f0 0e		beq $9032			beq 	_CLSecond 					; if so go get it
.9024	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9027	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.902a	ad 14 04	lda $0414			lda 	NSMantissa1+4
.902d	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9030	80 0b		bra $903d			bra 	_CLStart
.9032					_CLSecond:
.9032	c8		iny				iny 								; consume comma
.9033	20 90 90	jsr $9090			jsr 	CLIsDigit 					; digit found
.9036	b0 05		bcs $903d			bcs 	_CLStart 					; if not, continue listing
.9038	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.903a	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger
.903d					_CLStart
.903d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.903f	85 30		sta $30				sta 	codePtr
.9041	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9043	85 31		sta $31				sta 	codePtr+1
.9045					_CLLoop:
.9045	20 a2 b2	jsr $b2a2			jsr 	EXTBreakCheck 				; break check
.9048	f0 30		beq $907a			beq 	_CLExit
.904a	b2 30		lda ($30)			lda 	(codePtr)
.904c	f0 2c		beq $907a			beq 	_CLExit
.904e	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9050	20 7d 90	jsr $907d			jsr 	CLCompareLineNo
.9053	90 18		bcc $906d			bcc 	_CLNext
.9055	a2 07		ldx #$07			ldx 	#7
.9057	20 7d 90	jsr $907d			jsr 	CLCompareLineNo
.905a	f0 02		beq $905e			beq 	_CLDoThisOne
.905c	b0 0f		bcs $906d			bcs 	_CLNext
.905e					_CLDoThisOne:
.905e	20 d7 94	jsr $94d7			jsr 	ListConvertLine 			; convert line into token Buffer
.9061	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9063	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9065	20 62 97	jsr $9762			jsr 	PrintStringXA
.9068	a9 0d		lda #$0d			lda 	#13 						; new line
.906a	20 61 b2	jsr $b261			jsr 	EXTPrintCharacter
.906d					_CLNext:
.906d	18		clc				clc
.906e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9070	65 30		adc $30				adc 	codePtr
.9072	85 30		sta $30				sta 	codePtr
.9074	90 02		bcc $9078			bcc 	_CREExit
.9076	e6 31		inc $31				inc 	codePtr+1
.9078					_CREExit:
.9078	80 cb		bra $9045			bra 	_CLLoop
.907a					_CLExit:
.907a	4c 0a 8c	jmp $8c0a			jmp 	WarmStart
.907d					CLCompareLineNo:
.907d	38		sec				sec
.907e	a0 01		ldy #$01			ldy 	#1
.9080	b1 30		lda ($30),y			lda 	(codePtr),y
.9082	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9085	85 36		sta $36				sta 	zTemp0
.9087	c8		iny				iny
.9088	b1 30		lda ($30),y			lda 	(codePtr),y
.908a	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.908d	05 36		ora $36				ora 	zTemp0
.908f	60		rts				rts
.9090					CLIsDigit:
.9090	b1 30		lda ($30),y			lda 	(codePtr),y
.9092	c9 30		cmp #$30			cmp 	#"0"
.9094	90 03		bcc $9099			bcc	 	_CLIDExitFalse
.9096	c9 3a		cmp #$3a			cmp 	#"9"+1
.9098	60		rts				rts
.9099					_CLIDExitFalse:
.9099	38		sec				sec
.909a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.909b					Command_LOCAL:
.909b	a2 00		ldx #$00			ldx 	#0 							; at level 0
.909d	20 a9 90	jsr $90a9			jsr 	LocaliseNextTerm 			; convert term to a local.
.90a0	b1 30		lda ($30),y			lda 	(codePtr),y
.90a2	c8		iny				iny
.90a3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90a5	f0 f4		beq $909b			beq 	Command_LOCAL
.90a7	88		dey				dey 								; unpick pre-get
.90a8	60		rts				rts
.90a9					LocaliseNextTerm:
.90a9	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm 				; evaluate the term
.90ac	bd 00 04	lda $0400,x			lda 	NSStatus,x
.90af	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.90b1	f0 69		beq $911c			beq		_LNTError
.90b3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.90b6	85 36		sta $36				sta 	zTemp0
.90b8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.90bb	85 37		sta $37				sta  	zTemp0+1
.90bd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.90c0	29 10		and #$10			and 	#NSBIsString
.90c2	d0 22		bne $90e6			bne 	_LNTPushString
.90c4	5a		phy				phy
.90c5	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.90c7					_LNTPushNumLoop:
.90c7	b1 36		lda ($36),y			lda		(zTemp0),y
.90c9	20 53 a3	jsr $a353			jsr 	StackPushByte
.90cc	a9 00		lda #$00			lda 	#0
.90ce	91 36		sta ($36),y			sta 	(zTemp0),y
.90d0	c8		iny				iny
.90d1	c0 05		cpy #$05			cpy 	#5
.90d3	d0 f2		bne $90c7			bne 	_LNTPushNumLoop
.90d5	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.90d7	20 53 a3	jsr $a353			jsr 	StackPushByte
.90da	a5 37		lda $37				lda 	zTemp0+1
.90dc	20 53 a3	jsr $a353			jsr 	StackPushByte
.90df	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.90e1	20 53 a3	jsr $a353			jsr 	StackPushByte
.90e4	7a		ply				ply
.90e5	60		rts				rts
.90e6					_LNTPushString:
.90e6	5a		phy				phy
.90e7	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.90e9	85 38		sta $38				sta 	zTemp1
.90eb	a0 01		ldy #$01			ldy 	#1
.90ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.90ef	85 39		sta $39				sta 	zTemp1+1
.90f1	a0 00		ldy #$00			ldy 	#0 							; output string
.90f3	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.90f5	f0 0a		beq $9101			beq 	_LNTStringOut
.90f7					_LNTPushStrLoop:
.90f7	b1 38		lda ($38),y			lda 	(zTemp1),y
.90f9	f0 06		beq $9101			beq 	_LNTStringOut
.90fb	20 53 a3	jsr $a353			jsr 	StackPushByte
.90fe	c8		iny				iny
.90ff	80 f6		bra $90f7			bra 	_LNTPushStrLoop
.9101					_LNTStringOut:
.9101	98		tya				tya									; output length
.9102	20 53 a3	jsr $a353			jsr 	StackPushByte
.9105	a9 00		lda #$00			lda 	#0 							; clear original string.
.9107	92 38		sta ($38)			sta 	(zTemp1)
.9109	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.910c	20 53 a3	jsr $a353			jsr 	StackPushByte
.910f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9112	20 53 a3	jsr $a353			jsr 	StackPushByte
.9115	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9117	20 53 a3	jsr $a353			jsr 	StackPushByte
.911a	7a		ply				ply
.911b	60		rts				rts
.911c					_LNTError:
.911c	4c ae b0	jmp $b0ae			jmp 	SyntaxError
.aa6f					LocalPopValue:
.aa6f	20 6c a3	jsr $a36c			jsr 	StackPopByte
.aa72	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.aa74	d0 17		bne $aa8d			bne 	_LPVString
.aa76	20 6c a3	jsr $a36c			jsr 	StackPopByte 				; address
.aa79	85 37		sta $37				sta 	zTemp0+1
.aa7b	20 6c a3	jsr $a36c			jsr 	StackPopByte
.aa7e	85 36		sta $36				sta 	zTemp0
.aa80	5a		phy				phy
.aa81	a0 04		ldy #$04			ldy 	#4 							; copy back
.aa83					_LPVNumberCopy:
.aa83	20 6c a3	jsr $a36c			jsr 	StackPopByte
.aa86	91 36		sta ($36),y			sta 	(zTemp0),y
.aa88	88		dey				dey
.aa89	10 f8		bpl $aa83			bpl 	_LPVNumberCopy
.aa8b	7a		ply				ply 								; and complete
.aa8c	60		rts				rts
.aa8d					_LPVString:
.aa8d	20 6c a3	jsr $a36c			jsr 	StackPopByte 				; address of record => zTemp0
.aa90	85 37		sta $37				sta 	zTemp0+1
.aa92	20 6c a3	jsr $a36c			jsr 	StackPopByte
.aa95	85 36		sta $36				sta 	zTemp0
.aa97	5a		phy				phy
.aa98	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.aa9a	85 38		sta $38				sta 	zTemp1
.aa9c	a0 01		ldy #$01			ldy 	#1
.aa9e	b1 36		lda ($36),y			lda 	(zTemp0),y
.aaa0	85 39		sta $39				sta 	zTemp1+1
.aaa2	20 6c a3	jsr $a36c			jsr 	StackPopByte 				; # to get => y
.aaa5	a8		tay				tay
.aaa6	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.aaa8	f0 0e		beq $aab8			beq 	_LPVStringCopied
.aaaa	a9 00		lda #$00			lda 	#0 							; NULL on end
.aaac	91 38		sta ($38),y			sta 	(zTemp1),y
.aaae					_LPVStringCopy:
.aaae	88		dey				dey
.aaaf	30 07		bmi $aab8			bmi 	_LPVStringCopied
.aab1	20 6c a3	jsr $a36c			jsr 	StackPopByte
.aab4	91 38		sta ($38),y			sta 	(zTemp1),y
.aab6	80 f6		bra $aaae			bra 	_LPVStringCopy
.aab8					_LPVStringCopied:
.aab8	fa		plx				plx
.aab9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.911f					NewCommand:
.911f	20 fe a2	jsr $a2fe			jsr 	MemoryNew
.9122	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9125	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear everything.
.9128	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9129					Command_Print:
.9129	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.912a					_CPLoop:
.912a	08		php				php 								; save last action flag
.912b	b1 30		lda ($30),y			lda 	(codePtr),y
.912d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.912f	f0 46		beq $9177			beq 	_CPExit
.9131	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9133	f0 42		beq $9177			beq 	_CPExit
.9135	68		pla				pla 								; throw last action flag
.9136	b1 30		lda ($30),y			lda 	(codePtr),y
.9138	c8		iny				iny
.9139	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.913b	f0 37		beq $9174			beq 	_CPContinueWithSameLine
.913d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.913f	f0 2e		beq $916f			beq 	_CPTab
.9141	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9143	f0 26		beq $916b			beq 	_CPNewLine
.9145	88		dey				dey 								; undo the get.
.9146	a2 00		ldx #$00			ldx 	#0
.9148	20 0c a2	jsr $a20c			jsr 	EvaluateValue 				; get a value into slot 0
.914b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.914e	29 10		and #$10			and 	#NSBIsString
.9150	f0 0b		beq $915d			beq 	_CPNumber
.9152	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9155	ad 08 04	lda $0408			lda 	NSMantissa0
.9158	20 62 97	jsr $9762			jsr 	PrintStringXA
.915b	80 cc		bra $9129			bra 	Command_Print 				; loop round clearing carry so NL if end
.915d					_CPNumber:
.915d	a9 05		lda #$05			lda 	#5 							; maximum decimals
.915f	20 e2 a0	jsr $a0e2			jsr 	ConvertNumberToString 		; convert to string
.9162	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9164	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9166	20 62 97	jsr $9762			jsr 	PrintStringXA
.9169	80 be		bra $9129			bra 	Command_Print 				; loop round clearing carry so NL if end
.916b					_CPNewLine:
.916b	a9 0d		lda #$0d			lda 	#13
.916d	80 02		bra $9171			bra 	_CPPrintChar
.916f					_CPTab:
.916f	a9 09		lda #$09			lda 	#9 							; print TAB
.9171					_CPPrintChar:
.9171	20 61 b2	jsr $b261			jsr 	EXTPrintCharacter
.9174					_CPContinueWithSameLine:
.9174	38		sec				sec 								; loop round with carry set, which
.9175	80 b3		bra $912a			bra 	_CPLoop 					; will inhibit final CR
.9177					_CPExit:
.9177	28		plp				plp 								; get last action flag
.9178	b0 05		bcs $917f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.917a	a9 0d		lda #$0d			lda 	#13 						; print new line
.917c	20 61 b2	jsr $b261			jsr 	EXTPrintCharacter
.917f					_CPExit2:
.917f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9180					CallProcedure:
.9180	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9182	b1 30		lda ($30),y			lda 	(codePtr),y
.9184	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9186	f0 0c		beq $9194			beq 	_CPEndParam
.9188					_CPParamLoop:
.9188	20 12 9b	jsr $9b12			jsr 	EvaluateExpression 			; get parameter onto stack
.918b	e8		inx				inx 								; bump next stack
.918c	b1 30		lda ($30),y			lda 	(codePtr),y
.918e	c8		iny				iny
.918f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9191	f0 f5		beq $9188			beq 	_CPParamLoop
.9193	88		dey				dey 								; unpick.
.9194					_CPEndParam:
.9194	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9197	c8		iny				iny									; skip right bracket
.9198	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.919a	20 75 a3	jsr $a375			jsr 	StackOpen
.919d	20 b9 a3	jsr $a3b9			jsr 	STKSaveCodePosition 		; save loop position
.91a0	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.91a3	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.91a5	ad 10 04	lda $0410			lda 	NSMantissa1
.91a8	85 37		sta $37				sta 	zTemp0+1
.91aa	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.91ac	b2 36		lda ($36)			lda 	(zTemp0)
.91ae	85 30		sta $30				sta 	safePtr
.91b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.91b2	85 31		sta $31				sta 	safePtr+1
.91b4	c8		iny				iny
.91b5	b1 36		lda ($36),y			lda 	(zTemp0),y
.91b7	85 32		sta $32				sta 	safePtr+2
.91b9	c8		iny				iny
.91ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.91bc	85 33		sta $33				sta 	safePtr+3
.91be	c8		iny				iny 								; get Y offset -> Y
.91bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.91c1	a8		tay				tay
.91c2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.91c4	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.91c7	f0 13		beq $91dc			beq 	_ParamExit 					; if so, exit.
.91c9					_ParamExtract:
.91c9	ca		dex				dex 								; put a local term on the level before
.91ca	20 a9 90	jsr $90a9			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.91cd	20 e7 8f	jsr $8fe7			jsr 	AssignVariable 				; assign stacked value to the variable.
.91d0	e8		inx				inx 								; advance to next parameter to do.
.91d1	e8		inx				inx
.91d2	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.91d5	f0 05		beq $91dc			beq 	_ParamExit
.91d7	20 d0 aa	jsr $aad0			jsr 	CheckComma 					; comma seperating parameters
.91da	80 ed		bra $91c9			bra 	_ParamExtract
.91dc					_ParamExit:
.91dc	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 			; check )
.91df	60		rts				rts 								; and continue from here
.aaba					Command_ENDPROC:
.aaba	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.aabc	a2 14		ldx #$14			ldx 	#ERRID_PROC
.aabe	20 a1 a3	jsr $a3a1			jsr 	StackCheckFrame
.aac1	20 ca a3	jsr $a3ca			jsr 	STKLoadCodePosition 		; restore code position
.aac4	20 93 a3	jsr $a393			jsr 	StackClose
.aac7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.91e0					Command_Read:
.91e0	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.91e2	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm
.91e5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.91e8	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.91ea	f0 4a		beq $9236			beq 	_CRSyntax 					; check reference (bit 0)
.91ec	20 7f 92	jsr $927f			jsr 	SwapDataCodePtrs 			; swap code and data
.91ef	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.91f2	d0 20		bne $9214			bne 	_CRContinueData
.91f4					_CRKeepSearching:
.91f4	a9 ad		lda #$ad			lda 	#KWD_DATA 					; scan for instruction
.91f6	aa		tax				tax
.91f7	20 7b 96	jsr $967b			jsr 	ScanForward
.91fa	c9 ad		cmp #$ad			cmp 	#KWD_DATA 					; found data ?
.91fc	f0 16		beq $9214			beq 	_CRHaveData 				; found it
.91fe	18		clc				clc
.91ff	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9201	65 30		adc $30				adc 	codePtr
.9203	85 30		sta $30				sta 	codePtr
.9205	90 02		bcc $9209			bcc 	_CREExit
.9207	e6 31		inc $31				inc 	codePtr+1
.9209					_CREExit:
.9209	a0 03		ldy #$03			ldy 	#3 							; start of line.
.920b	b2 30		lda ($30)			lda 	(codePtr)
.920d	d0 e5		bne $91f4			bne 	_CRKeepSearching
.920f	a9 0b		lda #$0b		lda	#11
.9211	4c 09 97	jmp $9709		jmp	ErrorHandler
.9214					_CRHaveData:
.9214					_CRContinueData:
.9214	a2 01		ldx #$01			ldx 	#1
.9216	20 0c a2	jsr $a20c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9219	ca		dex				dex
.921a	20 e7 8f	jsr $8fe7			jsr		AssignVariable 				; do the assignment
.921d	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9220	b1 30		lda ($30),y			lda 	(codePtr),y
.9222	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9224	d0 04		bne $922a			bne 	_CRSwapBack
.9226	c8		iny				iny 								; consume comma
.9227	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.922a					_CRSwapBack:
.922a	20 7f 92	jsr $927f			jsr 	SwapDataCodePtrs			; swap them back.
.922d	b1 30		lda ($30),y			lda 	(codePtr),y
.922f	c8		iny				iny
.9230	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9232	f0 ac		beq $91e0			beq 	Command_Read 				; if so go round again.
.9234	88		dey				dey 								; unpick get.
.9235	60		rts				rts
.9236					_CRSyntax:
.9236	4c ae b0	jmp $b0ae			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9239					RemCommand:
.9239	b1 30		lda ($30),y			lda 	(codePtr),y
.923b	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.923d	d0 06		bne $9245			bne 	_RMExit
.923f	c8		iny				iny
.9240	98		tya				tya
.9241	38		sec				sec
.9242	71 30		adc ($30),y			adc 	(codePtr),y
.9244	a8		tay				tay
.9245					_RMExit:
.9245	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9246					Command_REPEAT:
.9246	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9248	20 75 a3	jsr $a375			jsr 	StackOpen
.924b	20 b9 a3	jsr $a3b9			jsr 	STKSaveCodePosition 		; save loop position
.924e	60		rts				rts
.924f					Command_UNTIL:
.924f	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9251	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9253	20 a1 a3	jsr $a3a1			jsr 	StackCheckFrame
.9256	a2 00		ldx #$00			ldx 	#0
.9258	20 15 a2	jsr $a215			jsr 	EvaluateNumber 				; work out the number
.925b	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; check if zero
.925e	f0 04		beq $9264			beq 	_CULoopBack 				; if so keep looping
.9260	20 93 a3	jsr $a393			jsr 	StackClose		 			; return
.9263	60		rts				rts
.9264					_CULoopBack:
.9264	20 ca a3	jsr $a3ca			jsr 	STKLoadCodePosition 		; loop back
.9267	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9268					Command_Restore:
.9268	20 7f 92	jsr $927f			jsr 	SwapDataCodePtrs 			; swap code and data
.926b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.926d	85 30		sta $30				sta 	codePtr
.926f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9271	85 31		sta $31				sta 	codePtr+1
.9273	20 7f 92	jsr $927f			jsr 	SwapDataCodePtrs 			; put them back
.9276	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9278	8d 9b 04	sta $049b			sta 	dataPointer+4
.927b	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.927e	60		rts				rts
.927f					SwapDataCodePtrs:
.927f	da		phx				phx
.9280	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9282					_SDCPLoop:
.9282	b5 30		lda $30,x			lda 	safePtr,x
.9284	48		pha				pha
.9285	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9288	95 30		sta $30,x			sta 	safePtr,x
.928a	68		pla				pla
.928b	9d 97 04	sta $0497,x			sta 	dataPointer,x
.928e	ca		dex				dex
.928f	10 f1		bpl $9282			bpl 	_SDCPLoop
.9291	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9294	8c 9b 04	sty $049b			sty 	dataPointer+4
.9297	a8		tay				tay
.9298	fa		plx				plx
.9299	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.929a					CommandRUN:
.929a	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear variable/stacks/etc.
.929d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.929f	85 30		sta $30				sta 	codePtr
.92a1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92a3	85 31		sta $31				sta 	codePtr+1
.92a5					RUNNewLine:
.92a5	b2 30		lda ($30)			lda 	(codePtr)
.92a7	f0 5e		beq $9307			beq 	CRNoProgram         		; no then END.
.92a9	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.92ab	9a		txs				txs
.92ac					RUNCodePointerLine:
.92ac	a0 02		ldy #$02			ldy 	#2 							; start of program
.92ae					_CRIncMainLoop:
.92ae	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.92b1	d0 05		bne $92b8			bne 	_CRNoBreakCheck
.92b3	20 a2 b2	jsr $b2a2			jsr 	EXTBreakCheck 				; break check
.92b6	f0 4a		beq $9302			beq 	_CRBreak
.92b8					_CRNoBreakCheck:
.92b8	c8		iny				iny
.92b9					_CRMainLoop:
.92b9	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.92bc	b1 30		lda ($30),y			lda 	(codePtr),y
.92be	10 10		bpl $92d0			bpl 	_CRNotKeyword
.92c0	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.92c2	b0 04		bcs $92c8			bcs 	_CRIsKeyword
.92c4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.92c6	b0 34		bcs $92fc			bcs		_CRSyntaxError
.92c8					_CRIsKeyword:
.92c8	c8		iny				iny 								; consume command
.92c9	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.92ca	aa		tax				tax 								; put in X for vector jump
.92cb	20 ff 92	jsr $92ff			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.92ce	80 e9		bra $92b9			bra 	_CRMainLoop 				; and loop round
.92d0					_CRNotKeyword:
.92d0	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.92d2	f0 da		beq $92ae			beq 	_CRIncMainLoop
.92d4	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.92d6	90 05		bcc $92dd			bcc 	_CRNotVariable
.92d8					_CRGoLet:
.92d8	20 ab 8f	jsr $8fab			jsr 	LetCommand
.92db	80 dc		bra $92b9			bra 	_CRMainLoop
.92dd					_CRNotVariable:
.92dd	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.92df	f0 f7		beq $92d8			beq 	_CRGoLet
.92e1	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.92e3	f0 f3		beq $92d8			beq 	_CRGoLet
.92e5	c9 21		cmp #$21			cmp 	#KWD_PLING
.92e7	f0 ef		beq $92d8			beq 	_CRGoLet
.92e9	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.92eb	f0 09		beq $92f6			beq 	_CRGoRem
.92ed	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.92ef	d0 0b		bne $92fc			bne 	_CRSyntaxError
.92f1	20 43 8b	jsr $8b43			jsr 	LabelHere
.92f4	80 c3		bra $92b9			bra 	_CRMainLoop
.92f6					_CRGoRem:
.92f6	c8		iny				iny
.92f7	20 39 92	jsr $9239			jsr 	RemCommand
.92fa	80 bd		bra $92b9			bra 	_CRMainLoop
.92fc					_CRSyntaxError:
.92fc	4c ae b0	jmp $b0ae			jmp 	SyntaxError
.92ff					_CRCallVector0:
.92ff	7c aa 93	jmp ($93aa,x)			jmp 	(VectorSet0,x)
.9302					_CRBreak:
.9302	a9 01		lda #$01		lda	#1
.9304	4c 09 97	jmp $9709		jmp	ErrorHandler
.9307					CRNoProgram:
.9307	4c c0 8d	jmp $8dc0			jmp 	EndCommand
.930a					EOLCommand:
.930a	18		clc				clc
.930b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.930d	65 30		adc $30				adc 	codePtr
.930f	85 30		sta $30				sta 	codePtr
.9311	90 02		bcc $9315			bcc 	_CREExit
.9313	e6 31		inc $31				inc 	codePtr+1
.9315					_CREExit:
.9315	80 8e		bra $92a5			bra 	RunNewLine
.9317					Shift1Command:
.9317	b1 30		lda ($30),y			lda 	(codePtr),y
.9319	c8		iny				iny
.931a	0a		asl a				asl 	a
.931b	aa		tax				tax
.931c	7c 30 94	jmp ($9430,x)			jmp 	(VectorSet1,x)
.931f					Shift2Command:
.931f	b1 30		lda ($30),y			lda 	(codePtr),y
.9321	c8		iny				iny
.9322	0a		asl a				asl 	a
.9323	aa		tax				tax
.9324	7c 4a 94	jmp ($944a,x)			jmp 	(VectorSet2,x)
.9327					Unused1:
.9327					Unused2:
.9327					Unused3:
.9327					Unused4:
.9327	4c ae b0	jmp $b0ae			jmp 	SyntaxError
>932a							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.932a					VectorSetPunc:
>932a	b3 98					.word	ShiftLeft                        ; $00 <<
>932c	ad 97					.word	BinaryCompareLessEqual           ; $01 <=
>932e	a3 97					.word	BinaryCompareNotEqual            ; $02 <>
>9330	ae b0					.word	SyntaxError                      ; $03 !!3
>9332	ae b0					.word	SyntaxError                      ; $04 ><
>9334	b7 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>9336	b6 98					.word	ShiftRight                       ; $06 >>
>9338	ae b0					.word	SyntaxError                      ; $07 !!7
>933a	ae b0					.word	SyntaxError                      ; $08 !!8
>933c	ae b0					.word	SyntaxError                      ; $09 !!9
>933e	ae b0					.word	SyntaxError                      ; $0a !!10
>9340	ae b0					.word	SyntaxError                      ; $0b !!11
>9342	ae b0					.word	SyntaxError                      ; $0c !!12
>9344	ae b0					.word	SyntaxError                      ; $0d !!13
>9346	ae b0					.word	SyntaxError                      ; $0e !!14
>9348	ae b0					.word	SyntaxError                      ; $0f !!15
>934a	ae b0					.word	SyntaxError                      ; $10 @
>934c	ae b0					.word	SyntaxError                      ; $11 !!17
>934e	ae b0					.word	SyntaxError                      ; $12 !!18
>9350	ae b0					.word	SyntaxError                      ; $13 [
>9352	e1 aa					.word	IntegerDivide                    ; $14 \
>9354	ae b0					.word	SyntaxError                      ; $15 ]
>9356	3c 9a					.word	EorInteger                       ; $16 ^
>9358	ae b0					.word	SyntaxError                      ; $17 _
>935a	ae b0					.word	SyntaxError                      ; $18 `
>935c	ae b0					.word	SyntaxError                      ; $19 !!25
>935e	ae b0					.word	SyntaxError                      ; $1a !!26
>9360	ae b0					.word	SyntaxError                      ; $1b {
>9362	f6 99					.word	OraInteger                       ; $1c |
>9364	ae b0					.word	SyntaxError                      ; $1d }
>9366	ae b0					.word	SyntaxError                      ; $1e ~
>9368	ae b0					.word	SyntaxError                      ; $1f [7m<7F>[m
>936a	ae b0					.word	SyntaxError                      ; $20
>936c	82 9a					.word	WordIndirect                     ; $21 !
>936e	ae b0					.word	SyntaxError                      ; $22 "
>9370	ae b0					.word	SyntaxError                      ; $23 #
>9372	ae b0					.word	SyntaxError                      ; $24 $
>9374	2e ab					.word	IntegerModulus                   ; $25 %
>9376	b0 99					.word	AndInteger                       ; $26 &
>9378	ae b0					.word	SyntaxError                      ; $27 '
>937a	ae b0					.word	SyntaxError                      ; $28 (
>937c	ae b0					.word	SyntaxError                      ; $29 )
>937e	a3 ab					.word	MulInteger                       ; $2a *
>9380	4a 99					.word	AddInteger                       ; $2b +
>9382	ae b0					.word	SyntaxError                      ; $2c ,
>9384	85 99					.word	SubInteger                       ; $2d -
>9386	ae b0					.word	SyntaxError                      ; $2e .
>9388	3a ad					.word	FDivideCommand                   ; $2f /
>938a	ae b0					.word	SyntaxError                      ; $30 0
>938c	ae b0					.word	SyntaxError                      ; $31 1
>938e	ae b0					.word	SyntaxError                      ; $32 2
>9390	ae b0					.word	SyntaxError                      ; $33 3
>9392	ae b0					.word	SyntaxError                      ; $34 4
>9394	ae b0					.word	SyntaxError                      ; $35 5
>9396	ae b0					.word	SyntaxError                      ; $36 6
>9398	ae b0					.word	SyntaxError                      ; $37 7
>939a	ae b0					.word	SyntaxError                      ; $38 8
>939c	ae b0					.word	SyntaxError                      ; $39 9
>939e	ae b0					.word	SyntaxError                      ; $3a :
>93a0	ae b0					.word	SyntaxError                      ; $3b ;
>93a2	8f 97					.word	BinaryCompareLess                ; $3c <
>93a4	85 97					.word	BinaryCompareEqual               ; $3d =
>93a6	99 97					.word	BinaryCompareGreater             ; $3e >
>93a8	a9 9a					.word	ByteIndirect                     ; $3f ?
.93aa					VectorSet0:
>93aa	0a 93					.word	EOLCommand                       ; $80 !0:EOF
>93ac	17 93					.word	Shift1Command                    ; $81 !1:SH1
>93ae	1f 93					.word	Shift2Command                    ; $82 !2:SH2
>93b0	80 ae					.word	AbsUnary                         ; $83 ABS(
>93b2	73 9f					.word	AllocUnary                       ; $84 ALLOC(
>93b4	90 ae					.word	AscUnary                         ; $85 ASC(
>93b6	93 a0					.word	ChrUnary                         ; $86 CHR$(
>93b8	ae b0					.word	SyntaxError                      ; $87 EVENT(
>93ba	81 97					.word	UnaryFalse                       ; $88 FALSE
>93bc	9d ae					.word	FracUnary                        ; $89 FRAC(
>93be	b3 ae					.word	IntUnary                         ; $8a INT(
>93c0	09 af					.word	IsValUnary                       ; $8b ISVAL(
>93c2	6d a1					.word	Unary_Left                       ; $8c LEFT$(
>93c4	c5 ae					.word	LenUnary                         ; $8d LEN(
>93c6	97 a1					.word	Unary_Mid                        ; $8e MID$(
>93c8	e3 9f					.word	Unary_Not                        ; $8f NOT(
>93ca	ae b0					.word	SyntaxError                      ; $90 OFF
>93cc	ae b0					.word	SyntaxError                      ; $91 ON
>93ce	f9 9f					.word	Unary_Random                     ; $92 RANDOM(
>93d0	7d a1					.word	Unary_Right                      ; $93 RIGHT$(
>93d2	12 a0					.word	Unary_Rnd                        ; $94 RND(
>93d4	df ae					.word	SgnUnary                         ; $95 SGN(
>93d6	a5 a0					.word	SpcUnary                         ; $96 SPC(
>93d8	c0 a0					.word	Unary_Str                        ; $97 STR$(
>93da	ae b0					.word	SyntaxError                      ; $98 TIMER(
>93dc	75 97					.word	UnaryTrue                        ; $99 TRUE
>93de	ff ae					.word	ValUnary                         ; $9a VAL(
>93e0	c3 8d					.word	ForCommand                       ; $9b FOR
>93e2	81 8f					.word	IfCommand                        ; $9c IF
>93e4	27 93					.word	Unused1                          ; $9d PROC
>93e6	46 92					.word	Command_REPEAT                   ; $9e REPEAT
>93e8	da 96					.word	Command_WHILE                    ; $9f WHILE
>93ea	aa 8f					.word	EndIf                            ; $a0 ENDIF
>93ec	ba aa					.word	Command_ENDPROC                  ; $a1 ENDPROC
>93ee	7d 8e					.word	NextCommand                      ; $a2 NEXT
>93f0	27 93					.word	Unused4                          ; $a3 THEN
>93f2	4f 92					.word	Command_UNTIL                    ; $a4 UNTIL
>93f4	fb 96					.word	Command_WEND                     ; $a5 WEND
>93f6	ae b0					.word	SyntaxError                      ; $a6 BY
>93f8	69 8c					.word	CallCommand                      ; $a7 CALL
>93fa	ae b0					.word	SyntaxError                      ; $a8 CIRCLE
>93fc	a3 8c					.word	ClearCommand                     ; $a9 CLEAR
>93fe	ae b0					.word	SyntaxError                      ; $aa CLS
>9400	ae b0					.word	SyntaxError                      ; $ab COLOR
>9402	ae b0					.word	SyntaxError                      ; $ac COLOUR
>9404	fb 8c					.word	Command_Data                     ; $ad DATA
>9406	03 8d					.word	DimCommand                       ; $ae DIM
>9408	27 93					.word	Unused3                          ; $af DOWNTO
>940a	a3 8f					.word	ElseCode                         ; $b0 ELSE
>940c	15 8f					.word	GfxCommand                       ; $b1 GFX
>940e	47 8f					.word	Command_GOSUB                    ; $b2 GOSUB
>9410	65 8f					.word	GotoCommand                      ; $b3 GOTO
>9412	ae b0					.word	SyntaxError                      ; $b4 HERE
>9414	ae b0					.word	SyntaxError                      ; $b5 IMAGE
>9416	ab 8f					.word	LetCommand                       ; $b6 LET
>9418	ae b0					.word	SyntaxError                      ; $b7 LINE
>941a	9b 90					.word	Command_LOCAL                    ; $b8 LOCAL
>941c	ae b0					.word	SyntaxError                      ; $b9 OUTLINE
>941e	29 91					.word	Command_Print                    ; $ba PRINT
>9420	e0 91					.word	Command_Read                     ; $bb READ
>9422	ae b0					.word	SyntaxError                      ; $bc RECT
>9424	39 92					.word	RemCommand                       ; $bd REM
>9426	57 8f					.word	Command_RETURN                   ; $be RETURN
>9428	ae b0					.word	SyntaxError                      ; $bf SOLID
>942a	ae b0					.word	SyntaxError                      ; $c0 SPRITE
>942c	ae b0					.word	SyntaxError                      ; $c1 TEXT
>942e	27 93					.word	Unused2                          ; $c2 TO
.9430					VectorSet1:
>9430	ae b0					.word	SyntaxError                      ; $80 !0:EOF
>9432	ae b0					.word	SyntaxError                      ; $81 !1:SH1
>9434	ae b0					.word	SyntaxError                      ; $82 !2:SH2
>9436	3a 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>9438	59 8c					.word	AssertCommand                    ; $84 ASSERT
>943a	d6 8e					.word	BitmapCtrl                       ; $85 BITMAP
>943c	c0 8d					.word	EndCommand                       ; $86 END
>943e	00 90					.word	Command_List                     ; $87 LIST
>9440	1f 91					.word	NewCommand                       ; $88 NEW
>9442	68 92					.word	Command_Restore                  ; $89 RESTORE
>9444	9a 92					.word	CommandRUN                       ; $8a RUN
>9446	fa 8e					.word	SpritesCtrl                      ; $8b SPRITES
>9448	d2 94					.word	StopCommand                      ; $8c STOP
.944a					VectorSet2:
>944a	ae b0					.word	SyntaxError                      ; $80 !0:EOF
>944c	ae b0					.word	SyntaxError                      ; $81 !1:SH1
>944e	ae b0					.word	SyntaxError                      ; $82 !2:SH2
>9450	6d af					.word	Assemble_adc                     ; $83 ADC
>9452	65 af					.word	Assemble_and                     ; $84 AND
>9454	81 af					.word	Assemble_asl                     ; $85 ASL
>9456	eb af					.word	Assemble_bcc                     ; $86 BCC
>9458	ef af					.word	Assemble_bcs                     ; $87 BCS
>945a	f7 af					.word	Assemble_beq                     ; $88 BEQ
>945c	ae af					.word	Assemble_bit                     ; $89 BIT
>945e	df af					.word	Assemble_bmi                     ; $8a BMI
>9460	f3 af					.word	Assemble_bne                     ; $8b BNE
>9462	db af					.word	Assemble_bpl                     ; $8c BPL
>9464	fb af					.word	Assemble_bra                     ; $8d BRA
>9466	ff af					.word	Assemble_brk                     ; $8e BRK
>9468	e3 af					.word	Assemble_bvc                     ; $8f BVC
>946a	e7 af					.word	Assemble_bvs                     ; $90 BVS
>946c	07 b0					.word	Assemble_clc                     ; $91 CLC
>946e	5b b0					.word	Assemble_cld                     ; $92 CLD
>9470	1b b0					.word	Assemble_cli                     ; $93 CLI
>9472	4b b0					.word	Assemble_clv                     ; $94 CLV
>9474	79 af					.word	Assemble_cmp                     ; $95 CMP
>9476	c2 af					.word	Assemble_cpx                     ; $96 CPX
>9478	bd af					.word	Assemble_cpy                     ; $97 CPY
>947a	9f af					.word	Assemble_dec                     ; $98 DEC
>947c	57 b0					.word	Assemble_dex                     ; $99 DEX
>947e	33 b0					.word	Assemble_dey                     ; $9a DEY
>9480	69 af					.word	Assemble_eor                     ; $9b EOR
>9482	a4 af					.word	Assemble_inc                     ; $9c INC
>9484	67 b0					.word	Assemble_inx                     ; $9d INX
>9486	53 b0					.word	Assemble_iny                     ; $9e INY
>9488	d6 af					.word	Assemble_jmp                     ; $9f JMP
>948a	d1 af					.word	Assemble_jsr                     ; $a0 JSR
>948c	75 af					.word	Assemble_lda                     ; $a1 LDA
>948e	9a af					.word	Assemble_ldx                     ; $a2 LDX
>9490	b8 af					.word	Assemble_ldy                     ; $a3 LDY
>9492	8b af					.word	Assemble_lsr                     ; $a4 LSR
>9494	6b b0					.word	Assemble_nop                     ; $a5 NOP
>9496	61 af					.word	Assemble_ora                     ; $a6 ORA
>9498	17 b0					.word	Assemble_pha                     ; $a7 PHA
>949a	03 b0					.word	Assemble_php                     ; $a8 PHP
>949c	5f b0					.word	Assemble_phx                     ; $a9 PHX
>949e	1f b0					.word	Assemble_phy                     ; $aa PHY
>94a0	27 b0					.word	Assemble_pla                     ; $ab PLA
>94a2	0b b0					.word	Assemble_plp                     ; $ac PLP
>94a4	73 b0					.word	Assemble_plx                     ; $ad PLX
>94a6	2f b0					.word	Assemble_ply                     ; $ae PLY
>94a8	86 af					.word	Assemble_rol                     ; $af ROL
>94aa	90 af					.word	Assemble_ror                     ; $b0 ROR
>94ac	13 b0					.word	Assemble_rti                     ; $b1 RTI
>94ae	23 b0					.word	Assemble_rts                     ; $b2 RTS
>94b0	7d af					.word	Assemble_sbc                     ; $b3 SBC
>94b2	0f b0					.word	Assemble_sec                     ; $b4 SEC
>94b4	6f b0					.word	Assemble_sed                     ; $b5 SED
>94b6	2b b0					.word	Assemble_sei                     ; $b6 SEI
>94b8	71 af					.word	Assemble_sta                     ; $b7 STA
>94ba	63 b0					.word	Assemble_stp                     ; $b8 STP
>94bc	95 af					.word	Assemble_stx                     ; $b9 STX
>94be	b3 af					.word	Assemble_sty                     ; $ba STY
>94c0	a9 af					.word	Assemble_stz                     ; $bb STZ
>94c2	47 b0					.word	Assemble_tax                     ; $bc TAX
>94c4	43 b0					.word	Assemble_tay                     ; $bd TAY
>94c6	cc af					.word	Assemble_trb                     ; $be TRB
>94c8	c7 af					.word	Assemble_tsb                     ; $bf TSB
>94ca	4f b0					.word	Assemble_tsx                     ; $c0 TSX
>94cc	37 b0					.word	Assemble_txa                     ; $c1 TXA
>94ce	3f b0					.word	Assemble_txs                     ; $c2 TXS
>94d0	3b b0					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.94d2					StopCommand:
.94d2	a9 08		lda #$08		lda	#8
.94d4	4c 09 97	jmp $9709		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.94d7					ListConvertLine:
.94d7	9c 9d 04	stz $049d			stz 	tbOffset
.94da	9c a9 04	stz $04a9			stz 	tokenBuffer
.94dd	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.94df	b1 30		lda ($30),y			lda 	(codePtr),y
.94e1	aa		tax				tax
.94e2	88		dey				dey
.94e3	b1 30		lda ($30),y			lda 	(codePtr),y
.94e5	20 24 ac	jsr $ac24			jsr 	ConvertInt16
.94e8	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.94ea	86 37		stx $37				stx 	zTemp0+1
.94ec	a0 00		ldy #$00			ldy 	#0
.94ee					_LCCopyNumber:
.94ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f0	20 f0 95	jsr $95f0			jsr 	LCLWrite
.94f3	c8		iny				iny
.94f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f6	d0 f6		bne $94ee			bne 	_LCCopyNumber
.94f8					_LCPadOut:
.94f8	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.94fa	20 f0 95	jsr $95f0			jsr 	LCLWrite
.94fd	ad 9d 04	lda $049d			lda 	tbOffset
.9500	c9 06		cmp #$06			cmp 	#6
.9502	d0 f4		bne $94f8			bne 	_LCPadOut
.9504	a0 03		ldy #$03			ldy 	#3 							; start position.
.9506					_LCMainLoop:
.9506	b1 30		lda ($30),y			lda 	(codePtr),y
.9508	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.950a	f0 17		beq $9523			beq 	_LCExit
.950c	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.950e	90 14		bcc $9524			bcc 	_LCDoubles
.9510	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9512	90 20		bcc $9534			bcc 	_LCShiftPunc
.9514	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9516	90 2b		bcc $9543			bcc 	_LCPunctuation
.9518	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.951a	90 2d		bcc $9549			bcc 	_LCIdentifiers
.951c	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.951e	90 49		bcc $9569			bcc 	_LCTokens
.9520	4c c4 95	jmp $95c4			jmp 	_LCData 					; 254-5 are data objects
.9523					_LCExit:
.9523	60		rts				rts
.9524					_LCDoubles:
.9524	48		pha				pha
.9525	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9526	29 02		and #$02			and 	#2
.9528	09 3c		ora #$3c			ora 	#60 						; make < >
.952a	20 f0 95	jsr $95f0			jsr 	LCLWrite
.952d	68		pla				pla 								; restore, do lower bit
.952e	29 03		and #$03			and 	#3
.9530	09 3c		ora #$3c			ora 	#60
.9532	80 0f		bra $9543			bra		_LCPunctuation 				; print, increment, loop
.9534					_LCShiftPunc:
.9534	aa		tax				tax 								; save in X
.9535	29 07		and #$07			and 	#7 							; lower 3 bits
.9537	f0 02		beq $953b			beq 	_LCNoAdd
.9539	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.953b					_LCNoAdd:
.953b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.953d	90 02		bcc $9541			bcc 	_LCNoAdd2
.953f	09 20		ora #$20			ora 	#32 						; adds $20
.9541					_LCNoAdd2:
.9541	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9543					_LCPunctuation:
.9543	c8		iny				iny 								; consume character
.9544	20 f0 95	jsr $95f0			jsr 	LCLWrite 					; write it out.
.9547	80 bd		bra $9506			bra 	_LCMainLoop 				; go round again.
.9549					_LCIdentifiers:
.9549	18		clc				clc 								; convert to physical address
.954a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.954c	85 37		sta $37				sta 	zTemp0+1
.954e	c8		iny				iny
.954f	b1 30		lda ($30),y			lda 	(codePtr),y
.9551	85 36		sta $36				sta 	zTemp0
.9553	c8		iny				iny
.9554	5a		phy				phy 								; save position
.9555	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9557					_LCOutIdentifier:
.9557	c8		iny				iny
.9558	b1 36		lda ($36),y			lda 	(zTemp0),y
.955a	29 7f		and #$7f			and 	#$7F
.955c	20 1e 96	jsr $961e			jsr 	LCLLowerCase
.955f	20 f0 95	jsr $95f0			jsr 	LCLWrite
.9562	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9564	10 f1		bpl $9557			bpl 	_LCOutIdentifier
.9566	7a		ply				ply 								; restore position
.9567	80 9d		bra $9506			bra 	_LCMainLoop
.9569					_LCTokens:
.9569	aa		tax				tax 								; token in X
.956a	a9 74		lda #$74			lda 	#((KeywordSet2) & $FF)
.956c	85 36		sta $36				sta 	0+zTemp0
.956e	a9 a6		lda #$a6			lda 	#((KeywordSet2) >> 8)
.9570	85 37		sta $37				sta 	1+zTemp0
.9572	e0 82		cpx #$82			cpx 	#$82
.9574	f0 16		beq $958c			beq 	_LCUseShift
.9576	a9 26		lda #$26			lda 	#((KeywordSet1) & $FF)
.9578	85 36		sta $36				sta 	0+zTemp0
.957a	a9 a6		lda #$a6			lda 	#((KeywordSet1) >> 8)
.957c	85 37		sta $37				sta 	1+zTemp0
.957e	e0 81		cpx #$81			cpx 	#$81
.9580	f0 0a		beq $958c			beq 	_LCUseShift
.9582	a9 7d		lda #$7d			lda 	#((KeywordSet0) & $FF)
.9584	85 36		sta $36				sta 	0+zTemp0
.9586	a9 a4		lda #$a4			lda 	#((KeywordSet0) >> 8)
.9588	85 37		sta $37				sta 	1+zTemp0
.958a	80 01		bra $958d			bra 	_LCNoShift
.958c					_LCUseShift:
.958c	c8		iny				iny
.958d					_LCNoShift:
.958d	20 ff 95	jsr $95ff			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9590	b1 30		lda ($30),y			lda 	(codePtr),y
.9592	aa		tax				tax 								; into X
.9593					_LCFindText:
.9593	ca		dex				dex
.9594	10 0e		bpl $95a4			bpl 	_LCFoundText 				; found text.
.9596	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9598	1a		inc a				inc 	a 							; one extra for size
.9599	38		sec				sec 								; one extra for checksum
.959a	65 36		adc $36				adc 	zTemp0 						; go to next token
.959c	85 36		sta $36				sta 	zTemp0
.959e	90 f3		bcc $9593			bcc 	_LCFindText
.95a0	e6 37		inc $37				inc 	zTemp0+1
.95a2	80 ef		bra $9593			bra 	_LCFindText
.95a4					_LCFoundText:
.95a4	5a		phy				phy 								; save List position
.95a5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.95a7	aa		tax				tax
.95a8	a0 02		ldy #$02			ldy 	#2
.95aa					_LCCopyToken:
.95aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.95ac	20 1e 96	jsr $961e			jsr 	LCLLowerCase
.95af	20 f0 95	jsr $95f0			jsr 	LCLWrite
.95b2	c8		iny				iny
.95b3	ca		dex				dex
.95b4	d0 f4		bne $95aa			bne 	_LCCopyToken
.95b6	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.95b8	f0 05		beq $95bf			beq 	_LCNoSpace
.95ba	a9 20		lda #$20			lda 	#' '
.95bc	20 f0 95	jsr $95f0			jsr 	LCLWrite
.95bf					_LCNoSpace:
.95bf	7a		ply				ply 								; restore position.
.95c0	c8		iny				iny 								; consume token
.95c1	4c 06 95	jmp $9506			jmp 	_LCMainLoop 				; and go around again.
.95c4					_LCData:
.95c4	48		pha				pha 								; save type $FE/$FF
.95c5	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.95c7	c9 fe		cmp #$fe			cmp 	#$FE
.95c9	f0 02		beq $95cd			beq 	_LCHaveOpener
.95cb	a2 22		ldx #$22			ldx 	#'"'
.95cd					_LCHaveOpener:
.95cd	8a		txa				txa 								; output prefix (# or ")
.95ce	20 f0 95	jsr $95f0			jsr 	LCLWrite
.95d1	c8		iny				iny 								; get count
.95d2	b1 30		lda ($30),y			lda 	(codePtr),y
.95d4	aa		tax				tax
.95d5	c8		iny				iny 								; point at first character
.95d6					_LCOutData:
.95d6	b1 30		lda ($30),y			lda 	(codePtr),y
.95d8	c9 00		cmp #$00			cmp 	#0
.95da	f0 03		beq $95df			beq 	_LCNoPrint
.95dc	20 f0 95	jsr $95f0			jsr 	LCLWrite
.95df					_LCNoPrint:
.95df	c8		iny				iny
.95e0	ca		dex				dex
.95e1	d0 f3		bne $95d6			bne 	_LCOutData
.95e3	68		pla				pla 								; closing " required ?
.95e4	c9 ff		cmp #$ff			cmp 	#$FF
.95e6	d0 05		bne $95ed			bne 	_LCNoQuote
.95e8	a9 22		lda #$22			lda 	#'"'
.95ea	20 f0 95	jsr $95f0			jsr 	LCLWrite
.95ed					_LCNoQuote:
.95ed	4c 06 95	jmp $9506			jmp 	_LCMainLoop
.95f0					LCLWrite:
.95f0	da		phx				phx
.95f1	ae 9d 04	ldx $049d			ldx 	tbOffset
.95f4	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.95f7	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.95fa	ee 9d 04	inc $049d			inc 	tbOffset
.95fd	fa		plx				plx
.95fe	60		rts				rts
.95ff					LCCheckSpaceRequired:
.95ff	ae 9d 04	ldx $049d			ldx 	tbOffset
.9602	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9605	20 1e 96	jsr $961e			jsr 	LCLLowerCase 				; saves a little effort
.9608	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.960a	90 11		bcc $961d			bcc 	_LCCSRExit
.960c	c9 3a		cmp #$3a			cmp 	#"9"+1
.960e	90 08		bcc $9618			bcc 	_LCCSRSpace
.9610	c9 61		cmp #$61			cmp 	#"a"
.9612	90 09		bcc $961d			bcc 	_LCCSRExit
.9614	c9 7b		cmp #$7b			cmp 	#"z"+1
.9616	b0 05		bcs $961d			bcs 	_LCCSRExit
.9618					_LCCSRSpace:
.9618	a9 20		lda #$20			lda 	#' '
.961a	20 f0 95	jsr $95f0			jsr 	LCLWrite
.961d					_LCCSRExit:
.961d	60		rts				rts
.961e					LCLLowerCase:
.961e	c9 41		cmp #$41			cmp 	#"A"
.9620	90 06		bcc $9628			bcc 	_LCLLCOut
.9622	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9624	b0 02		bcs $9628			bcs 	_LCLLCOut
.9626	69 20		adc #$20			adc 	#$20
.9628					_LCLLCOut:
.9628	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9629					ProcedureScan:
.9629	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.962b	85 30		sta $30				sta 	codePtr
.962d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.962f	85 31		sta $31				sta 	codePtr+1
.9631					_PSLoop:
.9631	b2 30		lda ($30)			lda 	(codePtr)
.9633	f0 42		beq $9677			beq 	_PSExit
.9635	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9637	b1 30		lda ($30),y			lda 	(codePtr),y
.9639	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.963b	d0 2d		bne $966a			bne 	_PSNext
.963d	c8		iny				iny 								; get the address of the record to zTemp0 and
.963e	b1 30		lda ($30),y			lda 	(codePtr),y
.9640	29 c0		and #$c0			and 	#$C0
.9642	c9 40		cmp #$40			cmp 	#$40
.9644	d0 32		bne $9678			bne 	_PSSyntax
.9646	b1 30		lda ($30),y			lda 	(codePtr),y
.9648	18		clc				clc
.9649	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.964b	85 37		sta $37				sta 	zTemp0+1
.964d	c8		iny				iny 								; LSB
.964e	b1 30		lda ($30),y			lda 	(codePtr),y
.9650	85 36		sta $36				sta 	zTemp0
.9652	c8		iny				iny 								; character after variable call.
.9653	98		tya				tya 								; save Y offset at +7
.9654	a0 07		ldy #$07			ldy 	#7
.9656	91 36		sta ($36),y			sta 	(zTemp0),y
.9658	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.965a	a0 02		ldy #$02			ldy 	#2
.965c	91 36		sta ($36),y			sta 	(zTemp0),y
.965e	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9660					_PSCopy:
.9660	b5 30		lda $30,x			lda 	safePtr,x
.9662	c8		iny				iny
.9663	91 36		sta ($36),y			sta 	(zTemp0),y
.9665	e8		inx				inx
.9666	e0 04		cpx #$04			cpx 	#4
.9668	d0 f6		bne $9660			bne 	_PSCopy
.966a					_PSNext:
.966a	18		clc				clc
.966b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.966d	65 30		adc $30				adc 	codePtr
.966f	85 30		sta $30				sta 	codePtr
.9671	90 02		bcc $9675			bcc 	_CREExit
.9673	e6 31		inc $31				inc 	codePtr+1
.9675					_CREExit:
.9675	80 ba		bra $9631			bra 	_PSLoop
.9677					_PSExit:
.9677	60		rts				rts
.9678					_PSSyntax:
.9678	4c ae b0	jmp $b0ae			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.967b					ScanForward:
.967b	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.967d	86 37		stx $37				stx 	zTemp0+1
.967f	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9681					_ScanLoop:
.9681	b1 30		lda ($30),y			lda 	(codePtr),y
.9683	c8		iny				iny
.9684	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9686	d0 0e		bne $9696			bne 	_ScanGoNext
.9688	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.968a	f0 04		beq $9690			beq 	_ScanMatch
.968c	c5 37		cmp $37				cmp 	zTemp0+1
.968e	d0 06		bne $9696			bne 	_ScanGoNext
.9690					_ScanMatch:
.9690	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9692	d0 01		bne $9695			bne 	_ScanNotEndEOL
.9694	88		dey				dey
.9695					_ScanNotEndEOL:
.9695	60		rts				rts
.9696					_ScanGoNext:
.9696	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9698	90 e7		bcc $9681			bcc 	_ScanLoop
.969a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.969c	90 18		bcc $96b6			bcc 	_ScanSkipOne
.969e	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.96a0	b0 2f		bcs $96d1			bcs 	_ScanSkipData
.96a2	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.96a4	90 db		bcc $9681			bcc 	_ScanLoop 					; if not, ordinary keywords.
.96a6	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.96a8	b0 d7		bcs $9681			bcs 	_ScanLoop
.96aa	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.96ac	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.96ae	b0 d1		bcs $9681			bcs 	_ScanLoop
.96b0	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.96b2	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.96b4	80 cb		bra $9681			bra 	_ScanLoop
.96b6					_ScanSkipOne:
.96b6	c8		iny				iny 								; consume the extra one.
.96b7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.96b9	d0 c6		bne $9681			bne 	_ScanLoop
.96bb	18		clc				clc
.96bc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.96be	65 30		adc $30				adc 	codePtr
.96c0	85 30		sta $30				sta 	codePtr
.96c2	90 02		bcc $96c6			bcc 	_CREExit
.96c4	e6 31		inc $31				inc 	codePtr+1
.96c6					_CREExit:
.96c6	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.96c8	b2 30		lda ($30)			lda 	(codePtr)
.96ca	d0 b5		bne $9681			bne 	_ScanLoop 					; if not zero, more to scan
.96cc	a9 13		lda #$13		lda	#19
.96ce	4c 09 97	jmp $9709		jmp	ErrorHandler
.96d1					_ScanSkipData:
.96d1	88		dey				dey 								; point at data token
.96d2	c8		iny				iny
.96d3	98		tya				tya
.96d4	38		sec				sec
.96d5	71 30		adc ($30),y			adc 	(codePtr),y
.96d7	a8		tay				tay
.96d8	80 a7		bra $9681			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.96da					Command_WHILE:
.96da	5a		phy				phy 								; save position of the test
.96db	a2 00		ldx #$00			ldx 	#0
.96dd	20 15 a2	jsr $a215			jsr 	EvaluateNumber 				; work out the number
.96e0	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; check if zero
.96e3	f0 0e		beq $96f3			beq 	_WHExitLoop 				; if so exit the loop
.96e5	98		tya				tya 								; position *after* test.
.96e6	7a		ply				ply 								; restore position before test, at WHILE
.96e7	88		dey				dey
.96e8	48		pha				pha 								; push after test on the stack
.96e9	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.96eb	20 75 a3	jsr $a375			jsr 	StackOpen
.96ee	20 b9 a3	jsr $a3b9			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.96f1	7a		ply				ply 								; restore the position *after* the test
.96f2	60		rts				rts
.96f3					_WHExitLoop:
.96f3	68		pla				pla 								; throw post loop position
.96f4	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.96f6	aa		tax				tax
.96f7	20 7b 96	jsr $967b			jsr 	ScanForward
.96fa	60		rts				rts
.96fb					Command_WEND:
.96fb	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.96fd	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.96ff	20 a1 a3	jsr $a3a1			jsr 	StackCheckFrame
.9702	20 ca a3	jsr $a3ca			jsr 	STKLoadCodePosition 		; loop back
.9705	20 93 a3	jsr $a393			jsr 	StackClose		 			; erase the frame
.9708	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.aac8					CheckRightBracket:
.aac8	b1 30		lda ($30),y			lda 	(codePtr),y
.aaca	c8		iny				iny
.aacb	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.aacd	d0 0f		bne $aade			bne 	CNAFail
.aacf	60		rts				rts
.aad0					CheckComma:
.aad0	b1 30		lda ($30),y			lda 	(codePtr),y
.aad2	c8		iny				iny
.aad3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.aad5	d0 07		bne $aade			bne 	CNAFail
.aad7	60		rts				rts
.aad8					CheckNextA:
.aad8	d1 30		cmp ($30),y			cmp 	(codePtr),y
.aada	d0 02		bne $aade			bne 	CNAFail
.aadc	c8		iny				iny 								; skip character
.aadd	60		rts				rts 								; and exit
.aade					CNAFail:
.aade	4c ae b0	jmp $b0ae			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9709					ErrorHandler:
.9709	a8		tay				tay 								; find the error text
.970a	f0 49		beq $9755			beq 	_EHEnd
.970c	a2 00		ldx #$00			ldx 	#0
.970e	a9 c7		lda #$c7			lda 	#((ErrorText) & $FF)
.9710	85 36		sta $36				sta 	0+zTemp0
.9712	a9 b0		lda #$b0			lda 	#((ErrorText) >> 8)
.9714	85 37		sta $37				sta 	1+zTemp0
.9716					_EHFind:
.9716	88		dey				dey 								; found the error text ?
.9717	f0 0e		beq $9727			beq 	_EHFound
.9719					_EHFindZero:
.9719	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.971b	e6 36		inc $36				inc 	zTemp0
.971d	d0 02		bne $9721			bne 	_EHFNoCarry
.971f	e6 37		inc $37				inc 	zTemp0+1
.9721					_EHFNoCarry:
.9721	c9 00		cmp #$00			cmp 	#0
.9723	d0 f4		bne $9719			bne 	_EHFindZero
.9725	80 ef		bra $9716			bra 	_EHFind
.9727					_EHFound:
.9727	a5 36		lda $36				lda 	zTemp0 						; print message
.9729	a6 37		ldx $37				ldx 	zTemp0+1
.972b	20 62 97	jsr $9762			jsr 	PrintStringXA
.972e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9730	b1 30		lda ($30),y			lda 	(codePtr),y
.9732	d0 05		bne $9739			bne 	_EHAtMsg
.9734	c8		iny				iny
.9735	b1 30		lda ($30),y			lda 	(codePtr),y
.9737	f0 17		beq $9750			beq 	_EHCREnd
.9739					_EHAtMsg:
.9739	a2 97		ldx #$97			ldx 	#_AtMsg >> 8 				; print " at "
.973b	a9 58		lda #$58			lda 	#_AtMsg & $FF
.973d	20 62 97	jsr $9762			jsr 	PrintStringXA
.9740	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9742	b1 30		lda ($30),y			lda 	(codePtr),y
.9744	48		pha				pha
.9745	c8		iny				iny
.9746	b1 30		lda ($30),y			lda 	(codePtr),y
.9748	aa		tax				tax
.9749	68		pla				pla
.974a	20 24 ac	jsr $ac24			jsr 	ConvertInt16 				; convert XA to string
.974d	20 62 97	jsr $9762			jsr 	PrintStringXA 				; and print it.
.9750					_EHCREnd:
.9750	a9 0d		lda #$0d			lda 	#13 						; new line
.9752	20 61 b2	jsr $b261			jsr 	EXTPrintCharacter
.9755					_EHEnd:
.9755	4c 0a 8c	jmp $8c0a			jmp 	WarmStart
>9758	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9760	20 00
.9762					PrintStringXA:
.9762	5a		phy				phy
.9763	86 37		stx $37				stx 	zTemp0+1
.9765	85 36		sta $36				sta 	zTemp0
.9767	a0 00		ldy #$00			ldy 	#0
.9769					_PSXALoop:
.9769	b1 36		lda ($36),y			lda 	(zTemp0),y
.976b	f0 06		beq $9773			beq 	_PSXAExit
.976d	20 61 b2	jsr $b261			jsr 	EXTPrintCharacter
.9770	c8		iny				iny
.9771	80 f6		bra $9769			bra 	_PSXALoop
.9773					_PSXAExit:
.9773	7a		ply				ply
.9774	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9775					UnaryTrue:
.9775	fa		plx				plx
.9776					ReturnTrue:
.9776	a9 01		lda #$01			lda 	#1  						; set to 1
.9778	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.977b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.977d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9780	60		rts				rts
.9781					UnaryFalse:
.9781	fa		plx				plx
.9782					ReturnFalse:
.9782	4c c1 a2	jmp $a2c1			jmp 	NSMSetZero 					; set it all to zero
.9785					BinaryCompareEqual:
.9785	fa		plx				plx
.9786	20 c1 97	jsr $97c1			jsr 	CompareBaseCode
.9789	c9 00		cmp #$00			cmp 	#0
.978b	f0 e9		beq $9776			beq 	ReturnTrue
.978d	80 f3		bra $9782			bra 	ReturnFalse
.978f					BinaryCompareLess:
.978f	fa		plx				plx
.9790	20 c1 97	jsr $97c1			jsr 	CompareBaseCode
.9793	c9 ff		cmp #$ff			cmp 	#$FF
.9795	f0 df		beq $9776			beq 	ReturnTrue
.9797	80 e9		bra $9782			bra 	ReturnFalse
.9799					BinaryCompareGreater:
.9799	fa		plx				plx
.979a	20 c1 97	jsr $97c1			jsr 	CompareBaseCode
.979d	c9 01		cmp #$01			cmp 	#1
.979f	f0 d5		beq $9776			beq 	ReturnTrue
.97a1	80 df		bra $9782			bra 	ReturnFalse
.97a3					BinaryCompareNotEqual:
.97a3	fa		plx				plx
.97a4	20 c1 97	jsr $97c1			jsr 	CompareBaseCode
.97a7	c9 00		cmp #$00			cmp 	#0
.97a9	d0 cb		bne $9776			bne 	ReturnTrue
.97ab	80 d5		bra $9782			bra 	ReturnFalse
.97ad					BinaryCompareLessEqual:
.97ad	fa		plx				plx
.97ae	20 c1 97	jsr $97c1			jsr 	CompareBaseCode
.97b1	c9 01		cmp #$01			cmp 	#1
.97b3	d0 c1		bne $9776			bne 	ReturnTrue
.97b5	80 cb		bra $9782			bra 	ReturnFalse
.97b7					BinaryCompareGreaterEqual:
.97b7	fa		plx				plx
.97b8	20 c1 97	jsr $97c1			jsr 	CompareBaseCode
.97bb	c9 ff		cmp #$ff			cmp 	#$FF
.97bd	d0 b7		bne $9776			bne 	ReturnTrue
.97bf	80 c1		bra $9782			bra 	ReturnFalse
.97c1					CompareBaseCode:
.97c1	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; make both values if references.
.97c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.97c7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97ca	29 10		and #$10			and 	#NSTString
.97cc	d0 40		bne $980e			bne 	_CBCString
.97ce	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.97d1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97d4	d0 3b		bne $9811			bne 	_CBCFloat
.97d6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.97d9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97dc	29 08		and #$08			and 	#NSTFloat
.97de	d0 31		bne $9811			bne 	_CBCFloat
.97e0	20 14 98	jsr $9814			jsr 	CompareFixMinusZero
.97e3	e8		inx				inx
.97e4	20 14 98	jsr $9814			jsr 	CompareFixMinusZero
.97e7	ca		dex				dex
.97e8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.97eb	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.97ee	10 0b		bpl $97fb			bpl 	_CDCSameSign
.97f0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.97f3	30 16		bmi $980b			bmi 	_CBCLess 					; return $FF
.97f5					_CBCGreater:
.97f5	a9 01		lda #$01			lda 	#1
.97f7	60		rts				rts
.97f8					_CBCEqual:
.97f8	a9 00		lda #$00			lda 	#0
.97fa	60		rts				rts
.97fb					_CDCSameSign:
.97fb	20 24 99	jsr $9924			jsr 	SubTopTwoStack 				; unsigned subtract
.97fe	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; or the mantissa together
.9801	f0 f5		beq $97f8			beq 	_CBCEqual 					; -0 == 0
.9803	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9806	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9809	10 ea		bpl $97f5			bpl 	_CBCGreater
.980b					_CBCLess:
.980b	a9 ff		lda #$ff			lda 	#$FF
.980d	60		rts				rts
.980e					_CBCString:
.980e	4c 7a 98	jmp $987a			jmp 	CompareStrings
.9811					_CBCFloat:
.9811	4c 20 ad	jmp $ad20			jmp 	CompareFloat
.9814					CompareFixMinusZero:
.9814	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero
.9817	d0 03		bne $981c			bne 	_CFXMZNotZero
.9819	9e 00 04	stz $0400,x			stz 	NSStatus,x
.981c					_CFXMZNotZero:
.981c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.981d					StringConcat:
.981d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9820	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9823	29 18		and #$18			and 	#NSBTypeMask
.9825	c9 10		cmp #$10			cmp 	#NSTString
.9827	d0 4e		bne $9877			bne		_SCType
.9829	64 38		stz $38				stz 	zTemp1 						; counting total length
.982b	e8		inx				inx
.982c	20 4a 98	jsr $984a			jsr 	_SCSetupZ0 					; setup for second
.982f	20 55 98	jsr $9855			jsr 	_SCLengthZ0 				; length for second
.9832	ca		dex				dex
.9833	20 4a 98	jsr $984a			jsr 	_SCSetupZ0 					; setup for first
.9836	20 55 98	jsr $9855			jsr 	_SCLengthZ0 				; length for first
.9839	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.983b	20 e3 b3	jsr $b3e3			jsr 	StringTempAllocate
.983e	20 68 98	jsr $9868			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9841	e8		inx				inx
.9842	20 4a 98	jsr $984a			jsr 	_SCSetupZ0 					; copy second out
.9845	20 68 98	jsr $9868			jsr 	_SCCopy
.9848	ca		dex				dex
.9849	60		rts				rts
.984a					_SCSetupZ0:
.984a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.984d	85 36		sta $36				sta 	zTemp0
.984f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9852	85 37		sta $37				sta 	zTemp0+1
.9854	60		rts				rts
.9855					_SCLengthZ0:
.9855	5a		phy				phy
.9856	a0 00		ldy #$00			ldy 	#0
.9858					_SCLenLoop:
.9858	b1 36		lda ($36),y			lda 	(zTemp0),y
.985a	f0 0a		beq $9866			beq 	_SCLExit
.985c	c8		iny				iny
.985d	e6 38		inc $38				inc 	zTemp1
.985f	10 f7		bpl $9858			bpl		_SCLenLoop
.9861	a9 09		lda #$09		lda	#9
.9863	4c 09 97	jmp $9709		jmp	ErrorHandler
.9866					_SCLExit:
.9866	7a		ply				ply
.9867	60		rts				rts
.9868					_SCCopy:
.9868	5a		phy				phy
.9869	a0 00		ldy #$00			ldy 	#0
.986b					_SCCopyLoop:
.986b	b1 36		lda ($36),y			lda 	(zTemp0),y
.986d	f0 06		beq $9875			beq 	_SCCExit
.986f	20 21 b4	jsr $b421			jsr 	StringTempWrite
.9872	c8		iny				iny
.9873	80 f6		bra $986b			bra 	_SCCopyLoop
.9875					_SCCExit:
.9875	7a		ply				ply
.9876	60		rts				rts
.9877					_SCType:
.9877	4c b8 b0	jmp $b0b8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.aae1					IntegerDivide:
.aae1	fa		plx				plx
.aae2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aae5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aae8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aae9	0a		asl a				asl 	a
.aaea	10 05		bpl $aaf1			bpl 	_NotRef
.aaec	48		pha				pha
.aaed	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aaf0	68		pla				pla
.aaf1					_NotRef:
.aaf1	0a		asl a				asl 	a
.aaf2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aaf4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aaf7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aafa	f0 03		beq $aaff			beq 	_IntegerCode 				; if clear, then we have two integers
.aafc	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.aaff					_IntegerCode:
.aaff	20 21 ab	jsr $ab21			jsr 	CheckDivideZero 			; do div zero check
.ab02	20 59 ab	jsr $ab59			jsr 	Int32Divide 				; do the division
.ab05	20 16 ac	jsr $ac16			jsr 	CalculateSign 				; calculate result sign
.ab08					NSMCopyPlusTwoToZero:
.ab08	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ab0b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ab0e	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ab11	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab14	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ab17	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab1a	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ab1d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab20	60		rts				rts
.ab21					CheckDivideZero:
.ab21	e8		inx				inx
.ab22	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero
.ab25	f0 02		beq $ab29			beq 	_CDVError
.ab27	ca		dex				dex
.ab28	60		rts				rts
.ab29					_CDVError:
.ab29	a9 03		lda #$03		lda	#3
.ab2b	4c 09 97	jmp $9709		jmp	ErrorHandler
.ab2e					IntegerModulus:
.ab2e	fa		plx				plx
.ab2f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ab32	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ab35	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ab36	0a		asl a				asl 	a
.ab37	10 05		bpl $ab3e			bpl 	_NotRef
.ab39	48		pha				pha
.ab3a	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ab3d	68		pla				pla
.ab3e					_NotRef:
.ab3e	0a		asl a				asl 	a
.ab3f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ab41	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ab44	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ab47	f0 03		beq $ab4c			beq 	_IntegerCode 				; if clear, then we have two integers
.ab49	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.ab4c					_IntegerCode:
.ab4c					IntegerModulusNoCheck:
.ab4c	20 21 ab	jsr $ab21			jsr 	CheckDivideZero 			; do div zero check
.ab4f	20 59 ab	jsr $ab59			jsr 	Int32Divide 				; do the division
.ab52	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ab55	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ab58	60		rts				rts
.ab59					Int32Divide:
.ab59	48		pha				pha 								; save AXY
.ab5a	5a		phy				phy
.ab5b	20 98 a2	jsr $a298			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ab5e	20 bd a2	jsr $a2bd			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ab61	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ab63					_I32DivideLoop:
.ab63	e8		inx				inx
.ab64	e8		inx				inx
.ab65	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ab68	ca		dex				dex
.ab69	ca		dex				dex
.ab6a	20 d7 a2	jsr $a2d7			jsr 	NSMRotateLeft
.ab6d	20 99 ab	jsr $ab99			jsr 	DivideCheckSubtract 		; check if subtract possible
.ab70	90 03		bcc $ab75			bcc 	_I32DivideNoCarryIn
.ab72	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ab75					_I32DivideNoCarryIn:
.ab75	88		dey				dey 								; loop round till division completed.
.ab76	d0 eb		bne $ab63			bne 	_I32DivideLoop
.ab78	7a		ply				ply 								; restore AXY and exit
.ab79	68		pla				pla
.ab7a	60		rts				rts
.ab7b					Int32ShiftDivide:
.ab7b	48		pha				pha 								; save AY
.ab7c	5a		phy				phy
.ab7d	e8		inx				inx 								; clear S[X+2]
.ab7e	e8		inx				inx
.ab7f	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero
.ab82	ca		dex				dex
.ab83	ca		dex				dex
.ab84	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ab86					_I32SDLoop:
.ab86	20 99 ab	jsr $ab99			jsr 	DivideCheckSubtract 		; check if subtract possible
.ab89	e8		inx				inx
.ab8a	e8		inx				inx
.ab8b	20 d7 a2	jsr $a2d7			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.ab8e	ca		dex				dex
.ab8f	ca		dex				dex
.ab90	20 d7 a2	jsr $a2d7			jsr 	NSMRotateLeft
.ab93	88		dey				dey 	 							; do 31 times
.ab94	d0 f0		bne $ab86			bne 	_I32SDLoop
.ab96	7a		ply				ply 								; restore AY and exit
.ab97	68		pla				pla
.ab98	60		rts				rts
.ab99					DivideCheckSubtract:
.ab99	20 24 99	jsr $9924			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.ab9c	b0 04		bcs $aba2			bcs 	_DCSExit 					; if carry set, then could do, exit
.ab9e	20 fe 98	jsr $98fe			jsr 	AddTopTwoStack 				; add it back in
.aba1	18		clc				clc 								; and return False
.aba2					_DCSExit:
.aba2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.aba3					MulInteger:
.aba3	fa		plx				plx
.aba4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aba7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.abaa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.abab	0a		asl a				asl 	a
.abac	10 05		bpl $abb3			bpl 	_NotRef
.abae	48		pha				pha
.abaf	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.abb2	68		pla				pla
.abb3					_NotRef:
.abb3	0a		asl a				asl 	a 							; put MSB of type into A:7
.abb4	30 0b		bmi $abc1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.abb6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.abb9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.abbc	f0 06		beq $abc4			beq 	_IntegerCode 				; if clear, then we have two integers
.abbe	4c f7 ad	jmp $adf7			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.abc1					_StringData:
.abc1	4c c2 b0	jmp $b0c2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.abc4					_IntegerCode:
.abc4	20 d1 ab	jsr $abd1			jsr 	MultiplyShort
.abc7	c9 00		cmp #$00			cmp 	#0
.abc9	f0 05		beq $abd0			beq 	_MIExit
.abcb	a9 04		lda #$04		lda	#4
.abcd	4c 09 97	jmp $9709		jmp	ErrorHandler
.abd0					_MIExit:
.abd0	60		rts				rts
.abd1					MultiplyShort:
.abd1	5a		phy				phy 								; save Y
.abd2	20 98 a2	jsr $a298			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.abd5	20 bd a2	jsr $a2bd			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.abd8	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.abda					_I32MLoop:
.abda	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.abdd	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.abe0	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.abe3	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.abe6	f0 28		beq $ac10			beq 	_I32MExit 					; exit if zero
.abe8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.abeb	29 01		and #$01			and 	#1
.abed	f0 0e		beq $abfd			beq 	_I32MNoAdd
.abef	20 fe 98	jsr $98fe			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.abf2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.abf5	10 06		bpl $abfd			bpl 	_I32MNoAdd
.abf7					_I32ShiftRight:
.abf7	20 e4 a2	jsr $a2e4			jsr 	NSMShiftRight 				; shift S[X] right
.abfa	c8		iny				iny 								; increment shift count
.abfb	80 0a		bra $ac07			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.abfd					_I32MNoAdd:
.abfd	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ac00	70 f5		bvs $abf7			bvs 	_I32ShiftRight 				; instead.
.ac02	e8		inx				inx
.ac03	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ac06	ca		dex				dex
.ac07					_I32MShiftUpper:
.ac07	e8		inx				inx 								; shift S[X+2] right
.ac08	e8		inx				inx
.ac09	20 e4 a2	jsr $a2e4			jsr 	NSMShiftRight
.ac0c	ca		dex				dex
.ac0d	ca		dex				dex
.ac0e	80 ca		bra $abda			bra 	_I32MLoop 					; try again.
.ac10					_I32MExit:
.ac10	20 16 ac	jsr $ac16			jsr 	CalculateSign
.ac13	98		tya				tya 								; shift in A
.ac14	7a		ply				ply 								; restore Y and exit
.ac15	60		rts				rts
.ac16					CalculateSign:
.ac16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ac19	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ac1c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ac1f	0a		asl a				asl 	a 							; shift bit 7 into carry
.ac20	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ac23	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.987a					CompareStrings:
.987a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.987d	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9880	29 10		and #$10			and 	#NSBIsString
.9882	f0 2c		beq $98b0			beq 	_CSTypeError
.9884	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9887	85 36		sta $36				sta 	zTemp0
.9889	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.988c	85 37		sta $37				sta 	zTemp0+1
.988e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9891	85 38		sta $38				sta 	zTemp1
.9893	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9896	85 39		sta $39				sta 	zTemp1+1
.9898	5a		phy				phy 								; save Y so we can access strings
.9899	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.989b					_CSLoop:
.989b	c8		iny				iny
.989c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.989e	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.98a0	d0 06		bne $98a8			bne 	_CSDifferent
.98a2	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.98a4	d0 f5		bne $989b			bne 	_CSLoop 					; still comparing
.98a6					_CSExit:
.98a6	7a		ply				ply 								; reached end, return zero in A from EOS
.98a7	60		rts				rts
.98a8					_CSDifferent:
.98a8	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.98aa	90 fa		bcc $98a6			bcc		_CSExit
.98ac	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.98ae	80 f6		bra $98a6			bra 	_CSExit
.98b0					_CSTypeError:
.98b0	4c b8 b0	jmp $b0b8			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.98b3					ShiftLeft:
.98b3	38		sec				sec
.98b4	80 01		bra $98b7			bra 	ShiftMain
.98b6					ShiftRight:
.98b6	18		clc				clc
.98b7					ShiftMain:
.98b7	fa		plx				plx 								; restore X
.98b8	08		php				php 								; save direction
.98b9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98bc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98bf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98c0	0a		asl a				asl 	a
.98c1	10 05		bpl $98c8			bpl 	_NotRef
.98c3	48		pha				pha
.98c4	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98c7	68		pla				pla
.98c8					_NotRef:
.98c8	0a		asl a				asl 	a
.98c9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98cb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98ce	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98d1	f0 03		beq $98d6			beq 	_IntegerCode 				; if clear, then we have two integers
.98d3	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.98d6					_IntegerCode:
.98d6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.98d9	29 e0		and #$e0			and 	#$E0
.98db	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.98de	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.98e1	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.98e4	d0 13		bne $98f9			bne 	_SMExit0 					; if >= 32 it will always return zero.
.98e6					_SMLoop:
.98e6	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.98e9	30 11		bmi $98fc			bmi 	_SMExit 					; exit if done.
.98eb	28		plp				plp 								; restore direcition setting
.98ec	08		php				php
.98ed	90 05		bcc $98f4			bcc 	_SMRight
.98ef	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; shift left if CS
.98f2	80 f2		bra $98e6			bra 	_SMLoop
.98f4					_SMRight:
.98f4	20 e4 a2	jsr $a2e4			jsr 	NSMShiftRight 				; shift right if CC
.98f7	80 ed		bra $98e6			bra 	_SMLoop
.98f9					_SMExit0:
.98f9	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero 					; return zero.
.98fc					_SMExit:
.98fc	28		plp				plp 								; throw direction
.98fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.98fe					AddTopTwoStack:
.98fe	18		clc				clc
.98ff	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9902	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9905	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9908	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.990b	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.990e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9911	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9914	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9917	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.991a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.991d	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9920	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9923	60		rts				rts
.9924					SubTopTwoStack:
.9924	38		sec				sec
.9925	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9928	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.992b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.992e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9931	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9934	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9937	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.993a	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.993d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9940	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9943	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9946	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9949	60		rts				rts
.994a					AddInteger:
.994a	fa		plx				plx
.994b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.994e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9951	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9952	0a		asl a				asl 	a
.9953	10 05		bpl $995a			bpl 	_NotRef
.9955	48		pha				pha
.9956	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9959	68		pla				pla
.995a					_NotRef:
.995a	0a		asl a				asl 	a 							; put MSB of type into A:7
.995b	30 0b		bmi $9968			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.995d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9960	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9963	f0 06		beq $996b			beq 	_IntegerCode 				; if clear, then we have two integers
.9965	4c 7f ac	jmp $ac7f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9968					_StringData:
.9968	4c 1d 98	jmp $981d			jmp 	StringConcat							; at least one string - don't know both are strings.
.996b					_IntegerCode:
.996b					AddCode:
.996b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.996e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9971	10 8b		bpl $98fe			bpl 	AddTopTwoStack
.9973	20 24 99	jsr $9924			jsr 	SubTopTwoStack 				; do a physical subtraction
.9976	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9979	10 09		bpl $9984			bpl 	_AddExit
.997b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.997e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9981	20 76 a2	jsr $a276			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9984					_AddExit:
.9984	60		rts				rts
.9985					SubInteger:
.9985	fa		plx				plx
.9986	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9989	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.998c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.998d	0a		asl a				asl 	a
.998e	10 05		bpl $9995			bpl 	_NotRef
.9990	48		pha				pha
.9991	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9994	68		pla				pla
.9995					_NotRef:
.9995	0a		asl a				asl 	a 							; put MSB of type into A:7
.9996	30 0b		bmi $99a3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9998	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.999b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.999e	f0 06		beq $99a6			beq 	_IntegerCode 				; if clear, then we have two integers
.99a0	4c 84 ac	jmp $ac84			jmp 	FloatingPointSub 							; otherwise at least one float.
.99a3					_StringData:
.99a3	4c c2 b0	jmp $b0c2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99a6					_IntegerCode:
.99a6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.99a9	49 80		eor #$80			eor 	#$80
.99ab	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.99ae	80 bb		bra $996b			bra 	AddCode 					; and do the same code as add.
.99b0					AndInteger:
.99b0	fa		plx				plx
.99b1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.99b4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99b7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99b8	0a		asl a				asl 	a
.99b9	10 05		bpl $99c0			bpl 	_NotRef
.99bb	48		pha				pha
.99bc	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99bf	68		pla				pla
.99c0					_NotRef:
.99c0	0a		asl a				asl 	a
.99c1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99c3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99c6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99c9	f0 03		beq $99ce			beq 	_IntegerCode 				; if clear, then we have two integers
.99cb	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.99ce					_IntegerCode:
.99ce	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.99d1	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.99d4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99d7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.99da	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.99dd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99e0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.99e3	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.99e6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99e9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.99ec	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.99ef	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99f2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.99f5	60		rts				rts
.99f6					OraInteger:
.99f6	fa		plx				plx
.99f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.99fa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99fe	0a		asl a				asl 	a
.99ff	10 05		bpl $9a06			bpl 	_NotRef
.9a01	48		pha				pha
.9a02	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a05	68		pla				pla
.9a06					_NotRef:
.9a06	0a		asl a				asl 	a
.9a07	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a09	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a0c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a0f	f0 03		beq $9a14			beq 	_IntegerCode 				; if clear, then we have two integers
.9a11	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.9a14					_IntegerCode:
.9a14	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9a17	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9a1a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a1d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9a20	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9a23	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a26	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9a29	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9a2c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a2f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9a32	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9a35	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a38	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9a3b	60		rts				rts
.9a3c					EorInteger:
.9a3c	fa		plx				plx
.9a3d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a40	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a43	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a44	0a		asl a				asl 	a
.9a45	10 05		bpl $9a4c			bpl 	_NotRef
.9a47	48		pha				pha
.9a48	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a4b	68		pla				pla
.9a4c					_NotRef:
.9a4c	0a		asl a				asl 	a
.9a4d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a4f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a52	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a55	f0 03		beq $9a5a			beq 	_IntegerCode 				; if clear, then we have two integers
.9a57	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.9a5a					_IntegerCode:
.9a5a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9a5d	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9a60	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a63	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9a66	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9a69	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a6c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9a6f	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9a72	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a75	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9a78	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9a7b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a7e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9a81	60		rts				rts
.9a82					WordIndirect:
.9a82	fa		plx				plx
.9a83	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a86	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a89	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a8a	0a		asl a				asl 	a
.9a8b	10 05		bpl $9a92			bpl 	_NotRef
.9a8d	48		pha				pha
.9a8e	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a91	68		pla				pla
.9a92					_NotRef:
.9a92	0a		asl a				asl 	a
.9a93	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a95	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a98	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a9b	f0 03		beq $9aa0			beq 	_IntegerCode 				; if clear, then we have two integers
.9a9d	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.9aa0					_IntegerCode:
.9aa0	20 6b 99	jsr $996b			jsr 	AddCode 					; add the two values
.9aa3	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9aa5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9aa8	60		rts				rts
.9aa9					ByteIndirect:
.9aa9	fa		plx				plx
.9aaa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9aad	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ab0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ab1	0a		asl a				asl 	a
.9ab2	10 05		bpl $9ab9			bpl 	_NotRef
.9ab4	48		pha				pha
.9ab5	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ab8	68		pla				pla
.9ab9					_NotRef:
.9ab9	0a		asl a				asl 	a
.9aba	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9abc	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9abf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ac2	f0 03		beq $9ac7			beq 	_IntegerCode 				; if clear, then we have two integers
.9ac4	4c b8 b0	jmp $b0b8			jmp 	TypeError 					; anything else, type mismatch.
.9ac7					_IntegerCode:
.9ac7	20 6b 99	jsr $996b			jsr 	AddCode 					; add the two values
.9aca	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9acc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9acf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ac24					ConvertInt16:
.ac24	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ac27	8e 10 04	stx $0410			stx 	NSMantissa1
.ac2a	9c 18 04	stz $0418			stz 	NSMantissa2
.ac2d	9c 20 04	stz $0420			stz 	NSMantissa3
.ac30	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ac33	a2 00		ldx #$00			ldx 	#0 							; stack level
.ac35	a9 0a		lda #$0a			lda 	#10 						; base
.ac37	80 00		bra $ac39			bra 	ConvertInt32
.ac39					ConvertInt32:
.ac39	5a		phy				phy
.ac3a	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ac3c	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ac3f	10 08		bpl $ac49			bpl 	_CI32NotNeg
.ac41	48		pha				pha
.ac42	a9 2d		lda #$2d			lda 	#'-'
.ac44	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ac47	c8		iny				iny
.ac48	68		pla				pla
.ac49					_CI32NotNeg:
.ac49	20 57 ac	jsr $ac57			jsr 	_CI32DivideConvert 			; recursive conversion
.ac4c	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ac4e	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ac51	7a		ply				ply
.ac52	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ac54	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ac56	60		rts				rts
.ac57					_CI32DivideConvert:
.ac57	e8		inx				inx 								; write to next slot up
.ac58	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.ac5b	ca		dex				dex
.ac5c	20 59 ab	jsr $ab59			jsr 	Int32Divide 				; divide
.ac5f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ac62	48		pha				pha
.ac63	20 08 ab	jsr $ab08			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ac66	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; is it zero ?
.ac69	f0 06		beq $ac71			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ac6b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ac6e	20 57 ac	jsr $ac57			jsr 	_CI32DivideConvert 			; and recusrively call.
.ac71					_CI32NoRecurse:
.ac71	68		pla				pla 								; remainder
.ac72	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ac74	90 02		bcc $ac78			bcc 	_CI32NotHex
.ac76	69 26		adc #$26			adc 	#6+32
.ac78					_CI32NotHex:
.ac78	69 30		adc #$30			adc 	#48
.ac7a	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.ac7d	c8		iny				iny
.ac7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9ad0					PrecedenceLevel:
>9ad0	04					.byte	 4	; $00 <<
>9ad1	02					.byte	 2	; $01 <=
>9ad2	02					.byte	 2	; $02 <>
>9ad3	00					.byte	 0	; $03 !!3
>9ad4	00					.byte	 0	; $04 ><
>9ad5	02					.byte	 2	; $05 >=
>9ad6	04					.byte	 4	; $06 >>
>9ad7	00					.byte	 0	; $07 !!7
>9ad8	00					.byte	 0	; $08 !!8
>9ad9	00					.byte	 0	; $09 !!9
>9ada	00					.byte	 0	; $0a !!10
>9adb	00					.byte	 0	; $0b !!11
>9adc	00					.byte	 0	; $0c !!12
>9add	00					.byte	 0	; $0d !!13
>9ade	00					.byte	 0	; $0e !!14
>9adf	00					.byte	 0	; $0f !!15
>9ae0	00					.byte	 0	; $10 @
>9ae1	00					.byte	 0	; $11 !!17
>9ae2	00					.byte	 0	; $12 !!18
>9ae3	00					.byte	 0	; $13 [
>9ae4	04					.byte	 4	; $14 \
>9ae5	00					.byte	 0	; $15 ]
>9ae6	01					.byte	 1	; $16 ^
>9ae7	00					.byte	 0	; $17 _
>9ae8	00					.byte	 0	; $18 `
>9ae9	00					.byte	 0	; $19 !!25
>9aea	00					.byte	 0	; $1a !!26
>9aeb	00					.byte	 0	; $1b {
>9aec	01					.byte	 1	; $1c |
>9aed	00					.byte	 0	; $1d }
>9aee	00					.byte	 0	; $1e ~
>9aef	00					.byte	 0	; $1f [7m<7F>[m
>9af0	00					.byte	 0	; $20
>9af1	05					.byte	 5	; $21 !
>9af2	00					.byte	 0	; $22 "
>9af3	00					.byte	 0	; $23 #
>9af4	05					.byte	 5	; $24 $
>9af5	04					.byte	 4	; $25 %
>9af6	01					.byte	 1	; $26 &
>9af7	00					.byte	 0	; $27 '
>9af8	00					.byte	 0	; $28 (
>9af9	00					.byte	 0	; $29 )
>9afa	04					.byte	 4	; $2a *
>9afb	03					.byte	 3	; $2b +
>9afc	00					.byte	 0	; $2c ,
>9afd	03					.byte	 3	; $2d -
>9afe	00					.byte	 0	; $2e .
>9aff	04					.byte	 4	; $2f /
>9b00	00					.byte	 0	; $30 0
>9b01	00					.byte	 0	; $31 1
>9b02	00					.byte	 0	; $32 2
>9b03	00					.byte	 0	; $33 3
>9b04	00					.byte	 0	; $34 4
>9b05	00					.byte	 0	; $35 5
>9b06	00					.byte	 0	; $36 6
>9b07	00					.byte	 0	; $37 7
>9b08	00					.byte	 0	; $38 8
>9b09	00					.byte	 0	; $39 9
>9b0a	00					.byte	 0	; $3a :
>9b0b	00					.byte	 0	; $3b ;
>9b0c	02					.byte	 2	; $3c <
>9b0d	02					.byte	 2	; $3d =
>9b0e	02					.byte	 2	; $3e >
>9b0f	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9b10					EvaluateExpressionAt0:
.9b10	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9b12					EvaluateExpression:
.9b12	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9b14					EvaluateExpressionAtPrecedence:
.9b14	48		pha				pha 								; save precedence level
.9b15	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm 				; evaluate term into level X.
.9b18	68		pla				pla 								; restore precedence level.
.9b19					_EXPRLoop:
.9b19	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9b1b	b1 30		lda ($30),y			lda 	(codePtr),y
.9b1d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9b1f	b0 25		bcs $9b46			bcs 	_EXPRExit
.9b21	da		phx				phx 								; read the operator precedence
.9b22	aa		tax				tax
.9b23	bd d0 9a	lda $9ad0,x			lda 	PrecedenceLevel,x
.9b26	fa		plx				plx
.9b27	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9b29	f0 1b		beq $9b46			beq 	_EXPRExit
.9b2b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9b2d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9b2f	c5 37		cmp $37				cmp 	zTemp0+1
.9b31	b0 13		bcs $9b46			bcs		_EXPRExit 					; if current >= operator exit
.9b33	48		pha				pha 								; save current precedence.
.9b34	b1 30		lda ($30),y			lda 	(codePtr),y
.9b36	c8		iny				iny
.9b37	48		pha				pha
.9b38	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9b3a	e8		inx				inx 								; work out the right hand side.
.9b3b	20 14 9b	jsr $9b14			jsr 	EvaluateExpressionAtPrecedence
.9b3e	ca		dex				dex
.9b3f	68		pla				pla 								; get operator, call the code.
.9b40	20 49 9b	jsr $9b49			jsr 	_EXPRCaller
.9b43	68		pla				pla 								; restore precedence level
.9b44	80 d3		bra $9b19			bra 	_EXPRLoop 					; and go round.
.9b46					_EXPRExit:
.9b46	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9b48	60		rts				rts
.9b49					_EXPRCaller:
.9b49	da		phx				phx 								; save on stack, first thing is to restore it
.9b4a	0a		asl a				asl 	a 							; double so can use vectors into X
.9b4b	aa		tax				tax
.9b4c	7c 2a 93	jmp ($932a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.ac7f					FloatingPointAdd:
.ac7f	20 20 ae	jsr $ae20			jsr 	FloatPrepare 				; prepare for floats
.ac82	80 0b		bra $ac8f			bra 	FloatAdd
.ac84					FloatingPointSub:
.ac84	20 20 ae	jsr $ae20			jsr 	FloatPrepare 				; prepare for floats
.ac87					FloatSubtract:
.ac87	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.ac8a	49 80		eor #$80			eor 	#$80
.ac8c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.ac8f					FloatAdd:
.ac8f	48		pha				pha
.ac90	5a		phy				phy
.ac91	20 31 ae	jsr $ae31			jsr 	NSNormalise 				; normalise S[X]
.ac94	f0 54		beq $acea			beq 	_FAReturn1
.ac96	e8		inx				inx 								; normalise S[X+1]
.ac97	20 31 ae	jsr $ae31			jsr 	NSNormalise
.ac9a	ca		dex				dex
.ac9b	c9 00		cmp #$00			cmp 	#0
.ac9d	f0 6f		beq $ad0e			beq 	_FAExit 					; if so, just return A
.ac9f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.aca2	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.aca5	f0 1b		beq $acc2			beq 	_FAExponentsEqual
.aca7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.acaa	a8		tay				tay
.acab	38		sec				sec 								; do a signed comparison of the exponents.
.acac	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.acaf	50 02		bvc $acb3			bvc 	_FANoSignedChange
.acb1	49 80		eor #$80			eor 	#$80
.acb3					_FANoSignedChange:
.acb3	29 80		and #$80			and 	#$80
.acb5	10 03		bpl $acba			bpl 	_FAHaveMax
.acb7	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.acba					_FAHaveMax:
.acba	20 11 ad	jsr $ad11			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.acbd	e8		inx				inx
.acbe	20 11 ad	jsr $ad11			jsr 	_FAShiftToExponent
.acc1	ca		dex				dex
.acc2					_FAExponentsEqual:
.acc2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.acc5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.acc8	30 10		bmi $acda			bmi 	_FADifferentSigns
.acca	20 fe 98	jsr $98fe			jsr 	AddTopTwoStack 				; do the add of the mantissae
.accd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.acd0	10 3c		bpl $ad0e			bpl 	_FAExit 					; if no, we are done.
.acd2	20 e4 a2	jsr $a2e4			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.acd5	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.acd8	80 34		bra $ad0e			bra 	_FAExit
.acda					_FADifferentSigns:
.acda	20 24 99	jsr $9924			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.acdd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.ace0	10 2c		bpl $ad0e			bpl 	_FAExit 					; if no, we are done.
.ace2	20 6d a2	jsr $a26d			jsr 	NSMNegate 					; netate result
.ace5	20 76 a2	jsr $a276			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.ace8	80 24		bra $ad0e			bra 	_FAExit
.acea					_FAReturn1:
.acea	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.aced	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.acf0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.acf3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.acf6	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.acf9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.acfc	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.acff	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad02	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.ad05	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ad08	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.ad0b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad0e					_FAExit:
.ad0e	7a		ply				ply
.ad0f	68		pla				pla
.ad10	60		rts				rts
.ad11					_FAShiftToExponent:
.ad11					_FAShiftToExponent2:
.ad11	98		tya				tya 								; compare Y to exponent
.ad12	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.ad15	f0 08		beq $ad1f			beq 	_FASEExit 					; exit if so.
.ad17	20 e4 a2	jsr $a2e4			jsr 	NSMShiftRight	 			; shift the mantissa right
.ad1a	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.ad1d	80 f2		bra $ad11			bra 	_FAShiftToExponent2
.ad1f					_FASEExit:
.ad1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.ad20					CompareFloat:
.ad20	20 87 ac	jsr $ac87			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.ad23	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.ad26	29 f8		and #$f8			and 	#$F8
.ad28	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.ad2b	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.ad2e	f0 09		beq $ad39			beq 	_FCExit 					; zero, so approximately identical
.ad30	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.ad32	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ad35	10 02		bpl $ad39			bpl 	_FCExit
.ad37					_FCNegative:
.ad37	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ad39					_FCExit:
.ad39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ad3a					FDivideCommand:
.ad3a	fa		plx				plx	 								; restore stack position
.ad3b	20 20 ae	jsr $ae20			jsr 	FloatPrepare 				; prepare for floats
.ad3e					FloatDivide:
.ad3e	48		pha				pha
.ad3f	e8		inx				inx
.ad40	20 31 ae	jsr $ae31			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ad43	ca		dex				dex
.ad44	c9 00		cmp #$00			cmp 	#0
.ad46	f0 20		beq $ad68			beq 	_FDZero
.ad48	20 31 ae	jsr $ae31			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ad4b	f0 19		beq $ad66			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ad4d	20 7b ab	jsr $ab7b			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.ad50	20 08 ab	jsr $ab08			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.ad53	20 31 ae	jsr $ae31			jsr		NSNormalise 				; renormalise
.ad56	20 16 ac	jsr $ac16			jsr 	CalculateSign 				; calculate result sign
.ad59	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.ad5c	38		sec				sec
.ad5d	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ad60	38		sec				sec
.ad61	e9 1e		sbc #$1e			sbc 	#30
.ad63	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ad66					_FDExit:
.ad66	68		pla				pla
.ad67	60		rts				rts
.ad68					_FDZero:
.ad68	a9 03		lda #$03		lda	#3
.ad6a	4c 09 97	jmp $9709		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.ad6d					FloatFractionalPart:
.ad6d	5a		phy				phy
.ad6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.ad71	29 7f		and #$7f			and 	#$7F
.ad73	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad76	20 31 ae	jsr $ae31			jsr 	NSNormalise
.ad79	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.ad7c	38		sec				sec
.ad7d	e9 e0		sbc #$e0			sbc 	#$E0
.ad7f	90 31		bcc $adb2			bcc 	_FFPExit 					; already fractional
.ad81	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.ad83	b0 2a		bcs $adaf			bcs 	_FFPZero
.ad85	a8		tay				tay 								; put count to do in Y
.ad86	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.ad89	20 b4 ad	jsr $adb4			jsr 	_FFPPartial
.ad8c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad8f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.ad92	20 b4 ad	jsr $adb4			jsr 	_FFPPartial
.ad95	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad98	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ad9b	20 b4 ad	jsr $adb4			jsr 	_FFPPartial
.ad9e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ada1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ada4	20 b4 ad	jsr $adb4			jsr 	_FFPPartial
.ada7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.adaa	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; zeroed check.
.adad	d0 03		bne $adb2			bne 	_FFPExit
.adaf					_FFPZero:
.adaf	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero
.adb2					_FFPExit:
.adb2	7a		ply				ply
.adb3	60		rts				rts
.adb4					_FFPPartial:
.adb4	c0 00		cpy #$00			cpy 	#0 							; no more to do
.adb6	f0 17		beq $adcf			beq 	_FFFPPExit
.adb8	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.adba	b0 0c		bcs $adc8			bcs 	_FFFPPWholeByte
.adbc	5a		phy				phy
.adbd					_FFFPPLeft:
.adbd	0a		asl a				asl 	a
.adbe	88		dey				dey
.adbf	d0 fc		bne $adbd			bne 	_FFFPPLeft
.adc1	7a		ply				ply
.adc2					_FFFPPRight:
.adc2	4a		lsr a				lsr 	a
.adc3	88		dey				dey
.adc4	d0 fc		bne $adc2			bne 	_FFFPPRight
.adc6	80 07		bra $adcf			bra 	_FFFPPExit
.adc8					_FFFPPWholeByte:
.adc8	98		tya				tya 								; subtract 8 from count
.adc9	38		sec				sec
.adca	e9 08		sbc #$08			sbc 	#8
.adcc	a8		tay				tay
.adcd	a9 00		lda #$00			lda 	#0 							; and clear all
.adcf					_FFFPPExit:
.adcf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.add0					FloatIntegerPart:
.add0	48		pha				pha
.add1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.add4	f0 1f		beq $adf5			beq 	_FIPExit 					; if so do nothing
.add6	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; is it zero ?
.add9	f0 17		beq $adf2			beq 	_FIPZero 					; if so return zero.
.addb	20 31 ae	jsr $ae31			jsr 	NSNormalise 				; normalise
.adde	f0 12		beq $adf2			beq 	_FIPZero 					; normalised to zero, exit zero
.ade0					_FIPShift:
.ade0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.ade3	10 08		bpl $aded			bpl 	_FIPCheckZero
.ade5	20 e4 a2	jsr $a2e4			jsr 	NSMShiftRight 				; shift mantissa right
.ade8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.adeb	80 f3		bra $ade0			bra 	_FIPShift
.aded					_FIPCheckZero:
.aded	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; avoid -0 problem
.adf0	d0 03		bne $adf5			bne 	_FIPExit 					; set to zero if mantissa zero.
.adf2					_FIPZero:
.adf2	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero
.adf5					_FIPExit:
.adf5	68		pla				pla
.adf6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.adf7					FloatingPointMultiply:
.adf7	20 20 ae	jsr $ae20			jsr 	FloatPrepare 				; prepare for floats
.adfa					FloatMultiply:
.adfa	48		pha				pha
.adfb	20 31 ae	jsr $ae31			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.adfe	f0 1b		beq $ae1b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ae00	e8		inx				inx
.ae01	20 31 ae	jsr $ae31			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ae04	ca		dex				dex
.ae05	c9 00		cmp #$00			cmp 	#0
.ae07	f0 0f		beq $ae18			beq 	_FDSetZero
.ae09	20 d1 ab	jsr $abd1			jsr 	MultiplyShort 				; calculate the result.
.ae0c	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.ae0f	18		clc				clc
.ae10	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.ae13	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ae16	80 03		bra $ae1b			bra 	_FDExit
.ae18					_FDSetZero:
.ae18	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero 					; return 0
.ae1b					_FDExit:
.ae1b	20 31 ae	jsr $ae31			jsr 	NSNormalise 				; normalise the result
.ae1e	68		pla				pla
.ae1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.ae20					FloatPrepare:
.ae20	20 22 9c	jsr $9c22			jsr 	DereferenceTopTwo 			; dereference the top two values
.ae23	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.ae26	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae29	29 10		and #$10			and 	#NSBIsString
.ae2b	d0 01		bne $ae2e			bne 	_FDType
.ae2d	60		rts				rts
.ae2e					_FDType:
.ae2e	4c b8 b0	jmp $b0b8			jmp 	TypeError
.ae31					NSNormalise:
.ae31	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ae34	29 80		and #$80			and 	#$80
.ae36	09 08		ora #$08			ora 	#NSTFloat
.ae38	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ae3b	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; if zero exit
.ae3e	d0 09		bne $ae49			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ae40	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ae43	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ae46	a9 00		lda #$00			lda 	#0 							; set Z flag
.ae48	60		rts				rts
.ae49					_NSNormaliseOptimise:
.ae49	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.ae4c	d0 22		bne $ae70			bne 	_NSNormaliseLoop
.ae4e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.ae51	30 1d		bmi $ae70			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.ae53	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ae56	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae59	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ae5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ae5f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae62	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.ae65	bd 28 04	lda $0428,x			lda 	NSExponent,x
.ae68	38		sec				sec
.ae69	e9 08		sbc #$08			sbc 	#8
.ae6b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ae6e	80 d9		bra $ae49			bra 	_NSNormaliseOptimise
.ae70					_NSNormaliseLoop:
.ae70	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.ae73	70 08		bvs $ae7d			bvs 	_NSNExit 					; exit if so with Z flag clear
.ae75	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; shift mantissa left
.ae78	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ae7b	80 f3		bra $ae70			bra 	_NSNormaliseLoop
.ae7d					_NSNExit:
.ae7d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ae7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9b4f					AssignNumber:
.9b4f	5a		phy				phy
.9b50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9b53	85 36		sta $36				sta 	zTemp0
.9b55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b58	85 37		sta $37				sta 	zTemp0+1
.9b5a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9b5d	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9b5f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b62	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9b64	c9 08		cmp #$08			cmp 	#NSTFloat
.9b66	f0 2a		beq $9b92			beq 	_ANFloat
.9b68	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9b6b	f0 05		beq $9b72			beq		_ANNotFloat
.9b6d	e8		inx				inx
.9b6e	20 d0 ad	jsr $add0			jsr 	FloatIntegerPart 			; make it an integer
.9b71	ca		dex				dex
.9b72					_ANNotFloat:
.9b72	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9b75	29 03		and #$03			and 	#3
.9b77	d0 05		bne $9b7e			bne 	_ANByteWord
.9b79	20 9e 9b	jsr $9b9e			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9b7c	80 1e		bra $9b9c			bra 	_ANExit
.9b7e					_ANByteWord:
.9b7e	48		pha				pha 								; save count
.9b7f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9b82	92 36		sta ($36)			sta 	(zTemp0)
.9b84	68		pla				pla
.9b85	c9 01		cmp #$01			cmp	 	#1
.9b87	f0 13		beq $9b9c			beq 	_ANExit
.9b89	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9b8c	a0 01		ldy #$01			ldy 	#1
.9b8e	91 36		sta ($36),y			sta 	(zTemp0),y
.9b90	80 0a		bra $9b9c			bra 	_ANExit
.9b92					_ANFloat:
.9b92	20 9e 9b	jsr $9b9e			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9b95	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9b98	a0 04		ldy #$04			ldy 	#4
.9b9a	91 36		sta ($36),y			sta 	(zTemp0),y
.9b9c					_ANExit:
.9b9c	7a		ply				ply
.9b9d	60		rts				rts
.9b9e					_ANCopy4PackSign:
.9b9e	a0 03		ldy #$03			ldy 	#3
.9ba0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9ba3	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9ba5	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ba8	91 36		sta ($36),y			sta 	(zTemp0),y
.9baa	88		dey				dey
.9bab	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9bae	91 36		sta ($36),y			sta 	(zTemp0),y
.9bb0	88		dey				dey
.9bb1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9bb4	91 36		sta ($36),y			sta 	(zTemp0),y
.9bb6	88		dey				dey
.9bb7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9bba	91 36		sta ($36),y			sta 	(zTemp0),y
.9bbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9bbd					AssignString:
.9bbd	5a		phy				phy
.9bbe	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9bc1	85 38		sta $38				sta 	zTemp1
.9bc3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9bc6	85 39		sta $39				sta 	zTemp1+1
.9bc8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9bcb	85 36		sta $36				sta 	zTemp0
.9bcd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bd0	85 37		sta $37				sta 	zTemp0+1
.9bd2	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9bd4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bd6	f0 23		beq $9bfb			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9bd8	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9bd9	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9bdb	e9 02		sbc #$02			sbc 	#2
.9bdd	85 3c		sta $3c				sta 	zsTemp
.9bdf	a0 01		ldy #$01			ldy 	#1
.9be1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9be3	e9 00		sbc #$00			sbc 	#0
.9be5	85 3d		sta $3d				sta 	zsTemp+1
.9be7	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9be9					_ASGetLength:
.9be9	c8		iny				iny
.9bea	b1 38		lda ($38),y			lda 	(zTemp1),y
.9bec	d0 fb		bne $9be9			bne 	_ASGetLength
.9bee	98		tya				tya 								; is this length <= current length
.9bef	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9bf1	90 20		bcc $9c13			bcc 	_ASCopyString
.9bf3	f0 1e		beq $9c13			beq 	_ASCopyString
.9bf5	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9bf7	a0 01		ldy #$01			ldy 	#1
.9bf9	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9bfb					_ASNewStringRequired:
.9bfb	e8		inx				inx 								; concrete the new string.
.9bfc	20 62 b3	jsr $b362			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9bff	ca		dex				dex
.9c00	18		clc				clc
.9c01	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9c04	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9c06	92 36		sta ($36)			sta 	(zTemp0)
.9c08	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c0b	69 00		adc #$00			adc 	#0
.9c0d	a0 01		ldy #$01			ldy 	#1
.9c0f	91 36		sta ($36),y			sta 	(zTemp0),y
.9c11	80 0d		bra $9c20			bra 	_ASExit
.9c13					_ASCopyString:
.9c13	a0 00		ldy #$00			ldy 	#0
.9c15					_ASCopyLoop:
.9c15	b1 38		lda ($38),y			lda 	(zTemp1),y
.9c17	c8		iny				iny
.9c18	c8		iny				iny
.9c19	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9c1b	88		dey				dey
.9c1c	c9 00		cmp #$00			cmp 	#0
.9c1e	d0 f5		bne $9c15			bne 	_ASCopyLoop
.9c20					_ASExit:
.9c20	7a		ply				ply
.9c21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9c22					DereferenceTopTwo:
.9c22	e8		inx				inx
.9c23	20 27 9c	jsr $9c27			jsr 	Dereference 				; deref x+1
.9c26	ca		dex				dex  								; falls through to deref x
.9c27					Dereference:
.9c27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9c2a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9c2c	f0 57		beq $9c85			beq 	_DRFExit 					; not a reference
.9c2e	5a		phy				phy
.9c2f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9c32	85 36		sta $36				sta 	zTemp0
.9c34	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c37	85 37		sta $37				sta 	zTemp0+1
.9c39	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9c3c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9c3e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9c44	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9c46	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9c48	f0 0f		beq $9c59			beq 	_DRFDereferenceTwo
.9c4a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9c4c	f0 39		beq $9c87			beq 	_DRFFull
.9c4e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9c51	29 03		and #$03			and 	#3
.9c53	f0 32		beq $9c87			beq 	_DRFFull 					; the whole word
.9c55	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9c57	f0 07		beq $9c60			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9c59					_DRFDereferenceTwo:
.9c59	a0 01		ldy #$01			ldy 	#1
.9c5b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c5d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c60					_DRFClear23:
.9c60	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9c63	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9c66	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9c69	29 18		and #$18			and 	#NSBTypeMask
.9c6b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c6e	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9c70	d0 12		bne $9c84			bne 	_DRFNotString
.9c72	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9c75	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9c78	d0 0a		bne $9c84			bne 	_DRFNotString
.9c7a	a9 86		lda #$86			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9c7c	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9c7f	a9 9c		lda #$9c			lda 	#_DRFNullString >> 8
.9c81	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9c84					_DRFNotString
.9c84	7a		ply				ply 								; restore Y and exit
.9c85					_DRFExit:
.9c85	60		rts				rts
.9c86					_DRFNullString:
>9c86	00						.byte 	0
.9c87					_DRFFull:
.9c87	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9c89	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c8b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c8e	c8		iny				iny
.9c8f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c91	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c94	c8		iny				iny
.9c95	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c97	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c9a	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9c9d	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9ca0	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9ca2	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9ca5	f0 06		beq $9cad			beq 	_DRFNoExponent
.9ca7	c8		iny				iny 								; if not, read the exponent as well.
.9ca8	b1 36		lda ($36),y			lda 	(zTemp0),y
.9caa	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9cad					_DRFNoExponent:
.9cad	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9cb0	10 0d		bpl $9cbf			bpl 	_DRFExit2 					; if not, then exit.
.9cb2	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9cb4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cb7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9cba	09 80		ora #$80			ora 	#NSBIsNegative
.9cbc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cbf					_DRFExit2:
.9cbf	7a		ply				ply
.9cc0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9cc1					EncodeNumberStart:
.9cc1	38		sec				sec
.9cc2	80 01		bra $9cc5			bra 	EncodeNumberContinue+1
.9cc4					EncodeNumberContinue:
.9cc4	18		clc				clc
.9cc5					EncodeNumber:
.9cc5	08		php				php 								; save reset.
.9cc6	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9cc8	f0 12		beq $9cdc			beq 	_ENIsOkay
.9cca	c9 30		cmp #$30			cmp 	#"0"
.9ccc	90 04		bcc $9cd2			bcc 	_ENBadNumber
.9cce	c9 3a		cmp #$3a			cmp 	#"9"+1
.9cd0	90 0a		bcc $9cdc			bcc 	_ENIsOkay
.9cd2					_ENBadNumber:
.9cd2	28		plp				plp 								; throw saved reset
.9cd3	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9cd6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9cd8	f0 7e		beq $9d58			beq 	_ENConstructFinal
.9cda					_ENFail:
.9cda	18		clc				clc 								; not allowed
.9cdb	60		rts				rts
.9cdc					_ENIsOkay:
.9cdc	28		plp				plp 								; are we restarting
.9cdd	90 15		bcc $9cf4			bcc 	_ENNoRestart
.9cdf					_ENStartEncode:
.9cdf	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ce1	f0 0c		beq $9cef			beq 	_ENFirstDP
.9ce3	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9ce5	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.9ce8	a9 01		lda #$01			lda 	#ESTA_Low
.9cea					_ENExitChange:
.9cea	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ced	38		sec				sec
.9cee	60		rts				rts
.9cef					_ENFirstDP:
.9cef	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero 					; clear integer part
.9cf2	80 3f		bra $9d33			bra 	_ESTASwitchFloat			; go straight to float and exi
.9cf4					_ENNoRestart:
.9cf4	48		pha				pha 								; save on stack.
.9cf5	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9cf8	c9 01		cmp #$01			cmp 	#ESTA_Low
.9cfa	f0 09		beq $9d05			beq  	_ESTALowState
.9cfc	c9 02		cmp #$02			cmp 	#ESTA_High
.9cfe	f0 29		beq $9d29			beq 	_ESTAHighState
.9d00	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9d02	f0 3b		beq $9d3f			beq 	_ESTADecimalState
>9d04	db						.byte 	$DB 						; causes a break in the emulator
.9d05					_ESTALowState:
.9d05	68		pla				pla 								; get value back
.9d06	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9d08	f0 29		beq $9d33			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9d0a	29 0f		and #$0f			and 	#15 						; make digit
.9d0c	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9d0f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9d12	0a		asl a				asl 	a
.9d13	0a		asl a				asl 	a
.9d14	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9d17	0a		asl a				asl 	a
.9d18	6d 86 04	adc $0486			adc 	DigitTemp
.9d1b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d1e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9d20	90 05		bcc $9d27			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9d22	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9d24	8d 85 04	sta $0485			sta 	EncodeState
.9d27					_ESTANoSwitch:
.9d27	38		sec				sec
.9d28	60		rts				rts
.9d29					_ESTAHighState:
.9d29	68		pla				pla 								; get value back
.9d2a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9d2c	f0 05		beq $9d33			beq 	_ESTASwitchFloat
.9d2e	20 92 9d	jsr $9d92			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9d31	38		sec				sec
.9d32	60		rts				rts
.9d33					_ESTASwitchFloat:
.9d33	9c 87 04	stz $0487			stz 	DecimalCount
.9d36	e8		inx				inx 								; zero the decimal additive.
.9d37	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero
.9d3a	ca		dex				dex
.9d3b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9d3d	80 ab		bra $9cea			bra 	_ENExitChange
.9d3f					_ESTADecimalState:
.9d3f	68		pla				pla 								; digit.
.9d40	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9d42	f0 96		beq $9cda			beq 	_ENFail
.9d44	e8		inx				inx 								; put digit into fractional part of X+1
.9d45	20 92 9d	jsr $9d92			jsr 	ESTAShiftDigitIntoMantissa
.9d48	ca		dex				dex
.9d49	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9d4c	ad 87 04	lda $0487			lda 	DecimalCount
.9d4f	c9 0b		cmp #$0b			cmp 	#11
.9d51	f0 02		beq $9d55			beq 	_ESTADSFail
.9d53	38		sec				sec
.9d54	60		rts				rts
.9d55					_ESTADSFail:
.9d55	4c b3 b0	jmp $b0b3			jmp 	RangeError
.9d58					_ENConstructFinal:
.9d58	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9d5b	f0 33		beq $9d90			beq 	_ENCFExit 					; no decimals
.9d5d	5a		phy				phy
.9d5e	0a		asl a				asl 	a 							; x 4 and CLC
.9d5f	0a		asl a				asl 	a
.9d60	6d 87 04	adc $0487			adc 	DecimalCount
.9d63	a8		tay				tay
.9d64	b9 72 b0	lda $b072,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9d67	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d6a	b9 73 b0	lda $b073,y			lda 	DecimalScalarTable-5+1,y
.9d6d	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9d70	b9 74 b0	lda $b074,y			lda 	DecimalScalarTable-5+2,y
.9d73	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9d76	b9 75 b0	lda $b075,y			lda 	DecimalScalarTable-5+3,y
.9d79	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9d7c	b9 76 b0	lda $b076,y			lda 	DecimalScalarTable-5+4,y
.9d7f	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9d82	a9 08		lda #$08			lda 	#NSTFloat
.9d84	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9d87	7a		ply				ply
.9d88	e8		inx				inx 								; multiply decimal const by decimal scalar
.9d89	20 fa ad	jsr $adfa			jsr 	FloatMultiply
.9d8c	ca		dex				dex
.9d8d	20 8f ac	jsr $ac8f			jsr 	FloatAdd 					; add to integer part.
.9d90					_ENCFExit:
.9d90	18		clc				clc 								; reject the digit.
.9d91	60		rts				rts
.9d92					ESTAShiftDigitIntoMantissa:
.9d92	29 0f		and #$0f			and 	#15 						; save digit
.9d94	48		pha				pha
.9d95	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9d98	48		pha				pha
.9d99	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9d9c	48		pha				pha
.9d9d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9da0	48		pha				pha
.9da1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9da4	48		pha				pha
.9da5	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; x 2
.9da8	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; x 4
.9dab	18		clc				clc 								; pop mantissa and add
.9dac	68		pla				pla
.9dad	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9db0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db3	68		pla				pla
.9db4	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9db7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dba	68		pla				pla
.9dbb	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9dbe	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dc1	68		pla				pla
.9dc2	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9dc5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9dc8	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; x 10
.9dcb	68		pla				pla 								; add digit
.9dcc	18		clc				clc
.9dcd	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9dd0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dd3	90 0d		bcc $9de2			bcc 	_ESTASDExit
.9dd5	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9dd8	d0 08		bne $9de2			bne 	_ESTASDExit
.9dda	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9ddd	d0 03		bne $9de2			bne 	_ESTASDExit
.9ddf	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9de2					_ESTASDExit:
.9de2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9de3					EvaluateTerm:
.9de3	b1 30		lda ($30),y			lda 	(codePtr),y
.9de5	30 18		bmi $9dff			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9de7	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9de9	b0 6f		bcs $9e5a			bcs 	_ETVariable
.9deb	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9ded	90 6e		bcc $9e5d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9def	c9 3a		cmp #$3a			cmp 	#'9'+1
.9df1	b0 6a		bcs $9e5d			bcs 	_ETPuncUnary
.9df3	20 c1 9c	jsr $9cc1			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9df6					_ETNumber:
.9df6	c8		iny				iny 								; keep encoding until we have the numbers
.9df7	b1 30		lda ($30),y			lda 	(codePtr),y
.9df9	20 c4 9c	jsr $9cc4			jsr 	EncodeNumberContinue
.9dfc	b0 f8		bcs $9df6			bcs 	_ETNumber 					; go back if accepted.
.9dfe	60		rts				rts
.9dff					_ETCheckUnary:
.9dff	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9e01	f0 41		beq $9e44			beq 	_ETString
.9e03	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9e05	f0 12		beq $9e19			beq 	_ETHexConstant
.9e07	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9e09	90 0b		bcc $9e16			bcc 	_ETSyntaxError
.9e0b	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9e0d	b0 07		bcs $9e16			bcs 	_ETSyntaxError
.9e0f	da		phx				phx 								; push X on the stack
.9e10	0a		asl a				asl 	a 							; put vector x 2 into X
.9e11	aa		tax				tax
.9e12	c8		iny				iny 								; consume unary function token
.9e13	7c aa 93	jmp ($93aa,x)			jmp 	(VectorSet0,x) 				; and do it.
.9e16					_ETSyntaxError:
.9e16	4c ae b0	jmp $b0ae			jmp 	SyntaxError
.9e19					_ETHexConstant:
.9e19	c8		iny				iny 								; skip #
.9e1a	c8		iny				iny 								; skip count
.9e1b	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero 					; clear result
.9e1e					_ETHLoop:
.9e1e	b1 30		lda ($30),y			lda 	(codePtr),y
.9e20	c8		iny				iny 								; and consume
.9e21	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9e23	f0 1e		beq $9e43			beq 	_ETHExit
.9e25	48		pha				pha 								; save on stack.
.9e26	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; x 2
.9e29	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; x 4
.9e2c	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; x 8
.9e2f	20 d6 a2	jsr $a2d6			jsr 	NSMShiftLeft 				; x 16
.9e32	68		pla				pla 								; ASCII
.9e33	c9 41		cmp #$41			cmp 	#'A'
.9e35	90 02		bcc $9e39			bcc 	_ETHNotChar
.9e37	e9 07		sbc #$07			sbc 	#7
.9e39					_ETHNotChar:
.9e39	29 0f		and #$0f			and 	#15 						; digit now
.9e3b	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9e3e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e41	80 db		bra $9e1e			bra 	_ETHLoop 					; go round.
.9e43					_ETHExit:
.9e43	60		rts				rts
.9e44					_ETString:
.9e44	c8		iny				iny 								; look at length
.9e45	b1 30		lda ($30),y			lda 	(codePtr),y
.9e47	48		pha				pha
.9e48	c8		iny				iny 								; first character
.9e49	20 0b a3	jsr $a30b			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9e4c	68		pla				pla 								; restore count and save
.9e4d	85 36		sta $36				sta 	zTemp0
.9e4f	98		tya				tya 								; add length to Y to skip it.
.9e50	18		clc				clc
.9e51	65 36		adc $36				adc 	zTemp0
.9e53	a8		tay				tay
.9e54	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9e56	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e59	60		rts				rts
.9e5a					_ETVariable:
.9e5a	4c b4 9e	jmp $9eb4			jmp 	VariableHandler
.9e5d					_ETPuncUnary:
.9e5d	c8		iny				iny 								; consume the unary character
.9e5e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9e60	f0 2d		beq $9e8f			beq 	_ETUnaryNegate
.9e62	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9e64	f0 39		beq $9e9f			beq 	_ETDereference
.9e66	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9e68	f0 43		beq $9ead			beq 	_ETParenthesis
.9e6a	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9e6c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9e6e	f0 06		beq $9e76			beq 	_ETIndirection
.9e70	e6 36		inc $36				inc 	zTemp0
.9e72	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9e74	d0 a0		bne $9e16			bne 	_ETSyntaxError
.9e76					_ETIndirection:
.9e76	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9e78	1a		inc a				inc 	a
.9e79	48		pha				pha
.9e7a	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm				; evaluate the term
.9e7d	20 27 9c	jsr $9c27			jsr 	Dereference 				; dereference it.
.9e80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9e83	d0 07		bne $9e8c			bne 	_ETTypeMismatch
.9e85	68		pla				pla 								; indirection 1-2
.9e86	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9e88	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e8b	60		rts				rts
.9e8c					_ETTypeMismatch:
.9e8c	4c b8 b0	jmp $b0b8			jmp 	TypeError
.9e8f					_ETUnaryNegate:
.9e8f	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm				; evaluate the term
.9e92	20 27 9c	jsr $9c27			jsr 	Dereference 				; dereference it.
.9e95	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9e98	29 10		and #$10			and 	#NSTString
.9e9a	d0 f0		bne $9e8c			bne 	_ETTypeMismatch
.9e9c	4c 6d a2	jmp $a26d			jmp 	NSMNegate  					; just toggles the sign bit.
.9e9f					_ETDereference:
.9e9f	20 e3 9d	jsr $9de3			jsr 	EvaluateTerm				; evaluate the term
.9ea2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9ea5	29 20		and #$20			and 	#NSBIsReference
.9ea7	f0 e3		beq $9e8c			beq 	_ETTypeMismatch
.9ea9	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9eac	60		rts				rts
.9ead					_ETParenthesis:
.9ead	20 12 9b	jsr $9b12			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9eb0	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 			; check for )
.9eb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9eb4					VariableHandler:
.9eb4	b1 30		lda ($30),y			lda 	(codePtr),y
.9eb6	18		clc				clc
.9eb7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9eb9	85 37		sta $37				sta 	zTemp0+1
.9ebb	c8		iny				iny
.9ebc	b1 30		lda ($30),y			lda 	(codePtr),y
.9ebe	85 36		sta $36				sta 	zTemp0
.9ec0	c8		iny				iny
.9ec1	18		clc				clc									; copy variable address+3 to mantissa
.9ec2	69 03		adc #$03			adc 	#3
.9ec4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ec7	a5 37		lda $37				lda 	zTemp0+1
.9ec9	69 00		adc #$00			adc 	#0
.9ecb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ece	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9ed1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ed4	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ed7	5a		phy				phy
.9ed8	a0 02		ldy #$02			ldy 	#2 							; read type
.9eda	b1 36		lda ($36),y			lda 	(zTemp0),y
.9edc	7a		ply				ply
.9edd	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9edf	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9ee1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ee4	29 04		and #$04			and 	#NSBIsArray
.9ee6	d0 01		bne $9ee9			bne 	_VHArray
.9ee8	60		rts				rts
.9ee9					_VHArray:
.9ee9	e8		inx				inx
.9eea	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9eed	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9eef	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9ef2	b1 30		lda ($30),y			lda 	(codePtr),y
.9ef4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9ef6	d0 06		bne $9efe			bne 	_VHNoSecondIndex
.9ef8	c8		iny				iny 								; skip the comma
.9ef9	e8		inx				inx
.9efa	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9efd	ca		dex				dex
.9efe					_VHNoSecondIndex:
.9efe	ca		dex				dex 								; set X back.
.9eff	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 			; and check the right bracket.
.9f02	5a		phy				phy 								; save position
.9f03	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9f06	85 3e		sta $3e				sta 	zaTemp
.9f08	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f0b	85 3f		sta $3f				sta 	zaTemp+1
.9f0d	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9f0f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f11	f0 02		beq $9f15			beq 	_VHHas2Mask
.9f13	a9 ff		lda #$ff			lda 	#$FF
.9f15					_VHHas2Mask:
.9f15	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9f18	f0 54		beq $9f6e			beq 	_VHBadIndex
.9f1a	0a		asl a				asl 	a 							; carry will be set if a second index
.9f1b	90 09		bcc $9f26			bcc 	_VHCheckFirstIndex
.9f1d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9f1f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f21	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9f24	90 48		bcc $9f6e			bcc 	_VHBadIndex
.9f26					_VHCheckFirstIndex:
.9f26	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9f28	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f2a	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9f2d	90 3f		bcc $9f6e			bcc 	_VHBadIndex
.9f2f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9f31	64 37		stz $37				stz 	zTemp0+1
.9f33	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9f36	30 0f		bmi $9f47			bmi 	_VHNoMultiply
.9f38	da		phx				phx
.9f39	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9f3c	48		pha				pha
.9f3d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9f3f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f41	1a		inc a				inc 	a 							; add 1 for zero base
.9f42	fa		plx				plx
.9f43	20 4a af	jsr $af4a			jsr 	Multiply8x8 				; calculate -> Z0
.9f46	fa		plx				plx
.9f47					_VHNoMultiply:
.9f47	18		clc				clc
.9f48	a5 36		lda $36				lda 	zTemp0
.9f4a	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9f4d	85 36		sta $36				sta 	zTemp0
.9f4f	a5 37		lda $37				lda 	zTemp0+1
.9f51	69 00		adc #$00			adc 	#0
.9f53	85 37		sta $37				sta 	zTemp0+1
.9f55	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f58	20 9e 8d	jsr $8d9e			jsr 	ScaleByBaseType
.9f5b	18		clc				clc
.9f5c	b2 3e		lda ($3e)			lda 	(zaTemp)
.9f5e	65 36		adc $36				adc 	zTemp0
.9f60	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f63	a0 01		ldy #$01			ldy 	#1
.9f65	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9f67	65 37		adc $37				adc 	zTemp0+1
.9f69	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f6c	7a		ply				ply 								; restore position
.9f6d	60		rts				rts
.9f6e					_VHBadIndex:
.9f6e	a9 17		lda #$17		lda	#23
.9f70	4c 09 97	jmp $9709		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ae80					AbsUnary:
.ae80	fa		plx				plx 								; restore stack pos
.ae81	20 15 a2	jsr $a215			jsr 	EvaluateNumber 				; get a float or int
.ae84	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.ae87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ae8a	29 7f		and #$7f			and 	#$7F
.ae8c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ae8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9f73					AllocUnary:
.9f73	fa		plx				plx 								; restore stack pos
.9f74	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger		; get bytes required.
.9f77	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.9f7a	da		phx				phx 								; save X/Y
.9f7b	5a		phy				phy
.9f7c	8a		txa				txa 								; copy X into Y
.9f7d	a8		tay				tay
.9f7e	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9f81	aa		tax				tax
.9f82	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9f85	20 92 9f	jsr $9f92			jsr 	AllocateXABytes 			; allocate memory
.9f88	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9f8b	8a		txa				txa
.9f8c	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9f8f	7a		ply				ply
.9f90	fa		plx				plx
.9f91	60		rts				rts
.9f92					AllocateXABytes:
.9f92	5a		phy				phy
.9f93	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9f96	84 36		sty $36				sty 	zTemp0
.9f98	5a		phy				phy
.9f99	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9f9c	84 37		sty $37				sty 	zTemp0+1
.9f9e	5a		phy				phy
.9f9f	18		clc				clc 								; add to low memory pointer
.9fa0	6d 8c 04	adc $048c			adc 	lowMemPtr
.9fa3	8d 8c 04	sta $048c			sta 	lowMemPtr
.9fa6	8a		txa				txa
.9fa7	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9faa	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9fad	b0 2f		bcs $9fde			bcs 	CISSMemory
.9faf	20 d0 9f	jsr $9fd0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9fb2					_ClearMemory:
.9fb2	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9fb5	c5 36		cmp $36				cmp 	zTemp0
.9fb7	d0 07		bne $9fc0			bne 	_CMClearNext
.9fb9	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9fbc	c5 37		cmp $37				cmp 	zTemp0+1
.9fbe	f0 0c		beq $9fcc			beq 	_CMExit
.9fc0					_CMClearNext:
.9fc0	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9fc2	92 36		sta ($36)			sta 	(zTemp0)
.9fc4	e6 36		inc $36				inc 	zTemp0
.9fc6	d0 ea		bne $9fb2			bne 	_ClearMemory
.9fc8	e6 37		inc $37				inc		zTemp0+1
.9fca	80 e6		bra $9fb2			bra 	_ClearMemory
.9fcc					_CMExit:
.9fcc	fa		plx				plx
.9fcd	68		pla				pla
.9fce	7a		ply				ply
.9fcf	60		rts				rts
.9fd0					CheckIdentifierStringSpace:
.9fd0	48		pha				pha
.9fd1	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9fd4	18		clc				clc
.9fd5	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9fd7	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9fda	b0 02		bcs $9fde			bcs 	CISSMemory
.9fdc	68		pla				pla
.9fdd	60		rts				rts
.9fde					CISSMemory:
.9fde	a9 06		lda #$06		lda	#6
.9fe0	4c 09 97	jmp $9709		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ae90					AscUnary:
.ae90	fa		plx				plx 								; restore stack pos
.ae91	20 20 a2	jsr $a220			jsr 	EvaluateString 				; get a string
.ae94	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ae96	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.ae99	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.ae9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ae9d					FracUnary:
.ae9d	fa		plx				plx 								; restore stack pos
.ae9e	20 15 a2	jsr $a215			jsr 	EvaluateNumber 				; get a float or int
.aea1	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.aea4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aea7	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aea9	f0 04		beq $aeaf			beq 	_IUZero
.aeab	20 6d ad	jsr $ad6d			jsr 	FloatFractionalPart
.aeae	60		rts				rts
.aeaf					_IUZero:
.aeaf	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero
.aeb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.aeb3					IntUnary:
.aeb3	fa		plx				plx 								; restore stack pos
.aeb4	20 15 a2	jsr $a215			jsr 	EvaluateNumber 				; get a float or int
.aeb7	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.aeba	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aebd	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aebf	f0 03		beq $aec4			beq 	_IUExit
.aec1	20 d0 ad	jsr $add0			jsr 	FloatIntegerPart
.aec4					_IUExit:
.aec4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.aec5					LenUnary:
.aec5	fa		plx				plx 								; restore stack pos
.aec6	20 20 a2	jsr $a220			jsr 	EvaluateString 				; get a string
.aec9	5a		phy				phy
.aeca	a0 00		ldy #$00			ldy 	#0 							; find length
.aecc					_LenFind:
.aecc	b1 36		lda ($36),y			lda 	(zTemp0),y
.aece	f0 06		beq $aed6			beq 	_LenExit
.aed0	c8		iny				iny
.aed1	d0 f9		bne $aecc			bne 	_LenFind
.aed3	4c b3 b0	jmp $b0b3			jmp 	RangeError 					; string > 255
.aed6					_LenExit:
.aed6	98		tya				tya
.aed7	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.aeda	7a		ply				ply
.aedb	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.aede	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9fe3					Unary_Not:
.9fe3	fa		plx				plx
.9fe4	20 38 a2	jsr $a238			jsr 	EvaluateInteger 			; get integer
.9fe7	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.9fea	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; zero mantissa ?
.9fed	f0 04		beq $9ff3			beq 	_NotZero
.9fef	20 c1 a2	jsr $a2c1			jsr 	NSMSetZero
.9ff2	60		rts				rts
.9ff3					_NotZero:
.9ff3	4c 76 97	jmp $9776			jmp 	ReturnTrue
.9ff6					_UNBad:
.9ff6	4c bd b0	jmp $b0bd			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ff9					Unary_Random:
.9ff9	fa		plx				plx
.9ffa	20 72 a0	jsr $a072			jsr 	Random32Bit 				; get a random number
.9ffd	20 57 a0	jsr $a057			jsr 	URCopyToMantissa  			; put in mantissa
.a000	e8		inx				inx
.a001	20 4d a2	jsr $a24d			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a004	ca		dex				dex
.a005	20 4c ab	jsr $ab4c			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a008	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a00b	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a00e	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.a011	60		rts				rts
.a012					Unary_Rnd:
.a012	fa		plx				plx
.a013	20 15 a2	jsr $a215			jsr 	EvaluateNumber 				; number to use.
.a016	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 			; closing bracket
.a019	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a01c	f0 2b		beq $a049			beq 	_URCopySeed
.a01e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a021	10 23		bpl $a046			bpl 	_URDontSeed
.a023	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a026	49 17		eor #$17			eor 	#$17
.a028	8d 88 04	sta $0488			sta 	RandomSeed+0
.a02b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a02e	49 a5		eor #$a5			eor 	#$A5
.a030	8d 89 04	sta $0489			sta 	RandomSeed+1
.a033	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a036	49 c2		eor #$c2			eor 	#$C2
.a038	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a03b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a03e	49 9d		eor #$9d			eor 	#$9D
.a040	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a043	20 72 a0	jsr $a072			jsr 	Random32Bit
.a046					_URDontSeed:
.a046	20 72 a0	jsr $a072			jsr 	Random32Bit 				; generate a number.
.a049					_URCopySeed:
.a049	20 57 a0	jsr $a057			jsr 	URCopyToMantissa 			; copy into mantissa
.a04c	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a04e	8d 28 04	sta $0428			sta 	NSExponent
.a051	a9 08		lda #$08			lda 	#NSTFloat
.a053	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a056	60		rts				rts
.a057					URCopyToMantissa:
.a057	ad 88 04	lda $0488			lda 	RandomSeed+0
.a05a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a05d	ad 89 04	lda $0489			lda 	RandomSeed+1
.a060	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a063	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a066	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a069	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a06c	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.a06e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a071	60		rts				rts
.a072					Random32Bit:
.a072	5a		phy				phy
.a073	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a075	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a078	d0 03		bne $a07d			bne 	_Random1
.a07a	a8		tay				tay 								; if so do it 256 times
.a07b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a07d					_Random1:
.a07d	0a		asl a				asl 	a 							; LSFR RNG
.a07e	2e 89 04	rol $0489			rol 	RandomSeed+1
.a081	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a084	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a087	90 02		bcc $a08b			bcc 	_Random2
.a089	49 c5		eor #$c5			eor 	#$C5
.a08b					_Random2:
.a08b	88		dey				dey
.a08c	d0 ef		bne $a07d			bne 	_Random1
.a08e	8d 88 04	sta $0488			sta 	RandomSeed+0
.a091	7a		ply				ply
.a092	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.aedf					SgnUnary:
.aedf	fa		plx				plx 								; restore stack pos
.aee0	20 15 a2	jsr $a215			jsr 	EvaluateNumber 				; get a float or int
.aee3	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.aee6	20 f1 a2	jsr $a2f1			jsr 	NSMIsZero 					; if zero
.aee9	f0 10		beq $aefb			beq 	_SGZero  					; return Int Zero
.aeeb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.aeee	48		pha				pha
.aeef	a9 01		lda #$01			lda 	#1 							; set to 1
.aef1	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.aef4	68		pla				pla
.aef5	29 80		and #$80			and		#$80 						; copy the sign byte out
.aef7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aefa	60		rts				rts
.aefb	20 c1 a2	jsr $a2c1	_SGZero:jsr 	NSMSetZero
.aefe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.aeff					ValUnary:
.aeff	fa		plx				plx 								; restore stack pos
.af00	20 15 af	jsr $af15			jsr 	ValMainCode 				; do the main val() code
.af03	b0 01		bcs $af06			bcs 	_VUError 					; couldn't convert
.af05	60		rts				rts
.af06					_VUError:
.af06	4c b8 b0	jmp $b0b8			jmp 	TypeError
.af09					IsValUnary:
.af09	fa		plx				plx 								; restore stack pos
.af0a	20 15 af	jsr $af15			jsr 	ValMainCode 				; do the main val() code
.af0d	b0 03		bcs $af12			bcs 	_VUBad
.af0f	4c 76 97	jmp $9776			jmp 	ReturnTrue
.af12					_VUBad:
.af12	4c 82 97	jmp $9782			jmp 	ReturnFalse
.af15					ValMainCode:
.af15	20 20 a2	jsr $a220			jsr 	EvaluateString 				; get a string
.af18	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 			; check right bracket present
.af1b	5a		phy				phy
.af1c	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.af1e	f0 17		beq $af37			beq 	_VMCFail2
.af20	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.af22	48		pha				pha 								; save first character
.af23	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.af25	d0 01		bne $af28			bne 	_VMCStart
.af27	c8		iny				iny 								; skip over -
.af28					_VMCStart:
.af28	38		sec				sec 								; initialise first time round.
.af29					_VMCNext:
.af29	c8		iny				iny 								; pre-increment
.af2a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.af2c	f0 0c		beq $af3a			beq 	_VMCSuccess 				; successful.
.af2e	20 c5 9c	jsr $9cc5			jsr 	EncodeNumber 				; send it to the number-builder
.af31	90 03		bcc $af36			bcc 	_VMCFail 					; if failed, give up.
.af33	18		clc				clc 								; next time round, countinue
.af34	80 f3		bra $af29			bra 	_VMCNext
.af36					_VMCFail:
.af36	68		pla				pla
.af37					_VMCFail2:
.af37	7a		ply				ply
.af38	38		sec				sec
.af39	60		rts				rts
.af3a					_VMCSuccess:
.af3a	a9 00		lda #$00			lda 	#0 							; construct final
.af3c	20 c5 9c	jsr $9cc5			jsr 	EncodeNumber
.af3f	68		pla				pla
.af40	c9 2d		cmp #$2d			cmp 	#"-"
.af42	d0 03		bne $af47			bne 	_VMCNotNegative
.af44	20 6d a2	jsr $a26d			jsr		NSMNegate
.af47					_VMCNotNegative:
.af47	7a		ply				ply
.af48	18		clc				clc
.af49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a093					ChrUnary:
.a093	fa		plx				plx 								; restore stack pos
.a094	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger			; get value
.a097	48		pha				pha
.a098	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.a09b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a09d	20 e3 b3	jsr $b3e3			jsr 	StringTempAllocate
.a0a0	68		pla				pla 								; write number to it
.a0a1	20 21 b4	jsr $b421			jsr 	StringTempWrite
.a0a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a0a5					SpcUnary:
.a0a5	fa		plx				plx 								; restore stack pos
.a0a6	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger			; get value
.a0a9	5a		phy				phy
.a0aa	48		pha				pha 								; save count
.a0ab	20 e3 b3	jsr $b3e3			jsr 	StringTempAllocate
.a0ae	7a		ply				ply 								; to do count in Y
.a0af					_SpcLoop:
.a0af	c0 00		cpy #$00			cpy 	#0
.a0b1	f0 08		beq $a0bb			beq 	_SpcExit
.a0b3	a9 20		lda #$20			lda 	#32
.a0b5	20 21 b4	jsr $b421			jsr 	StringTempWrite
.a0b8	88		dey				dey
.a0b9	80 f4		bra $a0af			bra 	_SPCLoop
.a0bb					_SpcExit:
.a0bb	7a		ply				ply
.a0bc	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket
.a0bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a0c0					Unary_Str:
.a0c0	fa		plx				plx
.a0c1	20 15 a2	jsr $a215			jsr 	EvaluateNumber  			; get number
.a0c4	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 			; closing bracket
.a0c7	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a0c9	20 e2 a0	jsr $a0e2			jsr 	ConvertNumberToString 		; do the conversion.
.a0cc	a9 21		lda #$21			lda		#33 						; create buffer
.a0ce	20 e3 b3	jsr $b3e3			jsr 	StringTempAllocate 			; allocate memory
.a0d1	da		phx				phx
.a0d2	a2 00		ldx #$00			ldx 	#0
.a0d4					_USCopy:
.a0d4	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a0d7	20 21 b4	jsr $b421			jsr 	StringTempWrite
.a0da	e8		inx				inx
.a0db	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a0de	d0 f4		bne $a0d4			bne 	_USCopy
.a0e0	fa		plx				plx
.a0e1	60		rts				rts
.a0e2					ConvertNumberToString:
.a0e2	5a		phy				phy 								; save code position
.a0e3	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a0e6	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a0e9	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a0ec	10 0a		bpl $a0f8			bpl 	_CNTSNotNegative
.a0ee	29 7f		and #$7f			and 	#$7F 						; make +ve
.a0f0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0f3	a9 2d		lda #$2d			lda 	#"-"
.a0f5	20 5e a1	jsr $a15e			jsr 	WriteDecimalBuffer
.a0f8					_CNTSNotNegative:
.a0f8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a0fb	f0 15		beq $a112			beq 	_CNTSNotFloat
.a0fd	e8		inx				inx 								; round up
.a0fe	a9 01		lda #$01			lda 	#1
.a100	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.a103	ca		dex				dex
.a104	bd 28 04	lda $0428,x			lda		NSExponent,x
.a107	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a10a	a9 08		lda #$08			lda 	#NSTFloat
.a10c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a10f	20 8f ac	jsr $ac8f			jsr 	FloatAdd
.a112					_CNTSNotFloat:
.a112	20 40 a1	jsr $a140			jsr 	MakePlusTwoString
.a115	20 6d ad	jsr $ad6d			jsr 	FloatFractionalPart 		; get the fractional part
.a118	20 31 ae	jsr $ae31			jsr 	NSNormalise					; normalise , exit if zero
.a11b	f0 21		beq $a13e			beq 	_CNTSExit
.a11d	a9 2e		lda #$2e			lda 	#"."
.a11f	20 5e a1	jsr $a15e			jsr 	WriteDecimalBuffer 			; write decimal place
.a122					_CNTSDecimal:
.a122	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a125	30 17		bmi $a13e			bmi 	_CNTSExit
.a127	e8		inx				inx 								; x 10.0
.a128	a9 0a		lda #$0a			lda 	#10
.a12a	20 c3 a2	jsr $a2c3			jsr 	NSMSetByte
.a12d	a9 08		lda #$08			lda 	#NSTFloat
.a12f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a132	ca		dex				dex
.a133	20 fa ad	jsr $adfa			jsr 	FloatMultiply
.a136	20 40 a1	jsr $a140			jsr 	MakePlusTwoString
.a139	20 6d ad	jsr $ad6d			jsr 	FloatFractionalPart 		; get the fractional part
.a13c	80 e4		bra $a122			bra 	_CNTSDecimal 				; keep going.
.a13e					_CNTSExit:
.a13e	7a		ply				ply
.a13f	60		rts				rts
.a140					MakePlusTwoString:
.a140	da		phx				phx
.a141	20 98 a2	jsr $a298			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a144	e8		inx				inx 								; access it
.a145	e8		inx				inx
.a146	20 d0 ad	jsr $add0			jsr 	FloatIntegerPart 			; make it an integer
.a149	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a14b	20 39 ac	jsr $ac39			jsr 	ConvertInt32
.a14e	a2 00		ldx #$00			ldx	 	#0
.a150					_MPTSCopy:
.a150	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a153	20 5e a1	jsr $a15e			jsr 	WriteDecimalBuffer
.a156	e8		inx				inx
.a157	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a15a	d0 f4		bne $a150			bne 	_MPTSCopy
.a15c	fa		plx				plx
.a15d	60		rts				rts
.a15e					WriteDecimalBuffer:
.a15e	da		phx				phx
.a15f	ae 95 04	ldx $0495			ldx 	dbOffset
.a162	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a165	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a168	ee 95 04	inc $0495			inc 	dbOffset
.a16b	fa		plx				plx
.a16c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a16d					Unary_Left:
.a16d	fa		plx				plx
.a16e	18		clc				clc 								; only one parameter
.a16f	20 e4 a1	jsr $a1e4			jsr 	SubstringInitial 			; set up.
.a172	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a175	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a178	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a17b	80 2c		bra $a1a9			bra 	SubstringMain
.a17d					Unary_Right:
.a17d	fa		plx				plx
.a17e	18		clc				clc 								; only one parameter
.a17f	20 e4 a1	jsr $a1e4			jsr 	SubstringInitial 			; set up.
.a182	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a185	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a188	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a18b	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a18e	b0 02		bcs $a192			bcs 	_URNotUnderflow
.a190	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a192					_URNotUnderFlow:
.a192	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a195	80 12		bra $a1a9			bra 	SubStringMain
.a197					Unary_Mid:
.a197	fa		plx				plx
.a198	38		sec				sec 								; two parameters
.a199	20 e4 a1	jsr $a1e4			jsr 	SubstringInitial 			; set up.
.a19c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a19f	f0 05		beq $a1a6			beq 	_UMError
.a1a1	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1a4	80 03		bra $a1a9			bra 	SubStringMain
.a1a6					_UMError:
.a1a6	4c bd b0	jmp $b0bd			jmp 	ArgumentError
.a1a9					SubStringMain:
.a1a9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a1ac	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a1af	b0 2d		bcs $a1de			bcs 	_SSMNull 					; if so, return an empty string.
.a1b1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a1b4	f0 28		beq $a1de			beq 	_SSMNull 					; return empty string.
.a1b6	18		clc				clc 								; add the offset +1 to the address and
.a1b7	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a1ba	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a1bd	85 36		sta $36				sta 	zTemp0
.a1bf	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a1c2	69 00		adc #$00			adc 	#0
.a1c4	85 37		sta $37				sta 	zTemp0+1
.a1c6					_SSMNoCarry:
.a1c6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a1c9	20 e3 b3	jsr $b3e3			jsr 	StringTempAllocate 			; allocate that many characters
.a1cc	5a		phy				phy 								; save Y
.a1cd	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a1cf					_SSMCopy:
.a1cf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a1d1	f0 09		beq $a1dc			beq 	_SSMEString 				; no more to copy
.a1d3	20 21 b4	jsr $b421			jsr 	StringTempWrite 			; and write it out.
.a1d6	c8		iny				iny
.a1d7	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a1da	d0 f3		bne $a1cf			bne 	_SSMCopy
.a1dc					_SSMEString:
.a1dc	7a		ply				ply
.a1dd					_SSMExit:
.a1dd	60		rts				rts
.a1de					_SSMNull:
.a1de	a9 00		lda #$00			lda 	#0
.a1e0	20 e3 b3	jsr $b3e3			jsr 	StringTempAllocate
.a1e3	60		rts				rts
.a1e4					SubstringInitial:
.a1e4	da		phx				phx 								; save initial stack position
.a1e5	08		php				php 								; save carry on stack indicating 2 parameters
.a1e6	20 20 a2	jsr $a220			jsr 	EvaluateString 				; get a string
.a1e9	5a		phy				phy 								; calculate length to exponent.
.a1ea	a0 ff		ldy #$ff			ldy 	#$FF
.a1ec					_SIFindLength:
.a1ec	c8		iny				iny
.a1ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.a1ef	d0 fb		bne $a1ec			bne 	_SIFindLength
.a1f1	98		tya				tya
.a1f2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a1f5	7a		ply				ply
.a1f6	e8		inx				inx
.a1f7	20 d0 aa	jsr $aad0			jsr 	CheckComma 					; comma next
.a1fa	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; get next parameter
.a1fd	28		plp				plp 								; is it the last parameter ?
.a1fe	90 07		bcc $a207			bcc 	_SSIExit 					; if so, exit.
.a200	e8		inx				inx
.a201	20 d0 aa	jsr $aad0			jsr 	CheckComma 					; comma next
.a204	20 59 a2	jsr $a259			jsr 	Evaluate8BitInteger 		; get last parameter
.a207					_SSIExit:
.a207	fa		plx				plx
.a208	20 c8 aa	jsr $aac8			jsr 	CheckRightBracket 			; check closing bracket
.a20b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a20c					EvaluateValue:
.a20c	48		pha				pha
.a20d	20 12 9b	jsr $9b12			jsr		EvaluateExpression 			; expression
.a210	20 27 9c	jsr $9c27			jsr 	Dereference					; derefernce it
.a213	68		pla				pla
.a214	60		rts				rts
.a215					EvaluateNumber:
.a215	20 0c a2	jsr $a20c			jsr 	EvaluateValue 				; get a value
.a218	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a21b	29 10		and #$10			and 	#NSBIsString
.a21d	d0 16		bne $a235			bne 	HelperTypeError
.a21f	60		rts				rts
.a220					EvaluateString:
.a220	20 0c a2	jsr $a20c			jsr 	EvaluateValue 				; get a value
.a223	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a226	29 10		and #$10			and 	#NSBIsString
.a228	f0 0b		beq $a235			beq 	HelperTypeError
.a22a					CopyAddressToTemp0:
.a22a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a22d	85 36		sta $36				sta 	zTemp0
.a22f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a232	85 37		sta $37				sta 	zTemp0+1
.a234	60		rts				rts
.a235					HelperTypeError:
.a235	4c b8 b0	jmp $b0b8			jmp 	TypeError
.a238					EvaluateInteger:
.a238	20 15 a2	jsr $a215			jsr 	EvaluateNumber
.a23b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a23e	d0 0a		bne $a24a			bne 	HelperValueError 			; if not, it's a float.
.a240	60		rts				rts
.a241					EvaluateUnsignedInteger:
.a241	20 38 a2	jsr $a238			jsr 	EvaluateInteger 			; check integer is +ve
.a244	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a247	30 01		bmi $a24a			bmi 	HelperValueError
.a249	60		rts				rts
.a24a					HelperValueError:
.a24a	4c bd b0	jmp $b0bd			jmp 	ArgumentError
.a24d					Evaluate16BitInteger:
.a24d	20 41 a2	jsr $a241			jsr	 	EvaluateUnsignedInteger		; get integer
.a250	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a253	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a256	d0 f2		bne $a24a			bne 	HelperValueError
.a258	60		rts				rts
.a259					Evaluate8BitInteger:
.a259	20 41 a2	jsr $a241			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a25c	d0 ec		bne $a24a			bne 	HelperValueError
.a25e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a261	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a264	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a267	d0 e1		bne $a24a			bne 	HelperValueError
.a269	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a26c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.af4a					Multiply8x8:
.af4a	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.af4b	85 36		sta $36			  	sta 	zTemp0
.af4d	86 37		stx $37				stx 	zTemp0+1
.af4f	a9 00		lda #$00			lda 	#0
.af51	a2 08		ldx #$08			ldx 	#8
.af53					_M88Loop:
.af53	90 03		bcc $af58			bcc 	_M88NoAdd
.af55	18		clc				clc
.af56	65 37		adc $37				adc 	zTemp0+1
.af58					_M88NoAdd:
.af58	6a		ror a				ror 	a
.af59	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.af5b	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.af5c	d0 f5		bne $af53			bne 	_M88Loop
.af5e	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.af60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a26d					NSMNegate:
.a26d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a270	49 80		eor #$80			eor 	#NSBIsNegative
.a272	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a275	60		rts				rts
.a276					NSMNegateMantissa:
.a276	38		sec				sec
.a277	a9 00		lda #$00			lda 	#0
.a279	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a27c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a27f	a9 00		lda #$00			lda 	#0
.a281	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a284	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a287	a9 00		lda #$00			lda 	#0
.a289	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a28c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a28f	a9 00		lda #$00			lda 	#0
.a291	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a294	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a297	60		rts				rts
.a298					NSMShiftUpTwo:
.a298	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a29b	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a29e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2a1	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a2a4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a2a7	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a2aa	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a2ad	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a2b0	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a2b3	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a2b6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a2b9	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a2bc	60		rts				rts
.a2bd					NSMSetZeroMantissaOnly:
.a2bd	a9 00		lda #$00			lda 	#0
.a2bf	80 08		bra $a2c9			bra 	NSMSetMantissa
.a2c1					NSMSetZero:
.a2c1	a9 00		lda #$00			lda 	#0
.a2c3					NSMSetByte:
.a2c3	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a2c6	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a2c9					NSMSetMantissa:
.a2c9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a2cc	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a2cf	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a2d2	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a2d5	60		rts				rts
.a2d6					NSMShiftLeft:
.a2d6	18		clc				clc
.a2d7					NSMRotateLeft:
.a2d7	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a2da	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a2dd	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a2e0	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a2e3	60		rts				rts
.a2e4					NSMShiftRight:
.a2e4	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a2e7	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a2ea	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a2ed	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a2f0	60		rts				rts
.a2f1					NSMIsZero:
.a2f1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a2f4	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a2f7	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a2fa	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a2fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.af61					Assemble_ora:
.af61	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af64	01					.byte $01
.af65					Assemble_and:
.af65	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af68	21					.byte $21
.af69					Assemble_eor:
.af69	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af6c	41					.byte $41
.af6d					Assemble_adc:
.af6d	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af70	61					.byte $61
.af71					Assemble_sta:
.af71	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af74	81					.byte $81
.af75					Assemble_lda:
.af75	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af78	a1					.byte $a1
.af79					Assemble_cmp:
.af79	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af7c	c1					.byte $c1
.af7d					Assemble_sbc:
.af7d	20 9d 89	jsr $899d		jsr	AssembleGroup1
>af80	e1					.byte $e1
.af81					Assemble_asl:
.af81	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>af84	02					.byte $02
>af85	75					.byte $75
.af86					Assemble_rol:
.af86	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>af89	22					.byte $22
>af8a	75					.byte $75
.af8b					Assemble_lsr:
.af8b	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>af8e	42					.byte $42
>af8f	75					.byte $75
.af90					Assemble_ror:
.af90	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>af93	62					.byte $62
>af94	75					.byte $75
.af95					Assemble_stx:
.af95	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>af98	82					.byte $82
>af99	50					.byte $50
.af9a					Assemble_ldx:
.af9a	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>af9d	a2					.byte $a2
>af9e	d0					.byte $d0
.af9f					Assemble_dec:
.af9f	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afa2	c2					.byte $c2
>afa3	55					.byte $55
.afa4					Assemble_inc:
.afa4	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afa7	e2					.byte $e2
>afa8	55					.byte $55
.afa9					Assemble_stz:
.afa9	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afac	60					.byte $60
>afad	44					.byte $44
.afae					Assemble_bit:
.afae	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afb1	20					.byte $20
>afb2	55					.byte $55
.afb3					Assemble_sty:
.afb3	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afb6	80					.byte $80
>afb7	54					.byte $54
.afb8					Assemble_ldy:
.afb8	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afbb	a0					.byte $a0
>afbc	d5					.byte $d5
.afbd					Assemble_cpy:
.afbd	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afc0	c0					.byte $c0
>afc1	d4					.byte $d4
.afc2					Assemble_cpx:
.afc2	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afc5	e0					.byte $e0
>afc6	d0					.byte $d0
.afc7					Assemble_tsb:
.afc7	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afca	00					.byte $00
>afcb	50					.byte $50
.afcc					Assemble_trb:
.afcc	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afcf	10					.byte $10
>afd0	50					.byte $50
.afd1					Assemble_jsr:
.afd1	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afd4	14					.byte $14
>afd5	10					.byte $10
.afd6					Assemble_jmp:
.afd6	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>afd9	40					.byte $40
>afda	10					.byte $10
.afdb					Assemble_bpl:
.afdb	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>afde	10					.byte $10
.afdf					Assemble_bmi:
.afdf	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>afe2	30					.byte $30
.afe3					Assemble_bvc:
.afe3	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>afe6	50					.byte $50
.afe7					Assemble_bvs:
.afe7	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>afea	70					.byte $70
.afeb					Assemble_bcc:
.afeb	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>afee	90					.byte $90
.afef					Assemble_bcs:
.afef	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>aff2	b0					.byte $b0
.aff3					Assemble_bne:
.aff3	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>aff6	d0					.byte $d0
.aff7					Assemble_beq:
.aff7	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>affa	f0					.byte $f0
.affb					Assemble_bra:
.affb	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>affe	80					.byte $80
.afff					Assemble_brk:
.afff	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b002	00					.byte $00
.b003					Assemble_php:
.b003	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b006	08					.byte $08
.b007					Assemble_clc:
.b007	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b00a	18					.byte $18
.b00b					Assemble_plp:
.b00b	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b00e	28					.byte $28
.b00f					Assemble_sec:
.b00f	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b012	38					.byte $38
.b013					Assemble_rti:
.b013	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b016	40					.byte $40
.b017					Assemble_pha:
.b017	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b01a	48					.byte $48
.b01b					Assemble_cli:
.b01b	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b01e	58					.byte $58
.b01f					Assemble_phy:
.b01f	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b022	5a					.byte $5a
.b023					Assemble_rts:
.b023	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b026	60					.byte $60
.b027					Assemble_pla:
.b027	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b02a	68					.byte $68
.b02b					Assemble_sei:
.b02b	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b02e	78					.byte $78
.b02f					Assemble_ply:
.b02f	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b032	7a					.byte $7a
.b033					Assemble_dey:
.b033	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b036	88					.byte $88
.b037					Assemble_txa:
.b037	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b03a	8a					.byte $8a
.b03b					Assemble_tya:
.b03b	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b03e	98					.byte $98
.b03f					Assemble_txs:
.b03f	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b042	9a					.byte $9a
.b043					Assemble_tay:
.b043	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b046	a8					.byte $a8
.b047					Assemble_tax:
.b047	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b04a	aa					.byte $aa
.b04b					Assemble_clv:
.b04b	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b04e	b8					.byte $b8
.b04f					Assemble_tsx:
.b04f	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b052	ba					.byte $ba
.b053					Assemble_iny:
.b053	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b056	c8					.byte $c8
.b057					Assemble_dex:
.b057	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b05a	ca					.byte $ca
.b05b					Assemble_cld:
.b05b	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b05e	d8					.byte $d8
.b05f					Assemble_phx:
.b05f	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b062	da					.byte $da
.b063					Assemble_stp:
.b063	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b066	db					.byte $db
.b067					Assemble_inx:
.b067	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b06a	e8					.byte $e8
.b06b					Assemble_nop:
.b06b	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b06e	ea					.byte $ea
.b06f					Assemble_sed:
.b06f	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b072	f8					.byte $f8
.b073					Assemble_plx:
.b073	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b076	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b077					DecimalScalarTable:
>b077	66 66 66 66				.dword $66666666 ; 0.1
>b07b	de					.byte $de
>b07c	1f 85 eb 51				.dword $51eb851f ; 0.01
>b080	db					.byte $db
>b081	4c 37 89 41				.dword $4189374c ; 0.001
>b085	d8					.byte $d8
>b086	ac 8b db 68				.dword $68db8bac ; 0.0001
>b08a	d4					.byte $d4
>b08b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b08f	d1					.byte $d1
>b090	83 de 1b 43				.dword $431bde83 ; 1e-06
>b094	ce					.byte $ce
>b095	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b099	ca					.byte $ca
>b09a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b09e	c7					.byte $c7
>b09f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b0a3	c4					.byte $c4
>b0a4	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b0a8	c0					.byte $c0
>b0a9	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b0ad	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b0ae					SyntaxError:
.b0ae	a9 02		lda #$02		lda	#2
.b0b0	4c 09 97	jmp $9709		jmp	ErrorHandler
.b0b3					RangeError:
.b0b3	a9 04		lda #$04		lda	#4
.b0b5	4c 09 97	jmp $9709		jmp	ErrorHandler
.b0b8					TypeError:
.b0b8	a9 05		lda #$05		lda	#5
.b0ba	4c 09 97	jmp $9709		jmp	ErrorHandler
.b0bd					ArgumentError:
.b0bd	a9 07		lda #$07		lda	#7
.b0bf	4c 09 97	jmp $9709		jmp	ErrorHandler
.b0c2					NotDoneError:
.b0c2	a9 0c		lda #$0c		lda	#12
.b0c4	4c 09 97	jmp $9709		jmp	ErrorHandler
.b0c7					ErrorText:
>b0c7	42 72 65 61 6b 00			.text	"Break",0
>b0cd	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b0d5	72 72 6f 72 00
>b0da	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b0e2	20 62 79 20 7a 65 72 6f 00
>b0eb	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b0f3	61 6e 67 65 00
>b0f8	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b100	6d 61 74 63 68 00
>b106	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b10e	65 6d 6f 72 79 00
>b114	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b11c	61 72 67 75 6d 65 6e 74 00
>b125	53 74 6f 70 00				.text	"Stop",0
>b12a	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b132	6f 6f 20 6c 6f 6e 67 00
>b13a	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b142	6e 20 66 61 69 6c 65 64 00
>b14b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b153	61 74 61 00
>b157	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b15f	65 6e 74 65 64 00
>b165	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b16d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b179	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b181	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b18e	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b196	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b1a3	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b1ab	68 6f 75 74 20 57 68 69 6c 65 00
>b1b6	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b1be	68 6f 75 74 20 46 6f 72 00
>b1c7	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b1cf	61 63 6b 20 66 75 6c 6c 00
>b1d8	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b1e0	75 63 74 75 72 65 00
>b1e7	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b1ef	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b1fc	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b204	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b212	41 72 72 61 79 20 73 69			.text	"Array size",0
>b21a	7a 65 00
>b21d	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b225	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b22d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1722."
>b235	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>b245	30 32 32 2e 20 42 75 69 6c 64 20 31 37 32 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b255					EXTInitialise:
.b255	64 01		stz $01				stz 	1
.b257	9c 04 d0	stz $d004			stz 	$D004
.b25a	9c 08 d0	stz $d008			stz 	$D008
.b25d	9c 09 d0	stz $d009			stz 	$D009
.b260	60		rts				rts
.b261					EXTPrintCharacter:
.b261	48		pha				pha
.b262	da		phx				phx
.b263	5a		phy				phy
.b264	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b267	7a		ply				ply
.b268	fa		plx				plx
.b269	68		pla				pla
.b26a	60		rts				rts
.b26b					EXTInputSingleCharacter:
.b26b	da		phx				phx
.b26c	5a		phy				phy
.b26d					_EISCWait:
.b26d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b270	c9 00		cmp #$00			cmp 	#0
.b272	f0 f9		beq $b26d			beq 	_EISCWait
.b274	7a		ply				ply
.b275	fa		plx				plx
.b276	60		rts				rts
.b277					EXTInputLine:
.b277	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b279					_ILLoop:
.b279	da		phx				phx 								; read character in
.b27a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b27d	fa		plx				plx
.b27e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b280	f0 12		beq $b294			beq 	_ILBackspace
.b282	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b284	f0 15		beq $b29b			beq 	_ILExit
.b286	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b288	90 ef		bcc $b279			bcc 	_ILLoop
.b28a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b28c	f0 eb		beq $b279			beq 	_ILLoop
.b28e	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b291	e8		inx				inx
.b292	80 e5		bra $b279			bra 	_ILLoop
.b294					_ILBackspace:
.b294	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b296	f0 e1		beq $b279			beq 	_ILLoop
.b298	ca		dex				dex 								; back one.
.b299	80 de		bra $b279			bra 	_ILLoop
.b29b					_ILExit:
.b29b	20 61 b2	jsr $b261			jsr 	EXTPrintCharacter
.b29e	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b2a1	60		rts				rts
.b2a2					EXTBreakCheck:
.b2a2	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b2a5					MemoryDeleteLine:
.b2a5	20 c4 b2	jsr $b2c4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b2a8	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b2aa	a8		tay				tay
.b2ab					_MDDLLoop:
.b2ab	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b2ad	92 30		sta ($30)			sta 	(codePtr)
.b2af	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b2b1	c5 3a		cmp $3a				cmp 	zTemp2
.b2b3	d0 07		bne $b2bc			bne 	_MDLDLNext
.b2b5	a5 31		lda $31				lda 	codePtr+1
.b2b7	c5 3b		cmp $3b				cmp 	zTemp2+1
.b2b9	d0 01		bne $b2bc			bne 	_MDLDLNext
.b2bb					_MDDLExit:
.b2bb	60		rts				rts
.b2bc					_MDLDLNext:
.b2bc	e6 30		inc $30				inc 	codePtr						; next byte
.b2be	d0 eb		bne $b2ab			bne 	_MDDLLoop
.b2c0	e6 31		inc $31				inc 	codePtr+1
.b2c2	80 e7		bra $b2ab			bra 	_MDDLLoop
.b2c4					IMemoryFindEnd:
.b2c4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b2c6	85 3a		sta $3a				sta 	0+zTemp2
.b2c8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b2ca	85 3b		sta $3b				sta 	1+zTemp2
.b2cc					_MDLFELoop:
.b2cc	b2 3a		lda ($3a)			lda 	(zTemp2)
.b2ce	f0 0b		beq $b2db			beq 	_MDLFEExit
.b2d0	18		clc				clc
.b2d1	65 3a		adc $3a				adc 	zTemp2
.b2d3	85 3a		sta $3a				sta 	zTemp2
.b2d5	90 f5		bcc $b2cc			bcc 	_MDLFELoop
.b2d7	e6 3b		inc $3b				inc 	zTemp2+1
.b2d9	80 f1		bra $b2cc			bra 	_MDLFELoop
.b2db					_MDLFEExit:
.b2db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b2dc					MemoryInsertLine:
.b2dc	08		php				php
.b2dd	20 c4 b2	jsr $b2c4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b2e0	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b2e2	1a		inc a				inc 	a
.b2e3	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b2e5	b0 36		bcs $b31d			bcs 	_MDLIError
.b2e7	28		plp				plp
.b2e8	90 08		bcc $b2f2			bcc 	_MDLIFound
.b2ea	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b2ec	85 30		sta $30				sta 	codePtr
.b2ee	a5 3b		lda $3b				lda 	zTemp2+1
.b2f0	85 31		sta $31				sta 	codePtr+1
.b2f2					_MDLIFound:
.b2f2	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b2f5	a8		tay				tay
.b2f6					_MDLIInsert:
.b2f6	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b2f8	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b2fa	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b2fc	c5 3a		cmp $3a				cmp 	zTemp2
.b2fe	d0 06		bne $b306			bne 	_MDLINext
.b300	a5 31		lda $31				lda 	codePtr+1
.b302	c5 3b		cmp $3b				cmp 	zTemp2+1
.b304	f0 0a		beq $b310			beq 	_MDLIHaveSpace
.b306					_MDLINext:
.b306	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b308	d0 02		bne $b30c			bne 	_MDLINoBorrow
.b30a	c6 3b		dec $3b				dec 	zTemp2+1
.b30c					_MDLINoBorrow:
.b30c	c6 3a		dec $3a				dec 	zTemp2
.b30e	80 e6		bra $b2f6			bra 	_MDLIInsert
.b310					_MDLIHaveSpace:
.b310	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b313	88		dey				dey 								; from offset-1 to 0
.b314					_MDLICopy:
.b314	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b317	91 30		sta ($30),y			sta 	(codePtr),y
.b319	88		dey				dey
.b31a	10 f8		bpl $b314			bpl 	_MDLICopy
.b31c	60		rts				rts
.b31d					_MDLIError:
.b31d	a9 06		lda #$06		lda	#6
.b31f	4c 09 97	jmp $9709		jmp	ErrorHandler
.b322					MDLAppendLine:
.b322	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b324	85 36		sta $36				sta 	zTemp0
.b326	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b328	85 38		sta $38				sta 	0+zTemp1
.b32a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b32c	85 39		sta $39				sta 	1+zTemp1
.b32e	b2 38		lda ($38)			lda 	(zTemp1)
.b330	d0 0a		bne $b33c			bne 	_MDLANoInitialise
.b332	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b334	8d 63 06	sta $0663			sta 	0+AppendPointer
.b337	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b339	8d 64 06	sta $0664			sta 	1+AppendPointer
.b33c					_MDLANoInitialise:
.b33c	18		clc				clc
.b33d	ad 63 06	lda $0663			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b340	85 38		sta $38				sta 	zTemp1
.b342	72 36		adc ($36)			adc 	(zTemp0)
.b344	8d 63 06	sta $0663			sta 	AppendPointer
.b347	ad 64 06	lda $0664			lda 	AppendPointer+1
.b34a	85 39		sta $39				sta 	zTemp1+1
.b34c	69 00		adc #$00			adc 	#0
.b34e	8d 64 06	sta $0664			sta 	AppendPointer+1
.b351	a0 00		ldy #$00			ldy 	#0
.b353					_MDLACopy:
.b353	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b355	91 38		sta ($38),y			sta 	(zTemp1),y
.b357	c8		iny				iny
.b358	98		tya				tya
.b359	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b35b	d0 f6		bne $b353			bne 	_MDLACopy
.b35d	a9 00		lda #$00			lda 	#0 							; end of program.
.b35f	91 38		sta ($38),y			sta 	(zTemp1),y
.b361	60		rts				rts
.0663					AppendPointer:
>0663							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a2fe					MemoryNew:
.a2fe	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a300	85 30		sta $30				sta 	codePtr
.a302	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a304	85 31		sta $31				sta 	codePtr+1
.a306	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a308	92 30		sta ($30)			sta 	(codePtr)
.a30a	60		rts				rts
.a30b					MemoryInline:
.a30b	98		tya				tya 								; put address into stack,x
.a30c	18		clc				clc
.a30d	65 30		adc $30				adc 	codePtr
.a30f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a312	a5 31		lda $31				lda 	codePtr+1
.a314	69 00		adc #$00			adc 	#0
.a316	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a319	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a31c	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a31f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a320					MemorySearch:
.a320	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a322	86 37		stx $37				stx 	zTemp0+1
.a324	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a326	85 30		sta $30				sta 	codePtr
.a328	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a32a	85 31		sta $31				sta 	codePtr+1
.a32c					_MTAXLoop:
.a32c	b2 30		lda ($30)			lda 	(codePtr)
.a32e	18		clc				clc
.a32f	f0 21		beq $a352			beq 	_MTAXExit 					; reached end, exit with CC.
.a331	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a333	b1 30		lda ($30),y			lda 	(codePtr),y
.a335	38		sec				sec
.a336	e5 36		sbc $36				sbc 	zTemp0
.a338	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a33a	c8		iny				iny 								; do the MSB
.a33b	b1 30		lda ($30),y			lda 	(codePtr),y
.a33d	e5 37		sbc $37				sbc 	zTemp0+1
.a33f	05 38		ora $38				ora 	zTemp1
.a341	f0 0f		beq $a352			beq 	_MTAXExit	 				; found
.a343	b0 0d		bcs $a352			bcs 	_MTAXExit 					; current < required exit
.a345	18		clc				clc
.a346	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a348	65 30		adc $30				adc 	codePtr
.a34a	85 30		sta $30				sta 	codePtr
.a34c	90 02		bcc $a350			bcc 	_CREExit
.a34e	e6 31		inc $31				inc 	codePtr+1
.a350					_CREExit:
.a350	80 da		bra $a32c			bra 	_MTAXLoop
.a352					_MTAXExit:
.a352	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a353					StackPushByte:
.a353	48		pha				pha 								; save byte
.a354	a5 34		lda $34				lda 	BasicStack
.a356	d0 09		bne $a361			bne 	_SPBNoBorrow
.a358	c6 35		dec $35				dec 	BasicStack+1
.a35a	48		pha				pha
.a35b	a5 35		lda $35				lda 	BasicStack+1
.a35d	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a35f	90 06		bcc $a367			bcc 	_SPBMemory
.a361					_SPBNoBorrow:
.a361	c6 34		dec $34				dec 	BasicStack
.a363	68		pla				pla 								; get back and write
.a364	92 34		sta ($34)			sta 	(BasicStack)
.a366	60		rts				rts
.a367					_SPBMemory:
.a367	a9 12		lda #$12		lda	#18
.a369	4c 09 97	jmp $9709		jmp	ErrorHandler
.a36c					StackPopByte:
.a36c	b2 34		lda ($34)			lda 	(BasicStack)
.a36e	e6 34		inc $34				inc 	BasicStack
.a370	d0 02		bne $a374			bne 	_SPBNoCarry
.a372	e6 35		inc $35				inc 	BasicStack+1
.a374					_SPBNoCarry:
.a374	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a375					StackOpen:
.a375	48		pha				pha 								; save frame byte
.a376	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a378	0a		asl a				asl 	a 							; claim twice this for storage
.a379	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a37b	38		sec				sec 								; so basically subtracting from
.a37c	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a37e	85 34		sta $34				sta 	basicStack
.a380	b0 08		bcs $a38a			bcs 	_SONoBorrow
.a382	c6 35		dec $35				dec 	basicStack+1
.a384	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a386	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a388	90 04		bcc $a38e			bcc 	_SOMemory
.a38a					_SONoBorrow:
.a38a	68		pla				pla 								; get marker back and write at TOS
.a38b	92 34		sta ($34)			sta 	(basicStack)
.a38d	60		rts				rts
.a38e					_SOMemory:
.a38e	a9 12		lda #$12		lda	#18
.a390	4c 09 97	jmp $9709		jmp	ErrorHandler
.a393					StackClose:
.a393	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a395	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a397	0a		asl a				asl 	a 							; claim twice this.
.a398	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a39a	85 34		sta $34				sta 	basicStack
.a39c	90 02		bcc $a3a0			bcc 	_SCExit
.a39e	e6 35		inc $35				inc 	basicStack+1
.a3a0					_SCExit:
.a3a0	60		rts				rts
.a3a1					StackCheckFrame:
.a3a1	48		pha				pha
.a3a2					_StackRemoveLocals:
.a3a2	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a3a4	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a3a6	b0 05		bcs $a3ad			bcs 	_SCNoLocal
.a3a8	20 6f aa	jsr $aa6f			jsr 	LocalPopValue
.a3ab	80 f5		bra $a3a2			bra 	_StackRemoveLocals
.a3ad					_SCNoLocal:
.a3ad	68		pla				pla
.a3ae	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a3b0	29 f0		and #$f0			and 	#$F0 						; check type bits
.a3b2	d0 01		bne $a3b5			bne 	_SCFError 					; different, we have structures mixed up
.a3b4	60		rts				rts
.a3b5					_SCFError:
.a3b5	8a		txa				txa 								; report error X
.a3b6	4c 09 97	jmp $9709			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a3b9					STKSaveCodePosition:
.a3b9	5a		phy				phy
.a3ba	98		tya				tya 								; save Y
.a3bb	a0 05		ldy #$05			ldy 	#5
.a3bd	91 34		sta ($34),y			sta 	(basicStack),y
.a3bf	88		dey				dey 								; save Code Pointer
.a3c0					_STKSaveLoop:
.a3c0	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a3c3	91 34		sta ($34),y			sta 	(basicStack),y
.a3c5	88		dey				dey
.a3c6	d0 f8		bne $a3c0			bne 	_STKSaveLoop
.a3c8	7a		ply				ply
.a3c9	60		rts				rts
.a3ca					STKLoadCodePosition:
.a3ca	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a3cc					_STKLoadLoop:
.a3cc	b1 34		lda ($34),y			lda 	(basicStack),y
.a3ce	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a3d1	c8		iny				iny
.a3d2	c0 05		cpy #$05			cpy 	#5
.a3d4	d0 f6		bne $a3cc			bne 	_STKLoadLoop
.a3d6	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a3d8	a8		tay				tay
.a3d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a3da					StackReset:
.a3da	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a3dc	85 34		sta $34				sta 	0+basicStack
.a3de	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a3e0	85 35		sta $35				sta 	1+basicStack
.a3e2	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a3e4	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a3e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b362					StringConcrete:
.b362	5a		phy				phy 								; save position on stack
.b363	20 d0 9f	jsr $9fd0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b366	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b369	85 38		sta $38				sta 	zTemp1
.b36b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b36e	85 39		sta $39				sta 	zTemp1+1
.b370	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b372					_SALength:
.b372	c8		iny				iny
.b373	b1 38		lda ($38),y			lda 	(zTemp1),y
.b375	d0 fb		bne $b372			bne 	_SALength
.b377	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b379	b0 3f		bcs $b3ba			bcs 	_SALengthError
.b37b	98		tya				tya 				 				; length of the new string
.b37c	18		clc				clc
.b37d	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b37f	90 02		bcc $b383			bcc 	_SAHaveLength
.b381	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b383					_SAHaveLength:
.b383	48		pha				pha 								; save length.
.b384	38		sec				sec
.b385	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b387	6d 8e 04	adc $048e			adc 	StringMemory
.b38a	8d 8e 04	sta $048e			sta 	StringMemory
.b38d	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b38f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b392	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b394	6d 8f 04	adc $048f			adc 	StringMemory+1
.b397	8d 8f 04	sta $048f			sta 	StringMemory+1
.b39a	85 3b		sta $3b				sta 	zTemp2+1
.b39c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b39f	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b3a0	38		sec				sec
.b3a1	e9 03		sbc #$03			sbc 	#3
.b3a3	92 3a		sta ($3a)			sta 	(zTemp2)
.b3a5	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b3a7	a0 01		ldy #$01			ldy 	#1
.b3a9	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3ab					_SACopyNewString:
.b3ab	a0 00		ldy #$00			ldy 	#0
.b3ad					_SACopyNSLoop:
.b3ad	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b3af	c8		iny				iny 								; write two on in string storage
.b3b0	c8		iny				iny
.b3b1	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3b3	88		dey				dey 								; this makes it one one.
.b3b4	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b3b6	d0 f5		bne $b3ad			bne 	_SACopyNSLoop
.b3b8	7a		ply				ply
.b3b9	60		rts				rts
.b3ba					_SALengthError:
.b3ba	a9 09		lda #$09		lda	#9
.b3bc	4c 09 97	jmp $9709		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b3bf					StringSystemInitialise:
.b3bf	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b3c1	8d 8e 04	sta $048e			sta 	0+StringMemory
.b3c4	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b3c6	8d 8f 04	sta $048f			sta 	1+StringMemory
.b3c9	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b3cc	60		rts				rts
.b3cd					StringSpaceInitialise:
.b3cd	20 d0 9f	jsr $9fd0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b3d0	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b3d2	8d 90 04	sta $0490			sta 	StringInitialised
.b3d5	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b3d8	8d 91 04	sta $0491			sta 	StringTempPointer
.b3db	ad 8f 04	lda $048f			lda 	StringMemory+1
.b3de	3a		dec a				dec 	a
.b3df	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b3e2	60		rts				rts
.b3e3					StringTempAllocate:
.b3e3	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b3e5	b0 35		bcs $b41c			bcs 	_STALength
.b3e7	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b3ea	30 05		bmi $b3f1			bmi 	_STAAllocate
.b3ec	48		pha				pha 								; save value to subtract.
.b3ed	20 cd b3	jsr $b3cd			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b3f0	68		pla				pla 								; restore it
.b3f1					_STAAllocate:
.b3f1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b3f3	18		clc				clc  								; deliberate allows one more
.b3f4	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b3f7	8d 91 04	sta $0491			sta 	StringTempPointer
.b3fa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b3fd	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b3ff	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b402	69 ff		adc #$ff			adc 	#$FF
.b404	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b407	85 3d		sta $3d				sta 	zsTemp+1
.b409	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b40c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b40f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b412	a9 10		lda #$10			lda 	#NSTString
.b414	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b417	a9 00		lda #$00			lda 	#0 							; clear the target string
.b419	92 3c		sta ($3c)			sta 	(zsTemp)
.b41b	60		rts				rts
.b41c					_STALength:
.b41c	a9 09		lda #$09		lda	#9
.b41e	4c 09 97	jmp $9709		jmp	ErrorHandler
.b421					StringTempWrite:
.b421	48		pha				pha
.b422	92 3c		sta ($3c)			sta 	(zsTemp)
.b424	e6 3c		inc $3c				inc 	zsTemp
.b426	d0 02		bne $b42a			bne 	_STWNoCarry
.b428	e6 3d		inc $3d				inc 	zsTemp+1
.b42a					_STWNoCarry:
.b42a	a9 00		lda #$00			lda 	#0
.b42c	92 3c		sta ($3c)			sta 	(zsTemp)
.b42e	68		pla				pla
.b42f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a3e7					BackloadProgram:
.a3e7	a2 ff		ldx #$ff			ldx 	#$FF
.a3e9	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a3ec	20 16 a4	jsr $a416			jsr 	BLReadByte
.a3ef	30 1e		bmi $a40f			bmi 	_BPExit
.a3f1					_BPCopy:
.a3f1	e8		inx				inx  								; copy byte in
.a3f2	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a3f5	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a3f8	20 16 a4	jsr $a416			jsr 	BLReadByte 					; read next byte
.a3fb	30 0a		bmi $a407			bmi 	_BPEndLine 					; -ve = EOL
.a3fd	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a3ff	d0 02		bne $a403			bne 	_BPNotTab
.a401	a9 20		lda #$20			lda 	#' '
.a403					_BPNotTab:
.a403	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a405	b0 ea		bcs $a3f1			bcs 	_BPCopy
.a407					_BPEndLine:
.a407	20 c0 a7	jsr $a7c0			jsr 	TokeniseLine 				; tokenise the line.
.a40a	20 e5 8b	jsr $8be5			jsr 	EditProgramCode
.a40d	80 d8		bra $a3e7			bra 	BackloadProgram
.a40f					_BPExit:
.a40f	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a412	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear variables etc.
.a415	60		rts				rts
.a416					BLReadByte:
.a416					_BLLoad:
.a416	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a419	ee 17 a4	inc $a417			inc 	_BLLoad+1
.a41c	d0 03		bne $a421			bne 	_BLNoCarry
.a41e	ee 18 a4	inc $a418			inc 	_BLLoad+2
.a421					_BLNoCarry:
.a421	c9 00		cmp #$00			cmp 	#0
.a423	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a424					TokeniseSearchTable:
.a424	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a426	85 36		sta $36				sta 	zTemp0
.a428	a0 00		ldy #$00			ldy 	#0
.a42a	a9 80		lda #$80			lda 	#$80 						; token #
.a42c	85 38		sta $38				sta 	zTemp1
.a42e					_TSTLoop:
.a42e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a430	30 49		bmi $a47b			bmi 	_TSTFail 					; -ve = end of table
.a432	f0 2e		beq $a462			beq 	_TSTNext 					; zero, check next it's a dummy
.a434	c8		iny				iny 								; get the hash
.a435	b1 36		lda ($36),y			lda 	(zTemp0),y
.a437	88		dey				dey
.a438	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a43b	d0 25		bne $a462			bne 	_TSTNext
.a43d	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a440	38		sec				sec
.a441	ed 80 04	sbc $0480			sbc 	identStart
.a444	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a446	d0 1a		bne $a462			bne 	_TSTNext
.a448	5a		phy				phy 								; save Y , we might fail
.a449	c8		iny				iny 								; point to text
.a44a	c8		iny				iny
.a44b	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a44e					_TSTCompareName:
.a44e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a451	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a453	d0 0c		bne $a461			bne 	_TSTNextPullY 				; fail, pullY and do next
.a455	e8		inx				inx
.a456	c8		iny				iny
.a457	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a45a	d0 f2		bne $a44e			bne 	_TSTCompareName
.a45c	7a		ply				ply 								; throw Y
.a45d	a5 38		lda $38				lda 	zTemp1 						; get token #
.a45f	38		sec				sec 								; return with CS = passed.
.a460	60		rts				rts
.a461					_TSTNextPullY:
.a461	7a		ply				ply 								; restore current, fall through.
.a462					_TSTNext:
.a462	e6 38		inc $38				inc 	zTemp1 						; token counter
.a464	98		tya				tya
.a465	18		clc				clc
.a466	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a468	1a		inc a				inc 	a 							; +1
.a469	1a		inc a				inc 	a 							; +2
.a46a	a8		tay				tay
.a46b	10 c1		bpl $a42e			bpl 	_TSTLoop 					; if Y < $80 loop back
.a46d	98		tya				tya 								; add Y to zTemp0 and reset Y
.a46e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a470	18		clc				clc  								; but have tables > 255 bytes
.a471	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a473	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a475	90 b7		bcc $a42e			bcc 	_TSTLoop
.a477	e6 37		inc $37				inc 	zTemp0+1
.a479	80 b3		bra $a42e			bra 	_TSTLoop
.a47b					_TSTFail:
.a47b	18		clc				clc
.a47c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a47d					KeywordSet0:
>a47d	00 65					.text	0,$65,""               ; $80 !0:EOF
>a47f	00 58					.text	0,$58,""               ; $81 !1:SH1
>a481	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a483	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a489	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a491	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a497	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a49e	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a4a6	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a4ad	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a4b4	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a4ba	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a4c2	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a4ca	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a4d0	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a4d7	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a4dd	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a4e2	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a4e6	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a4ee	28
>a4ef	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a4f7	28
>a4f8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a4fe	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a504	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a50a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a511	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a519	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a51f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a525	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a52a	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a52e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a534	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a53c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a543	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a54a	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a552	43
>a553	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a559	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a55f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a566	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a56c	02 9b 42 59				.text	2,$9b,"BY"             ; $a6 BY
>a570	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a7 CALL
>a576	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a8 CIRCLE
>a57e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $a9 CLEAR
>a585	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $aa CLS
>a58a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ab COLOR
>a591	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ac COLOUR
>a599	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ad DATA
>a59f	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ae DIM
>a5a4	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $af DOWNTO
>a5ac	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b0 ELSE
>a5b2	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b1 GFX
>a5b7	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b2 GOSUB
>a5be	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b3 GOTO
>a5c4	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b4 HERE
>a5ca	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b5 IMAGE
>a5d1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b6 LET
>a5d6	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b7 LINE
>a5dc	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b8 LOCAL
>a5e3	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b9 OUTLINE
>a5eb	45
>a5ec	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ba PRINT
>a5f3	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $bb READ
>a5f9	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $bc RECT
>a5ff	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bd REM
>a604	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $be RETURN
>a60c	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $bf SOLID
>a613	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c0 SPRITE
>a61b	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c1 TEXT
>a621	02 a3 54 4f				.text	2,$a3,"TO"             ; $c2 TO
>a625	ff					.text	$FF
.a626					KeywordSet1:
>a626	00 65					.text	0,$65,""               ; $80 !0:EOF
>a628	00 58					.text	0,$58,""               ; $81 !1:SH1
>a62a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a62c	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a634	4c 45
>a636	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a63e	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a646	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a64b	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a651	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a656	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a65e	45
>a65f	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a664	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a66c	53
>a66d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a673	ff					.text	$FF
.a674					KeywordSet2:
>a674	00 65					.text	0,$65,""               ; $80 !0:EOF
>a676	00 58					.text	0,$58,""               ; $81 !1:SH1
>a678	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a67a	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a67f	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a684	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a689	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a68e	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a693	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a698	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a69d	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a6a2	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a6a7	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a6ac	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a6b1	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a6b6	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a6bb	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a6c0	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a6c5	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a6ca	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a6cf	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a6d4	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a6d9	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a6de	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a6e3	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a6e8	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a6ed	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a6f2	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a6f7	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a6fc	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a701	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a706	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a70b	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a710	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a715	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a71a	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a71f	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a724	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a729	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a72e	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a733	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a738	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a73d	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a742	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a747	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a74c	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a751	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a756	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a75b	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a760	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a765	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a76a	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a76f	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a774	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a779	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a77e	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a783	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a788	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a78d	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a792	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a797	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a79c	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a7a1	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a7a6	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a7ab	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a7b0	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a7b5	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a7ba	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a7bf	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a7c0					TokeniseLine:
.a7c0	20 48 a9	jsr $a948			jsr 	FixLineBufferCase 			; fix line case
.a7c3	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a7c5	8d a6 04	sta $04a6			sta 	tokenOffset
.a7c8	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a7cb	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a7ce	a2 ff		ldx #$ff			ldx 	#$FF
.a7d0					_TKFindFirst:
.a7d0	e8		inx				inx
.a7d1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a7d4	f0 79		beq $a84f			beq 	_TKExit
.a7d6	c9 20		cmp #$20			cmp 	#' '
.a7d8	90 f6		bcc $a7d0			bcc 	_TKFindFirst
.a7da	c9 30		cmp #$30			cmp 	#'0'
.a7dc	90 07		bcc $a7e5			bcc 	_TKNoLineNumber
.a7de	c9 3a		cmp #$3a			cmp 	#'9'+1
.a7e0	b0 03		bcs $a7e5			bcs 	_TKNoLineNumber
.a7e2	20 72 a9	jsr $a972			jsr 	TokeniseExtractLineNumber
.a7e5					_TKNoLineNumber:
.a7e5					_TKTokeniseLoop:
.a7e5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a7e8	f0 65		beq $a84f			beq 	_TKExit
.a7ea	e8		inx				inx
.a7eb	c9 20		cmp #$20			cmp 	#' '
.a7ed	f0 f6		beq $a7e5			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a7ef	ca		dex				dex 								; undo last get, A contains character, X is position.
.a7f0	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a7f2	f0 61		beq $a855			beq 	_TKTokeniseIdentifier
.a7f4	c9 41		cmp #$41			cmp 	#'A'
.a7f6	90 04		bcc $a7fc			bcc 	_TKTokenisePunctuation
.a7f8	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a7fa	90 59		bcc $a855			bcc 	_TKTokeniseIdentifier
.a7fc					_TKTokenisePunctuation:
.a7fc	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a7fe	f0 27		beq $a827			beq 	_TKString
.a800	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a802	f0 28		beq $a82c			beq 	_TKHexConstant
.a804	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a806	f0 29		beq $a831			beq 	_TKCheckDouble
.a808	c9 3e		cmp #$3e			cmp 	#'>'
.a80a	f0 25		beq $a831			beq 	_TKCheckDouble
.a80c					_TKStandardPunctuation:
.a80c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a80f	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a811	90 0e		bcc $a821			bcc 	_TKNoShift
.a813	48		pha				pha 								; save
.a814	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a816	85 36		sta $36				sta 	zTemp0
.a818	68		pla				pla
.a819	29 20		and #$20			and 	#32 						; bit 5
.a81b	4a		lsr a				lsr 	a 							; shift into bit 3
.a81c	4a		lsr a				lsr 	a
.a81d	05 36		ora $36				ora 	zTemp0
.a81f	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a821					_TKNoShift:
.a821	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte 			; write the punctuation character
.a824	e8		inx				inx 								; consume the character
.a825	80 be		bra $a7e5			bra 	_TKTokeniseLoop 			; and loop round again.
.a827					_TKString:
.a827	20 d7 a8	jsr $a8d7			jsr 	TokeniseString
.a82a	80 b9		bra $a7e5			bra 	_TKTokeniseLoop
.a82c					_TKHexConstant:
.a82c	20 12 a9	jsr $a912			jsr 	TokeniseHexConstant
.a82f	80 b4		bra $a7e5			bra 	_TKTokeniseLoop
.a831					_TKCheckDouble:
.a831	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a834	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a836	90 d4		bcc $a80c			bcc 	_TKStandardPunctuation
.a838	c9 3f		cmp #$3f			cmp 	#'>'+1
.a83a	b0 d0		bcs $a80c			bcs 	_TKStandardPunctuation
.a83c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a83f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a841	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a842	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a845	38		sec				sec
.a846	e9 3c		sbc #$3c			sbc 	#'<'
.a848	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a84b	e8		inx				inx 								; consume both
.a84c	e8		inx				inx
.a84d	80 96		bra $a7e5			bra 	_TKTokeniseLoop
.a84f	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a851	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.a854	60		rts				rts
.a855					_TKTokeniseIdentifier:
.a855	8e 80 04	stx $0480			stx 	identStart 					; save start
.a858	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a85b					_TKCheckLoop:
.a85b	e8		inx				inx 								; look at next, we know first is identifier.
.a85c	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a85f	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a861	f0 f8		beq $a85b			beq 	_TKCheckLoop
.a863	c9 30		cmp #$30			cmp	 	#"0"
.a865	90 0c		bcc $a873			bcc 	_TKEndIdentifier
.a867	c9 3a		cmp #$3a			cmp 	#"9"+1
.a869	90 f0		bcc $a85b			bcc 	_TKCheckLoop
.a86b	c9 41		cmp #$41			cmp	 	#"A"
.a86d	90 04		bcc $a873			bcc 	_TKEndIdentifier
.a86f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a871	90 e8		bcc $a85b			bcc 	_TKCheckLoop
.a873					_TKEndIdentifier:
.a873	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a876	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a878	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a87a	f0 06		beq $a882			beq 	_TKHasTypeCharacter
.a87c	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a87e	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a880	d0 07		bne $a889			bne 	_TKNoTypeCharacter
.a882					_TKHasTypeCharacter:
.a882	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a885	e8		inx				inx 								; read next
.a886	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a889					_TKNoTypeCharacter:
.a889	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a88b	d0 09		bne $a896			bne 	_TKNoArray
.a88d	e8		inx				inx 								; skip the (
.a88e	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a891	09 04		ora #$04			ora 	#$04
.a893	8d 84 04	sta $0484			sta 	identTypeByte
.a896					_TKNoArray:
.a896	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a899	20 33 a9	jsr $a933			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a89c	a0 a4		ldy #$a4			ldy 	#(KeywordSet0) >> 8
.a89e	a9 7d		lda #$7d			lda 	#(KeywordSet0) & $FF
.a8a0	20 24 a4	jsr $a424			jsr 	TokeniseSearchTable
.a8a3	a2 00		ldx #$00			ldx 	#0
.a8a5	b0 1f		bcs $a8c6			bcs 	_TKFoundToken
.a8a7	a0 a6		ldy #$a6			ldy 	#(KeywordSet1) >> 8
.a8a9	a9 26		lda #$26			lda 	#(KeywordSet1) & $FF
.a8ab	20 24 a4	jsr $a424			jsr 	TokeniseSearchTable
.a8ae	a2 81		ldx #$81			ldx 	#$81
.a8b0	b0 14		bcs $a8c6			bcs 	_TKFoundToken
.a8b2	a0 a6		ldy #$a6			ldy 	#(KeywordSet2) >> 8
.a8b4	a9 74		lda #$74			lda 	#(KeywordSet2) & $FF
.a8b6	20 24 a4	jsr $a424			jsr 	TokeniseSearchTable
.a8b9	a2 82		ldx #$82			ldx 	#$82
.a8bb	b0 09		bcs $a8c6			bcs 	_TKFoundToken
.a8bd	20 c3 a9	jsr $a9c3			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a8c0	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a8c3	4c e5 a7	jmp $a7e5			jmp 	_TKTokeniseLoop 			; and go round again.
.a8c6					_TKFoundToken:
.a8c6	48		pha				pha 								; save token
.a8c7	8a		txa				txa 								; shift in X, is there one ?
.a8c8	f0 03		beq $a8cd			beq 	_TKNoTShift
.a8ca	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte 			; if so, write it out
.a8cd					_TKNoTShift:
.a8cd	68		pla				pla 								; restore and write token
.a8ce	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.a8d1	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a8d4	4c e5 a7	jmp $a7e5			jmp 	_TKTokeniseLoop 			; and go round again.
.a8d7					TokeniseString:
.a8d7	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a8d9	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.a8dc	e8		inx				inx									; start of quoted string.
.a8dd	da		phx				phx 								; push start of string on top
.a8de	ca		dex				dex
.a8df					_TSFindEnd:
.a8df	e8		inx				inx
.a8e0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a8e3	f0 04		beq $a8e9			beq 	_TSEndOfString
.a8e5	c9 22		cmp #$22			cmp 	#'"'
.a8e7	d0 f6		bne $a8df			bne 	_TSFindEnd
.a8e9					_TSEndOfString:
.a8e9	7a		ply				ply  								; so now Y is first character, X is character after end.
.a8ea	48		pha				pha 								; save terminating character
.a8eb	20 f3 a8	jsr $a8f3			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a8ee	68		pla				pla 								; terminating character
.a8ef	f0 01		beq $a8f2			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a8f1	e8		inx				inx
.a8f2					_TSNotQuote:
.a8f2	60		rts				rts
.a8f3					TOWriteBlockXY:
.a8f3	86 36		stx $36				stx 	zTemp0 						; write end character
.a8f5	98		tya				tya
.a8f6	49 ff		eor #$ff			eor 	#$FF
.a8f8	38		sec				sec
.a8f9	65 36		adc $36				adc 	zTemp0
.a8fb	1a		inc a				inc 	a 							; one extra for NULL
.a8fc	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.a8ff					_TOBlockLoop:
.a8ff	c4 36		cpy $36				cpy 	zTemp0
.a901	f0 09		beq $a90c			beq 	_TOBlockExit
.a903	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a906	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.a909	c8		iny				iny
.a90a	80 f3		bra $a8ff			bra 	_TOBlockLoop
.a90c					_TOBlockExit:
.a90c	a9 00		lda #$00			lda 	#0
.a90e	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.a911	60		rts				rts
.a912					TokeniseHexConstant:
.a912	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a914	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.a917	e8		inx				inx									; start of quoted string.
.a918	da		phx				phx 								; push start of constant on top
.a919	ca		dex				dex
.a91a					_THFindLoop:
.a91a	e8		inx				inx
.a91b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a91e	c9 30		cmp #$30			cmp 	#"0"
.a920	90 0c		bcc $a92e			bcc 	_THFoundEnd
.a922	c9 3a		cmp #$3a			cmp 	#"9"+1
.a924	90 f4		bcc $a91a			bcc 	_THFindLoop
.a926	c9 41		cmp #$41			cmp 	#"A"
.a928	90 04		bcc $a92e			bcc 	_THFoundEnd
.a92a	c9 47		cmp #$47			cmp 	#"F"+1
.a92c	90 ec		bcc $a91a			bcc 	_THFindLoop
.a92e					_THFoundEnd:
.a92e	7a		ply				ply 								; restore start
.a92f	20 f3 a8	jsr $a8f3			jsr 	TOWriteBlockXY 				; output the block
.a932	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a933					TokeniseCalculateHash:
.a933	da		phx				phx
.a934	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a937	a9 00		lda #$00			lda 	#0
.a939					_TCHLoop:
.a939	18		clc				clc
.a93a	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a93d	e8		inx				inx
.a93e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a941	d0 f6		bne $a939			bne 	_TCHLoop
.a943	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a946	fa		plx				plx
.a947	60		rts				rts
.a948					FixLineBufferCase:
.a948	a2 00		ldx #$00			ldx 	#0
.a94a					_FLBCLoop:
.a94a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a94d	f0 22		beq $a971			beq 	_FLBCExit 					; end of string.
.a94f	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a951	f0 11		beq $a964			beq 	_FLBCInQuotes
.a953	e8		inx				inx
.a954	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a956	90 f2		bcc $a94a			bcc 	_FLBCLoop
.a958	c9 7b		cmp #$7b			cmp 	#'z'+1
.a95a	b0 ee		bcs $a94a			bcs 	_FLBCLoop
.a95c	38		sec				sec 								; make U/C
.a95d	e9 20		sbc #$20			sbc 	#32
.a95f	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a962	80 e6		bra $a94a			bra 	_FLBCLoop
.a964					_FLBCInQuotes:
.a964	e8		inx				inx 								; advance
.a965	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a968	f0 07		beq $a971			beq 	_FLBCExit 					; exit on EOS
.a96a	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a96c	d0 f6		bne $a964			bne 	_FLBCInQuotes
.a96e	e8		inx				inx 								; skip over it
.a96f	80 d9		bra $a94a			bra 	_FLBCLoop
.a971					_FLBCExit:
.a971	60		rts				rts
.a972					TokeniseExtractLineNumber:
.a972	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a975	48		pha				pha
.a976	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a979	48		pha				pha
.a97a	20 b0 a9	jsr $a9b0			jsr 	_TELNTimes2 				; line # x 4
.a97d	20 b0 a9	jsr $a9b0			jsr 	_TELNTimes2 				; line # x 2
.a980	18		clc				clc 								; add stacked value
.a981	68		pla				pla
.a982	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a985	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a988	68		pla				pla
.a989	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a98c	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a98f	20 b0 a9	jsr $a9b0			jsr 	_TELNTimes2 				; line # x 10
.a992	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a995	e8		inx				inx
.a996	29 0f		and #$0f			and 	#15 						; add to line #
.a998	18		clc				clc
.a999	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a99c	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a99f	90 03		bcc $a9a4			bcc 	_TLENNoCarry
.a9a1	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a9a4					_TLENNoCarry:
.a9a4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a9a7	c9 30		cmp #$30			cmp 	#'0'
.a9a9	90 04		bcc $a9af			bcc 	_TLENExit
.a9ab	c9 3a		cmp #$3a			cmp 	#'9'+1
.a9ad	90 c3		bcc $a972			bcc 	TokeniseExtractLineNumber
.a9af					_TLENExit:
.a9af	60		rts				rts
.a9b0					_TELNTimes2:
.a9b0	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a9b3	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a9b6	60		rts				rts
.a9b7					TokeniseWriteByte:
.a9b7	da		phx				phx
.a9b8	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a9bb	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a9be	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a9c1	fa		plx				plx
.a9c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a9c3					CheckCreateVariableRecord:
.a9c3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a9c5	85 36		sta $36				sta 	0+zTemp0
.a9c7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a9c9	85 37		sta $37				sta 	1+zTemp0
.a9cb					_CCVSearch:
.a9cb	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a9cd	f0 2c		beq $a9fb			beq 	_CCVFail
.a9cf	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a9d1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a9d3	cd 83 04	cmp $0483			cmp 	identHash
.a9d6	d0 16		bne $a9ee			bne 	_CCVNext
.a9d8	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a9da	ae 80 04	ldx $0480			ldx 	identStart
.a9dd					_CCVCompare:
.a9dd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a9e0	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a9e2	e8		inx				inx 								; advance pointers
.a9e3	c8		iny				iny
.a9e4	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a9e5	d0 07		bne $a9ee			bne 	_CCVNext  					; didn't match go to next.
.a9e7	90 f4		bcc $a9dd			bcc 	_CCVCompare 				; not finished yet.
.a9e9	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a9ec	f0 41		beq $aa2f			beq 	_CCVFound 					; yes, we were successful
.a9ee					_CCVNext:
.a9ee	18		clc				clc
.a9ef	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a9f1	65 36		adc $36				adc 	zTemp0
.a9f3	85 36		sta $36				sta 	zTemp0
.a9f5	90 d4		bcc $a9cb			bcc 	_CCVSearch
.a9f7	e6 37		inc $37				inc 	zTemp0+1
.a9f9	80 d0		bra $a9cb			bra 	_CCVSearch
.a9fb					_CCVFail:
.a9fb	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a9fd	ad 83 04	lda $0483			lda 	identHash
.aa00	91 36		sta ($36),y			sta 	(zTemp0),y
.aa02	c8		iny				iny 								; offset 2 is the type byte
.aa03	ad 84 04	lda $0484			lda 	identTypeByte
.aa06	91 36		sta ($36),y			sta 	(zTemp0),y
.aa08	c8		iny				iny
.aa09					_CCVData:
.aa09	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.aa0b	91 36		sta ($36),y			sta 	(zTemp0),y
.aa0d	c8		iny				iny
.aa0e	c0 08		cpy #$08			cpy 	#8
.aa10	90 f7		bcc $aa09			bcc 	_CCVData
.aa12	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.aa15					_CCVCopyName:
.aa15	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa18	91 36		sta ($36),y			sta 	(zTemp0),y
.aa1a	e8		inx				inx
.aa1b	c8		iny				iny
.aa1c	ec 82 04	cpx $0482			cpx 	identTypeEnd
.aa1f	d0 f4		bne $aa15			bne 	_CCVCopyName
.aa21	98		tya				tya 								; patch offset
.aa22	92 36		sta ($36)			sta 	(zTemp0)
.aa24	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.aa26	91 36		sta ($36),y			sta 	(zTemp0),y
.aa28	88		dey				dey
.aa29	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.aa2b	09 80		ora #$80			ora 	#$80
.aa2d	91 36		sta ($36),y			sta 	(zTemp0),y
.aa2f					_CCVFound:
.aa2f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.aa31	38		sec				sec
.aa32	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aa34	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aa36	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.aa39	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.aa3b	20 b7 a9	jsr $a9b7			jsr 	TokeniseWriteByte
.aa3e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
