
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Sep 28 21:36:02 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					decimalCount:
>0706							.fill 	1
.0707					tokenOffset:
>0707							.fill 	1
.0708					tokenLineNumber:
>0708							.fill 	2
.070a					tokenBuffer:
>070a							.fill 	253
.0807					lineBuffer:
>0807							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b					KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c					KWD_HEXDOLLARLPAREN                  = $8c; $8c HEX$(
=$8d					KWD_INTLPAREN                        = $8d; $8d INT(
=$8e					KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOT                              = $92; $92 NOT
=$93					KWD_PAGE                             = $93; $93 PAGE
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_UNTIL                            = $a3; $a3 UNTIL
=$a4					KWD_WEND                             = $a4; $a4 WEND
=$a5					KWD_CALL                             = $a5; $a5 CALL
=$a6					KWD_CLS                              = $a6; $a6 CLS
=$a7					KWD_DATA                             = $a7; $a7 DATA
=$a8					KWD_DIM                              = $a8; $a8 DIM
=$a9					KWD_GOSUB                            = $a9; $a9 GOSUB
=$aa					KWD_GOTO                             = $aa; $aa GOTO
=$ab					KWD_LET                              = $ab; $ab LET
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_THEN                             = $b0; $b0 THEN
=$b1					KWD_TO                               = $b1; $b1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a4					KWC_LAST_STRUCTURE = $a4
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 5a 81	jsr $815a			jsr 	NewCommand 					; erase current program
.8006	20 1e 88	jsr $881e			jsr 	BackloadProgram
.8009	4c 71 81	jmp $8171			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.8011	80 fe		bra $8011	halt:	bra 	halt
.8013					ErrorHandler:
>8013	db						.byte 	$DB 						; causes a break in the emulator
.8014	4c 13 80	jmp $8013			jmp 	ErrorHandler
>8017							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8018					VectorSetPunc:
>8018	f6 81					.word	ShiftLeft                        ; $00 <<
>801a	01 8d					.word	BinaryCompareLessEqual           ; $01 <=
>801c	f7 8c					.word	BinaryCompareNotEqual            ; $02 <>
>801e	2f 90					.word	SyntaxError                      ; $03 !!3
>8020	2f 90					.word	SyntaxError                      ; $04 ><
>8022	0b 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8024	f9 81					.word	ShiftRight                       ; $06 >>
>8026	2f 90					.word	SyntaxError                      ; $07 !!7
>8028	2f 90					.word	SyntaxError                      ; $08 !!8
>802a	2f 90					.word	SyntaxError                      ; $09 !!9
>802c	2f 90					.word	SyntaxError                      ; $0a !!10
>802e	2f 90					.word	SyntaxError                      ; $0b !!11
>8030	2f 90					.word	SyntaxError                      ; $0c !!12
>8032	2f 90					.word	SyntaxError                      ; $0d !!13
>8034	2f 90					.word	SyntaxError                      ; $0e !!14
>8036	2f 90					.word	SyntaxError                      ; $0f !!15
>8038	2f 90					.word	SyntaxError                      ; $10 @
>803a	2f 90					.word	SyntaxError                      ; $11 !!17
>803c	2f 90					.word	SyntaxError                      ; $12 !!18
>803e	2f 90					.word	SyntaxError                      ; $13 [
>8040	67 8d					.word	IntegerDivide                    ; $14 \
>8042	2f 90					.word	SyntaxError                      ; $15 ]
>8044	7c 83					.word	EorInteger                       ; $16 ^
>8046	2f 90					.word	SyntaxError                      ; $17 _
>8048	2f 90					.word	SyntaxError                      ; $18 `
>804a	2f 90					.word	SyntaxError                      ; $19 !!25
>804c	2f 90					.word	SyntaxError                      ; $1a !!26
>804e	2f 90					.word	SyntaxError                      ; $1b {
>8050	37 83					.word	OraInteger                       ; $1c |
>8052	2f 90					.word	SyntaxError                      ; $1d }
>8054	2f 90					.word	SyntaxError                      ; $1e ~
>8056	2f 90					.word	SyntaxError                      ; $1f [7m<7F>[m
>8058	2f 90					.word	SyntaxError                      ; $20
>805a	2f 90					.word	SyntaxError                      ; $21 !
>805c	2f 90					.word	SyntaxError                      ; $22 "
>805e	2f 90					.word	SyntaxError                      ; $23 #
>8060	2f 90					.word	SyntaxError                      ; $24 $
>8062	b3 8d					.word	IntegerModulus                   ; $25 %
>8064	f2 82					.word	AndInteger                       ; $26 &
>8066	2f 90					.word	SyntaxError                      ; $27 '
>8068	2f 90					.word	SyntaxError                      ; $28 (
>806a	2f 90					.word	SyntaxError                      ; $29 )
>806c	27 8e					.word	MulInteger                       ; $2a *
>806e	8c 82					.word	AddInteger                       ; $2b +
>8070	2f 90					.word	SyntaxError                      ; $2c ,
>8072	c7 82					.word	SubInteger                       ; $2d -
>8074	2f 90					.word	SyntaxError                      ; $2e .
>8076	63 8f					.word	FDivideCommand                   ; $2f /
>8078	2f 90					.word	SyntaxError                      ; $30 0
>807a	2f 90					.word	SyntaxError                      ; $31 1
>807c	2f 90					.word	SyntaxError                      ; $32 2
>807e	2f 90					.word	SyntaxError                      ; $33 3
>8080	2f 90					.word	SyntaxError                      ; $34 4
>8082	2f 90					.word	SyntaxError                      ; $35 5
>8084	2f 90					.word	SyntaxError                      ; $36 6
>8086	2f 90					.word	SyntaxError                      ; $37 7
>8088	2f 90					.word	SyntaxError                      ; $38 8
>808a	2f 90					.word	SyntaxError                      ; $39 9
>808c	2f 90					.word	SyntaxError                      ; $3a :
>808e	2f 90					.word	SyntaxError                      ; $3b ;
>8090	e3 8c					.word	BinaryCompareLess                ; $3c <
>8092	d9 8c					.word	BinaryCompareEqual               ; $3d =
>8094	ed 8c					.word	BinaryCompareGreater             ; $3e >
>8096	2f 90					.word	SyntaxError                      ; $3f ?
.8098					VectorSet0:
>8098	a8 81					.word	EOLCommand                       ; $80 !0:EOF
>809a	b5 81					.word	Shift1Command                    ; $81 !1:SH1
>809c	2f 90					.word	SyntaxError                      ; $82 !2:SH2
>809e	2f 90					.word	SyntaxError                      ; $83 ABS(
>80a0	2f 90					.word	SyntaxError                      ; $84 ALLOC(
>80a2	2f 90					.word	SyntaxError                      ; $85 ASC(
>80a4	2f 90					.word	SyntaxError                      ; $86 CHR$(
>80a6	2f 90					.word	SyntaxError                      ; $87 DEC(
>80a8	d5 8c					.word	UnaryFalse                       ; $88 FALSE
>80aa	2f 90					.word	SyntaxError                      ; $89 FRAC(
>80ac	2f 90					.word	SyntaxError                      ; $8a GETDATE$(
>80ae	2f 90					.word	SyntaxError                      ; $8b GETTIME$(
>80b0	2f 90					.word	SyntaxError                      ; $8c HEX$(
>80b2	2f 90					.word	SyntaxError                      ; $8d INT(
>80b4	2f 90					.word	SyntaxError                      ; $8e ISVAL(
>80b6	2f 90					.word	SyntaxError                      ; $8f LEFT$(
>80b8	2f 90					.word	SyntaxError                      ; $90 LEN(
>80ba	2f 90					.word	SyntaxError                      ; $91 MID$(
>80bc	2f 90					.word	SyntaxError                      ; $92 NOT
>80be	2f 90					.word	SyntaxError                      ; $93 PAGE
>80c0	2f 90					.word	SyntaxError                      ; $94 RIGHT$(
>80c2	2f 90					.word	SyntaxError                      ; $95 RND(
>80c4	2f 90					.word	SyntaxError                      ; $96 SGN(
>80c6	2f 90					.word	SyntaxError                      ; $97 SPC(
>80c8	2f 90					.word	SyntaxError                      ; $98 STR$(
>80ca	c9 8c					.word	UnaryTrue                        ; $99 TRUE
>80cc	2f 90					.word	SyntaxError                      ; $9a VAL(
>80ce	2f 90					.word	SyntaxError                      ; $9b FOR
>80d0	2f 90					.word	SyntaxError                      ; $9c IF
>80d2	2f 90					.word	SyntaxError                      ; $9d PROC
>80d4	2f 90					.word	SyntaxError                      ; $9e REPEAT
>80d6	2f 90					.word	SyntaxError                      ; $9f WHILE
>80d8	2f 90					.word	SyntaxError                      ; $a0 ENDIF
>80da	2f 90					.word	SyntaxError                      ; $a1 ENDPROC
>80dc	2f 90					.word	SyntaxError                      ; $a2 NEXT
>80de	2f 90					.word	SyntaxError                      ; $a3 UNTIL
>80e0	2f 90					.word	SyntaxError                      ; $a4 WEND
>80e2	26 81					.word	CallCommand                      ; $a5 CALL
>80e4	2f 90					.word	SyntaxError                      ; $a6 CLS
>80e6	2f 90					.word	SyntaxError                      ; $a7 DATA
>80e8	2f 90					.word	SyntaxError                      ; $a8 DIM
>80ea	2f 90					.word	SyntaxError                      ; $a9 GOSUB
>80ec	2f 90					.word	SyntaxError                      ; $aa GOTO
>80ee	2f 90					.word	SyntaxError                      ; $ab LET
>80f0	2f 90					.word	SyntaxError                      ; $ac PRINT
>80f2	2f 90					.word	SyntaxError                      ; $ad READ
>80f4	64 81					.word	RemCommand                       ; $ae REM
>80f6	2f 90					.word	SyntaxError                      ; $af RETURN
>80f8	2f 90					.word	SyntaxError                      ; $b0 THEN
>80fa	2f 90					.word	SyntaxError                      ; $b1 TO
.80fc					VectorSet1:
>80fc	2f 90					.word	SyntaxError                      ; $80 !0:EOF
>80fe	2f 90					.word	SyntaxError                      ; $81 !1:SH1
>8100	2f 90					.word	SyntaxError                      ; $82 !2:SH2
>8102	18 81					.word	AssertCommand                    ; $83 ASSERT
>8104	32 81					.word	ClearCommand                     ; $84 CLEAR
>8106	57 81					.word	EndCommand                       ; $85 END
>8108	2f 90					.word	SyntaxError                      ; $86 LIST
>810a	5a 81					.word	NewCommand                       ; $87 NEW
>810c	2f 90					.word	SyntaxError                      ; $88 RESTORE
>810e	71 81					.word	CommandRUN                       ; $89 RUN
>8110	2f 90					.word	SyntaxError                      ; $8a STOP
.8112					VectorSet2:
>8112	2f 90					.word	SyntaxError                      ; $80 !0:EOF
>8114	2f 90					.word	SyntaxError                      ; $81 !1:SH1
>8116	2f 90					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8118					AssertCommand:
.8118	20 08 87	jsr $8708			jsr 	EvaluateInteger 			; the assert test
.811b	20 be 87	jsr $87be			jsr 	NSMIsZero 					; exit if result is non zero.
.811e	d0 05		bne $8125			bne 	_ACExit
.8120	a9 0a		lda #$0a		lda	#10
.8122	4c 13 80	jmp $8013		jmp	ErrorHandler
.8125					_ACExit:
.8125	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8126					CallCommand:
.8126	20 1d 87	jsr $871d			jsr 	Evaluate16BitInteger
.8129	ad 10 06	lda $0610			lda 	NSMantissa1
.812c	8d 09 06	sta $0609			sta 	NSMantissa0+1
.812f	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8132					ClearCommand:
.8132	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8134	85 36		sta $36				sta 	0+zTemp0
.8136	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8138	85 37		sta $37				sta 	1+zTemp0
.813a					_ClearZeroLoop:
.813a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.813c	f0 18		beq $8156			beq 	_ClearZeroEnd
.813e	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8140	a9 00		lda #$00			lda 	#0
.8142					_ClearOneVariable:
.8142	91 36		sta ($36),y			sta 	(zTemp0),y
.8144	c8		iny				iny
.8145	c0 08		cpy #$08			cpy 	#8
.8147	d0 f9		bne $8142			bne 	_ClearOneVariable
.8149	18		clc				clc 								; go to the next variable
.814a	b2 36		lda ($36)			lda 	(zTemp0)
.814c	65 36		adc $36				adc 	zTemp0
.814e	85 36		sta $36				sta 	zTemp0
.8150	90 e8		bcc $813a			bcc 	_ClearZeroLoop
.8152	e6 37		inc $37				inc 	zTemp0+1
.8154	80 e4		bra $813a			bra 	_ClearZeroLoop
.8156					_ClearZeroEnd:
.8156	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8157					EndCommand:
.8157	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.815a					NewCommand:
.815a	20 cb 87	jsr $87cb			jsr 	MemoryNew
.815d	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8160	20 32 81	jsr $8132			jsr 	ClearCommand 				; clear everything.
.8163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8164					RemCommand:
.8164	b1 30		lda ($30),y			lda 	(codePtr),y
.8166	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8168	d0 06		bne $8170			bne 	_RMExit
.816a	c8		iny				iny
.816b	98		tya				tya
.816c	38		sec				sec
.816d	71 30		adc ($30),y			adc 	(codePtr),y
.816f	a8		tay				tay
.8170					_RMExit:
.8170	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8171					CommandRUN:
.8171	20 32 81	jsr $8132			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8174	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8176	85 30		sta $30				sta 	codePtr
.8178	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.817a	85 31		sta $31				sta 	codePtr+1
.817c					RUNNewLine:
.817c	b2 30		lda ($30)			lda 	(codePtr)
.817e	f0 25		beq $81a5			beq 	CRNoProgram         		; no then END.
.8180	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8182	9a		txs				txs
.8183					RUNCodePointerLine:
.8183	a0 02		ldy #$02			ldy 	#2 							; start of program
.8185					_CRIncMainLoop:
.8185	c8		iny				iny
.8186					_CRMainLoop:
.8186	b1 30		lda ($30),y			lda 	(codePtr),y
.8188	10 10		bpl $819a			bpl 	_CRNotKeyword
.818a	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.818c	b0 04		bcs $8192			bcs 	_CRIsKeyword
.818e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8190	b0 0d		bcs $819f			bcs		_CRSyntaxError
.8192					_CRIsKeyword:
.8192	c8		iny				iny 								; consume command
.8193	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8194	aa		tax				tax 								; put in X for vector jump
.8195	20 a2 81	jsr $81a2			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8198	80 ec		bra $8186			bra 	_CRMainLoop 				; and loop round
.819a					_CRNotKeyword:
.819a	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.819c	f0 e7		beq $8185			beq 	_CRIncMainLoop
>819e	db						.byte 	$DB 						; causes a break in the emulator
.819f					_CRSyntaxError:
.819f	4c 2f 90	jmp $902f			jmp 	SyntaxError
.81a2					_CRCallVector0:
.81a2	7c 98 80	jmp ($8098,x)			jmp 	(VectorSet0,x)
.81a5					CRNoProgram:
.81a5	4c 57 81	jmp $8157			jmp 	EndCommand
.81a8					EOLCommand:
.81a8	18		clc				clc
.81a9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.81ab	65 30		adc $30				adc 	codePtr
.81ad	85 30		sta $30				sta 	codePtr
.81af	90 02		bcc $81b3			bcc 	_CREExit
.81b1	e6 31		inc $31				inc 	codePtr+1
.81b3					_CREExit:
.81b3	80 c7		bra $817c			bra 	RunNewLine
.81b5					Shift1Command:
.81b5	b1 30		lda ($30),y			lda 	(codePtr),y
.81b7	c8		iny				iny
.81b8	0a		asl a				asl 	a
.81b9	aa		tax				tax
.81ba	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8cb0					CheckRightBracket:
.8cb0	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb2	c8		iny				iny
.8cb3	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8cb5	d0 0f		bne $8cc6			bne 	CNAFail
.8cb7	60		rts				rts
.8cb8					CheckComma:
.8cb8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cba	c8		iny				iny
.8cbb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8cbd	d0 07		bne $8cc6			bne 	CNAFail
.8cbf	60		rts				rts
.8cc0					CheckNextA:
.8cc0	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8cc2	d0 02		bne $8cc6			bne 	CNAFail
.8cc4	c8		iny				iny 								; skip character
.8cc5	60		rts				rts 								; and exit
.8cc6					CNAFail:
.8cc6	4c 2f 90	jmp $902f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8cc9					UnaryTrue:
.8cc9	fa		plx				plx
.8cca					ReturnTrue:
.8cca	a9 01		lda #$01			lda 	#1  						; set to 1
.8ccc	20 90 87	jsr $8790			jsr 	NSMSetByte
.8ccf	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8cd1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cd4	60		rts				rts
.8cd5					UnaryFalse:
.8cd5	fa		plx				plx
.8cd6					ReturnFalse:
.8cd6	4c 8e 87	jmp $878e			jmp 	NSMSetZero 					; set it all to zero
.8cd9					BinaryCompareEqual:
.8cd9	fa		plx				plx
.8cda	20 15 8d	jsr $8d15			jsr 	CompareBaseCode
.8cdd	c9 00		cmp #$00			cmp 	#0
.8cdf	f0 e9		beq $8cca			beq 	ReturnTrue
.8ce1	80 f3		bra $8cd6			bra 	ReturnFalse
.8ce3					BinaryCompareLess:
.8ce3	fa		plx				plx
.8ce4	20 15 8d	jsr $8d15			jsr 	CompareBaseCode
.8ce7	c9 ff		cmp #$ff			cmp 	#$FF
.8ce9	f0 df		beq $8cca			beq 	ReturnTrue
.8ceb	80 e9		bra $8cd6			bra 	ReturnFalse
.8ced					BinaryCompareGreater:
.8ced	fa		plx				plx
.8cee	20 15 8d	jsr $8d15			jsr 	CompareBaseCode
.8cf1	c9 01		cmp #$01			cmp 	#1
.8cf3	f0 d5		beq $8cca			beq 	ReturnTrue
.8cf5	80 df		bra $8cd6			bra 	ReturnFalse
.8cf7					BinaryCompareNotEqual:
.8cf7	fa		plx				plx
.8cf8	20 15 8d	jsr $8d15			jsr 	CompareBaseCode
.8cfb	c9 00		cmp #$00			cmp 	#0
.8cfd	d0 cb		bne $8cca			bne 	ReturnTrue
.8cff	80 d5		bra $8cd6			bra 	ReturnFalse
.8d01					BinaryCompareLessEqual:
.8d01	fa		plx				plx
.8d02	20 15 8d	jsr $8d15			jsr 	CompareBaseCode
.8d05	c9 01		cmp #$01			cmp 	#1
.8d07	d0 c1		bne $8cca			bne 	ReturnTrue
.8d09	80 cb		bra $8cd6			bra 	ReturnFalse
.8d0b					BinaryCompareGreaterEqual:
.8d0b	fa		plx				plx
.8d0c	20 15 8d	jsr $8d15			jsr 	CompareBaseCode
.8d0f	c9 ff		cmp #$ff			cmp 	#$FF
.8d11	d0 b7		bne $8cca			bne 	ReturnTrue
.8d13	80 c1		bra $8cd6			bra 	ReturnFalse
.8d15					CompareBaseCode:
.8d15	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; make both values if references.
.8d18	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d1b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d1e	29 10		and #$10			and 	#NSTString
.8d20	d0 36		bne $8d58			bne 	_CBCString
.8d22	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d25	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d28	d0 31		bne $8d5b			bne 	_CBCFloat
.8d2a	20 5e 8d	jsr $8d5e			jsr 	CompareFixMinusZero
.8d2d	e8		inx				inx
.8d2e	20 5e 8d	jsr $8d5e			jsr 	CompareFixMinusZero
.8d31	ca		dex				dex
.8d32	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8d35	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d38	10 0b		bpl $8d45			bpl 	_CDCSameSign
.8d3a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8d3d	30 16		bmi $8d55			bmi 	_CBCLess 					; return $FF
.8d3f					_CBCGreater:
.8d3f	a9 01		lda #$01			lda 	#1
.8d41	60		rts				rts
.8d42					_CBCEqual:
.8d42	a9 00		lda #$00			lda 	#0
.8d44	60		rts				rts
.8d45					_CDCSameSign:
.8d45	20 66 82	jsr $8266			jsr 	SubTopTwoStack 				; unsigned subtract
.8d48	20 be 87	jsr $87be			jsr 	NSMIsZero 					; or the mantissa together
.8d4b	f0 f5		beq $8d42			beq 	_CBCEqual 					; -0 == 0
.8d4d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8d50	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8d53	10 ea		bpl $8d3f			bpl 	_CBCGreater
.8d55					_CBCLess:
.8d55	a9 ff		lda #$ff			lda 	#$FF
.8d57	60		rts				rts
.8d58					_CBCString:
.8d58	4c bd 81	jmp $81bd			jmp 	CompareStrings
.8d5b					_CBCFloat:
.8d5b	4c 49 8f	jmp $8f49			jmp 	CompareFloat
.8d5e					CompareFixMinusZero:
.8d5e	20 be 87	jsr $87be			jsr 	NSMIsZero
.8d61	d0 03		bne $8d66			bne 	_CFXMZNotZero
.8d63	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8d66					_CFXMZNotZero:
.8d66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8d67					IntegerDivide:
.8d67	fa		plx				plx
.8d68	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d6b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d6e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d6f	0a		asl a				asl 	a
.8d70	10 05		bpl $8d77			bpl 	_NotRef
.8d72	48		pha				pha
.8d73	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d76	68		pla				pla
.8d77					_NotRef:
.8d77	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d79	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d7c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d7f	f0 03		beq $8d84			beq 	_IntegerCode 				; if clear, then we have two integers
.8d81	4c 39 90	jmp $9039			jmp 	TypeError 					; anything else, type mismatch.
.8d84					_IntegerCode:
.8d84	20 a6 8d	jsr $8da6			jsr 	CheckDivideZero 			; do div zero check
.8d87	20 dd 8d	jsr $8ddd			jsr 	Int32Divide 				; do the division
.8d8a	20 9a 8e	jsr $8e9a			jsr 	CalculateSign 				; calculate result sign
.8d8d					NSMCopyPlusTwoToZero:
.8d8d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8d90	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d93	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8d96	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d99	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8d9c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d9f	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8da2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8da5	60		rts				rts
.8da6					CheckDivideZero:
.8da6	e8		inx				inx
.8da7	20 be 87	jsr $87be			jsr 	NSMIsZero
.8daa	f0 02		beq $8dae			beq 	_CDVError
.8dac	ca		dex				dex
.8dad	60		rts				rts
.8dae					_CDVError:
.8dae	a9 03		lda #$03		lda	#3
.8db0	4c 13 80	jmp $8013		jmp	ErrorHandler
.8db3					IntegerModulus:
.8db3	fa		plx				plx
.8db4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8db7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8dbb	0a		asl a				asl 	a
.8dbc	10 05		bpl $8dc3			bpl 	_NotRef
.8dbe	48		pha				pha
.8dbf	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8dc2	68		pla				pla
.8dc3					_NotRef:
.8dc3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8dc5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8dc8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dcb	f0 03		beq $8dd0			beq 	_IntegerCode 				; if clear, then we have two integers
.8dcd	4c 39 90	jmp $9039			jmp 	TypeError 					; anything else, type mismatch.
.8dd0					_IntegerCode:
.8dd0	20 a6 8d	jsr $8da6			jsr 	CheckDivideZero 			; do div zero check
.8dd3	20 dd 8d	jsr $8ddd			jsr 	Int32Divide 				; do the division
.8dd6	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8dd9	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8ddc	60		rts				rts
.8ddd					Int32Divide:
.8ddd	48		pha				pha 								; save AXY
.8dde	5a		phy				phy
.8ddf	20 65 87	jsr $8765			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8de2	20 8a 87	jsr $878a			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8de5	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8de7					_I32DivideLoop:
.8de7	e8		inx				inx
.8de8	e8		inx				inx
.8de9	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8dec	ca		dex				dex
.8ded	ca		dex				dex
.8dee	20 a4 87	jsr $87a4			jsr 	NSMRotateLeft
.8df1	20 1d 8e	jsr $8e1d			jsr 	DivideCheckSubtract 		; check if subtract possible
.8df4	90 03		bcc $8df9			bcc 	_I32DivideNoCarryIn
.8df6	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8df9					_I32DivideNoCarryIn:
.8df9	88		dey				dey 								; loop round till division completed.
.8dfa	d0 eb		bne $8de7			bne 	_I32DivideLoop
.8dfc	7a		ply				ply 								; restore AXY and exit
.8dfd	68		pla				pla
.8dfe	60		rts				rts
.8dff					Int32ShiftDivide:
.8dff	48		pha				pha 								; save AY
.8e00	5a		phy				phy
.8e01	e8		inx				inx 								; clear S[X+2]
.8e02	e8		inx				inx
.8e03	20 8e 87	jsr $878e			jsr 	NSMSetZero
.8e06	ca		dex				dex
.8e07	ca		dex				dex
.8e08	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8e0a					_I32SDLoop:
.8e0a	20 1d 8e	jsr $8e1d			jsr 	DivideCheckSubtract 		; check if subtract possible
.8e0d	e8		inx				inx
.8e0e	e8		inx				inx
.8e0f	20 a4 87	jsr $87a4			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8e12	ca		dex				dex
.8e13	ca		dex				dex
.8e14	20 a4 87	jsr $87a4			jsr 	NSMRotateLeft
.8e17	88		dey				dey 	 							; do 31 times
.8e18	d0 f0		bne $8e0a			bne 	_I32SDLoop
.8e1a	7a		ply				ply 								; restore AY and exit
.8e1b	68		pla				pla
.8e1c	60		rts				rts
.8e1d					DivideCheckSubtract:
.8e1d	20 66 82	jsr $8266			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8e20	b0 04		bcs $8e26			bcs 	_DCSExit 					; if carry set, then could do, exit
.8e22	20 40 82	jsr $8240			jsr 	AddTopTwoStack 				; add it back in
.8e25	18		clc				clc 								; and return False
.8e26					_DCSExit:
.8e26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8e27					MulInteger:
.8e27	fa		plx				plx
.8e28	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e2b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e2e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e2f	0a		asl a				asl 	a
.8e30	10 05		bpl $8e37			bpl 	_NotRef
.8e32	48		pha				pha
.8e33	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e36	68		pla				pla
.8e37					_NotRef:
.8e37	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e38	30 0b		bmi $8e45			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e3a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e3d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e40	f0 06		beq $8e48			beq 	_IntegerCode 				; if clear, then we have two integers
.8e42	4c 96 8f	jmp $8f96			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8e45					_StringData:
.8e45	4c 43 90	jmp $9043			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8e48					_IntegerCode:
.8e48	20 55 8e	jsr $8e55			jsr 	MultiplyShort
.8e4b	c9 00		cmp #$00			cmp 	#0
.8e4d	f0 05		beq $8e54			beq 	_MIExit
.8e4f	a9 04		lda #$04		lda	#4
.8e51	4c 13 80	jmp $8013		jmp	ErrorHandler
.8e54					_MIExit:
.8e54	60		rts				rts
.8e55					MultiplyShort:
.8e55	5a		phy				phy 								; save Y
.8e56	20 65 87	jsr $8765			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8e59	20 8a 87	jsr $878a			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8e5c	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8e5e					_I32MLoop:
.8e5e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8e61	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8e64	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8e67	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8e6a	f0 28		beq $8e94			beq 	_I32MExit 					; exit if zero
.8e6c	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8e6f	29 01		and #$01			and 	#1
.8e71	f0 0e		beq $8e81			beq 	_I32MNoAdd
.8e73	20 40 82	jsr $8240			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8e76	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8e79	10 06		bpl $8e81			bpl 	_I32MNoAdd
.8e7b					_I32ShiftRight:
.8e7b	20 b1 87	jsr $87b1			jsr 	NSMShiftRight 				; shift S[X] right
.8e7e	c8		iny				iny 								; increment shift count
.8e7f	80 0a		bra $8e8b			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8e81					_I32MNoAdd:
.8e81	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8e84	70 f5		bvs $8e7b			bvs 	_I32ShiftRight 				; instead.
.8e86	e8		inx				inx
.8e87	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8e8a	ca		dex				dex
.8e8b					_I32MShiftUpper:
.8e8b	e8		inx				inx 								; shift S[X+2] right
.8e8c	e8		inx				inx
.8e8d	20 b1 87	jsr $87b1			jsr 	NSMShiftRight
.8e90	ca		dex				dex
.8e91	ca		dex				dex
.8e92	80 ca		bra $8e5e			bra 	_I32MLoop 					; try again.
.8e94					_I32MExit:
.8e94	20 9a 8e	jsr $8e9a			jsr 	CalculateSign
.8e97	98		tya				tya 								; shift in A
.8e98	7a		ply				ply 								; restore Y and exit
.8e99	60		rts				rts
.8e9a					CalculateSign:
.8e9a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8e9d	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8ea0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ea3	0a		asl a				asl 	a 							; shift bit 7 into carry
.8ea4	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8ea7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.81bd					CompareStrings:
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.81c0	3d 01 06	and $0601,x			and 	NSStatus+1,x
.81c3	29 10		and #$10			and 	#NSBIsString
.81c5	f0 2c		beq $81f3			beq 	_CSTypeError
.81c7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.81ca	85 36		sta $36				sta 	zTemp0
.81cc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81cf	85 37		sta $37				sta 	zTemp0+1
.81d1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.81d4	85 38		sta $38				sta 	zTemp1
.81d6	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.81d9	85 39		sta $39				sta 	zTemp1+1
.81db	5a		phy				phy 								; save Y so we can access strings
.81dc	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.81de					_CSLoop:
.81de	c8		iny				iny
.81df	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.81e1	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.81e3	d0 06		bne $81eb			bne 	_CSDifferent
.81e5	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.81e7	d0 f5		bne $81de			bne 	_CSLoop 					; still comparing
.81e9					_CSExit:
.81e9	7a		ply				ply 								; reached end, return zero in A from EOS
.81ea	60		rts				rts
.81eb					_CSDifferent:
.81eb	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.81ed	90 fa		bcc $81e9			bcc		_CSExit
.81ef	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.81f1	80 f6		bra $81e9			bra 	_CSExit
.81f3					_CSTypeError:
.81f3	4c 39 90	jmp $9039			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.81f6					ShiftLeft:
.81f6	38		sec				sec
.81f7	80 01		bra $81fa			bra 	ShiftMain
.81f9					ShiftRight:
.81f9	18		clc				clc
.81fa					ShiftMain:
.81fa	fa		plx				plx 								; restore X
.81fb	08		php				php 								; save direction
.81fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.81ff	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8202	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8203	0a		asl a				asl 	a
.8204	10 05		bpl $820b			bpl 	_NotRef
.8206	48		pha				pha
.8207	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.820a	68		pla				pla
.820b					_NotRef:
.820b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.820d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8210	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8213	f0 03		beq $8218			beq 	_IntegerCode 				; if clear, then we have two integers
.8215	4c 39 90	jmp $9039			jmp 	TypeError 					; anything else, type mismatch.
.8218					_IntegerCode:
.8218	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.821b	29 e0		and #$e0			and 	#$E0
.821d	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8220	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8223	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8226	d0 13		bne $823b			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8228					_SMLoop:
.8228	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.822b	30 11		bmi $823e			bmi 	_SMExit 					; exit if done.
.822d	28		plp				plp 								; restore direcition setting
.822e	08		php				php
.822f	90 05		bcc $8236			bcc 	_SMRight
.8231	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; shift left if CS
.8234	80 f2		bra $8228			bra 	_SMLoop
.8236					_SMRight:
.8236	20 b1 87	jsr $87b1			jsr 	NSMShiftRight 				; shift right if CC
.8239	80 ed		bra $8228			bra 	_SMLoop
.823b					_SMExit0:
.823b	20 8e 87	jsr $878e			jsr 	NSMSetZero 					; return zero.
.823e					_SMExit:
.823e	28		plp				plp 								; throw direction
.823f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.8240					AddTopTwoStack:
.8240	18		clc				clc
.8241	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8244	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8247	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.824a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.824d	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8250	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8253	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8256	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8259	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.825c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.825f	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8262	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8265	60		rts				rts
.8266					SubTopTwoStack:
.8266	38		sec				sec
.8267	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.826a	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.826d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8270	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8273	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8276	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8279	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.827c	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.827f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8282	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8285	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8288	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.828b	60		rts				rts
.828c					AddInteger:
.828c	fa		plx				plx
.828d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8290	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8293	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8294	0a		asl a				asl 	a
.8295	10 05		bpl $829c			bpl 	_NotRef
.8297	48		pha				pha
.8298	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.829b	68		pla				pla
.829c					_NotRef:
.829c	0a		asl a				asl 	a 							; put MSB of type into A:7
.829d	30 0b		bmi $82aa			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.829f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82a2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82a5	f0 06		beq $82ad			beq 	_IntegerCode 				; if clear, then we have two integers
.82a7	4c a8 8e	jmp $8ea8			jmp 	FloatingPointAdd 							; otherwise at least one float.
.82aa					_StringData:
.82aa	4c 43 90	jmp $9043			jmp 	NotDoneError							; at least one string - don't know both are strings.
.82ad					_IntegerCode:
.82ad					AddCode:
.82ad	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.82b0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.82b3	10 8b		bpl $8240			bpl 	AddTopTwoStack
.82b5	20 66 82	jsr $8266			jsr 	SubTopTwoStack 				; do a physical subtraction
.82b8	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.82bb	10 09		bpl $82c6			bpl 	_AddExit
.82bd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.82c0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82c3	20 43 87	jsr $8743			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.82c6					_AddExit:
.82c6	60		rts				rts
.82c7					SubInteger:
.82c7	fa		plx				plx
.82c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82cb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82ce	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82cf	0a		asl a				asl 	a
.82d0	10 05		bpl $82d7			bpl 	_NotRef
.82d2	48		pha				pha
.82d3	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82d6	68		pla				pla
.82d7					_NotRef:
.82d7	0a		asl a				asl 	a 							; put MSB of type into A:7
.82d8	30 0b		bmi $82e5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82da	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82dd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82e0	f0 06		beq $82e8			beq 	_IntegerCode 				; if clear, then we have two integers
.82e2	4c ad 8e	jmp $8ead			jmp 	FloatingPointSub 							; otherwise at least one float.
.82e5					_StringData:
.82e5	4c 43 90	jmp $9043			jmp 	NotDoneError							; at least one string - don't know both are strings.
.82e8					_IntegerCode:
.82e8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.82eb	49 80		eor #$80			eor 	#$80
.82ed	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.82f0	80 bb		bra $82ad			bra 	AddCode 					; and do the same code as add.
.82f2					AndInteger:
.82f2	fa		plx				plx
.82f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82f6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82f9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82fa	0a		asl a				asl 	a
.82fb	10 05		bpl $8302			bpl 	_NotRef
.82fd	48		pha				pha
.82fe	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8301	68		pla				pla
.8302					_NotRef:
.8302	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8304	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8307	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.830a	f0 03		beq $830f			beq 	_IntegerCode 				; if clear, then we have two integers
.830c	4c 39 90	jmp $9039			jmp 	TypeError 					; anything else, type mismatch.
.830f					_IntegerCode:
.830f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8312	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8315	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8318	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.831b	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.831e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8321	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8324	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8327	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.832a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.832d	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8330	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8333	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8336	60		rts				rts
.8337					OraInteger:
.8337	fa		plx				plx
.8338	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.833b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.833e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.833f	0a		asl a				asl 	a
.8340	10 05		bpl $8347			bpl 	_NotRef
.8342	48		pha				pha
.8343	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8346	68		pla				pla
.8347					_NotRef:
.8347	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8349	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.834c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.834f	f0 03		beq $8354			beq 	_IntegerCode 				; if clear, then we have two integers
.8351	4c 39 90	jmp $9039			jmp 	TypeError 					; anything else, type mismatch.
.8354					_IntegerCode:
.8354	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8357	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.835a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.835d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8360	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8363	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8366	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8369	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.836c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.836f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8372	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8375	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8378	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.837b	60		rts				rts
.837c					EorInteger:
.837c	fa		plx				plx
.837d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8380	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8383	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8384	0a		asl a				asl 	a
.8385	10 05		bpl $838c			bpl 	_NotRef
.8387	48		pha				pha
.8388	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.838b	68		pla				pla
.838c					_NotRef:
.838c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.838e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8391	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8394	f0 03		beq $8399			beq 	_IntegerCode 				; if clear, then we have two integers
.8396	4c 39 90	jmp $9039			jmp 	TypeError 					; anything else, type mismatch.
.8399					_IntegerCode:
.8399	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.839c	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.839f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83a2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83a5	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.83a8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83ab	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83ae	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.83b1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83b4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83b7	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.83ba	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83bd	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.83c1					PrecedenceLevel:
>83c1	04					.byte	 4	; $00 <<
>83c2	02					.byte	 2	; $01 <=
>83c3	02					.byte	 2	; $02 <>
>83c4	00					.byte	 0	; $03 !!3
>83c5	00					.byte	 0	; $04 ><
>83c6	02					.byte	 2	; $05 >=
>83c7	04					.byte	 4	; $06 >>
>83c8	00					.byte	 0	; $07 !!7
>83c9	00					.byte	 0	; $08 !!8
>83ca	00					.byte	 0	; $09 !!9
>83cb	00					.byte	 0	; $0a !!10
>83cc	00					.byte	 0	; $0b !!11
>83cd	00					.byte	 0	; $0c !!12
>83ce	00					.byte	 0	; $0d !!13
>83cf	00					.byte	 0	; $0e !!14
>83d0	00					.byte	 0	; $0f !!15
>83d1	00					.byte	 0	; $10 @
>83d2	00					.byte	 0	; $11 !!17
>83d3	00					.byte	 0	; $12 !!18
>83d4	00					.byte	 0	; $13 [
>83d5	04					.byte	 4	; $14 \
>83d6	00					.byte	 0	; $15 ]
>83d7	01					.byte	 1	; $16 ^
>83d8	00					.byte	 0	; $17 _
>83d9	00					.byte	 0	; $18 `
>83da	00					.byte	 0	; $19 !!25
>83db	00					.byte	 0	; $1a !!26
>83dc	00					.byte	 0	; $1b {
>83dd	01					.byte	 1	; $1c |
>83de	00					.byte	 0	; $1d }
>83df	00					.byte	 0	; $1e ~
>83e0	00					.byte	 0	; $1f [7m<7F>[m
>83e1	00					.byte	 0	; $20
>83e2	05					.byte	 5	; $21 !
>83e3	00					.byte	 0	; $22 "
>83e4	00					.byte	 0	; $23 #
>83e5	05					.byte	 5	; $24 $
>83e6	04					.byte	 4	; $25 %
>83e7	01					.byte	 1	; $26 &
>83e8	00					.byte	 0	; $27 '
>83e9	00					.byte	 0	; $28 (
>83ea	00					.byte	 0	; $29 )
>83eb	04					.byte	 4	; $2a *
>83ec	03					.byte	 3	; $2b +
>83ed	00					.byte	 0	; $2c ,
>83ee	03					.byte	 3	; $2d -
>83ef	00					.byte	 0	; $2e .
>83f0	04					.byte	 4	; $2f /
>83f1	00					.byte	 0	; $30 0
>83f2	00					.byte	 0	; $31 1
>83f3	00					.byte	 0	; $32 2
>83f4	00					.byte	 0	; $33 3
>83f5	00					.byte	 0	; $34 4
>83f6	00					.byte	 0	; $35 5
>83f7	00					.byte	 0	; $36 6
>83f8	00					.byte	 0	; $37 7
>83f9	00					.byte	 0	; $38 8
>83fa	00					.byte	 0	; $39 9
>83fb	00					.byte	 0	; $3a :
>83fc	00					.byte	 0	; $3b ;
>83fd	02					.byte	 2	; $3c <
>83fe	02					.byte	 2	; $3d =
>83ff	02					.byte	 2	; $3e >
>8400	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.8401					EvaluateExpressionAt0:
.8401	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8403					EvaluateExpression:
.8403	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8405					EvaluateExpressionAtPrecedence:
.8405	48		pha				pha 								; save precedence level
.8406	20 f6 85	jsr $85f6			jsr 	EvaluateTerm 				; evaluate term into level X.
.8409	68		pla				pla 								; restore precedence level.
.840a					_EXPRLoop:
.840a	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.840c	b1 30		lda ($30),y			lda 	(codePtr),y
.840e	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8410	b0 25		bcs $8437			bcs 	_EXPRExit
.8412	da		phx				phx 								; read the operator precedence
.8413	aa		tax				tax
.8414	bd c1 83	lda $83c1,x			lda 	PrecedenceLevel,x
.8417	fa		plx				plx
.8418	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.841a	f0 1b		beq $8437			beq 	_EXPRExit
.841c	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.841e	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8420	c5 37		cmp $37				cmp 	zTemp0+1
.8422	b0 13		bcs $8437			bcs		_EXPRExit 					; if current >= operator exit
.8424	48		pha				pha 								; save current precedence.
.8425	b1 30		lda ($30),y			lda 	(codePtr),y
.8427	c8		iny				iny
.8428	48		pha				pha
.8429	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.842b	e8		inx				inx 								; work out the right hand side.
.842c	20 05 84	jsr $8405			jsr 	EvaluateExpressionAtPrecedence
.842f	ca		dex				dex
.8430	68		pla				pla 								; get operator, call the code.
.8431	20 3a 84	jsr $843a			jsr 	_EXPRCaller
.8434	68		pla				pla 								; restore precedence level
.8435	80 d3		bra $840a			bra 	_EXPRLoop 					; and go round.
.8437					_EXPRExit:
.8437	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8439	60		rts				rts
.843a					_EXPRCaller:
.843a	da		phx				phx 								; save on stack, first thing is to restore it
.843b	0a		asl a				asl 	a 							; double so can use vectors into X
.843c	aa		tax				tax
.843d	7c 18 80	jmp ($8018,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8ea8					FloatingPointAdd:
.8ea8	20 bf 8f	jsr $8fbf			jsr 	FloatPrepare 				; prepare for floats
.8eab	80 0b		bra $8eb8			bra 	FloatAdd
.8ead					FloatingPointSub:
.8ead	20 bf 8f	jsr $8fbf			jsr 	FloatPrepare 				; prepare for floats
.8eb0					FloatSubtract:
.8eb0	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.8eb3	49 80		eor #$80			eor 	#$80
.8eb5	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.8eb8					FloatAdd:
.8eb8	48		pha				pha
.8eb9	5a		phy				phy
.8eba	20 d0 8f	jsr $8fd0			jsr 	NSNormalise 				; normalise S[X]
.8ebd	f0 54		beq $8f13			beq 	_FAReturn1
.8ebf	e8		inx				inx 								; normalise S[X+1]
.8ec0	20 d0 8f	jsr $8fd0			jsr 	NSNormalise
.8ec3	ca		dex				dex
.8ec4	c9 00		cmp #$00			cmp 	#0
.8ec6	f0 6f		beq $8f37			beq 	_FAExit 					; if so, just return A
.8ec8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.8ecb	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.8ece	f0 1b		beq $8eeb			beq 	_FAExponentsEqual
.8ed0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.8ed3	a8		tay				tay
.8ed4	38		sec				sec 								; do a signed comparison of the exponents.
.8ed5	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8ed8	50 02		bvc $8edc			bvc 	_FANoSignedChange
.8eda	49 80		eor #$80			eor 	#$80
.8edc					_FANoSignedChange:
.8edc	29 80		and #$80			and 	#$80
.8ede	10 03		bpl $8ee3			bpl 	_FAHaveMax
.8ee0	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.8ee3					_FAHaveMax:
.8ee3	20 3a 8f	jsr $8f3a			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.8ee6	e8		inx				inx
.8ee7	20 3a 8f	jsr $8f3a			jsr 	_FAShiftToExponent
.8eea	ca		dex				dex
.8eeb					_FAExponentsEqual:
.8eeb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.8eee	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ef1	30 10		bmi $8f03			bmi 	_FADifferentSigns
.8ef3	20 40 82	jsr $8240			jsr 	AddTopTwoStack 				; do the add of the mantissae
.8ef6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.8ef9	10 3c		bpl $8f37			bpl 	_FAExit 					; if no, we are done.
.8efb	20 b1 87	jsr $87b1			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.8efe	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.8f01	80 34		bra $8f37			bra 	_FAExit
.8f03					_FADifferentSigns:
.8f03	20 66 82	jsr $8266			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.8f06	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.8f09	10 2c		bpl $8f37			bpl 	_FAExit 					; if no, we are done.
.8f0b	20 3a 87	jsr $873a			jsr 	NSMNegate 					; netate result
.8f0e	20 43 87	jsr $8743			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.8f11	80 24		bra $8f37			bra 	_FAExit
.8f13					_FAReturn1:
.8f13	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8f16	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f19	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8f1c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f1f	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8f22	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f25	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.8f28	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f2b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.8f2e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f31	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.8f34	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f37					_FAExit:
.8f37	7a		ply				ply
.8f38	68		pla				pla
.8f39	60		rts				rts
.8f3a					_FAShiftToExponent:
.8f3a	98		tya				tya 								; compare Y to exponent
.8f3b	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.8f3e	f0 08		beq $8f48			beq 	_FASEExit 					; exit if so.
.8f40	20 b1 87	jsr $87b1			jsr 	NSMShiftRight	 			; shift the mantissa right
.8f43	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.8f46	80 f2		bra $8f3a			bra 	_FAShiftToExponent
.8f48					_FASEExit:
.8f48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.8f49					CompareFloat:
.8f49	20 b0 8e	jsr $8eb0			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.8f4c	a9 00		lda #$00			lda 	#0
.8f4e	1d 10 06	ora $0610,x			ora 	NSMantissa1,x				; the accuracy can be tweaked.
.8f51	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f54	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.8f57	f0 09		beq $8f62			beq 	_FCExit 					; zero, so approximately identical
.8f59	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.8f5b	3c 00 06	bit $0600,x			bit 	NSStatus,x
.8f5e	10 02		bpl $8f62			bpl 	_FCExit
.8f60					_FCNegative:
.8f60	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.8f62					_FCExit:
.8f62	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.8f63					FDivideCommand:
.8f63	fa		plx				plx	 								; restore stack position
.8f64	20 bf 8f	jsr $8fbf			jsr 	FloatPrepare 				; prepare for floats
.8f67					FloatDivide:
.8f67	48		pha				pha
.8f68	e8		inx				inx
.8f69	20 d0 8f	jsr $8fd0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.8f6c	ca		dex				dex
.8f6d	c9 00		cmp #$00			cmp 	#0
.8f6f	f0 20		beq $8f91			beq 	_FDZero
.8f71	20 d0 8f	jsr $8fd0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.8f74	f0 19		beq $8f8f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.8f76	20 ff 8d	jsr $8dff			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.8f79	20 8d 8d	jsr $8d8d			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.8f7c	20 d0 8f	jsr $8fd0			jsr		NSNormalise 				; renormalise
.8f7f	20 9a 8e	jsr $8e9a			jsr 	CalculateSign 				; calculate result sign
.8f82	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.8f85	38		sec				sec
.8f86	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8f89	38		sec				sec
.8f8a	e9 1e		sbc #$1e			sbc 	#30
.8f8c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f8f					_FDExit:
.8f8f	68		pla				pla
.8f90	60		rts				rts
.8f91					_FDZero:
.8f91	a9 03		lda #$03		lda	#3
.8f93	4c 13 80	jmp $8013		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.8f96					FloatingPointMultiply:
.8f96	20 bf 8f	jsr $8fbf			jsr 	FloatPrepare 				; prepare for floats
.8f99					FloatMultiply:
.8f99	48		pha				pha
.8f9a	20 d0 8f	jsr $8fd0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.8f9d	f0 1b		beq $8fba			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.8f9f	e8		inx				inx
.8fa0	20 d0 8f	jsr $8fd0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.8fa3	ca		dex				dex
.8fa4	c9 00		cmp #$00			cmp 	#0
.8fa6	f0 0f		beq $8fb7			beq 	_FDSetZero
.8fa8	20 55 8e	jsr $8e55			jsr 	MultiplyShort 				; calculate the result.
.8fab	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.8fae	18		clc				clc
.8faf	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.8fb2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8fb5	80 03		bra $8fba			bra 	_FDExit
.8fb7					_FDSetZero:
.8fb7	20 8e 87	jsr $878e			jsr 	NSMSetZero 					; return 0
.8fba					_FDExit:
.8fba	20 d0 8f	jsr $8fd0			jsr 	NSNormalise 				; normalise the result
.8fbd	68		pla				pla
.8fbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.8fbf					FloatPrepare:
.8fbf	20 40 84	jsr $8440			jsr 	DereferenceTopTwo 			; dereference the top two values
.8fc2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.8fc5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fc8	29 10		and #$10			and 	#NSBIsString
.8fca	d0 01		bne $8fcd			bne 	_FDType
.8fcc	60		rts				rts
.8fcd					_FDType:
.8fcd	4c 39 90	jmp $9039			jmp 	TypeError
.8fd0					NSNormalise:
.8fd0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.8fd3	29 80		and #$80			and 	#$80
.8fd5	09 08		ora #$08			ora 	#NSTFloat
.8fd7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fda	20 be 87	jsr $87be			jsr 	NSMIsZero 					; if zero exit
.8fdd	d0 09		bne $8fe8			bne 	_NSNormaliseLoop 			; if so, normalise it.
.8fdf	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8fe2	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.8fe5	a9 00		lda #$00			lda 	#0 							; set Z flag
.8fe7	60		rts				rts
.8fe8					_NSNormaliseLoop:
.8fe8	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.8feb	70 08		bvs $8ff5			bvs 	_NSNExit 					; exit if so with Z flag clear
.8fed	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; shift mantissa left
.8ff0	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.8ff3	80 f3		bra $8fe8			bra 	_NSNormaliseLoop
.8ff5					_NSNExit:
.8ff5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.8ff7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.8440					DereferenceTopTwo:
.8440	e8		inx				inx
.8441	20 45 84	jsr $8445			jsr 	Dereference 				; deref x+1
.8444	ca		dex				dex  								; falls through to deref x
.8445					Dereference:
.8445	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8448	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.844a	f0 57		beq $84a3			beq 	_DRFExit 					; not a reference
.844c	5a		phy				phy
.844d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8450	85 36		sta $36				sta 	zTemp0
.8452	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8455	85 37		sta $37				sta 	zTemp0+1
.8457	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.845a	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.845c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.845f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8462	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8464	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8466	f0 0f		beq $8477			beq 	_DRFDereferenceTwo
.8468	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.846a	f0 39		beq $84a5			beq 	_DRFFull
.846c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.846f	29 03		and #$03			and 	#3
.8471	f0 32		beq $84a5			beq 	_DRFFull 					; the whole word
.8473	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8475	f0 07		beq $847e			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8477					_DRFDereferenceTwo:
.8477	a0 01		ldy #$01			ldy 	#1
.8479	b1 36		lda ($36),y			lda 	(zTemp0),y
.847b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.847e					_DRFClear23:
.847e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8481	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8484	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8487	29 18		and #$18			and 	#NSBTypeMask
.8489	9d 00 06	sta $0600,x			sta 	NSStatus,x
.848c	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.848e	d0 12		bne $84a2			bne 	_DRFNotString
.8490	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8493	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8496	d0 0a		bne $84a2			bne 	_DRFNotString
.8498	a9 a4		lda #$a4			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.849a	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.849d	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.849f	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.84a2					_DRFNotString
.84a2	7a		ply				ply 								; restore Y and exit
.84a3					_DRFExit:
.84a3	60		rts				rts
.84a4					_DRFNullString:
>84a4	00						.byte 	0
.84a5					_DRFFull:
.84a5	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.84a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.84a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84ac	c8		iny				iny
.84ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.84af	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84b2	c8		iny				iny
.84b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.84b5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84b8	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.84bb	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.84be	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.84c0	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.84c3	f0 06		beq $84cb			beq 	_DRFNoExponent
.84c5	c8		iny				iny 								; if not, read the exponent as well.
.84c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.84c8	9d 28 06	sta $0628,x			sta 	NSExponent,x
.84cb					_DRFNoExponent:
.84cb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.84ce	10 0d		bpl $84dd			bpl 	_DRFExit2 					; if not, then exit.
.84d0	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.84d2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.84d8	09 80		ora #$80			ora 	#NSBIsNegative
.84da	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84dd					_DRFExit2:
.84dd	7a		ply				ply
.84de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.84df					EncodeNumberStart:
.84df	38		sec				sec
.84e0	80 01		bra $84e3			bra 	EncodeNumberContinue+1
.84e2					EncodeNumberContinue:
.84e2	18		clc				clc
.84e3	08		php				php 								; save reset.
.84e4	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.84e6	f0 12		beq $84fa			beq 	_ENIsOkay
.84e8	c9 30		cmp #$30			cmp 	#"0"
.84ea	90 04		bcc $84f0			bcc 	_ENBadNumber
.84ec	c9 3a		cmp #$3a			cmp 	#"9"+1
.84ee	90 0a		bcc $84fa			bcc 	_ENIsOkay
.84f0					_ENBadNumber:
.84f0	28		plp				plp 								; throw saved reset
.84f1	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.84f4	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.84f6	f0 73		beq $856b			beq 	_ENConstructFinal
.84f8					_ENFail:
.84f8	18		clc				clc 								; not allowed
.84f9	60		rts				rts
.84fa					_ENIsOkay:
.84fa	28		plp				plp 								; are we restarting
.84fb	90 0c		bcc $8509			bcc 	_ENNoRestart
.84fd					_ENStartEncode:
.84fd	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.84ff	20 90 87	jsr $8790			jsr 	NSMSetByte
.8502	a9 01		lda #$01			lda 	#ESTA_Low
.8504					_ENExitChange:
.8504	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8507	38		sec				sec
.8508	60		rts				rts
.8509					_ENNoRestart:
.8509	48		pha				pha 								; save on stack.
.850a	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.850d	c9 01		cmp #$01			cmp 	#ESTA_Low
.850f	f0 09		beq $851a			beq  	_ESTALowState
.8511	c9 02		cmp #$02			cmp 	#ESTA_High
.8513	f0 27		beq $853c			beq 	_ESTAHighState
.8515	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8517	f0 39		beq $8552			beq 	_ESTADecimalState
>8519	db						.byte 	$DB 						; causes a break in the emulator
.851a					_ESTALowState:
.851a	68		pla				pla 								; get value back
.851b	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.851d	f0 27		beq $8546			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.851f	29 0f		and #$0f			and 	#15 						; make digit
.8521	85 36		sta $36				sta 	zTemp0 						; save it.
.8523	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8526	0a		asl a				asl 	a
.8527	0a		asl a				asl 	a
.8528	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.852b	0a		asl a				asl 	a
.852c	65 36		adc $36				adc 	zTemp0
.852e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8531	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8533	90 05		bcc $853a			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8535	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8537	8d 05 07	sta $0705			sta 	EncodeState
.853a					_ESTANoSwitch:
.853a	38		sec				sec
.853b	60		rts				rts
.853c					_ESTAHighState:
.853c	68		pla				pla 								; get value back
.853d	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.853f	f0 05		beq $8546			beq 	_ESTASwitchFloat
.8541	20 a5 85	jsr $85a5			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8544	38		sec				sec
.8545	60		rts				rts
.8546					_ESTASwitchFloat:
.8546	9c 06 07	stz $0706			stz 	DecimalCount
.8549	e8		inx				inx 								; zero the decimal additive.
.854a	20 8e 87	jsr $878e			jsr 	NSMSetZero
.854d	ca		dex				dex
.854e	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8550	80 b2		bra $8504			bra 	_ENExitChange
.8552					_ESTADecimalState:
.8552	68		pla				pla 								; digit.
.8553	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8555	f0 a1		beq $84f8			beq 	_ENFail
.8557	e8		inx				inx 								; put digit into fractional part of X+1
.8558	20 a5 85	jsr $85a5			jsr 	ESTAShiftDigitIntoMantissa
.855b	ca		dex				dex
.855c	ee 06 07	inc $0706			inc 	DecimalCount 				; bump the count of decimals
.855f	ad 06 07	lda $0706			lda 	DecimalCount
.8562	c9 0b		cmp #$0b			cmp 	#11
.8564	f0 02		beq $8568			beq 	_ESTADSFail
.8566	38		sec				sec
.8567	60		rts				rts
.8568					_ESTADSFail:
.8568	4c 34 90	jmp $9034			jmp 	RangeError
.856b					_ENConstructFinal:
.856b	ad 06 07	lda $0706			lda 	DecimalCount 				; get decimal count
.856e	f0 33		beq $85a3			beq 	_ENCFExit 					; no decimals
.8570	5a		phy				phy
.8571	0a		asl a				asl 	a 							; x 4 and CLC
.8572	0a		asl a				asl 	a
.8573	6d 06 07	adc $0706			adc 	DecimalCount
.8576	a8		tay				tay
.8577	b9 f3 8f	lda $8ff3,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.857a	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.857d	b9 f4 8f	lda $8ff4,y			lda 	DecimalScalarTable-5+1,y
.8580	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8583	b9 f5 8f	lda $8ff5,y			lda 	DecimalScalarTable-5+2,y
.8586	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8589	b9 f6 8f	lda $8ff6,y			lda 	DecimalScalarTable-5+3,y
.858c	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.858f	b9 f7 8f	lda $8ff7,y			lda 	DecimalScalarTable-5+4,y
.8592	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8595	a9 08		lda #$08			lda 	#NSTFloat
.8597	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.859a	7a		ply				ply
.859b	e8		inx				inx 								; multiply decimal const by decimal scalar
.859c	20 99 8f	jsr $8f99			jsr 	FloatMultiply
.859f	ca		dex				dex
.85a0	20 b8 8e	jsr $8eb8			jsr 	FloatAdd 					; add to integer part.
.85a3					_ENCFExit:
.85a3	18		clc				clc 								; reject the digit.
.85a4	60		rts				rts
.85a5					ESTAShiftDigitIntoMantissa:
.85a5	29 0f		and #$0f			and 	#15 						; save digit
.85a7	48		pha				pha
.85a8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.85ab	48		pha				pha
.85ac	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.85af	48		pha				pha
.85b0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85b3	48		pha				pha
.85b4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.85b7	48		pha				pha
.85b8	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; x 2
.85bb	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; x 4
.85be	18		clc				clc 								; pop mantissa and add
.85bf	68		pla				pla
.85c0	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.85c3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85c6	68		pla				pla
.85c7	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.85ca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85cd	68		pla				pla
.85ce	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.85d1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85d4	68		pla				pla
.85d5	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.85d8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.85db	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; x 10
.85de	68		pla				pla 								; add digit
.85df	18		clc				clc
.85e0	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.85e3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85e6	90 0d		bcc $85f5			bcc 	_ESTASDExit
.85e8	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.85eb	d0 08		bne $85f5			bne 	_ESTASDExit
.85ed	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.85f0	d0 03		bne $85f5			bne 	_ESTASDExit
.85f2	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.85f5					_ESTASDExit:
.85f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.85f6					EvaluateTerm:
.85f6	b1 30		lda ($30),y			lda 	(codePtr),y
.85f8	30 18		bmi $8612			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.85fa	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.85fc	b0 6e		bcs $866c			bcs 	_ETVariable
.85fe	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8600	90 6e		bcc $8670			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8602	c9 3a		cmp #$3a			cmp 	#'9'+1
.8604	b0 6a		bcs $8670			bcs 	_ETPuncUnary
.8606	20 df 84	jsr $84df			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8609					_ETNumber:
.8609	c8		iny				iny 								; keep encoding until we have the numbers
.860a	b1 30		lda ($30),y			lda 	(codePtr),y
.860c	20 e2 84	jsr $84e2			jsr 	EncodeNumberContinue
.860f	b0 f8		bcs $8609			bcs 	_ETNumber 					; go back if accepted.
.8611	60		rts				rts
.8612					_ETCheckUnary:
.8612	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8614	f0 40		beq $8656			beq 	_ETString
.8616	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8618	f0 11		beq $862b			beq 	_ETHexConstant
.861a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.861c	90 0a		bcc $8628			bcc 	_ETSyntaxError
.861e	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.8620	b0 06		bcs $8628			bcs 	_ETSyntaxError
.8622	da		phx				phx 								; push X on the stack
.8623	0a		asl a				asl 	a 							; put vector x 2 into X
.8624	aa		tax				tax
.8625	7c 98 80	jmp ($8098,x)			jmp 	(VectorSet0,x) 				; and do it.
.8628					_ETSyntaxError:
.8628	4c 2f 90	jmp $902f			jmp 	SyntaxError
.862b					_ETHexConstant:
.862b	c8		iny				iny 								; skip #
.862c	c8		iny				iny 								; skip count
.862d	20 8e 87	jsr $878e			jsr 	NSMSetZero 					; clear result
.8630					_ETHLoop:
.8630	b1 30		lda ($30),y			lda 	(codePtr),y
.8632	c8		iny				iny 								; and consume
.8633	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8635	f0 1e		beq $8655			beq 	_ETHExit
.8637	48		pha				pha 								; save on stack.
.8638	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; x 2
.863b	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; x 4
.863e	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; x 8
.8641	20 a3 87	jsr $87a3			jsr 	NSMShiftLeft 				; x 16
.8644	68		pla				pla 								; ASCII
.8645	c9 41		cmp #$41			cmp 	#'A'
.8647	90 02		bcc $864b			bcc 	_ETHNotChar
.8649	e9 07		sbc #$07			sbc 	#7
.864b					_ETHNotChar:
.864b	29 0f		and #$0f			and 	#15 						; digit now
.864d	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8650	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8653	80 db		bra $8630			bra 	_ETHLoop 					; go round.
.8655					_ETHExit:
.8655	60		rts				rts
.8656					_ETString:
.8656	c8		iny				iny 								; look at length
.8657	b1 30		lda ($30),y			lda 	(codePtr),y
.8659	48		pha				pha
.865a	c8		iny				iny 								; first character
.865b	20 07 88	jsr $8807			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.865e	68		pla				pla 								; restore count and save
.865f	85 36		sta $36				sta 	zTemp0
.8661	98		tya				tya 								; add length to Y to skip it.
.8662	18		clc				clc
.8663	65 36		adc $36				adc 	zTemp0
.8665	a8		tay				tay
.8666	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8668	9d 00 06	sta $0600,x			sta 	NSStatus,x
.866b	60		rts				rts
.866c					_ETVariable:
>866c	db						.byte 	$DB 						; causes a break in the emulator
.866d	4c ff ff	jmp $ffff			jmp 	$FFFF
.8670					_ETPuncUnary:
.8670	c8		iny				iny 								; consume the unary character
.8671	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8673	f0 31		beq $86a6			beq 	_ETUnaryNegate
.8675	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8677	f0 3d		beq $86b6			beq 	_ETDereference
.8679	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.867b	f0 58		beq $86d5			beq 	_ETParenthesis
.867d	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.867f	f0 43		beq $86c4			beq 	_ETStringReference
.8681	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8683	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8685	f0 06		beq $868d			beq 	_ETIndirection
.8687	e6 36		inc $36				inc 	zTemp0
.8689	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.868b	d0 9b		bne $8628			bne 	_ETSyntaxError
.868d					_ETIndirection:
.868d	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.868f	1a		inc a				inc 	a
.8690	48		pha				pha
.8691	20 f6 85	jsr $85f6			jsr 	EvaluateTerm				; evaluate the term
.8694	20 45 84	jsr $8445			jsr 	Dereference 				; dereference it.
.8697	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.869a	d0 07		bne $86a3			bne 	_ETTypeMismatch
.869c	68		pla				pla 								; indirection 1-2
.869d	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.869f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86a2	60		rts				rts
.86a3					_ETTypeMismatch:
.86a3	4c 39 90	jmp $9039			jmp 	TypeError
.86a6					_ETUnaryNegate:
.86a6	20 f6 85	jsr $85f6			jsr 	EvaluateTerm				; evaluate the term
.86a9	20 45 84	jsr $8445			jsr 	Dereference 				; dereference it.
.86ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.86af	29 10		and #$10			and 	#NSTString
.86b1	d0 f0		bne $86a3			bne 	_ETTypeMismatch
.86b3	4c 3a 87	jmp $873a			jmp 	NSMNegate  					; just toggles the sign bit.
.86b6					_ETDereference:
.86b6	20 f6 85	jsr $85f6			jsr 	EvaluateTerm				; evaluate the term
.86b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.86bc	29 20		and #$20			and 	#NSBIsReference
.86be	f0 e3		beq $86a3			beq 	_ETTypeMismatch
.86c0	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.86c3	60		rts				rts
.86c4					_ETStringReference:
.86c4	20 f6 85	jsr $85f6			jsr 	EvaluateTerm				; evaluate the term
.86c7	20 45 84	jsr $8445			jsr 	Dereference 				; dereference it.
.86ca	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.86cd	d0 d4		bne $86a3			bne 	_ETTypeMismatch
.86cf	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.86d1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86d4	60		rts				rts
.86d5					_ETParenthesis:
.86d5	20 03 84	jsr $8403			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.86d8	20 b0 8c	jsr $8cb0			jsr 	CheckRightBracket 			; check for )
.86db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.86dc					EvaluateValue:
.86dc	48		pha				pha
.86dd	20 01 84	jsr $8401			jsr		EvaluateExpressionAt0 		; expression
.86e0	20 45 84	jsr $8445			jsr 	Dereference					; derefernce it
.86e3	68		pla				pla
.86e4	60		rts				rts
.86e5					EvaluateNumber:
.86e5	20 dc 86	jsr $86dc			jsr 	EvaluateValue 				; get a value
.86e8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.86eb	29 10		and #$10			and 	#NSBIsString
.86ed	d0 16		bne $8705			bne 	HelperTypeError
.86ef	60		rts				rts
.86f0					EvaluateString:
.86f0	20 dc 86	jsr $86dc			jsr 	EvaluateValue 				; get a value
.86f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.86f6	29 10		and #$10			and 	#NSBIsString
.86f8	f0 0b		beq $8705			beq 	HelperTypeError
.86fa					CopyAddressToTemp0:
.86fa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.86fd	85 36		sta $36				sta 	zTemp0
.86ff	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8702	85 37		sta $37				sta 	zTemp0+1
.8704	60		rts				rts
.8705					HelperTypeError:
.8705	4c 39 90	jmp $9039			jmp 	TypeError
.8708					EvaluateInteger:
.8708	20 e5 86	jsr $86e5			jsr 	EvaluateNumber
.870b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.870e	d0 0a		bne $871a			bne 	HelperValueError 			; if not, it's a float.
.8710	60		rts				rts
.8711					EvaluateUnsignedInteger:
.8711	20 08 87	jsr $8708			jsr 	EvaluateInteger 			; check integer is +ve
.8714	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8717	30 01		bmi $871a			bmi 	HelperValueError
.8719	60		rts				rts
.871a					HelperValueError:
.871a	4c 3e 90	jmp $903e			jmp 	ArgumentError
.871d					Evaluate16BitInteger:
.871d	20 11 87	jsr $8711			jsr	 	EvaluateUnsignedInteger		; get integer
.8720	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8723	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8726	d0 f2		bne $871a			bne 	HelperValueError
.8728	60		rts				rts
.8729					Evaluate8BitInteger:
.8729	20 11 87	jsr $8711			jsr	 	EvaluateUnsignedInteger 	; get an integer
.872c	d0 ec		bne $871a			bne 	HelperValueError
.872e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8731	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8734	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8737	d0 e1		bne $871a			bne 	HelperValueError
.8739	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.873a					NSMNegate:
.873a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.873d	49 80		eor #$80			eor 	#NSBIsNegative
.873f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8742	60		rts				rts
.8743					NSMNegateMantissa:
.8743	38		sec				sec
.8744	a9 00		lda #$00			lda 	#0
.8746	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8749	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.874c	a9 00		lda #$00			lda 	#0
.874e	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8751	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8754	a9 00		lda #$00			lda 	#0
.8756	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8759	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.875c	a9 00		lda #$00			lda 	#0
.875e	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8761	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8764	60		rts				rts
.8765					NSMShiftUpTwo:
.8765	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8768	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.876b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.876e	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8771	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8774	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8777	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.877a	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.877d	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8780	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8783	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8786	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8789	60		rts				rts
.878a					NSMSetZeroMantissaOnly:
.878a	a9 00		lda #$00			lda 	#0
.878c	80 08		bra $8796			bra 	NSMSetMantissa
.878e					NSMSetZero:
.878e	a9 00		lda #$00			lda 	#0
.8790					NSMSetByte:
.8790	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8793	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8796					NSMSetMantissa:
.8796	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8799	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.879c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.879f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87a2	60		rts				rts
.87a3					NSMShiftLeft:
.87a3	18		clc				clc
.87a4					NSMRotateLeft:
.87a4	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.87a7	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.87aa	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.87ad	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.87b0	60		rts				rts
.87b1					NSMShiftRight:
.87b1	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.87b4	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.87b7	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.87ba	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.87bd	60		rts				rts
.87be					NSMIsZero:
.87be	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.87c1	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.87c4	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.87c7	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.87ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.8ff8					DecimalScalarTable:
>8ff8	66 66 66 66				.dword $66666666 ; 0.1
>8ffc	de					.byte $de
>8ffd	1f 85 eb 51				.dword $51eb851f ; 0.01
>9001	db					.byte $db
>9002	4c 37 89 41				.dword $4189374c ; 0.001
>9006	d8					.byte $d8
>9007	ac 8b db 68				.dword $68db8bac ; 0.0001
>900b	d4					.byte $d4
>900c	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9010	d1					.byte $d1
>9011	83 de 1b 43				.dword $431bde83 ; 1e-06
>9015	ce					.byte $ce
>9016	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>901a	ca					.byte $ca
>901b	89 3b e6 55				.dword $55e63b89 ; 1e-08
>901f	c7					.byte $c7
>9020	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9024	c4					.byte $c4
>9025	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9029	c0					.byte $c0
>902a	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>902e	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.902f					SyntaxError:
.902f	a9 02		lda #$02		lda	#2
.9031	4c 13 80	jmp $8013		jmp	ErrorHandler
.9034					RangeError:
.9034	a9 04		lda #$04		lda	#4
.9036	4c 13 80	jmp $8013		jmp	ErrorHandler
.9039					TypeError:
.9039	a9 05		lda #$05		lda	#5
.903b	4c 13 80	jmp $8013		jmp	ErrorHandler
.903e					ArgumentError:
.903e	a9 07		lda #$07		lda	#7
.9040	4c 13 80	jmp $8013		jmp	ErrorHandler
.9043					NotDoneError:
.9043	a9 0c		lda #$0c		lda	#12
.9045	4c 13 80	jmp $8013		jmp	ErrorHandler
.9048					ErrorText:
>9048	42 72 65 61 6b 00			.text	"Break",0
>904e	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9056	72 72 6f 72 00
>905b	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9063	20 62 79 20 7a 65 72 6f 00
>906c	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9074	61 6e 67 65 00
>9079	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9081	6d 61 74 63 68 00
>9087	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>908f	65 6d 6f 72 79 00
>9095	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>909d	61 72 67 75 6d 65 6e 74 00
>90a6	53 74 6f 70 00				.text	"Stop",0
>90ab	53 74 72 69 6e 67 20 74			.text	"String too long",0
>90b3	6f 6f 20 6c 6f 6e 67 00
>90bb	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>90c3	6e 20 66 61 69 6c 65 64 00
>90cc	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>90d4	61 74 61 00
>90d8	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>90e0	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.87cb					MemoryNew:
.87cb	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.87cd	85 30		sta $30				sta 	codePtr
.87cf	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.87d1	85 31		sta $31				sta 	codePtr+1
.87d3	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.87d5	92 30		sta ($30)			sta 	(codePtr)
.87d7	60		rts				rts
.87d8					MemoryAppend:
.87d8	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.87da	85 30		sta $30				sta 	codePtr
.87dc	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.87de	85 31		sta $31				sta 	codePtr+1
.87e0					_MAFindEnd:
.87e0	b2 30		lda ($30)			lda 	(codePtr)
.87e2	f0 0d		beq $87f1			beq 	_MAFoundEnd
.87e4	18		clc				clc
.87e5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87e7	65 30		adc $30				adc 	codePtr
.87e9	85 30		sta $30				sta 	codePtr
.87eb	90 02		bcc $87ef			bcc 	_CREExit
.87ed	e6 31		inc $31				inc 	codePtr+1
.87ef					_CREExit:
.87ef	80 ef		bra $87e0			bra 	_MAFindEnd
.87f1					_MAFoundEnd:
.87f1	ac 07 07	ldy $0707			ldy 	tokenOffset 				; bytes to copy
.87f4	c0 04		cpy #$04			cpy 	#4 							; blank line
.87f6	f0 0e		beq $8806			beq 	_MANoLine
.87f8	a9 00		lda #$00			lda 	#0 							; end of program
.87fa	91 30		sta ($30),y			sta 	(codePtr),y
.87fc					_MACopy:
.87fc	88		dey				dey
.87fd	b9 07 07	lda $0707,y			lda 	tokenOffset,y
.8800	91 30		sta ($30),y			sta 	(codePtr),y
.8802	c0 00		cpy #$00			cpy 	#0
.8804	d0 f6		bne $87fc			bne 	_MACopy
.8806					_MANoLine:
.8806	60		rts				rts
.8807					MemoryInline:
.8807	98		tya				tya 								; put address into stack,x
.8808	18		clc				clc
.8809	65 30		adc $30				adc 	codePtr
.880b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.880e	a5 31		lda $31				lda 	codePtr+1
.8810	69 00		adc #$00			adc 	#0
.8812	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8815	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8818	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.881b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.881c					VariableOpen:
.881c	60		rts				rts
.881d					VariableClose:
.881d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.881e					BackloadProgram:
.881e	a2 ff		ldx #$ff			ldx 	#$FF
.8820	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8823	20 47 88	jsr $8847			jsr 	BLReadByte
.8826	30 1e		bmi $8846			bmi 	_BPExit
.8828					_BPCopy:
.8828	e8		inx				inx  								; copy byte in
.8829	9d 07 08	sta $0807,x			sta 	lineBuffer,x
.882c	9e 08 08	stz $0808,x			stz 	lineBuffer+1,x
.882f	20 47 88	jsr $8847			jsr 	BLReadByte 					; read next byte
.8832	30 0a		bmi $883e			bmi 	_BPEndLine 					; -ve = EOL
.8834	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8836	d0 02		bne $883a			bne 	_BPNotTab
.8838	a9 20		lda #$20			lda 	#' '
.883a					_BPNotTab:
.883a	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.883c	b0 ea		bcs $8828			bcs 	_BPCopy
.883e					_BPEndLine:
.883e	20 2b 8a	jsr $8a2b			jsr 	TokeniseLine 				; tokenise the line.
.8841	20 d8 87	jsr $87d8			jsr 	MemoryAppend 				; append to current program
.8844	80 d8		bra $881e			bra 	BackloadProgram
.8846					_BPExit:
.8846	60		rts				rts
.8847					BLReadByte:
.8847					_BLLoad:
.8847	ad 00 30	lda $3000			lda 	$3000
.884a	ee 48 88	inc $8848			inc 	_BLLoad+1
.884d	d0 03		bne $8852			bne 	_BLNoCarry
.884f	ee 49 88	inc $8849			inc 	_BLLoad+2
.8852					_BLNoCarry:
.8852	c9 00		cmp #$00			cmp 	#0
.8854	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8855					TokeniseSearchTable:
.8855	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8857	85 36		sta $36				sta 	zTemp0
.8859	a0 00		ldy #$00			ldy 	#0
.885b	a9 80		lda #$80			lda 	#$80 						; token #
.885d	85 38		sta $38				sta 	zTemp1
.885f					_TSTLoop:
.885f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8861	30 49		bmi $88ac			bmi 	_TSTFail 					; -ve = end of table
.8863	f0 2e		beq $8893			beq 	_TSTNext 					; zero, check next it's a dummy
.8865	c8		iny				iny 								; get the hash
.8866	b1 36		lda ($36),y			lda 	(zTemp0),y
.8868	88		dey				dey
.8869	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.886c	d0 25		bne $8893			bne 	_TSTNext
.886e	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8871	38		sec				sec
.8872	ed 00 07	sbc $0700			sbc 	identStart
.8875	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8877	d0 1a		bne $8893			bne 	_TSTNext
.8879	5a		phy				phy 								; save Y , we might fail
.887a	c8		iny				iny 								; point to text
.887b	c8		iny				iny
.887c	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.887f					_TSTCompareName:
.887f	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; compare text.
.8882	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8884	d0 0c		bne $8892			bne 	_TSTNextPullY 				; fail, pullY and do next
.8886	e8		inx				inx
.8887	c8		iny				iny
.8888	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.888b	d0 f2		bne $887f			bne 	_TSTCompareName
.888d	7a		ply				ply 								; throw Y
.888e	a5 38		lda $38				lda 	zTemp1 						; get token #
.8890	38		sec				sec 								; return with CS = passed.
.8891	60		rts				rts
.8892					_TSTNextPullY:
.8892	7a		ply				ply 								; restore current, fall through.
.8893					_TSTNext:
.8893	e6 38		inc $38				inc 	zTemp1 						; token counter
.8895	98		tya				tya
.8896	18		clc				clc
.8897	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8899	1a		inc a				inc 	a 							; +1
.889a	1a		inc a				inc 	a 							; +2
.889b	a8		tay				tay
.889c	10 c1		bpl $885f			bpl 	_TSTLoop 					; if Y < $80 loop back
.889e	98		tya				tya 								; add Y to zTemp0 and reset Y
.889f	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.88a1	18		clc				clc  								; but have tables > 255 bytes
.88a2	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.88a4	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.88a6	90 b7		bcc $885f			bcc 	_TSTLoop
.88a8	e6 37		inc $37				inc 	zTemp0+1
.88aa	80 b3		bra $885f			bra 	_TSTLoop
.88ac					_TSTFail:
.88ac	18		clc				clc
.88ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.88ae					KeywordSet0:
>88ae	00 65					.text	0,$65,""               ; $80 !0:EOF
>88b0	00 58					.text	0,$58,""               ; $81 !1:SH1
>88b2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>88b4	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>88ba	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>88c2	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>88c8	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>88cf	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>88d5	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>88dc	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>88e3	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>88eb	45 24 28
>88ee	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>88f6	45 24 28
>88f9	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8c HEX$(
>8900	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>8906	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>890e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>8916	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>891c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>8923	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $92 NOT
>8928	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $93 PAGE
>892e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>8936	28
>8937	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>893d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>8943	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>8949	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>8950	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>8956	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>895c	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>8961	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>8965	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>896b	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>8973	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>897a	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>8981	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>8989	43
>898a	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>8990	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a3 UNTIL
>8997	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a4 WEND
>899d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a5 CALL
>89a3	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a6 CLS
>89a8	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a7 DATA
>89ae	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a8 DIM
>89b3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a9 GOSUB
>89ba	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $aa GOTO
>89c0	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $ab LET
>89c5	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>89cc	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>89d2	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>89d7	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>89df	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b0 THEN
>89e5	02 a3 54 4f				.text	2,$a3,"TO"             ; $b1 TO
>89e9	ff					.text	$FF
.89ea					KeywordSet1:
>89ea	00 65					.text	0,$65,""               ; $80 !0:EOF
>89ec	00 58					.text	0,$58,""               ; $81 !1:SH1
>89ee	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>89f0	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>89f8	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>89ff	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8a04	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8a0a	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8a0f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8a17	45
>8a18	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8a1d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8a23	ff					.text	$FF
.8a24					KeywordSet2:
>8a24	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a26	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a28	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a2a	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8a2b					TokeniseLine:
.8a2b	20 b3 8b	jsr $8bb3			jsr 	FixLineBufferCase 			; fix line case
.8a2e	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8a30	8d 07 07	sta $0707			sta 	tokenOffset
.8a33	9c 08 07	stz $0708			stz 	tokenLineNumber
.8a36	9c 09 07	stz $0709			stz 	tokenLineNumber+1
.8a39	a2 ff		ldx #$ff			ldx 	#$FF
.8a3b					_TKFindFirst:
.8a3b	e8		inx				inx
.8a3c	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8a3f	f0 79		beq $8aba			beq 	_TKExit
.8a41	c9 20		cmp #$20			cmp 	#' '
.8a43	90 f6		bcc $8a3b			bcc 	_TKFindFirst
.8a45	c9 30		cmp #$30			cmp 	#'0'
.8a47	90 07		bcc $8a50			bcc 	_TKNoLineNumber
.8a49	c9 3a		cmp #$3a			cmp 	#'9'+1
.8a4b	b0 03		bcs $8a50			bcs 	_TKNoLineNumber
.8a4d	20 dd 8b	jsr $8bdd			jsr 	TokeniseExtractLineNumber
.8a50					_TKNoLineNumber:
.8a50					_TKTokeniseLoop:
.8a50	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8a53	f0 65		beq $8aba			beq 	_TKExit
.8a55	e8		inx				inx
.8a56	c9 20		cmp #$20			cmp 	#' '
.8a58	f0 f6		beq $8a50			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8a5a	ca		dex				dex 								; undo last get, A contains character, X is position.
.8a5b	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8a5d	f0 61		beq $8ac0			beq 	_TKTokeniseIdentifier
.8a5f	c9 41		cmp #$41			cmp 	#'A'
.8a61	90 04		bcc $8a67			bcc 	_TKTokenisePunctuation
.8a63	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8a65	90 59		bcc $8ac0			bcc 	_TKTokeniseIdentifier
.8a67					_TKTokenisePunctuation:
.8a67	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8a69	f0 27		beq $8a92			beq 	_TKString
.8a6b	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8a6d	f0 28		beq $8a97			beq 	_TKHexConstant
.8a6f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8a71	f0 29		beq $8a9c			beq 	_TKCheckDouble
.8a73	c9 3e		cmp #$3e			cmp 	#'>'
.8a75	f0 25		beq $8a9c			beq 	_TKCheckDouble
.8a77					_TKStandardPunctuation:
.8a77	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get it back.
.8a7a	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8a7c	90 0e		bcc $8a8c			bcc 	_TKNoShift
.8a7e	48		pha				pha 								; save
.8a7f	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8a81	85 36		sta $36				sta 	zTemp0
.8a83	68		pla				pla
.8a84	29 20		and #$20			and 	#32 						; bit 5
.8a86	4a		lsr a				lsr 	a 							; shift into bit 3
.8a87	4a		lsr a				lsr 	a
.8a88	05 36		ora $36				ora 	zTemp0
.8a8a	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8a8c					_TKNoShift:
.8a8c	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte 			; write the punctuation character
.8a8f	e8		inx				inx 								; consume the character
.8a90	80 be		bra $8a50			bra 	_TKTokeniseLoop 			; and loop round again.
.8a92					_TKString:
.8a92	20 42 8b	jsr $8b42			jsr 	TokeniseString
.8a95	80 b9		bra $8a50			bra 	_TKTokeniseLoop
.8a97					_TKHexConstant:
.8a97	20 7d 8b	jsr $8b7d			jsr 	TokeniseHexConstant
.8a9a	80 b4		bra $8a50			bra 	_TKTokeniseLoop
.8a9c					_TKCheckDouble:
.8a9c	bd 08 08	lda $0808,x			lda 	lineBuffer+1,x 				; get next character
.8a9f	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8aa1	90 d4		bcc $8a77			bcc 	_TKStandardPunctuation
.8aa3	c9 3f		cmp #$3f			cmp 	#'>'+1
.8aa5	b0 d0		bcs $8a77			bcs 	_TKStandardPunctuation
.8aa7	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8aaa	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8aac	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8aad	7d 08 08	adc $0808,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8ab0	38		sec				sec
.8ab1	e9 3c		sbc #$3c			sbc 	#'<'
.8ab3	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8ab6	e8		inx				inx 								; consume both
.8ab7	e8		inx				inx
.8ab8	80 96		bra $8a50			bra 	_TKTokeniseLoop
.8aba	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8abc	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8abf	60		rts				rts
.8ac0					_TKTokeniseIdentifier:
.8ac0	8e 00 07	stx $0700			stx 	identStart 					; save start
.8ac3	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8ac6					_TKCheckLoop:
.8ac6	e8		inx				inx 								; look at next, we know first is identifier.
.8ac7	bd 07 08	lda $0807,x			lda  	lineBuffer,x
.8aca	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8acc	f0 f8		beq $8ac6			beq 	_TKCheckLoop
.8ace	c9 30		cmp #$30			cmp	 	#"0"
.8ad0	90 0c		bcc $8ade			bcc 	_TKEndIdentifier
.8ad2	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ad4	90 f0		bcc $8ac6			bcc 	_TKCheckLoop
.8ad6	c9 41		cmp #$41			cmp	 	#"A"
.8ad8	90 04		bcc $8ade			bcc 	_TKEndIdentifier
.8ada	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8adc	90 e8		bcc $8ac6			bcc 	_TKCheckLoop
.8ade					_TKEndIdentifier:
.8ade	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8ae1	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8ae3	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8ae5	f0 06		beq $8aed			beq 	_TKHasTypeCharacter
.8ae7	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8ae9	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8aeb	d0 07		bne $8af4			bne 	_TKNoTypeCharacter
.8aed					_TKHasTypeCharacter:
.8aed	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8af0	e8		inx				inx 								; read next
.8af1	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8af4					_TKNoTypeCharacter:
.8af4	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8af6	d0 09		bne $8b01			bne 	_TKNoArray
.8af8	e8		inx				inx 								; skip the (
.8af9	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8afc	09 04		ora #$04			ora 	#$04
.8afe	8d 04 07	sta $0704			sta 	identTypeByte
.8b01					_TKNoArray:
.8b01	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8b04	20 9e 8b	jsr $8b9e			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8b07	a0 88		ldy #$88			ldy 	#(KeywordSet0) >> 8
.8b09	a9 ae		lda #$ae			lda 	#(KeywordSet0) & $FF
.8b0b	20 55 88	jsr $8855			jsr 	TokeniseSearchTable
.8b0e	a2 00		ldx #$00			ldx 	#0
.8b10	b0 1f		bcs $8b31			bcs 	_TKFoundToken
.8b12	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8b14	a9 ea		lda #$ea			lda 	#(KeywordSet1) & $FF
.8b16	20 55 88	jsr $8855			jsr 	TokeniseSearchTable
.8b19	a2 81		ldx #$81			ldx 	#$81
.8b1b	b0 14		bcs $8b31			bcs 	_TKFoundToken
.8b1d	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8b1f	a9 ea		lda #$ea			lda 	#(KeywordSet1) & $FF
.8b21	20 55 88	jsr $8855			jsr 	TokeniseSearchTable
.8b24	a2 82		ldx #$82			ldx 	#$82
.8b26	b0 09		bcs $8b31			bcs 	_TKFoundToken
.8b28	20 2e 8c	jsr $8c2e			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8b2b	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8b2e	4c 50 8a	jmp $8a50			jmp 	_TKTokeniseLoop 			; and go round again.
.8b31					_TKFoundToken:
.8b31	48		pha				pha 								; save token
.8b32	8a		txa				txa 								; shift in X, is there one ?
.8b33	f0 03		beq $8b38			beq 	_TKNoTShift
.8b35	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte 			; if so, write it out
.8b38					_TKNoTShift:
.8b38	68		pla				pla 								; restore and write token
.8b39	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8b3c	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8b3f	4c 50 8a	jmp $8a50			jmp 	_TKTokeniseLoop 			; and go round again.
.8b42					TokeniseString:
.8b42	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8b44	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8b47	e8		inx				inx									; start of quoted string.
.8b48	da		phx				phx 								; push start of string on top
.8b49	ca		dex				dex
.8b4a					_TSFindEnd:
.8b4a	e8		inx				inx
.8b4b	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; next character
.8b4e	f0 04		beq $8b54			beq 	_TSEndOfString
.8b50	c9 22		cmp #$22			cmp 	#'"'
.8b52	d0 f6		bne $8b4a			bne 	_TSFindEnd
.8b54					_TSEndOfString:
.8b54	7a		ply				ply  								; so now Y is first character, X is character after end.
.8b55	48		pha				pha 								; save terminating character
.8b56	20 5e 8b	jsr $8b5e			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8b59	68		pla				pla 								; terminating character
.8b5a	f0 01		beq $8b5d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8b5c	e8		inx				inx
.8b5d					_TSNotQuote:
.8b5d	60		rts				rts
.8b5e					TOWriteBlockXY:
.8b5e	86 36		stx $36				stx 	zTemp0 						; write end character
.8b60	98		tya				tya
.8b61	49 ff		eor #$ff			eor 	#$FF
.8b63	38		sec				sec
.8b64	65 36		adc $36				adc 	zTemp0
.8b66	1a		inc a				inc 	a 							; one extra for NULL
.8b67	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8b6a					_TOBlockLoop:
.8b6a	c4 36		cpy $36				cpy 	zTemp0
.8b6c	f0 09		beq $8b77			beq 	_TOBlockExit
.8b6e	b9 07 08	lda $0807,y			lda 	lineBuffer,y
.8b71	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8b74	c8		iny				iny
.8b75	80 f3		bra $8b6a			bra 	_TOBlockLoop
.8b77					_TOBlockExit:
.8b77	a9 00		lda #$00			lda 	#0
.8b79	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8b7c	60		rts				rts
.8b7d					TokeniseHexConstant:
.8b7d	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8b7f	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8b82	e8		inx				inx									; start of quoted string.
.8b83	da		phx				phx 								; push start of constant on top
.8b84	ca		dex				dex
.8b85					_THFindLoop:
.8b85	e8		inx				inx
.8b86	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8b89	c9 30		cmp #$30			cmp 	#"0"
.8b8b	90 0c		bcc $8b99			bcc 	_THFoundEnd
.8b8d	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b8f	90 f4		bcc $8b85			bcc 	_THFindLoop
.8b91	c9 41		cmp #$41			cmp 	#"A"
.8b93	90 04		bcc $8b99			bcc 	_THFoundEnd
.8b95	c9 47		cmp #$47			cmp 	#"F"+1
.8b97	90 ec		bcc $8b85			bcc 	_THFindLoop
.8b99					_THFoundEnd:
.8b99	7a		ply				ply 								; restore start
.8b9a	20 5e 8b	jsr $8b5e			jsr 	TOWriteBlockXY 				; output the block
.8b9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8b9e					TokeniseCalculateHash:
.8b9e	da		phx				phx
.8b9f	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8ba2	a9 00		lda #$00			lda 	#0
.8ba4					_TCHLoop:
.8ba4	18		clc				clc
.8ba5	7d 07 08	adc $0807,x			adc 	lineBuffer,x
.8ba8	e8		inx				inx
.8ba9	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8bac	d0 f6		bne $8ba4			bne 	_TCHLoop
.8bae	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8bb1	fa		plx				plx
.8bb2	60		rts				rts
.8bb3					FixLineBufferCase:
.8bb3	a2 00		ldx #$00			ldx 	#0
.8bb5					_FLBCLoop:
.8bb5	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get next character
.8bb8	f0 22		beq $8bdc			beq 	_FLBCExit 					; end of string.
.8bba	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8bbc	f0 11		beq $8bcf			beq 	_FLBCInQuotes
.8bbe	e8		inx				inx
.8bbf	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8bc1	90 f2		bcc $8bb5			bcc 	_FLBCLoop
.8bc3	c9 7b		cmp #$7b			cmp 	#'z'+1
.8bc5	b0 ee		bcs $8bb5			bcs 	_FLBCLoop
.8bc7	38		sec				sec 								; make U/C
.8bc8	e9 20		sbc #$20			sbc 	#32
.8bca	9d 06 08	sta $0806,x			sta	 	lineBuffer-1,x 				; write back
.8bcd	80 e6		bra $8bb5			bra 	_FLBCLoop
.8bcf					_FLBCInQuotes:
.8bcf	e8		inx				inx 								; advance
.8bd0	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get next
.8bd3	f0 07		beq $8bdc			beq 	_FLBCExit 					; exit on EOS
.8bd5	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8bd7	d0 f6		bne $8bcf			bne 	_FLBCInQuotes
.8bd9	e8		inx				inx 								; skip over it
.8bda	80 d9		bra $8bb5			bra 	_FLBCLoop
.8bdc					_FLBCExit:
.8bdc	60		rts				rts
.8bdd					TokeniseExtractLineNumber:
.8bdd	ad 09 07	lda $0709			lda 	tokenLineNumber+1 			; push current value on stack
.8be0	48		pha				pha
.8be1	ad 08 07	lda $0708			lda 	tokenLineNumber
.8be4	48		pha				pha
.8be5	20 1b 8c	jsr $8c1b			jsr 	_TELNTimes2 				; line # x 4
.8be8	20 1b 8c	jsr $8c1b			jsr 	_TELNTimes2 				; line # x 2
.8beb	18		clc				clc 								; add stacked value
.8bec	68		pla				pla
.8bed	6d 08 07	adc $0708			adc 	tokenLineNumber
.8bf0	8d 08 07	sta $0708			sta 	tokenLineNumber
.8bf3	68		pla				pla
.8bf4	6d 09 07	adc $0709			adc 	tokenLineNumber+1
.8bf7	8d 09 07	sta $0709			sta 	tokenLineNumber+1 			; line # x 5
.8bfa	20 1b 8c	jsr $8c1b			jsr 	_TELNTimes2 				; line # x 10
.8bfd	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get and consume character
.8c00	e8		inx				inx
.8c01	29 0f		and #$0f			and 	#15 						; add to line #
.8c03	18		clc				clc
.8c04	6d 08 07	adc $0708			adc 	tokenLineNumber
.8c07	8d 08 07	sta $0708			sta 	tokenLineNumber
.8c0a	90 03		bcc $8c0f			bcc 	_TLENNoCarry
.8c0c	ee 09 07	inc $0709			inc 	tokenLineNumber+1
.8c0f					_TLENNoCarry:
.8c0f	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; more digits ?
.8c12	c9 30		cmp #$30			cmp 	#'0'
.8c14	90 04		bcc $8c1a			bcc 	_TLENExit
.8c16	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c18	90 c3		bcc $8bdd			bcc 	TokeniseExtractLineNumber
.8c1a					_TLENExit:
.8c1a	60		rts				rts
.8c1b					_TELNTimes2:
.8c1b	0e 08 07	asl $0708			asl 	tokenLineNumber
.8c1e	2e 09 07	rol $0709			rol 	tokenLineNumber+1
.8c21	60		rts				rts
.8c22					TokeniseWriteByte:
.8c22	da		phx				phx
.8c23	ae 07 07	ldx $0707			ldx 	tokenOffset 				; next slot to write to
.8c26	9d 07 07	sta $0707,x			sta 	tokenOffset,x 				; write byte out
.8c29	ee 07 07	inc $0707			inc 	tokenOffset 				; advance slot.
.8c2c	fa		plx				plx
.8c2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8c2e					CheckCreateVariableRecord:
.8c2e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8c30	85 36		sta $36				sta 	0+zTemp0
.8c32	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c34	85 37		sta $37				sta 	1+zTemp0
.8c36	20 1c 88	jsr $881c			jsr 	VariableOpen 				; make variable space available
.8c39					_CCVSearch:
.8c39	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8c3b	f0 2c		beq $8c69			beq 	_CCVFail
.8c3d	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8c3f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8c41	cd 03 07	cmp $0703			cmp 	identHash
.8c44	d0 16		bne $8c5c			bne 	_CCVNext
.8c46	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8c48	ae 00 07	ldx $0700			ldx 	identStart
.8c4b					_CCVCompare:
.8c4b	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8c4e	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8c50	e8		inx				inx 								; advance pointers
.8c51	c8		iny				iny
.8c52	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8c53	d0 07		bne $8c5c			bne 	_CCVNext  					; didn't match go to next.
.8c55	90 f4		bcc $8c4b			bcc 	_CCVCompare 				; not finished yet.
.8c57	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8c5a	f0 41		beq $8c9d			beq 	_CCVFound 					; yes, we were successful
.8c5c					_CCVNext:
.8c5c	18		clc				clc
.8c5d	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8c5f	65 36		adc $36				adc 	zTemp0
.8c61	85 36		sta $36				sta 	zTemp0
.8c63	90 d4		bcc $8c39			bcc 	_CCVSearch
.8c65	e6 37		inc $37				inc 	zTemp0+1
.8c67	80 d0		bra $8c39			bra 	_CCVSearch
.8c69					_CCVFail:
.8c69	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8c6b	ad 03 07	lda $0703			lda 	identHash
.8c6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8c70	c8		iny				iny 								; offset 2 is the type byte
.8c71	ad 04 07	lda $0704			lda 	identTypeByte
.8c74	91 36		sta ($36),y			sta 	(zTemp0),y
.8c76	c8		iny				iny
.8c77					_CCVData:
.8c77	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8c79	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7b	c8		iny				iny
.8c7c	c0 08		cpy #$08			cpy 	#8
.8c7e	90 f7		bcc $8c77			bcc 	_CCVData
.8c80	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8c83					_CCVCopyName:
.8c83	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8c86	91 36		sta ($36),y			sta 	(zTemp0),y
.8c88	e8		inx				inx
.8c89	c8		iny				iny
.8c8a	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8c8d	d0 f4		bne $8c83			bne 	_CCVCopyName
.8c8f	98		tya				tya 								; patch offset
.8c90	92 36		sta ($36)			sta 	(zTemp0)
.8c92	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8c94	91 36		sta ($36),y			sta 	(zTemp0),y
.8c96	88		dey				dey
.8c97	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8c99	09 80		ora #$80			ora 	#$80
.8c9b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c9d					_CCVFound:
.8c9d	20 1d 88	jsr $881d			jsr 	VariableClose 				; map out variables, perhaps.
.8ca0	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8ca2	38		sec				sec
.8ca3	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8ca5	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8ca7	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8caa	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8cac	20 22 8c	jsr $8c22			jsr 	TokeniseWriteByte
.8caf	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
