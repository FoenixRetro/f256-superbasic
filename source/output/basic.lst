
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 15:35:35 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 cc 81	jsr $81cc			jsr 	NewCommand 					; erase current program
.8006	20 de 8d	jsr $8dde			jsr 	BackloadProgram
.8009	4c 3a 82	jmp $823a			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 1d 99	jsr $991d			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	3d 84					.word	ShiftLeft                        ; $00 <<
>8016	37 83					.word	BinaryCompareLessEqual           ; $01 <=
>8018	2d 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	84 97					.word	SyntaxError                      ; $03 !!3
>801c	84 97					.word	SyntaxError                      ; $04 ><
>801e	41 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	40 84					.word	ShiftRight                       ; $06 >>
>8022	84 97					.word	SyntaxError                      ; $07 !!7
>8024	84 97					.word	SyntaxError                      ; $08 !!8
>8026	84 97					.word	SyntaxError                      ; $09 !!9
>8028	84 97					.word	SyntaxError                      ; $0a !!10
>802a	84 97					.word	SyntaxError                      ; $0b !!11
>802c	84 97					.word	SyntaxError                      ; $0c !!12
>802e	84 97					.word	SyntaxError                      ; $0d !!13
>8030	84 97					.word	SyntaxError                      ; $0e !!14
>8032	84 97					.word	SyntaxError                      ; $0f !!15
>8034	84 97					.word	SyntaxError                      ; $10 @
>8036	84 97					.word	SyntaxError                      ; $11 !!17
>8038	84 97					.word	SyntaxError                      ; $12 !!18
>803a	84 97					.word	SyntaxError                      ; $13 [
>803c	e4 92					.word	IntegerDivide                    ; $14 \
>803e	84 97					.word	SyntaxError                      ; $15 ]
>8040	c6 85					.word	EorInteger                       ; $16 ^
>8042	84 97					.word	SyntaxError                      ; $17 _
>8044	84 97					.word	SyntaxError                      ; $18 `
>8046	84 97					.word	SyntaxError                      ; $19 !!25
>8048	84 97					.word	SyntaxError                      ; $1a !!26
>804a	84 97					.word	SyntaxError                      ; $1b {
>804c	80 85					.word	OraInteger                       ; $1c |
>804e	84 97					.word	SyntaxError                      ; $1d }
>8050	84 97					.word	SyntaxError                      ; $1e ~
>8052	84 97					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	84 97					.word	SyntaxError                      ; $20
>8056	0c 86					.word	WordIndirect                     ; $21 !
>8058	84 97					.word	SyntaxError                      ; $22 "
>805a	84 97					.word	SyntaxError                      ; $23 #
>805c	84 97					.word	SyntaxError                      ; $24 $
>805e	31 93					.word	IntegerModulus                   ; $25 %
>8060	3a 85					.word	AndInteger                       ; $26 &
>8062	84 97					.word	SyntaxError                      ; $27 '
>8064	84 97					.word	SyntaxError                      ; $28 (
>8066	84 97					.word	SyntaxError                      ; $29 )
>8068	a6 93					.word	MulInteger                       ; $2a *
>806a	d4 84					.word	AddInteger                       ; $2b +
>806c	84 97					.word	SyntaxError                      ; $2c ,
>806e	0f 85					.word	SubInteger                       ; $2d -
>8070	84 97					.word	SyntaxError                      ; $2e .
>8072	3d 95					.word	FDivideCommand                   ; $2f /
>8074	84 97					.word	SyntaxError                      ; $30 0
>8076	84 97					.word	SyntaxError                      ; $31 1
>8078	84 97					.word	SyntaxError                      ; $32 2
>807a	84 97					.word	SyntaxError                      ; $33 3
>807c	84 97					.word	SyntaxError                      ; $34 4
>807e	84 97					.word	SyntaxError                      ; $35 5
>8080	84 97					.word	SyntaxError                      ; $36 6
>8082	84 97					.word	SyntaxError                      ; $37 7
>8084	84 97					.word	SyntaxError                      ; $38 8
>8086	84 97					.word	SyntaxError                      ; $39 9
>8088	84 97					.word	SyntaxError                      ; $3a :
>808a	84 97					.word	SyntaxError                      ; $3b ;
>808c	19 83					.word	BinaryCompareLess                ; $3c <
>808e	0f 83					.word	BinaryCompareEqual               ; $3d =
>8090	23 83					.word	BinaryCompareGreater             ; $3e >
>8092	33 86					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	85 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	92 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	84 97					.word	SyntaxError                      ; $82 !2:SH2
>809a	83 96					.word	AbsUnary                         ; $83 ABS(
>809c	76 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	93 96					.word	AscUnary                         ; $85 ASC(
>80a0	13 8b					.word	ChrUnary                         ; $86 CHR$(
>80a2	0b 83					.word	UnaryFalse                       ; $87 FALSE
>80a4	a0 96					.word	FracUnary                        ; $88 FRAC(
>80a6	b6 96					.word	IntUnary                         ; $89 INT(
>80a8	0c 97					.word	IsValUnary                       ; $8a ISVAL(
>80aa	ed 8b					.word	Unary_Left                       ; $8b LEFT$(
>80ac	c8 96					.word	LenUnary                         ; $8c LEN(
>80ae	17 8c					.word	Unary_Mid                        ; $8d MID$(
>80b0	b0 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	fd 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	c6 8a					.word	Unary_Rnd                        ; $90 RND(
>80b6	e2 96					.word	SgnUnary                         ; $91 SGN(
>80b8	25 8b					.word	SpcUnary                         ; $92 SPC(
>80ba	40 8b					.word	Unary_Str                        ; $93 STR$(
>80bc	ff 82					.word	UnaryTrue                        ; $94 TRUE
>80be	02 97					.word	ValUnary                         ; $95 VAL(
>80c0	84 97					.word	SyntaxError                      ; $96 FOR
>80c2	78 81					.word	IfCommand                        ; $97 IF
>80c4	84 97					.word	SyntaxError                      ; $98 PROC
>80c6	84 97					.word	SyntaxError                      ; $99 REPEAT
>80c8	84 97					.word	SyntaxError                      ; $9a WHILE
>80ca	84 97					.word	SyntaxError                      ; $9b ENDIF
>80cc	84 97					.word	SyntaxError                      ; $9c ENDPROC
>80ce	84 97					.word	SyntaxError                      ; $9d NEXT
>80d0	84 97					.word	SyntaxError                      ; $9e UNTIL
>80d2	84 97					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	84 97					.word	SyntaxError                      ; $a1 CLS
>80d8	84 97					.word	SyntaxError                      ; $a2 DATA
>80da	84 97					.word	SyntaxError                      ; $a3 DIM
>80dc	84 97					.word	SyntaxError                      ; $a4 GOSUB
>80de	65 81					.word	GotoCommand                      ; $a5 GOTO
>80e0	9d 81					.word	LetCommand                       ; $a6 LET
>80e2	d6 81					.word	Command_Print                    ; $a7 PRINT
>80e4	84 97					.word	SyntaxError                      ; $a8 READ
>80e6	2d 82					.word	RemCommand                       ; $a9 REM
>80e8	84 97					.word	SyntaxError                      ; $aa RETURN
>80ea	84 97					.word	SyntaxError                      ; $ab THEN
>80ec	84 97					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	84 97					.word	SyntaxError                      ; $80 !0:EOF
>80f0	84 97					.word	SyntaxError                      ; $81 !1:SH1
>80f2	84 97					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	62 81					.word	EndCommand                       ; $85 END
>80fa	84 97					.word	SyntaxError                      ; $86 LIST
>80fc	cc 81					.word	NewCommand                       ; $87 NEW
>80fe	84 97					.word	SyntaxError                      ; $88 RESTORE
>8100	3a 82					.word	CommandRUN                       ; $89 RUN
>8102	84 97					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	84 97					.word	SyntaxError                      ; $80 !0:EOF
>8106	84 97					.word	SyntaxError                      ; $81 !1:SH1
>8108	84 97					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 b8 8c	jsr $8cb8			jsr 	EvaluateInteger 			; the assert test
.810f	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 9a 82	jmp $829a		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 cd 8c	jsr $8ccd			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 d1 8d	jsr $8dd1			jsr 	StackReset
.815e	20 a9 98	jsr $98a9			jsr 	StringSystemInitialise
.8161	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8162					EndCommand:
.8162	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8165					GotoCommand:
.8165	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8167	20 cd 8c	jsr $8ccd			jsr 	Evaluate16BitInteger
.816a					GotoStackX:
.816a	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.816d	48		pha				pha 								; it is slightly inefficient, just in cases.
.816e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8171	fa		plx				plx
.8172	20 99 92	jsr $9299			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8175	4c 45 82	jmp $8245			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8178					IfCommand:
.8178	a2 00		ldx #$00			ldx 	#0 							; If what.
.817a	20 95 8c	jsr $8c95			jsr 	EvaluateNumber
.817d	b1 30		lda ($30),y			lda 	(codePtr),y
.817f	c9 ab		cmp #$ab			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8181	f0 04		beq $8187			beq 	_IfOldStyle
.8183	c9 a5		cmp #$a5			cmp 	#KWD_GOTO
.8185	d0 13		bne $819a			bne 	_IfStructured
.8187					_IfOldStyle:
.8187	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; is it zero
.818a	f0 0b		beq $8197			beq 	_IfFail 					; if fail, go to next line
.818c	b1 30		lda ($30),y			lda 	(codePtr),y
.818e	c8		iny				iny 								; consume GOTO or THEN
.818f	c9 a5		cmp #$a5			cmp 	#KWD_GOTO
.8191	f0 01		beq $8194			beq 	_IfGoto
.8193	60		rts				rts 								; if THEN just continue
.8194					_IfGoto:
.8194	4c 65 81	jmp $8165			jmp 	GotoCommand
.8197					_IfFail:
.8197	4c 85 82	jmp $8285			jmp 	EOLCommand
.819a					_IfStructured:
>819a	db						.byte 	$DB 						; causes a break in the emulator
.819b	80 fd		bra $819a			bra 	_IfStructured

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.819d					LetCommand:
.819d	a2 00		ldx #$00			ldx 	#0
.819f	ad 84 86	lda $8684			lda 	PrecedenceLevel+"*"			; precedence > this
.81a2	20 9e 86	jsr $869e			jsr 	EvaluateExpressionAtPrecedence
.81a5	a9 3d		lda #$3d			lda 	#"=" 						; check =
.81a7	20 db 92	jsr $92db			jsr 	CheckNextA
.81aa	e8		inx				inx 								; RHS
.81ab	20 9c 86	jsr $869c			jsr 	EvaluateExpression
.81ae	ca		dex				dex
.81af	20 b3 81	jsr $81b3			jsr 	AssignVariable
.81b2	60		rts				rts
.81b3					AssignVariable:
.81b3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.81b6	48		pha				pha 								; save a copy
.81b7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.81ba	29 10		and #$10			and 	#NSBIsString
.81bc	d0 0b		bne $81c9			bne 	_ASError
.81be	68		pla				pla 								; get back
.81bf	29 10		and #$10			and 	#NSBIsString 				; check type
.81c1	d0 03		bne $81c6			bne 	_ASString
.81c3	4c d9 86	jmp $86d9			jmp 	AssignNumber
.81c6					_ASString:
.81c6	4c 47 87	jmp $8747			jmp 	AssignString
.81c9					_ASError:
.81c9	4c 8e 97	jmp $978e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.81cc					NewCommand:
.81cc	20 48 92	jsr $9248			jsr 	MemoryNew
.81cf	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81d2	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.81d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.81d6					Command_Print:
.81d6	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81d7					_CPLoop:
.81d7	08		php				php 								; save last action flag
.81d8	b1 30		lda ($30),y			lda 	(codePtr),y
.81da	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81dc	f0 46		beq $8224			beq 	_CPExit
.81de	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81e0	f0 42		beq $8224			beq 	_CPExit
.81e2	68		pla				pla 								; throw last action flag
.81e3	b1 30		lda ($30),y			lda 	(codePtr),y
.81e5	c8		iny				iny
.81e6	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81e8	f0 37		beq $8221			beq 	_CPContinueWithSameLine
.81ea	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81ec	f0 2e		beq $821c			beq 	_CPTab
.81ee	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81f0	f0 26		beq $8218			beq 	_CPNewLine
.81f2	88		dey				dey 								; undo the get.
.81f3	a2 00		ldx #$00			ldx 	#0
.81f5	20 8c 8c	jsr $8c8c			jsr 	EvaluateValue 				; get a value into slot 0
.81f8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81fb	29 10		and #$10			and 	#NSBIsString
.81fd	f0 0b		beq $820a			beq 	_CPNumber
.81ff	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8202	ad 08 06	lda $0608			lda 	NSMantissa0
.8205	20 ec 82	jsr $82ec			jsr 	PrintStringXA
.8208	80 cc		bra $81d6			bra 	Command_Print 				; loop round clearing carry so NL if end
.820a					_CPNumber:
.820a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.820c	20 62 8b	jsr $8b62			jsr 	ConvertNumberToString 		; convert to string
.820f	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8211	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8213	20 ec 82	jsr $82ec			jsr 	PrintStringXA
.8216	80 be		bra $81d6			bra 	Command_Print 				; loop round clearing carry so NL if end
.8218					_CPNewLine:
.8218	a9 0d		lda #$0d			lda 	#13
.821a	80 02		bra $821e			bra 	_CPPrintChar
.821c					_CPTab:
.821c	a9 09		lda #$09			lda 	#9 							; print TAB
.821e					_CPPrintChar:
.821e	20 1d 99	jsr $991d			jsr 	EXTPrintCharacter
.8221					_CPContinueWithSameLine:
.8221	38		sec				sec 								; loop round with carry set, which
.8222	80 b3		bra $81d7			bra 	_CPLoop 					; will inhibit final CR
.8224					_CPExit:
.8224	28		plp				plp 								; get last action flag
.8225	b0 05		bcs $822c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8227	a9 0d		lda #$0d			lda 	#13 						; print new line
.8229	20 1d 99	jsr $991d			jsr 	EXTPrintCharacter
.822c					_CPExit2:
.822c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.822d					RemCommand:
.822d	b1 30		lda ($30),y			lda 	(codePtr),y
.822f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8231	d0 06		bne $8239			bne 	_RMExit
.8233	c8		iny				iny
.8234	98		tya				tya
.8235	38		sec				sec
.8236	71 30		adc ($30),y			adc 	(codePtr),y
.8238	a8		tay				tay
.8239					_RMExit:
.8239	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.823a					CommandRUN:
.823a	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.823d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.823f	85 30		sta $30				sta 	codePtr
.8241	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8243	85 31		sta $31				sta 	codePtr+1
.8245					RUNNewLine:
.8245	b2 30		lda ($30)			lda 	(codePtr)
.8247	f0 39		beq $8282			beq 	CRNoProgram         		; no then END.
.8249	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.824b	9a		txs				txs
.824c					RUNCodePointerLine:
.824c	a0 02		ldy #$02			ldy 	#2 							; start of program
.824e					_CRIncMainLoop:
.824e	c8		iny				iny
.824f					_CRMainLoop:
.824f	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8252	b1 30		lda ($30),y			lda 	(codePtr),y
.8254	10 10		bpl $8266			bpl 	_CRNotKeyword
.8256	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8258	b0 04		bcs $825e			bcs 	_CRIsKeyword
.825a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.825c	b0 1e		bcs $827c			bcs		_CRSyntaxError
.825e					_CRIsKeyword:
.825e	c8		iny				iny 								; consume command
.825f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8260	aa		tax				tax 								; put in X for vector jump
.8261	20 7f 82	jsr $827f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8264	80 e9		bra $824f			bra 	_CRMainLoop 				; and loop round
.8266					_CRNotKeyword:
.8266	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8268	f0 e4		beq $824e			beq 	_CRIncMainLoop
.826a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.826c	90 05		bcc $8273			bcc 	_CRNotVariable
.826e					_CRGoLet:
.826e	20 9d 81	jsr $819d			jsr 	LetCommand
.8271	80 dc		bra $824f			bra 	_CRMainLoop
.8273					_CRNotVariable:
.8273	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.8275	f0 f7		beq $826e			beq 	_CRGoLet
.8277	c9 21		cmp #$21			cmp 	#KWD_PLING
.8279	f0 f3		beq $826e			beq 	_CRGoLet
>827b	db						.byte 	$DB 						; causes a break in the emulator
.827c					_CRSyntaxError:
.827c	4c 84 97	jmp $9784			jmp 	SyntaxError
.827f					_CRCallVector0:
.827f	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8282					CRNoProgram:
.8282	4c 62 81	jmp $8162			jmp 	EndCommand
.8285					EOLCommand:
.8285	18		clc				clc
.8286	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8288	65 30		adc $30				adc 	codePtr
.828a	85 30		sta $30				sta 	codePtr
.828c	90 02		bcc $8290			bcc 	_CREExit
.828e	e6 31		inc $31				inc 	codePtr+1
.8290					_CREExit:
.8290	80 b3		bra $8245			bra 	RunNewLine
.8292					Shift1Command:
.8292	b1 30		lda ($30),y			lda 	(codePtr),y
.8294	c8		iny				iny
.8295	0a		asl a				asl 	a
.8296	aa		tax				tax
.8297	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.92cb					CheckRightBracket:
.92cb	b1 30		lda ($30),y			lda 	(codePtr),y
.92cd	c8		iny				iny
.92ce	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.92d0	d0 0f		bne $92e1			bne 	CNAFail
.92d2	60		rts				rts
.92d3					CheckComma:
.92d3	b1 30		lda ($30),y			lda 	(codePtr),y
.92d5	c8		iny				iny
.92d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.92d8	d0 07		bne $92e1			bne 	CNAFail
.92da	60		rts				rts
.92db					CheckNextA:
.92db	d1 30		cmp ($30),y			cmp 	(codePtr),y
.92dd	d0 02		bne $92e1			bne 	CNAFail
.92df	c8		iny				iny 								; skip character
.92e0	60		rts				rts 								; and exit
.92e1					CNAFail:
.92e1	4c 84 97	jmp $9784			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.829a					ErrorHandler:
.829a	a8		tay				tay 								; find the error text
.829b	f0 42		beq $82df			beq 	_EHEnd
.829d	a2 00		ldx #$00			ldx 	#0
.829f					_EHFind:
.829f	88		dey				dey 								; found the error text ?
.82a0	f0 0a		beq $82ac			beq 	_EHFound
.82a2					_EHFindZero:
.82a2	bd 9d 97	lda $979d,x			lda 	ErrorText,x 				; find the next error
.82a5	e8		inx				inx
.82a6	c9 00		cmp #$00			cmp 	#0
.82a8	d0 f8		bne $82a2			bne 	_EHFindZero
.82aa	80 f3		bra $829f			bra 	_EHFind
.82ac					_EHFound:
.82ac	bd 9d 97	lda $979d,x			lda 	ErrorText,x 				; print the message
.82af	20 1d 99	jsr $991d			jsr 	EXTPrintCharacter
.82b2	e8		inx				inx
.82b3	bd 9d 97	lda $979d,x			lda 	ErrorText,x
.82b6	d0 f4		bne $82ac			bne 	_EHFound
.82b8	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.82ba	b1 30		lda ($30),y			lda 	(codePtr),y
.82bc	d0 05		bne $82c3			bne 	_EHAtMsg
.82be	c8		iny				iny
.82bf	b1 30		lda ($30),y			lda 	(codePtr),y
.82c1	f0 17		beq $82da			beq 	_EHCREnd
.82c3					_EHAtMsg:
.82c3	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.82c5	a9 e2		lda #$e2			lda 	#_AtMsg & $FF
.82c7	20 ec 82	jsr $82ec			jsr 	PrintStringXA
.82ca	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.82cc	b1 30		lda ($30),y			lda 	(codePtr),y
.82ce	48		pha				pha
.82cf	c8		iny				iny
.82d0	b1 30		lda ($30),y			lda 	(codePtr),y
.82d2	aa		tax				tax
.82d3	68		pla				pla
.82d4	20 27 94	jsr $9427			jsr 	ConvertInt16 				; convert XA to string
.82d7	20 ec 82	jsr $82ec			jsr 	PrintStringXA 				; and print it.
.82da					_EHCREnd:
.82da	a9 0d		lda #$0d			lda 	#13 						; new line
.82dc	20 1d 99	jsr $991d			jsr 	EXTPrintCharacter
.82df					_EHEnd:
.82df	4c 0c 80	jmp $800c			jmp 	WarmStart
>82e2	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82ea	20 00
.82ec					PrintStringXA:
.82ec	5a		phy				phy
.82ed	86 37		stx $37				stx 	zTemp0+1
.82ef	85 36		sta $36				sta 	zTemp0
.82f1	a0 00		ldy #$00			ldy 	#0
.82f3					_PSXALoop:
.82f3	b1 36		lda ($36),y			lda 	(zTemp0),y
.82f5	f0 06		beq $82fd			beq 	_PSXAExit
.82f7	20 1d 99	jsr $991d			jsr 	EXTPrintCharacter
.82fa	c8		iny				iny
.82fb	80 f6		bra $82f3			bra 	_PSXALoop
.82fd					_PSXAExit:
.82fd	7a		ply				ply
.82fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82ff					UnaryTrue:
.82ff	fa		plx				plx
.8300					ReturnTrue:
.8300	a9 01		lda #$01			lda 	#1  						; set to 1
.8302	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.8305	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8307	9d 00 06	sta $0600,x			sta 	NSStatus,x
.830a	60		rts				rts
.830b					UnaryFalse:
.830b	fa		plx				plx
.830c					ReturnFalse:
.830c	4c 41 8d	jmp $8d41			jmp 	NSMSetZero 					; set it all to zero
.830f					BinaryCompareEqual:
.830f	fa		plx				plx
.8310	20 4b 83	jsr $834b			jsr 	CompareBaseCode
.8313	c9 00		cmp #$00			cmp 	#0
.8315	f0 e9		beq $8300			beq 	ReturnTrue
.8317	80 f3		bra $830c			bra 	ReturnFalse
.8319					BinaryCompareLess:
.8319	fa		plx				plx
.831a	20 4b 83	jsr $834b			jsr 	CompareBaseCode
.831d	c9 ff		cmp #$ff			cmp 	#$FF
.831f	f0 df		beq $8300			beq 	ReturnTrue
.8321	80 e9		bra $830c			bra 	ReturnFalse
.8323					BinaryCompareGreater:
.8323	fa		plx				plx
.8324	20 4b 83	jsr $834b			jsr 	CompareBaseCode
.8327	c9 01		cmp #$01			cmp 	#1
.8329	f0 d5		beq $8300			beq 	ReturnTrue
.832b	80 df		bra $830c			bra 	ReturnFalse
.832d					BinaryCompareNotEqual:
.832d	fa		plx				plx
.832e	20 4b 83	jsr $834b			jsr 	CompareBaseCode
.8331	c9 00		cmp #$00			cmp 	#0
.8333	d0 cb		bne $8300			bne 	ReturnTrue
.8335	80 d5		bra $830c			bra 	ReturnFalse
.8337					BinaryCompareLessEqual:
.8337	fa		plx				plx
.8338	20 4b 83	jsr $834b			jsr 	CompareBaseCode
.833b	c9 01		cmp #$01			cmp 	#1
.833d	d0 c1		bne $8300			bne 	ReturnTrue
.833f	80 cb		bra $830c			bra 	ReturnFalse
.8341					BinaryCompareGreaterEqual:
.8341	fa		plx				plx
.8342	20 4b 83	jsr $834b			jsr 	CompareBaseCode
.8345	c9 ff		cmp #$ff			cmp 	#$FF
.8347	d0 b7		bne $8300			bne 	ReturnTrue
.8349	80 c1		bra $830c			bra 	ReturnFalse
.834b					CompareBaseCode:
.834b	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; make both values if references.
.834e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8351	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8354	29 10		and #$10			and 	#NSTString
.8356	d0 40		bne $8398			bne 	_CBCString
.8358	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.835b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.835e	d0 3b		bne $839b			bne 	_CBCFloat
.8360	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8363	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8366	29 08		and #$08			and 	#NSTFloat
.8368	d0 31		bne $839b			bne 	_CBCFloat
.836a	20 9e 83	jsr $839e			jsr 	CompareFixMinusZero
.836d	e8		inx				inx
.836e	20 9e 83	jsr $839e			jsr 	CompareFixMinusZero
.8371	ca		dex				dex
.8372	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8375	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8378	10 0b		bpl $8385			bpl 	_CDCSameSign
.837a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.837d	30 16		bmi $8395			bmi 	_CBCLess 					; return $FF
.837f					_CBCGreater:
.837f	a9 01		lda #$01			lda 	#1
.8381	60		rts				rts
.8382					_CBCEqual:
.8382	a9 00		lda #$00			lda 	#0
.8384	60		rts				rts
.8385					_CDCSameSign:
.8385	20 ae 84	jsr $84ae			jsr 	SubTopTwoStack 				; unsigned subtract
.8388	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; or the mantissa together
.838b	f0 f5		beq $8382			beq 	_CBCEqual 					; -0 == 0
.838d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8390	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8393	10 ea		bpl $837f			bpl 	_CBCGreater
.8395					_CBCLess:
.8395	a9 ff		lda #$ff			lda 	#$FF
.8397	60		rts				rts
.8398					_CBCString:
.8398	4c 04 84	jmp $8404			jmp 	CompareStrings
.839b					_CBCFloat:
.839b	4c 23 95	jmp $9523			jmp 	CompareFloat
.839e					CompareFixMinusZero:
.839e	20 71 8d	jsr $8d71			jsr 	NSMIsZero
.83a1	d0 03		bne $83a6			bne 	_CFXMZNotZero
.83a3	9e 00 06	stz $0600,x			stz 	NSStatus,x
.83a6					_CFXMZNotZero:
.83a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.83a7					StringConcat:
.83a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.83aa	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83ad	29 18		and #$18			and 	#NSBTypeMask
.83af	c9 10		cmp #$10			cmp 	#NSTString
.83b1	d0 4e		bne $8401			bne		_SCType
.83b3	64 38		stz $38				stz 	zTemp1 						; counting total length
.83b5	e8		inx				inx
.83b6	20 d4 83	jsr $83d4			jsr 	_SCSetupZ0 					; setup for second
.83b9	20 df 83	jsr $83df			jsr 	_SCLengthZ0 				; length for second
.83bc	ca		dex				dex
.83bd	20 d4 83	jsr $83d4			jsr 	_SCSetupZ0 					; setup for first
.83c0	20 df 83	jsr $83df			jsr 	_SCLengthZ0 				; length for first
.83c3	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.83c5	20 ca 98	jsr $98ca			jsr 	StringTempAllocate
.83c8	20 f2 83	jsr $83f2			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.83cb	e8		inx				inx
.83cc	20 d4 83	jsr $83d4			jsr 	_SCSetupZ0 					; copy second out
.83cf	20 f2 83	jsr $83f2			jsr 	_SCCopy
.83d2	ca		dex				dex
.83d3	60		rts				rts
.83d4					_SCSetupZ0:
.83d4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.83d7	85 36		sta $36				sta 	zTemp0
.83d9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83dc	85 37		sta $37				sta 	zTemp0+1
.83de	60		rts				rts
.83df					_SCLengthZ0:
.83df	5a		phy				phy
.83e0	a0 00		ldy #$00			ldy 	#0
.83e2					_SCLenLoop:
.83e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.83e4	f0 0a		beq $83f0			beq 	_SCLExit
.83e6	c8		iny				iny
.83e7	e6 38		inc $38				inc 	zTemp1
.83e9	10 f7		bpl $83e2			bpl		_SCLenLoop
.83eb	a9 09		lda #$09		lda	#9
.83ed	4c 9a 82	jmp $829a		jmp	ErrorHandler
.83f0					_SCLExit:
.83f0	7a		ply				ply
.83f1	60		rts				rts
.83f2					_SCCopy:
.83f2	5a		phy				phy
.83f3	a0 00		ldy #$00			ldy 	#0
.83f5					_SCCopyLoop:
.83f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.83f7	f0 06		beq $83ff			beq 	_SCCExit
.83f9	20 08 99	jsr $9908			jsr 	StringTempWrite
.83fc	c8		iny				iny
.83fd	80 f6		bra $83f5			bra 	_SCCopyLoop
.83ff					_SCCExit:
.83ff	7a		ply				ply
.8400	60		rts				rts
.8401					_SCType:
.8401	4c 8e 97	jmp $978e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.92e4					IntegerDivide:
.92e4	fa		plx				plx
.92e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.92e8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92eb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92ec	0a		asl a				asl 	a
.92ed	10 05		bpl $92f4			bpl 	_NotRef
.92ef	48		pha				pha
.92f0	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92f3	68		pla				pla
.92f4					_NotRef:
.92f4	0a		asl a				asl 	a
.92f5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92f7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92fa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.92fd	f0 03		beq $9302			beq 	_IntegerCode 				; if clear, then we have two integers
.92ff	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.9302					_IntegerCode:
.9302	20 24 93	jsr $9324			jsr 	CheckDivideZero 			; do div zero check
.9305	20 5c 93	jsr $935c			jsr 	Int32Divide 				; do the division
.9308	20 19 94	jsr $9419			jsr 	CalculateSign 				; calculate result sign
.930b					NSMCopyPlusTwoToZero:
.930b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.930e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9311	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9314	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9317	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.931a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.931d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9320	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9323	60		rts				rts
.9324					CheckDivideZero:
.9324	e8		inx				inx
.9325	20 71 8d	jsr $8d71			jsr 	NSMIsZero
.9328	f0 02		beq $932c			beq 	_CDVError
.932a	ca		dex				dex
.932b	60		rts				rts
.932c					_CDVError:
.932c	a9 03		lda #$03		lda	#3
.932e	4c 9a 82	jmp $829a		jmp	ErrorHandler
.9331					IntegerModulus:
.9331	fa		plx				plx
.9332	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9335	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9338	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9339	0a		asl a				asl 	a
.933a	10 05		bpl $9341			bpl 	_NotRef
.933c	48		pha				pha
.933d	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9340	68		pla				pla
.9341					_NotRef:
.9341	0a		asl a				asl 	a
.9342	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9344	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9347	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.934a	f0 03		beq $934f			beq 	_IntegerCode 				; if clear, then we have two integers
.934c	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.934f					_IntegerCode:
.934f	20 24 93	jsr $9324			jsr 	CheckDivideZero 			; do div zero check
.9352	20 5c 93	jsr $935c			jsr 	Int32Divide 				; do the division
.9355	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9358	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.935b	60		rts				rts
.935c					Int32Divide:
.935c	48		pha				pha 								; save AXY
.935d	5a		phy				phy
.935e	20 18 8d	jsr $8d18			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9361	20 3d 8d	jsr $8d3d			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9364	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9366					_I32DivideLoop:
.9366	e8		inx				inx
.9367	e8		inx				inx
.9368	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.936b	ca		dex				dex
.936c	ca		dex				dex
.936d	20 57 8d	jsr $8d57			jsr 	NSMRotateLeft
.9370	20 9c 93	jsr $939c			jsr 	DivideCheckSubtract 		; check if subtract possible
.9373	90 03		bcc $9378			bcc 	_I32DivideNoCarryIn
.9375	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9378					_I32DivideNoCarryIn:
.9378	88		dey				dey 								; loop round till division completed.
.9379	d0 eb		bne $9366			bne 	_I32DivideLoop
.937b	7a		ply				ply 								; restore AXY and exit
.937c	68		pla				pla
.937d	60		rts				rts
.937e					Int32ShiftDivide:
.937e	48		pha				pha 								; save AY
.937f	5a		phy				phy
.9380	e8		inx				inx 								; clear S[X+2]
.9381	e8		inx				inx
.9382	20 41 8d	jsr $8d41			jsr 	NSMSetZero
.9385	ca		dex				dex
.9386	ca		dex				dex
.9387	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9389					_I32SDLoop:
.9389	20 9c 93	jsr $939c			jsr 	DivideCheckSubtract 		; check if subtract possible
.938c	e8		inx				inx
.938d	e8		inx				inx
.938e	20 57 8d	jsr $8d57			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9391	ca		dex				dex
.9392	ca		dex				dex
.9393	20 57 8d	jsr $8d57			jsr 	NSMRotateLeft
.9396	88		dey				dey 	 							; do 31 times
.9397	d0 f0		bne $9389			bne 	_I32SDLoop
.9399	7a		ply				ply 								; restore AY and exit
.939a	68		pla				pla
.939b	60		rts				rts
.939c					DivideCheckSubtract:
.939c	20 ae 84	jsr $84ae			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.939f	b0 04		bcs $93a5			bcs 	_DCSExit 					; if carry set, then could do, exit
.93a1	20 88 84	jsr $8488			jsr 	AddTopTwoStack 				; add it back in
.93a4	18		clc				clc 								; and return False
.93a5					_DCSExit:
.93a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.93a6					MulInteger:
.93a6	fa		plx				plx
.93a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.93aa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.93ad	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93ae	0a		asl a				asl 	a
.93af	10 05		bpl $93b6			bpl 	_NotRef
.93b1	48		pha				pha
.93b2	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93b5	68		pla				pla
.93b6					_NotRef:
.93b6	0a		asl a				asl 	a 							; put MSB of type into A:7
.93b7	30 0b		bmi $93c4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.93b9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93bc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.93bf	f0 06		beq $93c7			beq 	_IntegerCode 				; if clear, then we have two integers
.93c1	4c fa 95	jmp $95fa			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.93c4					_StringData:
.93c4	4c 98 97	jmp $9798			jmp 	NotDoneError							; at least one string - don't know both are strings.
.93c7					_IntegerCode:
.93c7	20 d4 93	jsr $93d4			jsr 	MultiplyShort
.93ca	c9 00		cmp #$00			cmp 	#0
.93cc	f0 05		beq $93d3			beq 	_MIExit
.93ce	a9 04		lda #$04		lda	#4
.93d0	4c 9a 82	jmp $829a		jmp	ErrorHandler
.93d3					_MIExit:
.93d3	60		rts				rts
.93d4					MultiplyShort:
.93d4	5a		phy				phy 								; save Y
.93d5	20 18 8d	jsr $8d18			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.93d8	20 3d 8d	jsr $8d3d			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.93db	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.93dd					_I32MLoop:
.93dd	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.93e0	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.93e3	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.93e6	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.93e9	f0 28		beq $9413			beq 	_I32MExit 					; exit if zero
.93eb	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.93ee	29 01		and #$01			and 	#1
.93f0	f0 0e		beq $9400			beq 	_I32MNoAdd
.93f2	20 88 84	jsr $8488			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.93f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.93f8	10 06		bpl $9400			bpl 	_I32MNoAdd
.93fa					_I32ShiftRight:
.93fa	20 64 8d	jsr $8d64			jsr 	NSMShiftRight 				; shift S[X] right
.93fd	c8		iny				iny 								; increment shift count
.93fe	80 0a		bra $940a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9400					_I32MNoAdd:
.9400	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9403	70 f5		bvs $93fa			bvs 	_I32ShiftRight 				; instead.
.9405	e8		inx				inx
.9406	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9409	ca		dex				dex
.940a					_I32MShiftUpper:
.940a	e8		inx				inx 								; shift S[X+2] right
.940b	e8		inx				inx
.940c	20 64 8d	jsr $8d64			jsr 	NSMShiftRight
.940f	ca		dex				dex
.9410	ca		dex				dex
.9411	80 ca		bra $93dd			bra 	_I32MLoop 					; try again.
.9413					_I32MExit:
.9413	20 19 94	jsr $9419			jsr 	CalculateSign
.9416	98		tya				tya 								; shift in A
.9417	7a		ply				ply 								; restore Y and exit
.9418	60		rts				rts
.9419					CalculateSign:
.9419	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.941c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.941f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9422	0a		asl a				asl 	a 							; shift bit 7 into carry
.9423	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9426	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8404					CompareStrings:
.8404	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8407	3d 01 06	and $0601,x			and 	NSStatus+1,x
.840a	29 10		and #$10			and 	#NSBIsString
.840c	f0 2c		beq $843a			beq 	_CSTypeError
.840e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8411	85 36		sta $36				sta 	zTemp0
.8413	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8416	85 37		sta $37				sta 	zTemp0+1
.8418	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.841b	85 38		sta $38				sta 	zTemp1
.841d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8420	85 39		sta $39				sta 	zTemp1+1
.8422	5a		phy				phy 								; save Y so we can access strings
.8423	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8425					_CSLoop:
.8425	c8		iny				iny
.8426	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8428	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.842a	d0 06		bne $8432			bne 	_CSDifferent
.842c	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.842e	d0 f5		bne $8425			bne 	_CSLoop 					; still comparing
.8430					_CSExit:
.8430	7a		ply				ply 								; reached end, return zero in A from EOS
.8431	60		rts				rts
.8432					_CSDifferent:
.8432	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8434	90 fa		bcc $8430			bcc		_CSExit
.8436	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8438	80 f6		bra $8430			bra 	_CSExit
.843a					_CSTypeError:
.843a	4c 8e 97	jmp $978e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.843d					ShiftLeft:
.843d	38		sec				sec
.843e	80 01		bra $8441			bra 	ShiftMain
.8440					ShiftRight:
.8440	18		clc				clc
.8441					ShiftMain:
.8441	fa		plx				plx 								; restore X
.8442	08		php				php 								; save direction
.8443	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8446	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8449	0a		asl a				asl 	a 							; shift reference bit into sign bit
.844a	0a		asl a				asl 	a
.844b	10 05		bpl $8452			bpl 	_NotRef
.844d	48		pha				pha
.844e	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8451	68		pla				pla
.8452					_NotRef:
.8452	0a		asl a				asl 	a
.8453	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8455	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8458	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.845b	f0 03		beq $8460			beq 	_IntegerCode 				; if clear, then we have two integers
.845d	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.8460					_IntegerCode:
.8460	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8463	29 e0		and #$e0			and 	#$E0
.8465	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8468	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.846b	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.846e	d0 13		bne $8483			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8470					_SMLoop:
.8470	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8473	30 11		bmi $8486			bmi 	_SMExit 					; exit if done.
.8475	28		plp				plp 								; restore direcition setting
.8476	08		php				php
.8477	90 05		bcc $847e			bcc 	_SMRight
.8479	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; shift left if CS
.847c	80 f2		bra $8470			bra 	_SMLoop
.847e					_SMRight:
.847e	20 64 8d	jsr $8d64			jsr 	NSMShiftRight 				; shift right if CC
.8481	80 ed		bra $8470			bra 	_SMLoop
.8483					_SMExit0:
.8483	20 41 8d	jsr $8d41			jsr 	NSMSetZero 					; return zero.
.8486					_SMExit:
.8486	28		plp				plp 								; throw direction
.8487	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8488					AddTopTwoStack:
.8488	18		clc				clc
.8489	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.848c	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.848f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8492	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8495	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8498	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.849b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.849e	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.84a1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84a4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84a7	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.84aa	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84ad	60		rts				rts
.84ae					SubTopTwoStack:
.84ae	38		sec				sec
.84af	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84b2	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.84b5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84b8	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84bb	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.84be	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84c1	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.84c4	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.84c7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84ca	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84cd	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.84d0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84d3	60		rts				rts
.84d4					AddInteger:
.84d4	fa		plx				plx
.84d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84d8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84db	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84dc	0a		asl a				asl 	a
.84dd	10 05		bpl $84e4			bpl 	_NotRef
.84df	48		pha				pha
.84e0	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84e3	68		pla				pla
.84e4					_NotRef:
.84e4	0a		asl a				asl 	a 							; put MSB of type into A:7
.84e5	30 0b		bmi $84f2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84e7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84ea	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ed	f0 06		beq $84f5			beq 	_IntegerCode 				; if clear, then we have two integers
.84ef	4c 82 94	jmp $9482			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84f2					_StringData:
.84f2	4c a7 83	jmp $83a7			jmp 	StringConcat							; at least one string - don't know both are strings.
.84f5					_IntegerCode:
.84f5					AddCode:
.84f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84f8	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84fb	10 8b		bpl $8488			bpl 	AddTopTwoStack
.84fd	20 ae 84	jsr $84ae			jsr 	SubTopTwoStack 				; do a physical subtraction
.8500	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8503	10 09		bpl $850e			bpl 	_AddExit
.8505	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8508	9d 00 06	sta $0600,x			sta 	NSStatus,x
.850b	20 f6 8c	jsr $8cf6			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.850e					_AddExit:
.850e	60		rts				rts
.850f					SubInteger:
.850f	fa		plx				plx
.8510	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8513	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8516	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8517	0a		asl a				asl 	a
.8518	10 05		bpl $851f			bpl 	_NotRef
.851a	48		pha				pha
.851b	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.851e	68		pla				pla
.851f					_NotRef:
.851f	0a		asl a				asl 	a 							; put MSB of type into A:7
.8520	30 0b		bmi $852d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8522	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8525	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8528	f0 06		beq $8530			beq 	_IntegerCode 				; if clear, then we have two integers
.852a	4c 87 94	jmp $9487			jmp 	FloatingPointSub 							; otherwise at least one float.
.852d					_StringData:
.852d	4c 98 97	jmp $9798			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8530					_IntegerCode:
.8530	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8533	49 80		eor #$80			eor 	#$80
.8535	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8538	80 bb		bra $84f5			bra 	AddCode 					; and do the same code as add.
.853a					AndInteger:
.853a	fa		plx				plx
.853b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.853e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8541	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8542	0a		asl a				asl 	a
.8543	10 05		bpl $854a			bpl 	_NotRef
.8545	48		pha				pha
.8546	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8549	68		pla				pla
.854a					_NotRef:
.854a	0a		asl a				asl 	a
.854b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.854d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8550	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8553	f0 03		beq $8558			beq 	_IntegerCode 				; if clear, then we have two integers
.8555	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.8558					_IntegerCode:
.8558	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.855b	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.855e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8561	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8564	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8567	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.856a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.856d	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8570	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8573	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8576	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8579	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.857c	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.857f	60		rts				rts
.8580					OraInteger:
.8580	fa		plx				plx
.8581	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8584	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8587	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8588	0a		asl a				asl 	a
.8589	10 05		bpl $8590			bpl 	_NotRef
.858b	48		pha				pha
.858c	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.858f	68		pla				pla
.8590					_NotRef:
.8590	0a		asl a				asl 	a
.8591	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8593	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8596	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8599	f0 03		beq $859e			beq 	_IntegerCode 				; if clear, then we have two integers
.859b	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.859e					_IntegerCode:
.859e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85a1	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.85a4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85a7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85aa	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.85ad	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85b0	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85b3	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.85b6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85b9	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85bc	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.85bf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85c2	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85c5	60		rts				rts
.85c6					EorInteger:
.85c6	fa		plx				plx
.85c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85ca	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85cd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85ce	0a		asl a				asl 	a
.85cf	10 05		bpl $85d6			bpl 	_NotRef
.85d1	48		pha				pha
.85d2	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85d5	68		pla				pla
.85d6					_NotRef:
.85d6	0a		asl a				asl 	a
.85d7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85d9	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85dc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85df	f0 03		beq $85e4			beq 	_IntegerCode 				; if clear, then we have two integers
.85e1	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.85e4					_IntegerCode:
.85e4	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85e7	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85ea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85ed	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85f0	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85f3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85f6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85f9	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85fc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85ff	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8602	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8605	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8608	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.860b	60		rts				rts
.860c					WordIndirect:
.860c	fa		plx				plx
.860d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8610	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8613	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8614	0a		asl a				asl 	a
.8615	10 05		bpl $861c			bpl 	_NotRef
.8617	48		pha				pha
.8618	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.861b	68		pla				pla
.861c					_NotRef:
.861c	0a		asl a				asl 	a
.861d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.861f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8622	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8625	f0 03		beq $862a			beq 	_IntegerCode 				; if clear, then we have two integers
.8627	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.862a					_IntegerCode:
.862a	20 f5 84	jsr $84f5			jsr 	AddCode 					; add the two values
.862d	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.862f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8632	60		rts				rts
.8633					ByteIndirect:
.8633	fa		plx				plx
.8634	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8637	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.863a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.863b	0a		asl a				asl 	a
.863c	10 05		bpl $8643			bpl 	_NotRef
.863e	48		pha				pha
.863f	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8642	68		pla				pla
.8643					_NotRef:
.8643	0a		asl a				asl 	a
.8644	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8646	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8649	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.864c	f0 03		beq $8651			beq 	_IntegerCode 				; if clear, then we have two integers
.864e	4c 8e 97	jmp $978e			jmp 	TypeError 					; anything else, type mismatch.
.8651					_IntegerCode:
.8651	20 f5 84	jsr $84f5			jsr 	AddCode 					; add the two values
.8654	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8656	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8659	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9427					ConvertInt16:
.9427	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.942a	8e 10 06	stx $0610			stx 	NSMantissa1
.942d	9c 18 06	stz $0618			stz 	NSMantissa2
.9430	9c 20 06	stz $0620			stz 	NSMantissa3
.9433	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9436	a2 00		ldx #$00			ldx 	#0 							; stack level
.9438	a9 0a		lda #$0a			lda 	#10 						; base
.943a	80 00		bra $943c			bra 	ConvertInt32
.943c					ConvertInt32:
.943c	5a		phy				phy
.943d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.943f	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9442	10 08		bpl $944c			bpl 	_CI32NotNeg
.9444	48		pha				pha
.9445	a9 2d		lda #$2d			lda 	#'-'
.9447	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.944a	c8		iny				iny
.944b	68		pla				pla
.944c					_CI32NotNeg:
.944c	20 5a 94	jsr $945a			jsr 	_CI32DivideConvert 			; recursive conversion
.944f	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9451	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9454	7a		ply				ply
.9455	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9457	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9459	60		rts				rts
.945a					_CI32DivideConvert:
.945a	e8		inx				inx 								; write to next slot up
.945b	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.945e	ca		dex				dex
.945f	20 5c 93	jsr $935c			jsr 	Int32Divide 				; divide
.9462	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9465	48		pha				pha
.9466	20 0b 93	jsr $930b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9469	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; is it zero ?
.946c	f0 06		beq $9474			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.946e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9471	20 5a 94	jsr $945a			jsr 	_CI32DivideConvert 			; and recusrively call.
.9474					_CI32NoRecurse:
.9474	68		pla				pla 								; remainder
.9475	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9477	90 02		bcc $947b			bcc 	_CI32NotHex
.9479	69 26		adc #$26			adc 	#6+32
.947b					_CI32NotHex:
.947b	69 30		adc #$30			adc 	#48
.947d	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9480	c8		iny				iny
.9481	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.865a					PrecedenceLevel:
>865a	04					.byte	 4	; $00 <<
>865b	02					.byte	 2	; $01 <=
>865c	02					.byte	 2	; $02 <>
>865d	00					.byte	 0	; $03 !!3
>865e	00					.byte	 0	; $04 ><
>865f	02					.byte	 2	; $05 >=
>8660	04					.byte	 4	; $06 >>
>8661	00					.byte	 0	; $07 !!7
>8662	00					.byte	 0	; $08 !!8
>8663	00					.byte	 0	; $09 !!9
>8664	00					.byte	 0	; $0a !!10
>8665	00					.byte	 0	; $0b !!11
>8666	00					.byte	 0	; $0c !!12
>8667	00					.byte	 0	; $0d !!13
>8668	00					.byte	 0	; $0e !!14
>8669	00					.byte	 0	; $0f !!15
>866a	00					.byte	 0	; $10 @
>866b	00					.byte	 0	; $11 !!17
>866c	00					.byte	 0	; $12 !!18
>866d	00					.byte	 0	; $13 [
>866e	04					.byte	 4	; $14 \
>866f	00					.byte	 0	; $15 ]
>8670	01					.byte	 1	; $16 ^
>8671	00					.byte	 0	; $17 _
>8672	00					.byte	 0	; $18 `
>8673	00					.byte	 0	; $19 !!25
>8674	00					.byte	 0	; $1a !!26
>8675	00					.byte	 0	; $1b {
>8676	01					.byte	 1	; $1c |
>8677	00					.byte	 0	; $1d }
>8678	00					.byte	 0	; $1e ~
>8679	00					.byte	 0	; $1f [7m<7F>[m
>867a	00					.byte	 0	; $20
>867b	05					.byte	 5	; $21 !
>867c	00					.byte	 0	; $22 "
>867d	00					.byte	 0	; $23 #
>867e	05					.byte	 5	; $24 $
>867f	04					.byte	 4	; $25 %
>8680	01					.byte	 1	; $26 &
>8681	00					.byte	 0	; $27 '
>8682	00					.byte	 0	; $28 (
>8683	00					.byte	 0	; $29 )
>8684	04					.byte	 4	; $2a *
>8685	03					.byte	 3	; $2b +
>8686	00					.byte	 0	; $2c ,
>8687	03					.byte	 3	; $2d -
>8688	00					.byte	 0	; $2e .
>8689	04					.byte	 4	; $2f /
>868a	00					.byte	 0	; $30 0
>868b	00					.byte	 0	; $31 1
>868c	00					.byte	 0	; $32 2
>868d	00					.byte	 0	; $33 3
>868e	00					.byte	 0	; $34 4
>868f	00					.byte	 0	; $35 5
>8690	00					.byte	 0	; $36 6
>8691	00					.byte	 0	; $37 7
>8692	00					.byte	 0	; $38 8
>8693	00					.byte	 0	; $39 9
>8694	00					.byte	 0	; $3a :
>8695	00					.byte	 0	; $3b ;
>8696	02					.byte	 2	; $3c <
>8697	02					.byte	 2	; $3d =
>8698	02					.byte	 2	; $3e >
>8699	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.869a					EvaluateExpressionAt0:
.869a	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.869c					EvaluateExpression:
.869c	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.869e					EvaluateExpressionAtPrecedence:
.869e	48		pha				pha 								; save precedence level
.869f	20 6d 89	jsr $896d			jsr 	EvaluateTerm 				; evaluate term into level X.
.86a2	68		pla				pla 								; restore precedence level.
.86a3					_EXPRLoop:
.86a3	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.86a5	b1 30		lda ($30),y			lda 	(codePtr),y
.86a7	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.86a9	b0 25		bcs $86d0			bcs 	_EXPRExit
.86ab	da		phx				phx 								; read the operator precedence
.86ac	aa		tax				tax
.86ad	bd 5a 86	lda $865a,x			lda 	PrecedenceLevel,x
.86b0	fa		plx				plx
.86b1	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.86b3	f0 1b		beq $86d0			beq 	_EXPRExit
.86b5	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.86b7	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.86b9	c5 37		cmp $37				cmp 	zTemp0+1
.86bb	b0 13		bcs $86d0			bcs		_EXPRExit 					; if current >= operator exit
.86bd	48		pha				pha 								; save current precedence.
.86be	b1 30		lda ($30),y			lda 	(codePtr),y
.86c0	c8		iny				iny
.86c1	48		pha				pha
.86c2	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.86c4	e8		inx				inx 								; work out the right hand side.
.86c5	20 9e 86	jsr $869e			jsr 	EvaluateExpressionAtPrecedence
.86c8	ca		dex				dex
.86c9	68		pla				pla 								; get operator, call the code.
.86ca	20 d3 86	jsr $86d3			jsr 	_EXPRCaller
.86cd	68		pla				pla 								; restore precedence level
.86ce	80 d3		bra $86a3			bra 	_EXPRLoop 					; and go round.
.86d0					_EXPRExit:
.86d0	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.86d2	60		rts				rts
.86d3					_EXPRCaller:
.86d3	da		phx				phx 								; save on stack, first thing is to restore it
.86d4	0a		asl a				asl 	a 							; double so can use vectors into X
.86d5	aa		tax				tax
.86d6	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9482					FloatingPointAdd:
.9482	20 23 96	jsr $9623			jsr 	FloatPrepare 				; prepare for floats
.9485	80 0b		bra $9492			bra 	FloatAdd
.9487					FloatingPointSub:
.9487	20 23 96	jsr $9623			jsr 	FloatPrepare 				; prepare for floats
.948a					FloatSubtract:
.948a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.948d	49 80		eor #$80			eor 	#$80
.948f	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9492					FloatAdd:
.9492	48		pha				pha
.9493	5a		phy				phy
.9494	20 34 96	jsr $9634			jsr 	NSNormalise 				; normalise S[X]
.9497	f0 54		beq $94ed			beq 	_FAReturn1
.9499	e8		inx				inx 								; normalise S[X+1]
.949a	20 34 96	jsr $9634			jsr 	NSNormalise
.949d	ca		dex				dex
.949e	c9 00		cmp #$00			cmp 	#0
.94a0	f0 6f		beq $9511			beq 	_FAExit 					; if so, just return A
.94a2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.94a5	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.94a8	f0 1b		beq $94c5			beq 	_FAExponentsEqual
.94aa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.94ad	a8		tay				tay
.94ae	38		sec				sec 								; do a signed comparison of the exponents.
.94af	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.94b2	50 02		bvc $94b6			bvc 	_FANoSignedChange
.94b4	49 80		eor #$80			eor 	#$80
.94b6					_FANoSignedChange:
.94b6	29 80		and #$80			and 	#$80
.94b8	10 03		bpl $94bd			bpl 	_FAHaveMax
.94ba	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.94bd					_FAHaveMax:
.94bd	20 14 95	jsr $9514			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.94c0	e8		inx				inx
.94c1	20 14 95	jsr $9514			jsr 	_FAShiftToExponent
.94c4	ca		dex				dex
.94c5					_FAExponentsEqual:
.94c5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.94c8	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.94cb	30 10		bmi $94dd			bmi 	_FADifferentSigns
.94cd	20 88 84	jsr $8488			jsr 	AddTopTwoStack 				; do the add of the mantissae
.94d0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.94d3	10 3c		bpl $9511			bpl 	_FAExit 					; if no, we are done.
.94d5	20 64 8d	jsr $8d64			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.94d8	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.94db	80 34		bra $9511			bra 	_FAExit
.94dd					_FADifferentSigns:
.94dd	20 ae 84	jsr $84ae			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.94e0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.94e3	10 2c		bpl $9511			bpl 	_FAExit 					; if no, we are done.
.94e5	20 ed 8c	jsr $8ced			jsr 	NSMNegate 					; netate result
.94e8	20 f6 8c	jsr $8cf6			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.94eb	80 24		bra $9511			bra 	_FAExit
.94ed					_FAReturn1:
.94ed	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.94f0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94f3	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.94f6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94f9	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.94fc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94ff	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9502	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9505	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9508	9d 28 06	sta $0628,x			sta 	NSExponent,x
.950b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.950e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9511					_FAExit:
.9511	7a		ply				ply
.9512	68		pla				pla
.9513	60		rts				rts
.9514					_FAShiftToExponent:
.9514					_FAShiftToExponent2:
.9514	98		tya				tya 								; compare Y to exponent
.9515	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9518	f0 08		beq $9522			beq 	_FASEExit 					; exit if so.
.951a	20 64 8d	jsr $8d64			jsr 	NSMShiftRight	 			; shift the mantissa right
.951d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9520	80 f2		bra $9514			bra 	_FAShiftToExponent2
.9522					_FASEExit:
.9522	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9523					CompareFloat:
.9523	20 8a 94	jsr $948a			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9526	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9529	29 f8		and #$f8			and 	#$F8
.952b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.952e	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9531	f0 09		beq $953c			beq 	_FCExit 					; zero, so approximately identical
.9533	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9535	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9538	10 02		bpl $953c			bpl 	_FCExit
.953a					_FCNegative:
.953a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.953c					_FCExit:
.953c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.953d					FDivideCommand:
.953d	fa		plx				plx	 								; restore stack position
.953e	20 23 96	jsr $9623			jsr 	FloatPrepare 				; prepare for floats
.9541					FloatDivide:
.9541	48		pha				pha
.9542	e8		inx				inx
.9543	20 34 96	jsr $9634			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9546	ca		dex				dex
.9547	c9 00		cmp #$00			cmp 	#0
.9549	f0 20		beq $956b			beq 	_FDZero
.954b	20 34 96	jsr $9634			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.954e	f0 19		beq $9569			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9550	20 7e 93	jsr $937e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9553	20 0b 93	jsr $930b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9556	20 34 96	jsr $9634			jsr		NSNormalise 				; renormalise
.9559	20 19 94	jsr $9419			jsr 	CalculateSign 				; calculate result sign
.955c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.955f	38		sec				sec
.9560	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9563	38		sec				sec
.9564	e9 1e		sbc #$1e			sbc 	#30
.9566	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9569					_FDExit:
.9569	68		pla				pla
.956a	60		rts				rts
.956b					_FDZero:
.956b	a9 03		lda #$03		lda	#3
.956d	4c 9a 82	jmp $829a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9570					FloatFractionalPart:
.9570	5a		phy				phy
.9571	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9574	29 7f		and #$7f			and 	#$7F
.9576	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9579	20 34 96	jsr $9634			jsr 	NSNormalise
.957c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.957f	38		sec				sec
.9580	e9 e0		sbc #$e0			sbc 	#$E0
.9582	90 31		bcc $95b5			bcc 	_FFPExit 					; already fractional
.9584	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9586	b0 2a		bcs $95b2			bcs 	_FFPZero
.9588	a8		tay				tay 								; put count to do in Y
.9589	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.958c	20 b7 95	jsr $95b7			jsr 	_FFPPartial
.958f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9592	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9595	20 b7 95	jsr $95b7			jsr 	_FFPPartial
.9598	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.959b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.959e	20 b7 95	jsr $95b7			jsr 	_FFPPartial
.95a1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95a4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.95a7	20 b7 95	jsr $95b7			jsr 	_FFPPartial
.95aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95ad	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; zeroed check.
.95b0	d0 03		bne $95b5			bne 	_FFPExit
.95b2					_FFPZero:
.95b2	20 41 8d	jsr $8d41			jsr 	NSMSetZero
.95b5					_FFPExit:
.95b5	7a		ply				ply
.95b6	60		rts				rts
.95b7					_FFPPartial:
.95b7	c0 00		cpy #$00			cpy 	#0 							; no more to do
.95b9	f0 17		beq $95d2			beq 	_FFFPPExit
.95bb	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.95bd	b0 0c		bcs $95cb			bcs 	_FFFPPWholeByte
.95bf	5a		phy				phy
.95c0					_FFFPPLeft:
.95c0	0a		asl a				asl 	a
.95c1	88		dey				dey
.95c2	d0 fc		bne $95c0			bne 	_FFFPPLeft
.95c4	7a		ply				ply
.95c5					_FFFPPRight:
.95c5	4a		lsr a				lsr 	a
.95c6	88		dey				dey
.95c7	d0 fc		bne $95c5			bne 	_FFFPPRight
.95c9	80 07		bra $95d2			bra 	_FFFPPExit
.95cb					_FFFPPWholeByte:
.95cb	98		tya				tya 								; subtract 8 from count
.95cc	38		sec				sec
.95cd	e9 08		sbc #$08			sbc 	#8
.95cf	a8		tay				tay
.95d0	a9 00		lda #$00			lda 	#0 							; and clear all
.95d2					_FFFPPExit:
.95d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.95d3					FloatIntegerPart:
.95d3	48		pha				pha
.95d4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.95d7	f0 1f		beq $95f8			beq 	_FIPExit 					; if so do nothing
.95d9	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; is it zero ?
.95dc	f0 17		beq $95f5			beq 	_FIPZero 					; if so return zero.
.95de	20 34 96	jsr $9634			jsr 	NSNormalise 				; normalise
.95e1	f0 12		beq $95f5			beq 	_FIPZero 					; normalised to zero, exit zero
.95e3					_FIPShift:
.95e3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.95e6	10 08		bpl $95f0			bpl 	_FIPCheckZero
.95e8	20 64 8d	jsr $8d64			jsr 	NSMShiftRight 				; shift mantissa right
.95eb	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.95ee	80 f3		bra $95e3			bra 	_FIPShift
.95f0					_FIPCheckZero:
.95f0	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; avoid -0 problem
.95f3	d0 03		bne $95f8			bne 	_FIPExit 					; set to zero if mantissa zero.
.95f5					_FIPZero:
.95f5	20 41 8d	jsr $8d41			jsr 	NSMSetZero
.95f8					_FIPExit:
.95f8	68		pla				pla
.95f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.95fa					FloatingPointMultiply:
.95fa	20 23 96	jsr $9623			jsr 	FloatPrepare 				; prepare for floats
.95fd					FloatMultiply:
.95fd	48		pha				pha
.95fe	20 34 96	jsr $9634			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9601	f0 1b		beq $961e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9603	e8		inx				inx
.9604	20 34 96	jsr $9634			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9607	ca		dex				dex
.9608	c9 00		cmp #$00			cmp 	#0
.960a	f0 0f		beq $961b			beq 	_FDSetZero
.960c	20 d4 93	jsr $93d4			jsr 	MultiplyShort 				; calculate the result.
.960f	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9612	18		clc				clc
.9613	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9616	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9619	80 03		bra $961e			bra 	_FDExit
.961b					_FDSetZero:
.961b	20 41 8d	jsr $8d41			jsr 	NSMSetZero 					; return 0
.961e					_FDExit:
.961e	20 34 96	jsr $9634			jsr 	NSNormalise 				; normalise the result
.9621	68		pla				pla
.9622	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9623					FloatPrepare:
.9623	20 ac 87	jsr $87ac			jsr 	DereferenceTopTwo 			; dereference the top two values
.9626	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9629	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.962c	29 10		and #$10			and 	#NSBIsString
.962e	d0 01		bne $9631			bne 	_FDType
.9630	60		rts				rts
.9631					_FDType:
.9631	4c 8e 97	jmp $978e			jmp 	TypeError
.9634					NSNormalise:
.9634	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9637	29 80		and #$80			and 	#$80
.9639	09 08		ora #$08			ora 	#NSTFloat
.963b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.963e	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; if zero exit
.9641	d0 09		bne $964c			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9643	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9646	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9649	a9 00		lda #$00			lda 	#0 							; set Z flag
.964b	60		rts				rts
.964c					_NSNormaliseOptimise:
.964c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.964f	d0 22		bne $9673			bne 	_NSNormaliseLoop
.9651	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9654	30 1d		bmi $9673			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9656	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9659	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.965c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.965f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9662	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9665	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9668	bd 28 06	lda $0628,x			lda 	NSExponent,x
.966b	38		sec				sec
.966c	e9 08		sbc #$08			sbc 	#8
.966e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9671	80 d9		bra $964c			bra 	_NSNormaliseOptimise
.9673					_NSNormaliseLoop:
.9673	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9676	70 08		bvs $9680			bvs 	_NSNExit 					; exit if so with Z flag clear
.9678	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; shift mantissa left
.967b	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.967e	80 f3		bra $9673			bra 	_NSNormaliseLoop
.9680					_NSNExit:
.9680	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9682	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.86d9					AssignNumber:
.86d9	5a		phy				phy
.86da	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.86dd	85 36		sta $36				sta 	zTemp0
.86df	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86e2	85 37		sta $37				sta 	zTemp0+1
.86e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.86e7	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.86e9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86ec	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.86ee	c9 08		cmp #$08			cmp 	#NSTFloat
.86f0	f0 2a		beq $871c			beq 	_ANFloat
.86f2	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.86f5	f0 05		beq $86fc			beq		_ANNotFloat
.86f7	e8		inx				inx
.86f8	20 d3 95	jsr $95d3			jsr 	FloatIntegerPart 			; make it an integer
.86fb	ca		dex				dex
.86fc					_ANNotFloat:
.86fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.86ff	29 03		and #$03			and 	#3
.8701	d0 05		bne $8708			bne 	_ANByteWord
.8703	20 28 87	jsr $8728			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8706	80 1e		bra $8726			bra 	_ANExit
.8708					_ANByteWord:
.8708	48		pha				pha 								; save count
.8709	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.870c	92 36		sta ($36)			sta 	(zTemp0)
.870e	68		pla				pla
.870f	c9 01		cmp #$01			cmp	 	#1
.8711	f0 13		beq $8726			beq 	_ANExit
.8713	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8716	a0 01		ldy #$01			ldy 	#1
.8718	91 36		sta ($36),y			sta 	(zTemp0),y
.871a	80 0a		bra $8726			bra 	_ANExit
.871c					_ANFloat:
.871c	20 28 87	jsr $8728			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.871f	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8722	a0 04		ldy #$04			ldy 	#4
.8724	91 36		sta ($36),y			sta 	(zTemp0),y
.8726					_ANExit:
.8726	7a		ply				ply
.8727	60		rts				rts
.8728					_ANCopy4PackSign:
.8728	a0 03		ldy #$03			ldy 	#3
.872a	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.872d	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.872f	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8732	91 36		sta ($36),y			sta 	(zTemp0),y
.8734	88		dey				dey
.8735	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8738	91 36		sta ($36),y			sta 	(zTemp0),y
.873a	88		dey				dey
.873b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.873e	91 36		sta ($36),y			sta 	(zTemp0),y
.8740	88		dey				dey
.8741	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8744	91 36		sta ($36),y			sta 	(zTemp0),y
.8746	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8747					AssignString:
.8747	5a		phy				phy
.8748	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.874b	85 38		sta $38				sta 	zTemp1
.874d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8750	85 39		sta $39				sta 	zTemp1+1
.8752	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8755	85 36		sta $36				sta 	zTemp0
.8757	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.875a	85 37		sta $37				sta 	zTemp0+1
.875c	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.875e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8760	f0 23		beq $8785			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8762	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8763	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8765	e9 02		sbc #$02			sbc 	#2
.8767	85 3c		sta $3c				sta 	zsTemp
.8769	a0 01		ldy #$01			ldy 	#1
.876b	b1 36		lda ($36),y			lda 	(zTemp0),y
.876d	e9 00		sbc #$00			sbc 	#0
.876f	85 3d		sta $3d				sta 	zsTemp+1
.8771	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8773					_ASGetLength:
.8773	c8		iny				iny
.8774	b1 38		lda ($38),y			lda 	(zTemp1),y
.8776	d0 fb		bne $8773			bne 	_ASGetLength
.8778	98		tya				tya 								; is this length <= current length
.8779	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.877b	90 20		bcc $879d			bcc 	_ASCopyString
.877d	f0 1e		beq $879d			beq 	_ASCopyString
.877f	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8781	a0 01		ldy #$01			ldy 	#1
.8783	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8785					_ASNewStringRequired:
.8785	e8		inx				inx 								; concrete the new string.
.8786	20 4f 98	jsr $984f			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8789	ca		dex				dex
.878a	18		clc				clc
.878b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.878e	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8790	92 36		sta ($36)			sta 	(zTemp0)
.8792	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8795	69 00		adc #$00			adc 	#0
.8797	a0 01		ldy #$01			ldy 	#1
.8799	91 36		sta ($36),y			sta 	(zTemp0),y
.879b	80 0d		bra $87aa			bra 	_ASExit
.879d					_ASCopyString:
.879d	a0 00		ldy #$00			ldy 	#0
.879f					_ASCopyLoop:
.879f	b1 38		lda ($38),y			lda 	(zTemp1),y
.87a1	c8		iny				iny
.87a2	c8		iny				iny
.87a3	91 3c		sta ($3c),y			sta 	(zsTemp),y
.87a5	88		dey				dey
.87a6	c9 00		cmp #$00			cmp 	#0
.87a8	d0 f5		bne $879f			bne 	_ASCopyLoop
.87aa					_ASExit:
.87aa	7a		ply				ply
.87ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.87ac					DereferenceTopTwo:
.87ac	e8		inx				inx
.87ad	20 b1 87	jsr $87b1			jsr 	Dereference 				; deref x+1
.87b0	ca		dex				dex  								; falls through to deref x
.87b1					Dereference:
.87b1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.87b4	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.87b6	f0 57		beq $880f			beq 	_DRFExit 					; not a reference
.87b8	5a		phy				phy
.87b9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.87bc	85 36		sta $36				sta 	zTemp0
.87be	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87c1	85 37		sta $37				sta 	zTemp0+1
.87c3	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.87c6	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.87c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87cb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.87ce	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.87d0	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.87d2	f0 0f		beq $87e3			beq 	_DRFDereferenceTwo
.87d4	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.87d6	f0 39		beq $8811			beq 	_DRFFull
.87d8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.87db	29 03		and #$03			and 	#3
.87dd	f0 32		beq $8811			beq 	_DRFFull 					; the whole word
.87df	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.87e1	f0 07		beq $87ea			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.87e3					_DRFDereferenceTwo:
.87e3	a0 01		ldy #$01			ldy 	#1
.87e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87ea					_DRFClear23:
.87ea	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.87ed	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87f0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.87f3	29 18		and #$18			and 	#NSBTypeMask
.87f5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87f8	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.87fa	d0 12		bne $880e			bne 	_DRFNotString
.87fc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.87ff	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8802	d0 0a		bne $880e			bne 	_DRFNotString
.8804	a9 10		lda #$10			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8806	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8809	a9 88		lda #$88			lda 	#_DRFNullString >> 8
.880b	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.880e					_DRFNotString
.880e	7a		ply				ply 								; restore Y and exit
.880f					_DRFExit:
.880f	60		rts				rts
.8810					_DRFNullString:
>8810	00						.byte 	0
.8811					_DRFFull:
.8811	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8813	b1 36		lda ($36),y			lda 	(zTemp0),y
.8815	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8818	c8		iny				iny
.8819	b1 36		lda ($36),y			lda 	(zTemp0),y
.881b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.881e	c8		iny				iny
.881f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8821	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8824	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8827	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.882a	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.882c	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.882f	f0 06		beq $8837			beq 	_DRFNoExponent
.8831	c8		iny				iny 								; if not, read the exponent as well.
.8832	b1 36		lda ($36),y			lda 	(zTemp0),y
.8834	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8837					_DRFNoExponent:
.8837	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.883a	10 0d		bpl $8849			bpl 	_DRFExit2 					; if not, then exit.
.883c	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.883e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8841	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8844	09 80		ora #$80			ora 	#NSBIsNegative
.8846	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8849					_DRFExit2:
.8849	7a		ply				ply
.884a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.884b					EncodeNumberStart:
.884b	38		sec				sec
.884c	80 01		bra $884f			bra 	EncodeNumberContinue+1
.884e					EncodeNumberContinue:
.884e	18		clc				clc
.884f					EncodeNumber:
.884f	08		php				php 								; save reset.
.8850	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8852	f0 12		beq $8866			beq 	_ENIsOkay
.8854	c9 30		cmp #$30			cmp 	#"0"
.8856	90 04		bcc $885c			bcc 	_ENBadNumber
.8858	c9 3a		cmp #$3a			cmp 	#"9"+1
.885a	90 0a		bcc $8866			bcc 	_ENIsOkay
.885c					_ENBadNumber:
.885c	28		plp				plp 								; throw saved reset
.885d	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8860	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8862	f0 7e		beq $88e2			beq 	_ENConstructFinal
.8864					_ENFail:
.8864	18		clc				clc 								; not allowed
.8865	60		rts				rts
.8866					_ENIsOkay:
.8866	28		plp				plp 								; are we restarting
.8867	90 15		bcc $887e			bcc 	_ENNoRestart
.8869					_ENStartEncode:
.8869	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.886b	f0 0c		beq $8879			beq 	_ENFirstDP
.886d	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.886f	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.8872	a9 01		lda #$01			lda 	#ESTA_Low
.8874					_ENExitChange:
.8874	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8877	38		sec				sec
.8878	60		rts				rts
.8879					_ENFirstDP:
.8879	20 41 8d	jsr $8d41			jsr 	NSMSetZero 					; clear integer part
.887c	80 3f		bra $88bd			bra 	_ESTASwitchFloat			; go straight to float and exi
.887e					_ENNoRestart:
.887e	48		pha				pha 								; save on stack.
.887f	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8882	c9 01		cmp #$01			cmp 	#ESTA_Low
.8884	f0 09		beq $888f			beq  	_ESTALowState
.8886	c9 02		cmp #$02			cmp 	#ESTA_High
.8888	f0 29		beq $88b3			beq 	_ESTAHighState
.888a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.888c	f0 3b		beq $88c9			beq 	_ESTADecimalState
>888e	db						.byte 	$DB 						; causes a break in the emulator
.888f					_ESTALowState:
.888f	68		pla				pla 								; get value back
.8890	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8892	f0 29		beq $88bd			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8894	29 0f		and #$0f			and 	#15 						; make digit
.8896	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8899	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.889c	0a		asl a				asl 	a
.889d	0a		asl a				asl 	a
.889e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.88a1	0a		asl a				asl 	a
.88a2	6d 06 07	adc $0706			adc 	DigitTemp
.88a5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88a8	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.88aa	90 05		bcc $88b1			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.88ac	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.88ae	8d 05 07	sta $0705			sta 	EncodeState
.88b1					_ESTANoSwitch:
.88b1	38		sec				sec
.88b2	60		rts				rts
.88b3					_ESTAHighState:
.88b3	68		pla				pla 								; get value back
.88b4	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.88b6	f0 05		beq $88bd			beq 	_ESTASwitchFloat
.88b8	20 1c 89	jsr $891c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.88bb	38		sec				sec
.88bc	60		rts				rts
.88bd					_ESTASwitchFloat:
.88bd	9c 07 07	stz $0707			stz 	DecimalCount
.88c0	e8		inx				inx 								; zero the decimal additive.
.88c1	20 41 8d	jsr $8d41			jsr 	NSMSetZero
.88c4	ca		dex				dex
.88c5	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.88c7	80 ab		bra $8874			bra 	_ENExitChange
.88c9					_ESTADecimalState:
.88c9	68		pla				pla 								; digit.
.88ca	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.88cc	f0 96		beq $8864			beq 	_ENFail
.88ce	e8		inx				inx 								; put digit into fractional part of X+1
.88cf	20 1c 89	jsr $891c			jsr 	ESTAShiftDigitIntoMantissa
.88d2	ca		dex				dex
.88d3	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.88d6	ad 07 07	lda $0707			lda 	DecimalCount
.88d9	c9 0b		cmp #$0b			cmp 	#11
.88db	f0 02		beq $88df			beq 	_ESTADSFail
.88dd	38		sec				sec
.88de	60		rts				rts
.88df					_ESTADSFail:
.88df	4c 89 97	jmp $9789			jmp 	RangeError
.88e2					_ENConstructFinal:
.88e2	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.88e5	f0 33		beq $891a			beq 	_ENCFExit 					; no decimals
.88e7	5a		phy				phy
.88e8	0a		asl a				asl 	a 							; x 4 and CLC
.88e9	0a		asl a				asl 	a
.88ea	6d 07 07	adc $0707			adc 	DecimalCount
.88ed	a8		tay				tay
.88ee	b9 48 97	lda $9748,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.88f1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88f4	b9 49 97	lda $9749,y			lda 	DecimalScalarTable-5+1,y
.88f7	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.88fa	b9 4a 97	lda $974a,y			lda 	DecimalScalarTable-5+2,y
.88fd	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8900	b9 4b 97	lda $974b,y			lda 	DecimalScalarTable-5+3,y
.8903	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8906	b9 4c 97	lda $974c,y			lda 	DecimalScalarTable-5+4,y
.8909	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.890c	a9 08		lda #$08			lda 	#NSTFloat
.890e	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8911	7a		ply				ply
.8912	e8		inx				inx 								; multiply decimal const by decimal scalar
.8913	20 fd 95	jsr $95fd			jsr 	FloatMultiply
.8916	ca		dex				dex
.8917	20 92 94	jsr $9492			jsr 	FloatAdd 					; add to integer part.
.891a					_ENCFExit:
.891a	18		clc				clc 								; reject the digit.
.891b	60		rts				rts
.891c					ESTAShiftDigitIntoMantissa:
.891c	29 0f		and #$0f			and 	#15 						; save digit
.891e	48		pha				pha
.891f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8922	48		pha				pha
.8923	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8926	48		pha				pha
.8927	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.892a	48		pha				pha
.892b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.892e	48		pha				pha
.892f	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; x 2
.8932	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; x 4
.8935	18		clc				clc 								; pop mantissa and add
.8936	68		pla				pla
.8937	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.893a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.893d	68		pla				pla
.893e	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8941	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8944	68		pla				pla
.8945	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8948	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.894b	68		pla				pla
.894c	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.894f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8952	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; x 10
.8955	68		pla				pla 								; add digit
.8956	18		clc				clc
.8957	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.895a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.895d	90 0d		bcc $896c			bcc 	_ESTASDExit
.895f	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8962	d0 08		bne $896c			bne 	_ESTASDExit
.8964	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8967	d0 03		bne $896c			bne 	_ESTASDExit
.8969	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.896c					_ESTASDExit:
.896c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.896d					EvaluateTerm:
.896d	b1 30		lda ($30),y			lda 	(codePtr),y
.896f	30 18		bmi $8989			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8971	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8973	b0 6f		bcs $89e4			bcs 	_ETVariable
.8975	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8977	90 6e		bcc $89e7			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8979	c9 3a		cmp #$3a			cmp 	#'9'+1
.897b	b0 6a		bcs $89e7			bcs 	_ETPuncUnary
.897d	20 4b 88	jsr $884b			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8980					_ETNumber:
.8980	c8		iny				iny 								; keep encoding until we have the numbers
.8981	b1 30		lda ($30),y			lda 	(codePtr),y
.8983	20 4e 88	jsr $884e			jsr 	EncodeNumberContinue
.8986	b0 f8		bcs $8980			bcs 	_ETNumber 					; go back if accepted.
.8988	60		rts				rts
.8989					_ETCheckUnary:
.8989	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.898b	f0 41		beq $89ce			beq 	_ETString
.898d	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.898f	f0 12		beq $89a3			beq 	_ETHexConstant
.8991	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8993	90 0b		bcc $89a0			bcc 	_ETSyntaxError
.8995	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8997	b0 07		bcs $89a0			bcs 	_ETSyntaxError
.8999	da		phx				phx 								; push X on the stack
.899a	0a		asl a				asl 	a 							; put vector x 2 into X
.899b	aa		tax				tax
.899c	c8		iny				iny 								; consume unary function token
.899d	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.89a0					_ETSyntaxError:
.89a0	4c 84 97	jmp $9784			jmp 	SyntaxError
.89a3					_ETHexConstant:
.89a3	c8		iny				iny 								; skip #
.89a4	c8		iny				iny 								; skip count
.89a5	20 41 8d	jsr $8d41			jsr 	NSMSetZero 					; clear result
.89a8					_ETHLoop:
.89a8	b1 30		lda ($30),y			lda 	(codePtr),y
.89aa	c8		iny				iny 								; and consume
.89ab	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.89ad	f0 1e		beq $89cd			beq 	_ETHExit
.89af	48		pha				pha 								; save on stack.
.89b0	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; x 2
.89b3	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; x 4
.89b6	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; x 8
.89b9	20 56 8d	jsr $8d56			jsr 	NSMShiftLeft 				; x 16
.89bc	68		pla				pla 								; ASCII
.89bd	c9 41		cmp #$41			cmp 	#'A'
.89bf	90 02		bcc $89c3			bcc 	_ETHNotChar
.89c1	e9 07		sbc #$07			sbc 	#7
.89c3					_ETHNotChar:
.89c3	29 0f		and #$0f			and 	#15 						; digit now
.89c5	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.89c8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89cb	80 db		bra $89a8			bra 	_ETHLoop 					; go round.
.89cd					_ETHExit:
.89cd	60		rts				rts
.89ce					_ETString:
.89ce	c8		iny				iny 								; look at length
.89cf	b1 30		lda ($30),y			lda 	(codePtr),y
.89d1	48		pha				pha
.89d2	c8		iny				iny 								; first character
.89d3	20 84 92	jsr $9284			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.89d6	68		pla				pla 								; restore count and save
.89d7	85 36		sta $36				sta 	zTemp0
.89d9	98		tya				tya 								; add length to Y to skip it.
.89da	18		clc				clc
.89db	65 36		adc $36				adc 	zTemp0
.89dd	a8		tay				tay
.89de	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.89e0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89e3	60		rts				rts
.89e4					_ETVariable:
.89e4	4c 3e 8a	jmp $8a3e			jmp 	VariableHandler
.89e7					_ETPuncUnary:
.89e7	c8		iny				iny 								; consume the unary character
.89e8	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.89ea	f0 2d		beq $8a19			beq 	_ETUnaryNegate
.89ec	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.89ee	f0 39		beq $8a29			beq 	_ETDereference
.89f0	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.89f2	f0 43		beq $8a37			beq 	_ETParenthesis
.89f4	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.89f6	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.89f8	f0 06		beq $8a00			beq 	_ETIndirection
.89fa	e6 36		inc $36				inc 	zTemp0
.89fc	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.89fe	d0 a0		bne $89a0			bne 	_ETSyntaxError
.8a00					_ETIndirection:
.8a00	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8a02	1a		inc a				inc 	a
.8a03	48		pha				pha
.8a04	20 6d 89	jsr $896d			jsr 	EvaluateTerm				; evaluate the term
.8a07	20 b1 87	jsr $87b1			jsr 	Dereference 				; dereference it.
.8a0a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8a0d	d0 07		bne $8a16			bne 	_ETTypeMismatch
.8a0f	68		pla				pla 								; indirection 1-2
.8a10	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8a12	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a15	60		rts				rts
.8a16					_ETTypeMismatch:
.8a16	4c 8e 97	jmp $978e			jmp 	TypeError
.8a19					_ETUnaryNegate:
.8a19	20 6d 89	jsr $896d			jsr 	EvaluateTerm				; evaluate the term
.8a1c	20 b1 87	jsr $87b1			jsr 	Dereference 				; dereference it.
.8a1f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8a22	29 10		and #$10			and 	#NSTString
.8a24	d0 f0		bne $8a16			bne 	_ETTypeMismatch
.8a26	4c ed 8c	jmp $8ced			jmp 	NSMNegate  					; just toggles the sign bit.
.8a29					_ETDereference:
.8a29	20 6d 89	jsr $896d			jsr 	EvaluateTerm				; evaluate the term
.8a2c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8a2f	29 20		and #$20			and 	#NSBIsReference
.8a31	f0 e3		beq $8a16			beq 	_ETTypeMismatch
.8a33	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8a36	60		rts				rts
.8a37					_ETParenthesis:
.8a37	20 9c 86	jsr $869c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8a3a	20 cb 92	jsr $92cb			jsr 	CheckRightBracket 			; check for )
.8a3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8a3e					VariableHandler:
.8a3e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a40	18		clc				clc
.8a41	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a43	85 37		sta $37				sta 	zTemp0+1
.8a45	c8		iny				iny
.8a46	b1 30		lda ($30),y			lda 	(codePtr),y
.8a48	85 36		sta $36				sta 	zTemp0
.8a4a	c8		iny				iny
.8a4b	18		clc				clc									; copy variable address+3 to mantissa
.8a4c	69 03		adc #$03			adc 	#3
.8a4e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a51	a5 37		lda $37				lda 	zTemp0+1
.8a53	69 00		adc #$00			adc 	#0
.8a55	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a58	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a5b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a5e	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8a61	5a		phy				phy
.8a62	a0 02		ldy #$02			ldy 	#2 							; read type
.8a64	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a66	7a		ply				ply
.8a67	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8a69	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8a6b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a6e	29 04		and #$04			and 	#NSBIsArray
.8a70	d0 01		bne $8a73			bne 	_VHArray
.8a72	60		rts				rts
.8a73					_VHArray:
>8a73	db						.byte 	$DB 						; causes a break in the emulator
.8a74	80 fd		bra $8a73			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9683					AbsUnary:
.9683	fa		plx				plx 								; restore stack pos
.9684	20 95 8c	jsr $8c95			jsr 	EvaluateNumber 				; get a float or int
.9687	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.968a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.968d	29 7f		and #$7f			and 	#$7F
.968f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9692	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8a76					AllocUnary:
.8a76	fa		plx				plx 								; restore stack pos
.8a77	20 cd 8c	jsr $8ccd			jsr 	Evaluate16BitInteger		; get bytes required.
.8a7a	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.8a7d	da		phx				phx 								; save X/Y
.8a7e	5a		phy				phy
.8a7f	8a		txa				txa 								; copy X into Y
.8a80	a8		tay				tay
.8a81	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8a84	aa		tax				tax
.8a85	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8a88	20 95 8a	jsr $8a95			jsr 	AllocateXABytes 			; allocate memory
.8a8b	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8a8e	8a		txa				txa
.8a8f	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8a92	7a		ply				ply
.8a93	fa		plx				plx
.8a94	60		rts				rts
.8a95					AllocateXABytes:
.8a95	5a		phy				phy
.8a96	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8a99	5a		phy				phy
.8a9a	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8a9d	5a		phy				phy
.8a9e	18		clc				clc
.8a9f	6d 0c 07	adc $070c			adc 	lowMemPtr
.8aa2	8d 0c 07	sta $070c			sta 	lowMemPtr
.8aa5	8a		txa				txa
.8aa6	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8aa9	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8aac	fa		plx				plx
.8aad	68		pla				pla
.8aae	7a		ply				ply
.8aaf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9693					AscUnary:
.9693	fa		plx				plx 								; restore stack pos
.9694	20 a0 8c	jsr $8ca0			jsr 	EvaluateString 				; get a string
.9697	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9699	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.969c	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.969f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.96a0					FracUnary:
.96a0	fa		plx				plx 								; restore stack pos
.96a1	20 95 8c	jsr $8c95			jsr 	EvaluateNumber 				; get a float or int
.96a4	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.96a7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96aa	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.96ac	f0 04		beq $96b2			beq 	_IUZero
.96ae	20 70 95	jsr $9570			jsr 	FloatFractionalPart
.96b1	60		rts				rts
.96b2					_IUZero:
.96b2	20 41 8d	jsr $8d41			jsr 	NSMSetZero
.96b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.96b6					IntUnary:
.96b6	fa		plx				plx 								; restore stack pos
.96b7	20 95 8c	jsr $8c95			jsr 	EvaluateNumber 				; get a float or int
.96ba	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.96bd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96c0	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.96c2	f0 03		beq $96c7			beq 	_IUExit
.96c4	20 d3 95	jsr $95d3			jsr 	FloatIntegerPart
.96c7					_IUExit:
.96c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.96c8					LenUnary:
.96c8	fa		plx				plx 								; restore stack pos
.96c9	20 a0 8c	jsr $8ca0			jsr 	EvaluateString 				; get a string
.96cc	5a		phy				phy
.96cd	a0 00		ldy #$00			ldy 	#0 							; find length
.96cf					_LenFind:
.96cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.96d1	f0 06		beq $96d9			beq 	_LenExit
.96d3	c8		iny				iny
.96d4	d0 f9		bne $96cf			bne 	_LenFind
.96d6	4c 89 97	jmp $9789			jmp 	RangeError 					; string > 255
.96d9					_LenExit:
.96d9	98		tya				tya
.96da	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.96dd	7a		ply				ply
.96de	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.96e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8ab0					Unary_Not:
.8ab0	fa		plx				plx
.8ab1	20 b8 8c	jsr $8cb8			jsr 	EvaluateInteger 			; get integer
.8ab4	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.8ab7	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; zero mantissa ?
.8aba	f0 04		beq $8ac0			beq 	_NotZero
.8abc	20 41 8d	jsr $8d41			jsr 	NSMSetZero
.8abf	60		rts				rts
.8ac0					_NotZero:
.8ac0	4c 00 83	jmp $8300			jmp 	ReturnTrue
.8ac3					_UNBad:
.8ac3	4c 93 97	jmp $9793			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8ac6					Unary_Rnd:
.8ac6	20 95 8c	jsr $8c95			jsr 	EvaluateNumber 				; number to use.
.8ac9	20 cb 92	jsr $92cb			jsr 	CheckRightBracket 			; closing bracket
.8acc	20 f5 8a	jsr $8af5			jsr 	Random32Bit 				; generate a number.
.8acf	ad 08 07	lda $0708			lda 	RandomSeed+0
.8ad2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ad5	ad 09 07	lda $0709			lda 	RandomSeed+1
.8ad8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8adb	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8ade	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ae1	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8ae4	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8ae6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ae9	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8aeb	8d 28 06	sta $0628			sta 	NSExponent
.8aee	a9 08		lda #$08			lda 	#NSTFloat
.8af0	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8af3	db						.byte 	$DB 						; causes a break in the emulator
.8af4	60		rts				rts
.8af5					Random32Bit:
.8af5	5a		phy				phy
.8af6	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8af8	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8afb	d0 03		bne $8b00			bne 	_Random1
.8afd	a8		tay				tay 								; if so do it 256 times
.8afe	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8b00					_Random1:
.8b00	0a		asl a				asl 	a 							; LSFR RNG
.8b01	2e 09 07	rol $0709			rol 	RandomSeed+1
.8b04	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8b07	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8b0a	90 02		bcc $8b0e			bcc 	_Random2
.8b0c	49 c5		eor #$c5			eor 	#$C5
.8b0e					_Random2:
.8b0e	88		dey				dey
.8b0f	d0 ef		bne $8b00			bne 	_Random1
.8b11	7a		ply				ply
.8b12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.96e2					SgnUnary:
.96e2	fa		plx				plx 								; restore stack pos
.96e3	20 95 8c	jsr $8c95			jsr 	EvaluateNumber 				; get a float or int
.96e6	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.96e9	20 71 8d	jsr $8d71			jsr 	NSMIsZero 					; if zero
.96ec	f0 10		beq $96fe			beq 	_SGZero  					; return Int Zero
.96ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.96f1	48		pha				pha
.96f2	a9 01		lda #$01			lda 	#1 							; set to 1
.96f4	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.96f7	68		pla				pla
.96f8	29 80		and #$80			and		#$80 						; copy the sign byte out
.96fa	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96fd	60		rts				rts
.96fe	20 41 8d	jsr $8d41	_SGZero:jsr 	NSMSetZero
.9701	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9702					ValUnary:
.9702	fa		plx				plx 								; restore stack pos
.9703	20 18 97	jsr $9718			jsr 	ValMainCode 				; do the main val() code
.9706	b0 01		bcs $9709			bcs 	_VUError 					; couldn't convert
.9708	60		rts				rts
.9709					_VUError:
.9709	4c 8e 97	jmp $978e			jmp 	TypeError
.970c					IsValUnary:
.970c	fa		plx				plx 								; restore stack pos
.970d	20 18 97	jsr $9718			jsr 	ValMainCode 				; do the main val() code
.9710	b0 03		bcs $9715			bcs 	_VUBad
.9712	4c 00 83	jmp $8300			jmp 	ReturnTrue
.9715					_VUBad:
.9715	4c 0c 83	jmp $830c			jmp 	ReturnFalse
.9718					ValMainCode:
.9718	20 a0 8c	jsr $8ca0			jsr 	EvaluateString 				; get a string
.971b	20 cb 92	jsr $92cb			jsr 	CheckRightBracket 			; check right bracket present
.971e	5a		phy				phy
.971f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9721	f0 17		beq $973a			beq 	_VMCFail2
.9723	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9725	48		pha				pha 								; save first character
.9726	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9728	d0 01		bne $972b			bne 	_VMCStart
.972a	c8		iny				iny 								; skip over -
.972b					_VMCStart:
.972b	38		sec				sec 								; initialise first time round.
.972c					_VMCNext:
.972c	c8		iny				iny 								; pre-increment
.972d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.972f	f0 0c		beq $973d			beq 	_VMCSuccess 				; successful.
.9731	20 4f 88	jsr $884f			jsr 	EncodeNumber 				; send it to the number-builder
.9734	90 03		bcc $9739			bcc 	_VMCFail 					; if failed, give up.
.9736	18		clc				clc 								; next time round, countinue
.9737	80 f3		bra $972c			bra 	_VMCNext
.9739					_VMCFail:
.9739	68		pla				pla
.973a					_VMCFail2:
.973a	7a		ply				ply
.973b	38		sec				sec
.973c	60		rts				rts
.973d					_VMCSuccess:
.973d	a9 00		lda #$00			lda 	#0 							; construct final
.973f	20 4f 88	jsr $884f			jsr 	EncodeNumber
.9742	68		pla				pla
.9743	c9 2d		cmp #$2d			cmp 	#"-"
.9745	d0 03		bne $974a			bne 	_VMCNotNegative
.9747	20 ed 8c	jsr $8ced			jsr		NSMNegate
.974a					_VMCNotNegative:
.974a	7a		ply				ply
.974b	18		clc				clc
.974c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8b13					ChrUnary:
.8b13	fa		plx				plx 								; restore stack pos
.8b14	20 d9 8c	jsr $8cd9			jsr 	Evaluate8BitInteger			; get value
.8b17	48		pha				pha
.8b18	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.8b1b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8b1d	20 ca 98	jsr $98ca			jsr 	StringTempAllocate
.8b20	68		pla				pla 								; write number to it
.8b21	20 08 99	jsr $9908			jsr 	StringTempWrite
.8b24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8b25					SpcUnary:
.8b25	fa		plx				plx 								; restore stack pos
.8b26	20 d9 8c	jsr $8cd9			jsr 	Evaluate8BitInteger			; get value
.8b29	5a		phy				phy
.8b2a	48		pha				pha 								; save count
.8b2b	20 ca 98	jsr $98ca			jsr 	StringTempAllocate
.8b2e	7a		ply				ply 								; to do count in Y
.8b2f					_SpcLoop:
.8b2f	c0 00		cpy #$00			cpy 	#0
.8b31	f0 08		beq $8b3b			beq 	_SpcExit
.8b33	a9 20		lda #$20			lda 	#32
.8b35	20 08 99	jsr $9908			jsr 	StringTempWrite
.8b38	88		dey				dey
.8b39	80 f4		bra $8b2f			bra 	_SPCLoop
.8b3b					_SpcExit:
.8b3b	7a		ply				ply
.8b3c	20 cb 92	jsr $92cb			jsr 	CheckRightBracket
.8b3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8b40					Unary_Str:
.8b40	fa		plx				plx
.8b41	20 95 8c	jsr $8c95			jsr 	EvaluateNumber  			; get number
.8b44	20 cb 92	jsr $92cb			jsr 	CheckRightBracket 			; closing bracket
.8b47	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b49	20 62 8b	jsr $8b62			jsr 	ConvertNumberToString 		; do the conversion.
.8b4c	a9 21		lda #$21			lda		#33 						; create buffer
.8b4e	20 ca 98	jsr $98ca			jsr 	StringTempAllocate 			; allocate memory
.8b51	da		phx				phx
.8b52	a2 00		ldx #$00			ldx 	#0
.8b54					_USCopy:
.8b54	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b57	20 08 99	jsr $9908			jsr 	StringTempWrite
.8b5a	e8		inx				inx
.8b5b	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b5e	d0 f4		bne $8b54			bne 	_USCopy
.8b60	fa		plx				plx
.8b61	60		rts				rts
.8b62					ConvertNumberToString:
.8b62	5a		phy				phy 								; save code position
.8b63	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8b66	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8b69	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8b6c	10 0a		bpl $8b78			bpl 	_CNTSNotNegative
.8b6e	29 7f		and #$7f			and 	#$7F 						; make +ve
.8b70	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b73	a9 2d		lda #$2d			lda 	#"-"
.8b75	20 de 8b	jsr $8bde			jsr 	WriteDecimalBuffer
.8b78					_CNTSNotNegative:
.8b78	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8b7b	f0 15		beq $8b92			beq 	_CNTSNotFloat
.8b7d	e8		inx				inx 								; round up
.8b7e	a9 01		lda #$01			lda 	#1
.8b80	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.8b83	ca		dex				dex
.8b84	bd 28 06	lda $0628,x			lda		NSExponent,x
.8b87	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8b8a	a9 08		lda #$08			lda 	#NSTFloat
.8b8c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b8f	20 92 94	jsr $9492			jsr 	FloatAdd
.8b92					_CNTSNotFloat:
.8b92	20 c0 8b	jsr $8bc0			jsr 	MakePlusTwoString
.8b95	20 70 95	jsr $9570			jsr 	FloatFractionalPart 		; get the fractional part
.8b98	20 34 96	jsr $9634			jsr 	NSNormalise					; normalise , exit if zero
.8b9b	f0 21		beq $8bbe			beq 	_CNTSExit
.8b9d	a9 2e		lda #$2e			lda 	#"."
.8b9f	20 de 8b	jsr $8bde			jsr 	WriteDecimalBuffer 			; write decimal place
.8ba2					_CNTSDecimal:
.8ba2	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8ba5	30 17		bmi $8bbe			bmi 	_CNTSExit
.8ba7	e8		inx				inx 								; x 10.0
.8ba8	a9 0a		lda #$0a			lda 	#10
.8baa	20 43 8d	jsr $8d43			jsr 	NSMSetByte
.8bad	a9 08		lda #$08			lda 	#NSTFloat
.8baf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bb2	ca		dex				dex
.8bb3	20 fd 95	jsr $95fd			jsr 	FloatMultiply
.8bb6	20 c0 8b	jsr $8bc0			jsr 	MakePlusTwoString
.8bb9	20 70 95	jsr $9570			jsr 	FloatFractionalPart 		; get the fractional part
.8bbc	80 e4		bra $8ba2			bra 	_CNTSDecimal 				; keep going.
.8bbe					_CNTSExit:
.8bbe	7a		ply				ply
.8bbf	60		rts				rts
.8bc0					MakePlusTwoString:
.8bc0	da		phx				phx
.8bc1	20 18 8d	jsr $8d18			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8bc4	e8		inx				inx 								; access it
.8bc5	e8		inx				inx
.8bc6	20 d3 95	jsr $95d3			jsr 	FloatIntegerPart 			; make it an integer
.8bc9	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8bcb	20 3c 94	jsr $943c			jsr 	ConvertInt32
.8bce	a2 00		ldx #$00			ldx	 	#0
.8bd0					_MPTSCopy:
.8bd0	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8bd3	20 de 8b	jsr $8bde			jsr 	WriteDecimalBuffer
.8bd6	e8		inx				inx
.8bd7	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8bda	d0 f4		bne $8bd0			bne 	_MPTSCopy
.8bdc	fa		plx				plx
.8bdd	60		rts				rts
.8bde					WriteDecimalBuffer:
.8bde	da		phx				phx
.8bdf	ae 14 07	ldx $0714			ldx 	dbOffset
.8be2	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8be5	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8be8	ee 14 07	inc $0714			inc 	dbOffset
.8beb	fa		plx				plx
.8bec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8bed					Unary_Left:
.8bed	fa		plx				plx
.8bee	18		clc				clc 								; only one parameter
.8bef	20 64 8c	jsr $8c64			jsr 	SubstringInitial 			; set up.
.8bf2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8bf5	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bf8	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8bfb	80 2c		bra $8c29			bra 	SubstringMain
.8bfd					Unary_Right:
.8bfd	fa		plx				plx
.8bfe	18		clc				clc 								; only one parameter
.8bff	20 64 8c	jsr $8c64			jsr 	SubstringInitial 			; set up.
.8c02	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8c05	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c08	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8c0b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8c0e	b0 02		bcs $8c12			bcs 	_URNotUnderflow
.8c10	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8c12					_URNotUnderFlow:
.8c12	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8c15	80 12		bra $8c29			bra 	SubStringMain
.8c17					Unary_Mid:
.8c17	fa		plx				plx
.8c18	38		sec				sec 								; two parameters
.8c19	20 64 8c	jsr $8c64			jsr 	SubstringInitial 			; set up.
.8c1c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8c1f	f0 05		beq $8c26			beq 	_UMError
.8c21	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8c24	80 03		bra $8c29			bra 	SubStringMain
.8c26					_UMError:
.8c26	4c 93 97	jmp $9793			jmp 	ArgumentError
.8c29					SubStringMain:
.8c29	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8c2c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8c2f	b0 2d		bcs $8c5e			bcs 	_SSMNull 					; if so, return an empty string.
.8c31	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8c34	f0 28		beq $8c5e			beq 	_SSMNull 					; return empty string.
.8c36	18		clc				clc 								; add the offset +1 to the address and
.8c37	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8c3a	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8c3d	85 36		sta $36				sta 	zTemp0
.8c3f	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8c42	69 00		adc #$00			adc 	#0
.8c44	85 37		sta $37				sta 	zTemp0+1
.8c46					_SSMNoCarry:
.8c46	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c49	20 ca 98	jsr $98ca			jsr 	StringTempAllocate 			; allocate that many characters
.8c4c	5a		phy				phy 								; save Y
.8c4d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c4f					_SSMCopy:
.8c4f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c51	f0 09		beq $8c5c			beq 	_SSMEString 				; no more to copy
.8c53	20 08 99	jsr $9908			jsr 	StringTempWrite 			; and write it out.
.8c56	c8		iny				iny
.8c57	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c5a	d0 f3		bne $8c4f			bne 	_SSMCopy
.8c5c					_SSMEString:
.8c5c	7a		ply				ply
.8c5d					_SSMExit:
.8c5d	60		rts				rts
.8c5e					_SSMNull:
.8c5e	a9 00		lda #$00			lda 	#0
.8c60	20 ca 98	jsr $98ca			jsr 	StringTempAllocate
.8c63	60		rts				rts
.8c64					SubstringInitial:
.8c64	da		phx				phx 								; save initial stack position
.8c65	08		php				php 								; save carry on stack indicating 2 parameters
.8c66	20 a0 8c	jsr $8ca0			jsr 	EvaluateString 				; get a string
.8c69	5a		phy				phy 								; calculate length to exponent.
.8c6a	a0 ff		ldy #$ff			ldy 	#$FF
.8c6c					_SIFindLength:
.8c6c	c8		iny				iny
.8c6d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c6f	d0 fb		bne $8c6c			bne 	_SIFindLength
.8c71	98		tya				tya
.8c72	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8c75	7a		ply				ply
.8c76	e8		inx				inx
.8c77	20 d3 92	jsr $92d3			jsr 	CheckComma 					; comma next
.8c7a	20 d9 8c	jsr $8cd9			jsr 	Evaluate8BitInteger 		; get next parameter
.8c7d	28		plp				plp 								; is it the last parameter ?
.8c7e	90 07		bcc $8c87			bcc 	_SSIExit 					; if so, exit.
.8c80	e8		inx				inx
.8c81	20 d3 92	jsr $92d3			jsr 	CheckComma 					; comma next
.8c84	20 d9 8c	jsr $8cd9			jsr 	Evaluate8BitInteger 		; get last parameter
.8c87					_SSIExit:
.8c87	fa		plx				plx
.8c88	20 cb 92	jsr $92cb			jsr 	CheckRightBracket 			; check closing bracket
.8c8b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8c8c					EvaluateValue:
.8c8c	48		pha				pha
.8c8d	20 9c 86	jsr $869c			jsr		EvaluateExpression 			; expression
.8c90	20 b1 87	jsr $87b1			jsr 	Dereference					; derefernce it
.8c93	68		pla				pla
.8c94	60		rts				rts
.8c95					EvaluateNumber:
.8c95	20 8c 8c	jsr $8c8c			jsr 	EvaluateValue 				; get a value
.8c98	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c9b	29 10		and #$10			and 	#NSBIsString
.8c9d	d0 16		bne $8cb5			bne 	HelperTypeError
.8c9f	60		rts				rts
.8ca0					EvaluateString:
.8ca0	20 8c 8c	jsr $8c8c			jsr 	EvaluateValue 				; get a value
.8ca3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ca6	29 10		and #$10			and 	#NSBIsString
.8ca8	f0 0b		beq $8cb5			beq 	HelperTypeError
.8caa					CopyAddressToTemp0:
.8caa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8cad	85 36		sta $36				sta 	zTemp0
.8caf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8cb2	85 37		sta $37				sta 	zTemp0+1
.8cb4	60		rts				rts
.8cb5					HelperTypeError:
.8cb5	4c 8e 97	jmp $978e			jmp 	TypeError
.8cb8					EvaluateInteger:
.8cb8	20 95 8c	jsr $8c95			jsr 	EvaluateNumber
.8cbb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8cbe	d0 0a		bne $8cca			bne 	HelperValueError 			; if not, it's a float.
.8cc0	60		rts				rts
.8cc1					EvaluateUnsignedInteger:
.8cc1	20 b8 8c	jsr $8cb8			jsr 	EvaluateInteger 			; check integer is +ve
.8cc4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cc7	30 01		bmi $8cca			bmi 	HelperValueError
.8cc9	60		rts				rts
.8cca					HelperValueError:
.8cca	4c 93 97	jmp $9793			jmp 	ArgumentError
.8ccd					Evaluate16BitInteger:
.8ccd	20 c1 8c	jsr $8cc1			jsr	 	EvaluateUnsignedInteger		; get integer
.8cd0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8cd3	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8cd6	d0 f2		bne $8cca			bne 	HelperValueError
.8cd8	60		rts				rts
.8cd9					Evaluate8BitInteger:
.8cd9	20 c1 8c	jsr $8cc1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8cdc	d0 ec		bne $8cca			bne 	HelperValueError
.8cde	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8ce1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ce4	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8ce7	d0 e1		bne $8cca			bne 	HelperValueError
.8ce9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8cec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8ced					NSMNegate:
.8ced	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cf0	49 80		eor #$80			eor 	#NSBIsNegative
.8cf2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cf5	60		rts				rts
.8cf6					NSMNegateMantissa:
.8cf6	38		sec				sec
.8cf7	a9 00		lda #$00			lda 	#0
.8cf9	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8cfc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cff	a9 00		lda #$00			lda 	#0
.8d01	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8d04	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d07	a9 00		lda #$00			lda 	#0
.8d09	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8d0c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d0f	a9 00		lda #$00			lda 	#0
.8d11	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8d14	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d17	60		rts				rts
.8d18					NSMShiftUpTwo:
.8d18	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d1b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8d1e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d21	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8d24	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8d27	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8d2a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d2d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8d30	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8d33	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8d36	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d39	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d3c	60		rts				rts
.8d3d					NSMSetZeroMantissaOnly:
.8d3d	a9 00		lda #$00			lda 	#0
.8d3f	80 08		bra $8d49			bra 	NSMSetMantissa
.8d41					NSMSetZero:
.8d41	a9 00		lda #$00			lda 	#0
.8d43					NSMSetByte:
.8d43	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d46	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d49					NSMSetMantissa:
.8d49	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d4c	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d4f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d52	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d55	60		rts				rts
.8d56					NSMShiftLeft:
.8d56	18		clc				clc
.8d57					NSMRotateLeft:
.8d57	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d5a	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d5d	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8d60	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8d63	60		rts				rts
.8d64					NSMShiftRight:
.8d64	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8d67	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8d6a	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8d6d	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8d70	60		rts				rts
.8d71					NSMIsZero:
.8d71	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d74	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8d77	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8d7a	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8d7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.974d					DecimalScalarTable:
>974d	66 66 66 66				.dword $66666666 ; 0.1
>9751	de					.byte $de
>9752	1f 85 eb 51				.dword $51eb851f ; 0.01
>9756	db					.byte $db
>9757	4c 37 89 41				.dword $4189374c ; 0.001
>975b	d8					.byte $d8
>975c	ac 8b db 68				.dword $68db8bac ; 0.0001
>9760	d4					.byte $d4
>9761	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9765	d1					.byte $d1
>9766	83 de 1b 43				.dword $431bde83 ; 1e-06
>976a	ce					.byte $ce
>976b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>976f	ca					.byte $ca
>9770	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9774	c7					.byte $c7
>9775	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9779	c4					.byte $c4
>977a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>977e	c0					.byte $c0
>977f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9783	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9784					SyntaxError:
.9784	a9 02		lda #$02		lda	#2
.9786	4c 9a 82	jmp $829a		jmp	ErrorHandler
.9789					RangeError:
.9789	a9 04		lda #$04		lda	#4
.978b	4c 9a 82	jmp $829a		jmp	ErrorHandler
.978e					TypeError:
.978e	a9 05		lda #$05		lda	#5
.9790	4c 9a 82	jmp $829a		jmp	ErrorHandler
.9793					ArgumentError:
.9793	a9 07		lda #$07		lda	#7
.9795	4c 9a 82	jmp $829a		jmp	ErrorHandler
.9798					NotDoneError:
.9798	a9 0c		lda #$0c		lda	#12
.979a	4c 9a 82	jmp $829a		jmp	ErrorHandler
.979d					ErrorText:
>979d	42 72 65 61 6b 00			.text	"Break",0
>97a3	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>97ab	72 72 6f 72 00
>97b0	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>97b8	20 62 79 20 7a 65 72 6f 00
>97c1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>97c9	61 6e 67 65 00
>97ce	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>97d6	6d 61 74 63 68 00
>97dc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>97e4	65 6d 6f 72 79 00
>97ea	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>97f2	61 72 67 75 6d 65 6e 74 00
>97fb	53 74 6f 70 00				.text	"Stop",0
>9800	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9808	6f 6f 20 6c 6f 6e 67 00
>9810	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9818	6e 20 66 61 69 6c 65 64 00
>9821	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9829	61 74 61 00
>982d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9835	65 6e 74 65 64 00
>983b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9843	6c 69 6e 65 20 6e 75 6d 62 65 72 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8d7e					StackOpen:
.8d7e	48		pha				pha 								; save frame byte
.8d7f	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8d81	0a		asl a				asl 	a 							; claim twice this for storage
.8d82	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8d84	38		sec				sec 								; so basically subtracting from
.8d85	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8d87	85 34		sta $34				sta 	basicStack
.8d89	b0 08		bcs $8d93			bcs 	_SONoBorrow
.8d8b	c6 35		dec $35				dec 	basicStack+1
.8d8d	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8d8f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8d91	90 04		bcc $8d97			bcc 	_SOMemory
.8d93					_SONoBorrow:
.8d93	68		pla				pla 								; get marker back and write at TOS
.8d94	92 34		sta ($34)			sta 	(basicStack)
.8d96	60		rts				rts
.8d97					_SOMemory:
.8d97							ERR_MEMORY
.8d97					StackClose:
.8d97	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8d99	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8d9b	0a		asl a				asl 	a 							; claim twice this.
.8d9c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8d9e	85 34		sta $34				sta 	basicStack
.8da0	90 02		bcc $8da4			bcc 	_SCExit
.8da2	e6 35		inc $35				inc 	basicStack+1
.8da4					_SCExit:
.8da4	60		rts				rts
.8da5					StackCheckFrame:
.8da5	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8da7	29 f0		and #$f0			and 	#$F0 						; check type bits
.8da9	d0 01		bne $8dac			bne 	_SCFError 					; different, we have structures mixed up
.8dab	60		rts				rts
.8dac					_SCFError:
.8dac	8a		txa				txa 								; report error X
.8dad	4c 9a 82	jmp $829a			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8db0					STKSaveCodePosition:
.8db0	5a		phy				phy
.8db1	98		tya				tya 								; save Y
.8db2	a0 05		ldy #$05			ldy 	#5
.8db4	91 34		sta ($34),y			sta 	(basicStack),y
.8db6	88		dey				dey 								; save Code Pointer
.8db7					_STKSaveLoop:
.8db7	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8dba	91 34		sta ($34),y			sta 	(basicStack),y
.8dbc	88		dey				dey
.8dbd	d0 f8		bne $8db7			bne 	_STKSaveLoop
.8dbf	7a		ply				ply
.8dc0	60		rts				rts
.8dc1					STKLoadCodePosition:
.8dc1	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8dc3					_STKLoadLoop:
.8dc3	b1 34		lda ($34),y			lda 	(basicStack),y
.8dc5	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8dc8	c8		iny				iny
.8dc9	c0 05		cpy #$05			cpy 	#5
.8dcb	d0 f6		bne $8dc3			bne 	_STKLoadLoop
.8dcd	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8dcf	a8		tay				tay
.8dd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8dd1					StackReset:
.8dd1	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8dd3	85 34		sta $34				sta 	0+basicStack
.8dd5	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8dd7	85 35		sta $35				sta 	1+basicStack
.8dd9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8ddb	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8ddd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.984f					StringConcrete:
.984f	5a		phy				phy 								; save position on stack
.9850	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9853	85 38		sta $38				sta 	zTemp1
.9855	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9858	85 39		sta $39				sta 	zTemp1+1
.985a	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.985c					_SALength:
.985c	c8		iny				iny
.985d	b1 38		lda ($38),y			lda 	(zTemp1),y
.985f	d0 fb		bne $985c			bne 	_SALength
.9861	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9863	b0 3f		bcs $98a4			bcs 	_SALengthError
.9865	98		tya				tya 				 				; length of the new string
.9866	18		clc				clc
.9867	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9869	90 02		bcc $986d			bcc 	_SAHaveLength
.986b	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.986d					_SAHaveLength:
.986d	48		pha				pha 								; save length.
.986e	38		sec				sec
.986f	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9871	6d 0e 07	adc $070e			adc 	StringMemory
.9874	8d 0e 07	sta $070e			sta 	StringMemory
.9877	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9879	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.987c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.987e	6d 0f 07	adc $070f			adc 	StringMemory+1
.9881	8d 0f 07	sta $070f			sta 	StringMemory+1
.9884	85 3b		sta $3b				sta 	zTemp2+1
.9886	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9889	68		pla				pla 								; save length-3 (chars allowed) in first byte
.988a	38		sec				sec
.988b	e9 03		sbc #$03			sbc 	#3
.988d	92 3a		sta ($3a)			sta 	(zTemp2)
.988f	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9891	a0 01		ldy #$01			ldy 	#1
.9893	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9895					_SACopyNewString:
.9895	a0 00		ldy #$00			ldy 	#0
.9897					_SACopyNSLoop:
.9897	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9899	c8		iny				iny 								; write two on in string storage
.989a	c8		iny				iny
.989b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.989d	88		dey				dey 								; this makes it one one.
.989e	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.98a0	d0 f5		bne $9897			bne 	_SACopyNSLoop
.98a2	7a		ply				ply
.98a3	60		rts				rts
.98a4					_SALengthError:
.98a4	a9 09		lda #$09		lda	#9
.98a6	4c 9a 82	jmp $829a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.98a9					StringSystemInitialise:
.98a9	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.98ab	8d 0e 07	sta $070e			sta 	0+StringMemory
.98ae	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.98b0	8d 0f 07	sta $070f			sta 	1+StringMemory
.98b3	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.98b6	60		rts				rts
.98b7					StringSpaceInitialise:
.98b7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.98b9	8d 10 07	sta $0710			sta 	StringInitialised
.98bc	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.98bf	8d 11 07	sta $0711			sta 	StringTempPointer
.98c2	ad 0f 07	lda $070f			lda 	StringMemory+1
.98c5	3a		dec a				dec 	a
.98c6	8d 12 07	sta $0712			sta 	StringTempPointer+1
.98c9	60		rts				rts
.98ca					StringTempAllocate:
.98ca	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.98cc	b0 35		bcs $9903			bcs 	_STALength
.98ce	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.98d1	30 05		bmi $98d8			bmi 	_STAAllocate
.98d3	48		pha				pha 								; save value to subtract.
.98d4	20 b7 98	jsr $98b7			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.98d7	68		pla				pla 								; restore it
.98d8					_STAAllocate:
.98d8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.98da	18		clc				clc  								; deliberate allows one more
.98db	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.98de	8d 11 07	sta $0711			sta 	StringTempPointer
.98e1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.98e4	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.98e6	ad 12 07	lda $0712			lda 	StringTempPointer+1
.98e9	69 ff		adc #$ff			adc 	#$FF
.98eb	8d 12 07	sta $0712			sta 	StringTempPointer+1
.98ee	85 3d		sta $3d				sta 	zsTemp+1
.98f0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.98f3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.98f6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.98f9	a9 10		lda #$10			lda 	#NSTString
.98fb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98fe	a9 00		lda #$00			lda 	#0 							; clear the target string
.9900	92 3c		sta ($3c)			sta 	(zsTemp)
.9902	60		rts				rts
.9903					_STALength:
.9903	a9 09		lda #$09		lda	#9
.9905	4c 9a 82	jmp $829a		jmp	ErrorHandler
.9908					StringTempWrite:
.9908	48		pha				pha
.9909	92 3c		sta ($3c)			sta 	(zsTemp)
.990b	e6 3c		inc $3c				inc 	zsTemp
.990d	d0 02		bne $9911			bne 	_STWNoCarry
.990f	e6 3d		inc $3d				inc 	zsTemp+1
.9911					_STWNoCarry:
.9911	a9 00		lda #$00			lda 	#0
.9913	92 3c		sta ($3c)			sta 	(zsTemp)
.9915	68		pla				pla
.9916	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8dde					BackloadProgram:
.8dde	a2 ff		ldx #$ff			ldx 	#$FF
.8de0	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8de3	20 0d 8e	jsr $8e0d			jsr 	BLReadByte
.8de6	30 1e		bmi $8e06			bmi 	_BPExit
.8de8					_BPCopy:
.8de8	e8		inx				inx  								; copy byte in
.8de9	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8dec	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8def	20 0d 8e	jsr $8e0d			jsr 	BLReadByte 					; read next byte
.8df2	30 0a		bmi $8dfe			bmi 	_BPEndLine 					; -ve = EOL
.8df4	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8df6	d0 02		bne $8dfa			bne 	_BPNotTab
.8df8	a9 20		lda #$20			lda 	#' '
.8dfa					_BPNotTab:
.8dfa	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8dfc	b0 ea		bcs $8de8			bcs 	_BPCopy
.8dfe					_BPEndLine:
.8dfe	20 c9 8f	jsr $8fc9			jsr 	TokeniseLine 				; tokenise the line.
.8e01	20 55 92	jsr $9255			jsr 	MemoryAppend 				; append to current program
.8e04	80 d8		bra $8dde			bra 	BackloadProgram
.8e06					_BPExit:
.8e06	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8e09	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8e0c	60		rts				rts
.8e0d					BLReadByte:
.8e0d					_BLLoad:
.8e0d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8e10	ee 0e 8e	inc $8e0e			inc 	_BLLoad+1
.8e13	d0 03		bne $8e18			bne 	_BLNoCarry
.8e15	ee 0f 8e	inc $8e0f			inc 	_BLLoad+2
.8e18					_BLNoCarry:
.8e18	c9 00		cmp #$00			cmp 	#0
.8e1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8e1b					TokeniseSearchTable:
.8e1b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8e1d	85 36		sta $36				sta 	zTemp0
.8e1f	a0 00		ldy #$00			ldy 	#0
.8e21	a9 80		lda #$80			lda 	#$80 						; token #
.8e23	85 38		sta $38				sta 	zTemp1
.8e25					_TSTLoop:
.8e25	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8e27	30 49		bmi $8e72			bmi 	_TSTFail 					; -ve = end of table
.8e29	f0 2e		beq $8e59			beq 	_TSTNext 					; zero, check next it's a dummy
.8e2b	c8		iny				iny 								; get the hash
.8e2c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e2e	88		dey				dey
.8e2f	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8e32	d0 25		bne $8e59			bne 	_TSTNext
.8e34	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8e37	38		sec				sec
.8e38	ed 00 07	sbc $0700			sbc 	identStart
.8e3b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8e3d	d0 1a		bne $8e59			bne 	_TSTNext
.8e3f	5a		phy				phy 								; save Y , we might fail
.8e40	c8		iny				iny 								; point to text
.8e41	c8		iny				iny
.8e42	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8e45					_TSTCompareName:
.8e45	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8e48	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e4a	d0 0c		bne $8e58			bne 	_TSTNextPullY 				; fail, pullY and do next
.8e4c	e8		inx				inx
.8e4d	c8		iny				iny
.8e4e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8e51	d0 f2		bne $8e45			bne 	_TSTCompareName
.8e53	7a		ply				ply 								; throw Y
.8e54	a5 38		lda $38				lda 	zTemp1 						; get token #
.8e56	38		sec				sec 								; return with CS = passed.
.8e57	60		rts				rts
.8e58					_TSTNextPullY:
.8e58	7a		ply				ply 								; restore current, fall through.
.8e59					_TSTNext:
.8e59	e6 38		inc $38				inc 	zTemp1 						; token counter
.8e5b	98		tya				tya
.8e5c	18		clc				clc
.8e5d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8e5f	1a		inc a				inc 	a 							; +1
.8e60	1a		inc a				inc 	a 							; +2
.8e61	a8		tay				tay
.8e62	10 c1		bpl $8e25			bpl 	_TSTLoop 					; if Y < $80 loop back
.8e64	98		tya				tya 								; add Y to zTemp0 and reset Y
.8e65	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8e67	18		clc				clc  								; but have tables > 255 bytes
.8e68	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8e6a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8e6c	90 b7		bcc $8e25			bcc 	_TSTLoop
.8e6e	e6 37		inc $37				inc 	zTemp0+1
.8e70	80 b3		bra $8e25			bra 	_TSTLoop
.8e72					_TSTFail:
.8e72	18		clc				clc
.8e73	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8e74					KeywordSet0:
>8e74	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e76	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e78	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e7a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8e80	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8e88	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8e8e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8e95	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8e9c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8ea3	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8ea9	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8eb1	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8eb9	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8ebf	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8ec6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8ecc	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8ed4	28
>8ed5	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8edb	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8ee1	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8ee7	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8eee	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8ef4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8efa	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8eff	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8f03	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8f09	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8f11	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8f18	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8f1f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8f27	43
>8f28	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8f2e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8f35	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8f3b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8f41	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8f46	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8f4c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8f51	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8f58	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8f5e	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8f63	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8f6a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8f70	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8f75	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8f7d	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8f83	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8f87	ff					.text	$FF
.8f88					KeywordSet1:
>8f88	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f8a	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f8c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f8e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8f96	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8f9d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8fa2	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8fa8	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8fad	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8fb5	45
>8fb6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8fbb	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8fc1	ff					.text	$FF
.8fc2					KeywordSet2:
>8fc2	00 65					.text	0,$65,""               ; $80 !0:EOF
>8fc4	00 58					.text	0,$58,""               ; $81 !1:SH1
>8fc6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8fc8	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8fc9					TokeniseLine:
.8fc9	20 51 91	jsr $9151			jsr 	FixLineBufferCase 			; fix line case
.8fcc	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8fce	8d 15 07	sta $0715			sta 	tokenOffset
.8fd1	9c 16 07	stz $0716			stz 	tokenLineNumber
.8fd4	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8fd7	a2 ff		ldx #$ff			ldx 	#$FF
.8fd9					_TKFindFirst:
.8fd9	e8		inx				inx
.8fda	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8fdd	f0 79		beq $9058			beq 	_TKExit
.8fdf	c9 20		cmp #$20			cmp 	#' '
.8fe1	90 f6		bcc $8fd9			bcc 	_TKFindFirst
.8fe3	c9 30		cmp #$30			cmp 	#'0'
.8fe5	90 07		bcc $8fee			bcc 	_TKNoLineNumber
.8fe7	c9 3a		cmp #$3a			cmp 	#'9'+1
.8fe9	b0 03		bcs $8fee			bcs 	_TKNoLineNumber
.8feb	20 7b 91	jsr $917b			jsr 	TokeniseExtractLineNumber
.8fee					_TKNoLineNumber:
.8fee					_TKTokeniseLoop:
.8fee	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8ff1	f0 65		beq $9058			beq 	_TKExit
.8ff3	e8		inx				inx
.8ff4	c9 20		cmp #$20			cmp 	#' '
.8ff6	f0 f6		beq $8fee			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8ff8	ca		dex				dex 								; undo last get, A contains character, X is position.
.8ff9	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8ffb	f0 61		beq $905e			beq 	_TKTokeniseIdentifier
.8ffd	c9 41		cmp #$41			cmp 	#'A'
.8fff	90 04		bcc $9005			bcc 	_TKTokenisePunctuation
.9001	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9003	90 59		bcc $905e			bcc 	_TKTokeniseIdentifier
.9005					_TKTokenisePunctuation:
.9005	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9007	f0 27		beq $9030			beq 	_TKString
.9009	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.900b	f0 28		beq $9035			beq 	_TKHexConstant
.900d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.900f	f0 29		beq $903a			beq 	_TKCheckDouble
.9011	c9 3e		cmp #$3e			cmp 	#'>'
.9013	f0 25		beq $903a			beq 	_TKCheckDouble
.9015					_TKStandardPunctuation:
.9015	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9018	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.901a	90 0e		bcc $902a			bcc 	_TKNoShift
.901c	48		pha				pha 								; save
.901d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.901f	85 36		sta $36				sta 	zTemp0
.9021	68		pla				pla
.9022	29 20		and #$20			and 	#32 						; bit 5
.9024	4a		lsr a				lsr 	a 							; shift into bit 3
.9025	4a		lsr a				lsr 	a
.9026	05 36		ora $36				ora 	zTemp0
.9028	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.902a					_TKNoShift:
.902a	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte 			; write the punctuation character
.902d	e8		inx				inx 								; consume the character
.902e	80 be		bra $8fee			bra 	_TKTokeniseLoop 			; and loop round again.
.9030					_TKString:
.9030	20 e0 90	jsr $90e0			jsr 	TokeniseString
.9033	80 b9		bra $8fee			bra 	_TKTokeniseLoop
.9035					_TKHexConstant:
.9035	20 1b 91	jsr $911b			jsr 	TokeniseHexConstant
.9038	80 b4		bra $8fee			bra 	_TKTokeniseLoop
.903a					_TKCheckDouble:
.903a	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.903d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.903f	90 d4		bcc $9015			bcc 	_TKStandardPunctuation
.9041	c9 3f		cmp #$3f			cmp 	#'>'+1
.9043	b0 d0		bcs $9015			bcs 	_TKStandardPunctuation
.9045	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9048	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.904a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.904b	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.904e	38		sec				sec
.904f	e9 3c		sbc #$3c			sbc 	#'<'
.9051	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9054	e8		inx				inx 								; consume both
.9055	e8		inx				inx
.9056	80 96		bra $8fee			bra 	_TKTokeniseLoop
.9058	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.905a	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.905d	60		rts				rts
.905e					_TKTokeniseIdentifier:
.905e	8e 00 07	stx $0700			stx 	identStart 					; save start
.9061	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9064					_TKCheckLoop:
.9064	e8		inx				inx 								; look at next, we know first is identifier.
.9065	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9068	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.906a	f0 f8		beq $9064			beq 	_TKCheckLoop
.906c	c9 30		cmp #$30			cmp	 	#"0"
.906e	90 0c		bcc $907c			bcc 	_TKEndIdentifier
.9070	c9 3a		cmp #$3a			cmp 	#"9"+1
.9072	90 f0		bcc $9064			bcc 	_TKCheckLoop
.9074	c9 41		cmp #$41			cmp	 	#"A"
.9076	90 04		bcc $907c			bcc 	_TKEndIdentifier
.9078	c9 5b		cmp #$5b			cmp 	#"Z"+1
.907a	90 e8		bcc $9064			bcc 	_TKCheckLoop
.907c					_TKEndIdentifier:
.907c	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.907f	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9081	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9083	f0 06		beq $908b			beq 	_TKHasTypeCharacter
.9085	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9087	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9089	d0 07		bne $9092			bne 	_TKNoTypeCharacter
.908b					_TKHasTypeCharacter:
.908b	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.908e	e8		inx				inx 								; read next
.908f	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9092					_TKNoTypeCharacter:
.9092	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9094	d0 09		bne $909f			bne 	_TKNoArray
.9096	e8		inx				inx 								; skip the (
.9097	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.909a	09 04		ora #$04			ora 	#$04
.909c	8d 04 07	sta $0704			sta 	identTypeByte
.909f					_TKNoArray:
.909f	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.90a2	20 3c 91	jsr $913c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.90a5	a0 8e		ldy #$8e			ldy 	#(KeywordSet0) >> 8
.90a7	a9 74		lda #$74			lda 	#(KeywordSet0) & $FF
.90a9	20 1b 8e	jsr $8e1b			jsr 	TokeniseSearchTable
.90ac	a2 00		ldx #$00			ldx 	#0
.90ae	b0 1f		bcs $90cf			bcs 	_TKFoundToken
.90b0	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.90b2	a9 88		lda #$88			lda 	#(KeywordSet1) & $FF
.90b4	20 1b 8e	jsr $8e1b			jsr 	TokeniseSearchTable
.90b7	a2 81		ldx #$81			ldx 	#$81
.90b9	b0 14		bcs $90cf			bcs 	_TKFoundToken
.90bb	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.90bd	a9 88		lda #$88			lda 	#(KeywordSet1) & $FF
.90bf	20 1b 8e	jsr $8e1b			jsr 	TokeniseSearchTable
.90c2	a2 82		ldx #$82			ldx 	#$82
.90c4	b0 09		bcs $90cf			bcs 	_TKFoundToken
.90c6	20 cc 91	jsr $91cc			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.90c9	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.90cc	4c ee 8f	jmp $8fee			jmp 	_TKTokeniseLoop 			; and go round again.
.90cf					_TKFoundToken:
.90cf	48		pha				pha 								; save token
.90d0	8a		txa				txa 								; shift in X, is there one ?
.90d1	f0 03		beq $90d6			beq 	_TKNoTShift
.90d3	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte 			; if so, write it out
.90d6					_TKNoTShift:
.90d6	68		pla				pla 								; restore and write token
.90d7	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.90da	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.90dd	4c ee 8f	jmp $8fee			jmp 	_TKTokeniseLoop 			; and go round again.
.90e0					TokeniseString:
.90e0	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.90e2	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.90e5	e8		inx				inx									; start of quoted string.
.90e6	da		phx				phx 								; push start of string on top
.90e7	ca		dex				dex
.90e8					_TSFindEnd:
.90e8	e8		inx				inx
.90e9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.90ec	f0 04		beq $90f2			beq 	_TSEndOfString
.90ee	c9 22		cmp #$22			cmp 	#'"'
.90f0	d0 f6		bne $90e8			bne 	_TSFindEnd
.90f2					_TSEndOfString:
.90f2	7a		ply				ply  								; so now Y is first character, X is character after end.
.90f3	48		pha				pha 								; save terminating character
.90f4	20 fc 90	jsr $90fc			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.90f7	68		pla				pla 								; terminating character
.90f8	f0 01		beq $90fb			beq 	_TSNotQuote					; if it wasn't EOS skip it
.90fa	e8		inx				inx
.90fb					_TSNotQuote:
.90fb	60		rts				rts
.90fc					TOWriteBlockXY:
.90fc	86 36		stx $36				stx 	zTemp0 						; write end character
.90fe	98		tya				tya
.90ff	49 ff		eor #$ff			eor 	#$FF
.9101	38		sec				sec
.9102	65 36		adc $36				adc 	zTemp0
.9104	1a		inc a				inc 	a 							; one extra for NULL
.9105	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.9108					_TOBlockLoop:
.9108	c4 36		cpy $36				cpy 	zTemp0
.910a	f0 09		beq $9115			beq 	_TOBlockExit
.910c	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.910f	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.9112	c8		iny				iny
.9113	80 f3		bra $9108			bra 	_TOBlockLoop
.9115					_TOBlockExit:
.9115	a9 00		lda #$00			lda 	#0
.9117	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.911a	60		rts				rts
.911b					TokeniseHexConstant:
.911b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.911d	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.9120	e8		inx				inx									; start of quoted string.
.9121	da		phx				phx 								; push start of constant on top
.9122	ca		dex				dex
.9123					_THFindLoop:
.9123	e8		inx				inx
.9124	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9127	c9 30		cmp #$30			cmp 	#"0"
.9129	90 0c		bcc $9137			bcc 	_THFoundEnd
.912b	c9 3a		cmp #$3a			cmp 	#"9"+1
.912d	90 f4		bcc $9123			bcc 	_THFindLoop
.912f	c9 41		cmp #$41			cmp 	#"A"
.9131	90 04		bcc $9137			bcc 	_THFoundEnd
.9133	c9 47		cmp #$47			cmp 	#"F"+1
.9135	90 ec		bcc $9123			bcc 	_THFindLoop
.9137					_THFoundEnd:
.9137	7a		ply				ply 								; restore start
.9138	20 fc 90	jsr $90fc			jsr 	TOWriteBlockXY 				; output the block
.913b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.913c					TokeniseCalculateHash:
.913c	da		phx				phx
.913d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9140	a9 00		lda #$00			lda 	#0
.9142					_TCHLoop:
.9142	18		clc				clc
.9143	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.9146	e8		inx				inx
.9147	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.914a	d0 f6		bne $9142			bne 	_TCHLoop
.914c	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.914f	fa		plx				plx
.9150	60		rts				rts
.9151					FixLineBufferCase:
.9151	a2 00		ldx #$00			ldx 	#0
.9153					_FLBCLoop:
.9153	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.9156	f0 22		beq $917a			beq 	_FLBCExit 					; end of string.
.9158	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.915a	f0 11		beq $916d			beq 	_FLBCInQuotes
.915c	e8		inx				inx
.915d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.915f	90 f2		bcc $9153			bcc 	_FLBCLoop
.9161	c9 7b		cmp #$7b			cmp 	#'z'+1
.9163	b0 ee		bcs $9153			bcs 	_FLBCLoop
.9165	38		sec				sec 								; make U/C
.9166	e9 20		sbc #$20			sbc 	#32
.9168	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.916b	80 e6		bra $9153			bra 	_FLBCLoop
.916d					_FLBCInQuotes:
.916d	e8		inx				inx 								; advance
.916e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9171	f0 07		beq $917a			beq 	_FLBCExit 					; exit on EOS
.9173	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9175	d0 f6		bne $916d			bne 	_FLBCInQuotes
.9177	e8		inx				inx 								; skip over it
.9178	80 d9		bra $9153			bra 	_FLBCLoop
.917a					_FLBCExit:
.917a	60		rts				rts
.917b					TokeniseExtractLineNumber:
.917b	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.917e	48		pha				pha
.917f	ad 16 07	lda $0716			lda 	tokenLineNumber
.9182	48		pha				pha
.9183	20 b9 91	jsr $91b9			jsr 	_TELNTimes2 				; line # x 4
.9186	20 b9 91	jsr $91b9			jsr 	_TELNTimes2 				; line # x 2
.9189	18		clc				clc 								; add stacked value
.918a	68		pla				pla
.918b	6d 16 07	adc $0716			adc 	tokenLineNumber
.918e	8d 16 07	sta $0716			sta 	tokenLineNumber
.9191	68		pla				pla
.9192	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9195	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9198	20 b9 91	jsr $91b9			jsr 	_TELNTimes2 				; line # x 10
.919b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.919e	e8		inx				inx
.919f	29 0f		and #$0f			and 	#15 						; add to line #
.91a1	18		clc				clc
.91a2	6d 16 07	adc $0716			adc 	tokenLineNumber
.91a5	8d 16 07	sta $0716			sta 	tokenLineNumber
.91a8	90 03		bcc $91ad			bcc 	_TLENNoCarry
.91aa	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.91ad					_TLENNoCarry:
.91ad	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.91b0	c9 30		cmp #$30			cmp 	#'0'
.91b2	90 04		bcc $91b8			bcc 	_TLENExit
.91b4	c9 3a		cmp #$3a			cmp 	#'9'+1
.91b6	90 c3		bcc $917b			bcc 	TokeniseExtractLineNumber
.91b8					_TLENExit:
.91b8	60		rts				rts
.91b9					_TELNTimes2:
.91b9	0e 16 07	asl $0716			asl 	tokenLineNumber
.91bc	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.91bf	60		rts				rts
.91c0					TokeniseWriteByte:
.91c0	da		phx				phx
.91c1	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.91c4	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.91c7	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.91ca	fa		plx				plx
.91cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.91cc					CheckCreateVariableRecord:
.91cc	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.91ce	85 36		sta $36				sta 	0+zTemp0
.91d0	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.91d2	85 37		sta $37				sta 	1+zTemp0
.91d4					_CCVSearch:
.91d4	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.91d6	f0 2c		beq $9204			beq 	_CCVFail
.91d8	a0 01		ldy #$01			ldy 	#1 							; read the hash
.91da	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.91dc	cd 03 07	cmp $0703			cmp 	identHash
.91df	d0 16		bne $91f7			bne 	_CCVNext
.91e1	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.91e3	ae 00 07	ldx $0700			ldx 	identStart
.91e6					_CCVCompare:
.91e6	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.91e9	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.91eb	e8		inx				inx 								; advance pointers
.91ec	c8		iny				iny
.91ed	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.91ee	d0 07		bne $91f7			bne 	_CCVNext  					; didn't match go to next.
.91f0	90 f4		bcc $91e6			bcc 	_CCVCompare 				; not finished yet.
.91f2	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.91f5	f0 41		beq $9238			beq 	_CCVFound 					; yes, we were successful
.91f7					_CCVNext:
.91f7	18		clc				clc
.91f8	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.91fa	65 36		adc $36				adc 	zTemp0
.91fc	85 36		sta $36				sta 	zTemp0
.91fe	90 d4		bcc $91d4			bcc 	_CCVSearch
.9200	e6 37		inc $37				inc 	zTemp0+1
.9202	80 d0		bra $91d4			bra 	_CCVSearch
.9204					_CCVFail:
.9204	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9206	ad 03 07	lda $0703			lda 	identHash
.9209	91 36		sta ($36),y			sta 	(zTemp0),y
.920b	c8		iny				iny 								; offset 2 is the type byte
.920c	ad 04 07	lda $0704			lda 	identTypeByte
.920f	91 36		sta ($36),y			sta 	(zTemp0),y
.9211	c8		iny				iny
.9212					_CCVData:
.9212	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9214	91 36		sta ($36),y			sta 	(zTemp0),y
.9216	c8		iny				iny
.9217	c0 08		cpy #$08			cpy 	#8
.9219	90 f7		bcc $9212			bcc 	_CCVData
.921b	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.921e					_CCVCopyName:
.921e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9221	91 36		sta ($36),y			sta 	(zTemp0),y
.9223	e8		inx				inx
.9224	c8		iny				iny
.9225	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9228	d0 f4		bne $921e			bne 	_CCVCopyName
.922a	98		tya				tya 								; patch offset
.922b	92 36		sta ($36)			sta 	(zTemp0)
.922d	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.922f	91 36		sta ($36),y			sta 	(zTemp0),y
.9231	88		dey				dey
.9232	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9234	09 80		ora #$80			ora 	#$80
.9236	91 36		sta ($36),y			sta 	(zTemp0),y
.9238					_CCVFound:
.9238	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.923a	38		sec				sec
.923b	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.923d	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.923f	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.9242	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9244	20 c0 91	jsr $91c0			jsr 	TokeniseWriteByte
.9247	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9917					MemoryPeek:
.9917	b2 36		lda ($36)			lda 	(zTemp0)
.9919	60		rts				rts
.991a					MemoryPoke:
.991a	92 36		sta ($36)			sta 	(zTemp0)
.991c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.991d					EXTPrintCharacter:
.991d	48		pha				pha
.991e	da		phx				phx
.991f	5a		phy				phy
.9920	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9923	7a		ply				ply
.9924	fa		plx				plx
.9925	68		pla				pla
.9926	60		rts				rts
.9927					EXTInputSingleCharacter:
.9927	da		phx				phx
.9928	5a		phy				phy
.9929					_EISCWait:
.9929	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.992c	c9 00		cmp #$00			cmp 	#0
.992e	f0 f9		beq $9929			beq 	_EISCWait
.9930	7a		ply				ply
.9931	fa		plx				plx
.9932	60		rts				rts
.9933					EXTInputLine:
.9933	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9935					_ILLoop:
.9935	da		phx				phx 								; read character in
.9936	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9939	fa		plx				plx
.993a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.993c	f0 12		beq $9950			beq 	_ILBackspace
.993e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9940	f0 15		beq $9957			beq 	_ILExit
.9942	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9944	90 ef		bcc $9935			bcc 	_ILLoop
.9946	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9948	f0 eb		beq $9935			beq 	_ILLoop
.994a	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.994d	e8		inx				inx
.994e	80 e5		bra $9935			bra 	_ILLoop
.9950					_ILBackspace:
.9950	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9952	f0 e1		beq $9935			beq 	_ILLoop
.9954	ca		dex				dex 								; back one.
.9955	80 de		bra $9935			bra 	_ILLoop
.9957					_ILExit:
.9957	20 1d 99	jsr $991d			jsr 	EXTPrintCharacter
.995a	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.995d	60		rts				rts
.995e					EXTBreakCheck:
.995e	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9248					MemoryNew:
.9248	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.924a	85 30		sta $30				sta 	codePtr
.924c	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.924e	85 31		sta $31				sta 	codePtr+1
.9250	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9252	92 30		sta ($30)			sta 	(codePtr)
.9254	60		rts				rts
.9255					MemoryAppend:
.9255	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9257	85 30		sta $30				sta 	codePtr
.9259	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.925b	85 31		sta $31				sta 	codePtr+1
.925d					_MAFindEnd:
.925d	b2 30		lda ($30)			lda 	(codePtr)
.925f	f0 0d		beq $926e			beq 	_MAFoundEnd
.9261	18		clc				clc
.9262	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9264	65 30		adc $30				adc 	codePtr
.9266	85 30		sta $30				sta 	codePtr
.9268	90 02		bcc $926c			bcc 	_CREExit
.926a	e6 31		inc $31				inc 	codePtr+1
.926c					_CREExit:
.926c	80 ef		bra $925d			bra 	_MAFindEnd
.926e					_MAFoundEnd:
.926e	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9271	c0 04		cpy #$04			cpy 	#4 							; blank line
.9273	f0 0e		beq $9283			beq 	_MANoLine
.9275	a9 00		lda #$00			lda 	#0 							; end of program
.9277	91 30		sta ($30),y			sta 	(codePtr),y
.9279					_MACopy:
.9279	88		dey				dey
.927a	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.927d	91 30		sta ($30),y			sta 	(codePtr),y
.927f	c0 00		cpy #$00			cpy 	#0
.9281	d0 f6		bne $9279			bne 	_MACopy
.9283					_MANoLine:
.9283	60		rts				rts
.9284					MemoryInline:
.9284	98		tya				tya 								; put address into stack,x
.9285	18		clc				clc
.9286	65 30		adc $30				adc 	codePtr
.9288	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.928b	a5 31		lda $31				lda 	codePtr+1
.928d	69 00		adc #$00			adc 	#0
.928f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9292	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9295	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9298	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9299					MemoryTransferAX:
.9299	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.929b	86 37		stx $37				stx 	zTemp0+1
.929d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.929f	85 30		sta $30				sta 	codePtr
.92a1	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.92a3	85 31		sta $31				sta 	codePtr+1
.92a5					_MTAXLoop:
.92a5	b2 30		lda ($30)			lda 	(codePtr)
.92a7	f0 1d		beq $92c6			beq 	_MTAXError 					; not found.
.92a9	a0 01		ldy #$01			ldy 	#1 							; check LSB
.92ab	b1 30		lda ($30),y			lda 	(codePtr),y
.92ad	c5 36		cmp $36				cmp 	zTemp0
.92af	d0 07		bne $92b8			bne 	_MTAXNext
.92b1	c8		iny				iny 								; check MSB
.92b2	b1 30		lda ($30),y			lda 	(codePtr),y
.92b4	c5 37		cmp $37				cmp 	zTemp0+1
.92b6	f0 0d		beq $92c5			beq 	_MTAXExit 					; success !
.92b8					_MTAXNext:
.92b8	18		clc				clc
.92b9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92bb	65 30		adc $30				adc 	codePtr
.92bd	85 30		sta $30				sta 	codePtr
.92bf	90 02		bcc $92c3			bcc 	_CREExit
.92c1	e6 31		inc $31				inc 	codePtr+1
.92c3					_CREExit:
.92c3	80 e0		bra $92a5			bra 	_MTAXLoop
.92c5					_MTAXExit:
.92c5	60		rts				rts
.92c6					_MTAXError:
.92c6	a9 0d		lda #$0d		lda	#13
.92c8	4c 9a 82	jmp $829a		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
