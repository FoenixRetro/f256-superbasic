
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 19:44:42 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 e6 93	jsr $93e6			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 82 85	jsr $8582			jsr 	RunDemos
.8013	20 c8 8d	jsr $8dc8			jsr 	NewCommand 					; erase current program
.8016	20 6b a0	jsr $a06b			jsr 	BackloadProgram
.8019	4c 24 89	jmp $8924			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1161."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 31 36 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=2					GXSpritePage = 2
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 76 86	jsr $8676			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 e7 85	jsr $85e7			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 f8 85	jsr $85f8			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 05 86	jsr $8605			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 e7 85	jsr $85e7			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 f8 85	jsr $85f8			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 e7 85	jsr $85e7			jsr 	GXOpenBitmap
.8216	20 94 86	jsr $8694			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 05 86	jsr $8605			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3c		sta ($3c),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 f8 85	jsr $85f8			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.82ad	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3d		sta $3d				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.82ca	a5 3d		lda $3d				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3d		sta $3d				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 5b 86	jsr $865b			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 e7 85	jsr $85e7			jsr 	GXOpenBitmap 				; start drawing
.8345	20 76 86	jsr $8676			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 05 86	jsr $8605			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 5b 86	jsr $865b			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 f8 85	jsr $85f8			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3d		lda $3d				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3d		lda $3d				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3d		sta $3d				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap 			; fix up.
.83d0	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3d		sta $3d				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3c		sta $3c				sta 	gsTemp
.83e7	60		rts				rts
.83e8					GXDLTCheckWrap:
.83e8	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3d		sta $3d				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/render.asm

.83f5					GXDrawGraphicElement:
.83f5	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.83f8	3a		dec a				dec 	a
.83f9	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.83fc	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.83ff	9c 3d a6	stz $a63d			stz 	gxHFlip
.8402	2c 3b 06	bit $063b			bit 	gxMode
.8405	10 03		bpl $840a			bpl 	_GXNotVertical
.8407	8d 54 06	sta $0654			sta 	gxVFlip
.840a					_GXNotVertical:
.840a	50 03		bvc $840f			bvc 	_GXNotHorizontal
.840c	8d 3d a6	sta $a63d			sta 	gxHFlip
.840f					_GXNotHorizontal:
.840f	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.8412	8e 51 06	stx $0651			stx 	gxAcquireVector
.8415	20 e7 85	jsr $85e7			jsr 	gxOpenBitmap 				; open the bitmap.
.8418	ad 3b 06	lda $063b			lda 	gxMode 						; scale bits
.841b	4a		lsr a				lsr 	a
.841c	4a		lsr a				lsr 	a
.841d	4a		lsr a				lsr 	a
.841e	29 07		and #$07			and		#7
.8420	1a		inc a				inc 	a
.8421	8d 53 06	sta $0653			sta 	gxScale
.8424	64 38		stz $38				stz 	gzTemp1						; start first line
.8426					_GXGELoop:
.8426	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.8428	4d 54 06	eor $0654			eor 	gxVFlip
.842b	aa		tax				tax 								; get the Xth line.
.842c	20 50 84	jsr $8450			jsr 	_GXCallAcquire 				; get that data.
.842f	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.8432	85 39		sta $39				sta 	gzTemp1+1
.8434					_GXGELoop2:
.8434	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8437	cd 3a 06	cmp $063a			cmp 	gxHeight
.843a	b0 10		bcs $844c			bcs 	_GXDGEExit
.843c	20 53 84	jsr $8453			jsr 	GXRenderOneLine 			; render line
.843f	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.8441	d0 f1		bne $8434			bne 	_GXGELoop2
.8443	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.8445	a5 38		lda $38				lda 	gzTemp1
.8447	cd 4f 06	cmp $064f			cmp 	gxSize
.844a	d0 da		bne $8426			bne 	_GXGELoop
.844c					_GXDGEExit:
.844c	20 f8 85	jsr $85f8			jsr 	GXCloseBitmap
.844f	60		rts				rts
.8450					_GXCallAcquire:
.8450	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.8453					GXRenderOneLine:
.8453	20 05 86	jsr $8605			jsr 	GXPositionCalc 				; calculate position/offset.
.8456	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8459	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.845b					_GXROLLoop1:
.845b	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.845e	85 3b		sta $3b				sta 	gzTemp2+1
.8460					_GXROLLoop2:
.8460	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.8462	4d 3d a6	eor $a63d			eor 	gxHFlip
.8465	aa		tax				tax 								; read from the pixel buffer
.8466	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8469	f0 0a		beq $8475			beq 	_GXZeroPixel 				; don't draw if zero.
.846b	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.846d	2d 3e 06	and $063e			and 	gxANDValue
.8470	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8473	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8475					_GXZeroPixel:
.8475	c8		iny				iny 								; advance pointer
.8476	d0 05		bne $847d			bne 	_GXNoShift
.8478	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.847a	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.847d					_GXNoShift:
.847d	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.847f	d0 df		bne $8460			bne 	_GXROLLoop2
.8481	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.8483	a5 3a		lda $3a				lda 	gzTemp2
.8485	cd 4f 06	cmp $064f			cmp 	gxSize
.8488	d0 d1		bne $845b			bne 	_GXROLLoop1
.848a	ee 33 06	inc $0633			inc 	gxY0
.848d	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.a63d					gxHFlip:
>a63d							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/font.asm

.848e					GXFontHandler:
.848e	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.8490	06 36		asl $36				asl	 	gzTemp0 					; x 2
.8492	26 37		rol $37				rol	 	gzTemp0+1
.8494	06 36		asl $36				asl	 	gzTemp0 					; x 4
.8496	26 37		rol $37				rol	 	gzTemp0+1
.8498	06 36		asl $36				asl	 	gzTemp0 					; x 8
.849a	26 37		rol $37				rol	 	gzTemp0+1
.849c	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.849e	09 c0		ora #$c0			ora 	#$C0
.84a0	85 37		sta $37				sta 	gzTemp0+1
.84a2	a9 08		lda #$08			lda 	#8 							; size 8x8
.84a4	a2 ac		ldx #$ac			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.84a6	a0 84		ldy #$84			ldy 	#GXGetGraphicDataFont >> 8
.84a8	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.84ab	60		rts				rts
.84ac					GXGetGraphicDataFont:
.84ac	8a		txa				txa 								; X->Y
.84ad	a8		tay				tay
.84ae	a6 01		ldx $01				ldx 	1 							; preserve old value
.84b0	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.84b2	85 01		sta $01				sta 	1
.84b4	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.84b6	86 01		stx $01				stx 	1 							; put old value back.
.84b8	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.84ba					_GXExpand:
.84ba	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.84bd	0a		asl a				asl 	a 							; shift bit 7 into C
.84be	90 08		bcc $84c8			bcc 	_GXNoPixel
.84c0	48		pha				pha 								; if set, set pixel buffer to current colour.
.84c1	ad 3c 06	lda $063c			lda 	gxColour
.84c4	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.84c7	68		pla				pla
.84c8					_GXNoPixel:
.84c8	e8		inx				inx 								; do the whole byte.
.84c9	e0 08		cpx #$08			cpx 	#8
.84cb	d0 ed		bne $84ba			bne 	_GXExpand
.84cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/sprite.asm

.84ce					GXSpriteHandler:
.84ce	a9 08		lda #$08			lda 	#8
.84d0	a2 d8		ldx #$d8			ldx 	#GXSpriteAcquire & $FF
.84d2	a0 84		ldy #$84			ldy 	#GXSpriteAcquire >> 8
.84d4	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.84d7	60		rts				rts
.84d8					GXSpriteAcquire:
.84d8	a0 00		ldy #$00			ldy 	#0
.84da	8a		txa				txa
.84db	0a		asl a				asl 	a
.84dc	0a		asl a				asl 	a
.84dd	0a		asl a				asl 	a
.84de	aa		tax				tax
.84df					_GXSALoop:
.84df	bd 00 41	lda $4100,x			lda 	$4100,x
.84e2	e8		inx				inx
.84e3	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.84e6	c8		iny				iny
.84e7	c0 08		cpy #$08			cpy 	#8
.84e9	d0 f4		bne $84df			bne 	_GXSALoop
.84eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.84ec					GraphicDraw:
.84ec	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.84ee	b0 06		bcs $84f6			bcs 	_GDCoordinate
.84f0	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.84f2	84 37		sty $37				sty 	gzTemp0+1
.84f4	80 2c		bra $8522			bra 	_GDExecuteA 				; and execute
.84f6					_GDCoordinate:
.84f6	48		pha				pha 								; save AXY
.84f7	da		phx				phx
.84f8	5a		phy				phy
.84f9	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.84fb					_GDCopy1:
.84fb	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.84fe	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.8501	ca		dex				dex
.8502	10 f7		bpl $84fb			bpl 	_GDCopy1
.8504	68		pla				pla 								; update Y
.8505	8d 2b 06	sta $062b			sta 	gxCurrentY
.8508	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.850b	68		pla				pla
.850c	8d 29 06	sta $0629			sta 	gxCurrentX
.850f	68		pla				pla 								; get A (command+X.1) back
.8510	48		pha				pha
.8511	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.8513	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.8516	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.8518					_GDCopy2:
.8518	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.851b	9d 31 06	sta $0631,x			sta 	gxX0,x
.851e	ca		dex				dex
.851f	10 f7		bpl $8518			bpl 	_GDCopy2
.8521	68		pla				pla 								; get command back
.8522					_GDExecuteA:
.8522	29 fe		and #$fe			and 	#$FE 						; lose LSB
.8524	aa		tax				tax
.8525	7c 29 85	jmp ($8529,x)			jmp 	(GDVectors,x)
.8528					GXMove:
.8528	60		rts				rts
.8529					GDVectors:
>8529							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>852d	c9 81						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>852f	55 85						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>8531	8e 84						.word 	GXFontHandler 				; $04 		; Draw from font
>8533	ce 84						.word 	GXSpriteHandler 			; $05 		; Draw from sprite
>8535							.fill 	10*2 						; $06-$0F 	: Reserved
>8549	28 85						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>854b	13 82						.word 	GXLine 						; $11 		: Draw line
>854d	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>854f	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>8551	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>8553	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
.8555					GXSetColourMode:
.8555	a6 36		ldx $36				ldx 	gzTemp0
.8557	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.855a	a5 37		lda $37				lda 	gzTemp0+1 								;
.855c	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.855f	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8561	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8564	ae 3c 06	ldx $063c			ldx 	gxColour
.8567	8e 3d 06	stx $063d			stx 	gxEORValue
.856a	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.856c	90 03		bcc $8571			bcc 	_GXSDCNotAndColour
.856e	8e 3e 06	stx $063e			stx 	gxANDValue
.8571					_GXSDCNotAndColour:
.8571	d0 03		bne $8576			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.8573	9c 3d 06	stz $063d			stz 	gxEORValue
.8576					_GXSDCNotAnd:
.8576	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8577	90 08		bcc $8581			bcc 	_GXSDCNoFlip
.8579	ad 3e 06	lda $063e			lda	 	gxANDValue
.857c	49 ff		eor #$ff			eor 	#$FF
.857e	8d 3e 06	sta $063e			sta 	gxANDValue
.8581					_GXSDCNoFlip:
.8581	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.8582					RunDemos:
.8582	64 01		stz $01				stz 	1
.8584	a9 0f		lda #$0f			lda 	#$0F
.8586	8d 00 d0	sta $d000			sta 	$D000
.8589	a9 01		lda #$01			lda 	#1
.858b	8d 00 d1	sta $d100			sta 	$D100
.858e	9c 01 d1	stz $d101			stz 	$D101
.8591	9c 02 d1	stz $d102			stz 	$D102
.8594	a9 01		lda #$01			lda 	#1
.8596	8d 03 d1	sta $d103			sta 	$D103
.8599	a9 08		lda #$08			lda 	#8
.859b	8d 39 06	sta $0639			sta 	gxBasePage
.859e	a9 f0		lda #$f0			lda 	#240
.85a0	8d 3a 06	sta $063a			sta 	gxHeight
.85a3					loop:
.85a3	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.85a5	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.85a7	a0 00		ldy #$00			ldy 	#(0)
.85a9	20 ec 84	jsr $84ec			jsr 	GraphicDraw
.85ac	a9 06		lda #$06			lda 	#((3)*2)+((($1C) >> 8) & 1)
.85ae	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.85b0	a0 18		ldy #$18			ldy 	#(0+8*3)
.85b2	20 ec 84	jsr $84ec			jsr 	GraphicDraw
.85b5	a9 20		lda #$20			lda 	#((16)*2)+(((20) >> 8) & 1)
.85b7	a2 14		ldx #$14			ldx 	#((20) & $FF)
.85b9	a0 1e		ldy #$1e			ldy 	#(30)
.85bb	20 ec 84	jsr $84ec			jsr 	GraphicDraw
.85be	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.85c0	a2 00		ldx #$00			ldx 	#((0) & $FF)
.85c2	a0 00		ldy #$00			ldy 	#(0)
.85c4	20 ec 84	jsr $84ec			jsr 	GraphicDraw
.85c7	60		rts				rts
.85c8	20 f6 9c	jsr $9cf6	demo:	jsr 	Random32Bit
.85cb	ee 3d 06	inc $063d			inc 	gxEORValue
.85ce	a9 20		lda #$20			lda 	#16*2
.85d0	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.85d3	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.85d6	20 ec 84	jsr $84ec			jsr 	GraphicDraw
.85d9	ad 8a 04	lda $048a			lda 	RandomSeed+2
.85dc	29 7f		and #$7f			and 	#127
.85de	aa		tax				tax
.85df	a9 08		lda #$08			lda 	#4*2
.85e1	20 ec 84	jsr $84ec			jsr 	GraphicDraw
.85e4	80 e2		bra $85c8			bra 	demo
.85e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.85e7					GXOpenBitmap:
.85e7	78		sei				sei 								; no interrupts here
.85e8	a5 00		lda $00				lda 	0 							; save original MMU Control register
.85ea	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.85ed	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.85ef	85 00		sta $00				sta 	0
.85f1	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.85f3	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.85f6	58		cli				cli
.85f7	60		rts				rts
.85f8					GXCloseBitmap:
.85f8	78		sei				sei
.85f9	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.85fc	85 0b		sta $0b				sta 	GFXEditSlot
.85fe	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8601	85 00		sta $00				sta 	0
.8603	58		cli				cli
.8604	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.8605					GXPositionCalc:
.8605	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.8607	48		pha				pha
.8608	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.860b	85 3c		sta $3c				sta 	gsTemp
.860d	64 3d		stz $3d				stz 	gsTemp+1
.860f	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.8611	26 3d		rol $3d				rol 	gsTemp+1
.8613	06 3c		asl $3c				asl 	gsTemp
.8615	26 3d		rol $3d				rol 	gsTemp+1
.8617	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8618	65 3c		adc $3c				adc 	gsTemp
.861a	85 3c		sta $3c				sta 	gsTemp
.861c	90 02		bcc $8620			bcc 	_GXPCNoCarry
.861e	e6 3d		inc $3d				inc 	gsTemp+1
.8620					_GXPCNoCarry:
.8620	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8622	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8624	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.8626	85 36		sta $36				sta 	gzTemp0
.8628	64 3d		stz $3d				stz 	gsTemp+1
.862a	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.862c					_GXPCMultiply32:
.862c	06 3c		asl $3c				asl 	gsTemp
.862e	26 3d		rol $3d				rol 	gsTemp+1
.8630	3a		dec a				dec 	a
.8631	d0 f9		bne $862c			bne 	_GXPCMultiply32
.8633	18		clc				clc
.8634	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.8637	65 3c		adc $3c				adc 	gsTemp
.8639	8d 41 06	sta $0641			sta 	gsOffset
.863c	ad 32 06	lda $0632			lda 	GXX0+1
.863f	65 3d		adc $3d				adc 	gsTemp+1
.8641	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8643	90 04		bcc $8649			bcc 	_GXPCNoOverflow
.8645	29 1f		and #$1f			and 	#$1F 						; fix it up
.8647	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8649					_GXPCNoOverflow:
.8649	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.864b	85 3d		sta $3d				sta 	gsTemp+1
.864d	64 3c		stz $3c				stz 	gsTemp
.864f	18		clc				clc
.8650	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8652	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8655	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8657	68		pla				pla
.8658	85 36		sta $36				sta 	gzTemp0
.865a	60		rts				rts
.865b					GXMovePositionDown:
.865b	18		clc				clc 								; add 320 to offset/temp+1
.865c	ad 41 06	lda $0641			lda 	gsOffset
.865f	69 40		adc #$40			adc 	#64
.8661	8d 41 06	sta $0641			sta 	gsOffset
.8664	a5 3d		lda $3d				lda 	gsTemp+1
.8666	69 01		adc #$01			adc 	#1
.8668	85 3d		sta $3d				sta 	gsTemp+1
.866a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.866c	90 07		bcc $8675			bcc 	_GXMPDExit
.866e	38		sec				sec  								; next page
.866f	e9 20		sbc #$20			sbc 	#$20
.8671	85 3d		sta $3d				sta 	gsTemp+1
.8673	e6 0b		inc $0b				inc 	GFXEditSlot
.8675					_GXMPDExit:
.8675	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.8676					GXSortXY:
.8676	20 94 86	jsr $8694			jsr 	GXSortY 					; will be sorted on Y now
.8679	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.867c	cd 35 06	cmp $0635			cmp 	gxX1
.867f	ad 32 06	lda $0632			lda 	gXX0+1
.8682	ed 36 06	sbc $0636			sbc 	gXX1+1
.8685	90 0c		bcc $8693			bcc 	_GXSXYExit 					; X0 < X1 exit
.8687	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8689	a0 04		ldy #$04			ldy 	#4
.868b	20 a8 86	jsr $86a8			jsr 	GXSwapXY
.868e	e8		inx				inx
.868f	c8		iny				iny
.8690	20 a8 86	jsr $86a8			jsr 	GXSwapXY
.8693					_GXSXYExit:
.8693	60		rts				rts
.8694					GXSortY:
.8694	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8697	cd 37 06	cmp $0637			cmp 	gxY1
.869a	90 0b		bcc $86a7			bcc 	_GXSYSorted
.869c	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.869e	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.86a0					_GXSwap1:
.86a0	20 a8 86	jsr $86a8			jsr 	GXSwapXY
.86a3	88		dey				dey
.86a4	ca		dex				dex
.86a5	10 f9		bpl $86a0			bpl 	_GXSwap1
.86a7					_GXSYSorted:
.86a7	60		rts				rts
.86a8					GXSwapXY:
.86a8	bd 31 06	lda $0631,x			lda 	gxX0,x
.86ab	48		pha				pha
.86ac	b9 31 06	lda $0631,y			lda 	gxX0,y
.86af	9d 31 06	sta $0631,x			sta 	gxX0,x
.86b2	68		pla				pla
.86b3	99 31 06	sta $0631,y			sta 	gxX0,y
.86b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.86b7					AssembleGroup1:
.86b7	a9 ff		lda #$ff			lda 	#$FF
.86b9	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.86bc	80 02		bra $86c0			bra 	AsmGroup12
.86be					AssembleGroup2:
.86be	a5 00		lda $00				lda 	$00
.86c0					AsmGroup12:
.86c0	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.86c3	68		pla				pla 								; pop the return address to access the information following.
.86c4	fa		plx				plx
.86c5	20 4e 87	jsr $874e			jsr 	AccessParameters 			; get opcode and save as base
.86c8	8d a4 04	sta $04a4			sta 	BaseOpcode
.86cb	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.86ce	d0 08		bne $86d8			bne 	_AG12HaveMask
.86d0	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.86d2	20 56 87	jsr $8756			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.86d5	8d a5 04	sta $04a5			sta 	ModeMask
.86d8					_AG12HaveMask:
.86d8	20 91 88	jsr $8891			jsr 	TypeAndCalculateOperand 	; get zero page type
.86db	da		phx				phx 								; save found address mode
.86dc	20 ba 87	jsr $87ba			jsr 	AssembleModeX
.86df	fa		plx				plx  								; restore address mode
.86e0	b0 0b		bcs $86ed			bcs 	_AG12Exit
.86e2	20 ee 86	jsr $86ee			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.86e5	20 ba 87	jsr $87ba			jsr 	AssembleModeX
.86e8	b0 03		bcs $86ed			bcs 	_AG12Exit
.86ea	4c ad ac	jmp $acad			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.86ed					_AG12Exit:
.86ed	60		rts				rts
.86ee					PromoteToAbsolute:
.86ee	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.86f0	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.86f2	f0 19		beq $870d			beq 	_PTADo
.86f4	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.86f6	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.86f8	f0 13		beq $870d			beq 	_PTADo
.86fa	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.86fc	e0 80		cpx #$80			cpx 	#AM_ZEROY
.86fe	f0 0d		beq $870d			beq 	_PTADo
.8700	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8702	e0 d1		cpx #$d1			cpx 	#AM_IND
.8704	f0 07		beq $870d			beq 	_PTADo
.8706	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8708	e0 c0		cpx #$c0			cpx 	#AM_INDX
.870a	f0 01		beq $870d			beq 	_PTADo
.870c	60		rts				rts
.870d					_PTADo:
.870d	aa		tax				tax
.870e	60		rts				rts
.870f					AssembleGroup3:
.870f	68		pla				pla 								; get parameters, which is just the opcode.
.8710	fa		plx				plx
.8711	20 4e 87	jsr $874e			jsr 	AccessParameters 			; get and output opcode
.8714	20 66 87	jsr $8766			jsr 	AssemblerWriteByte
.8717	20 f5 88	jsr $88f5			jsr 	CalculateOperand 			; get a 16 bit operand
.871a	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.871d	38		sec				sec
.871e	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8721	48		pha				pha 								; LSB in A
.8722	ad 10 04	lda $0410			lda 	NSMantissa1
.8725	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8728	aa		tax				tax 								; MSB in X
.8729	68		pla				pla
.872a	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.872b	69 7f		adc #$7f			adc 	#$7F
.872d	90 01		bcc $8730			bcc 	_AG3NoCarry
.872f	e8		inx				inx
.8730					_AG3NoCarry:
.8730	38		sec				sec 								; fix back and write out anyways.
.8731	e9 80		sbc #$80			sbc 	#$80
.8733	20 66 87	jsr $8766			jsr 	AssemblerWriteByte
.8736	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8738	f0 0a		beq $8744			beq 	_AG3Exit
.873a	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.873d	29 01		and #$01			and 	#1
.873f	f0 03		beq $8744			beq 	_AG3Exit
.8741	4c b2 ac	jmp $acb2			jmp 	RangeError 					; no, branch is out of range
.8744					_AG3Exit:
.8744	60		rts				rts
.8745					AssembleGroup4:
.8745	68		pla				pla 								; pop address
.8746	fa		plx				plx
.8747	20 4e 87	jsr $874e			jsr 	AccessParameters 			; access and get first
.874a	20 66 87	jsr $8766			jsr 	AssemblerWriteByte 			; output it.
.874d	60		rts				rts
.874e					AccessParameters:
.874e	8d a1 04	sta $04a1			sta 	ParamStart
.8751	8e a2 04	stx $04a2			stx 	ParamStart+1
.8754	a9 01		lda #$01			lda 	#1
.8756					GetParameter:
.8756	5a		phy				phy
.8757	a8		tay				tay
.8758	ad a1 04	lda $04a1			lda 	ParamStart
.875b	85 36		sta $36				sta 	zTemp0
.875d	ad a2 04	lda $04a2			lda 	ParamStart+1
.8760	85 37		sta $37				sta 	zTemp0+1
.8762	b1 36		lda ($36),y			lda 	(zTemp0),y
.8764	7a		ply				ply
.8765	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8766					AssemblerWriteByte:
.8766	48		pha			pha
.8767	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.876a	29 02		and #$02		and 	#2
.876c	f0 1b		beq $8789		beq 	_AWBNoPrint
.876e	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8771	20 a4 87	jsr $87a4		jsr 	PrintHex
.8774	ad 9e 04	lda $049e		lda		AssemblerAddress
.8777	20 a4 87	jsr $87a4		jsr 	PrintHex
.877a	a9 20		lda #$20		lda 	#' '
.877c	20 51 ae	jsr $ae51		jsr 	EXTPrintCharacter
.877f	68		pla			pla 									; print byte
.8780	48		pha			pha
.8781	20 a4 87	jsr $87a4		jsr 	PrintHex
.8784	a9 0d		lda #$0d		lda 	#13
.8786	20 51 ae	jsr $ae51		jsr 	EXTPrintCharacter
.8789					_AWBNoPrint:
.8789	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.878c	85 36		sta $36			sta 	zTemp0
.878e	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8791	f0 0e		beq $87a1		beq 	_AWBRange
.8793	85 37		sta $37			sta 	zTemp0+1
.8795	68		pla			pla 									; write byte out
.8796	92 36		sta ($36)		sta 	(zTemp0)
.8798	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.879b	d0 03		bne $87a0		bne 	_AWBNoCarry
.879d	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.87a0					_AWBNoCarry:
.87a0	60		rts			rts
.87a1					_AWBRange:
.87a1	4c b2 ac	jmp $acb2		jmp 	RangeError
.87a4					PrintHex:
.87a4	48		pha				pha
.87a5	4a		lsr a				lsr 	a
.87a6	4a		lsr a				lsr 	a
.87a7	4a		lsr a				lsr 	a
.87a8	4a		lsr a				lsr 	a
.87a9	20 ad 87	jsr $87ad			jsr 	_PrintNibble
.87ac	68		pla				pla
.87ad					_PrintNibble:
.87ad	29 0f		and #$0f			and 	#15
.87af	c9 0a		cmp #$0a			cmp 	#10
.87b1	90 02		bcc $87b5			bcc 	_NoShift
.87b3	69 06		adc #$06			adc 	#6
.87b5					_NoShift:
.87b5	69 30		adc #$30			adc 	#48
.87b7	4c 51 ae	jmp $ae51			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.87ba					AssembleModeX:
.87ba	5a		phy				phy
.87bb	ad a3 04	lda $04a3			lda 	IsGroup1
.87be	f0 17		beq $87d7			beq 	_AMXGroup2
.87c0	8a		txa				txa 							; is it in group # 1
.87c1	29 40		and #$40			and 	#AM_ISG1
.87c3	f0 50		beq $8815			beq 	_AMXFail 				; no, give up.
.87c5	8a		txa				txa 							; get back.
.87c6	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.87c8	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.87ca	d0 22		bne $87ee			bne 	_AMXHaveInfo
.87cc	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.87cf	c9 81		cmp #$81			cmp 	#$81
.87d1	f0 42		beq $8815			beq 	_AMXFail
.87d3	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.87d5	80 17		bra $87ee			bra 	_AMXHaveInfo 			; odd design decision there.
.87d7					_AMXGroup2:
.87d7	8a		txa				txa 							; is it in group 2 ?
.87d8	29 20		and #$20			and 	#AM_ISG2
.87da	f0 39		beq $8815			beq 	_AMXFail 				; no, give up.
.87dc	8a		txa				txa 							; get the offset into Y
.87dd	29 1f		and #$1f			and 	#$1F
.87df	4a		lsr a				lsr 	a 						; make it 0-7.
.87e0	4a		lsr a				lsr  	a
.87e1	a8		tay				tay
.87e2	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.87e5					_AMXCheckOkay:
.87e5	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.87e6	88		dey				dey
.87e7	10 fc		bpl $87e5			bpl 	_AMXCheckOkay
.87e9	90 2a		bcc $8815			bcc 	_AMXFail 				; not allowed.
.87eb	8a		txa				txa  							; get mask back
.87ec	29 1f		and #$1f			and 	#$1F
.87ee					_AMXHaveInfo:
.87ee	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.87f0	10 05		bpl $87f7			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.87f2	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.87f5	d0 1e		bne $8815			bne 	_AMXFail
.87f7					_AMXAnySize:
.87f7	18		clc				clc 							; add offset to the base opcode
.87f8	6d a4 04	adc $04a4			adc 	BaseOpcode
.87fb					_AMXOutputCode:
.87fb	20 66 87	jsr $8766			jsr 	AssemblerWriteByte 		; write the opcode out.
.87fe	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8800	f0 10		beq $8812			beq 	_AMXExit
.8802	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8805	20 66 87	jsr $8766			jsr 	AssemblerWriteByte
.8808	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.880a	30 06		bmi $8812			bmi 	_AMXExit
.880c	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.880f	20 66 87	jsr $8766			jsr 	AssemblerWriteByte
.8812					_AMXExit:
.8812	7a		ply				ply
.8813	38		sec				sec
.8814	60		rts				rts
.8815					_AMXFail:
.8815	a0 00		ldy #$00			ldy 	#0
.8817					_AMXCheckOddities:
.8817	8a		txa				txa
.8818	d9 40 88	cmp $8840,y			cmp 	ExtraOpcode+2,y 		; match address mode
.881b	d0 16		bne $8833			bne 	_AMXCONext
.881d	b9 3e 88	lda $883e,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8820	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8823	d0 0e		bne $8833			bne 	_AMXCONext
.8825	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8827	10 05		bpl $882e			bpl 	_AMXCONotZero
.8829	ad 10 04	lda $0410			lda 	NSMantissa1
.882c	d0 05		bne $8833			bne 	_AMXCONext
.882e					_AMXCONotZero:
.882e	b9 3f 88	lda $883f,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8831	80 c8		bra $87fb			bra 	_AMXOutputCode 			; and assemble it
.8833					_AMXCONext:
.8833	c8		iny				iny
.8834	c8		iny				iny
.8835	c8		iny				iny
.8836	b9 3e 88	lda $883e,y			lda 	ExtraOpcode+0,y 		; end of table
.8839	d0 dc		bne $8817			bne 	_AMXCheckOddities
.883b					_AMXCOFail:
.883b	7a		ply				ply
.883c	18		clc				clc
.883d	60		rts				rts
.883e					ExtraOpcode:
>883e	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8841	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8844	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8847	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>884a	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>884d	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8850	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8853	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8856	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8859	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>885c	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.885d					LabelHere:
.885d	c8		iny				iny 								; skip .
.885e	a2 00		ldx #$00			ldx 	#0 							; get a term
.8860	20 67 9a	jsr $9a67			jsr 	EvaluateTerm 				; get a term
.8863	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8866	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8868	d0 24		bne $888e			bne 	_ALType
.886a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.886d	85 36		sta $36				sta 	zTemp0
.886f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8872	85 37		sta $37				sta 	zTemp0+1
.8874	5a		phy				phy 								; copy address in.
.8875	a0 01		ldy #$01			ldy 	#1
.8877	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.887a	92 36		sta ($36)			sta 	(zTemp0)
.887c	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.887f	91 36		sta ($36),y			sta 	(zTemp0),y
.8881	c8		iny				iny
.8882	a9 00		lda #$00			lda 	#0
.8884	91 36		sta ($36),y			sta 	(zTemp0),y
.8886	c8		iny				iny
.8887	91 36		sta ($36),y			sta 	(zTemp0),y
.8889	c8		iny				iny
.888a	91 36		sta ($36),y			sta 	(zTemp0),y
.888c	7a		ply				ply
.888d	60		rts				rts
.888e					_ALType:
.888e	4c b7 ac	jmp $acb7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8891					TypeAndCalculateOperand:
.8891	b1 30		lda ($30),y			lda 	(codePtr),y
.8893	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8895	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8897	f0 5b		beq $88f4			beq 	_TACOExit
.8899	c9 80		cmp #$80			cmp 	#KWC_EOL
.889b	f0 57		beq $88f4			beq 	_TACOExit
.889d	c8		iny				iny
.889e	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.88a0	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.88a2	f0 51		beq $88f5			beq 	CalculateOperand
.88a4	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.88a6	f0 1f		beq $88c7			beq 	_TACOIndirect
.88a8	88		dey				dey 								; undo get of first character
.88a9	20 f5 88	jsr $88f5			jsr 	CalculateOperand 			; get operand
.88ac	b1 30		lda ($30),y			lda 	(codePtr),y
.88ae	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.88b0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88b2	d0 40		bne $88f4			bne 	_TACOExit
.88b4	c8		iny				iny
.88b5	20 3e a6	jsr $a63e			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.88b8	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.88ba	c9 58		cmp #$58			cmp 	#'X'
.88bc	f0 36		beq $88f4			beq 	_TACOExit
.88be	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.88c0	c9 59		cmp #$59			cmp 	#'Y'
.88c2	f0 30		beq $88f4			beq 	_TACOExit
.88c4					_TACOSyntax:
.88c4	4c ad ac	jmp $acad			jmp 	SyntaxError
.88c7					_TACOIndirect:
.88c7	20 f5 88	jsr $88f5			jsr 	CalculateOperand 			; get the operand
.88ca	b1 30		lda ($30),y			lda 	(codePtr),y
.88cc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.88ce	f0 17		beq $88e7			beq 	_TACOIndX
.88d0	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.88d3	b1 30		lda ($30),y			lda 	(codePtr),y
.88d5	a2 d1		ldx #$d1			ldx 	#AM_IND
.88d7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.88d9	d0 19		bne $88f4			bne 	_TACOExit
.88db	c8		iny				iny
.88dc	20 3e a6	jsr $a63e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.88df	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.88e1	d0 e1		bne $88c4			bne 	_TACOSyntax
.88e3	a2 d0		ldx #$d0			ldx 	#AM_INDY
.88e5	80 0d		bra $88f4			bra 	_TACOExit
.88e7					_TACOIndX:
.88e7	c8		iny				iny
.88e8	20 3e a6	jsr $a63e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.88eb	c9 58		cmp #$58			cmp 	#'X' 						; check X
.88ed	d0 d5		bne $88c4			bne 	_TACOSyntax
.88ef	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket			; check )
.88f2	a2 c0		ldx #$c0			ldx 	#AM_INDX
.88f4					_TACOExit:
.88f4	60		rts				rts
.88f5					CalculateOperand:
.88f5	48		pha				pha
.88f6	da		phx				phx
.88f7	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.88f9	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger
.88fc	fa		plx				plx
.88fd	68		pla				pla
.88fe	60		rts				rts
.a63e					TACOCheckXY:
.a63e	b1 30		lda ($30),y			lda 	(codePtr),y
.a640	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a642	c9 40		cmp #$40			cmp 	#$40
.a644	d0 21		bne $a667			bne 	_TCXYFail
.a646	b1 30		lda ($30),y			lda 	(codePtr),y
.a648	18		clc				clc
.a649	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a64b	85 37		sta $37				sta 	zTemp0+1
.a64d	c8		iny				iny
.a64e	b1 30		lda ($30),y			lda 	(codePtr),y
.a650	c8		iny				iny
.a651	85 36		sta $36				sta 	zTemp0
.a653	5a		phy				phy 								; save position
.a654	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a656	b1 36		lda ($36),y			lda 	(zTemp0),y
.a658	d0 0c		bne $a666			bne 	_TCXYPopFail
.a65a	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a65c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a65e	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a660	f0 08		beq $a66a			beq 	_TCXYFound
.a662	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a664	f0 04		beq $a66a			beq 	_TCXYFound
.a666					_TCXYPopFail:
.a666	7a		ply				ply
.a667					_TCXYFail:
.a667	a9 00		lda #$00			lda 	#0
.a669	60		rts				rts
.a66a					_TCXYFound:
.a66a	7a		ply				ply 								; restore position
.a66b	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a66d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.88ff					EditProgramCode:
.88ff	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8902	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8905	20 a4 9f	jsr $9fa4			jsr 	MemorySearch
.8908	90 05		bcc $890f			bcc 	_EPCNoDelete 				; reached the end don't delete
.890a	d0 03		bne $890f			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.890c	20 95 ae	jsr $ae95			jsr 	MemoryDeleteLine 			; delete the line
.890f					_EPCNoDelete:
.890f	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8912	c9 80		cmp #$80			cmp 	#KWC_EOL
.8914	f0 0d		beq $8923			beq 	_EPCNoInsert
.8916	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8919	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.891c	20 a4 9f	jsr $9fa4			jsr 	MemorySearch
.891f	18		clc				clc 								; insert at this point.
.8920	20 cc ae	jsr $aecc			jsr 	MemoryInsertLine 			; insert the line
.8923					_EPCNoInsert:
.8923	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8924					WarmStart:
.8924	a2 ff		ldx #$ff			ldx 	#$FF
.8926	9a		txs				txs
.8927	20 67 ae	jsr $ae67			jsr 	EXTInputLine 				; get line to lineBuffer
.892a	20 be a3	jsr $a3be			jsr 	TokeniseLine 				; tokenise the line
.892d	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8930	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8933	d0 17		bne $894c			bne 	_WSEditCode 				; if so,edit code.
.8935	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8938	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.893a	85 30		sta $30				sta 	codePtr
.893c	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.893e	85 31		sta $31				sta 	codePtr+1
.8940	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8943	c9 80		cmp #$80			cmp 	#KWC_EOL
.8945	f0 dd		beq $8924			beq 	WarmStart
.8947	20 55 8f	jsr $8f55			jsr 	RUNCodePointerLine 			; execute that line.
.894a	80 d8		bra $8924			bra 	WarmStart
.894c					_WSEditCode:
.894c	20 ff 88	jsr $88ff			jsr 	EditProgramCode
.894f	20 bd 89	jsr $89bd			jsr 	ClearCommand
.8952	80 d0		bra $8924			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8954					AssembleCommand:
.8954	a2 00		ldx #$00			ldx 	#0
.8956	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger 		; start address
.8959	ad 08 04	lda $0408			lda 	NSMantissa0
.895c	8d 9e 04	sta $049e			sta 	AssemblerAddress
.895f	ad 10 04	lda $0410			lda 	NSMantissa1
.8962	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8965	20 cf a6	jsr $a6cf			jsr 	CheckComma
.8968	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger 		; options
.896b	ad 08 04	lda $0408			lda 	NSMantissa0
.896e	8d a0 04	sta $04a0			sta 	AssemblerControl
.8971	60		rts				rts
.8972	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8973					AssertCommand:
.8973	a2 00		ldx #$00			ldx 	#0
.8975	20 bc 9e	jsr $9ebc			jsr 	EvaluateInteger 			; the assert test
.8978	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; exit if result is non zero.
.897b	d0 05		bne $8982			bne 	_ACExit
.897d	a9 0a		lda #$0a		lda	#10
.897f	4c 8d 93	jmp $938d		jmp	ErrorHandler
.8982					_ACExit:
.8982	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8983					CallCommand:
.8983	a2 00		ldx #$00			ldx 	#0
.8985	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger
.8988					_CCClear
.8988	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8989	20 45 9f	jsr $9f45			jsr 	NSMSetZero
.898c	e0 04		cpx #$04			cpx 	#4
.898e	d0 f8		bne $8988			bne 	_CCClear
.8990	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8992					_CCCParam:
.8992	b1 30		lda ($30),y			lda 	(codePtr),y
.8994	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8996	d0 09		bne $89a1			bne 	_CCCRun6502
.8998	c8		iny				iny 								; skip comma
.8999	e8		inx				inx	 								; next level
.899a	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger 		; get A/X/Y
.899d	e0 03		cpx #$03			cpx 	#3
.899f	90 f1		bcc $8992			bcc 	_CCCParam 					; done all 3 ?
.89a1					_CCCRun6502:
.89a1	5a		phy				phy 								; save position
.89a2	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.89a5	85 37		sta $37				sta 	zTemp0+1
.89a7	ad 08 04	lda $0408			lda 	NSMantissa0
.89aa	85 36		sta $36				sta 	zTemp0
.89ac	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.89af	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.89b2	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.89b5	20 ba 89	jsr $89ba			jsr 	_CCCZTemp0 					; call zTemp0
.89b8	7a		ply				ply 								; restore position and exit
.89b9	60		rts				rts
.89ba					_CCCZTemp0:
.89ba	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.89bd					ClearCommand:
.89bd	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.89bf	85 36		sta $36				sta 	0+zTemp0
.89c1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.89c3	85 37		sta $37				sta 	1+zTemp0
.89c5					_ClearZeroLoop:
.89c5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.89c7	f0 24		beq $89ed			beq 	_ClearZeroEnd
.89c9	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.89cb	a9 00		lda #$00			lda 	#0
.89cd					_ClearOneVariable:
.89cd	91 36		sta ($36),y			sta 	(zTemp0),y
.89cf	c8		iny				iny
.89d0	c0 08		cpy #$08			cpy 	#8
.89d2	d0 f9		bne $89cd			bne 	_ClearOneVariable
.89d4	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.89d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.89d8	c9 18		cmp #$18			cmp 	#NSTProcedure
.89da	d0 04		bne $89e0			bne 	_ClearNotProcedure
.89dc	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.89de	91 36		sta ($36),y			sta 	(zTemp0),y
.89e0					_ClearNotProcedure:
.89e0	18		clc				clc 								; go to the next variable
.89e1	b2 36		lda ($36)			lda 	(zTemp0)
.89e3	65 36		adc $36				adc 	zTemp0
.89e5	85 36		sta $36				sta 	zTemp0
.89e7	90 dc		bcc $89c5			bcc 	_ClearZeroLoop
.89e9	e6 37		inc $37				inc 	zTemp0+1
.89eb	80 d8		bra $89c5			bra 	_ClearZeroLoop
.89ed					_ClearZeroEnd:
.89ed	18		clc				clc
.89ee	a5 36		lda $36				lda 	zTemp0
.89f0	69 01		adc #$01			adc 	#1
.89f2	8d 8c 04	sta $048c			sta 	lowMemPtr
.89f5	a5 37		lda $37				lda 	zTemp0+1
.89f7	69 00		adc #$00			adc 	#0
.89f9	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.89fc	20 5e a0	jsr $a05e			jsr 	StackReset
.89ff	20 af af	jsr $afaf			jsr 	StringSystemInitialise
.8a02	20 ad 92	jsr $92ad			jsr 	ProcedureScan
.8a05	20 11 8f	jsr $8f11			jsr 	Command_Restore
.8a08	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8a0b	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8a0e	9c a0 04	stz $04a0			stz 	AssemblerControl
.8a11	20 54 9c	jsr $9c54			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8a14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8a15					Command_Data:
.8a15	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8a17	a2 80		ldx #$80			ldx 	#KWC_EOL
.8a19	20 ff 92	jsr $92ff			jsr 	ScanForward
.8a1c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8a1d					DimCommand:
.8a1d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a1f	29 c0		and #$c0			and 	#$C0
.8a21	c9 40		cmp #$40			cmp 	#$40
.8a23	d0 7a		bne $8a9f			bne 	_DCSyntax
.8a25	b1 30		lda ($30),y			lda 	(codePtr),y
.8a27	18		clc				clc
.8a28	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a2a	85 3f		sta $3f				sta 	zaTemp+1
.8a2c	c8		iny				iny
.8a2d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a2f	c8		iny				iny
.8a30	85 3e		sta $3e				sta 	zaTemp
.8a32	5a		phy				phy
.8a33	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8a35	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a37	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8a39	c9 18		cmp #$18			cmp 	#NSTProcedure
.8a3b	f0 62		beq $8a9f			beq 	_DCSyntax
.8a3d	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8a3f	29 04		and #$04			and 	#NSBIsArray
.8a41	f0 64		beq $8aa7			beq 	_DCType
.8a43	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8a45	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a47	d0 59		bne $8aa2			bne 	_DCRedefine
.8a49	7a		ply				ply
.8a4a	20 aa 8a	jsr $8aaa			jsr 	_DCGetSize 				; get array size, check it.
.8a4d	5a		phy				phy
.8a4e	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8a50	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8a52	7a		ply				ply 							; is there a second (e.g. ,x)
.8a53	b1 30		lda ($30),y			lda 	(codePtr),y
.8a55	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a57	d0 0a		bne $8a63			bne 	_DCOneDimension
.8a59	c8		iny				iny 							; skip comma
.8a5a	20 aa 8a	jsr $8aaa			jsr 	_DCGetSize 				; get 2nd array size
.8a5d	5a		phy				phy
.8a5e	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8a60	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a62	7a		ply				ply
.8a63					_DCOneDimension:
.8a63	5a		phy				phy 							; save position
.8a64	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8a66	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a68	aa		tax				tax
.8a69	c8		iny				iny
.8a6a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a6c	e8		inx				inx 							; bump them.
.8a6d	1a		inc a				inc 	a
.8a6e	20 49 ab	jsr $ab49			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8a71	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8a73	29 e0		and #$e0			and 	#$E0
.8a75	d0 23		bne $8a9a			bne 	_DCSize
.8a77	a0 02		ldy #$02			ldy 	#2 						; get base type
.8a79	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a7b	20 b8 8a	jsr $8ab8			jsr 	ScaleByBaseType 		; scale by base type
.8a7e	a5 36		lda $36				lda 	zTemp0
.8a80	a6 37		ldx $37				ldx 	zTemp0+1
.8a82	20 16 9c	jsr $9c16			jsr 	AllocateXABytes 		; allocate memory
.8a85	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8a87	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a89	c8		iny				iny
.8a8a	8a		txa				txa
.8a8b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a8d	7a		ply				ply 							; get position back
.8a8e	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 		; check )
.8a91	b1 30		lda ($30),y			lda 	(codePtr),y
.8a93	c8		iny				iny 							; consume in case
.8a94	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8a96	f0 85		beq $8a1d			beq 	DimCommand
.8a98	88		dey				dey 							; undo consume
.8a99	60		rts				rts
.8a9a					_DCSize:
.8a9a	a9 16		lda #$16		lda	#22
.8a9c	4c 8d 93	jmp $938d		jmp	ErrorHandler
.8a9f					_DCSyntax:
.8a9f	4c ad ac	jmp $acad			jmp 	SyntaxError
.8aa2					_DCRedefine:
.8aa2	a9 15		lda #$15		lda	#21
.8aa4	4c 8d 93	jmp $938d		jmp	ErrorHandler
.8aa7					_DCType:
.8aa7	4c b7 ac	jmp $acb7			jmp 	TypeError
.8aaa					_DCGetSize:
.8aaa	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8aac	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger 	; get array dimension
.8aaf	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8ab1	f0 e7		beq $8a9a			beq 	_DCSize
.8ab3	c9 fe		cmp #$fe			cmp 	#254
.8ab5	f0 e3		beq $8a9a			beq 	_DCSize
.8ab7	60		rts				rts
.8ab8					ScaleByBaseType:
.8ab8	29 10		and #$10			and 	#NSBIsString 			; is it string
.8aba	d0 19		bne $8ad5			bne 	_SBBTString
.8abc	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8abe	48		pha				pha
.8abf	a5 36		lda $36				lda 	zTemp0
.8ac1	48		pha				pha
.8ac2	06 36		asl $36				asl 	zTemp0 					; x 2
.8ac4	26 37		rol $37				rol 	zTemp0+1
.8ac6	06 36		asl $36				asl 	zTemp0 					; x 4
.8ac8	26 37		rol $37				rol 	zTemp0+1
.8aca	68		pla				pla 							; add stacked value = x 5
.8acb	65 36		adc $36				adc 	zTemp0
.8acd	85 36		sta $36				sta 	zTemp0
.8acf	68		pla				pla
.8ad0	65 37		adc $37				adc 	zTemp0+1
.8ad2	85 37		sta $37				sta 	zTemp0+1
.8ad4	60		rts				rts
.8ad5					_SBBTString:
.8ad5	06 36		asl $36				asl 	zTemp0
.8ad7	26 37		rol $37				rol 	zTemp0+1
.8ad9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8ada					EndCommand:
.8ada	4c 24 89	jmp $8924			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8add					ForCommand:
.8add	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8adf	20 f9 9f	jsr $9ff9			jsr 	StackOpen
.8ae2	a2 00		ldx #$00			ldx 	#0
.8ae4	20 67 9a	jsr $9a67			jsr 	EvaluateTerm
.8ae7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8aea	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8aec	d0 49		bne $8b37			bne		_FCError
.8aee	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8af0	20 d7 a6	jsr $a6d7			jsr 	CheckNextA
.8af3	e8		inx				inx
.8af4	20 bc 9e	jsr $9ebc			jsr 	EvaluateInteger 			; <from> in +1
.8af7	b1 30		lda ($30),y			lda 	(codePtr),y
.8af9	c8		iny				iny 								; consume it
.8afa	48		pha				pha 								; save on stack for later
.8afb	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8afd	f0 04		beq $8b03			beq 	_FCNoSyntax
.8aff	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8b01	d0 37		bne $8b3a			bne 	_FCSyntaxError
.8b03					_FCNoSyntax:
.8b03	e8		inx				inx
.8b04	20 bc 9e	jsr $9ebc			jsr 	EvaluateInteger
.8b07	20 3d a0	jsr $a03d			jsr 	STKSaveCodePosition 		; save loop back position
.8b0a	68		pla				pla 								; restore DOWNTO or TO
.8b0b	5a		phy				phy 								; save Y on the stack
.8b0c	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8b0e	f0 02		beq $8b12			beq 	_FCNotDownTo
.8b10	a9 02		lda #$02			lda 	#2
.8b12					_FCNotDownTo:
.8b12	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8b13	a0 10		ldy #$10			ldy 	#16
.8b15	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8b17	a0 06		ldy #$06			ldy 	#6
.8b19	ad 08 04	lda $0408			lda 	NSMantissa0
.8b1c	91 34		sta ($34),y			sta 	(basicStack),y
.8b1e	ad 10 04	lda $0410			lda 	NSMantissa1
.8b21	c8		iny				iny
.8b22	91 34		sta ($34),y			sta 	(basicStack),y
.8b24	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8b26	a2 01		ldx #$01			ldx 	#1
.8b28	20 3d 8b	jsr $8b3d			jsr 	FCIntegerToStack
.8b2b	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8b2d	a2 02		ldx #$02			ldx 	#2
.8b2f	20 3d 8b	jsr $8b3d			jsr 	FCIntegerToStack
.8b32	20 5d 8b	jsr $8b5d			jsr 	CopyIndexToReference
.8b35	7a		ply				ply 								; restore position
.8b36	60		rts				rts
.8b37					_FCError:
.8b37	4c b7 ac	jmp $acb7			jmp 	TypeError
.8b3a					_FCSyntaxError:
.8b3a	4c ad ac	jmp $acad			jmp 	SyntaxError
.8b3d					FCIntegerToStack:
.8b3d	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8b40	10 03		bpl $8b45			bpl	 	_FCNotNegative
.8b42	20 fa 9e	jsr $9efa			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8b45					_FCNotNegative:
.8b45	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8b48	91 34		sta ($34),y			sta 	(basicStack),y
.8b4a	c8		iny				iny
.8b4b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b4e	91 34		sta ($34),y			sta 	(basicStack),y
.8b50	c8		iny				iny
.8b51	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8b54	91 34		sta ($34),y			sta 	(basicStack),y
.8b56	c8		iny				iny
.8b57	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8b5a	91 34		sta ($34),y			sta 	(basicStack),y
.8b5c	60		rts				rts
.8b5d					CopyIndexToReference:
.8b5d	5a		phy				phy
.8b5e	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8b60	38		sec				sec 								; (because we copy from offset 8)
.8b61	b1 34		lda ($34),y			lda 	(basicStack),y
.8b63	e9 08		sbc #$08			sbc 	#8
.8b65	85 36		sta $36				sta 	zTemp0
.8b67	c8		iny				iny
.8b68	b1 34		lda ($34),y			lda 	(basicStack),y
.8b6a	e9 00		sbc #$00			sbc 	#0
.8b6c	85 37		sta $37				sta 	zTemp0+1
.8b6e	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8b70	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8b72	b1 34		lda ($34),y			lda 	(basicStack),y
.8b74	0a		asl a				asl 	a 							; into carry
.8b75	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8b77	90 14		bcc $8b8d			bcc 	_CITRNormal
.8b79	38		sec				sec
.8b7a					_CITRNegative:
.8b7a	a9 00		lda #$00			lda 	#0
.8b7c	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8b7e	91 36		sta ($36),y			sta 	(zTemp0),y
.8b80	c8		iny				iny
.8b81	ca		dex				dex
.8b82	d0 f6		bne $8b7a			bne 	_CITRNegative
.8b84	88		dey				dey 								; look at MSB of mantissa
.8b85	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8b87	09 80		ora #$80			ora 	#$80
.8b89	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8b	7a		ply				ply
.8b8c	60		rts				rts
.8b8d					_CITRNormal:
.8b8d	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8b8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b91	c8		iny				iny
.8b92	ca		dex				dex
.8b93	d0 f8		bne $8b8d			bne 	_CITRNormal
.8b95	7a		ply				ply 								; and exit.
.8b96	60		rts				rts
.8b97					NextCommand:
.8b97	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8b99	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8b9b	20 25 a0	jsr $a025			jsr 	StackCheckFrame
.8b9e	5a		phy				phy
.8b9f	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8ba1	b1 34		lda ($34),y			lda 	(basicStack),y
.8ba3	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8ba5	30 02		bmi $8ba9			bmi 	_NCStepNeg
.8ba7	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8ba9					_NCStepNeg:
.8ba9	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8bab	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8bad	18		clc				clc
.8bae					_NCBump:
.8bae	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8bb0	91 34		sta ($34),y			sta 	(basicStack),y
.8bb2	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8bb4	c8		iny				iny 								; next byte
.8bb5	ca		dex				dex 								; do four times
.8bb6	d0 f6		bne $8bae			bne 	_NCBump
.8bb8	20 5d 8b	jsr $8b5d			jsr		CopyIndexToReference		; copy it to the reference variable.
.8bbb	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8bbd	b1 34		lda ($34),y			lda 	(basicStack),y
.8bbf	0a		asl a				asl 	a 							; sign bit to carry
.8bc0	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8bc2	85 38		sta $38				sta 	zTemp1
.8bc4	90 02		bcc $8bc8			bcc 	_NCCompRev 					; use if step is +ve
.8bc6	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8bc8					_NCCompRev:
.8bc8	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8bca	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8bcc	85 39		sta $39				sta 	zTemp1+1
.8bce	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8bd0	38		sec				sec
.8bd1					_NCCompare:
.8bd1	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8bd3	b1 34		lda ($34),y			lda 	(basicStack),y
.8bd5	a4 39		ldy $39				ldy 	zTemp1+1
.8bd7	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8bd9	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8bdb	e6 39		inc $39				inc 	zTemp1+1
.8bdd	ca		dex				dex 								; do it 4 times.
.8bde	d0 f1		bne $8bd1			bne 	_NCCompare
.8be0	50 02		bvc $8be4			bvc 	_NCNoOverflow 				; convert to signed comparison
.8be2	49 80		eor #$80			eor 	#$80
.8be4					_NCNoOverflow:
.8be4	7a		ply				ply 								; restore Y position
.8be5	0a		asl a				asl 	a 							; is bit 7 set.
.8be6	90 04		bcc $8bec			bcc 	_NCLoopback 				; if no , >= so loop back
.8be8	20 17 a0	jsr $a017			jsr 	StackClose 					; exit the loop
.8beb	60		rts				rts
.8bec					_NCLoopBack:
.8bec	20 4e a0	jsr $a04e			jsr 	STKLoadCodePosition 		; loop back
.8bef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8bf0					Command_GOSUB:
.8bf0	a2 00		ldx #$00			ldx 	#0
.8bf2	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8bf5	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8bf7	20 f9 9f	jsr $9ff9			jsr 	StackOpen 					; create frame
.8bfa	20 3d a0	jsr $a03d			jsr 	STKSaveCodePosition 		; save current position
.8bfd	4c 13 8c	jmp $8c13			jmp 	GotoStackX
.8c00					Command_RETURN:
.8c00	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8c02	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8c04	20 25 a0	jsr $a025			jsr 	StackCheckFrame
.8c07	20 4e a0	jsr $a04e			jsr 	STKLoadCodePosition 		; restore code position
.8c0a	20 17 a0	jsr $a017			jsr 	StackClose
.8c0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8c0e					GotoCommand:
.8c0e	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8c10	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger
.8c13					GotoStackX:
.8c13	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8c16	48		pha				pha 								; it is slightly inefficient, just in cases.
.8c17	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8c1a	fa		plx				plx
.8c1b	20 a4 9f	jsr $9fa4			jsr 	MemorySearch 				; transfer to line number AX.
.8c1e	90 05		bcc $8c25			bcc 	_GotoError 					; not found, off end.
.8c20	d0 03		bne $8c25			bne 	_GotoError 					; not found exactly
.8c22	4c 4e 8f	jmp $8f4e			jmp 	RunNewLine 					; and go straight to new line code.
.8c25					_GotoError:
.8c25	a9 0d		lda #$0d		lda	#13
.8c27	4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8c2a					IfCommand:
.8c2a	a2 00		ldx #$00			ldx 	#0 							; If what.
.8c2c	20 99 9e	jsr $9e99			jsr 	EvaluateNumber
.8c2f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c31	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8c33	d0 0a		bne $8c3f			bne 	_IFStructured
.8c35	c8		iny				iny 								; consume THEN
.8c36	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; is it zero
.8c39	f0 01		beq $8c3c			beq 	_IfFail 					; if fail, go to next line
.8c3b	60		rts				rts 								; if THEN just continue
.8c3c					_IfFail:
.8c3c	4c b3 8f	jmp $8fb3			jmp 	EOLCommand
.8c3f					_IfStructured:
.8c3f	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; is it zero
.8c42	d0 07		bne $8c4b			bne 	_IfExit 					; if not, then continue normally.
.8c44	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8c46	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8c48	20 ff 92	jsr $92ff			jsr 	ScanForward 				; and run from there/
.8c4b					_IfExit:
.8c4b	60		rts				rts
.8c4c					ElseCode:
.8c4c	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8c4e	aa		tax				tax 								; so just go to the structure exit
.8c4f	20 ff 92	jsr $92ff			jsr 	ScanForward
.8c52	60		rts				rts
.8c53					EndIf:
.8c53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8c54					LetCommand:
.8c54	a2 00		ldx #$00			ldx 	#0
.8c56	b1 30		lda ($30),y			lda 	(codePtr),y
.8c58	c9 10		cmp #$10			cmp 	#KWD_AT
.8c5a	d0 16		bne $8c72			bne 	_LCStandard
.8c5c	c8		iny				iny 								; skip equal
.8c5d	20 67 9a	jsr $9a67			jsr 	EvaluateTerm 				; get a number
.8c60	20 ab 98	jsr $98ab			jsr 	Dereference 				; dereference it
.8c63	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8c66	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8c68	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8c6b	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8c6d	d0 10		bne $8c7f			bne 	_LCMain
.8c6f	4c b7 ac	jmp $acb7			jmp 	TypeError 					; was a reference before.
.8c72					_LCStandard:
.8c72	ad 7e 97	lda $977e			lda 	PrecedenceLevel+"*"			; precedence > this
.8c75	20 98 97	jsr $9798			jsr 	EvaluateExpressionAtPrecedence
.8c78	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8c7b	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8c7d	f0 0e		beq $8c8d			beq 	_LetGoProc 					; it's a procedure call.
.8c7f					_LCMain:
.8c7f	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8c81	20 d7 a6	jsr $a6d7			jsr 	CheckNextA
.8c84	e8		inx				inx 								; RHS
.8c85	20 90 9e	jsr $9e90			jsr 	EvaluateValue
.8c88	ca		dex				dex
.8c89	20 90 8c	jsr $8c90			jsr 	AssignVariable
.8c8c	60		rts				rts
.8c8d					_LetGoProc:
.8c8d	4c 29 8e	jmp $8e29			jmp 	CallProcedure
.8c90					AssignVariable:
.8c90	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c93	48		pha				pha 								; save a copy
.8c94	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8c97	29 10		and #$10			and 	#NSBIsString
.8c99	d0 0b		bne $8ca6			bne 	_ASError
.8c9b	68		pla				pla 								; get back
.8c9c	29 10		and #$10			and 	#NSBIsString 				; check type
.8c9e	d0 03		bne $8ca3			bne 	_ASString
.8ca0	4c d3 97	jmp $97d3			jmp 	AssignNumber
.8ca3					_ASString:
.8ca3	4c 41 98	jmp $9841			jmp 	AssignString
.8ca6					_ASError:
.8ca6	4c b7 ac	jmp $acb7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8ca9					Command_List:
.8ca9	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8cac	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8caf	a9 ff		lda #$ff			lda 	#$FF
.8cb1	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8cb4	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8cb7	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cbb	f0 1e		beq $8cdb			beq 	_CLSecond
.8cbd	20 39 8d	jsr $8d39			jsr 	CLIsDigit 					; if not digit, list all
.8cc0	b0 24		bcs $8ce6			bcs 	_CLStart
.8cc2	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8cc4	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger
.8cc7	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ccb	f0 0e		beq $8cdb			beq 	_CLSecond 					; if so go get it
.8ccd	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8cd0	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8cd3	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8cd6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8cd9	80 0b		bra $8ce6			bra 	_CLStart
.8cdb					_CLSecond:
.8cdb	c8		iny				iny 								; consume comma
.8cdc	20 39 8d	jsr $8d39			jsr 	CLIsDigit 					; digit found
.8cdf	b0 05		bcs $8ce6			bcs 	_CLStart 					; if not, continue listing
.8ce1	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8ce3	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger
.8ce6					_CLStart
.8ce6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ce8	85 30		sta $30				sta 	codePtr
.8cea	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cec	85 31		sta $31				sta 	codePtr+1
.8cee					_CLLoop:
.8cee	20 92 ae	jsr $ae92			jsr 	EXTBreakCheck 				; break check
.8cf1	f0 30		beq $8d23			beq 	_CLExit
.8cf3	b2 30		lda ($30)			lda 	(codePtr)
.8cf5	f0 2c		beq $8d23			beq 	_CLExit
.8cf7	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8cf9	20 26 8d	jsr $8d26			jsr 	CLCompareLineNo
.8cfc	90 18		bcc $8d16			bcc 	_CLNext
.8cfe	a2 07		ldx #$07			ldx 	#7
.8d00	20 26 8d	jsr $8d26			jsr 	CLCompareLineNo
.8d03	f0 02		beq $8d07			beq 	_CLDoThisOne
.8d05	b0 0f		bcs $8d16			bcs 	_CLNext
.8d07					_CLDoThisOne:
.8d07	20 5b 91	jsr $915b			jsr 	ListConvertLine 			; convert line into token Buffer
.8d0a	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d0c	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8d0e	20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8d11	a9 0d		lda #$0d			lda 	#13 						; new line
.8d13	20 51 ae	jsr $ae51			jsr 	EXTPrintCharacter
.8d16					_CLNext:
.8d16	18		clc				clc
.8d17	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d19	65 30		adc $30				adc 	codePtr
.8d1b	85 30		sta $30				sta 	codePtr
.8d1d	90 02		bcc $8d21			bcc 	_CREExit
.8d1f	e6 31		inc $31				inc 	codePtr+1
.8d21					_CREExit:
.8d21	80 cb		bra $8cee			bra 	_CLLoop
.8d23					_CLExit:
.8d23	4c 24 89	jmp $8924			jmp 	WarmStart
.8d26					CLCompareLineNo:
.8d26	38		sec				sec
.8d27	a0 01		ldy #$01			ldy 	#1
.8d29	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2b	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8d2e	85 36		sta $36				sta 	zTemp0
.8d30	c8		iny				iny
.8d31	b1 30		lda ($30),y			lda 	(codePtr),y
.8d33	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8d36	05 36		ora $36				ora 	zTemp0
.8d38	60		rts				rts
.8d39					CLIsDigit:
.8d39	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3b	c9 30		cmp #$30			cmp 	#"0"
.8d3d	90 03		bcc $8d42			bcc	 	_CLIDExitFalse
.8d3f	c9 3a		cmp #$3a			cmp 	#"9"+1
.8d41	60		rts				rts
.8d42					_CLIDExitFalse:
.8d42	38		sec				sec
.8d43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d44					Command_LOCAL:
.8d44	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d46	20 52 8d	jsr $8d52			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d49	b1 30		lda ($30),y			lda 	(codePtr),y
.8d4b	c8		iny				iny
.8d4c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d4e	f0 f4		beq $8d44			beq 	Command_LOCAL
.8d50	88		dey				dey 								; unpick pre-get
.8d51	60		rts				rts
.8d52					LocaliseNextTerm:
.8d52	20 67 9a	jsr $9a67			jsr 	EvaluateTerm 				; evaluate the term
.8d55	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d58	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8d5a	f0 69		beq $8dc5			beq		_LNTError
.8d5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d5f	85 36		sta $36				sta 	zTemp0
.8d61	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d64	85 37		sta $37				sta  	zTemp0+1
.8d66	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d69	29 10		and #$10			and 	#NSBIsString
.8d6b	d0 22		bne $8d8f			bne 	_LNTPushString
.8d6d	5a		phy				phy
.8d6e	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d70					_LNTPushNumLoop:
.8d70	b1 36		lda ($36),y			lda		(zTemp0),y
.8d72	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8d75	a9 00		lda #$00			lda 	#0
.8d77	91 36		sta ($36),y			sta 	(zTemp0),y
.8d79	c8		iny				iny
.8d7a	c0 05		cpy #$05			cpy 	#5
.8d7c	d0 f2		bne $8d70			bne 	_LNTPushNumLoop
.8d7e	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d80	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8d83	a5 37		lda $37				lda 	zTemp0+1
.8d85	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8d88	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d8a	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8d8d	7a		ply				ply
.8d8e	60		rts				rts
.8d8f					_LNTPushString:
.8d8f	5a		phy				phy
.8d90	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d92	85 38		sta $38				sta 	zTemp1
.8d94	a0 01		ldy #$01			ldy 	#1
.8d96	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d98	85 39		sta $39				sta 	zTemp1+1
.8d9a	a0 00		ldy #$00			ldy 	#0 							; output string
.8d9c	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8d9e	f0 0a		beq $8daa			beq 	_LNTStringOut
.8da0					_LNTPushStrLoop:
.8da0	b1 38		lda ($38),y			lda 	(zTemp1),y
.8da2	f0 06		beq $8daa			beq 	_LNTStringOut
.8da4	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8da7	c8		iny				iny
.8da8	80 f6		bra $8da0			bra 	_LNTPushStrLoop
.8daa					_LNTStringOut:
.8daa	98		tya				tya									; output length
.8dab	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8dae	a9 00		lda #$00			lda 	#0 							; clear original string.
.8db0	92 38		sta ($38)			sta 	(zTemp1)
.8db2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8db5	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8db8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dbb	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8dbe	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8dc0	20 d7 9f	jsr $9fd7			jsr 	StackPushByte
.8dc3	7a		ply				ply
.8dc4	60		rts				rts
.8dc5					_LNTError:
.8dc5	4c ad ac	jmp $acad			jmp 	SyntaxError
.a66e					LocalPopValue:
.a66e	20 f0 9f	jsr $9ff0			jsr 	StackPopByte
.a671	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a673	d0 17		bne $a68c			bne 	_LPVString
.a675	20 f0 9f	jsr $9ff0			jsr 	StackPopByte 				; address
.a678	85 37		sta $37				sta 	zTemp0+1
.a67a	20 f0 9f	jsr $9ff0			jsr 	StackPopByte
.a67d	85 36		sta $36				sta 	zTemp0
.a67f	5a		phy				phy
.a680	a0 04		ldy #$04			ldy 	#4 							; copy back
.a682					_LPVNumberCopy:
.a682	20 f0 9f	jsr $9ff0			jsr 	StackPopByte
.a685	91 36		sta ($36),y			sta 	(zTemp0),y
.a687	88		dey				dey
.a688	10 f8		bpl $a682			bpl 	_LPVNumberCopy
.a68a	7a		ply				ply 								; and complete
.a68b	60		rts				rts
.a68c					_LPVString:
.a68c	20 f0 9f	jsr $9ff0			jsr 	StackPopByte 				; address of record => zTemp0
.a68f	85 37		sta $37				sta 	zTemp0+1
.a691	20 f0 9f	jsr $9ff0			jsr 	StackPopByte
.a694	85 36		sta $36				sta 	zTemp0
.a696	5a		phy				phy
.a697	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a699	85 38		sta $38				sta 	zTemp1
.a69b	a0 01		ldy #$01			ldy 	#1
.a69d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a69f	85 39		sta $39				sta 	zTemp1+1
.a6a1	20 f0 9f	jsr $9ff0			jsr 	StackPopByte 				; # to get => y
.a6a4	a8		tay				tay
.a6a5	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a6a7	f0 0e		beq $a6b7			beq 	_LPVStringCopied
.a6a9	a9 00		lda #$00			lda 	#0 							; NULL on end
.a6ab	91 38		sta ($38),y			sta 	(zTemp1),y
.a6ad					_LPVStringCopy:
.a6ad	88		dey				dey
.a6ae	30 07		bmi $a6b7			bmi 	_LPVStringCopied
.a6b0	20 f0 9f	jsr $9ff0			jsr 	StackPopByte
.a6b3	91 38		sta ($38),y			sta 	(zTemp1),y
.a6b5	80 f6		bra $a6ad			bra 	_LPVStringCopy
.a6b7					_LPVStringCopied:
.a6b7	fa		plx				plx
.a6b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8dc8					NewCommand:
.8dc8	20 82 9f	jsr $9f82			jsr 	MemoryNew
.8dcb	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8dce	20 bd 89	jsr $89bd			jsr 	ClearCommand 				; clear everything.
.8dd1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8dd2					Command_Print:
.8dd2	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8dd3					_CPLoop:
.8dd3	08		php				php 								; save last action flag
.8dd4	b1 30		lda ($30),y			lda 	(codePtr),y
.8dd6	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8dd8	f0 46		beq $8e20			beq 	_CPExit
.8dda	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ddc	f0 42		beq $8e20			beq 	_CPExit
.8dde	68		pla				pla 								; throw last action flag
.8ddf	b1 30		lda ($30),y			lda 	(codePtr),y
.8de1	c8		iny				iny
.8de2	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8de4	f0 37		beq $8e1d			beq 	_CPContinueWithSameLine
.8de6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8de8	f0 2e		beq $8e18			beq 	_CPTab
.8dea	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8dec	f0 26		beq $8e14			beq 	_CPNewLine
.8dee	88		dey				dey 								; undo the get.
.8def	a2 00		ldx #$00			ldx 	#0
.8df1	20 90 9e	jsr $9e90			jsr 	EvaluateValue 				; get a value into slot 0
.8df4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8df7	29 10		and #$10			and 	#NSBIsString
.8df9	f0 0b		beq $8e06			beq 	_CPNumber
.8dfb	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8dfe	ad 08 04	lda $0408			lda 	NSMantissa0
.8e01	20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8e04	80 cc		bra $8dd2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e06					_CPNumber:
.8e06	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8e08	20 66 9d	jsr $9d66			jsr 	ConvertNumberToString 		; convert to string
.8e0b	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8e0d	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8e0f	20 e6 93	jsr $93e6			jsr 	PrintStringXA
.8e12	80 be		bra $8dd2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e14					_CPNewLine:
.8e14	a9 0d		lda #$0d			lda 	#13
.8e16	80 02		bra $8e1a			bra 	_CPPrintChar
.8e18					_CPTab:
.8e18	a9 09		lda #$09			lda 	#9 							; print TAB
.8e1a					_CPPrintChar:
.8e1a	20 51 ae	jsr $ae51			jsr 	EXTPrintCharacter
.8e1d					_CPContinueWithSameLine:
.8e1d	38		sec				sec 								; loop round with carry set, which
.8e1e	80 b3		bra $8dd3			bra 	_CPLoop 					; will inhibit final CR
.8e20					_CPExit:
.8e20	28		plp				plp 								; get last action flag
.8e21	b0 05		bcs $8e28			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e23	a9 0d		lda #$0d			lda 	#13 						; print new line
.8e25	20 51 ae	jsr $ae51			jsr 	EXTPrintCharacter
.8e28					_CPExit2:
.8e28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8e29					CallProcedure:
.8e29	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e2b	b1 30		lda ($30),y			lda 	(codePtr),y
.8e2d	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e2f	f0 0c		beq $8e3d			beq 	_CPEndParam
.8e31					_CPParamLoop:
.8e31	20 96 97	jsr $9796			jsr 	EvaluateExpression 			; get parameter onto stack
.8e34	e8		inx				inx 								; bump next stack
.8e35	b1 30		lda ($30),y			lda 	(codePtr),y
.8e37	c8		iny				iny
.8e38	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e3a	f0 f5		beq $8e31			beq 	_CPParamLoop
.8e3c	88		dey				dey 								; unpick.
.8e3d					_CPEndParam:
.8e3d	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8e40	c8		iny				iny									; skip right bracket
.8e41	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e43	20 f9 9f	jsr $9ff9			jsr 	StackOpen
.8e46	20 3d a0	jsr $a03d			jsr 	STKSaveCodePosition 		; save loop position
.8e49	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e4c	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e4e	ad 10 04	lda $0410			lda 	NSMantissa1
.8e51	85 37		sta $37				sta 	zTemp0+1
.8e53	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e55	b2 36		lda ($36)			lda 	(zTemp0)
.8e57	85 30		sta $30				sta 	safePtr
.8e59	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e5b	85 31		sta $31				sta 	safePtr+1
.8e5d	c8		iny				iny
.8e5e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e60	85 32		sta $32				sta 	safePtr+2
.8e62	c8		iny				iny
.8e63	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e65	85 33		sta $33				sta 	safePtr+3
.8e67	c8		iny				iny 								; get Y offset -> Y
.8e68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6a	a8		tay				tay
.8e6b	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e6d	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8e70	f0 13		beq $8e85			beq 	_ParamExit 					; if so, exit.
.8e72					_ParamExtract:
.8e72	ca		dex				dex 								; put a local term on the level before
.8e73	20 52 8d	jsr $8d52			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e76	20 90 8c	jsr $8c90			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e79	e8		inx				inx 								; advance to next parameter to do.
.8e7a	e8		inx				inx
.8e7b	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8e7e	f0 05		beq $8e85			beq 	_ParamExit
.8e80	20 cf a6	jsr $a6cf			jsr 	CheckComma 					; comma seperating parameters
.8e83	80 ed		bra $8e72			bra 	_ParamExtract
.8e85					_ParamExit:
.8e85	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 			; check )
.8e88	60		rts				rts 								; and continue from here
.a6b9					Command_ENDPROC:
.a6b9	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a6bb	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a6bd	20 25 a0	jsr $a025			jsr 	StackCheckFrame
.a6c0	20 4e a0	jsr $a04e			jsr 	STKLoadCodePosition 		; restore code position
.a6c3	20 17 a0	jsr $a017			jsr 	StackClose
.a6c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e89					Command_Read:
.8e89	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e8b	20 67 9a	jsr $9a67			jsr 	EvaluateTerm
.8e8e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e91	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8e93	f0 4a		beq $8edf			beq 	_CRSyntax 					; check reference (bit 0)
.8e95	20 28 8f	jsr $8f28			jsr 	SwapDataCodePtrs 			; swap code and data
.8e98	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8e9b	d0 20		bne $8ebd			bne 	_CRContinueData
.8e9d					_CRKeepSearching:
.8e9d	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8e9f	aa		tax				tax
.8ea0	20 ff 92	jsr $92ff			jsr 	ScanForward
.8ea3	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8ea5	f0 16		beq $8ebd			beq 	_CRHaveData 				; found it
.8ea7	18		clc				clc
.8ea8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8eaa	65 30		adc $30				adc 	codePtr
.8eac	85 30		sta $30				sta 	codePtr
.8eae	90 02		bcc $8eb2			bcc 	_CREExit
.8eb0	e6 31		inc $31				inc 	codePtr+1
.8eb2					_CREExit:
.8eb2	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8eb4	b2 30		lda ($30)			lda 	(codePtr)
.8eb6	d0 e5		bne $8e9d			bne 	_CRKeepSearching
.8eb8	a9 0b		lda #$0b		lda	#11
.8eba	4c 8d 93	jmp $938d		jmp	ErrorHandler
.8ebd					_CRHaveData:
.8ebd					_CRContinueData:
.8ebd	a2 01		ldx #$01			ldx 	#1
.8ebf	20 90 9e	jsr $9e90			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8ec2	ca		dex				dex
.8ec3	20 90 8c	jsr $8c90			jsr		AssignVariable 				; do the assignment
.8ec6	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8ec9	b1 30		lda ($30),y			lda 	(codePtr),y
.8ecb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8ecd	d0 04		bne $8ed3			bne 	_CRSwapBack
.8ecf	c8		iny				iny 								; consume comma
.8ed0	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8ed3					_CRSwapBack:
.8ed3	20 28 8f	jsr $8f28			jsr 	SwapDataCodePtrs			; swap them back.
.8ed6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ed8	c8		iny				iny
.8ed9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8edb	f0 ac		beq $8e89			beq 	Command_Read 				; if so go round again.
.8edd	88		dey				dey 								; unpick get.
.8ede	60		rts				rts
.8edf					_CRSyntax:
.8edf	4c ad ac	jmp $acad			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ee2					RemCommand:
.8ee2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ee6	d0 06		bne $8eee			bne 	_RMExit
.8ee8	c8		iny				iny
.8ee9	98		tya				tya
.8eea	38		sec				sec
.8eeb	71 30		adc ($30),y			adc 	(codePtr),y
.8eed	a8		tay				tay
.8eee					_RMExit:
.8eee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8eef					Command_REPEAT:
.8eef	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ef1	20 f9 9f	jsr $9ff9			jsr 	StackOpen
.8ef4	20 3d a0	jsr $a03d			jsr 	STKSaveCodePosition 		; save loop position
.8ef7	60		rts				rts
.8ef8					Command_UNTIL:
.8ef8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8efa	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8efc	20 25 a0	jsr $a025			jsr 	StackCheckFrame
.8eff	a2 00		ldx #$00			ldx 	#0
.8f01	20 99 9e	jsr $9e99			jsr 	EvaluateNumber 				; work out the number
.8f04	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; check if zero
.8f07	f0 04		beq $8f0d			beq 	_CULoopBack 				; if so keep looping
.8f09	20 17 a0	jsr $a017			jsr 	StackClose		 			; return
.8f0c	60		rts				rts
.8f0d					_CULoopBack:
.8f0d	20 4e a0	jsr $a04e			jsr 	STKLoadCodePosition 		; loop back
.8f10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f11					Command_Restore:
.8f11	20 28 8f	jsr $8f28			jsr 	SwapDataCodePtrs 			; swap code and data
.8f14	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f16	85 30		sta $30				sta 	codePtr
.8f18	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f1a	85 31		sta $31				sta 	codePtr+1
.8f1c	20 28 8f	jsr $8f28			jsr 	SwapDataCodePtrs 			; put them back
.8f1f	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f21	8d 9b 04	sta $049b			sta 	dataPointer+4
.8f24	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8f27	60		rts				rts
.8f28					SwapDataCodePtrs:
.8f28	da		phx				phx
.8f29	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f2b					_SDCPLoop:
.8f2b	b5 30		lda $30,x			lda 	safePtr,x
.8f2d	48		pha				pha
.8f2e	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8f31	95 30		sta $30,x			sta 	safePtr,x
.8f33	68		pla				pla
.8f34	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8f37	ca		dex				dex
.8f38	10 f1		bpl $8f2b			bpl 	_SDCPLoop
.8f3a	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8f3d	8c 9b 04	sty $049b			sty 	dataPointer+4
.8f40	a8		tay				tay
.8f41	fa		plx				plx
.8f42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f43					CommandRUN:
.8f43	20 bd 89	jsr $89bd			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8f46	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f48	85 30		sta $30				sta 	codePtr
.8f4a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f4c	85 31		sta $31				sta 	codePtr+1
.8f4e					RUNNewLine:
.8f4e	b2 30		lda ($30)			lda 	(codePtr)
.8f50	f0 5e		beq $8fb0			beq 	CRNoProgram         		; no then END.
.8f52	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f54	9a		txs				txs
.8f55					RUNCodePointerLine:
.8f55	a0 02		ldy #$02			ldy 	#2 							; start of program
.8f57					_CRIncMainLoop:
.8f57	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8f5a	d0 05		bne $8f61			bne 	_CRNoBreakCheck
.8f5c	20 92 ae	jsr $ae92			jsr 	EXTBreakCheck 				; break check
.8f5f	f0 4a		beq $8fab			beq 	_CRBreak
.8f61					_CRNoBreakCheck:
.8f61	c8		iny				iny
.8f62					_CRMainLoop:
.8f62	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f65	b1 30		lda ($30),y			lda 	(codePtr),y
.8f67	10 10		bpl $8f79			bpl 	_CRNotKeyword
.8f69	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8f6b	b0 04		bcs $8f71			bcs 	_CRIsKeyword
.8f6d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8f6f	b0 34		bcs $8fa5			bcs		_CRSyntaxError
.8f71					_CRIsKeyword:
.8f71	c8		iny				iny 								; consume command
.8f72	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8f73	aa		tax				tax 								; put in X for vector jump
.8f74	20 a8 8f	jsr $8fa8			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8f77	80 e9		bra $8f62			bra 	_CRMainLoop 				; and loop round
.8f79					_CRNotKeyword:
.8f79	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8f7b	f0 da		beq $8f57			beq 	_CRIncMainLoop
.8f7d	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8f7f	90 05		bcc $8f86			bcc 	_CRNotVariable
.8f81					_CRGoLet:
.8f81	20 54 8c	jsr $8c54			jsr 	LetCommand
.8f84	80 dc		bra $8f62			bra 	_CRMainLoop
.8f86					_CRNotVariable:
.8f86	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8f88	f0 f7		beq $8f81			beq 	_CRGoLet
.8f8a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8f8c	f0 f3		beq $8f81			beq 	_CRGoLet
.8f8e	c9 21		cmp #$21			cmp 	#KWD_PLING
.8f90	f0 ef		beq $8f81			beq 	_CRGoLet
.8f92	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8f94	f0 09		beq $8f9f			beq 	_CRGoRem
.8f96	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8f98	d0 0b		bne $8fa5			bne 	_CRSyntaxError
.8f9a	20 5d 88	jsr $885d			jsr 	LabelHere
.8f9d	80 c3		bra $8f62			bra 	_CRMainLoop
.8f9f					_CRGoRem:
.8f9f	c8		iny				iny
.8fa0	20 e2 8e	jsr $8ee2			jsr 	RemCommand
.8fa3	80 bd		bra $8f62			bra 	_CRMainLoop
.8fa5					_CRSyntaxError:
.8fa5	4c ad ac	jmp $acad			jmp 	SyntaxError
.8fa8					_CRCallVector0:
.8fa8	7c 54 90	jmp ($9054,x)			jmp 	(VectorSet0,x)
.8fab					_CRBreak:
.8fab	a9 01		lda #$01		lda	#1
.8fad	4c 8d 93	jmp $938d		jmp	ErrorHandler
.8fb0					CRNoProgram:
.8fb0	4c da 8a	jmp $8ada			jmp 	EndCommand
.8fb3					EOLCommand:
.8fb3	18		clc				clc
.8fb4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8fb6	65 30		adc $30				adc 	codePtr
.8fb8	85 30		sta $30				sta 	codePtr
.8fba	90 02		bcc $8fbe			bcc 	_CREExit
.8fbc	e6 31		inc $31				inc 	codePtr+1
.8fbe					_CREExit:
.8fbe	80 8e		bra $8f4e			bra 	RunNewLine
.8fc0					Shift1Command:
.8fc0	b1 30		lda ($30),y			lda 	(codePtr),y
.8fc2	c8		iny				iny
.8fc3	0a		asl a				asl 	a
.8fc4	aa		tax				tax
.8fc5	7c b6 90	jmp ($90b6,x)			jmp 	(VectorSet1,x)
.8fc8					Shift2Command:
.8fc8	b1 30		lda ($30),y			lda 	(codePtr),y
.8fca	c8		iny				iny
.8fcb	0a		asl a				asl 	a
.8fcc	aa		tax				tax
.8fcd	7c ce 90	jmp ($90ce,x)			jmp 	(VectorSet2,x)
.8fd0					Unused1:
.8fd0					Unused2:
.8fd0					Unused3:
.8fd0					Unused4:
.8fd0	4c ad ac	jmp $acad			jmp 	SyntaxError
>8fd3							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8fd4					VectorSetPunc:
>8fd4	37 95					.word	ShiftLeft                        ; $00 <<
>8fd6	31 94					.word	BinaryCompareLessEqual           ; $01 <=
>8fd8	27 94					.word	BinaryCompareNotEqual            ; $02 <>
>8fda	ad ac					.word	SyntaxError                      ; $03 !!3
>8fdc	ad ac					.word	SyntaxError                      ; $04 ><
>8fde	3b 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>8fe0	3a 95					.word	ShiftRight                       ; $06 >>
>8fe2	ad ac					.word	SyntaxError                      ; $07 !!7
>8fe4	ad ac					.word	SyntaxError                      ; $08 !!8
>8fe6	ad ac					.word	SyntaxError                      ; $09 !!9
>8fe8	ad ac					.word	SyntaxError                      ; $0a !!10
>8fea	ad ac					.word	SyntaxError                      ; $0b !!11
>8fec	ad ac					.word	SyntaxError                      ; $0c !!12
>8fee	ad ac					.word	SyntaxError                      ; $0d !!13
>8ff0	ad ac					.word	SyntaxError                      ; $0e !!14
>8ff2	ad ac					.word	SyntaxError                      ; $0f !!15
>8ff4	ad ac					.word	SyntaxError                      ; $10 @
>8ff6	ad ac					.word	SyntaxError                      ; $11 !!17
>8ff8	ad ac					.word	SyntaxError                      ; $12 !!18
>8ffa	ad ac					.word	SyntaxError                      ; $13 [
>8ffc	e0 a6					.word	IntegerDivide                    ; $14 \
>8ffe	ad ac					.word	SyntaxError                      ; $15 ]
>9000	c0 96					.word	EorInteger                       ; $16 ^
>9002	ad ac					.word	SyntaxError                      ; $17 _
>9004	ad ac					.word	SyntaxError                      ; $18 `
>9006	ad ac					.word	SyntaxError                      ; $19 !!25
>9008	ad ac					.word	SyntaxError                      ; $1a !!26
>900a	ad ac					.word	SyntaxError                      ; $1b {
>900c	7a 96					.word	OraInteger                       ; $1c |
>900e	ad ac					.word	SyntaxError                      ; $1d }
>9010	ad ac					.word	SyntaxError                      ; $1e ~
>9012	ad ac					.word	SyntaxError                      ; $1f [7m<7F>[m
>9014	ad ac					.word	SyntaxError                      ; $20
>9016	06 97					.word	WordIndirect                     ; $21 !
>9018	ad ac					.word	SyntaxError                      ; $22 "
>901a	ad ac					.word	SyntaxError                      ; $23 #
>901c	ad ac					.word	SyntaxError                      ; $24 $
>901e	2d a7					.word	IntegerModulus                   ; $25 %
>9020	34 96					.word	AndInteger                       ; $26 &
>9022	ad ac					.word	SyntaxError                      ; $27 '
>9024	ad ac					.word	SyntaxError                      ; $28 (
>9026	ad ac					.word	SyntaxError                      ; $29 )
>9028	a2 a7					.word	MulInteger                       ; $2a *
>902a	ce 95					.word	AddInteger                       ; $2b +
>902c	ad ac					.word	SyntaxError                      ; $2c ,
>902e	09 96					.word	SubInteger                       ; $2d -
>9030	ad ac					.word	SyntaxError                      ; $2e .
>9032	39 a9					.word	FDivideCommand                   ; $2f /
>9034	ad ac					.word	SyntaxError                      ; $30 0
>9036	ad ac					.word	SyntaxError                      ; $31 1
>9038	ad ac					.word	SyntaxError                      ; $32 2
>903a	ad ac					.word	SyntaxError                      ; $33 3
>903c	ad ac					.word	SyntaxError                      ; $34 4
>903e	ad ac					.word	SyntaxError                      ; $35 5
>9040	ad ac					.word	SyntaxError                      ; $36 6
>9042	ad ac					.word	SyntaxError                      ; $37 7
>9044	ad ac					.word	SyntaxError                      ; $38 8
>9046	ad ac					.word	SyntaxError                      ; $39 9
>9048	ad ac					.word	SyntaxError                      ; $3a :
>904a	ad ac					.word	SyntaxError                      ; $3b ;
>904c	13 94					.word	BinaryCompareLess                ; $3c <
>904e	09 94					.word	BinaryCompareEqual               ; $3d =
>9050	1d 94					.word	BinaryCompareGreater             ; $3e >
>9052	2d 97					.word	ByteIndirect                     ; $3f ?
.9054					VectorSet0:
>9054	b3 8f					.word	EOLCommand                       ; $80 !0:EOF
>9056	c0 8f					.word	Shift1Command                    ; $81 !1:SH1
>9058	c8 8f					.word	Shift2Command                    ; $82 !2:SH2
>905a	7f aa					.word	AbsUnary                         ; $83 ABS(
>905c	f7 9b					.word	AllocUnary                       ; $84 ALLOC(
>905e	8f aa					.word	AscUnary                         ; $85 ASC(
>9060	17 9d					.word	ChrUnary                         ; $86 CHR$(
>9062	05 94					.word	UnaryFalse                       ; $87 FALSE
>9064	9c aa					.word	FracUnary                        ; $88 FRAC(
>9066	b2 aa					.word	IntUnary                         ; $89 INT(
>9068	08 ab					.word	IsValUnary                       ; $8a ISVAL(
>906a	f1 9d					.word	Unary_Left                       ; $8b LEFT$(
>906c	c4 aa					.word	LenUnary                         ; $8c LEN(
>906e	1b 9e					.word	Unary_Mid                        ; $8d MID$(
>9070	67 9c					.word	Unary_Not                        ; $8e NOT(
>9072	7d 9c					.word	Unary_Random                     ; $8f RANDOM(
>9074	01 9e					.word	Unary_Right                      ; $90 RIGHT$(
>9076	96 9c					.word	Unary_Rnd                        ; $91 RND(
>9078	de aa					.word	SgnUnary                         ; $92 SGN(
>907a	29 9d					.word	SpcUnary                         ; $93 SPC(
>907c	44 9d					.word	Unary_Str                        ; $94 STR$(
>907e	f9 93					.word	UnaryTrue                        ; $95 TRUE
>9080	fe aa					.word	ValUnary                         ; $96 VAL(
>9082	dd 8a					.word	ForCommand                       ; $97 FOR
>9084	2a 8c					.word	IfCommand                        ; $98 IF
>9086	d0 8f					.word	Unused1                          ; $99 PROC
>9088	ef 8e					.word	Command_REPEAT                   ; $9a REPEAT
>908a	5e 93					.word	Command_WHILE                    ; $9b WHILE
>908c	53 8c					.word	EndIf                            ; $9c ENDIF
>908e	b9 a6					.word	Command_ENDPROC                  ; $9d ENDPROC
>9090	97 8b					.word	NextCommand                      ; $9e NEXT
>9092	d0 8f					.word	Unused4                          ; $9f THEN
>9094	f8 8e					.word	Command_UNTIL                    ; $a0 UNTIL
>9096	7f 93					.word	Command_WEND                     ; $a1 WEND
>9098	83 89					.word	CallCommand                      ; $a2 CALL
>909a	ad ac					.word	SyntaxError                      ; $a3 CLS
>909c	15 8a					.word	Command_Data                     ; $a4 DATA
>909e	1d 8a					.word	DimCommand                       ; $a5 DIM
>90a0	d0 8f					.word	Unused3                          ; $a6 DOWNTO
>90a2	4c 8c					.word	ElseCode                         ; $a7 ELSE
>90a4	f0 8b					.word	Command_GOSUB                    ; $a8 GOSUB
>90a6	0e 8c					.word	GotoCommand                      ; $a9 GOTO
>90a8	54 8c					.word	LetCommand                       ; $aa LET
>90aa	44 8d					.word	Command_LOCAL                    ; $ab LOCAL
>90ac	d2 8d					.word	Command_Print                    ; $ac PRINT
>90ae	89 8e					.word	Command_Read                     ; $ad READ
>90b0	e2 8e					.word	RemCommand                       ; $ae REM
>90b2	00 8c					.word	Command_RETURN                   ; $af RETURN
>90b4	d0 8f					.word	Unused2                          ; $b0 TO
.90b6					VectorSet1:
>90b6	ad ac					.word	SyntaxError                      ; $80 !0:EOF
>90b8	ad ac					.word	SyntaxError                      ; $81 !1:SH1
>90ba	ad ac					.word	SyntaxError                      ; $82 !2:SH2
>90bc	54 89					.word	AssembleCommand                  ; $83 ASSEMBLE
>90be	73 89					.word	AssertCommand                    ; $84 ASSERT
>90c0	bd 89					.word	ClearCommand                     ; $85 CLEAR
>90c2	da 8a					.word	EndCommand                       ; $86 END
>90c4	a9 8c					.word	Command_List                     ; $87 LIST
>90c6	c8 8d					.word	NewCommand                       ; $88 NEW
>90c8	11 8f					.word	Command_Restore                  ; $89 RESTORE
>90ca	43 8f					.word	CommandRUN                       ; $8a RUN
>90cc	56 91					.word	StopCommand                      ; $8b STOP
.90ce					VectorSet2:
>90ce	ad ac					.word	SyntaxError                      ; $80 !0:EOF
>90d0	ad ac					.word	SyntaxError                      ; $81 !1:SH1
>90d2	ad ac					.word	SyntaxError                      ; $82 !2:SH2
>90d4	6c ab					.word	Assemble_adc                     ; $83 ADC
>90d6	64 ab					.word	Assemble_and                     ; $84 AND
>90d8	80 ab					.word	Assemble_asl                     ; $85 ASL
>90da	ea ab					.word	Assemble_bcc                     ; $86 BCC
>90dc	ee ab					.word	Assemble_bcs                     ; $87 BCS
>90de	f6 ab					.word	Assemble_beq                     ; $88 BEQ
>90e0	ad ab					.word	Assemble_bit                     ; $89 BIT
>90e2	de ab					.word	Assemble_bmi                     ; $8a BMI
>90e4	f2 ab					.word	Assemble_bne                     ; $8b BNE
>90e6	da ab					.word	Assemble_bpl                     ; $8c BPL
>90e8	fa ab					.word	Assemble_bra                     ; $8d BRA
>90ea	fe ab					.word	Assemble_brk                     ; $8e BRK
>90ec	e2 ab					.word	Assemble_bvc                     ; $8f BVC
>90ee	e6 ab					.word	Assemble_bvs                     ; $90 BVS
>90f0	06 ac					.word	Assemble_clc                     ; $91 CLC
>90f2	5a ac					.word	Assemble_cld                     ; $92 CLD
>90f4	1a ac					.word	Assemble_cli                     ; $93 CLI
>90f6	4a ac					.word	Assemble_clv                     ; $94 CLV
>90f8	78 ab					.word	Assemble_cmp                     ; $95 CMP
>90fa	c1 ab					.word	Assemble_cpx                     ; $96 CPX
>90fc	bc ab					.word	Assemble_cpy                     ; $97 CPY
>90fe	9e ab					.word	Assemble_dec                     ; $98 DEC
>9100	56 ac					.word	Assemble_dex                     ; $99 DEX
>9102	32 ac					.word	Assemble_dey                     ; $9a DEY
>9104	68 ab					.word	Assemble_eor                     ; $9b EOR
>9106	a3 ab					.word	Assemble_inc                     ; $9c INC
>9108	66 ac					.word	Assemble_inx                     ; $9d INX
>910a	52 ac					.word	Assemble_iny                     ; $9e INY
>910c	d5 ab					.word	Assemble_jmp                     ; $9f JMP
>910e	d0 ab					.word	Assemble_jsr                     ; $a0 JSR
>9110	74 ab					.word	Assemble_lda                     ; $a1 LDA
>9112	99 ab					.word	Assemble_ldx                     ; $a2 LDX
>9114	b7 ab					.word	Assemble_ldy                     ; $a3 LDY
>9116	8a ab					.word	Assemble_lsr                     ; $a4 LSR
>9118	6a ac					.word	Assemble_nop                     ; $a5 NOP
>911a	60 ab					.word	Assemble_ora                     ; $a6 ORA
>911c	16 ac					.word	Assemble_pha                     ; $a7 PHA
>911e	02 ac					.word	Assemble_php                     ; $a8 PHP
>9120	5e ac					.word	Assemble_phx                     ; $a9 PHX
>9122	1e ac					.word	Assemble_phy                     ; $aa PHY
>9124	26 ac					.word	Assemble_pla                     ; $ab PLA
>9126	0a ac					.word	Assemble_plp                     ; $ac PLP
>9128	72 ac					.word	Assemble_plx                     ; $ad PLX
>912a	2e ac					.word	Assemble_ply                     ; $ae PLY
>912c	85 ab					.word	Assemble_rol                     ; $af ROL
>912e	8f ab					.word	Assemble_ror                     ; $b0 ROR
>9130	12 ac					.word	Assemble_rti                     ; $b1 RTI
>9132	22 ac					.word	Assemble_rts                     ; $b2 RTS
>9134	7c ab					.word	Assemble_sbc                     ; $b3 SBC
>9136	0e ac					.word	Assemble_sec                     ; $b4 SEC
>9138	6e ac					.word	Assemble_sed                     ; $b5 SED
>913a	2a ac					.word	Assemble_sei                     ; $b6 SEI
>913c	70 ab					.word	Assemble_sta                     ; $b7 STA
>913e	62 ac					.word	Assemble_stp                     ; $b8 STP
>9140	94 ab					.word	Assemble_stx                     ; $b9 STX
>9142	b2 ab					.word	Assemble_sty                     ; $ba STY
>9144	a8 ab					.word	Assemble_stz                     ; $bb STZ
>9146	46 ac					.word	Assemble_tax                     ; $bc TAX
>9148	42 ac					.word	Assemble_tay                     ; $bd TAY
>914a	cb ab					.word	Assemble_trb                     ; $be TRB
>914c	c6 ab					.word	Assemble_tsb                     ; $bf TSB
>914e	4e ac					.word	Assemble_tsx                     ; $c0 TSX
>9150	36 ac					.word	Assemble_txa                     ; $c1 TXA
>9152	3e ac					.word	Assemble_txs                     ; $c2 TXS
>9154	3a ac					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9156					StopCommand:
.9156	a9 08		lda #$08		lda	#8
.9158	4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.915b					ListConvertLine:
.915b	9c 9d 04	stz $049d			stz 	tbOffset
.915e	9c a9 04	stz $04a9			stz 	tokenBuffer
.9161	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9163	b1 30		lda ($30),y			lda 	(codePtr),y
.9165	aa		tax				tax
.9166	88		dey				dey
.9167	b1 30		lda ($30),y			lda 	(codePtr),y
.9169	20 23 a8	jsr $a823			jsr 	ConvertInt16
.916c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.916e	86 37		stx $37				stx 	zTemp0+1
.9170	a0 00		ldy #$00			ldy 	#0
.9172					_LCCopyNumber:
.9172	b1 36		lda ($36),y			lda 	(zTemp0),y
.9174	20 74 92	jsr $9274			jsr 	LCLWrite
.9177	c8		iny				iny
.9178	b1 36		lda ($36),y			lda 	(zTemp0),y
.917a	d0 f6		bne $9172			bne 	_LCCopyNumber
.917c					_LCPadOut:
.917c	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.917e	20 74 92	jsr $9274			jsr 	LCLWrite
.9181	ad 9d 04	lda $049d			lda 	tbOffset
.9184	c9 06		cmp #$06			cmp 	#6
.9186	d0 f4		bne $917c			bne 	_LCPadOut
.9188	a0 03		ldy #$03			ldy 	#3 							; start position.
.918a					_LCMainLoop:
.918a	b1 30		lda ($30),y			lda 	(codePtr),y
.918c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.918e	f0 17		beq $91a7			beq 	_LCExit
.9190	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9192	90 14		bcc $91a8			bcc 	_LCDoubles
.9194	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9196	90 20		bcc $91b8			bcc 	_LCShiftPunc
.9198	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.919a	90 2b		bcc $91c7			bcc 	_LCPunctuation
.919c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.919e	90 2d		bcc $91cd			bcc 	_LCIdentifiers
.91a0	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.91a2	90 49		bcc $91ed			bcc 	_LCTokens
.91a4	4c 48 92	jmp $9248			jmp 	_LCData 					; 254-5 are data objects
.91a7					_LCExit:
.91a7	60		rts				rts
.91a8					_LCDoubles:
.91a8	48		pha				pha
.91a9	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.91aa	29 02		and #$02			and 	#2
.91ac	09 3c		ora #$3c			ora 	#60 						; make < >
.91ae	20 74 92	jsr $9274			jsr 	LCLWrite
.91b1	68		pla				pla 								; restore, do lower bit
.91b2	29 03		and #$03			and 	#3
.91b4	09 3c		ora #$3c			ora 	#60
.91b6	80 0f		bra $91c7			bra		_LCPunctuation 				; print, increment, loop
.91b8					_LCShiftPunc:
.91b8	aa		tax				tax 								; save in X
.91b9	29 07		and #$07			and 	#7 							; lower 3 bits
.91bb	f0 02		beq $91bf			beq 	_LCNoAdd
.91bd	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.91bf					_LCNoAdd:
.91bf	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.91c1	90 02		bcc $91c5			bcc 	_LCNoAdd2
.91c3	09 20		ora #$20			ora 	#32 						; adds $20
.91c5					_LCNoAdd2:
.91c5	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.91c7					_LCPunctuation:
.91c7	c8		iny				iny 								; consume character
.91c8	20 74 92	jsr $9274			jsr 	LCLWrite 					; write it out.
.91cb	80 bd		bra $918a			bra 	_LCMainLoop 				; go round again.
.91cd					_LCIdentifiers:
.91cd	18		clc				clc 								; convert to physical address
.91ce	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.91d0	85 37		sta $37				sta 	zTemp0+1
.91d2	c8		iny				iny
.91d3	b1 30		lda ($30),y			lda 	(codePtr),y
.91d5	85 36		sta $36				sta 	zTemp0
.91d7	c8		iny				iny
.91d8	5a		phy				phy 								; save position
.91d9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.91db					_LCOutIdentifier:
.91db	c8		iny				iny
.91dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.91de	29 7f		and #$7f			and 	#$7F
.91e0	20 a2 92	jsr $92a2			jsr 	LCLLowerCase
.91e3	20 74 92	jsr $9274			jsr 	LCLWrite
.91e6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.91e8	10 f1		bpl $91db			bpl 	_LCOutIdentifier
.91ea	7a		ply				ply 								; restore position
.91eb	80 9d		bra $918a			bra 	_LCMainLoop
.91ed					_LCTokens:
.91ed	aa		tax				tax 								; token in X
.91ee	a9 72		lda #$72			lda 	#((KeywordSet2) & $FF)
.91f0	85 36		sta $36				sta 	0+zTemp0
.91f2	a9 a2		lda #$a2			lda 	#((KeywordSet2) >> 8)
.91f4	85 37		sta $37				sta 	1+zTemp0
.91f6	e0 82		cpx #$82			cpx 	#$82
.91f8	f0 16		beq $9210			beq 	_LCUseShift
.91fa	a9 2e		lda #$2e			lda 	#((KeywordSet1) & $FF)
.91fc	85 36		sta $36				sta 	0+zTemp0
.91fe	a9 a2		lda #$a2			lda 	#((KeywordSet1) >> 8)
.9200	85 37		sta $37				sta 	1+zTemp0
.9202	e0 81		cpx #$81			cpx 	#$81
.9204	f0 0a		beq $9210			beq 	_LCUseShift
.9206	a9 fc		lda #$fc			lda 	#((KeywordSet0) & $FF)
.9208	85 36		sta $36				sta 	0+zTemp0
.920a	a9 a0		lda #$a0			lda 	#((KeywordSet0) >> 8)
.920c	85 37		sta $37				sta 	1+zTemp0
.920e	80 01		bra $9211			bra 	_LCNoShift
.9210					_LCUseShift:
.9210	c8		iny				iny
.9211					_LCNoShift:
.9211	20 83 92	jsr $9283			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9214	b1 30		lda ($30),y			lda 	(codePtr),y
.9216	aa		tax				tax 								; into X
.9217					_LCFindText:
.9217	ca		dex				dex
.9218	10 0e		bpl $9228			bpl 	_LCFoundText 				; found text.
.921a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.921c	1a		inc a				inc 	a 							; one extra for size
.921d	38		sec				sec 								; one extra for checksum
.921e	65 36		adc $36				adc 	zTemp0 						; go to next token
.9220	85 36		sta $36				sta 	zTemp0
.9222	90 f3		bcc $9217			bcc 	_LCFindText
.9224	e6 37		inc $37				inc 	zTemp0+1
.9226	80 ef		bra $9217			bra 	_LCFindText
.9228					_LCFoundText:
.9228	5a		phy				phy 								; save List position
.9229	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.922b	aa		tax				tax
.922c	a0 02		ldy #$02			ldy 	#2
.922e					_LCCopyToken:
.922e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9230	20 a2 92	jsr $92a2			jsr 	LCLLowerCase
.9233	20 74 92	jsr $9274			jsr 	LCLWrite
.9236	c8		iny				iny
.9237	ca		dex				dex
.9238	d0 f4		bne $922e			bne 	_LCCopyToken
.923a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.923c	f0 05		beq $9243			beq 	_LCNoSpace
.923e	a9 20		lda #$20			lda 	#' '
.9240	20 74 92	jsr $9274			jsr 	LCLWrite
.9243					_LCNoSpace:
.9243	7a		ply				ply 								; restore position.
.9244	c8		iny				iny 								; consume token
.9245	4c 8a 91	jmp $918a			jmp 	_LCMainLoop 				; and go around again.
.9248					_LCData:
.9248	48		pha				pha 								; save type $FE/$FF
.9249	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.924b	c9 fe		cmp #$fe			cmp 	#$FE
.924d	f0 02		beq $9251			beq 	_LCHaveOpener
.924f	a2 22		ldx #$22			ldx 	#'"'
.9251					_LCHaveOpener:
.9251	8a		txa				txa 								; output prefix (# or ")
.9252	20 74 92	jsr $9274			jsr 	LCLWrite
.9255	c8		iny				iny 								; get count
.9256	b1 30		lda ($30),y			lda 	(codePtr),y
.9258	aa		tax				tax
.9259	c8		iny				iny 								; point at first character
.925a					_LCOutData:
.925a	b1 30		lda ($30),y			lda 	(codePtr),y
.925c	c9 00		cmp #$00			cmp 	#0
.925e	f0 03		beq $9263			beq 	_LCNoPrint
.9260	20 74 92	jsr $9274			jsr 	LCLWrite
.9263					_LCNoPrint:
.9263	c8		iny				iny
.9264	ca		dex				dex
.9265	d0 f3		bne $925a			bne 	_LCOutData
.9267	68		pla				pla 								; closing " required ?
.9268	c9 ff		cmp #$ff			cmp 	#$FF
.926a	d0 05		bne $9271			bne 	_LCNoQuote
.926c	a9 22		lda #$22			lda 	#'"'
.926e	20 74 92	jsr $9274			jsr 	LCLWrite
.9271					_LCNoQuote:
.9271	4c 8a 91	jmp $918a			jmp 	_LCMainLoop
.9274					LCLWrite:
.9274	da		phx				phx
.9275	ae 9d 04	ldx $049d			ldx 	tbOffset
.9278	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.927b	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.927e	ee 9d 04	inc $049d			inc 	tbOffset
.9281	fa		plx				plx
.9282	60		rts				rts
.9283					LCCheckSpaceRequired:
.9283	ae 9d 04	ldx $049d			ldx 	tbOffset
.9286	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9289	20 a2 92	jsr $92a2			jsr 	LCLLowerCase 				; saves a little effort
.928c	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.928e	90 11		bcc $92a1			bcc 	_LCCSRExit
.9290	c9 3a		cmp #$3a			cmp 	#"9"+1
.9292	90 08		bcc $929c			bcc 	_LCCSRSpace
.9294	c9 61		cmp #$61			cmp 	#"a"
.9296	90 09		bcc $92a1			bcc 	_LCCSRExit
.9298	c9 7b		cmp #$7b			cmp 	#"z"+1
.929a	b0 05		bcs $92a1			bcs 	_LCCSRExit
.929c					_LCCSRSpace:
.929c	a9 20		lda #$20			lda 	#' '
.929e	20 74 92	jsr $9274			jsr 	LCLWrite
.92a1					_LCCSRExit:
.92a1	60		rts				rts
.92a2					LCLLowerCase:
.92a2	c9 41		cmp #$41			cmp 	#"A"
.92a4	90 06		bcc $92ac			bcc 	_LCLLCOut
.92a6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.92a8	b0 02		bcs $92ac			bcs 	_LCLLCOut
.92aa	69 20		adc #$20			adc 	#$20
.92ac					_LCLLCOut:
.92ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.92ad					ProcedureScan:
.92ad	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92af	85 30		sta $30				sta 	codePtr
.92b1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92b3	85 31		sta $31				sta 	codePtr+1
.92b5					_PSLoop:
.92b5	b2 30		lda ($30)			lda 	(codePtr)
.92b7	f0 42		beq $92fb			beq 	_PSExit
.92b9	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.92bb	b1 30		lda ($30),y			lda 	(codePtr),y
.92bd	c9 99		cmp #$99			cmp 	#KWD_PROC
.92bf	d0 2d		bne $92ee			bne 	_PSNext
.92c1	c8		iny				iny 								; get the address of the record to zTemp0 and
.92c2	b1 30		lda ($30),y			lda 	(codePtr),y
.92c4	29 c0		and #$c0			and 	#$C0
.92c6	c9 40		cmp #$40			cmp 	#$40
.92c8	d0 32		bne $92fc			bne 	_PSSyntax
.92ca	b1 30		lda ($30),y			lda 	(codePtr),y
.92cc	18		clc				clc
.92cd	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92cf	85 37		sta $37				sta 	zTemp0+1
.92d1	c8		iny				iny 								; LSB
.92d2	b1 30		lda ($30),y			lda 	(codePtr),y
.92d4	85 36		sta $36				sta 	zTemp0
.92d6	c8		iny				iny 								; character after variable call.
.92d7	98		tya				tya 								; save Y offset at +7
.92d8	a0 07		ldy #$07			ldy 	#7
.92da	91 36		sta ($36),y			sta 	(zTemp0),y
.92dc	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92de	a0 02		ldy #$02			ldy 	#2
.92e0	91 36		sta ($36),y			sta 	(zTemp0),y
.92e2	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.92e4					_PSCopy:
.92e4	b5 30		lda $30,x			lda 	safePtr,x
.92e6	c8		iny				iny
.92e7	91 36		sta ($36),y			sta 	(zTemp0),y
.92e9	e8		inx				inx
.92ea	e0 04		cpx #$04			cpx 	#4
.92ec	d0 f6		bne $92e4			bne 	_PSCopy
.92ee					_PSNext:
.92ee	18		clc				clc
.92ef	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92f1	65 30		adc $30				adc 	codePtr
.92f3	85 30		sta $30				sta 	codePtr
.92f5	90 02		bcc $92f9			bcc 	_CREExit
.92f7	e6 31		inc $31				inc 	codePtr+1
.92f9					_CREExit:
.92f9	80 ba		bra $92b5			bra 	_PSLoop
.92fb					_PSExit:
.92fb	60		rts				rts
.92fc					_PSSyntax:
.92fc	4c ad ac	jmp $acad			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92ff					ScanForward:
.92ff	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9301	86 37		stx $37				stx 	zTemp0+1
.9303	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9305					_ScanLoop:
.9305	b1 30		lda ($30),y			lda 	(codePtr),y
.9307	c8		iny				iny
.9308	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.930a	d0 0e		bne $931a			bne 	_ScanGoNext
.930c	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.930e	f0 04		beq $9314			beq 	_ScanMatch
.9310	c5 37		cmp $37				cmp 	zTemp0+1
.9312	d0 06		bne $931a			bne 	_ScanGoNext
.9314					_ScanMatch:
.9314	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9316	d0 01		bne $9319			bne 	_ScanNotEndEOL
.9318	88		dey				dey
.9319					_ScanNotEndEOL:
.9319	60		rts				rts
.931a					_ScanGoNext:
.931a	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.931c	90 e7		bcc $9305			bcc 	_ScanLoop
.931e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9320	90 18		bcc $933a			bcc 	_ScanSkipOne
.9322	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9324	b0 2f		bcs $9355			bcs 	_ScanSkipData
.9326	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9328	90 db		bcc $9305			bcc 	_ScanLoop 					; if not, ordinary keywords.
.932a	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.932c	b0 d7		bcs $9305			bcs 	_ScanLoop
.932e	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9330	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9332	b0 d1		bcs $9305			bcs 	_ScanLoop
.9334	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9336	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9338	80 cb		bra $9305			bra 	_ScanLoop
.933a					_ScanSkipOne:
.933a	c8		iny				iny 								; consume the extra one.
.933b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.933d	d0 c6		bne $9305			bne 	_ScanLoop
.933f	18		clc				clc
.9340	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9342	65 30		adc $30				adc 	codePtr
.9344	85 30		sta $30				sta 	codePtr
.9346	90 02		bcc $934a			bcc 	_CREExit
.9348	e6 31		inc $31				inc 	codePtr+1
.934a					_CREExit:
.934a	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.934c	b2 30		lda ($30)			lda 	(codePtr)
.934e	d0 b5		bne $9305			bne 	_ScanLoop 					; if not zero, more to scan
.9350	a9 13		lda #$13		lda	#19
.9352	4c 8d 93	jmp $938d		jmp	ErrorHandler
.9355					_ScanSkipData:
.9355	88		dey				dey 								; point at data token
.9356	c8		iny				iny
.9357	98		tya				tya
.9358	38		sec				sec
.9359	71 30		adc ($30),y			adc 	(codePtr),y
.935b	a8		tay				tay
.935c	80 a7		bra $9305			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.935e					Command_WHILE:
.935e	5a		phy				phy 								; save position of the test
.935f	a2 00		ldx #$00			ldx 	#0
.9361	20 99 9e	jsr $9e99			jsr 	EvaluateNumber 				; work out the number
.9364	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; check if zero
.9367	f0 0e		beq $9377			beq 	_WHExitLoop 				; if so exit the loop
.9369	98		tya				tya 								; position *after* test.
.936a	7a		ply				ply 								; restore position before test, at WHILE
.936b	88		dey				dey
.936c	48		pha				pha 								; push after test on the stack
.936d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.936f	20 f9 9f	jsr $9ff9			jsr 	StackOpen
.9372	20 3d a0	jsr $a03d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9375	7a		ply				ply 								; restore the position *after* the test
.9376	60		rts				rts
.9377					_WHExitLoop:
.9377	68		pla				pla 								; throw post loop position
.9378	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.937a	aa		tax				tax
.937b	20 ff 92	jsr $92ff			jsr 	ScanForward
.937e	60		rts				rts
.937f					Command_WEND:
.937f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9381	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9383	20 25 a0	jsr $a025			jsr 	StackCheckFrame
.9386	20 4e a0	jsr $a04e			jsr 	STKLoadCodePosition 		; loop back
.9389	20 17 a0	jsr $a017			jsr 	StackClose		 			; erase the frame
.938c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a6c7					CheckRightBracket:
.a6c7	b1 30		lda ($30),y			lda 	(codePtr),y
.a6c9	c8		iny				iny
.a6ca	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a6cc	d0 0f		bne $a6dd			bne 	CNAFail
.a6ce	60		rts				rts
.a6cf					CheckComma:
.a6cf	b1 30		lda ($30),y			lda 	(codePtr),y
.a6d1	c8		iny				iny
.a6d2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a6d4	d0 07		bne $a6dd			bne 	CNAFail
.a6d6	60		rts				rts
.a6d7					CheckNextA:
.a6d7	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a6d9	d0 02		bne $a6dd			bne 	CNAFail
.a6db	c8		iny				iny 								; skip character
.a6dc	60		rts				rts 								; and exit
.a6dd					CNAFail:
.a6dd	4c ad ac	jmp $acad			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.938d					ErrorHandler:
.938d	a8		tay				tay 								; find the error text
.938e	f0 49		beq $93d9			beq 	_EHEnd
.9390	a2 00		ldx #$00			ldx 	#0
.9392	a9 c6		lda #$c6			lda 	#((ErrorText) & $FF)
.9394	85 36		sta $36				sta 	0+zTemp0
.9396	a9 ac		lda #$ac			lda 	#((ErrorText) >> 8)
.9398	85 37		sta $37				sta 	1+zTemp0
.939a					_EHFind:
.939a	88		dey				dey 								; found the error text ?
.939b	f0 0e		beq $93ab			beq 	_EHFound
.939d					_EHFindZero:
.939d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.939f	e6 36		inc $36				inc 	zTemp0
.93a1	d0 02		bne $93a5			bne 	_EHFNoCarry
.93a3	e6 37		inc $37				inc 	zTemp0+1
.93a5					_EHFNoCarry:
.93a5	c9 00		cmp #$00			cmp 	#0
.93a7	d0 f4		bne $939d			bne 	_EHFindZero
.93a9	80 ef		bra $939a			bra 	_EHFind
.93ab					_EHFound:
.93ab	a5 36		lda $36				lda 	zTemp0 						; print message
.93ad	a6 37		ldx $37				ldx 	zTemp0+1
.93af	20 e6 93	jsr $93e6			jsr 	PrintStringXA
.93b2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.93b4	b1 30		lda ($30),y			lda 	(codePtr),y
.93b6	d0 05		bne $93bd			bne 	_EHAtMsg
.93b8	c8		iny				iny
.93b9	b1 30		lda ($30),y			lda 	(codePtr),y
.93bb	f0 17		beq $93d4			beq 	_EHCREnd
.93bd					_EHAtMsg:
.93bd	a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93bf	a9 dc		lda #$dc			lda 	#_AtMsg & $FF
.93c1	20 e6 93	jsr $93e6			jsr 	PrintStringXA
.93c4	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93c6	b1 30		lda ($30),y			lda 	(codePtr),y
.93c8	48		pha				pha
.93c9	c8		iny				iny
.93ca	b1 30		lda ($30),y			lda 	(codePtr),y
.93cc	aa		tax				tax
.93cd	68		pla				pla
.93ce	20 23 a8	jsr $a823			jsr 	ConvertInt16 				; convert XA to string
.93d1	20 e6 93	jsr $93e6			jsr 	PrintStringXA 				; and print it.
.93d4					_EHCREnd:
.93d4	a9 0d		lda #$0d			lda 	#13 						; new line
.93d6	20 51 ae	jsr $ae51			jsr 	EXTPrintCharacter
.93d9					_EHEnd:
.93d9	4c 24 89	jmp $8924			jmp 	WarmStart
>93dc	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93e4	20 00
.93e6					PrintStringXA:
.93e6	5a		phy				phy
.93e7	86 37		stx $37				stx 	zTemp0+1
.93e9	85 36		sta $36				sta 	zTemp0
.93eb	a0 00		ldy #$00			ldy 	#0
.93ed					_PSXALoop:
.93ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.93ef	f0 06		beq $93f7			beq 	_PSXAExit
.93f1	20 51 ae	jsr $ae51			jsr 	EXTPrintCharacter
.93f4	c8		iny				iny
.93f5	80 f6		bra $93ed			bra 	_PSXALoop
.93f7					_PSXAExit:
.93f7	7a		ply				ply
.93f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.93f9					UnaryTrue:
.93f9	fa		plx				plx
.93fa					ReturnTrue:
.93fa	a9 01		lda #$01			lda 	#1  						; set to 1
.93fc	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.93ff	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9401	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9404	60		rts				rts
.9405					UnaryFalse:
.9405	fa		plx				plx
.9406					ReturnFalse:
.9406	4c 45 9f	jmp $9f45			jmp 	NSMSetZero 					; set it all to zero
.9409					BinaryCompareEqual:
.9409	fa		plx				plx
.940a	20 45 94	jsr $9445			jsr 	CompareBaseCode
.940d	c9 00		cmp #$00			cmp 	#0
.940f	f0 e9		beq $93fa			beq 	ReturnTrue
.9411	80 f3		bra $9406			bra 	ReturnFalse
.9413					BinaryCompareLess:
.9413	fa		plx				plx
.9414	20 45 94	jsr $9445			jsr 	CompareBaseCode
.9417	c9 ff		cmp #$ff			cmp 	#$FF
.9419	f0 df		beq $93fa			beq 	ReturnTrue
.941b	80 e9		bra $9406			bra 	ReturnFalse
.941d					BinaryCompareGreater:
.941d	fa		plx				plx
.941e	20 45 94	jsr $9445			jsr 	CompareBaseCode
.9421	c9 01		cmp #$01			cmp 	#1
.9423	f0 d5		beq $93fa			beq 	ReturnTrue
.9425	80 df		bra $9406			bra 	ReturnFalse
.9427					BinaryCompareNotEqual:
.9427	fa		plx				plx
.9428	20 45 94	jsr $9445			jsr 	CompareBaseCode
.942b	c9 00		cmp #$00			cmp 	#0
.942d	d0 cb		bne $93fa			bne 	ReturnTrue
.942f	80 d5		bra $9406			bra 	ReturnFalse
.9431					BinaryCompareLessEqual:
.9431	fa		plx				plx
.9432	20 45 94	jsr $9445			jsr 	CompareBaseCode
.9435	c9 01		cmp #$01			cmp 	#1
.9437	d0 c1		bne $93fa			bne 	ReturnTrue
.9439	80 cb		bra $9406			bra 	ReturnFalse
.943b					BinaryCompareGreaterEqual:
.943b	fa		plx				plx
.943c	20 45 94	jsr $9445			jsr 	CompareBaseCode
.943f	c9 ff		cmp #$ff			cmp 	#$FF
.9441	d0 b7		bne $93fa			bne 	ReturnTrue
.9443	80 c1		bra $9406			bra 	ReturnFalse
.9445					CompareBaseCode:
.9445	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; make both values if references.
.9448	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.944b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.944e	29 10		and #$10			and 	#NSTString
.9450	d0 40		bne $9492			bne 	_CBCString
.9452	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9455	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9458	d0 3b		bne $9495			bne 	_CBCFloat
.945a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.945d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9460	29 08		and #$08			and 	#NSTFloat
.9462	d0 31		bne $9495			bne 	_CBCFloat
.9464	20 98 94	jsr $9498			jsr 	CompareFixMinusZero
.9467	e8		inx				inx
.9468	20 98 94	jsr $9498			jsr 	CompareFixMinusZero
.946b	ca		dex				dex
.946c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.946f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9472	10 0b		bpl $947f			bpl 	_CDCSameSign
.9474	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9477	30 16		bmi $948f			bmi 	_CBCLess 					; return $FF
.9479					_CBCGreater:
.9479	a9 01		lda #$01			lda 	#1
.947b	60		rts				rts
.947c					_CBCEqual:
.947c	a9 00		lda #$00			lda 	#0
.947e	60		rts				rts
.947f					_CDCSameSign:
.947f	20 a8 95	jsr $95a8			jsr 	SubTopTwoStack 				; unsigned subtract
.9482	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; or the mantissa together
.9485	f0 f5		beq $947c			beq 	_CBCEqual 					; -0 == 0
.9487	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.948a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.948d	10 ea		bpl $9479			bpl 	_CBCGreater
.948f					_CBCLess:
.948f	a9 ff		lda #$ff			lda 	#$FF
.9491	60		rts				rts
.9492					_CBCString:
.9492	4c fe 94	jmp $94fe			jmp 	CompareStrings
.9495					_CBCFloat:
.9495	4c 1f a9	jmp $a91f			jmp 	CompareFloat
.9498					CompareFixMinusZero:
.9498	20 75 9f	jsr $9f75			jsr 	NSMIsZero
.949b	d0 03		bne $94a0			bne 	_CFXMZNotZero
.949d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.94a0					_CFXMZNotZero:
.94a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94a1					StringConcat:
.94a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.94a4	3d 01 04	and $0401,x			and 	NSStatus+1,x
.94a7	29 18		and #$18			and 	#NSBTypeMask
.94a9	c9 10		cmp #$10			cmp 	#NSTString
.94ab	d0 4e		bne $94fb			bne		_SCType
.94ad	64 38		stz $38				stz 	zTemp1 						; counting total length
.94af	e8		inx				inx
.94b0	20 ce 94	jsr $94ce			jsr 	_SCSetupZ0 					; setup for second
.94b3	20 d9 94	jsr $94d9			jsr 	_SCLengthZ0 				; length for second
.94b6	ca		dex				dex
.94b7	20 ce 94	jsr $94ce			jsr 	_SCSetupZ0 					; setup for first
.94ba	20 d9 94	jsr $94d9			jsr 	_SCLengthZ0 				; length for first
.94bd	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.94bf	20 d3 af	jsr $afd3			jsr 	StringTempAllocate
.94c2	20 ec 94	jsr $94ec			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94c5	e8		inx				inx
.94c6	20 ce 94	jsr $94ce			jsr 	_SCSetupZ0 					; copy second out
.94c9	20 ec 94	jsr $94ec			jsr 	_SCCopy
.94cc	ca		dex				dex
.94cd	60		rts				rts
.94ce					_SCSetupZ0:
.94ce	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.94d1	85 36		sta $36				sta 	zTemp0
.94d3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.94d6	85 37		sta $37				sta 	zTemp0+1
.94d8	60		rts				rts
.94d9					_SCLengthZ0:
.94d9	5a		phy				phy
.94da	a0 00		ldy #$00			ldy 	#0
.94dc					_SCLenLoop:
.94dc	b1 36		lda ($36),y			lda 	(zTemp0),y
.94de	f0 0a		beq $94ea			beq 	_SCLExit
.94e0	c8		iny				iny
.94e1	e6 38		inc $38				inc 	zTemp1
.94e3	10 f7		bpl $94dc			bpl		_SCLenLoop
.94e5	a9 09		lda #$09		lda	#9
.94e7	4c 8d 93	jmp $938d		jmp	ErrorHandler
.94ea					_SCLExit:
.94ea	7a		ply				ply
.94eb	60		rts				rts
.94ec					_SCCopy:
.94ec	5a		phy				phy
.94ed	a0 00		ldy #$00			ldy 	#0
.94ef					_SCCopyLoop:
.94ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f1	f0 06		beq $94f9			beq 	_SCCExit
.94f3	20 11 b0	jsr $b011			jsr 	StringTempWrite
.94f6	c8		iny				iny
.94f7	80 f6		bra $94ef			bra 	_SCCopyLoop
.94f9					_SCCExit:
.94f9	7a		ply				ply
.94fa	60		rts				rts
.94fb					_SCType:
.94fb	4c b7 ac	jmp $acb7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a6e0					IntegerDivide:
.a6e0	fa		plx				plx
.a6e1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a6e4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a6e7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a6e8	0a		asl a				asl 	a
.a6e9	10 05		bpl $a6f0			bpl 	_NotRef
.a6eb	48		pha				pha
.a6ec	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a6ef	68		pla				pla
.a6f0					_NotRef:
.a6f0	0a		asl a				asl 	a
.a6f1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a6f3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a6f6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a6f9	f0 03		beq $a6fe			beq 	_IntegerCode 				; if clear, then we have two integers
.a6fb	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.a6fe					_IntegerCode:
.a6fe	20 20 a7	jsr $a720			jsr 	CheckDivideZero 			; do div zero check
.a701	20 58 a7	jsr $a758			jsr 	Int32Divide 				; do the division
.a704	20 15 a8	jsr $a815			jsr 	CalculateSign 				; calculate result sign
.a707					NSMCopyPlusTwoToZero:
.a707	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a70a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a70d	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a710	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a713	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a716	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a719	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a71c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a71f	60		rts				rts
.a720					CheckDivideZero:
.a720	e8		inx				inx
.a721	20 75 9f	jsr $9f75			jsr 	NSMIsZero
.a724	f0 02		beq $a728			beq 	_CDVError
.a726	ca		dex				dex
.a727	60		rts				rts
.a728					_CDVError:
.a728	a9 03		lda #$03		lda	#3
.a72a	4c 8d 93	jmp $938d		jmp	ErrorHandler
.a72d					IntegerModulus:
.a72d	fa		plx				plx
.a72e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a731	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a734	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a735	0a		asl a				asl 	a
.a736	10 05		bpl $a73d			bpl 	_NotRef
.a738	48		pha				pha
.a739	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a73c	68		pla				pla
.a73d					_NotRef:
.a73d	0a		asl a				asl 	a
.a73e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a740	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a743	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a746	f0 03		beq $a74b			beq 	_IntegerCode 				; if clear, then we have two integers
.a748	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.a74b					_IntegerCode:
.a74b					IntegerModulusNoCheck:
.a74b	20 20 a7	jsr $a720			jsr 	CheckDivideZero 			; do div zero check
.a74e	20 58 a7	jsr $a758			jsr 	Int32Divide 				; do the division
.a751	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a754	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a757	60		rts				rts
.a758					Int32Divide:
.a758	48		pha				pha 								; save AXY
.a759	5a		phy				phy
.a75a	20 1c 9f	jsr $9f1c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a75d	20 41 9f	jsr $9f41			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a760	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a762					_I32DivideLoop:
.a762	e8		inx				inx
.a763	e8		inx				inx
.a764	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a767	ca		dex				dex
.a768	ca		dex				dex
.a769	20 5b 9f	jsr $9f5b			jsr 	NSMRotateLeft
.a76c	20 98 a7	jsr $a798			jsr 	DivideCheckSubtract 		; check if subtract possible
.a76f	90 03		bcc $a774			bcc 	_I32DivideNoCarryIn
.a771	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a774					_I32DivideNoCarryIn:
.a774	88		dey				dey 								; loop round till division completed.
.a775	d0 eb		bne $a762			bne 	_I32DivideLoop
.a777	7a		ply				ply 								; restore AXY and exit
.a778	68		pla				pla
.a779	60		rts				rts
.a77a					Int32ShiftDivide:
.a77a	48		pha				pha 								; save AY
.a77b	5a		phy				phy
.a77c	e8		inx				inx 								; clear S[X+2]
.a77d	e8		inx				inx
.a77e	20 45 9f	jsr $9f45			jsr 	NSMSetZero
.a781	ca		dex				dex
.a782	ca		dex				dex
.a783	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a785					_I32SDLoop:
.a785	20 98 a7	jsr $a798			jsr 	DivideCheckSubtract 		; check if subtract possible
.a788	e8		inx				inx
.a789	e8		inx				inx
.a78a	20 5b 9f	jsr $9f5b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a78d	ca		dex				dex
.a78e	ca		dex				dex
.a78f	20 5b 9f	jsr $9f5b			jsr 	NSMRotateLeft
.a792	88		dey				dey 	 							; do 31 times
.a793	d0 f0		bne $a785			bne 	_I32SDLoop
.a795	7a		ply				ply 								; restore AY and exit
.a796	68		pla				pla
.a797	60		rts				rts
.a798					DivideCheckSubtract:
.a798	20 a8 95	jsr $95a8			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a79b	b0 04		bcs $a7a1			bcs 	_DCSExit 					; if carry set, then could do, exit
.a79d	20 82 95	jsr $9582			jsr 	AddTopTwoStack 				; add it back in
.a7a0	18		clc				clc 								; and return False
.a7a1					_DCSExit:
.a7a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a7a2					MulInteger:
.a7a2	fa		plx				plx
.a7a3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7a6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7a9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7aa	0a		asl a				asl 	a
.a7ab	10 05		bpl $a7b2			bpl 	_NotRef
.a7ad	48		pha				pha
.a7ae	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7b1	68		pla				pla
.a7b2					_NotRef:
.a7b2	0a		asl a				asl 	a 							; put MSB of type into A:7
.a7b3	30 0b		bmi $a7c0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a7b5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7b8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7bb	f0 06		beq $a7c3			beq 	_IntegerCode 				; if clear, then we have two integers
.a7bd	4c f6 a9	jmp $a9f6			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a7c0					_StringData:
.a7c0	4c c1 ac	jmp $acc1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a7c3					_IntegerCode:
.a7c3	20 d0 a7	jsr $a7d0			jsr 	MultiplyShort
.a7c6	c9 00		cmp #$00			cmp 	#0
.a7c8	f0 05		beq $a7cf			beq 	_MIExit
.a7ca	a9 04		lda #$04		lda	#4
.a7cc	4c 8d 93	jmp $938d		jmp	ErrorHandler
.a7cf					_MIExit:
.a7cf	60		rts				rts
.a7d0					MultiplyShort:
.a7d0	5a		phy				phy 								; save Y
.a7d1	20 1c 9f	jsr $9f1c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a7d4	20 41 9f	jsr $9f41			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a7d7	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a7d9					_I32MLoop:
.a7d9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a7dc	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a7df	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a7e2	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a7e5	f0 28		beq $a80f			beq 	_I32MExit 					; exit if zero
.a7e7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a7ea	29 01		and #$01			and 	#1
.a7ec	f0 0e		beq $a7fc			beq 	_I32MNoAdd
.a7ee	20 82 95	jsr $9582			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a7f1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a7f4	10 06		bpl $a7fc			bpl 	_I32MNoAdd
.a7f6					_I32ShiftRight:
.a7f6	20 68 9f	jsr $9f68			jsr 	NSMShiftRight 				; shift S[X] right
.a7f9	c8		iny				iny 								; increment shift count
.a7fa	80 0a		bra $a806			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a7fc					_I32MNoAdd:
.a7fc	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a7ff	70 f5		bvs $a7f6			bvs 	_I32ShiftRight 				; instead.
.a801	e8		inx				inx
.a802	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a805	ca		dex				dex
.a806					_I32MShiftUpper:
.a806	e8		inx				inx 								; shift S[X+2] right
.a807	e8		inx				inx
.a808	20 68 9f	jsr $9f68			jsr 	NSMShiftRight
.a80b	ca		dex				dex
.a80c	ca		dex				dex
.a80d	80 ca		bra $a7d9			bra 	_I32MLoop 					; try again.
.a80f					_I32MExit:
.a80f	20 15 a8	jsr $a815			jsr 	CalculateSign
.a812	98		tya				tya 								; shift in A
.a813	7a		ply				ply 								; restore Y and exit
.a814	60		rts				rts
.a815					CalculateSign:
.a815	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a818	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a81b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a81e	0a		asl a				asl 	a 							; shift bit 7 into carry
.a81f	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a822	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.94fe					CompareStrings:
.94fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9501	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9504	29 10		and #$10			and 	#NSBIsString
.9506	f0 2c		beq $9534			beq 	_CSTypeError
.9508	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.950b	85 36		sta $36				sta 	zTemp0
.950d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9510	85 37		sta $37				sta 	zTemp0+1
.9512	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9515	85 38		sta $38				sta 	zTemp1
.9517	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.951a	85 39		sta $39				sta 	zTemp1+1
.951c	5a		phy				phy 								; save Y so we can access strings
.951d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.951f					_CSLoop:
.951f	c8		iny				iny
.9520	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9522	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9524	d0 06		bne $952c			bne 	_CSDifferent
.9526	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9528	d0 f5		bne $951f			bne 	_CSLoop 					; still comparing
.952a					_CSExit:
.952a	7a		ply				ply 								; reached end, return zero in A from EOS
.952b	60		rts				rts
.952c					_CSDifferent:
.952c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.952e	90 fa		bcc $952a			bcc		_CSExit
.9530	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9532	80 f6		bra $952a			bra 	_CSExit
.9534					_CSTypeError:
.9534	4c b7 ac	jmp $acb7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9537					ShiftLeft:
.9537	38		sec				sec
.9538	80 01		bra $953b			bra 	ShiftMain
.953a					ShiftRight:
.953a	18		clc				clc
.953b					ShiftMain:
.953b	fa		plx				plx 								; restore X
.953c	08		php				php 								; save direction
.953d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9540	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9543	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9544	0a		asl a				asl 	a
.9545	10 05		bpl $954c			bpl 	_NotRef
.9547	48		pha				pha
.9548	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.954b	68		pla				pla
.954c					_NotRef:
.954c	0a		asl a				asl 	a
.954d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.954f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9552	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9555	f0 03		beq $955a			beq 	_IntegerCode 				; if clear, then we have two integers
.9557	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.955a					_IntegerCode:
.955a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.955d	29 e0		and #$e0			and 	#$E0
.955f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9562	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9565	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9568	d0 13		bne $957d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.956a					_SMLoop:
.956a	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.956d	30 11		bmi $9580			bmi 	_SMExit 					; exit if done.
.956f	28		plp				plp 								; restore direcition setting
.9570	08		php				php
.9571	90 05		bcc $9578			bcc 	_SMRight
.9573	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; shift left if CS
.9576	80 f2		bra $956a			bra 	_SMLoop
.9578					_SMRight:
.9578	20 68 9f	jsr $9f68			jsr 	NSMShiftRight 				; shift right if CC
.957b	80 ed		bra $956a			bra 	_SMLoop
.957d					_SMExit0:
.957d	20 45 9f	jsr $9f45			jsr 	NSMSetZero 					; return zero.
.9580					_SMExit:
.9580	28		plp				plp 								; throw direction
.9581	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9582					AddTopTwoStack:
.9582	18		clc				clc
.9583	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9586	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9589	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.958c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.958f	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9592	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9595	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9598	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.959b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.959e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95a1	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.95a4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95a7	60		rts				rts
.95a8					SubTopTwoStack:
.95a8	38		sec				sec
.95a9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95ac	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.95af	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95b2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95b5	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.95b8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95bb	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95be	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.95c1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95c4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95c7	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.95ca	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95cd	60		rts				rts
.95ce					AddInteger:
.95ce	fa		plx				plx
.95cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95d2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95d5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95d6	0a		asl a				asl 	a
.95d7	10 05		bpl $95de			bpl 	_NotRef
.95d9	48		pha				pha
.95da	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95dd	68		pla				pla
.95de					_NotRef:
.95de	0a		asl a				asl 	a 							; put MSB of type into A:7
.95df	30 0b		bmi $95ec			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95e1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95e4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95e7	f0 06		beq $95ef			beq 	_IntegerCode 				; if clear, then we have two integers
.95e9	4c 7e a8	jmp $a87e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.95ec					_StringData:
.95ec	4c a1 94	jmp $94a1			jmp 	StringConcat							; at least one string - don't know both are strings.
.95ef					_IntegerCode:
.95ef					AddCode:
.95ef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.95f2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.95f5	10 8b		bpl $9582			bpl 	AddTopTwoStack
.95f7	20 a8 95	jsr $95a8			jsr 	SubTopTwoStack 				; do a physical subtraction
.95fa	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.95fd	10 09		bpl $9608			bpl 	_AddExit
.95ff	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9602	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9605	20 fa 9e	jsr $9efa			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9608					_AddExit:
.9608	60		rts				rts
.9609					SubInteger:
.9609	fa		plx				plx
.960a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.960d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9610	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9611	0a		asl a				asl 	a
.9612	10 05		bpl $9619			bpl 	_NotRef
.9614	48		pha				pha
.9615	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9618	68		pla				pla
.9619					_NotRef:
.9619	0a		asl a				asl 	a 							; put MSB of type into A:7
.961a	30 0b		bmi $9627			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.961c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.961f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9622	f0 06		beq $962a			beq 	_IntegerCode 				; if clear, then we have two integers
.9624	4c 83 a8	jmp $a883			jmp 	FloatingPointSub 							; otherwise at least one float.
.9627					_StringData:
.9627	4c c1 ac	jmp $acc1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.962a					_IntegerCode:
.962a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.962d	49 80		eor #$80			eor 	#$80
.962f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9632	80 bb		bra $95ef			bra 	AddCode 					; and do the same code as add.
.9634					AndInteger:
.9634	fa		plx				plx
.9635	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9638	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.963b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.963c	0a		asl a				asl 	a
.963d	10 05		bpl $9644			bpl 	_NotRef
.963f	48		pha				pha
.9640	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9643	68		pla				pla
.9644					_NotRef:
.9644	0a		asl a				asl 	a
.9645	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9647	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.964a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.964d	f0 03		beq $9652			beq 	_IntegerCode 				; if clear, then we have two integers
.964f	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.9652					_IntegerCode:
.9652	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9655	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9658	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.965b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.965e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9661	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9664	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9667	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.966a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.966d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9670	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9673	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9676	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9679	60		rts				rts
.967a					OraInteger:
.967a	fa		plx				plx
.967b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.967e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9681	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9682	0a		asl a				asl 	a
.9683	10 05		bpl $968a			bpl 	_NotRef
.9685	48		pha				pha
.9686	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9689	68		pla				pla
.968a					_NotRef:
.968a	0a		asl a				asl 	a
.968b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.968d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9690	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9693	f0 03		beq $9698			beq 	_IntegerCode 				; if clear, then we have two integers
.9695	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.9698					_IntegerCode:
.9698	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.969b	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.969e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96a1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96a4	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.96a7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96aa	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96ad	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.96b0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96b3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96b6	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.96b9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96bc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.96bf	60		rts				rts
.96c0					EorInteger:
.96c0	fa		plx				plx
.96c1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96c4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96c7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96c8	0a		asl a				asl 	a
.96c9	10 05		bpl $96d0			bpl 	_NotRef
.96cb	48		pha				pha
.96cc	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96cf	68		pla				pla
.96d0					_NotRef:
.96d0	0a		asl a				asl 	a
.96d1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96d3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96d6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96d9	f0 03		beq $96de			beq 	_IntegerCode 				; if clear, then we have two integers
.96db	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.96de					_IntegerCode:
.96de	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96e1	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.96e4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96e7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96ea	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.96ed	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96f0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96f3	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.96f6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96f9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96fc	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.96ff	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9702	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9705	60		rts				rts
.9706					WordIndirect:
.9706	fa		plx				plx
.9707	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.970a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.970d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.970e	0a		asl a				asl 	a
.970f	10 05		bpl $9716			bpl 	_NotRef
.9711	48		pha				pha
.9712	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9715	68		pla				pla
.9716					_NotRef:
.9716	0a		asl a				asl 	a
.9717	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9719	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.971c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.971f	f0 03		beq $9724			beq 	_IntegerCode 				; if clear, then we have two integers
.9721	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.9724					_IntegerCode:
.9724	20 ef 95	jsr $95ef			jsr 	AddCode 					; add the two values
.9727	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9729	9d 00 04	sta $0400,x			sta 	NSStatus,x
.972c	60		rts				rts
.972d					ByteIndirect:
.972d	fa		plx				plx
.972e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9731	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9734	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9735	0a		asl a				asl 	a
.9736	10 05		bpl $973d			bpl 	_NotRef
.9738	48		pha				pha
.9739	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.973c	68		pla				pla
.973d					_NotRef:
.973d	0a		asl a				asl 	a
.973e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9740	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9743	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9746	f0 03		beq $974b			beq 	_IntegerCode 				; if clear, then we have two integers
.9748	4c b7 ac	jmp $acb7			jmp 	TypeError 					; anything else, type mismatch.
.974b					_IntegerCode:
.974b	20 ef 95	jsr $95ef			jsr 	AddCode 					; add the two values
.974e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9750	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9753	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a823					ConvertInt16:
.a823	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a826	8e 10 04	stx $0410			stx 	NSMantissa1
.a829	9c 18 04	stz $0418			stz 	NSMantissa2
.a82c	9c 20 04	stz $0420			stz 	NSMantissa3
.a82f	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a832	a2 00		ldx #$00			ldx 	#0 							; stack level
.a834	a9 0a		lda #$0a			lda 	#10 						; base
.a836	80 00		bra $a838			bra 	ConvertInt32
.a838					ConvertInt32:
.a838	5a		phy				phy
.a839	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a83b	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a83e	10 08		bpl $a848			bpl 	_CI32NotNeg
.a840	48		pha				pha
.a841	a9 2d		lda #$2d			lda 	#'-'
.a843	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a846	c8		iny				iny
.a847	68		pla				pla
.a848					_CI32NotNeg:
.a848	20 56 a8	jsr $a856			jsr 	_CI32DivideConvert 			; recursive conversion
.a84b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a84d	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a850	7a		ply				ply
.a851	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a853	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a855	60		rts				rts
.a856					_CI32DivideConvert:
.a856	e8		inx				inx 								; write to next slot up
.a857	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.a85a	ca		dex				dex
.a85b	20 58 a7	jsr $a758			jsr 	Int32Divide 				; divide
.a85e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a861	48		pha				pha
.a862	20 07 a7	jsr $a707			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a865	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; is it zero ?
.a868	f0 06		beq $a870			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a86a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a86d	20 56 a8	jsr $a856			jsr 	_CI32DivideConvert 			; and recusrively call.
.a870					_CI32NoRecurse:
.a870	68		pla				pla 								; remainder
.a871	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a873	90 02		bcc $a877			bcc 	_CI32NotHex
.a875	69 26		adc #$26			adc 	#6+32
.a877					_CI32NotHex:
.a877	69 30		adc #$30			adc 	#48
.a879	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a87c	c8		iny				iny
.a87d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9754					PrecedenceLevel:
>9754	04					.byte	 4	; $00 <<
>9755	02					.byte	 2	; $01 <=
>9756	02					.byte	 2	; $02 <>
>9757	00					.byte	 0	; $03 !!3
>9758	00					.byte	 0	; $04 ><
>9759	02					.byte	 2	; $05 >=
>975a	04					.byte	 4	; $06 >>
>975b	00					.byte	 0	; $07 !!7
>975c	00					.byte	 0	; $08 !!8
>975d	00					.byte	 0	; $09 !!9
>975e	00					.byte	 0	; $0a !!10
>975f	00					.byte	 0	; $0b !!11
>9760	00					.byte	 0	; $0c !!12
>9761	00					.byte	 0	; $0d !!13
>9762	00					.byte	 0	; $0e !!14
>9763	00					.byte	 0	; $0f !!15
>9764	00					.byte	 0	; $10 @
>9765	00					.byte	 0	; $11 !!17
>9766	00					.byte	 0	; $12 !!18
>9767	00					.byte	 0	; $13 [
>9768	04					.byte	 4	; $14 \
>9769	00					.byte	 0	; $15 ]
>976a	01					.byte	 1	; $16 ^
>976b	00					.byte	 0	; $17 _
>976c	00					.byte	 0	; $18 `
>976d	00					.byte	 0	; $19 !!25
>976e	00					.byte	 0	; $1a !!26
>976f	00					.byte	 0	; $1b {
>9770	01					.byte	 1	; $1c |
>9771	00					.byte	 0	; $1d }
>9772	00					.byte	 0	; $1e ~
>9773	00					.byte	 0	; $1f [7m<7F>[m
>9774	00					.byte	 0	; $20
>9775	05					.byte	 5	; $21 !
>9776	00					.byte	 0	; $22 "
>9777	00					.byte	 0	; $23 #
>9778	05					.byte	 5	; $24 $
>9779	04					.byte	 4	; $25 %
>977a	01					.byte	 1	; $26 &
>977b	00					.byte	 0	; $27 '
>977c	00					.byte	 0	; $28 (
>977d	00					.byte	 0	; $29 )
>977e	04					.byte	 4	; $2a *
>977f	03					.byte	 3	; $2b +
>9780	00					.byte	 0	; $2c ,
>9781	03					.byte	 3	; $2d -
>9782	00					.byte	 0	; $2e .
>9783	04					.byte	 4	; $2f /
>9784	00					.byte	 0	; $30 0
>9785	00					.byte	 0	; $31 1
>9786	00					.byte	 0	; $32 2
>9787	00					.byte	 0	; $33 3
>9788	00					.byte	 0	; $34 4
>9789	00					.byte	 0	; $35 5
>978a	00					.byte	 0	; $36 6
>978b	00					.byte	 0	; $37 7
>978c	00					.byte	 0	; $38 8
>978d	00					.byte	 0	; $39 9
>978e	00					.byte	 0	; $3a :
>978f	00					.byte	 0	; $3b ;
>9790	02					.byte	 2	; $3c <
>9791	02					.byte	 2	; $3d =
>9792	02					.byte	 2	; $3e >
>9793	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9794					EvaluateExpressionAt0:
.9794	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9796					EvaluateExpression:
.9796	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9798					EvaluateExpressionAtPrecedence:
.9798	48		pha				pha 								; save precedence level
.9799	20 67 9a	jsr $9a67			jsr 	EvaluateTerm 				; evaluate term into level X.
.979c	68		pla				pla 								; restore precedence level.
.979d					_EXPRLoop:
.979d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.979f	b1 30		lda ($30),y			lda 	(codePtr),y
.97a1	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.97a3	b0 25		bcs $97ca			bcs 	_EXPRExit
.97a5	da		phx				phx 								; read the operator precedence
.97a6	aa		tax				tax
.97a7	bd 54 97	lda $9754,x			lda 	PrecedenceLevel,x
.97aa	fa		plx				plx
.97ab	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.97ad	f0 1b		beq $97ca			beq 	_EXPRExit
.97af	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.97b1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.97b3	c5 37		cmp $37				cmp 	zTemp0+1
.97b5	b0 13		bcs $97ca			bcs		_EXPRExit 					; if current >= operator exit
.97b7	48		pha				pha 								; save current precedence.
.97b8	b1 30		lda ($30),y			lda 	(codePtr),y
.97ba	c8		iny				iny
.97bb	48		pha				pha
.97bc	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.97be	e8		inx				inx 								; work out the right hand side.
.97bf	20 98 97	jsr $9798			jsr 	EvaluateExpressionAtPrecedence
.97c2	ca		dex				dex
.97c3	68		pla				pla 								; get operator, call the code.
.97c4	20 cd 97	jsr $97cd			jsr 	_EXPRCaller
.97c7	68		pla				pla 								; restore precedence level
.97c8	80 d3		bra $979d			bra 	_EXPRLoop 					; and go round.
.97ca					_EXPRExit:
.97ca	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.97cc	60		rts				rts
.97cd					_EXPRCaller:
.97cd	da		phx				phx 								; save on stack, first thing is to restore it
.97ce	0a		asl a				asl 	a 							; double so can use vectors into X
.97cf	aa		tax				tax
.97d0	7c d4 8f	jmp ($8fd4,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a87e					FloatingPointAdd:
.a87e	20 1f aa	jsr $aa1f			jsr 	FloatPrepare 				; prepare for floats
.a881	80 0b		bra $a88e			bra 	FloatAdd
.a883					FloatingPointSub:
.a883	20 1f aa	jsr $aa1f			jsr 	FloatPrepare 				; prepare for floats
.a886					FloatSubtract:
.a886	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a889	49 80		eor #$80			eor 	#$80
.a88b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a88e					FloatAdd:
.a88e	48		pha				pha
.a88f	5a		phy				phy
.a890	20 30 aa	jsr $aa30			jsr 	NSNormalise 				; normalise S[X]
.a893	f0 54		beq $a8e9			beq 	_FAReturn1
.a895	e8		inx				inx 								; normalise S[X+1]
.a896	20 30 aa	jsr $aa30			jsr 	NSNormalise
.a899	ca		dex				dex
.a89a	c9 00		cmp #$00			cmp 	#0
.a89c	f0 6f		beq $a90d			beq 	_FAExit 					; if so, just return A
.a89e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a8a1	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a8a4	f0 1b		beq $a8c1			beq 	_FAExponentsEqual
.a8a6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a8a9	a8		tay				tay
.a8aa	38		sec				sec 								; do a signed comparison of the exponents.
.a8ab	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a8ae	50 02		bvc $a8b2			bvc 	_FANoSignedChange
.a8b0	49 80		eor #$80			eor 	#$80
.a8b2					_FANoSignedChange:
.a8b2	29 80		and #$80			and 	#$80
.a8b4	10 03		bpl $a8b9			bpl 	_FAHaveMax
.a8b6	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a8b9					_FAHaveMax:
.a8b9	20 10 a9	jsr $a910			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a8bc	e8		inx				inx
.a8bd	20 10 a9	jsr $a910			jsr 	_FAShiftToExponent
.a8c0	ca		dex				dex
.a8c1					_FAExponentsEqual:
.a8c1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a8c4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a8c7	30 10		bmi $a8d9			bmi 	_FADifferentSigns
.a8c9	20 82 95	jsr $9582			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a8cc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a8cf	10 3c		bpl $a90d			bpl 	_FAExit 					; if no, we are done.
.a8d1	20 68 9f	jsr $9f68			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a8d4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a8d7	80 34		bra $a90d			bra 	_FAExit
.a8d9					_FADifferentSigns:
.a8d9	20 a8 95	jsr $95a8			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a8dc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a8df	10 2c		bpl $a90d			bpl 	_FAExit 					; if no, we are done.
.a8e1	20 f1 9e	jsr $9ef1			jsr 	NSMNegate 					; netate result
.a8e4	20 fa 9e	jsr $9efa			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a8e7	80 24		bra $a90d			bra 	_FAExit
.a8e9					_FAReturn1:
.a8e9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a8ec	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a8ef	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a8f2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a8f5	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a8f8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a8fb	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a8fe	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a901	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a904	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a907	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a90a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a90d					_FAExit:
.a90d	7a		ply				ply
.a90e	68		pla				pla
.a90f	60		rts				rts
.a910					_FAShiftToExponent:
.a910					_FAShiftToExponent2:
.a910	98		tya				tya 								; compare Y to exponent
.a911	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a914	f0 08		beq $a91e			beq 	_FASEExit 					; exit if so.
.a916	20 68 9f	jsr $9f68			jsr 	NSMShiftRight	 			; shift the mantissa right
.a919	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a91c	80 f2		bra $a910			bra 	_FAShiftToExponent2
.a91e					_FASEExit:
.a91e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a91f					CompareFloat:
.a91f	20 86 a8	jsr $a886			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a922	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a925	29 f8		and #$f8			and 	#$F8
.a927	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a92a	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a92d	f0 09		beq $a938			beq 	_FCExit 					; zero, so approximately identical
.a92f	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a931	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a934	10 02		bpl $a938			bpl 	_FCExit
.a936					_FCNegative:
.a936	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a938					_FCExit:
.a938	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a939					FDivideCommand:
.a939	fa		plx				plx	 								; restore stack position
.a93a	20 1f aa	jsr $aa1f			jsr 	FloatPrepare 				; prepare for floats
.a93d					FloatDivide:
.a93d	48		pha				pha
.a93e	e8		inx				inx
.a93f	20 30 aa	jsr $aa30			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a942	ca		dex				dex
.a943	c9 00		cmp #$00			cmp 	#0
.a945	f0 20		beq $a967			beq 	_FDZero
.a947	20 30 aa	jsr $aa30			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a94a	f0 19		beq $a965			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a94c	20 7a a7	jsr $a77a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a94f	20 07 a7	jsr $a707			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a952	20 30 aa	jsr $aa30			jsr		NSNormalise 				; renormalise
.a955	20 15 a8	jsr $a815			jsr 	CalculateSign 				; calculate result sign
.a958	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a95b	38		sec				sec
.a95c	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a95f	38		sec				sec
.a960	e9 1e		sbc #$1e			sbc 	#30
.a962	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a965					_FDExit:
.a965	68		pla				pla
.a966	60		rts				rts
.a967					_FDZero:
.a967	a9 03		lda #$03		lda	#3
.a969	4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a96c					FloatFractionalPart:
.a96c	5a		phy				phy
.a96d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a970	29 7f		and #$7f			and 	#$7F
.a972	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a975	20 30 aa	jsr $aa30			jsr 	NSNormalise
.a978	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a97b	38		sec				sec
.a97c	e9 e0		sbc #$e0			sbc 	#$E0
.a97e	90 31		bcc $a9b1			bcc 	_FFPExit 					; already fractional
.a980	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a982	b0 2a		bcs $a9ae			bcs 	_FFPZero
.a984	a8		tay				tay 								; put count to do in Y
.a985	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a988	20 b3 a9	jsr $a9b3			jsr 	_FFPPartial
.a98b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a98e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a991	20 b3 a9	jsr $a9b3			jsr 	_FFPPartial
.a994	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a997	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a99a	20 b3 a9	jsr $a9b3			jsr 	_FFPPartial
.a99d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9a0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a9a3	20 b3 a9	jsr $a9b3			jsr 	_FFPPartial
.a9a6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9a9	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; zeroed check.
.a9ac	d0 03		bne $a9b1			bne 	_FFPExit
.a9ae					_FFPZero:
.a9ae	20 45 9f	jsr $9f45			jsr 	NSMSetZero
.a9b1					_FFPExit:
.a9b1	7a		ply				ply
.a9b2	60		rts				rts
.a9b3					_FFPPartial:
.a9b3	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a9b5	f0 17		beq $a9ce			beq 	_FFFPPExit
.a9b7	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a9b9	b0 0c		bcs $a9c7			bcs 	_FFFPPWholeByte
.a9bb	5a		phy				phy
.a9bc					_FFFPPLeft:
.a9bc	0a		asl a				asl 	a
.a9bd	88		dey				dey
.a9be	d0 fc		bne $a9bc			bne 	_FFFPPLeft
.a9c0	7a		ply				ply
.a9c1					_FFFPPRight:
.a9c1	4a		lsr a				lsr 	a
.a9c2	88		dey				dey
.a9c3	d0 fc		bne $a9c1			bne 	_FFFPPRight
.a9c5	80 07		bra $a9ce			bra 	_FFFPPExit
.a9c7					_FFFPPWholeByte:
.a9c7	98		tya				tya 								; subtract 8 from count
.a9c8	38		sec				sec
.a9c9	e9 08		sbc #$08			sbc 	#8
.a9cb	a8		tay				tay
.a9cc	a9 00		lda #$00			lda 	#0 							; and clear all
.a9ce					_FFFPPExit:
.a9ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a9cf					FloatIntegerPart:
.a9cf	48		pha				pha
.a9d0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a9d3	f0 1f		beq $a9f4			beq 	_FIPExit 					; if so do nothing
.a9d5	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; is it zero ?
.a9d8	f0 17		beq $a9f1			beq 	_FIPZero 					; if so return zero.
.a9da	20 30 aa	jsr $aa30			jsr 	NSNormalise 				; normalise
.a9dd	f0 12		beq $a9f1			beq 	_FIPZero 					; normalised to zero, exit zero
.a9df					_FIPShift:
.a9df	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a9e2	10 08		bpl $a9ec			bpl 	_FIPCheckZero
.a9e4	20 68 9f	jsr $9f68			jsr 	NSMShiftRight 				; shift mantissa right
.a9e7	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a9ea	80 f3		bra $a9df			bra 	_FIPShift
.a9ec					_FIPCheckZero:
.a9ec	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; avoid -0 problem
.a9ef	d0 03		bne $a9f4			bne 	_FIPExit 					; set to zero if mantissa zero.
.a9f1					_FIPZero:
.a9f1	20 45 9f	jsr $9f45			jsr 	NSMSetZero
.a9f4					_FIPExit:
.a9f4	68		pla				pla
.a9f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a9f6					FloatingPointMultiply:
.a9f6	20 1f aa	jsr $aa1f			jsr 	FloatPrepare 				; prepare for floats
.a9f9					FloatMultiply:
.a9f9	48		pha				pha
.a9fa	20 30 aa	jsr $aa30			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a9fd	f0 1b		beq $aa1a			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a9ff	e8		inx				inx
.aa00	20 30 aa	jsr $aa30			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aa03	ca		dex				dex
.aa04	c9 00		cmp #$00			cmp 	#0
.aa06	f0 0f		beq $aa17			beq 	_FDSetZero
.aa08	20 d0 a7	jsr $a7d0			jsr 	MultiplyShort 				; calculate the result.
.aa0b	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aa0e	18		clc				clc
.aa0f	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aa12	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa15	80 03		bra $aa1a			bra 	_FDExit
.aa17					_FDSetZero:
.aa17	20 45 9f	jsr $9f45			jsr 	NSMSetZero 					; return 0
.aa1a					_FDExit:
.aa1a	20 30 aa	jsr $aa30			jsr 	NSNormalise 				; normalise the result
.aa1d	68		pla				pla
.aa1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aa1f					FloatPrepare:
.aa1f	20 a6 98	jsr $98a6			jsr 	DereferenceTopTwo 			; dereference the top two values
.aa22	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aa25	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa28	29 10		and #$10			and 	#NSBIsString
.aa2a	d0 01		bne $aa2d			bne 	_FDType
.aa2c	60		rts				rts
.aa2d					_FDType:
.aa2d	4c b7 ac	jmp $acb7			jmp 	TypeError
.aa30					NSNormalise:
.aa30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.aa33	29 80		and #$80			and 	#$80
.aa35	09 08		ora #$08			ora 	#NSTFloat
.aa37	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa3a	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; if zero exit
.aa3d	d0 09		bne $aa48			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.aa3f	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aa42	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.aa45	a9 00		lda #$00			lda 	#0 							; set Z flag
.aa47	60		rts				rts
.aa48					_NSNormaliseOptimise:
.aa48	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.aa4b	d0 22		bne $aa6f			bne 	_NSNormaliseLoop
.aa4d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.aa50	30 1d		bmi $aa6f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.aa52	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa58	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa5b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa5e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa61	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.aa64	bd 28 04	lda $0428,x			lda 	NSExponent,x
.aa67	38		sec				sec
.aa68	e9 08		sbc #$08			sbc 	#8
.aa6a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa6d	80 d9		bra $aa48			bra 	_NSNormaliseOptimise
.aa6f					_NSNormaliseLoop:
.aa6f	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.aa72	70 08		bvs $aa7c			bvs 	_NSNExit 					; exit if so with Z flag clear
.aa74	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; shift mantissa left
.aa77	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.aa7a	80 f3		bra $aa6f			bra 	_NSNormaliseLoop
.aa7c					_NSNExit:
.aa7c	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.aa7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.97d3					AssignNumber:
.97d3	5a		phy				phy
.97d4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.97d7	85 36		sta $36				sta 	zTemp0
.97d9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97dc	85 37		sta $37				sta 	zTemp0+1
.97de	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.97e1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.97e3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97e6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.97e8	c9 08		cmp #$08			cmp 	#NSTFloat
.97ea	f0 2a		beq $9816			beq 	_ANFloat
.97ec	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.97ef	f0 05		beq $97f6			beq		_ANNotFloat
.97f1	e8		inx				inx
.97f2	20 cf a9	jsr $a9cf			jsr 	FloatIntegerPart 			; make it an integer
.97f5	ca		dex				dex
.97f6					_ANNotFloat:
.97f6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.97f9	29 03		and #$03			and 	#3
.97fb	d0 05		bne $9802			bne 	_ANByteWord
.97fd	20 22 98	jsr $9822			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9800	80 1e		bra $9820			bra 	_ANExit
.9802					_ANByteWord:
.9802	48		pha				pha 								; save count
.9803	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9806	92 36		sta ($36)			sta 	(zTemp0)
.9808	68		pla				pla
.9809	c9 01		cmp #$01			cmp	 	#1
.980b	f0 13		beq $9820			beq 	_ANExit
.980d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9810	a0 01		ldy #$01			ldy 	#1
.9812	91 36		sta ($36),y			sta 	(zTemp0),y
.9814	80 0a		bra $9820			bra 	_ANExit
.9816					_ANFloat:
.9816	20 22 98	jsr $9822			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9819	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.981c	a0 04		ldy #$04			ldy 	#4
.981e	91 36		sta ($36),y			sta 	(zTemp0),y
.9820					_ANExit:
.9820	7a		ply				ply
.9821	60		rts				rts
.9822					_ANCopy4PackSign:
.9822	a0 03		ldy #$03			ldy 	#3
.9824	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9827	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9829	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.982c	91 36		sta ($36),y			sta 	(zTemp0),y
.982e	88		dey				dey
.982f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9832	91 36		sta ($36),y			sta 	(zTemp0),y
.9834	88		dey				dey
.9835	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9838	91 36		sta ($36),y			sta 	(zTemp0),y
.983a	88		dey				dey
.983b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.983e	91 36		sta ($36),y			sta 	(zTemp0),y
.9840	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9841					AssignString:
.9841	5a		phy				phy
.9842	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9845	85 38		sta $38				sta 	zTemp1
.9847	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.984a	85 39		sta $39				sta 	zTemp1+1
.984c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.984f	85 36		sta $36				sta 	zTemp0
.9851	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9854	85 37		sta $37				sta 	zTemp0+1
.9856	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9858	b1 36		lda ($36),y			lda 	(zTemp0),y
.985a	f0 23		beq $987f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.985c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.985d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.985f	e9 02		sbc #$02			sbc 	#2
.9861	85 3c		sta $3c				sta 	zsTemp
.9863	a0 01		ldy #$01			ldy 	#1
.9865	b1 36		lda ($36),y			lda 	(zTemp0),y
.9867	e9 00		sbc #$00			sbc 	#0
.9869	85 3d		sta $3d				sta 	zsTemp+1
.986b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.986d					_ASGetLength:
.986d	c8		iny				iny
.986e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9870	d0 fb		bne $986d			bne 	_ASGetLength
.9872	98		tya				tya 								; is this length <= current length
.9873	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9875	90 20		bcc $9897			bcc 	_ASCopyString
.9877	f0 1e		beq $9897			beq 	_ASCopyString
.9879	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.987b	a0 01		ldy #$01			ldy 	#1
.987d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.987f					_ASNewStringRequired:
.987f	e8		inx				inx 								; concrete the new string.
.9880	20 52 af	jsr $af52			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9883	ca		dex				dex
.9884	18		clc				clc
.9885	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9888	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.988a	92 36		sta ($36)			sta 	(zTemp0)
.988c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.988f	69 00		adc #$00			adc 	#0
.9891	a0 01		ldy #$01			ldy 	#1
.9893	91 36		sta ($36),y			sta 	(zTemp0),y
.9895	80 0d		bra $98a4			bra 	_ASExit
.9897					_ASCopyString:
.9897	a0 00		ldy #$00			ldy 	#0
.9899					_ASCopyLoop:
.9899	b1 38		lda ($38),y			lda 	(zTemp1),y
.989b	c8		iny				iny
.989c	c8		iny				iny
.989d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.989f	88		dey				dey
.98a0	c9 00		cmp #$00			cmp 	#0
.98a2	d0 f5		bne $9899			bne 	_ASCopyLoop
.98a4					_ASExit:
.98a4	7a		ply				ply
.98a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.98a6					DereferenceTopTwo:
.98a6	e8		inx				inx
.98a7	20 ab 98	jsr $98ab			jsr 	Dereference 				; deref x+1
.98aa	ca		dex				dex  								; falls through to deref x
.98ab					Dereference:
.98ab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.98ae	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.98b0	f0 57		beq $9909			beq 	_DRFExit 					; not a reference
.98b2	5a		phy				phy
.98b3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.98b6	85 36		sta $36				sta 	zTemp0
.98b8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98bb	85 37		sta $37				sta 	zTemp0+1
.98bd	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.98c0	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.98c2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98c5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.98c8	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.98ca	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.98cc	f0 0f		beq $98dd			beq 	_DRFDereferenceTwo
.98ce	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.98d0	f0 39		beq $990b			beq 	_DRFFull
.98d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.98d5	29 03		and #$03			and 	#3
.98d7	f0 32		beq $990b			beq 	_DRFFull 					; the whole word
.98d9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.98db	f0 07		beq $98e4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.98dd					_DRFDereferenceTwo:
.98dd	a0 01		ldy #$01			ldy 	#1
.98df	b1 36		lda ($36),y			lda 	(zTemp0),y
.98e1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98e4					_DRFClear23:
.98e4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.98e7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98ea	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.98ed	29 18		and #$18			and 	#NSBTypeMask
.98ef	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98f2	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.98f4	d0 12		bne $9908			bne 	_DRFNotString
.98f6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.98f9	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.98fc	d0 0a		bne $9908			bne 	_DRFNotString
.98fe	a9 0a		lda #$0a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9900	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9903	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.9905	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9908					_DRFNotString
.9908	7a		ply				ply 								; restore Y and exit
.9909					_DRFExit:
.9909	60		rts				rts
.990a					_DRFNullString:
>990a	00						.byte 	0
.990b					_DRFFull:
.990b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.990d	b1 36		lda ($36),y			lda 	(zTemp0),y
.990f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9912	c8		iny				iny
.9913	b1 36		lda ($36),y			lda 	(zTemp0),y
.9915	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9918	c8		iny				iny
.9919	b1 36		lda ($36),y			lda 	(zTemp0),y
.991b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.991e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9921	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9924	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9926	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9929	f0 06		beq $9931			beq 	_DRFNoExponent
.992b	c8		iny				iny 								; if not, read the exponent as well.
.992c	b1 36		lda ($36),y			lda 	(zTemp0),y
.992e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9931					_DRFNoExponent:
.9931	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9934	10 0d		bpl $9943			bpl 	_DRFExit2 					; if not, then exit.
.9936	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9938	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.993b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.993e	09 80		ora #$80			ora 	#NSBIsNegative
.9940	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9943					_DRFExit2:
.9943	7a		ply				ply
.9944	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9945					EncodeNumberStart:
.9945	38		sec				sec
.9946	80 01		bra $9949			bra 	EncodeNumberContinue+1
.9948					EncodeNumberContinue:
.9948	18		clc				clc
.9949					EncodeNumber:
.9949	08		php				php 								; save reset.
.994a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.994c	f0 12		beq $9960			beq 	_ENIsOkay
.994e	c9 30		cmp #$30			cmp 	#"0"
.9950	90 04		bcc $9956			bcc 	_ENBadNumber
.9952	c9 3a		cmp #$3a			cmp 	#"9"+1
.9954	90 0a		bcc $9960			bcc 	_ENIsOkay
.9956					_ENBadNumber:
.9956	28		plp				plp 								; throw saved reset
.9957	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.995a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.995c	f0 7e		beq $99dc			beq 	_ENConstructFinal
.995e					_ENFail:
.995e	18		clc				clc 								; not allowed
.995f	60		rts				rts
.9960					_ENIsOkay:
.9960	28		plp				plp 								; are we restarting
.9961	90 15		bcc $9978			bcc 	_ENNoRestart
.9963					_ENStartEncode:
.9963	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9965	f0 0c		beq $9973			beq 	_ENFirstDP
.9967	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9969	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.996c	a9 01		lda #$01			lda 	#ESTA_Low
.996e					_ENExitChange:
.996e	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9971	38		sec				sec
.9972	60		rts				rts
.9973					_ENFirstDP:
.9973	20 45 9f	jsr $9f45			jsr 	NSMSetZero 					; clear integer part
.9976	80 3f		bra $99b7			bra 	_ESTASwitchFloat			; go straight to float and exi
.9978					_ENNoRestart:
.9978	48		pha				pha 								; save on stack.
.9979	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.997c	c9 01		cmp #$01			cmp 	#ESTA_Low
.997e	f0 09		beq $9989			beq  	_ESTALowState
.9980	c9 02		cmp #$02			cmp 	#ESTA_High
.9982	f0 29		beq $99ad			beq 	_ESTAHighState
.9984	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9986	f0 3b		beq $99c3			beq 	_ESTADecimalState
>9988	db						.byte 	$DB 						; causes a break in the emulator
.9989					_ESTALowState:
.9989	68		pla				pla 								; get value back
.998a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.998c	f0 29		beq $99b7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.998e	29 0f		and #$0f			and 	#15 						; make digit
.9990	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9993	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9996	0a		asl a				asl 	a
.9997	0a		asl a				asl 	a
.9998	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.999b	0a		asl a				asl 	a
.999c	6d 86 04	adc $0486			adc 	DigitTemp
.999f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99a2	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.99a4	90 05		bcc $99ab			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.99a6	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.99a8	8d 85 04	sta $0485			sta 	EncodeState
.99ab					_ESTANoSwitch:
.99ab	38		sec				sec
.99ac	60		rts				rts
.99ad					_ESTAHighState:
.99ad	68		pla				pla 								; get value back
.99ae	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.99b0	f0 05		beq $99b7			beq 	_ESTASwitchFloat
.99b2	20 16 9a	jsr $9a16			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.99b5	38		sec				sec
.99b6	60		rts				rts
.99b7					_ESTASwitchFloat:
.99b7	9c 87 04	stz $0487			stz 	DecimalCount
.99ba	e8		inx				inx 								; zero the decimal additive.
.99bb	20 45 9f	jsr $9f45			jsr 	NSMSetZero
.99be	ca		dex				dex
.99bf	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99c1	80 ab		bra $996e			bra 	_ENExitChange
.99c3					_ESTADecimalState:
.99c3	68		pla				pla 								; digit.
.99c4	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99c6	f0 96		beq $995e			beq 	_ENFail
.99c8	e8		inx				inx 								; put digit into fractional part of X+1
.99c9	20 16 9a	jsr $9a16			jsr 	ESTAShiftDigitIntoMantissa
.99cc	ca		dex				dex
.99cd	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.99d0	ad 87 04	lda $0487			lda 	DecimalCount
.99d3	c9 0b		cmp #$0b			cmp 	#11
.99d5	f0 02		beq $99d9			beq 	_ESTADSFail
.99d7	38		sec				sec
.99d8	60		rts				rts
.99d9					_ESTADSFail:
.99d9	4c b2 ac	jmp $acb2			jmp 	RangeError
.99dc					_ENConstructFinal:
.99dc	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.99df	f0 33		beq $9a14			beq 	_ENCFExit 					; no decimals
.99e1	5a		phy				phy
.99e2	0a		asl a				asl 	a 							; x 4 and CLC
.99e3	0a		asl a				asl 	a
.99e4	6d 87 04	adc $0487			adc 	DecimalCount
.99e7	a8		tay				tay
.99e8	b9 71 ac	lda $ac71,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.99eb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.99ee	b9 72 ac	lda $ac72,y			lda 	DecimalScalarTable-5+1,y
.99f1	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.99f4	b9 73 ac	lda $ac73,y			lda 	DecimalScalarTable-5+2,y
.99f7	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.99fa	b9 74 ac	lda $ac74,y			lda 	DecimalScalarTable-5+3,y
.99fd	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9a00	b9 75 ac	lda $ac75,y			lda 	DecimalScalarTable-5+4,y
.9a03	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9a06	a9 08		lda #$08			lda 	#NSTFloat
.9a08	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9a0b	7a		ply				ply
.9a0c	e8		inx				inx 								; multiply decimal const by decimal scalar
.9a0d	20 f9 a9	jsr $a9f9			jsr 	FloatMultiply
.9a10	ca		dex				dex
.9a11	20 8e a8	jsr $a88e			jsr 	FloatAdd 					; add to integer part.
.9a14					_ENCFExit:
.9a14	18		clc				clc 								; reject the digit.
.9a15	60		rts				rts
.9a16					ESTAShiftDigitIntoMantissa:
.9a16	29 0f		and #$0f			and 	#15 						; save digit
.9a18	48		pha				pha
.9a19	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a1c	48		pha				pha
.9a1d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9a20	48		pha				pha
.9a21	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a24	48		pha				pha
.9a25	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a28	48		pha				pha
.9a29	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; x 2
.9a2c	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; x 4
.9a2f	18		clc				clc 								; pop mantissa and add
.9a30	68		pla				pla
.9a31	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a34	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a37	68		pla				pla
.9a38	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9a3b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a3e	68		pla				pla
.9a3f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9a42	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a45	68		pla				pla
.9a46	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9a49	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9a4c	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; x 10
.9a4f	68		pla				pla 								; add digit
.9a50	18		clc				clc
.9a51	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a54	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a57	90 0d		bcc $9a66			bcc 	_ESTASDExit
.9a59	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9a5c	d0 08		bne $9a66			bne 	_ESTASDExit
.9a5e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9a61	d0 03		bne $9a66			bne 	_ESTASDExit
.9a63	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9a66					_ESTASDExit:
.9a66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a67					EvaluateTerm:
.9a67	b1 30		lda ($30),y			lda 	(codePtr),y
.9a69	30 18		bmi $9a83			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9a6b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9a6d	b0 6f		bcs $9ade			bcs 	_ETVariable
.9a6f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9a71	90 6e		bcc $9ae1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9a73	c9 3a		cmp #$3a			cmp 	#'9'+1
.9a75	b0 6a		bcs $9ae1			bcs 	_ETPuncUnary
.9a77	20 45 99	jsr $9945			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9a7a					_ETNumber:
.9a7a	c8		iny				iny 								; keep encoding until we have the numbers
.9a7b	b1 30		lda ($30),y			lda 	(codePtr),y
.9a7d	20 48 99	jsr $9948			jsr 	EncodeNumberContinue
.9a80	b0 f8		bcs $9a7a			bcs 	_ETNumber 					; go back if accepted.
.9a82	60		rts				rts
.9a83					_ETCheckUnary:
.9a83	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9a85	f0 41		beq $9ac8			beq 	_ETString
.9a87	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9a89	f0 12		beq $9a9d			beq 	_ETHexConstant
.9a8b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9a8d	90 0b		bcc $9a9a			bcc 	_ETSyntaxError
.9a8f	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9a91	b0 07		bcs $9a9a			bcs 	_ETSyntaxError
.9a93	da		phx				phx 								; push X on the stack
.9a94	0a		asl a				asl 	a 							; put vector x 2 into X
.9a95	aa		tax				tax
.9a96	c8		iny				iny 								; consume unary function token
.9a97	7c 54 90	jmp ($9054,x)			jmp 	(VectorSet0,x) 				; and do it.
.9a9a					_ETSyntaxError:
.9a9a	4c ad ac	jmp $acad			jmp 	SyntaxError
.9a9d					_ETHexConstant:
.9a9d	c8		iny				iny 								; skip #
.9a9e	c8		iny				iny 								; skip count
.9a9f	20 45 9f	jsr $9f45			jsr 	NSMSetZero 					; clear result
.9aa2					_ETHLoop:
.9aa2	b1 30		lda ($30),y			lda 	(codePtr),y
.9aa4	c8		iny				iny 								; and consume
.9aa5	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9aa7	f0 1e		beq $9ac7			beq 	_ETHExit
.9aa9	48		pha				pha 								; save on stack.
.9aaa	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; x 2
.9aad	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; x 4
.9ab0	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; x 8
.9ab3	20 5a 9f	jsr $9f5a			jsr 	NSMShiftLeft 				; x 16
.9ab6	68		pla				pla 								; ASCII
.9ab7	c9 41		cmp #$41			cmp 	#'A'
.9ab9	90 02		bcc $9abd			bcc 	_ETHNotChar
.9abb	e9 07		sbc #$07			sbc 	#7
.9abd					_ETHNotChar:
.9abd	29 0f		and #$0f			and 	#15 						; digit now
.9abf	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9ac2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ac5	80 db		bra $9aa2			bra 	_ETHLoop 					; go round.
.9ac7					_ETHExit:
.9ac7	60		rts				rts
.9ac8					_ETString:
.9ac8	c8		iny				iny 								; look at length
.9ac9	b1 30		lda ($30),y			lda 	(codePtr),y
.9acb	48		pha				pha
.9acc	c8		iny				iny 								; first character
.9acd	20 8f 9f	jsr $9f8f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9ad0	68		pla				pla 								; restore count and save
.9ad1	85 36		sta $36				sta 	zTemp0
.9ad3	98		tya				tya 								; add length to Y to skip it.
.9ad4	18		clc				clc
.9ad5	65 36		adc $36				adc 	zTemp0
.9ad7	a8		tay				tay
.9ad8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9ada	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9add	60		rts				rts
.9ade					_ETVariable:
.9ade	4c 38 9b	jmp $9b38			jmp 	VariableHandler
.9ae1					_ETPuncUnary:
.9ae1	c8		iny				iny 								; consume the unary character
.9ae2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9ae4	f0 2d		beq $9b13			beq 	_ETUnaryNegate
.9ae6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9ae8	f0 39		beq $9b23			beq 	_ETDereference
.9aea	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9aec	f0 43		beq $9b31			beq 	_ETParenthesis
.9aee	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9af0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9af2	f0 06		beq $9afa			beq 	_ETIndirection
.9af4	e6 36		inc $36				inc 	zTemp0
.9af6	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9af8	d0 a0		bne $9a9a			bne 	_ETSyntaxError
.9afa					_ETIndirection:
.9afa	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9afc	1a		inc a				inc 	a
.9afd	48		pha				pha
.9afe	20 67 9a	jsr $9a67			jsr 	EvaluateTerm				; evaluate the term
.9b01	20 ab 98	jsr $98ab			jsr 	Dereference 				; dereference it.
.9b04	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b07	d0 07		bne $9b10			bne 	_ETTypeMismatch
.9b09	68		pla				pla 								; indirection 1-2
.9b0a	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b0c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b0f	60		rts				rts
.9b10					_ETTypeMismatch:
.9b10	4c b7 ac	jmp $acb7			jmp 	TypeError
.9b13					_ETUnaryNegate:
.9b13	20 67 9a	jsr $9a67			jsr 	EvaluateTerm				; evaluate the term
.9b16	20 ab 98	jsr $98ab			jsr 	Dereference 				; dereference it.
.9b19	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9b1c	29 10		and #$10			and 	#NSTString
.9b1e	d0 f0		bne $9b10			bne 	_ETTypeMismatch
.9b20	4c f1 9e	jmp $9ef1			jmp 	NSMNegate  					; just toggles the sign bit.
.9b23					_ETDereference:
.9b23	20 67 9a	jsr $9a67			jsr 	EvaluateTerm				; evaluate the term
.9b26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9b29	29 20		and #$20			and 	#NSBIsReference
.9b2b	f0 e3		beq $9b10			beq 	_ETTypeMismatch
.9b2d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9b30	60		rts				rts
.9b31					_ETParenthesis:
.9b31	20 96 97	jsr $9796			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b34	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 			; check for )
.9b37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b38					VariableHandler:
.9b38	b1 30		lda ($30),y			lda 	(codePtr),y
.9b3a	18		clc				clc
.9b3b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b3d	85 37		sta $37				sta 	zTemp0+1
.9b3f	c8		iny				iny
.9b40	b1 30		lda ($30),y			lda 	(codePtr),y
.9b42	85 36		sta $36				sta 	zTemp0
.9b44	c8		iny				iny
.9b45	18		clc				clc									; copy variable address+3 to mantissa
.9b46	69 03		adc #$03			adc 	#3
.9b48	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b4b	a5 37		lda $37				lda 	zTemp0+1
.9b4d	69 00		adc #$00			adc 	#0
.9b4f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b52	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9b55	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9b58	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b5b	5a		phy				phy
.9b5c	a0 02		ldy #$02			ldy 	#2 							; read type
.9b5e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b60	7a		ply				ply
.9b61	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b63	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b65	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b68	29 04		and #$04			and 	#NSBIsArray
.9b6a	d0 01		bne $9b6d			bne 	_VHArray
.9b6c	60		rts				rts
.9b6d					_VHArray:
.9b6d	e8		inx				inx
.9b6e	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9b71	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9b73	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b76	b1 30		lda ($30),y			lda 	(codePtr),y
.9b78	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9b7a	d0 06		bne $9b82			bne 	_VHNoSecondIndex
.9b7c	c8		iny				iny 								; skip the comma
.9b7d	e8		inx				inx
.9b7e	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9b81	ca		dex				dex
.9b82					_VHNoSecondIndex:
.9b82	ca		dex				dex 								; set X back.
.9b83	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 			; and check the right bracket.
.9b86	5a		phy				phy 								; save position
.9b87	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9b8a	85 3e		sta $3e				sta 	zaTemp
.9b8c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b8f	85 3f		sta $3f				sta 	zaTemp+1
.9b91	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9b93	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b95	f0 02		beq $9b99			beq 	_VHHas2Mask
.9b97	a9 ff		lda #$ff			lda 	#$FF
.9b99					_VHHas2Mask:
.9b99	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9b9c	f0 54		beq $9bf2			beq 	_VHBadIndex
.9b9e	0a		asl a				asl 	a 							; carry will be set if a second index
.9b9f	90 09		bcc $9baa			bcc 	_VHCheckFirstIndex
.9ba1	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9ba3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ba5	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9ba8	90 48		bcc $9bf2			bcc 	_VHBadIndex
.9baa					_VHCheckFirstIndex:
.9baa	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9bac	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bae	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9bb1	90 3f		bcc $9bf2			bcc 	_VHBadIndex
.9bb3	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9bb5	64 37		stz $37				stz 	zTemp0+1
.9bb7	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9bba	30 0f		bmi $9bcb			bmi 	_VHNoMultiply
.9bbc	da		phx				phx
.9bbd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9bc0	48		pha				pha
.9bc1	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9bc3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bc5	1a		inc a				inc 	a 							; add 1 for zero base
.9bc6	fa		plx				plx
.9bc7	20 49 ab	jsr $ab49			jsr 	Multiply8x8 				; calculate -> Z0
.9bca	fa		plx				plx
.9bcb					_VHNoMultiply:
.9bcb	18		clc				clc
.9bcc	a5 36		lda $36				lda 	zTemp0
.9bce	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9bd1	85 36		sta $36				sta 	zTemp0
.9bd3	a5 37		lda $37				lda 	zTemp0+1
.9bd5	69 00		adc #$00			adc 	#0
.9bd7	85 37		sta $37				sta 	zTemp0+1
.9bd9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9bdc	20 b8 8a	jsr $8ab8			jsr 	ScaleByBaseType
.9bdf	18		clc				clc
.9be0	b2 3e		lda ($3e)			lda 	(zaTemp)
.9be2	65 36		adc $36				adc 	zTemp0
.9be4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9be7	a0 01		ldy #$01			ldy 	#1
.9be9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9beb	65 37		adc $37				adc 	zTemp0+1
.9bed	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bf0	7a		ply				ply 								; restore position
.9bf1	60		rts				rts
.9bf2					_VHBadIndex:
.9bf2	a9 17		lda #$17		lda	#23
.9bf4	4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.aa7f					AbsUnary:
.aa7f	fa		plx				plx 								; restore stack pos
.aa80	20 99 9e	jsr $9e99			jsr 	EvaluateNumber 				; get a float or int
.aa83	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.aa86	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.aa89	29 7f		and #$7f			and 	#$7F
.aa8b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9bf7					AllocUnary:
.9bf7	fa		plx				plx 								; restore stack pos
.9bf8	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger		; get bytes required.
.9bfb	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.9bfe	da		phx				phx 								; save X/Y
.9bff	5a		phy				phy
.9c00	8a		txa				txa 								; copy X into Y
.9c01	a8		tay				tay
.9c02	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9c05	aa		tax				tax
.9c06	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9c09	20 16 9c	jsr $9c16			jsr 	AllocateXABytes 			; allocate memory
.9c0c	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9c0f	8a		txa				txa
.9c10	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9c13	7a		ply				ply
.9c14	fa		plx				plx
.9c15	60		rts				rts
.9c16					AllocateXABytes:
.9c16	5a		phy				phy
.9c17	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c1a	84 36		sty $36				sty 	zTemp0
.9c1c	5a		phy				phy
.9c1d	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9c20	84 37		sty $37				sty 	zTemp0+1
.9c22	5a		phy				phy
.9c23	18		clc				clc 								; add to low memory pointer
.9c24	6d 8c 04	adc $048c			adc 	lowMemPtr
.9c27	8d 8c 04	sta $048c			sta 	lowMemPtr
.9c2a	8a		txa				txa
.9c2b	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9c2e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9c31	b0 2f		bcs $9c62			bcs 	CISSMemory
.9c33	20 54 9c	jsr $9c54			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c36					_ClearMemory:
.9c36	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9c39	c5 36		cmp $36				cmp 	zTemp0
.9c3b	d0 07		bne $9c44			bne 	_CMClearNext
.9c3d	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9c40	c5 37		cmp $37				cmp 	zTemp0+1
.9c42	f0 0c		beq $9c50			beq 	_CMExit
.9c44					_CMClearNext:
.9c44	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c46	92 36		sta ($36)			sta 	(zTemp0)
.9c48	e6 36		inc $36				inc 	zTemp0
.9c4a	d0 ea		bne $9c36			bne 	_ClearMemory
.9c4c	e6 37		inc $37				inc		zTemp0+1
.9c4e	80 e6		bra $9c36			bra 	_ClearMemory
.9c50					_CMExit:
.9c50	fa		plx				plx
.9c51	68		pla				pla
.9c52	7a		ply				ply
.9c53	60		rts				rts
.9c54					CheckIdentifierStringSpace:
.9c54	48		pha				pha
.9c55	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9c58	18		clc				clc
.9c59	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c5b	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9c5e	b0 02		bcs $9c62			bcs 	CISSMemory
.9c60	68		pla				pla
.9c61	60		rts				rts
.9c62					CISSMemory:
.9c62	a9 06		lda #$06		lda	#6
.9c64	4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.aa8f					AscUnary:
.aa8f	fa		plx				plx 								; restore stack pos
.aa90	20 a4 9e	jsr $9ea4			jsr 	EvaluateString 				; get a string
.aa93	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.aa95	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.aa98	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.aa9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.aa9c					FracUnary:
.aa9c	fa		plx				plx 								; restore stack pos
.aa9d	20 99 9e	jsr $9e99			jsr 	EvaluateNumber 				; get a float or int
.aaa0	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.aaa3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aaa6	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aaa8	f0 04		beq $aaae			beq 	_IUZero
.aaaa	20 6c a9	jsr $a96c			jsr 	FloatFractionalPart
.aaad	60		rts				rts
.aaae					_IUZero:
.aaae	20 45 9f	jsr $9f45			jsr 	NSMSetZero
.aab1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.aab2					IntUnary:
.aab2	fa		plx				plx 								; restore stack pos
.aab3	20 99 9e	jsr $9e99			jsr 	EvaluateNumber 				; get a float or int
.aab6	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.aab9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aabc	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aabe	f0 03		beq $aac3			beq 	_IUExit
.aac0	20 cf a9	jsr $a9cf			jsr 	FloatIntegerPart
.aac3					_IUExit:
.aac3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.aac4					LenUnary:
.aac4	fa		plx				plx 								; restore stack pos
.aac5	20 a4 9e	jsr $9ea4			jsr 	EvaluateString 				; get a string
.aac8	5a		phy				phy
.aac9	a0 00		ldy #$00			ldy 	#0 							; find length
.aacb					_LenFind:
.aacb	b1 36		lda ($36),y			lda 	(zTemp0),y
.aacd	f0 06		beq $aad5			beq 	_LenExit
.aacf	c8		iny				iny
.aad0	d0 f9		bne $aacb			bne 	_LenFind
.aad2	4c b2 ac	jmp $acb2			jmp 	RangeError 					; string > 255
.aad5					_LenExit:
.aad5	98		tya				tya
.aad6	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.aad9	7a		ply				ply
.aada	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.aadd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9c67					Unary_Not:
.9c67	fa		plx				plx
.9c68	20 bc 9e	jsr $9ebc			jsr 	EvaluateInteger 			; get integer
.9c6b	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.9c6e	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; zero mantissa ?
.9c71	f0 04		beq $9c77			beq 	_NotZero
.9c73	20 45 9f	jsr $9f45			jsr 	NSMSetZero
.9c76	60		rts				rts
.9c77					_NotZero:
.9c77	4c fa 93	jmp $93fa			jmp 	ReturnTrue
.9c7a					_UNBad:
.9c7a	4c bc ac	jmp $acbc			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9c7d					Unary_Random:
.9c7d	fa		plx				plx
.9c7e	20 f6 9c	jsr $9cf6			jsr 	Random32Bit 				; get a random number
.9c81	20 db 9c	jsr $9cdb			jsr 	URCopyToMantissa  			; put in mantissa
.9c84	e8		inx				inx
.9c85	20 d1 9e	jsr $9ed1			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9c88	ca		dex				dex
.9c89	20 4b a7	jsr $a74b			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9c8c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9c8f	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c92	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.9c95	60		rts				rts
.9c96					Unary_Rnd:
.9c96	fa		plx				plx
.9c97	20 99 9e	jsr $9e99			jsr 	EvaluateNumber 				; number to use.
.9c9a	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 			; closing bracket
.9c9d	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ca0	f0 2b		beq $9ccd			beq 	_URCopySeed
.9ca2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ca5	10 23		bpl $9cca			bpl 	_URDontSeed
.9ca7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9caa	49 17		eor #$17			eor 	#$17
.9cac	8d 88 04	sta $0488			sta 	RandomSeed+0
.9caf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9cb2	49 a5		eor #$a5			eor 	#$A5
.9cb4	8d 89 04	sta $0489			sta 	RandomSeed+1
.9cb7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9cba	49 c2		eor #$c2			eor 	#$C2
.9cbc	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9cbf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9cc2	49 9d		eor #$9d			eor 	#$9D
.9cc4	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9cc7	20 f6 9c	jsr $9cf6			jsr 	Random32Bit
.9cca					_URDontSeed:
.9cca	20 f6 9c	jsr $9cf6			jsr 	Random32Bit 				; generate a number.
.9ccd					_URCopySeed:
.9ccd	20 db 9c	jsr $9cdb			jsr 	URCopyToMantissa 			; copy into mantissa
.9cd0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9cd2	8d 28 04	sta $0428			sta 	NSExponent
.9cd5	a9 08		lda #$08			lda 	#NSTFloat
.9cd7	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9cda	60		rts				rts
.9cdb					URCopyToMantissa:
.9cdb	ad 88 04	lda $0488			lda 	RandomSeed+0
.9cde	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ce1	ad 89 04	lda $0489			lda 	RandomSeed+1
.9ce4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ce7	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9cea	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ced	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9cf0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9cf2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cf5	60		rts				rts
.9cf6					Random32Bit:
.9cf6	5a		phy				phy
.9cf7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9cf9	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9cfc	d0 03		bne $9d01			bne 	_Random1
.9cfe	a8		tay				tay 								; if so do it 256 times
.9cff	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9d01					_Random1:
.9d01	0a		asl a				asl 	a 							; LSFR RNG
.9d02	2e 89 04	rol $0489			rol 	RandomSeed+1
.9d05	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9d08	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9d0b	90 02		bcc $9d0f			bcc 	_Random2
.9d0d	49 c5		eor #$c5			eor 	#$C5
.9d0f					_Random2:
.9d0f	88		dey				dey
.9d10	d0 ef		bne $9d01			bne 	_Random1
.9d12	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d15	7a		ply				ply
.9d16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.aade					SgnUnary:
.aade	fa		plx				plx 								; restore stack pos
.aadf	20 99 9e	jsr $9e99			jsr 	EvaluateNumber 				; get a float or int
.aae2	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.aae5	20 75 9f	jsr $9f75			jsr 	NSMIsZero 					; if zero
.aae8	f0 10		beq $aafa			beq 	_SGZero  					; return Int Zero
.aaea	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.aaed	48		pha				pha
.aaee	a9 01		lda #$01			lda 	#1 							; set to 1
.aaf0	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.aaf3	68		pla				pla
.aaf4	29 80		and #$80			and		#$80 						; copy the sign byte out
.aaf6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aaf9	60		rts				rts
.aafa	20 45 9f	jsr $9f45	_SGZero:jsr 	NSMSetZero
.aafd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.aafe					ValUnary:
.aafe	fa		plx				plx 								; restore stack pos
.aaff	20 14 ab	jsr $ab14			jsr 	ValMainCode 				; do the main val() code
.ab02	b0 01		bcs $ab05			bcs 	_VUError 					; couldn't convert
.ab04	60		rts				rts
.ab05					_VUError:
.ab05	4c b7 ac	jmp $acb7			jmp 	TypeError
.ab08					IsValUnary:
.ab08	fa		plx				plx 								; restore stack pos
.ab09	20 14 ab	jsr $ab14			jsr 	ValMainCode 				; do the main val() code
.ab0c	b0 03		bcs $ab11			bcs 	_VUBad
.ab0e	4c fa 93	jmp $93fa			jmp 	ReturnTrue
.ab11					_VUBad:
.ab11	4c 06 94	jmp $9406			jmp 	ReturnFalse
.ab14					ValMainCode:
.ab14	20 a4 9e	jsr $9ea4			jsr 	EvaluateString 				; get a string
.ab17	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 			; check right bracket present
.ab1a	5a		phy				phy
.ab1b	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ab1d	f0 17		beq $ab36			beq 	_VMCFail2
.ab1f	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ab21	48		pha				pha 								; save first character
.ab22	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ab24	d0 01		bne $ab27			bne 	_VMCStart
.ab26	c8		iny				iny 								; skip over -
.ab27					_VMCStart:
.ab27	38		sec				sec 								; initialise first time round.
.ab28					_VMCNext:
.ab28	c8		iny				iny 								; pre-increment
.ab29	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ab2b	f0 0c		beq $ab39			beq 	_VMCSuccess 				; successful.
.ab2d	20 49 99	jsr $9949			jsr 	EncodeNumber 				; send it to the number-builder
.ab30	90 03		bcc $ab35			bcc 	_VMCFail 					; if failed, give up.
.ab32	18		clc				clc 								; next time round, countinue
.ab33	80 f3		bra $ab28			bra 	_VMCNext
.ab35					_VMCFail:
.ab35	68		pla				pla
.ab36					_VMCFail2:
.ab36	7a		ply				ply
.ab37	38		sec				sec
.ab38	60		rts				rts
.ab39					_VMCSuccess:
.ab39	a9 00		lda #$00			lda 	#0 							; construct final
.ab3b	20 49 99	jsr $9949			jsr 	EncodeNumber
.ab3e	68		pla				pla
.ab3f	c9 2d		cmp #$2d			cmp 	#"-"
.ab41	d0 03		bne $ab46			bne 	_VMCNotNegative
.ab43	20 f1 9e	jsr $9ef1			jsr		NSMNegate
.ab46					_VMCNotNegative:
.ab46	7a		ply				ply
.ab47	18		clc				clc
.ab48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9d17					ChrUnary:
.9d17	fa		plx				plx 								; restore stack pos
.9d18	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger			; get value
.9d1b	48		pha				pha
.9d1c	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.9d1f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9d21	20 d3 af	jsr $afd3			jsr 	StringTempAllocate
.9d24	68		pla				pla 								; write number to it
.9d25	20 11 b0	jsr $b011			jsr 	StringTempWrite
.9d28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9d29					SpcUnary:
.9d29	fa		plx				plx 								; restore stack pos
.9d2a	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger			; get value
.9d2d	5a		phy				phy
.9d2e	48		pha				pha 								; save count
.9d2f	20 d3 af	jsr $afd3			jsr 	StringTempAllocate
.9d32	7a		ply				ply 								; to do count in Y
.9d33					_SpcLoop:
.9d33	c0 00		cpy #$00			cpy 	#0
.9d35	f0 08		beq $9d3f			beq 	_SpcExit
.9d37	a9 20		lda #$20			lda 	#32
.9d39	20 11 b0	jsr $b011			jsr 	StringTempWrite
.9d3c	88		dey				dey
.9d3d	80 f4		bra $9d33			bra 	_SPCLoop
.9d3f					_SpcExit:
.9d3f	7a		ply				ply
.9d40	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket
.9d43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9d44					Unary_Str:
.9d44	fa		plx				plx
.9d45	20 99 9e	jsr $9e99			jsr 	EvaluateNumber  			; get number
.9d48	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 			; closing bracket
.9d4b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9d4d	20 66 9d	jsr $9d66			jsr 	ConvertNumberToString 		; do the conversion.
.9d50	a9 21		lda #$21			lda		#33 						; create buffer
.9d52	20 d3 af	jsr $afd3			jsr 	StringTempAllocate 			; allocate memory
.9d55	da		phx				phx
.9d56	a2 00		ldx #$00			ldx 	#0
.9d58					_USCopy:
.9d58	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d5b	20 11 b0	jsr $b011			jsr 	StringTempWrite
.9d5e	e8		inx				inx
.9d5f	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d62	d0 f4		bne $9d58			bne 	_USCopy
.9d64	fa		plx				plx
.9d65	60		rts				rts
.9d66					ConvertNumberToString:
.9d66	5a		phy				phy 								; save code position
.9d67	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9d6a	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9d6d	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9d70	10 0a		bpl $9d7c			bpl 	_CNTSNotNegative
.9d72	29 7f		and #$7f			and 	#$7F 						; make +ve
.9d74	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d77	a9 2d		lda #$2d			lda 	#"-"
.9d79	20 e2 9d	jsr $9de2			jsr 	WriteDecimalBuffer
.9d7c					_CNTSNotNegative:
.9d7c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9d7f	f0 15		beq $9d96			beq 	_CNTSNotFloat
.9d81	e8		inx				inx 								; round up
.9d82	a9 01		lda #$01			lda 	#1
.9d84	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.9d87	ca		dex				dex
.9d88	bd 28 04	lda $0428,x			lda		NSExponent,x
.9d8b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9d8e	a9 08		lda #$08			lda 	#NSTFloat
.9d90	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d93	20 8e a8	jsr $a88e			jsr 	FloatAdd
.9d96					_CNTSNotFloat:
.9d96	20 c4 9d	jsr $9dc4			jsr 	MakePlusTwoString
.9d99	20 6c a9	jsr $a96c			jsr 	FloatFractionalPart 		; get the fractional part
.9d9c	20 30 aa	jsr $aa30			jsr 	NSNormalise					; normalise , exit if zero
.9d9f	f0 21		beq $9dc2			beq 	_CNTSExit
.9da1	a9 2e		lda #$2e			lda 	#"."
.9da3	20 e2 9d	jsr $9de2			jsr 	WriteDecimalBuffer 			; write decimal place
.9da6					_CNTSDecimal:
.9da6	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9da9	30 17		bmi $9dc2			bmi 	_CNTSExit
.9dab	e8		inx				inx 								; x 10.0
.9dac	a9 0a		lda #$0a			lda 	#10
.9dae	20 47 9f	jsr $9f47			jsr 	NSMSetByte
.9db1	a9 08		lda #$08			lda 	#NSTFloat
.9db3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db6	ca		dex				dex
.9db7	20 f9 a9	jsr $a9f9			jsr 	FloatMultiply
.9dba	20 c4 9d	jsr $9dc4			jsr 	MakePlusTwoString
.9dbd	20 6c a9	jsr $a96c			jsr 	FloatFractionalPart 		; get the fractional part
.9dc0	80 e4		bra $9da6			bra 	_CNTSDecimal 				; keep going.
.9dc2					_CNTSExit:
.9dc2	7a		ply				ply
.9dc3	60		rts				rts
.9dc4					MakePlusTwoString:
.9dc4	da		phx				phx
.9dc5	20 1c 9f	jsr $9f1c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9dc8	e8		inx				inx 								; access it
.9dc9	e8		inx				inx
.9dca	20 cf a9	jsr $a9cf			jsr 	FloatIntegerPart 			; make it an integer
.9dcd	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9dcf	20 38 a8	jsr $a838			jsr 	ConvertInt32
.9dd2	a2 00		ldx #$00			ldx	 	#0
.9dd4					_MPTSCopy:
.9dd4	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9dd7	20 e2 9d	jsr $9de2			jsr 	WriteDecimalBuffer
.9dda	e8		inx				inx
.9ddb	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9dde	d0 f4		bne $9dd4			bne 	_MPTSCopy
.9de0	fa		plx				plx
.9de1	60		rts				rts
.9de2					WriteDecimalBuffer:
.9de2	da		phx				phx
.9de3	ae 95 04	ldx $0495			ldx 	dbOffset
.9de6	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9de9	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9dec	ee 95 04	inc $0495			inc 	dbOffset
.9def	fa		plx				plx
.9df0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9df1					Unary_Left:
.9df1	fa		plx				plx
.9df2	18		clc				clc 								; only one parameter
.9df3	20 68 9e	jsr $9e68			jsr 	SubstringInitial 			; set up.
.9df6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9df9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dfc	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9dff	80 2c		bra $9e2d			bra 	SubstringMain
.9e01					Unary_Right:
.9e01	fa		plx				plx
.9e02	18		clc				clc 								; only one parameter
.9e03	20 68 9e	jsr $9e68			jsr 	SubstringInitial 			; set up.
.9e06	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9e09	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e0c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9e0f	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9e12	b0 02		bcs $9e16			bcs 	_URNotUnderflow
.9e14	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9e16					_URNotUnderFlow:
.9e16	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9e19	80 12		bra $9e2d			bra 	SubStringMain
.9e1b					Unary_Mid:
.9e1b	fa		plx				plx
.9e1c	38		sec				sec 								; two parameters
.9e1d	20 68 9e	jsr $9e68			jsr 	SubstringInitial 			; set up.
.9e20	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9e23	f0 05		beq $9e2a			beq 	_UMError
.9e25	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9e28	80 03		bra $9e2d			bra 	SubStringMain
.9e2a					_UMError:
.9e2a	4c bc ac	jmp $acbc			jmp 	ArgumentError
.9e2d					SubStringMain:
.9e2d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9e30	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9e33	b0 2d		bcs $9e62			bcs 	_SSMNull 					; if so, return an empty string.
.9e35	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9e38	f0 28		beq $9e62			beq 	_SSMNull 					; return empty string.
.9e3a	18		clc				clc 								; add the offset +1 to the address and
.9e3b	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9e3e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9e41	85 36		sta $36				sta 	zTemp0
.9e43	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9e46	69 00		adc #$00			adc 	#0
.9e48	85 37		sta $37				sta 	zTemp0+1
.9e4a					_SSMNoCarry:
.9e4a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9e4d	20 d3 af	jsr $afd3			jsr 	StringTempAllocate 			; allocate that many characters
.9e50	5a		phy				phy 								; save Y
.9e51	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9e53					_SSMCopy:
.9e53	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9e55	f0 09		beq $9e60			beq 	_SSMEString 				; no more to copy
.9e57	20 11 b0	jsr $b011			jsr 	StringTempWrite 			; and write it out.
.9e5a	c8		iny				iny
.9e5b	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9e5e	d0 f3		bne $9e53			bne 	_SSMCopy
.9e60					_SSMEString:
.9e60	7a		ply				ply
.9e61					_SSMExit:
.9e61	60		rts				rts
.9e62					_SSMNull:
.9e62	a9 00		lda #$00			lda 	#0
.9e64	20 d3 af	jsr $afd3			jsr 	StringTempAllocate
.9e67	60		rts				rts
.9e68					SubstringInitial:
.9e68	da		phx				phx 								; save initial stack position
.9e69	08		php				php 								; save carry on stack indicating 2 parameters
.9e6a	20 a4 9e	jsr $9ea4			jsr 	EvaluateString 				; get a string
.9e6d	5a		phy				phy 								; calculate length to exponent.
.9e6e	a0 ff		ldy #$ff			ldy 	#$FF
.9e70					_SIFindLength:
.9e70	c8		iny				iny
.9e71	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e73	d0 fb		bne $9e70			bne 	_SIFindLength
.9e75	98		tya				tya
.9e76	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9e79	7a		ply				ply
.9e7a	e8		inx				inx
.9e7b	20 cf a6	jsr $a6cf			jsr 	CheckComma 					; comma next
.9e7e	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger 		; get next parameter
.9e81	28		plp				plp 								; is it the last parameter ?
.9e82	90 07		bcc $9e8b			bcc 	_SSIExit 					; if so, exit.
.9e84	e8		inx				inx
.9e85	20 cf a6	jsr $a6cf			jsr 	CheckComma 					; comma next
.9e88	20 dd 9e	jsr $9edd			jsr 	Evaluate8BitInteger 		; get last parameter
.9e8b					_SSIExit:
.9e8b	fa		plx				plx
.9e8c	20 c7 a6	jsr $a6c7			jsr 	CheckRightBracket 			; check closing bracket
.9e8f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9e90					EvaluateValue:
.9e90	48		pha				pha
.9e91	20 96 97	jsr $9796			jsr		EvaluateExpression 			; expression
.9e94	20 ab 98	jsr $98ab			jsr 	Dereference					; derefernce it
.9e97	68		pla				pla
.9e98	60		rts				rts
.9e99					EvaluateNumber:
.9e99	20 90 9e	jsr $9e90			jsr 	EvaluateValue 				; get a value
.9e9c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9e9f	29 10		and #$10			and 	#NSBIsString
.9ea1	d0 16		bne $9eb9			bne 	HelperTypeError
.9ea3	60		rts				rts
.9ea4					EvaluateString:
.9ea4	20 90 9e	jsr $9e90			jsr 	EvaluateValue 				; get a value
.9ea7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9eaa	29 10		and #$10			and 	#NSBIsString
.9eac	f0 0b		beq $9eb9			beq 	HelperTypeError
.9eae					CopyAddressToTemp0:
.9eae	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9eb1	85 36		sta $36				sta 	zTemp0
.9eb3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9eb6	85 37		sta $37				sta 	zTemp0+1
.9eb8	60		rts				rts
.9eb9					HelperTypeError:
.9eb9	4c b7 ac	jmp $acb7			jmp 	TypeError
.9ebc					EvaluateInteger:
.9ebc	20 99 9e	jsr $9e99			jsr 	EvaluateNumber
.9ebf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9ec2	d0 0a		bne $9ece			bne 	HelperValueError 			; if not, it's a float.
.9ec4	60		rts				rts
.9ec5					EvaluateUnsignedInteger:
.9ec5	20 bc 9e	jsr $9ebc			jsr 	EvaluateInteger 			; check integer is +ve
.9ec8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ecb	30 01		bmi $9ece			bmi 	HelperValueError
.9ecd	60		rts				rts
.9ece					HelperValueError:
.9ece	4c bc ac	jmp $acbc			jmp 	ArgumentError
.9ed1					Evaluate16BitInteger:
.9ed1	20 c5 9e	jsr $9ec5			jsr	 	EvaluateUnsignedInteger		; get integer
.9ed4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9ed7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9eda	d0 f2		bne $9ece			bne 	HelperValueError
.9edc	60		rts				rts
.9edd					Evaluate8BitInteger:
.9edd	20 c5 9e	jsr $9ec5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9ee0	d0 ec		bne $9ece			bne 	HelperValueError
.9ee2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9ee5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9ee8	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9eeb	d0 e1		bne $9ece			bne 	HelperValueError
.9eed	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ef0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ab49					Multiply8x8:
.ab49	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ab4a	85 36		sta $36			  	sta 	zTemp0
.ab4c	86 37		stx $37				stx 	zTemp0+1
.ab4e	a9 00		lda #$00			lda 	#0
.ab50	a2 08		ldx #$08			ldx 	#8
.ab52					_M88Loop:
.ab52	90 03		bcc $ab57			bcc 	_M88NoAdd
.ab54	18		clc				clc
.ab55	65 37		adc $37				adc 	zTemp0+1
.ab57					_M88NoAdd:
.ab57	6a		ror a				ror 	a
.ab58	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ab5a	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ab5b	d0 f5		bne $ab52			bne 	_M88Loop
.ab5d	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ab5f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9ef1					NSMNegate:
.9ef1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ef4	49 80		eor #$80			eor 	#NSBIsNegative
.9ef6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ef9	60		rts				rts
.9efa					NSMNegateMantissa:
.9efa	38		sec				sec
.9efb	a9 00		lda #$00			lda 	#0
.9efd	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9f00	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f03	a9 00		lda #$00			lda 	#0
.9f05	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9f08	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f0b	a9 00		lda #$00			lda 	#0
.9f0d	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9f10	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f13	a9 00		lda #$00			lda 	#0
.9f15	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9f18	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f1b	60		rts				rts
.9f1c					NSMShiftUpTwo:
.9f1c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f1f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f22	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f25	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f28	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f2b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f2e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f31	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f34	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9f37	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f3a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f3d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f40	60		rts				rts
.9f41					NSMSetZeroMantissaOnly:
.9f41	a9 00		lda #$00			lda 	#0
.9f43	80 08		bra $9f4d			bra 	NSMSetMantissa
.9f45					NSMSetZero:
.9f45	a9 00		lda #$00			lda 	#0
.9f47					NSMSetByte:
.9f47	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9f4a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9f4d					NSMSetMantissa:
.9f4d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9f50	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9f53	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9f56	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f59	60		rts				rts
.9f5a					NSMShiftLeft:
.9f5a	18		clc				clc
.9f5b					NSMRotateLeft:
.9f5b	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9f5e	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9f61	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9f64	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9f67	60		rts				rts
.9f68					NSMShiftRight:
.9f68	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9f6b	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9f6e	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9f71	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9f74	60		rts				rts
.9f75					NSMIsZero:
.9f75	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f78	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9f7b	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9f7e	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9f81	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ab60					Assemble_ora:
.ab60	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab63	01					.byte $01
.ab64					Assemble_and:
.ab64	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab67	21					.byte $21
.ab68					Assemble_eor:
.ab68	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab6b	41					.byte $41
.ab6c					Assemble_adc:
.ab6c	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab6f	61					.byte $61
.ab70					Assemble_sta:
.ab70	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab73	81					.byte $81
.ab74					Assemble_lda:
.ab74	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab77	a1					.byte $a1
.ab78					Assemble_cmp:
.ab78	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab7b	c1					.byte $c1
.ab7c					Assemble_sbc:
.ab7c	20 b7 86	jsr $86b7		jsr	AssembleGroup1
>ab7f	e1					.byte $e1
.ab80					Assemble_asl:
.ab80	20 be 86	jsr $86be		jsr	AssembleGroup2
>ab83	02					.byte $02
>ab84	75					.byte $75
.ab85					Assemble_rol:
.ab85	20 be 86	jsr $86be		jsr	AssembleGroup2
>ab88	22					.byte $22
>ab89	75					.byte $75
.ab8a					Assemble_lsr:
.ab8a	20 be 86	jsr $86be		jsr	AssembleGroup2
>ab8d	42					.byte $42
>ab8e	75					.byte $75
.ab8f					Assemble_ror:
.ab8f	20 be 86	jsr $86be		jsr	AssembleGroup2
>ab92	62					.byte $62
>ab93	75					.byte $75
.ab94					Assemble_stx:
.ab94	20 be 86	jsr $86be		jsr	AssembleGroup2
>ab97	82					.byte $82
>ab98	50					.byte $50
.ab99					Assemble_ldx:
.ab99	20 be 86	jsr $86be		jsr	AssembleGroup2
>ab9c	a2					.byte $a2
>ab9d	d0					.byte $d0
.ab9e					Assemble_dec:
.ab9e	20 be 86	jsr $86be		jsr	AssembleGroup2
>aba1	c2					.byte $c2
>aba2	55					.byte $55
.aba3					Assemble_inc:
.aba3	20 be 86	jsr $86be		jsr	AssembleGroup2
>aba6	e2					.byte $e2
>aba7	55					.byte $55
.aba8					Assemble_stz:
.aba8	20 be 86	jsr $86be		jsr	AssembleGroup2
>abab	60					.byte $60
>abac	44					.byte $44
.abad					Assemble_bit:
.abad	20 be 86	jsr $86be		jsr	AssembleGroup2
>abb0	20					.byte $20
>abb1	55					.byte $55
.abb2					Assemble_sty:
.abb2	20 be 86	jsr $86be		jsr	AssembleGroup2
>abb5	80					.byte $80
>abb6	54					.byte $54
.abb7					Assemble_ldy:
.abb7	20 be 86	jsr $86be		jsr	AssembleGroup2
>abba	a0					.byte $a0
>abbb	d5					.byte $d5
.abbc					Assemble_cpy:
.abbc	20 be 86	jsr $86be		jsr	AssembleGroup2
>abbf	c0					.byte $c0
>abc0	d4					.byte $d4
.abc1					Assemble_cpx:
.abc1	20 be 86	jsr $86be		jsr	AssembleGroup2
>abc4	e0					.byte $e0
>abc5	d0					.byte $d0
.abc6					Assemble_tsb:
.abc6	20 be 86	jsr $86be		jsr	AssembleGroup2
>abc9	00					.byte $00
>abca	50					.byte $50
.abcb					Assemble_trb:
.abcb	20 be 86	jsr $86be		jsr	AssembleGroup2
>abce	10					.byte $10
>abcf	50					.byte $50
.abd0					Assemble_jsr:
.abd0	20 be 86	jsr $86be		jsr	AssembleGroup2
>abd3	14					.byte $14
>abd4	10					.byte $10
.abd5					Assemble_jmp:
.abd5	20 be 86	jsr $86be		jsr	AssembleGroup2
>abd8	40					.byte $40
>abd9	10					.byte $10
.abda					Assemble_bpl:
.abda	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abdd	10					.byte $10
.abde					Assemble_bmi:
.abde	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abe1	30					.byte $30
.abe2					Assemble_bvc:
.abe2	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abe5	50					.byte $50
.abe6					Assemble_bvs:
.abe6	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abe9	70					.byte $70
.abea					Assemble_bcc:
.abea	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abed	90					.byte $90
.abee					Assemble_bcs:
.abee	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abf1	b0					.byte $b0
.abf2					Assemble_bne:
.abf2	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abf5	d0					.byte $d0
.abf6					Assemble_beq:
.abf6	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abf9	f0					.byte $f0
.abfa					Assemble_bra:
.abfa	20 0f 87	jsr $870f		jsr	AssembleGroup3
>abfd	80					.byte $80
.abfe					Assemble_brk:
.abfe	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac01	00					.byte $00
.ac02					Assemble_php:
.ac02	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac05	08					.byte $08
.ac06					Assemble_clc:
.ac06	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac09	18					.byte $18
.ac0a					Assemble_plp:
.ac0a	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac0d	28					.byte $28
.ac0e					Assemble_sec:
.ac0e	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac11	38					.byte $38
.ac12					Assemble_rti:
.ac12	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac15	40					.byte $40
.ac16					Assemble_pha:
.ac16	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac19	48					.byte $48
.ac1a					Assemble_cli:
.ac1a	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac1d	58					.byte $58
.ac1e					Assemble_phy:
.ac1e	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac21	5a					.byte $5a
.ac22					Assemble_rts:
.ac22	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac25	60					.byte $60
.ac26					Assemble_pla:
.ac26	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac29	68					.byte $68
.ac2a					Assemble_sei:
.ac2a	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac2d	78					.byte $78
.ac2e					Assemble_ply:
.ac2e	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac31	7a					.byte $7a
.ac32					Assemble_dey:
.ac32	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac35	88					.byte $88
.ac36					Assemble_txa:
.ac36	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac39	8a					.byte $8a
.ac3a					Assemble_tya:
.ac3a	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac3d	98					.byte $98
.ac3e					Assemble_txs:
.ac3e	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac41	9a					.byte $9a
.ac42					Assemble_tay:
.ac42	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac45	a8					.byte $a8
.ac46					Assemble_tax:
.ac46	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac49	aa					.byte $aa
.ac4a					Assemble_clv:
.ac4a	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac4d	b8					.byte $b8
.ac4e					Assemble_tsx:
.ac4e	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac51	ba					.byte $ba
.ac52					Assemble_iny:
.ac52	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac55	c8					.byte $c8
.ac56					Assemble_dex:
.ac56	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac59	ca					.byte $ca
.ac5a					Assemble_cld:
.ac5a	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac5d	d8					.byte $d8
.ac5e					Assemble_phx:
.ac5e	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac61	da					.byte $da
.ac62					Assemble_stp:
.ac62	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac65	db					.byte $db
.ac66					Assemble_inx:
.ac66	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac69	e8					.byte $e8
.ac6a					Assemble_nop:
.ac6a	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac6d	ea					.byte $ea
.ac6e					Assemble_sed:
.ac6e	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac71	f8					.byte $f8
.ac72					Assemble_plx:
.ac72	20 45 87	jsr $8745		jsr	AssembleGroup4
>ac75	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ac76					DecimalScalarTable:
>ac76	66 66 66 66				.dword $66666666 ; 0.1
>ac7a	de					.byte $de
>ac7b	1f 85 eb 51				.dword $51eb851f ; 0.01
>ac7f	db					.byte $db
>ac80	4c 37 89 41				.dword $4189374c ; 0.001
>ac84	d8					.byte $d8
>ac85	ac 8b db 68				.dword $68db8bac ; 0.0001
>ac89	d4					.byte $d4
>ac8a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ac8e	d1					.byte $d1
>ac8f	83 de 1b 43				.dword $431bde83 ; 1e-06
>ac93	ce					.byte $ce
>ac94	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ac98	ca					.byte $ca
>ac99	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ac9d	c7					.byte $c7
>ac9e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>aca2	c4					.byte $c4
>aca3	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>aca7	c0					.byte $c0
>aca8	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>acac	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.acad					SyntaxError:
.acad	a9 02		lda #$02		lda	#2
.acaf	4c 8d 93	jmp $938d		jmp	ErrorHandler
.acb2					RangeError:
.acb2	a9 04		lda #$04		lda	#4
.acb4	4c 8d 93	jmp $938d		jmp	ErrorHandler
.acb7					TypeError:
.acb7	a9 05		lda #$05		lda	#5
.acb9	4c 8d 93	jmp $938d		jmp	ErrorHandler
.acbc					ArgumentError:
.acbc	a9 07		lda #$07		lda	#7
.acbe	4c 8d 93	jmp $938d		jmp	ErrorHandler
.acc1					NotDoneError:
.acc1	a9 0c		lda #$0c		lda	#12
.acc3	4c 8d 93	jmp $938d		jmp	ErrorHandler
.acc6					ErrorText:
>acc6	42 72 65 61 6b 00			.text	"Break",0
>accc	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>acd4	72 72 6f 72 00
>acd9	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ace1	20 62 79 20 7a 65 72 6f 00
>acea	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>acf2	61 6e 67 65 00
>acf7	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>acff	6d 61 74 63 68 00
>ad05	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ad0d	65 6d 6f 72 79 00
>ad13	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ad1b	61 72 67 75 6d 65 6e 74 00
>ad24	53 74 6f 70 00				.text	"Stop",0
>ad29	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ad31	6f 6f 20 6c 6f 6e 67 00
>ad39	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ad41	6e 20 66 61 69 6c 65 64 00
>ad4a	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ad52	61 74 61 00
>ad56	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ad5e	65 6e 74 65 64 00
>ad64	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ad6c	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ad78	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ad80	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ad8d	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ad95	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ada2	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>adaa	68 6f 75 74 20 57 68 69 6c 65 00
>adb5	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>adbd	68 6f 75 74 20 46 6f 72 00
>adc6	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>adce	61 63 6b 20 66 75 6c 6c 00
>add7	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>addf	75 63 74 75 72 65 00
>ade6	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>adee	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>adfb	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ae03	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ae11	41 72 72 61 79 20 73 69			.text	"Array size",0
>ae19	7a 65 00
>ae1c	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ae24	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ae2c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1161."
>ae34	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>ae44	2e 20 42 75 69 6c 64 20 31 31 36 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ae51					EXTPrintCharacter:
.ae51	48		pha				pha
.ae52	da		phx				phx
.ae53	5a		phy				phy
.ae54	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ae57	7a		ply				ply
.ae58	fa		plx				plx
.ae59	68		pla				pla
.ae5a	60		rts				rts
.ae5b					EXTInputSingleCharacter:
.ae5b	da		phx				phx
.ae5c	5a		phy				phy
.ae5d					_EISCWait:
.ae5d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ae60	c9 00		cmp #$00			cmp 	#0
.ae62	f0 f9		beq $ae5d			beq 	_EISCWait
.ae64	7a		ply				ply
.ae65	fa		plx				plx
.ae66	60		rts				rts
.ae67					EXTInputLine:
.ae67	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ae69					_ILLoop:
.ae69	da		phx				phx 								; read character in
.ae6a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ae6d	fa		plx				plx
.ae6e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ae70	f0 12		beq $ae84			beq 	_ILBackspace
.ae72	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ae74	f0 15		beq $ae8b			beq 	_ILExit
.ae76	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ae78	90 ef		bcc $ae69			bcc 	_ILLoop
.ae7a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ae7c	f0 eb		beq $ae69			beq 	_ILLoop
.ae7e	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ae81	e8		inx				inx
.ae82	80 e5		bra $ae69			bra 	_ILLoop
.ae84					_ILBackspace:
.ae84	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ae86	f0 e1		beq $ae69			beq 	_ILLoop
.ae88	ca		dex				dex 								; back one.
.ae89	80 de		bra $ae69			bra 	_ILLoop
.ae8b					_ILExit:
.ae8b	20 51 ae	jsr $ae51			jsr 	EXTPrintCharacter
.ae8e	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ae91	60		rts				rts
.ae92					EXTBreakCheck:
.ae92	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ae95					MemoryDeleteLine:
.ae95	20 b4 ae	jsr $aeb4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ae98	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ae9a	a8		tay				tay
.ae9b					_MDDLLoop:
.ae9b	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ae9d	92 30		sta ($30)			sta 	(codePtr)
.ae9f	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.aea1	c5 3a		cmp $3a				cmp 	zTemp2
.aea3	d0 07		bne $aeac			bne 	_MDLDLNext
.aea5	a5 31		lda $31				lda 	codePtr+1
.aea7	c5 3b		cmp $3b				cmp 	zTemp2+1
.aea9	d0 01		bne $aeac			bne 	_MDLDLNext
.aeab					_MDDLExit:
.aeab	60		rts				rts
.aeac					_MDLDLNext:
.aeac	e6 30		inc $30				inc 	codePtr						; next byte
.aeae	d0 eb		bne $ae9b			bne 	_MDDLLoop
.aeb0	e6 31		inc $31				inc 	codePtr+1
.aeb2	80 e7		bra $ae9b			bra 	_MDDLLoop
.aeb4					IMemoryFindEnd:
.aeb4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aeb6	85 3a		sta $3a				sta 	0+zTemp2
.aeb8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aeba	85 3b		sta $3b				sta 	1+zTemp2
.aebc					_MDLFELoop:
.aebc	b2 3a		lda ($3a)			lda 	(zTemp2)
.aebe	f0 0b		beq $aecb			beq 	_MDLFEExit
.aec0	18		clc				clc
.aec1	65 3a		adc $3a				adc 	zTemp2
.aec3	85 3a		sta $3a				sta 	zTemp2
.aec5	90 f5		bcc $aebc			bcc 	_MDLFELoop
.aec7	e6 3b		inc $3b				inc 	zTemp2+1
.aec9	80 f1		bra $aebc			bra 	_MDLFELoop
.aecb					_MDLFEExit:
.aecb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.aecc					MemoryInsertLine:
.aecc	08		php				php
.aecd	20 b4 ae	jsr $aeb4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aed0	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.aed2	1a		inc a				inc 	a
.aed3	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.aed5	b0 36		bcs $af0d			bcs 	_MDLIError
.aed7	28		plp				plp
.aed8	90 08		bcc $aee2			bcc 	_MDLIFound
.aeda	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.aedc	85 30		sta $30				sta 	codePtr
.aede	a5 3b		lda $3b				lda 	zTemp2+1
.aee0	85 31		sta $31				sta 	codePtr+1
.aee2					_MDLIFound:
.aee2	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.aee5	a8		tay				tay
.aee6					_MDLIInsert:
.aee6	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.aee8	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aeea	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.aeec	c5 3a		cmp $3a				cmp 	zTemp2
.aeee	d0 06		bne $aef6			bne 	_MDLINext
.aef0	a5 31		lda $31				lda 	codePtr+1
.aef2	c5 3b		cmp $3b				cmp 	zTemp2+1
.aef4	f0 0a		beq $af00			beq 	_MDLIHaveSpace
.aef6					_MDLINext:
.aef6	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.aef8	d0 02		bne $aefc			bne 	_MDLINoBorrow
.aefa	c6 3b		dec $3b				dec 	zTemp2+1
.aefc					_MDLINoBorrow:
.aefc	c6 3a		dec $3a				dec 	zTemp2
.aefe	80 e6		bra $aee6			bra 	_MDLIInsert
.af00					_MDLIHaveSpace:
.af00	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.af03	88		dey				dey 								; from offset-1 to 0
.af04					_MDLICopy:
.af04	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.af07	91 30		sta ($30),y			sta 	(codePtr),y
.af09	88		dey				dey
.af0a	10 f8		bpl $af04			bpl 	_MDLICopy
.af0c	60		rts				rts
.af0d					_MDLIError:
.af0d	a9 06		lda #$06		lda	#6
.af0f	4c 8d 93	jmp $938d		jmp	ErrorHandler
.af12					MDLAppendLine:
.af12	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.af14	85 36		sta $36				sta 	zTemp0
.af16	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af18	85 38		sta $38				sta 	0+zTemp1
.af1a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af1c	85 39		sta $39				sta 	1+zTemp1
.af1e	b2 38		lda ($38)			lda 	(zTemp1)
.af20	d0 0a		bne $af2c			bne 	_MDLANoInitialise
.af22	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af24	8d 55 06	sta $0655			sta 	0+AppendPointer
.af27	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af29	8d 56 06	sta $0656			sta 	1+AppendPointer
.af2c					_MDLANoInitialise:
.af2c	18		clc				clc
.af2d	ad 55 06	lda $0655			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.af30	85 38		sta $38				sta 	zTemp1
.af32	72 36		adc ($36)			adc 	(zTemp0)
.af34	8d 55 06	sta $0655			sta 	AppendPointer
.af37	ad 56 06	lda $0656			lda 	AppendPointer+1
.af3a	85 39		sta $39				sta 	zTemp1+1
.af3c	69 00		adc #$00			adc 	#0
.af3e	8d 56 06	sta $0656			sta 	AppendPointer+1
.af41	a0 00		ldy #$00			ldy 	#0
.af43					_MDLACopy:
.af43	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.af45	91 38		sta ($38),y			sta 	(zTemp1),y
.af47	c8		iny				iny
.af48	98		tya				tya
.af49	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.af4b	d0 f6		bne $af43			bne 	_MDLACopy
.af4d	a9 00		lda #$00			lda 	#0 							; end of program.
.af4f	91 38		sta ($38),y			sta 	(zTemp1),y
.af51	60		rts				rts
.0655					AppendPointer:
>0655							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9f82					MemoryNew:
.9f82	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f84	85 30		sta $30				sta 	codePtr
.9f86	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f88	85 31		sta $31				sta 	codePtr+1
.9f8a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9f8c	92 30		sta ($30)			sta 	(codePtr)
.9f8e	60		rts				rts
.9f8f					MemoryInline:
.9f8f	98		tya				tya 								; put address into stack,x
.9f90	18		clc				clc
.9f91	65 30		adc $30				adc 	codePtr
.9f93	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f96	a5 31		lda $31				lda 	codePtr+1
.9f98	69 00		adc #$00			adc 	#0
.9f9a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f9d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9fa0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9fa3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9fa4					MemorySearch:
.9fa4	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9fa6	86 37		stx $37				stx 	zTemp0+1
.9fa8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9faa	85 30		sta $30				sta 	codePtr
.9fac	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9fae	85 31		sta $31				sta 	codePtr+1
.9fb0					_MTAXLoop:
.9fb0	b2 30		lda ($30)			lda 	(codePtr)
.9fb2	18		clc				clc
.9fb3	f0 21		beq $9fd6			beq 	_MTAXExit 					; reached end, exit with CC.
.9fb5	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9fb7	b1 30		lda ($30),y			lda 	(codePtr),y
.9fb9	38		sec				sec
.9fba	e5 36		sbc $36				sbc 	zTemp0
.9fbc	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9fbe	c8		iny				iny 								; do the MSB
.9fbf	b1 30		lda ($30),y			lda 	(codePtr),y
.9fc1	e5 37		sbc $37				sbc 	zTemp0+1
.9fc3	05 38		ora $38				ora 	zTemp1
.9fc5	f0 0f		beq $9fd6			beq 	_MTAXExit	 				; found
.9fc7	b0 0d		bcs $9fd6			bcs 	_MTAXExit 					; current < required exit
.9fc9	18		clc				clc
.9fca	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9fcc	65 30		adc $30				adc 	codePtr
.9fce	85 30		sta $30				sta 	codePtr
.9fd0	90 02		bcc $9fd4			bcc 	_CREExit
.9fd2	e6 31		inc $31				inc 	codePtr+1
.9fd4					_CREExit:
.9fd4	80 da		bra $9fb0			bra 	_MTAXLoop
.9fd6					_MTAXExit:
.9fd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9fd7					StackPushByte:
.9fd7	48		pha				pha 								; save byte
.9fd8	a5 34		lda $34				lda 	BasicStack
.9fda	d0 09		bne $9fe5			bne 	_SPBNoBorrow
.9fdc	c6 35		dec $35				dec 	BasicStack+1
.9fde	48		pha				pha
.9fdf	a5 35		lda $35				lda 	BasicStack+1
.9fe1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9fe3	90 06		bcc $9feb			bcc 	_SPBMemory
.9fe5					_SPBNoBorrow:
.9fe5	c6 34		dec $34				dec 	BasicStack
.9fe7	68		pla				pla 								; get back and write
.9fe8	92 34		sta ($34)			sta 	(BasicStack)
.9fea	60		rts				rts
.9feb					_SPBMemory:
.9feb	a9 12		lda #$12		lda	#18
.9fed	4c 8d 93	jmp $938d		jmp	ErrorHandler
.9ff0					StackPopByte:
.9ff0	b2 34		lda ($34)			lda 	(BasicStack)
.9ff2	e6 34		inc $34				inc 	BasicStack
.9ff4	d0 02		bne $9ff8			bne 	_SPBNoCarry
.9ff6	e6 35		inc $35				inc 	BasicStack+1
.9ff8					_SPBNoCarry:
.9ff8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9ff9					StackOpen:
.9ff9	48		pha				pha 								; save frame byte
.9ffa	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9ffc	0a		asl a				asl 	a 							; claim twice this for storage
.9ffd	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9fff	38		sec				sec 								; so basically subtracting from
.a000	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a002	85 34		sta $34				sta 	basicStack
.a004	b0 08		bcs $a00e			bcs 	_SONoBorrow
.a006	c6 35		dec $35				dec 	basicStack+1
.a008	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a00a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a00c	90 04		bcc $a012			bcc 	_SOMemory
.a00e					_SONoBorrow:
.a00e	68		pla				pla 								; get marker back and write at TOS
.a00f	92 34		sta ($34)			sta 	(basicStack)
.a011	60		rts				rts
.a012					_SOMemory:
.a012	a9 12		lda #$12		lda	#18
.a014	4c 8d 93	jmp $938d		jmp	ErrorHandler
.a017					StackClose:
.a017	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a019	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a01b	0a		asl a				asl 	a 							; claim twice this.
.a01c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a01e	85 34		sta $34				sta 	basicStack
.a020	90 02		bcc $a024			bcc 	_SCExit
.a022	e6 35		inc $35				inc 	basicStack+1
.a024					_SCExit:
.a024	60		rts				rts
.a025					StackCheckFrame:
.a025	48		pha				pha
.a026					_StackRemoveLocals:
.a026	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a028	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a02a	b0 05		bcs $a031			bcs 	_SCNoLocal
.a02c	20 6e a6	jsr $a66e			jsr 	LocalPopValue
.a02f	80 f5		bra $a026			bra 	_StackRemoveLocals
.a031					_SCNoLocal:
.a031	68		pla				pla
.a032	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a034	29 f0		and #$f0			and 	#$F0 						; check type bits
.a036	d0 01		bne $a039			bne 	_SCFError 					; different, we have structures mixed up
.a038	60		rts				rts
.a039					_SCFError:
.a039	8a		txa				txa 								; report error X
.a03a	4c 8d 93	jmp $938d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a03d					STKSaveCodePosition:
.a03d	5a		phy				phy
.a03e	98		tya				tya 								; save Y
.a03f	a0 05		ldy #$05			ldy 	#5
.a041	91 34		sta ($34),y			sta 	(basicStack),y
.a043	88		dey				dey 								; save Code Pointer
.a044					_STKSaveLoop:
.a044	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a047	91 34		sta ($34),y			sta 	(basicStack),y
.a049	88		dey				dey
.a04a	d0 f8		bne $a044			bne 	_STKSaveLoop
.a04c	7a		ply				ply
.a04d	60		rts				rts
.a04e					STKLoadCodePosition:
.a04e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a050					_STKLoadLoop:
.a050	b1 34		lda ($34),y			lda 	(basicStack),y
.a052	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a055	c8		iny				iny
.a056	c0 05		cpy #$05			cpy 	#5
.a058	d0 f6		bne $a050			bne 	_STKLoadLoop
.a05a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a05c	a8		tay				tay
.a05d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a05e					StackReset:
.a05e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a060	85 34		sta $34				sta 	0+basicStack
.a062	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a064	85 35		sta $35				sta 	1+basicStack
.a066	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a068	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a06a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.af52					StringConcrete:
.af52	5a		phy				phy 								; save position on stack
.af53	20 54 9c	jsr $9c54			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.af56	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.af59	85 38		sta $38				sta 	zTemp1
.af5b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.af5e	85 39		sta $39				sta 	zTemp1+1
.af60	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.af62					_SALength:
.af62	c8		iny				iny
.af63	b1 38		lda ($38),y			lda 	(zTemp1),y
.af65	d0 fb		bne $af62			bne 	_SALength
.af67	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.af69	b0 3f		bcs $afaa			bcs 	_SALengthError
.af6b	98		tya				tya 				 				; length of the new string
.af6c	18		clc				clc
.af6d	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.af6f	90 02		bcc $af73			bcc 	_SAHaveLength
.af71	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.af73					_SAHaveLength:
.af73	48		pha				pha 								; save length.
.af74	38		sec				sec
.af75	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.af77	6d 8e 04	adc $048e			adc 	StringMemory
.af7a	8d 8e 04	sta $048e			sta 	StringMemory
.af7d	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.af7f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.af82	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.af84	6d 8f 04	adc $048f			adc 	StringMemory+1
.af87	8d 8f 04	sta $048f			sta 	StringMemory+1
.af8a	85 3b		sta $3b				sta 	zTemp2+1
.af8c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af8f	68		pla				pla 								; save length-3 (chars allowed) in first byte
.af90	38		sec				sec
.af91	e9 03		sbc #$03			sbc 	#3
.af93	92 3a		sta ($3a)			sta 	(zTemp2)
.af95	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.af97	a0 01		ldy #$01			ldy 	#1
.af99	91 3a		sta ($3a),y			sta 	(zTemp2),y
.af9b					_SACopyNewString:
.af9b	a0 00		ldy #$00			ldy 	#0
.af9d					_SACopyNSLoop:
.af9d	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.af9f	c8		iny				iny 								; write two on in string storage
.afa0	c8		iny				iny
.afa1	91 3a		sta ($3a),y			sta 	(zTemp2),y
.afa3	88		dey				dey 								; this makes it one one.
.afa4	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.afa6	d0 f5		bne $af9d			bne 	_SACopyNSLoop
.afa8	7a		ply				ply
.afa9	60		rts				rts
.afaa					_SALengthError:
.afaa	a9 09		lda #$09		lda	#9
.afac	4c 8d 93	jmp $938d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.afaf					StringSystemInitialise:
.afaf	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.afb1	8d 8e 04	sta $048e			sta 	0+StringMemory
.afb4	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.afb6	8d 8f 04	sta $048f			sta 	1+StringMemory
.afb9	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.afbc	60		rts				rts
.afbd					StringSpaceInitialise:
.afbd	20 54 9c	jsr $9c54			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afc0	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.afc2	8d 90 04	sta $0490			sta 	StringInitialised
.afc5	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.afc8	8d 91 04	sta $0491			sta 	StringTempPointer
.afcb	ad 8f 04	lda $048f			lda 	StringMemory+1
.afce	3a		dec a				dec 	a
.afcf	8d 92 04	sta $0492			sta 	StringTempPointer+1
.afd2	60		rts				rts
.afd3					StringTempAllocate:
.afd3	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.afd5	b0 35		bcs $b00c			bcs 	_STALength
.afd7	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.afda	30 05		bmi $afe1			bmi 	_STAAllocate
.afdc	48		pha				pha 								; save value to subtract.
.afdd	20 bd af	jsr $afbd			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.afe0	68		pla				pla 								; restore it
.afe1					_STAAllocate:
.afe1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.afe3	18		clc				clc  								; deliberate allows one more
.afe4	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.afe7	8d 91 04	sta $0491			sta 	StringTempPointer
.afea	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.afed	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.afef	ad 92 04	lda $0492			lda 	StringTempPointer+1
.aff2	69 ff		adc #$ff			adc 	#$FF
.aff4	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aff7	85 3d		sta $3d				sta 	zsTemp+1
.aff9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.affc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.afff	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b002	a9 10		lda #$10			lda 	#NSTString
.b004	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b007	a9 00		lda #$00			lda 	#0 							; clear the target string
.b009	92 3c		sta ($3c)			sta 	(zsTemp)
.b00b	60		rts				rts
.b00c					_STALength:
.b00c	a9 09		lda #$09		lda	#9
.b00e	4c 8d 93	jmp $938d		jmp	ErrorHandler
.b011					StringTempWrite:
.b011	48		pha				pha
.b012	92 3c		sta ($3c)			sta 	(zsTemp)
.b014	e6 3c		inc $3c				inc 	zsTemp
.b016	d0 02		bne $b01a			bne 	_STWNoCarry
.b018	e6 3d		inc $3d				inc 	zsTemp+1
.b01a					_STWNoCarry:
.b01a	a9 00		lda #$00			lda 	#0
.b01c	92 3c		sta ($3c)			sta 	(zsTemp)
.b01e	68		pla				pla
.b01f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a06b					BackloadProgram:
.a06b	a2 ff		ldx #$ff			ldx 	#$FF
.a06d	20 95 a0	jsr $a095			jsr 	BLReadByte
.a070	30 1f		bmi $a091			bmi 	_BPExit
.a072					_BPCopy:
.a072	e8		inx				inx  								; copy byte in
.a073	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a076	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a079	20 95 a0	jsr $a095			jsr 	BLReadByte 					; read next byte
.a07c	30 0a		bmi $a088			bmi 	_BPEndLine 					; -ve = EOL
.a07e	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a080	d0 02		bne $a084			bne 	_BPNotTab
.a082	a9 20		lda #$20			lda 	#' '
.a084					_BPNotTab:
.a084	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a086	b0 ea		bcs $a072			bcs 	_BPCopy
.a088					_BPEndLine:
.a088	20 be a3	jsr $a3be			jsr 	TokeniseLine 				; tokenise the line.
.a08b	38		sec				sec 								; append not insert
.a08c	20 cc ae	jsr $aecc			jsr 	MemoryInsertLine 			; append to current program
.a08f	80 da		bra $a06b			bra 	BackloadProgram
.a091					_BPExit:
.a091	20 bd 89	jsr $89bd			jsr 	ClearCommand 				; clear variables etc.
.a094	60		rts				rts
.a095					BLReadByte:
.a095					_BLLoad:
.a095	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a098	ee 96 a0	inc $a096			inc 	_BLLoad+1
.a09b	d0 03		bne $a0a0			bne 	_BLNoCarry
.a09d	ee 97 a0	inc $a097			inc 	_BLLoad+2
.a0a0					_BLNoCarry:
.a0a0	c9 00		cmp #$00			cmp 	#0
.a0a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a0a3					TokeniseSearchTable:
.a0a3	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a0a5	85 36		sta $36				sta 	zTemp0
.a0a7	a0 00		ldy #$00			ldy 	#0
.a0a9	a9 80		lda #$80			lda 	#$80 						; token #
.a0ab	85 38		sta $38				sta 	zTemp1
.a0ad					_TSTLoop:
.a0ad	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a0af	30 49		bmi $a0fa			bmi 	_TSTFail 					; -ve = end of table
.a0b1	f0 2e		beq $a0e1			beq 	_TSTNext 					; zero, check next it's a dummy
.a0b3	c8		iny				iny 								; get the hash
.a0b4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0b6	88		dey				dey
.a0b7	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a0ba	d0 25		bne $a0e1			bne 	_TSTNext
.a0bc	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a0bf	38		sec				sec
.a0c0	ed 80 04	sbc $0480			sbc 	identStart
.a0c3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a0c5	d0 1a		bne $a0e1			bne 	_TSTNext
.a0c7	5a		phy				phy 								; save Y , we might fail
.a0c8	c8		iny				iny 								; point to text
.a0c9	c8		iny				iny
.a0ca	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a0cd					_TSTCompareName:
.a0cd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a0d0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a0d2	d0 0c		bne $a0e0			bne 	_TSTNextPullY 				; fail, pullY and do next
.a0d4	e8		inx				inx
.a0d5	c8		iny				iny
.a0d6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a0d9	d0 f2		bne $a0cd			bne 	_TSTCompareName
.a0db	7a		ply				ply 								; throw Y
.a0dc	a5 38		lda $38				lda 	zTemp1 						; get token #
.a0de	38		sec				sec 								; return with CS = passed.
.a0df	60		rts				rts
.a0e0					_TSTNextPullY:
.a0e0	7a		ply				ply 								; restore current, fall through.
.a0e1					_TSTNext:
.a0e1	e6 38		inc $38				inc 	zTemp1 						; token counter
.a0e3	98		tya				tya
.a0e4	18		clc				clc
.a0e5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a0e7	1a		inc a				inc 	a 							; +1
.a0e8	1a		inc a				inc 	a 							; +2
.a0e9	a8		tay				tay
.a0ea	10 c1		bpl $a0ad			bpl 	_TSTLoop 					; if Y < $80 loop back
.a0ec	98		tya				tya 								; add Y to zTemp0 and reset Y
.a0ed	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a0ef	18		clc				clc  								; but have tables > 255 bytes
.a0f0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a0f2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a0f4	90 b7		bcc $a0ad			bcc 	_TSTLoop
.a0f6	e6 37		inc $37				inc 	zTemp0+1
.a0f8	80 b3		bra $a0ad			bra 	_TSTLoop
.a0fa					_TSTFail:
.a0fa	18		clc				clc
.a0fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a0fc					KeywordSet0:
>a0fc	00 65					.text	0,$65,""               ; $80 !0:EOF
>a0fe	00 58					.text	0,$58,""               ; $81 !1:SH1
>a100	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a102	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a108	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a110	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a116	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a11d	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a124	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a12b	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a131	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a139	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a141	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a147	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a14e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a154	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a15c	28
>a15d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a165	28
>a166	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a16c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a172	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a178	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a17f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a185	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a18b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a190	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a194	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a19a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a1a2	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a1a9	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a1b0	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a1b8	43
>a1b9	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a1bf	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a1c5	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a1cc	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a1d2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a1d8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a1dd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a1e3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a1e8	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a1f0	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a1f6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a1fd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a203	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a208	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a20f	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a216	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a21c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a221	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a229	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a22d	ff					.text	$FF
.a22e					KeywordSet1:
>a22e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a230	00 58					.text	0,$58,""               ; $81 !1:SH1
>a232	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a234	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a23c	4c 45
>a23e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a246	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a24d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a252	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a258	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a25d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a265	45
>a266	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a26b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a271	ff					.text	$FF
.a272					KeywordSet2:
>a272	00 65					.text	0,$65,""               ; $80 !0:EOF
>a274	00 58					.text	0,$58,""               ; $81 !1:SH1
>a276	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a278	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a27d	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a282	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a287	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a28c	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a291	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a296	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a29b	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a2a0	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a2a5	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a2aa	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a2af	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a2b4	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a2b9	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a2be	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a2c3	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a2c8	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a2cd	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a2d2	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a2d7	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a2dc	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a2e1	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a2e6	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a2eb	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a2f0	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a2f5	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a2fa	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a2ff	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a304	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a309	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a30e	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a313	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a318	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a31d	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a322	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a327	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a32c	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a331	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a336	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a33b	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a340	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a345	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a34a	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a34f	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a354	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a359	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a35e	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a363	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a368	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a36d	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a372	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a377	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a37c	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a381	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a386	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a38b	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a390	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a395	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a39a	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a39f	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a3a4	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a3a9	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a3ae	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a3b3	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a3b8	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a3bd	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a3be					TokeniseLine:
.a3be	20 46 a5	jsr $a546			jsr 	FixLineBufferCase 			; fix line case
.a3c1	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a3c3	8d a6 04	sta $04a6			sta 	tokenOffset
.a3c6	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a3c9	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a3cc	a2 ff		ldx #$ff			ldx 	#$FF
.a3ce					_TKFindFirst:
.a3ce	e8		inx				inx
.a3cf	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a3d2	f0 79		beq $a44d			beq 	_TKExit
.a3d4	c9 20		cmp #$20			cmp 	#' '
.a3d6	90 f6		bcc $a3ce			bcc 	_TKFindFirst
.a3d8	c9 30		cmp #$30			cmp 	#'0'
.a3da	90 07		bcc $a3e3			bcc 	_TKNoLineNumber
.a3dc	c9 3a		cmp #$3a			cmp 	#'9'+1
.a3de	b0 03		bcs $a3e3			bcs 	_TKNoLineNumber
.a3e0	20 70 a5	jsr $a570			jsr 	TokeniseExtractLineNumber
.a3e3					_TKNoLineNumber:
.a3e3					_TKTokeniseLoop:
.a3e3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a3e6	f0 65		beq $a44d			beq 	_TKExit
.a3e8	e8		inx				inx
.a3e9	c9 20		cmp #$20			cmp 	#' '
.a3eb	f0 f6		beq $a3e3			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a3ed	ca		dex				dex 								; undo last get, A contains character, X is position.
.a3ee	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a3f0	f0 61		beq $a453			beq 	_TKTokeniseIdentifier
.a3f2	c9 41		cmp #$41			cmp 	#'A'
.a3f4	90 04		bcc $a3fa			bcc 	_TKTokenisePunctuation
.a3f6	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a3f8	90 59		bcc $a453			bcc 	_TKTokeniseIdentifier
.a3fa					_TKTokenisePunctuation:
.a3fa	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a3fc	f0 27		beq $a425			beq 	_TKString
.a3fe	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a400	f0 28		beq $a42a			beq 	_TKHexConstant
.a402	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a404	f0 29		beq $a42f			beq 	_TKCheckDouble
.a406	c9 3e		cmp #$3e			cmp 	#'>'
.a408	f0 25		beq $a42f			beq 	_TKCheckDouble
.a40a					_TKStandardPunctuation:
.a40a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a40d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a40f	90 0e		bcc $a41f			bcc 	_TKNoShift
.a411	48		pha				pha 								; save
.a412	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a414	85 36		sta $36				sta 	zTemp0
.a416	68		pla				pla
.a417	29 20		and #$20			and 	#32 						; bit 5
.a419	4a		lsr a				lsr 	a 							; shift into bit 3
.a41a	4a		lsr a				lsr 	a
.a41b	05 36		ora $36				ora 	zTemp0
.a41d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a41f					_TKNoShift:
.a41f	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte 			; write the punctuation character
.a422	e8		inx				inx 								; consume the character
.a423	80 be		bra $a3e3			bra 	_TKTokeniseLoop 			; and loop round again.
.a425					_TKString:
.a425	20 d5 a4	jsr $a4d5			jsr 	TokeniseString
.a428	80 b9		bra $a3e3			bra 	_TKTokeniseLoop
.a42a					_TKHexConstant:
.a42a	20 10 a5	jsr $a510			jsr 	TokeniseHexConstant
.a42d	80 b4		bra $a3e3			bra 	_TKTokeniseLoop
.a42f					_TKCheckDouble:
.a42f	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a432	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a434	90 d4		bcc $a40a			bcc 	_TKStandardPunctuation
.a436	c9 3f		cmp #$3f			cmp 	#'>'+1
.a438	b0 d0		bcs $a40a			bcs 	_TKStandardPunctuation
.a43a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a43d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a43f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a440	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a443	38		sec				sec
.a444	e9 3c		sbc #$3c			sbc 	#'<'
.a446	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a449	e8		inx				inx 								; consume both
.a44a	e8		inx				inx
.a44b	80 96		bra $a3e3			bra 	_TKTokeniseLoop
.a44d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a44f	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a452	60		rts				rts
.a453					_TKTokeniseIdentifier:
.a453	8e 80 04	stx $0480			stx 	identStart 					; save start
.a456	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a459					_TKCheckLoop:
.a459	e8		inx				inx 								; look at next, we know first is identifier.
.a45a	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a45d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a45f	f0 f8		beq $a459			beq 	_TKCheckLoop
.a461	c9 30		cmp #$30			cmp	 	#"0"
.a463	90 0c		bcc $a471			bcc 	_TKEndIdentifier
.a465	c9 3a		cmp #$3a			cmp 	#"9"+1
.a467	90 f0		bcc $a459			bcc 	_TKCheckLoop
.a469	c9 41		cmp #$41			cmp	 	#"A"
.a46b	90 04		bcc $a471			bcc 	_TKEndIdentifier
.a46d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a46f	90 e8		bcc $a459			bcc 	_TKCheckLoop
.a471					_TKEndIdentifier:
.a471	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a474	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a476	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a478	f0 06		beq $a480			beq 	_TKHasTypeCharacter
.a47a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a47c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a47e	d0 07		bne $a487			bne 	_TKNoTypeCharacter
.a480					_TKHasTypeCharacter:
.a480	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a483	e8		inx				inx 								; read next
.a484	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a487					_TKNoTypeCharacter:
.a487	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a489	d0 09		bne $a494			bne 	_TKNoArray
.a48b	e8		inx				inx 								; skip the (
.a48c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a48f	09 04		ora #$04			ora 	#$04
.a491	8d 84 04	sta $0484			sta 	identTypeByte
.a494					_TKNoArray:
.a494	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a497	20 31 a5	jsr $a531			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a49a	a0 a0		ldy #$a0			ldy 	#(KeywordSet0) >> 8
.a49c	a9 fc		lda #$fc			lda 	#(KeywordSet0) & $FF
.a49e	20 a3 a0	jsr $a0a3			jsr 	TokeniseSearchTable
.a4a1	a2 00		ldx #$00			ldx 	#0
.a4a3	b0 1f		bcs $a4c4			bcs 	_TKFoundToken
.a4a5	a0 a2		ldy #$a2			ldy 	#(KeywordSet1) >> 8
.a4a7	a9 2e		lda #$2e			lda 	#(KeywordSet1) & $FF
.a4a9	20 a3 a0	jsr $a0a3			jsr 	TokeniseSearchTable
.a4ac	a2 81		ldx #$81			ldx 	#$81
.a4ae	b0 14		bcs $a4c4			bcs 	_TKFoundToken
.a4b0	a0 a2		ldy #$a2			ldy 	#(KeywordSet2) >> 8
.a4b2	a9 72		lda #$72			lda 	#(KeywordSet2) & $FF
.a4b4	20 a3 a0	jsr $a0a3			jsr 	TokeniseSearchTable
.a4b7	a2 82		ldx #$82			ldx 	#$82
.a4b9	b0 09		bcs $a4c4			bcs 	_TKFoundToken
.a4bb	20 c1 a5	jsr $a5c1			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a4be	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a4c1	4c e3 a3	jmp $a3e3			jmp 	_TKTokeniseLoop 			; and go round again.
.a4c4					_TKFoundToken:
.a4c4	48		pha				pha 								; save token
.a4c5	8a		txa				txa 								; shift in X, is there one ?
.a4c6	f0 03		beq $a4cb			beq 	_TKNoTShift
.a4c8	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte 			; if so, write it out
.a4cb					_TKNoTShift:
.a4cb	68		pla				pla 								; restore and write token
.a4cc	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a4cf	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a4d2	4c e3 a3	jmp $a3e3			jmp 	_TKTokeniseLoop 			; and go round again.
.a4d5					TokeniseString:
.a4d5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a4d7	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a4da	e8		inx				inx									; start of quoted string.
.a4db	da		phx				phx 								; push start of string on top
.a4dc	ca		dex				dex
.a4dd					_TSFindEnd:
.a4dd	e8		inx				inx
.a4de	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a4e1	f0 04		beq $a4e7			beq 	_TSEndOfString
.a4e3	c9 22		cmp #$22			cmp 	#'"'
.a4e5	d0 f6		bne $a4dd			bne 	_TSFindEnd
.a4e7					_TSEndOfString:
.a4e7	7a		ply				ply  								; so now Y is first character, X is character after end.
.a4e8	48		pha				pha 								; save terminating character
.a4e9	20 f1 a4	jsr $a4f1			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a4ec	68		pla				pla 								; terminating character
.a4ed	f0 01		beq $a4f0			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a4ef	e8		inx				inx
.a4f0					_TSNotQuote:
.a4f0	60		rts				rts
.a4f1					TOWriteBlockXY:
.a4f1	86 36		stx $36				stx 	zTemp0 						; write end character
.a4f3	98		tya				tya
.a4f4	49 ff		eor #$ff			eor 	#$FF
.a4f6	38		sec				sec
.a4f7	65 36		adc $36				adc 	zTemp0
.a4f9	1a		inc a				inc 	a 							; one extra for NULL
.a4fa	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a4fd					_TOBlockLoop:
.a4fd	c4 36		cpy $36				cpy 	zTemp0
.a4ff	f0 09		beq $a50a			beq 	_TOBlockExit
.a501	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a504	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a507	c8		iny				iny
.a508	80 f3		bra $a4fd			bra 	_TOBlockLoop
.a50a					_TOBlockExit:
.a50a	a9 00		lda #$00			lda 	#0
.a50c	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a50f	60		rts				rts
.a510					TokeniseHexConstant:
.a510	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a512	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a515	e8		inx				inx									; start of quoted string.
.a516	da		phx				phx 								; push start of constant on top
.a517	ca		dex				dex
.a518					_THFindLoop:
.a518	e8		inx				inx
.a519	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a51c	c9 30		cmp #$30			cmp 	#"0"
.a51e	90 0c		bcc $a52c			bcc 	_THFoundEnd
.a520	c9 3a		cmp #$3a			cmp 	#"9"+1
.a522	90 f4		bcc $a518			bcc 	_THFindLoop
.a524	c9 41		cmp #$41			cmp 	#"A"
.a526	90 04		bcc $a52c			bcc 	_THFoundEnd
.a528	c9 47		cmp #$47			cmp 	#"F"+1
.a52a	90 ec		bcc $a518			bcc 	_THFindLoop
.a52c					_THFoundEnd:
.a52c	7a		ply				ply 								; restore start
.a52d	20 f1 a4	jsr $a4f1			jsr 	TOWriteBlockXY 				; output the block
.a530	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a531					TokeniseCalculateHash:
.a531	da		phx				phx
.a532	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a535	a9 00		lda #$00			lda 	#0
.a537					_TCHLoop:
.a537	18		clc				clc
.a538	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a53b	e8		inx				inx
.a53c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a53f	d0 f6		bne $a537			bne 	_TCHLoop
.a541	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a544	fa		plx				plx
.a545	60		rts				rts
.a546					FixLineBufferCase:
.a546	a2 00		ldx #$00			ldx 	#0
.a548					_FLBCLoop:
.a548	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a54b	f0 22		beq $a56f			beq 	_FLBCExit 					; end of string.
.a54d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a54f	f0 11		beq $a562			beq 	_FLBCInQuotes
.a551	e8		inx				inx
.a552	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a554	90 f2		bcc $a548			bcc 	_FLBCLoop
.a556	c9 7b		cmp #$7b			cmp 	#'z'+1
.a558	b0 ee		bcs $a548			bcs 	_FLBCLoop
.a55a	38		sec				sec 								; make U/C
.a55b	e9 20		sbc #$20			sbc 	#32
.a55d	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a560	80 e6		bra $a548			bra 	_FLBCLoop
.a562					_FLBCInQuotes:
.a562	e8		inx				inx 								; advance
.a563	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a566	f0 07		beq $a56f			beq 	_FLBCExit 					; exit on EOS
.a568	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a56a	d0 f6		bne $a562			bne 	_FLBCInQuotes
.a56c	e8		inx				inx 								; skip over it
.a56d	80 d9		bra $a548			bra 	_FLBCLoop
.a56f					_FLBCExit:
.a56f	60		rts				rts
.a570					TokeniseExtractLineNumber:
.a570	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a573	48		pha				pha
.a574	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a577	48		pha				pha
.a578	20 ae a5	jsr $a5ae			jsr 	_TELNTimes2 				; line # x 4
.a57b	20 ae a5	jsr $a5ae			jsr 	_TELNTimes2 				; line # x 2
.a57e	18		clc				clc 								; add stacked value
.a57f	68		pla				pla
.a580	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a583	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a586	68		pla				pla
.a587	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a58a	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a58d	20 ae a5	jsr $a5ae			jsr 	_TELNTimes2 				; line # x 10
.a590	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a593	e8		inx				inx
.a594	29 0f		and #$0f			and 	#15 						; add to line #
.a596	18		clc				clc
.a597	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a59a	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a59d	90 03		bcc $a5a2			bcc 	_TLENNoCarry
.a59f	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a5a2					_TLENNoCarry:
.a5a2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a5a5	c9 30		cmp #$30			cmp 	#'0'
.a5a7	90 04		bcc $a5ad			bcc 	_TLENExit
.a5a9	c9 3a		cmp #$3a			cmp 	#'9'+1
.a5ab	90 c3		bcc $a570			bcc 	TokeniseExtractLineNumber
.a5ad					_TLENExit:
.a5ad	60		rts				rts
.a5ae					_TELNTimes2:
.a5ae	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a5b1	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a5b4	60		rts				rts
.a5b5					TokeniseWriteByte:
.a5b5	da		phx				phx
.a5b6	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a5b9	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a5bc	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a5bf	fa		plx				plx
.a5c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a5c1					CheckCreateVariableRecord:
.a5c1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a5c3	85 36		sta $36				sta 	0+zTemp0
.a5c5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a5c7	85 37		sta $37				sta 	1+zTemp0
.a5c9					_CCVSearch:
.a5c9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a5cb	f0 2c		beq $a5f9			beq 	_CCVFail
.a5cd	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a5cf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a5d1	cd 83 04	cmp $0483			cmp 	identHash
.a5d4	d0 16		bne $a5ec			bne 	_CCVNext
.a5d6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a5d8	ae 80 04	ldx $0480			ldx 	identStart
.a5db					_CCVCompare:
.a5db	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a5de	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a5e0	e8		inx				inx 								; advance pointers
.a5e1	c8		iny				iny
.a5e2	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a5e3	d0 07		bne $a5ec			bne 	_CCVNext  					; didn't match go to next.
.a5e5	90 f4		bcc $a5db			bcc 	_CCVCompare 				; not finished yet.
.a5e7	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a5ea	f0 41		beq $a62d			beq 	_CCVFound 					; yes, we were successful
.a5ec					_CCVNext:
.a5ec	18		clc				clc
.a5ed	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a5ef	65 36		adc $36				adc 	zTemp0
.a5f1	85 36		sta $36				sta 	zTemp0
.a5f3	90 d4		bcc $a5c9			bcc 	_CCVSearch
.a5f5	e6 37		inc $37				inc 	zTemp0+1
.a5f7	80 d0		bra $a5c9			bra 	_CCVSearch
.a5f9					_CCVFail:
.a5f9	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a5fb	ad 83 04	lda $0483			lda 	identHash
.a5fe	91 36		sta ($36),y			sta 	(zTemp0),y
.a600	c8		iny				iny 								; offset 2 is the type byte
.a601	ad 84 04	lda $0484			lda 	identTypeByte
.a604	91 36		sta ($36),y			sta 	(zTemp0),y
.a606	c8		iny				iny
.a607					_CCVData:
.a607	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a609	91 36		sta ($36),y			sta 	(zTemp0),y
.a60b	c8		iny				iny
.a60c	c0 08		cpy #$08			cpy 	#8
.a60e	90 f7		bcc $a607			bcc 	_CCVData
.a610	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a613					_CCVCopyName:
.a613	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a616	91 36		sta ($36),y			sta 	(zTemp0),y
.a618	e8		inx				inx
.a619	c8		iny				iny
.a61a	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a61d	d0 f4		bne $a613			bne 	_CCVCopyName
.a61f	98		tya				tya 								; patch offset
.a620	92 36		sta ($36)			sta 	(zTemp0)
.a622	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a624	91 36		sta ($36),y			sta 	(zTemp0),y
.a626	88		dey				dey
.a627	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a629	09 80		ora #$80			ora 	#$80
.a62b	91 36		sta ($36),y			sta 	(zTemp0),y
.a62d					_CCVFound:
.a62d	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a62f	38		sec				sec
.a630	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a632	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a634	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a637	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a639	20 b5 a5	jsr $a5b5			jsr 	TokeniseWriteByte
.a63c	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
