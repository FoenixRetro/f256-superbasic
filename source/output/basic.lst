
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Sep 24 08:26:42 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					decimalCount:
>0706							.fill 	1
.0707					tokenOffset:
>0707							.fill 	1
.0708					tokenLineNumber:
>0708							.fill 	2
.070a					tokenBuffer:
>070a							.fill 	253
.0807					lineBuffer:
>0807							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b					KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c					KWD_HEXDOLLARLPAREN                  = $8c; $8c HEX$(
=$8d					KWD_INTLPAREN                        = $8d; $8d INT(
=$8e					KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f					KWD_LEFTDOLLARLPAREN                 = $8f; $8f LEFT$(
=$90					KWD_LENLPAREN                        = $90; $90 LEN(
=$91					KWD_MIDDOLLARLPAREN                  = $91; $91 MID$(
=$92					KWD_NOT                              = $92; $92 NOT
=$93					KWD_PAGE                             = $93; $93 PAGE
=$94					KWD_RIGHTDOLLARLPAREN                = $94; $94 RIGHT$(
=$95					KWD_RNDLPAREN                        = $95; $95 RND(
=$96					KWD_SGNLPAREN                        = $96; $96 SGN(
=$97					KWD_SPCLPAREN                        = $97; $97 SPC(
=$98					KWD_STRDOLLARLPAREN                  = $98; $98 STR$(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_UNTIL                            = $a3; $a3 UNTIL
=$a4					KWD_WEND                             = $a4; $a4 WEND
=$a5					KWD_CALL                             = $a5; $a5 CALL
=$a6					KWD_CLS                              = $a6; $a6 CLS
=$a7					KWD_DATA                             = $a7; $a7 DATA
=$a8					KWD_DIM                              = $a8; $a8 DIM
=$a9					KWD_GOSUB                            = $a9; $a9 GOSUB
=$aa					KWD_GOTO                             = $aa; $aa GOTO
=$ab					KWD_LET                              = $ab; $ab LET
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_THEN                             = $b0; $b0 THEN
=$b1					KWD_TO                               = $b1; $b1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a4					KWC_LAST_STRUCTURE = $a4
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 66 81	jsr $8166			jsr 	NewCommand 					; erase current program
.8016	20 2a 88	jsr $882a			jsr 	BackloadProgram
.8019	4c 7d 81	jmp $817d			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler
>8023							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8024					VectorSetPunc:
>8024	02 82					.word	ShiftLeft                        ; $00 <<
>8026	ff 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8028	f5 8c					.word	BinaryCompareNotEqual            ; $02 <>
>802a	2d 90					.word	SyntaxError                      ; $03 !!3
>802c	2d 90					.word	SyntaxError                      ; $04 ><
>802e	09 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8030	05 82					.word	ShiftRight                       ; $06 >>
>8032	2d 90					.word	SyntaxError                      ; $07 !!7
>8034	2d 90					.word	SyntaxError                      ; $08 !!8
>8036	2d 90					.word	SyntaxError                      ; $09 !!9
>8038	2d 90					.word	SyntaxError                      ; $0a !!10
>803a	2d 90					.word	SyntaxError                      ; $0b !!11
>803c	2d 90					.word	SyntaxError                      ; $0c !!12
>803e	2d 90					.word	SyntaxError                      ; $0d !!13
>8040	2d 90					.word	SyntaxError                      ; $0e !!14
>8042	2d 90					.word	SyntaxError                      ; $0f !!15
>8044	2d 90					.word	SyntaxError                      ; $10 @
>8046	2d 90					.word	SyntaxError                      ; $11 !!17
>8048	2d 90					.word	SyntaxError                      ; $12 !!18
>804a	2d 90					.word	SyntaxError                      ; $13 [
>804c	65 8d					.word	IntegerDivide                    ; $14 \
>804e	2d 90					.word	SyntaxError                      ; $15 ]
>8050	88 83					.word	EorInteger                       ; $16 ^
>8052	2d 90					.word	SyntaxError                      ; $17 _
>8054	2d 90					.word	SyntaxError                      ; $18 `
>8056	2d 90					.word	SyntaxError                      ; $19 !!25
>8058	2d 90					.word	SyntaxError                      ; $1a !!26
>805a	2d 90					.word	SyntaxError                      ; $1b {
>805c	43 83					.word	OraInteger                       ; $1c |
>805e	2d 90					.word	SyntaxError                      ; $1d }
>8060	2d 90					.word	SyntaxError                      ; $1e ~
>8062	2d 90					.word	SyntaxError                      ; $1f [7m<7F>[m
>8064	2d 90					.word	SyntaxError                      ; $20
>8066	2d 90					.word	SyntaxError                      ; $21 !
>8068	2d 90					.word	SyntaxError                      ; $22 "
>806a	2d 90					.word	SyntaxError                      ; $23 #
>806c	2d 90					.word	SyntaxError                      ; $24 $
>806e	b1 8d					.word	IntegerModulus                   ; $25 %
>8070	fe 82					.word	AndInteger                       ; $26 &
>8072	2d 90					.word	SyntaxError                      ; $27 '
>8074	2d 90					.word	SyntaxError                      ; $28 (
>8076	2d 90					.word	SyntaxError                      ; $29 )
>8078	25 8e					.word	MulInteger                       ; $2a *
>807a	98 82					.word	AddInteger                       ; $2b +
>807c	2d 90					.word	SyntaxError                      ; $2c ,
>807e	d3 82					.word	SubInteger                       ; $2d -
>8080	2d 90					.word	SyntaxError                      ; $2e .
>8082	61 8f					.word	FDivideCommand                   ; $2f /
>8084	2d 90					.word	SyntaxError                      ; $30 0
>8086	2d 90					.word	SyntaxError                      ; $31 1
>8088	2d 90					.word	SyntaxError                      ; $32 2
>808a	2d 90					.word	SyntaxError                      ; $33 3
>808c	2d 90					.word	SyntaxError                      ; $34 4
>808e	2d 90					.word	SyntaxError                      ; $35 5
>8090	2d 90					.word	SyntaxError                      ; $36 6
>8092	2d 90					.word	SyntaxError                      ; $37 7
>8094	2d 90					.word	SyntaxError                      ; $38 8
>8096	2d 90					.word	SyntaxError                      ; $39 9
>8098	2d 90					.word	SyntaxError                      ; $3a :
>809a	2d 90					.word	SyntaxError                      ; $3b ;
>809c	e1 8c					.word	BinaryCompareLess                ; $3c <
>809e	d7 8c					.word	BinaryCompareEqual               ; $3d =
>80a0	eb 8c					.word	BinaryCompareGreater             ; $3e >
>80a2	2d 90					.word	SyntaxError                      ; $3f ?
.80a4					VectorSet0:
>80a4	b4 81					.word	EOLCommand                       ; $80 !0:EOF
>80a6	c1 81					.word	Shift1Command                    ; $81 !1:SH1
>80a8	2d 90					.word	SyntaxError                      ; $82 !2:SH2
>80aa	2d 90					.word	SyntaxError                      ; $83 ABS(
>80ac	2d 90					.word	SyntaxError                      ; $84 ALLOC(
>80ae	2d 90					.word	SyntaxError                      ; $85 ASC(
>80b0	2d 90					.word	SyntaxError                      ; $86 CHR$(
>80b2	2d 90					.word	SyntaxError                      ; $87 DEC(
>80b4	d3 8c					.word	UnaryFalse                       ; $88 FALSE
>80b6	2d 90					.word	SyntaxError                      ; $89 FRAC(
>80b8	2d 90					.word	SyntaxError                      ; $8a GETDATE$(
>80ba	2d 90					.word	SyntaxError                      ; $8b GETTIME$(
>80bc	2d 90					.word	SyntaxError                      ; $8c HEX$(
>80be	2d 90					.word	SyntaxError                      ; $8d INT(
>80c0	2d 90					.word	SyntaxError                      ; $8e ISVAL(
>80c2	2d 90					.word	SyntaxError                      ; $8f LEFT$(
>80c4	2d 90					.word	SyntaxError                      ; $90 LEN(
>80c6	2d 90					.word	SyntaxError                      ; $91 MID$(
>80c8	2d 90					.word	SyntaxError                      ; $92 NOT
>80ca	2d 90					.word	SyntaxError                      ; $93 PAGE
>80cc	2d 90					.word	SyntaxError                      ; $94 RIGHT$(
>80ce	2d 90					.word	SyntaxError                      ; $95 RND(
>80d0	2d 90					.word	SyntaxError                      ; $96 SGN(
>80d2	2d 90					.word	SyntaxError                      ; $97 SPC(
>80d4	2d 90					.word	SyntaxError                      ; $98 STR$(
>80d6	c7 8c					.word	UnaryTrue                        ; $99 TRUE
>80d8	2d 90					.word	SyntaxError                      ; $9a VAL(
>80da	2d 90					.word	SyntaxError                      ; $9b FOR
>80dc	2d 90					.word	SyntaxError                      ; $9c IF
>80de	2d 90					.word	SyntaxError                      ; $9d PROC
>80e0	2d 90					.word	SyntaxError                      ; $9e REPEAT
>80e2	2d 90					.word	SyntaxError                      ; $9f WHILE
>80e4	2d 90					.word	SyntaxError                      ; $a0 ENDIF
>80e6	2d 90					.word	SyntaxError                      ; $a1 ENDPROC
>80e8	2d 90					.word	SyntaxError                      ; $a2 NEXT
>80ea	2d 90					.word	SyntaxError                      ; $a3 UNTIL
>80ec	2d 90					.word	SyntaxError                      ; $a4 WEND
>80ee	32 81					.word	CallCommand                      ; $a5 CALL
>80f0	2d 90					.word	SyntaxError                      ; $a6 CLS
>80f2	2d 90					.word	SyntaxError                      ; $a7 DATA
>80f4	2d 90					.word	SyntaxError                      ; $a8 DIM
>80f6	2d 90					.word	SyntaxError                      ; $a9 GOSUB
>80f8	2d 90					.word	SyntaxError                      ; $aa GOTO
>80fa	2d 90					.word	SyntaxError                      ; $ab LET
>80fc	2d 90					.word	SyntaxError                      ; $ac PRINT
>80fe	2d 90					.word	SyntaxError                      ; $ad READ
>8100	70 81					.word	RemCommand                       ; $ae REM
>8102	2d 90					.word	SyntaxError                      ; $af RETURN
>8104	2d 90					.word	SyntaxError                      ; $b0 THEN
>8106	2d 90					.word	SyntaxError                      ; $b1 TO
.8108					VectorSet1:
>8108	2d 90					.word	SyntaxError                      ; $80 !0:EOF
>810a	2d 90					.word	SyntaxError                      ; $81 !1:SH1
>810c	2d 90					.word	SyntaxError                      ; $82 !2:SH2
>810e	24 81					.word	AssertCommand                    ; $83 ASSERT
>8110	3e 81					.word	ClearCommand                     ; $84 CLEAR
>8112	63 81					.word	EndCommand                       ; $85 END
>8114	2d 90					.word	SyntaxError                      ; $86 LIST
>8116	66 81					.word	NewCommand                       ; $87 NEW
>8118	2d 90					.word	SyntaxError                      ; $88 RESTORE
>811a	7d 81					.word	CommandRUN                       ; $89 RUN
>811c	2d 90					.word	SyntaxError                      ; $8a STOP
.811e					VectorSet2:
>811e	2d 90					.word	SyntaxError                      ; $80 !0:EOF
>8120	2d 90					.word	SyntaxError                      ; $81 !1:SH1
>8122	2d 90					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8124					AssertCommand:
.8124	20 14 87	jsr $8714			jsr 	EvaluateInteger 			; the assert test
.8127	20 ca 87	jsr $87ca			jsr 	NSMIsZero 					; exit if result is non zero.
.812a	d0 05		bne $8131			bne 	_ACExit
.812c	a9 0a		lda #$0a		lda	#10
.812e	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8131					_ACExit:
.8131	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8132					CallCommand:
.8132	20 29 87	jsr $8729			jsr 	Evaluate16BitInteger
.8135	ad 10 06	lda $0610			lda 	NSMantissa1
.8138	8d 09 06	sta $0609			sta 	NSMantissa0+1
.813b	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813e					ClearCommand:
.813e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8140	85 36		sta $36				sta 	0+zTemp0
.8142	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8144	85 37		sta $37				sta 	1+zTemp0
.8146					_ClearZeroLoop:
.8146	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8148	f0 18		beq $8162			beq 	_ClearZeroEnd
.814a	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.814c	a9 00		lda #$00			lda 	#0
.814e					_ClearOneVariable:
.814e	91 36		sta ($36),y			sta 	(zTemp0),y
.8150	c8		iny				iny
.8151	c0 08		cpy #$08			cpy 	#8
.8153	d0 f9		bne $814e			bne 	_ClearOneVariable
.8155	18		clc				clc 								; go to the next variable
.8156	b2 36		lda ($36)			lda 	(zTemp0)
.8158	65 36		adc $36				adc 	zTemp0
.815a	85 36		sta $36				sta 	zTemp0
.815c	90 e8		bcc $8146			bcc 	_ClearZeroLoop
.815e	e6 37		inc $37				inc 	zTemp0+1
.8160	80 e4		bra $8146			bra 	_ClearZeroLoop
.8162					_ClearZeroEnd:
.8162	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8163					EndCommand:
.8163	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8166					NewCommand:
.8166	20 d7 87	jsr $87d7			jsr 	MemoryNew
.8169	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.816c	20 3e 81	jsr $813e			jsr 	ClearCommand 				; clear everything.
.816f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8170					RemCommand:
.8170	b1 30		lda ($30),y			lda 	(codePtr),y
.8172	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8174	d0 06		bne $817c			bne 	_RMExit
.8176	c8		iny				iny
.8177	98		tya				tya
.8178	38		sec				sec
.8179	71 30		adc ($30),y			adc 	(codePtr),y
.817b	a8		tay				tay
.817c					_RMExit:
.817c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.817d					CommandRUN:
.817d	20 3e 81	jsr $813e			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8180	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8182	85 30		sta $30				sta 	codePtr
.8184	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8186	85 31		sta $31				sta 	codePtr+1
.8188					RUNNewLine:
.8188	b2 30		lda ($30)			lda 	(codePtr)
.818a	f0 25		beq $81b1			beq 	CRNoProgram         		; no then END.
.818c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.818e	9a		txs				txs
.818f					RUNCodePointerLine:
.818f	a0 02		ldy #$02			ldy 	#2 							; start of program
.8191					_CRIncMainLoop:
.8191	c8		iny				iny
.8192					_CRMainLoop:
.8192	b1 30		lda ($30),y			lda 	(codePtr),y
.8194	10 10		bpl $81a6			bpl 	_CRNotKeyword
.8196	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8198	b0 04		bcs $819e			bcs 	_CRIsKeyword
.819a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.819c	b0 0d		bcs $81ab			bcs		_CRSyntaxError
.819e					_CRIsKeyword:
.819e	c8		iny				iny 								; consume command
.819f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.81a0	aa		tax				tax 								; put in X for vector jump
.81a1	20 ae 81	jsr $81ae			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.81a4	80 ec		bra $8192			bra 	_CRMainLoop 				; and loop round
.81a6					_CRNotKeyword:
.81a6	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81a8	f0 e7		beq $8191			beq 	_CRIncMainLoop
>81aa	db						.byte 	$DB 						; causes a break in the emulator
.81ab					_CRSyntaxError:
.81ab	4c 2d 90	jmp $902d			jmp 	SyntaxError
.81ae					_CRCallVector0:
.81ae	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x)
.81b1					CRNoProgram:
.81b1	4c 63 81	jmp $8163			jmp 	EndCommand
.81b4					EOLCommand:
.81b4	18		clc				clc
.81b5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.81b7	65 30		adc $30				adc 	codePtr
.81b9	85 30		sta $30				sta 	codePtr
.81bb	90 02		bcc $81bf			bcc 	_CREExit
.81bd	e6 31		inc $31				inc 	codePtr+1
.81bf					_CREExit:
.81bf	80 c7		bra $8188			bra 	RunNewLine
.81c1					Shift1Command:
.81c1	b1 30		lda ($30),y			lda 	(codePtr),y
.81c3	c8		iny				iny
.81c4	0a		asl a				asl 	a
.81c5	aa		tax				tax
.81c6	7c 08 81	jmp ($8108,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8cae					CheckRightBracket:
.8cae	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb0	c8		iny				iny
.8cb1	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8cb3	d0 0f		bne $8cc4			bne 	CNAFail
.8cb5	60		rts				rts
.8cb6					CheckComma:
.8cb6	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb8	c8		iny				iny
.8cb9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8cbb	d0 07		bne $8cc4			bne 	CNAFail
.8cbd	60		rts				rts
.8cbe					CheckNextA:
.8cbe	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8cc0	d0 02		bne $8cc4			bne 	CNAFail
.8cc2	c8		iny				iny 								; skip character
.8cc3	60		rts				rts 								; and exit
.8cc4					CNAFail:
.8cc4	4c 2d 90	jmp $902d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8cc7					UnaryTrue:
.8cc7	fa		plx				plx
.8cc8					ReturnTrue:
.8cc8	a9 01		lda #$01			lda 	#1  						; set to 1
.8cca	20 9c 87	jsr $879c			jsr 	NSMSetByte
.8ccd	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8ccf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cd2	60		rts				rts
.8cd3					UnaryFalse:
.8cd3	fa		plx				plx
.8cd4					ReturnFalse:
.8cd4	4c 9a 87	jmp $879a			jmp 	NSMSetZero 					; set it all to zero
.8cd7					BinaryCompareEqual:
.8cd7	fa		plx				plx
.8cd8	20 13 8d	jsr $8d13			jsr 	CompareBaseCode
.8cdb	c9 00		cmp #$00			cmp 	#0
.8cdd	f0 e9		beq $8cc8			beq 	ReturnTrue
.8cdf	80 f3		bra $8cd4			bra 	ReturnFalse
.8ce1					BinaryCompareLess:
.8ce1	fa		plx				plx
.8ce2	20 13 8d	jsr $8d13			jsr 	CompareBaseCode
.8ce5	c9 ff		cmp #$ff			cmp 	#$FF
.8ce7	f0 df		beq $8cc8			beq 	ReturnTrue
.8ce9	80 e9		bra $8cd4			bra 	ReturnFalse
.8ceb					BinaryCompareGreater:
.8ceb	fa		plx				plx
.8cec	20 13 8d	jsr $8d13			jsr 	CompareBaseCode
.8cef	c9 01		cmp #$01			cmp 	#1
.8cf1	f0 d5		beq $8cc8			beq 	ReturnTrue
.8cf3	80 df		bra $8cd4			bra 	ReturnFalse
.8cf5					BinaryCompareNotEqual:
.8cf5	fa		plx				plx
.8cf6	20 13 8d	jsr $8d13			jsr 	CompareBaseCode
.8cf9	c9 00		cmp #$00			cmp 	#0
.8cfb	d0 cb		bne $8cc8			bne 	ReturnTrue
.8cfd	80 d5		bra $8cd4			bra 	ReturnFalse
.8cff					BinaryCompareLessEqual:
.8cff	fa		plx				plx
.8d00	20 13 8d	jsr $8d13			jsr 	CompareBaseCode
.8d03	c9 01		cmp #$01			cmp 	#1
.8d05	d0 c1		bne $8cc8			bne 	ReturnTrue
.8d07	80 cb		bra $8cd4			bra 	ReturnFalse
.8d09					BinaryCompareGreaterEqual:
.8d09	fa		plx				plx
.8d0a	20 13 8d	jsr $8d13			jsr 	CompareBaseCode
.8d0d	c9 ff		cmp #$ff			cmp 	#$FF
.8d0f	d0 b7		bne $8cc8			bne 	ReturnTrue
.8d11	80 c1		bra $8cd4			bra 	ReturnFalse
.8d13					CompareBaseCode:
.8d13	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; make both values if references.
.8d16	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d19	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d1c	29 10		and #$10			and 	#NSTString
.8d1e	d0 36		bne $8d56			bne 	_CBCString
.8d20	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d23	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d26	d0 31		bne $8d59			bne 	_CBCFloat
.8d28	20 5c 8d	jsr $8d5c			jsr 	CompareFixMinusZero
.8d2b	e8		inx				inx
.8d2c	20 5c 8d	jsr $8d5c			jsr 	CompareFixMinusZero
.8d2f	ca		dex				dex
.8d30	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8d33	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d36	10 0b		bpl $8d43			bpl 	_CDCSameSign
.8d38	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8d3b	30 16		bmi $8d53			bmi 	_CBCLess 					; return $FF
.8d3d					_CBCGreater:
.8d3d	a9 01		lda #$01			lda 	#1
.8d3f	60		rts				rts
.8d40					_CBCEqual:
.8d40	a9 00		lda #$00			lda 	#0
.8d42	60		rts				rts
.8d43					_CDCSameSign:
.8d43	20 72 82	jsr $8272			jsr 	SubTopTwoStack 				; unsigned subtract
.8d46	20 ca 87	jsr $87ca			jsr 	NSMIsZero 					; or the mantissa together
.8d49	f0 f5		beq $8d40			beq 	_CBCEqual 					; -0 == 0
.8d4b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8d4e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8d51	10 ea		bpl $8d3d			bpl 	_CBCGreater
.8d53					_CBCLess:
.8d53	a9 ff		lda #$ff			lda 	#$FF
.8d55	60		rts				rts
.8d56					_CBCString:
.8d56	4c c9 81	jmp $81c9			jmp 	CompareStrings
.8d59					_CBCFloat:
.8d59	4c 47 8f	jmp $8f47			jmp 	CompareFloat
.8d5c					CompareFixMinusZero:
.8d5c	20 ca 87	jsr $87ca			jsr 	NSMIsZero
.8d5f	d0 03		bne $8d64			bne 	_CFXMZNotZero
.8d61	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8d64					_CFXMZNotZero:
.8d64	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8d65					IntegerDivide:
.8d65	fa		plx				plx
.8d66	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d69	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d6c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d6d	0a		asl a				asl 	a
.8d6e	10 05		bpl $8d75			bpl 	_NotRef
.8d70	48		pha				pha
.8d71	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d74	68		pla				pla
.8d75					_NotRef:
.8d75	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d77	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d7a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d7d	f0 03		beq $8d82			beq 	_IntegerCode 				; if clear, then we have two integers
.8d7f	4c 37 90	jmp $9037			jmp 	TypeError 					; anything else, type mismatch.
.8d82					_IntegerCode:
.8d82	20 a4 8d	jsr $8da4			jsr 	CheckDivideZero 			; do div zero check
.8d85	20 db 8d	jsr $8ddb			jsr 	Int32Divide 				; do the division
.8d88	20 98 8e	jsr $8e98			jsr 	CalculateSign 				; calculate result sign
.8d8b					NSMCopyPlusTwoToZero:
.8d8b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8d8e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d91	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8d94	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d97	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8d9a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d9d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8da0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8da3	60		rts				rts
.8da4					CheckDivideZero:
.8da4	e8		inx				inx
.8da5	20 ca 87	jsr $87ca			jsr 	NSMIsZero
.8da8	f0 02		beq $8dac			beq 	_CDVError
.8daa	ca		dex				dex
.8dab	60		rts				rts
.8dac					_CDVError:
.8dac	a9 03		lda #$03		lda	#3
.8dae	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8db1					IntegerModulus:
.8db1	fa		plx				plx
.8db2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8db5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8db8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8db9	0a		asl a				asl 	a
.8dba	10 05		bpl $8dc1			bpl 	_NotRef
.8dbc	48		pha				pha
.8dbd	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8dc0	68		pla				pla
.8dc1					_NotRef:
.8dc1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8dc3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8dc6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dc9	f0 03		beq $8dce			beq 	_IntegerCode 				; if clear, then we have two integers
.8dcb	4c 37 90	jmp $9037			jmp 	TypeError 					; anything else, type mismatch.
.8dce					_IntegerCode:
.8dce	20 a4 8d	jsr $8da4			jsr 	CheckDivideZero 			; do div zero check
.8dd1	20 db 8d	jsr $8ddb			jsr 	Int32Divide 				; do the division
.8dd4	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8dd7	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8dda	60		rts				rts
.8ddb					Int32Divide:
.8ddb	48		pha				pha 								; save AXY
.8ddc	5a		phy				phy
.8ddd	20 71 87	jsr $8771			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8de0	20 96 87	jsr $8796			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8de3	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8de5					_I32DivideLoop:
.8de5	e8		inx				inx
.8de6	e8		inx				inx
.8de7	20 af 87	jsr $87af			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8dea	ca		dex				dex
.8deb	ca		dex				dex
.8dec	20 b0 87	jsr $87b0			jsr 	NSMRotateLeft
.8def	20 1b 8e	jsr $8e1b			jsr 	DivideCheckSubtract 		; check if subtract possible
.8df2	90 03		bcc $8df7			bcc 	_I32DivideNoCarryIn
.8df4	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8df7					_I32DivideNoCarryIn:
.8df7	88		dey				dey 								; loop round till division completed.
.8df8	d0 eb		bne $8de5			bne 	_I32DivideLoop
.8dfa	7a		ply				ply 								; restore AXY and exit
.8dfb	68		pla				pla
.8dfc	60		rts				rts
.8dfd					Int32ShiftDivide:
.8dfd	48		pha				pha 								; save AY
.8dfe	5a		phy				phy
.8dff	e8		inx				inx 								; clear S[X+2]
.8e00	e8		inx				inx
.8e01	20 9a 87	jsr $879a			jsr 	NSMSetZero
.8e04	ca		dex				dex
.8e05	ca		dex				dex
.8e06	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8e08					_I32SDLoop:
.8e08	20 1b 8e	jsr $8e1b			jsr 	DivideCheckSubtract 		; check if subtract possible
.8e0b	e8		inx				inx
.8e0c	e8		inx				inx
.8e0d	20 b0 87	jsr $87b0			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8e10	ca		dex				dex
.8e11	ca		dex				dex
.8e12	20 b0 87	jsr $87b0			jsr 	NSMRotateLeft
.8e15	88		dey				dey 	 							; do 31 times
.8e16	d0 f0		bne $8e08			bne 	_I32SDLoop
.8e18	7a		ply				ply 								; restore AY and exit
.8e19	68		pla				pla
.8e1a	60		rts				rts
.8e1b					DivideCheckSubtract:
.8e1b	20 72 82	jsr $8272			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8e1e	b0 04		bcs $8e24			bcs 	_DCSExit 					; if carry set, then could do, exit
.8e20	20 4c 82	jsr $824c			jsr 	AddTopTwoStack 				; add it back in
.8e23	18		clc				clc 								; and return False
.8e24					_DCSExit:
.8e24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8e25					MulInteger:
.8e25	fa		plx				plx
.8e26	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e29	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e2c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e2d	0a		asl a				asl 	a
.8e2e	10 05		bpl $8e35			bpl 	_NotRef
.8e30	48		pha				pha
.8e31	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e34	68		pla				pla
.8e35					_NotRef:
.8e35	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e36	30 0b		bmi $8e43			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e38	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e3b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e3e	f0 06		beq $8e46			beq 	_IntegerCode 				; if clear, then we have two integers
.8e40	4c 94 8f	jmp $8f94			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8e43					_StringData:
.8e43	4c 41 90	jmp $9041			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8e46					_IntegerCode:
.8e46	20 53 8e	jsr $8e53			jsr 	MultiplyShort
.8e49	c9 00		cmp #$00			cmp 	#0
.8e4b	f0 05		beq $8e52			beq 	_MIExit
.8e4d	a9 04		lda #$04		lda	#4
.8e4f	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8e52					_MIExit:
.8e52	60		rts				rts
.8e53					MultiplyShort:
.8e53	5a		phy				phy 								; save Y
.8e54	20 71 87	jsr $8771			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8e57	20 96 87	jsr $8796			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8e5a	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8e5c					_I32MLoop:
.8e5c	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8e5f	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8e62	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8e65	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8e68	f0 28		beq $8e92			beq 	_I32MExit 					; exit if zero
.8e6a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8e6d	29 01		and #$01			and 	#1
.8e6f	f0 0e		beq $8e7f			beq 	_I32MNoAdd
.8e71	20 4c 82	jsr $824c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8e74	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8e77	10 06		bpl $8e7f			bpl 	_I32MNoAdd
.8e79					_I32ShiftRight:
.8e79	20 bd 87	jsr $87bd			jsr 	NSMShiftRight 				; shift S[X] right
.8e7c	c8		iny				iny 								; increment shift count
.8e7d	80 0a		bra $8e89			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8e7f					_I32MNoAdd:
.8e7f	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8e82	70 f5		bvs $8e79			bvs 	_I32ShiftRight 				; instead.
.8e84	e8		inx				inx
.8e85	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8e88	ca		dex				dex
.8e89					_I32MShiftUpper:
.8e89	e8		inx				inx 								; shift S[X+2] right
.8e8a	e8		inx				inx
.8e8b	20 bd 87	jsr $87bd			jsr 	NSMShiftRight
.8e8e	ca		dex				dex
.8e8f	ca		dex				dex
.8e90	80 ca		bra $8e5c			bra 	_I32MLoop 					; try again.
.8e92					_I32MExit:
.8e92	20 98 8e	jsr $8e98			jsr 	CalculateSign
.8e95	98		tya				tya 								; shift in A
.8e96	7a		ply				ply 								; restore Y and exit
.8e97	60		rts				rts
.8e98					CalculateSign:
.8e98	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8e9b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8e9e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ea1	0a		asl a				asl 	a 							; shift bit 7 into carry
.8ea2	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8ea5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.81c9					CompareStrings:
.81c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.81cc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.81cf	29 10		and #$10			and 	#NSBIsString
.81d1	f0 2c		beq $81ff			beq 	_CSTypeError
.81d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.81d6	85 36		sta $36				sta 	zTemp0
.81d8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81db	85 37		sta $37				sta 	zTemp0+1
.81dd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.81e0	85 38		sta $38				sta 	zTemp1
.81e2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.81e5	85 39		sta $39				sta 	zTemp1+1
.81e7	5a		phy				phy 								; save Y so we can access strings
.81e8	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.81ea					_CSLoop:
.81ea	c8		iny				iny
.81eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.81ed	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.81ef	d0 06		bne $81f7			bne 	_CSDifferent
.81f1	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.81f3	d0 f5		bne $81ea			bne 	_CSLoop 					; still comparing
.81f5					_CSExit:
.81f5	7a		ply				ply 								; reached end, return zero in A from EOS
.81f6	60		rts				rts
.81f7					_CSDifferent:
.81f7	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.81f9	90 fa		bcc $81f5			bcc		_CSExit
.81fb	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.81fd	80 f6		bra $81f5			bra 	_CSExit
.81ff					_CSTypeError:
.81ff	4c 37 90	jmp $9037			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.8202					ShiftLeft:
.8202	38		sec				sec
.8203	80 01		bra $8206			bra 	ShiftMain
.8205					ShiftRight:
.8205	18		clc				clc
.8206					ShiftMain:
.8206	fa		plx				plx 								; restore X
.8207	08		php				php 								; save direction
.8208	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.820b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.820e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.820f	0a		asl a				asl 	a
.8210	10 05		bpl $8217			bpl 	_NotRef
.8212	48		pha				pha
.8213	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8216	68		pla				pla
.8217					_NotRef:
.8217	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8219	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.821c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.821f	f0 03		beq $8224			beq 	_IntegerCode 				; if clear, then we have two integers
.8221	4c 37 90	jmp $9037			jmp 	TypeError 					; anything else, type mismatch.
.8224					_IntegerCode:
.8224	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8227	29 e0		and #$e0			and 	#$E0
.8229	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.822c	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.822f	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8232	d0 13		bne $8247			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8234					_SMLoop:
.8234	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8237	30 11		bmi $824a			bmi 	_SMExit 					; exit if done.
.8239	28		plp				plp 								; restore direcition setting
.823a	08		php				php
.823b	90 05		bcc $8242			bcc 	_SMRight
.823d	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; shift left if CS
.8240	80 f2		bra $8234			bra 	_SMLoop
.8242					_SMRight:
.8242	20 bd 87	jsr $87bd			jsr 	NSMShiftRight 				; shift right if CC
.8245	80 ed		bra $8234			bra 	_SMLoop
.8247					_SMExit0:
.8247	20 9a 87	jsr $879a			jsr 	NSMSetZero 					; return zero.
.824a					_SMExit:
.824a	28		plp				plp 								; throw direction
.824b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.824c					AddTopTwoStack:
.824c	18		clc				clc
.824d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8250	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8253	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8256	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8259	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.825c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.825f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8262	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8265	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8268	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.826b	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.826e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8271	60		rts				rts
.8272					SubTopTwoStack:
.8272	38		sec				sec
.8273	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8276	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8279	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.827c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.827f	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8282	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8285	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8288	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.828b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.828e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8291	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8294	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8297	60		rts				rts
.8298					AddInteger:
.8298	fa		plx				plx
.8299	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.829c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.829f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82a0	0a		asl a				asl 	a
.82a1	10 05		bpl $82a8			bpl 	_NotRef
.82a3	48		pha				pha
.82a4	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82a7	68		pla				pla
.82a8					_NotRef:
.82a8	0a		asl a				asl 	a 							; put MSB of type into A:7
.82a9	30 0b		bmi $82b6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82ab	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82ae	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82b1	f0 06		beq $82b9			beq 	_IntegerCode 				; if clear, then we have two integers
.82b3	4c a6 8e	jmp $8ea6			jmp 	FloatingPointAdd 							; otherwise at least one float.
.82b6					_StringData:
.82b6	4c 41 90	jmp $9041			jmp 	NotDoneError							; at least one string - don't know both are strings.
.82b9					_IntegerCode:
.82b9					AddCode:
.82b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.82bc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.82bf	10 8b		bpl $824c			bpl 	AddTopTwoStack
.82c1	20 72 82	jsr $8272			jsr 	SubTopTwoStack 				; do a physical subtraction
.82c4	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.82c7	10 09		bpl $82d2			bpl 	_AddExit
.82c9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.82cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cf	20 4f 87	jsr $874f			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.82d2					_AddExit:
.82d2	60		rts				rts
.82d3					SubInteger:
.82d3	fa		plx				plx
.82d4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82d7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82da	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82db	0a		asl a				asl 	a
.82dc	10 05		bpl $82e3			bpl 	_NotRef
.82de	48		pha				pha
.82df	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82e2	68		pla				pla
.82e3					_NotRef:
.82e3	0a		asl a				asl 	a 							; put MSB of type into A:7
.82e4	30 0b		bmi $82f1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82e6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82e9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82ec	f0 06		beq $82f4			beq 	_IntegerCode 				; if clear, then we have two integers
.82ee	4c ab 8e	jmp $8eab			jmp 	FloatingPointSub 							; otherwise at least one float.
.82f1					_StringData:
.82f1	4c 41 90	jmp $9041			jmp 	NotDoneError							; at least one string - don't know both are strings.
.82f4					_IntegerCode:
.82f4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.82f7	49 80		eor #$80			eor 	#$80
.82f9	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.82fc	80 bb		bra $82b9			bra 	AddCode 					; and do the same code as add.
.82fe					AndInteger:
.82fe	fa		plx				plx
.82ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8302	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8305	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8306	0a		asl a				asl 	a
.8307	10 05		bpl $830e			bpl 	_NotRef
.8309	48		pha				pha
.830a	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.830d	68		pla				pla
.830e					_NotRef:
.830e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8310	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8313	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8316	f0 03		beq $831b			beq 	_IntegerCode 				; if clear, then we have two integers
.8318	4c 37 90	jmp $9037			jmp 	TypeError 					; anything else, type mismatch.
.831b					_IntegerCode:
.831b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.831e	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8321	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8324	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8327	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.832a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.832d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8330	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8333	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8336	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8339	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.833c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.833f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8342	60		rts				rts
.8343					OraInteger:
.8343	fa		plx				plx
.8344	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8347	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.834a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.834b	0a		asl a				asl 	a
.834c	10 05		bpl $8353			bpl 	_NotRef
.834e	48		pha				pha
.834f	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8352	68		pla				pla
.8353					_NotRef:
.8353	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8355	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8358	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.835b	f0 03		beq $8360			beq 	_IntegerCode 				; if clear, then we have two integers
.835d	4c 37 90	jmp $9037			jmp 	TypeError 					; anything else, type mismatch.
.8360					_IntegerCode:
.8360	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8363	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8366	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8369	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.836c	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.836f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8372	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8375	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8378	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.837b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.837e	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8381	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8384	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8387	60		rts				rts
.8388					EorInteger:
.8388	fa		plx				plx
.8389	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.838c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.838f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8390	0a		asl a				asl 	a
.8391	10 05		bpl $8398			bpl 	_NotRef
.8393	48		pha				pha
.8394	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8397	68		pla				pla
.8398					_NotRef:
.8398	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.839a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.839d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a0	f0 03		beq $83a5			beq 	_IntegerCode 				; if clear, then we have two integers
.83a2	4c 37 90	jmp $9037			jmp 	TypeError 					; anything else, type mismatch.
.83a5					_IntegerCode:
.83a5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83a8	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.83ab	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83ae	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83b1	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.83b4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83b7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83ba	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.83bd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83c0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83c3	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.83c6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83c9	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.83cd					PrecedenceLevel:
>83cd	04					.byte	 4	; $00 <<
>83ce	02					.byte	 2	; $01 <=
>83cf	02					.byte	 2	; $02 <>
>83d0	00					.byte	 0	; $03 !!3
>83d1	00					.byte	 0	; $04 ><
>83d2	02					.byte	 2	; $05 >=
>83d3	04					.byte	 4	; $06 >>
>83d4	00					.byte	 0	; $07 !!7
>83d5	00					.byte	 0	; $08 !!8
>83d6	00					.byte	 0	; $09 !!9
>83d7	00					.byte	 0	; $0a !!10
>83d8	00					.byte	 0	; $0b !!11
>83d9	00					.byte	 0	; $0c !!12
>83da	00					.byte	 0	; $0d !!13
>83db	00					.byte	 0	; $0e !!14
>83dc	00					.byte	 0	; $0f !!15
>83dd	00					.byte	 0	; $10 @
>83de	00					.byte	 0	; $11 !!17
>83df	00					.byte	 0	; $12 !!18
>83e0	00					.byte	 0	; $13 [
>83e1	04					.byte	 4	; $14 \
>83e2	00					.byte	 0	; $15 ]
>83e3	01					.byte	 1	; $16 ^
>83e4	00					.byte	 0	; $17 _
>83e5	00					.byte	 0	; $18 `
>83e6	00					.byte	 0	; $19 !!25
>83e7	00					.byte	 0	; $1a !!26
>83e8	00					.byte	 0	; $1b {
>83e9	01					.byte	 1	; $1c |
>83ea	00					.byte	 0	; $1d }
>83eb	00					.byte	 0	; $1e ~
>83ec	00					.byte	 0	; $1f [7m<7F>[m
>83ed	00					.byte	 0	; $20
>83ee	05					.byte	 5	; $21 !
>83ef	00					.byte	 0	; $22 "
>83f0	00					.byte	 0	; $23 #
>83f1	05					.byte	 5	; $24 $
>83f2	04					.byte	 4	; $25 %
>83f3	01					.byte	 1	; $26 &
>83f4	00					.byte	 0	; $27 '
>83f5	00					.byte	 0	; $28 (
>83f6	00					.byte	 0	; $29 )
>83f7	04					.byte	 4	; $2a *
>83f8	03					.byte	 3	; $2b +
>83f9	00					.byte	 0	; $2c ,
>83fa	03					.byte	 3	; $2d -
>83fb	00					.byte	 0	; $2e .
>83fc	04					.byte	 4	; $2f /
>83fd	00					.byte	 0	; $30 0
>83fe	00					.byte	 0	; $31 1
>83ff	00					.byte	 0	; $32 2
>8400	00					.byte	 0	; $33 3
>8401	00					.byte	 0	; $34 4
>8402	00					.byte	 0	; $35 5
>8403	00					.byte	 0	; $36 6
>8404	00					.byte	 0	; $37 7
>8405	00					.byte	 0	; $38 8
>8406	00					.byte	 0	; $39 9
>8407	00					.byte	 0	; $3a :
>8408	00					.byte	 0	; $3b ;
>8409	02					.byte	 2	; $3c <
>840a	02					.byte	 2	; $3d =
>840b	02					.byte	 2	; $3e >
>840c	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.840d					EvaluateExpressionAt0:
.840d	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.840f					EvaluateExpression:
.840f	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8411					EvaluateExpressionAtPrecedence:
.8411	48		pha				pha 								; save precedence level
.8412	20 02 86	jsr $8602			jsr 	EvaluateTerm 				; evaluate term into level X.
.8415	68		pla				pla 								; restore precedence level.
.8416					_EXPRLoop:
.8416	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.841c	b0 25		bcs $8443			bcs 	_EXPRExit
.841e	da		phx				phx 								; read the operator precedence
.841f	aa		tax				tax
.8420	bd cd 83	lda $83cd,x			lda 	PrecedenceLevel,x
.8423	fa		plx				plx
.8424	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8426	f0 1b		beq $8443			beq 	_EXPRExit
.8428	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.842a	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.842c	c5 37		cmp $37				cmp 	zTemp0+1
.842e	b0 13		bcs $8443			bcs		_EXPRExit 					; if current >= operator exit
.8430	48		pha				pha 								; save current precedence.
.8431	b1 30		lda ($30),y			lda 	(codePtr),y
.8433	c8		iny				iny
.8434	48		pha				pha
.8435	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8437	e8		inx				inx 								; work out the right hand side.
.8438	20 11 84	jsr $8411			jsr 	EvaluateExpressionAtPrecedence
.843b	ca		dex				dex
.843c	68		pla				pla 								; get operator, call the code.
.843d	20 46 84	jsr $8446			jsr 	_EXPRCaller
.8440	68		pla				pla 								; restore precedence level
.8441	80 d3		bra $8416			bra 	_EXPRLoop 					; and go round.
.8443					_EXPRExit:
.8443	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8445	60		rts				rts
.8446					_EXPRCaller:
.8446	da		phx				phx 								; save on stack, first thing is to restore it
.8447	0a		asl a				asl 	a 							; double so can use vectors into X
.8448	aa		tax				tax
.8449	7c 24 80	jmp ($8024,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8ea6					FloatingPointAdd:
.8ea6	20 bd 8f	jsr $8fbd			jsr 	FloatPrepare 				; prepare for floats
.8ea9	80 0b		bra $8eb6			bra 	FloatAdd
.8eab					FloatingPointSub:
.8eab	20 bd 8f	jsr $8fbd			jsr 	FloatPrepare 				; prepare for floats
.8eae					FloatSubtract:
.8eae	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.8eb1	49 80		eor #$80			eor 	#$80
.8eb3	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.8eb6					FloatAdd:
.8eb6	48		pha				pha
.8eb7	5a		phy				phy
.8eb8	20 ce 8f	jsr $8fce			jsr 	NSNormalise 				; normalise S[X]
.8ebb	f0 54		beq $8f11			beq 	_FAReturn1
.8ebd	e8		inx				inx 								; normalise S[X+1]
.8ebe	20 ce 8f	jsr $8fce			jsr 	NSNormalise
.8ec1	ca		dex				dex
.8ec2	c9 00		cmp #$00			cmp 	#0
.8ec4	f0 6f		beq $8f35			beq 	_FAExit 					; if so, just return A
.8ec6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.8ec9	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.8ecc	f0 1b		beq $8ee9			beq 	_FAExponentsEqual
.8ece	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.8ed1	a8		tay				tay
.8ed2	38		sec				sec 								; do a signed comparison of the exponents.
.8ed3	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8ed6	50 02		bvc $8eda			bvc 	_FANoSignedChange
.8ed8	49 80		eor #$80			eor 	#$80
.8eda					_FANoSignedChange:
.8eda	29 80		and #$80			and 	#$80
.8edc	10 03		bpl $8ee1			bpl 	_FAHaveMax
.8ede	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.8ee1					_FAHaveMax:
.8ee1	20 38 8f	jsr $8f38			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.8ee4	e8		inx				inx
.8ee5	20 38 8f	jsr $8f38			jsr 	_FAShiftToExponent
.8ee8	ca		dex				dex
.8ee9					_FAExponentsEqual:
.8ee9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.8eec	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8eef	30 10		bmi $8f01			bmi 	_FADifferentSigns
.8ef1	20 4c 82	jsr $824c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.8ef4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.8ef7	10 3c		bpl $8f35			bpl 	_FAExit 					; if no, we are done.
.8ef9	20 bd 87	jsr $87bd			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.8efc	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.8eff	80 34		bra $8f35			bra 	_FAExit
.8f01					_FADifferentSigns:
.8f01	20 72 82	jsr $8272			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.8f04	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.8f07	10 2c		bpl $8f35			bpl 	_FAExit 					; if no, we are done.
.8f09	20 46 87	jsr $8746			jsr 	NSMNegate 					; netate result
.8f0c	20 4f 87	jsr $874f			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.8f0f	80 24		bra $8f35			bra 	_FAExit
.8f11					_FAReturn1:
.8f11	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8f14	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f17	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8f1a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f1d	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8f20	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f23	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.8f26	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f29	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.8f2c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f2f	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.8f32	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f35					_FAExit:
.8f35	7a		ply				ply
.8f36	68		pla				pla
.8f37	60		rts				rts
.8f38					_FAShiftToExponent:
.8f38	98		tya				tya 								; compare Y to exponent
.8f39	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.8f3c	f0 08		beq $8f46			beq 	_FASEExit 					; exit if so.
.8f3e	20 bd 87	jsr $87bd			jsr 	NSMShiftRight	 			; shift the mantissa right
.8f41	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.8f44	80 f2		bra $8f38			bra 	_FAShiftToExponent
.8f46					_FASEExit:
.8f46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.8f47					CompareFloat:
.8f47	20 ae 8e	jsr $8eae			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.8f4a	a9 00		lda #$00			lda 	#0
.8f4c	1d 10 06	ora $0610,x			ora 	NSMantissa1,x				; the accuracy can be tweaked.
.8f4f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f52	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.8f55	f0 09		beq $8f60			beq 	_FCExit 					; zero, so approximately identical
.8f57	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.8f59	3c 00 06	bit $0600,x			bit 	NSStatus,x
.8f5c	10 02		bpl $8f60			bpl 	_FCExit
.8f5e					_FCNegative:
.8f5e	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.8f60					_FCExit:
.8f60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.8f61					FDivideCommand:
.8f61	fa		plx				plx	 								; restore stack position
.8f62	20 bd 8f	jsr $8fbd			jsr 	FloatPrepare 				; prepare for floats
.8f65					FloatDivide:
.8f65	48		pha				pha
.8f66	e8		inx				inx
.8f67	20 ce 8f	jsr $8fce			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.8f6a	ca		dex				dex
.8f6b	c9 00		cmp #$00			cmp 	#0
.8f6d	f0 20		beq $8f8f			beq 	_FDZero
.8f6f	20 ce 8f	jsr $8fce			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.8f72	f0 19		beq $8f8d			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.8f74	20 fd 8d	jsr $8dfd			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.8f77	20 8b 8d	jsr $8d8b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.8f7a	20 ce 8f	jsr $8fce			jsr		NSNormalise 				; renormalise
.8f7d	20 98 8e	jsr $8e98			jsr 	CalculateSign 				; calculate result sign
.8f80	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.8f83	38		sec				sec
.8f84	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8f87	38		sec				sec
.8f88	e9 1e		sbc #$1e			sbc 	#30
.8f8a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f8d					_FDExit:
.8f8d	68		pla				pla
.8f8e	60		rts				rts
.8f8f					_FDZero:
.8f8f	a9 03		lda #$03		lda	#3
.8f91	4c 1f 80	jmp $801f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.8f94					FloatingPointMultiply:
.8f94	20 bd 8f	jsr $8fbd			jsr 	FloatPrepare 				; prepare for floats
.8f97					FloatMultiply:
.8f97	48		pha				pha
.8f98	20 ce 8f	jsr $8fce			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.8f9b	f0 1b		beq $8fb8			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.8f9d	e8		inx				inx
.8f9e	20 ce 8f	jsr $8fce			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.8fa1	ca		dex				dex
.8fa2	c9 00		cmp #$00			cmp 	#0
.8fa4	f0 0f		beq $8fb5			beq 	_FDSetZero
.8fa6	20 53 8e	jsr $8e53			jsr 	MultiplyShort 				; calculate the result.
.8fa9	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.8fac	18		clc				clc
.8fad	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.8fb0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8fb3	80 03		bra $8fb8			bra 	_FDExit
.8fb5					_FDSetZero:
.8fb5	20 9a 87	jsr $879a			jsr 	NSMSetZero 					; return 0
.8fb8					_FDExit:
.8fb8	20 ce 8f	jsr $8fce			jsr 	NSNormalise 				; normalise the result
.8fbb	68		pla				pla
.8fbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.8fbd					FloatPrepare:
.8fbd	20 4c 84	jsr $844c			jsr 	DereferenceTopTwo 			; dereference the top two values
.8fc0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.8fc3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fc6	29 10		and #$10			and 	#NSBIsString
.8fc8	d0 01		bne $8fcb			bne 	_FDType
.8fca	60		rts				rts
.8fcb					_FDType:
.8fcb	4c 37 90	jmp $9037			jmp 	TypeError
.8fce					NSNormalise:
.8fce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.8fd1	29 80		and #$80			and 	#$80
.8fd3	09 08		ora #$08			ora 	#NSTFloat
.8fd5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fd8	20 ca 87	jsr $87ca			jsr 	NSMIsZero 					; if zero exit
.8fdb	d0 09		bne $8fe6			bne 	_NSNormaliseLoop 			; if so, normalise it.
.8fdd	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8fe0	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.8fe3	a9 00		lda #$00			lda 	#0 							; set Z flag
.8fe5	60		rts				rts
.8fe6					_NSNormaliseLoop:
.8fe6	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.8fe9	70 08		bvs $8ff3			bvs 	_NSNExit 					; exit if so with Z flag clear
.8feb	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; shift mantissa left
.8fee	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.8ff1	80 f3		bra $8fe6			bra 	_NSNormaliseLoop
.8ff3					_NSNExit:
.8ff3	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.8ff5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.844c					DereferenceTopTwo:
.844c	e8		inx				inx
.844d	20 51 84	jsr $8451			jsr 	Dereference 				; deref x+1
.8450	ca		dex				dex  								; falls through to deref x
.8451					Dereference:
.8451	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8454	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8456	f0 57		beq $84af			beq 	_DRFExit 					; not a reference
.8458	5a		phy				phy
.8459	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.845c	85 36		sta $36				sta 	zTemp0
.845e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8461	85 37		sta $37				sta 	zTemp0+1
.8463	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8466	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8468	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.846b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.846e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8470	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8472	f0 0f		beq $8483			beq 	_DRFDereferenceTwo
.8474	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8476	f0 39		beq $84b1			beq 	_DRFFull
.8478	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.847b	29 03		and #$03			and 	#3
.847d	f0 32		beq $84b1			beq 	_DRFFull 					; the whole word
.847f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8481	f0 07		beq $848a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8483					_DRFDereferenceTwo:
.8483	a0 01		ldy #$01			ldy 	#1
.8485	b1 36		lda ($36),y			lda 	(zTemp0),y
.8487	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.848a					_DRFClear23:
.848a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.848d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8490	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8493	29 18		and #$18			and 	#NSBTypeMask
.8495	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8498	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.849a	d0 12		bne $84ae			bne 	_DRFNotString
.849c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.849f	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.84a2	d0 0a		bne $84ae			bne 	_DRFNotString
.84a4	a9 b0		lda #$b0			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.84a6	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.84a9	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.84ab	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.84ae					_DRFNotString
.84ae	7a		ply				ply 								; restore Y and exit
.84af					_DRFExit:
.84af	60		rts				rts
.84b0					_DRFNullString:
>84b0	00						.byte 	0
.84b1					_DRFFull:
.84b1	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.84b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.84b5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84b8	c8		iny				iny
.84b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.84bb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84be	c8		iny				iny
.84bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.84c1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84c4	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.84c7	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.84ca	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.84cc	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.84cf	f0 06		beq $84d7			beq 	_DRFNoExponent
.84d1	c8		iny				iny 								; if not, read the exponent as well.
.84d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.84d4	9d 28 06	sta $0628,x			sta 	NSExponent,x
.84d7					_DRFNoExponent:
.84d7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.84da	10 0d		bpl $84e9			bpl 	_DRFExit2 					; if not, then exit.
.84dc	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.84de	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84e1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.84e4	09 80		ora #$80			ora 	#NSBIsNegative
.84e6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84e9					_DRFExit2:
.84e9	7a		ply				ply
.84ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.84eb					EncodeNumberStart:
.84eb	38		sec				sec
.84ec	80 01		bra $84ef			bra 	EncodeNumberContinue+1
.84ee					EncodeNumberContinue:
.84ee	18		clc				clc
.84ef	08		php				php 								; save reset.
.84f0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.84f2	f0 12		beq $8506			beq 	_ENIsOkay
.84f4	c9 30		cmp #$30			cmp 	#"0"
.84f6	90 04		bcc $84fc			bcc 	_ENBadNumber
.84f8	c9 3a		cmp #$3a			cmp 	#"9"+1
.84fa	90 0a		bcc $8506			bcc 	_ENIsOkay
.84fc					_ENBadNumber:
.84fc	28		plp				plp 								; throw saved reset
.84fd	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8500	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8502	f0 73		beq $8577			beq 	_ENConstructFinal
.8504					_ENFail:
.8504	18		clc				clc 								; not allowed
.8505	60		rts				rts
.8506					_ENIsOkay:
.8506	28		plp				plp 								; are we restarting
.8507	90 0c		bcc $8515			bcc 	_ENNoRestart
.8509					_ENStartEncode:
.8509	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.850b	20 9c 87	jsr $879c			jsr 	NSMSetByte
.850e	a9 01		lda #$01			lda 	#ESTA_Low
.8510					_ENExitChange:
.8510	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8513	38		sec				sec
.8514	60		rts				rts
.8515					_ENNoRestart:
.8515	48		pha				pha 								; save on stack.
.8516	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8519	c9 01		cmp #$01			cmp 	#ESTA_Low
.851b	f0 09		beq $8526			beq  	_ESTALowState
.851d	c9 02		cmp #$02			cmp 	#ESTA_High
.851f	f0 27		beq $8548			beq 	_ESTAHighState
.8521	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8523	f0 39		beq $855e			beq 	_ESTADecimalState
>8525	db						.byte 	$DB 						; causes a break in the emulator
.8526					_ESTALowState:
.8526	68		pla				pla 								; get value back
.8527	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8529	f0 27		beq $8552			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.852b	29 0f		and #$0f			and 	#15 						; make digit
.852d	85 36		sta $36				sta 	zTemp0 						; save it.
.852f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8532	0a		asl a				asl 	a
.8533	0a		asl a				asl 	a
.8534	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8537	0a		asl a				asl 	a
.8538	65 36		adc $36				adc 	zTemp0
.853a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.853d	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.853f	90 05		bcc $8546			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8541	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8543	8d 05 07	sta $0705			sta 	EncodeState
.8546					_ESTANoSwitch:
.8546	38		sec				sec
.8547	60		rts				rts
.8548					_ESTAHighState:
.8548	68		pla				pla 								; get value back
.8549	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.854b	f0 05		beq $8552			beq 	_ESTASwitchFloat
.854d	20 b1 85	jsr $85b1			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8550	38		sec				sec
.8551	60		rts				rts
.8552					_ESTASwitchFloat:
.8552	9c 06 07	stz $0706			stz 	DecimalCount
.8555	e8		inx				inx 								; zero the decimal additive.
.8556	20 9a 87	jsr $879a			jsr 	NSMSetZero
.8559	ca		dex				dex
.855a	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.855c	80 b2		bra $8510			bra 	_ENExitChange
.855e					_ESTADecimalState:
.855e	68		pla				pla 								; digit.
.855f	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8561	f0 a1		beq $8504			beq 	_ENFail
.8563	e8		inx				inx 								; put digit into fractional part of X+1
.8564	20 b1 85	jsr $85b1			jsr 	ESTAShiftDigitIntoMantissa
.8567	ca		dex				dex
.8568	ee 06 07	inc $0706			inc 	DecimalCount 				; bump the count of decimals
.856b	ad 06 07	lda $0706			lda 	DecimalCount
.856e	c9 0b		cmp #$0b			cmp 	#11
.8570	f0 02		beq $8574			beq 	_ESTADSFail
.8572	38		sec				sec
.8573	60		rts				rts
.8574					_ESTADSFail:
.8574	4c 32 90	jmp $9032			jmp 	RangeError
.8577					_ENConstructFinal:
.8577	ad 06 07	lda $0706			lda 	DecimalCount 				; get decimal count
.857a	f0 33		beq $85af			beq 	_ENCFExit 					; no decimals
.857c	5a		phy				phy
.857d	0a		asl a				asl 	a 							; x 4 and CLC
.857e	0a		asl a				asl 	a
.857f	6d 06 07	adc $0706			adc 	DecimalCount
.8582	a8		tay				tay
.8583	b9 f1 8f	lda $8ff1,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8586	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8589	b9 f2 8f	lda $8ff2,y			lda 	DecimalScalarTable-5+1,y
.858c	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.858f	b9 f3 8f	lda $8ff3,y			lda 	DecimalScalarTable-5+2,y
.8592	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8595	b9 f4 8f	lda $8ff4,y			lda 	DecimalScalarTable-5+3,y
.8598	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.859b	b9 f5 8f	lda $8ff5,y			lda 	DecimalScalarTable-5+4,y
.859e	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.85a1	a9 08		lda #$08			lda 	#NSTFloat
.85a3	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.85a6	7a		ply				ply
.85a7	e8		inx				inx 								; multiply decimal const by decimal scalar
.85a8	20 97 8f	jsr $8f97			jsr 	FloatMultiply
.85ab	ca		dex				dex
.85ac	20 b6 8e	jsr $8eb6			jsr 	FloatAdd 					; add to integer part.
.85af					_ENCFExit:
.85af	18		clc				clc 								; reject the digit.
.85b0	60		rts				rts
.85b1					ESTAShiftDigitIntoMantissa:
.85b1	29 0f		and #$0f			and 	#15 						; save digit
.85b3	48		pha				pha
.85b4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.85b7	48		pha				pha
.85b8	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.85bb	48		pha				pha
.85bc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85bf	48		pha				pha
.85c0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.85c3	48		pha				pha
.85c4	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; x 2
.85c7	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; x 4
.85ca	18		clc				clc 								; pop mantissa and add
.85cb	68		pla				pla
.85cc	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.85cf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85d2	68		pla				pla
.85d3	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.85d6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85d9	68		pla				pla
.85da	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.85dd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85e0	68		pla				pla
.85e1	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.85e4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.85e7	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; x 10
.85ea	68		pla				pla 								; add digit
.85eb	18		clc				clc
.85ec	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.85ef	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85f2	90 0d		bcc $8601			bcc 	_ESTASDExit
.85f4	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.85f7	d0 08		bne $8601			bne 	_ESTASDExit
.85f9	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.85fc	d0 03		bne $8601			bne 	_ESTASDExit
.85fe	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8601					_ESTASDExit:
.8601	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8602					EvaluateTerm:
.8602	b1 30		lda ($30),y			lda 	(codePtr),y
.8604	30 18		bmi $861e			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8606	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8608	b0 6e		bcs $8678			bcs 	_ETVariable
.860a	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.860c	90 6e		bcc $867c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.860e	c9 3a		cmp #$3a			cmp 	#'9'+1
.8610	b0 6a		bcs $867c			bcs 	_ETPuncUnary
.8612	20 eb 84	jsr $84eb			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8615					_ETNumber:
.8615	c8		iny				iny 								; keep encoding until we have the numbers
.8616	b1 30		lda ($30),y			lda 	(codePtr),y
.8618	20 ee 84	jsr $84ee			jsr 	EncodeNumberContinue
.861b	b0 f8		bcs $8615			bcs 	_ETNumber 					; go back if accepted.
.861d	60		rts				rts
.861e					_ETCheckUnary:
.861e	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8620	f0 40		beq $8662			beq 	_ETString
.8622	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8624	f0 11		beq $8637			beq 	_ETHexConstant
.8626	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8628	90 0a		bcc $8634			bcc 	_ETSyntaxError
.862a	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.862c	b0 06		bcs $8634			bcs 	_ETSyntaxError
.862e	da		phx				phx 								; push X on the stack
.862f	0a		asl a				asl 	a 							; put vector x 2 into X
.8630	aa		tax				tax
.8631	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x) 				; and do it.
.8634					_ETSyntaxError:
.8634	4c 2d 90	jmp $902d			jmp 	SyntaxError
.8637					_ETHexConstant:
.8637	c8		iny				iny 								; skip #
.8638	c8		iny				iny 								; skip count
.8639	20 9a 87	jsr $879a			jsr 	NSMSetZero 					; clear result
.863c					_ETHLoop:
.863c	b1 30		lda ($30),y			lda 	(codePtr),y
.863e	c8		iny				iny 								; and consume
.863f	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8641	f0 1e		beq $8661			beq 	_ETHExit
.8643	48		pha				pha 								; save on stack.
.8644	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; x 2
.8647	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; x 4
.864a	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; x 8
.864d	20 af 87	jsr $87af			jsr 	NSMShiftLeft 				; x 16
.8650	68		pla				pla 								; ASCII
.8651	c9 41		cmp #$41			cmp 	#'A'
.8653	90 02		bcc $8657			bcc 	_ETHNotChar
.8655	e9 07		sbc #$07			sbc 	#7
.8657					_ETHNotChar:
.8657	29 0f		and #$0f			and 	#15 						; digit now
.8659	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.865c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.865f	80 db		bra $863c			bra 	_ETHLoop 					; go round.
.8661					_ETHExit:
.8661	60		rts				rts
.8662					_ETString:
.8662	c8		iny				iny 								; look at length
.8663	b1 30		lda ($30),y			lda 	(codePtr),y
.8665	48		pha				pha
.8666	c8		iny				iny 								; first character
.8667	20 13 88	jsr $8813			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.866a	68		pla				pla 								; restore count and save
.866b	85 36		sta $36				sta 	zTemp0
.866d	98		tya				tya 								; add length to Y to skip it.
.866e	18		clc				clc
.866f	65 36		adc $36				adc 	zTemp0
.8671	a8		tay				tay
.8672	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8674	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8677	60		rts				rts
.8678					_ETVariable:
>8678	db						.byte 	$DB 						; causes a break in the emulator
.8679	4c ff ff	jmp $ffff			jmp 	$FFFF
.867c					_ETPuncUnary:
.867c	c8		iny				iny 								; consume the unary character
.867d	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.867f	f0 31		beq $86b2			beq 	_ETUnaryNegate
.8681	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8683	f0 3d		beq $86c2			beq 	_ETDereference
.8685	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8687	f0 58		beq $86e1			beq 	_ETParenthesis
.8689	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.868b	f0 43		beq $86d0			beq 	_ETStringReference
.868d	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.868f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8691	f0 06		beq $8699			beq 	_ETIndirection
.8693	e6 36		inc $36				inc 	zTemp0
.8695	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8697	d0 9b		bne $8634			bne 	_ETSyntaxError
.8699					_ETIndirection:
.8699	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.869b	1a		inc a				inc 	a
.869c	48		pha				pha
.869d	20 02 86	jsr $8602			jsr 	EvaluateTerm				; evaluate the term
.86a0	20 51 84	jsr $8451			jsr 	Dereference 				; dereference it.
.86a3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.86a6	d0 07		bne $86af			bne 	_ETTypeMismatch
.86a8	68		pla				pla 								; indirection 1-2
.86a9	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.86ab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86ae	60		rts				rts
.86af					_ETTypeMismatch:
.86af	4c 37 90	jmp $9037			jmp 	TypeError
.86b2					_ETUnaryNegate:
.86b2	20 02 86	jsr $8602			jsr 	EvaluateTerm				; evaluate the term
.86b5	20 51 84	jsr $8451			jsr 	Dereference 				; dereference it.
.86b8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.86bb	29 10		and #$10			and 	#NSTString
.86bd	d0 f0		bne $86af			bne 	_ETTypeMismatch
.86bf	4c 46 87	jmp $8746			jmp 	NSMNegate  					; just toggles the sign bit.
.86c2					_ETDereference:
.86c2	20 02 86	jsr $8602			jsr 	EvaluateTerm				; evaluate the term
.86c5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.86c8	29 20		and #$20			and 	#NSBIsReference
.86ca	f0 e3		beq $86af			beq 	_ETTypeMismatch
.86cc	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.86cf	60		rts				rts
.86d0					_ETStringReference:
.86d0	20 02 86	jsr $8602			jsr 	EvaluateTerm				; evaluate the term
.86d3	20 51 84	jsr $8451			jsr 	Dereference 				; dereference it.
.86d6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.86d9	d0 d4		bne $86af			bne 	_ETTypeMismatch
.86db	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.86dd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86e0	60		rts				rts
.86e1					_ETParenthesis:
.86e1	20 0f 84	jsr $840f			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.86e4	20 ae 8c	jsr $8cae			jsr 	CheckRightBracket 			; check for )
.86e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.86e8					EvaluateValue:
.86e8	48		pha				pha
.86e9	20 0d 84	jsr $840d			jsr		EvaluateExpressionAt0 		; expression
.86ec	20 51 84	jsr $8451			jsr 	Dereference					; derefernce it
.86ef	68		pla				pla
.86f0	60		rts				rts
.86f1					EvaluateNumber:
.86f1	20 e8 86	jsr $86e8			jsr 	EvaluateValue 				; get a value
.86f4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.86f7	29 10		and #$10			and 	#NSBIsString
.86f9	d0 16		bne $8711			bne 	HelperTypeError
.86fb	60		rts				rts
.86fc					EvaluateString:
.86fc	20 e8 86	jsr $86e8			jsr 	EvaluateValue 				; get a value
.86ff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8702	29 10		and #$10			and 	#NSBIsString
.8704	f0 0b		beq $8711			beq 	HelperTypeError
.8706					CopyAddressToTemp0:
.8706	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8709	85 36		sta $36				sta 	zTemp0
.870b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.870e	85 37		sta $37				sta 	zTemp0+1
.8710	60		rts				rts
.8711					HelperTypeError:
.8711	4c 37 90	jmp $9037			jmp 	TypeError
.8714					EvaluateInteger:
.8714	20 f1 86	jsr $86f1			jsr 	EvaluateNumber
.8717	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.871a	d0 0a		bne $8726			bne 	HelperValueError 			; if not, it's a float.
.871c	60		rts				rts
.871d					EvaluateUnsignedInteger:
.871d	20 14 87	jsr $8714			jsr 	EvaluateInteger 			; check integer is +ve
.8720	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8723	30 01		bmi $8726			bmi 	HelperValueError
.8725	60		rts				rts
.8726					HelperValueError:
.8726	4c 3c 90	jmp $903c			jmp 	ArgumentError
.8729					Evaluate16BitInteger:
.8729	20 1d 87	jsr $871d			jsr	 	EvaluateUnsignedInteger		; get integer
.872c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.872f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8732	d0 f2		bne $8726			bne 	HelperValueError
.8734	60		rts				rts
.8735					Evaluate8BitInteger:
.8735	20 1d 87	jsr $871d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8738	d0 ec		bne $8726			bne 	HelperValueError
.873a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.873d	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8740	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8743	d0 e1		bne $8726			bne 	HelperValueError
.8745	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8746					NSMNegate:
.8746	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8749	49 80		eor #$80			eor 	#NSBIsNegative
.874b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.874e	60		rts				rts
.874f					NSMNegateMantissa:
.874f	38		sec				sec
.8750	a9 00		lda #$00			lda 	#0
.8752	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8755	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8758	a9 00		lda #$00			lda 	#0
.875a	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.875d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8760	a9 00		lda #$00			lda 	#0
.8762	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8765	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8768	a9 00		lda #$00			lda 	#0
.876a	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.876d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8770	60		rts				rts
.8771					NSMShiftUpTwo:
.8771	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8774	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8777	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.877a	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.877d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8780	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8783	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8786	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8789	bd 28 06	lda $0628,x			lda 	NSExponent,x
.878c	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.878f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8792	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8795	60		rts				rts
.8796					NSMSetZeroMantissaOnly:
.8796	a9 00		lda #$00			lda 	#0
.8798	80 08		bra $87a2			bra 	NSMSetMantissa
.879a					NSMSetZero:
.879a	a9 00		lda #$00			lda 	#0
.879c					NSMSetByte:
.879c	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.879f	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.87a2					NSMSetMantissa:
.87a2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.87a5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.87a8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.87ab	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87ae	60		rts				rts
.87af					NSMShiftLeft:
.87af	18		clc				clc
.87b0					NSMRotateLeft:
.87b0	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.87b3	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.87b6	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.87b9	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.87bc	60		rts				rts
.87bd					NSMShiftRight:
.87bd	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.87c0	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.87c3	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.87c6	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.87c9	60		rts				rts
.87ca					NSMIsZero:
.87ca	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.87cd	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.87d0	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.87d3	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.87d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.8ff6					DecimalScalarTable:
>8ff6	66 66 66 66				.dword $66666666 ; 0.1
>8ffa	de					.byte $de
>8ffb	1f 85 eb 51				.dword $51eb851f ; 0.01
>8fff	db					.byte $db
>9000	4c 37 89 41				.dword $4189374c ; 0.001
>9004	d8					.byte $d8
>9005	ac 8b db 68				.dword $68db8bac ; 0.0001
>9009	d4					.byte $d4
>900a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>900e	d1					.byte $d1
>900f	83 de 1b 43				.dword $431bde83 ; 1e-06
>9013	ce					.byte $ce
>9014	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9018	ca					.byte $ca
>9019	89 3b e6 55				.dword $55e63b89 ; 1e-08
>901d	c7					.byte $c7
>901e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9022	c4					.byte $c4
>9023	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9027	c0					.byte $c0
>9028	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>902c	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.902d					SyntaxError:
.902d	a9 02		lda #$02		lda	#2
.902f	4c 1f 80	jmp $801f		jmp	ErrorHandler
.9032					RangeError:
.9032	a9 04		lda #$04		lda	#4
.9034	4c 1f 80	jmp $801f		jmp	ErrorHandler
.9037					TypeError:
.9037	a9 05		lda #$05		lda	#5
.9039	4c 1f 80	jmp $801f		jmp	ErrorHandler
.903c					ArgumentError:
.903c	a9 07		lda #$07		lda	#7
.903e	4c 1f 80	jmp $801f		jmp	ErrorHandler
.9041					NotDoneError:
.9041	a9 0c		lda #$0c		lda	#12
.9043	4c 1f 80	jmp $801f		jmp	ErrorHandler
.9046					ErrorText:
>9046	42 72 65 61 6b 00			.text	"Break",0
>904c	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9054	72 72 6f 72 00
>9059	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9061	20 62 79 20 7a 65 72 6f 00
>906a	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9072	61 6e 67 65 00
>9077	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>907f	6d 61 74 63 68 00
>9085	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>908d	65 6d 6f 72 79 00
>9093	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>909b	61 72 67 75 6d 65 6e 74 00
>90a4	53 74 6f 70 00				.text	"Stop",0
>90a9	53 74 72 69 6e 67 20 74			.text	"String too long",0
>90b1	6f 6f 20 6c 6f 6e 67 00
>90b9	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>90c1	6e 20 66 61 69 6c 65 64 00
>90ca	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>90d2	61 74 61 00
>90d6	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>90de	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.87d7					MemoryNew:
.87d7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.87d9	85 30		sta $30				sta 	codePtr
.87db	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.87dd	85 31		sta $31				sta 	codePtr+1
.87df	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.87e1	92 30		sta ($30)			sta 	(codePtr)
.87e3	60		rts				rts
.87e4					MemoryAppend:
.87e4	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.87e6	85 30		sta $30				sta 	codePtr
.87e8	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.87ea	85 31		sta $31				sta 	codePtr+1
.87ec					_MAFindEnd:
.87ec	b2 30		lda ($30)			lda 	(codePtr)
.87ee	f0 0d		beq $87fd			beq 	_MAFoundEnd
.87f0	18		clc				clc
.87f1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87f3	65 30		adc $30				adc 	codePtr
.87f5	85 30		sta $30				sta 	codePtr
.87f7	90 02		bcc $87fb			bcc 	_CREExit
.87f9	e6 31		inc $31				inc 	codePtr+1
.87fb					_CREExit:
.87fb	80 ef		bra $87ec			bra 	_MAFindEnd
.87fd					_MAFoundEnd:
.87fd	ac 07 07	ldy $0707			ldy 	tokenOffset 				; bytes to copy
.8800	c0 04		cpy #$04			cpy 	#4 							; blank line
.8802	f0 0e		beq $8812			beq 	_MANoLine
.8804	a9 00		lda #$00			lda 	#0 							; end of program
.8806	91 30		sta ($30),y			sta 	(codePtr),y
.8808					_MACopy:
.8808	88		dey				dey
.8809	b9 07 07	lda $0707,y			lda 	tokenOffset,y
.880c	91 30		sta ($30),y			sta 	(codePtr),y
.880e	c0 00		cpy #$00			cpy 	#0
.8810	d0 f6		bne $8808			bne 	_MACopy
.8812					_MANoLine:
.8812	60		rts				rts
.8813					MemoryInline:
.8813	98		tya				tya 								; put address into stack,x
.8814	18		clc				clc
.8815	65 30		adc $30				adc 	codePtr
.8817	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.881a	a5 31		lda $31				lda 	codePtr+1
.881c	69 00		adc #$00			adc 	#0
.881e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8821	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8824	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8827	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.8828					VariableOpen:
.8828	60		rts				rts
.8829					VariableClose:
.8829	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.882a					BackloadProgram:
.882a	a2 ff		ldx #$ff			ldx 	#$FF
.882c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.882f	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.8832	30 1e		bmi $8852			bmi 	_BPExit
.8834					_BPCopy:
.8834	e8		inx				inx  								; copy byte in
.8835	9d 07 08	sta $0807,x			sta 	lineBuffer,x
.8838	9e 08 08	stz $0808,x			stz 	lineBuffer+1,x
.883b	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.883e	30 0a		bmi $884a			bmi 	_BPEndLine 					; -ve = EOL
.8840	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8842	d0 02		bne $8846			bne 	_BPNotTab
.8844	a9 20		lda #$20			lda 	#' '
.8846					_BPNotTab:
.8846	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8848	b0 ea		bcs $8834			bcs 	_BPCopy
.884a					_BPEndLine:
.884a	20 29 8a	jsr $8a29			jsr 	TokeniseLine 				; tokenise the line.
.884d	20 e4 87	jsr $87e4			jsr 	MemoryAppend 				; append to current program
.8850	80 d8		bra $882a			bra 	BackloadProgram
.8852					_BPExit:
.8852	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8853					TokeniseSearchTable:
.8853	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8855	85 36		sta $36				sta 	zTemp0
.8857	a0 00		ldy #$00			ldy 	#0
.8859	a9 80		lda #$80			lda 	#$80 						; token #
.885b	85 38		sta $38				sta 	zTemp1
.885d					_TSTLoop:
.885d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.885f	30 49		bmi $88aa			bmi 	_TSTFail 					; -ve = end of table
.8861	f0 2e		beq $8891			beq 	_TSTNext 					; zero, check next it's a dummy
.8863	c8		iny				iny 								; get the hash
.8864	b1 36		lda ($36),y			lda 	(zTemp0),y
.8866	88		dey				dey
.8867	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.886a	d0 25		bne $8891			bne 	_TSTNext
.886c	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.886f	38		sec				sec
.8870	ed 00 07	sbc $0700			sbc 	identStart
.8873	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8875	d0 1a		bne $8891			bne 	_TSTNext
.8877	5a		phy				phy 								; save Y , we might fail
.8878	c8		iny				iny 								; point to text
.8879	c8		iny				iny
.887a	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.887d					_TSTCompareName:
.887d	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; compare text.
.8880	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8882	d0 0c		bne $8890			bne 	_TSTNextPullY 				; fail, pullY and do next
.8884	e8		inx				inx
.8885	c8		iny				iny
.8886	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8889	d0 f2		bne $887d			bne 	_TSTCompareName
.888b	7a		ply				ply 								; throw Y
.888c	a5 38		lda $38				lda 	zTemp1 						; get token #
.888e	38		sec				sec 								; return with CS = passed.
.888f	60		rts				rts
.8890					_TSTNextPullY:
.8890	7a		ply				ply 								; restore current, fall through.
.8891					_TSTNext:
.8891	e6 38		inc $38				inc 	zTemp1 						; token counter
.8893	98		tya				tya
.8894	18		clc				clc
.8895	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8897	1a		inc a				inc 	a 							; +1
.8898	1a		inc a				inc 	a 							; +2
.8899	a8		tay				tay
.889a	10 c1		bpl $885d			bpl 	_TSTLoop 					; if Y < $80 loop back
.889c	98		tya				tya 								; add Y to zTemp0 and reset Y
.889d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.889f	18		clc				clc  								; but have tables > 255 bytes
.88a0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.88a2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.88a4	90 b7		bcc $885d			bcc 	_TSTLoop
.88a6	e6 37		inc $37				inc 	zTemp0+1
.88a8	80 b3		bra $885d			bra 	_TSTLoop
.88aa					_TSTFail:
.88aa	18		clc				clc
.88ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.88ac					KeywordSet0:
>88ac	00 65					.text	0,$65,""               ; $80 !0:EOF
>88ae	00 58					.text	0,$58,""               ; $81 !1:SH1
>88b0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>88b2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>88b8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>88c0	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>88c6	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>88cd	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>88d3	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>88da	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>88e1	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>88e9	45 24 28
>88ec	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>88f4	45 24 28
>88f7	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8c HEX$(
>88fe	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>8904	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>890c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8f LEFT$(
>8914	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $90 LEN(
>891a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $91 MID$(
>8921	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $92 NOT
>8926	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $93 PAGE
>892c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $94 RIGHT$(
>8934	28
>8935	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $95 RND(
>893b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $96 SGN(
>8941	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $97 SPC(
>8947	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $98 STR$(
>894e	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>8954	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>895a	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>895f	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>8963	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>8969	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>8971	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>8978	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>897f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>8987	43
>8988	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>898e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a3 UNTIL
>8995	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a4 WEND
>899b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a5 CALL
>89a1	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a6 CLS
>89a6	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a7 DATA
>89ac	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a8 DIM
>89b1	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a9 GOSUB
>89b8	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $aa GOTO
>89be	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $ab LET
>89c3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>89ca	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>89d0	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>89d5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>89dd	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b0 THEN
>89e3	02 a3 54 4f				.text	2,$a3,"TO"             ; $b1 TO
>89e7	ff					.text	$FF
.89e8					KeywordSet1:
>89e8	00 65					.text	0,$65,""               ; $80 !0:EOF
>89ea	00 58					.text	0,$58,""               ; $81 !1:SH1
>89ec	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>89ee	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>89f6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>89fd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8a02	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8a08	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8a0d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8a15	45
>8a16	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8a1b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8a21	ff					.text	$FF
.8a22					KeywordSet2:
>8a22	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a24	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a26	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a28	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8a29					TokeniseLine:
.8a29	20 b1 8b	jsr $8bb1			jsr 	FixLineBufferCase 			; fix line case
.8a2c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8a2e	8d 07 07	sta $0707			sta 	tokenOffset
.8a31	9c 08 07	stz $0708			stz 	tokenLineNumber
.8a34	9c 09 07	stz $0709			stz 	tokenLineNumber+1
.8a37	a2 ff		ldx #$ff			ldx 	#$FF
.8a39					_TKFindFirst:
.8a39	e8		inx				inx
.8a3a	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8a3d	f0 79		beq $8ab8			beq 	_TKExit
.8a3f	c9 20		cmp #$20			cmp 	#' '
.8a41	90 f6		bcc $8a39			bcc 	_TKFindFirst
.8a43	c9 30		cmp #$30			cmp 	#'0'
.8a45	90 07		bcc $8a4e			bcc 	_TKNoLineNumber
.8a47	c9 3a		cmp #$3a			cmp 	#'9'+1
.8a49	b0 03		bcs $8a4e			bcs 	_TKNoLineNumber
.8a4b	20 db 8b	jsr $8bdb			jsr 	TokeniseExtractLineNumber
.8a4e					_TKNoLineNumber:
.8a4e					_TKTokeniseLoop:
.8a4e	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8a51	f0 65		beq $8ab8			beq 	_TKExit
.8a53	e8		inx				inx
.8a54	c9 20		cmp #$20			cmp 	#' '
.8a56	f0 f6		beq $8a4e			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8a58	ca		dex				dex 								; undo last get, A contains character, X is position.
.8a59	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8a5b	f0 61		beq $8abe			beq 	_TKTokeniseIdentifier
.8a5d	c9 41		cmp #$41			cmp 	#'A'
.8a5f	90 04		bcc $8a65			bcc 	_TKTokenisePunctuation
.8a61	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8a63	90 59		bcc $8abe			bcc 	_TKTokeniseIdentifier
.8a65					_TKTokenisePunctuation:
.8a65	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8a67	f0 27		beq $8a90			beq 	_TKString
.8a69	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8a6b	f0 28		beq $8a95			beq 	_TKHexConstant
.8a6d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8a6f	f0 29		beq $8a9a			beq 	_TKCheckDouble
.8a71	c9 3e		cmp #$3e			cmp 	#'>'
.8a73	f0 25		beq $8a9a			beq 	_TKCheckDouble
.8a75					_TKStandardPunctuation:
.8a75	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get it back.
.8a78	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8a7a	90 0e		bcc $8a8a			bcc 	_TKNoShift
.8a7c	48		pha				pha 								; save
.8a7d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8a7f	85 36		sta $36				sta 	zTemp0
.8a81	68		pla				pla
.8a82	29 20		and #$20			and 	#32 						; bit 5
.8a84	4a		lsr a				lsr 	a 							; shift into bit 3
.8a85	4a		lsr a				lsr 	a
.8a86	05 36		ora $36				ora 	zTemp0
.8a88	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8a8a					_TKNoShift:
.8a8a	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte 			; write the punctuation character
.8a8d	e8		inx				inx 								; consume the character
.8a8e	80 be		bra $8a4e			bra 	_TKTokeniseLoop 			; and loop round again.
.8a90					_TKString:
.8a90	20 40 8b	jsr $8b40			jsr 	TokeniseString
.8a93	80 b9		bra $8a4e			bra 	_TKTokeniseLoop
.8a95					_TKHexConstant:
.8a95	20 7b 8b	jsr $8b7b			jsr 	TokeniseHexConstant
.8a98	80 b4		bra $8a4e			bra 	_TKTokeniseLoop
.8a9a					_TKCheckDouble:
.8a9a	bd 08 08	lda $0808,x			lda 	lineBuffer+1,x 				; get next character
.8a9d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8a9f	90 d4		bcc $8a75			bcc 	_TKStandardPunctuation
.8aa1	c9 3f		cmp #$3f			cmp 	#'>'+1
.8aa3	b0 d0		bcs $8a75			bcs 	_TKStandardPunctuation
.8aa5	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8aa8	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8aaa	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8aab	7d 08 08	adc $0808,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8aae	38		sec				sec
.8aaf	e9 3c		sbc #$3c			sbc 	#'<'
.8ab1	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8ab4	e8		inx				inx 								; consume both
.8ab5	e8		inx				inx
.8ab6	80 96		bra $8a4e			bra 	_TKTokeniseLoop
.8ab8	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8aba	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8abd	60		rts				rts
.8abe					_TKTokeniseIdentifier:
.8abe	8e 00 07	stx $0700			stx 	identStart 					; save start
.8ac1	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8ac4					_TKCheckLoop:
.8ac4	e8		inx				inx 								; look at next, we know first is identifier.
.8ac5	bd 07 08	lda $0807,x			lda  	lineBuffer,x
.8ac8	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8aca	f0 f8		beq $8ac4			beq 	_TKCheckLoop
.8acc	c9 30		cmp #$30			cmp	 	#"0"
.8ace	90 0c		bcc $8adc			bcc 	_TKEndIdentifier
.8ad0	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ad2	90 f0		bcc $8ac4			bcc 	_TKCheckLoop
.8ad4	c9 41		cmp #$41			cmp	 	#"A"
.8ad6	90 04		bcc $8adc			bcc 	_TKEndIdentifier
.8ad8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8ada	90 e8		bcc $8ac4			bcc 	_TKCheckLoop
.8adc					_TKEndIdentifier:
.8adc	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8adf	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8ae1	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8ae3	f0 06		beq $8aeb			beq 	_TKHasTypeCharacter
.8ae5	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8ae7	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8ae9	d0 07		bne $8af2			bne 	_TKNoTypeCharacter
.8aeb					_TKHasTypeCharacter:
.8aeb	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8aee	e8		inx				inx 								; read next
.8aef	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8af2					_TKNoTypeCharacter:
.8af2	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8af4	d0 09		bne $8aff			bne 	_TKNoArray
.8af6	e8		inx				inx 								; skip the (
.8af7	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8afa	09 04		ora #$04			ora 	#$04
.8afc	8d 04 07	sta $0704			sta 	identTypeByte
.8aff					_TKNoArray:
.8aff	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8b02	20 9c 8b	jsr $8b9c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8b05	a0 88		ldy #$88			ldy 	#(KeywordSet0) >> 8
.8b07	a9 ac		lda #$ac			lda 	#(KeywordSet0) & $FF
.8b09	20 53 88	jsr $8853			jsr 	TokeniseSearchTable
.8b0c	a2 00		ldx #$00			ldx 	#0
.8b0e	b0 1f		bcs $8b2f			bcs 	_TKFoundToken
.8b10	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8b12	a9 e8		lda #$e8			lda 	#(KeywordSet1) & $FF
.8b14	20 53 88	jsr $8853			jsr 	TokeniseSearchTable
.8b17	a2 81		ldx #$81			ldx 	#$81
.8b19	b0 14		bcs $8b2f			bcs 	_TKFoundToken
.8b1b	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8b1d	a9 e8		lda #$e8			lda 	#(KeywordSet1) & $FF
.8b1f	20 53 88	jsr $8853			jsr 	TokeniseSearchTable
.8b22	a2 82		ldx #$82			ldx 	#$82
.8b24	b0 09		bcs $8b2f			bcs 	_TKFoundToken
.8b26	20 2c 8c	jsr $8c2c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8b29	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8b2c	4c 4e 8a	jmp $8a4e			jmp 	_TKTokeniseLoop 			; and go round again.
.8b2f					_TKFoundToken:
.8b2f	48		pha				pha 								; save token
.8b30	8a		txa				txa 								; shift in X, is there one ?
.8b31	f0 03		beq $8b36			beq 	_TKNoTShift
.8b33	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte 			; if so, write it out
.8b36					_TKNoTShift:
.8b36	68		pla				pla 								; restore and write token
.8b37	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8b3a	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8b3d	4c 4e 8a	jmp $8a4e			jmp 	_TKTokeniseLoop 			; and go round again.
.8b40					TokeniseString:
.8b40	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8b42	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8b45	e8		inx				inx									; start of quoted string.
.8b46	da		phx				phx 								; push start of string on top
.8b47	ca		dex				dex
.8b48					_TSFindEnd:
.8b48	e8		inx				inx
.8b49	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; next character
.8b4c	f0 04		beq $8b52			beq 	_TSEndOfString
.8b4e	c9 22		cmp #$22			cmp 	#'"'
.8b50	d0 f6		bne $8b48			bne 	_TSFindEnd
.8b52					_TSEndOfString:
.8b52	7a		ply				ply  								; so now Y is first character, X is character after end.
.8b53	48		pha				pha 								; save terminating character
.8b54	20 5c 8b	jsr $8b5c			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8b57	68		pla				pla 								; terminating character
.8b58	f0 01		beq $8b5b			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8b5a	e8		inx				inx
.8b5b					_TSNotQuote:
.8b5b	60		rts				rts
.8b5c					TOWriteBlockXY:
.8b5c	86 36		stx $36				stx 	zTemp0 						; write end character
.8b5e	98		tya				tya
.8b5f	49 ff		eor #$ff			eor 	#$FF
.8b61	38		sec				sec
.8b62	65 36		adc $36				adc 	zTemp0
.8b64	1a		inc a				inc 	a 							; one extra for NULL
.8b65	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8b68					_TOBlockLoop:
.8b68	c4 36		cpy $36				cpy 	zTemp0
.8b6a	f0 09		beq $8b75			beq 	_TOBlockExit
.8b6c	b9 07 08	lda $0807,y			lda 	lineBuffer,y
.8b6f	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8b72	c8		iny				iny
.8b73	80 f3		bra $8b68			bra 	_TOBlockLoop
.8b75					_TOBlockExit:
.8b75	a9 00		lda #$00			lda 	#0
.8b77	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8b7a	60		rts				rts
.8b7b					TokeniseHexConstant:
.8b7b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8b7d	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8b80	e8		inx				inx									; start of quoted string.
.8b81	da		phx				phx 								; push start of constant on top
.8b82	ca		dex				dex
.8b83					_THFindLoop:
.8b83	e8		inx				inx
.8b84	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8b87	c9 30		cmp #$30			cmp 	#"0"
.8b89	90 0c		bcc $8b97			bcc 	_THFoundEnd
.8b8b	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b8d	90 f4		bcc $8b83			bcc 	_THFindLoop
.8b8f	c9 41		cmp #$41			cmp 	#"A"
.8b91	90 04		bcc $8b97			bcc 	_THFoundEnd
.8b93	c9 47		cmp #$47			cmp 	#"F"+1
.8b95	90 ec		bcc $8b83			bcc 	_THFindLoop
.8b97					_THFoundEnd:
.8b97	7a		ply				ply 								; restore start
.8b98	20 5c 8b	jsr $8b5c			jsr 	TOWriteBlockXY 				; output the block
.8b9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8b9c					TokeniseCalculateHash:
.8b9c	da		phx				phx
.8b9d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8ba0	a9 00		lda #$00			lda 	#0
.8ba2					_TCHLoop:
.8ba2	18		clc				clc
.8ba3	7d 07 08	adc $0807,x			adc 	lineBuffer,x
.8ba6	e8		inx				inx
.8ba7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8baa	d0 f6		bne $8ba2			bne 	_TCHLoop
.8bac	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8baf	fa		plx				plx
.8bb0	60		rts				rts
.8bb1					FixLineBufferCase:
.8bb1	a2 00		ldx #$00			ldx 	#0
.8bb3					_FLBCLoop:
.8bb3	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get next character
.8bb6	f0 22		beq $8bda			beq 	_FLBCExit 					; end of string.
.8bb8	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8bba	f0 11		beq $8bcd			beq 	_FLBCInQuotes
.8bbc	e8		inx				inx
.8bbd	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8bbf	90 f2		bcc $8bb3			bcc 	_FLBCLoop
.8bc1	c9 7b		cmp #$7b			cmp 	#'z'+1
.8bc3	b0 ee		bcs $8bb3			bcs 	_FLBCLoop
.8bc5	38		sec				sec 								; make U/C
.8bc6	e9 20		sbc #$20			sbc 	#32
.8bc8	9d 06 08	sta $0806,x			sta	 	lineBuffer-1,x 				; write back
.8bcb	80 e6		bra $8bb3			bra 	_FLBCLoop
.8bcd					_FLBCInQuotes:
.8bcd	e8		inx				inx 								; advance
.8bce	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get next
.8bd1	f0 07		beq $8bda			beq 	_FLBCExit 					; exit on EOS
.8bd3	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8bd5	d0 f6		bne $8bcd			bne 	_FLBCInQuotes
.8bd7	e8		inx				inx 								; skip over it
.8bd8	80 d9		bra $8bb3			bra 	_FLBCLoop
.8bda					_FLBCExit:
.8bda	60		rts				rts
.8bdb					TokeniseExtractLineNumber:
.8bdb	ad 09 07	lda $0709			lda 	tokenLineNumber+1 			; push current value on stack
.8bde	48		pha				pha
.8bdf	ad 08 07	lda $0708			lda 	tokenLineNumber
.8be2	48		pha				pha
.8be3	20 19 8c	jsr $8c19			jsr 	_TELNTimes2 				; line # x 4
.8be6	20 19 8c	jsr $8c19			jsr 	_TELNTimes2 				; line # x 2
.8be9	18		clc				clc 								; add stacked value
.8bea	68		pla				pla
.8beb	6d 08 07	adc $0708			adc 	tokenLineNumber
.8bee	8d 08 07	sta $0708			sta 	tokenLineNumber
.8bf1	68		pla				pla
.8bf2	6d 09 07	adc $0709			adc 	tokenLineNumber+1
.8bf5	8d 09 07	sta $0709			sta 	tokenLineNumber+1 			; line # x 5
.8bf8	20 19 8c	jsr $8c19			jsr 	_TELNTimes2 				; line # x 10
.8bfb	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; get and consume character
.8bfe	e8		inx				inx
.8bff	29 0f		and #$0f			and 	#15 						; add to line #
.8c01	18		clc				clc
.8c02	6d 08 07	adc $0708			adc 	tokenLineNumber
.8c05	8d 08 07	sta $0708			sta 	tokenLineNumber
.8c08	90 03		bcc $8c0d			bcc 	_TLENNoCarry
.8c0a	ee 09 07	inc $0709			inc 	tokenLineNumber+1
.8c0d					_TLENNoCarry:
.8c0d	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; more digits ?
.8c10	c9 30		cmp #$30			cmp 	#'0'
.8c12	90 04		bcc $8c18			bcc 	_TLENExit
.8c14	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c16	90 c3		bcc $8bdb			bcc 	TokeniseExtractLineNumber
.8c18					_TLENExit:
.8c18	60		rts				rts
.8c19					_TELNTimes2:
.8c19	0e 08 07	asl $0708			asl 	tokenLineNumber
.8c1c	2e 09 07	rol $0709			rol 	tokenLineNumber+1
.8c1f	60		rts				rts
.8c20					TokeniseWriteByte:
.8c20	da		phx				phx
.8c21	ae 07 07	ldx $0707			ldx 	tokenOffset 				; next slot to write to
.8c24	9d 07 07	sta $0707,x			sta 	tokenOffset,x 				; write byte out
.8c27	ee 07 07	inc $0707			inc 	tokenOffset 				; advance slot.
.8c2a	fa		plx				plx
.8c2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8c2c					CheckCreateVariableRecord:
.8c2c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8c2e	85 36		sta $36				sta 	0+zTemp0
.8c30	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c32	85 37		sta $37				sta 	1+zTemp0
.8c34	20 28 88	jsr $8828			jsr 	VariableOpen 				; make variable space available
.8c37					_CCVSearch:
.8c37	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8c39	f0 2c		beq $8c67			beq 	_CCVFail
.8c3b	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8c3d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8c3f	cd 03 07	cmp $0703			cmp 	identHash
.8c42	d0 16		bne $8c5a			bne 	_CCVNext
.8c44	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8c46	ae 00 07	ldx $0700			ldx 	identStart
.8c49					_CCVCompare:
.8c49	bd 07 08	lda $0807,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8c4c	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8c4e	e8		inx				inx 								; advance pointers
.8c4f	c8		iny				iny
.8c50	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8c51	d0 07		bne $8c5a			bne 	_CCVNext  					; didn't match go to next.
.8c53	90 f4		bcc $8c49			bcc 	_CCVCompare 				; not finished yet.
.8c55	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8c58	f0 41		beq $8c9b			beq 	_CCVFound 					; yes, we were successful
.8c5a					_CCVNext:
.8c5a	18		clc				clc
.8c5b	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8c5d	65 36		adc $36				adc 	zTemp0
.8c5f	85 36		sta $36				sta 	zTemp0
.8c61	90 d4		bcc $8c37			bcc 	_CCVSearch
.8c63	e6 37		inc $37				inc 	zTemp0+1
.8c65	80 d0		bra $8c37			bra 	_CCVSearch
.8c67					_CCVFail:
.8c67	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8c69	ad 03 07	lda $0703			lda 	identHash
.8c6c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c6e	c8		iny				iny 								; offset 2 is the type byte
.8c6f	ad 04 07	lda $0704			lda 	identTypeByte
.8c72	91 36		sta ($36),y			sta 	(zTemp0),y
.8c74	c8		iny				iny
.8c75					_CCVData:
.8c75	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8c77	91 36		sta ($36),y			sta 	(zTemp0),y
.8c79	c8		iny				iny
.8c7a	c0 08		cpy #$08			cpy 	#8
.8c7c	90 f7		bcc $8c75			bcc 	_CCVData
.8c7e	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8c81					_CCVCopyName:
.8c81	bd 07 08	lda $0807,x			lda 	lineBuffer,x
.8c84	91 36		sta ($36),y			sta 	(zTemp0),y
.8c86	e8		inx				inx
.8c87	c8		iny				iny
.8c88	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8c8b	d0 f4		bne $8c81			bne 	_CCVCopyName
.8c8d	98		tya				tya 								; patch offset
.8c8e	92 36		sta ($36)			sta 	(zTemp0)
.8c90	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8c92	91 36		sta ($36),y			sta 	(zTemp0),y
.8c94	88		dey				dey
.8c95	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8c97	09 80		ora #$80			ora 	#$80
.8c99	91 36		sta ($36),y			sta 	(zTemp0),y
.8c9b					_CCVFound:
.8c9b	20 29 88	jsr $8829			jsr 	VariableClose 				; map out variables, perhaps.
.8c9e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8ca0	38		sec				sec
.8ca1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8ca3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8ca5	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8ca8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8caa	20 20 8c	jsr $8c20			jsr 	TokeniseWriteByte
.8cad	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
