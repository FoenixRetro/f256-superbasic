
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 13:06:17 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 ca 92	jsr $92ca			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 8b 84	jsr $848b			jsr 	RunDemos
.8013	20 ad 8c	jsr $8cad			jsr 	NewCommand 					; erase current program
.8016	20 4f 9f	jsr $9f4f			jsr 	BackloadProgram
.8019	4c 09 88	jmp $8809			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1048."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 30 34 38 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
=$5f7					pixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 5b 85	jsr $855b			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 d2 84	jsr $84d2			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 e3 84	jsr $84e3			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 f0 84	jsr $84f0			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 d2 84	jsr $84d2			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 e3 84	jsr $84e3			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 d2 84	jsr $84d2			jsr 	GXOpenBitmap
.8216	20 79 85	jsr $8579			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 f0 84	jsr $84f0			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3a		sta ($3a),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 e3 84	jsr $84e3			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.82ad	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3b		sta $3b				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.82ca	a5 3b		lda $3b				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3b		sta $3b				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 40 85	jsr $8540			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 d2 84	jsr $84d2			jsr 	GXOpenBitmap 				; start drawing
.8345	20 5b 85	jsr $855b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 f0 84	jsr $84f0			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 40 85	jsr $8540			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 e3 84	jsr $84e3			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3b		lda $3b				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	_GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3b		lda $3b				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3b		sta $3b				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	_GXDLTCheckWrap 			; fix up.
.83d0	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3a		sta ($3a),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3b		sta $3b				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3a		sta $3a				sta 	gsTemp
.83e7	60		rts				rts
.83e8					_GXDLTCheckWrap:
.83e8	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3b		sta $3b				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.83f5					GraphicDraw:
.83f5	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.83f7	b0 06		bcs $83ff			bcs 	_GDCoordinate
.83f9	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.83fb	84 37		sty $37				sty 	gzTemp0+1
.83fd	80 2c		bra $842b			bra 	_GDExecuteA 				; and execute
.83ff					_GDCoordinate:
.83ff	48		pha				pha 								; save AXY
.8400	da		phx				phx
.8401	5a		phy				phy
.8402	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8404					_GDCopy1:
.8404	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8407	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.840a	ca		dex				dex
.840b	10 f7		bpl $8404			bpl 	_GDCopy1
.840d	68		pla				pla 								; update Y
.840e	8d 2b 06	sta $062b			sta 	gxCurrentY
.8411	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8414	68		pla				pla
.8415	8d 29 06	sta $0629			sta 	gxCurrentX
.8418	68		pla				pla 								; get A (command+X.1) back
.8419	48		pha				pha
.841a	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.841c	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.841f	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.8421					_GDCopy2:
.8421	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8424	9d 31 06	sta $0631,x			sta 	gxX0,x
.8427	ca		dex				dex
.8428	10 f7		bpl $8421			bpl 	_GDCopy2
.842a	68		pla				pla 								; get command back
.842b					_GDExecuteA:
.842b	29 fe		and #$fe			and 	#$FE 						; lose LSB
.842d	aa		tax				tax
.842e	7c 32 84	jmp ($8432,x)			jmp 	(GDVectors,x)
.8431					GXMove:
.8431	60		rts				rts
.8432					GDVectors:
>8432							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>8436	c9 81						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>8438	5e 84						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>843a							.fill 	12*2 						; $03-$0F 	: Reserved
>8452	31 84						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8454	13 82						.word 	GXLine 						; $11 		: Draw line
>8456	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8458	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>845a	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>845c	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
.845e					GXSetColourMode:
.845e	a6 36		ldx $36				ldx 	gzTemp0
.8460	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.8463	a5 37		lda $37				lda 	gzTemp0+1 								;
.8465	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.8468	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.846a	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.846d	ae 3c 06	ldx $063c			ldx 	gxColour
.8470	8e 3d 06	stx $063d			stx 	gxEORValue
.8473	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8475	90 03		bcc $847a			bcc 	_GXSDCNotAndColour
.8477	8e 3e 06	stx $063e			stx 	gxANDValue
.847a					_GXSDCNotAndColour:
.847a	d0 03		bne $847f			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.847c	9c 3d 06	stz $063d			stz 	gxEORValue
.847f					_GXSDCNotAnd:
.847f	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8480	90 08		bcc $848a			bcc 	_GXSDCNoFlip
.8482	ad 3e 06	lda $063e			lda	 	gxANDValue
.8485	49 ff		eor #$ff			eor 	#$FF
.8487	8d 3e 06	sta $063e			sta 	gxANDValue
.848a					_GXSDCNoFlip:
.848a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.848b					RunDemos:
.848b	64 01		stz $01				stz 	1
.848d	a9 0f		lda #$0f			lda 	#$0F
.848f	8d 00 d0	sta $d000			sta 	$D000
.8492	a9 01		lda #$01			lda 	#1
.8494	8d 00 d1	sta $d100			sta 	$D100
.8497	9c 01 d1	stz $d101			stz 	$D101
.849a	9c 02 d1	stz $d102			stz 	$D102
.849d	a9 02		lda #$02			lda 	#2
.849f	8d 03 d1	sta $d103			sta 	$D103
.84a2	a9 10		lda #$10			lda 	#16
.84a4	8d 39 06	sta $0639			sta 	gxBasePage
.84a7	a9 f0		lda #$f0			lda 	#240
.84a9	8d 3a 06	sta $063a			sta 	gxHeight
.84ac					loop:
.84ac	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.84ae	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.84b0	a0 00		ldy #$00			ldy 	#(0)
.84b2	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84b5	a9 06		lda #$06			lda 	#((3)*2)+((($1C) >> 8) & 1)
.84b7	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.84b9	a0 01		ldy #$01			ldy 	#(1)
.84bb	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84be	20 da 9b	jsr $9bda	demo:	jsr 	Random32Bit
.84c1	ee 3d 06	inc $063d			inc 	gxEORValue
.84c4	a9 28		lda #$28			lda 	#20*2
.84c6	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.84c9	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.84cc	20 f5 83	jsr $83f5			jsr 	GraphicDraw
.84cf	80 ed		bra $84be			bra 	demo
.84d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.84d2					GXOpenBitmap:
.84d2	78		sei				sei 								; no interrupts here
.84d3	a5 00		lda $00				lda 	0 							; save original MMU Control register
.84d5	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.84d8	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.84da	85 00		sta $00				sta 	0
.84dc	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.84de	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.84e1	58		cli				cli
.84e2	60		rts				rts
.84e3					GXCloseBitmap:
.84e3	78		sei				sei
.84e4	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.84e7	85 0b		sta $0b				sta 	GFXEditSlot
.84e9	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.84ec	85 00		sta $00				sta 	0
.84ee	58		cli				cli
.84ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.84f0					GXPositionCalc:
.84f0	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.84f3	85 3a		sta $3a				sta 	gsTemp
.84f5	64 3b		stz $3b				stz 	gsTemp+1
.84f7	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.84f9	26 3b		rol $3b				rol 	gsTemp+1
.84fb	06 3a		asl $3a				asl 	gsTemp
.84fd	26 3b		rol $3b				rol 	gsTemp+1
.84ff	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8500	65 3a		adc $3a				adc 	gsTemp
.8502	85 3a		sta $3a				sta 	gsTemp
.8504	90 02		bcc $8508			bcc 	_GXPCNoCarry
.8506	e6 3b		inc $3b				inc 	gsTemp+1
.8508					_GXPCNoCarry:
.8508	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.850a	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.850c	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.850e	85 36		sta $36				sta 	gzTemp0
.8510	64 3b		stz $3b				stz 	gsTemp+1
.8512	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8514					_GXPCMultiply32:
.8514	06 3a		asl $3a				asl 	gsTemp
.8516	26 3b		rol $3b				rol 	gsTemp+1
.8518	3a		dec a				dec 	a
.8519	d0 f9		bne $8514			bne 	_GXPCMultiply32
.851b	18		clc				clc
.851c	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.851f	65 3a		adc $3a				adc 	gsTemp
.8521	8d 41 06	sta $0641			sta 	gsOffset
.8524	ad 32 06	lda $0632			lda 	GXX0+1
.8527	65 3b		adc $3b				adc 	gsTemp+1
.8529	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.852b	90 04		bcc $8531			bcc 	_GXPCNoOverflow
.852d	29 1f		and #$1f			and 	#$1F 						; fix it up
.852f	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8531					_GXPCNoOverflow:
.8531	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8533	85 3b		sta $3b				sta 	gsTemp+1
.8535	64 3a		stz $3a				stz 	gsTemp
.8537	18		clc				clc
.8538	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.853a	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.853d	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.853f	60		rts				rts
.8540					GXMovePositionDown:
.8540	18		clc				clc 								; add 320 to offset/temp+1
.8541	ad 41 06	lda $0641			lda 	gsOffset
.8544	69 40		adc #$40			adc 	#64
.8546	8d 41 06	sta $0641			sta 	gsOffset
.8549	a5 3b		lda $3b				lda 	gsTemp+1
.854b	69 01		adc #$01			adc 	#1
.854d	85 3b		sta $3b				sta 	gsTemp+1
.854f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8551	90 07		bcc $855a			bcc 	_GXMPDExit
.8553	38		sec				sec  								; next page
.8554	e9 20		sbc #$20			sbc 	#$20
.8556	85 3b		sta $3b				sta 	gsTemp+1
.8558	e6 0b		inc $0b				inc 	GFXEditSlot
.855a					_GXMPDExit:
.855a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.855b					GXSortXY:
.855b	20 79 85	jsr $8579			jsr 	GXSortY 					; will be sorted on Y now
.855e	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8561	cd 35 06	cmp $0635			cmp 	gxX1
.8564	ad 32 06	lda $0632			lda 	gXX0+1
.8567	ed 36 06	sbc $0636			sbc 	gXX1+1
.856a	90 0c		bcc $8578			bcc 	_GXSXYExit 					; X0 < X1 exit
.856c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.856e	a0 04		ldy #$04			ldy 	#4
.8570	20 8d 85	jsr $858d			jsr 	GXSwapXY
.8573	e8		inx				inx
.8574	c8		iny				iny
.8575	20 8d 85	jsr $858d			jsr 	GXSwapXY
.8578					_GXSXYExit:
.8578	60		rts				rts
.8579					GXSortY:
.8579	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.857c	cd 37 06	cmp $0637			cmp 	gxY1
.857f	90 0b		bcc $858c			bcc 	_GXSYSorted
.8581	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8583	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8585					_GXSwap1:
.8585	20 8d 85	jsr $858d			jsr 	GXSwapXY
.8588	88		dey				dey
.8589	ca		dex				dex
.858a	10 f9		bpl $8585			bpl 	_GXSwap1
.858c					_GXSYSorted:
.858c	60		rts				rts
.858d					GXSwapXY:
.858d	bd 31 06	lda $0631,x			lda 	gxX0,x
.8590	48		pha				pha
.8591	b9 31 06	lda $0631,y			lda 	gxX0,y
.8594	9d 31 06	sta $0631,x			sta 	gxX0,x
.8597	68		pla				pla
.8598	99 31 06	sta $0631,y			sta 	gxX0,y
.859b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.859c					AssembleGroup1:
.859c	a9 ff		lda #$ff			lda 	#$FF
.859e	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.85a1	80 02		bra $85a5			bra 	AsmGroup12
.85a3					AssembleGroup2:
.85a3	a5 00		lda $00				lda 	$00
.85a5					AsmGroup12:
.85a5	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.85a8	68		pla				pla 								; pop the return address to access the information following.
.85a9	fa		plx				plx
.85aa	20 33 86	jsr $8633			jsr 	AccessParameters 			; get opcode and save as base
.85ad	8d a4 04	sta $04a4			sta 	BaseOpcode
.85b0	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.85b3	d0 08		bne $85bd			bne 	_AG12HaveMask
.85b5	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.85b7	20 3b 86	jsr $863b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.85ba	8d a5 04	sta $04a5			sta 	ModeMask
.85bd					_AG12HaveMask:
.85bd	20 76 87	jsr $8776			jsr 	TypeAndCalculateOperand 	; get zero page type
.85c0	da		phx				phx 								; save found address mode
.85c1	20 9f 86	jsr $869f			jsr 	AssembleModeX
.85c4	fa		plx				plx  								; restore address mode
.85c5	b0 0b		bcs $85d2			bcs 	_AG12Exit
.85c7	20 d3 85	jsr $85d3			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.85ca	20 9f 86	jsr $869f			jsr 	AssembleModeX
.85cd	b0 03		bcs $85d2			bcs 	_AG12Exit
.85cf	4c 90 ab	jmp $ab90			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.85d2					_AG12Exit:
.85d2	60		rts				rts
.85d3					PromoteToAbsolute:
.85d3	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.85d5	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.85d7	f0 19		beq $85f2			beq 	_PTADo
.85d9	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.85db	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.85dd	f0 13		beq $85f2			beq 	_PTADo
.85df	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.85e1	e0 80		cpx #$80			cpx 	#AM_ZEROY
.85e3	f0 0d		beq $85f2			beq 	_PTADo
.85e5	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.85e7	e0 d1		cpx #$d1			cpx 	#AM_IND
.85e9	f0 07		beq $85f2			beq 	_PTADo
.85eb	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.85ed	e0 c0		cpx #$c0			cpx 	#AM_INDX
.85ef	f0 01		beq $85f2			beq 	_PTADo
.85f1	60		rts				rts
.85f2					_PTADo:
.85f2	aa		tax				tax
.85f3	60		rts				rts
.85f4					AssembleGroup3:
.85f4	68		pla				pla 								; get parameters, which is just the opcode.
.85f5	fa		plx				plx
.85f6	20 33 86	jsr $8633			jsr 	AccessParameters 			; get and output opcode
.85f9	20 4b 86	jsr $864b			jsr 	AssemblerWriteByte
.85fc	20 da 87	jsr $87da			jsr 	CalculateOperand 			; get a 16 bit operand
.85ff	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8602	38		sec				sec
.8603	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8606	48		pha				pha 								; LSB in A
.8607	ad 10 04	lda $0410			lda 	NSMantissa1
.860a	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.860d	aa		tax				tax 								; MSB in X
.860e	68		pla				pla
.860f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8610	69 7f		adc #$7f			adc 	#$7F
.8612	90 01		bcc $8615			bcc 	_AG3NoCarry
.8614	e8		inx				inx
.8615					_AG3NoCarry:
.8615	38		sec				sec 								; fix back and write out anyways.
.8616	e9 80		sbc #$80			sbc 	#$80
.8618	20 4b 86	jsr $864b			jsr 	AssemblerWriteByte
.861b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.861d	f0 0a		beq $8629			beq 	_AG3Exit
.861f	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8622	29 01		and #$01			and 	#1
.8624	f0 03		beq $8629			beq 	_AG3Exit
.8626	4c 95 ab	jmp $ab95			jmp 	RangeError 					; no, branch is out of range
.8629					_AG3Exit:
.8629	60		rts				rts
.862a					AssembleGroup4:
.862a	68		pla				pla 								; pop address
.862b	fa		plx				plx
.862c	20 33 86	jsr $8633			jsr 	AccessParameters 			; access and get first
.862f	20 4b 86	jsr $864b			jsr 	AssemblerWriteByte 			; output it.
.8632	60		rts				rts
.8633					AccessParameters:
.8633	8d a1 04	sta $04a1			sta 	ParamStart
.8636	8e a2 04	stx $04a2			stx 	ParamStart+1
.8639	a9 01		lda #$01			lda 	#1
.863b					GetParameter:
.863b	5a		phy				phy
.863c	a8		tay				tay
.863d	ad a1 04	lda $04a1			lda 	ParamStart
.8640	85 36		sta $36				sta 	zTemp0
.8642	ad a2 04	lda $04a2			lda 	ParamStart+1
.8645	85 37		sta $37				sta 	zTemp0+1
.8647	b1 36		lda ($36),y			lda 	(zTemp0),y
.8649	7a		ply				ply
.864a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.864b					AssemblerWriteByte:
.864b	48		pha			pha
.864c	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.864f	29 02		and #$02		and 	#2
.8651	f0 1b		beq $866e		beq 	_AWBNoPrint
.8653	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8656	20 89 86	jsr $8689		jsr 	PrintHex
.8659	ad 9e 04	lda $049e		lda		AssemblerAddress
.865c	20 89 86	jsr $8689		jsr 	PrintHex
.865f	a9 20		lda #$20		lda 	#' '
.8661	20 34 ad	jsr $ad34		jsr 	EXTPrintCharacter
.8664	68		pla			pla 									; print byte
.8665	48		pha			pha
.8666	20 89 86	jsr $8689		jsr 	PrintHex
.8669	a9 0d		lda #$0d		lda 	#13
.866b	20 34 ad	jsr $ad34		jsr 	EXTPrintCharacter
.866e					_AWBNoPrint:
.866e	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8671	85 36		sta $36			sta 	zTemp0
.8673	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8676	f0 0e		beq $8686		beq 	_AWBRange
.8678	85 37		sta $37			sta 	zTemp0+1
.867a	68		pla			pla 									; write byte out
.867b	92 36		sta ($36)		sta 	(zTemp0)
.867d	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8680	d0 03		bne $8685		bne 	_AWBNoCarry
.8682	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8685					_AWBNoCarry:
.8685	60		rts			rts
.8686					_AWBRange:
.8686	4c 95 ab	jmp $ab95		jmp 	RangeError
.8689					PrintHex:
.8689	48		pha				pha
.868a	4a		lsr a				lsr 	a
.868b	4a		lsr a				lsr 	a
.868c	4a		lsr a				lsr 	a
.868d	4a		lsr a				lsr 	a
.868e	20 92 86	jsr $8692			jsr 	_PrintNibble
.8691	68		pla				pla
.8692					_PrintNibble:
.8692	29 0f		and #$0f			and 	#15
.8694	c9 0a		cmp #$0a			cmp 	#10
.8696	90 02		bcc $869a			bcc 	_NoShift
.8698	69 06		adc #$06			adc 	#6
.869a					_NoShift:
.869a	69 30		adc #$30			adc 	#48
.869c	4c 34 ad	jmp $ad34			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.869f					AssembleModeX:
.869f	5a		phy				phy
.86a0	ad a3 04	lda $04a3			lda 	IsGroup1
.86a3	f0 17		beq $86bc			beq 	_AMXGroup2
.86a5	8a		txa				txa 							; is it in group # 1
.86a6	29 40		and #$40			and 	#AM_ISG1
.86a8	f0 50		beq $86fa			beq 	_AMXFail 				; no, give up.
.86aa	8a		txa				txa 							; get back.
.86ab	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.86ad	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.86af	d0 22		bne $86d3			bne 	_AMXHaveInfo
.86b1	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.86b4	c9 81		cmp #$81			cmp 	#$81
.86b6	f0 42		beq $86fa			beq 	_AMXFail
.86b8	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.86ba	80 17		bra $86d3			bra 	_AMXHaveInfo 			; odd design decision there.
.86bc					_AMXGroup2:
.86bc	8a		txa				txa 							; is it in group 2 ?
.86bd	29 20		and #$20			and 	#AM_ISG2
.86bf	f0 39		beq $86fa			beq 	_AMXFail 				; no, give up.
.86c1	8a		txa				txa 							; get the offset into Y
.86c2	29 1f		and #$1f			and 	#$1F
.86c4	4a		lsr a				lsr 	a 						; make it 0-7.
.86c5	4a		lsr a				lsr  	a
.86c6	a8		tay				tay
.86c7	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.86ca					_AMXCheckOkay:
.86ca	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.86cb	88		dey				dey
.86cc	10 fc		bpl $86ca			bpl 	_AMXCheckOkay
.86ce	90 2a		bcc $86fa			bcc 	_AMXFail 				; not allowed.
.86d0	8a		txa				txa  							; get mask back
.86d1	29 1f		and #$1f			and 	#$1F
.86d3					_AMXHaveInfo:
.86d3	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.86d5	10 05		bpl $86dc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.86d7	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.86da	d0 1e		bne $86fa			bne 	_AMXFail
.86dc					_AMXAnySize:
.86dc	18		clc				clc 							; add offset to the base opcode
.86dd	6d a4 04	adc $04a4			adc 	BaseOpcode
.86e0					_AMXOutputCode:
.86e0	20 4b 86	jsr $864b			jsr 	AssemblerWriteByte 		; write the opcode out.
.86e3	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.86e5	f0 10		beq $86f7			beq 	_AMXExit
.86e7	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.86ea	20 4b 86	jsr $864b			jsr 	AssemblerWriteByte
.86ed	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.86ef	30 06		bmi $86f7			bmi 	_AMXExit
.86f1	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.86f4	20 4b 86	jsr $864b			jsr 	AssemblerWriteByte
.86f7					_AMXExit:
.86f7	7a		ply				ply
.86f8	38		sec				sec
.86f9	60		rts				rts
.86fa					_AMXFail:
.86fa	a0 00		ldy #$00			ldy 	#0
.86fc					_AMXCheckOddities:
.86fc	8a		txa				txa
.86fd	d9 25 87	cmp $8725,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8700	d0 16		bne $8718			bne 	_AMXCONext
.8702	b9 23 87	lda $8723,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8705	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8708	d0 0e		bne $8718			bne 	_AMXCONext
.870a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.870c	10 05		bpl $8713			bpl 	_AMXCONotZero
.870e	ad 10 04	lda $0410			lda 	NSMantissa1
.8711	d0 05		bne $8718			bne 	_AMXCONext
.8713					_AMXCONotZero:
.8713	b9 24 87	lda $8724,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8716	80 c8		bra $86e0			bra 	_AMXOutputCode 			; and assemble it
.8718					_AMXCONext:
.8718	c8		iny				iny
.8719	c8		iny				iny
.871a	c8		iny				iny
.871b	b9 23 87	lda $8723,y			lda 	ExtraOpcode+0,y 		; end of table
.871e	d0 dc		bne $86fc			bne 	_AMXCheckOddities
.8720					_AMXCOFail:
.8720	7a		ply				ply
.8721	18		clc				clc
.8722	60		rts				rts
.8723					ExtraOpcode:
>8723	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8726	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8729	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>872c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>872f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8732	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8735	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8738	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>873b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>873e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8741	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8742					LabelHere:
.8742	c8		iny				iny 								; skip .
.8743	a2 00		ldx #$00			ldx 	#0 							; get a term
.8745	20 4b 99	jsr $994b			jsr 	EvaluateTerm 				; get a term
.8748	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.874b	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.874d	d0 24		bne $8773			bne 	_ALType
.874f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8752	85 36		sta $36				sta 	zTemp0
.8754	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8757	85 37		sta $37				sta 	zTemp0+1
.8759	5a		phy				phy 								; copy address in.
.875a	a0 01		ldy #$01			ldy 	#1
.875c	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.875f	92 36		sta ($36)			sta 	(zTemp0)
.8761	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8764	91 36		sta ($36),y			sta 	(zTemp0),y
.8766	c8		iny				iny
.8767	a9 00		lda #$00			lda 	#0
.8769	91 36		sta ($36),y			sta 	(zTemp0),y
.876b	c8		iny				iny
.876c	91 36		sta ($36),y			sta 	(zTemp0),y
.876e	c8		iny				iny
.876f	91 36		sta ($36),y			sta 	(zTemp0),y
.8771	7a		ply				ply
.8772	60		rts				rts
.8773					_ALType:
.8773	4c 9a ab	jmp $ab9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8776					TypeAndCalculateOperand:
.8776	b1 30		lda ($30),y			lda 	(codePtr),y
.8778	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.877a	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.877c	f0 5b		beq $87d9			beq 	_TACOExit
.877e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8780	f0 57		beq $87d9			beq 	_TACOExit
.8782	c8		iny				iny
.8783	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8785	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8787	f0 51		beq $87da			beq 	CalculateOperand
.8789	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.878b	f0 1f		beq $87ac			beq 	_TACOIndirect
.878d	88		dey				dey 								; undo get of first character
.878e	20 da 87	jsr $87da			jsr 	CalculateOperand 			; get operand
.8791	b1 30		lda ($30),y			lda 	(codePtr),y
.8793	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8795	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8797	d0 40		bne $87d9			bne 	_TACOExit
.8799	c8		iny				iny
.879a	20 21 a5	jsr $a521			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.879d	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.879f	c9 58		cmp #$58			cmp 	#'X'
.87a1	f0 36		beq $87d9			beq 	_TACOExit
.87a3	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.87a5	c9 59		cmp #$59			cmp 	#'Y'
.87a7	f0 30		beq $87d9			beq 	_TACOExit
.87a9					_TACOSyntax:
.87a9	4c 90 ab	jmp $ab90			jmp 	SyntaxError
.87ac					_TACOIndirect:
.87ac	20 da 87	jsr $87da			jsr 	CalculateOperand 			; get the operand
.87af	b1 30		lda ($30),y			lda 	(codePtr),y
.87b1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.87b3	f0 17		beq $87cc			beq 	_TACOIndX
.87b5	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.87b8	b1 30		lda ($30),y			lda 	(codePtr),y
.87ba	a2 d1		ldx #$d1			ldx 	#AM_IND
.87bc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.87be	d0 19		bne $87d9			bne 	_TACOExit
.87c0	c8		iny				iny
.87c1	20 21 a5	jsr $a521			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.87c4	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.87c6	d0 e1		bne $87a9			bne 	_TACOSyntax
.87c8	a2 d0		ldx #$d0			ldx 	#AM_INDY
.87ca	80 0d		bra $87d9			bra 	_TACOExit
.87cc					_TACOIndX:
.87cc	c8		iny				iny
.87cd	20 21 a5	jsr $a521			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.87d0	c9 58		cmp #$58			cmp 	#'X' 						; check X
.87d2	d0 d5		bne $87a9			bne 	_TACOSyntax
.87d4	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket			; check )
.87d7	a2 c0		ldx #$c0			ldx 	#AM_INDX
.87d9					_TACOExit:
.87d9	60		rts				rts
.87da					CalculateOperand:
.87da	48		pha				pha
.87db	da		phx				phx
.87dc	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.87de	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger
.87e1	fa		plx				plx
.87e2	68		pla				pla
.87e3	60		rts				rts
.a521					TACOCheckXY:
.a521	b1 30		lda ($30),y			lda 	(codePtr),y
.a523	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a525	c9 40		cmp #$40			cmp 	#$40
.a527	d0 21		bne $a54a			bne 	_TCXYFail
.a529	b1 30		lda ($30),y			lda 	(codePtr),y
.a52b	18		clc				clc
.a52c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a52e	85 37		sta $37				sta 	zTemp0+1
.a530	c8		iny				iny
.a531	b1 30		lda ($30),y			lda 	(codePtr),y
.a533	c8		iny				iny
.a534	85 36		sta $36				sta 	zTemp0
.a536	5a		phy				phy 								; save position
.a537	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a539	b1 36		lda ($36),y			lda 	(zTemp0),y
.a53b	d0 0c		bne $a549			bne 	_TCXYPopFail
.a53d	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a53f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a541	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a543	f0 08		beq $a54d			beq 	_TCXYFound
.a545	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a547	f0 04		beq $a54d			beq 	_TCXYFound
.a549					_TCXYPopFail:
.a549	7a		ply				ply
.a54a					_TCXYFail:
.a54a	a9 00		lda #$00			lda 	#0
.a54c	60		rts				rts
.a54d					_TCXYFound:
.a54d	7a		ply				ply 								; restore position
.a54e	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a550	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87e4					EditProgramCode:
.87e4	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.87e7	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.87ea	20 88 9e	jsr $9e88			jsr 	MemorySearch
.87ed	90 05		bcc $87f4			bcc 	_EPCNoDelete 				; reached the end don't delete
.87ef	d0 03		bne $87f4			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.87f1	20 78 ad	jsr $ad78			jsr 	MemoryDeleteLine 			; delete the line
.87f4					_EPCNoDelete:
.87f4	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.87f7	c9 80		cmp #$80			cmp 	#KWC_EOL
.87f9	f0 0d		beq $8808			beq 	_EPCNoInsert
.87fb	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.87fe	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8801	20 88 9e	jsr $9e88			jsr 	MemorySearch
.8804	18		clc				clc 								; insert at this point.
.8805	20 af ad	jsr $adaf			jsr 	MemoryInsertLine 			; insert the line
.8808					_EPCNoInsert:
.8808	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8809					WarmStart:
.8809	a2 ff		ldx #$ff			ldx 	#$FF
.880b	9a		txs				txs
.880c	20 4a ad	jsr $ad4a			jsr 	EXTInputLine 				; get line to lineBuffer
.880f	20 a2 a2	jsr $a2a2			jsr 	TokeniseLine 				; tokenise the line
.8812	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8815	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8818	d0 17		bne $8831			bne 	_WSEditCode 				; if so,edit code.
.881a	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.881d	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.881f	85 30		sta $30				sta 	codePtr
.8821	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8823	85 31		sta $31				sta 	codePtr+1
.8825	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8828	c9 80		cmp #$80			cmp 	#KWC_EOL
.882a	f0 dd		beq $8809			beq 	WarmStart
.882c	20 3a 8e	jsr $8e3a			jsr 	RUNCodePointerLine 			; execute that line.
.882f	80 d8		bra $8809			bra 	WarmStart
.8831					_WSEditCode:
.8831	20 e4 87	jsr $87e4			jsr 	EditProgramCode
.8834	20 a2 88	jsr $88a2			jsr 	ClearCommand
.8837	80 d0		bra $8809			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8839					AssembleCommand:
.8839	a2 00		ldx #$00			ldx 	#0
.883b	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger 		; start address
.883e	ad 08 04	lda $0408			lda 	NSMantissa0
.8841	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8844	ad 10 04	lda $0410			lda 	NSMantissa1
.8847	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.884a	20 b2 a5	jsr $a5b2			jsr 	CheckComma
.884d	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger 		; options
.8850	ad 08 04	lda $0408			lda 	NSMantissa0
.8853	8d a0 04	sta $04a0			sta 	AssemblerControl
.8856	60		rts				rts
.8857	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8858					AssertCommand:
.8858	a2 00		ldx #$00			ldx 	#0
.885a	20 a0 9d	jsr $9da0			jsr 	EvaluateInteger 			; the assert test
.885d	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; exit if result is non zero.
.8860	d0 05		bne $8867			bne 	_ACExit
.8862	a9 0a		lda #$0a		lda	#10
.8864	4c 71 92	jmp $9271		jmp	ErrorHandler
.8867					_ACExit:
.8867	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8868					CallCommand:
.8868	a2 00		ldx #$00			ldx 	#0
.886a	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger
.886d					_CCClear
.886d	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.886e	20 29 9e	jsr $9e29			jsr 	NSMSetZero
.8871	e0 04		cpx #$04			cpx 	#4
.8873	d0 f8		bne $886d			bne 	_CCClear
.8875	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8877					_CCCParam:
.8877	b1 30		lda ($30),y			lda 	(codePtr),y
.8879	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.887b	d0 09		bne $8886			bne 	_CCCRun6502
.887d	c8		iny				iny 								; skip comma
.887e	e8		inx				inx	 								; next level
.887f	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8882	e0 03		cpx #$03			cpx 	#3
.8884	90 f1		bcc $8877			bcc 	_CCCParam 					; done all 3 ?
.8886					_CCCRun6502:
.8886	5a		phy				phy 								; save position
.8887	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.888a	85 37		sta $37				sta 	zTemp0+1
.888c	ad 08 04	lda $0408			lda 	NSMantissa0
.888f	85 36		sta $36				sta 	zTemp0
.8891	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8894	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8897	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.889a	20 9f 88	jsr $889f			jsr 	_CCCZTemp0 					; call zTemp0
.889d	7a		ply				ply 								; restore position and exit
.889e	60		rts				rts
.889f					_CCCZTemp0:
.889f	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.88a2					ClearCommand:
.88a2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.88a4	85 36		sta $36				sta 	0+zTemp0
.88a6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.88a8	85 37		sta $37				sta 	1+zTemp0
.88aa					_ClearZeroLoop:
.88aa	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.88ac	f0 24		beq $88d2			beq 	_ClearZeroEnd
.88ae	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.88b0	a9 00		lda #$00			lda 	#0
.88b2					_ClearOneVariable:
.88b2	91 36		sta ($36),y			sta 	(zTemp0),y
.88b4	c8		iny				iny
.88b5	c0 08		cpy #$08			cpy 	#8
.88b7	d0 f9		bne $88b2			bne 	_ClearOneVariable
.88b9	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.88bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.88bd	c9 18		cmp #$18			cmp 	#NSTProcedure
.88bf	d0 04		bne $88c5			bne 	_ClearNotProcedure
.88c1	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.88c3	91 36		sta ($36),y			sta 	(zTemp0),y
.88c5					_ClearNotProcedure:
.88c5	18		clc				clc 								; go to the next variable
.88c6	b2 36		lda ($36)			lda 	(zTemp0)
.88c8	65 36		adc $36				adc 	zTemp0
.88ca	85 36		sta $36				sta 	zTemp0
.88cc	90 dc		bcc $88aa			bcc 	_ClearZeroLoop
.88ce	e6 37		inc $37				inc 	zTemp0+1
.88d0	80 d8		bra $88aa			bra 	_ClearZeroLoop
.88d2					_ClearZeroEnd:
.88d2	18		clc				clc
.88d3	a5 36		lda $36				lda 	zTemp0
.88d5	69 01		adc #$01			adc 	#1
.88d7	8d 8c 04	sta $048c			sta 	lowMemPtr
.88da	a5 37		lda $37				lda 	zTemp0+1
.88dc	69 00		adc #$00			adc 	#0
.88de	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.88e1	20 42 9f	jsr $9f42			jsr 	StackReset
.88e4	20 92 ae	jsr $ae92			jsr 	StringSystemInitialise
.88e7	20 91 91	jsr $9191			jsr 	ProcedureScan
.88ea	20 f6 8d	jsr $8df6			jsr 	Command_Restore
.88ed	9c 9e 04	stz $049e			stz 	AssemblerAddress
.88f0	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.88f3	9c a0 04	stz $04a0			stz 	AssemblerControl
.88f6	20 38 9b	jsr $9b38			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.88f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.88fa					Command_Data:
.88fa	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.88fc	a2 80		ldx #$80			ldx 	#KWC_EOL
.88fe	20 e3 91	jsr $91e3			jsr 	ScanForward
.8901	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8902					DimCommand:
.8902	b1 30		lda ($30),y			lda 	(codePtr),y
.8904	29 c0		and #$c0			and 	#$C0
.8906	c9 40		cmp #$40			cmp 	#$40
.8908	d0 7a		bne $8984			bne 	_DCSyntax
.890a	b1 30		lda ($30),y			lda 	(codePtr),y
.890c	18		clc				clc
.890d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.890f	85 3f		sta $3f				sta 	zaTemp+1
.8911	c8		iny				iny
.8912	b1 30		lda ($30),y			lda 	(codePtr),y
.8914	c8		iny				iny
.8915	85 3e		sta $3e				sta 	zaTemp
.8917	5a		phy				phy
.8918	a0 02		ldy #$02			ldy 	#2 						; read type byte
.891a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.891c	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.891e	c9 18		cmp #$18			cmp 	#NSTProcedure
.8920	f0 62		beq $8984			beq 	_DCSyntax
.8922	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8924	29 04		and #$04			and 	#NSBIsArray
.8926	f0 64		beq $898c			beq 	_DCType
.8928	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.892a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.892c	d0 59		bne $8987			bne 	_DCRedefine
.892e	7a		ply				ply
.892f	20 8f 89	jsr $898f			jsr 	_DCGetSize 				; get array size, check it.
.8932	5a		phy				phy
.8933	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8935	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8937	7a		ply				ply 							; is there a second (e.g. ,x)
.8938	b1 30		lda ($30),y			lda 	(codePtr),y
.893a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.893c	d0 0a		bne $8948			bne 	_DCOneDimension
.893e	c8		iny				iny 							; skip comma
.893f	20 8f 89	jsr $898f			jsr 	_DCGetSize 				; get 2nd array size
.8942	5a		phy				phy
.8943	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8945	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8947	7a		ply				ply
.8948					_DCOneDimension:
.8948	5a		phy				phy 							; save position
.8949	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.894b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.894d	aa		tax				tax
.894e	c8		iny				iny
.894f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8951	e8		inx				inx 							; bump them.
.8952	1a		inc a				inc 	a
.8953	20 2c aa	jsr $aa2c			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8956	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8958	29 e0		and #$e0			and 	#$E0
.895a	d0 23		bne $897f			bne 	_DCSize
.895c	a0 02		ldy #$02			ldy 	#2 						; get base type
.895e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8960	20 9d 89	jsr $899d			jsr 	ScaleByBaseType 		; scale by base type
.8963	a5 36		lda $36				lda 	zTemp0
.8965	a6 37		ldx $37				ldx 	zTemp0+1
.8967	20 fa 9a	jsr $9afa			jsr 	AllocateXABytes 		; allocate memory
.896a	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.896c	91 3e		sta ($3e),y			sta 	(zaTemp),y
.896e	c8		iny				iny
.896f	8a		txa				txa
.8970	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8972	7a		ply				ply 							; get position back
.8973	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 		; check )
.8976	b1 30		lda ($30),y			lda 	(codePtr),y
.8978	c8		iny				iny 							; consume in case
.8979	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.897b	f0 85		beq $8902			beq 	DimCommand
.897d	88		dey				dey 							; undo consume
.897e	60		rts				rts
.897f					_DCSize:
.897f	a9 16		lda #$16		lda	#22
.8981	4c 71 92	jmp $9271		jmp	ErrorHandler
.8984					_DCSyntax:
.8984	4c 90 ab	jmp $ab90			jmp 	SyntaxError
.8987					_DCRedefine:
.8987	a9 15		lda #$15		lda	#21
.8989	4c 71 92	jmp $9271		jmp	ErrorHandler
.898c					_DCType:
.898c	4c 9a ab	jmp $ab9a			jmp 	TypeError
.898f					_DCGetSize:
.898f	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8991	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger 	; get array dimension
.8994	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8996	f0 e7		beq $897f			beq 	_DCSize
.8998	c9 fe		cmp #$fe			cmp 	#254
.899a	f0 e3		beq $897f			beq 	_DCSize
.899c	60		rts				rts
.899d					ScaleByBaseType:
.899d	29 10		and #$10			and 	#NSBIsString 			; is it string
.899f	d0 19		bne $89ba			bne 	_SBBTString
.89a1	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.89a3	48		pha				pha
.89a4	a5 36		lda $36				lda 	zTemp0
.89a6	48		pha				pha
.89a7	06 36		asl $36				asl 	zTemp0 					; x 2
.89a9	26 37		rol $37				rol 	zTemp0+1
.89ab	06 36		asl $36				asl 	zTemp0 					; x 4
.89ad	26 37		rol $37				rol 	zTemp0+1
.89af	68		pla				pla 							; add stacked value = x 5
.89b0	65 36		adc $36				adc 	zTemp0
.89b2	85 36		sta $36				sta 	zTemp0
.89b4	68		pla				pla
.89b5	65 37		adc $37				adc 	zTemp0+1
.89b7	85 37		sta $37				sta 	zTemp0+1
.89b9	60		rts				rts
.89ba					_SBBTString:
.89ba	06 36		asl $36				asl 	zTemp0
.89bc	26 37		rol $37				rol 	zTemp0+1
.89be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.89bf					EndCommand:
.89bf	4c 09 88	jmp $8809			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.89c2					ForCommand:
.89c2	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.89c4	20 dd 9e	jsr $9edd			jsr 	StackOpen
.89c7	a2 00		ldx #$00			ldx 	#0
.89c9	20 4b 99	jsr $994b			jsr 	EvaluateTerm
.89cc	bd 00 04	lda $0400,x			lda 	NSStatus,x
.89cf	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.89d1	d0 49		bne $8a1c			bne		_FCError
.89d3	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.89d5	20 ba a5	jsr $a5ba			jsr 	CheckNextA
.89d8	e8		inx				inx
.89d9	20 a0 9d	jsr $9da0			jsr 	EvaluateInteger 			; <from> in +1
.89dc	b1 30		lda ($30),y			lda 	(codePtr),y
.89de	c8		iny				iny 								; consume it
.89df	48		pha				pha 								; save on stack for later
.89e0	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.89e2	f0 04		beq $89e8			beq 	_FCNoSyntax
.89e4	c9 b0		cmp #$b0			cmp 	#KWD_TO
.89e6	d0 37		bne $8a1f			bne 	_FCSyntaxError
.89e8					_FCNoSyntax:
.89e8	e8		inx				inx
.89e9	20 a0 9d	jsr $9da0			jsr 	EvaluateInteger
.89ec	20 21 9f	jsr $9f21			jsr 	STKSaveCodePosition 		; save loop back position
.89ef	68		pla				pla 								; restore DOWNTO or TO
.89f0	5a		phy				phy 								; save Y on the stack
.89f1	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.89f3	f0 02		beq $89f7			beq 	_FCNotDownTo
.89f5	a9 02		lda #$02			lda 	#2
.89f7					_FCNotDownTo:
.89f7	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89f8	a0 10		ldy #$10			ldy 	#16
.89fa	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89fc	a0 06		ldy #$06			ldy 	#6
.89fe	ad 08 04	lda $0408			lda 	NSMantissa0
.8a01	91 34		sta ($34),y			sta 	(basicStack),y
.8a03	ad 10 04	lda $0410			lda 	NSMantissa1
.8a06	c8		iny				iny
.8a07	91 34		sta ($34),y			sta 	(basicStack),y
.8a09	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8a0b	a2 01		ldx #$01			ldx 	#1
.8a0d	20 22 8a	jsr $8a22			jsr 	FCIntegerToStack
.8a10	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8a12	a2 02		ldx #$02			ldx 	#2
.8a14	20 22 8a	jsr $8a22			jsr 	FCIntegerToStack
.8a17	20 42 8a	jsr $8a42			jsr 	CopyIndexToReference
.8a1a	7a		ply				ply 								; restore position
.8a1b	60		rts				rts
.8a1c					_FCError:
.8a1c	4c 9a ab	jmp $ab9a			jmp 	TypeError
.8a1f					_FCSyntaxError:
.8a1f	4c 90 ab	jmp $ab90			jmp 	SyntaxError
.8a22					FCIntegerToStack:
.8a22	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8a25	10 03		bpl $8a2a			bpl	 	_FCNotNegative
.8a27	20 de 9d	jsr $9dde			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8a2a					_FCNotNegative:
.8a2a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8a2d	91 34		sta ($34),y			sta 	(basicStack),y
.8a2f	c8		iny				iny
.8a30	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a33	91 34		sta ($34),y			sta 	(basicStack),y
.8a35	c8		iny				iny
.8a36	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8a39	91 34		sta ($34),y			sta 	(basicStack),y
.8a3b	c8		iny				iny
.8a3c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8a3f	91 34		sta ($34),y			sta 	(basicStack),y
.8a41	60		rts				rts
.8a42					CopyIndexToReference:
.8a42	5a		phy				phy
.8a43	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8a45	38		sec				sec 								; (because we copy from offset 8)
.8a46	b1 34		lda ($34),y			lda 	(basicStack),y
.8a48	e9 08		sbc #$08			sbc 	#8
.8a4a	85 36		sta $36				sta 	zTemp0
.8a4c	c8		iny				iny
.8a4d	b1 34		lda ($34),y			lda 	(basicStack),y
.8a4f	e9 00		sbc #$00			sbc 	#0
.8a51	85 37		sta $37				sta 	zTemp0+1
.8a53	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8a55	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8a57	b1 34		lda ($34),y			lda 	(basicStack),y
.8a59	0a		asl a				asl 	a 							; into carry
.8a5a	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a5c	90 14		bcc $8a72			bcc 	_CITRNormal
.8a5e	38		sec				sec
.8a5f					_CITRNegative:
.8a5f	a9 00		lda #$00			lda 	#0
.8a61	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a63	91 36		sta ($36),y			sta 	(zTemp0),y
.8a65	c8		iny				iny
.8a66	ca		dex				dex
.8a67	d0 f6		bne $8a5f			bne 	_CITRNegative
.8a69	88		dey				dey 								; look at MSB of mantissa
.8a6a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a6c	09 80		ora #$80			ora 	#$80
.8a6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8a70	7a		ply				ply
.8a71	60		rts				rts
.8a72					_CITRNormal:
.8a72	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a74	91 36		sta ($36),y			sta 	(zTemp0),y
.8a76	c8		iny				iny
.8a77	ca		dex				dex
.8a78	d0 f8		bne $8a72			bne 	_CITRNormal
.8a7a	7a		ply				ply 								; and exit.
.8a7b	60		rts				rts
.8a7c					NextCommand:
.8a7c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a7e	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a80	20 09 9f	jsr $9f09			jsr 	StackCheckFrame
.8a83	5a		phy				phy
.8a84	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a86	b1 34		lda ($34),y			lda 	(basicStack),y
.8a88	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a8a	30 02		bmi $8a8e			bmi 	_NCStepNeg
.8a8c	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a8e					_NCStepNeg:
.8a8e	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a90	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a92	18		clc				clc
.8a93					_NCBump:
.8a93	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a95	91 34		sta ($34),y			sta 	(basicStack),y
.8a97	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a99	c8		iny				iny 								; next byte
.8a9a	ca		dex				dex 								; do four times
.8a9b	d0 f6		bne $8a93			bne 	_NCBump
.8a9d	20 42 8a	jsr $8a42			jsr		CopyIndexToReference		; copy it to the reference variable.
.8aa0	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8aa2	b1 34		lda ($34),y			lda 	(basicStack),y
.8aa4	0a		asl a				asl 	a 							; sign bit to carry
.8aa5	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8aa7	85 38		sta $38				sta 	zTemp1
.8aa9	90 02		bcc $8aad			bcc 	_NCCompRev 					; use if step is +ve
.8aab	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8aad					_NCCompRev:
.8aad	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8aaf	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8ab1	85 39		sta $39				sta 	zTemp1+1
.8ab3	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8ab5	38		sec				sec
.8ab6					_NCCompare:
.8ab6	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8ab8	b1 34		lda ($34),y			lda 	(basicStack),y
.8aba	a4 39		ldy $39				ldy 	zTemp1+1
.8abc	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8abe	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ac0	e6 39		inc $39				inc 	zTemp1+1
.8ac2	ca		dex				dex 								; do it 4 times.
.8ac3	d0 f1		bne $8ab6			bne 	_NCCompare
.8ac5	50 02		bvc $8ac9			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ac7	49 80		eor #$80			eor 	#$80
.8ac9					_NCNoOverflow:
.8ac9	7a		ply				ply 								; restore Y position
.8aca	0a		asl a				asl 	a 							; is bit 7 set.
.8acb	90 04		bcc $8ad1			bcc 	_NCLoopback 				; if no , >= so loop back
.8acd	20 fb 9e	jsr $9efb			jsr 	StackClose 					; exit the loop
.8ad0	60		rts				rts
.8ad1					_NCLoopBack:
.8ad1	20 32 9f	jsr $9f32			jsr 	STKLoadCodePosition 		; loop back
.8ad4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8ad5					Command_GOSUB:
.8ad5	a2 00		ldx #$00			ldx 	#0
.8ad7	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8ada	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8adc	20 dd 9e	jsr $9edd			jsr 	StackOpen 					; create frame
.8adf	20 21 9f	jsr $9f21			jsr 	STKSaveCodePosition 		; save current position
.8ae2	4c f8 8a	jmp $8af8			jmp 	GotoStackX
.8ae5					Command_RETURN:
.8ae5	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8ae7	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8ae9	20 09 9f	jsr $9f09			jsr 	StackCheckFrame
.8aec	20 32 9f	jsr $9f32			jsr 	STKLoadCodePosition 		; restore code position
.8aef	20 fb 9e	jsr $9efb			jsr 	StackClose
.8af2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8af3					GotoCommand:
.8af3	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8af5	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger
.8af8					GotoStackX:
.8af8	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8afb	48		pha				pha 								; it is slightly inefficient, just in cases.
.8afc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8aff	fa		plx				plx
.8b00	20 88 9e	jsr $9e88			jsr 	MemorySearch 				; transfer to line number AX.
.8b03	90 05		bcc $8b0a			bcc 	_GotoError 					; not found, off end.
.8b05	d0 03		bne $8b0a			bne 	_GotoError 					; not found exactly
.8b07	4c 33 8e	jmp $8e33			jmp 	RunNewLine 					; and go straight to new line code.
.8b0a					_GotoError:
.8b0a	a9 0d		lda #$0d		lda	#13
.8b0c	4c 71 92	jmp $9271		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8b0f					IfCommand:
.8b0f	a2 00		ldx #$00			ldx 	#0 							; If what.
.8b11	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber
.8b14	b1 30		lda ($30),y			lda 	(codePtr),y
.8b16	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8b18	d0 0a		bne $8b24			bne 	_IFStructured
.8b1a	c8		iny				iny 								; consume THEN
.8b1b	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; is it zero
.8b1e	f0 01		beq $8b21			beq 	_IfFail 					; if fail, go to next line
.8b20	60		rts				rts 								; if THEN just continue
.8b21					_IfFail:
.8b21	4c 98 8e	jmp $8e98			jmp 	EOLCommand
.8b24					_IfStructured:
.8b24	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; is it zero
.8b27	d0 07		bne $8b30			bne 	_IfExit 					; if not, then continue normally.
.8b29	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8b2b	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8b2d	20 e3 91	jsr $91e3			jsr 	ScanForward 				; and run from there/
.8b30					_IfExit:
.8b30	60		rts				rts
.8b31					ElseCode:
.8b31	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8b33	aa		tax				tax 								; so just go to the structure exit
.8b34	20 e3 91	jsr $91e3			jsr 	ScanForward
.8b37	60		rts				rts
.8b38					EndIf:
.8b38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b39					LetCommand:
.8b39	a2 00		ldx #$00			ldx 	#0
.8b3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8b3d	c9 10		cmp #$10			cmp 	#KWD_AT
.8b3f	d0 16		bne $8b57			bne 	_LCStandard
.8b41	c8		iny				iny 								; skip equal
.8b42	20 4b 99	jsr $994b			jsr 	EvaluateTerm 				; get a number
.8b45	20 8f 97	jsr $978f			jsr 	Dereference 				; dereference it
.8b48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8b4b	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b4d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8b50	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b52	d0 10		bne $8b64			bne 	_LCMain
.8b54	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; was a reference before.
.8b57					_LCStandard:
.8b57	ad 62 96	lda $9662			lda 	PrecedenceLevel+"*"			; precedence > this
.8b5a	20 7c 96	jsr $967c			jsr 	EvaluateExpressionAtPrecedence
.8b5d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8b60	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8b62	f0 0e		beq $8b72			beq 	_LetGoProc 					; it's a procedure call.
.8b64					_LCMain:
.8b64	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8b66	20 ba a5	jsr $a5ba			jsr 	CheckNextA
.8b69	e8		inx				inx 								; RHS
.8b6a	20 74 9d	jsr $9d74			jsr 	EvaluateValue
.8b6d	ca		dex				dex
.8b6e	20 75 8b	jsr $8b75			jsr 	AssignVariable
.8b71	60		rts				rts
.8b72					_LetGoProc:
.8b72	4c 0e 8d	jmp $8d0e			jmp 	CallProcedure
.8b75					AssignVariable:
.8b75	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8b78	48		pha				pha 								; save a copy
.8b79	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8b7c	29 10		and #$10			and 	#NSBIsString
.8b7e	d0 0b		bne $8b8b			bne 	_ASError
.8b80	68		pla				pla 								; get back
.8b81	29 10		and #$10			and 	#NSBIsString 				; check type
.8b83	d0 03		bne $8b88			bne 	_ASString
.8b85	4c b7 96	jmp $96b7			jmp 	AssignNumber
.8b88					_ASString:
.8b88	4c 25 97	jmp $9725			jmp 	AssignString
.8b8b					_ASError:
.8b8b	4c 9a ab	jmp $ab9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8b8e					Command_List:
.8b8e	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8b91	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8b94	a9 ff		lda #$ff			lda 	#$FF
.8b96	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8b99	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8b9c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b9e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ba0	f0 1e		beq $8bc0			beq 	_CLSecond
.8ba2	20 1e 8c	jsr $8c1e			jsr 	CLIsDigit 					; if not digit, list all
.8ba5	b0 24		bcs $8bcb			bcs 	_CLStart
.8ba7	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8ba9	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger
.8bac	b1 30		lda ($30),y			lda 	(codePtr),y
.8bae	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bb0	f0 0e		beq $8bc0			beq 	_CLSecond 					; if so go get it
.8bb2	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8bb5	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8bb8	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8bbb	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8bbe	80 0b		bra $8bcb			bra 	_CLStart
.8bc0					_CLSecond:
.8bc0	c8		iny				iny 								; consume comma
.8bc1	20 1e 8c	jsr $8c1e			jsr 	CLIsDigit 					; digit found
.8bc4	b0 05		bcs $8bcb			bcs 	_CLStart 					; if not, continue listing
.8bc6	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8bc8	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger
.8bcb					_CLStart
.8bcb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bcd	85 30		sta $30				sta 	codePtr
.8bcf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bd1	85 31		sta $31				sta 	codePtr+1
.8bd3					_CLLoop:
.8bd3	20 75 ad	jsr $ad75			jsr 	EXTBreakCheck 				; break check
.8bd6	f0 30		beq $8c08			beq 	_CLExit
.8bd8	b2 30		lda ($30)			lda 	(codePtr)
.8bda	f0 2c		beq $8c08			beq 	_CLExit
.8bdc	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8bde	20 0b 8c	jsr $8c0b			jsr 	CLCompareLineNo
.8be1	90 18		bcc $8bfb			bcc 	_CLNext
.8be3	a2 07		ldx #$07			ldx 	#7
.8be5	20 0b 8c	jsr $8c0b			jsr 	CLCompareLineNo
.8be8	f0 02		beq $8bec			beq 	_CLDoThisOne
.8bea	b0 0f		bcs $8bfb			bcs 	_CLNext
.8bec					_CLDoThisOne:
.8bec	20 3f 90	jsr $903f			jsr 	ListConvertLine 			; convert line into token Buffer
.8bef	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8bf1	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8bf3	20 ca 92	jsr $92ca			jsr 	PrintStringXA
.8bf6	a9 0d		lda #$0d			lda 	#13 						; new line
.8bf8	20 34 ad	jsr $ad34			jsr 	EXTPrintCharacter
.8bfb					_CLNext:
.8bfb	18		clc				clc
.8bfc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8bfe	65 30		adc $30				adc 	codePtr
.8c00	85 30		sta $30				sta 	codePtr
.8c02	90 02		bcc $8c06			bcc 	_CREExit
.8c04	e6 31		inc $31				inc 	codePtr+1
.8c06					_CREExit:
.8c06	80 cb		bra $8bd3			bra 	_CLLoop
.8c08					_CLExit:
.8c08	4c 09 88	jmp $8809			jmp 	WarmStart
.8c0b					CLCompareLineNo:
.8c0b	38		sec				sec
.8c0c	a0 01		ldy #$01			ldy 	#1
.8c0e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c10	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8c13	85 36		sta $36				sta 	zTemp0
.8c15	c8		iny				iny
.8c16	b1 30		lda ($30),y			lda 	(codePtr),y
.8c18	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8c1b	05 36		ora $36				ora 	zTemp0
.8c1d	60		rts				rts
.8c1e					CLIsDigit:
.8c1e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c20	c9 30		cmp #$30			cmp 	#"0"
.8c22	90 03		bcc $8c27			bcc	 	_CLIDExitFalse
.8c24	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c26	60		rts				rts
.8c27					_CLIDExitFalse:
.8c27	38		sec				sec
.8c28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8c29					Command_LOCAL:
.8c29	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8c2b	20 37 8c	jsr $8c37			jsr 	LocaliseNextTerm 			; convert term to a local.
.8c2e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c30	c8		iny				iny
.8c31	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c33	f0 f4		beq $8c29			beq 	Command_LOCAL
.8c35	88		dey				dey 								; unpick pre-get
.8c36	60		rts				rts
.8c37					LocaliseNextTerm:
.8c37	20 4b 99	jsr $994b			jsr 	EvaluateTerm 				; evaluate the term
.8c3a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c3d	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8c3f	f0 69		beq $8caa			beq		_LNTError
.8c41	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8c44	85 36		sta $36				sta 	zTemp0
.8c46	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c49	85 37		sta $37				sta  	zTemp0+1
.8c4b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c4e	29 10		and #$10			and 	#NSBIsString
.8c50	d0 22		bne $8c74			bne 	_LNTPushString
.8c52	5a		phy				phy
.8c53	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8c55					_LNTPushNumLoop:
.8c55	b1 36		lda ($36),y			lda		(zTemp0),y
.8c57	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8c5a	a9 00		lda #$00			lda 	#0
.8c5c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5e	c8		iny				iny
.8c5f	c0 05		cpy #$05			cpy 	#5
.8c61	d0 f2		bne $8c55			bne 	_LNTPushNumLoop
.8c63	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8c65	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8c68	a5 37		lda $37				lda 	zTemp0+1
.8c6a	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8c6d	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8c6f	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8c72	7a		ply				ply
.8c73	60		rts				rts
.8c74					_LNTPushString:
.8c74	5a		phy				phy
.8c75	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8c77	85 38		sta $38				sta 	zTemp1
.8c79	a0 01		ldy #$01			ldy 	#1
.8c7b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c7d	85 39		sta $39				sta 	zTemp1+1
.8c7f	a0 00		ldy #$00			ldy 	#0 							; output string
.8c81	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8c83	f0 0a		beq $8c8f			beq 	_LNTStringOut
.8c85					_LNTPushStrLoop:
.8c85	b1 38		lda ($38),y			lda 	(zTemp1),y
.8c87	f0 06		beq $8c8f			beq 	_LNTStringOut
.8c89	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8c8c	c8		iny				iny
.8c8d	80 f6		bra $8c85			bra 	_LNTPushStrLoop
.8c8f					_LNTStringOut:
.8c8f	98		tya				tya									; output length
.8c90	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8c93	a9 00		lda #$00			lda 	#0 							; clear original string.
.8c95	92 38		sta ($38)			sta 	(zTemp1)
.8c97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8c9a	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8c9d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ca0	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8ca3	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8ca5	20 bb 9e	jsr $9ebb			jsr 	StackPushByte
.8ca8	7a		ply				ply
.8ca9	60		rts				rts
.8caa					_LNTError:
.8caa	4c 90 ab	jmp $ab90			jmp 	SyntaxError
.a551					LocalPopValue:
.a551	20 d4 9e	jsr $9ed4			jsr 	StackPopByte
.a554	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a556	d0 17		bne $a56f			bne 	_LPVString
.a558	20 d4 9e	jsr $9ed4			jsr 	StackPopByte 				; address
.a55b	85 37		sta $37				sta 	zTemp0+1
.a55d	20 d4 9e	jsr $9ed4			jsr 	StackPopByte
.a560	85 36		sta $36				sta 	zTemp0
.a562	5a		phy				phy
.a563	a0 04		ldy #$04			ldy 	#4 							; copy back
.a565					_LPVNumberCopy:
.a565	20 d4 9e	jsr $9ed4			jsr 	StackPopByte
.a568	91 36		sta ($36),y			sta 	(zTemp0),y
.a56a	88		dey				dey
.a56b	10 f8		bpl $a565			bpl 	_LPVNumberCopy
.a56d	7a		ply				ply 								; and complete
.a56e	60		rts				rts
.a56f					_LPVString:
.a56f	20 d4 9e	jsr $9ed4			jsr 	StackPopByte 				; address of record => zTemp0
.a572	85 37		sta $37				sta 	zTemp0+1
.a574	20 d4 9e	jsr $9ed4			jsr 	StackPopByte
.a577	85 36		sta $36				sta 	zTemp0
.a579	5a		phy				phy
.a57a	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a57c	85 38		sta $38				sta 	zTemp1
.a57e	a0 01		ldy #$01			ldy 	#1
.a580	b1 36		lda ($36),y			lda 	(zTemp0),y
.a582	85 39		sta $39				sta 	zTemp1+1
.a584	20 d4 9e	jsr $9ed4			jsr 	StackPopByte 				; # to get => y
.a587	a8		tay				tay
.a588	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a58a	f0 0e		beq $a59a			beq 	_LPVStringCopied
.a58c	a9 00		lda #$00			lda 	#0 							; NULL on end
.a58e	91 38		sta ($38),y			sta 	(zTemp1),y
.a590					_LPVStringCopy:
.a590	88		dey				dey
.a591	30 07		bmi $a59a			bmi 	_LPVStringCopied
.a593	20 d4 9e	jsr $9ed4			jsr 	StackPopByte
.a596	91 38		sta ($38),y			sta 	(zTemp1),y
.a598	80 f6		bra $a590			bra 	_LPVStringCopy
.a59a					_LPVStringCopied:
.a59a	fa		plx				plx
.a59b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8cad					NewCommand:
.8cad	20 66 9e	jsr $9e66			jsr 	MemoryNew
.8cb0	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8cb3	20 a2 88	jsr $88a2			jsr 	ClearCommand 				; clear everything.
.8cb6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8cb7					Command_Print:
.8cb7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8cb8					_CPLoop:
.8cb8	08		php				php 								; save last action flag
.8cb9	b1 30		lda ($30),y			lda 	(codePtr),y
.8cbb	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8cbd	f0 46		beq $8d05			beq 	_CPExit
.8cbf	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8cc1	f0 42		beq $8d05			beq 	_CPExit
.8cc3	68		pla				pla 								; throw last action flag
.8cc4	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc6	c8		iny				iny
.8cc7	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8cc9	f0 37		beq $8d02			beq 	_CPContinueWithSameLine
.8ccb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ccd	f0 2e		beq $8cfd			beq 	_CPTab
.8ccf	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8cd1	f0 26		beq $8cf9			beq 	_CPNewLine
.8cd3	88		dey				dey 								; undo the get.
.8cd4	a2 00		ldx #$00			ldx 	#0
.8cd6	20 74 9d	jsr $9d74			jsr 	EvaluateValue 				; get a value into slot 0
.8cd9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8cdc	29 10		and #$10			and 	#NSBIsString
.8cde	f0 0b		beq $8ceb			beq 	_CPNumber
.8ce0	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8ce3	ad 08 04	lda $0408			lda 	NSMantissa0
.8ce6	20 ca 92	jsr $92ca			jsr 	PrintStringXA
.8ce9	80 cc		bra $8cb7			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ceb					_CPNumber:
.8ceb	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ced	20 4a 9c	jsr $9c4a			jsr 	ConvertNumberToString 		; convert to string
.8cf0	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8cf2	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8cf4	20 ca 92	jsr $92ca			jsr 	PrintStringXA
.8cf7	80 be		bra $8cb7			bra 	Command_Print 				; loop round clearing carry so NL if end
.8cf9					_CPNewLine:
.8cf9	a9 0d		lda #$0d			lda 	#13
.8cfb	80 02		bra $8cff			bra 	_CPPrintChar
.8cfd					_CPTab:
.8cfd	a9 09		lda #$09			lda 	#9 							; print TAB
.8cff					_CPPrintChar:
.8cff	20 34 ad	jsr $ad34			jsr 	EXTPrintCharacter
.8d02					_CPContinueWithSameLine:
.8d02	38		sec				sec 								; loop round with carry set, which
.8d03	80 b3		bra $8cb8			bra 	_CPLoop 					; will inhibit final CR
.8d05					_CPExit:
.8d05	28		plp				plp 								; get last action flag
.8d06	b0 05		bcs $8d0d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8d08	a9 0d		lda #$0d			lda 	#13 						; print new line
.8d0a	20 34 ad	jsr $ad34			jsr 	EXTPrintCharacter
.8d0d					_CPExit2:
.8d0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8d0e					CallProcedure:
.8d0e	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8d10	b1 30		lda ($30),y			lda 	(codePtr),y
.8d12	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8d14	f0 0c		beq $8d22			beq 	_CPEndParam
.8d16					_CPParamLoop:
.8d16	20 7a 96	jsr $967a			jsr 	EvaluateExpression 			; get parameter onto stack
.8d19	e8		inx				inx 								; bump next stack
.8d1a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d1c	c8		iny				iny
.8d1d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8d1f	f0 f5		beq $8d16			beq 	_CPParamLoop
.8d21	88		dey				dey 								; unpick.
.8d22					_CPEndParam:
.8d22	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8d25	c8		iny				iny									; skip right bracket
.8d26	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8d28	20 dd 9e	jsr $9edd			jsr 	StackOpen
.8d2b	20 21 9f	jsr $9f21			jsr 	STKSaveCodePosition 		; save loop position
.8d2e	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8d31	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8d33	ad 10 04	lda $0410			lda 	NSMantissa1
.8d36	85 37		sta $37				sta 	zTemp0+1
.8d38	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8d3a	b2 36		lda ($36)			lda 	(zTemp0)
.8d3c	85 30		sta $30				sta 	safePtr
.8d3e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d40	85 31		sta $31				sta 	safePtr+1
.8d42	c8		iny				iny
.8d43	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d45	85 32		sta $32				sta 	safePtr+2
.8d47	c8		iny				iny
.8d48	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d4a	85 33		sta $33				sta 	safePtr+3
.8d4c	c8		iny				iny 								; get Y offset -> Y
.8d4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d4f	a8		tay				tay
.8d50	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8d52	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8d55	f0 13		beq $8d6a			beq 	_ParamExit 					; if so, exit.
.8d57					_ParamExtract:
.8d57	ca		dex				dex 								; put a local term on the level before
.8d58	20 37 8c	jsr $8c37			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8d5b	20 75 8b	jsr $8b75			jsr 	AssignVariable 				; assign stacked value to the variable.
.8d5e	e8		inx				inx 								; advance to next parameter to do.
.8d5f	e8		inx				inx
.8d60	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8d63	f0 05		beq $8d6a			beq 	_ParamExit
.8d65	20 b2 a5	jsr $a5b2			jsr 	CheckComma 					; comma seperating parameters
.8d68	80 ed		bra $8d57			bra 	_ParamExtract
.8d6a					_ParamExit:
.8d6a	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 			; check )
.8d6d	60		rts				rts 								; and continue from here
.a59c					Command_ENDPROC:
.a59c	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a59e	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a5a0	20 09 9f	jsr $9f09			jsr 	StackCheckFrame
.a5a3	20 32 9f	jsr $9f32			jsr 	STKLoadCodePosition 		; restore code position
.a5a6	20 fb 9e	jsr $9efb			jsr 	StackClose
.a5a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8d6e					Command_Read:
.8d6e	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8d70	20 4b 99	jsr $994b			jsr 	EvaluateTerm
.8d73	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d76	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8d78	f0 4a		beq $8dc4			beq 	_CRSyntax 					; check reference (bit 0)
.8d7a	20 0d 8e	jsr $8e0d			jsr 	SwapDataCodePtrs 			; swap code and data
.8d7d	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8d80	d0 20		bne $8da2			bne 	_CRContinueData
.8d82					_CRKeepSearching:
.8d82	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8d84	aa		tax				tax
.8d85	20 e3 91	jsr $91e3			jsr 	ScanForward
.8d88	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8d8a	f0 16		beq $8da2			beq 	_CRHaveData 				; found it
.8d8c	18		clc				clc
.8d8d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d8f	65 30		adc $30				adc 	codePtr
.8d91	85 30		sta $30				sta 	codePtr
.8d93	90 02		bcc $8d97			bcc 	_CREExit
.8d95	e6 31		inc $31				inc 	codePtr+1
.8d97					_CREExit:
.8d97	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8d99	b2 30		lda ($30)			lda 	(codePtr)
.8d9b	d0 e5		bne $8d82			bne 	_CRKeepSearching
.8d9d	a9 0b		lda #$0b		lda	#11
.8d9f	4c 71 92	jmp $9271		jmp	ErrorHandler
.8da2					_CRHaveData:
.8da2					_CRContinueData:
.8da2	a2 01		ldx #$01			ldx 	#1
.8da4	20 74 9d	jsr $9d74			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8da7	ca		dex				dex
.8da8	20 75 8b	jsr $8b75			jsr		AssignVariable 				; do the assignment
.8dab	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8dae	b1 30		lda ($30),y			lda 	(codePtr),y
.8db0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8db2	d0 04		bne $8db8			bne 	_CRSwapBack
.8db4	c8		iny				iny 								; consume comma
.8db5	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8db8					_CRSwapBack:
.8db8	20 0d 8e	jsr $8e0d			jsr 	SwapDataCodePtrs			; swap them back.
.8dbb	b1 30		lda ($30),y			lda 	(codePtr),y
.8dbd	c8		iny				iny
.8dbe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dc0	f0 ac		beq $8d6e			beq 	Command_Read 				; if so go round again.
.8dc2	88		dey				dey 								; unpick get.
.8dc3	60		rts				rts
.8dc4					_CRSyntax:
.8dc4	4c 90 ab	jmp $ab90			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8dc7					RemCommand:
.8dc7	b1 30		lda ($30),y			lda 	(codePtr),y
.8dc9	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8dcb	d0 06		bne $8dd3			bne 	_RMExit
.8dcd	c8		iny				iny
.8dce	98		tya				tya
.8dcf	38		sec				sec
.8dd0	71 30		adc ($30),y			adc 	(codePtr),y
.8dd2	a8		tay				tay
.8dd3					_RMExit:
.8dd3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8dd4					Command_REPEAT:
.8dd4	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8dd6	20 dd 9e	jsr $9edd			jsr 	StackOpen
.8dd9	20 21 9f	jsr $9f21			jsr 	STKSaveCodePosition 		; save loop position
.8ddc	60		rts				rts
.8ddd					Command_UNTIL:
.8ddd	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8ddf	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8de1	20 09 9f	jsr $9f09			jsr 	StackCheckFrame
.8de4	a2 00		ldx #$00			ldx 	#0
.8de6	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber 				; work out the number
.8de9	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; check if zero
.8dec	f0 04		beq $8df2			beq 	_CULoopBack 				; if so keep looping
.8dee	20 fb 9e	jsr $9efb			jsr 	StackClose		 			; return
.8df1	60		rts				rts
.8df2					_CULoopBack:
.8df2	20 32 9f	jsr $9f32			jsr 	STKLoadCodePosition 		; loop back
.8df5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8df6					Command_Restore:
.8df6	20 0d 8e	jsr $8e0d			jsr 	SwapDataCodePtrs 			; swap code and data
.8df9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8dfb	85 30		sta $30				sta 	codePtr
.8dfd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8dff	85 31		sta $31				sta 	codePtr+1
.8e01	20 0d 8e	jsr $8e0d			jsr 	SwapDataCodePtrs 			; put them back
.8e04	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8e06	8d 9b 04	sta $049b			sta 	dataPointer+4
.8e09	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8e0c	60		rts				rts
.8e0d					SwapDataCodePtrs:
.8e0d	da		phx				phx
.8e0e	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8e10					_SDCPLoop:
.8e10	b5 30		lda $30,x			lda 	safePtr,x
.8e12	48		pha				pha
.8e13	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8e16	95 30		sta $30,x			sta 	safePtr,x
.8e18	68		pla				pla
.8e19	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8e1c	ca		dex				dex
.8e1d	10 f1		bpl $8e10			bpl 	_SDCPLoop
.8e1f	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8e22	8c 9b 04	sty $049b			sty 	dataPointer+4
.8e25	a8		tay				tay
.8e26	fa		plx				plx
.8e27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8e28					CommandRUN:
.8e28	20 a2 88	jsr $88a2			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8e2b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e2d	85 30		sta $30				sta 	codePtr
.8e2f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e31	85 31		sta $31				sta 	codePtr+1
.8e33					RUNNewLine:
.8e33	b2 30		lda ($30)			lda 	(codePtr)
.8e35	f0 5e		beq $8e95			beq 	CRNoProgram         		; no then END.
.8e37	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8e39	9a		txs				txs
.8e3a					RUNCodePointerLine:
.8e3a	a0 02		ldy #$02			ldy 	#2 							; start of program
.8e3c					_CRIncMainLoop:
.8e3c	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8e3f	d0 05		bne $8e46			bne 	_CRNoBreakCheck
.8e41	20 75 ad	jsr $ad75			jsr 	EXTBreakCheck 				; break check
.8e44	f0 4a		beq $8e90			beq 	_CRBreak
.8e46					_CRNoBreakCheck:
.8e46	c8		iny				iny
.8e47					_CRMainLoop:
.8e47	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8e4a	b1 30		lda ($30),y			lda 	(codePtr),y
.8e4c	10 10		bpl $8e5e			bpl 	_CRNotKeyword
.8e4e	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8e50	b0 04		bcs $8e56			bcs 	_CRIsKeyword
.8e52	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8e54	b0 34		bcs $8e8a			bcs		_CRSyntaxError
.8e56					_CRIsKeyword:
.8e56	c8		iny				iny 								; consume command
.8e57	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8e58	aa		tax				tax 								; put in X for vector jump
.8e59	20 8d 8e	jsr $8e8d			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8e5c	80 e9		bra $8e47			bra 	_CRMainLoop 				; and loop round
.8e5e					_CRNotKeyword:
.8e5e	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8e60	f0 da		beq $8e3c			beq 	_CRIncMainLoop
.8e62	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8e64	90 05		bcc $8e6b			bcc 	_CRNotVariable
.8e66					_CRGoLet:
.8e66	20 39 8b	jsr $8b39			jsr 	LetCommand
.8e69	80 dc		bra $8e47			bra 	_CRMainLoop
.8e6b					_CRNotVariable:
.8e6b	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8e6d	f0 f7		beq $8e66			beq 	_CRGoLet
.8e6f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8e71	f0 f3		beq $8e66			beq 	_CRGoLet
.8e73	c9 21		cmp #$21			cmp 	#KWD_PLING
.8e75	f0 ef		beq $8e66			beq 	_CRGoLet
.8e77	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8e79	f0 09		beq $8e84			beq 	_CRGoRem
.8e7b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8e7d	d0 0b		bne $8e8a			bne 	_CRSyntaxError
.8e7f	20 42 87	jsr $8742			jsr 	LabelHere
.8e82	80 c3		bra $8e47			bra 	_CRMainLoop
.8e84					_CRGoRem:
.8e84	c8		iny				iny
.8e85	20 c7 8d	jsr $8dc7			jsr 	RemCommand
.8e88	80 bd		bra $8e47			bra 	_CRMainLoop
.8e8a					_CRSyntaxError:
.8e8a	4c 90 ab	jmp $ab90			jmp 	SyntaxError
.8e8d					_CRCallVector0:
.8e8d	7c 38 8f	jmp ($8f38,x)			jmp 	(VectorSet0,x)
.8e90					_CRBreak:
.8e90	a9 01		lda #$01		lda	#1
.8e92	4c 71 92	jmp $9271		jmp	ErrorHandler
.8e95					CRNoProgram:
.8e95	4c bf 89	jmp $89bf			jmp 	EndCommand
.8e98					EOLCommand:
.8e98	18		clc				clc
.8e99	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8e9b	65 30		adc $30				adc 	codePtr
.8e9d	85 30		sta $30				sta 	codePtr
.8e9f	90 02		bcc $8ea3			bcc 	_CREExit
.8ea1	e6 31		inc $31				inc 	codePtr+1
.8ea3					_CREExit:
.8ea3	80 8e		bra $8e33			bra 	RunNewLine
.8ea5					Shift1Command:
.8ea5	b1 30		lda ($30),y			lda 	(codePtr),y
.8ea7	c8		iny				iny
.8ea8	0a		asl a				asl 	a
.8ea9	aa		tax				tax
.8eaa	7c 9a 8f	jmp ($8f9a,x)			jmp 	(VectorSet1,x)
.8ead					Shift2Command:
.8ead	b1 30		lda ($30),y			lda 	(codePtr),y
.8eaf	c8		iny				iny
.8eb0	0a		asl a				asl 	a
.8eb1	aa		tax				tax
.8eb2	7c b2 8f	jmp ($8fb2,x)			jmp 	(VectorSet2,x)
.8eb5					Unused1:
.8eb5					Unused2:
.8eb5					Unused3:
.8eb5					Unused4:
.8eb5	4c 90 ab	jmp $ab90			jmp 	SyntaxError
>8eb8							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8eb8					VectorSetPunc:
>8eb8	1b 94					.word	ShiftLeft                        ; $00 <<
>8eba	15 93					.word	BinaryCompareLessEqual           ; $01 <=
>8ebc	0b 93					.word	BinaryCompareNotEqual            ; $02 <>
>8ebe	90 ab					.word	SyntaxError                      ; $03 !!3
>8ec0	90 ab					.word	SyntaxError                      ; $04 ><
>8ec2	1f 93					.word	BinaryCompareGreaterEqual        ; $05 >=
>8ec4	1e 94					.word	ShiftRight                       ; $06 >>
>8ec6	90 ab					.word	SyntaxError                      ; $07 !!7
>8ec8	90 ab					.word	SyntaxError                      ; $08 !!8
>8eca	90 ab					.word	SyntaxError                      ; $09 !!9
>8ecc	90 ab					.word	SyntaxError                      ; $0a !!10
>8ece	90 ab					.word	SyntaxError                      ; $0b !!11
>8ed0	90 ab					.word	SyntaxError                      ; $0c !!12
>8ed2	90 ab					.word	SyntaxError                      ; $0d !!13
>8ed4	90 ab					.word	SyntaxError                      ; $0e !!14
>8ed6	90 ab					.word	SyntaxError                      ; $0f !!15
>8ed8	90 ab					.word	SyntaxError                      ; $10 @
>8eda	90 ab					.word	SyntaxError                      ; $11 !!17
>8edc	90 ab					.word	SyntaxError                      ; $12 !!18
>8ede	90 ab					.word	SyntaxError                      ; $13 [
>8ee0	c3 a5					.word	IntegerDivide                    ; $14 \
>8ee2	90 ab					.word	SyntaxError                      ; $15 ]
>8ee4	a4 95					.word	EorInteger                       ; $16 ^
>8ee6	90 ab					.word	SyntaxError                      ; $17 _
>8ee8	90 ab					.word	SyntaxError                      ; $18 `
>8eea	90 ab					.word	SyntaxError                      ; $19 !!25
>8eec	90 ab					.word	SyntaxError                      ; $1a !!26
>8eee	90 ab					.word	SyntaxError                      ; $1b {
>8ef0	5e 95					.word	OraInteger                       ; $1c |
>8ef2	90 ab					.word	SyntaxError                      ; $1d }
>8ef4	90 ab					.word	SyntaxError                      ; $1e ~
>8ef6	90 ab					.word	SyntaxError                      ; $1f [7m<7F>[m
>8ef8	90 ab					.word	SyntaxError                      ; $20
>8efa	ea 95					.word	WordIndirect                     ; $21 !
>8efc	90 ab					.word	SyntaxError                      ; $22 "
>8efe	90 ab					.word	SyntaxError                      ; $23 #
>8f00	90 ab					.word	SyntaxError                      ; $24 $
>8f02	10 a6					.word	IntegerModulus                   ; $25 %
>8f04	18 95					.word	AndInteger                       ; $26 &
>8f06	90 ab					.word	SyntaxError                      ; $27 '
>8f08	90 ab					.word	SyntaxError                      ; $28 (
>8f0a	90 ab					.word	SyntaxError                      ; $29 )
>8f0c	85 a6					.word	MulInteger                       ; $2a *
>8f0e	b2 94					.word	AddInteger                       ; $2b +
>8f10	90 ab					.word	SyntaxError                      ; $2c ,
>8f12	ed 94					.word	SubInteger                       ; $2d -
>8f14	90 ab					.word	SyntaxError                      ; $2e .
>8f16	1c a8					.word	FDivideCommand                   ; $2f /
>8f18	90 ab					.word	SyntaxError                      ; $30 0
>8f1a	90 ab					.word	SyntaxError                      ; $31 1
>8f1c	90 ab					.word	SyntaxError                      ; $32 2
>8f1e	90 ab					.word	SyntaxError                      ; $33 3
>8f20	90 ab					.word	SyntaxError                      ; $34 4
>8f22	90 ab					.word	SyntaxError                      ; $35 5
>8f24	90 ab					.word	SyntaxError                      ; $36 6
>8f26	90 ab					.word	SyntaxError                      ; $37 7
>8f28	90 ab					.word	SyntaxError                      ; $38 8
>8f2a	90 ab					.word	SyntaxError                      ; $39 9
>8f2c	90 ab					.word	SyntaxError                      ; $3a :
>8f2e	90 ab					.word	SyntaxError                      ; $3b ;
>8f30	f7 92					.word	BinaryCompareLess                ; $3c <
>8f32	ed 92					.word	BinaryCompareEqual               ; $3d =
>8f34	01 93					.word	BinaryCompareGreater             ; $3e >
>8f36	11 96					.word	ByteIndirect                     ; $3f ?
.8f38					VectorSet0:
>8f38	98 8e					.word	EOLCommand                       ; $80 !0:EOF
>8f3a	a5 8e					.word	Shift1Command                    ; $81 !1:SH1
>8f3c	ad 8e					.word	Shift2Command                    ; $82 !2:SH2
>8f3e	62 a9					.word	AbsUnary                         ; $83 ABS(
>8f40	db 9a					.word	AllocUnary                       ; $84 ALLOC(
>8f42	72 a9					.word	AscUnary                         ; $85 ASC(
>8f44	fb 9b					.word	ChrUnary                         ; $86 CHR$(
>8f46	e9 92					.word	UnaryFalse                       ; $87 FALSE
>8f48	7f a9					.word	FracUnary                        ; $88 FRAC(
>8f4a	95 a9					.word	IntUnary                         ; $89 INT(
>8f4c	eb a9					.word	IsValUnary                       ; $8a ISVAL(
>8f4e	d5 9c					.word	Unary_Left                       ; $8b LEFT$(
>8f50	a7 a9					.word	LenUnary                         ; $8c LEN(
>8f52	ff 9c					.word	Unary_Mid                        ; $8d MID$(
>8f54	4b 9b					.word	Unary_Not                        ; $8e NOT(
>8f56	61 9b					.word	Unary_Random                     ; $8f RANDOM(
>8f58	e5 9c					.word	Unary_Right                      ; $90 RIGHT$(
>8f5a	7a 9b					.word	Unary_Rnd                        ; $91 RND(
>8f5c	c1 a9					.word	SgnUnary                         ; $92 SGN(
>8f5e	0d 9c					.word	SpcUnary                         ; $93 SPC(
>8f60	28 9c					.word	Unary_Str                        ; $94 STR$(
>8f62	dd 92					.word	UnaryTrue                        ; $95 TRUE
>8f64	e1 a9					.word	ValUnary                         ; $96 VAL(
>8f66	c2 89					.word	ForCommand                       ; $97 FOR
>8f68	0f 8b					.word	IfCommand                        ; $98 IF
>8f6a	b5 8e					.word	Unused1                          ; $99 PROC
>8f6c	d4 8d					.word	Command_REPEAT                   ; $9a REPEAT
>8f6e	42 92					.word	Command_WHILE                    ; $9b WHILE
>8f70	38 8b					.word	EndIf                            ; $9c ENDIF
>8f72	9c a5					.word	Command_ENDPROC                  ; $9d ENDPROC
>8f74	7c 8a					.word	NextCommand                      ; $9e NEXT
>8f76	b5 8e					.word	Unused4                          ; $9f THEN
>8f78	dd 8d					.word	Command_UNTIL                    ; $a0 UNTIL
>8f7a	63 92					.word	Command_WEND                     ; $a1 WEND
>8f7c	68 88					.word	CallCommand                      ; $a2 CALL
>8f7e	90 ab					.word	SyntaxError                      ; $a3 CLS
>8f80	fa 88					.word	Command_Data                     ; $a4 DATA
>8f82	02 89					.word	DimCommand                       ; $a5 DIM
>8f84	b5 8e					.word	Unused3                          ; $a6 DOWNTO
>8f86	31 8b					.word	ElseCode                         ; $a7 ELSE
>8f88	d5 8a					.word	Command_GOSUB                    ; $a8 GOSUB
>8f8a	f3 8a					.word	GotoCommand                      ; $a9 GOTO
>8f8c	39 8b					.word	LetCommand                       ; $aa LET
>8f8e	29 8c					.word	Command_LOCAL                    ; $ab LOCAL
>8f90	b7 8c					.word	Command_Print                    ; $ac PRINT
>8f92	6e 8d					.word	Command_Read                     ; $ad READ
>8f94	c7 8d					.word	RemCommand                       ; $ae REM
>8f96	e5 8a					.word	Command_RETURN                   ; $af RETURN
>8f98	b5 8e					.word	Unused2                          ; $b0 TO
.8f9a					VectorSet1:
>8f9a	90 ab					.word	SyntaxError                      ; $80 !0:EOF
>8f9c	90 ab					.word	SyntaxError                      ; $81 !1:SH1
>8f9e	90 ab					.word	SyntaxError                      ; $82 !2:SH2
>8fa0	39 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>8fa2	58 88					.word	AssertCommand                    ; $84 ASSERT
>8fa4	a2 88					.word	ClearCommand                     ; $85 CLEAR
>8fa6	bf 89					.word	EndCommand                       ; $86 END
>8fa8	8e 8b					.word	Command_List                     ; $87 LIST
>8faa	ad 8c					.word	NewCommand                       ; $88 NEW
>8fac	f6 8d					.word	Command_Restore                  ; $89 RESTORE
>8fae	28 8e					.word	CommandRUN                       ; $8a RUN
>8fb0	3a 90					.word	StopCommand                      ; $8b STOP
.8fb2					VectorSet2:
>8fb2	90 ab					.word	SyntaxError                      ; $80 !0:EOF
>8fb4	90 ab					.word	SyntaxError                      ; $81 !1:SH1
>8fb6	90 ab					.word	SyntaxError                      ; $82 !2:SH2
>8fb8	4f aa					.word	Assemble_adc                     ; $83 ADC
>8fba	47 aa					.word	Assemble_and                     ; $84 AND
>8fbc	63 aa					.word	Assemble_asl                     ; $85 ASL
>8fbe	cd aa					.word	Assemble_bcc                     ; $86 BCC
>8fc0	d1 aa					.word	Assemble_bcs                     ; $87 BCS
>8fc2	d9 aa					.word	Assemble_beq                     ; $88 BEQ
>8fc4	90 aa					.word	Assemble_bit                     ; $89 BIT
>8fc6	c1 aa					.word	Assemble_bmi                     ; $8a BMI
>8fc8	d5 aa					.word	Assemble_bne                     ; $8b BNE
>8fca	bd aa					.word	Assemble_bpl                     ; $8c BPL
>8fcc	dd aa					.word	Assemble_bra                     ; $8d BRA
>8fce	e1 aa					.word	Assemble_brk                     ; $8e BRK
>8fd0	c5 aa					.word	Assemble_bvc                     ; $8f BVC
>8fd2	c9 aa					.word	Assemble_bvs                     ; $90 BVS
>8fd4	e9 aa					.word	Assemble_clc                     ; $91 CLC
>8fd6	3d ab					.word	Assemble_cld                     ; $92 CLD
>8fd8	fd aa					.word	Assemble_cli                     ; $93 CLI
>8fda	2d ab					.word	Assemble_clv                     ; $94 CLV
>8fdc	5b aa					.word	Assemble_cmp                     ; $95 CMP
>8fde	a4 aa					.word	Assemble_cpx                     ; $96 CPX
>8fe0	9f aa					.word	Assemble_cpy                     ; $97 CPY
>8fe2	81 aa					.word	Assemble_dec                     ; $98 DEC
>8fe4	39 ab					.word	Assemble_dex                     ; $99 DEX
>8fe6	15 ab					.word	Assemble_dey                     ; $9a DEY
>8fe8	4b aa					.word	Assemble_eor                     ; $9b EOR
>8fea	86 aa					.word	Assemble_inc                     ; $9c INC
>8fec	49 ab					.word	Assemble_inx                     ; $9d INX
>8fee	35 ab					.word	Assemble_iny                     ; $9e INY
>8ff0	b8 aa					.word	Assemble_jmp                     ; $9f JMP
>8ff2	b3 aa					.word	Assemble_jsr                     ; $a0 JSR
>8ff4	57 aa					.word	Assemble_lda                     ; $a1 LDA
>8ff6	7c aa					.word	Assemble_ldx                     ; $a2 LDX
>8ff8	9a aa					.word	Assemble_ldy                     ; $a3 LDY
>8ffa	6d aa					.word	Assemble_lsr                     ; $a4 LSR
>8ffc	4d ab					.word	Assemble_nop                     ; $a5 NOP
>8ffe	43 aa					.word	Assemble_ora                     ; $a6 ORA
>9000	f9 aa					.word	Assemble_pha                     ; $a7 PHA
>9002	e5 aa					.word	Assemble_php                     ; $a8 PHP
>9004	41 ab					.word	Assemble_phx                     ; $a9 PHX
>9006	01 ab					.word	Assemble_phy                     ; $aa PHY
>9008	09 ab					.word	Assemble_pla                     ; $ab PLA
>900a	ed aa					.word	Assemble_plp                     ; $ac PLP
>900c	55 ab					.word	Assemble_plx                     ; $ad PLX
>900e	11 ab					.word	Assemble_ply                     ; $ae PLY
>9010	68 aa					.word	Assemble_rol                     ; $af ROL
>9012	72 aa					.word	Assemble_ror                     ; $b0 ROR
>9014	f5 aa					.word	Assemble_rti                     ; $b1 RTI
>9016	05 ab					.word	Assemble_rts                     ; $b2 RTS
>9018	5f aa					.word	Assemble_sbc                     ; $b3 SBC
>901a	f1 aa					.word	Assemble_sec                     ; $b4 SEC
>901c	51 ab					.word	Assemble_sed                     ; $b5 SED
>901e	0d ab					.word	Assemble_sei                     ; $b6 SEI
>9020	53 aa					.word	Assemble_sta                     ; $b7 STA
>9022	45 ab					.word	Assemble_stp                     ; $b8 STP
>9024	77 aa					.word	Assemble_stx                     ; $b9 STX
>9026	95 aa					.word	Assemble_sty                     ; $ba STY
>9028	8b aa					.word	Assemble_stz                     ; $bb STZ
>902a	29 ab					.word	Assemble_tax                     ; $bc TAX
>902c	25 ab					.word	Assemble_tay                     ; $bd TAY
>902e	ae aa					.word	Assemble_trb                     ; $be TRB
>9030	a9 aa					.word	Assemble_tsb                     ; $bf TSB
>9032	31 ab					.word	Assemble_tsx                     ; $c0 TSX
>9034	19 ab					.word	Assemble_txa                     ; $c1 TXA
>9036	21 ab					.word	Assemble_txs                     ; $c2 TXS
>9038	1d ab					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.903a					StopCommand:
.903a	a9 08		lda #$08		lda	#8
.903c	4c 71 92	jmp $9271		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.903f					ListConvertLine:
.903f	9c 9d 04	stz $049d			stz 	tbOffset
.9042	9c a9 04	stz $04a9			stz 	tokenBuffer
.9045	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9047	b1 30		lda ($30),y			lda 	(codePtr),y
.9049	aa		tax				tax
.904a	88		dey				dey
.904b	b1 30		lda ($30),y			lda 	(codePtr),y
.904d	20 06 a7	jsr $a706			jsr 	ConvertInt16
.9050	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9052	86 37		stx $37				stx 	zTemp0+1
.9054	a0 00		ldy #$00			ldy 	#0
.9056					_LCCopyNumber:
.9056	b1 36		lda ($36),y			lda 	(zTemp0),y
.9058	20 58 91	jsr $9158			jsr 	LCLWrite
.905b	c8		iny				iny
.905c	b1 36		lda ($36),y			lda 	(zTemp0),y
.905e	d0 f6		bne $9056			bne 	_LCCopyNumber
.9060					_LCPadOut:
.9060	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9062	20 58 91	jsr $9158			jsr 	LCLWrite
.9065	ad 9d 04	lda $049d			lda 	tbOffset
.9068	c9 06		cmp #$06			cmp 	#6
.906a	d0 f4		bne $9060			bne 	_LCPadOut
.906c	a0 03		ldy #$03			ldy 	#3 							; start position.
.906e					_LCMainLoop:
.906e	b1 30		lda ($30),y			lda 	(codePtr),y
.9070	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9072	f0 17		beq $908b			beq 	_LCExit
.9074	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9076	90 14		bcc $908c			bcc 	_LCDoubles
.9078	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.907a	90 20		bcc $909c			bcc 	_LCShiftPunc
.907c	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.907e	90 2b		bcc $90ab			bcc 	_LCPunctuation
.9080	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9082	90 2d		bcc $90b1			bcc 	_LCIdentifiers
.9084	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9086	90 49		bcc $90d1			bcc 	_LCTokens
.9088	4c 2c 91	jmp $912c			jmp 	_LCData 					; 254-5 are data objects
.908b					_LCExit:
.908b	60		rts				rts
.908c					_LCDoubles:
.908c	48		pha				pha
.908d	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.908e	29 02		and #$02			and 	#2
.9090	09 3c		ora #$3c			ora 	#60 						; make < >
.9092	20 58 91	jsr $9158			jsr 	LCLWrite
.9095	68		pla				pla 								; restore, do lower bit
.9096	29 03		and #$03			and 	#3
.9098	09 3c		ora #$3c			ora 	#60
.909a	80 0f		bra $90ab			bra		_LCPunctuation 				; print, increment, loop
.909c					_LCShiftPunc:
.909c	aa		tax				tax 								; save in X
.909d	29 07		and #$07			and 	#7 							; lower 3 bits
.909f	f0 02		beq $90a3			beq 	_LCNoAdd
.90a1	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.90a3					_LCNoAdd:
.90a3	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.90a5	90 02		bcc $90a9			bcc 	_LCNoAdd2
.90a7	09 20		ora #$20			ora 	#32 						; adds $20
.90a9					_LCNoAdd2:
.90a9	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.90ab					_LCPunctuation:
.90ab	c8		iny				iny 								; consume character
.90ac	20 58 91	jsr $9158			jsr 	LCLWrite 					; write it out.
.90af	80 bd		bra $906e			bra 	_LCMainLoop 				; go round again.
.90b1					_LCIdentifiers:
.90b1	18		clc				clc 								; convert to physical address
.90b2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.90b4	85 37		sta $37				sta 	zTemp0+1
.90b6	c8		iny				iny
.90b7	b1 30		lda ($30),y			lda 	(codePtr),y
.90b9	85 36		sta $36				sta 	zTemp0
.90bb	c8		iny				iny
.90bc	5a		phy				phy 								; save position
.90bd	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.90bf					_LCOutIdentifier:
.90bf	c8		iny				iny
.90c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.90c2	29 7f		and #$7f			and 	#$7F
.90c4	20 86 91	jsr $9186			jsr 	LCLLowerCase
.90c7	20 58 91	jsr $9158			jsr 	LCLWrite
.90ca	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.90cc	10 f1		bpl $90bf			bpl 	_LCOutIdentifier
.90ce	7a		ply				ply 								; restore position
.90cf	80 9d		bra $906e			bra 	_LCMainLoop
.90d1					_LCTokens:
.90d1	aa		tax				tax 								; token in X
.90d2	a9 56		lda #$56			lda 	#((KeywordSet2) & $FF)
.90d4	85 36		sta $36				sta 	0+zTemp0
.90d6	a9 a1		lda #$a1			lda 	#((KeywordSet2) >> 8)
.90d8	85 37		sta $37				sta 	1+zTemp0
.90da	e0 82		cpx #$82			cpx 	#$82
.90dc	f0 16		beq $90f4			beq 	_LCUseShift
.90de	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.90e0	85 36		sta $36				sta 	0+zTemp0
.90e2	a9 a1		lda #$a1			lda 	#((KeywordSet1) >> 8)
.90e4	85 37		sta $37				sta 	1+zTemp0
.90e6	e0 81		cpx #$81			cpx 	#$81
.90e8	f0 0a		beq $90f4			beq 	_LCUseShift
.90ea	a9 e0		lda #$e0			lda 	#((KeywordSet0) & $FF)
.90ec	85 36		sta $36				sta 	0+zTemp0
.90ee	a9 9f		lda #$9f			lda 	#((KeywordSet0) >> 8)
.90f0	85 37		sta $37				sta 	1+zTemp0
.90f2	80 01		bra $90f5			bra 	_LCNoShift
.90f4					_LCUseShift:
.90f4	c8		iny				iny
.90f5					_LCNoShift:
.90f5	20 67 91	jsr $9167			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.90f8	b1 30		lda ($30),y			lda 	(codePtr),y
.90fa	aa		tax				tax 								; into X
.90fb					_LCFindText:
.90fb	ca		dex				dex
.90fc	10 0e		bpl $910c			bpl 	_LCFoundText 				; found text.
.90fe	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9100	1a		inc a				inc 	a 							; one extra for size
.9101	38		sec				sec 								; one extra for checksum
.9102	65 36		adc $36				adc 	zTemp0 						; go to next token
.9104	85 36		sta $36				sta 	zTemp0
.9106	90 f3		bcc $90fb			bcc 	_LCFindText
.9108	e6 37		inc $37				inc 	zTemp0+1
.910a	80 ef		bra $90fb			bra 	_LCFindText
.910c					_LCFoundText:
.910c	5a		phy				phy 								; save List position
.910d	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.910f	aa		tax				tax
.9110	a0 02		ldy #$02			ldy 	#2
.9112					_LCCopyToken:
.9112	b1 36		lda ($36),y			lda 	(zTemp0),y
.9114	20 86 91	jsr $9186			jsr 	LCLLowerCase
.9117	20 58 91	jsr $9158			jsr 	LCLWrite
.911a	c8		iny				iny
.911b	ca		dex				dex
.911c	d0 f4		bne $9112			bne 	_LCCopyToken
.911e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9120	f0 05		beq $9127			beq 	_LCNoSpace
.9122	a9 20		lda #$20			lda 	#' '
.9124	20 58 91	jsr $9158			jsr 	LCLWrite
.9127					_LCNoSpace:
.9127	7a		ply				ply 								; restore position.
.9128	c8		iny				iny 								; consume token
.9129	4c 6e 90	jmp $906e			jmp 	_LCMainLoop 				; and go around again.
.912c					_LCData:
.912c	48		pha				pha 								; save type $FE/$FF
.912d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.912f	c9 fe		cmp #$fe			cmp 	#$FE
.9131	f0 02		beq $9135			beq 	_LCHaveOpener
.9133	a2 22		ldx #$22			ldx 	#'"'
.9135					_LCHaveOpener:
.9135	8a		txa				txa 								; output prefix (# or ")
.9136	20 58 91	jsr $9158			jsr 	LCLWrite
.9139	c8		iny				iny 								; get count
.913a	b1 30		lda ($30),y			lda 	(codePtr),y
.913c	aa		tax				tax
.913d	c8		iny				iny 								; point at first character
.913e					_LCOutData:
.913e	b1 30		lda ($30),y			lda 	(codePtr),y
.9140	c9 00		cmp #$00			cmp 	#0
.9142	f0 03		beq $9147			beq 	_LCNoPrint
.9144	20 58 91	jsr $9158			jsr 	LCLWrite
.9147					_LCNoPrint:
.9147	c8		iny				iny
.9148	ca		dex				dex
.9149	d0 f3		bne $913e			bne 	_LCOutData
.914b	68		pla				pla 								; closing " required ?
.914c	c9 ff		cmp #$ff			cmp 	#$FF
.914e	d0 05		bne $9155			bne 	_LCNoQuote
.9150	a9 22		lda #$22			lda 	#'"'
.9152	20 58 91	jsr $9158			jsr 	LCLWrite
.9155					_LCNoQuote:
.9155	4c 6e 90	jmp $906e			jmp 	_LCMainLoop
.9158					LCLWrite:
.9158	da		phx				phx
.9159	ae 9d 04	ldx $049d			ldx 	tbOffset
.915c	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.915f	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9162	ee 9d 04	inc $049d			inc 	tbOffset
.9165	fa		plx				plx
.9166	60		rts				rts
.9167					LCCheckSpaceRequired:
.9167	ae 9d 04	ldx $049d			ldx 	tbOffset
.916a	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.916d	20 86 91	jsr $9186			jsr 	LCLLowerCase 				; saves a little effort
.9170	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9172	90 11		bcc $9185			bcc 	_LCCSRExit
.9174	c9 3a		cmp #$3a			cmp 	#"9"+1
.9176	90 08		bcc $9180			bcc 	_LCCSRSpace
.9178	c9 61		cmp #$61			cmp 	#"a"
.917a	90 09		bcc $9185			bcc 	_LCCSRExit
.917c	c9 7b		cmp #$7b			cmp 	#"z"+1
.917e	b0 05		bcs $9185			bcs 	_LCCSRExit
.9180					_LCCSRSpace:
.9180	a9 20		lda #$20			lda 	#' '
.9182	20 58 91	jsr $9158			jsr 	LCLWrite
.9185					_LCCSRExit:
.9185	60		rts				rts
.9186					LCLLowerCase:
.9186	c9 41		cmp #$41			cmp 	#"A"
.9188	90 06		bcc $9190			bcc 	_LCLLCOut
.918a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.918c	b0 02		bcs $9190			bcs 	_LCLLCOut
.918e	69 20		adc #$20			adc 	#$20
.9190					_LCLLCOut:
.9190	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9191					ProcedureScan:
.9191	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9193	85 30		sta $30				sta 	codePtr
.9195	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9197	85 31		sta $31				sta 	codePtr+1
.9199					_PSLoop:
.9199	b2 30		lda ($30)			lda 	(codePtr)
.919b	f0 42		beq $91df			beq 	_PSExit
.919d	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.919f	b1 30		lda ($30),y			lda 	(codePtr),y
.91a1	c9 99		cmp #$99			cmp 	#KWD_PROC
.91a3	d0 2d		bne $91d2			bne 	_PSNext
.91a5	c8		iny				iny 								; get the address of the record to zTemp0 and
.91a6	b1 30		lda ($30),y			lda 	(codePtr),y
.91a8	29 c0		and #$c0			and 	#$C0
.91aa	c9 40		cmp #$40			cmp 	#$40
.91ac	d0 32		bne $91e0			bne 	_PSSyntax
.91ae	b1 30		lda ($30),y			lda 	(codePtr),y
.91b0	18		clc				clc
.91b1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.91b3	85 37		sta $37				sta 	zTemp0+1
.91b5	c8		iny				iny 								; LSB
.91b6	b1 30		lda ($30),y			lda 	(codePtr),y
.91b8	85 36		sta $36				sta 	zTemp0
.91ba	c8		iny				iny 								; character after variable call.
.91bb	98		tya				tya 								; save Y offset at +7
.91bc	a0 07		ldy #$07			ldy 	#7
.91be	91 36		sta ($36),y			sta 	(zTemp0),y
.91c0	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.91c2	a0 02		ldy #$02			ldy 	#2
.91c4	91 36		sta ($36),y			sta 	(zTemp0),y
.91c6	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.91c8					_PSCopy:
.91c8	b5 30		lda $30,x			lda 	safePtr,x
.91ca	c8		iny				iny
.91cb	91 36		sta ($36),y			sta 	(zTemp0),y
.91cd	e8		inx				inx
.91ce	e0 04		cpx #$04			cpx 	#4
.91d0	d0 f6		bne $91c8			bne 	_PSCopy
.91d2					_PSNext:
.91d2	18		clc				clc
.91d3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91d5	65 30		adc $30				adc 	codePtr
.91d7	85 30		sta $30				sta 	codePtr
.91d9	90 02		bcc $91dd			bcc 	_CREExit
.91db	e6 31		inc $31				inc 	codePtr+1
.91dd					_CREExit:
.91dd	80 ba		bra $9199			bra 	_PSLoop
.91df					_PSExit:
.91df	60		rts				rts
.91e0					_PSSyntax:
.91e0	4c 90 ab	jmp $ab90			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.91e3					ScanForward:
.91e3	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.91e5	86 37		stx $37				stx 	zTemp0+1
.91e7	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.91e9					_ScanLoop:
.91e9	b1 30		lda ($30),y			lda 	(codePtr),y
.91eb	c8		iny				iny
.91ec	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.91ee	d0 0e		bne $91fe			bne 	_ScanGoNext
.91f0	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.91f2	f0 04		beq $91f8			beq 	_ScanMatch
.91f4	c5 37		cmp $37				cmp 	zTemp0+1
.91f6	d0 06		bne $91fe			bne 	_ScanGoNext
.91f8					_ScanMatch:
.91f8	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.91fa	d0 01		bne $91fd			bne 	_ScanNotEndEOL
.91fc	88		dey				dey
.91fd					_ScanNotEndEOL:
.91fd	60		rts				rts
.91fe					_ScanGoNext:
.91fe	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9200	90 e7		bcc $91e9			bcc 	_ScanLoop
.9202	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9204	90 18		bcc $921e			bcc 	_ScanSkipOne
.9206	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9208	b0 2f		bcs $9239			bcs 	_ScanSkipData
.920a	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.920c	90 db		bcc $91e9			bcc 	_ScanLoop 					; if not, ordinary keywords.
.920e	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.9210	b0 d7		bcs $91e9			bcs 	_ScanLoop
.9212	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9214	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9216	b0 d1		bcs $91e9			bcs 	_ScanLoop
.9218	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.921a	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.921c	80 cb		bra $91e9			bra 	_ScanLoop
.921e					_ScanSkipOne:
.921e	c8		iny				iny 								; consume the extra one.
.921f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9221	d0 c6		bne $91e9			bne 	_ScanLoop
.9223	18		clc				clc
.9224	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9226	65 30		adc $30				adc 	codePtr
.9228	85 30		sta $30				sta 	codePtr
.922a	90 02		bcc $922e			bcc 	_CREExit
.922c	e6 31		inc $31				inc 	codePtr+1
.922e					_CREExit:
.922e	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9230	b2 30		lda ($30)			lda 	(codePtr)
.9232	d0 b5		bne $91e9			bne 	_ScanLoop 					; if not zero, more to scan
.9234	a9 13		lda #$13		lda	#19
.9236	4c 71 92	jmp $9271		jmp	ErrorHandler
.9239					_ScanSkipData:
.9239	88		dey				dey 								; point at data token
.923a	c8		iny				iny
.923b	98		tya				tya
.923c	38		sec				sec
.923d	71 30		adc ($30),y			adc 	(codePtr),y
.923f	a8		tay				tay
.9240	80 a7		bra $91e9			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9242					Command_WHILE:
.9242	5a		phy				phy 								; save position of the test
.9243	a2 00		ldx #$00			ldx 	#0
.9245	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber 				; work out the number
.9248	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; check if zero
.924b	f0 0e		beq $925b			beq 	_WHExitLoop 				; if so exit the loop
.924d	98		tya				tya 								; position *after* test.
.924e	7a		ply				ply 								; restore position before test, at WHILE
.924f	88		dey				dey
.9250	48		pha				pha 								; push after test on the stack
.9251	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9253	20 dd 9e	jsr $9edd			jsr 	StackOpen
.9256	20 21 9f	jsr $9f21			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9259	7a		ply				ply 								; restore the position *after* the test
.925a	60		rts				rts
.925b					_WHExitLoop:
.925b	68		pla				pla 								; throw post loop position
.925c	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.925e	aa		tax				tax
.925f	20 e3 91	jsr $91e3			jsr 	ScanForward
.9262	60		rts				rts
.9263					Command_WEND:
.9263	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9265	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9267	20 09 9f	jsr $9f09			jsr 	StackCheckFrame
.926a	20 32 9f	jsr $9f32			jsr 	STKLoadCodePosition 		; loop back
.926d	20 fb 9e	jsr $9efb			jsr 	StackClose		 			; erase the frame
.9270	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a5aa					CheckRightBracket:
.a5aa	b1 30		lda ($30),y			lda 	(codePtr),y
.a5ac	c8		iny				iny
.a5ad	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a5af	d0 0f		bne $a5c0			bne 	CNAFail
.a5b1	60		rts				rts
.a5b2					CheckComma:
.a5b2	b1 30		lda ($30),y			lda 	(codePtr),y
.a5b4	c8		iny				iny
.a5b5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a5b7	d0 07		bne $a5c0			bne 	CNAFail
.a5b9	60		rts				rts
.a5ba					CheckNextA:
.a5ba	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a5bc	d0 02		bne $a5c0			bne 	CNAFail
.a5be	c8		iny				iny 								; skip character
.a5bf	60		rts				rts 								; and exit
.a5c0					CNAFail:
.a5c0	4c 90 ab	jmp $ab90			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9271					ErrorHandler:
.9271	a8		tay				tay 								; find the error text
.9272	f0 49		beq $92bd			beq 	_EHEnd
.9274	a2 00		ldx #$00			ldx 	#0
.9276	a9 a9		lda #$a9			lda 	#((ErrorText) & $FF)
.9278	85 36		sta $36				sta 	0+zTemp0
.927a	a9 ab		lda #$ab			lda 	#((ErrorText) >> 8)
.927c	85 37		sta $37				sta 	1+zTemp0
.927e					_EHFind:
.927e	88		dey				dey 								; found the error text ?
.927f	f0 0e		beq $928f			beq 	_EHFound
.9281					_EHFindZero:
.9281	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9283	e6 36		inc $36				inc 	zTemp0
.9285	d0 02		bne $9289			bne 	_EHFNoCarry
.9287	e6 37		inc $37				inc 	zTemp0+1
.9289					_EHFNoCarry:
.9289	c9 00		cmp #$00			cmp 	#0
.928b	d0 f4		bne $9281			bne 	_EHFindZero
.928d	80 ef		bra $927e			bra 	_EHFind
.928f					_EHFound:
.928f	a5 36		lda $36				lda 	zTemp0 						; print message
.9291	a6 37		ldx $37				ldx 	zTemp0+1
.9293	20 ca 92	jsr $92ca			jsr 	PrintStringXA
.9296	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9298	b1 30		lda ($30),y			lda 	(codePtr),y
.929a	d0 05		bne $92a1			bne 	_EHAtMsg
.929c	c8		iny				iny
.929d	b1 30		lda ($30),y			lda 	(codePtr),y
.929f	f0 17		beq $92b8			beq 	_EHCREnd
.92a1					_EHAtMsg:
.92a1	a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.92a3	a9 c0		lda #$c0			lda 	#_AtMsg & $FF
.92a5	20 ca 92	jsr $92ca			jsr 	PrintStringXA
.92a8	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.92aa	b1 30		lda ($30),y			lda 	(codePtr),y
.92ac	48		pha				pha
.92ad	c8		iny				iny
.92ae	b1 30		lda ($30),y			lda 	(codePtr),y
.92b0	aa		tax				tax
.92b1	68		pla				pla
.92b2	20 06 a7	jsr $a706			jsr 	ConvertInt16 				; convert XA to string
.92b5	20 ca 92	jsr $92ca			jsr 	PrintStringXA 				; and print it.
.92b8					_EHCREnd:
.92b8	a9 0d		lda #$0d			lda 	#13 						; new line
.92ba	20 34 ad	jsr $ad34			jsr 	EXTPrintCharacter
.92bd					_EHEnd:
.92bd	4c 09 88	jmp $8809			jmp 	WarmStart
>92c0	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>92c8	20 00
.92ca					PrintStringXA:
.92ca	5a		phy				phy
.92cb	86 37		stx $37				stx 	zTemp0+1
.92cd	85 36		sta $36				sta 	zTemp0
.92cf	a0 00		ldy #$00			ldy 	#0
.92d1					_PSXALoop:
.92d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.92d3	f0 06		beq $92db			beq 	_PSXAExit
.92d5	20 34 ad	jsr $ad34			jsr 	EXTPrintCharacter
.92d8	c8		iny				iny
.92d9	80 f6		bra $92d1			bra 	_PSXALoop
.92db					_PSXAExit:
.92db	7a		ply				ply
.92dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.92dd					UnaryTrue:
.92dd	fa		plx				plx
.92de					ReturnTrue:
.92de	a9 01		lda #$01			lda 	#1  						; set to 1
.92e0	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.92e3	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.92e5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92e8	60		rts				rts
.92e9					UnaryFalse:
.92e9	fa		plx				plx
.92ea					ReturnFalse:
.92ea	4c 29 9e	jmp $9e29			jmp 	NSMSetZero 					; set it all to zero
.92ed					BinaryCompareEqual:
.92ed	fa		plx				plx
.92ee	20 29 93	jsr $9329			jsr 	CompareBaseCode
.92f1	c9 00		cmp #$00			cmp 	#0
.92f3	f0 e9		beq $92de			beq 	ReturnTrue
.92f5	80 f3		bra $92ea			bra 	ReturnFalse
.92f7					BinaryCompareLess:
.92f7	fa		plx				plx
.92f8	20 29 93	jsr $9329			jsr 	CompareBaseCode
.92fb	c9 ff		cmp #$ff			cmp 	#$FF
.92fd	f0 df		beq $92de			beq 	ReturnTrue
.92ff	80 e9		bra $92ea			bra 	ReturnFalse
.9301					BinaryCompareGreater:
.9301	fa		plx				plx
.9302	20 29 93	jsr $9329			jsr 	CompareBaseCode
.9305	c9 01		cmp #$01			cmp 	#1
.9307	f0 d5		beq $92de			beq 	ReturnTrue
.9309	80 df		bra $92ea			bra 	ReturnFalse
.930b					BinaryCompareNotEqual:
.930b	fa		plx				plx
.930c	20 29 93	jsr $9329			jsr 	CompareBaseCode
.930f	c9 00		cmp #$00			cmp 	#0
.9311	d0 cb		bne $92de			bne 	ReturnTrue
.9313	80 d5		bra $92ea			bra 	ReturnFalse
.9315					BinaryCompareLessEqual:
.9315	fa		plx				plx
.9316	20 29 93	jsr $9329			jsr 	CompareBaseCode
.9319	c9 01		cmp #$01			cmp 	#1
.931b	d0 c1		bne $92de			bne 	ReturnTrue
.931d	80 cb		bra $92ea			bra 	ReturnFalse
.931f					BinaryCompareGreaterEqual:
.931f	fa		plx				plx
.9320	20 29 93	jsr $9329			jsr 	CompareBaseCode
.9323	c9 ff		cmp #$ff			cmp 	#$FF
.9325	d0 b7		bne $92de			bne 	ReturnTrue
.9327	80 c1		bra $92ea			bra 	ReturnFalse
.9329					CompareBaseCode:
.9329	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; make both values if references.
.932c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.932f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9332	29 10		and #$10			and 	#NSTString
.9334	d0 40		bne $9376			bne 	_CBCString
.9336	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9339	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.933c	d0 3b		bne $9379			bne 	_CBCFloat
.933e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9341	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9344	29 08		and #$08			and 	#NSTFloat
.9346	d0 31		bne $9379			bne 	_CBCFloat
.9348	20 7c 93	jsr $937c			jsr 	CompareFixMinusZero
.934b	e8		inx				inx
.934c	20 7c 93	jsr $937c			jsr 	CompareFixMinusZero
.934f	ca		dex				dex
.9350	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9353	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9356	10 0b		bpl $9363			bpl 	_CDCSameSign
.9358	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.935b	30 16		bmi $9373			bmi 	_CBCLess 					; return $FF
.935d					_CBCGreater:
.935d	a9 01		lda #$01			lda 	#1
.935f	60		rts				rts
.9360					_CBCEqual:
.9360	a9 00		lda #$00			lda 	#0
.9362	60		rts				rts
.9363					_CDCSameSign:
.9363	20 8c 94	jsr $948c			jsr 	SubTopTwoStack 				; unsigned subtract
.9366	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; or the mantissa together
.9369	f0 f5		beq $9360			beq 	_CBCEqual 					; -0 == 0
.936b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.936e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9371	10 ea		bpl $935d			bpl 	_CBCGreater
.9373					_CBCLess:
.9373	a9 ff		lda #$ff			lda 	#$FF
.9375	60		rts				rts
.9376					_CBCString:
.9376	4c e2 93	jmp $93e2			jmp 	CompareStrings
.9379					_CBCFloat:
.9379	4c 02 a8	jmp $a802			jmp 	CompareFloat
.937c					CompareFixMinusZero:
.937c	20 59 9e	jsr $9e59			jsr 	NSMIsZero
.937f	d0 03		bne $9384			bne 	_CFXMZNotZero
.9381	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9384					_CFXMZNotZero:
.9384	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9385					StringConcat:
.9385	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9388	3d 01 04	and $0401,x			and 	NSStatus+1,x
.938b	29 18		and #$18			and 	#NSBTypeMask
.938d	c9 10		cmp #$10			cmp 	#NSTString
.938f	d0 4e		bne $93df			bne		_SCType
.9391	64 38		stz $38				stz 	zTemp1 						; counting total length
.9393	e8		inx				inx
.9394	20 b2 93	jsr $93b2			jsr 	_SCSetupZ0 					; setup for second
.9397	20 bd 93	jsr $93bd			jsr 	_SCLengthZ0 				; length for second
.939a	ca		dex				dex
.939b	20 b2 93	jsr $93b2			jsr 	_SCSetupZ0 					; setup for first
.939e	20 bd 93	jsr $93bd			jsr 	_SCLengthZ0 				; length for first
.93a1	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.93a3	20 b6 ae	jsr $aeb6			jsr 	StringTempAllocate
.93a6	20 d0 93	jsr $93d0			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.93a9	e8		inx				inx
.93aa	20 b2 93	jsr $93b2			jsr 	_SCSetupZ0 					; copy second out
.93ad	20 d0 93	jsr $93d0			jsr 	_SCCopy
.93b0	ca		dex				dex
.93b1	60		rts				rts
.93b2					_SCSetupZ0:
.93b2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.93b5	85 36		sta $36				sta 	zTemp0
.93b7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93ba	85 37		sta $37				sta 	zTemp0+1
.93bc	60		rts				rts
.93bd					_SCLengthZ0:
.93bd	5a		phy				phy
.93be	a0 00		ldy #$00			ldy 	#0
.93c0					_SCLenLoop:
.93c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.93c2	f0 0a		beq $93ce			beq 	_SCLExit
.93c4	c8		iny				iny
.93c5	e6 38		inc $38				inc 	zTemp1
.93c7	10 f7		bpl $93c0			bpl		_SCLenLoop
.93c9	a9 09		lda #$09		lda	#9
.93cb	4c 71 92	jmp $9271		jmp	ErrorHandler
.93ce					_SCLExit:
.93ce	7a		ply				ply
.93cf	60		rts				rts
.93d0					_SCCopy:
.93d0	5a		phy				phy
.93d1	a0 00		ldy #$00			ldy 	#0
.93d3					_SCCopyLoop:
.93d3	b1 36		lda ($36),y			lda 	(zTemp0),y
.93d5	f0 06		beq $93dd			beq 	_SCCExit
.93d7	20 f4 ae	jsr $aef4			jsr 	StringTempWrite
.93da	c8		iny				iny
.93db	80 f6		bra $93d3			bra 	_SCCopyLoop
.93dd					_SCCExit:
.93dd	7a		ply				ply
.93de	60		rts				rts
.93df					_SCType:
.93df	4c 9a ab	jmp $ab9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a5c3					IntegerDivide:
.a5c3	fa		plx				plx
.a5c4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a5c7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a5ca	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a5cb	0a		asl a				asl 	a
.a5cc	10 05		bpl $a5d3			bpl 	_NotRef
.a5ce	48		pha				pha
.a5cf	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a5d2	68		pla				pla
.a5d3					_NotRef:
.a5d3	0a		asl a				asl 	a
.a5d4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a5d6	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a5d9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a5dc	f0 03		beq $a5e1			beq 	_IntegerCode 				; if clear, then we have two integers
.a5de	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.a5e1					_IntegerCode:
.a5e1	20 03 a6	jsr $a603			jsr 	CheckDivideZero 			; do div zero check
.a5e4	20 3b a6	jsr $a63b			jsr 	Int32Divide 				; do the division
.a5e7	20 f8 a6	jsr $a6f8			jsr 	CalculateSign 				; calculate result sign
.a5ea					NSMCopyPlusTwoToZero:
.a5ea	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a5ed	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5f0	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a5f3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5f6	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a5f9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5fc	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a5ff	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a602	60		rts				rts
.a603					CheckDivideZero:
.a603	e8		inx				inx
.a604	20 59 9e	jsr $9e59			jsr 	NSMIsZero
.a607	f0 02		beq $a60b			beq 	_CDVError
.a609	ca		dex				dex
.a60a	60		rts				rts
.a60b					_CDVError:
.a60b	a9 03		lda #$03		lda	#3
.a60d	4c 71 92	jmp $9271		jmp	ErrorHandler
.a610					IntegerModulus:
.a610	fa		plx				plx
.a611	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a614	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a617	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a618	0a		asl a				asl 	a
.a619	10 05		bpl $a620			bpl 	_NotRef
.a61b	48		pha				pha
.a61c	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a61f	68		pla				pla
.a620					_NotRef:
.a620	0a		asl a				asl 	a
.a621	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a623	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a626	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a629	f0 03		beq $a62e			beq 	_IntegerCode 				; if clear, then we have two integers
.a62b	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.a62e					_IntegerCode:
.a62e					IntegerModulusNoCheck:
.a62e	20 03 a6	jsr $a603			jsr 	CheckDivideZero 			; do div zero check
.a631	20 3b a6	jsr $a63b			jsr 	Int32Divide 				; do the division
.a634	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a637	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a63a	60		rts				rts
.a63b					Int32Divide:
.a63b	48		pha				pha 								; save AXY
.a63c	5a		phy				phy
.a63d	20 00 9e	jsr $9e00			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a640	20 25 9e	jsr $9e25			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a643	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a645					_I32DivideLoop:
.a645	e8		inx				inx
.a646	e8		inx				inx
.a647	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a64a	ca		dex				dex
.a64b	ca		dex				dex
.a64c	20 3f 9e	jsr $9e3f			jsr 	NSMRotateLeft
.a64f	20 7b a6	jsr $a67b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a652	90 03		bcc $a657			bcc 	_I32DivideNoCarryIn
.a654	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a657					_I32DivideNoCarryIn:
.a657	88		dey				dey 								; loop round till division completed.
.a658	d0 eb		bne $a645			bne 	_I32DivideLoop
.a65a	7a		ply				ply 								; restore AXY and exit
.a65b	68		pla				pla
.a65c	60		rts				rts
.a65d					Int32ShiftDivide:
.a65d	48		pha				pha 								; save AY
.a65e	5a		phy				phy
.a65f	e8		inx				inx 								; clear S[X+2]
.a660	e8		inx				inx
.a661	20 29 9e	jsr $9e29			jsr 	NSMSetZero
.a664	ca		dex				dex
.a665	ca		dex				dex
.a666	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a668					_I32SDLoop:
.a668	20 7b a6	jsr $a67b			jsr 	DivideCheckSubtract 		; check if subtract possible
.a66b	e8		inx				inx
.a66c	e8		inx				inx
.a66d	20 3f 9e	jsr $9e3f			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a670	ca		dex				dex
.a671	ca		dex				dex
.a672	20 3f 9e	jsr $9e3f			jsr 	NSMRotateLeft
.a675	88		dey				dey 	 							; do 31 times
.a676	d0 f0		bne $a668			bne 	_I32SDLoop
.a678	7a		ply				ply 								; restore AY and exit
.a679	68		pla				pla
.a67a	60		rts				rts
.a67b					DivideCheckSubtract:
.a67b	20 8c 94	jsr $948c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a67e	b0 04		bcs $a684			bcs 	_DCSExit 					; if carry set, then could do, exit
.a680	20 66 94	jsr $9466			jsr 	AddTopTwoStack 				; add it back in
.a683	18		clc				clc 								; and return False
.a684					_DCSExit:
.a684	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a685					MulInteger:
.a685	fa		plx				plx
.a686	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a689	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a68c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a68d	0a		asl a				asl 	a
.a68e	10 05		bpl $a695			bpl 	_NotRef
.a690	48		pha				pha
.a691	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a694	68		pla				pla
.a695					_NotRef:
.a695	0a		asl a				asl 	a 							; put MSB of type into A:7
.a696	30 0b		bmi $a6a3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a698	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a69b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a69e	f0 06		beq $a6a6			beq 	_IntegerCode 				; if clear, then we have two integers
.a6a0	4c d9 a8	jmp $a8d9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a6a3					_StringData:
.a6a3	4c a4 ab	jmp $aba4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a6a6					_IntegerCode:
.a6a6	20 b3 a6	jsr $a6b3			jsr 	MultiplyShort
.a6a9	c9 00		cmp #$00			cmp 	#0
.a6ab	f0 05		beq $a6b2			beq 	_MIExit
.a6ad	a9 04		lda #$04		lda	#4
.a6af	4c 71 92	jmp $9271		jmp	ErrorHandler
.a6b2					_MIExit:
.a6b2	60		rts				rts
.a6b3					MultiplyShort:
.a6b3	5a		phy				phy 								; save Y
.a6b4	20 00 9e	jsr $9e00			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a6b7	20 25 9e	jsr $9e25			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a6ba	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a6bc					_I32MLoop:
.a6bc	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a6bf	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a6c2	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a6c5	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a6c8	f0 28		beq $a6f2			beq 	_I32MExit 					; exit if zero
.a6ca	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a6cd	29 01		and #$01			and 	#1
.a6cf	f0 0e		beq $a6df			beq 	_I32MNoAdd
.a6d1	20 66 94	jsr $9466			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a6d4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a6d7	10 06		bpl $a6df			bpl 	_I32MNoAdd
.a6d9					_I32ShiftRight:
.a6d9	20 4c 9e	jsr $9e4c			jsr 	NSMShiftRight 				; shift S[X] right
.a6dc	c8		iny				iny 								; increment shift count
.a6dd	80 0a		bra $a6e9			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a6df					_I32MNoAdd:
.a6df	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a6e2	70 f5		bvs $a6d9			bvs 	_I32ShiftRight 				; instead.
.a6e4	e8		inx				inx
.a6e5	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a6e8	ca		dex				dex
.a6e9					_I32MShiftUpper:
.a6e9	e8		inx				inx 								; shift S[X+2] right
.a6ea	e8		inx				inx
.a6eb	20 4c 9e	jsr $9e4c			jsr 	NSMShiftRight
.a6ee	ca		dex				dex
.a6ef	ca		dex				dex
.a6f0	80 ca		bra $a6bc			bra 	_I32MLoop 					; try again.
.a6f2					_I32MExit:
.a6f2	20 f8 a6	jsr $a6f8			jsr 	CalculateSign
.a6f5	98		tya				tya 								; shift in A
.a6f6	7a		ply				ply 								; restore Y and exit
.a6f7	60		rts				rts
.a6f8					CalculateSign:
.a6f8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a6fb	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a6fe	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a701	0a		asl a				asl 	a 							; shift bit 7 into carry
.a702	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.93e2					CompareStrings:
.93e2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.93e5	3d 01 04	and $0401,x			and 	NSStatus+1,x
.93e8	29 10		and #$10			and 	#NSBIsString
.93ea	f0 2c		beq $9418			beq 	_CSTypeError
.93ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.93ef	85 36		sta $36				sta 	zTemp0
.93f1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93f4	85 37		sta $37				sta 	zTemp0+1
.93f6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.93f9	85 38		sta $38				sta 	zTemp1
.93fb	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.93fe	85 39		sta $39				sta 	zTemp1+1
.9400	5a		phy				phy 								; save Y so we can access strings
.9401	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9403					_CSLoop:
.9403	c8		iny				iny
.9404	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9406	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9408	d0 06		bne $9410			bne 	_CSDifferent
.940a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.940c	d0 f5		bne $9403			bne 	_CSLoop 					; still comparing
.940e					_CSExit:
.940e	7a		ply				ply 								; reached end, return zero in A from EOS
.940f	60		rts				rts
.9410					_CSDifferent:
.9410	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9412	90 fa		bcc $940e			bcc		_CSExit
.9414	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9416	80 f6		bra $940e			bra 	_CSExit
.9418					_CSTypeError:
.9418	4c 9a ab	jmp $ab9a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.941b					ShiftLeft:
.941b	38		sec				sec
.941c	80 01		bra $941f			bra 	ShiftMain
.941e					ShiftRight:
.941e	18		clc				clc
.941f					ShiftMain:
.941f	fa		plx				plx 								; restore X
.9420	08		php				php 								; save direction
.9421	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9424	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9427	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9428	0a		asl a				asl 	a
.9429	10 05		bpl $9430			bpl 	_NotRef
.942b	48		pha				pha
.942c	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.942f	68		pla				pla
.9430					_NotRef:
.9430	0a		asl a				asl 	a
.9431	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9433	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9436	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9439	f0 03		beq $943e			beq 	_IntegerCode 				; if clear, then we have two integers
.943b	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.943e					_IntegerCode:
.943e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9441	29 e0		and #$e0			and 	#$E0
.9443	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9446	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9449	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.944c	d0 13		bne $9461			bne 	_SMExit0 					; if >= 32 it will always return zero.
.944e					_SMLoop:
.944e	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9451	30 11		bmi $9464			bmi 	_SMExit 					; exit if done.
.9453	28		plp				plp 								; restore direcition setting
.9454	08		php				php
.9455	90 05		bcc $945c			bcc 	_SMRight
.9457	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; shift left if CS
.945a	80 f2		bra $944e			bra 	_SMLoop
.945c					_SMRight:
.945c	20 4c 9e	jsr $9e4c			jsr 	NSMShiftRight 				; shift right if CC
.945f	80 ed		bra $944e			bra 	_SMLoop
.9461					_SMExit0:
.9461	20 29 9e	jsr $9e29			jsr 	NSMSetZero 					; return zero.
.9464					_SMExit:
.9464	28		plp				plp 								; throw direction
.9465	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9466					AddTopTwoStack:
.9466	18		clc				clc
.9467	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.946a	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.946d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9470	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9473	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9476	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9479	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.947c	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.947f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9482	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9485	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9488	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.948b	60		rts				rts
.948c					SubTopTwoStack:
.948c	38		sec				sec
.948d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9490	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9493	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9496	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9499	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.949c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.949f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94a2	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.94a5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94a8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94ab	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.94ae	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94b1	60		rts				rts
.94b2					AddInteger:
.94b2	fa		plx				plx
.94b3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94b6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94b9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94ba	0a		asl a				asl 	a
.94bb	10 05		bpl $94c2			bpl 	_NotRef
.94bd	48		pha				pha
.94be	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94c1	68		pla				pla
.94c2					_NotRef:
.94c2	0a		asl a				asl 	a 							; put MSB of type into A:7
.94c3	30 0b		bmi $94d0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94c5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94c8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94cb	f0 06		beq $94d3			beq 	_IntegerCode 				; if clear, then we have two integers
.94cd	4c 61 a7	jmp $a761			jmp 	FloatingPointAdd 							; otherwise at least one float.
.94d0					_StringData:
.94d0	4c 85 93	jmp $9385			jmp 	StringConcat							; at least one string - don't know both are strings.
.94d3					_IntegerCode:
.94d3					AddCode:
.94d3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.94d6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.94d9	10 8b		bpl $9466			bpl 	AddTopTwoStack
.94db	20 8c 94	jsr $948c			jsr 	SubTopTwoStack 				; do a physical subtraction
.94de	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.94e1	10 09		bpl $94ec			bpl 	_AddExit
.94e3	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.94e6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94e9	20 de 9d	jsr $9dde			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.94ec					_AddExit:
.94ec	60		rts				rts
.94ed					SubInteger:
.94ed	fa		plx				plx
.94ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94f1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94f4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f5	0a		asl a				asl 	a
.94f6	10 05		bpl $94fd			bpl 	_NotRef
.94f8	48		pha				pha
.94f9	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94fc	68		pla				pla
.94fd					_NotRef:
.94fd	0a		asl a				asl 	a 							; put MSB of type into A:7
.94fe	30 0b		bmi $950b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9500	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9503	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9506	f0 06		beq $950e			beq 	_IntegerCode 				; if clear, then we have two integers
.9508	4c 66 a7	jmp $a766			jmp 	FloatingPointSub 							; otherwise at least one float.
.950b					_StringData:
.950b	4c a4 ab	jmp $aba4			jmp 	NotDoneError							; at least one string - don't know both are strings.
.950e					_IntegerCode:
.950e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9511	49 80		eor #$80			eor 	#$80
.9513	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9516	80 bb		bra $94d3			bra 	AddCode 					; and do the same code as add.
.9518					AndInteger:
.9518	fa		plx				plx
.9519	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.951c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.951f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9520	0a		asl a				asl 	a
.9521	10 05		bpl $9528			bpl 	_NotRef
.9523	48		pha				pha
.9524	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9527	68		pla				pla
.9528					_NotRef:
.9528	0a		asl a				asl 	a
.9529	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.952b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.952e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9531	f0 03		beq $9536			beq 	_IntegerCode 				; if clear, then we have two integers
.9533	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.9536					_IntegerCode:
.9536	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9539	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.953c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.953f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9542	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9545	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9548	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.954b	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.954e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9551	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9554	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9557	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.955a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.955d	60		rts				rts
.955e					OraInteger:
.955e	fa		plx				plx
.955f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9562	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9565	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9566	0a		asl a				asl 	a
.9567	10 05		bpl $956e			bpl 	_NotRef
.9569	48		pha				pha
.956a	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.956d	68		pla				pla
.956e					_NotRef:
.956e	0a		asl a				asl 	a
.956f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9571	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9574	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9577	f0 03		beq $957c			beq 	_IntegerCode 				; if clear, then we have two integers
.9579	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.957c					_IntegerCode:
.957c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.957f	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9582	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9585	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9588	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.958b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.958e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9591	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9594	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9597	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.959a	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.959d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95a0	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95a3	60		rts				rts
.95a4					EorInteger:
.95a4	fa		plx				plx
.95a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95a8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95ab	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95ac	0a		asl a				asl 	a
.95ad	10 05		bpl $95b4			bpl 	_NotRef
.95af	48		pha				pha
.95b0	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95b3	68		pla				pla
.95b4					_NotRef:
.95b4	0a		asl a				asl 	a
.95b5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95b7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95ba	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95bd	f0 03		beq $95c2			beq 	_IntegerCode 				; if clear, then we have two integers
.95bf	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.95c2					_IntegerCode:
.95c2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95c5	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.95c8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95cb	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95ce	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.95d1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95d4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95d7	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.95da	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95dd	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95e0	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.95e3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95e6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.95e9	60		rts				rts
.95ea					WordIndirect:
.95ea	fa		plx				plx
.95eb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95ee	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95f1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95f2	0a		asl a				asl 	a
.95f3	10 05		bpl $95fa			bpl 	_NotRef
.95f5	48		pha				pha
.95f6	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95f9	68		pla				pla
.95fa					_NotRef:
.95fa	0a		asl a				asl 	a
.95fb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95fd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9600	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9603	f0 03		beq $9608			beq 	_IntegerCode 				; if clear, then we have two integers
.9605	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.9608					_IntegerCode:
.9608	20 d3 94	jsr $94d3			jsr 	AddCode 					; add the two values
.960b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.960d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9610	60		rts				rts
.9611					ByteIndirect:
.9611	fa		plx				plx
.9612	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9615	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9618	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9619	0a		asl a				asl 	a
.961a	10 05		bpl $9621			bpl 	_NotRef
.961c	48		pha				pha
.961d	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9620	68		pla				pla
.9621					_NotRef:
.9621	0a		asl a				asl 	a
.9622	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9624	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9627	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.962a	f0 03		beq $962f			beq 	_IntegerCode 				; if clear, then we have two integers
.962c	4c 9a ab	jmp $ab9a			jmp 	TypeError 					; anything else, type mismatch.
.962f					_IntegerCode:
.962f	20 d3 94	jsr $94d3			jsr 	AddCode 					; add the two values
.9632	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9634	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9637	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a706					ConvertInt16:
.a706	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a709	8e 10 04	stx $0410			stx 	NSMantissa1
.a70c	9c 18 04	stz $0418			stz 	NSMantissa2
.a70f	9c 20 04	stz $0420			stz 	NSMantissa3
.a712	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a715	a2 00		ldx #$00			ldx 	#0 							; stack level
.a717	a9 0a		lda #$0a			lda 	#10 						; base
.a719	80 00		bra $a71b			bra 	ConvertInt32
.a71b					ConvertInt32:
.a71b	5a		phy				phy
.a71c	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a71e	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a721	10 08		bpl $a72b			bpl 	_CI32NotNeg
.a723	48		pha				pha
.a724	a9 2d		lda #$2d			lda 	#'-'
.a726	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a729	c8		iny				iny
.a72a	68		pla				pla
.a72b					_CI32NotNeg:
.a72b	20 39 a7	jsr $a739			jsr 	_CI32DivideConvert 			; recursive conversion
.a72e	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a730	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a733	7a		ply				ply
.a734	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a736	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a738	60		rts				rts
.a739					_CI32DivideConvert:
.a739	e8		inx				inx 								; write to next slot up
.a73a	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.a73d	ca		dex				dex
.a73e	20 3b a6	jsr $a63b			jsr 	Int32Divide 				; divide
.a741	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a744	48		pha				pha
.a745	20 ea a5	jsr $a5ea			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a748	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; is it zero ?
.a74b	f0 06		beq $a753			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a74d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a750	20 39 a7	jsr $a739			jsr 	_CI32DivideConvert 			; and recusrively call.
.a753					_CI32NoRecurse:
.a753	68		pla				pla 								; remainder
.a754	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a756	90 02		bcc $a75a			bcc 	_CI32NotHex
.a758	69 26		adc #$26			adc 	#6+32
.a75a					_CI32NotHex:
.a75a	69 30		adc #$30			adc 	#48
.a75c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a75f	c8		iny				iny
.a760	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9638					PrecedenceLevel:
>9638	04					.byte	 4	; $00 <<
>9639	02					.byte	 2	; $01 <=
>963a	02					.byte	 2	; $02 <>
>963b	00					.byte	 0	; $03 !!3
>963c	00					.byte	 0	; $04 ><
>963d	02					.byte	 2	; $05 >=
>963e	04					.byte	 4	; $06 >>
>963f	00					.byte	 0	; $07 !!7
>9640	00					.byte	 0	; $08 !!8
>9641	00					.byte	 0	; $09 !!9
>9642	00					.byte	 0	; $0a !!10
>9643	00					.byte	 0	; $0b !!11
>9644	00					.byte	 0	; $0c !!12
>9645	00					.byte	 0	; $0d !!13
>9646	00					.byte	 0	; $0e !!14
>9647	00					.byte	 0	; $0f !!15
>9648	00					.byte	 0	; $10 @
>9649	00					.byte	 0	; $11 !!17
>964a	00					.byte	 0	; $12 !!18
>964b	00					.byte	 0	; $13 [
>964c	04					.byte	 4	; $14 \
>964d	00					.byte	 0	; $15 ]
>964e	01					.byte	 1	; $16 ^
>964f	00					.byte	 0	; $17 _
>9650	00					.byte	 0	; $18 `
>9651	00					.byte	 0	; $19 !!25
>9652	00					.byte	 0	; $1a !!26
>9653	00					.byte	 0	; $1b {
>9654	01					.byte	 1	; $1c |
>9655	00					.byte	 0	; $1d }
>9656	00					.byte	 0	; $1e ~
>9657	00					.byte	 0	; $1f [7m<7F>[m
>9658	00					.byte	 0	; $20
>9659	05					.byte	 5	; $21 !
>965a	00					.byte	 0	; $22 "
>965b	00					.byte	 0	; $23 #
>965c	05					.byte	 5	; $24 $
>965d	04					.byte	 4	; $25 %
>965e	01					.byte	 1	; $26 &
>965f	00					.byte	 0	; $27 '
>9660	00					.byte	 0	; $28 (
>9661	00					.byte	 0	; $29 )
>9662	04					.byte	 4	; $2a *
>9663	03					.byte	 3	; $2b +
>9664	00					.byte	 0	; $2c ,
>9665	03					.byte	 3	; $2d -
>9666	00					.byte	 0	; $2e .
>9667	04					.byte	 4	; $2f /
>9668	00					.byte	 0	; $30 0
>9669	00					.byte	 0	; $31 1
>966a	00					.byte	 0	; $32 2
>966b	00					.byte	 0	; $33 3
>966c	00					.byte	 0	; $34 4
>966d	00					.byte	 0	; $35 5
>966e	00					.byte	 0	; $36 6
>966f	00					.byte	 0	; $37 7
>9670	00					.byte	 0	; $38 8
>9671	00					.byte	 0	; $39 9
>9672	00					.byte	 0	; $3a :
>9673	00					.byte	 0	; $3b ;
>9674	02					.byte	 2	; $3c <
>9675	02					.byte	 2	; $3d =
>9676	02					.byte	 2	; $3e >
>9677	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9678					EvaluateExpressionAt0:
.9678	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.967a					EvaluateExpression:
.967a	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.967c					EvaluateExpressionAtPrecedence:
.967c	48		pha				pha 								; save precedence level
.967d	20 4b 99	jsr $994b			jsr 	EvaluateTerm 				; evaluate term into level X.
.9680	68		pla				pla 								; restore precedence level.
.9681					_EXPRLoop:
.9681	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9683	b1 30		lda ($30),y			lda 	(codePtr),y
.9685	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9687	b0 25		bcs $96ae			bcs 	_EXPRExit
.9689	da		phx				phx 								; read the operator precedence
.968a	aa		tax				tax
.968b	bd 38 96	lda $9638,x			lda 	PrecedenceLevel,x
.968e	fa		plx				plx
.968f	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9691	f0 1b		beq $96ae			beq 	_EXPRExit
.9693	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9695	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9697	c5 37		cmp $37				cmp 	zTemp0+1
.9699	b0 13		bcs $96ae			bcs		_EXPRExit 					; if current >= operator exit
.969b	48		pha				pha 								; save current precedence.
.969c	b1 30		lda ($30),y			lda 	(codePtr),y
.969e	c8		iny				iny
.969f	48		pha				pha
.96a0	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.96a2	e8		inx				inx 								; work out the right hand side.
.96a3	20 7c 96	jsr $967c			jsr 	EvaluateExpressionAtPrecedence
.96a6	ca		dex				dex
.96a7	68		pla				pla 								; get operator, call the code.
.96a8	20 b1 96	jsr $96b1			jsr 	_EXPRCaller
.96ab	68		pla				pla 								; restore precedence level
.96ac	80 d3		bra $9681			bra 	_EXPRLoop 					; and go round.
.96ae					_EXPRExit:
.96ae	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.96b0	60		rts				rts
.96b1					_EXPRCaller:
.96b1	da		phx				phx 								; save on stack, first thing is to restore it
.96b2	0a		asl a				asl 	a 							; double so can use vectors into X
.96b3	aa		tax				tax
.96b4	7c b8 8e	jmp ($8eb8,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a761					FloatingPointAdd:
.a761	20 02 a9	jsr $a902			jsr 	FloatPrepare 				; prepare for floats
.a764	80 0b		bra $a771			bra 	FloatAdd
.a766					FloatingPointSub:
.a766	20 02 a9	jsr $a902			jsr 	FloatPrepare 				; prepare for floats
.a769					FloatSubtract:
.a769	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a76c	49 80		eor #$80			eor 	#$80
.a76e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a771					FloatAdd:
.a771	48		pha				pha
.a772	5a		phy				phy
.a773	20 13 a9	jsr $a913			jsr 	NSNormalise 				; normalise S[X]
.a776	f0 54		beq $a7cc			beq 	_FAReturn1
.a778	e8		inx				inx 								; normalise S[X+1]
.a779	20 13 a9	jsr $a913			jsr 	NSNormalise
.a77c	ca		dex				dex
.a77d	c9 00		cmp #$00			cmp 	#0
.a77f	f0 6f		beq $a7f0			beq 	_FAExit 					; if so, just return A
.a781	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a784	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a787	f0 1b		beq $a7a4			beq 	_FAExponentsEqual
.a789	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a78c	a8		tay				tay
.a78d	38		sec				sec 								; do a signed comparison of the exponents.
.a78e	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a791	50 02		bvc $a795			bvc 	_FANoSignedChange
.a793	49 80		eor #$80			eor 	#$80
.a795					_FANoSignedChange:
.a795	29 80		and #$80			and 	#$80
.a797	10 03		bpl $a79c			bpl 	_FAHaveMax
.a799	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a79c					_FAHaveMax:
.a79c	20 f3 a7	jsr $a7f3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a79f	e8		inx				inx
.a7a0	20 f3 a7	jsr $a7f3			jsr 	_FAShiftToExponent
.a7a3	ca		dex				dex
.a7a4					_FAExponentsEqual:
.a7a4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a7a7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a7aa	30 10		bmi $a7bc			bmi 	_FADifferentSigns
.a7ac	20 66 94	jsr $9466			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a7af	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a7b2	10 3c		bpl $a7f0			bpl 	_FAExit 					; if no, we are done.
.a7b4	20 4c 9e	jsr $9e4c			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a7b7	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a7ba	80 34		bra $a7f0			bra 	_FAExit
.a7bc					_FADifferentSigns:
.a7bc	20 8c 94	jsr $948c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a7bf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a7c2	10 2c		bpl $a7f0			bpl 	_FAExit 					; if no, we are done.
.a7c4	20 d5 9d	jsr $9dd5			jsr 	NSMNegate 					; netate result
.a7c7	20 de 9d	jsr $9dde			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a7ca	80 24		bra $a7f0			bra 	_FAExit
.a7cc					_FAReturn1:
.a7cc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a7cf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7d2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a7d5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7d8	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a7db	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7de	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a7e1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a7e4	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a7e7	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a7ea	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a7ed	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a7f0					_FAExit:
.a7f0	7a		ply				ply
.a7f1	68		pla				pla
.a7f2	60		rts				rts
.a7f3					_FAShiftToExponent:
.a7f3					_FAShiftToExponent2:
.a7f3	98		tya				tya 								; compare Y to exponent
.a7f4	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a7f7	f0 08		beq $a801			beq 	_FASEExit 					; exit if so.
.a7f9	20 4c 9e	jsr $9e4c			jsr 	NSMShiftRight	 			; shift the mantissa right
.a7fc	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a7ff	80 f2		bra $a7f3			bra 	_FAShiftToExponent2
.a801					_FASEExit:
.a801	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a802					CompareFloat:
.a802	20 69 a7	jsr $a769			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a805	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a808	29 f8		and #$f8			and 	#$F8
.a80a	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a80d	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a810	f0 09		beq $a81b			beq 	_FCExit 					; zero, so approximately identical
.a812	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a814	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a817	10 02		bpl $a81b			bpl 	_FCExit
.a819					_FCNegative:
.a819	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a81b					_FCExit:
.a81b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a81c					FDivideCommand:
.a81c	fa		plx				plx	 								; restore stack position
.a81d	20 02 a9	jsr $a902			jsr 	FloatPrepare 				; prepare for floats
.a820					FloatDivide:
.a820	48		pha				pha
.a821	e8		inx				inx
.a822	20 13 a9	jsr $a913			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a825	ca		dex				dex
.a826	c9 00		cmp #$00			cmp 	#0
.a828	f0 20		beq $a84a			beq 	_FDZero
.a82a	20 13 a9	jsr $a913			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a82d	f0 19		beq $a848			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a82f	20 5d a6	jsr $a65d			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a832	20 ea a5	jsr $a5ea			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a835	20 13 a9	jsr $a913			jsr		NSNormalise 				; renormalise
.a838	20 f8 a6	jsr $a6f8			jsr 	CalculateSign 				; calculate result sign
.a83b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a83e	38		sec				sec
.a83f	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a842	38		sec				sec
.a843	e9 1e		sbc #$1e			sbc 	#30
.a845	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a848					_FDExit:
.a848	68		pla				pla
.a849	60		rts				rts
.a84a					_FDZero:
.a84a	a9 03		lda #$03		lda	#3
.a84c	4c 71 92	jmp $9271		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a84f					FloatFractionalPart:
.a84f	5a		phy				phy
.a850	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a853	29 7f		and #$7f			and 	#$7F
.a855	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a858	20 13 a9	jsr $a913			jsr 	NSNormalise
.a85b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a85e	38		sec				sec
.a85f	e9 e0		sbc #$e0			sbc 	#$E0
.a861	90 31		bcc $a894			bcc 	_FFPExit 					; already fractional
.a863	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a865	b0 2a		bcs $a891			bcs 	_FFPZero
.a867	a8		tay				tay 								; put count to do in Y
.a868	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a86b	20 96 a8	jsr $a896			jsr 	_FFPPartial
.a86e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a871	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a874	20 96 a8	jsr $a896			jsr 	_FFPPartial
.a877	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a87a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a87d	20 96 a8	jsr $a896			jsr 	_FFPPartial
.a880	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a883	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a886	20 96 a8	jsr $a896			jsr 	_FFPPartial
.a889	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a88c	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; zeroed check.
.a88f	d0 03		bne $a894			bne 	_FFPExit
.a891					_FFPZero:
.a891	20 29 9e	jsr $9e29			jsr 	NSMSetZero
.a894					_FFPExit:
.a894	7a		ply				ply
.a895	60		rts				rts
.a896					_FFPPartial:
.a896	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a898	f0 17		beq $a8b1			beq 	_FFFPPExit
.a89a	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a89c	b0 0c		bcs $a8aa			bcs 	_FFFPPWholeByte
.a89e	5a		phy				phy
.a89f					_FFFPPLeft:
.a89f	0a		asl a				asl 	a
.a8a0	88		dey				dey
.a8a1	d0 fc		bne $a89f			bne 	_FFFPPLeft
.a8a3	7a		ply				ply
.a8a4					_FFFPPRight:
.a8a4	4a		lsr a				lsr 	a
.a8a5	88		dey				dey
.a8a6	d0 fc		bne $a8a4			bne 	_FFFPPRight
.a8a8	80 07		bra $a8b1			bra 	_FFFPPExit
.a8aa					_FFFPPWholeByte:
.a8aa	98		tya				tya 								; subtract 8 from count
.a8ab	38		sec				sec
.a8ac	e9 08		sbc #$08			sbc 	#8
.a8ae	a8		tay				tay
.a8af	a9 00		lda #$00			lda 	#0 							; and clear all
.a8b1					_FFFPPExit:
.a8b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a8b2					FloatIntegerPart:
.a8b2	48		pha				pha
.a8b3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a8b6	f0 1f		beq $a8d7			beq 	_FIPExit 					; if so do nothing
.a8b8	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; is it zero ?
.a8bb	f0 17		beq $a8d4			beq 	_FIPZero 					; if so return zero.
.a8bd	20 13 a9	jsr $a913			jsr 	NSNormalise 				; normalise
.a8c0	f0 12		beq $a8d4			beq 	_FIPZero 					; normalised to zero, exit zero
.a8c2					_FIPShift:
.a8c2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a8c5	10 08		bpl $a8cf			bpl 	_FIPCheckZero
.a8c7	20 4c 9e	jsr $9e4c			jsr 	NSMShiftRight 				; shift mantissa right
.a8ca	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a8cd	80 f3		bra $a8c2			bra 	_FIPShift
.a8cf					_FIPCheckZero:
.a8cf	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; avoid -0 problem
.a8d2	d0 03		bne $a8d7			bne 	_FIPExit 					; set to zero if mantissa zero.
.a8d4					_FIPZero:
.a8d4	20 29 9e	jsr $9e29			jsr 	NSMSetZero
.a8d7					_FIPExit:
.a8d7	68		pla				pla
.a8d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a8d9					FloatingPointMultiply:
.a8d9	20 02 a9	jsr $a902			jsr 	FloatPrepare 				; prepare for floats
.a8dc					FloatMultiply:
.a8dc	48		pha				pha
.a8dd	20 13 a9	jsr $a913			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a8e0	f0 1b		beq $a8fd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a8e2	e8		inx				inx
.a8e3	20 13 a9	jsr $a913			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a8e6	ca		dex				dex
.a8e7	c9 00		cmp #$00			cmp 	#0
.a8e9	f0 0f		beq $a8fa			beq 	_FDSetZero
.a8eb	20 b3 a6	jsr $a6b3			jsr 	MultiplyShort 				; calculate the result.
.a8ee	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a8f1	18		clc				clc
.a8f2	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a8f5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a8f8	80 03		bra $a8fd			bra 	_FDExit
.a8fa					_FDSetZero:
.a8fa	20 29 9e	jsr $9e29			jsr 	NSMSetZero 					; return 0
.a8fd					_FDExit:
.a8fd	20 13 a9	jsr $a913			jsr 	NSNormalise 				; normalise the result
.a900	68		pla				pla
.a901	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a902					FloatPrepare:
.a902	20 8a 97	jsr $978a			jsr 	DereferenceTopTwo 			; dereference the top two values
.a905	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a908	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a90b	29 10		and #$10			and 	#NSBIsString
.a90d	d0 01		bne $a910			bne 	_FDType
.a90f	60		rts				rts
.a910					_FDType:
.a910	4c 9a ab	jmp $ab9a			jmp 	TypeError
.a913					NSNormalise:
.a913	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a916	29 80		and #$80			and 	#$80
.a918	09 08		ora #$08			ora 	#NSTFloat
.a91a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a91d	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; if zero exit
.a920	d0 09		bne $a92b			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a922	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a925	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a928	a9 00		lda #$00			lda 	#0 							; set Z flag
.a92a	60		rts				rts
.a92b					_NSNormaliseOptimise:
.a92b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a92e	d0 22		bne $a952			bne 	_NSNormaliseLoop
.a930	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a933	30 1d		bmi $a952			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a935	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a938	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a93b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a93e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a941	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a944	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a947	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a94a	38		sec				sec
.a94b	e9 08		sbc #$08			sbc 	#8
.a94d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a950	80 d9		bra $a92b			bra 	_NSNormaliseOptimise
.a952					_NSNormaliseLoop:
.a952	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a955	70 08		bvs $a95f			bvs 	_NSNExit 					; exit if so with Z flag clear
.a957	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; shift mantissa left
.a95a	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a95d	80 f3		bra $a952			bra 	_NSNormaliseLoop
.a95f					_NSNExit:
.a95f	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a961	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.96b7					AssignNumber:
.96b7	5a		phy				phy
.96b8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.96bb	85 36		sta $36				sta 	zTemp0
.96bd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96c0	85 37		sta $37				sta 	zTemp0+1
.96c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.96c5	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.96c7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96ca	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.96cc	c9 08		cmp #$08			cmp 	#NSTFloat
.96ce	f0 2a		beq $96fa			beq 	_ANFloat
.96d0	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.96d3	f0 05		beq $96da			beq		_ANNotFloat
.96d5	e8		inx				inx
.96d6	20 b2 a8	jsr $a8b2			jsr 	FloatIntegerPart 			; make it an integer
.96d9	ca		dex				dex
.96da					_ANNotFloat:
.96da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.96dd	29 03		and #$03			and 	#3
.96df	d0 05		bne $96e6			bne 	_ANByteWord
.96e1	20 06 97	jsr $9706			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.96e4	80 1e		bra $9704			bra 	_ANExit
.96e6					_ANByteWord:
.96e6	48		pha				pha 								; save count
.96e7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.96ea	92 36		sta ($36)			sta 	(zTemp0)
.96ec	68		pla				pla
.96ed	c9 01		cmp #$01			cmp	 	#1
.96ef	f0 13		beq $9704			beq 	_ANExit
.96f1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.96f4	a0 01		ldy #$01			ldy 	#1
.96f6	91 36		sta ($36),y			sta 	(zTemp0),y
.96f8	80 0a		bra $9704			bra 	_ANExit
.96fa					_ANFloat:
.96fa	20 06 97	jsr $9706			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.96fd	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9700	a0 04		ldy #$04			ldy 	#4
.9702	91 36		sta ($36),y			sta 	(zTemp0),y
.9704					_ANExit:
.9704	7a		ply				ply
.9705	60		rts				rts
.9706					_ANCopy4PackSign:
.9706	a0 03		ldy #$03			ldy 	#3
.9708	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.970b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.970d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9710	91 36		sta ($36),y			sta 	(zTemp0),y
.9712	88		dey				dey
.9713	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9716	91 36		sta ($36),y			sta 	(zTemp0),y
.9718	88		dey				dey
.9719	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.971c	91 36		sta ($36),y			sta 	(zTemp0),y
.971e	88		dey				dey
.971f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9722	91 36		sta ($36),y			sta 	(zTemp0),y
.9724	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9725					AssignString:
.9725	5a		phy				phy
.9726	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9729	85 38		sta $38				sta 	zTemp1
.972b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.972e	85 39		sta $39				sta 	zTemp1+1
.9730	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9733	85 36		sta $36				sta 	zTemp0
.9735	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9738	85 37		sta $37				sta 	zTemp0+1
.973a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.973c	b1 36		lda ($36),y			lda 	(zTemp0),y
.973e	f0 23		beq $9763			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9740	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9741	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9743	e9 02		sbc #$02			sbc 	#2
.9745	85 3c		sta $3c				sta 	zsTemp
.9747	a0 01		ldy #$01			ldy 	#1
.9749	b1 36		lda ($36),y			lda 	(zTemp0),y
.974b	e9 00		sbc #$00			sbc 	#0
.974d	85 3d		sta $3d				sta 	zsTemp+1
.974f	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9751					_ASGetLength:
.9751	c8		iny				iny
.9752	b1 38		lda ($38),y			lda 	(zTemp1),y
.9754	d0 fb		bne $9751			bne 	_ASGetLength
.9756	98		tya				tya 								; is this length <= current length
.9757	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9759	90 20		bcc $977b			bcc 	_ASCopyString
.975b	f0 1e		beq $977b			beq 	_ASCopyString
.975d	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.975f	a0 01		ldy #$01			ldy 	#1
.9761	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9763					_ASNewStringRequired:
.9763	e8		inx				inx 								; concrete the new string.
.9764	20 35 ae	jsr $ae35			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9767	ca		dex				dex
.9768	18		clc				clc
.9769	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.976c	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.976e	92 36		sta ($36)			sta 	(zTemp0)
.9770	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9773	69 00		adc #$00			adc 	#0
.9775	a0 01		ldy #$01			ldy 	#1
.9777	91 36		sta ($36),y			sta 	(zTemp0),y
.9779	80 0d		bra $9788			bra 	_ASExit
.977b					_ASCopyString:
.977b	a0 00		ldy #$00			ldy 	#0
.977d					_ASCopyLoop:
.977d	b1 38		lda ($38),y			lda 	(zTemp1),y
.977f	c8		iny				iny
.9780	c8		iny				iny
.9781	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9783	88		dey				dey
.9784	c9 00		cmp #$00			cmp 	#0
.9786	d0 f5		bne $977d			bne 	_ASCopyLoop
.9788					_ASExit:
.9788	7a		ply				ply
.9789	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.978a					DereferenceTopTwo:
.978a	e8		inx				inx
.978b	20 8f 97	jsr $978f			jsr 	Dereference 				; deref x+1
.978e	ca		dex				dex  								; falls through to deref x
.978f					Dereference:
.978f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9792	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9794	f0 57		beq $97ed			beq 	_DRFExit 					; not a reference
.9796	5a		phy				phy
.9797	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.979a	85 36		sta $36				sta 	zTemp0
.979c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.979f	85 37		sta $37				sta 	zTemp0+1
.97a1	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.97a4	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.97a6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97a9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.97ac	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.97ae	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.97b0	f0 0f		beq $97c1			beq 	_DRFDereferenceTwo
.97b2	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.97b4	f0 39		beq $97ef			beq 	_DRFFull
.97b6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.97b9	29 03		and #$03			and 	#3
.97bb	f0 32		beq $97ef			beq 	_DRFFull 					; the whole word
.97bd	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.97bf	f0 07		beq $97c8			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.97c1					_DRFDereferenceTwo:
.97c1	a0 01		ldy #$01			ldy 	#1
.97c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.97c5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97c8					_DRFClear23:
.97c8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.97cb	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.97ce	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.97d1	29 18		and #$18			and 	#NSBTypeMask
.97d3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97d6	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.97d8	d0 12		bne $97ec			bne 	_DRFNotString
.97da	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.97dd	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.97e0	d0 0a		bne $97ec			bne 	_DRFNotString
.97e2	a9 ee		lda #$ee			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.97e4	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.97e7	a9 97		lda #$97			lda 	#_DRFNullString >> 8
.97e9	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.97ec					_DRFNotString
.97ec	7a		ply				ply 								; restore Y and exit
.97ed					_DRFExit:
.97ed	60		rts				rts
.97ee					_DRFNullString:
>97ee	00						.byte 	0
.97ef					_DRFFull:
.97ef	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.97f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.97f3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97f6	c8		iny				iny
.97f7	b1 36		lda ($36),y			lda 	(zTemp0),y
.97f9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97fc	c8		iny				iny
.97fd	b1 36		lda ($36),y			lda 	(zTemp0),y
.97ff	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9802	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9805	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9808	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.980a	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.980d	f0 06		beq $9815			beq 	_DRFNoExponent
.980f	c8		iny				iny 								; if not, read the exponent as well.
.9810	b1 36		lda ($36),y			lda 	(zTemp0),y
.9812	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9815					_DRFNoExponent:
.9815	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9818	10 0d		bpl $9827			bpl 	_DRFExit2 					; if not, then exit.
.981a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.981c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.981f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9822	09 80		ora #$80			ora 	#NSBIsNegative
.9824	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9827					_DRFExit2:
.9827	7a		ply				ply
.9828	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9829					EncodeNumberStart:
.9829	38		sec				sec
.982a	80 01		bra $982d			bra 	EncodeNumberContinue+1
.982c					EncodeNumberContinue:
.982c	18		clc				clc
.982d					EncodeNumber:
.982d	08		php				php 								; save reset.
.982e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9830	f0 12		beq $9844			beq 	_ENIsOkay
.9832	c9 30		cmp #$30			cmp 	#"0"
.9834	90 04		bcc $983a			bcc 	_ENBadNumber
.9836	c9 3a		cmp #$3a			cmp 	#"9"+1
.9838	90 0a		bcc $9844			bcc 	_ENIsOkay
.983a					_ENBadNumber:
.983a	28		plp				plp 								; throw saved reset
.983b	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.983e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9840	f0 7e		beq $98c0			beq 	_ENConstructFinal
.9842					_ENFail:
.9842	18		clc				clc 								; not allowed
.9843	60		rts				rts
.9844					_ENIsOkay:
.9844	28		plp				plp 								; are we restarting
.9845	90 15		bcc $985c			bcc 	_ENNoRestart
.9847					_ENStartEncode:
.9847	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9849	f0 0c		beq $9857			beq 	_ENFirstDP
.984b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.984d	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.9850	a9 01		lda #$01			lda 	#ESTA_Low
.9852					_ENExitChange:
.9852	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9855	38		sec				sec
.9856	60		rts				rts
.9857					_ENFirstDP:
.9857	20 29 9e	jsr $9e29			jsr 	NSMSetZero 					; clear integer part
.985a	80 3f		bra $989b			bra 	_ESTASwitchFloat			; go straight to float and exi
.985c					_ENNoRestart:
.985c	48		pha				pha 								; save on stack.
.985d	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9860	c9 01		cmp #$01			cmp 	#ESTA_Low
.9862	f0 09		beq $986d			beq  	_ESTALowState
.9864	c9 02		cmp #$02			cmp 	#ESTA_High
.9866	f0 29		beq $9891			beq 	_ESTAHighState
.9868	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.986a	f0 3b		beq $98a7			beq 	_ESTADecimalState
>986c	db						.byte 	$DB 						; causes a break in the emulator
.986d					_ESTALowState:
.986d	68		pla				pla 								; get value back
.986e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9870	f0 29		beq $989b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9872	29 0f		and #$0f			and 	#15 						; make digit
.9874	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9877	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.987a	0a		asl a				asl 	a
.987b	0a		asl a				asl 	a
.987c	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.987f	0a		asl a				asl 	a
.9880	6d 86 04	adc $0486			adc 	DigitTemp
.9883	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9886	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9888	90 05		bcc $988f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.988a	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.988c	8d 85 04	sta $0485			sta 	EncodeState
.988f					_ESTANoSwitch:
.988f	38		sec				sec
.9890	60		rts				rts
.9891					_ESTAHighState:
.9891	68		pla				pla 								; get value back
.9892	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9894	f0 05		beq $989b			beq 	_ESTASwitchFloat
.9896	20 fa 98	jsr $98fa			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9899	38		sec				sec
.989a	60		rts				rts
.989b					_ESTASwitchFloat:
.989b	9c 87 04	stz $0487			stz 	DecimalCount
.989e	e8		inx				inx 								; zero the decimal additive.
.989f	20 29 9e	jsr $9e29			jsr 	NSMSetZero
.98a2	ca		dex				dex
.98a3	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.98a5	80 ab		bra $9852			bra 	_ENExitChange
.98a7					_ESTADecimalState:
.98a7	68		pla				pla 								; digit.
.98a8	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.98aa	f0 96		beq $9842			beq 	_ENFail
.98ac	e8		inx				inx 								; put digit into fractional part of X+1
.98ad	20 fa 98	jsr $98fa			jsr 	ESTAShiftDigitIntoMantissa
.98b0	ca		dex				dex
.98b1	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.98b4	ad 87 04	lda $0487			lda 	DecimalCount
.98b7	c9 0b		cmp #$0b			cmp 	#11
.98b9	f0 02		beq $98bd			beq 	_ESTADSFail
.98bb	38		sec				sec
.98bc	60		rts				rts
.98bd					_ESTADSFail:
.98bd	4c 95 ab	jmp $ab95			jmp 	RangeError
.98c0					_ENConstructFinal:
.98c0	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.98c3	f0 33		beq $98f8			beq 	_ENCFExit 					; no decimals
.98c5	5a		phy				phy
.98c6	0a		asl a				asl 	a 							; x 4 and CLC
.98c7	0a		asl a				asl 	a
.98c8	6d 87 04	adc $0487			adc 	DecimalCount
.98cb	a8		tay				tay
.98cc	b9 54 ab	lda $ab54,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.98cf	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.98d2	b9 55 ab	lda $ab55,y			lda 	DecimalScalarTable-5+1,y
.98d5	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.98d8	b9 56 ab	lda $ab56,y			lda 	DecimalScalarTable-5+2,y
.98db	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.98de	b9 57 ab	lda $ab57,y			lda 	DecimalScalarTable-5+3,y
.98e1	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.98e4	b9 58 ab	lda $ab58,y			lda 	DecimalScalarTable-5+4,y
.98e7	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.98ea	a9 08		lda #$08			lda 	#NSTFloat
.98ec	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.98ef	7a		ply				ply
.98f0	e8		inx				inx 								; multiply decimal const by decimal scalar
.98f1	20 dc a8	jsr $a8dc			jsr 	FloatMultiply
.98f4	ca		dex				dex
.98f5	20 71 a7	jsr $a771			jsr 	FloatAdd 					; add to integer part.
.98f8					_ENCFExit:
.98f8	18		clc				clc 								; reject the digit.
.98f9	60		rts				rts
.98fa					ESTAShiftDigitIntoMantissa:
.98fa	29 0f		and #$0f			and 	#15 						; save digit
.98fc	48		pha				pha
.98fd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9900	48		pha				pha
.9901	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9904	48		pha				pha
.9905	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9908	48		pha				pha
.9909	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.990c	48		pha				pha
.990d	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; x 2
.9910	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; x 4
.9913	18		clc				clc 								; pop mantissa and add
.9914	68		pla				pla
.9915	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9918	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.991b	68		pla				pla
.991c	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.991f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9922	68		pla				pla
.9923	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9926	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9929	68		pla				pla
.992a	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.992d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9930	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; x 10
.9933	68		pla				pla 								; add digit
.9934	18		clc				clc
.9935	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9938	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.993b	90 0d		bcc $994a			bcc 	_ESTASDExit
.993d	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9940	d0 08		bne $994a			bne 	_ESTASDExit
.9942	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9945	d0 03		bne $994a			bne 	_ESTASDExit
.9947	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.994a					_ESTASDExit:
.994a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.994b					EvaluateTerm:
.994b	b1 30		lda ($30),y			lda 	(codePtr),y
.994d	30 18		bmi $9967			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.994f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9951	b0 6f		bcs $99c2			bcs 	_ETVariable
.9953	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9955	90 6e		bcc $99c5			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9957	c9 3a		cmp #$3a			cmp 	#'9'+1
.9959	b0 6a		bcs $99c5			bcs 	_ETPuncUnary
.995b	20 29 98	jsr $9829			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.995e					_ETNumber:
.995e	c8		iny				iny 								; keep encoding until we have the numbers
.995f	b1 30		lda ($30),y			lda 	(codePtr),y
.9961	20 2c 98	jsr $982c			jsr 	EncodeNumberContinue
.9964	b0 f8		bcs $995e			bcs 	_ETNumber 					; go back if accepted.
.9966	60		rts				rts
.9967					_ETCheckUnary:
.9967	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9969	f0 41		beq $99ac			beq 	_ETString
.996b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.996d	f0 12		beq $9981			beq 	_ETHexConstant
.996f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9971	90 0b		bcc $997e			bcc 	_ETSyntaxError
.9973	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9975	b0 07		bcs $997e			bcs 	_ETSyntaxError
.9977	da		phx				phx 								; push X on the stack
.9978	0a		asl a				asl 	a 							; put vector x 2 into X
.9979	aa		tax				tax
.997a	c8		iny				iny 								; consume unary function token
.997b	7c 38 8f	jmp ($8f38,x)			jmp 	(VectorSet0,x) 				; and do it.
.997e					_ETSyntaxError:
.997e	4c 90 ab	jmp $ab90			jmp 	SyntaxError
.9981					_ETHexConstant:
.9981	c8		iny				iny 								; skip #
.9982	c8		iny				iny 								; skip count
.9983	20 29 9e	jsr $9e29			jsr 	NSMSetZero 					; clear result
.9986					_ETHLoop:
.9986	b1 30		lda ($30),y			lda 	(codePtr),y
.9988	c8		iny				iny 								; and consume
.9989	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.998b	f0 1e		beq $99ab			beq 	_ETHExit
.998d	48		pha				pha 								; save on stack.
.998e	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; x 2
.9991	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; x 4
.9994	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; x 8
.9997	20 3e 9e	jsr $9e3e			jsr 	NSMShiftLeft 				; x 16
.999a	68		pla				pla 								; ASCII
.999b	c9 41		cmp #$41			cmp 	#'A'
.999d	90 02		bcc $99a1			bcc 	_ETHNotChar
.999f	e9 07		sbc #$07			sbc 	#7
.99a1					_ETHNotChar:
.99a1	29 0f		and #$0f			and 	#15 						; digit now
.99a3	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.99a6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99a9	80 db		bra $9986			bra 	_ETHLoop 					; go round.
.99ab					_ETHExit:
.99ab	60		rts				rts
.99ac					_ETString:
.99ac	c8		iny				iny 								; look at length
.99ad	b1 30		lda ($30),y			lda 	(codePtr),y
.99af	48		pha				pha
.99b0	c8		iny				iny 								; first character
.99b1	20 73 9e	jsr $9e73			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.99b4	68		pla				pla 								; restore count and save
.99b5	85 36		sta $36				sta 	zTemp0
.99b7	98		tya				tya 								; add length to Y to skip it.
.99b8	18		clc				clc
.99b9	65 36		adc $36				adc 	zTemp0
.99bb	a8		tay				tay
.99bc	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.99be	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99c1	60		rts				rts
.99c2					_ETVariable:
.99c2	4c 1c 9a	jmp $9a1c			jmp 	VariableHandler
.99c5					_ETPuncUnary:
.99c5	c8		iny				iny 								; consume the unary character
.99c6	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.99c8	f0 2d		beq $99f7			beq 	_ETUnaryNegate
.99ca	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.99cc	f0 39		beq $9a07			beq 	_ETDereference
.99ce	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.99d0	f0 43		beq $9a15			beq 	_ETParenthesis
.99d2	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.99d4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.99d6	f0 06		beq $99de			beq 	_ETIndirection
.99d8	e6 36		inc $36				inc 	zTemp0
.99da	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.99dc	d0 a0		bne $997e			bne 	_ETSyntaxError
.99de					_ETIndirection:
.99de	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.99e0	1a		inc a				inc 	a
.99e1	48		pha				pha
.99e2	20 4b 99	jsr $994b			jsr 	EvaluateTerm				; evaluate the term
.99e5	20 8f 97	jsr $978f			jsr 	Dereference 				; dereference it.
.99e8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.99eb	d0 07		bne $99f4			bne 	_ETTypeMismatch
.99ed	68		pla				pla 								; indirection 1-2
.99ee	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.99f0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99f3	60		rts				rts
.99f4					_ETTypeMismatch:
.99f4	4c 9a ab	jmp $ab9a			jmp 	TypeError
.99f7					_ETUnaryNegate:
.99f7	20 4b 99	jsr $994b			jsr 	EvaluateTerm				; evaluate the term
.99fa	20 8f 97	jsr $978f			jsr 	Dereference 				; dereference it.
.99fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9a00	29 10		and #$10			and 	#NSTString
.9a02	d0 f0		bne $99f4			bne 	_ETTypeMismatch
.9a04	4c d5 9d	jmp $9dd5			jmp 	NSMNegate  					; just toggles the sign bit.
.9a07					_ETDereference:
.9a07	20 4b 99	jsr $994b			jsr 	EvaluateTerm				; evaluate the term
.9a0a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9a0d	29 20		and #$20			and 	#NSBIsReference
.9a0f	f0 e3		beq $99f4			beq 	_ETTypeMismatch
.9a11	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9a14	60		rts				rts
.9a15					_ETParenthesis:
.9a15	20 7a 96	jsr $967a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9a18	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 			; check for )
.9a1b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9a1c					VariableHandler:
.9a1c	b1 30		lda ($30),y			lda 	(codePtr),y
.9a1e	18		clc				clc
.9a1f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a21	85 37		sta $37				sta 	zTemp0+1
.9a23	c8		iny				iny
.9a24	b1 30		lda ($30),y			lda 	(codePtr),y
.9a26	85 36		sta $36				sta 	zTemp0
.9a28	c8		iny				iny
.9a29	18		clc				clc									; copy variable address+3 to mantissa
.9a2a	69 03		adc #$03			adc 	#3
.9a2c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a2f	a5 37		lda $37				lda 	zTemp0+1
.9a31	69 00		adc #$00			adc 	#0
.9a33	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a36	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9a39	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a3c	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a3f	5a		phy				phy
.9a40	a0 02		ldy #$02			ldy 	#2 							; read type
.9a42	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a44	7a		ply				ply
.9a45	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9a47	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9a49	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a4c	29 04		and #$04			and 	#NSBIsArray
.9a4e	d0 01		bne $9a51			bne 	_VHArray
.9a50	60		rts				rts
.9a51					_VHArray:
.9a51	e8		inx				inx
.9a52	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9a55	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9a57	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9a5a	b1 30		lda ($30),y			lda 	(codePtr),y
.9a5c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9a5e	d0 06		bne $9a66			bne 	_VHNoSecondIndex
.9a60	c8		iny				iny 								; skip the comma
.9a61	e8		inx				inx
.9a62	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9a65	ca		dex				dex
.9a66					_VHNoSecondIndex:
.9a66	ca		dex				dex 								; set X back.
.9a67	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 			; and check the right bracket.
.9a6a	5a		phy				phy 								; save position
.9a6b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9a6e	85 3e		sta $3e				sta 	zaTemp
.9a70	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a73	85 3f		sta $3f				sta 	zaTemp+1
.9a75	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9a77	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a79	f0 02		beq $9a7d			beq 	_VHHas2Mask
.9a7b	a9 ff		lda #$ff			lda 	#$FF
.9a7d					_VHHas2Mask:
.9a7d	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9a80	f0 54		beq $9ad6			beq 	_VHBadIndex
.9a82	0a		asl a				asl 	a 							; carry will be set if a second index
.9a83	90 09		bcc $9a8e			bcc 	_VHCheckFirstIndex
.9a85	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9a87	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a89	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9a8c	90 48		bcc $9ad6			bcc 	_VHBadIndex
.9a8e					_VHCheckFirstIndex:
.9a8e	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9a90	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a92	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9a95	90 3f		bcc $9ad6			bcc 	_VHBadIndex
.9a97	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9a99	64 37		stz $37				stz 	zTemp0+1
.9a9b	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9a9e	30 0f		bmi $9aaf			bmi 	_VHNoMultiply
.9aa0	da		phx				phx
.9aa1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9aa4	48		pha				pha
.9aa5	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9aa7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9aa9	1a		inc a				inc 	a 							; add 1 for zero base
.9aaa	fa		plx				plx
.9aab	20 2c aa	jsr $aa2c			jsr 	Multiply8x8 				; calculate -> Z0
.9aae	fa		plx				plx
.9aaf					_VHNoMultiply:
.9aaf	18		clc				clc
.9ab0	a5 36		lda $36				lda 	zTemp0
.9ab2	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ab5	85 36		sta $36				sta 	zTemp0
.9ab7	a5 37		lda $37				lda 	zTemp0+1
.9ab9	69 00		adc #$00			adc 	#0
.9abb	85 37		sta $37				sta 	zTemp0+1
.9abd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ac0	20 9d 89	jsr $899d			jsr 	ScaleByBaseType
.9ac3	18		clc				clc
.9ac4	b2 3e		lda ($3e)			lda 	(zaTemp)
.9ac6	65 36		adc $36				adc 	zTemp0
.9ac8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9acb	a0 01		ldy #$01			ldy 	#1
.9acd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9acf	65 37		adc $37				adc 	zTemp0+1
.9ad1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ad4	7a		ply				ply 								; restore position
.9ad5	60		rts				rts
.9ad6					_VHBadIndex:
.9ad6	a9 17		lda #$17		lda	#23
.9ad8	4c 71 92	jmp $9271		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a962					AbsUnary:
.a962	fa		plx				plx 								; restore stack pos
.a963	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber 				; get a float or int
.a966	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.a969	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a96c	29 7f		and #$7f			and 	#$7F
.a96e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a971	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9adb					AllocUnary:
.9adb	fa		plx				plx 								; restore stack pos
.9adc	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger		; get bytes required.
.9adf	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.9ae2	da		phx				phx 								; save X/Y
.9ae3	5a		phy				phy
.9ae4	8a		txa				txa 								; copy X into Y
.9ae5	a8		tay				tay
.9ae6	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9ae9	aa		tax				tax
.9aea	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9aed	20 fa 9a	jsr $9afa			jsr 	AllocateXABytes 			; allocate memory
.9af0	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9af3	8a		txa				txa
.9af4	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9af7	7a		ply				ply
.9af8	fa		plx				plx
.9af9	60		rts				rts
.9afa					AllocateXABytes:
.9afa	5a		phy				phy
.9afb	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9afe	84 36		sty $36				sty 	zTemp0
.9b00	5a		phy				phy
.9b01	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9b04	84 37		sty $37				sty 	zTemp0+1
.9b06	5a		phy				phy
.9b07	18		clc				clc 								; add to low memory pointer
.9b08	6d 8c 04	adc $048c			adc 	lowMemPtr
.9b0b	8d 8c 04	sta $048c			sta 	lowMemPtr
.9b0e	8a		txa				txa
.9b0f	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9b12	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9b15	b0 2f		bcs $9b46			bcs 	CISSMemory
.9b17	20 38 9b	jsr $9b38			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9b1a					_ClearMemory:
.9b1a	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9b1d	c5 36		cmp $36				cmp 	zTemp0
.9b1f	d0 07		bne $9b28			bne 	_CMClearNext
.9b21	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9b24	c5 37		cmp $37				cmp 	zTemp0+1
.9b26	f0 0c		beq $9b34			beq 	_CMExit
.9b28					_CMClearNext:
.9b28	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9b2a	92 36		sta ($36)			sta 	(zTemp0)
.9b2c	e6 36		inc $36				inc 	zTemp0
.9b2e	d0 ea		bne $9b1a			bne 	_ClearMemory
.9b30	e6 37		inc $37				inc		zTemp0+1
.9b32	80 e6		bra $9b1a			bra 	_ClearMemory
.9b34					_CMExit:
.9b34	fa		plx				plx
.9b35	68		pla				pla
.9b36	7a		ply				ply
.9b37	60		rts				rts
.9b38					CheckIdentifierStringSpace:
.9b38	48		pha				pha
.9b39	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9b3c	18		clc				clc
.9b3d	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b3f	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9b42	b0 02		bcs $9b46			bcs 	CISSMemory
.9b44	68		pla				pla
.9b45	60		rts				rts
.9b46					CISSMemory:
.9b46	a9 06		lda #$06		lda	#6
.9b48	4c 71 92	jmp $9271		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a972					AscUnary:
.a972	fa		plx				plx 								; restore stack pos
.a973	20 88 9d	jsr $9d88			jsr 	EvaluateString 				; get a string
.a976	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a978	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.a97b	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.a97e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a97f					FracUnary:
.a97f	fa		plx				plx 								; restore stack pos
.a980	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber 				; get a float or int
.a983	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.a986	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a989	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a98b	f0 04		beq $a991			beq 	_IUZero
.a98d	20 4f a8	jsr $a84f			jsr 	FloatFractionalPart
.a990	60		rts				rts
.a991					_IUZero:
.a991	20 29 9e	jsr $9e29			jsr 	NSMSetZero
.a994	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a995					IntUnary:
.a995	fa		plx				plx 								; restore stack pos
.a996	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber 				; get a float or int
.a999	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.a99c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a99f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a9a1	f0 03		beq $a9a6			beq 	_IUExit
.a9a3	20 b2 a8	jsr $a8b2			jsr 	FloatIntegerPart
.a9a6					_IUExit:
.a9a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a9a7					LenUnary:
.a9a7	fa		plx				plx 								; restore stack pos
.a9a8	20 88 9d	jsr $9d88			jsr 	EvaluateString 				; get a string
.a9ab	5a		phy				phy
.a9ac	a0 00		ldy #$00			ldy 	#0 							; find length
.a9ae					_LenFind:
.a9ae	b1 36		lda ($36),y			lda 	(zTemp0),y
.a9b0	f0 06		beq $a9b8			beq 	_LenExit
.a9b2	c8		iny				iny
.a9b3	d0 f9		bne $a9ae			bne 	_LenFind
.a9b5	4c 95 ab	jmp $ab95			jmp 	RangeError 					; string > 255
.a9b8					_LenExit:
.a9b8	98		tya				tya
.a9b9	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.a9bc	7a		ply				ply
.a9bd	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.a9c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b4b					Unary_Not:
.9b4b	fa		plx				plx
.9b4c	20 a0 9d	jsr $9da0			jsr 	EvaluateInteger 			; get integer
.9b4f	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.9b52	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; zero mantissa ?
.9b55	f0 04		beq $9b5b			beq 	_NotZero
.9b57	20 29 9e	jsr $9e29			jsr 	NSMSetZero
.9b5a	60		rts				rts
.9b5b					_NotZero:
.9b5b	4c de 92	jmp $92de			jmp 	ReturnTrue
.9b5e					_UNBad:
.9b5e	4c 9f ab	jmp $ab9f			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b61					Unary_Random:
.9b61	fa		plx				plx
.9b62	20 da 9b	jsr $9bda			jsr 	Random32Bit 				; get a random number
.9b65	20 bf 9b	jsr $9bbf			jsr 	URCopyToMantissa  			; put in mantissa
.9b68	e8		inx				inx
.9b69	20 b5 9d	jsr $9db5			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b6c	ca		dex				dex
.9b6d	20 2e a6	jsr $a62e			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9b70	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9b73	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b76	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.9b79	60		rts				rts
.9b7a					Unary_Rnd:
.9b7a	fa		plx				plx
.9b7b	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber 				; number to use.
.9b7e	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 			; closing bracket
.9b81	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b84	f0 2b		beq $9bb1			beq 	_URCopySeed
.9b86	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9b89	10 23		bpl $9bae			bpl 	_URDontSeed
.9b8b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9b8e	49 17		eor #$17			eor 	#$17
.9b90	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b93	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b96	49 a5		eor #$a5			eor 	#$A5
.9b98	8d 89 04	sta $0489			sta 	RandomSeed+1
.9b9b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9b9e	49 c2		eor #$c2			eor 	#$C2
.9ba0	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ba3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ba6	49 9d		eor #$9d			eor 	#$9D
.9ba8	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9bab	20 da 9b	jsr $9bda			jsr 	Random32Bit
.9bae					_URDontSeed:
.9bae	20 da 9b	jsr $9bda			jsr 	Random32Bit 				; generate a number.
.9bb1					_URCopySeed:
.9bb1	20 bf 9b	jsr $9bbf			jsr 	URCopyToMantissa 			; copy into mantissa
.9bb4	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9bb6	8d 28 04	sta $0428			sta 	NSExponent
.9bb9	a9 08		lda #$08			lda 	#NSTFloat
.9bbb	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9bbe	60		rts				rts
.9bbf					URCopyToMantissa:
.9bbf	ad 88 04	lda $0488			lda 	RandomSeed+0
.9bc2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bc5	ad 89 04	lda $0489			lda 	RandomSeed+1
.9bc8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bcb	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9bce	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bd1	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9bd4	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9bd6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bd9	60		rts				rts
.9bda					Random32Bit:
.9bda	5a		phy				phy
.9bdb	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9bdd	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9be0	d0 03		bne $9be5			bne 	_Random1
.9be2	a8		tay				tay 								; if so do it 256 times
.9be3	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9be5					_Random1:
.9be5	0a		asl a				asl 	a 							; LSFR RNG
.9be6	2e 89 04	rol $0489			rol 	RandomSeed+1
.9be9	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9bec	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9bef	90 02		bcc $9bf3			bcc 	_Random2
.9bf1	49 c5		eor #$c5			eor 	#$C5
.9bf3					_Random2:
.9bf3	88		dey				dey
.9bf4	d0 ef		bne $9be5			bne 	_Random1
.9bf6	8d 88 04	sta $0488			sta 	RandomSeed+0
.9bf9	7a		ply				ply
.9bfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a9c1					SgnUnary:
.a9c1	fa		plx				plx 								; restore stack pos
.a9c2	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber 				; get a float or int
.a9c5	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.a9c8	20 59 9e	jsr $9e59			jsr 	NSMIsZero 					; if zero
.a9cb	f0 10		beq $a9dd			beq 	_SGZero  					; return Int Zero
.a9cd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a9d0	48		pha				pha
.a9d1	a9 01		lda #$01			lda 	#1 							; set to 1
.a9d3	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.a9d6	68		pla				pla
.a9d7	29 80		and #$80			and		#$80 						; copy the sign byte out
.a9d9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9dc	60		rts				rts
.a9dd	20 29 9e	jsr $9e29	_SGZero:jsr 	NSMSetZero
.a9e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a9e1					ValUnary:
.a9e1	fa		plx				plx 								; restore stack pos
.a9e2	20 f7 a9	jsr $a9f7			jsr 	ValMainCode 				; do the main val() code
.a9e5	b0 01		bcs $a9e8			bcs 	_VUError 					; couldn't convert
.a9e7	60		rts				rts
.a9e8					_VUError:
.a9e8	4c 9a ab	jmp $ab9a			jmp 	TypeError
.a9eb					IsValUnary:
.a9eb	fa		plx				plx 								; restore stack pos
.a9ec	20 f7 a9	jsr $a9f7			jsr 	ValMainCode 				; do the main val() code
.a9ef	b0 03		bcs $a9f4			bcs 	_VUBad
.a9f1	4c de 92	jmp $92de			jmp 	ReturnTrue
.a9f4					_VUBad:
.a9f4	4c ea 92	jmp $92ea			jmp 	ReturnFalse
.a9f7					ValMainCode:
.a9f7	20 88 9d	jsr $9d88			jsr 	EvaluateString 				; get a string
.a9fa	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 			; check right bracket present
.a9fd	5a		phy				phy
.a9fe	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.aa00	f0 17		beq $aa19			beq 	_VMCFail2
.aa02	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.aa04	48		pha				pha 								; save first character
.aa05	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.aa07	d0 01		bne $aa0a			bne 	_VMCStart
.aa09	c8		iny				iny 								; skip over -
.aa0a					_VMCStart:
.aa0a	38		sec				sec 								; initialise first time round.
.aa0b					_VMCNext:
.aa0b	c8		iny				iny 								; pre-increment
.aa0c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.aa0e	f0 0c		beq $aa1c			beq 	_VMCSuccess 				; successful.
.aa10	20 2d 98	jsr $982d			jsr 	EncodeNumber 				; send it to the number-builder
.aa13	90 03		bcc $aa18			bcc 	_VMCFail 					; if failed, give up.
.aa15	18		clc				clc 								; next time round, countinue
.aa16	80 f3		bra $aa0b			bra 	_VMCNext
.aa18					_VMCFail:
.aa18	68		pla				pla
.aa19					_VMCFail2:
.aa19	7a		ply				ply
.aa1a	38		sec				sec
.aa1b	60		rts				rts
.aa1c					_VMCSuccess:
.aa1c	a9 00		lda #$00			lda 	#0 							; construct final
.aa1e	20 2d 98	jsr $982d			jsr 	EncodeNumber
.aa21	68		pla				pla
.aa22	c9 2d		cmp #$2d			cmp 	#"-"
.aa24	d0 03		bne $aa29			bne 	_VMCNotNegative
.aa26	20 d5 9d	jsr $9dd5			jsr		NSMNegate
.aa29					_VMCNotNegative:
.aa29	7a		ply				ply
.aa2a	18		clc				clc
.aa2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9bfb					ChrUnary:
.9bfb	fa		plx				plx 								; restore stack pos
.9bfc	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger			; get value
.9bff	48		pha				pha
.9c00	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.9c03	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c05	20 b6 ae	jsr $aeb6			jsr 	StringTempAllocate
.9c08	68		pla				pla 								; write number to it
.9c09	20 f4 ae	jsr $aef4			jsr 	StringTempWrite
.9c0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c0d					SpcUnary:
.9c0d	fa		plx				plx 								; restore stack pos
.9c0e	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger			; get value
.9c11	5a		phy				phy
.9c12	48		pha				pha 								; save count
.9c13	20 b6 ae	jsr $aeb6			jsr 	StringTempAllocate
.9c16	7a		ply				ply 								; to do count in Y
.9c17					_SpcLoop:
.9c17	c0 00		cpy #$00			cpy 	#0
.9c19	f0 08		beq $9c23			beq 	_SpcExit
.9c1b	a9 20		lda #$20			lda 	#32
.9c1d	20 f4 ae	jsr $aef4			jsr 	StringTempWrite
.9c20	88		dey				dey
.9c21	80 f4		bra $9c17			bra 	_SPCLoop
.9c23					_SpcExit:
.9c23	7a		ply				ply
.9c24	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket
.9c27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c28					Unary_Str:
.9c28	fa		plx				plx
.9c29	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber  			; get number
.9c2c	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 			; closing bracket
.9c2f	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c31	20 4a 9c	jsr $9c4a			jsr 	ConvertNumberToString 		; do the conversion.
.9c34	a9 21		lda #$21			lda		#33 						; create buffer
.9c36	20 b6 ae	jsr $aeb6			jsr 	StringTempAllocate 			; allocate memory
.9c39	da		phx				phx
.9c3a	a2 00		ldx #$00			ldx 	#0
.9c3c					_USCopy:
.9c3c	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c3f	20 f4 ae	jsr $aef4			jsr 	StringTempWrite
.9c42	e8		inx				inx
.9c43	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9c46	d0 f4		bne $9c3c			bne 	_USCopy
.9c48	fa		plx				plx
.9c49	60		rts				rts
.9c4a					ConvertNumberToString:
.9c4a	5a		phy				phy 								; save code position
.9c4b	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9c4e	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9c51	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9c54	10 0a		bpl $9c60			bpl 	_CNTSNotNegative
.9c56	29 7f		and #$7f			and 	#$7F 						; make +ve
.9c58	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c5b	a9 2d		lda #$2d			lda 	#"-"
.9c5d	20 c6 9c	jsr $9cc6			jsr 	WriteDecimalBuffer
.9c60					_CNTSNotNegative:
.9c60	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c63	f0 15		beq $9c7a			beq 	_CNTSNotFloat
.9c65	e8		inx				inx 								; round up
.9c66	a9 01		lda #$01			lda 	#1
.9c68	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.9c6b	ca		dex				dex
.9c6c	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c6f	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c72	a9 08		lda #$08			lda 	#NSTFloat
.9c74	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c77	20 71 a7	jsr $a771			jsr 	FloatAdd
.9c7a					_CNTSNotFloat:
.9c7a	20 a8 9c	jsr $9ca8			jsr 	MakePlusTwoString
.9c7d	20 4f a8	jsr $a84f			jsr 	FloatFractionalPart 		; get the fractional part
.9c80	20 13 a9	jsr $a913			jsr 	NSNormalise					; normalise , exit if zero
.9c83	f0 21		beq $9ca6			beq 	_CNTSExit
.9c85	a9 2e		lda #$2e			lda 	#"."
.9c87	20 c6 9c	jsr $9cc6			jsr 	WriteDecimalBuffer 			; write decimal place
.9c8a					_CNTSDecimal:
.9c8a	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c8d	30 17		bmi $9ca6			bmi 	_CNTSExit
.9c8f	e8		inx				inx 								; x 10.0
.9c90	a9 0a		lda #$0a			lda 	#10
.9c92	20 2b 9e	jsr $9e2b			jsr 	NSMSetByte
.9c95	a9 08		lda #$08			lda 	#NSTFloat
.9c97	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c9a	ca		dex				dex
.9c9b	20 dc a8	jsr $a8dc			jsr 	FloatMultiply
.9c9e	20 a8 9c	jsr $9ca8			jsr 	MakePlusTwoString
.9ca1	20 4f a8	jsr $a84f			jsr 	FloatFractionalPart 		; get the fractional part
.9ca4	80 e4		bra $9c8a			bra 	_CNTSDecimal 				; keep going.
.9ca6					_CNTSExit:
.9ca6	7a		ply				ply
.9ca7	60		rts				rts
.9ca8					MakePlusTwoString:
.9ca8	da		phx				phx
.9ca9	20 00 9e	jsr $9e00			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9cac	e8		inx				inx 								; access it
.9cad	e8		inx				inx
.9cae	20 b2 a8	jsr $a8b2			jsr 	FloatIntegerPart 			; make it an integer
.9cb1	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9cb3	20 1b a7	jsr $a71b			jsr 	ConvertInt32
.9cb6	a2 00		ldx #$00			ldx	 	#0
.9cb8					_MPTSCopy:
.9cb8	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9cbb	20 c6 9c	jsr $9cc6			jsr 	WriteDecimalBuffer
.9cbe	e8		inx				inx
.9cbf	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9cc2	d0 f4		bne $9cb8			bne 	_MPTSCopy
.9cc4	fa		plx				plx
.9cc5	60		rts				rts
.9cc6					WriteDecimalBuffer:
.9cc6	da		phx				phx
.9cc7	ae 95 04	ldx $0495			ldx 	dbOffset
.9cca	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9ccd	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9cd0	ee 95 04	inc $0495			inc 	dbOffset
.9cd3	fa		plx				plx
.9cd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9cd5					Unary_Left:
.9cd5	fa		plx				plx
.9cd6	18		clc				clc 								; only one parameter
.9cd7	20 4c 9d	jsr $9d4c			jsr 	SubstringInitial 			; set up.
.9cda	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9cdd	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ce0	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ce3	80 2c		bra $9d11			bra 	SubstringMain
.9ce5					Unary_Right:
.9ce5	fa		plx				plx
.9ce6	18		clc				clc 								; only one parameter
.9ce7	20 4c 9d	jsr $9d4c			jsr 	SubstringInitial 			; set up.
.9cea	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9ced	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cf0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9cf3	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9cf6	b0 02		bcs $9cfa			bcs 	_URNotUnderflow
.9cf8	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9cfa					_URNotUnderFlow:
.9cfa	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9cfd	80 12		bra $9d11			bra 	SubStringMain
.9cff					Unary_Mid:
.9cff	fa		plx				plx
.9d00	38		sec				sec 								; two parameters
.9d01	20 4c 9d	jsr $9d4c			jsr 	SubstringInitial 			; set up.
.9d04	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d07	f0 05		beq $9d0e			beq 	_UMError
.9d09	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d0c	80 03		bra $9d11			bra 	SubStringMain
.9d0e					_UMError:
.9d0e	4c 9f ab	jmp $ab9f			jmp 	ArgumentError
.9d11					SubStringMain:
.9d11	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d14	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9d17	b0 2d		bcs $9d46			bcs 	_SSMNull 					; if so, return an empty string.
.9d19	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d1c	f0 28		beq $9d46			beq 	_SSMNull 					; return empty string.
.9d1e	18		clc				clc 								; add the offset +1 to the address and
.9d1f	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9d22	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9d25	85 36		sta $36				sta 	zTemp0
.9d27	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9d2a	69 00		adc #$00			adc 	#0
.9d2c	85 37		sta $37				sta 	zTemp0+1
.9d2e					_SSMNoCarry:
.9d2e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d31	20 b6 ae	jsr $aeb6			jsr 	StringTempAllocate 			; allocate that many characters
.9d34	5a		phy				phy 								; save Y
.9d35	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d37					_SSMCopy:
.9d37	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d39	f0 09		beq $9d44			beq 	_SSMEString 				; no more to copy
.9d3b	20 f4 ae	jsr $aef4			jsr 	StringTempWrite 			; and write it out.
.9d3e	c8		iny				iny
.9d3f	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9d42	d0 f3		bne $9d37			bne 	_SSMCopy
.9d44					_SSMEString:
.9d44	7a		ply				ply
.9d45					_SSMExit:
.9d45	60		rts				rts
.9d46					_SSMNull:
.9d46	a9 00		lda #$00			lda 	#0
.9d48	20 b6 ae	jsr $aeb6			jsr 	StringTempAllocate
.9d4b	60		rts				rts
.9d4c					SubstringInitial:
.9d4c	da		phx				phx 								; save initial stack position
.9d4d	08		php				php 								; save carry on stack indicating 2 parameters
.9d4e	20 88 9d	jsr $9d88			jsr 	EvaluateString 				; get a string
.9d51	5a		phy				phy 								; calculate length to exponent.
.9d52	a0 ff		ldy #$ff			ldy 	#$FF
.9d54					_SIFindLength:
.9d54	c8		iny				iny
.9d55	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d57	d0 fb		bne $9d54			bne 	_SIFindLength
.9d59	98		tya				tya
.9d5a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d5d	7a		ply				ply
.9d5e	e8		inx				inx
.9d5f	20 b2 a5	jsr $a5b2			jsr 	CheckComma 					; comma next
.9d62	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger 		; get next parameter
.9d65	28		plp				plp 								; is it the last parameter ?
.9d66	90 07		bcc $9d6f			bcc 	_SSIExit 					; if so, exit.
.9d68	e8		inx				inx
.9d69	20 b2 a5	jsr $a5b2			jsr 	CheckComma 					; comma next
.9d6c	20 c1 9d	jsr $9dc1			jsr 	Evaluate8BitInteger 		; get last parameter
.9d6f					_SSIExit:
.9d6f	fa		plx				plx
.9d70	20 aa a5	jsr $a5aa			jsr 	CheckRightBracket 			; check closing bracket
.9d73	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d74					EvaluateValue:
.9d74	48		pha				pha
.9d75	20 7a 96	jsr $967a			jsr		EvaluateExpression 			; expression
.9d78	20 8f 97	jsr $978f			jsr 	Dereference					; derefernce it
.9d7b	68		pla				pla
.9d7c	60		rts				rts
.9d7d					EvaluateNumber:
.9d7d	20 74 9d	jsr $9d74			jsr 	EvaluateValue 				; get a value
.9d80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d83	29 10		and #$10			and 	#NSBIsString
.9d85	d0 16		bne $9d9d			bne 	HelperTypeError
.9d87	60		rts				rts
.9d88					EvaluateString:
.9d88	20 74 9d	jsr $9d74			jsr 	EvaluateValue 				; get a value
.9d8b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d8e	29 10		and #$10			and 	#NSBIsString
.9d90	f0 0b		beq $9d9d			beq 	HelperTypeError
.9d92					CopyAddressToTemp0:
.9d92	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d95	85 36		sta $36				sta 	zTemp0
.9d97	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d9a	85 37		sta $37				sta 	zTemp0+1
.9d9c	60		rts				rts
.9d9d					HelperTypeError:
.9d9d	4c 9a ab	jmp $ab9a			jmp 	TypeError
.9da0					EvaluateInteger:
.9da0	20 7d 9d	jsr $9d7d			jsr 	EvaluateNumber
.9da3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9da6	d0 0a		bne $9db2			bne 	HelperValueError 			; if not, it's a float.
.9da8	60		rts				rts
.9da9					EvaluateUnsignedInteger:
.9da9	20 a0 9d	jsr $9da0			jsr 	EvaluateInteger 			; check integer is +ve
.9dac	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9daf	30 01		bmi $9db2			bmi 	HelperValueError
.9db1	60		rts				rts
.9db2					HelperValueError:
.9db2	4c 9f ab	jmp $ab9f			jmp 	ArgumentError
.9db5					Evaluate16BitInteger:
.9db5	20 a9 9d	jsr $9da9			jsr	 	EvaluateUnsignedInteger		; get integer
.9db8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9dbb	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9dbe	d0 f2		bne $9db2			bne 	HelperValueError
.9dc0	60		rts				rts
.9dc1					Evaluate8BitInteger:
.9dc1	20 a9 9d	jsr $9da9			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9dc4	d0 ec		bne $9db2			bne 	HelperValueError
.9dc6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9dc9	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9dcc	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9dcf	d0 e1		bne $9db2			bne 	HelperValueError
.9dd1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.aa2c					Multiply8x8:
.aa2c	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.aa2d	85 36		sta $36			  	sta 	zTemp0
.aa2f	86 37		stx $37				stx 	zTemp0+1
.aa31	a9 00		lda #$00			lda 	#0
.aa33	a2 08		ldx #$08			ldx 	#8
.aa35					_M88Loop:
.aa35	90 03		bcc $aa3a			bcc 	_M88NoAdd
.aa37	18		clc				clc
.aa38	65 37		adc $37				adc 	zTemp0+1
.aa3a					_M88NoAdd:
.aa3a	6a		ror a				ror 	a
.aa3b	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aa3d	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aa3e	d0 f5		bne $aa35			bne 	_M88Loop
.aa40	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aa42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9dd5					NSMNegate:
.9dd5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9dd8	49 80		eor #$80			eor 	#NSBIsNegative
.9dda	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ddd	60		rts				rts
.9dde					NSMNegateMantissa:
.9dde	38		sec				sec
.9ddf	a9 00		lda #$00			lda 	#0
.9de1	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9de4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9de7	a9 00		lda #$00			lda 	#0
.9de9	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dec	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9def	a9 00		lda #$00			lda 	#0
.9df1	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9df4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9df7	a9 00		lda #$00			lda 	#0
.9df9	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dfc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dff	60		rts				rts
.9e00					NSMShiftUpTwo:
.9e00	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e03	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e06	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e09	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9e0c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9e0f	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9e12	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e15	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9e18	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9e1b	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9e1e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e21	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9e24	60		rts				rts
.9e25					NSMSetZeroMantissaOnly:
.9e25	a9 00		lda #$00			lda 	#0
.9e27	80 08		bra $9e31			bra 	NSMSetMantissa
.9e29					NSMSetZero:
.9e29	a9 00		lda #$00			lda 	#0
.9e2b					NSMSetByte:
.9e2b	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e2e	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e31					NSMSetMantissa:
.9e31	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e34	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e37	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e3a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e3d	60		rts				rts
.9e3e					NSMShiftLeft:
.9e3e	18		clc				clc
.9e3f					NSMRotateLeft:
.9e3f	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e42	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e45	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e48	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e4b	60		rts				rts
.9e4c					NSMShiftRight:
.9e4c	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e4f	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e52	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e55	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e58	60		rts				rts
.9e59					NSMIsZero:
.9e59	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e5c	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e5f	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e62	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e65	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aa43					Assemble_ora:
.aa43	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa46	01					.byte $01
.aa47					Assemble_and:
.aa47	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa4a	21					.byte $21
.aa4b					Assemble_eor:
.aa4b	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa4e	41					.byte $41
.aa4f					Assemble_adc:
.aa4f	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa52	61					.byte $61
.aa53					Assemble_sta:
.aa53	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa56	81					.byte $81
.aa57					Assemble_lda:
.aa57	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa5a	a1					.byte $a1
.aa5b					Assemble_cmp:
.aa5b	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa5e	c1					.byte $c1
.aa5f					Assemble_sbc:
.aa5f	20 9c 85	jsr $859c		jsr	AssembleGroup1
>aa62	e1					.byte $e1
.aa63					Assemble_asl:
.aa63	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa66	02					.byte $02
>aa67	75					.byte $75
.aa68					Assemble_rol:
.aa68	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa6b	22					.byte $22
>aa6c	75					.byte $75
.aa6d					Assemble_lsr:
.aa6d	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa70	42					.byte $42
>aa71	75					.byte $75
.aa72					Assemble_ror:
.aa72	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa75	62					.byte $62
>aa76	75					.byte $75
.aa77					Assemble_stx:
.aa77	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa7a	82					.byte $82
>aa7b	50					.byte $50
.aa7c					Assemble_ldx:
.aa7c	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa7f	a2					.byte $a2
>aa80	d0					.byte $d0
.aa81					Assemble_dec:
.aa81	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa84	c2					.byte $c2
>aa85	55					.byte $55
.aa86					Assemble_inc:
.aa86	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa89	e2					.byte $e2
>aa8a	55					.byte $55
.aa8b					Assemble_stz:
.aa8b	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa8e	60					.byte $60
>aa8f	44					.byte $44
.aa90					Assemble_bit:
.aa90	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa93	20					.byte $20
>aa94	55					.byte $55
.aa95					Assemble_sty:
.aa95	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa98	80					.byte $80
>aa99	54					.byte $54
.aa9a					Assemble_ldy:
.aa9a	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aa9d	a0					.byte $a0
>aa9e	d5					.byte $d5
.aa9f					Assemble_cpy:
.aa9f	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aaa2	c0					.byte $c0
>aaa3	d4					.byte $d4
.aaa4					Assemble_cpx:
.aaa4	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aaa7	e0					.byte $e0
>aaa8	d0					.byte $d0
.aaa9					Assemble_tsb:
.aaa9	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aaac	00					.byte $00
>aaad	50					.byte $50
.aaae					Assemble_trb:
.aaae	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aab1	10					.byte $10
>aab2	50					.byte $50
.aab3					Assemble_jsr:
.aab3	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aab6	14					.byte $14
>aab7	10					.byte $10
.aab8					Assemble_jmp:
.aab8	20 a3 85	jsr $85a3		jsr	AssembleGroup2
>aabb	40					.byte $40
>aabc	10					.byte $10
.aabd					Assemble_bpl:
.aabd	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aac0	10					.byte $10
.aac1					Assemble_bmi:
.aac1	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aac4	30					.byte $30
.aac5					Assemble_bvc:
.aac5	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aac8	50					.byte $50
.aac9					Assemble_bvs:
.aac9	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aacc	70					.byte $70
.aacd					Assemble_bcc:
.aacd	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aad0	90					.byte $90
.aad1					Assemble_bcs:
.aad1	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aad4	b0					.byte $b0
.aad5					Assemble_bne:
.aad5	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aad8	d0					.byte $d0
.aad9					Assemble_beq:
.aad9	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aadc	f0					.byte $f0
.aadd					Assemble_bra:
.aadd	20 f4 85	jsr $85f4		jsr	AssembleGroup3
>aae0	80					.byte $80
.aae1					Assemble_brk:
.aae1	20 2a 86	jsr $862a		jsr	AssembleGroup4
>aae4	00					.byte $00
.aae5					Assemble_php:
.aae5	20 2a 86	jsr $862a		jsr	AssembleGroup4
>aae8	08					.byte $08
.aae9					Assemble_clc:
.aae9	20 2a 86	jsr $862a		jsr	AssembleGroup4
>aaec	18					.byte $18
.aaed					Assemble_plp:
.aaed	20 2a 86	jsr $862a		jsr	AssembleGroup4
>aaf0	28					.byte $28
.aaf1					Assemble_sec:
.aaf1	20 2a 86	jsr $862a		jsr	AssembleGroup4
>aaf4	38					.byte $38
.aaf5					Assemble_rti:
.aaf5	20 2a 86	jsr $862a		jsr	AssembleGroup4
>aaf8	40					.byte $40
.aaf9					Assemble_pha:
.aaf9	20 2a 86	jsr $862a		jsr	AssembleGroup4
>aafc	48					.byte $48
.aafd					Assemble_cli:
.aafd	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab00	58					.byte $58
.ab01					Assemble_phy:
.ab01	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab04	5a					.byte $5a
.ab05					Assemble_rts:
.ab05	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab08	60					.byte $60
.ab09					Assemble_pla:
.ab09	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab0c	68					.byte $68
.ab0d					Assemble_sei:
.ab0d	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab10	78					.byte $78
.ab11					Assemble_ply:
.ab11	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab14	7a					.byte $7a
.ab15					Assemble_dey:
.ab15	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab18	88					.byte $88
.ab19					Assemble_txa:
.ab19	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab1c	8a					.byte $8a
.ab1d					Assemble_tya:
.ab1d	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab20	98					.byte $98
.ab21					Assemble_txs:
.ab21	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab24	9a					.byte $9a
.ab25					Assemble_tay:
.ab25	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab28	a8					.byte $a8
.ab29					Assemble_tax:
.ab29	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab2c	aa					.byte $aa
.ab2d					Assemble_clv:
.ab2d	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab30	b8					.byte $b8
.ab31					Assemble_tsx:
.ab31	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab34	ba					.byte $ba
.ab35					Assemble_iny:
.ab35	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab38	c8					.byte $c8
.ab39					Assemble_dex:
.ab39	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab3c	ca					.byte $ca
.ab3d					Assemble_cld:
.ab3d	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab40	d8					.byte $d8
.ab41					Assemble_phx:
.ab41	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab44	da					.byte $da
.ab45					Assemble_stp:
.ab45	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab48	db					.byte $db
.ab49					Assemble_inx:
.ab49	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab4c	e8					.byte $e8
.ab4d					Assemble_nop:
.ab4d	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab50	ea					.byte $ea
.ab51					Assemble_sed:
.ab51	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab54	f8					.byte $f8
.ab55					Assemble_plx:
.ab55	20 2a 86	jsr $862a		jsr	AssembleGroup4
>ab58	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ab59					DecimalScalarTable:
>ab59	66 66 66 66				.dword $66666666 ; 0.1
>ab5d	de					.byte $de
>ab5e	1f 85 eb 51				.dword $51eb851f ; 0.01
>ab62	db					.byte $db
>ab63	4c 37 89 41				.dword $4189374c ; 0.001
>ab67	d8					.byte $d8
>ab68	ac 8b db 68				.dword $68db8bac ; 0.0001
>ab6c	d4					.byte $d4
>ab6d	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ab71	d1					.byte $d1
>ab72	83 de 1b 43				.dword $431bde83 ; 1e-06
>ab76	ce					.byte $ce
>ab77	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ab7b	ca					.byte $ca
>ab7c	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ab80	c7					.byte $c7
>ab81	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ab85	c4					.byte $c4
>ab86	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ab8a	c0					.byte $c0
>ab8b	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ab8f	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ab90					SyntaxError:
.ab90	a9 02		lda #$02		lda	#2
.ab92	4c 71 92	jmp $9271		jmp	ErrorHandler
.ab95					RangeError:
.ab95	a9 04		lda #$04		lda	#4
.ab97	4c 71 92	jmp $9271		jmp	ErrorHandler
.ab9a					TypeError:
.ab9a	a9 05		lda #$05		lda	#5
.ab9c	4c 71 92	jmp $9271		jmp	ErrorHandler
.ab9f					ArgumentError:
.ab9f	a9 07		lda #$07		lda	#7
.aba1	4c 71 92	jmp $9271		jmp	ErrorHandler
.aba4					NotDoneError:
.aba4	a9 0c		lda #$0c		lda	#12
.aba6	4c 71 92	jmp $9271		jmp	ErrorHandler
.aba9					ErrorText:
>aba9	42 72 65 61 6b 00			.text	"Break",0
>abaf	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>abb7	72 72 6f 72 00
>abbc	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>abc4	20 62 79 20 7a 65 72 6f 00
>abcd	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>abd5	61 6e 67 65 00
>abda	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>abe2	6d 61 74 63 68 00
>abe8	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>abf0	65 6d 6f 72 79 00
>abf6	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>abfe	61 72 67 75 6d 65 6e 74 00
>ac07	53 74 6f 70 00				.text	"Stop",0
>ac0c	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ac14	6f 6f 20 6c 6f 6e 67 00
>ac1c	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ac24	6e 20 66 61 69 6c 65 64 00
>ac2d	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ac35	61 74 61 00
>ac39	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ac41	65 6e 74 65 64 00
>ac47	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ac4f	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ac5b	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ac63	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ac70	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ac78	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ac85	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ac8d	68 6f 75 74 20 57 68 69 6c 65 00
>ac98	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>aca0	68 6f 75 74 20 46 6f 72 00
>aca9	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>acb1	61 63 6b 20 66 75 6c 6c 00
>acba	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>acc2	75 63 74 75 72 65 00
>acc9	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>acd1	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>acde	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ace6	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>acf4	41 72 72 61 79 20 73 69			.text	"Array size",0
>acfc	7a 65 00
>acff	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ad07	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ad0f	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 1048."
>ad17	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>ad27	2e 20 42 75 69 6c 64 20 31 30 34 38 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ad34					EXTPrintCharacter:
.ad34	48		pha				pha
.ad35	da		phx				phx
.ad36	5a		phy				phy
.ad37	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ad3a	7a		ply				ply
.ad3b	fa		plx				plx
.ad3c	68		pla				pla
.ad3d	60		rts				rts
.ad3e					EXTInputSingleCharacter:
.ad3e	da		phx				phx
.ad3f	5a		phy				phy
.ad40					_EISCWait:
.ad40	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ad43	c9 00		cmp #$00			cmp 	#0
.ad45	f0 f9		beq $ad40			beq 	_EISCWait
.ad47	7a		ply				ply
.ad48	fa		plx				plx
.ad49	60		rts				rts
.ad4a					EXTInputLine:
.ad4a	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ad4c					_ILLoop:
.ad4c	da		phx				phx 								; read character in
.ad4d	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ad50	fa		plx				plx
.ad51	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ad53	f0 12		beq $ad67			beq 	_ILBackspace
.ad55	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ad57	f0 15		beq $ad6e			beq 	_ILExit
.ad59	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ad5b	90 ef		bcc $ad4c			bcc 	_ILLoop
.ad5d	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ad5f	f0 eb		beq $ad4c			beq 	_ILLoop
.ad61	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ad64	e8		inx				inx
.ad65	80 e5		bra $ad4c			bra 	_ILLoop
.ad67					_ILBackspace:
.ad67	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ad69	f0 e1		beq $ad4c			beq 	_ILLoop
.ad6b	ca		dex				dex 								; back one.
.ad6c	80 de		bra $ad4c			bra 	_ILLoop
.ad6e					_ILExit:
.ad6e	20 34 ad	jsr $ad34			jsr 	EXTPrintCharacter
.ad71	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ad74	60		rts				rts
.ad75					EXTBreakCheck:
.ad75	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ad78					MemoryDeleteLine:
.ad78	20 97 ad	jsr $ad97			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ad7b	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ad7d	a8		tay				tay
.ad7e					_MDDLLoop:
.ad7e	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ad80	92 30		sta ($30)			sta 	(codePtr)
.ad82	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ad84	c5 3a		cmp $3a				cmp 	zTemp2
.ad86	d0 07		bne $ad8f			bne 	_MDLDLNext
.ad88	a5 31		lda $31				lda 	codePtr+1
.ad8a	c5 3b		cmp $3b				cmp 	zTemp2+1
.ad8c	d0 01		bne $ad8f			bne 	_MDLDLNext
.ad8e					_MDDLExit:
.ad8e	60		rts				rts
.ad8f					_MDLDLNext:
.ad8f	e6 30		inc $30				inc 	codePtr						; next byte
.ad91	d0 eb		bne $ad7e			bne 	_MDDLLoop
.ad93	e6 31		inc $31				inc 	codePtr+1
.ad95	80 e7		bra $ad7e			bra 	_MDDLLoop
.ad97					IMemoryFindEnd:
.ad97	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad99	85 3a		sta $3a				sta 	0+zTemp2
.ad9b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad9d	85 3b		sta $3b				sta 	1+zTemp2
.ad9f					_MDLFELoop:
.ad9f	b2 3a		lda ($3a)			lda 	(zTemp2)
.ada1	f0 0b		beq $adae			beq 	_MDLFEExit
.ada3	18		clc				clc
.ada4	65 3a		adc $3a				adc 	zTemp2
.ada6	85 3a		sta $3a				sta 	zTemp2
.ada8	90 f5		bcc $ad9f			bcc 	_MDLFELoop
.adaa	e6 3b		inc $3b				inc 	zTemp2+1
.adac	80 f1		bra $ad9f			bra 	_MDLFELoop
.adae					_MDLFEExit:
.adae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.adaf					MemoryInsertLine:
.adaf	08		php				php
.adb0	20 97 ad	jsr $ad97			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.adb3	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.adb5	1a		inc a				inc 	a
.adb6	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.adb8	b0 36		bcs $adf0			bcs 	_MDLIError
.adba	28		plp				plp
.adbb	90 08		bcc $adc5			bcc 	_MDLIFound
.adbd	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.adbf	85 30		sta $30				sta 	codePtr
.adc1	a5 3b		lda $3b				lda 	zTemp2+1
.adc3	85 31		sta $31				sta 	codePtr+1
.adc5					_MDLIFound:
.adc5	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.adc8	a8		tay				tay
.adc9					_MDLIInsert:
.adc9	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.adcb	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.adcd	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.adcf	c5 3a		cmp $3a				cmp 	zTemp2
.add1	d0 06		bne $add9			bne 	_MDLINext
.add3	a5 31		lda $31				lda 	codePtr+1
.add5	c5 3b		cmp $3b				cmp 	zTemp2+1
.add7	f0 0a		beq $ade3			beq 	_MDLIHaveSpace
.add9					_MDLINext:
.add9	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.addb	d0 02		bne $addf			bne 	_MDLINoBorrow
.addd	c6 3b		dec $3b				dec 	zTemp2+1
.addf					_MDLINoBorrow:
.addf	c6 3a		dec $3a				dec 	zTemp2
.ade1	80 e6		bra $adc9			bra 	_MDLIInsert
.ade3					_MDLIHaveSpace:
.ade3	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.ade6	88		dey				dey 								; from offset-1 to 0
.ade7					_MDLICopy:
.ade7	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.adea	91 30		sta ($30),y			sta 	(codePtr),y
.adec	88		dey				dey
.aded	10 f8		bpl $ade7			bpl 	_MDLICopy
.adef	60		rts				rts
.adf0					_MDLIError:
.adf0	a9 06		lda #$06		lda	#6
.adf2	4c 71 92	jmp $9271		jmp	ErrorHandler
.adf5					MDLAppendLine:
.adf5	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.adf7	85 36		sta $36				sta 	zTemp0
.adf9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adfb	85 38		sta $38				sta 	0+zTemp1
.adfd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adff	85 39		sta $39				sta 	1+zTemp1
.ae01	b2 38		lda ($38)			lda 	(zTemp1)
.ae03	d0 0a		bne $ae0f			bne 	_MDLANoInitialise
.ae05	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae07	8d 4f 06	sta $064f			sta 	0+AppendPointer
.ae0a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae0c	8d 50 06	sta $0650			sta 	1+AppendPointer
.ae0f					_MDLANoInitialise:
.ae0f	18		clc				clc
.ae10	ad 4f 06	lda $064f			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ae13	85 38		sta $38				sta 	zTemp1
.ae15	72 36		adc ($36)			adc 	(zTemp0)
.ae17	8d 4f 06	sta $064f			sta 	AppendPointer
.ae1a	ad 50 06	lda $0650			lda 	AppendPointer+1
.ae1d	85 39		sta $39				sta 	zTemp1+1
.ae1f	69 00		adc #$00			adc 	#0
.ae21	8d 50 06	sta $0650			sta 	AppendPointer+1
.ae24	a0 00		ldy #$00			ldy 	#0
.ae26					_MDLACopy:
.ae26	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ae28	91 38		sta ($38),y			sta 	(zTemp1),y
.ae2a	c8		iny				iny
.ae2b	98		tya				tya
.ae2c	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ae2e	d0 f6		bne $ae26			bne 	_MDLACopy
.ae30	a9 00		lda #$00			lda 	#0 							; end of program.
.ae32	91 38		sta ($38),y			sta 	(zTemp1),y
.ae34	60		rts				rts
.064f					AppendPointer:
>064f							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9e66					MemoryNew:
.9e66	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e68	85 30		sta $30				sta 	codePtr
.9e6a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e6c	85 31		sta $31				sta 	codePtr+1
.9e6e	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e70	92 30		sta ($30)			sta 	(codePtr)
.9e72	60		rts				rts
.9e73					MemoryInline:
.9e73	98		tya				tya 								; put address into stack,x
.9e74	18		clc				clc
.9e75	65 30		adc $30				adc 	codePtr
.9e77	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e7a	a5 31		lda $31				lda 	codePtr+1
.9e7c	69 00		adc #$00			adc 	#0
.9e7e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e81	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e84	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9e88					MemorySearch:
.9e88	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9e8a	86 37		stx $37				stx 	zTemp0+1
.9e8c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e8e	85 30		sta $30				sta 	codePtr
.9e90	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e92	85 31		sta $31				sta 	codePtr+1
.9e94					_MTAXLoop:
.9e94	b2 30		lda ($30)			lda 	(codePtr)
.9e96	18		clc				clc
.9e97	f0 21		beq $9eba			beq 	_MTAXExit 					; reached end, exit with CC.
.9e99	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9e9b	b1 30		lda ($30),y			lda 	(codePtr),y
.9e9d	38		sec				sec
.9e9e	e5 36		sbc $36				sbc 	zTemp0
.9ea0	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9ea2	c8		iny				iny 								; do the MSB
.9ea3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ea5	e5 37		sbc $37				sbc 	zTemp0+1
.9ea7	05 38		ora $38				ora 	zTemp1
.9ea9	f0 0f		beq $9eba			beq 	_MTAXExit	 				; found
.9eab	b0 0d		bcs $9eba			bcs 	_MTAXExit 					; current < required exit
.9ead	18		clc				clc
.9eae	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9eb0	65 30		adc $30				adc 	codePtr
.9eb2	85 30		sta $30				sta 	codePtr
.9eb4	90 02		bcc $9eb8			bcc 	_CREExit
.9eb6	e6 31		inc $31				inc 	codePtr+1
.9eb8					_CREExit:
.9eb8	80 da		bra $9e94			bra 	_MTAXLoop
.9eba					_MTAXExit:
.9eba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9ebb					StackPushByte:
.9ebb	48		pha				pha 								; save byte
.9ebc	a5 34		lda $34				lda 	BasicStack
.9ebe	d0 09		bne $9ec9			bne 	_SPBNoBorrow
.9ec0	c6 35		dec $35				dec 	BasicStack+1
.9ec2	48		pha				pha
.9ec3	a5 35		lda $35				lda 	BasicStack+1
.9ec5	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9ec7	90 06		bcc $9ecf			bcc 	_SPBMemory
.9ec9					_SPBNoBorrow:
.9ec9	c6 34		dec $34				dec 	BasicStack
.9ecb	68		pla				pla 								; get back and write
.9ecc	92 34		sta ($34)			sta 	(BasicStack)
.9ece	60		rts				rts
.9ecf					_SPBMemory:
.9ecf	a9 12		lda #$12		lda	#18
.9ed1	4c 71 92	jmp $9271		jmp	ErrorHandler
.9ed4					StackPopByte:
.9ed4	b2 34		lda ($34)			lda 	(BasicStack)
.9ed6	e6 34		inc $34				inc 	BasicStack
.9ed8	d0 02		bne $9edc			bne 	_SPBNoCarry
.9eda	e6 35		inc $35				inc 	BasicStack+1
.9edc					_SPBNoCarry:
.9edc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9edd					StackOpen:
.9edd	48		pha				pha 								; save frame byte
.9ede	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9ee0	0a		asl a				asl 	a 							; claim twice this for storage
.9ee1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9ee3	38		sec				sec 								; so basically subtracting from
.9ee4	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9ee6	85 34		sta $34				sta 	basicStack
.9ee8	b0 08		bcs $9ef2			bcs 	_SONoBorrow
.9eea	c6 35		dec $35				dec 	basicStack+1
.9eec	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9eee	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9ef0	90 04		bcc $9ef6			bcc 	_SOMemory
.9ef2					_SONoBorrow:
.9ef2	68		pla				pla 								; get marker back and write at TOS
.9ef3	92 34		sta ($34)			sta 	(basicStack)
.9ef5	60		rts				rts
.9ef6					_SOMemory:
.9ef6	a9 12		lda #$12		lda	#18
.9ef8	4c 71 92	jmp $9271		jmp	ErrorHandler
.9efb					StackClose:
.9efb	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9efd	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9eff	0a		asl a				asl 	a 							; claim twice this.
.9f00	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9f02	85 34		sta $34				sta 	basicStack
.9f04	90 02		bcc $9f08			bcc 	_SCExit
.9f06	e6 35		inc $35				inc 	basicStack+1
.9f08					_SCExit:
.9f08	60		rts				rts
.9f09					StackCheckFrame:
.9f09	48		pha				pha
.9f0a					_StackRemoveLocals:
.9f0a	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9f0c	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9f0e	b0 05		bcs $9f15			bcs 	_SCNoLocal
.9f10	20 51 a5	jsr $a551			jsr 	LocalPopValue
.9f13	80 f5		bra $9f0a			bra 	_StackRemoveLocals
.9f15					_SCNoLocal:
.9f15	68		pla				pla
.9f16	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9f18	29 f0		and #$f0			and 	#$F0 						; check type bits
.9f1a	d0 01		bne $9f1d			bne 	_SCFError 					; different, we have structures mixed up
.9f1c	60		rts				rts
.9f1d					_SCFError:
.9f1d	8a		txa				txa 								; report error X
.9f1e	4c 71 92	jmp $9271			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9f21					STKSaveCodePosition:
.9f21	5a		phy				phy
.9f22	98		tya				tya 								; save Y
.9f23	a0 05		ldy #$05			ldy 	#5
.9f25	91 34		sta ($34),y			sta 	(basicStack),y
.9f27	88		dey				dey 								; save Code Pointer
.9f28					_STKSaveLoop:
.9f28	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9f2b	91 34		sta ($34),y			sta 	(basicStack),y
.9f2d	88		dey				dey
.9f2e	d0 f8		bne $9f28			bne 	_STKSaveLoop
.9f30	7a		ply				ply
.9f31	60		rts				rts
.9f32					STKLoadCodePosition:
.9f32	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9f34					_STKLoadLoop:
.9f34	b1 34		lda ($34),y			lda 	(basicStack),y
.9f36	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9f39	c8		iny				iny
.9f3a	c0 05		cpy #$05			cpy 	#5
.9f3c	d0 f6		bne $9f34			bne 	_STKLoadLoop
.9f3e	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9f40	a8		tay				tay
.9f41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9f42					StackReset:
.9f42	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9f44	85 34		sta $34				sta 	0+basicStack
.9f46	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9f48	85 35		sta $35				sta 	1+basicStack
.9f4a	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9f4c	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9f4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.ae35					StringConcrete:
.ae35	5a		phy				phy 								; save position on stack
.ae36	20 38 9b	jsr $9b38			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ae39	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ae3c	85 38		sta $38				sta 	zTemp1
.ae3e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ae41	85 39		sta $39				sta 	zTemp1+1
.ae43	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.ae45					_SALength:
.ae45	c8		iny				iny
.ae46	b1 38		lda ($38),y			lda 	(zTemp1),y
.ae48	d0 fb		bne $ae45			bne 	_SALength
.ae4a	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ae4c	b0 3f		bcs $ae8d			bcs 	_SALengthError
.ae4e	98		tya				tya 				 				; length of the new string
.ae4f	18		clc				clc
.ae50	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ae52	90 02		bcc $ae56			bcc 	_SAHaveLength
.ae54	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ae56					_SAHaveLength:
.ae56	48		pha				pha 								; save length.
.ae57	38		sec				sec
.ae58	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ae5a	6d 8e 04	adc $048e			adc 	StringMemory
.ae5d	8d 8e 04	sta $048e			sta 	StringMemory
.ae60	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ae62	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ae65	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ae67	6d 8f 04	adc $048f			adc 	StringMemory+1
.ae6a	8d 8f 04	sta $048f			sta 	StringMemory+1
.ae6d	85 3b		sta $3b				sta 	zTemp2+1
.ae6f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae72	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ae73	38		sec				sec
.ae74	e9 03		sbc #$03			sbc 	#3
.ae76	92 3a		sta ($3a)			sta 	(zTemp2)
.ae78	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ae7a	a0 01		ldy #$01			ldy 	#1
.ae7c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ae7e					_SACopyNewString:
.ae7e	a0 00		ldy #$00			ldy 	#0
.ae80					_SACopyNSLoop:
.ae80	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.ae82	c8		iny				iny 								; write two on in string storage
.ae83	c8		iny				iny
.ae84	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ae86	88		dey				dey 								; this makes it one one.
.ae87	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.ae89	d0 f5		bne $ae80			bne 	_SACopyNSLoop
.ae8b	7a		ply				ply
.ae8c	60		rts				rts
.ae8d					_SALengthError:
.ae8d	a9 09		lda #$09		lda	#9
.ae8f	4c 71 92	jmp $9271		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.ae92					StringSystemInitialise:
.ae92	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.ae94	8d 8e 04	sta $048e			sta 	0+StringMemory
.ae97	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.ae99	8d 8f 04	sta $048f			sta 	1+StringMemory
.ae9c	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.ae9f	60		rts				rts
.aea0					StringSpaceInitialise:
.aea0	20 38 9b	jsr $9b38			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.aea3	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.aea5	8d 90 04	sta $0490			sta 	StringInitialised
.aea8	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.aeab	8d 91 04	sta $0491			sta 	StringTempPointer
.aeae	ad 8f 04	lda $048f			lda 	StringMemory+1
.aeb1	3a		dec a				dec 	a
.aeb2	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aeb5	60		rts				rts
.aeb6					StringTempAllocate:
.aeb6	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.aeb8	b0 35		bcs $aeef			bcs 	_STALength
.aeba	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.aebd	30 05		bmi $aec4			bmi 	_STAAllocate
.aebf	48		pha				pha 								; save value to subtract.
.aec0	20 a0 ae	jsr $aea0			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.aec3	68		pla				pla 								; restore it
.aec4					_STAAllocate:
.aec4	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.aec6	18		clc				clc  								; deliberate allows one more
.aec7	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.aeca	8d 91 04	sta $0491			sta 	StringTempPointer
.aecd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.aed0	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.aed2	ad 92 04	lda $0492			lda 	StringTempPointer+1
.aed5	69 ff		adc #$ff			adc 	#$FF
.aed7	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aeda	85 3d		sta $3d				sta 	zsTemp+1
.aedc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aedf	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.aee2	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.aee5	a9 10		lda #$10			lda 	#NSTString
.aee7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aeea	a9 00		lda #$00			lda 	#0 							; clear the target string
.aeec	92 3c		sta ($3c)			sta 	(zsTemp)
.aeee	60		rts				rts
.aeef					_STALength:
.aeef	a9 09		lda #$09		lda	#9
.aef1	4c 71 92	jmp $9271		jmp	ErrorHandler
.aef4					StringTempWrite:
.aef4	48		pha				pha
.aef5	92 3c		sta ($3c)			sta 	(zsTemp)
.aef7	e6 3c		inc $3c				inc 	zsTemp
.aef9	d0 02		bne $aefd			bne 	_STWNoCarry
.aefb	e6 3d		inc $3d				inc 	zsTemp+1
.aefd					_STWNoCarry:
.aefd	a9 00		lda #$00			lda 	#0
.aeff	92 3c		sta ($3c)			sta 	(zsTemp)
.af01	68		pla				pla
.af02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9f4f					BackloadProgram:
.9f4f	a2 ff		ldx #$ff			ldx 	#$FF
.9f51	20 79 9f	jsr $9f79			jsr 	BLReadByte
.9f54	30 1f		bmi $9f75			bmi 	_BPExit
.9f56					_BPCopy:
.9f56	e8		inx				inx  								; copy byte in
.9f57	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9f5a	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9f5d	20 79 9f	jsr $9f79			jsr 	BLReadByte 					; read next byte
.9f60	30 0a		bmi $9f6c			bmi 	_BPEndLine 					; -ve = EOL
.9f62	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9f64	d0 02		bne $9f68			bne 	_BPNotTab
.9f66	a9 20		lda #$20			lda 	#' '
.9f68					_BPNotTab:
.9f68	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9f6a	b0 ea		bcs $9f56			bcs 	_BPCopy
.9f6c					_BPEndLine:
.9f6c	20 a2 a2	jsr $a2a2			jsr 	TokeniseLine 				; tokenise the line.
.9f6f	38		sec				sec 								; append not insert
.9f70	20 af ad	jsr $adaf			jsr 	MemoryInsertLine 			; append to current program
.9f73	80 da		bra $9f4f			bra 	BackloadProgram
.9f75					_BPExit:
.9f75	20 a2 88	jsr $88a2			jsr 	ClearCommand 				; clear variables etc.
.9f78	60		rts				rts
.9f79					BLReadByte:
.9f79					_BLLoad:
.9f79	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9f7c	ee 7a 9f	inc $9f7a			inc 	_BLLoad+1
.9f7f	d0 03		bne $9f84			bne 	_BLNoCarry
.9f81	ee 7b 9f	inc $9f7b			inc 	_BLLoad+2
.9f84					_BLNoCarry:
.9f84	c9 00		cmp #$00			cmp 	#0
.9f86	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9f87					TokeniseSearchTable:
.9f87	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9f89	85 36		sta $36				sta 	zTemp0
.9f8b	a0 00		ldy #$00			ldy 	#0
.9f8d	a9 80		lda #$80			lda 	#$80 						; token #
.9f8f	85 38		sta $38				sta 	zTemp1
.9f91					_TSTLoop:
.9f91	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9f93	30 49		bmi $9fde			bmi 	_TSTFail 					; -ve = end of table
.9f95	f0 2e		beq $9fc5			beq 	_TSTNext 					; zero, check next it's a dummy
.9f97	c8		iny				iny 								; get the hash
.9f98	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f9a	88		dey				dey
.9f9b	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9f9e	d0 25		bne $9fc5			bne 	_TSTNext
.9fa0	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9fa3	38		sec				sec
.9fa4	ed 80 04	sbc $0480			sbc 	identStart
.9fa7	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9fa9	d0 1a		bne $9fc5			bne 	_TSTNext
.9fab	5a		phy				phy 								; save Y , we might fail
.9fac	c8		iny				iny 								; point to text
.9fad	c8		iny				iny
.9fae	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9fb1					_TSTCompareName:
.9fb1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9fb4	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9fb6	d0 0c		bne $9fc4			bne 	_TSTNextPullY 				; fail, pullY and do next
.9fb8	e8		inx				inx
.9fb9	c8		iny				iny
.9fba	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9fbd	d0 f2		bne $9fb1			bne 	_TSTCompareName
.9fbf	7a		ply				ply 								; throw Y
.9fc0	a5 38		lda $38				lda 	zTemp1 						; get token #
.9fc2	38		sec				sec 								; return with CS = passed.
.9fc3	60		rts				rts
.9fc4					_TSTNextPullY:
.9fc4	7a		ply				ply 								; restore current, fall through.
.9fc5					_TSTNext:
.9fc5	e6 38		inc $38				inc 	zTemp1 						; token counter
.9fc7	98		tya				tya
.9fc8	18		clc				clc
.9fc9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9fcb	1a		inc a				inc 	a 							; +1
.9fcc	1a		inc a				inc 	a 							; +2
.9fcd	a8		tay				tay
.9fce	10 c1		bpl $9f91			bpl 	_TSTLoop 					; if Y < $80 loop back
.9fd0	98		tya				tya 								; add Y to zTemp0 and reset Y
.9fd1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9fd3	18		clc				clc  								; but have tables > 255 bytes
.9fd4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9fd6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9fd8	90 b7		bcc $9f91			bcc 	_TSTLoop
.9fda	e6 37		inc $37				inc 	zTemp0+1
.9fdc	80 b3		bra $9f91			bra 	_TSTLoop
.9fde					_TSTFail:
.9fde	18		clc				clc
.9fdf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9fe0					KeywordSet0:
>9fe0	00 65					.text	0,$65,""               ; $80 !0:EOF
>9fe2	00 58					.text	0,$58,""               ; $81 !1:SH1
>9fe4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9fe6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9fec	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9ff4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9ffa	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a001	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a008	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a00f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a015	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a01d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a025	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a02b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a032	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a038	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a040	28
>a041	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a049	28
>a04a	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a050	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a056	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a05c	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a063	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a069	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a06f	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a074	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a078	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a07e	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a086	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a08d	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a094	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a09c	43
>a09d	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a0a3	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a0a9	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a0b0	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a0b6	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a0bc	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a0c1	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a0c7	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a0cc	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a0d4	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a0da	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a0e1	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a0e7	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a0ec	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a0f3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a0fa	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a100	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a105	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a10d	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a111	ff					.text	$FF
.a112					KeywordSet1:
>a112	00 65					.text	0,$65,""               ; $80 !0:EOF
>a114	00 58					.text	0,$58,""               ; $81 !1:SH1
>a116	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a118	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a120	4c 45
>a122	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a12a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a131	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a136	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a13c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a141	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a149	45
>a14a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a14f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a155	ff					.text	$FF
.a156					KeywordSet2:
>a156	00 65					.text	0,$65,""               ; $80 !0:EOF
>a158	00 58					.text	0,$58,""               ; $81 !1:SH1
>a15a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a15c	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a161	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a166	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a16b	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a170	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a175	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a17a	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a17f	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a184	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a189	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a18e	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a193	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a198	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a19d	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a1a2	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a1a7	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a1ac	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a1b1	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a1b6	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a1bb	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a1c0	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a1c5	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a1ca	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a1cf	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a1d4	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a1d9	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a1de	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a1e3	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a1e8	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a1ed	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a1f2	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a1f7	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a1fc	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a201	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a206	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a20b	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a210	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a215	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a21a	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a21f	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a224	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a229	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a22e	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a233	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a238	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a23d	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a242	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a247	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a24c	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a251	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a256	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a25b	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a260	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a265	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a26a	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a26f	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a274	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a279	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a27e	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a283	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a288	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a28d	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a292	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a297	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a29c	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a2a1	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a2a2					TokeniseLine:
.a2a2	20 2a a4	jsr $a42a			jsr 	FixLineBufferCase 			; fix line case
.a2a5	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a2a7	8d a6 04	sta $04a6			sta 	tokenOffset
.a2aa	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a2ad	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a2b0	a2 ff		ldx #$ff			ldx 	#$FF
.a2b2					_TKFindFirst:
.a2b2	e8		inx				inx
.a2b3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a2b6	f0 79		beq $a331			beq 	_TKExit
.a2b8	c9 20		cmp #$20			cmp 	#' '
.a2ba	90 f6		bcc $a2b2			bcc 	_TKFindFirst
.a2bc	c9 30		cmp #$30			cmp 	#'0'
.a2be	90 07		bcc $a2c7			bcc 	_TKNoLineNumber
.a2c0	c9 3a		cmp #$3a			cmp 	#'9'+1
.a2c2	b0 03		bcs $a2c7			bcs 	_TKNoLineNumber
.a2c4	20 54 a4	jsr $a454			jsr 	TokeniseExtractLineNumber
.a2c7					_TKNoLineNumber:
.a2c7					_TKTokeniseLoop:
.a2c7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a2ca	f0 65		beq $a331			beq 	_TKExit
.a2cc	e8		inx				inx
.a2cd	c9 20		cmp #$20			cmp 	#' '
.a2cf	f0 f6		beq $a2c7			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a2d1	ca		dex				dex 								; undo last get, A contains character, X is position.
.a2d2	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a2d4	f0 61		beq $a337			beq 	_TKTokeniseIdentifier
.a2d6	c9 41		cmp #$41			cmp 	#'A'
.a2d8	90 04		bcc $a2de			bcc 	_TKTokenisePunctuation
.a2da	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a2dc	90 59		bcc $a337			bcc 	_TKTokeniseIdentifier
.a2de					_TKTokenisePunctuation:
.a2de	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a2e0	f0 27		beq $a309			beq 	_TKString
.a2e2	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a2e4	f0 28		beq $a30e			beq 	_TKHexConstant
.a2e6	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a2e8	f0 29		beq $a313			beq 	_TKCheckDouble
.a2ea	c9 3e		cmp #$3e			cmp 	#'>'
.a2ec	f0 25		beq $a313			beq 	_TKCheckDouble
.a2ee					_TKStandardPunctuation:
.a2ee	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a2f1	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a2f3	90 0e		bcc $a303			bcc 	_TKNoShift
.a2f5	48		pha				pha 								; save
.a2f6	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a2f8	85 36		sta $36				sta 	zTemp0
.a2fa	68		pla				pla
.a2fb	29 20		and #$20			and 	#32 						; bit 5
.a2fd	4a		lsr a				lsr 	a 							; shift into bit 3
.a2fe	4a		lsr a				lsr 	a
.a2ff	05 36		ora $36				ora 	zTemp0
.a301	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a303					_TKNoShift:
.a303	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte 			; write the punctuation character
.a306	e8		inx				inx 								; consume the character
.a307	80 be		bra $a2c7			bra 	_TKTokeniseLoop 			; and loop round again.
.a309					_TKString:
.a309	20 b9 a3	jsr $a3b9			jsr 	TokeniseString
.a30c	80 b9		bra $a2c7			bra 	_TKTokeniseLoop
.a30e					_TKHexConstant:
.a30e	20 f4 a3	jsr $a3f4			jsr 	TokeniseHexConstant
.a311	80 b4		bra $a2c7			bra 	_TKTokeniseLoop
.a313					_TKCheckDouble:
.a313	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a316	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a318	90 d4		bcc $a2ee			bcc 	_TKStandardPunctuation
.a31a	c9 3f		cmp #$3f			cmp 	#'>'+1
.a31c	b0 d0		bcs $a2ee			bcs 	_TKStandardPunctuation
.a31e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a321	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a323	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a324	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a327	38		sec				sec
.a328	e9 3c		sbc #$3c			sbc 	#'<'
.a32a	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a32d	e8		inx				inx 								; consume both
.a32e	e8		inx				inx
.a32f	80 96		bra $a2c7			bra 	_TKTokeniseLoop
.a331	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a333	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a336	60		rts				rts
.a337					_TKTokeniseIdentifier:
.a337	8e 80 04	stx $0480			stx 	identStart 					; save start
.a33a	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a33d					_TKCheckLoop:
.a33d	e8		inx				inx 								; look at next, we know first is identifier.
.a33e	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a341	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a343	f0 f8		beq $a33d			beq 	_TKCheckLoop
.a345	c9 30		cmp #$30			cmp	 	#"0"
.a347	90 0c		bcc $a355			bcc 	_TKEndIdentifier
.a349	c9 3a		cmp #$3a			cmp 	#"9"+1
.a34b	90 f0		bcc $a33d			bcc 	_TKCheckLoop
.a34d	c9 41		cmp #$41			cmp	 	#"A"
.a34f	90 04		bcc $a355			bcc 	_TKEndIdentifier
.a351	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a353	90 e8		bcc $a33d			bcc 	_TKCheckLoop
.a355					_TKEndIdentifier:
.a355	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a358	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a35a	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a35c	f0 06		beq $a364			beq 	_TKHasTypeCharacter
.a35e	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a360	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a362	d0 07		bne $a36b			bne 	_TKNoTypeCharacter
.a364					_TKHasTypeCharacter:
.a364	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a367	e8		inx				inx 								; read next
.a368	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a36b					_TKNoTypeCharacter:
.a36b	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a36d	d0 09		bne $a378			bne 	_TKNoArray
.a36f	e8		inx				inx 								; skip the (
.a370	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a373	09 04		ora #$04			ora 	#$04
.a375	8d 84 04	sta $0484			sta 	identTypeByte
.a378					_TKNoArray:
.a378	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a37b	20 15 a4	jsr $a415			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a37e	a0 9f		ldy #$9f			ldy 	#(KeywordSet0) >> 8
.a380	a9 e0		lda #$e0			lda 	#(KeywordSet0) & $FF
.a382	20 87 9f	jsr $9f87			jsr 	TokeniseSearchTable
.a385	a2 00		ldx #$00			ldx 	#0
.a387	b0 1f		bcs $a3a8			bcs 	_TKFoundToken
.a389	a0 a1		ldy #$a1			ldy 	#(KeywordSet1) >> 8
.a38b	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.a38d	20 87 9f	jsr $9f87			jsr 	TokeniseSearchTable
.a390	a2 81		ldx #$81			ldx 	#$81
.a392	b0 14		bcs $a3a8			bcs 	_TKFoundToken
.a394	a0 a1		ldy #$a1			ldy 	#(KeywordSet2) >> 8
.a396	a9 56		lda #$56			lda 	#(KeywordSet2) & $FF
.a398	20 87 9f	jsr $9f87			jsr 	TokeniseSearchTable
.a39b	a2 82		ldx #$82			ldx 	#$82
.a39d	b0 09		bcs $a3a8			bcs 	_TKFoundToken
.a39f	20 a5 a4	jsr $a4a5			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a3a2	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a3a5	4c c7 a2	jmp $a2c7			jmp 	_TKTokeniseLoop 			; and go round again.
.a3a8					_TKFoundToken:
.a3a8	48		pha				pha 								; save token
.a3a9	8a		txa				txa 								; shift in X, is there one ?
.a3aa	f0 03		beq $a3af			beq 	_TKNoTShift
.a3ac	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte 			; if so, write it out
.a3af					_TKNoTShift:
.a3af	68		pla				pla 								; restore and write token
.a3b0	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a3b3	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a3b6	4c c7 a2	jmp $a2c7			jmp 	_TKTokeniseLoop 			; and go round again.
.a3b9					TokeniseString:
.a3b9	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a3bb	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a3be	e8		inx				inx									; start of quoted string.
.a3bf	da		phx				phx 								; push start of string on top
.a3c0	ca		dex				dex
.a3c1					_TSFindEnd:
.a3c1	e8		inx				inx
.a3c2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a3c5	f0 04		beq $a3cb			beq 	_TSEndOfString
.a3c7	c9 22		cmp #$22			cmp 	#'"'
.a3c9	d0 f6		bne $a3c1			bne 	_TSFindEnd
.a3cb					_TSEndOfString:
.a3cb	7a		ply				ply  								; so now Y is first character, X is character after end.
.a3cc	48		pha				pha 								; save terminating character
.a3cd	20 d5 a3	jsr $a3d5			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a3d0	68		pla				pla 								; terminating character
.a3d1	f0 01		beq $a3d4			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a3d3	e8		inx				inx
.a3d4					_TSNotQuote:
.a3d4	60		rts				rts
.a3d5					TOWriteBlockXY:
.a3d5	86 36		stx $36				stx 	zTemp0 						; write end character
.a3d7	98		tya				tya
.a3d8	49 ff		eor #$ff			eor 	#$FF
.a3da	38		sec				sec
.a3db	65 36		adc $36				adc 	zTemp0
.a3dd	1a		inc a				inc 	a 							; one extra for NULL
.a3de	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a3e1					_TOBlockLoop:
.a3e1	c4 36		cpy $36				cpy 	zTemp0
.a3e3	f0 09		beq $a3ee			beq 	_TOBlockExit
.a3e5	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a3e8	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a3eb	c8		iny				iny
.a3ec	80 f3		bra $a3e1			bra 	_TOBlockLoop
.a3ee					_TOBlockExit:
.a3ee	a9 00		lda #$00			lda 	#0
.a3f0	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a3f3	60		rts				rts
.a3f4					TokeniseHexConstant:
.a3f4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a3f6	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a3f9	e8		inx				inx									; start of quoted string.
.a3fa	da		phx				phx 								; push start of constant on top
.a3fb	ca		dex				dex
.a3fc					_THFindLoop:
.a3fc	e8		inx				inx
.a3fd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a400	c9 30		cmp #$30			cmp 	#"0"
.a402	90 0c		bcc $a410			bcc 	_THFoundEnd
.a404	c9 3a		cmp #$3a			cmp 	#"9"+1
.a406	90 f4		bcc $a3fc			bcc 	_THFindLoop
.a408	c9 41		cmp #$41			cmp 	#"A"
.a40a	90 04		bcc $a410			bcc 	_THFoundEnd
.a40c	c9 47		cmp #$47			cmp 	#"F"+1
.a40e	90 ec		bcc $a3fc			bcc 	_THFindLoop
.a410					_THFoundEnd:
.a410	7a		ply				ply 								; restore start
.a411	20 d5 a3	jsr $a3d5			jsr 	TOWriteBlockXY 				; output the block
.a414	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a415					TokeniseCalculateHash:
.a415	da		phx				phx
.a416	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a419	a9 00		lda #$00			lda 	#0
.a41b					_TCHLoop:
.a41b	18		clc				clc
.a41c	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a41f	e8		inx				inx
.a420	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a423	d0 f6		bne $a41b			bne 	_TCHLoop
.a425	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a428	fa		plx				plx
.a429	60		rts				rts
.a42a					FixLineBufferCase:
.a42a	a2 00		ldx #$00			ldx 	#0
.a42c					_FLBCLoop:
.a42c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a42f	f0 22		beq $a453			beq 	_FLBCExit 					; end of string.
.a431	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a433	f0 11		beq $a446			beq 	_FLBCInQuotes
.a435	e8		inx				inx
.a436	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a438	90 f2		bcc $a42c			bcc 	_FLBCLoop
.a43a	c9 7b		cmp #$7b			cmp 	#'z'+1
.a43c	b0 ee		bcs $a42c			bcs 	_FLBCLoop
.a43e	38		sec				sec 								; make U/C
.a43f	e9 20		sbc #$20			sbc 	#32
.a441	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a444	80 e6		bra $a42c			bra 	_FLBCLoop
.a446					_FLBCInQuotes:
.a446	e8		inx				inx 								; advance
.a447	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a44a	f0 07		beq $a453			beq 	_FLBCExit 					; exit on EOS
.a44c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a44e	d0 f6		bne $a446			bne 	_FLBCInQuotes
.a450	e8		inx				inx 								; skip over it
.a451	80 d9		bra $a42c			bra 	_FLBCLoop
.a453					_FLBCExit:
.a453	60		rts				rts
.a454					TokeniseExtractLineNumber:
.a454	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a457	48		pha				pha
.a458	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a45b	48		pha				pha
.a45c	20 92 a4	jsr $a492			jsr 	_TELNTimes2 				; line # x 4
.a45f	20 92 a4	jsr $a492			jsr 	_TELNTimes2 				; line # x 2
.a462	18		clc				clc 								; add stacked value
.a463	68		pla				pla
.a464	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a467	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a46a	68		pla				pla
.a46b	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a46e	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a471	20 92 a4	jsr $a492			jsr 	_TELNTimes2 				; line # x 10
.a474	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a477	e8		inx				inx
.a478	29 0f		and #$0f			and 	#15 						; add to line #
.a47a	18		clc				clc
.a47b	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a47e	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a481	90 03		bcc $a486			bcc 	_TLENNoCarry
.a483	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a486					_TLENNoCarry:
.a486	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a489	c9 30		cmp #$30			cmp 	#'0'
.a48b	90 04		bcc $a491			bcc 	_TLENExit
.a48d	c9 3a		cmp #$3a			cmp 	#'9'+1
.a48f	90 c3		bcc $a454			bcc 	TokeniseExtractLineNumber
.a491					_TLENExit:
.a491	60		rts				rts
.a492					_TELNTimes2:
.a492	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a495	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a498	60		rts				rts
.a499					TokeniseWriteByte:
.a499	da		phx				phx
.a49a	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a49d	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a4a0	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a4a3	fa		plx				plx
.a4a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a4a5					CheckCreateVariableRecord:
.a4a5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a4a7	85 36		sta $36				sta 	0+zTemp0
.a4a9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a4ab	85 37		sta $37				sta 	1+zTemp0
.a4ad					_CCVSearch:
.a4ad	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a4af	f0 2c		beq $a4dd			beq 	_CCVFail
.a4b1	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a4b3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a4b5	cd 83 04	cmp $0483			cmp 	identHash
.a4b8	d0 16		bne $a4d0			bne 	_CCVNext
.a4ba	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a4bc	ae 80 04	ldx $0480			ldx 	identStart
.a4bf					_CCVCompare:
.a4bf	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a4c2	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a4c4	e8		inx				inx 								; advance pointers
.a4c5	c8		iny				iny
.a4c6	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a4c7	d0 07		bne $a4d0			bne 	_CCVNext  					; didn't match go to next.
.a4c9	90 f4		bcc $a4bf			bcc 	_CCVCompare 				; not finished yet.
.a4cb	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a4ce	f0 41		beq $a511			beq 	_CCVFound 					; yes, we were successful
.a4d0					_CCVNext:
.a4d0	18		clc				clc
.a4d1	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a4d3	65 36		adc $36				adc 	zTemp0
.a4d5	85 36		sta $36				sta 	zTemp0
.a4d7	90 d4		bcc $a4ad			bcc 	_CCVSearch
.a4d9	e6 37		inc $37				inc 	zTemp0+1
.a4db	80 d0		bra $a4ad			bra 	_CCVSearch
.a4dd					_CCVFail:
.a4dd	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a4df	ad 83 04	lda $0483			lda 	identHash
.a4e2	91 36		sta ($36),y			sta 	(zTemp0),y
.a4e4	c8		iny				iny 								; offset 2 is the type byte
.a4e5	ad 84 04	lda $0484			lda 	identTypeByte
.a4e8	91 36		sta ($36),y			sta 	(zTemp0),y
.a4ea	c8		iny				iny
.a4eb					_CCVData:
.a4eb	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a4ed	91 36		sta ($36),y			sta 	(zTemp0),y
.a4ef	c8		iny				iny
.a4f0	c0 08		cpy #$08			cpy 	#8
.a4f2	90 f7		bcc $a4eb			bcc 	_CCVData
.a4f4	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a4f7					_CCVCopyName:
.a4f7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a4fa	91 36		sta ($36),y			sta 	(zTemp0),y
.a4fc	e8		inx				inx
.a4fd	c8		iny				iny
.a4fe	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a501	d0 f4		bne $a4f7			bne 	_CCVCopyName
.a503	98		tya				tya 								; patch offset
.a504	92 36		sta ($36)			sta 	(zTemp0)
.a506	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a508	91 36		sta ($36),y			sta 	(zTemp0),y
.a50a	88		dey				dey
.a50b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a50d	09 80		ora #$80			ora 	#$80
.a50f	91 36		sta ($36),y			sta 	(zTemp0),y
.a511					_CCVFound:
.a511	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a513	38		sec				sec
.a514	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a516	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a518	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a51b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a51d	20 99 a4	jsr $a499			jsr 	TokeniseWriteByte
.a520	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
