
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct  6 18:49:35 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					lastParameter:
>0716							.fill 	1
.0717					dataPointer:
>0717							.fill 	5
.071c					inDataStatement:
>071c							.fill 	1
.071d					tbOffset:
>071d							.fill 	1
.071e					AssemblerAddress:
>071e							.fill 	2
.0720					AssemblerControl:
>0720							.fill 	1
.0721					ParamStart:
>0721							.fill 	2
.0723					IsGroup1:
>0723							.fill 	1
.0724					BaseOpcode:
>0724							.fill 	1
.0725					ModeMask:
>0725							.fill 	1
.0726					tokenOffset:
>0726							.fill 	1
.0727					tokenLineNumber:
>0727							.fill 	2
.0729					tokenBuffer:
>0729							.fill 	253
.0826					lineBuffer:
>0826							.fill 	MaxLineSize+1
.0877					numberBuffer:
>0877							.fill 	34
.0899					decimalBuffer:
>0899							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 16		lda #$16			lda 	#(Prompt & $FF)
.8007	20 e2 8d	jsr $8de2			jsr 	PrintStringXA
.800a	4c 80 80	jmp $8080			jmp 	RunDemos
.800d	20 c5 87	jsr $87c5			jsr 	NewCommand 					; erase current program
.8010	20 67 9a	jsr $9a67			jsr 	BackloadProgram
.8013	4c 21 83	jmp $8321			jmp 	WarmStart
>8016	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801e	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802e	41 53 49 43 20 2a 2a 2a 0d 0d
>8038	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8040	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8050	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8056	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 305."
>805e	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>806e	32 32 2e 20 42 75 69 6c 64 20 33 30 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>807c	0d 0d 00					.byte 	13,13,0
>807f							.align 2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/ab.graphics/data.asm

=5					GXMappingPage = 5
=$a000					GXMappingAddress = $A000
=0					GFXMappingLUT = 0
.08a9					gxCurrentX:
>08a9							.fill 	2
.08ab					gxCurrentY:
>08ab							.fill 	2
.08ad					gxLastX:
>08ad							.fill 	2
.08af					gxLastY:
>08af							.fill 	2
.08b1					gxX1:
>08b1							.fill 	2
.08b3					gxY1:
>08b3							.fill 	2
.08b5					gxX2:
>08b5							.fill 	2
.08b7					gxY2:
>08b7							.fill 	2
.08b9					gxBasePage:
>08b9							.fill 	1
.08ba					gxHeight:
>08ba							.fill 	1
.08bb					gxForeground:
>08bb							.fill 	1
.08bc					gxBackground:
>08bc							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/ab.graphics/graphics.asm

.8080					RunDemos:
.8080	64 01		stz $01				stz 	1
.8082	a9 0f		lda #$0f			lda 	#$0F
.8084	8d 00 d0	sta $d000			sta 	$D000
.8087	a9 01		lda #$01			lda 	#1
.8089	8d 00 d1	sta $d100			sta 	$D100
.808c	9c 01 d1	stz $d101			stz 	$D101
.808f	9c 02 d1	stz $d102			stz 	$D102
.8092	a9 02		lda #$02			lda 	#2
.8094	8d 03 d1	sta $d103			sta 	$D103
.8097	8d b9 08	sta $08b9			sta 	gxBasePage
.809a	a9 f0		lda #$f0			lda 	#240
.809c	8d ba 08	sta $08ba			sta 	gxHeight
.809f	a9 fc		lda #$fc			lda 	#$FC
.80a1	8d bb 08	sta $08bb			sta 	gxForeground
.80a4	a9 01		lda #$01			lda 	#1
.80a6	8d bc 08	sta $08bc			sta 	gxBackground
.80a9	a9 05		lda #$05			lda 	#5
.80ab	85 05		sta $05				sta 	gxMappingPage
.80ad	a9 a0		lda #$a0			lda 	#$A0
.80af	8d 00 a0	sta $a000			sta 	gxMappingAddress
.80b2	80 fe		bra $80b2	h1:		bra 	h1

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80b4					AssembleGroup1:
.80b4	a9 ff		lda #$ff			lda 	#$FF
.80b6	8d 25 07	sta $0725			sta 	ModeMask 					; initialise the mode mask - all for all
.80b9	80 02		bra $80bd			bra 	AsmGroup12
.80bb					AssembleGroup2:
.80bb	a5 00		lda $00				lda 	$00
.80bd					AsmGroup12:
.80bd	8d 23 07	sta $0723			sta 	IsGroup1 					; save the 'group 1' flag
.80c0	68		pla				pla 								; pop the return address to access the information following.
.80c1	fa		plx				plx
.80c2	20 4b 81	jsr $814b			jsr 	AccessParameters 			; get opcode and save as base
.80c5	8d 24 07	sta $0724			sta 	BaseOpcode
.80c8	ad 23 07	lda $0723			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80cb	d0 08		bne $80d5			bne 	_AG12HaveMask
.80cd	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80cf	20 53 81	jsr $8153			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80d2	8d 25 07	sta $0725			sta 	ModeMask
.80d5					_AG12HaveMask:
.80d5	20 8e 82	jsr $828e			jsr 	TypeAndCalculateOperand 	; get zero page type
.80d8	da		phx				phx 								; save found address mode
.80d9	20 b7 81	jsr $81b7			jsr 	AssembleModeX
.80dc	fa		plx				plx  								; restore address mode
.80dd	b0 0b		bcs $80ea			bcs 	_AG12Exit
.80df	20 eb 80	jsr $80eb			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80e2	20 b7 81	jsr $81b7			jsr 	AssembleModeX
.80e5	b0 03		bcs $80ea			bcs 	_AG12Exit
.80e7	4c a8 a6	jmp $a6a8			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ea					_AG12Exit:
.80ea	60		rts				rts
.80eb					PromoteToAbsolute:
.80eb	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80ed	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80ef	f0 19		beq $810a			beq 	_PTADo
.80f1	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80f3	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80f5	f0 13		beq $810a			beq 	_PTADo
.80f7	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80f9	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80fb	f0 0d		beq $810a			beq 	_PTADo
.80fd	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80ff	e0 d1		cpx #$d1			cpx 	#AM_IND
.8101	f0 07		beq $810a			beq 	_PTADo
.8103	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8105	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8107	f0 01		beq $810a			beq 	_PTADo
.8109	60		rts				rts
.810a					_PTADo:
.810a	aa		tax				tax
.810b	60		rts				rts
.810c					AssembleGroup3:
.810c	68		pla				pla 								; get parameters, which is just the opcode.
.810d	fa		plx				plx
.810e	20 4b 81	jsr $814b			jsr 	AccessParameters 			; get and output opcode
.8111	20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.8114	20 f2 82	jsr $82f2			jsr 	CalculateOperand 			; get a 16 bit operand
.8117	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.811a	38		sec				sec
.811b	ed 1e 07	sbc $071e			sbc 	AssemblerAddress
.811e	48		pha				pha 								; LSB in A
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	ed 1f 07	sbc $071f			sbc 	AssemblerAddress+1
.8125	aa		tax				tax 								; MSB in X
.8126	68		pla				pla
.8127	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8128	69 7f		adc #$7f			adc 	#$7F
.812a	90 01		bcc $812d			bcc 	_AG3NoCarry
.812c	e8		inx				inx
.812d					_AG3NoCarry:
.812d	38		sec				sec 								; fix back and write out anyways.
.812e	e9 80		sbc #$80			sbc 	#$80
.8130	20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.8133	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8135	f0 0a		beq $8141			beq 	_AG3Exit
.8137	ad 20 07	lda $0720			lda 	AssemblerControl 			; are we allowing bad values ?
.813a	29 01		and #$01			and 	#1
.813c	f0 03		beq $8141			beq 	_AG3Exit
.813e	4c ad a6	jmp $a6ad			jmp 	RangeError 					; no, branch is out of range
.8141					_AG3Exit:
.8141	60		rts				rts
.8142					AssembleGroup4:
.8142	68		pla				pla 								; pop address
.8143	fa		plx				plx
.8144	20 4b 81	jsr $814b			jsr 	AccessParameters 			; access and get first
.8147	20 63 81	jsr $8163			jsr 	AssemblerWriteByte 			; output it.
.814a	60		rts				rts
.814b					AccessParameters:
.814b	8d 21 07	sta $0721			sta 	ParamStart
.814e	8e 22 07	stx $0722			stx 	ParamStart+1
.8151	a9 01		lda #$01			lda 	#1
.8153					GetParameter:
.8153	5a		phy				phy
.8154	a8		tay				tay
.8155	ad 21 07	lda $0721			lda 	ParamStart
.8158	85 36		sta $36				sta 	zTemp0
.815a	ad 22 07	lda $0722			lda 	ParamStart+1
.815d	85 37		sta $37				sta 	zTemp0+1
.815f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8161	7a		ply				ply
.8162	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8163					AssemblerWriteByte:
.8163	48		pha			pha
.8164	ad 20 07	lda $0720		lda 	AssemblerControl 				; check printing bytes ?
.8167	29 02		and #$02		and 	#2
.8169	f0 1b		beq $8186		beq 	_AWBNoPrint
.816b	ad 1f 07	lda $071f		lda		AssemblerAddress+1 				; print address
.816e	20 a1 81	jsr $81a1		jsr 	PrintHex
.8171	ad 1e 07	lda $071e		lda		AssemblerAddress
.8174	20 a1 81	jsr $81a1		jsr 	PrintHex
.8177	a9 20		lda #$20		lda 	#' '
.8179	20 4d a8	jsr $a84d		jsr 	EXTPrintCharacter
.817c	68		pla			pla 									; print byte
.817d	48		pha			pha
.817e	20 a1 81	jsr $81a1		jsr 	PrintHex
.8181	a9 0d		lda #$0d		lda 	#13
.8183	20 4d a8	jsr $a84d		jsr 	EXTPrintCharacter
.8186					_AWBNoPrint:
.8186	ad 1e 07	lda $071e		lda		AssemblerAddress				; copy address to zTemp0
.8189	85 36		sta $36			sta 	zTemp0
.818b	ad 1f 07	lda $071f		lda		AssemblerAddress+1
.818e	f0 0e		beq $819e		beq 	_AWBRange
.8190	85 37		sta $37			sta 	zTemp0+1
.8192	68		pla			pla 									; write byte out
.8193	92 36		sta ($36)		sta 	(zTemp0)
.8195	ee 1e 07	inc $071e		inc 	AssemblerAddress 				; bump address
.8198	d0 03		bne $819d		bne 	_AWBNoCarry
.819a	ee 1f 07	inc $071f		inc 	AssemblerAddress+1
.819d					_AWBNoCarry:
.819d	60		rts			rts
.819e					_AWBRange:
.819e	4c ad a6	jmp $a6ad		jmp 	RangeError
.81a1					PrintHex:
.81a1	48		pha				pha
.81a2	4a		lsr a				lsr 	a
.81a3	4a		lsr a				lsr 	a
.81a4	4a		lsr a				lsr 	a
.81a5	4a		lsr a				lsr 	a
.81a6	20 aa 81	jsr $81aa			jsr 	_PrintNibble
.81a9	68		pla				pla
.81aa					_PrintNibble:
.81aa	29 0f		and #$0f			and 	#15
.81ac	c9 0a		cmp #$0a			cmp 	#10
.81ae	90 02		bcc $81b2			bcc 	_NoShift
.81b0	69 06		adc #$06			adc 	#6
.81b2					_NoShift:
.81b2	69 30		adc #$30			adc 	#48
.81b4	4c 4d a8	jmp $a84d			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81b7					AssembleModeX:
.81b7	5a		phy				phy
.81b8	ad 23 07	lda $0723			lda 	IsGroup1
.81bb	f0 17		beq $81d4			beq 	_AMXGroup2
.81bd	8a		txa				txa 							; is it in group # 1
.81be	29 40		and #$40			and 	#AM_ISG1
.81c0	f0 50		beq $8212			beq 	_AMXFail 				; no, give up.
.81c2	8a		txa				txa 							; get back.
.81c3	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81c5	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81c7	d0 22		bne $81eb			bne 	_AMXHaveInfo
.81c9	ad 24 07	lda $0724			lda 	BaseOpcode 				; cannot store immediate.
.81cc	c9 81		cmp #$81			cmp 	#$81
.81ce	f0 42		beq $8212			beq 	_AMXFail
.81d0	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81d2	80 17		bra $81eb			bra 	_AMXHaveInfo 			; odd design decision there.
.81d4					_AMXGroup2:
.81d4	8a		txa				txa 							; is it in group 2 ?
.81d5	29 20		and #$20			and 	#AM_ISG2
.81d7	f0 39		beq $8212			beq 	_AMXFail 				; no, give up.
.81d9	8a		txa				txa 							; get the offset into Y
.81da	29 1f		and #$1f			and 	#$1F
.81dc	4a		lsr a				lsr 	a 						; make it 0-7.
.81dd	4a		lsr a				lsr  	a
.81de	a8		tay				tay
.81df	ad 25 07	lda $0725			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81e2					_AMXCheckOkay:
.81e2	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81e3	88		dey				dey
.81e4	10 fc		bpl $81e2			bpl 	_AMXCheckOkay
.81e6	90 2a		bcc $8212			bcc 	_AMXFail 				; not allowed.
.81e8	8a		txa				txa  							; get mask back
.81e9	29 1f		and #$1f			and 	#$1F
.81eb					_AMXHaveInfo:
.81eb	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81ed	10 05		bpl $81f4			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81ef	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81f2	d0 1e		bne $8212			bne 	_AMXFail
.81f4					_AMXAnySize:
.81f4	18		clc				clc 							; add offset to the base opcode
.81f5	6d 24 07	adc $0724			adc 	BaseOpcode
.81f8					_AMXOutputCode:
.81f8	20 63 81	jsr $8163			jsr 	AssemblerWriteByte 		; write the opcode out.
.81fb	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81fd	f0 10		beq $820f			beq 	_AMXExit
.81ff	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.8202	20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.8205	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8207	30 06		bmi $820f			bmi 	_AMXExit
.8209	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.820c	20 63 81	jsr $8163			jsr 	AssemblerWriteByte
.820f					_AMXExit:
.820f	7a		ply				ply
.8210	38		sec				sec
.8211	60		rts				rts
.8212					_AMXFail:
.8212	a0 00		ldy #$00			ldy 	#0
.8214					_AMXCheckOddities:
.8214	8a		txa				txa
.8215	d9 3d 82	cmp $823d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8218	d0 16		bne $8230			bne 	_AMXCONext
.821a	b9 3b 82	lda $823b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.821d	cd 24 07	cmp $0724			cmp 	BaseOpcode
.8220	d0 0e		bne $8230			bne 	_AMXCONext
.8222	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8224	10 05		bpl $822b			bpl 	_AMXCONotZero
.8226	ad 10 06	lda $0610			lda 	NSMantissa1
.8229	d0 05		bne $8230			bne 	_AMXCONext
.822b					_AMXCONotZero:
.822b	b9 3c 82	lda $823c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.822e	80 c8		bra $81f8			bra 	_AMXOutputCode 			; and assemble it
.8230					_AMXCONext:
.8230	c8		iny				iny
.8231	c8		iny				iny
.8232	c8		iny				iny
.8233	b9 3b 82	lda $823b,y			lda 	ExtraOpcode+0,y 		; end of table
.8236	d0 dc		bne $8214			bne 	_AMXCheckOddities
.8238					_AMXCOFail:
.8238	7a		ply				ply
.8239	18		clc				clc
.823a	60		rts				rts
.823b					ExtraOpcode:
>823b	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>823e	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8241	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8244	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8247	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>824a	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>824d	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8250	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8253	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8256	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8259	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.825a					LabelHere:
.825a	c8		iny				iny 								; skip .
.825b	a2 00		ldx #$00			ldx 	#0 							; get a term
.825d	20 63 94	jsr $9463			jsr 	EvaluateTerm 				; get a term
.8260	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.8263	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8265	d0 24		bne $828b			bne 	_ALType
.8267	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.826a	85 36		sta $36				sta 	zTemp0
.826c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.826f	85 37		sta $37				sta 	zTemp0+1
.8271	5a		phy				phy 								; copy address in.
.8272	a0 01		ldy #$01			ldy 	#1
.8274	ad 1e 07	lda $071e			lda	 	AssemblerAddress
.8277	92 36		sta ($36)			sta 	(zTemp0)
.8279	ad 1f 07	lda $071f			lda	 	AssemblerAddress+1
.827c	91 36		sta ($36),y			sta 	(zTemp0),y
.827e	c8		iny				iny
.827f	a9 00		lda #$00			lda 	#0
.8281	91 36		sta ($36),y			sta 	(zTemp0),y
.8283	c8		iny				iny
.8284	91 36		sta ($36),y			sta 	(zTemp0),y
.8286	c8		iny				iny
.8287	91 36		sta ($36),y			sta 	(zTemp0),y
.8289	7a		ply				ply
.828a	60		rts				rts
.828b					_ALType:
.828b	4c b2 a6	jmp $a6b2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.828e					TypeAndCalculateOperand:
.828e	b1 30		lda ($30),y			lda 	(codePtr),y
.8290	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8292	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8294	f0 5b		beq $82f1			beq 	_TACOExit
.8296	c9 80		cmp #$80			cmp 	#KWC_EOL
.8298	f0 57		beq $82f1			beq 	_TACOExit
.829a	c8		iny				iny
.829b	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.829d	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.829f	f0 51		beq $82f2			beq 	CalculateOperand
.82a1	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82a3	f0 1f		beq $82c4			beq 	_TACOIndirect
.82a5	88		dey				dey 								; undo get of first character
.82a6	20 f2 82	jsr $82f2			jsr 	CalculateOperand 			; get operand
.82a9	b1 30		lda ($30),y			lda 	(codePtr),y
.82ab	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82ad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82af	d0 40		bne $82f1			bne 	_TACOExit
.82b1	c8		iny				iny
.82b2	20 39 a0	jsr $a039			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82b5	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82b7	c9 58		cmp #$58			cmp 	#'X'
.82b9	f0 36		beq $82f1			beq 	_TACOExit
.82bb	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82bd	c9 59		cmp #$59			cmp 	#'Y'
.82bf	f0 30		beq $82f1			beq 	_TACOExit
.82c1					_TACOSyntax:
.82c1	4c a8 a6	jmp $a6a8			jmp 	SyntaxError
.82c4					_TACOIndirect:
.82c4	20 f2 82	jsr $82f2			jsr 	CalculateOperand 			; get the operand
.82c7	b1 30		lda ($30),y			lda 	(codePtr),y
.82c9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82cb	f0 17		beq $82e4			beq 	_TACOIndX
.82cd	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82d0	b1 30		lda ($30),y			lda 	(codePtr),y
.82d2	a2 d1		ldx #$d1			ldx 	#AM_IND
.82d4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82d6	d0 19		bne $82f1			bne 	_TACOExit
.82d8	c8		iny				iny
.82d9	20 39 a0	jsr $a039			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82dc	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82de	d0 e1		bne $82c1			bne 	_TACOSyntax
.82e0	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82e2	80 0d		bra $82f1			bra 	_TACOExit
.82e4					_TACOIndX:
.82e4	c8		iny				iny
.82e5	20 39 a0	jsr $a039			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82e8	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82ea	d0 d5		bne $82c1			bne 	_TACOSyntax
.82ec	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket			; check )
.82ef	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82f1					_TACOExit:
.82f1	60		rts				rts
.82f2					CalculateOperand:
.82f2	48		pha				pha
.82f3	da		phx				phx
.82f4	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82f6	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger
.82f9	fa		plx				plx
.82fa	68		pla				pla
.82fb	60		rts				rts
.a039					TACOCheckXY:
.a039	b1 30		lda ($30),y			lda 	(codePtr),y
.a03b	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a03d	c9 40		cmp #$40			cmp 	#$40
.a03f	d0 21		bne $a062			bne 	_TCXYFail
.a041	b1 30		lda ($30),y			lda 	(codePtr),y
.a043	18		clc				clc
.a044	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a046	85 37		sta $37				sta 	zTemp0+1
.a048	c8		iny				iny
.a049	b1 30		lda ($30),y			lda 	(codePtr),y
.a04b	c8		iny				iny
.a04c	85 36		sta $36				sta 	zTemp0
.a04e	5a		phy				phy 								; save position
.a04f	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a051	b1 36		lda ($36),y			lda 	(zTemp0),y
.a053	d0 0c		bne $a061			bne 	_TCXYPopFail
.a055	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a057	b1 36		lda ($36),y			lda 	(zTemp0),y
.a059	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a05b	f0 08		beq $a065			beq 	_TCXYFound
.a05d	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a05f	f0 04		beq $a065			beq 	_TCXYFound
.a061					_TCXYPopFail:
.a061	7a		ply				ply
.a062					_TCXYFail:
.a062	a9 00		lda #$00			lda 	#0
.a064	60		rts				rts
.a065					_TCXYFound:
.a065	7a		ply				ply 								; restore position
.a066	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a068	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.82fc					EditProgramCode:
.82fc	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line.
.82ff	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1
.8302	20 a0 99	jsr $99a0			jsr 	MemorySearch
.8305	90 05		bcc $830c			bcc 	_EPCNoDelete 				; reached the end don't delete
.8307	d0 03		bne $830c			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8309	20 91 a8	jsr $a891			jsr 	MemoryDeleteLine 			; delete the line
.830c					_EPCNoDelete:
.830c	ad 29 07	lda $0729			lda 	TokenBuffer 				; buffer empty
.830f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8311	f0 0d		beq $8320			beq 	_EPCNoInsert
.8313	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8316	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8319	20 a0 99	jsr $99a0			jsr 	MemorySearch
.831c	18		clc				clc 								; insert at this point.
.831d	20 c8 a8	jsr $a8c8			jsr 	MemoryInsertLine 			; insert the line
.8320					_EPCNoInsert:
.8320	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8321					WarmStart:
.8321	a2 ff		ldx #$ff			ldx 	#$FF
.8323	9a		txs				txs
.8324	20 63 a8	jsr $a863			jsr 	EXTInputLine 				; get line to lineBuffer
.8327	20 ba 9d	jsr $9dba			jsr 	TokeniseLine 				; tokenise the line
.832a	ad 27 07	lda $0727			lda 	TokenLineNumber 			; line number ?
.832d	0d 28 07	ora $0728			ora 	TokenLineNumber+1
.8330	d0 17		bne $8349			bne 	_WSEditCode 				; if so,edit code.
.8332	9c 26 07	stz $0726			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8335	a9 26		lda #$26			lda 	#((TokenOffset) & $FF)
.8337	85 30		sta $30				sta 	codePtr
.8339	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.833b	85 31		sta $31				sta 	codePtr+1
.833d	ad 29 07	lda $0729			lda 	TokenBuffer 				; nothing to run
.8340	c9 80		cmp #$80			cmp 	#KWC_EOL
.8342	f0 dd		beq $8321			beq 	WarmStart
.8344	20 52 89	jsr $8952			jsr 	RUNCodePointerLine 			; execute that line.
.8347	80 d8		bra $8321			bra 	WarmStart
.8349					_WSEditCode:
.8349	20 fc 82	jsr $82fc			jsr 	EditProgramCode
.834c	20 ba 83	jsr $83ba			jsr 	ClearCommand
.834f	80 d0		bra $8321			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8351					AssembleCommand:
.8351	a2 00		ldx #$00			ldx 	#0
.8353	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger 		; start address
.8356	ad 08 06	lda $0608			lda 	NSMantissa0
.8359	8d 1e 07	sta $071e			sta 	AssemblerAddress
.835c	ad 10 06	lda $0610			lda 	NSMantissa1
.835f	8d 1f 07	sta $071f			sta 	AssemblerAddress+1
.8362	20 ca a0	jsr $a0ca			jsr 	CheckComma
.8365	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger 		; options
.8368	ad 08 06	lda $0608			lda 	NSMantissa0
.836b	8d 20 07	sta $0720			sta 	AssemblerControl
.836e	60		rts				rts
.836f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8370					AssertCommand:
.8370	a2 00		ldx #$00			ldx 	#0
.8372	20 b8 98	jsr $98b8			jsr 	EvaluateInteger 			; the assert test
.8375	20 71 99	jsr $9971			jsr 	NSMIsZero 					; exit if result is non zero.
.8378	d0 05		bne $837f			bne 	_ACExit
.837a	a9 0a		lda #$0a		lda	#10
.837c	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.837f					_ACExit:
.837f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8380					CallCommand:
.8380	a2 00		ldx #$00			ldx 	#0
.8382	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger
.8385					_CCClear
.8385	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8386	20 41 99	jsr $9941			jsr 	NSMSetZero
.8389	e0 04		cpx #$04			cpx 	#4
.838b	d0 f8		bne $8385			bne 	_CCClear
.838d	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.838f					_CCCParam:
.838f	b1 30		lda ($30),y			lda 	(codePtr),y
.8391	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8393	d0 09		bne $839e			bne 	_CCCRun6502
.8395	c8		iny				iny 								; skip comma
.8396	e8		inx				inx	 								; next level
.8397	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger 		; get A/X/Y
.839a	e0 03		cpx #$03			cpx 	#3
.839c	90 f1		bcc $838f			bcc 	_CCCParam 					; done all 3 ?
.839e					_CCCRun6502:
.839e	5a		phy				phy 								; save position
.839f	ad 10 06	lda $0610			lda 	NSMantissa1 				; put address in zTemp0
.83a2	85 37		sta $37				sta 	zTemp0+1
.83a4	ad 08 06	lda $0608			lda 	NSMantissa0
.83a7	85 36		sta $36				sta 	zTemp0
.83a9	ad 09 06	lda $0609			lda 	NSMantissa0+1 				; get registers
.83ac	ae 0a 06	ldx $060a			ldx 	NSMantissa0+2
.83af	ac 0b 06	ldy $060b			ldy 	NSMantissa0+3
.83b2	20 b7 83	jsr $83b7			jsr 	_CCCZTemp0 					; call zTemp0
.83b5	7a		ply				ply 								; restore position and exit
.83b6	60		rts				rts
.83b7					_CCCZTemp0:
.83b7	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83ba					ClearCommand:
.83ba	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83bc	85 36		sta $36				sta 	0+zTemp0
.83be	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83c0	85 37		sta $37				sta 	1+zTemp0
.83c2					_ClearZeroLoop:
.83c2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83c4	f0 24		beq $83ea			beq 	_ClearZeroEnd
.83c6	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.83c8	a9 00		lda #$00			lda 	#0
.83ca					_ClearOneVariable:
.83ca	91 36		sta ($36),y			sta 	(zTemp0),y
.83cc	c8		iny				iny
.83cd	c0 08		cpy #$08			cpy 	#8
.83cf	d0 f9		bne $83ca			bne 	_ClearOneVariable
.83d1	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.83d3	b1 36		lda ($36),y			lda 	(zTemp0),y
.83d5	c9 18		cmp #$18			cmp 	#NSTProcedure
.83d7	d0 04		bne $83dd			bne 	_ClearNotProcedure
.83d9	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.83db	91 36		sta ($36),y			sta 	(zTemp0),y
.83dd					_ClearNotProcedure:
.83dd	18		clc				clc 								; go to the next variable
.83de	b2 36		lda ($36)			lda 	(zTemp0)
.83e0	65 36		adc $36				adc 	zTemp0
.83e2	85 36		sta $36				sta 	zTemp0
.83e4	90 dc		bcc $83c2			bcc 	_ClearZeroLoop
.83e6	e6 37		inc $37				inc 	zTemp0+1
.83e8	80 d8		bra $83c2			bra 	_ClearZeroLoop
.83ea					_ClearZeroEnd:
.83ea	18		clc				clc
.83eb	a5 36		lda $36				lda 	zTemp0
.83ed	69 01		adc #$01			adc 	#1
.83ef	8d 0c 07	sta $070c			sta 	lowMemPtr
.83f2	a5 37		lda $37				lda 	zTemp0+1
.83f4	69 00		adc #$00			adc 	#0
.83f6	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.83f9	20 5a 9a	jsr $9a5a			jsr 	StackReset
.83fc	20 ab a9	jsr $a9ab			jsr 	StringSystemInitialise
.83ff	20 a9 8c	jsr $8ca9			jsr 	ProcedureScan
.8402	20 0e 89	jsr $890e			jsr 	Command_Restore
.8405	9c 1e 07	stz $071e			stz 	AssemblerAddress
.8408	9c 1f 07	stz $071f			stz 	AssemblerAddress+1
.840b	9c 20 07	stz $0720			stz 	AssemblerControl
.840e	20 50 96	jsr $9650			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8411	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8412					Command_Data:
.8412	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8414	a2 80		ldx #$80			ldx 	#KWC_EOL
.8416	20 fb 8c	jsr $8cfb			jsr 	ScanForward
.8419	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.841a					DimCommand:
.841a	b1 30		lda ($30),y			lda 	(codePtr),y
.841c	29 c0		and #$c0			and 	#$C0
.841e	c9 40		cmp #$40			cmp 	#$40
.8420	d0 7a		bne $849c			bne 	_DCSyntax
.8422	b1 30		lda ($30),y			lda 	(codePtr),y
.8424	18		clc				clc
.8425	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8427	85 3f		sta $3f				sta 	zaTemp+1
.8429	c8		iny				iny
.842a	b1 30		lda ($30),y			lda 	(codePtr),y
.842c	c8		iny				iny
.842d	85 3e		sta $3e				sta 	zaTemp
.842f	5a		phy				phy
.8430	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8432	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8434	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8436	c9 18		cmp #$18			cmp 	#NSTProcedure
.8438	f0 62		beq $849c			beq 	_DCSyntax
.843a	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.843c	29 04		and #$04			and 	#NSBIsArray
.843e	f0 64		beq $84a4			beq 	_DCType
.8440	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8442	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8444	d0 59		bne $849f			bne 	_DCRedefine
.8446	7a		ply				ply
.8447	20 a7 84	jsr $84a7			jsr 	_DCGetSize 				; get array size, check it.
.844a	5a		phy				phy
.844b	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.844d	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.844f	7a		ply				ply 							; is there a second (e.g. ,x)
.8450	b1 30		lda ($30),y			lda 	(codePtr),y
.8452	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8454	d0 0a		bne $8460			bne 	_DCOneDimension
.8456	c8		iny				iny 							; skip comma
.8457	20 a7 84	jsr $84a7			jsr 	_DCGetSize 				; get 2nd array size
.845a	5a		phy				phy
.845b	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.845d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.845f	7a		ply				ply
.8460					_DCOneDimension:
.8460	5a		phy				phy 							; save position
.8461	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8463	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8465	aa		tax				tax
.8466	c8		iny				iny
.8467	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8469	e8		inx				inx 							; bump them.
.846a	1a		inc a				inc 	a
.846b	20 44 a5	jsr $a544			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.846e	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8470	29 e0		and #$e0			and 	#$E0
.8472	d0 23		bne $8497			bne 	_DCSize
.8474	a0 02		ldy #$02			ldy 	#2 						; get base type
.8476	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8478	20 b5 84	jsr $84b5			jsr 	ScaleByBaseType 		; scale by base type
.847b	a5 36		lda $36				lda 	zTemp0
.847d	a6 37		ldx $37				ldx 	zTemp0+1
.847f	20 12 96	jsr $9612			jsr 	AllocateXABytes 		; allocate memory
.8482	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8484	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8486	c8		iny				iny
.8487	8a		txa				txa
.8488	91 3e		sta ($3e),y			sta 	(zaTemp),y
.848a	7a		ply				ply 							; get position back
.848b	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 		; check )
.848e	b1 30		lda ($30),y			lda 	(codePtr),y
.8490	c8		iny				iny 							; consume in case
.8491	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8493	f0 85		beq $841a			beq 	DimCommand
.8495	88		dey				dey 							; undo consume
.8496	60		rts				rts
.8497					_DCSize:
.8497	a9 16		lda #$16		lda	#22
.8499	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.849c					_DCSyntax:
.849c	4c a8 a6	jmp $a6a8			jmp 	SyntaxError
.849f					_DCRedefine:
.849f	a9 15		lda #$15		lda	#21
.84a1	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.84a4					_DCType:
.84a4	4c b2 a6	jmp $a6b2			jmp 	TypeError
.84a7					_DCGetSize:
.84a7	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84a9	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger 	; get array dimension
.84ac	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84ae	f0 e7		beq $8497			beq 	_DCSize
.84b0	c9 fe		cmp #$fe			cmp 	#254
.84b2	f0 e3		beq $8497			beq 	_DCSize
.84b4	60		rts				rts
.84b5					ScaleByBaseType:
.84b5	29 10		and #$10			and 	#NSBIsString 			; is it string
.84b7	d0 19		bne $84d2			bne 	_SBBTString
.84b9	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84bb	48		pha				pha
.84bc	a5 36		lda $36				lda 	zTemp0
.84be	48		pha				pha
.84bf	06 36		asl $36				asl 	zTemp0 					; x 2
.84c1	26 37		rol $37				rol 	zTemp0+1
.84c3	06 36		asl $36				asl 	zTemp0 					; x 4
.84c5	26 37		rol $37				rol 	zTemp0+1
.84c7	68		pla				pla 							; add stacked value = x 5
.84c8	65 36		adc $36				adc 	zTemp0
.84ca	85 36		sta $36				sta 	zTemp0
.84cc	68		pla				pla
.84cd	65 37		adc $37				adc 	zTemp0+1
.84cf	85 37		sta $37				sta 	zTemp0+1
.84d1	60		rts				rts
.84d2					_SBBTString:
.84d2	06 36		asl $36				asl 	zTemp0
.84d4	26 37		rol $37				rol 	zTemp0+1
.84d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.84d7					EndCommand:
.84d7	4c 21 83	jmp $8321			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.84da					ForCommand:
.84da	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.84dc	20 f5 99	jsr $99f5			jsr 	StackOpen
.84df	a2 00		ldx #$00			ldx 	#0
.84e1	20 63 94	jsr $9463			jsr 	EvaluateTerm
.84e4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.84e7	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.84e9	d0 49		bne $8534			bne		_FCError
.84eb	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.84ed	20 d2 a0	jsr $a0d2			jsr 	CheckNextA
.84f0	e8		inx				inx
.84f1	20 b8 98	jsr $98b8			jsr 	EvaluateInteger 			; <from> in +1
.84f4	b1 30		lda ($30),y			lda 	(codePtr),y
.84f6	c8		iny				iny 								; consume it
.84f7	48		pha				pha 								; save on stack for later
.84f8	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.84fa	f0 04		beq $8500			beq 	_FCNoSyntax
.84fc	c9 b0		cmp #$b0			cmp 	#KWD_TO
.84fe	d0 37		bne $8537			bne 	_FCSyntaxError
.8500					_FCNoSyntax:
.8500	e8		inx				inx
.8501	20 b8 98	jsr $98b8			jsr 	EvaluateInteger
.8504	20 39 9a	jsr $9a39			jsr 	STKSaveCodePosition 		; save loop back position
.8507	68		pla				pla 								; restore DOWNTO or TO
.8508	5a		phy				phy 								; save Y on the stack
.8509	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.850b	f0 02		beq $850f			beq 	_FCNotDownTo
.850d	a9 02		lda #$02			lda 	#2
.850f					_FCNotDownTo:
.850f	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8510	a0 10		ldy #$10			ldy 	#16
.8512	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8514	a0 06		ldy #$06			ldy 	#6
.8516	ad 08 06	lda $0608			lda 	NSMantissa0
.8519	91 34		sta ($34),y			sta 	(basicStack),y
.851b	ad 10 06	lda $0610			lda 	NSMantissa1
.851e	c8		iny				iny
.851f	91 34		sta ($34),y			sta 	(basicStack),y
.8521	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8523	a2 01		ldx #$01			ldx 	#1
.8525	20 3a 85	jsr $853a			jsr 	FCIntegerToStack
.8528	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.852a	a2 02		ldx #$02			ldx 	#2
.852c	20 3a 85	jsr $853a			jsr 	FCIntegerToStack
.852f	20 5a 85	jsr $855a			jsr 	CopyIndexToReference
.8532	7a		ply				ply 								; restore position
.8533	60		rts				rts
.8534					_FCError:
.8534	4c b2 a6	jmp $a6b2			jmp 	TypeError
.8537					_FCSyntaxError:
.8537	4c a8 a6	jmp $a6a8			jmp 	SyntaxError
.853a					FCIntegerToStack:
.853a	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.853d	10 03		bpl $8542			bpl	 	_FCNotNegative
.853f	20 f6 98	jsr $98f6			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8542					_FCNotNegative:
.8542	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8545	91 34		sta ($34),y			sta 	(basicStack),y
.8547	c8		iny				iny
.8548	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.854b	91 34		sta ($34),y			sta 	(basicStack),y
.854d	c8		iny				iny
.854e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8551	91 34		sta ($34),y			sta 	(basicStack),y
.8553	c8		iny				iny
.8554	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8557	91 34		sta ($34),y			sta 	(basicStack),y
.8559	60		rts				rts
.855a					CopyIndexToReference:
.855a	5a		phy				phy
.855b	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.855d	38		sec				sec 								; (because we copy from offset 8)
.855e	b1 34		lda ($34),y			lda 	(basicStack),y
.8560	e9 08		sbc #$08			sbc 	#8
.8562	85 36		sta $36				sta 	zTemp0
.8564	c8		iny				iny
.8565	b1 34		lda ($34),y			lda 	(basicStack),y
.8567	e9 00		sbc #$00			sbc 	#0
.8569	85 37		sta $37				sta 	zTemp0+1
.856b	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.856d	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.856f	b1 34		lda ($34),y			lda 	(basicStack),y
.8571	0a		asl a				asl 	a 							; into carry
.8572	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8574	90 14		bcc $858a			bcc 	_CITRNormal
.8576	38		sec				sec
.8577					_CITRNegative:
.8577	a9 00		lda #$00			lda 	#0
.8579	f1 34		sbc ($34),y			sbc 	(basicStack),y
.857b	91 36		sta ($36),y			sta 	(zTemp0),y
.857d	c8		iny				iny
.857e	ca		dex				dex
.857f	d0 f6		bne $8577			bne 	_CITRNegative
.8581	88		dey				dey 								; look at MSB of mantissa
.8582	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8584	09 80		ora #$80			ora 	#$80
.8586	91 36		sta ($36),y			sta 	(zTemp0),y
.8588	7a		ply				ply
.8589	60		rts				rts
.858a					_CITRNormal:
.858a	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.858c	91 36		sta ($36),y			sta 	(zTemp0),y
.858e	c8		iny				iny
.858f	ca		dex				dex
.8590	d0 f8		bne $858a			bne 	_CITRNormal
.8592	7a		ply				ply 								; and exit.
.8593	60		rts				rts
.8594					NextCommand:
.8594	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8596	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8598	20 21 9a	jsr $9a21			jsr 	StackCheckFrame
.859b	5a		phy				phy
.859c	a0 10		ldy #$10			ldy 	#16 						; get the step count
.859e	b1 34		lda ($34),y			lda 	(basicStack),y
.85a0	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85a2	30 02		bmi $85a6			bmi 	_NCStepNeg
.85a4	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85a6					_NCStepNeg:
.85a6	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85a8	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85aa	18		clc				clc
.85ab					_NCBump:
.85ab	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85ad	91 34		sta ($34),y			sta 	(basicStack),y
.85af	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85b1	c8		iny				iny 								; next byte
.85b2	ca		dex				dex 								; do four times
.85b3	d0 f6		bne $85ab			bne 	_NCBump
.85b5	20 5a 85	jsr $855a			jsr		CopyIndexToReference		; copy it to the reference variable.
.85b8	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85ba	b1 34		lda ($34),y			lda 	(basicStack),y
.85bc	0a		asl a				asl 	a 							; sign bit to carry
.85bd	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85bf	85 38		sta $38				sta 	zTemp1
.85c1	90 02		bcc $85c5			bcc 	_NCCompRev 					; use if step is +ve
.85c3	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.85c5					_NCCompRev:
.85c5	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.85c7	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.85c9	85 39		sta $39				sta 	zTemp1+1
.85cb	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.85cd	38		sec				sec
.85ce					_NCCompare:
.85ce	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.85d0	b1 34		lda ($34),y			lda 	(basicStack),y
.85d2	a4 39		ldy $39				ldy 	zTemp1+1
.85d4	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85d6	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.85d8	e6 39		inc $39				inc 	zTemp1+1
.85da	ca		dex				dex 								; do it 4 times.
.85db	d0 f1		bne $85ce			bne 	_NCCompare
.85dd	50 02		bvc $85e1			bvc 	_NCNoOverflow 				; convert to signed comparison
.85df	49 80		eor #$80			eor 	#$80
.85e1					_NCNoOverflow:
.85e1	7a		ply				ply 								; restore Y position
.85e2	0a		asl a				asl 	a 							; is bit 7 set.
.85e3	90 04		bcc $85e9			bcc 	_NCLoopback 				; if no , >= so loop back
.85e5	20 13 9a	jsr $9a13			jsr 	StackClose 					; exit the loop
.85e8	60		rts				rts
.85e9					_NCLoopBack:
.85e9	20 4a 9a	jsr $9a4a			jsr 	STKLoadCodePosition 		; loop back
.85ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.85ed					Command_GOSUB:
.85ed	a2 00		ldx #$00			ldx 	#0
.85ef	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.85f2	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.85f4	20 f5 99	jsr $99f5			jsr 	StackOpen 					; create frame
.85f7	20 39 9a	jsr $9a39			jsr 	STKSaveCodePosition 		; save current position
.85fa	4c 10 86	jmp $8610			jmp 	GotoStackX
.85fd					Command_RETURN:
.85fd	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.85ff	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8601	20 21 9a	jsr $9a21			jsr 	StackCheckFrame
.8604	20 4a 9a	jsr $9a4a			jsr 	STKLoadCodePosition 		; restore code position
.8607	20 13 9a	jsr $9a13			jsr 	StackClose
.860a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.860b					GotoCommand:
.860b	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.860d	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger
.8610					GotoStackX:
.8610	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8613	48		pha				pha 								; it is slightly inefficient, just in cases.
.8614	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8617	fa		plx				plx
.8618	20 a0 99	jsr $99a0			jsr 	MemorySearch 				; transfer to line number AX.
.861b	90 05		bcc $8622			bcc 	_GotoError 					; not found, off end.
.861d	d0 03		bne $8622			bne 	_GotoError 					; not found exactly
.861f	4c 4b 89	jmp $894b			jmp 	RunNewLine 					; and go straight to new line code.
.8622					_GotoError:
.8622	a9 0d		lda #$0d		lda	#13
.8624	4c 89 8d	jmp $8d89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8627					IfCommand:
.8627	a2 00		ldx #$00			ldx 	#0 							; If what.
.8629	20 95 98	jsr $9895			jsr 	EvaluateNumber
.862c	b1 30		lda ($30),y			lda 	(codePtr),y
.862e	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8630	d0 0a		bne $863c			bne 	_IFStructured
.8632	c8		iny				iny 								; consume THEN
.8633	20 71 99	jsr $9971			jsr 	NSMIsZero 					; is it zero
.8636	f0 01		beq $8639			beq 	_IfFail 					; if fail, go to next line
.8638	60		rts				rts 								; if THEN just continue
.8639					_IfFail:
.8639	4c b0 89	jmp $89b0			jmp 	EOLCommand
.863c					_IfStructured:
.863c	20 71 99	jsr $9971			jsr 	NSMIsZero 					; is it zero
.863f	d0 07		bne $8648			bne 	_IfExit 					; if not, then continue normally.
.8641	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8643	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8645	20 fb 8c	jsr $8cfb			jsr 	ScanForward 				; and run from there/
.8648					_IfExit:
.8648	60		rts				rts
.8649					ElseCode:
.8649	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.864b	aa		tax				tax 								; so just go to the structure exit
.864c	20 fb 8c	jsr $8cfb			jsr 	ScanForward
.864f	60		rts				rts
.8650					EndIf:
.8650	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8651					LetCommand:
.8651	a2 00		ldx #$00			ldx 	#0
.8653	b1 30		lda ($30),y			lda 	(codePtr),y
.8655	c9 10		cmp #$10			cmp 	#KWD_AT
.8657	d0 16		bne $866f			bne 	_LCStandard
.8659	c8		iny				iny 								; skip equal
.865a	20 63 94	jsr $9463			jsr 	EvaluateTerm 				; get a number
.865d	20 a7 92	jsr $92a7			jsr 	Dereference 				; dereference it
.8660	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check integer
.8663	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8665	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8668	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.866a	d0 10		bne $867c			bne 	_LCMain
.866c	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; was a reference before.
.866f					_LCStandard:
.866f	ad 7a 91	lda $917a			lda 	PrecedenceLevel+"*"			; precedence > this
.8672	20 94 91	jsr $9194			jsr 	EvaluateExpressionAtPrecedence
.8675	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8678	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.867a	f0 0e		beq $868a			beq 	_LetGoProc 					; it's a procedure call.
.867c					_LCMain:
.867c	a9 3d		lda #$3d			lda 	#"=" 						; check =
.867e	20 d2 a0	jsr $a0d2			jsr 	CheckNextA
.8681	e8		inx				inx 								; RHS
.8682	20 8c 98	jsr $988c			jsr 	EvaluateValue
.8685	ca		dex				dex
.8686	20 8d 86	jsr $868d			jsr 	AssignVariable
.8689	60		rts				rts
.868a					_LetGoProc:
.868a	4c 26 88	jmp $8826			jmp 	CallProcedure
.868d					AssignVariable:
.868d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8690	48		pha				pha 								; save a copy
.8691	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8694	29 10		and #$10			and 	#NSBIsString
.8696	d0 0b		bne $86a3			bne 	_ASError
.8698	68		pla				pla 								; get back
.8699	29 10		and #$10			and 	#NSBIsString 				; check type
.869b	d0 03		bne $86a0			bne 	_ASString
.869d	4c cf 91	jmp $91cf			jmp 	AssignNumber
.86a0					_ASString:
.86a0	4c 3d 92	jmp $923d			jmp 	AssignString
.86a3					_ASError:
.86a3	4c b2 a6	jmp $a6b2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86a6					Command_List:
.86a6	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86a9	9c 14 06	stz $0614			stz 	NSMantissa1+4
.86ac	a9 ff		lda #$ff			lda 	#$FF
.86ae	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.86b1	8d 17 06	sta $0617			sta 	NSMantissa1+7
.86b4	b1 30		lda ($30),y			lda 	(codePtr),y
.86b6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86b8	f0 1e		beq $86d8			beq 	_CLSecond
.86ba	20 36 87	jsr $8736			jsr 	CLIsDigit 					; if not digit, list all
.86bd	b0 24		bcs $86e3			bcs 	_CLStart
.86bf	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86c1	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger
.86c4	b1 30		lda ($30),y			lda 	(codePtr),y
.86c6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86c8	f0 0e		beq $86d8			beq 	_CLSecond 					; if so go get it
.86ca	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.86cd	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.86d0	ad 14 06	lda $0614			lda 	NSMantissa1+4
.86d3	8d 17 06	sta $0617			sta 	NSMantissa1+7
.86d6	80 0b		bra $86e3			bra 	_CLStart
.86d8					_CLSecond:
.86d8	c8		iny				iny 								; consume comma
.86d9	20 36 87	jsr $8736			jsr 	CLIsDigit 					; digit found
.86dc	b0 05		bcs $86e3			bcs 	_CLStart 					; if not, continue listing
.86de	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.86e0	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger
.86e3					_CLStart
.86e3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.86e5	85 30		sta $30				sta 	codePtr
.86e7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.86e9	85 31		sta $31				sta 	codePtr+1
.86eb					_CLLoop:
.86eb	20 8e a8	jsr $a88e			jsr 	EXTBreakCheck 				; break check
.86ee	f0 30		beq $8720			beq 	_CLExit
.86f0	b2 30		lda ($30)			lda 	(codePtr)
.86f2	f0 2c		beq $8720			beq 	_CLExit
.86f4	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.86f6	20 23 87	jsr $8723			jsr 	CLCompareLineNo
.86f9	90 18		bcc $8713			bcc 	_CLNext
.86fb	a2 07		ldx #$07			ldx 	#7
.86fd	20 23 87	jsr $8723			jsr 	CLCompareLineNo
.8700	f0 02		beq $8704			beq 	_CLDoThisOne
.8702	b0 0f		bcs $8713			bcs 	_CLNext
.8704					_CLDoThisOne:
.8704	20 57 8b	jsr $8b57			jsr 	ListConvertLine 			; convert line into token Buffer
.8707	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8709	a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.870b	20 e2 8d	jsr $8de2			jsr 	PrintStringXA
.870e	a9 0d		lda #$0d			lda 	#13 						; new line
.8710	20 4d a8	jsr $a84d			jsr 	EXTPrintCharacter
.8713					_CLNext:
.8713	18		clc				clc
.8714	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8716	65 30		adc $30				adc 	codePtr
.8718	85 30		sta $30				sta 	codePtr
.871a	90 02		bcc $871e			bcc 	_CREExit
.871c	e6 31		inc $31				inc 	codePtr+1
.871e					_CREExit:
.871e	80 cb		bra $86eb			bra 	_CLLoop
.8720					_CLExit:
.8720	4c 21 83	jmp $8321			jmp 	WarmStart
.8723					CLCompareLineNo:
.8723	38		sec				sec
.8724	a0 01		ldy #$01			ldy 	#1
.8726	b1 30		lda ($30),y			lda 	(codePtr),y
.8728	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.872b	85 36		sta $36				sta 	zTemp0
.872d	c8		iny				iny
.872e	b1 30		lda ($30),y			lda 	(codePtr),y
.8730	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8733	05 36		ora $36				ora 	zTemp0
.8735	60		rts				rts
.8736					CLIsDigit:
.8736	b1 30		lda ($30),y			lda 	(codePtr),y
.8738	c9 30		cmp #$30			cmp 	#"0"
.873a	90 03		bcc $873f			bcc	 	_CLIDExitFalse
.873c	c9 3a		cmp #$3a			cmp 	#"9"+1
.873e	60		rts				rts
.873f					_CLIDExitFalse:
.873f	38		sec				sec
.8740	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8741					Command_LOCAL:
.8741	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8743	20 4f 87	jsr $874f			jsr 	LocaliseNextTerm 			; convert term to a local.
.8746	b1 30		lda ($30),y			lda 	(codePtr),y
.8748	c8		iny				iny
.8749	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.874b	f0 f4		beq $8741			beq 	Command_LOCAL
.874d	88		dey				dey 								; unpick pre-get
.874e	60		rts				rts
.874f					LocaliseNextTerm:
.874f	20 63 94	jsr $9463			jsr 	EvaluateTerm 				; evaluate the term
.8752	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8755	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8757	f0 69		beq $87c2			beq		_LNTError
.8759	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.875c	85 36		sta $36				sta 	zTemp0
.875e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8761	85 37		sta $37				sta  	zTemp0+1
.8763	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8766	29 10		and #$10			and 	#NSBIsString
.8768	d0 22		bne $878c			bne 	_LNTPushString
.876a	5a		phy				phy
.876b	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.876d					_LNTPushNumLoop:
.876d	b1 36		lda ($36),y			lda		(zTemp0),y
.876f	20 d3 99	jsr $99d3			jsr 	StackPushByte
.8772	a9 00		lda #$00			lda 	#0
.8774	91 36		sta ($36),y			sta 	(zTemp0),y
.8776	c8		iny				iny
.8777	c0 05		cpy #$05			cpy 	#5
.8779	d0 f2		bne $876d			bne 	_LNTPushNumLoop
.877b	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.877d	20 d3 99	jsr $99d3			jsr 	StackPushByte
.8780	a5 37		lda $37				lda 	zTemp0+1
.8782	20 d3 99	jsr $99d3			jsr 	StackPushByte
.8785	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8787	20 d3 99	jsr $99d3			jsr 	StackPushByte
.878a	7a		ply				ply
.878b	60		rts				rts
.878c					_LNTPushString:
.878c	5a		phy				phy
.878d	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.878f	85 38		sta $38				sta 	zTemp1
.8791	a0 01		ldy #$01			ldy 	#1
.8793	b1 36		lda ($36),y			lda 	(zTemp0),y
.8795	85 39		sta $39				sta 	zTemp1+1
.8797	a0 00		ldy #$00			ldy 	#0 							; output string
.8799	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.879b	f0 0a		beq $87a7			beq 	_LNTStringOut
.879d					_LNTPushStrLoop:
.879d	b1 38		lda ($38),y			lda 	(zTemp1),y
.879f	f0 06		beq $87a7			beq 	_LNTStringOut
.87a1	20 d3 99	jsr $99d3			jsr 	StackPushByte
.87a4	c8		iny				iny
.87a5	80 f6		bra $879d			bra 	_LNTPushStrLoop
.87a7					_LNTStringOut:
.87a7	98		tya				tya									; output length
.87a8	20 d3 99	jsr $99d3			jsr 	StackPushByte
.87ab	a9 00		lda #$00			lda 	#0 							; clear original string.
.87ad	92 38		sta ($38)			sta 	(zTemp1)
.87af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87b2	20 d3 99	jsr $99d3			jsr 	StackPushByte
.87b5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87b8	20 d3 99	jsr $99d3			jsr 	StackPushByte
.87bb	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87bd	20 d3 99	jsr $99d3			jsr 	StackPushByte
.87c0	7a		ply				ply
.87c1	60		rts				rts
.87c2					_LNTError:
.87c2	4c a8 a6	jmp $a6a8			jmp 	SyntaxError
.a069					LocalPopValue:
.a069	20 ec 99	jsr $99ec			jsr 	StackPopByte
.a06c	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a06e	d0 17		bne $a087			bne 	_LPVString
.a070	20 ec 99	jsr $99ec			jsr 	StackPopByte 				; address
.a073	85 37		sta $37				sta 	zTemp0+1
.a075	20 ec 99	jsr $99ec			jsr 	StackPopByte
.a078	85 36		sta $36				sta 	zTemp0
.a07a	5a		phy				phy
.a07b	a0 04		ldy #$04			ldy 	#4 							; copy back
.a07d					_LPVNumberCopy:
.a07d	20 ec 99	jsr $99ec			jsr 	StackPopByte
.a080	91 36		sta ($36),y			sta 	(zTemp0),y
.a082	88		dey				dey
.a083	10 f8		bpl $a07d			bpl 	_LPVNumberCopy
.a085	7a		ply				ply 								; and complete
.a086	60		rts				rts
.a087					_LPVString:
.a087	20 ec 99	jsr $99ec			jsr 	StackPopByte 				; address of record => zTemp0
.a08a	85 37		sta $37				sta 	zTemp0+1
.a08c	20 ec 99	jsr $99ec			jsr 	StackPopByte
.a08f	85 36		sta $36				sta 	zTemp0
.a091	5a		phy				phy
.a092	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a094	85 38		sta $38				sta 	zTemp1
.a096	a0 01		ldy #$01			ldy 	#1
.a098	b1 36		lda ($36),y			lda 	(zTemp0),y
.a09a	85 39		sta $39				sta 	zTemp1+1
.a09c	20 ec 99	jsr $99ec			jsr 	StackPopByte 				; # to get => y
.a09f	a8		tay				tay
.a0a0	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a0a2	f0 0e		beq $a0b2			beq 	_LPVStringCopied
.a0a4	a9 00		lda #$00			lda 	#0 							; NULL on end
.a0a6	91 38		sta ($38),y			sta 	(zTemp1),y
.a0a8					_LPVStringCopy:
.a0a8	88		dey				dey
.a0a9	30 07		bmi $a0b2			bmi 	_LPVStringCopied
.a0ab	20 ec 99	jsr $99ec			jsr 	StackPopByte
.a0ae	91 38		sta ($38),y			sta 	(zTemp1),y
.a0b0	80 f6		bra $a0a8			bra 	_LPVStringCopy
.a0b2					_LPVStringCopied:
.a0b2	fa		plx				plx
.a0b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.87c5					NewCommand:
.87c5	20 7e 99	jsr $997e			jsr 	MemoryNew
.87c8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.87cb	20 ba 83	jsr $83ba			jsr 	ClearCommand 				; clear everything.
.87ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.87cf					Command_Print:
.87cf	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87d0					_CPLoop:
.87d0	08		php				php 								; save last action flag
.87d1	b1 30		lda ($30),y			lda 	(codePtr),y
.87d3	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.87d5	f0 46		beq $881d			beq 	_CPExit
.87d7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.87d9	f0 42		beq $881d			beq 	_CPExit
.87db	68		pla				pla 								; throw last action flag
.87dc	b1 30		lda ($30),y			lda 	(codePtr),y
.87de	c8		iny				iny
.87df	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.87e1	f0 37		beq $881a			beq 	_CPContinueWithSameLine
.87e3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.87e5	f0 2e		beq $8815			beq 	_CPTab
.87e7	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.87e9	f0 26		beq $8811			beq 	_CPNewLine
.87eb	88		dey				dey 								; undo the get.
.87ec	a2 00		ldx #$00			ldx 	#0
.87ee	20 8c 98	jsr $988c			jsr 	EvaluateValue 				; get a value into slot 0
.87f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.87f4	29 10		and #$10			and 	#NSBIsString
.87f6	f0 0b		beq $8803			beq 	_CPNumber
.87f8	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.87fb	ad 08 06	lda $0608			lda 	NSMantissa0
.87fe	20 e2 8d	jsr $8de2			jsr 	PrintStringXA
.8801	80 cc		bra $87cf			bra 	Command_Print 				; loop round clearing carry so NL if end
.8803					_CPNumber:
.8803	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8805	20 62 97	jsr $9762			jsr 	ConvertNumberToString 		; convert to string
.8808	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.880a	a9 99		lda #$99			lda 	#DecimalBuffer & $FF
.880c	20 e2 8d	jsr $8de2			jsr 	PrintStringXA
.880f	80 be		bra $87cf			bra 	Command_Print 				; loop round clearing carry so NL if end
.8811					_CPNewLine:
.8811	a9 0d		lda #$0d			lda 	#13
.8813	80 02		bra $8817			bra 	_CPPrintChar
.8815					_CPTab:
.8815	a9 09		lda #$09			lda 	#9 							; print TAB
.8817					_CPPrintChar:
.8817	20 4d a8	jsr $a84d			jsr 	EXTPrintCharacter
.881a					_CPContinueWithSameLine:
.881a	38		sec				sec 								; loop round with carry set, which
.881b	80 b3		bra $87d0			bra 	_CPLoop 					; will inhibit final CR
.881d					_CPExit:
.881d	28		plp				plp 								; get last action flag
.881e	b0 05		bcs $8825			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8820	a9 0d		lda #$0d			lda 	#13 						; print new line
.8822	20 4d a8	jsr $a84d			jsr 	EXTPrintCharacter
.8825					_CPExit2:
.8825	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8826					CallProcedure:
.8826	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8828	b1 30		lda ($30),y			lda 	(codePtr),y
.882a	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.882c	f0 0c		beq $883a			beq 	_CPEndParam
.882e					_CPParamLoop:
.882e	20 92 91	jsr $9192			jsr 	EvaluateExpression 			; get parameter onto stack
.8831	e8		inx				inx 								; bump next stack
.8832	b1 30		lda ($30),y			lda 	(codePtr),y
.8834	c8		iny				iny
.8835	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8837	f0 f5		beq $882e			beq 	_CPParamLoop
.8839	88		dey				dey 								; unpick.
.883a					_CPEndParam:
.883a	8e 16 07	stx $0716			stx 	LastParameter 				; save the last parameters index.
.883d	c8		iny				iny									; skip right bracket
.883e	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8840	20 f5 99	jsr $99f5			jsr 	StackOpen
.8843	20 39 9a	jsr $9a39			jsr 	STKSaveCodePosition 		; save loop position
.8846	ad 08 06	lda $0608			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8849	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.884b	ad 10 06	lda $0610			lda 	NSMantissa1
.884e	85 37		sta $37				sta 	zTemp0+1
.8850	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8852	b2 36		lda ($36)			lda 	(zTemp0)
.8854	85 30		sta $30				sta 	safePtr
.8856	b1 36		lda ($36),y			lda 	(zTemp0),y
.8858	85 31		sta $31				sta 	safePtr+1
.885a	c8		iny				iny
.885b	b1 36		lda ($36),y			lda 	(zTemp0),y
.885d	85 32		sta $32				sta 	safePtr+2
.885f	c8		iny				iny
.8860	b1 36		lda ($36),y			lda 	(zTemp0),y
.8862	85 33		sta $33				sta 	safePtr+3
.8864	c8		iny				iny 								; get Y offset -> Y
.8865	b1 36		lda ($36),y			lda 	(zTemp0),y
.8867	a8		tay				tay
.8868	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.886a	ec 16 07	cpx $0716			cpx	 	LastParameter 				; check no parameters at the start
.886d	f0 13		beq $8882			beq 	_ParamExit 					; if so, exit.
.886f					_ParamExtract:
.886f	ca		dex				dex 								; put a local term on the level before
.8870	20 4f 87	jsr $874f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8873	20 8d 86	jsr $868d			jsr 	AssignVariable 				; assign stacked value to the variable.
.8876	e8		inx				inx 								; advance to next parameter to do.
.8877	e8		inx				inx
.8878	ec 16 07	cpx $0716			cpx 	LastParameter 				; are we done ?
.887b	f0 05		beq $8882			beq 	_ParamExit
.887d	20 ca a0	jsr $a0ca			jsr 	CheckComma 					; comma seperating parameters
.8880	80 ed		bra $886f			bra 	_ParamExtract
.8882					_ParamExit:
.8882	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 			; check )
.8885	60		rts				rts 								; and continue from here
.a0b4					Command_ENDPROC:
.a0b4	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a0b6	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a0b8	20 21 9a	jsr $9a21			jsr 	StackCheckFrame
.a0bb	20 4a 9a	jsr $9a4a			jsr 	STKLoadCodePosition 		; restore code position
.a0be	20 13 9a	jsr $9a13			jsr 	StackClose
.a0c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8886					Command_Read:
.8886	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8888	20 63 94	jsr $9463			jsr 	EvaluateTerm
.888b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.888e	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8890	f0 4a		beq $88dc			beq 	_CRSyntax 					; check reference (bit 0)
.8892	20 25 89	jsr $8925			jsr 	SwapDataCodePtrs 			; swap code and data
.8895	ad 1c 07	lda $071c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8898	d0 20		bne $88ba			bne 	_CRContinueData
.889a					_CRKeepSearching:
.889a	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.889c	aa		tax				tax
.889d	20 fb 8c	jsr $8cfb			jsr 	ScanForward
.88a0	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.88a2	f0 16		beq $88ba			beq 	_CRHaveData 				; found it
.88a4	18		clc				clc
.88a5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88a7	65 30		adc $30				adc 	codePtr
.88a9	85 30		sta $30				sta 	codePtr
.88ab	90 02		bcc $88af			bcc 	_CREExit
.88ad	e6 31		inc $31				inc 	codePtr+1
.88af					_CREExit:
.88af	a0 03		ldy #$03			ldy 	#3 							; start of line.
.88b1	b2 30		lda ($30)			lda 	(codePtr)
.88b3	d0 e5		bne $889a			bne 	_CRKeepSearching
.88b5	a9 0b		lda #$0b		lda	#11
.88b7	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.88ba					_CRHaveData:
.88ba					_CRContinueData:
.88ba	a2 01		ldx #$01			ldx 	#1
.88bc	20 8c 98	jsr $988c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.88bf	ca		dex				dex
.88c0	20 8d 86	jsr $868d			jsr		AssignVariable 				; do the assignment
.88c3	9c 1c 07	stz $071c			stz 	inDataStatement 			; clear in data
.88c6	b1 30		lda ($30),y			lda 	(codePtr),y
.88c8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.88ca	d0 04		bne $88d0			bne 	_CRSwapBack
.88cc	c8		iny				iny 								; consume comma
.88cd	ee 1c 07	inc $071c			inc 	inDataStatement 			; set in data statement currently.
.88d0					_CRSwapBack:
.88d0	20 25 89	jsr $8925			jsr 	SwapDataCodePtrs			; swap them back.
.88d3	b1 30		lda ($30),y			lda 	(codePtr),y
.88d5	c8		iny				iny
.88d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88d8	f0 ac		beq $8886			beq 	Command_Read 				; if so go round again.
.88da	88		dey				dey 								; unpick get.
.88db	60		rts				rts
.88dc					_CRSyntax:
.88dc	4c a8 a6	jmp $a6a8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.88df					RemCommand:
.88df	b1 30		lda ($30),y			lda 	(codePtr),y
.88e1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.88e3	d0 06		bne $88eb			bne 	_RMExit
.88e5	c8		iny				iny
.88e6	98		tya				tya
.88e7	38		sec				sec
.88e8	71 30		adc ($30),y			adc 	(codePtr),y
.88ea	a8		tay				tay
.88eb					_RMExit:
.88eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.88ec					Command_REPEAT:
.88ec	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.88ee	20 f5 99	jsr $99f5			jsr 	StackOpen
.88f1	20 39 9a	jsr $9a39			jsr 	STKSaveCodePosition 		; save loop position
.88f4	60		rts				rts
.88f5					Command_UNTIL:
.88f5	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.88f7	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.88f9	20 21 9a	jsr $9a21			jsr 	StackCheckFrame
.88fc	a2 00		ldx #$00			ldx 	#0
.88fe	20 95 98	jsr $9895			jsr 	EvaluateNumber 				; work out the number
.8901	20 71 99	jsr $9971			jsr 	NSMIsZero 					; check if zero
.8904	f0 04		beq $890a			beq 	_CULoopBack 				; if so keep looping
.8906	20 13 9a	jsr $9a13			jsr 	StackClose		 			; return
.8909	60		rts				rts
.890a					_CULoopBack:
.890a	20 4a 9a	jsr $9a4a			jsr 	STKLoadCodePosition 		; loop back
.890d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.890e					Command_Restore:
.890e	20 25 89	jsr $8925			jsr 	SwapDataCodePtrs 			; swap code and data
.8911	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8913	85 30		sta $30				sta 	codePtr
.8915	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8917	85 31		sta $31				sta 	codePtr+1
.8919	20 25 89	jsr $8925			jsr 	SwapDataCodePtrs 			; put them back
.891c	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.891e	8d 1b 07	sta $071b			sta 	dataPointer+4
.8921	9c 1c 07	stz $071c			stz 	inDataStatement 			; not in data statement
.8924	60		rts				rts
.8925					SwapDataCodePtrs:
.8925	da		phx				phx
.8926	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8928					_SDCPLoop:
.8928	b5 30		lda $30,x			lda 	safePtr,x
.892a	48		pha				pha
.892b	bd 17 07	lda $0717,x			lda 	dataPointer,x
.892e	95 30		sta $30,x			sta 	safePtr,x
.8930	68		pla				pla
.8931	9d 17 07	sta $0717,x			sta 	dataPointer,x
.8934	ca		dex				dex
.8935	10 f1		bpl $8928			bpl 	_SDCPLoop
.8937	ad 1b 07	lda $071b			lda 	dataPointer+4 				; swap Y position over.
.893a	8c 1b 07	sty $071b			sty 	dataPointer+4
.893d	a8		tay				tay
.893e	fa		plx				plx
.893f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8940					CommandRUN:
.8940	20 ba 83	jsr $83ba			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8943	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8945	85 30		sta $30				sta 	codePtr
.8947	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8949	85 31		sta $31				sta 	codePtr+1
.894b					RUNNewLine:
.894b	b2 30		lda ($30)			lda 	(codePtr)
.894d	f0 5e		beq $89ad			beq 	CRNoProgram         		; no then END.
.894f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8951	9a		txs				txs
.8952					RUNCodePointerLine:
.8952	a0 02		ldy #$02			ldy 	#2 							; start of program
.8954					_CRIncMainLoop:
.8954	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8957	d0 05		bne $895e			bne 	_CRNoBreakCheck
.8959	20 8e a8	jsr $a88e			jsr 	EXTBreakCheck 				; break check
.895c	f0 4a		beq $89a8			beq 	_CRBreak
.895e					_CRNoBreakCheck:
.895e	c8		iny				iny
.895f					_CRMainLoop:
.895f	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8962	b1 30		lda ($30),y			lda 	(codePtr),y
.8964	10 10		bpl $8976			bpl 	_CRNotKeyword
.8966	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8968	b0 04		bcs $896e			bcs 	_CRIsKeyword
.896a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.896c	b0 34		bcs $89a2			bcs		_CRSyntaxError
.896e					_CRIsKeyword:
.896e	c8		iny				iny 								; consume command
.896f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8970	aa		tax				tax 								; put in X for vector jump
.8971	20 a5 89	jsr $89a5			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8974	80 e9		bra $895f			bra 	_CRMainLoop 				; and loop round
.8976					_CRNotKeyword:
.8976	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8978	f0 da		beq $8954			beq 	_CRIncMainLoop
.897a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.897c	90 05		bcc $8983			bcc 	_CRNotVariable
.897e					_CRGoLet:
.897e	20 51 86	jsr $8651			jsr 	LetCommand
.8981	80 dc		bra $895f			bra 	_CRMainLoop
.8983					_CRNotVariable:
.8983	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8985	f0 f7		beq $897e			beq 	_CRGoLet
.8987	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8989	f0 f3		beq $897e			beq 	_CRGoLet
.898b	c9 21		cmp #$21			cmp 	#KWD_PLING
.898d	f0 ef		beq $897e			beq 	_CRGoLet
.898f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8991	f0 09		beq $899c			beq 	_CRGoRem
.8993	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8995	d0 0b		bne $89a2			bne 	_CRSyntaxError
.8997	20 5a 82	jsr $825a			jsr 	LabelHere
.899a	80 c3		bra $895f			bra 	_CRMainLoop
.899c					_CRGoRem:
.899c	c8		iny				iny
.899d	20 df 88	jsr $88df			jsr 	RemCommand
.89a0	80 bd		bra $895f			bra 	_CRMainLoop
.89a2					_CRSyntaxError:
.89a2	4c a8 a6	jmp $a6a8			jmp 	SyntaxError
.89a5					_CRCallVector0:
.89a5	7c 50 8a	jmp ($8a50,x)			jmp 	(VectorSet0,x)
.89a8					_CRBreak:
.89a8	a9 01		lda #$01		lda	#1
.89aa	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.89ad					CRNoProgram:
.89ad	4c d7 84	jmp $84d7			jmp 	EndCommand
.89b0					EOLCommand:
.89b0	18		clc				clc
.89b1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89b3	65 30		adc $30				adc 	codePtr
.89b5	85 30		sta $30				sta 	codePtr
.89b7	90 02		bcc $89bb			bcc 	_CREExit
.89b9	e6 31		inc $31				inc 	codePtr+1
.89bb					_CREExit:
.89bb	80 8e		bra $894b			bra 	RunNewLine
.89bd					Shift1Command:
.89bd	b1 30		lda ($30),y			lda 	(codePtr),y
.89bf	c8		iny				iny
.89c0	0a		asl a				asl 	a
.89c1	aa		tax				tax
.89c2	7c b2 8a	jmp ($8ab2,x)			jmp 	(VectorSet1,x)
.89c5					Shift2Command:
.89c5	b1 30		lda ($30),y			lda 	(codePtr),y
.89c7	c8		iny				iny
.89c8	0a		asl a				asl 	a
.89c9	aa		tax				tax
.89ca	7c ca 8a	jmp ($8aca,x)			jmp 	(VectorSet2,x)
.89cd					Unused1:
.89cd					Unused2:
.89cd					Unused3:
.89cd					Unused4:
.89cd	4c a8 a6	jmp $a6a8			jmp 	SyntaxError
>89d0							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.89d0					VectorSetPunc:
>89d0	33 8f					.word	ShiftLeft                        ; $00 <<
>89d2	2d 8e					.word	BinaryCompareLessEqual           ; $01 <=
>89d4	23 8e					.word	BinaryCompareNotEqual            ; $02 <>
>89d6	a8 a6					.word	SyntaxError                      ; $03 !!3
>89d8	a8 a6					.word	SyntaxError                      ; $04 ><
>89da	37 8e					.word	BinaryCompareGreaterEqual        ; $05 >=
>89dc	36 8f					.word	ShiftRight                       ; $06 >>
>89de	a8 a6					.word	SyntaxError                      ; $07 !!7
>89e0	a8 a6					.word	SyntaxError                      ; $08 !!8
>89e2	a8 a6					.word	SyntaxError                      ; $09 !!9
>89e4	a8 a6					.word	SyntaxError                      ; $0a !!10
>89e6	a8 a6					.word	SyntaxError                      ; $0b !!11
>89e8	a8 a6					.word	SyntaxError                      ; $0c !!12
>89ea	a8 a6					.word	SyntaxError                      ; $0d !!13
>89ec	a8 a6					.word	SyntaxError                      ; $0e !!14
>89ee	a8 a6					.word	SyntaxError                      ; $0f !!15
>89f0	a8 a6					.word	SyntaxError                      ; $10 @
>89f2	a8 a6					.word	SyntaxError                      ; $11 !!17
>89f4	a8 a6					.word	SyntaxError                      ; $12 !!18
>89f6	a8 a6					.word	SyntaxError                      ; $13 [
>89f8	db a0					.word	IntegerDivide                    ; $14 \
>89fa	a8 a6					.word	SyntaxError                      ; $15 ]
>89fc	bc 90					.word	EorInteger                       ; $16 ^
>89fe	a8 a6					.word	SyntaxError                      ; $17 _
>8a00	a8 a6					.word	SyntaxError                      ; $18 `
>8a02	a8 a6					.word	SyntaxError                      ; $19 !!25
>8a04	a8 a6					.word	SyntaxError                      ; $1a !!26
>8a06	a8 a6					.word	SyntaxError                      ; $1b {
>8a08	76 90					.word	OraInteger                       ; $1c |
>8a0a	a8 a6					.word	SyntaxError                      ; $1d }
>8a0c	a8 a6					.word	SyntaxError                      ; $1e ~
>8a0e	a8 a6					.word	SyntaxError                      ; $1f [7m<7F>[m
>8a10	a8 a6					.word	SyntaxError                      ; $20
>8a12	02 91					.word	WordIndirect                     ; $21 !
>8a14	a8 a6					.word	SyntaxError                      ; $22 "
>8a16	a8 a6					.word	SyntaxError                      ; $23 #
>8a18	a8 a6					.word	SyntaxError                      ; $24 $
>8a1a	28 a1					.word	IntegerModulus                   ; $25 %
>8a1c	30 90					.word	AndInteger                       ; $26 &
>8a1e	a8 a6					.word	SyntaxError                      ; $27 '
>8a20	a8 a6					.word	SyntaxError                      ; $28 (
>8a22	a8 a6					.word	SyntaxError                      ; $29 )
>8a24	9d a1					.word	MulInteger                       ; $2a *
>8a26	ca 8f					.word	AddInteger                       ; $2b +
>8a28	a8 a6					.word	SyntaxError                      ; $2c ,
>8a2a	05 90					.word	SubInteger                       ; $2d -
>8a2c	a8 a6					.word	SyntaxError                      ; $2e .
>8a2e	34 a3					.word	FDivideCommand                   ; $2f /
>8a30	a8 a6					.word	SyntaxError                      ; $30 0
>8a32	a8 a6					.word	SyntaxError                      ; $31 1
>8a34	a8 a6					.word	SyntaxError                      ; $32 2
>8a36	a8 a6					.word	SyntaxError                      ; $33 3
>8a38	a8 a6					.word	SyntaxError                      ; $34 4
>8a3a	a8 a6					.word	SyntaxError                      ; $35 5
>8a3c	a8 a6					.word	SyntaxError                      ; $36 6
>8a3e	a8 a6					.word	SyntaxError                      ; $37 7
>8a40	a8 a6					.word	SyntaxError                      ; $38 8
>8a42	a8 a6					.word	SyntaxError                      ; $39 9
>8a44	a8 a6					.word	SyntaxError                      ; $3a :
>8a46	a8 a6					.word	SyntaxError                      ; $3b ;
>8a48	0f 8e					.word	BinaryCompareLess                ; $3c <
>8a4a	05 8e					.word	BinaryCompareEqual               ; $3d =
>8a4c	19 8e					.word	BinaryCompareGreater             ; $3e >
>8a4e	29 91					.word	ByteIndirect                     ; $3f ?
.8a50					VectorSet0:
>8a50	b0 89					.word	EOLCommand                       ; $80 !0:EOF
>8a52	bd 89					.word	Shift1Command                    ; $81 !1:SH1
>8a54	c5 89					.word	Shift2Command                    ; $82 !2:SH2
>8a56	7a a4					.word	AbsUnary                         ; $83 ABS(
>8a58	f3 95					.word	AllocUnary                       ; $84 ALLOC(
>8a5a	8a a4					.word	AscUnary                         ; $85 ASC(
>8a5c	13 97					.word	ChrUnary                         ; $86 CHR$(
>8a5e	01 8e					.word	UnaryFalse                       ; $87 FALSE
>8a60	97 a4					.word	FracUnary                        ; $88 FRAC(
>8a62	ad a4					.word	IntUnary                         ; $89 INT(
>8a64	03 a5					.word	IsValUnary                       ; $8a ISVAL(
>8a66	ed 97					.word	Unary_Left                       ; $8b LEFT$(
>8a68	bf a4					.word	LenUnary                         ; $8c LEN(
>8a6a	17 98					.word	Unary_Mid                        ; $8d MID$(
>8a6c	63 96					.word	Unary_Not                        ; $8e NOT(
>8a6e	79 96					.word	Unary_Random                     ; $8f RANDOM(
>8a70	fd 97					.word	Unary_Right                      ; $90 RIGHT$(
>8a72	92 96					.word	Unary_Rnd                        ; $91 RND(
>8a74	d9 a4					.word	SgnUnary                         ; $92 SGN(
>8a76	25 97					.word	SpcUnary                         ; $93 SPC(
>8a78	40 97					.word	Unary_Str                        ; $94 STR$(
>8a7a	f5 8d					.word	UnaryTrue                        ; $95 TRUE
>8a7c	f9 a4					.word	ValUnary                         ; $96 VAL(
>8a7e	da 84					.word	ForCommand                       ; $97 FOR
>8a80	27 86					.word	IfCommand                        ; $98 IF
>8a82	cd 89					.word	Unused1                          ; $99 PROC
>8a84	ec 88					.word	Command_REPEAT                   ; $9a REPEAT
>8a86	5a 8d					.word	Command_WHILE                    ; $9b WHILE
>8a88	50 86					.word	EndIf                            ; $9c ENDIF
>8a8a	b4 a0					.word	Command_ENDPROC                  ; $9d ENDPROC
>8a8c	94 85					.word	NextCommand                      ; $9e NEXT
>8a8e	cd 89					.word	Unused4                          ; $9f THEN
>8a90	f5 88					.word	Command_UNTIL                    ; $a0 UNTIL
>8a92	7b 8d					.word	Command_WEND                     ; $a1 WEND
>8a94	80 83					.word	CallCommand                      ; $a2 CALL
>8a96	a8 a6					.word	SyntaxError                      ; $a3 CLS
>8a98	12 84					.word	Command_Data                     ; $a4 DATA
>8a9a	1a 84					.word	DimCommand                       ; $a5 DIM
>8a9c	cd 89					.word	Unused3                          ; $a6 DOWNTO
>8a9e	49 86					.word	ElseCode                         ; $a7 ELSE
>8aa0	ed 85					.word	Command_GOSUB                    ; $a8 GOSUB
>8aa2	0b 86					.word	GotoCommand                      ; $a9 GOTO
>8aa4	51 86					.word	LetCommand                       ; $aa LET
>8aa6	41 87					.word	Command_LOCAL                    ; $ab LOCAL
>8aa8	cf 87					.word	Command_Print                    ; $ac PRINT
>8aaa	86 88					.word	Command_Read                     ; $ad READ
>8aac	df 88					.word	RemCommand                       ; $ae REM
>8aae	fd 85					.word	Command_RETURN                   ; $af RETURN
>8ab0	cd 89					.word	Unused2                          ; $b0 TO
.8ab2					VectorSet1:
>8ab2	a8 a6					.word	SyntaxError                      ; $80 !0:EOF
>8ab4	a8 a6					.word	SyntaxError                      ; $81 !1:SH1
>8ab6	a8 a6					.word	SyntaxError                      ; $82 !2:SH2
>8ab8	51 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8aba	70 83					.word	AssertCommand                    ; $84 ASSERT
>8abc	ba 83					.word	ClearCommand                     ; $85 CLEAR
>8abe	d7 84					.word	EndCommand                       ; $86 END
>8ac0	a6 86					.word	Command_List                     ; $87 LIST
>8ac2	c5 87					.word	NewCommand                       ; $88 NEW
>8ac4	0e 89					.word	Command_Restore                  ; $89 RESTORE
>8ac6	40 89					.word	CommandRUN                       ; $8a RUN
>8ac8	52 8b					.word	StopCommand                      ; $8b STOP
.8aca					VectorSet2:
>8aca	a8 a6					.word	SyntaxError                      ; $80 !0:EOF
>8acc	a8 a6					.word	SyntaxError                      ; $81 !1:SH1
>8ace	a8 a6					.word	SyntaxError                      ; $82 !2:SH2
>8ad0	67 a5					.word	Assemble_adc                     ; $83 ADC
>8ad2	5f a5					.word	Assemble_and                     ; $84 AND
>8ad4	7b a5					.word	Assemble_asl                     ; $85 ASL
>8ad6	e5 a5					.word	Assemble_bcc                     ; $86 BCC
>8ad8	e9 a5					.word	Assemble_bcs                     ; $87 BCS
>8ada	f1 a5					.word	Assemble_beq                     ; $88 BEQ
>8adc	a8 a5					.word	Assemble_bit                     ; $89 BIT
>8ade	d9 a5					.word	Assemble_bmi                     ; $8a BMI
>8ae0	ed a5					.word	Assemble_bne                     ; $8b BNE
>8ae2	d5 a5					.word	Assemble_bpl                     ; $8c BPL
>8ae4	f5 a5					.word	Assemble_bra                     ; $8d BRA
>8ae6	f9 a5					.word	Assemble_brk                     ; $8e BRK
>8ae8	dd a5					.word	Assemble_bvc                     ; $8f BVC
>8aea	e1 a5					.word	Assemble_bvs                     ; $90 BVS
>8aec	01 a6					.word	Assemble_clc                     ; $91 CLC
>8aee	55 a6					.word	Assemble_cld                     ; $92 CLD
>8af0	15 a6					.word	Assemble_cli                     ; $93 CLI
>8af2	45 a6					.word	Assemble_clv                     ; $94 CLV
>8af4	73 a5					.word	Assemble_cmp                     ; $95 CMP
>8af6	bc a5					.word	Assemble_cpx                     ; $96 CPX
>8af8	b7 a5					.word	Assemble_cpy                     ; $97 CPY
>8afa	99 a5					.word	Assemble_dec                     ; $98 DEC
>8afc	51 a6					.word	Assemble_dex                     ; $99 DEX
>8afe	2d a6					.word	Assemble_dey                     ; $9a DEY
>8b00	63 a5					.word	Assemble_eor                     ; $9b EOR
>8b02	9e a5					.word	Assemble_inc                     ; $9c INC
>8b04	61 a6					.word	Assemble_inx                     ; $9d INX
>8b06	4d a6					.word	Assemble_iny                     ; $9e INY
>8b08	d0 a5					.word	Assemble_jmp                     ; $9f JMP
>8b0a	cb a5					.word	Assemble_jsr                     ; $a0 JSR
>8b0c	6f a5					.word	Assemble_lda                     ; $a1 LDA
>8b0e	94 a5					.word	Assemble_ldx                     ; $a2 LDX
>8b10	b2 a5					.word	Assemble_ldy                     ; $a3 LDY
>8b12	85 a5					.word	Assemble_lsr                     ; $a4 LSR
>8b14	65 a6					.word	Assemble_nop                     ; $a5 NOP
>8b16	5b a5					.word	Assemble_ora                     ; $a6 ORA
>8b18	11 a6					.word	Assemble_pha                     ; $a7 PHA
>8b1a	fd a5					.word	Assemble_php                     ; $a8 PHP
>8b1c	59 a6					.word	Assemble_phx                     ; $a9 PHX
>8b1e	19 a6					.word	Assemble_phy                     ; $aa PHY
>8b20	21 a6					.word	Assemble_pla                     ; $ab PLA
>8b22	05 a6					.word	Assemble_plp                     ; $ac PLP
>8b24	6d a6					.word	Assemble_plx                     ; $ad PLX
>8b26	29 a6					.word	Assemble_ply                     ; $ae PLY
>8b28	80 a5					.word	Assemble_rol                     ; $af ROL
>8b2a	8a a5					.word	Assemble_ror                     ; $b0 ROR
>8b2c	0d a6					.word	Assemble_rti                     ; $b1 RTI
>8b2e	1d a6					.word	Assemble_rts                     ; $b2 RTS
>8b30	77 a5					.word	Assemble_sbc                     ; $b3 SBC
>8b32	09 a6					.word	Assemble_sec                     ; $b4 SEC
>8b34	69 a6					.word	Assemble_sed                     ; $b5 SED
>8b36	25 a6					.word	Assemble_sei                     ; $b6 SEI
>8b38	6b a5					.word	Assemble_sta                     ; $b7 STA
>8b3a	5d a6					.word	Assemble_stp                     ; $b8 STP
>8b3c	8f a5					.word	Assemble_stx                     ; $b9 STX
>8b3e	ad a5					.word	Assemble_sty                     ; $ba STY
>8b40	a3 a5					.word	Assemble_stz                     ; $bb STZ
>8b42	41 a6					.word	Assemble_tax                     ; $bc TAX
>8b44	3d a6					.word	Assemble_tay                     ; $bd TAY
>8b46	c6 a5					.word	Assemble_trb                     ; $be TRB
>8b48	c1 a5					.word	Assemble_tsb                     ; $bf TSB
>8b4a	49 a6					.word	Assemble_tsx                     ; $c0 TSX
>8b4c	31 a6					.word	Assemble_txa                     ; $c1 TXA
>8b4e	39 a6					.word	Assemble_txs                     ; $c2 TXS
>8b50	35 a6					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8b52					StopCommand:
.8b52	a9 08		lda #$08		lda	#8
.8b54	4c 89 8d	jmp $8d89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8b57					ListConvertLine:
.8b57	9c 1d 07	stz $071d			stz 	tbOffset
.8b5a	9c 29 07	stz $0729			stz 	tokenBuffer
.8b5d	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8b5f	b1 30		lda ($30),y			lda 	(codePtr),y
.8b61	aa		tax				tax
.8b62	88		dey				dey
.8b63	b1 30		lda ($30),y			lda 	(codePtr),y
.8b65	20 1e a2	jsr $a21e			jsr 	ConvertInt16
.8b68	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8b6a	86 37		stx $37				stx 	zTemp0+1
.8b6c	a0 00		ldy #$00			ldy 	#0
.8b6e					_LCCopyNumber:
.8b6e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b70	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8b73	c8		iny				iny
.8b74	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b76	d0 f6		bne $8b6e			bne 	_LCCopyNumber
.8b78					_LCPadOut:
.8b78	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8b7a	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8b7d	ad 1d 07	lda $071d			lda 	tbOffset
.8b80	c9 06		cmp #$06			cmp 	#6
.8b82	d0 f4		bne $8b78			bne 	_LCPadOut
.8b84	a0 03		ldy #$03			ldy 	#3 							; start position.
.8b86					_LCMainLoop:
.8b86	b1 30		lda ($30),y			lda 	(codePtr),y
.8b88	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8b8a	f0 17		beq $8ba3			beq 	_LCExit
.8b8c	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8b8e	90 14		bcc $8ba4			bcc 	_LCDoubles
.8b90	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8b92	90 20		bcc $8bb4			bcc 	_LCShiftPunc
.8b94	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8b96	90 2b		bcc $8bc3			bcc 	_LCPunctuation
.8b98	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8b9a	90 2d		bcc $8bc9			bcc 	_LCIdentifiers
.8b9c	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8b9e	90 49		bcc $8be9			bcc 	_LCTokens
.8ba0	4c 44 8c	jmp $8c44			jmp 	_LCData 					; 254-5 are data objects
.8ba3					_LCExit:
.8ba3	60		rts				rts
.8ba4					_LCDoubles:
.8ba4	48		pha				pha
.8ba5	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8ba6	29 02		and #$02			and 	#2
.8ba8	09 3c		ora #$3c			ora 	#60 						; make < >
.8baa	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8bad	68		pla				pla 								; restore, do lower bit
.8bae	29 03		and #$03			and 	#3
.8bb0	09 3c		ora #$3c			ora 	#60
.8bb2	80 0f		bra $8bc3			bra		_LCPunctuation 				; print, increment, loop
.8bb4					_LCShiftPunc:
.8bb4	aa		tax				tax 								; save in X
.8bb5	29 07		and #$07			and 	#7 							; lower 3 bits
.8bb7	f0 02		beq $8bbb			beq 	_LCNoAdd
.8bb9	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8bbb					_LCNoAdd:
.8bbb	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8bbd	90 02		bcc $8bc1			bcc 	_LCNoAdd2
.8bbf	09 20		ora #$20			ora 	#32 						; adds $20
.8bc1					_LCNoAdd2:
.8bc1	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8bc3					_LCPunctuation:
.8bc3	c8		iny				iny 								; consume character
.8bc4	20 70 8c	jsr $8c70			jsr 	LCLWrite 					; write it out.
.8bc7	80 bd		bra $8b86			bra 	_LCMainLoop 				; go round again.
.8bc9					_LCIdentifiers:
.8bc9	18		clc				clc 								; convert to physical address
.8bca	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8bcc	85 37		sta $37				sta 	zTemp0+1
.8bce	c8		iny				iny
.8bcf	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd1	85 36		sta $36				sta 	zTemp0
.8bd3	c8		iny				iny
.8bd4	5a		phy				phy 								; save position
.8bd5	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8bd7					_LCOutIdentifier:
.8bd7	c8		iny				iny
.8bd8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bda	29 7f		and #$7f			and 	#$7F
.8bdc	20 9e 8c	jsr $8c9e			jsr 	LCLLowerCase
.8bdf	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8be2	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8be4	10 f1		bpl $8bd7			bpl 	_LCOutIdentifier
.8be6	7a		ply				ply 								; restore position
.8be7	80 9d		bra $8b86			bra 	_LCMainLoop
.8be9					_LCTokens:
.8be9	aa		tax				tax 								; token in X
.8bea	a9 6e		lda #$6e			lda 	#((KeywordSet2) & $FF)
.8bec	85 36		sta $36				sta 	0+zTemp0
.8bee	a9 9c		lda #$9c			lda 	#((KeywordSet2) >> 8)
.8bf0	85 37		sta $37				sta 	1+zTemp0
.8bf2	e0 82		cpx #$82			cpx 	#$82
.8bf4	f0 16		beq $8c0c			beq 	_LCUseShift
.8bf6	a9 2a		lda #$2a			lda 	#((KeywordSet1) & $FF)
.8bf8	85 36		sta $36				sta 	0+zTemp0
.8bfa	a9 9c		lda #$9c			lda 	#((KeywordSet1) >> 8)
.8bfc	85 37		sta $37				sta 	1+zTemp0
.8bfe	e0 81		cpx #$81			cpx 	#$81
.8c00	f0 0a		beq $8c0c			beq 	_LCUseShift
.8c02	a9 f8		lda #$f8			lda 	#((KeywordSet0) & $FF)
.8c04	85 36		sta $36				sta 	0+zTemp0
.8c06	a9 9a		lda #$9a			lda 	#((KeywordSet0) >> 8)
.8c08	85 37		sta $37				sta 	1+zTemp0
.8c0a	80 01		bra $8c0d			bra 	_LCNoShift
.8c0c					_LCUseShift:
.8c0c	c8		iny				iny
.8c0d					_LCNoShift:
.8c0d	20 7f 8c	jsr $8c7f			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8c10	b1 30		lda ($30),y			lda 	(codePtr),y
.8c12	aa		tax				tax 								; into X
.8c13					_LCFindText:
.8c13	ca		dex				dex
.8c14	10 0e		bpl $8c24			bpl 	_LCFoundText 				; found text.
.8c16	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8c18	1a		inc a				inc 	a 							; one extra for size
.8c19	38		sec				sec 								; one extra for checksum
.8c1a	65 36		adc $36				adc 	zTemp0 						; go to next token
.8c1c	85 36		sta $36				sta 	zTemp0
.8c1e	90 f3		bcc $8c13			bcc 	_LCFindText
.8c20	e6 37		inc $37				inc 	zTemp0+1
.8c22	80 ef		bra $8c13			bra 	_LCFindText
.8c24					_LCFoundText:
.8c24	5a		phy				phy 								; save List position
.8c25	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8c27	aa		tax				tax
.8c28	a0 02		ldy #$02			ldy 	#2
.8c2a					_LCCopyToken:
.8c2a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c2c	20 9e 8c	jsr $8c9e			jsr 	LCLLowerCase
.8c2f	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8c32	c8		iny				iny
.8c33	ca		dex				dex
.8c34	d0 f4		bne $8c2a			bne 	_LCCopyToken
.8c36	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8c38	f0 05		beq $8c3f			beq 	_LCNoSpace
.8c3a	a9 20		lda #$20			lda 	#' '
.8c3c	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8c3f					_LCNoSpace:
.8c3f	7a		ply				ply 								; restore position.
.8c40	c8		iny				iny 								; consume token
.8c41	4c 86 8b	jmp $8b86			jmp 	_LCMainLoop 				; and go around again.
.8c44					_LCData:
.8c44	48		pha				pha 								; save type $FE/$FF
.8c45	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8c47	c9 fe		cmp #$fe			cmp 	#$FE
.8c49	f0 02		beq $8c4d			beq 	_LCHaveOpener
.8c4b	a2 22		ldx #$22			ldx 	#'"'
.8c4d					_LCHaveOpener:
.8c4d	8a		txa				txa 								; output prefix (# or ")
.8c4e	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8c51	c8		iny				iny 								; get count
.8c52	b1 30		lda ($30),y			lda 	(codePtr),y
.8c54	aa		tax				tax
.8c55	c8		iny				iny 								; point at first character
.8c56					_LCOutData:
.8c56	b1 30		lda ($30),y			lda 	(codePtr),y
.8c58	c9 00		cmp #$00			cmp 	#0
.8c5a	f0 03		beq $8c5f			beq 	_LCNoPrint
.8c5c	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8c5f					_LCNoPrint:
.8c5f	c8		iny				iny
.8c60	ca		dex				dex
.8c61	d0 f3		bne $8c56			bne 	_LCOutData
.8c63	68		pla				pla 								; closing " required ?
.8c64	c9 ff		cmp #$ff			cmp 	#$FF
.8c66	d0 05		bne $8c6d			bne 	_LCNoQuote
.8c68	a9 22		lda #$22			lda 	#'"'
.8c6a	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8c6d					_LCNoQuote:
.8c6d	4c 86 8b	jmp $8b86			jmp 	_LCMainLoop
.8c70					LCLWrite:
.8c70	da		phx				phx
.8c71	ae 1d 07	ldx $071d			ldx 	tbOffset
.8c74	9d 29 07	sta $0729,x			sta 	tokenBuffer,x
.8c77	9e 2a 07	stz $072a,x			stz 	tokenBuffer+1,x
.8c7a	ee 1d 07	inc $071d			inc 	tbOffset
.8c7d	fa		plx				plx
.8c7e	60		rts				rts
.8c7f					LCCheckSpaceRequired:
.8c7f	ae 1d 07	ldx $071d			ldx 	tbOffset
.8c82	bd 28 07	lda $0728,x			lda 	tokenBuffer-1,x 			; previous character
.8c85	20 9e 8c	jsr $8c9e			jsr 	LCLLowerCase 				; saves a little effort
.8c88	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8c8a	90 11		bcc $8c9d			bcc 	_LCCSRExit
.8c8c	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c8e	90 08		bcc $8c98			bcc 	_LCCSRSpace
.8c90	c9 61		cmp #$61			cmp 	#"a"
.8c92	90 09		bcc $8c9d			bcc 	_LCCSRExit
.8c94	c9 7b		cmp #$7b			cmp 	#"z"+1
.8c96	b0 05		bcs $8c9d			bcs 	_LCCSRExit
.8c98					_LCCSRSpace:
.8c98	a9 20		lda #$20			lda 	#' '
.8c9a	20 70 8c	jsr $8c70			jsr 	LCLWrite
.8c9d					_LCCSRExit:
.8c9d	60		rts				rts
.8c9e					LCLLowerCase:
.8c9e	c9 41		cmp #$41			cmp 	#"A"
.8ca0	90 06		bcc $8ca8			bcc 	_LCLLCOut
.8ca2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8ca4	b0 02		bcs $8ca8			bcs 	_LCLLCOut
.8ca6	69 20		adc #$20			adc 	#$20
.8ca8					_LCLLCOut:
.8ca8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8ca9					ProcedureScan:
.8ca9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cab	85 30		sta $30				sta 	codePtr
.8cad	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8caf	85 31		sta $31				sta 	codePtr+1
.8cb1					_PSLoop:
.8cb1	b2 30		lda ($30)			lda 	(codePtr)
.8cb3	f0 42		beq $8cf7			beq 	_PSExit
.8cb5	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8cb7	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb9	c9 99		cmp #$99			cmp 	#KWD_PROC
.8cbb	d0 2d		bne $8cea			bne 	_PSNext
.8cbd	c8		iny				iny 								; get the address of the record to zTemp0 and
.8cbe	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc0	29 c0		and #$c0			and 	#$C0
.8cc2	c9 40		cmp #$40			cmp 	#$40
.8cc4	d0 32		bne $8cf8			bne 	_PSSyntax
.8cc6	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc8	18		clc				clc
.8cc9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8ccb	85 37		sta $37				sta 	zTemp0+1
.8ccd	c8		iny				iny 								; LSB
.8cce	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd0	85 36		sta $36				sta 	zTemp0
.8cd2	c8		iny				iny 								; character after variable call.
.8cd3	98		tya				tya 								; save Y offset at +7
.8cd4	a0 07		ldy #$07			ldy 	#7
.8cd6	91 36		sta ($36),y			sta 	(zTemp0),y
.8cd8	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8cda	a0 02		ldy #$02			ldy 	#2
.8cdc	91 36		sta ($36),y			sta 	(zTemp0),y
.8cde	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8ce0					_PSCopy:
.8ce0	b5 30		lda $30,x			lda 	safePtr,x
.8ce2	c8		iny				iny
.8ce3	91 36		sta ($36),y			sta 	(zTemp0),y
.8ce5	e8		inx				inx
.8ce6	e0 04		cpx #$04			cpx 	#4
.8ce8	d0 f6		bne $8ce0			bne 	_PSCopy
.8cea					_PSNext:
.8cea	18		clc				clc
.8ceb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ced	65 30		adc $30				adc 	codePtr
.8cef	85 30		sta $30				sta 	codePtr
.8cf1	90 02		bcc $8cf5			bcc 	_CREExit
.8cf3	e6 31		inc $31				inc 	codePtr+1
.8cf5					_CREExit:
.8cf5	80 ba		bra $8cb1			bra 	_PSLoop
.8cf7					_PSExit:
.8cf7	60		rts				rts
.8cf8					_PSSyntax:
.8cf8	4c a8 a6	jmp $a6a8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8cfb					ScanForward:
.8cfb	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8cfd	86 37		stx $37				stx 	zTemp0+1
.8cff	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8d01					_ScanLoop:
.8d01	b1 30		lda ($30),y			lda 	(codePtr),y
.8d03	c8		iny				iny
.8d04	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8d06	d0 0e		bne $8d16			bne 	_ScanGoNext
.8d08	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8d0a	f0 04		beq $8d10			beq 	_ScanMatch
.8d0c	c5 37		cmp $37				cmp 	zTemp0+1
.8d0e	d0 06		bne $8d16			bne 	_ScanGoNext
.8d10					_ScanMatch:
.8d10	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8d12	d0 01		bne $8d15			bne 	_ScanNotEndEOL
.8d14	88		dey				dey
.8d15					_ScanNotEndEOL:
.8d15	60		rts				rts
.8d16					_ScanGoNext:
.8d16	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8d18	90 e7		bcc $8d01			bcc 	_ScanLoop
.8d1a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8d1c	90 18		bcc $8d36			bcc 	_ScanSkipOne
.8d1e	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8d20	b0 2f		bcs $8d51			bcs 	_ScanSkipData
.8d22	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8d24	90 db		bcc $8d01			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8d26	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8d28	b0 d7		bcs $8d01			bcs 	_ScanLoop
.8d2a	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8d2c	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8d2e	b0 d1		bcs $8d01			bcs 	_ScanLoop
.8d30	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8d32	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8d34	80 cb		bra $8d01			bra 	_ScanLoop
.8d36					_ScanSkipOne:
.8d36	c8		iny				iny 								; consume the extra one.
.8d37	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8d39	d0 c6		bne $8d01			bne 	_ScanLoop
.8d3b	18		clc				clc
.8d3c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d3e	65 30		adc $30				adc 	codePtr
.8d40	85 30		sta $30				sta 	codePtr
.8d42	90 02		bcc $8d46			bcc 	_CREExit
.8d44	e6 31		inc $31				inc 	codePtr+1
.8d46					_CREExit:
.8d46	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8d48	b2 30		lda ($30)			lda 	(codePtr)
.8d4a	d0 b5		bne $8d01			bne 	_ScanLoop 					; if not zero, more to scan
.8d4c	a9 13		lda #$13		lda	#19
.8d4e	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.8d51					_ScanSkipData:
.8d51	88		dey				dey 								; point at data token
.8d52	c8		iny				iny
.8d53	98		tya				tya
.8d54	38		sec				sec
.8d55	71 30		adc ($30),y			adc 	(codePtr),y
.8d57	a8		tay				tay
.8d58	80 a7		bra $8d01			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8d5a					Command_WHILE:
.8d5a	5a		phy				phy 								; save position of the test
.8d5b	a2 00		ldx #$00			ldx 	#0
.8d5d	20 95 98	jsr $9895			jsr 	EvaluateNumber 				; work out the number
.8d60	20 71 99	jsr $9971			jsr 	NSMIsZero 					; check if zero
.8d63	f0 0e		beq $8d73			beq 	_WHExitLoop 				; if so exit the loop
.8d65	98		tya				tya 								; position *after* test.
.8d66	7a		ply				ply 								; restore position before test, at WHILE
.8d67	88		dey				dey
.8d68	48		pha				pha 								; push after test on the stack
.8d69	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8d6b	20 f5 99	jsr $99f5			jsr 	StackOpen
.8d6e	20 39 9a	jsr $9a39			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d71	7a		ply				ply 								; restore the position *after* the test
.8d72	60		rts				rts
.8d73					_WHExitLoop:
.8d73	68		pla				pla 								; throw post loop position
.8d74	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.8d76	aa		tax				tax
.8d77	20 fb 8c	jsr $8cfb			jsr 	ScanForward
.8d7a	60		rts				rts
.8d7b					Command_WEND:
.8d7b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d7d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d7f	20 21 9a	jsr $9a21			jsr 	StackCheckFrame
.8d82	20 4a 9a	jsr $9a4a			jsr 	STKLoadCodePosition 		; loop back
.8d85	20 13 9a	jsr $9a13			jsr 	StackClose		 			; erase the frame
.8d88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a0c2					CheckRightBracket:
.a0c2	b1 30		lda ($30),y			lda 	(codePtr),y
.a0c4	c8		iny				iny
.a0c5	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a0c7	d0 0f		bne $a0d8			bne 	CNAFail
.a0c9	60		rts				rts
.a0ca					CheckComma:
.a0ca	b1 30		lda ($30),y			lda 	(codePtr),y
.a0cc	c8		iny				iny
.a0cd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a0cf	d0 07		bne $a0d8			bne 	CNAFail
.a0d1	60		rts				rts
.a0d2					CheckNextA:
.a0d2	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a0d4	d0 02		bne $a0d8			bne 	CNAFail
.a0d6	c8		iny				iny 								; skip character
.a0d7	60		rts				rts 								; and exit
.a0d8					CNAFail:
.a0d8	4c a8 a6	jmp $a6a8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d89					ErrorHandler:
.8d89	a8		tay				tay 								; find the error text
.8d8a	f0 49		beq $8dd5			beq 	_EHEnd
.8d8c	a2 00		ldx #$00			ldx 	#0
.8d8e	a9 c1		lda #$c1			lda 	#((ErrorText) & $FF)
.8d90	85 36		sta $36				sta 	0+zTemp0
.8d92	a9 a6		lda #$a6			lda 	#((ErrorText) >> 8)
.8d94	85 37		sta $37				sta 	1+zTemp0
.8d96					_EHFind:
.8d96	88		dey				dey 								; found the error text ?
.8d97	f0 0e		beq $8da7			beq 	_EHFound
.8d99					_EHFindZero:
.8d99	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d9b	e6 36		inc $36				inc 	zTemp0
.8d9d	d0 02		bne $8da1			bne 	_EHFNoCarry
.8d9f	e6 37		inc $37				inc 	zTemp0+1
.8da1					_EHFNoCarry:
.8da1	c9 00		cmp #$00			cmp 	#0
.8da3	d0 f4		bne $8d99			bne 	_EHFindZero
.8da5	80 ef		bra $8d96			bra 	_EHFind
.8da7					_EHFound:
.8da7	a5 36		lda $36				lda 	zTemp0 						; print message
.8da9	a6 37		ldx $37				ldx 	zTemp0+1
.8dab	20 e2 8d	jsr $8de2			jsr 	PrintStringXA
.8dae	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8db0	b1 30		lda ($30),y			lda 	(codePtr),y
.8db2	d0 05		bne $8db9			bne 	_EHAtMsg
.8db4	c8		iny				iny
.8db5	b1 30		lda ($30),y			lda 	(codePtr),y
.8db7	f0 17		beq $8dd0			beq 	_EHCREnd
.8db9					_EHAtMsg:
.8db9	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8dbb	a9 d8		lda #$d8			lda 	#_AtMsg & $FF
.8dbd	20 e2 8d	jsr $8de2			jsr 	PrintStringXA
.8dc0	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8dc2	b1 30		lda ($30),y			lda 	(codePtr),y
.8dc4	48		pha				pha
.8dc5	c8		iny				iny
.8dc6	b1 30		lda ($30),y			lda 	(codePtr),y
.8dc8	aa		tax				tax
.8dc9	68		pla				pla
.8dca	20 1e a2	jsr $a21e			jsr 	ConvertInt16 				; convert XA to string
.8dcd	20 e2 8d	jsr $8de2			jsr 	PrintStringXA 				; and print it.
.8dd0					_EHCREnd:
.8dd0	a9 0d		lda #$0d			lda 	#13 						; new line
.8dd2	20 4d a8	jsr $a84d			jsr 	EXTPrintCharacter
.8dd5					_EHEnd:
.8dd5	4c 21 83	jmp $8321			jmp 	WarmStart
>8dd8	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8de0	20 00
.8de2					PrintStringXA:
.8de2	5a		phy				phy
.8de3	86 37		stx $37				stx 	zTemp0+1
.8de5	85 36		sta $36				sta 	zTemp0
.8de7	a0 00		ldy #$00			ldy 	#0
.8de9					_PSXALoop:
.8de9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8deb	f0 06		beq $8df3			beq 	_PSXAExit
.8ded	20 4d a8	jsr $a84d			jsr 	EXTPrintCharacter
.8df0	c8		iny				iny
.8df1	80 f6		bra $8de9			bra 	_PSXALoop
.8df3					_PSXAExit:
.8df3	7a		ply				ply
.8df4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8df5					UnaryTrue:
.8df5	fa		plx				plx
.8df6					ReturnTrue:
.8df6	a9 01		lda #$01			lda 	#1  						; set to 1
.8df8	20 43 99	jsr $9943			jsr 	NSMSetByte
.8dfb	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8dfd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e00	60		rts				rts
.8e01					UnaryFalse:
.8e01	fa		plx				plx
.8e02					ReturnFalse:
.8e02	4c 41 99	jmp $9941			jmp 	NSMSetZero 					; set it all to zero
.8e05					BinaryCompareEqual:
.8e05	fa		plx				plx
.8e06	20 41 8e	jsr $8e41			jsr 	CompareBaseCode
.8e09	c9 00		cmp #$00			cmp 	#0
.8e0b	f0 e9		beq $8df6			beq 	ReturnTrue
.8e0d	80 f3		bra $8e02			bra 	ReturnFalse
.8e0f					BinaryCompareLess:
.8e0f	fa		plx				plx
.8e10	20 41 8e	jsr $8e41			jsr 	CompareBaseCode
.8e13	c9 ff		cmp #$ff			cmp 	#$FF
.8e15	f0 df		beq $8df6			beq 	ReturnTrue
.8e17	80 e9		bra $8e02			bra 	ReturnFalse
.8e19					BinaryCompareGreater:
.8e19	fa		plx				plx
.8e1a	20 41 8e	jsr $8e41			jsr 	CompareBaseCode
.8e1d	c9 01		cmp #$01			cmp 	#1
.8e1f	f0 d5		beq $8df6			beq 	ReturnTrue
.8e21	80 df		bra $8e02			bra 	ReturnFalse
.8e23					BinaryCompareNotEqual:
.8e23	fa		plx				plx
.8e24	20 41 8e	jsr $8e41			jsr 	CompareBaseCode
.8e27	c9 00		cmp #$00			cmp 	#0
.8e29	d0 cb		bne $8df6			bne 	ReturnTrue
.8e2b	80 d5		bra $8e02			bra 	ReturnFalse
.8e2d					BinaryCompareLessEqual:
.8e2d	fa		plx				plx
.8e2e	20 41 8e	jsr $8e41			jsr 	CompareBaseCode
.8e31	c9 01		cmp #$01			cmp 	#1
.8e33	d0 c1		bne $8df6			bne 	ReturnTrue
.8e35	80 cb		bra $8e02			bra 	ReturnFalse
.8e37					BinaryCompareGreaterEqual:
.8e37	fa		plx				plx
.8e38	20 41 8e	jsr $8e41			jsr 	CompareBaseCode
.8e3b	c9 ff		cmp #$ff			cmp 	#$FF
.8e3d	d0 b7		bne $8df6			bne 	ReturnTrue
.8e3f	80 c1		bra $8e02			bra 	ReturnFalse
.8e41					CompareBaseCode:
.8e41	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; make both values if references.
.8e44	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8e47	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e4a	29 10		and #$10			and 	#NSTString
.8e4c	d0 40		bne $8e8e			bne 	_CBCString
.8e4e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8e51	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e54	d0 3b		bne $8e91			bne 	_CBCFloat
.8e56	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e59	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e5c	29 08		and #$08			and 	#NSTFloat
.8e5e	d0 31		bne $8e91			bne 	_CBCFloat
.8e60	20 94 8e	jsr $8e94			jsr 	CompareFixMinusZero
.8e63	e8		inx				inx
.8e64	20 94 8e	jsr $8e94			jsr 	CompareFixMinusZero
.8e67	ca		dex				dex
.8e68	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8e6b	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e6e	10 0b		bpl $8e7b			bpl 	_CDCSameSign
.8e70	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8e73	30 16		bmi $8e8b			bmi 	_CBCLess 					; return $FF
.8e75					_CBCGreater:
.8e75	a9 01		lda #$01			lda 	#1
.8e77	60		rts				rts
.8e78					_CBCEqual:
.8e78	a9 00		lda #$00			lda 	#0
.8e7a	60		rts				rts
.8e7b					_CDCSameSign:
.8e7b	20 a4 8f	jsr $8fa4			jsr 	SubTopTwoStack 				; unsigned subtract
.8e7e	20 71 99	jsr $9971			jsr 	NSMIsZero 					; or the mantissa together
.8e81	f0 f5		beq $8e78			beq 	_CBCEqual 					; -0 == 0
.8e83	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e86	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e89	10 ea		bpl $8e75			bpl 	_CBCGreater
.8e8b					_CBCLess:
.8e8b	a9 ff		lda #$ff			lda 	#$FF
.8e8d	60		rts				rts
.8e8e					_CBCString:
.8e8e	4c fa 8e	jmp $8efa			jmp 	CompareStrings
.8e91					_CBCFloat:
.8e91	4c 1a a3	jmp $a31a			jmp 	CompareFloat
.8e94					CompareFixMinusZero:
.8e94	20 71 99	jsr $9971			jsr 	NSMIsZero
.8e97	d0 03		bne $8e9c			bne 	_CFXMZNotZero
.8e99	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e9c					_CFXMZNotZero:
.8e9c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e9d					StringConcat:
.8e9d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8ea0	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8ea3	29 18		and #$18			and 	#NSBTypeMask
.8ea5	c9 10		cmp #$10			cmp 	#NSTString
.8ea7	d0 4e		bne $8ef7			bne		_SCType
.8ea9	64 38		stz $38				stz 	zTemp1 						; counting total length
.8eab	e8		inx				inx
.8eac	20 ca 8e	jsr $8eca			jsr 	_SCSetupZ0 					; setup for second
.8eaf	20 d5 8e	jsr $8ed5			jsr 	_SCLengthZ0 				; length for second
.8eb2	ca		dex				dex
.8eb3	20 ca 8e	jsr $8eca			jsr 	_SCSetupZ0 					; setup for first
.8eb6	20 d5 8e	jsr $8ed5			jsr 	_SCLengthZ0 				; length for first
.8eb9	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8ebb	20 cf a9	jsr $a9cf			jsr 	StringTempAllocate
.8ebe	20 e8 8e	jsr $8ee8			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8ec1	e8		inx				inx
.8ec2	20 ca 8e	jsr $8eca			jsr 	_SCSetupZ0 					; copy second out
.8ec5	20 e8 8e	jsr $8ee8			jsr 	_SCCopy
.8ec8	ca		dex				dex
.8ec9	60		rts				rts
.8eca					_SCSetupZ0:
.8eca	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ecd	85 36		sta $36				sta 	zTemp0
.8ecf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ed2	85 37		sta $37				sta 	zTemp0+1
.8ed4	60		rts				rts
.8ed5					_SCLengthZ0:
.8ed5	5a		phy				phy
.8ed6	a0 00		ldy #$00			ldy 	#0
.8ed8					_SCLenLoop:
.8ed8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eda	f0 0a		beq $8ee6			beq 	_SCLExit
.8edc	c8		iny				iny
.8edd	e6 38		inc $38				inc 	zTemp1
.8edf	10 f7		bpl $8ed8			bpl		_SCLenLoop
.8ee1	a9 09		lda #$09		lda	#9
.8ee3	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.8ee6					_SCLExit:
.8ee6	7a		ply				ply
.8ee7	60		rts				rts
.8ee8					_SCCopy:
.8ee8	5a		phy				phy
.8ee9	a0 00		ldy #$00			ldy 	#0
.8eeb					_SCCopyLoop:
.8eeb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eed	f0 06		beq $8ef5			beq 	_SCCExit
.8eef	20 0d aa	jsr $aa0d			jsr 	StringTempWrite
.8ef2	c8		iny				iny
.8ef3	80 f6		bra $8eeb			bra 	_SCCopyLoop
.8ef5					_SCCExit:
.8ef5	7a		ply				ply
.8ef6	60		rts				rts
.8ef7					_SCType:
.8ef7	4c b2 a6	jmp $a6b2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a0db					IntegerDivide:
.a0db	fa		plx				plx
.a0dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a0df	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a0e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a0e3	0a		asl a				asl 	a
.a0e4	10 05		bpl $a0eb			bpl 	_NotRef
.a0e6	48		pha				pha
.a0e7	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a0ea	68		pla				pla
.a0eb					_NotRef:
.a0eb	0a		asl a				asl 	a
.a0ec	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a0ee	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a0f1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a0f4	f0 03		beq $a0f9			beq 	_IntegerCode 				; if clear, then we have two integers
.a0f6	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.a0f9					_IntegerCode:
.a0f9	20 1b a1	jsr $a11b			jsr 	CheckDivideZero 			; do div zero check
.a0fc	20 53 a1	jsr $a153			jsr 	Int32Divide 				; do the division
.a0ff	20 10 a2	jsr $a210			jsr 	CalculateSign 				; calculate result sign
.a102					NSMCopyPlusTwoToZero:
.a102	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a105	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a108	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.a10b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a10e	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.a111	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a114	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.a117	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a11a	60		rts				rts
.a11b					CheckDivideZero:
.a11b	e8		inx				inx
.a11c	20 71 99	jsr $9971			jsr 	NSMIsZero
.a11f	f0 02		beq $a123			beq 	_CDVError
.a121	ca		dex				dex
.a122	60		rts				rts
.a123					_CDVError:
.a123	a9 03		lda #$03		lda	#3
.a125	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a128					IntegerModulus:
.a128	fa		plx				plx
.a129	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a12c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a12f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a130	0a		asl a				asl 	a
.a131	10 05		bpl $a138			bpl 	_NotRef
.a133	48		pha				pha
.a134	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a137	68		pla				pla
.a138					_NotRef:
.a138	0a		asl a				asl 	a
.a139	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a13b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a13e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a141	f0 03		beq $a146			beq 	_IntegerCode 				; if clear, then we have two integers
.a143	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.a146					_IntegerCode:
.a146					IntegerModulusNoCheck:
.a146	20 1b a1	jsr $a11b			jsr 	CheckDivideZero 			; do div zero check
.a149	20 53 a1	jsr $a153			jsr 	Int32Divide 				; do the division
.a14c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a14f	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a152	60		rts				rts
.a153					Int32Divide:
.a153	48		pha				pha 								; save AXY
.a154	5a		phy				phy
.a155	20 18 99	jsr $9918			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a158	20 3d 99	jsr $993d			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a15b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a15d					_I32DivideLoop:
.a15d	e8		inx				inx
.a15e	e8		inx				inx
.a15f	20 56 99	jsr $9956			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a162	ca		dex				dex
.a163	ca		dex				dex
.a164	20 57 99	jsr $9957			jsr 	NSMRotateLeft
.a167	20 93 a1	jsr $a193			jsr 	DivideCheckSubtract 		; check if subtract possible
.a16a	90 03		bcc $a16f			bcc 	_I32DivideNoCarryIn
.a16c	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a16f					_I32DivideNoCarryIn:
.a16f	88		dey				dey 								; loop round till division completed.
.a170	d0 eb		bne $a15d			bne 	_I32DivideLoop
.a172	7a		ply				ply 								; restore AXY and exit
.a173	68		pla				pla
.a174	60		rts				rts
.a175					Int32ShiftDivide:
.a175	48		pha				pha 								; save AY
.a176	5a		phy				phy
.a177	e8		inx				inx 								; clear S[X+2]
.a178	e8		inx				inx
.a179	20 41 99	jsr $9941			jsr 	NSMSetZero
.a17c	ca		dex				dex
.a17d	ca		dex				dex
.a17e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a180					_I32SDLoop:
.a180	20 93 a1	jsr $a193			jsr 	DivideCheckSubtract 		; check if subtract possible
.a183	e8		inx				inx
.a184	e8		inx				inx
.a185	20 57 99	jsr $9957			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a188	ca		dex				dex
.a189	ca		dex				dex
.a18a	20 57 99	jsr $9957			jsr 	NSMRotateLeft
.a18d	88		dey				dey 	 							; do 31 times
.a18e	d0 f0		bne $a180			bne 	_I32SDLoop
.a190	7a		ply				ply 								; restore AY and exit
.a191	68		pla				pla
.a192	60		rts				rts
.a193					DivideCheckSubtract:
.a193	20 a4 8f	jsr $8fa4			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a196	b0 04		bcs $a19c			bcs 	_DCSExit 					; if carry set, then could do, exit
.a198	20 7e 8f	jsr $8f7e			jsr 	AddTopTwoStack 				; add it back in
.a19b	18		clc				clc 								; and return False
.a19c					_DCSExit:
.a19c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a19d					MulInteger:
.a19d	fa		plx				plx
.a19e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a1a1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a1a4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a1a5	0a		asl a				asl 	a
.a1a6	10 05		bpl $a1ad			bpl 	_NotRef
.a1a8	48		pha				pha
.a1a9	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a1ac	68		pla				pla
.a1ad					_NotRef:
.a1ad	0a		asl a				asl 	a 							; put MSB of type into A:7
.a1ae	30 0b		bmi $a1bb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a1b0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a1b3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a1b6	f0 06		beq $a1be			beq 	_IntegerCode 				; if clear, then we have two integers
.a1b8	4c f1 a3	jmp $a3f1			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a1bb					_StringData:
.a1bb	4c bc a6	jmp $a6bc			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a1be					_IntegerCode:
.a1be	20 cb a1	jsr $a1cb			jsr 	MultiplyShort
.a1c1	c9 00		cmp #$00			cmp 	#0
.a1c3	f0 05		beq $a1ca			beq 	_MIExit
.a1c5	a9 04		lda #$04		lda	#4
.a1c7	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a1ca					_MIExit:
.a1ca	60		rts				rts
.a1cb					MultiplyShort:
.a1cb	5a		phy				phy 								; save Y
.a1cc	20 18 99	jsr $9918			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a1cf	20 3d 99	jsr $993d			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a1d2	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a1d4					_I32MLoop:
.a1d4	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a1d7	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a1da	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a1dd	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a1e0	f0 28		beq $a20a			beq 	_I32MExit 					; exit if zero
.a1e2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a1e5	29 01		and #$01			and 	#1
.a1e7	f0 0e		beq $a1f7			beq 	_I32MNoAdd
.a1e9	20 7e 8f	jsr $8f7e			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a1ec	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a1ef	10 06		bpl $a1f7			bpl 	_I32MNoAdd
.a1f1					_I32ShiftRight:
.a1f1	20 64 99	jsr $9964			jsr 	NSMShiftRight 				; shift S[X] right
.a1f4	c8		iny				iny 								; increment shift count
.a1f5	80 0a		bra $a201			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a1f7					_I32MNoAdd:
.a1f7	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a1fa	70 f5		bvs $a1f1			bvs 	_I32ShiftRight 				; instead.
.a1fc	e8		inx				inx
.a1fd	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a200	ca		dex				dex
.a201					_I32MShiftUpper:
.a201	e8		inx				inx 								; shift S[X+2] right
.a202	e8		inx				inx
.a203	20 64 99	jsr $9964			jsr 	NSMShiftRight
.a206	ca		dex				dex
.a207	ca		dex				dex
.a208	80 ca		bra $a1d4			bra 	_I32MLoop 					; try again.
.a20a					_I32MExit:
.a20a	20 10 a2	jsr $a210			jsr 	CalculateSign
.a20d	98		tya				tya 								; shift in A
.a20e	7a		ply				ply 								; restore Y and exit
.a20f	60		rts				rts
.a210					CalculateSign:
.a210	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a213	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a216	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a219	0a		asl a				asl 	a 							; shift bit 7 into carry
.a21a	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a21d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8efa					CompareStrings:
.8efa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8efd	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8f00	29 10		and #$10			and 	#NSBIsString
.8f02	f0 2c		beq $8f30			beq 	_CSTypeError
.8f04	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8f07	85 36		sta $36				sta 	zTemp0
.8f09	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f0c	85 37		sta $37				sta 	zTemp0+1
.8f0e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8f11	85 38		sta $38				sta 	zTemp1
.8f13	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8f16	85 39		sta $39				sta 	zTemp1+1
.8f18	5a		phy				phy 								; save Y so we can access strings
.8f19	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8f1b					_CSLoop:
.8f1b	c8		iny				iny
.8f1c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8f1e	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8f20	d0 06		bne $8f28			bne 	_CSDifferent
.8f22	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8f24	d0 f5		bne $8f1b			bne 	_CSLoop 					; still comparing
.8f26					_CSExit:
.8f26	7a		ply				ply 								; reached end, return zero in A from EOS
.8f27	60		rts				rts
.8f28					_CSDifferent:
.8f28	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8f2a	90 fa		bcc $8f26			bcc		_CSExit
.8f2c	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8f2e	80 f6		bra $8f26			bra 	_CSExit
.8f30					_CSTypeError:
.8f30	4c b2 a6	jmp $a6b2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8f33					ShiftLeft:
.8f33	38		sec				sec
.8f34	80 01		bra $8f37			bra 	ShiftMain
.8f36					ShiftRight:
.8f36	18		clc				clc
.8f37					ShiftMain:
.8f37	fa		plx				plx 								; restore X
.8f38	08		php				php 								; save direction
.8f39	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f3c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f3f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f40	0a		asl a				asl 	a
.8f41	10 05		bpl $8f48			bpl 	_NotRef
.8f43	48		pha				pha
.8f44	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f47	68		pla				pla
.8f48					_NotRef:
.8f48	0a		asl a				asl 	a
.8f49	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f4b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f4e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f51	f0 03		beq $8f56			beq 	_IntegerCode 				; if clear, then we have two integers
.8f53	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.8f56					_IntegerCode:
.8f56	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8f59	29 e0		and #$e0			and 	#$E0
.8f5b	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8f5e	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8f61	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8f64	d0 13		bne $8f79			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8f66					_SMLoop:
.8f66	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8f69	30 11		bmi $8f7c			bmi 	_SMExit 					; exit if done.
.8f6b	28		plp				plp 								; restore direcition setting
.8f6c	08		php				php
.8f6d	90 05		bcc $8f74			bcc 	_SMRight
.8f6f	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; shift left if CS
.8f72	80 f2		bra $8f66			bra 	_SMLoop
.8f74					_SMRight:
.8f74	20 64 99	jsr $9964			jsr 	NSMShiftRight 				; shift right if CC
.8f77	80 ed		bra $8f66			bra 	_SMLoop
.8f79					_SMExit0:
.8f79	20 41 99	jsr $9941			jsr 	NSMSetZero 					; return zero.
.8f7c					_SMExit:
.8f7c	28		plp				plp 								; throw direction
.8f7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8f7e					AddTopTwoStack:
.8f7e	18		clc				clc
.8f7f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f82	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8f85	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f88	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f8b	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8f8e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f91	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f94	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8f97	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f9a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f9d	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8fa0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fa3	60		rts				rts
.8fa4					SubTopTwoStack:
.8fa4	38		sec				sec
.8fa5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fa8	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8fab	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fae	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fb1	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8fb4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fb7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fba	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8fbd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fc0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fc3	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8fc6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fc9	60		rts				rts
.8fca					AddInteger:
.8fca	fa		plx				plx
.8fcb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fce	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fd1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fd2	0a		asl a				asl 	a
.8fd3	10 05		bpl $8fda			bpl 	_NotRef
.8fd5	48		pha				pha
.8fd6	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fd9	68		pla				pla
.8fda					_NotRef:
.8fda	0a		asl a				asl 	a 							; put MSB of type into A:7
.8fdb	30 0b		bmi $8fe8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8fdd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fe0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fe3	f0 06		beq $8feb			beq 	_IntegerCode 				; if clear, then we have two integers
.8fe5	4c 79 a2	jmp $a279			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8fe8					_StringData:
.8fe8	4c 9d 8e	jmp $8e9d			jmp 	StringConcat							; at least one string - don't know both are strings.
.8feb					_IntegerCode:
.8feb					AddCode:
.8feb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8fee	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ff1	10 8b		bpl $8f7e			bpl 	AddTopTwoStack
.8ff3	20 a4 8f	jsr $8fa4			jsr 	SubTopTwoStack 				; do a physical subtraction
.8ff6	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8ff9	10 09		bpl $9004			bpl 	_AddExit
.8ffb	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8ffe	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9001	20 f6 98	jsr $98f6			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9004					_AddExit:
.9004	60		rts				rts
.9005					SubInteger:
.9005	fa		plx				plx
.9006	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9009	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.900c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.900d	0a		asl a				asl 	a
.900e	10 05		bpl $9015			bpl 	_NotRef
.9010	48		pha				pha
.9011	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9014	68		pla				pla
.9015					_NotRef:
.9015	0a		asl a				asl 	a 							; put MSB of type into A:7
.9016	30 0b		bmi $9023			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9018	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.901b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.901e	f0 06		beq $9026			beq 	_IntegerCode 				; if clear, then we have two integers
.9020	4c 7e a2	jmp $a27e			jmp 	FloatingPointSub 							; otherwise at least one float.
.9023					_StringData:
.9023	4c bc a6	jmp $a6bc			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9026					_IntegerCode:
.9026	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.9029	49 80		eor #$80			eor 	#$80
.902b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.902e	80 bb		bra $8feb			bra 	AddCode 					; and do the same code as add.
.9030					AndInteger:
.9030	fa		plx				plx
.9031	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9034	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9037	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9038	0a		asl a				asl 	a
.9039	10 05		bpl $9040			bpl 	_NotRef
.903b	48		pha				pha
.903c	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.903f	68		pla				pla
.9040					_NotRef:
.9040	0a		asl a				asl 	a
.9041	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9043	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9046	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9049	f0 03		beq $904e			beq 	_IntegerCode 				; if clear, then we have two integers
.904b	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.904e					_IntegerCode:
.904e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9051	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.9054	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9057	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.905a	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.905d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9060	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9063	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.9066	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9069	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.906c	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.906f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9072	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9075	60		rts				rts
.9076					OraInteger:
.9076	fa		plx				plx
.9077	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.907a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.907d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.907e	0a		asl a				asl 	a
.907f	10 05		bpl $9086			bpl 	_NotRef
.9081	48		pha				pha
.9082	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9085	68		pla				pla
.9086					_NotRef:
.9086	0a		asl a				asl 	a
.9087	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9089	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.908c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.908f	f0 03		beq $9094			beq 	_IntegerCode 				; if clear, then we have two integers
.9091	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.9094					_IntegerCode:
.9094	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9097	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.909a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.909d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.90a0	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.90a3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90a6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.90a9	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.90ac	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90af	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.90b2	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.90b5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90b8	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.90bb	60		rts				rts
.90bc					EorInteger:
.90bc	fa		plx				plx
.90bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90c0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90c3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c4	0a		asl a				asl 	a
.90c5	10 05		bpl $90cc			bpl 	_NotRef
.90c7	48		pha				pha
.90c8	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90cb	68		pla				pla
.90cc					_NotRef:
.90cc	0a		asl a				asl 	a
.90cd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90cf	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90d2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90d5	f0 03		beq $90da			beq 	_IntegerCode 				; if clear, then we have two integers
.90d7	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.90da					_IntegerCode:
.90da	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.90dd	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.90e0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90e3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.90e6	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.90e9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90ec	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.90ef	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.90f2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90f5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.90f8	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.90fb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90fe	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9101	60		rts				rts
.9102					WordIndirect:
.9102	fa		plx				plx
.9103	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9106	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9109	0a		asl a				asl 	a 							; shift reference bit into sign bit
.910a	0a		asl a				asl 	a
.910b	10 05		bpl $9112			bpl 	_NotRef
.910d	48		pha				pha
.910e	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9111	68		pla				pla
.9112					_NotRef:
.9112	0a		asl a				asl 	a
.9113	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9115	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9118	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.911b	f0 03		beq $9120			beq 	_IntegerCode 				; if clear, then we have two integers
.911d	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.9120					_IntegerCode:
.9120	20 eb 8f	jsr $8feb			jsr 	AddCode 					; add the two values
.9123	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9125	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9128	60		rts				rts
.9129					ByteIndirect:
.9129	fa		plx				plx
.912a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.912d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9130	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9131	0a		asl a				asl 	a
.9132	10 05		bpl $9139			bpl 	_NotRef
.9134	48		pha				pha
.9135	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9138	68		pla				pla
.9139					_NotRef:
.9139	0a		asl a				asl 	a
.913a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.913c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.913f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9142	f0 03		beq $9147			beq 	_IntegerCode 				; if clear, then we have two integers
.9144	4c b2 a6	jmp $a6b2			jmp 	TypeError 					; anything else, type mismatch.
.9147					_IntegerCode:
.9147	20 eb 8f	jsr $8feb			jsr 	AddCode 					; add the two values
.914a	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.914c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.914f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a21e					ConvertInt16:
.a21e	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a221	8e 10 06	stx $0610			stx 	NSMantissa1
.a224	9c 18 06	stz $0618			stz 	NSMantissa2
.a227	9c 20 06	stz $0620			stz 	NSMantissa3
.a22a	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a22d	a2 00		ldx #$00			ldx 	#0 							; stack level
.a22f	a9 0a		lda #$0a			lda 	#10 						; base
.a231	80 00		bra $a233			bra 	ConvertInt32
.a233					ConvertInt32:
.a233	5a		phy				phy
.a234	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a236	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a239	10 08		bpl $a243			bpl 	_CI32NotNeg
.a23b	48		pha				pha
.a23c	a9 2d		lda #$2d			lda 	#'-'
.a23e	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a241	c8		iny				iny
.a242	68		pla				pla
.a243					_CI32NotNeg:
.a243	20 51 a2	jsr $a251			jsr 	_CI32DivideConvert 			; recursive conversion
.a246	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a248	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a24b	7a		ply				ply
.a24c	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a24e	a9 77		lda #$77			lda 	#NumberBuffer & $FF
.a250	60		rts				rts
.a251					_CI32DivideConvert:
.a251	e8		inx				inx 								; write to next slot up
.a252	20 43 99	jsr $9943			jsr 	NSMSetByte
.a255	ca		dex				dex
.a256	20 53 a1	jsr $a153			jsr 	Int32Divide 				; divide
.a259	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a25c	48		pha				pha
.a25d	20 02 a1	jsr $a102			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a260	20 71 99	jsr $9971			jsr 	NSMIsZero 					; is it zero ?
.a263	f0 06		beq $a26b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a265	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a268	20 51 a2	jsr $a251			jsr 	_CI32DivideConvert 			; and recusrively call.
.a26b					_CI32NoRecurse:
.a26b	68		pla				pla 								; remainder
.a26c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a26e	90 02		bcc $a272			bcc 	_CI32NotHex
.a270	69 26		adc #$26			adc 	#6+32
.a272					_CI32NotHex:
.a272	69 30		adc #$30			adc 	#48
.a274	99 77 08	sta $0877,y			sta 	NumberBuffer,y 				; write out and exit
.a277	c8		iny				iny
.a278	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9150					PrecedenceLevel:
>9150	04					.byte	 4	; $00 <<
>9151	02					.byte	 2	; $01 <=
>9152	02					.byte	 2	; $02 <>
>9153	00					.byte	 0	; $03 !!3
>9154	00					.byte	 0	; $04 ><
>9155	02					.byte	 2	; $05 >=
>9156	04					.byte	 4	; $06 >>
>9157	00					.byte	 0	; $07 !!7
>9158	00					.byte	 0	; $08 !!8
>9159	00					.byte	 0	; $09 !!9
>915a	00					.byte	 0	; $0a !!10
>915b	00					.byte	 0	; $0b !!11
>915c	00					.byte	 0	; $0c !!12
>915d	00					.byte	 0	; $0d !!13
>915e	00					.byte	 0	; $0e !!14
>915f	00					.byte	 0	; $0f !!15
>9160	00					.byte	 0	; $10 @
>9161	00					.byte	 0	; $11 !!17
>9162	00					.byte	 0	; $12 !!18
>9163	00					.byte	 0	; $13 [
>9164	04					.byte	 4	; $14 \
>9165	00					.byte	 0	; $15 ]
>9166	01					.byte	 1	; $16 ^
>9167	00					.byte	 0	; $17 _
>9168	00					.byte	 0	; $18 `
>9169	00					.byte	 0	; $19 !!25
>916a	00					.byte	 0	; $1a !!26
>916b	00					.byte	 0	; $1b {
>916c	01					.byte	 1	; $1c |
>916d	00					.byte	 0	; $1d }
>916e	00					.byte	 0	; $1e ~
>916f	00					.byte	 0	; $1f [7m<7F>[m
>9170	00					.byte	 0	; $20
>9171	05					.byte	 5	; $21 !
>9172	00					.byte	 0	; $22 "
>9173	00					.byte	 0	; $23 #
>9174	05					.byte	 5	; $24 $
>9175	04					.byte	 4	; $25 %
>9176	01					.byte	 1	; $26 &
>9177	00					.byte	 0	; $27 '
>9178	00					.byte	 0	; $28 (
>9179	00					.byte	 0	; $29 )
>917a	04					.byte	 4	; $2a *
>917b	03					.byte	 3	; $2b +
>917c	00					.byte	 0	; $2c ,
>917d	03					.byte	 3	; $2d -
>917e	00					.byte	 0	; $2e .
>917f	04					.byte	 4	; $2f /
>9180	00					.byte	 0	; $30 0
>9181	00					.byte	 0	; $31 1
>9182	00					.byte	 0	; $32 2
>9183	00					.byte	 0	; $33 3
>9184	00					.byte	 0	; $34 4
>9185	00					.byte	 0	; $35 5
>9186	00					.byte	 0	; $36 6
>9187	00					.byte	 0	; $37 7
>9188	00					.byte	 0	; $38 8
>9189	00					.byte	 0	; $39 9
>918a	00					.byte	 0	; $3a :
>918b	00					.byte	 0	; $3b ;
>918c	02					.byte	 2	; $3c <
>918d	02					.byte	 2	; $3d =
>918e	02					.byte	 2	; $3e >
>918f	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9190					EvaluateExpressionAt0:
.9190	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9192					EvaluateExpression:
.9192	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9194					EvaluateExpressionAtPrecedence:
.9194	48		pha				pha 								; save precedence level
.9195	20 63 94	jsr $9463			jsr 	EvaluateTerm 				; evaluate term into level X.
.9198	68		pla				pla 								; restore precedence level.
.9199					_EXPRLoop:
.9199	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.919b	b1 30		lda ($30),y			lda 	(codePtr),y
.919d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.919f	b0 25		bcs $91c6			bcs 	_EXPRExit
.91a1	da		phx				phx 								; read the operator precedence
.91a2	aa		tax				tax
.91a3	bd 50 91	lda $9150,x			lda 	PrecedenceLevel,x
.91a6	fa		plx				plx
.91a7	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.91a9	f0 1b		beq $91c6			beq 	_EXPRExit
.91ab	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.91ad	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.91af	c5 37		cmp $37				cmp 	zTemp0+1
.91b1	b0 13		bcs $91c6			bcs		_EXPRExit 					; if current >= operator exit
.91b3	48		pha				pha 								; save current precedence.
.91b4	b1 30		lda ($30),y			lda 	(codePtr),y
.91b6	c8		iny				iny
.91b7	48		pha				pha
.91b8	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.91ba	e8		inx				inx 								; work out the right hand side.
.91bb	20 94 91	jsr $9194			jsr 	EvaluateExpressionAtPrecedence
.91be	ca		dex				dex
.91bf	68		pla				pla 								; get operator, call the code.
.91c0	20 c9 91	jsr $91c9			jsr 	_EXPRCaller
.91c3	68		pla				pla 								; restore precedence level
.91c4	80 d3		bra $9199			bra 	_EXPRLoop 					; and go round.
.91c6					_EXPRExit:
.91c6	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.91c8	60		rts				rts
.91c9					_EXPRCaller:
.91c9	da		phx				phx 								; save on stack, first thing is to restore it
.91ca	0a		asl a				asl 	a 							; double so can use vectors into X
.91cb	aa		tax				tax
.91cc	7c d0 89	jmp ($89d0,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a279					FloatingPointAdd:
.a279	20 1a a4	jsr $a41a			jsr 	FloatPrepare 				; prepare for floats
.a27c	80 0b		bra $a289			bra 	FloatAdd
.a27e					FloatingPointSub:
.a27e	20 1a a4	jsr $a41a			jsr 	FloatPrepare 				; prepare for floats
.a281					FloatSubtract:
.a281	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a284	49 80		eor #$80			eor 	#$80
.a286	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a289					FloatAdd:
.a289	48		pha				pha
.a28a	5a		phy				phy
.a28b	20 2b a4	jsr $a42b			jsr 	NSNormalise 				; normalise S[X]
.a28e	f0 54		beq $a2e4			beq 	_FAReturn1
.a290	e8		inx				inx 								; normalise S[X+1]
.a291	20 2b a4	jsr $a42b			jsr 	NSNormalise
.a294	ca		dex				dex
.a295	c9 00		cmp #$00			cmp 	#0
.a297	f0 6f		beq $a308			beq 	_FAExit 					; if so, just return A
.a299	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a29c	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a29f	f0 1b		beq $a2bc			beq 	_FAExponentsEqual
.a2a1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a2a4	a8		tay				tay
.a2a5	38		sec				sec 								; do a signed comparison of the exponents.
.a2a6	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a2a9	50 02		bvc $a2ad			bvc 	_FANoSignedChange
.a2ab	49 80		eor #$80			eor 	#$80
.a2ad					_FANoSignedChange:
.a2ad	29 80		and #$80			and 	#$80
.a2af	10 03		bpl $a2b4			bpl 	_FAHaveMax
.a2b1	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a2b4					_FAHaveMax:
.a2b4	20 0b a3	jsr $a30b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a2b7	e8		inx				inx
.a2b8	20 0b a3	jsr $a30b			jsr 	_FAShiftToExponent
.a2bb	ca		dex				dex
.a2bc					_FAExponentsEqual:
.a2bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a2bf	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a2c2	30 10		bmi $a2d4			bmi 	_FADifferentSigns
.a2c4	20 7e 8f	jsr $8f7e			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a2c7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a2ca	10 3c		bpl $a308			bpl 	_FAExit 					; if no, we are done.
.a2cc	20 64 99	jsr $9964			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a2cf	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a2d2	80 34		bra $a308			bra 	_FAExit
.a2d4					_FADifferentSigns:
.a2d4	20 a4 8f	jsr $8fa4			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a2d7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a2da	10 2c		bpl $a308			bpl 	_FAExit 					; if no, we are done.
.a2dc	20 ed 98	jsr $98ed			jsr 	NSMNegate 					; netate result
.a2df	20 f6 98	jsr $98f6			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a2e2	80 24		bra $a308			bra 	_FAExit
.a2e4					_FAReturn1:
.a2e4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a2e7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a2ea	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a2ed	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a2f0	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a2f3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a2f6	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a2f9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a2fc	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a2ff	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a302	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a305	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a308					_FAExit:
.a308	7a		ply				ply
.a309	68		pla				pla
.a30a	60		rts				rts
.a30b					_FAShiftToExponent:
.a30b					_FAShiftToExponent2:
.a30b	98		tya				tya 								; compare Y to exponent
.a30c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a30f	f0 08		beq $a319			beq 	_FASEExit 					; exit if so.
.a311	20 64 99	jsr $9964			jsr 	NSMShiftRight	 			; shift the mantissa right
.a314	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a317	80 f2		bra $a30b			bra 	_FAShiftToExponent2
.a319					_FASEExit:
.a319	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a31a					CompareFloat:
.a31a	20 81 a2	jsr $a281			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a31d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a320	29 f8		and #$f8			and 	#$F8
.a322	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a325	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a328	f0 09		beq $a333			beq 	_FCExit 					; zero, so approximately identical
.a32a	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a32c	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a32f	10 02		bpl $a333			bpl 	_FCExit
.a331					_FCNegative:
.a331	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a333					_FCExit:
.a333	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a334					FDivideCommand:
.a334	fa		plx				plx	 								; restore stack position
.a335	20 1a a4	jsr $a41a			jsr 	FloatPrepare 				; prepare for floats
.a338					FloatDivide:
.a338	48		pha				pha
.a339	e8		inx				inx
.a33a	20 2b a4	jsr $a42b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a33d	ca		dex				dex
.a33e	c9 00		cmp #$00			cmp 	#0
.a340	f0 20		beq $a362			beq 	_FDZero
.a342	20 2b a4	jsr $a42b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a345	f0 19		beq $a360			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a347	20 75 a1	jsr $a175			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a34a	20 02 a1	jsr $a102			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a34d	20 2b a4	jsr $a42b			jsr		NSNormalise 				; renormalise
.a350	20 10 a2	jsr $a210			jsr 	CalculateSign 				; calculate result sign
.a353	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a356	38		sec				sec
.a357	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a35a	38		sec				sec
.a35b	e9 1e		sbc #$1e			sbc 	#30
.a35d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a360					_FDExit:
.a360	68		pla				pla
.a361	60		rts				rts
.a362					_FDZero:
.a362	a9 03		lda #$03		lda	#3
.a364	4c 89 8d	jmp $8d89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a367					FloatFractionalPart:
.a367	5a		phy				phy
.a368	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a36b	29 7f		and #$7f			and 	#$7F
.a36d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a370	20 2b a4	jsr $a42b			jsr 	NSNormalise
.a373	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a376	38		sec				sec
.a377	e9 e0		sbc #$e0			sbc 	#$E0
.a379	90 31		bcc $a3ac			bcc 	_FFPExit 					; already fractional
.a37b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a37d	b0 2a		bcs $a3a9			bcs 	_FFPZero
.a37f	a8		tay				tay 								; put count to do in Y
.a380	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a383	20 ae a3	jsr $a3ae			jsr 	_FFPPartial
.a386	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a389	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a38c	20 ae a3	jsr $a3ae			jsr 	_FFPPartial
.a38f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a392	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a395	20 ae a3	jsr $a3ae			jsr 	_FFPPartial
.a398	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a39b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a39e	20 ae a3	jsr $a3ae			jsr 	_FFPPartial
.a3a1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a3a4	20 71 99	jsr $9971			jsr 	NSMIsZero 					; zeroed check.
.a3a7	d0 03		bne $a3ac			bne 	_FFPExit
.a3a9					_FFPZero:
.a3a9	20 41 99	jsr $9941			jsr 	NSMSetZero
.a3ac					_FFPExit:
.a3ac	7a		ply				ply
.a3ad	60		rts				rts
.a3ae					_FFPPartial:
.a3ae	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a3b0	f0 17		beq $a3c9			beq 	_FFFPPExit
.a3b2	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a3b4	b0 0c		bcs $a3c2			bcs 	_FFFPPWholeByte
.a3b6	5a		phy				phy
.a3b7					_FFFPPLeft:
.a3b7	0a		asl a				asl 	a
.a3b8	88		dey				dey
.a3b9	d0 fc		bne $a3b7			bne 	_FFFPPLeft
.a3bb	7a		ply				ply
.a3bc					_FFFPPRight:
.a3bc	4a		lsr a				lsr 	a
.a3bd	88		dey				dey
.a3be	d0 fc		bne $a3bc			bne 	_FFFPPRight
.a3c0	80 07		bra $a3c9			bra 	_FFFPPExit
.a3c2					_FFFPPWholeByte:
.a3c2	98		tya				tya 								; subtract 8 from count
.a3c3	38		sec				sec
.a3c4	e9 08		sbc #$08			sbc 	#8
.a3c6	a8		tay				tay
.a3c7	a9 00		lda #$00			lda 	#0 							; and clear all
.a3c9					_FFFPPExit:
.a3c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a3ca					FloatIntegerPart:
.a3ca	48		pha				pha
.a3cb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a3ce	f0 1f		beq $a3ef			beq 	_FIPExit 					; if so do nothing
.a3d0	20 71 99	jsr $9971			jsr 	NSMIsZero 					; is it zero ?
.a3d3	f0 17		beq $a3ec			beq 	_FIPZero 					; if so return zero.
.a3d5	20 2b a4	jsr $a42b			jsr 	NSNormalise 				; normalise
.a3d8	f0 12		beq $a3ec			beq 	_FIPZero 					; normalised to zero, exit zero
.a3da					_FIPShift:
.a3da	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a3dd	10 08		bpl $a3e7			bpl 	_FIPCheckZero
.a3df	20 64 99	jsr $9964			jsr 	NSMShiftRight 				; shift mantissa right
.a3e2	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a3e5	80 f3		bra $a3da			bra 	_FIPShift
.a3e7					_FIPCheckZero:
.a3e7	20 71 99	jsr $9971			jsr 	NSMIsZero 					; avoid -0 problem
.a3ea	d0 03		bne $a3ef			bne 	_FIPExit 					; set to zero if mantissa zero.
.a3ec					_FIPZero:
.a3ec	20 41 99	jsr $9941			jsr 	NSMSetZero
.a3ef					_FIPExit:
.a3ef	68		pla				pla
.a3f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a3f1					FloatingPointMultiply:
.a3f1	20 1a a4	jsr $a41a			jsr 	FloatPrepare 				; prepare for floats
.a3f4					FloatMultiply:
.a3f4	48		pha				pha
.a3f5	20 2b a4	jsr $a42b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a3f8	f0 1b		beq $a415			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a3fa	e8		inx				inx
.a3fb	20 2b a4	jsr $a42b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a3fe	ca		dex				dex
.a3ff	c9 00		cmp #$00			cmp 	#0
.a401	f0 0f		beq $a412			beq 	_FDSetZero
.a403	20 cb a1	jsr $a1cb			jsr 	MultiplyShort 				; calculate the result.
.a406	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a409	18		clc				clc
.a40a	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a40d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a410	80 03		bra $a415			bra 	_FDExit
.a412					_FDSetZero:
.a412	20 41 99	jsr $9941			jsr 	NSMSetZero 					; return 0
.a415					_FDExit:
.a415	20 2b a4	jsr $a42b			jsr 	NSNormalise 				; normalise the result
.a418	68		pla				pla
.a419	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a41a					FloatPrepare:
.a41a	20 a2 92	jsr $92a2			jsr 	DereferenceTopTwo 			; dereference the top two values
.a41d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a420	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a423	29 10		and #$10			and 	#NSBIsString
.a425	d0 01		bne $a428			bne 	_FDType
.a427	60		rts				rts
.a428					_FDType:
.a428	4c b2 a6	jmp $a6b2			jmp 	TypeError
.a42b					NSNormalise:
.a42b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a42e	29 80		and #$80			and 	#$80
.a430	09 08		ora #$08			ora 	#NSTFloat
.a432	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a435	20 71 99	jsr $9971			jsr 	NSMIsZero 					; if zero exit
.a438	d0 09		bne $a443			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a43a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a43d	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a440	a9 00		lda #$00			lda 	#0 							; set Z flag
.a442	60		rts				rts
.a443					_NSNormaliseOptimise:
.a443	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a446	d0 22		bne $a46a			bne 	_NSNormaliseLoop
.a448	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a44b	30 1d		bmi $a46a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a44d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a450	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a453	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a456	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a459	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a45c	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a45f	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a462	38		sec				sec
.a463	e9 08		sbc #$08			sbc 	#8
.a465	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a468	80 d9		bra $a443			bra 	_NSNormaliseOptimise
.a46a					_NSNormaliseLoop:
.a46a	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a46d	70 08		bvs $a477			bvs 	_NSNExit 					; exit if so with Z flag clear
.a46f	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; shift mantissa left
.a472	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a475	80 f3		bra $a46a			bra 	_NSNormaliseLoop
.a477					_NSNExit:
.a477	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a479	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.91cf					AssignNumber:
.91cf	5a		phy				phy
.91d0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.91d3	85 36		sta $36				sta 	zTemp0
.91d5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91d8	85 37		sta $37				sta 	zTemp0+1
.91da	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.91dd	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.91df	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91e2	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.91e4	c9 08		cmp #$08			cmp 	#NSTFloat
.91e6	f0 2a		beq $9212			beq 	_ANFloat
.91e8	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.91eb	f0 05		beq $91f2			beq		_ANNotFloat
.91ed	e8		inx				inx
.91ee	20 ca a3	jsr $a3ca			jsr 	FloatIntegerPart 			; make it an integer
.91f1	ca		dex				dex
.91f2					_ANNotFloat:
.91f2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.91f5	29 03		and #$03			and 	#3
.91f7	d0 05		bne $91fe			bne 	_ANByteWord
.91f9	20 1e 92	jsr $921e			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.91fc	80 1e		bra $921c			bra 	_ANExit
.91fe					_ANByteWord:
.91fe	48		pha				pha 								; save count
.91ff	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9202	92 36		sta ($36)			sta 	(zTemp0)
.9204	68		pla				pla
.9205	c9 01		cmp #$01			cmp	 	#1
.9207	f0 13		beq $921c			beq 	_ANExit
.9209	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.920c	a0 01		ldy #$01			ldy 	#1
.920e	91 36		sta ($36),y			sta 	(zTemp0),y
.9210	80 0a		bra $921c			bra 	_ANExit
.9212					_ANFloat:
.9212	20 1e 92	jsr $921e			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9215	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9218	a0 04		ldy #$04			ldy 	#4
.921a	91 36		sta ($36),y			sta 	(zTemp0),y
.921c					_ANExit:
.921c	7a		ply				ply
.921d	60		rts				rts
.921e					_ANCopy4PackSign:
.921e	a0 03		ldy #$03			ldy 	#3
.9220	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9223	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9225	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.9228	91 36		sta ($36),y			sta 	(zTemp0),y
.922a	88		dey				dey
.922b	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.922e	91 36		sta ($36),y			sta 	(zTemp0),y
.9230	88		dey				dey
.9231	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9234	91 36		sta ($36),y			sta 	(zTemp0),y
.9236	88		dey				dey
.9237	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.923a	91 36		sta ($36),y			sta 	(zTemp0),y
.923c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.923d					AssignString:
.923d	5a		phy				phy
.923e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9241	85 38		sta $38				sta 	zTemp1
.9243	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9246	85 39		sta $39				sta 	zTemp1+1
.9248	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.924b	85 36		sta $36				sta 	zTemp0
.924d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9250	85 37		sta $37				sta 	zTemp0+1
.9252	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9254	b1 36		lda ($36),y			lda 	(zTemp0),y
.9256	f0 23		beq $927b			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9258	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9259	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.925b	e9 02		sbc #$02			sbc 	#2
.925d	85 3c		sta $3c				sta 	zsTemp
.925f	a0 01		ldy #$01			ldy 	#1
.9261	b1 36		lda ($36),y			lda 	(zTemp0),y
.9263	e9 00		sbc #$00			sbc 	#0
.9265	85 3d		sta $3d				sta 	zsTemp+1
.9267	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9269					_ASGetLength:
.9269	c8		iny				iny
.926a	b1 38		lda ($38),y			lda 	(zTemp1),y
.926c	d0 fb		bne $9269			bne 	_ASGetLength
.926e	98		tya				tya 								; is this length <= current length
.926f	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9271	90 20		bcc $9293			bcc 	_ASCopyString
.9273	f0 1e		beq $9293			beq 	_ASCopyString
.9275	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9277	a0 01		ldy #$01			ldy 	#1
.9279	91 3c		sta ($3c),y			sta 	(zsTemp),y
.927b					_ASNewStringRequired:
.927b	e8		inx				inx 								; concrete the new string.
.927c	20 4e a9	jsr $a94e			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.927f	ca		dex				dex
.9280	18		clc				clc
.9281	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9284	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9286	92 36		sta ($36)			sta 	(zTemp0)
.9288	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.928b	69 00		adc #$00			adc 	#0
.928d	a0 01		ldy #$01			ldy 	#1
.928f	91 36		sta ($36),y			sta 	(zTemp0),y
.9291	80 0d		bra $92a0			bra 	_ASExit
.9293					_ASCopyString:
.9293	a0 00		ldy #$00			ldy 	#0
.9295					_ASCopyLoop:
.9295	b1 38		lda ($38),y			lda 	(zTemp1),y
.9297	c8		iny				iny
.9298	c8		iny				iny
.9299	91 3c		sta ($3c),y			sta 	(zsTemp),y
.929b	88		dey				dey
.929c	c9 00		cmp #$00			cmp 	#0
.929e	d0 f5		bne $9295			bne 	_ASCopyLoop
.92a0					_ASExit:
.92a0	7a		ply				ply
.92a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.92a2					DereferenceTopTwo:
.92a2	e8		inx				inx
.92a3	20 a7 92	jsr $92a7			jsr 	Dereference 				; deref x+1
.92a6	ca		dex				dex  								; falls through to deref x
.92a7					Dereference:
.92a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.92aa	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.92ac	f0 57		beq $9305			beq 	_DRFExit 					; not a reference
.92ae	5a		phy				phy
.92af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.92b2	85 36		sta $36				sta 	zTemp0
.92b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.92b7	85 37		sta $37				sta 	zTemp0+1
.92b9	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.92bc	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.92be	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.92c4	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.92c6	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.92c8	f0 0f		beq $92d9			beq 	_DRFDereferenceTwo
.92ca	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.92cc	f0 39		beq $9307			beq 	_DRFFull
.92ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.92d1	29 03		and #$03			and 	#3
.92d3	f0 32		beq $9307			beq 	_DRFFull 					; the whole word
.92d5	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.92d7	f0 07		beq $92e0			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.92d9					_DRFDereferenceTwo:
.92d9	a0 01		ldy #$01			ldy 	#1
.92db	b1 36		lda ($36),y			lda 	(zTemp0),y
.92dd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92e0					_DRFClear23:
.92e0	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.92e3	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.92e6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.92e9	29 18		and #$18			and 	#NSBTypeMask
.92eb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92ee	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.92f0	d0 12		bne $9304			bne 	_DRFNotString
.92f2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.92f5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.92f8	d0 0a		bne $9304			bne 	_DRFNotString
.92fa	a9 06		lda #$06			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.92fc	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.92ff	a9 93		lda #$93			lda 	#_DRFNullString >> 8
.9301	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.9304					_DRFNotString
.9304	7a		ply				ply 								; restore Y and exit
.9305					_DRFExit:
.9305	60		rts				rts
.9306					_DRFNullString:
>9306	00						.byte 	0
.9307					_DRFFull:
.9307	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9309	b1 36		lda ($36),y			lda 	(zTemp0),y
.930b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.930e	c8		iny				iny
.930f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9311	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9314	c8		iny				iny
.9315	b1 36		lda ($36),y			lda 	(zTemp0),y
.9317	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.931a	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.931d	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9320	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9322	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.9325	f0 06		beq $932d			beq 	_DRFNoExponent
.9327	c8		iny				iny 								; if not, read the exponent as well.
.9328	b1 36		lda ($36),y			lda 	(zTemp0),y
.932a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.932d					_DRFNoExponent:
.932d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9330	10 0d		bpl $933f			bpl 	_DRFExit2 					; if not, then exit.
.9332	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9334	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9337	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.933a	09 80		ora #$80			ora 	#NSBIsNegative
.933c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.933f					_DRFExit2:
.933f	7a		ply				ply
.9340	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9341					EncodeNumberStart:
.9341	38		sec				sec
.9342	80 01		bra $9345			bra 	EncodeNumberContinue+1
.9344					EncodeNumberContinue:
.9344	18		clc				clc
.9345					EncodeNumber:
.9345	08		php				php 								; save reset.
.9346	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9348	f0 12		beq $935c			beq 	_ENIsOkay
.934a	c9 30		cmp #$30			cmp 	#"0"
.934c	90 04		bcc $9352			bcc 	_ENBadNumber
.934e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9350	90 0a		bcc $935c			bcc 	_ENIsOkay
.9352					_ENBadNumber:
.9352	28		plp				plp 								; throw saved reset
.9353	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.9356	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9358	f0 7e		beq $93d8			beq 	_ENConstructFinal
.935a					_ENFail:
.935a	18		clc				clc 								; not allowed
.935b	60		rts				rts
.935c					_ENIsOkay:
.935c	28		plp				plp 								; are we restarting
.935d	90 15		bcc $9374			bcc 	_ENNoRestart
.935f					_ENStartEncode:
.935f	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9361	f0 0c		beq $936f			beq 	_ENFirstDP
.9363	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9365	20 43 99	jsr $9943			jsr 	NSMSetByte
.9368	a9 01		lda #$01			lda 	#ESTA_Low
.936a					_ENExitChange:
.936a	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.936d	38		sec				sec
.936e	60		rts				rts
.936f					_ENFirstDP:
.936f	20 41 99	jsr $9941			jsr 	NSMSetZero 					; clear integer part
.9372	80 3f		bra $93b3			bra 	_ESTASwitchFloat			; go straight to float and exi
.9374					_ENNoRestart:
.9374	48		pha				pha 								; save on stack.
.9375	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.9378	c9 01		cmp #$01			cmp 	#ESTA_Low
.937a	f0 09		beq $9385			beq  	_ESTALowState
.937c	c9 02		cmp #$02			cmp 	#ESTA_High
.937e	f0 29		beq $93a9			beq 	_ESTAHighState
.9380	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9382	f0 3b		beq $93bf			beq 	_ESTADecimalState
>9384	db						.byte 	$DB 						; causes a break in the emulator
.9385					_ESTALowState:
.9385	68		pla				pla 								; get value back
.9386	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9388	f0 29		beq $93b3			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.938a	29 0f		and #$0f			and 	#15 						; make digit
.938c	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.938f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9392	0a		asl a				asl 	a
.9393	0a		asl a				asl 	a
.9394	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9397	0a		asl a				asl 	a
.9398	6d 06 07	adc $0706			adc 	DigitTemp
.939b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.939e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.93a0	90 05		bcc $93a7			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.93a2	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.93a4	8d 05 07	sta $0705			sta 	EncodeState
.93a7					_ESTANoSwitch:
.93a7	38		sec				sec
.93a8	60		rts				rts
.93a9					_ESTAHighState:
.93a9	68		pla				pla 								; get value back
.93aa	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.93ac	f0 05		beq $93b3			beq 	_ESTASwitchFloat
.93ae	20 12 94	jsr $9412			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.93b1	38		sec				sec
.93b2	60		rts				rts
.93b3					_ESTASwitchFloat:
.93b3	9c 07 07	stz $0707			stz 	DecimalCount
.93b6	e8		inx				inx 								; zero the decimal additive.
.93b7	20 41 99	jsr $9941			jsr 	NSMSetZero
.93ba	ca		dex				dex
.93bb	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.93bd	80 ab		bra $936a			bra 	_ENExitChange
.93bf					_ESTADecimalState:
.93bf	68		pla				pla 								; digit.
.93c0	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.93c2	f0 96		beq $935a			beq 	_ENFail
.93c4	e8		inx				inx 								; put digit into fractional part of X+1
.93c5	20 12 94	jsr $9412			jsr 	ESTAShiftDigitIntoMantissa
.93c8	ca		dex				dex
.93c9	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.93cc	ad 07 07	lda $0707			lda 	DecimalCount
.93cf	c9 0b		cmp #$0b			cmp 	#11
.93d1	f0 02		beq $93d5			beq 	_ESTADSFail
.93d3	38		sec				sec
.93d4	60		rts				rts
.93d5					_ESTADSFail:
.93d5	4c ad a6	jmp $a6ad			jmp 	RangeError
.93d8					_ENConstructFinal:
.93d8	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.93db	f0 33		beq $9410			beq 	_ENCFExit 					; no decimals
.93dd	5a		phy				phy
.93de	0a		asl a				asl 	a 							; x 4 and CLC
.93df	0a		asl a				asl 	a
.93e0	6d 07 07	adc $0707			adc 	DecimalCount
.93e3	a8		tay				tay
.93e4	b9 6c a6	lda $a66c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.93e7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.93ea	b9 6d a6	lda $a66d,y			lda 	DecimalScalarTable-5+1,y
.93ed	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.93f0	b9 6e a6	lda $a66e,y			lda 	DecimalScalarTable-5+2,y
.93f3	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.93f6	b9 6f a6	lda $a66f,y			lda 	DecimalScalarTable-5+3,y
.93f9	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.93fc	b9 70 a6	lda $a670,y			lda 	DecimalScalarTable-5+4,y
.93ff	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9402	a9 08		lda #$08			lda 	#NSTFloat
.9404	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9407	7a		ply				ply
.9408	e8		inx				inx 								; multiply decimal const by decimal scalar
.9409	20 f4 a3	jsr $a3f4			jsr 	FloatMultiply
.940c	ca		dex				dex
.940d	20 89 a2	jsr $a289			jsr 	FloatAdd 					; add to integer part.
.9410					_ENCFExit:
.9410	18		clc				clc 								; reject the digit.
.9411	60		rts				rts
.9412					ESTAShiftDigitIntoMantissa:
.9412	29 0f		and #$0f			and 	#15 						; save digit
.9414	48		pha				pha
.9415	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9418	48		pha				pha
.9419	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.941c	48		pha				pha
.941d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9420	48		pha				pha
.9421	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9424	48		pha				pha
.9425	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; x 2
.9428	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; x 4
.942b	18		clc				clc 								; pop mantissa and add
.942c	68		pla				pla
.942d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9430	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9433	68		pla				pla
.9434	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.9437	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.943a	68		pla				pla
.943b	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.943e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9441	68		pla				pla
.9442	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.9445	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.9448	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; x 10
.944b	68		pla				pla 								; add digit
.944c	18		clc				clc
.944d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9450	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9453	90 0d		bcc $9462			bcc 	_ESTASDExit
.9455	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.9458	d0 08		bne $9462			bne 	_ESTASDExit
.945a	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.945d	d0 03		bne $9462			bne 	_ESTASDExit
.945f	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.9462					_ESTASDExit:
.9462	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9463					EvaluateTerm:
.9463	b1 30		lda ($30),y			lda 	(codePtr),y
.9465	30 18		bmi $947f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9467	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9469	b0 6f		bcs $94da			bcs 	_ETVariable
.946b	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.946d	90 6e		bcc $94dd			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.946f	c9 3a		cmp #$3a			cmp 	#'9'+1
.9471	b0 6a		bcs $94dd			bcs 	_ETPuncUnary
.9473	20 41 93	jsr $9341			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9476					_ETNumber:
.9476	c8		iny				iny 								; keep encoding until we have the numbers
.9477	b1 30		lda ($30),y			lda 	(codePtr),y
.9479	20 44 93	jsr $9344			jsr 	EncodeNumberContinue
.947c	b0 f8		bcs $9476			bcs 	_ETNumber 					; go back if accepted.
.947e	60		rts				rts
.947f					_ETCheckUnary:
.947f	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9481	f0 41		beq $94c4			beq 	_ETString
.9483	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9485	f0 12		beq $9499			beq 	_ETHexConstant
.9487	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9489	90 0b		bcc $9496			bcc 	_ETSyntaxError
.948b	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.948d	b0 07		bcs $9496			bcs 	_ETSyntaxError
.948f	da		phx				phx 								; push X on the stack
.9490	0a		asl a				asl 	a 							; put vector x 2 into X
.9491	aa		tax				tax
.9492	c8		iny				iny 								; consume unary function token
.9493	7c 50 8a	jmp ($8a50,x)			jmp 	(VectorSet0,x) 				; and do it.
.9496					_ETSyntaxError:
.9496	4c a8 a6	jmp $a6a8			jmp 	SyntaxError
.9499					_ETHexConstant:
.9499	c8		iny				iny 								; skip #
.949a	c8		iny				iny 								; skip count
.949b	20 41 99	jsr $9941			jsr 	NSMSetZero 					; clear result
.949e					_ETHLoop:
.949e	b1 30		lda ($30),y			lda 	(codePtr),y
.94a0	c8		iny				iny 								; and consume
.94a1	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.94a3	f0 1e		beq $94c3			beq 	_ETHExit
.94a5	48		pha				pha 								; save on stack.
.94a6	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; x 2
.94a9	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; x 4
.94ac	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; x 8
.94af	20 56 99	jsr $9956			jsr 	NSMShiftLeft 				; x 16
.94b2	68		pla				pla 								; ASCII
.94b3	c9 41		cmp #$41			cmp 	#'A'
.94b5	90 02		bcc $94b9			bcc 	_ETHNotChar
.94b7	e9 07		sbc #$07			sbc 	#7
.94b9					_ETHNotChar:
.94b9	29 0f		and #$0f			and 	#15 						; digit now
.94bb	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.94be	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94c1	80 db		bra $949e			bra 	_ETHLoop 					; go round.
.94c3					_ETHExit:
.94c3	60		rts				rts
.94c4					_ETString:
.94c4	c8		iny				iny 								; look at length
.94c5	b1 30		lda ($30),y			lda 	(codePtr),y
.94c7	48		pha				pha
.94c8	c8		iny				iny 								; first character
.94c9	20 8b 99	jsr $998b			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.94cc	68		pla				pla 								; restore count and save
.94cd	85 36		sta $36				sta 	zTemp0
.94cf	98		tya				tya 								; add length to Y to skip it.
.94d0	18		clc				clc
.94d1	65 36		adc $36				adc 	zTemp0
.94d3	a8		tay				tay
.94d4	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.94d6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94d9	60		rts				rts
.94da					_ETVariable:
.94da	4c 34 95	jmp $9534			jmp 	VariableHandler
.94dd					_ETPuncUnary:
.94dd	c8		iny				iny 								; consume the unary character
.94de	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.94e0	f0 2d		beq $950f			beq 	_ETUnaryNegate
.94e2	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.94e4	f0 39		beq $951f			beq 	_ETDereference
.94e6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.94e8	f0 43		beq $952d			beq 	_ETParenthesis
.94ea	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.94ec	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.94ee	f0 06		beq $94f6			beq 	_ETIndirection
.94f0	e6 36		inc $36				inc 	zTemp0
.94f2	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.94f4	d0 a0		bne $9496			bne 	_ETSyntaxError
.94f6					_ETIndirection:
.94f6	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.94f8	1a		inc a				inc 	a
.94f9	48		pha				pha
.94fa	20 63 94	jsr $9463			jsr 	EvaluateTerm				; evaluate the term
.94fd	20 a7 92	jsr $92a7			jsr 	Dereference 				; dereference it.
.9500	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9503	d0 07		bne $950c			bne 	_ETTypeMismatch
.9505	68		pla				pla 								; indirection 1-2
.9506	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9508	9d 00 06	sta $0600,x			sta 	NSStatus,x
.950b	60		rts				rts
.950c					_ETTypeMismatch:
.950c	4c b2 a6	jmp $a6b2			jmp 	TypeError
.950f					_ETUnaryNegate:
.950f	20 63 94	jsr $9463			jsr 	EvaluateTerm				; evaluate the term
.9512	20 a7 92	jsr $92a7			jsr 	Dereference 				; dereference it.
.9515	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.9518	29 10		and #$10			and 	#NSTString
.951a	d0 f0		bne $950c			bne 	_ETTypeMismatch
.951c	4c ed 98	jmp $98ed			jmp 	NSMNegate  					; just toggles the sign bit.
.951f					_ETDereference:
.951f	20 63 94	jsr $9463			jsr 	EvaluateTerm				; evaluate the term
.9522	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.9525	29 20		and #$20			and 	#NSBIsReference
.9527	f0 e3		beq $950c			beq 	_ETTypeMismatch
.9529	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.952c	60		rts				rts
.952d					_ETParenthesis:
.952d	20 92 91	jsr $9192			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9530	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 			; check for )
.9533	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9534					VariableHandler:
.9534	b1 30		lda ($30),y			lda 	(codePtr),y
.9536	18		clc				clc
.9537	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9539	85 37		sta $37				sta 	zTemp0+1
.953b	c8		iny				iny
.953c	b1 30		lda ($30),y			lda 	(codePtr),y
.953e	85 36		sta $36				sta 	zTemp0
.9540	c8		iny				iny
.9541	18		clc				clc									; copy variable address+3 to mantissa
.9542	69 03		adc #$03			adc 	#3
.9544	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9547	a5 37		lda $37				lda 	zTemp0+1
.9549	69 00		adc #$00			adc 	#0
.954b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.954e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9551	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9554	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9557	5a		phy				phy
.9558	a0 02		ldy #$02			ldy 	#2 							; read type
.955a	b1 36		lda ($36),y			lda 	(zTemp0),y
.955c	7a		ply				ply
.955d	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.955f	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9561	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9564	29 04		and #$04			and 	#NSBIsArray
.9566	d0 01		bne $9569			bne 	_VHArray
.9568	60		rts				rts
.9569					_VHArray:
.9569	e8		inx				inx
.956a	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger 		; get the 1st index.
.956d	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.956f	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9572	b1 30		lda ($30),y			lda 	(codePtr),y
.9574	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9576	d0 06		bne $957e			bne 	_VHNoSecondIndex
.9578	c8		iny				iny 								; skip the comma
.9579	e8		inx				inx
.957a	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.957d	ca		dex				dex
.957e					_VHNoSecondIndex:
.957e	ca		dex				dex 								; set X back.
.957f	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 			; and check the right bracket.
.9582	5a		phy				phy 								; save position
.9583	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9586	85 3e		sta $3e				sta 	zaTemp
.9588	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.958b	85 3f		sta $3f				sta 	zaTemp+1
.958d	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.958f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9591	f0 02		beq $9595			beq 	_VHHas2Mask
.9593	a9 ff		lda #$ff			lda 	#$FF
.9595					_VHHas2Mask:
.9595	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9598	f0 54		beq $95ee			beq 	_VHBadIndex
.959a	0a		asl a				asl 	a 							; carry will be set if a second index
.959b	90 09		bcc $95a6			bcc 	_VHCheckFirstIndex
.959d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.959f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95a1	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.95a4	90 48		bcc $95ee			bcc 	_VHBadIndex
.95a6					_VHCheckFirstIndex:
.95a6	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.95a8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95aa	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.95ad	90 3f		bcc $95ee			bcc 	_VHBadIndex
.95af	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.95b1	64 37		stz $37				stz 	zTemp0+1
.95b3	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.95b6	30 0f		bmi $95c7			bmi 	_VHNoMultiply
.95b8	da		phx				phx
.95b9	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.95bc	48		pha				pha
.95bd	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.95bf	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95c1	1a		inc a				inc 	a 							; add 1 for zero base
.95c2	fa		plx				plx
.95c3	20 44 a5	jsr $a544			jsr 	Multiply8x8 				; calculate -> Z0
.95c6	fa		plx				plx
.95c7					_VHNoMultiply:
.95c7	18		clc				clc
.95c8	a5 36		lda $36				lda 	zTemp0
.95ca	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.95cd	85 36		sta $36				sta 	zTemp0
.95cf	a5 37		lda $37				lda 	zTemp0+1
.95d1	69 00		adc #$00			adc 	#0
.95d3	85 37		sta $37				sta 	zTemp0+1
.95d5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95d8	20 b5 84	jsr $84b5			jsr 	ScaleByBaseType
.95db	18		clc				clc
.95dc	b2 3e		lda ($3e)			lda 	(zaTemp)
.95de	65 36		adc $36				adc 	zTemp0
.95e0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95e3	a0 01		ldy #$01			ldy 	#1
.95e5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95e7	65 37		adc $37				adc 	zTemp0+1
.95e9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95ec	7a		ply				ply 								; restore position
.95ed	60		rts				rts
.95ee					_VHBadIndex:
.95ee	a9 17		lda #$17		lda	#23
.95f0	4c 89 8d	jmp $8d89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a47a					AbsUnary:
.a47a	fa		plx				plx 								; restore stack pos
.a47b	20 95 98	jsr $9895			jsr 	EvaluateNumber 				; get a float or int
.a47e	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.a481	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a484	29 7f		and #$7f			and 	#$7F
.a486	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a489	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.95f3					AllocUnary:
.95f3	fa		plx				plx 								; restore stack pos
.95f4	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger		; get bytes required.
.95f7	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.95fa	da		phx				phx 								; save X/Y
.95fb	5a		phy				phy
.95fc	8a		txa				txa 								; copy X into Y
.95fd	a8		tay				tay
.95fe	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9601	aa		tax				tax
.9602	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.9605	20 12 96	jsr $9612			jsr 	AllocateXABytes 			; allocate memory
.9608	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.960b	8a		txa				txa
.960c	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.960f	7a		ply				ply
.9610	fa		plx				plx
.9611	60		rts				rts
.9612					AllocateXABytes:
.9612	5a		phy				phy
.9613	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9616	84 36		sty $36				sty 	zTemp0
.9618	5a		phy				phy
.9619	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.961c	84 37		sty $37				sty 	zTemp0+1
.961e	5a		phy				phy
.961f	18		clc				clc 								; add to low memory pointer
.9620	6d 0c 07	adc $070c			adc 	lowMemPtr
.9623	8d 0c 07	sta $070c			sta 	lowMemPtr
.9626	8a		txa				txa
.9627	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.962a	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.962d	b0 2f		bcs $965e			bcs 	CISSMemory
.962f	20 50 96	jsr $9650			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9632					_ClearMemory:
.9632	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9635	c5 36		cmp $36				cmp 	zTemp0
.9637	d0 07		bne $9640			bne 	_CMClearNext
.9639	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.963c	c5 37		cmp $37				cmp 	zTemp0+1
.963e	f0 0c		beq $964c			beq 	_CMExit
.9640					_CMClearNext:
.9640	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9642	92 36		sta ($36)			sta 	(zTemp0)
.9644	e6 36		inc $36				inc 	zTemp0
.9646	d0 ea		bne $9632			bne 	_ClearMemory
.9648	e6 37		inc $37				inc		zTemp0+1
.964a	80 e6		bra $9632			bra 	_ClearMemory
.964c					_CMExit:
.964c	fa		plx				plx
.964d	68		pla				pla
.964e	7a		ply				ply
.964f	60		rts				rts
.9650					CheckIdentifierStringSpace:
.9650	48		pha				pha
.9651	ad 0d 07	lda $070d			lda 	lowMemPtr+1 				; get low memory pointer
.9654	18		clc				clc
.9655	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9657	cd 0f 07	cmp $070f			cmp 	StringMemory+1 				; is it >= StringMemory
.965a	b0 02		bcs $965e			bcs 	CISSMemory
.965c	68		pla				pla
.965d	60		rts				rts
.965e					CISSMemory:
.965e	a9 06		lda #$06		lda	#6
.9660	4c 89 8d	jmp $8d89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a48a					AscUnary:
.a48a	fa		plx				plx 								; restore stack pos
.a48b	20 a0 98	jsr $98a0			jsr 	EvaluateString 				; get a string
.a48e	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a490	20 43 99	jsr $9943			jsr 	NSMSetByte
.a493	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.a496	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a497					FracUnary:
.a497	fa		plx				plx 								; restore stack pos
.a498	20 95 98	jsr $9895			jsr 	EvaluateNumber 				; get a float or int
.a49b	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.a49e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a4a1	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a4a3	f0 04		beq $a4a9			beq 	_IUZero
.a4a5	20 67 a3	jsr $a367			jsr 	FloatFractionalPart
.a4a8	60		rts				rts
.a4a9					_IUZero:
.a4a9	20 41 99	jsr $9941			jsr 	NSMSetZero
.a4ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a4ad					IntUnary:
.a4ad	fa		plx				plx 								; restore stack pos
.a4ae	20 95 98	jsr $9895			jsr 	EvaluateNumber 				; get a float or int
.a4b1	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.a4b4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a4b7	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a4b9	f0 03		beq $a4be			beq 	_IUExit
.a4bb	20 ca a3	jsr $a3ca			jsr 	FloatIntegerPart
.a4be					_IUExit:
.a4be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a4bf					LenUnary:
.a4bf	fa		plx				plx 								; restore stack pos
.a4c0	20 a0 98	jsr $98a0			jsr 	EvaluateString 				; get a string
.a4c3	5a		phy				phy
.a4c4	a0 00		ldy #$00			ldy 	#0 							; find length
.a4c6					_LenFind:
.a4c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.a4c8	f0 06		beq $a4d0			beq 	_LenExit
.a4ca	c8		iny				iny
.a4cb	d0 f9		bne $a4c6			bne 	_LenFind
.a4cd	4c ad a6	jmp $a6ad			jmp 	RangeError 					; string > 255
.a4d0					_LenExit:
.a4d0	98		tya				tya
.a4d1	20 43 99	jsr $9943			jsr 	NSMSetByte
.a4d4	7a		ply				ply
.a4d5	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.a4d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9663					Unary_Not:
.9663	fa		plx				plx
.9664	20 b8 98	jsr $98b8			jsr 	EvaluateInteger 			; get integer
.9667	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.966a	20 71 99	jsr $9971			jsr 	NSMIsZero 					; zero mantissa ?
.966d	f0 04		beq $9673			beq 	_NotZero
.966f	20 41 99	jsr $9941			jsr 	NSMSetZero
.9672	60		rts				rts
.9673					_NotZero:
.9673	4c f6 8d	jmp $8df6			jmp 	ReturnTrue
.9676					_UNBad:
.9676	4c b7 a6	jmp $a6b7			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9679					Unary_Random:
.9679	fa		plx				plx
.967a	20 f2 96	jsr $96f2			jsr 	Random32Bit 				; get a random number
.967d	20 d7 96	jsr $96d7			jsr 	URCopyToMantissa  			; put in mantissa
.9680	e8		inx				inx
.9681	20 cd 98	jsr $98cd			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9684	ca		dex				dex
.9685	20 46 a1	jsr $a146			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9688	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer positive
.968b	9e 28 06	stz $0628,x			stz 	NSExponent,x
.968e	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.9691	60		rts				rts
.9692					Unary_Rnd:
.9692	fa		plx				plx
.9693	20 95 98	jsr $9895			jsr 	EvaluateNumber 				; number to use.
.9696	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 			; closing bracket
.9699	20 71 99	jsr $9971			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.969c	f0 2b		beq $96c9			beq 	_URCopySeed
.969e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.96a1	10 23		bpl $96c6			bpl 	_URDontSeed
.96a3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.96a6	49 17		eor #$17			eor 	#$17
.96a8	8d 08 07	sta $0708			sta 	RandomSeed+0
.96ab	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.96ae	49 a5		eor #$a5			eor 	#$A5
.96b0	8d 09 07	sta $0709			sta 	RandomSeed+1
.96b3	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.96b6	49 c2		eor #$c2			eor 	#$C2
.96b8	8d 0a 07	sta $070a			sta 	RandomSeed+2
.96bb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.96be	49 9d		eor #$9d			eor 	#$9D
.96c0	8d 0b 07	sta $070b			sta 	RandomSeed+3
.96c3	20 f2 96	jsr $96f2			jsr 	Random32Bit
.96c6					_URDontSeed:
.96c6	20 f2 96	jsr $96f2			jsr 	Random32Bit 				; generate a number.
.96c9					_URCopySeed:
.96c9	20 d7 96	jsr $96d7			jsr 	URCopyToMantissa 			; copy into mantissa
.96cc	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.96ce	8d 28 06	sta $0628			sta 	NSExponent
.96d1	a9 08		lda #$08			lda 	#NSTFloat
.96d3	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
.96d6	60		rts				rts
.96d7					URCopyToMantissa:
.96d7	ad 08 07	lda $0708			lda 	RandomSeed+0
.96da	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.96dd	ad 09 07	lda $0709			lda 	RandomSeed+1
.96e0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96e3	ad 0a 07	lda $070a			lda 	RandomSeed+2
.96e6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96e9	ad 0b 07	lda $070b			lda 	RandomSeed+3
.96ec	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.96ee	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96f1	60		rts				rts
.96f2					Random32Bit:
.96f2	5a		phy				phy
.96f3	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.96f5	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.96f8	d0 03		bne $96fd			bne 	_Random1
.96fa	a8		tay				tay 								; if so do it 256 times
.96fb	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.96fd					_Random1:
.96fd	0a		asl a				asl 	a 							; LSFR RNG
.96fe	2e 09 07	rol $0709			rol 	RandomSeed+1
.9701	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9704	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9707	90 02		bcc $970b			bcc 	_Random2
.9709	49 c5		eor #$c5			eor 	#$C5
.970b					_Random2:
.970b	88		dey				dey
.970c	d0 ef		bne $96fd			bne 	_Random1
.970e	8d 08 07	sta $0708			sta 	RandomSeed+0
.9711	7a		ply				ply
.9712	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a4d9					SgnUnary:
.a4d9	fa		plx				plx 								; restore stack pos
.a4da	20 95 98	jsr $9895			jsr 	EvaluateNumber 				; get a float or int
.a4dd	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.a4e0	20 71 99	jsr $9971			jsr 	NSMIsZero 					; if zero
.a4e3	f0 10		beq $a4f5			beq 	_SGZero  					; return Int Zero
.a4e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a4e8	48		pha				pha
.a4e9	a9 01		lda #$01			lda 	#1 							; set to 1
.a4eb	20 43 99	jsr $9943			jsr 	NSMSetByte
.a4ee	68		pla				pla
.a4ef	29 80		and #$80			and		#$80 						; copy the sign byte out
.a4f1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a4f4	60		rts				rts
.a4f5	20 41 99	jsr $9941	_SGZero:jsr 	NSMSetZero
.a4f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a4f9					ValUnary:
.a4f9	fa		plx				plx 								; restore stack pos
.a4fa	20 0f a5	jsr $a50f			jsr 	ValMainCode 				; do the main val() code
.a4fd	b0 01		bcs $a500			bcs 	_VUError 					; couldn't convert
.a4ff	60		rts				rts
.a500					_VUError:
.a500	4c b2 a6	jmp $a6b2			jmp 	TypeError
.a503					IsValUnary:
.a503	fa		plx				plx 								; restore stack pos
.a504	20 0f a5	jsr $a50f			jsr 	ValMainCode 				; do the main val() code
.a507	b0 03		bcs $a50c			bcs 	_VUBad
.a509	4c f6 8d	jmp $8df6			jmp 	ReturnTrue
.a50c					_VUBad:
.a50c	4c 02 8e	jmp $8e02			jmp 	ReturnFalse
.a50f					ValMainCode:
.a50f	20 a0 98	jsr $98a0			jsr 	EvaluateString 				; get a string
.a512	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 			; check right bracket present
.a515	5a		phy				phy
.a516	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a518	f0 17		beq $a531			beq 	_VMCFail2
.a51a	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a51c	48		pha				pha 								; save first character
.a51d	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a51f	d0 01		bne $a522			bne 	_VMCStart
.a521	c8		iny				iny 								; skip over -
.a522					_VMCStart:
.a522	38		sec				sec 								; initialise first time round.
.a523					_VMCNext:
.a523	c8		iny				iny 								; pre-increment
.a524	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a526	f0 0c		beq $a534			beq 	_VMCSuccess 				; successful.
.a528	20 45 93	jsr $9345			jsr 	EncodeNumber 				; send it to the number-builder
.a52b	90 03		bcc $a530			bcc 	_VMCFail 					; if failed, give up.
.a52d	18		clc				clc 								; next time round, countinue
.a52e	80 f3		bra $a523			bra 	_VMCNext
.a530					_VMCFail:
.a530	68		pla				pla
.a531					_VMCFail2:
.a531	7a		ply				ply
.a532	38		sec				sec
.a533	60		rts				rts
.a534					_VMCSuccess:
.a534	a9 00		lda #$00			lda 	#0 							; construct final
.a536	20 45 93	jsr $9345			jsr 	EncodeNumber
.a539	68		pla				pla
.a53a	c9 2d		cmp #$2d			cmp 	#"-"
.a53c	d0 03		bne $a541			bne 	_VMCNotNegative
.a53e	20 ed 98	jsr $98ed			jsr		NSMNegate
.a541					_VMCNotNegative:
.a541	7a		ply				ply
.a542	18		clc				clc
.a543	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9713					ChrUnary:
.9713	fa		plx				plx 								; restore stack pos
.9714	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger			; get value
.9717	48		pha				pha
.9718	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.971b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.971d	20 cf a9	jsr $a9cf			jsr 	StringTempAllocate
.9720	68		pla				pla 								; write number to it
.9721	20 0d aa	jsr $aa0d			jsr 	StringTempWrite
.9724	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9725					SpcUnary:
.9725	fa		plx				plx 								; restore stack pos
.9726	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger			; get value
.9729	5a		phy				phy
.972a	48		pha				pha 								; save count
.972b	20 cf a9	jsr $a9cf			jsr 	StringTempAllocate
.972e	7a		ply				ply 								; to do count in Y
.972f					_SpcLoop:
.972f	c0 00		cpy #$00			cpy 	#0
.9731	f0 08		beq $973b			beq 	_SpcExit
.9733	a9 20		lda #$20			lda 	#32
.9735	20 0d aa	jsr $aa0d			jsr 	StringTempWrite
.9738	88		dey				dey
.9739	80 f4		bra $972f			bra 	_SPCLoop
.973b					_SpcExit:
.973b	7a		ply				ply
.973c	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket
.973f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9740					Unary_Str:
.9740	fa		plx				plx
.9741	20 95 98	jsr $9895			jsr 	EvaluateNumber  			; get number
.9744	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 			; closing bracket
.9747	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9749	20 62 97	jsr $9762			jsr 	ConvertNumberToString 		; do the conversion.
.974c	a9 21		lda #$21			lda		#33 						; create buffer
.974e	20 cf a9	jsr $a9cf			jsr 	StringTempAllocate 			; allocate memory
.9751	da		phx				phx
.9752	a2 00		ldx #$00			ldx 	#0
.9754					_USCopy:
.9754	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.9757	20 0d aa	jsr $aa0d			jsr 	StringTempWrite
.975a	e8		inx				inx
.975b	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.975e	d0 f4		bne $9754			bne 	_USCopy
.9760	fa		plx				plx
.9761	60		rts				rts
.9762					ConvertNumberToString:
.9762	5a		phy				phy 								; save code position
.9763	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.9766	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.9769	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.976c	10 0a		bpl $9778			bpl 	_CNTSNotNegative
.976e	29 7f		and #$7f			and 	#$7F 						; make +ve
.9770	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9773	a9 2d		lda #$2d			lda 	#"-"
.9775	20 de 97	jsr $97de			jsr 	WriteDecimalBuffer
.9778					_CNTSNotNegative:
.9778	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.977b	f0 15		beq $9792			beq 	_CNTSNotFloat
.977d	e8		inx				inx 								; round up
.977e	a9 01		lda #$01			lda 	#1
.9780	20 43 99	jsr $9943			jsr 	NSMSetByte
.9783	ca		dex				dex
.9784	bd 28 06	lda $0628,x			lda		NSExponent,x
.9787	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.978a	a9 08		lda #$08			lda 	#NSTFloat
.978c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.978f	20 89 a2	jsr $a289			jsr 	FloatAdd
.9792					_CNTSNotFloat:
.9792	20 c0 97	jsr $97c0			jsr 	MakePlusTwoString
.9795	20 67 a3	jsr $a367			jsr 	FloatFractionalPart 		; get the fractional part
.9798	20 2b a4	jsr $a42b			jsr 	NSNormalise					; normalise , exit if zero
.979b	f0 21		beq $97be			beq 	_CNTSExit
.979d	a9 2e		lda #$2e			lda 	#"."
.979f	20 de 97	jsr $97de			jsr 	WriteDecimalBuffer 			; write decimal place
.97a2					_CNTSDecimal:
.97a2	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.97a5	30 17		bmi $97be			bmi 	_CNTSExit
.97a7	e8		inx				inx 								; x 10.0
.97a8	a9 0a		lda #$0a			lda 	#10
.97aa	20 43 99	jsr $9943			jsr 	NSMSetByte
.97ad	a9 08		lda #$08			lda 	#NSTFloat
.97af	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97b2	ca		dex				dex
.97b3	20 f4 a3	jsr $a3f4			jsr 	FloatMultiply
.97b6	20 c0 97	jsr $97c0			jsr 	MakePlusTwoString
.97b9	20 67 a3	jsr $a367			jsr 	FloatFractionalPart 		; get the fractional part
.97bc	80 e4		bra $97a2			bra 	_CNTSDecimal 				; keep going.
.97be					_CNTSExit:
.97be	7a		ply				ply
.97bf	60		rts				rts
.97c0					MakePlusTwoString:
.97c0	da		phx				phx
.97c1	20 18 99	jsr $9918			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.97c4	e8		inx				inx 								; access it
.97c5	e8		inx				inx
.97c6	20 ca a3	jsr $a3ca			jsr 	FloatIntegerPart 			; make it an integer
.97c9	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.97cb	20 33 a2	jsr $a233			jsr 	ConvertInt32
.97ce	a2 00		ldx #$00			ldx	 	#0
.97d0					_MPTSCopy:
.97d0	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.97d3	20 de 97	jsr $97de			jsr 	WriteDecimalBuffer
.97d6	e8		inx				inx
.97d7	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.97da	d0 f4		bne $97d0			bne 	_MPTSCopy
.97dc	fa		plx				plx
.97dd	60		rts				rts
.97de					WriteDecimalBuffer:
.97de	da		phx				phx
.97df	ae 15 07	ldx $0715			ldx 	dbOffset
.97e2	9d 99 08	sta $0899,x			sta 	DecimalBuffer,x
.97e5	9e 9a 08	stz $089a,x			stz 	DecimalBuffer+1,x
.97e8	ee 15 07	inc $0715			inc 	dbOffset
.97eb	fa		plx				plx
.97ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.97ed					Unary_Left:
.97ed	fa		plx				plx
.97ee	18		clc				clc 								; only one parameter
.97ef	20 64 98	jsr $9864			jsr 	SubstringInitial 			; set up.
.97f2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.97f5	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.97f8	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.97fb	80 2c		bra $9829			bra 	SubstringMain
.97fd					Unary_Right:
.97fd	fa		plx				plx
.97fe	18		clc				clc 								; only one parameter
.97ff	20 64 98	jsr $9864			jsr 	SubstringInitial 			; set up.
.9802	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9805	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9808	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.980b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.980e	b0 02		bcs $9812			bcs 	_URNotUnderflow
.9810	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9812					_URNotUnderFlow:
.9812	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9815	80 12		bra $9829			bra 	SubStringMain
.9817					Unary_Mid:
.9817	fa		plx				plx
.9818	38		sec				sec 								; two parameters
.9819	20 64 98	jsr $9864			jsr 	SubstringInitial 			; set up.
.981c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.981f	f0 05		beq $9826			beq 	_UMError
.9821	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9824	80 03		bra $9829			bra 	SubStringMain
.9826					_UMError:
.9826	4c b7 a6	jmp $a6b7			jmp 	ArgumentError
.9829					SubStringMain:
.9829	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.982c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.982f	b0 2d		bcs $985e			bcs 	_SSMNull 					; if so, return an empty string.
.9831	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9834	f0 28		beq $985e			beq 	_SSMNull 					; return empty string.
.9836	18		clc				clc 								; add the offset +1 to the address and
.9837	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.983a	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.983d	85 36		sta $36				sta 	zTemp0
.983f	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9842	69 00		adc #$00			adc 	#0
.9844	85 37		sta $37				sta 	zTemp0+1
.9846					_SSMNoCarry:
.9846	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9849	20 cf a9	jsr $a9cf			jsr 	StringTempAllocate 			; allocate that many characters
.984c	5a		phy				phy 								; save Y
.984d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.984f					_SSMCopy:
.984f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9851	f0 09		beq $985c			beq 	_SSMEString 				; no more to copy
.9853	20 0d aa	jsr $aa0d			jsr 	StringTempWrite 			; and write it out.
.9856	c8		iny				iny
.9857	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.985a	d0 f3		bne $984f			bne 	_SSMCopy
.985c					_SSMEString:
.985c	7a		ply				ply
.985d					_SSMExit:
.985d	60		rts				rts
.985e					_SSMNull:
.985e	a9 00		lda #$00			lda 	#0
.9860	20 cf a9	jsr $a9cf			jsr 	StringTempAllocate
.9863	60		rts				rts
.9864					SubstringInitial:
.9864	da		phx				phx 								; save initial stack position
.9865	08		php				php 								; save carry on stack indicating 2 parameters
.9866	20 a0 98	jsr $98a0			jsr 	EvaluateString 				; get a string
.9869	5a		phy				phy 								; calculate length to exponent.
.986a	a0 ff		ldy #$ff			ldy 	#$FF
.986c					_SIFindLength:
.986c	c8		iny				iny
.986d	b1 36		lda ($36),y			lda 	(zTemp0),y
.986f	d0 fb		bne $986c			bne 	_SIFindLength
.9871	98		tya				tya
.9872	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9875	7a		ply				ply
.9876	e8		inx				inx
.9877	20 ca a0	jsr $a0ca			jsr 	CheckComma 					; comma next
.987a	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger 		; get next parameter
.987d	28		plp				plp 								; is it the last parameter ?
.987e	90 07		bcc $9887			bcc 	_SSIExit 					; if so, exit.
.9880	e8		inx				inx
.9881	20 ca a0	jsr $a0ca			jsr 	CheckComma 					; comma next
.9884	20 d9 98	jsr $98d9			jsr 	Evaluate8BitInteger 		; get last parameter
.9887					_SSIExit:
.9887	fa		plx				plx
.9888	20 c2 a0	jsr $a0c2			jsr 	CheckRightBracket 			; check closing bracket
.988b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.988c					EvaluateValue:
.988c	48		pha				pha
.988d	20 92 91	jsr $9192			jsr		EvaluateExpression 			; expression
.9890	20 a7 92	jsr $92a7			jsr 	Dereference					; derefernce it
.9893	68		pla				pla
.9894	60		rts				rts
.9895					EvaluateNumber:
.9895	20 8c 98	jsr $988c			jsr 	EvaluateValue 				; get a value
.9898	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.989b	29 10		and #$10			and 	#NSBIsString
.989d	d0 16		bne $98b5			bne 	HelperTypeError
.989f	60		rts				rts
.98a0					EvaluateString:
.98a0	20 8c 98	jsr $988c			jsr 	EvaluateValue 				; get a value
.98a3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.98a6	29 10		and #$10			and 	#NSBIsString
.98a8	f0 0b		beq $98b5			beq 	HelperTypeError
.98aa					CopyAddressToTemp0:
.98aa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.98ad	85 36		sta $36				sta 	zTemp0
.98af	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.98b2	85 37		sta $37				sta 	zTemp0+1
.98b4	60		rts				rts
.98b5					HelperTypeError:
.98b5	4c b2 a6	jmp $a6b2			jmp 	TypeError
.98b8					EvaluateInteger:
.98b8	20 95 98	jsr $9895			jsr 	EvaluateNumber
.98bb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.98be	d0 0a		bne $98ca			bne 	HelperValueError 			; if not, it's a float.
.98c0	60		rts				rts
.98c1					EvaluateUnsignedInteger:
.98c1	20 b8 98	jsr $98b8			jsr 	EvaluateInteger 			; check integer is +ve
.98c4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.98c7	30 01		bmi $98ca			bmi 	HelperValueError
.98c9	60		rts				rts
.98ca					HelperValueError:
.98ca	4c b7 a6	jmp $a6b7			jmp 	ArgumentError
.98cd					Evaluate16BitInteger:
.98cd	20 c1 98	jsr $98c1			jsr	 	EvaluateUnsignedInteger		; get integer
.98d0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.98d3	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.98d6	d0 f2		bne $98ca			bne 	HelperValueError
.98d8	60		rts				rts
.98d9					Evaluate8BitInteger:
.98d9	20 c1 98	jsr $98c1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.98dc	d0 ec		bne $98ca			bne 	HelperValueError
.98de	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.98e1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.98e4	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.98e7	d0 e1		bne $98ca			bne 	HelperValueError
.98e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.98ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a544					Multiply8x8:
.a544	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a545	85 36		sta $36			  	sta 	zTemp0
.a547	86 37		stx $37				stx 	zTemp0+1
.a549	a9 00		lda #$00			lda 	#0
.a54b	a2 08		ldx #$08			ldx 	#8
.a54d					_M88Loop:
.a54d	90 03		bcc $a552			bcc 	_M88NoAdd
.a54f	18		clc				clc
.a550	65 37		adc $37				adc 	zTemp0+1
.a552					_M88NoAdd:
.a552	6a		ror a				ror 	a
.a553	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a555	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a556	d0 f5		bne $a54d			bne 	_M88Loop
.a558	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a55a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.98ed					NSMNegate:
.98ed	bd 00 06	lda $0600,x			lda 	NSStatus,x
.98f0	49 80		eor #$80			eor 	#NSBIsNegative
.98f2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98f5	60		rts				rts
.98f6					NSMNegateMantissa:
.98f6	38		sec				sec
.98f7	a9 00		lda #$00			lda 	#0
.98f9	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.98fc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.98ff	a9 00		lda #$00			lda 	#0
.9901	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9904	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9907	a9 00		lda #$00			lda 	#0
.9909	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.990c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.990f	a9 00		lda #$00			lda 	#0
.9911	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9914	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9917	60		rts				rts
.9918					NSMShiftUpTwo:
.9918	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.991b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.991e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9921	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9924	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9927	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.992a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.992d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9930	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9933	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9936	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9939	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.993c	60		rts				rts
.993d					NSMSetZeroMantissaOnly:
.993d	a9 00		lda #$00			lda 	#0
.993f	80 08		bra $9949			bra 	NSMSetMantissa
.9941					NSMSetZero:
.9941	a9 00		lda #$00			lda 	#0
.9943					NSMSetByte:
.9943	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9946	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9949					NSMSetMantissa:
.9949	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.994c	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.994f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9952	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9955	60		rts				rts
.9956					NSMShiftLeft:
.9956	18		clc				clc
.9957					NSMRotateLeft:
.9957	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.995a	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.995d	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9960	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9963	60		rts				rts
.9964					NSMShiftRight:
.9964	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9967	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.996a	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.996d	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9970	60		rts				rts
.9971					NSMIsZero:
.9971	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9974	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9977	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.997a	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.997d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a55b					Assemble_ora:
.a55b	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a55e	01					.byte $01
.a55f					Assemble_and:
.a55f	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a562	21					.byte $21
.a563					Assemble_eor:
.a563	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a566	41					.byte $41
.a567					Assemble_adc:
.a567	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a56a	61					.byte $61
.a56b					Assemble_sta:
.a56b	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a56e	81					.byte $81
.a56f					Assemble_lda:
.a56f	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a572	a1					.byte $a1
.a573					Assemble_cmp:
.a573	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a576	c1					.byte $c1
.a577					Assemble_sbc:
.a577	20 b4 80	jsr $80b4		jsr	AssembleGroup1
>a57a	e1					.byte $e1
.a57b					Assemble_asl:
.a57b	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a57e	02					.byte $02
>a57f	75					.byte $75
.a580					Assemble_rol:
.a580	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a583	22					.byte $22
>a584	75					.byte $75
.a585					Assemble_lsr:
.a585	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a588	42					.byte $42
>a589	75					.byte $75
.a58a					Assemble_ror:
.a58a	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a58d	62					.byte $62
>a58e	75					.byte $75
.a58f					Assemble_stx:
.a58f	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a592	82					.byte $82
>a593	50					.byte $50
.a594					Assemble_ldx:
.a594	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a597	a2					.byte $a2
>a598	d0					.byte $d0
.a599					Assemble_dec:
.a599	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a59c	c2					.byte $c2
>a59d	55					.byte $55
.a59e					Assemble_inc:
.a59e	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5a1	e2					.byte $e2
>a5a2	55					.byte $55
.a5a3					Assemble_stz:
.a5a3	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5a6	60					.byte $60
>a5a7	44					.byte $44
.a5a8					Assemble_bit:
.a5a8	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5ab	20					.byte $20
>a5ac	55					.byte $55
.a5ad					Assemble_sty:
.a5ad	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5b0	80					.byte $80
>a5b1	54					.byte $54
.a5b2					Assemble_ldy:
.a5b2	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5b5	a0					.byte $a0
>a5b6	d5					.byte $d5
.a5b7					Assemble_cpy:
.a5b7	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5ba	c0					.byte $c0
>a5bb	d4					.byte $d4
.a5bc					Assemble_cpx:
.a5bc	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5bf	e0					.byte $e0
>a5c0	d0					.byte $d0
.a5c1					Assemble_tsb:
.a5c1	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5c4	00					.byte $00
>a5c5	50					.byte $50
.a5c6					Assemble_trb:
.a5c6	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5c9	10					.byte $10
>a5ca	50					.byte $50
.a5cb					Assemble_jsr:
.a5cb	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5ce	14					.byte $14
>a5cf	10					.byte $10
.a5d0					Assemble_jmp:
.a5d0	20 bb 80	jsr $80bb		jsr	AssembleGroup2
>a5d3	40					.byte $40
>a5d4	10					.byte $10
.a5d5					Assemble_bpl:
.a5d5	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5d8	10					.byte $10
.a5d9					Assemble_bmi:
.a5d9	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5dc	30					.byte $30
.a5dd					Assemble_bvc:
.a5dd	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5e0	50					.byte $50
.a5e1					Assemble_bvs:
.a5e1	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5e4	70					.byte $70
.a5e5					Assemble_bcc:
.a5e5	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5e8	90					.byte $90
.a5e9					Assemble_bcs:
.a5e9	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5ec	b0					.byte $b0
.a5ed					Assemble_bne:
.a5ed	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5f0	d0					.byte $d0
.a5f1					Assemble_beq:
.a5f1	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5f4	f0					.byte $f0
.a5f5					Assemble_bra:
.a5f5	20 0c 81	jsr $810c		jsr	AssembleGroup3
>a5f8	80					.byte $80
.a5f9					Assemble_brk:
.a5f9	20 42 81	jsr $8142		jsr	AssembleGroup4
>a5fc	00					.byte $00
.a5fd					Assemble_php:
.a5fd	20 42 81	jsr $8142		jsr	AssembleGroup4
>a600	08					.byte $08
.a601					Assemble_clc:
.a601	20 42 81	jsr $8142		jsr	AssembleGroup4
>a604	18					.byte $18
.a605					Assemble_plp:
.a605	20 42 81	jsr $8142		jsr	AssembleGroup4
>a608	28					.byte $28
.a609					Assemble_sec:
.a609	20 42 81	jsr $8142		jsr	AssembleGroup4
>a60c	38					.byte $38
.a60d					Assemble_rti:
.a60d	20 42 81	jsr $8142		jsr	AssembleGroup4
>a610	40					.byte $40
.a611					Assemble_pha:
.a611	20 42 81	jsr $8142		jsr	AssembleGroup4
>a614	48					.byte $48
.a615					Assemble_cli:
.a615	20 42 81	jsr $8142		jsr	AssembleGroup4
>a618	58					.byte $58
.a619					Assemble_phy:
.a619	20 42 81	jsr $8142		jsr	AssembleGroup4
>a61c	5a					.byte $5a
.a61d					Assemble_rts:
.a61d	20 42 81	jsr $8142		jsr	AssembleGroup4
>a620	60					.byte $60
.a621					Assemble_pla:
.a621	20 42 81	jsr $8142		jsr	AssembleGroup4
>a624	68					.byte $68
.a625					Assemble_sei:
.a625	20 42 81	jsr $8142		jsr	AssembleGroup4
>a628	78					.byte $78
.a629					Assemble_ply:
.a629	20 42 81	jsr $8142		jsr	AssembleGroup4
>a62c	7a					.byte $7a
.a62d					Assemble_dey:
.a62d	20 42 81	jsr $8142		jsr	AssembleGroup4
>a630	88					.byte $88
.a631					Assemble_txa:
.a631	20 42 81	jsr $8142		jsr	AssembleGroup4
>a634	8a					.byte $8a
.a635					Assemble_tya:
.a635	20 42 81	jsr $8142		jsr	AssembleGroup4
>a638	98					.byte $98
.a639					Assemble_txs:
.a639	20 42 81	jsr $8142		jsr	AssembleGroup4
>a63c	9a					.byte $9a
.a63d					Assemble_tay:
.a63d	20 42 81	jsr $8142		jsr	AssembleGroup4
>a640	a8					.byte $a8
.a641					Assemble_tax:
.a641	20 42 81	jsr $8142		jsr	AssembleGroup4
>a644	aa					.byte $aa
.a645					Assemble_clv:
.a645	20 42 81	jsr $8142		jsr	AssembleGroup4
>a648	b8					.byte $b8
.a649					Assemble_tsx:
.a649	20 42 81	jsr $8142		jsr	AssembleGroup4
>a64c	ba					.byte $ba
.a64d					Assemble_iny:
.a64d	20 42 81	jsr $8142		jsr	AssembleGroup4
>a650	c8					.byte $c8
.a651					Assemble_dex:
.a651	20 42 81	jsr $8142		jsr	AssembleGroup4
>a654	ca					.byte $ca
.a655					Assemble_cld:
.a655	20 42 81	jsr $8142		jsr	AssembleGroup4
>a658	d8					.byte $d8
.a659					Assemble_phx:
.a659	20 42 81	jsr $8142		jsr	AssembleGroup4
>a65c	da					.byte $da
.a65d					Assemble_stp:
.a65d	20 42 81	jsr $8142		jsr	AssembleGroup4
>a660	db					.byte $db
.a661					Assemble_inx:
.a661	20 42 81	jsr $8142		jsr	AssembleGroup4
>a664	e8					.byte $e8
.a665					Assemble_nop:
.a665	20 42 81	jsr $8142		jsr	AssembleGroup4
>a668	ea					.byte $ea
.a669					Assemble_sed:
.a669	20 42 81	jsr $8142		jsr	AssembleGroup4
>a66c	f8					.byte $f8
.a66d					Assemble_plx:
.a66d	20 42 81	jsr $8142		jsr	AssembleGroup4
>a670	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a671					DecimalScalarTable:
>a671	66 66 66 66				.dword $66666666 ; 0.1
>a675	de					.byte $de
>a676	1f 85 eb 51				.dword $51eb851f ; 0.01
>a67a	db					.byte $db
>a67b	4c 37 89 41				.dword $4189374c ; 0.001
>a67f	d8					.byte $d8
>a680	ac 8b db 68				.dword $68db8bac ; 0.0001
>a684	d4					.byte $d4
>a685	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a689	d1					.byte $d1
>a68a	83 de 1b 43				.dword $431bde83 ; 1e-06
>a68e	ce					.byte $ce
>a68f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a693	ca					.byte $ca
>a694	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a698	c7					.byte $c7
>a699	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a69d	c4					.byte $c4
>a69e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a6a2	c0					.byte $c0
>a6a3	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a6a7	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a6a8					SyntaxError:
.a6a8	a9 02		lda #$02		lda	#2
.a6aa	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a6ad					RangeError:
.a6ad	a9 04		lda #$04		lda	#4
.a6af	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a6b2					TypeError:
.a6b2	a9 05		lda #$05		lda	#5
.a6b4	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a6b7					ArgumentError:
.a6b7	a9 07		lda #$07		lda	#7
.a6b9	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a6bc					NotDoneError:
.a6bc	a9 0c		lda #$0c		lda	#12
.a6be	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a6c1					ErrorText:
>a6c1	42 72 65 61 6b 00			.text	"Break",0
>a6c7	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a6cf	72 72 6f 72 00
>a6d4	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a6dc	20 62 79 20 7a 65 72 6f 00
>a6e5	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a6ed	61 6e 67 65 00
>a6f2	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a6fa	6d 61 74 63 68 00
>a700	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a708	65 6d 6f 72 79 00
>a70e	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a716	61 72 67 75 6d 65 6e 74 00
>a71f	53 74 6f 70 00				.text	"Stop",0
>a724	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a72c	6f 6f 20 6c 6f 6e 67 00
>a734	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a73c	6e 20 66 61 69 6c 65 64 00
>a745	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a74d	61 74 61 00
>a751	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a759	65 6e 74 65 64 00
>a75f	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a767	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a773	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a77b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a788	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a790	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a79d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a7a5	68 6f 75 74 20 57 68 69 6c 65 00
>a7b0	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a7b8	68 6f 75 74 20 46 6f 72 00
>a7c1	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a7c9	61 63 6b 20 66 75 6c 6c 00
>a7d2	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a7da	75 63 74 75 72 65 00
>a7e1	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a7e9	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a7f6	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a7fe	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a80c	41 72 72 61 79 20 73 69			.text	"Array size",0
>a814	7a 65 00
>a817	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a81f	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a827	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 305."
>a82f	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>a83f	32 32 2e 20 42 75 69 6c 64 20 33 30 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a84d					EXTPrintCharacter:
.a84d	48		pha				pha
.a84e	da		phx				phx
.a84f	5a		phy				phy
.a850	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a853	7a		ply				ply
.a854	fa		plx				plx
.a855	68		pla				pla
.a856	60		rts				rts
.a857					EXTInputSingleCharacter:
.a857	da		phx				phx
.a858	5a		phy				phy
.a859					_EISCWait:
.a859	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a85c	c9 00		cmp #$00			cmp 	#0
.a85e	f0 f9		beq $a859			beq 	_EISCWait
.a860	7a		ply				ply
.a861	fa		plx				plx
.a862	60		rts				rts
.a863					EXTInputLine:
.a863	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a865					_ILLoop:
.a865	da		phx				phx 								; read character in
.a866	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a869	fa		plx				plx
.a86a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a86c	f0 12		beq $a880			beq 	_ILBackspace
.a86e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a870	f0 15		beq $a887			beq 	_ILExit
.a872	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a874	90 ef		bcc $a865			bcc 	_ILLoop
.a876	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a878	f0 eb		beq $a865			beq 	_ILLoop
.a87a	9d 26 08	sta $0826,x			sta 	lineBuffer,x 				; save it
.a87d	e8		inx				inx
.a87e	80 e5		bra $a865			bra 	_ILLoop
.a880					_ILBackspace:
.a880	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a882	f0 e1		beq $a865			beq 	_ILLoop
.a884	ca		dex				dex 								; back one.
.a885	80 de		bra $a865			bra 	_ILLoop
.a887					_ILExit:
.a887	20 4d a8	jsr $a84d			jsr 	EXTPrintCharacter
.a88a	9e 26 08	stz $0826,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a88d	60		rts				rts
.a88e					EXTBreakCheck:
.a88e	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a891					MemoryDeleteLine:
.a891	20 b0 a8	jsr $a8b0			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a894	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a896	a8		tay				tay
.a897					_MDDLLoop:
.a897	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a899	92 30		sta ($30)			sta 	(codePtr)
.a89b	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a89d	c5 3a		cmp $3a				cmp 	zTemp2
.a89f	d0 07		bne $a8a8			bne 	_MDLDLNext
.a8a1	a5 31		lda $31				lda 	codePtr+1
.a8a3	c5 3b		cmp $3b				cmp 	zTemp2+1
.a8a5	d0 01		bne $a8a8			bne 	_MDLDLNext
.a8a7					_MDDLExit:
.a8a7	60		rts				rts
.a8a8					_MDLDLNext:
.a8a8	e6 30		inc $30				inc 	codePtr						; next byte
.a8aa	d0 eb		bne $a897			bne 	_MDDLLoop
.a8ac	e6 31		inc $31				inc 	codePtr+1
.a8ae	80 e7		bra $a897			bra 	_MDDLLoop
.a8b0					IMemoryFindEnd:
.a8b0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8b2	85 3a		sta $3a				sta 	0+zTemp2
.a8b4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8b6	85 3b		sta $3b				sta 	1+zTemp2
.a8b8					_MDLFELoop:
.a8b8	b2 3a		lda ($3a)			lda 	(zTemp2)
.a8ba	f0 0b		beq $a8c7			beq 	_MDLFEExit
.a8bc	18		clc				clc
.a8bd	65 3a		adc $3a				adc 	zTemp2
.a8bf	85 3a		sta $3a				sta 	zTemp2
.a8c1	90 f5		bcc $a8b8			bcc 	_MDLFELoop
.a8c3	e6 3b		inc $3b				inc 	zTemp2+1
.a8c5	80 f1		bra $a8b8			bra 	_MDLFELoop
.a8c7					_MDLFEExit:
.a8c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a8c8					MemoryInsertLine:
.a8c8	08		php				php
.a8c9	20 b0 a8	jsr $a8b0			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8cc	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a8ce	1a		inc a				inc 	a
.a8cf	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a8d1	b0 36		bcs $a909			bcs 	_MDLIError
.a8d3	28		plp				plp
.a8d4	90 08		bcc $a8de			bcc 	_MDLIFound
.a8d6	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a8d8	85 30		sta $30				sta 	codePtr
.a8da	a5 3b		lda $3b				lda 	zTemp2+1
.a8dc	85 31		sta $31				sta 	codePtr+1
.a8de					_MDLIFound:
.a8de	ad 26 07	lda $0726			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a8e1	a8		tay				tay
.a8e2					_MDLIInsert:
.a8e2	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a8e4	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a8e6	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a8e8	c5 3a		cmp $3a				cmp 	zTemp2
.a8ea	d0 06		bne $a8f2			bne 	_MDLINext
.a8ec	a5 31		lda $31				lda 	codePtr+1
.a8ee	c5 3b		cmp $3b				cmp 	zTemp2+1
.a8f0	f0 0a		beq $a8fc			beq 	_MDLIHaveSpace
.a8f2					_MDLINext:
.a8f2	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a8f4	d0 02		bne $a8f8			bne 	_MDLINoBorrow
.a8f6	c6 3b		dec $3b				dec 	zTemp2+1
.a8f8					_MDLINoBorrow:
.a8f8	c6 3a		dec $3a				dec 	zTemp2
.a8fa	80 e6		bra $a8e2			bra 	_MDLIInsert
.a8fc					_MDLIHaveSpace:
.a8fc	ac 26 07	ldy $0726			ldy 	tokenOffset 				; bytes to copy
.a8ff	88		dey				dey 								; from offset-1 to 0
.a900					_MDLICopy:
.a900	b9 26 07	lda $0726,y			lda 	tokenOffset,y
.a903	91 30		sta ($30),y			sta 	(codePtr),y
.a905	88		dey				dey
.a906	10 f8		bpl $a900			bpl 	_MDLICopy
.a908	60		rts				rts
.a909					_MDLIError:
.a909	a9 06		lda #$06		lda	#6
.a90b	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.a90e					MDLAppendLine:
.a90e	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a910	85 36		sta $36				sta 	zTemp0
.a912	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a914	85 38		sta $38				sta 	0+zTemp1
.a916	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a918	85 39		sta $39				sta 	1+zTemp1
.a91a	b2 38		lda ($38)			lda 	(zTemp1)
.a91c	d0 0a		bne $a928			bne 	_MDLANoInitialise
.a91e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a920	8d bd 08	sta $08bd			sta 	0+AppendPointer
.a923	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a925	8d be 08	sta $08be			sta 	1+AppendPointer
.a928					_MDLANoInitialise:
.a928	18		clc				clc
.a929	ad bd 08	lda $08bd			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a92c	85 38		sta $38				sta 	zTemp1
.a92e	72 36		adc ($36)			adc 	(zTemp0)
.a930	8d bd 08	sta $08bd			sta 	AppendPointer
.a933	ad be 08	lda $08be			lda 	AppendPointer+1
.a936	85 39		sta $39				sta 	zTemp1+1
.a938	69 00		adc #$00			adc 	#0
.a93a	8d be 08	sta $08be			sta 	AppendPointer+1
.a93d	a0 00		ldy #$00			ldy 	#0
.a93f					_MDLACopy:
.a93f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a941	91 38		sta ($38),y			sta 	(zTemp1),y
.a943	c8		iny				iny
.a944	98		tya				tya
.a945	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a947	d0 f6		bne $a93f			bne 	_MDLACopy
.a949	a9 00		lda #$00			lda 	#0 							; end of program.
.a94b	91 38		sta ($38),y			sta 	(zTemp1),y
.a94d	60		rts				rts
.08bd					AppendPointer:
>08bd							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.997e					MemoryNew:
.997e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9980	85 30		sta $30				sta 	codePtr
.9982	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9984	85 31		sta $31				sta 	codePtr+1
.9986	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9988	92 30		sta ($30)			sta 	(codePtr)
.998a	60		rts				rts
.998b					MemoryInline:
.998b	98		tya				tya 								; put address into stack,x
.998c	18		clc				clc
.998d	65 30		adc $30				adc 	codePtr
.998f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9992	a5 31		lda $31				lda 	codePtr+1
.9994	69 00		adc #$00			adc 	#0
.9996	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9999	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.999c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.999f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.99a0					MemorySearch:
.99a0	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.99a2	86 37		stx $37				stx 	zTemp0+1
.99a4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99a6	85 30		sta $30				sta 	codePtr
.99a8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99aa	85 31		sta $31				sta 	codePtr+1
.99ac					_MTAXLoop:
.99ac	b2 30		lda ($30)			lda 	(codePtr)
.99ae	18		clc				clc
.99af	f0 21		beq $99d2			beq 	_MTAXExit 					; reached end, exit with CC.
.99b1	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.99b3	b1 30		lda ($30),y			lda 	(codePtr),y
.99b5	38		sec				sec
.99b6	e5 36		sbc $36				sbc 	zTemp0
.99b8	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.99ba	c8		iny				iny 								; do the MSB
.99bb	b1 30		lda ($30),y			lda 	(codePtr),y
.99bd	e5 37		sbc $37				sbc 	zTemp0+1
.99bf	05 38		ora $38				ora 	zTemp1
.99c1	f0 0f		beq $99d2			beq 	_MTAXExit	 				; found
.99c3	b0 0d		bcs $99d2			bcs 	_MTAXExit 					; current < required exit
.99c5	18		clc				clc
.99c6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.99c8	65 30		adc $30				adc 	codePtr
.99ca	85 30		sta $30				sta 	codePtr
.99cc	90 02		bcc $99d0			bcc 	_CREExit
.99ce	e6 31		inc $31				inc 	codePtr+1
.99d0					_CREExit:
.99d0	80 da		bra $99ac			bra 	_MTAXLoop
.99d2					_MTAXExit:
.99d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.99d3					StackPushByte:
.99d3	48		pha				pha 								; save byte
.99d4	a5 34		lda $34				lda 	BasicStack
.99d6	d0 09		bne $99e1			bne 	_SPBNoBorrow
.99d8	c6 35		dec $35				dec 	BasicStack+1
.99da	48		pha				pha
.99db	a5 35		lda $35				lda 	BasicStack+1
.99dd	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.99df	90 06		bcc $99e7			bcc 	_SPBMemory
.99e1					_SPBNoBorrow:
.99e1	c6 34		dec $34				dec 	BasicStack
.99e3	68		pla				pla 								; get back and write
.99e4	92 34		sta ($34)			sta 	(BasicStack)
.99e6	60		rts				rts
.99e7					_SPBMemory:
.99e7	a9 12		lda #$12		lda	#18
.99e9	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.99ec					StackPopByte:
.99ec	b2 34		lda ($34)			lda 	(BasicStack)
.99ee	e6 34		inc $34				inc 	BasicStack
.99f0	d0 02		bne $99f4			bne 	_SPBNoCarry
.99f2	e6 35		inc $35				inc 	BasicStack+1
.99f4					_SPBNoCarry:
.99f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.99f5					StackOpen:
.99f5	48		pha				pha 								; save frame byte
.99f6	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.99f8	0a		asl a				asl 	a 							; claim twice this for storage
.99f9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.99fb	38		sec				sec 								; so basically subtracting from
.99fc	65 34		adc $34				adc 	basicStack 	 				; basicStack
.99fe	85 34		sta $34				sta 	basicStack
.9a00	b0 08		bcs $9a0a			bcs 	_SONoBorrow
.9a02	c6 35		dec $35				dec 	basicStack+1
.9a04	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9a06	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9a08	90 04		bcc $9a0e			bcc 	_SOMemory
.9a0a					_SONoBorrow:
.9a0a	68		pla				pla 								; get marker back and write at TOS
.9a0b	92 34		sta ($34)			sta 	(basicStack)
.9a0d	60		rts				rts
.9a0e					_SOMemory:
.9a0e	a9 12		lda #$12		lda	#18
.9a10	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.9a13					StackClose:
.9a13	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9a15	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9a17	0a		asl a				asl 	a 							; claim twice this.
.9a18	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9a1a	85 34		sta $34				sta 	basicStack
.9a1c	90 02		bcc $9a20			bcc 	_SCExit
.9a1e	e6 35		inc $35				inc 	basicStack+1
.9a20					_SCExit:
.9a20	60		rts				rts
.9a21					StackCheckFrame:
.9a21	48		pha				pha
.9a22					_StackRemoveLocals:
.9a22	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9a24	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9a26	b0 05		bcs $9a2d			bcs 	_SCNoLocal
.9a28	20 69 a0	jsr $a069			jsr 	LocalPopValue
.9a2b	80 f5		bra $9a22			bra 	_StackRemoveLocals
.9a2d					_SCNoLocal:
.9a2d	68		pla				pla
.9a2e	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9a30	29 f0		and #$f0			and 	#$F0 						; check type bits
.9a32	d0 01		bne $9a35			bne 	_SCFError 					; different, we have structures mixed up
.9a34	60		rts				rts
.9a35					_SCFError:
.9a35	8a		txa				txa 								; report error X
.9a36	4c 89 8d	jmp $8d89			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9a39					STKSaveCodePosition:
.9a39	5a		phy				phy
.9a3a	98		tya				tya 								; save Y
.9a3b	a0 05		ldy #$05			ldy 	#5
.9a3d	91 34		sta ($34),y			sta 	(basicStack),y
.9a3f	88		dey				dey 								; save Code Pointer
.9a40					_STKSaveLoop:
.9a40	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9a43	91 34		sta ($34),y			sta 	(basicStack),y
.9a45	88		dey				dey
.9a46	d0 f8		bne $9a40			bne 	_STKSaveLoop
.9a48	7a		ply				ply
.9a49	60		rts				rts
.9a4a					STKLoadCodePosition:
.9a4a	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9a4c					_STKLoadLoop:
.9a4c	b1 34		lda ($34),y			lda 	(basicStack),y
.9a4e	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9a51	c8		iny				iny
.9a52	c0 05		cpy #$05			cpy 	#5
.9a54	d0 f6		bne $9a4c			bne 	_STKLoadLoop
.9a56	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9a58	a8		tay				tay
.9a59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9a5a					StackReset:
.9a5a	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9a5c	85 34		sta $34				sta 	0+basicStack
.9a5e	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9a60	85 35		sta $35				sta 	1+basicStack
.9a62	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9a64	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9a66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a94e					StringConcrete:
.a94e	5a		phy				phy 								; save position on stack
.a94f	20 50 96	jsr $9650			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a952	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a955	85 38		sta $38				sta 	zTemp1
.a957	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a95a	85 39		sta $39				sta 	zTemp1+1
.a95c	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a95e					_SALength:
.a95e	c8		iny				iny
.a95f	b1 38		lda ($38),y			lda 	(zTemp1),y
.a961	d0 fb		bne $a95e			bne 	_SALength
.a963	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a965	b0 3f		bcs $a9a6			bcs 	_SALengthError
.a967	98		tya				tya 				 				; length of the new string
.a968	18		clc				clc
.a969	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a96b	90 02		bcc $a96f			bcc 	_SAHaveLength
.a96d	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a96f					_SAHaveLength:
.a96f	48		pha				pha 								; save length.
.a970	38		sec				sec
.a971	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a973	6d 0e 07	adc $070e			adc 	StringMemory
.a976	8d 0e 07	sta $070e			sta 	StringMemory
.a979	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a97b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a97e	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a980	6d 0f 07	adc $070f			adc 	StringMemory+1
.a983	8d 0f 07	sta $070f			sta 	StringMemory+1
.a986	85 3b		sta $3b				sta 	zTemp2+1
.a988	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a98b	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a98c	38		sec				sec
.a98d	e9 03		sbc #$03			sbc 	#3
.a98f	92 3a		sta ($3a)			sta 	(zTemp2)
.a991	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a993	a0 01		ldy #$01			ldy 	#1
.a995	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a997					_SACopyNewString:
.a997	a0 00		ldy #$00			ldy 	#0
.a999					_SACopyNSLoop:
.a999	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a99b	c8		iny				iny 								; write two on in string storage
.a99c	c8		iny				iny
.a99d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a99f	88		dey				dey 								; this makes it one one.
.a9a0	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a9a2	d0 f5		bne $a999			bne 	_SACopyNSLoop
.a9a4	7a		ply				ply
.a9a5	60		rts				rts
.a9a6					_SALengthError:
.a9a6	a9 09		lda #$09		lda	#9
.a9a8	4c 89 8d	jmp $8d89		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a9ab					StringSystemInitialise:
.a9ab	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a9ad	8d 0e 07	sta $070e			sta 	0+StringMemory
.a9b0	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a9b2	8d 0f 07	sta $070f			sta 	1+StringMemory
.a9b5	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a9b8	60		rts				rts
.a9b9					StringSpaceInitialise:
.a9b9	20 50 96	jsr $9650			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a9bc	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a9be	8d 10 07	sta $0710			sta 	StringInitialised
.a9c1	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a9c4	8d 11 07	sta $0711			sta 	StringTempPointer
.a9c7	ad 0f 07	lda $070f			lda 	StringMemory+1
.a9ca	3a		dec a				dec 	a
.a9cb	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a9ce	60		rts				rts
.a9cf					StringTempAllocate:
.a9cf	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a9d1	b0 35		bcs $aa08			bcs 	_STALength
.a9d3	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a9d6	30 05		bmi $a9dd			bmi 	_STAAllocate
.a9d8	48		pha				pha 								; save value to subtract.
.a9d9	20 b9 a9	jsr $a9b9			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a9dc	68		pla				pla 								; restore it
.a9dd					_STAAllocate:
.a9dd	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a9df	18		clc				clc  								; deliberate allows one more
.a9e0	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a9e3	8d 11 07	sta $0711			sta 	StringTempPointer
.a9e6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a9e9	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a9eb	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a9ee	69 ff		adc #$ff			adc 	#$FF
.a9f0	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a9f3	85 3d		sta $3d				sta 	zsTemp+1
.a9f5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a9f8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a9fb	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a9fe	a9 10		lda #$10			lda 	#NSTString
.aa00	9d 00 06	sta $0600,x			sta 	NSStatus,x
.aa03	a9 00		lda #$00			lda 	#0 							; clear the target string
.aa05	92 3c		sta ($3c)			sta 	(zsTemp)
.aa07	60		rts				rts
.aa08					_STALength:
.aa08	a9 09		lda #$09		lda	#9
.aa0a	4c 89 8d	jmp $8d89		jmp	ErrorHandler
.aa0d					StringTempWrite:
.aa0d	48		pha				pha
.aa0e	92 3c		sta ($3c)			sta 	(zsTemp)
.aa10	e6 3c		inc $3c				inc 	zsTemp
.aa12	d0 02		bne $aa16			bne 	_STWNoCarry
.aa14	e6 3d		inc $3d				inc 	zsTemp+1
.aa16					_STWNoCarry:
.aa16	a9 00		lda #$00			lda 	#0
.aa18	92 3c		sta ($3c)			sta 	(zsTemp)
.aa1a	68		pla				pla
.aa1b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9a67					BackloadProgram:
.9a67	a2 ff		ldx #$ff			ldx 	#$FF
.9a69	20 91 9a	jsr $9a91			jsr 	BLReadByte
.9a6c	30 1f		bmi $9a8d			bmi 	_BPExit
.9a6e					_BPCopy:
.9a6e	e8		inx				inx  								; copy byte in
.9a6f	9d 26 08	sta $0826,x			sta 	lineBuffer,x
.9a72	9e 27 08	stz $0827,x			stz 	lineBuffer+1,x
.9a75	20 91 9a	jsr $9a91			jsr 	BLReadByte 					; read next byte
.9a78	30 0a		bmi $9a84			bmi 	_BPEndLine 					; -ve = EOL
.9a7a	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9a7c	d0 02		bne $9a80			bne 	_BPNotTab
.9a7e	a9 20		lda #$20			lda 	#' '
.9a80					_BPNotTab:
.9a80	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9a82	b0 ea		bcs $9a6e			bcs 	_BPCopy
.9a84					_BPEndLine:
.9a84	20 ba 9d	jsr $9dba			jsr 	TokeniseLine 				; tokenise the line.
.9a87	38		sec				sec 								; append not insert
.9a88	20 c8 a8	jsr $a8c8			jsr 	MemoryInsertLine 			; append to current program
.9a8b	80 da		bra $9a67			bra 	BackloadProgram
.9a8d					_BPExit:
.9a8d	20 ba 83	jsr $83ba			jsr 	ClearCommand 				; clear variables etc.
.9a90	60		rts				rts
.9a91					BLReadByte:
.9a91					_BLLoad:
.9a91	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9a94	ee 92 9a	inc $9a92			inc 	_BLLoad+1
.9a97	d0 03		bne $9a9c			bne 	_BLNoCarry
.9a99	ee 93 9a	inc $9a93			inc 	_BLLoad+2
.9a9c					_BLNoCarry:
.9a9c	c9 00		cmp #$00			cmp 	#0
.9a9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9a9f					TokeniseSearchTable:
.9a9f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9aa1	85 36		sta $36				sta 	zTemp0
.9aa3	a0 00		ldy #$00			ldy 	#0
.9aa5	a9 80		lda #$80			lda 	#$80 						; token #
.9aa7	85 38		sta $38				sta 	zTemp1
.9aa9					_TSTLoop:
.9aa9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9aab	30 49		bmi $9af6			bmi 	_TSTFail 					; -ve = end of table
.9aad	f0 2e		beq $9add			beq 	_TSTNext 					; zero, check next it's a dummy
.9aaf	c8		iny				iny 								; get the hash
.9ab0	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ab2	88		dey				dey
.9ab3	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9ab6	d0 25		bne $9add			bne 	_TSTNext
.9ab8	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9abb	38		sec				sec
.9abc	ed 00 07	sbc $0700			sbc 	identStart
.9abf	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9ac1	d0 1a		bne $9add			bne 	_TSTNext
.9ac3	5a		phy				phy 								; save Y , we might fail
.9ac4	c8		iny				iny 								; point to text
.9ac5	c8		iny				iny
.9ac6	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9ac9					_TSTCompareName:
.9ac9	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; compare text.
.9acc	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9ace	d0 0c		bne $9adc			bne 	_TSTNextPullY 				; fail, pullY and do next
.9ad0	e8		inx				inx
.9ad1	c8		iny				iny
.9ad2	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9ad5	d0 f2		bne $9ac9			bne 	_TSTCompareName
.9ad7	7a		ply				ply 								; throw Y
.9ad8	a5 38		lda $38				lda 	zTemp1 						; get token #
.9ada	38		sec				sec 								; return with CS = passed.
.9adb	60		rts				rts
.9adc					_TSTNextPullY:
.9adc	7a		ply				ply 								; restore current, fall through.
.9add					_TSTNext:
.9add	e6 38		inc $38				inc 	zTemp1 						; token counter
.9adf	98		tya				tya
.9ae0	18		clc				clc
.9ae1	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9ae3	1a		inc a				inc 	a 							; +1
.9ae4	1a		inc a				inc 	a 							; +2
.9ae5	a8		tay				tay
.9ae6	10 c1		bpl $9aa9			bpl 	_TSTLoop 					; if Y < $80 loop back
.9ae8	98		tya				tya 								; add Y to zTemp0 and reset Y
.9ae9	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9aeb	18		clc				clc  								; but have tables > 255 bytes
.9aec	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9aee	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9af0	90 b7		bcc $9aa9			bcc 	_TSTLoop
.9af2	e6 37		inc $37				inc 	zTemp0+1
.9af4	80 b3		bra $9aa9			bra 	_TSTLoop
.9af6					_TSTFail:
.9af6	18		clc				clc
.9af7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9af8					KeywordSet0:
>9af8	00 65					.text	0,$65,""               ; $80 !0:EOF
>9afa	00 58					.text	0,$58,""               ; $81 !1:SH1
>9afc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9afe	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9b04	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9b0c	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9b12	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9b19	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9b20	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9b27	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9b2d	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9b35	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9b3d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9b43	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9b4a	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9b50	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9b58	28
>9b59	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9b61	28
>9b62	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9b68	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9b6e	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9b74	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9b7b	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9b81	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9b87	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9b8c	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9b90	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9b96	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9b9e	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9ba5	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9bac	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9bb4	43
>9bb5	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9bbb	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9bc1	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9bc8	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9bce	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9bd4	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9bd9	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9bdf	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9be4	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9bec	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9bf2	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9bf9	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9bff	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9c04	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9c0b	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9c12	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9c18	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9c1d	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9c25	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9c29	ff					.text	$FF
.9c2a					KeywordSet1:
>9c2a	00 65					.text	0,$65,""               ; $80 !0:EOF
>9c2c	00 58					.text	0,$58,""               ; $81 !1:SH1
>9c2e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9c30	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9c38	4c 45
>9c3a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9c42	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9c49	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9c4e	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9c54	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9c59	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9c61	45
>9c62	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9c67	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9c6d	ff					.text	$FF
.9c6e					KeywordSet2:
>9c6e	00 65					.text	0,$65,""               ; $80 !0:EOF
>9c70	00 58					.text	0,$58,""               ; $81 !1:SH1
>9c72	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9c74	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9c79	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9c7e	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9c83	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9c88	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9c8d	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9c92	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9c97	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9c9c	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9ca1	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9ca6	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9cab	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9cb0	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9cb5	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9cba	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9cbf	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9cc4	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9cc9	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9cce	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9cd3	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9cd8	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9cdd	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9ce2	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9ce7	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9cec	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9cf1	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9cf6	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9cfb	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9d00	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9d05	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9d0a	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9d0f	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9d14	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9d19	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9d1e	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9d23	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9d28	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9d2d	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9d32	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9d37	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9d3c	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9d41	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9d46	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9d4b	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9d50	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9d55	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9d5a	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9d5f	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9d64	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9d69	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9d6e	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9d73	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9d78	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9d7d	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>9d82	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>9d87	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>9d8c	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>9d91	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>9d96	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>9d9b	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>9da0	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>9da5	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>9daa	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>9daf	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>9db4	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>9db9	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9dba					TokeniseLine:
.9dba	20 42 9f	jsr $9f42			jsr 	FixLineBufferCase 			; fix line case
.9dbd	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9dbf	8d 26 07	sta $0726			sta 	tokenOffset
.9dc2	9c 27 07	stz $0727			stz 	tokenLineNumber
.9dc5	9c 28 07	stz $0728			stz 	tokenLineNumber+1
.9dc8	a2 ff		ldx #$ff			ldx 	#$FF
.9dca					_TKFindFirst:
.9dca	e8		inx				inx
.9dcb	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9dce	f0 79		beq $9e49			beq 	_TKExit
.9dd0	c9 20		cmp #$20			cmp 	#' '
.9dd2	90 f6		bcc $9dca			bcc 	_TKFindFirst
.9dd4	c9 30		cmp #$30			cmp 	#'0'
.9dd6	90 07		bcc $9ddf			bcc 	_TKNoLineNumber
.9dd8	c9 3a		cmp #$3a			cmp 	#'9'+1
.9dda	b0 03		bcs $9ddf			bcs 	_TKNoLineNumber
.9ddc	20 6c 9f	jsr $9f6c			jsr 	TokeniseExtractLineNumber
.9ddf					_TKNoLineNumber:
.9ddf					_TKTokeniseLoop:
.9ddf	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9de2	f0 65		beq $9e49			beq 	_TKExit
.9de4	e8		inx				inx
.9de5	c9 20		cmp #$20			cmp 	#' '
.9de7	f0 f6		beq $9ddf			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9de9	ca		dex				dex 								; undo last get, A contains character, X is position.
.9dea	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9dec	f0 61		beq $9e4f			beq 	_TKTokeniseIdentifier
.9dee	c9 41		cmp #$41			cmp 	#'A'
.9df0	90 04		bcc $9df6			bcc 	_TKTokenisePunctuation
.9df2	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9df4	90 59		bcc $9e4f			bcc 	_TKTokeniseIdentifier
.9df6					_TKTokenisePunctuation:
.9df6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9df8	f0 27		beq $9e21			beq 	_TKString
.9dfa	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9dfc	f0 28		beq $9e26			beq 	_TKHexConstant
.9dfe	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9e00	f0 29		beq $9e2b			beq 	_TKCheckDouble
.9e02	c9 3e		cmp #$3e			cmp 	#'>'
.9e04	f0 25		beq $9e2b			beq 	_TKCheckDouble
.9e06					_TKStandardPunctuation:
.9e06	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get it back.
.9e09	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9e0b	90 0e		bcc $9e1b			bcc 	_TKNoShift
.9e0d	48		pha				pha 								; save
.9e0e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9e10	85 36		sta $36				sta 	zTemp0
.9e12	68		pla				pla
.9e13	29 20		and #$20			and 	#32 						; bit 5
.9e15	4a		lsr a				lsr 	a 							; shift into bit 3
.9e16	4a		lsr a				lsr 	a
.9e17	05 36		ora $36				ora 	zTemp0
.9e19	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9e1b					_TKNoShift:
.9e1b	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte 			; write the punctuation character
.9e1e	e8		inx				inx 								; consume the character
.9e1f	80 be		bra $9ddf			bra 	_TKTokeniseLoop 			; and loop round again.
.9e21					_TKString:
.9e21	20 d1 9e	jsr $9ed1			jsr 	TokeniseString
.9e24	80 b9		bra $9ddf			bra 	_TKTokeniseLoop
.9e26					_TKHexConstant:
.9e26	20 0c 9f	jsr $9f0c			jsr 	TokeniseHexConstant
.9e29	80 b4		bra $9ddf			bra 	_TKTokeniseLoop
.9e2b					_TKCheckDouble:
.9e2b	bd 27 08	lda $0827,x			lda 	lineBuffer+1,x 				; get next character
.9e2e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9e30	90 d4		bcc $9e06			bcc 	_TKStandardPunctuation
.9e32	c9 3f		cmp #$3f			cmp 	#'>'+1
.9e34	b0 d0		bcs $9e06			bcs 	_TKStandardPunctuation
.9e36	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9e39	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9e3b	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9e3c	7d 27 08	adc $0827,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9e3f	38		sec				sec
.9e40	e9 3c		sbc #$3c			sbc 	#'<'
.9e42	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9e45	e8		inx				inx 								; consume both
.9e46	e8		inx				inx
.9e47	80 96		bra $9ddf			bra 	_TKTokeniseLoop
.9e49	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9e4b	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.9e4e	60		rts				rts
.9e4f					_TKTokeniseIdentifier:
.9e4f	8e 00 07	stx $0700			stx 	identStart 					; save start
.9e52	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9e55					_TKCheckLoop:
.9e55	e8		inx				inx 								; look at next, we know first is identifier.
.9e56	bd 26 08	lda $0826,x			lda  	lineBuffer,x
.9e59	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9e5b	f0 f8		beq $9e55			beq 	_TKCheckLoop
.9e5d	c9 30		cmp #$30			cmp	 	#"0"
.9e5f	90 0c		bcc $9e6d			bcc 	_TKEndIdentifier
.9e61	c9 3a		cmp #$3a			cmp 	#"9"+1
.9e63	90 f0		bcc $9e55			bcc 	_TKCheckLoop
.9e65	c9 41		cmp #$41			cmp	 	#"A"
.9e67	90 04		bcc $9e6d			bcc 	_TKEndIdentifier
.9e69	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9e6b	90 e8		bcc $9e55			bcc 	_TKCheckLoop
.9e6d					_TKEndIdentifier:
.9e6d	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9e70	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9e72	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9e74	f0 06		beq $9e7c			beq 	_TKHasTypeCharacter
.9e76	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9e78	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9e7a	d0 07		bne $9e83			bne 	_TKNoTypeCharacter
.9e7c					_TKHasTypeCharacter:
.9e7c	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9e7f	e8		inx				inx 								; read next
.9e80	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9e83					_TKNoTypeCharacter:
.9e83	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9e85	d0 09		bne $9e90			bne 	_TKNoArray
.9e87	e8		inx				inx 								; skip the (
.9e88	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9e8b	09 04		ora #$04			ora 	#$04
.9e8d	8d 04 07	sta $0704			sta 	identTypeByte
.9e90					_TKNoArray:
.9e90	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9e93	20 2d 9f	jsr $9f2d			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9e96	a0 9a		ldy #$9a			ldy 	#(KeywordSet0) >> 8
.9e98	a9 f8		lda #$f8			lda 	#(KeywordSet0) & $FF
.9e9a	20 9f 9a	jsr $9a9f			jsr 	TokeniseSearchTable
.9e9d	a2 00		ldx #$00			ldx 	#0
.9e9f	b0 1f		bcs $9ec0			bcs 	_TKFoundToken
.9ea1	a0 9c		ldy #$9c			ldy 	#(KeywordSet1) >> 8
.9ea3	a9 2a		lda #$2a			lda 	#(KeywordSet1) & $FF
.9ea5	20 9f 9a	jsr $9a9f			jsr 	TokeniseSearchTable
.9ea8	a2 81		ldx #$81			ldx 	#$81
.9eaa	b0 14		bcs $9ec0			bcs 	_TKFoundToken
.9eac	a0 9c		ldy #$9c			ldy 	#(KeywordSet2) >> 8
.9eae	a9 6e		lda #$6e			lda 	#(KeywordSet2) & $FF
.9eb0	20 9f 9a	jsr $9a9f			jsr 	TokeniseSearchTable
.9eb3	a2 82		ldx #$82			ldx 	#$82
.9eb5	b0 09		bcs $9ec0			bcs 	_TKFoundToken
.9eb7	20 bd 9f	jsr $9fbd			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9eba	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9ebd	4c df 9d	jmp $9ddf			jmp 	_TKTokeniseLoop 			; and go round again.
.9ec0					_TKFoundToken:
.9ec0	48		pha				pha 								; save token
.9ec1	8a		txa				txa 								; shift in X, is there one ?
.9ec2	f0 03		beq $9ec7			beq 	_TKNoTShift
.9ec4	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte 			; if so, write it out
.9ec7					_TKNoTShift:
.9ec7	68		pla				pla 								; restore and write token
.9ec8	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.9ecb	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9ece	4c df 9d	jmp $9ddf			jmp 	_TKTokeniseLoop 			; and go round again.
.9ed1					TokeniseString:
.9ed1	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9ed3	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.9ed6	e8		inx				inx									; start of quoted string.
.9ed7	da		phx				phx 								; push start of string on top
.9ed8	ca		dex				dex
.9ed9					_TSFindEnd:
.9ed9	e8		inx				inx
.9eda	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character
.9edd	f0 04		beq $9ee3			beq 	_TSEndOfString
.9edf	c9 22		cmp #$22			cmp 	#'"'
.9ee1	d0 f6		bne $9ed9			bne 	_TSFindEnd
.9ee3					_TSEndOfString:
.9ee3	7a		ply				ply  								; so now Y is first character, X is character after end.
.9ee4	48		pha				pha 								; save terminating character
.9ee5	20 ed 9e	jsr $9eed			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9ee8	68		pla				pla 								; terminating character
.9ee9	f0 01		beq $9eec			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9eeb	e8		inx				inx
.9eec					_TSNotQuote:
.9eec	60		rts				rts
.9eed					TOWriteBlockXY:
.9eed	86 36		stx $36				stx 	zTemp0 						; write end character
.9eef	98		tya				tya
.9ef0	49 ff		eor #$ff			eor 	#$FF
.9ef2	38		sec				sec
.9ef3	65 36		adc $36				adc 	zTemp0
.9ef5	1a		inc a				inc 	a 							; one extra for NULL
.9ef6	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.9ef9					_TOBlockLoop:
.9ef9	c4 36		cpy $36				cpy 	zTemp0
.9efb	f0 09		beq $9f06			beq 	_TOBlockExit
.9efd	b9 26 08	lda $0826,y			lda 	lineBuffer,y
.9f00	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.9f03	c8		iny				iny
.9f04	80 f3		bra $9ef9			bra 	_TOBlockLoop
.9f06					_TOBlockExit:
.9f06	a9 00		lda #$00			lda 	#0
.9f08	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.9f0b	60		rts				rts
.9f0c					TokeniseHexConstant:
.9f0c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9f0e	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.9f11	e8		inx				inx									; start of quoted string.
.9f12	da		phx				phx 								; push start of constant on top
.9f13	ca		dex				dex
.9f14					_THFindLoop:
.9f14	e8		inx				inx
.9f15	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9f18	c9 30		cmp #$30			cmp 	#"0"
.9f1a	90 0c		bcc $9f28			bcc 	_THFoundEnd
.9f1c	c9 3a		cmp #$3a			cmp 	#"9"+1
.9f1e	90 f4		bcc $9f14			bcc 	_THFindLoop
.9f20	c9 41		cmp #$41			cmp 	#"A"
.9f22	90 04		bcc $9f28			bcc 	_THFoundEnd
.9f24	c9 47		cmp #$47			cmp 	#"F"+1
.9f26	90 ec		bcc $9f14			bcc 	_THFindLoop
.9f28					_THFoundEnd:
.9f28	7a		ply				ply 								; restore start
.9f29	20 ed 9e	jsr $9eed			jsr 	TOWriteBlockXY 				; output the block
.9f2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9f2d					TokeniseCalculateHash:
.9f2d	da		phx				phx
.9f2e	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9f31	a9 00		lda #$00			lda 	#0
.9f33					_TCHLoop:
.9f33	18		clc				clc
.9f34	7d 26 08	adc $0826,x			adc 	lineBuffer,x
.9f37	e8		inx				inx
.9f38	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9f3b	d0 f6		bne $9f33			bne 	_TCHLoop
.9f3d	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9f40	fa		plx				plx
.9f41	60		rts				rts
.9f42					FixLineBufferCase:
.9f42	a2 00		ldx #$00			ldx 	#0
.9f44					_FLBCLoop:
.9f44	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next character
.9f47	f0 22		beq $9f6b			beq 	_FLBCExit 					; end of string.
.9f49	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9f4b	f0 11		beq $9f5e			beq 	_FLBCInQuotes
.9f4d	e8		inx				inx
.9f4e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9f50	90 f2		bcc $9f44			bcc 	_FLBCLoop
.9f52	c9 7b		cmp #$7b			cmp 	#'z'+1
.9f54	b0 ee		bcs $9f44			bcs 	_FLBCLoop
.9f56	38		sec				sec 								; make U/C
.9f57	e9 20		sbc #$20			sbc 	#32
.9f59	9d 25 08	sta $0825,x			sta	 	lineBuffer-1,x 				; write back
.9f5c	80 e6		bra $9f44			bra 	_FLBCLoop
.9f5e					_FLBCInQuotes:
.9f5e	e8		inx				inx 								; advance
.9f5f	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next
.9f62	f0 07		beq $9f6b			beq 	_FLBCExit 					; exit on EOS
.9f64	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9f66	d0 f6		bne $9f5e			bne 	_FLBCInQuotes
.9f68	e8		inx				inx 								; skip over it
.9f69	80 d9		bra $9f44			bra 	_FLBCLoop
.9f6b					_FLBCExit:
.9f6b	60		rts				rts
.9f6c					TokeniseExtractLineNumber:
.9f6c	ad 28 07	lda $0728			lda 	tokenLineNumber+1 			; push current value on stack
.9f6f	48		pha				pha
.9f70	ad 27 07	lda $0727			lda 	tokenLineNumber
.9f73	48		pha				pha
.9f74	20 aa 9f	jsr $9faa			jsr 	_TELNTimes2 				; line # x 4
.9f77	20 aa 9f	jsr $9faa			jsr 	_TELNTimes2 				; line # x 2
.9f7a	18		clc				clc 								; add stacked value
.9f7b	68		pla				pla
.9f7c	6d 27 07	adc $0727			adc 	tokenLineNumber
.9f7f	8d 27 07	sta $0727			sta 	tokenLineNumber
.9f82	68		pla				pla
.9f83	6d 28 07	adc $0728			adc 	tokenLineNumber+1
.9f86	8d 28 07	sta $0728			sta 	tokenLineNumber+1 			; line # x 5
.9f89	20 aa 9f	jsr $9faa			jsr 	_TELNTimes2 				; line # x 10
.9f8c	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get and consume character
.9f8f	e8		inx				inx
.9f90	29 0f		and #$0f			and 	#15 						; add to line #
.9f92	18		clc				clc
.9f93	6d 27 07	adc $0727			adc 	tokenLineNumber
.9f96	8d 27 07	sta $0727			sta 	tokenLineNumber
.9f99	90 03		bcc $9f9e			bcc 	_TLENNoCarry
.9f9b	ee 28 07	inc $0728			inc 	tokenLineNumber+1
.9f9e					_TLENNoCarry:
.9f9e	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; more digits ?
.9fa1	c9 30		cmp #$30			cmp 	#'0'
.9fa3	90 04		bcc $9fa9			bcc 	_TLENExit
.9fa5	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fa7	90 c3		bcc $9f6c			bcc 	TokeniseExtractLineNumber
.9fa9					_TLENExit:
.9fa9	60		rts				rts
.9faa					_TELNTimes2:
.9faa	0e 27 07	asl $0727			asl 	tokenLineNumber
.9fad	2e 28 07	rol $0728			rol 	tokenLineNumber+1
.9fb0	60		rts				rts
.9fb1					TokeniseWriteByte:
.9fb1	da		phx				phx
.9fb2	ae 26 07	ldx $0726			ldx 	tokenOffset 				; next slot to write to
.9fb5	9d 26 07	sta $0726,x			sta 	tokenOffset,x 				; write byte out
.9fb8	ee 26 07	inc $0726			inc 	tokenOffset 				; advance slot.
.9fbb	fa		plx				plx
.9fbc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9fbd					CheckCreateVariableRecord:
.9fbd	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9fbf	85 36		sta $36				sta 	0+zTemp0
.9fc1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9fc3	85 37		sta $37				sta 	1+zTemp0
.9fc5					_CCVSearch:
.9fc5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9fc7	f0 2c		beq $9ff5			beq 	_CCVFail
.9fc9	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9fcb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9fcd	cd 03 07	cmp $0703			cmp 	identHash
.9fd0	d0 16		bne $9fe8			bne 	_CCVNext
.9fd2	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9fd4	ae 00 07	ldx $0700			ldx 	identStart
.9fd7					_CCVCompare:
.9fd7	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9fda	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9fdc	e8		inx				inx 								; advance pointers
.9fdd	c8		iny				iny
.9fde	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9fdf	d0 07		bne $9fe8			bne 	_CCVNext  					; didn't match go to next.
.9fe1	90 f4		bcc $9fd7			bcc 	_CCVCompare 				; not finished yet.
.9fe3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9fe6	f0 41		beq $a029			beq 	_CCVFound 					; yes, we were successful
.9fe8					_CCVNext:
.9fe8	18		clc				clc
.9fe9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9feb	65 36		adc $36				adc 	zTemp0
.9fed	85 36		sta $36				sta 	zTemp0
.9fef	90 d4		bcc $9fc5			bcc 	_CCVSearch
.9ff1	e6 37		inc $37				inc 	zTemp0+1
.9ff3	80 d0		bra $9fc5			bra 	_CCVSearch
.9ff5					_CCVFail:
.9ff5	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9ff7	ad 03 07	lda $0703			lda 	identHash
.9ffa	91 36		sta ($36),y			sta 	(zTemp0),y
.9ffc	c8		iny				iny 								; offset 2 is the type byte
.9ffd	ad 04 07	lda $0704			lda 	identTypeByte
.a000	91 36		sta ($36),y			sta 	(zTemp0),y
.a002	c8		iny				iny
.a003					_CCVData:
.a003	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a005	91 36		sta ($36),y			sta 	(zTemp0),y
.a007	c8		iny				iny
.a008	c0 08		cpy #$08			cpy 	#8
.a00a	90 f7		bcc $a003			bcc 	_CCVData
.a00c	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.a00f					_CCVCopyName:
.a00f	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.a012	91 36		sta ($36),y			sta 	(zTemp0),y
.a014	e8		inx				inx
.a015	c8		iny				iny
.a016	ec 02 07	cpx $0702			cpx 	identTypeEnd
.a019	d0 f4		bne $a00f			bne 	_CCVCopyName
.a01b	98		tya				tya 								; patch offset
.a01c	92 36		sta ($36)			sta 	(zTemp0)
.a01e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a020	91 36		sta ($36),y			sta 	(zTemp0),y
.a022	88		dey				dey
.a023	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a025	09 80		ora #$80			ora 	#$80
.a027	91 36		sta ($36),y			sta 	(zTemp0),y
.a029					_CCVFound:
.a029	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a02b	38		sec				sec
.a02c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a02e	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a030	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.a033	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a035	20 b1 9f	jsr $9fb1			jsr 	TokeniseWriteByte
.a038	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
