
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Nov 14 16:02:53 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 24 a7	jsr $a724			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 86 8d	jsr $8d86			jsr 	PrintStringXA
.8014	20 44 88	jsr $8844			jsr 	NewCommand 					; erase current program
.8017	20 fd 82	jsr $82fd			jsr 	BackloadProgram
.801a	4c 5a 83	jmp $835a			jmp 	WarmStart
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 4d 6f			.text "Built Monday 14-Nov-2022. Build 2682."
>8065	6e 64 61 79 20 31 34 2d 4e 6f 76 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 36 38 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8085					AssembleGroup1:
.8085	a9 ff		lda #$ff			lda 	#$FF
.8087	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808a	80 02		bra $808e			bra 	AsmGroup12
.808c					AssembleGroup2:
.808c	a9 00		lda #$00			lda 	#$00
.808e					AsmGroup12:
.808e	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8091	68		pla				pla 								; pop the return address to access the information following.
.8092	fa		plx				plx
.8093	20 1c 81	jsr $811c			jsr 	AccessParameters 			; get opcode and save as base
.8096	8d a4 04	sta $04a4			sta 	BaseOpcode
.8099	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809c	d0 08		bne $80a6			bne 	_AG12HaveMask
.809e	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a0	20 24 81	jsr $8124			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a3	8d a5 04	sta $04a5			sta 	ModeMask
.80a6					_AG12HaveMask:
.80a6	20 5f 82	jsr $825f			jsr 	TypeAndCalculateOperand 	; get zero page type
.80a9	da		phx				phx 								; save found address mode
.80aa	20 88 81	jsr $8188			jsr 	AssembleModeX
.80ad	fa		plx				plx  								; restore address mode
.80ae	b0 0b		bcs $80bb			bcs 	_AG12Exit
.80b0	20 bc 80	jsr $80bc			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b3	20 88 81	jsr $8188			jsr 	AssembleModeX
.80b6	b0 03		bcs $80bb			bcs 	_AG12Exit
.80b8	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bb					_AG12Exit:
.80bb	60		rts				rts
.80bc					PromoteToAbsolute:
.80bc	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80be	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c0	f0 19		beq $80db			beq 	_PTADo
.80c2	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c4	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c6	f0 13		beq $80db			beq 	_PTADo
.80c8	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80ca	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cc	f0 0d		beq $80db			beq 	_PTADo
.80ce	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d0	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d2	f0 07		beq $80db			beq 	_PTADo
.80d4	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d6	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d8	f0 01		beq $80db			beq 	_PTADo
.80da	60		rts				rts
.80db					_PTADo:
.80db	aa		tax				tax
.80dc	60		rts				rts
.80dd					AssembleGroup3:
.80dd	68		pla				pla 								; get parameters, which is just the opcode.
.80de	fa		plx				plx
.80df	20 1c 81	jsr $811c			jsr 	AccessParameters 			; get and output opcode
.80e2	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.80e5	20 c3 82	jsr $82c3			jsr 	CalculateOperand 			; get a 16 bit operand
.80e8	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80eb	38		sec				sec
.80ec	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80ef	48		pha				pha 								; LSB in A
.80f0	ad 10 04	lda $0410			lda 	NSMantissa1
.80f3	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f6	aa		tax				tax 								; MSB in X
.80f7	68		pla				pla
.80f8	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80f9	69 7f		adc #$7f			adc 	#$7F
.80fb	90 01		bcc $80fe			bcc 	_AG3NoCarry
.80fd	e8		inx				inx
.80fe					_AG3NoCarry:
.80fe	38		sec				sec 								; fix back and write out anyways.
.80ff	e9 80		sbc #$80			sbc 	#$80
.8101	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.8104	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8106	f0 0a		beq $8112			beq 	_AG3Exit
.8108	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810b	29 01		and #$01			and 	#1
.810d	f0 03		beq $8112			beq 	_AG3Exit
.810f	4c 7f 9f	jmp $9f7f			jmp 	RangeError 					; no, branch is out of range
.8112					_AG3Exit:
.8112	60		rts				rts
.8113					AssembleGroup4:
.8113	68		pla				pla 								; pop address
.8114	fa		plx				plx
.8115	20 1c 81	jsr $811c			jsr 	AccessParameters 			; access and get first
.8118	20 34 81	jsr $8134			jsr 	AssemblerWriteByte 			; output it.
.811b	60		rts				rts
.811c					AccessParameters:
.811c	8d a1 04	sta $04a1			sta 	ParamStart
.811f	8e a2 04	stx $04a2			stx 	ParamStart+1
.8122	a9 01		lda #$01			lda 	#1
.8124					GetParameter:
.8124	5a		phy				phy
.8125	a8		tay				tay
.8126	ad a1 04	lda $04a1			lda 	ParamStart
.8129	85 36		sta $36				sta 	zTemp0
.812b	ad a2 04	lda $04a2			lda 	ParamStart+1
.812e	85 37		sta $37				sta 	zTemp0+1
.8130	b1 36		lda ($36),y			lda 	(zTemp0),y
.8132	7a		ply				ply
.8133	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8134					AssemblerWriteByte:
.8134	48		pha			pha
.8135	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8138	29 02		and #$02		and 	#2
.813a	f0 1b		beq $8157		beq 	_AWBNoPrint
.813c	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.813f	20 72 81	jsr $8172		jsr 	PrintHex
.8142	ad 9e 04	lda $049e		lda		AssemblerAddress
.8145	20 72 81	jsr $8172		jsr 	PrintHex
.8148	a9 20		lda #$20		lda 	#' '
.814a	20 38 a7	jsr $a738		jsr 	EXTPrintCharacter
.814d	68		pla			pla 									; print byte
.814e	48		pha			pha
.814f	20 72 81	jsr $8172		jsr 	PrintHex
.8152	a9 0d		lda #$0d		lda 	#13
.8154	20 38 a7	jsr $a738		jsr 	EXTPrintCharacter
.8157					_AWBNoPrint:
.8157	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815a	85 36		sta $36			sta 	zTemp0
.815c	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.815f	f0 0e		beq $816f		beq 	_AWBRange
.8161	85 37		sta $37			sta 	zTemp0+1
.8163	68		pla			pla 									; write byte out
.8164	92 36		sta ($36)		sta 	(zTemp0)
.8166	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8169	d0 03		bne $816e		bne 	_AWBNoCarry
.816b	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816e					_AWBNoCarry:
.816e	60		rts			rts
.816f					_AWBRange:
.816f	4c 7f 9f	jmp $9f7f		jmp 	RangeError
.8172					PrintHex:
.8172	48		pha				pha
.8173	4a		lsr a				lsr 	a
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	20 7b 81	jsr $817b			jsr 	_PrintNibble
.817a	68		pla				pla
.817b					_PrintNibble:
.817b	29 0f		and #$0f			and 	#15
.817d	c9 0a		cmp #$0a			cmp 	#10
.817f	90 02		bcc $8183			bcc 	_NoShift
.8181	69 06		adc #$06			adc 	#6
.8183					_NoShift:
.8183	69 30		adc #$30			adc 	#48
.8185	4c 38 a7	jmp $a738			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8188					AssembleModeX:
.8188	5a		phy				phy
.8189	ad a3 04	lda $04a3			lda 	IsGroup1
.818c	f0 17		beq $81a5			beq 	_AMXGroup2
.818e	8a		txa				txa 							; is it in group # 1
.818f	29 40		and #$40			and 	#AM_ISG1
.8191	f0 50		beq $81e3			beq 	_AMXFail 				; no, give up.
.8193	8a		txa				txa 							; get back.
.8194	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8196	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8198	d0 22		bne $81bc			bne 	_AMXHaveInfo
.819a	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819d	c9 81		cmp #$81			cmp 	#$81
.819f	f0 42		beq $81e3			beq 	_AMXFail
.81a1	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a3	80 17		bra $81bc			bra 	_AMXHaveInfo 			; odd design decision there.
.81a5					_AMXGroup2:
.81a5	8a		txa				txa 							; is it in group 2 ?
.81a6	29 20		and #$20			and 	#AM_ISG2
.81a8	f0 39		beq $81e3			beq 	_AMXFail 				; no, give up.
.81aa	8a		txa				txa 							; get the offset into Y
.81ab	29 1f		and #$1f			and 	#$1F
.81ad	4a		lsr a				lsr 	a 						; make it 0-7.
.81ae	4a		lsr a				lsr  	a
.81af	a8		tay				tay
.81b0	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b3					_AMXCheckOkay:
.81b3	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b4	88		dey				dey
.81b5	10 fc		bpl $81b3			bpl 	_AMXCheckOkay
.81b7	90 2a		bcc $81e3			bcc 	_AMXFail 				; not allowed.
.81b9	8a		txa				txa  							; get mask back
.81ba	29 1f		and #$1f			and 	#$1F
.81bc					_AMXHaveInfo:
.81bc	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81be	10 05		bpl $81c5			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c0	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c3	d0 1e		bne $81e3			bne 	_AMXFail
.81c5					_AMXAnySize:
.81c5	18		clc				clc 							; add offset to the base opcode
.81c6	6d a4 04	adc $04a4			adc 	BaseOpcode
.81c9					_AMXOutputCode:
.81c9	20 34 81	jsr $8134			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cc	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81ce	f0 10		beq $81e0			beq 	_AMXExit
.81d0	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d3	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.81d6	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d8	30 06		bmi $81e0			bmi 	_AMXExit
.81da	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81dd	20 34 81	jsr $8134			jsr 	AssemblerWriteByte
.81e0					_AMXExit:
.81e0	7a		ply				ply
.81e1	38		sec				sec
.81e2	60		rts				rts
.81e3					_AMXFail:
.81e3	a0 00		ldy #$00			ldy 	#0
.81e5					_AMXCheckOddities:
.81e5	8a		txa				txa
.81e6	d9 0e 82	cmp $820e,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81e9	d0 16		bne $8201			bne 	_AMXCONext
.81eb	b9 0c 82	lda $820c,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ee	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f1	d0 0e		bne $8201			bne 	_AMXCONext
.81f3	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f5	10 05		bpl $81fc			bpl 	_AMXCONotZero
.81f7	ad 10 04	lda $0410			lda 	NSMantissa1
.81fa	d0 05		bne $8201			bne 	_AMXCONext
.81fc					_AMXCONotZero:
.81fc	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+1,y 		; get new opcode
.81ff	80 c8		bra $81c9			bra 	_AMXOutputCode 			; and assemble it
.8201					_AMXCONext:
.8201	c8		iny				iny
.8202	c8		iny				iny
.8203	c8		iny				iny
.8204	b9 0c 82	lda $820c,y			lda 	ExtraOpcode+0,y 		; end of table
.8207	d0 dc		bne $81e5			bne 	_AMXCheckOddities
.8209					_AMXCOFail:
.8209	7a		ply				ply
.820a	18		clc				clc
.820b	60		rts				rts
.820c					ExtraOpcode:
>820c	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>820f	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8212	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8215	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8218	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821b	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821e	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8221	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8224	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8227	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822a	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822b					LabelHere:
.822b	c8		iny				iny 								; skip .
.822c	a2 00		ldx #$00			ldx 	#0 							; get a term
.822e	20 b6 97	jsr $97b6			jsr 	EvaluateTerm 				; get a term
.8231	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8234	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8236	d0 24		bne $825c			bne 	_ALType
.8238	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823b	85 36		sta $36				sta 	zTemp0
.823d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8240	85 37		sta $37				sta 	zTemp0+1
.8242	5a		phy				phy 								; copy address in.
.8243	a0 01		ldy #$01			ldy 	#1
.8245	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8248	92 36		sta ($36)			sta 	(zTemp0)
.824a	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824d	91 36		sta ($36),y			sta 	(zTemp0),y
.824f	c8		iny				iny
.8250	a9 00		lda #$00			lda 	#0
.8252	91 36		sta ($36),y			sta 	(zTemp0),y
.8254	c8		iny				iny
.8255	91 36		sta ($36),y			sta 	(zTemp0),y
.8257	c8		iny				iny
.8258	91 36		sta ($36),y			sta 	(zTemp0),y
.825a	7a		ply				ply
.825b	60		rts				rts
.825c					_ALType:
.825c	4c 84 9f	jmp $9f84			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.825f					TypeAndCalculateOperand:
.825f	b1 30		lda ($30),y			lda 	(codePtr),y
.8261	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8263	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8265	f0 5b		beq $82c2			beq 	_TACOExit
.8267	c9 80		cmp #$80			cmp 	#KWC_EOL
.8269	f0 57		beq $82c2			beq 	_TACOExit
.826b	c8		iny				iny
.826c	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826e	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8270	f0 51		beq $82c3			beq 	CalculateOperand
.8272	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8274	f0 1f		beq $8295			beq 	_TACOIndirect
.8276	88		dey				dey 								; undo get of first character
.8277	20 c3 82	jsr $82c3			jsr 	CalculateOperand 			; get operand
.827a	b1 30		lda ($30),y			lda 	(codePtr),y
.827c	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8280	d0 40		bne $82c2			bne 	_TACOExit
.8282	c8		iny				iny
.8283	20 cd 82	jsr $82cd			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8286	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8288	c9 58		cmp #$58			cmp 	#'X'
.828a	f0 36		beq $82c2			beq 	_TACOExit
.828c	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828e	c9 59		cmp #$59			cmp 	#'Y'
.8290	f0 30		beq $82c2			beq 	_TACOExit
.8292					_TACOSyntax:
.8292	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.8295					_TACOIndirect:
.8295	20 c3 82	jsr $82c3			jsr 	CalculateOperand 			; get the operand
.8298	b1 30		lda ($30),y			lda 	(codePtr),y
.829a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829c	f0 17		beq $82b5			beq 	_TACOIndX
.829e	20 14 8d	jsr $8d14			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a1	b1 30		lda ($30),y			lda 	(codePtr),y
.82a3	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a7	d0 19		bne $82c2			bne 	_TACOExit
.82a9	c8		iny				iny
.82aa	20 cd 82	jsr $82cd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ad	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82af	d0 e1		bne $8292			bne 	_TACOSyntax
.82b1	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b3	80 0d		bra $82c2			bra 	_TACOExit
.82b5					_TACOIndX:
.82b5	c8		iny				iny
.82b6	20 cd 82	jsr $82cd			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82b9	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bb	d0 d5		bne $8292			bne 	_TACOSyntax
.82bd	20 14 8d	jsr $8d14			jsr 	CheckRightBracket			; check )
.82c0	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c2					_TACOExit:
.82c2	60		rts				rts
.82c3					CalculateOperand:
.82c3	48		pha				pha
.82c4	da		phx				phx
.82c5	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c7	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.82ca	fa		plx				plx
.82cb	68		pla				pla
.82cc	60		rts				rts
.82cd					TACOCheckXY:
.82cd	b1 30		lda ($30),y			lda 	(codePtr),y
.82cf	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d1	c9 40		cmp #$40			cmp 	#$40
.82d3	d0 21		bne $82f6			bne 	_TCXYFail
.82d5	b1 30		lda ($30),y			lda 	(codePtr),y
.82d7	18		clc				clc
.82d8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82da	85 37		sta $37				sta 	zTemp0+1
.82dc	c8		iny				iny
.82dd	b1 30		lda ($30),y			lda 	(codePtr),y
.82df	c8		iny				iny
.82e0	85 36		sta $36				sta 	zTemp0
.82e2	5a		phy				phy 								; save position
.82e3	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e7	d0 0c		bne $82f5			bne 	_TCXYPopFail
.82e9	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ed	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82ef	f0 08		beq $82f9			beq 	_TCXYFound
.82f1	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f3	f0 04		beq $82f9			beq 	_TCXYFound
.82f5					_TCXYPopFail:
.82f5	7a		ply				ply
.82f6					_TCXYFail:
.82f6	a9 00		lda #$00			lda 	#0
.82f8	60		rts				rts
.82f9					_TCXYFound:
.82f9	7a		ply				ply 								; restore position
.82fa	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fd					BackloadProgram:
.82fd	a2 ff		ldx #$ff			ldx 	#$FF
.82ff	20 27 83	jsr $8327			jsr 	BLReadByte
.8302	30 1f		bmi $8323			bmi 	_BPExit
.8304					_BPCopy:
.8304	e8		inx				inx  								; copy byte in
.8305	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.8308	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.830b	20 27 83	jsr $8327			jsr 	BLReadByte 					; read next byte
.830e	30 0a		bmi $831a			bmi 	_BPEndLine 					; -ve = EOL
.8310	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8312	d0 02		bne $8316			bne 	_BPNotTab
.8314	a9 20		lda #$20			lda 	#' '
.8316					_BPNotTab:
.8316	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8318	b0 ea		bcs $8304			bcs 	_BPCopy
.831a					_BPEndLine:
.831a	20 98 b6	jsr $b698			jsr 	TokeniseLine 				; tokenise the line.
.831d	38		sec				sec 								; append not insert
.831e	20 55 a1	jsr $a155			jsr 	MemoryInsertLine 			; append to current program
.8321	80 da		bra $82fd			bra 	BackloadProgram
.8323					_BPExit:
.8323	20 f3 83	jsr $83f3			jsr 	ClearCommand 				; clear variables etc.
.8326	60		rts				rts
.8327					BLReadByte:
.8327					_BLLoad:
.8327	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832a	ee 28 83	inc $8328			inc 	_BLLoad+1
.832d	d0 03		bne $8332			bne 	_BLNoCarry
.832f	ee 29 83	inc $8329			inc 	_BLLoad+2
.8332					_BLNoCarry:
.8332	c9 00		cmp #$00			cmp 	#0
.8334	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8335					EditProgramCode:
.8335	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8338	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.833b	20 fd a1	jsr $a1fd			jsr 	MemorySearch
.833e	90 05		bcc $8345			bcc 	_EPCNoDelete 				; reached the end don't delete
.8340	d0 03		bne $8345			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8342	20 1e a1	jsr $a11e			jsr 	MemoryDeleteLine 			; delete the line
.8345					_EPCNoDelete:
.8345	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8348	c9 80		cmp #$80			cmp 	#KWC_EOL
.834a	f0 0d		beq $8359			beq 	_EPCNoInsert
.834c	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.834f	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8352	20 fd a1	jsr $a1fd			jsr 	MemorySearch
.8355	18		clc				clc 								; insert at this point.
.8356	20 55 a1	jsr $a155			jsr 	MemoryInsertLine 			; insert the line
.8359					_EPCNoInsert:
.8359	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835a					WarmStart:
.835a	a2 ff		ldx #$ff			ldx 	#$FF
.835c	9a		txs				txs
.835d	20 4e a7	jsr $a74e			jsr 	EXTInputLine 				; get line to lineBuffer
.8360	20 98 b6	jsr $b698			jsr 	TokeniseLine 				; tokenise the line
.8363	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8366	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8369	d0 17		bne $8382			bne 	_WSEditCode 				; if so,edit code.
.836b	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.836e	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8370	85 30		sta $30				sta 	codePtr
.8372	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8374	85 31		sta $31				sta 	codePtr+1
.8376	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8379	c9 80		cmp #$80			cmp 	#KWC_EOL
.837b	f0 dd		beq $835a			beq 	WarmStart
.837d	20 df 89	jsr $89df			jsr 	RUNCodePointerLine 			; execute that line.
.8380	80 d8		bra $835a			bra 	WarmStart
.8382					_WSEditCode:
.8382	20 35 83	jsr $8335			jsr 	EditProgramCode
.8385	20 f3 83	jsr $83f3			jsr 	ClearCommand
.8388	80 d0		bra $835a			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838a					AssembleCommand:
.838a	a2 00		ldx #$00			ldx 	#0
.838c	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger 		; start address
.838f	ad 08 04	lda $0408			lda 	NSMantissa0
.8392	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8395	ad 10 04	lda $0410			lda 	NSMantissa1
.8398	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839b	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.839e	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; options
.83a1	ad 08 04	lda $0408			lda 	NSMantissa0
.83a4	8d a0 04	sta $04a0			sta 	AssemblerControl
.83a7	60		rts				rts
.83a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83a9					AssertCommand:
.83a9	a2 00		ldx #$00			ldx 	#0
.83ab	20 3c 9d	jsr $9d3c			jsr 	EvaluateInteger 			; the assert test
.83ae	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; exit if result is non zero.
.83b1	d0 05		bne $83b8			bne 	_ACExit
.83b3	a9 0a		lda #$0a		lda	#10
.83b5	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.83b8					_ACExit:
.83b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83b9					CallCommand:
.83b9	a2 00		ldx #$00			ldx 	#0
.83bb	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.83be					_CCClear
.83be	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83bf	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.83c2	e0 04		cpx #$04			cpx 	#4
.83c4	d0 f8		bne $83be			bne 	_CCClear
.83c6	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83c8					_CCCParam:
.83c8	b1 30		lda ($30),y			lda 	(codePtr),y
.83ca	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83cc	d0 09		bne $83d7			bne 	_CCCRun6502
.83ce	c8		iny				iny 								; skip comma
.83cf	e8		inx				inx	 								; next level
.83d0	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d3	e0 03		cpx #$03			cpx 	#3
.83d5	90 f1		bcc $83c8			bcc 	_CCCParam 					; done all 3 ?
.83d7					_CCCRun6502:
.83d7	5a		phy				phy 								; save position
.83d8	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83db	85 37		sta $37				sta 	zTemp0+1
.83dd	ad 08 04	lda $0408			lda 	NSMantissa0
.83e0	85 36		sta $36				sta 	zTemp0
.83e2	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e5	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83e8	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83eb	20 f0 83	jsr $83f0			jsr 	_CCCZTemp0 					; call zTemp0
.83ee	7a		ply				ply 								; restore position and exit
.83ef	60		rts				rts
.83f0					_CCCZTemp0:
.83f0	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f3					ClearCommand:
.83f3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f5	85 36		sta $36				sta 	0+zTemp0
.83f7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83f9	85 37		sta $37				sta 	1+zTemp0
.83fb					_ClearZeroLoop:
.83fb	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83fd	f0 24		beq $8423			beq 	_ClearZeroEnd
.83ff	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8401	a9 00		lda #$00			lda 	#0
.8403					_ClearOneVariable:
.8403	91 36		sta ($36),y			sta 	(zTemp0),y
.8405	c8		iny				iny
.8406	c0 08		cpy #$08			cpy 	#8
.8408	d0 f9		bne $8403			bne 	_ClearOneVariable
.840a	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.840c	b1 36		lda ($36),y			lda 	(zTemp0),y
.840e	c9 18		cmp #$18			cmp 	#NSTProcedure
.8410	d0 04		bne $8416			bne 	_ClearNotProcedure
.8412	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8414	91 36		sta ($36),y			sta 	(zTemp0),y
.8416					_ClearNotProcedure:
.8416	18		clc				clc 								; go to the next variable
.8417	b2 36		lda ($36)			lda 	(zTemp0)
.8419	65 36		adc $36				adc 	zTemp0
.841b	85 36		sta $36				sta 	zTemp0
.841d	90 dc		bcc $83fb			bcc 	_ClearZeroLoop
.841f	e6 37		inc $37				inc 	zTemp0+1
.8421	80 d8		bra $83fb			bra 	_ClearZeroLoop
.8423					_ClearZeroEnd:
.8423	18		clc				clc
.8424	a5 36		lda $36				lda 	zTemp0
.8426	69 01		adc #$01			adc 	#1
.8428	8d 8c 04	sta $048c			sta 	lowMemPtr
.842b	a5 37		lda $37				lda 	zTemp0+1
.842d	69 00		adc #$00			adc 	#0
.842f	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8432	20 b7 a2	jsr $a2b7			jsr 	StackReset
.8435	20 21 a3	jsr $a321			jsr 	StringSystemInitialise
.8438	20 1d 8c	jsr $8c1d			jsr 	ProcedureScan
.843b	20 9b 89	jsr $899b			jsr 	Command_Restore
.843e	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8441	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8444	9c a0 04	stz $04a0			stz 	AssemblerControl
.8447	20 b9 99	jsr $99b9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.844b					Command_Data:
.844b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.844d	a2 80		ldx #$80			ldx 	#KWC_EOL
.844f	20 6f 8c	jsr $8c6f			jsr 	ScanForward
.8452	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8453					DimCommand:
.8453	b1 30		lda ($30),y			lda 	(codePtr),y
.8455	29 c0		and #$c0			and 	#$C0
.8457	c9 40		cmp #$40			cmp 	#$40
.8459	d0 7a		bne $84d5			bne 	_DCSyntax
.845b	b1 30		lda ($30),y			lda 	(codePtr),y
.845d	18		clc				clc
.845e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8460	85 3f		sta $3f				sta 	zaTemp+1
.8462	c8		iny				iny
.8463	b1 30		lda ($30),y			lda 	(codePtr),y
.8465	c8		iny				iny
.8466	85 3e		sta $3e				sta 	zaTemp
.8468	5a		phy				phy
.8469	a0 02		ldy #$02			ldy 	#2 						; read type byte
.846b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.846d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.846f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8471	f0 62		beq $84d5			beq 	_DCSyntax
.8473	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8475	29 04		and #$04			and 	#NSBIsArray
.8477	f0 64		beq $84dd			beq 	_DCType
.8479	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.847b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.847d	d0 59		bne $84d8			bne 	_DCRedefine
.847f	7a		ply				ply
.8480	20 e0 84	jsr $84e0			jsr 	_DCGetSize 				; get array size, check it.
.8483	5a		phy				phy
.8484	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8486	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8488	7a		ply				ply 							; is there a second (e.g. ,x)
.8489	b1 30		lda ($30),y			lda 	(codePtr),y
.848b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.848d	d0 0a		bne $8499			bne 	_DCOneDimension
.848f	c8		iny				iny 							; skip comma
.8490	20 e0 84	jsr $84e0			jsr 	_DCGetSize 				; get 2nd array size
.8493	5a		phy				phy
.8494	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8496	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8498	7a		ply				ply
.8499					_DCOneDimension:
.8499	5a		phy				phy 							; save position
.849a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.849c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.849e	aa		tax				tax
.849f	c8		iny				iny
.84a0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a2	e8		inx				inx 							; bump them.
.84a3	1a		inc a				inc 	a
.84a4	20 85 9d	jsr $9d85			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84a7	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84a9	29 e0		and #$e0			and 	#$E0
.84ab	d0 23		bne $84d0			bne 	_DCSize
.84ad	a0 02		ldy #$02			ldy 	#2 						; get base type
.84af	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84b1	20 ee 84	jsr $84ee			jsr 	ScaleByBaseType 		; scale by base type
.84b4	a5 36		lda $36				lda 	zTemp0
.84b6	a6 37		ldx $37				ldx 	zTemp0+1
.84b8	20 7b 99	jsr $997b			jsr 	AllocateXABytes 		; allocate memory
.84bb	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84bd	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84bf	c8		iny				iny
.84c0	8a		txa				txa
.84c1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c3	7a		ply				ply 							; get position back
.84c4	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 		; check )
.84c7	b1 30		lda ($30),y			lda 	(codePtr),y
.84c9	c8		iny				iny 							; consume in case
.84ca	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84cc	f0 85		beq $8453			beq 	DimCommand
.84ce	88		dey				dey 							; undo consume
.84cf	60		rts				rts
.84d0					_DCSize:
.84d0	a9 16		lda #$16		lda	#22
.84d2	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.84d5					_DCSyntax:
.84d5	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.84d8					_DCRedefine:
.84d8	a9 15		lda #$15		lda	#21
.84da	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.84dd					_DCType:
.84dd	4c 84 9f	jmp $9f84			jmp 	TypeError
.84e0					_DCGetSize:
.84e0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84e2	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 	; get array dimension
.84e5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84e7	f0 e7		beq $84d0			beq 	_DCSize
.84e9	c9 fe		cmp #$fe			cmp 	#254
.84eb	f0 e3		beq $84d0			beq 	_DCSize
.84ed	60		rts				rts
.84ee					ScaleByBaseType:
.84ee	29 10		and #$10			and 	#NSBIsString 			; is it string
.84f0	d0 19		bne $850b			bne 	_SBBTString
.84f2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84f4	48		pha				pha
.84f5	a5 36		lda $36				lda 	zTemp0
.84f7	48		pha				pha
.84f8	06 36		asl $36				asl 	zTemp0 					; x 2
.84fa	26 37		rol $37				rol 	zTemp0+1
.84fc	06 36		asl $36				asl 	zTemp0 					; x 4
.84fe	26 37		rol $37				rol 	zTemp0+1
.8500	68		pla				pla 							; add stacked value = x 5
.8501	65 36		adc $36				adc 	zTemp0
.8503	85 36		sta $36				sta 	zTemp0
.8505	68		pla				pla
.8506	65 37		adc $37				adc 	zTemp0+1
.8508	85 37		sta $37				sta 	zTemp0+1
.850a	60		rts				rts
.850b					_SBBTString:
.850b	06 36		asl $36				asl 	zTemp0
.850d	26 37		rol $37				rol 	zTemp0+1
.850f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8510					EndCommand:
.8510	4c 5a 83	jmp $835a			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8513					ForCommand:
.8513	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8515	20 52 a2	jsr $a252			jsr 	StackOpen
.8518	a2 00		ldx #$00			ldx 	#0
.851a	20 b6 97	jsr $97b6			jsr 	EvaluateTerm
.851d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8520	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8522	d0 49		bne $856d			bne		_FCError
.8524	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8526	20 24 8d	jsr $8d24			jsr 	CheckNextA
.8529	e8		inx				inx
.852a	20 3c 9d	jsr $9d3c			jsr 	EvaluateInteger 			; <from> in +1
.852d	b1 30		lda ($30),y			lda 	(codePtr),y
.852f	c8		iny				iny 								; consume it
.8530	48		pha				pha 								; save on stack for later
.8531	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8533	f0 04		beq $8539			beq 	_FCNoSyntax
.8535	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8537	d0 37		bne $8570			bne 	_FCSyntaxError
.8539					_FCNoSyntax:
.8539	e8		inx				inx
.853a	20 3c 9d	jsr $9d3c			jsr 	EvaluateInteger
.853d	20 96 a2	jsr $a296			jsr 	STKSaveCodePosition 		; save loop back position
.8540	68		pla				pla 								; restore DOWNTO or TO
.8541	5a		phy				phy 								; save Y on the stack
.8542	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8544	f0 02		beq $8548			beq 	_FCNotDownTo
.8546	a9 02		lda #$02			lda 	#2
.8548					_FCNotDownTo:
.8548	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8549	a0 10		ldy #$10			ldy 	#16
.854b	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.854d	a0 06		ldy #$06			ldy 	#6
.854f	ad 08 04	lda $0408			lda 	NSMantissa0
.8552	91 34		sta ($34),y			sta 	(basicStack),y
.8554	ad 10 04	lda $0410			lda 	NSMantissa1
.8557	c8		iny				iny
.8558	91 34		sta ($34),y			sta 	(basicStack),y
.855a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.855c	a2 01		ldx #$01			ldx 	#1
.855e	20 73 85	jsr $8573			jsr 	FCIntegerToStack
.8561	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8563	a2 02		ldx #$02			ldx 	#2
.8565	20 73 85	jsr $8573			jsr 	FCIntegerToStack
.8568	20 93 85	jsr $8593			jsr 	CopyIndexToReference
.856b	7a		ply				ply 								; restore position
.856c	60		rts				rts
.856d					_FCError:
.856d	4c 84 9f	jmp $9f84			jmp 	TypeError
.8570					_FCSyntaxError:
.8570	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.8573					FCIntegerToStack:
.8573	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8576	10 03		bpl $857b			bpl	 	_FCNotNegative
.8578	20 a5 9d	jsr $9da5			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.857b					_FCNotNegative:
.857b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.857e	91 34		sta ($34),y			sta 	(basicStack),y
.8580	c8		iny				iny
.8581	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8584	91 34		sta ($34),y			sta 	(basicStack),y
.8586	c8		iny				iny
.8587	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.858a	91 34		sta ($34),y			sta 	(basicStack),y
.858c	c8		iny				iny
.858d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8590	91 34		sta ($34),y			sta 	(basicStack),y
.8592	60		rts				rts
.8593					CopyIndexToReference:
.8593	5a		phy				phy
.8594	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8596	38		sec				sec 								; (because we copy from offset 8)
.8597	b1 34		lda ($34),y			lda 	(basicStack),y
.8599	e9 08		sbc #$08			sbc 	#8
.859b	85 36		sta $36				sta 	zTemp0
.859d	c8		iny				iny
.859e	b1 34		lda ($34),y			lda 	(basicStack),y
.85a0	e9 00		sbc #$00			sbc 	#0
.85a2	85 37		sta $37				sta 	zTemp0+1
.85a4	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85a6	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85a8	b1 34		lda ($34),y			lda 	(basicStack),y
.85aa	0a		asl a				asl 	a 							; into carry
.85ab	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85ad	90 14		bcc $85c3			bcc 	_CITRNormal
.85af	38		sec				sec
.85b0					_CITRNegative:
.85b0	a9 00		lda #$00			lda 	#0
.85b2	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85b4	91 36		sta ($36),y			sta 	(zTemp0),y
.85b6	c8		iny				iny
.85b7	ca		dex				dex
.85b8	d0 f6		bne $85b0			bne 	_CITRNegative
.85ba	88		dey				dey 								; look at MSB of mantissa
.85bb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85bd	09 80		ora #$80			ora 	#$80
.85bf	91 36		sta ($36),y			sta 	(zTemp0),y
.85c1	7a		ply				ply
.85c2	60		rts				rts
.85c3					_CITRNormal:
.85c3	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85c5	91 36		sta ($36),y			sta 	(zTemp0),y
.85c7	c8		iny				iny
.85c8	ca		dex				dex
.85c9	d0 f8		bne $85c3			bne 	_CITRNormal
.85cb	7a		ply				ply 								; and exit.
.85cc	60		rts				rts
.85cd					NextCommand:
.85cd	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85cf	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85d1	20 7e a2	jsr $a27e			jsr 	StackCheckFrame
.85d4	5a		phy				phy
.85d5	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85d7	b1 34		lda ($34),y			lda 	(basicStack),y
.85d9	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85db	30 02		bmi $85df			bmi 	_NCStepNeg
.85dd	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85df					_NCStepNeg:
.85df	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85e1	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85e3	18		clc				clc
.85e4					_NCBump:
.85e4	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85e6	91 34		sta ($34),y			sta 	(basicStack),y
.85e8	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85ea	c8		iny				iny 								; next byte
.85eb	ca		dex				dex 								; do four times
.85ec	d0 f6		bne $85e4			bne 	_NCBump
.85ee	20 93 85	jsr $8593			jsr		CopyIndexToReference		; copy it to the reference variable.
.85f1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85f3	b1 34		lda ($34),y			lda 	(basicStack),y
.85f5	0a		asl a				asl 	a 							; sign bit to carry
.85f6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.85f8	85 38		sta $38				sta 	zTemp1
.85fa	90 02		bcc $85fe			bcc 	_NCCompRev 					; use if step is +ve
.85fc	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.85fe					_NCCompRev:
.85fe	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8600	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8602	85 39		sta $39				sta 	zTemp1+1
.8604	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8606	38		sec				sec
.8607					_NCCompare:
.8607	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8609	b1 34		lda ($34),y			lda 	(basicStack),y
.860b	a4 39		ldy $39				ldy 	zTemp1+1
.860d	f1 34		sbc ($34),y			sbc 	(basicStack),y
.860f	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8611	e6 39		inc $39				inc 	zTemp1+1
.8613	ca		dex				dex 								; do it 4 times.
.8614	d0 f1		bne $8607			bne 	_NCCompare
.8616	50 02		bvc $861a			bvc 	_NCNoOverflow 				; convert to signed comparison
.8618	49 80		eor #$80			eor 	#$80
.861a					_NCNoOverflow:
.861a	7a		ply				ply 								; restore Y position
.861b	0a		asl a				asl 	a 							; is bit 7 set.
.861c	90 04		bcc $8622			bcc 	_NCLoopback 				; if no , >= so loop back
.861e	20 70 a2	jsr $a270			jsr 	StackClose 					; exit the loop
.8621	60		rts				rts
.8622					_NCLoopBack:
.8622	20 a7 a2	jsr $a2a7			jsr 	STKLoadCodePosition 		; loop back
.8625	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8626					Command_GOSUB:
.8626	a2 00		ldx #$00			ldx 	#0
.8628	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.862b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.862d	20 52 a2	jsr $a252			jsr 	StackOpen 					; create frame
.8630	20 96 a2	jsr $a296			jsr 	STKSaveCodePosition 		; save current position
.8633	4c 49 86	jmp $8649			jmp 	GotoStackX
.8636					Command_RETURN:
.8636	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8638	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.863a	20 7e a2	jsr $a27e			jsr 	StackCheckFrame
.863d	20 a7 a2	jsr $a2a7			jsr 	STKLoadCodePosition 		; restore code position
.8640	20 70 a2	jsr $a270			jsr 	StackClose
.8643	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8644					GotoCommand:
.8644	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8646	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.8649					GotoStackX:
.8649	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.864c	48		pha				pha 								; it is slightly inefficient, just in cases.
.864d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8650	fa		plx				plx
.8651	20 fd a1	jsr $a1fd			jsr 	MemorySearch 				; transfer to line number AX.
.8654	90 05		bcc $865b			bcc 	_GotoError 					; not found, off end.
.8656	d0 03		bne $865b			bne 	_GotoError 					; not found exactly
.8658	4c d8 89	jmp $89d8			jmp 	RunNewLine 					; and go straight to new line code.
.865b					_GotoError:
.865b	a9 0d		lda #$0d		lda	#13
.865d	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8660					IfCommand:
.8660	a2 00		ldx #$00			ldx 	#0 							; If what.
.8662	20 19 9d	jsr $9d19			jsr 	EvaluateNumber
.8665	b1 30		lda ($30),y			lda 	(codePtr),y
.8667	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8669	d0 0a		bne $8675			bne 	_IFStructured
.866b	c8		iny				iny 								; consume THEN
.866c	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; is it zero
.866f	f0 01		beq $8672			beq 	_IfFail 					; if fail, go to next line
.8671	60		rts				rts 								; if THEN just continue
.8672					_IfFail:
.8672	4c 3d 8a	jmp $8a3d			jmp 	EOLCommand
.8675					_IfStructured:
.8675	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; is it zero
.8678	d0 07		bne $8681			bne 	_IfExit 					; if not, then continue normally.
.867a	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.867c	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.867e	20 6f 8c	jsr $8c6f			jsr 	ScanForward 				; and run from there/
.8681					_IfExit:
.8681	60		rts				rts
.8682					ElseCode:
.8682	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8684	aa		tax				tax 								; so just go to the structure exit
.8685	20 6f 8c	jsr $8c6f			jsr 	ScanForward
.8688	60		rts				rts
.8689					EndIf:
.8689	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.868a					LetCommand:
.868a	a2 00		ldx #$00			ldx 	#0
.868c	b1 30		lda ($30),y			lda 	(codePtr),y
.868e	c9 10		cmp #$10			cmp 	#KWD_AT
.8690	d0 16		bne $86a8			bne 	_LCStandard
.8692	c8		iny				iny 								; skip equal
.8693	20 b6 97	jsr $97b6			jsr 	EvaluateTerm 				; get a number
.8696	20 fa 95	jsr $95fa			jsr 	Dereference 				; dereference it
.8699	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.869c	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.869e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86a1	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86a3	d0 10		bne $86b5			bne 	_LCMain
.86a5	4c 84 9f	jmp $9f84			jmp 	TypeError 					; was a reference before.
.86a8					_LCStandard:
.86a8	ad c4 92	lda $92c4			lda 	PrecedenceLevel+"*"			; precedence > this
.86ab	20 de 92	jsr $92de			jsr 	EvaluateExpressionAtPrecedence
.86ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86b1	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86b3	f0 0e		beq $86c3			beq 	_LetGoProc 					; it's a procedure call.
.86b5					_LCMain:
.86b5	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86b7	20 24 8d	jsr $8d24			jsr 	CheckNextA
.86ba	e8		inx				inx 								; RHS
.86bb	20 10 9d	jsr $9d10			jsr 	EvaluateValue
.86be	ca		dex				dex
.86bf	20 c6 86	jsr $86c6			jsr 	AssignVariable
.86c2	60		rts				rts
.86c3					_LetGoProc:
.86c3	4c a5 88	jmp $88a5			jmp 	CallProcedure
.86c6					AssignVariable:
.86c6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86c9	48		pha				pha 								; save a copy
.86ca	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86cd	29 10		and #$10			and 	#NSBIsString
.86cf	d0 0b		bne $86dc			bne 	_ASError
.86d1	68		pla				pla 								; get back
.86d2	29 10		and #$10			and 	#NSBIsString 				; check type
.86d4	d0 03		bne $86d9			bne 	_ASString
.86d6	4c 22 95	jmp $9522			jmp 	AssignNumber
.86d9					_ASString:
.86d9	4c 90 95	jmp $9590			jmp 	AssignString
.86dc					_ASError:
.86dc	4c 84 9f	jmp $9f84			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86df					Command_List:
.86df	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86e2	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86e5	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86e8	a9 ff		lda #$ff			lda 	#$FF
.86ea	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86ed	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86f0	b1 30		lda ($30),y			lda 	(codePtr),y
.86f2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f4	f0 1e		beq $8714			beq 	_CLSecond
.86f6	20 72 87	jsr $8772			jsr 	CLIsDigit 					; if not digit, list all
.86f9	b0 24		bcs $871f			bcs 	_CLStart
.86fb	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.86fd	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.8700	b1 30		lda ($30),y			lda 	(codePtr),y
.8702	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8704	f0 0e		beq $8714			beq 	_CLSecond 					; if so go get it
.8706	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8709	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.870c	ad 14 04	lda $0414			lda 	NSMantissa1+4
.870f	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8712	80 0b		bra $871f			bra 	_CLStart
.8714					_CLSecond:
.8714	c8		iny				iny 								; consume comma
.8715	20 72 87	jsr $8772			jsr 	CLIsDigit 					; digit found
.8718	b0 05		bcs $871f			bcs 	_CLStart 					; if not, continue listing
.871a	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.871c	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.871f					_CLStart
.871f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8721	85 30		sta $30				sta 	codePtr
.8723	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8725	85 31		sta $31				sta 	codePtr+1
.8727					_CLLoop:
.8727	20 79 a7	jsr $a779			jsr 	EXTBreakCheck 				; break check
.872a	f0 30		beq $875c			beq 	_CLExit
.872c	b2 30		lda ($30)			lda 	(codePtr)
.872e	f0 2c		beq $875c			beq 	_CLExit
.8730	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8732	20 5f 87	jsr $875f			jsr 	CLCompareLineNo
.8735	90 18		bcc $874f			bcc 	_CLNext
.8737	a2 07		ldx #$07			ldx 	#7
.8739	20 5f 87	jsr $875f			jsr 	CLCompareLineNo
.873c	f0 02		beq $8740			beq 	_CLDoThisOne
.873e	b0 0f		bcs $874f			bcs 	_CLNext
.8740					_CLDoThisOne:
.8740	20 96 b4	jsr $b496			jsr 	ListConvertLine 			; convert line into token Buffer
.8743	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8745	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.8747	20 86 8d	jsr $8d86			jsr 	PrintStringXA
.874a	a9 0d		lda #$0d			lda 	#13 						; new line
.874c	20 38 a7	jsr $a738			jsr 	EXTPrintCharacter
.874f					_CLNext:
.874f	18		clc				clc
.8750	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8752	65 30		adc $30				adc 	codePtr
.8754	85 30		sta $30				sta 	codePtr
.8756	90 02		bcc $875a			bcc 	_CREExit
.8758	e6 31		inc $31				inc 	codePtr+1
.875a					_CREExit:
.875a	80 cb		bra $8727			bra 	_CLLoop
.875c					_CLExit:
.875c	4c 5a 83	jmp $835a			jmp 	WarmStart
.875f					CLCompareLineNo:
.875f	38		sec				sec
.8760	a0 01		ldy #$01			ldy 	#1
.8762	b1 30		lda ($30),y			lda 	(codePtr),y
.8764	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8767	85 36		sta $36				sta 	zTemp0
.8769	c8		iny				iny
.876a	b1 30		lda ($30),y			lda 	(codePtr),y
.876c	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.876f	05 36		ora $36				ora 	zTemp0
.8771	60		rts				rts
.8772					CLIsDigit:
.8772	b1 30		lda ($30),y			lda 	(codePtr),y
.8774	c9 30		cmp #$30			cmp 	#"0"
.8776	90 03		bcc $877b			bcc	 	_CLIDExitFalse
.8778	c9 3a		cmp #$3a			cmp 	#"9"+1
.877a	60		rts				rts
.877b					_CLIDExitFalse:
.877b	38		sec				sec
.877c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.877d					Command_LOCAL:
.877d	a2 00		ldx #$00			ldx 	#0 							; at level 0
.877f	20 8b 87	jsr $878b			jsr 	LocaliseNextTerm 			; convert term to a local.
.8782	b1 30		lda ($30),y			lda 	(codePtr),y
.8784	c8		iny				iny
.8785	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8787	f0 f4		beq $877d			beq 	Command_LOCAL
.8789	88		dey				dey 								; unpick pre-get
.878a	60		rts				rts
.878b					LocaliseNextTerm:
.878b	20 b6 97	jsr $97b6			jsr 	EvaluateTerm 				; evaluate the term
.878e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8791	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8793	f0 61		beq $87f6			beq		_LNTError
.8795	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8798	85 36		sta $36				sta 	zTemp0
.879a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.879d	85 37		sta $37				sta  	zTemp0+1
.879f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87a2	29 10		and #$10			and 	#NSBIsString
.87a4	d0 1e		bne $87c4			bne 	_LNTPushString
.87a6	5a		phy				phy
.87a7	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87a9					_LNTPushNumLoop:
.87a9	b1 36		lda ($36),y			lda		(zTemp0),y
.87ab	20 30 a2	jsr $a230			jsr 	StackPushByte
.87ae	c8		iny				iny
.87af	c0 05		cpy #$05			cpy 	#5
.87b1	d0 f6		bne $87a9			bne 	_LNTPushNumLoop
.87b3	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87b5	20 30 a2	jsr $a230			jsr 	StackPushByte
.87b8	a5 37		lda $37				lda 	zTemp0+1
.87ba	20 30 a2	jsr $a230			jsr 	StackPushByte
.87bd	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87bf	20 30 a2	jsr $a230			jsr 	StackPushByte
.87c2	7a		ply				ply
.87c3	60		rts				rts
.87c4					_LNTPushString:
.87c4	5a		phy				phy
.87c5	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87c7	85 38		sta $38				sta 	zTemp1
.87c9	a0 01		ldy #$01			ldy 	#1
.87cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.87cd	85 39		sta $39				sta 	zTemp1+1
.87cf	a0 00		ldy #$00			ldy 	#0 							; output string
.87d1	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87d3	f0 0a		beq $87df			beq 	_LNTStringOut
.87d5					_LNTPushStrLoop:
.87d5	b1 38		lda ($38),y			lda 	(zTemp1),y
.87d7	f0 06		beq $87df			beq 	_LNTStringOut
.87d9	20 30 a2	jsr $a230			jsr 	StackPushByte
.87dc	c8		iny				iny
.87dd	80 f6		bra $87d5			bra 	_LNTPushStrLoop
.87df					_LNTStringOut:
.87df	98		tya				tya									; output length
.87e0	20 30 a2	jsr $a230			jsr 	StackPushByte
.87e3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87e6	20 30 a2	jsr $a230			jsr 	StackPushByte
.87e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87ec	20 30 a2	jsr $a230			jsr 	StackPushByte
.87ef	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87f1	20 30 a2	jsr $a230			jsr 	StackPushByte
.87f4	7a		ply				ply
.87f5	60		rts				rts
.87f6					_LNTError:
.87f6	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.87f9					LocalPopValue:
.87f9	20 49 a2	jsr $a249			jsr 	StackPopByte
.87fc	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.87fe	d0 17		bne $8817			bne 	_LPVString
.8800	20 49 a2	jsr $a249			jsr 	StackPopByte 				; address
.8803	85 37		sta $37				sta 	zTemp0+1
.8805	20 49 a2	jsr $a249			jsr 	StackPopByte
.8808	85 36		sta $36				sta 	zTemp0
.880a	5a		phy				phy
.880b	a0 04		ldy #$04			ldy 	#4 							; copy back
.880d					_LPVNumberCopy:
.880d	20 49 a2	jsr $a249			jsr 	StackPopByte
.8810	91 36		sta ($36),y			sta 	(zTemp0),y
.8812	88		dey				dey
.8813	10 f8		bpl $880d			bpl 	_LPVNumberCopy
.8815	7a		ply				ply 								; and complete
.8816	60		rts				rts
.8817					_LPVString:
.8817	20 49 a2	jsr $a249			jsr 	StackPopByte 				; address of record => zTemp0
.881a	85 37		sta $37				sta 	zTemp0+1
.881c	20 49 a2	jsr $a249			jsr 	StackPopByte
.881f	85 36		sta $36				sta 	zTemp0
.8821	5a		phy				phy
.8822	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.8824	85 38		sta $38				sta 	zTemp1
.8826	a0 01		ldy #$01			ldy 	#1
.8828	b1 36		lda ($36),y			lda 	(zTemp0),y
.882a	85 39		sta $39				sta 	zTemp1+1
.882c	20 49 a2	jsr $a249			jsr 	StackPopByte 				; # to get => y
.882f	a8		tay				tay
.8830	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8832	f0 0e		beq $8842			beq 	_LPVStringCopied
.8834	a9 00		lda #$00			lda 	#0 							; NULL on end
.8836	91 38		sta ($38),y			sta 	(zTemp1),y
.8838					_LPVStringCopy:
.8838	88		dey				dey
.8839	30 07		bmi $8842			bmi 	_LPVStringCopied
.883b	20 49 a2	jsr $a249			jsr 	StackPopByte
.883e	91 38		sta ($38),y			sta 	(zTemp1),y
.8840	80 f6		bra $8838			bra 	_LPVStringCopy
.8842					_LPVStringCopied:
.8842	fa		plx				plx
.8843	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8844					NewCommand:
.8844	20 db a1	jsr $a1db			jsr 	MemoryNew
.8847	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.884a	20 f3 83	jsr $83f3			jsr 	ClearCommand 				; clear everything.
.884d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.884e					Command_Print:
.884e	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.884f					_CPLoop:
.884f	08		php				php 								; save last action flag
.8850	b1 30		lda ($30),y			lda 	(codePtr),y
.8852	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8854	f0 46		beq $889c			beq 	_CPExit
.8856	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8858	f0 42		beq $889c			beq 	_CPExit
.885a	68		pla				pla 								; throw last action flag
.885b	b1 30		lda ($30),y			lda 	(codePtr),y
.885d	c8		iny				iny
.885e	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8860	f0 37		beq $8899			beq 	_CPContinueWithSameLine
.8862	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8864	f0 2e		beq $8894			beq 	_CPTab
.8866	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8868	f0 26		beq $8890			beq 	_CPNewLine
.886a	88		dey				dey 								; undo the get.
.886b	a2 00		ldx #$00			ldx 	#0
.886d	20 10 9d	jsr $9d10			jsr 	EvaluateValue 				; get a value into slot 0
.8870	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8873	29 10		and #$10			and 	#NSBIsString
.8875	f0 0b		beq $8882			beq 	_CPNumber
.8877	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.887a	ad 08 04	lda $0408			lda 	NSMantissa0
.887d	20 86 8d	jsr $8d86			jsr 	PrintStringXA
.8880	80 cc		bra $884e			bra 	Command_Print 				; loop round clearing carry so NL if end
.8882					_CPNumber:
.8882	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8884	20 e6 9b	jsr $9be6			jsr 	ConvertNumberToString 		; convert to string
.8887	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8889	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.888b	20 86 8d	jsr $8d86			jsr 	PrintStringXA
.888e	80 be		bra $884e			bra 	Command_Print 				; loop round clearing carry so NL if end
.8890					_CPNewLine:
.8890	a9 0d		lda #$0d			lda 	#13
.8892	80 02		bra $8896			bra 	_CPPrintChar
.8894					_CPTab:
.8894	a9 09		lda #$09			lda 	#9 							; print TAB
.8896					_CPPrintChar:
.8896	20 38 a7	jsr $a738			jsr 	EXTPrintCharacter
.8899					_CPContinueWithSameLine:
.8899	38		sec				sec 								; loop round with carry set, which
.889a	80 b3		bra $884f			bra 	_CPLoop 					; will inhibit final CR
.889c					_CPExit:
.889c	28		plp				plp 								; get last action flag
.889d	b0 05		bcs $88a4			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.889f	a9 0d		lda #$0d			lda 	#13 						; print new line
.88a1	20 38 a7	jsr $a738			jsr 	EXTPrintCharacter
.88a4					_CPExit2:
.88a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88a5					CallProcedure:
.88a5	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88a7	b1 30		lda ($30),y			lda 	(codePtr),y
.88a9	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88ab	f0 0c		beq $88b9			beq 	_CPEndParam
.88ad					_CPParamLoop:
.88ad	20 10 9d	jsr $9d10			jsr 	EvaluateValue 				; get parameter onto stack
.88b0	e8		inx				inx 								; bump next stack
.88b1	b1 30		lda ($30),y			lda 	(codePtr),y
.88b3	c8		iny				iny
.88b4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88b6	f0 f5		beq $88ad			beq 	_CPParamLoop
.88b8	88		dey				dey 								; unpick.
.88b9					_CPEndParam:
.88b9	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88bc	c8		iny				iny									; skip right bracket
.88bd	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88bf	20 52 a2	jsr $a252			jsr 	StackOpen
.88c2	20 96 a2	jsr $a296			jsr 	STKSaveCodePosition 		; save loop position
.88c5	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88c8	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88ca	ad 10 04	lda $0410			lda 	NSMantissa1
.88cd	85 37		sta $37				sta 	zTemp0+1
.88cf	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88d1	b2 36		lda ($36)			lda 	(zTemp0)
.88d3	85 30		sta $30				sta 	safePtr
.88d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.88d7	85 31		sta $31				sta 	safePtr+1
.88d9	c8		iny				iny
.88da	b1 36		lda ($36),y			lda 	(zTemp0),y
.88dc	85 32		sta $32				sta 	safePtr+2
.88de	c8		iny				iny
.88df	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e1	85 33		sta $33				sta 	safePtr+3
.88e3	c8		iny				iny 								; get Y offset -> Y
.88e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e6	a8		tay				tay
.88e7	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88e9	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88ec	f0 13		beq $8901			beq 	_ParamExit 					; if so, exit.
.88ee					_ParamExtract:
.88ee	ca		dex				dex 								; put a local term on the level before
.88ef	20 8b 87	jsr $878b			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88f2	20 c6 86	jsr $86c6			jsr 	AssignVariable 				; assign stacked value to the variable.
.88f5	e8		inx				inx 								; advance to next parameter to do.
.88f6	e8		inx				inx
.88f7	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.88fa	f0 05		beq $8901			beq 	_ParamExit
.88fc	20 1c 8d	jsr $8d1c			jsr 	CheckComma 					; comma seperating parameters
.88ff	80 ed		bra $88ee			bra 	_ParamExtract
.8901					_ParamExit:
.8901	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 			; check )
.8904	60		rts				rts 								; and continue from here
.8905					Command_ENDPROC:
.8905	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8907	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8909	20 7e a2	jsr $a27e			jsr 	StackCheckFrame
.890c	20 a7 a2	jsr $a2a7			jsr 	STKLoadCodePosition 		; restore code position
.890f	20 70 a2	jsr $a270			jsr 	StackClose
.8912	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8913					Command_Read:
.8913	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8915	20 b6 97	jsr $97b6			jsr 	EvaluateTerm
.8918	bd 00 04	lda $0400,x			lda 	NSStatus,x
.891b	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.891d	f0 4a		beq $8969			beq 	_CRSyntax 					; check reference (bit 0)
.891f	20 b2 89	jsr $89b2			jsr 	SwapDataCodePtrs 			; swap code and data
.8922	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8925	d0 20		bne $8947			bne 	_CRContinueData
.8927					_CRKeepSearching:
.8927	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8929	aa		tax				tax
.892a	20 6f 8c	jsr $8c6f			jsr 	ScanForward
.892d	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.892f	f0 16		beq $8947			beq 	_CRHaveData 				; found it
.8931	18		clc				clc
.8932	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8934	65 30		adc $30				adc 	codePtr
.8936	85 30		sta $30				sta 	codePtr
.8938	90 02		bcc $893c			bcc 	_CREExit
.893a	e6 31		inc $31				inc 	codePtr+1
.893c					_CREExit:
.893c	a0 03		ldy #$03			ldy 	#3 							; start of line.
.893e	b2 30		lda ($30)			lda 	(codePtr)
.8940	d0 e5		bne $8927			bne 	_CRKeepSearching
.8942	a9 0b		lda #$0b		lda	#11
.8944	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.8947					_CRHaveData:
.8947					_CRContinueData:
.8947	a2 01		ldx #$01			ldx 	#1
.8949	20 10 9d	jsr $9d10			jsr 	EvaluateValue 				; evaluate value into slot # 1
.894c	ca		dex				dex
.894d	20 c6 86	jsr $86c6			jsr		AssignVariable 				; do the assignment
.8950	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8953	b1 30		lda ($30),y			lda 	(codePtr),y
.8955	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8957	d0 04		bne $895d			bne 	_CRSwapBack
.8959	c8		iny				iny 								; consume comma
.895a	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.895d					_CRSwapBack:
.895d	20 b2 89	jsr $89b2			jsr 	SwapDataCodePtrs			; swap them back.
.8960	b1 30		lda ($30),y			lda 	(codePtr),y
.8962	c8		iny				iny
.8963	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8965	f0 ac		beq $8913			beq 	Command_Read 				; if so go round again.
.8967	88		dey				dey 								; unpick get.
.8968	60		rts				rts
.8969					_CRSyntax:
.8969	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.896c					RemCommand:
.896c	b1 30		lda ($30),y			lda 	(codePtr),y
.896e	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8970	d0 06		bne $8978			bne 	_RMExit
.8972	c8		iny				iny
.8973	98		tya				tya
.8974	38		sec				sec
.8975	71 30		adc ($30),y			adc 	(codePtr),y
.8977	a8		tay				tay
.8978					_RMExit:
.8978	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8979					Command_REPEAT:
.8979	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.897b	20 52 a2	jsr $a252			jsr 	StackOpen
.897e	20 96 a2	jsr $a296			jsr 	STKSaveCodePosition 		; save loop position
.8981	60		rts				rts
.8982					Command_UNTIL:
.8982	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8984	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8986	20 7e a2	jsr $a27e			jsr 	StackCheckFrame
.8989	a2 00		ldx #$00			ldx 	#0
.898b	20 19 9d	jsr $9d19			jsr 	EvaluateNumber 				; work out the number
.898e	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; check if zero
.8991	f0 04		beq $8997			beq 	_CULoopBack 				; if so keep looping
.8993	20 70 a2	jsr $a270			jsr 	StackClose		 			; return
.8996	60		rts				rts
.8997					_CULoopBack:
.8997	20 a7 a2	jsr $a2a7			jsr 	STKLoadCodePosition 		; loop back
.899a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.899b					Command_Restore:
.899b	20 b2 89	jsr $89b2			jsr 	SwapDataCodePtrs 			; swap code and data
.899e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89a0	85 30		sta $30				sta 	codePtr
.89a2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89a4	85 31		sta $31				sta 	codePtr+1
.89a6	20 b2 89	jsr $89b2			jsr 	SwapDataCodePtrs 			; put them back
.89a9	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89ab	8d 9b 04	sta $049b			sta 	dataPointer+4
.89ae	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89b1	60		rts				rts
.89b2					SwapDataCodePtrs:
.89b2	da		phx				phx
.89b3	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89b5					_SDCPLoop:
.89b5	b5 30		lda $30,x			lda 	safePtr,x
.89b7	48		pha				pha
.89b8	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89bb	95 30		sta $30,x			sta 	safePtr,x
.89bd	68		pla				pla
.89be	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89c1	ca		dex				dex
.89c2	10 f1		bpl $89b5			bpl 	_SDCPLoop
.89c4	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89c7	8c 9b 04	sty $049b			sty 	dataPointer+4
.89ca	a8		tay				tay
.89cb	fa		plx				plx
.89cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89cd					CommandRUN:
.89cd	20 f3 83	jsr $83f3			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89d0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89d2	85 30		sta $30				sta 	codePtr
.89d4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89d6	85 31		sta $31				sta 	codePtr+1
.89d8					RUNNewLine:
.89d8	b2 30		lda ($30)			lda 	(codePtr)
.89da	f0 5e		beq $8a3a			beq 	CRNoProgram         		; no then END.
.89dc	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89de	9a		txs				txs
.89df					RUNCodePointerLine:
.89df	a0 02		ldy #$02			ldy 	#2 							; start of program
.89e1					_CRIncMainLoop:
.89e1	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89e4	d0 05		bne $89eb			bne 	_CRNoBreakCheck
.89e6	20 79 a7	jsr $a779			jsr 	EXTBreakCheck 				; break check
.89e9	f0 4a		beq $8a35			beq 	_CRBreak
.89eb					_CRNoBreakCheck:
.89eb	c8		iny				iny
.89ec					_CRMainLoop:
.89ec	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89ef	b1 30		lda ($30),y			lda 	(codePtr),y
.89f1	10 10		bpl $8a03			bpl 	_CRNotKeyword
.89f3	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89f5	b0 04		bcs $89fb			bcs 	_CRIsKeyword
.89f7	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.89f9	b0 34		bcs $8a2f			bcs		_CRSyntaxError
.89fb					_CRIsKeyword:
.89fb	c8		iny				iny 								; consume command
.89fc	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.89fd	aa		tax				tax 								; put in X for vector jump
.89fe	20 32 8a	jsr $8a32			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a01	80 e9		bra $89ec			bra 	_CRMainLoop 				; and loop round
.8a03					_CRNotKeyword:
.8a03	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a05	f0 da		beq $89e1			beq 	_CRIncMainLoop
.8a07	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a09	90 05		bcc $8a10			bcc 	_CRNotVariable
.8a0b					_CRGoLet:
.8a0b	20 8a 86	jsr $868a			jsr 	LetCommand
.8a0e	80 dc		bra $89ec			bra 	_CRMainLoop
.8a10					_CRNotVariable:
.8a10	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a12	f0 f7		beq $8a0b			beq 	_CRGoLet
.8a14	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a16	f0 f3		beq $8a0b			beq 	_CRGoLet
.8a18	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a1a	f0 ef		beq $8a0b			beq 	_CRGoLet
.8a1c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a1e	f0 09		beq $8a29			beq 	_CRGoRem
.8a20	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a22	d0 0b		bne $8a2f			bne 	_CRSyntaxError
.8a24	20 2b 82	jsr $822b			jsr 	LabelHere
.8a27	80 c3		bra $89ec			bra 	_CRMainLoop
.8a29					_CRGoRem:
.8a29	c8		iny				iny
.8a2a	20 6c 89	jsr $896c			jsr 	RemCommand
.8a2d	80 bd		bra $89ec			bra 	_CRMainLoop
.8a2f					_CRSyntaxError:
.8a2f	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.8a32					_CRCallVector0:
.8a32	7c de 8a	jmp ($8ade,x)			jmp 	(VectorSet0,x)
.8a35					_CRBreak:
.8a35	a9 01		lda #$01		lda	#1
.8a37	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.8a3a					CRNoProgram:
.8a3a	4c 10 85	jmp $8510			jmp 	EndCommand
.8a3d					EOLCommand:
.8a3d	18		clc				clc
.8a3e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a40	65 30		adc $30				adc 	codePtr
.8a42	85 30		sta $30				sta 	codePtr
.8a44	90 02		bcc $8a48			bcc 	_CREExit
.8a46	e6 31		inc $31				inc 	codePtr+1
.8a48					_CREExit:
.8a48	80 8e		bra $89d8			bra 	RunNewLine
.8a4a					Shift1Command:
.8a4a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a4c	c8		iny				iny
.8a4d	0a		asl a				asl 	a
.8a4e	aa		tax				tax
.8a4f	7c 76 8b	jmp ($8b76,x)			jmp 	(VectorSet1,x)
.8a52					Shift2Command:
.8a52	b1 30		lda ($30),y			lda 	(codePtr),y
.8a54	c8		iny				iny
.8a55	0a		asl a				asl 	a
.8a56	aa		tax				tax
.8a57	7c 90 8b	jmp ($8b90,x)			jmp 	(VectorSet2,x)
.8a5a					Unused1:
.8a5a					Unused2:
.8a5a					Unused3:
.8a5a					Unused4:
.8a5a	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
>8a5d							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a5e					VectorSetPunc:
>8a5e	1a 90					.word	ShiftLeft                        ; $00 <<
>8a60	d1 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a62	c7 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a64	7a 9f					.word	SyntaxError                      ; $03 !!3
>8a66	7a 9f					.word	SyntaxError                      ; $04 ><
>8a68	db 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a6a	1d 90					.word	ShiftRight                       ; $06 >>
>8a6c	7a 9f					.word	SyntaxError                      ; $07 !!7
>8a6e	7a 9f					.word	SyntaxError                      ; $08 !!8
>8a70	7a 9f					.word	SyntaxError                      ; $09 !!9
>8a72	7a 9f					.word	SyntaxError                      ; $0a !!10
>8a74	7a 9f					.word	SyntaxError                      ; $0b !!11
>8a76	7a 9f					.word	SyntaxError                      ; $0c !!12
>8a78	7a 9f					.word	SyntaxError                      ; $0d !!13
>8a7a	7a 9f					.word	SyntaxError                      ; $0e !!14
>8a7c	7a 9f					.word	SyntaxError                      ; $0f !!15
>8a7e	7a 9f					.word	SyntaxError                      ; $10 @
>8a80	7a 9f					.word	SyntaxError                      ; $11 !!17
>8a82	7a 9f					.word	SyntaxError                      ; $12 !!18
>8a84	7a 9f					.word	SyntaxError                      ; $13 [
>8a86	9e 8e					.word	IntegerDivide                    ; $14 \
>8a88	7a 9f					.word	SyntaxError                      ; $15 ]
>8a8a	ab 91					.word	EorInteger                       ; $16 ^
>8a8c	7a 9f					.word	SyntaxError                      ; $17 _
>8a8e	7a 9f					.word	SyntaxError                      ; $18 `
>8a90	7a 9f					.word	SyntaxError                      ; $19 !!25
>8a92	7a 9f					.word	SyntaxError                      ; $1a !!26
>8a94	7a 9f					.word	SyntaxError                      ; $1b {
>8a96	65 91					.word	OraInteger                       ; $1c |
>8a98	7a 9f					.word	SyntaxError                      ; $1d }
>8a9a	7a 9f					.word	SyntaxError                      ; $1e ~
>8a9c	7a 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8a9e	7a 9f					.word	SyntaxError                      ; $20
>8aa0	f1 91					.word	WordIndirect                     ; $21 !
>8aa2	7a 9f					.word	SyntaxError                      ; $22 "
>8aa4	7a 9f					.word	SyntaxError                      ; $23 #
>8aa6	7a 9f					.word	SyntaxError                      ; $24 $
>8aa8	eb 8e					.word	IntegerModulus                   ; $25 %
>8aaa	1f 91					.word	AndInteger                       ; $26 &
>8aac	7a 9f					.word	SyntaxError                      ; $27 '
>8aae	7a 9f					.word	SyntaxError                      ; $28 (
>8ab0	7a 9f					.word	SyntaxError                      ; $29 )
>8ab2	60 8f					.word	MulInteger                       ; $2a *
>8ab4	b1 90					.word	AddInteger                       ; $2b +
>8ab6	7a 9f					.word	SyntaxError                      ; $2c ,
>8ab8	f4 90					.word	SubInteger                       ; $2d -
>8aba	7a 9f					.word	SyntaxError                      ; $2e .
>8abc	dc 93					.word	FDivideCommand                   ; $2f /
>8abe	7a 9f					.word	SyntaxError                      ; $30 0
>8ac0	7a 9f					.word	SyntaxError                      ; $31 1
>8ac2	7a 9f					.word	SyntaxError                      ; $32 2
>8ac4	7a 9f					.word	SyntaxError                      ; $33 3
>8ac6	7a 9f					.word	SyntaxError                      ; $34 4
>8ac8	7a 9f					.word	SyntaxError                      ; $35 5
>8aca	7a 9f					.word	SyntaxError                      ; $36 6
>8acc	7a 9f					.word	SyntaxError                      ; $37 7
>8ace	7a 9f					.word	SyntaxError                      ; $38 8
>8ad0	7a 9f					.word	SyntaxError                      ; $39 9
>8ad2	7a 9f					.word	SyntaxError                      ; $3a :
>8ad4	7a 9f					.word	SyntaxError                      ; $3b ;
>8ad6	b3 8d					.word	BinaryCompareLess                ; $3c <
>8ad8	a9 8d					.word	BinaryCompareEqual               ; $3d =
>8ada	bd 8d					.word	BinaryCompareGreater             ; $3e >
>8adc	18 92					.word	ByteIndirect                     ; $3f ?
.8ade					VectorSet0:
>8ade	3d 8a					.word	EOLCommand                       ; $80 !0:EOF
>8ae0	4a 8a					.word	Shift1Command                    ; $81 !1:SH1
>8ae2	52 8a					.word	Shift2Command                    ; $82 !2:SH2
>8ae4	4c 99					.word	AbsUnary                         ; $83 ABS(
>8ae6	5c 99					.word	AllocUnary                       ; $84 ALLOC(
>8ae8	cc 99					.word	AscUnary                         ; $85 ASC(
>8aea	97 9b					.word	ChrUnary                         ; $86 CHR$(
>8aec	7a 9f					.word	SyntaxError                      ; $87 EVENT(
>8aee	a5 8d					.word	UnaryFalse                       ; $88 FALSE
>8af0	d9 99					.word	FracUnary                        ; $89 FRAC(
>8af2	7a 9f					.word	SyntaxError                      ; $8a HIT(
>8af4	ef 99					.word	IntUnary                         ; $8b INT(
>8af6	56 9b					.word	IsValUnary                       ; $8c ISVAL(
>8af8	7a 9f					.word	SyntaxError                      ; $8d JOYB(
>8afa	7a 9f					.word	SyntaxError                      ; $8e JOYX(
>8afc	7a 9f					.word	SyntaxError                      ; $8f JOYY(
>8afe	71 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b00	01 9a					.word	LenUnary                         ; $91 LEN(
>8b02	1f 9a					.word	Unary_Max                        ; $92 MAX(
>8b04	9b 9c					.word	Unary_Mid                        ; $93 MID$(
>8b06	1b 9a					.word	Unary_Min                        ; $94 MIN(
>8b08	76 9a					.word	Unary_Not                        ; $95 NOT(
>8b0a	8c 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b0c	81 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b0e	ab 9a					.word	Unary_Rnd                        ; $98 RND(
>8b10	2c 9b					.word	SgnUnary                         ; $99 SGN(
>8b12	a9 9b					.word	SpcUnary                         ; $9a SPC(
>8b14	c4 9b					.word	Unary_Str                        ; $9b STR$(
>8b16	7a 9f					.word	SyntaxError                      ; $9c TIMER(
>8b18	99 8d					.word	UnaryTrue                        ; $9d TRUE
>8b1a	4c 9b					.word	ValUnary                         ; $9e VAL(
>8b1c	13 85					.word	ForCommand                       ; $9f FOR
>8b1e	60 86					.word	IfCommand                        ; $a0 IF
>8b20	5a 8a					.word	Unused1                          ; $a1 PROC
>8b22	79 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b24	e5 8c					.word	Command_WHILE                    ; $a3 WHILE
>8b26	89 86					.word	EndIf                            ; $a4 ENDIF
>8b28	05 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b2a	cd 85					.word	NextCommand                      ; $a6 NEXT
>8b2c	5a 8a					.word	Unused4                          ; $a7 THEN
>8b2e	82 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b30	06 8d					.word	Command_WEND                     ; $a9 WEND
>8b32	7a 9f					.word	SyntaxError                      ; $aa BY
>8b34	b9 83					.word	CallCommand                      ; $ab CALL
>8b36	7a 9f					.word	SyntaxError                      ; $ac CIRCLE
>8b38	f3 83					.word	ClearCommand                     ; $ad CLEAR
>8b3a	7a 9f					.word	SyntaxError                      ; $ae CLS
>8b3c	7a 9f					.word	SyntaxError                      ; $af COLOR
>8b3e	7a 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b40	4b 84					.word	Command_Data                     ; $b1 DATA
>8b42	53 84					.word	DimCommand                       ; $b2 DIM
>8b44	5a 8a					.word	Unused3                          ; $b3 DOWNTO
>8b46	82 86					.word	ElseCode                         ; $b4 ELSE
>8b48	7a 9f					.word	SyntaxError                      ; $b5 FROM
>8b4a	7a 9f					.word	SyntaxError                      ; $b6 GFX
>8b4c	26 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b4e	44 86					.word	GotoCommand                      ; $b8 GOTO
>8b50	7a 9f					.word	SyntaxError                      ; $b9 HERE
>8b52	7a 9f					.word	SyntaxError                      ; $ba IMAGE
>8b54	8a 86					.word	LetCommand                       ; $bb LET
>8b56	7a 9f					.word	SyntaxError                      ; $bc LINE
>8b58	7d 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b5a	7a 9f					.word	SyntaxError                      ; $be OFF
>8b5c	7a 9f					.word	SyntaxError                      ; $bf ON
>8b5e	7a 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b60	7a 9f					.word	SyntaxError                      ; $c1 PALETTE
>8b62	7a 9f					.word	SyntaxError                      ; $c2 PLOT
>8b64	4e 88					.word	Command_Print                    ; $c3 PRINT
>8b66	13 89					.word	Command_Read                     ; $c4 READ
>8b68	7a 9f					.word	SyntaxError                      ; $c5 RECT
>8b6a	6c 89					.word	RemCommand                       ; $c6 REM
>8b6c	36 86					.word	Command_RETURN                   ; $c7 RETURN
>8b6e	7a 9f					.word	SyntaxError                      ; $c8 SOLID
>8b70	7a 9f					.word	SyntaxError                      ; $c9 SPRITE
>8b72	7a 9f					.word	SyntaxError                      ; $ca TEXT
>8b74	5a 8a					.word	Unused2                          ; $cb TO
.8b76					VectorSet1:
>8b76	7a 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b78	7a 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b7a	7a 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b7c	8a 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b7e	a9 83					.word	AssertCommand                    ; $84 ASSERT
>8b80	7a 9f					.word	SyntaxError                      ; $85 BITMAP
>8b82	10 85					.word	EndCommand                       ; $86 END
>8b84	df 86					.word	Command_List                     ; $87 LIST
>8b86	44 88					.word	NewCommand                       ; $88 NEW
>8b88	9b 89					.word	Command_Restore                  ; $89 RESTORE
>8b8a	cd 89					.word	CommandRUN                       ; $8a RUN
>8b8c	7a 9f					.word	SyntaxError                      ; $8b SPRITES
>8b8e	18 8c					.word	StopCommand                      ; $8c STOP
.8b90					VectorSet2:
>8b90	7a 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b92	7a 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b94	7a 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b96	39 9e					.word	Assemble_adc                     ; $83 ADC
>8b98	31 9e					.word	Assemble_and                     ; $84 AND
>8b9a	4d 9e					.word	Assemble_asl                     ; $85 ASL
>8b9c	b7 9e					.word	Assemble_bcc                     ; $86 BCC
>8b9e	bb 9e					.word	Assemble_bcs                     ; $87 BCS
>8ba0	c3 9e					.word	Assemble_beq                     ; $88 BEQ
>8ba2	7a 9e					.word	Assemble_bit                     ; $89 BIT
>8ba4	ab 9e					.word	Assemble_bmi                     ; $8a BMI
>8ba6	bf 9e					.word	Assemble_bne                     ; $8b BNE
>8ba8	a7 9e					.word	Assemble_bpl                     ; $8c BPL
>8baa	c7 9e					.word	Assemble_bra                     ; $8d BRA
>8bac	cb 9e					.word	Assemble_brk                     ; $8e BRK
>8bae	af 9e					.word	Assemble_bvc                     ; $8f BVC
>8bb0	b3 9e					.word	Assemble_bvs                     ; $90 BVS
>8bb2	d3 9e					.word	Assemble_clc                     ; $91 CLC
>8bb4	27 9f					.word	Assemble_cld                     ; $92 CLD
>8bb6	e7 9e					.word	Assemble_cli                     ; $93 CLI
>8bb8	17 9f					.word	Assemble_clv                     ; $94 CLV
>8bba	45 9e					.word	Assemble_cmp                     ; $95 CMP
>8bbc	8e 9e					.word	Assemble_cpx                     ; $96 CPX
>8bbe	89 9e					.word	Assemble_cpy                     ; $97 CPY
>8bc0	6b 9e					.word	Assemble_dec                     ; $98 DEC
>8bc2	23 9f					.word	Assemble_dex                     ; $99 DEX
>8bc4	ff 9e					.word	Assemble_dey                     ; $9a DEY
>8bc6	35 9e					.word	Assemble_eor                     ; $9b EOR
>8bc8	70 9e					.word	Assemble_inc                     ; $9c INC
>8bca	33 9f					.word	Assemble_inx                     ; $9d INX
>8bcc	1f 9f					.word	Assemble_iny                     ; $9e INY
>8bce	a2 9e					.word	Assemble_jmp                     ; $9f JMP
>8bd0	9d 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bd2	41 9e					.word	Assemble_lda                     ; $a1 LDA
>8bd4	66 9e					.word	Assemble_ldx                     ; $a2 LDX
>8bd6	84 9e					.word	Assemble_ldy                     ; $a3 LDY
>8bd8	57 9e					.word	Assemble_lsr                     ; $a4 LSR
>8bda	37 9f					.word	Assemble_nop                     ; $a5 NOP
>8bdc	2d 9e					.word	Assemble_ora                     ; $a6 ORA
>8bde	e3 9e					.word	Assemble_pha                     ; $a7 PHA
>8be0	cf 9e					.word	Assemble_php                     ; $a8 PHP
>8be2	2b 9f					.word	Assemble_phx                     ; $a9 PHX
>8be4	eb 9e					.word	Assemble_phy                     ; $aa PHY
>8be6	f3 9e					.word	Assemble_pla                     ; $ab PLA
>8be8	d7 9e					.word	Assemble_plp                     ; $ac PLP
>8bea	3f 9f					.word	Assemble_plx                     ; $ad PLX
>8bec	fb 9e					.word	Assemble_ply                     ; $ae PLY
>8bee	52 9e					.word	Assemble_rol                     ; $af ROL
>8bf0	5c 9e					.word	Assemble_ror                     ; $b0 ROR
>8bf2	df 9e					.word	Assemble_rti                     ; $b1 RTI
>8bf4	ef 9e					.word	Assemble_rts                     ; $b2 RTS
>8bf6	49 9e					.word	Assemble_sbc                     ; $b3 SBC
>8bf8	db 9e					.word	Assemble_sec                     ; $b4 SEC
>8bfa	3b 9f					.word	Assemble_sed                     ; $b5 SED
>8bfc	f7 9e					.word	Assemble_sei                     ; $b6 SEI
>8bfe	3d 9e					.word	Assemble_sta                     ; $b7 STA
>8c00	2f 9f					.word	Assemble_stp                     ; $b8 STP
>8c02	61 9e					.word	Assemble_stx                     ; $b9 STX
>8c04	7f 9e					.word	Assemble_sty                     ; $ba STY
>8c06	75 9e					.word	Assemble_stz                     ; $bb STZ
>8c08	13 9f					.word	Assemble_tax                     ; $bc TAX
>8c0a	0f 9f					.word	Assemble_tay                     ; $bd TAY
>8c0c	98 9e					.word	Assemble_trb                     ; $be TRB
>8c0e	93 9e					.word	Assemble_tsb                     ; $bf TSB
>8c10	1b 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c12	03 9f					.word	Assemble_txa                     ; $c1 TXA
>8c14	0b 9f					.word	Assemble_txs                     ; $c2 TXS
>8c16	07 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c18					StopCommand:
.8c18	a9 08		lda #$08		lda	#8
.8c1a	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c1d					ProcedureScan:
.8c1d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c1f	85 30		sta $30				sta 	codePtr
.8c21	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c23	85 31		sta $31				sta 	codePtr+1
.8c25					_PSLoop:
.8c25	b2 30		lda ($30)			lda 	(codePtr)
.8c27	f0 42		beq $8c6b			beq 	_PSExit
.8c29	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c2b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c2d	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c2f	d0 2d		bne $8c5e			bne 	_PSNext
.8c31	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c32	b1 30		lda ($30),y			lda 	(codePtr),y
.8c34	29 c0		and #$c0			and 	#$C0
.8c36	c9 40		cmp #$40			cmp 	#$40
.8c38	d0 32		bne $8c6c			bne 	_PSSyntax
.8c3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3c	18		clc				clc
.8c3d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c3f	85 37		sta $37				sta 	zTemp0+1
.8c41	c8		iny				iny 								; LSB
.8c42	b1 30		lda ($30),y			lda 	(codePtr),y
.8c44	85 36		sta $36				sta 	zTemp0
.8c46	c8		iny				iny 								; character after variable call.
.8c47	98		tya				tya 								; save Y offset at +7
.8c48	a0 07		ldy #$07			ldy 	#7
.8c4a	91 36		sta ($36),y			sta 	(zTemp0),y
.8c4c	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c4e	a0 02		ldy #$02			ldy 	#2
.8c50	91 36		sta ($36),y			sta 	(zTemp0),y
.8c52	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c54					_PSCopy:
.8c54	b5 30		lda $30,x			lda 	safePtr,x
.8c56	c8		iny				iny
.8c57	91 36		sta ($36),y			sta 	(zTemp0),y
.8c59	e8		inx				inx
.8c5a	e0 04		cpx #$04			cpx 	#4
.8c5c	d0 f6		bne $8c54			bne 	_PSCopy
.8c5e					_PSNext:
.8c5e	18		clc				clc
.8c5f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c61	65 30		adc $30				adc 	codePtr
.8c63	85 30		sta $30				sta 	codePtr
.8c65	90 02		bcc $8c69			bcc 	_CREExit
.8c67	e6 31		inc $31				inc 	codePtr+1
.8c69					_CREExit:
.8c69	80 ba		bra $8c25			bra 	_PSLoop
.8c6b					_PSExit:
.8c6b	60		rts				rts
.8c6c					_PSSyntax:
.8c6c	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c6f					ScanForward:
.8c6f	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c71	86 37		stx $37				stx 	zTemp0+1
.8c73	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c75					_ScanLoop:
.8c75	b1 30		lda ($30),y			lda 	(codePtr),y
.8c77	c8		iny				iny
.8c78	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c7a	d0 0e		bne $8c8a			bne 	_ScanGoNext
.8c7c	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c7e	f0 04		beq $8c84			beq 	_ScanMatch
.8c80	c5 37		cmp $37				cmp 	zTemp0+1
.8c82	d0 06		bne $8c8a			bne 	_ScanGoNext
.8c84					_ScanMatch:
.8c84	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c86	d0 01		bne $8c89			bne 	_ScanNotEndEOL
.8c88	88		dey				dey
.8c89					_ScanNotEndEOL:
.8c89	60		rts				rts
.8c8a					_ScanGoNext:
.8c8a	20 8f 8c	jsr $8c8f			jsr  	ScanForwardOne
.8c8d	80 e6		bra $8c75			bra 	_ScanLoop
.8c8f					ScanForwardOne:
.8c8f	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c91	90 3e		bcc $8cd1			bcc 	_SFWExit
.8c93	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c95	90 18		bcc $8caf			bcc 	_ScanSkipOne
.8c97	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c99	b0 2f		bcs $8cca			bcs 	_ScanSkipData
.8c9b	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c9d	90 32		bcc $8cd1			bcc 	_SFWExit 					; if not, ordinary keywords.
.8c9f	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8ca1	b0 2e		bcs $8cd1			bcs 	_SFWExit
.8ca3	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ca5	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ca7	b0 28		bcs $8cd1			bcs 	_SFWExit
.8ca9	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cab	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cad	80 22		bra $8cd1			bra 	_SFWExit
.8caf					_ScanSkipOne:
.8caf	c8		iny				iny 								; consume the extra one.
.8cb0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cb2	d0 1d		bne $8cd1			bne 	_SFWExit
.8cb4	18		clc				clc
.8cb5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cb7	65 30		adc $30				adc 	codePtr
.8cb9	85 30		sta $30				sta 	codePtr
.8cbb	90 02		bcc $8cbf			bcc 	_CREExit
.8cbd	e6 31		inc $31				inc 	codePtr+1
.8cbf					_CREExit:
.8cbf	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8cc1	b2 30		lda ($30)			lda 	(codePtr)
.8cc3	d0 0c		bne $8cd1			bne 	_SFWExit 					; if not zero, more to scan
.8cc5	a9 13		lda #$13		lda	#19
.8cc7	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.8cca					_ScanSkipData:
.8cca	88		dey				dey 								; point at data token
.8ccb	c8		iny				iny
.8ccc	98		tya				tya
.8ccd	38		sec				sec
.8cce	71 30		adc ($30),y			adc 	(codePtr),y
.8cd0	a8		tay				tay
.8cd1					_SFWExit:
.8cd1	60		rts				rts
.8cd2					ScanGetCurrentLineStep:
.8cd2	64 38		stz $38				stz 	zTemp1
.8cd4	a0 03		ldy #$03			ldy 	#3
.8cd6					_SGCLSLoop:
.8cd6	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd8	c8		iny				iny
.8cd9	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8cdb	f0 05		beq $8ce2			beq 	_SGCLSExit
.8cdd	20 8f 8c	jsr $8c8f			jsr 	ScanForwardOne
.8ce0	80 f4		bra $8cd6			bra 	_SGCLSLoop
.8ce2					_SGCLSExit:
.8ce2	a5 38		lda $38				lda 	zTemp1
.8ce4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ce5					Command_WHILE:
.8ce5	5a		phy				phy 								; save position of the test
.8ce6	a2 00		ldx #$00			ldx 	#0
.8ce8	20 19 9d	jsr $9d19			jsr 	EvaluateNumber 				; work out the number
.8ceb	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; check if zero
.8cee	f0 0e		beq $8cfe			beq 	_WHExitLoop 				; if so exit the loop
.8cf0	98		tya				tya 								; position *after* test.
.8cf1	7a		ply				ply 								; restore position before test, at WHILE
.8cf2	88		dey				dey
.8cf3	48		pha				pha 								; push after test on the stack
.8cf4	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8cf6	20 52 a2	jsr $a252			jsr 	StackOpen
.8cf9	20 96 a2	jsr $a296			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8cfc	7a		ply				ply 								; restore the position *after* the test
.8cfd	60		rts				rts
.8cfe					_WHExitLoop:
.8cfe	68		pla				pla 								; throw post loop position
.8cff	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d01	aa		tax				tax
.8d02	20 6f 8c	jsr $8c6f			jsr 	ScanForward
.8d05	60		rts				rts
.8d06					Command_WEND:
.8d06	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d08	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d0a	20 7e a2	jsr $a27e			jsr 	StackCheckFrame
.8d0d	20 a7 a2	jsr $a2a7			jsr 	STKLoadCodePosition 		; loop back
.8d10	20 70 a2	jsr $a270			jsr 	StackClose		 			; erase the frame
.8d13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d14					CheckRightBracket:
.8d14	b1 30		lda ($30),y			lda 	(codePtr),y
.8d16	c8		iny				iny
.8d17	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d19	d0 0f		bne $8d2a			bne 	CNAFail
.8d1b	60		rts				rts
.8d1c					CheckComma:
.8d1c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d1e	c8		iny				iny
.8d1f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d21	d0 07		bne $8d2a			bne 	CNAFail
.8d23	60		rts				rts
.8d24					CheckNextA:
.8d24	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d26	d0 02		bne $8d2a			bne 	CNAFail
.8d28	c8		iny				iny 								; skip character
.8d29	60		rts				rts 								; and exit
.8d2a					CNAFail:
.8d2a	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d2d					ErrorHandler:
.8d2d	a8		tay				tay 								; find the error text
.8d2e	f0 49		beq $8d79			beq 	_EHEnd
.8d30	a2 00		ldx #$00			ldx 	#0
.8d32	a9 93		lda #$93			lda 	#((ErrorText) & $FF)
.8d34	85 36		sta $36				sta 	0+zTemp0
.8d36	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d38	85 37		sta $37				sta 	1+zTemp0
.8d3a					_EHFind:
.8d3a	88		dey				dey 								; found the error text ?
.8d3b	f0 0e		beq $8d4b			beq 	_EHFound
.8d3d					_EHFindZero:
.8d3d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d3f	e6 36		inc $36				inc 	zTemp0
.8d41	d0 02		bne $8d45			bne 	_EHFNoCarry
.8d43	e6 37		inc $37				inc 	zTemp0+1
.8d45					_EHFNoCarry:
.8d45	c9 00		cmp #$00			cmp 	#0
.8d47	d0 f4		bne $8d3d			bne 	_EHFindZero
.8d49	80 ef		bra $8d3a			bra 	_EHFind
.8d4b					_EHFound:
.8d4b	a5 36		lda $36				lda 	zTemp0 						; print message
.8d4d	a6 37		ldx $37				ldx 	zTemp0+1
.8d4f	20 86 8d	jsr $8d86			jsr 	PrintStringXA
.8d52	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d54	b1 30		lda ($30),y			lda 	(codePtr),y
.8d56	d0 05		bne $8d5d			bne 	_EHAtMsg
.8d58	c8		iny				iny
.8d59	b1 30		lda ($30),y			lda 	(codePtr),y
.8d5b	f0 17		beq $8d74			beq 	_EHCREnd
.8d5d					_EHAtMsg:
.8d5d	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d5f	a9 7c		lda #$7c			lda 	#_AtMsg & $FF
.8d61	20 86 8d	jsr $8d86			jsr 	PrintStringXA
.8d64	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d66	b1 30		lda ($30),y			lda 	(codePtr),y
.8d68	48		pha				pha
.8d69	c8		iny				iny
.8d6a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6c	aa		tax				tax
.8d6d	68		pla				pla
.8d6e	20 3f 92	jsr $923f			jsr 	ConvertInt16 				; convert XA to string
.8d71	20 86 8d	jsr $8d86			jsr 	PrintStringXA 				; and print it.
.8d74					_EHCREnd:
.8d74	a9 0d		lda #$0d			lda 	#13 						; new line
.8d76	20 38 a7	jsr $a738			jsr 	EXTPrintCharacter
.8d79					_EHEnd:
.8d79	4c 5a 83	jmp $835a			jmp 	WarmStart
>8d7c	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d84	20 00
.8d86					PrintStringXA:
.8d86	5a		phy				phy
.8d87	86 37		stx $37				stx 	zTemp0+1
.8d89	85 36		sta $36				sta 	zTemp0
.8d8b	a0 00		ldy #$00			ldy 	#0
.8d8d					_PSXALoop:
.8d8d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d8f	f0 06		beq $8d97			beq 	_PSXAExit
.8d91	20 38 a7	jsr $a738			jsr 	EXTPrintCharacter
.8d94	c8		iny				iny
.8d95	80 f6		bra $8d8d			bra 	_PSXALoop
.8d97					_PSXAExit:
.8d97	7a		ply				ply
.8d98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d99					UnaryTrue:
.8d99	fa		plx				plx
.8d9a					ReturnTrue:
.8d9a	a9 01		lda #$01			lda 	#1  						; set to 1
.8d9c	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.8d9f	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8da1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8da4	60		rts				rts
.8da5					UnaryFalse:
.8da5	fa		plx				plx
.8da6					ReturnFalse:
.8da6	4c f0 9d	jmp $9df0			jmp 	NSMSetZero 					; set it all to zero
.8da9					BinaryCompareEqual:
.8da9	fa		plx				plx
.8daa	20 e5 8d	jsr $8de5			jsr 	CompareBaseCode
.8dad	c9 00		cmp #$00			cmp 	#0
.8daf	f0 e9		beq $8d9a			beq 	ReturnTrue
.8db1	80 f3		bra $8da6			bra 	ReturnFalse
.8db3					BinaryCompareLess:
.8db3	fa		plx				plx
.8db4	20 e5 8d	jsr $8de5			jsr 	CompareBaseCode
.8db7	c9 ff		cmp #$ff			cmp 	#$FF
.8db9	f0 df		beq $8d9a			beq 	ReturnTrue
.8dbb	80 e9		bra $8da6			bra 	ReturnFalse
.8dbd					BinaryCompareGreater:
.8dbd	fa		plx				plx
.8dbe	20 e5 8d	jsr $8de5			jsr 	CompareBaseCode
.8dc1	c9 01		cmp #$01			cmp 	#1
.8dc3	f0 d5		beq $8d9a			beq 	ReturnTrue
.8dc5	80 df		bra $8da6			bra 	ReturnFalse
.8dc7					BinaryCompareNotEqual:
.8dc7	fa		plx				plx
.8dc8	20 e5 8d	jsr $8de5			jsr 	CompareBaseCode
.8dcb	c9 00		cmp #$00			cmp 	#0
.8dcd	d0 cb		bne $8d9a			bne 	ReturnTrue
.8dcf	80 d5		bra $8da6			bra 	ReturnFalse
.8dd1					BinaryCompareLessEqual:
.8dd1	fa		plx				plx
.8dd2	20 e5 8d	jsr $8de5			jsr 	CompareBaseCode
.8dd5	c9 01		cmp #$01			cmp 	#1
.8dd7	d0 c1		bne $8d9a			bne 	ReturnTrue
.8dd9	80 cb		bra $8da6			bra 	ReturnFalse
.8ddb					BinaryCompareGreaterEqual:
.8ddb	fa		plx				plx
.8ddc	20 e5 8d	jsr $8de5			jsr 	CompareBaseCode
.8ddf	c9 ff		cmp #$ff			cmp 	#$FF
.8de1	d0 b7		bne $8d9a			bne 	ReturnTrue
.8de3	80 c1		bra $8da6			bra 	ReturnFalse
.8de5					CompareBaseCode:
.8de5	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; make both values if references.
.8de8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8deb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8dee	29 10		and #$10			and 	#NSTString
.8df0	d0 40		bne $8e32			bne 	_CBCString
.8df2	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8df5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8df8	d0 3b		bne $8e35			bne 	_CBCFloat
.8dfa	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dfd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e00	29 08		and #$08			and 	#NSTFloat
.8e02	d0 31		bne $8e35			bne 	_CBCFloat
.8e04	20 38 8e	jsr $8e38			jsr 	CompareFixMinusZero
.8e07	e8		inx				inx
.8e08	20 38 8e	jsr $8e38			jsr 	CompareFixMinusZero
.8e0b	ca		dex				dex
.8e0c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e0f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e12	10 0b		bpl $8e1f			bpl 	_CDCSameSign
.8e14	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e17	30 16		bmi $8e2f			bmi 	_CBCLess 					; return $FF
.8e19					_CBCGreater:
.8e19	a9 01		lda #$01			lda 	#1
.8e1b	60		rts				rts
.8e1c					_CBCEqual:
.8e1c	a9 00		lda #$00			lda 	#0
.8e1e	60		rts				rts
.8e1f					_CDCSameSign:
.8e1f	20 8b 90	jsr $908b			jsr 	SubTopTwoStack 				; unsigned subtract
.8e22	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; or the mantissa together
.8e25	f0 f5		beq $8e1c			beq 	_CBCEqual 					; -0 == 0
.8e27	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e2a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e2d	10 ea		bpl $8e19			bpl 	_CBCGreater
.8e2f					_CBCLess:
.8e2f	a9 ff		lda #$ff			lda 	#$FF
.8e31	60		rts				rts
.8e32					_CBCString:
.8e32	4c e1 8f	jmp $8fe1			jmp 	CompareStrings
.8e35					_CBCFloat:
.8e35	4c c2 93	jmp $93c2			jmp 	CompareFloat
.8e38					CompareFixMinusZero:
.8e38	20 20 9e	jsr $9e20			jsr 	NSMIsZero
.8e3b	d0 03		bne $8e40			bne 	_CFXMZNotZero
.8e3d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e40					_CFXMZNotZero:
.8e40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e41					StringConcat:
.8e41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e44	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e47	29 18		and #$18			and 	#NSBTypeMask
.8e49	c9 10		cmp #$10			cmp 	#NSTString
.8e4b	d0 4e		bne $8e9b			bne		_SCType
.8e4d	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e4f	e8		inx				inx
.8e50	20 6e 8e	jsr $8e6e			jsr 	_SCSetupZ0 					; setup for second
.8e53	20 79 8e	jsr $8e79			jsr 	_SCLengthZ0 				; length for second
.8e56	ca		dex				dex
.8e57	20 6e 8e	jsr $8e6e			jsr 	_SCSetupZ0 					; setup for first
.8e5a	20 79 8e	jsr $8e79			jsr 	_SCLengthZ0 				; length for first
.8e5d	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e5f	20 45 a3	jsr $a345			jsr 	StringTempAllocate
.8e62	20 8c 8e	jsr $8e8c			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e65	e8		inx				inx
.8e66	20 6e 8e	jsr $8e6e			jsr 	_SCSetupZ0 					; copy second out
.8e69	20 8c 8e	jsr $8e8c			jsr 	_SCCopy
.8e6c	ca		dex				dex
.8e6d	60		rts				rts
.8e6e					_SCSetupZ0:
.8e6e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e71	85 36		sta $36				sta 	zTemp0
.8e73	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e76	85 37		sta $37				sta 	zTemp0+1
.8e78	60		rts				rts
.8e79					_SCLengthZ0:
.8e79	5a		phy				phy
.8e7a	a0 00		ldy #$00			ldy 	#0
.8e7c					_SCLenLoop:
.8e7c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e7e	f0 0a		beq $8e8a			beq 	_SCLExit
.8e80	c8		iny				iny
.8e81	e6 38		inc $38				inc 	zTemp1
.8e83	10 f7		bpl $8e7c			bpl		_SCLenLoop
.8e85	a9 09		lda #$09		lda	#9
.8e87	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.8e8a					_SCLExit:
.8e8a	7a		ply				ply
.8e8b	60		rts				rts
.8e8c					_SCCopy:
.8e8c	5a		phy				phy
.8e8d	a0 00		ldy #$00			ldy 	#0
.8e8f					_SCCopyLoop:
.8e8f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e91	f0 06		beq $8e99			beq 	_SCCExit
.8e93	20 83 a3	jsr $a383			jsr 	StringTempWrite
.8e96	c8		iny				iny
.8e97	80 f6		bra $8e8f			bra 	_SCCopyLoop
.8e99					_SCCExit:
.8e99	7a		ply				ply
.8e9a	60		rts				rts
.8e9b					_SCType:
.8e9b	4c 84 9f	jmp $9f84			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8e9e					IntegerDivide:
.8e9e	fa		plx				plx
.8e9f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ea2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ea5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ea6	0a		asl a				asl 	a
.8ea7	10 05		bpl $8eae			bpl 	_NotRef
.8ea9	48		pha				pha
.8eaa	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ead	68		pla				pla
.8eae					_NotRef:
.8eae	0a		asl a				asl 	a
.8eaf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8eb1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8eb4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8eb7	f0 03		beq $8ebc			beq 	_IntegerCode 				; if clear, then we have two integers
.8eb9	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.8ebc					_IntegerCode:
.8ebc	20 de 8e	jsr $8ede			jsr 	CheckDivideZero 			; do div zero check
.8ebf	20 16 8f	jsr $8f16			jsr 	Int32Divide 				; do the division
.8ec2	20 d3 8f	jsr $8fd3			jsr 	CalculateSign 				; calculate result sign
.8ec5					NSMCopyPlusTwoToZero:
.8ec5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ec8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ecb	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ece	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ed1	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8ed4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ed7	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8eda	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8edd	60		rts				rts
.8ede					CheckDivideZero:
.8ede	e8		inx				inx
.8edf	20 20 9e	jsr $9e20			jsr 	NSMIsZero
.8ee2	f0 02		beq $8ee6			beq 	_CDVError
.8ee4	ca		dex				dex
.8ee5	60		rts				rts
.8ee6					_CDVError:
.8ee6	a9 03		lda #$03		lda	#3
.8ee8	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.8eeb					IntegerModulus:
.8eeb	fa		plx				plx
.8eec	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eef	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ef2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ef3	0a		asl a				asl 	a
.8ef4	10 05		bpl $8efb			bpl 	_NotRef
.8ef6	48		pha				pha
.8ef7	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8efa	68		pla				pla
.8efb					_NotRef:
.8efb	0a		asl a				asl 	a
.8efc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8efe	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f01	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f04	f0 03		beq $8f09			beq 	_IntegerCode 				; if clear, then we have two integers
.8f06	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.8f09					_IntegerCode:
.8f09					IntegerModulusNoCheck:
.8f09	20 de 8e	jsr $8ede			jsr 	CheckDivideZero 			; do div zero check
.8f0c	20 16 8f	jsr $8f16			jsr 	Int32Divide 				; do the division
.8f0f	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f12	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f15	60		rts				rts
.8f16					Int32Divide:
.8f16	48		pha				pha 								; save AXY
.8f17	5a		phy				phy
.8f18	20 c7 9d	jsr $9dc7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f1b	20 ec 9d	jsr $9dec			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f1e	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f20					_I32DivideLoop:
.8f20	e8		inx				inx
.8f21	e8		inx				inx
.8f22	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f25	ca		dex				dex
.8f26	ca		dex				dex
.8f27	20 06 9e	jsr $9e06			jsr 	NSMRotateLeft
.8f2a	20 56 8f	jsr $8f56			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f2d	90 03		bcc $8f32			bcc 	_I32DivideNoCarryIn
.8f2f	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f32					_I32DivideNoCarryIn:
.8f32	88		dey				dey 								; loop round till division completed.
.8f33	d0 eb		bne $8f20			bne 	_I32DivideLoop
.8f35	7a		ply				ply 								; restore AXY and exit
.8f36	68		pla				pla
.8f37	60		rts				rts
.8f38					Int32ShiftDivide:
.8f38	48		pha				pha 								; save AY
.8f39	5a		phy				phy
.8f3a	e8		inx				inx 								; clear S[X+2]
.8f3b	e8		inx				inx
.8f3c	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.8f3f	ca		dex				dex
.8f40	ca		dex				dex
.8f41	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f43					_I32SDLoop:
.8f43	20 56 8f	jsr $8f56			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f46	e8		inx				inx
.8f47	e8		inx				inx
.8f48	20 06 9e	jsr $9e06			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f4b	ca		dex				dex
.8f4c	ca		dex				dex
.8f4d	20 06 9e	jsr $9e06			jsr 	NSMRotateLeft
.8f50	88		dey				dey 	 							; do 31 times
.8f51	d0 f0		bne $8f43			bne 	_I32SDLoop
.8f53	7a		ply				ply 								; restore AY and exit
.8f54	68		pla				pla
.8f55	60		rts				rts
.8f56					DivideCheckSubtract:
.8f56	20 8b 90	jsr $908b			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f59	b0 04		bcs $8f5f			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f5b	20 65 90	jsr $9065			jsr 	AddTopTwoStack 				; add it back in
.8f5e	18		clc				clc 								; and return False
.8f5f					_DCSExit:
.8f5f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f60					MulInteger:
.8f60	fa		plx				plx
.8f61	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f64	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f67	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f68	0a		asl a				asl 	a
.8f69	10 05		bpl $8f70			bpl 	_NotRef
.8f6b	48		pha				pha
.8f6c	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f6f	68		pla				pla
.8f70					_NotRef:
.8f70	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f71	30 0b		bmi $8f7e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f73	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f76	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f79	f0 06		beq $8f81			beq 	_IntegerCode 				; if clear, then we have two integers
.8f7b	4c 99 94	jmp $9499			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f7e					_StringData:
.8f7e	4c 8e 9f	jmp $9f8e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f81					_IntegerCode:
.8f81	20 8e 8f	jsr $8f8e			jsr 	MultiplyShort
.8f84	c9 00		cmp #$00			cmp 	#0
.8f86	f0 05		beq $8f8d			beq 	_MIExit
.8f88	a9 04		lda #$04		lda	#4
.8f8a	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.8f8d					_MIExit:
.8f8d	60		rts				rts
.8f8e					MultiplyShort:
.8f8e	5a		phy				phy 								; save Y
.8f8f	20 c7 9d	jsr $9dc7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f92	20 ec 9d	jsr $9dec			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8f95	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8f97					_I32MLoop:
.8f97	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8f9a	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8f9d	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fa0	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fa3	f0 28		beq $8fcd			beq 	_I32MExit 					; exit if zero
.8fa5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fa8	29 01		and #$01			and 	#1
.8faa	f0 0e		beq $8fba			beq 	_I32MNoAdd
.8fac	20 65 90	jsr $9065			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8faf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fb2	10 06		bpl $8fba			bpl 	_I32MNoAdd
.8fb4					_I32ShiftRight:
.8fb4	20 13 9e	jsr $9e13			jsr 	NSMShiftRight 				; shift S[X] right
.8fb7	c8		iny				iny 								; increment shift count
.8fb8	80 0a		bra $8fc4			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fba					_I32MNoAdd:
.8fba	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fbd	70 f5		bvs $8fb4			bvs 	_I32ShiftRight 				; instead.
.8fbf	e8		inx				inx
.8fc0	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fc3	ca		dex				dex
.8fc4					_I32MShiftUpper:
.8fc4	e8		inx				inx 								; shift S[X+2] right
.8fc5	e8		inx				inx
.8fc6	20 13 9e	jsr $9e13			jsr 	NSMShiftRight
.8fc9	ca		dex				dex
.8fca	ca		dex				dex
.8fcb	80 ca		bra $8f97			bra 	_I32MLoop 					; try again.
.8fcd					_I32MExit:
.8fcd	20 d3 8f	jsr $8fd3			jsr 	CalculateSign
.8fd0	98		tya				tya 								; shift in A
.8fd1	7a		ply				ply 								; restore Y and exit
.8fd2	60		rts				rts
.8fd3					CalculateSign:
.8fd3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fd6	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fd9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fdc	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fdd	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8fe0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8fe1					CompareStrings:
.8fe1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8fe4	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8fe7	29 10		and #$10			and 	#NSBIsString
.8fe9	f0 2c		beq $9017			beq 	_CSTypeError
.8feb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8fee	85 36		sta $36				sta 	zTemp0
.8ff0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ff3	85 37		sta $37				sta 	zTemp0+1
.8ff5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.8ff8	85 38		sta $38				sta 	zTemp1
.8ffa	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8ffd	85 39		sta $39				sta 	zTemp1+1
.8fff	5a		phy				phy 								; save Y so we can access strings
.9000	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9002					_CSLoop:
.9002	c8		iny				iny
.9003	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9005	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9007	d0 06		bne $900f			bne 	_CSDifferent
.9009	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.900b	d0 f5		bne $9002			bne 	_CSLoop 					; still comparing
.900d					_CSExit:
.900d	7a		ply				ply 								; reached end, return zero in A from EOS
.900e	60		rts				rts
.900f					_CSDifferent:
.900f	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9011	90 fa		bcc $900d			bcc		_CSExit
.9013	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9015	80 f6		bra $900d			bra 	_CSExit
.9017					_CSTypeError:
.9017	4c 84 9f	jmp $9f84			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.901a					ShiftLeft:
.901a	38		sec				sec
.901b	80 01		bra $901e			bra 	ShiftMain
.901d					ShiftRight:
.901d	18		clc				clc
.901e					ShiftMain:
.901e	fa		plx				plx 								; restore X
.901f	08		php				php 								; save direction
.9020	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9023	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9026	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9027	0a		asl a				asl 	a
.9028	10 05		bpl $902f			bpl 	_NotRef
.902a	48		pha				pha
.902b	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.902e	68		pla				pla
.902f					_NotRef:
.902f	0a		asl a				asl 	a
.9030	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9032	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9035	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9038	f0 03		beq $903d			beq 	_IntegerCode 				; if clear, then we have two integers
.903a	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.903d					_IntegerCode:
.903d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9040	29 e0		and #$e0			and 	#$E0
.9042	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9045	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9048	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.904b	d0 13		bne $9060			bne 	_SMExit0 					; if >= 32 it will always return zero.
.904d					_SMLoop:
.904d	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9050	30 11		bmi $9063			bmi 	_SMExit 					; exit if done.
.9052	28		plp				plp 								; restore direcition setting
.9053	08		php				php
.9054	90 05		bcc $905b			bcc 	_SMRight
.9056	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; shift left if CS
.9059	80 f2		bra $904d			bra 	_SMLoop
.905b					_SMRight:
.905b	20 13 9e	jsr $9e13			jsr 	NSMShiftRight 				; shift right if CC
.905e	80 ed		bra $904d			bra 	_SMLoop
.9060					_SMExit0:
.9060	20 f0 9d	jsr $9df0			jsr 	NSMSetZero 					; return zero.
.9063					_SMExit:
.9063	28		plp				plp 								; throw direction
.9064	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9065					AddTopTwoStack:
.9065	18		clc				clc
.9066	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9069	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.906c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.906f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9072	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9075	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9078	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.907b	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.907e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9081	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9084	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9087	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.908a	60		rts				rts
.908b					SubTopTwoStack:
.908b	38		sec				sec
.908c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.908f	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9092	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9095	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9098	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.909b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.909e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90a1	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90a4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90a7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90aa	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90ad	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90b0	60		rts				rts
.90b1					AddInteger:
.90b1	fa		plx				plx
.90b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90b5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90b8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90b9	0a		asl a				asl 	a
.90ba	10 05		bpl $90c1			bpl 	_NotRef
.90bc	48		pha				pha
.90bd	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90c0	68		pla				pla
.90c1					_NotRef:
.90c1	0a		asl a				asl 	a 							; put MSB of type into A:7
.90c2	30 0b		bmi $90cf			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90c4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90c7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90ca	f0 06		beq $90d2			beq 	_IntegerCode 				; if clear, then we have two integers
.90cc	4c 19 93	jmp $9319			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90cf					_StringData:
.90cf	4c 41 8e	jmp $8e41			jmp 	StringConcat							; at least one string - don't know both are strings.
.90d2					_IntegerCode:
.90d2					AddCode:
.90d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90d5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90d8	10 8b		bpl $9065			bpl 	AddTopTwoStack
.90da	20 8b 90	jsr $908b			jsr 	SubTopTwoStack 				; do a physical subtraction
.90dd	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90e0	10 09		bpl $90eb			bpl 	_AddExit
.90e2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90e5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90e8	20 a5 9d	jsr $9da5			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90eb					_AddExit:
.90eb	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; check for -0
.90ee	d0 03		bne $90f3			bne 	_AddNonZero
.90f0	9e 00 04	stz $0400,x			stz 	NSStatus,x
.90f3					_AddNonZero:
.90f3	60		rts				rts
.90f4					SubInteger:
.90f4	fa		plx				plx
.90f5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90f8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90fb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90fc	0a		asl a				asl 	a
.90fd	10 05		bpl $9104			bpl 	_NotRef
.90ff	48		pha				pha
.9100	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9103	68		pla				pla
.9104					_NotRef:
.9104	0a		asl a				asl 	a 							; put MSB of type into A:7
.9105	30 0b		bmi $9112			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9107	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.910a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.910d	f0 06		beq $9115			beq 	_IntegerCode 				; if clear, then we have two integers
.910f	4c 1e 93	jmp $931e			jmp 	FloatingPointSub 							; otherwise at least one float.
.9112					_StringData:
.9112	4c 8e 9f	jmp $9f8e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9115					_IntegerCode:
.9115	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9118	49 80		eor #$80			eor 	#$80
.911a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.911d	80 b3		bra $90d2			bra 	AddCode 					; and do the same code as add.
.911f					AndInteger:
.911f	fa		plx				plx
.9120	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9123	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9126	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9127	0a		asl a				asl 	a
.9128	10 05		bpl $912f			bpl 	_NotRef
.912a	48		pha				pha
.912b	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.912e	68		pla				pla
.912f					_NotRef:
.912f	0a		asl a				asl 	a
.9130	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9132	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9135	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9138	f0 03		beq $913d			beq 	_IntegerCode 				; if clear, then we have two integers
.913a	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.913d					_IntegerCode:
.913d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9140	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9143	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9146	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9149	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.914c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.914f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9152	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9155	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9158	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.915b	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.915e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9161	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9164	60		rts				rts
.9165					OraInteger:
.9165	fa		plx				plx
.9166	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9169	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.916c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.916d	0a		asl a				asl 	a
.916e	10 05		bpl $9175			bpl 	_NotRef
.9170	48		pha				pha
.9171	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9174	68		pla				pla
.9175					_NotRef:
.9175	0a		asl a				asl 	a
.9176	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9178	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.917b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.917e	f0 03		beq $9183			beq 	_IntegerCode 				; if clear, then we have two integers
.9180	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.9183					_IntegerCode:
.9183	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9186	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9189	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.918c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.918f	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9192	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9195	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9198	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.919b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.919e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91a1	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91a4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91a7	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91aa	60		rts				rts
.91ab					EorInteger:
.91ab	fa		plx				plx
.91ac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91af	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91b2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91b3	0a		asl a				asl 	a
.91b4	10 05		bpl $91bb			bpl 	_NotRef
.91b6	48		pha				pha
.91b7	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91ba	68		pla				pla
.91bb					_NotRef:
.91bb	0a		asl a				asl 	a
.91bc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91be	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91c1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91c4	f0 03		beq $91c9			beq 	_IntegerCode 				; if clear, then we have two integers
.91c6	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.91c9					_IntegerCode:
.91c9	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91cc	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91cf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91d2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91d5	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91d8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91db	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91de	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91e1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91e4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91e7	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91ea	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91ed	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91f0	60		rts				rts
.91f1					WordIndirect:
.91f1	fa		plx				plx
.91f2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91f5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91f8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91f9	0a		asl a				asl 	a
.91fa	10 05		bpl $9201			bpl 	_NotRef
.91fc	48		pha				pha
.91fd	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9200	68		pla				pla
.9201					_NotRef:
.9201	0a		asl a				asl 	a
.9202	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9204	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9207	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.920a	f0 03		beq $920f			beq 	_IntegerCode 				; if clear, then we have two integers
.920c	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.920f					_IntegerCode:
.920f	20 d2 90	jsr $90d2			jsr 	AddCode 					; add the two values
.9212	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9214	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9217	60		rts				rts
.9218					ByteIndirect:
.9218	fa		plx				plx
.9219	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.921c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.921f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9220	0a		asl a				asl 	a
.9221	10 05		bpl $9228			bpl 	_NotRef
.9223	48		pha				pha
.9224	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9227	68		pla				pla
.9228					_NotRef:
.9228	0a		asl a				asl 	a
.9229	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.922b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.922e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9231	f0 03		beq $9236			beq 	_IntegerCode 				; if clear, then we have two integers
.9233	4c 84 9f	jmp $9f84			jmp 	TypeError 					; anything else, type mismatch.
.9236					_IntegerCode:
.9236	20 d2 90	jsr $90d2			jsr 	AddCode 					; add the two values
.9239	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.923b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.923e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.923f					ConvertInt16:
.923f	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.9242	8e 10 04	stx $0410			stx 	NSMantissa1
.9245	9c 18 04	stz $0418			stz 	NSMantissa2
.9248	9c 20 04	stz $0420			stz 	NSMantissa3
.924b	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.924e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9250	a9 0a		lda #$0a			lda 	#10 						; base
.9252	80 00		bra $9254			bra 	ConvertInt32
.9254					ConvertInt32:
.9254	5a		phy				phy
.9255	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9257	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.925a	10 08		bpl $9264			bpl 	_CI32NotNeg
.925c	48		pha				pha
.925d	a9 2d		lda #$2d			lda 	#'-'
.925f	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.9262	c8		iny				iny
.9263	68		pla				pla
.9264					_CI32NotNeg:
.9264	20 72 92	jsr $9272			jsr 	_CI32DivideConvert 			; recursive conversion
.9267	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9269	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.926c	7a		ply				ply
.926d	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.926f	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.9271	60		rts				rts
.9272					_CI32DivideConvert:
.9272	e8		inx				inx 								; write to next slot up
.9273	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.9276	ca		dex				dex
.9277	20 16 8f	jsr $8f16			jsr 	Int32Divide 				; divide
.927a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.927d	48		pha				pha
.927e	20 c5 8e	jsr $8ec5			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9281	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; is it zero ?
.9284	f0 06		beq $928c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9286	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9289	20 72 92	jsr $9272			jsr 	_CI32DivideConvert 			; and recusrively call.
.928c					_CI32NoRecurse:
.928c	68		pla				pla 								; remainder
.928d	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.928f	90 02		bcc $9293			bcc 	_CI32NotHex
.9291	69 26		adc #$26			adc 	#6+32
.9293					_CI32NotHex:
.9293	69 30		adc #$30			adc 	#48
.9295	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.9298	c8		iny				iny
.9299	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.929a					PrecedenceLevel:
>929a	04					.byte	 4	; $00 <<
>929b	02					.byte	 2	; $01 <=
>929c	02					.byte	 2	; $02 <>
>929d	00					.byte	 0	; $03 !!3
>929e	00					.byte	 0	; $04 ><
>929f	02					.byte	 2	; $05 >=
>92a0	04					.byte	 4	; $06 >>
>92a1	00					.byte	 0	; $07 !!7
>92a2	00					.byte	 0	; $08 !!8
>92a3	00					.byte	 0	; $09 !!9
>92a4	00					.byte	 0	; $0a !!10
>92a5	00					.byte	 0	; $0b !!11
>92a6	00					.byte	 0	; $0c !!12
>92a7	00					.byte	 0	; $0d !!13
>92a8	00					.byte	 0	; $0e !!14
>92a9	00					.byte	 0	; $0f !!15
>92aa	00					.byte	 0	; $10 @
>92ab	00					.byte	 0	; $11 !!17
>92ac	00					.byte	 0	; $12 !!18
>92ad	00					.byte	 0	; $13 [
>92ae	04					.byte	 4	; $14 \
>92af	00					.byte	 0	; $15 ]
>92b0	01					.byte	 1	; $16 ^
>92b1	00					.byte	 0	; $17 _
>92b2	00					.byte	 0	; $18 `
>92b3	00					.byte	 0	; $19 !!25
>92b4	00					.byte	 0	; $1a !!26
>92b5	00					.byte	 0	; $1b {
>92b6	01					.byte	 1	; $1c |
>92b7	00					.byte	 0	; $1d }
>92b8	00					.byte	 0	; $1e ~
>92b9	00					.byte	 0	; $1f [7m<7F>[m
>92ba	00					.byte	 0	; $20
>92bb	05					.byte	 5	; $21 !
>92bc	00					.byte	 0	; $22 "
>92bd	00					.byte	 0	; $23 #
>92be	05					.byte	 5	; $24 $
>92bf	04					.byte	 4	; $25 %
>92c0	01					.byte	 1	; $26 &
>92c1	00					.byte	 0	; $27 '
>92c2	00					.byte	 0	; $28 (
>92c3	00					.byte	 0	; $29 )
>92c4	04					.byte	 4	; $2a *
>92c5	03					.byte	 3	; $2b +
>92c6	00					.byte	 0	; $2c ,
>92c7	03					.byte	 3	; $2d -
>92c8	00					.byte	 0	; $2e .
>92c9	04					.byte	 4	; $2f /
>92ca	00					.byte	 0	; $30 0
>92cb	00					.byte	 0	; $31 1
>92cc	00					.byte	 0	; $32 2
>92cd	00					.byte	 0	; $33 3
>92ce	00					.byte	 0	; $34 4
>92cf	00					.byte	 0	; $35 5
>92d0	00					.byte	 0	; $36 6
>92d1	00					.byte	 0	; $37 7
>92d2	00					.byte	 0	; $38 8
>92d3	00					.byte	 0	; $39 9
>92d4	00					.byte	 0	; $3a :
>92d5	00					.byte	 0	; $3b ;
>92d6	02					.byte	 2	; $3c <
>92d7	02					.byte	 2	; $3d =
>92d8	02					.byte	 2	; $3e >
>92d9	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92da					EvaluateExpressionAt0:
.92da	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92dc					EvaluateExpression:
.92dc	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92de					EvaluateExpressionAtPrecedence:
.92de	48		pha				pha 								; save precedence level
.92df	20 b6 97	jsr $97b6			jsr 	EvaluateTerm 				; evaluate term into level X.
.92e2	68		pla				pla 								; restore precedence level.
.92e3					_EXPRLoop:
.92e3	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92e5	b1 30		lda ($30),y			lda 	(codePtr),y
.92e7	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92e9	b0 25		bcs $9310			bcs 	_EXPRExit
.92eb	da		phx				phx 								; read the operator precedence
.92ec	aa		tax				tax
.92ed	bd 9a 92	lda $929a,x			lda 	PrecedenceLevel,x
.92f0	fa		plx				plx
.92f1	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.92f3	f0 1b		beq $9310			beq 	_EXPRExit
.92f5	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.92f7	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.92f9	c5 37		cmp $37				cmp 	zTemp0+1
.92fb	b0 13		bcs $9310			bcs		_EXPRExit 					; if current >= operator exit
.92fd	48		pha				pha 								; save current precedence.
.92fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9300	c8		iny				iny
.9301	48		pha				pha
.9302	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9304	e8		inx				inx 								; work out the right hand side.
.9305	20 de 92	jsr $92de			jsr 	EvaluateExpressionAtPrecedence
.9308	ca		dex				dex
.9309	68		pla				pla 								; get operator, call the code.
.930a	20 13 93	jsr $9313			jsr 	_EXPRCaller
.930d	68		pla				pla 								; restore precedence level
.930e	80 d3		bra $92e3			bra 	_EXPRLoop 					; and go round.
.9310					_EXPRExit:
.9310	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9312	60		rts				rts
.9313					_EXPRCaller:
.9313	da		phx				phx 								; save on stack, first thing is to restore it
.9314	0a		asl a				asl 	a 							; double so can use vectors into X
.9315	aa		tax				tax
.9316	7c 5e 8a	jmp ($8a5e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9319					FloatingPointAdd:
.9319	20 c2 94	jsr $94c2			jsr 	FloatPrepare 				; prepare for floats
.931c	80 0b		bra $9329			bra 	FloatAdd
.931e					FloatingPointSub:
.931e	20 c2 94	jsr $94c2			jsr 	FloatPrepare 				; prepare for floats
.9321					FloatSubtract:
.9321	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.9324	49 80		eor #$80			eor 	#$80
.9326	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9329					FloatAdd:
.9329	48		pha				pha
.932a	5a		phy				phy
.932b	20 d3 94	jsr $94d3			jsr 	NSNormalise 				; normalise S[X]
.932e	f0 5c		beq $938c			beq 	_FAReturn1
.9330	e8		inx				inx 								; normalise S[X+1]
.9331	20 d3 94	jsr $94d3			jsr 	NSNormalise
.9334	ca		dex				dex
.9335	c9 00		cmp #$00			cmp 	#0
.9337	f0 77		beq $93b0			beq 	_FAExit 					; if so, just return A
.9339	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.933c	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.933f	f0 1b		beq $935c			beq 	_FAExponentsEqual
.9341	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.9344	a8		tay				tay
.9345	38		sec				sec 								; do a signed comparison of the exponents.
.9346	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9349	50 02		bvc $934d			bvc 	_FANoSignedChange
.934b	49 80		eor #$80			eor 	#$80
.934d					_FANoSignedChange:
.934d	29 80		and #$80			and 	#$80
.934f	10 03		bpl $9354			bpl 	_FAHaveMax
.9351	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.9354					_FAHaveMax:
.9354	20 b3 93	jsr $93b3			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9357	e8		inx				inx
.9358	20 b3 93	jsr $93b3			jsr 	_FAShiftToExponent
.935b	ca		dex				dex
.935c					_FAExponentsEqual:
.935c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.935f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9362	30 10		bmi $9374			bmi 	_FADifferentSigns
.9364	20 65 90	jsr $9065			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9367	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.936a	10 44		bpl $93b0			bpl 	_FAExit 					; if no, we are done.
.936c	20 13 9e	jsr $9e13			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.936f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.9372	80 3c		bra $93b0			bra 	_FAExit
.9374					_FADifferentSigns:
.9374	20 8b 90	jsr $908b			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9377	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.937a	10 06		bpl $9382			bpl 	_FACheckZero 				; if no, check for -0
.937c	20 9c 9d	jsr $9d9c			jsr 	NSMNegate 					; netate result
.937f	20 a5 9d	jsr $9da5			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9382					_FACheckZero:
.9382	20 20 9e	jsr $9e20			jsr 	NSMIsZero	 				; check for -0
.9385	d0 29		bne $93b0			bne 	_FAExit
.9387	9e 00 04	stz $0400,x			stz 	NSStatus,x
.938a	80 24		bra $93b0			bra 	_FAExit
.938c					_FAReturn1:
.938c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.938f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9392	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9395	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9398	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.939b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.939e	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93a1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93a4	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93a7	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93aa	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93ad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93b0					_FAExit:
.93b0	7a		ply				ply
.93b1	68		pla				pla
.93b2	60		rts				rts
.93b3					_FAShiftToExponent:
.93b3					_FAShiftToExponent2:
.93b3	98		tya				tya 								; compare Y to exponent
.93b4	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93b7	f0 08		beq $93c1			beq 	_FASEExit 					; exit if so.
.93b9	20 13 9e	jsr $9e13			jsr 	NSMShiftRight	 			; shift the mantissa right
.93bc	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93bf	80 f2		bra $93b3			bra 	_FAShiftToExponent2
.93c1					_FASEExit:
.93c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93c2					CompareFloat:
.93c2	20 21 93	jsr $9321			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93c5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93c8	29 f8		and #$f8			and 	#$F8
.93ca	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93cd	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93d0	f0 09		beq $93db			beq 	_FCExit 					; zero, so approximately identical
.93d2	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93d4	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93d7	10 02		bpl $93db			bpl 	_FCExit
.93d9					_FCNegative:
.93d9	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93db					_FCExit:
.93db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93dc					FDivideCommand:
.93dc	fa		plx				plx	 								; restore stack position
.93dd	20 c2 94	jsr $94c2			jsr 	FloatPrepare 				; prepare for floats
.93e0					FloatDivide:
.93e0	48		pha				pha
.93e1	e8		inx				inx
.93e2	20 d3 94	jsr $94d3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93e5	ca		dex				dex
.93e6	c9 00		cmp #$00			cmp 	#0
.93e8	f0 20		beq $940a			beq 	_FDZero
.93ea	20 d3 94	jsr $94d3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93ed	f0 19		beq $9408			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93ef	20 38 8f	jsr $8f38			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93f2	20 c5 8e	jsr $8ec5			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.93f5	20 d3 94	jsr $94d3			jsr		NSNormalise 				; renormalise
.93f8	20 d3 8f	jsr $8fd3			jsr 	CalculateSign 				; calculate result sign
.93fb	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.93fe	38		sec				sec
.93ff	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9402	38		sec				sec
.9403	e9 1e		sbc #$1e			sbc 	#30
.9405	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9408					_FDExit:
.9408	68		pla				pla
.9409	60		rts				rts
.940a					_FDZero:
.940a	a9 03		lda #$03		lda	#3
.940c	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.940f					FloatFractionalPart:
.940f	5a		phy				phy
.9410	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.9413	29 7f		and #$7f			and 	#$7F
.9415	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9418	20 d3 94	jsr $94d3			jsr 	NSNormalise
.941b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.941e	38		sec				sec
.941f	e9 e0		sbc #$e0			sbc 	#$E0
.9421	90 31		bcc $9454			bcc 	_FFPExit 					; already fractional
.9423	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9425	b0 2a		bcs $9451			bcs 	_FFPZero
.9427	a8		tay				tay 								; put count to do in Y
.9428	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.942b	20 56 94	jsr $9456			jsr 	_FFPPartial
.942e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9431	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9434	20 56 94	jsr $9456			jsr 	_FFPPartial
.9437	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.943a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.943d	20 56 94	jsr $9456			jsr 	_FFPPartial
.9440	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9443	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9446	20 56 94	jsr $9456			jsr 	_FFPPartial
.9449	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.944c	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; zeroed check.
.944f	d0 03		bne $9454			bne 	_FFPExit
.9451					_FFPZero:
.9451	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.9454					_FFPExit:
.9454	7a		ply				ply
.9455	60		rts				rts
.9456					_FFPPartial:
.9456	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9458	f0 17		beq $9471			beq 	_FFFPPExit
.945a	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.945c	b0 0c		bcs $946a			bcs 	_FFFPPWholeByte
.945e	5a		phy				phy
.945f					_FFFPPLeft:
.945f	0a		asl a				asl 	a
.9460	88		dey				dey
.9461	d0 fc		bne $945f			bne 	_FFFPPLeft
.9463	7a		ply				ply
.9464					_FFFPPRight:
.9464	4a		lsr a				lsr 	a
.9465	88		dey				dey
.9466	d0 fc		bne $9464			bne 	_FFFPPRight
.9468	80 07		bra $9471			bra 	_FFFPPExit
.946a					_FFFPPWholeByte:
.946a	98		tya				tya 								; subtract 8 from count
.946b	38		sec				sec
.946c	e9 08		sbc #$08			sbc 	#8
.946e	a8		tay				tay
.946f	a9 00		lda #$00			lda 	#0 							; and clear all
.9471					_FFFPPExit:
.9471	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9472					FloatIntegerPart:
.9472	48		pha				pha
.9473	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.9476	f0 1f		beq $9497			beq 	_FIPExit 					; if so do nothing
.9478	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; is it zero ?
.947b	f0 17		beq $9494			beq 	_FIPZero 					; if so return zero.
.947d	20 d3 94	jsr $94d3			jsr 	NSNormalise 				; normalise
.9480	f0 12		beq $9494			beq 	_FIPZero 					; normalised to zero, exit zero
.9482					_FIPShift:
.9482	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9485	10 08		bpl $948f			bpl 	_FIPCheckZero
.9487	20 13 9e	jsr $9e13			jsr 	NSMShiftRight 				; shift mantissa right
.948a	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.948d	80 f3		bra $9482			bra 	_FIPShift
.948f					_FIPCheckZero:
.948f	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; avoid -0 problem
.9492	d0 03		bne $9497			bne 	_FIPExit 					; set to zero if mantissa zero.
.9494					_FIPZero:
.9494	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.9497					_FIPExit:
.9497	68		pla				pla
.9498	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9499					FloatingPointMultiply:
.9499	20 c2 94	jsr $94c2			jsr 	FloatPrepare 				; prepare for floats
.949c					FloatMultiply:
.949c	48		pha				pha
.949d	20 d3 94	jsr $94d3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94a0	f0 1b		beq $94bd			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94a2	e8		inx				inx
.94a3	20 d3 94	jsr $94d3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94a6	ca		dex				dex
.94a7	c9 00		cmp #$00			cmp 	#0
.94a9	f0 0f		beq $94ba			beq 	_FDSetZero
.94ab	20 8e 8f	jsr $8f8e			jsr 	MultiplyShort 				; calculate the result.
.94ae	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94b1	18		clc				clc
.94b2	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94b5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94b8	80 03		bra $94bd			bra 	_FDExit
.94ba					_FDSetZero:
.94ba	20 f0 9d	jsr $9df0			jsr 	NSMSetZero 					; return 0
.94bd					_FDExit:
.94bd	20 d3 94	jsr $94d3			jsr 	NSNormalise 				; normalise the result
.94c0	68		pla				pla
.94c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94c2					FloatPrepare:
.94c2	20 f5 95	jsr $95f5			jsr 	DereferenceTopTwo 			; dereference the top two values
.94c5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94c8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94cb	29 10		and #$10			and 	#NSBIsString
.94cd	d0 01		bne $94d0			bne 	_FDType
.94cf	60		rts				rts
.94d0					_FDType:
.94d0	4c 84 9f	jmp $9f84			jmp 	TypeError
.94d3					NSNormalise:
.94d3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94d6	29 80		and #$80			and 	#$80
.94d8	09 08		ora #$08			ora 	#NSTFloat
.94da	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94dd	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; if zero exit
.94e0	d0 09		bne $94eb			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94e2	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94e5	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94e8	a9 00		lda #$00			lda 	#0 							; set Z flag
.94ea	60		rts				rts
.94eb					_NSNormaliseOptimise:
.94eb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94ee	d0 22		bne $9512			bne 	_NSNormaliseLoop
.94f0	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.94f3	30 1d		bmi $9512			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.94f5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94f8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.94fb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94fe	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9501	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9504	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.9507	bd 28 04	lda $0428,x			lda 	NSExponent,x
.950a	38		sec				sec
.950b	e9 08		sbc #$08			sbc 	#8
.950d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9510	80 d9		bra $94eb			bra 	_NSNormaliseOptimise
.9512					_NSNormaliseLoop:
.9512	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9515	70 08		bvs $951f			bvs 	_NSNExit 					; exit if so with Z flag clear
.9517	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; shift mantissa left
.951a	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.951d	80 f3		bra $9512			bra 	_NSNormaliseLoop
.951f					_NSNExit:
.951f	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9521	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9522					AssignNumber:
.9522	5a		phy				phy
.9523	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9526	85 36		sta $36				sta 	zTemp0
.9528	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.952b	85 37		sta $37				sta 	zTemp0+1
.952d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9530	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9532	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9535	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9537	c9 08		cmp #$08			cmp 	#NSTFloat
.9539	f0 2a		beq $9565			beq 	_ANFloat
.953b	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.953e	f0 05		beq $9545			beq		_ANNotFloat
.9540	e8		inx				inx
.9541	20 72 94	jsr $9472			jsr 	FloatIntegerPart 			; make it an integer
.9544	ca		dex				dex
.9545					_ANNotFloat:
.9545	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9548	29 03		and #$03			and 	#3
.954a	d0 05		bne $9551			bne 	_ANByteWord
.954c	20 71 95	jsr $9571			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.954f	80 1e		bra $956f			bra 	_ANExit
.9551					_ANByteWord:
.9551	48		pha				pha 								; save count
.9552	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9555	92 36		sta ($36)			sta 	(zTemp0)
.9557	68		pla				pla
.9558	c9 01		cmp #$01			cmp	 	#1
.955a	f0 13		beq $956f			beq 	_ANExit
.955c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.955f	a0 01		ldy #$01			ldy 	#1
.9561	91 36		sta ($36),y			sta 	(zTemp0),y
.9563	80 0a		bra $956f			bra 	_ANExit
.9565					_ANFloat:
.9565	20 71 95	jsr $9571			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9568	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.956b	a0 04		ldy #$04			ldy 	#4
.956d	91 36		sta ($36),y			sta 	(zTemp0),y
.956f					_ANExit:
.956f	7a		ply				ply
.9570	60		rts				rts
.9571					_ANCopy4PackSign:
.9571	a0 03		ldy #$03			ldy 	#3
.9573	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9576	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9578	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.957b	91 36		sta ($36),y			sta 	(zTemp0),y
.957d	88		dey				dey
.957e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9581	91 36		sta ($36),y			sta 	(zTemp0),y
.9583	88		dey				dey
.9584	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9587	91 36		sta ($36),y			sta 	(zTemp0),y
.9589	88		dey				dey
.958a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.958d	91 36		sta ($36),y			sta 	(zTemp0),y
.958f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9590					AssignString:
.9590	5a		phy				phy
.9591	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9594	85 38		sta $38				sta 	zTemp1
.9596	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9599	85 39		sta $39				sta 	zTemp1+1
.959b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.959e	85 36		sta $36				sta 	zTemp0
.95a0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95a3	85 37		sta $37				sta 	zTemp0+1
.95a5	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.95a9	f0 23		beq $95ce			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95ab	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95ac	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95ae	e9 02		sbc #$02			sbc 	#2
.95b0	85 3c		sta $3c				sta 	zsTemp
.95b2	a0 01		ldy #$01			ldy 	#1
.95b4	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b6	e9 00		sbc #$00			sbc 	#0
.95b8	85 3d		sta $3d				sta 	zsTemp+1
.95ba	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95bc					_ASGetLength:
.95bc	c8		iny				iny
.95bd	b1 38		lda ($38),y			lda 	(zTemp1),y
.95bf	d0 fb		bne $95bc			bne 	_ASGetLength
.95c1	98		tya				tya 								; is this length <= current length
.95c2	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95c4	90 20		bcc $95e6			bcc 	_ASCopyString
.95c6	f0 1e		beq $95e6			beq 	_ASCopyString
.95c8	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95ca	a0 01		ldy #$01			ldy 	#1
.95cc	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95ce					_ASNewStringRequired:
.95ce	e8		inx				inx 								; concrete the new string.
.95cf	20 c4 a2	jsr $a2c4			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95d2	ca		dex				dex
.95d3	18		clc				clc
.95d4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95d7	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95d9	92 36		sta ($36)			sta 	(zTemp0)
.95db	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95de	69 00		adc #$00			adc 	#0
.95e0	a0 01		ldy #$01			ldy 	#1
.95e2	91 36		sta ($36),y			sta 	(zTemp0),y
.95e4	80 0d		bra $95f3			bra 	_ASExit
.95e6					_ASCopyString:
.95e6	a0 00		ldy #$00			ldy 	#0
.95e8					_ASCopyLoop:
.95e8	b1 38		lda ($38),y			lda 	(zTemp1),y
.95ea	c8		iny				iny
.95eb	c8		iny				iny
.95ec	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95ee	88		dey				dey
.95ef	c9 00		cmp #$00			cmp 	#0
.95f1	d0 f5		bne $95e8			bne 	_ASCopyLoop
.95f3					_ASExit:
.95f3	7a		ply				ply
.95f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.95f5					DereferenceTopTwo:
.95f5	e8		inx				inx
.95f6	20 fa 95	jsr $95fa			jsr 	Dereference 				; deref x+1
.95f9	ca		dex				dex  								; falls through to deref x
.95fa					Dereference:
.95fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.95fd	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.95ff	f0 57		beq $9658			beq 	_DRFExit 					; not a reference
.9601	5a		phy				phy
.9602	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9605	85 36		sta $36				sta 	zTemp0
.9607	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.960a	85 37		sta $37				sta 	zTemp0+1
.960c	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.960f	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9611	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9614	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9617	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9619	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.961b	f0 0f		beq $962c			beq 	_DRFDereferenceTwo
.961d	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.961f	f0 39		beq $965a			beq 	_DRFFull
.9621	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9624	29 03		and #$03			and 	#3
.9626	f0 32		beq $965a			beq 	_DRFFull 					; the whole word
.9628	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.962a	f0 07		beq $9633			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.962c					_DRFDereferenceTwo:
.962c	a0 01		ldy #$01			ldy 	#1
.962e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9630	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9633					_DRFClear23:
.9633	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9636	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9639	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.963c	29 18		and #$18			and 	#NSBTypeMask
.963e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9641	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9643	d0 12		bne $9657			bne 	_DRFNotString
.9645	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9648	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.964b	d0 0a		bne $9657			bne 	_DRFNotString
.964d	a9 59		lda #$59			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.964f	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9652	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.9654	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9657					_DRFNotString
.9657	7a		ply				ply 								; restore Y and exit
.9658					_DRFExit:
.9658	60		rts				rts
.9659					_DRFNullString:
>9659	00						.byte 	0
.965a					_DRFFull:
.965a	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.965c	b1 36		lda ($36),y			lda 	(zTemp0),y
.965e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9661	c8		iny				iny
.9662	b1 36		lda ($36),y			lda 	(zTemp0),y
.9664	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9667	c8		iny				iny
.9668	b1 36		lda ($36),y			lda 	(zTemp0),y
.966a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.966d	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9670	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9673	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9675	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9678	f0 06		beq $9680			beq 	_DRFNoExponent
.967a	c8		iny				iny 								; if not, read the exponent as well.
.967b	b1 36		lda ($36),y			lda 	(zTemp0),y
.967d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9680					_DRFNoExponent:
.9680	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9683	10 0d		bpl $9692			bpl 	_DRFExit2 					; if not, then exit.
.9685	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9687	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.968a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.968d	09 80		ora #$80			ora 	#NSBIsNegative
.968f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9692					_DRFExit2:
.9692	7a		ply				ply
.9693	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9694					EncodeNumberStart:
.9694	38		sec				sec
.9695	80 01		bra $9698			bra 	EncodeNumberContinue+1
.9697					EncodeNumberContinue:
.9697	18		clc				clc
.9698					EncodeNumber:
.9698	08		php				php 								; save reset.
.9699	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.969b	f0 12		beq $96af			beq 	_ENIsOkay
.969d	c9 30		cmp #$30			cmp 	#"0"
.969f	90 04		bcc $96a5			bcc 	_ENBadNumber
.96a1	c9 3a		cmp #$3a			cmp 	#"9"+1
.96a3	90 0a		bcc $96af			bcc 	_ENIsOkay
.96a5					_ENBadNumber:
.96a5	28		plp				plp 								; throw saved reset
.96a6	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96a9	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96ab	f0 7e		beq $972b			beq 	_ENConstructFinal
.96ad					_ENFail:
.96ad	18		clc				clc 								; not allowed
.96ae	60		rts				rts
.96af					_ENIsOkay:
.96af	28		plp				plp 								; are we restarting
.96b0	90 15		bcc $96c7			bcc 	_ENNoRestart
.96b2					_ENStartEncode:
.96b2	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96b4	f0 0c		beq $96c2			beq 	_ENFirstDP
.96b6	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96b8	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.96bb	a9 01		lda #$01			lda 	#ESTA_Low
.96bd					_ENExitChange:
.96bd	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96c0	38		sec				sec
.96c1	60		rts				rts
.96c2					_ENFirstDP:
.96c2	20 f0 9d	jsr $9df0			jsr 	NSMSetZero 					; clear integer part
.96c5	80 3f		bra $9706			bra 	_ESTASwitchFloat			; go straight to float and exi
.96c7					_ENNoRestart:
.96c7	48		pha				pha 								; save on stack.
.96c8	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96cb	c9 01		cmp #$01			cmp 	#ESTA_Low
.96cd	f0 09		beq $96d8			beq  	_ESTALowState
.96cf	c9 02		cmp #$02			cmp 	#ESTA_High
.96d1	f0 29		beq $96fc			beq 	_ESTAHighState
.96d3	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96d5	f0 3b		beq $9712			beq 	_ESTADecimalState
>96d7	db						.byte 	$DB 						; causes a break in the emulator
.96d8					_ESTALowState:
.96d8	68		pla				pla 								; get value back
.96d9	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96db	f0 29		beq $9706			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96dd	29 0f		and #$0f			and 	#15 						; make digit
.96df	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96e2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96e5	0a		asl a				asl 	a
.96e6	0a		asl a				asl 	a
.96e7	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96ea	0a		asl a				asl 	a
.96eb	6d 86 04	adc $0486			adc 	DigitTemp
.96ee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96f1	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.96f3	90 05		bcc $96fa			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.96f5	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.96f7	8d 85 04	sta $0485			sta 	EncodeState
.96fa					_ESTANoSwitch:
.96fa	38		sec				sec
.96fb	60		rts				rts
.96fc					_ESTAHighState:
.96fc	68		pla				pla 								; get value back
.96fd	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.96ff	f0 05		beq $9706			beq 	_ESTASwitchFloat
.9701	20 65 97	jsr $9765			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9704	38		sec				sec
.9705	60		rts				rts
.9706					_ESTASwitchFloat:
.9706	9c 87 04	stz $0487			stz 	DecimalCount
.9709	e8		inx				inx 								; zero the decimal additive.
.970a	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.970d	ca		dex				dex
.970e	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9710	80 ab		bra $96bd			bra 	_ENExitChange
.9712					_ESTADecimalState:
.9712	68		pla				pla 								; digit.
.9713	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9715	f0 96		beq $96ad			beq 	_ENFail
.9717	e8		inx				inx 								; put digit into fractional part of X+1
.9718	20 65 97	jsr $9765			jsr 	ESTAShiftDigitIntoMantissa
.971b	ca		dex				dex
.971c	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.971f	ad 87 04	lda $0487			lda 	DecimalCount
.9722	c9 0b		cmp #$0b			cmp 	#11
.9724	f0 02		beq $9728			beq 	_ESTADSFail
.9726	38		sec				sec
.9727	60		rts				rts
.9728					_ESTADSFail:
.9728	4c 7f 9f	jmp $9f7f			jmp 	RangeError
.972b					_ENConstructFinal:
.972b	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.972e	f0 33		beq $9763			beq 	_ENCFExit 					; no decimals
.9730	5a		phy				phy
.9731	0a		asl a				asl 	a 							; x 4 and CLC
.9732	0a		asl a				asl 	a
.9733	6d 87 04	adc $0487			adc 	DecimalCount
.9736	a8		tay				tay
.9737	b9 3e 9f	lda $9f3e,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.973a	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.973d	b9 3f 9f	lda $9f3f,y			lda 	DecimalScalarTable-5+1,y
.9740	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9743	b9 40 9f	lda $9f40,y			lda 	DecimalScalarTable-5+2,y
.9746	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9749	b9 41 9f	lda $9f41,y			lda 	DecimalScalarTable-5+3,y
.974c	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.974f	b9 42 9f	lda $9f42,y			lda 	DecimalScalarTable-5+4,y
.9752	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9755	a9 08		lda #$08			lda 	#NSTFloat
.9757	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.975a	7a		ply				ply
.975b	e8		inx				inx 								; multiply decimal const by decimal scalar
.975c	20 9c 94	jsr $949c			jsr 	FloatMultiply
.975f	ca		dex				dex
.9760	20 29 93	jsr $9329			jsr 	FloatAdd 					; add to integer part.
.9763					_ENCFExit:
.9763	18		clc				clc 								; reject the digit.
.9764	60		rts				rts
.9765					ESTAShiftDigitIntoMantissa:
.9765	29 0f		and #$0f			and 	#15 						; save digit
.9767	48		pha				pha
.9768	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.976b	48		pha				pha
.976c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.976f	48		pha				pha
.9770	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9773	48		pha				pha
.9774	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9777	48		pha				pha
.9778	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; x 2
.977b	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; x 4
.977e	18		clc				clc 								; pop mantissa and add
.977f	68		pla				pla
.9780	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9783	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9786	68		pla				pla
.9787	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.978a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.978d	68		pla				pla
.978e	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9791	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9794	68		pla				pla
.9795	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9798	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.979b	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; x 10
.979e	68		pla				pla 								; add digit
.979f	18		clc				clc
.97a0	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97a3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97a6	90 0d		bcc $97b5			bcc 	_ESTASDExit
.97a8	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97ab	d0 08		bne $97b5			bne 	_ESTASDExit
.97ad	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97b0	d0 03		bne $97b5			bne 	_ESTASDExit
.97b2	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97b5					_ESTASDExit:
.97b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97b6					EvaluateTerm:
.97b6	b1 30		lda ($30),y			lda 	(codePtr),y
.97b8	30 18		bmi $97d2			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97ba	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97bc	b0 6f		bcs $982d			bcs 	_ETVariable
.97be	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97c0	90 6e		bcc $9830			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97c2	c9 3a		cmp #$3a			cmp 	#'9'+1
.97c4	b0 6a		bcs $9830			bcs 	_ETPuncUnary
.97c6	20 94 96	jsr $9694			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97c9					_ETNumber:
.97c9	c8		iny				iny 								; keep encoding until we have the numbers
.97ca	b1 30		lda ($30),y			lda 	(codePtr),y
.97cc	20 97 96	jsr $9697			jsr 	EncodeNumberContinue
.97cf	b0 f8		bcs $97c9			bcs 	_ETNumber 					; go back if accepted.
.97d1	60		rts				rts
.97d2					_ETCheckUnary:
.97d2	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97d4	f0 41		beq $9817			beq 	_ETString
.97d6	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97d8	f0 12		beq $97ec			beq 	_ETHexConstant
.97da	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97dc	90 0b		bcc $97e9			bcc 	_ETSyntaxError
.97de	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.97e0	b0 07		bcs $97e9			bcs 	_ETSyntaxError
.97e2	da		phx				phx 								; push X on the stack
.97e3	0a		asl a				asl 	a 							; put vector x 2 into X
.97e4	aa		tax				tax
.97e5	c8		iny				iny 								; consume unary function token
.97e6	7c de 8a	jmp ($8ade,x)			jmp 	(VectorSet0,x) 				; and do it.
.97e9					_ETSyntaxError:
.97e9	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.97ec					_ETHexConstant:
.97ec	c8		iny				iny 								; skip #
.97ed	c8		iny				iny 								; skip count
.97ee	20 f0 9d	jsr $9df0			jsr 	NSMSetZero 					; clear result
.97f1					_ETHLoop:
.97f1	b1 30		lda ($30),y			lda 	(codePtr),y
.97f3	c8		iny				iny 								; and consume
.97f4	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.97f6	f0 1e		beq $9816			beq 	_ETHExit
.97f8	48		pha				pha 								; save on stack.
.97f9	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; x 2
.97fc	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; x 4
.97ff	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; x 8
.9802	20 05 9e	jsr $9e05			jsr 	NSMShiftLeft 				; x 16
.9805	68		pla				pla 								; ASCII
.9806	c9 41		cmp #$41			cmp 	#'A'
.9808	90 02		bcc $980c			bcc 	_ETHNotChar
.980a	e9 07		sbc #$07			sbc 	#7
.980c					_ETHNotChar:
.980c	29 0f		and #$0f			and 	#15 						; digit now
.980e	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9811	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9814	80 db		bra $97f1			bra 	_ETHLoop 					; go round.
.9816					_ETHExit:
.9816	60		rts				rts
.9817					_ETString:
.9817	c8		iny				iny 								; look at length
.9818	b1 30		lda ($30),y			lda 	(codePtr),y
.981a	48		pha				pha
.981b	c8		iny				iny 								; first character
.981c	20 e8 a1	jsr $a1e8			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.981f	68		pla				pla 								; restore count and save
.9820	85 36		sta $36				sta 	zTemp0
.9822	98		tya				tya 								; add length to Y to skip it.
.9823	18		clc				clc
.9824	65 36		adc $36				adc 	zTemp0
.9826	a8		tay				tay
.9827	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9829	9d 00 04	sta $0400,x			sta 	NSStatus,x
.982c	60		rts				rts
.982d					_ETVariable:
.982d	4c 87 98	jmp $9887			jmp 	VariableHandler
.9830					_ETPuncUnary:
.9830	c8		iny				iny 								; consume the unary character
.9831	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9833	f0 2d		beq $9862			beq 	_ETUnaryNegate
.9835	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9837	f0 39		beq $9872			beq 	_ETDereference
.9839	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.983b	f0 43		beq $9880			beq 	_ETParenthesis
.983d	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.983f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9841	f0 06		beq $9849			beq 	_ETIndirection
.9843	e6 36		inc $36				inc 	zTemp0
.9845	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9847	d0 a0		bne $97e9			bne 	_ETSyntaxError
.9849					_ETIndirection:
.9849	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.984b	1a		inc a				inc 	a
.984c	48		pha				pha
.984d	20 b6 97	jsr $97b6			jsr 	EvaluateTerm				; evaluate the term
.9850	20 fa 95	jsr $95fa			jsr 	Dereference 				; dereference it.
.9853	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9856	d0 07		bne $985f			bne 	_ETTypeMismatch
.9858	68		pla				pla 								; indirection 1-2
.9859	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.985b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.985e	60		rts				rts
.985f					_ETTypeMismatch:
.985f	4c 84 9f	jmp $9f84			jmp 	TypeError
.9862					_ETUnaryNegate:
.9862	20 b6 97	jsr $97b6			jsr 	EvaluateTerm				; evaluate the term
.9865	20 fa 95	jsr $95fa			jsr 	Dereference 				; dereference it.
.9868	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.986b	29 10		and #$10			and 	#NSTString
.986d	d0 f0		bne $985f			bne 	_ETTypeMismatch
.986f	4c 9c 9d	jmp $9d9c			jmp 	NSMNegate  					; just toggles the sign bit.
.9872					_ETDereference:
.9872	20 b6 97	jsr $97b6			jsr 	EvaluateTerm				; evaluate the term
.9875	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9878	29 20		and #$20			and 	#NSBIsReference
.987a	f0 e3		beq $985f			beq 	_ETTypeMismatch
.987c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.987f	60		rts				rts
.9880					_ETParenthesis:
.9880	20 dc 92	jsr $92dc			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9883	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 			; check for )
.9886	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9887					VariableHandler:
.9887	b1 30		lda ($30),y			lda 	(codePtr),y
.9889	18		clc				clc
.988a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.988c	85 37		sta $37				sta 	zTemp0+1
.988e	c8		iny				iny
.988f	b1 30		lda ($30),y			lda 	(codePtr),y
.9891	85 36		sta $36				sta 	zTemp0
.9893	c8		iny				iny
.9894	18		clc				clc									; copy variable address+3 to mantissa
.9895	69 03		adc #$03			adc 	#3
.9897	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.989a	a5 37		lda $37				lda 	zTemp0+1
.989c	69 00		adc #$00			adc 	#0
.989e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98a1	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98a4	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98a7	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98aa	5a		phy				phy
.98ab	a0 02		ldy #$02			ldy 	#2 							; read type
.98ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.98af	7a		ply				ply
.98b0	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98b2	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98b4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98b7	29 04		and #$04			and 	#NSBIsArray
.98b9	d0 01		bne $98bc			bne 	_VHArray
.98bb	60		rts				rts
.98bc					_VHArray:
.98bc	e8		inx				inx
.98bd	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98c0	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98c2	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98c5	b1 30		lda ($30),y			lda 	(codePtr),y
.98c7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98c9	d0 06		bne $98d1			bne 	_VHNoSecondIndex
.98cb	c8		iny				iny 								; skip the comma
.98cc	e8		inx				inx
.98cd	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98d0	ca		dex				dex
.98d1					_VHNoSecondIndex:
.98d1	ca		dex				dex 								; set X back.
.98d2	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 			; and check the right bracket.
.98d5	5a		phy				phy 								; save position
.98d6	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98d8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98da	f0 6b		beq $9947			beq 	_VHBadIndex
.98dc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98df	85 3e		sta $3e				sta 	zaTemp
.98e1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98e4	85 3f		sta $3f				sta 	zaTemp+1
.98e6	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98e8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98ea	f0 02		beq $98ee			beq 	_VHHas2Mask
.98ec	a9 ff		lda #$ff			lda 	#$FF
.98ee					_VHHas2Mask:
.98ee	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.98f1	f0 54		beq $9947			beq 	_VHBadIndex
.98f3	0a		asl a				asl 	a 							; carry will be set if a second index
.98f4	90 09		bcc $98ff			bcc 	_VHCheckFirstIndex
.98f6	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.98f8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98fa	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.98fd	90 48		bcc $9947			bcc 	_VHBadIndex
.98ff					_VHCheckFirstIndex:
.98ff	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9901	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9903	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9906	90 3f		bcc $9947			bcc 	_VHBadIndex
.9908	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.990a	64 37		stz $37				stz 	zTemp0+1
.990c	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.990f	30 0f		bmi $9920			bmi 	_VHNoMultiply
.9911	da		phx				phx
.9912	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9915	48		pha				pha
.9916	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9918	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.991a	1a		inc a				inc 	a 							; add 1 for zero base
.991b	fa		plx				plx
.991c	20 85 9d	jsr $9d85			jsr 	Multiply8x8 				; calculate -> Z0
.991f	fa		plx				plx
.9920					_VHNoMultiply:
.9920	18		clc				clc
.9921	a5 36		lda $36				lda 	zTemp0
.9923	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9926	85 36		sta $36				sta 	zTemp0
.9928	a5 37		lda $37				lda 	zTemp0+1
.992a	69 00		adc #$00			adc 	#0
.992c	85 37		sta $37				sta 	zTemp0+1
.992e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9931	20 ee 84	jsr $84ee			jsr 	ScaleByBaseType
.9934	18		clc				clc
.9935	b2 3e		lda ($3e)			lda 	(zaTemp)
.9937	65 36		adc $36				adc 	zTemp0
.9939	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.993c	a0 01		ldy #$01			ldy 	#1
.993e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9940	65 37		adc $37				adc 	zTemp0+1
.9942	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9945	7a		ply				ply 								; restore position
.9946	60		rts				rts
.9947					_VHBadIndex:
.9947	a9 17		lda #$17		lda	#23
.9949	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.994c					AbsUnary:
.994c	fa		plx				plx 								; restore stack pos
.994d	20 19 9d	jsr $9d19			jsr 	EvaluateNumber 				; get a float or int
.9950	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9953	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.9956	29 7f		and #$7f			and 	#$7F
.9958	9d 00 04	sta $0400,x			sta 	NSStatus,x
.995b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.995c					AllocUnary:
.995c	fa		plx				plx 								; restore stack pos
.995d	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger		; get bytes required.
.9960	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9963	da		phx				phx 								; save X/Y
.9964	5a		phy				phy
.9965	8a		txa				txa 								; copy X into Y
.9966	a8		tay				tay
.9967	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.996a	aa		tax				tax
.996b	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.996e	20 7b 99	jsr $997b			jsr 	AllocateXABytes 			; allocate memory
.9971	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9974	8a		txa				txa
.9975	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9978	7a		ply				ply
.9979	fa		plx				plx
.997a	60		rts				rts
.997b					AllocateXABytes:
.997b	5a		phy				phy
.997c	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.997f	84 36		sty $36				sty 	zTemp0
.9981	5a		phy				phy
.9982	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9985	84 37		sty $37				sty 	zTemp0+1
.9987	5a		phy				phy
.9988	18		clc				clc 								; add to low memory pointer
.9989	6d 8c 04	adc $048c			adc 	lowMemPtr
.998c	8d 8c 04	sta $048c			sta 	lowMemPtr
.998f	8a		txa				txa
.9990	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9993	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9996	b0 2f		bcs $99c7			bcs 	CISSMemory
.9998	20 b9 99	jsr $99b9			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.999b					_ClearMemory:
.999b	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.999e	c5 36		cmp $36				cmp 	zTemp0
.99a0	d0 07		bne $99a9			bne 	_CMClearNext
.99a2	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99a5	c5 37		cmp $37				cmp 	zTemp0+1
.99a7	f0 0c		beq $99b5			beq 	_CMExit
.99a9					_CMClearNext:
.99a9	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99ab	92 36		sta ($36)			sta 	(zTemp0)
.99ad	e6 36		inc $36				inc 	zTemp0
.99af	d0 ea		bne $999b			bne 	_ClearMemory
.99b1	e6 37		inc $37				inc		zTemp0+1
.99b3	80 e6		bra $999b			bra 	_ClearMemory
.99b5					_CMExit:
.99b5	fa		plx				plx
.99b6	68		pla				pla
.99b7	7a		ply				ply
.99b8	60		rts				rts
.99b9					CheckIdentifierStringSpace:
.99b9	48		pha				pha
.99ba	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99bd	18		clc				clc
.99be	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99c0	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99c3	b0 02		bcs $99c7			bcs 	CISSMemory
.99c5	68		pla				pla
.99c6	60		rts				rts
.99c7					CISSMemory:
.99c7	a9 06		lda #$06		lda	#6
.99c9	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99cc					AscUnary:
.99cc	fa		plx				plx 								; restore stack pos
.99cd	20 24 9d	jsr $9d24			jsr 	EvaluateString 				; get a string
.99d0	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99d2	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.99d5	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.99d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99d9					FracUnary:
.99d9	fa		plx				plx 								; restore stack pos
.99da	20 19 9d	jsr $9d19			jsr 	EvaluateNumber 				; get a float or int
.99dd	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.99e0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99e3	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99e5	f0 04		beq $99eb			beq 	_IUZero
.99e7	20 0f 94	jsr $940f			jsr 	FloatFractionalPart
.99ea	60		rts				rts
.99eb					_IUZero:
.99eb	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.99ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99ef					IntUnary:
.99ef	fa		plx				plx 								; restore stack pos
.99f0	20 19 9d	jsr $9d19			jsr 	EvaluateNumber 				; get a float or int
.99f3	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.99f6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99f9	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99fb	f0 03		beq $9a00			beq 	_IUExit
.99fd	20 72 94	jsr $9472			jsr 	FloatIntegerPart
.9a00					_IUExit:
.9a00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a01					LenUnary:
.9a01	fa		plx				plx 								; restore stack pos
.9a02	20 24 9d	jsr $9d24			jsr 	EvaluateString 				; get a string
.9a05	5a		phy				phy
.9a06	a0 00		ldy #$00			ldy 	#0 							; find length
.9a08					_LenFind:
.9a08	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a0a	f0 06		beq $9a12			beq 	_LenExit
.9a0c	c8		iny				iny
.9a0d	d0 f9		bne $9a08			bne 	_LenFind
.9a0f	4c 7f 9f	jmp $9f7f			jmp 	RangeError 					; string > 255
.9a12					_LenExit:
.9a12	98		tya				tya
.9a13	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.9a16	7a		ply				ply
.9a17	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9a1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a1b					Unary_Min:
.9a1b	a9 01		lda #$01			lda 	#1
.9a1d	80 02		bra $9a21			bra 	UnaryMinMaxMain
.9a1f					Unary_Max:
.9a1f	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a21					UnaryMinMaxMain:
.9a21	fa		plx				plx 								; get index on number stack
.9a22	48		pha				pha 								; save comparator
.9a23	20 10 9d	jsr $9d10			jsr 	EvaluateValue 				; get the first value.
.9a26					_UMMMLoop:
.9a26	b1 30		lda ($30),y			lda 	(codePtr),y
.9a28	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a2a	f0 22		beq $9a4e			beq 	_UMMMDone
.9a2c	20 1c 8d	jsr $8d1c			jsr 	CheckComma 					; must be a comma
.9a2f	e8		inx				inx
.9a30	20 10 9d	jsr $9d10			jsr 	EvaluateValue
.9a33	ca		dex				dex
.9a34	20 c7 9d	jsr $9dc7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a37	e8		inx				inx
.9a38	20 c7 9d	jsr $9dc7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a3b	e8		inx				inx
.9a3c	20 e5 8d	jsr $8de5			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a3f	ca		dex				dex
.9a40	ca		dex				dex
.9a41	85 36		sta $36				sta 	zTemp0 						; save required result
.9a43	68		pla				pla 								; get and save comparator
.9a44	48		pha				pha
.9a45	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a47	d0 dd		bne $9a26			bne 	_UMMMLoop
.9a49	20 51 9a	jsr $9a51			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a4c	80 d8		bra $9a26			bra 	_UMMMLoop
.9a4e					_UMMMDone:
.9a4e	68		pla				pla 								; throw the comparator
.9a4f	c8		iny				iny 								; skip )
.9a50	60		rts				rts
.9a51					ExpCopyAboveDown:
.9a51	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a54	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a57	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a5a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a5d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a60	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a63	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a66	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a69	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a6c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a6f	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a72	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a76					Unary_Not:
.9a76	fa		plx				plx
.9a77	20 3c 9d	jsr $9d3c			jsr 	EvaluateInteger 			; get integer
.9a7a	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9a7d	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; zero mantissa ?
.9a80	f0 04		beq $9a86			beq 	_NotZero
.9a82	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.9a85	60		rts				rts
.9a86					_NotZero:
.9a86	4c 9a 8d	jmp $8d9a			jmp 	ReturnTrue
.9a89					_UNBad:
.9a89	4c 89 9f	jmp $9f89			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a8c					Unary_Random:
.9a8c	fa		plx				plx
.9a8d	20 0b 9b	jsr $9b0b			jsr 	Random32Bit 				; get a random number
.9a90	20 f0 9a	jsr $9af0			jsr 	URCopyToMantissa  			; put in mantissa
.9a93	b1 30		lda ($30),y			lda 	(codePtr),y
.9a95	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9a97	f0 08		beq $9aa1			beq 	_URNoModulus
.9a99	e8		inx				inx
.9a9a	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9a9d	ca		dex				dex
.9a9e	20 09 8f	jsr $8f09			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9aa1					_URNoModulus:
.9aa1	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9aa4	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9aa7	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9aaa	60		rts				rts
.9aab					Unary_Rnd:
.9aab	fa		plx				plx
.9aac	20 19 9d	jsr $9d19			jsr 	EvaluateNumber 				; number to use.
.9aaf	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 			; closing bracket
.9ab2	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ab5	f0 2b		beq $9ae2			beq 	_URCopySeed
.9ab7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9aba	10 23		bpl $9adf			bpl 	_URDontSeed
.9abc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9abf	49 17		eor #$17			eor 	#$17
.9ac1	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ac4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ac7	49 a5		eor #$a5			eor 	#$A5
.9ac9	8d 89 04	sta $0489			sta 	RandomSeed+1
.9acc	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9acf	49 c2		eor #$c2			eor 	#$C2
.9ad1	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9ad4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ad7	49 9d		eor #$9d			eor 	#$9D
.9ad9	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9adc	20 0b 9b	jsr $9b0b			jsr 	Random32Bit
.9adf					_URDontSeed:
.9adf	20 0b 9b	jsr $9b0b			jsr 	Random32Bit 				; generate a number.
.9ae2					_URCopySeed:
.9ae2	20 f0 9a	jsr $9af0			jsr 	URCopyToMantissa 			; copy into mantissa
.9ae5	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9ae7	8d 28 04	sta $0428			sta 	NSExponent
.9aea	a9 08		lda #$08			lda 	#NSTFloat
.9aec	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9aef	60		rts				rts
.9af0					URCopyToMantissa:
.9af0	ad 88 04	lda $0488			lda 	RandomSeed+0
.9af3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9af6	ad 89 04	lda $0489			lda 	RandomSeed+1
.9af9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9afc	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9aff	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b02	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b05	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b07	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b0a	60		rts				rts
.9b0b					Random32Bit:
.9b0b	5a		phy				phy
.9b0c	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b0e	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b11	d0 03		bne $9b16			bne 	_Random1
.9b13	a8		tay				tay 								; if so do it 256 times
.9b14	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b16					_Random1:
.9b16	0a		asl a				asl 	a 							; LSFR RNG
.9b17	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b1a	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b1d	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b20	90 02		bcc $9b24			bcc 	_Random2
.9b22	49 c5		eor #$c5			eor 	#$C5
.9b24					_Random2:
.9b24	88		dey				dey
.9b25	d0 ef		bne $9b16			bne 	_Random1
.9b27	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b2a	7a		ply				ply
.9b2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b2c					SgnUnary:
.9b2c	fa		plx				plx 								; restore stack pos
.9b2d	20 19 9d	jsr $9d19			jsr 	EvaluateNumber 				; get a float or int
.9b30	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9b33	20 20 9e	jsr $9e20			jsr 	NSMIsZero 					; if zero
.9b36	f0 10		beq $9b48			beq 	_SGZero  					; return Int Zero
.9b38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b3b	48		pha				pha
.9b3c	a9 01		lda #$01			lda 	#1 							; set to 1
.9b3e	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.9b41	68		pla				pla
.9b42	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b44	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b47	60		rts				rts
.9b48	20 f0 9d	jsr $9df0	_SGZero:jsr 	NSMSetZero
.9b4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b4c					ValUnary:
.9b4c	fa		plx				plx 								; restore stack pos
.9b4d	20 62 9b	jsr $9b62			jsr 	ValMainCode 				; do the main val() code
.9b50	b0 01		bcs $9b53			bcs 	_VUError 					; couldn't convert
.9b52	60		rts				rts
.9b53					_VUError:
.9b53	4c 84 9f	jmp $9f84			jmp 	TypeError
.9b56					IsValUnary:
.9b56	fa		plx				plx 								; restore stack pos
.9b57	20 62 9b	jsr $9b62			jsr 	ValMainCode 				; do the main val() code
.9b5a	b0 03		bcs $9b5f			bcs 	_VUBad
.9b5c	4c 9a 8d	jmp $8d9a			jmp 	ReturnTrue
.9b5f					_VUBad:
.9b5f	4c a6 8d	jmp $8da6			jmp 	ReturnFalse
.9b62					ValMainCode:
.9b62	20 24 9d	jsr $9d24			jsr 	EvaluateString 				; get a string
.9b65	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 			; check right bracket present
.9b68	5a		phy				phy
.9b69	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b6b	f0 17		beq $9b84			beq 	_VMCFail2
.9b6d	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b6f	48		pha				pha 								; save first character
.9b70	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b72	d0 01		bne $9b75			bne 	_VMCStart
.9b74	c8		iny				iny 								; skip over -
.9b75					_VMCStart:
.9b75	38		sec				sec 								; initialise first time round.
.9b76					_VMCNext:
.9b76	c8		iny				iny 								; pre-increment
.9b77	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b79	f0 0c		beq $9b87			beq 	_VMCSuccess 				; successful.
.9b7b	20 98 96	jsr $9698			jsr 	EncodeNumber 				; send it to the number-builder
.9b7e	90 03		bcc $9b83			bcc 	_VMCFail 					; if failed, give up.
.9b80	18		clc				clc 								; next time round, countinue
.9b81	80 f3		bra $9b76			bra 	_VMCNext
.9b83					_VMCFail:
.9b83	68		pla				pla
.9b84					_VMCFail2:
.9b84	7a		ply				ply
.9b85	38		sec				sec
.9b86	60		rts				rts
.9b87					_VMCSuccess:
.9b87	a9 00		lda #$00			lda 	#0 							; construct final
.9b89	20 98 96	jsr $9698			jsr 	EncodeNumber
.9b8c	68		pla				pla
.9b8d	c9 2d		cmp #$2d			cmp 	#"-"
.9b8f	d0 03		bne $9b94			bne 	_VMCNotNegative
.9b91	20 9c 9d	jsr $9d9c			jsr		NSMNegate
.9b94					_VMCNotNegative:
.9b94	7a		ply				ply
.9b95	18		clc				clc
.9b96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9b97					ChrUnary:
.9b97	fa		plx				plx 								; restore stack pos
.9b98	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger			; get value
.9b9b	48		pha				pha
.9b9c	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9b9f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9ba1	20 45 a3	jsr $a345			jsr 	StringTempAllocate
.9ba4	68		pla				pla 								; write number to it
.9ba5	20 83 a3	jsr $a383			jsr 	StringTempWrite
.9ba8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9ba9					SpcUnary:
.9ba9	fa		plx				plx 								; restore stack pos
.9baa	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger			; get value
.9bad	5a		phy				phy
.9bae	48		pha				pha 								; save count
.9baf	20 45 a3	jsr $a345			jsr 	StringTempAllocate
.9bb2	7a		ply				ply 								; to do count in Y
.9bb3					_SpcLoop:
.9bb3	c0 00		cpy #$00			cpy 	#0
.9bb5	f0 08		beq $9bbf			beq 	_SpcExit
.9bb7	a9 20		lda #$20			lda 	#32
.9bb9	20 83 a3	jsr $a383			jsr 	StringTempWrite
.9bbc	88		dey				dey
.9bbd	80 f4		bra $9bb3			bra 	_SPCLoop
.9bbf					_SpcExit:
.9bbf	7a		ply				ply
.9bc0	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.9bc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bc4					Unary_Str:
.9bc4	fa		plx				plx
.9bc5	20 19 9d	jsr $9d19			jsr 	EvaluateNumber  			; get number
.9bc8	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 			; closing bracket
.9bcb	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bcd	20 e6 9b	jsr $9be6			jsr 	ConvertNumberToString 		; do the conversion.
.9bd0	a9 21		lda #$21			lda		#33 						; create buffer
.9bd2	20 45 a3	jsr $a345			jsr 	StringTempAllocate 			; allocate memory
.9bd5	da		phx				phx
.9bd6	a2 00		ldx #$00			ldx 	#0
.9bd8					_USCopy:
.9bd8	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9bdb	20 83 a3	jsr $a383			jsr 	StringTempWrite
.9bde	e8		inx				inx
.9bdf	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9be2	d0 f4		bne $9bd8			bne 	_USCopy
.9be4	fa		plx				plx
.9be5	60		rts				rts
.9be6					ConvertNumberToString:
.9be6	5a		phy				phy 								; save code position
.9be7	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bea	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bed	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9bf0	10 0a		bpl $9bfc			bpl 	_CNTSNotNegative
.9bf2	29 7f		and #$7f			and 	#$7F 						; make +ve
.9bf4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bf7	a9 2d		lda #$2d			lda 	#"-"
.9bf9	20 62 9c	jsr $9c62			jsr 	WriteDecimalBuffer
.9bfc					_CNTSNotNegative:
.9bfc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9bff	f0 15		beq $9c16			beq 	_CNTSNotFloat
.9c01	e8		inx				inx 								; round up
.9c02	a9 01		lda #$01			lda 	#1
.9c04	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.9c07	ca		dex				dex
.9c08	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c0b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c0e	a9 08		lda #$08			lda 	#NSTFloat
.9c10	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c13	20 29 93	jsr $9329			jsr 	FloatAdd
.9c16					_CNTSNotFloat:
.9c16	20 44 9c	jsr $9c44			jsr 	MakePlusTwoString
.9c19	20 0f 94	jsr $940f			jsr 	FloatFractionalPart 		; get the fractional part
.9c1c	20 d3 94	jsr $94d3			jsr 	NSNormalise					; normalise , exit if zero
.9c1f	f0 21		beq $9c42			beq 	_CNTSExit
.9c21	a9 2e		lda #$2e			lda 	#"."
.9c23	20 62 9c	jsr $9c62			jsr 	WriteDecimalBuffer 			; write decimal place
.9c26					_CNTSDecimal:
.9c26	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c29	30 17		bmi $9c42			bmi 	_CNTSExit
.9c2b	e8		inx				inx 								; x 10.0
.9c2c	a9 0a		lda #$0a			lda 	#10
.9c2e	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.9c31	a9 08		lda #$08			lda 	#NSTFloat
.9c33	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c36	ca		dex				dex
.9c37	20 9c 94	jsr $949c			jsr 	FloatMultiply
.9c3a	20 44 9c	jsr $9c44			jsr 	MakePlusTwoString
.9c3d	20 0f 94	jsr $940f			jsr 	FloatFractionalPart 		; get the fractional part
.9c40	80 e4		bra $9c26			bra 	_CNTSDecimal 				; keep going.
.9c42					_CNTSExit:
.9c42	7a		ply				ply
.9c43	60		rts				rts
.9c44					MakePlusTwoString:
.9c44	da		phx				phx
.9c45	20 c7 9d	jsr $9dc7			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c48	e8		inx				inx 								; access it
.9c49	e8		inx				inx
.9c4a	20 72 94	jsr $9472			jsr 	FloatIntegerPart 			; make it an integer
.9c4d	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c4f	20 54 92	jsr $9254			jsr 	ConvertInt32
.9c52	a2 00		ldx #$00			ldx	 	#0
.9c54					_MPTSCopy:
.9c54	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c57	20 62 9c	jsr $9c62			jsr 	WriteDecimalBuffer
.9c5a	e8		inx				inx
.9c5b	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c5e	d0 f4		bne $9c54			bne 	_MPTSCopy
.9c60	fa		plx				plx
.9c61	60		rts				rts
.9c62					WriteDecimalBuffer:
.9c62	da		phx				phx
.9c63	ae 95 04	ldx $0495			ldx 	dbOffset
.9c66	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.9c69	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.9c6c	ee 95 04	inc $0495			inc 	dbOffset
.9c6f	fa		plx				plx
.9c70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c71					Unary_Left:
.9c71	fa		plx				plx
.9c72	18		clc				clc 								; only one parameter
.9c73	20 e8 9c	jsr $9ce8			jsr 	SubstringInitial 			; set up.
.9c76	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c79	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c7c	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c7f	80 2c		bra $9cad			bra 	SubstringMain
.9c81					Unary_Right:
.9c81	fa		plx				plx
.9c82	18		clc				clc 								; only one parameter
.9c83	20 e8 9c	jsr $9ce8			jsr 	SubstringInitial 			; set up.
.9c86	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c89	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c8c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c8f	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9c92	b0 02		bcs $9c96			bcs 	_URNotUnderflow
.9c94	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9c96					_URNotUnderFlow:
.9c96	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9c99	80 12		bra $9cad			bra 	SubStringMain
.9c9b					Unary_Mid:
.9c9b	fa		plx				plx
.9c9c	38		sec				sec 								; two parameters
.9c9d	20 e8 9c	jsr $9ce8			jsr 	SubstringInitial 			; set up.
.9ca0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9ca3	f0 05		beq $9caa			beq 	_UMError
.9ca5	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ca8	80 03		bra $9cad			bra 	SubStringMain
.9caa					_UMError:
.9caa	4c 89 9f	jmp $9f89			jmp 	ArgumentError
.9cad					SubStringMain:
.9cad	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cb0	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cb3	b0 2d		bcs $9ce2			bcs 	_SSMNull 					; if so, return an empty string.
.9cb5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cb8	f0 28		beq $9ce2			beq 	_SSMNull 					; return empty string.
.9cba	18		clc				clc 								; add the offset +1 to the address and
.9cbb	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cbe	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9cc1	85 36		sta $36				sta 	zTemp0
.9cc3	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cc6	69 00		adc #$00			adc 	#0
.9cc8	85 37		sta $37				sta 	zTemp0+1
.9cca					_SSMNoCarry:
.9cca	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9ccd	20 45 a3	jsr $a345			jsr 	StringTempAllocate 			; allocate that many characters
.9cd0	5a		phy				phy 								; save Y
.9cd1	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cd3					_SSMCopy:
.9cd3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cd5	f0 09		beq $9ce0			beq 	_SSMEString 				; no more to copy
.9cd7	20 83 a3	jsr $a383			jsr 	StringTempWrite 			; and write it out.
.9cda	c8		iny				iny
.9cdb	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9cde	d0 f3		bne $9cd3			bne 	_SSMCopy
.9ce0					_SSMEString:
.9ce0	7a		ply				ply
.9ce1					_SSMExit:
.9ce1	60		rts				rts
.9ce2					_SSMNull:
.9ce2	a9 00		lda #$00			lda 	#0
.9ce4	20 45 a3	jsr $a345			jsr 	StringTempAllocate
.9ce7	60		rts				rts
.9ce8					SubstringInitial:
.9ce8	da		phx				phx 								; save initial stack position
.9ce9	08		php				php 								; save carry on stack indicating 2 parameters
.9cea	20 24 9d	jsr $9d24			jsr 	EvaluateString 				; get a string
.9ced	5a		phy				phy 								; calculate length to exponent.
.9cee	a0 ff		ldy #$ff			ldy 	#$FF
.9cf0					_SIFindLength:
.9cf0	c8		iny				iny
.9cf1	b1 36		lda ($36),y			lda 	(zTemp0),y
.9cf3	d0 fb		bne $9cf0			bne 	_SIFindLength
.9cf5	98		tya				tya
.9cf6	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9cf9	7a		ply				ply
.9cfa	e8		inx				inx
.9cfb	20 1c 8d	jsr $8d1c			jsr 	CheckComma 					; comma next
.9cfe	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get next parameter
.9d01	28		plp				plp 								; is it the last parameter ?
.9d02	90 07		bcc $9d0b			bcc 	_SSIExit 					; if so, exit.
.9d04	e8		inx				inx
.9d05	20 1c 8d	jsr $8d1c			jsr 	CheckComma 					; comma next
.9d08	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get last parameter
.9d0b					_SSIExit:
.9d0b	fa		plx				plx
.9d0c	20 14 8d	jsr $8d14			jsr 	CheckRightBracket 			; check closing bracket
.9d0f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d10					EvaluateValue:
.9d10	48		pha				pha
.9d11	20 dc 92	jsr $92dc			jsr		EvaluateExpression 			; expression
.9d14	20 fa 95	jsr $95fa			jsr 	Dereference					; derefernce it
.9d17	68		pla				pla
.9d18	60		rts				rts
.9d19					EvaluateNumber:
.9d19	20 10 9d	jsr $9d10			jsr 	EvaluateValue 				; get a value
.9d1c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d1f	29 10		and #$10			and 	#NSBIsString
.9d21	d0 16		bne $9d39			bne 	HelperTypeError
.9d23	60		rts				rts
.9d24					EvaluateString:
.9d24	20 10 9d	jsr $9d10			jsr 	EvaluateValue 				; get a value
.9d27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d2a	29 10		and #$10			and 	#NSBIsString
.9d2c	f0 0b		beq $9d39			beq 	HelperTypeError
.9d2e					CopyAddressToTemp0:
.9d2e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d31	85 36		sta $36				sta 	zTemp0
.9d33	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d36	85 37		sta $37				sta 	zTemp0+1
.9d38	60		rts				rts
.9d39					HelperTypeError:
.9d39	4c 84 9f	jmp $9f84			jmp 	TypeError
.9d3c					EvaluateInteger:
.9d3c	20 19 9d	jsr $9d19			jsr 	EvaluateNumber
.9d3f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d42	d0 0a		bne $9d4e			bne 	HelperValueError 			; if not, it's a float.
.9d44	60		rts				rts
.9d45					EvaluateUnsignedInteger:
.9d45	20 3c 9d	jsr $9d3c			jsr 	EvaluateInteger 			; check integer is +ve
.9d48	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d4b	30 01		bmi $9d4e			bmi 	HelperValueError
.9d4d	60		rts				rts
.9d4e					HelperValueError:
.9d4e	4c 89 9f	jmp $9f89			jmp 	ArgumentError
.9d51					Evaluate16BitInteger:
.9d51	20 45 9d	jsr $9d45			jsr	 	EvaluateUnsignedInteger		; get integer
.9d54	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d57	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d5a	d0 f2		bne $9d4e			bne 	HelperValueError
.9d5c	60		rts				rts
.9d5d					Evaluate16BitIntegerSigned:
.9d5d	20 3c 9d	jsr $9d3c			jsr	 	EvaluateInteger				; get integer
.9d60	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d63	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d66	d0 e6		bne $9d4e			bne 	HelperValueError
.9d68	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d6b	10 03		bpl $9d70			bpl 	_EISNotSigned
.9d6d	20 a5 9d	jsr $9da5			jsr 	NSMNegateMantissa
.9d70					_EISNotSigned:
.9d70	60		rts				rts
.9d71					Evaluate8BitInteger:
.9d71	20 45 9d	jsr $9d45			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d74	d0 d8		bne $9d4e			bne 	HelperValueError
.9d76	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d79	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d7c	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d7f	d0 cd		bne $9d4e			bne 	HelperValueError
.9d81	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d85					Multiply8x8:
.9d85	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d86	85 36		sta $36			  	sta 	zTemp0
.9d88	86 37		stx $37				stx 	zTemp0+1
.9d8a	a9 00		lda #$00			lda 	#0
.9d8c	a2 08		ldx #$08			ldx 	#8
.9d8e					_M88Loop:
.9d8e	90 03		bcc $9d93			bcc 	_M88NoAdd
.9d90	18		clc				clc
.9d91	65 37		adc $37				adc 	zTemp0+1
.9d93					_M88NoAdd:
.9d93	6a		ror a				ror 	a
.9d94	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9d96	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9d97	d0 f5		bne $9d8e			bne 	_M88Loop
.9d99	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9d9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9d9c					NSMNegate:
.9d9c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d9f	49 80		eor #$80			eor 	#NSBIsNegative
.9da1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9da4	60		rts				rts
.9da5					NSMNegateMantissa:
.9da5	38		sec				sec
.9da6	a9 00		lda #$00			lda 	#0
.9da8	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9dab	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dae	a9 00		lda #$00			lda 	#0
.9db0	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9db3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9db6	a9 00		lda #$00			lda 	#0
.9db8	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dbb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dbe	a9 00		lda #$00			lda 	#0
.9dc0	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dc3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dc6	60		rts				rts
.9dc7					NSMShiftUpTwo:
.9dc7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dca	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dcd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dd0	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9dd3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9dd6	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9dd9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ddc	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ddf	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9de2	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9de5	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9de8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9deb	60		rts				rts
.9dec					NSMSetZeroMantissaOnly:
.9dec	a9 00		lda #$00			lda 	#0
.9dee	80 08		bra $9df8			bra 	NSMSetMantissa
.9df0					NSMSetZero:
.9df0	a9 00		lda #$00			lda 	#0
.9df2					NSMSetByte:
.9df2	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9df5	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9df8					NSMSetMantissa:
.9df8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9dfb	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9dfe	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e01	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e04	60		rts				rts
.9e05					NSMShiftLeft:
.9e05	18		clc				clc
.9e06					NSMRotateLeft:
.9e06	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e09	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e0c	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e0f	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e12	60		rts				rts
.9e13					NSMShiftRight:
.9e13	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e16	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e19	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e1c	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e1f	60		rts				rts
.9e20					NSMIsZero:
.9e20	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e23	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e26	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e29	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e2d					Assemble_ora:
.9e2d	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e30	01					.byte $01
.9e31					Assemble_and:
.9e31	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e34	21					.byte $21
.9e35					Assemble_eor:
.9e35	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e38	41					.byte $41
.9e39					Assemble_adc:
.9e39	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e3c	61					.byte $61
.9e3d					Assemble_sta:
.9e3d	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e40	81					.byte $81
.9e41					Assemble_lda:
.9e41	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e44	a1					.byte $a1
.9e45					Assemble_cmp:
.9e45	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e48	c1					.byte $c1
.9e49					Assemble_sbc:
.9e49	20 85 80	jsr $8085		jsr	AssembleGroup1
>9e4c	e1					.byte $e1
.9e4d					Assemble_asl:
.9e4d	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e50	02					.byte $02
>9e51	75					.byte $75
.9e52					Assemble_rol:
.9e52	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e55	22					.byte $22
>9e56	75					.byte $75
.9e57					Assemble_lsr:
.9e57	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e5a	42					.byte $42
>9e5b	75					.byte $75
.9e5c					Assemble_ror:
.9e5c	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e5f	62					.byte $62
>9e60	75					.byte $75
.9e61					Assemble_stx:
.9e61	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e64	82					.byte $82
>9e65	50					.byte $50
.9e66					Assemble_ldx:
.9e66	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e69	a2					.byte $a2
>9e6a	d0					.byte $d0
.9e6b					Assemble_dec:
.9e6b	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e6e	c2					.byte $c2
>9e6f	55					.byte $55
.9e70					Assemble_inc:
.9e70	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e73	e2					.byte $e2
>9e74	55					.byte $55
.9e75					Assemble_stz:
.9e75	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e78	60					.byte $60
>9e79	44					.byte $44
.9e7a					Assemble_bit:
.9e7a	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e7d	20					.byte $20
>9e7e	55					.byte $55
.9e7f					Assemble_sty:
.9e7f	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e82	80					.byte $80
>9e83	54					.byte $54
.9e84					Assemble_ldy:
.9e84	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e87	a0					.byte $a0
>9e88	d5					.byte $d5
.9e89					Assemble_cpy:
.9e89	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e8c	c0					.byte $c0
>9e8d	d4					.byte $d4
.9e8e					Assemble_cpx:
.9e8e	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e91	e0					.byte $e0
>9e92	d0					.byte $d0
.9e93					Assemble_tsb:
.9e93	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e96	00					.byte $00
>9e97	50					.byte $50
.9e98					Assemble_trb:
.9e98	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9e9b	10					.byte $10
>9e9c	50					.byte $50
.9e9d					Assemble_jsr:
.9e9d	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9ea0	14					.byte $14
>9ea1	10					.byte $10
.9ea2					Assemble_jmp:
.9ea2	20 8c 80	jsr $808c		jsr	AssembleGroup2
>9ea5	40					.byte $40
>9ea6	10					.byte $10
.9ea7					Assemble_bpl:
.9ea7	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9eaa	10					.byte $10
.9eab					Assemble_bmi:
.9eab	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9eae	30					.byte $30
.9eaf					Assemble_bvc:
.9eaf	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9eb2	50					.byte $50
.9eb3					Assemble_bvs:
.9eb3	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9eb6	70					.byte $70
.9eb7					Assemble_bcc:
.9eb7	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9eba	90					.byte $90
.9ebb					Assemble_bcs:
.9ebb	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9ebe	b0					.byte $b0
.9ebf					Assemble_bne:
.9ebf	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9ec2	d0					.byte $d0
.9ec3					Assemble_beq:
.9ec3	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9ec6	f0					.byte $f0
.9ec7					Assemble_bra:
.9ec7	20 dd 80	jsr $80dd		jsr	AssembleGroup3
>9eca	80					.byte $80
.9ecb					Assemble_brk:
.9ecb	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ece	00					.byte $00
.9ecf					Assemble_php:
.9ecf	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ed2	08					.byte $08
.9ed3					Assemble_clc:
.9ed3	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ed6	18					.byte $18
.9ed7					Assemble_plp:
.9ed7	20 13 81	jsr $8113		jsr	AssembleGroup4
>9eda	28					.byte $28
.9edb					Assemble_sec:
.9edb	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ede	38					.byte $38
.9edf					Assemble_rti:
.9edf	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ee2	40					.byte $40
.9ee3					Assemble_pha:
.9ee3	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ee6	48					.byte $48
.9ee7					Assemble_cli:
.9ee7	20 13 81	jsr $8113		jsr	AssembleGroup4
>9eea	58					.byte $58
.9eeb					Assemble_phy:
.9eeb	20 13 81	jsr $8113		jsr	AssembleGroup4
>9eee	5a					.byte $5a
.9eef					Assemble_rts:
.9eef	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ef2	60					.byte $60
.9ef3					Assemble_pla:
.9ef3	20 13 81	jsr $8113		jsr	AssembleGroup4
>9ef6	68					.byte $68
.9ef7					Assemble_sei:
.9ef7	20 13 81	jsr $8113		jsr	AssembleGroup4
>9efa	78					.byte $78
.9efb					Assemble_ply:
.9efb	20 13 81	jsr $8113		jsr	AssembleGroup4
>9efe	7a					.byte $7a
.9eff					Assemble_dey:
.9eff	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f02	88					.byte $88
.9f03					Assemble_txa:
.9f03	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f06	8a					.byte $8a
.9f07					Assemble_tya:
.9f07	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f0a	98					.byte $98
.9f0b					Assemble_txs:
.9f0b	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f0e	9a					.byte $9a
.9f0f					Assemble_tay:
.9f0f	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f12	a8					.byte $a8
.9f13					Assemble_tax:
.9f13	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f16	aa					.byte $aa
.9f17					Assemble_clv:
.9f17	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f1a	b8					.byte $b8
.9f1b					Assemble_tsx:
.9f1b	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f1e	ba					.byte $ba
.9f1f					Assemble_iny:
.9f1f	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f22	c8					.byte $c8
.9f23					Assemble_dex:
.9f23	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f26	ca					.byte $ca
.9f27					Assemble_cld:
.9f27	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f2a	d8					.byte $d8
.9f2b					Assemble_phx:
.9f2b	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f2e	da					.byte $da
.9f2f					Assemble_stp:
.9f2f	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f32	db					.byte $db
.9f33					Assemble_inx:
.9f33	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f36	e8					.byte $e8
.9f37					Assemble_nop:
.9f37	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f3a	ea					.byte $ea
.9f3b					Assemble_sed:
.9f3b	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f3e	f8					.byte $f8
.9f3f					Assemble_plx:
.9f3f	20 13 81	jsr $8113		jsr	AssembleGroup4
>9f42	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f43					DecimalScalarTable:
>9f43	66 66 66 66				.dword $66666666 ; 0.1
>9f47	de					.byte $de
>9f48	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f4c	db					.byte $db
>9f4d	4c 37 89 41				.dword $4189374c ; 0.001
>9f51	d8					.byte $d8
>9f52	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f56	d4					.byte $d4
>9f57	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f5b	d1					.byte $d1
>9f5c	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f60	ce					.byte $ce
>9f61	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f65	ca					.byte $ca
>9f66	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f6a	c7					.byte $c7
>9f6b	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f6f	c4					.byte $c4
>9f70	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f74	c0					.byte $c0
>9f75	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f79	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f7a					SyntaxError:
.9f7a	a9 02		lda #$02		lda	#2
.9f7c	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.9f7f					RangeError:
.9f7f	a9 04		lda #$04		lda	#4
.9f81	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.9f84					TypeError:
.9f84	a9 05		lda #$05		lda	#5
.9f86	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.9f89					ArgumentError:
.9f89	a9 07		lda #$07		lda	#7
.9f8b	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.9f8e					NotDoneError:
.9f8e	a9 0c		lda #$0c		lda	#12
.9f90	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.9f93					ErrorText:
>9f93	42 72 65 61 6b 00			.text	"Break",0
>9f99	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fa1	72 72 6f 72 00
>9fa6	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fae	20 62 79 20 7a 65 72 6f 00
>9fb7	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fbf	61 6e 67 65 00
>9fc4	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fcc	6d 61 74 63 68 00
>9fd2	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fda	65 6d 6f 72 79 00
>9fe0	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9fe8	61 72 67 75 6d 65 6e 74 00
>9ff1	53 74 6f 70 00				.text	"Stop",0
>9ff6	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9ffe	6f 6f 20 6c 6f 6e 67 00
>a006	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a00e	6e 20 66 61 69 6c 65 64 00
>a017	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a01f	61 74 61 00
>a023	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a02b	65 6e 74 65 64 00
>a031	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a039	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a045	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a04d	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a05a	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a062	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a06f	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a077	68 6f 75 74 20 57 68 69 6c 65 00
>a082	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a08a	68 6f 75 74 20 46 6f 72 00
>a093	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a09b	61 63 6b 20 66 75 6c 6c 00
>a0a4	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0ac	75 63 74 75 72 65 00
>a0b3	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0bb	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0c8	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0d0	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0de	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0e6	7a 65 00
>a0e9	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a0f1	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a0f9	42 75 69 6c 74 20 4d 6f			.text "Built Monday 14-Nov-2022. Build 2682."
>a101	6e 64 61 79 20 31 34 2d 4e 6f 76 2d 32 30 32 32
>a111	2e 20 42 75 69 6c 64 20 32 36 38 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a11e					MemoryDeleteLine:
.a11e	20 3d a1	jsr $a13d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a121	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a123	a8		tay				tay
.a124					_MDDLLoop:
.a124	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a126	92 30		sta ($30)			sta 	(codePtr)
.a128	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a12a	c5 3a		cmp $3a				cmp 	zTemp2
.a12c	d0 07		bne $a135			bne 	_MDLDLNext
.a12e	a5 31		lda $31				lda 	codePtr+1
.a130	c5 3b		cmp $3b				cmp 	zTemp2+1
.a132	d0 01		bne $a135			bne 	_MDLDLNext
.a134					_MDDLExit:
.a134	60		rts				rts
.a135					_MDLDLNext:
.a135	e6 30		inc $30				inc 	codePtr						; next byte
.a137	d0 eb		bne $a124			bne 	_MDDLLoop
.a139	e6 31		inc $31				inc 	codePtr+1
.a13b	80 e7		bra $a124			bra 	_MDDLLoop
.a13d					IMemoryFindEnd:
.a13d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a13f	85 3a		sta $3a				sta 	0+zTemp2
.a141	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a143	85 3b		sta $3b				sta 	1+zTemp2
.a145					_MDLFELoop:
.a145	b2 3a		lda ($3a)			lda 	(zTemp2)
.a147	f0 0b		beq $a154			beq 	_MDLFEExit
.a149	18		clc				clc
.a14a	65 3a		adc $3a				adc 	zTemp2
.a14c	85 3a		sta $3a				sta 	zTemp2
.a14e	90 f5		bcc $a145			bcc 	_MDLFELoop
.a150	e6 3b		inc $3b				inc 	zTemp2+1
.a152	80 f1		bra $a145			bra 	_MDLFELoop
.a154					_MDLFEExit:
.a154	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a155					MemoryInsertLine:
.a155	08		php				php
.a156	20 3d a1	jsr $a13d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a159	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a15b	1a		inc a				inc 	a
.a15c	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a15e	b0 36		bcs $a196			bcs 	_MDLIError
.a160	28		plp				plp
.a161	90 08		bcc $a16b			bcc 	_MDLIFound
.a163	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a165	85 30		sta $30				sta 	codePtr
.a167	a5 3b		lda $3b				lda 	zTemp2+1
.a169	85 31		sta $31				sta 	codePtr+1
.a16b					_MDLIFound:
.a16b	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a16e	a8		tay				tay
.a16f					_MDLIInsert:
.a16f	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a171	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a173	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a175	c5 3a		cmp $3a				cmp 	zTemp2
.a177	d0 06		bne $a17f			bne 	_MDLINext
.a179	a5 31		lda $31				lda 	codePtr+1
.a17b	c5 3b		cmp $3b				cmp 	zTemp2+1
.a17d	f0 0a		beq $a189			beq 	_MDLIHaveSpace
.a17f					_MDLINext:
.a17f	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a181	d0 02		bne $a185			bne 	_MDLINoBorrow
.a183	c6 3b		dec $3b				dec 	zTemp2+1
.a185					_MDLINoBorrow:
.a185	c6 3a		dec $3a				dec 	zTemp2
.a187	80 e6		bra $a16f			bra 	_MDLIInsert
.a189					_MDLIHaveSpace:
.a189	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.a18c	88		dey				dey 								; from offset-1 to 0
.a18d					_MDLICopy:
.a18d	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.a190	91 30		sta ($30),y			sta 	(codePtr),y
.a192	88		dey				dey
.a193	10 f8		bpl $a18d			bpl 	_MDLICopy
.a195	60		rts				rts
.a196					_MDLIError:
.a196	a9 06		lda #$06		lda	#6
.a198	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.a19b					MDLAppendLine:
.a19b	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a19d	85 36		sta $36				sta 	zTemp0
.a19f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1a1	85 38		sta $38				sta 	0+zTemp1
.a1a3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1a5	85 39		sta $39				sta 	1+zTemp1
.a1a7	b2 38		lda ($38)			lda 	(zTemp1)
.a1a9	d0 0a		bne $a1b5			bne 	_MDLANoInitialise
.a1ab	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ad	8d 2a 06	sta $062a			sta 	0+AppendPointer
.a1b0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1b2	8d 2b 06	sta $062b			sta 	1+AppendPointer
.a1b5					_MDLANoInitialise:
.a1b5	18		clc				clc
.a1b6	ad 2a 06	lda $062a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1b9	85 38		sta $38				sta 	zTemp1
.a1bb	72 36		adc ($36)			adc 	(zTemp0)
.a1bd	8d 2a 06	sta $062a			sta 	AppendPointer
.a1c0	ad 2b 06	lda $062b			lda 	AppendPointer+1
.a1c3	85 39		sta $39				sta 	zTemp1+1
.a1c5	69 00		adc #$00			adc 	#0
.a1c7	8d 2b 06	sta $062b			sta 	AppendPointer+1
.a1ca	a0 00		ldy #$00			ldy 	#0
.a1cc					_MDLACopy:
.a1cc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1ce	91 38		sta ($38),y			sta 	(zTemp1),y
.a1d0	c8		iny				iny
.a1d1	98		tya				tya
.a1d2	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1d4	d0 f6		bne $a1cc			bne 	_MDLACopy
.a1d6	a9 00		lda #$00			lda 	#0 							; end of program.
.a1d8	91 38		sta ($38),y			sta 	(zTemp1),y
.a1da	60		rts				rts
.062a					AppendPointer:
>062a							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1db					MemoryNew:
.a1db	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1dd	85 30		sta $30				sta 	codePtr
.a1df	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1e1	85 31		sta $31				sta 	codePtr+1
.a1e3	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1e5	92 30		sta ($30)			sta 	(codePtr)
.a1e7	60		rts				rts
.a1e8					MemoryInline:
.a1e8	98		tya				tya 								; put address into stack,x
.a1e9	18		clc				clc
.a1ea	65 30		adc $30				adc 	codePtr
.a1ec	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1ef	a5 31		lda $31				lda 	codePtr+1
.a1f1	69 00		adc #$00			adc 	#0
.a1f3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1f6	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a1f9	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a1fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a1fd					MemorySearch:
.a1fd	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a1ff	86 37		stx $37				stx 	zTemp0+1
.a201	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a203	85 30		sta $30				sta 	codePtr
.a205	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a207	85 31		sta $31				sta 	codePtr+1
.a209					_MTAXLoop:
.a209	b2 30		lda ($30)			lda 	(codePtr)
.a20b	18		clc				clc
.a20c	f0 21		beq $a22f			beq 	_MTAXExit 					; reached end, exit with CC.
.a20e	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a210	b1 30		lda ($30),y			lda 	(codePtr),y
.a212	38		sec				sec
.a213	e5 36		sbc $36				sbc 	zTemp0
.a215	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a217	c8		iny				iny 								; do the MSB
.a218	b1 30		lda ($30),y			lda 	(codePtr),y
.a21a	e5 37		sbc $37				sbc 	zTemp0+1
.a21c	05 38		ora $38				ora 	zTemp1
.a21e	f0 0f		beq $a22f			beq 	_MTAXExit	 				; found
.a220	b0 0d		bcs $a22f			bcs 	_MTAXExit 					; current < required exit
.a222	18		clc				clc
.a223	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a225	65 30		adc $30				adc 	codePtr
.a227	85 30		sta $30				sta 	codePtr
.a229	90 02		bcc $a22d			bcc 	_CREExit
.a22b	e6 31		inc $31				inc 	codePtr+1
.a22d					_CREExit:
.a22d	80 da		bra $a209			bra 	_MTAXLoop
.a22f					_MTAXExit:
.a22f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a230					StackPushByte:
.a230	48		pha				pha 								; save byte
.a231	a5 34		lda $34				lda 	BasicStack
.a233	d0 09		bne $a23e			bne 	_SPBNoBorrow
.a235	c6 35		dec $35				dec 	BasicStack+1
.a237	48		pha				pha
.a238	a5 35		lda $35				lda 	BasicStack+1
.a23a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a23c	90 06		bcc $a244			bcc 	_SPBMemory
.a23e					_SPBNoBorrow:
.a23e	c6 34		dec $34				dec 	BasicStack
.a240	68		pla				pla 								; get back and write
.a241	92 34		sta ($34)			sta 	(BasicStack)
.a243	60		rts				rts
.a244					_SPBMemory:
.a244	a9 12		lda #$12		lda	#18
.a246	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.a249					StackPopByte:
.a249	b2 34		lda ($34)			lda 	(BasicStack)
.a24b	e6 34		inc $34				inc 	BasicStack
.a24d	d0 02		bne $a251			bne 	_SPBNoCarry
.a24f	e6 35		inc $35				inc 	BasicStack+1
.a251					_SPBNoCarry:
.a251	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a252					StackOpen:
.a252	48		pha				pha 								; save frame byte
.a253	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a255	0a		asl a				asl 	a 							; claim twice this for storage
.a256	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a258	38		sec				sec 								; so basically subtracting from
.a259	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a25b	85 34		sta $34				sta 	basicStack
.a25d	b0 08		bcs $a267			bcs 	_SONoBorrow
.a25f	c6 35		dec $35				dec 	basicStack+1
.a261	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a263	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a265	90 04		bcc $a26b			bcc 	_SOMemory
.a267					_SONoBorrow:
.a267	68		pla				pla 								; get marker back and write at TOS
.a268	92 34		sta ($34)			sta 	(basicStack)
.a26a	60		rts				rts
.a26b					_SOMemory:
.a26b	a9 12		lda #$12		lda	#18
.a26d	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.a270					StackClose:
.a270	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a272	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a274	0a		asl a				asl 	a 							; claim twice this.
.a275	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a277	85 34		sta $34				sta 	basicStack
.a279	90 02		bcc $a27d			bcc 	_SCExit
.a27b	e6 35		inc $35				inc 	basicStack+1
.a27d					_SCExit:
.a27d	60		rts				rts
.a27e					StackCheckFrame:
.a27e	48		pha				pha
.a27f					_StackRemoveLocals:
.a27f	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a281	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a283	b0 05		bcs $a28a			bcs 	_SCNoLocal
.a285	20 f9 87	jsr $87f9			jsr 	LocalPopValue
.a288	80 f5		bra $a27f			bra 	_StackRemoveLocals
.a28a					_SCNoLocal:
.a28a	68		pla				pla
.a28b	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a28d	29 f0		and #$f0			and 	#$F0 						; check type bits
.a28f	d0 01		bne $a292			bne 	_SCFError 					; different, we have structures mixed up
.a291	60		rts				rts
.a292					_SCFError:
.a292	8a		txa				txa 								; report error X
.a293	4c 2d 8d	jmp $8d2d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a296					STKSaveCodePosition:
.a296	5a		phy				phy
.a297	98		tya				tya 								; save Y
.a298	a0 05		ldy #$05			ldy 	#5
.a29a	91 34		sta ($34),y			sta 	(basicStack),y
.a29c	88		dey				dey 								; save Code Pointer
.a29d					_STKSaveLoop:
.a29d	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a2a0	91 34		sta ($34),y			sta 	(basicStack),y
.a2a2	88		dey				dey
.a2a3	d0 f8		bne $a29d			bne 	_STKSaveLoop
.a2a5	7a		ply				ply
.a2a6	60		rts				rts
.a2a7					STKLoadCodePosition:
.a2a7	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a2a9					_STKLoadLoop:
.a2a9	b1 34		lda ($34),y			lda 	(basicStack),y
.a2ab	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a2ae	c8		iny				iny
.a2af	c0 05		cpy #$05			cpy 	#5
.a2b1	d0 f6		bne $a2a9			bne 	_STKLoadLoop
.a2b3	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2b5	a8		tay				tay
.a2b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2b7					StackReset:
.a2b7	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2b9	85 34		sta $34				sta 	0+basicStack
.a2bb	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2bd	85 35		sta $35				sta 	1+basicStack
.a2bf	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2c1	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a2c4					StringConcrete:
.a2c4	5a		phy				phy 								; save position on stack
.a2c5	20 b9 99	jsr $99b9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a2c8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a2cb	85 38		sta $38				sta 	zTemp1
.a2cd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2d0	85 39		sta $39				sta 	zTemp1+1
.a2d2	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a2d4					_SALength:
.a2d4	c8		iny				iny
.a2d5	b1 38		lda ($38),y			lda 	(zTemp1),y
.a2d7	d0 fb		bne $a2d4			bne 	_SALength
.a2d9	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a2db	b0 3f		bcs $a31c			bcs 	_SALengthError
.a2dd	98		tya				tya 				 				; length of the new string
.a2de	18		clc				clc
.a2df	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a2e1	90 02		bcc $a2e5			bcc 	_SAHaveLength
.a2e3	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a2e5					_SAHaveLength:
.a2e5	48		pha				pha 								; save length.
.a2e6	38		sec				sec
.a2e7	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a2e9	6d 8e 04	adc $048e			adc 	StringMemory
.a2ec	8d 8e 04	sta $048e			sta 	StringMemory
.a2ef	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a2f1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a2f4	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a2f6	6d 8f 04	adc $048f			adc 	StringMemory+1
.a2f9	8d 8f 04	sta $048f			sta 	StringMemory+1
.a2fc	85 3b		sta $3b				sta 	zTemp2+1
.a2fe	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a301	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a302	38		sec				sec
.a303	e9 03		sbc #$03			sbc 	#3
.a305	92 3a		sta ($3a)			sta 	(zTemp2)
.a307	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a309	a0 01		ldy #$01			ldy 	#1
.a30b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a30d					_SACopyNewString:
.a30d	a0 00		ldy #$00			ldy 	#0
.a30f					_SACopyNSLoop:
.a30f	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a311	c8		iny				iny 								; write two on in string storage
.a312	c8		iny				iny
.a313	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a315	88		dey				dey 								; this makes it one one.
.a316	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a318	d0 f5		bne $a30f			bne 	_SACopyNSLoop
.a31a	7a		ply				ply
.a31b	60		rts				rts
.a31c					_SALengthError:
.a31c	a9 09		lda #$09		lda	#9
.a31e	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a321					StringSystemInitialise:
.a321	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a323	8d 8e 04	sta $048e			sta 	0+StringMemory
.a326	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a328	8d 8f 04	sta $048f			sta 	1+StringMemory
.a32b	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a32e	60		rts				rts
.a32f					StringSpaceInitialise:
.a32f	20 b9 99	jsr $99b9			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a332	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a334	8d 90 04	sta $0490			sta 	StringInitialised
.a337	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a33a	8d 91 04	sta $0491			sta 	StringTempPointer
.a33d	ad 8f 04	lda $048f			lda 	StringMemory+1
.a340	3a		dec a				dec 	a
.a341	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a344	60		rts				rts
.a345					StringTempAllocate:
.a345	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a347	b0 35		bcs $a37e			bcs 	_STALength
.a349	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a34c	30 05		bmi $a353			bmi 	_STAAllocate
.a34e	48		pha				pha 								; save value to subtract.
.a34f	20 2f a3	jsr $a32f			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a352	68		pla				pla 								; restore it
.a353					_STAAllocate:
.a353	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a355	18		clc				clc  								; deliberate allows one more
.a356	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a359	8d 91 04	sta $0491			sta 	StringTempPointer
.a35c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a35f	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a361	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a364	69 ff		adc #$ff			adc 	#$FF
.a366	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a369	85 3d		sta $3d				sta 	zsTemp+1
.a36b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a36e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a371	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a374	a9 10		lda #$10			lda 	#NSTString
.a376	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a379	a9 00		lda #$00			lda 	#0 							; clear the target string
.a37b	92 3c		sta ($3c)			sta 	(zsTemp)
.a37d	60		rts				rts
.a37e					_STALength:
.a37e	a9 09		lda #$09		lda	#9
.a380	4c 2d 8d	jmp $8d2d		jmp	ErrorHandler
.a383					StringTempWrite:
.a383	48		pha				pha
.a384	92 3c		sta ($3c)			sta 	(zsTemp)
.a386	e6 3c		inc $3c				inc 	zsTemp
.a388	d0 02		bne $a38c			bne 	_STWNoCarry
.a38a	e6 3d		inc $3d				inc 	zsTemp+1
.a38c					_STWNoCarry:
.a38c	a9 00		lda #$00			lda 	#0
.a38e	92 3c		sta ($3c)			sta 	(zsTemp)
.a390	68		pla				pla
.a391	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./modules/zzzend.asm


;******  Processing file: ./modules/../../modules/_build/_hardware.module

=1					hardwareIntegrated=1
.a392					ClearScreen:
.a392	5a		phy				phy
.a393	20 35 a7	jsr $a735			jsr 	EXTClearScreen
.a396	7a		ply				ply
.a397	60		rts				rts
.a398					UnaryEvent:
.a398	fa		plx				plx
.a399	20 0c a7	jsr $a70c			jsr 	TimerToStackX 				; timer in +0
.a39c	e8		inx				inx  								; put reference into +1
.a39d	20 b6 97	jsr $97b6			jsr 	EvaluateTerm
.a3a0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a3a3	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a3a5	d0 57		bne $a3fe			bne 	_UEType
.a3a7	e8		inx				inx 								; put the step in +2
.a3a8	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a3ab	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.a3ae	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.a3b1	ca		dex				dex
.a3b2	ca		dex				dex
.a3b3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a3b6	85 36		sta $36				sta 	zTemp0
.a3b8	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3bb	85 37		sta $37				sta 	zTemp0+1
.a3bd	5a		phy				phy
.a3be	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a3c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3c2	30 36		bmi $a3fa			bmi 	_UEFalse 					; exit if signed.
.a3c4	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a3c6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3c9	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3cb	c8		iny				iny
.a3cc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3cf	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3d1	c8		iny				iny
.a3d2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3d5	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3d7	90 21		bcc $a3fa			bcc 	_UEFalse 					; no, return FALSE.
.a3d9	18		clc				clc
.a3da	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a3dc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3df	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a3e2	91 36		sta ($36),y			sta 	(zTemp0),y
.a3e4	c8		iny				iny
.a3e5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3e8	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a3eb	91 36		sta ($36),y			sta 	(zTemp0),y
.a3ed	c8		iny				iny
.a3ee	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3f1	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a3f4	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f6	7a		ply				ply
.a3f7	4c 9a 8d	jmp $8d9a			jmp 	ReturnTrue
.a3fa					_UEFalse:
.a3fa	7a		ply				ply 								; restore Y
.a3fb	4c a6 8d	jmp $8da6			jmp 	ReturnFalse 				; and return False
.a3fe					_UEType:
.a3fe	4c 84 9f	jmp $9f84			jmp 	TypeError
.a401					RectangleCommand:
.a401	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a403	80 02		bra $a407			bra 	ShapeDrawCmd
.a405					CircleCommand:
.a405	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a407					ShapeDrawCmd:
.a407	20 95 a4	jsr $a495			jsr 	RunGraphicsCommand
.a40a					ShapeDraw:
.a40a	0d 2d 06	ora $062d			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a40d	4c 89 a4	jmp $a489			jmp 	ExecuteGraphicCommand	 	; and complete
.a410					SpriteCommand:
.a410	a2 00		ldx #$00			ldx 	#0
.a412	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get image number.
.a415	5a		phy				phy
.a416	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a418	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a41b	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a41d	b0 0d		bcs $a42c			bcs 	_SCRange
.a41f	a0 ff		ldy #$ff			ldy 	#255
.a421	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a424	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a426	7a		ply				ply
.a427	20 95 a4	jsr $a495			jsr 	RunGraphicsCommand
.a42a	80 5d		bra $a489			bra 	ExecuteGraphicCommand
.a42c					_SCRange:
.a42c	4c 7f 9f	jmp $9f7f			jmp 	RangeError
.a42f					ImageCommand:
.a42f	a2 00		ldx #$00			ldx 	#0
.a431	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get image number.
.a434	20 95 a4	jsr $a495			jsr 	RunGraphicsCommand
.a437					ImageRunDraw:
.a437	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a439	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a43c	ad 33 06	lda $0633			lda 	gxDrawScale
.a43f	0a		asl a				asl 	a
.a440	0a		asl a				asl 	a
.a441	0a		asl a				asl 	a
.a442	a8		tay				tay
.a443	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a445	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a448	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a44b	60		rts				rts
.a44c					TextCommand:
.a44c	a2 00		ldx #$00			ldx 	#0
.a44e	20 24 9d	jsr $9d24			jsr 	EvaluateString 				; get text
.a451	20 95 a4	jsr $a495			jsr 	RunGraphicsCommand
.a454					TextRunDraw:
.a454	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a456	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a459	a0 00		ldy #$00			ldy 	#0
.a45b					_IRDLoop:
.a45b	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a45e	85 37		sta $37				sta 	zTemp0+1
.a460	ad 08 04	lda $0408			lda 	NSMantissa0
.a463	85 36		sta $36				sta 	zTemp0
.a465	b1 36		lda ($36),y			lda 	(zTemp0),y
.a467	f0 13		beq $a47c			beq 	_IRDExit
.a469	5a		phy				phy									; save string pos
.a46a	48		pha				pha 								; save char
.a46b	ad 33 06	lda $0633			lda 	gxDrawScale 				; get scale
.a46e	0a		asl a				asl 	a
.a46f	0a		asl a				asl 	a
.a470	0a		asl a				asl 	a
.a471	a8		tay				tay
.a472	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a474	fa		plx				plx 								; char to draw
.a475	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a478	7a		ply				ply 								; restore string pos
.a479	c8		iny				iny
.a47a	90 df		bcc $a45b			bcc 	_IRDLoop 					; go back if no error.
.a47c					_IRDExit:
.a47c	60		rts				rts
.a47d					PlotCommand:
.a47d	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a47f	20 95 a4	jsr $a495			jsr 	RunGraphicsCommand
.a482	80 05		bra $a489			bra 	ExecuteGraphicCommand
.a484					LineCommand:
.a484	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a486	20 95 a4	jsr $a495			jsr 	RunGraphicsCommand
.a489					ExecuteGraphicCommand:
.a489	0d 2c 06	ora $062c			ora 	gxCommandID 				; make a full command
.a48c	20 17 a8	jsr $a817			jsr 	GXGraphicDraw 				; draw it and exit
.a48f	b0 01		bcs $a492			bcs 	_EGCError
.a491	60		rts				rts
.a492					_EGCError:
.a492	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.a495					RunGraphicsCommand:
.a495	8d 2c 06	sta $062c			sta 	gxCommandID					; save TODO graphics command.
.a498	68		pla				pla 								; pop handler address
.a499	fa		plx				plx
.a49a	1a		inc a				inc 	a
.a49b	d0 01		bne $a49e			bne 	_RGINoCarry
.a49d	e8		inx				inx
.a49e					_RGINoCarry:
.a49e	8d 31 06	sta $0631			sta 	GXHandler
.a4a1	8e 32 06	stx $0632			stx 	GXHandler+1
.a4a4					_RGICommandLoop:
.a4a4	b1 30		lda ($30),y			lda 	(codePtr),y
.a4a6	c8		iny				iny
.a4a7	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a4a9	f0 53		beq $a4fe			beq 	_RGI_To
.a4ab	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a4ad	f0 55		beq $a504			beq 	_RGI_Here
.a4af	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a4b1	f0 3d		beq $a4f0			beq 	_RGI_Exit
.a4b3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a4b5	f0 39		beq $a4f0			beq 	_RGI_Exit
.a4b7	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a4b9	f0 3e		beq $a4f9			beq 	_RGI_Frame
.a4bb	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a4bd	f0 33		beq $a4f2			beq 	_RGI_Solid
.a4bf	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a4c1	f0 4b		beq $a50e			beq 	_RGI_By
.a4c3	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a4c5	f0 17		beq $a4de			beq 	_RGI_Move2
.a4c7	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a4c9	f0 65		beq $a530			beq 	_RGI_Dim
.a4cb	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a4cd	f0 78		beq $a547			beq 	_RGI_Colour
.a4cf	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a4d1	f0 74		beq $a547			beq 	_RGI_Colour
.a4d3	ae 2c 06	ldx $062c			ldx 	gxCommandID
.a4d6	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a4d8	d0 03		bne $a4dd			bne 	_RGI_Move 					; move
.a4da	4c 71 a5	jmp $a571			jmp		_RGI_SpriteInstructions
.a4dd					_RGI_Move:
.a4dd	88		dey				dey 								; unpick get.
.a4de					_RGI_Move2:
.a4de	20 97 a5	jsr $a597			jsr 	GCGetCoordinatePair 		; move to here
.a4e1	20 be a5	jsr $a5be			jsr 	GCCopyPairToStore 			; save
.a4e4	5a		phy				phy
.a4e5	20 b4 a5	jsr $a5b4			jsr 	GCLoadAXY 					; load in
.a4e8	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4ea	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a4ed	7a		ply				ply
.a4ee	80 b4		bra $a4a4			bra 	_RGICommandLoop 			; and go round
.a4f0					_RGI_Exit:
.a4f0	88		dey				dey 								; unpick : / EOL
.a4f1	60		rts				rts
.a4f2					_RGI_Solid:
.a4f2	a9 02		lda #$02			lda 	#2
.a4f4	8d 2d 06	sta $062d			sta 	gxFillSolid
.a4f7	80 ab		bra $a4a4			bra 	_RGICommandLoop
.a4f9					_RGI_Frame:
.a4f9	9c 2d 06	stz $062d			stz 	gxFillSolid
.a4fc	80 a6		bra $a4a4			bra 	_RGICommandLoop
.a4fe					_RGI_To:
.a4fe	20 97 a5	jsr $a597			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a501	20 be a5	jsr $a5be			jsr 	GCCopyPairToStore
.a504					_RGI_Here:
.a504	5a		phy				phy
.a505	20 b4 a5	jsr $a5b4			jsr 	GCLoadAXY 					; load it into AXY
.a508	20 6e a5	jsr $a56e			jsr 	_RGICallHandler 			; go do whatever it is.
.a50b	7a		ply				ply
.a50c	80 96		bra $a4a4			bra 	_RGICommandLoop 			; and go round
.a50e					_RGI_By:
.a50e	20 a4 a5	jsr $a5a4			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a511	18		clc				clc
.a512	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a515	6d 2e 06	adc $062e			adc 	gxxPos
.a518	8d 2e 06	sta $062e			sta 	gxXPos
.a51b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a51e	6d 2f 06	adc $062f			adc 	gxxPos+1
.a521	8d 2f 06	sta $062f			sta 	gxXPos+1
.a524	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a527	18		clc				clc
.a528	6d 30 06	adc $0630			adc 	gxYPos
.a52b	8d 30 06	sta $0630			sta 	gxYPos
.a52e	80 d4		bra $a504			bra 	_RGI_Here
.a530					_RGI_Dim:
.a530	a2 01		ldx #$01			ldx	 	#1
.a532	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger
.a535	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a538	c9 00		cmp #$00			cmp 	#0
.a53a	f0 2f		beq $a56b			beq 	_RGIRange
.a53c	c9 09		cmp #$09			cmp 	#8+1
.a53e	b0 2b		bcs $a56b			bcs		_RGIRange
.a540	3a		dec a				dec 	a
.a541	8d 33 06	sta $0633			sta 	gxDrawScale
.a544	4c a4 a4	jmp $a4a4			jmp 	_RGICommandLoop
.a547					_RGI_Colour:
.a547	a2 01		ldx #$01			ldx 	#1 							; colour
.a549	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger
.a54c	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a54e	20 f0 9d	jsr $9df0			jsr 	NSMSetZero
.a551	b1 30		lda ($30),y			lda 	(codePtr),y
.a553	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a555	d0 04		bne $a55b			bne 	_RGICDefaultMode
.a557	c8		iny				iny
.a558	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger
.a55b					_RGICDefaultMode:
.a55b	5a		phy				phy
.a55c	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a55e	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a561	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a564	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a567	7a		ply				ply
.a568	4c a4 a4	jmp $a4a4			jmp 	_RGICommandLoop 			; and go round
.a56b					_RGIRange:
.a56b	4c 7f 9f	jmp $9f7f			jmp 	RangeError
.a56e					_RGICallHandler:
.a56e	6c 31 06	jmp ($0631)			jmp 	(GXHandler)
.a571					_RGI_SpriteInstructions:
.a571	c9 be		cmp #$be			cmp 	#KWD_OFF
.a573	f0 07		beq $a57c			beq 	_RGISpriteOff
.a575	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a577	f0 13		beq $a58c			beq 	_RGISetImage
.a579	4c dd a4	jmp $a4dd			jmp 	_RGI_Move
.a57c					_RGISpriteOff:
.a57c	5a		phy				phy
.a57d	a0 01		ldy #$01			ldy 	#1
.a57f	a2 00		ldx #$00			ldx 	#0
.a581					_RGIDoCommandLoop:
.a581	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a583	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a586	7a		ply				ply
.a587	b0 e2		bcs $a56b			bcs 	_RGIRange
.a589	4c a4 a4	jmp $a4a4			jmp 	_RGICommandLoop
.a58c					_RGISetImage:
.a58c	a2 01		ldx #$01			ldx 	#1
.a58e	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger
.a591	5a		phy				phy
.a592	aa		tax				tax
.a593	a0 00		ldy #$00			ldy 	#0
.a595	80 ea		bra $a581			bra 	_RGIDoCommandLoop
.a597					GCGetCoordinatePair:
.a597	a2 01		ldx #$01			ldx 	#1
.a599	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.a59c	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a59f	e8		inx				inx
.a5a0	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger
.a5a3	60		rts				rts
.a5a4					GCSignedCoordinatePair:
.a5a4	a2 01		ldx #$01			ldx 	#1
.a5a6	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitIntegerSigned
.a5a9	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a5ac	e8		inx				inx
.a5ad	20 5d 9d	jsr $9d5d			jsr 	Evaluate16BitIntegerSigned
.a5b0	60		rts				rts
.a5b1					_GCCPRange:
.a5b1	4c 7f 9f	jmp $9f7f			jmp 	RangeError
.a5b4					GCLoadAXY:
.a5b4	ad 2f 06	lda $062f			lda 	gxXPos+1
.a5b7	ae 2e 06	ldx $062e			ldx 	gxXPos
.a5ba	ac 30 06	ldy $0630			ldy 	gxYPos
.a5bd	60		rts				rts
.a5be					GCCopyPairToStore:
.a5be	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a5c1	8d 2e 06	sta $062e			sta 	gxXPos
.a5c4	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a5c7	8d 2f 06	sta $062f			sta 	gxXPos+1
.a5ca	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a5cd	8d 30 06	sta $0630			sta 	gxYPos
.a5d0	60		rts				rts
.062c					gxCommandID:
>062c							.fill 	1
.062d					gxFillSolid:
>062d							.fill 	1
.062e					gxXPos:
>062e							.fill 	2
.0630					gxYPos:
>0630							.fill 	1
.0631					gxHandler:
>0631							.fill 	2
.0633					gxDrawScale:
>0633							.fill 	1
.a5d1					BitmapCtrl:
.a5d1	b1 30		lda ($30),y			lda 	(codePtr),y
.a5d3	c8		iny				iny
.a5d4	a2 01		ldx #$01			ldx 	#1
.a5d6	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a5d8	f0 11		beq $a5eb			beq 	BitmapSwitch
.a5da	ca		dex				dex
.a5db	c9 be		cmp #$be			cmp 	#KWD_OFF
.a5dd	f0 0c		beq $a5eb			beq 	BitmapSwitch
.a5df	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get the colour
.a5e2	5a		phy				phy
.a5e3	aa		tax				tax
.a5e4	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5e6	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a5e9	7a		ply				ply
.a5ea	60		rts				rts
.a5eb					BitmapSwitch:
.a5eb	5a		phy				phy
.a5ec	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5ee	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5f0	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a5f3	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5f5	a0 00		ldy #$00			ldy 	#0
.a5f7	a2 ff		ldx #$ff			ldx 	#$FF
.a5f9	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a5fc	9c 2d 06	stz $062d			stz 	gxFillSolid
.a5ff	9c 2e 06	stz $062e			stz 	gxXPos
.a602	9c 2f 06	stz $062f			stz 	gxXPos+1
.a605	9c 30 06	stz $0630			stz 	gxYPos
.a608	9c 33 06	stz $0633			stz 	gxDrawScale
.a60b	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a60d	a2 00		ldx #$00			ldx 	#0
.a60f	a0 00		ldy #$00			ldy 	#0
.a611	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a614	7a		ply				ply
.a615	60		rts				rts
.a616					SpritesCtrl:
.a616	b1 30		lda ($30),y			lda 	(codePtr),y
.a618	c8		iny				iny
.a619	a2 01		ldx #$01			ldx 	#1
.a61b	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a61d	f0 08		beq $a627			beq 	SpriteSwitch
.a61f	ca		dex				dex
.a620	c9 be		cmp #$be			cmp 	#KWD_OFF
.a622	f0 03		beq $a627			beq 	SpriteSwitch
.a624	4c 7a 9f	jmp $9f7a			jmp 	SyntaxError
.a627					SpriteSwitch:
.a627	5a		phy				phy
.a628	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a62a	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a62c	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a62f	7a		ply				ply
.a630	60		rts				rts
.a631					GfxCommand:
.a631	a2 00		ldx #$00			ldx 	#0
.a633	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; command
.a636	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a639	e8		inx				inx
.a63a	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger 		; X
.a63d	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a640	e8		inx				inx
.a641	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; Y
.a644	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a647	4a		lsr a				lsr 	a
.a648	d0 16		bne $a660			bne 	_GfxError
.a64a	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a64d	b0 11		bcs $a660			bcs 	_GfxError 					; bit 7 should have been zero
.a64f	5a		phy				phy 								; save pos
.a650	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a653	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a656	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a659	20 17 a8	jsr $a817			jsr 	GXGraphicDraw
.a65c	b0 02		bcs $a660			bcs 	_GfxError
.a65e	7a		ply				ply 								; restore pos and exit.
.a65f	60		rts				rts
.a660					_GfxError:
.a660	4c 7f 9f	jmp $9f7f			jmp 	RangeError
.a663					UnaryHit:
.a663	fa		plx				plx
.a664	a9 36		lda #$36			lda 	#zTemp0
.a666	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a669	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a66c	e8		inx				inx
.a66d	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a670	20 14 8d	jsr $8d14			jsr		CheckRightBracket
.a673	ca		dex				dex 								; fix back up again.
.a674	da		phx				phx 								; save X/Y
.a675	5a		phy				phy
.a676	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a679	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a67c	aa		tax				tax
.a67d	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a67f	20 17 a8	jsr $a817			jsr 	GXGraphicDraw 				; calculate result
.a682	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a683	7a		ply				ply 								; restore XY
.a684	fa		plx				plx
.a685	20 f2 9d	jsr $9df2			jsr 	NSMSetByte 					; return the hit result
.a688	60		rts				rts
.a689					UnaryJoyX:
.a689	18		clc				clc
.a68a	80 01		bra $a68d			bra 	JoyMain
.a68c					UnaryJoyY:
.a68c	38		sec				sec
.a68d					JoyMain:
.a68d	fa		plx				plx 								; get pos
.a68e	08		php				php 								; save carry (set for Y)
.a68f	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a692	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.a695	20 7c a7	jsr $a77c			jsr 	EXTReadController 			; read the controller.
.a698	28		plp				plp
.a699	90 02		bcc $a69d			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a69b	4a		lsr a				lsr 	a
.a69c	4a		lsr a				lsr 	a
.a69d					_JMNoShift:
.a69d	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a69e	b0 0a		bcs $a6aa			bcs 	_JMIsRight
.a6a0	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a6a1	b0 04		bcs $a6a7			bcs 	_JMIsLeft
.a6a3	20 f0 9d	jsr $9df0			jsr 	NSMSetZero 					; zero result
.a6a6	60		rts				rts
.a6a7					_JMIsLeft:
.a6a7	4c 9a 8d	jmp $8d9a			jmp 	ReturnTrue
.a6aa					_JMIsRight:
.a6aa	a9 01		lda #$01			lda 	#1
.a6ac	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.a6af	60		rts				rts
.a6b0					UnaryJoyB:
.a6b0	fa		plx				plx 								; get pos
.a6b1	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6b4	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.a6b7	20 7c a7	jsr $a77c			jsr 	EXTReadController 			; read the controller.
.a6ba	4a		lsr a				lsr 	a
.a6bb	4a		lsr a				lsr 	a
.a6bc	4a		lsr a				lsr 	a
.a6bd	4a		lsr a				lsr 	a
.a6be	29 01		and #$01			and 	#1
.a6c0	20 f2 9d	jsr $9df2			jsr 	NSMSetByte
.a6c3	60		rts				rts
.a6c4					PaletteCommand:
.a6c4	a2 00		ldx #$00			ldx 	#0
.a6c6	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; colour
.a6c9	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a6cc	e8		inx				inx
.a6cd	20 51 9d	jsr $9d51			jsr 	Evaluate16BitInteger 		; r
.a6d0	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a6d3	e8		inx				inx
.a6d4	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; g
.a6d7	20 1c 8d	jsr $8d1c			jsr 	CheckComma
.a6da	e8		inx				inx
.a6db	20 71 9d	jsr $9d71			jsr 	Evaluate8BitInteger 		; b
.a6de	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a6e1	85 36		sta $36				sta 	zTemp0
.a6e3	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6e5	85 37		sta $37				sta 	zTemp0+1
.a6e7	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6e9	26 37		rol $37				rol	 	zTemp0+1
.a6eb	06 36		asl $36				asl 	zTemp0
.a6ed	26 37		rol $37				rol	 	zTemp0+1
.a6ef	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6f1	85 01		sta $01				sta 	1
.a6f3	5a		phy				phy
.a6f4	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a6f7	92 36		sta ($36)			sta 	(zTemp0)
.a6f9	a0 01		ldy #$01			ldy 	#1
.a6fb	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a6fe	91 36		sta ($36),y			sta 	(zTemp0),y
.a700	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a703	c8		iny				iny
.a704	91 36		sta ($36),y			sta 	(zTemp0),y
.a706	7a		ply				ply
.a707	60		rts				rts
.a708					UnaryTimer:
.a708	fa		plx				plx
.a709	20 14 8d	jsr $8d14			jsr 	CheckRightBracket
.a70c					TimerToStackX:
.a70c	20 f0 9d	jsr $9df0			jsr 	NSMSetZero 					; zero result
.a70f	64 01		stz $01				stz 	1 							; access I/O
.a711	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a714	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a717	ad 5a d6	lda $d65a			lda 	$D65A
.a71a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a71d	ad 5b d6	lda $d65b			lda 	$D65B
.a720	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a723	60		rts				rts
.a724					EXTInitialise:
.a724	64 01		stz $01				stz 	1 							; Access I/O
.a726	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a729	9c 08 d0	stz $d008			stz 	$D008
.a72c	9c 09 d0	stz $d009			stz 	$D009
.a72f	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a731	8d 58 d6	sta $d658			sta 	$D658
.a734	60		rts				rts
.a735					EXTClearScreen:
.a735	4c ea ff	jmp $ffea			jmp 	$FFEA
.a738					EXTPrintCharacter:
.a738	48		pha				pha
.a739	da		phx				phx
.a73a	5a		phy				phy
.a73b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a73e	7a		ply				ply
.a73f	fa		plx				plx
.a740	68		pla				pla
.a741	60		rts				rts
.a742					EXTInputSingleCharacter:
.a742	da		phx				phx
.a743	5a		phy				phy
.a744					_EISCWait:
.a744	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a747	c9 00		cmp #$00			cmp 	#0
.a749	f0 f9		beq $a744			beq 	_EISCWait
.a74b	7a		ply				ply
.a74c	fa		plx				plx
.a74d	60		rts				rts
.a74e					EXTInputLine:
.a74e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a750					_ILLoop:
.a750	da		phx				phx 								; read character in
.a751	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a754	fa		plx				plx
.a755	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a757	f0 12		beq $a76b			beq 	_ILBackspace
.a759	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a75b	f0 15		beq $a772			beq 	_ILExit
.a75d	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a75f	90 ef		bcc $a750			bcc 	_ILLoop
.a761	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a763	f0 eb		beq $a750			beq 	_ILLoop
.a765	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.a768	e8		inx				inx
.a769	80 e5		bra $a750			bra 	_ILLoop
.a76b					_ILBackspace:
.a76b	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a76d	f0 e1		beq $a750			beq 	_ILLoop
.a76f	ca		dex				dex 								; back one.
.a770	80 de		bra $a750			bra 	_ILLoop
.a772					_ILExit:
.a772	20 38 a7	jsr $a738			jsr 	EXTPrintCharacter
.a775	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a778	60		rts				rts
.a779					EXTBreakCheck:
.a779	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a77c					EXTReadController:
.a77c	da		phx				phx
.a77d	a2 00		ldx #$00			ldx 	#0
.a77f	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a781	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a784	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a786	f0 04		beq $a78c			beq 	_NoSet1
.a788	8a		txa				txa
.a789	09 01		ora #$01			ora 	#1
.a78b	aa		tax				tax
.a78c					_NoSet1:
.a78c	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a78e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a791	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a793	f0 04		beq $a799			beq 	_NoSet1
.a795	8a		txa				txa
.a796	09 02		ora #$02			ora 	#2
.a798	aa		tax				tax
.a799					_NoSet1:
.a799	a9 06		lda #$06			lda 	#(($32) >> 3)
.a79b	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a79e	29 04		and #$04			and 	#($01 << (($32) & 7))
.a7a0	f0 04		beq $a7a6			beq 	_NoSet1
.a7a2	8a		txa				txa
.a7a3	09 04		ora #$04			ora 	#4
.a7a5	aa		tax				tax
.a7a6					_NoSet1:
.a7a6	a9 04		lda #$04			lda 	#(($25) >> 3)
.a7a8	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a7ab	29 20		and #$20			and 	#($01 << (($25) & 7))
.a7ad	f0 04		beq $a7b3			beq 	_NoSet1
.a7af	8a		txa				txa
.a7b0	09 08		ora #$08			ora 	#8
.a7b2	aa		tax				tax
.a7b3					_NoSet1:
.a7b3	a9 04		lda #$04			lda 	#(($26) >> 3)
.a7b5	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a7b8	29 40		and #$40			and 	#($01 << (($26) & 7))
.a7ba	f0 04		beq $a7c0			beq 	_NoSet1
.a7bc	8a		txa				txa
.a7bd	09 10		ora #$10			ora 	#16
.a7bf	aa		tax				tax
.a7c0					_NoSet1:
.a7c0	8a		txa				txa
.a7c1	fa		plx				plx
.a7c2	60		rts				rts

;******  Return to file: ./modules/zzzend.asm


;******  Processing file: ./modules/../../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.a7c3					GRVectorTable:
>a7c3	12 aa					.word	GXInitialise             ; $00 Initialise
>a7c5	2c aa					.word	GXControlBitmap          ; $01 BitmapCtl
>a7c7	74 aa					.word	GXControlSprite          ; $02 SpriteCtl
>a7c9	c4 a9					.word	GXClearBitmap            ; $03 Clear
>a7cb	03 ac					.word	GXSetColourMode          ; $04 Colour
>a7cd	cb ad					.word	GXFontHandler            ; $05 DrawFont
>a7cf	13 ae					.word	GXSpriteHandler          ; $06 DrawSprite
>a7d1	7f ae					.word	GXSelect                 ; $07 SpriteUse
>a7d3	a8 ae					.word	GXSelectImage            ; $08 SpriteImage
>a7d5	2f b0					.word	GXCollide                ; $09 SpriteCollide
>a7d7	76 a8					.word	GRUndefined              ; $0a
>a7d9	76 a8					.word	GRUndefined              ; $0b
>a7db	76 a8					.word	GRUndefined              ; $0c
>a7dd	76 a8					.word	GRUndefined              ; $0d
>a7df	76 a8					.word	GRUndefined              ; $0e
>a7e1	76 a8					.word	GRUndefined              ; $0f
>a7e3	76 a8					.word	GRUndefined              ; $10
>a7e5	76 a8					.word	GRUndefined              ; $11
>a7e7	76 a8					.word	GRUndefined              ; $12
>a7e9	76 a8					.word	GRUndefined              ; $13
>a7eb	76 a8					.word	GRUndefined              ; $14
>a7ed	76 a8					.word	GRUndefined              ; $15
>a7ef	76 a8					.word	GRUndefined              ; $16
>a7f1	76 a8					.word	GRUndefined              ; $17
>a7f3	76 a8					.word	GRUndefined              ; $18
>a7f5	76 a8					.word	GRUndefined              ; $19
>a7f7	76 a8					.word	GRUndefined              ; $1a
>a7f9	76 a8					.word	GRUndefined              ; $1b
>a7fb	76 a8					.word	GRUndefined              ; $1c
>a7fd	76 a8					.word	GRUndefined              ; $1d
>a7ff	76 a8					.word	GRUndefined              ; $1e
>a801	76 a8					.word	GRUndefined              ; $1f
>a803	74 a8					.word	GXMove                   ; $20 Move
>a805	d1 aa					.word	GXLine                   ; $21 Line
>a807	4c ac					.word	GXFrameRectangle         ; $22 FrameRect
>a809	49 ac					.word	GXFillRectangle          ; $23 FillRect
>a80b	7b a8					.word	GXFrameCircle            ; $24 FrameCircle
>a80d	77 a8					.word	GXFillCircle             ; $25 FillCircle
>a80f	76 a8					.word	GRUndefined              ; $26
>a811	76 a8					.word	GRUndefined              ; $27
>a813	31 ac					.word	GXPlotPoint              ; $28 Plot
>a815	3e af					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.0634					gxCurrentX:
>0634							.fill 	2
.0636					gxCurrentY:
>0636							.fill 	2
.0638					gxLastX:
>0638							.fill 	2
.063a					gxLastY:
>063a							.fill 	2
.063c					gxX0:
>063c							.fill 	2
.063e					gxY0:
>063e							.fill 	2
.0640					gxX1:
>0640							.fill 	2
.0642					gxY1:
>0642							.fill 	2
.0644					gxSpritesOn:
>0644							.fill 	1
.0645					gxBitmapsOn:
>0645							.fill 	1
.0646					gxBasePage:
>0646							.fill 	1
.0647					gxSpritePage:
>0647							.fill 	1
.0648					gxHeight:
>0648							.fill 	1
.0649					gxMode:
>0649							.fill 	1
.064a					gxColour:
>064a							.fill 	1
.064b					gxEORValue:
>064b							.fill 	1
.064c					gxANDValue:
>064c							.fill 	1
.064d					gxOriginalLUTValue:
>064d							.fill 	1
.064e					gsOffset:
>064e							.fill 	1
.064f					GSCurrentSpriteID:
>064f							.fill 	1
.0650					GSCurrentSpriteAddr:
>0650							.fill 	2
.0652					GXSpriteOffsetBase:
>0652							.fill 	2
.0654					GXSpriteLow:
>0654							.fill 	64
.0694					GXSpriteHigh:
>0694							.fill 	64
.a817					GXGraphicDraw:
.a817	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.a819	b0 06		bcs $a821			bcs 	_GDCoordinate
.a81b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.a81d	84 37		sty $37				sty 	gxzTemp0+1
.a81f	80 4b		bra $a86c			bra 	_GDExecuteA 				; and execute
.a821					_GDCoordinate:
.a821	48		pha				pha 								; save AXY
.a822	da		phx				phx
.a823	5a		phy				phy
.a824	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.a826					_GDCopy1:
.a826	bd 34 06	lda $0634,x			lda 	gxCurrentX,x
.a829	9d 38 06	sta $0638,x			sta 	gxLastX,x
.a82c	ca		dex				dex
.a82d	10 f7		bpl $a826			bpl 	_GDCopy1
.a82f	68		pla				pla 								; update Y
.a830	8d 36 06	sta $0636			sta 	gxCurrentY
.a833	9c 37 06	stz $0637			stz 	gxCurrentY+1
.a836	68		pla				pla
.a837	8d 34 06	sta $0634			sta 	gxCurrentX
.a83a	68		pla				pla 								; get A (command+X.1) back
.a83b	48		pha				pha
.a83c	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.a83e	8d 35 06	sta $0635			sta 	gxCurrentX+1
.a841	68		pla				pla 								; get command back
.a842	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.a844	48		pha				pha 								; push back.
.a845	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.a847	f0 17		beq $a860			beq 	_GDCopyToWorkArea
.a849	ad 35 06	lda $0635			lda 	gxCurrentX+1 				; X < 256 X okay
.a84c	f0 07		beq $a855			beq 	_GDCheckY
.a84e	ad 34 06	lda $0634			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.a851	c9 40		cmp #$40			cmp 	#64
.a853	b0 08		bcs $a85d			bcs 	_GDError1
.a855					_GDCheckY:
.a855	ad 36 06	lda $0636			lda 	gxCurrentY 					; check Y < Height.
.a858	cd 48 06	cmp $0648			cmp 	gxHeight
.a85b	90 03		bcc $a860			bcc 	_GDCopyToWorkArea
.a85d					_GDError1:
.a85d	68		pla				pla
.a85e					_GDError2:
.a85e	38		sec				sec
.a85f	60		rts				rts
.a860					_GDCopyToWorkArea:
.a860	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.a862					_GDCopy2:
.a862	bd 34 06	lda $0634,x			lda 	gxCurrentX,x
.a865	9d 3c 06	sta $063c,x			sta 	gxX0,x
.a868	ca		dex				dex
.a869	10 f7		bpl $a862			bpl 	_GDCopy2
.a86b	68		pla				pla 								; get command
.a86c					_GDExecuteA:
.a86c	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.a86e	b0 ee		bcs $a85e			bcs 	_GDError2
.a870	aa		tax				tax
.a871	7c c3 a7	jmp ($a7c3,x)			jmp 	(GRVectorTable,x)
.a874					GXMove:
.a874	18		clc				clc
.a875	60		rts				rts
.a876					GRUndefined:
>a876	db						.byte 	$DB 						; causes a break in the emulator
.a877					GXFillCircle:
.a877	a9 ff		lda #$ff			lda 	#255
.a879	80 02		bra $a87d			bra 	GXCircle
.a87b					GXFrameCircle:
.a87b	a9 00		lda #$00			lda 	#0
.a87d					GXCircle:
.a87d	8d d7 06	sta $06d7			sta 	gxIsFillMode					; save Fill flag
.a880	ad 45 06	lda $0645			lda 	gxBitmapsOn
.a883	f0 26		beq $a8ab			beq 	_GXCFail
.a885	20 d6 b0	jsr $b0d6			jsr 	GXSortXY 					; topleft/bottomright
.a888	20 ae af	jsr $afae			jsr 	GXOpenBitmap 				; start drawing
.a88b	20 7d a9	jsr $a97d			jsr 	GXCircleSetup 				; set up for drawing
.a88e	9c d8 06	stz $06d8			stz 	gxYChanged
.a891					_GXCircleDraw:
.a891	ad d5 06	lda $06d5			lda 	gXCentre					; while x <= y
.a894	cd d6 06	cmp $06d6			cmp 	gYCentre
.a897	90 0a		bcc $a8a3			bcc 	_GXCircleContinue
.a899	d0 03		bne $a89e			bne 	_GXNoLast
.a89b	20 b0 a8	jsr $a8b0			jsr 	GXPlot1
.a89e					_GXNoLast:
.a89e	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap 				; close the bitmap
.a8a1	18		clc				clc
.a8a2	60		rts				rts
.a8a3					_GXCircleContinue:
.a8a3	20 ad a8	jsr $a8ad			jsr 	GXPlot2 					; draw it
.a8a6	20 2a a9	jsr $a92a			jsr 	GXCircleMove 				; adjust the coordinates
.a8a9	80 e6		bra $a891			bra 	_GXCircleDraw
.a8ab					_GXCFail:
.a8ab	38		sec				sec
.a8ac	60		rts				rts
.a8ad					GXPlot2:
.a8ad	20 b0 a8	jsr $a8b0			jsr 	GXPlot1 						; plot and swap, fall through does twice
.a8b0					GXPlot1:
.a8b0	ad d6 06	lda $06d6			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.a8b3	f0 03		beq $a8b8			beq 	_GXPlot1Only
.a8b5	20 d4 a8	jsr $a8d4			jsr 	GXPlot0 						; plot and negate
.a8b8					_GXPlot1Only:
.a8b8	20 d4 a8	jsr $a8d4			jsr 	GXPlot0 						; twice, undoing negation
.a8bb	ad d5 06	lda $06d5			lda 	gXCentre 						; swap X and Y
.a8be	ae d6 06	ldx $06d6			ldx	 	gYCentre
.a8c1	8d d6 06	sta $06d6			sta 	gYCentre
.a8c4	8e d5 06	stx $06d5			stx 	gXCentre
.a8c7	ad d8 06	lda $06d8			lda 	gxYChanged 						; toggle Y Changed flag
.a8ca	a9 ff		lda #$ff			lda 	#$FF
.a8cc	8d d8 06	sta $06d8			sta 	gxYChanged
.a8cf	60		rts				rts
.a8d0	20 d4 a8	jsr $a8d4			jsr 	GXPlot0 						; do once
.a8d3	60		rts				rts
.a8d4	ad d7 06	lda $06d7	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.a8d7	f0 05		beq $a8de			beq 	_GXPlot0Always
.a8d9	ad d8 06	lda $06d8			lda 	gxYChanged						; fill mode, only draw if changed.
.a8dc	f0 2d		beq $a90b			beq 	GXPlot0Exit
.a8de					_GXPlot0Always:
.a8de	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.a8e0	ad d6 06	lda $06d6			lda 	gYCentre
.a8e3	20 0c a9	jsr $a90c			jsr 	GXSubCopy
.a8e6	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.a8e8	ad d5 06	lda $06d5			lda 	gXCentre
.a8eb	20 0c a9	jsr $a90c			jsr 	GXSubCopy
.a8ee	48		pha				pha 									; save last offset X
.a8ef	20 be af	jsr $afbe			jsr 	GXPositionCalc 					; calculate position/offset.
.a8f2	68		pla				pla
.a8f3	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.a8f4	85 36		sta $36				sta 	gxzTemp0
.a8f6	64 37		stz $37				stz 	gxzTemp0+1
.a8f8	26 37		rol $37				rol 	gxzTemp0+1
.a8fa	ad d7 06	lda $06d7			lda 	gxIsFillMode
.a8fd	69 80		adc #$80			adc 	#128
.a8ff	20 9c ac	jsr $ac9c			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.a902	38		sec				sec 									; GY = -GY
.a903	a9 00		lda #$00			lda 	#0
.a905	ed d6 06	sbc $06d6			sbc 	gYCentre
.a908	8d d6 06	sta $06d6			sta 	gYCentre
.a90b					GXPlot0Exit:
.a90b	60		rts				rts
.a90c					GXSubCopy:
.a90c	85 36		sta $36				sta 	gxzTemp0
.a90e	64 37		stz $37				stz 	gxzTemp0+1
.a910	29 80		and #$80			and 	#$80
.a912	f0 02		beq $a916			beq 	_GXNoSx
.a914	c6 37		dec $37				dec 	gxzTemp0+1
.a916					_GXNoSx:
.a916	38		sec				sec
.a917	bd 40 06	lda $0640,x			lda 	gXX1,x
.a91a	e5 36		sbc $36				sbc 	gxzTemp0
.a91c	9d 3c 06	sta $063c,x			sta 	gXX0,x
.a91f	bd 41 06	lda $0641,x			lda 	gXX1+1,x
.a922	e5 37		sbc $37				sbc 	gxzTemp0+1
.a924	9d 3d 06	sta $063d,x			sta 	gXX0+1,x
.a927	a5 36		lda $36				lda 	gxzTemp0 						; return A
.a929	60		rts				rts
.a92a					GXCircleMove:
.a92a	9c d8 06	stz $06d8			stz 	gxYChanged 					; clear Y changed flag
.a92d	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.a92f	10 0d		bpl $a93e			bpl 	_GXEMPositive
.a931	ee d5 06	inc $06d5			inc 	gXCentre 					; X++
.a934	ad d5 06	lda $06d5			lda 	gXCentre
.a937	20 5d a9	jsr $a95d			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.a93a	a9 06		lda #$06			lda 	#6  						; and add 6
.a93c	80 15		bra $a953			bra 	_GXEMAddD
.a93e					_GXEMPositive:
.a93e	ee d5 06	inc $06d5			inc 	gXCentre					; X++
.a941	ce d6 06	dec $06d6			dec 	gyCentre 					; Y--
.a944	38		sec				sec 								; calculate X-Y
.a945	ad d5 06	lda $06d5			lda 	gXCentre
.a948	ed d6 06	sbc $06d6			sbc 	gYCentre
.a94b	20 5d a9	jsr $a95d			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.a94e	a9 0a		lda #$0a			lda 	#10  						; and add 10
.a950	ce d8 06	dec $06d8			dec 	gxYChanged
.a953					_GXEMAddD:
.a953	18		clc				clc
.a954	65 38		adc $38				adc 	gxzTemp1
.a956	85 38		sta $38				sta 	gxzTemp1
.a958	90 02		bcc $a95c			bcc 	_GXEMNoCarry
.a95a	e6 39		inc $39				inc 	gxzTemp1+1
.a95c					_GXEMNoCarry:
.a95c	60		rts				rts
.a95d					_GXAdd4TimesToD:
.a95d	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.a95f	29 80		and #$80			and 	#$80
.a961	f0 02		beq $a965			beq 	_GXA4Unsigned
.a963	a9 ff		lda #$ff			lda 	#$FF
.a965					_GXA4Unsigned:
.a965	85 37		sta $37				sta 	gxzTemp0+1
.a967	06 36		asl $36				asl 	gxzTemp0  					; x 4
.a969	26 37		rol $37				rol 	gxzTemp0+1
.a96b	06 36		asl $36				asl 	gxzTemp0
.a96d	26 37		rol $37				rol 	gxzTemp0+1
.a96f	18		clc				clc 								; add
.a970	a5 36		lda $36				lda		gxzTemp0
.a972	65 38		adc $38				adc 	gxzTemp1
.a974	85 38		sta $38				sta 	gxzTemp1
.a976	a5 37		lda $37				lda		gxzTemp0+1
.a978	65 39		adc $39				adc 	gxzTemp1+1
.a97a	85 39		sta $39				sta 	gxzTemp1+1
.a97c	60		rts				rts
.a97d					GXCircleSetup:
.a97d	38		sec				sec
.a97e	ad 42 06	lda $0642			lda 	gxY1
.a981	ed 3e 06	sbc $063e			sbc 	gxY0
.a984	4a		lsr a				lsr 	a
.a985	8d d4 06	sta $06d4			sta 	gxRadius
.a988	a2 00		ldx #$00			ldx 	#0
.a98a	20 ac a9	jsr $a9ac			jsr 	_GXCalculateCentre
.a98d	a2 02		ldx #$02			ldx 	#2
.a98f	20 ac a9	jsr $a9ac			jsr 	_GXCalculateCentre
.a992	9c d5 06	stz $06d5			stz 	gXCentre
.a995	ad d4 06	lda $06d4			lda 	gxRadius
.a998	8d d6 06	sta $06d6			sta 	gYCentre
.a99b	0a		asl a				asl 	a 							; R x 2
.a99c	85 36		sta $36				sta 	gxzTemp0
.a99e	38		sec				sec
.a99f	a9 03		lda #$03			lda 	#3
.a9a1	e5 36		sbc $36				sbc 	gxzTemp0
.a9a3	85 38		sta $38				sta 	gxzTemp1
.a9a5	a9 00		lda #$00			lda 	#0
.a9a7	e9 00		sbc #$00			sbc 	#0
.a9a9	85 39		sta $39				sta 	gxzTemp1+1
.a9ab	60		rts				rts
.a9ac					_GXCalculateCentre:
.a9ac	38		sec				sec
.a9ad	bd 40 06	lda $0640,x			lda 	gxX1,x
.a9b0	7d 3c 06	adc $063c,x			adc 	gXX0,x
.a9b3	9d 40 06	sta $0640,x			sta 	gXX1,x
.a9b6	bd 41 06	lda $0641,x			lda 	gXX1+1,x
.a9b9	7d 3d 06	adc $063d,x			adc 	gXX0+1,x
.a9bc	4a		lsr a				lsr 	a
.a9bd	9d 41 06	sta $0641,x			sta 	gXX1+1,x
.a9c0	7e 40 06	ror $0640,x			ror 	gXX1,x
.a9c3	60		rts				rts
.06d4					gxRadius:
>06d4							.fill 	1
.06d5					gXCentre:
>06d5							.fill 	1
.06d6					gYCentre:
>06d6							.fill 	1
.06d7					gxIsFillMode:
>06d7							.fill 	1
.06d8					gxYChanged:
>06d8							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.a9c4					GXClearBitmap:
.a9c4	ad 45 06	lda $0645			lda 	gxBitmapsOn 				; check BMP running.
.a9c7	f0 24		beq $a9ed			beq 	_GXCBFail
.a9c9	20 ae af	jsr $afae			jsr 	GXOpenBitmap 				; start access
.a9cc	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.a9ce	ad 48 06	lda $0648			lda 	gxHeight
.a9d1	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.a9d3	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.a9d5					_GXCalcLastPage:
.a9d5	98		tya				tya 								; add to base page
.a9d6	18		clc				clc
.a9d7	6d 46 06	adc $0646			adc 	gxBasePage
.a9da	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.a9dc					_GXClearAll:
.a9dc	20 ef a9	jsr $a9ef			jsr 	_GXClearBlock 				; clear 8k block
.a9df	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.a9e1	a5 0b		lda $0b				lda 	GXEditSlot
.a9e3	cd 46 06	cmp $0646			cmp 	gxBasePage 					; until before base page
.a9e6	b0 f4		bcs $a9dc			bcs 	_GXClearAll
.a9e8	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap	 			; stop access
.a9eb	18		clc				clc
.a9ec	60		rts				rts
.a9ed					_GXCBFail:
.a9ed	38		sec				sec
.a9ee	60		rts				rts
.a9ef					_GXClearBlock:
.a9ef	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.a9f1	85 38		sta $38				sta 	0+gxzTemp1
.a9f3	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.a9f5	85 39		sta $39				sta 	1+gxzTemp1
.a9f7					_GXCB0:
.a9f7	a5 36		lda $36				lda 	gxzTemp0
.a9f9	a0 00		ldy #$00			ldy 	#0
.a9fb					_GXCB1:
.a9fb	91 38		sta ($38),y			sta 	(gxzTemp1),y
.a9fd	c8		iny				iny
.a9fe	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa00	c8		iny				iny
.aa01	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa03	c8		iny				iny
.aa04	91 38		sta ($38),y			sta 	(gxzTemp1),y
.aa06	c8		iny				iny
.aa07	d0 f2		bne $a9fb			bne 	_GXCB1
.aa09	e6 39		inc $39				inc 	gxzTemp1+1
.aa0b	a5 39		lda $39				lda 	gxzTemp1+1
.aa0d	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.aa0f	d0 e6		bne $a9f7			bne 	_GXCB0
.aa11	60		rts				rts
.aa12					GXInitialise:
.aa12	64 01		stz $01				stz 	1
.aa14	a9 01		lda #$01			lda 	#1
.aa16	8d 00 d0	sta $d000			sta 	$D000
.aa19	18		clc				clc
.aa1a	9c 44 06	stz $0644			stz 	GXSpritesOn
.aa1d	9c 45 06	stz $0645			stz 	GXBitmapsOn
.aa20	a2 0f		ldx #$0f			ldx 	#15
.aa22					_GXIClear:
.aa22	9e 34 06	stz $0634,x			stz 	gxCurrentX,x
.aa25	ca		dex				dex
.aa26	10 fa		bpl $aa22			bpl 	_GXIClear
.aa28	20 c3 aa	jsr $aac3			jsr 	GXClearSpriteStore
.aa2b	60		rts				rts
.aa2c					GXControlBitmap:
.aa2c	64 01		stz $01				stz 	1
.aa2e	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.aa30	29 01		and #$01			and 	#1 							; set bitmap flag
.aa32	8d 45 06	sta $0645			sta 	gxBitmapsOn
.aa35	4a		lsr a				lsr 	a 							; bit 0 into carry.
.aa36	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.aa39	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.aa3b	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.aa3d	90 02		bcc $aa41			bcc 	_CBNotOn
.aa3f	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.aa41					_CBNotOn:
.aa41	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aa44	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.aa46	29 07		and #$07			and 	#7
.aa48	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.aa4b	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.aa4d	d0 02		bne $aa51			bne 	_CBNotDefault
.aa4f	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.aa51					_CBNotDefault:
.aa51	8d 46 06	sta $0646			sta 	gxBasePage
.aa54	20 b5 aa	jsr $aab5			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.aa57	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.aa59	8d 03 d1	sta $d103			sta 	$D103
.aa5c	a5 36		lda $36				lda 	gxzTemp0
.aa5e	8d 02 d1	sta $d102			sta 	$D102
.aa61	9c 01 d1	stz $d101			stz 	$D101
.aa64	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.aa66	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.aa69	29 01		and #$01			and 	#1
.aa6b	f0 02		beq $aa6f			beq 	_CBHaveHeight
.aa6d	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.aa6f					_CBHaveHeight
.aa6f	8e 48 06	stx $0648			stx 	gxHeight
.aa72	18		clc				clc
.aa73	60		rts				rts
.aa74					GXControlSprite:
.aa74	64 01		stz $01				stz 	1
.aa76	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.aa78	29 01		and #$01			and 	#1 							; set sprites flag
.aa7a	8d 44 06	sta $0644			sta 	gxSpritesOn
.aa7d	4a		lsr a				lsr 	a 							; bit 0 into carry.
.aa7e	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.aa81	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.aa83	29 df		and #$df			and 	#$DF 						; clear sprite bit
.aa85	90 02		bcc $aa89			bcc 	_CSNotOn
.aa87	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.aa89					_CSNotOn:
.aa89	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.aa8c	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.aa8e	d0 02		bne $aa92			bne 	_CSNotDefault
.aa90	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.aa92					_CSNotDefault:
.aa92	8d 47 06	sta $0647			sta 	gxSpritePage
.aa95	20 b5 aa	jsr $aab5			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.aa98	a5 36		lda $36				lda 	zTemp0
.aa9a	8d 52 06	sta $0652			sta 	GXSpriteOffsetBase
.aa9d	a5 37		lda $37				lda 	zTemp0+1
.aa9f	8d 53 06	sta $0653			sta 	GXSpriteOffsetBase+1
.aaa2	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.aaa4					_CSClear:
.aaa4	9e 00 d9	stz $d900,x			stz 	$D900,x
.aaa7	9e 00 da	stz $da00,x			stz 	$DA00,x
.aaaa	ca		dex				dex
.aaab	d0 f7		bne $aaa4			bne 	_CSClear
.aaad	9c 51 06	stz $0651			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.aab0	20 c3 aa	jsr $aac3			jsr 	GXClearSpriteStore
.aab3	18		clc				clc
.aab4	60		rts				rts
.aab5					GXCalculateBaseAddress:
.aab5	85 36		sta $36				sta 	gxzTemp0
.aab7	64 37		stz $37				stz 	gxzTemp0+1
.aab9	a9 05		lda #$05			lda 	#5
.aabb					_GXShift:
.aabb	06 36		asl $36				asl 	gxzTemp0
.aabd	26 37		rol $37				rol 	gxzTemp0+1
.aabf	3a		dec a				dec		a
.aac0	d0 f9		bne $aabb			bne 	_GXShift
.aac2	60		rts				rts
.aac3					GXClearSpriteStore:
.aac3	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.aac5					_GXCSSLoop:
.aac5	9e 94 06	stz $0694,x			stz 	GXSpriteHigh,x
.aac8	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.aaca	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.aacd	ca		dex				dex
.aace	10 f5		bpl $aac5			bpl 	_GXCSSLoop
.aad0	60		rts				rts
.aad1					GXLine:
.aad1	ad 45 06	lda $0645			lda 	GXBitmapsOn
.aad4	f0 28		beq $aafe			beq 	_GXLFail
.aad6	20 ae af	jsr $afae			jsr 	GXOpenBitmap
.aad9	20 f4 b0	jsr $b0f4			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.aadc	20 a4 ab	jsr $aba4			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.aadf	20 be af	jsr $afbe			jsr 	GXPositionCalc 				; calculate position/offset.
.aae2					_GXDrawLoop:
.aae2	ac 4e 06	ldy $064e			ldy 	gsOffset 					; draw the pixel
.aae5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.aae7	2d 4c 06	and $064c			and 	gxANDValue
.aaea	4d 4b 06	eor $064b			eor 	gxEORValue
.aaed	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aaef	20 00 ab	jsr $ab00			jsr 	GXLineIsComplete 			; is the line complete ?
.aaf2	f0 05		beq $aaf9			beq 	_GXLExit
.aaf4	20 1b ab	jsr $ab1b			jsr 	GXLineAdvance 				; code as per advance method
.aaf7	80 e9		bra $aae2			bra 	_GXDrawLoop
.aaf9					_GXLExit:
.aaf9	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap
.aafc	18		clc				clc
.aafd	60		rts				rts
.aafe					_GXLFail:
.aafe	38		sec				sec
.aaff	60		rts				rts
.ab00					GXLineIsComplete:
.ab00	ad db 06	lda $06db			lda 	GXIsDiffYLarger 			; is dy larger
.ab03	d0 0f		bne $ab14			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.ab05	ad 3c 06	lda $063c			lda 	GXX0 						; compare X, LSB and MSB
.ab08	4d 40 06	eor $0640			eor 	GXX1
.ab0b	d0 06		bne $ab13			bne 	_GXLICExit
.ab0d	ad 3d 06	lda $063d			lda 	GXX0+1
.ab10	4d 41 06	eor $0641			eor 	GXX1+1
.ab13					_GXLICExit:
.ab13	60		rts				rts
.ab14					_GXLICCompareY:
.ab14	ad 42 06	lda $0642			lda 	GXY1
.ab17	4d 3e 06	eor $063e			eor 	GXY0
.ab1a	60		rts				rts
.ab1b					GXLineAdvance:
.ab1b	18		clc				clc 								; add adjust to position
.ab1c	ad dd 06	lda $06dd			lda 	GXPosition
.ab1f	6d de 06	adc $06de			adc 	GXAdjust
.ab22	8d dd 06	sta $06dd			sta 	GXPosition
.ab25	9c e0 06	stz $06e0			stz 	GXAddSelect 				; clear add select flag
.ab28	b0 05		bcs $ab2f			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.ab2a	cd df 06	cmp $06df			cmp 	GXTotal 					; if exceeded total
.ab2d	90 0a		bcc $ab39			bcc 	_GXLANoExtra
.ab2f					_GXLAOverflow:
.ab2f	ce e0 06	dec $06e0			dec 	GXAddSelect 				; set addselect to $FF
.ab32	38		sec				sec 								; subtract total and write back
.ab33	ed df 06	sbc $06df			sbc 	GXTotal
.ab36	8d dd 06	sta $06dd			sta 	GXPosition
.ab39					_GXLANoExtra:
.ab39	ad db 06	lda $06db			lda 	GXIsDiffYLarger
.ab3c	f0 0d		beq $ab4b			beq 	_GXDXLarger
.ab3e	20 9d ab	jsr $ab9d			jsr 	GXIncrementY
.ab41	ad e0 06	lda $06e0			lda 	GXAddSelect
.ab44	f0 10		beq $ab56			beq 	_GXLAExit
.ab46	20 57 ab	jsr $ab57			jsr 	GXAdjustX
.ab49	80 0b		bra $ab56			bra 	_GXLAExit
.ab4b					_GXDXLarger:
.ab4b	20 57 ab	jsr $ab57			jsr 	GXAdjustX
.ab4e	ad e0 06	lda $06e0			lda 	GXAddSelect
.ab51	f0 03		beq $ab56			beq 	_GXLAExit
.ab53	20 9d ab	jsr $ab9d			jsr 	GXIncrementY
.ab56					_GXLAExit:
.ab56	60		rts				rts
.ab57					GXAdjustX:
.ab57	ad dc 06	lda $06dc			lda 	GXDXNegative
.ab5a	10 25		bpl $ab81			bpl 	_GXAXRight
.ab5c	ad 3c 06	lda $063c			lda 	GXX0
.ab5f	d0 03		bne $ab64			bne 	_GXAXNoBorrow
.ab61	ce 3d 06	dec $063d			dec 	GXX0+1
.ab64					_GXAXNoBorrow:
.ab64	ce 3c 06	dec $063c			dec 	GXX0
.ab67	ce 4e 06	dec $064e			dec 	gsOffset 					; pixel left
.ab6a	ad 4e 06	lda $064e			lda 	gsOffset
.ab6d	c9 ff		cmp #$ff			cmp 	#$FF
.ab6f	d0 0f		bne $ab80			bne 	_GXAYExit 					; underflow
.ab71	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ab73	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ab75	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ab77	b0 07		bcs $ab80			bcs 	_GXAYExit
.ab79	18		clc				clc
.ab7a	69 20		adc #$20			adc 	#$20 						; fix up
.ab7c	85 3d		sta $3d				sta 	gxzScreen+1
.ab7e	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ab80					_GXAYExit:
.ab80	60		rts				rts
.ab81					_GXAXRight:
.ab81	ee 3c 06	inc $063c			inc 	GXX0
.ab84	d0 03		bne $ab89			bne 	_GXAXNoCarry
.ab86	ee 3d 06	inc $063d			inc 	GXX0+1
.ab89					_GXAXNoCarry:
.ab89	ee 4e 06	inc $064e			inc 	gsOffset 					; pixel right
.ab8c	d0 0e		bne $ab9c			bne 	_GXAXExit 					; if not overflowed, exit.
.ab8e	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ab90	a5 3d		lda $3d				lda 	gxzScreen+1
.ab92	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ab94	90 06		bcc $ab9c			bcc 	_GXAXExit
.ab96	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ab98	85 3d		sta $3d				sta 	gxzScreen+1
.ab9a	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ab9c					_GXAXExit:
.ab9c	60		rts				rts
.ab9d					GXIncrementY:
.ab9d	ee 3e 06	inc $063e			inc 	GXY0
.aba0	20 14 b0	jsr $b014			jsr 	GXMovePositionDown
.aba3	60		rts				rts
.aba4					GXLineSetup:
.aba4	ad 42 06	lda $0642			lda 	GXY1
.aba7	38		sec				sec
.aba8	ed 3e 06	sbc $063e			sbc 	GXY0
.abab	4a		lsr a				lsr 	a
.abac	8d da 06	sta $06da			sta 	GXDiffY
.abaf	9c dc 06	stz $06dc			stz 	GXDXNegative 				; clear -ve flag
.abb2	38		sec				sec
.abb3	ad 40 06	lda $0640			lda 	GXX1
.abb6	ed 3c 06	sbc $063c			sbc 	GXX0
.abb9	8d d9 06	sta $06d9			sta 	GXDiffX
.abbc	ad 41 06	lda $0641			lda 	GXX1+1 						; calculate MSB
.abbf	ed 3d 06	sbc $063d			sbc 	GXX0+1
.abc2	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.abc3	6e d9 06	ror $06d9			ror 	GXDiffX
.abc6	0a		asl a				asl 	a
.abc7	10 0c		bpl $abd5			bpl 	_GDXNotNegative
.abc9	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.abcb	38		sec				sec
.abcc	ed d9 06	sbc $06d9			sbc 	GXDiffX
.abcf	8d d9 06	sta $06d9			sta 	GXDiffX
.abd2	ce dc 06	dec $06dc			dec 	GXDXNegative 				; -ve flag = $FF.
.abd5					_GDXNotNegative:
.abd5	9c db 06	stz $06db			stz 	GXIsDiffYLarger 			; clear larger flag
.abd8	ad da 06	lda $06da			lda 	GXDiffY 					; set adjust and total.
.abdb	8d de 06	sta $06de			sta 	GXAdjust
.abde	ad d9 06	lda $06d9			lda 	GXDiffX
.abe1	8d df 06	sta $06df			sta 	GXTotal
.abe4	ad da 06	lda $06da			lda 	GXDiffY 					; if dy > dx
.abe7	cd d9 06	cmp $06d9			cmp 	GXDiffX
.abea	90 0f		bcc $abfb			bcc 	_GDXNotLarger
.abec	ce db 06	dec $06db			dec 	GXIsDiffYLarger 			; set the dy larger flag
.abef	ad d9 06	lda $06d9			lda 	GXDiffX 					; set adjust and total other way round
.abf2	8d de 06	sta $06de			sta 	GXAdjust
.abf5	ad da 06	lda $06da			lda 	GXDiffY
.abf8	8d df 06	sta $06df			sta 	GXTotal
.abfb					_GDXNotLarger:
.abfb	ad df 06	lda $06df			lda 	GXTotal
.abfe	4a		lsr a				lsr 	a
.abff	8d dd 06	sta $06dd			sta 	GXPosition
.ac02	60		rts				rts
.06d9					GXDiffX:
>06d9							.fill 	1
.06da					GXDiffY:
>06da							.fill 	1
.06db					GXIsDiffYLarger:
>06db							.fill 	1
.06dc					GXDXNegative:
>06dc							.fill 	1
.06dd					GXPosition:
>06dd							.fill 	1
.06de					GXAdjust:
>06de							.fill 	1
.06df					GXTotal:
>06df							.fill 	1
.06e0					GXAddSelect:
>06e0							.fill 	1
.ac03					GXSetColourMode:
.ac03	a6 36		ldx $36				ldx 	gxzTemp0
.ac05	8e 4a 06	stx $064a			stx 	gxColour 								; set colour
.ac08	a5 37		lda $37				lda 	gxzTemp0+1 								;
.ac0a	8d 49 06	sta $0649			sta 	gxMode 									; set mode
.ac0d	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.ac0f	9c 4c 06	stz $064c			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ac12	ae 4a 06	ldx $064a			ldx 	gxColour
.ac15	8e 4b 06	stx $064b			stx 	gxEORValue
.ac18	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ac1a	90 03		bcc $ac1f			bcc 	_GXSDCNotAndColour
.ac1c	8e 4c 06	stx $064c			stx 	gxANDValue
.ac1f					_GXSDCNotAndColour:
.ac1f	d0 03		bne $ac24			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.ac21	9c 4b 06	stz $064b			stz 	gxEORValue
.ac24					_GXSDCNotAnd:
.ac24	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.ac25	90 08		bcc $ac2f			bcc 	_GXSDCNoFlip
.ac27	ad 4c 06	lda $064c			lda	 	gxANDValue
.ac2a	49 ff		eor #$ff			eor 	#$FF
.ac2c	8d 4c 06	sta $064c			sta 	gxANDValue
.ac2f					_GXSDCNoFlip:
.ac2f	18		clc				clc
.ac30	60		rts				rts
.ac31					GXPlotPoint:
.ac31	20 ae af	jsr $afae			jsr 	GXOpenBitmap 				; start drawing
.ac34	20 be af	jsr $afbe			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ac37	ac 4e 06	ldy $064e			ldy 	gsOffset
.ac3a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ac3c	2d 4c 06	and $064c			and 	gxANDValue
.ac3f	4d 4b 06	eor $064b			eor 	gxEORValue
.ac42	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ac44	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap 				; stop drawing and exit
.ac47	18		clc				clc
.ac48	60		rts				rts
.ac49					GXFillRectangle:
.ac49	38		sec				sec
.ac4a	80 01		bra $ac4d			bra 	GXRectangle
.ac4c					GXFrameRectangle:
.ac4c	18		clc				clc
.ac4d					GXRectangle:
.ac4d	ad 45 06	lda $0645			lda 	gxBitmapsOn
.ac50	f0 35		beq $ac87			beq 	_GXRFail
.ac52	08		php				php 								; save Fill flag (CS)
.ac53	20 ae af	jsr $afae			jsr 	GXOpenBitmap 				; start drawing
.ac56	20 d6 b0	jsr $b0d6			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ac59	20 be af	jsr $afbe			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ac5c	38		sec				sec 								; sec = Draw line
.ac5d	20 89 ac	jsr $ac89			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ac60	ad 3e 06	lda $063e			lda 	gxY0 						; reached end of rectangle ?
.ac63	cd 42 06	cmp $0642			cmp 	gxY1
.ac66	f0 19		beq $ac81			beq 	_GXRectangleExit
.ac68					_GXRectLoop:
.ac68	20 14 b0	jsr $b014			jsr 	GXMovePositionDown 			; down one.
.ac6b	ee 3e 06	inc $063e			inc 	gxY0 						; change Y pos
.ac6e	ad 3e 06	lda $063e			lda 	gxY0 						; reached last line
.ac71	cd 42 06	cmp $0642			cmp 	gXY1
.ac74	f0 07		beq $ac7d			beq 	_GXLastLine
.ac76	28		plp				plp 								; get flag back
.ac77	08		php				php
.ac78	20 89 ac	jsr $ac89			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ac7b	80 eb		bra $ac68			bra 	_GXRectLoop
.ac7d					_GXLastLine:
.ac7d	38		sec				sec
.ac7e	20 89 ac	jsr $ac89			jsr 	GXDrawLineX1X0
.ac81					_GXRectangleExit:
.ac81	68		pla				pla 								; throw fill flag.
.ac82	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap 				; stop drawing and exit
.ac85	18		clc				clc
.ac86	60		rts				rts
.ac87					_GXRFail:
.ac87	38		sec				sec
.ac88	60		rts				rts
.ac89					GXDrawLineX1X0:
.ac89	08		php				php 								; save solid/either-end
.ac8a	38		sec				sec
.ac8b	ad 40 06	lda $0640			lda		gXX1
.ac8e	ed 3c 06	sbc $063c			sbc 	gXX0
.ac91	85 36		sta $36				sta 	gxzTemp0
.ac93	ad 41 06	lda $0641			lda 	gXX1+1
.ac96	ed 3d 06	sbc $063d			sbc 	gXX0+1
.ac99	85 37		sta $37				sta 	gxzTemp0+1
.ac9b	28		plp				plp
.ac9c					GXDrawLineTemp0:
.ac9c	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.ac9e	48		pha				pha
.ac9f	a5 3d		lda $3d				lda 	gxzScreen+1
.aca1	48		pha				pha
.aca2	ad 4e 06	lda $064e			lda 	gsOffset
.aca5	48		pha				pha
.aca6	a5 0b		lda $0b				lda 	GXEditSlot
.aca8	48		pha				pha
.aca9	ac 4e 06	ldy $064e			ldy 	gsOffset 					; Y offset
.acac	90 1e		bcc $accc			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.acae					_GXDLTLine:
.acae	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.acb0	2d 4c 06	and $064c			and 	gxANDValue
.acb3	4d 4b 06	eor $064b			eor 	gxEORValue
.acb6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acb8	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.acba	d0 04		bne $acc0			bne 	_GXDLTNoBorrow
.acbc	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.acbe	30 2e		bmi $acee			bmi 	_GXDLTExit
.acc0					_GXDLTNoBorrow:
.acc0	c6 36		dec $36				dec 	gxzTemp0
.acc2	c8		iny				iny 								; next slot.
.acc3	d0 e9		bne $acae			bne 	_GXDLTLine
.acc5	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.acc7	20 fc ac	jsr $acfc			jsr 	GXDLTCheckWrap				; check for new page.
.acca	80 e2		bra $acae			bra 	_GXDLTLine
.accc					_GXDLTEndPoints:
.accc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.acce	2d 4c 06	and $064c			and 	gxANDValue
.acd1	4d 4b 06	eor $064b			eor 	gxEORValue
.acd4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acd6	98		tya				tya 								; advance to right side
.acd7	18		clc				clc
.acd8	65 36		adc $36				adc 	gxzTemp0
.acda	a8		tay				tay
.acdb	a5 3d		lda $3d				lda 	gxzScreen+1
.acdd	65 37		adc $37				adc 	gxzTemp0+1
.acdf	85 3d		sta $3d				sta 	gxzScreen+1
.ace1	20 fc ac	jsr $acfc			jsr 	GXDLTCheckWrap 			; fix up.
.ace4	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ace6	2d 4c 06	and $064c			and 	gxANDValue
.ace9	4d 4b 06	eor $064b			eor 	gxEORValue
.acec	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acee					_GXDLTExit:
.acee	68		pla				pla
.acef	85 0b		sta $0b				sta 	GXEditSlot
.acf1	68		pla				pla
.acf2	8d 4e 06	sta $064e			sta 	gsOffset
.acf5	68		pla				pla
.acf6	85 3d		sta $3d				sta 	gxzScreen+1
.acf8	68		pla				pla
.acf9	85 3c		sta $3c				sta 	gxzScreen
.acfb	60		rts				rts
.acfc					GXDLTCheckWrap:
.acfc	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.acfe	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ad00	90 06		bcc $ad08			bcc 	_GXDLTCWExit
.ad02	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ad04	85 3d		sta $3d				sta 	gxzScreen+1
.ad06	e6 0b		inc $0b				inc 	GXEditSlot
.ad08					_GXDLTCWExit:
.ad08	60		rts				rts
.ad09					GXDrawGraphicElement:
.ad09	8d e1 06	sta $06e1			sta 	gxSize 						; save size
.ad0c	3a		dec a				dec 	a
.ad0d	8d e2 06	sta $06e2			sta 	gxMask 						; and mask
.ad10	ad 45 06	lda $0645			lda 	gxBitmapsOn 				; check BMP on
.ad13	f0 67		beq $ad7c			beq 	_GXSLFail
.ad15	ad 3e 06	lda $063e			lda 	gxY0 						; push Y on stack
.ad18	48		pha				pha
.ad19	8c e4 06	sty $06e4			sty 	gxAcquireVector+1 			; and acquisition vector
.ad1c	8e e3 06	stx $06e3			stx 	gxAcquireVector
.ad1f	20 ae af	jsr $afae			jsr 	gxOpenBitmap 				; open the bitmap.
.ad22	ad e6 06	lda $06e6			lda 	gxUseMode 					; scale bits
.ad25	4a		lsr a				lsr 	a
.ad26	4a		lsr a				lsr 	a
.ad27	4a		lsr a				lsr 	a
.ad28	29 07		and #$07			and		#7
.ad2a	1a		inc a				inc 	a
.ad2b	8d e5 06	sta $06e5			sta 	gxScale
.ad2e	64 38		stz $38				stz 	gxzTemp1					; start first line
.ad30					_GXGELoop:
.ad30	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ad32	2c e6 06	bit $06e6			bit 	gxUseMode 					; check for flip.
.ad35	10 06		bpl $ad3d			bpl		_GXNoVFlip
.ad37	ad e2 06	lda $06e2			lda 	gxMask
.ad3a	38		sec				sec
.ad3b	e5 38		sbc $38				sbc 	gxzTemp1
.ad3d					_GXNoVFlip:
.ad3d	aa		tax				tax 								; get the Xth line.
.ad3e	20 7e ad	jsr $ad7e			jsr 	_GXCallAcquire 				; get that data.
.ad41	ad e5 06	lda $06e5			lda 	gxScale 					; do scale identical copies of that line.
.ad44	85 39		sta $39				sta 	gxzTemp1+1
.ad46					_GXGELoop2:
.ad46	ad 3e 06	lda $063e			lda 	gxY0 						; off screen
.ad49	cd 48 06	cmp $0648			cmp 	gxHeight
.ad4c	b0 10		bcs $ad5e			bcs 	_GXDGEExit
.ad4e	20 81 ad	jsr $ad81			jsr 	GXRenderOneLine 			; render line
.ad51	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ad53	d0 f1		bne $ad46			bne 	_GXGELoop2
.ad55	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.ad57	a5 38		lda $38				lda 	gxzTemp1
.ad59	cd e1 06	cmp $06e1			cmp 	gxSize
.ad5c	d0 d2		bne $ad30			bne 	_GXGELoop
.ad5e					_GXDGEExit:
.ad5e	68		pla				pla 								; restore Y for next time
.ad5f	8d 3e 06	sta $063e			sta 	gxY0
.ad62	ae e5 06	ldx $06e5			ldx 	gxScale 					; get scale (1-8)
.ad65					_GXShiftLeft:
.ad65	18		clc				clc
.ad66	ad e1 06	lda $06e1			lda 	gxSize
.ad69	6d 3c 06	adc $063c			adc 	gxX0
.ad6c	8d 3c 06	sta $063c			sta 	gxX0
.ad6f	90 03		bcc $ad74			bcc 	_GXSLNoCarry
.ad71	ee 3d 06	inc $063d			inc 	gxX0+1
.ad74					_GXSLNoCarry:
.ad74	ca		dex				dex
.ad75	d0 ee		bne $ad65			bne 	_GXShiftLeft
.ad77	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap
.ad7a	18		clc				clc
.ad7b	60		rts				rts
.ad7c					_GXSLFail:
.ad7c	38		sec				sec
.ad7d	60		rts				rts
.ad7e					_GXCallAcquire:
.ad7e	6c e3 06	jmp ($06e3)			jmp 	(gxAcquireVector)
.ad81					GXRenderOneLine:
.ad81	20 be af	jsr $afbe			jsr 	GXPositionCalc 				; calculate position/offset.
.ad84	ac 4e 06	ldy $064e			ldy 	gsOffset 					; Y contains position.
.ad87	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.ad89					_GXROLLoop1:
.ad89	ad e5 06	lda $06e5			lda 	gxScale 					; set to do 'scale' times
.ad8c	85 3b		sta $3b				sta 	gxzTemp2+1
.ad8e					_GXROLLoop2:
.ad8e	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.ad90	2c 49 06	bit $0649			bit 	gxMode 						; check H Flip
.ad93	50 06		bvc $ad9b			bvc 	_GXNoHFlip
.ad95	ad e2 06	lda $06e2			lda 	gxMask
.ad98	38		sec				sec
.ad99	e5 3a		sbc $3a				sbc 	gxzTemp2
.ad9b					_GXNoHFlip:
.ad9b	aa		tax				tax 								; read from the pixel buffer
.ad9c	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.ad9f	d0 07		bne $ada8			bne 	_GXDraw 					; draw if non zero
.ada1	ad e6 06	lda $06e6			lda 	gxUseMode 					; check to see if solid background
.ada4	29 04		and #$04			and 	#4
.ada6	f0 0a		beq $adb2			beq 	_GXZeroPixel
.ada8					_GXDraw:
.ada8	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.adaa	2d 4c 06	and $064c			and 	gxANDValue
.adad	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.adb0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.adb2					_GXZeroPixel:
.adb2	c8		iny				iny 								; advance pointer
.adb3	d0 05		bne $adba			bne 	_GXNoShift
.adb5	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.adb7	20 fc ac	jsr $acfc			jsr 	GXDLTCheckWrap				; check for new page.
.adba					_GXNoShift:
.adba	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.adbc	d0 d0		bne $ad8e			bne 	_GXROLLoop2
.adbe	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.adc0	a5 3a		lda $3a				lda 	gxzTemp2
.adc2	cd e1 06	cmp $06e1			cmp 	gxSize
.adc5	d0 c2		bne $ad89			bne 	_GXROLLoop1
.adc7	ee 3e 06	inc $063e			inc 	gxY0
.adca	60		rts				rts
.06e1					gxSize:
>06e1							.fill 	1
.06e2					gxMask:
>06e2							.fill 	1
.06e3					gxAcquireVector:
>06e3							.fill 	2
.06e5					gxScale:
>06e5							.fill 	1
.06e6					gxUseMode:
>06e6							.fill 	1
.adcb					GXFontHandler:
.adcb	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.adcd	4d 49 06	eor $0649			eor 	gxMode
.add0	8d e6 06	sta $06e6			sta 	gxUseMode
.add3	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.add5	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.add7	26 37		rol $37				rol	 	gxzTemp0+1
.add9	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.addb	26 37		rol $37				rol	 	gxzTemp0+1
.addd	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.addf	26 37		rol $37				rol	 	gxzTemp0+1
.ade1	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ade3	09 c0		ora #$c0			ora 	#$C0
.ade5	85 37		sta $37				sta 	gxzTemp0+1
.ade7	a9 08		lda #$08			lda 	#8 							; size 8x8
.ade9	a2 f1		ldx #$f1			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.adeb	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.aded	20 09 ad	jsr $ad09			jsr 	GXDrawGraphicElement
.adf0	60		rts				rts
.adf1					GXGetGraphicDataFont:
.adf1	8a		txa				txa 								; X->Y
.adf2	a8		tay				tay
.adf3	a6 01		ldx $01				ldx 	1 							; preserve old value
.adf5	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.adf7	85 01		sta $01				sta 	1
.adf9	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.adfb	86 01		stx $01				stx 	1 							; put old value back.
.adfd	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.adff					_GXExpand:
.adff	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ae02	0a		asl a				asl 	a 							; shift bit 7 into C
.ae03	90 08		bcc $ae0d			bcc 	_GXNoPixel
.ae05	48		pha				pha 								; if set, set pixel buffer to current colour.
.ae06	ad 4a 06	lda $064a			lda 	gxColour
.ae09	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.ae0c	68		pla				pla
.ae0d					_GXNoPixel:
.ae0d	e8		inx				inx 								; do the whole byte.
.ae0e	e0 08		cpx #$08			cpx 	#8
.ae10	d0 ed		bne $adff			bne 	_GXExpand
.ae12	60		rts				rts
.ae13					GXSpriteHandler:
.ae13	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ae15	4d 49 06	eor $0649			eor 	gxMode
.ae18	8d e6 06	sta $06e6			sta 	gxUseMode
.ae1b	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ae1d	da		phx				phx
.ae1e	20 ae af	jsr $afae			jsr 	GXOpenBitmap 				; can access sprite information
.ae21	68		pla				pla
.ae22	20 8f b0	jsr $b08f			jsr 	GXFindSprite 				; get the sprite address
.ae25	08		php				php
.ae26	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap
.ae29	28		plp				plp
.ae2a	b0 0a		bcs $ae36			bcs		_GXSHExit 					; exit if find failed.
.ae2c	ad e7 06	lda $06e7			lda 	GXSizePixels 				; return size
.ae2f	a2 37		ldx #$37			ldx 	#GXSpriteAcquire & $FF
.ae31	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ae33	20 09 ad	jsr $ad09			jsr 	GXDrawGraphicElement
.ae36					_GXSHExit:
.ae36	60		rts				rts
.ae37					GXSpriteAcquire:
.ae37	ad 47 06	lda $0647			lda 	GXSpritePage				; point to base page
.ae3a	85 0b		sta $0b				sta 	GXEditSlot
.ae3c	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.ae3e	a9 00		lda #$00			lda 	#0
.ae40	ae e8 06	ldx $06e8			ldx 	GXSizeBits
.ae43					_GXTimesRowNumber:
.ae43	18		clc				clc
.ae44	65 36		adc $36				adc 	zTemp0
.ae46	ca		dex				dex
.ae47	10 fa		bpl $ae43			bpl 	_GXTimesRowNumber
.ae49	64 37		stz $37				stz 	gxzTemp0+1
.ae4b	0a		asl a				asl 	a 							; row x 2,4,6,8
.ae4c	26 37		rol $37				rol 	gxzTemp0+1
.ae4e	0a		asl a				asl 	a 							; row x 4,8,12,16
.ae4f	26 37		rol $37				rol 	gxzTemp0+1
.ae51	0a		asl a				asl 	a 							; row x 8,16,24,32
.ae52	26 37		rol $37				rol 	gxzTemp0+1
.ae54	85 36		sta $36				sta 	gxzTemp0
.ae56	18		clc				clc 								; add base address.
.ae57	a5 36		lda $36				lda 	gxzTemp0
.ae59	6d ea 06	adc $06ea			adc 	GXSpriteOffset
.ae5c	85 36		sta $36				sta 	gxzTemp0
.ae5e	a5 37		lda $37				lda 	gxzTemp0+1
.ae60	6d eb 06	adc $06eb			adc 	GXSpriteOffset+1
.ae63					_GXSAFindPage:
.ae63	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ae65	90 06		bcc $ae6d			bcc 	_GXSAFoundPage
.ae67	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ae69	e6 0b		inc $0b				inc 	GXEditSlot
.ae6b	80 f6		bra $ae63			bra 	_GXSAFindPage
.ae6d					_GXSAFoundPage:
.ae6d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ae6f	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ae71	a0 00		ldy #$00			ldy 	#0
.ae73					_GXSACopyLoop:
.ae73	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ae75	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.ae78	c8		iny				iny
.ae79	cc e7 06	cpy $06e7			cpy 	GXSizePixels
.ae7c	d0 f5		bne $ae73			bne 	_GXSACopyLoop
.ae7e	60		rts				rts
.ae7f					GXSelect:
.ae7f	ad 44 06	lda $0644			lda 	gxSpritesOn
.ae82	f0 22		beq $aea6			beq 	_GXSFail
.ae84	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ae86	c9 40		cmp #$40			cmp 	#64
.ae88	b0 1c		bcs $aea6			bcs 	_GXSFail
.ae8a	8d 4f 06	sta $064f			sta 	GSCurrentSpriteID
.ae8d	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ae8f	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ae91	06 36		asl $36				asl 	gxzTemp0
.ae93	06 36		asl $36				asl 	gxzTemp0
.ae95	06 36		asl $36				asl 	gxzTemp0
.ae97	2a		rol a				rol 	a
.ae98	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ae9a	8d 51 06	sta $0651			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ae9d	85 37		sta $37				sta 	gxzTemp0+1
.ae9f	a5 36		lda $36				lda 	gxzTemp0
.aea1	8d 50 06	sta $0650			sta 	GSCurrentSpriteAddr
.aea4	18		clc				clc
.aea5	60		rts				rts
.aea6					_GXSFail:
.aea6	38		sec				sec
.aea7	60		rts				rts
.aea8					GXSelectImage:
.aea8	ad 44 06	lda $0644			lda 	gxSpritesOn
.aeab	f0 74		beq $af21			beq 	_GXSIFail
.aead	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.aeb0	f0 6f		beq $af21			beq 	_GXSIFail 					; (checking the MSB)
.aeb2	64 01		stz $01				stz 	1
.aeb4	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.aeb6	d0 6b		bne $af23			bne 	_GXSIHide
.aeb8	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.aeba	48		pha				pha
.aebb	20 ae af	jsr $afae			jsr 	GXOpenBitmap
.aebe	68		pla				pla
.aebf	20 8f b0	jsr $b08f			jsr 	GXFindSprite
.aec2	b0 5a		bcs $af1e			bcs 	_GXSICloseFail 				; no image
.aec4	a0 01		ldy #$01			ldy 	#1
.aec6	ad 50 06	lda $0650			lda 	GSCurrentSpriteAddr
.aec9	85 36		sta $36				sta 	gxzTemp0
.aecb	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1
.aece	85 37		sta $37				sta 	gxzTemp0+1
.aed0	ad ea 06	lda $06ea			lda 	GXSpriteOffset
.aed3	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.aed5	18		clc				clc
.aed6	ad eb 06	lda $06eb			lda 	GXSpriteOffset+1
.aed9	6d 52 06	adc $0652			adc 	GXSpriteOffsetBase
.aedc	c8		iny				iny
.aedd	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.aedf	ad 53 06	lda $0653			lda 	GXSpriteOffsetBase+1
.aee2	69 00		adc #$00			adc 	#0
.aee4	c8		iny				iny
.aee5	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.aee7	ad e8 06	lda $06e8			lda 	GXSizeBits 					; get raw size
.aeea	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.aeec	2a		rol a				rol 	a 							; x 2
.aeed	0a		asl a				asl 	a 							; x 4
.aeee	0a		asl a				asl 	a 							; x 8
.aeef	0a		asl a				asl 	a 							; x 16
.aef0	0d e9 06	ora $06e9			ora 	GXSpriteLUT 				; Or with LUT
.aef3	0a		asl a				asl 	a 							; 1 shift
.aef4	09 01		ora #$01			ora 	#1 							; enable sprite.
.aef6	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.aef8	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap
.aefb	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.aefe	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.af01	29 3f		and #$3f			and 	#$3F
.af03	9d 94 06	sta $0694,x			sta 	GXSpriteHigh,x
.af06	ad e8 06	lda $06e8			lda 	GXSizeBits 					; get bit size
.af09	6a		ror a				ror 	a 							; shift into bits 6/7
.af0a	6a		ror a				ror 	a
.af0b	6a		ror a				ror 	a
.af0c	29 c0		and #$c0			and 	#$C0
.af0e	1d 94 06	ora $0694,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.af11	9d 94 06	sta $0694,x			sta 	GXSpriteHigh,x
.af14	bd 54 06	lda $0654,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.af17	29 7f		and #$7f			and 	#$7F
.af19	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.af1c	18		clc				clc
.af1d	60		rts				rts
.af1e					_GXSICloseFail:
.af1e	20 b6 af	jsr $afb6			jsr 	GXCloseBitmap
.af21					_GXSIFail:
.af21	38		sec				sec
.af22	60		rts				rts
.af23					_GXSIHide:
.af23	ad 50 06	lda $0650			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.af26	85 36		sta $36				sta 	gxzTemp0
.af28	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1
.af2b	85 37		sta $37				sta 	gxzTemp0+1
.af2d	a9 00		lda #$00			lda 	#0
.af2f	92 36		sta ($36)			sta 	(gxzTemp0)
.af31	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; get sprite ID
.af34	bd 54 06	lda $0654,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.af37	09 80		ora #$80			ora 	#$80
.af39	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.af3c	18		clc				clc
.af3d	60		rts				rts
.af3e					GXMoveSprite:
.af3e	ad 44 06	lda $0644			lda 	gxSpritesOn
.af41	f0 65		beq $afa8			beq 	_GXSIFail
.af43	ad 51 06	lda $0651			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.af46	f0 60		beq $afa8			beq 	_GXSIFail
.af48	85 37		sta $37				sta 	gxzTemp0+1
.af4a	a0 04		ldy #$04			ldy 	#4
.af4c	ad 50 06	lda $0650			lda 	GSCurrentSpriteAddr
.af4f	85 36		sta $36				sta 	gxzTemp0
.af51	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.af54	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x
.af57	2a		rol a				rol 	a	 						; into bits 0,1.
.af58	2a		rol a				rol 	a
.af59	2a		rol a				rol 	a
.af5a	29 03		and #$03			and 	#3
.af5c	aa		tax				tax
.af5d	bd aa af	lda $afaa,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.af60	48		pha				pha
.af61	18		clc				clc
.af62	6d 3c 06	adc $063c			adc 	gxX0						; copy position.
.af65	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af67	c8		iny				iny
.af68	ad 3d 06	lda $063d			lda 	gxX0+1
.af6b	69 00		adc #$00			adc 	#0
.af6d	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af6f	c8		iny				iny
.af70	68		pla				pla
.af71	18		clc				clc
.af72	6d 3e 06	adc $063e			adc 	gxY0
.af75	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af77	a9 00		lda #$00			lda 	#0
.af79	69 00		adc #$00			adc 	#0
.af7b	c8		iny				iny
.af7c	91 36		sta ($36),y			sta 	(gxzTemp0),y
.af7e	4e 3d 06	lsr $063d			lsr 	gxX0+1 						; divide X by 4
.af81	6e 3c 06	ror $063c			ror 	gxX0
.af84	4e 3c 06	lsr $063c			lsr 	gxX0
.af87	4e 3e 06	lsr $063e			lsr 	gxY0 						; divide Y by 4
.af8a	4e 3e 06	lsr $063e			lsr 	gxY0
.af8d	ae 4f 06	ldx $064f			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.af90	bd 54 06	lda $0654,x			lda 	GXSpriteLow,x
.af93	29 80		and #$80			and 	#$80
.af95	0d 3c 06	ora $063c			ora 	gxX0
.af98	9d 54 06	sta $0654,x			sta 	GXSpriteLow,x
.af9b	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x
.af9e	29 c0		and #$c0			and 	#$C0
.afa0	0d 3e 06	ora $063e			ora 	gxY0
.afa3	9d 94 06	sta $0694,x			sta 	GXSpriteHigh,x
.afa6	18		clc				clc
.afa7	60		rts				rts
.afa8					_GXSIFail:
.afa8	38		sec				sec
.afa9	60		rts				rts
.afaa					_GXMSOffset:
>afaa	1c						.byte 	32-8/2
>afab	18						.byte 	32-16/2
>afac	14						.byte 	32-24/2
>afad	10						.byte 	32-32/2
.afae					GXOpenBitmap:
.afae	78		sei				sei 								; no interrupts here
.afaf	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.afb1	8d 4d 06	sta $064d			sta 	gxOriginalLUTValue
.afb4	58		cli				cli
.afb5	60		rts				rts
.afb6					GXCloseBitmap:
.afb6	78		sei				sei
.afb7	ad 4d 06	lda $064d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.afba	85 0b		sta $0b				sta 	GXEditSlot
.afbc	58		cli				cli
.afbd	60		rts				rts
.afbe					GXPositionCalc:
.afbe	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.afc0	48		pha				pha
.afc1	ad 3e 06	lda $063e			lda 	GXY0 						; gxzScreen = Y0
.afc4	85 3c		sta $3c				sta 	gxzScreen
.afc6	64 3d		stz $3d				stz 	gxzScreen+1
.afc8	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.afca	26 3d		rol $3d				rol 	gxzScreen+1
.afcc	06 3c		asl $3c				asl 	gxzScreen
.afce	26 3d		rol $3d				rol 	gxzScreen+1
.afd0	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.afd1	65 3c		adc $3c				adc 	gxzScreen
.afd3	85 3c		sta $3c				sta 	gxzScreen
.afd5	90 02		bcc $afd9			bcc 	_GXPCNoCarry
.afd7	e6 3d		inc $3d				inc 	gxzScreen+1
.afd9					_GXPCNoCarry:
.afd9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.afdb	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.afdd	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.afdf	85 36		sta $36				sta 	gxzTemp0
.afe1	64 3d		stz $3d				stz 	gxzScreen+1
.afe3	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.afe5					_GXPCMultiply32:
.afe5	06 3c		asl $3c				asl 	gxzScreen
.afe7	26 3d		rol $3d				rol 	gxzScreen+1
.afe9	3a		dec a				dec 	a
.afea	d0 f9		bne $afe5			bne 	_GXPCMultiply32
.afec	18		clc				clc
.afed	ad 3c 06	lda $063c			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.aff0	65 3c		adc $3c				adc 	gxzScreen
.aff2	8d 4e 06	sta $064e			sta 	gsOffset
.aff5	ad 3d 06	lda $063d			lda 	GXX0+1
.aff8	65 3d		adc $3d				adc 	gxzScreen+1
.affa	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.affc	90 04		bcc $b002			bcc 	_GXPCNoOverflow
.affe	29 1f		and #$1f			and 	#$1F 						; fix it up
.b000	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b002					_GXPCNoOverflow:
.b002	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b004	85 3d		sta $3d				sta 	gxzScreen+1
.b006	64 3c		stz $3c				stz 	gxzScreen
.b008	18		clc				clc
.b009	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b00b	6d 46 06	adc $0646			adc 	gxBasePage 					; by adding the base page
.b00e	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b010	68		pla				pla
.b011	85 36		sta $36				sta 	gxzTemp0
.b013	60		rts				rts
.b014					GXMovePositionDown:
.b014	18		clc				clc 								; add 320 to offset/temp+1
.b015	ad 4e 06	lda $064e			lda 	gsOffset
.b018	69 40		adc #$40			adc 	#64
.b01a	8d 4e 06	sta $064e			sta 	gsOffset
.b01d	a5 3d		lda $3d				lda 	gxzScreen+1
.b01f	69 01		adc #$01			adc 	#1
.b021	85 3d		sta $3d				sta 	gxzScreen+1
.b023	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b025	90 07		bcc $b02e			bcc 	_GXMPDExit
.b027	38		sec				sec  								; next page
.b028	e9 20		sbc #$20			sbc 	#$20
.b02a	85 3d		sta $3d				sta 	gxzScreen+1
.b02c	e6 0b		inc $0b				inc 	GXEditSlot
.b02e					_GXMPDExit:
.b02e	60		rts				rts
.b02f					GXCollide:
.b02f	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b031	aa		tax				tax
.b032	05 37		ora $37				ora 	gxzTemp0+1
.b034	29 c0		and #$c0			and 	#$C0
.b036	38		sec				sec
.b037	d0 53		bne $b08c			bne 	_GXCollideFail 				; if either >= 64, fail.
.b039	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b03b	b9 54 06	lda $0654,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b03e	1d 54 06	ora $0654,x			ora 	GXSpriteLow,x
.b041	30 48		bmi $b08b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b043	18		clc				clc 								; need to calculate sum of sizes.
.b044	b9 94 06	lda $0694,y			lda 	GXSpriteHigh,y
.b047	7d 94 06	adc $0694,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b04a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b04c	6a		ror a				ror 	a 							; 5/6/7
.b04d	4a		lsr a				lsr 	a 							; 4/5/6
.b04e	4a		lsr a				lsr 	a 							; 3/4/5
.b04f	4a		lsr a				lsr 	a 							; 2/3/4
.b050	18		clc				clc
.b051	69 08		adc #$08			adc 	#$08
.b053	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b054	4a		lsr a				lsr 	a
.b055	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b057	b9 94 06	lda $0694,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b05a	29 3f		and #$3f			and 	#$3F
.b05c	85 39		sta $39				sta 	gxzTemp1+1
.b05e	38		sec				sec
.b05f	bd 94 06	lda $0694,x			lda 	GXSpriteHigh,x
.b062	29 3f		and #$3f			and 	#$3F
.b064	e5 39		sbc $39				sbc 	gxzTemp1+1
.b066	b0 03		bcs $b06b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b068	49 ff		eor #$ff			eor 	#$FF
.b06a	1a		inc a				inc 	a
.b06b					_GXCAbs1:
.b06b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b06d	b0 1c		bcs $b08b			bcs 	_GXOkayFail
.b06f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b071	38		sec				sec 								; calculate |x1-x0|
.b072	b9 54 06	lda $0654,y			lda 	GXSpriteLow,y
.b075	fd 54 06	sbc $0654,x			sbc 	GXSpriteLow,x
.b078	b0 03		bcs $b07d			bcs 	_GXCAbs2
.b07a	49 ff		eor #$ff			eor 	#$FF
.b07c	1a		inc a				inc 	a
.b07d					_GXCAbs2:
.b07d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b07f	b0 0a		bcs $b08b			bcs 	_GXOkayFail
.b081	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b083	90 02		bcc $b087			bcc 	_GXCHaveLowest
.b085	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b087					_GXCHaveLowest:
.b087	0a		asl a				asl 	a 							; scale to allow for >> 2
.b088	0a		asl a				asl 	a
.b089	18		clc				clc
.b08a	60		rts				rts
.b08b					_GXOkayFail:
.b08b	18		clc				clc
.b08c					_GXCollideFail:
.b08c	a9 ff		lda #$ff			lda 	#$FF
.b08e	60		rts				rts
.b08f					GXFindSprite:
.b08f	aa		tax				tax
.b090	ad 47 06	lda $0647			lda 	GXSpritePage 				; access the base page of the sprite
.b093	85 0b		sta $0b				sta 	GXEditSlot
.b095	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b098	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b09b	f0 33		beq $b0d0			beq 	_GXFSFail
.b09d	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b0a0	8d eb 06	sta $06eb			sta 	GXSpriteOffset+1
.b0a3	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b0a6	48		pha				pha 								; save twice
.b0a7	48		pha				pha
.b0a8	29 03		and #$03			and 	#3 							; get sprite size
.b0aa	8d e8 06	sta $06e8			sta 	GXSizeBits 					; save raw (0-3)
.b0ad	aa		tax				tax
.b0ae	bd d2 b0	lda $b0d2,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b0b1	8d e7 06	sta $06e7			sta 	GXSizePixels 					; save (8/16/24/32)
.b0b4	68		pla				pla 								; get LUT
.b0b5	4a		lsr a				lsr		a
.b0b6	4a		lsr a				lsr		a
.b0b7	29 03		and #$03			and 	#3
.b0b9	8d e9 06	sta $06e9			sta 	GXSpriteLUT
.b0bc	68		pla				pla 								; address, neeeds to be x 4
.b0bd	29 f0		and #$f0			and 	#$F0
.b0bf	8d ea 06	sta $06ea			sta 	GXSpriteOffset
.b0c2	0e ea 06	asl $06ea			asl 	GXSpriteOffset
.b0c5	2e eb 06	rol $06eb			rol 	GXSpriteOffset+1
.b0c8	0e ea 06	asl $06ea			asl 	GXSpriteOffset
.b0cb	2e eb 06	rol $06eb			rol 	GXSpriteOffset+1
.b0ce	18		clc				clc
.b0cf	60		rts				rts
.b0d0					_GXFSFail:
.b0d0	38		sec				sec
.b0d1	60		rts				rts
.b0d2					_GXFXSSTTable:
>b0d2	08 10 18 20					.byte 	8,16,24,32
.06e7					GXSizePixels:
>06e7							.fill 	1
.06e8					GXSizeBits:
>06e8							.fill 	1
.06e9					GXSpriteLUT:
>06e9							.fill 	1
.06ea					GXSpriteOffset:
>06ea							.fill 	2
.b0d6					GXSortXY:
.b0d6	20 f4 b0	jsr $b0f4			jsr 	GXSortY 					; will be sorted on Y now
.b0d9	ad 3c 06	lda $063c			lda 	gxX0 						; compare X0 v X1
.b0dc	cd 40 06	cmp $0640			cmp 	gxX1
.b0df	ad 3d 06	lda $063d			lda 	gXX0+1
.b0e2	ed 41 06	sbc $0641			sbc 	gXX1+1
.b0e5	90 0c		bcc $b0f3			bcc 	_GXSXYExit 					; X0 < X1 exit
.b0e7	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b0e9	a0 04		ldy #$04			ldy 	#4
.b0eb	20 08 b1	jsr $b108			jsr 	GXSwapXY
.b0ee	e8		inx				inx
.b0ef	c8		iny				iny
.b0f0	20 08 b1	jsr $b108			jsr 	GXSwapXY
.b0f3					_GXSXYExit:
.b0f3	60		rts				rts
.b0f4					GXSortY:
.b0f4	ad 3e 06	lda $063e			lda 	gxY0 						; if Y0 >= Y1
.b0f7	cd 42 06	cmp $0642			cmp 	gxY1
.b0fa	90 0b		bcc $b107			bcc 	_GXSYSorted
.b0fc	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b0fe	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b100					_GXSwap1:
.b100	20 08 b1	jsr $b108			jsr 	GXSwapXY
.b103	88		dey				dey
.b104	ca		dex				dex
.b105	10 f9		bpl $b100			bpl 	_GXSwap1
.b107					_GXSYSorted:
.b107	60		rts				rts
.b108					GXSwapXY:
.b108	bd 3c 06	lda $063c,x			lda 	gxX0,x
.b10b	48		pha				pha
.b10c	b9 3c 06	lda $063c,y			lda 	gxX0,y
.b10f	9d 3c 06	sta $063c,x			sta 	gxX0,x
.b112	68		pla				pla
.b113	99 3c 06	sta $063c,y			sta 	gxX0,y
.b116	60		rts				rts

;******  Return to file: ./modules/zzzend.asm


;******  Processing file: ./modules/../../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b117					KeywordSet0:
>b117	00 65					.text	0,$65,""               ; $80 !0:EOF
>b119	00 58					.text	0,$58,""               ; $81 !1:SH1
>b11b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b11d	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b123	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b12b	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b131	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b138	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b140	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b147	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b14e	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b154	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b15a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b162	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b169	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b170	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b177	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b17f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b185	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b18b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b192	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b198	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b19e	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b1a6	28
>b1a7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b1af	28
>b1b0	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b1b6	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b1bc	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b1c2	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b1c9	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b1d1	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b1d7	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b1dd	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b1e2	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b1e6	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b1ec	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b1f4	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b1fb	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b202	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b20a	43
>b20b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b211	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b217	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b21e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b224	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b228	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b22e	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b236	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b23d	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b242	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b249	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b28f	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b294	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b29a	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b2a1	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b2a6	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b2aa	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b2b2	45
>b2b3	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b2bb	45
>b2bc	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b2c2	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b2c9	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b2cf	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b2d5	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b2da	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b2e2	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b2e9	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b2f1	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>b2f7	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>b2fb	ff					.text	$FF
.b2fc					KeywordSet1:
>b2fc	00 65					.text	0,$65,""               ; $80 !0:EOF
>b2fe	00 58					.text	0,$58,""               ; $81 !1:SH1
>b300	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b302	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>b30a	4c 45
>b30c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>b314	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>b31c	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>b321	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>b327	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>b32c	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>b334	45
>b335	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>b33a	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>b342	53
>b343	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>b349	ff					.text	$FF
.b34a					KeywordSet2:
>b34a	00 65					.text	0,$65,""               ; $80 !0:EOF
>b34c	00 58					.text	0,$58,""               ; $81 !1:SH1
>b34e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b350	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>b355	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>b35a	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>b35f	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>b364	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>b369	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>b36e	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>b373	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>b378	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>b37d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>b382	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>b387	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>b38c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>b391	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>b396	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>b39b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>b3a0	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>b3a5	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>b3aa	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>b3af	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>b3b4	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>b3b9	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>b3be	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>b3c3	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>b3c8	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>b3cd	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>b3d2	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>b3d7	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>b3dc	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>b3e1	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>b3e6	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>b3eb	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>b3f0	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>b3f5	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>b3fa	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>b3ff	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>b404	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>b409	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>b40e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>b413	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>b418	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>b41d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>b422	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>b427	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>b42c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>b431	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>b436	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>b43b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>b440	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>b445	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>b44a	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>b44f	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>b454	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>b459	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>b45e	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>b463	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>b468	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>b46d	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>b472	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>b477	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>b47c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>b481	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>b486	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>b48b	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>b490	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>b495	ff					.text	$FF
.b496					ListConvertLine:
.b496	9c 9d 04	stz $049d			stz 	tbOffset
.b499	9c aa 04	stz $04aa			stz 	tokenBuffer
.b49c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b49e	b1 30		lda ($30),y			lda 	(codePtr),y
.b4a0	aa		tax				tax
.b4a1	88		dey				dey
.b4a2	b1 30		lda ($30),y			lda 	(codePtr),y
.b4a4	20 3f 92	jsr $923f			jsr 	ConvertInt16
.b4a7	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b4a9	86 37		stx $37				stx 	zTemp0+1
.b4ab	a0 00		ldy #$00			ldy 	#0
.b4ad					_LCCopyNumber:
.b4ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4af	20 db b5	jsr $b5db			jsr 	LCLWrite
.b4b2	c8		iny				iny
.b4b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4b5	d0 f6		bne $b4ad			bne 	_LCCopyNumber
.b4b7	20 d2 8c	jsr $8cd2			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b4ba	48		pha				pha 								; save on stack
.b4bb	10 0c		bpl $b4c9			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b4bd	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b4be	6d a6 04	adc $04a6			adc 	listIndent
.b4c1	8d a6 04	sta $04a6			sta 	listIndent
.b4c4	10 03		bpl $b4c9			bpl 	_LCNoAdjust
.b4c6	9c a6 04	stz $04a6			stz 	listIndent
.b4c9					_LCNoAdjust:
.b4c9	18		clc				clc		 							; work out actual indent.
.b4ca	ad a6 04	lda $04a6			lda 	listIndent
.b4cd	0a		asl a				asl 	a
.b4ce	69 06		adc #$06			adc 	#6
.b4d0	85 36		sta $36				sta 	zTemp0
.b4d2					_LCPadOut:
.b4d2	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b4d4	20 db b5	jsr $b5db			jsr 	LCLWrite
.b4d7	ad 9d 04	lda $049d			lda 	tbOffset
.b4da	c5 36		cmp $36				cmp 	zTemp0
.b4dc	d0 f4		bne $b4d2			bne 	_LCPadOut
.b4de	a0 03		ldy #$03			ldy 	#3 							; start position.
.b4e0					_LCMainLoop:
.b4e0	b1 30		lda ($30),y			lda 	(codePtr),y
.b4e2	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b4e4	f0 17		beq $b4fd			beq 	_LCExit
.b4e6	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b4e8	90 1e		bcc $b508			bcc 	_LCDoubles
.b4ea	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b4ec	90 2a		bcc $b518			bcc 	_LCShiftPunc
.b4ee	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b4f0	90 35		bcc $b527			bcc 	_LCPunctuation
.b4f2	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b4f4	90 3e		bcc $b534			bcc 	_LCIdentifiers
.b4f6	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b4f8	90 5a		bcc $b554			bcc 	_LCTokens
.b4fa	4c af b5	jmp $b5af			jmp 	_LCData 					; 254-5 are data objects
.b4fd					_LCExit:
.b4fd	68		pla				pla 								; get old indent adjust
.b4fe	30 07		bmi $b507			bmi 	_LCExit2
.b500	18		clc				clc 								; add to indent if +ve
.b501	6d a6 04	adc $04a6			adc 	listIndent
.b504	8d a6 04	sta $04a6			sta 	listIndent
.b507					_LCExit2:
.b507	60		rts				rts
.b508					_LCDoubles:
.b508	48		pha				pha
.b509	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b50a	29 02		and #$02			and 	#2
.b50c	09 3c		ora #$3c			ora 	#60 						; make < >
.b50e	20 db b5	jsr $b5db			jsr 	LCLWrite
.b511	68		pla				pla 								; restore, do lower bit
.b512	29 03		and #$03			and 	#3
.b514	09 3c		ora #$3c			ora 	#60
.b516	80 0f		bra $b527			bra		_LCPunctuation 				; print, increment, loop
.b518					_LCShiftPunc:
.b518	aa		tax				tax 								; save in X
.b519	29 07		and #$07			and 	#7 							; lower 3 bits
.b51b	f0 02		beq $b51f			beq 	_LCNoAdd
.b51d	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b51f					_LCNoAdd:
.b51f	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b521	90 02		bcc $b525			bcc 	_LCNoAdd2
.b523	09 20		ora #$20			ora 	#32 						; adds $20
.b525					_LCNoAdd2:
.b525	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b527					_LCPunctuation:
.b527	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b529	d0 03		bne $b52e			bne 	_LCPContinue
.b52b	20 ea b5	jsr $b5ea			jsr 	LCDeleteLastSpace
.b52e					_LCPContinue:
.b52e	c8		iny				iny 								; consume character
.b52f	20 db b5	jsr $b5db			jsr 	LCLWrite 					; write it out.
.b532	80 ac		bra $b4e0			bra 	_LCMainLoop 				; go round again.
.b534					_LCIdentifiers:
.b534	18		clc				clc 								; convert to physical address
.b535	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b537	85 37		sta $37				sta 	zTemp0+1
.b539	c8		iny				iny
.b53a	b1 30		lda ($30),y			lda 	(codePtr),y
.b53c	85 36		sta $36				sta 	zTemp0
.b53e	c8		iny				iny
.b53f	5a		phy				phy 								; save position
.b540	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b542					_LCOutIdentifier:
.b542	c8		iny				iny
.b543	b1 36		lda ($36),y			lda 	(zTemp0),y
.b545	29 7f		and #$7f			and 	#$7F
.b547	20 29 b6	jsr $b629			jsr 	LCLLowerCase
.b54a	20 db b5	jsr $b5db			jsr 	LCLWrite
.b54d	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b54f	10 f1		bpl $b542			bpl 	_LCOutIdentifier
.b551	7a		ply				ply 								; restore position
.b552	80 8c		bra $b4e0			bra 	_LCMainLoop
.b554					_LCTokens:
.b554	aa		tax				tax 								; token in X
.b555	a9 4a		lda #$4a			lda 	#((KeywordSet2) & $FF)
.b557	85 36		sta $36				sta 	0+zTemp0
.b559	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.b55b	85 37		sta $37				sta 	1+zTemp0
.b55d	e0 82		cpx #$82			cpx 	#$82
.b55f	f0 16		beq $b577			beq 	_LCUseShift
.b561	a9 fc		lda #$fc			lda 	#((KeywordSet1) & $FF)
.b563	85 36		sta $36				sta 	0+zTemp0
.b565	a9 b2		lda #$b2			lda 	#((KeywordSet1) >> 8)
.b567	85 37		sta $37				sta 	1+zTemp0
.b569	e0 81		cpx #$81			cpx 	#$81
.b56b	f0 0a		beq $b577			beq 	_LCUseShift
.b56d	a9 17		lda #$17			lda 	#((KeywordSet0) & $FF)
.b56f	85 36		sta $36				sta 	0+zTemp0
.b571	a9 b1		lda #$b1			lda 	#((KeywordSet0) >> 8)
.b573	85 37		sta $37				sta 	1+zTemp0
.b575	80 01		bra $b578			bra 	_LCNoShift
.b577					_LCUseShift:
.b577	c8		iny				iny
.b578					_LCNoShift:
.b578	20 fe b5	jsr $b5fe			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b57b	b1 30		lda ($30),y			lda 	(codePtr),y
.b57d	aa		tax				tax 								; into X
.b57e					_LCFindText:
.b57e	ca		dex				dex
.b57f	10 0e		bpl $b58f			bpl 	_LCFoundText 				; found text.
.b581	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b583	1a		inc a				inc 	a 							; one extra for size
.b584	38		sec				sec 								; one extra for checksum
.b585	65 36		adc $36				adc 	zTemp0 						; go to next token
.b587	85 36		sta $36				sta 	zTemp0
.b589	90 f3		bcc $b57e			bcc 	_LCFindText
.b58b	e6 37		inc $37				inc 	zTemp0+1
.b58d	80 ef		bra $b57e			bra 	_LCFindText
.b58f					_LCFoundText:
.b58f	5a		phy				phy 								; save List position
.b590	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b592	aa		tax				tax
.b593	a0 02		ldy #$02			ldy 	#2
.b595					_LCCopyToken:
.b595	b1 36		lda ($36),y			lda 	(zTemp0),y
.b597	20 29 b6	jsr $b629			jsr 	LCLLowerCase
.b59a	20 db b5	jsr $b5db			jsr 	LCLWrite
.b59d	c8		iny				iny
.b59e	ca		dex				dex
.b59f	d0 f4		bne $b595			bne 	_LCCopyToken
.b5a1	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b5a3	f0 05		beq $b5aa			beq 	_LCNoSpace
.b5a5	a9 20		lda #$20			lda 	#' '
.b5a7	20 db b5	jsr $b5db			jsr 	LCLWrite
.b5aa					_LCNoSpace:
.b5aa	7a		ply				ply 								; restore position.
.b5ab	c8		iny				iny 								; consume token
.b5ac	4c e0 b4	jmp $b4e0			jmp 	_LCMainLoop 				; and go around again.
.b5af					_LCData:
.b5af	48		pha				pha 								; save type $FE/$FF
.b5b0	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b5b2	c9 fe		cmp #$fe			cmp 	#$FE
.b5b4	f0 02		beq $b5b8			beq 	_LCHaveOpener
.b5b6	a2 22		ldx #$22			ldx 	#'"'
.b5b8					_LCHaveOpener:
.b5b8	8a		txa				txa 								; output prefix (# or ")
.b5b9	20 db b5	jsr $b5db			jsr 	LCLWrite
.b5bc	c8		iny				iny 								; get count
.b5bd	b1 30		lda ($30),y			lda 	(codePtr),y
.b5bf	aa		tax				tax
.b5c0	c8		iny				iny 								; point at first character
.b5c1					_LCOutData:
.b5c1	b1 30		lda ($30),y			lda 	(codePtr),y
.b5c3	c9 00		cmp #$00			cmp 	#0
.b5c5	f0 03		beq $b5ca			beq 	_LCNoPrint
.b5c7	20 db b5	jsr $b5db			jsr 	LCLWrite
.b5ca					_LCNoPrint:
.b5ca	c8		iny				iny
.b5cb	ca		dex				dex
.b5cc	d0 f3		bne $b5c1			bne 	_LCOutData
.b5ce	68		pla				pla 								; closing " required ?
.b5cf	c9 ff		cmp #$ff			cmp 	#$FF
.b5d1	d0 05		bne $b5d8			bne 	_LCNoQuote
.b5d3	a9 22		lda #$22			lda 	#'"'
.b5d5	20 db b5	jsr $b5db			jsr 	LCLWrite
.b5d8					_LCNoQuote:
.b5d8	4c e0 b4	jmp $b4e0			jmp 	_LCMainLoop
.b5db					LCLWrite:
.b5db	da		phx				phx
.b5dc	ae 9d 04	ldx $049d			ldx 	tbOffset
.b5df	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.b5e2	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.b5e5	ee 9d 04	inc $049d			inc 	tbOffset
.b5e8	fa		plx				plx
.b5e9	60		rts				rts
.b5ea					LCDeleteLastSpace:
.b5ea	48		pha				pha
.b5eb	da		phx				phx
.b5ec	ae 9d 04	ldx $049d			ldx 	tbOffset
.b5ef	f0 0a		beq $b5fb			beq 	_LCDLSExit
.b5f1	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.b5f4	c9 20		cmp #$20			cmp 	#' '
.b5f6	d0 03		bne $b5fb			bne 	_LCDLSExit
.b5f8	ce 9d 04	dec $049d			dec 	tbOffset
.b5fb					_LCDLSExit:
.b5fb	fa		plx				plx
.b5fc	68		pla				pla
.b5fd	60		rts				rts
.b5fe					LCCheckSpaceRequired:
.b5fe	ae 9d 04	ldx $049d			ldx 	tbOffset
.b601	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.b604	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b606	f0 1b		beq $b623			beq 	_LCCSRSpace
.b608	c9 29		cmp #$29			cmp 	#')'
.b60a	f0 17		beq $b623			beq 	_LCCSRSpace
.b60c	c9 23		cmp #$23			cmp 	#'#'
.b60e	f0 13		beq $b623			beq 	_LCCSRSpace
.b610	20 29 b6	jsr $b629			jsr 	LCLLowerCase 				; saves a little effort
.b613	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b615	90 11		bcc $b628			bcc 	_LCCSRExit
.b617	c9 3a		cmp #$3a			cmp 	#"9"+1
.b619	90 08		bcc $b623			bcc 	_LCCSRSpace
.b61b	c9 61		cmp #$61			cmp 	#"a"
.b61d	90 09		bcc $b628			bcc 	_LCCSRExit
.b61f	c9 7b		cmp #$7b			cmp 	#"z"+1
.b621	b0 05		bcs $b628			bcs 	_LCCSRExit
.b623					_LCCSRSpace:
.b623	a9 20		lda #$20			lda 	#' '
.b625	20 db b5	jsr $b5db			jsr 	LCLWrite
.b628					_LCCSRExit:
.b628	60		rts				rts
.b629					LCLLowerCase:
.b629	c9 41		cmp #$41			cmp 	#"A"
.b62b	90 06		bcc $b633			bcc 	_LCLLCOut
.b62d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b62f	b0 02		bcs $b633			bcs 	_LCLLCOut
.b631	69 20		adc #$20			adc 	#$20
.b633					_LCLLCOut:
.b633	60		rts				rts
.b634					LCLUpperCase:
.b634	c9 61		cmp #$61			cmp 	#"a"
.b636	90 06		bcc $b63e			bcc 	_LCLUCOut
.b638	c9 7b		cmp #$7b			cmp 	#"z"+1
.b63a	b0 02		bcs $b63e			bcs 	_LCLUCOut
.b63c	e9 1f		sbc #$1f			sbc 	#$1F
.b63e					_LCLUCOut:
.b63e	60		rts				rts
.b63f					TokeniseSearchTable:
.b63f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b641	85 36		sta $36				sta 	zTemp0
.b643	a0 00		ldy #$00			ldy 	#0
.b645	a9 80		lda #$80			lda 	#$80 						; token #
.b647	85 38		sta $38				sta 	zTemp1
.b649					_TSTLoop:
.b649	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b64b	30 49		bmi $b696			bmi 	_TSTFail 					; -ve = end of table
.b64d	f0 2e		beq $b67d			beq 	_TSTNext 					; zero, check next it's a dummy
.b64f	c8		iny				iny 								; get the hash
.b650	b1 36		lda ($36),y			lda 	(zTemp0),y
.b652	88		dey				dey
.b653	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b656	d0 25		bne $b67d			bne 	_TSTNext
.b658	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b65b	38		sec				sec
.b65c	ed 80 04	sbc $0480			sbc 	identStart
.b65f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b661	d0 1a		bne $b67d			bne 	_TSTNext
.b663	5a		phy				phy 								; save Y , we might fail
.b664	c8		iny				iny 								; point to text
.b665	c8		iny				iny
.b666	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b669					_TSTCompareName:
.b669	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.b66c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b66e	d0 0c		bne $b67c			bne 	_TSTNextPullY 				; fail, pullY and do next
.b670	e8		inx				inx
.b671	c8		iny				iny
.b672	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b675	d0 f2		bne $b669			bne 	_TSTCompareName
.b677	7a		ply				ply 								; throw Y
.b678	a5 38		lda $38				lda 	zTemp1 						; get token #
.b67a	38		sec				sec 								; return with CS = passed.
.b67b	60		rts				rts
.b67c					_TSTNextPullY:
.b67c	7a		ply				ply 								; restore current, fall through.
.b67d					_TSTNext:
.b67d	e6 38		inc $38				inc 	zTemp1 						; token counter
.b67f	98		tya				tya
.b680	18		clc				clc
.b681	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b683	1a		inc a				inc 	a 							; +1
.b684	1a		inc a				inc 	a 							; +2
.b685	a8		tay				tay
.b686	10 c1		bpl $b649			bpl 	_TSTLoop 					; if Y < $80 loop back
.b688	98		tya				tya 								; add Y to zTemp0 and reset Y
.b689	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b68b	18		clc				clc  								; but have tables > 255 bytes
.b68c	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b68e	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b690	90 b7		bcc $b649			bcc 	_TSTLoop
.b692	e6 37		inc $37				inc 	zTemp0+1
.b694	80 b3		bra $b649			bra 	_TSTLoop
.b696					_TSTFail:
.b696	18		clc				clc
.b697	60		rts				rts
.b698					TokeniseLine:
.b698	20 20 b8	jsr $b820			jsr 	FixLineBufferCase 			; fix line case
.b69b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b69d	8d a7 04	sta $04a7			sta 	tokenOffset
.b6a0	9c a8 04	stz $04a8			stz 	tokenLineNumber
.b6a3	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.b6a6	a2 ff		ldx #$ff			ldx 	#$FF
.b6a8					_TKFindFirst:
.b6a8	e8		inx				inx
.b6a9	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b6ac	f0 79		beq $b727			beq 	_TKExit
.b6ae	c9 20		cmp #$20			cmp 	#' '
.b6b0	90 f6		bcc $b6a8			bcc 	_TKFindFirst
.b6b2	c9 30		cmp #$30			cmp 	#'0'
.b6b4	90 07		bcc $b6bd			bcc 	_TKNoLineNumber
.b6b6	c9 3a		cmp #$3a			cmp 	#'9'+1
.b6b8	b0 03		bcs $b6bd			bcs 	_TKNoLineNumber
.b6ba	20 4a b8	jsr $b84a			jsr 	TokeniseExtractLineNumber
.b6bd					_TKNoLineNumber:
.b6bd					_TKTokeniseLoop:
.b6bd	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b6c0	f0 65		beq $b727			beq 	_TKExit
.b6c2	e8		inx				inx
.b6c3	c9 20		cmp #$20			cmp 	#' '
.b6c5	f0 f6		beq $b6bd			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b6c7	ca		dex				dex 								; undo last get, A contains character, X is position.
.b6c8	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b6ca	f0 61		beq $b72d			beq 	_TKTokeniseIdentifier
.b6cc	c9 41		cmp #$41			cmp 	#'A'
.b6ce	90 04		bcc $b6d4			bcc 	_TKTokenisePunctuation
.b6d0	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b6d2	90 59		bcc $b72d			bcc 	_TKTokeniseIdentifier
.b6d4					_TKTokenisePunctuation:
.b6d4	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b6d6	f0 27		beq $b6ff			beq 	_TKString
.b6d8	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b6da	f0 28		beq $b704			beq 	_TKHexConstant
.b6dc	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b6de	f0 29		beq $b709			beq 	_TKCheckDouble
.b6e0	c9 3e		cmp #$3e			cmp 	#'>'
.b6e2	f0 25		beq $b709			beq 	_TKCheckDouble
.b6e4					_TKStandardPunctuation:
.b6e4	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.b6e7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b6e9	90 0e		bcc $b6f9			bcc 	_TKNoShift
.b6eb	48		pha				pha 								; save
.b6ec	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b6ee	85 36		sta $36				sta 	zTemp0
.b6f0	68		pla				pla
.b6f1	29 20		and #$20			and 	#32 						; bit 5
.b6f3	4a		lsr a				lsr 	a 							; shift into bit 3
.b6f4	4a		lsr a				lsr 	a
.b6f5	05 36		ora $36				ora 	zTemp0
.b6f7	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b6f9					_TKNoShift:
.b6f9	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte 			; write the punctuation character
.b6fc	e8		inx				inx 								; consume the character
.b6fd	80 be		bra $b6bd			bra 	_TKTokeniseLoop 			; and loop round again.
.b6ff					_TKString:
.b6ff	20 af b7	jsr $b7af			jsr 	TokeniseString
.b702	80 b9		bra $b6bd			bra 	_TKTokeniseLoop
.b704					_TKHexConstant:
.b704	20 ea b7	jsr $b7ea			jsr 	TokeniseHexConstant
.b707	80 b4		bra $b6bd			bra 	_TKTokeniseLoop
.b709					_TKCheckDouble:
.b709	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.b70c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b70e	90 d4		bcc $b6e4			bcc 	_TKStandardPunctuation
.b710	c9 3f		cmp #$3f			cmp 	#'>'+1
.b712	b0 d0		bcs $b6e4			bcs 	_TKStandardPunctuation
.b714	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b717	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b719	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b71a	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b71d	38		sec				sec
.b71e	e9 3c		sbc #$3c			sbc 	#'<'
.b720	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b723	e8		inx				inx 								; consume both
.b724	e8		inx				inx
.b725	80 96		bra $b6bd			bra 	_TKTokeniseLoop
.b727	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b729	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b72c	60		rts				rts
.b72d					_TKTokeniseIdentifier:
.b72d	8e 80 04	stx $0480			stx 	identStart 					; save start
.b730	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b733					_TKCheckLoop:
.b733	e8		inx				inx 								; look at next, we know first is identifier.
.b734	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.b737	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b739	f0 f8		beq $b733			beq 	_TKCheckLoop
.b73b	c9 30		cmp #$30			cmp	 	#"0"
.b73d	90 0c		bcc $b74b			bcc 	_TKEndIdentifier
.b73f	c9 3a		cmp #$3a			cmp 	#"9"+1
.b741	90 f0		bcc $b733			bcc 	_TKCheckLoop
.b743	c9 41		cmp #$41			cmp	 	#"A"
.b745	90 04		bcc $b74b			bcc 	_TKEndIdentifier
.b747	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b749	90 e8		bcc $b733			bcc 	_TKCheckLoop
.b74b					_TKEndIdentifier:
.b74b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b74e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b750	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b752	f0 06		beq $b75a			beq 	_TKHasTypeCharacter
.b754	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b756	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b758	d0 07		bne $b761			bne 	_TKNoTypeCharacter
.b75a					_TKHasTypeCharacter:
.b75a	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b75d	e8		inx				inx 								; read next
.b75e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b761					_TKNoTypeCharacter:
.b761	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b763	d0 09		bne $b76e			bne 	_TKNoArray
.b765	e8		inx				inx 								; skip the (
.b766	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b769	09 04		ora #$04			ora 	#$04
.b76b	8d 84 04	sta $0484			sta 	identTypeByte
.b76e					_TKNoArray:
.b76e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b771	20 0b b8	jsr $b80b			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b774	a0 b1		ldy #$b1			ldy 	#(KeywordSet0) >> 8
.b776	a9 17		lda #$17			lda 	#(KeywordSet0) & $FF
.b778	20 3f b6	jsr $b63f			jsr 	TokeniseSearchTable
.b77b	a2 00		ldx #$00			ldx 	#0
.b77d	b0 1f		bcs $b79e			bcs 	_TKFoundToken
.b77f	a0 b2		ldy #$b2			ldy 	#(KeywordSet1) >> 8
.b781	a9 fc		lda #$fc			lda 	#(KeywordSet1) & $FF
.b783	20 3f b6	jsr $b63f			jsr 	TokeniseSearchTable
.b786	a2 81		ldx #$81			ldx 	#$81
.b788	b0 14		bcs $b79e			bcs 	_TKFoundToken
.b78a	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.b78c	a9 4a		lda #$4a			lda 	#(KeywordSet2) & $FF
.b78e	20 3f b6	jsr $b63f			jsr 	TokeniseSearchTable
.b791	a2 82		ldx #$82			ldx 	#$82
.b793	b0 09		bcs $b79e			bcs 	_TKFoundToken
.b795	20 9b b8	jsr $b89b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b798	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b79b	4c bd b6	jmp $b6bd			jmp 	_TKTokeniseLoop 			; and go round again.
.b79e					_TKFoundToken:
.b79e	48		pha				pha 								; save token
.b79f	8a		txa				txa 								; shift in X, is there one ?
.b7a0	f0 03		beq $b7a5			beq 	_TKNoTShift
.b7a2	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte 			; if so, write it out
.b7a5					_TKNoTShift:
.b7a5	68		pla				pla 								; restore and write token
.b7a6	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b7a9	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b7ac	4c bd b6	jmp $b6bd			jmp 	_TKTokeniseLoop 			; and go round again.
.b7af					TokeniseString:
.b7af	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b7b1	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b7b4	e8		inx				inx									; start of quoted string.
.b7b5	da		phx				phx 								; push start of string on top
.b7b6	ca		dex				dex
.b7b7					_TSFindEnd:
.b7b7	e8		inx				inx
.b7b8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.b7bb	f0 04		beq $b7c1			beq 	_TSEndOfString
.b7bd	c9 22		cmp #$22			cmp 	#'"'
.b7bf	d0 f6		bne $b7b7			bne 	_TSFindEnd
.b7c1					_TSEndOfString:
.b7c1	7a		ply				ply  								; so now Y is first character, X is character after end.
.b7c2	48		pha				pha 								; save terminating character
.b7c3	20 cb b7	jsr $b7cb			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b7c6	68		pla				pla 								; terminating character
.b7c7	f0 01		beq $b7ca			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b7c9	e8		inx				inx
.b7ca					_TSNotQuote:
.b7ca	60		rts				rts
.b7cb					TOWriteBlockXY:
.b7cb	86 36		stx $36				stx 	zTemp0 						; write end character
.b7cd	98		tya				tya
.b7ce	49 ff		eor #$ff			eor 	#$FF
.b7d0	38		sec				sec
.b7d1	65 36		adc $36				adc 	zTemp0
.b7d3	1a		inc a				inc 	a 							; one extra for NULL
.b7d4	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b7d7					_TOBlockLoop:
.b7d7	c4 36		cpy $36				cpy 	zTemp0
.b7d9	f0 09		beq $b7e4			beq 	_TOBlockExit
.b7db	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.b7de	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b7e1	c8		iny				iny
.b7e2	80 f3		bra $b7d7			bra 	_TOBlockLoop
.b7e4					_TOBlockExit:
.b7e4	a9 00		lda #$00			lda 	#0
.b7e6	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b7e9	60		rts				rts
.b7ea					TokeniseHexConstant:
.b7ea	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b7ec	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b7ef	e8		inx				inx									; start of quoted string.
.b7f0	da		phx				phx 								; push start of constant on top
.b7f1	ca		dex				dex
.b7f2					_THFindLoop:
.b7f2	e8		inx				inx
.b7f3	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b7f6	c9 30		cmp #$30			cmp 	#"0"
.b7f8	90 0c		bcc $b806			bcc 	_THFoundEnd
.b7fa	c9 3a		cmp #$3a			cmp 	#"9"+1
.b7fc	90 f4		bcc $b7f2			bcc 	_THFindLoop
.b7fe	c9 41		cmp #$41			cmp 	#"A"
.b800	90 04		bcc $b806			bcc 	_THFoundEnd
.b802	c9 47		cmp #$47			cmp 	#"F"+1
.b804	90 ec		bcc $b7f2			bcc 	_THFindLoop
.b806					_THFoundEnd:
.b806	7a		ply				ply 								; restore start
.b807	20 cb b7	jsr $b7cb			jsr 	TOWriteBlockXY 				; output the block
.b80a	60		rts				rts
.b80b					TokeniseCalculateHash:
.b80b	da		phx				phx
.b80c	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b80f	a9 00		lda #$00			lda 	#0
.b811					_TCHLoop:
.b811	18		clc				clc
.b812	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.b815	e8		inx				inx
.b816	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b819	d0 f6		bne $b811			bne 	_TCHLoop
.b81b	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b81e	fa		plx				plx
.b81f	60		rts				rts
.b820					FixLineBufferCase:
.b820	a2 00		ldx #$00			ldx 	#0
.b822					_FLBCLoop:
.b822	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.b825	f0 22		beq $b849			beq 	_FLBCExit 					; end of string.
.b827	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b829	f0 11		beq $b83c			beq 	_FLBCInQuotes
.b82b	e8		inx				inx
.b82c	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b82e	90 f2		bcc $b822			bcc 	_FLBCLoop
.b830	c9 7b		cmp #$7b			cmp 	#'z'+1
.b832	b0 ee		bcs $b822			bcs 	_FLBCLoop
.b834	38		sec				sec 								; make U/C
.b835	e9 20		sbc #$20			sbc 	#32
.b837	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.b83a	80 e6		bra $b822			bra 	_FLBCLoop
.b83c					_FLBCInQuotes:
.b83c	e8		inx				inx 								; advance
.b83d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.b840	f0 07		beq $b849			beq 	_FLBCExit 					; exit on EOS
.b842	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b844	d0 f6		bne $b83c			bne 	_FLBCInQuotes
.b846	e8		inx				inx 								; skip over it
.b847	80 d9		bra $b822			bra 	_FLBCLoop
.b849					_FLBCExit:
.b849	60		rts				rts
.b84a					TokeniseExtractLineNumber:
.b84a	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.b84d	48		pha				pha
.b84e	ad a8 04	lda $04a8			lda 	tokenLineNumber
.b851	48		pha				pha
.b852	20 88 b8	jsr $b888			jsr 	_TELNTimes2 				; line # x 4
.b855	20 88 b8	jsr $b888			jsr 	_TELNTimes2 				; line # x 2
.b858	18		clc				clc 								; add stacked value
.b859	68		pla				pla
.b85a	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b85d	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b860	68		pla				pla
.b861	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.b864	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.b867	20 88 b8	jsr $b888			jsr 	_TELNTimes2 				; line # x 10
.b86a	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.b86d	e8		inx				inx
.b86e	29 0f		and #$0f			and 	#15 						; add to line #
.b870	18		clc				clc
.b871	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b874	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b877	90 03		bcc $b87c			bcc 	_TLENNoCarry
.b879	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.b87c					_TLENNoCarry:
.b87c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.b87f	c9 30		cmp #$30			cmp 	#'0'
.b881	90 04		bcc $b887			bcc 	_TLENExit
.b883	c9 3a		cmp #$3a			cmp 	#'9'+1
.b885	90 c3		bcc $b84a			bcc 	TokeniseExtractLineNumber
.b887					_TLENExit:
.b887	60		rts				rts
.b888					_TELNTimes2:
.b888	0e a8 04	asl $04a8			asl 	tokenLineNumber
.b88b	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.b88e	60		rts				rts
.b88f					TokeniseWriteByte:
.b88f	da		phx				phx
.b890	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.b893	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.b896	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.b899	fa		plx				plx
.b89a	60		rts				rts
.b89b					CheckCreateVariableRecord:
.b89b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b89d	85 36		sta $36				sta 	0+zTemp0
.b89f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b8a1	85 37		sta $37				sta 	1+zTemp0
.b8a3					_CCVSearch:
.b8a3	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b8a5	f0 2c		beq $b8d3			beq 	_CCVFail
.b8a7	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b8a9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b8ab	cd 83 04	cmp $0483			cmp 	identHash
.b8ae	d0 16		bne $b8c6			bne 	_CCVNext
.b8b0	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b8b2	ae 80 04	ldx $0480			ldx 	identStart
.b8b5					_CCVCompare:
.b8b5	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b8b8	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b8ba	e8		inx				inx 								; advance pointers
.b8bb	c8		iny				iny
.b8bc	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b8bd	d0 07		bne $b8c6			bne 	_CCVNext  					; didn't match go to next.
.b8bf	90 f4		bcc $b8b5			bcc 	_CCVCompare 				; not finished yet.
.b8c1	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b8c4	f0 41		beq $b907			beq 	_CCVFound 					; yes, we were successful
.b8c6					_CCVNext:
.b8c6	18		clc				clc
.b8c7	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b8c9	65 36		adc $36				adc 	zTemp0
.b8cb	85 36		sta $36				sta 	zTemp0
.b8cd	90 d4		bcc $b8a3			bcc 	_CCVSearch
.b8cf	e6 37		inc $37				inc 	zTemp0+1
.b8d1	80 d0		bra $b8a3			bra 	_CCVSearch
.b8d3					_CCVFail:
.b8d3	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b8d5	ad 83 04	lda $0483			lda 	identHash
.b8d8	91 36		sta ($36),y			sta 	(zTemp0),y
.b8da	c8		iny				iny 								; offset 2 is the type byte
.b8db	ad 84 04	lda $0484			lda 	identTypeByte
.b8de	91 36		sta ($36),y			sta 	(zTemp0),y
.b8e0	c8		iny				iny
.b8e1					_CCVData:
.b8e1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b8e3	91 36		sta ($36),y			sta 	(zTemp0),y
.b8e5	c8		iny				iny
.b8e6	c0 08		cpy #$08			cpy 	#8
.b8e8	90 f7		bcc $b8e1			bcc 	_CCVData
.b8ea	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b8ed					_CCVCopyName:
.b8ed	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b8f0	91 36		sta ($36),y			sta 	(zTemp0),y
.b8f2	e8		inx				inx
.b8f3	c8		iny				iny
.b8f4	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b8f7	d0 f4		bne $b8ed			bne 	_CCVCopyName
.b8f9	98		tya				tya 								; patch offset
.b8fa	92 36		sta ($36)			sta 	(zTemp0)
.b8fc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b8fe	91 36		sta ($36),y			sta 	(zTemp0),y
.b900	88		dey				dey
.b901	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b903	09 80		ora #$80			ora 	#$80
.b905	91 36		sta ($36),y			sta 	(zTemp0),y
.b907					_CCVFound:
.b907	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b909	38		sec				sec
.b90a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b90c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b90e	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b911	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b913	20 8f b8	jsr $b88f			jsr 	TokeniseWriteByte
.b916	60		rts				rts

;******  Return to file: ./modules/zzzend.asm


;******  Return to file: _basic.asm


;******  End of listing
