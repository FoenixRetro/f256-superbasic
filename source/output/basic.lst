
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 15:39:14 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 dd 83	jsr $83dd			jsr 	NewCommand 					; erase current program
.8006	20 2a 91	jsr $912a			jsr 	BackloadProgram
.8009	4c 9e 84	jmp $849e			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 56 9d	jsr $9d56			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	89 87					.word	ShiftLeft                        ; $00 <<
>8016	83 86					.word	BinaryCompareLessEqual           ; $01 <=
>8018	79 86					.word	BinaryCompareNotEqual            ; $02 <>
>801a	03 9b					.word	SyntaxError                      ; $03 !!3
>801c	03 9b					.word	SyntaxError                      ; $04 ><
>801e	8d 86					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	8c 87					.word	ShiftRight                       ; $06 >>
>8022	03 9b					.word	SyntaxError                      ; $07 !!7
>8024	03 9b					.word	SyntaxError                      ; $08 !!8
>8026	03 9b					.word	SyntaxError                      ; $09 !!9
>8028	03 9b					.word	SyntaxError                      ; $0a !!10
>802a	03 9b					.word	SyntaxError                      ; $0b !!11
>802c	03 9b					.word	SyntaxError                      ; $0c !!12
>802e	03 9b					.word	SyntaxError                      ; $0d !!13
>8030	03 9b					.word	SyntaxError                      ; $0e !!14
>8032	03 9b					.word	SyntaxError                      ; $0f !!15
>8034	03 9b					.word	SyntaxError                      ; $10 @
>8036	03 9b					.word	SyntaxError                      ; $11 !!17
>8038	03 9b					.word	SyntaxError                      ; $12 !!18
>803a	03 9b					.word	SyntaxError                      ; $13 [
>803c	4c 96					.word	IntegerDivide                    ; $14 \
>803e	03 9b					.word	SyntaxError                      ; $15 ]
>8040	12 89					.word	EorInteger                       ; $16 ^
>8042	03 9b					.word	SyntaxError                      ; $17 _
>8044	03 9b					.word	SyntaxError                      ; $18 `
>8046	03 9b					.word	SyntaxError                      ; $19 !!25
>8048	03 9b					.word	SyntaxError                      ; $1a !!26
>804a	03 9b					.word	SyntaxError                      ; $1b {
>804c	cc 88					.word	OraInteger                       ; $1c |
>804e	03 9b					.word	SyntaxError                      ; $1d }
>8050	03 9b					.word	SyntaxError                      ; $1e ~
>8052	03 9b					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	03 9b					.word	SyntaxError                      ; $20
>8056	58 89					.word	WordIndirect                     ; $21 !
>8058	03 9b					.word	SyntaxError                      ; $22 "
>805a	03 9b					.word	SyntaxError                      ; $23 #
>805c	03 9b					.word	SyntaxError                      ; $24 $
>805e	99 96					.word	IntegerModulus                   ; $25 %
>8060	86 88					.word	AndInteger                       ; $26 &
>8062	03 9b					.word	SyntaxError                      ; $27 '
>8064	03 9b					.word	SyntaxError                      ; $28 (
>8066	03 9b					.word	SyntaxError                      ; $29 )
>8068	0e 97					.word	MulInteger                       ; $2a *
>806a	20 88					.word	AddInteger                       ; $2b +
>806c	03 9b					.word	SyntaxError                      ; $2c ,
>806e	5b 88					.word	SubInteger                       ; $2d -
>8070	03 9b					.word	SyntaxError                      ; $2e .
>8072	a5 98					.word	FDivideCommand                   ; $2f /
>8074	03 9b					.word	SyntaxError                      ; $30 0
>8076	03 9b					.word	SyntaxError                      ; $31 1
>8078	03 9b					.word	SyntaxError                      ; $32 2
>807a	03 9b					.word	SyntaxError                      ; $33 3
>807c	03 9b					.word	SyntaxError                      ; $34 4
>807e	03 9b					.word	SyntaxError                      ; $35 5
>8080	03 9b					.word	SyntaxError                      ; $36 6
>8082	03 9b					.word	SyntaxError                      ; $37 7
>8084	03 9b					.word	SyntaxError                      ; $38 8
>8086	03 9b					.word	SyntaxError                      ; $39 9
>8088	03 9b					.word	SyntaxError                      ; $3a :
>808a	03 9b					.word	SyntaxError                      ; $3b ;
>808c	65 86					.word	BinaryCompareLess                ; $3c <
>808e	5b 86					.word	BinaryCompareEqual               ; $3d =
>8090	6f 86					.word	BinaryCompareGreater             ; $3e >
>8092	7f 89					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	f3 84					.word	EOLCommand                       ; $80 !0:EOF
>8096	00 85					.word	Shift1Command                    ; $81 !1:SH1
>8098	03 9b					.word	SyntaxError                      ; $82 !2:SH2
>809a	eb 99					.word	AbsUnary                         ; $83 ABS(
>809c	c2 8d					.word	AllocUnary                       ; $84 ALLOC(
>809e	fb 99					.word	AscUnary                         ; $85 ASC(
>80a0	5f 8e					.word	ChrUnary                         ; $86 CHR$(
>80a2	57 86					.word	UnaryFalse                       ; $87 FALSE
>80a4	08 9a					.word	FracUnary                        ; $88 FRAC(
>80a6	1e 9a					.word	IntUnary                         ; $89 INT(
>80a8	74 9a					.word	IsValUnary                       ; $8a ISVAL(
>80aa	39 8f					.word	Unary_Left                       ; $8b LEFT$(
>80ac	30 9a					.word	LenUnary                         ; $8c LEN(
>80ae	63 8f					.word	Unary_Mid                        ; $8d MID$(
>80b0	fc 8d					.word	Unary_Not                        ; $8e NOT(
>80b2	49 8f					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	12 8e					.word	Unary_Rnd                        ; $90 RND(
>80b6	4a 9a					.word	SgnUnary                         ; $91 SGN(
>80b8	71 8e					.word	SpcUnary                         ; $92 SPC(
>80ba	8c 8e					.word	Unary_Str                        ; $93 STR$(
>80bc	4b 86					.word	UnaryTrue                        ; $94 TRUE
>80be	6a 9a					.word	ValUnary                         ; $95 VAL(
>80c0	36 82					.word	ForCommand                       ; $96 FOR
>80c2	7a 83					.word	IfCommand                        ; $97 IF
>80c4	08 85					.word	Unused1                          ; $98 PROC
>80c6	7c 84					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	b7 85					.word	Command_WHILE                    ; $9a WHILE
>80ca	a3 83					.word	EndIf                            ; $9b ENDIF
>80cc	25 96					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	f0 82					.word	NextCommand                      ; $9d NEXT
>80d0	03 9b					.word	SyntaxError                      ; $9e THEN
>80d2	85 84					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	d8 85					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	03 9b					.word	SyntaxError                      ; $a2 CLS
>80da	03 9b					.word	SyntaxError                      ; $a3 DATA
>80dc	75 81					.word	DimCommand                       ; $a4 DIM
>80de	08 85					.word	Unused3                          ; $a5 DOWNTO
>80e0	9c 83					.word	ElseCode                         ; $a6 ELSE
>80e2	49 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	67 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	a4 83					.word	LetCommand                       ; $a9 LET
>80e8	e7 83					.word	Command_Print                    ; $aa PRINT
>80ea	03 9b					.word	SyntaxError                      ; $ab READ
>80ec	6f 84					.word	RemCommand                       ; $ac REM
>80ee	59 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	08 85					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	03 9b					.word	SyntaxError                      ; $80 !0:EOF
>80f4	03 9b					.word	SyntaxError                      ; $81 !1:SH1
>80f6	03 9b					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	33 82					.word	EndCommand                       ; $85 END
>80fe	03 9b					.word	SyntaxError                      ; $86 LIST
>8100	dd 83					.word	NewCommand                       ; $87 NEW
>8102	03 9b					.word	SyntaxError                      ; $88 RESTORE
>8104	9e 84					.word	CommandRUN                       ; $89 RUN
>8106	03 9b					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	03 9b					.word	SyntaxError                      ; $80 !0:EOF
>810a	03 9b					.word	SyntaxError                      ; $81 !1:SH1
>810c	03 9b					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 04 90	jsr $9004			jsr 	EvaluateInteger 			; the assert test
.8113	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c e6 85	jmp $85e6		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 19 90	jsr $9019			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 1d 91	jsr $911d			jsr 	StackReset
.816e	20 cc 9c	jsr $9ccc			jsr 	StringSystemInitialise
.8171	20 0b 85	jsr $850b			jsr 	ProcedureScan
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8175					DimCommand:
.8175	b1 30		lda ($30),y			lda 	(codePtr),y
.8177	29 c0		and #$c0			and 	#$C0
.8179	c9 40		cmp #$40			cmp 	#$40
.817b	d0 7b		bne $81f8			bne 	_DCSyntax
.817d	b1 30		lda ($30),y			lda 	(codePtr),y
.817f	18		clc				clc
.8180	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8182	85 3f		sta $3f				sta 	zaTemp+1
.8184	c8		iny				iny
.8185	b1 30		lda ($30),y			lda 	(codePtr),y
.8187	c8		iny				iny
.8188	85 3e		sta $3e				sta 	zaTemp
.818a	5a		phy				phy
.818b	a0 02		ldy #$02			ldy 	#2 						; read type byte
.818d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.818f	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8191	c9 18		cmp #$18			cmp 	#NSTProcedure
.8193	f0 63		beq $81f8			beq 	_DCSyntax
.8195	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8197	29 04		and #$04			and 	#NSBIsArray
.8199	f0 65		beq $8200			beq 	_DCType
.819b	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.819d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.819f	d0 5a		bne $81fb			bne 	_DCRedefine
.81a1	7a		ply				ply
.81a2	20 03 82	jsr $8203			jsr 	_DCGetSize 				; get array size, check it.
.81a5	5a		phy				phy
.81a6	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.81a8	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.81aa	7a		ply				ply 							; is there a second (e.g. ,x)
.81ab	b1 30		lda ($30),y			lda 	(codePtr),y
.81ad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.81af	d0 0a		bne $81bb			bne 	_DCOneDimension
.81b1	c8		iny				iny 							; skip comma
.81b2	20 03 82	jsr $8203			jsr 	_DCGetSize 				; get 2nd array size
.81b5	5a		phy				phy
.81b6	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.81b8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81ba	7a		ply				ply
.81bb					_DCOneDimension:
.81bb	5a		phy				phy 							; save position
>81bc	db						.byte 	$DB 						; causes a break in the emulator
.81bd	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.81bf	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81c1	aa		tax				tax
.81c2	c8		iny				iny
.81c3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81c5	e8		inx				inx 							; bump them.
.81c6	1a		inc a				inc 	a
.81c7	20 b5 9a	jsr $9ab5			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.81ca	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.81cc	29 e0		and #$e0			and 	#$E0
.81ce	d0 23		bne $81f3			bne 	_DCSize
.81d0	a0 02		ldy #$02			ldy 	#2 						; get base type
.81d2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.81d4	20 11 82	jsr $8211			jsr 	ScaleByBaseType 		; scale by base type
.81d7	a5 36		lda $36				lda 	zTemp0
.81d9	a6 37		ldx $37				ldx 	zTemp0+1
.81db	20 e1 8d	jsr $8de1			jsr 	AllocateXABytes 		; allocate memory
.81de	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.81e0	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81e2	c8		iny				iny
.81e3	8a		txa				txa
.81e4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.81e6	7a		ply				ply 							; get position back
.81e7	20 33 96	jsr $9633			jsr 	CheckRightBracket 		; check )
.81ea	b1 30		lda ($30),y			lda 	(codePtr),y
.81ec	c8		iny				iny 							; consume in case
.81ed	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.81ef	f0 84		beq $8175			beq 	DimCommand
.81f1	88		dey				dey 							; undo consume
.81f2	60		rts				rts
.81f3					_DCSize:
.81f3	a9 16		lda #$16		lda	#22
.81f5	4c e6 85	jmp $85e6		jmp	ErrorHandler
.81f8					_DCSyntax:
.81f8	4c 03 9b	jmp $9b03			jmp 	SyntaxError
.81fb					_DCRedefine:
.81fb	a9 15		lda #$15		lda	#21
.81fd	4c e6 85	jmp $85e6		jmp	ErrorHandler
.8200					_DCType:
.8200	4c 0d 9b	jmp $9b0d			jmp 	TypeError
.8203					_DCGetSize:
.8203	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8205	20 25 90	jsr $9025			jsr 	Evaluate8BitInteger 	; get array dimension
.8208	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.820a	f0 e7		beq $81f3			beq 	_DCSize
.820c	c9 fe		cmp #$fe			cmp 	#254
.820e	f0 e3		beq $81f3			beq 	_DCSize
.8210	60		rts				rts
.8211					ScaleByBaseType:
.8211	29 10		and #$10			and 	#NSBIsString 			; is it string
.8213	d0 19		bne $822e			bne 	_SBBTString
.8215	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8217	48		pha				pha
.8218	a5 36		lda $36				lda 	zTemp0
.821a	48		pha				pha
.821b	06 36		asl $36				asl 	zTemp0 					; x 2
.821d	26 37		rol $37				rol 	zTemp0+1
.821f	06 36		asl $36				asl 	zTemp0 					; x 4
.8221	26 37		rol $37				rol 	zTemp0+1
.8223	68		pla				pla 							; add stacked value = x 5
.8224	65 36		adc $36				adc 	zTemp0
.8226	85 36		sta $36				sta 	zTemp0
.8228	68		pla				pla
.8229	65 37		adc $37				adc 	zTemp0+1
.822b	85 37		sta $37				sta 	zTemp0+1
.822d	60		rts				rts
.822e					_SBBTString:
.822e	06 36		asl $36				asl 	zTemp0
.8230	26 37		rol $37				rol 	zTemp0+1
.8232	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8233					EndCommand:
.8233	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8236					ForCommand:
.8236	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8238	20 ca 90	jsr $90ca			jsr 	StackOpen
.823b	a2 00		ldx #$00			ldx 	#0
.823d	20 b9 8c	jsr $8cb9			jsr 	EvaluateTerm
.8240	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8243	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8245	d0 49		bne $8290			bne		_FCError
.8247	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8249	20 43 96	jsr $9643			jsr 	CheckNextA
.824c	e8		inx				inx
.824d	20 04 90	jsr $9004			jsr 	EvaluateInteger 			; <from> in +1
.8250	b1 30		lda ($30),y			lda 	(codePtr),y
.8252	c8		iny				iny 								; consume it
.8253	48		pha				pha 								; save on stack for later
.8254	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8256	f0 04		beq $825c			beq 	_FCNoSyntax
.8258	c9 ae		cmp #$ae			cmp 	#KWD_TO
.825a	d0 37		bne $8293			bne 	_FCSyntaxError
.825c					_FCNoSyntax:
.825c	e8		inx				inx
.825d	20 04 90	jsr $9004			jsr 	EvaluateInteger
.8260	20 fc 90	jsr $90fc			jsr 	STKSaveCodePosition 		; save loop back position
.8263	68		pla				pla 								; restore DOWNTO or TO
.8264	5a		phy				phy 								; save Y on the stack
.8265	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8267	f0 02		beq $826b			beq 	_FCNotDownTo
.8269	a9 02		lda #$02			lda 	#2
.826b					_FCNotDownTo:
.826b	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.826c	a0 10		ldy #$10			ldy 	#16
.826e	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8270	a0 06		ldy #$06			ldy 	#6
.8272	ad 08 06	lda $0608			lda 	NSMantissa0
.8275	91 34		sta ($34),y			sta 	(basicStack),y
.8277	ad 10 06	lda $0610			lda 	NSMantissa1
.827a	c8		iny				iny
.827b	91 34		sta ($34),y			sta 	(basicStack),y
.827d	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.827f	a2 01		ldx #$01			ldx 	#1
.8281	20 96 82	jsr $8296			jsr 	FCIntegerToStack
.8284	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8286	a2 02		ldx #$02			ldx 	#2
.8288	20 96 82	jsr $8296			jsr 	FCIntegerToStack
.828b	20 b6 82	jsr $82b6			jsr 	CopyIndexToReference
.828e	7a		ply				ply 								; restore position
.828f	60		rts				rts
.8290					_FCError:
.8290	4c 0d 9b	jmp $9b0d			jmp 	TypeError
.8293					_FCSyntaxError:
.8293	4c 03 9b	jmp $9b03			jmp 	SyntaxError
.8296					FCIntegerToStack:
.8296	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8299	10 03		bpl $829e			bpl	 	_FCNotNegative
.829b	20 42 90	jsr $9042			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.829e					_FCNotNegative:
.829e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.82a1	91 34		sta ($34),y			sta 	(basicStack),y
.82a3	c8		iny				iny
.82a4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.82a7	91 34		sta ($34),y			sta 	(basicStack),y
.82a9	c8		iny				iny
.82aa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.82ad	91 34		sta ($34),y			sta 	(basicStack),y
.82af	c8		iny				iny
.82b0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.82b3	91 34		sta ($34),y			sta 	(basicStack),y
.82b5	60		rts				rts
.82b6					CopyIndexToReference:
.82b6	5a		phy				phy
.82b7	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.82b9	38		sec				sec 								; (because we copy from offset 8)
.82ba	b1 34		lda ($34),y			lda 	(basicStack),y
.82bc	e9 08		sbc #$08			sbc 	#8
.82be	85 36		sta $36				sta 	zTemp0
.82c0	c8		iny				iny
.82c1	b1 34		lda ($34),y			lda 	(basicStack),y
.82c3	e9 00		sbc #$00			sbc 	#0
.82c5	85 37		sta $37				sta 	zTemp0+1
.82c7	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.82c9	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.82cb	b1 34		lda ($34),y			lda 	(basicStack),y
.82cd	0a		asl a				asl 	a 							; into carry
.82ce	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.82d0	90 14		bcc $82e6			bcc 	_CITRNormal
.82d2	38		sec				sec
.82d3					_CITRNegative:
.82d3	a9 00		lda #$00			lda 	#0
.82d5	f1 34		sbc ($34),y			sbc 	(basicStack),y
.82d7	91 36		sta ($36),y			sta 	(zTemp0),y
.82d9	c8		iny				iny
.82da	ca		dex				dex
.82db	d0 f6		bne $82d3			bne 	_CITRNegative
.82dd	88		dey				dey 								; look at MSB of mantissa
.82de	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.82e0	09 80		ora #$80			ora 	#$80
.82e2	91 36		sta ($36),y			sta 	(zTemp0),y
.82e4	7a		ply				ply
.82e5	60		rts				rts
.82e6					_CITRNormal:
.82e6	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.82e8	91 36		sta ($36),y			sta 	(zTemp0),y
.82ea	c8		iny				iny
.82eb	ca		dex				dex
.82ec	d0 f8		bne $82e6			bne 	_CITRNormal
.82ee	7a		ply				ply 								; and exit.
.82ef	60		rts				rts
.82f0					NextCommand:
.82f0	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.82f2	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.82f4	20 f1 90	jsr $90f1			jsr 	StackCheckFrame
.82f7	5a		phy				phy
.82f8	a0 10		ldy #$10			ldy 	#16 						; get the step count
.82fa	b1 34		lda ($34),y			lda 	(basicStack),y
.82fc	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.82fe	30 02		bmi $8302			bmi 	_NCStepNeg
.8300	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8302					_NCStepNeg:
.8302	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8304	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8306	18		clc				clc
.8307					_NCBump:
.8307	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8309	91 34		sta ($34),y			sta 	(basicStack),y
.830b	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.830d	c8		iny				iny 								; next byte
.830e	ca		dex				dex 								; do four times
.830f	d0 f6		bne $8307			bne 	_NCBump
.8311	20 b6 82	jsr $82b6			jsr		CopyIndexToReference		; copy it to the reference variable.
.8314	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8316	b1 34		lda ($34),y			lda 	(basicStack),y
.8318	0a		asl a				asl 	a 							; sign bit to carry
.8319	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.831b	85 38		sta $38				sta 	zTemp1
.831d	90 02		bcc $8321			bcc 	_NCCompRev 					; use if step is +ve
.831f	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8321					_NCCompRev:
.8321	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8323	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8325	85 39		sta $39				sta 	zTemp1+1
.8327	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8329	38		sec				sec
.832a					_NCCompare:
.832a	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.832c	b1 34		lda ($34),y			lda 	(basicStack),y
.832e	a4 39		ldy $39				ldy 	zTemp1+1
.8330	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8332	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8334	e6 39		inc $39				inc 	zTemp1+1
.8336	ca		dex				dex 								; do it 4 times.
.8337	d0 f1		bne $832a			bne 	_NCCompare
.8339	50 02		bvc $833d			bvc 	_NCNoOverflow 				; convert to signed comparison
.833b	49 80		eor #$80			eor 	#$80
.833d					_NCNoOverflow:
.833d	7a		ply				ply 								; restore Y position
.833e	0a		asl a				asl 	a 							; is bit 7 set.
.833f	90 04		bcc $8345			bcc 	_NCLoopback 				; if no , >= so loop back
.8341	20 e3 90	jsr $90e3			jsr 	StackClose 					; exit the loop
.8344	60		rts				rts
.8345					_NCLoopBack:
.8345	20 0d 91	jsr $910d			jsr 	STKLoadCodePosition 		; loop back
.8348	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8349					Command_GOSUB:
.8349	a2 00		ldx #$00			ldx 	#0
.834b	20 19 90	jsr $9019			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.834e	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8350	20 ca 90	jsr $90ca			jsr 	StackOpen 					; create frame
.8353	20 fc 90	jsr $90fc			jsr 	STKSaveCodePosition 		; save current position
.8356	4c 6c 83	jmp $836c			jmp 	GotoStackX
.8359					Command_RETURN:
.8359	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.835b	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.835d	20 f1 90	jsr $90f1			jsr 	StackCheckFrame
.8360	20 0d 91	jsr $910d			jsr 	STKLoadCodePosition 		; restore code position
.8363	20 e3 90	jsr $90e3			jsr 	StackClose
.8366	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8367					GotoCommand:
.8367	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8369	20 19 90	jsr $9019			jsr 	Evaluate16BitInteger
.836c					GotoStackX:
.836c	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.836f	48		pha				pha 								; it is slightly inefficient, just in cases.
.8370	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8373	fa		plx				plx
.8374	20 f3 95	jsr $95f3			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8377	4c a9 84	jmp $84a9			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.837a					IfCommand:
.837a	a2 00		ldx #$00			ldx 	#0 							; If what.
.837c	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber
.837f	b1 30		lda ($30),y			lda 	(codePtr),y
.8381	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8383	d0 0a		bne $838f			bne 	_IFStructured
.8385	c8		iny				iny 								; consume THEN
.8386	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; is it zero
.8389	f0 01		beq $838c			beq 	_IfFail 					; if fail, go to next line
.838b	60		rts				rts 								; if THEN just continue
.838c					_IfFail:
.838c	4c f3 84	jmp $84f3			jmp 	EOLCommand
.838f					_IfStructured:
.838f	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; is it zero
.8392	d0 07		bne $839b			bne 	_IfExit 					; if not, then continue normally.
.8394	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8396	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8398	20 5d 85	jsr $855d			jsr 	ScanForward 				; and run from there/
.839b					_IfExit:
.839b	60		rts				rts
.839c					ElseCode:
.839c	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.839e	aa		tax				tax 								; so just go to the structure exit
.839f	20 5d 85	jsr $855d			jsr 	ScanForward
.83a2	60		rts				rts
.83a3					EndIf:
.83a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.83a4					LetCommand:
.83a4	a2 00		ldx #$00			ldx 	#0
.83a6	ad d0 89	lda $89d0			lda 	PrecedenceLevel+"*"			; precedence > this
.83a9	20 ea 89	jsr $89ea			jsr 	EvaluateExpressionAtPrecedence
.83ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.83af	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.83b1	f0 0e		beq $83c1			beq 	_LetGoProc 					; it's a procedure call.
.83b3	a9 3d		lda #$3d			lda 	#"=" 						; check =
.83b5	20 43 96	jsr $9643			jsr 	CheckNextA
.83b8	e8		inx				inx 								; RHS
.83b9	20 d8 8f	jsr $8fd8			jsr 	EvaluateValue
.83bc	ca		dex				dex
.83bd	20 c4 83	jsr $83c4			jsr 	AssignVariable
.83c0	60		rts				rts
.83c1					_LetGoProc:
.83c1	4c 3e 84	jmp $843e			jmp 	CallProcedure
.83c4					AssignVariable:
.83c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.83c7	48		pha				pha 								; save a copy
.83c8	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.83cb	29 10		and #$10			and 	#NSBIsString
.83cd	d0 0b		bne $83da			bne 	_ASError
.83cf	68		pla				pla 								; get back
.83d0	29 10		and #$10			and 	#NSBIsString 				; check type
.83d2	d0 03		bne $83d7			bne 	_ASString
.83d4	4c 25 8a	jmp $8a25			jmp 	AssignNumber
.83d7					_ASString:
.83d7	4c 93 8a	jmp $8a93			jmp 	AssignString
.83da					_ASError:
.83da	4c 0d 9b	jmp $9b0d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.83dd					NewCommand:
.83dd	20 a2 95	jsr $95a2			jsr 	MemoryNew
.83e0	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.83e3	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.83e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.83e7					Command_Print:
.83e7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.83e8					_CPLoop:
.83e8	08		php				php 								; save last action flag
.83e9	b1 30		lda ($30),y			lda 	(codePtr),y
.83eb	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.83ed	f0 46		beq $8435			beq 	_CPExit
.83ef	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83f1	f0 42		beq $8435			beq 	_CPExit
.83f3	68		pla				pla 								; throw last action flag
.83f4	b1 30		lda ($30),y			lda 	(codePtr),y
.83f6	c8		iny				iny
.83f7	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.83f9	f0 37		beq $8432			beq 	_CPContinueWithSameLine
.83fb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.83fd	f0 2e		beq $842d			beq 	_CPTab
.83ff	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8401	f0 26		beq $8429			beq 	_CPNewLine
.8403	88		dey				dey 								; undo the get.
.8404	a2 00		ldx #$00			ldx 	#0
.8406	20 d8 8f	jsr $8fd8			jsr 	EvaluateValue 				; get a value into slot 0
.8409	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.840c	29 10		and #$10			and 	#NSBIsString
.840e	f0 0b		beq $841b			beq 	_CPNumber
.8410	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8413	ad 08 06	lda $0608			lda 	NSMantissa0
.8416	20 38 86	jsr $8638			jsr 	PrintStringXA
.8419	80 cc		bra $83e7			bra 	Command_Print 				; loop round clearing carry so NL if end
.841b					_CPNumber:
.841b	a9 05		lda #$05			lda 	#5 							; maximum decimals
.841d	20 ae 8e	jsr $8eae			jsr 	ConvertNumberToString 		; convert to string
.8420	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8422	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8424	20 38 86	jsr $8638			jsr 	PrintStringXA
.8427	80 be		bra $83e7			bra 	Command_Print 				; loop round clearing carry so NL if end
.8429					_CPNewLine:
.8429	a9 0d		lda #$0d			lda 	#13
.842b	80 02		bra $842f			bra 	_CPPrintChar
.842d					_CPTab:
.842d	a9 09		lda #$09			lda 	#9 							; print TAB
.842f					_CPPrintChar:
.842f	20 56 9d	jsr $9d56			jsr 	EXTPrintCharacter
.8432					_CPContinueWithSameLine:
.8432	38		sec				sec 								; loop round with carry set, which
.8433	80 b3		bra $83e8			bra 	_CPLoop 					; will inhibit final CR
.8435					_CPExit:
.8435	28		plp				plp 								; get last action flag
.8436	b0 05		bcs $843d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8438	a9 0d		lda #$0d			lda 	#13 						; print new line
.843a	20 56 9d	jsr $9d56			jsr 	EXTPrintCharacter
.843d					_CPExit2:
.843d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.843e					CallProcedure:
.843e	20 33 96	jsr $9633			jsr 	CheckRightBracket
.8441	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8443	20 ca 90	jsr $90ca			jsr 	StackOpen
.8446	20 fc 90	jsr $90fc			jsr 	STKSaveCodePosition 		; save loop position
.8449	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.844c	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.844e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8451	85 37		sta $37				sta 	zTemp0+1
.8453	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8455	b2 36		lda ($36)			lda 	(zTemp0)
.8457	85 30		sta $30				sta 	safePtr
.8459	b1 36		lda ($36),y			lda 	(zTemp0),y
.845b	85 31		sta $31				sta 	safePtr+1
.845d	c8		iny				iny
.845e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8460	85 32		sta $32				sta 	safePtr+2
.8462	c8		iny				iny
.8463	b1 36		lda ($36),y			lda 	(zTemp0),y
.8465	85 33		sta $33				sta 	safePtr+3
.8467	c8		iny				iny 								; get Y offset -> Y
.8468	b1 36		lda ($36),y			lda 	(zTemp0),y
.846a	a8		tay				tay
.846b	20 33 96	jsr $9633			jsr 	CheckRightBracket 			; check )
.846e	60		rts				rts 								; and continue from here
.9625					Command_ENDPROC:
.9625	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9627	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9629	20 f1 90	jsr $90f1			jsr 	StackCheckFrame
.962c	20 0d 91	jsr $910d			jsr 	STKLoadCodePosition 		; restore code position
.962f	20 e3 90	jsr $90e3			jsr 	StackClose
.9632	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.846f					RemCommand:
.846f	b1 30		lda ($30),y			lda 	(codePtr),y
.8471	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8473	d0 06		bne $847b			bne 	_RMExit
.8475	c8		iny				iny
.8476	98		tya				tya
.8477	38		sec				sec
.8478	71 30		adc ($30),y			adc 	(codePtr),y
.847a	a8		tay				tay
.847b					_RMExit:
.847b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.847c					Command_REPEAT:
.847c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.847e	20 ca 90	jsr $90ca			jsr 	StackOpen
.8481	20 fc 90	jsr $90fc			jsr 	STKSaveCodePosition 		; save loop position
.8484	60		rts				rts
.8485					Command_UNTIL:
.8485	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8487	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8489	20 f1 90	jsr $90f1			jsr 	StackCheckFrame
.848c	a2 00		ldx #$00			ldx 	#0
.848e	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber 				; work out the number
.8491	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; check if zero
.8494	f0 04		beq $849a			beq 	_CULoopBack 				; if so keep looping
.8496	20 e3 90	jsr $90e3			jsr 	StackClose		 			; return
.8499	60		rts				rts
.849a					_CULoopBack:
.849a	20 0d 91	jsr $910d			jsr 	STKLoadCodePosition 		; loop back
.849d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.849e					CommandRUN:
.849e	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.84a1	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.84a3	85 30		sta $30				sta 	codePtr
.84a5	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.84a7	85 31		sta $31				sta 	codePtr+1
.84a9					RUNNewLine:
.84a9	b2 30		lda ($30)			lda 	(codePtr)
.84ab	f0 43		beq $84f0			beq 	CRNoProgram         		; no then END.
.84ad	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.84af	9a		txs				txs
.84b0					RUNCodePointerLine:
.84b0	a0 02		ldy #$02			ldy 	#2 							; start of program
.84b2					_CRIncMainLoop:
.84b2	c8		iny				iny
.84b3					_CRMainLoop:
.84b3	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.84b6	b1 30		lda ($30),y			lda 	(codePtr),y
.84b8	10 10		bpl $84ca			bpl 	_CRNotKeyword
.84ba	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.84bc	b0 04		bcs $84c2			bcs 	_CRIsKeyword
.84be	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.84c0	b0 28		bcs $84ea			bcs		_CRSyntaxError
.84c2					_CRIsKeyword:
.84c2	c8		iny				iny 								; consume command
.84c3	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.84c4	aa		tax				tax 								; put in X for vector jump
.84c5	20 ed 84	jsr $84ed			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.84c8	80 e9		bra $84b3			bra 	_CRMainLoop 				; and loop round
.84ca					_CRNotKeyword:
.84ca	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.84cc	f0 e4		beq $84b2			beq 	_CRIncMainLoop
.84ce	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.84d0	90 05		bcc $84d7			bcc 	_CRNotVariable
.84d2					_CRGoLet:
.84d2	20 a4 83	jsr $83a4			jsr 	LetCommand
.84d5	80 dc		bra $84b3			bra 	_CRMainLoop
.84d7					_CRNotVariable:
.84d7	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.84d9	f0 f7		beq $84d2			beq 	_CRGoLet
.84db	c9 21		cmp #$21			cmp 	#KWD_PLING
.84dd	f0 f3		beq $84d2			beq 	_CRGoLet
.84df	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.84e1	f0 01		beq $84e4			beq 	_CRGoRem
>84e3	db						.byte 	$DB 						; causes a break in the emulator
.84e4					_CRGoRem:
.84e4	c8		iny				iny
.84e5	20 6f 84	jsr $846f			jsr 	RemCommand
.84e8	80 c9		bra $84b3			bra 	_CRMainLoop
.84ea					_CRSyntaxError:
.84ea	4c 03 9b	jmp $9b03			jmp 	SyntaxError
.84ed					_CRCallVector0:
.84ed	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.84f0					CRNoProgram:
.84f0	4c 33 82	jmp $8233			jmp 	EndCommand
.84f3					EOLCommand:
.84f3	18		clc				clc
.84f4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84f6	65 30		adc $30				adc 	codePtr
.84f8	85 30		sta $30				sta 	codePtr
.84fa	90 02		bcc $84fe			bcc 	_CREExit
.84fc	e6 31		inc $31				inc 	codePtr+1
.84fe					_CREExit:
.84fe	80 a9		bra $84a9			bra 	RunNewLine
.8500					Shift1Command:
.8500	b1 30		lda ($30),y			lda 	(codePtr),y
.8502	c8		iny				iny
.8503	0a		asl a				asl 	a
.8504	aa		tax				tax
.8505	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.8508					Unused1:
.8508					Unused2:
.8508					Unused3:
.8508	4c 03 9b	jmp $9b03			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.850b					ProcedureScan:
.850b	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.850d	85 30		sta $30				sta 	codePtr
.850f	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8511	85 31		sta $31				sta 	codePtr+1
.8513					_PSLoop:
.8513	b2 30		lda ($30)			lda 	(codePtr)
.8515	f0 42		beq $8559			beq 	_PSExit
.8517	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8519	b1 30		lda ($30),y			lda 	(codePtr),y
.851b	c9 98		cmp #$98			cmp 	#KWD_PROC
.851d	d0 2d		bne $854c			bne 	_PSNext
.851f	c8		iny				iny 								; get the address of the record to zTemp0 and
.8520	b1 30		lda ($30),y			lda 	(codePtr),y
.8522	29 c0		and #$c0			and 	#$C0
.8524	c9 40		cmp #$40			cmp 	#$40
.8526	d0 32		bne $855a			bne 	_PSSyntax
.8528	b1 30		lda ($30),y			lda 	(codePtr),y
.852a	18		clc				clc
.852b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.852d	85 37		sta $37				sta 	zTemp0+1
.852f	c8		iny				iny 								; LSB
.8530	b1 30		lda ($30),y			lda 	(codePtr),y
.8532	85 36		sta $36				sta 	zTemp0
.8534	c8		iny				iny 								; character after variable call.
.8535	98		tya				tya 								; save Y offset at +7
.8536	a0 07		ldy #$07			ldy 	#7
.8538	91 36		sta ($36),y			sta 	(zTemp0),y
.853a	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.853c	a0 02		ldy #$02			ldy 	#2
.853e	91 36		sta ($36),y			sta 	(zTemp0),y
.8540	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8542					_PSCopy:
.8542	b5 30		lda $30,x			lda 	safePtr,x
.8544	c8		iny				iny
.8545	91 36		sta ($36),y			sta 	(zTemp0),y
.8547	e8		inx				inx
.8548	e0 04		cpx #$04			cpx 	#4
.854a	d0 f6		bne $8542			bne 	_PSCopy
.854c					_PSNext:
.854c	18		clc				clc
.854d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.854f	65 30		adc $30				adc 	codePtr
.8551	85 30		sta $30				sta 	codePtr
.8553	90 02		bcc $8557			bcc 	_CREExit
.8555	e6 31		inc $31				inc 	codePtr+1
.8557					_CREExit:
.8557	80 ba		bra $8513			bra 	_PSLoop
.8559					_PSExit:
.8559	60		rts				rts
.855a					_PSSyntax:
.855a	4c 03 9b	jmp $9b03			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.855d					ScanForward:
.855d	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.855f	86 37		stx $37				stx 	zTemp0+1
.8561	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8563					_ScanLoop:
.8563	b1 30		lda ($30),y			lda 	(codePtr),y
.8565	c8		iny				iny
.8566	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8568	d0 09		bne $8573			bne 	_ScanGoNext
.856a	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.856c	f0 04		beq $8572			beq 	_ScanMatch
.856e	c5 37		cmp $37				cmp 	zTemp0+1
.8570	d0 01		bne $8573			bne 	_ScanGoNext
.8572					_ScanMatch:
.8572	60		rts				rts
.8573					_ScanGoNext:
.8573	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8575	90 ec		bcc $8563			bcc 	_ScanLoop
.8577	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8579	90 18		bcc $8593			bcc 	_ScanSkipOne
.857b	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.857d	b0 2f		bcs $85ae			bcs 	_ScanSkipData
.857f	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8581	90 e0		bcc $8563			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8583	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8585	b0 dc		bcs $8563			bcs 	_ScanLoop
.8587	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8589	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.858b	b0 d6		bcs $8563			bcs 	_ScanLoop
.858d	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.858f	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8591	80 d0		bra $8563			bra 	_ScanLoop
.8593					_ScanSkipOne:
.8593	c8		iny				iny 								; consume the extra one.
.8594	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8596	d0 cb		bne $8563			bne 	_ScanLoop
.8598	18		clc				clc
.8599	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.859b	65 30		adc $30				adc 	codePtr
.859d	85 30		sta $30				sta 	codePtr
.859f	90 02		bcc $85a3			bcc 	_CREExit
.85a1	e6 31		inc $31				inc 	codePtr+1
.85a3					_CREExit:
.85a3	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.85a5	b2 30		lda ($30)			lda 	(codePtr)
.85a7	d0 ba		bne $8563			bne 	_ScanLoop 					; if not zero, more to scan
.85a9	a9 13		lda #$13		lda	#19
.85ab	4c e6 85	jmp $85e6		jmp	ErrorHandler
.85ae					_ScanSkipData:
.85ae	88		dey				dey 								; point at data token
.85af	c8		iny				iny
.85b0	98		tya				tya
.85b1	38		sec				sec
.85b2	71 30		adc ($30),y			adc 	(codePtr),y
.85b4	a8		tay				tay
.85b5	80 ac		bra $8563			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.85b7					Command_WHILE:
.85b7	5a		phy				phy 								; save position of the test
.85b8	a2 00		ldx #$00			ldx 	#0
.85ba	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber 				; work out the number
.85bd	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; check if zero
.85c0	f0 0e		beq $85d0			beq 	_WHExitLoop 				; if so exit the loop
.85c2	98		tya				tya 								; position *after* test.
.85c3	7a		ply				ply 								; restore position before test, at WHILE
.85c4	88		dey				dey
.85c5	48		pha				pha 								; push after test on the stack
.85c6	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.85c8	20 ca 90	jsr $90ca			jsr 	StackOpen
.85cb	20 fc 90	jsr $90fc			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.85ce	7a		ply				ply 								; restore the position *after* the test
.85cf	60		rts				rts
.85d0					_WHExitLoop:
.85d0	68		pla				pla 								; throw post loop position
.85d1	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.85d3	aa		tax				tax
.85d4	20 5d 85	jsr $855d			jsr 	ScanForward
.85d7	60		rts				rts
.85d8					Command_WEND:
.85d8	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.85da	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.85dc	20 f1 90	jsr $90f1			jsr 	StackCheckFrame
.85df	20 0d 91	jsr $910d			jsr 	STKLoadCodePosition 		; loop back
.85e2	20 e3 90	jsr $90e3			jsr 	StackClose		 			; erase the frame
.85e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9633					CheckRightBracket:
.9633	b1 30		lda ($30),y			lda 	(codePtr),y
.9635	c8		iny				iny
.9636	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9638	d0 0f		bne $9649			bne 	CNAFail
.963a	60		rts				rts
.963b					CheckComma:
.963b	b1 30		lda ($30),y			lda 	(codePtr),y
.963d	c8		iny				iny
.963e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9640	d0 07		bne $9649			bne 	CNAFail
.9642	60		rts				rts
.9643					CheckNextA:
.9643	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9645	d0 02		bne $9649			bne 	CNAFail
.9647	c8		iny				iny 								; skip character
.9648	60		rts				rts 								; and exit
.9649					CNAFail:
.9649	4c 03 9b	jmp $9b03			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.85e6					ErrorHandler:
.85e6	a8		tay				tay 								; find the error text
.85e7	f0 42		beq $862b			beq 	_EHEnd
.85e9	a2 00		ldx #$00			ldx 	#0
.85eb					_EHFind:
.85eb	88		dey				dey 								; found the error text ?
.85ec	f0 0a		beq $85f8			beq 	_EHFound
.85ee					_EHFindZero:
.85ee	bd 1c 9b	lda $9b1c,x			lda 	ErrorText,x 				; find the next error
.85f1	e8		inx				inx
.85f2	c9 00		cmp #$00			cmp 	#0
.85f4	d0 f8		bne $85ee			bne 	_EHFindZero
.85f6	80 f3		bra $85eb			bra 	_EHFind
.85f8					_EHFound:
.85f8	bd 1c 9b	lda $9b1c,x			lda 	ErrorText,x 				; print the message
.85fb	20 56 9d	jsr $9d56			jsr 	EXTPrintCharacter
.85fe	e8		inx				inx
.85ff	bd 1c 9b	lda $9b1c,x			lda 	ErrorText,x
.8602	d0 f4		bne $85f8			bne 	_EHFound
.8604	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8606	b1 30		lda ($30),y			lda 	(codePtr),y
.8608	d0 05		bne $860f			bne 	_EHAtMsg
.860a	c8		iny				iny
.860b	b1 30		lda ($30),y			lda 	(codePtr),y
.860d	f0 17		beq $8626			beq 	_EHCREnd
.860f					_EHAtMsg:
.860f	a2 86		ldx #$86			ldx 	#_AtMsg >> 8 				; print " at "
.8611	a9 2e		lda #$2e			lda 	#_AtMsg & $FF
.8613	20 38 86	jsr $8638			jsr 	PrintStringXA
.8616	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8618	b1 30		lda ($30),y			lda 	(codePtr),y
.861a	48		pha				pha
.861b	c8		iny				iny
.861c	b1 30		lda ($30),y			lda 	(codePtr),y
.861e	aa		tax				tax
.861f	68		pla				pla
.8620	20 8f 97	jsr $978f			jsr 	ConvertInt16 				; convert XA to string
.8623	20 38 86	jsr $8638			jsr 	PrintStringXA 				; and print it.
.8626					_EHCREnd:
.8626	a9 0d		lda #$0d			lda 	#13 						; new line
.8628	20 56 9d	jsr $9d56			jsr 	EXTPrintCharacter
.862b					_EHEnd:
.862b	4c 0c 80	jmp $800c			jmp 	WarmStart
>862e	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8636	20 00
.8638					PrintStringXA:
.8638	5a		phy				phy
.8639	86 37		stx $37				stx 	zTemp0+1
.863b	85 36		sta $36				sta 	zTemp0
.863d	a0 00		ldy #$00			ldy 	#0
.863f					_PSXALoop:
.863f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8641	f0 06		beq $8649			beq 	_PSXAExit
.8643	20 56 9d	jsr $9d56			jsr 	EXTPrintCharacter
.8646	c8		iny				iny
.8647	80 f6		bra $863f			bra 	_PSXALoop
.8649					_PSXAExit:
.8649	7a		ply				ply
.864a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.864b					UnaryTrue:
.864b	fa		plx				plx
.864c					ReturnTrue:
.864c	a9 01		lda #$01			lda 	#1  						; set to 1
.864e	20 8f 90	jsr $908f			jsr 	NSMSetByte
.8651	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8653	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8656	60		rts				rts
.8657					UnaryFalse:
.8657	fa		plx				plx
.8658					ReturnFalse:
.8658	4c 8d 90	jmp $908d			jmp 	NSMSetZero 					; set it all to zero
.865b					BinaryCompareEqual:
.865b	fa		plx				plx
.865c	20 97 86	jsr $8697			jsr 	CompareBaseCode
.865f	c9 00		cmp #$00			cmp 	#0
.8661	f0 e9		beq $864c			beq 	ReturnTrue
.8663	80 f3		bra $8658			bra 	ReturnFalse
.8665					BinaryCompareLess:
.8665	fa		plx				plx
.8666	20 97 86	jsr $8697			jsr 	CompareBaseCode
.8669	c9 ff		cmp #$ff			cmp 	#$FF
.866b	f0 df		beq $864c			beq 	ReturnTrue
.866d	80 e9		bra $8658			bra 	ReturnFalse
.866f					BinaryCompareGreater:
.866f	fa		plx				plx
.8670	20 97 86	jsr $8697			jsr 	CompareBaseCode
.8673	c9 01		cmp #$01			cmp 	#1
.8675	f0 d5		beq $864c			beq 	ReturnTrue
.8677	80 df		bra $8658			bra 	ReturnFalse
.8679					BinaryCompareNotEqual:
.8679	fa		plx				plx
.867a	20 97 86	jsr $8697			jsr 	CompareBaseCode
.867d	c9 00		cmp #$00			cmp 	#0
.867f	d0 cb		bne $864c			bne 	ReturnTrue
.8681	80 d5		bra $8658			bra 	ReturnFalse
.8683					BinaryCompareLessEqual:
.8683	fa		plx				plx
.8684	20 97 86	jsr $8697			jsr 	CompareBaseCode
.8687	c9 01		cmp #$01			cmp 	#1
.8689	d0 c1		bne $864c			bne 	ReturnTrue
.868b	80 cb		bra $8658			bra 	ReturnFalse
.868d					BinaryCompareGreaterEqual:
.868d	fa		plx				plx
.868e	20 97 86	jsr $8697			jsr 	CompareBaseCode
.8691	c9 ff		cmp #$ff			cmp 	#$FF
.8693	d0 b7		bne $864c			bne 	ReturnTrue
.8695	80 c1		bra $8658			bra 	ReturnFalse
.8697					CompareBaseCode:
.8697	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; make both values if references.
.869a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.869d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86a0	29 10		and #$10			and 	#NSTString
.86a2	d0 40		bne $86e4			bne 	_CBCString
.86a4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.86a7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86aa	d0 3b		bne $86e7			bne 	_CBCFloat
.86ac	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86af	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86b2	29 08		and #$08			and 	#NSTFloat
.86b4	d0 31		bne $86e7			bne 	_CBCFloat
.86b6	20 ea 86	jsr $86ea			jsr 	CompareFixMinusZero
.86b9	e8		inx				inx
.86ba	20 ea 86	jsr $86ea			jsr 	CompareFixMinusZero
.86bd	ca		dex				dex
.86be	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.86c1	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.86c4	10 0b		bpl $86d1			bpl 	_CDCSameSign
.86c6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.86c9	30 16		bmi $86e1			bmi 	_CBCLess 					; return $FF
.86cb					_CBCGreater:
.86cb	a9 01		lda #$01			lda 	#1
.86cd	60		rts				rts
.86ce					_CBCEqual:
.86ce	a9 00		lda #$00			lda 	#0
.86d0	60		rts				rts
.86d1					_CDCSameSign:
.86d1	20 fa 87	jsr $87fa			jsr 	SubTopTwoStack 				; unsigned subtract
.86d4	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; or the mantissa together
.86d7	f0 f5		beq $86ce			beq 	_CBCEqual 					; -0 == 0
.86d9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.86dc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.86df	10 ea		bpl $86cb			bpl 	_CBCGreater
.86e1					_CBCLess:
.86e1	a9 ff		lda #$ff			lda 	#$FF
.86e3	60		rts				rts
.86e4					_CBCString:
.86e4	4c 50 87	jmp $8750			jmp 	CompareStrings
.86e7					_CBCFloat:
.86e7	4c 8b 98	jmp $988b			jmp 	CompareFloat
.86ea					CompareFixMinusZero:
.86ea	20 bd 90	jsr $90bd			jsr 	NSMIsZero
.86ed	d0 03		bne $86f2			bne 	_CFXMZNotZero
.86ef	9e 00 06	stz $0600,x			stz 	NSStatus,x
.86f2					_CFXMZNotZero:
.86f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.86f3					StringConcat:
.86f3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.86f6	3d 01 06	and $0601,x			and 	NSStatus+1,x
.86f9	29 18		and #$18			and 	#NSBTypeMask
.86fb	c9 10		cmp #$10			cmp 	#NSTString
.86fd	d0 4e		bne $874d			bne		_SCType
.86ff	64 38		stz $38				stz 	zTemp1 						; counting total length
.8701	e8		inx				inx
.8702	20 20 87	jsr $8720			jsr 	_SCSetupZ0 					; setup for second
.8705	20 2b 87	jsr $872b			jsr 	_SCLengthZ0 				; length for second
.8708	ca		dex				dex
.8709	20 20 87	jsr $8720			jsr 	_SCSetupZ0 					; setup for first
.870c	20 2b 87	jsr $872b			jsr 	_SCLengthZ0 				; length for first
.870f	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8711	20 ed 9c	jsr $9ced			jsr 	StringTempAllocate
.8714	20 3e 87	jsr $873e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8717	e8		inx				inx
.8718	20 20 87	jsr $8720			jsr 	_SCSetupZ0 					; copy second out
.871b	20 3e 87	jsr $873e			jsr 	_SCCopy
.871e	ca		dex				dex
.871f	60		rts				rts
.8720					_SCSetupZ0:
.8720	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8723	85 36		sta $36				sta 	zTemp0
.8725	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8728	85 37		sta $37				sta 	zTemp0+1
.872a	60		rts				rts
.872b					_SCLengthZ0:
.872b	5a		phy				phy
.872c	a0 00		ldy #$00			ldy 	#0
.872e					_SCLenLoop:
.872e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8730	f0 0a		beq $873c			beq 	_SCLExit
.8732	c8		iny				iny
.8733	e6 38		inc $38				inc 	zTemp1
.8735	10 f7		bpl $872e			bpl		_SCLenLoop
.8737	a9 09		lda #$09		lda	#9
.8739	4c e6 85	jmp $85e6		jmp	ErrorHandler
.873c					_SCLExit:
.873c	7a		ply				ply
.873d	60		rts				rts
.873e					_SCCopy:
.873e	5a		phy				phy
.873f	a0 00		ldy #$00			ldy 	#0
.8741					_SCCopyLoop:
.8741	b1 36		lda ($36),y			lda 	(zTemp0),y
.8743	f0 06		beq $874b			beq 	_SCCExit
.8745	20 2b 9d	jsr $9d2b			jsr 	StringTempWrite
.8748	c8		iny				iny
.8749	80 f6		bra $8741			bra 	_SCCopyLoop
.874b					_SCCExit:
.874b	7a		ply				ply
.874c	60		rts				rts
.874d					_SCType:
.874d	4c 0d 9b	jmp $9b0d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.964c					IntegerDivide:
.964c	fa		plx				plx
.964d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9650	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9653	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9654	0a		asl a				asl 	a
.9655	10 05		bpl $965c			bpl 	_NotRef
.9657	48		pha				pha
.9658	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.965b	68		pla				pla
.965c					_NotRef:
.965c	0a		asl a				asl 	a
.965d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.965f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9662	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9665	f0 03		beq $966a			beq 	_IntegerCode 				; if clear, then we have two integers
.9667	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.966a					_IntegerCode:
.966a	20 8c 96	jsr $968c			jsr 	CheckDivideZero 			; do div zero check
.966d	20 c4 96	jsr $96c4			jsr 	Int32Divide 				; do the division
.9670	20 81 97	jsr $9781			jsr 	CalculateSign 				; calculate result sign
.9673					NSMCopyPlusTwoToZero:
.9673	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9676	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9679	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.967c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.967f	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9682	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9685	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9688	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.968b	60		rts				rts
.968c					CheckDivideZero:
.968c	e8		inx				inx
.968d	20 bd 90	jsr $90bd			jsr 	NSMIsZero
.9690	f0 02		beq $9694			beq 	_CDVError
.9692	ca		dex				dex
.9693	60		rts				rts
.9694					_CDVError:
.9694	a9 03		lda #$03		lda	#3
.9696	4c e6 85	jmp $85e6		jmp	ErrorHandler
.9699					IntegerModulus:
.9699	fa		plx				plx
.969a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.969d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.96a0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96a1	0a		asl a				asl 	a
.96a2	10 05		bpl $96a9			bpl 	_NotRef
.96a4	48		pha				pha
.96a5	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96a8	68		pla				pla
.96a9					_NotRef:
.96a9	0a		asl a				asl 	a
.96aa	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96ac	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96af	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.96b2	f0 03		beq $96b7			beq 	_IntegerCode 				; if clear, then we have two integers
.96b4	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.96b7					_IntegerCode:
.96b7	20 8c 96	jsr $968c			jsr 	CheckDivideZero 			; do div zero check
.96ba	20 c4 96	jsr $96c4			jsr 	Int32Divide 				; do the division
.96bd	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.96c0	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.96c3	60		rts				rts
.96c4					Int32Divide:
.96c4	48		pha				pha 								; save AXY
.96c5	5a		phy				phy
.96c6	20 64 90	jsr $9064			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.96c9	20 89 90	jsr $9089			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.96cc	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.96ce					_I32DivideLoop:
.96ce	e8		inx				inx
.96cf	e8		inx				inx
.96d0	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.96d3	ca		dex				dex
.96d4	ca		dex				dex
.96d5	20 a3 90	jsr $90a3			jsr 	NSMRotateLeft
.96d8	20 04 97	jsr $9704			jsr 	DivideCheckSubtract 		; check if subtract possible
.96db	90 03		bcc $96e0			bcc 	_I32DivideNoCarryIn
.96dd	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.96e0					_I32DivideNoCarryIn:
.96e0	88		dey				dey 								; loop round till division completed.
.96e1	d0 eb		bne $96ce			bne 	_I32DivideLoop
.96e3	7a		ply				ply 								; restore AXY and exit
.96e4	68		pla				pla
.96e5	60		rts				rts
.96e6					Int32ShiftDivide:
.96e6	48		pha				pha 								; save AY
.96e7	5a		phy				phy
.96e8	e8		inx				inx 								; clear S[X+2]
.96e9	e8		inx				inx
.96ea	20 8d 90	jsr $908d			jsr 	NSMSetZero
.96ed	ca		dex				dex
.96ee	ca		dex				dex
.96ef	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.96f1					_I32SDLoop:
.96f1	20 04 97	jsr $9704			jsr 	DivideCheckSubtract 		; check if subtract possible
.96f4	e8		inx				inx
.96f5	e8		inx				inx
.96f6	20 a3 90	jsr $90a3			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.96f9	ca		dex				dex
.96fa	ca		dex				dex
.96fb	20 a3 90	jsr $90a3			jsr 	NSMRotateLeft
.96fe	88		dey				dey 	 							; do 31 times
.96ff	d0 f0		bne $96f1			bne 	_I32SDLoop
.9701	7a		ply				ply 								; restore AY and exit
.9702	68		pla				pla
.9703	60		rts				rts
.9704					DivideCheckSubtract:
.9704	20 fa 87	jsr $87fa			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9707	b0 04		bcs $970d			bcs 	_DCSExit 					; if carry set, then could do, exit
.9709	20 d4 87	jsr $87d4			jsr 	AddTopTwoStack 				; add it back in
.970c	18		clc				clc 								; and return False
.970d					_DCSExit:
.970d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.970e					MulInteger:
.970e	fa		plx				plx
.970f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9712	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9715	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9716	0a		asl a				asl 	a
.9717	10 05		bpl $971e			bpl 	_NotRef
.9719	48		pha				pha
.971a	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.971d	68		pla				pla
.971e					_NotRef:
.971e	0a		asl a				asl 	a 							; put MSB of type into A:7
.971f	30 0b		bmi $972c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9721	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9724	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9727	f0 06		beq $972f			beq 	_IntegerCode 				; if clear, then we have two integers
.9729	4c 62 99	jmp $9962			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.972c					_StringData:
.972c	4c 17 9b	jmp $9b17			jmp 	NotDoneError							; at least one string - don't know both are strings.
.972f					_IntegerCode:
.972f	20 3c 97	jsr $973c			jsr 	MultiplyShort
.9732	c9 00		cmp #$00			cmp 	#0
.9734	f0 05		beq $973b			beq 	_MIExit
.9736	a9 04		lda #$04		lda	#4
.9738	4c e6 85	jmp $85e6		jmp	ErrorHandler
.973b					_MIExit:
.973b	60		rts				rts
.973c					MultiplyShort:
.973c	5a		phy				phy 								; save Y
.973d	20 64 90	jsr $9064			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9740	20 89 90	jsr $9089			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9743	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9745					_I32MLoop:
.9745	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9748	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.974b	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.974e	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9751	f0 28		beq $977b			beq 	_I32MExit 					; exit if zero
.9753	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9756	29 01		and #$01			and 	#1
.9758	f0 0e		beq $9768			beq 	_I32MNoAdd
.975a	20 d4 87	jsr $87d4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.975d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9760	10 06		bpl $9768			bpl 	_I32MNoAdd
.9762					_I32ShiftRight:
.9762	20 b0 90	jsr $90b0			jsr 	NSMShiftRight 				; shift S[X] right
.9765	c8		iny				iny 								; increment shift count
.9766	80 0a		bra $9772			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9768					_I32MNoAdd:
.9768	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.976b	70 f5		bvs $9762			bvs 	_I32ShiftRight 				; instead.
.976d	e8		inx				inx
.976e	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9771	ca		dex				dex
.9772					_I32MShiftUpper:
.9772	e8		inx				inx 								; shift S[X+2] right
.9773	e8		inx				inx
.9774	20 b0 90	jsr $90b0			jsr 	NSMShiftRight
.9777	ca		dex				dex
.9778	ca		dex				dex
.9779	80 ca		bra $9745			bra 	_I32MLoop 					; try again.
.977b					_I32MExit:
.977b	20 81 97	jsr $9781			jsr 	CalculateSign
.977e	98		tya				tya 								; shift in A
.977f	7a		ply				ply 								; restore Y and exit
.9780	60		rts				rts
.9781					CalculateSign:
.9781	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9784	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9787	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.978a	0a		asl a				asl 	a 							; shift bit 7 into carry
.978b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.978e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8750					CompareStrings:
.8750	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8753	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8756	29 10		and #$10			and 	#NSBIsString
.8758	f0 2c		beq $8786			beq 	_CSTypeError
.875a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.875d	85 36		sta $36				sta 	zTemp0
.875f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8762	85 37		sta $37				sta 	zTemp0+1
.8764	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8767	85 38		sta $38				sta 	zTemp1
.8769	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.876c	85 39		sta $39				sta 	zTemp1+1
.876e	5a		phy				phy 								; save Y so we can access strings
.876f	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8771					_CSLoop:
.8771	c8		iny				iny
.8772	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8774	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8776	d0 06		bne $877e			bne 	_CSDifferent
.8778	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.877a	d0 f5		bne $8771			bne 	_CSLoop 					; still comparing
.877c					_CSExit:
.877c	7a		ply				ply 								; reached end, return zero in A from EOS
.877d	60		rts				rts
.877e					_CSDifferent:
.877e	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8780	90 fa		bcc $877c			bcc		_CSExit
.8782	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8784	80 f6		bra $877c			bra 	_CSExit
.8786					_CSTypeError:
.8786	4c 0d 9b	jmp $9b0d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8789					ShiftLeft:
.8789	38		sec				sec
.878a	80 01		bra $878d			bra 	ShiftMain
.878c					ShiftRight:
.878c	18		clc				clc
.878d					ShiftMain:
.878d	fa		plx				plx 								; restore X
.878e	08		php				php 								; save direction
.878f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8792	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8795	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8796	0a		asl a				asl 	a
.8797	10 05		bpl $879e			bpl 	_NotRef
.8799	48		pha				pha
.879a	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.879d	68		pla				pla
.879e					_NotRef:
.879e	0a		asl a				asl 	a
.879f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87a1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87a4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87a7	f0 03		beq $87ac			beq 	_IntegerCode 				; if clear, then we have two integers
.87a9	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.87ac					_IntegerCode:
.87ac	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.87af	29 e0		and #$e0			and 	#$E0
.87b1	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.87b4	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.87b7	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.87ba	d0 13		bne $87cf			bne 	_SMExit0 					; if >= 32 it will always return zero.
.87bc					_SMLoop:
.87bc	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.87bf	30 11		bmi $87d2			bmi 	_SMExit 					; exit if done.
.87c1	28		plp				plp 								; restore direcition setting
.87c2	08		php				php
.87c3	90 05		bcc $87ca			bcc 	_SMRight
.87c5	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; shift left if CS
.87c8	80 f2		bra $87bc			bra 	_SMLoop
.87ca					_SMRight:
.87ca	20 b0 90	jsr $90b0			jsr 	NSMShiftRight 				; shift right if CC
.87cd	80 ed		bra $87bc			bra 	_SMLoop
.87cf					_SMExit0:
.87cf	20 8d 90	jsr $908d			jsr 	NSMSetZero 					; return zero.
.87d2					_SMExit:
.87d2	28		plp				plp 								; throw direction
.87d3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.87d4					AddTopTwoStack:
.87d4	18		clc				clc
.87d5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87d8	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.87db	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87de	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87e1	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.87e4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87e7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87ea	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.87ed	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87f0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.87f3	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.87f6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87f9	60		rts				rts
.87fa					SubTopTwoStack:
.87fa	38		sec				sec
.87fb	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87fe	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8801	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8804	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8807	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.880a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.880d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8810	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8813	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8816	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8819	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.881c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.881f	60		rts				rts
.8820					AddInteger:
.8820	fa		plx				plx
.8821	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8824	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8827	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8828	0a		asl a				asl 	a
.8829	10 05		bpl $8830			bpl 	_NotRef
.882b	48		pha				pha
.882c	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.882f	68		pla				pla
.8830					_NotRef:
.8830	0a		asl a				asl 	a 							; put MSB of type into A:7
.8831	30 0b		bmi $883e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8833	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8836	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8839	f0 06		beq $8841			beq 	_IntegerCode 				; if clear, then we have two integers
.883b	4c ea 97	jmp $97ea			jmp 	FloatingPointAdd 							; otherwise at least one float.
.883e					_StringData:
.883e	4c f3 86	jmp $86f3			jmp 	StringConcat							; at least one string - don't know both are strings.
.8841					_IntegerCode:
.8841					AddCode:
.8841	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8844	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8847	10 8b		bpl $87d4			bpl 	AddTopTwoStack
.8849	20 fa 87	jsr $87fa			jsr 	SubTopTwoStack 				; do a physical subtraction
.884c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.884f	10 09		bpl $885a			bpl 	_AddExit
.8851	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8854	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8857	20 42 90	jsr $9042			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.885a					_AddExit:
.885a	60		rts				rts
.885b					SubInteger:
.885b	fa		plx				plx
.885c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.885f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8862	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8863	0a		asl a				asl 	a
.8864	10 05		bpl $886b			bpl 	_NotRef
.8866	48		pha				pha
.8867	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.886a	68		pla				pla
.886b					_NotRef:
.886b	0a		asl a				asl 	a 							; put MSB of type into A:7
.886c	30 0b		bmi $8879			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.886e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8871	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8874	f0 06		beq $887c			beq 	_IntegerCode 				; if clear, then we have two integers
.8876	4c ef 97	jmp $97ef			jmp 	FloatingPointSub 							; otherwise at least one float.
.8879					_StringData:
.8879	4c 17 9b	jmp $9b17			jmp 	NotDoneError							; at least one string - don't know both are strings.
.887c					_IntegerCode:
.887c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.887f	49 80		eor #$80			eor 	#$80
.8881	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8884	80 bb		bra $8841			bra 	AddCode 					; and do the same code as add.
.8886					AndInteger:
.8886	fa		plx				plx
.8887	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.888a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.888d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.888e	0a		asl a				asl 	a
.888f	10 05		bpl $8896			bpl 	_NotRef
.8891	48		pha				pha
.8892	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8895	68		pla				pla
.8896					_NotRef:
.8896	0a		asl a				asl 	a
.8897	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8899	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.889c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.889f	f0 03		beq $88a4			beq 	_IntegerCode 				; if clear, then we have two integers
.88a1	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.88a4					_IntegerCode:
.88a4	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.88a7	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.88aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88ad	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.88b0	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.88b3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88b6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.88b9	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.88bc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.88bf	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.88c2	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.88c5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.88c8	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.88cb	60		rts				rts
.88cc					OraInteger:
.88cc	fa		plx				plx
.88cd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88d0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88d3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88d4	0a		asl a				asl 	a
.88d5	10 05		bpl $88dc			bpl 	_NotRef
.88d7	48		pha				pha
.88d8	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88db	68		pla				pla
.88dc					_NotRef:
.88dc	0a		asl a				asl 	a
.88dd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88df	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88e2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88e5	f0 03		beq $88ea			beq 	_IntegerCode 				; if clear, then we have two integers
.88e7	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.88ea					_IntegerCode:
.88ea	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.88ed	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.88f0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88f3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.88f6	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.88f9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88fc	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.88ff	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8902	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8905	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8908	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.890b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.890e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8911	60		rts				rts
.8912					EorInteger:
.8912	fa		plx				plx
.8913	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8916	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8919	0a		asl a				asl 	a 							; shift reference bit into sign bit
.891a	0a		asl a				asl 	a
.891b	10 05		bpl $8922			bpl 	_NotRef
.891d	48		pha				pha
.891e	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8921	68		pla				pla
.8922					_NotRef:
.8922	0a		asl a				asl 	a
.8923	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8925	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8928	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.892b	f0 03		beq $8930			beq 	_IntegerCode 				; if clear, then we have two integers
.892d	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.8930					_IntegerCode:
.8930	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8933	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8936	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8939	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.893c	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.893f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8942	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8945	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8948	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.894b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.894e	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8951	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8954	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8957	60		rts				rts
.8958					WordIndirect:
.8958	fa		plx				plx
.8959	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.895c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.895f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8960	0a		asl a				asl 	a
.8961	10 05		bpl $8968			bpl 	_NotRef
.8963	48		pha				pha
.8964	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8967	68		pla				pla
.8968					_NotRef:
.8968	0a		asl a				asl 	a
.8969	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.896b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.896e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8971	f0 03		beq $8976			beq 	_IntegerCode 				; if clear, then we have two integers
.8973	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.8976					_IntegerCode:
.8976	20 41 88	jsr $8841			jsr 	AddCode 					; add the two values
.8979	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.897b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.897e	60		rts				rts
.897f					ByteIndirect:
.897f	fa		plx				plx
.8980	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8983	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8986	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8987	0a		asl a				asl 	a
.8988	10 05		bpl $898f			bpl 	_NotRef
.898a	48		pha				pha
.898b	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.898e	68		pla				pla
.898f					_NotRef:
.898f	0a		asl a				asl 	a
.8990	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8992	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8995	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8998	f0 03		beq $899d			beq 	_IntegerCode 				; if clear, then we have two integers
.899a	4c 0d 9b	jmp $9b0d			jmp 	TypeError 					; anything else, type mismatch.
.899d					_IntegerCode:
.899d	20 41 88	jsr $8841			jsr 	AddCode 					; add the two values
.89a0	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.89a2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.978f					ConvertInt16:
.978f	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9792	8e 10 06	stx $0610			stx 	NSMantissa1
.9795	9c 18 06	stz $0618			stz 	NSMantissa2
.9798	9c 20 06	stz $0620			stz 	NSMantissa3
.979b	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.979e	a2 00		ldx #$00			ldx 	#0 							; stack level
.97a0	a9 0a		lda #$0a			lda 	#10 						; base
.97a2	80 00		bra $97a4			bra 	ConvertInt32
.97a4					ConvertInt32:
.97a4	5a		phy				phy
.97a5	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.97a7	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.97aa	10 08		bpl $97b4			bpl 	_CI32NotNeg
.97ac	48		pha				pha
.97ad	a9 2d		lda #$2d			lda 	#'-'
.97af	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.97b2	c8		iny				iny
.97b3	68		pla				pla
.97b4					_CI32NotNeg:
.97b4	20 c2 97	jsr $97c2			jsr 	_CI32DivideConvert 			; recursive conversion
.97b7	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.97b9	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.97bc	7a		ply				ply
.97bd	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.97bf	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.97c1	60		rts				rts
.97c2					_CI32DivideConvert:
.97c2	e8		inx				inx 								; write to next slot up
.97c3	20 8f 90	jsr $908f			jsr 	NSMSetByte
.97c6	ca		dex				dex
.97c7	20 c4 96	jsr $96c4			jsr 	Int32Divide 				; divide
.97ca	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.97cd	48		pha				pha
.97ce	20 73 96	jsr $9673			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.97d1	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; is it zero ?
.97d4	f0 06		beq $97dc			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.97d6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.97d9	20 c2 97	jsr $97c2			jsr 	_CI32DivideConvert 			; and recusrively call.
.97dc					_CI32NoRecurse:
.97dc	68		pla				pla 								; remainder
.97dd	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.97df	90 02		bcc $97e3			bcc 	_CI32NotHex
.97e1	69 26		adc #$26			adc 	#6+32
.97e3					_CI32NotHex:
.97e3	69 30		adc #$30			adc 	#48
.97e5	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.97e8	c8		iny				iny
.97e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.89a6					PrecedenceLevel:
>89a6	04					.byte	 4	; $00 <<
>89a7	02					.byte	 2	; $01 <=
>89a8	02					.byte	 2	; $02 <>
>89a9	00					.byte	 0	; $03 !!3
>89aa	00					.byte	 0	; $04 ><
>89ab	02					.byte	 2	; $05 >=
>89ac	04					.byte	 4	; $06 >>
>89ad	00					.byte	 0	; $07 !!7
>89ae	00					.byte	 0	; $08 !!8
>89af	00					.byte	 0	; $09 !!9
>89b0	00					.byte	 0	; $0a !!10
>89b1	00					.byte	 0	; $0b !!11
>89b2	00					.byte	 0	; $0c !!12
>89b3	00					.byte	 0	; $0d !!13
>89b4	00					.byte	 0	; $0e !!14
>89b5	00					.byte	 0	; $0f !!15
>89b6	00					.byte	 0	; $10 @
>89b7	00					.byte	 0	; $11 !!17
>89b8	00					.byte	 0	; $12 !!18
>89b9	00					.byte	 0	; $13 [
>89ba	04					.byte	 4	; $14 \
>89bb	00					.byte	 0	; $15 ]
>89bc	01					.byte	 1	; $16 ^
>89bd	00					.byte	 0	; $17 _
>89be	00					.byte	 0	; $18 `
>89bf	00					.byte	 0	; $19 !!25
>89c0	00					.byte	 0	; $1a !!26
>89c1	00					.byte	 0	; $1b {
>89c2	01					.byte	 1	; $1c |
>89c3	00					.byte	 0	; $1d }
>89c4	00					.byte	 0	; $1e ~
>89c5	00					.byte	 0	; $1f [7m<7F>[m
>89c6	00					.byte	 0	; $20
>89c7	05					.byte	 5	; $21 !
>89c8	00					.byte	 0	; $22 "
>89c9	00					.byte	 0	; $23 #
>89ca	05					.byte	 5	; $24 $
>89cb	04					.byte	 4	; $25 %
>89cc	01					.byte	 1	; $26 &
>89cd	00					.byte	 0	; $27 '
>89ce	00					.byte	 0	; $28 (
>89cf	00					.byte	 0	; $29 )
>89d0	04					.byte	 4	; $2a *
>89d1	03					.byte	 3	; $2b +
>89d2	00					.byte	 0	; $2c ,
>89d3	03					.byte	 3	; $2d -
>89d4	00					.byte	 0	; $2e .
>89d5	04					.byte	 4	; $2f /
>89d6	00					.byte	 0	; $30 0
>89d7	00					.byte	 0	; $31 1
>89d8	00					.byte	 0	; $32 2
>89d9	00					.byte	 0	; $33 3
>89da	00					.byte	 0	; $34 4
>89db	00					.byte	 0	; $35 5
>89dc	00					.byte	 0	; $36 6
>89dd	00					.byte	 0	; $37 7
>89de	00					.byte	 0	; $38 8
>89df	00					.byte	 0	; $39 9
>89e0	00					.byte	 0	; $3a :
>89e1	00					.byte	 0	; $3b ;
>89e2	02					.byte	 2	; $3c <
>89e3	02					.byte	 2	; $3d =
>89e4	02					.byte	 2	; $3e >
>89e5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.89e6					EvaluateExpressionAt0:
.89e6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.89e8					EvaluateExpression:
.89e8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.89ea					EvaluateExpressionAtPrecedence:
.89ea	48		pha				pha 								; save precedence level
.89eb	20 b9 8c	jsr $8cb9			jsr 	EvaluateTerm 				; evaluate term into level X.
.89ee	68		pla				pla 								; restore precedence level.
.89ef					_EXPRLoop:
.89ef	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.89f1	b1 30		lda ($30),y			lda 	(codePtr),y
.89f3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.89f5	b0 25		bcs $8a1c			bcs 	_EXPRExit
.89f7	da		phx				phx 								; read the operator precedence
.89f8	aa		tax				tax
.89f9	bd a6 89	lda $89a6,x			lda 	PrecedenceLevel,x
.89fc	fa		plx				plx
.89fd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.89ff	f0 1b		beq $8a1c			beq 	_EXPRExit
.8a01	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8a03	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8a05	c5 37		cmp $37				cmp 	zTemp0+1
.8a07	b0 13		bcs $8a1c			bcs		_EXPRExit 					; if current >= operator exit
.8a09	48		pha				pha 								; save current precedence.
.8a0a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a0c	c8		iny				iny
.8a0d	48		pha				pha
.8a0e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8a10	e8		inx				inx 								; work out the right hand side.
.8a11	20 ea 89	jsr $89ea			jsr 	EvaluateExpressionAtPrecedence
.8a14	ca		dex				dex
.8a15	68		pla				pla 								; get operator, call the code.
.8a16	20 1f 8a	jsr $8a1f			jsr 	_EXPRCaller
.8a19	68		pla				pla 								; restore precedence level
.8a1a	80 d3		bra $89ef			bra 	_EXPRLoop 					; and go round.
.8a1c					_EXPRExit:
.8a1c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8a1e	60		rts				rts
.8a1f					_EXPRCaller:
.8a1f	da		phx				phx 								; save on stack, first thing is to restore it
.8a20	0a		asl a				asl 	a 							; double so can use vectors into X
.8a21	aa		tax				tax
.8a22	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.97ea					FloatingPointAdd:
.97ea	20 8b 99	jsr $998b			jsr 	FloatPrepare 				; prepare for floats
.97ed	80 0b		bra $97fa			bra 	FloatAdd
.97ef					FloatingPointSub:
.97ef	20 8b 99	jsr $998b			jsr 	FloatPrepare 				; prepare for floats
.97f2					FloatSubtract:
.97f2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.97f5	49 80		eor #$80			eor 	#$80
.97f7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.97fa					FloatAdd:
.97fa	48		pha				pha
.97fb	5a		phy				phy
.97fc	20 9c 99	jsr $999c			jsr 	NSNormalise 				; normalise S[X]
.97ff	f0 54		beq $9855			beq 	_FAReturn1
.9801	e8		inx				inx 								; normalise S[X+1]
.9802	20 9c 99	jsr $999c			jsr 	NSNormalise
.9805	ca		dex				dex
.9806	c9 00		cmp #$00			cmp 	#0
.9808	f0 6f		beq $9879			beq 	_FAExit 					; if so, just return A
.980a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.980d	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9810	f0 1b		beq $982d			beq 	_FAExponentsEqual
.9812	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9815	a8		tay				tay
.9816	38		sec				sec 								; do a signed comparison of the exponents.
.9817	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.981a	50 02		bvc $981e			bvc 	_FANoSignedChange
.981c	49 80		eor #$80			eor 	#$80
.981e					_FANoSignedChange:
.981e	29 80		and #$80			and 	#$80
.9820	10 03		bpl $9825			bpl 	_FAHaveMax
.9822	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9825					_FAHaveMax:
.9825	20 7c 98	jsr $987c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9828	e8		inx				inx
.9829	20 7c 98	jsr $987c			jsr 	_FAShiftToExponent
.982c	ca		dex				dex
.982d					_FAExponentsEqual:
.982d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9830	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9833	30 10		bmi $9845			bmi 	_FADifferentSigns
.9835	20 d4 87	jsr $87d4			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9838	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.983b	10 3c		bpl $9879			bpl 	_FAExit 					; if no, we are done.
.983d	20 b0 90	jsr $90b0			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9840	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9843	80 34		bra $9879			bra 	_FAExit
.9845					_FADifferentSigns:
.9845	20 fa 87	jsr $87fa			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9848	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.984b	10 2c		bpl $9879			bpl 	_FAExit 					; if no, we are done.
.984d	20 39 90	jsr $9039			jsr 	NSMNegate 					; netate result
.9850	20 42 90	jsr $9042			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9853	80 24		bra $9879			bra 	_FAExit
.9855					_FAReturn1:
.9855	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9858	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.985b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.985e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9861	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9864	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9867	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.986a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.986d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9870	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9873	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9876	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9879					_FAExit:
.9879	7a		ply				ply
.987a	68		pla				pla
.987b	60		rts				rts
.987c					_FAShiftToExponent:
.987c					_FAShiftToExponent2:
.987c	98		tya				tya 								; compare Y to exponent
.987d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9880	f0 08		beq $988a			beq 	_FASEExit 					; exit if so.
.9882	20 b0 90	jsr $90b0			jsr 	NSMShiftRight	 			; shift the mantissa right
.9885	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9888	80 f2		bra $987c			bra 	_FAShiftToExponent2
.988a					_FASEExit:
.988a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.988b					CompareFloat:
.988b	20 f2 97	jsr $97f2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.988e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9891	29 f8		and #$f8			and 	#$F8
.9893	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9896	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9899	f0 09		beq $98a4			beq 	_FCExit 					; zero, so approximately identical
.989b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.989d	3c 00 06	bit $0600,x			bit 	NSStatus,x
.98a0	10 02		bpl $98a4			bpl 	_FCExit
.98a2					_FCNegative:
.98a2	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.98a4					_FCExit:
.98a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.98a5					FDivideCommand:
.98a5	fa		plx				plx	 								; restore stack position
.98a6	20 8b 99	jsr $998b			jsr 	FloatPrepare 				; prepare for floats
.98a9					FloatDivide:
.98a9	48		pha				pha
.98aa	e8		inx				inx
.98ab	20 9c 99	jsr $999c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.98ae	ca		dex				dex
.98af	c9 00		cmp #$00			cmp 	#0
.98b1	f0 20		beq $98d3			beq 	_FDZero
.98b3	20 9c 99	jsr $999c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.98b6	f0 19		beq $98d1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.98b8	20 e6 96	jsr $96e6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.98bb	20 73 96	jsr $9673			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.98be	20 9c 99	jsr $999c			jsr		NSNormalise 				; renormalise
.98c1	20 81 97	jsr $9781			jsr 	CalculateSign 				; calculate result sign
.98c4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.98c7	38		sec				sec
.98c8	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.98cb	38		sec				sec
.98cc	e9 1e		sbc #$1e			sbc 	#30
.98ce	9d 28 06	sta $0628,x			sta 	NSExponent,x
.98d1					_FDExit:
.98d1	68		pla				pla
.98d2	60		rts				rts
.98d3					_FDZero:
.98d3	a9 03		lda #$03		lda	#3
.98d5	4c e6 85	jmp $85e6		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.98d8					FloatFractionalPart:
.98d8	5a		phy				phy
.98d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.98dc	29 7f		and #$7f			and 	#$7F
.98de	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98e1	20 9c 99	jsr $999c			jsr 	NSNormalise
.98e4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.98e7	38		sec				sec
.98e8	e9 e0		sbc #$e0			sbc 	#$E0
.98ea	90 31		bcc $991d			bcc 	_FFPExit 					; already fractional
.98ec	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.98ee	b0 2a		bcs $991a			bcs 	_FFPZero
.98f0	a8		tay				tay 								; put count to do in Y
.98f1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.98f4	20 1f 99	jsr $991f			jsr 	_FFPPartial
.98f7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.98fa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.98fd	20 1f 99	jsr $991f			jsr 	_FFPPartial
.9900	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9903	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9906	20 1f 99	jsr $991f			jsr 	_FFPPartial
.9909	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.990c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.990f	20 1f 99	jsr $991f			jsr 	_FFPPartial
.9912	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9915	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; zeroed check.
.9918	d0 03		bne $991d			bne 	_FFPExit
.991a					_FFPZero:
.991a	20 8d 90	jsr $908d			jsr 	NSMSetZero
.991d					_FFPExit:
.991d	7a		ply				ply
.991e	60		rts				rts
.991f					_FFPPartial:
.991f	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9921	f0 17		beq $993a			beq 	_FFFPPExit
.9923	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9925	b0 0c		bcs $9933			bcs 	_FFFPPWholeByte
.9927	5a		phy				phy
.9928					_FFFPPLeft:
.9928	0a		asl a				asl 	a
.9929	88		dey				dey
.992a	d0 fc		bne $9928			bne 	_FFFPPLeft
.992c	7a		ply				ply
.992d					_FFFPPRight:
.992d	4a		lsr a				lsr 	a
.992e	88		dey				dey
.992f	d0 fc		bne $992d			bne 	_FFFPPRight
.9931	80 07		bra $993a			bra 	_FFFPPExit
.9933					_FFFPPWholeByte:
.9933	98		tya				tya 								; subtract 8 from count
.9934	38		sec				sec
.9935	e9 08		sbc #$08			sbc 	#8
.9937	a8		tay				tay
.9938	a9 00		lda #$00			lda 	#0 							; and clear all
.993a					_FFFPPExit:
.993a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.993b					FloatIntegerPart:
.993b	48		pha				pha
.993c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.993f	f0 1f		beq $9960			beq 	_FIPExit 					; if so do nothing
.9941	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; is it zero ?
.9944	f0 17		beq $995d			beq 	_FIPZero 					; if so return zero.
.9946	20 9c 99	jsr $999c			jsr 	NSNormalise 				; normalise
.9949	f0 12		beq $995d			beq 	_FIPZero 					; normalised to zero, exit zero
.994b					_FIPShift:
.994b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.994e	10 08		bpl $9958			bpl 	_FIPCheckZero
.9950	20 b0 90	jsr $90b0			jsr 	NSMShiftRight 				; shift mantissa right
.9953	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9956	80 f3		bra $994b			bra 	_FIPShift
.9958					_FIPCheckZero:
.9958	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; avoid -0 problem
.995b	d0 03		bne $9960			bne 	_FIPExit 					; set to zero if mantissa zero.
.995d					_FIPZero:
.995d	20 8d 90	jsr $908d			jsr 	NSMSetZero
.9960					_FIPExit:
.9960	68		pla				pla
.9961	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9962					FloatingPointMultiply:
.9962	20 8b 99	jsr $998b			jsr 	FloatPrepare 				; prepare for floats
.9965					FloatMultiply:
.9965	48		pha				pha
.9966	20 9c 99	jsr $999c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9969	f0 1b		beq $9986			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.996b	e8		inx				inx
.996c	20 9c 99	jsr $999c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.996f	ca		dex				dex
.9970	c9 00		cmp #$00			cmp 	#0
.9972	f0 0f		beq $9983			beq 	_FDSetZero
.9974	20 3c 97	jsr $973c			jsr 	MultiplyShort 				; calculate the result.
.9977	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.997a	18		clc				clc
.997b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.997e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9981	80 03		bra $9986			bra 	_FDExit
.9983					_FDSetZero:
.9983	20 8d 90	jsr $908d			jsr 	NSMSetZero 					; return 0
.9986					_FDExit:
.9986	20 9c 99	jsr $999c			jsr 	NSNormalise 				; normalise the result
.9989	68		pla				pla
.998a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.998b					FloatPrepare:
.998b	20 f8 8a	jsr $8af8			jsr 	DereferenceTopTwo 			; dereference the top two values
.998e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9991	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9994	29 10		and #$10			and 	#NSBIsString
.9996	d0 01		bne $9999			bne 	_FDType
.9998	60		rts				rts
.9999					_FDType:
.9999	4c 0d 9b	jmp $9b0d			jmp 	TypeError
.999c					NSNormalise:
.999c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.999f	29 80		and #$80			and 	#$80
.99a1	09 08		ora #$08			ora 	#NSTFloat
.99a3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.99a6	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; if zero exit
.99a9	d0 09		bne $99b4			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.99ab	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.99ae	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.99b1	a9 00		lda #$00			lda 	#0 							; set Z flag
.99b3	60		rts				rts
.99b4					_NSNormaliseOptimise:
.99b4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.99b7	d0 22		bne $99db			bne 	_NSNormaliseLoop
.99b9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.99bc	30 1d		bmi $99db			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.99be	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.99c1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.99c4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.99c7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.99ca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.99cd	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.99d0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.99d3	38		sec				sec
.99d4	e9 08		sbc #$08			sbc 	#8
.99d6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.99d9	80 d9		bra $99b4			bra 	_NSNormaliseOptimise
.99db					_NSNormaliseLoop:
.99db	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.99de	70 08		bvs $99e8			bvs 	_NSNExit 					; exit if so with Z flag clear
.99e0	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; shift mantissa left
.99e3	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.99e6	80 f3		bra $99db			bra 	_NSNormaliseLoop
.99e8					_NSNExit:
.99e8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.99ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8a25					AssignNumber:
.8a25	5a		phy				phy
.8a26	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8a29	85 36		sta $36				sta 	zTemp0
.8a2b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a2e	85 37		sta $37				sta 	zTemp0+1
.8a30	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8a33	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8a35	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a38	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8a3a	c9 08		cmp #$08			cmp 	#NSTFloat
.8a3c	f0 2a		beq $8a68			beq 	_ANFloat
.8a3e	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8a41	f0 05		beq $8a48			beq		_ANNotFloat
.8a43	e8		inx				inx
.8a44	20 3b 99	jsr $993b			jsr 	FloatIntegerPart 			; make it an integer
.8a47	ca		dex				dex
.8a48					_ANNotFloat:
.8a48	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8a4b	29 03		and #$03			and 	#3
.8a4d	d0 05		bne $8a54			bne 	_ANByteWord
.8a4f	20 74 8a	jsr $8a74			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8a52	80 1e		bra $8a72			bra 	_ANExit
.8a54					_ANByteWord:
.8a54	48		pha				pha 								; save count
.8a55	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8a58	92 36		sta ($36)			sta 	(zTemp0)
.8a5a	68		pla				pla
.8a5b	c9 01		cmp #$01			cmp	 	#1
.8a5d	f0 13		beq $8a72			beq 	_ANExit
.8a5f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8a62	a0 01		ldy #$01			ldy 	#1
.8a64	91 36		sta ($36),y			sta 	(zTemp0),y
.8a66	80 0a		bra $8a72			bra 	_ANExit
.8a68					_ANFloat:
.8a68	20 74 8a	jsr $8a74			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8a6b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8a6e	a0 04		ldy #$04			ldy 	#4
.8a70	91 36		sta ($36),y			sta 	(zTemp0),y
.8a72					_ANExit:
.8a72	7a		ply				ply
.8a73	60		rts				rts
.8a74					_ANCopy4PackSign:
.8a74	a0 03		ldy #$03			ldy 	#3
.8a76	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8a79	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8a7b	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8a7e	91 36		sta ($36),y			sta 	(zTemp0),y
.8a80	88		dey				dey
.8a81	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8a84	91 36		sta ($36),y			sta 	(zTemp0),y
.8a86	88		dey				dey
.8a87	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a8a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a8c	88		dey				dey
.8a8d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8a90	91 36		sta ($36),y			sta 	(zTemp0),y
.8a92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8a93					AssignString:
.8a93	5a		phy				phy
.8a94	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8a97	85 38		sta $38				sta 	zTemp1
.8a99	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a9c	85 39		sta $39				sta 	zTemp1+1
.8a9e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8aa1	85 36		sta $36				sta 	zTemp0
.8aa3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8aa6	85 37		sta $37				sta 	zTemp0+1
.8aa8	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8aaa	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aac	f0 23		beq $8ad1			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8aae	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8aaf	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8ab1	e9 02		sbc #$02			sbc 	#2
.8ab3	85 3c		sta $3c				sta 	zsTemp
.8ab5	a0 01		ldy #$01			ldy 	#1
.8ab7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ab9	e9 00		sbc #$00			sbc 	#0
.8abb	85 3d		sta $3d				sta 	zsTemp+1
.8abd	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8abf					_ASGetLength:
.8abf	c8		iny				iny
.8ac0	b1 38		lda ($38),y			lda 	(zTemp1),y
.8ac2	d0 fb		bne $8abf			bne 	_ASGetLength
.8ac4	98		tya				tya 								; is this length <= current length
.8ac5	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8ac7	90 20		bcc $8ae9			bcc 	_ASCopyString
.8ac9	f0 1e		beq $8ae9			beq 	_ASCopyString
.8acb	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8acd	a0 01		ldy #$01			ldy 	#1
.8acf	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8ad1					_ASNewStringRequired:
.8ad1	e8		inx				inx 								; concrete the new string.
.8ad2	20 72 9c	jsr $9c72			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8ad5	ca		dex				dex
.8ad6	18		clc				clc
.8ad7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8ada	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8adc	92 36		sta ($36)			sta 	(zTemp0)
.8ade	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8ae1	69 00		adc #$00			adc 	#0
.8ae3	a0 01		ldy #$01			ldy 	#1
.8ae5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ae7	80 0d		bra $8af6			bra 	_ASExit
.8ae9					_ASCopyString:
.8ae9	a0 00		ldy #$00			ldy 	#0
.8aeb					_ASCopyLoop:
.8aeb	b1 38		lda ($38),y			lda 	(zTemp1),y
.8aed	c8		iny				iny
.8aee	c8		iny				iny
.8aef	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8af1	88		dey				dey
.8af2	c9 00		cmp #$00			cmp 	#0
.8af4	d0 f5		bne $8aeb			bne 	_ASCopyLoop
.8af6					_ASExit:
.8af6	7a		ply				ply
.8af7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8af8					DereferenceTopTwo:
.8af8	e8		inx				inx
.8af9	20 fd 8a	jsr $8afd			jsr 	Dereference 				; deref x+1
.8afc	ca		dex				dex  								; falls through to deref x
.8afd					Dereference:
.8afd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8b00	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8b02	f0 57		beq $8b5b			beq 	_DRFExit 					; not a reference
.8b04	5a		phy				phy
.8b05	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8b08	85 36		sta $36				sta 	zTemp0
.8b0a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b0d	85 37		sta $37				sta 	zTemp0+1
.8b0f	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8b12	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8b14	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b17	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8b1a	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8b1c	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8b1e	f0 0f		beq $8b2f			beq 	_DRFDereferenceTwo
.8b20	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8b22	f0 39		beq $8b5d			beq 	_DRFFull
.8b24	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8b27	29 03		and #$03			and 	#3
.8b29	f0 32		beq $8b5d			beq 	_DRFFull 					; the whole word
.8b2b	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8b2d	f0 07		beq $8b36			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8b2f					_DRFDereferenceTwo:
.8b2f	a0 01		ldy #$01			ldy 	#1
.8b31	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b33	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b36					_DRFClear23:
.8b36	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8b39	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8b3c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8b3f	29 18		and #$18			and 	#NSBTypeMask
.8b41	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b44	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8b46	d0 12		bne $8b5a			bne 	_DRFNotString
.8b48	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8b4b	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8b4e	d0 0a		bne $8b5a			bne 	_DRFNotString
.8b50	a9 5c		lda #$5c			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8b52	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8b55	a9 8b		lda #$8b			lda 	#_DRFNullString >> 8
.8b57	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8b5a					_DRFNotString
.8b5a	7a		ply				ply 								; restore Y and exit
.8b5b					_DRFExit:
.8b5b	60		rts				rts
.8b5c					_DRFNullString:
>8b5c	00						.byte 	0
.8b5d					_DRFFull:
.8b5d	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8b5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b61	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b64	c8		iny				iny
.8b65	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b67	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b6a	c8		iny				iny
.8b6b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b6d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b70	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8b73	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8b76	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8b78	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8b7b	f0 06		beq $8b83			beq 	_DRFNoExponent
.8b7d	c8		iny				iny 								; if not, read the exponent as well.
.8b7e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b80	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8b83					_DRFNoExponent:
.8b83	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8b86	10 0d		bpl $8b95			bpl 	_DRFExit2 					; if not, then exit.
.8b88	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8b8a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b8d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8b90	09 80		ora #$80			ora 	#NSBIsNegative
.8b92	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b95					_DRFExit2:
.8b95	7a		ply				ply
.8b96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8b97					EncodeNumberStart:
.8b97	38		sec				sec
.8b98	80 01		bra $8b9b			bra 	EncodeNumberContinue+1
.8b9a					EncodeNumberContinue:
.8b9a	18		clc				clc
.8b9b					EncodeNumber:
.8b9b	08		php				php 								; save reset.
.8b9c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8b9e	f0 12		beq $8bb2			beq 	_ENIsOkay
.8ba0	c9 30		cmp #$30			cmp 	#"0"
.8ba2	90 04		bcc $8ba8			bcc 	_ENBadNumber
.8ba4	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ba6	90 0a		bcc $8bb2			bcc 	_ENIsOkay
.8ba8					_ENBadNumber:
.8ba8	28		plp				plp 								; throw saved reset
.8ba9	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8bac	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8bae	f0 7e		beq $8c2e			beq 	_ENConstructFinal
.8bb0					_ENFail:
.8bb0	18		clc				clc 								; not allowed
.8bb1	60		rts				rts
.8bb2					_ENIsOkay:
.8bb2	28		plp				plp 								; are we restarting
.8bb3	90 15		bcc $8bca			bcc 	_ENNoRestart
.8bb5					_ENStartEncode:
.8bb5	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8bb7	f0 0c		beq $8bc5			beq 	_ENFirstDP
.8bb9	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8bbb	20 8f 90	jsr $908f			jsr 	NSMSetByte
.8bbe	a9 01		lda #$01			lda 	#ESTA_Low
.8bc0					_ENExitChange:
.8bc0	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8bc3	38		sec				sec
.8bc4	60		rts				rts
.8bc5					_ENFirstDP:
.8bc5	20 8d 90	jsr $908d			jsr 	NSMSetZero 					; clear integer part
.8bc8	80 3f		bra $8c09			bra 	_ESTASwitchFloat			; go straight to float and exi
.8bca					_ENNoRestart:
.8bca	48		pha				pha 								; save on stack.
.8bcb	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8bce	c9 01		cmp #$01			cmp 	#ESTA_Low
.8bd0	f0 09		beq $8bdb			beq  	_ESTALowState
.8bd2	c9 02		cmp #$02			cmp 	#ESTA_High
.8bd4	f0 29		beq $8bff			beq 	_ESTAHighState
.8bd6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8bd8	f0 3b		beq $8c15			beq 	_ESTADecimalState
>8bda	db						.byte 	$DB 						; causes a break in the emulator
.8bdb					_ESTALowState:
.8bdb	68		pla				pla 								; get value back
.8bdc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8bde	f0 29		beq $8c09			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8be0	29 0f		and #$0f			and 	#15 						; make digit
.8be2	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8be5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8be8	0a		asl a				asl 	a
.8be9	0a		asl a				asl 	a
.8bea	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8bed	0a		asl a				asl 	a
.8bee	6d 06 07	adc $0706			adc 	DigitTemp
.8bf1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bf4	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8bf6	90 05		bcc $8bfd			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8bf8	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8bfa	8d 05 07	sta $0705			sta 	EncodeState
.8bfd					_ESTANoSwitch:
.8bfd	38		sec				sec
.8bfe	60		rts				rts
.8bff					_ESTAHighState:
.8bff	68		pla				pla 								; get value back
.8c00	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8c02	f0 05		beq $8c09			beq 	_ESTASwitchFloat
.8c04	20 68 8c	jsr $8c68			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8c07	38		sec				sec
.8c08	60		rts				rts
.8c09					_ESTASwitchFloat:
.8c09	9c 07 07	stz $0707			stz 	DecimalCount
.8c0c	e8		inx				inx 								; zero the decimal additive.
.8c0d	20 8d 90	jsr $908d			jsr 	NSMSetZero
.8c10	ca		dex				dex
.8c11	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8c13	80 ab		bra $8bc0			bra 	_ENExitChange
.8c15					_ESTADecimalState:
.8c15	68		pla				pla 								; digit.
.8c16	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8c18	f0 96		beq $8bb0			beq 	_ENFail
.8c1a	e8		inx				inx 								; put digit into fractional part of X+1
.8c1b	20 68 8c	jsr $8c68			jsr 	ESTAShiftDigitIntoMantissa
.8c1e	ca		dex				dex
.8c1f	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8c22	ad 07 07	lda $0707			lda 	DecimalCount
.8c25	c9 0b		cmp #$0b			cmp 	#11
.8c27	f0 02		beq $8c2b			beq 	_ESTADSFail
.8c29	38		sec				sec
.8c2a	60		rts				rts
.8c2b					_ESTADSFail:
.8c2b	4c 08 9b	jmp $9b08			jmp 	RangeError
.8c2e					_ENConstructFinal:
.8c2e	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8c31	f0 33		beq $8c66			beq 	_ENCFExit 					; no decimals
.8c33	5a		phy				phy
.8c34	0a		asl a				asl 	a 							; x 4 and CLC
.8c35	0a		asl a				asl 	a
.8c36	6d 07 07	adc $0707			adc 	DecimalCount
.8c39	a8		tay				tay
.8c3a	b9 c7 9a	lda $9ac7,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8c3d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c40	b9 c8 9a	lda $9ac8,y			lda 	DecimalScalarTable-5+1,y
.8c43	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8c46	b9 c9 9a	lda $9ac9,y			lda 	DecimalScalarTable-5+2,y
.8c49	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8c4c	b9 ca 9a	lda $9aca,y			lda 	DecimalScalarTable-5+3,y
.8c4f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8c52	b9 cb 9a	lda $9acb,y			lda 	DecimalScalarTable-5+4,y
.8c55	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8c58	a9 08		lda #$08			lda 	#NSTFloat
.8c5a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8c5d	7a		ply				ply
.8c5e	e8		inx				inx 								; multiply decimal const by decimal scalar
.8c5f	20 65 99	jsr $9965			jsr 	FloatMultiply
.8c62	ca		dex				dex
.8c63	20 fa 97	jsr $97fa			jsr 	FloatAdd 					; add to integer part.
.8c66					_ENCFExit:
.8c66	18		clc				clc 								; reject the digit.
.8c67	60		rts				rts
.8c68					ESTAShiftDigitIntoMantissa:
.8c68	29 0f		and #$0f			and 	#15 						; save digit
.8c6a	48		pha				pha
.8c6b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8c6e	48		pha				pha
.8c6f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8c72	48		pha				pha
.8c73	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c76	48		pha				pha
.8c77	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c7a	48		pha				pha
.8c7b	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; x 2
.8c7e	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; x 4
.8c81	18		clc				clc 								; pop mantissa and add
.8c82	68		pla				pla
.8c83	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8c86	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c89	68		pla				pla
.8c8a	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8c8d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c90	68		pla				pla
.8c91	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8c94	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c97	68		pla				pla
.8c98	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8c9b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8c9e	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; x 10
.8ca1	68		pla				pla 								; add digit
.8ca2	18		clc				clc
.8ca3	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8ca6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ca9	90 0d		bcc $8cb8			bcc 	_ESTASDExit
.8cab	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8cae	d0 08		bne $8cb8			bne 	_ESTASDExit
.8cb0	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8cb3	d0 03		bne $8cb8			bne 	_ESTASDExit
.8cb5	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8cb8					_ESTASDExit:
.8cb8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8cb9					EvaluateTerm:
.8cb9	b1 30		lda ($30),y			lda 	(codePtr),y
.8cbb	30 18		bmi $8cd5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8cbd	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8cbf	b0 6f		bcs $8d30			bcs 	_ETVariable
.8cc1	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8cc3	90 6e		bcc $8d33			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8cc5	c9 3a		cmp #$3a			cmp 	#'9'+1
.8cc7	b0 6a		bcs $8d33			bcs 	_ETPuncUnary
.8cc9	20 97 8b	jsr $8b97			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8ccc					_ETNumber:
.8ccc	c8		iny				iny 								; keep encoding until we have the numbers
.8ccd	b1 30		lda ($30),y			lda 	(codePtr),y
.8ccf	20 9a 8b	jsr $8b9a			jsr 	EncodeNumberContinue
.8cd2	b0 f8		bcs $8ccc			bcs 	_ETNumber 					; go back if accepted.
.8cd4	60		rts				rts
.8cd5					_ETCheckUnary:
.8cd5	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8cd7	f0 41		beq $8d1a			beq 	_ETString
.8cd9	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8cdb	f0 12		beq $8cef			beq 	_ETHexConstant
.8cdd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8cdf	90 0b		bcc $8cec			bcc 	_ETSyntaxError
.8ce1	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8ce3	b0 07		bcs $8cec			bcs 	_ETSyntaxError
.8ce5	da		phx				phx 								; push X on the stack
.8ce6	0a		asl a				asl 	a 							; put vector x 2 into X
.8ce7	aa		tax				tax
.8ce8	c8		iny				iny 								; consume unary function token
.8ce9	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8cec					_ETSyntaxError:
.8cec	4c 03 9b	jmp $9b03			jmp 	SyntaxError
.8cef					_ETHexConstant:
.8cef	c8		iny				iny 								; skip #
.8cf0	c8		iny				iny 								; skip count
.8cf1	20 8d 90	jsr $908d			jsr 	NSMSetZero 					; clear result
.8cf4					_ETHLoop:
.8cf4	b1 30		lda ($30),y			lda 	(codePtr),y
.8cf6	c8		iny				iny 								; and consume
.8cf7	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8cf9	f0 1e		beq $8d19			beq 	_ETHExit
.8cfb	48		pha				pha 								; save on stack.
.8cfc	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; x 2
.8cff	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; x 4
.8d02	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; x 8
.8d05	20 a2 90	jsr $90a2			jsr 	NSMShiftLeft 				; x 16
.8d08	68		pla				pla 								; ASCII
.8d09	c9 41		cmp #$41			cmp 	#'A'
.8d0b	90 02		bcc $8d0f			bcc 	_ETHNotChar
.8d0d	e9 07		sbc #$07			sbc 	#7
.8d0f					_ETHNotChar:
.8d0f	29 0f		and #$0f			and 	#15 						; digit now
.8d11	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8d14	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d17	80 db		bra $8cf4			bra 	_ETHLoop 					; go round.
.8d19					_ETHExit:
.8d19	60		rts				rts
.8d1a					_ETString:
.8d1a	c8		iny				iny 								; look at length
.8d1b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d1d	48		pha				pha
.8d1e	c8		iny				iny 								; first character
.8d1f	20 de 95	jsr $95de			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.8d22	68		pla				pla 								; restore count and save
.8d23	85 36		sta $36				sta 	zTemp0
.8d25	98		tya				tya 								; add length to Y to skip it.
.8d26	18		clc				clc
.8d27	65 36		adc $36				adc 	zTemp0
.8d29	a8		tay				tay
.8d2a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8d2c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d2f	60		rts				rts
.8d30					_ETVariable:
.8d30	4c 8a 8d	jmp $8d8a			jmp 	VariableHandler
.8d33					_ETPuncUnary:
.8d33	c8		iny				iny 								; consume the unary character
.8d34	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8d36	f0 2d		beq $8d65			beq 	_ETUnaryNegate
.8d38	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8d3a	f0 39		beq $8d75			beq 	_ETDereference
.8d3c	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8d3e	f0 43		beq $8d83			beq 	_ETParenthesis
.8d40	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8d42	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8d44	f0 06		beq $8d4c			beq 	_ETIndirection
.8d46	e6 36		inc $36				inc 	zTemp0
.8d48	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8d4a	d0 a0		bne $8cec			bne 	_ETSyntaxError
.8d4c					_ETIndirection:
.8d4c	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8d4e	1a		inc a				inc 	a
.8d4f	48		pha				pha
.8d50	20 b9 8c	jsr $8cb9			jsr 	EvaluateTerm				; evaluate the term
.8d53	20 fd 8a	jsr $8afd			jsr 	Dereference 				; dereference it.
.8d56	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8d59	d0 07		bne $8d62			bne 	_ETTypeMismatch
.8d5b	68		pla				pla 								; indirection 1-2
.8d5c	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8d5e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d61	60		rts				rts
.8d62					_ETTypeMismatch:
.8d62	4c 0d 9b	jmp $9b0d			jmp 	TypeError
.8d65					_ETUnaryNegate:
.8d65	20 b9 8c	jsr $8cb9			jsr 	EvaluateTerm				; evaluate the term
.8d68	20 fd 8a	jsr $8afd			jsr 	Dereference 				; dereference it.
.8d6b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8d6e	29 10		and #$10			and 	#NSTString
.8d70	d0 f0		bne $8d62			bne 	_ETTypeMismatch
.8d72	4c 39 90	jmp $9039			jmp 	NSMNegate  					; just toggles the sign bit.
.8d75					_ETDereference:
.8d75	20 b9 8c	jsr $8cb9			jsr 	EvaluateTerm				; evaluate the term
.8d78	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8d7b	29 20		and #$20			and 	#NSBIsReference
.8d7d	f0 e3		beq $8d62			beq 	_ETTypeMismatch
.8d7f	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8d82	60		rts				rts
.8d83					_ETParenthesis:
.8d83	20 e8 89	jsr $89e8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8d86	20 33 96	jsr $9633			jsr 	CheckRightBracket 			; check for )
.8d89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8d8a					VariableHandler:
.8d8a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d8c	18		clc				clc
.8d8d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d8f	85 37		sta $37				sta 	zTemp0+1
.8d91	c8		iny				iny
.8d92	b1 30		lda ($30),y			lda 	(codePtr),y
.8d94	85 36		sta $36				sta 	zTemp0
.8d96	c8		iny				iny
.8d97	18		clc				clc									; copy variable address+3 to mantissa
.8d98	69 03		adc #$03			adc 	#3
.8d9a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d9d	a5 37		lda $37				lda 	zTemp0+1
.8d9f	69 00		adc #$00			adc 	#0
.8da1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8da4	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8da7	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8daa	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8dad	5a		phy				phy
.8dae	a0 02		ldy #$02			ldy 	#2 							; read type
.8db0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db2	7a		ply				ply
.8db3	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8db5	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8db7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dba	29 04		and #$04			and 	#NSBIsArray
.8dbc	d0 01		bne $8dbf			bne 	_VHArray
.8dbe	60		rts				rts
.8dbf					_VHArray:
>8dbf	db						.byte 	$DB 						; causes a break in the emulator
.8dc0	80 fd		bra $8dbf			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.99eb					AbsUnary:
.99eb	fa		plx				plx 								; restore stack pos
.99ec	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber 				; get a float or int
.99ef	20 33 96	jsr $9633			jsr 	CheckRightBracket
.99f2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.99f5	29 7f		and #$7f			and 	#$7F
.99f7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.99fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8dc2					AllocUnary:
.8dc2	fa		plx				plx 								; restore stack pos
.8dc3	20 19 90	jsr $9019			jsr 	Evaluate16BitInteger		; get bytes required.
.8dc6	20 33 96	jsr $9633			jsr 	CheckRightBracket
.8dc9	da		phx				phx 								; save X/Y
.8dca	5a		phy				phy
.8dcb	8a		txa				txa 								; copy X into Y
.8dcc	a8		tay				tay
.8dcd	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8dd0	aa		tax				tax
.8dd1	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8dd4	20 e1 8d	jsr $8de1			jsr 	AllocateXABytes 			; allocate memory
.8dd7	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8dda	8a		txa				txa
.8ddb	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8dde	7a		ply				ply
.8ddf	fa		plx				plx
.8de0	60		rts				rts
.8de1					AllocateXABytes:
.8de1	5a		phy				phy
.8de2	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8de5	5a		phy				phy
.8de6	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8de9	5a		phy				phy
.8dea	18		clc				clc
.8deb	6d 0c 07	adc $070c			adc 	lowMemPtr
.8dee	8d 0c 07	sta $070c			sta 	lowMemPtr
.8df1	8a		txa				txa
.8df2	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8df5	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8df8	fa		plx				plx
.8df9	68		pla				pla
.8dfa	7a		ply				ply
.8dfb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99fb					AscUnary:
.99fb	fa		plx				plx 								; restore stack pos
.99fc	20 ec 8f	jsr $8fec			jsr 	EvaluateString 				; get a string
.99ff	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9a01	20 8f 90	jsr $908f			jsr 	NSMSetByte
.9a04	20 33 96	jsr $9633			jsr 	CheckRightBracket
.9a07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a08					FracUnary:
.9a08	fa		plx				plx 								; restore stack pos
.9a09	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber 				; get a float or int
.9a0c	20 33 96	jsr $9633			jsr 	CheckRightBracket
.9a0f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9a12	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a14	f0 04		beq $9a1a			beq 	_IUZero
.9a16	20 d8 98	jsr $98d8			jsr 	FloatFractionalPart
.9a19	60		rts				rts
.9a1a					_IUZero:
.9a1a	20 8d 90	jsr $908d			jsr 	NSMSetZero
.9a1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9a1e					IntUnary:
.9a1e	fa		plx				plx 								; restore stack pos
.9a1f	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber 				; get a float or int
.9a22	20 33 96	jsr $9633			jsr 	CheckRightBracket
.9a25	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9a28	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a2a	f0 03		beq $9a2f			beq 	_IUExit
.9a2c	20 3b 99	jsr $993b			jsr 	FloatIntegerPart
.9a2f					_IUExit:
.9a2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a30					LenUnary:
.9a30	fa		plx				plx 								; restore stack pos
.9a31	20 ec 8f	jsr $8fec			jsr 	EvaluateString 				; get a string
.9a34	5a		phy				phy
.9a35	a0 00		ldy #$00			ldy 	#0 							; find length
.9a37					_LenFind:
.9a37	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a39	f0 06		beq $9a41			beq 	_LenExit
.9a3b	c8		iny				iny
.9a3c	d0 f9		bne $9a37			bne 	_LenFind
.9a3e	4c 08 9b	jmp $9b08			jmp 	RangeError 					; string > 255
.9a41					_LenExit:
.9a41	98		tya				tya
.9a42	20 8f 90	jsr $908f			jsr 	NSMSetByte
.9a45	7a		ply				ply
.9a46	20 33 96	jsr $9633			jsr 	CheckRightBracket
.9a49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8dfc					Unary_Not:
.8dfc	fa		plx				plx
.8dfd	20 04 90	jsr $9004			jsr 	EvaluateInteger 			; get integer
.8e00	20 33 96	jsr $9633			jsr 	CheckRightBracket
.8e03	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; zero mantissa ?
.8e06	f0 04		beq $8e0c			beq 	_NotZero
.8e08	20 8d 90	jsr $908d			jsr 	NSMSetZero
.8e0b	60		rts				rts
.8e0c					_NotZero:
.8e0c	4c 4c 86	jmp $864c			jmp 	ReturnTrue
.8e0f					_UNBad:
.8e0f	4c 12 9b	jmp $9b12			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8e12					Unary_Rnd:
.8e12	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber 				; number to use.
.8e15	20 33 96	jsr $9633			jsr 	CheckRightBracket 			; closing bracket
.8e18	20 41 8e	jsr $8e41			jsr 	Random32Bit 				; generate a number.
.8e1b	ad 08 07	lda $0708			lda 	RandomSeed+0
.8e1e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e21	ad 09 07	lda $0709			lda 	RandomSeed+1
.8e24	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e27	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8e2a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e2d	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8e30	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8e32	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e35	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8e37	8d 28 06	sta $0628			sta 	NSExponent
.8e3a	a9 08		lda #$08			lda 	#NSTFloat
.8e3c	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8e3f	db						.byte 	$DB 						; causes a break in the emulator
.8e40	60		rts				rts
.8e41					Random32Bit:
.8e41	5a		phy				phy
.8e42	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8e44	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8e47	d0 03		bne $8e4c			bne 	_Random1
.8e49	a8		tay				tay 								; if so do it 256 times
.8e4a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8e4c					_Random1:
.8e4c	0a		asl a				asl 	a 							; LSFR RNG
.8e4d	2e 09 07	rol $0709			rol 	RandomSeed+1
.8e50	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8e53	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8e56	90 02		bcc $8e5a			bcc 	_Random2
.8e58	49 c5		eor #$c5			eor 	#$C5
.8e5a					_Random2:
.8e5a	88		dey				dey
.8e5b	d0 ef		bne $8e4c			bne 	_Random1
.8e5d	7a		ply				ply
.8e5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9a4a					SgnUnary:
.9a4a	fa		plx				plx 								; restore stack pos
.9a4b	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber 				; get a float or int
.9a4e	20 33 96	jsr $9633			jsr 	CheckRightBracket
.9a51	20 bd 90	jsr $90bd			jsr 	NSMIsZero 					; if zero
.9a54	f0 10		beq $9a66			beq 	_SGZero  					; return Int Zero
.9a56	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9a59	48		pha				pha
.9a5a	a9 01		lda #$01			lda 	#1 							; set to 1
.9a5c	20 8f 90	jsr $908f			jsr 	NSMSetByte
.9a5f	68		pla				pla
.9a60	29 80		and #$80			and		#$80 						; copy the sign byte out
.9a62	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9a65	60		rts				rts
.9a66	20 8d 90	jsr $908d	_SGZero:jsr 	NSMSetZero
.9a69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9a6a					ValUnary:
.9a6a	fa		plx				plx 								; restore stack pos
.9a6b	20 80 9a	jsr $9a80			jsr 	ValMainCode 				; do the main val() code
.9a6e	b0 01		bcs $9a71			bcs 	_VUError 					; couldn't convert
.9a70	60		rts				rts
.9a71					_VUError:
.9a71	4c 0d 9b	jmp $9b0d			jmp 	TypeError
.9a74					IsValUnary:
.9a74	fa		plx				plx 								; restore stack pos
.9a75	20 80 9a	jsr $9a80			jsr 	ValMainCode 				; do the main val() code
.9a78	b0 03		bcs $9a7d			bcs 	_VUBad
.9a7a	4c 4c 86	jmp $864c			jmp 	ReturnTrue
.9a7d					_VUBad:
.9a7d	4c 58 86	jmp $8658			jmp 	ReturnFalse
.9a80					ValMainCode:
.9a80	20 ec 8f	jsr $8fec			jsr 	EvaluateString 				; get a string
.9a83	20 33 96	jsr $9633			jsr 	CheckRightBracket 			; check right bracket present
.9a86	5a		phy				phy
.9a87	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9a89	f0 17		beq $9aa2			beq 	_VMCFail2
.9a8b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9a8d	48		pha				pha 								; save first character
.9a8e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9a90	d0 01		bne $9a93			bne 	_VMCStart
.9a92	c8		iny				iny 								; skip over -
.9a93					_VMCStart:
.9a93	38		sec				sec 								; initialise first time round.
.9a94					_VMCNext:
.9a94	c8		iny				iny 								; pre-increment
.9a95	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9a97	f0 0c		beq $9aa5			beq 	_VMCSuccess 				; successful.
.9a99	20 9b 8b	jsr $8b9b			jsr 	EncodeNumber 				; send it to the number-builder
.9a9c	90 03		bcc $9aa1			bcc 	_VMCFail 					; if failed, give up.
.9a9e	18		clc				clc 								; next time round, countinue
.9a9f	80 f3		bra $9a94			bra 	_VMCNext
.9aa1					_VMCFail:
.9aa1	68		pla				pla
.9aa2					_VMCFail2:
.9aa2	7a		ply				ply
.9aa3	38		sec				sec
.9aa4	60		rts				rts
.9aa5					_VMCSuccess:
.9aa5	a9 00		lda #$00			lda 	#0 							; construct final
.9aa7	20 9b 8b	jsr $8b9b			jsr 	EncodeNumber
.9aaa	68		pla				pla
.9aab	c9 2d		cmp #$2d			cmp 	#"-"
.9aad	d0 03		bne $9ab2			bne 	_VMCNotNegative
.9aaf	20 39 90	jsr $9039			jsr		NSMNegate
.9ab2					_VMCNotNegative:
.9ab2	7a		ply				ply
.9ab3	18		clc				clc
.9ab4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8e5f					ChrUnary:
.8e5f	fa		plx				plx 								; restore stack pos
.8e60	20 25 90	jsr $9025			jsr 	Evaluate8BitInteger			; get value
.8e63	48		pha				pha
.8e64	20 33 96	jsr $9633			jsr 	CheckRightBracket
.8e67	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8e69	20 ed 9c	jsr $9ced			jsr 	StringTempAllocate
.8e6c	68		pla				pla 								; write number to it
.8e6d	20 2b 9d	jsr $9d2b			jsr 	StringTempWrite
.8e70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8e71					SpcUnary:
.8e71	fa		plx				plx 								; restore stack pos
.8e72	20 25 90	jsr $9025			jsr 	Evaluate8BitInteger			; get value
.8e75	5a		phy				phy
.8e76	48		pha				pha 								; save count
.8e77	20 ed 9c	jsr $9ced			jsr 	StringTempAllocate
.8e7a	7a		ply				ply 								; to do count in Y
.8e7b					_SpcLoop:
.8e7b	c0 00		cpy #$00			cpy 	#0
.8e7d	f0 08		beq $8e87			beq 	_SpcExit
.8e7f	a9 20		lda #$20			lda 	#32
.8e81	20 2b 9d	jsr $9d2b			jsr 	StringTempWrite
.8e84	88		dey				dey
.8e85	80 f4		bra $8e7b			bra 	_SPCLoop
.8e87					_SpcExit:
.8e87	7a		ply				ply
.8e88	20 33 96	jsr $9633			jsr 	CheckRightBracket
.8e8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8e8c					Unary_Str:
.8e8c	fa		plx				plx
.8e8d	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber  			; get number
.8e90	20 33 96	jsr $9633			jsr 	CheckRightBracket 			; closing bracket
.8e93	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8e95	20 ae 8e	jsr $8eae			jsr 	ConvertNumberToString 		; do the conversion.
.8e98	a9 21		lda #$21			lda		#33 						; create buffer
.8e9a	20 ed 9c	jsr $9ced			jsr 	StringTempAllocate 			; allocate memory
.8e9d	da		phx				phx
.8e9e	a2 00		ldx #$00			ldx 	#0
.8ea0					_USCopy:
.8ea0	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8ea3	20 2b 9d	jsr $9d2b			jsr 	StringTempWrite
.8ea6	e8		inx				inx
.8ea7	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8eaa	d0 f4		bne $8ea0			bne 	_USCopy
.8eac	fa		plx				plx
.8ead	60		rts				rts
.8eae					ConvertNumberToString:
.8eae	5a		phy				phy 								; save code position
.8eaf	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8eb2	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8eb5	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8eb8	10 0a		bpl $8ec4			bpl 	_CNTSNotNegative
.8eba	29 7f		and #$7f			and 	#$7F 						; make +ve
.8ebc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ebf	a9 2d		lda #$2d			lda 	#"-"
.8ec1	20 2a 8f	jsr $8f2a			jsr 	WriteDecimalBuffer
.8ec4					_CNTSNotNegative:
.8ec4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8ec7	f0 15		beq $8ede			beq 	_CNTSNotFloat
.8ec9	e8		inx				inx 								; round up
.8eca	a9 01		lda #$01			lda 	#1
.8ecc	20 8f 90	jsr $908f			jsr 	NSMSetByte
.8ecf	ca		dex				dex
.8ed0	bd 28 06	lda $0628,x			lda		NSExponent,x
.8ed3	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8ed6	a9 08		lda #$08			lda 	#NSTFloat
.8ed8	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8edb	20 fa 97	jsr $97fa			jsr 	FloatAdd
.8ede					_CNTSNotFloat:
.8ede	20 0c 8f	jsr $8f0c			jsr 	MakePlusTwoString
.8ee1	20 d8 98	jsr $98d8			jsr 	FloatFractionalPart 		; get the fractional part
.8ee4	20 9c 99	jsr $999c			jsr 	NSNormalise					; normalise , exit if zero
.8ee7	f0 21		beq $8f0a			beq 	_CNTSExit
.8ee9	a9 2e		lda #$2e			lda 	#"."
.8eeb	20 2a 8f	jsr $8f2a			jsr 	WriteDecimalBuffer 			; write decimal place
.8eee					_CNTSDecimal:
.8eee	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8ef1	30 17		bmi $8f0a			bmi 	_CNTSExit
.8ef3	e8		inx				inx 								; x 10.0
.8ef4	a9 0a		lda #$0a			lda 	#10
.8ef6	20 8f 90	jsr $908f			jsr 	NSMSetByte
.8ef9	a9 08		lda #$08			lda 	#NSTFloat
.8efb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8efe	ca		dex				dex
.8eff	20 65 99	jsr $9965			jsr 	FloatMultiply
.8f02	20 0c 8f	jsr $8f0c			jsr 	MakePlusTwoString
.8f05	20 d8 98	jsr $98d8			jsr 	FloatFractionalPart 		; get the fractional part
.8f08	80 e4		bra $8eee			bra 	_CNTSDecimal 				; keep going.
.8f0a					_CNTSExit:
.8f0a	7a		ply				ply
.8f0b	60		rts				rts
.8f0c					MakePlusTwoString:
.8f0c	da		phx				phx
.8f0d	20 64 90	jsr $9064			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8f10	e8		inx				inx 								; access it
.8f11	e8		inx				inx
.8f12	20 3b 99	jsr $993b			jsr 	FloatIntegerPart 			; make it an integer
.8f15	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8f17	20 a4 97	jsr $97a4			jsr 	ConvertInt32
.8f1a	a2 00		ldx #$00			ldx	 	#0
.8f1c					_MPTSCopy:
.8f1c	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8f1f	20 2a 8f	jsr $8f2a			jsr 	WriteDecimalBuffer
.8f22	e8		inx				inx
.8f23	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8f26	d0 f4		bne $8f1c			bne 	_MPTSCopy
.8f28	fa		plx				plx
.8f29	60		rts				rts
.8f2a					WriteDecimalBuffer:
.8f2a	da		phx				phx
.8f2b	ae 14 07	ldx $0714			ldx 	dbOffset
.8f2e	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8f31	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8f34	ee 14 07	inc $0714			inc 	dbOffset
.8f37	fa		plx				plx
.8f38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8f39					Unary_Left:
.8f39	fa		plx				plx
.8f3a	18		clc				clc 								; only one parameter
.8f3b	20 b0 8f	jsr $8fb0			jsr 	SubstringInitial 			; set up.
.8f3e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8f41	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f44	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8f47	80 2c		bra $8f75			bra 	SubstringMain
.8f49					Unary_Right:
.8f49	fa		plx				plx
.8f4a	18		clc				clc 								; only one parameter
.8f4b	20 b0 8f	jsr $8fb0			jsr 	SubstringInitial 			; set up.
.8f4e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8f51	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f54	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8f57	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8f5a	b0 02		bcs $8f5e			bcs 	_URNotUnderflow
.8f5c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8f5e					_URNotUnderFlow:
.8f5e	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8f61	80 12		bra $8f75			bra 	SubStringMain
.8f63					Unary_Mid:
.8f63	fa		plx				plx
.8f64	38		sec				sec 								; two parameters
.8f65	20 b0 8f	jsr $8fb0			jsr 	SubstringInitial 			; set up.
.8f68	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8f6b	f0 05		beq $8f72			beq 	_UMError
.8f6d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8f70	80 03		bra $8f75			bra 	SubStringMain
.8f72					_UMError:
.8f72	4c 12 9b	jmp $9b12			jmp 	ArgumentError
.8f75					SubStringMain:
.8f75	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8f78	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8f7b	b0 2d		bcs $8faa			bcs 	_SSMNull 					; if so, return an empty string.
.8f7d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8f80	f0 28		beq $8faa			beq 	_SSMNull 					; return empty string.
.8f82	18		clc				clc 								; add the offset +1 to the address and
.8f83	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8f86	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8f89	85 36		sta $36				sta 	zTemp0
.8f8b	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8f8e	69 00		adc #$00			adc 	#0
.8f90	85 37		sta $37				sta 	zTemp0+1
.8f92					_SSMNoCarry:
.8f92	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8f95	20 ed 9c	jsr $9ced			jsr 	StringTempAllocate 			; allocate that many characters
.8f98	5a		phy				phy 								; save Y
.8f99	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8f9b					_SSMCopy:
.8f9b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8f9d	f0 09		beq $8fa8			beq 	_SSMEString 				; no more to copy
.8f9f	20 2b 9d	jsr $9d2b			jsr 	StringTempWrite 			; and write it out.
.8fa2	c8		iny				iny
.8fa3	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8fa6	d0 f3		bne $8f9b			bne 	_SSMCopy
.8fa8					_SSMEString:
.8fa8	7a		ply				ply
.8fa9					_SSMExit:
.8fa9	60		rts				rts
.8faa					_SSMNull:
.8faa	a9 00		lda #$00			lda 	#0
.8fac	20 ed 9c	jsr $9ced			jsr 	StringTempAllocate
.8faf	60		rts				rts
.8fb0					SubstringInitial:
.8fb0	da		phx				phx 								; save initial stack position
.8fb1	08		php				php 								; save carry on stack indicating 2 parameters
.8fb2	20 ec 8f	jsr $8fec			jsr 	EvaluateString 				; get a string
.8fb5	5a		phy				phy 								; calculate length to exponent.
.8fb6	a0 ff		ldy #$ff			ldy 	#$FF
.8fb8					_SIFindLength:
.8fb8	c8		iny				iny
.8fb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fbb	d0 fb		bne $8fb8			bne 	_SIFindLength
.8fbd	98		tya				tya
.8fbe	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8fc1	7a		ply				ply
.8fc2	e8		inx				inx
.8fc3	20 3b 96	jsr $963b			jsr 	CheckComma 					; comma next
.8fc6	20 25 90	jsr $9025			jsr 	Evaluate8BitInteger 		; get next parameter
.8fc9	28		plp				plp 								; is it the last parameter ?
.8fca	90 07		bcc $8fd3			bcc 	_SSIExit 					; if so, exit.
.8fcc	e8		inx				inx
.8fcd	20 3b 96	jsr $963b			jsr 	CheckComma 					; comma next
.8fd0	20 25 90	jsr $9025			jsr 	Evaluate8BitInteger 		; get last parameter
.8fd3					_SSIExit:
.8fd3	fa		plx				plx
.8fd4	20 33 96	jsr $9633			jsr 	CheckRightBracket 			; check closing bracket
.8fd7	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8fd8					EvaluateValue:
.8fd8	48		pha				pha
.8fd9	20 e8 89	jsr $89e8			jsr		EvaluateExpression 			; expression
.8fdc	20 fd 8a	jsr $8afd			jsr 	Dereference					; derefernce it
.8fdf	68		pla				pla
.8fe0	60		rts				rts
.8fe1					EvaluateNumber:
.8fe1	20 d8 8f	jsr $8fd8			jsr 	EvaluateValue 				; get a value
.8fe4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8fe7	29 10		and #$10			and 	#NSBIsString
.8fe9	d0 16		bne $9001			bne 	HelperTypeError
.8feb	60		rts				rts
.8fec					EvaluateString:
.8fec	20 d8 8f	jsr $8fd8			jsr 	EvaluateValue 				; get a value
.8fef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ff2	29 10		and #$10			and 	#NSBIsString
.8ff4	f0 0b		beq $9001			beq 	HelperTypeError
.8ff6					CopyAddressToTemp0:
.8ff6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8ff9	85 36		sta $36				sta 	zTemp0
.8ffb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ffe	85 37		sta $37				sta 	zTemp0+1
.9000	60		rts				rts
.9001					HelperTypeError:
.9001	4c 0d 9b	jmp $9b0d			jmp 	TypeError
.9004					EvaluateInteger:
.9004	20 e1 8f	jsr $8fe1			jsr 	EvaluateNumber
.9007	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.900a	d0 0a		bne $9016			bne 	HelperValueError 			; if not, it's a float.
.900c	60		rts				rts
.900d					EvaluateUnsignedInteger:
.900d	20 04 90	jsr $9004			jsr 	EvaluateInteger 			; check integer is +ve
.9010	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9013	30 01		bmi $9016			bmi 	HelperValueError
.9015	60		rts				rts
.9016					HelperValueError:
.9016	4c 12 9b	jmp $9b12			jmp 	ArgumentError
.9019					Evaluate16BitInteger:
.9019	20 0d 90	jsr $900d			jsr	 	EvaluateUnsignedInteger		; get integer
.901c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.901f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9022	d0 f2		bne $9016			bne 	HelperValueError
.9024	60		rts				rts
.9025					Evaluate8BitInteger:
.9025	20 0d 90	jsr $900d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9028	d0 ec		bne $9016			bne 	HelperValueError
.902a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.902d	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9030	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9033	d0 e1		bne $9016			bne 	HelperValueError
.9035	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9038	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9ab5					Multiply8x8:
.9ab5	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9ab6	85 36		sta $36			  	sta 	zTemp0
.9ab8	86 37		stx $37				stx 	zTemp0+1
.9aba	a9 00		lda #$00			lda 	#0
.9abc	a2 08		ldx #$08			ldx 	#8
.9abe					_M88Loop:
.9abe	90 03		bcc $9ac3			bcc 	_M88NoAdd
.9ac0	18		clc				clc
.9ac1	65 37		adc $37				adc 	zTemp0+1
.9ac3					_M88NoAdd:
.9ac3	6a		ror a				ror 	a
.9ac4	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9ac6	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9ac7	d0 f5		bne $9abe			bne 	_M88Loop
.9ac9	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9acb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9039					NSMNegate:
.9039	bd 00 06	lda $0600,x			lda 	NSStatus,x
.903c	49 80		eor #$80			eor 	#NSBIsNegative
.903e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9041	60		rts				rts
.9042					NSMNegateMantissa:
.9042	38		sec				sec
.9043	a9 00		lda #$00			lda 	#0
.9045	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9048	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.904b	a9 00		lda #$00			lda 	#0
.904d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9050	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9053	a9 00		lda #$00			lda 	#0
.9055	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9058	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.905b	a9 00		lda #$00			lda 	#0
.905d	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9060	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9063	60		rts				rts
.9064					NSMShiftUpTwo:
.9064	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9067	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.906a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.906d	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9070	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9073	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9076	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9079	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.907c	bd 28 06	lda $0628,x			lda 	NSExponent,x
.907f	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9082	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9085	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9088	60		rts				rts
.9089					NSMSetZeroMantissaOnly:
.9089	a9 00		lda #$00			lda 	#0
.908b	80 08		bra $9095			bra 	NSMSetMantissa
.908d					NSMSetZero:
.908d	a9 00		lda #$00			lda 	#0
.908f					NSMSetByte:
.908f	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9092	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9095					NSMSetMantissa:
.9095	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.9098	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.909b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.909e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.90a1	60		rts				rts
.90a2					NSMShiftLeft:
.90a2	18		clc				clc
.90a3					NSMRotateLeft:
.90a3	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.90a6	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.90a9	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.90ac	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.90af	60		rts				rts
.90b0					NSMShiftRight:
.90b0	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.90b3	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.90b6	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.90b9	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.90bc	60		rts				rts
.90bd					NSMIsZero:
.90bd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.90c0	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.90c3	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.90c6	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.90c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9acc					DecimalScalarTable:
>9acc	66 66 66 66				.dword $66666666 ; 0.1
>9ad0	de					.byte $de
>9ad1	1f 85 eb 51				.dword $51eb851f ; 0.01
>9ad5	db					.byte $db
>9ad6	4c 37 89 41				.dword $4189374c ; 0.001
>9ada	d8					.byte $d8
>9adb	ac 8b db 68				.dword $68db8bac ; 0.0001
>9adf	d4					.byte $d4
>9ae0	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9ae4	d1					.byte $d1
>9ae5	83 de 1b 43				.dword $431bde83 ; 1e-06
>9ae9	ce					.byte $ce
>9aea	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9aee	ca					.byte $ca
>9aef	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9af3	c7					.byte $c7
>9af4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9af8	c4					.byte $c4
>9af9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9afd	c0					.byte $c0
>9afe	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9b02	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9b03					SyntaxError:
.9b03	a9 02		lda #$02		lda	#2
.9b05	4c e6 85	jmp $85e6		jmp	ErrorHandler
.9b08					RangeError:
.9b08	a9 04		lda #$04		lda	#4
.9b0a	4c e6 85	jmp $85e6		jmp	ErrorHandler
.9b0d					TypeError:
.9b0d	a9 05		lda #$05		lda	#5
.9b0f	4c e6 85	jmp $85e6		jmp	ErrorHandler
.9b12					ArgumentError:
.9b12	a9 07		lda #$07		lda	#7
.9b14	4c e6 85	jmp $85e6		jmp	ErrorHandler
.9b17					NotDoneError:
.9b17	a9 0c		lda #$0c		lda	#12
.9b19	4c e6 85	jmp $85e6		jmp	ErrorHandler
.9b1c					ErrorText:
>9b1c	42 72 65 61 6b 00			.text	"Break",0
>9b22	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9b2a	72 72 6f 72 00
>9b2f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9b37	20 62 79 20 7a 65 72 6f 00
>9b40	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9b48	61 6e 67 65 00
>9b4d	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9b55	6d 61 74 63 68 00
>9b5b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9b63	65 6d 6f 72 79 00
>9b69	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9b71	61 72 67 75 6d 65 6e 74 00
>9b7a	53 74 6f 70 00				.text	"Stop",0
>9b7f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9b87	6f 6f 20 6c 6f 6e 67 00
>9b8f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9b97	6e 20 66 61 69 6c 65 64 00
>9ba0	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9ba8	61 74 61 00
>9bac	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9bb4	65 6e 74 65 64 00
>9bba	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9bc2	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9bce	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9bd6	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9be3	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9beb	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9bf8	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9c00	68 6f 75 74 20 57 68 69 6c 65 00
>9c0b	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9c13	68 6f 75 74 20 46 6f 72 00
>9c1c	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9c24	61 63 6b 20 66 75 6c 6c 00
>9c2d	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9c35	75 63 74 75 72 65 00
>9c3c	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9c44	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>9c51	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>9c59	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>9c67	41 72 72 61 79 20 73 69			.text	"Array size",0
>9c6f	7a 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.90ca					StackOpen:
.90ca	48		pha				pha 								; save frame byte
.90cb	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.90cd	0a		asl a				asl 	a 							; claim twice this for storage
.90ce	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.90d0	38		sec				sec 								; so basically subtracting from
.90d1	65 34		adc $34				adc 	basicStack 	 				; basicStack
.90d3	85 34		sta $34				sta 	basicStack
.90d5	b0 08		bcs $90df			bcs 	_SONoBorrow
.90d7	c6 35		dec $35				dec 	basicStack+1
.90d9	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.90db	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.90dd	90 04		bcc $90e3			bcc 	_SOMemory
.90df					_SONoBorrow:
.90df	68		pla				pla 								; get marker back and write at TOS
.90e0	92 34		sta ($34)			sta 	(basicStack)
.90e2	60		rts				rts
.90e3					_SOMemory:
.90e3							ERR_STACK
.90e3					StackClose:
.90e3	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.90e5	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.90e7	0a		asl a				asl 	a 							; claim twice this.
.90e8	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.90ea	85 34		sta $34				sta 	basicStack
.90ec	90 02		bcc $90f0			bcc 	_SCExit
.90ee	e6 35		inc $35				inc 	basicStack+1
.90f0					_SCExit:
.90f0	60		rts				rts
.90f1					StackCheckFrame:
.90f1	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.90f3	29 f0		and #$f0			and 	#$F0 						; check type bits
.90f5	d0 01		bne $90f8			bne 	_SCFError 					; different, we have structures mixed up
.90f7	60		rts				rts
.90f8					_SCFError:
.90f8	8a		txa				txa 								; report error X
.90f9	4c e6 85	jmp $85e6			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.90fc					STKSaveCodePosition:
.90fc	5a		phy				phy
.90fd	98		tya				tya 								; save Y
.90fe	a0 05		ldy #$05			ldy 	#5
.9100	91 34		sta ($34),y			sta 	(basicStack),y
.9102	88		dey				dey 								; save Code Pointer
.9103					_STKSaveLoop:
.9103	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9106	91 34		sta ($34),y			sta 	(basicStack),y
.9108	88		dey				dey
.9109	d0 f8		bne $9103			bne 	_STKSaveLoop
.910b	7a		ply				ply
.910c	60		rts				rts
.910d					STKLoadCodePosition:
.910d	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.910f					_STKLoadLoop:
.910f	b1 34		lda ($34),y			lda 	(basicStack),y
.9111	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9114	c8		iny				iny
.9115	c0 05		cpy #$05			cpy 	#5
.9117	d0 f6		bne $910f			bne 	_STKLoadLoop
.9119	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.911b	a8		tay				tay
.911c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.911d					StackReset:
.911d	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.911f	85 34		sta $34				sta 	0+basicStack
.9121	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9123	85 35		sta $35				sta 	1+basicStack
.9125	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9127	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9129	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9c72					StringConcrete:
.9c72	5a		phy				phy 								; save position on stack
.9c73	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9c76	85 38		sta $38				sta 	zTemp1
.9c78	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9c7b	85 39		sta $39				sta 	zTemp1+1
.9c7d	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9c7f					_SALength:
.9c7f	c8		iny				iny
.9c80	b1 38		lda ($38),y			lda 	(zTemp1),y
.9c82	d0 fb		bne $9c7f			bne 	_SALength
.9c84	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9c86	b0 3f		bcs $9cc7			bcs 	_SALengthError
.9c88	98		tya				tya 				 				; length of the new string
.9c89	18		clc				clc
.9c8a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9c8c	90 02		bcc $9c90			bcc 	_SAHaveLength
.9c8e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9c90					_SAHaveLength:
.9c90	48		pha				pha 								; save length.
.9c91	38		sec				sec
.9c92	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9c94	6d 0e 07	adc $070e			adc 	StringMemory
.9c97	8d 0e 07	sta $070e			sta 	StringMemory
.9c9a	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9c9c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9c9f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9ca1	6d 0f 07	adc $070f			adc 	StringMemory+1
.9ca4	8d 0f 07	sta $070f			sta 	StringMemory+1
.9ca7	85 3b		sta $3b				sta 	zTemp2+1
.9ca9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9cac	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9cad	38		sec				sec
.9cae	e9 03		sbc #$03			sbc 	#3
.9cb0	92 3a		sta ($3a)			sta 	(zTemp2)
.9cb2	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9cb4	a0 01		ldy #$01			ldy 	#1
.9cb6	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9cb8					_SACopyNewString:
.9cb8	a0 00		ldy #$00			ldy 	#0
.9cba					_SACopyNSLoop:
.9cba	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9cbc	c8		iny				iny 								; write two on in string storage
.9cbd	c8		iny				iny
.9cbe	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9cc0	88		dey				dey 								; this makes it one one.
.9cc1	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9cc3	d0 f5		bne $9cba			bne 	_SACopyNSLoop
.9cc5	7a		ply				ply
.9cc6	60		rts				rts
.9cc7					_SALengthError:
.9cc7	a9 09		lda #$09		lda	#9
.9cc9	4c e6 85	jmp $85e6		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9ccc					StringSystemInitialise:
.9ccc	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9cce	8d 0e 07	sta $070e			sta 	0+StringMemory
.9cd1	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9cd3	8d 0f 07	sta $070f			sta 	1+StringMemory
.9cd6	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9cd9	60		rts				rts
.9cda					StringSpaceInitialise:
.9cda	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9cdc	8d 10 07	sta $0710			sta 	StringInitialised
.9cdf	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9ce2	8d 11 07	sta $0711			sta 	StringTempPointer
.9ce5	ad 0f 07	lda $070f			lda 	StringMemory+1
.9ce8	3a		dec a				dec 	a
.9ce9	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9cec	60		rts				rts
.9ced					StringTempAllocate:
.9ced	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9cef	b0 35		bcs $9d26			bcs 	_STALength
.9cf1	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9cf4	30 05		bmi $9cfb			bmi 	_STAAllocate
.9cf6	48		pha				pha 								; save value to subtract.
.9cf7	20 da 9c	jsr $9cda			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9cfa	68		pla				pla 								; restore it
.9cfb					_STAAllocate:
.9cfb	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9cfd	18		clc				clc  								; deliberate allows one more
.9cfe	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9d01	8d 11 07	sta $0711			sta 	StringTempPointer
.9d04	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9d07	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9d09	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9d0c	69 ff		adc #$ff			adc 	#$FF
.9d0e	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9d11	85 3d		sta $3d				sta 	zsTemp+1
.9d13	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d16	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9d19	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9d1c	a9 10		lda #$10			lda 	#NSTString
.9d1e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d21	a9 00		lda #$00			lda 	#0 							; clear the target string
.9d23	92 3c		sta ($3c)			sta 	(zsTemp)
.9d25	60		rts				rts
.9d26					_STALength:
.9d26	a9 09		lda #$09		lda	#9
.9d28	4c e6 85	jmp $85e6		jmp	ErrorHandler
.9d2b					StringTempWrite:
.9d2b	48		pha				pha
.9d2c	92 3c		sta ($3c)			sta 	(zsTemp)
.9d2e	e6 3c		inc $3c				inc 	zsTemp
.9d30	d0 02		bne $9d34			bne 	_STWNoCarry
.9d32	e6 3d		inc $3d				inc 	zsTemp+1
.9d34					_STWNoCarry:
.9d34	a9 00		lda #$00			lda 	#0
.9d36	92 3c		sta ($3c)			sta 	(zsTemp)
.9d38	68		pla				pla
.9d39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.912a					BackloadProgram:
.912a	a2 ff		ldx #$ff			ldx 	#$FF
.912c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.912f	20 59 91	jsr $9159			jsr 	BLReadByte
.9132	30 1e		bmi $9152			bmi 	_BPExit
.9134					_BPCopy:
.9134	e8		inx				inx  								; copy byte in
.9135	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.9138	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.913b	20 59 91	jsr $9159			jsr 	BLReadByte 					; read next byte
.913e	30 0a		bmi $914a			bmi 	_BPEndLine 					; -ve = EOL
.9140	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9142	d0 02		bne $9146			bne 	_BPNotTab
.9144	a9 20		lda #$20			lda 	#' '
.9146					_BPNotTab:
.9146	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9148	b0 ea		bcs $9134			bcs 	_BPCopy
.914a					_BPEndLine:
.914a	20 23 93	jsr $9323			jsr 	TokeniseLine 				; tokenise the line.
.914d	20 af 95	jsr $95af			jsr 	MemoryAppend 				; append to current program
.9150	80 d8		bra $912a			bra 	BackloadProgram
.9152					_BPExit:
.9152	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9155	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.9158	60		rts				rts
.9159					BLReadByte:
.9159					_BLLoad:
.9159	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.915c	ee 5a 91	inc $915a			inc 	_BLLoad+1
.915f	d0 03		bne $9164			bne 	_BLNoCarry
.9161	ee 5b 91	inc $915b			inc 	_BLLoad+2
.9164					_BLNoCarry:
.9164	c9 00		cmp #$00			cmp 	#0
.9166	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9167					TokeniseSearchTable:
.9167	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9169	85 36		sta $36				sta 	zTemp0
.916b	a0 00		ldy #$00			ldy 	#0
.916d	a9 80		lda #$80			lda 	#$80 						; token #
.916f	85 38		sta $38				sta 	zTemp1
.9171					_TSTLoop:
.9171	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9173	30 49		bmi $91be			bmi 	_TSTFail 					; -ve = end of table
.9175	f0 2e		beq $91a5			beq 	_TSTNext 					; zero, check next it's a dummy
.9177	c8		iny				iny 								; get the hash
.9178	b1 36		lda ($36),y			lda 	(zTemp0),y
.917a	88		dey				dey
.917b	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.917e	d0 25		bne $91a5			bne 	_TSTNext
.9180	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9183	38		sec				sec
.9184	ed 00 07	sbc $0700			sbc 	identStart
.9187	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9189	d0 1a		bne $91a5			bne 	_TSTNext
.918b	5a		phy				phy 								; save Y , we might fail
.918c	c8		iny				iny 								; point to text
.918d	c8		iny				iny
.918e	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9191					_TSTCompareName:
.9191	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.9194	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9196	d0 0c		bne $91a4			bne 	_TSTNextPullY 				; fail, pullY and do next
.9198	e8		inx				inx
.9199	c8		iny				iny
.919a	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.919d	d0 f2		bne $9191			bne 	_TSTCompareName
.919f	7a		ply				ply 								; throw Y
.91a0	a5 38		lda $38				lda 	zTemp1 						; get token #
.91a2	38		sec				sec 								; return with CS = passed.
.91a3	60		rts				rts
.91a4					_TSTNextPullY:
.91a4	7a		ply				ply 								; restore current, fall through.
.91a5					_TSTNext:
.91a5	e6 38		inc $38				inc 	zTemp1 						; token counter
.91a7	98		tya				tya
.91a8	18		clc				clc
.91a9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.91ab	1a		inc a				inc 	a 							; +1
.91ac	1a		inc a				inc 	a 							; +2
.91ad	a8		tay				tay
.91ae	10 c1		bpl $9171			bpl 	_TSTLoop 					; if Y < $80 loop back
.91b0	98		tya				tya 								; add Y to zTemp0 and reset Y
.91b1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.91b3	18		clc				clc  								; but have tables > 255 bytes
.91b4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.91b6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.91b8	90 b7		bcc $9171			bcc 	_TSTLoop
.91ba	e6 37		inc $37				inc 	zTemp0+1
.91bc	80 b3		bra $9171			bra 	_TSTLoop
.91be					_TSTFail:
.91be	18		clc				clc
.91bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.91c0					KeywordSet0:
>91c0	00 65					.text	0,$65,""               ; $80 !0:EOF
>91c2	00 58					.text	0,$58,""               ; $81 !1:SH1
>91c4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>91c6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>91cc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>91d4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>91da	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>91e1	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>91e8	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>91ef	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>91f5	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>91fd	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9205	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>920b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9212	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9218	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9220	28
>9221	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9227	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>922d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9233	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>923a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9240	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9246	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>924b	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>924f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9255	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>925d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9264	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>926b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9273	43
>9274	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>927a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9280	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9287	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>928d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9293	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9298	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>929e	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>92a3	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>92ab	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>92b1	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>92b8	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>92be	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>92c3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>92ca	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>92d0	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>92d5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>92dd	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>92e1	ff					.text	$FF
.92e2					KeywordSet1:
>92e2	00 65					.text	0,$65,""               ; $80 !0:EOF
>92e4	00 58					.text	0,$58,""               ; $81 !1:SH1
>92e6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>92e8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>92f0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>92f7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>92fc	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9302	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9307	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>930f	45
>9310	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9315	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>931b	ff					.text	$FF
.931c					KeywordSet2:
>931c	00 65					.text	0,$65,""               ; $80 !0:EOF
>931e	00 58					.text	0,$58,""               ; $81 !1:SH1
>9320	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9322	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9323					TokeniseLine:
.9323	20 ab 94	jsr $94ab			jsr 	FixLineBufferCase 			; fix line case
.9326	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9328	8d 15 07	sta $0715			sta 	tokenOffset
.932b	9c 16 07	stz $0716			stz 	tokenLineNumber
.932e	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9331	a2 ff		ldx #$ff			ldx 	#$FF
.9333					_TKFindFirst:
.9333	e8		inx				inx
.9334	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9337	f0 79		beq $93b2			beq 	_TKExit
.9339	c9 20		cmp #$20			cmp 	#' '
.933b	90 f6		bcc $9333			bcc 	_TKFindFirst
.933d	c9 30		cmp #$30			cmp 	#'0'
.933f	90 07		bcc $9348			bcc 	_TKNoLineNumber
.9341	c9 3a		cmp #$3a			cmp 	#'9'+1
.9343	b0 03		bcs $9348			bcs 	_TKNoLineNumber
.9345	20 d5 94	jsr $94d5			jsr 	TokeniseExtractLineNumber
.9348					_TKNoLineNumber:
.9348					_TKTokeniseLoop:
.9348	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.934b	f0 65		beq $93b2			beq 	_TKExit
.934d	e8		inx				inx
.934e	c9 20		cmp #$20			cmp 	#' '
.9350	f0 f6		beq $9348			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9352	ca		dex				dex 								; undo last get, A contains character, X is position.
.9353	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9355	f0 61		beq $93b8			beq 	_TKTokeniseIdentifier
.9357	c9 41		cmp #$41			cmp 	#'A'
.9359	90 04		bcc $935f			bcc 	_TKTokenisePunctuation
.935b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.935d	90 59		bcc $93b8			bcc 	_TKTokeniseIdentifier
.935f					_TKTokenisePunctuation:
.935f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9361	f0 27		beq $938a			beq 	_TKString
.9363	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9365	f0 28		beq $938f			beq 	_TKHexConstant
.9367	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9369	f0 29		beq $9394			beq 	_TKCheckDouble
.936b	c9 3e		cmp #$3e			cmp 	#'>'
.936d	f0 25		beq $9394			beq 	_TKCheckDouble
.936f					_TKStandardPunctuation:
.936f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.9372	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9374	90 0e		bcc $9384			bcc 	_TKNoShift
.9376	48		pha				pha 								; save
.9377	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9379	85 36		sta $36				sta 	zTemp0
.937b	68		pla				pla
.937c	29 20		and #$20			and 	#32 						; bit 5
.937e	4a		lsr a				lsr 	a 							; shift into bit 3
.937f	4a		lsr a				lsr 	a
.9380	05 36		ora $36				ora 	zTemp0
.9382	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9384					_TKNoShift:
.9384	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte 			; write the punctuation character
.9387	e8		inx				inx 								; consume the character
.9388	80 be		bra $9348			bra 	_TKTokeniseLoop 			; and loop round again.
.938a					_TKString:
.938a	20 3a 94	jsr $943a			jsr 	TokeniseString
.938d	80 b9		bra $9348			bra 	_TKTokeniseLoop
.938f					_TKHexConstant:
.938f	20 75 94	jsr $9475			jsr 	TokeniseHexConstant
.9392	80 b4		bra $9348			bra 	_TKTokeniseLoop
.9394					_TKCheckDouble:
.9394	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.9397	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9399	90 d4		bcc $936f			bcc 	_TKStandardPunctuation
.939b	c9 3f		cmp #$3f			cmp 	#'>'+1
.939d	b0 d0		bcs $936f			bcs 	_TKStandardPunctuation
.939f	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.93a2	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.93a4	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.93a5	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.93a8	38		sec				sec
.93a9	e9 3c		sbc #$3c			sbc 	#'<'
.93ab	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.93ae	e8		inx				inx 								; consume both
.93af	e8		inx				inx
.93b0	80 96		bra $9348			bra 	_TKTokeniseLoop
.93b2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.93b4	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.93b7	60		rts				rts
.93b8					_TKTokeniseIdentifier:
.93b8	8e 00 07	stx $0700			stx 	identStart 					; save start
.93bb	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.93be					_TKCheckLoop:
.93be	e8		inx				inx 								; look at next, we know first is identifier.
.93bf	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.93c2	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.93c4	f0 f8		beq $93be			beq 	_TKCheckLoop
.93c6	c9 30		cmp #$30			cmp	 	#"0"
.93c8	90 0c		bcc $93d6			bcc 	_TKEndIdentifier
.93ca	c9 3a		cmp #$3a			cmp 	#"9"+1
.93cc	90 f0		bcc $93be			bcc 	_TKCheckLoop
.93ce	c9 41		cmp #$41			cmp	 	#"A"
.93d0	90 04		bcc $93d6			bcc 	_TKEndIdentifier
.93d2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.93d4	90 e8		bcc $93be			bcc 	_TKCheckLoop
.93d6					_TKEndIdentifier:
.93d6	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.93d9	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.93db	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.93dd	f0 06		beq $93e5			beq 	_TKHasTypeCharacter
.93df	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.93e1	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.93e3	d0 07		bne $93ec			bne 	_TKNoTypeCharacter
.93e5					_TKHasTypeCharacter:
.93e5	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.93e8	e8		inx				inx 								; read next
.93e9	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.93ec					_TKNoTypeCharacter:
.93ec	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.93ee	d0 09		bne $93f9			bne 	_TKNoArray
.93f0	e8		inx				inx 								; skip the (
.93f1	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.93f4	09 04		ora #$04			ora 	#$04
.93f6	8d 04 07	sta $0704			sta 	identTypeByte
.93f9					_TKNoArray:
.93f9	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.93fc	20 96 94	jsr $9496			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.93ff	a0 91		ldy #$91			ldy 	#(KeywordSet0) >> 8
.9401	a9 c0		lda #$c0			lda 	#(KeywordSet0) & $FF
.9403	20 67 91	jsr $9167			jsr 	TokeniseSearchTable
.9406	a2 00		ldx #$00			ldx 	#0
.9408	b0 1f		bcs $9429			bcs 	_TKFoundToken
.940a	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.940c	a9 e2		lda #$e2			lda 	#(KeywordSet1) & $FF
.940e	20 67 91	jsr $9167			jsr 	TokeniseSearchTable
.9411	a2 81		ldx #$81			ldx 	#$81
.9413	b0 14		bcs $9429			bcs 	_TKFoundToken
.9415	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.9417	a9 e2		lda #$e2			lda 	#(KeywordSet1) & $FF
.9419	20 67 91	jsr $9167			jsr 	TokeniseSearchTable
.941c	a2 82		ldx #$82			ldx 	#$82
.941e	b0 09		bcs $9429			bcs 	_TKFoundToken
.9420	20 26 95	jsr $9526			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9423	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9426	4c 48 93	jmp $9348			jmp 	_TKTokeniseLoop 			; and go round again.
.9429					_TKFoundToken:
.9429	48		pha				pha 								; save token
.942a	8a		txa				txa 								; shift in X, is there one ?
.942b	f0 03		beq $9430			beq 	_TKNoTShift
.942d	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte 			; if so, write it out
.9430					_TKNoTShift:
.9430	68		pla				pla 								; restore and write token
.9431	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.9434	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9437	4c 48 93	jmp $9348			jmp 	_TKTokeniseLoop 			; and go round again.
.943a					TokeniseString:
.943a	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.943c	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.943f	e8		inx				inx									; start of quoted string.
.9440	da		phx				phx 								; push start of string on top
.9441	ca		dex				dex
.9442					_TSFindEnd:
.9442	e8		inx				inx
.9443	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9446	f0 04		beq $944c			beq 	_TSEndOfString
.9448	c9 22		cmp #$22			cmp 	#'"'
.944a	d0 f6		bne $9442			bne 	_TSFindEnd
.944c					_TSEndOfString:
.944c	7a		ply				ply  								; so now Y is first character, X is character after end.
.944d	48		pha				pha 								; save terminating character
.944e	20 56 94	jsr $9456			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9451	68		pla				pla 								; terminating character
.9452	f0 01		beq $9455			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9454	e8		inx				inx
.9455					_TSNotQuote:
.9455	60		rts				rts
.9456					TOWriteBlockXY:
.9456	86 36		stx $36				stx 	zTemp0 						; write end character
.9458	98		tya				tya
.9459	49 ff		eor #$ff			eor 	#$FF
.945b	38		sec				sec
.945c	65 36		adc $36				adc 	zTemp0
.945e	1a		inc a				inc 	a 							; one extra for NULL
.945f	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.9462					_TOBlockLoop:
.9462	c4 36		cpy $36				cpy 	zTemp0
.9464	f0 09		beq $946f			beq 	_TOBlockExit
.9466	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9469	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.946c	c8		iny				iny
.946d	80 f3		bra $9462			bra 	_TOBlockLoop
.946f					_TOBlockExit:
.946f	a9 00		lda #$00			lda 	#0
.9471	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.9474	60		rts				rts
.9475					TokeniseHexConstant:
.9475	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9477	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.947a	e8		inx				inx									; start of quoted string.
.947b	da		phx				phx 								; push start of constant on top
.947c	ca		dex				dex
.947d					_THFindLoop:
.947d	e8		inx				inx
.947e	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9481	c9 30		cmp #$30			cmp 	#"0"
.9483	90 0c		bcc $9491			bcc 	_THFoundEnd
.9485	c9 3a		cmp #$3a			cmp 	#"9"+1
.9487	90 f4		bcc $947d			bcc 	_THFindLoop
.9489	c9 41		cmp #$41			cmp 	#"A"
.948b	90 04		bcc $9491			bcc 	_THFoundEnd
.948d	c9 47		cmp #$47			cmp 	#"F"+1
.948f	90 ec		bcc $947d			bcc 	_THFindLoop
.9491					_THFoundEnd:
.9491	7a		ply				ply 								; restore start
.9492	20 56 94	jsr $9456			jsr 	TOWriteBlockXY 				; output the block
.9495	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9496					TokeniseCalculateHash:
.9496	da		phx				phx
.9497	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.949a	a9 00		lda #$00			lda 	#0
.949c					_TCHLoop:
.949c	18		clc				clc
.949d	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.94a0	e8		inx				inx
.94a1	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.94a4	d0 f6		bne $949c			bne 	_TCHLoop
.94a6	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.94a9	fa		plx				plx
.94aa	60		rts				rts
.94ab					FixLineBufferCase:
.94ab	a2 00		ldx #$00			ldx 	#0
.94ad					_FLBCLoop:
.94ad	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.94b0	f0 22		beq $94d4			beq 	_FLBCExit 					; end of string.
.94b2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.94b4	f0 11		beq $94c7			beq 	_FLBCInQuotes
.94b6	e8		inx				inx
.94b7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.94b9	90 f2		bcc $94ad			bcc 	_FLBCLoop
.94bb	c9 7b		cmp #$7b			cmp 	#'z'+1
.94bd	b0 ee		bcs $94ad			bcs 	_FLBCLoop
.94bf	38		sec				sec 								; make U/C
.94c0	e9 20		sbc #$20			sbc 	#32
.94c2	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.94c5	80 e6		bra $94ad			bra 	_FLBCLoop
.94c7					_FLBCInQuotes:
.94c7	e8		inx				inx 								; advance
.94c8	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.94cb	f0 07		beq $94d4			beq 	_FLBCExit 					; exit on EOS
.94cd	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.94cf	d0 f6		bne $94c7			bne 	_FLBCInQuotes
.94d1	e8		inx				inx 								; skip over it
.94d2	80 d9		bra $94ad			bra 	_FLBCLoop
.94d4					_FLBCExit:
.94d4	60		rts				rts
.94d5					TokeniseExtractLineNumber:
.94d5	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.94d8	48		pha				pha
.94d9	ad 16 07	lda $0716			lda 	tokenLineNumber
.94dc	48		pha				pha
.94dd	20 13 95	jsr $9513			jsr 	_TELNTimes2 				; line # x 4
.94e0	20 13 95	jsr $9513			jsr 	_TELNTimes2 				; line # x 2
.94e3	18		clc				clc 								; add stacked value
.94e4	68		pla				pla
.94e5	6d 16 07	adc $0716			adc 	tokenLineNumber
.94e8	8d 16 07	sta $0716			sta 	tokenLineNumber
.94eb	68		pla				pla
.94ec	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.94ef	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.94f2	20 13 95	jsr $9513			jsr 	_TELNTimes2 				; line # x 10
.94f5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.94f8	e8		inx				inx
.94f9	29 0f		and #$0f			and 	#15 						; add to line #
.94fb	18		clc				clc
.94fc	6d 16 07	adc $0716			adc 	tokenLineNumber
.94ff	8d 16 07	sta $0716			sta 	tokenLineNumber
.9502	90 03		bcc $9507			bcc 	_TLENNoCarry
.9504	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9507					_TLENNoCarry:
.9507	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.950a	c9 30		cmp #$30			cmp 	#'0'
.950c	90 04		bcc $9512			bcc 	_TLENExit
.950e	c9 3a		cmp #$3a			cmp 	#'9'+1
.9510	90 c3		bcc $94d5			bcc 	TokeniseExtractLineNumber
.9512					_TLENExit:
.9512	60		rts				rts
.9513					_TELNTimes2:
.9513	0e 16 07	asl $0716			asl 	tokenLineNumber
.9516	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9519	60		rts				rts
.951a					TokeniseWriteByte:
.951a	da		phx				phx
.951b	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.951e	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9521	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9524	fa		plx				plx
.9525	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9526					CheckCreateVariableRecord:
.9526	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9528	85 36		sta $36				sta 	0+zTemp0
.952a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.952c	85 37		sta $37				sta 	1+zTemp0
.952e					_CCVSearch:
.952e	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9530	f0 2c		beq $955e			beq 	_CCVFail
.9532	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9534	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9536	cd 03 07	cmp $0703			cmp 	identHash
.9539	d0 16		bne $9551			bne 	_CCVNext
.953b	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.953d	ae 00 07	ldx $0700			ldx 	identStart
.9540					_CCVCompare:
.9540	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9543	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9545	e8		inx				inx 								; advance pointers
.9546	c8		iny				iny
.9547	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9548	d0 07		bne $9551			bne 	_CCVNext  					; didn't match go to next.
.954a	90 f4		bcc $9540			bcc 	_CCVCompare 				; not finished yet.
.954c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.954f	f0 41		beq $9592			beq 	_CCVFound 					; yes, we were successful
.9551					_CCVNext:
.9551	18		clc				clc
.9552	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9554	65 36		adc $36				adc 	zTemp0
.9556	85 36		sta $36				sta 	zTemp0
.9558	90 d4		bcc $952e			bcc 	_CCVSearch
.955a	e6 37		inc $37				inc 	zTemp0+1
.955c	80 d0		bra $952e			bra 	_CCVSearch
.955e					_CCVFail:
.955e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9560	ad 03 07	lda $0703			lda 	identHash
.9563	91 36		sta ($36),y			sta 	(zTemp0),y
.9565	c8		iny				iny 								; offset 2 is the type byte
.9566	ad 04 07	lda $0704			lda 	identTypeByte
.9569	91 36		sta ($36),y			sta 	(zTemp0),y
.956b	c8		iny				iny
.956c					_CCVData:
.956c	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.956e	91 36		sta ($36),y			sta 	(zTemp0),y
.9570	c8		iny				iny
.9571	c0 08		cpy #$08			cpy 	#8
.9573	90 f7		bcc $956c			bcc 	_CCVData
.9575	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9578					_CCVCopyName:
.9578	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.957b	91 36		sta ($36),y			sta 	(zTemp0),y
.957d	e8		inx				inx
.957e	c8		iny				iny
.957f	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9582	d0 f4		bne $9578			bne 	_CCVCopyName
.9584	98		tya				tya 								; patch offset
.9585	92 36		sta ($36)			sta 	(zTemp0)
.9587	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9589	91 36		sta ($36),y			sta 	(zTemp0),y
.958b	88		dey				dey
.958c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.958e	09 80		ora #$80			ora 	#$80
.9590	91 36		sta ($36),y			sta 	(zTemp0),y
.9592					_CCVFound:
.9592	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9594	38		sec				sec
.9595	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9597	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9599	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.959c	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.959e	20 1a 95	jsr $951a			jsr 	TokeniseWriteByte
.95a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9d3a					MemoryPeek:
.9d3a	b2 36		lda ($36)			lda 	(zTemp0)
.9d3c	60		rts				rts
.9d3d					MemoryPoke:
.9d3d	92 36		sta ($36)			sta 	(zTemp0)
.9d3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9d40					PrintHex:
.9d40	48		pha				pha
.9d41	4a		lsr a				lsr 	a
.9d42	4a		lsr a				lsr 	a
.9d43	4a		lsr a				lsr 	a
.9d44	4a		lsr a				lsr 	a
.9d45	20 49 9d	jsr $9d49			jsr 	_PrintNibble
.9d48	68		pla				pla
.9d49					_PrintNibble:
.9d49	29 0f		and #$0f			and 	#15
.9d4b	c9 0a		cmp #$0a			cmp 	#10
.9d4d	90 02		bcc $9d51			bcc 	_NoShift
.9d4f	69 06		adc #$06			adc 	#6
.9d51					_NoShift:
.9d51	69 30		adc #$30			adc 	#48
.9d53	4c 56 9d	jmp $9d56			jmp 	EXTPrintCharacter
.9d56					EXTPrintCharacter:
.9d56	48		pha				pha
.9d57	da		phx				phx
.9d58	5a		phy				phy
.9d59	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9d5c	7a		ply				ply
.9d5d	fa		plx				plx
.9d5e	68		pla				pla
.9d5f	60		rts				rts
.9d60					EXTInputSingleCharacter:
.9d60	da		phx				phx
.9d61	5a		phy				phy
.9d62					_EISCWait:
.9d62	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9d65	c9 00		cmp #$00			cmp 	#0
.9d67	f0 f9		beq $9d62			beq 	_EISCWait
.9d69	7a		ply				ply
.9d6a	fa		plx				plx
.9d6b	60		rts				rts
.9d6c					EXTInputLine:
.9d6c	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9d6e					_ILLoop:
.9d6e	da		phx				phx 								; read character in
.9d6f	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9d72	fa		plx				plx
.9d73	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9d75	f0 12		beq $9d89			beq 	_ILBackspace
.9d77	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9d79	f0 15		beq $9d90			beq 	_ILExit
.9d7b	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9d7d	90 ef		bcc $9d6e			bcc 	_ILLoop
.9d7f	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9d81	f0 eb		beq $9d6e			beq 	_ILLoop
.9d83	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9d86	e8		inx				inx
.9d87	80 e5		bra $9d6e			bra 	_ILLoop
.9d89					_ILBackspace:
.9d89	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9d8b	f0 e1		beq $9d6e			beq 	_ILLoop
.9d8d	ca		dex				dex 								; back one.
.9d8e	80 de		bra $9d6e			bra 	_ILLoop
.9d90					_ILExit:
.9d90	20 56 9d	jsr $9d56			jsr 	EXTPrintCharacter
.9d93	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9d96	60		rts				rts
.9d97					EXTBreakCheck:
.9d97	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.95a2					MemoryNew:
.95a2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.95a4	85 30		sta $30				sta 	codePtr
.95a6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.95a8	85 31		sta $31				sta 	codePtr+1
.95aa	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.95ac	92 30		sta ($30)			sta 	(codePtr)
.95ae	60		rts				rts
.95af					MemoryAppend:
.95af	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.95b1	85 30		sta $30				sta 	codePtr
.95b3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.95b5	85 31		sta $31				sta 	codePtr+1
.95b7					_MAFindEnd:
.95b7	b2 30		lda ($30)			lda 	(codePtr)
.95b9	f0 0d		beq $95c8			beq 	_MAFoundEnd
.95bb	18		clc				clc
.95bc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.95be	65 30		adc $30				adc 	codePtr
.95c0	85 30		sta $30				sta 	codePtr
.95c2	90 02		bcc $95c6			bcc 	_CREExit
.95c4	e6 31		inc $31				inc 	codePtr+1
.95c6					_CREExit:
.95c6	80 ef		bra $95b7			bra 	_MAFindEnd
.95c8					_MAFoundEnd:
.95c8	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.95cb	c0 04		cpy #$04			cpy 	#4 							; blank line
.95cd	f0 0e		beq $95dd			beq 	_MANoLine
.95cf	a9 00		lda #$00			lda 	#0 							; end of program
.95d1	91 30		sta ($30),y			sta 	(codePtr),y
.95d3					_MACopy:
.95d3	88		dey				dey
.95d4	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.95d7	91 30		sta ($30),y			sta 	(codePtr),y
.95d9	c0 00		cpy #$00			cpy 	#0
.95db	d0 f6		bne $95d3			bne 	_MACopy
.95dd					_MANoLine:
.95dd	60		rts				rts
.95de					MemoryInline:
.95de	98		tya				tya 								; put address into stack,x
.95df	18		clc				clc
.95e0	65 30		adc $30				adc 	codePtr
.95e2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95e5	a5 31		lda $31				lda 	codePtr+1
.95e7	69 00		adc #$00			adc 	#0
.95e9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95ec	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.95ef	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.95f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.95f3					MemoryTransferAX:
.95f3	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.95f5	86 37		stx $37				stx 	zTemp0+1
.95f7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.95f9	85 30		sta $30				sta 	codePtr
.95fb	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.95fd	85 31		sta $31				sta 	codePtr+1
.95ff					_MTAXLoop:
.95ff	b2 30		lda ($30)			lda 	(codePtr)
.9601	f0 1d		beq $9620			beq 	_MTAXError 					; not found.
.9603	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9605	b1 30		lda ($30),y			lda 	(codePtr),y
.9607	c5 36		cmp $36				cmp 	zTemp0
.9609	d0 07		bne $9612			bne 	_MTAXNext
.960b	c8		iny				iny 								; check MSB
.960c	b1 30		lda ($30),y			lda 	(codePtr),y
.960e	c5 37		cmp $37				cmp 	zTemp0+1
.9610	f0 0d		beq $961f			beq 	_MTAXExit 					; success !
.9612					_MTAXNext:
.9612	18		clc				clc
.9613	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9615	65 30		adc $30				adc 	codePtr
.9617	85 30		sta $30				sta 	codePtr
.9619	90 02		bcc $961d			bcc 	_CREExit
.961b	e6 31		inc $31				inc 	codePtr+1
.961d					_CREExit:
.961d	80 e0		bra $95ff			bra 	_MTAXLoop
.961f					_MTAXExit:
.961f	60		rts				rts
.9620					_MTAXError:
.9620	a9 0d		lda #$0d		lda	#13
.9622	4c e6 85	jmp $85e6		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
