
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 21:45:51 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_STACK = 17
=18					ERRID_STRUCT = 18

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 ad 82	jsr $82ad			jsr 	NewCommand 					; erase current program
.8006	20 77 8f	jsr $8f77			jsr 	BackloadProgram
.8009	4c 3d 83	jmp $833d			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 21 9b	jsr $9b21			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	d6 85					.word	ShiftLeft                        ; $00 <<
>8016	d0 84					.word	BinaryCompareLessEqual           ; $01 <=
>8018	c6 84					.word	BinaryCompareNotEqual            ; $02 <>
>801a	2b 99					.word	SyntaxError                      ; $03 !!3
>801c	2b 99					.word	SyntaxError                      ; $04 ><
>801e	da 84					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	d9 85					.word	ShiftRight                       ; $06 >>
>8022	2b 99					.word	SyntaxError                      ; $07 !!7
>8024	2b 99					.word	SyntaxError                      ; $08 !!8
>8026	2b 99					.word	SyntaxError                      ; $09 !!9
>8028	2b 99					.word	SyntaxError                      ; $0a !!10
>802a	2b 99					.word	SyntaxError                      ; $0b !!11
>802c	2b 99					.word	SyntaxError                      ; $0c !!12
>802e	2b 99					.word	SyntaxError                      ; $0d !!13
>8030	2b 99					.word	SyntaxError                      ; $0e !!14
>8032	2b 99					.word	SyntaxError                      ; $0f !!15
>8034	2b 99					.word	SyntaxError                      ; $10 @
>8036	2b 99					.word	SyntaxError                      ; $11 !!17
>8038	2b 99					.word	SyntaxError                      ; $12 !!18
>803a	2b 99					.word	SyntaxError                      ; $13 [
>803c	8b 94					.word	IntegerDivide                    ; $14 \
>803e	2b 99					.word	SyntaxError                      ; $15 ]
>8040	5f 87					.word	EorInteger                       ; $16 ^
>8042	2b 99					.word	SyntaxError                      ; $17 _
>8044	2b 99					.word	SyntaxError                      ; $18 `
>8046	2b 99					.word	SyntaxError                      ; $19 !!25
>8048	2b 99					.word	SyntaxError                      ; $1a !!26
>804a	2b 99					.word	SyntaxError                      ; $1b {
>804c	19 87					.word	OraInteger                       ; $1c |
>804e	2b 99					.word	SyntaxError                      ; $1d }
>8050	2b 99					.word	SyntaxError                      ; $1e ~
>8052	2b 99					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	2b 99					.word	SyntaxError                      ; $20
>8056	a5 87					.word	WordIndirect                     ; $21 !
>8058	2b 99					.word	SyntaxError                      ; $22 "
>805a	2b 99					.word	SyntaxError                      ; $23 #
>805c	2b 99					.word	SyntaxError                      ; $24 $
>805e	d8 94					.word	IntegerModulus                   ; $25 %
>8060	d3 86					.word	AndInteger                       ; $26 &
>8062	2b 99					.word	SyntaxError                      ; $27 '
>8064	2b 99					.word	SyntaxError                      ; $28 (
>8066	2b 99					.word	SyntaxError                      ; $29 )
>8068	4d 95					.word	MulInteger                       ; $2a *
>806a	6d 86					.word	AddInteger                       ; $2b +
>806c	2b 99					.word	SyntaxError                      ; $2c ,
>806e	a8 86					.word	SubInteger                       ; $2d -
>8070	2b 99					.word	SyntaxError                      ; $2e .
>8072	e4 96					.word	FDivideCommand                   ; $2f /
>8074	2b 99					.word	SyntaxError                      ; $30 0
>8076	2b 99					.word	SyntaxError                      ; $31 1
>8078	2b 99					.word	SyntaxError                      ; $32 2
>807a	2b 99					.word	SyntaxError                      ; $33 3
>807c	2b 99					.word	SyntaxError                      ; $34 4
>807e	2b 99					.word	SyntaxError                      ; $35 5
>8080	2b 99					.word	SyntaxError                      ; $36 6
>8082	2b 99					.word	SyntaxError                      ; $37 7
>8084	2b 99					.word	SyntaxError                      ; $38 8
>8086	2b 99					.word	SyntaxError                      ; $39 9
>8088	2b 99					.word	SyntaxError                      ; $3a :
>808a	2b 99					.word	SyntaxError                      ; $3b ;
>808c	b2 84					.word	BinaryCompareLess                ; $3c <
>808e	a8 84					.word	BinaryCompareEqual               ; $3d =
>8090	bc 84					.word	BinaryCompareGreater             ; $3e >
>8092	cc 87					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	92 83					.word	EOLCommand                       ; $80 !0:EOF
>8096	9f 83					.word	Shift1Command                    ; $81 !1:SH1
>8098	2b 99					.word	SyntaxError                      ; $82 !2:SH2
>809a	2a 98					.word	AbsUnary                         ; $83 ABS(
>809c	0f 8c					.word	AllocUnary                       ; $84 ALLOC(
>809e	3a 98					.word	AscUnary                         ; $85 ASC(
>80a0	ac 8c					.word	ChrUnary                         ; $86 CHR$(
>80a2	a4 84					.word	UnaryFalse                       ; $87 FALSE
>80a4	47 98					.word	FracUnary                        ; $88 FRAC(
>80a6	5d 98					.word	IntUnary                         ; $89 INT(
>80a8	b3 98					.word	IsValUnary                       ; $8a ISVAL(
>80aa	86 8d					.word	Unary_Left                       ; $8b LEFT$(
>80ac	6f 98					.word	LenUnary                         ; $8c LEN(
>80ae	b0 8d					.word	Unary_Mid                        ; $8d MID$(
>80b0	49 8c					.word	Unary_Not                        ; $8e NOT(
>80b2	96 8d					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	5f 8c					.word	Unary_Rnd                        ; $90 RND(
>80b6	89 98					.word	SgnUnary                         ; $91 SGN(
>80b8	be 8c					.word	SpcUnary                         ; $92 SPC(
>80ba	d9 8c					.word	Unary_Str                        ; $93 STR$(
>80bc	98 84					.word	UnaryTrue                        ; $94 TRUE
>80be	a9 98					.word	ValUnary                         ; $95 VAL(
>80c0	69 81					.word	ForCommand                       ; $96 FOR
>80c2	54 82					.word	IfCommand                        ; $97 IF
>80c4	a7 83					.word	Unused1                          ; $98 PROC
>80c6	1b 83					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	04 84					.word	Command_WHILE                    ; $9a WHILE
>80ca	7d 82					.word	EndIf                            ; $9b ENDIF
>80cc	2b 99					.word	SyntaxError                      ; $9c ENDPROC
>80ce	2b 99					.word	SyntaxError                      ; $9d NEXT
>80d0	2b 99					.word	SyntaxError                      ; $9e THEN
>80d2	24 83					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	25 84					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	2b 99					.word	SyntaxError                      ; $a2 CLS
>80da	2b 99					.word	SyntaxError                      ; $a3 DATA
>80dc	2b 99					.word	SyntaxError                      ; $a4 DIM
>80de	a7 83					.word	Unused3                          ; $a5 DOWNTO
>80e0	76 82					.word	ElseCode                         ; $a6 ELSE
>80e2	23 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	41 82					.word	GotoCommand                      ; $a8 GOTO
>80e6	7e 82					.word	LetCommand                       ; $a9 LET
>80e8	b7 82					.word	Command_Print                    ; $aa PRINT
>80ea	2b 99					.word	SyntaxError                      ; $ab READ
>80ec	0e 83					.word	RemCommand                       ; $ac REM
>80ee	33 82					.word	Command_RETURN                   ; $ad RETURN
>80f0	a7 83					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	2b 99					.word	SyntaxError                      ; $80 !0:EOF
>80f4	2b 99					.word	SyntaxError                      ; $81 !1:SH1
>80f6	2b 99					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	66 81					.word	EndCommand                       ; $85 END
>80fe	2b 99					.word	SyntaxError                      ; $86 LIST
>8100	ad 82					.word	NewCommand                       ; $87 NEW
>8102	2b 99					.word	SyntaxError                      ; $88 RESTORE
>8104	3d 83					.word	CommandRUN                       ; $89 RUN
>8106	2b 99					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	2b 99					.word	SyntaxError                      ; $80 !0:EOF
>810a	2b 99					.word	SyntaxError                      ; $81 !1:SH1
>810c	2b 99					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 51 8e	jsr $8e51			jsr 	EvaluateInteger 			; the assert test
.8113	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 33 84	jmp $8433		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 66 8e	jsr $8e66			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 18		beq $8150			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	18		clc				clc 								; go to the next variable
.8144	b2 36		lda ($36)			lda 	(zTemp0)
.8146	65 36		adc $36				adc 	zTemp0
.8148	85 36		sta $36				sta 	zTemp0
.814a	90 e8		bcc $8134			bcc 	_ClearZeroLoop
.814c	e6 37		inc $37				inc 	zTemp0+1
.814e	80 e4		bra $8134			bra 	_ClearZeroLoop
.8150					_ClearZeroEnd:
.8150	18		clc				clc
.8151	a5 36		lda $36				lda 	zTemp0
.8153	69 01		adc #$01			adc 	#1
.8155	8d 0c 07	sta $070c			sta 	lowMemPtr
.8158	a5 37		lda $37				lda 	zTemp0+1
.815a	69 00		adc #$00			adc 	#0
.815c	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815f	20 6a 8f	jsr $8f6a			jsr 	StackReset
.8162	20 ad 9a	jsr $9aad			jsr 	StringSystemInitialise
.8165	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8166					EndCommand:
.8166	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8169					ForCommand:
.8169	a9 d8		lda #$d8			lda 	#STK_FOR+8 					; allocate 16 bytes on the return stack.
.816b	20 17 8f	jsr $8f17			jsr 	StackOpen
.816e	a2 00		ldx #$00			ldx 	#0
.8170	20 06 8b	jsr $8b06			jsr 	EvaluateTerm
.8173	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8176	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8178	d0 49		bne $81c3			bne		_FCError
.817a	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.817c	20 82 94	jsr $9482			jsr 	CheckNextA
.817f	e8		inx				inx
.8180	20 51 8e	jsr $8e51			jsr 	EvaluateInteger 			; <from> in +1
.8183	b1 30		lda ($30),y			lda 	(codePtr),y
.8185	c8		iny				iny 								; consume it
.8186	48		pha				pha 								; save on stack for later
.8187	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8189	f0 04		beq $818f			beq 	_FCNoSyntax
.818b	c9 ae		cmp #$ae			cmp 	#KWD_TO
.818d	d0 37		bne $81c6			bne 	_FCSyntaxError
.818f					_FCNoSyntax:
.818f	e8		inx				inx
.8190	20 51 8e	jsr $8e51			jsr 	EvaluateInteger
.8193	20 49 8f	jsr $8f49			jsr 	STKSaveCodePosition 		; save loop back position
.8196	68		pla				pla 								; restore DOWNTO or TO
.8197	5a		phy				phy 								; save Y on the stack
.8198	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.819a	f0 02		beq $819e			beq 	_FCNotDownTo
.819c	a9 02		lda #$02			lda 	#2
.819e					_FCNotDownTo:
.819e	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.819f	a0 0f		ldy #$0f			ldy 	#15
.81a1	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81a3	a0 05		ldy #$05			ldy 	#5
.81a5	ad 08 06	lda $0608			lda 	NSMantissa0
.81a8	91 34		sta ($34),y			sta 	(basicStack),y
.81aa	ad 10 06	lda $0610			lda 	NSMantissa1
.81ad	c8		iny				iny
.81ae	91 34		sta ($34),y			sta 	(basicStack),y
.81b0	a0 07		ldy #$07			ldy 	#7 							; set initial index value
.81b2	a2 01		ldx #$01			ldx 	#1
.81b4	20 c9 81	jsr $81c9			jsr 	FCIntegerToStack
.81b7	a0 0b		ldy #$0b			ldy 	#11 						; set the terminal value
.81b9	a2 02		ldx #$02			ldx 	#2
.81bb	20 c9 81	jsr $81c9			jsr 	FCIntegerToStack
.81be	20 e9 81	jsr $81e9			jsr 	CopyIndexToReference
.81c1	7a		ply				ply 								; restore position
.81c2	60		rts				rts
.81c3					_FCError:
.81c3	4c 35 99	jmp $9935			jmp 	TypeError
.81c6					_FCSyntaxError:
.81c6	4c 2b 99	jmp $992b			jmp 	SyntaxError
.81c9					FCIntegerToStack:
.81c9	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81cc	10 03		bpl $81d1			bpl	 	_FCNotNegative
.81ce	20 8f 8e	jsr $8e8f			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81d1					_FCNotNegative:
.81d1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81d4	91 34		sta ($34),y			sta 	(basicStack),y
.81d6	c8		iny				iny
.81d7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81da	91 34		sta ($34),y			sta 	(basicStack),y
.81dc	c8		iny				iny
.81dd	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81e0	91 34		sta ($34),y			sta 	(basicStack),y
.81e2	c8		iny				iny
.81e3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81e6	91 34		sta ($34),y			sta 	(basicStack),y
.81e8	60		rts				rts
.81e9					CopyIndexToReference:
.81e9	5a		phy				phy
.81ea	a0 05		ldy #$05			ldy 	#5 							; copy address-7 to write to zTemp0
.81ec	38		sec				sec 								; (because we copy from offset 7)
.81ed	b1 34		lda ($34),y			lda 	(basicStack),y
.81ef	e9 07		sbc #$07			sbc 	#7
.81f1	85 36		sta $36				sta 	zTemp0
.81f3	c8		iny				iny
.81f4	b1 34		lda ($34),y			lda 	(basicStack),y
.81f6	e9 00		sbc #$00			sbc 	#0
.81f8	85 37		sta $37				sta 	zTemp0+1
.81fa	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.81fc	a0 0a		ldy #$0a			ldy 	#7+3 		 				; the MSB of the mantissa
.81fe	b1 34		lda ($34),y			lda 	(basicStack),y
.8200	0a		asl a				asl 	a 							; into carry
.8201	a0 07		ldy #$07			ldy 	#7 							; where to copy from.
.8203	90 14		bcc $8219			bcc 	_CITRNormal
.8205	38		sec				sec
.8206					_CITRNegative:
.8206	a9 00		lda #$00			lda 	#0
.8208	f1 34		sbc ($34),y			sbc 	(basicStack),y
.820a	91 36		sta ($36),y			sta 	(zTemp0),y
.820c	c8		iny				iny
.820d	ca		dex				dex
.820e	d0 f6		bne $8206			bne 	_CITRNegative
.8210	88		dey				dey 								; look at MSB of mantissa
.8211	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8213	09 80		ora #$80			ora 	#$80
.8215	91 36		sta ($36),y			sta 	(zTemp0),y
.8217	7a		ply				ply
.8218	60		rts				rts
.8219					_CITRNormal:
.8219	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.821b	91 36		sta ($36),y			sta 	(zTemp0),y
.821d	c8		iny				iny
.821e	ca		dex				dex
.821f	d0 f8		bne $8219			bne 	_CITRNormal
.8221	7a		ply				ply 								; and exit.
.8222	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8223					Command_GOSUB:
.8223	a2 00		ldx #$00			ldx 	#0
.8225	20 66 8e	jsr $8e66			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8228	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.822a	20 17 8f	jsr $8f17			jsr 	StackOpen 					; create frame
.822d	20 49 8f	jsr $8f49			jsr 	STKSaveCodePosition 		; save current position
.8230	4c 46 82	jmp $8246			jmp 	GotoStackX
.8233					Command_RETURN:
.8233	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8235	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8237	20 3e 8f	jsr $8f3e			jsr 	StackCheckFrame
.823a	20 5a 8f	jsr $8f5a			jsr 	STKLoadCodePosition 		; restore code position
.823d	20 30 8f	jsr $8f30			jsr 	StackClose
.8240	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8241					GotoCommand:
.8241	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8243	20 66 8e	jsr $8e66			jsr 	Evaluate16BitInteger
.8246					GotoStackX:
.8246	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8249	48		pha				pha 								; it is slightly inefficient, just in cases.
.824a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.824d	fa		plx				plx
.824e	20 40 94	jsr $9440			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8251	4c 48 83	jmp $8348			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8254					IfCommand:
.8254	a2 00		ldx #$00			ldx 	#0 							; If what.
.8256	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber
.8259	b1 30		lda ($30),y			lda 	(codePtr),y
.825b	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.825d	d0 0a		bne $8269			bne 	_IFStructured
.825f	c8		iny				iny 								; consume THEN
.8260	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; is it zero
.8263	f0 01		beq $8266			beq 	_IfFail 					; if fail, go to next line
.8265	60		rts				rts 								; if THEN just continue
.8266					_IfFail:
.8266	4c 92 83	jmp $8392			jmp 	EOLCommand
.8269					_IfStructured:
.8269	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; is it zero
.826c	d0 07		bne $8275			bne 	_IfExit 					; if not, then continue normally.
.826e	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8270	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8272	20 aa 83	jsr $83aa			jsr 	ScanForward 				; and run from there/
.8275					_IfExit:
.8275	60		rts				rts
.8276					ElseCode:
.8276	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8278	aa		tax				tax 								; so just go to the structure exit
.8279	20 aa 83	jsr $83aa			jsr 	ScanForward
.827c	60		rts				rts
.827d					EndIf:
.827d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.827e					LetCommand:
.827e	a2 00		ldx #$00			ldx 	#0
.8280	ad 1d 88	lda $881d			lda 	PrecedenceLevel+"*"			; precedence > this
.8283	20 37 88	jsr $8837			jsr 	EvaluateExpressionAtPrecedence
.8286	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8288	20 82 94	jsr $9482			jsr 	CheckNextA
.828b	e8		inx				inx 								; RHS
.828c	20 25 8e	jsr $8e25			jsr 	EvaluateValue
.828f	ca		dex				dex
.8290	20 94 82	jsr $8294			jsr 	AssignVariable
.8293	60		rts				rts
.8294					AssignVariable:
.8294	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8297	48		pha				pha 								; save a copy
.8298	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.829b	29 10		and #$10			and 	#NSBIsString
.829d	d0 0b		bne $82aa			bne 	_ASError
.829f	68		pla				pla 								; get back
.82a0	29 10		and #$10			and 	#NSBIsString 				; check type
.82a2	d0 03		bne $82a7			bne 	_ASString
.82a4	4c 72 88	jmp $8872			jmp 	AssignNumber
.82a7					_ASString:
.82a7	4c e0 88	jmp $88e0			jmp 	AssignString
.82aa					_ASError:
.82aa	4c 35 99	jmp $9935			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.82ad					NewCommand:
.82ad	20 ef 93	jsr $93ef			jsr 	MemoryNew
.82b0	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.82b3	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.82b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.82b7					Command_Print:
.82b7	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.82b8					_CPLoop:
.82b8	08		php				php 								; save last action flag
.82b9	b1 30		lda ($30),y			lda 	(codePtr),y
.82bb	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.82bd	f0 46		beq $8305			beq 	_CPExit
.82bf	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82c1	f0 42		beq $8305			beq 	_CPExit
.82c3	68		pla				pla 								; throw last action flag
.82c4	b1 30		lda ($30),y			lda 	(codePtr),y
.82c6	c8		iny				iny
.82c7	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.82c9	f0 37		beq $8302			beq 	_CPContinueWithSameLine
.82cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.82cd	f0 2e		beq $82fd			beq 	_CPTab
.82cf	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.82d1	f0 26		beq $82f9			beq 	_CPNewLine
.82d3	88		dey				dey 								; undo the get.
.82d4	a2 00		ldx #$00			ldx 	#0
.82d6	20 25 8e	jsr $8e25			jsr 	EvaluateValue 				; get a value into slot 0
.82d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.82dc	29 10		and #$10			and 	#NSBIsString
.82de	f0 0b		beq $82eb			beq 	_CPNumber
.82e0	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.82e3	ad 08 06	lda $0608			lda 	NSMantissa0
.82e6	20 85 84	jsr $8485			jsr 	PrintStringXA
.82e9	80 cc		bra $82b7			bra 	Command_Print 				; loop round clearing carry so NL if end
.82eb					_CPNumber:
.82eb	a9 05		lda #$05			lda 	#5 							; maximum decimals
.82ed	20 fb 8c	jsr $8cfb			jsr 	ConvertNumberToString 		; convert to string
.82f0	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.82f2	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.82f4	20 85 84	jsr $8485			jsr 	PrintStringXA
.82f7	80 be		bra $82b7			bra 	Command_Print 				; loop round clearing carry so NL if end
.82f9					_CPNewLine:
.82f9	a9 0d		lda #$0d			lda 	#13
.82fb	80 02		bra $82ff			bra 	_CPPrintChar
.82fd					_CPTab:
.82fd	a9 09		lda #$09			lda 	#9 							; print TAB
.82ff					_CPPrintChar:
.82ff	20 21 9b	jsr $9b21			jsr 	EXTPrintCharacter
.8302					_CPContinueWithSameLine:
.8302	38		sec				sec 								; loop round with carry set, which
.8303	80 b3		bra $82b8			bra 	_CPLoop 					; will inhibit final CR
.8305					_CPExit:
.8305	28		plp				plp 								; get last action flag
.8306	b0 05		bcs $830d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8308	a9 0d		lda #$0d			lda 	#13 						; print new line
.830a	20 21 9b	jsr $9b21			jsr 	EXTPrintCharacter
.830d					_CPExit2:
.830d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.830e					RemCommand:
.830e	b1 30		lda ($30),y			lda 	(codePtr),y
.8310	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8312	d0 06		bne $831a			bne 	_RMExit
.8314	c8		iny				iny
.8315	98		tya				tya
.8316	38		sec				sec
.8317	71 30		adc ($30),y			adc 	(codePtr),y
.8319	a8		tay				tay
.831a					_RMExit:
.831a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.831b					Command_REPEAT:
.831b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.831d	20 17 8f	jsr $8f17			jsr 	StackOpen
.8320	20 49 8f	jsr $8f49			jsr 	STKSaveCodePosition 		; save loop position
.8323	60		rts				rts
.8324					Command_UNTIL:
.8324	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8326	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8328	20 3e 8f	jsr $8f3e			jsr 	StackCheckFrame
.832b	a2 00		ldx #$00			ldx 	#0
.832d	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber 				; work out the number
.8330	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; check if zero
.8333	f0 04		beq $8339			beq 	_CULoopBack 				; if so keep looping
.8335	20 30 8f	jsr $8f30			jsr 	StackClose		 			; return
.8338	60		rts				rts
.8339					_CULoopBack:
.8339	20 5a 8f	jsr $8f5a			jsr 	STKLoadCodePosition 		; loop back
.833c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.833d					CommandRUN:
.833d	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8340	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8342	85 30		sta $30				sta 	codePtr
.8344	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8346	85 31		sta $31				sta 	codePtr+1
.8348					RUNNewLine:
.8348	b2 30		lda ($30)			lda 	(codePtr)
.834a	f0 43		beq $838f			beq 	CRNoProgram         		; no then END.
.834c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.834e	9a		txs				txs
.834f					RUNCodePointerLine:
.834f	a0 02		ldy #$02			ldy 	#2 							; start of program
.8351					_CRIncMainLoop:
.8351	c8		iny				iny
.8352					_CRMainLoop:
.8352	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8355	b1 30		lda ($30),y			lda 	(codePtr),y
.8357	10 10		bpl $8369			bpl 	_CRNotKeyword
.8359	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.835b	b0 04		bcs $8361			bcs 	_CRIsKeyword
.835d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.835f	b0 28		bcs $8389			bcs		_CRSyntaxError
.8361					_CRIsKeyword:
.8361	c8		iny				iny 								; consume command
.8362	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8363	aa		tax				tax 								; put in X for vector jump
.8364	20 8c 83	jsr $838c			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8367	80 e9		bra $8352			bra 	_CRMainLoop 				; and loop round
.8369					_CRNotKeyword:
.8369	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.836b	f0 e4		beq $8351			beq 	_CRIncMainLoop
.836d	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.836f	90 05		bcc $8376			bcc 	_CRNotVariable
.8371					_CRGoLet:
.8371	20 7e 82	jsr $827e			jsr 	LetCommand
.8374	80 dc		bra $8352			bra 	_CRMainLoop
.8376					_CRNotVariable:
.8376	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.8378	f0 f7		beq $8371			beq 	_CRGoLet
.837a	c9 21		cmp #$21			cmp 	#KWD_PLING
.837c	f0 f3		beq $8371			beq 	_CRGoLet
.837e	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.8380	f0 01		beq $8383			beq 	_CRGoRem
>8382	db						.byte 	$DB 						; causes a break in the emulator
.8383					_CRGoRem:
.8383	c8		iny				iny
.8384	20 0e 83	jsr $830e			jsr 	RemCommand
.8387	80 c9		bra $8352			bra 	_CRMainLoop
.8389					_CRSyntaxError:
.8389	4c 2b 99	jmp $992b			jmp 	SyntaxError
.838c					_CRCallVector0:
.838c	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.838f					CRNoProgram:
.838f	4c 66 81	jmp $8166			jmp 	EndCommand
.8392					EOLCommand:
.8392	18		clc				clc
.8393	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8395	65 30		adc $30				adc 	codePtr
.8397	85 30		sta $30				sta 	codePtr
.8399	90 02		bcc $839d			bcc 	_CREExit
.839b	e6 31		inc $31				inc 	codePtr+1
.839d					_CREExit:
.839d	80 a9		bra $8348			bra 	RunNewLine
.839f					Shift1Command:
.839f	b1 30		lda ($30),y			lda 	(codePtr),y
.83a1	c8		iny				iny
.83a2	0a		asl a				asl 	a
.83a3	aa		tax				tax
.83a4	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.83a7					Unused1:
.83a7					Unused2:
.83a7					Unused3:
.83a7	4c 2b 99	jmp $992b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.83aa					ScanForward:
.83aa	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.83ac	86 37		stx $37				stx 	zTemp0+1
.83ae	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.83b0					_ScanLoop:
.83b0	b1 30		lda ($30),y			lda 	(codePtr),y
.83b2	c8		iny				iny
.83b3	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.83b5	d0 09		bne $83c0			bne 	_ScanGoNext
.83b7	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.83b9	f0 04		beq $83bf			beq 	_ScanMatch
.83bb	c5 37		cmp $37				cmp 	zTemp0+1
.83bd	d0 01		bne $83c0			bne 	_ScanGoNext
.83bf					_ScanMatch:
.83bf	60		rts				rts
.83c0					_ScanGoNext:
.83c0	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.83c2	90 ec		bcc $83b0			bcc 	_ScanLoop
.83c4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.83c6	90 18		bcc $83e0			bcc 	_ScanSkipOne
.83c8	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.83ca	b0 2f		bcs $83fb			bcs 	_ScanSkipData
.83cc	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.83ce	90 e0		bcc $83b0			bcc 	_ScanLoop 					; if not, ordinary keywords.
.83d0	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.83d2	b0 dc		bcs $83b0			bcs 	_ScanLoop
.83d4	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.83d6	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.83d8	b0 d6		bcs $83b0			bcs 	_ScanLoop
.83da	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.83dc	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.83de	80 d0		bra $83b0			bra 	_ScanLoop
.83e0					_ScanSkipOne:
.83e0	c8		iny				iny 								; consume the extra one.
.83e1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.83e3	d0 cb		bne $83b0			bne 	_ScanLoop
.83e5	18		clc				clc
.83e6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.83e8	65 30		adc $30				adc 	codePtr
.83ea	85 30		sta $30				sta 	codePtr
.83ec	90 02		bcc $83f0			bcc 	_CREExit
.83ee	e6 31		inc $31				inc 	codePtr+1
.83f0					_CREExit:
.83f0	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.83f2	b2 30		lda ($30)			lda 	(codePtr)
.83f4	d0 ba		bne $83b0			bne 	_ScanLoop 					; if not zero, more to scan
.83f6	a9 12		lda #$12		lda	#18
.83f8	4c 33 84	jmp $8433		jmp	ErrorHandler
.83fb					_ScanSkipData:
.83fb	88		dey				dey 								; point at data token
.83fc	c8		iny				iny
.83fd	98		tya				tya
.83fe	38		sec				sec
.83ff	71 30		adc ($30),y			adc 	(codePtr),y
.8401	a8		tay				tay
.8402	80 ac		bra $83b0			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8404					Command_WHILE:
.8404	5a		phy				phy 								; save position of the test
.8405	a2 00		ldx #$00			ldx 	#0
.8407	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber 				; work out the number
.840a	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; check if zero
.840d	f0 0e		beq $841d			beq 	_WHExitLoop 				; if so exit the loop
.840f	98		tya				tya 								; position *after* test.
.8410	7a		ply				ply 								; restore position before test, at WHILE
.8411	88		dey				dey
.8412	48		pha				pha 								; push after test on the stack
.8413	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8415	20 17 8f	jsr $8f17			jsr 	StackOpen
.8418	20 49 8f	jsr $8f49			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.841b	7a		ply				ply 								; restore the position *after* the test
.841c	60		rts				rts
.841d					_WHExitLoop:
.841d	68		pla				pla 								; throw post loop position
.841e	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8420	aa		tax				tax
.8421	20 aa 83	jsr $83aa			jsr 	ScanForward
.8424	60		rts				rts
.8425					Command_WEND:
.8425	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8427	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8429	20 3e 8f	jsr $8f3e			jsr 	StackCheckFrame
.842c	20 5a 8f	jsr $8f5a			jsr 	STKLoadCodePosition 		; loop back
.842f	20 30 8f	jsr $8f30			jsr 	StackClose		 			; erase the frame
.8432	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9472					CheckRightBracket:
.9472	b1 30		lda ($30),y			lda 	(codePtr),y
.9474	c8		iny				iny
.9475	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9477	d0 0f		bne $9488			bne 	CNAFail
.9479	60		rts				rts
.947a					CheckComma:
.947a	b1 30		lda ($30),y			lda 	(codePtr),y
.947c	c8		iny				iny
.947d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.947f	d0 07		bne $9488			bne 	CNAFail
.9481	60		rts				rts
.9482					CheckNextA:
.9482	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9484	d0 02		bne $9488			bne 	CNAFail
.9486	c8		iny				iny 								; skip character
.9487	60		rts				rts 								; and exit
.9488					CNAFail:
.9488	4c 2b 99	jmp $992b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8433					ErrorHandler:
.8433	a8		tay				tay 								; find the error text
.8434	f0 42		beq $8478			beq 	_EHEnd
.8436	a2 00		ldx #$00			ldx 	#0
.8438					_EHFind:
.8438	88		dey				dey 								; found the error text ?
.8439	f0 0a		beq $8445			beq 	_EHFound
.843b					_EHFindZero:
.843b	bd 44 99	lda $9944,x			lda 	ErrorText,x 				; find the next error
.843e	e8		inx				inx
.843f	c9 00		cmp #$00			cmp 	#0
.8441	d0 f8		bne $843b			bne 	_EHFindZero
.8443	80 f3		bra $8438			bra 	_EHFind
.8445					_EHFound:
.8445	bd 44 99	lda $9944,x			lda 	ErrorText,x 				; print the message
.8448	20 21 9b	jsr $9b21			jsr 	EXTPrintCharacter
.844b	e8		inx				inx
.844c	bd 44 99	lda $9944,x			lda 	ErrorText,x
.844f	d0 f4		bne $8445			bne 	_EHFound
.8451	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8453	b1 30		lda ($30),y			lda 	(codePtr),y
.8455	d0 05		bne $845c			bne 	_EHAtMsg
.8457	c8		iny				iny
.8458	b1 30		lda ($30),y			lda 	(codePtr),y
.845a	f0 17		beq $8473			beq 	_EHCREnd
.845c					_EHAtMsg:
.845c	a2 84		ldx #$84			ldx 	#_AtMsg >> 8 				; print " at "
.845e	a9 7b		lda #$7b			lda 	#_AtMsg & $FF
.8460	20 85 84	jsr $8485			jsr 	PrintStringXA
.8463	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8465	b1 30		lda ($30),y			lda 	(codePtr),y
.8467	48		pha				pha
.8468	c8		iny				iny
.8469	b1 30		lda ($30),y			lda 	(codePtr),y
.846b	aa		tax				tax
.846c	68		pla				pla
.846d	20 ce 95	jsr $95ce			jsr 	ConvertInt16 				; convert XA to string
.8470	20 85 84	jsr $8485			jsr 	PrintStringXA 				; and print it.
.8473					_EHCREnd:
.8473	a9 0d		lda #$0d			lda 	#13 						; new line
.8475	20 21 9b	jsr $9b21			jsr 	EXTPrintCharacter
.8478					_EHEnd:
.8478	4c 0c 80	jmp $800c			jmp 	WarmStart
>847b	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8483	20 00
.8485					PrintStringXA:
.8485	5a		phy				phy
.8486	86 37		stx $37				stx 	zTemp0+1
.8488	85 36		sta $36				sta 	zTemp0
.848a	a0 00		ldy #$00			ldy 	#0
.848c					_PSXALoop:
.848c	b1 36		lda ($36),y			lda 	(zTemp0),y
.848e	f0 06		beq $8496			beq 	_PSXAExit
.8490	20 21 9b	jsr $9b21			jsr 	EXTPrintCharacter
.8493	c8		iny				iny
.8494	80 f6		bra $848c			bra 	_PSXALoop
.8496					_PSXAExit:
.8496	7a		ply				ply
.8497	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8498					UnaryTrue:
.8498	fa		plx				plx
.8499					ReturnTrue:
.8499	a9 01		lda #$01			lda 	#1  						; set to 1
.849b	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.849e	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.84a0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84a3	60		rts				rts
.84a4					UnaryFalse:
.84a4	fa		plx				plx
.84a5					ReturnFalse:
.84a5	4c da 8e	jmp $8eda			jmp 	NSMSetZero 					; set it all to zero
.84a8					BinaryCompareEqual:
.84a8	fa		plx				plx
.84a9	20 e4 84	jsr $84e4			jsr 	CompareBaseCode
.84ac	c9 00		cmp #$00			cmp 	#0
.84ae	f0 e9		beq $8499			beq 	ReturnTrue
.84b0	80 f3		bra $84a5			bra 	ReturnFalse
.84b2					BinaryCompareLess:
.84b2	fa		plx				plx
.84b3	20 e4 84	jsr $84e4			jsr 	CompareBaseCode
.84b6	c9 ff		cmp #$ff			cmp 	#$FF
.84b8	f0 df		beq $8499			beq 	ReturnTrue
.84ba	80 e9		bra $84a5			bra 	ReturnFalse
.84bc					BinaryCompareGreater:
.84bc	fa		plx				plx
.84bd	20 e4 84	jsr $84e4			jsr 	CompareBaseCode
.84c0	c9 01		cmp #$01			cmp 	#1
.84c2	f0 d5		beq $8499			beq 	ReturnTrue
.84c4	80 df		bra $84a5			bra 	ReturnFalse
.84c6					BinaryCompareNotEqual:
.84c6	fa		plx				plx
.84c7	20 e4 84	jsr $84e4			jsr 	CompareBaseCode
.84ca	c9 00		cmp #$00			cmp 	#0
.84cc	d0 cb		bne $8499			bne 	ReturnTrue
.84ce	80 d5		bra $84a5			bra 	ReturnFalse
.84d0					BinaryCompareLessEqual:
.84d0	fa		plx				plx
.84d1	20 e4 84	jsr $84e4			jsr 	CompareBaseCode
.84d4	c9 01		cmp #$01			cmp 	#1
.84d6	d0 c1		bne $8499			bne 	ReturnTrue
.84d8	80 cb		bra $84a5			bra 	ReturnFalse
.84da					BinaryCompareGreaterEqual:
.84da	fa		plx				plx
.84db	20 e4 84	jsr $84e4			jsr 	CompareBaseCode
.84de	c9 ff		cmp #$ff			cmp 	#$FF
.84e0	d0 b7		bne $8499			bne 	ReturnTrue
.84e2	80 c1		bra $84a5			bra 	ReturnFalse
.84e4					CompareBaseCode:
.84e4	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; make both values if references.
.84e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.84ea	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84ed	29 10		and #$10			and 	#NSTString
.84ef	d0 40		bne $8531			bne 	_CBCString
.84f1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.84f4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84f7	d0 3b		bne $8534			bne 	_CBCFloat
.84f9	bd 00 06	lda $0600,x			lda 	NSStatus,x
.84fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84ff	29 08		and #$08			and 	#NSTFloat
.8501	d0 31		bne $8534			bne 	_CBCFloat
.8503	20 37 85	jsr $8537			jsr 	CompareFixMinusZero
.8506	e8		inx				inx
.8507	20 37 85	jsr $8537			jsr 	CompareFixMinusZero
.850a	ca		dex				dex
.850b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.850e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8511	10 0b		bpl $851e			bpl 	_CDCSameSign
.8513	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8516	30 16		bmi $852e			bmi 	_CBCLess 					; return $FF
.8518					_CBCGreater:
.8518	a9 01		lda #$01			lda 	#1
.851a	60		rts				rts
.851b					_CBCEqual:
.851b	a9 00		lda #$00			lda 	#0
.851d	60		rts				rts
.851e					_CDCSameSign:
.851e	20 47 86	jsr $8647			jsr 	SubTopTwoStack 				; unsigned subtract
.8521	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; or the mantissa together
.8524	f0 f5		beq $851b			beq 	_CBCEqual 					; -0 == 0
.8526	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8529	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.852c	10 ea		bpl $8518			bpl 	_CBCGreater
.852e					_CBCLess:
.852e	a9 ff		lda #$ff			lda 	#$FF
.8530	60		rts				rts
.8531					_CBCString:
.8531	4c 9d 85	jmp $859d			jmp 	CompareStrings
.8534					_CBCFloat:
.8534	4c ca 96	jmp $96ca			jmp 	CompareFloat
.8537					CompareFixMinusZero:
.8537	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero
.853a	d0 03		bne $853f			bne 	_CFXMZNotZero
.853c	9e 00 06	stz $0600,x			stz 	NSStatus,x
.853f					_CFXMZNotZero:
.853f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8540					StringConcat:
.8540	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8543	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8546	29 18		and #$18			and 	#NSBTypeMask
.8548	c9 10		cmp #$10			cmp 	#NSTString
.854a	d0 4e		bne $859a			bne		_SCType
.854c	64 38		stz $38				stz 	zTemp1 						; counting total length
.854e	e8		inx				inx
.854f	20 6d 85	jsr $856d			jsr 	_SCSetupZ0 					; setup for second
.8552	20 78 85	jsr $8578			jsr 	_SCLengthZ0 				; length for second
.8555	ca		dex				dex
.8556	20 6d 85	jsr $856d			jsr 	_SCSetupZ0 					; setup for first
.8559	20 78 85	jsr $8578			jsr 	_SCLengthZ0 				; length for first
.855c	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.855e	20 ce 9a	jsr $9ace			jsr 	StringTempAllocate
.8561	20 8b 85	jsr $858b			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8564	e8		inx				inx
.8565	20 6d 85	jsr $856d			jsr 	_SCSetupZ0 					; copy second out
.8568	20 8b 85	jsr $858b			jsr 	_SCCopy
.856b	ca		dex				dex
.856c	60		rts				rts
.856d					_SCSetupZ0:
.856d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8570	85 36		sta $36				sta 	zTemp0
.8572	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8575	85 37		sta $37				sta 	zTemp0+1
.8577	60		rts				rts
.8578					_SCLengthZ0:
.8578	5a		phy				phy
.8579	a0 00		ldy #$00			ldy 	#0
.857b					_SCLenLoop:
.857b	b1 36		lda ($36),y			lda 	(zTemp0),y
.857d	f0 0a		beq $8589			beq 	_SCLExit
.857f	c8		iny				iny
.8580	e6 38		inc $38				inc 	zTemp1
.8582	10 f7		bpl $857b			bpl		_SCLenLoop
.8584	a9 09		lda #$09		lda	#9
.8586	4c 33 84	jmp $8433		jmp	ErrorHandler
.8589					_SCLExit:
.8589	7a		ply				ply
.858a	60		rts				rts
.858b					_SCCopy:
.858b	5a		phy				phy
.858c	a0 00		ldy #$00			ldy 	#0
.858e					_SCCopyLoop:
.858e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8590	f0 06		beq $8598			beq 	_SCCExit
.8592	20 0c 9b	jsr $9b0c			jsr 	StringTempWrite
.8595	c8		iny				iny
.8596	80 f6		bra $858e			bra 	_SCCopyLoop
.8598					_SCCExit:
.8598	7a		ply				ply
.8599	60		rts				rts
.859a					_SCType:
.859a	4c 35 99	jmp $9935			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.948b					IntegerDivide:
.948b	fa		plx				plx
.948c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.948f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9492	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9493	0a		asl a				asl 	a
.9494	10 05		bpl $949b			bpl 	_NotRef
.9496	48		pha				pha
.9497	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.949a	68		pla				pla
.949b					_NotRef:
.949b	0a		asl a				asl 	a
.949c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.949e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94a1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.94a4	f0 03		beq $94a9			beq 	_IntegerCode 				; if clear, then we have two integers
.94a6	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.94a9					_IntegerCode:
.94a9	20 cb 94	jsr $94cb			jsr 	CheckDivideZero 			; do div zero check
.94ac	20 03 95	jsr $9503			jsr 	Int32Divide 				; do the division
.94af	20 c0 95	jsr $95c0			jsr 	CalculateSign 				; calculate result sign
.94b2					NSMCopyPlusTwoToZero:
.94b2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.94b5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94b8	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.94bb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94be	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.94c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94c4	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.94c7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94ca	60		rts				rts
.94cb					CheckDivideZero:
.94cb	e8		inx				inx
.94cc	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero
.94cf	f0 02		beq $94d3			beq 	_CDVError
.94d1	ca		dex				dex
.94d2	60		rts				rts
.94d3					_CDVError:
.94d3	a9 03		lda #$03		lda	#3
.94d5	4c 33 84	jmp $8433		jmp	ErrorHandler
.94d8					IntegerModulus:
.94d8	fa		plx				plx
.94d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.94dc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.94df	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94e0	0a		asl a				asl 	a
.94e1	10 05		bpl $94e8			bpl 	_NotRef
.94e3	48		pha				pha
.94e4	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94e7	68		pla				pla
.94e8					_NotRef:
.94e8	0a		asl a				asl 	a
.94e9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94eb	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94ee	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.94f1	f0 03		beq $94f6			beq 	_IntegerCode 				; if clear, then we have two integers
.94f3	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.94f6					_IntegerCode:
.94f6	20 cb 94	jsr $94cb			jsr 	CheckDivideZero 			; do div zero check
.94f9	20 03 95	jsr $9503			jsr 	Int32Divide 				; do the division
.94fc	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.94ff	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9502	60		rts				rts
.9503					Int32Divide:
.9503	48		pha				pha 								; save AXY
.9504	5a		phy				phy
.9505	20 b1 8e	jsr $8eb1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9508	20 d6 8e	jsr $8ed6			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.950b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.950d					_I32DivideLoop:
.950d	e8		inx				inx
.950e	e8		inx				inx
.950f	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9512	ca		dex				dex
.9513	ca		dex				dex
.9514	20 f0 8e	jsr $8ef0			jsr 	NSMRotateLeft
.9517	20 43 95	jsr $9543			jsr 	DivideCheckSubtract 		; check if subtract possible
.951a	90 03		bcc $951f			bcc 	_I32DivideNoCarryIn
.951c	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.951f					_I32DivideNoCarryIn:
.951f	88		dey				dey 								; loop round till division completed.
.9520	d0 eb		bne $950d			bne 	_I32DivideLoop
.9522	7a		ply				ply 								; restore AXY and exit
.9523	68		pla				pla
.9524	60		rts				rts
.9525					Int32ShiftDivide:
.9525	48		pha				pha 								; save AY
.9526	5a		phy				phy
.9527	e8		inx				inx 								; clear S[X+2]
.9528	e8		inx				inx
.9529	20 da 8e	jsr $8eda			jsr 	NSMSetZero
.952c	ca		dex				dex
.952d	ca		dex				dex
.952e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9530					_I32SDLoop:
.9530	20 43 95	jsr $9543			jsr 	DivideCheckSubtract 		; check if subtract possible
.9533	e8		inx				inx
.9534	e8		inx				inx
.9535	20 f0 8e	jsr $8ef0			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9538	ca		dex				dex
.9539	ca		dex				dex
.953a	20 f0 8e	jsr $8ef0			jsr 	NSMRotateLeft
.953d	88		dey				dey 	 							; do 31 times
.953e	d0 f0		bne $9530			bne 	_I32SDLoop
.9540	7a		ply				ply 								; restore AY and exit
.9541	68		pla				pla
.9542	60		rts				rts
.9543					DivideCheckSubtract:
.9543	20 47 86	jsr $8647			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9546	b0 04		bcs $954c			bcs 	_DCSExit 					; if carry set, then could do, exit
.9548	20 21 86	jsr $8621			jsr 	AddTopTwoStack 				; add it back in
.954b	18		clc				clc 								; and return False
.954c					_DCSExit:
.954c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.954d					MulInteger:
.954d	fa		plx				plx
.954e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9551	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9554	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9555	0a		asl a				asl 	a
.9556	10 05		bpl $955d			bpl 	_NotRef
.9558	48		pha				pha
.9559	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.955c	68		pla				pla
.955d					_NotRef:
.955d	0a		asl a				asl 	a 							; put MSB of type into A:7
.955e	30 0b		bmi $956b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9560	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9563	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9566	f0 06		beq $956e			beq 	_IntegerCode 				; if clear, then we have two integers
.9568	4c a1 97	jmp $97a1			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.956b					_StringData:
.956b	4c 3f 99	jmp $993f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.956e					_IntegerCode:
.956e	20 7b 95	jsr $957b			jsr 	MultiplyShort
.9571	c9 00		cmp #$00			cmp 	#0
.9573	f0 05		beq $957a			beq 	_MIExit
.9575	a9 04		lda #$04		lda	#4
.9577	4c 33 84	jmp $8433		jmp	ErrorHandler
.957a					_MIExit:
.957a	60		rts				rts
.957b					MultiplyShort:
.957b	5a		phy				phy 								; save Y
.957c	20 b1 8e	jsr $8eb1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.957f	20 d6 8e	jsr $8ed6			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9582	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9584					_I32MLoop:
.9584	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9587	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.958a	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.958d	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9590	f0 28		beq $95ba			beq 	_I32MExit 					; exit if zero
.9592	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9595	29 01		and #$01			and 	#1
.9597	f0 0e		beq $95a7			beq 	_I32MNoAdd
.9599	20 21 86	jsr $8621			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.959c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.959f	10 06		bpl $95a7			bpl 	_I32MNoAdd
.95a1					_I32ShiftRight:
.95a1	20 fd 8e	jsr $8efd			jsr 	NSMShiftRight 				; shift S[X] right
.95a4	c8		iny				iny 								; increment shift count
.95a5	80 0a		bra $95b1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.95a7					_I32MNoAdd:
.95a7	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.95aa	70 f5		bvs $95a1			bvs 	_I32ShiftRight 				; instead.
.95ac	e8		inx				inx
.95ad	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.95b0	ca		dex				dex
.95b1					_I32MShiftUpper:
.95b1	e8		inx				inx 								; shift S[X+2] right
.95b2	e8		inx				inx
.95b3	20 fd 8e	jsr $8efd			jsr 	NSMShiftRight
.95b6	ca		dex				dex
.95b7	ca		dex				dex
.95b8	80 ca		bra $9584			bra 	_I32MLoop 					; try again.
.95ba					_I32MExit:
.95ba	20 c0 95	jsr $95c0			jsr 	CalculateSign
.95bd	98		tya				tya 								; shift in A
.95be	7a		ply				ply 								; restore Y and exit
.95bf	60		rts				rts
.95c0					CalculateSign:
.95c0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.95c3	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.95c6	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.95c9	0a		asl a				asl 	a 							; shift bit 7 into carry
.95ca	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.95cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.859d					CompareStrings:
.859d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.85a0	3d 01 06	and $0601,x			and 	NSStatus+1,x
.85a3	29 10		and #$10			and 	#NSBIsString
.85a5	f0 2c		beq $85d3			beq 	_CSTypeError
.85a7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.85aa	85 36		sta $36				sta 	zTemp0
.85ac	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.85af	85 37		sta $37				sta 	zTemp0+1
.85b1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.85b4	85 38		sta $38				sta 	zTemp1
.85b6	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.85b9	85 39		sta $39				sta 	zTemp1+1
.85bb	5a		phy				phy 								; save Y so we can access strings
.85bc	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.85be					_CSLoop:
.85be	c8		iny				iny
.85bf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.85c1	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.85c3	d0 06		bne $85cb			bne 	_CSDifferent
.85c5	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.85c7	d0 f5		bne $85be			bne 	_CSLoop 					; still comparing
.85c9					_CSExit:
.85c9	7a		ply				ply 								; reached end, return zero in A from EOS
.85ca	60		rts				rts
.85cb					_CSDifferent:
.85cb	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.85cd	90 fa		bcc $85c9			bcc		_CSExit
.85cf	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.85d1	80 f6		bra $85c9			bra 	_CSExit
.85d3					_CSTypeError:
.85d3	4c 35 99	jmp $9935			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.85d6					ShiftLeft:
.85d6	38		sec				sec
.85d7	80 01		bra $85da			bra 	ShiftMain
.85d9					ShiftRight:
.85d9	18		clc				clc
.85da					ShiftMain:
.85da	fa		plx				plx 								; restore X
.85db	08		php				php 								; save direction
.85dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85df	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85e3	0a		asl a				asl 	a
.85e4	10 05		bpl $85eb			bpl 	_NotRef
.85e6	48		pha				pha
.85e7	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85ea	68		pla				pla
.85eb					_NotRef:
.85eb	0a		asl a				asl 	a
.85ec	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85ee	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85f1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85f4	f0 03		beq $85f9			beq 	_IntegerCode 				; if clear, then we have two integers
.85f6	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.85f9					_IntegerCode:
.85f9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.85fc	29 e0		and #$e0			and 	#$E0
.85fe	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8601	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8604	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8607	d0 13		bne $861c			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8609					_SMLoop:
.8609	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.860c	30 11		bmi $861f			bmi 	_SMExit 					; exit if done.
.860e	28		plp				plp 								; restore direcition setting
.860f	08		php				php
.8610	90 05		bcc $8617			bcc 	_SMRight
.8612	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; shift left if CS
.8615	80 f2		bra $8609			bra 	_SMLoop
.8617					_SMRight:
.8617	20 fd 8e	jsr $8efd			jsr 	NSMShiftRight 				; shift right if CC
.861a	80 ed		bra $8609			bra 	_SMLoop
.861c					_SMExit0:
.861c	20 da 8e	jsr $8eda			jsr 	NSMSetZero 					; return zero.
.861f					_SMExit:
.861f	28		plp				plp 								; throw direction
.8620	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8621					AddTopTwoStack:
.8621	18		clc				clc
.8622	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8625	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8628	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.862b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.862e	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8631	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8634	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8637	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.863a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.863d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8640	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8643	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8646	60		rts				rts
.8647					SubTopTwoStack:
.8647	38		sec				sec
.8648	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.864b	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.864e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8651	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8654	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8657	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.865a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.865d	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8660	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8663	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8666	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8669	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.866c	60		rts				rts
.866d					AddInteger:
.866d	fa		plx				plx
.866e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8671	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8674	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8675	0a		asl a				asl 	a
.8676	10 05		bpl $867d			bpl 	_NotRef
.8678	48		pha				pha
.8679	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.867c	68		pla				pla
.867d					_NotRef:
.867d	0a		asl a				asl 	a 							; put MSB of type into A:7
.867e	30 0b		bmi $868b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8680	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8683	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8686	f0 06		beq $868e			beq 	_IntegerCode 				; if clear, then we have two integers
.8688	4c 29 96	jmp $9629			jmp 	FloatingPointAdd 							; otherwise at least one float.
.868b					_StringData:
.868b	4c 40 85	jmp $8540			jmp 	StringConcat							; at least one string - don't know both are strings.
.868e					_IntegerCode:
.868e					AddCode:
.868e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8691	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8694	10 8b		bpl $8621			bpl 	AddTopTwoStack
.8696	20 47 86	jsr $8647			jsr 	SubTopTwoStack 				; do a physical subtraction
.8699	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.869c	10 09		bpl $86a7			bpl 	_AddExit
.869e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.86a1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86a4	20 8f 8e	jsr $8e8f			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.86a7					_AddExit:
.86a7	60		rts				rts
.86a8					SubInteger:
.86a8	fa		plx				plx
.86a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86ac	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86af	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86b0	0a		asl a				asl 	a
.86b1	10 05		bpl $86b8			bpl 	_NotRef
.86b3	48		pha				pha
.86b4	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86b7	68		pla				pla
.86b8					_NotRef:
.86b8	0a		asl a				asl 	a 							; put MSB of type into A:7
.86b9	30 0b		bmi $86c6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.86bb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86be	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86c1	f0 06		beq $86c9			beq 	_IntegerCode 				; if clear, then we have two integers
.86c3	4c 2e 96	jmp $962e			jmp 	FloatingPointSub 							; otherwise at least one float.
.86c6					_StringData:
.86c6	4c 3f 99	jmp $993f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.86c9					_IntegerCode:
.86c9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.86cc	49 80		eor #$80			eor 	#$80
.86ce	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.86d1	80 bb		bra $868e			bra 	AddCode 					; and do the same code as add.
.86d3					AndInteger:
.86d3	fa		plx				plx
.86d4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86d7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86da	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86db	0a		asl a				asl 	a
.86dc	10 05		bpl $86e3			bpl 	_NotRef
.86de	48		pha				pha
.86df	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86e2	68		pla				pla
.86e3					_NotRef:
.86e3	0a		asl a				asl 	a
.86e4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86e6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86e9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86ec	f0 03		beq $86f1			beq 	_IntegerCode 				; if clear, then we have two integers
.86ee	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.86f1					_IntegerCode:
.86f1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.86f4	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.86f7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86fa	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.86fd	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8700	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8703	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8706	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8709	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.870c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.870f	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8712	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8715	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8718	60		rts				rts
.8719					OraInteger:
.8719	fa		plx				plx
.871a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.871d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8720	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8721	0a		asl a				asl 	a
.8722	10 05		bpl $8729			bpl 	_NotRef
.8724	48		pha				pha
.8725	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8728	68		pla				pla
.8729					_NotRef:
.8729	0a		asl a				asl 	a
.872a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.872c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.872f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8732	f0 03		beq $8737			beq 	_IntegerCode 				; if clear, then we have two integers
.8734	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.8737					_IntegerCode:
.8737	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.873a	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.873d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8740	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8743	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8746	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8749	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.874c	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.874f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8752	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8755	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8758	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.875b	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.875e	60		rts				rts
.875f					EorInteger:
.875f	fa		plx				plx
.8760	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8763	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8766	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8767	0a		asl a				asl 	a
.8768	10 05		bpl $876f			bpl 	_NotRef
.876a	48		pha				pha
.876b	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.876e	68		pla				pla
.876f					_NotRef:
.876f	0a		asl a				asl 	a
.8770	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8772	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8775	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8778	f0 03		beq $877d			beq 	_IntegerCode 				; if clear, then we have two integers
.877a	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.877d					_IntegerCode:
.877d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8780	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8783	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8786	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8789	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.878c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.878f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8792	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8795	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8798	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.879b	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.879e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87a1	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.87a4	60		rts				rts
.87a5					WordIndirect:
.87a5	fa		plx				plx
.87a6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87a9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87ac	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87ad	0a		asl a				asl 	a
.87ae	10 05		bpl $87b5			bpl 	_NotRef
.87b0	48		pha				pha
.87b1	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87b4	68		pla				pla
.87b5					_NotRef:
.87b5	0a		asl a				asl 	a
.87b6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87b8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87bb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87be	f0 03		beq $87c3			beq 	_IntegerCode 				; if clear, then we have two integers
.87c0	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.87c3					_IntegerCode:
.87c3	20 8e 86	jsr $868e			jsr 	AddCode 					; add the two values
.87c6	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.87c8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87cb	60		rts				rts
.87cc					ByteIndirect:
.87cc	fa		plx				plx
.87cd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87d0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87d3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87d4	0a		asl a				asl 	a
.87d5	10 05		bpl $87dc			bpl 	_NotRef
.87d7	48		pha				pha
.87d8	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87db	68		pla				pla
.87dc					_NotRef:
.87dc	0a		asl a				asl 	a
.87dd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87df	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87e2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87e5	f0 03		beq $87ea			beq 	_IntegerCode 				; if clear, then we have two integers
.87e7	4c 35 99	jmp $9935			jmp 	TypeError 					; anything else, type mismatch.
.87ea					_IntegerCode:
.87ea	20 8e 86	jsr $868e			jsr 	AddCode 					; add the two values
.87ed	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.87ef	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.95ce					ConvertInt16:
.95ce	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.95d1	8e 10 06	stx $0610			stx 	NSMantissa1
.95d4	9c 18 06	stz $0618			stz 	NSMantissa2
.95d7	9c 20 06	stz $0620			stz 	NSMantissa3
.95da	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.95dd	a2 00		ldx #$00			ldx 	#0 							; stack level
.95df	a9 0a		lda #$0a			lda 	#10 						; base
.95e1	80 00		bra $95e3			bra 	ConvertInt32
.95e3					ConvertInt32:
.95e3	5a		phy				phy
.95e4	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.95e6	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.95e9	10 08		bpl $95f3			bpl 	_CI32NotNeg
.95eb	48		pha				pha
.95ec	a9 2d		lda #$2d			lda 	#'-'
.95ee	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.95f1	c8		iny				iny
.95f2	68		pla				pla
.95f3					_CI32NotNeg:
.95f3	20 01 96	jsr $9601			jsr 	_CI32DivideConvert 			; recursive conversion
.95f6	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.95f8	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.95fb	7a		ply				ply
.95fc	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.95fe	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9600	60		rts				rts
.9601					_CI32DivideConvert:
.9601	e8		inx				inx 								; write to next slot up
.9602	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.9605	ca		dex				dex
.9606	20 03 95	jsr $9503			jsr 	Int32Divide 				; divide
.9609	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.960c	48		pha				pha
.960d	20 b2 94	jsr $94b2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9610	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; is it zero ?
.9613	f0 06		beq $961b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9615	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9618	20 01 96	jsr $9601			jsr 	_CI32DivideConvert 			; and recusrively call.
.961b					_CI32NoRecurse:
.961b	68		pla				pla 								; remainder
.961c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.961e	90 02		bcc $9622			bcc 	_CI32NotHex
.9620	69 26		adc #$26			adc 	#6+32
.9622					_CI32NotHex:
.9622	69 30		adc #$30			adc 	#48
.9624	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9627	c8		iny				iny
.9628	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.87f3					PrecedenceLevel:
>87f3	04					.byte	 4	; $00 <<
>87f4	02					.byte	 2	; $01 <=
>87f5	02					.byte	 2	; $02 <>
>87f6	00					.byte	 0	; $03 !!3
>87f7	00					.byte	 0	; $04 ><
>87f8	02					.byte	 2	; $05 >=
>87f9	04					.byte	 4	; $06 >>
>87fa	00					.byte	 0	; $07 !!7
>87fb	00					.byte	 0	; $08 !!8
>87fc	00					.byte	 0	; $09 !!9
>87fd	00					.byte	 0	; $0a !!10
>87fe	00					.byte	 0	; $0b !!11
>87ff	00					.byte	 0	; $0c !!12
>8800	00					.byte	 0	; $0d !!13
>8801	00					.byte	 0	; $0e !!14
>8802	00					.byte	 0	; $0f !!15
>8803	00					.byte	 0	; $10 @
>8804	00					.byte	 0	; $11 !!17
>8805	00					.byte	 0	; $12 !!18
>8806	00					.byte	 0	; $13 [
>8807	04					.byte	 4	; $14 \
>8808	00					.byte	 0	; $15 ]
>8809	01					.byte	 1	; $16 ^
>880a	00					.byte	 0	; $17 _
>880b	00					.byte	 0	; $18 `
>880c	00					.byte	 0	; $19 !!25
>880d	00					.byte	 0	; $1a !!26
>880e	00					.byte	 0	; $1b {
>880f	01					.byte	 1	; $1c |
>8810	00					.byte	 0	; $1d }
>8811	00					.byte	 0	; $1e ~
>8812	00					.byte	 0	; $1f [7m<7F>[m
>8813	00					.byte	 0	; $20
>8814	05					.byte	 5	; $21 !
>8815	00					.byte	 0	; $22 "
>8816	00					.byte	 0	; $23 #
>8817	05					.byte	 5	; $24 $
>8818	04					.byte	 4	; $25 %
>8819	01					.byte	 1	; $26 &
>881a	00					.byte	 0	; $27 '
>881b	00					.byte	 0	; $28 (
>881c	00					.byte	 0	; $29 )
>881d	04					.byte	 4	; $2a *
>881e	03					.byte	 3	; $2b +
>881f	00					.byte	 0	; $2c ,
>8820	03					.byte	 3	; $2d -
>8821	00					.byte	 0	; $2e .
>8822	04					.byte	 4	; $2f /
>8823	00					.byte	 0	; $30 0
>8824	00					.byte	 0	; $31 1
>8825	00					.byte	 0	; $32 2
>8826	00					.byte	 0	; $33 3
>8827	00					.byte	 0	; $34 4
>8828	00					.byte	 0	; $35 5
>8829	00					.byte	 0	; $36 6
>882a	00					.byte	 0	; $37 7
>882b	00					.byte	 0	; $38 8
>882c	00					.byte	 0	; $39 9
>882d	00					.byte	 0	; $3a :
>882e	00					.byte	 0	; $3b ;
>882f	02					.byte	 2	; $3c <
>8830	02					.byte	 2	; $3d =
>8831	02					.byte	 2	; $3e >
>8832	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8833					EvaluateExpressionAt0:
.8833	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8835					EvaluateExpression:
.8835	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8837					EvaluateExpressionAtPrecedence:
.8837	48		pha				pha 								; save precedence level
.8838	20 06 8b	jsr $8b06			jsr 	EvaluateTerm 				; evaluate term into level X.
.883b	68		pla				pla 								; restore precedence level.
.883c					_EXPRLoop:
.883c	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.883e	b1 30		lda ($30),y			lda 	(codePtr),y
.8840	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8842	b0 25		bcs $8869			bcs 	_EXPRExit
.8844	da		phx				phx 								; read the operator precedence
.8845	aa		tax				tax
.8846	bd f3 87	lda $87f3,x			lda 	PrecedenceLevel,x
.8849	fa		plx				plx
.884a	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.884c	f0 1b		beq $8869			beq 	_EXPRExit
.884e	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8850	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8852	c5 37		cmp $37				cmp 	zTemp0+1
.8854	b0 13		bcs $8869			bcs		_EXPRExit 					; if current >= operator exit
.8856	48		pha				pha 								; save current precedence.
.8857	b1 30		lda ($30),y			lda 	(codePtr),y
.8859	c8		iny				iny
.885a	48		pha				pha
.885b	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.885d	e8		inx				inx 								; work out the right hand side.
.885e	20 37 88	jsr $8837			jsr 	EvaluateExpressionAtPrecedence
.8861	ca		dex				dex
.8862	68		pla				pla 								; get operator, call the code.
.8863	20 6c 88	jsr $886c			jsr 	_EXPRCaller
.8866	68		pla				pla 								; restore precedence level
.8867	80 d3		bra $883c			bra 	_EXPRLoop 					; and go round.
.8869					_EXPRExit:
.8869	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.886b	60		rts				rts
.886c					_EXPRCaller:
.886c	da		phx				phx 								; save on stack, first thing is to restore it
.886d	0a		asl a				asl 	a 							; double so can use vectors into X
.886e	aa		tax				tax
.886f	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9629					FloatingPointAdd:
.9629	20 ca 97	jsr $97ca			jsr 	FloatPrepare 				; prepare for floats
.962c	80 0b		bra $9639			bra 	FloatAdd
.962e					FloatingPointSub:
.962e	20 ca 97	jsr $97ca			jsr 	FloatPrepare 				; prepare for floats
.9631					FloatSubtract:
.9631	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9634	49 80		eor #$80			eor 	#$80
.9636	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9639					FloatAdd:
.9639	48		pha				pha
.963a	5a		phy				phy
.963b	20 db 97	jsr $97db			jsr 	NSNormalise 				; normalise S[X]
.963e	f0 54		beq $9694			beq 	_FAReturn1
.9640	e8		inx				inx 								; normalise S[X+1]
.9641	20 db 97	jsr $97db			jsr 	NSNormalise
.9644	ca		dex				dex
.9645	c9 00		cmp #$00			cmp 	#0
.9647	f0 6f		beq $96b8			beq 	_FAExit 					; if so, just return A
.9649	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.964c	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.964f	f0 1b		beq $966c			beq 	_FAExponentsEqual
.9651	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9654	a8		tay				tay
.9655	38		sec				sec 								; do a signed comparison of the exponents.
.9656	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9659	50 02		bvc $965d			bvc 	_FANoSignedChange
.965b	49 80		eor #$80			eor 	#$80
.965d					_FANoSignedChange:
.965d	29 80		and #$80			and 	#$80
.965f	10 03		bpl $9664			bpl 	_FAHaveMax
.9661	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9664					_FAHaveMax:
.9664	20 bb 96	jsr $96bb			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9667	e8		inx				inx
.9668	20 bb 96	jsr $96bb			jsr 	_FAShiftToExponent
.966b	ca		dex				dex
.966c					_FAExponentsEqual:
.966c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.966f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9672	30 10		bmi $9684			bmi 	_FADifferentSigns
.9674	20 21 86	jsr $8621			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9677	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.967a	10 3c		bpl $96b8			bpl 	_FAExit 					; if no, we are done.
.967c	20 fd 8e	jsr $8efd			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.967f	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9682	80 34		bra $96b8			bra 	_FAExit
.9684					_FADifferentSigns:
.9684	20 47 86	jsr $8647			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9687	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.968a	10 2c		bpl $96b8			bpl 	_FAExit 					; if no, we are done.
.968c	20 86 8e	jsr $8e86			jsr 	NSMNegate 					; netate result
.968f	20 8f 8e	jsr $8e8f			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9692	80 24		bra $96b8			bra 	_FAExit
.9694					_FAReturn1:
.9694	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9697	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.969a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.969d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.96a0	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.96a3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.96a6	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.96a9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.96ac	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.96af	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96b2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.96b5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96b8					_FAExit:
.96b8	7a		ply				ply
.96b9	68		pla				pla
.96ba	60		rts				rts
.96bb					_FAShiftToExponent:
.96bb					_FAShiftToExponent2:
.96bb	98		tya				tya 								; compare Y to exponent
.96bc	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.96bf	f0 08		beq $96c9			beq 	_FASEExit 					; exit if so.
.96c1	20 fd 8e	jsr $8efd			jsr 	NSMShiftRight	 			; shift the mantissa right
.96c4	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.96c7	80 f2		bra $96bb			bra 	_FAShiftToExponent2
.96c9					_FASEExit:
.96c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.96ca					CompareFloat:
.96ca	20 31 96	jsr $9631			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.96cd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.96d0	29 f8		and #$f8			and 	#$F8
.96d2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96d5	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.96d8	f0 09		beq $96e3			beq 	_FCExit 					; zero, so approximately identical
.96da	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.96dc	3c 00 06	bit $0600,x			bit 	NSStatus,x
.96df	10 02		bpl $96e3			bpl 	_FCExit
.96e1					_FCNegative:
.96e1	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.96e3					_FCExit:
.96e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.96e4					FDivideCommand:
.96e4	fa		plx				plx	 								; restore stack position
.96e5	20 ca 97	jsr $97ca			jsr 	FloatPrepare 				; prepare for floats
.96e8					FloatDivide:
.96e8	48		pha				pha
.96e9	e8		inx				inx
.96ea	20 db 97	jsr $97db			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.96ed	ca		dex				dex
.96ee	c9 00		cmp #$00			cmp 	#0
.96f0	f0 20		beq $9712			beq 	_FDZero
.96f2	20 db 97	jsr $97db			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.96f5	f0 19		beq $9710			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.96f7	20 25 95	jsr $9525			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.96fa	20 b2 94	jsr $94b2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.96fd	20 db 97	jsr $97db			jsr		NSNormalise 				; renormalise
.9700	20 c0 95	jsr $95c0			jsr 	CalculateSign 				; calculate result sign
.9703	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9706	38		sec				sec
.9707	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.970a	38		sec				sec
.970b	e9 1e		sbc #$1e			sbc 	#30
.970d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9710					_FDExit:
.9710	68		pla				pla
.9711	60		rts				rts
.9712					_FDZero:
.9712	a9 03		lda #$03		lda	#3
.9714	4c 33 84	jmp $8433		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9717					FloatFractionalPart:
.9717	5a		phy				phy
.9718	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.971b	29 7f		and #$7f			and 	#$7F
.971d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9720	20 db 97	jsr $97db			jsr 	NSNormalise
.9723	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9726	38		sec				sec
.9727	e9 e0		sbc #$e0			sbc 	#$E0
.9729	90 31		bcc $975c			bcc 	_FFPExit 					; already fractional
.972b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.972d	b0 2a		bcs $9759			bcs 	_FFPZero
.972f	a8		tay				tay 								; put count to do in Y
.9730	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9733	20 5e 97	jsr $975e			jsr 	_FFPPartial
.9736	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9739	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.973c	20 5e 97	jsr $975e			jsr 	_FFPPartial
.973f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9742	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9745	20 5e 97	jsr $975e			jsr 	_FFPPartial
.9748	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.974b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.974e	20 5e 97	jsr $975e			jsr 	_FFPPartial
.9751	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9754	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; zeroed check.
.9757	d0 03		bne $975c			bne 	_FFPExit
.9759					_FFPZero:
.9759	20 da 8e	jsr $8eda			jsr 	NSMSetZero
.975c					_FFPExit:
.975c	7a		ply				ply
.975d	60		rts				rts
.975e					_FFPPartial:
.975e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9760	f0 17		beq $9779			beq 	_FFFPPExit
.9762	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9764	b0 0c		bcs $9772			bcs 	_FFFPPWholeByte
.9766	5a		phy				phy
.9767					_FFFPPLeft:
.9767	0a		asl a				asl 	a
.9768	88		dey				dey
.9769	d0 fc		bne $9767			bne 	_FFFPPLeft
.976b	7a		ply				ply
.976c					_FFFPPRight:
.976c	4a		lsr a				lsr 	a
.976d	88		dey				dey
.976e	d0 fc		bne $976c			bne 	_FFFPPRight
.9770	80 07		bra $9779			bra 	_FFFPPExit
.9772					_FFFPPWholeByte:
.9772	98		tya				tya 								; subtract 8 from count
.9773	38		sec				sec
.9774	e9 08		sbc #$08			sbc 	#8
.9776	a8		tay				tay
.9777	a9 00		lda #$00			lda 	#0 							; and clear all
.9779					_FFFPPExit:
.9779	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.977a					FloatIntegerPart:
.977a	48		pha				pha
.977b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.977e	f0 1f		beq $979f			beq 	_FIPExit 					; if so do nothing
.9780	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; is it zero ?
.9783	f0 17		beq $979c			beq 	_FIPZero 					; if so return zero.
.9785	20 db 97	jsr $97db			jsr 	NSNormalise 				; normalise
.9788	f0 12		beq $979c			beq 	_FIPZero 					; normalised to zero, exit zero
.978a					_FIPShift:
.978a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.978d	10 08		bpl $9797			bpl 	_FIPCheckZero
.978f	20 fd 8e	jsr $8efd			jsr 	NSMShiftRight 				; shift mantissa right
.9792	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9795	80 f3		bra $978a			bra 	_FIPShift
.9797					_FIPCheckZero:
.9797	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; avoid -0 problem
.979a	d0 03		bne $979f			bne 	_FIPExit 					; set to zero if mantissa zero.
.979c					_FIPZero:
.979c	20 da 8e	jsr $8eda			jsr 	NSMSetZero
.979f					_FIPExit:
.979f	68		pla				pla
.97a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.97a1					FloatingPointMultiply:
.97a1	20 ca 97	jsr $97ca			jsr 	FloatPrepare 				; prepare for floats
.97a4					FloatMultiply:
.97a4	48		pha				pha
.97a5	20 db 97	jsr $97db			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97a8	f0 1b		beq $97c5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97aa	e8		inx				inx
.97ab	20 db 97	jsr $97db			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97ae	ca		dex				dex
.97af	c9 00		cmp #$00			cmp 	#0
.97b1	f0 0f		beq $97c2			beq 	_FDSetZero
.97b3	20 7b 95	jsr $957b			jsr 	MultiplyShort 				; calculate the result.
.97b6	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.97b9	18		clc				clc
.97ba	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.97bd	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97c0	80 03		bra $97c5			bra 	_FDExit
.97c2					_FDSetZero:
.97c2	20 da 8e	jsr $8eda			jsr 	NSMSetZero 					; return 0
.97c5					_FDExit:
.97c5	20 db 97	jsr $97db			jsr 	NSNormalise 				; normalise the result
.97c8	68		pla				pla
.97c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.97ca					FloatPrepare:
.97ca	20 45 89	jsr $8945			jsr 	DereferenceTopTwo 			; dereference the top two values
.97cd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.97d0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.97d3	29 10		and #$10			and 	#NSBIsString
.97d5	d0 01		bne $97d8			bne 	_FDType
.97d7	60		rts				rts
.97d8					_FDType:
.97d8	4c 35 99	jmp $9935			jmp 	TypeError
.97db					NSNormalise:
.97db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.97de	29 80		and #$80			and 	#$80
.97e0	09 08		ora #$08			ora 	#NSTFloat
.97e2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97e5	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; if zero exit
.97e8	d0 09		bne $97f3			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.97ea	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.97ed	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.97f0	a9 00		lda #$00			lda 	#0 							; set Z flag
.97f2	60		rts				rts
.97f3					_NSNormaliseOptimise:
.97f3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.97f6	d0 22		bne $981a			bne 	_NSNormaliseLoop
.97f8	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.97fb	30 1d		bmi $981a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.97fd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9800	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9803	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9806	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9809	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.980c	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.980f	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9812	38		sec				sec
.9813	e9 08		sbc #$08			sbc 	#8
.9815	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9818	80 d9		bra $97f3			bra 	_NSNormaliseOptimise
.981a					_NSNormaliseLoop:
.981a	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.981d	70 08		bvs $9827			bvs 	_NSNExit 					; exit if so with Z flag clear
.981f	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; shift mantissa left
.9822	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9825	80 f3		bra $981a			bra 	_NSNormaliseLoop
.9827					_NSNExit:
.9827	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9829	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8872					AssignNumber:
.8872	5a		phy				phy
.8873	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8876	85 36		sta $36				sta 	zTemp0
.8878	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.887b	85 37		sta $37				sta 	zTemp0+1
.887d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8880	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8882	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8885	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8887	c9 08		cmp #$08			cmp 	#NSTFloat
.8889	f0 2a		beq $88b5			beq 	_ANFloat
.888b	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.888e	f0 05		beq $8895			beq		_ANNotFloat
.8890	e8		inx				inx
.8891	20 7a 97	jsr $977a			jsr 	FloatIntegerPart 			; make it an integer
.8894	ca		dex				dex
.8895					_ANNotFloat:
.8895	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8898	29 03		and #$03			and 	#3
.889a	d0 05		bne $88a1			bne 	_ANByteWord
.889c	20 c1 88	jsr $88c1			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.889f	80 1e		bra $88bf			bra 	_ANExit
.88a1					_ANByteWord:
.88a1	48		pha				pha 								; save count
.88a2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.88a5	92 36		sta ($36)			sta 	(zTemp0)
.88a7	68		pla				pla
.88a8	c9 01		cmp #$01			cmp	 	#1
.88aa	f0 13		beq $88bf			beq 	_ANExit
.88ac	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.88af	a0 01		ldy #$01			ldy 	#1
.88b1	91 36		sta ($36),y			sta 	(zTemp0),y
.88b3	80 0a		bra $88bf			bra 	_ANExit
.88b5					_ANFloat:
.88b5	20 c1 88	jsr $88c1			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.88b8	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.88bb	a0 04		ldy #$04			ldy 	#4
.88bd	91 36		sta ($36),y			sta 	(zTemp0),y
.88bf					_ANExit:
.88bf	7a		ply				ply
.88c0	60		rts				rts
.88c1					_ANCopy4PackSign:
.88c1	a0 03		ldy #$03			ldy 	#3
.88c3	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.88c6	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.88c8	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.88cb	91 36		sta ($36),y			sta 	(zTemp0),y
.88cd	88		dey				dey
.88ce	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.88d1	91 36		sta ($36),y			sta 	(zTemp0),y
.88d3	88		dey				dey
.88d4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.88d7	91 36		sta ($36),y			sta 	(zTemp0),y
.88d9	88		dey				dey
.88da	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.88dd	91 36		sta ($36),y			sta 	(zTemp0),y
.88df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.88e0					AssignString:
.88e0	5a		phy				phy
.88e1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.88e4	85 38		sta $38				sta 	zTemp1
.88e6	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.88e9	85 39		sta $39				sta 	zTemp1+1
.88eb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.88ee	85 36		sta $36				sta 	zTemp0
.88f0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88f3	85 37		sta $37				sta 	zTemp0+1
.88f5	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.88f7	b1 36		lda ($36),y			lda 	(zTemp0),y
.88f9	f0 23		beq $891e			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.88fb	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.88fc	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.88fe	e9 02		sbc #$02			sbc 	#2
.8900	85 3c		sta $3c				sta 	zsTemp
.8902	a0 01		ldy #$01			ldy 	#1
.8904	b1 36		lda ($36),y			lda 	(zTemp0),y
.8906	e9 00		sbc #$00			sbc 	#0
.8908	85 3d		sta $3d				sta 	zsTemp+1
.890a	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.890c					_ASGetLength:
.890c	c8		iny				iny
.890d	b1 38		lda ($38),y			lda 	(zTemp1),y
.890f	d0 fb		bne $890c			bne 	_ASGetLength
.8911	98		tya				tya 								; is this length <= current length
.8912	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8914	90 20		bcc $8936			bcc 	_ASCopyString
.8916	f0 1e		beq $8936			beq 	_ASCopyString
.8918	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.891a	a0 01		ldy #$01			ldy 	#1
.891c	91 3c		sta ($3c),y			sta 	(zsTemp),y
.891e					_ASNewStringRequired:
.891e	e8		inx				inx 								; concrete the new string.
.891f	20 53 9a	jsr $9a53			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8922	ca		dex				dex
.8923	18		clc				clc
.8924	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8927	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8929	92 36		sta ($36)			sta 	(zTemp0)
.892b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.892e	69 00		adc #$00			adc 	#0
.8930	a0 01		ldy #$01			ldy 	#1
.8932	91 36		sta ($36),y			sta 	(zTemp0),y
.8934	80 0d		bra $8943			bra 	_ASExit
.8936					_ASCopyString:
.8936	a0 00		ldy #$00			ldy 	#0
.8938					_ASCopyLoop:
.8938	b1 38		lda ($38),y			lda 	(zTemp1),y
.893a	c8		iny				iny
.893b	c8		iny				iny
.893c	91 3c		sta ($3c),y			sta 	(zsTemp),y
.893e	88		dey				dey
.893f	c9 00		cmp #$00			cmp 	#0
.8941	d0 f5		bne $8938			bne 	_ASCopyLoop
.8943					_ASExit:
.8943	7a		ply				ply
.8944	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8945					DereferenceTopTwo:
.8945	e8		inx				inx
.8946	20 4a 89	jsr $894a			jsr 	Dereference 				; deref x+1
.8949	ca		dex				dex  								; falls through to deref x
.894a					Dereference:
.894a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.894d	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.894f	f0 57		beq $89a8			beq 	_DRFExit 					; not a reference
.8951	5a		phy				phy
.8952	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8955	85 36		sta $36				sta 	zTemp0
.8957	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.895a	85 37		sta $37				sta 	zTemp0+1
.895c	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.895f	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8961	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8964	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8967	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8969	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.896b	f0 0f		beq $897c			beq 	_DRFDereferenceTwo
.896d	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.896f	f0 39		beq $89aa			beq 	_DRFFull
.8971	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8974	29 03		and #$03			and 	#3
.8976	f0 32		beq $89aa			beq 	_DRFFull 					; the whole word
.8978	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.897a	f0 07		beq $8983			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.897c					_DRFDereferenceTwo:
.897c	a0 01		ldy #$01			ldy 	#1
.897e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8980	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8983					_DRFClear23:
.8983	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8986	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8989	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.898c	29 18		and #$18			and 	#NSBTypeMask
.898e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8991	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8993	d0 12		bne $89a7			bne 	_DRFNotString
.8995	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8998	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.899b	d0 0a		bne $89a7			bne 	_DRFNotString
.899d	a9 a9		lda #$a9			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.899f	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.89a2	a9 89		lda #$89			lda 	#_DRFNullString >> 8
.89a4	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.89a7					_DRFNotString
.89a7	7a		ply				ply 								; restore Y and exit
.89a8					_DRFExit:
.89a8	60		rts				rts
.89a9					_DRFNullString:
>89a9	00						.byte 	0
.89aa					_DRFFull:
.89aa	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.89ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ae	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89b1	c8		iny				iny
.89b2	b1 36		lda ($36),y			lda 	(zTemp0),y
.89b4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.89b7	c8		iny				iny
.89b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ba	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89bd	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.89c0	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.89c3	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.89c5	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.89c8	f0 06		beq $89d0			beq 	_DRFNoExponent
.89ca	c8		iny				iny 								; if not, read the exponent as well.
.89cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.89cd	9d 28 06	sta $0628,x			sta 	NSExponent,x
.89d0					_DRFNoExponent:
.89d0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.89d3	10 0d		bpl $89e2			bpl 	_DRFExit2 					; if not, then exit.
.89d5	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.89d7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.89da	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.89dd	09 80		ora #$80			ora 	#NSBIsNegative
.89df	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89e2					_DRFExit2:
.89e2	7a		ply				ply
.89e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.89e4					EncodeNumberStart:
.89e4	38		sec				sec
.89e5	80 01		bra $89e8			bra 	EncodeNumberContinue+1
.89e7					EncodeNumberContinue:
.89e7	18		clc				clc
.89e8					EncodeNumber:
.89e8	08		php				php 								; save reset.
.89e9	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.89eb	f0 12		beq $89ff			beq 	_ENIsOkay
.89ed	c9 30		cmp #$30			cmp 	#"0"
.89ef	90 04		bcc $89f5			bcc 	_ENBadNumber
.89f1	c9 3a		cmp #$3a			cmp 	#"9"+1
.89f3	90 0a		bcc $89ff			bcc 	_ENIsOkay
.89f5					_ENBadNumber:
.89f5	28		plp				plp 								; throw saved reset
.89f6	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.89f9	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.89fb	f0 7e		beq $8a7b			beq 	_ENConstructFinal
.89fd					_ENFail:
.89fd	18		clc				clc 								; not allowed
.89fe	60		rts				rts
.89ff					_ENIsOkay:
.89ff	28		plp				plp 								; are we restarting
.8a00	90 15		bcc $8a17			bcc 	_ENNoRestart
.8a02					_ENStartEncode:
.8a02	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8a04	f0 0c		beq $8a12			beq 	_ENFirstDP
.8a06	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8a08	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.8a0b	a9 01		lda #$01			lda 	#ESTA_Low
.8a0d					_ENExitChange:
.8a0d	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8a10	38		sec				sec
.8a11	60		rts				rts
.8a12					_ENFirstDP:
.8a12	20 da 8e	jsr $8eda			jsr 	NSMSetZero 					; clear integer part
.8a15	80 3f		bra $8a56			bra 	_ESTASwitchFloat			; go straight to float and exi
.8a17					_ENNoRestart:
.8a17	48		pha				pha 								; save on stack.
.8a18	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8a1b	c9 01		cmp #$01			cmp 	#ESTA_Low
.8a1d	f0 09		beq $8a28			beq  	_ESTALowState
.8a1f	c9 02		cmp #$02			cmp 	#ESTA_High
.8a21	f0 29		beq $8a4c			beq 	_ESTAHighState
.8a23	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8a25	f0 3b		beq $8a62			beq 	_ESTADecimalState
>8a27	db						.byte 	$DB 						; causes a break in the emulator
.8a28					_ESTALowState:
.8a28	68		pla				pla 								; get value back
.8a29	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8a2b	f0 29		beq $8a56			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8a2d	29 0f		and #$0f			and 	#15 						; make digit
.8a2f	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8a32	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8a35	0a		asl a				asl 	a
.8a36	0a		asl a				asl 	a
.8a37	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8a3a	0a		asl a				asl 	a
.8a3b	6d 06 07	adc $0706			adc 	DigitTemp
.8a3e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a41	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8a43	90 05		bcc $8a4a			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8a45	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8a47	8d 05 07	sta $0705			sta 	EncodeState
.8a4a					_ESTANoSwitch:
.8a4a	38		sec				sec
.8a4b	60		rts				rts
.8a4c					_ESTAHighState:
.8a4c	68		pla				pla 								; get value back
.8a4d	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8a4f	f0 05		beq $8a56			beq 	_ESTASwitchFloat
.8a51	20 b5 8a	jsr $8ab5			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8a54	38		sec				sec
.8a55	60		rts				rts
.8a56					_ESTASwitchFloat:
.8a56	9c 07 07	stz $0707			stz 	DecimalCount
.8a59	e8		inx				inx 								; zero the decimal additive.
.8a5a	20 da 8e	jsr $8eda			jsr 	NSMSetZero
.8a5d	ca		dex				dex
.8a5e	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8a60	80 ab		bra $8a0d			bra 	_ENExitChange
.8a62					_ESTADecimalState:
.8a62	68		pla				pla 								; digit.
.8a63	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8a65	f0 96		beq $89fd			beq 	_ENFail
.8a67	e8		inx				inx 								; put digit into fractional part of X+1
.8a68	20 b5 8a	jsr $8ab5			jsr 	ESTAShiftDigitIntoMantissa
.8a6b	ca		dex				dex
.8a6c	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8a6f	ad 07 07	lda $0707			lda 	DecimalCount
.8a72	c9 0b		cmp #$0b			cmp 	#11
.8a74	f0 02		beq $8a78			beq 	_ESTADSFail
.8a76	38		sec				sec
.8a77	60		rts				rts
.8a78					_ESTADSFail:
.8a78	4c 30 99	jmp $9930			jmp 	RangeError
.8a7b					_ENConstructFinal:
.8a7b	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8a7e	f0 33		beq $8ab3			beq 	_ENCFExit 					; no decimals
.8a80	5a		phy				phy
.8a81	0a		asl a				asl 	a 							; x 4 and CLC
.8a82	0a		asl a				asl 	a
.8a83	6d 07 07	adc $0707			adc 	DecimalCount
.8a86	a8		tay				tay
.8a87	b9 ef 98	lda $98ef,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8a8a	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a8d	b9 f0 98	lda $98f0,y			lda 	DecimalScalarTable-5+1,y
.8a90	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8a93	b9 f1 98	lda $98f1,y			lda 	DecimalScalarTable-5+2,y
.8a96	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8a99	b9 f2 98	lda $98f2,y			lda 	DecimalScalarTable-5+3,y
.8a9c	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8a9f	b9 f3 98	lda $98f3,y			lda 	DecimalScalarTable-5+4,y
.8aa2	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8aa5	a9 08		lda #$08			lda 	#NSTFloat
.8aa7	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8aaa	7a		ply				ply
.8aab	e8		inx				inx 								; multiply decimal const by decimal scalar
.8aac	20 a4 97	jsr $97a4			jsr 	FloatMultiply
.8aaf	ca		dex				dex
.8ab0	20 39 96	jsr $9639			jsr 	FloatAdd 					; add to integer part.
.8ab3					_ENCFExit:
.8ab3	18		clc				clc 								; reject the digit.
.8ab4	60		rts				rts
.8ab5					ESTAShiftDigitIntoMantissa:
.8ab5	29 0f		and #$0f			and 	#15 						; save digit
.8ab7	48		pha				pha
.8ab8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8abb	48		pha				pha
.8abc	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8abf	48		pha				pha
.8ac0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ac3	48		pha				pha
.8ac4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ac7	48		pha				pha
.8ac8	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; x 2
.8acb	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; x 4
.8ace	18		clc				clc 								; pop mantissa and add
.8acf	68		pla				pla
.8ad0	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8ad3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ad6	68		pla				pla
.8ad7	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8ada	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8add	68		pla				pla
.8ade	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8ae1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ae4	68		pla				pla
.8ae5	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8ae8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8aeb	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; x 10
.8aee	68		pla				pla 								; add digit
.8aef	18		clc				clc
.8af0	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8af3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8af6	90 0d		bcc $8b05			bcc 	_ESTASDExit
.8af8	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8afb	d0 08		bne $8b05			bne 	_ESTASDExit
.8afd	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8b00	d0 03		bne $8b05			bne 	_ESTASDExit
.8b02	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8b05					_ESTASDExit:
.8b05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8b06					EvaluateTerm:
.8b06	b1 30		lda ($30),y			lda 	(codePtr),y
.8b08	30 18		bmi $8b22			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8b0a	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8b0c	b0 6f		bcs $8b7d			bcs 	_ETVariable
.8b0e	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8b10	90 6e		bcc $8b80			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8b12	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b14	b0 6a		bcs $8b80			bcs 	_ETPuncUnary
.8b16	20 e4 89	jsr $89e4			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8b19					_ETNumber:
.8b19	c8		iny				iny 								; keep encoding until we have the numbers
.8b1a	b1 30		lda ($30),y			lda 	(codePtr),y
.8b1c	20 e7 89	jsr $89e7			jsr 	EncodeNumberContinue
.8b1f	b0 f8		bcs $8b19			bcs 	_ETNumber 					; go back if accepted.
.8b21	60		rts				rts
.8b22					_ETCheckUnary:
.8b22	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8b24	f0 41		beq $8b67			beq 	_ETString
.8b26	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8b28	f0 12		beq $8b3c			beq 	_ETHexConstant
.8b2a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8b2c	90 0b		bcc $8b39			bcc 	_ETSyntaxError
.8b2e	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8b30	b0 07		bcs $8b39			bcs 	_ETSyntaxError
.8b32	da		phx				phx 								; push X on the stack
.8b33	0a		asl a				asl 	a 							; put vector x 2 into X
.8b34	aa		tax				tax
.8b35	c8		iny				iny 								; consume unary function token
.8b36	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8b39					_ETSyntaxError:
.8b39	4c 2b 99	jmp $992b			jmp 	SyntaxError
.8b3c					_ETHexConstant:
.8b3c	c8		iny				iny 								; skip #
.8b3d	c8		iny				iny 								; skip count
.8b3e	20 da 8e	jsr $8eda			jsr 	NSMSetZero 					; clear result
.8b41					_ETHLoop:
.8b41	b1 30		lda ($30),y			lda 	(codePtr),y
.8b43	c8		iny				iny 								; and consume
.8b44	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8b46	f0 1e		beq $8b66			beq 	_ETHExit
.8b48	48		pha				pha 								; save on stack.
.8b49	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; x 2
.8b4c	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; x 4
.8b4f	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; x 8
.8b52	20 ef 8e	jsr $8eef			jsr 	NSMShiftLeft 				; x 16
.8b55	68		pla				pla 								; ASCII
.8b56	c9 41		cmp #$41			cmp 	#'A'
.8b58	90 02		bcc $8b5c			bcc 	_ETHNotChar
.8b5a	e9 07		sbc #$07			sbc 	#7
.8b5c					_ETHNotChar:
.8b5c	29 0f		and #$0f			and 	#15 						; digit now
.8b5e	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8b61	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b64	80 db		bra $8b41			bra 	_ETHLoop 					; go round.
.8b66					_ETHExit:
.8b66	60		rts				rts
.8b67					_ETString:
.8b67	c8		iny				iny 								; look at length
.8b68	b1 30		lda ($30),y			lda 	(codePtr),y
.8b6a	48		pha				pha
.8b6b	c8		iny				iny 								; first character
.8b6c	20 2b 94	jsr $942b			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8b6f	68		pla				pla 								; restore count and save
.8b70	85 36		sta $36				sta 	zTemp0
.8b72	98		tya				tya 								; add length to Y to skip it.
.8b73	18		clc				clc
.8b74	65 36		adc $36				adc 	zTemp0
.8b76	a8		tay				tay
.8b77	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8b79	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b7c	60		rts				rts
.8b7d					_ETVariable:
.8b7d	4c d7 8b	jmp $8bd7			jmp 	VariableHandler
.8b80					_ETPuncUnary:
.8b80	c8		iny				iny 								; consume the unary character
.8b81	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8b83	f0 2d		beq $8bb2			beq 	_ETUnaryNegate
.8b85	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8b87	f0 39		beq $8bc2			beq 	_ETDereference
.8b89	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8b8b	f0 43		beq $8bd0			beq 	_ETParenthesis
.8b8d	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8b8f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8b91	f0 06		beq $8b99			beq 	_ETIndirection
.8b93	e6 36		inc $36				inc 	zTemp0
.8b95	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8b97	d0 a0		bne $8b39			bne 	_ETSyntaxError
.8b99					_ETIndirection:
.8b99	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8b9b	1a		inc a				inc 	a
.8b9c	48		pha				pha
.8b9d	20 06 8b	jsr $8b06			jsr 	EvaluateTerm				; evaluate the term
.8ba0	20 4a 89	jsr $894a			jsr 	Dereference 				; dereference it.
.8ba3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8ba6	d0 07		bne $8baf			bne 	_ETTypeMismatch
.8ba8	68		pla				pla 								; indirection 1-2
.8ba9	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8bab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bae	60		rts				rts
.8baf					_ETTypeMismatch:
.8baf	4c 35 99	jmp $9935			jmp 	TypeError
.8bb2					_ETUnaryNegate:
.8bb2	20 06 8b	jsr $8b06			jsr 	EvaluateTerm				; evaluate the term
.8bb5	20 4a 89	jsr $894a			jsr 	Dereference 				; dereference it.
.8bb8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8bbb	29 10		and #$10			and 	#NSTString
.8bbd	d0 f0		bne $8baf			bne 	_ETTypeMismatch
.8bbf	4c 86 8e	jmp $8e86			jmp 	NSMNegate  					; just toggles the sign bit.
.8bc2					_ETDereference:
.8bc2	20 06 8b	jsr $8b06			jsr 	EvaluateTerm				; evaluate the term
.8bc5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8bc8	29 20		and #$20			and 	#NSBIsReference
.8bca	f0 e3		beq $8baf			beq 	_ETTypeMismatch
.8bcc	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8bcf	60		rts				rts
.8bd0					_ETParenthesis:
.8bd0	20 35 88	jsr $8835			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8bd3	20 72 94	jsr $9472			jsr 	CheckRightBracket 			; check for )
.8bd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8bd7					VariableHandler:
.8bd7	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd9	18		clc				clc
.8bda	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8bdc	85 37		sta $37				sta 	zTemp0+1
.8bde	c8		iny				iny
.8bdf	b1 30		lda ($30),y			lda 	(codePtr),y
.8be1	85 36		sta $36				sta 	zTemp0
.8be3	c8		iny				iny
.8be4	18		clc				clc									; copy variable address+3 to mantissa
.8be5	69 03		adc #$03			adc 	#3
.8be7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bea	a5 37		lda $37				lda 	zTemp0+1
.8bec	69 00		adc #$00			adc 	#0
.8bee	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bf1	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8bf4	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8bf7	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8bfa	5a		phy				phy
.8bfb	a0 02		ldy #$02			ldy 	#2 							; read type
.8bfd	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bff	7a		ply				ply
.8c00	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8c02	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8c04	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c07	29 04		and #$04			and 	#NSBIsArray
.8c09	d0 01		bne $8c0c			bne 	_VHArray
.8c0b	60		rts				rts
.8c0c					_VHArray:
>8c0c	db						.byte 	$DB 						; causes a break in the emulator
.8c0d	80 fd		bra $8c0c			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.982a					AbsUnary:
.982a	fa		plx				plx 								; restore stack pos
.982b	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber 				; get a float or int
.982e	20 72 94	jsr $9472			jsr 	CheckRightBracket
.9831	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9834	29 7f		and #$7f			and 	#$7F
.9836	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9839	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8c0f					AllocUnary:
.8c0f	fa		plx				plx 								; restore stack pos
.8c10	20 66 8e	jsr $8e66			jsr 	Evaluate16BitInteger		; get bytes required.
.8c13	20 72 94	jsr $9472			jsr 	CheckRightBracket
.8c16	da		phx				phx 								; save X/Y
.8c17	5a		phy				phy
.8c18	8a		txa				txa 								; copy X into Y
.8c19	a8		tay				tay
.8c1a	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8c1d	aa		tax				tax
.8c1e	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8c21	20 2e 8c	jsr $8c2e			jsr 	AllocateXABytes 			; allocate memory
.8c24	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8c27	8a		txa				txa
.8c28	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8c2b	7a		ply				ply
.8c2c	fa		plx				plx
.8c2d	60		rts				rts
.8c2e					AllocateXABytes:
.8c2e	5a		phy				phy
.8c2f	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8c32	5a		phy				phy
.8c33	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8c36	5a		phy				phy
.8c37	18		clc				clc
.8c38	6d 0c 07	adc $070c			adc 	lowMemPtr
.8c3b	8d 0c 07	sta $070c			sta 	lowMemPtr
.8c3e	8a		txa				txa
.8c3f	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8c42	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8c45	fa		plx				plx
.8c46	68		pla				pla
.8c47	7a		ply				ply
.8c48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.983a					AscUnary:
.983a	fa		plx				plx 								; restore stack pos
.983b	20 39 8e	jsr $8e39			jsr 	EvaluateString 				; get a string
.983e	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9840	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.9843	20 72 94	jsr $9472			jsr 	CheckRightBracket
.9846	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9847					FracUnary:
.9847	fa		plx				plx 								; restore stack pos
.9848	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber 				; get a float or int
.984b	20 72 94	jsr $9472			jsr 	CheckRightBracket
.984e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9851	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9853	f0 04		beq $9859			beq 	_IUZero
.9855	20 17 97	jsr $9717			jsr 	FloatFractionalPart
.9858	60		rts				rts
.9859					_IUZero:
.9859	20 da 8e	jsr $8eda			jsr 	NSMSetZero
.985c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.985d					IntUnary:
.985d	fa		plx				plx 								; restore stack pos
.985e	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber 				; get a float or int
.9861	20 72 94	jsr $9472			jsr 	CheckRightBracket
.9864	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9867	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9869	f0 03		beq $986e			beq 	_IUExit
.986b	20 7a 97	jsr $977a			jsr 	FloatIntegerPart
.986e					_IUExit:
.986e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.986f					LenUnary:
.986f	fa		plx				plx 								; restore stack pos
.9870	20 39 8e	jsr $8e39			jsr 	EvaluateString 				; get a string
.9873	5a		phy				phy
.9874	a0 00		ldy #$00			ldy 	#0 							; find length
.9876					_LenFind:
.9876	b1 36		lda ($36),y			lda 	(zTemp0),y
.9878	f0 06		beq $9880			beq 	_LenExit
.987a	c8		iny				iny
.987b	d0 f9		bne $9876			bne 	_LenFind
.987d	4c 30 99	jmp $9930			jmp 	RangeError 					; string > 255
.9880					_LenExit:
.9880	98		tya				tya
.9881	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.9884	7a		ply				ply
.9885	20 72 94	jsr $9472			jsr 	CheckRightBracket
.9888	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8c49					Unary_Not:
.8c49	fa		plx				plx
.8c4a	20 51 8e	jsr $8e51			jsr 	EvaluateInteger 			; get integer
.8c4d	20 72 94	jsr $9472			jsr 	CheckRightBracket
.8c50	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; zero mantissa ?
.8c53	f0 04		beq $8c59			beq 	_NotZero
.8c55	20 da 8e	jsr $8eda			jsr 	NSMSetZero
.8c58	60		rts				rts
.8c59					_NotZero:
.8c59	4c 99 84	jmp $8499			jmp 	ReturnTrue
.8c5c					_UNBad:
.8c5c	4c 3a 99	jmp $993a			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8c5f					Unary_Rnd:
.8c5f	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber 				; number to use.
.8c62	20 72 94	jsr $9472			jsr 	CheckRightBracket 			; closing bracket
.8c65	20 8e 8c	jsr $8c8e			jsr 	Random32Bit 				; generate a number.
.8c68	ad 08 07	lda $0708			lda 	RandomSeed+0
.8c6b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c6e	ad 09 07	lda $0709			lda 	RandomSeed+1
.8c71	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c74	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8c77	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c7a	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8c7d	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8c7f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c82	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8c84	8d 28 06	sta $0628			sta 	NSExponent
.8c87	a9 08		lda #$08			lda 	#NSTFloat
.8c89	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8c8c	db						.byte 	$DB 						; causes a break in the emulator
.8c8d	60		rts				rts
.8c8e					Random32Bit:
.8c8e	5a		phy				phy
.8c8f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8c91	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8c94	d0 03		bne $8c99			bne 	_Random1
.8c96	a8		tay				tay 								; if so do it 256 times
.8c97	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8c99					_Random1:
.8c99	0a		asl a				asl 	a 							; LSFR RNG
.8c9a	2e 09 07	rol $0709			rol 	RandomSeed+1
.8c9d	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8ca0	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8ca3	90 02		bcc $8ca7			bcc 	_Random2
.8ca5	49 c5		eor #$c5			eor 	#$C5
.8ca7					_Random2:
.8ca7	88		dey				dey
.8ca8	d0 ef		bne $8c99			bne 	_Random1
.8caa	7a		ply				ply
.8cab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9889					SgnUnary:
.9889	fa		plx				plx 								; restore stack pos
.988a	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber 				; get a float or int
.988d	20 72 94	jsr $9472			jsr 	CheckRightBracket
.9890	20 0a 8f	jsr $8f0a			jsr 	NSMIsZero 					; if zero
.9893	f0 10		beq $98a5			beq 	_SGZero  					; return Int Zero
.9895	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9898	48		pha				pha
.9899	a9 01		lda #$01			lda 	#1 							; set to 1
.989b	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.989e	68		pla				pla
.989f	29 80		and #$80			and		#$80 						; copy the sign byte out
.98a1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98a4	60		rts				rts
.98a5	20 da 8e	jsr $8eda	_SGZero:jsr 	NSMSetZero
.98a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.98a9					ValUnary:
.98a9	fa		plx				plx 								; restore stack pos
.98aa	20 bf 98	jsr $98bf			jsr 	ValMainCode 				; do the main val() code
.98ad	b0 01		bcs $98b0			bcs 	_VUError 					; couldn't convert
.98af	60		rts				rts
.98b0					_VUError:
.98b0	4c 35 99	jmp $9935			jmp 	TypeError
.98b3					IsValUnary:
.98b3	fa		plx				plx 								; restore stack pos
.98b4	20 bf 98	jsr $98bf			jsr 	ValMainCode 				; do the main val() code
.98b7	b0 03		bcs $98bc			bcs 	_VUBad
.98b9	4c 99 84	jmp $8499			jmp 	ReturnTrue
.98bc					_VUBad:
.98bc	4c a5 84	jmp $84a5			jmp 	ReturnFalse
.98bf					ValMainCode:
.98bf	20 39 8e	jsr $8e39			jsr 	EvaluateString 				; get a string
.98c2	20 72 94	jsr $9472			jsr 	CheckRightBracket 			; check right bracket present
.98c5	5a		phy				phy
.98c6	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.98c8	f0 17		beq $98e1			beq 	_VMCFail2
.98ca	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.98cc	48		pha				pha 								; save first character
.98cd	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.98cf	d0 01		bne $98d2			bne 	_VMCStart
.98d1	c8		iny				iny 								; skip over -
.98d2					_VMCStart:
.98d2	38		sec				sec 								; initialise first time round.
.98d3					_VMCNext:
.98d3	c8		iny				iny 								; pre-increment
.98d4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.98d6	f0 0c		beq $98e4			beq 	_VMCSuccess 				; successful.
.98d8	20 e8 89	jsr $89e8			jsr 	EncodeNumber 				; send it to the number-builder
.98db	90 03		bcc $98e0			bcc 	_VMCFail 					; if failed, give up.
.98dd	18		clc				clc 								; next time round, countinue
.98de	80 f3		bra $98d3			bra 	_VMCNext
.98e0					_VMCFail:
.98e0	68		pla				pla
.98e1					_VMCFail2:
.98e1	7a		ply				ply
.98e2	38		sec				sec
.98e3	60		rts				rts
.98e4					_VMCSuccess:
.98e4	a9 00		lda #$00			lda 	#0 							; construct final
.98e6	20 e8 89	jsr $89e8			jsr 	EncodeNumber
.98e9	68		pla				pla
.98ea	c9 2d		cmp #$2d			cmp 	#"-"
.98ec	d0 03		bne $98f1			bne 	_VMCNotNegative
.98ee	20 86 8e	jsr $8e86			jsr		NSMNegate
.98f1					_VMCNotNegative:
.98f1	7a		ply				ply
.98f2	18		clc				clc
.98f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8cac					ChrUnary:
.8cac	fa		plx				plx 								; restore stack pos
.8cad	20 72 8e	jsr $8e72			jsr 	Evaluate8BitInteger			; get value
.8cb0	48		pha				pha
.8cb1	20 72 94	jsr $9472			jsr 	CheckRightBracket
.8cb4	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8cb6	20 ce 9a	jsr $9ace			jsr 	StringTempAllocate
.8cb9	68		pla				pla 								; write number to it
.8cba	20 0c 9b	jsr $9b0c			jsr 	StringTempWrite
.8cbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8cbe					SpcUnary:
.8cbe	fa		plx				plx 								; restore stack pos
.8cbf	20 72 8e	jsr $8e72			jsr 	Evaluate8BitInteger			; get value
.8cc2	5a		phy				phy
.8cc3	48		pha				pha 								; save count
.8cc4	20 ce 9a	jsr $9ace			jsr 	StringTempAllocate
.8cc7	7a		ply				ply 								; to do count in Y
.8cc8					_SpcLoop:
.8cc8	c0 00		cpy #$00			cpy 	#0
.8cca	f0 08		beq $8cd4			beq 	_SpcExit
.8ccc	a9 20		lda #$20			lda 	#32
.8cce	20 0c 9b	jsr $9b0c			jsr 	StringTempWrite
.8cd1	88		dey				dey
.8cd2	80 f4		bra $8cc8			bra 	_SPCLoop
.8cd4					_SpcExit:
.8cd4	7a		ply				ply
.8cd5	20 72 94	jsr $9472			jsr 	CheckRightBracket
.8cd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8cd9					Unary_Str:
.8cd9	fa		plx				plx
.8cda	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber  			; get number
.8cdd	20 72 94	jsr $9472			jsr 	CheckRightBracket 			; closing bracket
.8ce0	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8ce2	20 fb 8c	jsr $8cfb			jsr 	ConvertNumberToString 		; do the conversion.
.8ce5	a9 21		lda #$21			lda		#33 						; create buffer
.8ce7	20 ce 9a	jsr $9ace			jsr 	StringTempAllocate 			; allocate memory
.8cea	da		phx				phx
.8ceb	a2 00		ldx #$00			ldx 	#0
.8ced					_USCopy:
.8ced	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8cf0	20 0c 9b	jsr $9b0c			jsr 	StringTempWrite
.8cf3	e8		inx				inx
.8cf4	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8cf7	d0 f4		bne $8ced			bne 	_USCopy
.8cf9	fa		plx				plx
.8cfa	60		rts				rts
.8cfb					ConvertNumberToString:
.8cfb	5a		phy				phy 								; save code position
.8cfc	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8cff	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8d02	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8d05	10 0a		bpl $8d11			bpl 	_CNTSNotNegative
.8d07	29 7f		and #$7f			and 	#$7F 						; make +ve
.8d09	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d0c	a9 2d		lda #$2d			lda 	#"-"
.8d0e	20 77 8d	jsr $8d77			jsr 	WriteDecimalBuffer
.8d11					_CNTSNotNegative:
.8d11	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8d14	f0 15		beq $8d2b			beq 	_CNTSNotFloat
.8d16	e8		inx				inx 								; round up
.8d17	a9 01		lda #$01			lda 	#1
.8d19	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.8d1c	ca		dex				dex
.8d1d	bd 28 06	lda $0628,x			lda		NSExponent,x
.8d20	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8d23	a9 08		lda #$08			lda 	#NSTFloat
.8d25	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8d28	20 39 96	jsr $9639			jsr 	FloatAdd
.8d2b					_CNTSNotFloat:
.8d2b	20 59 8d	jsr $8d59			jsr 	MakePlusTwoString
.8d2e	20 17 97	jsr $9717			jsr 	FloatFractionalPart 		; get the fractional part
.8d31	20 db 97	jsr $97db			jsr 	NSNormalise					; normalise , exit if zero
.8d34	f0 21		beq $8d57			beq 	_CNTSExit
.8d36	a9 2e		lda #$2e			lda 	#"."
.8d38	20 77 8d	jsr $8d77			jsr 	WriteDecimalBuffer 			; write decimal place
.8d3b					_CNTSDecimal:
.8d3b	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8d3e	30 17		bmi $8d57			bmi 	_CNTSExit
.8d40	e8		inx				inx 								; x 10.0
.8d41	a9 0a		lda #$0a			lda 	#10
.8d43	20 dc 8e	jsr $8edc			jsr 	NSMSetByte
.8d46	a9 08		lda #$08			lda 	#NSTFloat
.8d48	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d4b	ca		dex				dex
.8d4c	20 a4 97	jsr $97a4			jsr 	FloatMultiply
.8d4f	20 59 8d	jsr $8d59			jsr 	MakePlusTwoString
.8d52	20 17 97	jsr $9717			jsr 	FloatFractionalPart 		; get the fractional part
.8d55	80 e4		bra $8d3b			bra 	_CNTSDecimal 				; keep going.
.8d57					_CNTSExit:
.8d57	7a		ply				ply
.8d58	60		rts				rts
.8d59					MakePlusTwoString:
.8d59	da		phx				phx
.8d5a	20 b1 8e	jsr $8eb1			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8d5d	e8		inx				inx 								; access it
.8d5e	e8		inx				inx
.8d5f	20 7a 97	jsr $977a			jsr 	FloatIntegerPart 			; make it an integer
.8d62	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8d64	20 e3 95	jsr $95e3			jsr 	ConvertInt32
.8d67	a2 00		ldx #$00			ldx	 	#0
.8d69					_MPTSCopy:
.8d69	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8d6c	20 77 8d	jsr $8d77			jsr 	WriteDecimalBuffer
.8d6f	e8		inx				inx
.8d70	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8d73	d0 f4		bne $8d69			bne 	_MPTSCopy
.8d75	fa		plx				plx
.8d76	60		rts				rts
.8d77					WriteDecimalBuffer:
.8d77	da		phx				phx
.8d78	ae 14 07	ldx $0714			ldx 	dbOffset
.8d7b	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8d7e	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8d81	ee 14 07	inc $0714			inc 	dbOffset
.8d84	fa		plx				plx
.8d85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8d86					Unary_Left:
.8d86	fa		plx				plx
.8d87	18		clc				clc 								; only one parameter
.8d88	20 fd 8d	jsr $8dfd			jsr 	SubstringInitial 			; set up.
.8d8b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8d8e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8d91	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8d94	80 2c		bra $8dc2			bra 	SubstringMain
.8d96					Unary_Right:
.8d96	fa		plx				plx
.8d97	18		clc				clc 								; only one parameter
.8d98	20 fd 8d	jsr $8dfd			jsr 	SubstringInitial 			; set up.
.8d9b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8d9e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8da1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8da4	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8da7	b0 02		bcs $8dab			bcs 	_URNotUnderflow
.8da9	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8dab					_URNotUnderFlow:
.8dab	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8dae	80 12		bra $8dc2			bra 	SubStringMain
.8db0					Unary_Mid:
.8db0	fa		plx				plx
.8db1	38		sec				sec 								; two parameters
.8db2	20 fd 8d	jsr $8dfd			jsr 	SubstringInitial 			; set up.
.8db5	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8db8	f0 05		beq $8dbf			beq 	_UMError
.8dba	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8dbd	80 03		bra $8dc2			bra 	SubStringMain
.8dbf					_UMError:
.8dbf	4c 3a 99	jmp $993a			jmp 	ArgumentError
.8dc2					SubStringMain:
.8dc2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8dc5	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8dc8	b0 2d		bcs $8df7			bcs 	_SSMNull 					; if so, return an empty string.
.8dca	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8dcd	f0 28		beq $8df7			beq 	_SSMNull 					; return empty string.
.8dcf	18		clc				clc 								; add the offset +1 to the address and
.8dd0	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8dd3	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8dd6	85 36		sta $36				sta 	zTemp0
.8dd8	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8ddb	69 00		adc #$00			adc 	#0
.8ddd	85 37		sta $37				sta 	zTemp0+1
.8ddf					_SSMNoCarry:
.8ddf	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8de2	20 ce 9a	jsr $9ace			jsr 	StringTempAllocate 			; allocate that many characters
.8de5	5a		phy				phy 								; save Y
.8de6	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8de8					_SSMCopy:
.8de8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8dea	f0 09		beq $8df5			beq 	_SSMEString 				; no more to copy
.8dec	20 0c 9b	jsr $9b0c			jsr 	StringTempWrite 			; and write it out.
.8def	c8		iny				iny
.8df0	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8df3	d0 f3		bne $8de8			bne 	_SSMCopy
.8df5					_SSMEString:
.8df5	7a		ply				ply
.8df6					_SSMExit:
.8df6	60		rts				rts
.8df7					_SSMNull:
.8df7	a9 00		lda #$00			lda 	#0
.8df9	20 ce 9a	jsr $9ace			jsr 	StringTempAllocate
.8dfc	60		rts				rts
.8dfd					SubstringInitial:
.8dfd	da		phx				phx 								; save initial stack position
.8dfe	08		php				php 								; save carry on stack indicating 2 parameters
.8dff	20 39 8e	jsr $8e39			jsr 	EvaluateString 				; get a string
.8e02	5a		phy				phy 								; calculate length to exponent.
.8e03	a0 ff		ldy #$ff			ldy 	#$FF
.8e05					_SIFindLength:
.8e05	c8		iny				iny
.8e06	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e08	d0 fb		bne $8e05			bne 	_SIFindLength
.8e0a	98		tya				tya
.8e0b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8e0e	7a		ply				ply
.8e0f	e8		inx				inx
.8e10	20 7a 94	jsr $947a			jsr 	CheckComma 					; comma next
.8e13	20 72 8e	jsr $8e72			jsr 	Evaluate8BitInteger 		; get next parameter
.8e16	28		plp				plp 								; is it the last parameter ?
.8e17	90 07		bcc $8e20			bcc 	_SSIExit 					; if so, exit.
.8e19	e8		inx				inx
.8e1a	20 7a 94	jsr $947a			jsr 	CheckComma 					; comma next
.8e1d	20 72 8e	jsr $8e72			jsr 	Evaluate8BitInteger 		; get last parameter
.8e20					_SSIExit:
.8e20	fa		plx				plx
.8e21	20 72 94	jsr $9472			jsr 	CheckRightBracket 			; check closing bracket
.8e24	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8e25					EvaluateValue:
.8e25	48		pha				pha
.8e26	20 35 88	jsr $8835			jsr		EvaluateExpression 			; expression
.8e29	20 4a 89	jsr $894a			jsr 	Dereference					; derefernce it
.8e2c	68		pla				pla
.8e2d	60		rts				rts
.8e2e					EvaluateNumber:
.8e2e	20 25 8e	jsr $8e25			jsr 	EvaluateValue 				; get a value
.8e31	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e34	29 10		and #$10			and 	#NSBIsString
.8e36	d0 16		bne $8e4e			bne 	HelperTypeError
.8e38	60		rts				rts
.8e39					EvaluateString:
.8e39	20 25 8e	jsr $8e25			jsr 	EvaluateValue 				; get a value
.8e3c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8e3f	29 10		and #$10			and 	#NSBIsString
.8e41	f0 0b		beq $8e4e			beq 	HelperTypeError
.8e43					CopyAddressToTemp0:
.8e43	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8e46	85 36		sta $36				sta 	zTemp0
.8e48	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e4b	85 37		sta $37				sta 	zTemp0+1
.8e4d	60		rts				rts
.8e4e					HelperTypeError:
.8e4e	4c 35 99	jmp $9935			jmp 	TypeError
.8e51					EvaluateInteger:
.8e51	20 2e 8e	jsr $8e2e			jsr 	EvaluateNumber
.8e54	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8e57	d0 0a		bne $8e63			bne 	HelperValueError 			; if not, it's a float.
.8e59	60		rts				rts
.8e5a					EvaluateUnsignedInteger:
.8e5a	20 51 8e	jsr $8e51			jsr 	EvaluateInteger 			; check integer is +ve
.8e5d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e60	30 01		bmi $8e63			bmi 	HelperValueError
.8e62	60		rts				rts
.8e63					HelperValueError:
.8e63	4c 3a 99	jmp $993a			jmp 	ArgumentError
.8e66					Evaluate16BitInteger:
.8e66	20 5a 8e	jsr $8e5a			jsr	 	EvaluateUnsignedInteger		; get integer
.8e69	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8e6c	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8e6f	d0 f2		bne $8e63			bne 	HelperValueError
.8e71	60		rts				rts
.8e72					Evaluate8BitInteger:
.8e72	20 5a 8e	jsr $8e5a			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8e75	d0 ec		bne $8e63			bne 	HelperValueError
.8e77	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8e7a	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8e7d	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8e80	d0 e1		bne $8e63			bne 	HelperValueError
.8e82	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8e86					NSMNegate:
.8e86	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e89	49 80		eor #$80			eor 	#NSBIsNegative
.8e8b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e8e	60		rts				rts
.8e8f					NSMNegateMantissa:
.8e8f	38		sec				sec
.8e90	a9 00		lda #$00			lda 	#0
.8e92	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8e95	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e98	a9 00		lda #$00			lda 	#0
.8e9a	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8e9d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ea0	a9 00		lda #$00			lda 	#0
.8ea2	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8ea5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ea8	a9 00		lda #$00			lda 	#0
.8eaa	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8ead	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eb0	60		rts				rts
.8eb1					NSMShiftUpTwo:
.8eb1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8eb4	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8eb7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8eba	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8ebd	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8ec0	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8ec3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8ec6	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8ec9	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8ecc	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8ecf	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ed2	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8ed5	60		rts				rts
.8ed6					NSMSetZeroMantissaOnly:
.8ed6	a9 00		lda #$00			lda 	#0
.8ed8	80 08		bra $8ee2			bra 	NSMSetMantissa
.8eda					NSMSetZero:
.8eda	a9 00		lda #$00			lda 	#0
.8edc					NSMSetByte:
.8edc	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8edf	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8ee2					NSMSetMantissa:
.8ee2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8ee5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8ee8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8eeb	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8eee	60		rts				rts
.8eef					NSMShiftLeft:
.8eef	18		clc				clc
.8ef0					NSMRotateLeft:
.8ef0	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8ef3	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8ef6	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8ef9	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8efc	60		rts				rts
.8efd					NSMShiftRight:
.8efd	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8f00	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8f03	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8f06	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8f09	60		rts				rts
.8f0a					NSMIsZero:
.8f0a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8f0d	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8f10	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8f13	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8f16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.98f4					DecimalScalarTable:
>98f4	66 66 66 66				.dword $66666666 ; 0.1
>98f8	de					.byte $de
>98f9	1f 85 eb 51				.dword $51eb851f ; 0.01
>98fd	db					.byte $db
>98fe	4c 37 89 41				.dword $4189374c ; 0.001
>9902	d8					.byte $d8
>9903	ac 8b db 68				.dword $68db8bac ; 0.0001
>9907	d4					.byte $d4
>9908	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>990c	d1					.byte $d1
>990d	83 de 1b 43				.dword $431bde83 ; 1e-06
>9911	ce					.byte $ce
>9912	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9916	ca					.byte $ca
>9917	89 3b e6 55				.dword $55e63b89 ; 1e-08
>991b	c7					.byte $c7
>991c	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9920	c4					.byte $c4
>9921	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9925	c0					.byte $c0
>9926	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>992a	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.992b					SyntaxError:
.992b	a9 02		lda #$02		lda	#2
.992d	4c 33 84	jmp $8433		jmp	ErrorHandler
.9930					RangeError:
.9930	a9 04		lda #$04		lda	#4
.9932	4c 33 84	jmp $8433		jmp	ErrorHandler
.9935					TypeError:
.9935	a9 05		lda #$05		lda	#5
.9937	4c 33 84	jmp $8433		jmp	ErrorHandler
.993a					ArgumentError:
.993a	a9 07		lda #$07		lda	#7
.993c	4c 33 84	jmp $8433		jmp	ErrorHandler
.993f					NotDoneError:
.993f	a9 0c		lda #$0c		lda	#12
.9941	4c 33 84	jmp $8433		jmp	ErrorHandler
.9944					ErrorText:
>9944	42 72 65 61 6b 00			.text	"Break",0
>994a	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9952	72 72 6f 72 00
>9957	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>995f	20 62 79 20 7a 65 72 6f 00
>9968	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9970	61 6e 67 65 00
>9975	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>997d	6d 61 74 63 68 00
>9983	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>998b	65 6d 6f 72 79 00
>9991	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9999	61 72 67 75 6d 65 6e 74 00
>99a2	53 74 6f 70 00				.text	"Stop",0
>99a7	53 74 72 69 6e 67 20 74			.text	"String too long",0
>99af	6f 6f 20 6c 6f 6e 67 00
>99b7	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>99bf	6e 20 66 61 69 6c 65 64 00
>99c8	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>99d0	61 74 61 00
>99d4	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>99dc	65 6e 74 65 64 00
>99e2	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>99ea	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>99f6	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>99fe	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9a0b	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9a13	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9a20	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9a28	68 6f 75 74 20 57 68 69 6c 65 00
>9a33	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9a3b	61 63 6b 20 66 75 6c 6c 00
>9a44	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9a4c	75 63 74 75 72 65 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.8f17					StackOpen:
.8f17	48		pha				pha 								; save frame byte
.8f18	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.8f1a	0a		asl a				asl 	a 							; claim twice this for storage
.8f1b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.8f1d	38		sec				sec 								; so basically subtracting from
.8f1e	65 34		adc $34				adc 	basicStack 	 				; basicStack
.8f20	85 34		sta $34				sta 	basicStack
.8f22	b0 08		bcs $8f2c			bcs 	_SONoBorrow
.8f24	c6 35		dec $35				dec 	basicStack+1
.8f26	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.8f28	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.8f2a	90 04		bcc $8f30			bcc 	_SOMemory
.8f2c					_SONoBorrow:
.8f2c	68		pla				pla 								; get marker back and write at TOS
.8f2d	92 34		sta ($34)			sta 	(basicStack)
.8f2f	60		rts				rts
.8f30					_SOMemory:
.8f30							ERR_STACK
.8f30					StackClose:
.8f30	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.8f32	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.8f34	0a		asl a				asl 	a 							; claim twice this.
.8f35	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.8f37	85 34		sta $34				sta 	basicStack
.8f39	90 02		bcc $8f3d			bcc 	_SCExit
.8f3b	e6 35		inc $35				inc 	basicStack+1
.8f3d					_SCExit:
.8f3d	60		rts				rts
.8f3e					StackCheckFrame:
.8f3e	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.8f40	29 f0		and #$f0			and 	#$F0 						; check type bits
.8f42	d0 01		bne $8f45			bne 	_SCFError 					; different, we have structures mixed up
.8f44	60		rts				rts
.8f45					_SCFError:
.8f45	8a		txa				txa 								; report error X
.8f46	4c 33 84	jmp $8433			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.8f49					STKSaveCodePosition:
.8f49	5a		phy				phy
.8f4a	98		tya				tya 								; save Y
.8f4b	a0 05		ldy #$05			ldy 	#5
.8f4d	91 34		sta ($34),y			sta 	(basicStack),y
.8f4f	88		dey				dey 								; save Code Pointer
.8f50					_STKSaveLoop:
.8f50	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.8f53	91 34		sta ($34),y			sta 	(basicStack),y
.8f55	88		dey				dey
.8f56	d0 f8		bne $8f50			bne 	_STKSaveLoop
.8f58	7a		ply				ply
.8f59	60		rts				rts
.8f5a					STKLoadCodePosition:
.8f5a	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.8f5c					_STKLoadLoop:
.8f5c	b1 34		lda ($34),y			lda 	(basicStack),y
.8f5e	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.8f61	c8		iny				iny
.8f62	c0 05		cpy #$05			cpy 	#5
.8f64	d0 f6		bne $8f5c			bne 	_STKLoadLoop
.8f66	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.8f68	a8		tay				tay
.8f69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.8f6a					StackReset:
.8f6a	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.8f6c	85 34		sta $34				sta 	0+basicStack
.8f6e	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.8f70	85 35		sta $35				sta 	1+basicStack
.8f72	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.8f74	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.8f76	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9a53					StringConcrete:
.9a53	5a		phy				phy 								; save position on stack
.9a54	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9a57	85 38		sta $38				sta 	zTemp1
.9a59	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9a5c	85 39		sta $39				sta 	zTemp1+1
.9a5e	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9a60					_SALength:
.9a60	c8		iny				iny
.9a61	b1 38		lda ($38),y			lda 	(zTemp1),y
.9a63	d0 fb		bne $9a60			bne 	_SALength
.9a65	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9a67	b0 3f		bcs $9aa8			bcs 	_SALengthError
.9a69	98		tya				tya 				 				; length of the new string
.9a6a	18		clc				clc
.9a6b	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9a6d	90 02		bcc $9a71			bcc 	_SAHaveLength
.9a6f	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9a71					_SAHaveLength:
.9a71	48		pha				pha 								; save length.
.9a72	38		sec				sec
.9a73	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9a75	6d 0e 07	adc $070e			adc 	StringMemory
.9a78	8d 0e 07	sta $070e			sta 	StringMemory
.9a7b	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9a7d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9a80	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9a82	6d 0f 07	adc $070f			adc 	StringMemory+1
.9a85	8d 0f 07	sta $070f			sta 	StringMemory+1
.9a88	85 3b		sta $3b				sta 	zTemp2+1
.9a8a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9a8d	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9a8e	38		sec				sec
.9a8f	e9 03		sbc #$03			sbc 	#3
.9a91	92 3a		sta ($3a)			sta 	(zTemp2)
.9a93	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9a95	a0 01		ldy #$01			ldy 	#1
.9a97	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9a99					_SACopyNewString:
.9a99	a0 00		ldy #$00			ldy 	#0
.9a9b					_SACopyNSLoop:
.9a9b	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9a9d	c8		iny				iny 								; write two on in string storage
.9a9e	c8		iny				iny
.9a9f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9aa1	88		dey				dey 								; this makes it one one.
.9aa2	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9aa4	d0 f5		bne $9a9b			bne 	_SACopyNSLoop
.9aa6	7a		ply				ply
.9aa7	60		rts				rts
.9aa8					_SALengthError:
.9aa8	a9 09		lda #$09		lda	#9
.9aaa	4c 33 84	jmp $8433		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9aad					StringSystemInitialise:
.9aad	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9aaf	8d 0e 07	sta $070e			sta 	0+StringMemory
.9ab2	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9ab4	8d 0f 07	sta $070f			sta 	1+StringMemory
.9ab7	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9aba	60		rts				rts
.9abb					StringSpaceInitialise:
.9abb	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9abd	8d 10 07	sta $0710			sta 	StringInitialised
.9ac0	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9ac3	8d 11 07	sta $0711			sta 	StringTempPointer
.9ac6	ad 0f 07	lda $070f			lda 	StringMemory+1
.9ac9	3a		dec a				dec 	a
.9aca	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9acd	60		rts				rts
.9ace					StringTempAllocate:
.9ace	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9ad0	b0 35		bcs $9b07			bcs 	_STALength
.9ad2	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9ad5	30 05		bmi $9adc			bmi 	_STAAllocate
.9ad7	48		pha				pha 								; save value to subtract.
.9ad8	20 bb 9a	jsr $9abb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9adb	68		pla				pla 								; restore it
.9adc					_STAAllocate:
.9adc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9ade	18		clc				clc  								; deliberate allows one more
.9adf	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9ae2	8d 11 07	sta $0711			sta 	StringTempPointer
.9ae5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9ae8	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9aea	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9aed	69 ff		adc #$ff			adc 	#$FF
.9aef	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9af2	85 3d		sta $3d				sta 	zsTemp+1
.9af4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9af7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9afa	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9afd	a9 10		lda #$10			lda 	#NSTString
.9aff	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9b02	a9 00		lda #$00			lda 	#0 							; clear the target string
.9b04	92 3c		sta ($3c)			sta 	(zsTemp)
.9b06	60		rts				rts
.9b07					_STALength:
.9b07	a9 09		lda #$09		lda	#9
.9b09	4c 33 84	jmp $8433		jmp	ErrorHandler
.9b0c					StringTempWrite:
.9b0c	48		pha				pha
.9b0d	92 3c		sta ($3c)			sta 	(zsTemp)
.9b0f	e6 3c		inc $3c				inc 	zsTemp
.9b11	d0 02		bne $9b15			bne 	_STWNoCarry
.9b13	e6 3d		inc $3d				inc 	zsTemp+1
.9b15					_STWNoCarry:
.9b15	a9 00		lda #$00			lda 	#0
.9b17	92 3c		sta ($3c)			sta 	(zsTemp)
.9b19	68		pla				pla
.9b1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8f77					BackloadProgram:
.8f77	a2 ff		ldx #$ff			ldx 	#$FF
.8f79	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8f7c	20 a6 8f	jsr $8fa6			jsr 	BLReadByte
.8f7f	30 1e		bmi $8f9f			bmi 	_BPExit
.8f81					_BPCopy:
.8f81	e8		inx				inx  								; copy byte in
.8f82	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8f85	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8f88	20 a6 8f	jsr $8fa6			jsr 	BLReadByte 					; read next byte
.8f8b	30 0a		bmi $8f97			bmi 	_BPEndLine 					; -ve = EOL
.8f8d	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8f8f	d0 02		bne $8f93			bne 	_BPNotTab
.8f91	a9 20		lda #$20			lda 	#' '
.8f93					_BPNotTab:
.8f93	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8f95	b0 ea		bcs $8f81			bcs 	_BPCopy
.8f97					_BPEndLine:
.8f97	20 70 91	jsr $9170			jsr 	TokeniseLine 				; tokenise the line.
.8f9a	20 fc 93	jsr $93fc			jsr 	MemoryAppend 				; append to current program
.8f9d	80 d8		bra $8f77			bra 	BackloadProgram
.8f9f					_BPExit:
.8f9f	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8fa2	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.8fa5	60		rts				rts
.8fa6					BLReadByte:
.8fa6					_BLLoad:
.8fa6	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8fa9	ee a7 8f	inc $8fa7			inc 	_BLLoad+1
.8fac	d0 03		bne $8fb1			bne 	_BLNoCarry
.8fae	ee a8 8f	inc $8fa8			inc 	_BLLoad+2
.8fb1					_BLNoCarry:
.8fb1	c9 00		cmp #$00			cmp 	#0
.8fb3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8fb4					TokeniseSearchTable:
.8fb4	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8fb6	85 36		sta $36				sta 	zTemp0
.8fb8	a0 00		ldy #$00			ldy 	#0
.8fba	a9 80		lda #$80			lda 	#$80 						; token #
.8fbc	85 38		sta $38				sta 	zTemp1
.8fbe					_TSTLoop:
.8fbe	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8fc0	30 49		bmi $900b			bmi 	_TSTFail 					; -ve = end of table
.8fc2	f0 2e		beq $8ff2			beq 	_TSTNext 					; zero, check next it's a dummy
.8fc4	c8		iny				iny 								; get the hash
.8fc5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fc7	88		dey				dey
.8fc8	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8fcb	d0 25		bne $8ff2			bne 	_TSTNext
.8fcd	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8fd0	38		sec				sec
.8fd1	ed 00 07	sbc $0700			sbc 	identStart
.8fd4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8fd6	d0 1a		bne $8ff2			bne 	_TSTNext
.8fd8	5a		phy				phy 								; save Y , we might fail
.8fd9	c8		iny				iny 								; point to text
.8fda	c8		iny				iny
.8fdb	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8fde					_TSTCompareName:
.8fde	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8fe1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8fe3	d0 0c		bne $8ff1			bne 	_TSTNextPullY 				; fail, pullY and do next
.8fe5	e8		inx				inx
.8fe6	c8		iny				iny
.8fe7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8fea	d0 f2		bne $8fde			bne 	_TSTCompareName
.8fec	7a		ply				ply 								; throw Y
.8fed	a5 38		lda $38				lda 	zTemp1 						; get token #
.8fef	38		sec				sec 								; return with CS = passed.
.8ff0	60		rts				rts
.8ff1					_TSTNextPullY:
.8ff1	7a		ply				ply 								; restore current, fall through.
.8ff2					_TSTNext:
.8ff2	e6 38		inc $38				inc 	zTemp1 						; token counter
.8ff4	98		tya				tya
.8ff5	18		clc				clc
.8ff6	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8ff8	1a		inc a				inc 	a 							; +1
.8ff9	1a		inc a				inc 	a 							; +2
.8ffa	a8		tay				tay
.8ffb	10 c1		bpl $8fbe			bpl 	_TSTLoop 					; if Y < $80 loop back
.8ffd	98		tya				tya 								; add Y to zTemp0 and reset Y
.8ffe	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9000	18		clc				clc  								; but have tables > 255 bytes
.9001	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9003	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9005	90 b7		bcc $8fbe			bcc 	_TSTLoop
.9007	e6 37		inc $37				inc 	zTemp0+1
.9009	80 b3		bra $8fbe			bra 	_TSTLoop
.900b					_TSTFail:
.900b	18		clc				clc
.900c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.900d					KeywordSet0:
>900d	00 65					.text	0,$65,""               ; $80 !0:EOF
>900f	00 58					.text	0,$58,""               ; $81 !1:SH1
>9011	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9013	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9019	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9021	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9027	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>902e	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9035	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>903c	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9042	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>904a	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9052	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9058	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>905f	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9065	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>906d	28
>906e	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9074	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>907a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9080	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9087	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>908d	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9093	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9098	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>909c	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>90a2	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>90aa	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>90b1	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>90b8	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>90c0	43
>90c1	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>90c7	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>90cd	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>90d4	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>90da	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>90e0	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>90e5	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>90eb	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>90f0	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>90f8	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>90fe	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9105	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>910b	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9110	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9117	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>911d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9122	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>912a	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>912e	ff					.text	$FF
.912f					KeywordSet1:
>912f	00 65					.text	0,$65,""               ; $80 !0:EOF
>9131	00 58					.text	0,$58,""               ; $81 !1:SH1
>9133	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9135	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>913d	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9144	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>9149	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>914f	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9154	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>915c	45
>915d	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9162	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>9168	ff					.text	$FF
.9169					KeywordSet2:
>9169	00 65					.text	0,$65,""               ; $80 !0:EOF
>916b	00 58					.text	0,$58,""               ; $81 !1:SH1
>916d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>916f	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9170					TokeniseLine:
.9170	20 f8 92	jsr $92f8			jsr 	FixLineBufferCase 			; fix line case
.9173	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9175	8d 15 07	sta $0715			sta 	tokenOffset
.9178	9c 16 07	stz $0716			stz 	tokenLineNumber
.917b	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.917e	a2 ff		ldx #$ff			ldx 	#$FF
.9180					_TKFindFirst:
.9180	e8		inx				inx
.9181	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9184	f0 79		beq $91ff			beq 	_TKExit
.9186	c9 20		cmp #$20			cmp 	#' '
.9188	90 f6		bcc $9180			bcc 	_TKFindFirst
.918a	c9 30		cmp #$30			cmp 	#'0'
.918c	90 07		bcc $9195			bcc 	_TKNoLineNumber
.918e	c9 3a		cmp #$3a			cmp 	#'9'+1
.9190	b0 03		bcs $9195			bcs 	_TKNoLineNumber
.9192	20 22 93	jsr $9322			jsr 	TokeniseExtractLineNumber
.9195					_TKNoLineNumber:
.9195					_TKTokeniseLoop:
.9195	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9198	f0 65		beq $91ff			beq 	_TKExit
.919a	e8		inx				inx
.919b	c9 20		cmp #$20			cmp 	#' '
.919d	f0 f6		beq $9195			beq 	_TKTokeniseLoop 			; keep looping if space found.
.919f	ca		dex				dex 								; undo last get, A contains character, X is position.
.91a0	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.91a2	f0 61		beq $9205			beq 	_TKTokeniseIdentifier
.91a4	c9 41		cmp #$41			cmp 	#'A'
.91a6	90 04		bcc $91ac			bcc 	_TKTokenisePunctuation
.91a8	c9 5b		cmp #$5b			cmp 	#'Z'+1
.91aa	90 59		bcc $9205			bcc 	_TKTokeniseIdentifier
.91ac					_TKTokenisePunctuation:
.91ac	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.91ae	f0 27		beq $91d7			beq 	_TKString
.91b0	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.91b2	f0 28		beq $91dc			beq 	_TKHexConstant
.91b4	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.91b6	f0 29		beq $91e1			beq 	_TKCheckDouble
.91b8	c9 3e		cmp #$3e			cmp 	#'>'
.91ba	f0 25		beq $91e1			beq 	_TKCheckDouble
.91bc					_TKStandardPunctuation:
.91bc	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.91bf	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.91c1	90 0e		bcc $91d1			bcc 	_TKNoShift
.91c3	48		pha				pha 								; save
.91c4	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.91c6	85 36		sta $36				sta 	zTemp0
.91c8	68		pla				pla
.91c9	29 20		and #$20			and 	#32 						; bit 5
.91cb	4a		lsr a				lsr 	a 							; shift into bit 3
.91cc	4a		lsr a				lsr 	a
.91cd	05 36		ora $36				ora 	zTemp0
.91cf	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.91d1					_TKNoShift:
.91d1	20 67 93	jsr $9367			jsr 	TokeniseWriteByte 			; write the punctuation character
.91d4	e8		inx				inx 								; consume the character
.91d5	80 be		bra $9195			bra 	_TKTokeniseLoop 			; and loop round again.
.91d7					_TKString:
.91d7	20 87 92	jsr $9287			jsr 	TokeniseString
.91da	80 b9		bra $9195			bra 	_TKTokeniseLoop
.91dc					_TKHexConstant:
.91dc	20 c2 92	jsr $92c2			jsr 	TokeniseHexConstant
.91df	80 b4		bra $9195			bra 	_TKTokeniseLoop
.91e1					_TKCheckDouble:
.91e1	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.91e4	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.91e6	90 d4		bcc $91bc			bcc 	_TKStandardPunctuation
.91e8	c9 3f		cmp #$3f			cmp 	#'>'+1
.91ea	b0 d0		bcs $91bc			bcs 	_TKStandardPunctuation
.91ec	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.91ef	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.91f1	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.91f2	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.91f5	38		sec				sec
.91f6	e9 3c		sbc #$3c			sbc 	#'<'
.91f8	20 67 93	jsr $9367			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.91fb	e8		inx				inx 								; consume both
.91fc	e8		inx				inx
.91fd	80 96		bra $9195			bra 	_TKTokeniseLoop
.91ff	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9201	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.9204	60		rts				rts
.9205					_TKTokeniseIdentifier:
.9205	8e 00 07	stx $0700			stx 	identStart 					; save start
.9208	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.920b					_TKCheckLoop:
.920b	e8		inx				inx 								; look at next, we know first is identifier.
.920c	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.920f	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9211	f0 f8		beq $920b			beq 	_TKCheckLoop
.9213	c9 30		cmp #$30			cmp	 	#"0"
.9215	90 0c		bcc $9223			bcc 	_TKEndIdentifier
.9217	c9 3a		cmp #$3a			cmp 	#"9"+1
.9219	90 f0		bcc $920b			bcc 	_TKCheckLoop
.921b	c9 41		cmp #$41			cmp	 	#"A"
.921d	90 04		bcc $9223			bcc 	_TKEndIdentifier
.921f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9221	90 e8		bcc $920b			bcc 	_TKCheckLoop
.9223					_TKEndIdentifier:
.9223	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9226	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9228	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.922a	f0 06		beq $9232			beq 	_TKHasTypeCharacter
.922c	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.922e	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9230	d0 07		bne $9239			bne 	_TKNoTypeCharacter
.9232					_TKHasTypeCharacter:
.9232	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9235	e8		inx				inx 								; read next
.9236	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9239					_TKNoTypeCharacter:
.9239	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.923b	d0 09		bne $9246			bne 	_TKNoArray
.923d	e8		inx				inx 								; skip the (
.923e	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9241	09 04		ora #$04			ora 	#$04
.9243	8d 04 07	sta $0704			sta 	identTypeByte
.9246					_TKNoArray:
.9246	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9249	20 e3 92	jsr $92e3			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.924c	a0 90		ldy #$90			ldy 	#(KeywordSet0) >> 8
.924e	a9 0d		lda #$0d			lda 	#(KeywordSet0) & $FF
.9250	20 b4 8f	jsr $8fb4			jsr 	TokeniseSearchTable
.9253	a2 00		ldx #$00			ldx 	#0
.9255	b0 1f		bcs $9276			bcs 	_TKFoundToken
.9257	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.9259	a9 2f		lda #$2f			lda 	#(KeywordSet1) & $FF
.925b	20 b4 8f	jsr $8fb4			jsr 	TokeniseSearchTable
.925e	a2 81		ldx #$81			ldx 	#$81
.9260	b0 14		bcs $9276			bcs 	_TKFoundToken
.9262	a0 91		ldy #$91			ldy 	#(KeywordSet1) >> 8
.9264	a9 2f		lda #$2f			lda 	#(KeywordSet1) & $FF
.9266	20 b4 8f	jsr $8fb4			jsr 	TokeniseSearchTable
.9269	a2 82		ldx #$82			ldx 	#$82
.926b	b0 09		bcs $9276			bcs 	_TKFoundToken
.926d	20 73 93	jsr $9373			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9270	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9273	4c 95 91	jmp $9195			jmp 	_TKTokeniseLoop 			; and go round again.
.9276					_TKFoundToken:
.9276	48		pha				pha 								; save token
.9277	8a		txa				txa 								; shift in X, is there one ?
.9278	f0 03		beq $927d			beq 	_TKNoTShift
.927a	20 67 93	jsr $9367			jsr 	TokeniseWriteByte 			; if so, write it out
.927d					_TKNoTShift:
.927d	68		pla				pla 								; restore and write token
.927e	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.9281	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9284	4c 95 91	jmp $9195			jmp 	_TKTokeniseLoop 			; and go round again.
.9287					TokeniseString:
.9287	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9289	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.928c	e8		inx				inx									; start of quoted string.
.928d	da		phx				phx 								; push start of string on top
.928e	ca		dex				dex
.928f					_TSFindEnd:
.928f	e8		inx				inx
.9290	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9293	f0 04		beq $9299			beq 	_TSEndOfString
.9295	c9 22		cmp #$22			cmp 	#'"'
.9297	d0 f6		bne $928f			bne 	_TSFindEnd
.9299					_TSEndOfString:
.9299	7a		ply				ply  								; so now Y is first character, X is character after end.
.929a	48		pha				pha 								; save terminating character
.929b	20 a3 92	jsr $92a3			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.929e	68		pla				pla 								; terminating character
.929f	f0 01		beq $92a2			beq 	_TSNotQuote					; if it wasn't EOS skip it
.92a1	e8		inx				inx
.92a2					_TSNotQuote:
.92a2	60		rts				rts
.92a3					TOWriteBlockXY:
.92a3	86 36		stx $36				stx 	zTemp0 						; write end character
.92a5	98		tya				tya
.92a6	49 ff		eor #$ff			eor 	#$FF
.92a8	38		sec				sec
.92a9	65 36		adc $36				adc 	zTemp0
.92ab	1a		inc a				inc 	a 							; one extra for NULL
.92ac	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.92af					_TOBlockLoop:
.92af	c4 36		cpy $36				cpy 	zTemp0
.92b1	f0 09		beq $92bc			beq 	_TOBlockExit
.92b3	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.92b6	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.92b9	c8		iny				iny
.92ba	80 f3		bra $92af			bra 	_TOBlockLoop
.92bc					_TOBlockExit:
.92bc	a9 00		lda #$00			lda 	#0
.92be	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.92c1	60		rts				rts
.92c2					TokeniseHexConstant:
.92c2	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.92c4	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.92c7	e8		inx				inx									; start of quoted string.
.92c8	da		phx				phx 								; push start of constant on top
.92c9	ca		dex				dex
.92ca					_THFindLoop:
.92ca	e8		inx				inx
.92cb	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.92ce	c9 30		cmp #$30			cmp 	#"0"
.92d0	90 0c		bcc $92de			bcc 	_THFoundEnd
.92d2	c9 3a		cmp #$3a			cmp 	#"9"+1
.92d4	90 f4		bcc $92ca			bcc 	_THFindLoop
.92d6	c9 41		cmp #$41			cmp 	#"A"
.92d8	90 04		bcc $92de			bcc 	_THFoundEnd
.92da	c9 47		cmp #$47			cmp 	#"F"+1
.92dc	90 ec		bcc $92ca			bcc 	_THFindLoop
.92de					_THFoundEnd:
.92de	7a		ply				ply 								; restore start
.92df	20 a3 92	jsr $92a3			jsr 	TOWriteBlockXY 				; output the block
.92e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.92e3					TokeniseCalculateHash:
.92e3	da		phx				phx
.92e4	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.92e7	a9 00		lda #$00			lda 	#0
.92e9					_TCHLoop:
.92e9	18		clc				clc
.92ea	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.92ed	e8		inx				inx
.92ee	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.92f1	d0 f6		bne $92e9			bne 	_TCHLoop
.92f3	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.92f6	fa		plx				plx
.92f7	60		rts				rts
.92f8					FixLineBufferCase:
.92f8	a2 00		ldx #$00			ldx 	#0
.92fa					_FLBCLoop:
.92fa	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.92fd	f0 22		beq $9321			beq 	_FLBCExit 					; end of string.
.92ff	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9301	f0 11		beq $9314			beq 	_FLBCInQuotes
.9303	e8		inx				inx
.9304	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9306	90 f2		bcc $92fa			bcc 	_FLBCLoop
.9308	c9 7b		cmp #$7b			cmp 	#'z'+1
.930a	b0 ee		bcs $92fa			bcs 	_FLBCLoop
.930c	38		sec				sec 								; make U/C
.930d	e9 20		sbc #$20			sbc 	#32
.930f	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9312	80 e6		bra $92fa			bra 	_FLBCLoop
.9314					_FLBCInQuotes:
.9314	e8		inx				inx 								; advance
.9315	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9318	f0 07		beq $9321			beq 	_FLBCExit 					; exit on EOS
.931a	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.931c	d0 f6		bne $9314			bne 	_FLBCInQuotes
.931e	e8		inx				inx 								; skip over it
.931f	80 d9		bra $92fa			bra 	_FLBCLoop
.9321					_FLBCExit:
.9321	60		rts				rts
.9322					TokeniseExtractLineNumber:
.9322	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.9325	48		pha				pha
.9326	ad 16 07	lda $0716			lda 	tokenLineNumber
.9329	48		pha				pha
.932a	20 60 93	jsr $9360			jsr 	_TELNTimes2 				; line # x 4
.932d	20 60 93	jsr $9360			jsr 	_TELNTimes2 				; line # x 2
.9330	18		clc				clc 								; add stacked value
.9331	68		pla				pla
.9332	6d 16 07	adc $0716			adc 	tokenLineNumber
.9335	8d 16 07	sta $0716			sta 	tokenLineNumber
.9338	68		pla				pla
.9339	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.933c	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.933f	20 60 93	jsr $9360			jsr 	_TELNTimes2 				; line # x 10
.9342	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.9345	e8		inx				inx
.9346	29 0f		and #$0f			and 	#15 						; add to line #
.9348	18		clc				clc
.9349	6d 16 07	adc $0716			adc 	tokenLineNumber
.934c	8d 16 07	sta $0716			sta 	tokenLineNumber
.934f	90 03		bcc $9354			bcc 	_TLENNoCarry
.9351	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9354					_TLENNoCarry:
.9354	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9357	c9 30		cmp #$30			cmp 	#'0'
.9359	90 04		bcc $935f			bcc 	_TLENExit
.935b	c9 3a		cmp #$3a			cmp 	#'9'+1
.935d	90 c3		bcc $9322			bcc 	TokeniseExtractLineNumber
.935f					_TLENExit:
.935f	60		rts				rts
.9360					_TELNTimes2:
.9360	0e 16 07	asl $0716			asl 	tokenLineNumber
.9363	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9366	60		rts				rts
.9367					TokeniseWriteByte:
.9367	da		phx				phx
.9368	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.936b	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.936e	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9371	fa		plx				plx
.9372	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9373					CheckCreateVariableRecord:
.9373	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9375	85 36		sta $36				sta 	0+zTemp0
.9377	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9379	85 37		sta $37				sta 	1+zTemp0
.937b					_CCVSearch:
.937b	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.937d	f0 2c		beq $93ab			beq 	_CCVFail
.937f	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9381	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9383	cd 03 07	cmp $0703			cmp 	identHash
.9386	d0 16		bne $939e			bne 	_CCVNext
.9388	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.938a	ae 00 07	ldx $0700			ldx 	identStart
.938d					_CCVCompare:
.938d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9390	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9392	e8		inx				inx 								; advance pointers
.9393	c8		iny				iny
.9394	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9395	d0 07		bne $939e			bne 	_CCVNext  					; didn't match go to next.
.9397	90 f4		bcc $938d			bcc 	_CCVCompare 				; not finished yet.
.9399	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.939c	f0 41		beq $93df			beq 	_CCVFound 					; yes, we were successful
.939e					_CCVNext:
.939e	18		clc				clc
.939f	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.93a1	65 36		adc $36				adc 	zTemp0
.93a3	85 36		sta $36				sta 	zTemp0
.93a5	90 d4		bcc $937b			bcc 	_CCVSearch
.93a7	e6 37		inc $37				inc 	zTemp0+1
.93a9	80 d0		bra $937b			bra 	_CCVSearch
.93ab					_CCVFail:
.93ab	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.93ad	ad 03 07	lda $0703			lda 	identHash
.93b0	91 36		sta ($36),y			sta 	(zTemp0),y
.93b2	c8		iny				iny 								; offset 2 is the type byte
.93b3	ad 04 07	lda $0704			lda 	identTypeByte
.93b6	91 36		sta ($36),y			sta 	(zTemp0),y
.93b8	c8		iny				iny
.93b9					_CCVData:
.93b9	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.93bb	91 36		sta ($36),y			sta 	(zTemp0),y
.93bd	c8		iny				iny
.93be	c0 08		cpy #$08			cpy 	#8
.93c0	90 f7		bcc $93b9			bcc 	_CCVData
.93c2	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.93c5					_CCVCopyName:
.93c5	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.93c8	91 36		sta ($36),y			sta 	(zTemp0),y
.93ca	e8		inx				inx
.93cb	c8		iny				iny
.93cc	ec 02 07	cpx $0702			cpx 	identTypeEnd
.93cf	d0 f4		bne $93c5			bne 	_CCVCopyName
.93d1	98		tya				tya 								; patch offset
.93d2	92 36		sta ($36)			sta 	(zTemp0)
.93d4	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.93d6	91 36		sta ($36),y			sta 	(zTemp0),y
.93d8	88		dey				dey
.93d9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.93db	09 80		ora #$80			ora 	#$80
.93dd	91 36		sta ($36),y			sta 	(zTemp0),y
.93df					_CCVFound:
.93df	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.93e1	38		sec				sec
.93e2	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.93e4	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.93e6	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.93e9	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.93eb	20 67 93	jsr $9367			jsr 	TokeniseWriteByte
.93ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9b1b					MemoryPeek:
.9b1b	b2 36		lda ($36)			lda 	(zTemp0)
.9b1d	60		rts				rts
.9b1e					MemoryPoke:
.9b1e	92 36		sta ($36)			sta 	(zTemp0)
.9b20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9b21					EXTPrintCharacter:
.9b21	48		pha				pha
.9b22	da		phx				phx
.9b23	5a		phy				phy
.9b24	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9b27	7a		ply				ply
.9b28	fa		plx				plx
.9b29	68		pla				pla
.9b2a	60		rts				rts
.9b2b					EXTInputSingleCharacter:
.9b2b	da		phx				phx
.9b2c	5a		phy				phy
.9b2d					_EISCWait:
.9b2d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9b30	c9 00		cmp #$00			cmp 	#0
.9b32	f0 f9		beq $9b2d			beq 	_EISCWait
.9b34	7a		ply				ply
.9b35	fa		plx				plx
.9b36	60		rts				rts
.9b37					EXTInputLine:
.9b37	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9b39					_ILLoop:
.9b39	da		phx				phx 								; read character in
.9b3a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9b3d	fa		plx				plx
.9b3e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9b40	f0 12		beq $9b54			beq 	_ILBackspace
.9b42	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9b44	f0 15		beq $9b5b			beq 	_ILExit
.9b46	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9b48	90 ef		bcc $9b39			bcc 	_ILLoop
.9b4a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9b4c	f0 eb		beq $9b39			beq 	_ILLoop
.9b4e	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9b51	e8		inx				inx
.9b52	80 e5		bra $9b39			bra 	_ILLoop
.9b54					_ILBackspace:
.9b54	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9b56	f0 e1		beq $9b39			beq 	_ILLoop
.9b58	ca		dex				dex 								; back one.
.9b59	80 de		bra $9b39			bra 	_ILLoop
.9b5b					_ILExit:
.9b5b	20 21 9b	jsr $9b21			jsr 	EXTPrintCharacter
.9b5e	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9b61	60		rts				rts
.9b62					EXTBreakCheck:
.9b62	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.93ef					MemoryNew:
.93ef	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.93f1	85 30		sta $30				sta 	codePtr
.93f3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.93f5	85 31		sta $31				sta 	codePtr+1
.93f7	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.93f9	92 30		sta ($30)			sta 	(codePtr)
.93fb	60		rts				rts
.93fc					MemoryAppend:
.93fc	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.93fe	85 30		sta $30				sta 	codePtr
.9400	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9402	85 31		sta $31				sta 	codePtr+1
.9404					_MAFindEnd:
.9404	b2 30		lda ($30)			lda 	(codePtr)
.9406	f0 0d		beq $9415			beq 	_MAFoundEnd
.9408	18		clc				clc
.9409	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.940b	65 30		adc $30				adc 	codePtr
.940d	85 30		sta $30				sta 	codePtr
.940f	90 02		bcc $9413			bcc 	_CREExit
.9411	e6 31		inc $31				inc 	codePtr+1
.9413					_CREExit:
.9413	80 ef		bra $9404			bra 	_MAFindEnd
.9415					_MAFoundEnd:
.9415	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9418	c0 04		cpy #$04			cpy 	#4 							; blank line
.941a	f0 0e		beq $942a			beq 	_MANoLine
.941c	a9 00		lda #$00			lda 	#0 							; end of program
.941e	91 30		sta ($30),y			sta 	(codePtr),y
.9420					_MACopy:
.9420	88		dey				dey
.9421	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9424	91 30		sta ($30),y			sta 	(codePtr),y
.9426	c0 00		cpy #$00			cpy 	#0
.9428	d0 f6		bne $9420			bne 	_MACopy
.942a					_MANoLine:
.942a	60		rts				rts
.942b					MemoryInline:
.942b	98		tya				tya 								; put address into stack,x
.942c	18		clc				clc
.942d	65 30		adc $30				adc 	codePtr
.942f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9432	a5 31		lda $31				lda 	codePtr+1
.9434	69 00		adc #$00			adc 	#0
.9436	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9439	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.943c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.943f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9440					MemoryTransferAX:
.9440	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9442	86 37		stx $37				stx 	zTemp0+1
.9444	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9446	85 30		sta $30				sta 	codePtr
.9448	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.944a	85 31		sta $31				sta 	codePtr+1
.944c					_MTAXLoop:
.944c	b2 30		lda ($30)			lda 	(codePtr)
.944e	f0 1d		beq $946d			beq 	_MTAXError 					; not found.
.9450	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9452	b1 30		lda ($30),y			lda 	(codePtr),y
.9454	c5 36		cmp $36				cmp 	zTemp0
.9456	d0 07		bne $945f			bne 	_MTAXNext
.9458	c8		iny				iny 								; check MSB
.9459	b1 30		lda ($30),y			lda 	(codePtr),y
.945b	c5 37		cmp $37				cmp 	zTemp0+1
.945d	f0 0d		beq $946c			beq 	_MTAXExit 					; success !
.945f					_MTAXNext:
.945f	18		clc				clc
.9460	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9462	65 30		adc $30				adc 	codePtr
.9464	85 30		sta $30				sta 	codePtr
.9466	90 02		bcc $946a			bcc 	_CREExit
.9468	e6 31		inc $31				inc 	codePtr+1
.946a					_CREExit:
.946a	80 e0		bra $944c			bra 	_MTAXLoop
.946c					_MTAXExit:
.946c	60		rts				rts
.946d					_MTAXError:
.946d	a9 0d		lda #$0d		lda	#13
.946f	4c 33 84	jmp $8433		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
