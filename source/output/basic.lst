
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 23 10:12:44 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_GETDATEDOLLARLPAREN              = $89; $89 GETDATE$(
=$8a					KWD_GETTIMEDOLLARLPAREN              = $8a; $8a GETTIME$(
=$8b					KWD_HEXDOLLARLPAREN                  = $8b; $8b HEX$(
=$8c					KWD_INTLPAREN                        = $8c; $8c INT(
=$8d					KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e					KWD_LEFTDOLLARLPAREN                 = $8e; $8e LEFT$(
=$8f					KWD_LENLPAREN                        = $8f; $8f LEN(
=$90					KWD_MIDDOLLARLPAREN                  = $90; $90 MID$(
=$91					KWD_NOT                              = $91; $91 NOT
=$92					KWD_PAGE                             = $92; $92 PAGE
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TRUE                             = $98; $98 TRUE
=$99					KWD_VALLPAREN                        = $99; $99 VAL(
=$9a					KWD_FOR                              = $9a; $9a FOR
=$9b					KWD_IF                               = $9b; $9b IF
=$9c					KWD_PROC                             = $9c; $9c PROC
=$9d					KWD_REPEAT                           = $9d; $9d REPEAT
=$9e					KWD_WHILE                            = $9e; $9e WHILE
=$9f					KWD_ENDIF                            = $9f; $9f ENDIF
=$a0					KWD_ENDPROC                          = $a0; $a0 ENDPROC
=$a1					KWD_NEXT                             = $a1; $a1 NEXT
=$a2					KWD_UNTIL                            = $a2; $a2 UNTIL
=$a3					KWD_WEND                             = $a3; $a3 WEND
=$a4					KWD_CALL                             = $a4; $a4 CALL
=$a5					KWD_CLS                              = $a5; $a5 CLS
=$a6					KWD_DATA                             = $a6; $a6 DATA
=$a7					KWD_DIM                              = $a7; $a7 DIM
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_THEN                             = $af; $af THEN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9a					KWC_FIRST_STRUCTURE = $9a
=$9f					KWC_FIRST_STRUCTURE_DEC = $9f
=$a3					KWC_LAST_STRUCTURE = $a3
=$83					KWC_FIRST_UNARY = $83
=$99					KWC_LAST_UNARY = $99

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 40 81	jsr $8140			jsr 	NewCommand 					; erase current program
.8016	20 9c 87	jsr $879c			jsr 	BackloadProgram
.8019	4c 57 81	jmp $8157			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler
>8023							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8024					VectorSetPunc:
>8024	dd 81					.word	ShiftLeft                        ; $00 <<
>8026	6d 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8028	63 8c					.word	BinaryCompareNotEqual            ; $02 <>
>802a	0e 8e					.word	SyntaxError                      ; $03 !!3
>802c	0e 8e					.word	SyntaxError                      ; $04 ><
>802e	77 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8030	e0 81					.word	ShiftRight                       ; $06 >>
>8032	0e 8e					.word	SyntaxError                      ; $07 !!7
>8034	0e 8e					.word	SyntaxError                      ; $08 !!8
>8036	0e 8e					.word	SyntaxError                      ; $09 !!9
>8038	0e 8e					.word	SyntaxError                      ; $0a !!10
>803a	0e 8e					.word	SyntaxError                      ; $0b !!11
>803c	0e 8e					.word	SyntaxError                      ; $0c !!12
>803e	0e 8e					.word	SyntaxError                      ; $0d !!13
>8040	0e 8e					.word	SyntaxError                      ; $0e !!14
>8042	0e 8e					.word	SyntaxError                      ; $0f !!15
>8044	0e 8e					.word	SyntaxError                      ; $10 @
>8046	0e 8e					.word	SyntaxError                      ; $11 !!17
>8048	0e 8e					.word	SyntaxError                      ; $12 !!18
>804a	0e 8e					.word	SyntaxError                      ; $13 [
>804c	d1 8c					.word	IntegerDivide                    ; $14 \
>804e	0e 8e					.word	SyntaxError                      ; $15 ]
>8050	63 83					.word	EorInteger                       ; $16 ^
>8052	0e 8e					.word	SyntaxError                      ; $17 _
>8054	0e 8e					.word	SyntaxError                      ; $18 `
>8056	0e 8e					.word	SyntaxError                      ; $19 !!25
>8058	0e 8e					.word	SyntaxError                      ; $1a !!26
>805a	0e 8e					.word	SyntaxError                      ; $1b {
>805c	1e 83					.word	OraInteger                       ; $1c |
>805e	0e 8e					.word	SyntaxError                      ; $1d }
>8060	0e 8e					.word	SyntaxError                      ; $1e ~
>8062	0e 8e					.word	SyntaxError                      ; $1f [7m<7F>[m
>8064	0e 8e					.word	SyntaxError                      ; $20
>8066	0e 8e					.word	SyntaxError                      ; $21 !
>8068	0e 8e					.word	SyntaxError                      ; $22 "
>806a	0e 8e					.word	SyntaxError                      ; $23 #
>806c	0e 8e					.word	SyntaxError                      ; $24 $
>806e	1d 8d					.word	IntegerModulus                   ; $25 %
>8070	d9 82					.word	AndInteger                       ; $26 &
>8072	0e 8e					.word	SyntaxError                      ; $27 '
>8074	0e 8e					.word	SyntaxError                      ; $28 (
>8076	0e 8e					.word	SyntaxError                      ; $29 )
>8078	8d 8d					.word	MulInteger                       ; $2a *
>807a	73 82					.word	AddInteger                       ; $2b +
>807c	0e 8e					.word	SyntaxError                      ; $2c ,
>807e	ae 82					.word	SubInteger                       ; $2d -
>8080	0e 8e					.word	SyntaxError                      ; $2e .
>8082	0e 8e					.word	SyntaxError                      ; $2f /
>8084	0e 8e					.word	SyntaxError                      ; $30 0
>8086	0e 8e					.word	SyntaxError                      ; $31 1
>8088	0e 8e					.word	SyntaxError                      ; $32 2
>808a	0e 8e					.word	SyntaxError                      ; $33 3
>808c	0e 8e					.word	SyntaxError                      ; $34 4
>808e	0e 8e					.word	SyntaxError                      ; $35 5
>8090	0e 8e					.word	SyntaxError                      ; $36 6
>8092	0e 8e					.word	SyntaxError                      ; $37 7
>8094	0e 8e					.word	SyntaxError                      ; $38 8
>8096	0e 8e					.word	SyntaxError                      ; $39 9
>8098	0e 8e					.word	SyntaxError                      ; $3a :
>809a	0e 8e					.word	SyntaxError                      ; $3b ;
>809c	4f 8c					.word	BinaryCompareLess                ; $3c <
>809e	45 8c					.word	BinaryCompareEqual               ; $3d =
>80a0	59 8c					.word	BinaryCompareGreater             ; $3e >
>80a2	0e 8e					.word	SyntaxError                      ; $3f ?
.80a4					VectorSet0:
>80a4	8e 81					.word	EOLCommand                       ; $80 !0:EOF
>80a6	9b 81					.word	Shift1Command                    ; $81 !1:SH1
>80a8	0e 8e					.word	SyntaxError                      ; $82 !2:SH2
>80aa	0e 8e					.word	SyntaxError                      ; $83 ABS(
>80ac	0e 8e					.word	SyntaxError                      ; $84 ALLOC(
>80ae	0e 8e					.word	SyntaxError                      ; $85 ASC(
>80b0	0e 8e					.word	SyntaxError                      ; $86 CHR$(
>80b2	0e 8e					.word	SyntaxError                      ; $87 DEC(
>80b4	41 8c					.word	UnaryFalse                       ; $88 FALSE
>80b6	0e 8e					.word	SyntaxError                      ; $89 GETDATE$(
>80b8	0e 8e					.word	SyntaxError                      ; $8a GETTIME$(
>80ba	0e 8e					.word	SyntaxError                      ; $8b HEX$(
>80bc	0e 8e					.word	SyntaxError                      ; $8c INT(
>80be	0e 8e					.word	SyntaxError                      ; $8d ISVAL(
>80c0	0e 8e					.word	SyntaxError                      ; $8e LEFT$(
>80c2	0e 8e					.word	SyntaxError                      ; $8f LEN(
>80c4	0e 8e					.word	SyntaxError                      ; $90 MID$(
>80c6	0e 8e					.word	SyntaxError                      ; $91 NOT
>80c8	0e 8e					.word	SyntaxError                      ; $92 PAGE
>80ca	0e 8e					.word	SyntaxError                      ; $93 RIGHT$(
>80cc	0e 8e					.word	SyntaxError                      ; $94 RND(
>80ce	0e 8e					.word	SyntaxError                      ; $95 SGN(
>80d0	0e 8e					.word	SyntaxError                      ; $96 SPC(
>80d2	0e 8e					.word	SyntaxError                      ; $97 STR$(
>80d4	35 8c					.word	UnaryTrue                        ; $98 TRUE
>80d6	0e 8e					.word	SyntaxError                      ; $99 VAL(
>80d8	0e 8e					.word	SyntaxError                      ; $9a FOR
>80da	0e 8e					.word	SyntaxError                      ; $9b IF
>80dc	0e 8e					.word	SyntaxError                      ; $9c PROC
>80de	0e 8e					.word	SyntaxError                      ; $9d REPEAT
>80e0	0e 8e					.word	SyntaxError                      ; $9e WHILE
>80e2	0e 8e					.word	SyntaxError                      ; $9f ENDIF
>80e4	0e 8e					.word	SyntaxError                      ; $a0 ENDPROC
>80e6	0e 8e					.word	SyntaxError                      ; $a1 NEXT
>80e8	0e 8e					.word	SyntaxError                      ; $a2 UNTIL
>80ea	0e 8e					.word	SyntaxError                      ; $a3 WEND
>80ec	30 81					.word	CallCommand                      ; $a4 CALL
>80ee	0e 8e					.word	SyntaxError                      ; $a5 CLS
>80f0	0e 8e					.word	SyntaxError                      ; $a6 DATA
>80f2	0e 8e					.word	SyntaxError                      ; $a7 DIM
>80f4	0e 8e					.word	SyntaxError                      ; $a8 GOSUB
>80f6	0e 8e					.word	SyntaxError                      ; $a9 GOTO
>80f8	0e 8e					.word	SyntaxError                      ; $aa LET
>80fa	0e 8e					.word	SyntaxError                      ; $ab PRINT
>80fc	0e 8e					.word	SyntaxError                      ; $ac READ
>80fe	4a 81					.word	RemCommand                       ; $ad REM
>8100	0e 8e					.word	SyntaxError                      ; $ae RETURN
>8102	0e 8e					.word	SyntaxError                      ; $af THEN
>8104	0e 8e					.word	SyntaxError                      ; $b0 TO
.8106					VectorSet1:
>8106	0e 8e					.word	SyntaxError                      ; $80 !0:EOF
>8108	0e 8e					.word	SyntaxError                      ; $81 !1:SH1
>810a	0e 8e					.word	SyntaxError                      ; $82 !2:SH2
>810c	22 81					.word	AssertCommand                    ; $83 ASSERT
>810e	3c 81					.word	ClearCommand                     ; $84 CLEAR
>8110	3d 81					.word	EndCommand                       ; $85 END
>8112	0e 8e					.word	SyntaxError                      ; $86 LIST
>8114	40 81					.word	NewCommand                       ; $87 NEW
>8116	0e 8e					.word	SyntaxError                      ; $88 RESTORE
>8118	57 81					.word	CommandRUN                       ; $89 RUN
>811a	0e 8e					.word	SyntaxError                      ; $8a STOP
.811c					VectorSet2:
>811c	0e 8e					.word	SyntaxError                      ; $80 !0:EOF
>811e	0e 8e					.word	SyntaxError                      ; $81 !1:SH1
>8120	0e 8e					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8122					AssertCommand:
.8122	20 86 86	jsr $8686			jsr 	EvaluateInteger 			; the assert test
.8125	20 3c 87	jsr $873c			jsr 	NSMIsZero 					; exit if result is non zero.
.8128	d0 05		bne $812f			bne 	_ACExit
.812a	a9 0a		lda #$0a		lda	#10
.812c	4c 1f 80	jmp $801f		jmp	ErrorHandler
.812f					_ACExit:
.812f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8130					CallCommand:
.8130	20 9b 86	jsr $869b			jsr 	Evaluate16BitInteger
.8133	ad 10 06	lda $0610			lda 	NSMantissa1
.8136	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8139	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813c					ClearCommand:
.813c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.813d					EndCommand:
.813d	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8140					NewCommand:
.8140	20 49 87	jsr $8749			jsr 	MemoryNew
.8143	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8146	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear everything.
.8149	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.814a					RemCommand:
.814a	b1 30		lda ($30),y			lda 	(codePtr),y
.814c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.814e	d0 06		bne $8156			bne 	_RMExit
.8150	c8		iny				iny
.8151	98		tya				tya
.8152	38		sec				sec
.8153	71 30		adc ($30),y			adc 	(codePtr),y
.8155	a8		tay				tay
.8156					_RMExit:
.8156	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8157					CommandRUN:
.8157	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.815a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.815c	85 30		sta $30				sta 	codePtr
.815e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8160	85 31		sta $31				sta 	codePtr+1
.8162					RUNNewLine:
.8162	b2 30		lda ($30)			lda 	(codePtr)
.8164	f0 25		beq $818b			beq 	CRNoProgram         		; no then END.
.8166	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8168	9a		txs				txs
.8169					RUNCodePointerLine:
.8169	a0 02		ldy #$02			ldy 	#2 							; start of program
.816b					_CRIncMainLoop:
.816b	c8		iny				iny
.816c					_CRMainLoop:
.816c	b1 30		lda ($30),y			lda 	(codePtr),y
.816e	10 10		bpl $8180			bpl 	_CRNotKeyword
.8170	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8172	b0 04		bcs $8178			bcs 	_CRIsKeyword
.8174	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8176	b0 0d		bcs $8185			bcs		_CRSyntaxError
.8178					_CRIsKeyword:
.8178	c8		iny				iny 								; consume command
.8179	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.817a	aa		tax				tax 								; put in X for vector jump
.817b	20 88 81	jsr $8188			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.817e	80 ec		bra $816c			bra 	_CRMainLoop 				; and loop round
.8180					_CRNotKeyword:
.8180	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8182	f0 e7		beq $816b			beq 	_CRIncMainLoop
>8184	db						.byte 	$DB 						; causes a break in the emulator
.8185					_CRSyntaxError:
.8185	4c 0e 8e	jmp $8e0e			jmp 	SyntaxError
.8188					_CRCallVector0:
.8188	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x)
.818b					CRNoProgram:
.818b	4c 3d 81	jmp $813d			jmp 	EndCommand
.818e					EOLCommand:
.818e	18		clc				clc
.818f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8191	65 30		adc $30				adc 	codePtr
.8193	85 30		sta $30				sta 	codePtr
.8195	90 02		bcc $8199			bcc 	_CREExit
.8197	e6 31		inc $31				inc 	codePtr+1
.8199					_CREExit:
.8199	80 c7		bra $8162			bra 	RunNewLine
.819b					Shift1Command:
.819b	b1 30		lda ($30),y			lda 	(codePtr),y
.819d	c8		iny				iny
.819e	0a		asl a				asl 	a
.819f	aa		tax				tax
.81a0	7c 06 81	jmp ($8106,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8c1c					CheckRightBracket:
.8c1c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c1e	c8		iny				iny
.8c1f	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8c21	d0 0f		bne $8c32			bne 	CNAFail
.8c23	60		rts				rts
.8c24					CheckComma:
.8c24	b1 30		lda ($30),y			lda 	(codePtr),y
.8c26	c8		iny				iny
.8c27	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8c29	d0 07		bne $8c32			bne 	CNAFail
.8c2b	60		rts				rts
.8c2c					CheckNextA:
.8c2c	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8c2e	d0 02		bne $8c32			bne 	CNAFail
.8c30	c8		iny				iny 								; skip character
.8c31	60		rts				rts 								; and exit
.8c32					CNAFail:
.8c32	4c 0e 8e	jmp $8e0e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8c35					UnaryTrue:
.8c35	fa		plx				plx
.8c36					ReturnTrue:
.8c36	a9 01		lda #$01			lda 	#1  						; set to 1
.8c38	20 0e 87	jsr $870e			jsr 	NSMSetByte
.8c3b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8c3d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c40	60		rts				rts
.8c41					UnaryFalse:
.8c41	fa		plx				plx
.8c42					ReturnFalse:
.8c42	4c 0c 87	jmp $870c			jmp 	NSMSetZero 					; set it all to zero
.8c45					BinaryCompareEqual:
.8c45	fa		plx				plx
.8c46	20 81 8c	jsr $8c81			jsr 	CompareBaseCode
.8c49	c9 00		cmp #$00			cmp 	#0
.8c4b	f0 e9		beq $8c36			beq 	ReturnTrue
.8c4d	80 f3		bra $8c42			bra 	ReturnFalse
.8c4f					BinaryCompareLess:
.8c4f	fa		plx				plx
.8c50	20 81 8c	jsr $8c81			jsr 	CompareBaseCode
.8c53	c9 ff		cmp #$ff			cmp 	#$FF
.8c55	f0 df		beq $8c36			beq 	ReturnTrue
.8c57	80 e9		bra $8c42			bra 	ReturnFalse
.8c59					BinaryCompareGreater:
.8c59	fa		plx				plx
.8c5a	20 81 8c	jsr $8c81			jsr 	CompareBaseCode
.8c5d	c9 01		cmp #$01			cmp 	#1
.8c5f	f0 d5		beq $8c36			beq 	ReturnTrue
.8c61	80 df		bra $8c42			bra 	ReturnFalse
.8c63					BinaryCompareNotEqual:
.8c63	fa		plx				plx
.8c64	20 81 8c	jsr $8c81			jsr 	CompareBaseCode
.8c67	c9 00		cmp #$00			cmp 	#0
.8c69	d0 cb		bne $8c36			bne 	ReturnTrue
.8c6b	80 d5		bra $8c42			bra 	ReturnFalse
.8c6d					BinaryCompareLessEqual:
.8c6d	fa		plx				plx
.8c6e	20 81 8c	jsr $8c81			jsr 	CompareBaseCode
.8c71	c9 01		cmp #$01			cmp 	#1
.8c73	d0 c1		bne $8c36			bne 	ReturnTrue
.8c75	80 cb		bra $8c42			bra 	ReturnFalse
.8c77					BinaryCompareGreaterEqual:
.8c77	fa		plx				plx
.8c78	20 81 8c	jsr $8c81			jsr 	CompareBaseCode
.8c7b	c9 ff		cmp #$ff			cmp 	#$FF
.8c7d	d0 b7		bne $8c36			bne 	ReturnTrue
.8c7f	80 c1		bra $8c42			bra 	ReturnFalse
.8c81					CompareBaseCode:
.8c81	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; make both values if references.
.8c84	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c87	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c8a	29 10		and #$10			and 	#NSTString
.8c8c	d0 36		bne $8cc4			bne 	_CBCString
.8c8e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c91	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c94	d0 31		bne $8cc7			bne 	_CBCFloat
.8c96	20 c8 8c	jsr $8cc8			jsr 	CompareFixMinusZero
.8c99	e8		inx				inx
.8c9a	20 c8 8c	jsr $8cc8			jsr 	CompareFixMinusZero
.8c9d	ca		dex				dex
.8c9e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8ca1	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ca4	10 0b		bpl $8cb1			bpl 	_CDCSameSign
.8ca6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8ca9	30 16		bmi $8cc1			bmi 	_CBCLess 					; return $FF
.8cab					_CBCGreater:
.8cab	a9 01		lda #$01			lda 	#1
.8cad	60		rts				rts
.8cae					_CBCEqual:
.8cae	a9 00		lda #$00			lda 	#0
.8cb0	60		rts				rts
.8cb1					_CDCSameSign:
.8cb1	20 4d 82	jsr $824d			jsr 	SubTopTwoStack 				; unsigned subtract
.8cb4	20 3c 87	jsr $873c			jsr 	NSMIsZero 					; or the mantissa together
.8cb7	f0 f5		beq $8cae			beq 	_CBCEqual 					; -0 == 0
.8cb9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8cbc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8cbf	10 ea		bpl $8cab			bpl 	_CBCGreater
.8cc1					_CBCLess:
.8cc1	a9 ff		lda #$ff			lda 	#$FF
.8cc3	60		rts				rts
.8cc4					_CBCString:
.8cc4	4c a3 81	jmp $81a3			jmp 	CompareStrings
.8cc7					_CBCFloat:
>8cc7	db						.byte 	$DB 						; causes a break in the emulator
.8cc8					CompareFixMinusZero:
.8cc8	20 3c 87	jsr $873c			jsr 	NSMIsZero
.8ccb	d0 03		bne $8cd0			bne 	_CFXMZNotZero
.8ccd	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8cd0					_CFXMZNotZero:
.8cd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8cd1					IntegerDivide:
.8cd1	fa		plx				plx
.8cd2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8cd5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cd8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8cd9	0a		asl a				asl 	a
.8cda	10 05		bpl $8ce1			bpl 	_NotRef
.8cdc	48		pha				pha
.8cdd	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ce0	68		pla				pla
.8ce1					_NotRef:
.8ce1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ce3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ce6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ce9	f0 03		beq $8cee			beq 	_IntegerCode 				; if clear, then we have two integers
.8ceb	4c 18 8e	jmp $8e18			jmp 	TypeError 					; anything else, type mismatch.
.8cee					_IntegerCode:
.8cee	20 10 8d	jsr $8d10			jsr 	CheckDivideZero 			; do div zero check
.8cf1	20 47 8d	jsr $8d47			jsr 	Int32Divide 				; do the division
.8cf4	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8cf7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cfa	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8cfd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d00	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8d03	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d06	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8d09	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d0c	20 00 8e	jsr $8e00			jsr 	CalculateSign 				; calculate result sign
.8d0f	60		rts				rts
.8d10					CheckDivideZero:
.8d10	e8		inx				inx
.8d11	20 3c 87	jsr $873c			jsr 	NSMIsZero
.8d14	f0 02		beq $8d18			beq 	_CDVError
.8d16	ca		dex				dex
.8d17	60		rts				rts
.8d18					_CDVError:
.8d18	a9 03		lda #$03		lda	#3
.8d1a	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d1d					IntegerModulus:
.8d1d	fa		plx				plx
.8d1e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d21	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d24	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d25	0a		asl a				asl 	a
.8d26	10 05		bpl $8d2d			bpl 	_NotRef
.8d28	48		pha				pha
.8d29	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d2c	68		pla				pla
.8d2d					_NotRef:
.8d2d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d2f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d32	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d35	f0 03		beq $8d3a			beq 	_IntegerCode 				; if clear, then we have two integers
.8d37	4c 18 8e	jmp $8e18			jmp 	TypeError 					; anything else, type mismatch.
.8d3a					_IntegerCode:
.8d3a	20 10 8d	jsr $8d10			jsr 	CheckDivideZero 			; do div zero check
.8d3d	20 47 8d	jsr $8d47			jsr 	Int32Divide 				; do the division
.8d40	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8d43	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8d46	60		rts				rts
.8d47					Int32Divide:
.8d47	48		pha				pha 								; save AXY
.8d48	5a		phy				phy
.8d49	20 e3 86	jsr $86e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d4c	20 08 87	jsr $8708			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d4f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8d51					_I32DivideLoop:
.8d51	e8		inx				inx
.8d52	e8		inx				inx
.8d53	20 21 87	jsr $8721			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8d56	ca		dex				dex
.8d57	ca		dex				dex
.8d58	20 22 87	jsr $8722			jsr 	NSMRotateLeft
.8d5b	20 83 8d	jsr $8d83			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d5e	90 03		bcc $8d63			bcc 	_I32DivideNoCarryIn
.8d60	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8d63					_I32DivideNoCarryIn:
.8d63	88		dey				dey 								; loop round till division completed.
.8d64	d0 eb		bne $8d51			bne 	_I32DivideLoop
.8d66	7a		ply				ply 								; restore AXY and exit
.8d67	68		pla				pla
.8d68	60		rts				rts
.8d69					Int32ShiftDivide:
.8d69	48		pha				pha 								; save AXY
.8d6a	5a		phy				phy
.8d6b	20 e3 86	jsr $86e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d6e	20 08 87	jsr $8708			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d71	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8d73					_I32SDLoop:
.8d73	20 83 8d	jsr $8d83			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d76	20 22 87	jsr $8722			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8d79	e8		inx				inx
.8d7a	20 22 87	jsr $8722			jsr 	NSMRotateLeft
.8d7d	88		dey				dey 	 							; do 31 times
.8d7e	d0 f3		bne $8d73			bne 	_I32SDLoop
.8d80	7a		ply				ply 								; restore AXY and exit
.8d81	68		pla				pla
.8d82	60		rts				rts
.8d83					DivideCheckSubtract:
.8d83	20 4d 82	jsr $824d			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8d86	b0 04		bcs $8d8c			bcs 	_DCSExit 					; if carry set, then could do, exit
.8d88	20 27 82	jsr $8227			jsr 	AddTopTwoStack 				; add it back in
.8d8b	18		clc				clc 								; and return False
.8d8c					_DCSExit:
.8d8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8d8d					MulInteger:
.8d8d	fa		plx				plx
.8d8e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d91	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d94	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d95	0a		asl a				asl 	a
.8d96	10 05		bpl $8d9d			bpl 	_NotRef
.8d98	48		pha				pha
.8d99	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d9c	68		pla				pla
.8d9d					_NotRef:
.8d9d	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d9e	30 0b		bmi $8dab			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8da0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8da3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8da6	f0 06		beq $8dae			beq 	_IntegerCode 				; if clear, then we have two integers
.8da8	4c 22 8e	jmp $8e22			jmp 	NotDoneError 							; otherwise at least one float.
.8dab					_StringData:
.8dab	4c 22 8e	jmp $8e22			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8dae					_IntegerCode:
.8dae	20 bb 8d	jsr $8dbb			jsr 	MultiplyShort
.8db1	c9 00		cmp #$00			cmp 	#0
.8db3	f0 05		beq $8dba			beq 	_MIExit
.8db5	a9 04		lda #$04		lda	#4
.8db7	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8dba					_MIExit:
.8dba	60		rts				rts
.8dbb					MultiplyShort:
.8dbb	5a		phy				phy 								; save Y
.8dbc	20 e3 86	jsr $86e3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8dbf	20 08 87	jsr $8708			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8dc2	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8dc4					_I32MLoop:
.8dc4	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8dc7	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8dca	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8dcd	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8dd0	f0 28		beq $8dfa			beq 	_I32MExit 					; exit if zero
.8dd2	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8dd5	29 01		and #$01			and 	#1
.8dd7	f0 0e		beq $8de7			beq 	_I32MNoAdd
.8dd9	20 27 82	jsr $8227			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8ddc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8ddf	10 06		bpl $8de7			bpl 	_I32MNoAdd
.8de1					_I32ShiftRight:
.8de1	20 2f 87	jsr $872f			jsr 	NSMShiftRight 				; shift S[X] right
.8de4	c8		iny				iny 								; increment shift count
.8de5	80 0a		bra $8df1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8de7					_I32MNoAdd:
.8de7	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8dea	70 f5		bvs $8de1			bvs 	_I32ShiftRight 				; instead.
.8dec	e8		inx				inx
.8ded	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8df0	ca		dex				dex
.8df1					_I32MShiftUpper:
.8df1	e8		inx				inx 								; shift S[X+2] right
.8df2	e8		inx				inx
.8df3	20 2f 87	jsr $872f			jsr 	NSMShiftRight
.8df6	ca		dex				dex
.8df7	ca		dex				dex
.8df8	80 ca		bra $8dc4			bra 	_I32MLoop 					; try again.
.8dfa					_I32MExit:
.8dfa	20 00 8e	jsr $8e00			jsr 	CalculateSign
.8dfd	98		tya				tya 								; shift in A
.8dfe	7a		ply				ply 								; restore Y and exit
.8dff	60		rts				rts
.8e00					CalculateSign:
.8e00	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8e03	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8e06	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e09	0a		asl a				asl 	a 							; shift bit 7 into carry
.8e0a	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8e0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.81a3					CompareStrings:
>81a3	db						.byte 	$DB 						; causes a break in the emulator
.81a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.81a7	3d 01 06	and $0601,x			and 	NSStatus+1,x
.81aa	29 10		and #$10			and 	#NSBIsString
.81ac	f0 2c		beq $81da			beq 	_CSTypeError
.81ae	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.81b1	85 36		sta $36				sta 	zTemp0
.81b3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81b6	85 37		sta $37				sta 	zTemp0+1
.81b8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.81bb	85 38		sta $38				sta 	zTemp1
.81bd	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.81c0	85 39		sta $39				sta 	zTemp1+1
.81c2	5a		phy				phy 								; save Y so we can access strings
.81c3	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.81c5					_CSLoop:
.81c5	c8		iny				iny
.81c6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.81c8	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.81ca	d0 06		bne $81d2			bne 	_CSDifferent
.81cc	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.81ce	d0 f5		bne $81c5			bne 	_CSLoop 					; still comparing
.81d0					_CSExit:
.81d0	7a		ply				ply 								; reached end, return zero in A from EOS
.81d1	60		rts				rts
.81d2					_CSDifferent:
.81d2	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.81d4	90 fa		bcc $81d0			bcc		_CSExit
.81d6	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.81d8	80 f6		bra $81d0			bra 	_CSExit
.81da					_CSTypeError:
.81da	4c 18 8e	jmp $8e18			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.81dd					ShiftLeft:
.81dd	38		sec				sec
.81de	80 01		bra $81e1			bra 	ShiftMain
.81e0					ShiftRight:
.81e0	18		clc				clc
.81e1					ShiftMain:
.81e1	fa		plx				plx 								; restore X
.81e2	08		php				php 								; save direction
.81e3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.81e6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.81e9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.81ea	0a		asl a				asl 	a
.81eb	10 05		bpl $81f2			bpl 	_NotRef
.81ed	48		pha				pha
.81ee	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81f1	68		pla				pla
.81f2					_NotRef:
.81f2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.81f4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81f7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81fa	f0 03		beq $81ff			beq 	_IntegerCode 				; if clear, then we have two integers
.81fc	4c 18 8e	jmp $8e18			jmp 	TypeError 					; anything else, type mismatch.
.81ff					_IntegerCode:
.81ff	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8202	29 e0		and #$e0			and 	#$E0
.8204	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8207	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.820a	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.820d	d0 13		bne $8222			bne 	_SMExit0 					; if >= 32 it will always return zero.
.820f					_SMLoop:
.820f	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8212	30 11		bmi $8225			bmi 	_SMExit 					; exit if done.
.8214	28		plp				plp 								; restore direcition setting
.8215	08		php				php
.8216	90 05		bcc $821d			bcc 	_SMRight
.8218	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; shift left if CS
.821b	80 f2		bra $820f			bra 	_SMLoop
.821d					_SMRight:
.821d	20 2f 87	jsr $872f			jsr 	NSMShiftRight 				; shift right if CC
.8220	80 ed		bra $820f			bra 	_SMLoop
.8222					_SMExit0:
.8222	20 0c 87	jsr $870c			jsr 	NSMSetZero 					; return zero.
.8225					_SMExit:
.8225	28		plp				plp 								; throw direction
.8226	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.8227					AddTopTwoStack:
.8227	18		clc				clc
.8228	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.822b	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.822e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8231	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8234	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8237	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.823a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.823d	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8240	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8243	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8246	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8249	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.824c	60		rts				rts
.824d					SubTopTwoStack:
.824d	38		sec				sec
.824e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8251	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8254	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8257	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.825a	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.825d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8260	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8263	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8266	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8269	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.826c	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.826f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8272	60		rts				rts
.8273					AddInteger:
.8273	fa		plx				plx
.8274	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8277	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.827a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.827b	0a		asl a				asl 	a
.827c	10 05		bpl $8283			bpl 	_NotRef
.827e	48		pha				pha
.827f	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8282	68		pla				pla
.8283					_NotRef:
.8283	0a		asl a				asl 	a 							; put MSB of type into A:7
.8284	30 0b		bmi $8291			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8286	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8289	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.828c	f0 06		beq $8294			beq 	_IntegerCode 				; if clear, then we have two integers
.828e	4c 22 8e	jmp $8e22			jmp 	NotDoneError 							; otherwise at least one float.
.8291					_StringData:
.8291	4c 22 8e	jmp $8e22			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8294					_IntegerCode:
.8294					AddCode:
.8294	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8297	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.829a	10 8b		bpl $8227			bpl 	AddTopTwoStack
.829c	20 4d 82	jsr $824d			jsr 	SubTopTwoStack 				; do a physical subtraction
.829f	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.82a2	10 09		bpl $82ad			bpl 	_AddExit
.82a4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.82a7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82aa	20 c1 86	jsr $86c1			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.82ad					_AddExit:
.82ad	60		rts				rts
.82ae					SubInteger:
.82ae	fa		plx				plx
.82af	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82b2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82b5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82b6	0a		asl a				asl 	a
.82b7	10 05		bpl $82be			bpl 	_NotRef
.82b9	48		pha				pha
.82ba	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82bd	68		pla				pla
.82be					_NotRef:
.82be	0a		asl a				asl 	a 							; put MSB of type into A:7
.82bf	30 0b		bmi $82cc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82c1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82c4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82c7	f0 06		beq $82cf			beq 	_IntegerCode 				; if clear, then we have two integers
.82c9	4c 22 8e	jmp $8e22			jmp 	NotDoneError 							; otherwise at least one float.
.82cc					_StringData:
.82cc	4c 22 8e	jmp $8e22			jmp 	NotDoneError							; at least one string - don't know both are strings.
.82cf					_IntegerCode:
.82cf	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.82d2	49 80		eor #$80			eor 	#$80
.82d4	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.82d7	80 bb		bra $8294			bra 	AddCode 					; and do the same code as add.
.82d9					AndInteger:
.82d9	fa		plx				plx
.82da	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82dd	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82e0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82e1	0a		asl a				asl 	a
.82e2	10 05		bpl $82e9			bpl 	_NotRef
.82e4	48		pha				pha
.82e5	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82e8	68		pla				pla
.82e9					_NotRef:
.82e9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82eb	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82ee	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82f1	f0 03		beq $82f6			beq 	_IntegerCode 				; if clear, then we have two integers
.82f3	4c 18 8e	jmp $8e18			jmp 	TypeError 					; anything else, type mismatch.
.82f6					_IntegerCode:
.82f6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82f9	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.82fc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82ff	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8302	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8305	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8308	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.830b	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.830e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8311	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8314	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8317	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.831a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.831d	60		rts				rts
.831e					OraInteger:
.831e	fa		plx				plx
.831f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8322	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8325	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8326	0a		asl a				asl 	a
.8327	10 05		bpl $832e			bpl 	_NotRef
.8329	48		pha				pha
.832a	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.832d	68		pla				pla
.832e					_NotRef:
.832e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8330	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8333	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8336	f0 03		beq $833b			beq 	_IntegerCode 				; if clear, then we have two integers
.8338	4c 18 8e	jmp $8e18			jmp 	TypeError 					; anything else, type mismatch.
.833b					_IntegerCode:
.833b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.833e	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8341	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8344	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8347	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.834a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.834d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8350	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8353	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8356	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8359	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.835c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.835f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8362	60		rts				rts
.8363					EorInteger:
.8363	fa		plx				plx
.8364	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8367	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.836a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.836b	0a		asl a				asl 	a
.836c	10 05		bpl $8373			bpl 	_NotRef
.836e	48		pha				pha
.836f	20 27 84	jsr $8427			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8372	68		pla				pla
.8373					_NotRef:
.8373	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8375	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8378	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.837b	f0 03		beq $8380			beq 	_IntegerCode 				; if clear, then we have two integers
.837d	4c 18 8e	jmp $8e18			jmp 	TypeError 					; anything else, type mismatch.
.8380					_IntegerCode:
.8380	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8383	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8386	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8389	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.838c	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.838f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8392	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8395	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8398	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.839b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.839e	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.83a1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83a4	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.83a8					PrecedenceLevel:
>83a8	04					.byte	 4	; $00 <<
>83a9	02					.byte	 2	; $01 <=
>83aa	02					.byte	 2	; $02 <>
>83ab	00					.byte	 0	; $03 !!3
>83ac	00					.byte	 0	; $04 ><
>83ad	02					.byte	 2	; $05 >=
>83ae	04					.byte	 4	; $06 >>
>83af	00					.byte	 0	; $07 !!7
>83b0	00					.byte	 0	; $08 !!8
>83b1	00					.byte	 0	; $09 !!9
>83b2	00					.byte	 0	; $0a !!10
>83b3	00					.byte	 0	; $0b !!11
>83b4	00					.byte	 0	; $0c !!12
>83b5	00					.byte	 0	; $0d !!13
>83b6	00					.byte	 0	; $0e !!14
>83b7	00					.byte	 0	; $0f !!15
>83b8	00					.byte	 0	; $10 @
>83b9	00					.byte	 0	; $11 !!17
>83ba	00					.byte	 0	; $12 !!18
>83bb	00					.byte	 0	; $13 [
>83bc	04					.byte	 4	; $14 \
>83bd	00					.byte	 0	; $15 ]
>83be	01					.byte	 1	; $16 ^
>83bf	00					.byte	 0	; $17 _
>83c0	00					.byte	 0	; $18 `
>83c1	00					.byte	 0	; $19 !!25
>83c2	00					.byte	 0	; $1a !!26
>83c3	00					.byte	 0	; $1b {
>83c4	01					.byte	 1	; $1c |
>83c5	00					.byte	 0	; $1d }
>83c6	00					.byte	 0	; $1e ~
>83c7	00					.byte	 0	; $1f [7m<7F>[m
>83c8	00					.byte	 0	; $20
>83c9	05					.byte	 5	; $21 !
>83ca	00					.byte	 0	; $22 "
>83cb	00					.byte	 0	; $23 #
>83cc	05					.byte	 5	; $24 $
>83cd	04					.byte	 4	; $25 %
>83ce	01					.byte	 1	; $26 &
>83cf	00					.byte	 0	; $27 '
>83d0	00					.byte	 0	; $28 (
>83d1	00					.byte	 0	; $29 )
>83d2	04					.byte	 4	; $2a *
>83d3	03					.byte	 3	; $2b +
>83d4	00					.byte	 0	; $2c ,
>83d5	03					.byte	 3	; $2d -
>83d6	00					.byte	 0	; $2e .
>83d7	04					.byte	 4	; $2f /
>83d8	00					.byte	 0	; $30 0
>83d9	00					.byte	 0	; $31 1
>83da	00					.byte	 0	; $32 2
>83db	00					.byte	 0	; $33 3
>83dc	00					.byte	 0	; $34 4
>83dd	00					.byte	 0	; $35 5
>83de	00					.byte	 0	; $36 6
>83df	00					.byte	 0	; $37 7
>83e0	00					.byte	 0	; $38 8
>83e1	00					.byte	 0	; $39 9
>83e2	00					.byte	 0	; $3a :
>83e3	00					.byte	 0	; $3b ;
>83e4	02					.byte	 2	; $3c <
>83e5	02					.byte	 2	; $3d =
>83e6	02					.byte	 2	; $3e >
>83e7	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.83e8					EvaluateExpressionAt0:
.83e8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.83ea					EvaluateExpression:
.83ea	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.83ec					EvaluateExpressionAtPrecedence:
.83ec	48		pha				pha 								; save precedence level
.83ed	20 74 85	jsr $8574			jsr 	EvaluateTerm 				; evaluate term into level X.
.83f0	68		pla				pla 								; restore precedence level.
.83f1					_EXPRLoop:
.83f1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.83f3	b1 30		lda ($30),y			lda 	(codePtr),y
.83f5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.83f7	b0 25		bcs $841e			bcs 	_EXPRExit
.83f9	da		phx				phx 								; read the operator precedence
.83fa	aa		tax				tax
.83fb	bd a8 83	lda $83a8,x			lda 	PrecedenceLevel,x
.83fe	fa		plx				plx
.83ff	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8401	f0 1b		beq $841e			beq 	_EXPRExit
.8403	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8405	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8407	c5 37		cmp $37				cmp 	zTemp0+1
.8409	b0 13		bcs $841e			bcs		_EXPRExit 					; if current >= operator exit
.840b	48		pha				pha 								; save current precedence.
.840c	b1 30		lda ($30),y			lda 	(codePtr),y
.840e	c8		iny				iny
.840f	48		pha				pha
.8410	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8412	e8		inx				inx 								; work out the right hand side.
.8413	20 ec 83	jsr $83ec			jsr 	EvaluateExpressionAtPrecedence
.8416	ca		dex				dex
.8417	68		pla				pla 								; get operator, call the code.
.8418	20 21 84	jsr $8421			jsr 	_EXPRCaller
.841b	68		pla				pla 								; restore precedence level
.841c	80 d3		bra $83f1			bra 	_EXPRLoop 					; and go round.
.841e					_EXPRExit:
.841e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8420	60		rts				rts
.8421					_EXPRCaller:
.8421	da		phx				phx 								; save on stack, first thing is to restore it
.8422	0a		asl a				asl 	a 							; double so can use vectors into X
.8423	aa		tax				tax
.8424	7c 24 80	jmp ($8024,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.8427					DereferenceTopTwo:
.8427	e8		inx				inx
.8428	20 2c 84	jsr $842c			jsr 	Dereference 				; deref x+1
.842b	ca		dex				dex  								; falls through to deref x
.842c					Dereference:
.842c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.842f	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8431	f0 57		beq $848a			beq 	_DRFExit 					; not a reference
.8433	5a		phy				phy
.8434	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8437	85 36		sta $36				sta 	zTemp0
.8439	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.843c	85 37		sta $37				sta 	zTemp0+1
.843e	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8441	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8443	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8446	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8449	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.844b	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.844d	f0 0f		beq $845e			beq 	_DRFDereferenceTwo
.844f	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8451	f0 39		beq $848c			beq 	_DRFFull
.8453	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8456	29 03		and #$03			and 	#3
.8458	f0 32		beq $848c			beq 	_DRFFull 					; the whole word
.845a	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.845c	f0 07		beq $8465			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.845e					_DRFDereferenceTwo:
.845e	a0 01		ldy #$01			ldy 	#1
.8460	b1 36		lda ($36),y			lda 	(zTemp0),y
.8462	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8465					_DRFClear23:
.8465	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8468	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.846b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.846e	29 18		and #$18			and 	#NSBTypeMask
.8470	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8473	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8475	d0 12		bne $8489			bne 	_DRFNotString
.8477	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.847a	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.847d	d0 0a		bne $8489			bne 	_DRFNotString
.847f	a9 8b		lda #$8b			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8481	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8484	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.8486	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8489					_DRFNotString
.8489	7a		ply				ply 								; restore Y and exit
.848a					_DRFExit:
.848a	60		rts				rts
.848b					_DRFNullString:
>848b	00						.byte 	0
.848c					_DRFFull:
.848c	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.848e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8490	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8493	c8		iny				iny
.8494	b1 36		lda ($36),y			lda 	(zTemp0),y
.8496	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8499	c8		iny				iny
.849a	b1 36		lda ($36),y			lda 	(zTemp0),y
.849c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.849f	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.84a2	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.84a5	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.84a7	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.84aa	f0 06		beq $84b2			beq 	_DRFNoExponent
.84ac	c8		iny				iny 								; if not, read the exponent as well.
.84ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.84af	9d 28 06	sta $0628,x			sta 	NSExponent,x
.84b2					_DRFNoExponent:
.84b2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.84b5	10 0d		bpl $84c4			bpl 	_DRFExit2 					; if not, then exit.
.84b7	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.84b9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.84bf	09 80		ora #$80			ora 	#NSBIsNegative
.84c1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84c4					_DRFExit2:
.84c4	7a		ply				ply
.84c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.84c6					EncodeNumberStart:
.84c6	38		sec				sec
.84c7	80 01		bra $84ca			bra 	EncodeNumberContinue+1
.84c9					EncodeNumberContinue:
.84c9	18		clc				clc
.84ca	08		php				php 								; save reset.
.84cb	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.84cd	f0 0b		beq $84da			beq 	_ENIsOkay
.84cf	c9 30		cmp #$30			cmp 	#"0"
.84d1	90 04		bcc $84d7			bcc 	_ENBadNumber
.84d3	c9 3a		cmp #$3a			cmp 	#"9"+1
.84d5	90 03		bcc $84da			bcc 	_ENIsOkay
.84d7					_ENBadNumber:
.84d7	28		plp				plp 								; throw saved reset
.84d8					_ENFail:
.84d8	18		clc				clc 								; not allowed
.84d9	60		rts				rts
.84da					_ENIsOkay:
.84da	28		plp				plp 								; are we restarting
.84db	90 0c		bcc $84e9			bcc 	_ENNoRestart
.84dd					_ENStartEncode:
.84dd	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.84df	20 0e 87	jsr $870e			jsr 	NSMSetByte
.84e2	a9 01		lda #$01			lda 	#ESTA_Low
.84e4					_ENExitChange:
.84e4	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.84e7	38		sec				sec
.84e8	60		rts				rts
.84e9					_ENNoRestart:
.84e9	48		pha				pha 								; save on stack.
.84ea	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.84ed	c9 01		cmp #$01			cmp 	#ESTA_Low
.84ef	f0 05		beq $84f6			beq  	_ESTALowState
.84f1	c9 02		cmp #$02			cmp 	#ESTA_High
.84f3	f0 23		beq $8518			beq 	_ESTAHighState
>84f5	db						.byte 	$DB 						; causes a break in the emulator
.84f6					_ESTALowState:
.84f6	68		pla				pla 								; get value back
.84f7	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.84f9	f0 27		beq $8522			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.84fb	29 0f		and #$0f			and 	#15 						; make digit
.84fd	85 36		sta $36				sta 	zTemp0 						; save it.
.84ff	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8502	0a		asl a				asl 	a
.8503	0a		asl a				asl 	a
.8504	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8507	0a		asl a				asl 	a
.8508	65 36		adc $36				adc 	zTemp0
.850a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.850d	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.850f	90 05		bcc $8516			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8511	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8513	8d 05 07	sta $0705			sta 	EncodeState
.8516					_ESTANoSwitch:
.8516	38		sec				sec
.8517	60		rts				rts
.8518					_ESTAHighState:
.8518	68		pla				pla 								; get value back
.8519	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.851b	f0 05		beq $8522			beq 	_ESTASwitchFloat
.851d	20 23 85	jsr $8523			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8520	38		sec				sec
.8521	60		rts				rts
.8522					_ESTASwitchFloat:
>8522	db						.byte 	$DB 						; causes a break in the emulator
.8523					ESTAShiftDigitIntoMantissa:
.8523	29 0f		and #$0f			and 	#15 						; save digit
.8525	48		pha				pha
.8526	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8529	48		pha				pha
.852a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.852d	48		pha				pha
.852e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8531	48		pha				pha
.8532	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8535	48		pha				pha
.8536	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; x 2
.8539	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; x 4
.853c	18		clc				clc 								; pop mantissa and add
.853d	68		pla				pla
.853e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8541	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8544	68		pla				pla
.8545	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8548	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.854b	68		pla				pla
.854c	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.854f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8552	68		pla				pla
.8553	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8556	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8559	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; x 10
.855c	68		pla				pla 								; add digit
.855d	18		clc				clc
.855e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8561	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8564	90 0d		bcc $8573			bcc 	_ESTASDExit
.8566	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8569	d0 08		bne $8573			bne 	_ESTASDExit
.856b	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.856e	d0 03		bne $8573			bne 	_ESTASDExit
.8570	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8573					_ESTASDExit:
.8573	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8574					EvaluateTerm:
.8574	b1 30		lda ($30),y			lda 	(codePtr),y
.8576	30 18		bmi $8590			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8578	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.857a	b0 6e		bcs $85ea			bcs 	_ETVariable
.857c	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.857e	90 6e		bcc $85ee			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8580	c9 3a		cmp #$3a			cmp 	#'9'+1
.8582	b0 6a		bcs $85ee			bcs 	_ETPuncUnary
.8584	20 c6 84	jsr $84c6			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8587					_ETNumber:
.8587	c8		iny				iny 								; keep encoding until we have the numbers
.8588	b1 30		lda ($30),y			lda 	(codePtr),y
.858a	20 c9 84	jsr $84c9			jsr 	EncodeNumberContinue
.858d	b0 f8		bcs $8587			bcs 	_ETNumber 					; go back if accepted.
.858f	60		rts				rts
.8590					_ETCheckUnary:
.8590	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8592	f0 40		beq $85d4			beq 	_ETString
.8594	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8596	f0 11		beq $85a9			beq 	_ETHexConstant
.8598	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.859a	90 0a		bcc $85a6			bcc 	_ETSyntaxError
.859c	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1
.859e	b0 06		bcs $85a6			bcs 	_ETSyntaxError
.85a0	da		phx				phx 								; push X on the stack
.85a1	0a		asl a				asl 	a 							; put vector x 2 into X
.85a2	aa		tax				tax
.85a3	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x) 				; and do it.
.85a6					_ETSyntaxError:
.85a6	4c 0e 8e	jmp $8e0e			jmp 	SyntaxError
.85a9					_ETHexConstant:
.85a9	c8		iny				iny 								; skip #
.85aa	c8		iny				iny 								; skip count
.85ab	20 0c 87	jsr $870c			jsr 	NSMSetZero 					; clear result
.85ae					_ETHLoop:
.85ae	b1 30		lda ($30),y			lda 	(codePtr),y
.85b0	c8		iny				iny 								; and consume
.85b1	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.85b3	f0 1e		beq $85d3			beq 	_ETHExit
.85b5	48		pha				pha 								; save on stack.
.85b6	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; x 2
.85b9	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; x 4
.85bc	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; x 8
.85bf	20 21 87	jsr $8721			jsr 	NSMShiftLeft 				; x 16
.85c2	68		pla				pla 								; ASCII
.85c3	c9 41		cmp #$41			cmp 	#'A'
.85c5	90 02		bcc $85c9			bcc 	_ETHNotChar
.85c7	e9 07		sbc #$07			sbc 	#7
.85c9					_ETHNotChar:
.85c9	29 0f		and #$0f			and 	#15 						; digit now
.85cb	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.85ce	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85d1	80 db		bra $85ae			bra 	_ETHLoop 					; go round.
.85d3					_ETHExit:
.85d3	60		rts				rts
.85d4					_ETString:
.85d4	c8		iny				iny 								; look at length
.85d5	b1 30		lda ($30),y			lda 	(codePtr),y
.85d7	48		pha				pha
.85d8	c8		iny				iny 								; first character
.85d9	20 85 87	jsr $8785			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.85dc	68		pla				pla 								; restore count and save
.85dd	85 36		sta $36				sta 	zTemp0
.85df	98		tya				tya 								; add length to Y to skip it.
.85e0	18		clc				clc
.85e1	65 36		adc $36				adc 	zTemp0
.85e3	a8		tay				tay
.85e4	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.85e6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85e9	60		rts				rts
.85ea					_ETVariable:
>85ea	db						.byte 	$DB 						; causes a break in the emulator
.85eb	4c ff ff	jmp $ffff			jmp 	$FFFF
.85ee					_ETPuncUnary:
.85ee	c8		iny				iny 								; consume the unary character
.85ef	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.85f1	f0 31		beq $8624			beq 	_ETUnaryNegate
.85f3	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.85f5	f0 3d		beq $8634			beq 	_ETDereference
.85f7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.85f9	f0 58		beq $8653			beq 	_ETParenthesis
.85fb	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.85fd	f0 43		beq $8642			beq 	_ETStringReference
.85ff	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8601	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8603	f0 06		beq $860b			beq 	_ETIndirection
.8605	e6 36		inc $36				inc 	zTemp0
.8607	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8609	d0 9b		bne $85a6			bne 	_ETSyntaxError
.860b					_ETIndirection:
.860b	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.860d	1a		inc a				inc 	a
.860e	48		pha				pha
.860f	20 74 85	jsr $8574			jsr 	EvaluateTerm				; evaluate the term
.8612	20 2c 84	jsr $842c			jsr 	Dereference 				; dereference it.
.8615	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8618	d0 07		bne $8621			bne 	_ETTypeMismatch
.861a	68		pla				pla 								; indirection 1-2
.861b	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.861d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8620	60		rts				rts
.8621					_ETTypeMismatch:
.8621	4c 18 8e	jmp $8e18			jmp 	TypeError
.8624					_ETUnaryNegate:
.8624	20 74 85	jsr $8574			jsr 	EvaluateTerm				; evaluate the term
.8627	20 2c 84	jsr $842c			jsr 	Dereference 				; dereference it.
.862a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.862d	29 10		and #$10			and 	#NSTString
.862f	d0 f0		bne $8621			bne 	_ETTypeMismatch
.8631	4c b8 86	jmp $86b8			jmp 	NSMNegate  					; just toggles the sign bit.
.8634					_ETDereference:
.8634	20 74 85	jsr $8574			jsr 	EvaluateTerm				; evaluate the term
.8637	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.863a	29 20		and #$20			and 	#NSBIsReference
.863c	f0 e3		beq $8621			beq 	_ETTypeMismatch
.863e	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8641	60		rts				rts
.8642					_ETStringReference:
.8642	20 74 85	jsr $8574			jsr 	EvaluateTerm				; evaluate the term
.8645	20 2c 84	jsr $842c			jsr 	Dereference 				; dereference it.
.8648	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.864b	d0 d4		bne $8621			bne 	_ETTypeMismatch
.864d	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.864f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8652	60		rts				rts
.8653					_ETParenthesis:
.8653	20 ea 83	jsr $83ea			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8656	20 1c 8c	jsr $8c1c			jsr 	CheckRightBracket 			; check for )
.8659	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.865a					EvaluateValue:
.865a	48		pha				pha
.865b	20 e8 83	jsr $83e8			jsr		EvaluateExpressionAt0 		; expression
.865e	20 2c 84	jsr $842c			jsr 	Dereference					; derefernce it
.8661	68		pla				pla
.8662	60		rts				rts
.8663					EvaluateNumber:
.8663	20 5a 86	jsr $865a			jsr 	EvaluateValue 				; get a value
.8666	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8669	29 10		and #$10			and 	#NSBIsString
.866b	d0 16		bne $8683			bne 	HelperTypeError
.866d	60		rts				rts
.866e					EvaluateString:
.866e	20 5a 86	jsr $865a			jsr 	EvaluateValue 				; get a value
.8671	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8674	29 10		and #$10			and 	#NSBIsString
.8676	f0 0b		beq $8683			beq 	HelperTypeError
.8678					CopyAddressToTemp0:
.8678	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.867b	85 36		sta $36				sta 	zTemp0
.867d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8680	85 37		sta $37				sta 	zTemp0+1
.8682	60		rts				rts
.8683					HelperTypeError:
.8683	4c 18 8e	jmp $8e18			jmp 	TypeError
.8686					EvaluateInteger:
.8686	20 63 86	jsr $8663			jsr 	EvaluateNumber
.8689	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.868c	d0 0a		bne $8698			bne 	HelperValueError 			; if not, it's a float.
.868e	60		rts				rts
.868f					EvaluateUnsignedInteger:
.868f	20 86 86	jsr $8686			jsr 	EvaluateInteger 			; check integer is +ve
.8692	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8695	30 01		bmi $8698			bmi 	HelperValueError
.8697	60		rts				rts
.8698					HelperValueError:
.8698	4c 1d 8e	jmp $8e1d			jmp 	ArgumentError
.869b					Evaluate16BitInteger:
.869b	20 8f 86	jsr $868f			jsr	 	EvaluateUnsignedInteger		; get integer
.869e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.86a1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.86a4	d0 f2		bne $8698			bne 	HelperValueError
.86a6	60		rts				rts
.86a7					Evaluate8BitInteger:
.86a7	20 8f 86	jsr $868f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.86aa	d0 ec		bne $8698			bne 	HelperValueError
.86ac	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.86af	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.86b2	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.86b5	d0 e1		bne $8698			bne 	HelperValueError
.86b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.86b8					NSMNegate:
.86b8	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86bb	49 80		eor #$80			eor 	#NSBIsNegative
.86bd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86c0	60		rts				rts
.86c1					NSMNegateMantissa:
.86c1	38		sec				sec
.86c2	a9 00		lda #$00			lda 	#0
.86c4	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.86c7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86ca	a9 00		lda #$00			lda 	#0
.86cc	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.86cf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86d2	a9 00		lda #$00			lda 	#0
.86d4	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.86d7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86da	a9 00		lda #$00			lda 	#0
.86dc	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.86df	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.86e2	60		rts				rts
.86e3					NSMShiftUpTwo:
.86e3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.86e6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.86e9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86ec	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.86ef	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.86f2	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.86f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86f8	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.86fb	bd 28 06	lda $0628,x			lda 	NSExponent,x
.86fe	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8701	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8704	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8707	60		rts				rts
.8708					NSMSetZeroMantissaOnly:
.8708	a9 00		lda #$00			lda 	#0
.870a	80 08		bra $8714			bra 	NSMSetMantissa
.870c					NSMSetZero:
.870c	a9 00		lda #$00			lda 	#0
.870e					NSMSetByte:
.870e	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8711	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8714					NSMSetMantissa:
.8714	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8717	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.871a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.871d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8720	60		rts				rts
.8721					NSMShiftLeft:
.8721	18		clc				clc
.8722					NSMRotateLeft:
.8722	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8725	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8728	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.872b	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.872e	60		rts				rts
.872f					NSMShiftRight:
.872f	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8732	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8735	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8738	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.873b	60		rts				rts
.873c					NSMIsZero:
.873c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.873f	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8742	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8745	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8748	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8e0e					SyntaxError:
.8e0e	a9 02		lda #$02		lda	#2
.8e10	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8e13					RangeError:
.8e13	a9 04		lda #$04		lda	#4
.8e15	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8e18					TypeError:
.8e18	a9 05		lda #$05		lda	#5
.8e1a	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8e1d					ArgumentError:
.8e1d	a9 07		lda #$07		lda	#7
.8e1f	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8e22					NotDoneError:
.8e22	a9 0c		lda #$0c		lda	#12
.8e24	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8e27					ErrorText:
>8e27	42 72 65 61 6b 00			.text	"Break",0
>8e2d	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8e35	72 72 6f 72 00
>8e3a	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8e42	20 62 79 20 7a 65 72 6f 00
>8e4b	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8e53	61 6e 67 65 00
>8e58	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8e60	6d 61 74 63 68 00
>8e66	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8e6e	65 6d 6f 72 79 00
>8e74	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8e7c	61 72 67 75 6d 65 6e 74 00
>8e85	53 74 6f 70 00				.text	"Stop",0
>8e8a	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8e92	6f 6f 20 6c 6f 6e 67 00
>8e9a	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8ea2	6e 20 66 61 69 6c 65 64 00
>8eab	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8eb3	61 74 61 00
>8eb7	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8ebf	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.8749					MemoryNew:
.8749	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.874b	85 30		sta $30				sta 	codePtr
.874d	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.874f	85 31		sta $31				sta 	codePtr+1
.8751	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8753	92 30		sta ($30)			sta 	(codePtr)
.8755	60		rts				rts
.8756					MemoryAppend:
.8756	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8758	85 30		sta $30				sta 	codePtr
.875a	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.875c	85 31		sta $31				sta 	codePtr+1
.875e					_MAFindEnd:
.875e	b2 30		lda ($30)			lda 	(codePtr)
.8760	f0 0d		beq $876f			beq 	_MAFoundEnd
.8762	18		clc				clc
.8763	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8765	65 30		adc $30				adc 	codePtr
.8767	85 30		sta $30				sta 	codePtr
.8769	90 02		bcc $876d			bcc 	_CREExit
.876b	e6 31		inc $31				inc 	codePtr+1
.876d					_CREExit:
.876d	80 ef		bra $875e			bra 	_MAFindEnd
.876f					_MAFoundEnd:
.876f	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8772	c0 04		cpy #$04			cpy 	#4 							; blank line
.8774	f0 0e		beq $8784			beq 	_MANoLine
.8776	a9 00		lda #$00			lda 	#0 							; end of program
.8778	91 30		sta ($30),y			sta 	(codePtr),y
.877a					_MACopy:
.877a	88		dey				dey
.877b	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.877e	91 30		sta ($30),y			sta 	(codePtr),y
.8780	c0 00		cpy #$00			cpy 	#0
.8782	d0 f6		bne $877a			bne 	_MACopy
.8784					_MANoLine:
.8784	60		rts				rts
.8785					MemoryInline:
.8785	98		tya				tya 								; put address into stack,x
.8786	18		clc				clc
.8787	65 30		adc $30				adc 	codePtr
.8789	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.878c	a5 31		lda $31				lda 	codePtr+1
.878e	69 00		adc #$00			adc 	#0
.8790	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8793	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8796	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8799	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.879a					VariableOpen:
.879a	60		rts				rts
.879b					VariableClose:
.879b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.879c					BackloadProgram:
.879c	a2 ff		ldx #$ff			ldx 	#$FF
.879e	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.87a1	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.87a4	30 1e		bmi $87c4			bmi 	_BPExit
.87a6					_BPCopy:
.87a6	e8		inx				inx  								; copy byte in
.87a7	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.87aa	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.87ad	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.87b0	30 0a		bmi $87bc			bmi 	_BPEndLine 					; -ve = EOL
.87b2	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.87b4	d0 02		bne $87b8			bne 	_BPNotTab
.87b6	a9 20		lda #$20			lda 	#' '
.87b8					_BPNotTab:
.87b8	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.87ba	b0 ea		bcs $87a6			bcs 	_BPCopy
.87bc					_BPEndLine:
.87bc	20 97 89	jsr $8997			jsr 	TokeniseLine 				; tokenise the line.
.87bf	20 56 87	jsr $8756			jsr 	MemoryAppend 				; append to current program
.87c2	80 d8		bra $879c			bra 	BackloadProgram
.87c4					_BPExit:
.87c4	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.87c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.87c8					TokeniseSearchTable:
.87c8	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.87ca	85 36		sta $36				sta 	zTemp0
.87cc	a0 00		ldy #$00			ldy 	#0
.87ce	a9 80		lda #$80			lda 	#$80 						; token #
.87d0	85 38		sta $38				sta 	zTemp1
.87d2					_TSTLoop:
.87d2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.87d4	30 49		bmi $881f			bmi 	_TSTFail 					; -ve = end of table
.87d6	f0 2e		beq $8806			beq 	_TSTNext 					; zero, check next it's a dummy
.87d8	c8		iny				iny 								; get the hash
.87d9	b1 36		lda ($36),y			lda 	(zTemp0),y
.87db	88		dey				dey
.87dc	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.87df	d0 25		bne $8806			bne 	_TSTNext
.87e1	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.87e4	38		sec				sec
.87e5	ed 00 07	sbc $0700			sbc 	identStart
.87e8	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.87ea	d0 1a		bne $8806			bne 	_TSTNext
.87ec	5a		phy				phy 								; save Y , we might fail
.87ed	c8		iny				iny 								; point to text
.87ee	c8		iny				iny
.87ef	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.87f2					_TSTCompareName:
.87f2	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.87f5	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.87f7	d0 0c		bne $8805			bne 	_TSTNextPullY 				; fail, pullY and do next
.87f9	e8		inx				inx
.87fa	c8		iny				iny
.87fb	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.87fe	d0 f2		bne $87f2			bne 	_TSTCompareName
.8800	7a		ply				ply 								; throw Y
.8801	a5 38		lda $38				lda 	zTemp1 						; get token #
.8803	38		sec				sec 								; return with CS = passed.
.8804	60		rts				rts
.8805					_TSTNextPullY:
.8805	7a		ply				ply 								; restore current, fall through.
.8806					_TSTNext:
.8806	e6 38		inc $38				inc 	zTemp1 						; token counter
.8808	98		tya				tya
.8809	18		clc				clc
.880a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.880c	1a		inc a				inc 	a 							; +1
.880d	1a		inc a				inc 	a 							; +2
.880e	a8		tay				tay
.880f	10 c1		bpl $87d2			bpl 	_TSTLoop 					; if Y < $80 loop back
.8811	98		tya				tya 								; add Y to zTemp0 and reset Y
.8812	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8814	18		clc				clc  								; but have tables > 255 bytes
.8815	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8817	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8819	90 b7		bcc $87d2			bcc 	_TSTLoop
.881b	e6 37		inc $37				inc 	zTemp0+1
.881d	80 b3		bra $87d2			bra 	_TSTLoop
.881f					_TSTFail:
.881f	18		clc				clc
.8820	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.8821					KeywordSet0:
>8821	00 65					.text	0,$65,""               ; $80 !0:EOF
>8823	00 58					.text	0,$58,""               ; $81 !1:SH1
>8825	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8827	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>882d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8835	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>883b	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8842	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>8848	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>884f	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $89 GETDATE$(
>8857	45 24 28
>885a	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8a GETTIME$(
>8862	45 24 28
>8865	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8b HEX$(
>886c	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>8872	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>887a	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8e LEFT$(
>8882	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8f LEN(
>8888	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $90 MID$(
>888f	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $91 NOT
>8894	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $92 PAGE
>889a	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>88a2	28
>88a3	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>88a9	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>88af	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>88b5	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>88bc	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $98 TRUE
>88c2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $99 VAL(
>88c8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9a FOR
>88cd	02 8f 49 46				.text	2,$8f,"IF"             ; $9b IF
>88d1	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9c PROC
>88d7	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9d REPEAT
>88df	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9e WHILE
>88e6	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9f ENDIF
>88ed	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a0 ENDPROC
>88f5	43
>88f6	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a1 NEXT
>88fc	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a2 UNTIL
>8903	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a3 WEND
>8909	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a4 CALL
>890f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a5 CLS
>8914	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a6 DATA
>891a	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a7 DIM
>891f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>8926	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>892c	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>8931	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>8938	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>893e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>8943	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>894b	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $af THEN
>8951	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>8955	ff					.text	$FF
.8956					KeywordSet1:
>8956	00 65					.text	0,$65,""               ; $80 !0:EOF
>8958	00 58					.text	0,$58,""               ; $81 !1:SH1
>895a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>895c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8964	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>896b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8970	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8976	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>897b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8983	45
>8984	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8989	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>898f	ff					.text	$FF
.8990					KeywordSet2:
>8990	00 65					.text	0,$65,""               ; $80 !0:EOF
>8992	00 58					.text	0,$58,""               ; $81 !1:SH1
>8994	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8996	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8997					TokeniseLine:
.8997	20 1f 8b	jsr $8b1f			jsr 	FixLineBufferCase 			; fix line case
.899a	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.899c	8d 06 07	sta $0706			sta 	tokenOffset
.899f	9c 07 07	stz $0707			stz 	tokenLineNumber
.89a2	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.89a5	a2 ff		ldx #$ff			ldx 	#$FF
.89a7					_TKFindFirst:
.89a7	e8		inx				inx
.89a8	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.89ab	f0 79		beq $8a26			beq 	_TKExit
.89ad	c9 20		cmp #$20			cmp 	#' '
.89af	90 f6		bcc $89a7			bcc 	_TKFindFirst
.89b1	c9 30		cmp #$30			cmp 	#'0'
.89b3	90 07		bcc $89bc			bcc 	_TKNoLineNumber
.89b5	c9 3a		cmp #$3a			cmp 	#'9'+1
.89b7	b0 03		bcs $89bc			bcs 	_TKNoLineNumber
.89b9	20 49 8b	jsr $8b49			jsr 	TokeniseExtractLineNumber
.89bc					_TKNoLineNumber:
.89bc					_TKTokeniseLoop:
.89bc	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.89bf	f0 65		beq $8a26			beq 	_TKExit
.89c1	e8		inx				inx
.89c2	c9 20		cmp #$20			cmp 	#' '
.89c4	f0 f6		beq $89bc			beq 	_TKTokeniseLoop 			; keep looping if space found.
.89c6	ca		dex				dex 								; undo last get, A contains character, X is position.
.89c7	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.89c9	f0 61		beq $8a2c			beq 	_TKTokeniseIdentifier
.89cb	c9 41		cmp #$41			cmp 	#'A'
.89cd	90 04		bcc $89d3			bcc 	_TKTokenisePunctuation
.89cf	c9 5b		cmp #$5b			cmp 	#'Z'+1
.89d1	90 59		bcc $8a2c			bcc 	_TKTokeniseIdentifier
.89d3					_TKTokenisePunctuation:
.89d3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.89d5	f0 27		beq $89fe			beq 	_TKString
.89d7	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.89d9	f0 28		beq $8a03			beq 	_TKHexConstant
.89db	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.89dd	f0 29		beq $8a08			beq 	_TKCheckDouble
.89df	c9 3e		cmp #$3e			cmp 	#'>'
.89e1	f0 25		beq $8a08			beq 	_TKCheckDouble
.89e3					_TKStandardPunctuation:
.89e3	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.89e6	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.89e8	90 0e		bcc $89f8			bcc 	_TKNoShift
.89ea	48		pha				pha 								; save
.89eb	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.89ed	85 36		sta $36				sta 	zTemp0
.89ef	68		pla				pla
.89f0	29 20		and #$20			and 	#32 						; bit 5
.89f2	4a		lsr a				lsr 	a 							; shift into bit 3
.89f3	4a		lsr a				lsr 	a
.89f4	05 36		ora $36				ora 	zTemp0
.89f6	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.89f8					_TKNoShift:
.89f8	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte 			; write the punctuation character
.89fb	e8		inx				inx 								; consume the character
.89fc	80 be		bra $89bc			bra 	_TKTokeniseLoop 			; and loop round again.
.89fe					_TKString:
.89fe	20 ae 8a	jsr $8aae			jsr 	TokeniseString
.8a01	80 b9		bra $89bc			bra 	_TKTokeniseLoop
.8a03					_TKHexConstant:
.8a03	20 e9 8a	jsr $8ae9			jsr 	TokeniseHexConstant
.8a06	80 b4		bra $89bc			bra 	_TKTokeniseLoop
.8a08					_TKCheckDouble:
.8a08	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.8a0b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8a0d	90 d4		bcc $89e3			bcc 	_TKStandardPunctuation
.8a0f	c9 3f		cmp #$3f			cmp 	#'>'+1
.8a11	b0 d0		bcs $89e3			bcs 	_TKStandardPunctuation
.8a13	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8a16	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8a18	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8a19	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8a1c	38		sec				sec
.8a1d	e9 3c		sbc #$3c			sbc 	#'<'
.8a1f	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8a22	e8		inx				inx 								; consume both
.8a23	e8		inx				inx
.8a24	80 96		bra $89bc			bra 	_TKTokeniseLoop
.8a26	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8a28	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8a2b	60		rts				rts
.8a2c					_TKTokeniseIdentifier:
.8a2c	8e 00 07	stx $0700			stx 	identStart 					; save start
.8a2f	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8a32					_TKCheckLoop:
.8a32	e8		inx				inx 								; look at next, we know first is identifier.
.8a33	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.8a36	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8a38	f0 f8		beq $8a32			beq 	_TKCheckLoop
.8a3a	c9 30		cmp #$30			cmp	 	#"0"
.8a3c	90 0c		bcc $8a4a			bcc 	_TKEndIdentifier
.8a3e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a40	90 f0		bcc $8a32			bcc 	_TKCheckLoop
.8a42	c9 41		cmp #$41			cmp	 	#"A"
.8a44	90 04		bcc $8a4a			bcc 	_TKEndIdentifier
.8a46	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8a48	90 e8		bcc $8a32			bcc 	_TKCheckLoop
.8a4a					_TKEndIdentifier:
.8a4a	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8a4d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8a4f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8a51	f0 06		beq $8a59			beq 	_TKHasTypeCharacter
.8a53	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8a55	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8a57	d0 07		bne $8a60			bne 	_TKNoTypeCharacter
.8a59					_TKHasTypeCharacter:
.8a59	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8a5c	e8		inx				inx 								; read next
.8a5d	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a60					_TKNoTypeCharacter:
.8a60	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8a62	d0 09		bne $8a6d			bne 	_TKNoArray
.8a64	e8		inx				inx 								; skip the (
.8a65	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8a68	09 04		ora #$04			ora 	#$04
.8a6a	8d 04 07	sta $0704			sta 	identTypeByte
.8a6d					_TKNoArray:
.8a6d	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8a70	20 0a 8b	jsr $8b0a			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8a73	a0 88		ldy #$88			ldy 	#(KeywordSet0) >> 8
.8a75	a9 21		lda #$21			lda 	#(KeywordSet0) & $FF
.8a77	20 c8 87	jsr $87c8			jsr 	TokeniseSearchTable
.8a7a	a2 00		ldx #$00			ldx 	#0
.8a7c	b0 1f		bcs $8a9d			bcs 	_TKFoundToken
.8a7e	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a80	a9 56		lda #$56			lda 	#(KeywordSet1) & $FF
.8a82	20 c8 87	jsr $87c8			jsr 	TokeniseSearchTable
.8a85	a2 81		ldx #$81			ldx 	#$81
.8a87	b0 14		bcs $8a9d			bcs 	_TKFoundToken
.8a89	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8a8b	a9 56		lda #$56			lda 	#(KeywordSet1) & $FF
.8a8d	20 c8 87	jsr $87c8			jsr 	TokeniseSearchTable
.8a90	a2 82		ldx #$82			ldx 	#$82
.8a92	b0 09		bcs $8a9d			bcs 	_TKFoundToken
.8a94	20 9a 8b	jsr $8b9a			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8a97	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a9a	4c bc 89	jmp $89bc			jmp 	_TKTokeniseLoop 			; and go round again.
.8a9d					_TKFoundToken:
.8a9d	48		pha				pha 								; save token
.8a9e	8a		txa				txa 								; shift in X, is there one ?
.8a9f	f0 03		beq $8aa4			beq 	_TKNoTShift
.8aa1	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte 			; if so, write it out
.8aa4					_TKNoTShift:
.8aa4	68		pla				pla 								; restore and write token
.8aa5	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8aa8	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8aab	4c bc 89	jmp $89bc			jmp 	_TKTokeniseLoop 			; and go round again.
.8aae					TokeniseString:
.8aae	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8ab0	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8ab3	e8		inx				inx									; start of quoted string.
.8ab4	da		phx				phx 								; push start of string on top
.8ab5	ca		dex				dex
.8ab6					_TSFindEnd:
.8ab6	e8		inx				inx
.8ab7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8aba	f0 04		beq $8ac0			beq 	_TSEndOfString
.8abc	c9 22		cmp #$22			cmp 	#'"'
.8abe	d0 f6		bne $8ab6			bne 	_TSFindEnd
.8ac0					_TSEndOfString:
.8ac0	7a		ply				ply  								; so now Y is first character, X is character after end.
.8ac1	48		pha				pha 								; save terminating character
.8ac2	20 ca 8a	jsr $8aca			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8ac5	68		pla				pla 								; terminating character
.8ac6	f0 01		beq $8ac9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8ac8	e8		inx				inx
.8ac9					_TSNotQuote:
.8ac9	60		rts				rts
.8aca					TOWriteBlockXY:
.8aca	86 36		stx $36				stx 	zTemp0 						; write end character
.8acc	98		tya				tya
.8acd	49 ff		eor #$ff			eor 	#$FF
.8acf	38		sec				sec
.8ad0	65 36		adc $36				adc 	zTemp0
.8ad2	1a		inc a				inc 	a 							; one extra for NULL
.8ad3	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8ad6					_TOBlockLoop:
.8ad6	c4 36		cpy $36				cpy 	zTemp0
.8ad8	f0 09		beq $8ae3			beq 	_TOBlockExit
.8ada	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8add	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8ae0	c8		iny				iny
.8ae1	80 f3		bra $8ad6			bra 	_TOBlockLoop
.8ae3					_TOBlockExit:
.8ae3	a9 00		lda #$00			lda 	#0
.8ae5	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8ae8	60		rts				rts
.8ae9					TokeniseHexConstant:
.8ae9	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8aeb	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8aee	e8		inx				inx									; start of quoted string.
.8aef	da		phx				phx 								; push start of constant on top
.8af0	ca		dex				dex
.8af1					_THFindLoop:
.8af1	e8		inx				inx
.8af2	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8af5	c9 30		cmp #$30			cmp 	#"0"
.8af7	90 0c		bcc $8b05			bcc 	_THFoundEnd
.8af9	c9 3a		cmp #$3a			cmp 	#"9"+1
.8afb	90 f4		bcc $8af1			bcc 	_THFindLoop
.8afd	c9 41		cmp #$41			cmp 	#"A"
.8aff	90 04		bcc $8b05			bcc 	_THFoundEnd
.8b01	c9 47		cmp #$47			cmp 	#"F"+1
.8b03	90 ec		bcc $8af1			bcc 	_THFindLoop
.8b05					_THFoundEnd:
.8b05	7a		ply				ply 								; restore start
.8b06	20 ca 8a	jsr $8aca			jsr 	TOWriteBlockXY 				; output the block
.8b09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8b0a					TokeniseCalculateHash:
.8b0a	da		phx				phx
.8b0b	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8b0e	a9 00		lda #$00			lda 	#0
.8b10					_TCHLoop:
.8b10	18		clc				clc
.8b11	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8b14	e8		inx				inx
.8b15	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8b18	d0 f6		bne $8b10			bne 	_TCHLoop
.8b1a	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8b1d	fa		plx				plx
.8b1e	60		rts				rts
.8b1f					FixLineBufferCase:
.8b1f	a2 00		ldx #$00			ldx 	#0
.8b21					_FLBCLoop:
.8b21	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8b24	f0 22		beq $8b48			beq 	_FLBCExit 					; end of string.
.8b26	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8b28	f0 11		beq $8b3b			beq 	_FLBCInQuotes
.8b2a	e8		inx				inx
.8b2b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8b2d	90 f2		bcc $8b21			bcc 	_FLBCLoop
.8b2f	c9 7b		cmp #$7b			cmp 	#'z'+1
.8b31	b0 ee		bcs $8b21			bcs 	_FLBCLoop
.8b33	38		sec				sec 								; make U/C
.8b34	e9 20		sbc #$20			sbc 	#32
.8b36	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8b39	80 e6		bra $8b21			bra 	_FLBCLoop
.8b3b					_FLBCInQuotes:
.8b3b	e8		inx				inx 								; advance
.8b3c	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8b3f	f0 07		beq $8b48			beq 	_FLBCExit 					; exit on EOS
.8b41	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8b43	d0 f6		bne $8b3b			bne 	_FLBCInQuotes
.8b45	e8		inx				inx 								; skip over it
.8b46	80 d9		bra $8b21			bra 	_FLBCLoop
.8b48					_FLBCExit:
.8b48	60		rts				rts
.8b49					TokeniseExtractLineNumber:
.8b49	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8b4c	48		pha				pha
.8b4d	ad 07 07	lda $0707			lda 	tokenLineNumber
.8b50	48		pha				pha
.8b51	20 87 8b	jsr $8b87			jsr 	_TELNTimes2 				; line # x 4
.8b54	20 87 8b	jsr $8b87			jsr 	_TELNTimes2 				; line # x 2
.8b57	18		clc				clc 								; add stacked value
.8b58	68		pla				pla
.8b59	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b5c	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b5f	68		pla				pla
.8b60	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8b63	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8b66	20 87 8b	jsr $8b87			jsr 	_TELNTimes2 				; line # x 10
.8b69	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8b6c	e8		inx				inx
.8b6d	29 0f		and #$0f			and 	#15 						; add to line #
.8b6f	18		clc				clc
.8b70	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b73	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b76	90 03		bcc $8b7b			bcc 	_TLENNoCarry
.8b78	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8b7b					_TLENNoCarry:
.8b7b	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8b7e	c9 30		cmp #$30			cmp 	#'0'
.8b80	90 04		bcc $8b86			bcc 	_TLENExit
.8b82	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b84	90 c3		bcc $8b49			bcc 	TokeniseExtractLineNumber
.8b86					_TLENExit:
.8b86	60		rts				rts
.8b87					_TELNTimes2:
.8b87	0e 07 07	asl $0707			asl 	tokenLineNumber
.8b8a	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8b8d	60		rts				rts
.8b8e					TokeniseWriteByte:
.8b8e	da		phx				phx
.8b8f	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8b92	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8b95	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8b98	fa		plx				plx
.8b99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8b9a					CheckCreateVariableRecord:
.8b9a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b9c	85 36		sta $36				sta 	0+zTemp0
.8b9e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ba0	85 37		sta $37				sta 	1+zTemp0
.8ba2	20 9a 87	jsr $879a			jsr 	VariableOpen 				; make variable space available
.8ba5					_CCVSearch:
.8ba5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8ba7	f0 2c		beq $8bd5			beq 	_CCVFail
.8ba9	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8bab	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8bad	cd 03 07	cmp $0703			cmp 	identHash
.8bb0	d0 16		bne $8bc8			bne 	_CCVNext
.8bb2	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8bb4	ae 00 07	ldx $0700			ldx 	identStart
.8bb7					_CCVCompare:
.8bb7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8bba	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8bbc	e8		inx				inx 								; advance pointers
.8bbd	c8		iny				iny
.8bbe	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8bbf	d0 07		bne $8bc8			bne 	_CCVNext  					; didn't match go to next.
.8bc1	90 f4		bcc $8bb7			bcc 	_CCVCompare 				; not finished yet.
.8bc3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8bc6	f0 41		beq $8c09			beq 	_CCVFound 					; yes, we were successful
.8bc8					_CCVNext:
.8bc8	18		clc				clc
.8bc9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8bcb	65 36		adc $36				adc 	zTemp0
.8bcd	85 36		sta $36				sta 	zTemp0
.8bcf	90 d4		bcc $8ba5			bcc 	_CCVSearch
.8bd1	e6 37		inc $37				inc 	zTemp0+1
.8bd3	80 d0		bra $8ba5			bra 	_CCVSearch
.8bd5					_CCVFail:
.8bd5	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8bd7	ad 03 07	lda $0703			lda 	identHash
.8bda	91 36		sta ($36),y			sta 	(zTemp0),y
.8bdc	c8		iny				iny 								; offset 2 is the type byte
.8bdd	ad 04 07	lda $0704			lda 	identTypeByte
.8be0	91 36		sta ($36),y			sta 	(zTemp0),y
.8be2	c8		iny				iny
.8be3					_CCVData:
.8be3	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8be5	91 36		sta ($36),y			sta 	(zTemp0),y
.8be7	c8		iny				iny
.8be8	c0 08		cpy #$08			cpy 	#8
.8bea	90 f7		bcc $8be3			bcc 	_CCVData
.8bec	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8bef					_CCVCopyName:
.8bef	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8bf2	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf4	e8		inx				inx
.8bf5	c8		iny				iny
.8bf6	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8bf9	d0 f4		bne $8bef			bne 	_CCVCopyName
.8bfb	98		tya				tya 								; patch offset
.8bfc	92 36		sta ($36)			sta 	(zTemp0)
.8bfe	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8c00	91 36		sta ($36),y			sta 	(zTemp0),y
.8c02	88		dey				dey
.8c03	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8c05	09 80		ora #$80			ora 	#$80
.8c07	91 36		sta ($36),y			sta 	(zTemp0),y
.8c09					_CCVFound:
.8c09	20 9b 87	jsr $879b			jsr 	VariableClose 				; map out variables, perhaps.
.8c0c	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8c0e	38		sec				sec
.8c0f	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8c11	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8c13	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8c16	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8c18	20 8e 8b	jsr $8b8e			jsr 	TokeniseWriteByte
.8c1b	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
