
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -q -o basic.rom _basic.asm
; Wed Sep 21 12:50:35 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_GETDATEDOLLARLPAREN              = $88; $88 GETDATE$(
=$89					KWD_GETTIMEDOLLARLPAREN              = $89; $89 GETTIME$(
=$8a					KWD_HEXDOLLARLPAREN                  = $8a; $8a HEX$(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_LEFTDOLLARLPAREN                 = $8d; $8d LEFT$(
=$8e					KWD_LENLPAREN                        = $8e; $8e LEN(
=$8f					KWD_MIDDOLLARLPAREN                  = $8f; $8f MID$(
=$90					KWD_NOT                              = $90; $90 NOT
=$91					KWD_PAGE                             = $91; $91 PAGE
=$92					KWD_RIGHTDOLLARLPAREN                = $92; $92 RIGHT$(
=$93					KWD_RNDLPAREN                        = $93; $93 RND(
=$94					KWD_SGNLPAREN                        = $94; $94 SGN(
=$95					KWD_SPCLPAREN                        = $95; $95 SPC(
=$96					KWD_STRDOLLARLPAREN                  = $96; $96 STR$(
=$97					KWD_VALLPAREN                        = $97; $97 VAL(
=$98					KWD_FOR                              = $98; $98 FOR
=$99					KWD_IF                               = $99; $99 IF
=$9a					KWD_PROC                             = $9a; $9a PROC
=$9b					KWD_REPEAT                           = $9b; $9b REPEAT
=$9c					KWD_WHILE                            = $9c; $9c WHILE
=$9d					KWD_ENDIF                            = $9d; $9d ENDIF
=$9e					KWD_ENDPROC                          = $9e; $9e ENDPROC
=$9f					KWD_NEXT                             = $9f; $9f NEXT
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$98					KWC_FIRST_STRUCTURE = $98
=$9d					KWC_FIRST_STRUCTURE_DEC = $9d
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$97					KWC_LAST_UNARY = $97

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 2b 81	jsr $812b			jsr 	NewCommand 					; erase current program
.8016	20 0c 86	jsr $860c			jsr 	BackloadProgram
.8019	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.801b	85 30		sta $30				sta 	0+codePtr
.801d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.801f	85 31		sta $31				sta 	1+codePtr
.8021	a0 04		ldy #$04			ldy 	#4
.8023	a2 01		ldx #$01			ldx 	#1
.8025	20 15 83	jsr $8315			jsr 	EvaluateExpression
.8028					WarmStart:
>8028	db						.byte 	$DB 						; causes a break in the emulator
.8029	80 fd		bra $8028			bra 	WarmStart
.802b					ErrorHandler:
>802b	db						.byte 	$DB 						; causes a break in the emulator
.802c	4c 2b 80	jmp $802b			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.802f					VectorSetPunc:
>802f	35 81					.word	ShiftLeft                        ; $00 <<
>8031	73 8a					.word	SyntaxError                      ; $01 <=
>8033	73 8a					.word	SyntaxError                      ; $02 <>
>8035	73 8a					.word	SyntaxError                      ; $03 !!3
>8037	73 8a					.word	SyntaxError                      ; $04 ><
>8039	73 8a					.word	SyntaxError                      ; $05 >=
>803b	38 81					.word	ShiftRight                       ; $06 >>
>803d	73 8a					.word	SyntaxError                      ; $07 !!7
>803f	73 8a					.word	SyntaxError                      ; $08 !!8
>8041	73 8a					.word	SyntaxError                      ; $09 !!9
>8043	73 8a					.word	SyntaxError                      ; $0a !!10
>8045	73 8a					.word	SyntaxError                      ; $0b !!11
>8047	73 8a					.word	SyntaxError                      ; $0c !!12
>8049	73 8a					.word	SyntaxError                      ; $0d !!13
>804b	73 8a					.word	SyntaxError                      ; $0e !!14
>804d	73 8a					.word	SyntaxError                      ; $0f !!15
>804f	73 8a					.word	SyntaxError                      ; $10 @
>8051	73 8a					.word	SyntaxError                      ; $11 !!17
>8053	73 8a					.word	SyntaxError                      ; $12 !!18
>8055	73 8a					.word	SyntaxError                      ; $13 [
>8057	73 8a					.word	SyntaxError                      ; $14 \
>8059	73 8a					.word	SyntaxError                      ; $15 ]
>805b	91 82					.word	EorInteger                       ; $16 ^
>805d	73 8a					.word	SyntaxError                      ; $17 _
>805f	73 8a					.word	SyntaxError                      ; $18 `
>8061	73 8a					.word	SyntaxError                      ; $19 !!25
>8063	73 8a					.word	SyntaxError                      ; $1a !!26
>8065	73 8a					.word	SyntaxError                      ; $1b {
>8067	4f 82					.word	OraInteger                       ; $1c |
>8069	73 8a					.word	SyntaxError                      ; $1d }
>806b	73 8a					.word	SyntaxError                      ; $1e ~
>806d	73 8a					.word	SyntaxError                      ; $1f [7m<7F>[m
>806f	73 8a					.word	SyntaxError                      ; $20
>8071	73 8a					.word	SyntaxError                      ; $21 !
>8073	73 8a					.word	SyntaxError                      ; $22 "
>8075	73 8a					.word	SyntaxError                      ; $23 #
>8077	73 8a					.word	SyntaxError                      ; $24 $
>8079	73 8a					.word	SyntaxError                      ; $25 %
>807b	0d 82					.word	AndInteger                       ; $26 &
>807d	73 8a					.word	SyntaxError                      ; $27 '
>807f	73 8a					.word	SyntaxError                      ; $28 (
>8081	73 8a					.word	SyntaxError                      ; $29 )
>8083	73 8a					.word	SyntaxError                      ; $2a *
>8085	7f 81					.word	AddInteger                       ; $2b +
>8087	73 8a					.word	SyntaxError                      ; $2c ,
>8089	c6 81					.word	SubInteger                       ; $2d -
>808b	73 8a					.word	SyntaxError                      ; $2e .
>808d	73 8a					.word	SyntaxError                      ; $2f /
>808f	73 8a					.word	SyntaxError                      ; $30 0
>8091	73 8a					.word	SyntaxError                      ; $31 1
>8093	73 8a					.word	SyntaxError                      ; $32 2
>8095	73 8a					.word	SyntaxError                      ; $33 3
>8097	73 8a					.word	SyntaxError                      ; $34 4
>8099	73 8a					.word	SyntaxError                      ; $35 5
>809b	73 8a					.word	SyntaxError                      ; $36 6
>809d	73 8a					.word	SyntaxError                      ; $37 7
>809f	73 8a					.word	SyntaxError                      ; $38 8
>80a1	73 8a					.word	SyntaxError                      ; $39 9
>80a3	73 8a					.word	SyntaxError                      ; $3a :
>80a5	73 8a					.word	SyntaxError                      ; $3b ;
>80a7	73 8a					.word	SyntaxError                      ; $3c <
>80a9	73 8a					.word	SyntaxError                      ; $3d =
>80ab	73 8a					.word	SyntaxError                      ; $3e >
>80ad	73 8a					.word	SyntaxError                      ; $3f ?
.80af					VectorSet0:
>80af	73 8a					.word	SyntaxError                      ; $80 !0:EOF
>80b1	73 8a					.word	SyntaxError                      ; $81 !1:SH1
>80b3	73 8a					.word	SyntaxError                      ; $82 !2:SH2
>80b5	73 8a					.word	SyntaxError                      ; $83 ABS(
>80b7	73 8a					.word	SyntaxError                      ; $84 ALLOC(
>80b9	73 8a					.word	SyntaxError                      ; $85 ASC(
>80bb	73 8a					.word	SyntaxError                      ; $86 CHR$(
>80bd	73 8a					.word	SyntaxError                      ; $87 DEC(
>80bf	73 8a					.word	SyntaxError                      ; $88 GETDATE$(
>80c1	73 8a					.word	SyntaxError                      ; $89 GETTIME$(
>80c3	73 8a					.word	SyntaxError                      ; $8a HEX$(
>80c5	73 8a					.word	SyntaxError                      ; $8b INT(
>80c7	73 8a					.word	SyntaxError                      ; $8c ISVAL(
>80c9	73 8a					.word	SyntaxError                      ; $8d LEFT$(
>80cb	73 8a					.word	SyntaxError                      ; $8e LEN(
>80cd	73 8a					.word	SyntaxError                      ; $8f MID$(
>80cf	73 8a					.word	SyntaxError                      ; $90 NOT
>80d1	73 8a					.word	SyntaxError                      ; $91 PAGE
>80d3	73 8a					.word	SyntaxError                      ; $92 RIGHT$(
>80d5	73 8a					.word	SyntaxError                      ; $93 RND(
>80d7	73 8a					.word	SyntaxError                      ; $94 SGN(
>80d9	73 8a					.word	SyntaxError                      ; $95 SPC(
>80db	73 8a					.word	SyntaxError                      ; $96 STR$(
>80dd	73 8a					.word	SyntaxError                      ; $97 VAL(
>80df	73 8a					.word	SyntaxError                      ; $98 FOR
>80e1	73 8a					.word	SyntaxError                      ; $99 IF
>80e3	73 8a					.word	SyntaxError                      ; $9a PROC
>80e5	73 8a					.word	SyntaxError                      ; $9b REPEAT
>80e7	73 8a					.word	SyntaxError                      ; $9c WHILE
>80e9	73 8a					.word	SyntaxError                      ; $9d ENDIF
>80eb	73 8a					.word	SyntaxError                      ; $9e ENDPROC
>80ed	73 8a					.word	SyntaxError                      ; $9f NEXT
>80ef	73 8a					.word	SyntaxError                      ; $a0 UNTIL
>80f1	73 8a					.word	SyntaxError                      ; $a1 WEND
>80f3	73 8a					.word	SyntaxError                      ; $a2 CLS
>80f5	73 8a					.word	SyntaxError                      ; $a3 DATA
>80f7	73 8a					.word	SyntaxError                      ; $a4 DIM
>80f9	73 8a					.word	SyntaxError                      ; $a5 GOSUB
>80fb	73 8a					.word	SyntaxError                      ; $a6 GOTO
>80fd	73 8a					.word	SyntaxError                      ; $a7 LET
>80ff	73 8a					.word	SyntaxError                      ; $a8 PRINT
>8101	73 8a					.word	SyntaxError                      ; $a9 READ
>8103	73 8a					.word	SyntaxError                      ; $aa REM
>8105	73 8a					.word	SyntaxError                      ; $ab RETURN
>8107	73 8a					.word	SyntaxError                      ; $ac THEN
>8109	73 8a					.word	SyntaxError                      ; $ad TO
.810b					VectorSet1:
>810b	73 8a					.word	SyntaxError                      ; $80 !0:EOF
>810d	73 8a					.word	SyntaxError                      ; $81 !1:SH1
>810f	73 8a					.word	SyntaxError                      ; $82 !2:SH2
>8111	73 8a					.word	SyntaxError                      ; $83 ASSERT
>8113	27 81					.word	ClearCommand                     ; $84 CLEAR
>8115	28 81					.word	EndCommand                       ; $85 END
>8117	73 8a					.word	SyntaxError                      ; $86 LIST
>8119	2b 81					.word	NewCommand                       ; $87 NEW
>811b	73 8a					.word	SyntaxError                      ; $88 RESTORE
>811d	73 8a					.word	SyntaxError                      ; $89 RUN
>811f	73 8a					.word	SyntaxError                      ; $8a STOP
.8121					VectorSet2:
>8121	73 8a					.word	SyntaxError                      ; $80 !0:EOF
>8123	73 8a					.word	SyntaxError                      ; $81 !1:SH1
>8125	73 8a					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8127					ClearCommand:
.8127	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8128					EndCommand:
.8128	4c 28 80	jmp $8028			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.812b					NewCommand:
.812b	20 b9 85	jsr $85b9			jsr 	MemoryNew
.812e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8131	20 27 81	jsr $8127			jsr 	ClearCommand 				; clear everything.
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.8135					ShiftLeft:
.8135	38		sec				sec
.8136	80 01		bra $8139			bra 	ShiftMain
.8138					ShiftRight:
.8138	18		clc				clc
.8139					ShiftMain:
.8139	fa		plx				plx 								; restore X
.813a	08		php				php 								; save direction
.813b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.813e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8141	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8142	0a		asl a				asl 	a
.8143	10 05		bpl $814a			bpl 	_NotRef
.8145	48		pha				pha
.8146	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8149	68		pla				pla
.814a					_NotRef:
.814a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.814c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.814f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8152	f0 03		beq $8157			beq 	_IntegerCode 				; if clear, then we have two integers
.8154	4c 7d 8a	jmp $8a7d			jmp 	TypeError 					; anything else, type mismatch.
.8157					_IntegerCode:
.8157	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.815a	29 e0		and #$e0			and 	#$E0
.815c	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.815f	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8162	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8165	d0 13		bne $817a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8167					_SMLoop:
.8167	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.816a	30 11		bmi $817d			bmi 	_SMExit 					; exit if done.
.816c	28		plp				plp 								; restore direcition setting
.816d	08		php				php
.816e	90 05		bcc $8175			bcc 	_SMRight
.8170	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; shift left if CS
.8173	80 f2		bra $8167			bra 	_SMLoop
.8175					_SMRight:
.8175	20 ac 85	jsr $85ac			jsr 	NSMShiftRight 				; shift right if CC
.8178	80 ed		bra $8167			bra 	_SMLoop
.817a					_SMExit0:
.817a	20 8a 85	jsr $858a			jsr 	NSMSetZero 					; return zero.
.817d					_SMExit:
.817d	28		plp				plp 								; throw direction
.817e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.817f					AddInteger:
.817f	fa		plx				plx
.8180	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8183	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8186	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8187	0a		asl a				asl 	a
.8188	10 05		bpl $818f			bpl 	_NotRef
.818a	48		pha				pha
.818b	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.818e	68		pla				pla
.818f					_NotRef:
.818f	0a		asl a				asl 	a 							; put MSB of type into A:7
.8190	30 0b		bmi $819d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8192	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8195	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8198	f0 06		beq $81a0			beq 	_IntegerCode 				; if clear, then we have two integers
.819a	4c 82 8a	jmp $8a82			jmp 	NotDoneError 							; otherwise at least one float.
.819d					_StringData:
.819d	4c 82 8a	jmp $8a82			jmp 	NotDoneError							; at least one string - don't know both are strings.
.81a0					_IntegerCode:
.81a0	18		clc				clc
.81a1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81a4	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.81a7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81aa	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81ad	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.81b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81b3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81b6	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.81b9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.81bc	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.81bf	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.81c2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.81c5	60		rts				rts
.81c6					SubInteger:
.81c6	fa		plx				plx
.81c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.81ca	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.81cd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.81ce	0a		asl a				asl 	a
.81cf	10 05		bpl $81d6			bpl 	_NotRef
.81d1	48		pha				pha
.81d2	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81d5	68		pla				pla
.81d6					_NotRef:
.81d6	0a		asl a				asl 	a 							; put MSB of type into A:7
.81d7	30 0b		bmi $81e4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.81d9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81dc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81df	f0 06		beq $81e7			beq 	_IntegerCode 				; if clear, then we have two integers
.81e1	4c 82 8a	jmp $8a82			jmp 	NotDoneError 							; otherwise at least one float.
.81e4					_StringData:
.81e4	4c 82 8a	jmp $8a82			jmp 	NotDoneError							; at least one string - don't know both are strings.
.81e7					_IntegerCode:
.81e7	38		sec				sec
.81e8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81eb	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.81ee	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81f1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81f4	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.81f7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81fa	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81fd	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8200	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8203	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8206	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8209	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.820c	60		rts				rts
.820d					AndInteger:
.820d	fa		plx				plx
.820e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8211	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8214	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8215	0a		asl a				asl 	a
.8216	10 05		bpl $821d			bpl 	_NotRef
.8218	48		pha				pha
.8219	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.821c	68		pla				pla
.821d					_NotRef:
.821d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.821f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8222	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8225	f0 03		beq $822a			beq 	_IntegerCode 				; if clear, then we have two integers
.8227	4c 7d 8a	jmp $8a7d			jmp 	TypeError 					; anything else, type mismatch.
.822a					_IntegerCode:
.822a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.822d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8230	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8233	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8236	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8239	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.823c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.823f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8242	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8245	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8248	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.824b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.824e	60		rts				rts
.824f					OraInteger:
.824f	fa		plx				plx
.8250	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8253	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8256	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8257	0a		asl a				asl 	a
.8258	10 05		bpl $825f			bpl 	_NotRef
.825a	48		pha				pha
.825b	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.825e	68		pla				pla
.825f					_NotRef:
.825f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8261	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8264	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8267	f0 03		beq $826c			beq 	_IntegerCode 				; if clear, then we have two integers
.8269	4c 7d 8a	jmp $8a7d			jmp 	TypeError 					; anything else, type mismatch.
.826c					_IntegerCode:
.826c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.826f	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8272	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8275	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8278	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.827b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.827e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8281	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8284	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8287	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.828a	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.828d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8290	60		rts				rts
.8291					EorInteger:
.8291	fa		plx				plx
.8292	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8295	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8298	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8299	0a		asl a				asl 	a
.829a	10 05		bpl $82a1			bpl 	_NotRef
.829c	48		pha				pha
.829d	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82a0	68		pla				pla
.82a1					_NotRef:
.82a1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82a3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82a6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82a9	f0 03		beq $82ae			beq 	_IntegerCode 				; if clear, then we have two integers
.82ab	4c 7d 8a	jmp $8a7d			jmp 	TypeError 					; anything else, type mismatch.
.82ae					_IntegerCode:
.82ae	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82b1	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.82b4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82b7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82ba	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.82bd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82c0	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82c3	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.82c6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82c9	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82cc	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.82cf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.82d3					PrecedenceLevel:
>82d3	04					.byte	 4	; $00 <<
>82d4	02					.byte	 2	; $01 <=
>82d5	02					.byte	 2	; $02 <>
>82d6	00					.byte	 0	; $03 !!3
>82d7	00					.byte	 0	; $04 ><
>82d8	02					.byte	 2	; $05 >=
>82d9	04					.byte	 4	; $06 >>
>82da	00					.byte	 0	; $07 !!7
>82db	00					.byte	 0	; $08 !!8
>82dc	00					.byte	 0	; $09 !!9
>82dd	00					.byte	 0	; $0a !!10
>82de	00					.byte	 0	; $0b !!11
>82df	00					.byte	 0	; $0c !!12
>82e0	00					.byte	 0	; $0d !!13
>82e1	00					.byte	 0	; $0e !!14
>82e2	00					.byte	 0	; $0f !!15
>82e3	00					.byte	 0	; $10 @
>82e4	00					.byte	 0	; $11 !!17
>82e5	00					.byte	 0	; $12 !!18
>82e6	00					.byte	 0	; $13 [
>82e7	00					.byte	 0	; $14 \
>82e8	00					.byte	 0	; $15 ]
>82e9	01					.byte	 1	; $16 ^
>82ea	00					.byte	 0	; $17 _
>82eb	00					.byte	 0	; $18 `
>82ec	00					.byte	 0	; $19 !!25
>82ed	00					.byte	 0	; $1a !!26
>82ee	00					.byte	 0	; $1b {
>82ef	01					.byte	 1	; $1c |
>82f0	00					.byte	 0	; $1d }
>82f1	00					.byte	 0	; $1e ~
>82f2	00					.byte	 0	; $1f [7m<7F>[m
>82f3	00					.byte	 0	; $20
>82f4	05					.byte	 5	; $21 !
>82f5	00					.byte	 0	; $22 "
>82f6	00					.byte	 0	; $23 #
>82f7	05					.byte	 5	; $24 $
>82f8	04					.byte	 4	; $25 %
>82f9	01					.byte	 1	; $26 &
>82fa	00					.byte	 0	; $27 '
>82fb	00					.byte	 0	; $28 (
>82fc	00					.byte	 0	; $29 )
>82fd	04					.byte	 4	; $2a *
>82fe	03					.byte	 3	; $2b +
>82ff	00					.byte	 0	; $2c ,
>8300	03					.byte	 3	; $2d -
>8301	00					.byte	 0	; $2e .
>8302	04					.byte	 4	; $2f /
>8303	00					.byte	 0	; $30 0
>8304	00					.byte	 0	; $31 1
>8305	00					.byte	 0	; $32 2
>8306	00					.byte	 0	; $33 3
>8307	00					.byte	 0	; $34 4
>8308	00					.byte	 0	; $35 5
>8309	00					.byte	 0	; $36 6
>830a	00					.byte	 0	; $37 7
>830b	00					.byte	 0	; $38 8
>830c	00					.byte	 0	; $39 9
>830d	00					.byte	 0	; $3a :
>830e	00					.byte	 0	; $3b ;
>830f	02					.byte	 2	; $3c <
>8310	02					.byte	 2	; $3d =
>8311	02					.byte	 2	; $3e >
>8312	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.8313					EvaluateExpressionAt0:
.8313	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8315					EvaluateExpression:
.8315	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8317					EvaluateExpressionAtPrecedence:
.8317	48		pha				pha 								; save precedence level
.8318	20 9f 84	jsr $849f			jsr 	EvaluateTerm 				; evaluate term into level X.
.831b	68		pla				pla 								; restore precedence level.
.831c					_EXPRLoop:
.831c	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.831e	b1 30		lda ($30),y			lda 	(codePtr),y
.8320	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8322	b0 25		bcs $8349			bcs 	_EXPRExit
.8324	da		phx				phx 								; read the operator precedence
.8325	aa		tax				tax
.8326	bd d3 82	lda $82d3,x			lda 	PrecedenceLevel,x
.8329	fa		plx				plx
.832a	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.832c	f0 1b		beq $8349			beq 	_EXPRExit
.832e	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8330	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8332	c5 37		cmp $37				cmp 	zTemp0+1
.8334	b0 13		bcs $8349			bcs		_EXPRExit 					; if current >= operator exit
.8336	48		pha				pha 								; save current precedence.
.8337	b1 30		lda ($30),y			lda 	(codePtr),y
.8339	c8		iny				iny
.833a	48		pha				pha
.833b	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.833d	e8		inx				inx 								; work out the right hand side.
.833e	20 17 83	jsr $8317			jsr 	EvaluateExpressionAtPrecedence
.8341	ca		dex				dex
.8342	68		pla				pla 								; get operator, call the code.
.8343	20 4c 83	jsr $834c			jsr 	_EXPRCaller
.8346	68		pla				pla 								; restore precedence level
.8347	80 d3		bra $831c			bra 	_EXPRLoop 					; and go round.
.8349					_EXPRExit:
.8349	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.834b	60		rts				rts
.834c					_EXPRCaller:
.834c	da		phx				phx 								; save on stack, first thing is to restore it
.834d	0a		asl a				asl 	a 							; double so can use vectors into X
.834e	aa		tax				tax
.834f	7c 2f 80	jmp ($802f,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.8352					DereferenceTopTwo:
.8352	e8		inx				inx
.8353	20 57 83	jsr $8357			jsr 	Dereference 				; deref x+1
.8356	ca		dex				dex  								; falls through to deref x
.8357					Dereference:
.8357	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.835a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.835c	f0 57		beq $83b5			beq 	_DRFExit 					; not a reference
.835e	5a		phy				phy
.835f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8362	85 36		sta $36				sta 	zTemp0
.8364	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8367	85 37		sta $37				sta 	zTemp0+1
.8369	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.836c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.836e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8371	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8374	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8376	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8378	f0 0f		beq $8389			beq 	_DRFDereferenceTwo
.837a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.837c	f0 39		beq $83b7			beq 	_DRFFull
.837e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8381	29 03		and #$03			and 	#3
.8383	f0 32		beq $83b7			beq 	_DRFFull 					; the whole word
.8385	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8387	f0 07		beq $8390			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8389					_DRFDereferenceTwo:
.8389	a0 01		ldy #$01			ldy 	#1
.838b	b1 36		lda ($36),y			lda 	(zTemp0),y
.838d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8390					_DRFClear23:
.8390	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8393	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8396	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8399	29 18		and #$18			and 	#NSBTypeMask
.839b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.839e	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.83a0	d0 12		bne $83b4			bne 	_DRFNotString
.83a2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.83a5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.83a8	d0 0a		bne $83b4			bne 	_DRFNotString
.83aa	a9 b6		lda #$b6			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.83ac	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.83af	a9 83		lda #$83			lda 	#_DRFNullString >> 8
.83b1	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.83b4					_DRFNotString
.83b4	7a		ply				ply 								; restore Y and exit
.83b5					_DRFExit:
.83b5	60		rts				rts
.83b6					_DRFNullString:
>83b6	00						.byte 	0
.83b7					_DRFFull:
.83b7	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.83b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83be	c8		iny				iny
.83bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.83c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83c4	c8		iny				iny
.83c5	b1 36		lda ($36),y			lda 	(zTemp0),y
.83c7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83ca	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.83cd	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.83d0	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.83d2	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.83d5	f0 06		beq $83dd			beq 	_DRFNoExponent
.83d7	c8		iny				iny 								; if not, read the exponent as well.
.83d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.83da	9d 28 06	sta $0628,x			sta 	NSExponent,x
.83dd					_DRFNoExponent:
.83dd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.83e0	10 0d		bpl $83ef			bpl 	_DRFExit2 					; if not, then exit.
.83e2	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.83e4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.83ea	09 80		ora #$80			ora 	#NSBIsNegative
.83ec	9d 00 06	sta $0600,x			sta 	NSStatus,x
.83ef					_DRFExit2:
.83ef	7a		ply				ply
.83f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.83f1					EncodeNumberStart:
.83f1	38		sec				sec
.83f2	80 01		bra $83f5			bra 	EncodeNumberContinue+1
.83f4					EncodeNumberContinue:
.83f4	18		clc				clc
.83f5	08		php				php 								; save reset.
.83f6	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.83f8	f0 0b		beq $8405			beq 	_ENIsOkay
.83fa	c9 30		cmp #$30			cmp 	#"0"
.83fc	90 04		bcc $8402			bcc 	_ENBadNumber
.83fe	c9 3a		cmp #$3a			cmp 	#"9"+1
.8400	90 03		bcc $8405			bcc 	_ENIsOkay
.8402					_ENBadNumber:
.8402	28		plp				plp 								; throw saved reset
.8403					_ENFail:
.8403	18		clc				clc 								; not allowed
.8404	60		rts				rts
.8405					_ENIsOkay:
.8405	28		plp				plp 								; are we restarting
.8406	90 0c		bcc $8414			bcc 	_ENNoRestart
.8408					_ENStartEncode:
.8408	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.840a	20 8c 85	jsr $858c			jsr 	NSMSetByte
.840d	a9 01		lda #$01			lda 	#ESTA_Low
.840f					_ENExitChange:
.840f	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8412	38		sec				sec
.8413	60		rts				rts
.8414					_ENNoRestart:
.8414	48		pha				pha 								; save on stack.
.8415	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8418	c9 01		cmp #$01			cmp 	#ESTA_Low
.841a	f0 05		beq $8421			beq  	_ESTALowState
.841c	c9 02		cmp #$02			cmp 	#ESTA_High
.841e	f0 23		beq $8443			beq 	_ESTAHighState
>8420	db						.byte 	$DB 						; causes a break in the emulator
.8421					_ESTALowState:
.8421	68		pla				pla 								; get value back
.8422	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8424	f0 27		beq $844d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8426	29 0f		and #$0f			and 	#15 						; make digit
.8428	85 36		sta $36				sta 	zTemp0 						; save it.
.842a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.842d	0a		asl a				asl 	a
.842e	0a		asl a				asl 	a
.842f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8432	0a		asl a				asl 	a
.8433	65 36		adc $36				adc 	zTemp0
.8435	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8438	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.843a	90 05		bcc $8441			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.843c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.843e	8d 05 07	sta $0705			sta 	EncodeState
.8441					_ESTANoSwitch:
.8441	38		sec				sec
.8442	60		rts				rts
.8443					_ESTAHighState:
.8443	68		pla				pla 								; get value back
.8444	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8446	f0 05		beq $844d			beq 	_ESTASwitchFloat
.8448	20 4e 84	jsr $844e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.844b	38		sec				sec
.844c	60		rts				rts
.844d					_ESTASwitchFloat:
>844d	db						.byte 	$DB 						; causes a break in the emulator
.844e					ESTAShiftDigitIntoMantissa:
.844e	29 0f		and #$0f			and 	#15 						; save digit
.8450	48		pha				pha
.8451	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8454	48		pha				pha
.8455	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8458	48		pha				pha
.8459	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.845c	48		pha				pha
.845d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8460	48		pha				pha
.8461	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; x 2
.8464	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; x 4
.8467	18		clc				clc 								; pop mantissa and add
.8468	68		pla				pla
.8469	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.846c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.846f	68		pla				pla
.8470	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8473	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8476	68		pla				pla
.8477	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.847a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.847d	68		pla				pla
.847e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8481	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8484	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; x 10
.8487	68		pla				pla 								; add digit
.8488	18		clc				clc
.8489	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.848c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.848f	90 0d		bcc $849e			bcc 	_ESTASDExit
.8491	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8494	d0 08		bne $849e			bne 	_ESTASDExit
.8496	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8499	d0 03		bne $849e			bne 	_ESTASDExit
.849b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.849e					_ESTASDExit:
.849e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.849f					EvaluateTerm:
.849f	b1 30		lda ($30),y			lda 	(codePtr),y
.84a1	30 18		bmi $84bb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.84a3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.84a5	b0 6e		bcs $8515			bcs 	_ETVariable
.84a7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.84a9	90 6e		bcc $8519			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.84ab	c9 3a		cmp #$3a			cmp 	#'9'+1
.84ad	b0 6a		bcs $8519			bcs 	_ETPuncUnary
.84af	20 f1 83	jsr $83f1			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.84b2					_ETNumber:
.84b2	c8		iny				iny 								; keep encoding until we have the numbers
.84b3	b1 30		lda ($30),y			lda 	(codePtr),y
.84b5	20 f4 83	jsr $83f4			jsr 	EncodeNumberContinue
.84b8	b0 f8		bcs $84b2			bcs 	_ETNumber 					; go back if accepted.
.84ba	60		rts				rts
.84bb					_ETCheckUnary:
.84bb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.84bd	f0 40		beq $84ff			beq 	_ETString
.84bf	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.84c1	f0 11		beq $84d4			beq 	_ETHexConstant
.84c3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.84c5	90 0a		bcc $84d1			bcc 	_ETSyntaxError
.84c7	c9 98		cmp #$98			cmp 	#KWC_LAST_UNARY+1
.84c9	b0 06		bcs $84d1			bcs 	_ETSyntaxError
.84cb	da		phx				phx 								; push X on the stack
.84cc	0a		asl a				asl 	a 							; put vector x 2 into X
.84cd	aa		tax				tax
.84ce	7c af 80	jmp ($80af,x)			jmp 	(VectorSet0,x) 				; and do it.
.84d1					_ETSyntaxError:
.84d1	4c 73 8a	jmp $8a73			jmp 	SyntaxError
.84d4					_ETHexConstant:
.84d4	c8		iny				iny 								; skip #
.84d5	c8		iny				iny 								; skip count
.84d6	20 8a 85	jsr $858a			jsr 	NSMSetZero 					; clear result
.84d9					_ETHLoop:
.84d9	b1 30		lda ($30),y			lda 	(codePtr),y
.84db	c8		iny				iny 								; and consume
.84dc	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.84de	f0 1e		beq $84fe			beq 	_ETHExit
.84e0	48		pha				pha 								; save on stack.
.84e1	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; x 2
.84e4	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; x 4
.84e7	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; x 8
.84ea	20 9f 85	jsr $859f			jsr 	NSMShiftLeft 				; x 16
.84ed	68		pla				pla 								; ASCII
.84ee	c9 41		cmp #$41			cmp 	#'A'
.84f0	90 02		bcc $84f4			bcc 	_ETHNotChar
.84f2	e9 07		sbc #$07			sbc 	#7
.84f4					_ETHNotChar:
.84f4	29 0f		and #$0f			and 	#15 						; digit now
.84f6	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.84f9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84fc	80 db		bra $84d9			bra 	_ETHLoop 					; go round.
.84fe					_ETHExit:
.84fe	60		rts				rts
.84ff					_ETString:
.84ff	c8		iny				iny 								; look at length
.8500	b1 30		lda ($30),y			lda 	(codePtr),y
.8502	48		pha				pha
.8503	c8		iny				iny 								; first character
.8504	20 f5 85	jsr $85f5			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8507	68		pla				pla 								; restore count and save
.8508	85 36		sta $36				sta 	zTemp0
.850a	98		tya				tya 								; add length to Y to skip it.
.850b	18		clc				clc
.850c	65 36		adc $36				adc 	zTemp0
.850e	a8		tay				tay
.850f	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8511	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8514	60		rts				rts
.8515					_ETVariable:
>8515	db						.byte 	$DB 						; causes a break in the emulator
.8516	4c ff ff	jmp $ffff			jmp 	$FFFF
.8519					_ETPuncUnary:
.8519	c8		iny				iny 								; consume the unary character
.851a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.851c	f0 31		beq $854f			beq 	_ETUnaryNegate
.851e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8520	f0 3d		beq $855f			beq 	_ETDereference
.8522	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8524	f0 58		beq $857e			beq 	_ETParenthesis
.8526	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.8528	f0 43		beq $856d			beq 	_ETStringReference
.852a	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.852c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.852e	f0 06		beq $8536			beq 	_ETIndirection
.8530	e6 36		inc $36				inc 	zTemp0
.8532	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8534	d0 9b		bne $84d1			bne 	_ETSyntaxError
.8536					_ETIndirection:
.8536	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8538	1a		inc a				inc 	a
.8539	48		pha				pha
.853a	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.853d	20 57 83	jsr $8357			jsr 	Dereference 				; dereference it.
.8540	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8543	d0 07		bne $854c			bne 	_ETTypeMismatch
.8545	68		pla				pla 								; indirection 1-2
.8546	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8548	9d 00 06	sta $0600,x			sta 	NSStatus,x
.854b	60		rts				rts
.854c					_ETTypeMismatch:
.854c	4c 7d 8a	jmp $8a7d			jmp 	TypeError
.854f					_ETUnaryNegate:
.854f	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.8552	20 57 83	jsr $8357			jsr 	Dereference 				; dereference it.
.8555	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8558	29 10		and #$10			and 	#NSTString
.855a	d0 f0		bne $854c			bne 	_ETTypeMismatch
.855c	4c 81 85	jmp $8581			jmp 	NSMNegate  					; just toggles the sign bit.
.855f					_ETDereference:
.855f	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.8562	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8565	29 20		and #$20			and 	#NSBIsReference
.8567	f0 e3		beq $854c			beq 	_ETTypeMismatch
.8569	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.856c	60		rts				rts
.856d					_ETStringReference:
.856d	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.8570	20 57 83	jsr $8357			jsr 	Dereference 				; dereference it.
.8573	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8576	d0 d4		bne $854c			bne 	_ETTypeMismatch
.8578	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.857a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.857d	60		rts				rts
.857e					_ETParenthesis:
>857e	db						.byte 	$DB 						; causes a break in the emulator
.857f	80 fd		bra $857e			bra 	_ETParenthesis

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8581					NSMNegate:
.8581	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8584	49 80		eor #$80			eor 	#NSBIsNegative
.8586	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8589	60		rts				rts
.858a					NSMSetZero:
.858a	a9 00		lda #$00			lda 	#0
.858c					NSMSetByte:
.858c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.858f	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8592	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8595	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8598	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.859b	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.859e	60		rts				rts
.859f					NSMShiftLeft:
.859f	1e 08 06	asl $0608,x			asl 	NSMantissa0,x
.85a2	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.85a5	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.85a8	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.85ab	60		rts				rts
.85ac					NSMShiftRight:
.85ac	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.85af	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.85b2	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.85b5	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.85b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8a73					SyntaxError:
.8a73	a9 02		lda #$02		lda	#2
.8a75	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8a78					RangeError:
.8a78	a9 04		lda #$04		lda	#4
.8a7a	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8a7d					TypeError:
.8a7d	a9 05		lda #$05		lda	#5
.8a7f	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8a82					NotDoneError:
.8a82	a9 0c		lda #$0c		lda	#12
.8a84	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8a87					ErrorText:
>8a87	42 72 65 61 6b 00			.text	"Break",0
>8a8d	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8a95	72 72 6f 72 00
>8a9a	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8aa2	20 62 79 20 7a 65 72 6f 00
>8aab	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8ab3	61 6e 67 65 00
>8ab8	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8ac0	6d 61 74 63 68 00
>8ac6	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8ace	65 6d 6f 72 79 00
>8ad4	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8adc	61 72 67 75 6d 65 6e 74 00
>8ae5	53 74 6f 70 00				.text	"Stop",0
>8aea	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8af2	6f 6f 20 6c 6f 6e 67 00
>8afa	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8b02	6e 20 66 61 69 6c 65 64 00
>8b0b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8b13	61 74 61 00
>8b17	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8b1f	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.85b9					MemoryNew:
.85b9	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.85bb	85 30		sta $30				sta 	codePtr
.85bd	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.85bf	85 31		sta $31				sta 	codePtr+1
.85c1	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.85c3	92 30		sta ($30)			sta 	(codePtr)
.85c5	60		rts				rts
.85c6					MemoryAppend:
.85c6	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.85c8	85 30		sta $30				sta 	codePtr
.85ca	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.85cc	85 31		sta $31				sta 	codePtr+1
.85ce					_MAFindEnd:
.85ce	b2 30		lda ($30)			lda 	(codePtr)
.85d0	f0 0d		beq $85df			beq 	_MAFoundEnd
.85d2	18		clc				clc
.85d3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.85d5	65 30		adc $30				adc 	codePtr
.85d7	85 30		sta $30				sta 	codePtr
.85d9	90 02		bcc $85dd			bcc 	_CREExit
.85db	e6 31		inc $31				inc 	codePtr+1
.85dd					_CREExit:
.85dd	80 ef		bra $85ce			bra 	_MAFindEnd
.85df					_MAFoundEnd:
.85df	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.85e2	c0 04		cpy #$04			cpy 	#4 							; blank line
.85e4	f0 0e		beq $85f4			beq 	_MANoLine
.85e6	a9 00		lda #$00			lda 	#0 							; end of program
.85e8	91 30		sta ($30),y			sta 	(codePtr),y
.85ea					_MACopy:
.85ea	88		dey				dey
.85eb	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.85ee	91 30		sta ($30),y			sta 	(codePtr),y
.85f0	c0 00		cpy #$00			cpy 	#0
.85f2	d0 f6		bne $85ea			bne 	_MACopy
.85f4					_MANoLine:
.85f4	60		rts				rts
.85f5					MemoryInline:
.85f5	98		tya				tya 								; put address into stack,x
.85f6	18		clc				clc
.85f7	65 30		adc $30				adc 	codePtr
.85f9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85fc	a5 31		lda $31				lda 	codePtr+1
.85fe	69 00		adc #$00			adc 	#0
.8600	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8603	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8606	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8609	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.860a					VariableOpen:
.860a	60		rts				rts
.860b					VariableClose:
.860b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.860c					BackloadProgram:
.860c	a2 ff		ldx #$ff			ldx 	#$FF
.860e	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.8611	30 1e		bmi $8631			bmi 	_BPExit
.8613					_BPCopy:
.8613	e8		inx				inx  								; copy byte in
.8614	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.8617	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.861a	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.861d	30 0a		bmi $8629			bmi 	_BPEndLine 					; -ve = EOL
.861f	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8621	d0 02		bne $8625			bne 	_BPNotTab
.8623	a9 20		lda #$20			lda 	#' '
.8625					_BPNotTab:
.8625	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8627	b0 ea		bcs $8613			bcs 	_BPCopy
.8629					_BPEndLine:
.8629	20 ee 87	jsr $87ee			jsr 	TokeniseLine 				; tokenise the line.
.862c	20 c6 85	jsr $85c6			jsr 	MemoryAppend 				; append to current program
.862f	80 db		bra $860c			bra 	BackloadProgram
.8631					_BPExit:
.8631	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8632					TokeniseSearchTable:
.8632	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8634	85 36		sta $36				sta 	zTemp0
.8636	a0 00		ldy #$00			ldy 	#0
.8638	a9 80		lda #$80			lda 	#$80 						; token #
.863a	85 38		sta $38				sta 	zTemp1
.863c					_TSTLoop:
.863c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.863e	30 49		bmi $8689			bmi 	_TSTFail 					; -ve = end of table
.8640	f0 2e		beq $8670			beq 	_TSTNext 					; zero, check next it's a dummy
.8642	c8		iny				iny 								; get the hash
.8643	b1 36		lda ($36),y			lda 	(zTemp0),y
.8645	88		dey				dey
.8646	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8649	d0 25		bne $8670			bne 	_TSTNext
.864b	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.864e	38		sec				sec
.864f	ed 00 07	sbc $0700			sbc 	identStart
.8652	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8654	d0 1a		bne $8670			bne 	_TSTNext
.8656	5a		phy				phy 								; save Y , we might fail
.8657	c8		iny				iny 								; point to text
.8658	c8		iny				iny
.8659	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.865c					_TSTCompareName:
.865c	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.865f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8661	d0 0c		bne $866f			bne 	_TSTNextPullY 				; fail, pullY and do next
.8663	e8		inx				inx
.8664	c8		iny				iny
.8665	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8668	d0 f2		bne $865c			bne 	_TSTCompareName
.866a	7a		ply				ply 								; throw Y
.866b	a5 38		lda $38				lda 	zTemp1 						; get token #
.866d	38		sec				sec 								; return with CS = passed.
.866e	60		rts				rts
.866f					_TSTNextPullY:
.866f	7a		ply				ply 								; restore current, fall through.
.8670					_TSTNext:
.8670	e6 38		inc $38				inc 	zTemp1 						; token counter
.8672	98		tya				tya
.8673	18		clc				clc
.8674	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8676	1a		inc a				inc 	a 							; +1
.8677	1a		inc a				inc 	a 							; +2
.8678	a8		tay				tay
.8679	10 c1		bpl $863c			bpl 	_TSTLoop 					; if Y < $80 loop back
.867b	98		tya				tya 								; add Y to zTemp0 and reset Y
.867c	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.867e	18		clc				clc  								; but have tables > 255 bytes
.867f	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8681	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8683	90 b7		bcc $863c			bcc 	_TSTLoop
.8685	e6 37		inc $37				inc 	zTemp0+1
.8687	80 b3		bra $863c			bra 	_TSTLoop
.8689					_TSTFail:
.8689	18		clc				clc
.868a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.868b					KeywordSet0:
>868b	00 65					.text	0,$65,""               ; $80 !0:EOF
>868d	00 58					.text	0,$58,""               ; $81 !1:SH1
>868f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8691	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8697	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>869f	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>86a5	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>86ac	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>86b2	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $88 GETDATE$(
>86ba	45 24 28
>86bd	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $89 GETTIME$(
>86c5	45 24 28
>86c8	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8a HEX$(
>86cf	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>86d5	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>86dd	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8d LEFT$(
>86e5	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8e LEN(
>86eb	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8f MID$(
>86f2	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $90 NOT
>86f7	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $91 PAGE
>86fd	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $92 RIGHT$(
>8705	28
>8706	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $93 RND(
>870c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $94 SGN(
>8712	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $95 SPC(
>8718	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $96 STR$(
>871f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $97 VAL(
>8725	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $98 FOR
>872a	02 8f 49 46				.text	2,$8f,"IF"             ; $99 IF
>872e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9a PROC
>8734	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9b REPEAT
>873c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9c WHILE
>8743	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9d ENDIF
>874a	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9e ENDPROC
>8752	43
>8753	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9f NEXT
>8759	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>8760	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>8766	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>876b	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>8771	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>8776	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>877d	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>8783	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>8788	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>878f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>8795	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>879a	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>87a2	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>87a8	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>87ac	ff					.text	$FF
.87ad					KeywordSet1:
>87ad	00 65					.text	0,$65,""               ; $80 !0:EOF
>87af	00 58					.text	0,$58,""               ; $81 !1:SH1
>87b1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>87b3	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>87bb	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>87c2	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>87c7	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>87cd	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>87d2	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>87da	45
>87db	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>87e0	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>87e6	ff					.text	$FF
.87e7					KeywordSet2:
>87e7	00 65					.text	0,$65,""               ; $80 !0:EOF
>87e9	00 58					.text	0,$58,""               ; $81 !1:SH1
>87eb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>87ed	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.87ee					TokeniseLine:
.87ee	20 76 89	jsr $8976			jsr 	FixLineBufferCase 			; fix line case
.87f1	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.87f3	8d 06 07	sta $0706			sta 	tokenOffset
.87f6	9c 07 07	stz $0707			stz 	tokenLineNumber
.87f9	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.87fc	a2 ff		ldx #$ff			ldx 	#$FF
.87fe					_TKFindFirst:
.87fe	e8		inx				inx
.87ff	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8802	f0 79		beq $887d			beq 	_TKExit
.8804	c9 20		cmp #$20			cmp 	#' '
.8806	90 f6		bcc $87fe			bcc 	_TKFindFirst
.8808	c9 30		cmp #$30			cmp 	#'0'
.880a	90 07		bcc $8813			bcc 	_TKNoLineNumber
.880c	c9 3a		cmp #$3a			cmp 	#'9'+1
.880e	b0 03		bcs $8813			bcs 	_TKNoLineNumber
.8810	20 a0 89	jsr $89a0			jsr 	TokeniseExtractLineNumber
.8813					_TKNoLineNumber:
.8813					_TKTokeniseLoop:
.8813	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8816	f0 65		beq $887d			beq 	_TKExit
.8818	e8		inx				inx
.8819	c9 20		cmp #$20			cmp 	#' '
.881b	f0 f6		beq $8813			beq 	_TKTokeniseLoop 			; keep looping if space found.
.881d	ca		dex				dex 								; undo last get, A contains character, X is position.
.881e	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8820	f0 61		beq $8883			beq 	_TKTokeniseIdentifier
.8822	c9 41		cmp #$41			cmp 	#'A'
.8824	90 04		bcc $882a			bcc 	_TKTokenisePunctuation
.8826	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8828	90 59		bcc $8883			bcc 	_TKTokeniseIdentifier
.882a					_TKTokenisePunctuation:
.882a	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.882c	f0 27		beq $8855			beq 	_TKString
.882e	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8830	f0 28		beq $885a			beq 	_TKHexConstant
.8832	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8834	f0 29		beq $885f			beq 	_TKCheckDouble
.8836	c9 3e		cmp #$3e			cmp 	#'>'
.8838	f0 25		beq $885f			beq 	_TKCheckDouble
.883a					_TKStandardPunctuation:
.883a	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.883d	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.883f	90 0e		bcc $884f			bcc 	_TKNoShift
.8841	48		pha				pha 								; save
.8842	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8844	85 36		sta $36				sta 	zTemp0
.8846	68		pla				pla
.8847	29 20		and #$20			and 	#32 						; bit 5
.8849	4a		lsr a				lsr 	a 							; shift into bit 3
.884a	4a		lsr a				lsr 	a
.884b	05 36		ora $36				ora 	zTemp0
.884d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.884f					_TKNoShift:
.884f	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte 			; write the punctuation character
.8852	e8		inx				inx 								; consume the character
.8853	80 be		bra $8813			bra 	_TKTokeniseLoop 			; and loop round again.
.8855					_TKString:
.8855	20 05 89	jsr $8905			jsr 	TokeniseString
.8858	80 b9		bra $8813			bra 	_TKTokeniseLoop
.885a					_TKHexConstant:
.885a	20 40 89	jsr $8940			jsr 	TokeniseHexConstant
.885d	80 b4		bra $8813			bra 	_TKTokeniseLoop
.885f					_TKCheckDouble:
.885f	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.8862	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8864	90 d4		bcc $883a			bcc 	_TKStandardPunctuation
.8866	c9 3f		cmp #$3f			cmp 	#'>'+1
.8868	b0 d0		bcs $883a			bcs 	_TKStandardPunctuation
.886a	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.886d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.886f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8870	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8873	38		sec				sec
.8874	e9 3c		sbc #$3c			sbc 	#'<'
.8876	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8879	e8		inx				inx 								; consume both
.887a	e8		inx				inx
.887b	80 96		bra $8813			bra 	_TKTokeniseLoop
.887d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.887f	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.8882	60		rts				rts
.8883					_TKTokeniseIdentifier:
.8883	8e 00 07	stx $0700			stx 	identStart 					; save start
.8886	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8889					_TKCheckLoop:
.8889	e8		inx				inx 								; look at next, we know first is identifier.
.888a	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.888d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.888f	f0 f8		beq $8889			beq 	_TKCheckLoop
.8891	c9 30		cmp #$30			cmp	 	#"0"
.8893	90 0c		bcc $88a1			bcc 	_TKEndIdentifier
.8895	c9 3a		cmp #$3a			cmp 	#"9"+1
.8897	90 f0		bcc $8889			bcc 	_TKCheckLoop
.8899	c9 41		cmp #$41			cmp	 	#"A"
.889b	90 04		bcc $88a1			bcc 	_TKEndIdentifier
.889d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.889f	90 e8		bcc $8889			bcc 	_TKCheckLoop
.88a1					_TKEndIdentifier:
.88a1	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.88a4	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.88a6	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.88a8	f0 06		beq $88b0			beq 	_TKHasTypeCharacter
.88aa	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.88ac	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.88ae	d0 07		bne $88b7			bne 	_TKNoTypeCharacter
.88b0					_TKHasTypeCharacter:
.88b0	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.88b3	e8		inx				inx 								; read next
.88b4	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.88b7					_TKNoTypeCharacter:
.88b7	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.88b9	d0 09		bne $88c4			bne 	_TKNoArray
.88bb	e8		inx				inx 								; skip the (
.88bc	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.88bf	09 04		ora #$04			ora 	#$04
.88c1	8d 04 07	sta $0704			sta 	identTypeByte
.88c4					_TKNoArray:
.88c4	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.88c7	20 61 89	jsr $8961			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.88ca	a0 86		ldy #$86			ldy 	#(KeywordSet0) >> 8
.88cc	a9 8b		lda #$8b			lda 	#(KeywordSet0) & $FF
.88ce	20 32 86	jsr $8632			jsr 	TokeniseSearchTable
.88d1	a2 00		ldx #$00			ldx 	#0
.88d3	b0 1f		bcs $88f4			bcs 	_TKFoundToken
.88d5	a0 87		ldy #$87			ldy 	#(KeywordSet1) >> 8
.88d7	a9 ad		lda #$ad			lda 	#(KeywordSet1) & $FF
.88d9	20 32 86	jsr $8632			jsr 	TokeniseSearchTable
.88dc	a2 81		ldx #$81			ldx 	#$81
.88de	b0 14		bcs $88f4			bcs 	_TKFoundToken
.88e0	a0 87		ldy #$87			ldy 	#(KeywordSet1) >> 8
.88e2	a9 ad		lda #$ad			lda 	#(KeywordSet1) & $FF
.88e4	20 32 86	jsr $8632			jsr 	TokeniseSearchTable
.88e7	a2 82		ldx #$82			ldx 	#$82
.88e9	b0 09		bcs $88f4			bcs 	_TKFoundToken
.88eb	20 f1 89	jsr $89f1			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.88ee	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.88f1	4c 13 88	jmp $8813			jmp 	_TKTokeniseLoop 			; and go round again.
.88f4					_TKFoundToken:
.88f4	48		pha				pha 								; save token
.88f5	8a		txa				txa 								; shift in X, is there one ?
.88f6	f0 03		beq $88fb			beq 	_TKNoTShift
.88f8	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte 			; if so, write it out
.88fb					_TKNoTShift:
.88fb	68		pla				pla 								; restore and write token
.88fc	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.88ff	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8902	4c 13 88	jmp $8813			jmp 	_TKTokeniseLoop 			; and go round again.
.8905					TokeniseString:
.8905	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8907	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.890a	e8		inx				inx									; start of quoted string.
.890b	da		phx				phx 								; push start of string on top
.890c	ca		dex				dex
.890d					_TSFindEnd:
.890d	e8		inx				inx
.890e	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8911	f0 04		beq $8917			beq 	_TSEndOfString
.8913	c9 22		cmp #$22			cmp 	#'"'
.8915	d0 f6		bne $890d			bne 	_TSFindEnd
.8917					_TSEndOfString:
.8917	7a		ply				ply  								; so now Y is first character, X is character after end.
.8918	48		pha				pha 								; save terminating character
.8919	20 21 89	jsr $8921			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.891c	68		pla				pla 								; terminating character
.891d	f0 01		beq $8920			beq 	_TSNotQuote					; if it wasn't EOS skip it
.891f	e8		inx				inx
.8920					_TSNotQuote:
.8920	60		rts				rts
.8921					TOWriteBlockXY:
.8921	86 36		stx $36				stx 	zTemp0 						; write end character
.8923	98		tya				tya
.8924	49 ff		eor #$ff			eor 	#$FF
.8926	38		sec				sec
.8927	65 36		adc $36				adc 	zTemp0
.8929	1a		inc a				inc 	a 							; one extra for NULL
.892a	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.892d					_TOBlockLoop:
.892d	c4 36		cpy $36				cpy 	zTemp0
.892f	f0 09		beq $893a			beq 	_TOBlockExit
.8931	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8934	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.8937	c8		iny				iny
.8938	80 f3		bra $892d			bra 	_TOBlockLoop
.893a					_TOBlockExit:
.893a	a9 00		lda #$00			lda 	#0
.893c	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.893f	60		rts				rts
.8940					TokeniseHexConstant:
.8940	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8942	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.8945	e8		inx				inx									; start of quoted string.
.8946	da		phx				phx 								; push start of constant on top
.8947	ca		dex				dex
.8948					_THFindLoop:
.8948	e8		inx				inx
.8949	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.894c	c9 30		cmp #$30			cmp 	#"0"
.894e	90 0c		bcc $895c			bcc 	_THFoundEnd
.8950	c9 3a		cmp #$3a			cmp 	#"9"+1
.8952	90 f4		bcc $8948			bcc 	_THFindLoop
.8954	c9 41		cmp #$41			cmp 	#"A"
.8956	90 04		bcc $895c			bcc 	_THFoundEnd
.8958	c9 47		cmp #$47			cmp 	#"F"+1
.895a	90 ec		bcc $8948			bcc 	_THFindLoop
.895c					_THFoundEnd:
.895c	7a		ply				ply 								; restore start
.895d	20 21 89	jsr $8921			jsr 	TOWriteBlockXY 				; output the block
.8960	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8961					TokeniseCalculateHash:
.8961	da		phx				phx
.8962	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8965	a9 00		lda #$00			lda 	#0
.8967					_TCHLoop:
.8967	18		clc				clc
.8968	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.896b	e8		inx				inx
.896c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.896f	d0 f6		bne $8967			bne 	_TCHLoop
.8971	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8974	fa		plx				plx
.8975	60		rts				rts
.8976					FixLineBufferCase:
.8976	a2 00		ldx #$00			ldx 	#0
.8978					_FLBCLoop:
.8978	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.897b	f0 22		beq $899f			beq 	_FLBCExit 					; end of string.
.897d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.897f	f0 11		beq $8992			beq 	_FLBCInQuotes
.8981	e8		inx				inx
.8982	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8984	90 f2		bcc $8978			bcc 	_FLBCLoop
.8986	c9 7b		cmp #$7b			cmp 	#'z'+1
.8988	b0 ee		bcs $8978			bcs 	_FLBCLoop
.898a	38		sec				sec 								; make U/C
.898b	e9 20		sbc #$20			sbc 	#32
.898d	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8990	80 e6		bra $8978			bra 	_FLBCLoop
.8992					_FLBCInQuotes:
.8992	e8		inx				inx 								; advance
.8993	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8996	f0 07		beq $899f			beq 	_FLBCExit 					; exit on EOS
.8998	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.899a	d0 f6		bne $8992			bne 	_FLBCInQuotes
.899c	e8		inx				inx 								; skip over it
.899d	80 d9		bra $8978			bra 	_FLBCLoop
.899f					_FLBCExit:
.899f	60		rts				rts
.89a0					TokeniseExtractLineNumber:
.89a0	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.89a3	48		pha				pha
.89a4	ad 07 07	lda $0707			lda 	tokenLineNumber
.89a7	48		pha				pha
.89a8	20 de 89	jsr $89de			jsr 	_TELNTimes2 				; line # x 4
.89ab	20 de 89	jsr $89de			jsr 	_TELNTimes2 				; line # x 2
.89ae	18		clc				clc 								; add stacked value
.89af	68		pla				pla
.89b0	6d 07 07	adc $0707			adc 	tokenLineNumber
.89b3	8d 07 07	sta $0707			sta 	tokenLineNumber
.89b6	68		pla				pla
.89b7	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.89ba	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.89bd	20 de 89	jsr $89de			jsr 	_TELNTimes2 				; line # x 10
.89c0	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.89c3	e8		inx				inx
.89c4	29 0f		and #$0f			and 	#15 						; add to line #
.89c6	18		clc				clc
.89c7	6d 07 07	adc $0707			adc 	tokenLineNumber
.89ca	8d 07 07	sta $0707			sta 	tokenLineNumber
.89cd	90 03		bcc $89d2			bcc 	_TLENNoCarry
.89cf	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.89d2					_TLENNoCarry:
.89d2	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.89d5	c9 30		cmp #$30			cmp 	#'0'
.89d7	90 04		bcc $89dd			bcc 	_TLENExit
.89d9	c9 3a		cmp #$3a			cmp 	#'9'+1
.89db	90 c3		bcc $89a0			bcc 	TokeniseExtractLineNumber
.89dd					_TLENExit:
.89dd	60		rts				rts
.89de					_TELNTimes2:
.89de	0e 07 07	asl $0707			asl 	tokenLineNumber
.89e1	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.89e4	60		rts				rts
.89e5					TokeniseWriteByte:
.89e5	da		phx				phx
.89e6	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.89e9	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.89ec	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.89ef	fa		plx				plx
.89f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.89f1					CheckCreateVariableRecord:
.89f1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.89f3	85 36		sta $36				sta 	0+zTemp0
.89f5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.89f7	85 37		sta $37				sta 	1+zTemp0
.89f9	20 0a 86	jsr $860a			jsr 	VariableOpen 				; make variable space available
.89fc					_CCVSearch:
.89fc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.89fe	f0 2c		beq $8a2c			beq 	_CCVFail
.8a00	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8a02	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8a04	cd 03 07	cmp $0703			cmp 	identHash
.8a07	d0 16		bne $8a1f			bne 	_CCVNext
.8a09	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8a0b	ae 00 07	ldx $0700			ldx 	identStart
.8a0e					_CCVCompare:
.8a0e	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8a11	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8a13	e8		inx				inx 								; advance pointers
.8a14	c8		iny				iny
.8a15	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8a16	d0 07		bne $8a1f			bne 	_CCVNext  					; didn't match go to next.
.8a18	90 f4		bcc $8a0e			bcc 	_CCVCompare 				; not finished yet.
.8a1a	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8a1d	f0 41		beq $8a60			beq 	_CCVFound 					; yes, we were successful
.8a1f					_CCVNext:
.8a1f	18		clc				clc
.8a20	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8a22	65 36		adc $36				adc 	zTemp0
.8a24	85 36		sta $36				sta 	zTemp0
.8a26	90 d4		bcc $89fc			bcc 	_CCVSearch
.8a28	e6 37		inc $37				inc 	zTemp0+1
.8a2a	80 d0		bra $89fc			bra 	_CCVSearch
.8a2c					_CCVFail:
.8a2c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8a2e	ad 03 07	lda $0703			lda 	identHash
.8a31	91 36		sta ($36),y			sta 	(zTemp0),y
.8a33	c8		iny				iny 								; offset 2 is the type byte
.8a34	ad 04 07	lda $0704			lda 	identTypeByte
.8a37	91 36		sta ($36),y			sta 	(zTemp0),y
.8a39	c8		iny				iny
.8a3a					_CCVData:
.8a3a	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8a3c	91 36		sta ($36),y			sta 	(zTemp0),y
.8a3e	c8		iny				iny
.8a3f	c0 08		cpy #$08			cpy 	#8
.8a41	90 f7		bcc $8a3a			bcc 	_CCVData
.8a43	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8a46					_CCVCopyName:
.8a46	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a49	91 36		sta ($36),y			sta 	(zTemp0),y
.8a4b	e8		inx				inx
.8a4c	c8		iny				iny
.8a4d	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8a50	d0 f4		bne $8a46			bne 	_CCVCopyName
.8a52	98		tya				tya 								; patch offset
.8a53	92 36		sta ($36)			sta 	(zTemp0)
.8a55	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8a57	91 36		sta ($36),y			sta 	(zTemp0),y
.8a59	88		dey				dey
.8a5a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8a5c	09 80		ora #$80			ora 	#$80
.8a5e	91 36		sta ($36),y			sta 	(zTemp0),y
.8a60					_CCVFound:
.8a60	20 0b 86	jsr $860b			jsr 	VariableClose 				; map out variables, perhaps.
.8a63	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8a65	38		sec				sec
.8a66	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8a68	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8a6a	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.8a6d	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8a6f	20 e5 89	jsr $89e5			jsr 	TokeniseWriteByte
.8a72	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
