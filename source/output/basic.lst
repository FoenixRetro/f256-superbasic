
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 15:28:18 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					dataPointer:
>0716							.fill 	5
.071b					inDataStatement:
>071b							.fill 	1
.071c					tbOffset:
>071c							.fill 	1
.071d					AssemblerAddress:
>071d							.fill 	2
.071f					AssemblerControl:
>071f							.fill 	1
.0720					ParamStart:
>0720							.fill 	2
.0722					IsGroup1:
>0722							.fill 	1
.0723					BaseOpcode:
>0723							.fill 	1
.0724					ModeMask:
>0724							.fill 	1
.0725					tokenOffset:
>0725							.fill 	1
.0726					tokenLineNumber:
>0726							.fill 	2
.0728					tokenBuffer:
>0728							.fill 	253
.0825					lineBuffer:
>0825							.fill 	MaxLineSize+1
.0876					numberBuffer:
>0876							.fill 	34
.0898					decimalBuffer:
>0898							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 5b 8c	jsr $8c5b			jsr 	PrintStringXA
.800a	20 f3 87	jsr $87f3			jsr 	NewCommand 					; erase current program
.800d	20 f2 97	jsr $97f2			jsr 	BackloadProgram
.8010	4c 1e 84	jmp $841e			jmp 	WarmStart
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13,0
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d 00
>8036							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8036					VectorSetPunc:
>8036	ac 8d					.word	ShiftLeft                        ; $00 <<
>8038	a6 8c					.word	BinaryCompareLessEqual           ; $01 <=
>803a	9c 8c					.word	BinaryCompareNotEqual            ; $02 <>
>803c	58 a4					.word	SyntaxError                      ; $03 !!3
>803e	58 a4					.word	SyntaxError                      ; $04 ><
>8040	b0 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8042	af 8d					.word	ShiftRight                       ; $06 >>
>8044	58 a4					.word	SyntaxError                      ; $07 !!7
>8046	58 a4					.word	SyntaxError                      ; $08 !!8
>8048	58 a4					.word	SyntaxError                      ; $09 !!9
>804a	58 a4					.word	SyntaxError                      ; $0a !!10
>804c	58 a4					.word	SyntaxError                      ; $0b !!11
>804e	58 a4					.word	SyntaxError                      ; $0c !!12
>8050	58 a4					.word	SyntaxError                      ; $0d !!13
>8052	58 a4					.word	SyntaxError                      ; $0e !!14
>8054	58 a4					.word	SyntaxError                      ; $0f !!15
>8056	58 a4					.word	SyntaxError                      ; $10 @
>8058	58 a4					.word	SyntaxError                      ; $11 !!17
>805a	58 a4					.word	SyntaxError                      ; $12 !!18
>805c	58 a4					.word	SyntaxError                      ; $13 [
>805e	8f 9e					.word	IntegerDivide                    ; $14 \
>8060	58 a4					.word	SyntaxError                      ; $15 ]
>8062	35 8f					.word	EorInteger                       ; $16 ^
>8064	58 a4					.word	SyntaxError                      ; $17 _
>8066	58 a4					.word	SyntaxError                      ; $18 `
>8068	58 a4					.word	SyntaxError                      ; $19 !!25
>806a	58 a4					.word	SyntaxError                      ; $1a !!26
>806c	58 a4					.word	SyntaxError                      ; $1b {
>806e	ef 8e					.word	OraInteger                       ; $1c |
>8070	58 a4					.word	SyntaxError                      ; $1d }
>8072	58 a4					.word	SyntaxError                      ; $1e ~
>8074	58 a4					.word	SyntaxError                      ; $1f [7m<7F>[m
>8076	58 a4					.word	SyntaxError                      ; $20
>8078	7b 8f					.word	WordIndirect                     ; $21 !
>807a	58 a4					.word	SyntaxError                      ; $22 "
>807c	58 a4					.word	SyntaxError                      ; $23 #
>807e	58 a4					.word	SyntaxError                      ; $24 $
>8080	dc 9e					.word	IntegerModulus                   ; $25 %
>8082	a9 8e					.word	AndInteger                       ; $26 &
>8084	58 a4					.word	SyntaxError                      ; $27 '
>8086	58 a4					.word	SyntaxError                      ; $28 (
>8088	58 a4					.word	SyntaxError                      ; $29 )
>808a	51 9f					.word	MulInteger                       ; $2a *
>808c	43 8e					.word	AddInteger                       ; $2b +
>808e	58 a4					.word	SyntaxError                      ; $2c ,
>8090	7e 8e					.word	SubInteger                       ; $2d -
>8092	58 a4					.word	SyntaxError                      ; $2e .
>8094	e8 a0					.word	FDivideCommand                   ; $2f /
>8096	58 a4					.word	SyntaxError                      ; $30 0
>8098	58 a4					.word	SyntaxError                      ; $31 1
>809a	58 a4					.word	SyntaxError                      ; $32 2
>809c	58 a4					.word	SyntaxError                      ; $33 3
>809e	58 a4					.word	SyntaxError                      ; $34 4
>80a0	58 a4					.word	SyntaxError                      ; $35 5
>80a2	58 a4					.word	SyntaxError                      ; $36 6
>80a4	58 a4					.word	SyntaxError                      ; $37 7
>80a6	58 a4					.word	SyntaxError                      ; $38 8
>80a8	58 a4					.word	SyntaxError                      ; $39 9
>80aa	58 a4					.word	SyntaxError                      ; $3a :
>80ac	58 a4					.word	SyntaxError                      ; $3b ;
>80ae	88 8c					.word	BinaryCompareLess                ; $3c <
>80b0	7e 8c					.word	BinaryCompareEqual               ; $3d =
>80b2	92 8c					.word	BinaryCompareGreater             ; $3e >
>80b4	a2 8f					.word	ByteIndirect                     ; $3f ?
.80b6					VectorSet0:
>80b6	ab 89					.word	EOLCommand                       ; $80 !0:EOF
>80b8	b8 89					.word	Shift1Command                    ; $81 !1:SH1
>80ba	c0 89					.word	Shift2Command                    ; $82 !2:SH2
>80bc	2e a2					.word	AbsUnary                         ; $83 ABS(
>80be	6c 94					.word	AllocUnary                       ; $84 ALLOC(
>80c0	3e a2					.word	AscUnary                         ; $85 ASC(
>80c2	27 95					.word	ChrUnary                         ; $86 CHR$(
>80c4	7a 8c					.word	UnaryFalse                       ; $87 FALSE
>80c6	4b a2					.word	FracUnary                        ; $88 FRAC(
>80c8	61 a2					.word	IntUnary                         ; $89 INT(
>80ca	b7 a2					.word	IsValUnary                       ; $8a ISVAL(
>80cc	01 96					.word	Unary_Left                       ; $8b LEFT$(
>80ce	73 a2					.word	LenUnary                         ; $8c LEN(
>80d0	2b 96					.word	Unary_Mid                        ; $8d MID$(
>80d2	c4 94					.word	Unary_Not                        ; $8e NOT(
>80d4	11 96					.word	Unary_Right                      ; $8f RIGHT$(
>80d6	da 94					.word	Unary_Rnd                        ; $90 RND(
>80d8	8d a2					.word	SgnUnary                         ; $91 SGN(
>80da	39 95					.word	SpcUnary                         ; $92 SPC(
>80dc	54 95					.word	Unary_Str                        ; $93 STR$(
>80de	6e 8c					.word	UnaryTrue                        ; $94 TRUE
>80e0	ad a2					.word	ValUnary                         ; $95 VAL(
>80e2	a8 85					.word	ForCommand                       ; $96 FOR
>80e4	f5 86					.word	IfCommand                        ; $97 IF
>80e6	c8 89					.word	Unused1                          ; $98 PROC
>80e8	eb 88					.word	Command_REPEAT                   ; $99 REPEAT
>80ea	d3 8b					.word	Command_WHILE                    ; $9a WHILE
>80ec	1e 87					.word	EndIf                            ; $9b ENDIF
>80ee	68 9e					.word	Command_ENDPROC                  ; $9c ENDPROC
>80f0	62 86					.word	NextCommand                      ; $9d NEXT
>80f2	c8 89					.word	Unused4                          ; $9e THEN
>80f4	f4 88					.word	Command_UNTIL                    ; $9f UNTIL
>80f6	f4 8b					.word	Command_WEND                     ; $a0 WEND
>80f8	7d 84					.word	CallCommand                      ; $a1 CALL
>80fa	58 a4					.word	SyntaxError                      ; $a2 CLS
>80fc	e0 84					.word	Command_Data                     ; $a3 DATA
>80fe	e8 84					.word	DimCommand                       ; $a4 DIM
>8100	c8 89					.word	Unused3                          ; $a5 DOWNTO
>8102	17 87					.word	ElseCode                         ; $a6 ELSE
>8104	bb 86					.word	Command_GOSUB                    ; $a7 GOSUB
>8106	d9 86					.word	GotoCommand                      ; $a8 GOTO
>8108	1f 87					.word	LetCommand                       ; $a9 LET
>810a	fd 87					.word	Command_Print                    ; $aa PRINT
>810c	85 88					.word	Command_Read                     ; $ab READ
>810e	de 88					.word	RemCommand                       ; $ac REM
>8110	cb 86					.word	Command_RETURN                   ; $ad RETURN
>8112	c8 89					.word	Unused2                          ; $ae TO
.8114					VectorSet1:
>8114	58 a4					.word	SyntaxError                      ; $80 !0:EOF
>8116	58 a4					.word	SyntaxError                      ; $81 !1:SH1
>8118	58 a4					.word	SyntaxError                      ; $82 !2:SH2
>811a	4e 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>811c	6d 84					.word	AssertCommand                    ; $84 ASSERT
>811e	8b 84					.word	ClearCommand                     ; $85 CLEAR
>8120	a5 85					.word	EndCommand                       ; $86 END
>8122	58 87					.word	Command_List                     ; $87 LIST
>8124	f3 87					.word	NewCommand                       ; $88 NEW
>8126	0d 89					.word	Command_Restore                  ; $89 RESTORE
>8128	3f 89					.word	CommandRUN                       ; $8a RUN
>812a	cb 89					.word	StopCommand                      ; $8b STOP
.812c					VectorSet2:
>812c	58 a4					.word	SyntaxError                      ; $80 !0:EOF
>812e	58 a4					.word	SyntaxError                      ; $81 !1:SH1
>8130	58 a4					.word	SyntaxError                      ; $82 !2:SH2
>8132	1b a3					.word	Assemble_adc                     ; $83 ADC
>8134	13 a3					.word	Assemble_and                     ; $84 AND
>8136	2f a3					.word	Assemble_asl                     ; $85 ASL
>8138	99 a3					.word	Assemble_bcc                     ; $86 BCC
>813a	9d a3					.word	Assemble_bcs                     ; $87 BCS
>813c	a5 a3					.word	Assemble_beq                     ; $88 BEQ
>813e	5c a3					.word	Assemble_bit                     ; $89 BIT
>8140	8d a3					.word	Assemble_bmi                     ; $8a BMI
>8142	a1 a3					.word	Assemble_bne                     ; $8b BNE
>8144	89 a3					.word	Assemble_bpl                     ; $8c BPL
>8146	a9 a3					.word	Assemble_bra                     ; $8d BRA
>8148	ad a3					.word	Assemble_brk                     ; $8e BRK
>814a	91 a3					.word	Assemble_bvc                     ; $8f BVC
>814c	95 a3					.word	Assemble_bvs                     ; $90 BVS
>814e	b5 a3					.word	Assemble_clc                     ; $91 CLC
>8150	09 a4					.word	Assemble_cld                     ; $92 CLD
>8152	c9 a3					.word	Assemble_cli                     ; $93 CLI
>8154	f9 a3					.word	Assemble_clv                     ; $94 CLV
>8156	27 a3					.word	Assemble_cmp                     ; $95 CMP
>8158	70 a3					.word	Assemble_cpx                     ; $96 CPX
>815a	6b a3					.word	Assemble_cpy                     ; $97 CPY
>815c	4d a3					.word	Assemble_dec                     ; $98 DEC
>815e	05 a4					.word	Assemble_dex                     ; $99 DEX
>8160	e1 a3					.word	Assemble_dey                     ; $9a DEY
>8162	17 a3					.word	Assemble_eor                     ; $9b EOR
>8164	52 a3					.word	Assemble_inc                     ; $9c INC
>8166	11 a4					.word	Assemble_inx                     ; $9d INX
>8168	01 a4					.word	Assemble_iny                     ; $9e INY
>816a	84 a3					.word	Assemble_jmp                     ; $9f JMP
>816c	7f a3					.word	Assemble_jsr                     ; $a0 JSR
>816e	23 a3					.word	Assemble_lda                     ; $a1 LDA
>8170	48 a3					.word	Assemble_ldx                     ; $a2 LDX
>8172	66 a3					.word	Assemble_ldy                     ; $a3 LDY
>8174	39 a3					.word	Assemble_lsr                     ; $a4 LSR
>8176	15 a4					.word	Assemble_nop                     ; $a5 NOP
>8178	0f a3					.word	Assemble_ora                     ; $a6 ORA
>817a	c5 a3					.word	Assemble_pha                     ; $a7 PHA
>817c	b1 a3					.word	Assemble_php                     ; $a8 PHP
>817e	0d a4					.word	Assemble_phx                     ; $a9 PHX
>8180	cd a3					.word	Assemble_phy                     ; $aa PHY
>8182	d5 a3					.word	Assemble_pla                     ; $ab PLA
>8184	b9 a3					.word	Assemble_plp                     ; $ac PLP
>8186	1d a4					.word	Assemble_plx                     ; $ad PLX
>8188	dd a3					.word	Assemble_ply                     ; $ae PLY
>818a	34 a3					.word	Assemble_rol                     ; $af ROL
>818c	3e a3					.word	Assemble_ror                     ; $b0 ROR
>818e	c1 a3					.word	Assemble_rti                     ; $b1 RTI
>8190	d1 a3					.word	Assemble_rts                     ; $b2 RTS
>8192	2b a3					.word	Assemble_sbc                     ; $b3 SBC
>8194	bd a3					.word	Assemble_sec                     ; $b4 SEC
>8196	19 a4					.word	Assemble_sed                     ; $b5 SED
>8198	d9 a3					.word	Assemble_sei                     ; $b6 SEI
>819a	1f a3					.word	Assemble_sta                     ; $b7 STA
>819c	43 a3					.word	Assemble_stx                     ; $b8 STX
>819e	61 a3					.word	Assemble_sty                     ; $b9 STY
>81a0	57 a3					.word	Assemble_stz                     ; $ba STZ
>81a2	f5 a3					.word	Assemble_tax                     ; $bb TAX
>81a4	f1 a3					.word	Assemble_tay                     ; $bc TAY
>81a6	7a a3					.word	Assemble_trb                     ; $bd TRB
>81a8	75 a3					.word	Assemble_tsb                     ; $be TSB
>81aa	fd a3					.word	Assemble_tsx                     ; $bf TSX
>81ac	e5 a3					.word	Assemble_txa                     ; $c0 TXA
>81ae	ed a3					.word	Assemble_txs                     ; $c1 TXS
>81b0	e9 a3					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81b2					AssembleGroup1:
.81b2	a9 ff		lda #$ff			lda 	#$FF
.81b4	8d 24 07	sta $0724			sta 	ModeMask 					; initialise the mode mask - all for all
.81b7	80 02		bra $81bb			bra 	AsmGroup12
.81b9					AssembleGroup2:
.81b9	a5 00		lda $00				lda 	$00
.81bb					AsmGroup12:
.81bb	8d 22 07	sta $0722			sta 	IsGroup1 					; save the 'group 1' flag
.81be	68		pla				pla 								; pop the return address to access the information following.
.81bf	fa		plx				plx
.81c0	20 49 82	jsr $8249			jsr 	AccessParameters 			; get opcode and save as base
.81c3	8d 23 07	sta $0723			sta 	BaseOpcode
.81c6	ad 22 07	lda $0722			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.81c9	d0 08		bne $81d3			bne 	_AG12HaveMask
.81cb	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.81cd	20 51 82	jsr $8251			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.81d0	8d 24 07	sta $0724			sta 	ModeMask
.81d3					_AG12HaveMask:
.81d3	20 8c 83	jsr $838c			jsr 	TypeAndCalculateOperand 	; get zero page type
.81d6	da		phx				phx 								; save found address mode
.81d7	20 b5 82	jsr $82b5			jsr 	AssembleModeX
.81da	fa		plx				plx  								; restore address mode
.81db	b0 0b		bcs $81e8			bcs 	_AG12Exit
.81dd	20 e9 81	jsr $81e9			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.81e0	20 b5 82	jsr $82b5			jsr 	AssembleModeX
.81e3	b0 03		bcs $81e8			bcs 	_AG12Exit
.81e5	4c 58 a4	jmp $a458			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.81e8					_AG12Exit:
.81e8	60		rts				rts
.81e9					PromoteToAbsolute:
.81e9	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.81eb	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.81ed	f0 19		beq $8208			beq 	_PTADo
.81ef	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.81f1	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.81f3	f0 13		beq $8208			beq 	_PTADo
.81f5	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.81f7	e0 80		cpx #$80			cpx 	#AM_ZEROY
.81f9	f0 0d		beq $8208			beq 	_PTADo
.81fb	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.81fd	e0 d1		cpx #$d1			cpx 	#AM_IND
.81ff	f0 07		beq $8208			beq 	_PTADo
.8201	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8203	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8205	f0 01		beq $8208			beq 	_PTADo
.8207	60		rts				rts
.8208					_PTADo:
.8208	aa		tax				tax
.8209	60		rts				rts
.820a					AssembleGroup3:
.820a	68		pla				pla 								; get parameters, which is just the opcode.
.820b	fa		plx				plx
.820c	20 49 82	jsr $8249			jsr 	AccessParameters 			; get and output opcode
.820f	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.8212	20 f0 83	jsr $83f0			jsr 	CalculateOperand 			; get a 16 bit operand
.8215	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8218	38		sec				sec
.8219	ed 1d 07	sbc $071d			sbc 	AssemblerAddress
.821c	48		pha				pha 								; LSB in A
.821d	ad 10 06	lda $0610			lda 	NSMantissa1
.8220	ed 1e 07	sbc $071e			sbc 	AssemblerAddress+1
.8223	aa		tax				tax 								; MSB in X
.8224	68		pla				pla
.8225	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8226	69 7f		adc #$7f			adc 	#$7F
.8228	90 01		bcc $822b			bcc 	_AG3NoCarry
.822a	e8		inx				inx
.822b					_AG3NoCarry:
.822b	38		sec				sec 								; fix back and write out anyways.
.822c	e9 80		sbc #$80			sbc 	#$80
.822e	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.8231	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8233	f0 0a		beq $823f			beq 	_AG3Exit
.8235	ad 1f 07	lda $071f			lda 	AssemblerControl 			; are we allowing bad values ?
.8238	29 01		and #$01			and 	#1
.823a	f0 03		beq $823f			beq 	_AG3Exit
.823c	4c 5d a4	jmp $a45d			jmp 	RangeError 					; no, branch is out of range
.823f					_AG3Exit:
.823f	60		rts				rts
.8240					AssembleGroup4:
.8240	68		pla				pla 								; pop address
.8241	fa		plx				plx
.8242	20 49 82	jsr $8249			jsr 	AccessParameters 			; access and get first
.8245	20 61 82	jsr $8261			jsr 	AssemblerWriteByte 			; output it.
.8248	60		rts				rts
.8249					AccessParameters:
.8249	8d 20 07	sta $0720			sta 	ParamStart
.824c	8e 21 07	stx $0721			stx 	ParamStart+1
.824f	a9 01		lda #$01			lda 	#1
.8251					GetParameter:
.8251	5a		phy				phy
.8252	a8		tay				tay
.8253	ad 20 07	lda $0720			lda 	ParamStart
.8256	85 36		sta $36				sta 	zTemp0
.8258	ad 21 07	lda $0721			lda 	ParamStart+1
.825b	85 37		sta $37				sta 	zTemp0+1
.825d	b1 36		lda ($36),y			lda 	(zTemp0),y
.825f	7a		ply				ply
.8260	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8261					AssemblerWriteByte:
.8261	48		pha			pha
.8262	ad 1f 07	lda $071f		lda 	AssemblerControl 				; check printing bytes ?
.8265	29 02		and #$02		and 	#2
.8267	f0 1b		beq $8284		beq 	_AWBNoPrint
.8269	ad 1e 07	lda $071e		lda		AssemblerAddress+1 				; print address
.826c	20 9f 82	jsr $829f		jsr 	PrintHex
.826f	ad 1d 07	lda $071d		lda		AssemblerAddress
.8272	20 9f 82	jsr $829f		jsr 	PrintHex
.8275	a9 20		lda #$20		lda 	#' '
.8277	20 a5 a6	jsr $a6a5		jsr 	EXTPrintCharacter
.827a	68		pla			pla 									; print byte
.827b	48		pha			pha
.827c	20 9f 82	jsr $829f		jsr 	PrintHex
.827f	a9 0d		lda #$0d		lda 	#13
.8281	20 a5 a6	jsr $a6a5		jsr 	EXTPrintCharacter
.8284					_AWBNoPrint:
.8284	ad 1d 07	lda $071d		lda		AssemblerAddress				; copy address to zTemp0
.8287	85 36		sta $36			sta 	zTemp0
.8289	ad 1e 07	lda $071e		lda		AssemblerAddress+1
.828c	f0 0e		beq $829c		beq 	_AWBRange
.828e	85 37		sta $37			sta 	zTemp0+1
.8290	68		pla			pla 									; write byte out
.8291	92 36		sta ($36)		sta 	(zTemp0)
.8293	ee 1d 07	inc $071d		inc 	AssemblerAddress 				; bump address
.8296	d0 03		bne $829b		bne 	_AWBNoCarry
.8298	ee 1e 07	inc $071e		inc 	AssemblerAddress+1
.829b					_AWBNoCarry:
.829b	60		rts			rts
.829c					_AWBRange:
.829c	4c 5d a4	jmp $a45d		jmp 	RangeError
.829f					PrintHex:
.829f	48		pha				pha
.82a0	4a		lsr a				lsr 	a
.82a1	4a		lsr a				lsr 	a
.82a2	4a		lsr a				lsr 	a
.82a3	4a		lsr a				lsr 	a
.82a4	20 a8 82	jsr $82a8			jsr 	_PrintNibble
.82a7	68		pla				pla
.82a8					_PrintNibble:
.82a8	29 0f		and #$0f			and 	#15
.82aa	c9 0a		cmp #$0a			cmp 	#10
.82ac	90 02		bcc $82b0			bcc 	_NoShift
.82ae	69 06		adc #$06			adc 	#6
.82b0					_NoShift:
.82b0	69 30		adc #$30			adc 	#48
.82b2	4c a5 a6	jmp $a6a5			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82b5					AssembleModeX:
.82b5	5a		phy				phy
.82b6	ad 22 07	lda $0722			lda 	IsGroup1
.82b9	f0 17		beq $82d2			beq 	_AMXGroup2
.82bb	8a		txa				txa 							; is it in group # 1
.82bc	29 40		and #$40			and 	#AM_ISG1
.82be	f0 50		beq $8310			beq 	_AMXFail 				; no, give up.
.82c0	8a		txa				txa 							; get back.
.82c1	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.82c3	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.82c5	d0 22		bne $82e9			bne 	_AMXHaveInfo
.82c7	ad 23 07	lda $0723			lda 	BaseOpcode 				; cannot store immediate.
.82ca	c9 81		cmp #$81			cmp 	#$81
.82cc	f0 42		beq $8310			beq 	_AMXFail
.82ce	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.82d0	80 17		bra $82e9			bra 	_AMXHaveInfo 			; odd design decision there.
.82d2					_AMXGroup2:
.82d2	8a		txa				txa 							; is it in group 2 ?
.82d3	29 20		and #$20			and 	#AM_ISG2
.82d5	f0 39		beq $8310			beq 	_AMXFail 				; no, give up.
.82d7	8a		txa				txa 							; get the offset into Y
.82d8	29 1f		and #$1f			and 	#$1F
.82da	4a		lsr a				lsr 	a 						; make it 0-7.
.82db	4a		lsr a				lsr  	a
.82dc	a8		tay				tay
.82dd	ad 24 07	lda $0724			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.82e0					_AMXCheckOkay:
.82e0	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.82e1	88		dey				dey
.82e2	10 fc		bpl $82e0			bpl 	_AMXCheckOkay
.82e4	90 2a		bcc $8310			bcc 	_AMXFail 				; not allowed.
.82e6	8a		txa				txa  							; get mask back
.82e7	29 1f		and #$1f			and 	#$1F
.82e9					_AMXHaveInfo:
.82e9	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.82eb	10 05		bpl $82f2			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.82ed	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.82f0	d0 1e		bne $8310			bne 	_AMXFail
.82f2					_AMXAnySize:
.82f2	18		clc				clc 							; add offset to the base opcode
.82f3	6d 23 07	adc $0723			adc 	BaseOpcode
.82f6					_AMXOutputCode:
.82f6	20 61 82	jsr $8261			jsr 	AssemblerWriteByte 		; write the opcode out.
.82f9	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.82fb	f0 10		beq $830d			beq 	_AMXExit
.82fd	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.8300	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.8303	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8305	30 06		bmi $830d			bmi 	_AMXExit
.8307	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.830a	20 61 82	jsr $8261			jsr 	AssemblerWriteByte
.830d					_AMXExit:
.830d	7a		ply				ply
.830e	38		sec				sec
.830f	60		rts				rts
.8310					_AMXFail:
.8310	a0 00		ldy #$00			ldy 	#0
.8312					_AMXCheckOddities:
.8312	8a		txa				txa
.8313	d9 3b 83	cmp $833b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8316	d0 16		bne $832e			bne 	_AMXCONext
.8318	b9 39 83	lda $8339,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.831b	cd 23 07	cmp $0723			cmp 	BaseOpcode
.831e	d0 0e		bne $832e			bne 	_AMXCONext
.8320	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8322	10 05		bpl $8329			bpl 	_AMXCONotZero
.8324	ad 10 06	lda $0610			lda 	NSMantissa1
.8327	d0 05		bne $832e			bne 	_AMXCONext
.8329					_AMXCONotZero:
.8329	b9 3a 83	lda $833a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.832c	80 c8		bra $82f6			bra 	_AMXOutputCode 			; and assemble it
.832e					_AMXCONext:
.832e	c8		iny				iny
.832f	c8		iny				iny
.8330	c8		iny				iny
.8331	b9 39 83	lda $8339,y			lda 	ExtraOpcode+0,y 		; end of table
.8334	d0 dc		bne $8312			bne 	_AMXCheckOddities
.8336					_AMXCOFail:
.8336	7a		ply				ply
.8337	18		clc				clc
.8338	60		rts				rts
.8339					ExtraOpcode:
>8339	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>833c	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>833f	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8342	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8345	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8348	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>834b	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>834e	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8351	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8354	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8357	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8358					LabelHere:
.8358	c8		iny				iny 								; skip .
.8359	a2 00		ldx #$00			ldx 	#0 							; get a term
.835b	20 dc 92	jsr $92dc			jsr 	EvaluateTerm 				; get a term
.835e	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.8361	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8363	d0 24		bne $8389			bne 	_ALType
.8365	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8368	85 36		sta $36				sta 	zTemp0
.836a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.836d	85 37		sta $37				sta 	zTemp0+1
.836f	5a		phy				phy 								; copy address in.
.8370	a0 01		ldy #$01			ldy 	#1
.8372	ad 1d 07	lda $071d			lda	 	AssemblerAddress
.8375	92 36		sta ($36)			sta 	(zTemp0)
.8377	ad 1e 07	lda $071e			lda	 	AssemblerAddress+1
.837a	91 36		sta ($36),y			sta 	(zTemp0),y
.837c	c8		iny				iny
.837d	a9 00		lda #$00			lda 	#0
.837f	91 36		sta ($36),y			sta 	(zTemp0),y
.8381	c8		iny				iny
.8382	91 36		sta ($36),y			sta 	(zTemp0),y
.8384	c8		iny				iny
.8385	91 36		sta ($36),y			sta 	(zTemp0),y
.8387	7a		ply				ply
.8388	60		rts				rts
.8389					_ALType:
.8389	4c 62 a4	jmp $a462			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.838c					TypeAndCalculateOperand:
.838c	b1 30		lda ($30),y			lda 	(codePtr),y
.838e	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8390	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8392	f0 5b		beq $83ef			beq 	_TACOExit
.8394	c9 80		cmp #$80			cmp 	#KWC_EOL
.8396	f0 57		beq $83ef			beq 	_TACOExit
.8398	c8		iny				iny
.8399	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.839b	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.839d	f0 51		beq $83f0			beq 	CalculateOperand
.839f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83a1	f0 1f		beq $83c2			beq 	_TACOIndirect
.83a3	88		dey				dey 								; undo get of first character
.83a4	20 f0 83	jsr $83f0			jsr 	CalculateOperand 			; get operand
.83a7	b1 30		lda ($30),y			lda 	(codePtr),y
.83a9	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83ab	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83ad	d0 40		bne $83ef			bne 	_TACOExit
.83af	c8		iny				iny
.83b0	20 38 9e	jsr $9e38			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83b3	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83b5	c9 58		cmp #$58			cmp 	#'X'
.83b7	f0 36		beq $83ef			beq 	_TACOExit
.83b9	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.83bb	c9 59		cmp #$59			cmp 	#'Y'
.83bd	f0 30		beq $83ef			beq 	_TACOExit
.83bf					_TACOSyntax:
.83bf	4c 58 a4	jmp $a458			jmp 	SyntaxError
.83c2					_TACOIndirect:
.83c2	20 f0 83	jsr $83f0			jsr 	CalculateOperand 			; get the operand
.83c5	b1 30		lda ($30),y			lda 	(codePtr),y
.83c7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.83c9	f0 17		beq $83e2			beq 	_TACOIndX
.83cb	20 76 9e	jsr $9e76			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.83ce	b1 30		lda ($30),y			lda 	(codePtr),y
.83d0	a2 d1		ldx #$d1			ldx 	#AM_IND
.83d2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.83d4	d0 19		bne $83ef			bne 	_TACOExit
.83d6	c8		iny				iny
.83d7	20 38 9e	jsr $9e38			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83da	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.83dc	d0 e1		bne $83bf			bne 	_TACOSyntax
.83de	a2 d0		ldx #$d0			ldx 	#AM_INDY
.83e0	80 0d		bra $83ef			bra 	_TACOExit
.83e2					_TACOIndX:
.83e2	c8		iny				iny
.83e3	20 38 9e	jsr $9e38			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.83e6	c9 58		cmp #$58			cmp 	#'X' 						; check X
.83e8	d0 d5		bne $83bf			bne 	_TACOSyntax
.83ea	20 76 9e	jsr $9e76			jsr 	CheckRightBracket			; check )
.83ed	a2 c0		ldx #$c0			ldx 	#AM_INDX
.83ef					_TACOExit:
.83ef	60		rts				rts
.83f0					CalculateOperand:
.83f0	48		pha				pha
.83f1	da		phx				phx
.83f2	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.83f4	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger
.83f7	fa		plx				plx
.83f8	68		pla				pla
.83f9	60		rts				rts
.9e38					TACOCheckXY:
.9e38	b1 30		lda ($30),y			lda 	(codePtr),y
.9e3a	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9e3c	c9 40		cmp #$40			cmp 	#$40
.9e3e	d0 21		bne $9e61			bne 	_TCXYFail
.9e40	b1 30		lda ($30),y			lda 	(codePtr),y
.9e42	18		clc				clc
.9e43	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e45	85 37		sta $37				sta 	zTemp0+1
.9e47	c8		iny				iny
.9e48	b1 30		lda ($30),y			lda 	(codePtr),y
.9e4a	c8		iny				iny
.9e4b	85 36		sta $36				sta 	zTemp0
.9e4d	5a		phy				phy 								; save position
.9e4e	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9e50	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e52	d0 0c		bne $9e60			bne 	_TCXYPopFail
.9e54	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9e56	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e58	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9e5a	f0 08		beq $9e64			beq 	_TCXYFound
.9e5c	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9e5e	f0 04		beq $9e64			beq 	_TCXYFound
.9e60					_TCXYPopFail:
.9e60	7a		ply				ply
.9e61					_TCXYFail:
.9e61	a9 00		lda #$00			lda 	#0
.9e63	60		rts				rts
.9e64					_TCXYFound:
.9e64	7a		ply				ply 								; restore position
.9e65	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9e67	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83fa					EditProgramCode:
.83fa	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line.
.83fd	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1
.8400	20 05 9e	jsr $9e05			jsr 	MemorySearch
.8403	90 05		bcc $840a			bcc 	_EPCNoDelete 				; reached the end don't delete
.8405	d0 03		bne $840a			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8407	20 e9 a6	jsr $a6e9			jsr 	MemoryDeleteLine 			; delete the line
.840a					_EPCNoDelete:
.840a	ad 28 07	lda $0728			lda 	TokenBuffer 				; buffer empty
.840d	c9 80		cmp #$80			cmp 	#KWC_EOL
.840f	f0 0c		beq $841d			beq 	_EPCNoInsert
.8411	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8414	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8417	20 05 9e	jsr $9e05			jsr 	MemorySearch
.841a	20 20 a7	jsr $a720			jsr 	MemoryInsertLine 			; insert the line
.841d					_EPCNoInsert:
.841d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.841e					WarmStart:
.841e	a2 ff		ldx #$ff			ldx 	#$FF
.8420	9a		txs				txs
.8421	20 bb a6	jsr $a6bb			jsr 	EXTInputLine 				; get line to lineBuffer
.8424	20 35 9b	jsr $9b35			jsr 	TokeniseLine 				; tokenise the line
.8427	ad 26 07	lda $0726			lda 	TokenLineNumber 			; line number ?
.842a	0d 27 07	ora $0727			ora 	TokenLineNumber+1
.842d	d0 17		bne $8446			bne 	_WSEditCode 				; if so,edit code.
.842f	9c 25 07	stz $0725			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8432	a9 25		lda #$25			lda 	#((TokenOffset) & $FF)
.8434	85 30		sta $30				sta 	codePtr
.8436	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8438	85 31		sta $31				sta 	codePtr+1
.843a	ad 28 07	lda $0728			lda 	TokenBuffer 				; nothing to run
.843d	c9 80		cmp #$80			cmp 	#KWC_EOL
.843f	f0 dd		beq $841e			beq 	WarmStart
.8441	20 51 89	jsr $8951			jsr 	RUNCodePointerLine 			; execute that line.
.8444	80 d8		bra $841e			bra 	WarmStart
.8446					_WSEditCode:
.8446	20 fa 83	jsr $83fa			jsr 	EditProgramCode
.8449	20 8b 84	jsr $848b			jsr 	ClearCommand
.844c	80 d0		bra $841e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.844e					AssembleCommand:
.844e	a2 00		ldx #$00			ldx 	#0
.8450	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger 		; start address
.8453	ad 08 06	lda $0608			lda 	NSMantissa0
.8456	8d 1d 07	sta $071d			sta 	AssemblerAddress
.8459	ad 10 06	lda $0610			lda 	NSMantissa1
.845c	8d 1e 07	sta $071e			sta 	AssemblerAddress+1
.845f	20 7e 9e	jsr $9e7e			jsr 	CheckComma
.8462	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger 		; options
.8465	ad 08 06	lda $0608			lda 	NSMantissa0
.8468	8d 1f 07	sta $071f			sta 	AssemblerControl
.846b	60		rts				rts
.846c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.846d					AssertCommand:
.846d	a2 00		ldx #$00			ldx 	#0
.846f	20 cc 96	jsr $96cc			jsr 	EvaluateInteger 			; the assert test
.8472	20 85 97	jsr $9785			jsr 	NSMIsZero 					; exit if result is non zero.
.8475	d0 05		bne $847c			bne 	_ACExit
.8477	a9 0a		lda #$0a		lda	#10
.8479	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.847c					_ACExit:
.847c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.847d					CallCommand:
.847d	a2 00		ldx #$00			ldx 	#0
.847f	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger
.8482	ad 10 06	lda $0610			lda 	NSMantissa1
.8485	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8488	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.848b					ClearCommand:
.848b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.848d	85 36		sta $36				sta 	0+zTemp0
.848f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8491	85 37		sta $37				sta 	1+zTemp0
.8493					_ClearZeroLoop:
.8493	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8495	f0 24		beq $84bb			beq 	_ClearZeroEnd
.8497	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8499	a9 00		lda #$00			lda 	#0
.849b					_ClearOneVariable:
.849b	91 36		sta ($36),y			sta 	(zTemp0),y
.849d	c8		iny				iny
.849e	c0 08		cpy #$08			cpy 	#8
.84a0	d0 f9		bne $849b			bne 	_ClearOneVariable
.84a2	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84a4	b1 36		lda ($36),y			lda 	(zTemp0),y
.84a6	c9 18		cmp #$18			cmp 	#NSTProcedure
.84a8	d0 04		bne $84ae			bne 	_ClearNotProcedure
.84aa	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84ac	91 36		sta ($36),y			sta 	(zTemp0),y
.84ae					_ClearNotProcedure:
.84ae	18		clc				clc 								; go to the next variable
.84af	b2 36		lda ($36)			lda 	(zTemp0)
.84b1	65 36		adc $36				adc 	zTemp0
.84b3	85 36		sta $36				sta 	zTemp0
.84b5	90 dc		bcc $8493			bcc 	_ClearZeroLoop
.84b7	e6 37		inc $37				inc 	zTemp0+1
.84b9	80 d8		bra $8493			bra 	_ClearZeroLoop
.84bb					_ClearZeroEnd:
.84bb	18		clc				clc
.84bc	a5 36		lda $36				lda 	zTemp0
.84be	69 01		adc #$01			adc 	#1
.84c0	8d 0c 07	sta $070c			sta 	lowMemPtr
.84c3	a5 37		lda $37				lda 	zTemp0+1
.84c5	69 00		adc #$00			adc 	#0
.84c7	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.84ca	20 e5 97	jsr $97e5			jsr 	StackReset
.84cd	20 31 a6	jsr $a631			jsr 	StringSystemInitialise
.84d0	20 22 8b	jsr $8b22			jsr 	ProcedureScan
.84d3	20 0d 89	jsr $890d			jsr 	Command_Restore
.84d6	9c 1d 07	stz $071d			stz 	AssemblerAddress
.84d9	9c 1e 07	stz $071e			stz 	AssemblerAddress+1
.84dc	9c 1f 07	stz $071f			stz 	AssemblerControl
.84df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84e0					Command_Data:
.84e0	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.84e2	a2 80		ldx #$80			ldx 	#KWC_EOL
.84e4	20 74 8b	jsr $8b74			jsr 	ScanForward
.84e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84e8					DimCommand:
.84e8	b1 30		lda ($30),y			lda 	(codePtr),y
.84ea	29 c0		and #$c0			and 	#$C0
.84ec	c9 40		cmp #$40			cmp 	#$40
.84ee	d0 7a		bne $856a			bne 	_DCSyntax
.84f0	b1 30		lda ($30),y			lda 	(codePtr),y
.84f2	18		clc				clc
.84f3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84f5	85 3f		sta $3f				sta 	zaTemp+1
.84f7	c8		iny				iny
.84f8	b1 30		lda ($30),y			lda 	(codePtr),y
.84fa	c8		iny				iny
.84fb	85 3e		sta $3e				sta 	zaTemp
.84fd	5a		phy				phy
.84fe	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8500	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8502	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8504	c9 18		cmp #$18			cmp 	#NSTProcedure
.8506	f0 62		beq $856a			beq 	_DCSyntax
.8508	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.850a	29 04		and #$04			and 	#NSBIsArray
.850c	f0 64		beq $8572			beq 	_DCType
.850e	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8510	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8512	d0 59		bne $856d			bne 	_DCRedefine
.8514	7a		ply				ply
.8515	20 75 85	jsr $8575			jsr 	_DCGetSize 				; get array size, check it.
.8518	5a		phy				phy
.8519	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.851b	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.851d	7a		ply				ply 							; is there a second (e.g. ,x)
.851e	b1 30		lda ($30),y			lda 	(codePtr),y
.8520	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8522	d0 0a		bne $852e			bne 	_DCOneDimension
.8524	c8		iny				iny 							; skip comma
.8525	20 75 85	jsr $8575			jsr 	_DCGetSize 				; get 2nd array size
.8528	5a		phy				phy
.8529	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.852b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.852d	7a		ply				ply
.852e					_DCOneDimension:
.852e	5a		phy				phy 							; save position
.852f	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8531	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8533	aa		tax				tax
.8534	c8		iny				iny
.8535	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8537	e8		inx				inx 							; bump them.
.8538	1a		inc a				inc 	a
.8539	20 f8 a2	jsr $a2f8			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.853c	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.853e	29 e0		and #$e0			and 	#$E0
.8540	d0 23		bne $8565			bne 	_DCSize
.8542	a0 02		ldy #$02			ldy 	#2 						; get base type
.8544	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8546	20 83 85	jsr $8583			jsr 	ScaleByBaseType 		; scale by base type
.8549	a5 36		lda $36				lda 	zTemp0
.854b	a6 37		ldx $37				ldx 	zTemp0+1
.854d	20 8b 94	jsr $948b			jsr 	AllocateXABytes 		; allocate memory
.8550	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8552	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8554	c8		iny				iny
.8555	8a		txa				txa
.8556	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8558	7a		ply				ply 							; get position back
.8559	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 		; check )
.855c	b1 30		lda ($30),y			lda 	(codePtr),y
.855e	c8		iny				iny 							; consume in case
.855f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8561	f0 85		beq $84e8			beq 	DimCommand
.8563	88		dey				dey 							; undo consume
.8564	60		rts				rts
.8565					_DCSize:
.8565	a9 16		lda #$16		lda	#22
.8567	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.856a					_DCSyntax:
.856a	4c 58 a4	jmp $a458			jmp 	SyntaxError
.856d					_DCRedefine:
.856d	a9 15		lda #$15		lda	#21
.856f	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.8572					_DCType:
.8572	4c 62 a4	jmp $a462			jmp 	TypeError
.8575					_DCGetSize:
.8575	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8577	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger 	; get array dimension
.857a	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.857c	f0 e7		beq $8565			beq 	_DCSize
.857e	c9 fe		cmp #$fe			cmp 	#254
.8580	f0 e3		beq $8565			beq 	_DCSize
.8582	60		rts				rts
.8583					ScaleByBaseType:
.8583	29 10		and #$10			and 	#NSBIsString 			; is it string
.8585	d0 19		bne $85a0			bne 	_SBBTString
.8587	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8589	48		pha				pha
.858a	a5 36		lda $36				lda 	zTemp0
.858c	48		pha				pha
.858d	06 36		asl $36				asl 	zTemp0 					; x 2
.858f	26 37		rol $37				rol 	zTemp0+1
.8591	06 36		asl $36				asl 	zTemp0 					; x 4
.8593	26 37		rol $37				rol 	zTemp0+1
.8595	68		pla				pla 							; add stacked value = x 5
.8596	65 36		adc $36				adc 	zTemp0
.8598	85 36		sta $36				sta 	zTemp0
.859a	68		pla				pla
.859b	65 37		adc $37				adc 	zTemp0+1
.859d	85 37		sta $37				sta 	zTemp0+1
.859f	60		rts				rts
.85a0					_SBBTString:
.85a0	06 36		asl $36				asl 	zTemp0
.85a2	26 37		rol $37				rol 	zTemp0+1
.85a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85a5					EndCommand:
.85a5	4c 1e 84	jmp $841e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85a8					ForCommand:
.85a8	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85aa	20 92 97	jsr $9792			jsr 	StackOpen
.85ad	a2 00		ldx #$00			ldx 	#0
.85af	20 dc 92	jsr $92dc			jsr 	EvaluateTerm
.85b2	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85b5	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85b7	d0 49		bne $8602			bne		_FCError
.85b9	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85bb	20 86 9e	jsr $9e86			jsr 	CheckNextA
.85be	e8		inx				inx
.85bf	20 cc 96	jsr $96cc			jsr 	EvaluateInteger 			; <from> in +1
.85c2	b1 30		lda ($30),y			lda 	(codePtr),y
.85c4	c8		iny				iny 								; consume it
.85c5	48		pha				pha 								; save on stack for later
.85c6	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.85c8	f0 04		beq $85ce			beq 	_FCNoSyntax
.85ca	c9 ae		cmp #$ae			cmp 	#KWD_TO
.85cc	d0 37		bne $8605			bne 	_FCSyntaxError
.85ce					_FCNoSyntax:
.85ce	e8		inx				inx
.85cf	20 cc 96	jsr $96cc			jsr 	EvaluateInteger
.85d2	20 c4 97	jsr $97c4			jsr 	STKSaveCodePosition 		; save loop back position
.85d5	68		pla				pla 								; restore DOWNTO or TO
.85d6	5a		phy				phy 								; save Y on the stack
.85d7	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85d9	f0 02		beq $85dd			beq 	_FCNotDownTo
.85db	a9 02		lda #$02			lda 	#2
.85dd					_FCNotDownTo:
.85dd	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85de	a0 10		ldy #$10			ldy 	#16
.85e0	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85e2	a0 06		ldy #$06			ldy 	#6
.85e4	ad 08 06	lda $0608			lda 	NSMantissa0
.85e7	91 34		sta ($34),y			sta 	(basicStack),y
.85e9	ad 10 06	lda $0610			lda 	NSMantissa1
.85ec	c8		iny				iny
.85ed	91 34		sta ($34),y			sta 	(basicStack),y
.85ef	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85f1	a2 01		ldx #$01			ldx 	#1
.85f3	20 08 86	jsr $8608			jsr 	FCIntegerToStack
.85f6	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85f8	a2 02		ldx #$02			ldx 	#2
.85fa	20 08 86	jsr $8608			jsr 	FCIntegerToStack
.85fd	20 28 86	jsr $8628			jsr 	CopyIndexToReference
.8600	7a		ply				ply 								; restore position
.8601	60		rts				rts
.8602					_FCError:
.8602	4c 62 a4	jmp $a462			jmp 	TypeError
.8605					_FCSyntaxError:
.8605	4c 58 a4	jmp $a458			jmp 	SyntaxError
.8608					FCIntegerToStack:
.8608	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.860b	10 03		bpl $8610			bpl	 	_FCNotNegative
.860d	20 0a 97	jsr $970a			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8610					_FCNotNegative:
.8610	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8613	91 34		sta ($34),y			sta 	(basicStack),y
.8615	c8		iny				iny
.8616	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8619	91 34		sta ($34),y			sta 	(basicStack),y
.861b	c8		iny				iny
.861c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.861f	91 34		sta ($34),y			sta 	(basicStack),y
.8621	c8		iny				iny
.8622	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8625	91 34		sta ($34),y			sta 	(basicStack),y
.8627	60		rts				rts
.8628					CopyIndexToReference:
.8628	5a		phy				phy
.8629	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.862b	38		sec				sec 								; (because we copy from offset 8)
.862c	b1 34		lda ($34),y			lda 	(basicStack),y
.862e	e9 08		sbc #$08			sbc 	#8
.8630	85 36		sta $36				sta 	zTemp0
.8632	c8		iny				iny
.8633	b1 34		lda ($34),y			lda 	(basicStack),y
.8635	e9 00		sbc #$00			sbc 	#0
.8637	85 37		sta $37				sta 	zTemp0+1
.8639	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.863b	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.863d	b1 34		lda ($34),y			lda 	(basicStack),y
.863f	0a		asl a				asl 	a 							; into carry
.8640	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8642	90 14		bcc $8658			bcc 	_CITRNormal
.8644	38		sec				sec
.8645					_CITRNegative:
.8645	a9 00		lda #$00			lda 	#0
.8647	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8649	91 36		sta ($36),y			sta 	(zTemp0),y
.864b	c8		iny				iny
.864c	ca		dex				dex
.864d	d0 f6		bne $8645			bne 	_CITRNegative
.864f	88		dey				dey 								; look at MSB of mantissa
.8650	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8652	09 80		ora #$80			ora 	#$80
.8654	91 36		sta ($36),y			sta 	(zTemp0),y
.8656	7a		ply				ply
.8657	60		rts				rts
.8658					_CITRNormal:
.8658	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.865a	91 36		sta ($36),y			sta 	(zTemp0),y
.865c	c8		iny				iny
.865d	ca		dex				dex
.865e	d0 f8		bne $8658			bne 	_CITRNormal
.8660	7a		ply				ply 								; and exit.
.8661	60		rts				rts
.8662					NextCommand:
.8662	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8664	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8666	20 b9 97	jsr $97b9			jsr 	StackCheckFrame
.8669	5a		phy				phy
.866a	a0 10		ldy #$10			ldy 	#16 						; get the step count
.866c	b1 34		lda ($34),y			lda 	(basicStack),y
.866e	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8670	30 02		bmi $8674			bmi 	_NCStepNeg
.8672	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8674					_NCStepNeg:
.8674	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8676	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8678	18		clc				clc
.8679					_NCBump:
.8679	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.867b	91 34		sta ($34),y			sta 	(basicStack),y
.867d	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.867f	c8		iny				iny 								; next byte
.8680	ca		dex				dex 								; do four times
.8681	d0 f6		bne $8679			bne 	_NCBump
.8683	20 28 86	jsr $8628			jsr		CopyIndexToReference		; copy it to the reference variable.
.8686	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; sign bit to carry
.868b	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.868d	85 38		sta $38				sta 	zTemp1
.868f	90 02		bcc $8693			bcc 	_NCCompRev 					; use if step is +ve
.8691	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8693					_NCCompRev:
.8693	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8695	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8697	85 39		sta $39				sta 	zTemp1+1
.8699	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.869b	38		sec				sec
.869c					_NCCompare:
.869c	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.869e	b1 34		lda ($34),y			lda 	(basicStack),y
.86a0	a4 39		ldy $39				ldy 	zTemp1+1
.86a2	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86a4	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86a6	e6 39		inc $39				inc 	zTemp1+1
.86a8	ca		dex				dex 								; do it 4 times.
.86a9	d0 f1		bne $869c			bne 	_NCCompare
.86ab	50 02		bvc $86af			bvc 	_NCNoOverflow 				; convert to signed comparison
.86ad	49 80		eor #$80			eor 	#$80
.86af					_NCNoOverflow:
.86af	7a		ply				ply 								; restore Y position
.86b0	0a		asl a				asl 	a 							; is bit 7 set.
.86b1	90 04		bcc $86b7			bcc 	_NCLoopback 				; if no , >= so loop back
.86b3	20 ab 97	jsr $97ab			jsr 	StackClose 					; exit the loop
.86b6	60		rts				rts
.86b7					_NCLoopBack:
.86b7	20 d5 97	jsr $97d5			jsr 	STKLoadCodePosition 		; loop back
.86ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86bb					Command_GOSUB:
.86bb	a2 00		ldx #$00			ldx 	#0
.86bd	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86c0	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86c2	20 92 97	jsr $9792			jsr 	StackOpen 					; create frame
.86c5	20 c4 97	jsr $97c4			jsr 	STKSaveCodePosition 		; save current position
.86c8	4c de 86	jmp $86de			jmp 	GotoStackX
.86cb					Command_RETURN:
.86cb	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86cd	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86cf	20 b9 97	jsr $97b9			jsr 	StackCheckFrame
.86d2	20 d5 97	jsr $97d5			jsr 	STKLoadCodePosition 		; restore code position
.86d5	20 ab 97	jsr $97ab			jsr 	StackClose
.86d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86d9					GotoCommand:
.86d9	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86db	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger
.86de					GotoStackX:
.86de	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86e1	48		pha				pha 								; it is slightly inefficient, just in cases.
.86e2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.86e5	fa		plx				plx
.86e6	20 05 9e	jsr $9e05			jsr 	MemorySearch 				; transfer to line number AX.
.86e9	90 05		bcc $86f0			bcc 	_GotoError 					; not found, off end.
.86eb	d0 03		bne $86f0			bne 	_GotoError 					; not found exactly
.86ed	4c 4a 89	jmp $894a			jmp 	RunNewLine 					; and go straight to new line code.
.86f0					_GotoError:
.86f0	a9 0d		lda #$0d		lda	#13
.86f2	4c 02 8c	jmp $8c02		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.86f5					IfCommand:
.86f5	a2 00		ldx #$00			ldx 	#0 							; If what.
.86f7	20 a9 96	jsr $96a9			jsr 	EvaluateNumber
.86fa	b1 30		lda ($30),y			lda 	(codePtr),y
.86fc	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.86fe	d0 0a		bne $870a			bne 	_IFStructured
.8700	c8		iny				iny 								; consume THEN
.8701	20 85 97	jsr $9785			jsr 	NSMIsZero 					; is it zero
.8704	f0 01		beq $8707			beq 	_IfFail 					; if fail, go to next line
.8706	60		rts				rts 								; if THEN just continue
.8707					_IfFail:
.8707	4c ab 89	jmp $89ab			jmp 	EOLCommand
.870a					_IfStructured:
.870a	20 85 97	jsr $9785			jsr 	NSMIsZero 					; is it zero
.870d	d0 07		bne $8716			bne 	_IfExit 					; if not, then continue normally.
.870f	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8711	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8713	20 74 8b	jsr $8b74			jsr 	ScanForward 				; and run from there/
.8716					_IfExit:
.8716	60		rts				rts
.8717					ElseCode:
.8717	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8719	aa		tax				tax 								; so just go to the structure exit
.871a	20 74 8b	jsr $8b74			jsr 	ScanForward
.871d	60		rts				rts
.871e					EndIf:
.871e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.871f					LetCommand:
.871f	a2 00		ldx #$00			ldx 	#0
.8721	ad f3 8f	lda $8ff3			lda 	PrecedenceLevel+"*"			; precedence > this
.8724	20 0d 90	jsr $900d			jsr 	EvaluateExpressionAtPrecedence
.8727	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.872a	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.872c	f0 0e		beq $873c			beq 	_LetGoProc 					; it's a procedure call.
.872e	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8730	20 86 9e	jsr $9e86			jsr 	CheckNextA
.8733	e8		inx				inx 								; RHS
.8734	20 a0 96	jsr $96a0			jsr 	EvaluateValue
.8737	ca		dex				dex
.8738	20 3f 87	jsr $873f			jsr 	AssignVariable
.873b	60		rts				rts
.873c					_LetGoProc:
.873c	4c 54 88	jmp $8854			jmp 	CallProcedure
.873f					AssignVariable:
.873f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8742	48		pha				pha 								; save a copy
.8743	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8746	29 10		and #$10			and 	#NSBIsString
.8748	d0 0b		bne $8755			bne 	_ASError
.874a	68		pla				pla 								; get back
.874b	29 10		and #$10			and 	#NSBIsString 				; check type
.874d	d0 03		bne $8752			bne 	_ASString
.874f	4c 48 90	jmp $9048			jmp 	AssignNumber
.8752					_ASString:
.8752	4c b6 90	jmp $90b6			jmp 	AssignString
.8755					_ASError:
.8755	4c 62 a4	jmp $a462			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8758					Command_List:
.8758	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.875b	9c 14 06	stz $0614			stz 	NSMantissa1+4
.875e	a9 ff		lda #$ff			lda 	#$FF
.8760	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8763	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8766	b1 30		lda ($30),y			lda 	(codePtr),y
.8768	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.876a	f0 1e		beq $878a			beq 	_CLSecond
.876c	20 e8 87	jsr $87e8			jsr 	CLIsDigit 					; if not digit, list all
.876f	b0 24		bcs $8795			bcs 	_CLStart
.8771	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8773	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger
.8776	b1 30		lda ($30),y			lda 	(codePtr),y
.8778	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.877a	f0 0e		beq $878a			beq 	_CLSecond 					; if so go get it
.877c	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.877f	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8782	ad 14 06	lda $0614			lda 	NSMantissa1+4
.8785	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8788	80 0b		bra $8795			bra 	_CLStart
.878a					_CLSecond:
.878a	c8		iny				iny 								; consume comma
.878b	20 e8 87	jsr $87e8			jsr 	CLIsDigit 					; digit found
.878e	b0 05		bcs $8795			bcs 	_CLStart 					; if not, continue listing
.8790	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8792	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger
.8795					_CLStart
.8795	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8797	85 30		sta $30				sta 	codePtr
.8799	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.879b	85 31		sta $31				sta 	codePtr+1
.879d					_CLLoop:
.879d	20 e6 a6	jsr $a6e6			jsr 	EXTBreakCheck 				; break check
.87a0	f0 30		beq $87d2			beq 	_CLExit
.87a2	b2 30		lda ($30)			lda 	(codePtr)
.87a4	f0 2c		beq $87d2			beq 	_CLExit
.87a6	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87a8	20 d5 87	jsr $87d5			jsr 	CLCompareLineNo
.87ab	90 18		bcc $87c5			bcc 	_CLNext
.87ad	a2 07		ldx #$07			ldx 	#7
.87af	20 d5 87	jsr $87d5			jsr 	CLCompareLineNo
.87b2	f0 02		beq $87b6			beq 	_CLDoThisOne
.87b4	b0 0f		bcs $87c5			bcs 	_CLNext
.87b6					_CLDoThisOne:
.87b6	20 d0 89	jsr $89d0			jsr 	ListConvertLine 			; convert line into token Buffer
.87b9	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.87bb	a9 28		lda #$28			lda 	#(tokenBuffer & $FF)
.87bd	20 5b 8c	jsr $8c5b			jsr 	PrintStringXA
.87c0	a9 0d		lda #$0d			lda 	#13 						; new line
.87c2	20 a5 a6	jsr $a6a5			jsr 	EXTPrintCharacter
.87c5					_CLNext:
.87c5	18		clc				clc
.87c6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.87c8	65 30		adc $30				adc 	codePtr
.87ca	85 30		sta $30				sta 	codePtr
.87cc	90 02		bcc $87d0			bcc 	_CREExit
.87ce	e6 31		inc $31				inc 	codePtr+1
.87d0					_CREExit:
.87d0	80 cb		bra $879d			bra 	_CLLoop
.87d2					_CLExit:
.87d2	4c 1e 84	jmp $841e			jmp 	WarmStart
.87d5					CLCompareLineNo:
.87d5	38		sec				sec
.87d6	a0 01		ldy #$01			ldy 	#1
.87d8	b1 30		lda ($30),y			lda 	(codePtr),y
.87da	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.87dd	85 36		sta $36				sta 	zTemp0
.87df	c8		iny				iny
.87e0	b1 30		lda ($30),y			lda 	(codePtr),y
.87e2	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.87e5	05 36		ora $36				ora 	zTemp0
.87e7	60		rts				rts
.87e8					CLIsDigit:
.87e8	b1 30		lda ($30),y			lda 	(codePtr),y
.87ea	c9 30		cmp #$30			cmp 	#"0"
.87ec	90 03		bcc $87f1			bcc	 	_CLIDExitFalse
.87ee	c9 3a		cmp #$3a			cmp 	#"9"+1
.87f0	60		rts				rts
.87f1					_CLIDExitFalse:
.87f1	38		sec				sec
.87f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.87f3					NewCommand:
.87f3	20 b4 9d	jsr $9db4			jsr 	MemoryNew
.87f6	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.87f9	20 8b 84	jsr $848b			jsr 	ClearCommand 				; clear everything.
.87fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.87fd					Command_Print:
.87fd	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.87fe					_CPLoop:
.87fe	08		php				php 								; save last action flag
.87ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8801	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8803	f0 46		beq $884b			beq 	_CPExit
.8805	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8807	f0 42		beq $884b			beq 	_CPExit
.8809	68		pla				pla 								; throw last action flag
.880a	b1 30		lda ($30),y			lda 	(codePtr),y
.880c	c8		iny				iny
.880d	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.880f	f0 37		beq $8848			beq 	_CPContinueWithSameLine
.8811	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8813	f0 2e		beq $8843			beq 	_CPTab
.8815	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8817	f0 26		beq $883f			beq 	_CPNewLine
.8819	88		dey				dey 								; undo the get.
.881a	a2 00		ldx #$00			ldx 	#0
.881c	20 a0 96	jsr $96a0			jsr 	EvaluateValue 				; get a value into slot 0
.881f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8822	29 10		and #$10			and 	#NSBIsString
.8824	f0 0b		beq $8831			beq 	_CPNumber
.8826	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8829	ad 08 06	lda $0608			lda 	NSMantissa0
.882c	20 5b 8c	jsr $8c5b			jsr 	PrintStringXA
.882f	80 cc		bra $87fd			bra 	Command_Print 				; loop round clearing carry so NL if end
.8831					_CPNumber:
.8831	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8833	20 76 95	jsr $9576			jsr 	ConvertNumberToString 		; convert to string
.8836	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8838	a9 98		lda #$98			lda 	#DecimalBuffer & $FF
.883a	20 5b 8c	jsr $8c5b			jsr 	PrintStringXA
.883d	80 be		bra $87fd			bra 	Command_Print 				; loop round clearing carry so NL if end
.883f					_CPNewLine:
.883f	a9 0d		lda #$0d			lda 	#13
.8841	80 02		bra $8845			bra 	_CPPrintChar
.8843					_CPTab:
.8843	a9 09		lda #$09			lda 	#9 							; print TAB
.8845					_CPPrintChar:
.8845	20 a5 a6	jsr $a6a5			jsr 	EXTPrintCharacter
.8848					_CPContinueWithSameLine:
.8848	38		sec				sec 								; loop round with carry set, which
.8849	80 b3		bra $87fe			bra 	_CPLoop 					; will inhibit final CR
.884b					_CPExit:
.884b	28		plp				plp 								; get last action flag
.884c	b0 05		bcs $8853			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.884e	a9 0d		lda #$0d			lda 	#13 						; print new line
.8850	20 a5 a6	jsr $a6a5			jsr 	EXTPrintCharacter
.8853					_CPExit2:
.8853	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8854					CallProcedure:
.8854	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.8857	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8859	20 92 97	jsr $9792			jsr 	StackOpen
.885c	20 c4 97	jsr $97c4			jsr 	STKSaveCodePosition 		; save loop position
.885f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.8862	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8864	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8867	85 37		sta $37				sta 	zTemp0+1
.8869	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.886b	b2 36		lda ($36)			lda 	(zTemp0)
.886d	85 30		sta $30				sta 	safePtr
.886f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8871	85 31		sta $31				sta 	safePtr+1
.8873	c8		iny				iny
.8874	b1 36		lda ($36),y			lda 	(zTemp0),y
.8876	85 32		sta $32				sta 	safePtr+2
.8878	c8		iny				iny
.8879	b1 36		lda ($36),y			lda 	(zTemp0),y
.887b	85 33		sta $33				sta 	safePtr+3
.887d	c8		iny				iny 								; get Y offset -> Y
.887e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8880	a8		tay				tay
.8881	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 			; check )
.8884	60		rts				rts 								; and continue from here
.9e68					Command_ENDPROC:
.9e68	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9e6a	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9e6c	20 b9 97	jsr $97b9			jsr 	StackCheckFrame
.9e6f	20 d5 97	jsr $97d5			jsr 	STKLoadCodePosition 		; restore code position
.9e72	20 ab 97	jsr $97ab			jsr 	StackClose
.9e75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8885					Command_Read:
.8885	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8887	20 dc 92	jsr $92dc			jsr 	EvaluateTerm
.888a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.888d	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.888f	f0 4a		beq $88db			beq 	_CRSyntax 					; check reference (bit 0)
.8891	20 24 89	jsr $8924			jsr 	SwapDataCodePtrs 			; swap code and data
.8894	ad 1b 07	lda $071b			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8897	d0 20		bne $88b9			bne 	_CRContinueData
.8899					_CRKeepSearching:
.8899	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.889b	aa		tax				tax
.889c	20 74 8b	jsr $8b74			jsr 	ScanForward
.889f	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.88a1	f0 16		beq $88b9			beq 	_CRHaveData 				; found it
.88a3	18		clc				clc
.88a4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88a6	65 30		adc $30				adc 	codePtr
.88a8	85 30		sta $30				sta 	codePtr
.88aa	90 02		bcc $88ae			bcc 	_CREExit
.88ac	e6 31		inc $31				inc 	codePtr+1
.88ae					_CREExit:
.88ae	a0 03		ldy #$03			ldy 	#3 							; start of line.
.88b0	b2 30		lda ($30)			lda 	(codePtr)
.88b2	d0 e5		bne $8899			bne 	_CRKeepSearching
.88b4	a9 0b		lda #$0b		lda	#11
.88b6	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.88b9					_CRHaveData:
.88b9					_CRContinueData:
.88b9	a2 01		ldx #$01			ldx 	#1
.88bb	20 a0 96	jsr $96a0			jsr 	EvaluateValue 				; evaluate value into slot # 1
.88be	ca		dex				dex
.88bf	20 3f 87	jsr $873f			jsr		AssignVariable 				; do the assignment
.88c2	9c 1b 07	stz $071b			stz 	inDataStatement 			; clear in data
.88c5	b1 30		lda ($30),y			lda 	(codePtr),y
.88c7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.88c9	d0 04		bne $88cf			bne 	_CRSwapBack
.88cb	c8		iny				iny 								; consume comma
.88cc	ee 1b 07	inc $071b			inc 	inDataStatement 			; set in data statement currently.
.88cf					_CRSwapBack:
.88cf	20 24 89	jsr $8924			jsr 	SwapDataCodePtrs			; swap them back.
.88d2	b1 30		lda ($30),y			lda 	(codePtr),y
.88d4	c8		iny				iny
.88d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88d7	f0 ac		beq $8885			beq 	Command_Read 				; if so go round again.
.88d9	88		dey				dey 								; unpick get.
.88da	60		rts				rts
.88db					_CRSyntax:
.88db	4c 58 a4	jmp $a458			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.88de					RemCommand:
.88de	b1 30		lda ($30),y			lda 	(codePtr),y
.88e0	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.88e2	d0 06		bne $88ea			bne 	_RMExit
.88e4	c8		iny				iny
.88e5	98		tya				tya
.88e6	38		sec				sec
.88e7	71 30		adc ($30),y			adc 	(codePtr),y
.88e9	a8		tay				tay
.88ea					_RMExit:
.88ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.88eb					Command_REPEAT:
.88eb	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.88ed	20 92 97	jsr $9792			jsr 	StackOpen
.88f0	20 c4 97	jsr $97c4			jsr 	STKSaveCodePosition 		; save loop position
.88f3	60		rts				rts
.88f4					Command_UNTIL:
.88f4	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.88f6	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.88f8	20 b9 97	jsr $97b9			jsr 	StackCheckFrame
.88fb	a2 00		ldx #$00			ldx 	#0
.88fd	20 a9 96	jsr $96a9			jsr 	EvaluateNumber 				; work out the number
.8900	20 85 97	jsr $9785			jsr 	NSMIsZero 					; check if zero
.8903	f0 04		beq $8909			beq 	_CULoopBack 				; if so keep looping
.8905	20 ab 97	jsr $97ab			jsr 	StackClose		 			; return
.8908	60		rts				rts
.8909					_CULoopBack:
.8909	20 d5 97	jsr $97d5			jsr 	STKLoadCodePosition 		; loop back
.890c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.890d					Command_Restore:
.890d	20 24 89	jsr $8924			jsr 	SwapDataCodePtrs 			; swap code and data
.8910	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8912	85 30		sta $30				sta 	codePtr
.8914	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8916	85 31		sta $31				sta 	codePtr+1
.8918	20 24 89	jsr $8924			jsr 	SwapDataCodePtrs 			; put them back
.891b	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.891d	8d 1a 07	sta $071a			sta 	dataPointer+4
.8920	9c 1b 07	stz $071b			stz 	inDataStatement 			; not in data statement
.8923	60		rts				rts
.8924					SwapDataCodePtrs:
.8924	da		phx				phx
.8925	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8927					_SDCPLoop:
.8927	b5 30		lda $30,x			lda 	safePtr,x
.8929	48		pha				pha
.892a	bd 16 07	lda $0716,x			lda 	dataPointer,x
.892d	95 30		sta $30,x			sta 	safePtr,x
.892f	68		pla				pla
.8930	9d 16 07	sta $0716,x			sta 	dataPointer,x
.8933	ca		dex				dex
.8934	10 f1		bpl $8927			bpl 	_SDCPLoop
.8936	ad 1a 07	lda $071a			lda 	dataPointer+4 				; swap Y position over.
.8939	8c 1a 07	sty $071a			sty 	dataPointer+4
.893c	a8		tay				tay
.893d	fa		plx				plx
.893e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.893f					CommandRUN:
.893f	20 8b 84	jsr $848b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8942	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8944	85 30		sta $30				sta 	codePtr
.8946	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8948	85 31		sta $31				sta 	codePtr+1
.894a					RUNNewLine:
.894a	b2 30		lda ($30)			lda 	(codePtr)
.894c	f0 5a		beq $89a8			beq 	CRNoProgram         		; no then END.
.894e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8950	9a		txs				txs
.8951					RUNCodePointerLine:
.8951	a0 02		ldy #$02			ldy 	#2 							; start of program
.8953					_CRIncMainLoop:
.8953	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8956	d0 05		bne $895d			bne 	_CRNoBreakCheck
.8958	20 e6 a6	jsr $a6e6			jsr 	EXTBreakCheck 				; break check
.895b	f0 46		beq $89a3			beq 	_CRBreak
.895d					_CRNoBreakCheck:
.895d	c8		iny				iny
.895e					_CRMainLoop:
.895e	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8961	b1 30		lda ($30),y			lda 	(codePtr),y
.8963	10 10		bpl $8975			bpl 	_CRNotKeyword
.8965	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8967	b0 04		bcs $896d			bcs 	_CRIsKeyword
.8969	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.896b	b0 30		bcs $899d			bcs		_CRSyntaxError
.896d					_CRIsKeyword:
.896d	c8		iny				iny 								; consume command
.896e	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.896f	aa		tax				tax 								; put in X for vector jump
.8970	20 a0 89	jsr $89a0			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8973	80 e9		bra $895e			bra 	_CRMainLoop 				; and loop round
.8975					_CRNotKeyword:
.8975	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8977	f0 da		beq $8953			beq 	_CRIncMainLoop
.8979	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.897b	90 05		bcc $8982			bcc 	_CRNotVariable
.897d					_CRGoLet:
.897d	20 1f 87	jsr $871f			jsr 	LetCommand
.8980	80 dc		bra $895e			bra 	_CRMainLoop
.8982					_CRNotVariable:
.8982	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8984	f0 f7		beq $897d			beq 	_CRGoLet
.8986	c9 21		cmp #$21			cmp 	#KWD_PLING
.8988	f0 f3		beq $897d			beq 	_CRGoLet
.898a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.898c	f0 09		beq $8997			beq 	_CRGoRem
.898e	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8990	d0 0b		bne $899d			bne 	_CRSyntaxError
.8992	20 58 83	jsr $8358			jsr 	LabelHere
.8995	80 c7		bra $895e			bra 	_CRMainLoop
.8997					_CRGoRem:
.8997	c8		iny				iny
.8998	20 de 88	jsr $88de			jsr 	RemCommand
.899b	80 c1		bra $895e			bra 	_CRMainLoop
.899d					_CRSyntaxError:
.899d	4c 58 a4	jmp $a458			jmp 	SyntaxError
.89a0					_CRCallVector0:
.89a0	7c b6 80	jmp ($80b6,x)			jmp 	(VectorSet0,x)
.89a3					_CRBreak:
.89a3	a9 01		lda #$01		lda	#1
.89a5	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.89a8					CRNoProgram:
.89a8	4c a5 85	jmp $85a5			jmp 	EndCommand
.89ab					EOLCommand:
.89ab	18		clc				clc
.89ac	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89ae	65 30		adc $30				adc 	codePtr
.89b0	85 30		sta $30				sta 	codePtr
.89b2	90 02		bcc $89b6			bcc 	_CREExit
.89b4	e6 31		inc $31				inc 	codePtr+1
.89b6					_CREExit:
.89b6	80 92		bra $894a			bra 	RunNewLine
.89b8					Shift1Command:
.89b8	b1 30		lda ($30),y			lda 	(codePtr),y
.89ba	c8		iny				iny
.89bb	0a		asl a				asl 	a
.89bc	aa		tax				tax
.89bd	7c 14 81	jmp ($8114,x)			jmp 	(VectorSet1,x)
.89c0					Shift2Command:
.89c0	b1 30		lda ($30),y			lda 	(codePtr),y
.89c2	c8		iny				iny
.89c3	0a		asl a				asl 	a
.89c4	aa		tax				tax
.89c5	7c 2c 81	jmp ($812c,x)			jmp 	(VectorSet2,x)
.89c8					Unused1:
.89c8					Unused2:
.89c8					Unused3:
.89c8					Unused4:
.89c8	4c 58 a4	jmp $a458			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.89cb					StopCommand:
.89cb	a9 08		lda #$08		lda	#8
.89cd	4c 02 8c	jmp $8c02		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.89d0					ListConvertLine:
.89d0	9c 1c 07	stz $071c			stz 	tbOffset
.89d3	9c 28 07	stz $0728			stz 	tokenBuffer
.89d6	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.89d8	b1 30		lda ($30),y			lda 	(codePtr),y
.89da	aa		tax				tax
.89db	88		dey				dey
.89dc	b1 30		lda ($30),y			lda 	(codePtr),y
.89de	20 d2 9f	jsr $9fd2			jsr 	ConvertInt16
.89e1	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.89e3	86 37		stx $37				stx 	zTemp0+1
.89e5	a0 00		ldy #$00			ldy 	#0
.89e7					_LCCopyNumber:
.89e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.89e9	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.89ec	c8		iny				iny
.89ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ef	d0 f6		bne $89e7			bne 	_LCCopyNumber
.89f1					_LCPadOut:
.89f1	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.89f3	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.89f6	ad 1c 07	lda $071c			lda 	tbOffset
.89f9	c9 06		cmp #$06			cmp 	#6
.89fb	d0 f4		bne $89f1			bne 	_LCPadOut
.89fd	a0 03		ldy #$03			ldy 	#3 							; start position.
.89ff					_LCMainLoop:
.89ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8a01	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8a03	f0 17		beq $8a1c			beq 	_LCExit
.8a05	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8a07	90 14		bcc $8a1d			bcc 	_LCDoubles
.8a09	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8a0b	90 20		bcc $8a2d			bcc 	_LCShiftPunc
.8a0d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8a0f	90 2b		bcc $8a3c			bcc 	_LCPunctuation
.8a11	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8a13	90 2d		bcc $8a42			bcc 	_LCIdentifiers
.8a15	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8a17	90 49		bcc $8a62			bcc 	_LCTokens
.8a19	4c bd 8a	jmp $8abd			jmp 	_LCData 					; 254-5 are data objects
.8a1c					_LCExit:
.8a1c	60		rts				rts
.8a1d					_LCDoubles:
.8a1d	48		pha				pha
.8a1e	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8a1f	29 02		and #$02			and 	#2
.8a21	09 3c		ora #$3c			ora 	#60 						; make < >
.8a23	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8a26	68		pla				pla 								; restore, do lower bit
.8a27	29 03		and #$03			and 	#3
.8a29	09 3c		ora #$3c			ora 	#60
.8a2b	80 0f		bra $8a3c			bra		_LCPunctuation 				; print, increment, loop
.8a2d					_LCShiftPunc:
.8a2d	aa		tax				tax 								; save in X
.8a2e	29 07		and #$07			and 	#7 							; lower 3 bits
.8a30	f0 02		beq $8a34			beq 	_LCNoAdd
.8a32	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8a34					_LCNoAdd:
.8a34	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8a36	90 02		bcc $8a3a			bcc 	_LCNoAdd2
.8a38	09 20		ora #$20			ora 	#32 						; adds $20
.8a3a					_LCNoAdd2:
.8a3a	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8a3c					_LCPunctuation:
.8a3c	c8		iny				iny 								; consume character
.8a3d	20 e9 8a	jsr $8ae9			jsr 	LCLWrite 					; write it out.
.8a40	80 bd		bra $89ff			bra 	_LCMainLoop 				; go round again.
.8a42					_LCIdentifiers:
.8a42	18		clc				clc 								; convert to physical address
.8a43	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a45	85 37		sta $37				sta 	zTemp0+1
.8a47	c8		iny				iny
.8a48	b1 30		lda ($30),y			lda 	(codePtr),y
.8a4a	85 36		sta $36				sta 	zTemp0
.8a4c	c8		iny				iny
.8a4d	5a		phy				phy 								; save position
.8a4e	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8a50					_LCOutIdentifier:
.8a50	c8		iny				iny
.8a51	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a53	29 7f		and #$7f			and 	#$7F
.8a55	20 17 8b	jsr $8b17			jsr 	LCLLowerCase
.8a58	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8a5b	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8a5d	10 f1		bpl $8a50			bpl 	_LCOutIdentifier
.8a5f	7a		ply				ply 								; restore position
.8a60	80 9d		bra $89ff			bra 	_LCMainLoop
.8a62					_LCTokens:
.8a62	aa		tax				tax 								; token in X
.8a63	a9 ee		lda #$ee			lda 	#((KeywordSet2) & $FF)
.8a65	85 36		sta $36				sta 	0+zTemp0
.8a67	a9 99		lda #$99			lda 	#((KeywordSet2) >> 8)
.8a69	85 37		sta $37				sta 	1+zTemp0
.8a6b	e0 82		cpx #$82			cpx 	#$82
.8a6d	f0 16		beq $8a85			beq 	_LCUseShift
.8a6f	a9 aa		lda #$aa			lda 	#((KeywordSet1) & $FF)
.8a71	85 36		sta $36				sta 	0+zTemp0
.8a73	a9 99		lda #$99			lda 	#((KeywordSet1) >> 8)
.8a75	85 37		sta $37				sta 	1+zTemp0
.8a77	e0 81		cpx #$81			cpx 	#$81
.8a79	f0 0a		beq $8a85			beq 	_LCUseShift
.8a7b	a9 88		lda #$88			lda 	#((KeywordSet0) & $FF)
.8a7d	85 36		sta $36				sta 	0+zTemp0
.8a7f	a9 98		lda #$98			lda 	#((KeywordSet0) >> 8)
.8a81	85 37		sta $37				sta 	1+zTemp0
.8a83	80 01		bra $8a86			bra 	_LCNoShift
.8a85					_LCUseShift:
.8a85	c8		iny				iny
.8a86					_LCNoShift:
.8a86	20 f8 8a	jsr $8af8			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8a89	b1 30		lda ($30),y			lda 	(codePtr),y
.8a8b	aa		tax				tax 								; into X
.8a8c					_LCFindText:
.8a8c	ca		dex				dex
.8a8d	10 0e		bpl $8a9d			bpl 	_LCFoundText 				; found text.
.8a8f	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8a91	1a		inc a				inc 	a 							; one extra for size
.8a92	38		sec				sec 								; one extra for checksum
.8a93	65 36		adc $36				adc 	zTemp0 						; go to next token
.8a95	85 36		sta $36				sta 	zTemp0
.8a97	90 f3		bcc $8a8c			bcc 	_LCFindText
.8a99	e6 37		inc $37				inc 	zTemp0+1
.8a9b	80 ef		bra $8a8c			bra 	_LCFindText
.8a9d					_LCFoundText:
.8a9d	5a		phy				phy 								; save List position
.8a9e	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8aa0	aa		tax				tax
.8aa1	a0 02		ldy #$02			ldy 	#2
.8aa3					_LCCopyToken:
.8aa3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa5	20 17 8b	jsr $8b17			jsr 	LCLLowerCase
.8aa8	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8aab	c8		iny				iny
.8aac	ca		dex				dex
.8aad	d0 f4		bne $8aa3			bne 	_LCCopyToken
.8aaf	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8ab1	f0 05		beq $8ab8			beq 	_LCNoSpace
.8ab3	a9 20		lda #$20			lda 	#' '
.8ab5	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8ab8					_LCNoSpace:
.8ab8	7a		ply				ply 								; restore position.
.8ab9	c8		iny				iny 								; consume token
.8aba	4c ff 89	jmp $89ff			jmp 	_LCMainLoop 				; and go around again.
.8abd					_LCData:
.8abd	48		pha				pha 								; save type $FE/$FF
.8abe	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8ac0	c9 fe		cmp #$fe			cmp 	#$FE
.8ac2	f0 02		beq $8ac6			beq 	_LCHaveOpener
.8ac4	a2 22		ldx #$22			ldx 	#'"'
.8ac6					_LCHaveOpener:
.8ac6	8a		txa				txa 								; output prefix (# or ")
.8ac7	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8aca	c8		iny				iny 								; get count
.8acb	b1 30		lda ($30),y			lda 	(codePtr),y
.8acd	aa		tax				tax
.8ace	c8		iny				iny 								; point at first character
.8acf					_LCOutData:
.8acf	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad1	c9 00		cmp #$00			cmp 	#0
.8ad3	f0 03		beq $8ad8			beq 	_LCNoPrint
.8ad5	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8ad8					_LCNoPrint:
.8ad8	c8		iny				iny
.8ad9	ca		dex				dex
.8ada	d0 f3		bne $8acf			bne 	_LCOutData
.8adc	68		pla				pla 								; closing " required ?
.8add	c9 ff		cmp #$ff			cmp 	#$FF
.8adf	d0 05		bne $8ae6			bne 	_LCNoQuote
.8ae1	a9 22		lda #$22			lda 	#'"'
.8ae3	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8ae6					_LCNoQuote:
.8ae6	4c ff 89	jmp $89ff			jmp 	_LCMainLoop
.8ae9					LCLWrite:
.8ae9	da		phx				phx
.8aea	ae 1c 07	ldx $071c			ldx 	tbOffset
.8aed	9d 28 07	sta $0728,x			sta 	tokenBuffer,x
.8af0	9e 29 07	stz $0729,x			stz 	tokenBuffer+1,x
.8af3	ee 1c 07	inc $071c			inc 	tbOffset
.8af6	fa		plx				plx
.8af7	60		rts				rts
.8af8					LCCheckSpaceRequired:
.8af8	ae 1c 07	ldx $071c			ldx 	tbOffset
.8afb	bd 27 07	lda $0727,x			lda 	tokenBuffer-1,x 			; previous character
.8afe	20 17 8b	jsr $8b17			jsr 	LCLLowerCase 				; saves a little effort
.8b01	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8b03	90 11		bcc $8b16			bcc 	_LCCSRExit
.8b05	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b07	90 08		bcc $8b11			bcc 	_LCCSRSpace
.8b09	c9 61		cmp #$61			cmp 	#"a"
.8b0b	90 09		bcc $8b16			bcc 	_LCCSRExit
.8b0d	c9 7b		cmp #$7b			cmp 	#"z"+1
.8b0f	b0 05		bcs $8b16			bcs 	_LCCSRExit
.8b11					_LCCSRSpace:
.8b11	a9 20		lda #$20			lda 	#' '
.8b13	20 e9 8a	jsr $8ae9			jsr 	LCLWrite
.8b16					_LCCSRExit:
.8b16	60		rts				rts
.8b17					LCLLowerCase:
.8b17	c9 41		cmp #$41			cmp 	#"A"
.8b19	90 06		bcc $8b21			bcc 	_LCLLCOut
.8b1b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b1d	b0 02		bcs $8b21			bcs 	_LCLLCOut
.8b1f	69 20		adc #$20			adc 	#$20
.8b21					_LCLLCOut:
.8b21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8b22					ProcedureScan:
.8b22	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b24	85 30		sta $30				sta 	codePtr
.8b26	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b28	85 31		sta $31				sta 	codePtr+1
.8b2a					_PSLoop:
.8b2a	b2 30		lda ($30)			lda 	(codePtr)
.8b2c	f0 42		beq $8b70			beq 	_PSExit
.8b2e	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8b30	b1 30		lda ($30),y			lda 	(codePtr),y
.8b32	c9 98		cmp #$98			cmp 	#KWD_PROC
.8b34	d0 2d		bne $8b63			bne 	_PSNext
.8b36	c8		iny				iny 								; get the address of the record to zTemp0 and
.8b37	b1 30		lda ($30),y			lda 	(codePtr),y
.8b39	29 c0		and #$c0			and 	#$C0
.8b3b	c9 40		cmp #$40			cmp 	#$40
.8b3d	d0 32		bne $8b71			bne 	_PSSyntax
.8b3f	b1 30		lda ($30),y			lda 	(codePtr),y
.8b41	18		clc				clc
.8b42	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b44	85 37		sta $37				sta 	zTemp0+1
.8b46	c8		iny				iny 								; LSB
.8b47	b1 30		lda ($30),y			lda 	(codePtr),y
.8b49	85 36		sta $36				sta 	zTemp0
.8b4b	c8		iny				iny 								; character after variable call.
.8b4c	98		tya				tya 								; save Y offset at +7
.8b4d	a0 07		ldy #$07			ldy 	#7
.8b4f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b51	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8b53	a0 02		ldy #$02			ldy 	#2
.8b55	91 36		sta ($36),y			sta 	(zTemp0),y
.8b57	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8b59					_PSCopy:
.8b59	b5 30		lda $30,x			lda 	safePtr,x
.8b5b	c8		iny				iny
.8b5c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b5e	e8		inx				inx
.8b5f	e0 04		cpx #$04			cpx 	#4
.8b61	d0 f6		bne $8b59			bne 	_PSCopy
.8b63					_PSNext:
.8b63	18		clc				clc
.8b64	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b66	65 30		adc $30				adc 	codePtr
.8b68	85 30		sta $30				sta 	codePtr
.8b6a	90 02		bcc $8b6e			bcc 	_CREExit
.8b6c	e6 31		inc $31				inc 	codePtr+1
.8b6e					_CREExit:
.8b6e	80 ba		bra $8b2a			bra 	_PSLoop
.8b70					_PSExit:
.8b70	60		rts				rts
.8b71					_PSSyntax:
.8b71	4c 58 a4	jmp $a458			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8b74					ScanForward:
.8b74	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8b76	86 37		stx $37				stx 	zTemp0+1
.8b78	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8b7a					_ScanLoop:
.8b7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8b7c	c8		iny				iny
.8b7d	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8b7f	d0 0e		bne $8b8f			bne 	_ScanGoNext
.8b81	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8b83	f0 04		beq $8b89			beq 	_ScanMatch
.8b85	c5 37		cmp $37				cmp 	zTemp0+1
.8b87	d0 06		bne $8b8f			bne 	_ScanGoNext
.8b89					_ScanMatch:
.8b89	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8b8b	d0 01		bne $8b8e			bne 	_ScanNotEndEOL
.8b8d	88		dey				dey
.8b8e					_ScanNotEndEOL:
.8b8e	60		rts				rts
.8b8f					_ScanGoNext:
.8b8f	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8b91	90 e7		bcc $8b7a			bcc 	_ScanLoop
.8b93	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8b95	90 18		bcc $8baf			bcc 	_ScanSkipOne
.8b97	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8b99	b0 2f		bcs $8bca			bcs 	_ScanSkipData
.8b9b	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8b9d	90 db		bcc $8b7a			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8b9f	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8ba1	b0 d7		bcs $8b7a			bcs 	_ScanLoop
.8ba3	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ba5	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ba7	b0 d1		bcs $8b7a			bcs 	_ScanLoop
.8ba9	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8bab	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8bad	80 cb		bra $8b7a			bra 	_ScanLoop
.8baf					_ScanSkipOne:
.8baf	c8		iny				iny 								; consume the extra one.
.8bb0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8bb2	d0 c6		bne $8b7a			bne 	_ScanLoop
.8bb4	18		clc				clc
.8bb5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8bb7	65 30		adc $30				adc 	codePtr
.8bb9	85 30		sta $30				sta 	codePtr
.8bbb	90 02		bcc $8bbf			bcc 	_CREExit
.8bbd	e6 31		inc $31				inc 	codePtr+1
.8bbf					_CREExit:
.8bbf	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8bc1	b2 30		lda ($30)			lda 	(codePtr)
.8bc3	d0 b5		bne $8b7a			bne 	_ScanLoop 					; if not zero, more to scan
.8bc5	a9 13		lda #$13		lda	#19
.8bc7	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.8bca					_ScanSkipData:
.8bca	88		dey				dey 								; point at data token
.8bcb	c8		iny				iny
.8bcc	98		tya				tya
.8bcd	38		sec				sec
.8bce	71 30		adc ($30),y			adc 	(codePtr),y
.8bd0	a8		tay				tay
.8bd1	80 a7		bra $8b7a			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8bd3					Command_WHILE:
.8bd3	5a		phy				phy 								; save position of the test
.8bd4	a2 00		ldx #$00			ldx 	#0
.8bd6	20 a9 96	jsr $96a9			jsr 	EvaluateNumber 				; work out the number
.8bd9	20 85 97	jsr $9785			jsr 	NSMIsZero 					; check if zero
.8bdc	f0 0e		beq $8bec			beq 	_WHExitLoop 				; if so exit the loop
.8bde	98		tya				tya 								; position *after* test.
.8bdf	7a		ply				ply 								; restore position before test, at WHILE
.8be0	88		dey				dey
.8be1	48		pha				pha 								; push after test on the stack
.8be2	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8be4	20 92 97	jsr $9792			jsr 	StackOpen
.8be7	20 c4 97	jsr $97c4			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8bea	7a		ply				ply 								; restore the position *after* the test
.8beb	60		rts				rts
.8bec					_WHExitLoop:
.8bec	68		pla				pla 								; throw post loop position
.8bed	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8bef	aa		tax				tax
.8bf0	20 74 8b	jsr $8b74			jsr 	ScanForward
.8bf3	60		rts				rts
.8bf4					Command_WEND:
.8bf4	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8bf6	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8bf8	20 b9 97	jsr $97b9			jsr 	StackCheckFrame
.8bfb	20 d5 97	jsr $97d5			jsr 	STKLoadCodePosition 		; loop back
.8bfe	20 ab 97	jsr $97ab			jsr 	StackClose		 			; erase the frame
.8c01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9e76					CheckRightBracket:
.9e76	b1 30		lda ($30),y			lda 	(codePtr),y
.9e78	c8		iny				iny
.9e79	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9e7b	d0 0f		bne $9e8c			bne 	CNAFail
.9e7d	60		rts				rts
.9e7e					CheckComma:
.9e7e	b1 30		lda ($30),y			lda 	(codePtr),y
.9e80	c8		iny				iny
.9e81	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9e83	d0 07		bne $9e8c			bne 	CNAFail
.9e85	60		rts				rts
.9e86					CheckNextA:
.9e86	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9e88	d0 02		bne $9e8c			bne 	CNAFail
.9e8a	c8		iny				iny 								; skip character
.9e8b	60		rts				rts 								; and exit
.9e8c					CNAFail:
.9e8c	4c 58 a4	jmp $a458			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8c02					ErrorHandler:
.8c02	a8		tay				tay 								; find the error text
.8c03	f0 49		beq $8c4e			beq 	_EHEnd
.8c05	a2 00		ldx #$00			ldx 	#0
.8c07	a9 71		lda #$71			lda 	#((ErrorText) & $FF)
.8c09	85 36		sta $36				sta 	0+zTemp0
.8c0b	a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.8c0d	85 37		sta $37				sta 	1+zTemp0
.8c0f					_EHFind:
.8c0f	88		dey				dey 								; found the error text ?
.8c10	f0 0e		beq $8c20			beq 	_EHFound
.8c12					_EHFindZero:
.8c12	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8c14	e6 36		inc $36				inc 	zTemp0
.8c16	d0 02		bne $8c1a			bne 	_EHFNoCarry
.8c18	e6 37		inc $37				inc 	zTemp0+1
.8c1a					_EHFNoCarry:
.8c1a	c9 00		cmp #$00			cmp 	#0
.8c1c	d0 f4		bne $8c12			bne 	_EHFindZero
.8c1e	80 ef		bra $8c0f			bra 	_EHFind
.8c20					_EHFound:
.8c20	a5 36		lda $36				lda 	zTemp0 						; print message
.8c22	a6 37		ldx $37				ldx 	zTemp0+1
.8c24	20 5b 8c	jsr $8c5b			jsr 	PrintStringXA
.8c27	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8c29	b1 30		lda ($30),y			lda 	(codePtr),y
.8c2b	d0 05		bne $8c32			bne 	_EHAtMsg
.8c2d	c8		iny				iny
.8c2e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c30	f0 17		beq $8c49			beq 	_EHCREnd
.8c32					_EHAtMsg:
.8c32	a2 8c		ldx #$8c			ldx 	#_AtMsg >> 8 				; print " at "
.8c34	a9 51		lda #$51			lda 	#_AtMsg & $FF
.8c36	20 5b 8c	jsr $8c5b			jsr 	PrintStringXA
.8c39	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8c3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3d	48		pha				pha
.8c3e	c8		iny				iny
.8c3f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c41	aa		tax				tax
.8c42	68		pla				pla
.8c43	20 d2 9f	jsr $9fd2			jsr 	ConvertInt16 				; convert XA to string
.8c46	20 5b 8c	jsr $8c5b			jsr 	PrintStringXA 				; and print it.
.8c49					_EHCREnd:
.8c49	a9 0d		lda #$0d			lda 	#13 						; new line
.8c4b	20 a5 a6	jsr $a6a5			jsr 	EXTPrintCharacter
.8c4e					_EHEnd:
.8c4e	4c 1e 84	jmp $841e			jmp 	WarmStart
>8c51	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8c59	20 00
.8c5b					PrintStringXA:
.8c5b	5a		phy				phy
.8c5c	86 37		stx $37				stx 	zTemp0+1
.8c5e	85 36		sta $36				sta 	zTemp0
.8c60	a0 00		ldy #$00			ldy 	#0
.8c62					_PSXALoop:
.8c62	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c64	f0 06		beq $8c6c			beq 	_PSXAExit
.8c66	20 a5 a6	jsr $a6a5			jsr 	EXTPrintCharacter
.8c69	c8		iny				iny
.8c6a	80 f6		bra $8c62			bra 	_PSXALoop
.8c6c					_PSXAExit:
.8c6c	7a		ply				ply
.8c6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8c6e					UnaryTrue:
.8c6e	fa		plx				plx
.8c6f					ReturnTrue:
.8c6f	a9 01		lda #$01			lda 	#1  						; set to 1
.8c71	20 57 97	jsr $9757			jsr 	NSMSetByte
.8c74	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8c76	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c79	60		rts				rts
.8c7a					UnaryFalse:
.8c7a	fa		plx				plx
.8c7b					ReturnFalse:
.8c7b	4c 55 97	jmp $9755			jmp 	NSMSetZero 					; set it all to zero
.8c7e					BinaryCompareEqual:
.8c7e	fa		plx				plx
.8c7f	20 ba 8c	jsr $8cba			jsr 	CompareBaseCode
.8c82	c9 00		cmp #$00			cmp 	#0
.8c84	f0 e9		beq $8c6f			beq 	ReturnTrue
.8c86	80 f3		bra $8c7b			bra 	ReturnFalse
.8c88					BinaryCompareLess:
.8c88	fa		plx				plx
.8c89	20 ba 8c	jsr $8cba			jsr 	CompareBaseCode
.8c8c	c9 ff		cmp #$ff			cmp 	#$FF
.8c8e	f0 df		beq $8c6f			beq 	ReturnTrue
.8c90	80 e9		bra $8c7b			bra 	ReturnFalse
.8c92					BinaryCompareGreater:
.8c92	fa		plx				plx
.8c93	20 ba 8c	jsr $8cba			jsr 	CompareBaseCode
.8c96	c9 01		cmp #$01			cmp 	#1
.8c98	f0 d5		beq $8c6f			beq 	ReturnTrue
.8c9a	80 df		bra $8c7b			bra 	ReturnFalse
.8c9c					BinaryCompareNotEqual:
.8c9c	fa		plx				plx
.8c9d	20 ba 8c	jsr $8cba			jsr 	CompareBaseCode
.8ca0	c9 00		cmp #$00			cmp 	#0
.8ca2	d0 cb		bne $8c6f			bne 	ReturnTrue
.8ca4	80 d5		bra $8c7b			bra 	ReturnFalse
.8ca6					BinaryCompareLessEqual:
.8ca6	fa		plx				plx
.8ca7	20 ba 8c	jsr $8cba			jsr 	CompareBaseCode
.8caa	c9 01		cmp #$01			cmp 	#1
.8cac	d0 c1		bne $8c6f			bne 	ReturnTrue
.8cae	80 cb		bra $8c7b			bra 	ReturnFalse
.8cb0					BinaryCompareGreaterEqual:
.8cb0	fa		plx				plx
.8cb1	20 ba 8c	jsr $8cba			jsr 	CompareBaseCode
.8cb4	c9 ff		cmp #$ff			cmp 	#$FF
.8cb6	d0 b7		bne $8c6f			bne 	ReturnTrue
.8cb8	80 c1		bra $8c7b			bra 	ReturnFalse
.8cba					CompareBaseCode:
.8cba	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; make both values if references.
.8cbd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8cc0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cc3	29 10		and #$10			and 	#NSTString
.8cc5	d0 40		bne $8d07			bne 	_CBCString
.8cc7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8cca	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ccd	d0 3b		bne $8d0a			bne 	_CBCFloat
.8ccf	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cd2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cd5	29 08		and #$08			and 	#NSTFloat
.8cd7	d0 31		bne $8d0a			bne 	_CBCFloat
.8cd9	20 0d 8d	jsr $8d0d			jsr 	CompareFixMinusZero
.8cdc	e8		inx				inx
.8cdd	20 0d 8d	jsr $8d0d			jsr 	CompareFixMinusZero
.8ce0	ca		dex				dex
.8ce1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8ce4	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ce7	10 0b		bpl $8cf4			bpl 	_CDCSameSign
.8ce9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8cec	30 16		bmi $8d04			bmi 	_CBCLess 					; return $FF
.8cee					_CBCGreater:
.8cee	a9 01		lda #$01			lda 	#1
.8cf0	60		rts				rts
.8cf1					_CBCEqual:
.8cf1	a9 00		lda #$00			lda 	#0
.8cf3	60		rts				rts
.8cf4					_CDCSameSign:
.8cf4	20 1d 8e	jsr $8e1d			jsr 	SubTopTwoStack 				; unsigned subtract
.8cf7	20 85 97	jsr $9785			jsr 	NSMIsZero 					; or the mantissa together
.8cfa	f0 f5		beq $8cf1			beq 	_CBCEqual 					; -0 == 0
.8cfc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8cff	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8d02	10 ea		bpl $8cee			bpl 	_CBCGreater
.8d04					_CBCLess:
.8d04	a9 ff		lda #$ff			lda 	#$FF
.8d06	60		rts				rts
.8d07					_CBCString:
.8d07	4c 73 8d	jmp $8d73			jmp 	CompareStrings
.8d0a					_CBCFloat:
.8d0a	4c ce a0	jmp $a0ce			jmp 	CompareFloat
.8d0d					CompareFixMinusZero:
.8d0d	20 85 97	jsr $9785			jsr 	NSMIsZero
.8d10	d0 03		bne $8d15			bne 	_CFXMZNotZero
.8d12	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8d15					_CFXMZNotZero:
.8d15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8d16					StringConcat:
.8d16	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8d19	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d1c	29 18		and #$18			and 	#NSBTypeMask
.8d1e	c9 10		cmp #$10			cmp 	#NSTString
.8d20	d0 4e		bne $8d70			bne		_SCType
.8d22	64 38		stz $38				stz 	zTemp1 						; counting total length
.8d24	e8		inx				inx
.8d25	20 43 8d	jsr $8d43			jsr 	_SCSetupZ0 					; setup for second
.8d28	20 4e 8d	jsr $8d4e			jsr 	_SCLengthZ0 				; length for second
.8d2b	ca		dex				dex
.8d2c	20 43 8d	jsr $8d43			jsr 	_SCSetupZ0 					; setup for first
.8d2f	20 4e 8d	jsr $8d4e			jsr 	_SCLengthZ0 				; length for first
.8d32	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8d34	20 52 a6	jsr $a652			jsr 	StringTempAllocate
.8d37	20 61 8d	jsr $8d61			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8d3a	e8		inx				inx
.8d3b	20 43 8d	jsr $8d43			jsr 	_SCSetupZ0 					; copy second out
.8d3e	20 61 8d	jsr $8d61			jsr 	_SCCopy
.8d41	ca		dex				dex
.8d42	60		rts				rts
.8d43					_SCSetupZ0:
.8d43	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d46	85 36		sta $36				sta 	zTemp0
.8d48	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d4b	85 37		sta $37				sta 	zTemp0+1
.8d4d	60		rts				rts
.8d4e					_SCLengthZ0:
.8d4e	5a		phy				phy
.8d4f	a0 00		ldy #$00			ldy 	#0
.8d51					_SCLenLoop:
.8d51	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d53	f0 0a		beq $8d5f			beq 	_SCLExit
.8d55	c8		iny				iny
.8d56	e6 38		inc $38				inc 	zTemp1
.8d58	10 f7		bpl $8d51			bpl		_SCLenLoop
.8d5a	a9 09		lda #$09		lda	#9
.8d5c	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.8d5f					_SCLExit:
.8d5f	7a		ply				ply
.8d60	60		rts				rts
.8d61					_SCCopy:
.8d61	5a		phy				phy
.8d62	a0 00		ldy #$00			ldy 	#0
.8d64					_SCCopyLoop:
.8d64	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d66	f0 06		beq $8d6e			beq 	_SCCExit
.8d68	20 90 a6	jsr $a690			jsr 	StringTempWrite
.8d6b	c8		iny				iny
.8d6c	80 f6		bra $8d64			bra 	_SCCopyLoop
.8d6e					_SCCExit:
.8d6e	7a		ply				ply
.8d6f	60		rts				rts
.8d70					_SCType:
.8d70	4c 62 a4	jmp $a462			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9e8f					IntegerDivide:
.9e8f	fa		plx				plx
.9e90	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9e93	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e96	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e97	0a		asl a				asl 	a
.9e98	10 05		bpl $9e9f			bpl 	_NotRef
.9e9a	48		pha				pha
.9e9b	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e9e	68		pla				pla
.9e9f					_NotRef:
.9e9f	0a		asl a				asl 	a
.9ea0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ea2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ea5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9ea8	f0 03		beq $9ead			beq 	_IntegerCode 				; if clear, then we have two integers
.9eaa	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.9ead					_IntegerCode:
.9ead	20 cf 9e	jsr $9ecf			jsr 	CheckDivideZero 			; do div zero check
.9eb0	20 07 9f	jsr $9f07			jsr 	Int32Divide 				; do the division
.9eb3	20 c4 9f	jsr $9fc4			jsr 	CalculateSign 				; calculate result sign
.9eb6					NSMCopyPlusTwoToZero:
.9eb6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9eb9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ebc	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9ebf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9ec2	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9ec5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9ec8	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9ecb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9ece	60		rts				rts
.9ecf					CheckDivideZero:
.9ecf	e8		inx				inx
.9ed0	20 85 97	jsr $9785			jsr 	NSMIsZero
.9ed3	f0 02		beq $9ed7			beq 	_CDVError
.9ed5	ca		dex				dex
.9ed6	60		rts				rts
.9ed7					_CDVError:
.9ed7	a9 03		lda #$03		lda	#3
.9ed9	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.9edc					IntegerModulus:
.9edc	fa		plx				plx
.9edd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9ee0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ee3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ee4	0a		asl a				asl 	a
.9ee5	10 05		bpl $9eec			bpl 	_NotRef
.9ee7	48		pha				pha
.9ee8	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9eeb	68		pla				pla
.9eec					_NotRef:
.9eec	0a		asl a				asl 	a
.9eed	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9eef	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ef2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9ef5	f0 03		beq $9efa			beq 	_IntegerCode 				; if clear, then we have two integers
.9ef7	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.9efa					_IntegerCode:
.9efa	20 cf 9e	jsr $9ecf			jsr 	CheckDivideZero 			; do div zero check
.9efd	20 07 9f	jsr $9f07			jsr 	Int32Divide 				; do the division
.9f00	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9f03	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9f06	60		rts				rts
.9f07					Int32Divide:
.9f07	48		pha				pha 								; save AXY
.9f08	5a		phy				phy
.9f09	20 2c 97	jsr $972c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f0c	20 51 97	jsr $9751			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9f0f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9f11					_I32DivideLoop:
.9f11	e8		inx				inx
.9f12	e8		inx				inx
.9f13	20 6a 97	jsr $976a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9f16	ca		dex				dex
.9f17	ca		dex				dex
.9f18	20 6b 97	jsr $976b			jsr 	NSMRotateLeft
.9f1b	20 47 9f	jsr $9f47			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f1e	90 03		bcc $9f23			bcc 	_I32DivideNoCarryIn
.9f20	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9f23					_I32DivideNoCarryIn:
.9f23	88		dey				dey 								; loop round till division completed.
.9f24	d0 eb		bne $9f11			bne 	_I32DivideLoop
.9f26	7a		ply				ply 								; restore AXY and exit
.9f27	68		pla				pla
.9f28	60		rts				rts
.9f29					Int32ShiftDivide:
.9f29	48		pha				pha 								; save AY
.9f2a	5a		phy				phy
.9f2b	e8		inx				inx 								; clear S[X+2]
.9f2c	e8		inx				inx
.9f2d	20 55 97	jsr $9755			jsr 	NSMSetZero
.9f30	ca		dex				dex
.9f31	ca		dex				dex
.9f32	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9f34					_I32SDLoop:
.9f34	20 47 9f	jsr $9f47			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f37	e8		inx				inx
.9f38	e8		inx				inx
.9f39	20 6b 97	jsr $976b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9f3c	ca		dex				dex
.9f3d	ca		dex				dex
.9f3e	20 6b 97	jsr $976b			jsr 	NSMRotateLeft
.9f41	88		dey				dey 	 							; do 31 times
.9f42	d0 f0		bne $9f34			bne 	_I32SDLoop
.9f44	7a		ply				ply 								; restore AY and exit
.9f45	68		pla				pla
.9f46	60		rts				rts
.9f47					DivideCheckSubtract:
.9f47	20 1d 8e	jsr $8e1d			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9f4a	b0 04		bcs $9f50			bcs 	_DCSExit 					; if carry set, then could do, exit
.9f4c	20 f7 8d	jsr $8df7			jsr 	AddTopTwoStack 				; add it back in
.9f4f	18		clc				clc 								; and return False
.9f50					_DCSExit:
.9f50	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9f51					MulInteger:
.9f51	fa		plx				plx
.9f52	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f55	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f58	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f59	0a		asl a				asl 	a
.9f5a	10 05		bpl $9f61			bpl 	_NotRef
.9f5c	48		pha				pha
.9f5d	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9f60	68		pla				pla
.9f61					_NotRef:
.9f61	0a		asl a				asl 	a 							; put MSB of type into A:7
.9f62	30 0b		bmi $9f6f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9f64	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f67	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f6a	f0 06		beq $9f72			beq 	_IntegerCode 				; if clear, then we have two integers
.9f6c	4c a5 a1	jmp $a1a5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9f6f					_StringData:
.9f6f	4c 6c a4	jmp $a46c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9f72					_IntegerCode:
.9f72	20 7f 9f	jsr $9f7f			jsr 	MultiplyShort
.9f75	c9 00		cmp #$00			cmp 	#0
.9f77	f0 05		beq $9f7e			beq 	_MIExit
.9f79	a9 04		lda #$04		lda	#4
.9f7b	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.9f7e					_MIExit:
.9f7e	60		rts				rts
.9f7f					MultiplyShort:
.9f7f	5a		phy				phy 								; save Y
.9f80	20 2c 97	jsr $972c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f83	20 51 97	jsr $9751			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9f86	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9f88					_I32MLoop:
.9f88	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9f8b	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9f8e	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9f91	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9f94	f0 28		beq $9fbe			beq 	_I32MExit 					; exit if zero
.9f96	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9f99	29 01		and #$01			and 	#1
.9f9b	f0 0e		beq $9fab			beq 	_I32MNoAdd
.9f9d	20 f7 8d	jsr $8df7			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9fa0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9fa3	10 06		bpl $9fab			bpl 	_I32MNoAdd
.9fa5					_I32ShiftRight:
.9fa5	20 78 97	jsr $9778			jsr 	NSMShiftRight 				; shift S[X] right
.9fa8	c8		iny				iny 								; increment shift count
.9fa9	80 0a		bra $9fb5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9fab					_I32MNoAdd:
.9fab	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9fae	70 f5		bvs $9fa5			bvs 	_I32ShiftRight 				; instead.
.9fb0	e8		inx				inx
.9fb1	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9fb4	ca		dex				dex
.9fb5					_I32MShiftUpper:
.9fb5	e8		inx				inx 								; shift S[X+2] right
.9fb6	e8		inx				inx
.9fb7	20 78 97	jsr $9778			jsr 	NSMShiftRight
.9fba	ca		dex				dex
.9fbb	ca		dex				dex
.9fbc	80 ca		bra $9f88			bra 	_I32MLoop 					; try again.
.9fbe					_I32MExit:
.9fbe	20 c4 9f	jsr $9fc4			jsr 	CalculateSign
.9fc1	98		tya				tya 								; shift in A
.9fc2	7a		ply				ply 								; restore Y and exit
.9fc3	60		rts				rts
.9fc4					CalculateSign:
.9fc4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9fc7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9fca	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9fcd	0a		asl a				asl 	a 							; shift bit 7 into carry
.9fce	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9fd1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8d73					CompareStrings:
.8d73	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8d76	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d79	29 10		and #$10			and 	#NSBIsString
.8d7b	f0 2c		beq $8da9			beq 	_CSTypeError
.8d7d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8d80	85 36		sta $36				sta 	zTemp0
.8d82	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d85	85 37		sta $37				sta 	zTemp0+1
.8d87	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8d8a	85 38		sta $38				sta 	zTemp1
.8d8c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d8f	85 39		sta $39				sta 	zTemp1+1
.8d91	5a		phy				phy 								; save Y so we can access strings
.8d92	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8d94					_CSLoop:
.8d94	c8		iny				iny
.8d95	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8d97	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8d99	d0 06		bne $8da1			bne 	_CSDifferent
.8d9b	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8d9d	d0 f5		bne $8d94			bne 	_CSLoop 					; still comparing
.8d9f					_CSExit:
.8d9f	7a		ply				ply 								; reached end, return zero in A from EOS
.8da0	60		rts				rts
.8da1					_CSDifferent:
.8da1	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8da3	90 fa		bcc $8d9f			bcc		_CSExit
.8da5	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8da7	80 f6		bra $8d9f			bra 	_CSExit
.8da9					_CSTypeError:
.8da9	4c 62 a4	jmp $a462			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8dac					ShiftLeft:
.8dac	38		sec				sec
.8dad	80 01		bra $8db0			bra 	ShiftMain
.8daf					ShiftRight:
.8daf	18		clc				clc
.8db0					ShiftMain:
.8db0	fa		plx				plx 								; restore X
.8db1	08		php				php 								; save direction
.8db2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8db5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8db8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8db9	0a		asl a				asl 	a
.8dba	10 05		bpl $8dc1			bpl 	_NotRef
.8dbc	48		pha				pha
.8dbd	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8dc0	68		pla				pla
.8dc1					_NotRef:
.8dc1	0a		asl a				asl 	a
.8dc2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8dc4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8dc7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dca	f0 03		beq $8dcf			beq 	_IntegerCode 				; if clear, then we have two integers
.8dcc	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.8dcf					_IntegerCode:
.8dcf	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8dd2	29 e0		and #$e0			and 	#$E0
.8dd4	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8dd7	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8dda	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8ddd	d0 13		bne $8df2			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8ddf					_SMLoop:
.8ddf	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8de2	30 11		bmi $8df5			bmi 	_SMExit 					; exit if done.
.8de4	28		plp				plp 								; restore direcition setting
.8de5	08		php				php
.8de6	90 05		bcc $8ded			bcc 	_SMRight
.8de8	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; shift left if CS
.8deb	80 f2		bra $8ddf			bra 	_SMLoop
.8ded					_SMRight:
.8ded	20 78 97	jsr $9778			jsr 	NSMShiftRight 				; shift right if CC
.8df0	80 ed		bra $8ddf			bra 	_SMLoop
.8df2					_SMExit0:
.8df2	20 55 97	jsr $9755			jsr 	NSMSetZero 					; return zero.
.8df5					_SMExit:
.8df5	28		plp				plp 								; throw direction
.8df6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8df7					AddTopTwoStack:
.8df7	18		clc				clc
.8df8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8dfb	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8dfe	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e01	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e04	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8e07	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e0a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e0d	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8e10	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e13	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e16	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8e19	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e1c	60		rts				rts
.8e1d					SubTopTwoStack:
.8e1d	38		sec				sec
.8e1e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e21	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8e24	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e27	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e2a	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8e2d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e30	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e33	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8e36	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e39	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e3c	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8e3f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e42	60		rts				rts
.8e43					AddInteger:
.8e43	fa		plx				plx
.8e44	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e47	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e4a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e4b	0a		asl a				asl 	a
.8e4c	10 05		bpl $8e53			bpl 	_NotRef
.8e4e	48		pha				pha
.8e4f	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e52	68		pla				pla
.8e53					_NotRef:
.8e53	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e54	30 0b		bmi $8e61			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e56	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e59	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e5c	f0 06		beq $8e64			beq 	_IntegerCode 				; if clear, then we have two integers
.8e5e	4c 2d a0	jmp $a02d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8e61					_StringData:
.8e61	4c 16 8d	jmp $8d16			jmp 	StringConcat							; at least one string - don't know both are strings.
.8e64					_IntegerCode:
.8e64					AddCode:
.8e64	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8e67	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e6a	10 8b		bpl $8df7			bpl 	AddTopTwoStack
.8e6c	20 1d 8e	jsr $8e1d			jsr 	SubTopTwoStack 				; do a physical subtraction
.8e6f	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8e72	10 09		bpl $8e7d			bpl 	_AddExit
.8e74	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8e77	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e7a	20 0a 97	jsr $970a			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8e7d					_AddExit:
.8e7d	60		rts				rts
.8e7e					SubInteger:
.8e7e	fa		plx				plx
.8e7f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e82	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e85	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e86	0a		asl a				asl 	a
.8e87	10 05		bpl $8e8e			bpl 	_NotRef
.8e89	48		pha				pha
.8e8a	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e8d	68		pla				pla
.8e8e					_NotRef:
.8e8e	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e8f	30 0b		bmi $8e9c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e91	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e94	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e97	f0 06		beq $8e9f			beq 	_IntegerCode 				; if clear, then we have two integers
.8e99	4c 32 a0	jmp $a032			jmp 	FloatingPointSub 							; otherwise at least one float.
.8e9c					_StringData:
.8e9c	4c 6c a4	jmp $a46c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8e9f					_IntegerCode:
.8e9f	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8ea2	49 80		eor #$80			eor 	#$80
.8ea4	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8ea7	80 bb		bra $8e64			bra 	AddCode 					; and do the same code as add.
.8ea9					AndInteger:
.8ea9	fa		plx				plx
.8eaa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ead	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eb0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb1	0a		asl a				asl 	a
.8eb2	10 05		bpl $8eb9			bpl 	_NotRef
.8eb4	48		pha				pha
.8eb5	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb8	68		pla				pla
.8eb9					_NotRef:
.8eb9	0a		asl a				asl 	a
.8eba	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ebc	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ebf	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ec2	f0 03		beq $8ec7			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec4	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.8ec7					_IntegerCode:
.8ec7	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8eca	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8ecd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ed0	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ed3	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8ed6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ed9	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8edc	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8edf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ee2	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ee5	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8ee8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eeb	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8eee	60		rts				rts
.8eef					OraInteger:
.8eef	fa		plx				plx
.8ef0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ef3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ef6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ef7	0a		asl a				asl 	a
.8ef8	10 05		bpl $8eff			bpl 	_NotRef
.8efa	48		pha				pha
.8efb	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8efe	68		pla				pla
.8eff					_NotRef:
.8eff	0a		asl a				asl 	a
.8f00	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f02	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f05	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f08	f0 03		beq $8f0d			beq 	_IntegerCode 				; if clear, then we have two integers
.8f0a	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.8f0d					_IntegerCode:
.8f0d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f10	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8f13	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f16	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f19	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8f1c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f1f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f22	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8f25	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f28	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f2b	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8f2e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f31	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f34	60		rts				rts
.8f35					EorInteger:
.8f35	fa		plx				plx
.8f36	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f39	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f3c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f3d	0a		asl a				asl 	a
.8f3e	10 05		bpl $8f45			bpl 	_NotRef
.8f40	48		pha				pha
.8f41	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f44	68		pla				pla
.8f45					_NotRef:
.8f45	0a		asl a				asl 	a
.8f46	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f48	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f4b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f4e	f0 03		beq $8f53			beq 	_IntegerCode 				; if clear, then we have two integers
.8f50	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.8f53					_IntegerCode:
.8f53	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f56	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8f59	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f5c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f5f	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8f62	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f65	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f68	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8f6b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f6e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f71	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8f74	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f77	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f7a	60		rts				rts
.8f7b					WordIndirect:
.8f7b	fa		plx				plx
.8f7c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f7f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f82	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f83	0a		asl a				asl 	a
.8f84	10 05		bpl $8f8b			bpl 	_NotRef
.8f86	48		pha				pha
.8f87	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f8a	68		pla				pla
.8f8b					_NotRef:
.8f8b	0a		asl a				asl 	a
.8f8c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f8e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f91	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f94	f0 03		beq $8f99			beq 	_IntegerCode 				; if clear, then we have two integers
.8f96	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.8f99					_IntegerCode:
.8f99	20 64 8e	jsr $8e64			jsr 	AddCode 					; add the two values
.8f9c	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8f9e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fa1	60		rts				rts
.8fa2					ByteIndirect:
.8fa2	fa		plx				plx
.8fa3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fa6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fa9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8faa	0a		asl a				asl 	a
.8fab	10 05		bpl $8fb2			bpl 	_NotRef
.8fad	48		pha				pha
.8fae	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fb1	68		pla				pla
.8fb2					_NotRef:
.8fb2	0a		asl a				asl 	a
.8fb3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fb5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fb8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fbb	f0 03		beq $8fc0			beq 	_IntegerCode 				; if clear, then we have two integers
.8fbd	4c 62 a4	jmp $a462			jmp 	TypeError 					; anything else, type mismatch.
.8fc0					_IntegerCode:
.8fc0	20 64 8e	jsr $8e64			jsr 	AddCode 					; add the two values
.8fc3	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8fc5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fc8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9fd2					ConvertInt16:
.9fd2	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9fd5	8e 10 06	stx $0610			stx 	NSMantissa1
.9fd8	9c 18 06	stz $0618			stz 	NSMantissa2
.9fdb	9c 20 06	stz $0620			stz 	NSMantissa3
.9fde	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9fe1	a2 00		ldx #$00			ldx 	#0 							; stack level
.9fe3	a9 0a		lda #$0a			lda 	#10 						; base
.9fe5	80 00		bra $9fe7			bra 	ConvertInt32
.9fe7					ConvertInt32:
.9fe7	5a		phy				phy
.9fe8	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9fea	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9fed	10 08		bpl $9ff7			bpl 	_CI32NotNeg
.9fef	48		pha				pha
.9ff0	a9 2d		lda #$2d			lda 	#'-'
.9ff2	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.9ff5	c8		iny				iny
.9ff6	68		pla				pla
.9ff7					_CI32NotNeg:
.9ff7	20 05 a0	jsr $a005			jsr 	_CI32DivideConvert 			; recursive conversion
.9ffa	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9ffc	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.9fff	7a		ply				ply
.a000	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a002	a9 76		lda #$76			lda 	#NumberBuffer & $FF
.a004	60		rts				rts
.a005					_CI32DivideConvert:
.a005	e8		inx				inx 								; write to next slot up
.a006	20 57 97	jsr $9757			jsr 	NSMSetByte
.a009	ca		dex				dex
.a00a	20 07 9f	jsr $9f07			jsr 	Int32Divide 				; divide
.a00d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a010	48		pha				pha
.a011	20 b6 9e	jsr $9eb6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a014	20 85 97	jsr $9785			jsr 	NSMIsZero 					; is it zero ?
.a017	f0 06		beq $a01f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a019	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a01c	20 05 a0	jsr $a005			jsr 	_CI32DivideConvert 			; and recusrively call.
.a01f					_CI32NoRecurse:
.a01f	68		pla				pla 								; remainder
.a020	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a022	90 02		bcc $a026			bcc 	_CI32NotHex
.a024	69 26		adc #$26			adc 	#6+32
.a026					_CI32NotHex:
.a026	69 30		adc #$30			adc 	#48
.a028	99 76 08	sta $0876,y			sta 	NumberBuffer,y 				; write out and exit
.a02b	c8		iny				iny
.a02c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8fc9					PrecedenceLevel:
>8fc9	04					.byte	 4	; $00 <<
>8fca	02					.byte	 2	; $01 <=
>8fcb	02					.byte	 2	; $02 <>
>8fcc	00					.byte	 0	; $03 !!3
>8fcd	00					.byte	 0	; $04 ><
>8fce	02					.byte	 2	; $05 >=
>8fcf	04					.byte	 4	; $06 >>
>8fd0	00					.byte	 0	; $07 !!7
>8fd1	00					.byte	 0	; $08 !!8
>8fd2	00					.byte	 0	; $09 !!9
>8fd3	00					.byte	 0	; $0a !!10
>8fd4	00					.byte	 0	; $0b !!11
>8fd5	00					.byte	 0	; $0c !!12
>8fd6	00					.byte	 0	; $0d !!13
>8fd7	00					.byte	 0	; $0e !!14
>8fd8	00					.byte	 0	; $0f !!15
>8fd9	00					.byte	 0	; $10 @
>8fda	00					.byte	 0	; $11 !!17
>8fdb	00					.byte	 0	; $12 !!18
>8fdc	00					.byte	 0	; $13 [
>8fdd	04					.byte	 4	; $14 \
>8fde	00					.byte	 0	; $15 ]
>8fdf	01					.byte	 1	; $16 ^
>8fe0	00					.byte	 0	; $17 _
>8fe1	00					.byte	 0	; $18 `
>8fe2	00					.byte	 0	; $19 !!25
>8fe3	00					.byte	 0	; $1a !!26
>8fe4	00					.byte	 0	; $1b {
>8fe5	01					.byte	 1	; $1c |
>8fe6	00					.byte	 0	; $1d }
>8fe7	00					.byte	 0	; $1e ~
>8fe8	00					.byte	 0	; $1f [7m<7F>[m
>8fe9	00					.byte	 0	; $20
>8fea	05					.byte	 5	; $21 !
>8feb	00					.byte	 0	; $22 "
>8fec	00					.byte	 0	; $23 #
>8fed	05					.byte	 5	; $24 $
>8fee	04					.byte	 4	; $25 %
>8fef	01					.byte	 1	; $26 &
>8ff0	00					.byte	 0	; $27 '
>8ff1	00					.byte	 0	; $28 (
>8ff2	00					.byte	 0	; $29 )
>8ff3	04					.byte	 4	; $2a *
>8ff4	03					.byte	 3	; $2b +
>8ff5	00					.byte	 0	; $2c ,
>8ff6	03					.byte	 3	; $2d -
>8ff7	00					.byte	 0	; $2e .
>8ff8	04					.byte	 4	; $2f /
>8ff9	00					.byte	 0	; $30 0
>8ffa	00					.byte	 0	; $31 1
>8ffb	00					.byte	 0	; $32 2
>8ffc	00					.byte	 0	; $33 3
>8ffd	00					.byte	 0	; $34 4
>8ffe	00					.byte	 0	; $35 5
>8fff	00					.byte	 0	; $36 6
>9000	00					.byte	 0	; $37 7
>9001	00					.byte	 0	; $38 8
>9002	00					.byte	 0	; $39 9
>9003	00					.byte	 0	; $3a :
>9004	00					.byte	 0	; $3b ;
>9005	02					.byte	 2	; $3c <
>9006	02					.byte	 2	; $3d =
>9007	02					.byte	 2	; $3e >
>9008	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9009					EvaluateExpressionAt0:
.9009	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.900b					EvaluateExpression:
.900b	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.900d					EvaluateExpressionAtPrecedence:
.900d	48		pha				pha 								; save precedence level
.900e	20 dc 92	jsr $92dc			jsr 	EvaluateTerm 				; evaluate term into level X.
.9011	68		pla				pla 								; restore precedence level.
.9012					_EXPRLoop:
.9012	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9014	b1 30		lda ($30),y			lda 	(codePtr),y
.9016	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9018	b0 25		bcs $903f			bcs 	_EXPRExit
.901a	da		phx				phx 								; read the operator precedence
.901b	aa		tax				tax
.901c	bd c9 8f	lda $8fc9,x			lda 	PrecedenceLevel,x
.901f	fa		plx				plx
.9020	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9022	f0 1b		beq $903f			beq 	_EXPRExit
.9024	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9026	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9028	c5 37		cmp $37				cmp 	zTemp0+1
.902a	b0 13		bcs $903f			bcs		_EXPRExit 					; if current >= operator exit
.902c	48		pha				pha 								; save current precedence.
.902d	b1 30		lda ($30),y			lda 	(codePtr),y
.902f	c8		iny				iny
.9030	48		pha				pha
.9031	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9033	e8		inx				inx 								; work out the right hand side.
.9034	20 0d 90	jsr $900d			jsr 	EvaluateExpressionAtPrecedence
.9037	ca		dex				dex
.9038	68		pla				pla 								; get operator, call the code.
.9039	20 42 90	jsr $9042			jsr 	_EXPRCaller
.903c	68		pla				pla 								; restore precedence level
.903d	80 d3		bra $9012			bra 	_EXPRLoop 					; and go round.
.903f					_EXPRExit:
.903f	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9041	60		rts				rts
.9042					_EXPRCaller:
.9042	da		phx				phx 								; save on stack, first thing is to restore it
.9043	0a		asl a				asl 	a 							; double so can use vectors into X
.9044	aa		tax				tax
.9045	7c 36 80	jmp ($8036,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a02d					FloatingPointAdd:
.a02d	20 ce a1	jsr $a1ce			jsr 	FloatPrepare 				; prepare for floats
.a030	80 0b		bra $a03d			bra 	FloatAdd
.a032					FloatingPointSub:
.a032	20 ce a1	jsr $a1ce			jsr 	FloatPrepare 				; prepare for floats
.a035					FloatSubtract:
.a035	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a038	49 80		eor #$80			eor 	#$80
.a03a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a03d					FloatAdd:
.a03d	48		pha				pha
.a03e	5a		phy				phy
.a03f	20 df a1	jsr $a1df			jsr 	NSNormalise 				; normalise S[X]
.a042	f0 54		beq $a098			beq 	_FAReturn1
.a044	e8		inx				inx 								; normalise S[X+1]
.a045	20 df a1	jsr $a1df			jsr 	NSNormalise
.a048	ca		dex				dex
.a049	c9 00		cmp #$00			cmp 	#0
.a04b	f0 6f		beq $a0bc			beq 	_FAExit 					; if so, just return A
.a04d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a050	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a053	f0 1b		beq $a070			beq 	_FAExponentsEqual
.a055	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a058	a8		tay				tay
.a059	38		sec				sec 								; do a signed comparison of the exponents.
.a05a	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a05d	50 02		bvc $a061			bvc 	_FANoSignedChange
.a05f	49 80		eor #$80			eor 	#$80
.a061					_FANoSignedChange:
.a061	29 80		and #$80			and 	#$80
.a063	10 03		bpl $a068			bpl 	_FAHaveMax
.a065	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a068					_FAHaveMax:
.a068	20 bf a0	jsr $a0bf			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a06b	e8		inx				inx
.a06c	20 bf a0	jsr $a0bf			jsr 	_FAShiftToExponent
.a06f	ca		dex				dex
.a070					_FAExponentsEqual:
.a070	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a073	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a076	30 10		bmi $a088			bmi 	_FADifferentSigns
.a078	20 f7 8d	jsr $8df7			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a07b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a07e	10 3c		bpl $a0bc			bpl 	_FAExit 					; if no, we are done.
.a080	20 78 97	jsr $9778			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a083	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a086	80 34		bra $a0bc			bra 	_FAExit
.a088					_FADifferentSigns:
.a088	20 1d 8e	jsr $8e1d			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a08b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a08e	10 2c		bpl $a0bc			bpl 	_FAExit 					; if no, we are done.
.a090	20 01 97	jsr $9701			jsr 	NSMNegate 					; netate result
.a093	20 0a 97	jsr $970a			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a096	80 24		bra $a0bc			bra 	_FAExit
.a098					_FAReturn1:
.a098	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a09b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a09e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a0a1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a0a4	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a0a7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a0aa	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a0ad	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a0b0	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a0b3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a0b6	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a0b9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0bc					_FAExit:
.a0bc	7a		ply				ply
.a0bd	68		pla				pla
.a0be	60		rts				rts
.a0bf					_FAShiftToExponent:
.a0bf					_FAShiftToExponent2:
.a0bf	98		tya				tya 								; compare Y to exponent
.a0c0	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a0c3	f0 08		beq $a0cd			beq 	_FASEExit 					; exit if so.
.a0c5	20 78 97	jsr $9778			jsr 	NSMShiftRight	 			; shift the mantissa right
.a0c8	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a0cb	80 f2		bra $a0bf			bra 	_FAShiftToExponent2
.a0cd					_FASEExit:
.a0cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a0ce					CompareFloat:
.a0ce	20 35 a0	jsr $a035			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a0d1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a0d4	29 f8		and #$f8			and 	#$F8
.a0d6	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a0d9	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a0dc	f0 09		beq $a0e7			beq 	_FCExit 					; zero, so approximately identical
.a0de	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a0e0	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a0e3	10 02		bpl $a0e7			bpl 	_FCExit
.a0e5					_FCNegative:
.a0e5	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a0e7					_FCExit:
.a0e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a0e8					FDivideCommand:
.a0e8	fa		plx				plx	 								; restore stack position
.a0e9	20 ce a1	jsr $a1ce			jsr 	FloatPrepare 				; prepare for floats
.a0ec					FloatDivide:
.a0ec	48		pha				pha
.a0ed	e8		inx				inx
.a0ee	20 df a1	jsr $a1df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a0f1	ca		dex				dex
.a0f2	c9 00		cmp #$00			cmp 	#0
.a0f4	f0 20		beq $a116			beq 	_FDZero
.a0f6	20 df a1	jsr $a1df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a0f9	f0 19		beq $a114			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a0fb	20 29 9f	jsr $9f29			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a0fe	20 b6 9e	jsr $9eb6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a101	20 df a1	jsr $a1df			jsr		NSNormalise 				; renormalise
.a104	20 c4 9f	jsr $9fc4			jsr 	CalculateSign 				; calculate result sign
.a107	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a10a	38		sec				sec
.a10b	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a10e	38		sec				sec
.a10f	e9 1e		sbc #$1e			sbc 	#30
.a111	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a114					_FDExit:
.a114	68		pla				pla
.a115	60		rts				rts
.a116					_FDZero:
.a116	a9 03		lda #$03		lda	#3
.a118	4c 02 8c	jmp $8c02		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a11b					FloatFractionalPart:
.a11b	5a		phy				phy
.a11c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a11f	29 7f		and #$7f			and 	#$7F
.a121	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a124	20 df a1	jsr $a1df			jsr 	NSNormalise
.a127	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a12a	38		sec				sec
.a12b	e9 e0		sbc #$e0			sbc 	#$E0
.a12d	90 31		bcc $a160			bcc 	_FFPExit 					; already fractional
.a12f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a131	b0 2a		bcs $a15d			bcs 	_FFPZero
.a133	a8		tay				tay 								; put count to do in Y
.a134	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a137	20 62 a1	jsr $a162			jsr 	_FFPPartial
.a13a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a13d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a140	20 62 a1	jsr $a162			jsr 	_FFPPartial
.a143	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a146	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a149	20 62 a1	jsr $a162			jsr 	_FFPPartial
.a14c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a14f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a152	20 62 a1	jsr $a162			jsr 	_FFPPartial
.a155	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a158	20 85 97	jsr $9785			jsr 	NSMIsZero 					; zeroed check.
.a15b	d0 03		bne $a160			bne 	_FFPExit
.a15d					_FFPZero:
.a15d	20 55 97	jsr $9755			jsr 	NSMSetZero
.a160					_FFPExit:
.a160	7a		ply				ply
.a161	60		rts				rts
.a162					_FFPPartial:
.a162	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a164	f0 17		beq $a17d			beq 	_FFFPPExit
.a166	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a168	b0 0c		bcs $a176			bcs 	_FFFPPWholeByte
.a16a	5a		phy				phy
.a16b					_FFFPPLeft:
.a16b	0a		asl a				asl 	a
.a16c	88		dey				dey
.a16d	d0 fc		bne $a16b			bne 	_FFFPPLeft
.a16f	7a		ply				ply
.a170					_FFFPPRight:
.a170	4a		lsr a				lsr 	a
.a171	88		dey				dey
.a172	d0 fc		bne $a170			bne 	_FFFPPRight
.a174	80 07		bra $a17d			bra 	_FFFPPExit
.a176					_FFFPPWholeByte:
.a176	98		tya				tya 								; subtract 8 from count
.a177	38		sec				sec
.a178	e9 08		sbc #$08			sbc 	#8
.a17a	a8		tay				tay
.a17b	a9 00		lda #$00			lda 	#0 							; and clear all
.a17d					_FFFPPExit:
.a17d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a17e					FloatIntegerPart:
.a17e	48		pha				pha
.a17f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a182	f0 1f		beq $a1a3			beq 	_FIPExit 					; if so do nothing
.a184	20 85 97	jsr $9785			jsr 	NSMIsZero 					; is it zero ?
.a187	f0 17		beq $a1a0			beq 	_FIPZero 					; if so return zero.
.a189	20 df a1	jsr $a1df			jsr 	NSNormalise 				; normalise
.a18c	f0 12		beq $a1a0			beq 	_FIPZero 					; normalised to zero, exit zero
.a18e					_FIPShift:
.a18e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a191	10 08		bpl $a19b			bpl 	_FIPCheckZero
.a193	20 78 97	jsr $9778			jsr 	NSMShiftRight 				; shift mantissa right
.a196	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a199	80 f3		bra $a18e			bra 	_FIPShift
.a19b					_FIPCheckZero:
.a19b	20 85 97	jsr $9785			jsr 	NSMIsZero 					; avoid -0 problem
.a19e	d0 03		bne $a1a3			bne 	_FIPExit 					; set to zero if mantissa zero.
.a1a0					_FIPZero:
.a1a0	20 55 97	jsr $9755			jsr 	NSMSetZero
.a1a3					_FIPExit:
.a1a3	68		pla				pla
.a1a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a1a5					FloatingPointMultiply:
.a1a5	20 ce a1	jsr $a1ce			jsr 	FloatPrepare 				; prepare for floats
.a1a8					FloatMultiply:
.a1a8	48		pha				pha
.a1a9	20 df a1	jsr $a1df			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a1ac	f0 1b		beq $a1c9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a1ae	e8		inx				inx
.a1af	20 df a1	jsr $a1df			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a1b2	ca		dex				dex
.a1b3	c9 00		cmp #$00			cmp 	#0
.a1b5	f0 0f		beq $a1c6			beq 	_FDSetZero
.a1b7	20 7f 9f	jsr $9f7f			jsr 	MultiplyShort 				; calculate the result.
.a1ba	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a1bd	18		clc				clc
.a1be	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a1c1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1c4	80 03		bra $a1c9			bra 	_FDExit
.a1c6					_FDSetZero:
.a1c6	20 55 97	jsr $9755			jsr 	NSMSetZero 					; return 0
.a1c9					_FDExit:
.a1c9	20 df a1	jsr $a1df			jsr 	NSNormalise 				; normalise the result
.a1cc	68		pla				pla
.a1cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a1ce					FloatPrepare:
.a1ce	20 1b 91	jsr $911b			jsr 	DereferenceTopTwo 			; dereference the top two values
.a1d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a1d4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a1d7	29 10		and #$10			and 	#NSBIsString
.a1d9	d0 01		bne $a1dc			bne 	_FDType
.a1db	60		rts				rts
.a1dc					_FDType:
.a1dc	4c 62 a4	jmp $a462			jmp 	TypeError
.a1df					NSNormalise:
.a1df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a1e2	29 80		and #$80			and 	#$80
.a1e4	09 08		ora #$08			ora 	#NSTFloat
.a1e6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1e9	20 85 97	jsr $9785			jsr 	NSMIsZero 					; if zero exit
.a1ec	d0 09		bne $a1f7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a1ee	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a1f1	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a1f4	a9 00		lda #$00			lda 	#0 							; set Z flag
.a1f6	60		rts				rts
.a1f7					_NSNormaliseOptimise:
.a1f7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a1fa	d0 22		bne $a21e			bne 	_NSNormaliseLoop
.a1fc	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a1ff	30 1d		bmi $a21e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a201	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a204	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a207	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a20a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a20d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a210	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a213	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a216	38		sec				sec
.a217	e9 08		sbc #$08			sbc 	#8
.a219	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a21c	80 d9		bra $a1f7			bra 	_NSNormaliseOptimise
.a21e					_NSNormaliseLoop:
.a21e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a221	70 08		bvs $a22b			bvs 	_NSNExit 					; exit if so with Z flag clear
.a223	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; shift mantissa left
.a226	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a229	80 f3		bra $a21e			bra 	_NSNormaliseLoop
.a22b					_NSNExit:
.a22b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a22d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9048					AssignNumber:
.9048	5a		phy				phy
.9049	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.904c	85 36		sta $36				sta 	zTemp0
.904e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9051	85 37		sta $37				sta 	zTemp0+1
.9053	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9056	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9058	9d 00 06	sta $0600,x			sta 	NSStatus,x
.905b	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.905d	c9 08		cmp #$08			cmp 	#NSTFloat
.905f	f0 2a		beq $908b			beq 	_ANFloat
.9061	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9064	f0 05		beq $906b			beq		_ANNotFloat
.9066	e8		inx				inx
.9067	20 7e a1	jsr $a17e			jsr 	FloatIntegerPart 			; make it an integer
.906a	ca		dex				dex
.906b					_ANNotFloat:
.906b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.906e	29 03		and #$03			and 	#3
.9070	d0 05		bne $9077			bne 	_ANByteWord
.9072	20 97 90	jsr $9097			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9075	80 1e		bra $9095			bra 	_ANExit
.9077					_ANByteWord:
.9077	48		pha				pha 								; save count
.9078	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.907b	92 36		sta ($36)			sta 	(zTemp0)
.907d	68		pla				pla
.907e	c9 01		cmp #$01			cmp	 	#1
.9080	f0 13		beq $9095			beq 	_ANExit
.9082	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9085	a0 01		ldy #$01			ldy 	#1
.9087	91 36		sta ($36),y			sta 	(zTemp0),y
.9089	80 0a		bra $9095			bra 	_ANExit
.908b					_ANFloat:
.908b	20 97 90	jsr $9097			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.908e	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9091	a0 04		ldy #$04			ldy 	#4
.9093	91 36		sta ($36),y			sta 	(zTemp0),y
.9095					_ANExit:
.9095	7a		ply				ply
.9096	60		rts				rts
.9097					_ANCopy4PackSign:
.9097	a0 03		ldy #$03			ldy 	#3
.9099	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.909c	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.909e	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.90a1	91 36		sta ($36),y			sta 	(zTemp0),y
.90a3	88		dey				dey
.90a4	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.90a7	91 36		sta ($36),y			sta 	(zTemp0),y
.90a9	88		dey				dey
.90aa	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.90ad	91 36		sta ($36),y			sta 	(zTemp0),y
.90af	88		dey				dey
.90b0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.90b3	91 36		sta ($36),y			sta 	(zTemp0),y
.90b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.90b6					AssignString:
.90b6	5a		phy				phy
.90b7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.90ba	85 38		sta $38				sta 	zTemp1
.90bc	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.90bf	85 39		sta $39				sta 	zTemp1+1
.90c1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.90c4	85 36		sta $36				sta 	zTemp0
.90c6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90c9	85 37		sta $37				sta 	zTemp0+1
.90cb	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.90cd	b1 36		lda ($36),y			lda 	(zTemp0),y
.90cf	f0 23		beq $90f4			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.90d1	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.90d2	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.90d4	e9 02		sbc #$02			sbc 	#2
.90d6	85 3c		sta $3c				sta 	zsTemp
.90d8	a0 01		ldy #$01			ldy 	#1
.90da	b1 36		lda ($36),y			lda 	(zTemp0),y
.90dc	e9 00		sbc #$00			sbc 	#0
.90de	85 3d		sta $3d				sta 	zsTemp+1
.90e0	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.90e2					_ASGetLength:
.90e2	c8		iny				iny
.90e3	b1 38		lda ($38),y			lda 	(zTemp1),y
.90e5	d0 fb		bne $90e2			bne 	_ASGetLength
.90e7	98		tya				tya 								; is this length <= current length
.90e8	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.90ea	90 20		bcc $910c			bcc 	_ASCopyString
.90ec	f0 1e		beq $910c			beq 	_ASCopyString
.90ee	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.90f0	a0 01		ldy #$01			ldy 	#1
.90f2	91 3c		sta ($3c),y			sta 	(zsTemp),y
.90f4					_ASNewStringRequired:
.90f4	e8		inx				inx 								; concrete the new string.
.90f5	20 d7 a5	jsr $a5d7			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.90f8	ca		dex				dex
.90f9	18		clc				clc
.90fa	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.90fd	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.90ff	92 36		sta ($36)			sta 	(zTemp0)
.9101	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9104	69 00		adc #$00			adc 	#0
.9106	a0 01		ldy #$01			ldy 	#1
.9108	91 36		sta ($36),y			sta 	(zTemp0),y
.910a	80 0d		bra $9119			bra 	_ASExit
.910c					_ASCopyString:
.910c	a0 00		ldy #$00			ldy 	#0
.910e					_ASCopyLoop:
.910e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9110	c8		iny				iny
.9111	c8		iny				iny
.9112	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9114	88		dey				dey
.9115	c9 00		cmp #$00			cmp 	#0
.9117	d0 f5		bne $910e			bne 	_ASCopyLoop
.9119					_ASExit:
.9119	7a		ply				ply
.911a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.911b					DereferenceTopTwo:
.911b	e8		inx				inx
.911c	20 20 91	jsr $9120			jsr 	Dereference 				; deref x+1
.911f	ca		dex				dex  								; falls through to deref x
.9120					Dereference:
.9120	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.9123	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9125	f0 57		beq $917e			beq 	_DRFExit 					; not a reference
.9127	5a		phy				phy
.9128	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.912b	85 36		sta $36				sta 	zTemp0
.912d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9130	85 37		sta $37				sta 	zTemp0+1
.9132	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9135	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9137	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.913a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.913d	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.913f	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9141	f0 0f		beq $9152			beq 	_DRFDereferenceTwo
.9143	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9145	f0 39		beq $9180			beq 	_DRFFull
.9147	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.914a	29 03		and #$03			and 	#3
.914c	f0 32		beq $9180			beq 	_DRFFull 					; the whole word
.914e	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9150	f0 07		beq $9159			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9152					_DRFDereferenceTwo:
.9152	a0 01		ldy #$01			ldy 	#1
.9154	b1 36		lda ($36),y			lda 	(zTemp0),y
.9156	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9159					_DRFClear23:
.9159	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.915c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.915f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.9162	29 18		and #$18			and 	#NSBTypeMask
.9164	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9167	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9169	d0 12		bne $917d			bne 	_DRFNotString
.916b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.916e	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9171	d0 0a		bne $917d			bne 	_DRFNotString
.9173	a9 7f		lda #$7f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9175	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9178	a9 91		lda #$91			lda 	#_DRFNullString >> 8
.917a	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.917d					_DRFNotString
.917d	7a		ply				ply 								; restore Y and exit
.917e					_DRFExit:
.917e	60		rts				rts
.917f					_DRFNullString:
>917f	00						.byte 	0
.9180					_DRFFull:
.9180	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9182	b1 36		lda ($36),y			lda 	(zTemp0),y
.9184	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9187	c8		iny				iny
.9188	b1 36		lda ($36),y			lda 	(zTemp0),y
.918a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.918d	c8		iny				iny
.918e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9190	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9193	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9196	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9199	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.919b	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.919e	f0 06		beq $91a6			beq 	_DRFNoExponent
.91a0	c8		iny				iny 								; if not, read the exponent as well.
.91a1	b1 36		lda ($36),y			lda 	(zTemp0),y
.91a3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.91a6					_DRFNoExponent:
.91a6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.91a9	10 0d		bpl $91b8			bpl 	_DRFExit2 					; if not, then exit.
.91ab	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.91ad	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91b0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.91b3	09 80		ora #$80			ora 	#NSBIsNegative
.91b5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91b8					_DRFExit2:
.91b8	7a		ply				ply
.91b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.91ba					EncodeNumberStart:
.91ba	38		sec				sec
.91bb	80 01		bra $91be			bra 	EncodeNumberContinue+1
.91bd					EncodeNumberContinue:
.91bd	18		clc				clc
.91be					EncodeNumber:
.91be	08		php				php 								; save reset.
.91bf	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.91c1	f0 12		beq $91d5			beq 	_ENIsOkay
.91c3	c9 30		cmp #$30			cmp 	#"0"
.91c5	90 04		bcc $91cb			bcc 	_ENBadNumber
.91c7	c9 3a		cmp #$3a			cmp 	#"9"+1
.91c9	90 0a		bcc $91d5			bcc 	_ENIsOkay
.91cb					_ENBadNumber:
.91cb	28		plp				plp 								; throw saved reset
.91cc	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.91cf	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.91d1	f0 7e		beq $9251			beq 	_ENConstructFinal
.91d3					_ENFail:
.91d3	18		clc				clc 								; not allowed
.91d4	60		rts				rts
.91d5					_ENIsOkay:
.91d5	28		plp				plp 								; are we restarting
.91d6	90 15		bcc $91ed			bcc 	_ENNoRestart
.91d8					_ENStartEncode:
.91d8	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.91da	f0 0c		beq $91e8			beq 	_ENFirstDP
.91dc	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.91de	20 57 97	jsr $9757			jsr 	NSMSetByte
.91e1	a9 01		lda #$01			lda 	#ESTA_Low
.91e3					_ENExitChange:
.91e3	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.91e6	38		sec				sec
.91e7	60		rts				rts
.91e8					_ENFirstDP:
.91e8	20 55 97	jsr $9755			jsr 	NSMSetZero 					; clear integer part
.91eb	80 3f		bra $922c			bra 	_ESTASwitchFloat			; go straight to float and exi
.91ed					_ENNoRestart:
.91ed	48		pha				pha 								; save on stack.
.91ee	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.91f1	c9 01		cmp #$01			cmp 	#ESTA_Low
.91f3	f0 09		beq $91fe			beq  	_ESTALowState
.91f5	c9 02		cmp #$02			cmp 	#ESTA_High
.91f7	f0 29		beq $9222			beq 	_ESTAHighState
.91f9	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.91fb	f0 3b		beq $9238			beq 	_ESTADecimalState
>91fd	db						.byte 	$DB 						; causes a break in the emulator
.91fe					_ESTALowState:
.91fe	68		pla				pla 								; get value back
.91ff	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9201	f0 29		beq $922c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9203	29 0f		and #$0f			and 	#15 						; make digit
.9205	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.9208	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.920b	0a		asl a				asl 	a
.920c	0a		asl a				asl 	a
.920d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9210	0a		asl a				asl 	a
.9211	6d 06 07	adc $0706			adc 	DigitTemp
.9214	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9217	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9219	90 05		bcc $9220			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.921b	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.921d	8d 05 07	sta $0705			sta 	EncodeState
.9220					_ESTANoSwitch:
.9220	38		sec				sec
.9221	60		rts				rts
.9222					_ESTAHighState:
.9222	68		pla				pla 								; get value back
.9223	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9225	f0 05		beq $922c			beq 	_ESTASwitchFloat
.9227	20 8b 92	jsr $928b			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.922a	38		sec				sec
.922b	60		rts				rts
.922c					_ESTASwitchFloat:
.922c	9c 07 07	stz $0707			stz 	DecimalCount
.922f	e8		inx				inx 								; zero the decimal additive.
.9230	20 55 97	jsr $9755			jsr 	NSMSetZero
.9233	ca		dex				dex
.9234	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9236	80 ab		bra $91e3			bra 	_ENExitChange
.9238					_ESTADecimalState:
.9238	68		pla				pla 								; digit.
.9239	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.923b	f0 96		beq $91d3			beq 	_ENFail
.923d	e8		inx				inx 								; put digit into fractional part of X+1
.923e	20 8b 92	jsr $928b			jsr 	ESTAShiftDigitIntoMantissa
.9241	ca		dex				dex
.9242	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9245	ad 07 07	lda $0707			lda 	DecimalCount
.9248	c9 0b		cmp #$0b			cmp 	#11
.924a	f0 02		beq $924e			beq 	_ESTADSFail
.924c	38		sec				sec
.924d	60		rts				rts
.924e					_ESTADSFail:
.924e	4c 5d a4	jmp $a45d			jmp 	RangeError
.9251					_ENConstructFinal:
.9251	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9254	f0 33		beq $9289			beq 	_ENCFExit 					; no decimals
.9256	5a		phy				phy
.9257	0a		asl a				asl 	a 							; x 4 and CLC
.9258	0a		asl a				asl 	a
.9259	6d 07 07	adc $0707			adc 	DecimalCount
.925c	a8		tay				tay
.925d	b9 1c a4	lda $a41c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9260	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9263	b9 1d a4	lda $a41d,y			lda 	DecimalScalarTable-5+1,y
.9266	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9269	b9 1e a4	lda $a41e,y			lda 	DecimalScalarTable-5+2,y
.926c	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.926f	b9 1f a4	lda $a41f,y			lda 	DecimalScalarTable-5+3,y
.9272	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9275	b9 20 a4	lda $a420,y			lda 	DecimalScalarTable-5+4,y
.9278	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.927b	a9 08		lda #$08			lda 	#NSTFloat
.927d	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9280	7a		ply				ply
.9281	e8		inx				inx 								; multiply decimal const by decimal scalar
.9282	20 a8 a1	jsr $a1a8			jsr 	FloatMultiply
.9285	ca		dex				dex
.9286	20 3d a0	jsr $a03d			jsr 	FloatAdd 					; add to integer part.
.9289					_ENCFExit:
.9289	18		clc				clc 								; reject the digit.
.928a	60		rts				rts
.928b					ESTAShiftDigitIntoMantissa:
.928b	29 0f		and #$0f			and 	#15 						; save digit
.928d	48		pha				pha
.928e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9291	48		pha				pha
.9292	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9295	48		pha				pha
.9296	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9299	48		pha				pha
.929a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.929d	48		pha				pha
.929e	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; x 2
.92a1	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; x 4
.92a4	18		clc				clc 								; pop mantissa and add
.92a5	68		pla				pla
.92a6	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92a9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92ac	68		pla				pla
.92ad	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.92b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92b3	68		pla				pla
.92b4	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.92b7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92ba	68		pla				pla
.92bb	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.92be	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.92c1	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; x 10
.92c4	68		pla				pla 								; add digit
.92c5	18		clc				clc
.92c6	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92c9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92cc	90 0d		bcc $92db			bcc 	_ESTASDExit
.92ce	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.92d1	d0 08		bne $92db			bne 	_ESTASDExit
.92d3	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.92d6	d0 03		bne $92db			bne 	_ESTASDExit
.92d8	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.92db					_ESTASDExit:
.92db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.92dc					EvaluateTerm:
.92dc	b1 30		lda ($30),y			lda 	(codePtr),y
.92de	30 18		bmi $92f8			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.92e0	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.92e2	b0 6f		bcs $9353			bcs 	_ETVariable
.92e4	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.92e6	90 6e		bcc $9356			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.92e8	c9 3a		cmp #$3a			cmp 	#'9'+1
.92ea	b0 6a		bcs $9356			bcs 	_ETPuncUnary
.92ec	20 ba 91	jsr $91ba			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.92ef					_ETNumber:
.92ef	c8		iny				iny 								; keep encoding until we have the numbers
.92f0	b1 30		lda ($30),y			lda 	(codePtr),y
.92f2	20 bd 91	jsr $91bd			jsr 	EncodeNumberContinue
.92f5	b0 f8		bcs $92ef			bcs 	_ETNumber 					; go back if accepted.
.92f7	60		rts				rts
.92f8					_ETCheckUnary:
.92f8	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.92fa	f0 41		beq $933d			beq 	_ETString
.92fc	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.92fe	f0 12		beq $9312			beq 	_ETHexConstant
.9300	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9302	90 0b		bcc $930f			bcc 	_ETSyntaxError
.9304	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.9306	b0 07		bcs $930f			bcs 	_ETSyntaxError
.9308	da		phx				phx 								; push X on the stack
.9309	0a		asl a				asl 	a 							; put vector x 2 into X
.930a	aa		tax				tax
.930b	c8		iny				iny 								; consume unary function token
.930c	7c b6 80	jmp ($80b6,x)			jmp 	(VectorSet0,x) 				; and do it.
.930f					_ETSyntaxError:
.930f	4c 58 a4	jmp $a458			jmp 	SyntaxError
.9312					_ETHexConstant:
.9312	c8		iny				iny 								; skip #
.9313	c8		iny				iny 								; skip count
.9314	20 55 97	jsr $9755			jsr 	NSMSetZero 					; clear result
.9317					_ETHLoop:
.9317	b1 30		lda ($30),y			lda 	(codePtr),y
.9319	c8		iny				iny 								; and consume
.931a	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.931c	f0 1e		beq $933c			beq 	_ETHExit
.931e	48		pha				pha 								; save on stack.
.931f	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; x 2
.9322	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; x 4
.9325	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; x 8
.9328	20 6a 97	jsr $976a			jsr 	NSMShiftLeft 				; x 16
.932b	68		pla				pla 								; ASCII
.932c	c9 41		cmp #$41			cmp 	#'A'
.932e	90 02		bcc $9332			bcc 	_ETHNotChar
.9330	e9 07		sbc #$07			sbc 	#7
.9332					_ETHNotChar:
.9332	29 0f		and #$0f			and 	#15 						; digit now
.9334	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9337	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.933a	80 db		bra $9317			bra 	_ETHLoop 					; go round.
.933c					_ETHExit:
.933c	60		rts				rts
.933d					_ETString:
.933d	c8		iny				iny 								; look at length
.933e	b1 30		lda ($30),y			lda 	(codePtr),y
.9340	48		pha				pha
.9341	c8		iny				iny 								; first character
.9342	20 f0 9d	jsr $9df0			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9345	68		pla				pla 								; restore count and save
.9346	85 36		sta $36				sta 	zTemp0
.9348	98		tya				tya 								; add length to Y to skip it.
.9349	18		clc				clc
.934a	65 36		adc $36				adc 	zTemp0
.934c	a8		tay				tay
.934d	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.934f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9352	60		rts				rts
.9353					_ETVariable:
.9353	4c ad 93	jmp $93ad			jmp 	VariableHandler
.9356					_ETPuncUnary:
.9356	c8		iny				iny 								; consume the unary character
.9357	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9359	f0 2d		beq $9388			beq 	_ETUnaryNegate
.935b	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.935d	f0 39		beq $9398			beq 	_ETDereference
.935f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9361	f0 43		beq $93a6			beq 	_ETParenthesis
.9363	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9365	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9367	f0 06		beq $936f			beq 	_ETIndirection
.9369	e6 36		inc $36				inc 	zTemp0
.936b	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.936d	d0 a0		bne $930f			bne 	_ETSyntaxError
.936f					_ETIndirection:
.936f	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9371	1a		inc a				inc 	a
.9372	48		pha				pha
.9373	20 dc 92	jsr $92dc			jsr 	EvaluateTerm				; evaluate the term
.9376	20 20 91	jsr $9120			jsr 	Dereference 				; dereference it.
.9379	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.937c	d0 07		bne $9385			bne 	_ETTypeMismatch
.937e	68		pla				pla 								; indirection 1-2
.937f	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9381	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9384	60		rts				rts
.9385					_ETTypeMismatch:
.9385	4c 62 a4	jmp $a462			jmp 	TypeError
.9388					_ETUnaryNegate:
.9388	20 dc 92	jsr $92dc			jsr 	EvaluateTerm				; evaluate the term
.938b	20 20 91	jsr $9120			jsr 	Dereference 				; dereference it.
.938e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.9391	29 10		and #$10			and 	#NSTString
.9393	d0 f0		bne $9385			bne 	_ETTypeMismatch
.9395	4c 01 97	jmp $9701			jmp 	NSMNegate  					; just toggles the sign bit.
.9398					_ETDereference:
.9398	20 dc 92	jsr $92dc			jsr 	EvaluateTerm				; evaluate the term
.939b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.939e	29 20		and #$20			and 	#NSBIsReference
.93a0	f0 e3		beq $9385			beq 	_ETTypeMismatch
.93a2	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.93a5	60		rts				rts
.93a6					_ETParenthesis:
.93a6	20 0b 90	jsr $900b			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.93a9	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 			; check for )
.93ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.93ad					VariableHandler:
.93ad	b1 30		lda ($30),y			lda 	(codePtr),y
.93af	18		clc				clc
.93b0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.93b2	85 37		sta $37				sta 	zTemp0+1
.93b4	c8		iny				iny
.93b5	b1 30		lda ($30),y			lda 	(codePtr),y
.93b7	85 36		sta $36				sta 	zTemp0
.93b9	c8		iny				iny
.93ba	18		clc				clc									; copy variable address+3 to mantissa
.93bb	69 03		adc #$03			adc 	#3
.93bd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93c0	a5 37		lda $37				lda 	zTemp0+1
.93c2	69 00		adc #$00			adc 	#0
.93c4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93c7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.93ca	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.93cd	9e 28 06	stz $0628,x			stz 	NSExponent,x
.93d0	5a		phy				phy
.93d1	a0 02		ldy #$02			ldy 	#2 							; read type
.93d3	b1 36		lda ($36),y			lda 	(zTemp0),y
.93d5	7a		ply				ply
.93d6	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.93d8	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.93da	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93dd	29 04		and #$04			and 	#NSBIsArray
.93df	d0 01		bne $93e2			bne 	_VHArray
.93e1	60		rts				rts
.93e2					_VHArray:
.93e2	e8		inx				inx
.93e3	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger 		; get the 1st index.
.93e6	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.93e8	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.93eb	b1 30		lda ($30),y			lda 	(codePtr),y
.93ed	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.93ef	d0 06		bne $93f7			bne 	_VHNoSecondIndex
.93f1	c8		iny				iny 								; skip the comma
.93f2	e8		inx				inx
.93f3	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.93f6	ca		dex				dex
.93f7					_VHNoSecondIndex:
.93f7	ca		dex				dex 								; set X back.
.93f8	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 			; and check the right bracket.
.93fb	5a		phy				phy 								; save position
.93fc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.93ff	85 3e		sta $3e				sta 	zaTemp
.9401	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9404	85 3f		sta $3f				sta 	zaTemp+1
.9406	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9408	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.940a	f0 02		beq $940e			beq 	_VHHas2Mask
.940c	a9 ff		lda #$ff			lda 	#$FF
.940e					_VHHas2Mask:
.940e	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9411	f0 54		beq $9467			beq 	_VHBadIndex
.9413	0a		asl a				asl 	a 							; carry will be set if a second index
.9414	90 09		bcc $941f			bcc 	_VHCheckFirstIndex
.9416	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9418	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.941a	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.941d	90 48		bcc $9467			bcc 	_VHBadIndex
.941f					_VHCheckFirstIndex:
.941f	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9421	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9423	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9426	90 3f		bcc $9467			bcc 	_VHBadIndex
.9428	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.942a	64 37		stz $37				stz 	zTemp0+1
.942c	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.942f	30 0f		bmi $9440			bmi 	_VHNoMultiply
.9431	da		phx				phx
.9432	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9435	48		pha				pha
.9436	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9438	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.943a	1a		inc a				inc 	a 							; add 1 for zero base
.943b	fa		plx				plx
.943c	20 f8 a2	jsr $a2f8			jsr 	Multiply8x8 				; calculate -> Z0
.943f	fa		plx				plx
.9440					_VHNoMultiply:
.9440	18		clc				clc
.9441	a5 36		lda $36				lda 	zTemp0
.9443	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9446	85 36		sta $36				sta 	zTemp0
.9448	a5 37		lda $37				lda 	zTemp0+1
.944a	69 00		adc #$00			adc 	#0
.944c	85 37		sta $37				sta 	zTemp0+1
.944e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9451	20 83 85	jsr $8583			jsr 	ScaleByBaseType
.9454	18		clc				clc
.9455	b2 3e		lda ($3e)			lda 	(zaTemp)
.9457	65 36		adc $36				adc 	zTemp0
.9459	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.945c	a0 01		ldy #$01			ldy 	#1
.945e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9460	65 37		adc $37				adc 	zTemp0+1
.9462	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9465	7a		ply				ply 								; restore position
.9466	60		rts				rts
.9467					_VHBadIndex:
.9467	a9 17		lda #$17		lda	#23
.9469	4c 02 8c	jmp $8c02		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a22e					AbsUnary:
.a22e	fa		plx				plx 								; restore stack pos
.a22f	20 a9 96	jsr $96a9			jsr 	EvaluateNumber 				; get a float or int
.a232	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.a235	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a238	29 7f		and #$7f			and 	#$7F
.a23a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a23d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.946c					AllocUnary:
.946c	fa		plx				plx 								; restore stack pos
.946d	20 e1 96	jsr $96e1			jsr 	Evaluate16BitInteger		; get bytes required.
.9470	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.9473	da		phx				phx 								; save X/Y
.9474	5a		phy				phy
.9475	8a		txa				txa 								; copy X into Y
.9476	a8		tay				tay
.9477	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.947a	aa		tax				tax
.947b	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.947e	20 8b 94	jsr $948b			jsr 	AllocateXABytes 			; allocate memory
.9481	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9484	8a		txa				txa
.9485	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9488	7a		ply				ply
.9489	fa		plx				plx
.948a	60		rts				rts
.948b					AllocateXABytes:
.948b	5a		phy				phy
.948c	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.948f	84 36		sty $36				sty 	zTemp0
.9491	5a		phy				phy
.9492	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9495	84 37		sty $37				sty 	zTemp0+1
.9497	5a		phy				phy
.9498	18		clc				clc 								; add to low memory pointer
.9499	6d 0c 07	adc $070c			adc 	lowMemPtr
.949c	8d 0c 07	sta $070c			sta 	lowMemPtr
.949f	8a		txa				txa
.94a0	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.94a3	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.94a6					_ClearMemory:
.94a6	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.94a9	c5 36		cmp $36				cmp 	zTemp0
.94ab	d0 07		bne $94b4			bne 	_CMClearNext
.94ad	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.94b0	c5 37		cmp $37				cmp 	zTemp0+1
.94b2	f0 0c		beq $94c0			beq 	_CMExit
.94b4					_CMClearNext:
.94b4	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.94b6	92 36		sta ($36)			sta 	(zTemp0)
.94b8	e6 36		inc $36				inc 	zTemp0
.94ba	d0 ea		bne $94a6			bne 	_ClearMemory
.94bc	e6 37		inc $37				inc		zTemp0+1
.94be	80 e6		bra $94a6			bra 	_ClearMemory
.94c0					_CMExit:
.94c0	fa		plx				plx
.94c1	68		pla				pla
.94c2	7a		ply				ply
.94c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a23e					AscUnary:
.a23e	fa		plx				plx 								; restore stack pos
.a23f	20 b4 96	jsr $96b4			jsr 	EvaluateString 				; get a string
.a242	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a244	20 57 97	jsr $9757			jsr 	NSMSetByte
.a247	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.a24a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a24b					FracUnary:
.a24b	fa		plx				plx 								; restore stack pos
.a24c	20 a9 96	jsr $96a9			jsr 	EvaluateNumber 				; get a float or int
.a24f	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.a252	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a255	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a257	f0 04		beq $a25d			beq 	_IUZero
.a259	20 1b a1	jsr $a11b			jsr 	FloatFractionalPart
.a25c	60		rts				rts
.a25d					_IUZero:
.a25d	20 55 97	jsr $9755			jsr 	NSMSetZero
.a260	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a261					IntUnary:
.a261	fa		plx				plx 								; restore stack pos
.a262	20 a9 96	jsr $96a9			jsr 	EvaluateNumber 				; get a float or int
.a265	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.a268	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a26b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a26d	f0 03		beq $a272			beq 	_IUExit
.a26f	20 7e a1	jsr $a17e			jsr 	FloatIntegerPart
.a272					_IUExit:
.a272	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a273					LenUnary:
.a273	fa		plx				plx 								; restore stack pos
.a274	20 b4 96	jsr $96b4			jsr 	EvaluateString 				; get a string
.a277	5a		phy				phy
.a278	a0 00		ldy #$00			ldy 	#0 							; find length
.a27a					_LenFind:
.a27a	b1 36		lda ($36),y			lda 	(zTemp0),y
.a27c	f0 06		beq $a284			beq 	_LenExit
.a27e	c8		iny				iny
.a27f	d0 f9		bne $a27a			bne 	_LenFind
.a281	4c 5d a4	jmp $a45d			jmp 	RangeError 					; string > 255
.a284					_LenExit:
.a284	98		tya				tya
.a285	20 57 97	jsr $9757			jsr 	NSMSetByte
.a288	7a		ply				ply
.a289	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.a28c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.94c4					Unary_Not:
.94c4	fa		plx				plx
.94c5	20 cc 96	jsr $96cc			jsr 	EvaluateInteger 			; get integer
.94c8	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.94cb	20 85 97	jsr $9785			jsr 	NSMIsZero 					; zero mantissa ?
.94ce	f0 04		beq $94d4			beq 	_NotZero
.94d0	20 55 97	jsr $9755			jsr 	NSMSetZero
.94d3	60		rts				rts
.94d4					_NotZero:
.94d4	4c 6f 8c	jmp $8c6f			jmp 	ReturnTrue
.94d7					_UNBad:
.94d7	4c 67 a4	jmp $a467			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.94da					Unary_Rnd:
.94da	20 a9 96	jsr $96a9			jsr 	EvaluateNumber 				; number to use.
.94dd	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 			; closing bracket
.94e0	20 09 95	jsr $9509			jsr 	Random32Bit 				; generate a number.
.94e3	ad 08 07	lda $0708			lda 	RandomSeed+0
.94e6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94e9	ad 09 07	lda $0709			lda 	RandomSeed+1
.94ec	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94ef	ad 0a 07	lda $070a			lda 	RandomSeed+2
.94f2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94f5	ad 0b 07	lda $070b			lda 	RandomSeed+3
.94f8	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.94fa	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94fd	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.94ff	8d 28 06	sta $0628			sta 	NSExponent
.9502	a9 08		lda #$08			lda 	#NSTFloat
.9504	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>9507	db						.byte 	$DB 						; causes a break in the emulator
.9508	60		rts				rts
.9509					Random32Bit:
.9509	5a		phy				phy
.950a	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.950c	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.950f	d0 03		bne $9514			bne 	_Random1
.9511	a8		tay				tay 								; if so do it 256 times
.9512	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9514					_Random1:
.9514	0a		asl a				asl 	a 							; LSFR RNG
.9515	2e 09 07	rol $0709			rol 	RandomSeed+1
.9518	2e 0a 07	rol $070a			rol 	RandomSeed+2
.951b	2e 0b 07	rol $070b			rol 	RandomSeed+3
.951e	90 02		bcc $9522			bcc 	_Random2
.9520	49 c5		eor #$c5			eor 	#$C5
.9522					_Random2:
.9522	88		dey				dey
.9523	d0 ef		bne $9514			bne 	_Random1
.9525	7a		ply				ply
.9526	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a28d					SgnUnary:
.a28d	fa		plx				plx 								; restore stack pos
.a28e	20 a9 96	jsr $96a9			jsr 	EvaluateNumber 				; get a float or int
.a291	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.a294	20 85 97	jsr $9785			jsr 	NSMIsZero 					; if zero
.a297	f0 10		beq $a2a9			beq 	_SGZero  					; return Int Zero
.a299	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a29c	48		pha				pha
.a29d	a9 01		lda #$01			lda 	#1 							; set to 1
.a29f	20 57 97	jsr $9757			jsr 	NSMSetByte
.a2a2	68		pla				pla
.a2a3	29 80		and #$80			and		#$80 						; copy the sign byte out
.a2a5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2a8	60		rts				rts
.a2a9	20 55 97	jsr $9755	_SGZero:jsr 	NSMSetZero
.a2ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a2ad					ValUnary:
.a2ad	fa		plx				plx 								; restore stack pos
.a2ae	20 c3 a2	jsr $a2c3			jsr 	ValMainCode 				; do the main val() code
.a2b1	b0 01		bcs $a2b4			bcs 	_VUError 					; couldn't convert
.a2b3	60		rts				rts
.a2b4					_VUError:
.a2b4	4c 62 a4	jmp $a462			jmp 	TypeError
.a2b7					IsValUnary:
.a2b7	fa		plx				plx 								; restore stack pos
.a2b8	20 c3 a2	jsr $a2c3			jsr 	ValMainCode 				; do the main val() code
.a2bb	b0 03		bcs $a2c0			bcs 	_VUBad
.a2bd	4c 6f 8c	jmp $8c6f			jmp 	ReturnTrue
.a2c0					_VUBad:
.a2c0	4c 7b 8c	jmp $8c7b			jmp 	ReturnFalse
.a2c3					ValMainCode:
.a2c3	20 b4 96	jsr $96b4			jsr 	EvaluateString 				; get a string
.a2c6	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 			; check right bracket present
.a2c9	5a		phy				phy
.a2ca	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a2cc	f0 17		beq $a2e5			beq 	_VMCFail2
.a2ce	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a2d0	48		pha				pha 								; save first character
.a2d1	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a2d3	d0 01		bne $a2d6			bne 	_VMCStart
.a2d5	c8		iny				iny 								; skip over -
.a2d6					_VMCStart:
.a2d6	38		sec				sec 								; initialise first time round.
.a2d7					_VMCNext:
.a2d7	c8		iny				iny 								; pre-increment
.a2d8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a2da	f0 0c		beq $a2e8			beq 	_VMCSuccess 				; successful.
.a2dc	20 be 91	jsr $91be			jsr 	EncodeNumber 				; send it to the number-builder
.a2df	90 03		bcc $a2e4			bcc 	_VMCFail 					; if failed, give up.
.a2e1	18		clc				clc 								; next time round, countinue
.a2e2	80 f3		bra $a2d7			bra 	_VMCNext
.a2e4					_VMCFail:
.a2e4	68		pla				pla
.a2e5					_VMCFail2:
.a2e5	7a		ply				ply
.a2e6	38		sec				sec
.a2e7	60		rts				rts
.a2e8					_VMCSuccess:
.a2e8	a9 00		lda #$00			lda 	#0 							; construct final
.a2ea	20 be 91	jsr $91be			jsr 	EncodeNumber
.a2ed	68		pla				pla
.a2ee	c9 2d		cmp #$2d			cmp 	#"-"
.a2f0	d0 03		bne $a2f5			bne 	_VMCNotNegative
.a2f2	20 01 97	jsr $9701			jsr		NSMNegate
.a2f5					_VMCNotNegative:
.a2f5	7a		ply				ply
.a2f6	18		clc				clc
.a2f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9527					ChrUnary:
.9527	fa		plx				plx 								; restore stack pos
.9528	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger			; get value
.952b	48		pha				pha
.952c	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.952f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9531	20 52 a6	jsr $a652			jsr 	StringTempAllocate
.9534	68		pla				pla 								; write number to it
.9535	20 90 a6	jsr $a690			jsr 	StringTempWrite
.9538	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9539					SpcUnary:
.9539	fa		plx				plx 								; restore stack pos
.953a	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger			; get value
.953d	5a		phy				phy
.953e	48		pha				pha 								; save count
.953f	20 52 a6	jsr $a652			jsr 	StringTempAllocate
.9542	7a		ply				ply 								; to do count in Y
.9543					_SpcLoop:
.9543	c0 00		cpy #$00			cpy 	#0
.9545	f0 08		beq $954f			beq 	_SpcExit
.9547	a9 20		lda #$20			lda 	#32
.9549	20 90 a6	jsr $a690			jsr 	StringTempWrite
.954c	88		dey				dey
.954d	80 f4		bra $9543			bra 	_SPCLoop
.954f					_SpcExit:
.954f	7a		ply				ply
.9550	20 76 9e	jsr $9e76			jsr 	CheckRightBracket
.9553	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9554					Unary_Str:
.9554	fa		plx				plx
.9555	20 a9 96	jsr $96a9			jsr 	EvaluateNumber  			; get number
.9558	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 			; closing bracket
.955b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.955d	20 76 95	jsr $9576			jsr 	ConvertNumberToString 		; do the conversion.
.9560	a9 21		lda #$21			lda		#33 						; create buffer
.9562	20 52 a6	jsr $a652			jsr 	StringTempAllocate 			; allocate memory
.9565	da		phx				phx
.9566	a2 00		ldx #$00			ldx 	#0
.9568					_USCopy:
.9568	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.956b	20 90 a6	jsr $a690			jsr 	StringTempWrite
.956e	e8		inx				inx
.956f	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.9572	d0 f4		bne $9568			bne 	_USCopy
.9574	fa		plx				plx
.9575	60		rts				rts
.9576					ConvertNumberToString:
.9576	5a		phy				phy 								; save code position
.9577	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.957a	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.957d	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.9580	10 0a		bpl $958c			bpl 	_CNTSNotNegative
.9582	29 7f		and #$7f			and 	#$7F 						; make +ve
.9584	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9587	a9 2d		lda #$2d			lda 	#"-"
.9589	20 f2 95	jsr $95f2			jsr 	WriteDecimalBuffer
.958c					_CNTSNotNegative:
.958c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.958f	f0 15		beq $95a6			beq 	_CNTSNotFloat
.9591	e8		inx				inx 								; round up
.9592	a9 01		lda #$01			lda 	#1
.9594	20 57 97	jsr $9757			jsr 	NSMSetByte
.9597	ca		dex				dex
.9598	bd 28 06	lda $0628,x			lda		NSExponent,x
.959b	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.959e	a9 08		lda #$08			lda 	#NSTFloat
.95a0	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.95a3	20 3d a0	jsr $a03d			jsr 	FloatAdd
.95a6					_CNTSNotFloat:
.95a6	20 d4 95	jsr $95d4			jsr 	MakePlusTwoString
.95a9	20 1b a1	jsr $a11b			jsr 	FloatFractionalPart 		; get the fractional part
.95ac	20 df a1	jsr $a1df			jsr 	NSNormalise					; normalise , exit if zero
.95af	f0 21		beq $95d2			beq 	_CNTSExit
.95b1	a9 2e		lda #$2e			lda 	#"."
.95b3	20 f2 95	jsr $95f2			jsr 	WriteDecimalBuffer 			; write decimal place
.95b6					_CNTSDecimal:
.95b6	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.95b9	30 17		bmi $95d2			bmi 	_CNTSExit
.95bb	e8		inx				inx 								; x 10.0
.95bc	a9 0a		lda #$0a			lda 	#10
.95be	20 57 97	jsr $9757			jsr 	NSMSetByte
.95c1	a9 08		lda #$08			lda 	#NSTFloat
.95c3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95c6	ca		dex				dex
.95c7	20 a8 a1	jsr $a1a8			jsr 	FloatMultiply
.95ca	20 d4 95	jsr $95d4			jsr 	MakePlusTwoString
.95cd	20 1b a1	jsr $a11b			jsr 	FloatFractionalPart 		; get the fractional part
.95d0	80 e4		bra $95b6			bra 	_CNTSDecimal 				; keep going.
.95d2					_CNTSExit:
.95d2	7a		ply				ply
.95d3	60		rts				rts
.95d4					MakePlusTwoString:
.95d4	da		phx				phx
.95d5	20 2c 97	jsr $972c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.95d8	e8		inx				inx 								; access it
.95d9	e8		inx				inx
.95da	20 7e a1	jsr $a17e			jsr 	FloatIntegerPart 			; make it an integer
.95dd	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.95df	20 e7 9f	jsr $9fe7			jsr 	ConvertInt32
.95e2	a2 00		ldx #$00			ldx	 	#0
.95e4					_MPTSCopy:
.95e4	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.95e7	20 f2 95	jsr $95f2			jsr 	WriteDecimalBuffer
.95ea	e8		inx				inx
.95eb	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.95ee	d0 f4		bne $95e4			bne 	_MPTSCopy
.95f0	fa		plx				plx
.95f1	60		rts				rts
.95f2					WriteDecimalBuffer:
.95f2	da		phx				phx
.95f3	ae 15 07	ldx $0715			ldx 	dbOffset
.95f6	9d 98 08	sta $0898,x			sta 	DecimalBuffer,x
.95f9	9e 99 08	stz $0899,x			stz 	DecimalBuffer+1,x
.95fc	ee 15 07	inc $0715			inc 	dbOffset
.95ff	fa		plx				plx
.9600	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9601					Unary_Left:
.9601	fa		plx				plx
.9602	18		clc				clc 								; only one parameter
.9603	20 78 96	jsr $9678			jsr 	SubstringInitial 			; set up.
.9606	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9609	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.960c	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.960f	80 2c		bra $963d			bra 	SubstringMain
.9611					Unary_Right:
.9611	fa		plx				plx
.9612	18		clc				clc 								; only one parameter
.9613	20 78 96	jsr $9678			jsr 	SubstringInitial 			; set up.
.9616	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9619	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.961c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.961f	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.9622	b0 02		bcs $9626			bcs 	_URNotUnderflow
.9624	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9626					_URNotUnderFlow:
.9626	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9629	80 12		bra $963d			bra 	SubStringMain
.962b					Unary_Mid:
.962b	fa		plx				plx
.962c	38		sec				sec 								; two parameters
.962d	20 78 96	jsr $9678			jsr 	SubstringInitial 			; set up.
.9630	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9633	f0 05		beq $963a			beq 	_UMError
.9635	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9638	80 03		bra $963d			bra 	SubStringMain
.963a					_UMError:
.963a	4c 67 a4	jmp $a467			jmp 	ArgumentError
.963d					SubStringMain:
.963d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9640	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9643	b0 2d		bcs $9672			bcs 	_SSMNull 					; if so, return an empty string.
.9645	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9648	f0 28		beq $9672			beq 	_SSMNull 					; return empty string.
.964a	18		clc				clc 								; add the offset +1 to the address and
.964b	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.964e	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9651	85 36		sta $36				sta 	zTemp0
.9653	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9656	69 00		adc #$00			adc 	#0
.9658	85 37		sta $37				sta 	zTemp0+1
.965a					_SSMNoCarry:
.965a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.965d	20 52 a6	jsr $a652			jsr 	StringTempAllocate 			; allocate that many characters
.9660	5a		phy				phy 								; save Y
.9661	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9663					_SSMCopy:
.9663	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9665	f0 09		beq $9670			beq 	_SSMEString 				; no more to copy
.9667	20 90 a6	jsr $a690			jsr 	StringTempWrite 			; and write it out.
.966a	c8		iny				iny
.966b	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.966e	d0 f3		bne $9663			bne 	_SSMCopy
.9670					_SSMEString:
.9670	7a		ply				ply
.9671					_SSMExit:
.9671	60		rts				rts
.9672					_SSMNull:
.9672	a9 00		lda #$00			lda 	#0
.9674	20 52 a6	jsr $a652			jsr 	StringTempAllocate
.9677	60		rts				rts
.9678					SubstringInitial:
.9678	da		phx				phx 								; save initial stack position
.9679	08		php				php 								; save carry on stack indicating 2 parameters
.967a	20 b4 96	jsr $96b4			jsr 	EvaluateString 				; get a string
.967d	5a		phy				phy 								; calculate length to exponent.
.967e	a0 ff		ldy #$ff			ldy 	#$FF
.9680					_SIFindLength:
.9680	c8		iny				iny
.9681	b1 36		lda ($36),y			lda 	(zTemp0),y
.9683	d0 fb		bne $9680			bne 	_SIFindLength
.9685	98		tya				tya
.9686	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9689	7a		ply				ply
.968a	e8		inx				inx
.968b	20 7e 9e	jsr $9e7e			jsr 	CheckComma 					; comma next
.968e	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger 		; get next parameter
.9691	28		plp				plp 								; is it the last parameter ?
.9692	90 07		bcc $969b			bcc 	_SSIExit 					; if so, exit.
.9694	e8		inx				inx
.9695	20 7e 9e	jsr $9e7e			jsr 	CheckComma 					; comma next
.9698	20 ed 96	jsr $96ed			jsr 	Evaluate8BitInteger 		; get last parameter
.969b					_SSIExit:
.969b	fa		plx				plx
.969c	20 76 9e	jsr $9e76			jsr 	CheckRightBracket 			; check closing bracket
.969f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.96a0					EvaluateValue:
.96a0	48		pha				pha
.96a1	20 0b 90	jsr $900b			jsr		EvaluateExpression 			; expression
.96a4	20 20 91	jsr $9120			jsr 	Dereference					; derefernce it
.96a7	68		pla				pla
.96a8	60		rts				rts
.96a9					EvaluateNumber:
.96a9	20 a0 96	jsr $96a0			jsr 	EvaluateValue 				; get a value
.96ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.96af	29 10		and #$10			and 	#NSBIsString
.96b1	d0 16		bne $96c9			bne 	HelperTypeError
.96b3	60		rts				rts
.96b4					EvaluateString:
.96b4	20 a0 96	jsr $96a0			jsr 	EvaluateValue 				; get a value
.96b7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.96ba	29 10		and #$10			and 	#NSBIsString
.96bc	f0 0b		beq $96c9			beq 	HelperTypeError
.96be					CopyAddressToTemp0:
.96be	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.96c1	85 36		sta $36				sta 	zTemp0
.96c3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.96c6	85 37		sta $37				sta 	zTemp0+1
.96c8	60		rts				rts
.96c9					HelperTypeError:
.96c9	4c 62 a4	jmp $a462			jmp 	TypeError
.96cc					EvaluateInteger:
.96cc	20 a9 96	jsr $96a9			jsr 	EvaluateNumber
.96cf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.96d2	d0 0a		bne $96de			bne 	HelperValueError 			; if not, it's a float.
.96d4	60		rts				rts
.96d5					EvaluateUnsignedInteger:
.96d5	20 cc 96	jsr $96cc			jsr 	EvaluateInteger 			; check integer is +ve
.96d8	bd 00 06	lda $0600,x			lda 	NSStatus,x
.96db	30 01		bmi $96de			bmi 	HelperValueError
.96dd	60		rts				rts
.96de					HelperValueError:
.96de	4c 67 a4	jmp $a467			jmp 	ArgumentError
.96e1					Evaluate16BitInteger:
.96e1	20 d5 96	jsr $96d5			jsr	 	EvaluateUnsignedInteger		; get integer
.96e4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.96e7	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96ea	d0 f2		bne $96de			bne 	HelperValueError
.96ec	60		rts				rts
.96ed					Evaluate8BitInteger:
.96ed	20 d5 96	jsr $96d5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.96f0	d0 ec		bne $96de			bne 	HelperValueError
.96f2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.96f5	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.96f8	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.96fb	d0 e1		bne $96de			bne 	HelperValueError
.96fd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9700	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2f8					Multiply8x8:
.a2f8	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2f9	85 36		sta $36			  	sta 	zTemp0
.a2fb	86 37		stx $37				stx 	zTemp0+1
.a2fd	a9 00		lda #$00			lda 	#0
.a2ff	a2 08		ldx #$08			ldx 	#8
.a301					_M88Loop:
.a301	90 03		bcc $a306			bcc 	_M88NoAdd
.a303	18		clc				clc
.a304	65 37		adc $37				adc 	zTemp0+1
.a306					_M88NoAdd:
.a306	6a		ror a				ror 	a
.a307	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a309	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a30a	d0 f5		bne $a301			bne 	_M88Loop
.a30c	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a30e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9701					NSMNegate:
.9701	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9704	49 80		eor #$80			eor 	#NSBIsNegative
.9706	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9709	60		rts				rts
.970a					NSMNegateMantissa:
.970a	38		sec				sec
.970b	a9 00		lda #$00			lda 	#0
.970d	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9710	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9713	a9 00		lda #$00			lda 	#0
.9715	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9718	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.971b	a9 00		lda #$00			lda 	#0
.971d	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9720	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9723	a9 00		lda #$00			lda 	#0
.9725	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9728	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.972b	60		rts				rts
.972c					NSMShiftUpTwo:
.972c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.972f	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9732	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9735	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9738	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.973b	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.973e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9741	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9744	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9747	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.974a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.974d	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9750	60		rts				rts
.9751					NSMSetZeroMantissaOnly:
.9751	a9 00		lda #$00			lda 	#0
.9753	80 08		bra $975d			bra 	NSMSetMantissa
.9755					NSMSetZero:
.9755	a9 00		lda #$00			lda 	#0
.9757					NSMSetByte:
.9757	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.975a	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.975d					NSMSetMantissa:
.975d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.9760	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9763	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9766	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9769	60		rts				rts
.976a					NSMShiftLeft:
.976a	18		clc				clc
.976b					NSMRotateLeft:
.976b	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.976e	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9771	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9774	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9777	60		rts				rts
.9778					NSMShiftRight:
.9778	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.977b	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.977e	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9781	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9784	60		rts				rts
.9785					NSMIsZero:
.9785	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9788	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.978b	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.978e	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9791	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a30f					Assemble_ora:
.a30f	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a312	01					.byte $01
.a313					Assemble_and:
.a313	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a316	21					.byte $21
.a317					Assemble_eor:
.a317	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a31a	41					.byte $41
.a31b					Assemble_adc:
.a31b	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a31e	61					.byte $61
.a31f					Assemble_sta:
.a31f	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a322	81					.byte $81
.a323					Assemble_lda:
.a323	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a326	a1					.byte $a1
.a327					Assemble_cmp:
.a327	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a32a	c1					.byte $c1
.a32b					Assemble_sbc:
.a32b	20 b2 81	jsr $81b2		jsr	AssembleGroup1
>a32e	e1					.byte $e1
.a32f					Assemble_asl:
.a32f	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a332	02					.byte $02
>a333	75					.byte $75
.a334					Assemble_rol:
.a334	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a337	22					.byte $22
>a338	75					.byte $75
.a339					Assemble_lsr:
.a339	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a33c	42					.byte $42
>a33d	75					.byte $75
.a33e					Assemble_ror:
.a33e	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a341	62					.byte $62
>a342	75					.byte $75
.a343					Assemble_stx:
.a343	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a346	82					.byte $82
>a347	50					.byte $50
.a348					Assemble_ldx:
.a348	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a34b	a2					.byte $a2
>a34c	d0					.byte $d0
.a34d					Assemble_dec:
.a34d	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a350	c2					.byte $c2
>a351	55					.byte $55
.a352					Assemble_inc:
.a352	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a355	e2					.byte $e2
>a356	55					.byte $55
.a357					Assemble_stz:
.a357	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a35a	60					.byte $60
>a35b	44					.byte $44
.a35c					Assemble_bit:
.a35c	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a35f	20					.byte $20
>a360	55					.byte $55
.a361					Assemble_sty:
.a361	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a364	80					.byte $80
>a365	54					.byte $54
.a366					Assemble_ldy:
.a366	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a369	a0					.byte $a0
>a36a	d5					.byte $d5
.a36b					Assemble_cpy:
.a36b	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a36e	c0					.byte $c0
>a36f	d4					.byte $d4
.a370					Assemble_cpx:
.a370	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a373	e0					.byte $e0
>a374	d0					.byte $d0
.a375					Assemble_tsb:
.a375	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a378	00					.byte $00
>a379	50					.byte $50
.a37a					Assemble_trb:
.a37a	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a37d	10					.byte $10
>a37e	50					.byte $50
.a37f					Assemble_jsr:
.a37f	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a382	14					.byte $14
>a383	10					.byte $10
.a384					Assemble_jmp:
.a384	20 b9 81	jsr $81b9		jsr	AssembleGroup2
>a387	40					.byte $40
>a388	10					.byte $10
.a389					Assemble_bpl:
.a389	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a38c	10					.byte $10
.a38d					Assemble_bmi:
.a38d	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a390	30					.byte $30
.a391					Assemble_bvc:
.a391	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a394	50					.byte $50
.a395					Assemble_bvs:
.a395	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a398	70					.byte $70
.a399					Assemble_bcc:
.a399	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a39c	90					.byte $90
.a39d					Assemble_bcs:
.a39d	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a3a0	b0					.byte $b0
.a3a1					Assemble_bne:
.a3a1	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a3a4	d0					.byte $d0
.a3a5					Assemble_beq:
.a3a5	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a3a8	f0					.byte $f0
.a3a9					Assemble_bra:
.a3a9	20 0a 82	jsr $820a		jsr	AssembleGroup3
>a3ac	80					.byte $80
.a3ad					Assemble_brk:
.a3ad	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3b0	00					.byte $00
.a3b1					Assemble_php:
.a3b1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3b4	08					.byte $08
.a3b5					Assemble_clc:
.a3b5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3b8	18					.byte $18
.a3b9					Assemble_plp:
.a3b9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3bc	28					.byte $28
.a3bd					Assemble_sec:
.a3bd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3c0	38					.byte $38
.a3c1					Assemble_rti:
.a3c1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3c4	40					.byte $40
.a3c5					Assemble_pha:
.a3c5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3c8	48					.byte $48
.a3c9					Assemble_cli:
.a3c9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3cc	58					.byte $58
.a3cd					Assemble_phy:
.a3cd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3d0	5a					.byte $5a
.a3d1					Assemble_rts:
.a3d1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3d4	60					.byte $60
.a3d5					Assemble_pla:
.a3d5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3d8	68					.byte $68
.a3d9					Assemble_sei:
.a3d9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3dc	78					.byte $78
.a3dd					Assemble_ply:
.a3dd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3e0	7a					.byte $7a
.a3e1					Assemble_dey:
.a3e1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3e4	88					.byte $88
.a3e5					Assemble_txa:
.a3e5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3e8	8a					.byte $8a
.a3e9					Assemble_tya:
.a3e9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3ec	98					.byte $98
.a3ed					Assemble_txs:
.a3ed	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3f0	9a					.byte $9a
.a3f1					Assemble_tay:
.a3f1	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3f4	a8					.byte $a8
.a3f5					Assemble_tax:
.a3f5	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3f8	aa					.byte $aa
.a3f9					Assemble_clv:
.a3f9	20 40 82	jsr $8240		jsr	AssembleGroup4
>a3fc	b8					.byte $b8
.a3fd					Assemble_tsx:
.a3fd	20 40 82	jsr $8240		jsr	AssembleGroup4
>a400	ba					.byte $ba
.a401					Assemble_iny:
.a401	20 40 82	jsr $8240		jsr	AssembleGroup4
>a404	c8					.byte $c8
.a405					Assemble_dex:
.a405	20 40 82	jsr $8240		jsr	AssembleGroup4
>a408	ca					.byte $ca
.a409					Assemble_cld:
.a409	20 40 82	jsr $8240		jsr	AssembleGroup4
>a40c	d8					.byte $d8
.a40d					Assemble_phx:
.a40d	20 40 82	jsr $8240		jsr	AssembleGroup4
>a410	da					.byte $da
.a411					Assemble_inx:
.a411	20 40 82	jsr $8240		jsr	AssembleGroup4
>a414	e8					.byte $e8
.a415					Assemble_nop:
.a415	20 40 82	jsr $8240		jsr	AssembleGroup4
>a418	ea					.byte $ea
.a419					Assemble_sed:
.a419	20 40 82	jsr $8240		jsr	AssembleGroup4
>a41c	f8					.byte $f8
.a41d					Assemble_plx:
.a41d	20 40 82	jsr $8240		jsr	AssembleGroup4
>a420	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a421					DecimalScalarTable:
>a421	66 66 66 66				.dword $66666666 ; 0.1
>a425	de					.byte $de
>a426	1f 85 eb 51				.dword $51eb851f ; 0.01
>a42a	db					.byte $db
>a42b	4c 37 89 41				.dword $4189374c ; 0.001
>a42f	d8					.byte $d8
>a430	ac 8b db 68				.dword $68db8bac ; 0.0001
>a434	d4					.byte $d4
>a435	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a439	d1					.byte $d1
>a43a	83 de 1b 43				.dword $431bde83 ; 1e-06
>a43e	ce					.byte $ce
>a43f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a443	ca					.byte $ca
>a444	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a448	c7					.byte $c7
>a449	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a44d	c4					.byte $c4
>a44e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a452	c0					.byte $c0
>a453	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a457	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a458					SyntaxError:
.a458	a9 02		lda #$02		lda	#2
.a45a	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.a45d					RangeError:
.a45d	a9 04		lda #$04		lda	#4
.a45f	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.a462					TypeError:
.a462	a9 05		lda #$05		lda	#5
.a464	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.a467					ArgumentError:
.a467	a9 07		lda #$07		lda	#7
.a469	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.a46c					NotDoneError:
.a46c	a9 0c		lda #$0c		lda	#12
.a46e	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.a471					ErrorText:
>a471	42 72 65 61 6b 00			.text	"Break",0
>a477	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a47f	72 72 6f 72 00
>a484	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a48c	20 62 79 20 7a 65 72 6f 00
>a495	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a49d	61 6e 67 65 00
>a4a2	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4aa	6d 61 74 63 68 00
>a4b0	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4b8	65 6d 6f 72 79 00
>a4be	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4c6	61 72 67 75 6d 65 6e 74 00
>a4cf	53 74 6f 70 00				.text	"Stop",0
>a4d4	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4dc	6f 6f 20 6c 6f 6e 67 00
>a4e4	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a4ec	6e 20 66 61 69 6c 65 64 00
>a4f5	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a4fd	61 74 61 00
>a501	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a509	65 6e 74 65 64 00
>a50f	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a517	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a523	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a52b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a538	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a540	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a54d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a555	68 6f 75 74 20 57 68 69 6c 65 00
>a560	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a568	68 6f 75 74 20 46 6f 72 00
>a571	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a579	61 63 6b 20 66 75 6c 6c 00
>a582	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a58a	75 63 74 75 72 65 00
>a591	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a599	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5a6	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5ae	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5bc	41 72 72 61 79 20 73 69			.text	"Array size",0
>a5c4	7a 65 00
>a5c7	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5cf	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9792					StackOpen:
.9792	48		pha				pha 								; save frame byte
.9793	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9795	0a		asl a				asl 	a 							; claim twice this for storage
.9796	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9798	38		sec				sec 								; so basically subtracting from
.9799	65 34		adc $34				adc 	basicStack 	 				; basicStack
.979b	85 34		sta $34				sta 	basicStack
.979d	b0 08		bcs $97a7			bcs 	_SONoBorrow
.979f	c6 35		dec $35				dec 	basicStack+1
.97a1	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.97a3	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.97a5	90 04		bcc $97ab			bcc 	_SOMemory
.97a7					_SONoBorrow:
.97a7	68		pla				pla 								; get marker back and write at TOS
.97a8	92 34		sta ($34)			sta 	(basicStack)
.97aa	60		rts				rts
.97ab					_SOMemory:
.97ab							ERR_STACK
.97ab					StackClose:
.97ab	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.97ad	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.97af	0a		asl a				asl 	a 							; claim twice this.
.97b0	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.97b2	85 34		sta $34				sta 	basicStack
.97b4	90 02		bcc $97b8			bcc 	_SCExit
.97b6	e6 35		inc $35				inc 	basicStack+1
.97b8					_SCExit:
.97b8	60		rts				rts
.97b9					StackCheckFrame:
.97b9	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.97bb	29 f0		and #$f0			and 	#$F0 						; check type bits
.97bd	d0 01		bne $97c0			bne 	_SCFError 					; different, we have structures mixed up
.97bf	60		rts				rts
.97c0					_SCFError:
.97c0	8a		txa				txa 								; report error X
.97c1	4c 02 8c	jmp $8c02			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.97c4					STKSaveCodePosition:
.97c4	5a		phy				phy
.97c5	98		tya				tya 								; save Y
.97c6	a0 05		ldy #$05			ldy 	#5
.97c8	91 34		sta ($34),y			sta 	(basicStack),y
.97ca	88		dey				dey 								; save Code Pointer
.97cb					_STKSaveLoop:
.97cb	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.97ce	91 34		sta ($34),y			sta 	(basicStack),y
.97d0	88		dey				dey
.97d1	d0 f8		bne $97cb			bne 	_STKSaveLoop
.97d3	7a		ply				ply
.97d4	60		rts				rts
.97d5					STKLoadCodePosition:
.97d5	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.97d7					_STKLoadLoop:
.97d7	b1 34		lda ($34),y			lda 	(basicStack),y
.97d9	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.97dc	c8		iny				iny
.97dd	c0 05		cpy #$05			cpy 	#5
.97df	d0 f6		bne $97d7			bne 	_STKLoadLoop
.97e1	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.97e3	a8		tay				tay
.97e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.97e5					StackReset:
.97e5	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.97e7	85 34		sta $34				sta 	0+basicStack
.97e9	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.97eb	85 35		sta $35				sta 	1+basicStack
.97ed	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.97ef	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.97f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a5d7					StringConcrete:
.a5d7	5a		phy				phy 								; save position on stack
.a5d8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a5db	85 38		sta $38				sta 	zTemp1
.a5dd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a5e0	85 39		sta $39				sta 	zTemp1+1
.a5e2	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a5e4					_SALength:
.a5e4	c8		iny				iny
.a5e5	b1 38		lda ($38),y			lda 	(zTemp1),y
.a5e7	d0 fb		bne $a5e4			bne 	_SALength
.a5e9	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a5eb	b0 3f		bcs $a62c			bcs 	_SALengthError
.a5ed	98		tya				tya 				 				; length of the new string
.a5ee	18		clc				clc
.a5ef	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a5f1	90 02		bcc $a5f5			bcc 	_SAHaveLength
.a5f3	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a5f5					_SAHaveLength:
.a5f5	48		pha				pha 								; save length.
.a5f6	38		sec				sec
.a5f7	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a5f9	6d 0e 07	adc $070e			adc 	StringMemory
.a5fc	8d 0e 07	sta $070e			sta 	StringMemory
.a5ff	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a601	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a604	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a606	6d 0f 07	adc $070f			adc 	StringMemory+1
.a609	8d 0f 07	sta $070f			sta 	StringMemory+1
.a60c	85 3b		sta $3b				sta 	zTemp2+1
.a60e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a611	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a612	38		sec				sec
.a613	e9 03		sbc #$03			sbc 	#3
.a615	92 3a		sta ($3a)			sta 	(zTemp2)
.a617	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a619	a0 01		ldy #$01			ldy 	#1
.a61b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a61d					_SACopyNewString:
.a61d	a0 00		ldy #$00			ldy 	#0
.a61f					_SACopyNSLoop:
.a61f	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a621	c8		iny				iny 								; write two on in string storage
.a622	c8		iny				iny
.a623	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a625	88		dey				dey 								; this makes it one one.
.a626	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a628	d0 f5		bne $a61f			bne 	_SACopyNSLoop
.a62a	7a		ply				ply
.a62b	60		rts				rts
.a62c					_SALengthError:
.a62c	a9 09		lda #$09		lda	#9
.a62e	4c 02 8c	jmp $8c02		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a631					StringSystemInitialise:
.a631	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a633	8d 0e 07	sta $070e			sta 	0+StringMemory
.a636	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a638	8d 0f 07	sta $070f			sta 	1+StringMemory
.a63b	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a63e	60		rts				rts
.a63f					StringSpaceInitialise:
.a63f	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a641	8d 10 07	sta $0710			sta 	StringInitialised
.a644	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a647	8d 11 07	sta $0711			sta 	StringTempPointer
.a64a	ad 0f 07	lda $070f			lda 	StringMemory+1
.a64d	3a		dec a				dec 	a
.a64e	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a651	60		rts				rts
.a652					StringTempAllocate:
.a652	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a654	b0 35		bcs $a68b			bcs 	_STALength
.a656	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a659	30 05		bmi $a660			bmi 	_STAAllocate
.a65b	48		pha				pha 								; save value to subtract.
.a65c	20 3f a6	jsr $a63f			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a65f	68		pla				pla 								; restore it
.a660					_STAAllocate:
.a660	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a662	18		clc				clc  								; deliberate allows one more
.a663	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a666	8d 11 07	sta $0711			sta 	StringTempPointer
.a669	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a66c	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a66e	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a671	69 ff		adc #$ff			adc 	#$FF
.a673	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a676	85 3d		sta $3d				sta 	zsTemp+1
.a678	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a67b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a67e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a681	a9 10		lda #$10			lda 	#NSTString
.a683	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a686	a9 00		lda #$00			lda 	#0 							; clear the target string
.a688	92 3c		sta ($3c)			sta 	(zsTemp)
.a68a	60		rts				rts
.a68b					_STALength:
.a68b	a9 09		lda #$09		lda	#9
.a68d	4c 02 8c	jmp $8c02		jmp	ErrorHandler
.a690					StringTempWrite:
.a690	48		pha				pha
.a691	92 3c		sta ($3c)			sta 	(zsTemp)
.a693	e6 3c		inc $3c				inc 	zsTemp
.a695	d0 02		bne $a699			bne 	_STWNoCarry
.a697	e6 3d		inc $3d				inc 	zsTemp+1
.a699					_STWNoCarry:
.a699	a9 00		lda #$00			lda 	#0
.a69b	92 3c		sta ($3c)			sta 	(zsTemp)
.a69d	68		pla				pla
.a69e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.97f2					BackloadProgram:
.97f2	a2 ff		ldx #$ff			ldx 	#$FF
.97f4	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.97f7	20 21 98	jsr $9821			jsr 	BLReadByte
.97fa	30 1e		bmi $981a			bmi 	_BPExit
.97fc					_BPCopy:
.97fc	e8		inx				inx  								; copy byte in
.97fd	9d 25 08	sta $0825,x			sta 	lineBuffer,x
.9800	9e 26 08	stz $0826,x			stz 	lineBuffer+1,x
.9803	20 21 98	jsr $9821			jsr 	BLReadByte 					; read next byte
.9806	30 0a		bmi $9812			bmi 	_BPEndLine 					; -ve = EOL
.9808	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.980a	d0 02		bne $980e			bne 	_BPNotTab
.980c	a9 20		lda #$20			lda 	#' '
.980e					_BPNotTab:
.980e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9810	b0 ea		bcs $97fc			bcs 	_BPCopy
.9812					_BPEndLine:
.9812	20 35 9b	jsr $9b35			jsr 	TokeniseLine 				; tokenise the line.
.9815	20 c1 9d	jsr $9dc1			jsr 	MemoryAppend 				; append to current program
.9818	80 d8		bra $97f2			bra 	BackloadProgram
.981a					_BPExit:
.981a	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.981d	20 8b 84	jsr $848b			jsr 	ClearCommand 				; clear variables etc.
.9820	60		rts				rts
.9821					BLReadByte:
.9821					_BLLoad:
.9821	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9824	ee 22 98	inc $9822			inc 	_BLLoad+1
.9827	d0 03		bne $982c			bne 	_BLNoCarry
.9829	ee 23 98	inc $9823			inc 	_BLLoad+2
.982c					_BLNoCarry:
.982c	c9 00		cmp #$00			cmp 	#0
.982e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.982f					TokeniseSearchTable:
.982f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9831	85 36		sta $36				sta 	zTemp0
.9833	a0 00		ldy #$00			ldy 	#0
.9835	a9 80		lda #$80			lda 	#$80 						; token #
.9837	85 38		sta $38				sta 	zTemp1
.9839					_TSTLoop:
.9839	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.983b	30 49		bmi $9886			bmi 	_TSTFail 					; -ve = end of table
.983d	f0 2e		beq $986d			beq 	_TSTNext 					; zero, check next it's a dummy
.983f	c8		iny				iny 								; get the hash
.9840	b1 36		lda ($36),y			lda 	(zTemp0),y
.9842	88		dey				dey
.9843	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9846	d0 25		bne $986d			bne 	_TSTNext
.9848	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.984b	38		sec				sec
.984c	ed 00 07	sbc $0700			sbc 	identStart
.984f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9851	d0 1a		bne $986d			bne 	_TSTNext
.9853	5a		phy				phy 								; save Y , we might fail
.9854	c8		iny				iny 								; point to text
.9855	c8		iny				iny
.9856	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9859					_TSTCompareName:
.9859	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; compare text.
.985c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.985e	d0 0c		bne $986c			bne 	_TSTNextPullY 				; fail, pullY and do next
.9860	e8		inx				inx
.9861	c8		iny				iny
.9862	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9865	d0 f2		bne $9859			bne 	_TSTCompareName
.9867	7a		ply				ply 								; throw Y
.9868	a5 38		lda $38				lda 	zTemp1 						; get token #
.986a	38		sec				sec 								; return with CS = passed.
.986b	60		rts				rts
.986c					_TSTNextPullY:
.986c	7a		ply				ply 								; restore current, fall through.
.986d					_TSTNext:
.986d	e6 38		inc $38				inc 	zTemp1 						; token counter
.986f	98		tya				tya
.9870	18		clc				clc
.9871	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9873	1a		inc a				inc 	a 							; +1
.9874	1a		inc a				inc 	a 							; +2
.9875	a8		tay				tay
.9876	10 c1		bpl $9839			bpl 	_TSTLoop 					; if Y < $80 loop back
.9878	98		tya				tya 								; add Y to zTemp0 and reset Y
.9879	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.987b	18		clc				clc  								; but have tables > 255 bytes
.987c	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.987e	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9880	90 b7		bcc $9839			bcc 	_TSTLoop
.9882	e6 37		inc $37				inc 	zTemp0+1
.9884	80 b3		bra $9839			bra 	_TSTLoop
.9886					_TSTFail:
.9886	18		clc				clc
.9887	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9888					KeywordSet0:
>9888	00 65					.text	0,$65,""               ; $80 !0:EOF
>988a	00 58					.text	0,$58,""               ; $81 !1:SH1
>988c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>988e	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9894	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>989c	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>98a2	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>98a9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>98b0	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>98b7	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>98bd	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>98c5	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>98cd	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>98d3	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>98da	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>98e0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>98e8	28
>98e9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>98ef	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>98f5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>98fb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9902	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9908	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>990e	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9913	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9917	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>991d	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9925	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>992c	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9933	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>993b	43
>993c	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9942	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9948	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>994f	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9955	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>995b	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9960	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9966	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>996b	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9973	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9979	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9980	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9986	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>998b	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>9992	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9998	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>999d	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>99a5	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>99a9	ff					.text	$FF
.99aa					KeywordSet1:
>99aa	00 65					.text	0,$65,""               ; $80 !0:EOF
>99ac	00 58					.text	0,$58,""               ; $81 !1:SH1
>99ae	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99b0	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>99b8	4c 45
>99ba	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>99c2	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>99c9	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>99ce	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>99d4	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>99d9	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>99e1	45
>99e2	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>99e7	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>99ed	ff					.text	$FF
.99ee					KeywordSet2:
>99ee	00 65					.text	0,$65,""               ; $80 !0:EOF
>99f0	00 58					.text	0,$58,""               ; $81 !1:SH1
>99f2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99f4	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>99f9	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>99fe	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9a03	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9a08	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9a0d	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9a12	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9a17	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9a1c	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9a21	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9a26	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9a2b	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9a30	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9a35	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9a3a	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9a3f	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9a44	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9a49	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9a4e	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9a53	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9a58	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9a5d	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9a62	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9a67	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9a6c	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9a71	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9a76	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9a7b	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9a80	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9a85	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9a8a	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9a8f	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9a94	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9a99	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9a9e	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9aa3	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9aa8	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9aad	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9ab2	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9ab7	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9abc	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9ac1	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9ac6	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9acb	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9ad0	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9ad5	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9ada	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9adf	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9ae4	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9ae9	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9aee	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9af3	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9af8	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9afd	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9b02	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9b07	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9b0c	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9b11	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9b16	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9b1b	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9b20	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9b25	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9b2a	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9b2f	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9b34	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9b35					TokeniseLine:
.9b35	20 bd 9c	jsr $9cbd			jsr 	FixLineBufferCase 			; fix line case
.9b38	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9b3a	8d 25 07	sta $0725			sta 	tokenOffset
.9b3d	9c 26 07	stz $0726			stz 	tokenLineNumber
.9b40	9c 27 07	stz $0727			stz 	tokenLineNumber+1
.9b43	a2 ff		ldx #$ff			ldx 	#$FF
.9b45					_TKFindFirst:
.9b45	e8		inx				inx
.9b46	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9b49	f0 79		beq $9bc4			beq 	_TKExit
.9b4b	c9 20		cmp #$20			cmp 	#' '
.9b4d	90 f6		bcc $9b45			bcc 	_TKFindFirst
.9b4f	c9 30		cmp #$30			cmp 	#'0'
.9b51	90 07		bcc $9b5a			bcc 	_TKNoLineNumber
.9b53	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b55	b0 03		bcs $9b5a			bcs 	_TKNoLineNumber
.9b57	20 e7 9c	jsr $9ce7			jsr 	TokeniseExtractLineNumber
.9b5a					_TKNoLineNumber:
.9b5a					_TKTokeniseLoop:
.9b5a	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9b5d	f0 65		beq $9bc4			beq 	_TKExit
.9b5f	e8		inx				inx
.9b60	c9 20		cmp #$20			cmp 	#' '
.9b62	f0 f6		beq $9b5a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9b64	ca		dex				dex 								; undo last get, A contains character, X is position.
.9b65	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9b67	f0 61		beq $9bca			beq 	_TKTokeniseIdentifier
.9b69	c9 41		cmp #$41			cmp 	#'A'
.9b6b	90 04		bcc $9b71			bcc 	_TKTokenisePunctuation
.9b6d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9b6f	90 59		bcc $9bca			bcc 	_TKTokeniseIdentifier
.9b71					_TKTokenisePunctuation:
.9b71	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9b73	f0 27		beq $9b9c			beq 	_TKString
.9b75	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9b77	f0 28		beq $9ba1			beq 	_TKHexConstant
.9b79	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9b7b	f0 29		beq $9ba6			beq 	_TKCheckDouble
.9b7d	c9 3e		cmp #$3e			cmp 	#'>'
.9b7f	f0 25		beq $9ba6			beq 	_TKCheckDouble
.9b81					_TKStandardPunctuation:
.9b81	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get it back.
.9b84	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9b86	90 0e		bcc $9b96			bcc 	_TKNoShift
.9b88	48		pha				pha 								; save
.9b89	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9b8b	85 36		sta $36				sta 	zTemp0
.9b8d	68		pla				pla
.9b8e	29 20		and #$20			and 	#32 						; bit 5
.9b90	4a		lsr a				lsr 	a 							; shift into bit 3
.9b91	4a		lsr a				lsr 	a
.9b92	05 36		ora $36				ora 	zTemp0
.9b94	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9b96					_TKNoShift:
.9b96	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte 			; write the punctuation character
.9b99	e8		inx				inx 								; consume the character
.9b9a	80 be		bra $9b5a			bra 	_TKTokeniseLoop 			; and loop round again.
.9b9c					_TKString:
.9b9c	20 4c 9c	jsr $9c4c			jsr 	TokeniseString
.9b9f	80 b9		bra $9b5a			bra 	_TKTokeniseLoop
.9ba1					_TKHexConstant:
.9ba1	20 87 9c	jsr $9c87			jsr 	TokeniseHexConstant
.9ba4	80 b4		bra $9b5a			bra 	_TKTokeniseLoop
.9ba6					_TKCheckDouble:
.9ba6	bd 26 08	lda $0826,x			lda 	lineBuffer+1,x 				; get next character
.9ba9	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9bab	90 d4		bcc $9b81			bcc 	_TKStandardPunctuation
.9bad	c9 3f		cmp #$3f			cmp 	#'>'+1
.9baf	b0 d0		bcs $9b81			bcs 	_TKStandardPunctuation
.9bb1	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9bb4	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9bb6	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9bb7	7d 26 08	adc $0826,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9bba	38		sec				sec
.9bbb	e9 3c		sbc #$3c			sbc 	#'<'
.9bbd	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9bc0	e8		inx				inx 								; consume both
.9bc1	e8		inx				inx
.9bc2	80 96		bra $9b5a			bra 	_TKTokeniseLoop
.9bc4	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9bc6	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9bc9	60		rts				rts
.9bca					_TKTokeniseIdentifier:
.9bca	8e 00 07	stx $0700			stx 	identStart 					; save start
.9bcd	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9bd0					_TKCheckLoop:
.9bd0	e8		inx				inx 								; look at next, we know first is identifier.
.9bd1	bd 25 08	lda $0825,x			lda  	lineBuffer,x
.9bd4	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9bd6	f0 f8		beq $9bd0			beq 	_TKCheckLoop
.9bd8	c9 30		cmp #$30			cmp	 	#"0"
.9bda	90 0c		bcc $9be8			bcc 	_TKEndIdentifier
.9bdc	c9 3a		cmp #$3a			cmp 	#"9"+1
.9bde	90 f0		bcc $9bd0			bcc 	_TKCheckLoop
.9be0	c9 41		cmp #$41			cmp	 	#"A"
.9be2	90 04		bcc $9be8			bcc 	_TKEndIdentifier
.9be4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9be6	90 e8		bcc $9bd0			bcc 	_TKCheckLoop
.9be8					_TKEndIdentifier:
.9be8	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9beb	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9bed	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9bef	f0 06		beq $9bf7			beq 	_TKHasTypeCharacter
.9bf1	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9bf3	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9bf5	d0 07		bne $9bfe			bne 	_TKNoTypeCharacter
.9bf7					_TKHasTypeCharacter:
.9bf7	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9bfa	e8		inx				inx 								; read next
.9bfb	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9bfe					_TKNoTypeCharacter:
.9bfe	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9c00	d0 09		bne $9c0b			bne 	_TKNoArray
.9c02	e8		inx				inx 								; skip the (
.9c03	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9c06	09 04		ora #$04			ora 	#$04
.9c08	8d 04 07	sta $0704			sta 	identTypeByte
.9c0b					_TKNoArray:
.9c0b	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9c0e	20 a8 9c	jsr $9ca8			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9c11	a0 98		ldy #$98			ldy 	#(KeywordSet0) >> 8
.9c13	a9 88		lda #$88			lda 	#(KeywordSet0) & $FF
.9c15	20 2f 98	jsr $982f			jsr 	TokeniseSearchTable
.9c18	a2 00		ldx #$00			ldx 	#0
.9c1a	b0 1f		bcs $9c3b			bcs 	_TKFoundToken
.9c1c	a0 99		ldy #$99			ldy 	#(KeywordSet1) >> 8
.9c1e	a9 aa		lda #$aa			lda 	#(KeywordSet1) & $FF
.9c20	20 2f 98	jsr $982f			jsr 	TokeniseSearchTable
.9c23	a2 81		ldx #$81			ldx 	#$81
.9c25	b0 14		bcs $9c3b			bcs 	_TKFoundToken
.9c27	a0 99		ldy #$99			ldy 	#(KeywordSet2) >> 8
.9c29	a9 ee		lda #$ee			lda 	#(KeywordSet2) & $FF
.9c2b	20 2f 98	jsr $982f			jsr 	TokeniseSearchTable
.9c2e	a2 82		ldx #$82			ldx 	#$82
.9c30	b0 09		bcs $9c3b			bcs 	_TKFoundToken
.9c32	20 38 9d	jsr $9d38			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9c35	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9c38	4c 5a 9b	jmp $9b5a			jmp 	_TKTokeniseLoop 			; and go round again.
.9c3b					_TKFoundToken:
.9c3b	48		pha				pha 								; save token
.9c3c	8a		txa				txa 								; shift in X, is there one ?
.9c3d	f0 03		beq $9c42			beq 	_TKNoTShift
.9c3f	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte 			; if so, write it out
.9c42					_TKNoTShift:
.9c42	68		pla				pla 								; restore and write token
.9c43	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9c46	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9c49	4c 5a 9b	jmp $9b5a			jmp 	_TKTokeniseLoop 			; and go round again.
.9c4c					TokeniseString:
.9c4c	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9c4e	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9c51	e8		inx				inx									; start of quoted string.
.9c52	da		phx				phx 								; push start of string on top
.9c53	ca		dex				dex
.9c54					_TSFindEnd:
.9c54	e8		inx				inx
.9c55	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character
.9c58	f0 04		beq $9c5e			beq 	_TSEndOfString
.9c5a	c9 22		cmp #$22			cmp 	#'"'
.9c5c	d0 f6		bne $9c54			bne 	_TSFindEnd
.9c5e					_TSEndOfString:
.9c5e	7a		ply				ply  								; so now Y is first character, X is character after end.
.9c5f	48		pha				pha 								; save terminating character
.9c60	20 68 9c	jsr $9c68			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9c63	68		pla				pla 								; terminating character
.9c64	f0 01		beq $9c67			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9c66	e8		inx				inx
.9c67					_TSNotQuote:
.9c67	60		rts				rts
.9c68					TOWriteBlockXY:
.9c68	86 36		stx $36				stx 	zTemp0 						; write end character
.9c6a	98		tya				tya
.9c6b	49 ff		eor #$ff			eor 	#$FF
.9c6d	38		sec				sec
.9c6e	65 36		adc $36				adc 	zTemp0
.9c70	1a		inc a				inc 	a 							; one extra for NULL
.9c71	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9c74					_TOBlockLoop:
.9c74	c4 36		cpy $36				cpy 	zTemp0
.9c76	f0 09		beq $9c81			beq 	_TOBlockExit
.9c78	b9 25 08	lda $0825,y			lda 	lineBuffer,y
.9c7b	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9c7e	c8		iny				iny
.9c7f	80 f3		bra $9c74			bra 	_TOBlockLoop
.9c81					_TOBlockExit:
.9c81	a9 00		lda #$00			lda 	#0
.9c83	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9c86	60		rts				rts
.9c87					TokeniseHexConstant:
.9c87	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9c89	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9c8c	e8		inx				inx									; start of quoted string.
.9c8d	da		phx				phx 								; push start of constant on top
.9c8e	ca		dex				dex
.9c8f					_THFindLoop:
.9c8f	e8		inx				inx
.9c90	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9c93	c9 30		cmp #$30			cmp 	#"0"
.9c95	90 0c		bcc $9ca3			bcc 	_THFoundEnd
.9c97	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c99	90 f4		bcc $9c8f			bcc 	_THFindLoop
.9c9b	c9 41		cmp #$41			cmp 	#"A"
.9c9d	90 04		bcc $9ca3			bcc 	_THFoundEnd
.9c9f	c9 47		cmp #$47			cmp 	#"F"+1
.9ca1	90 ec		bcc $9c8f			bcc 	_THFindLoop
.9ca3					_THFoundEnd:
.9ca3	7a		ply				ply 								; restore start
.9ca4	20 68 9c	jsr $9c68			jsr 	TOWriteBlockXY 				; output the block
.9ca7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9ca8					TokeniseCalculateHash:
.9ca8	da		phx				phx
.9ca9	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9cac	a9 00		lda #$00			lda 	#0
.9cae					_TCHLoop:
.9cae	18		clc				clc
.9caf	7d 25 08	adc $0825,x			adc 	lineBuffer,x
.9cb2	e8		inx				inx
.9cb3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9cb6	d0 f6		bne $9cae			bne 	_TCHLoop
.9cb8	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9cbb	fa		plx				plx
.9cbc	60		rts				rts
.9cbd					FixLineBufferCase:
.9cbd	a2 00		ldx #$00			ldx 	#0
.9cbf					_FLBCLoop:
.9cbf	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next character
.9cc2	f0 22		beq $9ce6			beq 	_FLBCExit 					; end of string.
.9cc4	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9cc6	f0 11		beq $9cd9			beq 	_FLBCInQuotes
.9cc8	e8		inx				inx
.9cc9	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9ccb	90 f2		bcc $9cbf			bcc 	_FLBCLoop
.9ccd	c9 7b		cmp #$7b			cmp 	#'z'+1
.9ccf	b0 ee		bcs $9cbf			bcs 	_FLBCLoop
.9cd1	38		sec				sec 								; make U/C
.9cd2	e9 20		sbc #$20			sbc 	#32
.9cd4	9d 24 08	sta $0824,x			sta	 	lineBuffer-1,x 				; write back
.9cd7	80 e6		bra $9cbf			bra 	_FLBCLoop
.9cd9					_FLBCInQuotes:
.9cd9	e8		inx				inx 								; advance
.9cda	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next
.9cdd	f0 07		beq $9ce6			beq 	_FLBCExit 					; exit on EOS
.9cdf	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9ce1	d0 f6		bne $9cd9			bne 	_FLBCInQuotes
.9ce3	e8		inx				inx 								; skip over it
.9ce4	80 d9		bra $9cbf			bra 	_FLBCLoop
.9ce6					_FLBCExit:
.9ce6	60		rts				rts
.9ce7					TokeniseExtractLineNumber:
.9ce7	ad 27 07	lda $0727			lda 	tokenLineNumber+1 			; push current value on stack
.9cea	48		pha				pha
.9ceb	ad 26 07	lda $0726			lda 	tokenLineNumber
.9cee	48		pha				pha
.9cef	20 25 9d	jsr $9d25			jsr 	_TELNTimes2 				; line # x 4
.9cf2	20 25 9d	jsr $9d25			jsr 	_TELNTimes2 				; line # x 2
.9cf5	18		clc				clc 								; add stacked value
.9cf6	68		pla				pla
.9cf7	6d 26 07	adc $0726			adc 	tokenLineNumber
.9cfa	8d 26 07	sta $0726			sta 	tokenLineNumber
.9cfd	68		pla				pla
.9cfe	6d 27 07	adc $0727			adc 	tokenLineNumber+1
.9d01	8d 27 07	sta $0727			sta 	tokenLineNumber+1 			; line # x 5
.9d04	20 25 9d	jsr $9d25			jsr 	_TELNTimes2 				; line # x 10
.9d07	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get and consume character
.9d0a	e8		inx				inx
.9d0b	29 0f		and #$0f			and 	#15 						; add to line #
.9d0d	18		clc				clc
.9d0e	6d 26 07	adc $0726			adc 	tokenLineNumber
.9d11	8d 26 07	sta $0726			sta 	tokenLineNumber
.9d14	90 03		bcc $9d19			bcc 	_TLENNoCarry
.9d16	ee 27 07	inc $0727			inc 	tokenLineNumber+1
.9d19					_TLENNoCarry:
.9d19	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; more digits ?
.9d1c	c9 30		cmp #$30			cmp 	#'0'
.9d1e	90 04		bcc $9d24			bcc 	_TLENExit
.9d20	c9 3a		cmp #$3a			cmp 	#'9'+1
.9d22	90 c3		bcc $9ce7			bcc 	TokeniseExtractLineNumber
.9d24					_TLENExit:
.9d24	60		rts				rts
.9d25					_TELNTimes2:
.9d25	0e 26 07	asl $0726			asl 	tokenLineNumber
.9d28	2e 27 07	rol $0727			rol 	tokenLineNumber+1
.9d2b	60		rts				rts
.9d2c					TokeniseWriteByte:
.9d2c	da		phx				phx
.9d2d	ae 25 07	ldx $0725			ldx 	tokenOffset 				; next slot to write to
.9d30	9d 25 07	sta $0725,x			sta 	tokenOffset,x 				; write byte out
.9d33	ee 25 07	inc $0725			inc 	tokenOffset 				; advance slot.
.9d36	fa		plx				plx
.9d37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9d38					CheckCreateVariableRecord:
.9d38	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9d3a	85 36		sta $36				sta 	0+zTemp0
.9d3c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9d3e	85 37		sta $37				sta 	1+zTemp0
.9d40					_CCVSearch:
.9d40	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9d42	f0 2c		beq $9d70			beq 	_CCVFail
.9d44	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9d46	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9d48	cd 03 07	cmp $0703			cmp 	identHash
.9d4b	d0 16		bne $9d63			bne 	_CCVNext
.9d4d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9d4f	ae 00 07	ldx $0700			ldx 	identStart
.9d52					_CCVCompare:
.9d52	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9d55	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9d57	e8		inx				inx 								; advance pointers
.9d58	c8		iny				iny
.9d59	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9d5a	d0 07		bne $9d63			bne 	_CCVNext  					; didn't match go to next.
.9d5c	90 f4		bcc $9d52			bcc 	_CCVCompare 				; not finished yet.
.9d5e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9d61	f0 41		beq $9da4			beq 	_CCVFound 					; yes, we were successful
.9d63					_CCVNext:
.9d63	18		clc				clc
.9d64	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9d66	65 36		adc $36				adc 	zTemp0
.9d68	85 36		sta $36				sta 	zTemp0
.9d6a	90 d4		bcc $9d40			bcc 	_CCVSearch
.9d6c	e6 37		inc $37				inc 	zTemp0+1
.9d6e	80 d0		bra $9d40			bra 	_CCVSearch
.9d70					_CCVFail:
.9d70	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9d72	ad 03 07	lda $0703			lda 	identHash
.9d75	91 36		sta ($36),y			sta 	(zTemp0),y
.9d77	c8		iny				iny 								; offset 2 is the type byte
.9d78	ad 04 07	lda $0704			lda 	identTypeByte
.9d7b	91 36		sta ($36),y			sta 	(zTemp0),y
.9d7d	c8		iny				iny
.9d7e					_CCVData:
.9d7e	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9d80	91 36		sta ($36),y			sta 	(zTemp0),y
.9d82	c8		iny				iny
.9d83	c0 08		cpy #$08			cpy 	#8
.9d85	90 f7		bcc $9d7e			bcc 	_CCVData
.9d87	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9d8a					_CCVCopyName:
.9d8a	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9d8d	91 36		sta ($36),y			sta 	(zTemp0),y
.9d8f	e8		inx				inx
.9d90	c8		iny				iny
.9d91	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9d94	d0 f4		bne $9d8a			bne 	_CCVCopyName
.9d96	98		tya				tya 								; patch offset
.9d97	92 36		sta ($36)			sta 	(zTemp0)
.9d99	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9d9b	91 36		sta ($36),y			sta 	(zTemp0),y
.9d9d	88		dey				dey
.9d9e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9da0	09 80		ora #$80			ora 	#$80
.9da2	91 36		sta ($36),y			sta 	(zTemp0),y
.9da4					_CCVFound:
.9da4	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9da6	38		sec				sec
.9da7	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9da9	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9dab	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9dae	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9db0	20 2c 9d	jsr $9d2c			jsr 	TokeniseWriteByte
.9db3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a69f					MemoryPeek:
.a69f	b2 36		lda ($36)			lda 	(zTemp0)
.a6a1	60		rts				rts
.a6a2					MemoryPoke:
.a6a2	92 36		sta ($36)			sta 	(zTemp0)
.a6a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a6a5					EXTPrintCharacter:
.a6a5	48		pha				pha
.a6a6	da		phx				phx
.a6a7	5a		phy				phy
.a6a8	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a6ab	7a		ply				ply
.a6ac	fa		plx				plx
.a6ad	68		pla				pla
.a6ae	60		rts				rts
.a6af					EXTInputSingleCharacter:
.a6af	da		phx				phx
.a6b0	5a		phy				phy
.a6b1					_EISCWait:
.a6b1	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a6b4	c9 00		cmp #$00			cmp 	#0
.a6b6	f0 f9		beq $a6b1			beq 	_EISCWait
.a6b8	7a		ply				ply
.a6b9	fa		plx				plx
.a6ba	60		rts				rts
.a6bb					EXTInputLine:
.a6bb	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a6bd					_ILLoop:
.a6bd	da		phx				phx 								; read character in
.a6be	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a6c1	fa		plx				plx
.a6c2	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a6c4	f0 12		beq $a6d8			beq 	_ILBackspace
.a6c6	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a6c8	f0 15		beq $a6df			beq 	_ILExit
.a6ca	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a6cc	90 ef		bcc $a6bd			bcc 	_ILLoop
.a6ce	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a6d0	f0 eb		beq $a6bd			beq 	_ILLoop
.a6d2	9d 25 08	sta $0825,x			sta 	lineBuffer,x 				; save it
.a6d5	e8		inx				inx
.a6d6	80 e5		bra $a6bd			bra 	_ILLoop
.a6d8					_ILBackspace:
.a6d8	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a6da	f0 e1		beq $a6bd			beq 	_ILLoop
.a6dc	ca		dex				dex 								; back one.
.a6dd	80 de		bra $a6bd			bra 	_ILLoop
.a6df					_ILExit:
.a6df	20 a5 a6	jsr $a6a5			jsr 	EXTPrintCharacter
.a6e2	9e 25 08	stz $0825,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a6e5	60		rts				rts
.a6e6					EXTBreakCheck:
.a6e6	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a6e9					MemoryDeleteLine:
.a6e9	20 08 a7	jsr $a708			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a6ec	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a6ee	a8		tay				tay
.a6ef					_MDDLLoop:
.a6ef	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a6f1	92 30		sta ($30)			sta 	(codePtr)
.a6f3	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a6f5	c5 3a		cmp $3a				cmp 	zTemp2
.a6f7	d0 07		bne $a700			bne 	_MDLDLNext
.a6f9	a5 31		lda $31				lda 	codePtr+1
.a6fb	c5 3b		cmp $3b				cmp 	zTemp2+1
.a6fd	d0 01		bne $a700			bne 	_MDLDLNext
.a6ff					_MDDLExit:
.a6ff	60		rts				rts
.a700					_MDLDLNext:
.a700	e6 30		inc $30				inc 	codePtr						; next byte
.a702	d0 eb		bne $a6ef			bne 	_MDDLLoop
.a704	e6 31		inc $31				inc 	codePtr+1
.a706	80 e7		bra $a6ef			bra 	_MDDLLoop
.a708					IMemoryFindEnd:
.a708	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a70a	85 3a		sta $3a				sta 	0+zTemp2
.a70c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a70e	85 3b		sta $3b				sta 	1+zTemp2
.a710					_MDLFELoop:
.a710	b2 3a		lda ($3a)			lda 	(zTemp2)
.a712	f0 0b		beq $a71f			beq 	_MDLFEExit
.a714	18		clc				clc
.a715	65 3a		adc $3a				adc 	zTemp2
.a717	85 3a		sta $3a				sta 	zTemp2
.a719	90 f5		bcc $a710			bcc 	_MDLFELoop
.a71b	e6 3b		inc $3b				inc 	zTemp2+1
.a71d	80 f1		bra $a710			bra 	_MDLFELoop
.a71f					_MDLFEExit:
.a71f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a720					MemoryInsertLine:
.a720	20 08 a7	jsr $a708			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a723					_MDLIFound:
.a723	ad 25 07	lda $0725			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a726	a8		tay				tay
.a727					_MDLIInsert:
.a727	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a729	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a72b	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a72d	c5 3a		cmp $3a				cmp 	zTemp2
.a72f	d0 06		bne $a737			bne 	_MDLINext
.a731	a5 31		lda $31				lda 	codePtr+1
.a733	c5 3b		cmp $3b				cmp 	zTemp2+1
.a735	f0 0a		beq $a741			beq 	_MDLIHaveSpace
.a737					_MDLINext:
.a737	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a739	d0 02		bne $a73d			bne 	_MDLINoBorrow
.a73b	c6 3b		dec $3b				dec 	zTemp2+1
.a73d					_MDLINoBorrow:
.a73d	c6 3a		dec $3a				dec 	zTemp2
.a73f	80 e6		bra $a727			bra 	_MDLIInsert
.a741					_MDLIHaveSpace:
.a741	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.a744	88		dey				dey 								; from offset-1 to 0
.a745					_MDLICopy:
.a745	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.a748	91 30		sta ($30),y			sta 	(codePtr),y
.a74a	88		dey				dey
.a74b	10 f8		bpl $a745			bpl 	_MDLICopy
.a74d	60		rts				rts
.a74e					MDLAppendLine:
.a74e	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a750	85 36		sta $36				sta 	zTemp0
.a752	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a754	85 38		sta $38				sta 	0+zTemp1
.a756	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a758	85 39		sta $39				sta 	1+zTemp1
.a75a	b2 38		lda ($38)			lda 	(zTemp1)
.a75c	d0 0a		bne $a768			bne 	_MDLANoInitialise
.a75e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a760	8d a8 08	sta $08a8			sta 	0+AppendPointer
.a763	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a765	8d a9 08	sta $08a9			sta 	1+AppendPointer
.a768					_MDLANoInitialise:
.a768	18		clc				clc
.a769	ad a8 08	lda $08a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a76c	85 38		sta $38				sta 	zTemp1
.a76e	72 36		adc ($36)			adc 	(zTemp0)
.a770	8d a8 08	sta $08a8			sta 	AppendPointer
.a773	ad a9 08	lda $08a9			lda 	AppendPointer+1
.a776	85 39		sta $39				sta 	zTemp1+1
.a778	69 00		adc #$00			adc 	#0
.a77a	8d a9 08	sta $08a9			sta 	AppendPointer+1
.a77d	a0 00		ldy #$00			ldy 	#0
.a77f					_MDLACopy:
.a77f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a781	91 38		sta ($38),y			sta 	(zTemp1),y
.a783	c8		iny				iny
.a784	98		tya				tya
.a785	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a787	d0 f6		bne $a77f			bne 	_MDLACopy
.a789	a9 00		lda #$00			lda 	#0 							; end of program.
.a78b	91 38		sta ($38),y			sta 	(zTemp1),y
.a78d	60		rts				rts
.08a8					AppendPointer:
>08a8							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9db4					MemoryNew:
.9db4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9db6	85 30		sta $30				sta 	codePtr
.9db8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9dba	85 31		sta $31				sta 	codePtr+1
.9dbc	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9dbe	92 30		sta ($30)			sta 	(codePtr)
.9dc0	60		rts				rts
.9dc1					MemoryAppend:
.9dc1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9dc3	85 30		sta $30				sta 	codePtr
.9dc5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9dc7	85 31		sta $31				sta 	codePtr+1
.9dc9					_MAFindEnd:
.9dc9	b2 30		lda ($30)			lda 	(codePtr)
.9dcb	f0 0d		beq $9dda			beq 	_MAFoundEnd
.9dcd	18		clc				clc
.9dce	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9dd0	65 30		adc $30				adc 	codePtr
.9dd2	85 30		sta $30				sta 	codePtr
.9dd4	90 02		bcc $9dd8			bcc 	_CREExit
.9dd6	e6 31		inc $31				inc 	codePtr+1
.9dd8					_CREExit:
.9dd8	80 ef		bra $9dc9			bra 	_MAFindEnd
.9dda					_MAFoundEnd:
.9dda	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.9ddd	c0 04		cpy #$04			cpy 	#4 							; blank line
.9ddf	f0 0e		beq $9def			beq 	_MANoLine
.9de1	a9 00		lda #$00			lda 	#0 							; end of program
.9de3	91 30		sta ($30),y			sta 	(codePtr),y
.9de5					_MACopy:
.9de5	88		dey				dey
.9de6	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.9de9	91 30		sta ($30),y			sta 	(codePtr),y
.9deb	c0 00		cpy #$00			cpy 	#0
.9ded	d0 f6		bne $9de5			bne 	_MACopy
.9def					_MANoLine:
.9def	60		rts				rts
.9df0					MemoryInline:
.9df0	98		tya				tya 								; put address into stack,x
.9df1	18		clc				clc
.9df2	65 30		adc $30				adc 	codePtr
.9df4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9df7	a5 31		lda $31				lda 	codePtr+1
.9df9	69 00		adc #$00			adc 	#0
.9dfb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9dfe	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9e01	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9e04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9e05					MemorySearch:
.9e05	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9e07	86 37		stx $37				stx 	zTemp0+1
.9e09	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e0b	85 30		sta $30				sta 	codePtr
.9e0d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e0f	85 31		sta $31				sta 	codePtr+1
.9e11					_MTAXLoop:
.9e11	b2 30		lda ($30)			lda 	(codePtr)
.9e13	18		clc				clc
.9e14	f0 21		beq $9e37			beq 	_MTAXExit 					; reached end, exit with CC.
.9e16	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9e18	b1 30		lda ($30),y			lda 	(codePtr),y
.9e1a	38		sec				sec
.9e1b	e5 36		sbc $36				sbc 	zTemp0
.9e1d	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9e1f	c8		iny				iny 								; do the MSB
.9e20	b1 30		lda ($30),y			lda 	(codePtr),y
.9e22	e5 37		sbc $37				sbc 	zTemp0+1
.9e24	05 38		ora $38				ora 	zTemp1
.9e26	f0 0f		beq $9e37			beq 	_MTAXExit	 				; found
.9e28	b0 0d		bcs $9e37			bcs 	_MTAXExit 					; current < required exit
.9e2a	18		clc				clc
.9e2b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9e2d	65 30		adc $30				adc 	codePtr
.9e2f	85 30		sta $30				sta 	codePtr
.9e31	90 02		bcc $9e35			bcc 	_CREExit
.9e33	e6 31		inc $31				inc 	codePtr+1
.9e35					_CREExit:
.9e35	80 da		bra $9e11			bra 	_MTAXLoop
.9e37					_MTAXExit:
.9e37	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
