
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  9 08:15:11 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 d6 91	jsr $91d6			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 82 83	jsr $8382			jsr 	RunDemos
.8013	20 b8 8b	jsr $8bb8			jsr 	NewCommand 					; erase current program
.8016	20 5b 9e	jsr $9e5b			jsr 	BackloadProgram
.8019	4c 14 87	jmp $8714			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 779."
>8064	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 37 37 39 2e

;******  Return to file: ./common/aa.system/00start.asm

>8080	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxEORValue:
>063b							.fill 	1
.063c					gxANDValue:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1
.063f					gsOffset:
>063f							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8083					GXClearBitmap:
.8083	48		pha				pha
.8084	5a		phy				phy
.8085	20 dd 83	jsr $83dd			jsr 	GXOpenBitmap 				; start access
.8088	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.808a	ad 3a 06	lda $063a			lda 	gxHeight
.808d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.808f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8091					_GXCalcLastPage:
.8091	98		tya				tya 								; add to base page
.8092	18		clc				clc
.8093	6d 39 06	adc $0639			adc 	gxBasePage
.8096	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8098					_GXClearAll:
.8098	20 aa 80	jsr $80aa			jsr 	_GXClearBlock 				; clear 8k block
.809b	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.809d	a5 0b		lda $0b				lda 	GFXEditSlot
.809f	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a2	b0 f4		bcs $8098			bcs 	_GXClearAll
.80a4	20 ee 83	jsr $83ee			jsr 	GXCloseBitmap	 			; stop access
.80a7	7a		ply				ply
.80a8	68		pla				pla
.80a9	60		rts				rts
.80aa					_GXClearBlock:
.80aa	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80ac	85 38		sta $38				sta 	0+gzTemp1
.80ae	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.80b0	85 39		sta $39				sta 	1+gzTemp1
.80b2					_GXCB0:
.80b2	a5 36		lda $36				lda 	gzTemp0
.80b4	a0 00		ldy #$00			ldy 	#0
.80b6					_GXCB1:
.80b6	91 38		sta ($38),y			sta 	(gzTemp1),y
.80b8	c8		iny				iny
.80b9	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bb	c8		iny				iny
.80bc	91 38		sta ($38),y			sta 	(gzTemp1),y
.80be	c8		iny				iny
.80bf	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c1	c8		iny				iny
.80c2	d0 f2		bne $80b6			bne 	_GXCB1
.80c4	e6 39		inc $39				inc 	gzTemp1+1
.80c6	a5 39		lda $39				lda 	gzTemp1+1
.80c8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.80ca	d0 e6		bne $80b2			bne 	_GXCB0
.80cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/ellipse.asm

.80cd					GXFillEllipse:
.80cd	38		sec				sec
.80ce	80 01		bra $80d1			bra 	GXEllipse
.80d0					GXFrameEllipse:
.80d0	18		clc				clc
.80d1					GXEllipse:
.80d1	08		php				php 								; save Fill flag (CS)
.80d2	20 66 84	jsr $8466			jsr 	GXSortXY 					; topleft/bottomright
.80d5	20 dd 83	jsr $83dd			jsr 	GXOpenBitmap 				; start drawing
.80d8	20 f0 80	jsr $80f0			jsr 	GXEllipseSetup 				; set up for drawing
.80db					_GXEllipseDraw:
.80db	ad 41 06	lda $0641			lda 	gX 							; while x <= y
.80de	cd 42 06	cmp $0642			cmp 	gY
.80e1	f0 07		beq $80ea			beq 	_GXEllipseContinue
.80e3	90 05		bcc $80ea			bcc 	_GXEllipseContinue
.80e5	28		plp				plp 								; throw fill flag.
.80e6	20 ee 83	jsr $83ee			jsr 	GXCloseBitmap 				; close the bitmap
.80e9	60		rts				rts
.80ea					_GXEllipseContinue:
>80ea	db						.byte 	$DB 						; causes a break in the emulator
.80eb	20 f0 80	jsr $80f0			jsr 	GXEllipseMove 				; adjust the coordinates
.80ee	80 eb		bra $80db			bra 	_GXEllipseDraw
.80f0					GXEllipseMove:
.80f0					GXEllipseSetup:
.80f0	38		sec				sec
.80f1	ad 37 06	lda $0637			lda 	gxY1
.80f4	ed 33 06	sbc $0633			sbc 	gxY0
.80f7	4a		lsr a				lsr 	a
.80f8	8d 40 06	sta $0640			sta 	gRadius
.80fb	a2 00		ldx #$00			ldx 	#0
.80fd	20 1f 81	jsr $811f			jsr 	_GXCalculateCentre
.8100	a2 02		ldx #$02			ldx 	#2
.8102	20 1f 81	jsr $811f			jsr 	_GXCalculateCentre
.8105	9c 41 06	stz $0641			stz 	gX
.8108	ad 40 06	lda $0640			lda 	gRadius
.810b	8d 42 06	sta $0642			sta 	gY
.810e	0a		asl a				asl 	a 							; R x 2
.810f	85 36		sta $36				sta 	gzTemp0
.8111	38		sec				sec
.8112	a9 03		lda #$03			lda 	#3
.8114	e5 36		sbc $36				sbc 	gzTemp0
.8116	85 38		sta $38				sta 	gzTemp1
.8118	a9 00		lda #$00			lda 	#0
.811a	e9 00		sbc #$00			sbc 	#0
.811c	85 39		sta $39				sta 	gzTemp1+1
.811e	60		rts				rts
.811f					_GXCalculateCentre:
.811f	38		sec				sec
.8120	bd 35 06	lda $0635,x			lda 	gxX1,x
.8123	fd 31 06	sbc $0631,x			sbc 	gXX0,x
.8126	9d 35 06	sta $0635,x			sta 	gXX1,x
.8129	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.812c	fd 32 06	sbc $0632,x			sbc 	gXX0+1,x
.812f	4a		lsr a				lsr 	a
.8130	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.8133	7e 35 06	ror $0635,x			ror 	gXX1,x
.8136	60		rts				rts
.0640					gRadius:
>0640							.fill 	1
.0641					gX:
>0641							.fill 	1
.0642					gY:
>0642							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8137					GXLine:
.8137	20 dd 83	jsr $83dd			jsr 	GXOpenBitmap
.813a	20 84 84	jsr $8484			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.813d	20 02 82	jsr $8202			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8140	20 fb 83	jsr $83fb			jsr 	GXPositionCalc 				; calculate position/offset.
.8143					_GXDrawLoop:
.8143	ac 3f 06	ldy $063f			ldy 	gsOffset 					; draw the pixel
.8146	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.8148	2d 3c 06	and $063c			and 	gxANDValue
.814b	4d 3b 06	eor $063b			eor 	gxEORValue
.814e	91 3a		sta ($3a),y			sta 	(gsTemp),y
.8150	20 5e 81	jsr $815e			jsr 	GXLineIsComplete 			; is the line complete ?
.8153	f0 05		beq $815a			beq 	_GXLExit
.8155	20 79 81	jsr $8179			jsr 	GXLineAdvance 				; code as per advance method
.8158	80 e9		bra $8143			bra 	_GXDrawLoop
.815a					_GXLExit:
.815a	20 ee 83	jsr $83ee			jsr 	GXCloseBitmap
.815d	60		rts				rts
.815e					GXLineIsComplete:
.815e	ad 45 06	lda $0645			lda 	GXIsDiffYLarger 			; is dy larger
.8161	d0 0f		bne $8172			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8163	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8166	4d 35 06	eor $0635			eor 	GXX1
.8169	d0 06		bne $8171			bne 	_GXLICExit
.816b	ad 32 06	lda $0632			lda 	GXX0+1
.816e	4d 36 06	eor $0636			eor 	GXX1+1
.8171					_GXLICExit:
.8171	60		rts				rts
.8172					_GXLICCompareY:
.8172	ad 37 06	lda $0637			lda 	GXY1
.8175	4d 33 06	eor $0633			eor 	GXY0
.8178	60		rts				rts
.8179					GXLineAdvance:
.8179	18		clc				clc 								; add adjust to position
.817a	ad 47 06	lda $0647			lda 	GXPosition
.817d	6d 48 06	adc $0648			adc 	GXAdjust
.8180	8d 47 06	sta $0647			sta 	GXPosition
.8183	9c 4a 06	stz $064a			stz 	GXAddSelect 				; clear add select flag
.8186	b0 05		bcs $818d			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8188	cd 49 06	cmp $0649			cmp 	GXTotal 					; if exceeded total
.818b	90 0a		bcc $8197			bcc 	_GXLANoExtra
.818d					_GXLAOverflow:
.818d	ce 4a 06	dec $064a			dec 	GXAddSelect 				; set addselect to $FF
.8190	38		sec				sec 								; subtract total and write back
.8191	ed 49 06	sbc $0649			sbc 	GXTotal
.8194	8d 47 06	sta $0647			sta 	GXPosition
.8197					_GXLANoExtra:
.8197	ad 45 06	lda $0645			lda 	GXIsDiffYLarger
.819a	f0 0d		beq $81a9			beq 	_GXDXLarger
.819c	20 fb 81	jsr $81fb			jsr 	GXIncrementY
.819f	ad 4a 06	lda $064a			lda 	GXAddSelect
.81a2	f0 10		beq $81b4			beq 	_GXLAExit
.81a4	20 b5 81	jsr $81b5			jsr 	GXAdjustX
.81a7	80 0b		bra $81b4			bra 	_GXLAExit
.81a9					_GXDXLarger:
.81a9	20 b5 81	jsr $81b5			jsr 	GXAdjustX
.81ac	ad 4a 06	lda $064a			lda 	GXAddSelect
.81af	f0 03		beq $81b4			beq 	_GXLAExit
.81b1	20 fb 81	jsr $81fb			jsr 	GXIncrementY
.81b4					_GXLAExit:
.81b4	60		rts				rts
.81b5					GXAdjustX:
.81b5	ad 46 06	lda $0646			lda 	GXDXNegative
.81b8	10 25		bpl $81df			bpl 	_GXAXRight
.81ba	ad 31 06	lda $0631			lda 	GXX0
.81bd	d0 03		bne $81c2			bne 	_GXAXNoBorrow
.81bf	ce 32 06	dec $0632			dec 	GXX0+1
.81c2					_GXAXNoBorrow:
.81c2	ce 31 06	dec $0631			dec 	GXX0
.81c5	ce 3f 06	dec $063f			dec 	gsOffset 					; pixel left
.81c8	ad 3f 06	lda $063f			lda 	gsOffset
.81cb	c9 ff		cmp #$ff			cmp 	#$FF
.81cd	d0 0f		bne $81de			bne 	_GXAYExit 					; underflow
.81cf	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.81d1	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.81d3	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.81d5	b0 07		bcs $81de			bcs 	_GXAYExit
.81d7	18		clc				clc
.81d8	69 20		adc #$20			adc 	#$20 						; fix up
.81da	85 3b		sta $3b				sta 	gsTemp+1
.81dc	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.81de					_GXAYExit:
.81de	60		rts				rts
.81df					_GXAXRight:
.81df	ee 31 06	inc $0631			inc 	GXX0
.81e2	d0 03		bne $81e7			bne 	_GXAXNoCarry
.81e4	ee 32 06	inc $0632			inc 	GXX0+1
.81e7					_GXAXNoCarry:
.81e7	ee 3f 06	inc $063f			inc 	gsOffset 					; pixel right
.81ea	d0 0e		bne $81fa			bne 	_GXAXExit 					; if not overflowed, exit.
.81ec	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.81ee	a5 3b		lda $3b				lda 	gsTemp+1
.81f0	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.81f2	90 06		bcc $81fa			bcc 	_GXAXExit
.81f4	e9 20		sbc #$20			sbc 	#$20 						; fix up
.81f6	85 3b		sta $3b				sta 	gsTemp+1
.81f8	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.81fa					_GXAXExit:
.81fa	60		rts				rts
.81fb					GXIncrementY:
.81fb	ee 33 06	inc $0633			inc 	GXY0
.81fe	20 4b 84	jsr $844b			jsr 	GXMovePositionDown
.8201	60		rts				rts
.8202					GXLineSetup:
.8202	ad 37 06	lda $0637			lda 	GXY1
.8205	38		sec				sec
.8206	ed 33 06	sbc $0633			sbc 	GXY0
.8209	4a		lsr a				lsr 	a
.820a	8d 44 06	sta $0644			sta 	GXDiffY
.820d	9c 46 06	stz $0646			stz 	GXDXNegative 				; clear -ve flag
.8210	38		sec				sec
.8211	ad 35 06	lda $0635			lda 	GXX1
.8214	ed 31 06	sbc $0631			sbc 	GXX0
.8217	8d 43 06	sta $0643			sta 	GXDiffX
.821a	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.821d	ed 32 06	sbc $0632			sbc 	GXX0+1
.8220	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8221	6e 43 06	ror $0643			ror 	GXDiffX
.8224	0a		asl a				asl 	a
.8225	10 0c		bpl $8233			bpl 	_GDXNotNegative
.8227	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8229	38		sec				sec
.822a	ed 43 06	sbc $0643			sbc 	GXDiffX
.822d	8d 43 06	sta $0643			sta 	GXDiffX
.8230	ce 46 06	dec $0646			dec 	GXDXNegative 				; -ve flag = $FF.
.8233					_GDXNotNegative:
.8233	9c 45 06	stz $0645			stz 	GXIsDiffYLarger 			; clear larger flag
.8236	ad 44 06	lda $0644			lda 	GXDiffY 					; set adjust and total.
.8239	8d 48 06	sta $0648			sta 	GXAdjust
.823c	ad 43 06	lda $0643			lda 	GXDiffX
.823f	8d 49 06	sta $0649			sta 	GXTotal
.8242	ad 44 06	lda $0644			lda 	GXDiffY 					; if dy > dx
.8245	cd 43 06	cmp $0643			cmp 	GXDiffX
.8248	90 0f		bcc $8259			bcc 	_GDXNotLarger
.824a	ce 45 06	dec $0645			dec 	GXIsDiffYLarger 			; set the dy larger flag
.824d	ad 43 06	lda $0643			lda 	GXDiffX 					; set adjust and total other way round
.8250	8d 48 06	sta $0648			sta 	GXAdjust
.8253	ad 44 06	lda $0644			lda 	GXDiffY
.8256	8d 49 06	sta $0649			sta 	GXTotal
.8259					_GDXNotLarger:
.8259	ad 49 06	lda $0649			lda 	GXTotal
.825c	4a		lsr a				lsr 	a
.825d	8d 47 06	sta $0647			sta 	GXPosition
.8260	60		rts				rts
.0643					GXDiffX:
>0643							.fill 	1
.0644					GXDiffY:
>0644							.fill 	1
.0645					GXIsDiffYLarger:
>0645							.fill 	1
.0646					GXDXNegative:
>0646							.fill 	1
.0647					GXPosition:
>0647							.fill 	1
.0648					GXAdjust:
>0648							.fill 	1
.0649					GXTotal:
>0649							.fill 	1
.064a					GXAddSelect:
>064a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.8261					GXFillRectangle:
.8261	38		sec				sec
.8262	80 01		bra $8265			bra 	GXRectangle
.8264					GXFrameRectangle:
.8264	18		clc				clc
.8265					GXRectangle:
.8265	08		php				php 								; save Fill flag (CS)
.8266	20 dd 83	jsr $83dd			jsr 	GXOpenBitmap 				; start drawing
.8269	20 66 84	jsr $8466			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.826c	20 fb 83	jsr $83fb			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.826f	38		sec				sec 								; sec = Draw line
.8270	20 99 82	jsr $8299			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8273	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8276	cd 37 06	cmp $0637			cmp 	gxY1
.8279	f0 19		beq $8294			beq 	_GXRectangleExit
.827b					_GXRectLoop:
.827b	20 4b 84	jsr $844b			jsr 	GXMovePositionDown 			; down one.
.827e	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.8281	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8284	cd 37 06	cmp $0637			cmp 	gXY1
.8287	f0 07		beq $8290			beq 	_GXLastLine
.8289	28		plp				plp 								; get flag back
.828a	08		php				php
.828b	20 99 82	jsr $8299			jsr 	GXDrawLineX1X0 				; draw horizontal line
.828e	80 eb		bra $827b			bra 	_GXRectLoop
.8290					_GXLastLine:
.8290	38		sec				sec
.8291	20 99 82	jsr $8299			jsr 	GXDrawLineX1X0
.8294					_GXRectangleExit:
.8294	68		pla				pla 								; throw fill flag.
.8295	20 ee 83	jsr $83ee			jsr 	GXCloseBitmap 				; stop drawing and exit
.8298	60		rts				rts
.8299					GXDrawLineX1X0:
.8299	08		php				php 								; save solid/either-end
.829a	38		sec				sec
.829b	ad 35 06	lda $0635			lda		gXX1
.829e	ed 31 06	sbc $0631			sbc 	gXX0
.82a1	85 36		sta $36				sta 	gzTemp0
.82a3	ad 36 06	lda $0636			lda 	gXX1+1
.82a6	ed 32 06	sbc $0632			sbc 	gXX0+1
.82a9	85 37		sta $37				sta 	gzTemp0+1
.82ab	28		plp				plp
.82ac					GXDrawLineTemp0:
.82ac	a5 3a		lda $3a				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.82ae	48		pha				pha
.82af	a5 3b		lda $3b				lda 	gsTemp+1
.82b1	48		pha				pha
.82b2	ad 3f 06	lda $063f			lda 	gsOffset
.82b5	48		pha				pha
.82b6	a5 0b		lda $0b				lda 	GFXEditSlot
.82b8	48		pha				pha
.82b9	ac 3f 06	ldy $063f			ldy 	gsOffset 					; Y offset
.82bc	90 1e		bcc $82dc			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.82be					_GXDLTLine:
.82be	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.82c0	2d 3c 06	and $063c			and 	gxANDValue
.82c3	4d 3b 06	eor $063b			eor 	gxEORValue
.82c6	91 3a		sta ($3a),y			sta 	(gsTemp),y
.82c8	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.82ca	d0 04		bne $82d0			bne 	_GXDLTNoBorrow
.82cc	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.82ce	30 2e		bmi $82fe			bmi 	_GXDLTExit
.82d0					_GXDLTNoBorrow:
.82d0	c6 36		dec $36				dec 	gzTemp0
.82d2	c8		iny				iny 								; next slot.
.82d3	d0 e9		bne $82be			bne 	_GXDLTLine
.82d5	e6 3b		inc $3b				inc 	gsTemp+1 					; carry to next
.82d7	20 0c 83	jsr $830c			jsr 	_GXDLTCheckWrap				; check for new page.
.82da	80 e2		bra $82be			bra 	_GXDLTLine
.82dc					_GXDLTEndPoints:
.82dc	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel
.82de	2d 3c 06	and $063c			and 	gxANDValue
.82e1	4d 3b 06	eor $063b			eor 	gxEORValue
.82e4	91 3a		sta ($3a),y			sta 	(gsTemp),y
.82e6	98		tya				tya 								; advance to right side
.82e7	18		clc				clc
.82e8	65 36		adc $36				adc 	gzTemp0
.82ea	a8		tay				tay
.82eb	a5 3b		lda $3b				lda 	gsTemp+1
.82ed	65 37		adc $37				adc 	gzTemp0+1
.82ef	85 3b		sta $3b				sta 	gsTemp+1
.82f1	20 0c 83	jsr $830c			jsr 	_GXDLTCheckWrap 			; fix up.
.82f4	b1 3a		lda ($3a),y			lda 	(gsTemp),y 					; set pixel on the right
.82f6	2d 3c 06	and $063c			and 	gxANDValue
.82f9	4d 3b 06	eor $063b			eor 	gxEORValue
.82fc	91 3a		sta ($3a),y			sta 	(gsTemp),y
.82fe					_GXDLTExit:
.82fe	68		pla				pla
.82ff	85 0b		sta $0b				sta 	GFXEditSlot
.8301	68		pla				pla
.8302	8d 3f 06	sta $063f			sta 	gsOffset
.8305	68		pla				pla
.8306	85 3b		sta $3b				sta 	gsTemp+1
.8308	68		pla				pla
.8309	85 3a		sta $3a				sta 	gsTemp
.830b	60		rts				rts
.830c					_GXDLTCheckWrap:
.830c	a5 3b		lda $3b				lda 	gsTemp+1 					; check end of page
.830e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8310	90 06		bcc $8318			bcc 	_GXDLTCWExit
.8312	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8314	85 3b		sta $3b				sta 	gsTemp+1
.8316	e6 0b		inc $0b				inc 	GFXEditSlot
.8318					_GXDLTCWExit:
.8318	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.8319					GraphicDraw:
.8319	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.831b	b0 06		bcs $8323			bcs 	_GDCoordinate
.831d	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.831f	84 37		sty $37				sty 	gzTemp0+1
.8321	80 2c		bra $834f			bra 	_GDExecuteA 				; and execute
.8323					_GDCoordinate:
.8323	48		pha				pha 								; save AXY
.8324	da		phx				phx
.8325	5a		phy				phy
.8326	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8328					_GDCopy1:
.8328	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.832b	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.832e	ca		dex				dex
.832f	10 f7		bpl $8328			bpl 	_GDCopy1
.8331	68		pla				pla 								; update Y
.8332	8d 2b 06	sta $062b			sta 	gxCurrentY
.8335	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8338	68		pla				pla
.8339	8d 29 06	sta $0629			sta 	gxCurrentX
.833c	68		pla				pla 								; get A (command+X.1) back
.833d	48		pha				pha
.833e	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.8340	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.8343	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.8345					_GDCopy2:
.8345	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8348	9d 31 06	sta $0631,x			sta 	gxX0,x
.834b	ca		dex				dex
.834c	10 f7		bpl $8345			bpl 	_GDCopy2
.834e	68		pla				pla 								; get command back
.834f					_GDExecuteA:
.834f	29 fe		and #$fe			and 	#$FE 						; lose LSB
.8351	aa		tax				tax
.8352	7c 56 83	jmp ($8356,x)			jmp 	(GDVectors,x)
.8355					GXMove:
.8355	60		rts				rts
.8356					GDVectors:
>8356							.fill 	2 							; $00 		; Open/Close Bitmap
>8358	83 80						.word 	GXClearBitmap 				; $01 	  	: Clear Bitmap to X
>835a							.fill 	14*2 						; $02-$0F 	: Reserved
>8376	55 83						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8378	37 81						.word 	GXLine 						; $11 		: Draw line
>837a	64 82						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>837c	61 82						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>837e	d0 80						.word 	GXFrameEllipse 				; $14 		; Framed ellipse
>8380	cd 80						.word 	GXFillEllipse 				; $15 		; Filled ellipse

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.8382					RunDemos:
.8382	64 01		stz $01				stz 	1
.8384	a9 0f		lda #$0f			lda 	#$0F
.8386	8d 00 d0	sta $d000			sta 	$D000
.8389	a9 01		lda #$01			lda 	#1
.838b	8d 00 d1	sta $d100			sta 	$D100
.838e	9c 01 d1	stz $d101			stz 	$D101
.8391	9c 02 d1	stz $d102			stz 	$D102
.8394	a9 02		lda #$02			lda 	#2
.8396	8d 03 d1	sta $d103			sta 	$D103
.8399	a9 10		lda #$10			lda 	#16
.839b	8d 39 06	sta $0639			sta 	gxBasePage
.839e	a9 f0		lda #$f0			lda 	#240
.83a0	8d 3a 06	sta $063a			sta 	gxHeight
.83a3	a9 fc		lda #$fc			lda 	#$FC
.83a5	8d 3b 06	sta $063b			sta 	gxEORValue
.83a8	a9 ff		lda #$ff			lda 	#$FF
.83aa	8d 3c 06	sta $063c			sta 	gxANDValue
.83ad					loop:
.83ad	a9 02		lda #$02			lda 	#((1)*2)+(((4) >> 8) & 1)
.83af	a2 04		ldx #$04			ldx 	#((4) & $FF)
.83b1	a0 00		ldy #$00			ldy 	#(0)
.83b3	20 19 83	jsr $8319			jsr 	GraphicDraw
.83b6	a9 20		lda #$20			lda 	#((16)*2)+(((210) >> 8) & 1)
.83b8	a2 d2		ldx #$d2			ldx 	#((210) & $FF)
.83ba	a0 0a		ldy #$0a			ldy 	#(10)
.83bc	20 19 83	jsr $8319			jsr 	GraphicDraw
.83bf	a9 2b		lda #$2b			lda 	#((21)*2)+(((310) >> 8) & 1)
.83c1	a2 36		ldx #$36			ldx 	#((310) & $FF)
.83c3	a0 64		ldy #$64			ldy 	#(100)
.83c5	20 19 83	jsr $8319			jsr 	GraphicDraw
.83c8	60		rts				rts
.83c9	20 e6 9a	jsr $9ae6	demo:	jsr 	Random32Bit
.83cc	ee 3b 06	inc $063b			inc 	gxEORValue
.83cf	a9 24		lda #$24			lda 	#18*2
.83d1	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.83d4	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.83d7	20 19 83	jsr $8319			jsr 	GraphicDraw
.83da	80 ed		bra $83c9			bra 	demo
.83dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.83dd					GXOpenBitmap:
.83dd	78		sei				sei 								; no interrupts here
.83de	a5 00		lda $00				lda 	0 							; save original MMU Control register
.83e0	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.83e3	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.83e5	85 00		sta $00				sta 	0
.83e7	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.83e9	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.83ec	58		cli				cli
.83ed	60		rts				rts
.83ee					GXCloseBitmap:
.83ee	78		sei				sei
.83ef	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.83f2	85 0b		sta $0b				sta 	GFXEditSlot
.83f4	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.83f7	85 00		sta $00				sta 	0
.83f9	58		cli				cli
.83fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.83fb					GXPositionCalc:
.83fb	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.83fe	85 3a		sta $3a				sta 	gsTemp
.8400	64 3b		stz $3b				stz 	gsTemp+1
.8402	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.8404	26 3b		rol $3b				rol 	gsTemp+1
.8406	06 3a		asl $3a				asl 	gsTemp
.8408	26 3b		rol $3b				rol 	gsTemp+1
.840a	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.840b	65 3a		adc $3a				adc 	gsTemp
.840d	85 3a		sta $3a				sta 	gsTemp
.840f	90 02		bcc $8413			bcc 	_GXPCNoCarry
.8411	e6 3b		inc $3b				inc 	gsTemp+1
.8413					_GXPCNoCarry:
.8413	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8415	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8417	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.8419	85 36		sta $36				sta 	gzTemp0
.841b	64 3b		stz $3b				stz 	gsTemp+1
.841d	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.841f					_GXPCMultiply32:
.841f	06 3a		asl $3a				asl 	gsTemp
.8421	26 3b		rol $3b				rol 	gsTemp+1
.8423	3a		dec a				dec 	a
.8424	d0 f9		bne $841f			bne 	_GXPCMultiply32
.8426	18		clc				clc
.8427	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.842a	65 3a		adc $3a				adc 	gsTemp
.842c	8d 3f 06	sta $063f			sta 	gsOffset
.842f	ad 32 06	lda $0632			lda 	GXX0+1
.8432	65 3b		adc $3b				adc 	gsTemp+1
.8434	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8436	90 04		bcc $843c			bcc 	_GXPCNoOverflow
.8438	29 1f		and #$1f			and 	#$1F 						; fix it up
.843a	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.843c					_GXPCNoOverflow:
.843c	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.843e	85 3b		sta $3b				sta 	gsTemp+1
.8440	64 3a		stz $3a				stz 	gsTemp
.8442	18		clc				clc
.8443	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8445	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8448	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.844a	60		rts				rts
.844b					GXMovePositionDown:
.844b	18		clc				clc 								; add 320 to offset/temp+1
.844c	ad 3f 06	lda $063f			lda 	gsOffset
.844f	69 40		adc #$40			adc 	#64
.8451	8d 3f 06	sta $063f			sta 	gsOffset
.8454	a5 3b		lda $3b				lda 	gsTemp+1
.8456	69 01		adc #$01			adc 	#1
.8458	85 3b		sta $3b				sta 	gsTemp+1
.845a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.845c	90 07		bcc $8465			bcc 	_GXMPDExit
.845e	38		sec				sec  								; next page
.845f	e9 20		sbc #$20			sbc 	#$20
.8461	85 3b		sta $3b				sta 	gsTemp+1
.8463	e6 0b		inc $0b				inc 	GFXEditSlot
.8465					_GXMPDExit:
.8465	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.8466					GXSortXY:
.8466	20 84 84	jsr $8484			jsr 	GXSortY 					; will be sorted on Y now
.8469	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.846c	cd 35 06	cmp $0635			cmp 	gxX1
.846f	ad 32 06	lda $0632			lda 	gXX0+1
.8472	ed 36 06	sbc $0636			sbc 	gXX1+1
.8475	90 0c		bcc $8483			bcc 	_GXSXYExit 					; X0 < X1 exit
.8477	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8479	a0 04		ldy #$04			ldy 	#4
.847b	20 98 84	jsr $8498			jsr 	GXSwapXY
.847e	e8		inx				inx
.847f	c8		iny				iny
.8480	20 98 84	jsr $8498			jsr 	GXSwapXY
.8483					_GXSXYExit:
.8483	60		rts				rts
.8484					GXSortY:
.8484	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8487	cd 37 06	cmp $0637			cmp 	gxY1
.848a	90 0b		bcc $8497			bcc 	_GXSYSorted
.848c	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.848e	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8490					_GXSwap1:
.8490	20 98 84	jsr $8498			jsr 	GXSwapXY
.8493	88		dey				dey
.8494	ca		dex				dex
.8495	10 f9		bpl $8490			bpl 	_GXSwap1
.8497					_GXSYSorted:
.8497	60		rts				rts
.8498					GXSwapXY:
.8498	bd 31 06	lda $0631,x			lda 	gxX0,x
.849b	48		pha				pha
.849c	b9 31 06	lda $0631,y			lda 	gxX0,y
.849f	9d 31 06	sta $0631,x			sta 	gxX0,x
.84a2	68		pla				pla
.84a3	99 31 06	sta $0631,y			sta 	gxX0,y
.84a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.84a7					AssembleGroup1:
.84a7	a9 ff		lda #$ff			lda 	#$FF
.84a9	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.84ac	80 02		bra $84b0			bra 	AsmGroup12
.84ae					AssembleGroup2:
.84ae	a5 00		lda $00				lda 	$00
.84b0					AsmGroup12:
.84b0	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.84b3	68		pla				pla 								; pop the return address to access the information following.
.84b4	fa		plx				plx
.84b5	20 3e 85	jsr $853e			jsr 	AccessParameters 			; get opcode and save as base
.84b8	8d a4 04	sta $04a4			sta 	BaseOpcode
.84bb	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84be	d0 08		bne $84c8			bne 	_AG12HaveMask
.84c0	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84c2	20 46 85	jsr $8546			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84c5	8d a5 04	sta $04a5			sta 	ModeMask
.84c8					_AG12HaveMask:
.84c8	20 81 86	jsr $8681			jsr 	TypeAndCalculateOperand 	; get zero page type
.84cb	da		phx				phx 								; save found address mode
.84cc	20 aa 85	jsr $85aa			jsr 	AssembleModeX
.84cf	fa		plx				plx  								; restore address mode
.84d0	b0 0b		bcs $84dd			bcs 	_AG12Exit
.84d2	20 de 84	jsr $84de			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84d5	20 aa 85	jsr $85aa			jsr 	AssembleModeX
.84d8	b0 03		bcs $84dd			bcs 	_AG12Exit
.84da	4c 9c aa	jmp $aa9c			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84dd					_AG12Exit:
.84dd	60		rts				rts
.84de					PromoteToAbsolute:
.84de	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84e0	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84e2	f0 19		beq $84fd			beq 	_PTADo
.84e4	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84e6	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84e8	f0 13		beq $84fd			beq 	_PTADo
.84ea	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84ec	e0 80		cpx #$80			cpx 	#AM_ZEROY
.84ee	f0 0d		beq $84fd			beq 	_PTADo
.84f0	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84f2	e0 d1		cpx #$d1			cpx 	#AM_IND
.84f4	f0 07		beq $84fd			beq 	_PTADo
.84f6	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84f8	e0 c0		cpx #$c0			cpx 	#AM_INDX
.84fa	f0 01		beq $84fd			beq 	_PTADo
.84fc	60		rts				rts
.84fd					_PTADo:
.84fd	aa		tax				tax
.84fe	60		rts				rts
.84ff					AssembleGroup3:
.84ff	68		pla				pla 								; get parameters, which is just the opcode.
.8500	fa		plx				plx
.8501	20 3e 85	jsr $853e			jsr 	AccessParameters 			; get and output opcode
.8504	20 56 85	jsr $8556			jsr 	AssemblerWriteByte
.8507	20 e5 86	jsr $86e5			jsr 	CalculateOperand 			; get a 16 bit operand
.850a	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.850d	38		sec				sec
.850e	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8511	48		pha				pha 								; LSB in A
.8512	ad 10 04	lda $0410			lda 	NSMantissa1
.8515	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8518	aa		tax				tax 								; MSB in X
.8519	68		pla				pla
.851a	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.851b	69 7f		adc #$7f			adc 	#$7F
.851d	90 01		bcc $8520			bcc 	_AG3NoCarry
.851f	e8		inx				inx
.8520					_AG3NoCarry:
.8520	38		sec				sec 								; fix back and write out anyways.
.8521	e9 80		sbc #$80			sbc 	#$80
.8523	20 56 85	jsr $8556			jsr 	AssemblerWriteByte
.8526	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8528	f0 0a		beq $8534			beq 	_AG3Exit
.852a	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.852d	29 01		and #$01			and 	#1
.852f	f0 03		beq $8534			beq 	_AG3Exit
.8531	4c a1 aa	jmp $aaa1			jmp 	RangeError 					; no, branch is out of range
.8534					_AG3Exit:
.8534	60		rts				rts
.8535					AssembleGroup4:
.8535	68		pla				pla 								; pop address
.8536	fa		plx				plx
.8537	20 3e 85	jsr $853e			jsr 	AccessParameters 			; access and get first
.853a	20 56 85	jsr $8556			jsr 	AssemblerWriteByte 			; output it.
.853d	60		rts				rts
.853e					AccessParameters:
.853e	8d a1 04	sta $04a1			sta 	ParamStart
.8541	8e a2 04	stx $04a2			stx 	ParamStart+1
.8544	a9 01		lda #$01			lda 	#1
.8546					GetParameter:
.8546	5a		phy				phy
.8547	a8		tay				tay
.8548	ad a1 04	lda $04a1			lda 	ParamStart
.854b	85 36		sta $36				sta 	zTemp0
.854d	ad a2 04	lda $04a2			lda 	ParamStart+1
.8550	85 37		sta $37				sta 	zTemp0+1
.8552	b1 36		lda ($36),y			lda 	(zTemp0),y
.8554	7a		ply				ply
.8555	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8556					AssemblerWriteByte:
.8556	48		pha			pha
.8557	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.855a	29 02		and #$02		and 	#2
.855c	f0 1b		beq $8579		beq 	_AWBNoPrint
.855e	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8561	20 94 85	jsr $8594		jsr 	PrintHex
.8564	ad 9e 04	lda $049e		lda		AssemblerAddress
.8567	20 94 85	jsr $8594		jsr 	PrintHex
.856a	a9 20		lda #$20		lda 	#' '
.856c	20 3f ac	jsr $ac3f		jsr 	EXTPrintCharacter
.856f	68		pla			pla 									; print byte
.8570	48		pha			pha
.8571	20 94 85	jsr $8594		jsr 	PrintHex
.8574	a9 0d		lda #$0d		lda 	#13
.8576	20 3f ac	jsr $ac3f		jsr 	EXTPrintCharacter
.8579					_AWBNoPrint:
.8579	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.857c	85 36		sta $36			sta 	zTemp0
.857e	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8581	f0 0e		beq $8591		beq 	_AWBRange
.8583	85 37		sta $37			sta 	zTemp0+1
.8585	68		pla			pla 									; write byte out
.8586	92 36		sta ($36)		sta 	(zTemp0)
.8588	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.858b	d0 03		bne $8590		bne 	_AWBNoCarry
.858d	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8590					_AWBNoCarry:
.8590	60		rts			rts
.8591					_AWBRange:
.8591	4c a1 aa	jmp $aaa1		jmp 	RangeError
.8594					PrintHex:
.8594	48		pha				pha
.8595	4a		lsr a				lsr 	a
.8596	4a		lsr a				lsr 	a
.8597	4a		lsr a				lsr 	a
.8598	4a		lsr a				lsr 	a
.8599	20 9d 85	jsr $859d			jsr 	_PrintNibble
.859c	68		pla				pla
.859d					_PrintNibble:
.859d	29 0f		and #$0f			and 	#15
.859f	c9 0a		cmp #$0a			cmp 	#10
.85a1	90 02		bcc $85a5			bcc 	_NoShift
.85a3	69 06		adc #$06			adc 	#6
.85a5					_NoShift:
.85a5	69 30		adc #$30			adc 	#48
.85a7	4c 3f ac	jmp $ac3f			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.85aa					AssembleModeX:
.85aa	5a		phy				phy
.85ab	ad a3 04	lda $04a3			lda 	IsGroup1
.85ae	f0 17		beq $85c7			beq 	_AMXGroup2
.85b0	8a		txa				txa 							; is it in group # 1
.85b1	29 40		and #$40			and 	#AM_ISG1
.85b3	f0 50		beq $8605			beq 	_AMXFail 				; no, give up.
.85b5	8a		txa				txa 							; get back.
.85b6	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85b8	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85ba	d0 22		bne $85de			bne 	_AMXHaveInfo
.85bc	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.85bf	c9 81		cmp #$81			cmp 	#$81
.85c1	f0 42		beq $8605			beq 	_AMXFail
.85c3	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85c5	80 17		bra $85de			bra 	_AMXHaveInfo 			; odd design decision there.
.85c7					_AMXGroup2:
.85c7	8a		txa				txa 							; is it in group 2 ?
.85c8	29 20		and #$20			and 	#AM_ISG2
.85ca	f0 39		beq $8605			beq 	_AMXFail 				; no, give up.
.85cc	8a		txa				txa 							; get the offset into Y
.85cd	29 1f		and #$1f			and 	#$1F
.85cf	4a		lsr a				lsr 	a 						; make it 0-7.
.85d0	4a		lsr a				lsr  	a
.85d1	a8		tay				tay
.85d2	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85d5					_AMXCheckOkay:
.85d5	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85d6	88		dey				dey
.85d7	10 fc		bpl $85d5			bpl 	_AMXCheckOkay
.85d9	90 2a		bcc $8605			bcc 	_AMXFail 				; not allowed.
.85db	8a		txa				txa  							; get mask back
.85dc	29 1f		and #$1f			and 	#$1F
.85de					_AMXHaveInfo:
.85de	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85e0	10 05		bpl $85e7			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85e2	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85e5	d0 1e		bne $8605			bne 	_AMXFail
.85e7					_AMXAnySize:
.85e7	18		clc				clc 							; add offset to the base opcode
.85e8	6d a4 04	adc $04a4			adc 	BaseOpcode
.85eb					_AMXOutputCode:
.85eb	20 56 85	jsr $8556			jsr 	AssemblerWriteByte 		; write the opcode out.
.85ee	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.85f0	f0 10		beq $8602			beq 	_AMXExit
.85f2	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.85f5	20 56 85	jsr $8556			jsr 	AssemblerWriteByte
.85f8	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85fa	30 06		bmi $8602			bmi 	_AMXExit
.85fc	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.85ff	20 56 85	jsr $8556			jsr 	AssemblerWriteByte
.8602					_AMXExit:
.8602	7a		ply				ply
.8603	38		sec				sec
.8604	60		rts				rts
.8605					_AMXFail:
.8605	a0 00		ldy #$00			ldy 	#0
.8607					_AMXCheckOddities:
.8607	8a		txa				txa
.8608	d9 30 86	cmp $8630,y			cmp 	ExtraOpcode+2,y 		; match address mode
.860b	d0 16		bne $8623			bne 	_AMXCONext
.860d	b9 2e 86	lda $862e,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8610	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8613	d0 0e		bne $8623			bne 	_AMXCONext
.8615	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8617	10 05		bpl $861e			bpl 	_AMXCONotZero
.8619	ad 10 04	lda $0410			lda 	NSMantissa1
.861c	d0 05		bne $8623			bne 	_AMXCONext
.861e					_AMXCONotZero:
.861e	b9 2f 86	lda $862f,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8621	80 c8		bra $85eb			bra 	_AMXOutputCode 			; and assemble it
.8623					_AMXCONext:
.8623	c8		iny				iny
.8624	c8		iny				iny
.8625	c8		iny				iny
.8626	b9 2e 86	lda $862e,y			lda 	ExtraOpcode+0,y 		; end of table
.8629	d0 dc		bne $8607			bne 	_AMXCheckOddities
.862b					_AMXCOFail:
.862b	7a		ply				ply
.862c	18		clc				clc
.862d	60		rts				rts
.862e					ExtraOpcode:
>862e	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8631	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8634	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8637	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>863a	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>863d	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8640	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8643	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8646	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8649	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>864c	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.864d					LabelHere:
.864d	c8		iny				iny 								; skip .
.864e	a2 00		ldx #$00			ldx 	#0 							; get a term
.8650	20 57 98	jsr $9857			jsr 	EvaluateTerm 				; get a term
.8653	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8656	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8658	d0 24		bne $867e			bne 	_ALType
.865a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.865d	85 36		sta $36				sta 	zTemp0
.865f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8662	85 37		sta $37				sta 	zTemp0+1
.8664	5a		phy				phy 								; copy address in.
.8665	a0 01		ldy #$01			ldy 	#1
.8667	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.866a	92 36		sta ($36)			sta 	(zTemp0)
.866c	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.866f	91 36		sta ($36),y			sta 	(zTemp0),y
.8671	c8		iny				iny
.8672	a9 00		lda #$00			lda 	#0
.8674	91 36		sta ($36),y			sta 	(zTemp0),y
.8676	c8		iny				iny
.8677	91 36		sta ($36),y			sta 	(zTemp0),y
.8679	c8		iny				iny
.867a	91 36		sta ($36),y			sta 	(zTemp0),y
.867c	7a		ply				ply
.867d	60		rts				rts
.867e					_ALType:
.867e	4c a6 aa	jmp $aaa6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8681					TypeAndCalculateOperand:
.8681	b1 30		lda ($30),y			lda 	(codePtr),y
.8683	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8685	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8687	f0 5b		beq $86e4			beq 	_TACOExit
.8689	c9 80		cmp #$80			cmp 	#KWC_EOL
.868b	f0 57		beq $86e4			beq 	_TACOExit
.868d	c8		iny				iny
.868e	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8690	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8692	f0 51		beq $86e5			beq 	CalculateOperand
.8694	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8696	f0 1f		beq $86b7			beq 	_TACOIndirect
.8698	88		dey				dey 								; undo get of first character
.8699	20 e5 86	jsr $86e5			jsr 	CalculateOperand 			; get operand
.869c	b1 30		lda ($30),y			lda 	(codePtr),y
.869e	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.86a0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86a2	d0 40		bne $86e4			bne 	_TACOExit
.86a4	c8		iny				iny
.86a5	20 2d a4	jsr $a42d			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.86a8	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.86aa	c9 58		cmp #$58			cmp 	#'X'
.86ac	f0 36		beq $86e4			beq 	_TACOExit
.86ae	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.86b0	c9 59		cmp #$59			cmp 	#'Y'
.86b2	f0 30		beq $86e4			beq 	_TACOExit
.86b4					_TACOSyntax:
.86b4	4c 9c aa	jmp $aa9c			jmp 	SyntaxError
.86b7					_TACOIndirect:
.86b7	20 e5 86	jsr $86e5			jsr 	CalculateOperand 			; get the operand
.86ba	b1 30		lda ($30),y			lda 	(codePtr),y
.86bc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86be	f0 17		beq $86d7			beq 	_TACOIndX
.86c0	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86c3	b1 30		lda ($30),y			lda 	(codePtr),y
.86c5	a2 d1		ldx #$d1			ldx 	#AM_IND
.86c7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86c9	d0 19		bne $86e4			bne 	_TACOExit
.86cb	c8		iny				iny
.86cc	20 2d a4	jsr $a42d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86cf	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86d1	d0 e1		bne $86b4			bne 	_TACOSyntax
.86d3	a2 d0		ldx #$d0			ldx 	#AM_INDY
.86d5	80 0d		bra $86e4			bra 	_TACOExit
.86d7					_TACOIndX:
.86d7	c8		iny				iny
.86d8	20 2d a4	jsr $a42d			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86db	c9 58		cmp #$58			cmp 	#'X' 						; check X
.86dd	d0 d5		bne $86b4			bne 	_TACOSyntax
.86df	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket			; check )
.86e2	a2 c0		ldx #$c0			ldx 	#AM_INDX
.86e4					_TACOExit:
.86e4	60		rts				rts
.86e5					CalculateOperand:
.86e5	48		pha				pha
.86e6	da		phx				phx
.86e7	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86e9	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger
.86ec	fa		plx				plx
.86ed	68		pla				pla
.86ee	60		rts				rts
.a42d					TACOCheckXY:
.a42d	b1 30		lda ($30),y			lda 	(codePtr),y
.a42f	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a431	c9 40		cmp #$40			cmp 	#$40
.a433	d0 21		bne $a456			bne 	_TCXYFail
.a435	b1 30		lda ($30),y			lda 	(codePtr),y
.a437	18		clc				clc
.a438	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a43a	85 37		sta $37				sta 	zTemp0+1
.a43c	c8		iny				iny
.a43d	b1 30		lda ($30),y			lda 	(codePtr),y
.a43f	c8		iny				iny
.a440	85 36		sta $36				sta 	zTemp0
.a442	5a		phy				phy 								; save position
.a443	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a445	b1 36		lda ($36),y			lda 	(zTemp0),y
.a447	d0 0c		bne $a455			bne 	_TCXYPopFail
.a449	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a44b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a44d	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a44f	f0 08		beq $a459			beq 	_TCXYFound
.a451	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a453	f0 04		beq $a459			beq 	_TCXYFound
.a455					_TCXYPopFail:
.a455	7a		ply				ply
.a456					_TCXYFail:
.a456	a9 00		lda #$00			lda 	#0
.a458	60		rts				rts
.a459					_TCXYFound:
.a459	7a		ply				ply 								; restore position
.a45a	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a45c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.86ef					EditProgramCode:
.86ef	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.86f2	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.86f5	20 94 9d	jsr $9d94			jsr 	MemorySearch
.86f8	90 05		bcc $86ff			bcc 	_EPCNoDelete 				; reached the end don't delete
.86fa	d0 03		bne $86ff			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.86fc	20 83 ac	jsr $ac83			jsr 	MemoryDeleteLine 			; delete the line
.86ff					_EPCNoDelete:
.86ff	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8702	c9 80		cmp #$80			cmp 	#KWC_EOL
.8704	f0 0d		beq $8713			beq 	_EPCNoInsert
.8706	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8709	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.870c	20 94 9d	jsr $9d94			jsr 	MemorySearch
.870f	18		clc				clc 								; insert at this point.
.8710	20 ba ac	jsr $acba			jsr 	MemoryInsertLine 			; insert the line
.8713					_EPCNoInsert:
.8713	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8714					WarmStart:
.8714	a2 ff		ldx #$ff			ldx 	#$FF
.8716	9a		txs				txs
.8717	20 55 ac	jsr $ac55			jsr 	EXTInputLine 				; get line to lineBuffer
.871a	20 ae a1	jsr $a1ae			jsr 	TokeniseLine 				; tokenise the line
.871d	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8720	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8723	d0 17		bne $873c			bne 	_WSEditCode 				; if so,edit code.
.8725	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8728	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.872a	85 30		sta $30				sta 	codePtr
.872c	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.872e	85 31		sta $31				sta 	codePtr+1
.8730	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8733	c9 80		cmp #$80			cmp 	#KWC_EOL
.8735	f0 dd		beq $8714			beq 	WarmStart
.8737	20 45 8d	jsr $8d45			jsr 	RUNCodePointerLine 			; execute that line.
.873a	80 d8		bra $8714			bra 	WarmStart
.873c					_WSEditCode:
.873c	20 ef 86	jsr $86ef			jsr 	EditProgramCode
.873f	20 ad 87	jsr $87ad			jsr 	ClearCommand
.8742	80 d0		bra $8714			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8744					AssembleCommand:
.8744	a2 00		ldx #$00			ldx 	#0
.8746	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger 		; start address
.8749	ad 08 04	lda $0408			lda 	NSMantissa0
.874c	8d 9e 04	sta $049e			sta 	AssemblerAddress
.874f	ad 10 04	lda $0410			lda 	NSMantissa1
.8752	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8755	20 be a4	jsr $a4be			jsr 	CheckComma
.8758	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger 		; options
.875b	ad 08 04	lda $0408			lda 	NSMantissa0
.875e	8d a0 04	sta $04a0			sta 	AssemblerControl
.8761	60		rts				rts
.8762	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8763					AssertCommand:
.8763	a2 00		ldx #$00			ldx 	#0
.8765	20 ac 9c	jsr $9cac			jsr 	EvaluateInteger 			; the assert test
.8768	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; exit if result is non zero.
.876b	d0 05		bne $8772			bne 	_ACExit
.876d	a9 0a		lda #$0a		lda	#10
.876f	4c 7d 91	jmp $917d		jmp	ErrorHandler
.8772					_ACExit:
.8772	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8773					CallCommand:
.8773	a2 00		ldx #$00			ldx 	#0
.8775	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger
.8778					_CCClear
.8778	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8779	20 35 9d	jsr $9d35			jsr 	NSMSetZero
.877c	e0 04		cpx #$04			cpx 	#4
.877e	d0 f8		bne $8778			bne 	_CCClear
.8780	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8782					_CCCParam:
.8782	b1 30		lda ($30),y			lda 	(codePtr),y
.8784	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8786	d0 09		bne $8791			bne 	_CCCRun6502
.8788	c8		iny				iny 								; skip comma
.8789	e8		inx				inx	 								; next level
.878a	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger 		; get A/X/Y
.878d	e0 03		cpx #$03			cpx 	#3
.878f	90 f1		bcc $8782			bcc 	_CCCParam 					; done all 3 ?
.8791					_CCCRun6502:
.8791	5a		phy				phy 								; save position
.8792	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8795	85 37		sta $37				sta 	zTemp0+1
.8797	ad 08 04	lda $0408			lda 	NSMantissa0
.879a	85 36		sta $36				sta 	zTemp0
.879c	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.879f	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.87a2	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.87a5	20 aa 87	jsr $87aa			jsr 	_CCCZTemp0 					; call zTemp0
.87a8	7a		ply				ply 								; restore position and exit
.87a9	60		rts				rts
.87aa					_CCCZTemp0:
.87aa	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.87ad					ClearCommand:
.87ad	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.87af	85 36		sta $36				sta 	0+zTemp0
.87b1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.87b3	85 37		sta $37				sta 	1+zTemp0
.87b5					_ClearZeroLoop:
.87b5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.87b7	f0 24		beq $87dd			beq 	_ClearZeroEnd
.87b9	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.87bb	a9 00		lda #$00			lda 	#0
.87bd					_ClearOneVariable:
.87bd	91 36		sta ($36),y			sta 	(zTemp0),y
.87bf	c8		iny				iny
.87c0	c0 08		cpy #$08			cpy 	#8
.87c2	d0 f9		bne $87bd			bne 	_ClearOneVariable
.87c4	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.87c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.87c8	c9 18		cmp #$18			cmp 	#NSTProcedure
.87ca	d0 04		bne $87d0			bne 	_ClearNotProcedure
.87cc	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.87ce	91 36		sta ($36),y			sta 	(zTemp0),y
.87d0					_ClearNotProcedure:
.87d0	18		clc				clc 								; go to the next variable
.87d1	b2 36		lda ($36)			lda 	(zTemp0)
.87d3	65 36		adc $36				adc 	zTemp0
.87d5	85 36		sta $36				sta 	zTemp0
.87d7	90 dc		bcc $87b5			bcc 	_ClearZeroLoop
.87d9	e6 37		inc $37				inc 	zTemp0+1
.87db	80 d8		bra $87b5			bra 	_ClearZeroLoop
.87dd					_ClearZeroEnd:
.87dd	18		clc				clc
.87de	a5 36		lda $36				lda 	zTemp0
.87e0	69 01		adc #$01			adc 	#1
.87e2	8d 8c 04	sta $048c			sta 	lowMemPtr
.87e5	a5 37		lda $37				lda 	zTemp0+1
.87e7	69 00		adc #$00			adc 	#0
.87e9	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.87ec	20 4e 9e	jsr $9e4e			jsr 	StackReset
.87ef	20 9d ad	jsr $ad9d			jsr 	StringSystemInitialise
.87f2	20 9d 90	jsr $909d			jsr 	ProcedureScan
.87f5	20 01 8d	jsr $8d01			jsr 	Command_Restore
.87f8	9c 9e 04	stz $049e			stz 	AssemblerAddress
.87fb	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.87fe	9c a0 04	stz $04a0			stz 	AssemblerControl
.8801	20 44 9a	jsr $9a44			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8804	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8805					Command_Data:
.8805	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8807	a2 80		ldx #$80			ldx 	#KWC_EOL
.8809	20 ef 90	jsr $90ef			jsr 	ScanForward
.880c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.880d					DimCommand:
.880d	b1 30		lda ($30),y			lda 	(codePtr),y
.880f	29 c0		and #$c0			and 	#$C0
.8811	c9 40		cmp #$40			cmp 	#$40
.8813	d0 7a		bne $888f			bne 	_DCSyntax
.8815	b1 30		lda ($30),y			lda 	(codePtr),y
.8817	18		clc				clc
.8818	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.881a	85 3f		sta $3f				sta 	zaTemp+1
.881c	c8		iny				iny
.881d	b1 30		lda ($30),y			lda 	(codePtr),y
.881f	c8		iny				iny
.8820	85 3e		sta $3e				sta 	zaTemp
.8822	5a		phy				phy
.8823	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8825	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8827	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8829	c9 18		cmp #$18			cmp 	#NSTProcedure
.882b	f0 62		beq $888f			beq 	_DCSyntax
.882d	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.882f	29 04		and #$04			and 	#NSBIsArray
.8831	f0 64		beq $8897			beq 	_DCType
.8833	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8835	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8837	d0 59		bne $8892			bne 	_DCRedefine
.8839	7a		ply				ply
.883a	20 9a 88	jsr $889a			jsr 	_DCGetSize 				; get array size, check it.
.883d	5a		phy				phy
.883e	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8840	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8842	7a		ply				ply 							; is there a second (e.g. ,x)
.8843	b1 30		lda ($30),y			lda 	(codePtr),y
.8845	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8847	d0 0a		bne $8853			bne 	_DCOneDimension
.8849	c8		iny				iny 							; skip comma
.884a	20 9a 88	jsr $889a			jsr 	_DCGetSize 				; get 2nd array size
.884d	5a		phy				phy
.884e	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8850	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8852	7a		ply				ply
.8853					_DCOneDimension:
.8853	5a		phy				phy 							; save position
.8854	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8856	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8858	aa		tax				tax
.8859	c8		iny				iny
.885a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.885c	e8		inx				inx 							; bump them.
.885d	1a		inc a				inc 	a
.885e	20 38 a9	jsr $a938			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8861	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8863	29 e0		and #$e0			and 	#$E0
.8865	d0 23		bne $888a			bne 	_DCSize
.8867	a0 02		ldy #$02			ldy 	#2 						; get base type
.8869	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.886b	20 a8 88	jsr $88a8			jsr 	ScaleByBaseType 		; scale by base type
.886e	a5 36		lda $36				lda 	zTemp0
.8870	a6 37		ldx $37				ldx 	zTemp0+1
.8872	20 06 9a	jsr $9a06			jsr 	AllocateXABytes 		; allocate memory
.8875	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8877	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8879	c8		iny				iny
.887a	8a		txa				txa
.887b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.887d	7a		ply				ply 							; get position back
.887e	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 		; check )
.8881	b1 30		lda ($30),y			lda 	(codePtr),y
.8883	c8		iny				iny 							; consume in case
.8884	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8886	f0 85		beq $880d			beq 	DimCommand
.8888	88		dey				dey 							; undo consume
.8889	60		rts				rts
.888a					_DCSize:
.888a	a9 16		lda #$16		lda	#22
.888c	4c 7d 91	jmp $917d		jmp	ErrorHandler
.888f					_DCSyntax:
.888f	4c 9c aa	jmp $aa9c			jmp 	SyntaxError
.8892					_DCRedefine:
.8892	a9 15		lda #$15		lda	#21
.8894	4c 7d 91	jmp $917d		jmp	ErrorHandler
.8897					_DCType:
.8897	4c a6 aa	jmp $aaa6			jmp 	TypeError
.889a					_DCGetSize:
.889a	a2 00		ldx #$00			ldx 	#0 						; get first index.
.889c	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger 	; get array dimension
.889f	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.88a1	f0 e7		beq $888a			beq 	_DCSize
.88a3	c9 fe		cmp #$fe			cmp 	#254
.88a5	f0 e3		beq $888a			beq 	_DCSize
.88a7	60		rts				rts
.88a8					ScaleByBaseType:
.88a8	29 10		and #$10			and 	#NSBIsString 			; is it string
.88aa	d0 19		bne $88c5			bne 	_SBBTString
.88ac	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.88ae	48		pha				pha
.88af	a5 36		lda $36				lda 	zTemp0
.88b1	48		pha				pha
.88b2	06 36		asl $36				asl 	zTemp0 					; x 2
.88b4	26 37		rol $37				rol 	zTemp0+1
.88b6	06 36		asl $36				asl 	zTemp0 					; x 4
.88b8	26 37		rol $37				rol 	zTemp0+1
.88ba	68		pla				pla 							; add stacked value = x 5
.88bb	65 36		adc $36				adc 	zTemp0
.88bd	85 36		sta $36				sta 	zTemp0
.88bf	68		pla				pla
.88c0	65 37		adc $37				adc 	zTemp0+1
.88c2	85 37		sta $37				sta 	zTemp0+1
.88c4	60		rts				rts
.88c5					_SBBTString:
.88c5	06 36		asl $36				asl 	zTemp0
.88c7	26 37		rol $37				rol 	zTemp0+1
.88c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.88ca					EndCommand:
.88ca	4c 14 87	jmp $8714			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.88cd					ForCommand:
.88cd	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.88cf	20 e9 9d	jsr $9de9			jsr 	StackOpen
.88d2	a2 00		ldx #$00			ldx 	#0
.88d4	20 57 98	jsr $9857			jsr 	EvaluateTerm
.88d7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.88da	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.88dc	d0 49		bne $8927			bne		_FCError
.88de	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.88e0	20 c6 a4	jsr $a4c6			jsr 	CheckNextA
.88e3	e8		inx				inx
.88e4	20 ac 9c	jsr $9cac			jsr 	EvaluateInteger 			; <from> in +1
.88e7	b1 30		lda ($30),y			lda 	(codePtr),y
.88e9	c8		iny				iny 								; consume it
.88ea	48		pha				pha 								; save on stack for later
.88eb	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.88ed	f0 04		beq $88f3			beq 	_FCNoSyntax
.88ef	c9 b0		cmp #$b0			cmp 	#KWD_TO
.88f1	d0 37		bne $892a			bne 	_FCSyntaxError
.88f3					_FCNoSyntax:
.88f3	e8		inx				inx
.88f4	20 ac 9c	jsr $9cac			jsr 	EvaluateInteger
.88f7	20 2d 9e	jsr $9e2d			jsr 	STKSaveCodePosition 		; save loop back position
.88fa	68		pla				pla 								; restore DOWNTO or TO
.88fb	5a		phy				phy 								; save Y on the stack
.88fc	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.88fe	f0 02		beq $8902			beq 	_FCNotDownTo
.8900	a9 02		lda #$02			lda 	#2
.8902					_FCNotDownTo:
.8902	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8903	a0 10		ldy #$10			ldy 	#16
.8905	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8907	a0 06		ldy #$06			ldy 	#6
.8909	ad 08 04	lda $0408			lda 	NSMantissa0
.890c	91 34		sta ($34),y			sta 	(basicStack),y
.890e	ad 10 04	lda $0410			lda 	NSMantissa1
.8911	c8		iny				iny
.8912	91 34		sta ($34),y			sta 	(basicStack),y
.8914	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8916	a2 01		ldx #$01			ldx 	#1
.8918	20 2d 89	jsr $892d			jsr 	FCIntegerToStack
.891b	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.891d	a2 02		ldx #$02			ldx 	#2
.891f	20 2d 89	jsr $892d			jsr 	FCIntegerToStack
.8922	20 4d 89	jsr $894d			jsr 	CopyIndexToReference
.8925	7a		ply				ply 								; restore position
.8926	60		rts				rts
.8927					_FCError:
.8927	4c a6 aa	jmp $aaa6			jmp 	TypeError
.892a					_FCSyntaxError:
.892a	4c 9c aa	jmp $aa9c			jmp 	SyntaxError
.892d					FCIntegerToStack:
.892d	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8930	10 03		bpl $8935			bpl	 	_FCNotNegative
.8932	20 ea 9c	jsr $9cea			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8935					_FCNotNegative:
.8935	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8938	91 34		sta ($34),y			sta 	(basicStack),y
.893a	c8		iny				iny
.893b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.893e	91 34		sta ($34),y			sta 	(basicStack),y
.8940	c8		iny				iny
.8941	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8944	91 34		sta ($34),y			sta 	(basicStack),y
.8946	c8		iny				iny
.8947	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.894a	91 34		sta ($34),y			sta 	(basicStack),y
.894c	60		rts				rts
.894d					CopyIndexToReference:
.894d	5a		phy				phy
.894e	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8950	38		sec				sec 								; (because we copy from offset 8)
.8951	b1 34		lda ($34),y			lda 	(basicStack),y
.8953	e9 08		sbc #$08			sbc 	#8
.8955	85 36		sta $36				sta 	zTemp0
.8957	c8		iny				iny
.8958	b1 34		lda ($34),y			lda 	(basicStack),y
.895a	e9 00		sbc #$00			sbc 	#0
.895c	85 37		sta $37				sta 	zTemp0+1
.895e	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8960	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8962	b1 34		lda ($34),y			lda 	(basicStack),y
.8964	0a		asl a				asl 	a 							; into carry
.8965	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8967	90 14		bcc $897d			bcc 	_CITRNormal
.8969	38		sec				sec
.896a					_CITRNegative:
.896a	a9 00		lda #$00			lda 	#0
.896c	f1 34		sbc ($34),y			sbc 	(basicStack),y
.896e	91 36		sta ($36),y			sta 	(zTemp0),y
.8970	c8		iny				iny
.8971	ca		dex				dex
.8972	d0 f6		bne $896a			bne 	_CITRNegative
.8974	88		dey				dey 								; look at MSB of mantissa
.8975	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8977	09 80		ora #$80			ora 	#$80
.8979	91 36		sta ($36),y			sta 	(zTemp0),y
.897b	7a		ply				ply
.897c	60		rts				rts
.897d					_CITRNormal:
.897d	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.897f	91 36		sta ($36),y			sta 	(zTemp0),y
.8981	c8		iny				iny
.8982	ca		dex				dex
.8983	d0 f8		bne $897d			bne 	_CITRNormal
.8985	7a		ply				ply 								; and exit.
.8986	60		rts				rts
.8987					NextCommand:
.8987	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8989	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.898b	20 15 9e	jsr $9e15			jsr 	StackCheckFrame
.898e	5a		phy				phy
.898f	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8991	b1 34		lda ($34),y			lda 	(basicStack),y
.8993	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8995	30 02		bmi $8999			bmi 	_NCStepNeg
.8997	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8999					_NCStepNeg:
.8999	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.899b	a2 04		ldx #$04			ldx 	#4 							; count to bump
.899d	18		clc				clc
.899e					_NCBump:
.899e	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.89a0	91 34		sta ($34),y			sta 	(basicStack),y
.89a2	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.89a4	c8		iny				iny 								; next byte
.89a5	ca		dex				dex 								; do four times
.89a6	d0 f6		bne $899e			bne 	_NCBump
.89a8	20 4d 89	jsr $894d			jsr		CopyIndexToReference		; copy it to the reference variable.
.89ab	a0 10		ldy #$10			ldy 	#16 						; get step count again
.89ad	b1 34		lda ($34),y			lda 	(basicStack),y
.89af	0a		asl a				asl 	a 							; sign bit to carry
.89b0	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.89b2	85 38		sta $38				sta 	zTemp1
.89b4	90 02		bcc $89b8			bcc 	_NCCompRev 					; use if step is +ve
.89b6	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.89b8					_NCCompRev:
.89b8	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.89ba	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.89bc	85 39		sta $39				sta 	zTemp1+1
.89be	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.89c0	38		sec				sec
.89c1					_NCCompare:
.89c1	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.89c3	b1 34		lda ($34),y			lda 	(basicStack),y
.89c5	a4 39		ldy $39				ldy 	zTemp1+1
.89c7	f1 34		sbc ($34),y			sbc 	(basicStack),y
.89c9	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.89cb	e6 39		inc $39				inc 	zTemp1+1
.89cd	ca		dex				dex 								; do it 4 times.
.89ce	d0 f1		bne $89c1			bne 	_NCCompare
.89d0	50 02		bvc $89d4			bvc 	_NCNoOverflow 				; convert to signed comparison
.89d2	49 80		eor #$80			eor 	#$80
.89d4					_NCNoOverflow:
.89d4	7a		ply				ply 								; restore Y position
.89d5	0a		asl a				asl 	a 							; is bit 7 set.
.89d6	90 04		bcc $89dc			bcc 	_NCLoopback 				; if no , >= so loop back
.89d8	20 07 9e	jsr $9e07			jsr 	StackClose 					; exit the loop
.89db	60		rts				rts
.89dc					_NCLoopBack:
.89dc	20 3e 9e	jsr $9e3e			jsr 	STKLoadCodePosition 		; loop back
.89df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.89e0					Command_GOSUB:
.89e0	a2 00		ldx #$00			ldx 	#0
.89e2	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.89e5	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.89e7	20 e9 9d	jsr $9de9			jsr 	StackOpen 					; create frame
.89ea	20 2d 9e	jsr $9e2d			jsr 	STKSaveCodePosition 		; save current position
.89ed	4c 03 8a	jmp $8a03			jmp 	GotoStackX
.89f0					Command_RETURN:
.89f0	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.89f2	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.89f4	20 15 9e	jsr $9e15			jsr 	StackCheckFrame
.89f7	20 3e 9e	jsr $9e3e			jsr 	STKLoadCodePosition 		; restore code position
.89fa	20 07 9e	jsr $9e07			jsr 	StackClose
.89fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.89fe					GotoCommand:
.89fe	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a00	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger
.8a03					GotoStackX:
.8a03	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a06	48		pha				pha 								; it is slightly inefficient, just in cases.
.8a07	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8a0a	fa		plx				plx
.8a0b	20 94 9d	jsr $9d94			jsr 	MemorySearch 				; transfer to line number AX.
.8a0e	90 05		bcc $8a15			bcc 	_GotoError 					; not found, off end.
.8a10	d0 03		bne $8a15			bne 	_GotoError 					; not found exactly
.8a12	4c 3e 8d	jmp $8d3e			jmp 	RunNewLine 					; and go straight to new line code.
.8a15					_GotoError:
.8a15	a9 0d		lda #$0d		lda	#13
.8a17	4c 7d 91	jmp $917d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a1a					IfCommand:
.8a1a	a2 00		ldx #$00			ldx 	#0 							; If what.
.8a1c	20 89 9c	jsr $9c89			jsr 	EvaluateNumber
.8a1f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a21	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8a23	d0 0a		bne $8a2f			bne 	_IFStructured
.8a25	c8		iny				iny 								; consume THEN
.8a26	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; is it zero
.8a29	f0 01		beq $8a2c			beq 	_IfFail 					; if fail, go to next line
.8a2b	60		rts				rts 								; if THEN just continue
.8a2c					_IfFail:
.8a2c	4c a3 8d	jmp $8da3			jmp 	EOLCommand
.8a2f					_IfStructured:
.8a2f	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; is it zero
.8a32	d0 07		bne $8a3b			bne 	_IfExit 					; if not, then continue normally.
.8a34	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8a36	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8a38	20 ef 90	jsr $90ef			jsr 	ScanForward 				; and run from there/
.8a3b					_IfExit:
.8a3b	60		rts				rts
.8a3c					ElseCode:
.8a3c	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8a3e	aa		tax				tax 								; so just go to the structure exit
.8a3f	20 ef 90	jsr $90ef			jsr 	ScanForward
.8a42	60		rts				rts
.8a43					EndIf:
.8a43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8a44					LetCommand:
.8a44	a2 00		ldx #$00			ldx 	#0
.8a46	b1 30		lda ($30),y			lda 	(codePtr),y
.8a48	c9 10		cmp #$10			cmp 	#KWD_AT
.8a4a	d0 16		bne $8a62			bne 	_LCStandard
.8a4c	c8		iny				iny 								; skip equal
.8a4d	20 57 98	jsr $9857			jsr 	EvaluateTerm 				; get a number
.8a50	20 9b 96	jsr $969b			jsr 	Dereference 				; dereference it
.8a53	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8a56	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8a58	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8a5b	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8a5d	d0 10		bne $8a6f			bne 	_LCMain
.8a5f	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; was a reference before.
.8a62					_LCStandard:
.8a62	ad 6e 95	lda $956e			lda 	PrecedenceLevel+"*"			; precedence > this
.8a65	20 88 95	jsr $9588			jsr 	EvaluateExpressionAtPrecedence
.8a68	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8a6b	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8a6d	f0 0e		beq $8a7d			beq 	_LetGoProc 					; it's a procedure call.
.8a6f					_LCMain:
.8a6f	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8a71	20 c6 a4	jsr $a4c6			jsr 	CheckNextA
.8a74	e8		inx				inx 								; RHS
.8a75	20 80 9c	jsr $9c80			jsr 	EvaluateValue
.8a78	ca		dex				dex
.8a79	20 80 8a	jsr $8a80			jsr 	AssignVariable
.8a7c	60		rts				rts
.8a7d					_LetGoProc:
.8a7d	4c 19 8c	jmp $8c19			jmp 	CallProcedure
.8a80					AssignVariable:
.8a80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8a83	48		pha				pha 								; save a copy
.8a84	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8a87	29 10		and #$10			and 	#NSBIsString
.8a89	d0 0b		bne $8a96			bne 	_ASError
.8a8b	68		pla				pla 								; get back
.8a8c	29 10		and #$10			and 	#NSBIsString 				; check type
.8a8e	d0 03		bne $8a93			bne 	_ASString
.8a90	4c c3 95	jmp $95c3			jmp 	AssignNumber
.8a93					_ASString:
.8a93	4c 31 96	jmp $9631			jmp 	AssignString
.8a96					_ASError:
.8a96	4c a6 aa	jmp $aaa6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8a99					Command_List:
.8a99	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8a9c	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8a9f	a9 ff		lda #$ff			lda 	#$FF
.8aa1	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8aa4	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8aa7	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8aab	f0 1e		beq $8acb			beq 	_CLSecond
.8aad	20 29 8b	jsr $8b29			jsr 	CLIsDigit 					; if not digit, list all
.8ab0	b0 24		bcs $8ad6			bcs 	_CLStart
.8ab2	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8ab4	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger
.8ab7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8abb	f0 0e		beq $8acb			beq 	_CLSecond 					; if so go get it
.8abd	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8ac0	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8ac3	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8ac6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8ac9	80 0b		bra $8ad6			bra 	_CLStart
.8acb					_CLSecond:
.8acb	c8		iny				iny 								; consume comma
.8acc	20 29 8b	jsr $8b29			jsr 	CLIsDigit 					; digit found
.8acf	b0 05		bcs $8ad6			bcs 	_CLStart 					; if not, continue listing
.8ad1	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8ad3	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger
.8ad6					_CLStart
.8ad6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ad8	85 30		sta $30				sta 	codePtr
.8ada	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8adc	85 31		sta $31				sta 	codePtr+1
.8ade					_CLLoop:
.8ade	20 80 ac	jsr $ac80			jsr 	EXTBreakCheck 				; break check
.8ae1	f0 30		beq $8b13			beq 	_CLExit
.8ae3	b2 30		lda ($30)			lda 	(codePtr)
.8ae5	f0 2c		beq $8b13			beq 	_CLExit
.8ae7	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8ae9	20 16 8b	jsr $8b16			jsr 	CLCompareLineNo
.8aec	90 18		bcc $8b06			bcc 	_CLNext
.8aee	a2 07		ldx #$07			ldx 	#7
.8af0	20 16 8b	jsr $8b16			jsr 	CLCompareLineNo
.8af3	f0 02		beq $8af7			beq 	_CLDoThisOne
.8af5	b0 0f		bcs $8b06			bcs 	_CLNext
.8af7					_CLDoThisOne:
.8af7	20 4b 8f	jsr $8f4b			jsr 	ListConvertLine 			; convert line into token Buffer
.8afa	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8afc	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8afe	20 d6 91	jsr $91d6			jsr 	PrintStringXA
.8b01	a9 0d		lda #$0d			lda 	#13 						; new line
.8b03	20 3f ac	jsr $ac3f			jsr 	EXTPrintCharacter
.8b06					_CLNext:
.8b06	18		clc				clc
.8b07	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b09	65 30		adc $30				adc 	codePtr
.8b0b	85 30		sta $30				sta 	codePtr
.8b0d	90 02		bcc $8b11			bcc 	_CREExit
.8b0f	e6 31		inc $31				inc 	codePtr+1
.8b11					_CREExit:
.8b11	80 cb		bra $8ade			bra 	_CLLoop
.8b13					_CLExit:
.8b13	4c 14 87	jmp $8714			jmp 	WarmStart
.8b16					CLCompareLineNo:
.8b16	38		sec				sec
.8b17	a0 01		ldy #$01			ldy 	#1
.8b19	b1 30		lda ($30),y			lda 	(codePtr),y
.8b1b	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8b1e	85 36		sta $36				sta 	zTemp0
.8b20	c8		iny				iny
.8b21	b1 30		lda ($30),y			lda 	(codePtr),y
.8b23	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8b26	05 36		ora $36				ora 	zTemp0
.8b28	60		rts				rts
.8b29					CLIsDigit:
.8b29	b1 30		lda ($30),y			lda 	(codePtr),y
.8b2b	c9 30		cmp #$30			cmp 	#"0"
.8b2d	90 03		bcc $8b32			bcc	 	_CLIDExitFalse
.8b2f	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b31	60		rts				rts
.8b32					_CLIDExitFalse:
.8b32	38		sec				sec
.8b33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8b34					Command_LOCAL:
.8b34	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8b36	20 42 8b	jsr $8b42			jsr 	LocaliseNextTerm 			; convert term to a local.
.8b39	b1 30		lda ($30),y			lda 	(codePtr),y
.8b3b	c8		iny				iny
.8b3c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b3e	f0 f4		beq $8b34			beq 	Command_LOCAL
.8b40	88		dey				dey 								; unpick pre-get
.8b41	60		rts				rts
.8b42					LocaliseNextTerm:
.8b42	20 57 98	jsr $9857			jsr 	EvaluateTerm 				; evaluate the term
.8b45	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8b48	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8b4a	f0 69		beq $8bb5			beq		_LNTError
.8b4c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8b4f	85 36		sta $36				sta 	zTemp0
.8b51	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b54	85 37		sta $37				sta  	zTemp0+1
.8b56	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8b59	29 10		and #$10			and 	#NSBIsString
.8b5b	d0 22		bne $8b7f			bne 	_LNTPushString
.8b5d	5a		phy				phy
.8b5e	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8b60					_LNTPushNumLoop:
.8b60	b1 36		lda ($36),y			lda		(zTemp0),y
.8b62	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8b65	a9 00		lda #$00			lda 	#0
.8b67	91 36		sta ($36),y			sta 	(zTemp0),y
.8b69	c8		iny				iny
.8b6a	c0 05		cpy #$05			cpy 	#5
.8b6c	d0 f2		bne $8b60			bne 	_LNTPushNumLoop
.8b6e	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8b70	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8b73	a5 37		lda $37				lda 	zTemp0+1
.8b75	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8b78	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8b7a	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8b7d	7a		ply				ply
.8b7e	60		rts				rts
.8b7f					_LNTPushString:
.8b7f	5a		phy				phy
.8b80	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8b82	85 38		sta $38				sta 	zTemp1
.8b84	a0 01		ldy #$01			ldy 	#1
.8b86	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b88	85 39		sta $39				sta 	zTemp1+1
.8b8a	a0 00		ldy #$00			ldy 	#0 							; output string
.8b8c	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8b8e	f0 0a		beq $8b9a			beq 	_LNTStringOut
.8b90					_LNTPushStrLoop:
.8b90	b1 38		lda ($38),y			lda 	(zTemp1),y
.8b92	f0 06		beq $8b9a			beq 	_LNTStringOut
.8b94	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8b97	c8		iny				iny
.8b98	80 f6		bra $8b90			bra 	_LNTPushStrLoop
.8b9a					_LNTStringOut:
.8b9a	98		tya				tya									; output length
.8b9b	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8b9e	a9 00		lda #$00			lda 	#0 							; clear original string.
.8ba0	92 38		sta ($38)			sta 	(zTemp1)
.8ba2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8ba5	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8ba8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8bab	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8bae	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8bb0	20 c7 9d	jsr $9dc7			jsr 	StackPushByte
.8bb3	7a		ply				ply
.8bb4	60		rts				rts
.8bb5					_LNTError:
.8bb5	4c 9c aa	jmp $aa9c			jmp 	SyntaxError
.a45d					LocalPopValue:
.a45d	20 e0 9d	jsr $9de0			jsr 	StackPopByte
.a460	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a462	d0 17		bne $a47b			bne 	_LPVString
.a464	20 e0 9d	jsr $9de0			jsr 	StackPopByte 				; address
.a467	85 37		sta $37				sta 	zTemp0+1
.a469	20 e0 9d	jsr $9de0			jsr 	StackPopByte
.a46c	85 36		sta $36				sta 	zTemp0
.a46e	5a		phy				phy
.a46f	a0 04		ldy #$04			ldy 	#4 							; copy back
.a471					_LPVNumberCopy:
.a471	20 e0 9d	jsr $9de0			jsr 	StackPopByte
.a474	91 36		sta ($36),y			sta 	(zTemp0),y
.a476	88		dey				dey
.a477	10 f8		bpl $a471			bpl 	_LPVNumberCopy
.a479	7a		ply				ply 								; and complete
.a47a	60		rts				rts
.a47b					_LPVString:
.a47b	20 e0 9d	jsr $9de0			jsr 	StackPopByte 				; address of record => zTemp0
.a47e	85 37		sta $37				sta 	zTemp0+1
.a480	20 e0 9d	jsr $9de0			jsr 	StackPopByte
.a483	85 36		sta $36				sta 	zTemp0
.a485	5a		phy				phy
.a486	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a488	85 38		sta $38				sta 	zTemp1
.a48a	a0 01		ldy #$01			ldy 	#1
.a48c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a48e	85 39		sta $39				sta 	zTemp1+1
.a490	20 e0 9d	jsr $9de0			jsr 	StackPopByte 				; # to get => y
.a493	a8		tay				tay
.a494	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a496	f0 0e		beq $a4a6			beq 	_LPVStringCopied
.a498	a9 00		lda #$00			lda 	#0 							; NULL on end
.a49a	91 38		sta ($38),y			sta 	(zTemp1),y
.a49c					_LPVStringCopy:
.a49c	88		dey				dey
.a49d	30 07		bmi $a4a6			bmi 	_LPVStringCopied
.a49f	20 e0 9d	jsr $9de0			jsr 	StackPopByte
.a4a2	91 38		sta ($38),y			sta 	(zTemp1),y
.a4a4	80 f6		bra $a49c			bra 	_LPVStringCopy
.a4a6					_LPVStringCopied:
.a4a6	fa		plx				plx
.a4a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8bb8					NewCommand:
.8bb8	20 72 9d	jsr $9d72			jsr 	MemoryNew
.8bbb	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8bbe	20 ad 87	jsr $87ad			jsr 	ClearCommand 				; clear everything.
.8bc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8bc2					Command_Print:
.8bc2	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8bc3					_CPLoop:
.8bc3	08		php				php 								; save last action flag
.8bc4	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc6	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8bc8	f0 46		beq $8c10			beq 	_CPExit
.8bca	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8bcc	f0 42		beq $8c10			beq 	_CPExit
.8bce	68		pla				pla 								; throw last action flag
.8bcf	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd1	c8		iny				iny
.8bd2	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8bd4	f0 37		beq $8c0d			beq 	_CPContinueWithSameLine
.8bd6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8bd8	f0 2e		beq $8c08			beq 	_CPTab
.8bda	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8bdc	f0 26		beq $8c04			beq 	_CPNewLine
.8bde	88		dey				dey 								; undo the get.
.8bdf	a2 00		ldx #$00			ldx 	#0
.8be1	20 80 9c	jsr $9c80			jsr 	EvaluateValue 				; get a value into slot 0
.8be4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8be7	29 10		and #$10			and 	#NSBIsString
.8be9	f0 0b		beq $8bf6			beq 	_CPNumber
.8beb	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8bee	ad 08 04	lda $0408			lda 	NSMantissa0
.8bf1	20 d6 91	jsr $91d6			jsr 	PrintStringXA
.8bf4	80 cc		bra $8bc2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8bf6					_CPNumber:
.8bf6	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8bf8	20 56 9b	jsr $9b56			jsr 	ConvertNumberToString 		; convert to string
.8bfb	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8bfd	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8bff	20 d6 91	jsr $91d6			jsr 	PrintStringXA
.8c02	80 be		bra $8bc2			bra 	Command_Print 				; loop round clearing carry so NL if end
.8c04					_CPNewLine:
.8c04	a9 0d		lda #$0d			lda 	#13
.8c06	80 02		bra $8c0a			bra 	_CPPrintChar
.8c08					_CPTab:
.8c08	a9 09		lda #$09			lda 	#9 							; print TAB
.8c0a					_CPPrintChar:
.8c0a	20 3f ac	jsr $ac3f			jsr 	EXTPrintCharacter
.8c0d					_CPContinueWithSameLine:
.8c0d	38		sec				sec 								; loop round with carry set, which
.8c0e	80 b3		bra $8bc3			bra 	_CPLoop 					; will inhibit final CR
.8c10					_CPExit:
.8c10	28		plp				plp 								; get last action flag
.8c11	b0 05		bcs $8c18			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8c13	a9 0d		lda #$0d			lda 	#13 						; print new line
.8c15	20 3f ac	jsr $ac3f			jsr 	EXTPrintCharacter
.8c18					_CPExit2:
.8c18	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8c19					CallProcedure:
.8c19	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8c1b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c1d	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8c1f	f0 0c		beq $8c2d			beq 	_CPEndParam
.8c21					_CPParamLoop:
.8c21	20 86 95	jsr $9586			jsr 	EvaluateExpression 			; get parameter onto stack
.8c24	e8		inx				inx 								; bump next stack
.8c25	b1 30		lda ($30),y			lda 	(codePtr),y
.8c27	c8		iny				iny
.8c28	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8c2a	f0 f5		beq $8c21			beq 	_CPParamLoop
.8c2c	88		dey				dey 								; unpick.
.8c2d					_CPEndParam:
.8c2d	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8c30	c8		iny				iny									; skip right bracket
.8c31	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8c33	20 e9 9d	jsr $9de9			jsr 	StackOpen
.8c36	20 2d 9e	jsr $9e2d			jsr 	STKSaveCodePosition 		; save loop position
.8c39	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8c3c	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8c3e	ad 10 04	lda $0410			lda 	NSMantissa1
.8c41	85 37		sta $37				sta 	zTemp0+1
.8c43	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8c45	b2 36		lda ($36)			lda 	(zTemp0)
.8c47	85 30		sta $30				sta 	safePtr
.8c49	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c4b	85 31		sta $31				sta 	safePtr+1
.8c4d	c8		iny				iny
.8c4e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c50	85 32		sta $32				sta 	safePtr+2
.8c52	c8		iny				iny
.8c53	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c55	85 33		sta $33				sta 	safePtr+3
.8c57	c8		iny				iny 								; get Y offset -> Y
.8c58	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c5a	a8		tay				tay
.8c5b	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8c5d	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8c60	f0 13		beq $8c75			beq 	_ParamExit 					; if so, exit.
.8c62					_ParamExtract:
.8c62	ca		dex				dex 								; put a local term on the level before
.8c63	20 42 8b	jsr $8b42			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8c66	20 80 8a	jsr $8a80			jsr 	AssignVariable 				; assign stacked value to the variable.
.8c69	e8		inx				inx 								; advance to next parameter to do.
.8c6a	e8		inx				inx
.8c6b	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8c6e	f0 05		beq $8c75			beq 	_ParamExit
.8c70	20 be a4	jsr $a4be			jsr 	CheckComma 					; comma seperating parameters
.8c73	80 ed		bra $8c62			bra 	_ParamExtract
.8c75					_ParamExit:
.8c75	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 			; check )
.8c78	60		rts				rts 								; and continue from here
.a4a8					Command_ENDPROC:
.a4a8	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a4aa	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a4ac	20 15 9e	jsr $9e15			jsr 	StackCheckFrame
.a4af	20 3e 9e	jsr $9e3e			jsr 	STKLoadCodePosition 		; restore code position
.a4b2	20 07 9e	jsr $9e07			jsr 	StackClose
.a4b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8c79					Command_Read:
.8c79	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8c7b	20 57 98	jsr $9857			jsr 	EvaluateTerm
.8c7e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8c81	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8c83	f0 4a		beq $8ccf			beq 	_CRSyntax 					; check reference (bit 0)
.8c85	20 18 8d	jsr $8d18			jsr 	SwapDataCodePtrs 			; swap code and data
.8c88	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8c8b	d0 20		bne $8cad			bne 	_CRContinueData
.8c8d					_CRKeepSearching:
.8c8d	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8c8f	aa		tax				tax
.8c90	20 ef 90	jsr $90ef			jsr 	ScanForward
.8c93	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8c95	f0 16		beq $8cad			beq 	_CRHaveData 				; found it
.8c97	18		clc				clc
.8c98	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c9a	65 30		adc $30				adc 	codePtr
.8c9c	85 30		sta $30				sta 	codePtr
.8c9e	90 02		bcc $8ca2			bcc 	_CREExit
.8ca0	e6 31		inc $31				inc 	codePtr+1
.8ca2					_CREExit:
.8ca2	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ca4	b2 30		lda ($30)			lda 	(codePtr)
.8ca6	d0 e5		bne $8c8d			bne 	_CRKeepSearching
.8ca8	a9 0b		lda #$0b		lda	#11
.8caa	4c 7d 91	jmp $917d		jmp	ErrorHandler
.8cad					_CRHaveData:
.8cad					_CRContinueData:
.8cad	a2 01		ldx #$01			ldx 	#1
.8caf	20 80 9c	jsr $9c80			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8cb2	ca		dex				dex
.8cb3	20 80 8a	jsr $8a80			jsr		AssignVariable 				; do the assignment
.8cb6	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8cb9	b1 30		lda ($30),y			lda 	(codePtr),y
.8cbb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8cbd	d0 04		bne $8cc3			bne 	_CRSwapBack
.8cbf	c8		iny				iny 								; consume comma
.8cc0	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8cc3					_CRSwapBack:
.8cc3	20 18 8d	jsr $8d18			jsr 	SwapDataCodePtrs			; swap them back.
.8cc6	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc8	c8		iny				iny
.8cc9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ccb	f0 ac		beq $8c79			beq 	Command_Read 				; if so go round again.
.8ccd	88		dey				dey 								; unpick get.
.8cce	60		rts				rts
.8ccf					_CRSyntax:
.8ccf	4c 9c aa	jmp $aa9c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8cd2					RemCommand:
.8cd2	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8cd6	d0 06		bne $8cde			bne 	_RMExit
.8cd8	c8		iny				iny
.8cd9	98		tya				tya
.8cda	38		sec				sec
.8cdb	71 30		adc ($30),y			adc 	(codePtr),y
.8cdd	a8		tay				tay
.8cde					_RMExit:
.8cde	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8cdf					Command_REPEAT:
.8cdf	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ce1	20 e9 9d	jsr $9de9			jsr 	StackOpen
.8ce4	20 2d 9e	jsr $9e2d			jsr 	STKSaveCodePosition 		; save loop position
.8ce7	60		rts				rts
.8ce8					Command_UNTIL:
.8ce8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8cea	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8cec	20 15 9e	jsr $9e15			jsr 	StackCheckFrame
.8cef	a2 00		ldx #$00			ldx 	#0
.8cf1	20 89 9c	jsr $9c89			jsr 	EvaluateNumber 				; work out the number
.8cf4	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; check if zero
.8cf7	f0 04		beq $8cfd			beq 	_CULoopBack 				; if so keep looping
.8cf9	20 07 9e	jsr $9e07			jsr 	StackClose		 			; return
.8cfc	60		rts				rts
.8cfd					_CULoopBack:
.8cfd	20 3e 9e	jsr $9e3e			jsr 	STKLoadCodePosition 		; loop back
.8d00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8d01					Command_Restore:
.8d01	20 18 8d	jsr $8d18			jsr 	SwapDataCodePtrs 			; swap code and data
.8d04	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d06	85 30		sta $30				sta 	codePtr
.8d08	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d0a	85 31		sta $31				sta 	codePtr+1
.8d0c	20 18 8d	jsr $8d18			jsr 	SwapDataCodePtrs 			; put them back
.8d0f	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8d11	8d 9b 04	sta $049b			sta 	dataPointer+4
.8d14	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8d17	60		rts				rts
.8d18					SwapDataCodePtrs:
.8d18	da		phx				phx
.8d19	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8d1b					_SDCPLoop:
.8d1b	b5 30		lda $30,x			lda 	safePtr,x
.8d1d	48		pha				pha
.8d1e	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8d21	95 30		sta $30,x			sta 	safePtr,x
.8d23	68		pla				pla
.8d24	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8d27	ca		dex				dex
.8d28	10 f1		bpl $8d1b			bpl 	_SDCPLoop
.8d2a	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8d2d	8c 9b 04	sty $049b			sty 	dataPointer+4
.8d30	a8		tay				tay
.8d31	fa		plx				plx
.8d32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8d33					CommandRUN:
.8d33	20 ad 87	jsr $87ad			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8d36	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d38	85 30		sta $30				sta 	codePtr
.8d3a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d3c	85 31		sta $31				sta 	codePtr+1
.8d3e					RUNNewLine:
.8d3e	b2 30		lda ($30)			lda 	(codePtr)
.8d40	f0 5e		beq $8da0			beq 	CRNoProgram         		; no then END.
.8d42	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8d44	9a		txs				txs
.8d45					RUNCodePointerLine:
.8d45	a0 02		ldy #$02			ldy 	#2 							; start of program
.8d47					_CRIncMainLoop:
.8d47	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8d4a	d0 05		bne $8d51			bne 	_CRNoBreakCheck
.8d4c	20 80 ac	jsr $ac80			jsr 	EXTBreakCheck 				; break check
.8d4f	f0 4a		beq $8d9b			beq 	_CRBreak
.8d51					_CRNoBreakCheck:
.8d51	c8		iny				iny
.8d52					_CRMainLoop:
.8d52	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8d55	b1 30		lda ($30),y			lda 	(codePtr),y
.8d57	10 10		bpl $8d69			bpl 	_CRNotKeyword
.8d59	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8d5b	b0 04		bcs $8d61			bcs 	_CRIsKeyword
.8d5d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8d5f	b0 34		bcs $8d95			bcs		_CRSyntaxError
.8d61					_CRIsKeyword:
.8d61	c8		iny				iny 								; consume command
.8d62	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8d63	aa		tax				tax 								; put in X for vector jump
.8d64	20 98 8d	jsr $8d98			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8d67	80 e9		bra $8d52			bra 	_CRMainLoop 				; and loop round
.8d69					_CRNotKeyword:
.8d69	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8d6b	f0 da		beq $8d47			beq 	_CRIncMainLoop
.8d6d	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8d6f	90 05		bcc $8d76			bcc 	_CRNotVariable
.8d71					_CRGoLet:
.8d71	20 44 8a	jsr $8a44			jsr 	LetCommand
.8d74	80 dc		bra $8d52			bra 	_CRMainLoop
.8d76					_CRNotVariable:
.8d76	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8d78	f0 f7		beq $8d71			beq 	_CRGoLet
.8d7a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8d7c	f0 f3		beq $8d71			beq 	_CRGoLet
.8d7e	c9 21		cmp #$21			cmp 	#KWD_PLING
.8d80	f0 ef		beq $8d71			beq 	_CRGoLet
.8d82	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8d84	f0 09		beq $8d8f			beq 	_CRGoRem
.8d86	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8d88	d0 0b		bne $8d95			bne 	_CRSyntaxError
.8d8a	20 4d 86	jsr $864d			jsr 	LabelHere
.8d8d	80 c3		bra $8d52			bra 	_CRMainLoop
.8d8f					_CRGoRem:
.8d8f	c8		iny				iny
.8d90	20 d2 8c	jsr $8cd2			jsr 	RemCommand
.8d93	80 bd		bra $8d52			bra 	_CRMainLoop
.8d95					_CRSyntaxError:
.8d95	4c 9c aa	jmp $aa9c			jmp 	SyntaxError
.8d98					_CRCallVector0:
.8d98	7c 44 8e	jmp ($8e44,x)			jmp 	(VectorSet0,x)
.8d9b					_CRBreak:
.8d9b	a9 01		lda #$01		lda	#1
.8d9d	4c 7d 91	jmp $917d		jmp	ErrorHandler
.8da0					CRNoProgram:
.8da0	4c ca 88	jmp $88ca			jmp 	EndCommand
.8da3					EOLCommand:
.8da3	18		clc				clc
.8da4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8da6	65 30		adc $30				adc 	codePtr
.8da8	85 30		sta $30				sta 	codePtr
.8daa	90 02		bcc $8dae			bcc 	_CREExit
.8dac	e6 31		inc $31				inc 	codePtr+1
.8dae					_CREExit:
.8dae	80 8e		bra $8d3e			bra 	RunNewLine
.8db0					Shift1Command:
.8db0	b1 30		lda ($30),y			lda 	(codePtr),y
.8db2	c8		iny				iny
.8db3	0a		asl a				asl 	a
.8db4	aa		tax				tax
.8db5	7c a6 8e	jmp ($8ea6,x)			jmp 	(VectorSet1,x)
.8db8					Shift2Command:
.8db8	b1 30		lda ($30),y			lda 	(codePtr),y
.8dba	c8		iny				iny
.8dbb	0a		asl a				asl 	a
.8dbc	aa		tax				tax
.8dbd	7c be 8e	jmp ($8ebe,x)			jmp 	(VectorSet2,x)
.8dc0					Unused1:
.8dc0					Unused2:
.8dc0					Unused3:
.8dc0					Unused4:
.8dc0	4c 9c aa	jmp $aa9c			jmp 	SyntaxError
>8dc3							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8dc4					VectorSetPunc:
>8dc4	27 93					.word	ShiftLeft                        ; $00 <<
>8dc6	21 92					.word	BinaryCompareLessEqual           ; $01 <=
>8dc8	17 92					.word	BinaryCompareNotEqual            ; $02 <>
>8dca	9c aa					.word	SyntaxError                      ; $03 !!3
>8dcc	9c aa					.word	SyntaxError                      ; $04 ><
>8dce	2b 92					.word	BinaryCompareGreaterEqual        ; $05 >=
>8dd0	2a 93					.word	ShiftRight                       ; $06 >>
>8dd2	9c aa					.word	SyntaxError                      ; $07 !!7
>8dd4	9c aa					.word	SyntaxError                      ; $08 !!8
>8dd6	9c aa					.word	SyntaxError                      ; $09 !!9
>8dd8	9c aa					.word	SyntaxError                      ; $0a !!10
>8dda	9c aa					.word	SyntaxError                      ; $0b !!11
>8ddc	9c aa					.word	SyntaxError                      ; $0c !!12
>8dde	9c aa					.word	SyntaxError                      ; $0d !!13
>8de0	9c aa					.word	SyntaxError                      ; $0e !!14
>8de2	9c aa					.word	SyntaxError                      ; $0f !!15
>8de4	9c aa					.word	SyntaxError                      ; $10 @
>8de6	9c aa					.word	SyntaxError                      ; $11 !!17
>8de8	9c aa					.word	SyntaxError                      ; $12 !!18
>8dea	9c aa					.word	SyntaxError                      ; $13 [
>8dec	cf a4					.word	IntegerDivide                    ; $14 \
>8dee	9c aa					.word	SyntaxError                      ; $15 ]
>8df0	b0 94					.word	EorInteger                       ; $16 ^
>8df2	9c aa					.word	SyntaxError                      ; $17 _
>8df4	9c aa					.word	SyntaxError                      ; $18 `
>8df6	9c aa					.word	SyntaxError                      ; $19 !!25
>8df8	9c aa					.word	SyntaxError                      ; $1a !!26
>8dfa	9c aa					.word	SyntaxError                      ; $1b {
>8dfc	6a 94					.word	OraInteger                       ; $1c |
>8dfe	9c aa					.word	SyntaxError                      ; $1d }
>8e00	9c aa					.word	SyntaxError                      ; $1e ~
>8e02	9c aa					.word	SyntaxError                      ; $1f [7m<7F>[m
>8e04	9c aa					.word	SyntaxError                      ; $20
>8e06	f6 94					.word	WordIndirect                     ; $21 !
>8e08	9c aa					.word	SyntaxError                      ; $22 "
>8e0a	9c aa					.word	SyntaxError                      ; $23 #
>8e0c	9c aa					.word	SyntaxError                      ; $24 $
>8e0e	1c a5					.word	IntegerModulus                   ; $25 %
>8e10	24 94					.word	AndInteger                       ; $26 &
>8e12	9c aa					.word	SyntaxError                      ; $27 '
>8e14	9c aa					.word	SyntaxError                      ; $28 (
>8e16	9c aa					.word	SyntaxError                      ; $29 )
>8e18	91 a5					.word	MulInteger                       ; $2a *
>8e1a	be 93					.word	AddInteger                       ; $2b +
>8e1c	9c aa					.word	SyntaxError                      ; $2c ,
>8e1e	f9 93					.word	SubInteger                       ; $2d -
>8e20	9c aa					.word	SyntaxError                      ; $2e .
>8e22	28 a7					.word	FDivideCommand                   ; $2f /
>8e24	9c aa					.word	SyntaxError                      ; $30 0
>8e26	9c aa					.word	SyntaxError                      ; $31 1
>8e28	9c aa					.word	SyntaxError                      ; $32 2
>8e2a	9c aa					.word	SyntaxError                      ; $33 3
>8e2c	9c aa					.word	SyntaxError                      ; $34 4
>8e2e	9c aa					.word	SyntaxError                      ; $35 5
>8e30	9c aa					.word	SyntaxError                      ; $36 6
>8e32	9c aa					.word	SyntaxError                      ; $37 7
>8e34	9c aa					.word	SyntaxError                      ; $38 8
>8e36	9c aa					.word	SyntaxError                      ; $39 9
>8e38	9c aa					.word	SyntaxError                      ; $3a :
>8e3a	9c aa					.word	SyntaxError                      ; $3b ;
>8e3c	03 92					.word	BinaryCompareLess                ; $3c <
>8e3e	f9 91					.word	BinaryCompareEqual               ; $3d =
>8e40	0d 92					.word	BinaryCompareGreater             ; $3e >
>8e42	1d 95					.word	ByteIndirect                     ; $3f ?
.8e44					VectorSet0:
>8e44	a3 8d					.word	EOLCommand                       ; $80 !0:EOF
>8e46	b0 8d					.word	Shift1Command                    ; $81 !1:SH1
>8e48	b8 8d					.word	Shift2Command                    ; $82 !2:SH2
>8e4a	6e a8					.word	AbsUnary                         ; $83 ABS(
>8e4c	e7 99					.word	AllocUnary                       ; $84 ALLOC(
>8e4e	7e a8					.word	AscUnary                         ; $85 ASC(
>8e50	07 9b					.word	ChrUnary                         ; $86 CHR$(
>8e52	f5 91					.word	UnaryFalse                       ; $87 FALSE
>8e54	8b a8					.word	FracUnary                        ; $88 FRAC(
>8e56	a1 a8					.word	IntUnary                         ; $89 INT(
>8e58	f7 a8					.word	IsValUnary                       ; $8a ISVAL(
>8e5a	e1 9b					.word	Unary_Left                       ; $8b LEFT$(
>8e5c	b3 a8					.word	LenUnary                         ; $8c LEN(
>8e5e	0b 9c					.word	Unary_Mid                        ; $8d MID$(
>8e60	57 9a					.word	Unary_Not                        ; $8e NOT(
>8e62	6d 9a					.word	Unary_Random                     ; $8f RANDOM(
>8e64	f1 9b					.word	Unary_Right                      ; $90 RIGHT$(
>8e66	86 9a					.word	Unary_Rnd                        ; $91 RND(
>8e68	cd a8					.word	SgnUnary                         ; $92 SGN(
>8e6a	19 9b					.word	SpcUnary                         ; $93 SPC(
>8e6c	34 9b					.word	Unary_Str                        ; $94 STR$(
>8e6e	e9 91					.word	UnaryTrue                        ; $95 TRUE
>8e70	ed a8					.word	ValUnary                         ; $96 VAL(
>8e72	cd 88					.word	ForCommand                       ; $97 FOR
>8e74	1a 8a					.word	IfCommand                        ; $98 IF
>8e76	c0 8d					.word	Unused1                          ; $99 PROC
>8e78	df 8c					.word	Command_REPEAT                   ; $9a REPEAT
>8e7a	4e 91					.word	Command_WHILE                    ; $9b WHILE
>8e7c	43 8a					.word	EndIf                            ; $9c ENDIF
>8e7e	a8 a4					.word	Command_ENDPROC                  ; $9d ENDPROC
>8e80	87 89					.word	NextCommand                      ; $9e NEXT
>8e82	c0 8d					.word	Unused4                          ; $9f THEN
>8e84	e8 8c					.word	Command_UNTIL                    ; $a0 UNTIL
>8e86	6f 91					.word	Command_WEND                     ; $a1 WEND
>8e88	73 87					.word	CallCommand                      ; $a2 CALL
>8e8a	9c aa					.word	SyntaxError                      ; $a3 CLS
>8e8c	05 88					.word	Command_Data                     ; $a4 DATA
>8e8e	0d 88					.word	DimCommand                       ; $a5 DIM
>8e90	c0 8d					.word	Unused3                          ; $a6 DOWNTO
>8e92	3c 8a					.word	ElseCode                         ; $a7 ELSE
>8e94	e0 89					.word	Command_GOSUB                    ; $a8 GOSUB
>8e96	fe 89					.word	GotoCommand                      ; $a9 GOTO
>8e98	44 8a					.word	LetCommand                       ; $aa LET
>8e9a	34 8b					.word	Command_LOCAL                    ; $ab LOCAL
>8e9c	c2 8b					.word	Command_Print                    ; $ac PRINT
>8e9e	79 8c					.word	Command_Read                     ; $ad READ
>8ea0	d2 8c					.word	RemCommand                       ; $ae REM
>8ea2	f0 89					.word	Command_RETURN                   ; $af RETURN
>8ea4	c0 8d					.word	Unused2                          ; $b0 TO
.8ea6					VectorSet1:
>8ea6	9c aa					.word	SyntaxError                      ; $80 !0:EOF
>8ea8	9c aa					.word	SyntaxError                      ; $81 !1:SH1
>8eaa	9c aa					.word	SyntaxError                      ; $82 !2:SH2
>8eac	44 87					.word	AssembleCommand                  ; $83 ASSEMBLE
>8eae	63 87					.word	AssertCommand                    ; $84 ASSERT
>8eb0	ad 87					.word	ClearCommand                     ; $85 CLEAR
>8eb2	ca 88					.word	EndCommand                       ; $86 END
>8eb4	99 8a					.word	Command_List                     ; $87 LIST
>8eb6	b8 8b					.word	NewCommand                       ; $88 NEW
>8eb8	01 8d					.word	Command_Restore                  ; $89 RESTORE
>8eba	33 8d					.word	CommandRUN                       ; $8a RUN
>8ebc	46 8f					.word	StopCommand                      ; $8b STOP
.8ebe					VectorSet2:
>8ebe	9c aa					.word	SyntaxError                      ; $80 !0:EOF
>8ec0	9c aa					.word	SyntaxError                      ; $81 !1:SH1
>8ec2	9c aa					.word	SyntaxError                      ; $82 !2:SH2
>8ec4	5b a9					.word	Assemble_adc                     ; $83 ADC
>8ec6	53 a9					.word	Assemble_and                     ; $84 AND
>8ec8	6f a9					.word	Assemble_asl                     ; $85 ASL
>8eca	d9 a9					.word	Assemble_bcc                     ; $86 BCC
>8ecc	dd a9					.word	Assemble_bcs                     ; $87 BCS
>8ece	e5 a9					.word	Assemble_beq                     ; $88 BEQ
>8ed0	9c a9					.word	Assemble_bit                     ; $89 BIT
>8ed2	cd a9					.word	Assemble_bmi                     ; $8a BMI
>8ed4	e1 a9					.word	Assemble_bne                     ; $8b BNE
>8ed6	c9 a9					.word	Assemble_bpl                     ; $8c BPL
>8ed8	e9 a9					.word	Assemble_bra                     ; $8d BRA
>8eda	ed a9					.word	Assemble_brk                     ; $8e BRK
>8edc	d1 a9					.word	Assemble_bvc                     ; $8f BVC
>8ede	d5 a9					.word	Assemble_bvs                     ; $90 BVS
>8ee0	f5 a9					.word	Assemble_clc                     ; $91 CLC
>8ee2	49 aa					.word	Assemble_cld                     ; $92 CLD
>8ee4	09 aa					.word	Assemble_cli                     ; $93 CLI
>8ee6	39 aa					.word	Assemble_clv                     ; $94 CLV
>8ee8	67 a9					.word	Assemble_cmp                     ; $95 CMP
>8eea	b0 a9					.word	Assemble_cpx                     ; $96 CPX
>8eec	ab a9					.word	Assemble_cpy                     ; $97 CPY
>8eee	8d a9					.word	Assemble_dec                     ; $98 DEC
>8ef0	45 aa					.word	Assemble_dex                     ; $99 DEX
>8ef2	21 aa					.word	Assemble_dey                     ; $9a DEY
>8ef4	57 a9					.word	Assemble_eor                     ; $9b EOR
>8ef6	92 a9					.word	Assemble_inc                     ; $9c INC
>8ef8	55 aa					.word	Assemble_inx                     ; $9d INX
>8efa	41 aa					.word	Assemble_iny                     ; $9e INY
>8efc	c4 a9					.word	Assemble_jmp                     ; $9f JMP
>8efe	bf a9					.word	Assemble_jsr                     ; $a0 JSR
>8f00	63 a9					.word	Assemble_lda                     ; $a1 LDA
>8f02	88 a9					.word	Assemble_ldx                     ; $a2 LDX
>8f04	a6 a9					.word	Assemble_ldy                     ; $a3 LDY
>8f06	79 a9					.word	Assemble_lsr                     ; $a4 LSR
>8f08	59 aa					.word	Assemble_nop                     ; $a5 NOP
>8f0a	4f a9					.word	Assemble_ora                     ; $a6 ORA
>8f0c	05 aa					.word	Assemble_pha                     ; $a7 PHA
>8f0e	f1 a9					.word	Assemble_php                     ; $a8 PHP
>8f10	4d aa					.word	Assemble_phx                     ; $a9 PHX
>8f12	0d aa					.word	Assemble_phy                     ; $aa PHY
>8f14	15 aa					.word	Assemble_pla                     ; $ab PLA
>8f16	f9 a9					.word	Assemble_plp                     ; $ac PLP
>8f18	61 aa					.word	Assemble_plx                     ; $ad PLX
>8f1a	1d aa					.word	Assemble_ply                     ; $ae PLY
>8f1c	74 a9					.word	Assemble_rol                     ; $af ROL
>8f1e	7e a9					.word	Assemble_ror                     ; $b0 ROR
>8f20	01 aa					.word	Assemble_rti                     ; $b1 RTI
>8f22	11 aa					.word	Assemble_rts                     ; $b2 RTS
>8f24	6b a9					.word	Assemble_sbc                     ; $b3 SBC
>8f26	fd a9					.word	Assemble_sec                     ; $b4 SEC
>8f28	5d aa					.word	Assemble_sed                     ; $b5 SED
>8f2a	19 aa					.word	Assemble_sei                     ; $b6 SEI
>8f2c	5f a9					.word	Assemble_sta                     ; $b7 STA
>8f2e	51 aa					.word	Assemble_stp                     ; $b8 STP
>8f30	83 a9					.word	Assemble_stx                     ; $b9 STX
>8f32	a1 a9					.word	Assemble_sty                     ; $ba STY
>8f34	97 a9					.word	Assemble_stz                     ; $bb STZ
>8f36	35 aa					.word	Assemble_tax                     ; $bc TAX
>8f38	31 aa					.word	Assemble_tay                     ; $bd TAY
>8f3a	ba a9					.word	Assemble_trb                     ; $be TRB
>8f3c	b5 a9					.word	Assemble_tsb                     ; $bf TSB
>8f3e	3d aa					.word	Assemble_tsx                     ; $c0 TSX
>8f40	25 aa					.word	Assemble_txa                     ; $c1 TXA
>8f42	2d aa					.word	Assemble_txs                     ; $c2 TXS
>8f44	29 aa					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8f46					StopCommand:
.8f46	a9 08		lda #$08		lda	#8
.8f48	4c 7d 91	jmp $917d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8f4b					ListConvertLine:
.8f4b	9c 9d 04	stz $049d			stz 	tbOffset
.8f4e	9c a9 04	stz $04a9			stz 	tokenBuffer
.8f51	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8f53	b1 30		lda ($30),y			lda 	(codePtr),y
.8f55	aa		tax				tax
.8f56	88		dey				dey
.8f57	b1 30		lda ($30),y			lda 	(codePtr),y
.8f59	20 12 a6	jsr $a612			jsr 	ConvertInt16
.8f5c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8f5e	86 37		stx $37				stx 	zTemp0+1
.8f60	a0 00		ldy #$00			ldy 	#0
.8f62					_LCCopyNumber:
.8f62	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f64	20 64 90	jsr $9064			jsr 	LCLWrite
.8f67	c8		iny				iny
.8f68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f6a	d0 f6		bne $8f62			bne 	_LCCopyNumber
.8f6c					_LCPadOut:
.8f6c	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8f6e	20 64 90	jsr $9064			jsr 	LCLWrite
.8f71	ad 9d 04	lda $049d			lda 	tbOffset
.8f74	c9 06		cmp #$06			cmp 	#6
.8f76	d0 f4		bne $8f6c			bne 	_LCPadOut
.8f78	a0 03		ldy #$03			ldy 	#3 							; start position.
.8f7a					_LCMainLoop:
.8f7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8f7c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8f7e	f0 17		beq $8f97			beq 	_LCExit
.8f80	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8f82	90 14		bcc $8f98			bcc 	_LCDoubles
.8f84	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8f86	90 20		bcc $8fa8			bcc 	_LCShiftPunc
.8f88	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8f8a	90 2b		bcc $8fb7			bcc 	_LCPunctuation
.8f8c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8f8e	90 2d		bcc $8fbd			bcc 	_LCIdentifiers
.8f90	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8f92	90 49		bcc $8fdd			bcc 	_LCTokens
.8f94	4c 38 90	jmp $9038			jmp 	_LCData 					; 254-5 are data objects
.8f97					_LCExit:
.8f97	60		rts				rts
.8f98					_LCDoubles:
.8f98	48		pha				pha
.8f99	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8f9a	29 02		and #$02			and 	#2
.8f9c	09 3c		ora #$3c			ora 	#60 						; make < >
.8f9e	20 64 90	jsr $9064			jsr 	LCLWrite
.8fa1	68		pla				pla 								; restore, do lower bit
.8fa2	29 03		and #$03			and 	#3
.8fa4	09 3c		ora #$3c			ora 	#60
.8fa6	80 0f		bra $8fb7			bra		_LCPunctuation 				; print, increment, loop
.8fa8					_LCShiftPunc:
.8fa8	aa		tax				tax 								; save in X
.8fa9	29 07		and #$07			and 	#7 							; lower 3 bits
.8fab	f0 02		beq $8faf			beq 	_LCNoAdd
.8fad	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8faf					_LCNoAdd:
.8faf	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8fb1	90 02		bcc $8fb5			bcc 	_LCNoAdd2
.8fb3	09 20		ora #$20			ora 	#32 						; adds $20
.8fb5					_LCNoAdd2:
.8fb5	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8fb7					_LCPunctuation:
.8fb7	c8		iny				iny 								; consume character
.8fb8	20 64 90	jsr $9064			jsr 	LCLWrite 					; write it out.
.8fbb	80 bd		bra $8f7a			bra 	_LCMainLoop 				; go round again.
.8fbd					_LCIdentifiers:
.8fbd	18		clc				clc 								; convert to physical address
.8fbe	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8fc0	85 37		sta $37				sta 	zTemp0+1
.8fc2	c8		iny				iny
.8fc3	b1 30		lda ($30),y			lda 	(codePtr),y
.8fc5	85 36		sta $36				sta 	zTemp0
.8fc7	c8		iny				iny
.8fc8	5a		phy				phy 								; save position
.8fc9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8fcb					_LCOutIdentifier:
.8fcb	c8		iny				iny
.8fcc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fce	29 7f		and #$7f			and 	#$7F
.8fd0	20 92 90	jsr $9092			jsr 	LCLLowerCase
.8fd3	20 64 90	jsr $9064			jsr 	LCLWrite
.8fd6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8fd8	10 f1		bpl $8fcb			bpl 	_LCOutIdentifier
.8fda	7a		ply				ply 								; restore position
.8fdb	80 9d		bra $8f7a			bra 	_LCMainLoop
.8fdd					_LCTokens:
.8fdd	aa		tax				tax 								; token in X
.8fde	a9 62		lda #$62			lda 	#((KeywordSet2) & $FF)
.8fe0	85 36		sta $36				sta 	0+zTemp0
.8fe2	a9 a0		lda #$a0			lda 	#((KeywordSet2) >> 8)
.8fe4	85 37		sta $37				sta 	1+zTemp0
.8fe6	e0 82		cpx #$82			cpx 	#$82
.8fe8	f0 16		beq $9000			beq 	_LCUseShift
.8fea	a9 1e		lda #$1e			lda 	#((KeywordSet1) & $FF)
.8fec	85 36		sta $36				sta 	0+zTemp0
.8fee	a9 a0		lda #$a0			lda 	#((KeywordSet1) >> 8)
.8ff0	85 37		sta $37				sta 	1+zTemp0
.8ff2	e0 81		cpx #$81			cpx 	#$81
.8ff4	f0 0a		beq $9000			beq 	_LCUseShift
.8ff6	a9 ec		lda #$ec			lda 	#((KeywordSet0) & $FF)
.8ff8	85 36		sta $36				sta 	0+zTemp0
.8ffa	a9 9e		lda #$9e			lda 	#((KeywordSet0) >> 8)
.8ffc	85 37		sta $37				sta 	1+zTemp0
.8ffe	80 01		bra $9001			bra 	_LCNoShift
.9000					_LCUseShift:
.9000	c8		iny				iny
.9001					_LCNoShift:
.9001	20 73 90	jsr $9073			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9004	b1 30		lda ($30),y			lda 	(codePtr),y
.9006	aa		tax				tax 								; into X
.9007					_LCFindText:
.9007	ca		dex				dex
.9008	10 0e		bpl $9018			bpl 	_LCFoundText 				; found text.
.900a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.900c	1a		inc a				inc 	a 							; one extra for size
.900d	38		sec				sec 								; one extra for checksum
.900e	65 36		adc $36				adc 	zTemp0 						; go to next token
.9010	85 36		sta $36				sta 	zTemp0
.9012	90 f3		bcc $9007			bcc 	_LCFindText
.9014	e6 37		inc $37				inc 	zTemp0+1
.9016	80 ef		bra $9007			bra 	_LCFindText
.9018					_LCFoundText:
.9018	5a		phy				phy 								; save List position
.9019	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.901b	aa		tax				tax
.901c	a0 02		ldy #$02			ldy 	#2
.901e					_LCCopyToken:
.901e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9020	20 92 90	jsr $9092			jsr 	LCLLowerCase
.9023	20 64 90	jsr $9064			jsr 	LCLWrite
.9026	c8		iny				iny
.9027	ca		dex				dex
.9028	d0 f4		bne $901e			bne 	_LCCopyToken
.902a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.902c	f0 05		beq $9033			beq 	_LCNoSpace
.902e	a9 20		lda #$20			lda 	#' '
.9030	20 64 90	jsr $9064			jsr 	LCLWrite
.9033					_LCNoSpace:
.9033	7a		ply				ply 								; restore position.
.9034	c8		iny				iny 								; consume token
.9035	4c 7a 8f	jmp $8f7a			jmp 	_LCMainLoop 				; and go around again.
.9038					_LCData:
.9038	48		pha				pha 								; save type $FE/$FF
.9039	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.903b	c9 fe		cmp #$fe			cmp 	#$FE
.903d	f0 02		beq $9041			beq 	_LCHaveOpener
.903f	a2 22		ldx #$22			ldx 	#'"'
.9041					_LCHaveOpener:
.9041	8a		txa				txa 								; output prefix (# or ")
.9042	20 64 90	jsr $9064			jsr 	LCLWrite
.9045	c8		iny				iny 								; get count
.9046	b1 30		lda ($30),y			lda 	(codePtr),y
.9048	aa		tax				tax
.9049	c8		iny				iny 								; point at first character
.904a					_LCOutData:
.904a	b1 30		lda ($30),y			lda 	(codePtr),y
.904c	c9 00		cmp #$00			cmp 	#0
.904e	f0 03		beq $9053			beq 	_LCNoPrint
.9050	20 64 90	jsr $9064			jsr 	LCLWrite
.9053					_LCNoPrint:
.9053	c8		iny				iny
.9054	ca		dex				dex
.9055	d0 f3		bne $904a			bne 	_LCOutData
.9057	68		pla				pla 								; closing " required ?
.9058	c9 ff		cmp #$ff			cmp 	#$FF
.905a	d0 05		bne $9061			bne 	_LCNoQuote
.905c	a9 22		lda #$22			lda 	#'"'
.905e	20 64 90	jsr $9064			jsr 	LCLWrite
.9061					_LCNoQuote:
.9061	4c 7a 8f	jmp $8f7a			jmp 	_LCMainLoop
.9064					LCLWrite:
.9064	da		phx				phx
.9065	ae 9d 04	ldx $049d			ldx 	tbOffset
.9068	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.906b	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.906e	ee 9d 04	inc $049d			inc 	tbOffset
.9071	fa		plx				plx
.9072	60		rts				rts
.9073					LCCheckSpaceRequired:
.9073	ae 9d 04	ldx $049d			ldx 	tbOffset
.9076	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9079	20 92 90	jsr $9092			jsr 	LCLLowerCase 				; saves a little effort
.907c	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.907e	90 11		bcc $9091			bcc 	_LCCSRExit
.9080	c9 3a		cmp #$3a			cmp 	#"9"+1
.9082	90 08		bcc $908c			bcc 	_LCCSRSpace
.9084	c9 61		cmp #$61			cmp 	#"a"
.9086	90 09		bcc $9091			bcc 	_LCCSRExit
.9088	c9 7b		cmp #$7b			cmp 	#"z"+1
.908a	b0 05		bcs $9091			bcs 	_LCCSRExit
.908c					_LCCSRSpace:
.908c	a9 20		lda #$20			lda 	#' '
.908e	20 64 90	jsr $9064			jsr 	LCLWrite
.9091					_LCCSRExit:
.9091	60		rts				rts
.9092					LCLLowerCase:
.9092	c9 41		cmp #$41			cmp 	#"A"
.9094	90 06		bcc $909c			bcc 	_LCLLCOut
.9096	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9098	b0 02		bcs $909c			bcs 	_LCLLCOut
.909a	69 20		adc #$20			adc 	#$20
.909c					_LCLLCOut:
.909c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.909d					ProcedureScan:
.909d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.909f	85 30		sta $30				sta 	codePtr
.90a1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90a3	85 31		sta $31				sta 	codePtr+1
.90a5					_PSLoop:
.90a5	b2 30		lda ($30)			lda 	(codePtr)
.90a7	f0 42		beq $90eb			beq 	_PSExit
.90a9	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.90ab	b1 30		lda ($30),y			lda 	(codePtr),y
.90ad	c9 99		cmp #$99			cmp 	#KWD_PROC
.90af	d0 2d		bne $90de			bne 	_PSNext
.90b1	c8		iny				iny 								; get the address of the record to zTemp0 and
.90b2	b1 30		lda ($30),y			lda 	(codePtr),y
.90b4	29 c0		and #$c0			and 	#$C0
.90b6	c9 40		cmp #$40			cmp 	#$40
.90b8	d0 32		bne $90ec			bne 	_PSSyntax
.90ba	b1 30		lda ($30),y			lda 	(codePtr),y
.90bc	18		clc				clc
.90bd	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.90bf	85 37		sta $37				sta 	zTemp0+1
.90c1	c8		iny				iny 								; LSB
.90c2	b1 30		lda ($30),y			lda 	(codePtr),y
.90c4	85 36		sta $36				sta 	zTemp0
.90c6	c8		iny				iny 								; character after variable call.
.90c7	98		tya				tya 								; save Y offset at +7
.90c8	a0 07		ldy #$07			ldy 	#7
.90ca	91 36		sta ($36),y			sta 	(zTemp0),y
.90cc	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.90ce	a0 02		ldy #$02			ldy 	#2
.90d0	91 36		sta ($36),y			sta 	(zTemp0),y
.90d2	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.90d4					_PSCopy:
.90d4	b5 30		lda $30,x			lda 	safePtr,x
.90d6	c8		iny				iny
.90d7	91 36		sta ($36),y			sta 	(zTemp0),y
.90d9	e8		inx				inx
.90da	e0 04		cpx #$04			cpx 	#4
.90dc	d0 f6		bne $90d4			bne 	_PSCopy
.90de					_PSNext:
.90de	18		clc				clc
.90df	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.90e1	65 30		adc $30				adc 	codePtr
.90e3	85 30		sta $30				sta 	codePtr
.90e5	90 02		bcc $90e9			bcc 	_CREExit
.90e7	e6 31		inc $31				inc 	codePtr+1
.90e9					_CREExit:
.90e9	80 ba		bra $90a5			bra 	_PSLoop
.90eb					_PSExit:
.90eb	60		rts				rts
.90ec					_PSSyntax:
.90ec	4c 9c aa	jmp $aa9c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.90ef					ScanForward:
.90ef	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.90f1	86 37		stx $37				stx 	zTemp0+1
.90f3	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.90f5					_ScanLoop:
.90f5	b1 30		lda ($30),y			lda 	(codePtr),y
.90f7	c8		iny				iny
.90f8	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.90fa	d0 0e		bne $910a			bne 	_ScanGoNext
.90fc	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.90fe	f0 04		beq $9104			beq 	_ScanMatch
.9100	c5 37		cmp $37				cmp 	zTemp0+1
.9102	d0 06		bne $910a			bne 	_ScanGoNext
.9104					_ScanMatch:
.9104	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9106	d0 01		bne $9109			bne 	_ScanNotEndEOL
.9108	88		dey				dey
.9109					_ScanNotEndEOL:
.9109	60		rts				rts
.910a					_ScanGoNext:
.910a	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.910c	90 e7		bcc $90f5			bcc 	_ScanLoop
.910e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9110	90 18		bcc $912a			bcc 	_ScanSkipOne
.9112	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9114	b0 2f		bcs $9145			bcs 	_ScanSkipData
.9116	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9118	90 db		bcc $90f5			bcc 	_ScanLoop 					; if not, ordinary keywords.
.911a	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.911c	b0 d7		bcs $90f5			bcs 	_ScanLoop
.911e	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9120	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9122	b0 d1		bcs $90f5			bcs 	_ScanLoop
.9124	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9126	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9128	80 cb		bra $90f5			bra 	_ScanLoop
.912a					_ScanSkipOne:
.912a	c8		iny				iny 								; consume the extra one.
.912b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.912d	d0 c6		bne $90f5			bne 	_ScanLoop
.912f	18		clc				clc
.9130	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9132	65 30		adc $30				adc 	codePtr
.9134	85 30		sta $30				sta 	codePtr
.9136	90 02		bcc $913a			bcc 	_CREExit
.9138	e6 31		inc $31				inc 	codePtr+1
.913a					_CREExit:
.913a	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.913c	b2 30		lda ($30)			lda 	(codePtr)
.913e	d0 b5		bne $90f5			bne 	_ScanLoop 					; if not zero, more to scan
.9140	a9 13		lda #$13		lda	#19
.9142	4c 7d 91	jmp $917d		jmp	ErrorHandler
.9145					_ScanSkipData:
.9145	88		dey				dey 								; point at data token
.9146	c8		iny				iny
.9147	98		tya				tya
.9148	38		sec				sec
.9149	71 30		adc ($30),y			adc 	(codePtr),y
.914b	a8		tay				tay
.914c	80 a7		bra $90f5			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.914e					Command_WHILE:
.914e	5a		phy				phy 								; save position of the test
.914f	a2 00		ldx #$00			ldx 	#0
.9151	20 89 9c	jsr $9c89			jsr 	EvaluateNumber 				; work out the number
.9154	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; check if zero
.9157	f0 0e		beq $9167			beq 	_WHExitLoop 				; if so exit the loop
.9159	98		tya				tya 								; position *after* test.
.915a	7a		ply				ply 								; restore position before test, at WHILE
.915b	88		dey				dey
.915c	48		pha				pha 								; push after test on the stack
.915d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.915f	20 e9 9d	jsr $9de9			jsr 	StackOpen
.9162	20 2d 9e	jsr $9e2d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9165	7a		ply				ply 								; restore the position *after* the test
.9166	60		rts				rts
.9167					_WHExitLoop:
.9167	68		pla				pla 								; throw post loop position
.9168	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.916a	aa		tax				tax
.916b	20 ef 90	jsr $90ef			jsr 	ScanForward
.916e	60		rts				rts
.916f					Command_WEND:
.916f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9171	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9173	20 15 9e	jsr $9e15			jsr 	StackCheckFrame
.9176	20 3e 9e	jsr $9e3e			jsr 	STKLoadCodePosition 		; loop back
.9179	20 07 9e	jsr $9e07			jsr 	StackClose		 			; erase the frame
.917c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a4b6					CheckRightBracket:
.a4b6	b1 30		lda ($30),y			lda 	(codePtr),y
.a4b8	c8		iny				iny
.a4b9	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a4bb	d0 0f		bne $a4cc			bne 	CNAFail
.a4bd	60		rts				rts
.a4be					CheckComma:
.a4be	b1 30		lda ($30),y			lda 	(codePtr),y
.a4c0	c8		iny				iny
.a4c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a4c3	d0 07		bne $a4cc			bne 	CNAFail
.a4c5	60		rts				rts
.a4c6					CheckNextA:
.a4c6	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a4c8	d0 02		bne $a4cc			bne 	CNAFail
.a4ca	c8		iny				iny 								; skip character
.a4cb	60		rts				rts 								; and exit
.a4cc					CNAFail:
.a4cc	4c 9c aa	jmp $aa9c			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.917d					ErrorHandler:
.917d	a8		tay				tay 								; find the error text
.917e	f0 49		beq $91c9			beq 	_EHEnd
.9180	a2 00		ldx #$00			ldx 	#0
.9182	a9 b5		lda #$b5			lda 	#((ErrorText) & $FF)
.9184	85 36		sta $36				sta 	0+zTemp0
.9186	a9 aa		lda #$aa			lda 	#((ErrorText) >> 8)
.9188	85 37		sta $37				sta 	1+zTemp0
.918a					_EHFind:
.918a	88		dey				dey 								; found the error text ?
.918b	f0 0e		beq $919b			beq 	_EHFound
.918d					_EHFindZero:
.918d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.918f	e6 36		inc $36				inc 	zTemp0
.9191	d0 02		bne $9195			bne 	_EHFNoCarry
.9193	e6 37		inc $37				inc 	zTemp0+1
.9195					_EHFNoCarry:
.9195	c9 00		cmp #$00			cmp 	#0
.9197	d0 f4		bne $918d			bne 	_EHFindZero
.9199	80 ef		bra $918a			bra 	_EHFind
.919b					_EHFound:
.919b	a5 36		lda $36				lda 	zTemp0 						; print message
.919d	a6 37		ldx $37				ldx 	zTemp0+1
.919f	20 d6 91	jsr $91d6			jsr 	PrintStringXA
.91a2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.91a4	b1 30		lda ($30),y			lda 	(codePtr),y
.91a6	d0 05		bne $91ad			bne 	_EHAtMsg
.91a8	c8		iny				iny
.91a9	b1 30		lda ($30),y			lda 	(codePtr),y
.91ab	f0 17		beq $91c4			beq 	_EHCREnd
.91ad					_EHAtMsg:
.91ad	a2 91		ldx #$91			ldx 	#_AtMsg >> 8 				; print " at "
.91af	a9 cc		lda #$cc			lda 	#_AtMsg & $FF
.91b1	20 d6 91	jsr $91d6			jsr 	PrintStringXA
.91b4	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.91b6	b1 30		lda ($30),y			lda 	(codePtr),y
.91b8	48		pha				pha
.91b9	c8		iny				iny
.91ba	b1 30		lda ($30),y			lda 	(codePtr),y
.91bc	aa		tax				tax
.91bd	68		pla				pla
.91be	20 12 a6	jsr $a612			jsr 	ConvertInt16 				; convert XA to string
.91c1	20 d6 91	jsr $91d6			jsr 	PrintStringXA 				; and print it.
.91c4					_EHCREnd:
.91c4	a9 0d		lda #$0d			lda 	#13 						; new line
.91c6	20 3f ac	jsr $ac3f			jsr 	EXTPrintCharacter
.91c9					_EHEnd:
.91c9	4c 14 87	jmp $8714			jmp 	WarmStart
>91cc	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>91d4	20 00
.91d6					PrintStringXA:
.91d6	5a		phy				phy
.91d7	86 37		stx $37				stx 	zTemp0+1
.91d9	85 36		sta $36				sta 	zTemp0
.91db	a0 00		ldy #$00			ldy 	#0
.91dd					_PSXALoop:
.91dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.91df	f0 06		beq $91e7			beq 	_PSXAExit
.91e1	20 3f ac	jsr $ac3f			jsr 	EXTPrintCharacter
.91e4	c8		iny				iny
.91e5	80 f6		bra $91dd			bra 	_PSXALoop
.91e7					_PSXAExit:
.91e7	7a		ply				ply
.91e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.91e9					UnaryTrue:
.91e9	fa		plx				plx
.91ea					ReturnTrue:
.91ea	a9 01		lda #$01			lda 	#1  						; set to 1
.91ec	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.91ef	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.91f1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91f4	60		rts				rts
.91f5					UnaryFalse:
.91f5	fa		plx				plx
.91f6					ReturnFalse:
.91f6	4c 35 9d	jmp $9d35			jmp 	NSMSetZero 					; set it all to zero
.91f9					BinaryCompareEqual:
.91f9	fa		plx				plx
.91fa	20 35 92	jsr $9235			jsr 	CompareBaseCode
.91fd	c9 00		cmp #$00			cmp 	#0
.91ff	f0 e9		beq $91ea			beq 	ReturnTrue
.9201	80 f3		bra $91f6			bra 	ReturnFalse
.9203					BinaryCompareLess:
.9203	fa		plx				plx
.9204	20 35 92	jsr $9235			jsr 	CompareBaseCode
.9207	c9 ff		cmp #$ff			cmp 	#$FF
.9209	f0 df		beq $91ea			beq 	ReturnTrue
.920b	80 e9		bra $91f6			bra 	ReturnFalse
.920d					BinaryCompareGreater:
.920d	fa		plx				plx
.920e	20 35 92	jsr $9235			jsr 	CompareBaseCode
.9211	c9 01		cmp #$01			cmp 	#1
.9213	f0 d5		beq $91ea			beq 	ReturnTrue
.9215	80 df		bra $91f6			bra 	ReturnFalse
.9217					BinaryCompareNotEqual:
.9217	fa		plx				plx
.9218	20 35 92	jsr $9235			jsr 	CompareBaseCode
.921b	c9 00		cmp #$00			cmp 	#0
.921d	d0 cb		bne $91ea			bne 	ReturnTrue
.921f	80 d5		bra $91f6			bra 	ReturnFalse
.9221					BinaryCompareLessEqual:
.9221	fa		plx				plx
.9222	20 35 92	jsr $9235			jsr 	CompareBaseCode
.9225	c9 01		cmp #$01			cmp 	#1
.9227	d0 c1		bne $91ea			bne 	ReturnTrue
.9229	80 cb		bra $91f6			bra 	ReturnFalse
.922b					BinaryCompareGreaterEqual:
.922b	fa		plx				plx
.922c	20 35 92	jsr $9235			jsr 	CompareBaseCode
.922f	c9 ff		cmp #$ff			cmp 	#$FF
.9231	d0 b7		bne $91ea			bne 	ReturnTrue
.9233	80 c1		bra $91f6			bra 	ReturnFalse
.9235					CompareBaseCode:
.9235	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; make both values if references.
.9238	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.923b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.923e	29 10		and #$10			and 	#NSTString
.9240	d0 40		bne $9282			bne 	_CBCString
.9242	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9245	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9248	d0 3b		bne $9285			bne 	_CBCFloat
.924a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.924d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9250	29 08		and #$08			and 	#NSTFloat
.9252	d0 31		bne $9285			bne 	_CBCFloat
.9254	20 88 92	jsr $9288			jsr 	CompareFixMinusZero
.9257	e8		inx				inx
.9258	20 88 92	jsr $9288			jsr 	CompareFixMinusZero
.925b	ca		dex				dex
.925c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.925f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9262	10 0b		bpl $926f			bpl 	_CDCSameSign
.9264	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9267	30 16		bmi $927f			bmi 	_CBCLess 					; return $FF
.9269					_CBCGreater:
.9269	a9 01		lda #$01			lda 	#1
.926b	60		rts				rts
.926c					_CBCEqual:
.926c	a9 00		lda #$00			lda 	#0
.926e	60		rts				rts
.926f					_CDCSameSign:
.926f	20 98 93	jsr $9398			jsr 	SubTopTwoStack 				; unsigned subtract
.9272	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; or the mantissa together
.9275	f0 f5		beq $926c			beq 	_CBCEqual 					; -0 == 0
.9277	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.927a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.927d	10 ea		bpl $9269			bpl 	_CBCGreater
.927f					_CBCLess:
.927f	a9 ff		lda #$ff			lda 	#$FF
.9281	60		rts				rts
.9282					_CBCString:
.9282	4c ee 92	jmp $92ee			jmp 	CompareStrings
.9285					_CBCFloat:
.9285	4c 0e a7	jmp $a70e			jmp 	CompareFloat
.9288					CompareFixMinusZero:
.9288	20 65 9d	jsr $9d65			jsr 	NSMIsZero
.928b	d0 03		bne $9290			bne 	_CFXMZNotZero
.928d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9290					_CFXMZNotZero:
.9290	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9291					StringConcat:
.9291	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9294	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9297	29 18		and #$18			and 	#NSBTypeMask
.9299	c9 10		cmp #$10			cmp 	#NSTString
.929b	d0 4e		bne $92eb			bne		_SCType
.929d	64 38		stz $38				stz 	zTemp1 						; counting total length
.929f	e8		inx				inx
.92a0	20 be 92	jsr $92be			jsr 	_SCSetupZ0 					; setup for second
.92a3	20 c9 92	jsr $92c9			jsr 	_SCLengthZ0 				; length for second
.92a6	ca		dex				dex
.92a7	20 be 92	jsr $92be			jsr 	_SCSetupZ0 					; setup for first
.92aa	20 c9 92	jsr $92c9			jsr 	_SCLengthZ0 				; length for first
.92ad	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.92af	20 c1 ad	jsr $adc1			jsr 	StringTempAllocate
.92b2	20 dc 92	jsr $92dc			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.92b5	e8		inx				inx
.92b6	20 be 92	jsr $92be			jsr 	_SCSetupZ0 					; copy second out
.92b9	20 dc 92	jsr $92dc			jsr 	_SCCopy
.92bc	ca		dex				dex
.92bd	60		rts				rts
.92be					_SCSetupZ0:
.92be	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.92c1	85 36		sta $36				sta 	zTemp0
.92c3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92c6	85 37		sta $37				sta 	zTemp0+1
.92c8	60		rts				rts
.92c9					_SCLengthZ0:
.92c9	5a		phy				phy
.92ca	a0 00		ldy #$00			ldy 	#0
.92cc					_SCLenLoop:
.92cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ce	f0 0a		beq $92da			beq 	_SCLExit
.92d0	c8		iny				iny
.92d1	e6 38		inc $38				inc 	zTemp1
.92d3	10 f7		bpl $92cc			bpl		_SCLenLoop
.92d5	a9 09		lda #$09		lda	#9
.92d7	4c 7d 91	jmp $917d		jmp	ErrorHandler
.92da					_SCLExit:
.92da	7a		ply				ply
.92db	60		rts				rts
.92dc					_SCCopy:
.92dc	5a		phy				phy
.92dd	a0 00		ldy #$00			ldy 	#0
.92df					_SCCopyLoop:
.92df	b1 36		lda ($36),y			lda 	(zTemp0),y
.92e1	f0 06		beq $92e9			beq 	_SCCExit
.92e3	20 ff ad	jsr $adff			jsr 	StringTempWrite
.92e6	c8		iny				iny
.92e7	80 f6		bra $92df			bra 	_SCCopyLoop
.92e9					_SCCExit:
.92e9	7a		ply				ply
.92ea	60		rts				rts
.92eb					_SCType:
.92eb	4c a6 aa	jmp $aaa6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a4cf					IntegerDivide:
.a4cf	fa		plx				plx
.a4d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a4d3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a4d6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a4d7	0a		asl a				asl 	a
.a4d8	10 05		bpl $a4df			bpl 	_NotRef
.a4da	48		pha				pha
.a4db	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a4de	68		pla				pla
.a4df					_NotRef:
.a4df	0a		asl a				asl 	a
.a4e0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a4e2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a4e5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a4e8	f0 03		beq $a4ed			beq 	_IntegerCode 				; if clear, then we have two integers
.a4ea	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.a4ed					_IntegerCode:
.a4ed	20 0f a5	jsr $a50f			jsr 	CheckDivideZero 			; do div zero check
.a4f0	20 47 a5	jsr $a547			jsr 	Int32Divide 				; do the division
.a4f3	20 04 a6	jsr $a604			jsr 	CalculateSign 				; calculate result sign
.a4f6					NSMCopyPlusTwoToZero:
.a4f6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a4f9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a4fc	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a4ff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a502	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a505	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a508	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a50b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a50e	60		rts				rts
.a50f					CheckDivideZero:
.a50f	e8		inx				inx
.a510	20 65 9d	jsr $9d65			jsr 	NSMIsZero
.a513	f0 02		beq $a517			beq 	_CDVError
.a515	ca		dex				dex
.a516	60		rts				rts
.a517					_CDVError:
.a517	a9 03		lda #$03		lda	#3
.a519	4c 7d 91	jmp $917d		jmp	ErrorHandler
.a51c					IntegerModulus:
.a51c	fa		plx				plx
.a51d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a520	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a523	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a524	0a		asl a				asl 	a
.a525	10 05		bpl $a52c			bpl 	_NotRef
.a527	48		pha				pha
.a528	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a52b	68		pla				pla
.a52c					_NotRef:
.a52c	0a		asl a				asl 	a
.a52d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a52f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a532	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a535	f0 03		beq $a53a			beq 	_IntegerCode 				; if clear, then we have two integers
.a537	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.a53a					_IntegerCode:
.a53a					IntegerModulusNoCheck:
.a53a	20 0f a5	jsr $a50f			jsr 	CheckDivideZero 			; do div zero check
.a53d	20 47 a5	jsr $a547			jsr 	Int32Divide 				; do the division
.a540	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a543	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a546	60		rts				rts
.a547					Int32Divide:
.a547	48		pha				pha 								; save AXY
.a548	5a		phy				phy
.a549	20 0c 9d	jsr $9d0c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a54c	20 31 9d	jsr $9d31			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a54f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a551					_I32DivideLoop:
.a551	e8		inx				inx
.a552	e8		inx				inx
.a553	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a556	ca		dex				dex
.a557	ca		dex				dex
.a558	20 4b 9d	jsr $9d4b			jsr 	NSMRotateLeft
.a55b	20 87 a5	jsr $a587			jsr 	DivideCheckSubtract 		; check if subtract possible
.a55e	90 03		bcc $a563			bcc 	_I32DivideNoCarryIn
.a560	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a563					_I32DivideNoCarryIn:
.a563	88		dey				dey 								; loop round till division completed.
.a564	d0 eb		bne $a551			bne 	_I32DivideLoop
.a566	7a		ply				ply 								; restore AXY and exit
.a567	68		pla				pla
.a568	60		rts				rts
.a569					Int32ShiftDivide:
.a569	48		pha				pha 								; save AY
.a56a	5a		phy				phy
.a56b	e8		inx				inx 								; clear S[X+2]
.a56c	e8		inx				inx
.a56d	20 35 9d	jsr $9d35			jsr 	NSMSetZero
.a570	ca		dex				dex
.a571	ca		dex				dex
.a572	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a574					_I32SDLoop:
.a574	20 87 a5	jsr $a587			jsr 	DivideCheckSubtract 		; check if subtract possible
.a577	e8		inx				inx
.a578	e8		inx				inx
.a579	20 4b 9d	jsr $9d4b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a57c	ca		dex				dex
.a57d	ca		dex				dex
.a57e	20 4b 9d	jsr $9d4b			jsr 	NSMRotateLeft
.a581	88		dey				dey 	 							; do 31 times
.a582	d0 f0		bne $a574			bne 	_I32SDLoop
.a584	7a		ply				ply 								; restore AY and exit
.a585	68		pla				pla
.a586	60		rts				rts
.a587					DivideCheckSubtract:
.a587	20 98 93	jsr $9398			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a58a	b0 04		bcs $a590			bcs 	_DCSExit 					; if carry set, then could do, exit
.a58c	20 72 93	jsr $9372			jsr 	AddTopTwoStack 				; add it back in
.a58f	18		clc				clc 								; and return False
.a590					_DCSExit:
.a590	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a591					MulInteger:
.a591	fa		plx				plx
.a592	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a595	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a598	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a599	0a		asl a				asl 	a
.a59a	10 05		bpl $a5a1			bpl 	_NotRef
.a59c	48		pha				pha
.a59d	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a5a0	68		pla				pla
.a5a1					_NotRef:
.a5a1	0a		asl a				asl 	a 							; put MSB of type into A:7
.a5a2	30 0b		bmi $a5af			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a5a4	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a5a7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a5aa	f0 06		beq $a5b2			beq 	_IntegerCode 				; if clear, then we have two integers
.a5ac	4c e5 a7	jmp $a7e5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a5af					_StringData:
.a5af	4c b0 aa	jmp $aab0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a5b2					_IntegerCode:
.a5b2	20 bf a5	jsr $a5bf			jsr 	MultiplyShort
.a5b5	c9 00		cmp #$00			cmp 	#0
.a5b7	f0 05		beq $a5be			beq 	_MIExit
.a5b9	a9 04		lda #$04		lda	#4
.a5bb	4c 7d 91	jmp $917d		jmp	ErrorHandler
.a5be					_MIExit:
.a5be	60		rts				rts
.a5bf					MultiplyShort:
.a5bf	5a		phy				phy 								; save Y
.a5c0	20 0c 9d	jsr $9d0c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a5c3	20 31 9d	jsr $9d31			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a5c6	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a5c8					_I32MLoop:
.a5c8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a5cb	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a5ce	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a5d1	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a5d4	f0 28		beq $a5fe			beq 	_I32MExit 					; exit if zero
.a5d6	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a5d9	29 01		and #$01			and 	#1
.a5db	f0 0e		beq $a5eb			beq 	_I32MNoAdd
.a5dd	20 72 93	jsr $9372			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a5e0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a5e3	10 06		bpl $a5eb			bpl 	_I32MNoAdd
.a5e5					_I32ShiftRight:
.a5e5	20 58 9d	jsr $9d58			jsr 	NSMShiftRight 				; shift S[X] right
.a5e8	c8		iny				iny 								; increment shift count
.a5e9	80 0a		bra $a5f5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a5eb					_I32MNoAdd:
.a5eb	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a5ee	70 f5		bvs $a5e5			bvs 	_I32ShiftRight 				; instead.
.a5f0	e8		inx				inx
.a5f1	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a5f4	ca		dex				dex
.a5f5					_I32MShiftUpper:
.a5f5	e8		inx				inx 								; shift S[X+2] right
.a5f6	e8		inx				inx
.a5f7	20 58 9d	jsr $9d58			jsr 	NSMShiftRight
.a5fa	ca		dex				dex
.a5fb	ca		dex				dex
.a5fc	80 ca		bra $a5c8			bra 	_I32MLoop 					; try again.
.a5fe					_I32MExit:
.a5fe	20 04 a6	jsr $a604			jsr 	CalculateSign
.a601	98		tya				tya 								; shift in A
.a602	7a		ply				ply 								; restore Y and exit
.a603	60		rts				rts
.a604					CalculateSign:
.a604	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a607	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a60a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a60d	0a		asl a				asl 	a 							; shift bit 7 into carry
.a60e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a611	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.92ee					CompareStrings:
.92ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.92f1	3d 01 04	and $0401,x			and 	NSStatus+1,x
.92f4	29 10		and #$10			and 	#NSBIsString
.92f6	f0 2c		beq $9324			beq 	_CSTypeError
.92f8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.92fb	85 36		sta $36				sta 	zTemp0
.92fd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9300	85 37		sta $37				sta 	zTemp0+1
.9302	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9305	85 38		sta $38				sta 	zTemp1
.9307	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.930a	85 39		sta $39				sta 	zTemp1+1
.930c	5a		phy				phy 								; save Y so we can access strings
.930d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.930f					_CSLoop:
.930f	c8		iny				iny
.9310	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9312	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9314	d0 06		bne $931c			bne 	_CSDifferent
.9316	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9318	d0 f5		bne $930f			bne 	_CSLoop 					; still comparing
.931a					_CSExit:
.931a	7a		ply				ply 								; reached end, return zero in A from EOS
.931b	60		rts				rts
.931c					_CSDifferent:
.931c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.931e	90 fa		bcc $931a			bcc		_CSExit
.9320	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9322	80 f6		bra $931a			bra 	_CSExit
.9324					_CSTypeError:
.9324	4c a6 aa	jmp $aaa6			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9327					ShiftLeft:
.9327	38		sec				sec
.9328	80 01		bra $932b			bra 	ShiftMain
.932a					ShiftRight:
.932a	18		clc				clc
.932b					ShiftMain:
.932b	fa		plx				plx 								; restore X
.932c	08		php				php 								; save direction
.932d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9330	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9333	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9334	0a		asl a				asl 	a
.9335	10 05		bpl $933c			bpl 	_NotRef
.9337	48		pha				pha
.9338	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.933b	68		pla				pla
.933c					_NotRef:
.933c	0a		asl a				asl 	a
.933d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.933f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9342	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9345	f0 03		beq $934a			beq 	_IntegerCode 				; if clear, then we have two integers
.9347	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.934a					_IntegerCode:
.934a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.934d	29 e0		and #$e0			and 	#$E0
.934f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9352	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9355	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9358	d0 13		bne $936d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.935a					_SMLoop:
.935a	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.935d	30 11		bmi $9370			bmi 	_SMExit 					; exit if done.
.935f	28		plp				plp 								; restore direcition setting
.9360	08		php				php
.9361	90 05		bcc $9368			bcc 	_SMRight
.9363	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; shift left if CS
.9366	80 f2		bra $935a			bra 	_SMLoop
.9368					_SMRight:
.9368	20 58 9d	jsr $9d58			jsr 	NSMShiftRight 				; shift right if CC
.936b	80 ed		bra $935a			bra 	_SMLoop
.936d					_SMExit0:
.936d	20 35 9d	jsr $9d35			jsr 	NSMSetZero 					; return zero.
.9370					_SMExit:
.9370	28		plp				plp 								; throw direction
.9371	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9372					AddTopTwoStack:
.9372	18		clc				clc
.9373	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9376	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9379	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.937c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.937f	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9382	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9385	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9388	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.938b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.938e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9391	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9394	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9397	60		rts				rts
.9398					SubTopTwoStack:
.9398	38		sec				sec
.9399	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.939c	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.939f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.93a2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.93a5	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.93a8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93ab	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.93ae	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.93b1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93b4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.93b7	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.93ba	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93bd	60		rts				rts
.93be					AddInteger:
.93be	fa		plx				plx
.93bf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93c2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93c5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93c6	0a		asl a				asl 	a
.93c7	10 05		bpl $93ce			bpl 	_NotRef
.93c9	48		pha				pha
.93ca	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93cd	68		pla				pla
.93ce					_NotRef:
.93ce	0a		asl a				asl 	a 							; put MSB of type into A:7
.93cf	30 0b		bmi $93dc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.93d1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93d4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.93d7	f0 06		beq $93df			beq 	_IntegerCode 				; if clear, then we have two integers
.93d9	4c 6d a6	jmp $a66d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.93dc					_StringData:
.93dc	4c 91 92	jmp $9291			jmp 	StringConcat							; at least one string - don't know both are strings.
.93df					_IntegerCode:
.93df					AddCode:
.93df	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.93e2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.93e5	10 8b		bpl $9372			bpl 	AddTopTwoStack
.93e7	20 98 93	jsr $9398			jsr 	SubTopTwoStack 				; do a physical subtraction
.93ea	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.93ed	10 09		bpl $93f8			bpl 	_AddExit
.93ef	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.93f2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93f5	20 ea 9c	jsr $9cea			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.93f8					_AddExit:
.93f8	60		rts				rts
.93f9					SubInteger:
.93f9	fa		plx				plx
.93fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93fd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9400	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9401	0a		asl a				asl 	a
.9402	10 05		bpl $9409			bpl 	_NotRef
.9404	48		pha				pha
.9405	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9408	68		pla				pla
.9409					_NotRef:
.9409	0a		asl a				asl 	a 							; put MSB of type into A:7
.940a	30 0b		bmi $9417			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.940c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.940f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9412	f0 06		beq $941a			beq 	_IntegerCode 				; if clear, then we have two integers
.9414	4c 72 a6	jmp $a672			jmp 	FloatingPointSub 							; otherwise at least one float.
.9417					_StringData:
.9417	4c b0 aa	jmp $aab0			jmp 	NotDoneError							; at least one string - don't know both are strings.
.941a					_IntegerCode:
.941a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.941d	49 80		eor #$80			eor 	#$80
.941f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9422	80 bb		bra $93df			bra 	AddCode 					; and do the same code as add.
.9424					AndInteger:
.9424	fa		plx				plx
.9425	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9428	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.942b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.942c	0a		asl a				asl 	a
.942d	10 05		bpl $9434			bpl 	_NotRef
.942f	48		pha				pha
.9430	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9433	68		pla				pla
.9434					_NotRef:
.9434	0a		asl a				asl 	a
.9435	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9437	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.943a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.943d	f0 03		beq $9442			beq 	_IntegerCode 				; if clear, then we have two integers
.943f	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.9442					_IntegerCode:
.9442	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9445	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9448	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.944b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.944e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9451	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9454	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9457	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.945a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.945d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9460	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9463	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9466	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9469	60		rts				rts
.946a					OraInteger:
.946a	fa		plx				plx
.946b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.946e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9471	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9472	0a		asl a				asl 	a
.9473	10 05		bpl $947a			bpl 	_NotRef
.9475	48		pha				pha
.9476	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9479	68		pla				pla
.947a					_NotRef:
.947a	0a		asl a				asl 	a
.947b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.947d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9480	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9483	f0 03		beq $9488			beq 	_IntegerCode 				; if clear, then we have two integers
.9485	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.9488					_IntegerCode:
.9488	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.948b	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.948e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9491	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9494	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9497	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.949a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.949d	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.94a0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94a3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94a6	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.94a9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94ac	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.94af	60		rts				rts
.94b0					EorInteger:
.94b0	fa		plx				plx
.94b1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94b4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94b7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94b8	0a		asl a				asl 	a
.94b9	10 05		bpl $94c0			bpl 	_NotRef
.94bb	48		pha				pha
.94bc	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94bf	68		pla				pla
.94c0					_NotRef:
.94c0	0a		asl a				asl 	a
.94c1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94c3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94c6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.94c9	f0 03		beq $94ce			beq 	_IntegerCode 				; if clear, then we have two integers
.94cb	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.94ce					_IntegerCode:
.94ce	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.94d1	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.94d4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94d7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.94da	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.94dd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94e0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.94e3	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.94e6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94e9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.94ec	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.94ef	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.94f2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.94f5	60		rts				rts
.94f6					WordIndirect:
.94f6	fa		plx				plx
.94f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.94fa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.94fe	0a		asl a				asl 	a
.94ff	10 05		bpl $9506			bpl 	_NotRef
.9501	48		pha				pha
.9502	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9505	68		pla				pla
.9506					_NotRef:
.9506	0a		asl a				asl 	a
.9507	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9509	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.950c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.950f	f0 03		beq $9514			beq 	_IntegerCode 				; if clear, then we have two integers
.9511	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.9514					_IntegerCode:
.9514	20 df 93	jsr $93df			jsr 	AddCode 					; add the two values
.9517	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9519	9d 00 04	sta $0400,x			sta 	NSStatus,x
.951c	60		rts				rts
.951d					ByteIndirect:
.951d	fa		plx				plx
.951e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9521	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9524	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9525	0a		asl a				asl 	a
.9526	10 05		bpl $952d			bpl 	_NotRef
.9528	48		pha				pha
.9529	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.952c	68		pla				pla
.952d					_NotRef:
.952d	0a		asl a				asl 	a
.952e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9530	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9533	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9536	f0 03		beq $953b			beq 	_IntegerCode 				; if clear, then we have two integers
.9538	4c a6 aa	jmp $aaa6			jmp 	TypeError 					; anything else, type mismatch.
.953b					_IntegerCode:
.953b	20 df 93	jsr $93df			jsr 	AddCode 					; add the two values
.953e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9540	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9543	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a612					ConvertInt16:
.a612	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a615	8e 10 04	stx $0410			stx 	NSMantissa1
.a618	9c 18 04	stz $0418			stz 	NSMantissa2
.a61b	9c 20 04	stz $0420			stz 	NSMantissa3
.a61e	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a621	a2 00		ldx #$00			ldx 	#0 							; stack level
.a623	a9 0a		lda #$0a			lda 	#10 						; base
.a625	80 00		bra $a627			bra 	ConvertInt32
.a627					ConvertInt32:
.a627	5a		phy				phy
.a628	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a62a	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a62d	10 08		bpl $a637			bpl 	_CI32NotNeg
.a62f	48		pha				pha
.a630	a9 2d		lda #$2d			lda 	#'-'
.a632	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a635	c8		iny				iny
.a636	68		pla				pla
.a637					_CI32NotNeg:
.a637	20 45 a6	jsr $a645			jsr 	_CI32DivideConvert 			; recursive conversion
.a63a	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a63c	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a63f	7a		ply				ply
.a640	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a642	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a644	60		rts				rts
.a645					_CI32DivideConvert:
.a645	e8		inx				inx 								; write to next slot up
.a646	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.a649	ca		dex				dex
.a64a	20 47 a5	jsr $a547			jsr 	Int32Divide 				; divide
.a64d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a650	48		pha				pha
.a651	20 f6 a4	jsr $a4f6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a654	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; is it zero ?
.a657	f0 06		beq $a65f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a659	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a65c	20 45 a6	jsr $a645			jsr 	_CI32DivideConvert 			; and recusrively call.
.a65f					_CI32NoRecurse:
.a65f	68		pla				pla 								; remainder
.a660	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a662	90 02		bcc $a666			bcc 	_CI32NotHex
.a664	69 26		adc #$26			adc 	#6+32
.a666					_CI32NotHex:
.a666	69 30		adc #$30			adc 	#48
.a668	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a66b	c8		iny				iny
.a66c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9544					PrecedenceLevel:
>9544	04					.byte	 4	; $00 <<
>9545	02					.byte	 2	; $01 <=
>9546	02					.byte	 2	; $02 <>
>9547	00					.byte	 0	; $03 !!3
>9548	00					.byte	 0	; $04 ><
>9549	02					.byte	 2	; $05 >=
>954a	04					.byte	 4	; $06 >>
>954b	00					.byte	 0	; $07 !!7
>954c	00					.byte	 0	; $08 !!8
>954d	00					.byte	 0	; $09 !!9
>954e	00					.byte	 0	; $0a !!10
>954f	00					.byte	 0	; $0b !!11
>9550	00					.byte	 0	; $0c !!12
>9551	00					.byte	 0	; $0d !!13
>9552	00					.byte	 0	; $0e !!14
>9553	00					.byte	 0	; $0f !!15
>9554	00					.byte	 0	; $10 @
>9555	00					.byte	 0	; $11 !!17
>9556	00					.byte	 0	; $12 !!18
>9557	00					.byte	 0	; $13 [
>9558	04					.byte	 4	; $14 \
>9559	00					.byte	 0	; $15 ]
>955a	01					.byte	 1	; $16 ^
>955b	00					.byte	 0	; $17 _
>955c	00					.byte	 0	; $18 `
>955d	00					.byte	 0	; $19 !!25
>955e	00					.byte	 0	; $1a !!26
>955f	00					.byte	 0	; $1b {
>9560	01					.byte	 1	; $1c |
>9561	00					.byte	 0	; $1d }
>9562	00					.byte	 0	; $1e ~
>9563	00					.byte	 0	; $1f [7m<7F>[m
>9564	00					.byte	 0	; $20
>9565	05					.byte	 5	; $21 !
>9566	00					.byte	 0	; $22 "
>9567	00					.byte	 0	; $23 #
>9568	05					.byte	 5	; $24 $
>9569	04					.byte	 4	; $25 %
>956a	01					.byte	 1	; $26 &
>956b	00					.byte	 0	; $27 '
>956c	00					.byte	 0	; $28 (
>956d	00					.byte	 0	; $29 )
>956e	04					.byte	 4	; $2a *
>956f	03					.byte	 3	; $2b +
>9570	00					.byte	 0	; $2c ,
>9571	03					.byte	 3	; $2d -
>9572	00					.byte	 0	; $2e .
>9573	04					.byte	 4	; $2f /
>9574	00					.byte	 0	; $30 0
>9575	00					.byte	 0	; $31 1
>9576	00					.byte	 0	; $32 2
>9577	00					.byte	 0	; $33 3
>9578	00					.byte	 0	; $34 4
>9579	00					.byte	 0	; $35 5
>957a	00					.byte	 0	; $36 6
>957b	00					.byte	 0	; $37 7
>957c	00					.byte	 0	; $38 8
>957d	00					.byte	 0	; $39 9
>957e	00					.byte	 0	; $3a :
>957f	00					.byte	 0	; $3b ;
>9580	02					.byte	 2	; $3c <
>9581	02					.byte	 2	; $3d =
>9582	02					.byte	 2	; $3e >
>9583	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9584					EvaluateExpressionAt0:
.9584	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9586					EvaluateExpression:
.9586	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9588					EvaluateExpressionAtPrecedence:
.9588	48		pha				pha 								; save precedence level
.9589	20 57 98	jsr $9857			jsr 	EvaluateTerm 				; evaluate term into level X.
.958c	68		pla				pla 								; restore precedence level.
.958d					_EXPRLoop:
.958d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.958f	b1 30		lda ($30),y			lda 	(codePtr),y
.9591	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9593	b0 25		bcs $95ba			bcs 	_EXPRExit
.9595	da		phx				phx 								; read the operator precedence
.9596	aa		tax				tax
.9597	bd 44 95	lda $9544,x			lda 	PrecedenceLevel,x
.959a	fa		plx				plx
.959b	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.959d	f0 1b		beq $95ba			beq 	_EXPRExit
.959f	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.95a1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.95a3	c5 37		cmp $37				cmp 	zTemp0+1
.95a5	b0 13		bcs $95ba			bcs		_EXPRExit 					; if current >= operator exit
.95a7	48		pha				pha 								; save current precedence.
.95a8	b1 30		lda ($30),y			lda 	(codePtr),y
.95aa	c8		iny				iny
.95ab	48		pha				pha
.95ac	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.95ae	e8		inx				inx 								; work out the right hand side.
.95af	20 88 95	jsr $9588			jsr 	EvaluateExpressionAtPrecedence
.95b2	ca		dex				dex
.95b3	68		pla				pla 								; get operator, call the code.
.95b4	20 bd 95	jsr $95bd			jsr 	_EXPRCaller
.95b7	68		pla				pla 								; restore precedence level
.95b8	80 d3		bra $958d			bra 	_EXPRLoop 					; and go round.
.95ba					_EXPRExit:
.95ba	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.95bc	60		rts				rts
.95bd					_EXPRCaller:
.95bd	da		phx				phx 								; save on stack, first thing is to restore it
.95be	0a		asl a				asl 	a 							; double so can use vectors into X
.95bf	aa		tax				tax
.95c0	7c c4 8d	jmp ($8dc4,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a66d					FloatingPointAdd:
.a66d	20 0e a8	jsr $a80e			jsr 	FloatPrepare 				; prepare for floats
.a670	80 0b		bra $a67d			bra 	FloatAdd
.a672					FloatingPointSub:
.a672	20 0e a8	jsr $a80e			jsr 	FloatPrepare 				; prepare for floats
.a675					FloatSubtract:
.a675	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a678	49 80		eor #$80			eor 	#$80
.a67a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a67d					FloatAdd:
.a67d	48		pha				pha
.a67e	5a		phy				phy
.a67f	20 1f a8	jsr $a81f			jsr 	NSNormalise 				; normalise S[X]
.a682	f0 54		beq $a6d8			beq 	_FAReturn1
.a684	e8		inx				inx 								; normalise S[X+1]
.a685	20 1f a8	jsr $a81f			jsr 	NSNormalise
.a688	ca		dex				dex
.a689	c9 00		cmp #$00			cmp 	#0
.a68b	f0 6f		beq $a6fc			beq 	_FAExit 					; if so, just return A
.a68d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a690	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a693	f0 1b		beq $a6b0			beq 	_FAExponentsEqual
.a695	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a698	a8		tay				tay
.a699	38		sec				sec 								; do a signed comparison of the exponents.
.a69a	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a69d	50 02		bvc $a6a1			bvc 	_FANoSignedChange
.a69f	49 80		eor #$80			eor 	#$80
.a6a1					_FANoSignedChange:
.a6a1	29 80		and #$80			and 	#$80
.a6a3	10 03		bpl $a6a8			bpl 	_FAHaveMax
.a6a5	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a6a8					_FAHaveMax:
.a6a8	20 ff a6	jsr $a6ff			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a6ab	e8		inx				inx
.a6ac	20 ff a6	jsr $a6ff			jsr 	_FAShiftToExponent
.a6af	ca		dex				dex
.a6b0					_FAExponentsEqual:
.a6b0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a6b3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a6b6	30 10		bmi $a6c8			bmi 	_FADifferentSigns
.a6b8	20 72 93	jsr $9372			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a6bb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a6be	10 3c		bpl $a6fc			bpl 	_FAExit 					; if no, we are done.
.a6c0	20 58 9d	jsr $9d58			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a6c3	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a6c6	80 34		bra $a6fc			bra 	_FAExit
.a6c8					_FADifferentSigns:
.a6c8	20 98 93	jsr $9398			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a6cb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a6ce	10 2c		bpl $a6fc			bpl 	_FAExit 					; if no, we are done.
.a6d0	20 e1 9c	jsr $9ce1			jsr 	NSMNegate 					; netate result
.a6d3	20 ea 9c	jsr $9cea			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a6d6	80 24		bra $a6fc			bra 	_FAExit
.a6d8					_FAReturn1:
.a6d8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a6db	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6de	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a6e1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6e4	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a6e7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6ea	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a6ed	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6f0	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a6f3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a6f6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a6f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6fc					_FAExit:
.a6fc	7a		ply				ply
.a6fd	68		pla				pla
.a6fe	60		rts				rts
.a6ff					_FAShiftToExponent:
.a6ff					_FAShiftToExponent2:
.a6ff	98		tya				tya 								; compare Y to exponent
.a700	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a703	f0 08		beq $a70d			beq 	_FASEExit 					; exit if so.
.a705	20 58 9d	jsr $9d58			jsr 	NSMShiftRight	 			; shift the mantissa right
.a708	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a70b	80 f2		bra $a6ff			bra 	_FAShiftToExponent2
.a70d					_FASEExit:
.a70d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a70e					CompareFloat:
.a70e	20 75 a6	jsr $a675			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a711	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a714	29 f8		and #$f8			and 	#$F8
.a716	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a719	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a71c	f0 09		beq $a727			beq 	_FCExit 					; zero, so approximately identical
.a71e	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a720	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a723	10 02		bpl $a727			bpl 	_FCExit
.a725					_FCNegative:
.a725	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a727					_FCExit:
.a727	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a728					FDivideCommand:
.a728	fa		plx				plx	 								; restore stack position
.a729	20 0e a8	jsr $a80e			jsr 	FloatPrepare 				; prepare for floats
.a72c					FloatDivide:
.a72c	48		pha				pha
.a72d	e8		inx				inx
.a72e	20 1f a8	jsr $a81f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a731	ca		dex				dex
.a732	c9 00		cmp #$00			cmp 	#0
.a734	f0 20		beq $a756			beq 	_FDZero
.a736	20 1f a8	jsr $a81f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a739	f0 19		beq $a754			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a73b	20 69 a5	jsr $a569			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a73e	20 f6 a4	jsr $a4f6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a741	20 1f a8	jsr $a81f			jsr		NSNormalise 				; renormalise
.a744	20 04 a6	jsr $a604			jsr 	CalculateSign 				; calculate result sign
.a747	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a74a	38		sec				sec
.a74b	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a74e	38		sec				sec
.a74f	e9 1e		sbc #$1e			sbc 	#30
.a751	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a754					_FDExit:
.a754	68		pla				pla
.a755	60		rts				rts
.a756					_FDZero:
.a756	a9 03		lda #$03		lda	#3
.a758	4c 7d 91	jmp $917d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a75b					FloatFractionalPart:
.a75b	5a		phy				phy
.a75c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a75f	29 7f		and #$7f			and 	#$7F
.a761	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a764	20 1f a8	jsr $a81f			jsr 	NSNormalise
.a767	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a76a	38		sec				sec
.a76b	e9 e0		sbc #$e0			sbc 	#$E0
.a76d	90 31		bcc $a7a0			bcc 	_FFPExit 					; already fractional
.a76f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a771	b0 2a		bcs $a79d			bcs 	_FFPZero
.a773	a8		tay				tay 								; put count to do in Y
.a774	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a777	20 a2 a7	jsr $a7a2			jsr 	_FFPPartial
.a77a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a77d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a780	20 a2 a7	jsr $a7a2			jsr 	_FFPPartial
.a783	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a786	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a789	20 a2 a7	jsr $a7a2			jsr 	_FFPPartial
.a78c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a78f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a792	20 a2 a7	jsr $a7a2			jsr 	_FFPPartial
.a795	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a798	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; zeroed check.
.a79b	d0 03		bne $a7a0			bne 	_FFPExit
.a79d					_FFPZero:
.a79d	20 35 9d	jsr $9d35			jsr 	NSMSetZero
.a7a0					_FFPExit:
.a7a0	7a		ply				ply
.a7a1	60		rts				rts
.a7a2					_FFPPartial:
.a7a2	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a7a4	f0 17		beq $a7bd			beq 	_FFFPPExit
.a7a6	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a7a8	b0 0c		bcs $a7b6			bcs 	_FFFPPWholeByte
.a7aa	5a		phy				phy
.a7ab					_FFFPPLeft:
.a7ab	0a		asl a				asl 	a
.a7ac	88		dey				dey
.a7ad	d0 fc		bne $a7ab			bne 	_FFFPPLeft
.a7af	7a		ply				ply
.a7b0					_FFFPPRight:
.a7b0	4a		lsr a				lsr 	a
.a7b1	88		dey				dey
.a7b2	d0 fc		bne $a7b0			bne 	_FFFPPRight
.a7b4	80 07		bra $a7bd			bra 	_FFFPPExit
.a7b6					_FFFPPWholeByte:
.a7b6	98		tya				tya 								; subtract 8 from count
.a7b7	38		sec				sec
.a7b8	e9 08		sbc #$08			sbc 	#8
.a7ba	a8		tay				tay
.a7bb	a9 00		lda #$00			lda 	#0 							; and clear all
.a7bd					_FFFPPExit:
.a7bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a7be					FloatIntegerPart:
.a7be	48		pha				pha
.a7bf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a7c2	f0 1f		beq $a7e3			beq 	_FIPExit 					; if so do nothing
.a7c4	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; is it zero ?
.a7c7	f0 17		beq $a7e0			beq 	_FIPZero 					; if so return zero.
.a7c9	20 1f a8	jsr $a81f			jsr 	NSNormalise 				; normalise
.a7cc	f0 12		beq $a7e0			beq 	_FIPZero 					; normalised to zero, exit zero
.a7ce					_FIPShift:
.a7ce	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a7d1	10 08		bpl $a7db			bpl 	_FIPCheckZero
.a7d3	20 58 9d	jsr $9d58			jsr 	NSMShiftRight 				; shift mantissa right
.a7d6	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a7d9	80 f3		bra $a7ce			bra 	_FIPShift
.a7db					_FIPCheckZero:
.a7db	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; avoid -0 problem
.a7de	d0 03		bne $a7e3			bne 	_FIPExit 					; set to zero if mantissa zero.
.a7e0					_FIPZero:
.a7e0	20 35 9d	jsr $9d35			jsr 	NSMSetZero
.a7e3					_FIPExit:
.a7e3	68		pla				pla
.a7e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a7e5					FloatingPointMultiply:
.a7e5	20 0e a8	jsr $a80e			jsr 	FloatPrepare 				; prepare for floats
.a7e8					FloatMultiply:
.a7e8	48		pha				pha
.a7e9	20 1f a8	jsr $a81f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a7ec	f0 1b		beq $a809			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a7ee	e8		inx				inx
.a7ef	20 1f a8	jsr $a81f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a7f2	ca		dex				dex
.a7f3	c9 00		cmp #$00			cmp 	#0
.a7f5	f0 0f		beq $a806			beq 	_FDSetZero
.a7f7	20 bf a5	jsr $a5bf			jsr 	MultiplyShort 				; calculate the result.
.a7fa	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a7fd	18		clc				clc
.a7fe	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a801	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a804	80 03		bra $a809			bra 	_FDExit
.a806					_FDSetZero:
.a806	20 35 9d	jsr $9d35			jsr 	NSMSetZero 					; return 0
.a809					_FDExit:
.a809	20 1f a8	jsr $a81f			jsr 	NSNormalise 				; normalise the result
.a80c	68		pla				pla
.a80d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a80e					FloatPrepare:
.a80e	20 96 96	jsr $9696			jsr 	DereferenceTopTwo 			; dereference the top two values
.a811	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a814	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a817	29 10		and #$10			and 	#NSBIsString
.a819	d0 01		bne $a81c			bne 	_FDType
.a81b	60		rts				rts
.a81c					_FDType:
.a81c	4c a6 aa	jmp $aaa6			jmp 	TypeError
.a81f					NSNormalise:
.a81f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a822	29 80		and #$80			and 	#$80
.a824	09 08		ora #$08			ora 	#NSTFloat
.a826	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a829	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; if zero exit
.a82c	d0 09		bne $a837			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a82e	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a831	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a834	a9 00		lda #$00			lda 	#0 							; set Z flag
.a836	60		rts				rts
.a837					_NSNormaliseOptimise:
.a837	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a83a	d0 22		bne $a85e			bne 	_NSNormaliseLoop
.a83c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a83f	30 1d		bmi $a85e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a841	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a844	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a847	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a84a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a84d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a850	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a853	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a856	38		sec				sec
.a857	e9 08		sbc #$08			sbc 	#8
.a859	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a85c	80 d9		bra $a837			bra 	_NSNormaliseOptimise
.a85e					_NSNormaliseLoop:
.a85e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a861	70 08		bvs $a86b			bvs 	_NSNExit 					; exit if so with Z flag clear
.a863	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; shift mantissa left
.a866	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a869	80 f3		bra $a85e			bra 	_NSNormaliseLoop
.a86b					_NSNExit:
.a86b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a86d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.95c3					AssignNumber:
.95c3	5a		phy				phy
.95c4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.95c7	85 36		sta $36				sta 	zTemp0
.95c9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95cc	85 37		sta $37				sta 	zTemp0+1
.95ce	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.95d1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.95d3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95d6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.95d8	c9 08		cmp #$08			cmp 	#NSTFloat
.95da	f0 2a		beq $9606			beq 	_ANFloat
.95dc	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.95df	f0 05		beq $95e6			beq		_ANNotFloat
.95e1	e8		inx				inx
.95e2	20 be a7	jsr $a7be			jsr 	FloatIntegerPart 			; make it an integer
.95e5	ca		dex				dex
.95e6					_ANNotFloat:
.95e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.95e9	29 03		and #$03			and 	#3
.95eb	d0 05		bne $95f2			bne 	_ANByteWord
.95ed	20 12 96	jsr $9612			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.95f0	80 1e		bra $9610			bra 	_ANExit
.95f2					_ANByteWord:
.95f2	48		pha				pha 								; save count
.95f3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.95f6	92 36		sta ($36)			sta 	(zTemp0)
.95f8	68		pla				pla
.95f9	c9 01		cmp #$01			cmp	 	#1
.95fb	f0 13		beq $9610			beq 	_ANExit
.95fd	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9600	a0 01		ldy #$01			ldy 	#1
.9602	91 36		sta ($36),y			sta 	(zTemp0),y
.9604	80 0a		bra $9610			bra 	_ANExit
.9606					_ANFloat:
.9606	20 12 96	jsr $9612			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9609	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.960c	a0 04		ldy #$04			ldy 	#4
.960e	91 36		sta ($36),y			sta 	(zTemp0),y
.9610					_ANExit:
.9610	7a		ply				ply
.9611	60		rts				rts
.9612					_ANCopy4PackSign:
.9612	a0 03		ldy #$03			ldy 	#3
.9614	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9617	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9619	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.961c	91 36		sta ($36),y			sta 	(zTemp0),y
.961e	88		dey				dey
.961f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9622	91 36		sta ($36),y			sta 	(zTemp0),y
.9624	88		dey				dey
.9625	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9628	91 36		sta ($36),y			sta 	(zTemp0),y
.962a	88		dey				dey
.962b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.962e	91 36		sta ($36),y			sta 	(zTemp0),y
.9630	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9631					AssignString:
.9631	5a		phy				phy
.9632	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9635	85 38		sta $38				sta 	zTemp1
.9637	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.963a	85 39		sta $39				sta 	zTemp1+1
.963c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.963f	85 36		sta $36				sta 	zTemp0
.9641	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9644	85 37		sta $37				sta 	zTemp0+1
.9646	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9648	b1 36		lda ($36),y			lda 	(zTemp0),y
.964a	f0 23		beq $966f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.964c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.964d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.964f	e9 02		sbc #$02			sbc 	#2
.9651	85 3c		sta $3c				sta 	zsTemp
.9653	a0 01		ldy #$01			ldy 	#1
.9655	b1 36		lda ($36),y			lda 	(zTemp0),y
.9657	e9 00		sbc #$00			sbc 	#0
.9659	85 3d		sta $3d				sta 	zsTemp+1
.965b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.965d					_ASGetLength:
.965d	c8		iny				iny
.965e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9660	d0 fb		bne $965d			bne 	_ASGetLength
.9662	98		tya				tya 								; is this length <= current length
.9663	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9665	90 20		bcc $9687			bcc 	_ASCopyString
.9667	f0 1e		beq $9687			beq 	_ASCopyString
.9669	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.966b	a0 01		ldy #$01			ldy 	#1
.966d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.966f					_ASNewStringRequired:
.966f	e8		inx				inx 								; concrete the new string.
.9670	20 40 ad	jsr $ad40			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9673	ca		dex				dex
.9674	18		clc				clc
.9675	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9678	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.967a	92 36		sta ($36)			sta 	(zTemp0)
.967c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.967f	69 00		adc #$00			adc 	#0
.9681	a0 01		ldy #$01			ldy 	#1
.9683	91 36		sta ($36),y			sta 	(zTemp0),y
.9685	80 0d		bra $9694			bra 	_ASExit
.9687					_ASCopyString:
.9687	a0 00		ldy #$00			ldy 	#0
.9689					_ASCopyLoop:
.9689	b1 38		lda ($38),y			lda 	(zTemp1),y
.968b	c8		iny				iny
.968c	c8		iny				iny
.968d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.968f	88		dey				dey
.9690	c9 00		cmp #$00			cmp 	#0
.9692	d0 f5		bne $9689			bne 	_ASCopyLoop
.9694					_ASExit:
.9694	7a		ply				ply
.9695	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9696					DereferenceTopTwo:
.9696	e8		inx				inx
.9697	20 9b 96	jsr $969b			jsr 	Dereference 				; deref x+1
.969a	ca		dex				dex  								; falls through to deref x
.969b					Dereference:
.969b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.969e	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.96a0	f0 57		beq $96f9			beq 	_DRFExit 					; not a reference
.96a2	5a		phy				phy
.96a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.96a6	85 36		sta $36				sta 	zTemp0
.96a8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96ab	85 37		sta $37				sta 	zTemp0+1
.96ad	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.96b0	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.96b2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.96b8	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.96ba	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.96bc	f0 0f		beq $96cd			beq 	_DRFDereferenceTwo
.96be	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.96c0	f0 39		beq $96fb			beq 	_DRFFull
.96c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.96c5	29 03		and #$03			and 	#3
.96c7	f0 32		beq $96fb			beq 	_DRFFull 					; the whole word
.96c9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.96cb	f0 07		beq $96d4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.96cd					_DRFDereferenceTwo:
.96cd	a0 01		ldy #$01			ldy 	#1
.96cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.96d1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96d4					_DRFClear23:
.96d4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.96d7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.96da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.96dd	29 18		and #$18			and 	#NSBTypeMask
.96df	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96e2	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.96e4	d0 12		bne $96f8			bne 	_DRFNotString
.96e6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.96e9	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.96ec	d0 0a		bne $96f8			bne 	_DRFNotString
.96ee	a9 fa		lda #$fa			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.96f0	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.96f3	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.96f5	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.96f8					_DRFNotString
.96f8	7a		ply				ply 								; restore Y and exit
.96f9					_DRFExit:
.96f9	60		rts				rts
.96fa					_DRFNullString:
>96fa	00						.byte 	0
.96fb					_DRFFull:
.96fb	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.96fd	b1 36		lda ($36),y			lda 	(zTemp0),y
.96ff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9702	c8		iny				iny
.9703	b1 36		lda ($36),y			lda 	(zTemp0),y
.9705	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9708	c8		iny				iny
.9709	b1 36		lda ($36),y			lda 	(zTemp0),y
.970b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.970e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9711	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9714	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9716	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9719	f0 06		beq $9721			beq 	_DRFNoExponent
.971b	c8		iny				iny 								; if not, read the exponent as well.
.971c	b1 36		lda ($36),y			lda 	(zTemp0),y
.971e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9721					_DRFNoExponent:
.9721	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9724	10 0d		bpl $9733			bpl 	_DRFExit2 					; if not, then exit.
.9726	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9728	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.972b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.972e	09 80		ora #$80			ora 	#NSBIsNegative
.9730	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9733					_DRFExit2:
.9733	7a		ply				ply
.9734	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9735					EncodeNumberStart:
.9735	38		sec				sec
.9736	80 01		bra $9739			bra 	EncodeNumberContinue+1
.9738					EncodeNumberContinue:
.9738	18		clc				clc
.9739					EncodeNumber:
.9739	08		php				php 								; save reset.
.973a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.973c	f0 12		beq $9750			beq 	_ENIsOkay
.973e	c9 30		cmp #$30			cmp 	#"0"
.9740	90 04		bcc $9746			bcc 	_ENBadNumber
.9742	c9 3a		cmp #$3a			cmp 	#"9"+1
.9744	90 0a		bcc $9750			bcc 	_ENIsOkay
.9746					_ENBadNumber:
.9746	28		plp				plp 								; throw saved reset
.9747	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.974a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.974c	f0 7e		beq $97cc			beq 	_ENConstructFinal
.974e					_ENFail:
.974e	18		clc				clc 								; not allowed
.974f	60		rts				rts
.9750					_ENIsOkay:
.9750	28		plp				plp 								; are we restarting
.9751	90 15		bcc $9768			bcc 	_ENNoRestart
.9753					_ENStartEncode:
.9753	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9755	f0 0c		beq $9763			beq 	_ENFirstDP
.9757	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9759	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.975c	a9 01		lda #$01			lda 	#ESTA_Low
.975e					_ENExitChange:
.975e	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9761	38		sec				sec
.9762	60		rts				rts
.9763					_ENFirstDP:
.9763	20 35 9d	jsr $9d35			jsr 	NSMSetZero 					; clear integer part
.9766	80 3f		bra $97a7			bra 	_ESTASwitchFloat			; go straight to float and exi
.9768					_ENNoRestart:
.9768	48		pha				pha 								; save on stack.
.9769	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.976c	c9 01		cmp #$01			cmp 	#ESTA_Low
.976e	f0 09		beq $9779			beq  	_ESTALowState
.9770	c9 02		cmp #$02			cmp 	#ESTA_High
.9772	f0 29		beq $979d			beq 	_ESTAHighState
.9774	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9776	f0 3b		beq $97b3			beq 	_ESTADecimalState
>9778	db						.byte 	$DB 						; causes a break in the emulator
.9779					_ESTALowState:
.9779	68		pla				pla 								; get value back
.977a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.977c	f0 29		beq $97a7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.977e	29 0f		and #$0f			and 	#15 						; make digit
.9780	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9783	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9786	0a		asl a				asl 	a
.9787	0a		asl a				asl 	a
.9788	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.978b	0a		asl a				asl 	a
.978c	6d 86 04	adc $0486			adc 	DigitTemp
.978f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9792	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9794	90 05		bcc $979b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9796	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9798	8d 85 04	sta $0485			sta 	EncodeState
.979b					_ESTANoSwitch:
.979b	38		sec				sec
.979c	60		rts				rts
.979d					_ESTAHighState:
.979d	68		pla				pla 								; get value back
.979e	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.97a0	f0 05		beq $97a7			beq 	_ESTASwitchFloat
.97a2	20 06 98	jsr $9806			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.97a5	38		sec				sec
.97a6	60		rts				rts
.97a7					_ESTASwitchFloat:
.97a7	9c 87 04	stz $0487			stz 	DecimalCount
.97aa	e8		inx				inx 								; zero the decimal additive.
.97ab	20 35 9d	jsr $9d35			jsr 	NSMSetZero
.97ae	ca		dex				dex
.97af	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.97b1	80 ab		bra $975e			bra 	_ENExitChange
.97b3					_ESTADecimalState:
.97b3	68		pla				pla 								; digit.
.97b4	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.97b6	f0 96		beq $974e			beq 	_ENFail
.97b8	e8		inx				inx 								; put digit into fractional part of X+1
.97b9	20 06 98	jsr $9806			jsr 	ESTAShiftDigitIntoMantissa
.97bc	ca		dex				dex
.97bd	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.97c0	ad 87 04	lda $0487			lda 	DecimalCount
.97c3	c9 0b		cmp #$0b			cmp 	#11
.97c5	f0 02		beq $97c9			beq 	_ESTADSFail
.97c7	38		sec				sec
.97c8	60		rts				rts
.97c9					_ESTADSFail:
.97c9	4c a1 aa	jmp $aaa1			jmp 	RangeError
.97cc					_ENConstructFinal:
.97cc	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.97cf	f0 33		beq $9804			beq 	_ENCFExit 					; no decimals
.97d1	5a		phy				phy
.97d2	0a		asl a				asl 	a 							; x 4 and CLC
.97d3	0a		asl a				asl 	a
.97d4	6d 87 04	adc $0487			adc 	DecimalCount
.97d7	a8		tay				tay
.97d8	b9 60 aa	lda $aa60,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.97db	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.97de	b9 61 aa	lda $aa61,y			lda 	DecimalScalarTable-5+1,y
.97e1	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.97e4	b9 62 aa	lda $aa62,y			lda 	DecimalScalarTable-5+2,y
.97e7	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.97ea	b9 63 aa	lda $aa63,y			lda 	DecimalScalarTable-5+3,y
.97ed	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.97f0	b9 64 aa	lda $aa64,y			lda 	DecimalScalarTable-5+4,y
.97f3	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.97f6	a9 08		lda #$08			lda 	#NSTFloat
.97f8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.97fb	7a		ply				ply
.97fc	e8		inx				inx 								; multiply decimal const by decimal scalar
.97fd	20 e8 a7	jsr $a7e8			jsr 	FloatMultiply
.9800	ca		dex				dex
.9801	20 7d a6	jsr $a67d			jsr 	FloatAdd 					; add to integer part.
.9804					_ENCFExit:
.9804	18		clc				clc 								; reject the digit.
.9805	60		rts				rts
.9806					ESTAShiftDigitIntoMantissa:
.9806	29 0f		and #$0f			and 	#15 						; save digit
.9808	48		pha				pha
.9809	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.980c	48		pha				pha
.980d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9810	48		pha				pha
.9811	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9814	48		pha				pha
.9815	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9818	48		pha				pha
.9819	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; x 2
.981c	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; x 4
.981f	18		clc				clc 								; pop mantissa and add
.9820	68		pla				pla
.9821	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9824	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9827	68		pla				pla
.9828	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.982b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.982e	68		pla				pla
.982f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9832	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9835	68		pla				pla
.9836	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9839	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.983c	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; x 10
.983f	68		pla				pla 								; add digit
.9840	18		clc				clc
.9841	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9844	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9847	90 0d		bcc $9856			bcc 	_ESTASDExit
.9849	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.984c	d0 08		bne $9856			bne 	_ESTASDExit
.984e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9851	d0 03		bne $9856			bne 	_ESTASDExit
.9853	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9856					_ESTASDExit:
.9856	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9857					EvaluateTerm:
.9857	b1 30		lda ($30),y			lda 	(codePtr),y
.9859	30 18		bmi $9873			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.985b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.985d	b0 6f		bcs $98ce			bcs 	_ETVariable
.985f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9861	90 6e		bcc $98d1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9863	c9 3a		cmp #$3a			cmp 	#'9'+1
.9865	b0 6a		bcs $98d1			bcs 	_ETPuncUnary
.9867	20 35 97	jsr $9735			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.986a					_ETNumber:
.986a	c8		iny				iny 								; keep encoding until we have the numbers
.986b	b1 30		lda ($30),y			lda 	(codePtr),y
.986d	20 38 97	jsr $9738			jsr 	EncodeNumberContinue
.9870	b0 f8		bcs $986a			bcs 	_ETNumber 					; go back if accepted.
.9872	60		rts				rts
.9873					_ETCheckUnary:
.9873	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9875	f0 41		beq $98b8			beq 	_ETString
.9877	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9879	f0 12		beq $988d			beq 	_ETHexConstant
.987b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.987d	90 0b		bcc $988a			bcc 	_ETSyntaxError
.987f	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9881	b0 07		bcs $988a			bcs 	_ETSyntaxError
.9883	da		phx				phx 								; push X on the stack
.9884	0a		asl a				asl 	a 							; put vector x 2 into X
.9885	aa		tax				tax
.9886	c8		iny				iny 								; consume unary function token
.9887	7c 44 8e	jmp ($8e44,x)			jmp 	(VectorSet0,x) 				; and do it.
.988a					_ETSyntaxError:
.988a	4c 9c aa	jmp $aa9c			jmp 	SyntaxError
.988d					_ETHexConstant:
.988d	c8		iny				iny 								; skip #
.988e	c8		iny				iny 								; skip count
.988f	20 35 9d	jsr $9d35			jsr 	NSMSetZero 					; clear result
.9892					_ETHLoop:
.9892	b1 30		lda ($30),y			lda 	(codePtr),y
.9894	c8		iny				iny 								; and consume
.9895	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9897	f0 1e		beq $98b7			beq 	_ETHExit
.9899	48		pha				pha 								; save on stack.
.989a	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; x 2
.989d	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; x 4
.98a0	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; x 8
.98a3	20 4a 9d	jsr $9d4a			jsr 	NSMShiftLeft 				; x 16
.98a6	68		pla				pla 								; ASCII
.98a7	c9 41		cmp #$41			cmp 	#'A'
.98a9	90 02		bcc $98ad			bcc 	_ETHNotChar
.98ab	e9 07		sbc #$07			sbc 	#7
.98ad					_ETHNotChar:
.98ad	29 0f		and #$0f			and 	#15 						; digit now
.98af	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.98b2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98b5	80 db		bra $9892			bra 	_ETHLoop 					; go round.
.98b7					_ETHExit:
.98b7	60		rts				rts
.98b8					_ETString:
.98b8	c8		iny				iny 								; look at length
.98b9	b1 30		lda ($30),y			lda 	(codePtr),y
.98bb	48		pha				pha
.98bc	c8		iny				iny 								; first character
.98bd	20 7f 9d	jsr $9d7f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.98c0	68		pla				pla 								; restore count and save
.98c1	85 36		sta $36				sta 	zTemp0
.98c3	98		tya				tya 								; add length to Y to skip it.
.98c4	18		clc				clc
.98c5	65 36		adc $36				adc 	zTemp0
.98c7	a8		tay				tay
.98c8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.98ca	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98cd	60		rts				rts
.98ce					_ETVariable:
.98ce	4c 28 99	jmp $9928			jmp 	VariableHandler
.98d1					_ETPuncUnary:
.98d1	c8		iny				iny 								; consume the unary character
.98d2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.98d4	f0 2d		beq $9903			beq 	_ETUnaryNegate
.98d6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.98d8	f0 39		beq $9913			beq 	_ETDereference
.98da	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.98dc	f0 43		beq $9921			beq 	_ETParenthesis
.98de	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.98e0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.98e2	f0 06		beq $98ea			beq 	_ETIndirection
.98e4	e6 36		inc $36				inc 	zTemp0
.98e6	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.98e8	d0 a0		bne $988a			bne 	_ETSyntaxError
.98ea					_ETIndirection:
.98ea	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.98ec	1a		inc a				inc 	a
.98ed	48		pha				pha
.98ee	20 57 98	jsr $9857			jsr 	EvaluateTerm				; evaluate the term
.98f1	20 9b 96	jsr $969b			jsr 	Dereference 				; dereference it.
.98f4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.98f7	d0 07		bne $9900			bne 	_ETTypeMismatch
.98f9	68		pla				pla 								; indirection 1-2
.98fa	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.98fc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98ff	60		rts				rts
.9900					_ETTypeMismatch:
.9900	4c a6 aa	jmp $aaa6			jmp 	TypeError
.9903					_ETUnaryNegate:
.9903	20 57 98	jsr $9857			jsr 	EvaluateTerm				; evaluate the term
.9906	20 9b 96	jsr $969b			jsr 	Dereference 				; dereference it.
.9909	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.990c	29 10		and #$10			and 	#NSTString
.990e	d0 f0		bne $9900			bne 	_ETTypeMismatch
.9910	4c e1 9c	jmp $9ce1			jmp 	NSMNegate  					; just toggles the sign bit.
.9913					_ETDereference:
.9913	20 57 98	jsr $9857			jsr 	EvaluateTerm				; evaluate the term
.9916	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9919	29 20		and #$20			and 	#NSBIsReference
.991b	f0 e3		beq $9900			beq 	_ETTypeMismatch
.991d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9920	60		rts				rts
.9921					_ETParenthesis:
.9921	20 86 95	jsr $9586			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9924	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 			; check for )
.9927	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9928					VariableHandler:
.9928	b1 30		lda ($30),y			lda 	(codePtr),y
.992a	18		clc				clc
.992b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.992d	85 37		sta $37				sta 	zTemp0+1
.992f	c8		iny				iny
.9930	b1 30		lda ($30),y			lda 	(codePtr),y
.9932	85 36		sta $36				sta 	zTemp0
.9934	c8		iny				iny
.9935	18		clc				clc									; copy variable address+3 to mantissa
.9936	69 03		adc #$03			adc 	#3
.9938	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.993b	a5 37		lda $37				lda 	zTemp0+1
.993d	69 00		adc #$00			adc 	#0
.993f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9942	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9945	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9948	9e 28 04	stz $0428,x			stz 	NSExponent,x
.994b	5a		phy				phy
.994c	a0 02		ldy #$02			ldy 	#2 							; read type
.994e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9950	7a		ply				ply
.9951	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9953	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9955	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9958	29 04		and #$04			and 	#NSBIsArray
.995a	d0 01		bne $995d			bne 	_VHArray
.995c	60		rts				rts
.995d					_VHArray:
.995d	e8		inx				inx
.995e	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9961	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9963	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9966	b1 30		lda ($30),y			lda 	(codePtr),y
.9968	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.996a	d0 06		bne $9972			bne 	_VHNoSecondIndex
.996c	c8		iny				iny 								; skip the comma
.996d	e8		inx				inx
.996e	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9971	ca		dex				dex
.9972					_VHNoSecondIndex:
.9972	ca		dex				dex 								; set X back.
.9973	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 			; and check the right bracket.
.9976	5a		phy				phy 								; save position
.9977	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.997a	85 3e		sta $3e				sta 	zaTemp
.997c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.997f	85 3f		sta $3f				sta 	zaTemp+1
.9981	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9983	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9985	f0 02		beq $9989			beq 	_VHHas2Mask
.9987	a9 ff		lda #$ff			lda 	#$FF
.9989					_VHHas2Mask:
.9989	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.998c	f0 54		beq $99e2			beq 	_VHBadIndex
.998e	0a		asl a				asl 	a 							; carry will be set if a second index
.998f	90 09		bcc $999a			bcc 	_VHCheckFirstIndex
.9991	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9993	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9995	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9998	90 48		bcc $99e2			bcc 	_VHBadIndex
.999a					_VHCheckFirstIndex:
.999a	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.999c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.999e	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.99a1	90 3f		bcc $99e2			bcc 	_VHBadIndex
.99a3	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.99a5	64 37		stz $37				stz 	zTemp0+1
.99a7	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.99aa	30 0f		bmi $99bb			bmi 	_VHNoMultiply
.99ac	da		phx				phx
.99ad	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.99b0	48		pha				pha
.99b1	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.99b3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99b5	1a		inc a				inc 	a 							; add 1 for zero base
.99b6	fa		plx				plx
.99b7	20 38 a9	jsr $a938			jsr 	Multiply8x8 				; calculate -> Z0
.99ba	fa		plx				plx
.99bb					_VHNoMultiply:
.99bb	18		clc				clc
.99bc	a5 36		lda $36				lda 	zTemp0
.99be	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.99c1	85 36		sta $36				sta 	zTemp0
.99c3	a5 37		lda $37				lda 	zTemp0+1
.99c5	69 00		adc #$00			adc 	#0
.99c7	85 37		sta $37				sta 	zTemp0+1
.99c9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99cc	20 a8 88	jsr $88a8			jsr 	ScaleByBaseType
.99cf	18		clc				clc
.99d0	b2 3e		lda ($3e)			lda 	(zaTemp)
.99d2	65 36		adc $36				adc 	zTemp0
.99d4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99d7	a0 01		ldy #$01			ldy 	#1
.99d9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99db	65 37		adc $37				adc 	zTemp0+1
.99dd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99e0	7a		ply				ply 								; restore position
.99e1	60		rts				rts
.99e2					_VHBadIndex:
.99e2	a9 17		lda #$17		lda	#23
.99e4	4c 7d 91	jmp $917d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a86e					AbsUnary:
.a86e	fa		plx				plx 								; restore stack pos
.a86f	20 89 9c	jsr $9c89			jsr 	EvaluateNumber 				; get a float or int
.a872	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.a875	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a878	29 7f		and #$7f			and 	#$7F
.a87a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a87d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.99e7					AllocUnary:
.99e7	fa		plx				plx 								; restore stack pos
.99e8	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger		; get bytes required.
.99eb	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.99ee	da		phx				phx 								; save X/Y
.99ef	5a		phy				phy
.99f0	8a		txa				txa 								; copy X into Y
.99f1	a8		tay				tay
.99f2	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.99f5	aa		tax				tax
.99f6	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.99f9	20 06 9a	jsr $9a06			jsr 	AllocateXABytes 			; allocate memory
.99fc	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.99ff	8a		txa				txa
.9a00	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9a03	7a		ply				ply
.9a04	fa		plx				plx
.9a05	60		rts				rts
.9a06					AllocateXABytes:
.9a06	5a		phy				phy
.9a07	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9a0a	84 36		sty $36				sty 	zTemp0
.9a0c	5a		phy				phy
.9a0d	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9a10	84 37		sty $37				sty 	zTemp0+1
.9a12	5a		phy				phy
.9a13	18		clc				clc 								; add to low memory pointer
.9a14	6d 8c 04	adc $048c			adc 	lowMemPtr
.9a17	8d 8c 04	sta $048c			sta 	lowMemPtr
.9a1a	8a		txa				txa
.9a1b	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9a1e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9a21	b0 2f		bcs $9a52			bcs 	CISSMemory
.9a23	20 44 9a	jsr $9a44			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9a26					_ClearMemory:
.9a26	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9a29	c5 36		cmp $36				cmp 	zTemp0
.9a2b	d0 07		bne $9a34			bne 	_CMClearNext
.9a2d	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9a30	c5 37		cmp $37				cmp 	zTemp0+1
.9a32	f0 0c		beq $9a40			beq 	_CMExit
.9a34					_CMClearNext:
.9a34	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9a36	92 36		sta ($36)			sta 	(zTemp0)
.9a38	e6 36		inc $36				inc 	zTemp0
.9a3a	d0 ea		bne $9a26			bne 	_ClearMemory
.9a3c	e6 37		inc $37				inc		zTemp0+1
.9a3e	80 e6		bra $9a26			bra 	_ClearMemory
.9a40					_CMExit:
.9a40	fa		plx				plx
.9a41	68		pla				pla
.9a42	7a		ply				ply
.9a43	60		rts				rts
.9a44					CheckIdentifierStringSpace:
.9a44	48		pha				pha
.9a45	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9a48	18		clc				clc
.9a49	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9a4b	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9a4e	b0 02		bcs $9a52			bcs 	CISSMemory
.9a50	68		pla				pla
.9a51	60		rts				rts
.9a52					CISSMemory:
.9a52	a9 06		lda #$06		lda	#6
.9a54	4c 7d 91	jmp $917d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a87e					AscUnary:
.a87e	fa		plx				plx 								; restore stack pos
.a87f	20 94 9c	jsr $9c94			jsr 	EvaluateString 				; get a string
.a882	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a884	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.a887	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.a88a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a88b					FracUnary:
.a88b	fa		plx				plx 								; restore stack pos
.a88c	20 89 9c	jsr $9c89			jsr 	EvaluateNumber 				; get a float or int
.a88f	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.a892	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a895	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a897	f0 04		beq $a89d			beq 	_IUZero
.a899	20 5b a7	jsr $a75b			jsr 	FloatFractionalPart
.a89c	60		rts				rts
.a89d					_IUZero:
.a89d	20 35 9d	jsr $9d35			jsr 	NSMSetZero
.a8a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a8a1					IntUnary:
.a8a1	fa		plx				plx 								; restore stack pos
.a8a2	20 89 9c	jsr $9c89			jsr 	EvaluateNumber 				; get a float or int
.a8a5	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.a8a8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a8ab	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a8ad	f0 03		beq $a8b2			beq 	_IUExit
.a8af	20 be a7	jsr $a7be			jsr 	FloatIntegerPart
.a8b2					_IUExit:
.a8b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a8b3					LenUnary:
.a8b3	fa		plx				plx 								; restore stack pos
.a8b4	20 94 9c	jsr $9c94			jsr 	EvaluateString 				; get a string
.a8b7	5a		phy				phy
.a8b8	a0 00		ldy #$00			ldy 	#0 							; find length
.a8ba					_LenFind:
.a8ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.a8bc	f0 06		beq $a8c4			beq 	_LenExit
.a8be	c8		iny				iny
.a8bf	d0 f9		bne $a8ba			bne 	_LenFind
.a8c1	4c a1 aa	jmp $aaa1			jmp 	RangeError 					; string > 255
.a8c4					_LenExit:
.a8c4	98		tya				tya
.a8c5	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.a8c8	7a		ply				ply
.a8c9	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.a8cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a57					Unary_Not:
.9a57	fa		plx				plx
.9a58	20 ac 9c	jsr $9cac			jsr 	EvaluateInteger 			; get integer
.9a5b	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.9a5e	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; zero mantissa ?
.9a61	f0 04		beq $9a67			beq 	_NotZero
.9a63	20 35 9d	jsr $9d35			jsr 	NSMSetZero
.9a66	60		rts				rts
.9a67					_NotZero:
.9a67	4c ea 91	jmp $91ea			jmp 	ReturnTrue
.9a6a					_UNBad:
.9a6a	4c ab aa	jmp $aaab			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a6d					Unary_Random:
.9a6d	fa		plx				plx
.9a6e	20 e6 9a	jsr $9ae6			jsr 	Random32Bit 				; get a random number
.9a71	20 cb 9a	jsr $9acb			jsr 	URCopyToMantissa  			; put in mantissa
.9a74	e8		inx				inx
.9a75	20 c1 9c	jsr $9cc1			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9a78	ca		dex				dex
.9a79	20 3a a5	jsr $a53a			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9a7c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9a7f	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9a82	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.9a85	60		rts				rts
.9a86					Unary_Rnd:
.9a86	fa		plx				plx
.9a87	20 89 9c	jsr $9c89			jsr 	EvaluateNumber 				; number to use.
.9a8a	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 			; closing bracket
.9a8d	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9a90	f0 2b		beq $9abd			beq 	_URCopySeed
.9a92	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9a95	10 23		bpl $9aba			bpl 	_URDontSeed
.9a97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9a9a	49 17		eor #$17			eor 	#$17
.9a9c	8d 88 04	sta $0488			sta 	RandomSeed+0
.9a9f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9aa2	49 a5		eor #$a5			eor 	#$A5
.9aa4	8d 89 04	sta $0489			sta 	RandomSeed+1
.9aa7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9aaa	49 c2		eor #$c2			eor 	#$C2
.9aac	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9aaf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ab2	49 9d		eor #$9d			eor 	#$9D
.9ab4	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ab7	20 e6 9a	jsr $9ae6			jsr 	Random32Bit
.9aba					_URDontSeed:
.9aba	20 e6 9a	jsr $9ae6			jsr 	Random32Bit 				; generate a number.
.9abd					_URCopySeed:
.9abd	20 cb 9a	jsr $9acb			jsr 	URCopyToMantissa 			; copy into mantissa
.9ac0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9ac2	8d 28 04	sta $0428			sta 	NSExponent
.9ac5	a9 08		lda #$08			lda 	#NSTFloat
.9ac7	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9aca	60		rts				rts
.9acb					URCopyToMantissa:
.9acb	ad 88 04	lda $0488			lda 	RandomSeed+0
.9ace	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ad1	ad 89 04	lda $0489			lda 	RandomSeed+1
.9ad4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ad7	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9ada	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9add	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9ae0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9ae2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ae5	60		rts				rts
.9ae6					Random32Bit:
.9ae6	5a		phy				phy
.9ae7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9ae9	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9aec	d0 03		bne $9af1			bne 	_Random1
.9aee	a8		tay				tay 								; if so do it 256 times
.9aef	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9af1					_Random1:
.9af1	0a		asl a				asl 	a 							; LSFR RNG
.9af2	2e 89 04	rol $0489			rol 	RandomSeed+1
.9af5	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9af8	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9afb	90 02		bcc $9aff			bcc 	_Random2
.9afd	49 c5		eor #$c5			eor 	#$C5
.9aff					_Random2:
.9aff	88		dey				dey
.9b00	d0 ef		bne $9af1			bne 	_Random1
.9b02	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b05	7a		ply				ply
.9b06	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a8cd					SgnUnary:
.a8cd	fa		plx				plx 								; restore stack pos
.a8ce	20 89 9c	jsr $9c89			jsr 	EvaluateNumber 				; get a float or int
.a8d1	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.a8d4	20 65 9d	jsr $9d65			jsr 	NSMIsZero 					; if zero
.a8d7	f0 10		beq $a8e9			beq 	_SGZero  					; return Int Zero
.a8d9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a8dc	48		pha				pha
.a8dd	a9 01		lda #$01			lda 	#1 							; set to 1
.a8df	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.a8e2	68		pla				pla
.a8e3	29 80		and #$80			and		#$80 						; copy the sign byte out
.a8e5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a8e8	60		rts				rts
.a8e9	20 35 9d	jsr $9d35	_SGZero:jsr 	NSMSetZero
.a8ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a8ed					ValUnary:
.a8ed	fa		plx				plx 								; restore stack pos
.a8ee	20 03 a9	jsr $a903			jsr 	ValMainCode 				; do the main val() code
.a8f1	b0 01		bcs $a8f4			bcs 	_VUError 					; couldn't convert
.a8f3	60		rts				rts
.a8f4					_VUError:
.a8f4	4c a6 aa	jmp $aaa6			jmp 	TypeError
.a8f7					IsValUnary:
.a8f7	fa		plx				plx 								; restore stack pos
.a8f8	20 03 a9	jsr $a903			jsr 	ValMainCode 				; do the main val() code
.a8fb	b0 03		bcs $a900			bcs 	_VUBad
.a8fd	4c ea 91	jmp $91ea			jmp 	ReturnTrue
.a900					_VUBad:
.a900	4c f6 91	jmp $91f6			jmp 	ReturnFalse
.a903					ValMainCode:
.a903	20 94 9c	jsr $9c94			jsr 	EvaluateString 				; get a string
.a906	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 			; check right bracket present
.a909	5a		phy				phy
.a90a	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a90c	f0 17		beq $a925			beq 	_VMCFail2
.a90e	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a910	48		pha				pha 								; save first character
.a911	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a913	d0 01		bne $a916			bne 	_VMCStart
.a915	c8		iny				iny 								; skip over -
.a916					_VMCStart:
.a916	38		sec				sec 								; initialise first time round.
.a917					_VMCNext:
.a917	c8		iny				iny 								; pre-increment
.a918	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a91a	f0 0c		beq $a928			beq 	_VMCSuccess 				; successful.
.a91c	20 39 97	jsr $9739			jsr 	EncodeNumber 				; send it to the number-builder
.a91f	90 03		bcc $a924			bcc 	_VMCFail 					; if failed, give up.
.a921	18		clc				clc 								; next time round, countinue
.a922	80 f3		bra $a917			bra 	_VMCNext
.a924					_VMCFail:
.a924	68		pla				pla
.a925					_VMCFail2:
.a925	7a		ply				ply
.a926	38		sec				sec
.a927	60		rts				rts
.a928					_VMCSuccess:
.a928	a9 00		lda #$00			lda 	#0 							; construct final
.a92a	20 39 97	jsr $9739			jsr 	EncodeNumber
.a92d	68		pla				pla
.a92e	c9 2d		cmp #$2d			cmp 	#"-"
.a930	d0 03		bne $a935			bne 	_VMCNotNegative
.a932	20 e1 9c	jsr $9ce1			jsr		NSMNegate
.a935					_VMCNotNegative:
.a935	7a		ply				ply
.a936	18		clc				clc
.a937	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9b07					ChrUnary:
.9b07	fa		plx				plx 								; restore stack pos
.9b08	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger			; get value
.9b0b	48		pha				pha
.9b0c	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.9b0f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9b11	20 c1 ad	jsr $adc1			jsr 	StringTempAllocate
.9b14	68		pla				pla 								; write number to it
.9b15	20 ff ad	jsr $adff			jsr 	StringTempWrite
.9b18	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9b19					SpcUnary:
.9b19	fa		plx				plx 								; restore stack pos
.9b1a	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger			; get value
.9b1d	5a		phy				phy
.9b1e	48		pha				pha 								; save count
.9b1f	20 c1 ad	jsr $adc1			jsr 	StringTempAllocate
.9b22	7a		ply				ply 								; to do count in Y
.9b23					_SpcLoop:
.9b23	c0 00		cpy #$00			cpy 	#0
.9b25	f0 08		beq $9b2f			beq 	_SpcExit
.9b27	a9 20		lda #$20			lda 	#32
.9b29	20 ff ad	jsr $adff			jsr 	StringTempWrite
.9b2c	88		dey				dey
.9b2d	80 f4		bra $9b23			bra 	_SPCLoop
.9b2f					_SpcExit:
.9b2f	7a		ply				ply
.9b30	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket
.9b33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9b34					Unary_Str:
.9b34	fa		plx				plx
.9b35	20 89 9c	jsr $9c89			jsr 	EvaluateNumber  			; get number
.9b38	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 			; closing bracket
.9b3b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9b3d	20 56 9b	jsr $9b56			jsr 	ConvertNumberToString 		; do the conversion.
.9b40	a9 21		lda #$21			lda		#33 						; create buffer
.9b42	20 c1 ad	jsr $adc1			jsr 	StringTempAllocate 			; allocate memory
.9b45	da		phx				phx
.9b46	a2 00		ldx #$00			ldx 	#0
.9b48					_USCopy:
.9b48	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9b4b	20 ff ad	jsr $adff			jsr 	StringTempWrite
.9b4e	e8		inx				inx
.9b4f	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9b52	d0 f4		bne $9b48			bne 	_USCopy
.9b54	fa		plx				plx
.9b55	60		rts				rts
.9b56					ConvertNumberToString:
.9b56	5a		phy				phy 								; save code position
.9b57	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9b5a	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9b5d	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9b60	10 0a		bpl $9b6c			bpl 	_CNTSNotNegative
.9b62	29 7f		and #$7f			and 	#$7F 						; make +ve
.9b64	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b67	a9 2d		lda #$2d			lda 	#"-"
.9b69	20 d2 9b	jsr $9bd2			jsr 	WriteDecimalBuffer
.9b6c					_CNTSNotNegative:
.9b6c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9b6f	f0 15		beq $9b86			beq 	_CNTSNotFloat
.9b71	e8		inx				inx 								; round up
.9b72	a9 01		lda #$01			lda 	#1
.9b74	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.9b77	ca		dex				dex
.9b78	bd 28 04	lda $0428,x			lda		NSExponent,x
.9b7b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9b7e	a9 08		lda #$08			lda 	#NSTFloat
.9b80	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b83	20 7d a6	jsr $a67d			jsr 	FloatAdd
.9b86					_CNTSNotFloat:
.9b86	20 b4 9b	jsr $9bb4			jsr 	MakePlusTwoString
.9b89	20 5b a7	jsr $a75b			jsr 	FloatFractionalPart 		; get the fractional part
.9b8c	20 1f a8	jsr $a81f			jsr 	NSNormalise					; normalise , exit if zero
.9b8f	f0 21		beq $9bb2			beq 	_CNTSExit
.9b91	a9 2e		lda #$2e			lda 	#"."
.9b93	20 d2 9b	jsr $9bd2			jsr 	WriteDecimalBuffer 			; write decimal place
.9b96					_CNTSDecimal:
.9b96	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9b99	30 17		bmi $9bb2			bmi 	_CNTSExit
.9b9b	e8		inx				inx 								; x 10.0
.9b9c	a9 0a		lda #$0a			lda 	#10
.9b9e	20 37 9d	jsr $9d37			jsr 	NSMSetByte
.9ba1	a9 08		lda #$08			lda 	#NSTFloat
.9ba3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ba6	ca		dex				dex
.9ba7	20 e8 a7	jsr $a7e8			jsr 	FloatMultiply
.9baa	20 b4 9b	jsr $9bb4			jsr 	MakePlusTwoString
.9bad	20 5b a7	jsr $a75b			jsr 	FloatFractionalPart 		; get the fractional part
.9bb0	80 e4		bra $9b96			bra 	_CNTSDecimal 				; keep going.
.9bb2					_CNTSExit:
.9bb2	7a		ply				ply
.9bb3	60		rts				rts
.9bb4					MakePlusTwoString:
.9bb4	da		phx				phx
.9bb5	20 0c 9d	jsr $9d0c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9bb8	e8		inx				inx 								; access it
.9bb9	e8		inx				inx
.9bba	20 be a7	jsr $a7be			jsr 	FloatIntegerPart 			; make it an integer
.9bbd	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9bbf	20 27 a6	jsr $a627			jsr 	ConvertInt32
.9bc2	a2 00		ldx #$00			ldx	 	#0
.9bc4					_MPTSCopy:
.9bc4	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9bc7	20 d2 9b	jsr $9bd2			jsr 	WriteDecimalBuffer
.9bca	e8		inx				inx
.9bcb	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9bce	d0 f4		bne $9bc4			bne 	_MPTSCopy
.9bd0	fa		plx				plx
.9bd1	60		rts				rts
.9bd2					WriteDecimalBuffer:
.9bd2	da		phx				phx
.9bd3	ae 95 04	ldx $0495			ldx 	dbOffset
.9bd6	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9bd9	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9bdc	ee 95 04	inc $0495			inc 	dbOffset
.9bdf	fa		plx				plx
.9be0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9be1					Unary_Left:
.9be1	fa		plx				plx
.9be2	18		clc				clc 								; only one parameter
.9be3	20 58 9c	jsr $9c58			jsr 	SubstringInitial 			; set up.
.9be6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9be9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9bec	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9bef	80 2c		bra $9c1d			bra 	SubstringMain
.9bf1					Unary_Right:
.9bf1	fa		plx				plx
.9bf2	18		clc				clc 								; only one parameter
.9bf3	20 58 9c	jsr $9c58			jsr 	SubstringInitial 			; set up.
.9bf6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9bf9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9bfc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9bff	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9c02	b0 02		bcs $9c06			bcs 	_URNotUnderflow
.9c04	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9c06					_URNotUnderFlow:
.9c06	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9c09	80 12		bra $9c1d			bra 	SubStringMain
.9c0b					Unary_Mid:
.9c0b	fa		plx				plx
.9c0c	38		sec				sec 								; two parameters
.9c0d	20 58 9c	jsr $9c58			jsr 	SubstringInitial 			; set up.
.9c10	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9c13	f0 05		beq $9c1a			beq 	_UMError
.9c15	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9c18	80 03		bra $9c1d			bra 	SubStringMain
.9c1a					_UMError:
.9c1a	4c ab aa	jmp $aaab			jmp 	ArgumentError
.9c1d					SubStringMain:
.9c1d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9c20	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9c23	b0 2d		bcs $9c52			bcs 	_SSMNull 					; if so, return an empty string.
.9c25	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9c28	f0 28		beq $9c52			beq 	_SSMNull 					; return empty string.
.9c2a	18		clc				clc 								; add the offset +1 to the address and
.9c2b	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9c2e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9c31	85 36		sta $36				sta 	zTemp0
.9c33	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9c36	69 00		adc #$00			adc 	#0
.9c38	85 37		sta $37				sta 	zTemp0+1
.9c3a					_SSMNoCarry:
.9c3a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9c3d	20 c1 ad	jsr $adc1			jsr 	StringTempAllocate 			; allocate that many characters
.9c40	5a		phy				phy 								; save Y
.9c41	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9c43					_SSMCopy:
.9c43	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9c45	f0 09		beq $9c50			beq 	_SSMEString 				; no more to copy
.9c47	20 ff ad	jsr $adff			jsr 	StringTempWrite 			; and write it out.
.9c4a	c8		iny				iny
.9c4b	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9c4e	d0 f3		bne $9c43			bne 	_SSMCopy
.9c50					_SSMEString:
.9c50	7a		ply				ply
.9c51					_SSMExit:
.9c51	60		rts				rts
.9c52					_SSMNull:
.9c52	a9 00		lda #$00			lda 	#0
.9c54	20 c1 ad	jsr $adc1			jsr 	StringTempAllocate
.9c57	60		rts				rts
.9c58					SubstringInitial:
.9c58	da		phx				phx 								; save initial stack position
.9c59	08		php				php 								; save carry on stack indicating 2 parameters
.9c5a	20 94 9c	jsr $9c94			jsr 	EvaluateString 				; get a string
.9c5d	5a		phy				phy 								; calculate length to exponent.
.9c5e	a0 ff		ldy #$ff			ldy 	#$FF
.9c60					_SIFindLength:
.9c60	c8		iny				iny
.9c61	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c63	d0 fb		bne $9c60			bne 	_SIFindLength
.9c65	98		tya				tya
.9c66	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9c69	7a		ply				ply
.9c6a	e8		inx				inx
.9c6b	20 be a4	jsr $a4be			jsr 	CheckComma 					; comma next
.9c6e	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger 		; get next parameter
.9c71	28		plp				plp 								; is it the last parameter ?
.9c72	90 07		bcc $9c7b			bcc 	_SSIExit 					; if so, exit.
.9c74	e8		inx				inx
.9c75	20 be a4	jsr $a4be			jsr 	CheckComma 					; comma next
.9c78	20 cd 9c	jsr $9ccd			jsr 	Evaluate8BitInteger 		; get last parameter
.9c7b					_SSIExit:
.9c7b	fa		plx				plx
.9c7c	20 b6 a4	jsr $a4b6			jsr 	CheckRightBracket 			; check closing bracket
.9c7f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9c80					EvaluateValue:
.9c80	48		pha				pha
.9c81	20 86 95	jsr $9586			jsr		EvaluateExpression 			; expression
.9c84	20 9b 96	jsr $969b			jsr 	Dereference					; derefernce it
.9c87	68		pla				pla
.9c88	60		rts				rts
.9c89					EvaluateNumber:
.9c89	20 80 9c	jsr $9c80			jsr 	EvaluateValue 				; get a value
.9c8c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9c8f	29 10		and #$10			and 	#NSBIsString
.9c91	d0 16		bne $9ca9			bne 	HelperTypeError
.9c93	60		rts				rts
.9c94					EvaluateString:
.9c94	20 80 9c	jsr $9c80			jsr 	EvaluateValue 				; get a value
.9c97	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9c9a	29 10		and #$10			and 	#NSBIsString
.9c9c	f0 0b		beq $9ca9			beq 	HelperTypeError
.9c9e					CopyAddressToTemp0:
.9c9e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9ca1	85 36		sta $36				sta 	zTemp0
.9ca3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ca6	85 37		sta $37				sta 	zTemp0+1
.9ca8	60		rts				rts
.9ca9					HelperTypeError:
.9ca9	4c a6 aa	jmp $aaa6			jmp 	TypeError
.9cac					EvaluateInteger:
.9cac	20 89 9c	jsr $9c89			jsr 	EvaluateNumber
.9caf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9cb2	d0 0a		bne $9cbe			bne 	HelperValueError 			; if not, it's a float.
.9cb4	60		rts				rts
.9cb5					EvaluateUnsignedInteger:
.9cb5	20 ac 9c	jsr $9cac			jsr 	EvaluateInteger 			; check integer is +ve
.9cb8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9cbb	30 01		bmi $9cbe			bmi 	HelperValueError
.9cbd	60		rts				rts
.9cbe					HelperValueError:
.9cbe	4c ab aa	jmp $aaab			jmp 	ArgumentError
.9cc1					Evaluate16BitInteger:
.9cc1	20 b5 9c	jsr $9cb5			jsr	 	EvaluateUnsignedInteger		; get integer
.9cc4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9cc7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9cca	d0 f2		bne $9cbe			bne 	HelperValueError
.9ccc	60		rts				rts
.9ccd					Evaluate8BitInteger:
.9ccd	20 b5 9c	jsr $9cb5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9cd0	d0 ec		bne $9cbe			bne 	HelperValueError
.9cd2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9cd5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9cd8	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9cdb	d0 e1		bne $9cbe			bne 	HelperValueError
.9cdd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ce0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a938					Multiply8x8:
.a938	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a939	85 36		sta $36			  	sta 	zTemp0
.a93b	86 37		stx $37				stx 	zTemp0+1
.a93d	a9 00		lda #$00			lda 	#0
.a93f	a2 08		ldx #$08			ldx 	#8
.a941					_M88Loop:
.a941	90 03		bcc $a946			bcc 	_M88NoAdd
.a943	18		clc				clc
.a944	65 37		adc $37				adc 	zTemp0+1
.a946					_M88NoAdd:
.a946	6a		ror a				ror 	a
.a947	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a949	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a94a	d0 f5		bne $a941			bne 	_M88Loop
.a94c	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a94e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9ce1					NSMNegate:
.9ce1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ce4	49 80		eor #$80			eor 	#NSBIsNegative
.9ce6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ce9	60		rts				rts
.9cea					NSMNegateMantissa:
.9cea	38		sec				sec
.9ceb	a9 00		lda #$00			lda 	#0
.9ced	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9cf0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cf3	a9 00		lda #$00			lda 	#0
.9cf5	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9cf8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cfb	a9 00		lda #$00			lda 	#0
.9cfd	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9d00	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d03	a9 00		lda #$00			lda 	#0
.9d05	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9d08	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d0b	60		rts				rts
.9d0c					NSMShiftUpTwo:
.9d0c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d0f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9d12	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d15	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9d18	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9d1b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9d1e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9d21	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9d24	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9d27	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9d2a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d2d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9d30	60		rts				rts
.9d31					NSMSetZeroMantissaOnly:
.9d31	a9 00		lda #$00			lda 	#0
.9d33	80 08		bra $9d3d			bra 	NSMSetMantissa
.9d35					NSMSetZero:
.9d35	a9 00		lda #$00			lda 	#0
.9d37					NSMSetByte:
.9d37	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9d3a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9d3d					NSMSetMantissa:
.9d3d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9d40	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9d43	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9d46	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9d49	60		rts				rts
.9d4a					NSMShiftLeft:
.9d4a	18		clc				clc
.9d4b					NSMRotateLeft:
.9d4b	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9d4e	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9d51	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9d54	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9d57	60		rts				rts
.9d58					NSMShiftRight:
.9d58	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9d5b	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9d5e	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9d61	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9d64	60		rts				rts
.9d65					NSMIsZero:
.9d65	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9d68	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9d6b	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9d6e	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9d71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a94f					Assemble_ora:
.a94f	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a952	01					.byte $01
.a953					Assemble_and:
.a953	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a956	21					.byte $21
.a957					Assemble_eor:
.a957	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a95a	41					.byte $41
.a95b					Assemble_adc:
.a95b	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a95e	61					.byte $61
.a95f					Assemble_sta:
.a95f	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a962	81					.byte $81
.a963					Assemble_lda:
.a963	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a966	a1					.byte $a1
.a967					Assemble_cmp:
.a967	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a96a	c1					.byte $c1
.a96b					Assemble_sbc:
.a96b	20 a7 84	jsr $84a7		jsr	AssembleGroup1
>a96e	e1					.byte $e1
.a96f					Assemble_asl:
.a96f	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a972	02					.byte $02
>a973	75					.byte $75
.a974					Assemble_rol:
.a974	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a977	22					.byte $22
>a978	75					.byte $75
.a979					Assemble_lsr:
.a979	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a97c	42					.byte $42
>a97d	75					.byte $75
.a97e					Assemble_ror:
.a97e	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a981	62					.byte $62
>a982	75					.byte $75
.a983					Assemble_stx:
.a983	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a986	82					.byte $82
>a987	50					.byte $50
.a988					Assemble_ldx:
.a988	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a98b	a2					.byte $a2
>a98c	d0					.byte $d0
.a98d					Assemble_dec:
.a98d	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a990	c2					.byte $c2
>a991	55					.byte $55
.a992					Assemble_inc:
.a992	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a995	e2					.byte $e2
>a996	55					.byte $55
.a997					Assemble_stz:
.a997	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a99a	60					.byte $60
>a99b	44					.byte $44
.a99c					Assemble_bit:
.a99c	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a99f	20					.byte $20
>a9a0	55					.byte $55
.a9a1					Assemble_sty:
.a9a1	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9a4	80					.byte $80
>a9a5	54					.byte $54
.a9a6					Assemble_ldy:
.a9a6	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9a9	a0					.byte $a0
>a9aa	d5					.byte $d5
.a9ab					Assemble_cpy:
.a9ab	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9ae	c0					.byte $c0
>a9af	d4					.byte $d4
.a9b0					Assemble_cpx:
.a9b0	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9b3	e0					.byte $e0
>a9b4	d0					.byte $d0
.a9b5					Assemble_tsb:
.a9b5	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9b8	00					.byte $00
>a9b9	50					.byte $50
.a9ba					Assemble_trb:
.a9ba	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9bd	10					.byte $10
>a9be	50					.byte $50
.a9bf					Assemble_jsr:
.a9bf	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9c2	14					.byte $14
>a9c3	10					.byte $10
.a9c4					Assemble_jmp:
.a9c4	20 ae 84	jsr $84ae		jsr	AssembleGroup2
>a9c7	40					.byte $40
>a9c8	10					.byte $10
.a9c9					Assemble_bpl:
.a9c9	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9cc	10					.byte $10
.a9cd					Assemble_bmi:
.a9cd	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9d0	30					.byte $30
.a9d1					Assemble_bvc:
.a9d1	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9d4	50					.byte $50
.a9d5					Assemble_bvs:
.a9d5	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9d8	70					.byte $70
.a9d9					Assemble_bcc:
.a9d9	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9dc	90					.byte $90
.a9dd					Assemble_bcs:
.a9dd	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9e0	b0					.byte $b0
.a9e1					Assemble_bne:
.a9e1	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9e4	d0					.byte $d0
.a9e5					Assemble_beq:
.a9e5	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9e8	f0					.byte $f0
.a9e9					Assemble_bra:
.a9e9	20 ff 84	jsr $84ff		jsr	AssembleGroup3
>a9ec	80					.byte $80
.a9ed					Assemble_brk:
.a9ed	20 35 85	jsr $8535		jsr	AssembleGroup4
>a9f0	00					.byte $00
.a9f1					Assemble_php:
.a9f1	20 35 85	jsr $8535		jsr	AssembleGroup4
>a9f4	08					.byte $08
.a9f5					Assemble_clc:
.a9f5	20 35 85	jsr $8535		jsr	AssembleGroup4
>a9f8	18					.byte $18
.a9f9					Assemble_plp:
.a9f9	20 35 85	jsr $8535		jsr	AssembleGroup4
>a9fc	28					.byte $28
.a9fd					Assemble_sec:
.a9fd	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa00	38					.byte $38
.aa01					Assemble_rti:
.aa01	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa04	40					.byte $40
.aa05					Assemble_pha:
.aa05	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa08	48					.byte $48
.aa09					Assemble_cli:
.aa09	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa0c	58					.byte $58
.aa0d					Assemble_phy:
.aa0d	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa10	5a					.byte $5a
.aa11					Assemble_rts:
.aa11	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa14	60					.byte $60
.aa15					Assemble_pla:
.aa15	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa18	68					.byte $68
.aa19					Assemble_sei:
.aa19	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa1c	78					.byte $78
.aa1d					Assemble_ply:
.aa1d	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa20	7a					.byte $7a
.aa21					Assemble_dey:
.aa21	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa24	88					.byte $88
.aa25					Assemble_txa:
.aa25	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa28	8a					.byte $8a
.aa29					Assemble_tya:
.aa29	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa2c	98					.byte $98
.aa2d					Assemble_txs:
.aa2d	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa30	9a					.byte $9a
.aa31					Assemble_tay:
.aa31	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa34	a8					.byte $a8
.aa35					Assemble_tax:
.aa35	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa38	aa					.byte $aa
.aa39					Assemble_clv:
.aa39	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa3c	b8					.byte $b8
.aa3d					Assemble_tsx:
.aa3d	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa40	ba					.byte $ba
.aa41					Assemble_iny:
.aa41	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa44	c8					.byte $c8
.aa45					Assemble_dex:
.aa45	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa48	ca					.byte $ca
.aa49					Assemble_cld:
.aa49	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa4c	d8					.byte $d8
.aa4d					Assemble_phx:
.aa4d	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa50	da					.byte $da
.aa51					Assemble_stp:
.aa51	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa54	db					.byte $db
.aa55					Assemble_inx:
.aa55	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa58	e8					.byte $e8
.aa59					Assemble_nop:
.aa59	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa5c	ea					.byte $ea
.aa5d					Assemble_sed:
.aa5d	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa60	f8					.byte $f8
.aa61					Assemble_plx:
.aa61	20 35 85	jsr $8535		jsr	AssembleGroup4
>aa64	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.aa65					DecimalScalarTable:
>aa65	66 66 66 66				.dword $66666666 ; 0.1
>aa69	de					.byte $de
>aa6a	1f 85 eb 51				.dword $51eb851f ; 0.01
>aa6e	db					.byte $db
>aa6f	4c 37 89 41				.dword $4189374c ; 0.001
>aa73	d8					.byte $d8
>aa74	ac 8b db 68				.dword $68db8bac ; 0.0001
>aa78	d4					.byte $d4
>aa79	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>aa7d	d1					.byte $d1
>aa7e	83 de 1b 43				.dword $431bde83 ; 1e-06
>aa82	ce					.byte $ce
>aa83	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aa87	ca					.byte $ca
>aa88	89 3b e6 55				.dword $55e63b89 ; 1e-08
>aa8c	c7					.byte $c7
>aa8d	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>aa91	c4					.byte $c4
>aa92	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>aa96	c0					.byte $c0
>aa97	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>aa9b	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.aa9c					SyntaxError:
.aa9c	a9 02		lda #$02		lda	#2
.aa9e	4c 7d 91	jmp $917d		jmp	ErrorHandler
.aaa1					RangeError:
.aaa1	a9 04		lda #$04		lda	#4
.aaa3	4c 7d 91	jmp $917d		jmp	ErrorHandler
.aaa6					TypeError:
.aaa6	a9 05		lda #$05		lda	#5
.aaa8	4c 7d 91	jmp $917d		jmp	ErrorHandler
.aaab					ArgumentError:
.aaab	a9 07		lda #$07		lda	#7
.aaad	4c 7d 91	jmp $917d		jmp	ErrorHandler
.aab0					NotDoneError:
.aab0	a9 0c		lda #$0c		lda	#12
.aab2	4c 7d 91	jmp $917d		jmp	ErrorHandler
.aab5					ErrorText:
>aab5	42 72 65 61 6b 00			.text	"Break",0
>aabb	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>aac3	72 72 6f 72 00
>aac8	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aad0	20 62 79 20 7a 65 72 6f 00
>aad9	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aae1	61 6e 67 65 00
>aae6	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aaee	6d 61 74 63 68 00
>aaf4	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aafc	65 6d 6f 72 79 00
>ab02	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ab0a	61 72 67 75 6d 65 6e 74 00
>ab13	53 74 6f 70 00				.text	"Stop",0
>ab18	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ab20	6f 6f 20 6c 6f 6e 67 00
>ab28	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ab30	6e 20 66 61 69 6c 65 64 00
>ab39	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ab41	61 74 61 00
>ab45	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ab4d	65 6e 74 65 64 00
>ab53	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ab5b	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ab67	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ab6f	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ab7c	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ab84	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ab91	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ab99	68 6f 75 74 20 57 68 69 6c 65 00
>aba4	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>abac	68 6f 75 74 20 46 6f 72 00
>abb5	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>abbd	61 63 6b 20 66 75 6c 6c 00
>abc6	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>abce	75 63 74 75 72 65 00
>abd5	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>abdd	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>abea	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>abf2	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ac00	41 72 72 61 79 20 73 69			.text	"Array size",0
>ac08	7a 65 00
>ac0b	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ac13	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ac1b	42 75 69 6c 74 20 53 75			.text "Built Sunday 09-Oct-2022. Build 779."
>ac23	6e 64 61 79 20 30 39 2d 4f 63 74 2d 32 30 32 32
>ac33	2e 20 42 75 69 6c 64 20 37 37 39 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ac3f					EXTPrintCharacter:
.ac3f	48		pha				pha
.ac40	da		phx				phx
.ac41	5a		phy				phy
.ac42	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ac45	7a		ply				ply
.ac46	fa		plx				plx
.ac47	68		pla				pla
.ac48	60		rts				rts
.ac49					EXTInputSingleCharacter:
.ac49	da		phx				phx
.ac4a	5a		phy				phy
.ac4b					_EISCWait:
.ac4b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ac4e	c9 00		cmp #$00			cmp 	#0
.ac50	f0 f9		beq $ac4b			beq 	_EISCWait
.ac52	7a		ply				ply
.ac53	fa		plx				plx
.ac54	60		rts				rts
.ac55					EXTInputLine:
.ac55	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ac57					_ILLoop:
.ac57	da		phx				phx 								; read character in
.ac58	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ac5b	fa		plx				plx
.ac5c	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ac5e	f0 12		beq $ac72			beq 	_ILBackspace
.ac60	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ac62	f0 15		beq $ac79			beq 	_ILExit
.ac64	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ac66	90 ef		bcc $ac57			bcc 	_ILLoop
.ac68	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ac6a	f0 eb		beq $ac57			beq 	_ILLoop
.ac6c	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ac6f	e8		inx				inx
.ac70	80 e5		bra $ac57			bra 	_ILLoop
.ac72					_ILBackspace:
.ac72	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ac74	f0 e1		beq $ac57			beq 	_ILLoop
.ac76	ca		dex				dex 								; back one.
.ac77	80 de		bra $ac57			bra 	_ILLoop
.ac79					_ILExit:
.ac79	20 3f ac	jsr $ac3f			jsr 	EXTPrintCharacter
.ac7c	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ac7f	60		rts				rts
.ac80					EXTBreakCheck:
.ac80	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ac83					MemoryDeleteLine:
.ac83	20 a2 ac	jsr $aca2			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac86	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ac88	a8		tay				tay
.ac89					_MDDLLoop:
.ac89	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ac8b	92 30		sta ($30)			sta 	(codePtr)
.ac8d	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ac8f	c5 3a		cmp $3a				cmp 	zTemp2
.ac91	d0 07		bne $ac9a			bne 	_MDLDLNext
.ac93	a5 31		lda $31				lda 	codePtr+1
.ac95	c5 3b		cmp $3b				cmp 	zTemp2+1
.ac97	d0 01		bne $ac9a			bne 	_MDLDLNext
.ac99					_MDDLExit:
.ac99	60		rts				rts
.ac9a					_MDLDLNext:
.ac9a	e6 30		inc $30				inc 	codePtr						; next byte
.ac9c	d0 eb		bne $ac89			bne 	_MDDLLoop
.ac9e	e6 31		inc $31				inc 	codePtr+1
.aca0	80 e7		bra $ac89			bra 	_MDDLLoop
.aca2					IMemoryFindEnd:
.aca2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aca4	85 3a		sta $3a				sta 	0+zTemp2
.aca6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aca8	85 3b		sta $3b				sta 	1+zTemp2
.acaa					_MDLFELoop:
.acaa	b2 3a		lda ($3a)			lda 	(zTemp2)
.acac	f0 0b		beq $acb9			beq 	_MDLFEExit
.acae	18		clc				clc
.acaf	65 3a		adc $3a				adc 	zTemp2
.acb1	85 3a		sta $3a				sta 	zTemp2
.acb3	90 f5		bcc $acaa			bcc 	_MDLFELoop
.acb5	e6 3b		inc $3b				inc 	zTemp2+1
.acb7	80 f1		bra $acaa			bra 	_MDLFELoop
.acb9					_MDLFEExit:
.acb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.acba					MemoryInsertLine:
.acba	08		php				php
.acbb	20 a2 ac	jsr $aca2			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.acbe	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.acc0	1a		inc a				inc 	a
.acc1	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.acc3	b0 36		bcs $acfb			bcs 	_MDLIError
.acc5	28		plp				plp
.acc6	90 08		bcc $acd0			bcc 	_MDLIFound
.acc8	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.acca	85 30		sta $30				sta 	codePtr
.accc	a5 3b		lda $3b				lda 	zTemp2+1
.acce	85 31		sta $31				sta 	codePtr+1
.acd0					_MDLIFound:
.acd0	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.acd3	a8		tay				tay
.acd4					_MDLIInsert:
.acd4	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.acd6	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.acd8	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.acda	c5 3a		cmp $3a				cmp 	zTemp2
.acdc	d0 06		bne $ace4			bne 	_MDLINext
.acde	a5 31		lda $31				lda 	codePtr+1
.ace0	c5 3b		cmp $3b				cmp 	zTemp2+1
.ace2	f0 0a		beq $acee			beq 	_MDLIHaveSpace
.ace4					_MDLINext:
.ace4	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.ace6	d0 02		bne $acea			bne 	_MDLINoBorrow
.ace8	c6 3b		dec $3b				dec 	zTemp2+1
.acea					_MDLINoBorrow:
.acea	c6 3a		dec $3a				dec 	zTemp2
.acec	80 e6		bra $acd4			bra 	_MDLIInsert
.acee					_MDLIHaveSpace:
.acee	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.acf1	88		dey				dey 								; from offset-1 to 0
.acf2					_MDLICopy:
.acf2	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.acf5	91 30		sta ($30),y			sta 	(codePtr),y
.acf7	88		dey				dey
.acf8	10 f8		bpl $acf2			bpl 	_MDLICopy
.acfa	60		rts				rts
.acfb					_MDLIError:
.acfb	a9 06		lda #$06		lda	#6
.acfd	4c 7d 91	jmp $917d		jmp	ErrorHandler
.ad00					MDLAppendLine:
.ad00	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ad02	85 36		sta $36				sta 	zTemp0
.ad04	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad06	85 38		sta $38				sta 	0+zTemp1
.ad08	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad0a	85 39		sta $39				sta 	1+zTemp1
.ad0c	b2 38		lda ($38)			lda 	(zTemp1)
.ad0e	d0 0a		bne $ad1a			bne 	_MDLANoInitialise
.ad10	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad12	8d 4b 06	sta $064b			sta 	0+AppendPointer
.ad15	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad17	8d 4c 06	sta $064c			sta 	1+AppendPointer
.ad1a					_MDLANoInitialise:
.ad1a	18		clc				clc
.ad1b	ad 4b 06	lda $064b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ad1e	85 38		sta $38				sta 	zTemp1
.ad20	72 36		adc ($36)			adc 	(zTemp0)
.ad22	8d 4b 06	sta $064b			sta 	AppendPointer
.ad25	ad 4c 06	lda $064c			lda 	AppendPointer+1
.ad28	85 39		sta $39				sta 	zTemp1+1
.ad2a	69 00		adc #$00			adc 	#0
.ad2c	8d 4c 06	sta $064c			sta 	AppendPointer+1
.ad2f	a0 00		ldy #$00			ldy 	#0
.ad31					_MDLACopy:
.ad31	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ad33	91 38		sta ($38),y			sta 	(zTemp1),y
.ad35	c8		iny				iny
.ad36	98		tya				tya
.ad37	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ad39	d0 f6		bne $ad31			bne 	_MDLACopy
.ad3b	a9 00		lda #$00			lda 	#0 							; end of program.
.ad3d	91 38		sta ($38),y			sta 	(zTemp1),y
.ad3f	60		rts				rts
.064b					AppendPointer:
>064b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9d72					MemoryNew:
.9d72	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9d74	85 30		sta $30				sta 	codePtr
.9d76	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d78	85 31		sta $31				sta 	codePtr+1
.9d7a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9d7c	92 30		sta ($30)			sta 	(codePtr)
.9d7e	60		rts				rts
.9d7f					MemoryInline:
.9d7f	98		tya				tya 								; put address into stack,x
.9d80	18		clc				clc
.9d81	65 30		adc $30				adc 	codePtr
.9d83	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d86	a5 31		lda $31				lda 	codePtr+1
.9d88	69 00		adc #$00			adc 	#0
.9d8a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d8d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9d90	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9d93	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9d94					MemorySearch:
.9d94	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9d96	86 37		stx $37				stx 	zTemp0+1
.9d98	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9d9a	85 30		sta $30				sta 	codePtr
.9d9c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9d9e	85 31		sta $31				sta 	codePtr+1
.9da0					_MTAXLoop:
.9da0	b2 30		lda ($30)			lda 	(codePtr)
.9da2	18		clc				clc
.9da3	f0 21		beq $9dc6			beq 	_MTAXExit 					; reached end, exit with CC.
.9da5	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9da7	b1 30		lda ($30),y			lda 	(codePtr),y
.9da9	38		sec				sec
.9daa	e5 36		sbc $36				sbc 	zTemp0
.9dac	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9dae	c8		iny				iny 								; do the MSB
.9daf	b1 30		lda ($30),y			lda 	(codePtr),y
.9db1	e5 37		sbc $37				sbc 	zTemp0+1
.9db3	05 38		ora $38				ora 	zTemp1
.9db5	f0 0f		beq $9dc6			beq 	_MTAXExit	 				; found
.9db7	b0 0d		bcs $9dc6			bcs 	_MTAXExit 					; current < required exit
.9db9	18		clc				clc
.9dba	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9dbc	65 30		adc $30				adc 	codePtr
.9dbe	85 30		sta $30				sta 	codePtr
.9dc0	90 02		bcc $9dc4			bcc 	_CREExit
.9dc2	e6 31		inc $31				inc 	codePtr+1
.9dc4					_CREExit:
.9dc4	80 da		bra $9da0			bra 	_MTAXLoop
.9dc6					_MTAXExit:
.9dc6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9dc7					StackPushByte:
.9dc7	48		pha				pha 								; save byte
.9dc8	a5 34		lda $34				lda 	BasicStack
.9dca	d0 09		bne $9dd5			bne 	_SPBNoBorrow
.9dcc	c6 35		dec $35				dec 	BasicStack+1
.9dce	48		pha				pha
.9dcf	a5 35		lda $35				lda 	BasicStack+1
.9dd1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9dd3	90 06		bcc $9ddb			bcc 	_SPBMemory
.9dd5					_SPBNoBorrow:
.9dd5	c6 34		dec $34				dec 	BasicStack
.9dd7	68		pla				pla 								; get back and write
.9dd8	92 34		sta ($34)			sta 	(BasicStack)
.9dda	60		rts				rts
.9ddb					_SPBMemory:
.9ddb	a9 12		lda #$12		lda	#18
.9ddd	4c 7d 91	jmp $917d		jmp	ErrorHandler
.9de0					StackPopByte:
.9de0	b2 34		lda ($34)			lda 	(BasicStack)
.9de2	e6 34		inc $34				inc 	BasicStack
.9de4	d0 02		bne $9de8			bne 	_SPBNoCarry
.9de6	e6 35		inc $35				inc 	BasicStack+1
.9de8					_SPBNoCarry:
.9de8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9de9					StackOpen:
.9de9	48		pha				pha 								; save frame byte
.9dea	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9dec	0a		asl a				asl 	a 							; claim twice this for storage
.9ded	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9def	38		sec				sec 								; so basically subtracting from
.9df0	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9df2	85 34		sta $34				sta 	basicStack
.9df4	b0 08		bcs $9dfe			bcs 	_SONoBorrow
.9df6	c6 35		dec $35				dec 	basicStack+1
.9df8	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9dfa	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9dfc	90 04		bcc $9e02			bcc 	_SOMemory
.9dfe					_SONoBorrow:
.9dfe	68		pla				pla 								; get marker back and write at TOS
.9dff	92 34		sta ($34)			sta 	(basicStack)
.9e01	60		rts				rts
.9e02					_SOMemory:
.9e02	a9 12		lda #$12		lda	#18
.9e04	4c 7d 91	jmp $917d		jmp	ErrorHandler
.9e07					StackClose:
.9e07	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9e09	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9e0b	0a		asl a				asl 	a 							; claim twice this.
.9e0c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9e0e	85 34		sta $34				sta 	basicStack
.9e10	90 02		bcc $9e14			bcc 	_SCExit
.9e12	e6 35		inc $35				inc 	basicStack+1
.9e14					_SCExit:
.9e14	60		rts				rts
.9e15					StackCheckFrame:
.9e15	48		pha				pha
.9e16					_StackRemoveLocals:
.9e16	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9e18	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9e1a	b0 05		bcs $9e21			bcs 	_SCNoLocal
.9e1c	20 5d a4	jsr $a45d			jsr 	LocalPopValue
.9e1f	80 f5		bra $9e16			bra 	_StackRemoveLocals
.9e21					_SCNoLocal:
.9e21	68		pla				pla
.9e22	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9e24	29 f0		and #$f0			and 	#$F0 						; check type bits
.9e26	d0 01		bne $9e29			bne 	_SCFError 					; different, we have structures mixed up
.9e28	60		rts				rts
.9e29					_SCFError:
.9e29	8a		txa				txa 								; report error X
.9e2a	4c 7d 91	jmp $917d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9e2d					STKSaveCodePosition:
.9e2d	5a		phy				phy
.9e2e	98		tya				tya 								; save Y
.9e2f	a0 05		ldy #$05			ldy 	#5
.9e31	91 34		sta ($34),y			sta 	(basicStack),y
.9e33	88		dey				dey 								; save Code Pointer
.9e34					_STKSaveLoop:
.9e34	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9e37	91 34		sta ($34),y			sta 	(basicStack),y
.9e39	88		dey				dey
.9e3a	d0 f8		bne $9e34			bne 	_STKSaveLoop
.9e3c	7a		ply				ply
.9e3d	60		rts				rts
.9e3e					STKLoadCodePosition:
.9e3e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9e40					_STKLoadLoop:
.9e40	b1 34		lda ($34),y			lda 	(basicStack),y
.9e42	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9e45	c8		iny				iny
.9e46	c0 05		cpy #$05			cpy 	#5
.9e48	d0 f6		bne $9e40			bne 	_STKLoadLoop
.9e4a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9e4c	a8		tay				tay
.9e4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9e4e					StackReset:
.9e4e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9e50	85 34		sta $34				sta 	0+basicStack
.9e52	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9e54	85 35		sta $35				sta 	1+basicStack
.9e56	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9e58	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9e5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.ad40					StringConcrete:
.ad40	5a		phy				phy 								; save position on stack
.ad41	20 44 9a	jsr $9a44			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ad44	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ad47	85 38		sta $38				sta 	zTemp1
.ad49	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ad4c	85 39		sta $39				sta 	zTemp1+1
.ad4e	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.ad50					_SALength:
.ad50	c8		iny				iny
.ad51	b1 38		lda ($38),y			lda 	(zTemp1),y
.ad53	d0 fb		bne $ad50			bne 	_SALength
.ad55	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ad57	b0 3f		bcs $ad98			bcs 	_SALengthError
.ad59	98		tya				tya 				 				; length of the new string
.ad5a	18		clc				clc
.ad5b	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ad5d	90 02		bcc $ad61			bcc 	_SAHaveLength
.ad5f	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ad61					_SAHaveLength:
.ad61	48		pha				pha 								; save length.
.ad62	38		sec				sec
.ad63	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ad65	6d 8e 04	adc $048e			adc 	StringMemory
.ad68	8d 8e 04	sta $048e			sta 	StringMemory
.ad6b	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ad6d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ad70	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ad72	6d 8f 04	adc $048f			adc 	StringMemory+1
.ad75	8d 8f 04	sta $048f			sta 	StringMemory+1
.ad78	85 3b		sta $3b				sta 	zTemp2+1
.ad7a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad7d	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ad7e	38		sec				sec
.ad7f	e9 03		sbc #$03			sbc 	#3
.ad81	92 3a		sta ($3a)			sta 	(zTemp2)
.ad83	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ad85	a0 01		ldy #$01			ldy 	#1
.ad87	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ad89					_SACopyNewString:
.ad89	a0 00		ldy #$00			ldy 	#0
.ad8b					_SACopyNSLoop:
.ad8b	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.ad8d	c8		iny				iny 								; write two on in string storage
.ad8e	c8		iny				iny
.ad8f	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ad91	88		dey				dey 								; this makes it one one.
.ad92	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.ad94	d0 f5		bne $ad8b			bne 	_SACopyNSLoop
.ad96	7a		ply				ply
.ad97	60		rts				rts
.ad98					_SALengthError:
.ad98	a9 09		lda #$09		lda	#9
.ad9a	4c 7d 91	jmp $917d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.ad9d					StringSystemInitialise:
.ad9d	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.ad9f	8d 8e 04	sta $048e			sta 	0+StringMemory
.ada2	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.ada4	8d 8f 04	sta $048f			sta 	1+StringMemory
.ada7	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.adaa	60		rts				rts
.adab					StringSpaceInitialise:
.adab	20 44 9a	jsr $9a44			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.adae	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.adb0	8d 90 04	sta $0490			sta 	StringInitialised
.adb3	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.adb6	8d 91 04	sta $0491			sta 	StringTempPointer
.adb9	ad 8f 04	lda $048f			lda 	StringMemory+1
.adbc	3a		dec a				dec 	a
.adbd	8d 92 04	sta $0492			sta 	StringTempPointer+1
.adc0	60		rts				rts
.adc1					StringTempAllocate:
.adc1	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.adc3	b0 35		bcs $adfa			bcs 	_STALength
.adc5	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.adc8	30 05		bmi $adcf			bmi 	_STAAllocate
.adca	48		pha				pha 								; save value to subtract.
.adcb	20 ab ad	jsr $adab			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.adce	68		pla				pla 								; restore it
.adcf					_STAAllocate:
.adcf	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.add1	18		clc				clc  								; deliberate allows one more
.add2	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.add5	8d 91 04	sta $0491			sta 	StringTempPointer
.add8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.addb	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.addd	ad 92 04	lda $0492			lda 	StringTempPointer+1
.ade0	69 ff		adc #$ff			adc 	#$FF
.ade2	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ade5	85 3d		sta $3d				sta 	zsTemp+1
.ade7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.adea	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.aded	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.adf0	a9 10		lda #$10			lda 	#NSTString
.adf2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.adf5	a9 00		lda #$00			lda 	#0 							; clear the target string
.adf7	92 3c		sta ($3c)			sta 	(zsTemp)
.adf9	60		rts				rts
.adfa					_STALength:
.adfa	a9 09		lda #$09		lda	#9
.adfc	4c 7d 91	jmp $917d		jmp	ErrorHandler
.adff					StringTempWrite:
.adff	48		pha				pha
.ae00	92 3c		sta ($3c)			sta 	(zsTemp)
.ae02	e6 3c		inc $3c				inc 	zsTemp
.ae04	d0 02		bne $ae08			bne 	_STWNoCarry
.ae06	e6 3d		inc $3d				inc 	zsTemp+1
.ae08					_STWNoCarry:
.ae08	a9 00		lda #$00			lda 	#0
.ae0a	92 3c		sta ($3c)			sta 	(zsTemp)
.ae0c	68		pla				pla
.ae0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9e5b					BackloadProgram:
.9e5b	a2 ff		ldx #$ff			ldx 	#$FF
.9e5d	20 85 9e	jsr $9e85			jsr 	BLReadByte
.9e60	30 1f		bmi $9e81			bmi 	_BPExit
.9e62					_BPCopy:
.9e62	e8		inx				inx  								; copy byte in
.9e63	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9e66	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9e69	20 85 9e	jsr $9e85			jsr 	BLReadByte 					; read next byte
.9e6c	30 0a		bmi $9e78			bmi 	_BPEndLine 					; -ve = EOL
.9e6e	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9e70	d0 02		bne $9e74			bne 	_BPNotTab
.9e72	a9 20		lda #$20			lda 	#' '
.9e74					_BPNotTab:
.9e74	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9e76	b0 ea		bcs $9e62			bcs 	_BPCopy
.9e78					_BPEndLine:
.9e78	20 ae a1	jsr $a1ae			jsr 	TokeniseLine 				; tokenise the line.
.9e7b	38		sec				sec 								; append not insert
.9e7c	20 ba ac	jsr $acba			jsr 	MemoryInsertLine 			; append to current program
.9e7f	80 da		bra $9e5b			bra 	BackloadProgram
.9e81					_BPExit:
.9e81	20 ad 87	jsr $87ad			jsr 	ClearCommand 				; clear variables etc.
.9e84	60		rts				rts
.9e85					BLReadByte:
.9e85					_BLLoad:
.9e85	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9e88	ee 86 9e	inc $9e86			inc 	_BLLoad+1
.9e8b	d0 03		bne $9e90			bne 	_BLNoCarry
.9e8d	ee 87 9e	inc $9e87			inc 	_BLLoad+2
.9e90					_BLNoCarry:
.9e90	c9 00		cmp #$00			cmp 	#0
.9e92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9e93					TokeniseSearchTable:
.9e93	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9e95	85 36		sta $36				sta 	zTemp0
.9e97	a0 00		ldy #$00			ldy 	#0
.9e99	a9 80		lda #$80			lda 	#$80 						; token #
.9e9b	85 38		sta $38				sta 	zTemp1
.9e9d					_TSTLoop:
.9e9d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9e9f	30 49		bmi $9eea			bmi 	_TSTFail 					; -ve = end of table
.9ea1	f0 2e		beq $9ed1			beq 	_TSTNext 					; zero, check next it's a dummy
.9ea3	c8		iny				iny 								; get the hash
.9ea4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ea6	88		dey				dey
.9ea7	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9eaa	d0 25		bne $9ed1			bne 	_TSTNext
.9eac	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9eaf	38		sec				sec
.9eb0	ed 80 04	sbc $0480			sbc 	identStart
.9eb3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9eb5	d0 1a		bne $9ed1			bne 	_TSTNext
.9eb7	5a		phy				phy 								; save Y , we might fail
.9eb8	c8		iny				iny 								; point to text
.9eb9	c8		iny				iny
.9eba	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9ebd					_TSTCompareName:
.9ebd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9ec0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9ec2	d0 0c		bne $9ed0			bne 	_TSTNextPullY 				; fail, pullY and do next
.9ec4	e8		inx				inx
.9ec5	c8		iny				iny
.9ec6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9ec9	d0 f2		bne $9ebd			bne 	_TSTCompareName
.9ecb	7a		ply				ply 								; throw Y
.9ecc	a5 38		lda $38				lda 	zTemp1 						; get token #
.9ece	38		sec				sec 								; return with CS = passed.
.9ecf	60		rts				rts
.9ed0					_TSTNextPullY:
.9ed0	7a		ply				ply 								; restore current, fall through.
.9ed1					_TSTNext:
.9ed1	e6 38		inc $38				inc 	zTemp1 						; token counter
.9ed3	98		tya				tya
.9ed4	18		clc				clc
.9ed5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9ed7	1a		inc a				inc 	a 							; +1
.9ed8	1a		inc a				inc 	a 							; +2
.9ed9	a8		tay				tay
.9eda	10 c1		bpl $9e9d			bpl 	_TSTLoop 					; if Y < $80 loop back
.9edc	98		tya				tya 								; add Y to zTemp0 and reset Y
.9edd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9edf	18		clc				clc  								; but have tables > 255 bytes
.9ee0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9ee2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9ee4	90 b7		bcc $9e9d			bcc 	_TSTLoop
.9ee6	e6 37		inc $37				inc 	zTemp0+1
.9ee8	80 b3		bra $9e9d			bra 	_TSTLoop
.9eea					_TSTFail:
.9eea	18		clc				clc
.9eeb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9eec					KeywordSet0:
>9eec	00 65					.text	0,$65,""               ; $80 !0:EOF
>9eee	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ef0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9ef2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9ef8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9f00	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9f06	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9f0d	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9f14	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9f1b	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9f21	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9f29	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9f31	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9f37	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9f3e	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9f44	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9f4c	28
>9f4d	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9f55	28
>9f56	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9f5c	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9f62	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9f68	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9f6f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9f75	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9f7b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9f80	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9f84	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9f8a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9f92	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9f99	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9fa0	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9fa8	43
>9fa9	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9faf	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9fb5	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9fbc	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9fc2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9fc8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9fcd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9fd3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9fd8	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9fe0	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9fe6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9fed	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9ff3	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9ff8	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9fff	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a006	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a00c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a011	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a019	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a01d	ff					.text	$FF
.a01e					KeywordSet1:
>a01e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a020	00 58					.text	0,$58,""               ; $81 !1:SH1
>a022	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a024	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a02c	4c 45
>a02e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a036	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a03d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a042	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a048	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a04d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a055	45
>a056	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a05b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a061	ff					.text	$FF
.a062					KeywordSet2:
>a062	00 65					.text	0,$65,""               ; $80 !0:EOF
>a064	00 58					.text	0,$58,""               ; $81 !1:SH1
>a066	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a068	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a06d	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a072	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a077	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a07c	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a081	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a086	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a08b	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a090	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a095	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a09a	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a09f	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a0a4	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a0a9	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a0ae	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a0b3	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a0b8	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a0bd	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a0c2	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a0c7	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a0cc	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a0d1	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a0d6	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a0db	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a0e0	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a0e5	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a0ea	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a0ef	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a0f4	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a0f9	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a0fe	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a103	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a108	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a10d	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a112	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a117	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a11c	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a121	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a126	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a12b	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a130	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a135	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a13a	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a13f	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a144	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a149	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a14e	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a153	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a158	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a15d	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a162	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a167	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a16c	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a171	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a176	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a17b	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a180	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a185	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a18a	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a18f	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a194	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a199	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a19e	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a1a3	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a1a8	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a1ad	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a1ae					TokeniseLine:
.a1ae	20 36 a3	jsr $a336			jsr 	FixLineBufferCase 			; fix line case
.a1b1	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a1b3	8d a6 04	sta $04a6			sta 	tokenOffset
.a1b6	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a1b9	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a1bc	a2 ff		ldx #$ff			ldx 	#$FF
.a1be					_TKFindFirst:
.a1be	e8		inx				inx
.a1bf	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a1c2	f0 79		beq $a23d			beq 	_TKExit
.a1c4	c9 20		cmp #$20			cmp 	#' '
.a1c6	90 f6		bcc $a1be			bcc 	_TKFindFirst
.a1c8	c9 30		cmp #$30			cmp 	#'0'
.a1ca	90 07		bcc $a1d3			bcc 	_TKNoLineNumber
.a1cc	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1ce	b0 03		bcs $a1d3			bcs 	_TKNoLineNumber
.a1d0	20 60 a3	jsr $a360			jsr 	TokeniseExtractLineNumber
.a1d3					_TKNoLineNumber:
.a1d3					_TKTokeniseLoop:
.a1d3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a1d6	f0 65		beq $a23d			beq 	_TKExit
.a1d8	e8		inx				inx
.a1d9	c9 20		cmp #$20			cmp 	#' '
.a1db	f0 f6		beq $a1d3			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a1dd	ca		dex				dex 								; undo last get, A contains character, X is position.
.a1de	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a1e0	f0 61		beq $a243			beq 	_TKTokeniseIdentifier
.a1e2	c9 41		cmp #$41			cmp 	#'A'
.a1e4	90 04		bcc $a1ea			bcc 	_TKTokenisePunctuation
.a1e6	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a1e8	90 59		bcc $a243			bcc 	_TKTokeniseIdentifier
.a1ea					_TKTokenisePunctuation:
.a1ea	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a1ec	f0 27		beq $a215			beq 	_TKString
.a1ee	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a1f0	f0 28		beq $a21a			beq 	_TKHexConstant
.a1f2	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a1f4	f0 29		beq $a21f			beq 	_TKCheckDouble
.a1f6	c9 3e		cmp #$3e			cmp 	#'>'
.a1f8	f0 25		beq $a21f			beq 	_TKCheckDouble
.a1fa					_TKStandardPunctuation:
.a1fa	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a1fd	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a1ff	90 0e		bcc $a20f			bcc 	_TKNoShift
.a201	48		pha				pha 								; save
.a202	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a204	85 36		sta $36				sta 	zTemp0
.a206	68		pla				pla
.a207	29 20		and #$20			and 	#32 						; bit 5
.a209	4a		lsr a				lsr 	a 							; shift into bit 3
.a20a	4a		lsr a				lsr 	a
.a20b	05 36		ora $36				ora 	zTemp0
.a20d	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a20f					_TKNoShift:
.a20f	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte 			; write the punctuation character
.a212	e8		inx				inx 								; consume the character
.a213	80 be		bra $a1d3			bra 	_TKTokeniseLoop 			; and loop round again.
.a215					_TKString:
.a215	20 c5 a2	jsr $a2c5			jsr 	TokeniseString
.a218	80 b9		bra $a1d3			bra 	_TKTokeniseLoop
.a21a					_TKHexConstant:
.a21a	20 00 a3	jsr $a300			jsr 	TokeniseHexConstant
.a21d	80 b4		bra $a1d3			bra 	_TKTokeniseLoop
.a21f					_TKCheckDouble:
.a21f	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a222	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a224	90 d4		bcc $a1fa			bcc 	_TKStandardPunctuation
.a226	c9 3f		cmp #$3f			cmp 	#'>'+1
.a228	b0 d0		bcs $a1fa			bcs 	_TKStandardPunctuation
.a22a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a22d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a22f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a230	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a233	38		sec				sec
.a234	e9 3c		sbc #$3c			sbc 	#'<'
.a236	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a239	e8		inx				inx 								; consume both
.a23a	e8		inx				inx
.a23b	80 96		bra $a1d3			bra 	_TKTokeniseLoop
.a23d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a23f	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a242	60		rts				rts
.a243					_TKTokeniseIdentifier:
.a243	8e 80 04	stx $0480			stx 	identStart 					; save start
.a246	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a249					_TKCheckLoop:
.a249	e8		inx				inx 								; look at next, we know first is identifier.
.a24a	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a24d	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a24f	f0 f8		beq $a249			beq 	_TKCheckLoop
.a251	c9 30		cmp #$30			cmp	 	#"0"
.a253	90 0c		bcc $a261			bcc 	_TKEndIdentifier
.a255	c9 3a		cmp #$3a			cmp 	#"9"+1
.a257	90 f0		bcc $a249			bcc 	_TKCheckLoop
.a259	c9 41		cmp #$41			cmp	 	#"A"
.a25b	90 04		bcc $a261			bcc 	_TKEndIdentifier
.a25d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a25f	90 e8		bcc $a249			bcc 	_TKCheckLoop
.a261					_TKEndIdentifier:
.a261	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a264	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a266	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a268	f0 06		beq $a270			beq 	_TKHasTypeCharacter
.a26a	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a26c	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a26e	d0 07		bne $a277			bne 	_TKNoTypeCharacter
.a270					_TKHasTypeCharacter:
.a270	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a273	e8		inx				inx 								; read next
.a274	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a277					_TKNoTypeCharacter:
.a277	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a279	d0 09		bne $a284			bne 	_TKNoArray
.a27b	e8		inx				inx 								; skip the (
.a27c	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a27f	09 04		ora #$04			ora 	#$04
.a281	8d 84 04	sta $0484			sta 	identTypeByte
.a284					_TKNoArray:
.a284	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a287	20 21 a3	jsr $a321			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a28a	a0 9e		ldy #$9e			ldy 	#(KeywordSet0) >> 8
.a28c	a9 ec		lda #$ec			lda 	#(KeywordSet0) & $FF
.a28e	20 93 9e	jsr $9e93			jsr 	TokeniseSearchTable
.a291	a2 00		ldx #$00			ldx 	#0
.a293	b0 1f		bcs $a2b4			bcs 	_TKFoundToken
.a295	a0 a0		ldy #$a0			ldy 	#(KeywordSet1) >> 8
.a297	a9 1e		lda #$1e			lda 	#(KeywordSet1) & $FF
.a299	20 93 9e	jsr $9e93			jsr 	TokeniseSearchTable
.a29c	a2 81		ldx #$81			ldx 	#$81
.a29e	b0 14		bcs $a2b4			bcs 	_TKFoundToken
.a2a0	a0 a0		ldy #$a0			ldy 	#(KeywordSet2) >> 8
.a2a2	a9 62		lda #$62			lda 	#(KeywordSet2) & $FF
.a2a4	20 93 9e	jsr $9e93			jsr 	TokeniseSearchTable
.a2a7	a2 82		ldx #$82			ldx 	#$82
.a2a9	b0 09		bcs $a2b4			bcs 	_TKFoundToken
.a2ab	20 b1 a3	jsr $a3b1			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a2ae	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a2b1	4c d3 a1	jmp $a1d3			jmp 	_TKTokeniseLoop 			; and go round again.
.a2b4					_TKFoundToken:
.a2b4	48		pha				pha 								; save token
.a2b5	8a		txa				txa 								; shift in X, is there one ?
.a2b6	f0 03		beq $a2bb			beq 	_TKNoTShift
.a2b8	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte 			; if so, write it out
.a2bb					_TKNoTShift:
.a2bb	68		pla				pla 								; restore and write token
.a2bc	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a2bf	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a2c2	4c d3 a1	jmp $a1d3			jmp 	_TKTokeniseLoop 			; and go round again.
.a2c5					TokeniseString:
.a2c5	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a2c7	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a2ca	e8		inx				inx									; start of quoted string.
.a2cb	da		phx				phx 								; push start of string on top
.a2cc	ca		dex				dex
.a2cd					_TSFindEnd:
.a2cd	e8		inx				inx
.a2ce	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a2d1	f0 04		beq $a2d7			beq 	_TSEndOfString
.a2d3	c9 22		cmp #$22			cmp 	#'"'
.a2d5	d0 f6		bne $a2cd			bne 	_TSFindEnd
.a2d7					_TSEndOfString:
.a2d7	7a		ply				ply  								; so now Y is first character, X is character after end.
.a2d8	48		pha				pha 								; save terminating character
.a2d9	20 e1 a2	jsr $a2e1			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a2dc	68		pla				pla 								; terminating character
.a2dd	f0 01		beq $a2e0			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a2df	e8		inx				inx
.a2e0					_TSNotQuote:
.a2e0	60		rts				rts
.a2e1					TOWriteBlockXY:
.a2e1	86 36		stx $36				stx 	zTemp0 						; write end character
.a2e3	98		tya				tya
.a2e4	49 ff		eor #$ff			eor 	#$FF
.a2e6	38		sec				sec
.a2e7	65 36		adc $36				adc 	zTemp0
.a2e9	1a		inc a				inc 	a 							; one extra for NULL
.a2ea	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a2ed					_TOBlockLoop:
.a2ed	c4 36		cpy $36				cpy 	zTemp0
.a2ef	f0 09		beq $a2fa			beq 	_TOBlockExit
.a2f1	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a2f4	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a2f7	c8		iny				iny
.a2f8	80 f3		bra $a2ed			bra 	_TOBlockLoop
.a2fa					_TOBlockExit:
.a2fa	a9 00		lda #$00			lda 	#0
.a2fc	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a2ff	60		rts				rts
.a300					TokeniseHexConstant:
.a300	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a302	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a305	e8		inx				inx									; start of quoted string.
.a306	da		phx				phx 								; push start of constant on top
.a307	ca		dex				dex
.a308					_THFindLoop:
.a308	e8		inx				inx
.a309	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a30c	c9 30		cmp #$30			cmp 	#"0"
.a30e	90 0c		bcc $a31c			bcc 	_THFoundEnd
.a310	c9 3a		cmp #$3a			cmp 	#"9"+1
.a312	90 f4		bcc $a308			bcc 	_THFindLoop
.a314	c9 41		cmp #$41			cmp 	#"A"
.a316	90 04		bcc $a31c			bcc 	_THFoundEnd
.a318	c9 47		cmp #$47			cmp 	#"F"+1
.a31a	90 ec		bcc $a308			bcc 	_THFindLoop
.a31c					_THFoundEnd:
.a31c	7a		ply				ply 								; restore start
.a31d	20 e1 a2	jsr $a2e1			jsr 	TOWriteBlockXY 				; output the block
.a320	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a321					TokeniseCalculateHash:
.a321	da		phx				phx
.a322	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a325	a9 00		lda #$00			lda 	#0
.a327					_TCHLoop:
.a327	18		clc				clc
.a328	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a32b	e8		inx				inx
.a32c	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a32f	d0 f6		bne $a327			bne 	_TCHLoop
.a331	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a334	fa		plx				plx
.a335	60		rts				rts
.a336					FixLineBufferCase:
.a336	a2 00		ldx #$00			ldx 	#0
.a338					_FLBCLoop:
.a338	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a33b	f0 22		beq $a35f			beq 	_FLBCExit 					; end of string.
.a33d	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a33f	f0 11		beq $a352			beq 	_FLBCInQuotes
.a341	e8		inx				inx
.a342	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a344	90 f2		bcc $a338			bcc 	_FLBCLoop
.a346	c9 7b		cmp #$7b			cmp 	#'z'+1
.a348	b0 ee		bcs $a338			bcs 	_FLBCLoop
.a34a	38		sec				sec 								; make U/C
.a34b	e9 20		sbc #$20			sbc 	#32
.a34d	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a350	80 e6		bra $a338			bra 	_FLBCLoop
.a352					_FLBCInQuotes:
.a352	e8		inx				inx 								; advance
.a353	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a356	f0 07		beq $a35f			beq 	_FLBCExit 					; exit on EOS
.a358	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a35a	d0 f6		bne $a352			bne 	_FLBCInQuotes
.a35c	e8		inx				inx 								; skip over it
.a35d	80 d9		bra $a338			bra 	_FLBCLoop
.a35f					_FLBCExit:
.a35f	60		rts				rts
.a360					TokeniseExtractLineNumber:
.a360	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a363	48		pha				pha
.a364	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a367	48		pha				pha
.a368	20 9e a3	jsr $a39e			jsr 	_TELNTimes2 				; line # x 4
.a36b	20 9e a3	jsr $a39e			jsr 	_TELNTimes2 				; line # x 2
.a36e	18		clc				clc 								; add stacked value
.a36f	68		pla				pla
.a370	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a373	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a376	68		pla				pla
.a377	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a37a	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a37d	20 9e a3	jsr $a39e			jsr 	_TELNTimes2 				; line # x 10
.a380	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a383	e8		inx				inx
.a384	29 0f		and #$0f			and 	#15 						; add to line #
.a386	18		clc				clc
.a387	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a38a	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a38d	90 03		bcc $a392			bcc 	_TLENNoCarry
.a38f	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a392					_TLENNoCarry:
.a392	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a395	c9 30		cmp #$30			cmp 	#'0'
.a397	90 04		bcc $a39d			bcc 	_TLENExit
.a399	c9 3a		cmp #$3a			cmp 	#'9'+1
.a39b	90 c3		bcc $a360			bcc 	TokeniseExtractLineNumber
.a39d					_TLENExit:
.a39d	60		rts				rts
.a39e					_TELNTimes2:
.a39e	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a3a1	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a3a4	60		rts				rts
.a3a5					TokeniseWriteByte:
.a3a5	da		phx				phx
.a3a6	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a3a9	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a3ac	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a3af	fa		plx				plx
.a3b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a3b1					CheckCreateVariableRecord:
.a3b1	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a3b3	85 36		sta $36				sta 	0+zTemp0
.a3b5	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a3b7	85 37		sta $37				sta 	1+zTemp0
.a3b9					_CCVSearch:
.a3b9	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a3bb	f0 2c		beq $a3e9			beq 	_CCVFail
.a3bd	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a3bf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a3c1	cd 83 04	cmp $0483			cmp 	identHash
.a3c4	d0 16		bne $a3dc			bne 	_CCVNext
.a3c6	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a3c8	ae 80 04	ldx $0480			ldx 	identStart
.a3cb					_CCVCompare:
.a3cb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a3ce	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a3d0	e8		inx				inx 								; advance pointers
.a3d1	c8		iny				iny
.a3d2	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a3d3	d0 07		bne $a3dc			bne 	_CCVNext  					; didn't match go to next.
.a3d5	90 f4		bcc $a3cb			bcc 	_CCVCompare 				; not finished yet.
.a3d7	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a3da	f0 41		beq $a41d			beq 	_CCVFound 					; yes, we were successful
.a3dc					_CCVNext:
.a3dc	18		clc				clc
.a3dd	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a3df	65 36		adc $36				adc 	zTemp0
.a3e1	85 36		sta $36				sta 	zTemp0
.a3e3	90 d4		bcc $a3b9			bcc 	_CCVSearch
.a3e5	e6 37		inc $37				inc 	zTemp0+1
.a3e7	80 d0		bra $a3b9			bra 	_CCVSearch
.a3e9					_CCVFail:
.a3e9	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a3eb	ad 83 04	lda $0483			lda 	identHash
.a3ee	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f0	c8		iny				iny 								; offset 2 is the type byte
.a3f1	ad 84 04	lda $0484			lda 	identTypeByte
.a3f4	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f6	c8		iny				iny
.a3f7					_CCVData:
.a3f7	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a3f9	91 36		sta ($36),y			sta 	(zTemp0),y
.a3fb	c8		iny				iny
.a3fc	c0 08		cpy #$08			cpy 	#8
.a3fe	90 f7		bcc $a3f7			bcc 	_CCVData
.a400	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a403					_CCVCopyName:
.a403	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a406	91 36		sta ($36),y			sta 	(zTemp0),y
.a408	e8		inx				inx
.a409	c8		iny				iny
.a40a	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a40d	d0 f4		bne $a403			bne 	_CCVCopyName
.a40f	98		tya				tya 								; patch offset
.a410	92 36		sta ($36)			sta 	(zTemp0)
.a412	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a414	91 36		sta ($36),y			sta 	(zTemp0),y
.a416	88		dey				dey
.a417	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a419	09 80		ora #$80			ora 	#$80
.a41b	91 36		sta ($36),y			sta 	(zTemp0),y
.a41d					_CCVFound:
.a41d	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a41f	38		sec				sec
.a420	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a422	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a424	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a427	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a429	20 a5 a3	jsr $a3a5			jsr 	TokeniseWriteByte
.a42c	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
