
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 12 17:00:49 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_BY                               = $a6; $a6 BY
=$a7					KWD_CALL                             = $a7; $a7 CALL
=$a8					KWD_CIRCLE                           = $a8; $a8 CIRCLE
=$a9					KWD_CLEAR                            = $a9; $a9 CLEAR
=$aa					KWD_CLS                              = $aa; $aa CLS
=$ab					KWD_COLOR                            = $ab; $ab COLOR
=$ac					KWD_COLOUR                           = $ac; $ac COLOUR
=$ad					KWD_DATA                             = $ad; $ad DATA
=$ae					KWD_DIM                              = $ae; $ae DIM
=$af					KWD_DOWNTO                           = $af; $af DOWNTO
=$b0					KWD_ELSE                             = $b0; $b0 ELSE
=$b1					KWD_FROM                             = $b1; $b1 FROM
=$b2					KWD_GFX                              = $b2; $b2 GFX
=$b3					KWD_GOSUB                            = $b3; $b3 GOSUB
=$b4					KWD_GOTO                             = $b4; $b4 GOTO
=$b5					KWD_HERE                             = $b5; $b5 HERE
=$b6					KWD_IMAGE                            = $b6; $b6 IMAGE
=$b7					KWD_LET                              = $b7; $b7 LET
=$b8					KWD_LINE                             = $b8; $b8 LINE
=$b9					KWD_LOCAL                            = $b9; $b9 LOCAL
=$ba					KWD_OUTLINE                          = $ba; $ba OUTLINE
=$bb					KWD_PRINT                            = $bb; $bb PRINT
=$bc					KWD_READ                             = $bc; $bc READ
=$bd					KWD_RECT                             = $bd; $bd RECT
=$be					KWD_REM                              = $be; $be REM
=$bf					KWD_RETURN                           = $bf; $bf RETURN
=$c0					KWD_SOLID                            = $c0; $c0 SOLID
=$c1					KWD_SPRITE                           = $c1; $c1 SPRITE
=$c2					KWD_TEXT                             = $c2; $c2 TEXT
=$c3					KWD_TO                               = $c3; $c3 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 94 b3	jsr $b394			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 a0 98	jsr $98a0			jsr 	PrintStringXA
.8014	20 5b 92	jsr $925b			jsr 	NewCommand 					; erase current program
.8017	20 25 a5	jsr $a525			jsr 	BackloadProgram
.801a	4c 0a 8c	jmp $8c0a			jmp 	WarmStart
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1785."
>8065	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 31 37 38 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 3d		bra $80cf			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.809a	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a4	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 29 06	sta $0629			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80b2	f0 07		beq $80bb			beq 	_GDXOkay 					; check X range
.80b4	ad 29 06	lda $0629			lda 	gxCurrentX
.80b7	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b9	b0 1e		bcs $80d9			bcs 	_GDError
.80bb					_GDXOkay:
.80bb	ad 2b 06	lda $062b			lda 	gxCurrentY
.80be	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c1	b0 16		bcs $80d9			bcs 	_GDError
.80c3	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c5					_GDCopy2:
.80c5	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c8	9d 31 06	sta $0631,x			sta 	gxX0,x
.80cb	ca		dex				dex
.80cc	10 f7		bpl $80c5			bpl 	_GDCopy2
.80ce	68		pla				pla 								; get command back
.80cf					_GDExecuteA:
.80cf	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80d1	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d3	b0 05		bcs $80da			bcs 	_GDError2
.80d5	aa		tax				tax
.80d6	7c df 80	jmp ($80df,x)			jmp 	(GRVectorTable,x)
.80d9					_GDError:
.80d9	68		pla				pla 								; throw command
.80da					_GDError2:
.80da	38		sec				sec
.80db	60		rts				rts
.80dc					GXMove:
.80dc	18		clc				clc
.80dd	60		rts				rts
.80de					GRUndefined:
>80de	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80df					GRVectorTable:
>80df	ae 82					.word	GXInitialise             ; $00 Initialise
>80e1	c5 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e3	0d 83					.word	GXControlSprite          ; $02 SpriteCtl
>80e5	60 82					.word	GXClearBitmap            ; $03 Clear
>80e7	8b 84					.word	GXSetColourMode          ; $04 Colour
>80e9	4f 86					.word	GXFontHandler            ; $05 DrawFont
>80eb	97 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80ed	ff 86					.word	GXSelect                 ; $07 SPRUSE
>80ef	34 87					.word	GXSelectImage            ; $08 SPRIMG
>80f1	de 80					.word	GRUndefined              ; $09
>80f3	de 80					.word	GRUndefined              ; $0a
>80f5	de 80					.word	GRUndefined              ; $0b
>80f7	de 80					.word	GRUndefined              ; $0c
>80f9	de 80					.word	GRUndefined              ; $0d
>80fb	de 80					.word	GRUndefined              ; $0e
>80fd	de 80					.word	GRUndefined              ; $0f
>80ff	dc 80					.word	GXMove                   ; $10 Move
>8101	59 83					.word	GXLine                   ; $11 Line
>8103	d4 84					.word	GXFrameRectangle         ; $12 FrameRect
>8105	d1 84					.word	GXFillRectangle          ; $13 FillRect
>8107	17 81					.word	GXFrameCircle            ; $14 FrameCircle
>8109	13 81					.word	GXFillCircle             ; $15 FillCircle
>810b	de 80					.word	GRUndefined              ; $16
>810d	de 80					.word	GRUndefined              ; $17
>810f	b9 84					.word	GXPlotPoint              ; $18 Plot
>8111	8b 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8113					GXFillCircle:
.8113	a9 ff		lda #$ff			lda 	#255
.8115	80 02		bra $8119			bra 	GXCircle
.8117					GXFrameCircle:
.8117	a9 00		lda #$00			lda 	#0
.8119					GXCircle:
.8119	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.811c	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.811f	f0 26		beq $8147			beq 	_GXCFail
.8121	20 8b 88	jsr $888b			jsr 	GXSortXY 					; topleft/bottomright
.8124	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.8127	20 19 82	jsr $8219			jsr 	GXCircleSetup 				; set up for drawing
.812a	9c 4d 06	stz $064d			stz 	gxYChanged
.812d					_GXCircleDraw:
.812d	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8130	cd 4b 06	cmp $064b			cmp 	gYCentre
.8133	90 0a		bcc $813f			bcc 	_GXCircleContinue
.8135	d0 03		bne $813a			bne 	_GXNoLast
.8137	20 4c 81	jsr $814c			jsr 	GXPlot1
.813a					_GXNoLast:
.813a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; close the bitmap
.813d	18		clc				clc
.813e	60		rts				rts
.813f					_GXCircleContinue:
.813f	20 49 81	jsr $8149			jsr 	GXPlot2 					; draw it
.8142	20 c6 81	jsr $81c6			jsr 	GXCircleMove 				; adjust the coordinates
.8145	80 e6		bra $812d			bra 	_GXCircleDraw
.8147					_GXCFail:
.8147	38		sec				sec
.8148	60		rts				rts
.8149					GXPlot2:
.8149	20 4c 81	jsr $814c			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814c					GXPlot1:
.814c	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.814f	f0 03		beq $8154			beq 	_GXPlot1Only
.8151	20 70 81	jsr $8170			jsr 	GXPlot0 						; plot and negate
.8154					_GXPlot1Only:
.8154	20 70 81	jsr $8170			jsr 	GXPlot0 						; twice, undoing negation
.8157	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.815a	ae 4b 06	ldx $064b			ldx	 	gYCentre
.815d	8d 4b 06	sta $064b			sta 	gYCentre
.8160	8e 4a 06	stx $064a			stx 	gXCentre
.8163	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8166	a9 ff		lda #$ff			lda 	#$FF
.8168	8d 4d 06	sta $064d			sta 	gxYChanged
.816b	60		rts				rts
.816c	20 70 81	jsr $8170			jsr 	GXPlot0 						; do once
.816f	60		rts				rts
.8170	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8173	f0 05		beq $817a			beq 	_GXPlot0Always
.8175	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.8178	f0 2d		beq $81a7			beq 	GXPlot0Exit
.817a					_GXPlot0Always:
.817a	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817c	ad 4b 06	lda $064b			lda 	gYCentre
.817f	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.8182	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8184	ad 4a 06	lda $064a			lda 	gXCentre
.8187	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.818a	48		pha				pha 									; save last offset X
.818b	20 de 87	jsr $87de			jsr 	GXPositionCalc 					; calculate position/offset.
.818e	68		pla				pla
.818f	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8190	85 36		sta $36				sta 	gxzTemp0
.8192	64 37		stz $37				stz 	gxzTemp0+1
.8194	26 37		rol $37				rol 	gxzTemp0+1
.8196	ad 4c 06	lda $064c			lda 	gxIsFillMode
.8199	69 80		adc #$80			adc 	#128
.819b	20 24 85	jsr $8524			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819e	38		sec				sec 									; GY = -GY
.819f	a9 00		lda #$00			lda 	#0
.81a1	ed 4b 06	sbc $064b			sbc 	gYCentre
.81a4	8d 4b 06	sta $064b			sta 	gYCentre
.81a7					GXPlot0Exit:
.81a7	60		rts				rts
.81a8					GXSubCopy:
.81a8	85 36		sta $36				sta 	gxzTemp0
.81aa	64 37		stz $37				stz 	gxzTemp0+1
.81ac	29 80		and #$80			and 	#$80
.81ae	f0 02		beq $81b2			beq 	_GXNoSx
.81b0	c6 37		dec $37				dec 	gxzTemp0+1
.81b2					_GXNoSx:
.81b2	38		sec				sec
.81b3	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b6	e5 36		sbc $36				sbc 	gxzTemp0
.81b8	9d 31 06	sta $0631,x			sta 	gXX0,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c0	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c3	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81c5	60		rts				rts
.81c6					GXCircleMove:
.81c6	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81c9	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81cb	10 0d		bpl $81da			bpl 	_GXEMPositive
.81cd	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81d0	ad 4a 06	lda $064a			lda 	gXCentre
.81d3	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d6	a9 06		lda #$06			lda 	#6  						; and add 6
.81d8	80 15		bra $81ef			bra 	_GXEMAddD
.81da					_GXEMPositive:
.81da	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81dd	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81e0	38		sec				sec 								; calculate X-Y
.81e1	ad 4a 06	lda $064a			lda 	gXCentre
.81e4	ed 4b 06	sbc $064b			sbc 	gYCentre
.81e7	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ea	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ec	ce 4d 06	dec $064d			dec 	gxYChanged
.81ef					_GXEMAddD:
.81ef	18		clc				clc
.81f0	65 38		adc $38				adc 	gxzTemp1
.81f2	85 38		sta $38				sta 	gxzTemp1
.81f4	90 02		bcc $81f8			bcc 	_GXEMNoCarry
.81f6	e6 39		inc $39				inc 	gxzTemp1+1
.81f8					_GXEMNoCarry:
.81f8	60		rts				rts
.81f9					_GXAdd4TimesToD:
.81f9	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81fb	29 80		and #$80			and 	#$80
.81fd	f0 02		beq $8201			beq 	_GXA4Unsigned
.81ff	a9 ff		lda #$ff			lda 	#$FF
.8201					_GXA4Unsigned:
.8201	85 37		sta $37				sta 	gxzTemp0+1
.8203	06 36		asl $36				asl 	gxzTemp0  					; x 4
.8205	26 37		rol $37				rol 	gxzTemp0+1
.8207	06 36		asl $36				asl 	gxzTemp0
.8209	26 37		rol $37				rol 	gxzTemp0+1
.820b	18		clc				clc 								; add
.820c	a5 36		lda $36				lda		gxzTemp0
.820e	65 38		adc $38				adc 	gxzTemp1
.8210	85 38		sta $38				sta 	gxzTemp1
.8212	a5 37		lda $37				lda		gxzTemp0+1
.8214	65 39		adc $39				adc 	gxzTemp1+1
.8216	85 39		sta $39				sta 	gxzTemp1+1
.8218	60		rts				rts
.8219					GXCircleSetup:
.8219	38		sec				sec
.821a	ad 37 06	lda $0637			lda 	gxY1
.821d	ed 33 06	sbc $0633			sbc 	gxY0
.8220	4a		lsr a				lsr 	a
.8221	8d 49 06	sta $0649			sta 	gxRadius
.8224	a2 00		ldx #$00			ldx 	#0
.8226	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.8229	a2 02		ldx #$02			ldx 	#2
.822b	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.822e	9c 4a 06	stz $064a			stz 	gXCentre
.8231	ad 49 06	lda $0649			lda 	gxRadius
.8234	8d 4b 06	sta $064b			sta 	gYCentre
.8237	0a		asl a				asl 	a 							; R x 2
.8238	85 36		sta $36				sta 	gxzTemp0
.823a	38		sec				sec
.823b	a9 03		lda #$03			lda 	#3
.823d	e5 36		sbc $36				sbc 	gxzTemp0
.823f	85 38		sta $38				sta 	gxzTemp1
.8241	a9 00		lda #$00			lda 	#0
.8243	e9 00		sbc #$00			sbc 	#0
.8245	85 39		sta $39				sta 	gxzTemp1+1
.8247	60		rts				rts
.8248					_GXCalculateCentre:
.8248	38		sec				sec
.8249	bd 35 06	lda $0635,x			lda 	gxX1,x
.824c	7d 31 06	adc $0631,x			adc 	gXX0,x
.824f	9d 35 06	sta $0635,x			sta 	gXX1,x
.8252	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8258	4a		lsr a				lsr 	a
.8259	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825c	7e 35 06	ror $0635,x			ror 	gXX1,x
.825f	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8260					GXClearBitmap:
.8260	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8263	f0 24		beq $8289			beq 	_GXCBFail
.8265	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start access
.8268	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.826a	ad 3d 06	lda $063d			lda 	gxHeight
.826d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8271					_GXCalcLastPage:
.8271	98		tya				tya 								; add to base page
.8272	18		clc				clc
.8273	6d 3b 06	adc $063b			adc 	gxBasePage
.8276	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8278					_GXClearAll:
.8278	20 8b 82	jsr $828b			jsr 	_GXClearBlock 				; clear 8k block
.827b	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.827d	a5 0b		lda $0b				lda 	GXEditSlot
.827f	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8282	b0 f4		bcs $8278			bcs 	_GXClearAll
.8284	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap	 			; stop access
.8287	18		clc				clc
.8288	60		rts				rts
.8289					_GXCBFail:
.8289	38		sec				sec
.828a	60		rts				rts
.828b					_GXClearBlock:
.828b	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.828d	85 38		sta $38				sta 	0+gxzTemp1
.828f	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8291	85 39		sta $39				sta 	1+gxzTemp1
.8293					_GXCB0:
.8293	a5 36		lda $36				lda 	gxzTemp0
.8295	a0 00		ldy #$00			ldy 	#0
.8297					_GXCB1:
.8297	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8299	c8		iny				iny
.829a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829c	c8		iny				iny
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	d0 f2		bne $8297			bne 	_GXCB1
.82a5	e6 39		inc $39				inc 	gxzTemp1+1
.82a7	a5 39		lda $39				lda 	gxzTemp1+1
.82a9	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82ab	d0 e6		bne $8293			bne 	_GXCB0
.82ad	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82ae					GXInitialise:
.82ae	64 01		stz $01				stz 	1
.82b0	a9 01		lda #$01			lda 	#1
.82b2	8d 00 d0	sta $d000			sta 	$D000
.82b5	18		clc				clc
.82b6	9c 39 06	stz $0639			stz 	GXSpritesOn
.82b9	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82bc	a2 0f		ldx #$0f			ldx 	#15
.82be					_GXIClear:
.82be	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c1	ca		dex				dex
.82c2	10 fa		bpl $82be			bpl 	_GXIClear
.82c4	60		rts				rts
.82c5					GXControlBitmap:
.82c5	64 01		stz $01				stz 	1
.82c7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82c9	29 01		and #$01			and 	#1 							; set bitmap flag
.82cb	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82ce	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82cf	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82d4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82d6	90 02		bcc $82da			bcc 	_CBNotOn
.82d8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82da					_CBNotOn:
.82da	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82dd	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82df	29 07		and #$07			and 	#7
.82e1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82e4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82e6	d0 02		bne $82ea			bne 	_CBNotDefault
.82e8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82ea					_CBNotDefault:
.82ea	8d 3b 06	sta $063b			sta 	gxBasePage
.82ed	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f0	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f2	8d 03 d1	sta $d103			sta 	$D103
.82f5	a5 36		lda $36				lda 	gxzTemp0
.82f7	8d 02 d1	sta $d102			sta 	$D102
.82fa	9c 01 d1	stz $d101			stz 	$D101
.82fd	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82ff	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8302	29 01		and #$01			and 	#1
.8304	f0 02		beq $8308			beq 	_CBHaveHeight
.8306	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8308					_CBHaveHeight
.8308	8e 3d 06	stx $063d			stx 	gxHeight
.830b	18		clc				clc
.830c	60		rts				rts
.830d					GXControlSprite:
.830d	64 01		stz $01				stz 	1
.830f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8311	29 01		and #$01			and 	#1 							; set sprites flag
.8313	8d 39 06	sta $0639			sta 	gxSpritesOn
.8316	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8317	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.831a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.831c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.831e	90 02		bcc $8322			bcc 	_CSNotOn
.8320	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8322					_CSNotOn:
.8322	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.8325	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8327	d0 02		bne $832b			bne 	_CSNotDefault
.8329	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.832b					_CSNotDefault:
.832b	8d 3c 06	sta $063c			sta 	gxSpritePage
.832e	20 4b 83	jsr $834b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8331	a5 36		lda $36				lda 	zTemp0
.8333	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.8336	a5 37		lda $37				lda 	zTemp0+1
.8338	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.833b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.833d					_CSClear:
.833d	9e 00 d9	stz $d900,x			stz 	$D900,x
.8340	9e 00 da	stz $da00,x			stz 	$DA00,x
.8343	ca		dex				dex
.8344	d0 f7		bne $833d			bne 	_CSClear
.8346	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8349	18		clc				clc
.834a	60		rts				rts
.834b					GXCalculateBaseAddress:
.834b	85 36		sta $36				sta 	gxzTemp0
.834d	64 37		stz $37				stz 	gxzTemp0+1
.834f	a9 05		lda #$05			lda 	#5
.8351					_GXShift:
.8351	06 36		asl $36				asl 	gxzTemp0
.8353	26 37		rol $37				rol 	gxzTemp0+1
.8355	3a		dec a				dec		a
.8356	d0 f9		bne $8351			bne 	_GXShift
.8358	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8359					GXLine:
.8359	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.835c	f0 28		beq $8386			beq 	_GXLFail
.835e	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap
.8361	20 a9 88	jsr $88a9			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8364	20 2c 84	jsr $842c			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8367	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; calculate position/offset.
.836a					_GXDrawLoop:
.836a	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.836d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.836f	2d 41 06	and $0641			and 	gxANDValue
.8372	4d 40 06	eor $0640			eor 	gxEORValue
.8375	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8377	20 88 83	jsr $8388			jsr 	GXLineIsComplete 			; is the line complete ?
.837a	f0 05		beq $8381			beq 	_GXLExit
.837c	20 a3 83	jsr $83a3			jsr 	GXLineAdvance 				; code as per advance method
.837f	80 e9		bra $836a			bra 	_GXDrawLoop
.8381					_GXLExit:
.8381	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.8384	18		clc				clc
.8385	60		rts				rts
.8386					_GXLFail:
.8386	38		sec				sec
.8387	60		rts				rts
.8388					GXLineIsComplete:
.8388	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.838b	d0 0f		bne $839c			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.838d	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8390	4d 35 06	eor $0635			eor 	GXX1
.8393	d0 06		bne $839b			bne 	_GXLICExit
.8395	ad 32 06	lda $0632			lda 	GXX0+1
.8398	4d 36 06	eor $0636			eor 	GXX1+1
.839b					_GXLICExit:
.839b	60		rts				rts
.839c					_GXLICCompareY:
.839c	ad 37 06	lda $0637			lda 	GXY1
.839f	4d 33 06	eor $0633			eor 	GXY0
.83a2	60		rts				rts
.83a3					GXLineAdvance:
.83a3	18		clc				clc 								; add adjust to position
.83a4	ad 52 06	lda $0652			lda 	GXPosition
.83a7	6d 53 06	adc $0653			adc 	GXAdjust
.83aa	8d 52 06	sta $0652			sta 	GXPosition
.83ad	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83b0	b0 05		bcs $83b7			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b2	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83b5	90 0a		bcc $83c1			bcc 	_GXLANoExtra
.83b7					_GXLAOverflow:
.83b7	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83ba	38		sec				sec 								; subtract total and write back
.83bb	ed 54 06	sbc $0654			sbc 	GXTotal
.83be	8d 52 06	sta $0652			sta 	GXPosition
.83c1					_GXLANoExtra:
.83c1	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83c4	f0 0d		beq $83d3			beq 	_GXDXLarger
.83c6	20 25 84	jsr $8425			jsr 	GXIncrementY
.83c9	ad 55 06	lda $0655			lda 	GXAddSelect
.83cc	f0 10		beq $83de			beq 	_GXLAExit
.83ce	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d1	80 0b		bra $83de			bra 	_GXLAExit
.83d3					_GXDXLarger:
.83d3	20 df 83	jsr $83df			jsr 	GXAdjustX
.83d6	ad 55 06	lda $0655			lda 	GXAddSelect
.83d9	f0 03		beq $83de			beq 	_GXLAExit
.83db	20 25 84	jsr $8425			jsr 	GXIncrementY
.83de					_GXLAExit:
.83de	60		rts				rts
.83df					GXAdjustX:
.83df	ad 51 06	lda $0651			lda 	GXDXNegative
.83e2	10 25		bpl $8409			bpl 	_GXAXRight
.83e4	ad 31 06	lda $0631			lda 	GXX0
.83e7	d0 03		bne $83ec			bne 	_GXAXNoBorrow
.83e9	ce 32 06	dec $0632			dec 	GXX0+1
.83ec					_GXAXNoBorrow:
.83ec	ce 31 06	dec $0631			dec 	GXX0
.83ef	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f2	ad 44 06	lda $0644			lda 	gsOffset
.83f5	c9 ff		cmp #$ff			cmp 	#$FF
.83f7	d0 0f		bne $8408			bne 	_GXAYExit 					; underflow
.83f9	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83fb	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83fd	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83ff	b0 07		bcs $8408			bcs 	_GXAYExit
.8401	18		clc				clc
.8402	69 20		adc #$20			adc 	#$20 						; fix up
.8404	85 3d		sta $3d				sta 	gxzScreen+1
.8406	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8408					_GXAYExit:
.8408	60		rts				rts
.8409					_GXAXRight:
.8409	ee 31 06	inc $0631			inc 	GXX0
.840c	d0 03		bne $8411			bne 	_GXAXNoCarry
.840e	ee 32 06	inc $0632			inc 	GXX0+1
.8411					_GXAXNoCarry:
.8411	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.8414	d0 0e		bne $8424			bne 	_GXAXExit 					; if not overflowed, exit.
.8416	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8418	a5 3d		lda $3d				lda 	gxzScreen+1
.841a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.841c	90 06		bcc $8424			bcc 	_GXAXExit
.841e	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8420	85 3d		sta $3d				sta 	gxzScreen+1
.8422	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.8424					_GXAXExit:
.8424	60		rts				rts
.8425					GXIncrementY:
.8425	ee 33 06	inc $0633			inc 	GXY0
.8428	20 34 88	jsr $8834			jsr 	GXMovePositionDown
.842b	60		rts				rts
.842c					GXLineSetup:
.842c	ad 37 06	lda $0637			lda 	GXY1
.842f	38		sec				sec
.8430	ed 33 06	sbc $0633			sbc 	GXY0
.8433	4a		lsr a				lsr 	a
.8434	8d 4f 06	sta $064f			sta 	GXDiffY
.8437	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.843a	38		sec				sec
.843b	ad 35 06	lda $0635			lda 	GXX1
.843e	ed 31 06	sbc $0631			sbc 	GXX0
.8441	8d 4e 06	sta $064e			sta 	GXDiffX
.8444	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8447	ed 32 06	sbc $0632			sbc 	GXX0+1
.844a	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.844b	6e 4e 06	ror $064e			ror 	GXDiffX
.844e	0a		asl a				asl 	a
.844f	10 0c		bpl $845d			bpl 	_GDXNotNegative
.8451	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8453	38		sec				sec
.8454	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8457	8d 4e 06	sta $064e			sta 	GXDiffX
.845a	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.845d					_GDXNotNegative:
.845d	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8460	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8463	8d 53 06	sta $0653			sta 	GXAdjust
.8466	ad 4e 06	lda $064e			lda 	GXDiffX
.8469	8d 54 06	sta $0654			sta 	GXTotal
.846c	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.846f	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8472	90 0f		bcc $8483			bcc 	_GDXNotLarger
.8474	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8477	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.847a	8d 53 06	sta $0653			sta 	GXAdjust
.847d	ad 4f 06	lda $064f			lda 	GXDiffY
.8480	8d 54 06	sta $0654			sta 	GXTotal
.8483					_GDXNotLarger:
.8483	ad 54 06	lda $0654			lda 	GXTotal
.8486	4a		lsr a				lsr 	a
.8487	8d 52 06	sta $0652			sta 	GXPosition
.848a	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.848b					GXSetColourMode:
.848b	a6 36		ldx $36				ldx 	gxzTemp0
.848d	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8490	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8492	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8495	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8497	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.849a	ae 3f 06	ldx $063f			ldx 	gxColour
.849d	8e 40 06	stx $0640			stx 	gxEORValue
.84a0	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a2	90 03		bcc $84a7			bcc 	_GXSDCNotAndColour
.84a4	8e 41 06	stx $0641			stx 	gxANDValue
.84a7					_GXSDCNotAndColour:
.84a7	d0 03		bne $84ac			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84a9	9c 40 06	stz $0640			stz 	gxEORValue
.84ac					_GXSDCNotAnd:
.84ac	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84ad	90 08		bcc $84b7			bcc 	_GXSDCNoFlip
.84af	ad 41 06	lda $0641			lda	 	gxANDValue
.84b2	49 ff		eor #$ff			eor 	#$FF
.84b4	8d 41 06	sta $0641			sta 	gxANDValue
.84b7					_GXSDCNoFlip:
.84b7	18		clc				clc
.84b8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84b9					GXPlotPoint:
.84b9	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.84bc	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84bf	ac 44 06	ldy $0644			ldy 	gsOffset
.84c2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84c4	2d 41 06	and $0641			and 	gxANDValue
.84c7	4d 40 06	eor $0640			eor 	gxEORValue
.84ca	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84cc	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; stop drawing and exit
.84cf	18		clc				clc
.84d0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d1					GXFillRectangle:
.84d1	38		sec				sec
.84d2	80 01		bra $84d5			bra 	GXRectangle
.84d4					GXFrameRectangle:
.84d4	18		clc				clc
.84d5					GXRectangle:
.84d5	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84d8	f0 35		beq $850f			beq 	_GXRFail
.84da	08		php				php 								; save Fill flag (CS)
.84db	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; start drawing
.84de	20 8b 88	jsr $888b			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e1	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84e4	38		sec				sec 								; sec = Draw line
.84e5	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84e8	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84eb	cd 37 06	cmp $0637			cmp 	gxY1
.84ee	f0 19		beq $8509			beq 	_GXRectangleExit
.84f0					_GXRectLoop:
.84f0	20 34 88	jsr $8834			jsr 	GXMovePositionDown 			; down one.
.84f3	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84f6	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84f9	cd 37 06	cmp $0637			cmp 	gXY1
.84fc	f0 07		beq $8505			beq 	_GXLastLine
.84fe	28		plp				plp 								; get flag back
.84ff	08		php				php
.8500	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8503	80 eb		bra $84f0			bra 	_GXRectLoop
.8505					_GXLastLine:
.8505	38		sec				sec
.8506	20 11 85	jsr $8511			jsr 	GXDrawLineX1X0
.8509					_GXRectangleExit:
.8509	68		pla				pla 								; throw fill flag.
.850a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap 				; stop drawing and exit
.850d	18		clc				clc
.850e	60		rts				rts
.850f					_GXRFail:
.850f	38		sec				sec
.8510	60		rts				rts
.8511					GXDrawLineX1X0:
.8511	08		php				php 								; save solid/either-end
.8512	38		sec				sec
.8513	ad 35 06	lda $0635			lda		gXX1
.8516	ed 31 06	sbc $0631			sbc 	gXX0
.8519	85 36		sta $36				sta 	gxzTemp0
.851b	ad 36 06	lda $0636			lda 	gXX1+1
.851e	ed 32 06	sbc $0632			sbc 	gXX0+1
.8521	85 37		sta $37				sta 	gxzTemp0+1
.8523	28		plp				plp
.8524					GXDrawLineTemp0:
.8524	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8526	48		pha				pha
.8527	a5 3d		lda $3d				lda 	gxzScreen+1
.8529	48		pha				pha
.852a	ad 44 06	lda $0644			lda 	gsOffset
.852d	48		pha				pha
.852e	a5 0b		lda $0b				lda 	GXEditSlot
.8530	48		pha				pha
.8531	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.8534	90 1e		bcc $8554			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8536					_GXDLTLine:
.8536	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8538	2d 41 06	and $0641			and 	gxANDValue
.853b	4d 40 06	eor $0640			eor 	gxEORValue
.853e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8540	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8542	d0 04		bne $8548			bne 	_GXDLTNoBorrow
.8544	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8546	30 2e		bmi $8576			bmi 	_GXDLTExit
.8548					_GXDLTNoBorrow:
.8548	c6 36		dec $36				dec 	gxzTemp0
.854a	c8		iny				iny 								; next slot.
.854b	d0 e9		bne $8536			bne 	_GXDLTLine
.854d	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.854f	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.8552	80 e2		bra $8536			bra 	_GXDLTLine
.8554					_GXDLTEndPoints:
.8554	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8556	2d 41 06	and $0641			and 	gxANDValue
.8559	4d 40 06	eor $0640			eor 	gxEORValue
.855c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855e	98		tya				tya 								; advance to right side
.855f	18		clc				clc
.8560	65 36		adc $36				adc 	gxzTemp0
.8562	a8		tay				tay
.8563	a5 3d		lda $3d				lda 	gxzScreen+1
.8565	65 37		adc $37				adc 	gxzTemp0+1
.8567	85 3d		sta $3d				sta 	gxzScreen+1
.8569	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap 			; fix up.
.856c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.856e	2d 41 06	and $0641			and 	gxANDValue
.8571	4d 40 06	eor $0640			eor 	gxEORValue
.8574	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8576					_GXDLTExit:
.8576	68		pla				pla
.8577	85 0b		sta $0b				sta 	GXEditSlot
.8579	68		pla				pla
.857a	8d 44 06	sta $0644			sta 	gsOffset
.857d	68		pla				pla
.857e	85 3d		sta $3d				sta 	gxzScreen+1
.8580	68		pla				pla
.8581	85 3c		sta $3c				sta 	gxzScreen
.8583	60		rts				rts
.8584					GXDLTCheckWrap:
.8584	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8586	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8588	90 06		bcc $8590			bcc 	_GXDLTCWExit
.858a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.858c	85 3d		sta $3d				sta 	gxzScreen+1
.858e	e6 0b		inc $0b				inc 	GXEditSlot
.8590					_GXDLTCWExit:
.8590	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8591					GXDrawGraphicElement:
.8591	8d 56 06	sta $0656			sta 	gxSize 						; save size
.8594	3a		dec a				dec 	a
.8595	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8598	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.859b	9c 5c 06	stz $065c			stz 	gxHFlip
.859e	2c 5d 06	bit $065d			bit 	gxUseMode
.85a1	10 03		bpl $85a6			bpl 	_GXNotVertical
.85a3	8d 5b 06	sta $065b			sta 	gxVFlip
.85a6					_GXNotVertical:
.85a6	50 03		bvc $85ab			bvc 	_GXNotHorizontal
.85a8	8d 5c 06	sta $065c			sta 	gxHFlip
.85ab					_GXNotHorizontal:
.85ab	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85ae	f0 5f		beq $860f			beq 	_GXSLFail
.85b0	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b3	48		pha				pha
.85b4	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85b7	8e 58 06	stx $0658			stx 	gxAcquireVector
.85ba	20 c0 87	jsr $87c0			jsr 	gxOpenBitmap 				; open the bitmap.
.85bd	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85c0	4a		lsr a				lsr 	a
.85c1	4a		lsr a				lsr 	a
.85c2	4a		lsr a				lsr 	a
.85c3	29 07		and #$07			and		#7
.85c5	1a		inc a				inc 	a
.85c6	8d 5a 06	sta $065a			sta 	gxScale
.85c9	64 38		stz $38				stz 	gxzTemp1						; start first line
.85cb					_GXGELoop:
.85cb	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85cd	4d 5b 06	eor $065b			eor 	gxVFlip
.85d0	aa		tax				tax 								; get the Xth line.
.85d1	20 11 86	jsr $8611			jsr 	_GXCallAcquire 				; get that data.
.85d4	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85d7	85 39		sta $39				sta 	gxzTemp1+1
.85d9					_GXGELoop2:
.85d9	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85dc	cd 3d 06	cmp $063d			cmp 	gxHeight
.85df	b0 10		bcs $85f1			bcs 	_GXDGEExit
.85e1	20 14 86	jsr $8614			jsr 	GXRenderOneLine 			; render line
.85e4	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e6	d0 f1		bne $85d9			bne 	_GXGELoop2
.85e8	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85ea	a5 38		lda $38				lda 	gxzTemp1
.85ec	cd 56 06	cmp $0656			cmp 	gxSize
.85ef	d0 da		bne $85cb			bne 	_GXGELoop
.85f1					_GXDGEExit:
.85f1	68		pla				pla 								; restore Y for next time
.85f2	8d 33 06	sta $0633			sta 	gxY0
.85f5	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85f8					_GXShiftLeft:
.85f8	18		clc				clc
.85f9	ad 56 06	lda $0656			lda 	gxSize
.85fc	6d 31 06	adc $0631			adc 	gxX0
.85ff	8d 31 06	sta $0631			sta 	gxX0
.8602	90 03		bcc $8607			bcc 	_GXSLNoCarry
.8604	ee 32 06	inc $0632			inc 	gxX0+1
.8607					_GXSLNoCarry:
.8607	ca		dex				dex
.8608	d0 ee		bne $85f8			bne 	_GXShiftLeft
.860a	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.860d	18		clc				clc
.860e	60		rts				rts
.860f					_GXSLFail:
.860f	38		sec				sec
.8610	60		rts				rts
.8611					_GXCallAcquire:
.8611	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.8614					GXRenderOneLine:
.8614	20 de 87	jsr $87de			jsr 	GXPositionCalc 				; calculate position/offset.
.8617	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.861a	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.861c					_GXROLLoop1:
.861c	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.861f	85 3b		sta $3b				sta 	gxzTemp2+1
.8621					_GXROLLoop2:
.8621	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8623	4d 5c 06	eor $065c			eor 	gxHFlip
.8626	aa		tax				tax 								; read from the pixel buffer
.8627	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.862a	f0 0a		beq $8636			beq 	_GXZeroPixel 				; don't draw if zero.
.862c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.862e	2d 41 06	and $0641			and 	gxANDValue
.8631	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8634	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8636					_GXZeroPixel:
.8636	c8		iny				iny 								; advance pointer
.8637	d0 05		bne $863e			bne 	_GXNoShift
.8639	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.863b	20 84 85	jsr $8584			jsr 	GXDLTCheckWrap				; check for new page.
.863e					_GXNoShift:
.863e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8640	d0 df		bne $8621			bne 	_GXROLLoop2
.8642	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8644	a5 3a		lda $3a				lda 	gxzTemp2
.8646	cd 56 06	cmp $0656			cmp 	gxSize
.8649	d0 d1		bne $861c			bne 	_GXROLLoop1
.864b	ee 33 06	inc $0633			inc 	gxY0
.864e	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.864f					GXFontHandler:
.864f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8651	4d 3e 06	eor $063e			eor 	gxMode
.8654	8d 5d 06	sta $065d			sta 	gxUseMode
.8657	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8659	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.865b	26 37		rol $37				rol	 	gxzTemp0+1
.865d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.865f	26 37		rol $37				rol	 	gxzTemp0+1
.8661	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8663	26 37		rol $37				rol	 	gxzTemp0+1
.8665	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8667	09 c0		ora #$c0			ora 	#$C0
.8669	85 37		sta $37				sta 	gxzTemp0+1
.866b	a9 08		lda #$08			lda 	#8 							; size 8x8
.866d	a2 75		ldx #$75			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.866f	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8671	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.8674	60		rts				rts
.8675					GXGetGraphicDataFont:
.8675	8a		txa				txa 								; X->Y
.8676	a8		tay				tay
.8677	a6 01		ldx $01				ldx 	1 							; preserve old value
.8679	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.867b	85 01		sta $01				sta 	1
.867d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.867f	86 01		stx $01				stx 	1 							; put old value back.
.8681	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8683					_GXExpand:
.8683	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8686	0a		asl a				asl 	a 							; shift bit 7 into C
.8687	90 08		bcc $8691			bcc 	_GXNoPixel
.8689	48		pha				pha 								; if set, set pixel buffer to current colour.
.868a	ad 3f 06	lda $063f			lda 	gxColour
.868d	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8690	68		pla				pla
.8691					_GXNoPixel:
.8691	e8		inx				inx 								; do the whole byte.
.8692	e0 08		cpx #$08			cpx 	#8
.8694	d0 ed		bne $8683			bne 	_GXExpand
.8696	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.8697					GXSpriteHandler:
.8697	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8699	4d 3e 06	eor $063e			eor 	gxMode
.869c	8d 5d 06	sta $065d			sta 	gxUseMode
.869f	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86a1	da		phx				phx
.86a2	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap 				; can access sprite information
.86a5	68		pla				pla
.86a6	20 4f 88	jsr $884f			jsr 	GXFindSprite 				; get the sprite address
.86a9	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.86ac	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86af	a2 b7		ldx #$b7			ldx 	#GXSpriteAcquire & $FF
.86b1	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86b3	20 91 85	jsr $8591			jsr 	GXDrawGraphicElement
.86b6	60		rts				rts
.86b7					GXSpriteAcquire:
.86b7	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86ba	85 0b		sta $0b				sta 	GXEditSlot
.86bc	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86be	a9 00		lda #$00			lda 	#0
.86c0	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86c3					_GXTimesRowNumber:
.86c3	18		clc				clc
.86c4	65 36		adc $36				adc 	zTemp0
.86c6	ca		dex				dex
.86c7	10 fa		bpl $86c3			bpl 	_GXTimesRowNumber
.86c9	64 37		stz $37				stz 	gxzTemp0+1
.86cb	0a		asl a				asl 	a 							; row x 2,4,6,8
.86cc	26 37		rol $37				rol 	gxzTemp0+1
.86ce	0a		asl a				asl 	a 							; row x 4,8,12,16
.86cf	26 37		rol $37				rol 	gxzTemp0+1
.86d1	0a		asl a				asl 	a 							; row x 8,16,24,32
.86d2	26 37		rol $37				rol 	gxzTemp0+1
.86d4	85 36		sta $36				sta 	gxzTemp0
.86d6	18		clc				clc 								; add base address.
.86d7	a5 36		lda $36				lda 	gxzTemp0
.86d9	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86dc	85 36		sta $36				sta 	gxzTemp0
.86de	a5 37		lda $37				lda 	gxzTemp0+1
.86e0	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86e3					_GXSAFindPage:
.86e3	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86e5	90 06		bcc $86ed			bcc 	_GXSAFoundPage
.86e7	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86e9	e6 0b		inc $0b				inc 	GXEditSlot
.86eb	80 f6		bra $86e3			bra 	_GXSAFindPage
.86ed					_GXSAFoundPage:
.86ed	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ef	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86f1	a0 00		ldy #$00			ldy 	#0
.86f3					_GXSACopyLoop:
.86f3	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86f5	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86f8	c8		iny				iny
.86f9	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86fc	d0 f5		bne $86f3			bne 	_GXSACopyLoop
.86fe	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86ff					GXSelect:
.86ff	ad 39 06	lda $0639			lda 	gxSpritesOn
.8702	f0 2e		beq $8732			beq 	_GXSFail
.8704	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8706	c9 40		cmp #$40			cmp 	#64
.8708	b0 28		bcs $8732			bcs 	_GXSFail
.870a	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.870c	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.870e	06 36		asl $36				asl 	gxzTemp0
.8710	06 36		asl $36				asl 	gxzTemp0
.8712	06 36		asl $36				asl 	gxzTemp0
.8714	2a		rol a				rol 	a
.8715	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8717	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.871a	85 37		sta $37				sta 	gxzTemp0+1
.871c	a5 36		lda $36				lda 	gxzTemp0
.871e	8d 45 06	sta $0645			sta 	GSCurrentSprite
.8721	98		tya				tya 								; control value
.8722	29 01		and #$01			and 	#1
.8724	85 38		sta $38				sta 	gxzTemp1 					; save it handily.
.8726	64 01		stz $01				stz 	1 							; access sprite control.
.8728	b2 36		lda ($36)			lda 	(gxzTemp0) 					; update enable bit only.
.872a	29 fe		and #$fe			and 	#$FE
.872c	05 38		ora $38				ora 	gxzTemp1
.872e	92 36		sta ($36)			sta 	(gxzTemp0) 					; write to control register
.8730	18		clc				clc
.8731	60		rts				rts
.8732					_GXSFail:
.8732	38		sec				sec
.8733	60		rts				rts
.8734					GXSelectImage:
.8734	ad 39 06	lda $0639			lda 	gxSpritesOn
.8737	f0 50		beq $8789			beq 	_GXSIFail
.8739	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.873c	f0 4b		beq $8789			beq 	_GXSIFail
.873e	64 01		stz $01				stz 	1
.8740	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8742	48		pha				pha
.8743	20 c0 87	jsr $87c0			jsr 	GXOpenBitmap
.8746	68		pla				pla
.8747	20 4f 88	jsr $884f			jsr 	GXFindSprite
.874a	a0 01		ldy #$01			ldy 	#1
.874c	ad 45 06	lda $0645			lda 	GSCurrentSprite
.874f	85 36		sta $36				sta 	gxzTemp0
.8751	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8754	85 37		sta $37				sta 	gxzTemp0+1
.8756	ad 61 06	lda $0661			lda 	GXSpriteOffset
.8759	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.875b	18		clc				clc
.875c	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.875f	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8762	c8		iny				iny
.8763	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8765	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.8768	69 00		adc #$00			adc 	#0
.876a	c8		iny				iny
.876b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.876d	b2 36		lda ($36)			lda 	(gxzTemp0)					; get LSB into gxzTemp1
.876f	29 01		and #$01			and 	#1
.8771	85 38		sta $38				sta 	gxzTemp1
.8773	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8776	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8778	2a		rol a				rol 	a 							; x 2
.8779	0a		asl a				asl 	a 							; x 4
.877a	0a		asl a				asl 	a 							; x 8
.877b	0a		asl a				asl 	a 							; x 16
.877c	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.877f	0a		asl a				asl 	a 							; 1 shift
.8780	05 38		ora $38				ora 	gxzTemp1 					; Or in the enable bit
.8782	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8784	20 d1 87	jsr $87d1			jsr 	GXCloseBitmap
.8787	18		clc				clc
.8788	60		rts				rts
.8789					_GXSIFail:
.8789	38		sec				sec
.878a	60		rts				rts
.878b					GXMoveSprite:
.878b	ad 39 06	lda $0639			lda 	gxSpritesOn
.878e	f0 2e		beq $87be			beq 	_GXSIFail
.8790	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8793	f0 29		beq $87be			beq 	_GXSIFail
.8795	85 37		sta $37				sta 	gxzTemp0+1
.8797	a0 04		ldy #$04			ldy 	#4
.8799	ad 45 06	lda $0645			lda 	GSCurrentSprite
.879c	85 36		sta $36				sta 	gxzTemp0
.879e	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87a0	38		sec				sec
.87a1	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87a4	4a		lsr a				lsr 	a
.87a5	48		pha				pha
.87a6	18		clc				clc
.87a7	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87aa	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87ac	c8		iny				iny
.87ad	ad 32 06	lda $0632			lda 	gxX0+1
.87b0	69 00		adc #$00			adc 	#0
.87b2	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b4	c8		iny				iny
.87b5	68		pla				pla
.87b6	18		clc				clc
.87b7	6d 33 06	adc $0633			adc 	gxY0
.87ba	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87bc	18		clc				clc
.87bd	60		rts				rts
.87be					_GXSIFail:
.87be	38		sec				sec
.87bf	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87c0					GXOpenBitmap:
.87c0	78		sei				sei 								; no interrupts here
.87c1	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87c3	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87c6	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87c8	85 00		sta $00				sta 	0
.87ca	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87cc	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87cf	58		cli				cli
.87d0	60		rts				rts
.87d1					GXCloseBitmap:
.87d1	78		sei				sei
.87d2	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87d5	85 0b		sta $0b				sta 	GXEditSlot
.87d7	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87da	85 00		sta $00				sta 	0
.87dc	58		cli				cli
.87dd	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87de					GXPositionCalc:
.87de	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87e0	48		pha				pha
.87e1	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87e4	85 3c		sta $3c				sta 	gxzScreen
.87e6	64 3d		stz $3d				stz 	gxzScreen+1
.87e8	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87ea	26 3d		rol $3d				rol 	gxzScreen+1
.87ec	06 3c		asl $3c				asl 	gxzScreen
.87ee	26 3d		rol $3d				rol 	gxzScreen+1
.87f0	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87f1	65 3c		adc $3c				adc 	gxzScreen
.87f3	85 3c		sta $3c				sta 	gxzScreen
.87f5	90 02		bcc $87f9			bcc 	_GXPCNoCarry
.87f7	e6 3d		inc $3d				inc 	gxzScreen+1
.87f9					_GXPCNoCarry:
.87f9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87fb	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87fd	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87ff	85 36		sta $36				sta 	gxzTemp0
.8801	64 3d		stz $3d				stz 	gxzScreen+1
.8803	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8805					_GXPCMultiply32:
.8805	06 3c		asl $3c				asl 	gxzScreen
.8807	26 3d		rol $3d				rol 	gxzScreen+1
.8809	3a		dec a				dec 	a
.880a	d0 f9		bne $8805			bne 	_GXPCMultiply32
.880c	18		clc				clc
.880d	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8810	65 3c		adc $3c				adc 	gxzScreen
.8812	8d 44 06	sta $0644			sta 	gsOffset
.8815	ad 32 06	lda $0632			lda 	GXX0+1
.8818	65 3d		adc $3d				adc 	gxzScreen+1
.881a	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.881c	90 04		bcc $8822			bcc 	_GXPCNoOverflow
.881e	29 1f		and #$1f			and 	#$1F 						; fix it up
.8820	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8822					_GXPCNoOverflow:
.8822	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8824	85 3d		sta $3d				sta 	gxzScreen+1
.8826	64 3c		stz $3c				stz 	gxzScreen
.8828	18		clc				clc
.8829	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.882b	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.882e	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8830	68		pla				pla
.8831	85 36		sta $36				sta 	gxzTemp0
.8833	60		rts				rts
.8834					GXMovePositionDown:
.8834	18		clc				clc 								; add 320 to offset/temp+1
.8835	ad 44 06	lda $0644			lda 	gsOffset
.8838	69 40		adc #$40			adc 	#64
.883a	8d 44 06	sta $0644			sta 	gsOffset
.883d	a5 3d		lda $3d				lda 	gxzScreen+1
.883f	69 01		adc #$01			adc 	#1
.8841	85 3d		sta $3d				sta 	gxzScreen+1
.8843	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8845	90 07		bcc $884e			bcc 	_GXMPDExit
.8847	38		sec				sec  								; next page
.8848	e9 20		sbc #$20			sbc 	#$20
.884a	85 3d		sta $3d				sta 	gxzScreen+1
.884c	e6 0b		inc $0b				inc 	GXEditSlot
.884e					_GXMPDExit:
.884e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.884f					GXFindSprite:
.884f	aa		tax				tax
.8850	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8853	85 0b		sta $0b				sta 	GXEditSlot
.8855	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8858	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.885b	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.885e	48		pha				pha 								; save twice
.885f	48		pha				pha
.8860	29 03		and #$03			and 	#3 							; get sprite size
.8862	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8865	aa		tax				tax
.8866	bd 87 88	lda $8887,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8869	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.886c	68		pla				pla 								; get LUT
.886d	4a		lsr a				lsr		a
.886e	4a		lsr a				lsr		a
.886f	29 03		and #$03			and 	#3
.8871	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8874	68		pla				pla 								; address, neeeds to be x 4
.8875	29 f0		and #$f0			and 	#$F0
.8877	8d 61 06	sta $0661			sta 	GXSpriteOffset
.887a	0e 61 06	asl $0661			asl 	GXSpriteOffset
.887d	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8880	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8883	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8886	60		rts				rts
.8887					_GXFXSSTTable:
>8887	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.888b					GXSortXY:
.888b	20 a9 88	jsr $88a9			jsr 	GXSortY 					; will be sorted on Y now
.888e	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8891	cd 35 06	cmp $0635			cmp 	gxX1
.8894	ad 32 06	lda $0632			lda 	gXX0+1
.8897	ed 36 06	sbc $0636			sbc 	gXX1+1
.889a	90 0c		bcc $88a8			bcc 	_GXSXYExit 					; X0 < X1 exit
.889c	a2 00		ldx #$00			ldx 	#0 							; swap them over
.889e	a0 04		ldy #$04			ldy 	#4
.88a0	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88a3	e8		inx				inx
.88a4	c8		iny				iny
.88a5	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88a8					_GXSXYExit:
.88a8	60		rts				rts
.88a9					GXSortY:
.88a9	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88ac	cd 37 06	cmp $0637			cmp 	gxY1
.88af	90 0b		bcc $88bc			bcc 	_GXSYSorted
.88b1	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88b3	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88b5					_GXSwap1:
.88b5	20 bd 88	jsr $88bd			jsr 	GXSwapXY
.88b8	88		dey				dey
.88b9	ca		dex				dex
.88ba	10 f9		bpl $88b5			bpl 	_GXSwap1
.88bc					_GXSYSorted:
.88bc	60		rts				rts
.88bd					GXSwapXY:
.88bd	bd 31 06	lda $0631,x			lda 	gxX0,x
.88c0	48		pha				pha
.88c1	b9 31 06	lda $0631,y			lda 	gxX0,y
.88c4	9d 31 06	sta $0631,x			sta 	gxX0,x
.88c7	68		pla				pla
.88c8	99 31 06	sta $0631,y			sta 	gxX0,y
.88cb	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.88cc					RunDemos:
.88cc					loop:
.88cc	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.88ce	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d0	a0 00		ldy #$00			ldy 	#(0)
.88d2	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88d5	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.88d7	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88d9	a0 00		ldy #$00			ldy 	#(0)
.88db	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88de	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.88e0	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.88e2	a0 00		ldy #$00			ldy 	#(0)
.88e4	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88e7	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.88e9	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.88eb	a0 00		ldy #$00			ldy 	#(0)
.88ed	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88f0	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.88f2	a2 82		ldx #$82			ldx 	#((130) & $FF)
.88f4	a0 1e		ldy #$1e			ldy 	#(30)
.88f6	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.88f9	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.88fb	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.88fd	a0 08		ldy #$08			ldy 	#(1*8)
.88ff	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8902	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.8904	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.8906	a0 08		ldy #$08			ldy 	#(1*8)
.8908	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.890b	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.890d	a2 00		ldx #$00			ldx 	#((0) & $FF)
.890f	a0 08		ldy #$08			ldy 	#(1*8)
.8911	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8914	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.8916	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8918	a0 08		ldy #$08			ldy 	#(1*8)
.891a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.891d	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.891f	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8921	a0 08		ldy #$08			ldy 	#(1*8)
.8923	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8926	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8928	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.892a	a0 0a		ldy #$0a			ldy 	#(10)
.892c	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.892f	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.8931	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8933	a0 64		ldy #$64			ldy 	#(100)
.8935	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8938	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.893a	a2 03		ldx #$03			ldx 	#((3) & $FF)
.893c	a0 01		ldy #$01			ldy 	#(1)
.893e	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8941	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.8943	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8945	a0 00		ldy #$00			ldy 	#(0)
.8947	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.894a	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.894c	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.894e	a0 c8		ldy #$c8			ldy 	#(200)
.8950	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8953	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.8955	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8957	a0 01		ldy #$01			ldy 	#(1)
.8959	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.895c	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.895e	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8960	a0 00		ldy #$00			ldy 	#(0)
.8962	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8965	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.8967	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8969	a0 c8		ldy #$c8			ldy 	#(200)
.896b	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.896e	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.8970	a2 05		ldx #$05			ldx 	#((5) & $FF)
.8972	a0 01		ldy #$01			ldy 	#(1)
.8974	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8977	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.8979	a2 00		ldx #$00			ldx 	#((0) & $FF)
.897b	a0 00		ldy #$00			ldy 	#(0)
.897d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8980	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.8982	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8984	a0 c8		ldy #$c8			ldy 	#(200)
.8986	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8989	60		rts				rts
.898a	20 b0 a1	jsr $a1b0	demo:	jsr 	Random32Bit
.898d	ee 40 06	inc $0640			inc 	gxEORValue
.8990	a9 30		lda #$30			lda 	#24*2
.8992	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8995	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8998	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.899b	80 ed		bra $898a			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.899d					AssembleGroup1:
.899d	a9 ff		lda #$ff			lda 	#$FF
.899f	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89a2	80 02		bra $89a6			bra 	AsmGroup12
.89a4					AssembleGroup2:
.89a4	a5 00		lda $00				lda 	$00
.89a6					AsmGroup12:
.89a6	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89a9	68		pla				pla 								; pop the return address to access the information following.
.89aa	fa		plx				plx
.89ab	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; get opcode and save as base
.89ae	8d a4 04	sta $04a4			sta 	BaseOpcode
.89b1	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89b4	d0 08		bne $89be			bne 	_AG12HaveMask
.89b6	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89b8	20 3c 8a	jsr $8a3c			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89bb	8d a5 04	sta $04a5			sta 	ModeMask
.89be					_AG12HaveMask:
.89be	20 77 8b	jsr $8b77			jsr 	TypeAndCalculateOperand 	; get zero page type
.89c1	da		phx				phx 								; save found address mode
.89c2	20 a0 8a	jsr $8aa0			jsr 	AssembleModeX
.89c5	fa		plx				plx  								; restore address mode
.89c6	b0 0b		bcs $89d3			bcs 	_AG12Exit
.89c8	20 d4 89	jsr $89d4			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89cb	20 a0 8a	jsr $8aa0			jsr 	AssembleModeX
.89ce	b0 03		bcs $89d3			bcs 	_AG12Exit
.89d0	4c ed b1	jmp $b1ed			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89d3					_AG12Exit:
.89d3	60		rts				rts
.89d4					PromoteToAbsolute:
.89d4	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.89d6	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.89d8	f0 19		beq $89f3			beq 	_PTADo
.89da	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.89dc	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.89de	f0 13		beq $89f3			beq 	_PTADo
.89e0	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.89e2	e0 80		cpx #$80			cpx 	#AM_ZEROY
.89e4	f0 0d		beq $89f3			beq 	_PTADo
.89e6	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.89e8	e0 d1		cpx #$d1			cpx 	#AM_IND
.89ea	f0 07		beq $89f3			beq 	_PTADo
.89ec	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89ee	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89f0	f0 01		beq $89f3			beq 	_PTADo
.89f2	60		rts				rts
.89f3					_PTADo:
.89f3	aa		tax				tax
.89f4	60		rts				rts
.89f5					AssembleGroup3:
.89f5	68		pla				pla 								; get parameters, which is just the opcode.
.89f6	fa		plx				plx
.89f7	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; get and output opcode
.89fa	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.89fd	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get a 16 bit operand
.8a00	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a03	38		sec				sec
.8a04	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a07	48		pha				pha 								; LSB in A
.8a08	ad 10 04	lda $0410			lda 	NSMantissa1
.8a0b	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a0e	aa		tax				tax 								; MSB in X
.8a0f	68		pla				pla
.8a10	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a11	69 7f		adc #$7f			adc 	#$7F
.8a13	90 01		bcc $8a16			bcc 	_AG3NoCarry
.8a15	e8		inx				inx
.8a16					_AG3NoCarry:
.8a16	38		sec				sec 								; fix back and write out anyways.
.8a17	e9 80		sbc #$80			sbc 	#$80
.8a19	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8a1c	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a1e	f0 0a		beq $8a2a			beq 	_AG3Exit
.8a20	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a23	29 01		and #$01			and 	#1
.8a25	f0 03		beq $8a2a			beq 	_AG3Exit
.8a27	4c f2 b1	jmp $b1f2			jmp 	RangeError 					; no, branch is out of range
.8a2a					_AG3Exit:
.8a2a	60		rts				rts
.8a2b					AssembleGroup4:
.8a2b	68		pla				pla 								; pop address
.8a2c	fa		plx				plx
.8a2d	20 34 8a	jsr $8a34			jsr 	AccessParameters 			; access and get first
.8a30	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte 			; output it.
.8a33	60		rts				rts
.8a34					AccessParameters:
.8a34	8d a1 04	sta $04a1			sta 	ParamStart
.8a37	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a3a	a9 01		lda #$01			lda 	#1
.8a3c					GetParameter:
.8a3c	5a		phy				phy
.8a3d	a8		tay				tay
.8a3e	ad a1 04	lda $04a1			lda 	ParamStart
.8a41	85 36		sta $36				sta 	zTemp0
.8a43	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a46	85 37		sta $37				sta 	zTemp0+1
.8a48	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a4a	7a		ply				ply
.8a4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a4c					AssemblerWriteByte:
.8a4c	48		pha			pha
.8a4d	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a50	29 02		and #$02		and 	#2
.8a52	f0 1b		beq $8a6f		beq 	_AWBNoPrint
.8a54	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a57	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a5a	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a5d	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a60	a9 20		lda #$20		lda 	#' '
.8a62	20 a0 b3	jsr $b3a0		jsr 	EXTPrintCharacter
.8a65	68		pla			pla 									; print byte
.8a66	48		pha			pha
.8a67	20 8a 8a	jsr $8a8a		jsr 	PrintHex
.8a6a	a9 0d		lda #$0d		lda 	#13
.8a6c	20 a0 b3	jsr $b3a0		jsr 	EXTPrintCharacter
.8a6f					_AWBNoPrint:
.8a6f	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a72	85 36		sta $36			sta 	zTemp0
.8a74	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a77	f0 0e		beq $8a87		beq 	_AWBRange
.8a79	85 37		sta $37			sta 	zTemp0+1
.8a7b	68		pla			pla 									; write byte out
.8a7c	92 36		sta ($36)		sta 	(zTemp0)
.8a7e	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a81	d0 03		bne $8a86		bne 	_AWBNoCarry
.8a83	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a86					_AWBNoCarry:
.8a86	60		rts			rts
.8a87					_AWBRange:
.8a87	4c f2 b1	jmp $b1f2		jmp 	RangeError
.8a8a					PrintHex:
.8a8a	48		pha				pha
.8a8b	4a		lsr a				lsr 	a
.8a8c	4a		lsr a				lsr 	a
.8a8d	4a		lsr a				lsr 	a
.8a8e	4a		lsr a				lsr 	a
.8a8f	20 93 8a	jsr $8a93			jsr 	_PrintNibble
.8a92	68		pla				pla
.8a93					_PrintNibble:
.8a93	29 0f		and #$0f			and 	#15
.8a95	c9 0a		cmp #$0a			cmp 	#10
.8a97	90 02		bcc $8a9b			bcc 	_NoShift
.8a99	69 06		adc #$06			adc 	#6
.8a9b					_NoShift:
.8a9b	69 30		adc #$30			adc 	#48
.8a9d	4c a0 b3	jmp $b3a0			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8aa0					AssembleModeX:
.8aa0	5a		phy				phy
.8aa1	ad a3 04	lda $04a3			lda 	IsGroup1
.8aa4	f0 17		beq $8abd			beq 	_AMXGroup2
.8aa6	8a		txa				txa 							; is it in group # 1
.8aa7	29 40		and #$40			and 	#AM_ISG1
.8aa9	f0 50		beq $8afb			beq 	_AMXFail 				; no, give up.
.8aab	8a		txa				txa 							; get back.
.8aac	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8aae	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8ab0	d0 22		bne $8ad4			bne 	_AMXHaveInfo
.8ab2	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8ab5	c9 81		cmp #$81			cmp 	#$81
.8ab7	f0 42		beq $8afb			beq 	_AMXFail
.8ab9	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8abb	80 17		bra $8ad4			bra 	_AMXHaveInfo 			; odd design decision there.
.8abd					_AMXGroup2:
.8abd	8a		txa				txa 							; is it in group 2 ?
.8abe	29 20		and #$20			and 	#AM_ISG2
.8ac0	f0 39		beq $8afb			beq 	_AMXFail 				; no, give up.
.8ac2	8a		txa				txa 							; get the offset into Y
.8ac3	29 1f		and #$1f			and 	#$1F
.8ac5	4a		lsr a				lsr 	a 						; make it 0-7.
.8ac6	4a		lsr a				lsr  	a
.8ac7	a8		tay				tay
.8ac8	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8acb					_AMXCheckOkay:
.8acb	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8acc	88		dey				dey
.8acd	10 fc		bpl $8acb			bpl 	_AMXCheckOkay
.8acf	90 2a		bcc $8afb			bcc 	_AMXFail 				; not allowed.
.8ad1	8a		txa				txa  							; get mask back
.8ad2	29 1f		and #$1f			and 	#$1F
.8ad4					_AMXHaveInfo:
.8ad4	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8ad6	10 05		bpl $8add			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8ad8	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8adb	d0 1e		bne $8afb			bne 	_AMXFail
.8add					_AMXAnySize:
.8add	18		clc				clc 							; add offset to the base opcode
.8ade	6d a4 04	adc $04a4			adc 	BaseOpcode
.8ae1					_AMXOutputCode:
.8ae1	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte 		; write the opcode out.
.8ae4	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8ae6	f0 10		beq $8af8			beq 	_AMXExit
.8ae8	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8aeb	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8aee	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8af0	30 06		bmi $8af8			bmi 	_AMXExit
.8af2	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8af5	20 4c 8a	jsr $8a4c			jsr 	AssemblerWriteByte
.8af8					_AMXExit:
.8af8	7a		ply				ply
.8af9	38		sec				sec
.8afa	60		rts				rts
.8afb					_AMXFail:
.8afb	a0 00		ldy #$00			ldy 	#0
.8afd					_AMXCheckOddities:
.8afd	8a		txa				txa
.8afe	d9 26 8b	cmp $8b26,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b01	d0 16		bne $8b19			bne 	_AMXCONext
.8b03	b9 24 8b	lda $8b24,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b06	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b09	d0 0e		bne $8b19			bne 	_AMXCONext
.8b0b	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b0d	10 05		bpl $8b14			bpl 	_AMXCONotZero
.8b0f	ad 10 04	lda $0410			lda 	NSMantissa1
.8b12	d0 05		bne $8b19			bne 	_AMXCONext
.8b14					_AMXCONotZero:
.8b14	b9 25 8b	lda $8b25,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b17	80 c8		bra $8ae1			bra 	_AMXOutputCode 			; and assemble it
.8b19					_AMXCONext:
.8b19	c8		iny				iny
.8b1a	c8		iny				iny
.8b1b	c8		iny				iny
.8b1c	b9 24 8b	lda $8b24,y			lda 	ExtraOpcode+0,y 		; end of table
.8b1f	d0 dc		bne $8afd			bne 	_AMXCheckOddities
.8b21					_AMXCOFail:
.8b21	7a		ply				ply
.8b22	18		clc				clc
.8b23	60		rts				rts
.8b24					ExtraOpcode:
>8b24	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b27	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b2a	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b2d	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b30	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b33	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b36	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b39	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b3c	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b3f	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b42	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b43					LabelHere:
.8b43	c8		iny				iny 								; skip .
.8b44	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b46	20 21 9f	jsr $9f21			jsr 	EvaluateTerm 				; get a term
.8b49	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b4c	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b4e	d0 24		bne $8b74			bne 	_ALType
.8b50	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b53	85 36		sta $36				sta 	zTemp0
.8b55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b58	85 37		sta $37				sta 	zTemp0+1
.8b5a	5a		phy				phy 								; copy address in.
.8b5b	a0 01		ldy #$01			ldy 	#1
.8b5d	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b60	92 36		sta ($36)			sta 	(zTemp0)
.8b62	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b65	91 36		sta ($36),y			sta 	(zTemp0),y
.8b67	c8		iny				iny
.8b68	a9 00		lda #$00			lda 	#0
.8b6a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6c	c8		iny				iny
.8b6d	91 36		sta ($36),y			sta 	(zTemp0),y
.8b6f	c8		iny				iny
.8b70	91 36		sta ($36),y			sta 	(zTemp0),y
.8b72	7a		ply				ply
.8b73	60		rts				rts
.8b74					_ALType:
.8b74	4c f7 b1	jmp $b1f7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b77					TypeAndCalculateOperand:
.8b77	b1 30		lda ($30),y			lda 	(codePtr),y
.8b79	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b7b	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b7d	f0 5b		beq $8bda			beq 	_TACOExit
.8b7f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b81	f0 57		beq $8bda			beq 	_TACOExit
.8b83	c8		iny				iny
.8b84	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b86	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b88	f0 51		beq $8bdb			beq 	CalculateOperand
.8b8a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b8c	f0 1f		beq $8bad			beq 	_TACOIndirect
.8b8e	88		dey				dey 								; undo get of first character
.8b8f	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get operand
.8b92	b1 30		lda ($30),y			lda 	(codePtr),y
.8b94	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b98	d0 40		bne $8bda			bne 	_TACOExit
.8b9a	c8		iny				iny
.8b9b	20 7e ab	jsr $ab7e			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b9e	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ba0	c9 58		cmp #$58			cmp 	#'X'
.8ba2	f0 36		beq $8bda			beq 	_TACOExit
.8ba4	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ba6	c9 59		cmp #$59			cmp 	#'Y'
.8ba8	f0 30		beq $8bda			beq 	_TACOExit
.8baa					_TACOSyntax:
.8baa	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.8bad					_TACOIndirect:
.8bad	20 db 8b	jsr $8bdb			jsr 	CalculateOperand 			; get the operand
.8bb0	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bb4	f0 17		beq $8bcd			beq 	_TACOIndX
.8bb6	20 07 ac	jsr $ac07			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8bb9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbb	a2 d1		ldx #$d1			ldx 	#AM_IND
.8bbd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8bbf	d0 19		bne $8bda			bne 	_TACOExit
.8bc1	c8		iny				iny
.8bc2	20 7e ab	jsr $ab7e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bc5	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bc7	d0 e1		bne $8baa			bne 	_TACOSyntax
.8bc9	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bcb	80 0d		bra $8bda			bra 	_TACOExit
.8bcd					_TACOIndX:
.8bcd	c8		iny				iny
.8bce	20 7e ab	jsr $ab7e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bd1	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bd3	d0 d5		bne $8baa			bne 	_TACOSyntax
.8bd5	20 07 ac	jsr $ac07			jsr 	CheckRightBracket			; check )
.8bd8	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8bda					_TACOExit:
.8bda	60		rts				rts
.8bdb					CalculateOperand:
.8bdb	48		pha				pha
.8bdc	da		phx				phx
.8bdd	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8bdf	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger
.8be2	fa		plx				plx
.8be3	68		pla				pla
.8be4	60		rts				rts
.ab7e					TACOCheckXY:
.ab7e	b1 30		lda ($30),y			lda 	(codePtr),y
.ab80	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ab82	c9 40		cmp #$40			cmp 	#$40
.ab84	d0 21		bne $aba7			bne 	_TCXYFail
.ab86	b1 30		lda ($30),y			lda 	(codePtr),y
.ab88	18		clc				clc
.ab89	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ab8b	85 37		sta $37				sta 	zTemp0+1
.ab8d	c8		iny				iny
.ab8e	b1 30		lda ($30),y			lda 	(codePtr),y
.ab90	c8		iny				iny
.ab91	85 36		sta $36				sta 	zTemp0
.ab93	5a		phy				phy 								; save position
.ab94	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ab96	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab98	d0 0c		bne $aba6			bne 	_TCXYPopFail
.ab9a	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ab9c	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab9e	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aba0	f0 08		beq $abaa			beq 	_TCXYFound
.aba2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aba4	f0 04		beq $abaa			beq 	_TCXYFound
.aba6					_TCXYPopFail:
.aba6	7a		ply				ply
.aba7					_TCXYFail:
.aba7	a9 00		lda #$00			lda 	#0
.aba9	60		rts				rts
.abaa					_TCXYFound:
.abaa	7a		ply				ply 								; restore position
.abab	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.abad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8be5					EditProgramCode:
.8be5	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8be8	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8beb	20 5e a4	jsr $a45e			jsr 	MemorySearch
.8bee	90 05		bcc $8bf5			bcc 	_EPCNoDelete 				; reached the end don't delete
.8bf0	d0 03		bne $8bf5			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8bf2	20 e4 b3	jsr $b3e4			jsr 	MemoryDeleteLine 			; delete the line
.8bf5					_EPCNoDelete:
.8bf5	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8bf8	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bfa	f0 0d		beq $8c09			beq 	_EPCNoInsert
.8bfc	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bff	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c02	20 5e a4	jsr $a45e			jsr 	MemorySearch
.8c05	18		clc				clc 								; insert at this point.
.8c06	20 1b b4	jsr $b41b			jsr 	MemoryInsertLine 			; insert the line
.8c09					_EPCNoInsert:
.8c09	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c0a					WarmStart:
.8c0a	a2 ff		ldx #$ff			ldx 	#$FF
.8c0c	9a		txs				txs
.8c0d	20 b6 b3	jsr $b3b6			jsr 	EXTInputLine 				; get line to lineBuffer
.8c10	20 ff a8	jsr $a8ff			jsr 	TokeniseLine 				; tokenise the line
.8c13	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8c16	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8c19	d0 17		bne $8c32			bne 	_WSEditCode 				; if so,edit code.
.8c1b	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c1e	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8c20	85 30		sta $30				sta 	codePtr
.8c22	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c24	85 31		sta $31				sta 	codePtr+1
.8c26	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8c29	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c2b	f0 dd		beq $8c0a			beq 	WarmStart
.8c2d	20 e8 93	jsr $93e8			jsr 	RUNCodePointerLine 			; execute that line.
.8c30	80 d8		bra $8c0a			bra 	WarmStart
.8c32					_WSEditCode:
.8c32	20 e5 8b	jsr $8be5			jsr 	EditProgramCode
.8c35	20 a3 8c	jsr $8ca3			jsr 	ClearCommand
.8c38	80 d0		bra $8c0a			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c3a					AssembleCommand:
.8c3a	a2 00		ldx #$00			ldx 	#0
.8c3c	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger 		; start address
.8c3f	ad 08 04	lda $0408			lda 	NSMantissa0
.8c42	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c45	ad 10 04	lda $0410			lda 	NSMantissa1
.8c48	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c4b	20 0f ac	jsr $ac0f			jsr 	CheckComma
.8c4e	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; options
.8c51	ad 08 04	lda $0408			lda 	NSMantissa0
.8c54	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c57	60		rts				rts
.8c58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c59					AssertCommand:
.8c59	a2 00		ldx #$00			ldx 	#0
.8c5b	20 76 a3	jsr $a376			jsr 	EvaluateInteger 			; the assert test
.8c5e	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; exit if result is non zero.
.8c61	d0 05		bne $8c68			bne 	_ACExit
.8c63	a9 0a		lda #$0a		lda	#10
.8c65	4c 47 98	jmp $9847		jmp	ErrorHandler
.8c68					_ACExit:
.8c68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c69					CallCommand:
.8c69	a2 00		ldx #$00			ldx 	#0
.8c6b	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger
.8c6e					_CCClear
.8c6e	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c6f	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.8c72	e0 04		cpx #$04			cpx 	#4
.8c74	d0 f8		bne $8c6e			bne 	_CCClear
.8c76	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c78					_CCCParam:
.8c78	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c7c	d0 09		bne $8c87			bne 	_CCCRun6502
.8c7e	c8		iny				iny 								; skip comma
.8c7f	e8		inx				inx	 								; next level
.8c80	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c83	e0 03		cpx #$03			cpx 	#3
.8c85	90 f1		bcc $8c78			bcc 	_CCCParam 					; done all 3 ?
.8c87					_CCCRun6502:
.8c87	5a		phy				phy 								; save position
.8c88	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c8b	85 37		sta $37				sta 	zTemp0+1
.8c8d	ad 08 04	lda $0408			lda 	NSMantissa0
.8c90	85 36		sta $36				sta 	zTemp0
.8c92	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c95	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c98	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c9b	20 a0 8c	jsr $8ca0			jsr 	_CCCZTemp0 					; call zTemp0
.8c9e	7a		ply				ply 								; restore position and exit
.8c9f	60		rts				rts
.8ca0					_CCCZTemp0:
.8ca0	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ca3					ClearCommand:
.8ca3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ca5	85 36		sta $36				sta 	0+zTemp0
.8ca7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8ca9	85 37		sta $37				sta 	1+zTemp0
.8cab					_ClearZeroLoop:
.8cab	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cad	f0 24		beq $8cd3			beq 	_ClearZeroEnd
.8caf	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cb1	a9 00		lda #$00			lda 	#0
.8cb3					_ClearOneVariable:
.8cb3	91 36		sta ($36),y			sta 	(zTemp0),y
.8cb5	c8		iny				iny
.8cb6	c0 08		cpy #$08			cpy 	#8
.8cb8	d0 f9		bne $8cb3			bne 	_ClearOneVariable
.8cba	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8cbc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cbe	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cc0	d0 04		bne $8cc6			bne 	_ClearNotProcedure
.8cc2	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cc4	91 36		sta ($36),y			sta 	(zTemp0),y
.8cc6					_ClearNotProcedure:
.8cc6	18		clc				clc 								; go to the next variable
.8cc7	b2 36		lda ($36)			lda 	(zTemp0)
.8cc9	65 36		adc $36				adc 	zTemp0
.8ccb	85 36		sta $36				sta 	zTemp0
.8ccd	90 dc		bcc $8cab			bcc 	_ClearZeroLoop
.8ccf	e6 37		inc $37				inc 	zTemp0+1
.8cd1	80 d8		bra $8cab			bra 	_ClearZeroLoop
.8cd3					_ClearZeroEnd:
.8cd3	18		clc				clc
.8cd4	a5 36		lda $36				lda 	zTemp0
.8cd6	69 01		adc #$01			adc 	#1
.8cd8	8d 8c 04	sta $048c			sta 	lowMemPtr
.8cdb	a5 37		lda $37				lda 	zTemp0+1
.8cdd	69 00		adc #$00			adc 	#0
.8cdf	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ce2	20 18 a5	jsr $a518			jsr 	StackReset
.8ce5	20 fe b4	jsr $b4fe			jsr 	StringSystemInitialise
.8ce8	20 67 97	jsr $9767			jsr 	ProcedureScan
.8ceb	20 a4 93	jsr $93a4			jsr 	Command_Restore
.8cee	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8cf1	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8cf4	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cf7	20 0e a1	jsr $a10e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8cfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cfb					Command_Data:
.8cfb	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cfd	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cff	20 b9 97	jsr $97b9			jsr 	ScanForward
.8d02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d03					DimCommand:
.8d03	b1 30		lda ($30),y			lda 	(codePtr),y
.8d05	29 c0		and #$c0			and 	#$C0
.8d07	c9 40		cmp #$40			cmp 	#$40
.8d09	d0 7a		bne $8d85			bne 	_DCSyntax
.8d0b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0d	18		clc				clc
.8d0e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d10	85 3f		sta $3f				sta 	zaTemp+1
.8d12	c8		iny				iny
.8d13	b1 30		lda ($30),y			lda 	(codePtr),y
.8d15	c8		iny				iny
.8d16	85 3e		sta $3e				sta 	zaTemp
.8d18	5a		phy				phy
.8d19	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d1b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d1d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d1f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d21	f0 62		beq $8d85			beq 	_DCSyntax
.8d23	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d25	29 04		and #$04			and 	#NSBIsArray
.8d27	f0 64		beq $8d8d			beq 	_DCType
.8d29	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d2b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d2d	d0 59		bne $8d88			bne 	_DCRedefine
.8d2f	7a		ply				ply
.8d30	20 90 8d	jsr $8d90			jsr 	_DCGetSize 				; get array size, check it.
.8d33	5a		phy				phy
.8d34	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d36	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d38	7a		ply				ply 							; is there a second (e.g. ,x)
.8d39	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d3d	d0 0a		bne $8d49			bne 	_DCOneDimension
.8d3f	c8		iny				iny 							; skip comma
.8d40	20 90 8d	jsr $8d90			jsr 	_DCGetSize 				; get 2nd array size
.8d43	5a		phy				phy
.8d44	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d46	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d48	7a		ply				ply
.8d49					_DCOneDimension:
.8d49	5a		phy				phy 							; save position
.8d4a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d4c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4e	aa		tax				tax
.8d4f	c8		iny				iny
.8d50	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d52	e8		inx				inx 							; bump them.
.8d53	1a		inc a				inc 	a
.8d54	20 89 b0	jsr $b089			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d57	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d59	29 e0		and #$e0			and 	#$E0
.8d5b	d0 23		bne $8d80			bne 	_DCSize
.8d5d	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d5f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d61	20 9e 8d	jsr $8d9e			jsr 	ScaleByBaseType 		; scale by base type
.8d64	a5 36		lda $36				lda 	zTemp0
.8d66	a6 37		ldx $37				ldx 	zTemp0+1
.8d68	20 d0 a0	jsr $a0d0			jsr 	AllocateXABytes 		; allocate memory
.8d6b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d6d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d6f	c8		iny				iny
.8d70	8a		txa				txa
.8d71	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d73	7a		ply				ply 							; get position back
.8d74	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 		; check )
.8d77	b1 30		lda ($30),y			lda 	(codePtr),y
.8d79	c8		iny				iny 							; consume in case
.8d7a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d7c	f0 85		beq $8d03			beq 	DimCommand
.8d7e	88		dey				dey 							; undo consume
.8d7f	60		rts				rts
.8d80					_DCSize:
.8d80	a9 16		lda #$16		lda	#22
.8d82	4c 47 98	jmp $9847		jmp	ErrorHandler
.8d85					_DCSyntax:
.8d85	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.8d88					_DCRedefine:
.8d88	a9 15		lda #$15		lda	#21
.8d8a	4c 47 98	jmp $9847		jmp	ErrorHandler
.8d8d					_DCType:
.8d8d	4c f7 b1	jmp $b1f7			jmp 	TypeError
.8d90					_DCGetSize:
.8d90	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d92	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 	; get array dimension
.8d95	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d97	f0 e7		beq $8d80			beq 	_DCSize
.8d99	c9 fe		cmp #$fe			cmp 	#254
.8d9b	f0 e3		beq $8d80			beq 	_DCSize
.8d9d	60		rts				rts
.8d9e					ScaleByBaseType:
.8d9e	29 10		and #$10			and 	#NSBIsString 			; is it string
.8da0	d0 19		bne $8dbb			bne 	_SBBTString
.8da2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8da4	48		pha				pha
.8da5	a5 36		lda $36				lda 	zTemp0
.8da7	48		pha				pha
.8da8	06 36		asl $36				asl 	zTemp0 					; x 2
.8daa	26 37		rol $37				rol 	zTemp0+1
.8dac	06 36		asl $36				asl 	zTemp0 					; x 4
.8dae	26 37		rol $37				rol 	zTemp0+1
.8db0	68		pla				pla 							; add stacked value = x 5
.8db1	65 36		adc $36				adc 	zTemp0
.8db3	85 36		sta $36				sta 	zTemp0
.8db5	68		pla				pla
.8db6	65 37		adc $37				adc 	zTemp0+1
.8db8	85 37		sta $37				sta 	zTemp0+1
.8dba	60		rts				rts
.8dbb					_SBBTString:
.8dbb	06 36		asl $36				asl 	zTemp0
.8dbd	26 37		rol $37				rol 	zTemp0+1
.8dbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8dc0					EndCommand:
.8dc0	4c 0a 8c	jmp $8c0a			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8dc3					ForCommand:
.8dc3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8dc5	20 b3 a4	jsr $a4b3			jsr 	StackOpen
.8dc8	a2 00		ldx #$00			ldx 	#0
.8dca	20 21 9f	jsr $9f21			jsr 	EvaluateTerm
.8dcd	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8dd0	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8dd2	d0 49		bne $8e1d			bne		_FCError
.8dd4	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8dd6	20 17 ac	jsr $ac17			jsr 	CheckNextA
.8dd9	e8		inx				inx
.8dda	20 76 a3	jsr $a376			jsr 	EvaluateInteger 			; <from> in +1
.8ddd	b1 30		lda ($30),y			lda 	(codePtr),y
.8ddf	c8		iny				iny 								; consume it
.8de0	48		pha				pha 								; save on stack for later
.8de1	c9 af		cmp #$af			cmp 	#KWD_DOWNTO
.8de3	f0 04		beq $8de9			beq 	_FCNoSyntax
.8de5	c9 c3		cmp #$c3			cmp 	#KWD_TO
.8de7	d0 37		bne $8e20			bne 	_FCSyntaxError
.8de9					_FCNoSyntax:
.8de9	e8		inx				inx
.8dea	20 76 a3	jsr $a376			jsr 	EvaluateInteger
.8ded	20 f7 a4	jsr $a4f7			jsr 	STKSaveCodePosition 		; save loop back position
.8df0	68		pla				pla 								; restore DOWNTO or TO
.8df1	5a		phy				phy 								; save Y on the stack
.8df2	49 af		eor #$af			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8df4	f0 02		beq $8df8			beq 	_FCNotDownTo
.8df6	a9 02		lda #$02			lda 	#2
.8df8					_FCNotDownTo:
.8df8	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8df9	a0 10		ldy #$10			ldy 	#16
.8dfb	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dfd	a0 06		ldy #$06			ldy 	#6
.8dff	ad 08 04	lda $0408			lda 	NSMantissa0
.8e02	91 34		sta ($34),y			sta 	(basicStack),y
.8e04	ad 10 04	lda $0410			lda 	NSMantissa1
.8e07	c8		iny				iny
.8e08	91 34		sta ($34),y			sta 	(basicStack),y
.8e0a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8e0c	a2 01		ldx #$01			ldx 	#1
.8e0e	20 23 8e	jsr $8e23			jsr 	FCIntegerToStack
.8e11	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8e13	a2 02		ldx #$02			ldx 	#2
.8e15	20 23 8e	jsr $8e23			jsr 	FCIntegerToStack
.8e18	20 43 8e	jsr $8e43			jsr 	CopyIndexToReference
.8e1b	7a		ply				ply 								; restore position
.8e1c	60		rts				rts
.8e1d					_FCError:
.8e1d	4c f7 b1	jmp $b1f7			jmp 	TypeError
.8e20					_FCSyntaxError:
.8e20	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.8e23					FCIntegerToStack:
.8e23	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8e26	10 03		bpl $8e2b			bpl	 	_FCNotNegative
.8e28	20 b4 a3	jsr $a3b4			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e2b					_FCNotNegative:
.8e2b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e2e	91 34		sta ($34),y			sta 	(basicStack),y
.8e30	c8		iny				iny
.8e31	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e34	91 34		sta ($34),y			sta 	(basicStack),y
.8e36	c8		iny				iny
.8e37	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e3a	91 34		sta ($34),y			sta 	(basicStack),y
.8e3c	c8		iny				iny
.8e3d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e40	91 34		sta ($34),y			sta 	(basicStack),y
.8e42	60		rts				rts
.8e43					CopyIndexToReference:
.8e43	5a		phy				phy
.8e44	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e46	38		sec				sec 								; (because we copy from offset 8)
.8e47	b1 34		lda ($34),y			lda 	(basicStack),y
.8e49	e9 08		sbc #$08			sbc 	#8
.8e4b	85 36		sta $36				sta 	zTemp0
.8e4d	c8		iny				iny
.8e4e	b1 34		lda ($34),y			lda 	(basicStack),y
.8e50	e9 00		sbc #$00			sbc 	#0
.8e52	85 37		sta $37				sta 	zTemp0+1
.8e54	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e56	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e58	b1 34		lda ($34),y			lda 	(basicStack),y
.8e5a	0a		asl a				asl 	a 							; into carry
.8e5b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e5d	90 14		bcc $8e73			bcc 	_CITRNormal
.8e5f	38		sec				sec
.8e60					_CITRNegative:
.8e60	a9 00		lda #$00			lda 	#0
.8e62	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e64	91 36		sta ($36),y			sta 	(zTemp0),y
.8e66	c8		iny				iny
.8e67	ca		dex				dex
.8e68	d0 f6		bne $8e60			bne 	_CITRNegative
.8e6a	88		dey				dey 								; look at MSB of mantissa
.8e6b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e6d	09 80		ora #$80			ora 	#$80
.8e6f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e71	7a		ply				ply
.8e72	60		rts				rts
.8e73					_CITRNormal:
.8e73	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e75	91 36		sta ($36),y			sta 	(zTemp0),y
.8e77	c8		iny				iny
.8e78	ca		dex				dex
.8e79	d0 f8		bne $8e73			bne 	_CITRNormal
.8e7b	7a		ply				ply 								; and exit.
.8e7c	60		rts				rts
.8e7d					NextCommand:
.8e7d	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e7f	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e81	20 df a4	jsr $a4df			jsr 	StackCheckFrame
.8e84	5a		phy				phy
.8e85	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e87	b1 34		lda ($34),y			lda 	(basicStack),y
.8e89	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e8b	30 02		bmi $8e8f			bmi 	_NCStepNeg
.8e8d	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e8f					_NCStepNeg:
.8e8f	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e91	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e93	18		clc				clc
.8e94					_NCBump:
.8e94	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e96	91 34		sta ($34),y			sta 	(basicStack),y
.8e98	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e9a	c8		iny				iny 								; next byte
.8e9b	ca		dex				dex 								; do four times
.8e9c	d0 f6		bne $8e94			bne 	_NCBump
.8e9e	20 43 8e	jsr $8e43			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ea1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8ea3	b1 34		lda ($34),y			lda 	(basicStack),y
.8ea5	0a		asl a				asl 	a 							; sign bit to carry
.8ea6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ea8	85 38		sta $38				sta 	zTemp1
.8eaa	90 02		bcc $8eae			bcc 	_NCCompRev 					; use if step is +ve
.8eac	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8eae					_NCCompRev:
.8eae	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8eb0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8eb2	85 39		sta $39				sta 	zTemp1+1
.8eb4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8eb6	38		sec				sec
.8eb7					_NCCompare:
.8eb7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8eb9	b1 34		lda ($34),y			lda 	(basicStack),y
.8ebb	a4 39		ldy $39				ldy 	zTemp1+1
.8ebd	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ebf	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ec1	e6 39		inc $39				inc 	zTemp1+1
.8ec3	ca		dex				dex 								; do it 4 times.
.8ec4	d0 f1		bne $8eb7			bne 	_NCCompare
.8ec6	50 02		bvc $8eca			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ec8	49 80		eor #$80			eor 	#$80
.8eca					_NCNoOverflow:
.8eca	7a		ply				ply 								; restore Y position
.8ecb	0a		asl a				asl 	a 							; is bit 7 set.
.8ecc	90 04		bcc $8ed2			bcc 	_NCLoopback 				; if no , >= so loop back
.8ece	20 d1 a4	jsr $a4d1			jsr 	StackClose 					; exit the loop
.8ed1	60		rts				rts
.8ed2					_NCLoopBack:
.8ed2	20 08 a5	jsr $a508			jsr 	STKLoadCodePosition 		; loop back
.8ed5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8ed6					RectangleCommand:
.8ed6	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8ed8	80 02		bra $8edc			bra 	ShapeDrawCmd
.8eda					CircleCommand:
.8eda	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8edc					ShapeDrawCmd:
.8edc	20 f6 8e	jsr $8ef6			jsr 	RunGraphicsCommand
.8edf					ShapeDraw:
.8edf	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8ee2	4c ea 8e	jmp $8eea			jmp 	ExecuteGraphicCommand	 	; and complete
.8ee5					LineCommand:
.8ee5	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8ee7	20 f6 8e	jsr $8ef6			jsr 	RunGraphicsCommand
.8eea					ExecuteGraphicCommand:
.8eea	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8eed	20 88 80	jsr $8088			jsr 	GXGraphicDraw 				; draw it and exit
.8ef0	b0 01		bcs $8ef3			bcs 	_EGCError
.8ef2	60		rts				rts
.8ef3					_EGCError:
.8ef3	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.8ef6					RunGraphicsCommand:
.8ef6	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8ef9	68		pla				pla 								; pop handler address
.8efa	fa		plx				plx
.8efb	1a		inc a				inc 	a
.8efc	d0 01		bne $8eff			bne 	_RGINoCarry
.8efe	e8		inx				inx
.8eff					_RGINoCarry:
.8eff	8d 68 06	sta $0668			sta 	GXHandler
.8f02	8e 69 06	stx $0669			stx 	GXHandler+1
.8f05					_RGICommandLoop:
.8f05	b1 30		lda ($30),y			lda 	(codePtr),y
.8f07	c8		iny				iny
.8f08	c9 c3		cmp #$c3			cmp 	#KWD_TO						; is it TO x,y
.8f0a	f0 49		beq $8f55			beq 	_RGI_To
.8f0c	c9 b5		cmp #$b5			cmp 	#KWD_HERE 					; do it here.
.8f0e	f0 4b		beq $8f5b			beq 	_RGI_Here
.8f10	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f12	f0 33		beq $8f47			beq 	_RGI_Exit
.8f14	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f16	f0 2f		beq $8f47			beq 	_RGI_Exit
.8f18	c9 ba		cmp #$ba			cmp 	#KWD_OUTLINE 				; solid or outline
.8f1a	f0 34		beq $8f50			beq 	_RGI_Frame
.8f1c	c9 c0		cmp #$c0			cmp 	#KWD_SOLID
.8f1e	f0 29		beq $8f49			beq 	_RGI_Solid
.8f20	c9 a6		cmp #$a6			cmp 	#KWD_BY 					; by offset
.8f22	f0 41		beq $8f65			beq 	_RGI_By
.8f24	c9 b1		cmp #$b1			cmp 	#KWD_FROM 					; from
.8f26	f0 0d		beq $8f35			beq 	_RGI_Move
.8f28	c9 ae		cmp #$ae			cmp 	#KWD_DIM 					; dim (set scale)
.8f2a	f0 5b		beq $8f87			beq 	_RGI_Dim
.8f2c	c9 ac		cmp #$ac			cmp 	#KWD_COLOUR 				; colour or Color
.8f2e	f0 6a		beq $8f9a			beq 	_RGI_Colour
.8f30	c9 ab		cmp #$ab			cmp 	#KWD_COLOR
.8f32	f0 66		beq $8f9a			beq 	_RGI_Colour
.8f34	88		dey				dey 								; unpick get.
.8f35					_RGI_Move:
.8f35	20 c4 8f	jsr $8fc4			jsr 	GCGetCoordinatePair 		; move to here
.8f38	20 de 8f	jsr $8fde			jsr 	GCCopyPairToStore 			; save
.8f3b	5a		phy				phy
.8f3c	20 d4 8f	jsr $8fd4			jsr 	GCLoadAXY 					; load in
.8f3f	09 20		ora #$20			ora 	#16*2 						; move there
.8f41	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f44	7a		ply				ply
.8f45	80 be		bra $8f05			bra 	_RGICommandLoop 			; and go round
.8f47					_RGI_Exit:
.8f47	88		dey				dey 								; unpick : / EOL
.8f48	60		rts				rts
.8f49					_RGI_Solid:
.8f49	a9 02		lda #$02			lda 	#2
.8f4b	8d 64 06	sta $0664			sta 	gxFillSolid
.8f4e	80 b5		bra $8f05			bra 	_RGICommandLoop
.8f50					_RGI_Frame:
.8f50	9c 64 06	stz $0664			stz 	gxFillSolid
.8f53	80 b0		bra $8f05			bra 	_RGICommandLoop
.8f55					_RGI_To:
.8f55	20 c4 8f	jsr $8fc4			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f58	20 de 8f	jsr $8fde			jsr 	GCCopyPairToStore
.8f5b					_RGI_Here:
.8f5b	5a		phy				phy
.8f5c	20 d4 8f	jsr $8fd4			jsr 	GCLoadAXY 					; load it into AXY
.8f5f	20 c1 8f	jsr $8fc1			jsr 	_RGICallHandler 			; go do whatever it is.
.8f62	7a		ply				ply
.8f63	80 a0		bra $8f05			bra 	_RGICommandLoop 			; and go round
.8f65					_RGI_By:
.8f65	20 c4 8f	jsr $8fc4			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f68	18		clc				clc
.8f69	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f6c	6d 65 06	adc $0665			adc 	gxxPos
.8f6f	8d 65 06	sta $0665			sta 	gxXPos
.8f72	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8f75	6d 66 06	adc $0666			adc 	gxxPos+1
.8f78	8d 66 06	sta $0666			sta 	gxXPos+1
.8f7b	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8f7e	18		clc				clc
.8f7f	6d 67 06	adc $0667			adc 	gxYPos
.8f82	8d 67 06	sta $0667			sta 	gxYPos
.8f85	80 d4		bra $8f5b			bra 	_RGI_Here
.8f87					_RGI_Dim:
.8f87	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger
.8f8a	c9 00		cmp #$00			cmp 	#0
.8f8c	f0 30		beq $8fbe			beq 	_RGIRange
.8f8e	c9 09		cmp #$09			cmp 	#8+1
.8f90	b0 2c		bcs $8fbe			bcs		_RGIRange
.8f92	3a		dec a				dec 	a
>8f93	db						.byte 	$DB 						; causes a break in the emulator
.8f94	8d 5a 06	sta $065a			sta 	gxScale
.8f97	4c 05 8f	jmp $8f05			jmp 	_RGICommandLoop
.8f9a					_RGI_Colour:
.8f9a	a2 01		ldx #$01			ldx 	#1 							; colour
.8f9c	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger
.8f9f	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fa1	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.8fa4	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fa8	d0 04		bne $8fae			bne 	_RGICDefaultMode
.8faa	c8		iny				iny
.8fab	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger
.8fae					_RGICDefaultMode:
.8fae	5a		phy				phy
.8faf	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fb1	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fb4	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fb7	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8fba	7a		ply				ply
.8fbb	4c 05 8f	jmp $8f05			jmp 	_RGICommandLoop 			; and go round
.8fbe					_RGIRange:
.8fbe	4c f2 b1	jmp $b1f2			jmp 	RangeError
.8fc1					_RGICallHandler:
.8fc1	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8fc4					GCGetCoordinatePair:
.8fc4	a2 01		ldx #$01			ldx 	#1
.8fc6	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger
.8fc9	20 0f ac	jsr $ac0f			jsr 	CheckComma
.8fcc	e8		inx				inx
.8fcd	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger
.8fd0	60		rts				rts
.8fd1					_GCCPRange:
.8fd1	4c f2 b1	jmp $b1f2			jmp 	RangeError
.8fd4					GCLoadAXY:
.8fd4	ad 66 06	lda $0666			lda 	gxXPos+1
.8fd7	ae 65 06	ldx $0665			ldx 	gxXPos
.8fda	ac 67 06	ldy $0667			ldy 	gxYPos
.8fdd	60		rts				rts
.8fde					GCCopyPairToStore:
.8fde	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8fe1	8d 65 06	sta $0665			sta 	gxXPos
.8fe4	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fe7	8d 66 06	sta $0666			sta 	gxXPos+1
.8fea	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fed	8d 67 06	sta $0667			sta 	gxYPos
.8ff0	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.8ff1					BitmapCtrl:
.8ff1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ff3	c8		iny				iny
.8ff4	a2 01		ldx #$01			ldx 	#1
.8ff6	c9 91		cmp #$91			cmp 	#KWD_ON
.8ff8	f0 11		beq $900b			beq 	BitmapSwitch
.8ffa	ca		dex				dex
.8ffb	c9 90		cmp #$90			cmp 	#KWD_OFF
.8ffd	f0 0c		beq $900b			beq 	BitmapSwitch
.8fff	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; get the colour
.9002	5a		phy				phy
.9003	aa		tax				tax
.9004	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.9006	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9009	7a		ply				ply
.900a	60		rts				rts
.900b					BitmapSwitch:
.900b	5a		phy				phy
.900c	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.900e	a9 02		lda #$02			lda 	#1*2
.9010	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9013	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9015	a0 00		ldy #$00			ldy 	#0
.9017	a2 ff		ldx #$ff			ldx 	#$FF
.9019	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.901c	9c 64 06	stz $0664			stz 	gxFillSolid
.901f	9c 65 06	stz $0665			stz 	gxXPos
.9022	9c 66 06	stz $0666			stz 	gxXPos+1
.9025	9c 67 06	stz $0667			stz 	gxYPos
.9028	9c 6a 06	stz $066a			stz 	gxDrawScale
.902b	a9 20		lda #$20			lda 	#16*2 						; home cursor
.902d	a2 00		ldx #$00			ldx 	#0
.902f	a0 00		ldy #$00			ldy 	#0
.9031	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9034	7a		ply				ply
.9035	60		rts				rts
.9036					SpritesCtrl:
.9036	b1 30		lda ($30),y			lda 	(codePtr),y
.9038	c8		iny				iny
.9039	a2 01		ldx #$01			ldx 	#1
.903b	c9 91		cmp #$91			cmp 	#KWD_ON
.903d	f0 08		beq $9047			beq 	SpriteSwitch
.903f	ca		dex				dex
.9040	c9 90		cmp #$90			cmp 	#KWD_OFF
.9042	f0 03		beq $9047			beq 	SpriteSwitch
.9044	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.9047					SpriteSwitch:
.9047	5a		phy				phy
.9048	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.904a	a9 04		lda #$04			lda 	#2*2
.904c	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.904f	7a		ply				ply
.9050	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.9051					GfxCommand:
.9051	a2 00		ldx #$00			ldx 	#0
.9053	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; command
.9056	20 0f ac	jsr $ac0f			jsr 	CheckComma
.9059	e8		inx				inx
.905a	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger 		; X
.905d	20 0f ac	jsr $ac0f			jsr 	CheckComma
.9060	e8		inx				inx
.9061	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; Y
.9064	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.9067	4a		lsr a				lsr 	a
.9068	d0 16		bne $9080			bne 	_GfxError
.906a	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.906d	b0 11		bcs $9080			bcs 	_GfxError 					; bit 7 should have been zero
.906f	5a		phy				phy 								; save pos
.9070	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.9073	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.9076	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.9079	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.907c	b0 02		bcs $9080			bcs 	_GfxError
.907e	7a		ply				ply 								; restore pos and exit.
.907f	60		rts				rts
.9080					_GfxError:
.9080	4c f2 b1	jmp $b1f2			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.9083					Command_GOSUB:
.9083	a2 00		ldx #$00			ldx 	#0
.9085	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.9088	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.908a	20 b3 a4	jsr $a4b3			jsr 	StackOpen 					; create frame
.908d	20 f7 a4	jsr $a4f7			jsr 	STKSaveCodePosition 		; save current position
.9090	4c a6 90	jmp $90a6			jmp 	GotoStackX
.9093					Command_RETURN:
.9093	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.9095	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.9097	20 df a4	jsr $a4df			jsr 	StackCheckFrame
.909a	20 08 a5	jsr $a508			jsr 	STKLoadCodePosition 		; restore code position
.909d	20 d1 a4	jsr $a4d1			jsr 	StackClose
.90a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.90a1					GotoCommand:
.90a1	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.90a3	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger
.90a6					GotoStackX:
.90a6	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.90a9	48		pha				pha 								; it is slightly inefficient, just in cases.
.90aa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.90ad	fa		plx				plx
.90ae	20 5e a4	jsr $a45e			jsr 	MemorySearch 				; transfer to line number AX.
.90b1	90 05		bcc $90b8			bcc 	_GotoError 					; not found, off end.
.90b3	d0 03		bne $90b8			bne 	_GotoError 					; not found exactly
.90b5	4c e1 93	jmp $93e1			jmp 	RunNewLine 					; and go straight to new line code.
.90b8					_GotoError:
.90b8	a9 0d		lda #$0d		lda	#13
.90ba	4c 47 98	jmp $9847		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.90bd					IfCommand:
.90bd	a2 00		ldx #$00			ldx 	#0 							; If what.
.90bf	20 53 a3	jsr $a353			jsr 	EvaluateNumber
.90c2	b1 30		lda ($30),y			lda 	(codePtr),y
.90c4	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.90c6	d0 0a		bne $90d2			bne 	_IFStructured
.90c8	c8		iny				iny 								; consume THEN
.90c9	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; is it zero
.90cc	f0 01		beq $90cf			beq 	_IfFail 					; if fail, go to next line
.90ce	60		rts				rts 								; if THEN just continue
.90cf					_IfFail:
.90cf	4c 46 94	jmp $9446			jmp 	EOLCommand
.90d2					_IfStructured:
.90d2	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; is it zero
.90d5	d0 07		bne $90de			bne 	_IfExit 					; if not, then continue normally.
.90d7	a9 b0		lda #$b0			lda 	#KWD_ELSE 					; look for else/endif
.90d9	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.90db	20 b9 97	jsr $97b9			jsr 	ScanForward 				; and run from there/
.90de					_IfExit:
.90de	60		rts				rts
.90df					ElseCode:
.90df	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.90e1	aa		tax				tax 								; so just go to the structure exit
.90e2	20 b9 97	jsr $97b9			jsr 	ScanForward
.90e5	60		rts				rts
.90e6					EndIf:
.90e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.90e7					LetCommand:
.90e7	a2 00		ldx #$00			ldx 	#0
.90e9	b1 30		lda ($30),y			lda 	(codePtr),y
.90eb	c9 10		cmp #$10			cmp 	#KWD_AT
.90ed	d0 16		bne $9105			bne 	_LCStandard
.90ef	c8		iny				iny 								; skip equal
.90f0	20 21 9f	jsr $9f21			jsr 	EvaluateTerm 				; get a number
.90f3	20 65 9d	jsr $9d65			jsr 	Dereference 				; dereference it
.90f6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.90f9	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.90fb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90fe	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9100	d0 10		bne $9112			bne 	_LCMain
.9102	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; was a reference before.
.9105					_LCStandard:
.9105	ad 38 9c	lda $9c38			lda 	PrecedenceLevel+"*"			; precedence > this
.9108	20 52 9c	jsr $9c52			jsr 	EvaluateExpressionAtPrecedence
.910b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.910e	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.9110	f0 0e		beq $9120			beq 	_LetGoProc 					; it's a procedure call.
.9112					_LCMain:
.9112	a9 3d		lda #$3d			lda 	#"=" 						; check =
.9114	20 17 ac	jsr $ac17			jsr 	CheckNextA
.9117	e8		inx				inx 								; RHS
.9118	20 4a a3	jsr $a34a			jsr 	EvaluateValue
.911b	ca		dex				dex
.911c	20 23 91	jsr $9123			jsr 	AssignVariable
.911f	60		rts				rts
.9120					_LetGoProc:
.9120	4c bc 92	jmp $92bc			jmp 	CallProcedure
.9123					AssignVariable:
.9123	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.9126	48		pha				pha 								; save a copy
.9127	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.912a	29 10		and #$10			and 	#NSBIsString
.912c	d0 0b		bne $9139			bne 	_ASError
.912e	68		pla				pla 								; get back
.912f	29 10		and #$10			and 	#NSBIsString 				; check type
.9131	d0 03		bne $9136			bne 	_ASString
.9133	4c 8d 9c	jmp $9c8d			jmp 	AssignNumber
.9136					_ASString:
.9136	4c fb 9c	jmp $9cfb			jmp 	AssignString
.9139					_ASError:
.9139	4c f7 b1	jmp $b1f7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.913c					Command_List:
.913c	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.913f	9c 14 04	stz $0414			stz 	NSMantissa1+4
.9142	a9 ff		lda #$ff			lda 	#$FF
.9144	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9147	8d 17 04	sta $0417			sta 	NSMantissa1+7
.914a	b1 30		lda ($30),y			lda 	(codePtr),y
.914c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.914e	f0 1e		beq $916e			beq 	_CLSecond
.9150	20 cc 91	jsr $91cc			jsr 	CLIsDigit 					; if not digit, list all
.9153	b0 24		bcs $9179			bcs 	_CLStart
.9155	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.9157	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger
.915a	b1 30		lda ($30),y			lda 	(codePtr),y
.915c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.915e	f0 0e		beq $916e			beq 	_CLSecond 					; if so go get it
.9160	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9163	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9166	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9169	8d 17 04	sta $0417			sta 	NSMantissa1+7
.916c	80 0b		bra $9179			bra 	_CLStart
.916e					_CLSecond:
.916e	c8		iny				iny 								; consume comma
.916f	20 cc 91	jsr $91cc			jsr 	CLIsDigit 					; digit found
.9172	b0 05		bcs $9179			bcs 	_CLStart 					; if not, continue listing
.9174	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9176	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger
.9179					_CLStart
.9179	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.917b	85 30		sta $30				sta 	codePtr
.917d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.917f	85 31		sta $31				sta 	codePtr+1
.9181					_CLLoop:
.9181	20 e1 b3	jsr $b3e1			jsr 	EXTBreakCheck 				; break check
.9184	f0 30		beq $91b6			beq 	_CLExit
.9186	b2 30		lda ($30)			lda 	(codePtr)
.9188	f0 2c		beq $91b6			beq 	_CLExit
.918a	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.918c	20 b9 91	jsr $91b9			jsr 	CLCompareLineNo
.918f	90 18		bcc $91a9			bcc 	_CLNext
.9191	a2 07		ldx #$07			ldx 	#7
.9193	20 b9 91	jsr $91b9			jsr 	CLCompareLineNo
.9196	f0 02		beq $919a			beq 	_CLDoThisOne
.9198	b0 0f		bcs $91a9			bcs 	_CLNext
.919a					_CLDoThisOne:
.919a	20 15 96	jsr $9615			jsr 	ListConvertLine 			; convert line into token Buffer
.919d	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.919f	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.91a1	20 a0 98	jsr $98a0			jsr 	PrintStringXA
.91a4	a9 0d		lda #$0d			lda 	#13 						; new line
.91a6	20 a0 b3	jsr $b3a0			jsr 	EXTPrintCharacter
.91a9					_CLNext:
.91a9	18		clc				clc
.91aa	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91ac	65 30		adc $30				adc 	codePtr
.91ae	85 30		sta $30				sta 	codePtr
.91b0	90 02		bcc $91b4			bcc 	_CREExit
.91b2	e6 31		inc $31				inc 	codePtr+1
.91b4					_CREExit:
.91b4	80 cb		bra $9181			bra 	_CLLoop
.91b6					_CLExit:
.91b6	4c 0a 8c	jmp $8c0a			jmp 	WarmStart
.91b9					CLCompareLineNo:
.91b9	38		sec				sec
.91ba	a0 01		ldy #$01			ldy 	#1
.91bc	b1 30		lda ($30),y			lda 	(codePtr),y
.91be	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.91c1	85 36		sta $36				sta 	zTemp0
.91c3	c8		iny				iny
.91c4	b1 30		lda ($30),y			lda 	(codePtr),y
.91c6	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.91c9	05 36		ora $36				ora 	zTemp0
.91cb	60		rts				rts
.91cc					CLIsDigit:
.91cc	b1 30		lda ($30),y			lda 	(codePtr),y
.91ce	c9 30		cmp #$30			cmp 	#"0"
.91d0	90 03		bcc $91d5			bcc	 	_CLIDExitFalse
.91d2	c9 3a		cmp #$3a			cmp 	#"9"+1
.91d4	60		rts				rts
.91d5					_CLIDExitFalse:
.91d5	38		sec				sec
.91d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.91d7					Command_LOCAL:
.91d7	a2 00		ldx #$00			ldx 	#0 							; at level 0
.91d9	20 e5 91	jsr $91e5			jsr 	LocaliseNextTerm 			; convert term to a local.
.91dc	b1 30		lda ($30),y			lda 	(codePtr),y
.91de	c8		iny				iny
.91df	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91e1	f0 f4		beq $91d7			beq 	Command_LOCAL
.91e3	88		dey				dey 								; unpick pre-get
.91e4	60		rts				rts
.91e5					LocaliseNextTerm:
.91e5	20 21 9f	jsr $9f21			jsr 	EvaluateTerm 				; evaluate the term
.91e8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.91eb	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.91ed	f0 69		beq $9258			beq		_LNTError
.91ef	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.91f2	85 36		sta $36				sta 	zTemp0
.91f4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.91f7	85 37		sta $37				sta  	zTemp0+1
.91f9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.91fc	29 10		and #$10			and 	#NSBIsString
.91fe	d0 22		bne $9222			bne 	_LNTPushString
.9200	5a		phy				phy
.9201	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9203					_LNTPushNumLoop:
.9203	b1 36		lda ($36),y			lda		(zTemp0),y
.9205	20 91 a4	jsr $a491			jsr 	StackPushByte
.9208	a9 00		lda #$00			lda 	#0
.920a	91 36		sta ($36),y			sta 	(zTemp0),y
.920c	c8		iny				iny
.920d	c0 05		cpy #$05			cpy 	#5
.920f	d0 f2		bne $9203			bne 	_LNTPushNumLoop
.9211	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.9213	20 91 a4	jsr $a491			jsr 	StackPushByte
.9216	a5 37		lda $37				lda 	zTemp0+1
.9218	20 91 a4	jsr $a491			jsr 	StackPushByte
.921b	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.921d	20 91 a4	jsr $a491			jsr 	StackPushByte
.9220	7a		ply				ply
.9221	60		rts				rts
.9222					_LNTPushString:
.9222	5a		phy				phy
.9223	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.9225	85 38		sta $38				sta 	zTemp1
.9227	a0 01		ldy #$01			ldy 	#1
.9229	b1 36		lda ($36),y			lda 	(zTemp0),y
.922b	85 39		sta $39				sta 	zTemp1+1
.922d	a0 00		ldy #$00			ldy 	#0 							; output string
.922f	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.9231	f0 0a		beq $923d			beq 	_LNTStringOut
.9233					_LNTPushStrLoop:
.9233	b1 38		lda ($38),y			lda 	(zTemp1),y
.9235	f0 06		beq $923d			beq 	_LNTStringOut
.9237	20 91 a4	jsr $a491			jsr 	StackPushByte
.923a	c8		iny				iny
.923b	80 f6		bra $9233			bra 	_LNTPushStrLoop
.923d					_LNTStringOut:
.923d	98		tya				tya									; output length
.923e	20 91 a4	jsr $a491			jsr 	StackPushByte
.9241	a9 00		lda #$00			lda 	#0 							; clear original string.
.9243	92 38		sta ($38)			sta 	(zTemp1)
.9245	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9248	20 91 a4	jsr $a491			jsr 	StackPushByte
.924b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.924e	20 91 a4	jsr $a491			jsr 	StackPushByte
.9251	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9253	20 91 a4	jsr $a491			jsr 	StackPushByte
.9256	7a		ply				ply
.9257	60		rts				rts
.9258					_LNTError:
.9258	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.abae					LocalPopValue:
.abae	20 aa a4	jsr $a4aa			jsr 	StackPopByte
.abb1	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.abb3	d0 17		bne $abcc			bne 	_LPVString
.abb5	20 aa a4	jsr $a4aa			jsr 	StackPopByte 				; address
.abb8	85 37		sta $37				sta 	zTemp0+1
.abba	20 aa a4	jsr $a4aa			jsr 	StackPopByte
.abbd	85 36		sta $36				sta 	zTemp0
.abbf	5a		phy				phy
.abc0	a0 04		ldy #$04			ldy 	#4 							; copy back
.abc2					_LPVNumberCopy:
.abc2	20 aa a4	jsr $a4aa			jsr 	StackPopByte
.abc5	91 36		sta ($36),y			sta 	(zTemp0),y
.abc7	88		dey				dey
.abc8	10 f8		bpl $abc2			bpl 	_LPVNumberCopy
.abca	7a		ply				ply 								; and complete
.abcb	60		rts				rts
.abcc					_LPVString:
.abcc	20 aa a4	jsr $a4aa			jsr 	StackPopByte 				; address of record => zTemp0
.abcf	85 37		sta $37				sta 	zTemp0+1
.abd1	20 aa a4	jsr $a4aa			jsr 	StackPopByte
.abd4	85 36		sta $36				sta 	zTemp0
.abd6	5a		phy				phy
.abd7	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.abd9	85 38		sta $38				sta 	zTemp1
.abdb	a0 01		ldy #$01			ldy 	#1
.abdd	b1 36		lda ($36),y			lda 	(zTemp0),y
.abdf	85 39		sta $39				sta 	zTemp1+1
.abe1	20 aa a4	jsr $a4aa			jsr 	StackPopByte 				; # to get => y
.abe4	a8		tay				tay
.abe5	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.abe7	f0 0e		beq $abf7			beq 	_LPVStringCopied
.abe9	a9 00		lda #$00			lda 	#0 							; NULL on end
.abeb	91 38		sta ($38),y			sta 	(zTemp1),y
.abed					_LPVStringCopy:
.abed	88		dey				dey
.abee	30 07		bmi $abf7			bmi 	_LPVStringCopied
.abf0	20 aa a4	jsr $a4aa			jsr 	StackPopByte
.abf3	91 38		sta ($38),y			sta 	(zTemp1),y
.abf5	80 f6		bra $abed			bra 	_LPVStringCopy
.abf7					_LPVStringCopied:
.abf7	fa		plx				plx
.abf8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.925b					NewCommand:
.925b	20 3c a4	jsr $a43c			jsr 	MemoryNew
.925e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9261	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear everything.
.9264	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9265					Command_Print:
.9265	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9266					_CPLoop:
.9266	08		php				php 								; save last action flag
.9267	b1 30		lda ($30),y			lda 	(codePtr),y
.9269	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.926b	f0 46		beq $92b3			beq 	_CPExit
.926d	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.926f	f0 42		beq $92b3			beq 	_CPExit
.9271	68		pla				pla 								; throw last action flag
.9272	b1 30		lda ($30),y			lda 	(codePtr),y
.9274	c8		iny				iny
.9275	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9277	f0 37		beq $92b0			beq 	_CPContinueWithSameLine
.9279	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.927b	f0 2e		beq $92ab			beq 	_CPTab
.927d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.927f	f0 26		beq $92a7			beq 	_CPNewLine
.9281	88		dey				dey 								; undo the get.
.9282	a2 00		ldx #$00			ldx 	#0
.9284	20 4a a3	jsr $a34a			jsr 	EvaluateValue 				; get a value into slot 0
.9287	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.928a	29 10		and #$10			and 	#NSBIsString
.928c	f0 0b		beq $9299			beq 	_CPNumber
.928e	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9291	ad 08 04	lda $0408			lda 	NSMantissa0
.9294	20 a0 98	jsr $98a0			jsr 	PrintStringXA
.9297	80 cc		bra $9265			bra 	Command_Print 				; loop round clearing carry so NL if end
.9299					_CPNumber:
.9299	a9 05		lda #$05			lda 	#5 							; maximum decimals
.929b	20 20 a2	jsr $a220			jsr 	ConvertNumberToString 		; convert to string
.929e	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.92a0	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.92a2	20 a0 98	jsr $98a0			jsr 	PrintStringXA
.92a5	80 be		bra $9265			bra 	Command_Print 				; loop round clearing carry so NL if end
.92a7					_CPNewLine:
.92a7	a9 0d		lda #$0d			lda 	#13
.92a9	80 02		bra $92ad			bra 	_CPPrintChar
.92ab					_CPTab:
.92ab	a9 09		lda #$09			lda 	#9 							; print TAB
.92ad					_CPPrintChar:
.92ad	20 a0 b3	jsr $b3a0			jsr 	EXTPrintCharacter
.92b0					_CPContinueWithSameLine:
.92b0	38		sec				sec 								; loop round with carry set, which
.92b1	80 b3		bra $9266			bra 	_CPLoop 					; will inhibit final CR
.92b3					_CPExit:
.92b3	28		plp				plp 								; get last action flag
.92b4	b0 05		bcs $92bb			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.92b6	a9 0d		lda #$0d			lda 	#13 						; print new line
.92b8	20 a0 b3	jsr $b3a0			jsr 	EXTPrintCharacter
.92bb					_CPExit2:
.92bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.92bc					CallProcedure:
.92bc	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.92be	b1 30		lda ($30),y			lda 	(codePtr),y
.92c0	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.92c2	f0 0c		beq $92d0			beq 	_CPEndParam
.92c4					_CPParamLoop:
.92c4	20 50 9c	jsr $9c50			jsr 	EvaluateExpression 			; get parameter onto stack
.92c7	e8		inx				inx 								; bump next stack
.92c8	b1 30		lda ($30),y			lda 	(codePtr),y
.92ca	c8		iny				iny
.92cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.92cd	f0 f5		beq $92c4			beq 	_CPParamLoop
.92cf	88		dey				dey 								; unpick.
.92d0					_CPEndParam:
.92d0	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.92d3	c8		iny				iny									; skip right bracket
.92d4	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.92d6	20 b3 a4	jsr $a4b3			jsr 	StackOpen
.92d9	20 f7 a4	jsr $a4f7			jsr 	STKSaveCodePosition 		; save loop position
.92dc	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.92df	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.92e1	ad 10 04	lda $0410			lda 	NSMantissa1
.92e4	85 37		sta $37				sta 	zTemp0+1
.92e6	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.92e8	b2 36		lda ($36)			lda 	(zTemp0)
.92ea	85 30		sta $30				sta 	safePtr
.92ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ee	85 31		sta $31				sta 	safePtr+1
.92f0	c8		iny				iny
.92f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.92f3	85 32		sta $32				sta 	safePtr+2
.92f5	c8		iny				iny
.92f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.92f8	85 33		sta $33				sta 	safePtr+3
.92fa	c8		iny				iny 								; get Y offset -> Y
.92fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.92fd	a8		tay				tay
.92fe	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9300	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.9303	f0 13		beq $9318			beq 	_ParamExit 					; if so, exit.
.9305					_ParamExtract:
.9305	ca		dex				dex 								; put a local term on the level before
.9306	20 e5 91	jsr $91e5			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9309	20 23 91	jsr $9123			jsr 	AssignVariable 				; assign stacked value to the variable.
.930c	e8		inx				inx 								; advance to next parameter to do.
.930d	e8		inx				inx
.930e	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9311	f0 05		beq $9318			beq 	_ParamExit
.9313	20 0f ac	jsr $ac0f			jsr 	CheckComma 					; comma seperating parameters
.9316	80 ed		bra $9305			bra 	_ParamExtract
.9318					_ParamExit:
.9318	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 			; check )
.931b	60		rts				rts 								; and continue from here
.abf9					Command_ENDPROC:
.abf9	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.abfb	a2 14		ldx #$14			ldx 	#ERRID_PROC
.abfd	20 df a4	jsr $a4df			jsr 	StackCheckFrame
.ac00	20 08 a5	jsr $a508			jsr 	STKLoadCodePosition 		; restore code position
.ac03	20 d1 a4	jsr $a4d1			jsr 	StackClose
.ac06	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.931c					Command_Read:
.931c	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.931e	20 21 9f	jsr $9f21			jsr 	EvaluateTerm
.9321	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9324	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9326	f0 4a		beq $9372			beq 	_CRSyntax 					; check reference (bit 0)
.9328	20 bb 93	jsr $93bb			jsr 	SwapDataCodePtrs 			; swap code and data
.932b	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.932e	d0 20		bne $9350			bne 	_CRContinueData
.9330					_CRKeepSearching:
.9330	a9 ad		lda #$ad			lda 	#KWD_DATA 					; scan for instruction
.9332	aa		tax				tax
.9333	20 b9 97	jsr $97b9			jsr 	ScanForward
.9336	c9 ad		cmp #$ad			cmp 	#KWD_DATA 					; found data ?
.9338	f0 16		beq $9350			beq 	_CRHaveData 				; found it
.933a	18		clc				clc
.933b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.933d	65 30		adc $30				adc 	codePtr
.933f	85 30		sta $30				sta 	codePtr
.9341	90 02		bcc $9345			bcc 	_CREExit
.9343	e6 31		inc $31				inc 	codePtr+1
.9345					_CREExit:
.9345	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9347	b2 30		lda ($30)			lda 	(codePtr)
.9349	d0 e5		bne $9330			bne 	_CRKeepSearching
.934b	a9 0b		lda #$0b		lda	#11
.934d	4c 47 98	jmp $9847		jmp	ErrorHandler
.9350					_CRHaveData:
.9350					_CRContinueData:
.9350	a2 01		ldx #$01			ldx 	#1
.9352	20 4a a3	jsr $a34a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9355	ca		dex				dex
.9356	20 23 91	jsr $9123			jsr		AssignVariable 				; do the assignment
.9359	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.935c	b1 30		lda ($30),y			lda 	(codePtr),y
.935e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9360	d0 04		bne $9366			bne 	_CRSwapBack
.9362	c8		iny				iny 								; consume comma
.9363	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9366					_CRSwapBack:
.9366	20 bb 93	jsr $93bb			jsr 	SwapDataCodePtrs			; swap them back.
.9369	b1 30		lda ($30),y			lda 	(codePtr),y
.936b	c8		iny				iny
.936c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.936e	f0 ac		beq $931c			beq 	Command_Read 				; if so go round again.
.9370	88		dey				dey 								; unpick get.
.9371	60		rts				rts
.9372					_CRSyntax:
.9372	4c ed b1	jmp $b1ed			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9375					RemCommand:
.9375	b1 30		lda ($30),y			lda 	(codePtr),y
.9377	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9379	d0 06		bne $9381			bne 	_RMExit
.937b	c8		iny				iny
.937c	98		tya				tya
.937d	38		sec				sec
.937e	71 30		adc ($30),y			adc 	(codePtr),y
.9380	a8		tay				tay
.9381					_RMExit:
.9381	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9382					Command_REPEAT:
.9382	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9384	20 b3 a4	jsr $a4b3			jsr 	StackOpen
.9387	20 f7 a4	jsr $a4f7			jsr 	STKSaveCodePosition 		; save loop position
.938a	60		rts				rts
.938b					Command_UNTIL:
.938b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.938d	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.938f	20 df a4	jsr $a4df			jsr 	StackCheckFrame
.9392	a2 00		ldx #$00			ldx 	#0
.9394	20 53 a3	jsr $a353			jsr 	EvaluateNumber 				; work out the number
.9397	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; check if zero
.939a	f0 04		beq $93a0			beq 	_CULoopBack 				; if so keep looping
.939c	20 d1 a4	jsr $a4d1			jsr 	StackClose		 			; return
.939f	60		rts				rts
.93a0					_CULoopBack:
.93a0	20 08 a5	jsr $a508			jsr 	STKLoadCodePosition 		; loop back
.93a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.93a4					Command_Restore:
.93a4	20 bb 93	jsr $93bb			jsr 	SwapDataCodePtrs 			; swap code and data
.93a7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93a9	85 30		sta $30				sta 	codePtr
.93ab	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93ad	85 31		sta $31				sta 	codePtr+1
.93af	20 bb 93	jsr $93bb			jsr 	SwapDataCodePtrs 			; put them back
.93b2	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.93b4	8d 9b 04	sta $049b			sta 	dataPointer+4
.93b7	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.93ba	60		rts				rts
.93bb					SwapDataCodePtrs:
.93bb	da		phx				phx
.93bc	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.93be					_SDCPLoop:
.93be	b5 30		lda $30,x			lda 	safePtr,x
.93c0	48		pha				pha
.93c1	bd 97 04	lda $0497,x			lda 	dataPointer,x
.93c4	95 30		sta $30,x			sta 	safePtr,x
.93c6	68		pla				pla
.93c7	9d 97 04	sta $0497,x			sta 	dataPointer,x
.93ca	ca		dex				dex
.93cb	10 f1		bpl $93be			bpl 	_SDCPLoop
.93cd	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.93d0	8c 9b 04	sty $049b			sty 	dataPointer+4
.93d3	a8		tay				tay
.93d4	fa		plx				plx
.93d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.93d6					CommandRUN:
.93d6	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear variable/stacks/etc.
.93d9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93db	85 30		sta $30				sta 	codePtr
.93dd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93df	85 31		sta $31				sta 	codePtr+1
.93e1					RUNNewLine:
.93e1	b2 30		lda ($30)			lda 	(codePtr)
.93e3	f0 5e		beq $9443			beq 	CRNoProgram         		; no then END.
.93e5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.93e7	9a		txs				txs
.93e8					RUNCodePointerLine:
.93e8	a0 02		ldy #$02			ldy 	#2 							; start of program
.93ea					_CRIncMainLoop:
.93ea	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.93ed	d0 05		bne $93f4			bne 	_CRNoBreakCheck
.93ef	20 e1 b3	jsr $b3e1			jsr 	EXTBreakCheck 				; break check
.93f2	f0 4a		beq $943e			beq 	_CRBreak
.93f4					_CRNoBreakCheck:
.93f4	c8		iny				iny
.93f5					_CRMainLoop:
.93f5	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.93f8	b1 30		lda ($30),y			lda 	(codePtr),y
.93fa	10 10		bpl $940c			bpl 	_CRNotKeyword
.93fc	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.93fe	b0 04		bcs $9404			bcs 	_CRIsKeyword
.9400	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9402	b0 34		bcs $9438			bcs		_CRSyntaxError
.9404					_CRIsKeyword:
.9404	c8		iny				iny 								; consume command
.9405	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9406	aa		tax				tax 								; put in X for vector jump
.9407	20 3b 94	jsr $943b			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.940a	80 e9		bra $93f5			bra 	_CRMainLoop 				; and loop round
.940c					_CRNotKeyword:
.940c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.940e	f0 da		beq $93ea			beq 	_CRIncMainLoop
.9410	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9412	90 05		bcc $9419			bcc 	_CRNotVariable
.9414					_CRGoLet:
.9414	20 e7 90	jsr $90e7			jsr 	LetCommand
.9417	80 dc		bra $93f5			bra 	_CRMainLoop
.9419					_CRNotVariable:
.9419	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.941b	f0 f7		beq $9414			beq 	_CRGoLet
.941d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.941f	f0 f3		beq $9414			beq 	_CRGoLet
.9421	c9 21		cmp #$21			cmp 	#KWD_PLING
.9423	f0 ef		beq $9414			beq 	_CRGoLet
.9425	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9427	f0 09		beq $9432			beq 	_CRGoRem
.9429	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.942b	d0 0b		bne $9438			bne 	_CRSyntaxError
.942d	20 43 8b	jsr $8b43			jsr 	LabelHere
.9430	80 c3		bra $93f5			bra 	_CRMainLoop
.9432					_CRGoRem:
.9432	c8		iny				iny
.9433	20 75 93	jsr $9375			jsr 	RemCommand
.9436	80 bd		bra $93f5			bra 	_CRMainLoop
.9438					_CRSyntaxError:
.9438	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.943b					_CRCallVector0:
.943b	7c e6 94	jmp ($94e6,x)			jmp 	(VectorSet0,x)
.943e					_CRBreak:
.943e	a9 01		lda #$01		lda	#1
.9440	4c 47 98	jmp $9847		jmp	ErrorHandler
.9443					CRNoProgram:
.9443	4c c0 8d	jmp $8dc0			jmp 	EndCommand
.9446					EOLCommand:
.9446	18		clc				clc
.9447	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9449	65 30		adc $30				adc 	codePtr
.944b	85 30		sta $30				sta 	codePtr
.944d	90 02		bcc $9451			bcc 	_CREExit
.944f	e6 31		inc $31				inc 	codePtr+1
.9451					_CREExit:
.9451	80 8e		bra $93e1			bra 	RunNewLine
.9453					Shift1Command:
.9453	b1 30		lda ($30),y			lda 	(codePtr),y
.9455	c8		iny				iny
.9456	0a		asl a				asl 	a
.9457	aa		tax				tax
.9458	7c 6e 95	jmp ($956e,x)			jmp 	(VectorSet1,x)
.945b					Shift2Command:
.945b	b1 30		lda ($30),y			lda 	(codePtr),y
.945d	c8		iny				iny
.945e	0a		asl a				asl 	a
.945f	aa		tax				tax
.9460	7c 88 95	jmp ($9588,x)			jmp 	(VectorSet2,x)
.9463					Unused1:
.9463					Unused2:
.9463					Unused3:
.9463					Unused4:
.9463	4c ed b1	jmp $b1ed			jmp 	SyntaxError
>9466							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9466					VectorSetPunc:
>9466	f1 99					.word	ShiftLeft                        ; $00 <<
>9468	eb 98					.word	BinaryCompareLessEqual           ; $01 <=
>946a	e1 98					.word	BinaryCompareNotEqual            ; $02 <>
>946c	ed b1					.word	SyntaxError                      ; $03 !!3
>946e	ed b1					.word	SyntaxError                      ; $04 ><
>9470	f5 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>9472	f4 99					.word	ShiftRight                       ; $06 >>
>9474	ed b1					.word	SyntaxError                      ; $07 !!7
>9476	ed b1					.word	SyntaxError                      ; $08 !!8
>9478	ed b1					.word	SyntaxError                      ; $09 !!9
>947a	ed b1					.word	SyntaxError                      ; $0a !!10
>947c	ed b1					.word	SyntaxError                      ; $0b !!11
>947e	ed b1					.word	SyntaxError                      ; $0c !!12
>9480	ed b1					.word	SyntaxError                      ; $0d !!13
>9482	ed b1					.word	SyntaxError                      ; $0e !!14
>9484	ed b1					.word	SyntaxError                      ; $0f !!15
>9486	ed b1					.word	SyntaxError                      ; $10 @
>9488	ed b1					.word	SyntaxError                      ; $11 !!17
>948a	ed b1					.word	SyntaxError                      ; $12 !!18
>948c	ed b1					.word	SyntaxError                      ; $13 [
>948e	20 ac					.word	IntegerDivide                    ; $14 \
>9490	ed b1					.word	SyntaxError                      ; $15 ]
>9492	7a 9b					.word	EorInteger                       ; $16 ^
>9494	ed b1					.word	SyntaxError                      ; $17 _
>9496	ed b1					.word	SyntaxError                      ; $18 `
>9498	ed b1					.word	SyntaxError                      ; $19 !!25
>949a	ed b1					.word	SyntaxError                      ; $1a !!26
>949c	ed b1					.word	SyntaxError                      ; $1b {
>949e	34 9b					.word	OraInteger                       ; $1c |
>94a0	ed b1					.word	SyntaxError                      ; $1d }
>94a2	ed b1					.word	SyntaxError                      ; $1e ~
>94a4	ed b1					.word	SyntaxError                      ; $1f [7m<7F>[m
>94a6	ed b1					.word	SyntaxError                      ; $20
>94a8	c0 9b					.word	WordIndirect                     ; $21 !
>94aa	ed b1					.word	SyntaxError                      ; $22 "
>94ac	ed b1					.word	SyntaxError                      ; $23 #
>94ae	ed b1					.word	SyntaxError                      ; $24 $
>94b0	6d ac					.word	IntegerModulus                   ; $25 %
>94b2	ee 9a					.word	AndInteger                       ; $26 &
>94b4	ed b1					.word	SyntaxError                      ; $27 '
>94b6	ed b1					.word	SyntaxError                      ; $28 (
>94b8	ed b1					.word	SyntaxError                      ; $29 )
>94ba	e2 ac					.word	MulInteger                       ; $2a *
>94bc	88 9a					.word	AddInteger                       ; $2b +
>94be	ed b1					.word	SyntaxError                      ; $2c ,
>94c0	c3 9a					.word	SubInteger                       ; $2d -
>94c2	ed b1					.word	SyntaxError                      ; $2e .
>94c4	79 ae					.word	FDivideCommand                   ; $2f /
>94c6	ed b1					.word	SyntaxError                      ; $30 0
>94c8	ed b1					.word	SyntaxError                      ; $31 1
>94ca	ed b1					.word	SyntaxError                      ; $32 2
>94cc	ed b1					.word	SyntaxError                      ; $33 3
>94ce	ed b1					.word	SyntaxError                      ; $34 4
>94d0	ed b1					.word	SyntaxError                      ; $35 5
>94d2	ed b1					.word	SyntaxError                      ; $36 6
>94d4	ed b1					.word	SyntaxError                      ; $37 7
>94d6	ed b1					.word	SyntaxError                      ; $38 8
>94d8	ed b1					.word	SyntaxError                      ; $39 9
>94da	ed b1					.word	SyntaxError                      ; $3a :
>94dc	ed b1					.word	SyntaxError                      ; $3b ;
>94de	cd 98					.word	BinaryCompareLess                ; $3c <
>94e0	c3 98					.word	BinaryCompareEqual               ; $3d =
>94e2	d7 98					.word	BinaryCompareGreater             ; $3e >
>94e4	e7 9b					.word	ByteIndirect                     ; $3f ?
.94e6					VectorSet0:
>94e6	46 94					.word	EOLCommand                       ; $80 !0:EOF
>94e8	53 94					.word	Shift1Command                    ; $81 !1:SH1
>94ea	5b 94					.word	Shift2Command                    ; $82 !2:SH2
>94ec	bf af					.word	AbsUnary                         ; $83 ABS(
>94ee	b1 a0					.word	AllocUnary                       ; $84 ALLOC(
>94f0	cf af					.word	AscUnary                         ; $85 ASC(
>94f2	d1 a1					.word	ChrUnary                         ; $86 CHR$(
>94f4	ed b1					.word	SyntaxError                      ; $87 EVENT(
>94f6	bf 98					.word	UnaryFalse                       ; $88 FALSE
>94f8	dc af					.word	FracUnary                        ; $89 FRAC(
>94fa	f2 af					.word	IntUnary                         ; $8a INT(
>94fc	48 b0					.word	IsValUnary                       ; $8b ISVAL(
>94fe	ab a2					.word	Unary_Left                       ; $8c LEFT$(
>9500	04 b0					.word	LenUnary                         ; $8d LEN(
>9502	d5 a2					.word	Unary_Mid                        ; $8e MID$(
>9504	21 a1					.word	Unary_Not                        ; $8f NOT(
>9506	ed b1					.word	SyntaxError                      ; $90 OFF
>9508	ed b1					.word	SyntaxError                      ; $91 ON
>950a	37 a1					.word	Unary_Random                     ; $92 RANDOM(
>950c	bb a2					.word	Unary_Right                      ; $93 RIGHT$(
>950e	50 a1					.word	Unary_Rnd                        ; $94 RND(
>9510	1e b0					.word	SgnUnary                         ; $95 SGN(
>9512	e3 a1					.word	SpcUnary                         ; $96 SPC(
>9514	fe a1					.word	Unary_Str                        ; $97 STR$(
>9516	ed b1					.word	SyntaxError                      ; $98 TIMER(
>9518	b3 98					.word	UnaryTrue                        ; $99 TRUE
>951a	3e b0					.word	ValUnary                         ; $9a VAL(
>951c	c3 8d					.word	ForCommand                       ; $9b FOR
>951e	bd 90					.word	IfCommand                        ; $9c IF
>9520	63 94					.word	Unused1                          ; $9d PROC
>9522	82 93					.word	Command_REPEAT                   ; $9e REPEAT
>9524	18 98					.word	Command_WHILE                    ; $9f WHILE
>9526	e6 90					.word	EndIf                            ; $a0 ENDIF
>9528	f9 ab					.word	Command_ENDPROC                  ; $a1 ENDPROC
>952a	7d 8e					.word	NextCommand                      ; $a2 NEXT
>952c	63 94					.word	Unused4                          ; $a3 THEN
>952e	8b 93					.word	Command_UNTIL                    ; $a4 UNTIL
>9530	39 98					.word	Command_WEND                     ; $a5 WEND
>9532	ed b1					.word	SyntaxError                      ; $a6 BY
>9534	69 8c					.word	CallCommand                      ; $a7 CALL
>9536	da 8e					.word	CircleCommand                    ; $a8 CIRCLE
>9538	a3 8c					.word	ClearCommand                     ; $a9 CLEAR
>953a	ed b1					.word	SyntaxError                      ; $aa CLS
>953c	ed b1					.word	SyntaxError                      ; $ab COLOR
>953e	ed b1					.word	SyntaxError                      ; $ac COLOUR
>9540	fb 8c					.word	Command_Data                     ; $ad DATA
>9542	03 8d					.word	DimCommand                       ; $ae DIM
>9544	63 94					.word	Unused3                          ; $af DOWNTO
>9546	df 90					.word	ElseCode                         ; $b0 ELSE
>9548	ed b1					.word	SyntaxError                      ; $b1 FROM
>954a	51 90					.word	GfxCommand                       ; $b2 GFX
>954c	83 90					.word	Command_GOSUB                    ; $b3 GOSUB
>954e	a1 90					.word	GotoCommand                      ; $b4 GOTO
>9550	ed b1					.word	SyntaxError                      ; $b5 HERE
>9552	ed b1					.word	SyntaxError                      ; $b6 IMAGE
>9554	e7 90					.word	LetCommand                       ; $b7 LET
>9556	e5 8e					.word	LineCommand                      ; $b8 LINE
>9558	d7 91					.word	Command_LOCAL                    ; $b9 LOCAL
>955a	ed b1					.word	SyntaxError                      ; $ba OUTLINE
>955c	65 92					.word	Command_Print                    ; $bb PRINT
>955e	1c 93					.word	Command_Read                     ; $bc READ
>9560	d6 8e					.word	RectangleCommand                 ; $bd RECT
>9562	75 93					.word	RemCommand                       ; $be REM
>9564	93 90					.word	Command_RETURN                   ; $bf RETURN
>9566	ed b1					.word	SyntaxError                      ; $c0 SOLID
>9568	ed b1					.word	SyntaxError                      ; $c1 SPRITE
>956a	ed b1					.word	SyntaxError                      ; $c2 TEXT
>956c	63 94					.word	Unused2                          ; $c3 TO
.956e					VectorSet1:
>956e	ed b1					.word	SyntaxError                      ; $80 !0:EOF
>9570	ed b1					.word	SyntaxError                      ; $81 !1:SH1
>9572	ed b1					.word	SyntaxError                      ; $82 !2:SH2
>9574	3a 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>9576	59 8c					.word	AssertCommand                    ; $84 ASSERT
>9578	f1 8f					.word	BitmapCtrl                       ; $85 BITMAP
>957a	c0 8d					.word	EndCommand                       ; $86 END
>957c	3c 91					.word	Command_List                     ; $87 LIST
>957e	5b 92					.word	NewCommand                       ; $88 NEW
>9580	a4 93					.word	Command_Restore                  ; $89 RESTORE
>9582	d6 93					.word	CommandRUN                       ; $8a RUN
>9584	36 90					.word	SpritesCtrl                      ; $8b SPRITES
>9586	10 96					.word	StopCommand                      ; $8c STOP
.9588					VectorSet2:
>9588	ed b1					.word	SyntaxError                      ; $80 !0:EOF
>958a	ed b1					.word	SyntaxError                      ; $81 !1:SH1
>958c	ed b1					.word	SyntaxError                      ; $82 !2:SH2
>958e	ac b0					.word	Assemble_adc                     ; $83 ADC
>9590	a4 b0					.word	Assemble_and                     ; $84 AND
>9592	c0 b0					.word	Assemble_asl                     ; $85 ASL
>9594	2a b1					.word	Assemble_bcc                     ; $86 BCC
>9596	2e b1					.word	Assemble_bcs                     ; $87 BCS
>9598	36 b1					.word	Assemble_beq                     ; $88 BEQ
>959a	ed b0					.word	Assemble_bit                     ; $89 BIT
>959c	1e b1					.word	Assemble_bmi                     ; $8a BMI
>959e	32 b1					.word	Assemble_bne                     ; $8b BNE
>95a0	1a b1					.word	Assemble_bpl                     ; $8c BPL
>95a2	3a b1					.word	Assemble_bra                     ; $8d BRA
>95a4	3e b1					.word	Assemble_brk                     ; $8e BRK
>95a6	22 b1					.word	Assemble_bvc                     ; $8f BVC
>95a8	26 b1					.word	Assemble_bvs                     ; $90 BVS
>95aa	46 b1					.word	Assemble_clc                     ; $91 CLC
>95ac	9a b1					.word	Assemble_cld                     ; $92 CLD
>95ae	5a b1					.word	Assemble_cli                     ; $93 CLI
>95b0	8a b1					.word	Assemble_clv                     ; $94 CLV
>95b2	b8 b0					.word	Assemble_cmp                     ; $95 CMP
>95b4	01 b1					.word	Assemble_cpx                     ; $96 CPX
>95b6	fc b0					.word	Assemble_cpy                     ; $97 CPY
>95b8	de b0					.word	Assemble_dec                     ; $98 DEC
>95ba	96 b1					.word	Assemble_dex                     ; $99 DEX
>95bc	72 b1					.word	Assemble_dey                     ; $9a DEY
>95be	a8 b0					.word	Assemble_eor                     ; $9b EOR
>95c0	e3 b0					.word	Assemble_inc                     ; $9c INC
>95c2	a6 b1					.word	Assemble_inx                     ; $9d INX
>95c4	92 b1					.word	Assemble_iny                     ; $9e INY
>95c6	15 b1					.word	Assemble_jmp                     ; $9f JMP
>95c8	10 b1					.word	Assemble_jsr                     ; $a0 JSR
>95ca	b4 b0					.word	Assemble_lda                     ; $a1 LDA
>95cc	d9 b0					.word	Assemble_ldx                     ; $a2 LDX
>95ce	f7 b0					.word	Assemble_ldy                     ; $a3 LDY
>95d0	ca b0					.word	Assemble_lsr                     ; $a4 LSR
>95d2	aa b1					.word	Assemble_nop                     ; $a5 NOP
>95d4	a0 b0					.word	Assemble_ora                     ; $a6 ORA
>95d6	56 b1					.word	Assemble_pha                     ; $a7 PHA
>95d8	42 b1					.word	Assemble_php                     ; $a8 PHP
>95da	9e b1					.word	Assemble_phx                     ; $a9 PHX
>95dc	5e b1					.word	Assemble_phy                     ; $aa PHY
>95de	66 b1					.word	Assemble_pla                     ; $ab PLA
>95e0	4a b1					.word	Assemble_plp                     ; $ac PLP
>95e2	b2 b1					.word	Assemble_plx                     ; $ad PLX
>95e4	6e b1					.word	Assemble_ply                     ; $ae PLY
>95e6	c5 b0					.word	Assemble_rol                     ; $af ROL
>95e8	cf b0					.word	Assemble_ror                     ; $b0 ROR
>95ea	52 b1					.word	Assemble_rti                     ; $b1 RTI
>95ec	62 b1					.word	Assemble_rts                     ; $b2 RTS
>95ee	bc b0					.word	Assemble_sbc                     ; $b3 SBC
>95f0	4e b1					.word	Assemble_sec                     ; $b4 SEC
>95f2	ae b1					.word	Assemble_sed                     ; $b5 SED
>95f4	6a b1					.word	Assemble_sei                     ; $b6 SEI
>95f6	b0 b0					.word	Assemble_sta                     ; $b7 STA
>95f8	a2 b1					.word	Assemble_stp                     ; $b8 STP
>95fa	d4 b0					.word	Assemble_stx                     ; $b9 STX
>95fc	f2 b0					.word	Assemble_sty                     ; $ba STY
>95fe	e8 b0					.word	Assemble_stz                     ; $bb STZ
>9600	86 b1					.word	Assemble_tax                     ; $bc TAX
>9602	82 b1					.word	Assemble_tay                     ; $bd TAY
>9604	0b b1					.word	Assemble_trb                     ; $be TRB
>9606	06 b1					.word	Assemble_tsb                     ; $bf TSB
>9608	8e b1					.word	Assemble_tsx                     ; $c0 TSX
>960a	76 b1					.word	Assemble_txa                     ; $c1 TXA
>960c	7e b1					.word	Assemble_txs                     ; $c2 TXS
>960e	7a b1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9610					StopCommand:
.9610	a9 08		lda #$08		lda	#8
.9612	4c 47 98	jmp $9847		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9615					ListConvertLine:
.9615	9c 9d 04	stz $049d			stz 	tbOffset
.9618	9c a9 04	stz $04a9			stz 	tokenBuffer
.961b	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.961d	b1 30		lda ($30),y			lda 	(codePtr),y
.961f	aa		tax				tax
.9620	88		dey				dey
.9621	b1 30		lda ($30),y			lda 	(codePtr),y
.9623	20 63 ad	jsr $ad63			jsr 	ConvertInt16
.9626	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9628	86 37		stx $37				stx 	zTemp0+1
.962a	a0 00		ldy #$00			ldy 	#0
.962c					_LCCopyNumber:
.962c	b1 36		lda ($36),y			lda 	(zTemp0),y
.962e	20 2e 97	jsr $972e			jsr 	LCLWrite
.9631	c8		iny				iny
.9632	b1 36		lda ($36),y			lda 	(zTemp0),y
.9634	d0 f6		bne $962c			bne 	_LCCopyNumber
.9636					_LCPadOut:
.9636	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9638	20 2e 97	jsr $972e			jsr 	LCLWrite
.963b	ad 9d 04	lda $049d			lda 	tbOffset
.963e	c9 06		cmp #$06			cmp 	#6
.9640	d0 f4		bne $9636			bne 	_LCPadOut
.9642	a0 03		ldy #$03			ldy 	#3 							; start position.
.9644					_LCMainLoop:
.9644	b1 30		lda ($30),y			lda 	(codePtr),y
.9646	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9648	f0 17		beq $9661			beq 	_LCExit
.964a	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.964c	90 14		bcc $9662			bcc 	_LCDoubles
.964e	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9650	90 20		bcc $9672			bcc 	_LCShiftPunc
.9652	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9654	90 2b		bcc $9681			bcc 	_LCPunctuation
.9656	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9658	90 2d		bcc $9687			bcc 	_LCIdentifiers
.965a	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.965c	90 49		bcc $96a7			bcc 	_LCTokens
.965e	4c 02 97	jmp $9702			jmp 	_LCData 					; 254-5 are data objects
.9661					_LCExit:
.9661	60		rts				rts
.9662					_LCDoubles:
.9662	48		pha				pha
.9663	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9664	29 02		and #$02			and 	#2
.9666	09 3c		ora #$3c			ora 	#60 						; make < >
.9668	20 2e 97	jsr $972e			jsr 	LCLWrite
.966b	68		pla				pla 								; restore, do lower bit
.966c	29 03		and #$03			and 	#3
.966e	09 3c		ora #$3c			ora 	#60
.9670	80 0f		bra $9681			bra		_LCPunctuation 				; print, increment, loop
.9672					_LCShiftPunc:
.9672	aa		tax				tax 								; save in X
.9673	29 07		and #$07			and 	#7 							; lower 3 bits
.9675	f0 02		beq $9679			beq 	_LCNoAdd
.9677	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9679					_LCNoAdd:
.9679	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.967b	90 02		bcc $967f			bcc 	_LCNoAdd2
.967d	09 20		ora #$20			ora 	#32 						; adds $20
.967f					_LCNoAdd2:
.967f	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9681					_LCPunctuation:
.9681	c8		iny				iny 								; consume character
.9682	20 2e 97	jsr $972e			jsr 	LCLWrite 					; write it out.
.9685	80 bd		bra $9644			bra 	_LCMainLoop 				; go round again.
.9687					_LCIdentifiers:
.9687	18		clc				clc 								; convert to physical address
.9688	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.968a	85 37		sta $37				sta 	zTemp0+1
.968c	c8		iny				iny
.968d	b1 30		lda ($30),y			lda 	(codePtr),y
.968f	85 36		sta $36				sta 	zTemp0
.9691	c8		iny				iny
.9692	5a		phy				phy 								; save position
.9693	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9695					_LCOutIdentifier:
.9695	c8		iny				iny
.9696	b1 36		lda ($36),y			lda 	(zTemp0),y
.9698	29 7f		and #$7f			and 	#$7F
.969a	20 5c 97	jsr $975c			jsr 	LCLLowerCase
.969d	20 2e 97	jsr $972e			jsr 	LCLWrite
.96a0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.96a2	10 f1		bpl $9695			bpl 	_LCOutIdentifier
.96a4	7a		ply				ply 								; restore position
.96a5	80 9d		bra $9644			bra 	_LCMainLoop
.96a7					_LCTokens:
.96a7	aa		tax				tax 								; token in X
.96a8	a9 b3		lda #$b3			lda 	#((KeywordSet2) & $FF)
.96aa	85 36		sta $36				sta 	0+zTemp0
.96ac	a9 a7		lda #$a7			lda 	#((KeywordSet2) >> 8)
.96ae	85 37		sta $37				sta 	1+zTemp0
.96b0	e0 82		cpx #$82			cpx 	#$82
.96b2	f0 16		beq $96ca			beq 	_LCUseShift
.96b4	a9 65		lda #$65			lda 	#((KeywordSet1) & $FF)
.96b6	85 36		sta $36				sta 	0+zTemp0
.96b8	a9 a7		lda #$a7			lda 	#((KeywordSet1) >> 8)
.96ba	85 37		sta $37				sta 	1+zTemp0
.96bc	e0 81		cpx #$81			cpx 	#$81
.96be	f0 0a		beq $96ca			beq 	_LCUseShift
.96c0	a9 b6		lda #$b6			lda 	#((KeywordSet0) & $FF)
.96c2	85 36		sta $36				sta 	0+zTemp0
.96c4	a9 a5		lda #$a5			lda 	#((KeywordSet0) >> 8)
.96c6	85 37		sta $37				sta 	1+zTemp0
.96c8	80 01		bra $96cb			bra 	_LCNoShift
.96ca					_LCUseShift:
.96ca	c8		iny				iny
.96cb					_LCNoShift:
.96cb	20 3d 97	jsr $973d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.96ce	b1 30		lda ($30),y			lda 	(codePtr),y
.96d0	aa		tax				tax 								; into X
.96d1					_LCFindText:
.96d1	ca		dex				dex
.96d2	10 0e		bpl $96e2			bpl 	_LCFoundText 				; found text.
.96d4	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.96d6	1a		inc a				inc 	a 							; one extra for size
.96d7	38		sec				sec 								; one extra for checksum
.96d8	65 36		adc $36				adc 	zTemp0 						; go to next token
.96da	85 36		sta $36				sta 	zTemp0
.96dc	90 f3		bcc $96d1			bcc 	_LCFindText
.96de	e6 37		inc $37				inc 	zTemp0+1
.96e0	80 ef		bra $96d1			bra 	_LCFindText
.96e2					_LCFoundText:
.96e2	5a		phy				phy 								; save List position
.96e3	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.96e5	aa		tax				tax
.96e6	a0 02		ldy #$02			ldy 	#2
.96e8					_LCCopyToken:
.96e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.96ea	20 5c 97	jsr $975c			jsr 	LCLLowerCase
.96ed	20 2e 97	jsr $972e			jsr 	LCLWrite
.96f0	c8		iny				iny
.96f1	ca		dex				dex
.96f2	d0 f4		bne $96e8			bne 	_LCCopyToken
.96f4	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.96f6	f0 05		beq $96fd			beq 	_LCNoSpace
.96f8	a9 20		lda #$20			lda 	#' '
.96fa	20 2e 97	jsr $972e			jsr 	LCLWrite
.96fd					_LCNoSpace:
.96fd	7a		ply				ply 								; restore position.
.96fe	c8		iny				iny 								; consume token
.96ff	4c 44 96	jmp $9644			jmp 	_LCMainLoop 				; and go around again.
.9702					_LCData:
.9702	48		pha				pha 								; save type $FE/$FF
.9703	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9705	c9 fe		cmp #$fe			cmp 	#$FE
.9707	f0 02		beq $970b			beq 	_LCHaveOpener
.9709	a2 22		ldx #$22			ldx 	#'"'
.970b					_LCHaveOpener:
.970b	8a		txa				txa 								; output prefix (# or ")
.970c	20 2e 97	jsr $972e			jsr 	LCLWrite
.970f	c8		iny				iny 								; get count
.9710	b1 30		lda ($30),y			lda 	(codePtr),y
.9712	aa		tax				tax
.9713	c8		iny				iny 								; point at first character
.9714					_LCOutData:
.9714	b1 30		lda ($30),y			lda 	(codePtr),y
.9716	c9 00		cmp #$00			cmp 	#0
.9718	f0 03		beq $971d			beq 	_LCNoPrint
.971a	20 2e 97	jsr $972e			jsr 	LCLWrite
.971d					_LCNoPrint:
.971d	c8		iny				iny
.971e	ca		dex				dex
.971f	d0 f3		bne $9714			bne 	_LCOutData
.9721	68		pla				pla 								; closing " required ?
.9722	c9 ff		cmp #$ff			cmp 	#$FF
.9724	d0 05		bne $972b			bne 	_LCNoQuote
.9726	a9 22		lda #$22			lda 	#'"'
.9728	20 2e 97	jsr $972e			jsr 	LCLWrite
.972b					_LCNoQuote:
.972b	4c 44 96	jmp $9644			jmp 	_LCMainLoop
.972e					LCLWrite:
.972e	da		phx				phx
.972f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9732	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9735	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9738	ee 9d 04	inc $049d			inc 	tbOffset
.973b	fa		plx				plx
.973c	60		rts				rts
.973d					LCCheckSpaceRequired:
.973d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9740	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9743	20 5c 97	jsr $975c			jsr 	LCLLowerCase 				; saves a little effort
.9746	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9748	90 11		bcc $975b			bcc 	_LCCSRExit
.974a	c9 3a		cmp #$3a			cmp 	#"9"+1
.974c	90 08		bcc $9756			bcc 	_LCCSRSpace
.974e	c9 61		cmp #$61			cmp 	#"a"
.9750	90 09		bcc $975b			bcc 	_LCCSRExit
.9752	c9 7b		cmp #$7b			cmp 	#"z"+1
.9754	b0 05		bcs $975b			bcs 	_LCCSRExit
.9756					_LCCSRSpace:
.9756	a9 20		lda #$20			lda 	#' '
.9758	20 2e 97	jsr $972e			jsr 	LCLWrite
.975b					_LCCSRExit:
.975b	60		rts				rts
.975c					LCLLowerCase:
.975c	c9 41		cmp #$41			cmp 	#"A"
.975e	90 06		bcc $9766			bcc 	_LCLLCOut
.9760	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9762	b0 02		bcs $9766			bcs 	_LCLLCOut
.9764	69 20		adc #$20			adc 	#$20
.9766					_LCLLCOut:
.9766	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9767					ProcedureScan:
.9767	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9769	85 30		sta $30				sta 	codePtr
.976b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.976d	85 31		sta $31				sta 	codePtr+1
.976f					_PSLoop:
.976f	b2 30		lda ($30)			lda 	(codePtr)
.9771	f0 42		beq $97b5			beq 	_PSExit
.9773	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9775	b1 30		lda ($30),y			lda 	(codePtr),y
.9777	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.9779	d0 2d		bne $97a8			bne 	_PSNext
.977b	c8		iny				iny 								; get the address of the record to zTemp0 and
.977c	b1 30		lda ($30),y			lda 	(codePtr),y
.977e	29 c0		and #$c0			and 	#$C0
.9780	c9 40		cmp #$40			cmp 	#$40
.9782	d0 32		bne $97b6			bne 	_PSSyntax
.9784	b1 30		lda ($30),y			lda 	(codePtr),y
.9786	18		clc				clc
.9787	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9789	85 37		sta $37				sta 	zTemp0+1
.978b	c8		iny				iny 								; LSB
.978c	b1 30		lda ($30),y			lda 	(codePtr),y
.978e	85 36		sta $36				sta 	zTemp0
.9790	c8		iny				iny 								; character after variable call.
.9791	98		tya				tya 								; save Y offset at +7
.9792	a0 07		ldy #$07			ldy 	#7
.9794	91 36		sta ($36),y			sta 	(zTemp0),y
.9796	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9798	a0 02		ldy #$02			ldy 	#2
.979a	91 36		sta ($36),y			sta 	(zTemp0),y
.979c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.979e					_PSCopy:
.979e	b5 30		lda $30,x			lda 	safePtr,x
.97a0	c8		iny				iny
.97a1	91 36		sta ($36),y			sta 	(zTemp0),y
.97a3	e8		inx				inx
.97a4	e0 04		cpx #$04			cpx 	#4
.97a6	d0 f6		bne $979e			bne 	_PSCopy
.97a8					_PSNext:
.97a8	18		clc				clc
.97a9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.97ab	65 30		adc $30				adc 	codePtr
.97ad	85 30		sta $30				sta 	codePtr
.97af	90 02		bcc $97b3			bcc 	_CREExit
.97b1	e6 31		inc $31				inc 	codePtr+1
.97b3					_CREExit:
.97b3	80 ba		bra $976f			bra 	_PSLoop
.97b5					_PSExit:
.97b5	60		rts				rts
.97b6					_PSSyntax:
.97b6	4c ed b1	jmp $b1ed			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.97b9					ScanForward:
.97b9	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.97bb	86 37		stx $37				stx 	zTemp0+1
.97bd	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.97bf					_ScanLoop:
.97bf	b1 30		lda ($30),y			lda 	(codePtr),y
.97c1	c8		iny				iny
.97c2	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.97c4	d0 0e		bne $97d4			bne 	_ScanGoNext
.97c6	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.97c8	f0 04		beq $97ce			beq 	_ScanMatch
.97ca	c5 37		cmp $37				cmp 	zTemp0+1
.97cc	d0 06		bne $97d4			bne 	_ScanGoNext
.97ce					_ScanMatch:
.97ce	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.97d0	d0 01		bne $97d3			bne 	_ScanNotEndEOL
.97d2	88		dey				dey
.97d3					_ScanNotEndEOL:
.97d3	60		rts				rts
.97d4					_ScanGoNext:
.97d4	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.97d6	90 e7		bcc $97bf			bcc 	_ScanLoop
.97d8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.97da	90 18		bcc $97f4			bcc 	_ScanSkipOne
.97dc	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.97de	b0 2f		bcs $980f			bcs 	_ScanSkipData
.97e0	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.97e2	90 db		bcc $97bf			bcc 	_ScanLoop 					; if not, ordinary keywords.
.97e4	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.97e6	b0 d7		bcs $97bf			bcs 	_ScanLoop
.97e8	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.97ea	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.97ec	b0 d1		bcs $97bf			bcs 	_ScanLoop
.97ee	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.97f0	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.97f2	80 cb		bra $97bf			bra 	_ScanLoop
.97f4					_ScanSkipOne:
.97f4	c8		iny				iny 								; consume the extra one.
.97f5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.97f7	d0 c6		bne $97bf			bne 	_ScanLoop
.97f9	18		clc				clc
.97fa	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.97fc	65 30		adc $30				adc 	codePtr
.97fe	85 30		sta $30				sta 	codePtr
.9800	90 02		bcc $9804			bcc 	_CREExit
.9802	e6 31		inc $31				inc 	codePtr+1
.9804					_CREExit:
.9804	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9806	b2 30		lda ($30)			lda 	(codePtr)
.9808	d0 b5		bne $97bf			bne 	_ScanLoop 					; if not zero, more to scan
.980a	a9 13		lda #$13		lda	#19
.980c	4c 47 98	jmp $9847		jmp	ErrorHandler
.980f					_ScanSkipData:
.980f	88		dey				dey 								; point at data token
.9810	c8		iny				iny
.9811	98		tya				tya
.9812	38		sec				sec
.9813	71 30		adc ($30),y			adc 	(codePtr),y
.9815	a8		tay				tay
.9816	80 a7		bra $97bf			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9818					Command_WHILE:
.9818	5a		phy				phy 								; save position of the test
.9819	a2 00		ldx #$00			ldx 	#0
.981b	20 53 a3	jsr $a353			jsr 	EvaluateNumber 				; work out the number
.981e	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; check if zero
.9821	f0 0e		beq $9831			beq 	_WHExitLoop 				; if so exit the loop
.9823	98		tya				tya 								; position *after* test.
.9824	7a		ply				ply 								; restore position before test, at WHILE
.9825	88		dey				dey
.9826	48		pha				pha 								; push after test on the stack
.9827	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9829	20 b3 a4	jsr $a4b3			jsr 	StackOpen
.982c	20 f7 a4	jsr $a4f7			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.982f	7a		ply				ply 								; restore the position *after* the test
.9830	60		rts				rts
.9831					_WHExitLoop:
.9831	68		pla				pla 								; throw post loop position
.9832	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.9834	aa		tax				tax
.9835	20 b9 97	jsr $97b9			jsr 	ScanForward
.9838	60		rts				rts
.9839					Command_WEND:
.9839	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.983b	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.983d	20 df a4	jsr $a4df			jsr 	StackCheckFrame
.9840	20 08 a5	jsr $a508			jsr 	STKLoadCodePosition 		; loop back
.9843	20 d1 a4	jsr $a4d1			jsr 	StackClose		 			; erase the frame
.9846	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ac07					CheckRightBracket:
.ac07	b1 30		lda ($30),y			lda 	(codePtr),y
.ac09	c8		iny				iny
.ac0a	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ac0c	d0 0f		bne $ac1d			bne 	CNAFail
.ac0e	60		rts				rts
.ac0f					CheckComma:
.ac0f	b1 30		lda ($30),y			lda 	(codePtr),y
.ac11	c8		iny				iny
.ac12	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ac14	d0 07		bne $ac1d			bne 	CNAFail
.ac16	60		rts				rts
.ac17					CheckNextA:
.ac17	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ac19	d0 02		bne $ac1d			bne 	CNAFail
.ac1b	c8		iny				iny 								; skip character
.ac1c	60		rts				rts 								; and exit
.ac1d					CNAFail:
.ac1d	4c ed b1	jmp $b1ed			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9847					ErrorHandler:
.9847	a8		tay				tay 								; find the error text
.9848	f0 49		beq $9893			beq 	_EHEnd
.984a	a2 00		ldx #$00			ldx 	#0
.984c	a9 06		lda #$06			lda 	#((ErrorText) & $FF)
.984e	85 36		sta $36				sta 	0+zTemp0
.9850	a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.9852	85 37		sta $37				sta 	1+zTemp0
.9854					_EHFind:
.9854	88		dey				dey 								; found the error text ?
.9855	f0 0e		beq $9865			beq 	_EHFound
.9857					_EHFindZero:
.9857	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9859	e6 36		inc $36				inc 	zTemp0
.985b	d0 02		bne $985f			bne 	_EHFNoCarry
.985d	e6 37		inc $37				inc 	zTemp0+1
.985f					_EHFNoCarry:
.985f	c9 00		cmp #$00			cmp 	#0
.9861	d0 f4		bne $9857			bne 	_EHFindZero
.9863	80 ef		bra $9854			bra 	_EHFind
.9865					_EHFound:
.9865	a5 36		lda $36				lda 	zTemp0 						; print message
.9867	a6 37		ldx $37				ldx 	zTemp0+1
.9869	20 a0 98	jsr $98a0			jsr 	PrintStringXA
.986c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.986e	b1 30		lda ($30),y			lda 	(codePtr),y
.9870	d0 05		bne $9877			bne 	_EHAtMsg
.9872	c8		iny				iny
.9873	b1 30		lda ($30),y			lda 	(codePtr),y
.9875	f0 17		beq $988e			beq 	_EHCREnd
.9877					_EHAtMsg:
.9877	a2 98		ldx #$98			ldx 	#_AtMsg >> 8 				; print " at "
.9879	a9 96		lda #$96			lda 	#_AtMsg & $FF
.987b	20 a0 98	jsr $98a0			jsr 	PrintStringXA
.987e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9880	b1 30		lda ($30),y			lda 	(codePtr),y
.9882	48		pha				pha
.9883	c8		iny				iny
.9884	b1 30		lda ($30),y			lda 	(codePtr),y
.9886	aa		tax				tax
.9887	68		pla				pla
.9888	20 63 ad	jsr $ad63			jsr 	ConvertInt16 				; convert XA to string
.988b	20 a0 98	jsr $98a0			jsr 	PrintStringXA 				; and print it.
.988e					_EHCREnd:
.988e	a9 0d		lda #$0d			lda 	#13 						; new line
.9890	20 a0 b3	jsr $b3a0			jsr 	EXTPrintCharacter
.9893					_EHEnd:
.9893	4c 0a 8c	jmp $8c0a			jmp 	WarmStart
>9896	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>989e	20 00
.98a0					PrintStringXA:
.98a0	5a		phy				phy
.98a1	86 37		stx $37				stx 	zTemp0+1
.98a3	85 36		sta $36				sta 	zTemp0
.98a5	a0 00		ldy #$00			ldy 	#0
.98a7					_PSXALoop:
.98a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.98a9	f0 06		beq $98b1			beq 	_PSXAExit
.98ab	20 a0 b3	jsr $b3a0			jsr 	EXTPrintCharacter
.98ae	c8		iny				iny
.98af	80 f6		bra $98a7			bra 	_PSXALoop
.98b1					_PSXAExit:
.98b1	7a		ply				ply
.98b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.98b3					UnaryTrue:
.98b3	fa		plx				plx
.98b4					ReturnTrue:
.98b4	a9 01		lda #$01			lda 	#1  						; set to 1
.98b6	20 01 a4	jsr $a401			jsr 	NSMSetByte
.98b9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.98bb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98be	60		rts				rts
.98bf					UnaryFalse:
.98bf	fa		plx				plx
.98c0					ReturnFalse:
.98c0	4c ff a3	jmp $a3ff			jmp 	NSMSetZero 					; set it all to zero
.98c3					BinaryCompareEqual:
.98c3	fa		plx				plx
.98c4	20 ff 98	jsr $98ff			jsr 	CompareBaseCode
.98c7	c9 00		cmp #$00			cmp 	#0
.98c9	f0 e9		beq $98b4			beq 	ReturnTrue
.98cb	80 f3		bra $98c0			bra 	ReturnFalse
.98cd					BinaryCompareLess:
.98cd	fa		plx				plx
.98ce	20 ff 98	jsr $98ff			jsr 	CompareBaseCode
.98d1	c9 ff		cmp #$ff			cmp 	#$FF
.98d3	f0 df		beq $98b4			beq 	ReturnTrue
.98d5	80 e9		bra $98c0			bra 	ReturnFalse
.98d7					BinaryCompareGreater:
.98d7	fa		plx				plx
.98d8	20 ff 98	jsr $98ff			jsr 	CompareBaseCode
.98db	c9 01		cmp #$01			cmp 	#1
.98dd	f0 d5		beq $98b4			beq 	ReturnTrue
.98df	80 df		bra $98c0			bra 	ReturnFalse
.98e1					BinaryCompareNotEqual:
.98e1	fa		plx				plx
.98e2	20 ff 98	jsr $98ff			jsr 	CompareBaseCode
.98e5	c9 00		cmp #$00			cmp 	#0
.98e7	d0 cb		bne $98b4			bne 	ReturnTrue
.98e9	80 d5		bra $98c0			bra 	ReturnFalse
.98eb					BinaryCompareLessEqual:
.98eb	fa		plx				plx
.98ec	20 ff 98	jsr $98ff			jsr 	CompareBaseCode
.98ef	c9 01		cmp #$01			cmp 	#1
.98f1	d0 c1		bne $98b4			bne 	ReturnTrue
.98f3	80 cb		bra $98c0			bra 	ReturnFalse
.98f5					BinaryCompareGreaterEqual:
.98f5	fa		plx				plx
.98f6	20 ff 98	jsr $98ff			jsr 	CompareBaseCode
.98f9	c9 ff		cmp #$ff			cmp 	#$FF
.98fb	d0 b7		bne $98b4			bne 	ReturnTrue
.98fd	80 c1		bra $98c0			bra 	ReturnFalse
.98ff					CompareBaseCode:
.98ff	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; make both values if references.
.9902	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9905	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9908	29 10		and #$10			and 	#NSTString
.990a	d0 40		bne $994c			bne 	_CBCString
.990c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.990f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9912	d0 3b		bne $994f			bne 	_CBCFloat
.9914	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9917	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.991a	29 08		and #$08			and 	#NSTFloat
.991c	d0 31		bne $994f			bne 	_CBCFloat
.991e	20 52 99	jsr $9952			jsr 	CompareFixMinusZero
.9921	e8		inx				inx
.9922	20 52 99	jsr $9952			jsr 	CompareFixMinusZero
.9925	ca		dex				dex
.9926	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9929	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.992c	10 0b		bpl $9939			bpl 	_CDCSameSign
.992e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9931	30 16		bmi $9949			bmi 	_CBCLess 					; return $FF
.9933					_CBCGreater:
.9933	a9 01		lda #$01			lda 	#1
.9935	60		rts				rts
.9936					_CBCEqual:
.9936	a9 00		lda #$00			lda 	#0
.9938	60		rts				rts
.9939					_CDCSameSign:
.9939	20 62 9a	jsr $9a62			jsr 	SubTopTwoStack 				; unsigned subtract
.993c	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; or the mantissa together
.993f	f0 f5		beq $9936			beq 	_CBCEqual 					; -0 == 0
.9941	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9944	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9947	10 ea		bpl $9933			bpl 	_CBCGreater
.9949					_CBCLess:
.9949	a9 ff		lda #$ff			lda 	#$FF
.994b	60		rts				rts
.994c					_CBCString:
.994c	4c b8 99	jmp $99b8			jmp 	CompareStrings
.994f					_CBCFloat:
.994f	4c 5f ae	jmp $ae5f			jmp 	CompareFloat
.9952					CompareFixMinusZero:
.9952	20 2f a4	jsr $a42f			jsr 	NSMIsZero
.9955	d0 03		bne $995a			bne 	_CFXMZNotZero
.9957	9e 00 04	stz $0400,x			stz 	NSStatus,x
.995a					_CFXMZNotZero:
.995a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.995b					StringConcat:
.995b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.995e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9961	29 18		and #$18			and 	#NSBTypeMask
.9963	c9 10		cmp #$10			cmp 	#NSTString
.9965	d0 4e		bne $99b5			bne		_SCType
.9967	64 38		stz $38				stz 	zTemp1 						; counting total length
.9969	e8		inx				inx
.996a	20 88 99	jsr $9988			jsr 	_SCSetupZ0 					; setup for second
.996d	20 93 99	jsr $9993			jsr 	_SCLengthZ0 				; length for second
.9970	ca		dex				dex
.9971	20 88 99	jsr $9988			jsr 	_SCSetupZ0 					; setup for first
.9974	20 93 99	jsr $9993			jsr 	_SCLengthZ0 				; length for first
.9977	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9979	20 22 b5	jsr $b522			jsr 	StringTempAllocate
.997c	20 a6 99	jsr $99a6			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.997f	e8		inx				inx
.9980	20 88 99	jsr $9988			jsr 	_SCSetupZ0 					; copy second out
.9983	20 a6 99	jsr $99a6			jsr 	_SCCopy
.9986	ca		dex				dex
.9987	60		rts				rts
.9988					_SCSetupZ0:
.9988	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.998b	85 36		sta $36				sta 	zTemp0
.998d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9990	85 37		sta $37				sta 	zTemp0+1
.9992	60		rts				rts
.9993					_SCLengthZ0:
.9993	5a		phy				phy
.9994	a0 00		ldy #$00			ldy 	#0
.9996					_SCLenLoop:
.9996	b1 36		lda ($36),y			lda 	(zTemp0),y
.9998	f0 0a		beq $99a4			beq 	_SCLExit
.999a	c8		iny				iny
.999b	e6 38		inc $38				inc 	zTemp1
.999d	10 f7		bpl $9996			bpl		_SCLenLoop
.999f	a9 09		lda #$09		lda	#9
.99a1	4c 47 98	jmp $9847		jmp	ErrorHandler
.99a4					_SCLExit:
.99a4	7a		ply				ply
.99a5	60		rts				rts
.99a6					_SCCopy:
.99a6	5a		phy				phy
.99a7	a0 00		ldy #$00			ldy 	#0
.99a9					_SCCopyLoop:
.99a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.99ab	f0 06		beq $99b3			beq 	_SCCExit
.99ad	20 60 b5	jsr $b560			jsr 	StringTempWrite
.99b0	c8		iny				iny
.99b1	80 f6		bra $99a9			bra 	_SCCopyLoop
.99b3					_SCCExit:
.99b3	7a		ply				ply
.99b4	60		rts				rts
.99b5					_SCType:
.99b5	4c f7 b1	jmp $b1f7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ac20					IntegerDivide:
.ac20	fa		plx				plx
.ac21	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ac24	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ac27	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ac28	0a		asl a				asl 	a
.ac29	10 05		bpl $ac30			bpl 	_NotRef
.ac2b	48		pha				pha
.ac2c	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ac2f	68		pla				pla
.ac30					_NotRef:
.ac30	0a		asl a				asl 	a
.ac31	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ac33	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ac36	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ac39	f0 03		beq $ac3e			beq 	_IntegerCode 				; if clear, then we have two integers
.ac3b	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.ac3e					_IntegerCode:
.ac3e	20 60 ac	jsr $ac60			jsr 	CheckDivideZero 			; do div zero check
.ac41	20 98 ac	jsr $ac98			jsr 	Int32Divide 				; do the division
.ac44	20 55 ad	jsr $ad55			jsr 	CalculateSign 				; calculate result sign
.ac47					NSMCopyPlusTwoToZero:
.ac47	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ac4a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ac4d	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ac50	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac53	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ac56	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ac59	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ac5c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ac5f	60		rts				rts
.ac60					CheckDivideZero:
.ac60	e8		inx				inx
.ac61	20 2f a4	jsr $a42f			jsr 	NSMIsZero
.ac64	f0 02		beq $ac68			beq 	_CDVError
.ac66	ca		dex				dex
.ac67	60		rts				rts
.ac68					_CDVError:
.ac68	a9 03		lda #$03		lda	#3
.ac6a	4c 47 98	jmp $9847		jmp	ErrorHandler
.ac6d					IntegerModulus:
.ac6d	fa		plx				plx
.ac6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ac71	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ac74	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ac75	0a		asl a				asl 	a
.ac76	10 05		bpl $ac7d			bpl 	_NotRef
.ac78	48		pha				pha
.ac79	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ac7c	68		pla				pla
.ac7d					_NotRef:
.ac7d	0a		asl a				asl 	a
.ac7e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ac80	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ac83	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ac86	f0 03		beq $ac8b			beq 	_IntegerCode 				; if clear, then we have two integers
.ac88	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.ac8b					_IntegerCode:
.ac8b					IntegerModulusNoCheck:
.ac8b	20 60 ac	jsr $ac60			jsr 	CheckDivideZero 			; do div zero check
.ac8e	20 98 ac	jsr $ac98			jsr 	Int32Divide 				; do the division
.ac91	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ac94	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ac97	60		rts				rts
.ac98					Int32Divide:
.ac98	48		pha				pha 								; save AXY
.ac99	5a		phy				phy
.ac9a	20 d6 a3	jsr $a3d6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ac9d	20 fb a3	jsr $a3fb			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aca0	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aca2					_I32DivideLoop:
.aca2	e8		inx				inx
.aca3	e8		inx				inx
.aca4	20 14 a4	jsr $a414			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aca7	ca		dex				dex
.aca8	ca		dex				dex
.aca9	20 15 a4	jsr $a415			jsr 	NSMRotateLeft
.acac	20 d8 ac	jsr $acd8			jsr 	DivideCheckSubtract 		; check if subtract possible
.acaf	90 03		bcc $acb4			bcc 	_I32DivideNoCarryIn
.acb1	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.acb4					_I32DivideNoCarryIn:
.acb4	88		dey				dey 								; loop round till division completed.
.acb5	d0 eb		bne $aca2			bne 	_I32DivideLoop
.acb7	7a		ply				ply 								; restore AXY and exit
.acb8	68		pla				pla
.acb9	60		rts				rts
.acba					Int32ShiftDivide:
.acba	48		pha				pha 								; save AY
.acbb	5a		phy				phy
.acbc	e8		inx				inx 								; clear S[X+2]
.acbd	e8		inx				inx
.acbe	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.acc1	ca		dex				dex
.acc2	ca		dex				dex
.acc3	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.acc5					_I32SDLoop:
.acc5	20 d8 ac	jsr $acd8			jsr 	DivideCheckSubtract 		; check if subtract possible
.acc8	e8		inx				inx
.acc9	e8		inx				inx
.acca	20 15 a4	jsr $a415			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.accd	ca		dex				dex
.acce	ca		dex				dex
.accf	20 15 a4	jsr $a415			jsr 	NSMRotateLeft
.acd2	88		dey				dey 	 							; do 31 times
.acd3	d0 f0		bne $acc5			bne 	_I32SDLoop
.acd5	7a		ply				ply 								; restore AY and exit
.acd6	68		pla				pla
.acd7	60		rts				rts
.acd8					DivideCheckSubtract:
.acd8	20 62 9a	jsr $9a62			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.acdb	b0 04		bcs $ace1			bcs 	_DCSExit 					; if carry set, then could do, exit
.acdd	20 3c 9a	jsr $9a3c			jsr 	AddTopTwoStack 				; add it back in
.ace0	18		clc				clc 								; and return False
.ace1					_DCSExit:
.ace1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ace2					MulInteger:
.ace2	fa		plx				plx
.ace3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ace6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ace9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.acea	0a		asl a				asl 	a
.aceb	10 05		bpl $acf2			bpl 	_NotRef
.aced	48		pha				pha
.acee	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.acf1	68		pla				pla
.acf2					_NotRef:
.acf2	0a		asl a				asl 	a 							; put MSB of type into A:7
.acf3	30 0b		bmi $ad00			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.acf5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.acf8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.acfb	f0 06		beq $ad03			beq 	_IntegerCode 				; if clear, then we have two integers
.acfd	4c 36 af	jmp $af36			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ad00					_StringData:
.ad00	4c 01 b2	jmp $b201			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ad03					_IntegerCode:
.ad03	20 10 ad	jsr $ad10			jsr 	MultiplyShort
.ad06	c9 00		cmp #$00			cmp 	#0
.ad08	f0 05		beq $ad0f			beq 	_MIExit
.ad0a	a9 04		lda #$04		lda	#4
.ad0c	4c 47 98	jmp $9847		jmp	ErrorHandler
.ad0f					_MIExit:
.ad0f	60		rts				rts
.ad10					MultiplyShort:
.ad10	5a		phy				phy 								; save Y
.ad11	20 d6 a3	jsr $a3d6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ad14	20 fb a3	jsr $a3fb			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ad17	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ad19					_I32MLoop:
.ad19	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ad1c	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ad1f	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ad22	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ad25	f0 28		beq $ad4f			beq 	_I32MExit 					; exit if zero
.ad27	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ad2a	29 01		and #$01			and 	#1
.ad2c	f0 0e		beq $ad3c			beq 	_I32MNoAdd
.ad2e	20 3c 9a	jsr $9a3c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ad31	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ad34	10 06		bpl $ad3c			bpl 	_I32MNoAdd
.ad36					_I32ShiftRight:
.ad36	20 22 a4	jsr $a422			jsr 	NSMShiftRight 				; shift S[X] right
.ad39	c8		iny				iny 								; increment shift count
.ad3a	80 0a		bra $ad46			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ad3c					_I32MNoAdd:
.ad3c	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ad3f	70 f5		bvs $ad36			bvs 	_I32ShiftRight 				; instead.
.ad41	e8		inx				inx
.ad42	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ad45	ca		dex				dex
.ad46					_I32MShiftUpper:
.ad46	e8		inx				inx 								; shift S[X+2] right
.ad47	e8		inx				inx
.ad48	20 22 a4	jsr $a422			jsr 	NSMShiftRight
.ad4b	ca		dex				dex
.ad4c	ca		dex				dex
.ad4d	80 ca		bra $ad19			bra 	_I32MLoop 					; try again.
.ad4f					_I32MExit:
.ad4f	20 55 ad	jsr $ad55			jsr 	CalculateSign
.ad52	98		tya				tya 								; shift in A
.ad53	7a		ply				ply 								; restore Y and exit
.ad54	60		rts				rts
.ad55					CalculateSign:
.ad55	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ad58	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ad5b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ad5e	0a		asl a				asl 	a 							; shift bit 7 into carry
.ad5f	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ad62	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.99b8					CompareStrings:
.99b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.99bb	3d 01 04	and $0401,x			and 	NSStatus+1,x
.99be	29 10		and #$10			and 	#NSBIsString
.99c0	f0 2c		beq $99ee			beq 	_CSTypeError
.99c2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.99c5	85 36		sta $36				sta 	zTemp0
.99c7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.99ca	85 37		sta $37				sta 	zTemp0+1
.99cc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.99cf	85 38		sta $38				sta 	zTemp1
.99d1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.99d4	85 39		sta $39				sta 	zTemp1+1
.99d6	5a		phy				phy 								; save Y so we can access strings
.99d7	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.99d9					_CSLoop:
.99d9	c8		iny				iny
.99da	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.99dc	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.99de	d0 06		bne $99e6			bne 	_CSDifferent
.99e0	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.99e2	d0 f5		bne $99d9			bne 	_CSLoop 					; still comparing
.99e4					_CSExit:
.99e4	7a		ply				ply 								; reached end, return zero in A from EOS
.99e5	60		rts				rts
.99e6					_CSDifferent:
.99e6	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.99e8	90 fa		bcc $99e4			bcc		_CSExit
.99ea	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.99ec	80 f6		bra $99e4			bra 	_CSExit
.99ee					_CSTypeError:
.99ee	4c f7 b1	jmp $b1f7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.99f1					ShiftLeft:
.99f1	38		sec				sec
.99f2	80 01		bra $99f5			bra 	ShiftMain
.99f4					ShiftRight:
.99f4	18		clc				clc
.99f5					ShiftMain:
.99f5	fa		plx				plx 								; restore X
.99f6	08		php				php 								; save direction
.99f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.99fa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99fe	0a		asl a				asl 	a
.99ff	10 05		bpl $9a06			bpl 	_NotRef
.9a01	48		pha				pha
.9a02	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a05	68		pla				pla
.9a06					_NotRef:
.9a06	0a		asl a				asl 	a
.9a07	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a09	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a0c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a0f	f0 03		beq $9a14			beq 	_IntegerCode 				; if clear, then we have two integers
.9a11	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.9a14					_IntegerCode:
.9a14	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9a17	29 e0		and #$e0			and 	#$E0
.9a19	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9a1c	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9a1f	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9a22	d0 13		bne $9a37			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9a24					_SMLoop:
.9a24	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9a27	30 11		bmi $9a3a			bmi 	_SMExit 					; exit if done.
.9a29	28		plp				plp 								; restore direcition setting
.9a2a	08		php				php
.9a2b	90 05		bcc $9a32			bcc 	_SMRight
.9a2d	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; shift left if CS
.9a30	80 f2		bra $9a24			bra 	_SMLoop
.9a32					_SMRight:
.9a32	20 22 a4	jsr $a422			jsr 	NSMShiftRight 				; shift right if CC
.9a35	80 ed		bra $9a24			bra 	_SMLoop
.9a37					_SMExit0:
.9a37	20 ff a3	jsr $a3ff			jsr 	NSMSetZero 					; return zero.
.9a3a					_SMExit:
.9a3a	28		plp				plp 								; throw direction
.9a3b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9a3c					AddTopTwoStack:
.9a3c	18		clc				clc
.9a3d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9a40	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9a43	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a46	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9a49	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9a4c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a4f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9a52	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9a55	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a58	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9a5b	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9a5e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a61	60		rts				rts
.9a62					SubTopTwoStack:
.9a62	38		sec				sec
.9a63	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9a66	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9a69	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a6c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9a6f	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9a72	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a75	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9a78	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9a7b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a7e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9a81	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9a84	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a87	60		rts				rts
.9a88					AddInteger:
.9a88	fa		plx				plx
.9a89	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a8c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a8f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a90	0a		asl a				asl 	a
.9a91	10 05		bpl $9a98			bpl 	_NotRef
.9a93	48		pha				pha
.9a94	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a97	68		pla				pla
.9a98					_NotRef:
.9a98	0a		asl a				asl 	a 							; put MSB of type into A:7
.9a99	30 0b		bmi $9aa6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a9b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a9e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9aa1	f0 06		beq $9aa9			beq 	_IntegerCode 				; if clear, then we have two integers
.9aa3	4c be ad	jmp $adbe			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9aa6					_StringData:
.9aa6	4c 5b 99	jmp $995b			jmp 	StringConcat							; at least one string - don't know both are strings.
.9aa9					_IntegerCode:
.9aa9					AddCode:
.9aa9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9aac	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9aaf	10 8b		bpl $9a3c			bpl 	AddTopTwoStack
.9ab1	20 62 9a	jsr $9a62			jsr 	SubTopTwoStack 				; do a physical subtraction
.9ab4	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9ab7	10 09		bpl $9ac2			bpl 	_AddExit
.9ab9	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9abc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9abf	20 b4 a3	jsr $a3b4			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9ac2					_AddExit:
.9ac2	60		rts				rts
.9ac3					SubInteger:
.9ac3	fa		plx				plx
.9ac4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ac7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aca	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9acb	0a		asl a				asl 	a
.9acc	10 05		bpl $9ad3			bpl 	_NotRef
.9ace	48		pha				pha
.9acf	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ad2	68		pla				pla
.9ad3					_NotRef:
.9ad3	0a		asl a				asl 	a 							; put MSB of type into A:7
.9ad4	30 0b		bmi $9ae1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ad6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ad9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9adc	f0 06		beq $9ae4			beq 	_IntegerCode 				; if clear, then we have two integers
.9ade	4c c3 ad	jmp $adc3			jmp 	FloatingPointSub 							; otherwise at least one float.
.9ae1					_StringData:
.9ae1	4c 01 b2	jmp $b201			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9ae4					_IntegerCode:
.9ae4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9ae7	49 80		eor #$80			eor 	#$80
.9ae9	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9aec	80 bb		bra $9aa9			bra 	AddCode 					; and do the same code as add.
.9aee					AndInteger:
.9aee	fa		plx				plx
.9aef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9af2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9af5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9af6	0a		asl a				asl 	a
.9af7	10 05		bpl $9afe			bpl 	_NotRef
.9af9	48		pha				pha
.9afa	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9afd	68		pla				pla
.9afe					_NotRef:
.9afe	0a		asl a				asl 	a
.9aff	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b01	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b04	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b07	f0 03		beq $9b0c			beq 	_IntegerCode 				; if clear, then we have two integers
.9b09	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.9b0c					_IntegerCode:
.9b0c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b0f	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9b12	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b15	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b18	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9b1b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b1e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b21	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9b24	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b27	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b2a	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9b2d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b30	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9b33	60		rts				rts
.9b34					OraInteger:
.9b34	fa		plx				plx
.9b35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b38	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b3b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b3c	0a		asl a				asl 	a
.9b3d	10 05		bpl $9b44			bpl 	_NotRef
.9b3f	48		pha				pha
.9b40	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b43	68		pla				pla
.9b44					_NotRef:
.9b44	0a		asl a				asl 	a
.9b45	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b47	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b4a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b4d	f0 03		beq $9b52			beq 	_IntegerCode 				; if clear, then we have two integers
.9b4f	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.9b52					_IntegerCode:
.9b52	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b55	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9b58	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b5b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b5e	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9b61	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b64	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b67	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9b6a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b6d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b70	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9b73	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b76	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9b79	60		rts				rts
.9b7a					EorInteger:
.9b7a	fa		plx				plx
.9b7b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b7e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b81	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b82	0a		asl a				asl 	a
.9b83	10 05		bpl $9b8a			bpl 	_NotRef
.9b85	48		pha				pha
.9b86	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b89	68		pla				pla
.9b8a					_NotRef:
.9b8a	0a		asl a				asl 	a
.9b8b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b8d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b90	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b93	f0 03		beq $9b98			beq 	_IntegerCode 				; if clear, then we have two integers
.9b95	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.9b98					_IntegerCode:
.9b98	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b9b	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9b9e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ba1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ba4	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9ba7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9baa	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bad	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9bb0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bb3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bb6	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9bb9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bbc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9bbf	60		rts				rts
.9bc0					WordIndirect:
.9bc0	fa		plx				plx
.9bc1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bc4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bc7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bc8	0a		asl a				asl 	a
.9bc9	10 05		bpl $9bd0			bpl 	_NotRef
.9bcb	48		pha				pha
.9bcc	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bcf	68		pla				pla
.9bd0					_NotRef:
.9bd0	0a		asl a				asl 	a
.9bd1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bd3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bd6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bd9	f0 03		beq $9bde			beq 	_IntegerCode 				; if clear, then we have two integers
.9bdb	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.9bde					_IntegerCode:
.9bde	20 a9 9a	jsr $9aa9			jsr 	AddCode 					; add the two values
.9be1	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9be3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9be6	60		rts				rts
.9be7					ByteIndirect:
.9be7	fa		plx				plx
.9be8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9beb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bee	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bef	0a		asl a				asl 	a
.9bf0	10 05		bpl $9bf7			bpl 	_NotRef
.9bf2	48		pha				pha
.9bf3	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bf6	68		pla				pla
.9bf7					_NotRef:
.9bf7	0a		asl a				asl 	a
.9bf8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bfa	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bfd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c00	f0 03		beq $9c05			beq 	_IntegerCode 				; if clear, then we have two integers
.9c02	4c f7 b1	jmp $b1f7			jmp 	TypeError 					; anything else, type mismatch.
.9c05					_IntegerCode:
.9c05	20 a9 9a	jsr $9aa9			jsr 	AddCode 					; add the two values
.9c08	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9c0a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ad63					ConvertInt16:
.ad63	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ad66	8e 10 04	stx $0410			stx 	NSMantissa1
.ad69	9c 18 04	stz $0418			stz 	NSMantissa2
.ad6c	9c 20 04	stz $0420			stz 	NSMantissa3
.ad6f	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ad72	a2 00		ldx #$00			ldx 	#0 							; stack level
.ad74	a9 0a		lda #$0a			lda 	#10 						; base
.ad76	80 00		bra $ad78			bra 	ConvertInt32
.ad78					ConvertInt32:
.ad78	5a		phy				phy
.ad79	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ad7b	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ad7e	10 08		bpl $ad88			bpl 	_CI32NotNeg
.ad80	48		pha				pha
.ad81	a9 2d		lda #$2d			lda 	#'-'
.ad83	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ad86	c8		iny				iny
.ad87	68		pla				pla
.ad88					_CI32NotNeg:
.ad88	20 96 ad	jsr $ad96			jsr 	_CI32DivideConvert 			; recursive conversion
.ad8b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ad8d	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ad90	7a		ply				ply
.ad91	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ad93	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ad95	60		rts				rts
.ad96					_CI32DivideConvert:
.ad96	e8		inx				inx 								; write to next slot up
.ad97	20 01 a4	jsr $a401			jsr 	NSMSetByte
.ad9a	ca		dex				dex
.ad9b	20 98 ac	jsr $ac98			jsr 	Int32Divide 				; divide
.ad9e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ada1	48		pha				pha
.ada2	20 47 ac	jsr $ac47			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ada5	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; is it zero ?
.ada8	f0 06		beq $adb0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.adaa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.adad	20 96 ad	jsr $ad96			jsr 	_CI32DivideConvert 			; and recusrively call.
.adb0					_CI32NoRecurse:
.adb0	68		pla				pla 								; remainder
.adb1	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.adb3	90 02		bcc $adb7			bcc 	_CI32NotHex
.adb5	69 26		adc #$26			adc 	#6+32
.adb7					_CI32NotHex:
.adb7	69 30		adc #$30			adc 	#48
.adb9	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.adbc	c8		iny				iny
.adbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9c0e					PrecedenceLevel:
>9c0e	04					.byte	 4	; $00 <<
>9c0f	02					.byte	 2	; $01 <=
>9c10	02					.byte	 2	; $02 <>
>9c11	00					.byte	 0	; $03 !!3
>9c12	00					.byte	 0	; $04 ><
>9c13	02					.byte	 2	; $05 >=
>9c14	04					.byte	 4	; $06 >>
>9c15	00					.byte	 0	; $07 !!7
>9c16	00					.byte	 0	; $08 !!8
>9c17	00					.byte	 0	; $09 !!9
>9c18	00					.byte	 0	; $0a !!10
>9c19	00					.byte	 0	; $0b !!11
>9c1a	00					.byte	 0	; $0c !!12
>9c1b	00					.byte	 0	; $0d !!13
>9c1c	00					.byte	 0	; $0e !!14
>9c1d	00					.byte	 0	; $0f !!15
>9c1e	00					.byte	 0	; $10 @
>9c1f	00					.byte	 0	; $11 !!17
>9c20	00					.byte	 0	; $12 !!18
>9c21	00					.byte	 0	; $13 [
>9c22	04					.byte	 4	; $14 \
>9c23	00					.byte	 0	; $15 ]
>9c24	01					.byte	 1	; $16 ^
>9c25	00					.byte	 0	; $17 _
>9c26	00					.byte	 0	; $18 `
>9c27	00					.byte	 0	; $19 !!25
>9c28	00					.byte	 0	; $1a !!26
>9c29	00					.byte	 0	; $1b {
>9c2a	01					.byte	 1	; $1c |
>9c2b	00					.byte	 0	; $1d }
>9c2c	00					.byte	 0	; $1e ~
>9c2d	00					.byte	 0	; $1f [7m<7F>[m
>9c2e	00					.byte	 0	; $20
>9c2f	05					.byte	 5	; $21 !
>9c30	00					.byte	 0	; $22 "
>9c31	00					.byte	 0	; $23 #
>9c32	05					.byte	 5	; $24 $
>9c33	04					.byte	 4	; $25 %
>9c34	01					.byte	 1	; $26 &
>9c35	00					.byte	 0	; $27 '
>9c36	00					.byte	 0	; $28 (
>9c37	00					.byte	 0	; $29 )
>9c38	04					.byte	 4	; $2a *
>9c39	03					.byte	 3	; $2b +
>9c3a	00					.byte	 0	; $2c ,
>9c3b	03					.byte	 3	; $2d -
>9c3c	00					.byte	 0	; $2e .
>9c3d	04					.byte	 4	; $2f /
>9c3e	00					.byte	 0	; $30 0
>9c3f	00					.byte	 0	; $31 1
>9c40	00					.byte	 0	; $32 2
>9c41	00					.byte	 0	; $33 3
>9c42	00					.byte	 0	; $34 4
>9c43	00					.byte	 0	; $35 5
>9c44	00					.byte	 0	; $36 6
>9c45	00					.byte	 0	; $37 7
>9c46	00					.byte	 0	; $38 8
>9c47	00					.byte	 0	; $39 9
>9c48	00					.byte	 0	; $3a :
>9c49	00					.byte	 0	; $3b ;
>9c4a	02					.byte	 2	; $3c <
>9c4b	02					.byte	 2	; $3d =
>9c4c	02					.byte	 2	; $3e >
>9c4d	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9c4e					EvaluateExpressionAt0:
.9c4e	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9c50					EvaluateExpression:
.9c50	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9c52					EvaluateExpressionAtPrecedence:
.9c52	48		pha				pha 								; save precedence level
.9c53	20 21 9f	jsr $9f21			jsr 	EvaluateTerm 				; evaluate term into level X.
.9c56	68		pla				pla 								; restore precedence level.
.9c57					_EXPRLoop:
.9c57	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9c59	b1 30		lda ($30),y			lda 	(codePtr),y
.9c5b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9c5d	b0 25		bcs $9c84			bcs 	_EXPRExit
.9c5f	da		phx				phx 								; read the operator precedence
.9c60	aa		tax				tax
.9c61	bd 0e 9c	lda $9c0e,x			lda 	PrecedenceLevel,x
.9c64	fa		plx				plx
.9c65	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9c67	f0 1b		beq $9c84			beq 	_EXPRExit
.9c69	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9c6b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9c6d	c5 37		cmp $37				cmp 	zTemp0+1
.9c6f	b0 13		bcs $9c84			bcs		_EXPRExit 					; if current >= operator exit
.9c71	48		pha				pha 								; save current precedence.
.9c72	b1 30		lda ($30),y			lda 	(codePtr),y
.9c74	c8		iny				iny
.9c75	48		pha				pha
.9c76	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9c78	e8		inx				inx 								; work out the right hand side.
.9c79	20 52 9c	jsr $9c52			jsr 	EvaluateExpressionAtPrecedence
.9c7c	ca		dex				dex
.9c7d	68		pla				pla 								; get operator, call the code.
.9c7e	20 87 9c	jsr $9c87			jsr 	_EXPRCaller
.9c81	68		pla				pla 								; restore precedence level
.9c82	80 d3		bra $9c57			bra 	_EXPRLoop 					; and go round.
.9c84					_EXPRExit:
.9c84	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9c86	60		rts				rts
.9c87					_EXPRCaller:
.9c87	da		phx				phx 								; save on stack, first thing is to restore it
.9c88	0a		asl a				asl 	a 							; double so can use vectors into X
.9c89	aa		tax				tax
.9c8a	7c 66 94	jmp ($9466,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.adbe					FloatingPointAdd:
.adbe	20 5f af	jsr $af5f			jsr 	FloatPrepare 				; prepare for floats
.adc1	80 0b		bra $adce			bra 	FloatAdd
.adc3					FloatingPointSub:
.adc3	20 5f af	jsr $af5f			jsr 	FloatPrepare 				; prepare for floats
.adc6					FloatSubtract:
.adc6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.adc9	49 80		eor #$80			eor 	#$80
.adcb	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.adce					FloatAdd:
.adce	48		pha				pha
.adcf	5a		phy				phy
.add0	20 70 af	jsr $af70			jsr 	NSNormalise 				; normalise S[X]
.add3	f0 54		beq $ae29			beq 	_FAReturn1
.add5	e8		inx				inx 								; normalise S[X+1]
.add6	20 70 af	jsr $af70			jsr 	NSNormalise
.add9	ca		dex				dex
.adda	c9 00		cmp #$00			cmp 	#0
.addc	f0 6f		beq $ae4d			beq 	_FAExit 					; if so, just return A
.adde	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.ade1	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.ade4	f0 1b		beq $ae01			beq 	_FAExponentsEqual
.ade6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.ade9	a8		tay				tay
.adea	38		sec				sec 								; do a signed comparison of the exponents.
.adeb	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.adee	50 02		bvc $adf2			bvc 	_FANoSignedChange
.adf0	49 80		eor #$80			eor 	#$80
.adf2					_FANoSignedChange:
.adf2	29 80		and #$80			and 	#$80
.adf4	10 03		bpl $adf9			bpl 	_FAHaveMax
.adf6	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.adf9					_FAHaveMax:
.adf9	20 50 ae	jsr $ae50			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.adfc	e8		inx				inx
.adfd	20 50 ae	jsr $ae50			jsr 	_FAShiftToExponent
.ae00	ca		dex				dex
.ae01					_FAExponentsEqual:
.ae01	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.ae04	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ae07	30 10		bmi $ae19			bmi 	_FADifferentSigns
.ae09	20 3c 9a	jsr $9a3c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.ae0c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.ae0f	10 3c		bpl $ae4d			bpl 	_FAExit 					; if no, we are done.
.ae11	20 22 a4	jsr $a422			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.ae14	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.ae17	80 34		bra $ae4d			bra 	_FAExit
.ae19					_FADifferentSigns:
.ae19	20 62 9a	jsr $9a62			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.ae1c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.ae1f	10 2c		bpl $ae4d			bpl 	_FAExit 					; if no, we are done.
.ae21	20 ab a3	jsr $a3ab			jsr 	NSMNegate 					; netate result
.ae24	20 b4 a3	jsr $a3b4			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.ae27	80 24		bra $ae4d			bra 	_FAExit
.ae29					_FAReturn1:
.ae29	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.ae2c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ae2f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.ae32	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae35	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.ae38	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ae3b	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.ae3e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ae41	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.ae44	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ae47	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.ae4a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ae4d					_FAExit:
.ae4d	7a		ply				ply
.ae4e	68		pla				pla
.ae4f	60		rts				rts
.ae50					_FAShiftToExponent:
.ae50					_FAShiftToExponent2:
.ae50	98		tya				tya 								; compare Y to exponent
.ae51	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.ae54	f0 08		beq $ae5e			beq 	_FASEExit 					; exit if so.
.ae56	20 22 a4	jsr $a422			jsr 	NSMShiftRight	 			; shift the mantissa right
.ae59	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.ae5c	80 f2		bra $ae50			bra 	_FAShiftToExponent2
.ae5e					_FASEExit:
.ae5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.ae5f					CompareFloat:
.ae5f	20 c6 ad	jsr $adc6			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.ae62	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.ae65	29 f8		and #$f8			and 	#$F8
.ae67	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.ae6a	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.ae6d	f0 09		beq $ae78			beq 	_FCExit 					; zero, so approximately identical
.ae6f	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.ae71	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ae74	10 02		bpl $ae78			bpl 	_FCExit
.ae76					_FCNegative:
.ae76	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ae78					_FCExit:
.ae78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ae79					FDivideCommand:
.ae79	fa		plx				plx	 								; restore stack position
.ae7a	20 5f af	jsr $af5f			jsr 	FloatPrepare 				; prepare for floats
.ae7d					FloatDivide:
.ae7d	48		pha				pha
.ae7e	e8		inx				inx
.ae7f	20 70 af	jsr $af70			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ae82	ca		dex				dex
.ae83	c9 00		cmp #$00			cmp 	#0
.ae85	f0 20		beq $aea7			beq 	_FDZero
.ae87	20 70 af	jsr $af70			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ae8a	f0 19		beq $aea5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ae8c	20 ba ac	jsr $acba			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.ae8f	20 47 ac	jsr $ac47			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.ae92	20 70 af	jsr $af70			jsr		NSNormalise 				; renormalise
.ae95	20 55 ad	jsr $ad55			jsr 	CalculateSign 				; calculate result sign
.ae98	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.ae9b	38		sec				sec
.ae9c	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ae9f	38		sec				sec
.aea0	e9 1e		sbc #$1e			sbc 	#30
.aea2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aea5					_FDExit:
.aea5	68		pla				pla
.aea6	60		rts				rts
.aea7					_FDZero:
.aea7	a9 03		lda #$03		lda	#3
.aea9	4c 47 98	jmp $9847		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.aeac					FloatFractionalPart:
.aeac	5a		phy				phy
.aead	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.aeb0	29 7f		and #$7f			and 	#$7F
.aeb2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aeb5	20 70 af	jsr $af70			jsr 	NSNormalise
.aeb8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.aebb	38		sec				sec
.aebc	e9 e0		sbc #$e0			sbc 	#$E0
.aebe	90 31		bcc $aef1			bcc 	_FFPExit 					; already fractional
.aec0	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.aec2	b0 2a		bcs $aeee			bcs 	_FFPZero
.aec4	a8		tay				tay 								; put count to do in Y
.aec5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.aec8	20 f3 ae	jsr $aef3			jsr 	_FFPPartial
.aecb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aece	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.aed1	20 f3 ae	jsr $aef3			jsr 	_FFPPartial
.aed4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aed7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aeda	20 f3 ae	jsr $aef3			jsr 	_FFPPartial
.aedd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aee0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aee3	20 f3 ae	jsr $aef3			jsr 	_FFPPartial
.aee6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aee9	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; zeroed check.
.aeec	d0 03		bne $aef1			bne 	_FFPExit
.aeee					_FFPZero:
.aeee	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.aef1					_FFPExit:
.aef1	7a		ply				ply
.aef2	60		rts				rts
.aef3					_FFPPartial:
.aef3	c0 00		cpy #$00			cpy 	#0 							; no more to do
.aef5	f0 17		beq $af0e			beq 	_FFFPPExit
.aef7	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.aef9	b0 0c		bcs $af07			bcs 	_FFFPPWholeByte
.aefb	5a		phy				phy
.aefc					_FFFPPLeft:
.aefc	0a		asl a				asl 	a
.aefd	88		dey				dey
.aefe	d0 fc		bne $aefc			bne 	_FFFPPLeft
.af00	7a		ply				ply
.af01					_FFFPPRight:
.af01	4a		lsr a				lsr 	a
.af02	88		dey				dey
.af03	d0 fc		bne $af01			bne 	_FFFPPRight
.af05	80 07		bra $af0e			bra 	_FFFPPExit
.af07					_FFFPPWholeByte:
.af07	98		tya				tya 								; subtract 8 from count
.af08	38		sec				sec
.af09	e9 08		sbc #$08			sbc 	#8
.af0b	a8		tay				tay
.af0c	a9 00		lda #$00			lda 	#0 							; and clear all
.af0e					_FFFPPExit:
.af0e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.af0f					FloatIntegerPart:
.af0f	48		pha				pha
.af10	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.af13	f0 1f		beq $af34			beq 	_FIPExit 					; if so do nothing
.af15	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; is it zero ?
.af18	f0 17		beq $af31			beq 	_FIPZero 					; if so return zero.
.af1a	20 70 af	jsr $af70			jsr 	NSNormalise 				; normalise
.af1d	f0 12		beq $af31			beq 	_FIPZero 					; normalised to zero, exit zero
.af1f					_FIPShift:
.af1f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.af22	10 08		bpl $af2c			bpl 	_FIPCheckZero
.af24	20 22 a4	jsr $a422			jsr 	NSMShiftRight 				; shift mantissa right
.af27	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.af2a	80 f3		bra $af1f			bra 	_FIPShift
.af2c					_FIPCheckZero:
.af2c	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; avoid -0 problem
.af2f	d0 03		bne $af34			bne 	_FIPExit 					; set to zero if mantissa zero.
.af31					_FIPZero:
.af31	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.af34					_FIPExit:
.af34	68		pla				pla
.af35	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.af36					FloatingPointMultiply:
.af36	20 5f af	jsr $af5f			jsr 	FloatPrepare 				; prepare for floats
.af39					FloatMultiply:
.af39	48		pha				pha
.af3a	20 70 af	jsr $af70			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.af3d	f0 1b		beq $af5a			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.af3f	e8		inx				inx
.af40	20 70 af	jsr $af70			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.af43	ca		dex				dex
.af44	c9 00		cmp #$00			cmp 	#0
.af46	f0 0f		beq $af57			beq 	_FDSetZero
.af48	20 10 ad	jsr $ad10			jsr 	MultiplyShort 				; calculate the result.
.af4b	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.af4e	18		clc				clc
.af4f	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.af52	9d 28 04	sta $0428,x			sta 	NSExponent,x
.af55	80 03		bra $af5a			bra 	_FDExit
.af57					_FDSetZero:
.af57	20 ff a3	jsr $a3ff			jsr 	NSMSetZero 					; return 0
.af5a					_FDExit:
.af5a	20 70 af	jsr $af70			jsr 	NSNormalise 				; normalise the result
.af5d	68		pla				pla
.af5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.af5f					FloatPrepare:
.af5f	20 60 9d	jsr $9d60			jsr 	DereferenceTopTwo 			; dereference the top two values
.af62	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.af65	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af68	29 10		and #$10			and 	#NSBIsString
.af6a	d0 01		bne $af6d			bne 	_FDType
.af6c	60		rts				rts
.af6d					_FDType:
.af6d	4c f7 b1	jmp $b1f7			jmp 	TypeError
.af70					NSNormalise:
.af70	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.af73	29 80		and #$80			and 	#$80
.af75	09 08		ora #$08			ora 	#NSTFloat
.af77	9d 00 04	sta $0400,x			sta 	NSStatus,x
.af7a	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; if zero exit
.af7d	d0 09		bne $af88			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.af7f	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.af82	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.af85	a9 00		lda #$00			lda 	#0 							; set Z flag
.af87	60		rts				rts
.af88					_NSNormaliseOptimise:
.af88	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.af8b	d0 22		bne $afaf			bne 	_NSNormaliseLoop
.af8d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.af90	30 1d		bmi $afaf			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.af92	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.af95	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.af98	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.af9b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.af9e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afa1	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.afa4	bd 28 04	lda $0428,x			lda 	NSExponent,x
.afa7	38		sec				sec
.afa8	e9 08		sbc #$08			sbc 	#8
.afaa	9d 28 04	sta $0428,x			sta 	NSExponent,x
.afad	80 d9		bra $af88			bra 	_NSNormaliseOptimise
.afaf					_NSNormaliseLoop:
.afaf	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.afb2	70 08		bvs $afbc			bvs 	_NSNExit 					; exit if so with Z flag clear
.afb4	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; shift mantissa left
.afb7	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.afba	80 f3		bra $afaf			bra 	_NSNormaliseLoop
.afbc					_NSNExit:
.afbc	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.afbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9c8d					AssignNumber:
.9c8d	5a		phy				phy
.9c8e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9c91	85 36		sta $36				sta 	zTemp0
.9c93	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c96	85 37		sta $37				sta 	zTemp0+1
.9c98	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9c9b	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9c9d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ca0	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ca2	c9 08		cmp #$08			cmp 	#NSTFloat
.9ca4	f0 2a		beq $9cd0			beq 	_ANFloat
.9ca6	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9ca9	f0 05		beq $9cb0			beq		_ANNotFloat
.9cab	e8		inx				inx
.9cac	20 0f af	jsr $af0f			jsr 	FloatIntegerPart 			; make it an integer
.9caf	ca		dex				dex
.9cb0					_ANNotFloat:
.9cb0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9cb3	29 03		and #$03			and 	#3
.9cb5	d0 05		bne $9cbc			bne 	_ANByteWord
.9cb7	20 dc 9c	jsr $9cdc			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9cba	80 1e		bra $9cda			bra 	_ANExit
.9cbc					_ANByteWord:
.9cbc	48		pha				pha 								; save count
.9cbd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9cc0	92 36		sta ($36)			sta 	(zTemp0)
.9cc2	68		pla				pla
.9cc3	c9 01		cmp #$01			cmp	 	#1
.9cc5	f0 13		beq $9cda			beq 	_ANExit
.9cc7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9cca	a0 01		ldy #$01			ldy 	#1
.9ccc	91 36		sta ($36),y			sta 	(zTemp0),y
.9cce	80 0a		bra $9cda			bra 	_ANExit
.9cd0					_ANFloat:
.9cd0	20 dc 9c	jsr $9cdc			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9cd3	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9cd6	a0 04		ldy #$04			ldy 	#4
.9cd8	91 36		sta ($36),y			sta 	(zTemp0),y
.9cda					_ANExit:
.9cda	7a		ply				ply
.9cdb	60		rts				rts
.9cdc					_ANCopy4PackSign:
.9cdc	a0 03		ldy #$03			ldy 	#3
.9cde	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9ce1	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9ce3	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9ce6	91 36		sta ($36),y			sta 	(zTemp0),y
.9ce8	88		dey				dey
.9ce9	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9cec	91 36		sta ($36),y			sta 	(zTemp0),y
.9cee	88		dey				dey
.9cef	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9cf2	91 36		sta ($36),y			sta 	(zTemp0),y
.9cf4	88		dey				dey
.9cf5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9cf8	91 36		sta ($36),y			sta 	(zTemp0),y
.9cfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9cfb					AssignString:
.9cfb	5a		phy				phy
.9cfc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9cff	85 38		sta $38				sta 	zTemp1
.9d01	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9d04	85 39		sta $39				sta 	zTemp1+1
.9d06	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d09	85 36		sta $36				sta 	zTemp0
.9d0b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d0e	85 37		sta $37				sta 	zTemp0+1
.9d10	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9d12	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d14	f0 23		beq $9d39			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9d16	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9d17	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9d19	e9 02		sbc #$02			sbc 	#2
.9d1b	85 3c		sta $3c				sta 	zsTemp
.9d1d	a0 01		ldy #$01			ldy 	#1
.9d1f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d21	e9 00		sbc #$00			sbc 	#0
.9d23	85 3d		sta $3d				sta 	zsTemp+1
.9d25	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9d27					_ASGetLength:
.9d27	c8		iny				iny
.9d28	b1 38		lda ($38),y			lda 	(zTemp1),y
.9d2a	d0 fb		bne $9d27			bne 	_ASGetLength
.9d2c	98		tya				tya 								; is this length <= current length
.9d2d	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9d2f	90 20		bcc $9d51			bcc 	_ASCopyString
.9d31	f0 1e		beq $9d51			beq 	_ASCopyString
.9d33	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9d35	a0 01		ldy #$01			ldy 	#1
.9d37	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9d39					_ASNewStringRequired:
.9d39	e8		inx				inx 								; concrete the new string.
.9d3a	20 a1 b4	jsr $b4a1			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9d3d	ca		dex				dex
.9d3e	18		clc				clc
.9d3f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9d42	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9d44	92 36		sta ($36)			sta 	(zTemp0)
.9d46	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9d49	69 00		adc #$00			adc 	#0
.9d4b	a0 01		ldy #$01			ldy 	#1
.9d4d	91 36		sta ($36),y			sta 	(zTemp0),y
.9d4f	80 0d		bra $9d5e			bra 	_ASExit
.9d51					_ASCopyString:
.9d51	a0 00		ldy #$00			ldy 	#0
.9d53					_ASCopyLoop:
.9d53	b1 38		lda ($38),y			lda 	(zTemp1),y
.9d55	c8		iny				iny
.9d56	c8		iny				iny
.9d57	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9d59	88		dey				dey
.9d5a	c9 00		cmp #$00			cmp 	#0
.9d5c	d0 f5		bne $9d53			bne 	_ASCopyLoop
.9d5e					_ASExit:
.9d5e	7a		ply				ply
.9d5f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9d60					DereferenceTopTwo:
.9d60	e8		inx				inx
.9d61	20 65 9d	jsr $9d65			jsr 	Dereference 				; deref x+1
.9d64	ca		dex				dex  								; falls through to deref x
.9d65					Dereference:
.9d65	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9d68	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9d6a	f0 57		beq $9dc3			beq 	_DRFExit 					; not a reference
.9d6c	5a		phy				phy
.9d6d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9d70	85 36		sta $36				sta 	zTemp0
.9d72	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d75	85 37		sta $37				sta 	zTemp0+1
.9d77	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9d7a	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9d7c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d7f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9d82	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9d84	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9d86	f0 0f		beq $9d97			beq 	_DRFDereferenceTwo
.9d88	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9d8a	f0 39		beq $9dc5			beq 	_DRFFull
.9d8c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9d8f	29 03		and #$03			and 	#3
.9d91	f0 32		beq $9dc5			beq 	_DRFFull 					; the whole word
.9d93	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9d95	f0 07		beq $9d9e			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9d97					_DRFDereferenceTwo:
.9d97	a0 01		ldy #$01			ldy 	#1
.9d99	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d9b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d9e					_DRFClear23:
.9d9e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9da1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9da4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9da7	29 18		and #$18			and 	#NSBTypeMask
.9da9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dac	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9dae	d0 12		bne $9dc2			bne 	_DRFNotString
.9db0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9db3	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9db6	d0 0a		bne $9dc2			bne 	_DRFNotString
.9db8	a9 c4		lda #$c4			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9dba	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9dbd	a9 9d		lda #$9d			lda 	#_DRFNullString >> 8
.9dbf	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9dc2					_DRFNotString
.9dc2	7a		ply				ply 								; restore Y and exit
.9dc3					_DRFExit:
.9dc3	60		rts				rts
.9dc4					_DRFNullString:
>9dc4	00						.byte 	0
.9dc5					_DRFFull:
.9dc5	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9dc7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dcc	c8		iny				iny
.9dcd	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dcf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dd2	c8		iny				iny
.9dd3	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dd5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dd8	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9ddb	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9dde	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9de0	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9de3	f0 06		beq $9deb			beq 	_DRFNoExponent
.9de5	c8		iny				iny 								; if not, read the exponent as well.
.9de6	b1 36		lda ($36),y			lda 	(zTemp0),y
.9de8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9deb					_DRFNoExponent:
.9deb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9dee	10 0d		bpl $9dfd			bpl 	_DRFExit2 					; if not, then exit.
.9df0	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9df2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9df5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9df8	09 80		ora #$80			ora 	#NSBIsNegative
.9dfa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dfd					_DRFExit2:
.9dfd	7a		ply				ply
.9dfe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9dff					EncodeNumberStart:
.9dff	38		sec				sec
.9e00	80 01		bra $9e03			bra 	EncodeNumberContinue+1
.9e02					EncodeNumberContinue:
.9e02	18		clc				clc
.9e03					EncodeNumber:
.9e03	08		php				php 								; save reset.
.9e04	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9e06	f0 12		beq $9e1a			beq 	_ENIsOkay
.9e08	c9 30		cmp #$30			cmp 	#"0"
.9e0a	90 04		bcc $9e10			bcc 	_ENBadNumber
.9e0c	c9 3a		cmp #$3a			cmp 	#"9"+1
.9e0e	90 0a		bcc $9e1a			bcc 	_ENIsOkay
.9e10					_ENBadNumber:
.9e10	28		plp				plp 								; throw saved reset
.9e11	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9e14	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e16	f0 7e		beq $9e96			beq 	_ENConstructFinal
.9e18					_ENFail:
.9e18	18		clc				clc 								; not allowed
.9e19	60		rts				rts
.9e1a					_ENIsOkay:
.9e1a	28		plp				plp 								; are we restarting
.9e1b	90 15		bcc $9e32			bcc 	_ENNoRestart
.9e1d					_ENStartEncode:
.9e1d	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9e1f	f0 0c		beq $9e2d			beq 	_ENFirstDP
.9e21	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9e23	20 01 a4	jsr $a401			jsr 	NSMSetByte
.9e26	a9 01		lda #$01			lda 	#ESTA_Low
.9e28					_ENExitChange:
.9e28	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9e2b	38		sec				sec
.9e2c	60		rts				rts
.9e2d					_ENFirstDP:
.9e2d	20 ff a3	jsr $a3ff			jsr 	NSMSetZero 					; clear integer part
.9e30	80 3f		bra $9e71			bra 	_ESTASwitchFloat			; go straight to float and exi
.9e32					_ENNoRestart:
.9e32	48		pha				pha 								; save on stack.
.9e33	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9e36	c9 01		cmp #$01			cmp 	#ESTA_Low
.9e38	f0 09		beq $9e43			beq  	_ESTALowState
.9e3a	c9 02		cmp #$02			cmp 	#ESTA_High
.9e3c	f0 29		beq $9e67			beq 	_ESTAHighState
.9e3e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e40	f0 3b		beq $9e7d			beq 	_ESTADecimalState
>9e42	db						.byte 	$DB 						; causes a break in the emulator
.9e43					_ESTALowState:
.9e43	68		pla				pla 								; get value back
.9e44	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9e46	f0 29		beq $9e71			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9e48	29 0f		and #$0f			and 	#15 						; make digit
.9e4a	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9e4d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9e50	0a		asl a				asl 	a
.9e51	0a		asl a				asl 	a
.9e52	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9e55	0a		asl a				asl 	a
.9e56	6d 86 04	adc $0486			adc 	DigitTemp
.9e59	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e5c	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9e5e	90 05		bcc $9e65			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9e60	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9e62	8d 85 04	sta $0485			sta 	EncodeState
.9e65					_ESTANoSwitch:
.9e65	38		sec				sec
.9e66	60		rts				rts
.9e67					_ESTAHighState:
.9e67	68		pla				pla 								; get value back
.9e68	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9e6a	f0 05		beq $9e71			beq 	_ESTASwitchFloat
.9e6c	20 d0 9e	jsr $9ed0			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9e6f	38		sec				sec
.9e70	60		rts				rts
.9e71					_ESTASwitchFloat:
.9e71	9c 87 04	stz $0487			stz 	DecimalCount
.9e74	e8		inx				inx 								; zero the decimal additive.
.9e75	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.9e78	ca		dex				dex
.9e79	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9e7b	80 ab		bra $9e28			bra 	_ENExitChange
.9e7d					_ESTADecimalState:
.9e7d	68		pla				pla 								; digit.
.9e7e	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9e80	f0 96		beq $9e18			beq 	_ENFail
.9e82	e8		inx				inx 								; put digit into fractional part of X+1
.9e83	20 d0 9e	jsr $9ed0			jsr 	ESTAShiftDigitIntoMantissa
.9e86	ca		dex				dex
.9e87	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9e8a	ad 87 04	lda $0487			lda 	DecimalCount
.9e8d	c9 0b		cmp #$0b			cmp 	#11
.9e8f	f0 02		beq $9e93			beq 	_ESTADSFail
.9e91	38		sec				sec
.9e92	60		rts				rts
.9e93					_ESTADSFail:
.9e93	4c f2 b1	jmp $b1f2			jmp 	RangeError
.9e96					_ENConstructFinal:
.9e96	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9e99	f0 33		beq $9ece			beq 	_ENCFExit 					; no decimals
.9e9b	5a		phy				phy
.9e9c	0a		asl a				asl 	a 							; x 4 and CLC
.9e9d	0a		asl a				asl 	a
.9e9e	6d 87 04	adc $0487			adc 	DecimalCount
.9ea1	a8		tay				tay
.9ea2	b9 b1 b1	lda $b1b1,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ea5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ea8	b9 b2 b1	lda $b1b2,y			lda 	DecimalScalarTable-5+1,y
.9eab	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9eae	b9 b3 b1	lda $b1b3,y			lda 	DecimalScalarTable-5+2,y
.9eb1	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9eb4	b9 b4 b1	lda $b1b4,y			lda 	DecimalScalarTable-5+3,y
.9eb7	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9eba	b9 b5 b1	lda $b1b5,y			lda 	DecimalScalarTable-5+4,y
.9ebd	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ec0	a9 08		lda #$08			lda 	#NSTFloat
.9ec2	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9ec5	7a		ply				ply
.9ec6	e8		inx				inx 								; multiply decimal const by decimal scalar
.9ec7	20 39 af	jsr $af39			jsr 	FloatMultiply
.9eca	ca		dex				dex
.9ecb	20 ce ad	jsr $adce			jsr 	FloatAdd 					; add to integer part.
.9ece					_ENCFExit:
.9ece	18		clc				clc 								; reject the digit.
.9ecf	60		rts				rts
.9ed0					ESTAShiftDigitIntoMantissa:
.9ed0	29 0f		and #$0f			and 	#15 						; save digit
.9ed2	48		pha				pha
.9ed3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9ed6	48		pha				pha
.9ed7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9eda	48		pha				pha
.9edb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ede	48		pha				pha
.9edf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ee2	48		pha				pha
.9ee3	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; x 2
.9ee6	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; x 4
.9ee9	18		clc				clc 								; pop mantissa and add
.9eea	68		pla				pla
.9eeb	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9eee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ef1	68		pla				pla
.9ef2	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9ef5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ef8	68		pla				pla
.9ef9	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9efc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9eff	68		pla				pla
.9f00	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9f03	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9f06	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; x 10
.9f09	68		pla				pla 								; add digit
.9f0a	18		clc				clc
.9f0b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f0e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f11	90 0d		bcc $9f20			bcc 	_ESTASDExit
.9f13	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9f16	d0 08		bne $9f20			bne 	_ESTASDExit
.9f18	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9f1b	d0 03		bne $9f20			bne 	_ESTASDExit
.9f1d	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9f20					_ESTASDExit:
.9f20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9f21					EvaluateTerm:
.9f21	b1 30		lda ($30),y			lda 	(codePtr),y
.9f23	30 18		bmi $9f3d			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9f25	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9f27	b0 6f		bcs $9f98			bcs 	_ETVariable
.9f29	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9f2b	90 6e		bcc $9f9b			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9f2d	c9 3a		cmp #$3a			cmp 	#'9'+1
.9f2f	b0 6a		bcs $9f9b			bcs 	_ETPuncUnary
.9f31	20 ff 9d	jsr $9dff			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9f34					_ETNumber:
.9f34	c8		iny				iny 								; keep encoding until we have the numbers
.9f35	b1 30		lda ($30),y			lda 	(codePtr),y
.9f37	20 02 9e	jsr $9e02			jsr 	EncodeNumberContinue
.9f3a	b0 f8		bcs $9f34			bcs 	_ETNumber 					; go back if accepted.
.9f3c	60		rts				rts
.9f3d					_ETCheckUnary:
.9f3d	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9f3f	f0 41		beq $9f82			beq 	_ETString
.9f41	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9f43	f0 12		beq $9f57			beq 	_ETHexConstant
.9f45	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9f47	90 0b		bcc $9f54			bcc 	_ETSyntaxError
.9f49	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9f4b	b0 07		bcs $9f54			bcs 	_ETSyntaxError
.9f4d	da		phx				phx 								; push X on the stack
.9f4e	0a		asl a				asl 	a 							; put vector x 2 into X
.9f4f	aa		tax				tax
.9f50	c8		iny				iny 								; consume unary function token
.9f51	7c e6 94	jmp ($94e6,x)			jmp 	(VectorSet0,x) 				; and do it.
.9f54					_ETSyntaxError:
.9f54	4c ed b1	jmp $b1ed			jmp 	SyntaxError
.9f57					_ETHexConstant:
.9f57	c8		iny				iny 								; skip #
.9f58	c8		iny				iny 								; skip count
.9f59	20 ff a3	jsr $a3ff			jsr 	NSMSetZero 					; clear result
.9f5c					_ETHLoop:
.9f5c	b1 30		lda ($30),y			lda 	(codePtr),y
.9f5e	c8		iny				iny 								; and consume
.9f5f	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9f61	f0 1e		beq $9f81			beq 	_ETHExit
.9f63	48		pha				pha 								; save on stack.
.9f64	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; x 2
.9f67	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; x 4
.9f6a	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; x 8
.9f6d	20 14 a4	jsr $a414			jsr 	NSMShiftLeft 				; x 16
.9f70	68		pla				pla 								; ASCII
.9f71	c9 41		cmp #$41			cmp 	#'A'
.9f73	90 02		bcc $9f77			bcc 	_ETHNotChar
.9f75	e9 07		sbc #$07			sbc 	#7
.9f77					_ETHNotChar:
.9f77	29 0f		and #$0f			and 	#15 						; digit now
.9f79	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9f7c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f7f	80 db		bra $9f5c			bra 	_ETHLoop 					; go round.
.9f81					_ETHExit:
.9f81	60		rts				rts
.9f82					_ETString:
.9f82	c8		iny				iny 								; look at length
.9f83	b1 30		lda ($30),y			lda 	(codePtr),y
.9f85	48		pha				pha
.9f86	c8		iny				iny 								; first character
.9f87	20 49 a4	jsr $a449			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9f8a	68		pla				pla 								; restore count and save
.9f8b	85 36		sta $36				sta 	zTemp0
.9f8d	98		tya				tya 								; add length to Y to skip it.
.9f8e	18		clc				clc
.9f8f	65 36		adc $36				adc 	zTemp0
.9f91	a8		tay				tay
.9f92	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9f94	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f97	60		rts				rts
.9f98					_ETVariable:
.9f98	4c f2 9f	jmp $9ff2			jmp 	VariableHandler
.9f9b					_ETPuncUnary:
.9f9b	c8		iny				iny 								; consume the unary character
.9f9c	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9f9e	f0 2d		beq $9fcd			beq 	_ETUnaryNegate
.9fa0	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9fa2	f0 39		beq $9fdd			beq 	_ETDereference
.9fa4	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9fa6	f0 43		beq $9feb			beq 	_ETParenthesis
.9fa8	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9faa	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9fac	f0 06		beq $9fb4			beq 	_ETIndirection
.9fae	e6 36		inc $36				inc 	zTemp0
.9fb0	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9fb2	d0 a0		bne $9f54			bne 	_ETSyntaxError
.9fb4					_ETIndirection:
.9fb4	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9fb6	1a		inc a				inc 	a
.9fb7	48		pha				pha
.9fb8	20 21 9f	jsr $9f21			jsr 	EvaluateTerm				; evaluate the term
.9fbb	20 65 9d	jsr $9d65			jsr 	Dereference 				; dereference it.
.9fbe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9fc1	d0 07		bne $9fca			bne 	_ETTypeMismatch
.9fc3	68		pla				pla 								; indirection 1-2
.9fc4	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9fc6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fc9	60		rts				rts
.9fca					_ETTypeMismatch:
.9fca	4c f7 b1	jmp $b1f7			jmp 	TypeError
.9fcd					_ETUnaryNegate:
.9fcd	20 21 9f	jsr $9f21			jsr 	EvaluateTerm				; evaluate the term
.9fd0	20 65 9d	jsr $9d65			jsr 	Dereference 				; dereference it.
.9fd3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9fd6	29 10		and #$10			and 	#NSTString
.9fd8	d0 f0		bne $9fca			bne 	_ETTypeMismatch
.9fda	4c ab a3	jmp $a3ab			jmp 	NSMNegate  					; just toggles the sign bit.
.9fdd					_ETDereference:
.9fdd	20 21 9f	jsr $9f21			jsr 	EvaluateTerm				; evaluate the term
.9fe0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9fe3	29 20		and #$20			and 	#NSBIsReference
.9fe5	f0 e3		beq $9fca			beq 	_ETTypeMismatch
.9fe7	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9fea	60		rts				rts
.9feb					_ETParenthesis:
.9feb	20 50 9c	jsr $9c50			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9fee	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 			; check for )
.9ff1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9ff2					VariableHandler:
.9ff2	b1 30		lda ($30),y			lda 	(codePtr),y
.9ff4	18		clc				clc
.9ff5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9ff7	85 37		sta $37				sta 	zTemp0+1
.9ff9	c8		iny				iny
.9ffa	b1 30		lda ($30),y			lda 	(codePtr),y
.9ffc	85 36		sta $36				sta 	zTemp0
.9ffe	c8		iny				iny
.9fff	18		clc				clc									; copy variable address+3 to mantissa
.a000	69 03		adc #$03			adc 	#3
.a002	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a005	a5 37		lda $37				lda 	zTemp0+1
.a007	69 00		adc #$00			adc 	#0
.a009	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a00c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a00f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a012	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a015	5a		phy				phy
.a016	a0 02		ldy #$02			ldy 	#2 							; read type
.a018	b1 36		lda ($36),y			lda 	(zTemp0),y
.a01a	7a		ply				ply
.a01b	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a01d	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a01f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a022	29 04		and #$04			and 	#NSBIsArray
.a024	d0 01		bne $a027			bne 	_VHArray
.a026	60		rts				rts
.a027					_VHArray:
.a027	e8		inx				inx
.a028	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a02b	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a02d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a030	b1 30		lda ($30),y			lda 	(codePtr),y
.a032	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a034	d0 06		bne $a03c			bne 	_VHNoSecondIndex
.a036	c8		iny				iny 								; skip the comma
.a037	e8		inx				inx
.a038	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a03b	ca		dex				dex
.a03c					_VHNoSecondIndex:
.a03c	ca		dex				dex 								; set X back.
.a03d	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 			; and check the right bracket.
.a040	5a		phy				phy 								; save position
.a041	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a044	85 3e		sta $3e				sta 	zaTemp
.a046	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a049	85 3f		sta $3f				sta 	zaTemp+1
.a04b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a04d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a04f	f0 02		beq $a053			beq 	_VHHas2Mask
.a051	a9 ff		lda #$ff			lda 	#$FF
.a053					_VHHas2Mask:
.a053	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a056	f0 54		beq $a0ac			beq 	_VHBadIndex
.a058	0a		asl a				asl 	a 							; carry will be set if a second index
.a059	90 09		bcc $a064			bcc 	_VHCheckFirstIndex
.a05b	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a05d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a05f	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a062	90 48		bcc $a0ac			bcc 	_VHBadIndex
.a064					_VHCheckFirstIndex:
.a064	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a066	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a068	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a06b	90 3f		bcc $a0ac			bcc 	_VHBadIndex
.a06d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a06f	64 37		stz $37				stz 	zTemp0+1
.a071	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a074	30 0f		bmi $a085			bmi 	_VHNoMultiply
.a076	da		phx				phx
.a077	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a07a	48		pha				pha
.a07b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a07d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a07f	1a		inc a				inc 	a 							; add 1 for zero base
.a080	fa		plx				plx
.a081	20 89 b0	jsr $b089			jsr 	Multiply8x8 				; calculate -> Z0
.a084	fa		plx				plx
.a085					_VHNoMultiply:
.a085	18		clc				clc
.a086	a5 36		lda $36				lda 	zTemp0
.a088	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a08b	85 36		sta $36				sta 	zTemp0
.a08d	a5 37		lda $37				lda 	zTemp0+1
.a08f	69 00		adc #$00			adc 	#0
.a091	85 37		sta $37				sta 	zTemp0+1
.a093	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a096	20 9e 8d	jsr $8d9e			jsr 	ScaleByBaseType
.a099	18		clc				clc
.a09a	b2 3e		lda ($3e)			lda 	(zaTemp)
.a09c	65 36		adc $36				adc 	zTemp0
.a09e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0a1	a0 01		ldy #$01			ldy 	#1
.a0a3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0a5	65 37		adc $37				adc 	zTemp0+1
.a0a7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0aa	7a		ply				ply 								; restore position
.a0ab	60		rts				rts
.a0ac					_VHBadIndex:
.a0ac	a9 17		lda #$17		lda	#23
.a0ae	4c 47 98	jmp $9847		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.afbf					AbsUnary:
.afbf	fa		plx				plx 								; restore stack pos
.afc0	20 53 a3	jsr $a353			jsr 	EvaluateNumber 				; get a float or int
.afc3	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.afc6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.afc9	29 7f		and #$7f			and 	#$7F
.afcb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.afce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a0b1					AllocUnary:
.a0b1	fa		plx				plx 								; restore stack pos
.a0b2	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger		; get bytes required.
.a0b5	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.a0b8	da		phx				phx 								; save X/Y
.a0b9	5a		phy				phy
.a0ba	8a		txa				txa 								; copy X into Y
.a0bb	a8		tay				tay
.a0bc	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a0bf	aa		tax				tax
.a0c0	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a0c3	20 d0 a0	jsr $a0d0			jsr 	AllocateXABytes 			; allocate memory
.a0c6	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a0c9	8a		txa				txa
.a0ca	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a0cd	7a		ply				ply
.a0ce	fa		plx				plx
.a0cf	60		rts				rts
.a0d0					AllocateXABytes:
.a0d0	5a		phy				phy
.a0d1	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a0d4	84 36		sty $36				sty 	zTemp0
.a0d6	5a		phy				phy
.a0d7	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a0da	84 37		sty $37				sty 	zTemp0+1
.a0dc	5a		phy				phy
.a0dd	18		clc				clc 								; add to low memory pointer
.a0de	6d 8c 04	adc $048c			adc 	lowMemPtr
.a0e1	8d 8c 04	sta $048c			sta 	lowMemPtr
.a0e4	8a		txa				txa
.a0e5	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a0e8	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a0eb	b0 2f		bcs $a11c			bcs 	CISSMemory
.a0ed	20 0e a1	jsr $a10e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a0f0					_ClearMemory:
.a0f0	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a0f3	c5 36		cmp $36				cmp 	zTemp0
.a0f5	d0 07		bne $a0fe			bne 	_CMClearNext
.a0f7	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a0fa	c5 37		cmp $37				cmp 	zTemp0+1
.a0fc	f0 0c		beq $a10a			beq 	_CMExit
.a0fe					_CMClearNext:
.a0fe	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a100	92 36		sta ($36)			sta 	(zTemp0)
.a102	e6 36		inc $36				inc 	zTemp0
.a104	d0 ea		bne $a0f0			bne 	_ClearMemory
.a106	e6 37		inc $37				inc		zTemp0+1
.a108	80 e6		bra $a0f0			bra 	_ClearMemory
.a10a					_CMExit:
.a10a	fa		plx				plx
.a10b	68		pla				pla
.a10c	7a		ply				ply
.a10d	60		rts				rts
.a10e					CheckIdentifierStringSpace:
.a10e	48		pha				pha
.a10f	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a112	18		clc				clc
.a113	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a115	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a118	b0 02		bcs $a11c			bcs 	CISSMemory
.a11a	68		pla				pla
.a11b	60		rts				rts
.a11c					CISSMemory:
.a11c	a9 06		lda #$06		lda	#6
.a11e	4c 47 98	jmp $9847		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.afcf					AscUnary:
.afcf	fa		plx				plx 								; restore stack pos
.afd0	20 5e a3	jsr $a35e			jsr 	EvaluateString 				; get a string
.afd3	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.afd5	20 01 a4	jsr $a401			jsr 	NSMSetByte
.afd8	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.afdb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.afdc					FracUnary:
.afdc	fa		plx				plx 								; restore stack pos
.afdd	20 53 a3	jsr $a353			jsr 	EvaluateNumber 				; get a float or int
.afe0	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.afe3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.afe6	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.afe8	f0 04		beq $afee			beq 	_IUZero
.afea	20 ac ae	jsr $aeac			jsr 	FloatFractionalPart
.afed	60		rts				rts
.afee					_IUZero:
.afee	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.aff1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.aff2					IntUnary:
.aff2	fa		plx				plx 								; restore stack pos
.aff3	20 53 a3	jsr $a353			jsr 	EvaluateNumber 				; get a float or int
.aff6	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.aff9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.affc	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.affe	f0 03		beq $b003			beq 	_IUExit
.b000	20 0f af	jsr $af0f			jsr 	FloatIntegerPart
.b003					_IUExit:
.b003	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b004					LenUnary:
.b004	fa		plx				plx 								; restore stack pos
.b005	20 5e a3	jsr $a35e			jsr 	EvaluateString 				; get a string
.b008	5a		phy				phy
.b009	a0 00		ldy #$00			ldy 	#0 							; find length
.b00b					_LenFind:
.b00b	b1 36		lda ($36),y			lda 	(zTemp0),y
.b00d	f0 06		beq $b015			beq 	_LenExit
.b00f	c8		iny				iny
.b010	d0 f9		bne $b00b			bne 	_LenFind
.b012	4c f2 b1	jmp $b1f2			jmp 	RangeError 					; string > 255
.b015					_LenExit:
.b015	98		tya				tya
.b016	20 01 a4	jsr $a401			jsr 	NSMSetByte
.b019	7a		ply				ply
.b01a	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.b01d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a121					Unary_Not:
.a121	fa		plx				plx
.a122	20 76 a3	jsr $a376			jsr 	EvaluateInteger 			; get integer
.a125	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.a128	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; zero mantissa ?
.a12b	f0 04		beq $a131			beq 	_NotZero
.a12d	20 ff a3	jsr $a3ff			jsr 	NSMSetZero
.a130	60		rts				rts
.a131					_NotZero:
.a131	4c b4 98	jmp $98b4			jmp 	ReturnTrue
.a134					_UNBad:
.a134	4c fc b1	jmp $b1fc			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a137					Unary_Random:
.a137	fa		plx				plx
.a138	20 b0 a1	jsr $a1b0			jsr 	Random32Bit 				; get a random number
.a13b	20 95 a1	jsr $a195			jsr 	URCopyToMantissa  			; put in mantissa
.a13e	e8		inx				inx
.a13f	20 8b a3	jsr $a38b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a142	ca		dex				dex
.a143	20 8b ac	jsr $ac8b			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a146	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a149	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a14c	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.a14f	60		rts				rts
.a150					Unary_Rnd:
.a150	fa		plx				plx
.a151	20 53 a3	jsr $a353			jsr 	EvaluateNumber 				; number to use.
.a154	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 			; closing bracket
.a157	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a15a	f0 2b		beq $a187			beq 	_URCopySeed
.a15c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a15f	10 23		bpl $a184			bpl 	_URDontSeed
.a161	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a164	49 17		eor #$17			eor 	#$17
.a166	8d 88 04	sta $0488			sta 	RandomSeed+0
.a169	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a16c	49 a5		eor #$a5			eor 	#$A5
.a16e	8d 89 04	sta $0489			sta 	RandomSeed+1
.a171	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a174	49 c2		eor #$c2			eor 	#$C2
.a176	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a179	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a17c	49 9d		eor #$9d			eor 	#$9D
.a17e	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a181	20 b0 a1	jsr $a1b0			jsr 	Random32Bit
.a184					_URDontSeed:
.a184	20 b0 a1	jsr $a1b0			jsr 	Random32Bit 				; generate a number.
.a187					_URCopySeed:
.a187	20 95 a1	jsr $a195			jsr 	URCopyToMantissa 			; copy into mantissa
.a18a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a18c	8d 28 04	sta $0428			sta 	NSExponent
.a18f	a9 08		lda #$08			lda 	#NSTFloat
.a191	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a194	60		rts				rts
.a195					URCopyToMantissa:
.a195	ad 88 04	lda $0488			lda 	RandomSeed+0
.a198	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a19b	ad 89 04	lda $0489			lda 	RandomSeed+1
.a19e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1a1	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a1a4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a1a7	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a1aa	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.a1ac	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a1af	60		rts				rts
.a1b0					Random32Bit:
.a1b0	5a		phy				phy
.a1b1	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a1b3	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a1b6	d0 03		bne $a1bb			bne 	_Random1
.a1b8	a8		tay				tay 								; if so do it 256 times
.a1b9	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a1bb					_Random1:
.a1bb	0a		asl a				asl 	a 							; LSFR RNG
.a1bc	2e 89 04	rol $0489			rol 	RandomSeed+1
.a1bf	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a1c2	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a1c5	90 02		bcc $a1c9			bcc 	_Random2
.a1c7	49 c5		eor #$c5			eor 	#$C5
.a1c9					_Random2:
.a1c9	88		dey				dey
.a1ca	d0 ef		bne $a1bb			bne 	_Random1
.a1cc	8d 88 04	sta $0488			sta 	RandomSeed+0
.a1cf	7a		ply				ply
.a1d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b01e					SgnUnary:
.b01e	fa		plx				plx 								; restore stack pos
.b01f	20 53 a3	jsr $a353			jsr 	EvaluateNumber 				; get a float or int
.b022	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.b025	20 2f a4	jsr $a42f			jsr 	NSMIsZero 					; if zero
.b028	f0 10		beq $b03a			beq 	_SGZero  					; return Int Zero
.b02a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b02d	48		pha				pha
.b02e	a9 01		lda #$01			lda 	#1 							; set to 1
.b030	20 01 a4	jsr $a401			jsr 	NSMSetByte
.b033	68		pla				pla
.b034	29 80		and #$80			and		#$80 						; copy the sign byte out
.b036	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b039	60		rts				rts
.b03a	20 ff a3	jsr $a3ff	_SGZero:jsr 	NSMSetZero
.b03d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b03e					ValUnary:
.b03e	fa		plx				plx 								; restore stack pos
.b03f	20 54 b0	jsr $b054			jsr 	ValMainCode 				; do the main val() code
.b042	b0 01		bcs $b045			bcs 	_VUError 					; couldn't convert
.b044	60		rts				rts
.b045					_VUError:
.b045	4c f7 b1	jmp $b1f7			jmp 	TypeError
.b048					IsValUnary:
.b048	fa		plx				plx 								; restore stack pos
.b049	20 54 b0	jsr $b054			jsr 	ValMainCode 				; do the main val() code
.b04c	b0 03		bcs $b051			bcs 	_VUBad
.b04e	4c b4 98	jmp $98b4			jmp 	ReturnTrue
.b051					_VUBad:
.b051	4c c0 98	jmp $98c0			jmp 	ReturnFalse
.b054					ValMainCode:
.b054	20 5e a3	jsr $a35e			jsr 	EvaluateString 				; get a string
.b057	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 			; check right bracket present
.b05a	5a		phy				phy
.b05b	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b05d	f0 17		beq $b076			beq 	_VMCFail2
.b05f	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b061	48		pha				pha 								; save first character
.b062	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b064	d0 01		bne $b067			bne 	_VMCStart
.b066	c8		iny				iny 								; skip over -
.b067					_VMCStart:
.b067	38		sec				sec 								; initialise first time round.
.b068					_VMCNext:
.b068	c8		iny				iny 								; pre-increment
.b069	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b06b	f0 0c		beq $b079			beq 	_VMCSuccess 				; successful.
.b06d	20 03 9e	jsr $9e03			jsr 	EncodeNumber 				; send it to the number-builder
.b070	90 03		bcc $b075			bcc 	_VMCFail 					; if failed, give up.
.b072	18		clc				clc 								; next time round, countinue
.b073	80 f3		bra $b068			bra 	_VMCNext
.b075					_VMCFail:
.b075	68		pla				pla
.b076					_VMCFail2:
.b076	7a		ply				ply
.b077	38		sec				sec
.b078	60		rts				rts
.b079					_VMCSuccess:
.b079	a9 00		lda #$00			lda 	#0 							; construct final
.b07b	20 03 9e	jsr $9e03			jsr 	EncodeNumber
.b07e	68		pla				pla
.b07f	c9 2d		cmp #$2d			cmp 	#"-"
.b081	d0 03		bne $b086			bne 	_VMCNotNegative
.b083	20 ab a3	jsr $a3ab			jsr		NSMNegate
.b086					_VMCNotNegative:
.b086	7a		ply				ply
.b087	18		clc				clc
.b088	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a1d1					ChrUnary:
.a1d1	fa		plx				plx 								; restore stack pos
.a1d2	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger			; get value
.a1d5	48		pha				pha
.a1d6	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.a1d9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a1db	20 22 b5	jsr $b522			jsr 	StringTempAllocate
.a1de	68		pla				pla 								; write number to it
.a1df	20 60 b5	jsr $b560			jsr 	StringTempWrite
.a1e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a1e3					SpcUnary:
.a1e3	fa		plx				plx 								; restore stack pos
.a1e4	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger			; get value
.a1e7	5a		phy				phy
.a1e8	48		pha				pha 								; save count
.a1e9	20 22 b5	jsr $b522			jsr 	StringTempAllocate
.a1ec	7a		ply				ply 								; to do count in Y
.a1ed					_SpcLoop:
.a1ed	c0 00		cpy #$00			cpy 	#0
.a1ef	f0 08		beq $a1f9			beq 	_SpcExit
.a1f1	a9 20		lda #$20			lda 	#32
.a1f3	20 60 b5	jsr $b560			jsr 	StringTempWrite
.a1f6	88		dey				dey
.a1f7	80 f4		bra $a1ed			bra 	_SPCLoop
.a1f9					_SpcExit:
.a1f9	7a		ply				ply
.a1fa	20 07 ac	jsr $ac07			jsr 	CheckRightBracket
.a1fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a1fe					Unary_Str:
.a1fe	fa		plx				plx
.a1ff	20 53 a3	jsr $a353			jsr 	EvaluateNumber  			; get number
.a202	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 			; closing bracket
.a205	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a207	20 20 a2	jsr $a220			jsr 	ConvertNumberToString 		; do the conversion.
.a20a	a9 21		lda #$21			lda		#33 						; create buffer
.a20c	20 22 b5	jsr $b522			jsr 	StringTempAllocate 			; allocate memory
.a20f	da		phx				phx
.a210	a2 00		ldx #$00			ldx 	#0
.a212					_USCopy:
.a212	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a215	20 60 b5	jsr $b560			jsr 	StringTempWrite
.a218	e8		inx				inx
.a219	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a21c	d0 f4		bne $a212			bne 	_USCopy
.a21e	fa		plx				plx
.a21f	60		rts				rts
.a220					ConvertNumberToString:
.a220	5a		phy				phy 								; save code position
.a221	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a224	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a227	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a22a	10 0a		bpl $a236			bpl 	_CNTSNotNegative
.a22c	29 7f		and #$7f			and 	#$7F 						; make +ve
.a22e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a231	a9 2d		lda #$2d			lda 	#"-"
.a233	20 9c a2	jsr $a29c			jsr 	WriteDecimalBuffer
.a236					_CNTSNotNegative:
.a236	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a239	f0 15		beq $a250			beq 	_CNTSNotFloat
.a23b	e8		inx				inx 								; round up
.a23c	a9 01		lda #$01			lda 	#1
.a23e	20 01 a4	jsr $a401			jsr 	NSMSetByte
.a241	ca		dex				dex
.a242	bd 28 04	lda $0428,x			lda		NSExponent,x
.a245	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a248	a9 08		lda #$08			lda 	#NSTFloat
.a24a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a24d	20 ce ad	jsr $adce			jsr 	FloatAdd
.a250					_CNTSNotFloat:
.a250	20 7e a2	jsr $a27e			jsr 	MakePlusTwoString
.a253	20 ac ae	jsr $aeac			jsr 	FloatFractionalPart 		; get the fractional part
.a256	20 70 af	jsr $af70			jsr 	NSNormalise					; normalise , exit if zero
.a259	f0 21		beq $a27c			beq 	_CNTSExit
.a25b	a9 2e		lda #$2e			lda 	#"."
.a25d	20 9c a2	jsr $a29c			jsr 	WriteDecimalBuffer 			; write decimal place
.a260					_CNTSDecimal:
.a260	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a263	30 17		bmi $a27c			bmi 	_CNTSExit
.a265	e8		inx				inx 								; x 10.0
.a266	a9 0a		lda #$0a			lda 	#10
.a268	20 01 a4	jsr $a401			jsr 	NSMSetByte
.a26b	a9 08		lda #$08			lda 	#NSTFloat
.a26d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a270	ca		dex				dex
.a271	20 39 af	jsr $af39			jsr 	FloatMultiply
.a274	20 7e a2	jsr $a27e			jsr 	MakePlusTwoString
.a277	20 ac ae	jsr $aeac			jsr 	FloatFractionalPart 		; get the fractional part
.a27a	80 e4		bra $a260			bra 	_CNTSDecimal 				; keep going.
.a27c					_CNTSExit:
.a27c	7a		ply				ply
.a27d	60		rts				rts
.a27e					MakePlusTwoString:
.a27e	da		phx				phx
.a27f	20 d6 a3	jsr $a3d6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a282	e8		inx				inx 								; access it
.a283	e8		inx				inx
.a284	20 0f af	jsr $af0f			jsr 	FloatIntegerPart 			; make it an integer
.a287	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a289	20 78 ad	jsr $ad78			jsr 	ConvertInt32
.a28c	a2 00		ldx #$00			ldx	 	#0
.a28e					_MPTSCopy:
.a28e	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a291	20 9c a2	jsr $a29c			jsr 	WriteDecimalBuffer
.a294	e8		inx				inx
.a295	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a298	d0 f4		bne $a28e			bne 	_MPTSCopy
.a29a	fa		plx				plx
.a29b	60		rts				rts
.a29c					WriteDecimalBuffer:
.a29c	da		phx				phx
.a29d	ae 95 04	ldx $0495			ldx 	dbOffset
.a2a0	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a2a3	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a2a6	ee 95 04	inc $0495			inc 	dbOffset
.a2a9	fa		plx				plx
.a2aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a2ab					Unary_Left:
.a2ab	fa		plx				plx
.a2ac	18		clc				clc 								; only one parameter
.a2ad	20 22 a3	jsr $a322			jsr 	SubstringInitial 			; set up.
.a2b0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a2b3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a2b6	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a2b9	80 2c		bra $a2e7			bra 	SubstringMain
.a2bb					Unary_Right:
.a2bb	fa		plx				plx
.a2bc	18		clc				clc 								; only one parameter
.a2bd	20 22 a3	jsr $a322			jsr 	SubstringInitial 			; set up.
.a2c0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a2c3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a2c6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a2c9	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a2cc	b0 02		bcs $a2d0			bcs 	_URNotUnderflow
.a2ce	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a2d0					_URNotUnderFlow:
.a2d0	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a2d3	80 12		bra $a2e7			bra 	SubStringMain
.a2d5					Unary_Mid:
.a2d5	fa		plx				plx
.a2d6	38		sec				sec 								; two parameters
.a2d7	20 22 a3	jsr $a322			jsr 	SubstringInitial 			; set up.
.a2da	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a2dd	f0 05		beq $a2e4			beq 	_UMError
.a2df	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a2e2	80 03		bra $a2e7			bra 	SubStringMain
.a2e4					_UMError:
.a2e4	4c fc b1	jmp $b1fc			jmp 	ArgumentError
.a2e7					SubStringMain:
.a2e7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a2ea	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a2ed	b0 2d		bcs $a31c			bcs 	_SSMNull 					; if so, return an empty string.
.a2ef	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a2f2	f0 28		beq $a31c			beq 	_SSMNull 					; return empty string.
.a2f4	18		clc				clc 								; add the offset +1 to the address and
.a2f5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a2f8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a2fb	85 36		sta $36				sta 	zTemp0
.a2fd	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a300	69 00		adc #$00			adc 	#0
.a302	85 37		sta $37				sta 	zTemp0+1
.a304					_SSMNoCarry:
.a304	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a307	20 22 b5	jsr $b522			jsr 	StringTempAllocate 			; allocate that many characters
.a30a	5a		phy				phy 								; save Y
.a30b	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a30d					_SSMCopy:
.a30d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a30f	f0 09		beq $a31a			beq 	_SSMEString 				; no more to copy
.a311	20 60 b5	jsr $b560			jsr 	StringTempWrite 			; and write it out.
.a314	c8		iny				iny
.a315	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a318	d0 f3		bne $a30d			bne 	_SSMCopy
.a31a					_SSMEString:
.a31a	7a		ply				ply
.a31b					_SSMExit:
.a31b	60		rts				rts
.a31c					_SSMNull:
.a31c	a9 00		lda #$00			lda 	#0
.a31e	20 22 b5	jsr $b522			jsr 	StringTempAllocate
.a321	60		rts				rts
.a322					SubstringInitial:
.a322	da		phx				phx 								; save initial stack position
.a323	08		php				php 								; save carry on stack indicating 2 parameters
.a324	20 5e a3	jsr $a35e			jsr 	EvaluateString 				; get a string
.a327	5a		phy				phy 								; calculate length to exponent.
.a328	a0 ff		ldy #$ff			ldy 	#$FF
.a32a					_SIFindLength:
.a32a	c8		iny				iny
.a32b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a32d	d0 fb		bne $a32a			bne 	_SIFindLength
.a32f	98		tya				tya
.a330	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a333	7a		ply				ply
.a334	e8		inx				inx
.a335	20 0f ac	jsr $ac0f			jsr 	CheckComma 					; comma next
.a338	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; get next parameter
.a33b	28		plp				plp 								; is it the last parameter ?
.a33c	90 07		bcc $a345			bcc 	_SSIExit 					; if so, exit.
.a33e	e8		inx				inx
.a33f	20 0f ac	jsr $ac0f			jsr 	CheckComma 					; comma next
.a342	20 97 a3	jsr $a397			jsr 	Evaluate8BitInteger 		; get last parameter
.a345					_SSIExit:
.a345	fa		plx				plx
.a346	20 07 ac	jsr $ac07			jsr 	CheckRightBracket 			; check closing bracket
.a349	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a34a					EvaluateValue:
.a34a	48		pha				pha
.a34b	20 50 9c	jsr $9c50			jsr		EvaluateExpression 			; expression
.a34e	20 65 9d	jsr $9d65			jsr 	Dereference					; derefernce it
.a351	68		pla				pla
.a352	60		rts				rts
.a353					EvaluateNumber:
.a353	20 4a a3	jsr $a34a			jsr 	EvaluateValue 				; get a value
.a356	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a359	29 10		and #$10			and 	#NSBIsString
.a35b	d0 16		bne $a373			bne 	HelperTypeError
.a35d	60		rts				rts
.a35e					EvaluateString:
.a35e	20 4a a3	jsr $a34a			jsr 	EvaluateValue 				; get a value
.a361	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a364	29 10		and #$10			and 	#NSBIsString
.a366	f0 0b		beq $a373			beq 	HelperTypeError
.a368					CopyAddressToTemp0:
.a368	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a36b	85 36		sta $36				sta 	zTemp0
.a36d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a370	85 37		sta $37				sta 	zTemp0+1
.a372	60		rts				rts
.a373					HelperTypeError:
.a373	4c f7 b1	jmp $b1f7			jmp 	TypeError
.a376					EvaluateInteger:
.a376	20 53 a3	jsr $a353			jsr 	EvaluateNumber
.a379	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a37c	d0 0a		bne $a388			bne 	HelperValueError 			; if not, it's a float.
.a37e	60		rts				rts
.a37f					EvaluateUnsignedInteger:
.a37f	20 76 a3	jsr $a376			jsr 	EvaluateInteger 			; check integer is +ve
.a382	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a385	30 01		bmi $a388			bmi 	HelperValueError
.a387	60		rts				rts
.a388					HelperValueError:
.a388	4c fc b1	jmp $b1fc			jmp 	ArgumentError
.a38b					Evaluate16BitInteger:
.a38b	20 7f a3	jsr $a37f			jsr	 	EvaluateUnsignedInteger		; get integer
.a38e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a391	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a394	d0 f2		bne $a388			bne 	HelperValueError
.a396	60		rts				rts
.a397					Evaluate8BitInteger:
.a397	20 7f a3	jsr $a37f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a39a	d0 ec		bne $a388			bne 	HelperValueError
.a39c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a39f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a3a2	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a3a5	d0 e1		bne $a388			bne 	HelperValueError
.a3a7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b089					Multiply8x8:
.b089	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b08a	85 36		sta $36			  	sta 	zTemp0
.b08c	86 37		stx $37				stx 	zTemp0+1
.b08e	a9 00		lda #$00			lda 	#0
.b090	a2 08		ldx #$08			ldx 	#8
.b092					_M88Loop:
.b092	90 03		bcc $b097			bcc 	_M88NoAdd
.b094	18		clc				clc
.b095	65 37		adc $37				adc 	zTemp0+1
.b097					_M88NoAdd:
.b097	6a		ror a				ror 	a
.b098	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b09a	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b09b	d0 f5		bne $b092			bne 	_M88Loop
.b09d	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b09f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a3ab					NSMNegate:
.a3ab	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a3ae	49 80		eor #$80			eor 	#NSBIsNegative
.a3b0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3b3	60		rts				rts
.a3b4					NSMNegateMantissa:
.a3b4	38		sec				sec
.a3b5	a9 00		lda #$00			lda 	#0
.a3b7	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a3ba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3bd	a9 00		lda #$00			lda 	#0
.a3bf	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a3c2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3c5	a9 00		lda #$00			lda 	#0
.a3c7	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a3ca	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3cd	a9 00		lda #$00			lda 	#0
.a3cf	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a3d2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a3d5	60		rts				rts
.a3d6					NSMShiftUpTwo:
.a3d6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3d9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a3dc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3df	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a3e2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3e5	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a3e8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a3eb	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a3ee	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a3f1	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a3f4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a3f7	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a3fa	60		rts				rts
.a3fb					NSMSetZeroMantissaOnly:
.a3fb	a9 00		lda #$00			lda 	#0
.a3fd	80 08		bra $a407			bra 	NSMSetMantissa
.a3ff					NSMSetZero:
.a3ff	a9 00		lda #$00			lda 	#0
.a401					NSMSetByte:
.a401	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a404	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a407					NSMSetMantissa:
.a407	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a40a	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a40d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a410	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a413	60		rts				rts
.a414					NSMShiftLeft:
.a414	18		clc				clc
.a415					NSMRotateLeft:
.a415	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a418	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a41b	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a41e	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a421	60		rts				rts
.a422					NSMShiftRight:
.a422	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a425	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a428	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a42b	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a42e	60		rts				rts
.a42f					NSMIsZero:
.a42f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a432	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a435	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a438	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a43b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b0a0					Assemble_ora:
.b0a0	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0a3	01					.byte $01
.b0a4					Assemble_and:
.b0a4	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0a7	21					.byte $21
.b0a8					Assemble_eor:
.b0a8	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0ab	41					.byte $41
.b0ac					Assemble_adc:
.b0ac	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0af	61					.byte $61
.b0b0					Assemble_sta:
.b0b0	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0b3	81					.byte $81
.b0b4					Assemble_lda:
.b0b4	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0b7	a1					.byte $a1
.b0b8					Assemble_cmp:
.b0b8	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0bb	c1					.byte $c1
.b0bc					Assemble_sbc:
.b0bc	20 9d 89	jsr $899d		jsr	AssembleGroup1
>b0bf	e1					.byte $e1
.b0c0					Assemble_asl:
.b0c0	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0c3	02					.byte $02
>b0c4	75					.byte $75
.b0c5					Assemble_rol:
.b0c5	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0c8	22					.byte $22
>b0c9	75					.byte $75
.b0ca					Assemble_lsr:
.b0ca	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0cd	42					.byte $42
>b0ce	75					.byte $75
.b0cf					Assemble_ror:
.b0cf	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0d2	62					.byte $62
>b0d3	75					.byte $75
.b0d4					Assemble_stx:
.b0d4	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0d7	82					.byte $82
>b0d8	50					.byte $50
.b0d9					Assemble_ldx:
.b0d9	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0dc	a2					.byte $a2
>b0dd	d0					.byte $d0
.b0de					Assemble_dec:
.b0de	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0e1	c2					.byte $c2
>b0e2	55					.byte $55
.b0e3					Assemble_inc:
.b0e3	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0e6	e2					.byte $e2
>b0e7	55					.byte $55
.b0e8					Assemble_stz:
.b0e8	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0eb	60					.byte $60
>b0ec	44					.byte $44
.b0ed					Assemble_bit:
.b0ed	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0f0	20					.byte $20
>b0f1	55					.byte $55
.b0f2					Assemble_sty:
.b0f2	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0f5	80					.byte $80
>b0f6	54					.byte $54
.b0f7					Assemble_ldy:
.b0f7	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0fa	a0					.byte $a0
>b0fb	d5					.byte $d5
.b0fc					Assemble_cpy:
.b0fc	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b0ff	c0					.byte $c0
>b100	d4					.byte $d4
.b101					Assemble_cpx:
.b101	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b104	e0					.byte $e0
>b105	d0					.byte $d0
.b106					Assemble_tsb:
.b106	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b109	00					.byte $00
>b10a	50					.byte $50
.b10b					Assemble_trb:
.b10b	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b10e	10					.byte $10
>b10f	50					.byte $50
.b110					Assemble_jsr:
.b110	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b113	14					.byte $14
>b114	10					.byte $10
.b115					Assemble_jmp:
.b115	20 a4 89	jsr $89a4		jsr	AssembleGroup2
>b118	40					.byte $40
>b119	10					.byte $10
.b11a					Assemble_bpl:
.b11a	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b11d	10					.byte $10
.b11e					Assemble_bmi:
.b11e	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b121	30					.byte $30
.b122					Assemble_bvc:
.b122	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b125	50					.byte $50
.b126					Assemble_bvs:
.b126	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b129	70					.byte $70
.b12a					Assemble_bcc:
.b12a	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b12d	90					.byte $90
.b12e					Assemble_bcs:
.b12e	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b131	b0					.byte $b0
.b132					Assemble_bne:
.b132	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b135	d0					.byte $d0
.b136					Assemble_beq:
.b136	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b139	f0					.byte $f0
.b13a					Assemble_bra:
.b13a	20 f5 89	jsr $89f5		jsr	AssembleGroup3
>b13d	80					.byte $80
.b13e					Assemble_brk:
.b13e	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b141	00					.byte $00
.b142					Assemble_php:
.b142	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b145	08					.byte $08
.b146					Assemble_clc:
.b146	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b149	18					.byte $18
.b14a					Assemble_plp:
.b14a	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b14d	28					.byte $28
.b14e					Assemble_sec:
.b14e	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b151	38					.byte $38
.b152					Assemble_rti:
.b152	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b155	40					.byte $40
.b156					Assemble_pha:
.b156	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b159	48					.byte $48
.b15a					Assemble_cli:
.b15a	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b15d	58					.byte $58
.b15e					Assemble_phy:
.b15e	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b161	5a					.byte $5a
.b162					Assemble_rts:
.b162	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b165	60					.byte $60
.b166					Assemble_pla:
.b166	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b169	68					.byte $68
.b16a					Assemble_sei:
.b16a	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b16d	78					.byte $78
.b16e					Assemble_ply:
.b16e	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b171	7a					.byte $7a
.b172					Assemble_dey:
.b172	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b175	88					.byte $88
.b176					Assemble_txa:
.b176	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b179	8a					.byte $8a
.b17a					Assemble_tya:
.b17a	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b17d	98					.byte $98
.b17e					Assemble_txs:
.b17e	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b181	9a					.byte $9a
.b182					Assemble_tay:
.b182	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b185	a8					.byte $a8
.b186					Assemble_tax:
.b186	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b189	aa					.byte $aa
.b18a					Assemble_clv:
.b18a	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b18d	b8					.byte $b8
.b18e					Assemble_tsx:
.b18e	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b191	ba					.byte $ba
.b192					Assemble_iny:
.b192	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b195	c8					.byte $c8
.b196					Assemble_dex:
.b196	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b199	ca					.byte $ca
.b19a					Assemble_cld:
.b19a	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b19d	d8					.byte $d8
.b19e					Assemble_phx:
.b19e	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b1a1	da					.byte $da
.b1a2					Assemble_stp:
.b1a2	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b1a5	db					.byte $db
.b1a6					Assemble_inx:
.b1a6	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b1a9	e8					.byte $e8
.b1aa					Assemble_nop:
.b1aa	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b1ad	ea					.byte $ea
.b1ae					Assemble_sed:
.b1ae	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b1b1	f8					.byte $f8
.b1b2					Assemble_plx:
.b1b2	20 2b 8a	jsr $8a2b		jsr	AssembleGroup4
>b1b5	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b1b6					DecimalScalarTable:
>b1b6	66 66 66 66				.dword $66666666 ; 0.1
>b1ba	de					.byte $de
>b1bb	1f 85 eb 51				.dword $51eb851f ; 0.01
>b1bf	db					.byte $db
>b1c0	4c 37 89 41				.dword $4189374c ; 0.001
>b1c4	d8					.byte $d8
>b1c5	ac 8b db 68				.dword $68db8bac ; 0.0001
>b1c9	d4					.byte $d4
>b1ca	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b1ce	d1					.byte $d1
>b1cf	83 de 1b 43				.dword $431bde83 ; 1e-06
>b1d3	ce					.byte $ce
>b1d4	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b1d8	ca					.byte $ca
>b1d9	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b1dd	c7					.byte $c7
>b1de	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b1e2	c4					.byte $c4
>b1e3	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b1e7	c0					.byte $c0
>b1e8	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b1ec	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b1ed					SyntaxError:
.b1ed	a9 02		lda #$02		lda	#2
.b1ef	4c 47 98	jmp $9847		jmp	ErrorHandler
.b1f2					RangeError:
.b1f2	a9 04		lda #$04		lda	#4
.b1f4	4c 47 98	jmp $9847		jmp	ErrorHandler
.b1f7					TypeError:
.b1f7	a9 05		lda #$05		lda	#5
.b1f9	4c 47 98	jmp $9847		jmp	ErrorHandler
.b1fc					ArgumentError:
.b1fc	a9 07		lda #$07		lda	#7
.b1fe	4c 47 98	jmp $9847		jmp	ErrorHandler
.b201					NotDoneError:
.b201	a9 0c		lda #$0c		lda	#12
.b203	4c 47 98	jmp $9847		jmp	ErrorHandler
.b206					ErrorText:
>b206	42 72 65 61 6b 00			.text	"Break",0
>b20c	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b214	72 72 6f 72 00
>b219	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b221	20 62 79 20 7a 65 72 6f 00
>b22a	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b232	61 6e 67 65 00
>b237	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b23f	6d 61 74 63 68 00
>b245	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b24d	65 6d 6f 72 79 00
>b253	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b25b	61 72 67 75 6d 65 6e 74 00
>b264	53 74 6f 70 00				.text	"Stop",0
>b269	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b271	6f 6f 20 6c 6f 6e 67 00
>b279	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b281	6e 20 66 61 69 6c 65 64 00
>b28a	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b292	61 74 61 00
>b296	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b29e	65 6e 74 65 64 00
>b2a4	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b2ac	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b2b8	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b2c0	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b2cd	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b2d5	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b2e2	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b2ea	68 6f 75 74 20 57 68 69 6c 65 00
>b2f5	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b2fd	68 6f 75 74 20 46 6f 72 00
>b306	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b30e	61 63 6b 20 66 75 6c 6c 00
>b317	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b31f	75 63 74 75 72 65 00
>b326	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b32e	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b33b	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b343	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b351	41 72 72 61 79 20 73 69			.text	"Array size",0
>b359	7a 65 00
>b35c	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b364	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b36c	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1785."
>b374	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>b384	30 32 32 2e 20 42 75 69 6c 64 20 31 37 38 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b394					EXTInitialise:
.b394	64 01		stz $01				stz 	1
.b396	9c 04 d0	stz $d004			stz 	$D004
.b399	9c 08 d0	stz $d008			stz 	$D008
.b39c	9c 09 d0	stz $d009			stz 	$D009
.b39f	60		rts				rts
.b3a0					EXTPrintCharacter:
.b3a0	48		pha				pha
.b3a1	da		phx				phx
.b3a2	5a		phy				phy
.b3a3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b3a6	7a		ply				ply
.b3a7	fa		plx				plx
.b3a8	68		pla				pla
.b3a9	60		rts				rts
.b3aa					EXTInputSingleCharacter:
.b3aa	da		phx				phx
.b3ab	5a		phy				phy
.b3ac					_EISCWait:
.b3ac	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b3af	c9 00		cmp #$00			cmp 	#0
.b3b1	f0 f9		beq $b3ac			beq 	_EISCWait
.b3b3	7a		ply				ply
.b3b4	fa		plx				plx
.b3b5	60		rts				rts
.b3b6					EXTInputLine:
.b3b6	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b3b8					_ILLoop:
.b3b8	da		phx				phx 								; read character in
.b3b9	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b3bc	fa		plx				plx
.b3bd	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b3bf	f0 12		beq $b3d3			beq 	_ILBackspace
.b3c1	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b3c3	f0 15		beq $b3da			beq 	_ILExit
.b3c5	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b3c7	90 ef		bcc $b3b8			bcc 	_ILLoop
.b3c9	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b3cb	f0 eb		beq $b3b8			beq 	_ILLoop
.b3cd	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b3d0	e8		inx				inx
.b3d1	80 e5		bra $b3b8			bra 	_ILLoop
.b3d3					_ILBackspace:
.b3d3	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b3d5	f0 e1		beq $b3b8			beq 	_ILLoop
.b3d7	ca		dex				dex 								; back one.
.b3d8	80 de		bra $b3b8			bra 	_ILLoop
.b3da					_ILExit:
.b3da	20 a0 b3	jsr $b3a0			jsr 	EXTPrintCharacter
.b3dd	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b3e0	60		rts				rts
.b3e1					EXTBreakCheck:
.b3e1	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b3e4					MemoryDeleteLine:
.b3e4	20 03 b4	jsr $b403			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b3e7	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b3e9	a8		tay				tay
.b3ea					_MDDLLoop:
.b3ea	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b3ec	92 30		sta ($30)			sta 	(codePtr)
.b3ee	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b3f0	c5 3a		cmp $3a				cmp 	zTemp2
.b3f2	d0 07		bne $b3fb			bne 	_MDLDLNext
.b3f4	a5 31		lda $31				lda 	codePtr+1
.b3f6	c5 3b		cmp $3b				cmp 	zTemp2+1
.b3f8	d0 01		bne $b3fb			bne 	_MDLDLNext
.b3fa					_MDDLExit:
.b3fa	60		rts				rts
.b3fb					_MDLDLNext:
.b3fb	e6 30		inc $30				inc 	codePtr						; next byte
.b3fd	d0 eb		bne $b3ea			bne 	_MDDLLoop
.b3ff	e6 31		inc $31				inc 	codePtr+1
.b401	80 e7		bra $b3ea			bra 	_MDDLLoop
.b403					IMemoryFindEnd:
.b403	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b405	85 3a		sta $3a				sta 	0+zTemp2
.b407	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b409	85 3b		sta $3b				sta 	1+zTemp2
.b40b					_MDLFELoop:
.b40b	b2 3a		lda ($3a)			lda 	(zTemp2)
.b40d	f0 0b		beq $b41a			beq 	_MDLFEExit
.b40f	18		clc				clc
.b410	65 3a		adc $3a				adc 	zTemp2
.b412	85 3a		sta $3a				sta 	zTemp2
.b414	90 f5		bcc $b40b			bcc 	_MDLFELoop
.b416	e6 3b		inc $3b				inc 	zTemp2+1
.b418	80 f1		bra $b40b			bra 	_MDLFELoop
.b41a					_MDLFEExit:
.b41a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b41b					MemoryInsertLine:
.b41b	08		php				php
.b41c	20 03 b4	jsr $b403			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b41f	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b421	1a		inc a				inc 	a
.b422	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b424	b0 36		bcs $b45c			bcs 	_MDLIError
.b426	28		plp				plp
.b427	90 08		bcc $b431			bcc 	_MDLIFound
.b429	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b42b	85 30		sta $30				sta 	codePtr
.b42d	a5 3b		lda $3b				lda 	zTemp2+1
.b42f	85 31		sta $31				sta 	codePtr+1
.b431					_MDLIFound:
.b431	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b434	a8		tay				tay
.b435					_MDLIInsert:
.b435	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b437	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b439	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b43b	c5 3a		cmp $3a				cmp 	zTemp2
.b43d	d0 06		bne $b445			bne 	_MDLINext
.b43f	a5 31		lda $31				lda 	codePtr+1
.b441	c5 3b		cmp $3b				cmp 	zTemp2+1
.b443	f0 0a		beq $b44f			beq 	_MDLIHaveSpace
.b445					_MDLINext:
.b445	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b447	d0 02		bne $b44b			bne 	_MDLINoBorrow
.b449	c6 3b		dec $3b				dec 	zTemp2+1
.b44b					_MDLINoBorrow:
.b44b	c6 3a		dec $3a				dec 	zTemp2
.b44d	80 e6		bra $b435			bra 	_MDLIInsert
.b44f					_MDLIHaveSpace:
.b44f	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b452	88		dey				dey 								; from offset-1 to 0
.b453					_MDLICopy:
.b453	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b456	91 30		sta ($30),y			sta 	(codePtr),y
.b458	88		dey				dey
.b459	10 f8		bpl $b453			bpl 	_MDLICopy
.b45b	60		rts				rts
.b45c					_MDLIError:
.b45c	a9 06		lda #$06		lda	#6
.b45e	4c 47 98	jmp $9847		jmp	ErrorHandler
.b461					MDLAppendLine:
.b461	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b463	85 36		sta $36				sta 	zTemp0
.b465	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b467	85 38		sta $38				sta 	0+zTemp1
.b469	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b46b	85 39		sta $39				sta 	1+zTemp1
.b46d	b2 38		lda ($38)			lda 	(zTemp1)
.b46f	d0 0a		bne $b47b			bne 	_MDLANoInitialise
.b471	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b473	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b476	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b478	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b47b					_MDLANoInitialise:
.b47b	18		clc				clc
.b47c	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b47f	85 38		sta $38				sta 	zTemp1
.b481	72 36		adc ($36)			adc 	(zTemp0)
.b483	8d 6b 06	sta $066b			sta 	AppendPointer
.b486	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b489	85 39		sta $39				sta 	zTemp1+1
.b48b	69 00		adc #$00			adc 	#0
.b48d	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b490	a0 00		ldy #$00			ldy 	#0
.b492					_MDLACopy:
.b492	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b494	91 38		sta ($38),y			sta 	(zTemp1),y
.b496	c8		iny				iny
.b497	98		tya				tya
.b498	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b49a	d0 f6		bne $b492			bne 	_MDLACopy
.b49c	a9 00		lda #$00			lda 	#0 							; end of program.
.b49e	91 38		sta ($38),y			sta 	(zTemp1),y
.b4a0	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a43c					MemoryNew:
.a43c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a43e	85 30		sta $30				sta 	codePtr
.a440	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a442	85 31		sta $31				sta 	codePtr+1
.a444	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a446	92 30		sta ($30)			sta 	(codePtr)
.a448	60		rts				rts
.a449					MemoryInline:
.a449	98		tya				tya 								; put address into stack,x
.a44a	18		clc				clc
.a44b	65 30		adc $30				adc 	codePtr
.a44d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a450	a5 31		lda $31				lda 	codePtr+1
.a452	69 00		adc #$00			adc 	#0
.a454	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a457	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a45a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a45d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a45e					MemorySearch:
.a45e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a460	86 37		stx $37				stx 	zTemp0+1
.a462	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a464	85 30		sta $30				sta 	codePtr
.a466	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a468	85 31		sta $31				sta 	codePtr+1
.a46a					_MTAXLoop:
.a46a	b2 30		lda ($30)			lda 	(codePtr)
.a46c	18		clc				clc
.a46d	f0 21		beq $a490			beq 	_MTAXExit 					; reached end, exit with CC.
.a46f	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a471	b1 30		lda ($30),y			lda 	(codePtr),y
.a473	38		sec				sec
.a474	e5 36		sbc $36				sbc 	zTemp0
.a476	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a478	c8		iny				iny 								; do the MSB
.a479	b1 30		lda ($30),y			lda 	(codePtr),y
.a47b	e5 37		sbc $37				sbc 	zTemp0+1
.a47d	05 38		ora $38				ora 	zTemp1
.a47f	f0 0f		beq $a490			beq 	_MTAXExit	 				; found
.a481	b0 0d		bcs $a490			bcs 	_MTAXExit 					; current < required exit
.a483	18		clc				clc
.a484	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a486	65 30		adc $30				adc 	codePtr
.a488	85 30		sta $30				sta 	codePtr
.a48a	90 02		bcc $a48e			bcc 	_CREExit
.a48c	e6 31		inc $31				inc 	codePtr+1
.a48e					_CREExit:
.a48e	80 da		bra $a46a			bra 	_MTAXLoop
.a490					_MTAXExit:
.a490	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a491					StackPushByte:
.a491	48		pha				pha 								; save byte
.a492	a5 34		lda $34				lda 	BasicStack
.a494	d0 09		bne $a49f			bne 	_SPBNoBorrow
.a496	c6 35		dec $35				dec 	BasicStack+1
.a498	48		pha				pha
.a499	a5 35		lda $35				lda 	BasicStack+1
.a49b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a49d	90 06		bcc $a4a5			bcc 	_SPBMemory
.a49f					_SPBNoBorrow:
.a49f	c6 34		dec $34				dec 	BasicStack
.a4a1	68		pla				pla 								; get back and write
.a4a2	92 34		sta ($34)			sta 	(BasicStack)
.a4a4	60		rts				rts
.a4a5					_SPBMemory:
.a4a5	a9 12		lda #$12		lda	#18
.a4a7	4c 47 98	jmp $9847		jmp	ErrorHandler
.a4aa					StackPopByte:
.a4aa	b2 34		lda ($34)			lda 	(BasicStack)
.a4ac	e6 34		inc $34				inc 	BasicStack
.a4ae	d0 02		bne $a4b2			bne 	_SPBNoCarry
.a4b0	e6 35		inc $35				inc 	BasicStack+1
.a4b2					_SPBNoCarry:
.a4b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a4b3					StackOpen:
.a4b3	48		pha				pha 								; save frame byte
.a4b4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a4b6	0a		asl a				asl 	a 							; claim twice this for storage
.a4b7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a4b9	38		sec				sec 								; so basically subtracting from
.a4ba	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a4bc	85 34		sta $34				sta 	basicStack
.a4be	b0 08		bcs $a4c8			bcs 	_SONoBorrow
.a4c0	c6 35		dec $35				dec 	basicStack+1
.a4c2	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a4c4	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a4c6	90 04		bcc $a4cc			bcc 	_SOMemory
.a4c8					_SONoBorrow:
.a4c8	68		pla				pla 								; get marker back and write at TOS
.a4c9	92 34		sta ($34)			sta 	(basicStack)
.a4cb	60		rts				rts
.a4cc					_SOMemory:
.a4cc	a9 12		lda #$12		lda	#18
.a4ce	4c 47 98	jmp $9847		jmp	ErrorHandler
.a4d1					StackClose:
.a4d1	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a4d3	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a4d5	0a		asl a				asl 	a 							; claim twice this.
.a4d6	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a4d8	85 34		sta $34				sta 	basicStack
.a4da	90 02		bcc $a4de			bcc 	_SCExit
.a4dc	e6 35		inc $35				inc 	basicStack+1
.a4de					_SCExit:
.a4de	60		rts				rts
.a4df					StackCheckFrame:
.a4df	48		pha				pha
.a4e0					_StackRemoveLocals:
.a4e0	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a4e2	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a4e4	b0 05		bcs $a4eb			bcs 	_SCNoLocal
.a4e6	20 ae ab	jsr $abae			jsr 	LocalPopValue
.a4e9	80 f5		bra $a4e0			bra 	_StackRemoveLocals
.a4eb					_SCNoLocal:
.a4eb	68		pla				pla
.a4ec	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a4ee	29 f0		and #$f0			and 	#$F0 						; check type bits
.a4f0	d0 01		bne $a4f3			bne 	_SCFError 					; different, we have structures mixed up
.a4f2	60		rts				rts
.a4f3					_SCFError:
.a4f3	8a		txa				txa 								; report error X
.a4f4	4c 47 98	jmp $9847			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a4f7					STKSaveCodePosition:
.a4f7	5a		phy				phy
.a4f8	98		tya				tya 								; save Y
.a4f9	a0 05		ldy #$05			ldy 	#5
.a4fb	91 34		sta ($34),y			sta 	(basicStack),y
.a4fd	88		dey				dey 								; save Code Pointer
.a4fe					_STKSaveLoop:
.a4fe	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a501	91 34		sta ($34),y			sta 	(basicStack),y
.a503	88		dey				dey
.a504	d0 f8		bne $a4fe			bne 	_STKSaveLoop
.a506	7a		ply				ply
.a507	60		rts				rts
.a508					STKLoadCodePosition:
.a508	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a50a					_STKLoadLoop:
.a50a	b1 34		lda ($34),y			lda 	(basicStack),y
.a50c	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a50f	c8		iny				iny
.a510	c0 05		cpy #$05			cpy 	#5
.a512	d0 f6		bne $a50a			bne 	_STKLoadLoop
.a514	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a516	a8		tay				tay
.a517	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a518					StackReset:
.a518	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a51a	85 34		sta $34				sta 	0+basicStack
.a51c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a51e	85 35		sta $35				sta 	1+basicStack
.a520	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a522	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a524	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b4a1					StringConcrete:
.b4a1	5a		phy				phy 								; save position on stack
.b4a2	20 0e a1	jsr $a10e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b4a5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b4a8	85 38		sta $38				sta 	zTemp1
.b4aa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b4ad	85 39		sta $39				sta 	zTemp1+1
.b4af	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b4b1					_SALength:
.b4b1	c8		iny				iny
.b4b2	b1 38		lda ($38),y			lda 	(zTemp1),y
.b4b4	d0 fb		bne $b4b1			bne 	_SALength
.b4b6	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b4b8	b0 3f		bcs $b4f9			bcs 	_SALengthError
.b4ba	98		tya				tya 				 				; length of the new string
.b4bb	18		clc				clc
.b4bc	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b4be	90 02		bcc $b4c2			bcc 	_SAHaveLength
.b4c0	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b4c2					_SAHaveLength:
.b4c2	48		pha				pha 								; save length.
.b4c3	38		sec				sec
.b4c4	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b4c6	6d 8e 04	adc $048e			adc 	StringMemory
.b4c9	8d 8e 04	sta $048e			sta 	StringMemory
.b4cc	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b4ce	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b4d1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b4d3	6d 8f 04	adc $048f			adc 	StringMemory+1
.b4d6	8d 8f 04	sta $048f			sta 	StringMemory+1
.b4d9	85 3b		sta $3b				sta 	zTemp2+1
.b4db	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b4de	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b4df	38		sec				sec
.b4e0	e9 03		sbc #$03			sbc 	#3
.b4e2	92 3a		sta ($3a)			sta 	(zTemp2)
.b4e4	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b4e6	a0 01		ldy #$01			ldy 	#1
.b4e8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b4ea					_SACopyNewString:
.b4ea	a0 00		ldy #$00			ldy 	#0
.b4ec					_SACopyNSLoop:
.b4ec	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b4ee	c8		iny				iny 								; write two on in string storage
.b4ef	c8		iny				iny
.b4f0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b4f2	88		dey				dey 								; this makes it one one.
.b4f3	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b4f5	d0 f5		bne $b4ec			bne 	_SACopyNSLoop
.b4f7	7a		ply				ply
.b4f8	60		rts				rts
.b4f9					_SALengthError:
.b4f9	a9 09		lda #$09		lda	#9
.b4fb	4c 47 98	jmp $9847		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b4fe					StringSystemInitialise:
.b4fe	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b500	8d 8e 04	sta $048e			sta 	0+StringMemory
.b503	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b505	8d 8f 04	sta $048f			sta 	1+StringMemory
.b508	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b50b	60		rts				rts
.b50c					StringSpaceInitialise:
.b50c	20 0e a1	jsr $a10e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b50f	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b511	8d 90 04	sta $0490			sta 	StringInitialised
.b514	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b517	8d 91 04	sta $0491			sta 	StringTempPointer
.b51a	ad 8f 04	lda $048f			lda 	StringMemory+1
.b51d	3a		dec a				dec 	a
.b51e	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b521	60		rts				rts
.b522					StringTempAllocate:
.b522	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b524	b0 35		bcs $b55b			bcs 	_STALength
.b526	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b529	30 05		bmi $b530			bmi 	_STAAllocate
.b52b	48		pha				pha 								; save value to subtract.
.b52c	20 0c b5	jsr $b50c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b52f	68		pla				pla 								; restore it
.b530					_STAAllocate:
.b530	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b532	18		clc				clc  								; deliberate allows one more
.b533	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b536	8d 91 04	sta $0491			sta 	StringTempPointer
.b539	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b53c	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b53e	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b541	69 ff		adc #$ff			adc 	#$FF
.b543	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b546	85 3d		sta $3d				sta 	zsTemp+1
.b548	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b54b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b54e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b551	a9 10		lda #$10			lda 	#NSTString
.b553	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b556	a9 00		lda #$00			lda 	#0 							; clear the target string
.b558	92 3c		sta ($3c)			sta 	(zsTemp)
.b55a	60		rts				rts
.b55b					_STALength:
.b55b	a9 09		lda #$09		lda	#9
.b55d	4c 47 98	jmp $9847		jmp	ErrorHandler
.b560					StringTempWrite:
.b560	48		pha				pha
.b561	92 3c		sta ($3c)			sta 	(zsTemp)
.b563	e6 3c		inc $3c				inc 	zsTemp
.b565	d0 02		bne $b569			bne 	_STWNoCarry
.b567	e6 3d		inc $3d				inc 	zsTemp+1
.b569					_STWNoCarry:
.b569	a9 00		lda #$00			lda 	#0
.b56b	92 3c		sta ($3c)			sta 	(zsTemp)
.b56d	68		pla				pla
.b56e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a525					BackloadProgram:
.a525	a2 ff		ldx #$ff			ldx 	#$FF
.a527	20 4f a5	jsr $a54f			jsr 	BLReadByte
.a52a	30 1f		bmi $a54b			bmi 	_BPExit
.a52c					_BPCopy:
.a52c	e8		inx				inx  								; copy byte in
.a52d	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a530	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a533	20 4f a5	jsr $a54f			jsr 	BLReadByte 					; read next byte
.a536	30 0a		bmi $a542			bmi 	_BPEndLine 					; -ve = EOL
.a538	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a53a	d0 02		bne $a53e			bne 	_BPNotTab
.a53c	a9 20		lda #$20			lda 	#' '
.a53e					_BPNotTab:
.a53e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a540	b0 ea		bcs $a52c			bcs 	_BPCopy
.a542					_BPEndLine:
.a542	20 ff a8	jsr $a8ff			jsr 	TokeniseLine 				; tokenise the line.
.a545	38		sec				sec 								; append not insert
.a546	20 1b b4	jsr $b41b			jsr 	MemoryInsertLine 			; append to current program
.a549	80 da		bra $a525			bra 	BackloadProgram
.a54b					_BPExit:
.a54b	20 a3 8c	jsr $8ca3			jsr 	ClearCommand 				; clear variables etc.
.a54e	60		rts				rts
.a54f					BLReadByte:
.a54f					_BLLoad:
.a54f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a552	ee 50 a5	inc $a550			inc 	_BLLoad+1
.a555	d0 03		bne $a55a			bne 	_BLNoCarry
.a557	ee 51 a5	inc $a551			inc 	_BLLoad+2
.a55a					_BLNoCarry:
.a55a	c9 00		cmp #$00			cmp 	#0
.a55c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a55d					TokeniseSearchTable:
.a55d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a55f	85 36		sta $36				sta 	zTemp0
.a561	a0 00		ldy #$00			ldy 	#0
.a563	a9 80		lda #$80			lda 	#$80 						; token #
.a565	85 38		sta $38				sta 	zTemp1
.a567					_TSTLoop:
.a567	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a569	30 49		bmi $a5b4			bmi 	_TSTFail 					; -ve = end of table
.a56b	f0 2e		beq $a59b			beq 	_TSTNext 					; zero, check next it's a dummy
.a56d	c8		iny				iny 								; get the hash
.a56e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a570	88		dey				dey
.a571	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a574	d0 25		bne $a59b			bne 	_TSTNext
.a576	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a579	38		sec				sec
.a57a	ed 80 04	sbc $0480			sbc 	identStart
.a57d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a57f	d0 1a		bne $a59b			bne 	_TSTNext
.a581	5a		phy				phy 								; save Y , we might fail
.a582	c8		iny				iny 								; point to text
.a583	c8		iny				iny
.a584	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a587					_TSTCompareName:
.a587	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a58a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a58c	d0 0c		bne $a59a			bne 	_TSTNextPullY 				; fail, pullY and do next
.a58e	e8		inx				inx
.a58f	c8		iny				iny
.a590	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a593	d0 f2		bne $a587			bne 	_TSTCompareName
.a595	7a		ply				ply 								; throw Y
.a596	a5 38		lda $38				lda 	zTemp1 						; get token #
.a598	38		sec				sec 								; return with CS = passed.
.a599	60		rts				rts
.a59a					_TSTNextPullY:
.a59a	7a		ply				ply 								; restore current, fall through.
.a59b					_TSTNext:
.a59b	e6 38		inc $38				inc 	zTemp1 						; token counter
.a59d	98		tya				tya
.a59e	18		clc				clc
.a59f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a5a1	1a		inc a				inc 	a 							; +1
.a5a2	1a		inc a				inc 	a 							; +2
.a5a3	a8		tay				tay
.a5a4	10 c1		bpl $a567			bpl 	_TSTLoop 					; if Y < $80 loop back
.a5a6	98		tya				tya 								; add Y to zTemp0 and reset Y
.a5a7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a5a9	18		clc				clc  								; but have tables > 255 bytes
.a5aa	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a5ac	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a5ae	90 b7		bcc $a567			bcc 	_TSTLoop
.a5b0	e6 37		inc $37				inc 	zTemp0+1
.a5b2	80 b3		bra $a567			bra 	_TSTLoop
.a5b4					_TSTFail:
.a5b4	18		clc				clc
.a5b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a5b6					KeywordSet0:
>a5b6	00 65					.text	0,$65,""               ; $80 !0:EOF
>a5b8	00 58					.text	0,$58,""               ; $81 !1:SH1
>a5ba	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a5bc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a5c2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a5ca	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a5d0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a5d7	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a5df	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a5e6	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a5ed	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a5f3	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a5fb	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a603	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a609	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a610	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a616	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a61b	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a61f	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a627	28
>a628	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a630	28
>a631	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a637	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a63d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a643	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a64a	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a652	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a658	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a65e	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a663	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a667	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a66d	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a675	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a67c	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a683	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a68b	43
>a68c	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a692	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a698	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a69f	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a6a5	02 9b 42 59				.text	2,$9b,"BY"             ; $a6 BY
>a6a9	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a7 CALL
>a6af	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a8 CIRCLE
>a6b7	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $a9 CLEAR
>a6be	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $aa CLS
>a6c3	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ab COLOR
>a6ca	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ac COLOUR
>a6d2	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ad DATA
>a6d8	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ae DIM
>a6dd	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $af DOWNTO
>a6e5	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b0 ELSE
>a6eb	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b1 FROM
>a6f1	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b2 GFX
>a6f6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b3 GOSUB
>a6fd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b4 GOTO
>a703	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b5 HERE
>a709	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $b6 IMAGE
>a710	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b7 LET
>a715	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b8 LINE
>a71b	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b9 LOCAL
>a722	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ba OUTLINE
>a72a	45
>a72b	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $bb PRINT
>a732	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $bc READ
>a738	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $bd RECT
>a73e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $be REM
>a743	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bf RETURN
>a74b	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c0 SOLID
>a752	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c1 SPRITE
>a75a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c2 TEXT
>a760	02 a3 54 4f				.text	2,$a3,"TO"             ; $c3 TO
>a764	ff					.text	$FF
.a765					KeywordSet1:
>a765	00 65					.text	0,$65,""               ; $80 !0:EOF
>a767	00 58					.text	0,$58,""               ; $81 !1:SH1
>a769	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a76b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a773	4c 45
>a775	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a77d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a785	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a78a	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a790	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a795	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a79d	45
>a79e	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a7a3	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a7ab	53
>a7ac	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a7b2	ff					.text	$FF
.a7b3					KeywordSet2:
>a7b3	00 65					.text	0,$65,""               ; $80 !0:EOF
>a7b5	00 58					.text	0,$58,""               ; $81 !1:SH1
>a7b7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a7b9	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a7be	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a7c3	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a7c8	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a7cd	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a7d2	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a7d7	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a7dc	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a7e1	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a7e6	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a7eb	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a7f0	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a7f5	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a7fa	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a7ff	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a804	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a809	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a80e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a813	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a818	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a81d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a822	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a827	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a82c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a831	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a836	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a83b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a840	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a845	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a84a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a84f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a854	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a859	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a85e	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a863	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a868	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a86d	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a872	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a877	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a87c	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a881	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a886	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a88b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a890	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a895	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a89a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a89f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a8a4	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a8a9	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a8ae	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a8b3	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a8b8	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a8bd	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a8c2	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a8c7	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a8cc	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a8d1	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a8d6	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a8db	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a8e0	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a8e5	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a8ea	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a8ef	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a8f4	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a8f9	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a8fe	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a8ff					TokeniseLine:
.a8ff	20 87 aa	jsr $aa87			jsr 	FixLineBufferCase 			; fix line case
.a902	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a904	8d a6 04	sta $04a6			sta 	tokenOffset
.a907	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a90a	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a90d	a2 ff		ldx #$ff			ldx 	#$FF
.a90f					_TKFindFirst:
.a90f	e8		inx				inx
.a910	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a913	f0 79		beq $a98e			beq 	_TKExit
.a915	c9 20		cmp #$20			cmp 	#' '
.a917	90 f6		bcc $a90f			bcc 	_TKFindFirst
.a919	c9 30		cmp #$30			cmp 	#'0'
.a91b	90 07		bcc $a924			bcc 	_TKNoLineNumber
.a91d	c9 3a		cmp #$3a			cmp 	#'9'+1
.a91f	b0 03		bcs $a924			bcs 	_TKNoLineNumber
.a921	20 b1 aa	jsr $aab1			jsr 	TokeniseExtractLineNumber
.a924					_TKNoLineNumber:
.a924					_TKTokeniseLoop:
.a924	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a927	f0 65		beq $a98e			beq 	_TKExit
.a929	e8		inx				inx
.a92a	c9 20		cmp #$20			cmp 	#' '
.a92c	f0 f6		beq $a924			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a92e	ca		dex				dex 								; undo last get, A contains character, X is position.
.a92f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a931	f0 61		beq $a994			beq 	_TKTokeniseIdentifier
.a933	c9 41		cmp #$41			cmp 	#'A'
.a935	90 04		bcc $a93b			bcc 	_TKTokenisePunctuation
.a937	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a939	90 59		bcc $a994			bcc 	_TKTokeniseIdentifier
.a93b					_TKTokenisePunctuation:
.a93b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a93d	f0 27		beq $a966			beq 	_TKString
.a93f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a941	f0 28		beq $a96b			beq 	_TKHexConstant
.a943	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a945	f0 29		beq $a970			beq 	_TKCheckDouble
.a947	c9 3e		cmp #$3e			cmp 	#'>'
.a949	f0 25		beq $a970			beq 	_TKCheckDouble
.a94b					_TKStandardPunctuation:
.a94b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a94e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a950	90 0e		bcc $a960			bcc 	_TKNoShift
.a952	48		pha				pha 								; save
.a953	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a955	85 36		sta $36				sta 	zTemp0
.a957	68		pla				pla
.a958	29 20		and #$20			and 	#32 						; bit 5
.a95a	4a		lsr a				lsr 	a 							; shift into bit 3
.a95b	4a		lsr a				lsr 	a
.a95c	05 36		ora $36				ora 	zTemp0
.a95e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a960					_TKNoShift:
.a960	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte 			; write the punctuation character
.a963	e8		inx				inx 								; consume the character
.a964	80 be		bra $a924			bra 	_TKTokeniseLoop 			; and loop round again.
.a966					_TKString:
.a966	20 16 aa	jsr $aa16			jsr 	TokeniseString
.a969	80 b9		bra $a924			bra 	_TKTokeniseLoop
.a96b					_TKHexConstant:
.a96b	20 51 aa	jsr $aa51			jsr 	TokeniseHexConstant
.a96e	80 b4		bra $a924			bra 	_TKTokeniseLoop
.a970					_TKCheckDouble:
.a970	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a973	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a975	90 d4		bcc $a94b			bcc 	_TKStandardPunctuation
.a977	c9 3f		cmp #$3f			cmp 	#'>'+1
.a979	b0 d0		bcs $a94b			bcs 	_TKStandardPunctuation
.a97b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a97e	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a980	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a981	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a984	38		sec				sec
.a985	e9 3c		sbc #$3c			sbc 	#'<'
.a987	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a98a	e8		inx				inx 								; consume both
.a98b	e8		inx				inx
.a98c	80 96		bra $a924			bra 	_TKTokeniseLoop
.a98e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a990	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.a993	60		rts				rts
.a994					_TKTokeniseIdentifier:
.a994	8e 80 04	stx $0480			stx 	identStart 					; save start
.a997	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a99a					_TKCheckLoop:
.a99a	e8		inx				inx 								; look at next, we know first is identifier.
.a99b	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a99e	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a9a0	f0 f8		beq $a99a			beq 	_TKCheckLoop
.a9a2	c9 30		cmp #$30			cmp	 	#"0"
.a9a4	90 0c		bcc $a9b2			bcc 	_TKEndIdentifier
.a9a6	c9 3a		cmp #$3a			cmp 	#"9"+1
.a9a8	90 f0		bcc $a99a			bcc 	_TKCheckLoop
.a9aa	c9 41		cmp #$41			cmp	 	#"A"
.a9ac	90 04		bcc $a9b2			bcc 	_TKEndIdentifier
.a9ae	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a9b0	90 e8		bcc $a99a			bcc 	_TKCheckLoop
.a9b2					_TKEndIdentifier:
.a9b2	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a9b5	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a9b7	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a9b9	f0 06		beq $a9c1			beq 	_TKHasTypeCharacter
.a9bb	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a9bd	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a9bf	d0 07		bne $a9c8			bne 	_TKNoTypeCharacter
.a9c1					_TKHasTypeCharacter:
.a9c1	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a9c4	e8		inx				inx 								; read next
.a9c5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a9c8					_TKNoTypeCharacter:
.a9c8	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a9ca	d0 09		bne $a9d5			bne 	_TKNoArray
.a9cc	e8		inx				inx 								; skip the (
.a9cd	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a9d0	09 04		ora #$04			ora 	#$04
.a9d2	8d 84 04	sta $0484			sta 	identTypeByte
.a9d5					_TKNoArray:
.a9d5	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a9d8	20 72 aa	jsr $aa72			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a9db	a0 a5		ldy #$a5			ldy 	#(KeywordSet0) >> 8
.a9dd	a9 b6		lda #$b6			lda 	#(KeywordSet0) & $FF
.a9df	20 5d a5	jsr $a55d			jsr 	TokeniseSearchTable
.a9e2	a2 00		ldx #$00			ldx 	#0
.a9e4	b0 1f		bcs $aa05			bcs 	_TKFoundToken
.a9e6	a0 a7		ldy #$a7			ldy 	#(KeywordSet1) >> 8
.a9e8	a9 65		lda #$65			lda 	#(KeywordSet1) & $FF
.a9ea	20 5d a5	jsr $a55d			jsr 	TokeniseSearchTable
.a9ed	a2 81		ldx #$81			ldx 	#$81
.a9ef	b0 14		bcs $aa05			bcs 	_TKFoundToken
.a9f1	a0 a7		ldy #$a7			ldy 	#(KeywordSet2) >> 8
.a9f3	a9 b3		lda #$b3			lda 	#(KeywordSet2) & $FF
.a9f5	20 5d a5	jsr $a55d			jsr 	TokeniseSearchTable
.a9f8	a2 82		ldx #$82			ldx 	#$82
.a9fa	b0 09		bcs $aa05			bcs 	_TKFoundToken
.a9fc	20 02 ab	jsr $ab02			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a9ff	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aa02	4c 24 a9	jmp $a924			jmp 	_TKTokeniseLoop 			; and go round again.
.aa05					_TKFoundToken:
.aa05	48		pha				pha 								; save token
.aa06	8a		txa				txa 								; shift in X, is there one ?
.aa07	f0 03		beq $aa0c			beq 	_TKNoTShift
.aa09	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte 			; if so, write it out
.aa0c					_TKNoTShift:
.aa0c	68		pla				pla 								; restore and write token
.aa0d	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.aa10	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.aa13	4c 24 a9	jmp $a924			jmp 	_TKTokeniseLoop 			; and go round again.
.aa16					TokeniseString:
.aa16	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.aa18	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.aa1b	e8		inx				inx									; start of quoted string.
.aa1c	da		phx				phx 								; push start of string on top
.aa1d	ca		dex				dex
.aa1e					_TSFindEnd:
.aa1e	e8		inx				inx
.aa1f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.aa22	f0 04		beq $aa28			beq 	_TSEndOfString
.aa24	c9 22		cmp #$22			cmp 	#'"'
.aa26	d0 f6		bne $aa1e			bne 	_TSFindEnd
.aa28					_TSEndOfString:
.aa28	7a		ply				ply  								; so now Y is first character, X is character after end.
.aa29	48		pha				pha 								; save terminating character
.aa2a	20 32 aa	jsr $aa32			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.aa2d	68		pla				pla 								; terminating character
.aa2e	f0 01		beq $aa31			beq 	_TSNotQuote					; if it wasn't EOS skip it
.aa30	e8		inx				inx
.aa31					_TSNotQuote:
.aa31	60		rts				rts
.aa32					TOWriteBlockXY:
.aa32	86 36		stx $36				stx 	zTemp0 						; write end character
.aa34	98		tya				tya
.aa35	49 ff		eor #$ff			eor 	#$FF
.aa37	38		sec				sec
.aa38	65 36		adc $36				adc 	zTemp0
.aa3a	1a		inc a				inc 	a 							; one extra for NULL
.aa3b	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.aa3e					_TOBlockLoop:
.aa3e	c4 36		cpy $36				cpy 	zTemp0
.aa40	f0 09		beq $aa4b			beq 	_TOBlockExit
.aa42	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.aa45	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.aa48	c8		iny				iny
.aa49	80 f3		bra $aa3e			bra 	_TOBlockLoop
.aa4b					_TOBlockExit:
.aa4b	a9 00		lda #$00			lda 	#0
.aa4d	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.aa50	60		rts				rts
.aa51					TokeniseHexConstant:
.aa51	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.aa53	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.aa56	e8		inx				inx									; start of quoted string.
.aa57	da		phx				phx 								; push start of constant on top
.aa58	ca		dex				dex
.aa59					_THFindLoop:
.aa59	e8		inx				inx
.aa5a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa5d	c9 30		cmp #$30			cmp 	#"0"
.aa5f	90 0c		bcc $aa6d			bcc 	_THFoundEnd
.aa61	c9 3a		cmp #$3a			cmp 	#"9"+1
.aa63	90 f4		bcc $aa59			bcc 	_THFindLoop
.aa65	c9 41		cmp #$41			cmp 	#"A"
.aa67	90 04		bcc $aa6d			bcc 	_THFoundEnd
.aa69	c9 47		cmp #$47			cmp 	#"F"+1
.aa6b	90 ec		bcc $aa59			bcc 	_THFindLoop
.aa6d					_THFoundEnd:
.aa6d	7a		ply				ply 								; restore start
.aa6e	20 32 aa	jsr $aa32			jsr 	TOWriteBlockXY 				; output the block
.aa71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.aa72					TokeniseCalculateHash:
.aa72	da		phx				phx
.aa73	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.aa76	a9 00		lda #$00			lda 	#0
.aa78					_TCHLoop:
.aa78	18		clc				clc
.aa79	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.aa7c	e8		inx				inx
.aa7d	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.aa80	d0 f6		bne $aa78			bne 	_TCHLoop
.aa82	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.aa85	fa		plx				plx
.aa86	60		rts				rts
.aa87					FixLineBufferCase:
.aa87	a2 00		ldx #$00			ldx 	#0
.aa89					_FLBCLoop:
.aa89	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.aa8c	f0 22		beq $aab0			beq 	_FLBCExit 					; end of string.
.aa8e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.aa90	f0 11		beq $aaa3			beq 	_FLBCInQuotes
.aa92	e8		inx				inx
.aa93	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.aa95	90 f2		bcc $aa89			bcc 	_FLBCLoop
.aa97	c9 7b		cmp #$7b			cmp 	#'z'+1
.aa99	b0 ee		bcs $aa89			bcs 	_FLBCLoop
.aa9b	38		sec				sec 								; make U/C
.aa9c	e9 20		sbc #$20			sbc 	#32
.aa9e	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.aaa1	80 e6		bra $aa89			bra 	_FLBCLoop
.aaa3					_FLBCInQuotes:
.aaa3	e8		inx				inx 								; advance
.aaa4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.aaa7	f0 07		beq $aab0			beq 	_FLBCExit 					; exit on EOS
.aaa9	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.aaab	d0 f6		bne $aaa3			bne 	_FLBCInQuotes
.aaad	e8		inx				inx 								; skip over it
.aaae	80 d9		bra $aa89			bra 	_FLBCLoop
.aab0					_FLBCExit:
.aab0	60		rts				rts
.aab1					TokeniseExtractLineNumber:
.aab1	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.aab4	48		pha				pha
.aab5	ad a7 04	lda $04a7			lda 	tokenLineNumber
.aab8	48		pha				pha
.aab9	20 ef aa	jsr $aaef			jsr 	_TELNTimes2 				; line # x 4
.aabc	20 ef aa	jsr $aaef			jsr 	_TELNTimes2 				; line # x 2
.aabf	18		clc				clc 								; add stacked value
.aac0	68		pla				pla
.aac1	6d a7 04	adc $04a7			adc 	tokenLineNumber
.aac4	8d a7 04	sta $04a7			sta 	tokenLineNumber
.aac7	68		pla				pla
.aac8	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.aacb	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.aace	20 ef aa	jsr $aaef			jsr 	_TELNTimes2 				; line # x 10
.aad1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.aad4	e8		inx				inx
.aad5	29 0f		and #$0f			and 	#15 						; add to line #
.aad7	18		clc				clc
.aad8	6d a7 04	adc $04a7			adc 	tokenLineNumber
.aadb	8d a7 04	sta $04a7			sta 	tokenLineNumber
.aade	90 03		bcc $aae3			bcc 	_TLENNoCarry
.aae0	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.aae3					_TLENNoCarry:
.aae3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.aae6	c9 30		cmp #$30			cmp 	#'0'
.aae8	90 04		bcc $aaee			bcc 	_TLENExit
.aaea	c9 3a		cmp #$3a			cmp 	#'9'+1
.aaec	90 c3		bcc $aab1			bcc 	TokeniseExtractLineNumber
.aaee					_TLENExit:
.aaee	60		rts				rts
.aaef					_TELNTimes2:
.aaef	0e a7 04	asl $04a7			asl 	tokenLineNumber
.aaf2	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.aaf5	60		rts				rts
.aaf6					TokeniseWriteByte:
.aaf6	da		phx				phx
.aaf7	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.aafa	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.aafd	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.ab00	fa		plx				plx
.ab01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ab02					CheckCreateVariableRecord:
.ab02	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ab04	85 36		sta $36				sta 	0+zTemp0
.ab06	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ab08	85 37		sta $37				sta 	1+zTemp0
.ab0a					_CCVSearch:
.ab0a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ab0c	f0 2c		beq $ab3a			beq 	_CCVFail
.ab0e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ab10	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ab12	cd 83 04	cmp $0483			cmp 	identHash
.ab15	d0 16		bne $ab2d			bne 	_CCVNext
.ab17	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ab19	ae 80 04	ldx $0480			ldx 	identStart
.ab1c					_CCVCompare:
.ab1c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ab1f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ab21	e8		inx				inx 								; advance pointers
.ab22	c8		iny				iny
.ab23	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ab24	d0 07		bne $ab2d			bne 	_CCVNext  					; didn't match go to next.
.ab26	90 f4		bcc $ab1c			bcc 	_CCVCompare 				; not finished yet.
.ab28	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ab2b	f0 41		beq $ab6e			beq 	_CCVFound 					; yes, we were successful
.ab2d					_CCVNext:
.ab2d	18		clc				clc
.ab2e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ab30	65 36		adc $36				adc 	zTemp0
.ab32	85 36		sta $36				sta 	zTemp0
.ab34	90 d4		bcc $ab0a			bcc 	_CCVSearch
.ab36	e6 37		inc $37				inc 	zTemp0+1
.ab38	80 d0		bra $ab0a			bra 	_CCVSearch
.ab3a					_CCVFail:
.ab3a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ab3c	ad 83 04	lda $0483			lda 	identHash
.ab3f	91 36		sta ($36),y			sta 	(zTemp0),y
.ab41	c8		iny				iny 								; offset 2 is the type byte
.ab42	ad 84 04	lda $0484			lda 	identTypeByte
.ab45	91 36		sta ($36),y			sta 	(zTemp0),y
.ab47	c8		iny				iny
.ab48					_CCVData:
.ab48	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ab4a	91 36		sta ($36),y			sta 	(zTemp0),y
.ab4c	c8		iny				iny
.ab4d	c0 08		cpy #$08			cpy 	#8
.ab4f	90 f7		bcc $ab48			bcc 	_CCVData
.ab51	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ab54					_CCVCopyName:
.ab54	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab57	91 36		sta ($36),y			sta 	(zTemp0),y
.ab59	e8		inx				inx
.ab5a	c8		iny				iny
.ab5b	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ab5e	d0 f4		bne $ab54			bne 	_CCVCopyName
.ab60	98		tya				tya 								; patch offset
.ab61	92 36		sta ($36)			sta 	(zTemp0)
.ab63	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ab65	91 36		sta ($36),y			sta 	(zTemp0),y
.ab67	88		dey				dey
.ab68	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ab6a	09 80		ora #$80			ora 	#$80
.ab6c	91 36		sta ($36),y			sta 	(zTemp0),y
.ab6e					_CCVFound:
.ab6e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ab70	38		sec				sec
.ab71	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ab73	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ab75	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.ab78	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ab7a	20 f6 aa	jsr $aaf6			jsr 	TokeniseWriteByte
.ab7d	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
