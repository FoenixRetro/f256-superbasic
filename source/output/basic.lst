
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 30 06:39:38 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 b5 81	jsr $81b5			jsr 	NewCommand 					; erase current program
.8006	20 b1 8b	jsr $8bb1			jsr 	BackloadProgram
.8009	4c cc 81	jmp $81cc			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 24 90	jsr $9024			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	bc 83					.word	ShiftLeft                        ; $00 <<
>8016	b6 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	ac 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	8a 95					.word	SyntaxError                      ; $03 !!3
>801c	8a 95					.word	SyntaxError                      ; $04 ><
>801e	c0 82					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	bf 83					.word	ShiftRight                       ; $06 >>
>8022	8a 95					.word	SyntaxError                      ; $07 !!7
>8024	8a 95					.word	SyntaxError                      ; $08 !!8
>8026	8a 95					.word	SyntaxError                      ; $09 !!9
>8028	8a 95					.word	SyntaxError                      ; $0a !!10
>802a	8a 95					.word	SyntaxError                      ; $0b !!11
>802c	8a 95					.word	SyntaxError                      ; $0c !!12
>802e	8a 95					.word	SyntaxError                      ; $0d !!13
>8030	8a 95					.word	SyntaxError                      ; $0e !!14
>8032	8a 95					.word	SyntaxError                      ; $0f !!15
>8034	8a 95					.word	SyntaxError                      ; $10 @
>8036	8a 95					.word	SyntaxError                      ; $11 !!17
>8038	8a 95					.word	SyntaxError                      ; $12 !!18
>803a	8a 95					.word	SyntaxError                      ; $13 [
>803c	81 90					.word	IntegerDivide                    ; $14 \
>803e	8a 95					.word	SyntaxError                      ; $15 ]
>8040	42 85					.word	EorInteger                       ; $16 ^
>8042	8a 95					.word	SyntaxError                      ; $17 _
>8044	8a 95					.word	SyntaxError                      ; $18 `
>8046	8a 95					.word	SyntaxError                      ; $19 !!25
>8048	8a 95					.word	SyntaxError                      ; $1a !!26
>804a	8a 95					.word	SyntaxError                      ; $1b {
>804c	fd 84					.word	OraInteger                       ; $1c |
>804e	8a 95					.word	SyntaxError                      ; $1d }
>8050	8a 95					.word	SyntaxError                      ; $1e ~
>8052	8a 95					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	8a 95					.word	SyntaxError                      ; $20
>8056	8a 95					.word	SyntaxError                      ; $21 !
>8058	8a 95					.word	SyntaxError                      ; $22 "
>805a	8a 95					.word	SyntaxError                      ; $23 #
>805c	8a 95					.word	SyntaxError                      ; $24 $
>805e	cd 90					.word	IntegerModulus                   ; $25 %
>8060	b8 84					.word	AndInteger                       ; $26 &
>8062	8a 95					.word	SyntaxError                      ; $27 '
>8064	8a 95					.word	SyntaxError                      ; $28 (
>8066	8a 95					.word	SyntaxError                      ; $29 )
>8068	41 91					.word	MulInteger                       ; $2a *
>806a	52 84					.word	AddInteger                       ; $2b +
>806c	8a 95					.word	SyntaxError                      ; $2c ,
>806e	8d 84					.word	SubInteger                       ; $2d -
>8070	8a 95					.word	SyntaxError                      ; $2e .
>8072	d8 92					.word	FDivideCommand                   ; $2f /
>8074	8a 95					.word	SyntaxError                      ; $30 0
>8076	8a 95					.word	SyntaxError                      ; $31 1
>8078	8a 95					.word	SyntaxError                      ; $32 2
>807a	8a 95					.word	SyntaxError                      ; $33 3
>807c	8a 95					.word	SyntaxError                      ; $34 4
>807e	8a 95					.word	SyntaxError                      ; $35 5
>8080	8a 95					.word	SyntaxError                      ; $36 6
>8082	8a 95					.word	SyntaxError                      ; $37 7
>8084	8a 95					.word	SyntaxError                      ; $38 8
>8086	8a 95					.word	SyntaxError                      ; $39 9
>8088	8a 95					.word	SyntaxError                      ; $3a :
>808a	8a 95					.word	SyntaxError                      ; $3b ;
>808c	98 82					.word	BinaryCompareLess                ; $3c <
>808e	8e 82					.word	BinaryCompareEqual               ; $3d =
>8090	a2 82					.word	BinaryCompareGreater             ; $3e >
>8092	8a 95					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	06 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	13 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	8a 95					.word	SyntaxError                      ; $82 !2:SH2
>809a	1e 94					.word	AbsUnary                         ; $83 ABS(
>809c	ae 88					.word	AllocUnary                       ; $84 ALLOC(
>809e	2e 94					.word	AscUnary                         ; $85 ASC(
>80a0	4b 89					.word	ChrUnary                         ; $86 CHR$(
>80a2	8a 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	3b 94					.word	FracUnary                        ; $88 FRAC(
>80a6	51 94					.word	IntUnary                         ; $89 INT(
>80a8	a7 94					.word	IsValUnary                       ; $8a ISVAL(
>80aa	20 8a					.word	Unary_Left                       ; $8b LEFT$(
>80ac	63 94					.word	LenUnary                         ; $8c LEN(
>80ae	4a 8a					.word	Unary_Mid                        ; $8d MID$(
>80b0	e8 88					.word	Unary_Not                        ; $8e NOT(
>80b2	30 8a					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	fe 88					.word	Unary_Rnd                        ; $90 RND(
>80b6	7d 94					.word	SgnUnary                         ; $91 SGN(
>80b8	5d 89					.word	SpcUnary                         ; $92 SPC(
>80ba	78 89					.word	Unary_Str                        ; $93 STR$(
>80bc	7e 82					.word	UnaryTrue                        ; $94 TRUE
>80be	9d 94					.word	ValUnary                         ; $95 VAL(
>80c0	8a 95					.word	SyntaxError                      ; $96 FOR
>80c2	8a 95					.word	SyntaxError                      ; $97 IF
>80c4	8a 95					.word	SyntaxError                      ; $98 PROC
>80c6	8a 95					.word	SyntaxError                      ; $99 REPEAT
>80c8	8a 95					.word	SyntaxError                      ; $9a WHILE
>80ca	8a 95					.word	SyntaxError                      ; $9b ENDIF
>80cc	8a 95					.word	SyntaxError                      ; $9c ENDPROC
>80ce	8a 95					.word	SyntaxError                      ; $9d NEXT
>80d0	8a 95					.word	SyntaxError                      ; $9e UNTIL
>80d2	8a 95					.word	SyntaxError                      ; $9f WEND
>80d4	6d 81					.word	CallCommand                      ; $a0 CALL
>80d6	8a 95					.word	SyntaxError                      ; $a1 CLS
>80d8	8a 95					.word	SyntaxError                      ; $a2 DATA
>80da	8a 95					.word	SyntaxError                      ; $a3 DIM
>80dc	8a 95					.word	SyntaxError                      ; $a4 GOSUB
>80de	8a 95					.word	SyntaxError                      ; $a5 GOTO
>80e0	8a 95					.word	SyntaxError                      ; $a6 LET
>80e2	8a 95					.word	SyntaxError                      ; $a7 PRINT
>80e4	8a 95					.word	SyntaxError                      ; $a8 READ
>80e6	bf 81					.word	RemCommand                       ; $a9 REM
>80e8	8a 95					.word	SyntaxError                      ; $aa RETURN
>80ea	8a 95					.word	SyntaxError                      ; $ab THEN
>80ec	8a 95					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	8a 95					.word	SyntaxError                      ; $80 !0:EOF
>80f0	8a 95					.word	SyntaxError                      ; $81 !1:SH1
>80f2	8a 95					.word	SyntaxError                      ; $82 !2:SH2
>80f4	5d 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	7b 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	b2 81					.word	EndCommand                       ; $85 END
>80fa	8a 95					.word	SyntaxError                      ; $86 LIST
>80fc	b5 81					.word	NewCommand                       ; $87 NEW
>80fe	8a 95					.word	SyntaxError                      ; $88 RESTORE
>8100	cc 81					.word	CommandRUN                       ; $89 RUN
>8102	8a 95					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	8a 95					.word	SyntaxError                      ; $80 !0:EOF
>8106	8a 95					.word	SyntaxError                      ; $81 !1:SH1
>8108	8a 95					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/memory.asm

.901e					MemoryPeek:
.901e	b2 36		lda ($36)			lda 	(zTemp0)
.9020	60		rts				rts
.9021					MemoryPoke:
.9021	92 36		sta ($36)			sta 	(zTemp0)
.9023	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/hardware/junior/vectors.asm

.9024					EXTPrintCharacter:
.9024	48		pha				pha
.9025	da		phx				phx
.9026	5a		phy				phy
.9027	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.902a	7a		ply				ply
.902b	fa		plx				plx
.902c	68		pla				pla
.902d	60		rts				rts
.902e					EXTInputSingleCharacter:
.902e	da		phx				phx
.902f	5a		phy				phy
.9030					_EISCWait:
.9030	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9033	c9 00		cmp #$00			cmp 	#0
.9035	f0 f9		beq $9030			beq 	_EISCWait
.9037	7a		ply				ply
.9038	fa		plx				plx
.9039	60		rts				rts
.903a					EXTInputLine:
.903a	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.903c					_ILLoop:
.903c	da		phx				phx 								; read character in
.903d	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9040	fa		plx				plx
.9041	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9043	f0 12		beq $9057			beq 	_ILBackspace
.9045	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9047	f0 15		beq $905e			beq 	_ILExit
.9049	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.904b	90 ef		bcc $903c			bcc 	_ILLoop
.904d	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.904f	f0 eb		beq $903c			beq 	_ILLoop
.9051	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9054	e8		inx				inx
.9055	80 e5		bra $903c			bra 	_ILLoop
.9057					_ILBackspace:
.9057	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9059	f0 e1		beq $903c			beq 	_ILLoop
.905b	ca		dex				dex 								; back one.
.905c	80 de		bra $903c			bra 	_ILLoop
.905e					_ILExit:
.905e	20 24 90	jsr $9024			jsr 	EXTPrintCharacter
.9061	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9064	60		rts				rts
.9065					EXTBreakCheck:
.9065	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/memory.asm

.810a					MemoryNew:
.810a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.810c	85 30		sta $30				sta 	codePtr
.810e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8110	85 31		sta $31				sta 	codePtr+1
.8112	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8114	92 30		sta ($30)			sta 	(codePtr)
.8116	60		rts				rts
.8117					MemoryAppend:
.8117	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8119	85 30		sta $30				sta 	codePtr
.811b	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.811d	85 31		sta $31				sta 	codePtr+1
.811f					_MAFindEnd:
.811f	b2 30		lda ($30)			lda 	(codePtr)
.8121	f0 0d		beq $8130			beq 	_MAFoundEnd
.8123	18		clc				clc
.8124	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8126	65 30		adc $30				adc 	codePtr
.8128	85 30		sta $30				sta 	codePtr
.812a	90 02		bcc $812e			bcc 	_CREExit
.812c	e6 31		inc $31				inc 	codePtr+1
.812e					_CREExit:
.812e	80 ef		bra $811f			bra 	_MAFindEnd
.8130					_MAFoundEnd:
.8130	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.8133	c0 04		cpy #$04			cpy 	#4 							; blank line
.8135	f0 0e		beq $8145			beq 	_MANoLine
.8137	a9 00		lda #$00			lda 	#0 							; end of program
.8139	91 30		sta ($30),y			sta 	(codePtr),y
.813b					_MACopy:
.813b	88		dey				dey
.813c	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.813f	91 30		sta ($30),y			sta 	(codePtr),y
.8141	c0 00		cpy #$00			cpy 	#0
.8143	d0 f6		bne $813b			bne 	_MACopy
.8145					_MANoLine:
.8145	60		rts				rts
.8146					MemoryInline:
.8146	98		tya				tya 								; put address into stack,x
.8147	18		clc				clc
.8148	65 30		adc $30				adc 	codePtr
.814a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.814d	a5 31		lda $31				lda 	codePtr+1
.814f	69 00		adc #$00			adc 	#0
.8151	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8154	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8157	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.815a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./config/memory.flat/variable.asm

.815b					VariableOpen:
.815b	60		rts				rts
.815c					VariableClose:
.815c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/assert.asm

.815d					AssertCommand:
.815d	a2 00		ldx #$00			ldx 	#0
.815f	20 eb 8a	jsr $8aeb			jsr 	EvaluateInteger 			; the assert test
.8162	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; exit if result is non zero.
.8165	d0 05		bne $816c			bne 	_ACExit
.8167	a9 0a		lda #$0a		lda	#10
.8169	4c 1b 82	jmp $821b		jmp	ErrorHandler
.816c					_ACExit:
.816c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/call.asm

.816d					CallCommand:
.816d	a2 00		ldx #$00			ldx 	#0
.816f	20 00 8b	jsr $8b00			jsr 	Evaluate16BitInteger
.8172	ad 10 06	lda $0610			lda 	NSMantissa1
.8175	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8178	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/clear.asm

.817b					ClearCommand:
.817b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.817d	85 36		sta $36				sta 	0+zTemp0
.817f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8181	85 37		sta $37				sta 	1+zTemp0
.8183					_ClearZeroLoop:
.8183	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8185	f0 18		beq $819f			beq 	_ClearZeroEnd
.8187	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8189	a9 00		lda #$00			lda 	#0
.818b					_ClearOneVariable:
.818b	91 36		sta ($36),y			sta 	(zTemp0),y
.818d	c8		iny				iny
.818e	c0 08		cpy #$08			cpy 	#8
.8190	d0 f9		bne $818b			bne 	_ClearOneVariable
.8192	18		clc				clc 								; go to the next variable
.8193	b2 36		lda ($36)			lda 	(zTemp0)
.8195	65 36		adc $36				adc 	zTemp0
.8197	85 36		sta $36				sta 	zTemp0
.8199	90 e8		bcc $8183			bcc 	_ClearZeroLoop
.819b	e6 37		inc $37				inc 	zTemp0+1
.819d	80 e4		bra $8183			bra 	_ClearZeroLoop
.819f					_ClearZeroEnd:
.819f	18		clc				clc
.81a0	a5 36		lda $36				lda 	zTemp0
.81a2	69 01		adc #$01			adc 	#1
.81a4	8d 0c 07	sta $070c			sta 	lowMemPtr
.81a7	a5 37		lda $37				lda 	zTemp0+1
.81a9	69 00		adc #$00			adc 	#0
.81ab	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.81ae	20 e8 94	jsr $94e8			jsr 	StringSystemInitialise
.81b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/end.asm

.81b2					EndCommand:
.81b2	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/new.asm

.81b5					NewCommand:
.81b5	20 0a 81	jsr $810a			jsr 	MemoryNew
.81b8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81bb	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear everything.
.81be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/rem.asm

.81bf					RemCommand:
.81bf	b1 30		lda ($30),y			lda 	(codePtr),y
.81c1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81c3	d0 06		bne $81cb			bne 	_RMExit
.81c5	c8		iny				iny
.81c6	98		tya				tya
.81c7	38		sec				sec
.81c8	71 30		adc ($30),y			adc 	(codePtr),y
.81ca	a8		tay				tay
.81cb					_RMExit:
.81cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/commands/run.asm

.81cc					CommandRUN:
.81cc	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.81cf	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.81d1	85 30		sta $30				sta 	codePtr
.81d3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.81d5	85 31		sta $31				sta 	codePtr+1
.81d7					RUNNewLine:
.81d7	b2 30		lda ($30)			lda 	(codePtr)
.81d9	f0 28		beq $8203			beq 	CRNoProgram         		; no then END.
.81db	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.81dd	9a		txs				txs
.81de					RUNCodePointerLine:
.81de	a0 02		ldy #$02			ldy 	#2 							; start of program
.81e0					_CRIncMainLoop:
.81e0	c8		iny				iny
.81e1					_CRMainLoop:
.81e1	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.81e4	b1 30		lda ($30),y			lda 	(codePtr),y
.81e6	10 10		bpl $81f8			bpl 	_CRNotKeyword
.81e8	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.81ea	b0 04		bcs $81f0			bcs 	_CRIsKeyword
.81ec	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.81ee	b0 0d		bcs $81fd			bcs		_CRSyntaxError
.81f0					_CRIsKeyword:
.81f0	c8		iny				iny 								; consume command
.81f1	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.81f2	aa		tax				tax 								; put in X for vector jump
.81f3	20 00 82	jsr $8200			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.81f6	80 e9		bra $81e1			bra 	_CRMainLoop 				; and loop round
.81f8					_CRNotKeyword:
.81f8	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81fa	f0 e4		beq $81e0			beq 	_CRIncMainLoop
>81fc	db						.byte 	$DB 						; causes a break in the emulator
.81fd					_CRSyntaxError:
.81fd	4c 8a 95	jmp $958a			jmp 	SyntaxError
.8200					_CRCallVector0:
.8200	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8203					CRNoProgram:
.8203	4c b2 81	jmp $81b2			jmp 	EndCommand
.8206					EOLCommand:
.8206	18		clc				clc
.8207	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8209	65 30		adc $30				adc 	codePtr
.820b	85 30		sta $30				sta 	codePtr
.820d	90 02		bcc $8211			bcc 	_CREExit
.820f	e6 31		inc $31				inc 	codePtr+1
.8211					_CREExit:
.8211	80 c4		bra $81d7			bra 	RunNewLine
.8213					Shift1Command:
.8213	b1 30		lda ($30),y			lda 	(codePtr),y
.8215	c8		iny				iny
.8216	0a		asl a				asl 	a
.8217	aa		tax				tax
.8218	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/charcheck.asm

.9068					CheckRightBracket:
.9068	b1 30		lda ($30),y			lda 	(codePtr),y
.906a	c8		iny				iny
.906b	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.906d	d0 0f		bne $907e			bne 	CNAFail
.906f	60		rts				rts
.9070					CheckComma:
.9070	b1 30		lda ($30),y			lda 	(codePtr),y
.9072	c8		iny				iny
.9073	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9075	d0 07		bne $907e			bne 	CNAFail
.9077	60		rts				rts
.9078					CheckNextA:
.9078	d1 30		cmp ($30),y			cmp 	(codePtr),y
.907a	d0 02		bne $907e			bne 	CNAFail
.907c	c8		iny				iny 								; skip character
.907d	60		rts				rts 								; and exit
.907e					CNAFail:
.907e	4c 8a 95	jmp $958a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./core/errors/errors.asm

.821b					ErrorHandler:
.821b	a8		tay				tay 								; find the error text
.821c	f0 42		beq $8260			beq 	_EHEnd
.821e	a2 00		ldx #$00			ldx 	#0
.8220					_EHFind:
.8220	88		dey				dey 								; found the error text ?
.8221	f0 0a		beq $822d			beq 	_EHFound
.8223					_EHFindZero:
.8223	bd a3 95	lda $95a3,x			lda 	ErrorText,x 				; find the next error
.8226	e8		inx				inx
.8227	c9 00		cmp #$00			cmp 	#0
.8229	d0 f8		bne $8223			bne 	_EHFindZero
.822b	80 f3		bra $8220			bra 	_EHFind
.822d					_EHFound:
.822d	bd a3 95	lda $95a3,x			lda 	ErrorText,x 				; print the message
.8230	20 24 90	jsr $9024			jsr 	EXTPrintCharacter
.8233	e8		inx				inx
.8234	bd a3 95	lda $95a3,x			lda 	ErrorText,x
.8237	d0 f4		bne $822d			bne 	_EHFound
.8239	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.823b	b1 30		lda ($30),y			lda 	(codePtr),y
.823d	d0 05		bne $8244			bne 	_EHAtMsg
.823f	c8		iny				iny
.8240	b1 30		lda ($30),y			lda 	(codePtr),y
.8242	f0 17		beq $825b			beq 	_EHCREnd
.8244					_EHAtMsg:
.8244	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.8246	a9 63		lda #$63			lda 	#_AtMsg & $FF
.8248	20 6d 82	jsr $826d			jsr 	PrintStringXA
.824b	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.824d	b1 30		lda ($30),y			lda 	(codePtr),y
.824f	48		pha				pha
.8250	c8		iny				iny
.8251	b1 30		lda ($30),y			lda 	(codePtr),y
.8253	aa		tax				tax
.8254	68		pla				pla
.8255	20 c2 91	jsr $91c2			jsr 	ConvertInt16 				; convert XA to string
.8258	20 6d 82	jsr $826d			jsr 	PrintStringXA 				; and print it.
.825b					_EHCREnd:
.825b	a9 0d		lda #$0d			lda 	#13 						; new line
.825d	20 24 90	jsr $9024			jsr 	EXTPrintCharacter
.8260					_EHEnd:
.8260	4c 0c 80	jmp $800c			jmp 	WarmStart
>8263	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>826b	20 00
.826d					PrintStringXA:
.826d	86 37		stx $37				stx 	zTemp0+1
.826f	85 36		sta $36				sta 	zTemp0
.8271	a0 00		ldy #$00			ldy 	#0
.8273					_PSXALoop:
.8273	b1 36		lda ($36),y			lda 	(zTemp0),y
.8275	f0 06		beq $827d			beq 	_PSXAExit
.8277	20 24 90	jsr $9024			jsr 	EXTPrintCharacter
.827a	c8		iny				iny
.827b	80 f6		bra $8273			bra 	_PSXALoop
.827d					_PSXAExit:
.827d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/compare.asm

.827e					UnaryTrue:
.827e	fa		plx				plx
.827f					ReturnTrue:
.827f	a9 01		lda #$01			lda 	#1  						; set to 1
.8281	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.8284	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8286	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8289	60		rts				rts
.828a					UnaryFalse:
.828a	fa		plx				plx
.828b					ReturnFalse:
.828b	4c 74 8b	jmp $8b74			jmp 	NSMSetZero 					; set it all to zero
.828e					BinaryCompareEqual:
.828e	fa		plx				plx
.828f	20 ca 82	jsr $82ca			jsr 	CompareBaseCode
.8292	c9 00		cmp #$00			cmp 	#0
.8294	f0 e9		beq $827f			beq 	ReturnTrue
.8296	80 f3		bra $828b			bra 	ReturnFalse
.8298					BinaryCompareLess:
.8298	fa		plx				plx
.8299	20 ca 82	jsr $82ca			jsr 	CompareBaseCode
.829c	c9 ff		cmp #$ff			cmp 	#$FF
.829e	f0 df		beq $827f			beq 	ReturnTrue
.82a0	80 e9		bra $828b			bra 	ReturnFalse
.82a2					BinaryCompareGreater:
.82a2	fa		plx				plx
.82a3	20 ca 82	jsr $82ca			jsr 	CompareBaseCode
.82a6	c9 01		cmp #$01			cmp 	#1
.82a8	f0 d5		beq $827f			beq 	ReturnTrue
.82aa	80 df		bra $828b			bra 	ReturnFalse
.82ac					BinaryCompareNotEqual:
.82ac	fa		plx				plx
.82ad	20 ca 82	jsr $82ca			jsr 	CompareBaseCode
.82b0	c9 00		cmp #$00			cmp 	#0
.82b2	d0 cb		bne $827f			bne 	ReturnTrue
.82b4	80 d5		bra $828b			bra 	ReturnFalse
.82b6					BinaryCompareLessEqual:
.82b6	fa		plx				plx
.82b7	20 ca 82	jsr $82ca			jsr 	CompareBaseCode
.82ba	c9 01		cmp #$01			cmp 	#1
.82bc	d0 c1		bne $827f			bne 	ReturnTrue
.82be	80 cb		bra $828b			bra 	ReturnFalse
.82c0					BinaryCompareGreaterEqual:
.82c0	fa		plx				plx
.82c1	20 ca 82	jsr $82ca			jsr 	CompareBaseCode
.82c4	c9 ff		cmp #$ff			cmp 	#$FF
.82c6	d0 b7		bne $827f			bne 	ReturnTrue
.82c8	80 c1		bra $828b			bra 	ReturnFalse
.82ca					CompareBaseCode:
.82ca	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; make both values if references.
.82cd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.82d0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82d3	29 10		and #$10			and 	#NSTString
.82d5	d0 40		bne $8317			bne 	_CBCString
.82d7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.82da	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82dd	d0 3b		bne $831a			bne 	_CBCFloat
.82df	bd 00 06	lda $0600,x			lda 	NSStatus,x
.82e2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82e5	29 08		and #$08			and 	#NSTFloat
.82e7	d0 31		bne $831a			bne 	_CBCFloat
.82e9	20 1d 83	jsr $831d			jsr 	CompareFixMinusZero
.82ec	e8		inx				inx
.82ed	20 1d 83	jsr $831d			jsr 	CompareFixMinusZero
.82f0	ca		dex				dex
.82f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.82f4	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.82f7	10 0b		bpl $8304			bpl 	_CDCSameSign
.82f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.82fc	30 16		bmi $8314			bmi 	_CBCLess 					; return $FF
.82fe					_CBCGreater:
.82fe	a9 01		lda #$01			lda 	#1
.8300	60		rts				rts
.8301					_CBCEqual:
.8301	a9 00		lda #$00			lda 	#0
.8303	60		rts				rts
.8304					_CDCSameSign:
.8304	20 2c 84	jsr $842c			jsr 	SubTopTwoStack 				; unsigned subtract
.8307	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; or the mantissa together
.830a	f0 f5		beq $8301			beq 	_CBCEqual 					; -0 == 0
.830c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.830f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8312	10 ea		bpl $82fe			bpl 	_CBCGreater
.8314					_CBCLess:
.8314	a9 ff		lda #$ff			lda 	#$FF
.8316	60		rts				rts
.8317					_CBCString:
.8317	4c 83 83	jmp $8383			jmp 	CompareStrings
.831a					_CBCFloat:
.831a	4c be 92	jmp $92be			jmp 	CompareFloat
.831d					CompareFixMinusZero:
.831d	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero
.8320	d0 03		bne $8325			bne 	_CFXMZNotZero
.8322	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8325					_CFXMZNotZero:
.8325	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/concat.asm

.8326					StringConcat:
.8326	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8329	3d 01 06	and $0601,x			and 	NSStatus+1,x
.832c	29 18		and #$18			and 	#NSBTypeMask
.832e	c9 10		cmp #$10			cmp 	#NSTString
.8330	d0 4e		bne $8380			bne		_SCType
.8332	64 38		stz $38				stz 	zTemp1 						; counting total length
.8334	e8		inx				inx
.8335	20 53 83	jsr $8353			jsr 	_SCSetupZ0 					; setup for second
.8338	20 5e 83	jsr $835e			jsr 	_SCLengthZ0 				; length for second
.833b	ca		dex				dex
.833c	20 53 83	jsr $8353			jsr 	_SCSetupZ0 					; setup for first
.833f	20 5e 83	jsr $835e			jsr 	_SCLengthZ0 				; length for first
.8342	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8344	20 06 95	jsr $9506			jsr 	StringTempAllocate
.8347	20 71 83	jsr $8371			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.834a	e8		inx				inx
.834b	20 53 83	jsr $8353			jsr 	_SCSetupZ0 					; copy second out
.834e	20 71 83	jsr $8371			jsr 	_SCCopy
.8351	ca		dex				dex
.8352	60		rts				rts
.8353					_SCSetupZ0:
.8353	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8356	85 36		sta $36				sta 	zTemp0
.8358	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.835b	85 37		sta $37				sta 	zTemp0+1
.835d	60		rts				rts
.835e					_SCLengthZ0:
.835e	5a		phy				phy
.835f	a0 00		ldy #$00			ldy 	#0
.8361					_SCLenLoop:
.8361	b1 36		lda ($36),y			lda 	(zTemp0),y
.8363	f0 0a		beq $836f			beq 	_SCLExit
.8365	c8		iny				iny
.8366	e6 38		inc $38				inc 	zTemp1
.8368	10 f7		bpl $8361			bpl		_SCLenLoop
.836a	a9 09		lda #$09		lda	#9
.836c	4c 1b 82	jmp $821b		jmp	ErrorHandler
.836f					_SCLExit:
.836f	7a		ply				ply
.8370	60		rts				rts
.8371					_SCCopy:
.8371	5a		phy				phy
.8372	a0 00		ldy #$00			ldy 	#0
.8374					_SCCopyLoop:
.8374	b1 36		lda ($36),y			lda 	(zTemp0),y
.8376	f0 06		beq $837e			beq 	_SCCExit
.8378	20 44 95	jsr $9544			jsr 	StringTempWrite
.837b	c8		iny				iny
.837c	80 f6		bra $8374			bra 	_SCCopyLoop
.837e					_SCCExit:
.837e	7a		ply				ply
.837f	60		rts				rts
.8380					_SCType:
.8380	4c 94 95	jmp $9594			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/divide.asm

.9081					IntegerDivide:
.9081	fa		plx				plx
.9082	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9085	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9088	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9089	0a		asl a				asl 	a
.908a	10 05		bpl $9091			bpl 	_NotRef
.908c	48		pha				pha
.908d	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9090	68		pla				pla
.9091					_NotRef:
.9091	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9093	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9096	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9099	f0 03		beq $909e			beq 	_IntegerCode 				; if clear, then we have two integers
.909b	4c 94 95	jmp $9594			jmp 	TypeError 					; anything else, type mismatch.
.909e					_IntegerCode:
.909e	20 c0 90	jsr $90c0			jsr 	CheckDivideZero 			; do div zero check
.90a1	20 f7 90	jsr $90f7			jsr 	Int32Divide 				; do the division
.90a4	20 b4 91	jsr $91b4			jsr 	CalculateSign 				; calculate result sign
.90a7					NSMCopyPlusTwoToZero:
.90a7	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.90aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90ad	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.90b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90b3	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.90b6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90b9	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.90bc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90bf	60		rts				rts
.90c0					CheckDivideZero:
.90c0	e8		inx				inx
.90c1	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero
.90c4	f0 02		beq $90c8			beq 	_CDVError
.90c6	ca		dex				dex
.90c7	60		rts				rts
.90c8					_CDVError:
.90c8	a9 03		lda #$03		lda	#3
.90ca	4c 1b 82	jmp $821b		jmp	ErrorHandler
.90cd					IntegerModulus:
.90cd	fa		plx				plx
.90ce	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90d1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90d4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90d5	0a		asl a				asl 	a
.90d6	10 05		bpl $90dd			bpl 	_NotRef
.90d8	48		pha				pha
.90d9	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90dc	68		pla				pla
.90dd					_NotRef:
.90dd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90df	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90e2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90e5	f0 03		beq $90ea			beq 	_IntegerCode 				; if clear, then we have two integers
.90e7	4c 94 95	jmp $9594			jmp 	TypeError 					; anything else, type mismatch.
.90ea					_IntegerCode:
.90ea	20 c0 90	jsr $90c0			jsr 	CheckDivideZero 			; do div zero check
.90ed	20 f7 90	jsr $90f7			jsr 	Int32Divide 				; do the division
.90f0	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.90f3	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.90f6	60		rts				rts
.90f7					Int32Divide:
.90f7	48		pha				pha 								; save AXY
.90f8	5a		phy				phy
.90f9	20 4b 8b	jsr $8b4b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.90fc	20 70 8b	jsr $8b70			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.90ff	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9101					_I32DivideLoop:
.9101	e8		inx				inx
.9102	e8		inx				inx
.9103	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9106	ca		dex				dex
.9107	ca		dex				dex
.9108	20 8a 8b	jsr $8b8a			jsr 	NSMRotateLeft
.910b	20 37 91	jsr $9137			jsr 	DivideCheckSubtract 		; check if subtract possible
.910e	90 03		bcc $9113			bcc 	_I32DivideNoCarryIn
.9110	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9113					_I32DivideNoCarryIn:
.9113	88		dey				dey 								; loop round till division completed.
.9114	d0 eb		bne $9101			bne 	_I32DivideLoop
.9116	7a		ply				ply 								; restore AXY and exit
.9117	68		pla				pla
.9118	60		rts				rts
.9119					Int32ShiftDivide:
.9119	48		pha				pha 								; save AY
.911a	5a		phy				phy
.911b	e8		inx				inx 								; clear S[X+2]
.911c	e8		inx				inx
.911d	20 74 8b	jsr $8b74			jsr 	NSMSetZero
.9120	ca		dex				dex
.9121	ca		dex				dex
.9122	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9124					_I32SDLoop:
.9124	20 37 91	jsr $9137			jsr 	DivideCheckSubtract 		; check if subtract possible
.9127	e8		inx				inx
.9128	e8		inx				inx
.9129	20 8a 8b	jsr $8b8a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.912c	ca		dex				dex
.912d	ca		dex				dex
.912e	20 8a 8b	jsr $8b8a			jsr 	NSMRotateLeft
.9131	88		dey				dey 	 							; do 31 times
.9132	d0 f0		bne $9124			bne 	_I32SDLoop
.9134	7a		ply				ply 								; restore AY and exit
.9135	68		pla				pla
.9136	60		rts				rts
.9137					DivideCheckSubtract:
.9137	20 2c 84	jsr $842c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.913a	b0 04		bcs $9140			bcs 	_DCSExit 					; if carry set, then could do, exit
.913c	20 06 84	jsr $8406			jsr 	AddTopTwoStack 				; add it back in
.913f	18		clc				clc 								; and return False
.9140					_DCSExit:
.9140	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/multiply.asm

.9141					MulInteger:
.9141	fa		plx				plx
.9142	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9145	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9148	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9149	0a		asl a				asl 	a
.914a	10 05		bpl $9151			bpl 	_NotRef
.914c	48		pha				pha
.914d	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9150	68		pla				pla
.9151					_NotRef:
.9151	0a		asl a				asl 	a 							; put MSB of type into A:7
.9152	30 0b		bmi $915f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9154	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9157	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.915a	f0 06		beq $9162			beq 	_IntegerCode 				; if clear, then we have two integers
.915c	4c 95 93	jmp $9395			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.915f					_StringData:
.915f	4c 9e 95	jmp $959e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9162					_IntegerCode:
.9162	20 6f 91	jsr $916f			jsr 	MultiplyShort
.9165	c9 00		cmp #$00			cmp 	#0
.9167	f0 05		beq $916e			beq 	_MIExit
.9169	a9 04		lda #$04		lda	#4
.916b	4c 1b 82	jmp $821b		jmp	ErrorHandler
.916e					_MIExit:
.916e	60		rts				rts
.916f					MultiplyShort:
.916f	5a		phy				phy 								; save Y
.9170	20 4b 8b	jsr $8b4b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9173	20 70 8b	jsr $8b70			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9176	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9178					_I32MLoop:
.9178	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.917b	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.917e	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9181	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9184	f0 28		beq $91ae			beq 	_I32MExit 					; exit if zero
.9186	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9189	29 01		and #$01			and 	#1
.918b	f0 0e		beq $919b			beq 	_I32MNoAdd
.918d	20 06 84	jsr $8406			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9190	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9193	10 06		bpl $919b			bpl 	_I32MNoAdd
.9195					_I32ShiftRight:
.9195	20 97 8b	jsr $8b97			jsr 	NSMShiftRight 				; shift S[X] right
.9198	c8		iny				iny 								; increment shift count
.9199	80 0a		bra $91a5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.919b					_I32MNoAdd:
.919b	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.919e	70 f5		bvs $9195			bvs 	_I32ShiftRight 				; instead.
.91a0	e8		inx				inx
.91a1	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.91a4	ca		dex				dex
.91a5					_I32MShiftUpper:
.91a5	e8		inx				inx 								; shift S[X+2] right
.91a6	e8		inx				inx
.91a7	20 97 8b	jsr $8b97			jsr 	NSMShiftRight
.91aa	ca		dex				dex
.91ab	ca		dex				dex
.91ac	80 ca		bra $9178			bra 	_I32MLoop 					; try again.
.91ae					_I32MExit:
.91ae	20 b4 91	jsr $91b4			jsr 	CalculateSign
.91b1	98		tya				tya 								; shift in A
.91b2	7a		ply				ply 								; restore Y and exit
.91b3	60		rts				rts
.91b4					CalculateSign:
.91b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.91b7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.91ba	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.91bd	0a		asl a				asl 	a 							; shift bit 7 into carry
.91be	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.91c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/scompare.asm

.8383					CompareStrings:
.8383	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8386	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8389	29 10		and #$10			and 	#NSBIsString
.838b	f0 2c		beq $83b9			beq 	_CSTypeError
.838d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8390	85 36		sta $36				sta 	zTemp0
.8392	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8395	85 37		sta $37				sta 	zTemp0+1
.8397	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.839a	85 38		sta $38				sta 	zTemp1
.839c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.839f	85 39		sta $39				sta 	zTemp1+1
.83a1	5a		phy				phy 								; save Y so we can access strings
.83a2	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83a4					_CSLoop:
.83a4	c8		iny				iny
.83a5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83a7	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83a9	d0 06		bne $83b1			bne 	_CSDifferent
.83ab	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83ad	d0 f5		bne $83a4			bne 	_CSLoop 					; still comparing
.83af					_CSExit:
.83af	7a		ply				ply 								; reached end, return zero in A from EOS
.83b0	60		rts				rts
.83b1					_CSDifferent:
.83b1	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83b3	90 fa		bcc $83af			bcc		_CSExit
.83b5	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83b7	80 f6		bra $83af			bra 	_CSExit
.83b9					_CSTypeError:
.83b9	4c 94 95	jmp $9594			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/shifts.asm

.83bc					ShiftLeft:
.83bc	38		sec				sec
.83bd	80 01		bra $83c0			bra 	ShiftMain
.83bf					ShiftRight:
.83bf	18		clc				clc
.83c0					ShiftMain:
.83c0	fa		plx				plx 								; restore X
.83c1	08		php				php 								; save direction
.83c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83c5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83c8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83c9	0a		asl a				asl 	a
.83ca	10 05		bpl $83d1			bpl 	_NotRef
.83cc	48		pha				pha
.83cd	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83d0	68		pla				pla
.83d1					_NotRef:
.83d1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83d3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83d6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83d9	f0 03		beq $83de			beq 	_IntegerCode 				; if clear, then we have two integers
.83db	4c 94 95	jmp $9594			jmp 	TypeError 					; anything else, type mismatch.
.83de					_IntegerCode:
.83de	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.83e1	29 e0		and #$e0			and 	#$E0
.83e3	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.83e6	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.83e9	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.83ec	d0 13		bne $8401			bne 	_SMExit0 					; if >= 32 it will always return zero.
.83ee					_SMLoop:
.83ee	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.83f1	30 11		bmi $8404			bmi 	_SMExit 					; exit if done.
.83f3	28		plp				plp 								; restore direcition setting
.83f4	08		php				php
.83f5	90 05		bcc $83fc			bcc 	_SMRight
.83f7	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; shift left if CS
.83fa	80 f2		bra $83ee			bra 	_SMLoop
.83fc					_SMRight:
.83fc	20 97 8b	jsr $8b97			jsr 	NSMShiftRight 				; shift right if CC
.83ff	80 ed		bra $83ee			bra 	_SMLoop
.8401					_SMExit0:
.8401	20 74 8b	jsr $8b74			jsr 	NSMSetZero 					; return zero.
.8404					_SMExit:
.8404	28		plp				plp 								; throw direction
.8405	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/simple.asm

.8406					AddTopTwoStack:
.8406	18		clc				clc
.8407	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.840a	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.840d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8410	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8413	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8416	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8419	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.841c	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.841f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8422	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8425	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8428	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.842b	60		rts				rts
.842c					SubTopTwoStack:
.842c	38		sec				sec
.842d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8430	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8433	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8436	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8439	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.843c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.843f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8442	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8445	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8448	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.844b	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.844e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8451	60		rts				rts
.8452					AddInteger:
.8452	fa		plx				plx
.8453	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8456	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8459	0a		asl a				asl 	a 							; shift reference bit into sign bit
.845a	0a		asl a				asl 	a
.845b	10 05		bpl $8462			bpl 	_NotRef
.845d	48		pha				pha
.845e	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8461	68		pla				pla
.8462					_NotRef:
.8462	0a		asl a				asl 	a 							; put MSB of type into A:7
.8463	30 0b		bmi $8470			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8465	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8468	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.846b	f0 06		beq $8473			beq 	_IntegerCode 				; if clear, then we have two integers
.846d	4c 1d 92	jmp $921d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8470					_StringData:
.8470	4c 26 83	jmp $8326			jmp 	StringConcat							; at least one string - don't know both are strings.
.8473					_IntegerCode:
.8473					AddCode:
.8473	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8476	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8479	10 8b		bpl $8406			bpl 	AddTopTwoStack
.847b	20 2c 84	jsr $842c			jsr 	SubTopTwoStack 				; do a physical subtraction
.847e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8481	10 09		bpl $848c			bpl 	_AddExit
.8483	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8486	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8489	20 29 8b	jsr $8b29			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.848c					_AddExit:
.848c	60		rts				rts
.848d					SubInteger:
.848d	fa		plx				plx
.848e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8491	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8494	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8495	0a		asl a				asl 	a
.8496	10 05		bpl $849d			bpl 	_NotRef
.8498	48		pha				pha
.8499	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.849c	68		pla				pla
.849d					_NotRef:
.849d	0a		asl a				asl 	a 							; put MSB of type into A:7
.849e	30 0b		bmi $84ab			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84a0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84a3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84a6	f0 06		beq $84ae			beq 	_IntegerCode 				; if clear, then we have two integers
.84a8	4c 22 92	jmp $9222			jmp 	FloatingPointSub 							; otherwise at least one float.
.84ab					_StringData:
.84ab	4c 9e 95	jmp $959e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84ae					_IntegerCode:
.84ae	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84b1	49 80		eor #$80			eor 	#$80
.84b3	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84b6	80 bb		bra $8473			bra 	AddCode 					; and do the same code as add.
.84b8					AndInteger:
.84b8	fa		plx				plx
.84b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84bc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84bf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84c0	0a		asl a				asl 	a
.84c1	10 05		bpl $84c8			bpl 	_NotRef
.84c3	48		pha				pha
.84c4	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84c7	68		pla				pla
.84c8					_NotRef:
.84c8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.84ca	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84cd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84d0	f0 03		beq $84d5			beq 	_IntegerCode 				; if clear, then we have two integers
.84d2	4c 94 95	jmp $9594			jmp 	TypeError 					; anything else, type mismatch.
.84d5					_IntegerCode:
.84d5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84d8	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.84db	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84de	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84e1	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.84e4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84e7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.84ea	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.84ed	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84f0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84f3	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.84f6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84f9	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.84fc	60		rts				rts
.84fd					OraInteger:
.84fd	fa		plx				plx
.84fe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8501	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8504	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8505	0a		asl a				asl 	a
.8506	10 05		bpl $850d			bpl 	_NotRef
.8508	48		pha				pha
.8509	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.850c	68		pla				pla
.850d					_NotRef:
.850d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.850f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8512	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8515	f0 03		beq $851a			beq 	_IntegerCode 				; if clear, then we have two integers
.8517	4c 94 95	jmp $9594			jmp 	TypeError 					; anything else, type mismatch.
.851a					_IntegerCode:
.851a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.851d	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8520	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8523	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8526	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8529	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.852c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.852f	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8532	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8535	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8538	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.853b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.853e	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8541	60		rts				rts
.8542					EorInteger:
.8542	fa		plx				plx
.8543	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8546	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8549	0a		asl a				asl 	a 							; shift reference bit into sign bit
.854a	0a		asl a				asl 	a
.854b	10 05		bpl $8552			bpl 	_NotRef
.854d	48		pha				pha
.854e	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8551	68		pla				pla
.8552					_NotRef:
.8552	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8554	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8557	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.855a	f0 03		beq $855f			beq 	_IntegerCode 				; if clear, then we have two integers
.855c	4c 94 95	jmp $9594			jmp 	TypeError 					; anything else, type mismatch.
.855f					_IntegerCode:
.855f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8562	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8565	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8568	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.856b	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.856e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8571	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8574	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8577	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.857a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.857d	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8580	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8583	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8586	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/binary/tostring.asm

.91c2					ConvertInt16:
.91c2	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.91c5	8e 10 06	stx $0610			stx 	NSMantissa1
.91c8	9c 18 06	stz $0618			stz 	NSMantissa2
.91cb	9c 20 06	stz $0620			stz 	NSMantissa3
.91ce	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.91d1	a2 00		ldx #$00			ldx 	#0 							; stack level
.91d3	a9 0a		lda #$0a			lda 	#10 						; base
.91d5	80 00		bra $91d7			bra 	ConvertInt32
.91d7					ConvertInt32:
.91d7	5a		phy				phy
.91d8	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.91da	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.91dd	10 08		bpl $91e7			bpl 	_CI32NotNeg
.91df	48		pha				pha
.91e0	a9 2d		lda #$2d			lda 	#'-'
.91e2	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.91e5	c8		iny				iny
.91e6	68		pla				pla
.91e7					_CI32NotNeg:
.91e7	20 f5 91	jsr $91f5			jsr 	_CI32DivideConvert 			; recursive conversion
.91ea	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.91ec	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.91ef	7a		ply				ply
.91f0	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.91f2	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.91f4	60		rts				rts
.91f5					_CI32DivideConvert:
.91f5	e8		inx				inx 								; write to next slot up
.91f6	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.91f9	ca		dex				dex
.91fa	20 f7 90	jsr $90f7			jsr 	Int32Divide 				; divide
.91fd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9200	48		pha				pha
.9201	20 a7 90	jsr $90a7			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9204	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; is it zero ?
.9207	f0 06		beq $920f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9209	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.920c	20 f5 91	jsr $91f5			jsr 	_CI32DivideConvert 			; and recusrively call.
.920f					_CI32NoRecurse:
.920f	68		pla				pla 								; remainder
.9210	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9212	90 02		bcc $9216			bcc 	_CI32NotHex
.9214	69 26		adc #$26			adc 	#6+32
.9216					_CI32NotHex:
.9216	69 30		adc #$30			adc 	#48
.9218	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.921b	c8		iny				iny
.921c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/expression.asm


;******  Processing file: ./core/expressions/../../generated/precedence.dat

.8587					PrecedenceLevel:
>8587	04					.byte	 4	; $00 <<
>8588	02					.byte	 2	; $01 <=
>8589	02					.byte	 2	; $02 <>
>858a	00					.byte	 0	; $03 !!3
>858b	00					.byte	 0	; $04 ><
>858c	02					.byte	 2	; $05 >=
>858d	04					.byte	 4	; $06 >>
>858e	00					.byte	 0	; $07 !!7
>858f	00					.byte	 0	; $08 !!8
>8590	00					.byte	 0	; $09 !!9
>8591	00					.byte	 0	; $0a !!10
>8592	00					.byte	 0	; $0b !!11
>8593	00					.byte	 0	; $0c !!12
>8594	00					.byte	 0	; $0d !!13
>8595	00					.byte	 0	; $0e !!14
>8596	00					.byte	 0	; $0f !!15
>8597	00					.byte	 0	; $10 @
>8598	00					.byte	 0	; $11 !!17
>8599	00					.byte	 0	; $12 !!18
>859a	00					.byte	 0	; $13 [
>859b	04					.byte	 4	; $14 \
>859c	00					.byte	 0	; $15 ]
>859d	01					.byte	 1	; $16 ^
>859e	00					.byte	 0	; $17 _
>859f	00					.byte	 0	; $18 `
>85a0	00					.byte	 0	; $19 !!25
>85a1	00					.byte	 0	; $1a !!26
>85a2	00					.byte	 0	; $1b {
>85a3	01					.byte	 1	; $1c |
>85a4	00					.byte	 0	; $1d }
>85a5	00					.byte	 0	; $1e ~
>85a6	00					.byte	 0	; $1f [7m<7F>[m
>85a7	00					.byte	 0	; $20
>85a8	05					.byte	 5	; $21 !
>85a9	00					.byte	 0	; $22 "
>85aa	00					.byte	 0	; $23 #
>85ab	05					.byte	 5	; $24 $
>85ac	04					.byte	 4	; $25 %
>85ad	01					.byte	 1	; $26 &
>85ae	00					.byte	 0	; $27 '
>85af	00					.byte	 0	; $28 (
>85b0	00					.byte	 0	; $29 )
>85b1	04					.byte	 4	; $2a *
>85b2	03					.byte	 3	; $2b +
>85b3	00					.byte	 0	; $2c ,
>85b4	03					.byte	 3	; $2d -
>85b5	00					.byte	 0	; $2e .
>85b6	04					.byte	 4	; $2f /
>85b7	00					.byte	 0	; $30 0
>85b8	00					.byte	 0	; $31 1
>85b9	00					.byte	 0	; $32 2
>85ba	00					.byte	 0	; $33 3
>85bb	00					.byte	 0	; $34 4
>85bc	00					.byte	 0	; $35 5
>85bd	00					.byte	 0	; $36 6
>85be	00					.byte	 0	; $37 7
>85bf	00					.byte	 0	; $38 8
>85c0	00					.byte	 0	; $39 9
>85c1	00					.byte	 0	; $3a :
>85c2	00					.byte	 0	; $3b ;
>85c3	02					.byte	 2	; $3c <
>85c4	02					.byte	 2	; $3d =
>85c5	02					.byte	 2	; $3e >
>85c6	05					.byte	 5	; $3f ?

;******  Return to file: ./core/expressions/expression.asm

.85c7					EvaluateExpressionAt0:
.85c7	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.85c9					EvaluateExpression:
.85c9	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.85cb					EvaluateExpressionAtPrecedence:
.85cb	48		pha				pha 								; save precedence level
.85cc	20 c7 87	jsr $87c7			jsr 	EvaluateTerm 				; evaluate term into level X.
.85cf	68		pla				pla 								; restore precedence level.
.85d0					_EXPRLoop:
.85d0	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.85d2	b1 30		lda ($30),y			lda 	(codePtr),y
.85d4	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.85d6	b0 25		bcs $85fd			bcs 	_EXPRExit
.85d8	da		phx				phx 								; read the operator precedence
.85d9	aa		tax				tax
.85da	bd 87 85	lda $8587,x			lda 	PrecedenceLevel,x
.85dd	fa		plx				plx
.85de	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.85e0	f0 1b		beq $85fd			beq 	_EXPRExit
.85e2	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.85e4	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.85e6	c5 37		cmp $37				cmp 	zTemp0+1
.85e8	b0 13		bcs $85fd			bcs		_EXPRExit 					; if current >= operator exit
.85ea	48		pha				pha 								; save current precedence.
.85eb	b1 30		lda ($30),y			lda 	(codePtr),y
.85ed	c8		iny				iny
.85ee	48		pha				pha
.85ef	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.85f1	e8		inx				inx 								; work out the right hand side.
.85f2	20 cb 85	jsr $85cb			jsr 	EvaluateExpressionAtPrecedence
.85f5	ca		dex				dex
.85f6	68		pla				pla 								; get operator, call the code.
.85f7	20 00 86	jsr $8600			jsr 	_EXPRCaller
.85fa	68		pla				pla 								; restore precedence level
.85fb	80 d3		bra $85d0			bra 	_EXPRLoop 					; and go round.
.85fd					_EXPRExit:
.85fd	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.85ff	60		rts				rts
.8600					_EXPRCaller:
.8600	da		phx				phx 								; save on stack, first thing is to restore it
.8601	0a		asl a				asl 	a 							; double so can use vectors into X
.8602	aa		tax				tax
.8603	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/addsub.asm

.921d					FloatingPointAdd:
.921d	20 be 93	jsr $93be			jsr 	FloatPrepare 				; prepare for floats
.9220	80 0b		bra $922d			bra 	FloatAdd
.9222					FloatingPointSub:
.9222	20 be 93	jsr $93be			jsr 	FloatPrepare 				; prepare for floats
.9225					FloatSubtract:
.9225	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9228	49 80		eor #$80			eor 	#$80
.922a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.922d					FloatAdd:
.922d	48		pha				pha
.922e	5a		phy				phy
.922f	20 cf 93	jsr $93cf			jsr 	NSNormalise 				; normalise S[X]
.9232	f0 54		beq $9288			beq 	_FAReturn1
.9234	e8		inx				inx 								; normalise S[X+1]
.9235	20 cf 93	jsr $93cf			jsr 	NSNormalise
.9238	ca		dex				dex
.9239	c9 00		cmp #$00			cmp 	#0
.923b	f0 6f		beq $92ac			beq 	_FAExit 					; if so, just return A
.923d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9240	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9243	f0 1b		beq $9260			beq 	_FAExponentsEqual
.9245	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9248	a8		tay				tay
.9249	38		sec				sec 								; do a signed comparison of the exponents.
.924a	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.924d	50 02		bvc $9251			bvc 	_FANoSignedChange
.924f	49 80		eor #$80			eor 	#$80
.9251					_FANoSignedChange:
.9251	29 80		and #$80			and 	#$80
.9253	10 03		bpl $9258			bpl 	_FAHaveMax
.9255	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9258					_FAHaveMax:
.9258	20 af 92	jsr $92af			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.925b	e8		inx				inx
.925c	20 af 92	jsr $92af			jsr 	_FAShiftToExponent
.925f	ca		dex				dex
.9260					_FAExponentsEqual:
.9260	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9263	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9266	30 10		bmi $9278			bmi 	_FADifferentSigns
.9268	20 06 84	jsr $8406			jsr 	AddTopTwoStack 				; do the add of the mantissae
.926b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.926e	10 3c		bpl $92ac			bpl 	_FAExit 					; if no, we are done.
.9270	20 97 8b	jsr $8b97			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9273	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9276	80 34		bra $92ac			bra 	_FAExit
.9278					_FADifferentSigns:
.9278	20 2c 84	jsr $842c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.927b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.927e	10 2c		bpl $92ac			bpl 	_FAExit 					; if no, we are done.
.9280	20 20 8b	jsr $8b20			jsr 	NSMNegate 					; netate result
.9283	20 29 8b	jsr $8b29			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9286	80 24		bra $92ac			bra 	_FAExit
.9288					_FAReturn1:
.9288	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.928b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.928e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9291	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9294	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9297	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.929a	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.929d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92a0	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.92a3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92a6	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.92a9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92ac					_FAExit:
.92ac	7a		ply				ply
.92ad	68		pla				pla
.92ae	60		rts				rts
.92af					_FAShiftToExponent:
.92af					_FAShiftToExponent2:
.92af	98		tya				tya 								; compare Y to exponent
.92b0	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.92b3	f0 08		beq $92bd			beq 	_FASEExit 					; exit if so.
.92b5	20 97 8b	jsr $8b97			jsr 	NSMShiftRight	 			; shift the mantissa right
.92b8	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.92bb	80 f2		bra $92af			bra 	_FAShiftToExponent2
.92bd					_FASEExit:
.92bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/compare.asm

.92be					CompareFloat:
.92be	20 25 92	jsr $9225			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.92c1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.92c4	29 f8		and #$f8			and 	#$F8
.92c6	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.92c9	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.92cc	f0 09		beq $92d7			beq 	_FCExit 					; zero, so approximately identical
.92ce	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.92d0	3c 00 06	bit $0600,x			bit 	NSStatus,x
.92d3	10 02		bpl $92d7			bpl 	_FCExit
.92d5					_FCNegative:
.92d5	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.92d7					_FCExit:
.92d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/divide.asm

.92d8					FDivideCommand:
.92d8	fa		plx				plx	 								; restore stack position
.92d9	20 be 93	jsr $93be			jsr 	FloatPrepare 				; prepare for floats
.92dc					FloatDivide:
.92dc	48		pha				pha
.92dd	e8		inx				inx
.92de	20 cf 93	jsr $93cf			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.92e1	ca		dex				dex
.92e2	c9 00		cmp #$00			cmp 	#0
.92e4	f0 20		beq $9306			beq 	_FDZero
.92e6	20 cf 93	jsr $93cf			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.92e9	f0 19		beq $9304			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.92eb	20 19 91	jsr $9119			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.92ee	20 a7 90	jsr $90a7			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.92f1	20 cf 93	jsr $93cf			jsr		NSNormalise 				; renormalise
.92f4	20 b4 91	jsr $91b4			jsr 	CalculateSign 				; calculate result sign
.92f7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.92fa	38		sec				sec
.92fb	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.92fe	38		sec				sec
.92ff	e9 1e		sbc #$1e			sbc 	#30
.9301	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9304					_FDExit:
.9304	68		pla				pla
.9305	60		rts				rts
.9306					_FDZero:
.9306	a9 03		lda #$03		lda	#3
.9308	4c 1b 82	jmp $821b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/fractional.asm

.930b					FloatFractionalPart:
.930b	5a		phy				phy
.930c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.930f	29 7f		and #$7f			and 	#$7F
.9311	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9314	20 cf 93	jsr $93cf			jsr 	NSNormalise
.9317	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.931a	38		sec				sec
.931b	e9 e0		sbc #$e0			sbc 	#$E0
.931d	90 31		bcc $9350			bcc 	_FFPExit 					; already fractional
.931f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9321	b0 2a		bcs $934d			bcs 	_FFPZero
.9323	a8		tay				tay 								; put count to do in Y
.9324	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9327	20 52 93	jsr $9352			jsr 	_FFPPartial
.932a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.932d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9330	20 52 93	jsr $9352			jsr 	_FFPPartial
.9333	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9336	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9339	20 52 93	jsr $9352			jsr 	_FFPPartial
.933c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.933f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9342	20 52 93	jsr $9352			jsr 	_FFPPartial
.9345	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9348	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; zeroed check.
.934b	d0 03		bne $9350			bne 	_FFPExit
.934d					_FFPZero:
.934d	20 74 8b	jsr $8b74			jsr 	NSMSetZero
.9350					_FFPExit:
.9350	7a		ply				ply
.9351	60		rts				rts
.9352					_FFPPartial:
.9352	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9354	f0 17		beq $936d			beq 	_FFFPPExit
.9356	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9358	b0 0c		bcs $9366			bcs 	_FFFPPWholeByte
.935a	5a		phy				phy
.935b					_FFFPPLeft:
.935b	0a		asl a				asl 	a
.935c	88		dey				dey
.935d	d0 fc		bne $935b			bne 	_FFFPPLeft
.935f	7a		ply				ply
.9360					_FFFPPRight:
.9360	4a		lsr a				lsr 	a
.9361	88		dey				dey
.9362	d0 fc		bne $9360			bne 	_FFFPPRight
.9364	80 07		bra $936d			bra 	_FFFPPExit
.9366					_FFFPPWholeByte:
.9366	98		tya				tya 								; subtract 8 from count
.9367	38		sec				sec
.9368	e9 08		sbc #$08			sbc 	#8
.936a	a8		tay				tay
.936b	a9 00		lda #$00			lda 	#0 							; and clear all
.936d					_FFFPPExit:
.936d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/integer.asm

.936e					FloatIntegerPart:
.936e	48		pha				pha
.936f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9372	f0 1f		beq $9393			beq 	_FIPExit 					; if so do nothing
.9374	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; is it zero ?
.9377	f0 17		beq $9390			beq 	_FIPZero 					; if so return zero.
.9379	20 cf 93	jsr $93cf			jsr 	NSNormalise 				; normalise
.937c	f0 12		beq $9390			beq 	_FIPZero 					; normalised to zero, exit zero
.937e					_FIPShift:
.937e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9381	10 08		bpl $938b			bpl 	_FIPCheckZero
.9383	20 97 8b	jsr $8b97			jsr 	NSMShiftRight 				; shift mantissa right
.9386	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9389	80 f3		bra $937e			bra 	_FIPShift
.938b					_FIPCheckZero:
.938b	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; avoid -0 problem
.938e	d0 03		bne $9393			bne 	_FIPExit 					; set to zero if mantissa zero.
.9390					_FIPZero:
.9390	20 74 8b	jsr $8b74			jsr 	NSMSetZero
.9393					_FIPExit:
.9393	68		pla				pla
.9394	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/multiply.asm

.9395					FloatingPointMultiply:
.9395	20 be 93	jsr $93be			jsr 	FloatPrepare 				; prepare for floats
.9398					FloatMultiply:
.9398	48		pha				pha
.9399	20 cf 93	jsr $93cf			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.939c	f0 1b		beq $93b9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.939e	e8		inx				inx
.939f	20 cf 93	jsr $93cf			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93a2	ca		dex				dex
.93a3	c9 00		cmp #$00			cmp 	#0
.93a5	f0 0f		beq $93b6			beq 	_FDSetZero
.93a7	20 6f 91	jsr $916f			jsr 	MultiplyShort 				; calculate the result.
.93aa	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.93ad	18		clc				clc
.93ae	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.93b1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.93b4	80 03		bra $93b9			bra 	_FDExit
.93b6					_FDSetZero:
.93b6	20 74 8b	jsr $8b74			jsr 	NSMSetZero 					; return 0
.93b9					_FDExit:
.93b9	20 cf 93	jsr $93cf			jsr 	NSNormalise 				; normalise the result
.93bc	68		pla				pla
.93bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/float/utility.asm

.93be					FloatPrepare:
.93be	20 06 86	jsr $8606			jsr 	DereferenceTopTwo 			; dereference the top two values
.93c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.93c4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.93c7	29 10		and #$10			and 	#NSBIsString
.93c9	d0 01		bne $93cc			bne 	_FDType
.93cb	60		rts				rts
.93cc					_FDType:
.93cc	4c 94 95	jmp $9594			jmp 	TypeError
.93cf					NSNormalise:
.93cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.93d2	29 80		and #$80			and 	#$80
.93d4	09 08		ora #$08			ora 	#NSTFloat
.93d6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93d9	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; if zero exit
.93dc	d0 09		bne $93e7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.93de	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.93e1	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.93e4	a9 00		lda #$00			lda 	#0 							; set Z flag
.93e6	60		rts				rts
.93e7					_NSNormaliseOptimise:
.93e7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.93ea	d0 22		bne $940e			bne 	_NSNormaliseLoop
.93ec	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.93ef	30 1d		bmi $940e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.93f1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.93f4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93f7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93fa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.93fd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9400	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9403	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9406	38		sec				sec
.9407	e9 08		sbc #$08			sbc 	#8
.9409	9d 28 06	sta $0628,x			sta 	NSExponent,x
.940c	80 d9		bra $93e7			bra 	_NSNormaliseOptimise
.940e					_NSNormaliseLoop:
.940e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9411	70 08		bvs $941b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9413	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; shift mantissa left
.9416	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9419	80 f3		bra $940e			bra 	_NSNormaliseLoop
.941b					_NSNExit:
.941b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.941d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/dereference.asm

.8606					DereferenceTopTwo:
.8606	e8		inx				inx
.8607	20 0b 86	jsr $860b			jsr 	Dereference 				; deref x+1
.860a	ca		dex				dex  								; falls through to deref x
.860b					Dereference:
.860b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.860e	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8610	f0 57		beq $8669			beq 	_DRFExit 					; not a reference
.8612	5a		phy				phy
.8613	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8616	85 36		sta $36				sta 	zTemp0
.8618	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.861b	85 37		sta $37				sta 	zTemp0+1
.861d	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8620	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8622	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8625	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8628	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.862a	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.862c	f0 0f		beq $863d			beq 	_DRFDereferenceTwo
.862e	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8630	f0 39		beq $866b			beq 	_DRFFull
.8632	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8635	29 03		and #$03			and 	#3
.8637	f0 32		beq $866b			beq 	_DRFFull 					; the whole word
.8639	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.863b	f0 07		beq $8644			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.863d					_DRFDereferenceTwo:
.863d	a0 01		ldy #$01			ldy 	#1
.863f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8641	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8644					_DRFClear23:
.8644	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8647	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.864a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.864d	29 18		and #$18			and 	#NSBTypeMask
.864f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8652	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8654	d0 12		bne $8668			bne 	_DRFNotString
.8656	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8659	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.865c	d0 0a		bne $8668			bne 	_DRFNotString
.865e	a9 6a		lda #$6a			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8660	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8663	a9 86		lda #$86			lda 	#_DRFNullString >> 8
.8665	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8668					_DRFNotString
.8668	7a		ply				ply 								; restore Y and exit
.8669					_DRFExit:
.8669	60		rts				rts
.866a					_DRFNullString:
>866a	00						.byte 	0
.866b					_DRFFull:
.866b	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.866d	b1 36		lda ($36),y			lda 	(zTemp0),y
.866f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8672	c8		iny				iny
.8673	b1 36		lda ($36),y			lda 	(zTemp0),y
.8675	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8678	c8		iny				iny
.8679	b1 36		lda ($36),y			lda 	(zTemp0),y
.867b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.867e	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8681	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8684	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8686	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8689	f0 06		beq $8691			beq 	_DRFNoExponent
.868b	c8		iny				iny 								; if not, read the exponent as well.
.868c	b1 36		lda ($36),y			lda 	(zTemp0),y
.868e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8691					_DRFNoExponent:
.8691	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8694	10 0d		bpl $86a3			bpl 	_DRFExit2 					; if not, then exit.
.8696	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8698	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.869b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.869e	09 80		ora #$80			ora 	#NSBIsNegative
.86a0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86a3					_DRFExit2:
.86a3	7a		ply				ply
.86a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.86a5					EncodeNumberStart:
.86a5	38		sec				sec
.86a6	80 01		bra $86a9			bra 	EncodeNumberContinue+1
.86a8					EncodeNumberContinue:
.86a8	18		clc				clc
.86a9					EncodeNumber:
.86a9	08		php				php 								; save reset.
.86aa	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.86ac	f0 12		beq $86c0			beq 	_ENIsOkay
.86ae	c9 30		cmp #$30			cmp 	#"0"
.86b0	90 04		bcc $86b6			bcc 	_ENBadNumber
.86b2	c9 3a		cmp #$3a			cmp 	#"9"+1
.86b4	90 0a		bcc $86c0			bcc 	_ENIsOkay
.86b6					_ENBadNumber:
.86b6	28		plp				plp 								; throw saved reset
.86b7	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.86ba	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.86bc	f0 7e		beq $873c			beq 	_ENConstructFinal
.86be					_ENFail:
.86be	18		clc				clc 								; not allowed
.86bf	60		rts				rts
.86c0					_ENIsOkay:
.86c0	28		plp				plp 								; are we restarting
.86c1	90 15		bcc $86d8			bcc 	_ENNoRestart
.86c3					_ENStartEncode:
.86c3	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.86c5	f0 0c		beq $86d3			beq 	_ENFirstDP
.86c7	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.86c9	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.86cc	a9 01		lda #$01			lda 	#ESTA_Low
.86ce					_ENExitChange:
.86ce	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.86d1	38		sec				sec
.86d2	60		rts				rts
.86d3					_ENFirstDP:
.86d3	20 74 8b	jsr $8b74			jsr 	NSMSetZero 					; clear integer part
.86d6	80 3f		bra $8717			bra 	_ESTASwitchFloat			; go straight to float and exi
.86d8					_ENNoRestart:
.86d8	48		pha				pha 								; save on stack.
.86d9	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.86dc	c9 01		cmp #$01			cmp 	#ESTA_Low
.86de	f0 09		beq $86e9			beq  	_ESTALowState
.86e0	c9 02		cmp #$02			cmp 	#ESTA_High
.86e2	f0 29		beq $870d			beq 	_ESTAHighState
.86e4	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.86e6	f0 3b		beq $8723			beq 	_ESTADecimalState
>86e8	db						.byte 	$DB 						; causes a break in the emulator
.86e9					_ESTALowState:
.86e9	68		pla				pla 								; get value back
.86ea	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.86ec	f0 29		beq $8717			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.86ee	29 0f		and #$0f			and 	#15 						; make digit
.86f0	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.86f3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.86f6	0a		asl a				asl 	a
.86f7	0a		asl a				asl 	a
.86f8	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.86fb	0a		asl a				asl 	a
.86fc	6d 06 07	adc $0706			adc 	DigitTemp
.86ff	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8702	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8704	90 05		bcc $870b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8706	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8708	8d 05 07	sta $0705			sta 	EncodeState
.870b					_ESTANoSwitch:
.870b	38		sec				sec
.870c	60		rts				rts
.870d					_ESTAHighState:
.870d	68		pla				pla 								; get value back
.870e	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8710	f0 05		beq $8717			beq 	_ESTASwitchFloat
.8712	20 76 87	jsr $8776			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8715	38		sec				sec
.8716	60		rts				rts
.8717					_ESTASwitchFloat:
.8717	9c 07 07	stz $0707			stz 	DecimalCount
.871a	e8		inx				inx 								; zero the decimal additive.
.871b	20 74 8b	jsr $8b74			jsr 	NSMSetZero
.871e	ca		dex				dex
.871f	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8721	80 ab		bra $86ce			bra 	_ENExitChange
.8723					_ESTADecimalState:
.8723	68		pla				pla 								; digit.
.8724	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8726	f0 96		beq $86be			beq 	_ENFail
.8728	e8		inx				inx 								; put digit into fractional part of X+1
.8729	20 76 87	jsr $8776			jsr 	ESTAShiftDigitIntoMantissa
.872c	ca		dex				dex
.872d	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8730	ad 07 07	lda $0707			lda 	DecimalCount
.8733	c9 0b		cmp #$0b			cmp 	#11
.8735	f0 02		beq $8739			beq 	_ESTADSFail
.8737	38		sec				sec
.8738	60		rts				rts
.8739					_ESTADSFail:
.8739	4c 8f 95	jmp $958f			jmp 	RangeError
.873c					_ENConstructFinal:
.873c	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.873f	f0 33		beq $8774			beq 	_ENCFExit 					; no decimals
.8741	5a		phy				phy
.8742	0a		asl a				asl 	a 							; x 4 and CLC
.8743	0a		asl a				asl 	a
.8744	6d 07 07	adc $0707			adc 	DecimalCount
.8747	a8		tay				tay
.8748	b9 4e 95	lda $954e,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.874b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.874e	b9 4f 95	lda $954f,y			lda 	DecimalScalarTable-5+1,y
.8751	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8754	b9 50 95	lda $9550,y			lda 	DecimalScalarTable-5+2,y
.8757	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.875a	b9 51 95	lda $9551,y			lda 	DecimalScalarTable-5+3,y
.875d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8760	b9 52 95	lda $9552,y			lda 	DecimalScalarTable-5+4,y
.8763	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8766	a9 08		lda #$08			lda 	#NSTFloat
.8768	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.876b	7a		ply				ply
.876c	e8		inx				inx 								; multiply decimal const by decimal scalar
.876d	20 98 93	jsr $9398			jsr 	FloatMultiply
.8770	ca		dex				dex
.8771	20 2d 92	jsr $922d			jsr 	FloatAdd 					; add to integer part.
.8774					_ENCFExit:
.8774	18		clc				clc 								; reject the digit.
.8775	60		rts				rts
.8776					ESTAShiftDigitIntoMantissa:
.8776	29 0f		and #$0f			and 	#15 						; save digit
.8778	48		pha				pha
.8779	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.877c	48		pha				pha
.877d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8780	48		pha				pha
.8781	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8784	48		pha				pha
.8785	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8788	48		pha				pha
.8789	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; x 2
.878c	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; x 4
.878f	18		clc				clc 								; pop mantissa and add
.8790	68		pla				pla
.8791	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8794	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8797	68		pla				pla
.8798	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.879b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.879e	68		pla				pla
.879f	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.87a2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87a5	68		pla				pla
.87a6	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.87a9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.87ac	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; x 10
.87af	68		pla				pla 								; add digit
.87b0	18		clc				clc
.87b1	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.87b4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87b7	90 0d		bcc $87c6			bcc 	_ESTASDExit
.87b9	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.87bc	d0 08		bne $87c6			bne 	_ESTASDExit
.87be	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.87c1	d0 03		bne $87c6			bne 	_ESTASDExit
.87c3	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.87c6					_ESTASDExit:
.87c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/term/term.asm

.87c7					EvaluateTerm:
.87c7	b1 30		lda ($30),y			lda 	(codePtr),y
.87c9	30 18		bmi $87e3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.87cb	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.87cd	b0 6f		bcs $883e			bcs 	_ETVariable
.87cf	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.87d1	90 6f		bcc $8842			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.87d3	c9 3a		cmp #$3a			cmp 	#'9'+1
.87d5	b0 6b		bcs $8842			bcs 	_ETPuncUnary
.87d7	20 a5 86	jsr $86a5			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.87da					_ETNumber:
.87da	c8		iny				iny 								; keep encoding until we have the numbers
.87db	b1 30		lda ($30),y			lda 	(codePtr),y
.87dd	20 a8 86	jsr $86a8			jsr 	EncodeNumberContinue
.87e0	b0 f8		bcs $87da			bcs 	_ETNumber 					; go back if accepted.
.87e2	60		rts				rts
.87e3					_ETCheckUnary:
.87e3	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.87e5	f0 41		beq $8828			beq 	_ETString
.87e7	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.87e9	f0 12		beq $87fd			beq 	_ETHexConstant
.87eb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.87ed	90 0b		bcc $87fa			bcc 	_ETSyntaxError
.87ef	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.87f1	b0 07		bcs $87fa			bcs 	_ETSyntaxError
.87f3	da		phx				phx 								; push X on the stack
.87f4	0a		asl a				asl 	a 							; put vector x 2 into X
.87f5	aa		tax				tax
.87f6	c8		iny				iny 								; consume unary function token
.87f7	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.87fa					_ETSyntaxError:
.87fa	4c 8a 95	jmp $958a			jmp 	SyntaxError
.87fd					_ETHexConstant:
.87fd	c8		iny				iny 								; skip #
.87fe	c8		iny				iny 								; skip count
.87ff	20 74 8b	jsr $8b74			jsr 	NSMSetZero 					; clear result
.8802					_ETHLoop:
.8802	b1 30		lda ($30),y			lda 	(codePtr),y
.8804	c8		iny				iny 								; and consume
.8805	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8807	f0 1e		beq $8827			beq 	_ETHExit
.8809	48		pha				pha 								; save on stack.
.880a	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; x 2
.880d	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; x 4
.8810	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; x 8
.8813	20 89 8b	jsr $8b89			jsr 	NSMShiftLeft 				; x 16
.8816	68		pla				pla 								; ASCII
.8817	c9 41		cmp #$41			cmp 	#'A'
.8819	90 02		bcc $881d			bcc 	_ETHNotChar
.881b	e9 07		sbc #$07			sbc 	#7
.881d					_ETHNotChar:
.881d	29 0f		and #$0f			and 	#15 						; digit now
.881f	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8822	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8825	80 db		bra $8802			bra 	_ETHLoop 					; go round.
.8827					_ETHExit:
.8827	60		rts				rts
.8828					_ETString:
.8828	c8		iny				iny 								; look at length
.8829	b1 30		lda ($30),y			lda 	(codePtr),y
.882b	48		pha				pha
.882c	c8		iny				iny 								; first character
.882d	20 46 81	jsr $8146			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8830	68		pla				pla 								; restore count and save
.8831	85 36		sta $36				sta 	zTemp0
.8833	98		tya				tya 								; add length to Y to skip it.
.8834	18		clc				clc
.8835	65 36		adc $36				adc 	zTemp0
.8837	a8		tay				tay
.8838	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.883a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.883d	60		rts				rts
.883e					_ETVariable:
>883e	db						.byte 	$DB 						; causes a break in the emulator
.883f	4c ff ff	jmp $ffff			jmp 	$FFFF
.8842					_ETPuncUnary:
.8842	c8		iny				iny 								; consume the unary character
.8843	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8845	f0 31		beq $8878			beq 	_ETUnaryNegate
.8847	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8849	f0 3d		beq $8888			beq 	_ETDereference
.884b	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.884d	f0 58		beq $88a7			beq 	_ETParenthesis
.884f	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.8851	f0 43		beq $8896			beq 	_ETStringReference
.8853	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8855	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8857	f0 06		beq $885f			beq 	_ETIndirection
.8859	e6 36		inc $36				inc 	zTemp0
.885b	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.885d	d0 9b		bne $87fa			bne 	_ETSyntaxError
.885f					_ETIndirection:
.885f	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8861	1a		inc a				inc 	a
.8862	48		pha				pha
.8863	20 c7 87	jsr $87c7			jsr 	EvaluateTerm				; evaluate the term
.8866	20 0b 86	jsr $860b			jsr 	Dereference 				; dereference it.
.8869	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.886c	d0 07		bne $8875			bne 	_ETTypeMismatch
.886e	68		pla				pla 								; indirection 1-2
.886f	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8871	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8874	60		rts				rts
.8875					_ETTypeMismatch:
.8875	4c 94 95	jmp $9594			jmp 	TypeError
.8878					_ETUnaryNegate:
.8878	20 c7 87	jsr $87c7			jsr 	EvaluateTerm				; evaluate the term
.887b	20 0b 86	jsr $860b			jsr 	Dereference 				; dereference it.
.887e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8881	29 10		and #$10			and 	#NSTString
.8883	d0 f0		bne $8875			bne 	_ETTypeMismatch
.8885	4c 20 8b	jmp $8b20			jmp 	NSMNegate  					; just toggles the sign bit.
.8888					_ETDereference:
.8888	20 c7 87	jsr $87c7			jsr 	EvaluateTerm				; evaluate the term
.888b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.888e	29 20		and #$20			and 	#NSBIsReference
.8890	f0 e3		beq $8875			beq 	_ETTypeMismatch
.8892	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8895	60		rts				rts
.8896					_ETStringReference:
.8896	20 c7 87	jsr $87c7			jsr 	EvaluateTerm				; evaluate the term
.8899	20 0b 86	jsr $860b			jsr 	Dereference 				; dereference it.
.889c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.889f	d0 d4		bne $8875			bne 	_ETTypeMismatch
.88a1	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.88a3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88a6	60		rts				rts
.88a7					_ETParenthesis:
.88a7	20 c9 85	jsr $85c9			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.88aa	20 68 90	jsr $9068			jsr 	CheckRightBracket 			; check for )
.88ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/abs.asm

.941e					AbsUnary:
.941e	fa		plx				plx 								; restore stack pos
.941f	20 c8 8a	jsr $8ac8			jsr 	EvaluateNumber 				; get a float or int
.9422	20 68 90	jsr $9068			jsr 	CheckRightBracket
.9425	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9428	29 7f		and #$7f			and 	#$7F
.942a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.942d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/alloc.asm

.88ae					AllocUnary:
.88ae	fa		plx				plx 								; restore stack pos
.88af	20 00 8b	jsr $8b00			jsr 	Evaluate16BitInteger		; get bytes required.
.88b2	20 68 90	jsr $9068			jsr 	CheckRightBracket
.88b5	da		phx				phx 								; save X/Y
.88b6	5a		phy				phy
.88b7	8a		txa				txa 								; copy X into Y
.88b8	a8		tay				tay
.88b9	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.88bc	aa		tax				tax
.88bd	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.88c0	20 cd 88	jsr $88cd			jsr 	AllocateXABytes 			; allocate memory
.88c3	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.88c6	8a		txa				txa
.88c7	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.88ca	7a		ply				ply
.88cb	fa		plx				plx
.88cc	60		rts				rts
.88cd					AllocateXABytes:
.88cd	5a		phy				phy
.88ce	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.88d1	5a		phy				phy
.88d2	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.88d5	5a		phy				phy
.88d6	18		clc				clc
.88d7	6d 0c 07	adc $070c			adc 	lowMemPtr
.88da	8d 0c 07	sta $070c			sta 	lowMemPtr
.88dd	8a		txa				txa
.88de	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.88e1	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.88e4	fa		plx				plx
.88e5	68		pla				pla
.88e6	7a		ply				ply
.88e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/asc.asm

.942e					AscUnary:
.942e	fa		plx				plx 								; restore stack pos
.942f	20 d3 8a	jsr $8ad3			jsr 	EvaluateString 				; get a string
.9432	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9434	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.9437	20 68 90	jsr $9068			jsr 	CheckRightBracket
.943a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/frac.asm

.943b					FracUnary:
.943b	fa		plx				plx 								; restore stack pos
.943c	20 c8 8a	jsr $8ac8			jsr 	EvaluateNumber 				; get a float or int
.943f	20 68 90	jsr $9068			jsr 	CheckRightBracket
.9442	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9445	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9447	f0 04		beq $944d			beq 	_IUZero
.9449	20 0b 93	jsr $930b			jsr 	FloatFractionalPart
.944c	60		rts				rts
.944d					_IUZero:
.944d	20 74 8b	jsr $8b74			jsr 	NSMSetZero
.9450	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/int.asm

.9451					IntUnary:
.9451	fa		plx				plx 								; restore stack pos
.9452	20 c8 8a	jsr $8ac8			jsr 	EvaluateNumber 				; get a float or int
.9455	20 68 90	jsr $9068			jsr 	CheckRightBracket
.9458	bd 00 06	lda $0600,x			lda 	NSStatus,x
.945b	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.945d	f0 03		beq $9462			beq 	_IUExit
.945f	20 6e 93	jsr $936e			jsr 	FloatIntegerPart
.9462					_IUExit:
.9462	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/len.asm

.9463					LenUnary:
.9463	fa		plx				plx 								; restore stack pos
.9464	20 d3 8a	jsr $8ad3			jsr 	EvaluateString 				; get a string
.9467	5a		phy				phy
.9468	a0 00		ldy #$00			ldy 	#0 							; find length
.946a					_LenFind:
.946a	b1 36		lda ($36),y			lda 	(zTemp0),y
.946c	f0 06		beq $9474			beq 	_LenExit
.946e	c8		iny				iny
.946f	d0 f9		bne $946a			bne 	_LenFind
.9471	4c 8f 95	jmp $958f			jmp 	RangeError 					; string > 255
.9474					_LenExit:
.9474	98		tya				tya
.9475	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.9478	7a		ply				ply
.9479	20 68 90	jsr $9068			jsr 	CheckRightBracket
.947c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/not.asm

.88e8					Unary_Not:
.88e8	fa		plx				plx
.88e9	20 eb 8a	jsr $8aeb			jsr 	EvaluateInteger 			; get integer
.88ec	20 68 90	jsr $9068			jsr 	CheckRightBracket
.88ef	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; zero mantissa ?
.88f2	f0 04		beq $88f8			beq 	_NotZero
.88f4	20 74 8b	jsr $8b74			jsr 	NSMSetZero
.88f7	60		rts				rts
.88f8					_NotZero:
.88f8	4c 7f 82	jmp $827f			jmp 	ReturnTrue
.88fb					_UNBad:
.88fb	4c 99 95	jmp $9599			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/rnd.asm

.88fe					Unary_Rnd:
.88fe	20 c8 8a	jsr $8ac8			jsr 	EvaluateNumber 				; number to use.
.8901	20 68 90	jsr $9068			jsr 	CheckRightBracket 			; closing bracket
.8904	20 2d 89	jsr $892d			jsr 	Random32Bit 				; generate a number.
.8907	ad 08 07	lda $0708			lda 	RandomSeed+0
.890a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.890d	ad 09 07	lda $0709			lda 	RandomSeed+1
.8910	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8913	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8916	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8919	ad 0b 07	lda $070b			lda 	RandomSeed+3
.891c	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.891e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8921	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8923	8d 28 06	sta $0628			sta 	NSExponent
.8926	a9 08		lda #$08			lda 	#NSTFloat
.8928	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>892b	db						.byte 	$DB 						; causes a break in the emulator
.892c	60		rts				rts
.892d					Random32Bit:
.892d	5a		phy				phy
.892e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8930	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8933	d0 03		bne $8938			bne 	_Random1
.8935	a8		tay				tay 								; if so do it 256 times
.8936	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8938					_Random1:
.8938	0a		asl a				asl 	a 							; LSFR RNG
.8939	2e 09 07	rol $0709			rol 	RandomSeed+1
.893c	2e 0a 07	rol $070a			rol 	RandomSeed+2
.893f	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8942	90 02		bcc $8946			bcc 	_Random2
.8944	49 c5		eor #$c5			eor 	#$C5
.8946					_Random2:
.8946	88		dey				dey
.8947	d0 ef		bne $8938			bne 	_Random1
.8949	7a		ply				ply
.894a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/sgn.asm

.947d					SgnUnary:
.947d	fa		plx				plx 								; restore stack pos
.947e	20 c8 8a	jsr $8ac8			jsr 	EvaluateNumber 				; get a float or int
.9481	20 68 90	jsr $9068			jsr 	CheckRightBracket
.9484	20 a4 8b	jsr $8ba4			jsr 	NSMIsZero 					; if zero
.9487	f0 10		beq $9499			beq 	_SGZero  					; return Int Zero
.9489	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.948c	48		pha				pha
.948d	a9 01		lda #$01			lda 	#1 							; set to 1
.948f	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.9492	68		pla				pla
.9493	29 80		and #$80			and		#$80 						; copy the sign byte out
.9495	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9498	60		rts				rts
.9499	20 74 8b	jsr $8b74	_SGZero:jsr 	NSMSetZero
.949c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/number/val.asm

.949d					ValUnary:
.949d	fa		plx				plx 								; restore stack pos
.949e	20 b3 94	jsr $94b3			jsr 	ValMainCode 				; do the main val() code
.94a1	b0 01		bcs $94a4			bcs 	_VUError 					; couldn't convert
.94a3	60		rts				rts
.94a4					_VUError:
.94a4	4c 94 95	jmp $9594			jmp 	TypeError
.94a7					IsValUnary:
.94a7	fa		plx				plx 								; restore stack pos
.94a8	20 b3 94	jsr $94b3			jsr 	ValMainCode 				; do the main val() code
.94ab	b0 03		bcs $94b0			bcs 	_VUBad
.94ad	4c 7f 82	jmp $827f			jmp 	ReturnTrue
.94b0					_VUBad:
.94b0	4c 8b 82	jmp $828b			jmp 	ReturnFalse
.94b3					ValMainCode:
.94b3	20 d3 8a	jsr $8ad3			jsr 	EvaluateString 				; get a string
.94b6	20 68 90	jsr $9068			jsr 	CheckRightBracket 			; check right bracket present
.94b9	5a		phy				phy
.94ba	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.94bc	f0 17		beq $94d5			beq 	_VMCFail2
.94be	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.94c0	48		pha				pha 								; save first character
.94c1	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.94c3	d0 01		bne $94c6			bne 	_VMCStart
.94c5	c8		iny				iny 								; skip over -
.94c6					_VMCStart:
.94c6	38		sec				sec 								; initialise first time round.
.94c7					_VMCNext:
.94c7	c8		iny				iny 								; pre-increment
.94c8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.94ca	f0 0c		beq $94d8			beq 	_VMCSuccess 				; successful.
.94cc	20 a9 86	jsr $86a9			jsr 	EncodeNumber 				; send it to the number-builder
.94cf	90 03		bcc $94d4			bcc 	_VMCFail 					; if failed, give up.
.94d1	18		clc				clc 								; next time round, countinue
.94d2	80 f3		bra $94c7			bra 	_VMCNext
.94d4					_VMCFail:
.94d4	68		pla				pla
.94d5					_VMCFail2:
.94d5	7a		ply				ply
.94d6	38		sec				sec
.94d7	60		rts				rts
.94d8					_VMCSuccess:
.94d8	a9 00		lda #$00			lda 	#0 							; construct final
.94da	20 a9 86	jsr $86a9			jsr 	EncodeNumber
.94dd	68		pla				pla
.94de	c9 2d		cmp #$2d			cmp 	#"-"
.94e0	d0 03		bne $94e5			bne 	_VMCNotNegative
.94e2	20 20 8b	jsr $8b20			jsr		NSMNegate
.94e5					_VMCNotNegative:
.94e5	7a		ply				ply
.94e6	18		clc				clc
.94e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/chr.asm

.894b					ChrUnary:
.894b	fa		plx				plx 								; restore stack pos
.894c	20 0c 8b	jsr $8b0c			jsr 	Evaluate8BitInteger			; get value
.894f	48		pha				pha
.8950	20 68 90	jsr $9068			jsr 	CheckRightBracket
.8953	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8955	20 06 95	jsr $9506			jsr 	StringTempAllocate
.8958	68		pla				pla 								; write number to it
.8959	20 44 95	jsr $9544			jsr 	StringTempWrite
.895c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/spc.asm

.895d					SpcUnary:
.895d	fa		plx				plx 								; restore stack pos
.895e	20 0c 8b	jsr $8b0c			jsr 	Evaluate8BitInteger			; get value
.8961	5a		phy				phy
.8962	48		pha				pha 								; save count
.8963	20 06 95	jsr $9506			jsr 	StringTempAllocate
.8966	7a		ply				ply 								; to do count in Y
.8967					_SpcLoop:
.8967	c0 00		cpy #$00			cpy 	#0
.8969	f0 08		beq $8973			beq 	_SpcExit
.896b	a9 20		lda #$20			lda 	#32
.896d	20 44 95	jsr $9544			jsr 	StringTempWrite
.8970	88		dey				dey
.8971	80 f4		bra $8967			bra 	_SPCLoop
.8973					_SpcExit:
.8973	7a		ply				ply
.8974	20 68 90	jsr $9068			jsr 	CheckRightBracket
.8977	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/str.asm

.8978					Unary_Str:
.8978	fa		plx				plx
.8979	20 c8 8a	jsr $8ac8			jsr 	EvaluateNumber  			; get number
.897c	20 68 90	jsr $9068			jsr 	CheckRightBracket 			; closing bracket
.897f	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8981	20 9a 89	jsr $899a			jsr 	ConvertNumberToString 		; do the conversion.
.8984	a9 21		lda #$21			lda		#33 						; create buffer
.8986	20 06 95	jsr $9506			jsr 	StringTempAllocate 			; allocate memory
.8989	da		phx				phx
.898a	a2 00		ldx #$00			ldx 	#0
.898c					_USCopy:
.898c	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.898f	20 44 95	jsr $9544			jsr 	StringTempWrite
.8992	e8		inx				inx
.8993	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8996	d0 f4		bne $898c			bne 	_USCopy
.8998	fa		plx				plx
.8999	60		rts				rts
.899a					ConvertNumberToString:
.899a	5a		phy				phy 								; save code position
.899b	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.899e	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.89a1	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.89a4	10 0a		bpl $89b0			bpl 	_CNTSNotNegative
.89a6	29 7f		and #$7f			and 	#$7F 						; make +ve
.89a8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89ab	a9 2d		lda #$2d			lda 	#"-"
.89ad	20 11 8a	jsr $8a11			jsr 	WriteDecimalBuffer
.89b0					_CNTSNotNegative:
.89b0	e8		inx				inx 								; round up
.89b1	a9 01		lda #$01			lda 	#1
.89b3	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.89b6	ca		dex				dex
.89b7	bd 28 06	lda $0628,x			lda		NSExponent,x
.89ba	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.89bd	a9 08		lda #$08			lda 	#NSTFloat
.89bf	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.89c2	20 2d 92	jsr $922d			jsr 	FloatAdd
.89c5	20 f3 89	jsr $89f3			jsr 	MakePlusTwoString
.89c8	20 0b 93	jsr $930b			jsr 	FloatFractionalPart 		; get the fractional part
.89cb	20 cf 93	jsr $93cf			jsr 	NSNormalise					; normalise , exit if zero
.89ce	f0 21		beq $89f1			beq 	_CNTSExit
.89d0	a9 2e		lda #$2e			lda 	#"."
.89d2	20 11 8a	jsr $8a11			jsr 	WriteDecimalBuffer 			; write decimal place
.89d5					_CNTSDecimal:
.89d5	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.89d8	30 17		bmi $89f1			bmi 	_CNTSExit
.89da	e8		inx				inx 								; x 10.0
.89db	a9 0a		lda #$0a			lda 	#10
.89dd	20 76 8b	jsr $8b76			jsr 	NSMSetByte
.89e0	a9 08		lda #$08			lda 	#NSTFloat
.89e2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89e5	ca		dex				dex
.89e6	20 98 93	jsr $9398			jsr 	FloatMultiply
.89e9	20 f3 89	jsr $89f3			jsr 	MakePlusTwoString
.89ec	20 0b 93	jsr $930b			jsr 	FloatFractionalPart 		; get the fractional part
.89ef	80 e4		bra $89d5			bra 	_CNTSDecimal 				; keep going.
.89f1					_CNTSExit:
.89f1	7a		ply				ply
.89f2	60		rts				rts
.89f3					MakePlusTwoString:
.89f3	da		phx				phx
.89f4	20 4b 8b	jsr $8b4b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.89f7	e8		inx				inx 								; access it
.89f8	e8		inx				inx
.89f9	20 6e 93	jsr $936e			jsr 	FloatIntegerPart 			; make it an integer
.89fc	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.89fe	20 d7 91	jsr $91d7			jsr 	ConvertInt32
.8a01	a2 00		ldx #$00			ldx	 	#0
.8a03					_MPTSCopy:
.8a03	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8a06	20 11 8a	jsr $8a11			jsr 	WriteDecimalBuffer
.8a09	e8		inx				inx
.8a0a	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8a0d	d0 f4		bne $8a03			bne 	_MPTSCopy
.8a0f	fa		plx				plx
.8a10	60		rts				rts
.8a11					WriteDecimalBuffer:
.8a11	da		phx				phx
.8a12	ae 14 07	ldx $0714			ldx 	dbOffset
.8a15	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8a18	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8a1b	ee 14 07	inc $0714			inc 	dbOffset
.8a1e	fa		plx				plx
.8a1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/unary/string/substring.asm

.8a20					Unary_Left:
.8a20	fa		plx				plx
.8a21	18		clc				clc 								; only one parameter
.8a22	20 97 8a	jsr $8a97			jsr 	SubstringInitial 			; set up.
.8a25	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8a28	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a2b	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8a2e	80 2c		bra $8a5c			bra 	SubstringMain
.8a30					Unary_Right:
.8a30	fa		plx				plx
.8a31	18		clc				clc 								; only one parameter
.8a32	20 97 8a	jsr $8a97			jsr 	SubstringInitial 			; set up.
.8a35	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8a38	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8a3b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8a3e	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8a41	b0 02		bcs $8a45			bcs 	_URNotUnderflow
.8a43	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8a45					_URNotUnderFlow:
.8a45	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8a48	80 12		bra $8a5c			bra 	SubStringMain
.8a4a					Unary_Mid:
.8a4a	fa		plx				plx
.8a4b	38		sec				sec 								; two parameters
.8a4c	20 97 8a	jsr $8a97			jsr 	SubstringInitial 			; set up.
.8a4f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8a52	f0 05		beq $8a59			beq 	_UMError
.8a54	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8a57	80 03		bra $8a5c			bra 	SubStringMain
.8a59					_UMError:
.8a59	4c 99 95	jmp $9599			jmp 	ArgumentError
.8a5c					SubStringMain:
.8a5c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8a5f	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8a62	b0 2d		bcs $8a91			bcs 	_SSMNull 					; if so, return an empty string.
.8a64	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8a67	f0 28		beq $8a91			beq 	_SSMNull 					; return empty string.
.8a69	18		clc				clc 								; add the offset +1 to the address and
.8a6a	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8a6d	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8a70	85 36		sta $36				sta 	zTemp0
.8a72	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8a75	69 00		adc #$00			adc 	#0
.8a77	85 37		sta $37				sta 	zTemp0+1
.8a79					_SSMNoCarry:
.8a79	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8a7c	20 06 95	jsr $9506			jsr 	StringTempAllocate 			; allocate that many characters
.8a7f	5a		phy				phy 								; save Y
.8a80	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8a82					_SSMCopy:
.8a82	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8a84	f0 09		beq $8a8f			beq 	_SSMEString 				; no more to copy
.8a86	20 44 95	jsr $9544			jsr 	StringTempWrite 			; and write it out.
.8a89	c8		iny				iny
.8a8a	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8a8d	d0 f3		bne $8a82			bne 	_SSMCopy
.8a8f					_SSMEString:
.8a8f	7a		ply				ply
.8a90					_SSMExit:
.8a90	60		rts				rts
.8a91					_SSMNull:
.8a91	a9 00		lda #$00			lda 	#0
.8a93	20 06 95	jsr $9506			jsr 	StringTempAllocate
.8a96	60		rts				rts
.8a97					SubstringInitial:
.8a97	da		phx				phx 								; save initial stack position
.8a98	08		php				php 								; save carry on stack indicating 2 parameters
.8a99	20 d3 8a	jsr $8ad3			jsr 	EvaluateString 				; get a string
.8a9c	5a		phy				phy 								; calculate length to exponent.
.8a9d	a0 ff		ldy #$ff			ldy 	#$FF
.8a9f					_SIFindLength:
.8a9f	c8		iny				iny
.8aa0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa2	d0 fb		bne $8a9f			bne 	_SIFindLength
.8aa4	98		tya				tya
.8aa5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8aa8	7a		ply				ply
.8aa9	e8		inx				inx
.8aaa	20 70 90	jsr $9070			jsr 	CheckComma 					; comma next
.8aad	20 0c 8b	jsr $8b0c			jsr 	Evaluate8BitInteger 		; get next parameter
.8ab0	28		plp				plp 								; is it the last parameter ?
.8ab1	90 07		bcc $8aba			bcc 	_SSIExit 					; if so, exit.
.8ab3	e8		inx				inx
.8ab4	20 70 90	jsr $9070			jsr 	CheckComma 					; comma next
.8ab7	20 0c 8b	jsr $8b0c			jsr 	Evaluate8BitInteger 		; get last parameter
.8aba					_SSIExit:
.8aba	fa		plx				plx
.8abb	20 68 90	jsr $9068			jsr 	CheckRightBracket 			; check closing bracket
.8abe	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/exprhelper.asm

.8abf					EvaluateValue:
.8abf	48		pha				pha
.8ac0	20 c9 85	jsr $85c9			jsr		EvaluateExpression 			; expression
.8ac3	20 0b 86	jsr $860b			jsr 	Dereference					; derefernce it
.8ac6	68		pla				pla
.8ac7	60		rts				rts
.8ac8					EvaluateNumber:
.8ac8	20 bf 8a	jsr $8abf			jsr 	EvaluateValue 				; get a value
.8acb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ace	29 10		and #$10			and 	#NSBIsString
.8ad0	d0 16		bne $8ae8			bne 	HelperTypeError
.8ad2	60		rts				rts
.8ad3					EvaluateString:
.8ad3	20 bf 8a	jsr $8abf			jsr 	EvaluateValue 				; get a value
.8ad6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ad9	29 10		and #$10			and 	#NSBIsString
.8adb	f0 0b		beq $8ae8			beq 	HelperTypeError
.8add					CopyAddressToTemp0:
.8add	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8ae0	85 36		sta $36				sta 	zTemp0
.8ae2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ae5	85 37		sta $37				sta 	zTemp0+1
.8ae7	60		rts				rts
.8ae8					HelperTypeError:
.8ae8	4c 94 95	jmp $9594			jmp 	TypeError
.8aeb					EvaluateInteger:
.8aeb	20 c8 8a	jsr $8ac8			jsr 	EvaluateNumber
.8aee	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8af1	d0 0a		bne $8afd			bne 	HelperValueError 			; if not, it's a float.
.8af3	60		rts				rts
.8af4					EvaluateUnsignedInteger:
.8af4	20 eb 8a	jsr $8aeb			jsr 	EvaluateInteger 			; check integer is +ve
.8af7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8afa	30 01		bmi $8afd			bmi 	HelperValueError
.8afc	60		rts				rts
.8afd					HelperValueError:
.8afd	4c 99 95	jmp $9599			jmp 	ArgumentError
.8b00					Evaluate16BitInteger:
.8b00	20 f4 8a	jsr $8af4			jsr	 	EvaluateUnsignedInteger		; get integer
.8b03	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8b06	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8b09	d0 f2		bne $8afd			bne 	HelperValueError
.8b0b	60		rts				rts
.8b0c					Evaluate8BitInteger:
.8b0c	20 f4 8a	jsr $8af4			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8b0f	d0 ec		bne $8afd			bne 	HelperValueError
.8b11	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8b14	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8b17	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8b1a	d0 e1		bne $8afd			bne 	HelperValueError
.8b1c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/expressions/utility/utility.asm

.8b20					NSMNegate:
.8b20	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b23	49 80		eor #$80			eor 	#NSBIsNegative
.8b25	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b28	60		rts				rts
.8b29					NSMNegateMantissa:
.8b29	38		sec				sec
.8b2a	a9 00		lda #$00			lda 	#0
.8b2c	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8b2f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b32	a9 00		lda #$00			lda 	#0
.8b34	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8b37	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b3a	a9 00		lda #$00			lda 	#0
.8b3c	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8b3f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b42	a9 00		lda #$00			lda 	#0
.8b44	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8b47	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b4a	60		rts				rts
.8b4b					NSMShiftUpTwo:
.8b4b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8b4e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b51	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8b54	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8b57	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8b5a	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8b5d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8b60	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8b63	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8b66	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8b69	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8b6c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8b6f	60		rts				rts
.8b70					NSMSetZeroMantissaOnly:
.8b70	a9 00		lda #$00			lda 	#0
.8b72	80 08		bra $8b7c			bra 	NSMSetMantissa
.8b74					NSMSetZero:
.8b74	a9 00		lda #$00			lda 	#0
.8b76					NSMSetByte:
.8b76	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8b79	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8b7c					NSMSetMantissa:
.8b7c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8b7f	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8b82	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8b85	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8b88	60		rts				rts
.8b89					NSMShiftLeft:
.8b89	18		clc				clc
.8b8a					NSMRotateLeft:
.8b8a	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8b8d	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8b90	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8b93	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8b96	60		rts				rts
.8b97					NSMShiftRight:
.8b97	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8b9a	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8b9d	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8ba0	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8ba3	60		rts				rts
.8ba4					NSMIsZero:
.8ba4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8ba7	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8baa	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8bad	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8bb0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/strings/stringalloc.asm

.94e8					StringSystemInitialise:
.94e8	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.94ea	8d 0e 07	sta $070e			sta 	0+StringMemory
.94ed	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.94ef	8d 0f 07	sta $070f			sta 	1+StringMemory
.94f2	60		rts				rts
.94f3					StringSpaceInitialise:
.94f3	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.94f5	8d 10 07	sta $0710			sta 	StringInitialised
.94f8	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.94fb	8d 11 07	sta $0711			sta 	StringTempPointer
.94fe	ad 0f 07	lda $070f			lda 	StringMemory+1
.9501	3a		dec a				dec 	a
.9502	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9505	60		rts				rts
.9506					StringTempAllocate:
.9506	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9508	b0 35		bcs $953f			bcs 	_STALength
.950a	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.950d	30 05		bmi $9514			bmi 	_STAAllocate
.950f	48		pha				pha 								; save value to subtract.
.9510	20 f3 94	jsr $94f3			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9513	68		pla				pla 								; restore it
.9514					_STAAllocate:
.9514	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9516	18		clc				clc  								; deliberate allows one more
.9517	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.951a	8d 11 07	sta $0711			sta 	StringTempPointer
.951d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9520	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9522	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9525	69 ff		adc #$ff			adc 	#$FF
.9527	8d 12 07	sta $0712			sta 	StringTempPointer+1
.952a	85 3d		sta $3d				sta 	zsTemp+1
.952c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.952f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9532	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9535	a9 10		lda #$10			lda 	#NSTString
.9537	9d 00 06	sta $0600,x			sta 	NSStatus,x
.953a	a9 00		lda #$00			lda 	#0 							; clear the target string
.953c	92 3c		sta ($3c)			sta 	(zsTemp)
.953e	60		rts				rts
.953f					_STALength:
.953f	a9 09		lda #$09		lda	#9
.9541	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9544					StringTempWrite:
.9544	48		pha				pha
.9545	92 3c		sta ($3c)			sta 	(zsTemp)
.9547	e6 3c		inc $3c				inc 	zsTemp
.9549	d0 02		bne $954d			bne 	_STWNoCarry
.954b	e6 3d		inc $3d				inc 	zsTemp+1
.954d					_STWNoCarry:
.954d	a9 00		lda #$00			lda 	#0
.954f	92 3c		sta ($3c)			sta 	(zsTemp)
.9551	68		pla				pla
.9552	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/backload.asm

.8bb1					BackloadProgram:
.8bb1	a2 ff		ldx #$ff			ldx 	#$FF
.8bb3	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8bb6	20 dd 8b	jsr $8bdd			jsr 	BLReadByte
.8bb9	30 1e		bmi $8bd9			bmi 	_BPExit
.8bbb					_BPCopy:
.8bbb	e8		inx				inx  								; copy byte in
.8bbc	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8bbf	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8bc2	20 dd 8b	jsr $8bdd			jsr 	BLReadByte 					; read next byte
.8bc5	30 0a		bmi $8bd1			bmi 	_BPEndLine 					; -ve = EOL
.8bc7	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8bc9	d0 02		bne $8bcd			bne 	_BPNotTab
.8bcb	a9 20		lda #$20			lda 	#' '
.8bcd					_BPNotTab:
.8bcd	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8bcf	b0 ea		bcs $8bbb			bcs 	_BPCopy
.8bd1					_BPEndLine:
.8bd1	20 99 8d	jsr $8d99			jsr 	TokeniseLine 				; tokenise the line.
.8bd4	20 17 81	jsr $8117			jsr 	MemoryAppend 				; append to current program
.8bd7	80 d8		bra $8bb1			bra 	BackloadProgram
.8bd9					_BPExit:
.8bd9	20 7b 81	jsr $817b			jsr 	ClearCommand 				; clear variables etc.
.8bdc	60		rts				rts
.8bdd					BLReadByte:
.8bdd					_BLLoad:
.8bdd	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8be0	ee de 8b	inc $8bde			inc 	_BLLoad+1
.8be3	d0 03		bne $8be8			bne 	_BLNoCarry
.8be5	ee df 8b	inc $8bdf			inc 	_BLLoad+2
.8be8					_BLNoCarry:
.8be8	c9 00		cmp #$00			cmp 	#0
.8bea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/searchtokens.asm

.8beb					TokeniseSearchTable:
.8beb	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8bed	85 36		sta $36				sta 	zTemp0
.8bef	a0 00		ldy #$00			ldy 	#0
.8bf1	a9 80		lda #$80			lda 	#$80 						; token #
.8bf3	85 38		sta $38				sta 	zTemp1
.8bf5					_TSTLoop:
.8bf5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8bf7	30 49		bmi $8c42			bmi 	_TSTFail 					; -ve = end of table
.8bf9	f0 2e		beq $8c29			beq 	_TSTNext 					; zero, check next it's a dummy
.8bfb	c8		iny				iny 								; get the hash
.8bfc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bfe	88		dey				dey
.8bff	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8c02	d0 25		bne $8c29			bne 	_TSTNext
.8c04	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8c07	38		sec				sec
.8c08	ed 00 07	sbc $0700			sbc 	identStart
.8c0b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8c0d	d0 1a		bne $8c29			bne 	_TSTNext
.8c0f	5a		phy				phy 								; save Y , we might fail
.8c10	c8		iny				iny 								; point to text
.8c11	c8		iny				iny
.8c12	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8c15					_TSTCompareName:
.8c15	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8c18	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8c1a	d0 0c		bne $8c28			bne 	_TSTNextPullY 				; fail, pullY and do next
.8c1c	e8		inx				inx
.8c1d	c8		iny				iny
.8c1e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8c21	d0 f2		bne $8c15			bne 	_TSTCompareName
.8c23	7a		ply				ply 								; throw Y
.8c24	a5 38		lda $38				lda 	zTemp1 						; get token #
.8c26	38		sec				sec 								; return with CS = passed.
.8c27	60		rts				rts
.8c28					_TSTNextPullY:
.8c28	7a		ply				ply 								; restore current, fall through.
.8c29					_TSTNext:
.8c29	e6 38		inc $38				inc 	zTemp1 						; token counter
.8c2b	98		tya				tya
.8c2c	18		clc				clc
.8c2d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8c2f	1a		inc a				inc 	a 							; +1
.8c30	1a		inc a				inc 	a 							; +2
.8c31	a8		tay				tay
.8c32	10 c1		bpl $8bf5			bpl 	_TSTLoop 					; if Y < $80 loop back
.8c34	98		tya				tya 								; add Y to zTemp0 and reset Y
.8c35	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8c37	18		clc				clc  								; but have tables > 255 bytes
.8c38	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8c3a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8c3c	90 b7		bcc $8bf5			bcc 	_TSTLoop
.8c3e	e6 37		inc $37				inc 	zTemp0+1
.8c40	80 b3		bra $8bf5			bra 	_TSTLoop
.8c42					_TSTFail:
.8c42	18		clc				clc
.8c43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/tokenise.asm


;******  Processing file: ./core/tokeniser/../../generated/kwdtext.dat

.8c44					KeywordSet0:
>8c44	00 65					.text	0,$65,""               ; $80 !0:EOF
>8c46	00 58					.text	0,$58,""               ; $81 !1:SH1
>8c48	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8c4a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8c50	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8c58	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8c5e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8c65	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8c6c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8c73	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8c79	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8c81	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8c89	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8c8f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8c96	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8c9c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8ca4	28
>8ca5	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8cab	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8cb1	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8cb7	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8cbe	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8cc4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8cca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8ccf	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8cd3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8cd9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8ce1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8ce8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8cef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8cf7	43
>8cf8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8cfe	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8d05	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8d0b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8d11	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8d16	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8d1c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8d21	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8d28	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8d2e	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8d33	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8d3a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8d40	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8d45	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8d4d	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8d53	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8d57	ff					.text	$FF
.8d58					KeywordSet1:
>8d58	00 65					.text	0,$65,""               ; $80 !0:EOF
>8d5a	00 58					.text	0,$58,""               ; $81 !1:SH1
>8d5c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8d5e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8d66	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8d6d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8d72	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8d78	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8d7d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8d85	45
>8d86	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8d8b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8d91	ff					.text	$FF
.8d92					KeywordSet2:
>8d92	00 65					.text	0,$65,""               ; $80 !0:EOF
>8d94	00 58					.text	0,$58,""               ; $81 !1:SH1
>8d96	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8d98	ff					.text	$FF

;******  Return to file: ./core/tokeniser/tokenise.asm

.8d99					TokeniseLine:
.8d99	20 21 8f	jsr $8f21			jsr 	FixLineBufferCase 			; fix line case
.8d9c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8d9e	8d 15 07	sta $0715			sta 	tokenOffset
.8da1	9c 16 07	stz $0716			stz 	tokenLineNumber
.8da4	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8da7	a2 ff		ldx #$ff			ldx 	#$FF
.8da9					_TKFindFirst:
.8da9	e8		inx				inx
.8daa	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8dad	f0 79		beq $8e28			beq 	_TKExit
.8daf	c9 20		cmp #$20			cmp 	#' '
.8db1	90 f6		bcc $8da9			bcc 	_TKFindFirst
.8db3	c9 30		cmp #$30			cmp 	#'0'
.8db5	90 07		bcc $8dbe			bcc 	_TKNoLineNumber
.8db7	c9 3a		cmp #$3a			cmp 	#'9'+1
.8db9	b0 03		bcs $8dbe			bcs 	_TKNoLineNumber
.8dbb	20 4b 8f	jsr $8f4b			jsr 	TokeniseExtractLineNumber
.8dbe					_TKNoLineNumber:
.8dbe					_TKTokeniseLoop:
.8dbe	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8dc1	f0 65		beq $8e28			beq 	_TKExit
.8dc3	e8		inx				inx
.8dc4	c9 20		cmp #$20			cmp 	#' '
.8dc6	f0 f6		beq $8dbe			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8dc8	ca		dex				dex 								; undo last get, A contains character, X is position.
.8dc9	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8dcb	f0 61		beq $8e2e			beq 	_TKTokeniseIdentifier
.8dcd	c9 41		cmp #$41			cmp 	#'A'
.8dcf	90 04		bcc $8dd5			bcc 	_TKTokenisePunctuation
.8dd1	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8dd3	90 59		bcc $8e2e			bcc 	_TKTokeniseIdentifier
.8dd5					_TKTokenisePunctuation:
.8dd5	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8dd7	f0 27		beq $8e00			beq 	_TKString
.8dd9	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8ddb	f0 28		beq $8e05			beq 	_TKHexConstant
.8ddd	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8ddf	f0 29		beq $8e0a			beq 	_TKCheckDouble
.8de1	c9 3e		cmp #$3e			cmp 	#'>'
.8de3	f0 25		beq $8e0a			beq 	_TKCheckDouble
.8de5					_TKStandardPunctuation:
.8de5	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8de8	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8dea	90 0e		bcc $8dfa			bcc 	_TKNoShift
.8dec	48		pha				pha 								; save
.8ded	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8def	85 36		sta $36				sta 	zTemp0
.8df1	68		pla				pla
.8df2	29 20		and #$20			and 	#32 						; bit 5
.8df4	4a		lsr a				lsr 	a 							; shift into bit 3
.8df5	4a		lsr a				lsr 	a
.8df6	05 36		ora $36				ora 	zTemp0
.8df8	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8dfa					_TKNoShift:
.8dfa	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte 			; write the punctuation character
.8dfd	e8		inx				inx 								; consume the character
.8dfe	80 be		bra $8dbe			bra 	_TKTokeniseLoop 			; and loop round again.
.8e00					_TKString:
.8e00	20 b0 8e	jsr $8eb0			jsr 	TokeniseString
.8e03	80 b9		bra $8dbe			bra 	_TKTokeniseLoop
.8e05					_TKHexConstant:
.8e05	20 eb 8e	jsr $8eeb			jsr 	TokeniseHexConstant
.8e08	80 b4		bra $8dbe			bra 	_TKTokeniseLoop
.8e0a					_TKCheckDouble:
.8e0a	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8e0d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8e0f	90 d4		bcc $8de5			bcc 	_TKStandardPunctuation
.8e11	c9 3f		cmp #$3f			cmp 	#'>'+1
.8e13	b0 d0		bcs $8de5			bcs 	_TKStandardPunctuation
.8e15	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8e18	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8e1a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8e1b	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8e1e	38		sec				sec
.8e1f	e9 3c		sbc #$3c			sbc 	#'<'
.8e21	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8e24	e8		inx				inx 								; consume both
.8e25	e8		inx				inx
.8e26	80 96		bra $8dbe			bra 	_TKTokeniseLoop
.8e28	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8e2a	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.8e2d	60		rts				rts
.8e2e					_TKTokeniseIdentifier:
.8e2e	8e 00 07	stx $0700			stx 	identStart 					; save start
.8e31	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8e34					_TKCheckLoop:
.8e34	e8		inx				inx 								; look at next, we know first is identifier.
.8e35	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8e38	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8e3a	f0 f8		beq $8e34			beq 	_TKCheckLoop
.8e3c	c9 30		cmp #$30			cmp	 	#"0"
.8e3e	90 0c		bcc $8e4c			bcc 	_TKEndIdentifier
.8e40	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e42	90 f0		bcc $8e34			bcc 	_TKCheckLoop
.8e44	c9 41		cmp #$41			cmp	 	#"A"
.8e46	90 04		bcc $8e4c			bcc 	_TKEndIdentifier
.8e48	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8e4a	90 e8		bcc $8e34			bcc 	_TKCheckLoop
.8e4c					_TKEndIdentifier:
.8e4c	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8e4f	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8e51	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8e53	f0 06		beq $8e5b			beq 	_TKHasTypeCharacter
.8e55	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8e57	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8e59	d0 07		bne $8e62			bne 	_TKNoTypeCharacter
.8e5b					_TKHasTypeCharacter:
.8e5b	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8e5e	e8		inx				inx 								; read next
.8e5f	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8e62					_TKNoTypeCharacter:
.8e62	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8e64	d0 09		bne $8e6f			bne 	_TKNoArray
.8e66	e8		inx				inx 								; skip the (
.8e67	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8e6a	09 04		ora #$04			ora 	#$04
.8e6c	8d 04 07	sta $0704			sta 	identTypeByte
.8e6f					_TKNoArray:
.8e6f	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8e72	20 0c 8f	jsr $8f0c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8e75	a0 8c		ldy #$8c			ldy 	#(KeywordSet0) >> 8
.8e77	a9 44		lda #$44			lda 	#(KeywordSet0) & $FF
.8e79	20 eb 8b	jsr $8beb			jsr 	TokeniseSearchTable
.8e7c	a2 00		ldx #$00			ldx 	#0
.8e7e	b0 1f		bcs $8e9f			bcs 	_TKFoundToken
.8e80	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8e82	a9 58		lda #$58			lda 	#(KeywordSet1) & $FF
.8e84	20 eb 8b	jsr $8beb			jsr 	TokeniseSearchTable
.8e87	a2 81		ldx #$81			ldx 	#$81
.8e89	b0 14		bcs $8e9f			bcs 	_TKFoundToken
.8e8b	a0 8d		ldy #$8d			ldy 	#(KeywordSet1) >> 8
.8e8d	a9 58		lda #$58			lda 	#(KeywordSet1) & $FF
.8e8f	20 eb 8b	jsr $8beb			jsr 	TokeniseSearchTable
.8e92	a2 82		ldx #$82			ldx 	#$82
.8e94	b0 09		bcs $8e9f			bcs 	_TKFoundToken
.8e96	20 9c 8f	jsr $8f9c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8e99	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8e9c	4c be 8d	jmp $8dbe			jmp 	_TKTokeniseLoop 			; and go round again.
.8e9f					_TKFoundToken:
.8e9f	48		pha				pha 								; save token
.8ea0	8a		txa				txa 								; shift in X, is there one ?
.8ea1	f0 03		beq $8ea6			beq 	_TKNoTShift
.8ea3	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte 			; if so, write it out
.8ea6					_TKNoTShift:
.8ea6	68		pla				pla 								; restore and write token
.8ea7	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.8eaa	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8ead	4c be 8d	jmp $8dbe			jmp 	_TKTokeniseLoop 			; and go round again.
.8eb0					TokeniseString:
.8eb0	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8eb2	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.8eb5	e8		inx				inx									; start of quoted string.
.8eb6	da		phx				phx 								; push start of string on top
.8eb7	ca		dex				dex
.8eb8					_TSFindEnd:
.8eb8	e8		inx				inx
.8eb9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8ebc	f0 04		beq $8ec2			beq 	_TSEndOfString
.8ebe	c9 22		cmp #$22			cmp 	#'"'
.8ec0	d0 f6		bne $8eb8			bne 	_TSFindEnd
.8ec2					_TSEndOfString:
.8ec2	7a		ply				ply  								; so now Y is first character, X is character after end.
.8ec3	48		pha				pha 								; save terminating character
.8ec4	20 cc 8e	jsr $8ecc			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8ec7	68		pla				pla 								; terminating character
.8ec8	f0 01		beq $8ecb			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8eca	e8		inx				inx
.8ecb					_TSNotQuote:
.8ecb	60		rts				rts
.8ecc					TOWriteBlockXY:
.8ecc	86 36		stx $36				stx 	zTemp0 						; write end character
.8ece	98		tya				tya
.8ecf	49 ff		eor #$ff			eor 	#$FF
.8ed1	38		sec				sec
.8ed2	65 36		adc $36				adc 	zTemp0
.8ed4	1a		inc a				inc 	a 							; one extra for NULL
.8ed5	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.8ed8					_TOBlockLoop:
.8ed8	c4 36		cpy $36				cpy 	zTemp0
.8eda	f0 09		beq $8ee5			beq 	_TOBlockExit
.8edc	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.8edf	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.8ee2	c8		iny				iny
.8ee3	80 f3		bra $8ed8			bra 	_TOBlockLoop
.8ee5					_TOBlockExit:
.8ee5	a9 00		lda #$00			lda 	#0
.8ee7	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.8eea	60		rts				rts
.8eeb					TokeniseHexConstant:
.8eeb	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8eed	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.8ef0	e8		inx				inx									; start of quoted string.
.8ef1	da		phx				phx 								; push start of constant on top
.8ef2	ca		dex				dex
.8ef3					_THFindLoop:
.8ef3	e8		inx				inx
.8ef4	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ef7	c9 30		cmp #$30			cmp 	#"0"
.8ef9	90 0c		bcc $8f07			bcc 	_THFoundEnd
.8efb	c9 3a		cmp #$3a			cmp 	#"9"+1
.8efd	90 f4		bcc $8ef3			bcc 	_THFindLoop
.8eff	c9 41		cmp #$41			cmp 	#"A"
.8f01	90 04		bcc $8f07			bcc 	_THFoundEnd
.8f03	c9 47		cmp #$47			cmp 	#"F"+1
.8f05	90 ec		bcc $8ef3			bcc 	_THFindLoop
.8f07					_THFoundEnd:
.8f07	7a		ply				ply 								; restore start
.8f08	20 cc 8e	jsr $8ecc			jsr 	TOWriteBlockXY 				; output the block
.8f0b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/utility.asm

.8f0c					TokeniseCalculateHash:
.8f0c	da		phx				phx
.8f0d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8f10	a9 00		lda #$00			lda 	#0
.8f12					_TCHLoop:
.8f12	18		clc				clc
.8f13	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.8f16	e8		inx				inx
.8f17	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8f1a	d0 f6		bne $8f12			bne 	_TCHLoop
.8f1c	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8f1f	fa		plx				plx
.8f20	60		rts				rts
.8f21					FixLineBufferCase:
.8f21	a2 00		ldx #$00			ldx 	#0
.8f23					_FLBCLoop:
.8f23	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.8f26	f0 22		beq $8f4a			beq 	_FLBCExit 					; end of string.
.8f28	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8f2a	f0 11		beq $8f3d			beq 	_FLBCInQuotes
.8f2c	e8		inx				inx
.8f2d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8f2f	90 f2		bcc $8f23			bcc 	_FLBCLoop
.8f31	c9 7b		cmp #$7b			cmp 	#'z'+1
.8f33	b0 ee		bcs $8f23			bcs 	_FLBCLoop
.8f35	38		sec				sec 								; make U/C
.8f36	e9 20		sbc #$20			sbc 	#32
.8f38	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.8f3b	80 e6		bra $8f23			bra 	_FLBCLoop
.8f3d					_FLBCInQuotes:
.8f3d	e8		inx				inx 								; advance
.8f3e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.8f41	f0 07		beq $8f4a			beq 	_FLBCExit 					; exit on EOS
.8f43	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8f45	d0 f6		bne $8f3d			bne 	_FLBCInQuotes
.8f47	e8		inx				inx 								; skip over it
.8f48	80 d9		bra $8f23			bra 	_FLBCLoop
.8f4a					_FLBCExit:
.8f4a	60		rts				rts
.8f4b					TokeniseExtractLineNumber:
.8f4b	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.8f4e	48		pha				pha
.8f4f	ad 16 07	lda $0716			lda 	tokenLineNumber
.8f52	48		pha				pha
.8f53	20 89 8f	jsr $8f89			jsr 	_TELNTimes2 				; line # x 4
.8f56	20 89 8f	jsr $8f89			jsr 	_TELNTimes2 				; line # x 2
.8f59	18		clc				clc 								; add stacked value
.8f5a	68		pla				pla
.8f5b	6d 16 07	adc $0716			adc 	tokenLineNumber
.8f5e	8d 16 07	sta $0716			sta 	tokenLineNumber
.8f61	68		pla				pla
.8f62	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.8f65	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.8f68	20 89 8f	jsr $8f89			jsr 	_TELNTimes2 				; line # x 10
.8f6b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.8f6e	e8		inx				inx
.8f6f	29 0f		and #$0f			and 	#15 						; add to line #
.8f71	18		clc				clc
.8f72	6d 16 07	adc $0716			adc 	tokenLineNumber
.8f75	8d 16 07	sta $0716			sta 	tokenLineNumber
.8f78	90 03		bcc $8f7d			bcc 	_TLENNoCarry
.8f7a	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.8f7d					_TLENNoCarry:
.8f7d	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.8f80	c9 30		cmp #$30			cmp 	#'0'
.8f82	90 04		bcc $8f88			bcc 	_TLENExit
.8f84	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f86	90 c3		bcc $8f4b			bcc 	TokeniseExtractLineNumber
.8f88					_TLENExit:
.8f88	60		rts				rts
.8f89					_TELNTimes2:
.8f89	0e 16 07	asl $0716			asl 	tokenLineNumber
.8f8c	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.8f8f	60		rts				rts
.8f90					TokeniseWriteByte:
.8f90	da		phx				phx
.8f91	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.8f94	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.8f97	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.8f9a	fa		plx				plx
.8f9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./core/tokeniser/variablerecord.asm

.8f9c					CheckCreateVariableRecord:
.8f9c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8f9e	85 36		sta $36				sta 	0+zTemp0
.8fa0	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8fa2	85 37		sta $37				sta 	1+zTemp0
.8fa4	20 5b 81	jsr $815b			jsr 	VariableOpen 				; make variable space available
.8fa7					_CCVSearch:
.8fa7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8fa9	f0 2c		beq $8fd7			beq 	_CCVFail
.8fab	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8fad	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8faf	cd 03 07	cmp $0703			cmp 	identHash
.8fb2	d0 16		bne $8fca			bne 	_CCVNext
.8fb4	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8fb6	ae 00 07	ldx $0700			ldx 	identStart
.8fb9					_CCVCompare:
.8fb9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8fbc	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8fbe	e8		inx				inx 								; advance pointers
.8fbf	c8		iny				iny
.8fc0	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8fc1	d0 07		bne $8fca			bne 	_CCVNext  					; didn't match go to next.
.8fc3	90 f4		bcc $8fb9			bcc 	_CCVCompare 				; not finished yet.
.8fc5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8fc8	f0 41		beq $900b			beq 	_CCVFound 					; yes, we were successful
.8fca					_CCVNext:
.8fca	18		clc				clc
.8fcb	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8fcd	65 36		adc $36				adc 	zTemp0
.8fcf	85 36		sta $36				sta 	zTemp0
.8fd1	90 d4		bcc $8fa7			bcc 	_CCVSearch
.8fd3	e6 37		inc $37				inc 	zTemp0+1
.8fd5	80 d0		bra $8fa7			bra 	_CCVSearch
.8fd7					_CCVFail:
.8fd7	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8fd9	ad 03 07	lda $0703			lda 	identHash
.8fdc	91 36		sta ($36),y			sta 	(zTemp0),y
.8fde	c8		iny				iny 								; offset 2 is the type byte
.8fdf	ad 04 07	lda $0704			lda 	identTypeByte
.8fe2	91 36		sta ($36),y			sta 	(zTemp0),y
.8fe4	c8		iny				iny
.8fe5					_CCVData:
.8fe5	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8fe7	91 36		sta ($36),y			sta 	(zTemp0),y
.8fe9	c8		iny				iny
.8fea	c0 08		cpy #$08			cpy 	#8
.8fec	90 f7		bcc $8fe5			bcc 	_CCVData
.8fee	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8ff1					_CCVCopyName:
.8ff1	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ff4	91 36		sta ($36),y			sta 	(zTemp0),y
.8ff6	e8		inx				inx
.8ff7	c8		iny				iny
.8ff8	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8ffb	d0 f4		bne $8ff1			bne 	_CCVCopyName
.8ffd	98		tya				tya 								; patch offset
.8ffe	92 36		sta ($36)			sta 	(zTemp0)
.9000	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9002	91 36		sta ($36),y			sta 	(zTemp0),y
.9004	88		dey				dey
.9005	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9007	09 80		ora #$80			ora 	#$80
.9009	91 36		sta ($36),y			sta 	(zTemp0),y
.900b					_CCVFound:
.900b	20 5c 81	jsr $815c			jsr 	VariableClose 				; map out variables, perhaps.
.900e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9010	38		sec				sec
.9011	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9013	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9015	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.9018	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.901a	20 90 8f	jsr $8f90			jsr 	TokeniseWriteByte
.901d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.9553					DecimalScalarTable:
>9553	66 66 66 66				.dword $66666666 ; 0.1
>9557	de					.byte $de
>9558	1f 85 eb 51				.dword $51eb851f ; 0.01
>955c	db					.byte $db
>955d	4c 37 89 41				.dword $4189374c ; 0.001
>9561	d8					.byte $d8
>9562	ac 8b db 68				.dword $68db8bac ; 0.0001
>9566	d4					.byte $d4
>9567	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>956b	d1					.byte $d1
>956c	83 de 1b 43				.dword $431bde83 ; 1e-06
>9570	ce					.byte $ce
>9571	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9575	ca					.byte $ca
>9576	89 3b e6 55				.dword $55e63b89 ; 1e-08
>957a	c7					.byte $c7
>957b	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>957f	c4					.byte $c4
>9580	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9584	c0					.byte $c0
>9585	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9589	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.958a					SyntaxError:
.958a	a9 02		lda #$02		lda	#2
.958c	4c 1b 82	jmp $821b		jmp	ErrorHandler
.958f					RangeError:
.958f	a9 04		lda #$04		lda	#4
.9591	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9594					TypeError:
.9594	a9 05		lda #$05		lda	#5
.9596	4c 1b 82	jmp $821b		jmp	ErrorHandler
.9599					ArgumentError:
.9599	a9 07		lda #$07		lda	#7
.959b	4c 1b 82	jmp $821b		jmp	ErrorHandler
.959e					NotDoneError:
.959e	a9 0c		lda #$0c		lda	#12
.95a0	4c 1b 82	jmp $821b		jmp	ErrorHandler
.95a3					ErrorText:
>95a3	42 72 65 61 6b 00			.text	"Break",0
>95a9	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>95b1	72 72 6f 72 00
>95b6	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>95be	20 62 79 20 7a 65 72 6f 00
>95c7	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>95cf	61 6e 67 65 00
>95d4	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>95dc	6d 61 74 63 68 00
>95e2	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>95ea	65 6d 6f 72 79 00
>95f0	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>95f8	61 72 67 75 6d 65 6e 74 00
>9601	53 74 6f 70 00				.text	"Stop",0
>9606	53 74 72 69 6e 67 20 74			.text	"String too long",0
>960e	6f 6f 20 6c 6f 6e 67 00
>9616	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>961e	6e 20 66 61 69 6c 65 64 00
>9627	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>962f	61 74 61 00
>9633	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>963b	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  End of listing
