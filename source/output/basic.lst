
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 23 18:22:51 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_GETDATEDOLLARLPAREN              = $89; $89 GETDATE$(
=$8a					KWD_GETTIMEDOLLARLPAREN              = $8a; $8a GETTIME$(
=$8b					KWD_HEXDOLLARLPAREN                  = $8b; $8b HEX$(
=$8c					KWD_INTLPAREN                        = $8c; $8c INT(
=$8d					KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e					KWD_LEFTDOLLARLPAREN                 = $8e; $8e LEFT$(
=$8f					KWD_LENLPAREN                        = $8f; $8f LEN(
=$90					KWD_MIDDOLLARLPAREN                  = $90; $90 MID$(
=$91					KWD_NOT                              = $91; $91 NOT
=$92					KWD_PAGE                             = $92; $92 PAGE
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TRUE                             = $98; $98 TRUE
=$99					KWD_VALLPAREN                        = $99; $99 VAL(
=$9a					KWD_FOR                              = $9a; $9a FOR
=$9b					KWD_IF                               = $9b; $9b IF
=$9c					KWD_PROC                             = $9c; $9c PROC
=$9d					KWD_REPEAT                           = $9d; $9d REPEAT
=$9e					KWD_WHILE                            = $9e; $9e WHILE
=$9f					KWD_ENDIF                            = $9f; $9f ENDIF
=$a0					KWD_ENDPROC                          = $a0; $a0 ENDPROC
=$a1					KWD_NEXT                             = $a1; $a1 NEXT
=$a2					KWD_UNTIL                            = $a2; $a2 UNTIL
=$a3					KWD_WEND                             = $a3; $a3 WEND
=$a4					KWD_CALL                             = $a4; $a4 CALL
=$a5					KWD_CLS                              = $a5; $a5 CLS
=$a6					KWD_DATA                             = $a6; $a6 DATA
=$a7					KWD_DIM                              = $a7; $a7 DIM
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_THEN                             = $af; $af THEN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9a					KWC_FIRST_STRUCTURE = $9a
=$9f					KWC_FIRST_STRUCTURE_DEC = $9f
=$a3					KWC_LAST_STRUCTURE = $a3
=$83					KWC_FIRST_UNARY = $83
=$99					KWC_LAST_UNARY = $99

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 64 81	jsr $8164			jsr 	NewCommand 					; erase current program
.8016	20 bf 87	jsr $87bf			jsr 	BackloadProgram
.8019	4c 7b 81	jmp $817b			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler
>8023							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8024					VectorSetPunc:
>8024	00 82					.word	ShiftLeft                        ; $00 <<
>8026	8d 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8028	83 8c					.word	BinaryCompareNotEqual            ; $02 <>
>802a	bb 8f					.word	SyntaxError                      ; $03 !!3
>802c	bb 8f					.word	SyntaxError                      ; $04 ><
>802e	97 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>8030	03 82					.word	ShiftRight                       ; $06 >>
>8032	bb 8f					.word	SyntaxError                      ; $07 !!7
>8034	bb 8f					.word	SyntaxError                      ; $08 !!8
>8036	bb 8f					.word	SyntaxError                      ; $09 !!9
>8038	bb 8f					.word	SyntaxError                      ; $0a !!10
>803a	bb 8f					.word	SyntaxError                      ; $0b !!11
>803c	bb 8f					.word	SyntaxError                      ; $0c !!12
>803e	bb 8f					.word	SyntaxError                      ; $0d !!13
>8040	bb 8f					.word	SyntaxError                      ; $0e !!14
>8042	bb 8f					.word	SyntaxError                      ; $0f !!15
>8044	bb 8f					.word	SyntaxError                      ; $10 @
>8046	bb 8f					.word	SyntaxError                      ; $11 !!17
>8048	bb 8f					.word	SyntaxError                      ; $12 !!18
>804a	bb 8f					.word	SyntaxError                      ; $13 [
>804c	f3 8c					.word	IntegerDivide                    ; $14 \
>804e	bb 8f					.word	SyntaxError                      ; $15 ]
>8050	86 83					.word	EorInteger                       ; $16 ^
>8052	bb 8f					.word	SyntaxError                      ; $17 _
>8054	bb 8f					.word	SyntaxError                      ; $18 `
>8056	bb 8f					.word	SyntaxError                      ; $19 !!25
>8058	bb 8f					.word	SyntaxError                      ; $1a !!26
>805a	bb 8f					.word	SyntaxError                      ; $1b {
>805c	41 83					.word	OraInteger                       ; $1c |
>805e	bb 8f					.word	SyntaxError                      ; $1d }
>8060	bb 8f					.word	SyntaxError                      ; $1e ~
>8062	bb 8f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8064	bb 8f					.word	SyntaxError                      ; $20
>8066	bb 8f					.word	SyntaxError                      ; $21 !
>8068	bb 8f					.word	SyntaxError                      ; $22 "
>806a	bb 8f					.word	SyntaxError                      ; $23 #
>806c	bb 8f					.word	SyntaxError                      ; $24 $
>806e	3f 8d					.word	IntegerModulus                   ; $25 %
>8070	fc 82					.word	AndInteger                       ; $26 &
>8072	bb 8f					.word	SyntaxError                      ; $27 '
>8074	bb 8f					.word	SyntaxError                      ; $28 (
>8076	bb 8f					.word	SyntaxError                      ; $29 )
>8078	b3 8d					.word	MulInteger                       ; $2a *
>807a	96 82					.word	AddInteger                       ; $2b +
>807c	bb 8f					.word	SyntaxError                      ; $2c ,
>807e	d1 82					.word	SubInteger                       ; $2d -
>8080	bb 8f					.word	SyntaxError                      ; $2e .
>8082	ef 8e					.word	FDivideCommand                   ; $2f /
>8084	bb 8f					.word	SyntaxError                      ; $30 0
>8086	bb 8f					.word	SyntaxError                      ; $31 1
>8088	bb 8f					.word	SyntaxError                      ; $32 2
>808a	bb 8f					.word	SyntaxError                      ; $33 3
>808c	bb 8f					.word	SyntaxError                      ; $34 4
>808e	bb 8f					.word	SyntaxError                      ; $35 5
>8090	bb 8f					.word	SyntaxError                      ; $36 6
>8092	bb 8f					.word	SyntaxError                      ; $37 7
>8094	bb 8f					.word	SyntaxError                      ; $38 8
>8096	bb 8f					.word	SyntaxError                      ; $39 9
>8098	bb 8f					.word	SyntaxError                      ; $3a :
>809a	bb 8f					.word	SyntaxError                      ; $3b ;
>809c	6f 8c					.word	BinaryCompareLess                ; $3c <
>809e	65 8c					.word	BinaryCompareEqual               ; $3d =
>80a0	79 8c					.word	BinaryCompareGreater             ; $3e >
>80a2	bb 8f					.word	SyntaxError                      ; $3f ?
.80a4					VectorSet0:
>80a4	b2 81					.word	EOLCommand                       ; $80 !0:EOF
>80a6	bf 81					.word	Shift1Command                    ; $81 !1:SH1
>80a8	bb 8f					.word	SyntaxError                      ; $82 !2:SH2
>80aa	bb 8f					.word	SyntaxError                      ; $83 ABS(
>80ac	bb 8f					.word	SyntaxError                      ; $84 ALLOC(
>80ae	bb 8f					.word	SyntaxError                      ; $85 ASC(
>80b0	bb 8f					.word	SyntaxError                      ; $86 CHR$(
>80b2	bb 8f					.word	SyntaxError                      ; $87 DEC(
>80b4	61 8c					.word	UnaryFalse                       ; $88 FALSE
>80b6	bb 8f					.word	SyntaxError                      ; $89 GETDATE$(
>80b8	bb 8f					.word	SyntaxError                      ; $8a GETTIME$(
>80ba	bb 8f					.word	SyntaxError                      ; $8b HEX$(
>80bc	bb 8f					.word	SyntaxError                      ; $8c INT(
>80be	bb 8f					.word	SyntaxError                      ; $8d ISVAL(
>80c0	bb 8f					.word	SyntaxError                      ; $8e LEFT$(
>80c2	bb 8f					.word	SyntaxError                      ; $8f LEN(
>80c4	bb 8f					.word	SyntaxError                      ; $90 MID$(
>80c6	bb 8f					.word	SyntaxError                      ; $91 NOT
>80c8	bb 8f					.word	SyntaxError                      ; $92 PAGE
>80ca	bb 8f					.word	SyntaxError                      ; $93 RIGHT$(
>80cc	bb 8f					.word	SyntaxError                      ; $94 RND(
>80ce	bb 8f					.word	SyntaxError                      ; $95 SGN(
>80d0	bb 8f					.word	SyntaxError                      ; $96 SPC(
>80d2	bb 8f					.word	SyntaxError                      ; $97 STR$(
>80d4	55 8c					.word	UnaryTrue                        ; $98 TRUE
>80d6	bb 8f					.word	SyntaxError                      ; $99 VAL(
>80d8	bb 8f					.word	SyntaxError                      ; $9a FOR
>80da	bb 8f					.word	SyntaxError                      ; $9b IF
>80dc	bb 8f					.word	SyntaxError                      ; $9c PROC
>80de	bb 8f					.word	SyntaxError                      ; $9d REPEAT
>80e0	bb 8f					.word	SyntaxError                      ; $9e WHILE
>80e2	bb 8f					.word	SyntaxError                      ; $9f ENDIF
>80e4	bb 8f					.word	SyntaxError                      ; $a0 ENDPROC
>80e6	bb 8f					.word	SyntaxError                      ; $a1 NEXT
>80e8	bb 8f					.word	SyntaxError                      ; $a2 UNTIL
>80ea	bb 8f					.word	SyntaxError                      ; $a3 WEND
>80ec	30 81					.word	CallCommand                      ; $a4 CALL
>80ee	bb 8f					.word	SyntaxError                      ; $a5 CLS
>80f0	bb 8f					.word	SyntaxError                      ; $a6 DATA
>80f2	bb 8f					.word	SyntaxError                      ; $a7 DIM
>80f4	bb 8f					.word	SyntaxError                      ; $a8 GOSUB
>80f6	bb 8f					.word	SyntaxError                      ; $a9 GOTO
>80f8	bb 8f					.word	SyntaxError                      ; $aa LET
>80fa	bb 8f					.word	SyntaxError                      ; $ab PRINT
>80fc	bb 8f					.word	SyntaxError                      ; $ac READ
>80fe	6e 81					.word	RemCommand                       ; $ad REM
>8100	bb 8f					.word	SyntaxError                      ; $ae RETURN
>8102	bb 8f					.word	SyntaxError                      ; $af THEN
>8104	bb 8f					.word	SyntaxError                      ; $b0 TO
.8106					VectorSet1:
>8106	bb 8f					.word	SyntaxError                      ; $80 !0:EOF
>8108	bb 8f					.word	SyntaxError                      ; $81 !1:SH1
>810a	bb 8f					.word	SyntaxError                      ; $82 !2:SH2
>810c	22 81					.word	AssertCommand                    ; $83 ASSERT
>810e	3c 81					.word	ClearCommand                     ; $84 CLEAR
>8110	61 81					.word	EndCommand                       ; $85 END
>8112	bb 8f					.word	SyntaxError                      ; $86 LIST
>8114	64 81					.word	NewCommand                       ; $87 NEW
>8116	bb 8f					.word	SyntaxError                      ; $88 RESTORE
>8118	7b 81					.word	CommandRUN                       ; $89 RUN
>811a	bb 8f					.word	SyntaxError                      ; $8a STOP
.811c					VectorSet2:
>811c	bb 8f					.word	SyntaxError                      ; $80 !0:EOF
>811e	bb 8f					.word	SyntaxError                      ; $81 !1:SH1
>8120	bb 8f					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8122					AssertCommand:
.8122	20 a9 86	jsr $86a9			jsr 	EvaluateInteger 			; the assert test
.8125	20 5f 87	jsr $875f			jsr 	NSMIsZero 					; exit if result is non zero.
.8128	d0 05		bne $812f			bne 	_ACExit
.812a	a9 0a		lda #$0a		lda	#10
.812c	4c 1f 80	jmp $801f		jmp	ErrorHandler
.812f					_ACExit:
.812f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8130					CallCommand:
.8130	20 be 86	jsr $86be			jsr 	Evaluate16BitInteger
.8133	ad 10 06	lda $0610			lda 	NSMantissa1
.8136	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8139	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813c					ClearCommand:
.813c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.813e	85 36		sta $36				sta 	0+zTemp0
.8140	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8142	85 37		sta $37				sta 	1+zTemp0
.8144					_ClearZeroLoop:
.8144	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8146	f0 18		beq $8160			beq 	_ClearZeroEnd
.8148	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.814a	a9 00		lda #$00			lda 	#0
.814c					_ClearOneVariable:
.814c	91 36		sta ($36),y			sta 	(zTemp0),y
.814e	c8		iny				iny
.814f	c0 08		cpy #$08			cpy 	#8
.8151	d0 f9		bne $814c			bne 	_ClearOneVariable
.8153	18		clc				clc 								; go to the next variable
.8154	b2 36		lda ($36)			lda 	(zTemp0)
.8156	65 36		adc $36				adc 	zTemp0
.8158	85 36		sta $36				sta 	zTemp0
.815a	90 e8		bcc $8144			bcc 	_ClearZeroLoop
.815c	e6 37		inc $37				inc 	zTemp0+1
.815e	80 e4		bra $8144			bra 	_ClearZeroLoop
.8160					_ClearZeroEnd:
.8160	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8161					EndCommand:
.8161	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8164					NewCommand:
.8164	20 6c 87	jsr $876c			jsr 	MemoryNew
.8167	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.816a	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear everything.
.816d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.816e					RemCommand:
.816e	b1 30		lda ($30),y			lda 	(codePtr),y
.8170	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8172	d0 06		bne $817a			bne 	_RMExit
.8174	c8		iny				iny
.8175	98		tya				tya
.8176	38		sec				sec
.8177	71 30		adc ($30),y			adc 	(codePtr),y
.8179	a8		tay				tay
.817a					_RMExit:
.817a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.817b					CommandRUN:
.817b	20 3c 81	jsr $813c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.817e	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8180	85 30		sta $30				sta 	codePtr
.8182	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8184	85 31		sta $31				sta 	codePtr+1
.8186					RUNNewLine:
.8186	b2 30		lda ($30)			lda 	(codePtr)
.8188	f0 25		beq $81af			beq 	CRNoProgram         		; no then END.
.818a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.818c	9a		txs				txs
.818d					RUNCodePointerLine:
.818d	a0 02		ldy #$02			ldy 	#2 							; start of program
.818f					_CRIncMainLoop:
.818f	c8		iny				iny
.8190					_CRMainLoop:
.8190	b1 30		lda ($30),y			lda 	(codePtr),y
.8192	10 10		bpl $81a4			bpl 	_CRNotKeyword
.8194	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8196	b0 04		bcs $819c			bcs 	_CRIsKeyword
.8198	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.819a	b0 0d		bcs $81a9			bcs		_CRSyntaxError
.819c					_CRIsKeyword:
.819c	c8		iny				iny 								; consume command
.819d	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.819e	aa		tax				tax 								; put in X for vector jump
.819f	20 ac 81	jsr $81ac			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.81a2	80 ec		bra $8190			bra 	_CRMainLoop 				; and loop round
.81a4					_CRNotKeyword:
.81a4	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81a6	f0 e7		beq $818f			beq 	_CRIncMainLoop
>81a8	db						.byte 	$DB 						; causes a break in the emulator
.81a9					_CRSyntaxError:
.81a9	4c bb 8f	jmp $8fbb			jmp 	SyntaxError
.81ac					_CRCallVector0:
.81ac	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x)
.81af					CRNoProgram:
.81af	4c 61 81	jmp $8161			jmp 	EndCommand
.81b2					EOLCommand:
.81b2	18		clc				clc
.81b3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.81b5	65 30		adc $30				adc 	codePtr
.81b7	85 30		sta $30				sta 	codePtr
.81b9	90 02		bcc $81bd			bcc 	_CREExit
.81bb	e6 31		inc $31				inc 	codePtr+1
.81bd					_CREExit:
.81bd	80 c7		bra $8186			bra 	RunNewLine
.81bf					Shift1Command:
.81bf	b1 30		lda ($30),y			lda 	(codePtr),y
.81c1	c8		iny				iny
.81c2	0a		asl a				asl 	a
.81c3	aa		tax				tax
.81c4	7c 06 81	jmp ($8106,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8c3c					CheckRightBracket:
.8c3c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3e	c8		iny				iny
.8c3f	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8c41	d0 0f		bne $8c52			bne 	CNAFail
.8c43	60		rts				rts
.8c44					CheckComma:
.8c44	b1 30		lda ($30),y			lda 	(codePtr),y
.8c46	c8		iny				iny
.8c47	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8c49	d0 07		bne $8c52			bne 	CNAFail
.8c4b	60		rts				rts
.8c4c					CheckNextA:
.8c4c	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8c4e	d0 02		bne $8c52			bne 	CNAFail
.8c50	c8		iny				iny 								; skip character
.8c51	60		rts				rts 								; and exit
.8c52					CNAFail:
.8c52	4c bb 8f	jmp $8fbb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8c55					UnaryTrue:
.8c55	fa		plx				plx
.8c56					ReturnTrue:
.8c56	a9 01		lda #$01			lda 	#1  						; set to 1
.8c58	20 31 87	jsr $8731			jsr 	NSMSetByte
.8c5b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8c5d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c60	60		rts				rts
.8c61					UnaryFalse:
.8c61	fa		plx				plx
.8c62					ReturnFalse:
.8c62	4c 2f 87	jmp $872f			jmp 	NSMSetZero 					; set it all to zero
.8c65					BinaryCompareEqual:
.8c65	fa		plx				plx
.8c66	20 a1 8c	jsr $8ca1			jsr 	CompareBaseCode
.8c69	c9 00		cmp #$00			cmp 	#0
.8c6b	f0 e9		beq $8c56			beq 	ReturnTrue
.8c6d	80 f3		bra $8c62			bra 	ReturnFalse
.8c6f					BinaryCompareLess:
.8c6f	fa		plx				plx
.8c70	20 a1 8c	jsr $8ca1			jsr 	CompareBaseCode
.8c73	c9 ff		cmp #$ff			cmp 	#$FF
.8c75	f0 df		beq $8c56			beq 	ReturnTrue
.8c77	80 e9		bra $8c62			bra 	ReturnFalse
.8c79					BinaryCompareGreater:
.8c79	fa		plx				plx
.8c7a	20 a1 8c	jsr $8ca1			jsr 	CompareBaseCode
.8c7d	c9 01		cmp #$01			cmp 	#1
.8c7f	f0 d5		beq $8c56			beq 	ReturnTrue
.8c81	80 df		bra $8c62			bra 	ReturnFalse
.8c83					BinaryCompareNotEqual:
.8c83	fa		plx				plx
.8c84	20 a1 8c	jsr $8ca1			jsr 	CompareBaseCode
.8c87	c9 00		cmp #$00			cmp 	#0
.8c89	d0 cb		bne $8c56			bne 	ReturnTrue
.8c8b	80 d5		bra $8c62			bra 	ReturnFalse
.8c8d					BinaryCompareLessEqual:
.8c8d	fa		plx				plx
.8c8e	20 a1 8c	jsr $8ca1			jsr 	CompareBaseCode
.8c91	c9 01		cmp #$01			cmp 	#1
.8c93	d0 c1		bne $8c56			bne 	ReturnTrue
.8c95	80 cb		bra $8c62			bra 	ReturnFalse
.8c97					BinaryCompareGreaterEqual:
.8c97	fa		plx				plx
.8c98	20 a1 8c	jsr $8ca1			jsr 	CompareBaseCode
.8c9b	c9 ff		cmp #$ff			cmp 	#$FF
.8c9d	d0 b7		bne $8c56			bne 	ReturnTrue
.8c9f	80 c1		bra $8c62			bra 	ReturnFalse
.8ca1					CompareBaseCode:
.8ca1	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; make both values if references.
.8ca4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8ca7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8caa	29 10		and #$10			and 	#NSTString
.8cac	d0 36		bne $8ce4			bne 	_CBCString
.8cae	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8cb1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cb4	d0 31		bne $8ce7			bne 	_CBCFloat
.8cb6	20 ea 8c	jsr $8cea			jsr 	CompareFixMinusZero
.8cb9	e8		inx				inx
.8cba	20 ea 8c	jsr $8cea			jsr 	CompareFixMinusZero
.8cbd	ca		dex				dex
.8cbe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8cc1	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8cc4	10 0b		bpl $8cd1			bpl 	_CDCSameSign
.8cc6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8cc9	30 16		bmi $8ce1			bmi 	_CBCLess 					; return $FF
.8ccb					_CBCGreater:
.8ccb	a9 01		lda #$01			lda 	#1
.8ccd	60		rts				rts
.8cce					_CBCEqual:
.8cce	a9 00		lda #$00			lda 	#0
.8cd0	60		rts				rts
.8cd1					_CDCSameSign:
.8cd1	20 70 82	jsr $8270			jsr 	SubTopTwoStack 				; unsigned subtract
.8cd4	20 5f 87	jsr $875f			jsr 	NSMIsZero 					; or the mantissa together
.8cd7	f0 f5		beq $8cce			beq 	_CBCEqual 					; -0 == 0
.8cd9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8cdc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8cdf	10 ea		bpl $8ccb			bpl 	_CBCGreater
.8ce1					_CBCLess:
.8ce1	a9 ff		lda #$ff			lda 	#$FF
.8ce3	60		rts				rts
.8ce4					_CBCString:
.8ce4	4c c7 81	jmp $81c7			jmp 	CompareStrings
.8ce7					_CBCFloat:
.8ce7	4c d5 8e	jmp $8ed5			jmp 	CompareFloat
.8cea					CompareFixMinusZero:
.8cea	20 5f 87	jsr $875f			jsr 	NSMIsZero
.8ced	d0 03		bne $8cf2			bne 	_CFXMZNotZero
.8cef	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8cf2					_CFXMZNotZero:
.8cf2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8cf3					IntegerDivide:
.8cf3	fa		plx				plx
.8cf4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8cf7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cfa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8cfb	0a		asl a				asl 	a
.8cfc	10 05		bpl $8d03			bpl 	_NotRef
.8cfe	48		pha				pha
.8cff	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d02	68		pla				pla
.8d03					_NotRef:
.8d03	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d05	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d08	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d0b	f0 03		beq $8d10			beq 	_IntegerCode 				; if clear, then we have two integers
.8d0d	4c c5 8f	jmp $8fc5			jmp 	TypeError 					; anything else, type mismatch.
.8d10					_IntegerCode:
.8d10	20 32 8d	jsr $8d32			jsr 	CheckDivideZero 			; do div zero check
.8d13	20 69 8d	jsr $8d69			jsr 	Int32Divide 				; do the division
.8d16	20 26 8e	jsr $8e26			jsr 	CalculateSign 				; calculate result sign
.8d19					NSMCopyPlusTwoToZero:
.8d19	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8d1c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d1f	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8d22	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d25	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8d28	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d2b	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8d2e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d31	60		rts				rts
.8d32					CheckDivideZero:
.8d32	e8		inx				inx
.8d33	20 5f 87	jsr $875f			jsr 	NSMIsZero
.8d36	f0 02		beq $8d3a			beq 	_CDVError
.8d38	ca		dex				dex
.8d39	60		rts				rts
.8d3a					_CDVError:
.8d3a	a9 03		lda #$03		lda	#3
.8d3c	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d3f					IntegerModulus:
.8d3f	fa		plx				plx
.8d40	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d43	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d46	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d47	0a		asl a				asl 	a
.8d48	10 05		bpl $8d4f			bpl 	_NotRef
.8d4a	48		pha				pha
.8d4b	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d4e	68		pla				pla
.8d4f					_NotRef:
.8d4f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8d51	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d54	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d57	f0 03		beq $8d5c			beq 	_IntegerCode 				; if clear, then we have two integers
.8d59	4c c5 8f	jmp $8fc5			jmp 	TypeError 					; anything else, type mismatch.
.8d5c					_IntegerCode:
.8d5c	20 32 8d	jsr $8d32			jsr 	CheckDivideZero 			; do div zero check
.8d5f	20 69 8d	jsr $8d69			jsr 	Int32Divide 				; do the division
.8d62	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8d65	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8d68	60		rts				rts
.8d69					Int32Divide:
.8d69	48		pha				pha 								; save AXY
.8d6a	5a		phy				phy
.8d6b	20 06 87	jsr $8706			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d6e	20 2b 87	jsr $872b			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8d71	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8d73					_I32DivideLoop:
.8d73	e8		inx				inx
.8d74	e8		inx				inx
.8d75	20 44 87	jsr $8744			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8d78	ca		dex				dex
.8d79	ca		dex				dex
.8d7a	20 45 87	jsr $8745			jsr 	NSMRotateLeft
.8d7d	20 a9 8d	jsr $8da9			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d80	90 03		bcc $8d85			bcc 	_I32DivideNoCarryIn
.8d82	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8d85					_I32DivideNoCarryIn:
.8d85	88		dey				dey 								; loop round till division completed.
.8d86	d0 eb		bne $8d73			bne 	_I32DivideLoop
.8d88	7a		ply				ply 								; restore AXY and exit
.8d89	68		pla				pla
.8d8a	60		rts				rts
.8d8b					Int32ShiftDivide:
.8d8b	48		pha				pha 								; save AY
.8d8c	5a		phy				phy
.8d8d	e8		inx				inx 								; clear S[X+2]
.8d8e	e8		inx				inx
.8d8f	20 2f 87	jsr $872f			jsr 	NSMSetZero
.8d92	ca		dex				dex
.8d93	ca		dex				dex
.8d94	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8d96					_I32SDLoop:
.8d96	20 a9 8d	jsr $8da9			jsr 	DivideCheckSubtract 		; check if subtract possible
.8d99	e8		inx				inx
.8d9a	e8		inx				inx
.8d9b	20 45 87	jsr $8745			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8d9e	ca		dex				dex
.8d9f	ca		dex				dex
.8da0	20 45 87	jsr $8745			jsr 	NSMRotateLeft
.8da3	88		dey				dey 	 							; do 31 times
.8da4	d0 f0		bne $8d96			bne 	_I32SDLoop
.8da6	7a		ply				ply 								; restore AY and exit
.8da7	68		pla				pla
.8da8	60		rts				rts
.8da9					DivideCheckSubtract:
.8da9	20 70 82	jsr $8270			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8dac	b0 04		bcs $8db2			bcs 	_DCSExit 					; if carry set, then could do, exit
.8dae	20 4a 82	jsr $824a			jsr 	AddTopTwoStack 				; add it back in
.8db1	18		clc				clc 								; and return False
.8db2					_DCSExit:
.8db2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8db3					MulInteger:
.8db3	fa		plx				plx
.8db4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8db7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8dbb	0a		asl a				asl 	a
.8dbc	10 05		bpl $8dc3			bpl 	_NotRef
.8dbe	48		pha				pha
.8dbf	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8dc2	68		pla				pla
.8dc3					_NotRef:
.8dc3	0a		asl a				asl 	a 							; put MSB of type into A:7
.8dc4	30 0b		bmi $8dd1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8dc6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8dc9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dcc	f0 06		beq $8dd4			beq 	_IntegerCode 				; if clear, then we have two integers
.8dce	4c 22 8f	jmp $8f22			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8dd1					_StringData:
.8dd1	4c cf 8f	jmp $8fcf			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8dd4					_IntegerCode:
.8dd4	20 e1 8d	jsr $8de1			jsr 	MultiplyShort
.8dd7	c9 00		cmp #$00			cmp 	#0
.8dd9	f0 05		beq $8de0			beq 	_MIExit
.8ddb	a9 04		lda #$04		lda	#4
.8ddd	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8de0					_MIExit:
.8de0	60		rts				rts
.8de1					MultiplyShort:
.8de1	5a		phy				phy 								; save Y
.8de2	20 06 87	jsr $8706			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8de5	20 2b 87	jsr $872b			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8de8	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8dea					_I32MLoop:
.8dea	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8ded	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8df0	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8df3	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8df6	f0 28		beq $8e20			beq 	_I32MExit 					; exit if zero
.8df8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8dfb	29 01		and #$01			and 	#1
.8dfd	f0 0e		beq $8e0d			beq 	_I32MNoAdd
.8dff	20 4a 82	jsr $824a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8e02	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8e05	10 06		bpl $8e0d			bpl 	_I32MNoAdd
.8e07					_I32ShiftRight:
.8e07	20 52 87	jsr $8752			jsr 	NSMShiftRight 				; shift S[X] right
.8e0a	c8		iny				iny 								; increment shift count
.8e0b	80 0a		bra $8e17			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8e0d					_I32MNoAdd:
.8e0d	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8e10	70 f5		bvs $8e07			bvs 	_I32ShiftRight 				; instead.
.8e12	e8		inx				inx
.8e13	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8e16	ca		dex				dex
.8e17					_I32MShiftUpper:
.8e17	e8		inx				inx 								; shift S[X+2] right
.8e18	e8		inx				inx
.8e19	20 52 87	jsr $8752			jsr 	NSMShiftRight
.8e1c	ca		dex				dex
.8e1d	ca		dex				dex
.8e1e	80 ca		bra $8dea			bra 	_I32MLoop 					; try again.
.8e20					_I32MExit:
.8e20	20 26 8e	jsr $8e26			jsr 	CalculateSign
.8e23	98		tya				tya 								; shift in A
.8e24	7a		ply				ply 								; restore Y and exit
.8e25	60		rts				rts
.8e26					CalculateSign:
.8e26	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8e29	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8e2c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e2f	0a		asl a				asl 	a 							; shift bit 7 into carry
.8e30	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8e33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.81c7					CompareStrings:
.81c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.81ca	3d 01 06	and $0601,x			and 	NSStatus+1,x
.81cd	29 10		and #$10			and 	#NSBIsString
.81cf	f0 2c		beq $81fd			beq 	_CSTypeError
.81d1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.81d4	85 36		sta $36				sta 	zTemp0
.81d6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81d9	85 37		sta $37				sta 	zTemp0+1
.81db	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.81de	85 38		sta $38				sta 	zTemp1
.81e0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.81e3	85 39		sta $39				sta 	zTemp1+1
.81e5	5a		phy				phy 								; save Y so we can access strings
.81e6	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.81e8					_CSLoop:
.81e8	c8		iny				iny
.81e9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.81eb	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.81ed	d0 06		bne $81f5			bne 	_CSDifferent
.81ef	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.81f1	d0 f5		bne $81e8			bne 	_CSLoop 					; still comparing
.81f3					_CSExit:
.81f3	7a		ply				ply 								; reached end, return zero in A from EOS
.81f4	60		rts				rts
.81f5					_CSDifferent:
.81f5	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.81f7	90 fa		bcc $81f3			bcc		_CSExit
.81f9	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.81fb	80 f6		bra $81f3			bra 	_CSExit
.81fd					_CSTypeError:
.81fd	4c c5 8f	jmp $8fc5			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.8200					ShiftLeft:
.8200	38		sec				sec
.8201	80 01		bra $8204			bra 	ShiftMain
.8203					ShiftRight:
.8203	18		clc				clc
.8204					ShiftMain:
.8204	fa		plx				plx 								; restore X
.8205	08		php				php 								; save direction
.8206	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8209	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.820c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.820d	0a		asl a				asl 	a
.820e	10 05		bpl $8215			bpl 	_NotRef
.8210	48		pha				pha
.8211	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8214	68		pla				pla
.8215					_NotRef:
.8215	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8217	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.821a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.821d	f0 03		beq $8222			beq 	_IntegerCode 				; if clear, then we have two integers
.821f	4c c5 8f	jmp $8fc5			jmp 	TypeError 					; anything else, type mismatch.
.8222					_IntegerCode:
.8222	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8225	29 e0		and #$e0			and 	#$E0
.8227	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.822a	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.822d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8230	d0 13		bne $8245			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8232					_SMLoop:
.8232	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8235	30 11		bmi $8248			bmi 	_SMExit 					; exit if done.
.8237	28		plp				plp 								; restore direcition setting
.8238	08		php				php
.8239	90 05		bcc $8240			bcc 	_SMRight
.823b	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; shift left if CS
.823e	80 f2		bra $8232			bra 	_SMLoop
.8240					_SMRight:
.8240	20 52 87	jsr $8752			jsr 	NSMShiftRight 				; shift right if CC
.8243	80 ed		bra $8232			bra 	_SMLoop
.8245					_SMExit0:
.8245	20 2f 87	jsr $872f			jsr 	NSMSetZero 					; return zero.
.8248					_SMExit:
.8248	28		plp				plp 								; throw direction
.8249	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.824a					AddTopTwoStack:
.824a	18		clc				clc
.824b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.824e	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8251	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8254	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8257	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.825a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.825d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8260	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8263	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8266	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8269	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.826c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.826f	60		rts				rts
.8270					SubTopTwoStack:
.8270	38		sec				sec
.8271	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8274	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8277	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.827a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.827d	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8280	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8283	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8286	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8289	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.828c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.828f	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8292	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8295	60		rts				rts
.8296					AddInteger:
.8296	fa		plx				plx
.8297	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.829a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.829d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.829e	0a		asl a				asl 	a
.829f	10 05		bpl $82a6			bpl 	_NotRef
.82a1	48		pha				pha
.82a2	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82a5	68		pla				pla
.82a6					_NotRef:
.82a6	0a		asl a				asl 	a 							; put MSB of type into A:7
.82a7	30 0b		bmi $82b4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82a9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82ac	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82af	f0 06		beq $82b7			beq 	_IntegerCode 				; if clear, then we have two integers
.82b1	4c 34 8e	jmp $8e34			jmp 	FloatingPointAdd 							; otherwise at least one float.
.82b4					_StringData:
.82b4	4c cf 8f	jmp $8fcf			jmp 	NotDoneError							; at least one string - don't know both are strings.
.82b7					_IntegerCode:
.82b7					AddCode:
.82b7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.82ba	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.82bd	10 8b		bpl $824a			bpl 	AddTopTwoStack
.82bf	20 70 82	jsr $8270			jsr 	SubTopTwoStack 				; do a physical subtraction
.82c2	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.82c5	10 09		bpl $82d0			bpl 	_AddExit
.82c7	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.82ca	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cd	20 e4 86	jsr $86e4			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.82d0					_AddExit:
.82d0	60		rts				rts
.82d1					SubInteger:
.82d1	fa		plx				plx
.82d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82d9	0a		asl a				asl 	a
.82da	10 05		bpl $82e1			bpl 	_NotRef
.82dc	48		pha				pha
.82dd	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82e0	68		pla				pla
.82e1					_NotRef:
.82e1	0a		asl a				asl 	a 							; put MSB of type into A:7
.82e2	30 0b		bmi $82ef			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82e4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82e7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82ea	f0 06		beq $82f2			beq 	_IntegerCode 				; if clear, then we have two integers
.82ec	4c 39 8e	jmp $8e39			jmp 	FloatingPointSub 							; otherwise at least one float.
.82ef					_StringData:
.82ef	4c cf 8f	jmp $8fcf			jmp 	NotDoneError							; at least one string - don't know both are strings.
.82f2					_IntegerCode:
.82f2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.82f5	49 80		eor #$80			eor 	#$80
.82f7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.82fa	80 bb		bra $82b7			bra 	AddCode 					; and do the same code as add.
.82fc					AndInteger:
.82fc	fa		plx				plx
.82fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8300	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8303	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8304	0a		asl a				asl 	a
.8305	10 05		bpl $830c			bpl 	_NotRef
.8307	48		pha				pha
.8308	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.830b	68		pla				pla
.830c					_NotRef:
.830c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.830e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8311	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8314	f0 03		beq $8319			beq 	_IntegerCode 				; if clear, then we have two integers
.8316	4c c5 8f	jmp $8fc5			jmp 	TypeError 					; anything else, type mismatch.
.8319					_IntegerCode:
.8319	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.831c	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.831f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8322	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8325	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8328	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.832b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.832e	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8331	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8334	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8337	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.833a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.833d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8340	60		rts				rts
.8341					OraInteger:
.8341	fa		plx				plx
.8342	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8345	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8348	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8349	0a		asl a				asl 	a
.834a	10 05		bpl $8351			bpl 	_NotRef
.834c	48		pha				pha
.834d	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8350	68		pla				pla
.8351					_NotRef:
.8351	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8353	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8356	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8359	f0 03		beq $835e			beq 	_IntegerCode 				; if clear, then we have two integers
.835b	4c c5 8f	jmp $8fc5			jmp 	TypeError 					; anything else, type mismatch.
.835e					_IntegerCode:
.835e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8361	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8364	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8367	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.836a	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.836d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8370	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8373	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8376	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8379	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.837c	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.837f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8382	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8385	60		rts				rts
.8386					EorInteger:
.8386	fa		plx				plx
.8387	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.838a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.838d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.838e	0a		asl a				asl 	a
.838f	10 05		bpl $8396			bpl 	_NotRef
.8391	48		pha				pha
.8392	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8395	68		pla				pla
.8396					_NotRef:
.8396	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8398	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.839b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.839e	f0 03		beq $83a3			beq 	_IntegerCode 				; if clear, then we have two integers
.83a0	4c c5 8f	jmp $8fc5			jmp 	TypeError 					; anything else, type mismatch.
.83a3					_IntegerCode:
.83a3	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83a6	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.83a9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83ac	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83af	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.83b2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83b5	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83b8	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.83bb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83be	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83c1	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.83c4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83c7	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.83cb					PrecedenceLevel:
>83cb	04					.byte	 4	; $00 <<
>83cc	02					.byte	 2	; $01 <=
>83cd	02					.byte	 2	; $02 <>
>83ce	00					.byte	 0	; $03 !!3
>83cf	00					.byte	 0	; $04 ><
>83d0	02					.byte	 2	; $05 >=
>83d1	04					.byte	 4	; $06 >>
>83d2	00					.byte	 0	; $07 !!7
>83d3	00					.byte	 0	; $08 !!8
>83d4	00					.byte	 0	; $09 !!9
>83d5	00					.byte	 0	; $0a !!10
>83d6	00					.byte	 0	; $0b !!11
>83d7	00					.byte	 0	; $0c !!12
>83d8	00					.byte	 0	; $0d !!13
>83d9	00					.byte	 0	; $0e !!14
>83da	00					.byte	 0	; $0f !!15
>83db	00					.byte	 0	; $10 @
>83dc	00					.byte	 0	; $11 !!17
>83dd	00					.byte	 0	; $12 !!18
>83de	00					.byte	 0	; $13 [
>83df	04					.byte	 4	; $14 \
>83e0	00					.byte	 0	; $15 ]
>83e1	01					.byte	 1	; $16 ^
>83e2	00					.byte	 0	; $17 _
>83e3	00					.byte	 0	; $18 `
>83e4	00					.byte	 0	; $19 !!25
>83e5	00					.byte	 0	; $1a !!26
>83e6	00					.byte	 0	; $1b {
>83e7	01					.byte	 1	; $1c |
>83e8	00					.byte	 0	; $1d }
>83e9	00					.byte	 0	; $1e ~
>83ea	00					.byte	 0	; $1f [7m<7F>[m
>83eb	00					.byte	 0	; $20
>83ec	05					.byte	 5	; $21 !
>83ed	00					.byte	 0	; $22 "
>83ee	00					.byte	 0	; $23 #
>83ef	05					.byte	 5	; $24 $
>83f0	04					.byte	 4	; $25 %
>83f1	01					.byte	 1	; $26 &
>83f2	00					.byte	 0	; $27 '
>83f3	00					.byte	 0	; $28 (
>83f4	00					.byte	 0	; $29 )
>83f5	04					.byte	 4	; $2a *
>83f6	03					.byte	 3	; $2b +
>83f7	00					.byte	 0	; $2c ,
>83f8	03					.byte	 3	; $2d -
>83f9	00					.byte	 0	; $2e .
>83fa	04					.byte	 4	; $2f /
>83fb	00					.byte	 0	; $30 0
>83fc	00					.byte	 0	; $31 1
>83fd	00					.byte	 0	; $32 2
>83fe	00					.byte	 0	; $33 3
>83ff	00					.byte	 0	; $34 4
>8400	00					.byte	 0	; $35 5
>8401	00					.byte	 0	; $36 6
>8402	00					.byte	 0	; $37 7
>8403	00					.byte	 0	; $38 8
>8404	00					.byte	 0	; $39 9
>8405	00					.byte	 0	; $3a :
>8406	00					.byte	 0	; $3b ;
>8407	02					.byte	 2	; $3c <
>8408	02					.byte	 2	; $3d =
>8409	02					.byte	 2	; $3e >
>840a	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.840b					EvaluateExpressionAt0:
.840b	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.840d					EvaluateExpression:
.840d	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.840f					EvaluateExpressionAtPrecedence:
.840f	48		pha				pha 								; save precedence level
.8410	20 97 85	jsr $8597			jsr 	EvaluateTerm 				; evaluate term into level X.
.8413	68		pla				pla 								; restore precedence level.
.8414					_EXPRLoop:
.8414	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8416	b1 30		lda ($30),y			lda 	(codePtr),y
.8418	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.841a	b0 25		bcs $8441			bcs 	_EXPRExit
.841c	da		phx				phx 								; read the operator precedence
.841d	aa		tax				tax
.841e	bd cb 83	lda $83cb,x			lda 	PrecedenceLevel,x
.8421	fa		plx				plx
.8422	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8424	f0 1b		beq $8441			beq 	_EXPRExit
.8426	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8428	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.842a	c5 37		cmp $37				cmp 	zTemp0+1
.842c	b0 13		bcs $8441			bcs		_EXPRExit 					; if current >= operator exit
.842e	48		pha				pha 								; save current precedence.
.842f	b1 30		lda ($30),y			lda 	(codePtr),y
.8431	c8		iny				iny
.8432	48		pha				pha
.8433	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8435	e8		inx				inx 								; work out the right hand side.
.8436	20 0f 84	jsr $840f			jsr 	EvaluateExpressionAtPrecedence
.8439	ca		dex				dex
.843a	68		pla				pla 								; get operator, call the code.
.843b	20 44 84	jsr $8444			jsr 	_EXPRCaller
.843e	68		pla				pla 								; restore precedence level
.843f	80 d3		bra $8414			bra 	_EXPRLoop 					; and go round.
.8441					_EXPRExit:
.8441	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8443	60		rts				rts
.8444					_EXPRCaller:
.8444	da		phx				phx 								; save on stack, first thing is to restore it
.8445	0a		asl a				asl 	a 							; double so can use vectors into X
.8446	aa		tax				tax
.8447	7c 24 80	jmp ($8024,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8e34					FloatingPointAdd:
.8e34	20 4b 8f	jsr $8f4b			jsr 	FloatPrepare 				; prepare for floats
.8e37	80 0b		bra $8e44			bra 	FloatAdd
.8e39					FloatingPointSub:
.8e39	20 4b 8f	jsr $8f4b			jsr 	FloatPrepare 				; prepare for floats
.8e3c					FloatSubtract:
.8e3c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.8e3f	49 80		eor #$80			eor 	#$80
.8e41	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.8e44					FloatAdd:
.8e44	48		pha				pha
.8e45	5a		phy				phy
.8e46	20 5c 8f	jsr $8f5c			jsr 	NSNormalise 				; normalise S[X]
.8e49	f0 54		beq $8e9f			beq 	_FAReturn1
.8e4b	e8		inx				inx 								; normalise S[X+1]
.8e4c	20 5c 8f	jsr $8f5c			jsr 	NSNormalise
.8e4f	ca		dex				dex
.8e50	c9 00		cmp #$00			cmp 	#0
.8e52	f0 6f		beq $8ec3			beq 	_FAExit 					; if so, just return A
.8e54	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.8e57	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.8e5a	f0 1b		beq $8e77			beq 	_FAExponentsEqual
.8e5c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.8e5f	a8		tay				tay
.8e60	38		sec				sec 								; do a signed comparison of the exponents.
.8e61	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8e64	50 02		bvc $8e68			bvc 	_FANoSignedChange
.8e66	49 80		eor #$80			eor 	#$80
.8e68					_FANoSignedChange:
.8e68	29 80		and #$80			and 	#$80
.8e6a	10 03		bpl $8e6f			bpl 	_FAHaveMax
.8e6c	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.8e6f					_FAHaveMax:
.8e6f	20 c6 8e	jsr $8ec6			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.8e72	e8		inx				inx
.8e73	20 c6 8e	jsr $8ec6			jsr 	_FAShiftToExponent
.8e76	ca		dex				dex
.8e77					_FAExponentsEqual:
.8e77	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.8e7a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e7d	30 10		bmi $8e8f			bmi 	_FADifferentSigns
.8e7f	20 4a 82	jsr $824a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.8e82	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.8e85	10 3c		bpl $8ec3			bpl 	_FAExit 					; if no, we are done.
.8e87	20 52 87	jsr $8752			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.8e8a	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.8e8d	80 34		bra $8ec3			bra 	_FAExit
.8e8f					_FADifferentSigns:
.8e8f	20 70 82	jsr $8270			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.8e92	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.8e95	10 2c		bpl $8ec3			bpl 	_FAExit 					; if no, we are done.
.8e97	20 db 86	jsr $86db			jsr 	NSMNegate 					; netate result
.8e9a	20 e4 86	jsr $86e4			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.8e9d	80 24		bra $8ec3			bra 	_FAExit
.8e9f					_FAReturn1:
.8e9f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8ea2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ea5	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8ea8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8eab	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8eae	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8eb1	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.8eb4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eb7	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.8eba	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8ebd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.8ec0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ec3					_FAExit:
.8ec3	7a		ply				ply
.8ec4	68		pla				pla
.8ec5	60		rts				rts
.8ec6					_FAShiftToExponent:
.8ec6	98		tya				tya 								; compare Y to exponent
.8ec7	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.8eca	f0 08		beq $8ed4			beq 	_FASEExit 					; exit if so.
.8ecc	20 52 87	jsr $8752			jsr 	NSMShiftRight	 			; shift the mantissa right
.8ecf	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.8ed2	80 f2		bra $8ec6			bra 	_FAShiftToExponent
.8ed4					_FASEExit:
.8ed4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.8ed5					CompareFloat:
.8ed5	20 3c 8e	jsr $8e3c			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.8ed8	a9 00		lda #$00			lda 	#0
.8eda	1d 10 06	ora $0610,x			ora 	NSMantissa1,x				; the accuracy can be tweaked.
.8edd	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ee0	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.8ee3	f0 09		beq $8eee			beq 	_FCExit 					; zero, so approximately identical
.8ee5	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.8ee7	3c 00 06	bit $0600,x			bit 	NSStatus,x
.8eea	10 02		bpl $8eee			bpl 	_FCExit
.8eec					_FCNegative:
.8eec	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.8eee					_FCExit:
.8eee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.8eef					FDivideCommand:
.8eef	fa		plx				plx	 								; restore stack position
.8ef0	20 4b 8f	jsr $8f4b			jsr 	FloatPrepare 				; prepare for floats
.8ef3					FloatDivide:
.8ef3	48		pha				pha
.8ef4	e8		inx				inx
.8ef5	20 5c 8f	jsr $8f5c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.8ef8	ca		dex				dex
.8ef9	c9 00		cmp #$00			cmp 	#0
.8efb	f0 20		beq $8f1d			beq 	_FDZero
.8efd	20 5c 8f	jsr $8f5c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.8f00	f0 19		beq $8f1b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.8f02	20 8b 8d	jsr $8d8b			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.8f05	20 19 8d	jsr $8d19			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.8f08	20 5c 8f	jsr $8f5c			jsr		NSNormalise 				; renormalise
.8f0b	20 26 8e	jsr $8e26			jsr 	CalculateSign 				; calculate result sign
.8f0e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.8f11	38		sec				sec
.8f12	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8f15	38		sec				sec
.8f16	e9 1e		sbc #$1e			sbc 	#30
.8f18	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f1b					_FDExit:
.8f1b	68		pla				pla
.8f1c	60		rts				rts
.8f1d					_FDZero:
.8f1d	a9 03		lda #$03		lda	#3
.8f1f	4c 1f 80	jmp $801f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.8f22					FloatingPointMultiply:
.8f22	20 4b 8f	jsr $8f4b			jsr 	FloatPrepare 				; prepare for floats
.8f25					FloatMultiply:
.8f25	48		pha				pha
.8f26	20 5c 8f	jsr $8f5c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.8f29	f0 1b		beq $8f46			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.8f2b	e8		inx				inx
.8f2c	20 5c 8f	jsr $8f5c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.8f2f	ca		dex				dex
.8f30	c9 00		cmp #$00			cmp 	#0
.8f32	f0 0f		beq $8f43			beq 	_FDSetZero
.8f34	20 e1 8d	jsr $8de1			jsr 	MultiplyShort 				; calculate the result.
.8f37	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.8f3a	18		clc				clc
.8f3b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.8f3e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f41	80 03		bra $8f46			bra 	_FDExit
.8f43					_FDSetZero:
.8f43	20 2f 87	jsr $872f			jsr 	NSMSetZero 					; return 0
.8f46					_FDExit:
.8f46	20 5c 8f	jsr $8f5c			jsr 	NSNormalise 				; normalise the result
.8f49	68		pla				pla
.8f4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.8f4b					FloatPrepare:
.8f4b	20 4a 84	jsr $844a			jsr 	DereferenceTopTwo 			; dereference the top two values
.8f4e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.8f51	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f54	29 10		and #$10			and 	#NSBIsString
.8f56	d0 01		bne $8f59			bne 	_FDType
.8f58	60		rts				rts
.8f59					_FDType:
.8f59	4c c5 8f	jmp $8fc5			jmp 	TypeError
.8f5c					NSNormalise:
.8f5c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.8f5f	29 80		and #$80			and 	#$80
.8f61	09 08		ora #$08			ora 	#NSTFloat
.8f63	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f66	20 5f 87	jsr $875f			jsr 	NSMIsZero 					; if zero exit
.8f69	d0 09		bne $8f74			bne 	_NSNormaliseLoop 			; if so, normalise it.
.8f6b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8f6e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.8f71	a9 00		lda #$00			lda 	#0 							; set Z flag
.8f73	60		rts				rts
.8f74					_NSNormaliseLoop:
.8f74	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.8f77	70 08		bvs $8f81			bvs 	_NSNExit 					; exit if so with Z flag clear
.8f79	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; shift mantissa left
.8f7c	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.8f7f	80 f3		bra $8f74			bra 	_NSNormaliseLoop
.8f81					_NSNExit:
.8f81	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.8f83	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.844a					DereferenceTopTwo:
.844a	e8		inx				inx
.844b	20 4f 84	jsr $844f			jsr 	Dereference 				; deref x+1
.844e	ca		dex				dex  								; falls through to deref x
.844f					Dereference:
.844f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8452	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8454	f0 57		beq $84ad			beq 	_DRFExit 					; not a reference
.8456	5a		phy				phy
.8457	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.845a	85 36		sta $36				sta 	zTemp0
.845c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.845f	85 37		sta $37				sta 	zTemp0+1
.8461	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8464	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8466	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8469	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.846c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.846e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8470	f0 0f		beq $8481			beq 	_DRFDereferenceTwo
.8472	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8474	f0 39		beq $84af			beq 	_DRFFull
.8476	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8479	29 03		and #$03			and 	#3
.847b	f0 32		beq $84af			beq 	_DRFFull 					; the whole word
.847d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.847f	f0 07		beq $8488			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8481					_DRFDereferenceTwo:
.8481	a0 01		ldy #$01			ldy 	#1
.8483	b1 36		lda ($36),y			lda 	(zTemp0),y
.8485	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8488					_DRFClear23:
.8488	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.848b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.848e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8491	29 18		and #$18			and 	#NSBTypeMask
.8493	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8496	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8498	d0 12		bne $84ac			bne 	_DRFNotString
.849a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.849d	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.84a0	d0 0a		bne $84ac			bne 	_DRFNotString
.84a2	a9 ae		lda #$ae			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.84a4	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.84a7	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.84a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.84ac					_DRFNotString
.84ac	7a		ply				ply 								; restore Y and exit
.84ad					_DRFExit:
.84ad	60		rts				rts
.84ae					_DRFNullString:
>84ae	00						.byte 	0
.84af					_DRFFull:
.84af	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.84b1	b1 36		lda ($36),y			lda 	(zTemp0),y
.84b3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84b6	c8		iny				iny
.84b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.84b9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84bc	c8		iny				iny
.84bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.84bf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84c2	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.84c5	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.84c8	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.84ca	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.84cd	f0 06		beq $84d5			beq 	_DRFNoExponent
.84cf	c8		iny				iny 								; if not, read the exponent as well.
.84d0	b1 36		lda ($36),y			lda 	(zTemp0),y
.84d2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.84d5					_DRFNoExponent:
.84d5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.84d8	10 0d		bpl $84e7			bpl 	_DRFExit2 					; if not, then exit.
.84da	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.84dc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84df	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.84e2	09 80		ora #$80			ora 	#NSBIsNegative
.84e4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84e7					_DRFExit2:
.84e7	7a		ply				ply
.84e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.84e9					EncodeNumberStart:
.84e9	38		sec				sec
.84ea	80 01		bra $84ed			bra 	EncodeNumberContinue+1
.84ec					EncodeNumberContinue:
.84ec	18		clc				clc
.84ed	08		php				php 								; save reset.
.84ee	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.84f0	f0 0b		beq $84fd			beq 	_ENIsOkay
.84f2	c9 30		cmp #$30			cmp 	#"0"
.84f4	90 04		bcc $84fa			bcc 	_ENBadNumber
.84f6	c9 3a		cmp #$3a			cmp 	#"9"+1
.84f8	90 03		bcc $84fd			bcc 	_ENIsOkay
.84fa					_ENBadNumber:
.84fa	28		plp				plp 								; throw saved reset
.84fb					_ENFail:
.84fb	18		clc				clc 								; not allowed
.84fc	60		rts				rts
.84fd					_ENIsOkay:
.84fd	28		plp				plp 								; are we restarting
.84fe	90 0c		bcc $850c			bcc 	_ENNoRestart
.8500					_ENStartEncode:
.8500	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8502	20 31 87	jsr $8731			jsr 	NSMSetByte
.8505	a9 01		lda #$01			lda 	#ESTA_Low
.8507					_ENExitChange:
.8507	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.850a	38		sec				sec
.850b	60		rts				rts
.850c					_ENNoRestart:
.850c	48		pha				pha 								; save on stack.
.850d	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8510	c9 01		cmp #$01			cmp 	#ESTA_Low
.8512	f0 05		beq $8519			beq  	_ESTALowState
.8514	c9 02		cmp #$02			cmp 	#ESTA_High
.8516	f0 23		beq $853b			beq 	_ESTAHighState
>8518	db						.byte 	$DB 						; causes a break in the emulator
.8519					_ESTALowState:
.8519	68		pla				pla 								; get value back
.851a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.851c	f0 27		beq $8545			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.851e	29 0f		and #$0f			and 	#15 						; make digit
.8520	85 36		sta $36				sta 	zTemp0 						; save it.
.8522	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8525	0a		asl a				asl 	a
.8526	0a		asl a				asl 	a
.8527	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.852a	0a		asl a				asl 	a
.852b	65 36		adc $36				adc 	zTemp0
.852d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8530	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8532	90 05		bcc $8539			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8534	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8536	8d 05 07	sta $0705			sta 	EncodeState
.8539					_ESTANoSwitch:
.8539	38		sec				sec
.853a	60		rts				rts
.853b					_ESTAHighState:
.853b	68		pla				pla 								; get value back
.853c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.853e	f0 05		beq $8545			beq 	_ESTASwitchFloat
.8540	20 46 85	jsr $8546			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8543	38		sec				sec
.8544	60		rts				rts
.8545					_ESTASwitchFloat:
>8545	db						.byte 	$DB 						; causes a break in the emulator
.8546					ESTAShiftDigitIntoMantissa:
.8546	29 0f		and #$0f			and 	#15 						; save digit
.8548	48		pha				pha
.8549	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.854c	48		pha				pha
.854d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8550	48		pha				pha
.8551	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8554	48		pha				pha
.8555	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8558	48		pha				pha
.8559	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; x 2
.855c	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; x 4
.855f	18		clc				clc 								; pop mantissa and add
.8560	68		pla				pla
.8561	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8564	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8567	68		pla				pla
.8568	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.856b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.856e	68		pla				pla
.856f	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8572	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8575	68		pla				pla
.8576	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8579	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.857c	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; x 10
.857f	68		pla				pla 								; add digit
.8580	18		clc				clc
.8581	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8584	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8587	90 0d		bcc $8596			bcc 	_ESTASDExit
.8589	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.858c	d0 08		bne $8596			bne 	_ESTASDExit
.858e	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8591	d0 03		bne $8596			bne 	_ESTASDExit
.8593	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8596					_ESTASDExit:
.8596	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8597					EvaluateTerm:
.8597	b1 30		lda ($30),y			lda 	(codePtr),y
.8599	30 18		bmi $85b3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.859b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.859d	b0 6e		bcs $860d			bcs 	_ETVariable
.859f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.85a1	90 6e		bcc $8611			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.85a3	c9 3a		cmp #$3a			cmp 	#'9'+1
.85a5	b0 6a		bcs $8611			bcs 	_ETPuncUnary
.85a7	20 e9 84	jsr $84e9			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.85aa					_ETNumber:
.85aa	c8		iny				iny 								; keep encoding until we have the numbers
.85ab	b1 30		lda ($30),y			lda 	(codePtr),y
.85ad	20 ec 84	jsr $84ec			jsr 	EncodeNumberContinue
.85b0	b0 f8		bcs $85aa			bcs 	_ETNumber 					; go back if accepted.
.85b2	60		rts				rts
.85b3					_ETCheckUnary:
.85b3	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.85b5	f0 40		beq $85f7			beq 	_ETString
.85b7	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.85b9	f0 11		beq $85cc			beq 	_ETHexConstant
.85bb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.85bd	90 0a		bcc $85c9			bcc 	_ETSyntaxError
.85bf	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1
.85c1	b0 06		bcs $85c9			bcs 	_ETSyntaxError
.85c3	da		phx				phx 								; push X on the stack
.85c4	0a		asl a				asl 	a 							; put vector x 2 into X
.85c5	aa		tax				tax
.85c6	7c a4 80	jmp ($80a4,x)			jmp 	(VectorSet0,x) 				; and do it.
.85c9					_ETSyntaxError:
.85c9	4c bb 8f	jmp $8fbb			jmp 	SyntaxError
.85cc					_ETHexConstant:
.85cc	c8		iny				iny 								; skip #
.85cd	c8		iny				iny 								; skip count
.85ce	20 2f 87	jsr $872f			jsr 	NSMSetZero 					; clear result
.85d1					_ETHLoop:
.85d1	b1 30		lda ($30),y			lda 	(codePtr),y
.85d3	c8		iny				iny 								; and consume
.85d4	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.85d6	f0 1e		beq $85f6			beq 	_ETHExit
.85d8	48		pha				pha 								; save on stack.
.85d9	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; x 2
.85dc	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; x 4
.85df	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; x 8
.85e2	20 44 87	jsr $8744			jsr 	NSMShiftLeft 				; x 16
.85e5	68		pla				pla 								; ASCII
.85e6	c9 41		cmp #$41			cmp 	#'A'
.85e8	90 02		bcc $85ec			bcc 	_ETHNotChar
.85ea	e9 07		sbc #$07			sbc 	#7
.85ec					_ETHNotChar:
.85ec	29 0f		and #$0f			and 	#15 						; digit now
.85ee	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.85f1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85f4	80 db		bra $85d1			bra 	_ETHLoop 					; go round.
.85f6					_ETHExit:
.85f6	60		rts				rts
.85f7					_ETString:
.85f7	c8		iny				iny 								; look at length
.85f8	b1 30		lda ($30),y			lda 	(codePtr),y
.85fa	48		pha				pha
.85fb	c8		iny				iny 								; first character
.85fc	20 a8 87	jsr $87a8			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.85ff	68		pla				pla 								; restore count and save
.8600	85 36		sta $36				sta 	zTemp0
.8602	98		tya				tya 								; add length to Y to skip it.
.8603	18		clc				clc
.8604	65 36		adc $36				adc 	zTemp0
.8606	a8		tay				tay
.8607	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8609	9d 00 06	sta $0600,x			sta 	NSStatus,x
.860c	60		rts				rts
.860d					_ETVariable:
>860d	db						.byte 	$DB 						; causes a break in the emulator
.860e	4c ff ff	jmp $ffff			jmp 	$FFFF
.8611					_ETPuncUnary:
.8611	c8		iny				iny 								; consume the unary character
.8612	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8614	f0 31		beq $8647			beq 	_ETUnaryNegate
.8616	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8618	f0 3d		beq $8657			beq 	_ETDereference
.861a	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.861c	f0 58		beq $8676			beq 	_ETParenthesis
.861e	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.8620	f0 43		beq $8665			beq 	_ETStringReference
.8622	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8624	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8626	f0 06		beq $862e			beq 	_ETIndirection
.8628	e6 36		inc $36				inc 	zTemp0
.862a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.862c	d0 9b		bne $85c9			bne 	_ETSyntaxError
.862e					_ETIndirection:
.862e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8630	1a		inc a				inc 	a
.8631	48		pha				pha
.8632	20 97 85	jsr $8597			jsr 	EvaluateTerm				; evaluate the term
.8635	20 4f 84	jsr $844f			jsr 	Dereference 				; dereference it.
.8638	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.863b	d0 07		bne $8644			bne 	_ETTypeMismatch
.863d	68		pla				pla 								; indirection 1-2
.863e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8640	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8643	60		rts				rts
.8644					_ETTypeMismatch:
.8644	4c c5 8f	jmp $8fc5			jmp 	TypeError
.8647					_ETUnaryNegate:
.8647	20 97 85	jsr $8597			jsr 	EvaluateTerm				; evaluate the term
.864a	20 4f 84	jsr $844f			jsr 	Dereference 				; dereference it.
.864d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8650	29 10		and #$10			and 	#NSTString
.8652	d0 f0		bne $8644			bne 	_ETTypeMismatch
.8654	4c db 86	jmp $86db			jmp 	NSMNegate  					; just toggles the sign bit.
.8657					_ETDereference:
.8657	20 97 85	jsr $8597			jsr 	EvaluateTerm				; evaluate the term
.865a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.865d	29 20		and #$20			and 	#NSBIsReference
.865f	f0 e3		beq $8644			beq 	_ETTypeMismatch
.8661	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8664	60		rts				rts
.8665					_ETStringReference:
.8665	20 97 85	jsr $8597			jsr 	EvaluateTerm				; evaluate the term
.8668	20 4f 84	jsr $844f			jsr 	Dereference 				; dereference it.
.866b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.866e	d0 d4		bne $8644			bne 	_ETTypeMismatch
.8670	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8672	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8675	60		rts				rts
.8676					_ETParenthesis:
.8676	20 0d 84	jsr $840d			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8679	20 3c 8c	jsr $8c3c			jsr 	CheckRightBracket 			; check for )
.867c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.867d					EvaluateValue:
.867d	48		pha				pha
.867e	20 0b 84	jsr $840b			jsr		EvaluateExpressionAt0 		; expression
.8681	20 4f 84	jsr $844f			jsr 	Dereference					; derefernce it
.8684	68		pla				pla
.8685	60		rts				rts
.8686					EvaluateNumber:
.8686	20 7d 86	jsr $867d			jsr 	EvaluateValue 				; get a value
.8689	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.868c	29 10		and #$10			and 	#NSBIsString
.868e	d0 16		bne $86a6			bne 	HelperTypeError
.8690	60		rts				rts
.8691					EvaluateString:
.8691	20 7d 86	jsr $867d			jsr 	EvaluateValue 				; get a value
.8694	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8697	29 10		and #$10			and 	#NSBIsString
.8699	f0 0b		beq $86a6			beq 	HelperTypeError
.869b					CopyAddressToTemp0:
.869b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.869e	85 36		sta $36				sta 	zTemp0
.86a0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a3	85 37		sta $37				sta 	zTemp0+1
.86a5	60		rts				rts
.86a6					HelperTypeError:
.86a6	4c c5 8f	jmp $8fc5			jmp 	TypeError
.86a9					EvaluateInteger:
.86a9	20 86 86	jsr $8686			jsr 	EvaluateNumber
.86ac	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.86af	d0 0a		bne $86bb			bne 	HelperValueError 			; if not, it's a float.
.86b1	60		rts				rts
.86b2					EvaluateUnsignedInteger:
.86b2	20 a9 86	jsr $86a9			jsr 	EvaluateInteger 			; check integer is +ve
.86b5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86b8	30 01		bmi $86bb			bmi 	HelperValueError
.86ba	60		rts				rts
.86bb					HelperValueError:
.86bb	4c ca 8f	jmp $8fca			jmp 	ArgumentError
.86be					Evaluate16BitInteger:
.86be	20 b2 86	jsr $86b2			jsr	 	EvaluateUnsignedInteger		; get integer
.86c1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.86c4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.86c7	d0 f2		bne $86bb			bne 	HelperValueError
.86c9	60		rts				rts
.86ca					Evaluate8BitInteger:
.86ca	20 b2 86	jsr $86b2			jsr	 	EvaluateUnsignedInteger 	; get an integer
.86cd	d0 ec		bne $86bb			bne 	HelperValueError
.86cf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.86d2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.86d5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.86d8	d0 e1		bne $86bb			bne 	HelperValueError
.86da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.86db					NSMNegate:
.86db	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86de	49 80		eor #$80			eor 	#NSBIsNegative
.86e0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86e3	60		rts				rts
.86e4					NSMNegateMantissa:
.86e4	38		sec				sec
.86e5	a9 00		lda #$00			lda 	#0
.86e7	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.86ea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86ed	a9 00		lda #$00			lda 	#0
.86ef	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.86f2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.86f5	a9 00		lda #$00			lda 	#0
.86f7	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.86fa	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.86fd	a9 00		lda #$00			lda 	#0
.86ff	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8702	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8705	60		rts				rts
.8706					NSMShiftUpTwo:
.8706	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8709	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.870c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.870f	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8712	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8715	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8718	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.871b	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.871e	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8721	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8724	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8727	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.872a	60		rts				rts
.872b					NSMSetZeroMantissaOnly:
.872b	a9 00		lda #$00			lda 	#0
.872d	80 08		bra $8737			bra 	NSMSetMantissa
.872f					NSMSetZero:
.872f	a9 00		lda #$00			lda 	#0
.8731					NSMSetByte:
.8731	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8734	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8737					NSMSetMantissa:
.8737	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.873a	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.873d	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8740	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8743	60		rts				rts
.8744					NSMShiftLeft:
.8744	18		clc				clc
.8745					NSMRotateLeft:
.8745	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8748	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.874b	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.874e	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8751	60		rts				rts
.8752					NSMShiftRight:
.8752	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8755	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8758	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.875b	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.875e	60		rts				rts
.875f					NSMIsZero:
.875f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8762	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8765	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8768	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.876b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.8f84					DecimalScalarTable:
>8f84	66 66 66 66				.dword $66666666 ; 0.1
>8f88	de					.byte $de
>8f89	1f 85 eb 51				.dword $51eb851f ; 0.01
>8f8d	db					.byte $db
>8f8e	4c 37 89 41				.dword $4189374c ; 0.001
>8f92	d8					.byte $d8
>8f93	ac 8b db 68				.dword $68db8bac ; 0.0001
>8f97	d4					.byte $d4
>8f98	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>8f9c	d1					.byte $d1
>8f9d	83 de 1b 43				.dword $431bde83 ; 1e-06
>8fa1	ce					.byte $ce
>8fa2	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>8fa6	ca					.byte $ca
>8fa7	89 3b e6 55				.dword $55e63b89 ; 1e-08
>8fab	c7					.byte $c7
>8fac	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>8fb0	c4					.byte $c4
>8fb1	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>8fb5	c0					.byte $c0
>8fb6	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>8fba	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8fbb					SyntaxError:
.8fbb	a9 02		lda #$02		lda	#2
.8fbd	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8fc0					RangeError:
.8fc0	a9 04		lda #$04		lda	#4
.8fc2	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8fc5					TypeError:
.8fc5	a9 05		lda #$05		lda	#5
.8fc7	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8fca					ArgumentError:
.8fca	a9 07		lda #$07		lda	#7
.8fcc	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8fcf					NotDoneError:
.8fcf	a9 0c		lda #$0c		lda	#12
.8fd1	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8fd4					ErrorText:
>8fd4	42 72 65 61 6b 00			.text	"Break",0
>8fda	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8fe2	72 72 6f 72 00
>8fe7	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8fef	20 62 79 20 7a 65 72 6f 00
>8ff8	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9000	61 6e 67 65 00
>9005	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>900d	6d 61 74 63 68 00
>9013	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>901b	65 6d 6f 72 79 00
>9021	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9029	61 72 67 75 6d 65 6e 74 00
>9032	53 74 6f 70 00				.text	"Stop",0
>9037	53 74 72 69 6e 67 20 74			.text	"String too long",0
>903f	6f 6f 20 6c 6f 6e 67 00
>9047	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>904f	6e 20 66 61 69 6c 65 64 00
>9058	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9060	61 74 61 00
>9064	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>906c	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.876c					MemoryNew:
.876c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.876e	85 30		sta $30				sta 	codePtr
.8770	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8772	85 31		sta $31				sta 	codePtr+1
.8774	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8776	92 30		sta ($30)			sta 	(codePtr)
.8778	60		rts				rts
.8779					MemoryAppend:
.8779	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.877b	85 30		sta $30				sta 	codePtr
.877d	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.877f	85 31		sta $31				sta 	codePtr+1
.8781					_MAFindEnd:
.8781	b2 30		lda ($30)			lda 	(codePtr)
.8783	f0 0d		beq $8792			beq 	_MAFoundEnd
.8785	18		clc				clc
.8786	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8788	65 30		adc $30				adc 	codePtr
.878a	85 30		sta $30				sta 	codePtr
.878c	90 02		bcc $8790			bcc 	_CREExit
.878e	e6 31		inc $31				inc 	codePtr+1
.8790					_CREExit:
.8790	80 ef		bra $8781			bra 	_MAFindEnd
.8792					_MAFoundEnd:
.8792	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8795	c0 04		cpy #$04			cpy 	#4 							; blank line
.8797	f0 0e		beq $87a7			beq 	_MANoLine
.8799	a9 00		lda #$00			lda 	#0 							; end of program
.879b	91 30		sta ($30),y			sta 	(codePtr),y
.879d					_MACopy:
.879d	88		dey				dey
.879e	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.87a1	91 30		sta ($30),y			sta 	(codePtr),y
.87a3	c0 00		cpy #$00			cpy 	#0
.87a5	d0 f6		bne $879d			bne 	_MACopy
.87a7					_MANoLine:
.87a7	60		rts				rts
.87a8					MemoryInline:
.87a8	98		tya				tya 								; put address into stack,x
.87a9	18		clc				clc
.87aa	65 30		adc $30				adc 	codePtr
.87ac	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87af	a5 31		lda $31				lda 	codePtr+1
.87b1	69 00		adc #$00			adc 	#0
.87b3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87b6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.87b9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.87bd					VariableOpen:
.87bd	60		rts				rts
.87be					VariableClose:
.87be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.87bf					BackloadProgram:
.87bf	a2 ff		ldx #$ff			ldx 	#$FF
.87c1	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.87c4	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.87c7	30 1e		bmi $87e7			bmi 	_BPExit
.87c9					_BPCopy:
.87c9	e8		inx				inx  								; copy byte in
.87ca	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.87cd	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.87d0	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.87d3	30 0a		bmi $87df			bmi 	_BPEndLine 					; -ve = EOL
.87d5	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.87d7	d0 02		bne $87db			bne 	_BPNotTab
.87d9	a9 20		lda #$20			lda 	#' '
.87db					_BPNotTab:
.87db	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.87dd	b0 ea		bcs $87c9			bcs 	_BPCopy
.87df					_BPEndLine:
.87df	20 b7 89	jsr $89b7			jsr 	TokeniseLine 				; tokenise the line.
.87e2	20 79 87	jsr $8779			jsr 	MemoryAppend 				; append to current program
.87e5	80 d8		bra $87bf			bra 	BackloadProgram
.87e7					_BPExit:
.87e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.87e8					TokeniseSearchTable:
.87e8	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.87ea	85 36		sta $36				sta 	zTemp0
.87ec	a0 00		ldy #$00			ldy 	#0
.87ee	a9 80		lda #$80			lda 	#$80 						; token #
.87f0	85 38		sta $38				sta 	zTemp1
.87f2					_TSTLoop:
.87f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.87f4	30 49		bmi $883f			bmi 	_TSTFail 					; -ve = end of table
.87f6	f0 2e		beq $8826			beq 	_TSTNext 					; zero, check next it's a dummy
.87f8	c8		iny				iny 								; get the hash
.87f9	b1 36		lda ($36),y			lda 	(zTemp0),y
.87fb	88		dey				dey
.87fc	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.87ff	d0 25		bne $8826			bne 	_TSTNext
.8801	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8804	38		sec				sec
.8805	ed 00 07	sbc $0700			sbc 	identStart
.8808	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.880a	d0 1a		bne $8826			bne 	_TSTNext
.880c	5a		phy				phy 								; save Y , we might fail
.880d	c8		iny				iny 								; point to text
.880e	c8		iny				iny
.880f	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8812					_TSTCompareName:
.8812	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.8815	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8817	d0 0c		bne $8825			bne 	_TSTNextPullY 				; fail, pullY and do next
.8819	e8		inx				inx
.881a	c8		iny				iny
.881b	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.881e	d0 f2		bne $8812			bne 	_TSTCompareName
.8820	7a		ply				ply 								; throw Y
.8821	a5 38		lda $38				lda 	zTemp1 						; get token #
.8823	38		sec				sec 								; return with CS = passed.
.8824	60		rts				rts
.8825					_TSTNextPullY:
.8825	7a		ply				ply 								; restore current, fall through.
.8826					_TSTNext:
.8826	e6 38		inc $38				inc 	zTemp1 						; token counter
.8828	98		tya				tya
.8829	18		clc				clc
.882a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.882c	1a		inc a				inc 	a 							; +1
.882d	1a		inc a				inc 	a 							; +2
.882e	a8		tay				tay
.882f	10 c1		bpl $87f2			bpl 	_TSTLoop 					; if Y < $80 loop back
.8831	98		tya				tya 								; add Y to zTemp0 and reset Y
.8832	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8834	18		clc				clc  								; but have tables > 255 bytes
.8835	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8837	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8839	90 b7		bcc $87f2			bcc 	_TSTLoop
.883b	e6 37		inc $37				inc 	zTemp0+1
.883d	80 b3		bra $87f2			bra 	_TSTLoop
.883f					_TSTFail:
.883f	18		clc				clc
.8840	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.8841					KeywordSet0:
>8841	00 65					.text	0,$65,""               ; $80 !0:EOF
>8843	00 58					.text	0,$58,""               ; $81 !1:SH1
>8845	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8847	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>884d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8855	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>885b	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8862	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>8868	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>886f	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $89 GETDATE$(
>8877	45 24 28
>887a	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8a GETTIME$(
>8882	45 24 28
>8885	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8b HEX$(
>888c	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>8892	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>889a	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8e LEFT$(
>88a2	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8f LEN(
>88a8	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $90 MID$(
>88af	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $91 NOT
>88b4	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $92 PAGE
>88ba	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>88c2	28
>88c3	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>88c9	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>88cf	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>88d5	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>88dc	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $98 TRUE
>88e2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $99 VAL(
>88e8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9a FOR
>88ed	02 8f 49 46				.text	2,$8f,"IF"             ; $9b IF
>88f1	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9c PROC
>88f7	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9d REPEAT
>88ff	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9e WHILE
>8906	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9f ENDIF
>890d	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a0 ENDPROC
>8915	43
>8916	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a1 NEXT
>891c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a2 UNTIL
>8923	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a3 WEND
>8929	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a4 CALL
>892f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a5 CLS
>8934	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a6 DATA
>893a	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a7 DIM
>893f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>8946	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>894c	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>8951	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>8958	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>895e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>8963	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>896b	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $af THEN
>8971	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>8975	ff					.text	$FF
.8976					KeywordSet1:
>8976	00 65					.text	0,$65,""               ; $80 !0:EOF
>8978	00 58					.text	0,$58,""               ; $81 !1:SH1
>897a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>897c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8984	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>898b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8990	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8996	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>899b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>89a3	45
>89a4	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>89a9	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>89af	ff					.text	$FF
.89b0					KeywordSet2:
>89b0	00 65					.text	0,$65,""               ; $80 !0:EOF
>89b2	00 58					.text	0,$58,""               ; $81 !1:SH1
>89b4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>89b6	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.89b7					TokeniseLine:
.89b7	20 3f 8b	jsr $8b3f			jsr 	FixLineBufferCase 			; fix line case
.89ba	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.89bc	8d 06 07	sta $0706			sta 	tokenOffset
.89bf	9c 07 07	stz $0707			stz 	tokenLineNumber
.89c2	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.89c5	a2 ff		ldx #$ff			ldx 	#$FF
.89c7					_TKFindFirst:
.89c7	e8		inx				inx
.89c8	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.89cb	f0 79		beq $8a46			beq 	_TKExit
.89cd	c9 20		cmp #$20			cmp 	#' '
.89cf	90 f6		bcc $89c7			bcc 	_TKFindFirst
.89d1	c9 30		cmp #$30			cmp 	#'0'
.89d3	90 07		bcc $89dc			bcc 	_TKNoLineNumber
.89d5	c9 3a		cmp #$3a			cmp 	#'9'+1
.89d7	b0 03		bcs $89dc			bcs 	_TKNoLineNumber
.89d9	20 69 8b	jsr $8b69			jsr 	TokeniseExtractLineNumber
.89dc					_TKNoLineNumber:
.89dc					_TKTokeniseLoop:
.89dc	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.89df	f0 65		beq $8a46			beq 	_TKExit
.89e1	e8		inx				inx
.89e2	c9 20		cmp #$20			cmp 	#' '
.89e4	f0 f6		beq $89dc			beq 	_TKTokeniseLoop 			; keep looping if space found.
.89e6	ca		dex				dex 								; undo last get, A contains character, X is position.
.89e7	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.89e9	f0 61		beq $8a4c			beq 	_TKTokeniseIdentifier
.89eb	c9 41		cmp #$41			cmp 	#'A'
.89ed	90 04		bcc $89f3			bcc 	_TKTokenisePunctuation
.89ef	c9 5b		cmp #$5b			cmp 	#'Z'+1
.89f1	90 59		bcc $8a4c			bcc 	_TKTokeniseIdentifier
.89f3					_TKTokenisePunctuation:
.89f3	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.89f5	f0 27		beq $8a1e			beq 	_TKString
.89f7	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.89f9	f0 28		beq $8a23			beq 	_TKHexConstant
.89fb	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.89fd	f0 29		beq $8a28			beq 	_TKCheckDouble
.89ff	c9 3e		cmp #$3e			cmp 	#'>'
.8a01	f0 25		beq $8a28			beq 	_TKCheckDouble
.8a03					_TKStandardPunctuation:
.8a03	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.8a06	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8a08	90 0e		bcc $8a18			bcc 	_TKNoShift
.8a0a	48		pha				pha 								; save
.8a0b	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8a0d	85 36		sta $36				sta 	zTemp0
.8a0f	68		pla				pla
.8a10	29 20		and #$20			and 	#32 						; bit 5
.8a12	4a		lsr a				lsr 	a 							; shift into bit 3
.8a13	4a		lsr a				lsr 	a
.8a14	05 36		ora $36				ora 	zTemp0
.8a16	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8a18					_TKNoShift:
.8a18	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte 			; write the punctuation character
.8a1b	e8		inx				inx 								; consume the character
.8a1c	80 be		bra $89dc			bra 	_TKTokeniseLoop 			; and loop round again.
.8a1e					_TKString:
.8a1e	20 ce 8a	jsr $8ace			jsr 	TokeniseString
.8a21	80 b9		bra $89dc			bra 	_TKTokeniseLoop
.8a23					_TKHexConstant:
.8a23	20 09 8b	jsr $8b09			jsr 	TokeniseHexConstant
.8a26	80 b4		bra $89dc			bra 	_TKTokeniseLoop
.8a28					_TKCheckDouble:
.8a28	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.8a2b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8a2d	90 d4		bcc $8a03			bcc 	_TKStandardPunctuation
.8a2f	c9 3f		cmp #$3f			cmp 	#'>'+1
.8a31	b0 d0		bcs $8a03			bcs 	_TKStandardPunctuation
.8a33	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8a36	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8a38	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8a39	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8a3c	38		sec				sec
.8a3d	e9 3c		sbc #$3c			sbc 	#'<'
.8a3f	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8a42	e8		inx				inx 								; consume both
.8a43	e8		inx				inx
.8a44	80 96		bra $89dc			bra 	_TKTokeniseLoop
.8a46	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8a48	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8a4b	60		rts				rts
.8a4c					_TKTokeniseIdentifier:
.8a4c	8e 00 07	stx $0700			stx 	identStart 					; save start
.8a4f	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8a52					_TKCheckLoop:
.8a52	e8		inx				inx 								; look at next, we know first is identifier.
.8a53	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.8a56	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8a58	f0 f8		beq $8a52			beq 	_TKCheckLoop
.8a5a	c9 30		cmp #$30			cmp	 	#"0"
.8a5c	90 0c		bcc $8a6a			bcc 	_TKEndIdentifier
.8a5e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a60	90 f0		bcc $8a52			bcc 	_TKCheckLoop
.8a62	c9 41		cmp #$41			cmp	 	#"A"
.8a64	90 04		bcc $8a6a			bcc 	_TKEndIdentifier
.8a66	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8a68	90 e8		bcc $8a52			bcc 	_TKCheckLoop
.8a6a					_TKEndIdentifier:
.8a6a	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8a6d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8a6f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8a71	f0 06		beq $8a79			beq 	_TKHasTypeCharacter
.8a73	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8a75	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8a77	d0 07		bne $8a80			bne 	_TKNoTypeCharacter
.8a79					_TKHasTypeCharacter:
.8a79	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8a7c	e8		inx				inx 								; read next
.8a7d	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a80					_TKNoTypeCharacter:
.8a80	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8a82	d0 09		bne $8a8d			bne 	_TKNoArray
.8a84	e8		inx				inx 								; skip the (
.8a85	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8a88	09 04		ora #$04			ora 	#$04
.8a8a	8d 04 07	sta $0704			sta 	identTypeByte
.8a8d					_TKNoArray:
.8a8d	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8a90	20 2a 8b	jsr $8b2a			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8a93	a0 88		ldy #$88			ldy 	#(KeywordSet0) >> 8
.8a95	a9 41		lda #$41			lda 	#(KeywordSet0) & $FF
.8a97	20 e8 87	jsr $87e8			jsr 	TokeniseSearchTable
.8a9a	a2 00		ldx #$00			ldx 	#0
.8a9c	b0 1f		bcs $8abd			bcs 	_TKFoundToken
.8a9e	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8aa0	a9 76		lda #$76			lda 	#(KeywordSet1) & $FF
.8aa2	20 e8 87	jsr $87e8			jsr 	TokeniseSearchTable
.8aa5	a2 81		ldx #$81			ldx 	#$81
.8aa7	b0 14		bcs $8abd			bcs 	_TKFoundToken
.8aa9	a0 89		ldy #$89			ldy 	#(KeywordSet1) >> 8
.8aab	a9 76		lda #$76			lda 	#(KeywordSet1) & $FF
.8aad	20 e8 87	jsr $87e8			jsr 	TokeniseSearchTable
.8ab0	a2 82		ldx #$82			ldx 	#$82
.8ab2	b0 09		bcs $8abd			bcs 	_TKFoundToken
.8ab4	20 ba 8b	jsr $8bba			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8ab7	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8aba	4c dc 89	jmp $89dc			jmp 	_TKTokeniseLoop 			; and go round again.
.8abd					_TKFoundToken:
.8abd	48		pha				pha 								; save token
.8abe	8a		txa				txa 								; shift in X, is there one ?
.8abf	f0 03		beq $8ac4			beq 	_TKNoTShift
.8ac1	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte 			; if so, write it out
.8ac4					_TKNoTShift:
.8ac4	68		pla				pla 								; restore and write token
.8ac5	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8ac8	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8acb	4c dc 89	jmp $89dc			jmp 	_TKTokeniseLoop 			; and go round again.
.8ace					TokeniseString:
.8ace	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8ad0	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8ad3	e8		inx				inx									; start of quoted string.
.8ad4	da		phx				phx 								; push start of string on top
.8ad5	ca		dex				dex
.8ad6					_TSFindEnd:
.8ad6	e8		inx				inx
.8ad7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8ada	f0 04		beq $8ae0			beq 	_TSEndOfString
.8adc	c9 22		cmp #$22			cmp 	#'"'
.8ade	d0 f6		bne $8ad6			bne 	_TSFindEnd
.8ae0					_TSEndOfString:
.8ae0	7a		ply				ply  								; so now Y is first character, X is character after end.
.8ae1	48		pha				pha 								; save terminating character
.8ae2	20 ea 8a	jsr $8aea			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8ae5	68		pla				pla 								; terminating character
.8ae6	f0 01		beq $8ae9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8ae8	e8		inx				inx
.8ae9					_TSNotQuote:
.8ae9	60		rts				rts
.8aea					TOWriteBlockXY:
.8aea	86 36		stx $36				stx 	zTemp0 						; write end character
.8aec	98		tya				tya
.8aed	49 ff		eor #$ff			eor 	#$FF
.8aef	38		sec				sec
.8af0	65 36		adc $36				adc 	zTemp0
.8af2	1a		inc a				inc 	a 							; one extra for NULL
.8af3	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8af6					_TOBlockLoop:
.8af6	c4 36		cpy $36				cpy 	zTemp0
.8af8	f0 09		beq $8b03			beq 	_TOBlockExit
.8afa	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8afd	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8b00	c8		iny				iny
.8b01	80 f3		bra $8af6			bra 	_TOBlockLoop
.8b03					_TOBlockExit:
.8b03	a9 00		lda #$00			lda 	#0
.8b05	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8b08	60		rts				rts
.8b09					TokeniseHexConstant:
.8b09	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8b0b	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8b0e	e8		inx				inx									; start of quoted string.
.8b0f	da		phx				phx 								; push start of constant on top
.8b10	ca		dex				dex
.8b11					_THFindLoop:
.8b11	e8		inx				inx
.8b12	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8b15	c9 30		cmp #$30			cmp 	#"0"
.8b17	90 0c		bcc $8b25			bcc 	_THFoundEnd
.8b19	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b1b	90 f4		bcc $8b11			bcc 	_THFindLoop
.8b1d	c9 41		cmp #$41			cmp 	#"A"
.8b1f	90 04		bcc $8b25			bcc 	_THFoundEnd
.8b21	c9 47		cmp #$47			cmp 	#"F"+1
.8b23	90 ec		bcc $8b11			bcc 	_THFindLoop
.8b25					_THFoundEnd:
.8b25	7a		ply				ply 								; restore start
.8b26	20 ea 8a	jsr $8aea			jsr 	TOWriteBlockXY 				; output the block
.8b29	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8b2a					TokeniseCalculateHash:
.8b2a	da		phx				phx
.8b2b	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8b2e	a9 00		lda #$00			lda 	#0
.8b30					_TCHLoop:
.8b30	18		clc				clc
.8b31	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8b34	e8		inx				inx
.8b35	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8b38	d0 f6		bne $8b30			bne 	_TCHLoop
.8b3a	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8b3d	fa		plx				plx
.8b3e	60		rts				rts
.8b3f					FixLineBufferCase:
.8b3f	a2 00		ldx #$00			ldx 	#0
.8b41					_FLBCLoop:
.8b41	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8b44	f0 22		beq $8b68			beq 	_FLBCExit 					; end of string.
.8b46	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8b48	f0 11		beq $8b5b			beq 	_FLBCInQuotes
.8b4a	e8		inx				inx
.8b4b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8b4d	90 f2		bcc $8b41			bcc 	_FLBCLoop
.8b4f	c9 7b		cmp #$7b			cmp 	#'z'+1
.8b51	b0 ee		bcs $8b41			bcs 	_FLBCLoop
.8b53	38		sec				sec 								; make U/C
.8b54	e9 20		sbc #$20			sbc 	#32
.8b56	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8b59	80 e6		bra $8b41			bra 	_FLBCLoop
.8b5b					_FLBCInQuotes:
.8b5b	e8		inx				inx 								; advance
.8b5c	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8b5f	f0 07		beq $8b68			beq 	_FLBCExit 					; exit on EOS
.8b61	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8b63	d0 f6		bne $8b5b			bne 	_FLBCInQuotes
.8b65	e8		inx				inx 								; skip over it
.8b66	80 d9		bra $8b41			bra 	_FLBCLoop
.8b68					_FLBCExit:
.8b68	60		rts				rts
.8b69					TokeniseExtractLineNumber:
.8b69	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8b6c	48		pha				pha
.8b6d	ad 07 07	lda $0707			lda 	tokenLineNumber
.8b70	48		pha				pha
.8b71	20 a7 8b	jsr $8ba7			jsr 	_TELNTimes2 				; line # x 4
.8b74	20 a7 8b	jsr $8ba7			jsr 	_TELNTimes2 				; line # x 2
.8b77	18		clc				clc 								; add stacked value
.8b78	68		pla				pla
.8b79	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b7c	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b7f	68		pla				pla
.8b80	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8b83	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8b86	20 a7 8b	jsr $8ba7			jsr 	_TELNTimes2 				; line # x 10
.8b89	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8b8c	e8		inx				inx
.8b8d	29 0f		and #$0f			and 	#15 						; add to line #
.8b8f	18		clc				clc
.8b90	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b93	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b96	90 03		bcc $8b9b			bcc 	_TLENNoCarry
.8b98	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8b9b					_TLENNoCarry:
.8b9b	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8b9e	c9 30		cmp #$30			cmp 	#'0'
.8ba0	90 04		bcc $8ba6			bcc 	_TLENExit
.8ba2	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ba4	90 c3		bcc $8b69			bcc 	TokeniseExtractLineNumber
.8ba6					_TLENExit:
.8ba6	60		rts				rts
.8ba7					_TELNTimes2:
.8ba7	0e 07 07	asl $0707			asl 	tokenLineNumber
.8baa	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8bad	60		rts				rts
.8bae					TokeniseWriteByte:
.8bae	da		phx				phx
.8baf	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8bb2	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8bb5	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8bb8	fa		plx				plx
.8bb9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8bba					CheckCreateVariableRecord:
.8bba	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bbc	85 36		sta $36				sta 	0+zTemp0
.8bbe	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bc0	85 37		sta $37				sta 	1+zTemp0
.8bc2	20 bd 87	jsr $87bd			jsr 	VariableOpen 				; make variable space available
.8bc5					_CCVSearch:
.8bc5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8bc7	f0 2c		beq $8bf5			beq 	_CCVFail
.8bc9	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8bcb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8bcd	cd 03 07	cmp $0703			cmp 	identHash
.8bd0	d0 16		bne $8be8			bne 	_CCVNext
.8bd2	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8bd4	ae 00 07	ldx $0700			ldx 	identStart
.8bd7					_CCVCompare:
.8bd7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8bda	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8bdc	e8		inx				inx 								; advance pointers
.8bdd	c8		iny				iny
.8bde	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8bdf	d0 07		bne $8be8			bne 	_CCVNext  					; didn't match go to next.
.8be1	90 f4		bcc $8bd7			bcc 	_CCVCompare 				; not finished yet.
.8be3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8be6	f0 41		beq $8c29			beq 	_CCVFound 					; yes, we were successful
.8be8					_CCVNext:
.8be8	18		clc				clc
.8be9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8beb	65 36		adc $36				adc 	zTemp0
.8bed	85 36		sta $36				sta 	zTemp0
.8bef	90 d4		bcc $8bc5			bcc 	_CCVSearch
.8bf1	e6 37		inc $37				inc 	zTemp0+1
.8bf3	80 d0		bra $8bc5			bra 	_CCVSearch
.8bf5					_CCVFail:
.8bf5	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8bf7	ad 03 07	lda $0703			lda 	identHash
.8bfa	91 36		sta ($36),y			sta 	(zTemp0),y
.8bfc	c8		iny				iny 								; offset 2 is the type byte
.8bfd	ad 04 07	lda $0704			lda 	identTypeByte
.8c00	91 36		sta ($36),y			sta 	(zTemp0),y
.8c02	c8		iny				iny
.8c03					_CCVData:
.8c03	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8c05	91 36		sta ($36),y			sta 	(zTemp0),y
.8c07	c8		iny				iny
.8c08	c0 08		cpy #$08			cpy 	#8
.8c0a	90 f7		bcc $8c03			bcc 	_CCVData
.8c0c	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8c0f					_CCVCopyName:
.8c0f	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8c12	91 36		sta ($36),y			sta 	(zTemp0),y
.8c14	e8		inx				inx
.8c15	c8		iny				iny
.8c16	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8c19	d0 f4		bne $8c0f			bne 	_CCVCopyName
.8c1b	98		tya				tya 								; patch offset
.8c1c	92 36		sta ($36)			sta 	(zTemp0)
.8c1e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8c20	91 36		sta ($36),y			sta 	(zTemp0),y
.8c22	88		dey				dey
.8c23	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8c25	09 80		ora #$80			ora 	#$80
.8c27	91 36		sta ($36),y			sta 	(zTemp0),y
.8c29					_CCVFound:
.8c29	20 be 87	jsr $87be			jsr 	VariableClose 				; map out variables, perhaps.
.8c2c	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8c2e	38		sec				sec
.8c2f	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8c31	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8c33	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8c36	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8c38	20 ae 8b	jsr $8bae			jsr 	TokeniseWriteByte
.8c3b	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
