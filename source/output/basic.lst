
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Mon Dec 26 07:05:41 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_DATA                             = $b8; $b8 DATA
=$b9						KWD_DIM                              = $b9; $b9 DIM
=$ba						KWD_DOWNTO                           = $ba; $ba DOWNTO
=$bb						KWD_ELSE                             = $bb; $bb ELSE
=$bc						KWD_FROM                             = $bc; $bc FROM
=$bd						KWD_GFX                              = $bd; $bd GFX
=$be						KWD_GOSUB                            = $be; $be GOSUB
=$bf						KWD_GOTO                             = $bf; $bf GOTO
=$c0						KWD_HERE                             = $c0; $c0 HERE
=$c1						KWD_IMAGE                            = $c1; $c1 IMAGE
=$c2						KWD_INPUT                            = $c2; $c2 INPUT
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_PRINT                            = $cf; $cf PRINT
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_RETURN                           = $d3; $d3 RETURN
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 71 80	jmp $8071	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 0b bc	jsr $bc0b		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 0e bc	jsr $bc0e		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ca bb	jsr $bbca		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						GXGraphicDraw:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDCommand:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 3d bb	jsr $bb3d		jsr	Export_SNDCommand
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						SNDUpdate:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 70 bb	jsr $bb70		jsr	Export_SNDUpdate
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKListConvertLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 ef b4	jsr $b4ef		jsr	Export_TKListConvertLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						TKTokeniseLine:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 83 b7	jsr $b783		jsr	Export_TKTokeniseLine
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8071		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8073		9a		txs				txs
.8074		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.8076		09 80		ora #$80			ora 	#$80
.8078		85 00		sta $00				sta 	0
.807a		20 2d a6	jsr $a62d			jsr		UpdateFont 					; update font if between FPGA updates.
.807d		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.8080		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8082		aa		tax				tax
.8083		a8		tay				tay
.8084		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.8087		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8089		20 49 80	jsr $8049			jsr 	SNDCommand
.808c		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.808e		a9 9c		lda #$9c			lda 	#Prompt & $FF
.8090		20 8e 8f	jsr $8f8e			jsr 	PrintStringXA
.8093		20 1a 8a	jsr $8a1a			jsr 	NewProgram 					; erase current program
.8096		4c e7 83	jmp $83e7			jmp 	WarmStart					; make same size.
.8099		4c e7 83	jmp $83e7			jmp 	WarmStart
.809c						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>809c		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 26-Dec-22. "
>80a4		20 62 75 69 6c 74 20 32 36 2d 44 65 63 2d 32 32
>80b4		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80b6		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80b9						AssembleGroup1:
.80b9		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80bb		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80be		80 02		bra $80c2			bra 	AsmGroup12
.80c0						AssembleGroup2:
.80c0		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80c2						AsmGroup12:
.80c2		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80c5		68		pla				pla 								; pop the return address to access the information following.
.80c6		fa		plx				plx
.80c7		20 4e 81	jsr $814e			jsr 	AccessParameters 			; get opcode and save as base
.80ca		8d 24 04	sta $0424			sta 	BaseOpcode
.80cd		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80d0		d0 08		bne $80da			bne 	_AG12HaveMask
.80d2		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80d4		20 56 81	jsr $8156			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80d7		8d 25 04	sta $0425			sta 	ModeMask
.80da						_AG12HaveMask:
.80da		20 8a 82	jsr $828a			jsr 	TypeAndCalculateOperand 	; get zero page type
.80dd		da		phx				phx 								; save found address mode
.80de		20 ba 81	jsr $81ba			jsr 	AssembleModeX
.80e1		fa		plx				plx  								; restore address mode
.80e2		b0 0b		bcs $80ef			bcs 	_AG12Exit
.80e4		20 f0 80	jsr $80f0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80e7		20 ba 81	jsr $81ba			jsr 	AssembleModeX
.80ea		b0 03		bcs $80ef			bcs 	_AG12Exit
.80ec		4c fe 9f	jmp $9ffe			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80ef						_AG12Exit:
.80ef		60		rts				rts
.80f0						PromoteToAbsolute:
.80f0		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80f2		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80f4		f0 19		beq $810f			beq 	_PTADo
.80f6		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80f8		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80fa		f0 13		beq $810f			beq 	_PTADo
.80fc		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80fe		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8100		f0 0d		beq $810f			beq 	_PTADo
.8102		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8104		e0 d1		cpx #$d1			cpx 	#AM_IND
.8106		f0 07		beq $810f			beq 	_PTADo
.8108		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.810a		e0 c0		cpx #$c0			cpx 	#AM_INDX
.810c		f0 01		beq $810f			beq 	_PTADo
.810e		60		rts				rts
.810f						_PTADo:
.810f		aa		tax				tax
.8110		60		rts				rts
.8111						AssembleGroup3:
.8111		68		pla				pla 								; get parameters, which is just the opcode.
.8112		fa		plx				plx
.8113		20 4e 81	jsr $814e			jsr 	AccessParameters 			; get and output opcode
.8116		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8119		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get a 16 bit operand
.811c		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.811e		38		sec				sec
.811f		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8122		48		pha				pha 								; LSB in A
.8123		a5 60		lda $60				lda 	NSMantissa1
.8125		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8128		aa		tax				tax 								; MSB in X
.8129		68		pla				pla
.812a		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.812b		69 7f		adc #$7f			adc 	#$7F
.812d		90 01		bcc $8130			bcc 	_AG3NoCarry
.812f		e8		inx				inx
.8130						_AG3NoCarry:
.8130		38		sec				sec 								; fix back and write out anyways.
.8131		e9 80		sbc #$80			sbc 	#$80
.8133		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8136		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8138		f0 0a		beq $8144			beq 	_AG3Exit
.813a		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.813d		29 01		and #$01			and 	#1
.813f		f0 03		beq $8144			beq 	_AG3Exit
.8141		4c 03 a0	jmp $a003			jmp 	RangeError 					; no, branch is out of range
.8144						_AG3Exit:
.8144		60		rts				rts
.8145						AssembleGroup4:
.8145		68		pla				pla 								; pop address
.8146		fa		plx				plx
.8147		20 4e 81	jsr $814e			jsr 	AccessParameters 			; access and get first
.814a		20 66 81	jsr $8166			jsr 	AssemblerWriteByte 			; output it.
.814d		60		rts				rts
.814e						AccessParameters:
.814e		8d 21 04	sta $0421			sta 	ParamStart
.8151		8e 22 04	stx $0422			stx 	ParamStart+1
.8154		a9 01		lda #$01			lda 	#1
.8156						GetParameter:
.8156		5a		phy				phy
.8157		a8		tay				tay
.8158		ad 21 04	lda $0421			lda 	ParamStart
.815b		85 36		sta $36				sta 	zTemp0
.815d		ad 22 04	lda $0422			lda 	ParamStart+1
.8160		85 37		sta $37				sta 	zTemp0+1
.8162		b1 36		lda ($36),y			lda 	(zTemp0),y
.8164		7a		ply				ply
.8165		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8166						AssemblerWriteByte:
.8166		48		pha			pha
.8167		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.816a		29 02		and #$02		and 	#2
.816c		f0 1b		beq $8189		beq 	_AWBNoPrint
.816e		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.8171		20 a4 81	jsr $81a4		jsr 	PrintHex
.8174		ad 1e 04	lda $041e		lda		AssemblerAddress
.8177		20 a4 81	jsr $81a4		jsr 	PrintHex
.817a		a9 20		lda #$20		lda 	#' '
.817c		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.817f		68		pla			pla 									; print byte
.8180		48		pha			pha
.8181		20 a4 81	jsr $81a4		jsr 	PrintHex
.8184		a9 0d		lda #$0d		lda 	#13
.8186		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8189						_AWBNoPrint:
.8189		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.818c		85 36		sta $36			sta 	zTemp0
.818e		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.8191		f0 0e		beq $81a1		beq 	_AWBRange
.8193		85 37		sta $37			sta 	zTemp0+1
.8195		68		pla			pla 									; write byte out
.8196		92 36		sta ($36)		sta 	(zTemp0)
.8198		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.819b		d0 03		bne $81a0		bne 	_AWBNoCarry
.819d		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81a0						_AWBNoCarry:
.81a0		60		rts			rts
.81a1						_AWBRange:
.81a1		4c 03 a0	jmp $a003		jmp 	RangeError
.81a4						PrintHex:
.81a4		48		pha				pha
.81a5		4a		lsr a				lsr 	a
.81a6		4a		lsr a				lsr 	a
.81a7		4a		lsr a				lsr 	a
.81a8		4a		lsr a				lsr 	a
.81a9		20 ad 81	jsr $81ad			jsr 	_PrintNibble
.81ac		68		pla				pla
.81ad						_PrintNibble:
.81ad		29 0f		and #$0f			and 	#15
.81af		c9 0a		cmp #$0a			cmp 	#10
.81b1		90 02		bcc $81b5			bcc 	_NoShift
.81b3		69 06		adc #$06			adc 	#6
.81b5						_NoShift:
.81b5		69 30		adc #$30			adc 	#48
.81b7		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81ba						AssembleModeX:
.81ba		5a		phy				phy
.81bb		ad 23 04	lda $0423			lda 	IsGroup1
.81be		f0 17		beq $81d7			beq 	_AMXGroup2
.81c0		8a		txa				txa 							; is it in group # 1
.81c1		29 40		and #$40			and 	#AM_ISG1
.81c3		f0 4d		beq $8212			beq 	_AMXFail 				; no, give up.
.81c5		8a		txa				txa 							; get back.
.81c6		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81c8		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81ca		d0 22		bne $81ee			bne 	_AMXHaveInfo
.81cc		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81cf		c9 81		cmp #$81			cmp 	#$81
.81d1		f0 3f		beq $8212			beq 	_AMXFail
.81d3		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81d5		80 17		bra $81ee			bra 	_AMXHaveInfo 			; odd design decision there.
.81d7						_AMXGroup2:
.81d7		8a		txa				txa 							; is it in group 2 ?
.81d8		29 20		and #$20			and 	#AM_ISG2
.81da		f0 36		beq $8212			beq 	_AMXFail 				; no, give up.
.81dc		8a		txa				txa 							; get the offset into Y
.81dd		29 1f		and #$1f			and 	#$1F
.81df		4a		lsr a				lsr 	a 						; make it 0-7.
.81e0		4a		lsr a				lsr  	a
.81e1		a8		tay				tay
.81e2		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81e5						_AMXCheckOkay:
.81e5		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81e6		88		dey				dey
.81e7		10 fc		bpl $81e5			bpl 	_AMXCheckOkay
.81e9		90 27		bcc $8212			bcc 	_AMXFail 				; not allowed.
.81eb		8a		txa				txa  							; get mask back
.81ec		29 1f		and #$1f			and 	#$1F
.81ee						_AMXHaveInfo:
.81ee		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81f0		10 04		bpl $81f6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81f2		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81f4		d0 1c		bne $8212			bne 	_AMXFail
.81f6						_AMXAnySize:
.81f6		18		clc				clc 							; add offset to the base opcode
.81f7		6d 24 04	adc $0424			adc 	BaseOpcode
.81fa						_AMXOutputCode:
.81fa		20 66 81	jsr $8166			jsr 	AssemblerWriteByte 		; write the opcode out.
.81fd		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.81ff		f0 0e		beq $820f			beq 	_AMXExit
.8201		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8203		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.8206		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8208		30 05		bmi $820f			bmi 	_AMXExit
.820a		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.820c		20 66 81	jsr $8166			jsr 	AssemblerWriteByte
.820f						_AMXExit:
.820f		7a		ply				ply
.8210		38		sec				sec
.8211		60		rts				rts
.8212						_AMXFail:
.8212		a0 00		ldy #$00			ldy 	#0
.8214						_AMXCheckOddities:
.8214		8a		txa				txa
.8215		d9 3c 82	cmp $823c,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8218		d0 15		bne $822f			bne 	_AMXCONext
.821a		b9 3a 82	lda $823a,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.821d		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8220		d0 0d		bne $822f			bne 	_AMXCONext
.8222		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8224		10 04		bpl $822a			bpl 	_AMXCONotZero
.8226		a5 60		lda $60				lda 	NSMantissa1
.8228		d0 05		bne $822f			bne 	_AMXCONext
.822a						_AMXCONotZero:
.822a		b9 3b 82	lda $823b,y			lda 	ExtraOpcode+1,y 		; get new opcode
.822d		80 cb		bra $81fa			bra 	_AMXOutputCode 			; and assemble it
.822f						_AMXCONext:
.822f		c8		iny				iny
.8230		c8		iny				iny
.8231		c8		iny				iny
.8232		b9 3a 82	lda $823a,y			lda 	ExtraOpcode+0,y 		; end of table
.8235		d0 dd		bne $8214			bne 	_AMXCheckOddities
.8237						_AMXCOFail:
.8237		7a		ply				ply
.8238		18		clc				clc
.8239		60		rts				rts
.823a						ExtraOpcode:
>823a		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>823d		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8240		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8243		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8246		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8249		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>824c		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>824f		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8252		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8255		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8258		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8259						LabelHere:
.8259		c8		iny				iny 								; skip .
.825a		a2 00		ldx #$00			ldx 	#0 							; get a term
.825c		20 83 98	jsr $9883			jsr 	EvaluateTerm
.825f		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8261		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8263		d0 22		bne $8287			bne 	_ALType 					; otherwise typing error
.8265		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8267		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8269		b5 60		lda $60,x			lda 	NSMantissa1,x
.826b		85 37		sta $37				sta 	zTemp0+1
.826d		5a		phy				phy 								; copy address in (64k)
.826e		a0 01		ldy #$01			ldy 	#1
.8270		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8273		92 36		sta ($36)			sta 	(zTemp0)
.8275		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.8278		91 36		sta ($36),y			sta 	(zTemp0),y
.827a		c8		iny				iny
.827b		a9 00		lda #$00			lda 	#0 							; zero the rest.
.827d		91 36		sta ($36),y			sta 	(zTemp0),y
.827f		c8		iny				iny
.8280		91 36		sta ($36),y			sta 	(zTemp0),y
.8282		c8		iny				iny
.8283		91 36		sta ($36),y			sta 	(zTemp0),y
.8285		7a		ply				ply
.8286		60		rts				rts
.8287						_ALType:
.8287		4c 08 a0	jmp $a008			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.828a						TypeAndCalculateOperand:
.828a		b1 30		lda ($30),y			lda 	(codePtr),y
.828c		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.828e		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8290		f0 5b		beq $82ed			beq 	_TACOExit
.8292		c9 80		cmp #$80			cmp 	#KWC_EOL
.8294		f0 57		beq $82ed			beq 	_TACOExit
.8296		c8		iny				iny
.8297		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8299		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.829b		f0 51		beq $82ee			beq 	CalculateOperand
.829d		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.829f		f0 1f		beq $82c0			beq 	_TACOIndirect
.82a1		88		dey				dey 								; undo get of first character
.82a2		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get operand
.82a5		b1 30		lda ($30),y			lda 	(codePtr),y
.82a7		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82a9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ab		d0 40		bne $82ed			bne 	_TACOExit
.82ad		c8		iny				iny
.82ae		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82b1		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82b3		c9 58		cmp #$58			cmp 	#'X'
.82b5		f0 36		beq $82ed			beq 	_TACOExit
.82b7		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82b9		c9 59		cmp #$59			cmp 	#'Y'
.82bb		f0 30		beq $82ed			beq 	_TACOExit
.82bd						_TACOSyntax:
.82bd		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.82c0						_TACOIndirect:
.82c0		20 ee 82	jsr $82ee			jsr 	CalculateOperand 			; get the operand
.82c3		b1 30		lda ($30),y			lda 	(codePtr),y
.82c5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82c7		f0 17		beq $82e0			beq 	_TACOIndX
.82c9		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82cc		b1 30		lda ($30),y			lda 	(codePtr),y
.82ce		a2 d1		ldx #$d1			ldx 	#AM_IND
.82d0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82d2		d0 19		bne $82ed			bne 	_TACOExit
.82d4		c8		iny				iny
.82d5		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82d8		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82da		d0 e1		bne $82bd			bne 	_TACOSyntax
.82dc		a2 d0		ldx #$d0			ldx 	#AM_INDY
.82de		80 0d		bra $82ed			bra 	_TACOExit
.82e0						_TACOIndX:
.82e0		c8		iny				iny
.82e1		20 f8 82	jsr $82f8			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82e4		c9 58		cmp #$58			cmp 	#'X' 						; check X
.82e6		d0 d5		bne $82bd			bne 	_TACOSyntax
.82e8		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket			; check )
.82eb		a2 c0		ldx #$c0			ldx 	#AM_INDX
.82ed						_TACOExit:
.82ed		60		rts				rts
.82ee						CalculateOperand:
.82ee		48		pha				pha
.82ef		da		phx				phx
.82f0		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82f2		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.82f5		fa		plx				plx
.82f6		68		pla				pla
.82f7		60		rts				rts
.82f8						TACOCheckXY:
.82f8		b1 30		lda ($30),y			lda 	(codePtr),y
.82fa		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82fc		c9 40		cmp #$40			cmp 	#$40
.82fe		d0 21		bne $8321			bne 	_TCXYFail
.8300		b1 30		lda ($30),y			lda 	(codePtr),y
.8302		18		clc				clc
.8303		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8305		85 37		sta $37				sta 	zTemp0+1
.8307		c8		iny				iny
.8308		b1 30		lda ($30),y			lda 	(codePtr),y
.830a		c8		iny				iny
.830b		85 36		sta $36				sta 	zTemp0
.830d		5a		phy				phy 								; save position
.830e		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8310		b1 36		lda ($36),y			lda 	(zTemp0),y
.8312		d0 0c		bne $8320			bne 	_TCXYPopFail
.8314		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8316		b1 36		lda ($36),y			lda 	(zTemp0),y
.8318		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.831a		f0 08		beq $8324			beq 	_TCXYFound
.831c		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.831e		f0 04		beq $8324			beq 	_TCXYFound
.8320						_TCXYPopFail:
.8320		7a		ply				ply
.8321						_TCXYFail:
.8321		a9 00		lda #$00			lda 	#0
.8323		60		rts				rts
.8324						_TCXYFound:
.8324		7a		ply				ply 								; restore position
.8325		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8327		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8328						BackloadProgram:
.8328		20 1a 8a	jsr $8a1a			jsr 	NewProgram 					; does the actual NEW.
.832b		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.832d		a9 7f		lda #$7f			lda 	#_BLLoad & $FF
.832f		20 8e 8f	jsr $8f8e			jsr 	PrintStringXA
.8332		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8334		8d 59 06	sta $0659			sta 	BackLoadPage
.8337		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8339		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.833c		a9 60		lda #$60			lda 	#(($6000) >> 8)
.833e		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8341		a9 ff		lda #$ff			lda 	#$FF
.8343		8d fa ff	sta $fffa			sta 	$FFFA
.8346						_BPLoop:
.8346		a2 ff		ldx #$ff			ldx 	#$FF
.8348		20 94 83	jsr $8394			jsr 	BLReadByte 					; read a byte
.834b		c9 00		cmp #$00			cmp 	#0
.834d		f0 29		beq $8378			beq 	_BPExit 					; if 0 exit
.834f		30 27		bmi $8378			bmi 	_BPExit 					; if -ve exit
.8351						_BPCopy:
.8351		e8		inx				inx  								; copy byte into the lineBuffer
.8352		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8355		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8358		20 94 83	jsr $8394			jsr 	BLReadByte 					; read next byte
.835b		30 0a		bmi $8367			bmi 	_BPEndLine 					; -ve = EOL
.835d		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.835f		d0 02		bne $8363			bne 	_BPNotTab
.8361		a9 20		lda #$20			lda 	#' '
.8363						_BPNotTab:
.8363		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8365		b0 ea		bcs $8351			bcs 	_BPCopy 					; until a control character, should be 13 received.
.8367						_BPEndLine:
.8367		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line.
.836a		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.836d		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8370		f0 d4		beq $8346			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8372		38		sec				sec 								; append not insert
.8373		20 56 a5	jsr $a556			jsr 	MemoryInsertLine 			; append to current program
.8376		80 ce		bra $8346			bra 	_BPLoop
.8378						_BPExit:
.8378		9c fa ff	stz $fffa			stz 	$FFFA
.837b		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear variables etc.
.837e		60		rts				rts
.837f						_BLLoad:
>837f		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8387		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.8394						BLReadByte:
.8394		da		phx				phx
.8395		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8397		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.839a		85 0b		sta $0b				sta 	8+3
.839c		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.839f		85 36		sta $36				sta 	zTemp0
.83a1		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83a4		85 37		sta $37				sta 	zTemp0+1
.83a6		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83a8		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ab		d0 0f		bne $83bc			bne 	_BLNoCarry
.83ad		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83b0		10 0a		bpl $83bc			bpl 	_BLNoCarry 					; need a new page
.83b2		48		pha				pha
.83b3		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83b5		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83b8		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83bb		68		pla				pla
.83bc						_BLNoCarry:
.83bc		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83be		fa		plx				plx
.83bf		c9 00		cmp #$00			cmp 	#0
.83c1		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83c2						EditProgramCode:
.83c2		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.83c5		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.83c8		20 fa a5	jsr $a5fa			jsr 	MemorySearch
.83cb		90 05		bcc $83d2			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83cd		d0 03		bne $83d2			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83cf		20 1f a5	jsr $a51f			jsr 	MemoryDeleteLine 			; delete the line
.83d2						_EPCNoDelete:
.83d2		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.83d5		c9 80		cmp #$80			cmp 	#KWC_EOL
.83d7		f0 0d		beq $83e6			beq 	_EPCNoInsert
.83d9		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.83dc		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.83df		20 fa a5	jsr $a5fa			jsr 	MemorySearch
.83e2		18		clc				clc 								; insert at this point.
.83e3		20 56 a5	jsr $a556			jsr 	MemoryInsertLine 			; insert the line
.83e6						_EPCNoInsert:
.83e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.83e7						WarmStart:
.83e7		a2 ff		ldx #$ff			ldx 	#$FF
.83e9		9a		txs				txs
.83ea		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.83ec		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.83ef		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.83f2		20 67 80	jsr $8067			jsr 	TKTokeniseLine 				; tokenise the line
.83f5		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.83f8		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83fb		d0 17		bne $8414			bne 	_WSEditCode 				; if so,edit code.
.83fd		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8400		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8402		85 30		sta $30				sta 	codePtr
.8404		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8406		85 31		sta $31				sta 	codePtr+1
.8408		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.840b		c9 80		cmp #$80			cmp 	#KWC_EOL
.840d		f0 d8		beq $83e7			beq 	WarmStart
.840f		20 aa 8b	jsr $8baa			jsr 	RUNCodePointerLine 			; execute that line.
.8412		80 d3		bra $83e7			bra 	WarmStart
.8414						_WSEditCode:
.8414		20 c2 83	jsr $83c2			jsr 	EditProgramCode 			; edit the program code
.8417		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear all variables etc.
.841a		80 cb		bra $83e7			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.841c						AssembleCommand:
.841c		a2 00		ldx #$00			ldx 	#0
.841e		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger 		; start address
.8421		a5 58		lda $58				lda 	NSMantissa0
.8423		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8426		a5 60		lda $60				lda 	NSMantissa1
.8428		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.842b		20 24 8f	jsr $8f24			jsr 	CheckComma
.842e		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; options 0-3
.8431		a5 58		lda $58				lda 	NSMantissa0
.8433		8d 20 04	sta $0420			sta 	AssemblerControl
.8436		60		rts				rts
.8437		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8438						AssertCommand:
.8438		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.843a		20 ed 9d	jsr $9ded			jsr 	EvaluateInteger 			; the assert test
.843d		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; exit if result is non zero.
.8440		d0 05		bne $8447			bne 	_ACExit
.8442		a9 0a		lda #$0a		lda	#10
.8444		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.8447						_ACExit:
.8447		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8448						CallCommand:
.8448		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.844a		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.844d						_CCClear
.844d		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.844e		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; these are optional sequentially.
.8451		e0 04		cpx #$04			cpx 	#4
.8453		d0 f8		bne $844d			bne 	_CCClear
.8455		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8457						_CCCParam:
.8457		b1 30		lda ($30),y			lda 	(codePtr),y
.8459		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.845b		d0 09		bne $8466			bne 	_CCCRun6502
.845d		c8		iny				iny 								; skip comma
.845e		e8		inx				inx	 								; next level
.845f		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8462		e0 03		cpx #$03			cpx 	#3
.8464		90 f1		bcc $8457			bcc 	_CCCParam 					; done all 3 ?
.8466						_CCCRun6502:
.8466		5a		phy				phy 								; save position
.8467		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8469		85 37		sta $37				sta 	zTemp0+1
.846b		a5 58		lda $58				lda 	NSMantissa0
.846d		85 36		sta $36				sta 	zTemp0
.846f		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8471		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8473		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8475		20 7a 84	jsr $847a			jsr 	_CCCZTemp0 					; call zTemp0
.8478		7a		ply				ply 								; restore position and exit
.8479		60		rts				rts
.847a						_CCCZTemp0:
.847a		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.847d						ClearCommand:
.847d		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.847f		85 36		sta $36				sta 	0+zTemp0
.8481		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8483		85 37		sta $37				sta 	1+zTemp0
.8485						_ClearZeroLoop:
.8485		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8487		f0 24		beq $84ad			beq 	_ClearZeroEnd
.8489		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.848b		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.848d						_ClearOneVariable:
.848d		91 36		sta ($36),y			sta 	(zTemp0),y
.848f		c8		iny				iny
.8490		c0 08		cpy #$08			cpy 	#8
.8492		d0 f9		bne $848d			bne 	_ClearOneVariable
.8494		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8496		b1 36		lda ($36),y			lda 	(zTemp0),y
.8498		c9 18		cmp #$18			cmp 	#NSTProcedure
.849a		d0 04		bne $84a0			bne 	_ClearNotProcedure
.849c		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.849e		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84a0						_ClearNotProcedure:
.84a0		18		clc				clc 								; go to the next variable
.84a1		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84a3		65 36		adc $36				adc 	zTemp0
.84a5		85 36		sta $36				sta 	zTemp0
.84a7		90 dc		bcc $8485			bcc 	_ClearZeroLoop
.84a9		e6 37		inc $37				inc 	zTemp0+1
.84ab		80 d8		bra $8485			bra 	_ClearZeroLoop
.84ad						_ClearZeroEnd:
.84ad		18		clc				clc
.84ae		a5 36		lda $36				lda 	zTemp0
.84b0		69 01		adc #$01			adc 	#1
.84b2		8d 0c 04	sta $040c			sta 	lowMemPtr
.84b5		a5 37		lda $37				lda 	zTemp0+1
.84b7		69 00		adc #$00			adc 	#0
.84b9		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84bc		20 b4 af	jsr $afb4			jsr 	StackReset
.84bf		20 1a b0	jsr $b01a			jsr 	StringSystemInitialise
.84c2		20 25 8e	jsr $8e25			jsr 	ProcedureScan
.84c5		20 59 8b	jsr $8b59			jsr 	Command_Restore
.84c8		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84cb		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84ce		9c 20 04	stz $0420			stz 	AssemblerControl
.84d1		20 6f 9a	jsr $9a6f			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84d5						ClearScreen:
.84d5		5a		phy				phy
.84d6		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.84d8		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.84db		7a		ply				ply
.84dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.84dd						Command_Data:
.84dd		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.84df		a2 80		ldx #$80			ldx 	#KWC_EOL
.84e1		20 77 8e	jsr $8e77			jsr 	ScanForward
.84e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.84e5						DimCommand:
.84e5		b1 30		lda ($30),y			lda 	(codePtr),y
.84e7		29 c0		and #$c0			and 	#$C0
.84e9		c9 40		cmp #$40			cmp 	#$40
.84eb		d0 7a		bne $8567			bne 	_DCSyntax 				; n o, error.
.84ed		b1 30		lda ($30),y			lda 	(codePtr),y
.84ef		18		clc				clc
.84f0		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84f2		85 3f		sta $3f				sta 	zaTemp+1
.84f4		c8		iny				iny
.84f5		b1 30		lda ($30),y			lda 	(codePtr),y
.84f7		c8		iny				iny
.84f8		85 3e		sta $3e				sta 	zaTemp
.84fa		5a		phy				phy
.84fb		a0 02		ldy #$02			ldy 	#2 						; read type byte
.84fd		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ff		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8501		c9 18		cmp #$18			cmp 	#NSTProcedure
.8503		f0 62		beq $8567			beq 	_DCSyntax
.8505		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8507		29 04		and #$04			and 	#NSBIsArray
.8509		f0 64		beq $856f			beq 	_DCType
.850b		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.850d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.850f		d0 59		bne $856a			bne 	_DCRedefine
.8511		7a		ply				ply
.8512		20 72 85	jsr $8572			jsr 	_DCGetSize 				; get array size, check it.
.8515		5a		phy				phy
.8516		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8518		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.851a		7a		ply				ply 							; is there a second (e.g. ,x)
.851b		b1 30		lda ($30),y			lda 	(codePtr),y
.851d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.851f		d0 0a		bne $852b			bne 	_DCOneDimension
.8521		c8		iny				iny 							; skip comma
.8522		20 72 85	jsr $8572			jsr 	_DCGetSize 				; get 2nd array size
.8525		5a		phy				phy
.8526		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8528		91 3e		sta ($3e),y			sta 	(zaTemp),y
.852a		7a		ply				ply
.852b						_DCOneDimension:
.852b		5a		phy				phy 							; save position
.852c		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.852e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8530		aa		tax				tax
.8531		c8		iny				iny
.8532		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8534		e8		inx				inx 							; bump them.
.8535		1a		inc a				inc 	a
.8536		20 2b 9e	jsr $9e2b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8539		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.853b		29 e0		and #$e0			and 	#$E0
.853d		d0 23		bne $8562			bne 	_DCSize
.853f		a0 02		ldy #$02			ldy 	#2 						; get base type
.8541		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8543		20 80 85	jsr $8580			jsr 	ScaleByBaseType 		; scale by base type
.8546		a5 36		lda $36				lda 	zTemp0
.8548		a6 37		ldx $37				ldx 	zTemp0+1
.854a		20 31 9a	jsr $9a31			jsr 	AllocateXABytes 		; allocate memory
.854d		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.854f		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8551		c8		iny				iny
.8552		8a		txa				txa
.8553		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8555		7a		ply				ply 							; get position back
.8556		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 		; check )
.8559		b1 30		lda ($30),y			lda 	(codePtr),y
.855b		c8		iny				iny 							; consume in case
.855c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.855e		f0 85		beq $84e5			beq 	DimCommand
.8560		88		dey				dey 							; undo consume
.8561		60		rts				rts
.8562						_DCSize:
.8562		a9 16		lda #$16		lda	#22
.8564		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.8567						_DCSyntax:
.8567		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.856a						_DCRedefine:
.856a		a9 15		lda #$15		lda	#21
.856c		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.856f						_DCType:
.856f		4c 08 a0	jmp $a008			jmp 	TypeError
.8572						_DCGetSize:
.8572		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8574		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 	; get array dimension
.8577		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8579		f0 e7		beq $8562			beq 	_DCSize
.857b		c9 fe		cmp #$fe			cmp 	#254
.857d		f0 e3		beq $8562			beq 	_DCSize
.857f		60		rts				rts
.8580						ScaleByBaseType:
.8580		29 10		and #$10			and 	#NSBIsString 			; is it string
.8582		d0 19		bne $859d			bne 	_SBBTString
.8584		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8586		48		pha				pha
.8587		a5 36		lda $36				lda 	zTemp0
.8589		48		pha				pha
.858a		06 36		asl $36				asl 	zTemp0 					; x 2
.858c		26 37		rol $37				rol 	zTemp0+1
.858e		06 36		asl $36				asl 	zTemp0 					; x 4
.8590		26 37		rol $37				rol 	zTemp0+1
.8592		68		pla				pla 							; add stacked value = x 5
.8593		65 36		adc $36				adc 	zTemp0
.8595		85 36		sta $36				sta 	zTemp0
.8597		68		pla				pla
.8598		65 37		adc $37				adc 	zTemp0+1
.859a		85 37		sta $37				sta 	zTemp0+1
.859c		60		rts				rts
.859d						_SBBTString:
.859d		06 36		asl $36				asl 	zTemp0
.859f		26 37		rol $37				rol 	zTemp0+1
.85a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85a2						EndCommand:
.85a2		4c e7 83	jmp $83e7			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85a5						ForCommand:
.85a5		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85a7		20 4e af	jsr $af4e			jsr 	StackOpen
.85aa		a2 00		ldx #$00			ldx 	#0
.85ac		20 83 98	jsr $9883			jsr 	EvaluateTerm
.85af		b5 50		lda $50,x			lda 	NSStatus,x
.85b1		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85b3		d0 47		bne $85fc			bne		_FCError
.85b5		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85b7		20 2c 8f	jsr $8f2c			jsr 	CheckNextA
.85ba		e8		inx				inx
.85bb		20 ed 9d	jsr $9ded			jsr 	EvaluateInteger 			; <from> in +1
.85be		b1 30		lda ($30),y			lda 	(codePtr),y
.85c0		c8		iny				iny 								; consume it
.85c1		48		pha				pha 								; save on stack for later
.85c2		c9 ba		cmp #$ba			cmp 	#KWD_DOWNTO
.85c4		f0 04		beq $85ca			beq 	_FCNoSyntax
.85c6		c9 d8		cmp #$d8			cmp 	#KWD_TO
.85c8		d0 35		bne $85ff			bne 	_FCSyntaxError
.85ca						_FCNoSyntax:
.85ca		e8		inx				inx
.85cb		20 ed 9d	jsr $9ded			jsr 	EvaluateInteger
.85ce		20 93 af	jsr $af93			jsr 	STKSaveCodePosition 		; save loop back position
.85d1		68		pla				pla 								; restore DOWNTO or TO
.85d2		5a		phy				phy 								; save Y on the stack
.85d3		49 ba		eor #$ba			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85d5		f0 02		beq $85d9			beq 	_FCNotDownTo
.85d7		a9 02		lda #$02			lda 	#2
.85d9						_FCNotDownTo:
.85d9		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.85da		a0 10		ldy #$10			ldy 	#16
.85dc		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.85de		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.85e0		a5 58		lda $58				lda 	NSMantissa0
.85e2		91 34		sta ($34),y			sta 	(basicStack),y
.85e4		a5 60		lda $60				lda 	NSMantissa1
.85e6		c8		iny				iny
.85e7		91 34		sta ($34),y			sta 	(basicStack),y
.85e9		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.85eb		a2 01		ldx #$01			ldx 	#1
.85ed		20 02 86	jsr $8602			jsr 	FCIntegerToStack
.85f0		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.85f2		a2 02		ldx #$02			ldx 	#2
.85f4		20 02 86	jsr $8602			jsr 	FCIntegerToStack
.85f7		20 1d 86	jsr $861d			jsr 	CopyIndexToReference
.85fa		7a		ply				ply 								; restore position
.85fb		60		rts				rts
.85fc						_FCError:
.85fc		4c 08 a0	jmp $a008			jmp 	TypeError
.85ff						_FCSyntaxError:
.85ff		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.8602						FCIntegerToStack:
.8602		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8604		10 03		bpl $8609			bpl	 	_FCNotNegative
.8606		20 49 9e	jsr $9e49			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8609						_FCNotNegative:
.8609		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.860b		91 34		sta ($34),y			sta 	(basicStack),y
.860d		c8		iny				iny
.860e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8610		91 34		sta ($34),y			sta 	(basicStack),y
.8612		c8		iny				iny
.8613		b5 68		lda $68,x			lda 	NSMantissa2,x
.8615		91 34		sta ($34),y			sta 	(basicStack),y
.8617		c8		iny				iny
.8618		b5 70		lda $70,x			lda 	NSMantissa3,x
.861a		91 34		sta ($34),y			sta 	(basicStack),y
.861c		60		rts				rts
.861d						CopyIndexToReference:
.861d		5a		phy				phy
.861e		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8620		38		sec				sec 								; (because we copy from offset 8)
.8621		b1 34		lda ($34),y			lda 	(basicStack),y
.8623		e9 08		sbc #$08			sbc 	#8
.8625		85 36		sta $36				sta 	zTemp0
.8627		c8		iny				iny
.8628		b1 34		lda ($34),y			lda 	(basicStack),y
.862a		e9 00		sbc #$00			sbc 	#0
.862c		85 37		sta $37				sta 	zTemp0+1
.862e		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8630		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8632		b1 34		lda ($34),y			lda 	(basicStack),y
.8634		0a		asl a				asl 	a 							; into carry
.8635		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8637		90 14		bcc $864d			bcc 	_CITRNormal
.8639		38		sec				sec
.863a						_CITRNegative:
.863a		a9 00		lda #$00			lda 	#0
.863c		f1 34		sbc ($34),y			sbc 	(basicStack),y
.863e		91 36		sta ($36),y			sta 	(zTemp0),y
.8640		c8		iny				iny
.8641		ca		dex				dex
.8642		d0 f6		bne $863a			bne 	_CITRNegative
.8644		88		dey				dey 								; look at MSB of mantissa
.8645		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8647		09 80		ora #$80			ora 	#$80
.8649		91 36		sta ($36),y			sta 	(zTemp0),y
.864b		7a		ply				ply
.864c		60		rts				rts
.864d						_CITRNormal:
.864d		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.864f		91 36		sta ($36),y			sta 	(zTemp0),y
.8651		c8		iny				iny
.8652		ca		dex				dex
.8653		d0 f8		bne $864d			bne 	_CITRNormal
.8655		7a		ply				ply 								; and exit.
.8656		60		rts				rts
.8657						NextCommand:
.8657		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8659		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.865b		20 7b af	jsr $af7b			jsr 	StackCheckFrame
.865e		5a		phy				phy
.865f		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8661		b1 34		lda ($34),y			lda 	(basicStack),y
.8663		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8665		30 02		bmi $8669			bmi 	_NCStepNeg
.8667		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8669						_NCStepNeg:
.8669		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.866b		a2 04		ldx #$04			ldx 	#4 							; count to bump
.866d		18		clc				clc
.866e						_NCBump:
.866e		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8670		91 34		sta ($34),y			sta 	(basicStack),y
.8672		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8674		c8		iny				iny 								; next byte
.8675		ca		dex				dex 								; do four times
.8676		d0 f6		bne $866e			bne 	_NCBump
.8678		20 1d 86	jsr $861d			jsr		CopyIndexToReference		; copy it to the reference variable.
.867b		a0 10		ldy #$10			ldy 	#16 						; get step count again
.867d		b1 34		lda ($34),y			lda 	(basicStack),y
.867f		0a		asl a				asl 	a 							; sign bit to carry
.8680		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8682		85 38		sta $38				sta 	zTemp1
.8684		90 02		bcc $8688			bcc 	_NCCompRev 					; use if step is +ve
.8686		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8688						_NCCompRev:
.8688		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.868a		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.868c		85 39		sta $39				sta 	zTemp1+1
.868e		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8690		38		sec				sec
.8691						_NCCompare:
.8691		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8693		b1 34		lda ($34),y			lda 	(basicStack),y
.8695		a4 39		ldy $39				ldy 	zTemp1+1
.8697		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8699		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.869b		e6 39		inc $39				inc 	zTemp1+1
.869d		ca		dex				dex 								; do it 4 times.
.869e		d0 f1		bne $8691			bne 	_NCCompare
.86a0		50 02		bvc $86a4			bvc 	_NCNoOverflow 				; convert to signed comparison
.86a2		49 80		eor #$80			eor 	#$80
.86a4						_NCNoOverflow:
.86a4		7a		ply				ply 								; restore Y position
.86a5		0a		asl a				asl 	a 							; is bit 7 set.
.86a6		90 04		bcc $86ac			bcc 	_NCLoopBack 				; if no , >= so loop back
.86a8		20 6d af	jsr $af6d			jsr 	StackClose 					; exit the loop
.86ab		60		rts				rts
.86ac						_NCLoopBack:
.86ac		20 a4 af	jsr $afa4			jsr 	STKLoadCodePosition 		; loop back
.86af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86b0						Command_GOSUB:
.86b0		a2 00		ldx #$00			ldx 	#0
.86b2		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86b5		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86b7		20 4e af	jsr $af4e			jsr 	StackOpen 					; create frame
.86ba		20 93 af	jsr $af93			jsr 	STKSaveCodePosition 		; save current position
.86bd		4c d3 86	jmp $86d3			jmp 	GotoStackX
.86c0						Command_RETURN:
.86c0		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86c2		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86c4		20 7b af	jsr $af7b			jsr 	StackCheckFrame
.86c7		20 a4 af	jsr $afa4			jsr 	STKLoadCodePosition 		; restore code position
.86ca		20 6d af	jsr $af6d			jsr 	StackClose
.86cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86ce						GotoCommand:
.86ce		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86d0		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.86d3						GotoStackX:
.86d3		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86d5		48		pha				pha 								; it is slightly inefficient, just in cases.
.86d6		b5 58		lda $58,x			lda 	NSMantissa0,x
.86d8		fa		plx				plx
.86d9		20 fa a5	jsr $a5fa			jsr 	MemorySearch 				; transfer to line number AX.
.86dc		90 05		bcc $86e3			bcc 	_GotoError 					; not found, off end.
.86de		d0 03		bne $86e3			bne 	_GotoError 					; not found exactly
.86e0		4c a3 8b	jmp $8ba3			jmp 	RunNewLine 					; and go straight to new line code.
.86e3						_GotoError:
.86e3		a9 0d		lda #$0d		lda	#13
.86e5		4c 35 8f	jmp $8f35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.86e8						IfCommand:
.86e8		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.86ea		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber
.86ed		b1 30		lda ($30),y			lda 	(codePtr),y
.86ef		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.86f1		d0 0a		bne $86fd			bne 	_IFStructured 				; we still support it.
.86f3		c8		iny				iny 								; consume THEN
.86f4		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; is it zero
.86f7		f0 01		beq $86fa			beq 	_IfFail 					; if fail, go to next line
.86f9		60		rts				rts 								; if THEN just continue
.86fa						_IfFail:
.86fa		4c 8b 8b	jmp $8b8b			jmp 	EOLCommand
.86fd						_IfStructured:
.86fd		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; is it zero
.8700		d0 07		bne $8709			bne 	_IfExit 					; if not, then continue normally.
.8702		a9 bb		lda #$bb			lda 	#KWD_ELSE 					; look for else/endif
.8704		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8706		20 77 8e	jsr $8e77			jsr 	ScanForward 				; and run from there
.8709						_IfExit:
.8709		60		rts				rts
.870a						ElseCode:
.870a		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.870c		aa		tax				tax 								; so just go to the structure exit
.870d		20 77 8e	jsr $8e77			jsr 	ScanForward
.8710		60		rts				rts
.8711						EndIf:
.8711		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8712						Command_Input:
.8712		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8714		8d 28 04	sta $0428			sta 	IsInputFlag
.8717		80 03		bra $871c			bra 	Command_IP_Main
.8719						Command_Print:
.8719		9c 28 04	stz $0428			stz 	IsInputFlag 				; clear input flag
.871c						Command_IP_Main:
.871c		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.871d						_CPLoop:
.871d		08		php				php 								; save last action flag
.871e		b1 30		lda ($30),y			lda 	(codePtr),y
.8720		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8722		f0 54		beq $8778			beq 	_CPExit
.8724		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8726		f0 50		beq $8778			beq 	_CPExit
.8728		68		pla				pla 								; throw last action flag
.8729		b1 30		lda ($30),y			lda 	(codePtr),y
.872b		c8		iny				iny
.872c		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.872e		f0 45		beq $8775			beq 	_CPContinueWithSameLine
.8730		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8732		f0 3c		beq $8770			beq 	_CPTab
.8734		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8736		f0 34		beq $876c			beq 	_CPNewLine
.8738		88		dey				dey 								; undo the get.
.8739		20 37 94	jsr $9437			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.873c		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.873e		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8740		f0 0d		beq $874f			beq 	_CPIsValue 					; no, display it.
.8742		ad 28 04	lda $0428			lda 	IsInputFlag 				; if print, dereference and print.
.8745		f0 05		beq $874c			beq 	_CPIsPrint 					; otherwise display.
.8747		20 81 87	jsr $8781			jsr 	CIInputValue 				; input a value to the reference
.874a		80 20		bra $876c			bra 	_CPNewLine
.874c						_CPIsPrint:
.874c		20 fc 96	jsr $96fc			jsr 	Dereference 				; dereference if required.
.874f						_CPIsValue:
.874f		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8751		29 10		and #$10			and 	#NSBIsString
.8753		f0 09		beq $875e			beq 	_CPNumber
.8755		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8757		a5 58		lda $58				lda 	NSMantissa0
.8759		20 e4 87	jsr $87e4			jsr 	CPPrintStringXA
.875c		80 be		bra $871c			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.875e						_CPNumber:
.875e		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8760		20 b5 9c	jsr $9cb5			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8763		a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8765		a9 49		lda #$49			lda 	#DecimalBuffer & $FF
.8767		20 e4 87	jsr $87e4			jsr 	CPPrintStringXA 			; print it.
.876a		80 b0		bra $871c			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.876c						_CPNewLine:
.876c		a9 0d		lda #$0d			lda 	#13
.876e		80 02		bra $8772			bra 	_CPPrintChar
.8770						_CPTab:
.8770		a9 09		lda #$09			lda 	#9 							; print TAB
.8772						_CPPrintChar:
.8772		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.8775						_CPContinueWithSameLine:
.8775		38		sec				sec 								; loop round with carry set, which
.8776		80 a5		bra $871d			bra 	_CPLoop 					; will inhibit final CR
.8778						_CPExit:
.8778		28		plp				plp 								; get last action flag
.8779		b0 05		bcs $8780			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.877b		a9 0d		lda #$0d			lda 	#13 						; print new line
.877d		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.8780						_CPExit2:
.8780		60		rts				rts
.8781						CIInputValue:
.8781		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8783						_CIInputLine:
.8783		20 fa 87	jsr $87fa			jsr 	CPInputVector 				; get key
.8786		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8788		f0 1f		beq $87a9			beq 	_CIHaveValue
.878a		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.878c		f0 11		beq $879f			beq 	_CIBackspace
.878e		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8790		90 f1		bcc $8783			bcc 	_CIInputLine
.8792		e0 50		cpx #$50			cpx 	#80 						; max length
.8794		b0 ed		bcs $8783			bcs 	_CIInputLine
.8796		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8799		e8		inx				inx
.879a		20 f7 87	jsr $87f7			jsr 	CPPrintVector 				; echo it.
.879d		80 e4		bra $8783			bra 	_CIInputLine
.879f						_CIBackSpace:
.879f		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87a1		f0 e0		beq $8783			beq 	_CIInputLine
.87a3		20 f7 87	jsr $87f7			jsr 	CPPrintVector 				; echo it.
.87a6		ca		dex				dex
.87a7		80 da		bra $8783			bra 	_CIInputLine
.87a9						_CIHaveValue:
.87a9		9e 2a 05	stz $052a,x			stz 	LineBuffer,x 				; ASCIIZ string now in line buffer.
.87ac		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87ae		29 10		and #$10			and 	#NSBIsString
.87b0		f0 17		beq $87c9			beq 	_CIAssignNumber 			; assign a number
.87b2		a2 01		ldx #$01			ldx 	#1
.87b4		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87b6		95 58		sta $58,x			sta 	NSMantissa0,x
.87b8		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87ba		95 60		sta $60,x			sta 	NSMantissa1,x
.87bc		74 68		stz $68,x			stz 	NSMantissa2,x
.87be		74 70		stz $70,x			stz 	NSMantissa3,x
.87c0		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87c2		95 50		sta $50,x			sta  	NSStatus,x
.87c4		ca		dex				dex 								; X = 0
.87c5		20 36 88	jsr $8836			jsr 	AssignVariable
.87c8		60		rts				rts
.87c9						_CIAssignNumber:
.87c9		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87cb		85 36		sta $36				sta 	zTemp0
.87cd		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87cf		85 37		sta $37				sta 	zTemp0+1
.87d1		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87d3		20 37 9c	jsr $9c37			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87d6		90 07		bcc $87df			bcc 	_CIIsOkay
.87d8		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.87da		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.87dd		80 a2		bra $8781			bra 	CIInputValue
.87df						_CIIsOkay:
.87df		ca		dex				dex 								; X = 0
.87e0		20 36 88	jsr $8836			jsr 	AssignVariable
.87e3		60		rts				rts
.87e4						CPPrintStringXA:
.87e4		5a		phy				phy
.87e5		86 37		stx $37				stx 	zTemp0+1
.87e7		85 36		sta $36				sta 	zTemp0
.87e9		a0 00		ldy #$00			ldy 	#0
.87eb						_PSXALoop:
.87eb		b1 36		lda ($36),y			lda 	(zTemp0),y
.87ed		f0 06		beq $87f5			beq 	_PSXAExit
.87ef		20 f7 87	jsr $87f7			jsr 	CPPrintVector
.87f2		c8		iny				iny
.87f3		80 f6		bra $87eb			bra 	_PSXALoop
.87f5						_PSXAExit:
.87f5		7a		ply				ply
.87f6		60		rts				rts
.87f7						CPPrintVector:
.87f7		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.87fa						CPInputVector:
.87fa		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.87fd						LetCommand:
.87fd		a2 00		ldx #$00			ldx 	#0
.87ff		b1 30		lda ($30),y			lda 	(codePtr),y
.8801		c9 10		cmp #$10			cmp 	#KWD_AT
.8803		d0 14		bne $8819			bne 	_LCStandard
.8805		c8		iny				iny 								; skip equal
.8806		20 83 98	jsr $9883			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8809		20 fc 96	jsr $96fc			jsr 	Dereference 				; dereference it to a value
.880c		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.880e		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8810		95 50		sta $50,x			sta 	NSStatus,x
.8812		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8814		d0 0f		bne $8825			bne 	_LCMain
.8816		4c 08 a0	jmp $a008			jmp 	TypeError 					; was a reference before.
.8819						_LCStandard:
.8819		ad 21 94	lda $9421			lda 	PrecedenceLevel+"*"			; precedence > this
.881c		20 3b 94	jsr $943b			jsr 	EvaluateExpressionAtPrecedence
.881f		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8821		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8823		f0 0e		beq $8833			beq 	_LetGoProc 					; it's a procedure call.
.8825						_LCMain:
.8825		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8827		20 2c 8f	jsr $8f2c			jsr 	CheckNextA
.882a		e8		inx				inx 								; RHS
.882b		20 c5 9d	jsr $9dc5			jsr 	EvaluateValue
.882e		ca		dex				dex
.882f		20 36 88	jsr $8836			jsr 	AssignVariable
.8832		60		rts				rts
.8833						_LetGoProc:
.8833		4c 61 8a	jmp $8a61			jmp 	CallProcedure
.8836						AssignVariable:
.8836		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8838		48		pha				pha 								; save a copy
.8839		55 51		eor $51,x			eor 	NSStatus+1,x
.883b		29 10		and #$10			and 	#NSBIsString
.883d		d0 0b		bne $884a			bne 	_ASError
.883f		68		pla				pla 								; get back
.8840		29 10		and #$10			and 	#NSBIsString 				; check type
.8842		d0 03		bne $8847			bne 	_ASString
.8844		4c 3a 96	jmp $963a			jmp 	AssignNumber
.8847						_ASString:
.8847		4c 98 96	jmp $9698			jmp 	AssignString
.884a						_ASError:
.884a		4c 08 a0	jmp $a008			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.884d						Command_List:
.884d		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8850		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8852		20 49 80	jsr $8049			jsr 	SNDCommand
.8855		b1 30		lda ($30),y			lda 	(codePtr),y
.8857		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8859		c9 40		cmp #$40			cmp 	#$40  						; of code.
.885b		f0 6e		beq $88cb			beq 	_CLListProcedure
.885d		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.885f		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8861		a9 ff		lda #$ff			lda 	#$FF
.8863		85 5f		sta $5f				sta 	NSMantissa0+7
.8865		85 67		sta $67				sta 	NSMantissa1+7
.8867		b1 30		lda ($30),y			lda 	(codePtr),y
.8869		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.886b		f0 1a		beq $8887			beq 	_CLSecond
.886d		20 48 89	jsr $8948			jsr 	CLIsDigit 					; if not digit, list all
.8870		b0 20		bcs $8892			bcs 	_CLStart
.8872		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8874		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.8877		b1 30		lda ($30),y			lda 	(codePtr),y
.8879		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.887b		f0 0a		beq $8887			beq 	_CLSecond 					; if so go get it
.887d		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.887f		85 5f		sta $5f				sta 	NSMantissa0+7
.8881		a5 64		lda $64				lda 	NSMantissa1+4
.8883		85 67		sta $67				sta 	NSMantissa1+7
.8885		80 0b		bra $8892			bra 	_CLStart
.8887						_CLSecond:
.8887		c8		iny				iny 								; consume comma
.8888		20 48 89	jsr $8948			jsr 	CLIsDigit 					; digit found
.888b		b0 05		bcs $8892			bcs 	_CLStart 					; if not, continue listing
.888d		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.888f		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.8892						_CLStart
.8892		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8894		85 30		sta $30				sta 	codePtr
.8896		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8898		85 31		sta $31				sta 	codePtr+1
.889a						_CLLoop:
.889a		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.889d		f0 27		beq $88c6			beq 	_CLBreak
.889f		b2 30		lda ($30)			lda 	(codePtr)
.88a1		f0 20		beq $88c3			beq 	_CLExit
.88a3		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88a5		20 37 89	jsr $8937			jsr 	CLCompareLineNo
.88a8		90 0c		bcc $88b6			bcc 	_CLNext
.88aa		a2 07		ldx #$07			ldx 	#7
.88ac		20 37 89	jsr $8937			jsr 	CLCompareLineNo
.88af		f0 02		beq $88b3			beq 	_CLDoThisOne
.88b1		b0 03		bcs $88b6			bcs 	_CLNext
.88b3						_CLDoThisOne:
.88b3		20 24 89	jsr $8924			jsr 	CLListOneLine 				; routine to list the current line.
.88b6						_CLNext:
.88b6		18		clc				clc
.88b7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88b9		65 30		adc $30				adc 	codePtr
.88bb		85 30		sta $30				sta 	codePtr
.88bd		90 02		bcc $88c1			bcc 	_CREExit
.88bf		e6 31		inc $31				inc 	codePtr+1 					; carry
.88c1						_CREExit:
.88c1		80 d7		bra $889a			bra 	_CLLoop
.88c3						_CLExit:
.88c3		4c e7 83	jmp $83e7			jmp 	WarmStart
.88c6						_CLBreak:
.88c6		a9 01		lda #$01		lda	#1
.88c8		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.88cb						_CLListProcedure:
.88cb		b1 30		lda ($30),y			lda 	(codePtr),y
.88cd		85 38		sta $38				sta 	zTemp1
.88cf		c8		iny				iny
.88d0		b1 30		lda ($30),y			lda 	(codePtr),y
.88d2		85 39		sta $39				sta 	zTemp1+1
.88d4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88d6		85 30		sta $30				sta 	codePtr
.88d8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88da		85 31		sta $31				sta 	codePtr+1
.88dc						_CLLPSearch:
.88dc		b2 30		lda ($30)			lda 	(codePtr)
.88de		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.88e0		f0 e1		beq $88c3			beq 	_CLExit
.88e2		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.88e4		b1 30		lda ($30),y			lda 	(codePtr),y
.88e6		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.88e8		d0 0e		bne $88f8			bne 	_CLLPNext
.88ea		c8		iny				iny 								; check if PROC this.
.88eb		b1 30		lda ($30),y			lda 	(codePtr),y
.88ed		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.88ef		d0 07		bne $88f8			bne 	_CLLPNext
.88f1		c8		iny				iny
.88f2		b1 30		lda ($30),y			lda 	(codePtr),y
.88f4		c5 39		cmp $39				cmp 	zTemp1+1
.88f6		f0 0d		beq $8905			beq 	_CLLPFound
.88f8						_CLLPNext:
.88f8		18		clc				clc
.88f9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88fb		65 30		adc $30				adc 	codePtr
.88fd		85 30		sta $30				sta 	codePtr
.88ff		90 02		bcc $8903			bcc 	_CREExit
.8901		e6 31		inc $31				inc 	codePtr+1 					; carry
.8903						_CREExit:
.8903		80 d7		bra $88dc			bra 	_CLLPSearch
.8905						_CLLPFound:
.8905		b2 30		lda ($30)			lda 	(codePtr)
.8907		f0 ba		beq $88c3			beq 	_CLExit
.8909		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.890b		b1 30		lda ($30),y			lda 	(codePtr),y
.890d		48		pha				pha
.890e		20 24 89	jsr $8924			jsr 	CLListOneLine 				; list line and go forward
.8911		18		clc				clc
.8912		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8914		65 30		adc $30				adc 	codePtr
.8916		85 30		sta $30				sta 	codePtr
.8918		90 02		bcc $891c			bcc 	_CREExit
.891a		e6 31		inc $31				inc 	codePtr+1 					; carry
.891c						_CREExit:
.891c		68		pla				pla 								; reached ENDPROC ?
.891d		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.891f		d0 e4		bne $8905			bne 	_CLLPFound
.8921		4c e7 83	jmp $83e7			jmp 	WarmStart
.8924						CLListOneLine:
.8924		20 da 8e	jsr $8eda			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8927		20 5d 80	jsr $805d			jsr 	TKListConvertLine 			; convert line into token Buffer
.892a		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.892c		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.892e		20 8e 8f	jsr $8f8e			jsr 	PrintStringXA
.8931		a9 0d		lda #$0d			lda 	#13 						; new line
.8933		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8936		60		rts				rts
.8937						CLCompareLineNo:
.8937		38		sec				sec
.8938		a0 01		ldy #$01			ldy 	#1
.893a		b1 30		lda ($30),y			lda 	(codePtr),y
.893c		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.893e		85 36		sta $36				sta 	zTemp0
.8940		c8		iny				iny
.8941		b1 30		lda ($30),y			lda 	(codePtr),y
.8943		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8945		05 36		ora $36				ora 	zTemp0
.8947		60		rts				rts
.8948						CLIsDigit:
.8948		b1 30		lda ($30),y			lda 	(codePtr),y
.894a		c9 30		cmp #$30			cmp 	#"0"
.894c		90 03		bcc $8951			bcc	 	_CLIDExitFalse
.894e		c9 3a		cmp #$3a			cmp 	#"9"+1
.8950		60		rts				rts
.8951						_CLIDExitFalse:
.8951		38		sec				sec
.8952		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8953						Command_LOCAL:
.8953		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8955		20 61 89	jsr $8961			jsr 	LocaliseNextTerm 			; convert term to a local.
.8958		b1 30		lda ($30),y			lda 	(codePtr),y
.895a		c8		iny				iny
.895b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.895d		f0 f4		beq $8953			beq 	Command_LOCAL 				; if so, localise another variable.
.895f		88		dey				dey 								; unpick pre-get
.8960		60		rts				rts
.8961						LocaliseNextTerm:
.8961		20 83 98	jsr $9883			jsr 	EvaluateTerm 				; evaluate the term
.8964		b5 50		lda $50,x			lda 	NSStatus,x
.8966		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8968		f0 5c		beq $89c6			beq		_LNTError
.896a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.896c		85 36		sta $36				sta 	zTemp0
.896e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8970		85 37		sta $37				sta  	zTemp0+1
.8972		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8974		29 10		and #$10			and 	#NSBIsString
.8976		d0 1e		bne $8996			bne 	_LNTPushString
.8978		5a		phy				phy
.8979		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.897b						_LNTPushNumLoop:
.897b		b1 36		lda ($36),y			lda		(zTemp0),y
.897d		20 2d af	jsr $af2d			jsr 	StackPushByte
.8980		c8		iny				iny
.8981		c0 05		cpy #$05			cpy 	#5
.8983		d0 f6		bne $897b			bne 	_LNTPushNumLoop
.8985		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8987		20 2d af	jsr $af2d			jsr 	StackPushByte
.898a		a5 37		lda $37				lda 	zTemp0+1
.898c		20 2d af	jsr $af2d			jsr 	StackPushByte
.898f		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8991		20 2d af	jsr $af2d			jsr 	StackPushByte
.8994		7a		ply				ply
.8995		60		rts				rts
.8996						_LNTPushString:
.8996		5a		phy				phy
.8997		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8999		85 38		sta $38				sta 	zTemp1
.899b		a0 01		ldy #$01			ldy 	#1
.899d		b1 36		lda ($36),y			lda 	(zTemp0),y
.899f		85 39		sta $39				sta 	zTemp1+1
.89a1		a0 00		ldy #$00			ldy 	#0 							; output string
.89a3		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.89a5		f0 0a		beq $89b1			beq 	_LNTStringOut
.89a7						_LNTPushStrLoop:
.89a7		b1 38		lda ($38),y			lda 	(zTemp1),y
.89a9		f0 06		beq $89b1			beq 	_LNTStringOut
.89ab		20 2d af	jsr $af2d			jsr 	StackPushByte
.89ae		c8		iny				iny
.89af		80 f6		bra $89a7			bra 	_LNTPushStrLoop
.89b1						_LNTStringOut:
.89b1		98		tya				tya									; output length (chars written).
.89b2		20 2d af	jsr $af2d			jsr 	StackPushByte
.89b5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.89b7		20 2d af	jsr $af2d			jsr 	StackPushByte
.89ba		b5 60		lda $60,x			lda 	NSMantissa1,x
.89bc		20 2d af	jsr $af2d			jsr 	StackPushByte
.89bf		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.89c1		20 2d af	jsr $af2d			jsr 	StackPushByte
.89c4		7a		ply				ply
.89c5		60		rts				rts
.89c6						_LNTError:
.89c6		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.89c9						LocalPopValue:
.89c9		20 45 af	jsr $af45			jsr 	StackPopByte
.89cc		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.89ce		d0 17		bne $89e7			bne 	_LPVString
.89d0		20 45 af	jsr $af45			jsr 	StackPopByte 				; address
.89d3		85 37		sta $37				sta 	zTemp0+1
.89d5		20 45 af	jsr $af45			jsr 	StackPopByte
.89d8		85 36		sta $36				sta 	zTemp0
.89da		5a		phy				phy
.89db		a0 04		ldy #$04			ldy 	#4 							; copy back
.89dd						_LPVNumberCopy:
.89dd		20 45 af	jsr $af45			jsr 	StackPopByte
.89e0		91 36		sta ($36),y			sta 	(zTemp0),y
.89e2		88		dey				dey
.89e3		10 f8		bpl $89dd			bpl 	_LPVNumberCopy
.89e5		7a		ply				ply 								; and complete
.89e6		60		rts				rts
.89e7						_LPVString:
.89e7		20 45 af	jsr $af45			jsr 	StackPopByte 				; address of record copied to zTemp0
.89ea		85 37		sta $37				sta 	zTemp0+1
.89ec		20 45 af	jsr $af45			jsr 	StackPopByte
.89ef		85 36		sta $36				sta 	zTemp0
.89f1		5a		phy				phy
.89f2		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.89f4		85 38		sta $38				sta 	zTemp1
.89f6		a0 01		ldy #$01			ldy 	#1
.89f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.89fa		85 39		sta $39				sta 	zTemp1+1
.89fc		20 45 af	jsr $af45			jsr 	StackPopByte 				; # chars to get => y
.89ff		a8		tay				tay
.8a00		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8a02		f0 0e		beq $8a12			beq 	_LPVStringCopied
.8a04		a9 00		lda #$00			lda 	#0 							; NULL on end
.8a06		91 38		sta ($38),y			sta 	(zTemp1),y
.8a08						_LPVStringCopy:
.8a08		88		dey				dey
.8a09		30 07		bmi $8a12			bmi 	_LPVStringCopied
.8a0b		20 45 af	jsr $af45			jsr 	StackPopByte
.8a0e		91 38		sta ($38),y			sta 	(zTemp1),y
.8a10		80 f6		bra $8a08			bra 	_LPVStringCopy
.8a12						_LPVStringCopied:
.8a12		fa		plx				plx
.8a13		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8a14						NewCommand:
.8a14		20 1a 8a	jsr $8a1a			jsr 	NewProgram 					; does the actual NEW.
.8a17		4c e7 83	jmp $83e7			jmp 	WarmStart 					; and warm starts straight away.
.8a1a						NewProgram:
.8a1a		20 dc a5	jsr $a5dc			jsr 	MemoryNew
.8a1d		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8a20		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear everything.
.8a23		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8a24						PokeBCommand:
.8a24		a9 01		lda #$01			lda 	#1
.8a26		80 0c		bra $8a34			bra 	PokeCommand
.8a28						PokeWCommand:
.8a28		a9 02		lda #$02			lda 	#2
.8a2a		80 08		bra $8a34			bra 	PokeCommand
.8a2c						PokeLCommand:
.8a2c		a9 03		lda #$03			lda 	#3
.8a2e		80 04		bra $8a34			bra 	PokeCommand
.8a30						PokeDCommand:
.8a30		a9 04		lda #$04			lda 	#4
.8a32		80 00		bra $8a34			bra 	PokeCommand
.8a34						PokeCommand:
.8a34		48		pha				pha 								; save count on stack
.8a35		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8a37		20 00 9e	jsr $9e00			jsr		Evaluate16BitInteger 		; address
.8a3a		20 24 8f	jsr $8f24			jsr 	CheckComma
.8a3d		e8		inx				inx
.8a3e		20 ed 9d	jsr $9ded			jsr		EvaluateInteger 			; data
.8a41		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8a43		85 36		sta $36				sta 	zTemp0
.8a45		a5 60		lda $60				lda 	NSMantissa1
.8a47		85 37		sta $37				sta 	zTemp0+1
.8a49		68		pla				pla 								; count -> zTemp1
.8a4a		85 38		sta $38				sta 	zTemp1
.8a4c		5a		phy				phy 								; save Y position.
.8a4d		a0 00		ldy #$00			ldy 	#0 							; index to write
.8a4f		a2 00		ldx #$00			ldx 	#0 							; index to read
.8a51						_PCLoop:
.8a51		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8a53		91 36		sta ($36),y			sta 	(zTemp0),y
.8a55		c8		iny				iny 								; next byte to write
.8a56		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8a57		18		clc				clc
.8a58		69 08		adc #$08			adc 	#MathStackSize
.8a5a		aa		tax				tax
.8a5b		c6 38		dec $38				dec 	zTemp1 						; done them all
.8a5d		d0 f2		bne $8a51			bne 	_PCLoop
.8a5f		7a		ply				ply 								; restore position.
.8a60		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8a61						CallProcedure:
.8a61		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8a63		b1 30		lda ($30),y			lda 	(codePtr),y
.8a65		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8a67		f0 0c		beq $8a75			beq 	_CPEndParam
.8a69						_CPParamLoop:
.8a69		20 c5 9d	jsr $9dc5			jsr 	EvaluateValue 				; get parameter onto stack
.8a6c		e8		inx				inx 								; bump next stack
.8a6d		b1 30		lda ($30),y			lda 	(codePtr),y
.8a6f		c8		iny				iny
.8a70		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8a72		f0 f5		beq $8a69			beq 	_CPParamLoop
.8a74		88		dey				dey 								; unpick.
.8a75						_CPEndParam:
.8a75		8e 16 04	stx $0416			stx 	LastParameter 				; save the last parameters index.
.8a78		c8		iny				iny									; skip right bracket
.8a79		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8a7b		20 4e af	jsr $af4e			jsr 	StackOpen
.8a7e		20 93 af	jsr $af93			jsr 	STKSaveCodePosition 		; save loop position
.8a81		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8a83		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8a85		a5 60		lda $60				lda 	NSMantissa1
.8a87		85 37		sta $37				sta 	zTemp0+1
.8a89		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8a8b		b2 36		lda ($36)			lda 	(zTemp0)
.8a8d		85 30		sta $30				sta 	safePtr
.8a8f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a91		85 31		sta $31				sta 	safePtr+1
.8a93		c8		iny				iny
.8a94		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a96		85 32		sta $32				sta 	safePtr+2
.8a98		c8		iny				iny
.8a99		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a9b		85 33		sta $33				sta 	safePtr+3
.8a9d		c8		iny				iny 								; get Y offset -> Y
.8a9e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa0		a8		tay				tay
.8aa1		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8aa3		ec 16 04	cpx $0416			cpx	 	LastParameter 				; check zero parameters at the start
.8aa6		f0 13		beq $8abb			beq 	_ParamExit 					; if so, exit.
.8aa8						_ParamExtract:
.8aa8		ca		dex				dex 								; put a local term on the level before
.8aa9		20 61 89	jsr $8961			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8aac		20 36 88	jsr $8836			jsr 	AssignVariable 				; assign stacked value to the variable.
.8aaf		e8		inx				inx 								; advance to next parameter to do.
.8ab0		e8		inx				inx
.8ab1		ec 16 04	cpx $0416			cpx 	LastParameter 				; are we done ?
.8ab4		f0 05		beq $8abb			beq 	_ParamExit
.8ab6		20 24 8f	jsr $8f24			jsr 	CheckComma 					; comma seperating parameters
.8ab9		80 ed		bra $8aa8			bra 	_ParamExtract
.8abb						_ParamExit:
.8abb		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 			; check )
.8abe		60		rts				rts 								; and continue from here
.8abf						Command_ENDPROC:
.8abf		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8ac1		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8ac3		20 7b af	jsr $af7b			jsr 	StackCheckFrame
.8ac6		20 a4 af	jsr $afa4			jsr 	STKLoadCodePosition 		; restore code position
.8ac9		20 6d af	jsr $af6d			jsr 	StackClose
.8acc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8acd						Command_Read:
.8acd		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8acf		20 83 98	jsr $9883			jsr 	EvaluateTerm
.8ad2		b5 50		lda $50,x			lda 	NSStatus,x
.8ad4		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ad6		f0 4f		beq $8b27			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8ad8		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs 			; swap code and data
.8adb		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ade		d0 25		bne $8b05			bne 	_CRContinueData  			; forward for the next one.
.8ae0		b2 30		lda ($30)			lda 	(codePtr)
.8ae2		f0 1c		beq $8b00			beq 	_CRNoData
.8ae4						_CRKeepSearching:
.8ae4		a9 b8		lda #$b8			lda 	#KWD_DATA 					; scan for instruction
.8ae6		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ae8		20 77 8e	jsr $8e77			jsr 	ScanForward
.8aeb		c9 b8		cmp #$b8			cmp 	#KWD_DATA 					; found data ?
.8aed		f0 16		beq $8b05			beq 	_CRHaveData 				; found it
.8aef		18		clc				clc
.8af0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8af2		65 30		adc $30				adc 	codePtr
.8af4		85 30		sta $30				sta 	codePtr
.8af6		90 02		bcc $8afa			bcc 	_CREExit
.8af8		e6 31		inc $31				inc 	codePtr+1 					; carry
.8afa						_CREExit:
.8afa		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8afc		b2 30		lda ($30)			lda 	(codePtr)
.8afe		d0 e4		bne $8ae4			bne 	_CRKeepSearching
.8b00						_CRNoData:
.8b00		a9 0b		lda #$0b		lda	#11
.8b02		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.8b05						_CRHaveData:
.8b05						_CRContinueData:
.8b05		a2 01		ldx #$01			ldx 	#1
.8b07		20 c5 9d	jsr $9dc5			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8b0a		ca		dex				dex
.8b0b		20 36 88	jsr $8836			jsr		AssignVariable 				; do the assignment
.8b0e		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8b11		b1 30		lda ($30),y			lda 	(codePtr),y
.8b13		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8b15		d0 04		bne $8b1b			bne 	_CRSwapBack
.8b17		c8		iny				iny 								; consume comma
.8b18		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8b1b						_CRSwapBack:
.8b1b		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs			; swap them back.
.8b1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8b20		c8		iny				iny
.8b21		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b23		f0 a8		beq $8acd			beq 	Command_Read 				; if so go round again.
.8b25		88		dey				dey 								; unpick get.
.8b26		60		rts				rts
.8b27						_CRSyntax:
.8b27		4c fe 9f	jmp $9ffe			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8b2a						RemCommand:
.8b2a		b1 30		lda ($30),y			lda 	(codePtr),y
.8b2c		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8b2e		d0 06		bne $8b36			bne 	_RMExit
.8b30		c8		iny				iny 								; point to offset
.8b31		98		tya				tya 								; A = offset position
.8b32		38		sec				sec 								; add size +1 hence SEC
.8b33		71 30		adc ($30),y			adc 	(codePtr),y
.8b35		a8		tay				tay 								; make current position.
.8b36						_RMExit:
.8b36		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8b37						Command_REPEAT:
.8b37		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8b39		20 4e af	jsr $af4e			jsr 	StackOpen
.8b3c		20 93 af	jsr $af93			jsr 	STKSaveCodePosition 		; save loop position
.8b3f		60		rts				rts
.8b40						Command_UNTIL:
.8b40		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8b42		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8b44		20 7b af	jsr $af7b			jsr 	StackCheckFrame
.8b47		a2 00		ldx #$00			ldx 	#0
.8b49		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber 				; work out the number
.8b4c		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; check if zero
.8b4f		f0 04		beq $8b55			beq 	_CULoopBack 				; if so keep looping
.8b51		20 6d af	jsr $af6d			jsr 	StackClose		 			; return
.8b54		60		rts				rts
.8b55						_CULoopBack:
.8b55		20 a4 af	jsr $afa4			jsr 	STKLoadCodePosition 		; loop back
.8b58		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8b59						Command_Restore:
.8b59		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs 			; swap code and data
.8b5c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b5e		85 30		sta $30				sta 	codePtr
.8b60		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b62		85 31		sta $31				sta 	codePtr+1
.8b64		20 70 8b	jsr $8b70			jsr 	SwapDataCodePtrs 			; put them back
.8b67		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8b69		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8b6c		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8b6f		60		rts				rts
.8b70						SwapDataCodePtrs:
.8b70		da		phx				phx
.8b71		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8b73						_SDCPLoop:
.8b73		b5 30		lda $30,x			lda 	safePtr,x
.8b75		48		pha				pha
.8b76		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8b79		95 30		sta $30,x			sta 	safePtr,x
.8b7b		68		pla				pla
.8b7c		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8b7f		ca		dex				dex
.8b80		10 f1		bpl $8b73			bpl 	_SDCPLoop
.8b82		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8b85		8c 1b 04	sty $041b			sty 	dataPointer+4
.8b88		a8		tay				tay
.8b89		fa		plx				plx
.8b8a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8b8b						EOLCommand:
.8b8b		18		clc				clc
.8b8c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b8e		65 30		adc $30				adc 	codePtr
.8b90		85 30		sta $30				sta 	codePtr
.8b92		90 02		bcc $8b96			bcc 	_CREExit
.8b94		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b96						_CREExit:
.8b96		80 0b		bra $8ba3			bra 	RunNewLine
.8b98						CommandRUN:
.8b98		20 7d 84	jsr $847d			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8b9b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b9d		85 30		sta $30				sta 	codePtr
.8b9f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ba1		85 31		sta $31				sta 	codePtr+1
.8ba3						RUNNewLine:
.8ba3		b2 30		lda ($30)			lda 	(codePtr)
.8ba5		f0 7b		beq $8c22			beq 	CRNoProgram         		; no then END.
.8ba7		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8ba9		9a		txs				txs
.8baa						RUNCodePointerLine:
.8baa		a0 02		ldy #$02			ldy 	#2 							; start of program
.8bac						_CRIncMainLoop:
.8bac		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8baf		d0 22		bne $8bd3			bne 	_CRNoBreakCheck
.8bb1		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8bb4		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8bb7		f0 64		beq $8c1d			beq 	_CRBreak
.8bb9		a5 01		lda $01				lda 	1 							; save I/O 0
.8bbb		48		pha				pha
.8bbc		64 01		stz $01				stz 	1 							; access I/O Page 0
.8bbe		38		sec				sec 								; calculate timer - LastTick
.8bbf		ad 59 d6	lda $d659			lda 	$D659
.8bc2		aa		tax				tax 								; saving timer in X
.8bc3		ed 5c 06	sbc $065c			sbc 	LastTick
.8bc6		c9 03		cmp #$03			cmp 	#3
.8bc8		90 06		bcc $8bd0			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8bca		8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.8bcd		20 ab 9e	jsr $9eab			jsr 	TickHandler 							; go do the code.
.8bd0						_NoFireTick:
.8bd0		68		pla				pla 								; restore I/O 0
.8bd1		85 01		sta $01				sta 	1
.8bd3						_CRNoBreakCheck:
.8bd3		c8		iny				iny									; next token
.8bd4						_CRMainLoop:
.8bd4		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8bd7		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd9		10 10		bpl $8beb			bpl 	_CRNotKeyword				; not a token.
.8bdb		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8bdd		b0 04		bcs $8be3			bcs 	_CRIsKeyword
.8bdf		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8be1		b0 34		bcs $8c17			bcs		_CRSyntaxError
.8be3						_CRIsKeyword:
.8be3		c8		iny				iny 								; consume command
.8be4		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8be5		aa		tax				tax 								; put in X for vector jump
.8be6		20 1a 8c	jsr $8c1a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8be9		80 e9		bra $8bd4			bra 	_CRMainLoop 				; and loop round
.8beb						_CRNotKeyword:
.8beb		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8bed		f0 bd		beq $8bac			beq 	_CRIncMainLoop
.8bef		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8bf1		90 05		bcc $8bf8			bcc 	_CRNotVariable
.8bf3						_CRGoLet:
.8bf3		20 fd 87	jsr $87fd			jsr 	LetCommand
.8bf6		80 dc		bra $8bd4			bra 	_CRMainLoop
.8bf8						_CRNotVariable:
.8bf8		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8bfa		f0 f7		beq $8bf3			beq 	_CRGoLet
.8bfc		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8bfe		f0 f3		beq $8bf3			beq 	_CRGoLet
.8c00		c9 21		cmp #$21			cmp 	#KWD_PLING
.8c02		f0 ef		beq $8bf3			beq 	_CRGoLet
.8c04		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8c06		f0 09		beq $8c11			beq 	_CRGoRem
.8c08		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8c0a		d0 0b		bne $8c17			bne 	_CRSyntaxError
.8c0c		20 59 82	jsr $8259			jsr 	LabelHere
.8c0f		80 c3		bra $8bd4			bra 	_CRMainLoop
.8c11						_CRGoRem:
.8c11		c8		iny				iny
.8c12		20 2a 8b	jsr $8b2a			jsr 	RemCommand
.8c15		80 bd		bra $8bd4			bra 	_CRMainLoop
.8c17						_CRSyntaxError:
.8c17		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.8c1a						_CRCallVector0:
.8c1a		7c b8 8c	jmp ($8cb8,x)			jmp 	(VectorSet0,x)
.8c1d						_CRBreak:
.8c1d		a9 01		lda #$01		lda	#1
.8c1f		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.8c22						CRNoProgram:
.8c22		4c a2 85	jmp $85a2			jmp 	EndCommand
.8c25						Shift1Command:
.8c25		b1 30		lda ($30),y			lda 	(codePtr),y
.8c27		c8		iny				iny
.8c28		0a		asl a				asl 	a
.8c29		aa		tax				tax
.8c2a		7c 6a 8d	jmp ($8d6a,x)			jmp 	(VectorSet1,x)
.8c2d						Shift2Command:
.8c2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2f		c8		iny				iny
.8c30		0a		asl a				asl 	a
.8c31		aa		tax				tax
.8c32		7c 98 8d	jmp ($8d98,x)			jmp 	(VectorSet2,x)
.8c35						Unused1:
.8c35						Unused2:
.8c35						Unused3:
.8c35						Unused4:
.8c35		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
>8c38								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8c38						VectorSetPunc:
>8c38		ed 91					.word	ShiftLeft                        ; $00 <<
>8c3a		d8 8f					.word	BinaryCompareLessEqual           ; $01 <=
>8c3c		ce 8f					.word	BinaryCompareNotEqual            ; $02 <>
>8c3e		fe 9f					.word	SyntaxError                      ; $03 !!3
>8c40		fe 9f					.word	SyntaxError                      ; $04 ><
>8c42		e2 8f					.word	BinaryCompareGreaterEqual        ; $05 >=
>8c44		f0 91					.word	ShiftRight                       ; $06 >>
>8c46		fe 9f					.word	SyntaxError                      ; $07 !!7
>8c48		fe 9f					.word	SyntaxError                      ; $08 !!8
>8c4a		fe 9f					.word	SyntaxError                      ; $09 !!9
>8c4c		fe 9f					.word	SyntaxError                      ; $0a !!10
>8c4e		fe 9f					.word	SyntaxError                      ; $0b !!11
>8c50		fe 9f					.word	SyntaxError                      ; $0c !!12
>8c52		fe 9f					.word	SyntaxError                      ; $0d !!13
>8c54		fe 9f					.word	SyntaxError                      ; $0e !!14
>8c56		fe 9f					.word	SyntaxError                      ; $0f !!15
>8c58		fe 9f					.word	SyntaxError                      ; $10 @
>8c5a		fe 9f					.word	SyntaxError                      ; $11 !!17
>8c5c		fe 9f					.word	SyntaxError                      ; $12 !!18
>8c5e		fe 9f					.word	SyntaxError                      ; $13 [
>8c60		99 90					.word	IntegerDivide                    ; $14 \
>8c62		fe 9f					.word	SyntaxError                      ; $15 ]
>8c64		2b 93					.word	EorInteger                       ; $16 ^
>8c66		fe 9f					.word	SyntaxError                      ; $17 _
>8c68		fe 9f					.word	SyntaxError                      ; $18 `
>8c6a		fe 9f					.word	SyntaxError                      ; $19 !!25
>8c6c		fe 9f					.word	SyntaxError                      ; $1a !!26
>8c6e		fe 9f					.word	SyntaxError                      ; $1b {
>8c70		f6 92					.word	OraInteger                       ; $1c |
>8c72		fe 9f					.word	SyntaxError                      ; $1d }
>8c74		fe 9f					.word	SyntaxError                      ; $1e ~
>8c76		fe 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8c78		fe 9f					.word	SyntaxError                      ; $20
>8c7a		60 93					.word	WordIndirect                     ; $21 !
>8c7c		fe 9f					.word	SyntaxError                      ; $22 "
>8c7e		fe 9f					.word	SyntaxError                      ; $23 #
>8c80		fe 9f					.word	SyntaxError                      ; $24 $
>8c82		da 90					.word	IntegerModulus                   ; $25 %
>8c84		c1 92					.word	AndInteger                       ; $26 &
>8c86		fe 9f					.word	SyntaxError                      ; $27 '
>8c88		fe 9f					.word	SyntaxError                      ; $28 (
>8c8a		fe 9f					.word	SyntaxError                      ; $29 )
>8c8c		48 91					.word	MulInteger                       ; $2a *
>8c8e		63 92					.word	AddInteger                       ; $2b +
>8c90		fe 9f					.word	SyntaxError                      ; $2c ,
>8c92		9c 92					.word	SubInteger                       ; $2d -
>8c94		fe 9f					.word	SyntaxError                      ; $2e .
>8c96		1a 95					.word	FDivideCommand                   ; $2f /
>8c98		fe 9f					.word	SyntaxError                      ; $30 0
>8c9a		fe 9f					.word	SyntaxError                      ; $31 1
>8c9c		fe 9f					.word	SyntaxError                      ; $32 2
>8c9e		fe 9f					.word	SyntaxError                      ; $33 3
>8ca0		fe 9f					.word	SyntaxError                      ; $34 4
>8ca2		fe 9f					.word	SyntaxError                      ; $35 5
>8ca4		fe 9f					.word	SyntaxError                      ; $36 6
>8ca6		fe 9f					.word	SyntaxError                      ; $37 7
>8ca8		fe 9f					.word	SyntaxError                      ; $38 8
>8caa		fe 9f					.word	SyntaxError                      ; $39 9
>8cac		fe 9f					.word	SyntaxError                      ; $3a :
>8cae		fe 9f					.word	SyntaxError                      ; $3b ;
>8cb0		ba 8f					.word	BinaryCompareLess                ; $3c <
>8cb2		b0 8f					.word	BinaryCompareEqual               ; $3d =
>8cb4		c4 8f					.word	BinaryCompareGreater             ; $3e >
>8cb6		82 93					.word	ByteIndirect                     ; $3f ?
.8cb8						VectorSet0:
>8cb8		8b 8b					.word	EOLCommand                       ; $80 !0:EOF
>8cba		25 8c					.word	Shift1Command                    ; $81 !1:SH1
>8cbc		2d 8c					.word	Shift2Command                    ; $82 !2:SH2
>8cbe		04 9a					.word	AbsUnary                         ; $83 ABS(
>8cc0		12 9a					.word	AllocUnary                       ; $84 ALLOC(
>8cc2		82 9a					.word	AscUnary                         ; $85 ASC(
>8cc4		66 9c					.word	ChrUnary                         ; $86 CHR$(
>8cc6		70 a4					.word	UnaryEvent                       ; $87 EVENT(
>8cc8		ac 8f					.word	UnaryFalse                       ; $88 FALSE
>8cca		8f 9a					.word	FracUnary                        ; $89 FRAC(
>8ccc		fe 9f					.word	SyntaxError                      ; $8a GETDATE$(
>8cce		fe 9f					.word	SyntaxError                      ; $8b GETTIME$(
>8cd0		fa a3					.word	UnaryHit                         ; $8c HIT(
>8cd2		a4 9a					.word	IntUnary                         ; $8d INT(
>8cd4		25 9c					.word	IsValUnary                       ; $8e ISVAL(
>8cd6		f4 a4					.word	UnaryJoyB                        ; $8f JOYB(
>8cd8		cd a4					.word	UnaryJoyX                        ; $90 JOYX(
>8cda		d0 a4					.word	UnaryJoyY                        ; $91 JOYY(
>8cdc		39 9d					.word	Unary_Left                       ; $92 LEFT$(
>8cde		b5 9a					.word	LenUnary                         ; $93 LEN(
>8ce0		d3 9a					.word	Unary_Max                        ; $94 MAX(
>8ce2		5b 9d					.word	Unary_Mid                        ; $95 MID$(
>8ce4		cf 9a					.word	Unary_Min                        ; $96 MIN(
>8ce6		1e 9b					.word	Unary_Not                        ; $97 NOT(
>8ce8		31 9b					.word	PeekByteUnary                    ; $98 PEEK(
>8cea		3d 9b					.word	PeekDUnary                       ; $99 PEEKD(
>8cec		39 9b					.word	PeekLUnary                       ; $9a PEEKL(
>8cee		35 9b					.word	PeekWUnary                       ; $9b PEEKW(
>8cf0		ab ae					.word	UnaryPlaying                     ; $9c PLAYING(
>8cf2		6a 9b					.word	Unary_Random                     ; $9d RANDOM(
>8cf4		46 9d					.word	Unary_Right                      ; $9e RIGHT$(
>8cf6		87 9b					.word	Unary_Rnd                        ; $9f RND(
>8cf8		fd 9b					.word	SgnUnary                         ; $a0 SGN(
>8cfa		78 9c					.word	SpcUnary                         ; $a1 SPC(
>8cfc		93 9c					.word	Unary_Str                        ; $a2 STR$(
>8cfe		06 a5					.word	UnaryTimer                       ; $a3 TIMER(
>8d00		a1 8f					.word	UnaryTrue                        ; $a4 TRUE
>8d02		1b 9c					.word	ValUnary                         ; $a5 VAL(
>8d04		a5 85					.word	ForCommand                       ; $a6 FOR
>8d06		e8 86					.word	IfCommand                        ; $a7 IF
>8d08		35 8c					.word	Unused1                          ; $a8 PROC
>8d0a		37 8b					.word	Command_REPEAT                   ; $a9 REPEAT
>8d0c		ed 8e					.word	Command_WHILE                    ; $aa WHILE
>8d0e		11 87					.word	EndIf                            ; $ab ENDIF
>8d10		bf 8a					.word	Command_ENDPROC                  ; $ac ENDPROC
>8d12		57 86					.word	NextCommand                      ; $ad NEXT
>8d14		35 8c					.word	Unused4                          ; $ae THEN
>8d16		40 8b					.word	Command_UNTIL                    ; $af UNTIL
>8d18		0e 8f					.word	Command_WEND                     ; $b0 WEND
>8d1a		fe 9f					.word	SyntaxError                      ; $b1 BY
>8d1c		48 84					.word	CallCommand                      ; $b2 CALL
>8d1e		ae a1					.word	CircleCommand                    ; $b3 CIRCLE
>8d20		7d 84					.word	ClearCommand                     ; $b4 CLEAR
>8d22		d5 84					.word	ClearScreen                      ; $b5 CLS
>8d24		fe 9f					.word	SyntaxError                      ; $b6 COLOR
>8d26		fe 9f					.word	SyntaxError                      ; $b7 COLOUR
>8d28		dd 84					.word	Command_Data                     ; $b8 DATA
>8d2a		e5 84					.word	DimCommand                       ; $b9 DIM
>8d2c		35 8c					.word	Unused3                          ; $ba DOWNTO
>8d2e		0a 87					.word	ElseCode                         ; $bb ELSE
>8d30		fe 9f					.word	SyntaxError                      ; $bc FROM
>8d32		cd a3					.word	GfxCommand                       ; $bd GFX
>8d34		b0 86					.word	Command_GOSUB                    ; $be GOSUB
>8d36		ce 86					.word	GotoCommand                      ; $bf GOTO
>8d38		fe 9f					.word	SyntaxError                      ; $c0 HERE
>8d3a		d7 a1					.word	ImageCommand                     ; $c1 IMAGE
>8d3c		12 87					.word	Command_Input                    ; $c2 INPUT
>8d3e		fd 87					.word	LetCommand                       ; $c3 LET
>8d40		29 a2					.word	LineCommand                      ; $c4 LINE
>8d42		53 89					.word	Command_LOCAL                    ; $c5 LOCAL
>8d44		fe 9f					.word	SyntaxError                      ; $c6 OFF
>8d46		fe 9f					.word	SyntaxError                      ; $c7 ON
>8d48		fe 9f					.word	SyntaxError                      ; $c8 OUTLINE
>8d4a		1e a4					.word	PaletteCommand                   ; $c9 PALETTE
>8d4c		22 a2					.word	PlotCommand                      ; $ca PLOT
>8d4e		24 8a					.word	PokeBCommand                     ; $cb POKE
>8d50		30 8a					.word	PokeDCommand                     ; $cc POKED
>8d52		2c 8a					.word	PokeLCommand                     ; $cd POKEL
>8d54		28 8a					.word	PokeWCommand                     ; $ce POKEW
>8d56		19 87					.word	Command_Print                    ; $cf PRINT
>8d58		cd 8a					.word	Command_Read                     ; $d0 READ
>8d5a		aa a1					.word	RectangleCommand                 ; $d1 RECT
>8d5c		2a 8b					.word	RemCommand                       ; $d2 REM
>8d5e		c0 86					.word	Command_RETURN                   ; $d3 RETURN
>8d60		fe 9f					.word	SyntaxError                      ; $d4 SOLID
>8d62		c7 ae					.word	SoundCommand                     ; $d5 SOUND
>8d64		b9 a1					.word	SpriteCommand                    ; $d6 SPRITE
>8d66		f3 a1					.word	TextCommand                      ; $d7 TEXT
>8d68		35 8c					.word	Unused2                          ; $d8 TO
.8d6a						VectorSet1:
>8d6a		fe 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d6c		fe 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d6e		fe 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d70		1c 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8d72		38 84					.word	AssertCommand                    ; $84 ASSERT
>8d74		6d a3					.word	BitmapCtrl                       ; $85 BITMAP
>8d76		a2 85					.word	EndCommand                       ; $86 END
>8d78		7f ae					.word	Explode                          ; $87 EXPLODE
>8d7a		fe 9f					.word	SyntaxError                      ; $88 GO
>8d7c		4d 88					.word	Command_List                     ; $89 LIST
>8d7e		fe 9f					.word	SyntaxError                      ; $8a LOAD
>8d80		14 8a					.word	NewCommand                       ; $8b NEW
>8d82		5b ae					.word	PingCommand                      ; $8c PING
>8d84		59 8b					.word	Command_Restore                  ; $8d RESTORE
>8d86		98 8b					.word	CommandRUN                       ; $8e RUN
>8d88		fe 9f					.word	SyntaxError                      ; $8f SETDATE
>8d8a		fe 9f					.word	SyntaxError                      ; $90 SETTIME
>8d8c		73 ae					.word	ShootCommand                     ; $91 SHOOT
>8d8e		b2 a3					.word	SpritesCtrl                      ; $92 SPRITES
>8d90		20 8e					.word	StopCommand                      ; $93 STOP
>8d92		67 a4					.word	XGoCommand                       ; $94 XGO
>8d94		5e a4					.word	XLoadCommand                     ; $95 XLOAD
>8d96		67 ae					.word	ZapCommand                       ; $96 ZAP
.8d98						VectorSet2:
>8d98		fe 9f					.word	SyntaxError                      ; $80 !0:EOF
>8d9a		fe 9f					.word	SyntaxError                      ; $81 !1:SH1
>8d9c		fe 9f					.word	SyntaxError                      ; $82 !2:SH2
>8d9e		bd 9e					.word	Assemble_adc                     ; $83 ADC
>8da0		b5 9e					.word	Assemble_and                     ; $84 AND
>8da2		d1 9e					.word	Assemble_asl                     ; $85 ASL
>8da4		3b 9f					.word	Assemble_bcc                     ; $86 BCC
>8da6		3f 9f					.word	Assemble_bcs                     ; $87 BCS
>8da8		47 9f					.word	Assemble_beq                     ; $88 BEQ
>8daa		fe 9e					.word	Assemble_bit                     ; $89 BIT
>8dac		2f 9f					.word	Assemble_bmi                     ; $8a BMI
>8dae		43 9f					.word	Assemble_bne                     ; $8b BNE
>8db0		2b 9f					.word	Assemble_bpl                     ; $8c BPL
>8db2		4b 9f					.word	Assemble_bra                     ; $8d BRA
>8db4		4f 9f					.word	Assemble_brk                     ; $8e BRK
>8db6		33 9f					.word	Assemble_bvc                     ; $8f BVC
>8db8		37 9f					.word	Assemble_bvs                     ; $90 BVS
>8dba		57 9f					.word	Assemble_clc                     ; $91 CLC
>8dbc		ab 9f					.word	Assemble_cld                     ; $92 CLD
>8dbe		6b 9f					.word	Assemble_cli                     ; $93 CLI
>8dc0		9b 9f					.word	Assemble_clv                     ; $94 CLV
>8dc2		c9 9e					.word	Assemble_cmp                     ; $95 CMP
>8dc4		12 9f					.word	Assemble_cpx                     ; $96 CPX
>8dc6		0d 9f					.word	Assemble_cpy                     ; $97 CPY
>8dc8		ef 9e					.word	Assemble_dec                     ; $98 DEC
>8dca		a7 9f					.word	Assemble_dex                     ; $99 DEX
>8dcc		83 9f					.word	Assemble_dey                     ; $9a DEY
>8dce		b9 9e					.word	Assemble_eor                     ; $9b EOR
>8dd0		f4 9e					.word	Assemble_inc                     ; $9c INC
>8dd2		b7 9f					.word	Assemble_inx                     ; $9d INX
>8dd4		a3 9f					.word	Assemble_iny                     ; $9e INY
>8dd6		26 9f					.word	Assemble_jmp                     ; $9f JMP
>8dd8		21 9f					.word	Assemble_jsr                     ; $a0 JSR
>8dda		c5 9e					.word	Assemble_lda                     ; $a1 LDA
>8ddc		ea 9e					.word	Assemble_ldx                     ; $a2 LDX
>8dde		08 9f					.word	Assemble_ldy                     ; $a3 LDY
>8de0		db 9e					.word	Assemble_lsr                     ; $a4 LSR
>8de2		bb 9f					.word	Assemble_nop                     ; $a5 NOP
>8de4		b1 9e					.word	Assemble_ora                     ; $a6 ORA
>8de6		67 9f					.word	Assemble_pha                     ; $a7 PHA
>8de8		53 9f					.word	Assemble_php                     ; $a8 PHP
>8dea		af 9f					.word	Assemble_phx                     ; $a9 PHX
>8dec		6f 9f					.word	Assemble_phy                     ; $aa PHY
>8dee		77 9f					.word	Assemble_pla                     ; $ab PLA
>8df0		5b 9f					.word	Assemble_plp                     ; $ac PLP
>8df2		c3 9f					.word	Assemble_plx                     ; $ad PLX
>8df4		7f 9f					.word	Assemble_ply                     ; $ae PLY
>8df6		d6 9e					.word	Assemble_rol                     ; $af ROL
>8df8		e0 9e					.word	Assemble_ror                     ; $b0 ROR
>8dfa		63 9f					.word	Assemble_rti                     ; $b1 RTI
>8dfc		73 9f					.word	Assemble_rts                     ; $b2 RTS
>8dfe		cd 9e					.word	Assemble_sbc                     ; $b3 SBC
>8e00		5f 9f					.word	Assemble_sec                     ; $b4 SEC
>8e02		bf 9f					.word	Assemble_sed                     ; $b5 SED
>8e04		7b 9f					.word	Assemble_sei                     ; $b6 SEI
>8e06		c1 9e					.word	Assemble_sta                     ; $b7 STA
>8e08		b3 9f					.word	Assemble_stp                     ; $b8 STP
>8e0a		e5 9e					.word	Assemble_stx                     ; $b9 STX
>8e0c		03 9f					.word	Assemble_sty                     ; $ba STY
>8e0e		f9 9e					.word	Assemble_stz                     ; $bb STZ
>8e10		97 9f					.word	Assemble_tax                     ; $bc TAX
>8e12		93 9f					.word	Assemble_tay                     ; $bd TAY
>8e14		1c 9f					.word	Assemble_trb                     ; $be TRB
>8e16		17 9f					.word	Assemble_tsb                     ; $bf TSB
>8e18		9f 9f					.word	Assemble_tsx                     ; $c0 TSX
>8e1a		87 9f					.word	Assemble_txa                     ; $c1 TXA
>8e1c		8f 9f					.word	Assemble_txs                     ; $c2 TXS
>8e1e		8b 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8e20						StopCommand:
.8e20		a9 08		lda #$08		lda	#8
.8e22		4c 35 8f	jmp $8f35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8e25						ProcedureScan:
.8e25		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e27		85 30		sta $30				sta 	codePtr
.8e29		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e2b		85 31		sta $31				sta 	codePtr+1
.8e2d						_PSLoop:
.8e2d		b2 30		lda ($30)			lda 	(codePtr)
.8e2f		f0 42		beq $8e73			beq 	_PSExit
.8e31		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8e33		b1 30		lda ($30),y			lda 	(codePtr),y
.8e35		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8e37		d0 2d		bne $8e66			bne 	_PSNext
.8e39		c8		iny				iny 								; get the address of the record to zTemp0 and
.8e3a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e3c		29 c0		and #$c0			and 	#$C0
.8e3e		c9 40		cmp #$40			cmp 	#$40
.8e40		d0 32		bne $8e74			bne 	_PSSyntax
.8e42		b1 30		lda ($30),y			lda 	(codePtr),y
.8e44		18		clc				clc
.8e45		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e47		85 37		sta $37				sta 	zTemp0+1
.8e49		c8		iny				iny 								; LSB
.8e4a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e4c		85 36		sta $36				sta 	zTemp0
.8e4e		c8		iny				iny 								; character after variable call.
.8e4f		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8e50		a0 07		ldy #$07			ldy 	#7
.8e52		91 36		sta ($36),y			sta 	(zTemp0),y
.8e54		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8e56		a0 02		ldy #$02			ldy 	#2
.8e58		91 36		sta ($36),y			sta 	(zTemp0),y
.8e5a		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8e5c						_PSCopy:
.8e5c		b5 30		lda $30,x			lda 	safePtr,x
.8e5e		c8		iny				iny
.8e5f		91 36		sta ($36),y			sta 	(zTemp0),y
.8e61		e8		inx				inx
.8e62		e0 04		cpx #$04			cpx 	#4
.8e64		d0 f6		bne $8e5c			bne 	_PSCopy
.8e66						_PSNext:
.8e66		18		clc				clc
.8e67		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8e69		65 30		adc $30				adc 	codePtr
.8e6b		85 30		sta $30				sta 	codePtr
.8e6d		90 02		bcc $8e71			bcc 	_CREExit
.8e6f		e6 31		inc $31				inc 	codePtr+1 					; carry
.8e71						_CREExit:
.8e71		80 ba		bra $8e2d			bra 	_PSLoop
.8e73						_PSExit:
.8e73		60		rts				rts
.8e74						_PSSyntax:
.8e74		4c fe 9f	jmp $9ffe			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8e77						ScanForward:
.8e77		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8e79		86 37		stx $37				stx 	zTemp0+1
.8e7b		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8e7d						_ScanLoop:
.8e7d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e7f		c8		iny				iny
.8e80		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8e82		d0 0e		bne $8e92			bne 	_ScanGoNext
.8e84		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8e86		f0 04		beq $8e8c			beq 	_ScanMatch
.8e88		c5 37		cmp $37				cmp 	zTemp0+1
.8e8a		d0 06		bne $8e92			bne 	_ScanGoNext
.8e8c						_ScanMatch:
.8e8c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8e8e		d0 01		bne $8e91			bne 	_ScanNotEndEOL
.8e90		88		dey				dey
.8e91						_ScanNotEndEOL:
.8e91		60		rts				rts
.8e92						_ScanGoNext:
.8e92		20 97 8e	jsr $8e97			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8e95		80 e6		bra $8e7d			bra 	_ScanLoop
.8e97						ScanForwardOne:
.8e97		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8e99		90 3e		bcc $8ed9			bcc 	_SFWExit
.8e9b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8e9d		90 18		bcc $8eb7			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8e9f		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8ea1		b0 2f		bcs $8ed2			bcs 	_ScanSkipData
.8ea3		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8ea5		90 32		bcc $8ed9			bcc 	_SFWExit 					; if not, ordinary keywords.
.8ea7		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.8ea9		b0 2e		bcs $8ed9			bcs 	_SFWExit
.8eab		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ead		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8eaf		b0 28		bcs $8ed9			bcs 	_SFWExit
.8eb1		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8eb3		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8eb5		80 22		bra $8ed9			bra 	_SFWExit
.8eb7						_ScanSkipOne:
.8eb7		c8		iny				iny 								; consume the extra one.
.8eb8		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8eba		d0 1d		bne $8ed9			bne 	_SFWExit
.8ebc		18		clc				clc
.8ebd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ebf		65 30		adc $30				adc 	codePtr
.8ec1		85 30		sta $30				sta 	codePtr
.8ec3		90 02		bcc $8ec7			bcc 	_CREExit
.8ec5		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ec7						_CREExit:
.8ec7		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8ec9		b2 30		lda ($30)			lda 	(codePtr)
.8ecb		d0 0c		bne $8ed9			bne 	_SFWExit 					; if not zero, more to scan
.8ecd		a9 13		lda #$13		lda	#19
.8ecf		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.8ed2						_ScanSkipData:
.8ed2		88		dey				dey 								; point at data token
.8ed3		c8		iny				iny 								; point to offset
.8ed4		98		tya				tya 								; A = offset position
.8ed5		38		sec				sec 								; add size +1 hence SEC
.8ed6		71 30		adc ($30),y			adc 	(codePtr),y
.8ed8		a8		tay				tay 								; make current position.
.8ed9						_SFWExit:
.8ed9		60		rts				rts
.8eda						ScanGetCurrentLineStep:
.8eda		64 38		stz $38				stz 	zTemp1
.8edc		a0 03		ldy #$03			ldy 	#3
.8ede						_SGCLSLoop:
.8ede		b1 30		lda ($30),y			lda 	(codePtr),y
.8ee0		c8		iny				iny
.8ee1		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ee3		f0 05		beq $8eea			beq 	_SGCLSExit
.8ee5		20 97 8e	jsr $8e97			jsr 	ScanForwardOne
.8ee8		80 f4		bra $8ede			bra 	_SGCLSLoop
.8eea						_SGCLSExit:
.8eea		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8eec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8eed						Command_WHILE:
.8eed		5a		phy				phy 								; save position of the test
.8eee		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8ef0		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber
.8ef3		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; check if zero
.8ef6		f0 0e		beq $8f06			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8ef8		98		tya				tya 								; position *after* test.
.8ef9		7a		ply				ply 								; restore position before test, at WHILE
.8efa		88		dey				dey 								; so we execute the WHILE command again.
.8efb		48		pha				pha 								; push after test on the stack
.8efc		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8efe		20 4e af	jsr $af4e			jsr 	StackOpen
.8f01		20 93 af	jsr $af93			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8f04		7a		ply				ply 								; restore the position *after* the test
.8f05		60		rts				rts
.8f06						_WHExitLoop:
.8f06		68		pla				pla 								; throw post loop position
.8f07		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.8f09		aa		tax				tax
.8f0a		20 77 8e	jsr $8e77			jsr 	ScanForward
.8f0d		60		rts				rts
.8f0e						Command_WEND:
.8f0e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8f10		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8f12		20 7b af	jsr $af7b			jsr 	StackCheckFrame
.8f15		20 a4 af	jsr $afa4			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8f18		20 6d af	jsr $af6d			jsr 	StackClose		 			; erase the frame
.8f1b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8f1c						CheckRightBracket:
.8f1c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f1e		c8		iny				iny
.8f1f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8f21		d0 0f		bne $8f32			bne 	CNAFail
.8f23		60		rts				rts
.8f24						CheckComma:
.8f24		b1 30		lda ($30),y			lda 	(codePtr),y
.8f26		c8		iny				iny
.8f27		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8f29		d0 07		bne $8f32			bne 	CNAFail
.8f2b		60		rts				rts
.8f2c						CheckNextA:
.8f2c		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8f2e		d0 02		bne $8f32			bne 	CNAFail
.8f30		c8		iny				iny 								; skip character
.8f31		60		rts				rts 								; and exit
.8f32						CNAFail:
.8f32		4c fe 9f	jmp $9ffe			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8f35						ErrorHandler:
.8f35		a8		tay				tay 								; find the error text
.8f36		f0 49		beq $8f81			beq 	_EHEnd
.8f38		a2 00		ldx #$00			ldx 	#0
.8f3a		a9 17		lda #$17			lda 	#((ErrorText) & $FF)
.8f3c		85 36		sta $36				sta 	0+zTemp0
.8f3e		a9 a0		lda #$a0			lda 	#((ErrorText) >> 8)
.8f40		85 37		sta $37				sta 	1+zTemp0
.8f42						_EHFind:
.8f42		88		dey				dey 								; keep looking through text
.8f43		f0 0e		beq $8f53			beq 	_EHFound
.8f45						_EHFindZero:
.8f45		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8f47		e6 36		inc $36				inc 	zTemp0
.8f49		d0 02		bne $8f4d			bne 	_EHFNoCarry
.8f4b		e6 37		inc $37				inc 	zTemp0+1
.8f4d						_EHFNoCarry:
.8f4d		c9 00		cmp #$00			cmp 	#0
.8f4f		d0 f4		bne $8f45			bne 	_EHFindZero
.8f51		80 ef		bra $8f42			bra 	_EHFind
.8f53						_EHFound:
.8f53		a5 36		lda $36				lda 	zTemp0 						; print message
.8f55		a6 37		ldx $37				ldx 	zTemp0+1
.8f57		20 8e 8f	jsr $8f8e			jsr 	PrintStringXA
.8f5a		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.8f5c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f5e		d0 05		bne $8f65			bne 	_EHAtMsg
.8f60		c8		iny				iny
.8f61		b1 30		lda ($30),y			lda 	(codePtr),y
.8f63		f0 17		beq $8f7c			beq 	_EHCREnd
.8f65						_EHAtMsg:
.8f65		a2 8f		ldx #$8f			ldx 	#_AtMsg >> 8 				; print " at "
.8f67		a9 84		lda #$84			lda 	#_AtMsg & $FF
.8f69		20 8e 8f	jsr $8f8e			jsr 	PrintStringXA
.8f6c		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8f6e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f70		48		pha				pha
.8f71		c8		iny				iny
.8f72		b1 30		lda ($30),y			lda 	(codePtr),y
.8f74		aa		tax				tax
.8f75		68		pla				pla
.8f76		20 a4 93	jsr $93a4			jsr 	ConvertInt16 				; convert XA to string
.8f79		20 8e 8f	jsr $8f8e			jsr 	PrintStringXA 				; and print it.
.8f7c						_EHCREnd:
.8f7c		a9 0d		lda #$0d			lda 	#13 						; new line
.8f7e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f81						_EHEnd:
.8f81		4c e7 83	jmp $83e7			jmp 	WarmStart
>8f84		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8f8c		20 00
.8f8e						PrintStringXA:
.8f8e		5a		phy				phy
.8f8f		86 37		stx $37				stx 	zTemp0+1
.8f91		85 36		sta $36				sta 	zTemp0
.8f93		a0 00		ldy #$00			ldy 	#0
.8f95						_PSXALoop:
.8f95		b1 36		lda ($36),y			lda 	(zTemp0),y
.8f97		f0 06		beq $8f9f			beq 	_PSXAExit
.8f99		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8f9c		c8		iny				iny
.8f9d		80 f6		bra $8f95			bra 	_PSXALoop
.8f9f						_PSXAExit:
.8f9f		7a		ply				ply
.8fa0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8fa1						UnaryTrue:
.8fa1		fa		plx				plx
.8fa2						ReturnTrue:
.8fa2		a9 01		lda #$01			lda 	#1  						; set to 1
.8fa4		20 82 9e	jsr $9e82			jsr 	NSMSetByte
.8fa7		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8fa9		95 50		sta $50,x			sta 	NSStatus,x
.8fab		60		rts				rts
.8fac						UnaryFalse:
.8fac		fa		plx				plx
.8fad						ReturnFalse:
.8fad		4c 80 9e	jmp $9e80			jmp 	NSMSetZero 					; set it all to zero
.8fb0						BinaryCompareEqual:
.8fb0		fa		plx				plx
.8fb1		20 ec 8f	jsr $8fec			jsr 	CompareBaseCode
.8fb4		c9 00		cmp #$00			cmp 	#0
.8fb6		f0 ea		beq $8fa2			beq 	ReturnTrue
.8fb8		80 f3		bra $8fad			bra 	ReturnFalse
.8fba						BinaryCompareLess:
.8fba		fa		plx				plx
.8fbb		20 ec 8f	jsr $8fec			jsr 	CompareBaseCode
.8fbe		c9 ff		cmp #$ff			cmp 	#$FF
.8fc0		f0 e0		beq $8fa2			beq 	ReturnTrue
.8fc2		80 e9		bra $8fad			bra 	ReturnFalse
.8fc4						BinaryCompareGreater:
.8fc4		fa		plx				plx
.8fc5		20 ec 8f	jsr $8fec			jsr 	CompareBaseCode
.8fc8		c9 01		cmp #$01			cmp 	#1
.8fca		f0 d6		beq $8fa2			beq 	ReturnTrue
.8fcc		80 df		bra $8fad			bra 	ReturnFalse
.8fce						BinaryCompareNotEqual:
.8fce		fa		plx				plx
.8fcf		20 ec 8f	jsr $8fec			jsr 	CompareBaseCode
.8fd2		c9 00		cmp #$00			cmp 	#0
.8fd4		d0 cc		bne $8fa2			bne 	ReturnTrue
.8fd6		80 d5		bra $8fad			bra 	ReturnFalse
.8fd8						BinaryCompareLessEqual:
.8fd8		fa		plx				plx
.8fd9		20 ec 8f	jsr $8fec			jsr 	CompareBaseCode
.8fdc		c9 01		cmp #$01			cmp 	#1
.8fde		d0 c2		bne $8fa2			bne 	ReturnTrue
.8fe0		80 cb		bra $8fad			bra 	ReturnFalse
.8fe2						BinaryCompareGreaterEqual:
.8fe2		fa		plx				plx
.8fe3		20 ec 8f	jsr $8fec			jsr 	CompareBaseCode
.8fe6		c9 ff		cmp #$ff			cmp 	#$FF
.8fe8		d0 b8		bne $8fa2			bne 	ReturnTrue
.8fea		80 c1		bra $8fad			bra 	ReturnFalse
.8fec						CompareBaseCode:
.8fec		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; make both values if references.
.8fef		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.8ff1		15 51		ora $51,x			ora 	NSStatus+1,x
.8ff3		29 10		and #$10			and 	#NSTString
.8ff5		d0 37		bne $902e			bne 	_CBCString 					; if so do string code, which will check if both.
.8ff7		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.8ff9		15 79		ora $79,x			ora 	NSExponent+1,x
.8ffb		d0 34		bne $9031			bne 	_CBCFloat
.8ffd		b5 50		lda $50,x			lda 	NSStatus,x
.8fff		15 51		ora $51,x			ora 	NSStatus+1,x
.9001		29 08		and #$08			and 	#NSTFloat
.9003		d0 2c		bne $9031			bne 	_CBCFloat
.9005		20 34 90	jsr $9034			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9008		e8		inx				inx
.9009		20 34 90	jsr $9034			jsr 	CompareFixMinusZero
.900c		ca		dex				dex
.900d		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.900f		55 51		eor $51,x			eor 	NSStatus+1,x
.9011		10 0a		bpl $901d			bpl 	_CDCSameSign
.9013		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9015		30 14		bmi $902b			bmi 	_CBCLess 					; return $FF
.9017						_CBCGreater:
.9017		a9 01		lda #$01			lda 	#1
.9019		60		rts				rts
.901a						_CBCEqual:
.901a		a9 00		lda #$00			lda 	#0
.901c		60		rts				rts
.901d						_CDCSameSign:
.901d		20 49 92	jsr $9249			jsr 	SubTopTwoStack 				; unsigned subtract
.9020		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; or the mantissa together
.9023		f0 f5		beq $901a			beq 	_CBCEqual 					; -0 == 0
.9025		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9027		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9029		10 ec		bpl $9017			bpl 	_CBCGreater
.902b						_CBCLess:
.902b		a9 ff		lda #$ff			lda 	#$FF
.902d		60		rts				rts
.902e						_CBCString:
.902e		4c ba 91	jmp $91ba			jmp 	CompareStrings
.9031						_CBCFloat:
.9031		4c 04 95	jmp $9504			jmp 	CompareFloat
.9034						CompareFixMinusZero:
.9034		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero
.9037		d0 02		bne $903b			bne 	_CFXMZNotZero
.9039		74 50		stz $50,x			stz 	NSStatus,x
.903b						_CFXMZNotZero:
.903b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.903c						StringConcat:
.903c		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.903e		35 51		and $51,x			and 	NSStatus+1,x
.9040		29 18		and #$18			and 	#NSBTypeMask
.9042		c9 10		cmp #$10			cmp 	#NSTString
.9044		d0 50		bne $9096			bne		_SCType
.9046		64 38		stz $38				stz 	zTemp1 						; counting total length
.9048		e8		inx				inx
.9049		20 67 90	jsr $9067			jsr 	_SCSetupZ0 					; setup for second
.904c		20 70 90	jsr $9070			jsr 	_SCLengthZ0 				; length for second
.904f		ca		dex				dex
.9050		20 67 90	jsr $9067			jsr 	_SCSetupZ0 					; setup for first
.9053		20 70 90	jsr $9070			jsr 	_SCLengthZ0 				; length for first
.9056		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9058		20 3e b0	jsr $b03e			jsr 	StringTempAllocate
.905b		20 87 90	jsr $9087			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.905e		e8		inx				inx
.905f		20 67 90	jsr $9067			jsr 	_SCSetupZ0 					; copy second out
.9062		20 87 90	jsr $9087			jsr 	_SCCopy
.9065		ca		dex				dex
.9066		60		rts				rts
.9067						_SCSetupZ0:
.9067		b5 58		lda $58,x			lda 	NSMantissa0,x
.9069		85 36		sta $36				sta 	zTemp0
.906b		b5 60		lda $60,x			lda 	NSMantissa1,x
.906d		85 37		sta $37				sta 	zTemp0+1
.906f		60		rts				rts
.9070						_SCLengthZ0:
.9070		5a		phy				phy
.9071		a0 00		ldy #$00			ldy 	#0
.9073						_SCLenLoop:
.9073		b1 36		lda ($36),y			lda 	(zTemp0),y
.9075		f0 0e		beq $9085			beq 	_SCLExit
.9077		c8		iny				iny
.9078		e6 38		inc $38				inc 	zTemp1
.907a		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.907c		c9 fd		cmp #$fd			cmp 	#253
.907e		d0 f3		bne $9073			bne		_SCLenLoop
.9080		a9 09		lda #$09		lda	#9
.9082		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.9085						_SCLExit:
.9085		7a		ply				ply
.9086		60		rts				rts
.9087						_SCCopy:
.9087		5a		phy				phy
.9088		a0 00		ldy #$00			ldy 	#0
.908a						_SCCopyLoop:
.908a		b1 36		lda ($36),y			lda 	(zTemp0),y
.908c		f0 06		beq $9094			beq 	_SCCExit
.908e		20 77 b0	jsr $b077			jsr 	StringTempWrite
.9091		c8		iny				iny
.9092		80 f6		bra $908a			bra 	_SCCopyLoop
.9094						_SCCExit:
.9094		7a		ply				ply
.9095		60		rts				rts
.9096						_SCType:
.9096		4c 08 a0	jmp $a008			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9099						IntegerDivide:
.9099		fa		plx				plx
.909a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.909c		15 51		ora $51,x			ora 	NSStatus+1,x
.909e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.909f		0a		asl a				asl 	a
.90a0		10 05		bpl $90a7			bpl 	_NotRef
.90a2		48		pha				pha
.90a3		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90a6		68		pla				pla
.90a7						_NotRef:
.90a7		0a		asl a				asl 	a
.90a8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90aa		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ac		15 79		ora $79,x			ora 	NSExponent+1,x
.90ae		f0 03		beq $90b3			beq 	_IntegerCode 				; if clear, then we have two integers
.90b0		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.90b3						_IntegerCode:
.90b3		20 cd 90	jsr $90cd			jsr 	CheckDivideZero 			; do div zero check
.90b6		20 ff 90	jsr $90ff			jsr 	Int32Divide 				; do the division
.90b9		20 b0 91	jsr $91b0			jsr 	CalculateSign 				; calculate result sign
.90bc						NSMCopyPlusTwoToZero:
.90bc		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.90be		95 58		sta $58,x			sta 	NSMantissa0,x
.90c0		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.90c2		95 60		sta $60,x			sta 	NSMantissa1,x
.90c4		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.90c6		95 68		sta $68,x			sta 	NSMantissa2,x
.90c8		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.90ca		95 70		sta $70,x			sta 	NSMantissa3,x
.90cc		60		rts				rts
.90cd						CheckDivideZero:
.90cd		e8		inx				inx
.90ce		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero
.90d1		f0 02		beq $90d5			beq 	_CDVError
.90d3		ca		dex				dex
.90d4		60		rts				rts
.90d5						_CDVError:
.90d5		a9 03		lda #$03		lda	#3
.90d7		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.90da						IntegerModulus:
.90da		fa		plx				plx
.90db		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.90dd		15 51		ora $51,x			ora 	NSStatus+1,x
.90df		0a		asl a				asl 	a 							; shift reference bit into sign bit
.90e0		0a		asl a				asl 	a
.90e1		10 05		bpl $90e8			bpl 	_NotRef
.90e3		48		pha				pha
.90e4		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90e7		68		pla				pla
.90e8						_NotRef:
.90e8		0a		asl a				asl 	a
.90e9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90eb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ed		15 79		ora $79,x			ora 	NSExponent+1,x
.90ef		f0 03		beq $90f4			beq 	_IntegerCode 				; if clear, then we have two integers
.90f1		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.90f4						_IntegerCode:
.90f4						IntegerModulusNoCheck:
.90f4		20 cd 90	jsr $90cd			jsr 	CheckDivideZero 			; do div zero check
.90f7		20 ff 90	jsr $90ff			jsr 	Int32Divide 				; do the division
.90fa		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.90fc		56 50		lsr $50,x			lsr 	NSStatus,x
.90fe		60		rts				rts
.90ff						Int32Divide:
.90ff		48		pha				pha 								; save AXY
.9100		5a		phy				phy
.9101		20 63 9e	jsr $9e63			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9104		20 7c 9e	jsr $9e7c			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9107		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9109						_I32DivideLoop:
.9109		e8		inx				inx
.910a		e8		inx				inx
.910b		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.910e		ca		dex				dex
.910f		ca		dex				dex
.9110		20 90 9e	jsr $9e90			jsr 	NSMRotateLeft
.9113		20 3e 91	jsr $913e			jsr 	DivideCheckSubtract 		; check if subtract possible
.9116		90 02		bcc $911a			bcc 	_I32DivideNoCarryIn
.9118		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.911a						_I32DivideNoCarryIn:
.911a		88		dey				dey 								; loop round till division completed.
.911b		d0 ec		bne $9109			bne 	_I32DivideLoop
.911d		7a		ply				ply 								; restore AXY and exit
.911e		68		pla				pla
.911f		60		rts				rts
.9120						Int32ShiftDivide:
.9120		48		pha				pha 								; save AY
.9121		5a		phy				phy
.9122		e8		inx				inx 								; clear S[X+2]
.9123		e8		inx				inx
.9124		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.9127		ca		dex				dex
.9128		ca		dex				dex
.9129		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.912b						_I32SDLoop:
.912b		20 3e 91	jsr $913e			jsr 	DivideCheckSubtract 		; check if subtract possible
.912e		e8		inx				inx
.912f		e8		inx				inx
.9130		20 90 9e	jsr $9e90			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9133		ca		dex				dex
.9134		ca		dex				dex
.9135		20 90 9e	jsr $9e90			jsr 	NSMRotateLeft
.9138		88		dey				dey 	 							; do 31 times
.9139		d0 f0		bne $912b			bne 	_I32SDLoop
.913b		7a		ply				ply 								; restore AY and exit
.913c		68		pla				pla
.913d		60		rts				rts
.913e						DivideCheckSubtract:
.913e		20 49 92	jsr $9249			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9141		b0 04		bcs $9147			bcs 	_DCSExit 					; if carry set, then could do, exit
.9143		20 2f 92	jsr $922f			jsr 	AddTopTwoStack 				; add it back in
.9146		18		clc				clc 								; and return False
.9147						_DCSExit:
.9147		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9148						MulInteger:
.9148		fa		plx				plx
.9149		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.914b		15 51		ora $51,x			ora 	NSStatus+1,x
.914d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.914e		0a		asl a				asl 	a
.914f		10 05		bpl $9156			bpl 	_NotRef
.9151		48		pha				pha
.9152		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9155		68		pla				pla
.9156						_NotRef:
.9156		0a		asl a				asl 	a 							; put MSB of type into A:7
.9157		30 09		bmi $9162			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9159		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.915b		15 79		ora $79,x			ora 	NSExponent+1,x
.915d		f0 06		beq $9165			beq 	_IntegerCode 				; if clear, then we have two integers
.915f		4c c6 95	jmp $95c6			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9162						_StringData:
.9162		4c 12 a0	jmp $a012			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9165						_IntegerCode:
.9165		20 72 91	jsr $9172			jsr 	MultiplyShort
.9168		c9 00		cmp #$00			cmp 	#0
.916a		f0 05		beq $9171			beq 	_MIExit
.916c		a9 04		lda #$04		lda	#4
.916e		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.9171						_MIExit:
.9171		60		rts				rts
.9172						MultiplyShort:
.9172		5a		phy				phy 								; save Y
.9173		20 63 9e	jsr $9e63			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9176		20 7c 9e	jsr $9e7c			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9179		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.917b						_I32MLoop:
.917b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.917d		15 62		ora $62,x			ora 	NSMantissa1+2,x
.917f		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9181		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9183		f0 25		beq $91aa			beq 	_I32MExit 					; exit if zero
.9185		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9187		29 01		and #$01			and 	#1
.9189		f0 0d		beq $9198			beq 	_I32MNoAdd
.918b		20 2f 92	jsr $922f			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.918e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9190		10 06		bpl $9198			bpl 	_I32MNoAdd
.9192						_I32ShiftRight:
.9192		20 99 9e	jsr $9e99			jsr 	NSMShiftRight 				; shift S[X] right
.9195		c8		iny				iny 								; increment shift count
.9196		80 09		bra $91a1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9198						_I32MNoAdd:
.9198		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.919a		70 f6		bvs $9192			bvs 	_I32ShiftRight 				; instead.
.919c		e8		inx				inx
.919d		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.91a0		ca		dex				dex
.91a1						_I32MShiftUpper:
.91a1		e8		inx				inx 								; shift S[X+2] right
.91a2		e8		inx				inx
.91a3		20 99 9e	jsr $9e99			jsr 	NSMShiftRight
.91a6		ca		dex				dex
.91a7		ca		dex				dex
.91a8		80 d1		bra $917b			bra 	_I32MLoop 					; try again.
.91aa						_I32MExit:
.91aa		20 b0 91	jsr $91b0			jsr 	CalculateSign
.91ad		98		tya				tya 								; shift in A
.91ae		7a		ply				ply 								; restore Y and exit
.91af		60		rts				rts
.91b0						CalculateSign:
.91b0		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.91b2		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.91b4		55 51		eor $51,x			eor 	NSStatus+1,x
.91b6		0a		asl a				asl 	a 							; shift bit 7 into carry
.91b7		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.91b9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.91ba						CompareStrings:
.91ba		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.91bc		35 51		and $51,x			and 	NSStatus+1,x
.91be		29 10		and #$10			and 	#NSBIsString
.91c0		f0 28		beq $91ea			beq 	_CSTypeError
.91c2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.91c4		85 36		sta $36				sta 	zTemp0
.91c6		b5 60		lda $60,x			lda 	NSMantissa1,x
.91c8		85 37		sta $37				sta 	zTemp0+1
.91ca		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.91cc		85 38		sta $38				sta 	zTemp1
.91ce		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.91d0		85 39		sta $39				sta 	zTemp1+1
.91d2		5a		phy				phy 								; save Y so we can access strings
.91d3		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.91d5						_CSLoop:
.91d5		c8		iny				iny
.91d6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.91d8		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.91da		d0 06		bne $91e2			bne 	_CSDifferent
.91dc		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.91de		d0 f5		bne $91d5			bne 	_CSLoop 					; still comparing
.91e0						_CSExit:
.91e0		7a		ply				ply 								; reached end, return zero in A from EOS
.91e1		60		rts				rts
.91e2						_CSDifferent:
.91e2		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.91e4		90 fa		bcc $91e0			bcc		_CSExit
.91e6		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.91e8		80 f6		bra $91e0			bra 	_CSExit
.91ea						_CSTypeError:
.91ea		4c 08 a0	jmp $a008			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.91ed						ShiftLeft:
.91ed		38		sec				sec 								; common code, carry determines which way.
.91ee		80 01		bra $91f1			bra 	ShiftMain
.91f0						ShiftRight:
.91f0		18		clc				clc
.91f1						ShiftMain:
.91f1		fa		plx				plx 								; restore X
.91f2		08		php				php 								; save direction
.91f3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.91f5		15 51		ora $51,x			ora 	NSStatus+1,x
.91f7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.91f8		0a		asl a				asl 	a
.91f9		10 05		bpl $9200			bpl 	_NotRef
.91fb		48		pha				pha
.91fc		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91ff		68		pla				pla
.9200						_NotRef:
.9200		0a		asl a				asl 	a
.9201		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9203		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9205		15 79		ora $79,x			ora 	NSExponent+1,x
.9207		f0 03		beq $920c			beq 	_IntegerCode 				; if clear, then we have two integers
.9209		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.920c						_IntegerCode:
.920c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.920e		29 e0		and #$e0			and 	#$E0
.9210		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9212		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9214		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9216		d0 12		bne $922a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9218						_SMLoop:
.9218		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.921a		30 11		bmi $922d			bmi 	_SMExit 					; exit if done.
.921c		28		plp				plp 								; restore direction setting
.921d		08		php				php
.921e		90 05		bcc $9225			bcc 	_SMRight
.9220		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; shift left if CS
.9223		80 f3		bra $9218			bra 	_SMLoop
.9225						_SMRight:
.9225		20 99 9e	jsr $9e99			jsr 	NSMShiftRight 				; shift right if CC
.9228		80 ee		bra $9218			bra 	_SMLoop
.922a						_SMExit0:
.922a		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; return zero.
.922d						_SMExit:
.922d		28		plp				plp 								; throw direction
.922e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.922f						AddTopTwoStack:
.922f		18		clc				clc
.9230		b5 58		lda $58,x			lda		NSMantissa0,x
.9232		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9234		95 58		sta $58,x			sta 	NSMantissa0,x
.9236		b5 60		lda $60,x			lda		NSMantissa1,x
.9238		75 61		adc $61,x			adc 		NSMantissa1+1,x
.923a		95 60		sta $60,x			sta 	NSMantissa1,x
.923c		b5 68		lda $68,x			lda		NSMantissa2,x
.923e		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9240		95 68		sta $68,x			sta 	NSMantissa2,x
.9242		b5 70		lda $70,x			lda		NSMantissa3,x
.9244		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9246		95 70		sta $70,x			sta 	NSMantissa3,x
.9248		60		rts				rts
.9249						SubTopTwoStack:
.9249		38		sec				sec
.924a		b5 58		lda $58,x			lda		NSMantissa0,x
.924c		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.924e		95 58		sta $58,x			sta 	NSMantissa0,x
.9250		b5 60		lda $60,x			lda		NSMantissa1,x
.9252		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9254		95 60		sta $60,x			sta 	NSMantissa1,x
.9256		b5 68		lda $68,x			lda		NSMantissa2,x
.9258		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.925a		95 68		sta $68,x			sta 	NSMantissa2,x
.925c		b5 70		lda $70,x			lda		NSMantissa3,x
.925e		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9260		95 70		sta $70,x			sta 	NSMantissa3,x
.9262		60		rts				rts
.9263						AddInteger:
.9263		fa		plx				plx
.9264		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9266		15 51		ora $51,x			ora 	NSStatus+1,x
.9268		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9269		0a		asl a				asl 	a
.926a		10 05		bpl $9271			bpl 	_NotRef
.926c		48		pha				pha
.926d		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9270		68		pla				pla
.9271						_NotRef:
.9271		0a		asl a				asl 	a 							; put MSB of type into A:7
.9272		30 09		bmi $927d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9274		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9276		15 79		ora $79,x			ora 	NSExponent+1,x
.9278		f0 06		beq $9280			beq 	_IntegerCode 				; if clear, then we have two integers
.927a		4c 76 94	jmp $9476			jmp 	FloatingPointAdd 							; otherwise at least one float.
.927d						_StringData:
.927d		4c 3c 90	jmp $903c			jmp 	StringConcat							; at least one string - don't know both are strings.
.9280						_IntegerCode:
.9280						AddCode:
.9280		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9282		55 51		eor $51,x			eor 	NSStatus+1,x
.9284		10 a9		bpl $922f			bpl 	AddTopTwoStack
.9286		20 49 92	jsr $9249			jsr 	SubTopTwoStack 				; do a physical subtraction
.9289		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.928b		10 07		bpl $9294			bpl 	_AddExit
.928d		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.928f		95 50		sta $50,x			sta 	NSStatus,x
.9291		20 49 9e	jsr $9e49			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9294						_AddExit:
.9294		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; check for -0
.9297		d0 02		bne $929b			bne 	_AddNonZero
.9299		74 50		stz $50,x			stz 	NSStatus,x
.929b						_AddNonZero:
.929b		60		rts				rts
.929c						SubInteger:
.929c		fa		plx				plx
.929d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.929f		15 51		ora $51,x			ora 	NSStatus+1,x
.92a1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92a2		0a		asl a				asl 	a
.92a3		10 05		bpl $92aa			bpl 	_NotRef
.92a5		48		pha				pha
.92a6		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92a9		68		pla				pla
.92aa						_NotRef:
.92aa		0a		asl a				asl 	a 							; put MSB of type into A:7
.92ab		30 09		bmi $92b6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92ad		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92af		15 79		ora $79,x			ora 	NSExponent+1,x
.92b1		f0 06		beq $92b9			beq 	_IntegerCode 				; if clear, then we have two integers
.92b3		4c 7b 94	jmp $947b			jmp 	FloatingPointSub 							; otherwise at least one float.
.92b6						_StringData:
.92b6		4c 12 a0	jmp $a012			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92b9						_IntegerCode:
.92b9		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.92bb		49 80		eor #$80			eor 	#$80
.92bd		95 51		sta $51,x			sta 	NSStatus+1,x
.92bf		80 bf		bra $9280			bra 	AddCode 					; and do the same code as add.
.92c1						AndInteger:
.92c1		fa		plx				plx
.92c2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92c4		15 51		ora $51,x			ora 	NSStatus+1,x
.92c6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92c7		0a		asl a				asl 	a
.92c8		10 05		bpl $92cf			bpl 	_NotRef
.92ca		48		pha				pha
.92cb		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92ce		68		pla				pla
.92cf						_NotRef:
.92cf		0a		asl a				asl 	a
.92d0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92d2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92d4		15 79		ora $79,x			ora 	NSExponent+1,x
.92d6		f0 03		beq $92db			beq 	_IntegerCode 				; if clear, then we have two integers
.92d8		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.92db						_IntegerCode:
.92db		b5 58		lda $58,x			lda		NSMantissa0,x
.92dd		35 59		and $59,x			and 		NSMantissa0+1,x
.92df		95 58		sta $58,x			sta 	NSMantissa0,x
.92e1		b5 60		lda $60,x			lda		NSMantissa1,x
.92e3		35 61		and $61,x			and 		NSMantissa1+1,x
.92e5		95 60		sta $60,x			sta 	NSMantissa1,x
.92e7		b5 68		lda $68,x			lda		NSMantissa2,x
.92e9		35 69		and $69,x			and 		NSMantissa2+1,x
.92eb		95 68		sta $68,x			sta 	NSMantissa2,x
.92ed		b5 70		lda $70,x			lda		NSMantissa3,x
.92ef		35 71		and $71,x			and 		NSMantissa3+1,x
.92f1		95 70		sta $70,x			sta 	NSMantissa3,x
.92f3		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.92f5		60		rts				rts
.92f6						OraInteger:
.92f6		fa		plx				plx
.92f7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92f9		15 51		ora $51,x			ora 	NSStatus+1,x
.92fb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92fc		0a		asl a				asl 	a
.92fd		10 05		bpl $9304			bpl 	_NotRef
.92ff		48		pha				pha
.9300		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9303		68		pla				pla
.9304						_NotRef:
.9304		0a		asl a				asl 	a
.9305		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9307		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9309		15 79		ora $79,x			ora 	NSExponent+1,x
.930b		f0 03		beq $9310			beq 	_IntegerCode 				; if clear, then we have two integers
.930d		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.9310						_IntegerCode:
.9310		b5 58		lda $58,x			lda		NSMantissa0,x
.9312		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9314		95 58		sta $58,x			sta 	NSMantissa0,x
.9316		b5 60		lda $60,x			lda		NSMantissa1,x
.9318		15 61		ora $61,x			ora 		NSMantissa1+1,x
.931a		95 60		sta $60,x			sta 	NSMantissa1,x
.931c		b5 68		lda $68,x			lda		NSMantissa2,x
.931e		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9320		95 68		sta $68,x			sta 	NSMantissa2,x
.9322		b5 70		lda $70,x			lda		NSMantissa3,x
.9324		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9326		95 70		sta $70,x			sta 	NSMantissa3,x
.9328		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.932a		60		rts				rts
.932b						EorInteger:
.932b		fa		plx				plx
.932c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.932e		15 51		ora $51,x			ora 	NSStatus+1,x
.9330		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9331		0a		asl a				asl 	a
.9332		10 05		bpl $9339			bpl 	_NotRef
.9334		48		pha				pha
.9335		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9338		68		pla				pla
.9339						_NotRef:
.9339		0a		asl a				asl 	a
.933a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.933c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.933e		15 79		ora $79,x			ora 	NSExponent+1,x
.9340		f0 03		beq $9345			beq 	_IntegerCode 				; if clear, then we have two integers
.9342		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.9345						_IntegerCode:
.9345		b5 58		lda $58,x			lda		NSMantissa0,x
.9347		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9349		95 58		sta $58,x			sta 	NSMantissa0,x
.934b		b5 60		lda $60,x			lda		NSMantissa1,x
.934d		55 61		eor $61,x			eor 		NSMantissa1+1,x
.934f		95 60		sta $60,x			sta 	NSMantissa1,x
.9351		b5 68		lda $68,x			lda		NSMantissa2,x
.9353		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9355		95 68		sta $68,x			sta 	NSMantissa2,x
.9357		b5 70		lda $70,x			lda		NSMantissa3,x
.9359		55 71		eor $71,x			eor 		NSMantissa3+1,x
.935b		95 70		sta $70,x			sta 	NSMantissa3,x
.935d		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.935f		60		rts				rts
.9360						WordIndirect:
.9360		fa		plx				plx
.9361		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9363		15 51		ora $51,x			ora 	NSStatus+1,x
.9365		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9366		0a		asl a				asl 	a
.9367		10 05		bpl $936e			bpl 	_NotRef
.9369		48		pha				pha
.936a		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.936d		68		pla				pla
.936e						_NotRef:
.936e		0a		asl a				asl 	a
.936f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9371		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9373		15 79		ora $79,x			ora 	NSExponent+1,x
.9375		f0 03		beq $937a			beq 	_IntegerCode 				; if clear, then we have two integers
.9377		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.937a						_IntegerCode:
.937a		20 80 92	jsr $9280			jsr 	AddCode 					; add the two values
.937d		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.937f		95 50		sta $50,x			sta 	NSStatus,x
.9381		60		rts				rts
.9382						ByteIndirect:
.9382		fa		plx				plx
.9383		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9385		15 51		ora $51,x			ora 	NSStatus+1,x
.9387		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9388		0a		asl a				asl 	a
.9389		10 05		bpl $9390			bpl 	_NotRef
.938b		48		pha				pha
.938c		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.938f		68		pla				pla
.9390						_NotRef:
.9390		0a		asl a				asl 	a
.9391		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9393		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9395		15 79		ora $79,x			ora 	NSExponent+1,x
.9397		f0 03		beq $939c			beq 	_IntegerCode 				; if clear, then we have two integers
.9399		4c 08 a0	jmp $a008			jmp 	TypeError 					; anything else, type mismatch.
.939c						_IntegerCode:
.939c		20 80 92	jsr $9280			jsr 	AddCode 					; add the two values
.939f		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.93a1		95 50		sta $50,x			sta 	NSStatus,x
.93a3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.93a4						ConvertInt16:
.93a4		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.93a6		86 60		stx $60				stx 	NSMantissa1
.93a8		64 68		stz $68				stz 	NSMantissa2
.93aa		64 70		stz $70				stz 	NSMantissa3
.93ac		64 50		stz $50				stz 	NSStatus 					; positive integer
.93ae		a2 00		ldx #$00			ldx 	#0 							; stack level
.93b0		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.93b2		80 00		bra $93b4			bra 	ConvertInt32
.93b4						ConvertInt32:
.93b4		5a		phy				phy
.93b5		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.93b7		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.93b9		10 08		bpl $93c3			bpl 	_CI32NotNeg
.93bb		48		pha				pha
.93bc		a9 2d		lda #$2d			lda 	#'-'
.93be		99 27 06	sta $0627,y			sta 	numberBuffer,y
.93c1		c8		iny				iny
.93c2		68		pla				pla
.93c3						_CI32NotNeg:
.93c3		20 d1 93	jsr $93d1			jsr 	_CI32DivideConvert 			; recursive conversion
.93c6		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.93c8		99 27 06	sta $0627,y			sta 	numberBuffer,y
.93cb		7a		ply				ply
.93cc		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.93ce		a9 27		lda #$27			lda 	#numberBuffer & $FF
.93d0		60		rts				rts
.93d1						_CI32DivideConvert:
.93d1		e8		inx				inx 								; write to next slot up
.93d2		20 82 9e	jsr $9e82			jsr 	NSMSetByte 		 			; write the base out.
.93d5		ca		dex				dex
.93d6		20 ff 90	jsr $90ff			jsr 	Int32Divide 				; divide
.93d9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.93db		48		pha				pha
.93dc		20 bc 90	jsr $90bc			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93df		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; is it zero ?
.93e2		f0 05		beq $93e9			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93e4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93e6		20 d1 93	jsr $93d1			jsr 	_CI32DivideConvert 			; and recusrively call.
.93e9						_CI32NoRecurse:
.93e9		68		pla				pla 								; remainder
.93ea		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.93ec		90 02		bcc $93f0			bcc 	_CI32NotHex
.93ee		69 26		adc #$26			adc 	#6+32
.93f0						_CI32NotHex:
.93f0		69 30		adc #$30			adc 	#48
.93f2		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.93f5		c8		iny				iny
.93f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.93f7						PrecedenceLevel:
>93f7		04					.byte	 4	; $00 <<
>93f8		02					.byte	 2	; $01 <=
>93f9		02					.byte	 2	; $02 <>
>93fa		00					.byte	 0	; $03 !!3
>93fb		00					.byte	 0	; $04 ><
>93fc		02					.byte	 2	; $05 >=
>93fd		04					.byte	 4	; $06 >>
>93fe		00					.byte	 0	; $07 !!7
>93ff		00					.byte	 0	; $08 !!8
>9400		00					.byte	 0	; $09 !!9
>9401		00					.byte	 0	; $0a !!10
>9402		00					.byte	 0	; $0b !!11
>9403		00					.byte	 0	; $0c !!12
>9404		00					.byte	 0	; $0d !!13
>9405		00					.byte	 0	; $0e !!14
>9406		00					.byte	 0	; $0f !!15
>9407		00					.byte	 0	; $10 @
>9408		00					.byte	 0	; $11 !!17
>9409		00					.byte	 0	; $12 !!18
>940a		00					.byte	 0	; $13 [
>940b		04					.byte	 4	; $14 \
>940c		00					.byte	 0	; $15 ]
>940d		01					.byte	 1	; $16 ^
>940e		00					.byte	 0	; $17 _
>940f		00					.byte	 0	; $18 `
>9410		00					.byte	 0	; $19 !!25
>9411		00					.byte	 0	; $1a !!26
>9412		00					.byte	 0	; $1b {
>9413		01					.byte	 1	; $1c |
>9414		00					.byte	 0	; $1d }
>9415		00					.byte	 0	; $1e ~
>9416		00					.byte	 0	; $1f [7m<7F>[m
>9417		00					.byte	 0	; $20
>9418		05					.byte	 5	; $21 !
>9419		00					.byte	 0	; $22 "
>941a		00					.byte	 0	; $23 #
>941b		05					.byte	 5	; $24 $
>941c		04					.byte	 4	; $25 %
>941d		01					.byte	 1	; $26 &
>941e		00					.byte	 0	; $27 '
>941f		00					.byte	 0	; $28 (
>9420		00					.byte	 0	; $29 )
>9421		04					.byte	 4	; $2a *
>9422		03					.byte	 3	; $2b +
>9423		00					.byte	 0	; $2c ,
>9424		03					.byte	 3	; $2d -
>9425		00					.byte	 0	; $2e .
>9426		04					.byte	 4	; $2f /
>9427		00					.byte	 0	; $30 0
>9428		00					.byte	 0	; $31 1
>9429		00					.byte	 0	; $32 2
>942a		00					.byte	 0	; $33 3
>942b		00					.byte	 0	; $34 4
>942c		00					.byte	 0	; $35 5
>942d		00					.byte	 0	; $36 6
>942e		00					.byte	 0	; $37 7
>942f		00					.byte	 0	; $38 8
>9430		00					.byte	 0	; $39 9
>9431		00					.byte	 0	; $3a :
>9432		00					.byte	 0	; $3b ;
>9433		02					.byte	 2	; $3c <
>9434		02					.byte	 2	; $3d =
>9435		02					.byte	 2	; $3e >
>9436		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9437						EvaluateExpressionAt0:
.9437		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9439						EvaluateExpression:
.9439		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.943b						EvaluateExpressionAtPrecedence:
.943b		48		pha				pha 								; save precedence level
.943c		20 83 98	jsr $9883			jsr 	EvaluateTerm 				; evaluate term into level X.
.943f		68		pla				pla 								; restore precedence level.
.9440						_EXPRLoop:
.9440		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9442		b1 30		lda ($30),y			lda 	(codePtr),y
.9444		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9446		b0 25		bcs $946d			bcs 	_EXPRExit
.9448		da		phx				phx 								; read the operator precedence
.9449		aa		tax				tax
.944a		bd f7 93	lda $93f7,x			lda 	PrecedenceLevel,x
.944d		fa		plx				plx
.944e		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9450		f0 1b		beq $946d			beq 	_EXPRExit
.9452		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9454		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9456		c5 37		cmp $37				cmp 	zTemp0+1
.9458		b0 13		bcs $946d			bcs		_EXPRExit 					; if current >= operator exit
.945a		48		pha				pha 								; save current precedence.
.945b		b1 30		lda ($30),y			lda 	(codePtr),y
.945d		c8		iny				iny
.945e		48		pha				pha
.945f		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9461		e8		inx				inx 								; work out the right hand side.
.9462		20 3b 94	jsr $943b			jsr 	EvaluateExpressionAtPrecedence
.9465		ca		dex				dex
.9466		68		pla				pla 								; get operator, call the code.
.9467		20 70 94	jsr $9470			jsr 	_EXPRCaller
.946a		68		pla				pla 								; restore precedence level
.946b		80 d3		bra $9440			bra 	_EXPRLoop 					; and go round.
.946d						_EXPRExit:
.946d		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.946f		60		rts				rts
.9470						_EXPRCaller:
.9470		da		phx				phx 								; save on stack, first thing is to restore it
.9471		0a		asl a				asl 	a 							; double so can use vectors into X
.9472		aa		tax				tax
.9473		7c 38 8c	jmp ($8c38,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9476						FloatingPointAdd:
.9476		20 ec 95	jsr $95ec			jsr 	FloatPrepare 				; prepare for floats
.9479		80 09		bra $9484			bra 	FloatAdd
.947b						FloatingPointSub:
.947b		20 ec 95	jsr $95ec			jsr 	FloatPrepare 				; prepare for floats
.947e						FloatSubtract:
.947e		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9480		49 80		eor #$80			eor 	#$80
.9482		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9484						FloatAdd:
.9484		48		pha				pha
.9485		5a		phy				phy
.9486		20 fb 95	jsr $95fb			jsr 	NSNormalise 				; normalise S[X]
.9489		f0 51		beq $94dc			beq 	_FAReturn1
.948b		e8		inx				inx 								; normalise S[X+1]
.948c		20 fb 95	jsr $95fb			jsr 	NSNormalise
.948f		ca		dex				dex
.9490		c9 00		cmp #$00			cmp 	#0
.9492		f0 60		beq $94f4			beq 	_FAExit 					; if so, just return A
.9494		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9496		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9498		f0 18		beq $94b2			beq 	_FAExponentsEqual
.949a		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.949c		a8		tay				tay
.949d		38		sec				sec 								; do a signed comparison of the exponents.
.949e		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.94a0		50 02		bvc $94a4			bvc 	_FANoSignedChange
.94a2		49 80		eor #$80			eor 	#$80
.94a4						_FANoSignedChange:
.94a4		29 80		and #$80			and 	#$80
.94a6		10 02		bpl $94aa			bpl 	_FAHaveMax
.94a8		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.94aa						_FAHaveMax:
.94aa		20 f7 94	jsr $94f7			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.94ad		e8		inx				inx
.94ae		20 f7 94	jsr $94f7			jsr 	_FAShiftToExponent
.94b1		ca		dex				dex
.94b2						_FAExponentsEqual:
.94b2		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.94b4		55 51		eor $51,x			eor 	NSStatus+1,x
.94b6		30 0e		bmi $94c6			bmi 	_FADifferentSigns
.94b8		20 2f 92	jsr $922f			jsr 	AddTopTwoStack 				; do the add of the mantissae
.94bb		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.94bd		10 35		bpl $94f4			bpl 	_FAExit 					; if no, we are done.
.94bf		20 99 9e	jsr $9e99			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.94c2		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.94c4		80 2e		bra $94f4			bra 	_FAExit
.94c6						_FADifferentSigns:
.94c6		20 49 92	jsr $9249			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.94c9		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.94cb		10 06		bpl $94d3			bpl 	_FACheckZero 				; if no, check for -0
.94cd		20 42 9e	jsr $9e42			jsr 	NSMNegate 					; netate result
.94d0		20 49 9e	jsr $9e49			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.94d3						_FACheckZero:
.94d3		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero	 				; check for -0
.94d6		d0 1c		bne $94f4			bne 	_FAExit
.94d8		74 50		stz $50,x			stz 	NSStatus,x
.94da		80 18		bra $94f4			bra 	_FAExit
.94dc						_FAReturn1:
.94dc		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.94de		95 58		sta $58,x			sta 	NSMantissa0,x
.94e0		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.94e2		95 60		sta $60,x			sta 	NSMantissa1,x
.94e4		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.94e6		95 68		sta $68,x			sta 	NSMantissa2,x
.94e8		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.94ea		95 70		sta $70,x			sta 	NSMantissa3,x
.94ec		b5 79		lda $79,x			lda 	NSExponent+1,x
.94ee		95 78		sta $78,x			sta 	NSExponent,x
.94f0		b5 51		lda $51,x			lda 	NSStatus+1,x
.94f2		95 50		sta $50,x			sta 	NSStatus,x
.94f4						_FAExit:
.94f4		7a		ply				ply
.94f5		68		pla				pla
.94f6		60		rts				rts
.94f7						_FAShiftToExponent:
.94f7						_FAShiftToExponent2:
.94f7		98		tya				tya 								; compare Y to exponent
.94f8		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.94fa		f0 07		beq $9503			beq 	_FASEExit 					; exit if so.
.94fc		20 99 9e	jsr $9e99			jsr 	NSMShiftRight	 			; shift the mantissa right
.94ff		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9501		80 f4		bra $94f7			bra 	_FAShiftToExponent2
.9503						_FASEExit:
.9503		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9504						CompareFloat:
.9504		20 7e 94	jsr $947e			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9507		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9509		29 f8		and #$f8			and 	#$F8
.950b		15 68		ora $68,x			ora 	NSMantissa2,x
.950d		15 70		ora $70,x			ora 	NSMantissa3,x
.950f		f0 08		beq $9519			beq 	_FCExit 					; zero, so approximately identical
.9511		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9513		34 50		bit $50,x			bit 	NSStatus,x
.9515		10 02		bpl $9519			bpl 	_FCExit
.9517						_FCNegative:
.9517		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9519						_FCExit:
.9519		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.951a						FDivideCommand:
.951a		fa		plx				plx	 								; restore stack position
.951b		20 ec 95	jsr $95ec			jsr 	FloatPrepare 				; prepare for floats
.951e						FloatDivide:
.951e		48		pha				pha
.951f		e8		inx				inx
.9520		20 fb 95	jsr $95fb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9523		ca		dex				dex
.9524		c9 00		cmp #$00			cmp 	#0
.9526		f0 1d		beq $9545			beq 	_FDZero
.9528		20 fb 95	jsr $95fb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.952b		f0 16		beq $9543			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.952d		20 20 91	jsr $9120			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9530		20 bc 90	jsr $90bc			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9533		20 fb 95	jsr $95fb			jsr		NSNormalise 				; renormalise
.9536		20 b0 91	jsr $91b0			jsr 	CalculateSign 				; calculate result sign
.9539		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.953b		38		sec				sec
.953c		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.953e		38		sec				sec
.953f		e9 1e		sbc #$1e			sbc 	#30
.9541		95 78		sta $78,x			sta 	NSExponent,x
.9543						_FDExit:
.9543		68		pla				pla
.9544		60		rts				rts
.9545						_FDZero:
.9545		a9 03		lda #$03		lda	#3
.9547		4c 35 8f	jmp $8f35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.954a						FloatFractionalPart:
.954a		5a		phy				phy
.954b		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.954d		29 7f		and #$7f			and 	#$7F
.954f		95 50		sta $50,x			sta 	NSStatus,x
.9551		20 fb 95	jsr $95fb			jsr 	NSNormalise
.9554		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9556		38		sec				sec
.9557		e9 e0		sbc #$e0			sbc 	#$E0
.9559		90 29		bcc $9584			bcc 	_FFPExit 					; already fractional
.955b		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.955d		b0 22		bcs $9581			bcs 	_FFPZero
.955f		a8		tay				tay 								; put count to do in Y
.9560		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9562		20 86 95	jsr $9586			jsr 	_FFPPartial
.9565		95 70		sta $70,x			sta 	NSMantissa3,x
.9567		b5 68		lda $68,x			lda 	NSMantissa2,x
.9569		20 86 95	jsr $9586			jsr 	_FFPPartial
.956c		95 68		sta $68,x			sta 	NSMantissa2,x
.956e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9570		20 86 95	jsr $9586			jsr 	_FFPPartial
.9573		95 60		sta $60,x			sta 	NSMantissa1,x
.9575		b5 58		lda $58,x			lda 	NSMantissa0,x
.9577		20 86 95	jsr $9586			jsr 	_FFPPartial
.957a		95 58		sta $58,x			sta 	NSMantissa0,x
.957c		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; zeroed check.
.957f		d0 03		bne $9584			bne 	_FFPExit
.9581						_FFPZero:
.9581		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.9584						_FFPExit:
.9584		7a		ply				ply
.9585		60		rts				rts
.9586						_FFPPartial:
.9586		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9588		f0 17		beq $95a1			beq 	_FFFPPExit
.958a		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.958c		b0 0c		bcs $959a			bcs 	_FFFPPWholeByte
.958e		5a		phy				phy
.958f						_FFFPPLeft:
.958f		0a		asl a				asl 	a
.9590		88		dey				dey
.9591		d0 fc		bne $958f			bne 	_FFFPPLeft
.9593		7a		ply				ply
.9594						_FFFPPRight:
.9594		4a		lsr a				lsr 	a
.9595		88		dey				dey
.9596		d0 fc		bne $9594			bne 	_FFFPPRight
.9598		80 07		bra $95a1			bra 	_FFFPPExit
.959a						_FFFPPWholeByte:
.959a		98		tya				tya 								; subtract 8 from count
.959b		38		sec				sec
.959c		e9 08		sbc #$08			sbc 	#8
.959e		a8		tay				tay
.959f		a9 00		lda #$00			lda 	#0 							; and clear all
.95a1						_FFFPPExit:
.95a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.95a2						FloatIntegerPart:
.95a2		48		pha				pha
.95a3		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.95a5		f0 1d		beq $95c4			beq 	_FIPExit 					; if so do nothing
.95a7		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; is it zero ?
.95aa		f0 15		beq $95c1			beq 	_FIPZero 					; if so return zero.
.95ac		20 fb 95	jsr $95fb			jsr 	NSNormalise 				; normalise
.95af		f0 10		beq $95c1			beq 	_FIPZero 					; normalised to zero, exit zero
.95b1						_FIPShift:
.95b1		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.95b3		10 07		bpl $95bc			bpl 	_FIPCheckZero
.95b5		20 99 9e	jsr $9e99			jsr 	NSMShiftRight 				; shift mantissa right
.95b8		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.95ba		80 f5		bra $95b1			bra 	_FIPShift
.95bc						_FIPCheckZero:
.95bc		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; avoid -0 problem
.95bf		d0 03		bne $95c4			bne 	_FIPExit 					; set to zero if mantissa zero.
.95c1						_FIPZero:
.95c1		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.95c4						_FIPExit:
.95c4		68		pla				pla
.95c5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.95c6						FloatingPointMultiply:
.95c6		20 ec 95	jsr $95ec			jsr 	FloatPrepare 				; prepare for floats
.95c9						FloatMultiply:
.95c9		48		pha				pha
.95ca		20 fb 95	jsr $95fb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.95cd		f0 18		beq $95e7			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.95cf		e8		inx				inx
.95d0		20 fb 95	jsr $95fb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95d3		ca		dex				dex
.95d4		c9 00		cmp #$00			cmp 	#0
.95d6		f0 0c		beq $95e4			beq 	_FDSetZero
.95d8		20 72 91	jsr $9172			jsr 	MultiplyShort 				; calculate the result.
.95db		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.95dd		18		clc				clc
.95de		75 79		adc $79,x			adc 	NSExponent+1,x
.95e0		95 78		sta $78,x			sta 	NSExponent,x
.95e2		80 03		bra $95e7			bra 	_FDExit
.95e4						_FDSetZero:
.95e4		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; return 0
.95e7						_FDExit:
.95e7		20 fb 95	jsr $95fb			jsr 	NSNormalise 				; normalise the result
.95ea		68		pla				pla
.95eb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.95ec						FloatPrepare:
.95ec		20 f7 96	jsr $96f7			jsr 	DereferenceTopTwo 			; dereference the top two values
.95ef		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.95f1		15 51		ora $51,x			ora 	NSStatus+1,x
.95f3		29 10		and #$10			and 	#NSBIsString
.95f5		d0 01		bne $95f8			bne 	_FDType
.95f7		60		rts				rts
.95f8						_FDType:
.95f8		4c 08 a0	jmp $a008			jmp 	TypeError
.95fb						NSNormalise:
.95fb		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.95fd		29 80		and #$80			and 	#$80
.95ff		09 08		ora #$08			ora 	#NSTFloat
.9601		95 50		sta $50,x			sta 	NSStatus,x
.9603		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; if zero exit
.9606		d0 07		bne $960f			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9608		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.960a		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.960c		a9 00		lda #$00			lda 	#0 							; set Z flag
.960e		60		rts				rts
.960f						_NSNormaliseOptimise:
.960f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9611		d0 19		bne $962c			bne 	_NSNormaliseLoop
.9613		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9615		30 15		bmi $962c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9617		95 70		sta $70,x			sta 	NSMantissa3,x
.9619		b5 60		lda $60,x			lda 	NSMantissa1,x
.961b		95 68		sta $68,x			sta 	NSMantissa2,x
.961d		b5 58		lda $58,x			lda 	NSMantissa0,x
.961f		95 60		sta $60,x			sta 	NSMantissa1,x
.9621		74 58		stz $58,x			stz 	NSMantissa0,x
.9623		b5 78		lda $78,x			lda 	NSExponent,x
.9625		38		sec				sec
.9626		e9 08		sbc #$08			sbc 	#8
.9628		95 78		sta $78,x			sta 	NSExponent,x
.962a		80 e3		bra $960f			bra 	_NSNormaliseOptimise
.962c						_NSNormaliseLoop:
.962c		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.962e		70 07		bvs $9637			bvs 	_NSNExit 					; exit if so with Z flag clear
.9630		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; shift mantissa left
.9633		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9635		80 f5		bra $962c			bra 	_NSNormaliseLoop
.9637						_NSNExit:
.9637		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9639		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.963a						AssignNumber:
.963a		5a		phy				phy
.963b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.963d		85 36		sta $36				sta 	zTemp0
.963f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9641		85 37		sta $37				sta 	zTemp0+1
.9643		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9645		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9647		95 50		sta $50,x			sta 	NSStatus,x
.9649		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.964b		c9 08		cmp #$08			cmp 	#NSTFloat
.964d		f0 24		beq $9673			beq 	_ANFloat
.964f		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9651		f0 03		beq $9656			beq		_ANNotFloat
.9653		4c 03 a0	jmp $a003			jmp 	RangeError					; if it is, report an error.
.9656						_ANNotFloat:
.9656		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9658		29 03		and #$03			and 	#3
.965a		d0 05		bne $9661			bne 	_ANByteWord
.965c		20 7e 96	jsr $967e			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.965f		80 1b		bra $967c			bra 	_ANExit
.9661						_ANByteWord:
.9661		48		pha				pha 								; save count
.9662		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9664		92 36		sta ($36)			sta 	(zTemp0)
.9666		68		pla				pla
.9667		c9 01		cmp #$01			cmp	 	#1
.9669		f0 11		beq $967c			beq 	_ANExit
.966b		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.966d		a0 01		ldy #$01			ldy 	#1
.966f		91 36		sta ($36),y			sta 	(zTemp0),y
.9671		80 09		bra $967c			bra 	_ANExit
.9673						_ANFloat:
.9673		20 7e 96	jsr $967e			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9676		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9678		a0 04		ldy #$04			ldy 	#4
.967a		91 36		sta ($36),y			sta 	(zTemp0),y
.967c						_ANExit:
.967c		7a		ply				ply
.967d		60		rts				rts
.967e						_ANCopy4PackSign:
.967e		a0 03		ldy #$03			ldy 	#3
.9680		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9682		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9684		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9686		91 36		sta ($36),y			sta 	(zTemp0),y
.9688		88		dey				dey
.9689		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.968b		91 36		sta ($36),y			sta 	(zTemp0),y
.968d		88		dey				dey
.968e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9690		91 36		sta ($36),y			sta 	(zTemp0),y
.9692		88		dey				dey
.9693		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9695		91 36		sta ($36),y			sta 	(zTemp0),y
.9697		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9698						AssignString:
.9698		5a		phy				phy
.9699		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.969b		85 38		sta $38				sta 	zTemp1
.969d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.969f		85 39		sta $39				sta 	zTemp1+1
.96a1		b5 58		lda $58,x			lda 	NSMantissa0,x
.96a3		85 36		sta $36				sta 	zTemp0
.96a5		b5 60		lda $60,x			lda 	NSMantissa1,x
.96a7		85 37		sta $37				sta 	zTemp0+1
.96a9		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.96ab		b1 36		lda ($36),y			lda 	(zTemp0),y
.96ad		f0 23		beq $96d2			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.96af		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.96b0		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.96b2		e9 02		sbc #$02			sbc 	#2
.96b4		85 3c		sta $3c				sta 	zsTemp
.96b6		a0 01		ldy #$01			ldy 	#1
.96b8		b1 36		lda ($36),y			lda 	(zTemp0),y
.96ba		e9 00		sbc #$00			sbc 	#0
.96bc		85 3d		sta $3d				sta 	zsTemp+1
.96be		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.96c0						_ASGetLength:
.96c0		c8		iny				iny
.96c1		b1 38		lda ($38),y			lda 	(zTemp1),y
.96c3		d0 fb		bne $96c0			bne 	_ASGetLength
.96c5		98		tya				tya 								; is this length <= current length
.96c6		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.96c8		90 1e		bcc $96e8			bcc 	_ASCopyString
.96ca		f0 1c		beq $96e8			beq 	_ASCopyString
.96cc		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.96ce		a0 01		ldy #$01			ldy 	#1
.96d0		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96d2						_ASNewStringRequired:
.96d2		e8		inx				inx 								; concrete the new string.
.96d3		20 c1 af	jsr $afc1			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.96d6		ca		dex				dex
.96d7		18		clc				clc
.96d8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.96da		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.96dc		92 36		sta ($36)			sta 	(zTemp0)
.96de		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.96e0		69 00		adc #$00			adc 	#0
.96e2		a0 01		ldy #$01			ldy 	#1
.96e4		91 36		sta ($36),y			sta 	(zTemp0),y
.96e6		80 0d		bra $96f5			bra 	_ASExit
.96e8						_ASCopyString:
.96e8		a0 00		ldy #$00			ldy 	#0
.96ea						_ASCopyLoop:
.96ea		b1 38		lda ($38),y			lda 	(zTemp1),y
.96ec		c8		iny				iny
.96ed		c8		iny				iny
.96ee		91 3c		sta ($3c),y			sta 	(zsTemp),y
.96f0		88		dey				dey
.96f1		c9 00		cmp #$00			cmp 	#0
.96f3		d0 f5		bne $96ea			bne 	_ASCopyLoop
.96f5						_ASExit:
.96f5		7a		ply				ply
.96f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.96f7						DereferenceTopTwo:
.96f7		e8		inx				inx
.96f8		20 fc 96	jsr $96fc			jsr 	Dereference 				; deref x+1
.96fb		ca		dex				dex  								; falls through to deref x
.96fc						Dereference:
.96fc		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.96fe		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9700		f0 48		beq $974a			beq 	_DRFExit 					; not a reference, so exit.
.9702		5a		phy				phy
.9703		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9705		85 36		sta $36				sta 	zTemp0
.9707		b5 60		lda $60,x			lda 	NSMantissa1,x
.9709		85 37		sta $37				sta 	zTemp0+1
.970b		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.970d		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.970f		95 58		sta $58,x			sta 	NSMantissa0,x
.9711		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9713		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9715		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9717		f0 0e		beq $9727			beq 	_DRFDereferenceTwo
.9719		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.971b		f0 2f		beq $974c			beq 	_DRFFull
.971d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.971f		29 03		and #$03			and 	#3
.9721		f0 29		beq $974c			beq 	_DRFFull 					; the whole word
.9723		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9725		f0 06		beq $972d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9727						_DRFDereferenceTwo:
.9727		a0 01		ldy #$01			ldy 	#1
.9729		b1 36		lda ($36),y			lda 	(zTemp0),y
.972b		95 60		sta $60,x			sta 	NSMantissa1,x
.972d						_DRFClear23:
.972d		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.972f		74 70		stz $70,x			stz 	NSMantissa3,x
.9731		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9733		29 18		and #$18			and 	#NSBTypeMask
.9735		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9737		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9739		d0 0e		bne $9749			bne 	_DRFNotString
.973b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.973d		15 60		ora $60,x			ora 	NSMantissa1,x
.973f		d0 08		bne $9749			bne 	_DRFNotString
.9741		a9 4b		lda #$4b			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9743		95 58		sta $58,x			sta 	NSMantissa0,x
.9745		a9 97		lda #$97			lda 	#_DRFNullString >> 8
.9747		95 60		sta $60,x			sta 	NSMantissa1,x
.9749						_DRFNotString
.9749		7a		ply				ply 								; restore Y and exit
.974a						_DRFExit:
.974a		60		rts				rts
.974b						_DRFNullString:
>974b		00						.byte 	0
.974c						_DRFFull:
.974c		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.974e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9750		95 60		sta $60,x			sta 	NSMantissa1,x
.9752		c8		iny				iny
.9753		b1 36		lda ($36),y			lda 	(zTemp0),y
.9755		95 68		sta $68,x			sta 	NSMantissa2,x
.9757		c8		iny				iny
.9758		b1 36		lda ($36),y			lda 	(zTemp0),y
.975a		95 70		sta $70,x			sta 	NSMantissa3,x
.975c		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.975e		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9760		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9762		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9764		f0 05		beq $976b			beq 	_DRFNoExponent
.9766		c8		iny				iny 								; if not, read the exponent as well.
.9767		b1 36		lda ($36),y			lda 	(zTemp0),y
.9769		95 78		sta $78,x			sta 	NSExponent,x
.976b						_DRFNoExponent:
.976b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.976d		10 0a		bpl $9779			bpl 	_DRFExit2 					; if not, then exit.
.976f		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9771		95 70		sta $70,x			sta 	NSMantissa3,x
.9773		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9775		09 80		ora #$80			ora 	#NSBIsNegative
.9777		95 50		sta $50,x			sta 	NSStatus,x
.9779						_DRFExit2:
.9779		7a		ply				ply
.977a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.977b						EncodeNumberStart:
.977b		38		sec				sec
.977c		80 01		bra $977f			bra 	EncodeNumberContinue+1
.977e						EncodeNumberContinue:
.977e		18		clc				clc
.977f						EncodeNumber:
.977f		08		php				php 								; save reset flag.
.9780		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9782		f0 12		beq $9796			beq 	_ENIsOkay
.9784		c9 30		cmp #$30			cmp 	#"0"
.9786		90 04		bcc $978c			bcc 	_ENBadNumber
.9788		c9 3a		cmp #$3a			cmp 	#"9"+1
.978a		90 0a		bcc $9796			bcc 	_ENIsOkay
.978c						_ENBadNumber:
.978c		28		plp				plp 								; throw saved reset
.978d		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9790		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9792		f0 7b		beq $980f			beq 	_ENConstructFinal
.9794						_ENFail:
.9794		18		clc				clc 								; not allowed
.9795		60		rts				rts
.9796						_ENIsOkay:
.9796		28		plp				plp 								; are we restarting
.9797		90 15		bcc $97ae			bcc 	_ENNoRestart
.9799						_ENStartEncode:
.9799		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.979b		f0 0c		beq $97a9			beq 	_ENFirstDP
.979d		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.979f		20 82 9e	jsr $9e82			jsr 	NSMSetByte 					; in single byte mode.
.97a2		a9 01		lda #$01			lda 	#ESTA_Low
.97a4						_ENExitChange:
.97a4		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.97a7		38		sec				sec
.97a8		60		rts				rts
.97a9						_ENFirstDP:
.97a9		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; clear integer part
.97ac		80 3c		bra $97ea			bra 	_ESTASwitchFloat			; go straight to float and exi
.97ae						_ENNoRestart:
.97ae		48		pha				pha 								; save digit or DP on stack.
.97af		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.97b2		c9 01		cmp #$01			cmp 	#ESTA_Low
.97b4		f0 09		beq $97bf			beq  	_ESTALowState
.97b6		c9 02		cmp #$02			cmp 	#ESTA_High
.97b8		f0 26		beq $97e0			beq 	_ESTAHighState
.97ba		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.97bc		f0 38		beq $97f6			beq 	_ESTADecimalState
>97be		db						.byte 	$DB 						; causes a break in the emulator
.97bf						_ESTALowState:
.97bf		68		pla				pla 								; get value back
.97c0		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.97c2		f0 26		beq $97ea			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.97c4		29 0f		and #$0f			and 	#15 						; make digit
.97c6		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.97c9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.97cb		0a		asl a				asl 	a
.97cc		0a		asl a				asl 	a
.97cd		75 58		adc $58,x			adc 	NSMantissa0,x
.97cf		0a		asl a				asl 	a
.97d0		6d 06 04	adc $0406			adc 	digitTemp
.97d3		95 58		sta $58,x			sta 	NSMantissa0,x
.97d5		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.97d7		90 05		bcc $97de			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.97d9		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.97db		8d 05 04	sta $0405			sta 	encodeState
.97de						_ESTANoSwitch:
.97de		38		sec				sec
.97df		60		rts				rts
.97e0						_ESTAHighState:
.97e0		68		pla				pla 								; get value back
.97e1		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.97e3		f0 05		beq $97ea			beq 	_ESTASwitchFloat
.97e5		20 43 98	jsr $9843			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.97e8		38		sec				sec
.97e9		60		rts				rts
.97ea						_ESTASwitchFloat:
.97ea		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.97ed		e8		inx				inx 								; zero the decimal additive.
.97ee		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.97f1		ca		dex				dex
.97f2		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.97f4		80 ae		bra $97a4			bra 	_ENExitChange
.97f6						_ESTADecimalState:
.97f6		68		pla				pla 								; digit.
.97f7		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.97f9		f0 99		beq $9794			beq 	_ENFail
.97fb		e8		inx				inx 								; put digit into fractional part of X+1
.97fc		20 43 98	jsr $9843			jsr 	ESTAShiftDigitIntoMantissa
.97ff		ca		dex				dex
.9800		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9803		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9806		c9 0b		cmp #$0b			cmp 	#11
.9808		f0 02		beq $980c			beq 	_ESTADSFail
.980a		38		sec				sec
.980b		60		rts				rts
.980c						_ESTADSFail:
.980c		4c 03 a0	jmp $a003			jmp 	RangeError
.980f						_ENConstructFinal:
.980f		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9812		f0 2d		beq $9841			beq 	_ENCFExit 					; no decimals
.9814		5a		phy				phy
.9815		0a		asl a				asl 	a 							; x 4 and CLC
.9816		0a		asl a				asl 	a
.9817		6d 07 04	adc $0407			adc 	decimalCount
.981a		a8		tay				tay
.981b		b9 c2 9f	lda $9fc2,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.981e		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9820		b9 c3 9f	lda $9fc3,y			lda 	DecimalScalarTable-5+1,y
.9823		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9825		b9 c4 9f	lda $9fc4,y			lda 	DecimalScalarTable-5+2,y
.9828		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.982a		b9 c5 9f	lda $9fc5,y			lda 	DecimalScalarTable-5+3,y
.982d		95 72		sta $72,x			sta 	NSMantissa3+2,x
.982f		b9 c6 9f	lda $9fc6,y			lda 	DecimalScalarTable-5+4,y
.9832		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9834		a9 08		lda #$08			lda 	#NSTFloat
.9836		95 52		sta $52,x			sta 	NSStatus+2,x
.9838		7a		ply				ply
.9839		e8		inx				inx 								; multiply decimal const by decimal scalar
.983a		20 c9 95	jsr $95c9			jsr 	FloatMultiply
.983d		ca		dex				dex
.983e		20 84 94	jsr $9484			jsr 	FloatAdd 					; add to integer part.
.9841						_ENCFExit:
.9841		18		clc				clc 								; reject the digit.
.9842		60		rts				rts
.9843						ESTAShiftDigitIntoMantissa:
.9843		29 0f		and #$0f			and 	#15 						; save digit
.9845		48		pha				pha
.9846		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9848		48		pha				pha
.9849		b5 68		lda $68,x			lda 	NSMantissa2,x
.984b		48		pha				pha
.984c		b5 60		lda $60,x			lda 	NSMantissa1,x
.984e		48		pha				pha
.984f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9851		48		pha				pha
.9852		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; x 2
.9855		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; x 4
.9858		18		clc				clc 								; pop mantissa and add
.9859		68		pla				pla
.985a		75 58		adc $58,x			adc 	NSMantissa0,x
.985c		95 58		sta $58,x			sta 	NSMantissa0,x
.985e		68		pla				pla
.985f		75 60		adc $60,x			adc 	NSMantissa1,x
.9861		95 60		sta $60,x			sta 	NSMantissa1,x
.9863		68		pla				pla
.9864		75 68		adc $68,x			adc 	NSMantissa2,x
.9866		95 68		sta $68,x			sta 	NSMantissa2,x
.9868		68		pla				pla
.9869		75 70		adc $70,x			adc 	NSMantissa3,x
.986b		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.986d		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; x 10
.9870		68		pla				pla 								; add digit
.9871		18		clc				clc
.9872		75 58		adc $58,x			adc 	NSMantissa0,x
.9874		95 58		sta $58,x			sta 	NSMantissa0,x
.9876		90 0a		bcc $9882			bcc 	_ESTASDExit
.9878		f6 60		inc $60,x			inc 	NSMantissa1,x
.987a		d0 06		bne $9882			bne 	_ESTASDExit
.987c		f6 68		inc $68,x			inc 	NSMantissa2,x
.987e		d0 02		bne $9882			bne 	_ESTASDExit
.9880		f6 70		inc $70,x			inc 	NSMantissa3,x
.9882						_ESTASDExit:
.9882		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9883						EvaluateTerm:
.9883		b1 30		lda ($30),y			lda 	(codePtr),y
.9885		30 18		bmi $989f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9887		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9889		b0 6c		bcs $98f7			bcs 	_ETVariable
.988b		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.988d		90 6b		bcc $98fa			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.988f		c9 3a		cmp #$3a			cmp 	#'9'+1
.9891		b0 67		bcs $98fa			bcs 	_ETPuncUnary
.9893		20 7b 97	jsr $977b			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9896						_ETNumber:
.9896		c8		iny				iny 								; keep encoding until we have the numbers
.9897		b1 30		lda ($30),y			lda 	(codePtr),y
.9899		20 7e 97	jsr $977e			jsr 	EncodeNumberContinue
.989c		b0 f8		bcs $9896			bcs 	_ETNumber 					; go back if accepted.
.989e		60		rts				rts
.989f						_ETCheckUnary:
.989f		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.98a1		f0 3f		beq $98e2			beq 	_ETString
.98a3		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.98a5		f0 12		beq $98b9			beq 	_ETHexConstant
.98a7		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.98a9		90 0b		bcc $98b6			bcc 	_ETSyntaxError
.98ab		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.98ad		b0 07		bcs $98b6			bcs 	_ETSyntaxError
.98af		da		phx				phx 								; push X on the stack
.98b0		0a		asl a				asl 	a 							; put vector x 2 into X
.98b1		aa		tax				tax
.98b2		c8		iny				iny 								; consume unary function token
.98b3		7c b8 8c	jmp ($8cb8,x)			jmp 	(VectorSet0,x) 				; and do it.
.98b6						_ETSyntaxError:
.98b6		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.98b9						_ETHexConstant:
.98b9		c8		iny				iny 								; skip #
.98ba		c8		iny				iny 								; skip count
.98bb		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; clear result
.98be						_ETHLoop:
.98be		b1 30		lda ($30),y			lda 	(codePtr),y
.98c0		c8		iny				iny 								; and consume
.98c1		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.98c3		f0 1c		beq $98e1			beq 	_ETHExit
.98c5		48		pha				pha 								; save on stack.
.98c6		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; x 2
.98c9		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; x 4
.98cc		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; x 8
.98cf		20 8f 9e	jsr $9e8f			jsr 	NSMShiftLeft 				; x 16
.98d2		68		pla				pla 								; ASCII
.98d3		c9 41		cmp #$41			cmp 	#'A'
.98d5		90 02		bcc $98d9			bcc 	_ETHNotChar
.98d7		e9 07		sbc #$07			sbc 	#7
.98d9						_ETHNotChar:
.98d9		29 0f		and #$0f			and 	#15 						; digit now
.98db		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.98dd		95 58		sta $58,x			sta 	NSMantissa0,x
.98df		80 dd		bra $98be			bra 	_ETHLoop 					; go round.
.98e1						_ETHExit:
.98e1		60		rts				rts
.98e2						_ETString:
.98e2		c8		iny				iny 								; look at length
.98e3		b1 30		lda ($30),y			lda 	(codePtr),y
.98e5		48		pha				pha
.98e6		c8		iny				iny 								; first character
.98e7		20 e9 a5	jsr $a5e9			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.98ea		68		pla				pla 								; restore count and save
.98eb		85 36		sta $36				sta 	zTemp0
.98ed		98		tya				tya 								; add length to Y to skip it.
.98ee		18		clc				clc
.98ef		65 36		adc $36				adc 	zTemp0
.98f1		a8		tay				tay
.98f2		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.98f4		95 50		sta $50,x			sta 	NSStatus,x
.98f6		60		rts				rts
.98f7						_ETVariable:
.98f7		4c 4c 99	jmp $994c			jmp 	VariableHandler
.98fa						_ETPuncUnary:
.98fa		c8		iny				iny 								; consume the unary character
.98fb		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.98fd		f0 2b		beq $992a			beq 	_ETUnaryNegate
.98ff		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9901		f0 36		beq $9939			beq 	_ETDereference
.9903		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9905		f0 3e		beq $9945			beq 	_ETParenthesis
.9907		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9909		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.990b		f0 06		beq $9913			beq 	_ETIndirection
.990d		e6 36		inc $36				inc 	zTemp0
.990f		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9911		d0 a3		bne $98b6			bne 	_ETSyntaxError
.9913						_ETIndirection:
.9913		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9915		1a		inc a				inc 	a
.9916		48		pha				pha
.9917		20 83 98	jsr $9883			jsr 	EvaluateTerm				; evaluate the term
.991a		20 fc 96	jsr $96fc			jsr 	Dereference 				; dereference it.
.991d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.991f		d0 06		bne $9927			bne 	_ETTypeMismatch
.9921		68		pla				pla 								; indirection 1-2
.9922		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9924		95 50		sta $50,x			sta 	NSStatus,x
.9926		60		rts				rts
.9927						_ETTypeMismatch:
.9927		4c 08 a0	jmp $a008			jmp 	TypeError
.992a						_ETUnaryNegate:
.992a		20 83 98	jsr $9883			jsr 	EvaluateTerm				; evaluate the term
.992d		20 fc 96	jsr $96fc			jsr 	Dereference 				; dereference it.
.9930		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9932		29 10		and #$10			and 	#NSTString
.9934		d0 f1		bne $9927			bne 	_ETTypeMismatch
.9936		4c 42 9e	jmp $9e42			jmp 	NSMNegate  					; just toggles the sign bit.
.9939						_ETDereference:
.9939		20 83 98	jsr $9883			jsr 	EvaluateTerm				; evaluate the term
.993c		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.993e		29 20		and #$20			and 	#NSBIsReference
.9940		f0 e5		beq $9927			beq 	_ETTypeMismatch
.9942		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9944		60		rts				rts
.9945						_ETParenthesis:
.9945		20 39 94	jsr $9439			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9948		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 			; check for )
.994b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.994c						VariableHandler:
.994c		b1 30		lda ($30),y			lda 	(codePtr),y
.994e		18		clc				clc
.994f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9951		85 37		sta $37				sta 	zTemp0+1
.9953		c8		iny				iny
.9954		b1 30		lda ($30),y			lda 	(codePtr),y
.9956		85 36		sta $36				sta 	zTemp0
.9958		c8		iny				iny
.9959		18		clc				clc									; copy variable address+3 to mantissa
.995a		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.995c		95 58		sta $58,x			sta 	NSMantissa0,x
.995e		a5 37		lda $37				lda 	zTemp0+1
.9960		69 00		adc #$00			adc 	#0
.9962		95 60		sta $60,x			sta 	NSMantissa1,x
.9964		74 68		stz $68,x			stz 	NSMantissa2,x
.9966		74 70		stz $70,x			stz 	NSMantissa3,x
.9968		74 78		stz $78,x			stz 	NSExponent,x
.996a		5a		phy				phy
.996b		a0 02		ldy #$02			ldy 	#2 							; read type
.996d		b1 36		lda ($36),y			lda 	(zTemp0),y
.996f		7a		ply				ply
.9970		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9972		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9974		95 50		sta $50,x			sta 	NSStatus,x
.9976		29 04		and #$04			and 	#NSBIsArray
.9978		d0 01		bne $997b			bne 	_VHArray
.997a		60		rts				rts
.997b						_VHArray:
.997b		e8		inx				inx
.997c		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.997f		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9981		95 51		sta $51,x			sta 	NSStatus+1,x
.9983		b1 30		lda ($30),y			lda 	(codePtr),y
.9985		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9987		d0 06		bne $998f			bne 	_VHNoSecondIndex
.9989		c8		iny				iny 								; skip the comma
.998a		e8		inx				inx
.998b		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.998e		ca		dex				dex
.998f						_VHNoSecondIndex:
.998f		ca		dex				dex 								; set X back.
.9990		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 			; and check the right bracket.
.9993		5a		phy				phy 								; save position
.9994		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9996		85 3e		sta $3e				sta 	zaTemp
.9998		b5 60		lda $60,x			lda 	NSMantissa1,x
.999a		85 3f		sta $3f				sta 	zaTemp+1
.999c		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.999e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99a0		f0 5d		beq $99ff			beq 	_VHBadArray
.99a2		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.99a4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99a6		f0 02		beq $99aa			beq 	_VHHas2Mask
.99a8		a9 ff		lda #$ff			lda 	#$FF
.99aa						_VHHas2Mask:
.99aa		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.99ac		f0 4c		beq $99fa			beq 	_VHBadIndex
.99ae		0a		asl a				asl 	a 							; carry will be set if a second index
.99af		90 08		bcc $99b9			bcc 	_VHCheckFirstIndex
.99b1		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.99b3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99b5		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.99b7		90 41		bcc $99fa			bcc 	_VHBadIndex
.99b9						_VHCheckFirstIndex:
.99b9		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.99bb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99bd		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.99bf		90 39		bcc $99fa			bcc 	_VHBadIndex
.99c1		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.99c3		64 37		stz $37				stz 	zTemp0+1
.99c5		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.99c7		30 0e		bmi $99d7			bmi 	_VHNoMultiply
.99c9		da		phx				phx
.99ca		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.99cc		48		pha				pha
.99cd		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.99cf		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99d1		1a		inc a				inc 	a 							; add 1 for zero base
.99d2		fa		plx				plx
.99d3		20 2b 9e	jsr $9e2b			jsr 	Multiply8x8 				; calculate -> Z0
.99d6		fa		plx				plx
.99d7						_VHNoMultiply:
.99d7		18		clc				clc
.99d8		a5 36		lda $36				lda 	zTemp0
.99da		75 59		adc $59,x			adc 	NSMantissa0+1,x
.99dc		85 36		sta $36				sta 	zTemp0
.99de		a5 37		lda $37				lda 	zTemp0+1
.99e0		69 00		adc #$00			adc 	#0
.99e2		85 37		sta $37				sta 	zTemp0+1
.99e4		b5 50		lda $50,x			lda 	NSStatus,x
.99e6		20 80 85	jsr $8580			jsr 	ScaleByBaseType
.99e9		18		clc				clc
.99ea		b2 3e		lda ($3e)			lda 	(zaTemp)
.99ec		65 36		adc $36				adc 	zTemp0
.99ee		95 58		sta $58,x			sta 	NSMantissa0,x
.99f0		a0 01		ldy #$01			ldy 	#1
.99f2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.99f4		65 37		adc $37				adc 	zTemp0+1
.99f6		95 60		sta $60,x			sta 	NSMantissa1,x
.99f8		7a		ply				ply 								; restore position
.99f9		60		rts				rts
.99fa						_VHBadIndex:
.99fa		a9 17		lda #$17		lda	#23
.99fc		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.99ff						_VHBadArray:
.99ff		a9 18		lda #$18		lda	#24
.9a01		4c 35 8f	jmp $8f35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9a04						AbsUnary:
.9a04		fa		plx				plx 								; restore stack pos
.9a05		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber 				; get a float or int
.9a08		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9a0b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9a0d		29 7f		and #$7f			and 	#$7F
.9a0f		95 50		sta $50,x			sta 	NSStatus,x
.9a11		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9a12						AllocUnary:
.9a12		fa		plx				plx 								; restore stack pos
.9a13		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger		; get bytes required.
.9a16		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9a19		da		phx				phx 								; save X/Y
.9a1a		5a		phy				phy
.9a1b		8a		txa				txa 								; copy X into Y
.9a1c		a8		tay				tay
.9a1d		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9a20		aa		tax				tax
.9a21		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9a24		20 31 9a	jsr $9a31			jsr 	AllocateXABytes 			; allocate memory
.9a27		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9a2a		8a		txa				txa 	 							; typing is 16 bit integer.
.9a2b		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9a2e		7a		ply				ply
.9a2f		fa		plx				plx
.9a30		60		rts				rts
.9a31						AllocateXABytes:
.9a31		5a		phy				phy
.9a32		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9a35		84 36		sty $36				sty 	zTemp0
.9a37		5a		phy				phy
.9a38		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9a3b		84 37		sty $37				sty 	zTemp0+1
.9a3d		5a		phy				phy
.9a3e		18		clc				clc 								; add to low memory pointer
.9a3f		6d 0c 04	adc $040c			adc 	lowMemPtr
.9a42		8d 0c 04	sta $040c			sta 	lowMemPtr
.9a45		8a		txa				txa
.9a46		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9a49		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9a4c		b0 2f		bcs $9a7d			bcs 	CISSMemory
.9a4e		20 6f 9a	jsr $9a6f			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9a51						_ClearMemory:
.9a51		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9a54		c5 36		cmp $36				cmp 	zTemp0
.9a56		d0 07		bne $9a5f			bne 	_CMClearNext
.9a58		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9a5b		c5 37		cmp $37				cmp 	zTemp0+1
.9a5d		f0 0c		beq $9a6b			beq 	_CMExit
.9a5f						_CMClearNext:
.9a5f		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9a61		92 36		sta ($36)			sta 	(zTemp0)
.9a63		e6 36		inc $36				inc 	zTemp0
.9a65		d0 ea		bne $9a51			bne 	_ClearMemory
.9a67		e6 37		inc $37				inc		zTemp0+1
.9a69		80 e6		bra $9a51			bra 	_ClearMemory
.9a6b						_CMExit:
.9a6b		fa		plx				plx
.9a6c		68		pla				pla
.9a6d		7a		ply				ply
.9a6e		60		rts				rts
.9a6f						CheckIdentifierStringSpace:
.9a6f		48		pha				pha
.9a70		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9a73		18		clc				clc
.9a74		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9a76		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9a79		b0 02		bcs $9a7d			bcs 	CISSMemory
.9a7b		68		pla				pla
.9a7c		60		rts				rts
.9a7d						CISSMemory:
.9a7d		a9 06		lda #$06		lda	#6
.9a7f		4c 35 8f	jmp $8f35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9a82						AscUnary:
.9a82		fa		plx				plx 								; restore stack pos
.9a83		20 d8 9d	jsr $9dd8			jsr 	EvaluateString 				; get a string
.9a86		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9a88		20 82 9e	jsr $9e82			jsr 	NSMSetByte 					; ASC("") will return zero.
.9a8b		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9a8e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9a8f						FracUnary:
.9a8f		fa		plx				plx 								; restore stack pos
.9a90		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber 				; get a float or int
.9a93		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9a96		b5 50		lda $50,x			lda 	NSStatus,x
.9a98		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a9a		f0 04		beq $9aa0			beq 	_IUZero
.9a9c		20 4a 95	jsr $954a			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9a9f		60		rts				rts
.9aa0						_IUZero:
.9aa0		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.9aa3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9aa4						IntUnary:
.9aa4		fa		plx				plx 								; restore stack pos
.9aa5		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber 				; get a float or int
.9aa8		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9aab		b5 50		lda $50,x			lda 	NSStatus,x
.9aad		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9aaf		f0 03		beq $9ab4			beq 	_IUExit
.9ab1		20 a2 95	jsr $95a2			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9ab4						_IUExit:
.9ab4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9ab5						LenUnary:
.9ab5		fa		plx				plx 								; restore stack pos
.9ab6		20 d8 9d	jsr $9dd8			jsr 	EvaluateString 				; get a string
.9ab9		5a		phy				phy
.9aba		a0 00		ldy #$00			ldy 	#0 							; find length
.9abc						_LenFind:
.9abc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9abe		f0 06		beq $9ac6			beq 	_LenExit
.9ac0		c8		iny				iny
.9ac1		d0 f9		bne $9abc			bne 	_LenFind
.9ac3		4c 03 a0	jmp $a003			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9ac6						_LenExit:
.9ac6		98		tya				tya		 							; return length
.9ac7		20 82 9e	jsr $9e82			jsr 	NSMSetByte
.9aca		7a		ply				ply
.9acb		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9ace		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9acf						Unary_Min:
.9acf		a9 01		lda #$01			lda 	#1
.9ad1		80 02		bra $9ad5			bra 	UnaryMinMaxMain
.9ad3						Unary_Max:
.9ad3		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9ad5						UnaryMinMaxMain:
.9ad5		fa		plx				plx 								; get index on number stack
.9ad6		48		pha				pha 								; save comparator
.9ad7		20 c5 9d	jsr $9dc5			jsr 	EvaluateValue 				; get the first value.
.9ada						_UMMMLoop:
.9ada		b1 30		lda ($30),y			lda 	(codePtr),y
.9adc		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9ade		f0 22		beq $9b02			beq 	_UMMMDone
.9ae0		20 24 8f	jsr $8f24			jsr 	CheckComma 					; must be a comma
.9ae3		e8		inx				inx
.9ae4		20 c5 9d	jsr $9dc5			jsr 	EvaluateValue
.9ae7		ca		dex				dex
.9ae8		20 63 9e	jsr $9e63			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9aeb		e8		inx				inx
.9aec		20 63 9e	jsr $9e63			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9aef		e8		inx				inx
.9af0		20 ec 8f	jsr $8fec			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9af3		ca		dex				dex
.9af4		ca		dex				dex
.9af5		85 36		sta $36				sta 	zTemp0 						; save required result
.9af7		68		pla				pla 								; get and save comparator
.9af8		48		pha				pha
.9af9		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9afb		d0 dd		bne $9ada			bne 	_UMMMLoop
.9afd		20 05 9b	jsr $9b05			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9b00		80 d8		bra $9ada			bra 	_UMMMLoop
.9b02						_UMMMDone:
.9b02		68		pla				pla 								; throw the comparator
.9b03		c8		iny				iny 								; skip )
.9b04		60		rts				rts
.9b05						ExpCopyAboveDown:
.9b05		b5 51		lda $51,x			lda 	NSStatus+1,x
.9b07		95 50		sta $50,x			sta 	NSStatus,x
.9b09		b5 79		lda $79,x			lda 	NSExponent+1,x
.9b0b		95 78		sta $78,x			sta 	NSExponent,x
.9b0d		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b0f		95 58		sta $58,x			sta 	NSMantissa0,x
.9b11		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b13		95 60		sta $60,x			sta 	NSMantissa1,x
.9b15		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b17		95 68		sta $68,x			sta 	NSMantissa2,x
.9b19		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9b1b		95 70		sta $70,x			sta 	NSMantissa3,x
.9b1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9b1e						Unary_Not:
.9b1e		fa		plx				plx
.9b1f		20 ed 9d	jsr $9ded			jsr 	EvaluateInteger 			; get integer
.9b22		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9b25		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; zero mantissa ?
.9b28		f0 04		beq $9b2e			beq 	_NotZero
.9b2a		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.9b2d		60		rts				rts
.9b2e						_NotZero:
.9b2e		4c a2 8f	jmp $8fa2			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9b31						PeekByteUnary:
.9b31		a9 01		lda #$01			lda 	#1
.9b33		80 0a		bra $9b3f			bra 	PeekUnary
.9b35						PeekWUnary:
.9b35		a9 02		lda #$02			lda 	#2
.9b37		80 06		bra $9b3f			bra 	PeekUnary
.9b39						PeekLUnary:
.9b39		a9 03		lda #$03			lda 	#3
.9b3b		80 02		bra $9b3f			bra 	PeekUnary
.9b3d						PeekDUnary:
.9b3d		a9 04		lda #$04			lda 	#4
.9b3f						PeekUnary:
.9b3f		fa		plx				plx 								; restore position.
.9b40		48		pha				pha 								; save count to copy on stack
.9b41		20 00 9e	jsr $9e00			jsr		Evaluate16BitInteger 		; address as constant.
.9b44		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9b47		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9b49		85 36		sta $36				sta 	zTemp0
.9b4b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b4d		85 37		sta $37				sta 	zTemp0+1
.9b4f		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; clear the result to zero.
.9b52		68		pla				pla 								; count in zTemp2
.9b53		85 3a		sta $3a				sta 	zTemp2
.9b55		da		phx				phx 								; save stack position and offset of read
.9b56		5a		phy				phy
.9b57		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9b59						_PULoop:
.9b59		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9b5b		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9b5d		c8		iny				iny 								; next byte to write
.9b5e		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9b5f		18		clc				clc
.9b60		69 08		adc #$08			adc 	#MathStackSize
.9b62		aa		tax				tax
.9b63		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9b65		d0 f2		bne $9b59			bne 	_PULoop
.9b67		7a		ply				ply 								; restore stack/code pos and exit.
.9b68		fa		plx				plx
.9b69		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9b6a						Unary_Random:
.9b6a		fa		plx				plx
.9b6b		20 dc 9b	jsr $9bdc			jsr 	Random32Bit 				; get a random number
.9b6e		20 c5 9b	jsr $9bc5			jsr 	URCopyToMantissa  			; put in mantissa
.9b71		b1 30		lda ($30),y			lda 	(codePtr),y
.9b73		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9b75		f0 08		beq $9b7f			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9b77		e8		inx				inx
.9b78		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9b7b		ca		dex				dex
.9b7c		20 f4 90	jsr $90f4			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9b7f						_URNoModulus:
.9b7f		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9b81		74 78		stz $78,x			stz 	NSExponent,x
.9b83		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9b86		60		rts				rts
.9b87						Unary_Rnd:
.9b87		fa		plx				plx
.9b88		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber 				; number to use.
.9b8b		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 			; closing bracket
.9b8e		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9b91		f0 26		beq $9bb9			beq 	_URCopySeed
.9b93		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9b95		10 1f		bpl $9bb6			bpl 	_URDontSeed
.9b97		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9b99		49 17		eor #$17			eor 	#$17
.9b9b		8d 08 04	sta $0408			sta 	randomSeed+0
.9b9e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ba0		49 a5		eor #$a5			eor 	#$A5
.9ba2		8d 09 04	sta $0409			sta 	randomSeed+1
.9ba5		b5 68		lda $68,x			lda 	NSMantissa2,x
.9ba7		49 c2		eor #$c2			eor 	#$C2
.9ba9		8d 0a 04	sta $040a			sta 	randomSeed+2
.9bac		b5 70		lda $70,x			lda 	NSMantissa3,x
.9bae		49 9d		eor #$9d			eor 	#$9D
.9bb0		8d 0b 04	sta $040b			sta 	randomSeed+3
.9bb3		20 dc 9b	jsr $9bdc			jsr 	Random32Bit
.9bb6						_URDontSeed:
.9bb6		20 dc 9b	jsr $9bdc			jsr 	Random32Bit 				; generate a number
.9bb9						_URCopySeed:
.9bb9		20 c5 9b	jsr $9bc5			jsr 	URCopyToMantissa 			; copy into mantissa
.9bbc		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9bbe		95 78		sta $78,x			sta 	NSExponent,x
.9bc0		a9 08		lda #$08			lda 	#NSTFloat
.9bc2		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9bc4		60		rts				rts
.9bc5						URCopyToMantissa:
.9bc5		ad 08 04	lda $0408			lda 	randomSeed+0
.9bc8		95 58		sta $58,x			sta 	NSMantissa0,x
.9bca		ad 09 04	lda $0409			lda 	randomSeed+1
.9bcd		95 60		sta $60,x			sta 	NSMantissa1,x
.9bcf		ad 0a 04	lda $040a			lda 	randomSeed+2
.9bd2		95 68		sta $68,x			sta 	NSMantissa2,x
.9bd4		ad 0b 04	lda $040b			lda 	randomSeed+3
.9bd7		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9bd9		95 70		sta $70,x			sta 	NSMantissa3,x
.9bdb		60		rts				rts
.9bdc						Random32Bit:
.9bdc		5a		phy				phy
.9bdd		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9bdf		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9be2		d0 03		bne $9be7			bne 	_Random1
.9be4		a8		tay				tay 								; if so do it 256 times
.9be5		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9be7						_Random1:
.9be7		0a		asl a				asl 	a 							; LSFR RNG
.9be8		2e 09 04	rol $0409			rol 	randomSeed+1
.9beb		2e 0a 04	rol $040a			rol 	randomSeed+2
.9bee		2e 0b 04	rol $040b			rol 	randomSeed+3
.9bf1		90 02		bcc $9bf5			bcc 	_Random2
.9bf3		49 c5		eor #$c5			eor 	#$C5
.9bf5						_Random2:
.9bf5		88		dey				dey
.9bf6		d0 ef		bne $9be7			bne 	_Random1
.9bf8		8d 08 04	sta $0408			sta 	randomSeed+0
.9bfb		7a		ply				ply
.9bfc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9bfd						SgnUnary:
.9bfd		fa		plx				plx 								; restore stack pos
.9bfe		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber 				; get a float or int
.9c01		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9c04		20 a2 9e	jsr $9ea2			jsr 	NSMIsZero 					; if zero
.9c07		f0 0e		beq $9c17			beq 	_SGZero  					; return Int Zero
.9c09		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9c0b		48		pha				pha
.9c0c		a9 01		lda #$01			lda 	#1 							; set to 1
.9c0e		20 82 9e	jsr $9e82			jsr 	NSMSetByte
.9c11		68		pla				pla
.9c12		29 80		and #$80			and		#$80 						; copy the sign byte out
.9c14		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9c16		60		rts				rts
.9c17		20 80 9e	jsr $9e80	_SGZero:jsr 	NSMSetZero
.9c1a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9c1b						ValUnary:
.9c1b		fa		plx				plx 								; restore stack pos
.9c1c		20 31 9c	jsr $9c31			jsr 	ValMainCode 				; do the main val() code
.9c1f		b0 01		bcs $9c22			bcs 	_VUError 					; couldn't convert
.9c21		60		rts				rts
.9c22						_VUError:
.9c22		4c 08 a0	jmp $a008			jmp 	TypeError
.9c25						IsValUnary:
.9c25		fa		plx				plx 								; restore stack pos
.9c26		20 31 9c	jsr $9c31			jsr 	ValMainCode 				; do the main val() code
.9c29		b0 03		bcs $9c2e			bcs 	_VUBad
.9c2b		4c a2 8f	jmp $8fa2			jmp 	ReturnTrue
.9c2e						_VUBad:
.9c2e		4c ad 8f	jmp $8fad			jmp 	ReturnFalse
.9c31						ValMainCode:
.9c31		20 d8 9d	jsr $9dd8			jsr 	EvaluateString 				; get a string
.9c34		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 			; check right bracket present
.9c37						ValEvaluateZTemp0:
.9c37		5a		phy				phy
.9c38		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9c3a		f0 17		beq $9c53			beq 	_VMCFail2
.9c3c		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9c3e		48		pha				pha 								; save first character
.9c3f		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9c41		d0 01		bne $9c44			bne 	_VMCStart
.9c43		c8		iny				iny 								; skip over -
.9c44						_VMCStart:
.9c44		38		sec				sec 								; initialise first time round.
.9c45						_VMCNext:
.9c45		c8		iny				iny 								; pre-increment
.9c46		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9c48		f0 0c		beq $9c56			beq 	_VMCSuccess 				; successful.
.9c4a		20 7f 97	jsr $977f			jsr 	EncodeNumber 				; send it to the number-builder
.9c4d		90 03		bcc $9c52			bcc 	_VMCFail 					; if failed, give up.
.9c4f		18		clc				clc 								; next time round, countinue
.9c50		80 f3		bra $9c45			bra 	_VMCNext
.9c52						_VMCFail:
.9c52		68		pla				pla
.9c53						_VMCFail2:
.9c53		7a		ply				ply
.9c54		38		sec				sec
.9c55		60		rts				rts
.9c56						_VMCSuccess:
.9c56		a9 00		lda #$00			lda 	#0 							; construct final
.9c58		20 7f 97	jsr $977f			jsr 	EncodeNumber 				; by sending a duff value.
.9c5b		68		pla				pla 								; if it was -ve
.9c5c		c9 2d		cmp #$2d			cmp 	#"-"
.9c5e		d0 03		bne $9c63			bne 	_VMCNotNegative
.9c60		20 42 9e	jsr $9e42			jsr		NSMNegate 					; negate it.
.9c63						_VMCNotNegative:
.9c63		7a		ply				ply
.9c64		18		clc				clc
.9c65		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9c66						ChrUnary:
.9c66		fa		plx				plx 								; restore stack pos
.9c67		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9c6a		48		pha				pha
.9c6b		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9c6e		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9c70		20 3e b0	jsr $b03e			jsr 	StringTempAllocate
.9c73		68		pla				pla 								; write number to it
.9c74		20 77 b0	jsr $b077			jsr 	StringTempWrite
.9c77		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9c78						SpcUnary:
.9c78		fa		plx				plx 								; restore stack pos
.9c79		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger			; get value
.9c7c		5a		phy				phy
.9c7d		48		pha				pha 								; save count
.9c7e		20 3e b0	jsr $b03e			jsr 	StringTempAllocate
.9c81		7a		ply				ply 								; to do count in Y
.9c82						_SpcLoop:
.9c82		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9c84		f0 08		beq $9c8e			beq 	_SpcExit
.9c86		a9 20		lda #$20			lda 	#32
.9c88		20 77 b0	jsr $b077			jsr 	StringTempWrite
.9c8b		88		dey				dey
.9c8c		80 f4		bra $9c82			bra 	_SpcLoop
.9c8e						_SpcExit:
.9c8e		7a		ply				ply
.9c8f		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.9c92		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9c93						Unary_Str:
.9c93		fa		plx				plx
.9c94		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber  			; get number
.9c97		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 			; closing bracket
.9c9a		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9c9c		20 b5 9c	jsr $9cb5			jsr 	ConvertNumberToString 		; do the conversion.
.9c9f		a9 21		lda #$21			lda		#33 						; create buffer
.9ca1		20 3e b0	jsr $b03e			jsr 	StringTempAllocate 			; allocate memory
.9ca4		da		phx				phx  								; copy the converted string into the buffer.
.9ca5		a2 00		ldx #$00			ldx 	#0
.9ca7						_USCopy:
.9ca7		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9caa		20 77 b0	jsr $b077			jsr 	StringTempWrite
.9cad		e8		inx				inx
.9cae		bd 49 06	lda $0649,x			lda 	DecimalBuffer,x
.9cb1		d0 f4		bne $9ca7			bne 	_USCopy
.9cb3		fa		plx				plx
.9cb4		60		rts				rts
.9cb5						ConvertNumberToString:
.9cb5		5a		phy				phy 								; save code position
.9cb6		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9cb9		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9cbc		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9cbe		10 09		bpl $9cc9			bpl 	_CNTSNotNegative
.9cc0		29 7f		and #$7f			and 	#$7F 						; make +ve
.9cc2		95 50		sta $50,x			sta 	NSStatus,x
.9cc4		a9 2d		lda #$2d			lda 	#"-"
.9cc6		20 2a 9d	jsr $9d2a			jsr 	WriteDecimalBuffer
.9cc9						_CNTSNotNegative:
.9cc9		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9ccb		f0 12		beq $9cdf			beq 	_CNTSNotFloat
.9ccd		e8		inx				inx 								; round up so we don't get too many 6.999999
.9cce		a9 01		lda #$01			lda 	#1
.9cd0		20 82 9e	jsr $9e82			jsr 	NSMSetByte
.9cd3		ca		dex				dex
.9cd4		b5 78		lda $78,x			lda		NSExponent,x
.9cd6		95 79		sta $79,x			sta 	NSExponent+1,x
.9cd8		a9 08		lda #$08			lda 	#NSTFloat
.9cda		95 51		sta $51,x			sta 	NSStatus+1,x
.9cdc		20 84 94	jsr $9484			jsr 	FloatAdd
.9cdf						_CNTSNotFloat:
.9cdf		20 0c 9d	jsr $9d0c			jsr 	MakePlusTwoString 			; do the integer part.
.9ce2		20 4a 95	jsr $954a			jsr 	FloatFractionalPart 		; get the fractional part
.9ce5		20 fb 95	jsr $95fb			jsr 	NSNormalise					; normalise , exit if zero
.9ce8		f0 20		beq $9d0a			beq 	_CNTSExit
.9cea		a9 2e		lda #$2e			lda 	#"."
.9cec		20 2a 9d	jsr $9d2a			jsr 	WriteDecimalBuffer 			; write decimal place
.9cef						_CNTSDecimal:
.9cef		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9cf2		30 16		bmi $9d0a			bmi 	_CNTSExit
.9cf4		e8		inx				inx 								; x 10.0
.9cf5		a9 0a		lda #$0a			lda 	#10
.9cf7		20 82 9e	jsr $9e82			jsr 	NSMSetByte
.9cfa		a9 08		lda #$08			lda 	#NSTFloat
.9cfc		95 50		sta $50,x			sta 	NSStatus,x
.9cfe		ca		dex				dex
.9cff		20 c9 95	jsr $95c9			jsr 	FloatMultiply
.9d02		20 0c 9d	jsr $9d0c			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9d05		20 4a 95	jsr $954a			jsr 	FloatFractionalPart 		; get the fractional part
.9d08		80 e5		bra $9cef			bra 	_CNTSDecimal 				; keep going.
.9d0a						_CNTSExit:
.9d0a		7a		ply				ply
.9d0b		60		rts				rts
.9d0c						MakePlusTwoString:
.9d0c		da		phx				phx
.9d0d		20 63 9e	jsr $9e63			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9d10		e8		inx				inx 								; access it
.9d11		e8		inx				inx
.9d12		20 a2 95	jsr $95a2			jsr 	FloatIntegerPart 			; make it an integer
.9d15		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9d17		20 b4 93	jsr $93b4			jsr 	ConvertInt32
.9d1a		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9d1c						_MPTSCopy:
.9d1c		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9d1f		20 2a 9d	jsr $9d2a			jsr 	WriteDecimalBuffer
.9d22		e8		inx				inx
.9d23		bd 27 06	lda $0627,x			lda 	NumberBuffer,x
.9d26		d0 f4		bne $9d1c			bne 	_MPTSCopy
.9d28		fa		plx				plx
.9d29		60		rts				rts
.9d2a						WriteDecimalBuffer:
.9d2a		da		phx				phx
.9d2b		ae 15 04	ldx $0415			ldx 	dbOffset
.9d2e		9d 49 06	sta $0649,x			sta 	DecimalBuffer,x
.9d31		9e 4a 06	stz $064a,x			stz 	DecimalBuffer+1,x
.9d34		ee 15 04	inc $0415			inc 	dbOffset
.9d37		fa		plx				plx
.9d38		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9d39						Unary_Left:
.9d39		fa		plx				plx
.9d3a		18		clc				clc 								; only one parameter
.9d3b		20 9e 9d	jsr $9d9e			jsr 	SubstringInitial 			; set up.
.9d3e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9d40		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d42		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9d44		80 25		bra $9d6b			bra 	SubstringMain
.9d46						Unary_Right:
.9d46		fa		plx				plx
.9d47		18		clc				clc 								; only one parameter
.9d48		20 9e 9d	jsr $9d9e			jsr 	SubstringInitial 			; set up.
.9d4b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9d4d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9d4f		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9d51		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9d53		b0 02		bcs $9d57			bcs 	_URNotUnderflow
.9d55		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9d57						_URNotUnderflow:
.9d57		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9d59		80 10		bra $9d6b			bra 	SubstringMain
.9d5b						Unary_Mid:
.9d5b		fa		plx				plx
.9d5c		38		sec				sec 								; two parameters
.9d5d		20 9e 9d	jsr $9d9e			jsr 	SubstringInitial 			; set up.
.9d60		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9d62		f0 04		beq $9d68			beq 	_UMError
.9d64		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9d66		80 03		bra $9d6b			bra 	SubstringMain
.9d68						_UMError:
.9d68		4c 0d a0	jmp $a00d			jmp 	ArgumentError
.9d6b						SubstringMain:
.9d6b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9d6d		d5 78		cmp $78,x			cmp 	NSExponent,x
.9d6f		b0 27		bcs $9d98			bcs 	_SSMNull 					; if so, return an empty string.
.9d71		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9d73		f0 23		beq $9d98			beq 	_SSMNull 					; return empty string.
.9d75		18		clc				clc 								; add the offset +1 to the address and
.9d76		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9d78		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9d7a		85 36		sta $36				sta 	zTemp0
.9d7c		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9d7e		69 00		adc #$00			adc 	#0
.9d80		85 37		sta $37				sta 	zTemp0+1
.9d82						_SSMNoCarry:
.9d82		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9d84		20 3e b0	jsr $b03e			jsr 	StringTempAllocate 			; allocate that many characters
.9d87		5a		phy				phy 								; save Y
.9d88		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9d8a						_SSMCopy:
.9d8a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9d8c		f0 08		beq $9d96			beq 	_SSMEString 				; no more to copy
.9d8e		20 77 b0	jsr $b077			jsr 	StringTempWrite 			; and write it out.
.9d91		c8		iny				iny
.9d92		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9d94		d0 f4		bne $9d8a			bne 	_SSMCopy
.9d96						_SSMEString:
.9d96		7a		ply				ply
.9d97						_SSMExit:
.9d97		60		rts				rts
.9d98						_SSMNull:
.9d98		a9 00		lda #$00			lda 	#0
.9d9a		20 3e b0	jsr $b03e			jsr 	StringTempAllocate
.9d9d		60		rts				rts
.9d9e						SubstringInitial:
.9d9e		da		phx				phx 								; save initial stack position
.9d9f		08		php				php 								; save carry on stack indicating 2 parameters
.9da0		20 d8 9d	jsr $9dd8			jsr 	EvaluateString 				; get a string
.9da3		5a		phy				phy 								; calculate length to exponent.
.9da4		a0 ff		ldy #$ff			ldy 	#$FF
.9da6						_SIFindLength:
.9da6		c8		iny				iny
.9da7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9da9		d0 fb		bne $9da6			bne 	_SIFindLength
.9dab		98		tya				tya
.9dac		95 78		sta $78,x			sta 	NSExponent,x
.9dae		7a		ply				ply
.9daf		e8		inx				inx
.9db0		20 24 8f	jsr $8f24			jsr 	CheckComma 					; comma next
.9db3		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get next parameter
.9db6		28		plp				plp 								; is it the last parameter ?
.9db7		90 07		bcc $9dc0			bcc 	_SSIExit 					; if so, exit.
.9db9		e8		inx				inx
.9dba		20 24 8f	jsr $8f24			jsr 	CheckComma 					; comma next
.9dbd		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get last parameter
.9dc0						_SSIExit:
.9dc0		fa		plx				plx
.9dc1		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket 			; check closing bracket
.9dc4		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9dc5						EvaluateValue:
.9dc5		48		pha				pha
.9dc6		20 39 94	jsr $9439			jsr		EvaluateExpression 			; expression
.9dc9		20 fc 96	jsr $96fc			jsr 	Dereference					; derefernce it
.9dcc		68		pla				pla
.9dcd		60		rts				rts
.9dce						EvaluateNumber:
.9dce		20 c5 9d	jsr $9dc5			jsr 	EvaluateValue 				; get a value
.9dd1		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9dd3		29 10		and #$10			and 	#NSBIsString
.9dd5		d0 13		bne $9dea			bne 	HelperTypeError
.9dd7		60		rts				rts
.9dd8						EvaluateString:
.9dd8		20 c5 9d	jsr $9dc5			jsr 	EvaluateValue 				; get a value
.9ddb		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9ddd		29 10		and #$10			and 	#NSBIsString
.9ddf		f0 09		beq $9dea			beq 	HelperTypeError
.9de1						CopyAddressToTemp0:
.9de1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9de3		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9de5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9de7		85 37		sta $37				sta 	zTemp0+1
.9de9		60		rts				rts
.9dea						HelperTypeError:
.9dea		4c 08 a0	jmp $a008			jmp 	TypeError
.9ded						EvaluateInteger:
.9ded		20 ce 9d	jsr $9dce			jsr 	EvaluateNumber
.9df0		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9df2		d0 09		bne $9dfd			bne 	HelperValueError 			; if not, it's a float.
.9df4		60		rts				rts
.9df5						EvaluateUnsignedInteger:
.9df5		20 ed 9d	jsr $9ded			jsr 	EvaluateInteger 			; check integer is +ve
.9df8		b5 50		lda $50,x			lda 	NSStatus,x
.9dfa		30 01		bmi $9dfd			bmi 	HelperValueError
.9dfc		60		rts				rts
.9dfd						HelperValueError:
.9dfd		4c 0d a0	jmp $a00d			jmp 	ArgumentError
.9e00						Evaluate16BitInteger:
.9e00		20 f5 9d	jsr $9df5			jsr	 	EvaluateUnsignedInteger		; get integer
.9e03		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e05		15 68		ora $68,x			ora 	NSMantissa2,x
.9e07		d0 f4		bne $9dfd			bne 	HelperValueError
.9e09		60		rts				rts
.9e0a						Evaluate16BitIntegerSigned:
.9e0a		20 ed 9d	jsr $9ded			jsr	 	EvaluateInteger				; get integer
.9e0d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9e0f		15 68		ora $68,x			ora 	NSMantissa2,x
.9e11		d0 ea		bne $9dfd			bne 	HelperValueError
.9e13		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9e15		10 03		bpl $9e1a			bpl 	_EISNotSigned
.9e17		20 49 9e	jsr $9e49			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9e1a						_EISNotSigned:
.9e1a		60		rts				rts
.9e1b						Evaluate8BitInteger:
.9e1b		20 f5 9d	jsr $9df5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9e1e		d0 dd		bne $9dfd			bne 	HelperValueError
.9e20		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9e22		15 68		ora $68,x			ora 	NSMantissa2,x
.9e24		15 60		ora $60,x			ora 	NSMantissa1,x
.9e26		d0 d5		bne $9dfd			bne 	HelperValueError
.9e28		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e2a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9e2b						Multiply8x8:
.9e2b		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9e2c		85 36		sta $36			  	sta 	zTemp0
.9e2e		86 37		stx $37				stx 	zTemp0+1
.9e30		a9 00		lda #$00			lda 	#0
.9e32		a2 08		ldx #$08			ldx 	#8
.9e34						_M88Loop:
.9e34		90 03		bcc $9e39			bcc 	_M88NoAdd
.9e36		18		clc				clc
.9e37		65 37		adc $37				adc 	zTemp0+1
.9e39						_M88NoAdd:
.9e39		6a		ror a				ror 	a
.9e3a		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9e3c		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9e3d		d0 f5		bne $9e34			bne 	_M88Loop
.9e3f		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9e41		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9e42						NSMNegate:
.9e42		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9e44		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9e46		95 50		sta $50,x			sta 	NSStatus,x
.9e48		60		rts				rts
.9e49						NSMNegateMantissa:
.9e49		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9e4a		a9 00		lda #$00			lda 	#0
.9e4c		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9e4e		95 58		sta $58,x			sta 	NSMantissa0,x
.9e50		a9 00		lda #$00			lda 	#0
.9e52		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9e54		95 60		sta $60,x			sta 	NSMantissa1,x
.9e56		a9 00		lda #$00			lda 	#0
.9e58		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9e5a		95 68		sta $68,x			sta 	NSMantissa2,x
.9e5c		a9 00		lda #$00			lda 	#0
.9e5e		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9e60		95 70		sta $70,x			sta 	NSMantissa3,x
.9e62		60		rts				rts
.9e63						NSMShiftUpTwo:
.9e63		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e65		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9e67		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e69		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9e6b		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e6d		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9e6f		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e71		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9e73		b5 78		lda $78,x			lda 	NSExponent,x
.9e75		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9e77		b5 50		lda $50,x			lda 	NSStatus,x
.9e79		95 52		sta $52,x			sta 	NSStatus+2,x
.9e7b		60		rts				rts
.9e7c						NSMSetZeroMantissaOnly:
.9e7c		a9 00		lda #$00			lda 	#0
.9e7e		80 06		bra $9e86			bra 	NSMSetMantissa
.9e80						NSMSetZero:
.9e80		a9 00		lda #$00			lda 	#0
.9e82						NSMSetByte:
.9e82		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9e84		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9e86						NSMSetMantissa:
.9e86		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9e88		74 60		stz $60,x			stz 	NSMantissa1,x
.9e8a		74 68		stz $68,x			stz 	NSMantissa2,x
.9e8c		74 70		stz $70,x			stz 	NSMantissa3,x
.9e8e		60		rts				rts
.9e8f						NSMShiftLeft:
.9e8f		18		clc				clc
.9e90						NSMRotateLeft:
.9e90		36 58		rol $58,x			rol 	NSMantissa0,x
.9e92		36 60		rol $60,x			rol		NSMantissa1,x
.9e94		36 68		rol $68,x			rol		NSMantissa2,x
.9e96		36 70		rol $70,x			rol		NSMantissa3,x
.9e98		60		rts				rts
.9e99						NSMShiftRight:
.9e99		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9e9b		76 68		ror $68,x			ror		NSMantissa2,x
.9e9d		76 60		ror $60,x			ror		NSMantissa1,x
.9e9f		76 58		ror $58,x			ror		NSMantissa0,x
.9ea1		60		rts				rts
.9ea2						NSMIsZero:
.9ea2		b5 70		lda $70,x			lda 	NSMantissa3,x
.9ea4		15 68		ora $68,x			ora		NSMantissa2,x
.9ea6		15 60		ora $60,x			ora		NSMantissa1,x
.9ea8		15 58		ora $58,x			ora		NSMantissa0,x
.9eaa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9eab						TickHandler:
.9eab		5a		phy				phy 								; need to preserve Y
.9eac		20 53 80	jsr $8053			jsr 	SNDUpdate 					; update sound
.9eaf		7a		ply				ply
.9eb0		60		rts				rts
.065c						LastTick:
>065c								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9eb1						Assemble_ora:
.9eb1		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9eb4		01					.byte $01
.9eb5						Assemble_and:
.9eb5		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9eb8		21					.byte $21
.9eb9						Assemble_eor:
.9eb9		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ebc		41					.byte $41
.9ebd						Assemble_adc:
.9ebd		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ec0		61					.byte $61
.9ec1						Assemble_sta:
.9ec1		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ec4		81					.byte $81
.9ec5						Assemble_lda:
.9ec5		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ec8		a1					.byte $a1
.9ec9						Assemble_cmp:
.9ec9		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ecc		c1					.byte $c1
.9ecd						Assemble_sbc:
.9ecd		20 b9 80	jsr $80b9		jsr	AssembleGroup1
>9ed0		e1					.byte $e1
.9ed1						Assemble_asl:
.9ed1		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ed4		02					.byte $02
>9ed5		75					.byte $75
.9ed6						Assemble_rol:
.9ed6		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ed9		22					.byte $22
>9eda		75					.byte $75
.9edb						Assemble_lsr:
.9edb		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ede		42					.byte $42
>9edf		75					.byte $75
.9ee0						Assemble_ror:
.9ee0		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ee3		62					.byte $62
>9ee4		75					.byte $75
.9ee5						Assemble_stx:
.9ee5		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ee8		82					.byte $82
>9ee9		50					.byte $50
.9eea						Assemble_ldx:
.9eea		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9eed		a2					.byte $a2
>9eee		d0					.byte $d0
.9eef						Assemble_dec:
.9eef		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ef2		c2					.byte $c2
>9ef3		55					.byte $55
.9ef4						Assemble_inc:
.9ef4		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9ef7		e2					.byte $e2
>9ef8		55					.byte $55
.9ef9						Assemble_stz:
.9ef9		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9efc		60					.byte $60
>9efd		44					.byte $44
.9efe						Assemble_bit:
.9efe		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f01		20					.byte $20
>9f02		55					.byte $55
.9f03						Assemble_sty:
.9f03		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f06		80					.byte $80
>9f07		54					.byte $54
.9f08						Assemble_ldy:
.9f08		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f0b		a0					.byte $a0
>9f0c		d5					.byte $d5
.9f0d						Assemble_cpy:
.9f0d		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f10		c0					.byte $c0
>9f11		d4					.byte $d4
.9f12						Assemble_cpx:
.9f12		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f15		e0					.byte $e0
>9f16		d0					.byte $d0
.9f17						Assemble_tsb:
.9f17		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f1a		00					.byte $00
>9f1b		50					.byte $50
.9f1c						Assemble_trb:
.9f1c		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f1f		10					.byte $10
>9f20		50					.byte $50
.9f21						Assemble_jsr:
.9f21		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f24		14					.byte $14
>9f25		10					.byte $10
.9f26						Assemble_jmp:
.9f26		20 c0 80	jsr $80c0		jsr	AssembleGroup2
>9f29		40					.byte $40
>9f2a		10					.byte $10
.9f2b						Assemble_bpl:
.9f2b		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f2e		10					.byte $10
.9f2f						Assemble_bmi:
.9f2f		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f32		30					.byte $30
.9f33						Assemble_bvc:
.9f33		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f36		50					.byte $50
.9f37						Assemble_bvs:
.9f37		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f3a		70					.byte $70
.9f3b						Assemble_bcc:
.9f3b		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f3e		90					.byte $90
.9f3f						Assemble_bcs:
.9f3f		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f42		b0					.byte $b0
.9f43						Assemble_bne:
.9f43		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f46		d0					.byte $d0
.9f47						Assemble_beq:
.9f47		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f4a		f0					.byte $f0
.9f4b						Assemble_bra:
.9f4b		20 11 81	jsr $8111		jsr	AssembleGroup3
>9f4e		80					.byte $80
.9f4f						Assemble_brk:
.9f4f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f52		00					.byte $00
.9f53						Assemble_php:
.9f53		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f56		08					.byte $08
.9f57						Assemble_clc:
.9f57		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f5a		18					.byte $18
.9f5b						Assemble_plp:
.9f5b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f5e		28					.byte $28
.9f5f						Assemble_sec:
.9f5f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f62		38					.byte $38
.9f63						Assemble_rti:
.9f63		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f66		40					.byte $40
.9f67						Assemble_pha:
.9f67		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f6a		48					.byte $48
.9f6b						Assemble_cli:
.9f6b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f6e		58					.byte $58
.9f6f						Assemble_phy:
.9f6f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f72		5a					.byte $5a
.9f73						Assemble_rts:
.9f73		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f76		60					.byte $60
.9f77						Assemble_pla:
.9f77		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f7a		68					.byte $68
.9f7b						Assemble_sei:
.9f7b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f7e		78					.byte $78
.9f7f						Assemble_ply:
.9f7f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f82		7a					.byte $7a
.9f83						Assemble_dey:
.9f83		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f86		88					.byte $88
.9f87						Assemble_txa:
.9f87		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f8a		8a					.byte $8a
.9f8b						Assemble_tya:
.9f8b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f8e		98					.byte $98
.9f8f						Assemble_txs:
.9f8f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f92		9a					.byte $9a
.9f93						Assemble_tay:
.9f93		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f96		a8					.byte $a8
.9f97						Assemble_tax:
.9f97		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f9a		aa					.byte $aa
.9f9b						Assemble_clv:
.9f9b		20 45 81	jsr $8145		jsr	AssembleGroup4
>9f9e		b8					.byte $b8
.9f9f						Assemble_tsx:
.9f9f		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fa2		ba					.byte $ba
.9fa3						Assemble_iny:
.9fa3		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fa6		c8					.byte $c8
.9fa7						Assemble_dex:
.9fa7		20 45 81	jsr $8145		jsr	AssembleGroup4
>9faa		ca					.byte $ca
.9fab						Assemble_cld:
.9fab		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fae		d8					.byte $d8
.9faf						Assemble_phx:
.9faf		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fb2		da					.byte $da
.9fb3						Assemble_stp:
.9fb3		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fb6		db					.byte $db
.9fb7						Assemble_inx:
.9fb7		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fba		e8					.byte $e8
.9fbb						Assemble_nop:
.9fbb		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fbe		ea					.byte $ea
.9fbf						Assemble_sed:
.9fbf		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fc2		f8					.byte $f8
.9fc3						Assemble_plx:
.9fc3		20 45 81	jsr $8145		jsr	AssembleGroup4
>9fc6		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9fc7						DecimalScalarTable:
>9fc7		66 66 66 66				.dword $66666666 ; 0.1
>9fcb		de					.byte $de
>9fcc		1f 85 eb 51				.dword $51eb851f ; 0.01
>9fd0		db					.byte $db
>9fd1		4c 37 89 41				.dword $4189374c ; 0.001
>9fd5		d8					.byte $d8
>9fd6		ac 8b db 68				.dword $68db8bac ; 0.0001
>9fda		d4					.byte $d4
>9fdb		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9fdf		d1					.byte $d1
>9fe0		83 de 1b 43				.dword $431bde83 ; 1e-06
>9fe4		ce					.byte $ce
>9fe5		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9fe9		ca					.byte $ca
>9fea		89 3b e6 55				.dword $55e63b89 ; 1e-08
>9fee		c7					.byte $c7
>9fef		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9ff3		c4					.byte $c4
>9ff4		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9ff8		c0					.byte $c0
>9ff9		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9ffd		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9ffe						SyntaxError:
.9ffe		a9 02		lda #$02		lda	#2
.a000		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.a003						RangeError:
.a003		a9 04		lda #$04		lda	#4
.a005		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.a008						TypeError:
.a008		a9 05		lda #$05		lda	#5
.a00a		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.a00d						ArgumentError:
.a00d		a9 07		lda #$07		lda	#7
.a00f		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.a012						NotDoneError:
.a012		a9 0c		lda #$0c		lda	#12
.a014		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.a017						ErrorText:
>a017		42 72 65 61 6b 00			.text	"Break",0
>a01d		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a025		72 72 6f 72 00
>a02a		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a032		20 62 79 20 7a 65 72 6f 00
>a03b		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a043		61 6e 67 65 00
>a048		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a050		6d 61 74 63 68 00
>a056		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a05e		65 6d 6f 72 79 00
>a064		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a06c		61 72 67 75 6d 65 6e 74 00
>a075		53 74 6f 70 00				.text	"Stop",0
>a07a		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a082		6f 6f 20 6c 6f 6e 67 00
>a08a		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a092		6e 20 66 61 69 6c 65 64 00
>a09b		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a0a3		61 74 61 00
>a0a7		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a0af		65 6e 74 65 64 00
>a0b5		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a0bd		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a0c9		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a0d1		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a0de		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a0e6		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a0f3		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a0fb		68 6f 75 74 20 57 68 69 6c 65 00
>a106		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a10e		68 6f 75 74 20 46 6f 72 00
>a117		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a11f		61 63 6b 20 66 75 6c 6c 00
>a128		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a130		75 63 74 75 72 65 00
>a137		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a13f		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a14c		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a154		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a162		41 72 72 61 79 20 73 69			.text	"Array size",0
>a16a		7a 65 00
>a16d		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a175		79 20 69 6e 64 65 78 00
>a17d		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a185		74 20 64 65 63 6c 61 72 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a190		41 6c 70 68 61 20 31 38			.text "Alpha 18 built 26-Dec-22. "
>a198		20 62 75 69 6c 74 20 32 36 2d 44 65 63 2d 32 32
>a1a8		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a1aa						RectangleCommand:
.a1aa		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a1ac		80 02		bra $a1b0			bra 	ShapeDrawCmd
.a1ae						CircleCommand:
.a1ae		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a1b0						ShapeDrawCmd:
.a1b0		20 3a a2	jsr $a23a			jsr 	RunGraphicsCommand
.a1b3						ShapeDraw:
.a1b3		0d 5e 06	ora $065e			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a1b6		4c 2e a2	jmp $a22e			jmp 	ExecuteGraphicCommand	 	; and complete
.a1b9						SpriteCommand:
.a1b9		a2 00		ldx #$00			ldx 	#0
.a1bb		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get image number.
.a1be		5a		phy				phy
.a1bf		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a1c1		a6 58		ldx $58				ldx 	NSMantissa0
.a1c3		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a1c5		b0 0d		bcs $a1d4			bcs 	_SCRange
.a1c7		a0 ff		ldy #$ff			ldy 	#255
.a1c9		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1cc		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a1ce		7a		ply				ply
.a1cf		20 3a a2	jsr $a23a			jsr 	RunGraphicsCommand
.a1d2		80 5a		bra $a22e			bra 	ExecuteGraphicCommand
.a1d4						_SCRange:
.a1d4		4c 03 a0	jmp $a003			jmp 	RangeError
.a1d7						ImageCommand:
.a1d7		a2 00		ldx #$00			ldx 	#0
.a1d9		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get image number.
.a1dc		20 3a a2	jsr $a23a			jsr 	RunGraphicsCommand
.a1df						ImageRunDraw:
.a1df		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a1e1		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1e4		ad 64 06	lda $0664			lda 	gxDrawScale
.a1e7		0a		asl a				asl 	a
.a1e8		0a		asl a				asl 	a
.a1e9		0a		asl a				asl 	a
.a1ea		a8		tay				tay
.a1eb		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a1ed		a6 58		ldx $58				ldx 	NSMantissa0
.a1ef		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a1f2		60		rts				rts
.a1f3						TextCommand:
.a1f3		a2 00		ldx #$00			ldx 	#0
.a1f5		20 d8 9d	jsr $9dd8			jsr 	EvaluateString 				; get text
.a1f8		20 3a a2	jsr $a23a			jsr 	RunGraphicsCommand
.a1fb						TextRunDraw:
.a1fb		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a1fd		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a200		a0 00		ldy #$00			ldy 	#0
.a202						_IRDLoop:
.a202		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a204		85 37		sta $37				sta 	zTemp0+1
.a206		a5 58		lda $58				lda 	NSMantissa0
.a208		85 36		sta $36				sta 	zTemp0
.a20a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a20c		f0 13		beq $a221			beq 	_IRDExit
.a20e		5a		phy				phy									; save string pos
.a20f		48		pha				pha 								; save char
.a210		ad 64 06	lda $0664			lda 	gxDrawScale 				; get scale
.a213		0a		asl a				asl 	a
.a214		0a		asl a				asl 	a
.a215		0a		asl a				asl 	a
.a216		a8		tay				tay
.a217		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a219		fa		plx				plx 								; char to draw
.a21a		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a21d		7a		ply				ply 								; restore string pos
.a21e		c8		iny				iny
.a21f		90 e1		bcc $a202			bcc 	_IRDLoop 					; go back if no error.
.a221						_IRDExit:
.a221		60		rts				rts
.a222						PlotCommand:
.a222		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a224		20 3a a2	jsr $a23a			jsr 	RunGraphicsCommand
.a227		80 05		bra $a22e			bra 	ExecuteGraphicCommand
.a229						LineCommand:
.a229		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a22b		20 3a a2	jsr $a23a			jsr 	RunGraphicsCommand
.a22e						ExecuteGraphicCommand:
.a22e		0d 5d 06	ora $065d			ora 	gxCommandID 				; make a full command
.a231		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; draw it and exit
.a234		b0 01		bcs $a237			bcs 	_EGCError
.a236		60		rts				rts
.a237						_EGCError:
.a237		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.a23a						RunGraphicsCommand:
.a23a		8d 5d 06	sta $065d			sta 	gxCommandID					; save TODO graphics command.
.a23d		68		pla				pla 								; pop handler address
.a23e		fa		plx				plx
.a23f		1a		inc a				inc 	a
.a240		d0 01		bne $a243			bne 	_RGINoCarry
.a242		e8		inx				inx
.a243						_RGINoCarry:
.a243		8d 62 06	sta $0662			sta 	gxHandler
.a246		8e 63 06	stx $0663			stx 	gxHandler+1
.a249						_RGICommandLoop:
.a249		b1 30		lda ($30),y			lda 	(codePtr),y
.a24b		c8		iny				iny
.a24c		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a24e		f0 53		beq $a2a3			beq 	_RGI_To
.a250		c9 c0		cmp #$c0			cmp 	#KWD_HERE 					; do it here.
.a252		f0 55		beq $a2a9			beq 	_RGI_Here
.a254		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a256		f0 3d		beq $a295			beq 	_RGI_Exit
.a258		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a25a		f0 39		beq $a295			beq 	_RGI_Exit
.a25c		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a25e		f0 3e		beq $a29e			beq 	_RGI_Frame
.a260		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a262		f0 33		beq $a297			beq 	_RGI_Solid
.a264		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a266		f0 4b		beq $a2b3			beq 	_RGI_By
.a268		c9 bc		cmp #$bc			cmp 	#KWD_FROM 					; from
.a26a		f0 17		beq $a283			beq 	_RGI_Move2
.a26c		c9 b9		cmp #$b9			cmp 	#KWD_DIM 					; dim (set scale)
.a26e		f0 62		beq $a2d2			beq 	_RGI_Dim
.a270		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a272		f0 74		beq $a2e8			beq 	_RGI_Colour
.a274		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a276		f0 70		beq $a2e8			beq 	_RGI_Colour
.a278		ae 5d 06	ldx $065d			ldx 	gxCommandID
.a27b		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a27d		d0 03		bne $a282			bne 	_RGI_Move 					; move
.a27f		4c 10 a3	jmp $a310			jmp		_RGI_SpriteInstructions
.a282						_RGI_Move:
.a282		88		dey				dey 								; unpick get.
.a283						_RGI_Move2:
.a283		20 36 a3	jsr $a336			jsr 	GCGetCoordinatePair 		; move to here
.a286		20 5d a3	jsr $a35d			jsr 	GCCopyPairToStore 			; save
.a289		5a		phy				phy
.a28a		20 53 a3	jsr $a353			jsr 	GCLoadAXY 					; load in
.a28d		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a28f		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a292		7a		ply				ply
.a293		80 b4		bra $a249			bra 	_RGICommandLoop 			; and go round
.a295						_RGI_Exit:
.a295		88		dey				dey 								; unpick : / EOL
.a296		60		rts				rts
.a297						_RGI_Solid:
.a297		a9 02		lda #$02			lda 	#2
.a299		8d 5e 06	sta $065e			sta 	gxFillSolid
.a29c		80 ab		bra $a249			bra 	_RGICommandLoop
.a29e						_RGI_Frame:
.a29e		9c 5e 06	stz $065e			stz 	gxFillSolid
.a2a1		80 a6		bra $a249			bra 	_RGICommandLoop
.a2a3						_RGI_To:
.a2a3		20 36 a3	jsr $a336			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a2a6		20 5d a3	jsr $a35d			jsr 	GCCopyPairToStore
.a2a9						_RGI_Here:
.a2a9		5a		phy				phy
.a2aa		20 53 a3	jsr $a353			jsr 	GCLoadAXY 					; load it into AXY
.a2ad		20 0d a3	jsr $a30d			jsr 	_RGICallHandler 			; go do whatever it is.
.a2b0		7a		ply				ply
.a2b1		80 96		bra $a249			bra 	_RGICommandLoop 			; and go round
.a2b3						_RGI_By:
.a2b3		20 43 a3	jsr $a343			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a2b6		18		clc				clc
.a2b7		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a2b9		6d 5f 06	adc $065f			adc 	gxXPos
.a2bc		8d 5f 06	sta $065f			sta 	gxXPos
.a2bf		a5 61		lda $61				lda 	NSMantissa1+1
.a2c1		6d 60 06	adc $0660			adc 	gxXPos+1
.a2c4		8d 60 06	sta $0660			sta 	gxXPos+1
.a2c7		a5 5a		lda $5a				lda 	NSMantissa0+2
.a2c9		18		clc				clc
.a2ca		6d 61 06	adc $0661			adc 	gxYPos
.a2cd		8d 61 06	sta $0661			sta 	gxYPos
.a2d0		80 d7		bra $a2a9			bra 	_RGI_Here
.a2d2						_RGI_Dim:
.a2d2		a2 01		ldx #$01			ldx	 	#1
.a2d4		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger
.a2d7		a5 59		lda $59				lda 	NSMantissa0+1
.a2d9		c9 00		cmp #$00			cmp 	#0
.a2db		f0 2d		beq $a30a			beq 	_RGIRange
.a2dd		c9 09		cmp #$09			cmp 	#8+1
.a2df		b0 29		bcs $a30a			bcs		_RGIRange
.a2e1		3a		dec a				dec 	a
.a2e2		8d 64 06	sta $0664			sta 	gxDrawScale
.a2e5		4c 49 a2	jmp $a249			jmp 	_RGICommandLoop
.a2e8						_RGI_Colour:
.a2e8		a2 01		ldx #$01			ldx 	#1 							; colour
.a2ea		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger
.a2ed		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a2ef		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.a2f2		b1 30		lda ($30),y			lda 	(codePtr),y
.a2f4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a2f6		d0 04		bne $a2fc			bne 	_RGICDefaultMode
.a2f8		c8		iny				iny
.a2f9		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger
.a2fc						_RGICDefaultMode:
.a2fc		5a		phy				phy
.a2fd		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a2ff		a6 59		ldx $59				ldx 	NSMantissa0+1
.a301		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a303		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a306		7a		ply				ply
.a307		4c 49 a2	jmp $a249			jmp 	_RGICommandLoop 			; and go round
.a30a						_RGIRange:
.a30a		4c 03 a0	jmp $a003			jmp 	RangeError
.a30d						_RGICallHandler:
.a30d		6c 62 06	jmp ($0662)			jmp 	(gxHandler)
.a310						_RGI_SpriteInstructions:
.a310		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a312		f0 07		beq $a31b			beq 	_RGISpriteOff
.a314		c9 c1		cmp #$c1			cmp 	#KWD_IMAGE
.a316		f0 13		beq $a32b			beq 	_RGISetImage
.a318		4c 82 a2	jmp $a282			jmp 	_RGI_Move
.a31b						_RGISpriteOff:
.a31b		5a		phy				phy
.a31c		a0 01		ldy #$01			ldy 	#1
.a31e		a2 00		ldx #$00			ldx 	#0
.a320						_RGIDoCommandLoop:
.a320		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a322		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a325		7a		ply				ply
.a326		b0 e2		bcs $a30a			bcs 	_RGIRange
.a328		4c 49 a2	jmp $a249			jmp 	_RGICommandLoop
.a32b						_RGISetImage:
.a32b		a2 01		ldx #$01			ldx 	#1
.a32d		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger
.a330		5a		phy				phy
.a331		aa		tax				tax
.a332		a0 00		ldy #$00			ldy 	#0
.a334		80 ea		bra $a320			bra 	_RGIDoCommandLoop
.a336						GCGetCoordinatePair:
.a336		a2 01		ldx #$01			ldx 	#1
.a338		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.a33b		20 24 8f	jsr $8f24			jsr 	CheckComma
.a33e		e8		inx				inx
.a33f		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.a342		60		rts				rts
.a343						GCSignedCoordinatePair:
.a343		a2 01		ldx #$01			ldx 	#1
.a345		20 0a 9e	jsr $9e0a			jsr 	Evaluate16BitIntegerSigned
.a348		20 24 8f	jsr $8f24			jsr 	CheckComma
.a34b		e8		inx				inx
.a34c		20 0a 9e	jsr $9e0a			jsr 	Evaluate16BitIntegerSigned
.a34f		60		rts				rts
.a350						_GCCPRange:
.a350		4c 03 a0	jmp $a003			jmp 	RangeError
.a353						GCLoadAXY:
.a353		ad 60 06	lda $0660			lda 	gxXPos+1
.a356		ae 5f 06	ldx $065f			ldx 	gxXPos
.a359		ac 61 06	ldy $0661			ldy 	gxYPos
.a35c		60		rts				rts
.a35d						GCCopyPairToStore:
.a35d		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a35f		8d 5f 06	sta $065f			sta 	gxXPos
.a362		a5 61		lda $61				lda 	NSMantissa1+1
.a364		8d 60 06	sta $0660			sta 	gxXPos+1
.a367		a5 5a		lda $5a				lda 	NSMantissa0+2
.a369		8d 61 06	sta $0661			sta 	gxYPos
.a36c		60		rts				rts
.065d						gxCommandID:
>065d								.fill 	1
.065e						gxFillSolid:
>065e								.fill 	1
.065f						gxXPos:
>065f								.fill 	2
.0661						gxYPos:
>0661								.fill 	1
.0662						gxHandler:
>0662								.fill 	2
.0664						gxDrawScale:
>0664								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a36d						BitmapCtrl:
.a36d		b1 30		lda ($30),y			lda 	(codePtr),y
.a36f		c8		iny				iny
.a370		a2 01		ldx #$01			ldx 	#1
.a372		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a374		f0 11		beq $a387			beq 	BitmapSwitch
.a376		ca		dex				dex
.a377		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a379		f0 0c		beq $a387			beq 	BitmapSwitch
.a37b		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get the colour
.a37e		5a		phy				phy
.a37f		aa		tax				tax
.a380		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a382		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a385		7a		ply				ply
.a386		60		rts				rts
.a387						BitmapSwitch:
.a387		5a		phy				phy
.a388		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a38a		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a38c		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a38f		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a391		a0 00		ldy #$00			ldy 	#0
.a393		a2 ff		ldx #$ff			ldx 	#$FF
.a395		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a398		9c 5e 06	stz $065e			stz 	gxFillSolid
.a39b		9c 5f 06	stz $065f			stz 	gxXPos
.a39e		9c 60 06	stz $0660			stz 	gxXPos+1
.a3a1		9c 61 06	stz $0661			stz 	gxYPos
.a3a4		9c 64 06	stz $0664			stz 	gxDrawScale
.a3a7		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a3a9		a2 00		ldx #$00			ldx 	#0
.a3ab		a0 00		ldy #$00			ldy 	#0
.a3ad		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a3b0		7a		ply				ply
.a3b1		60		rts				rts
.a3b2						SpritesCtrl:
.a3b2		b1 30		lda ($30),y			lda 	(codePtr),y
.a3b4		c8		iny				iny
.a3b5		a2 01		ldx #$01			ldx 	#1
.a3b7		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a3b9		f0 08		beq $a3c3			beq 	SpriteSwitch
.a3bb		ca		dex				dex
.a3bc		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a3be		f0 03		beq $a3c3			beq 	SpriteSwitch
.a3c0		4c fe 9f	jmp $9ffe			jmp 	SyntaxError
.a3c3						SpriteSwitch:
.a3c3		5a		phy				phy
.a3c4		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a3c6		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a3c8		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a3cb		7a		ply				ply
.a3cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a3cd						GfxCommand:
.a3cd		a2 00		ldx #$00			ldx 	#0
.a3cf		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; command
.a3d2		20 24 8f	jsr $8f24			jsr 	CheckComma
.a3d5		e8		inx				inx
.a3d6		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger 		; X
.a3d9		20 24 8f	jsr $8f24			jsr 	CheckComma
.a3dc		e8		inx				inx
.a3dd		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; Y
.a3e0		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a3e2		4a		lsr a				lsr 	a
.a3e3		d0 12		bne $a3f7			bne 	_GfxError
.a3e5		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a3e7		b0 0e		bcs $a3f7			bcs 	_GfxError 					; bit 7 should have been zero
.a3e9		5a		phy				phy 								; save pos
.a3ea		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a3ec		a6 59		ldx $59				ldx 	NSMantissa0+1
.a3ee		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a3f0		20 3f 80	jsr $803f			jsr 	GXGraphicDraw
.a3f3		b0 02		bcs $a3f7			bcs 	_GfxError
.a3f5		7a		ply				ply 								; restore pos and exit.
.a3f6		60		rts				rts
.a3f7						_GfxError:
.a3f7		4c 03 a0	jmp $a003			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a3fa						UnaryHit:
.a3fa		fa		plx				plx
.a3fb		a9 36		lda #$36			lda 	#zTemp0
.a3fd		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a400		20 24 8f	jsr $8f24			jsr 	CheckComma
.a403		e8		inx				inx
.a404		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a407		20 1c 8f	jsr $8f1c			jsr		CheckRightBracket
.a40a		ca		dex				dex 								; fix back up again.
.a40b		da		phx				phx 								; save X/Y
.a40c		5a		phy				phy
.a40d		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a40f		b5 58		lda $58,x			lda 	NSMantissa0,x
.a411		aa		tax				tax
.a412		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a414		20 3f 80	jsr $803f			jsr 	GXGraphicDraw 				; calculate result
.a417		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a418		7a		ply				ply 								; restore XY
.a419		fa		plx				plx
.a41a		20 82 9e	jsr $9e82			jsr 	NSMSetByte 					; return the hit result
.a41d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a41e						PaletteCommand:
.a41e		a2 00		ldx #$00			ldx 	#0
.a420		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; colour
.a423		20 24 8f	jsr $8f24			jsr 	CheckComma
.a426		e8		inx				inx
.a427		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger 		; r
.a42a		20 24 8f	jsr $8f24			jsr 	CheckComma
.a42d		e8		inx				inx
.a42e		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; g
.a431		20 24 8f	jsr $8f24			jsr 	CheckComma
.a434		e8		inx				inx
.a435		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; b
.a438		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a43a		85 36		sta $36				sta 	zTemp0
.a43c		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a43e		85 37		sta $37				sta 	zTemp0+1
.a440		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a442		26 37		rol $37				rol	 	zTemp0+1
.a444		06 36		asl $36				asl 	zTemp0
.a446		26 37		rol $37				rol	 	zTemp0+1
.a448		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a44a		85 01		sta $01				sta 	1
.a44c		5a		phy				phy
.a44d		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a44f		92 36		sta ($36)			sta 	(zTemp0)
.a451		a0 01		ldy #$01			ldy 	#1
.a453		a5 5a		lda $5a				lda 	NSMantissa0+2
.a455		91 36		sta ($36),y			sta 	(zTemp0),y
.a457		a5 59		lda $59				lda 	NSMantissa0+1
.a459		c8		iny				iny
.a45a		91 36		sta ($36),y			sta 	(zTemp0),y
.a45c		7a		ply				ply
.a45d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a45e						XLoadCommand:
.a45e		20 1a 8a	jsr $8a1a			jsr 	NewProgram
.a461		20 28 83	jsr $8328			jsr 	BackloadProgram
.a464		4c e7 83	jmp $83e7			jmp 	WarmStart
.a467						XGoCommand:
.a467		20 1a 8a	jsr $8a1a			jsr 	NewProgram
.a46a		20 28 83	jsr $8328			jsr 	BackloadProgram
.a46d		4c 98 8b	jmp $8b98			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a470						UnaryEvent:
.a470		fa		plx				plx
.a471		20 0a a5	jsr $a50a			jsr 	TimerToStackX 				; timer in +0
.a474		e8		inx				inx  								; put reference into +1
.a475		20 83 98	jsr $9883			jsr 	EvaluateTerm
.a478		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a47a		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a47c		d0 4c		bne $a4ca			bne 	_UEType
.a47e		e8		inx				inx 								; put the step in +2
.a47f		20 24 8f	jsr $8f24			jsr 	CheckComma
.a482		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger
.a485		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.a488		ca		dex				dex
.a489		ca		dex				dex
.a48a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a48c		85 36		sta $36				sta 	zTemp0
.a48e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a490		85 37		sta $37				sta 	zTemp0+1
.a492		5a		phy				phy
.a493		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a495		b1 36		lda ($36),y			lda 	(zTemp0),y
.a497		30 2d		bmi $a4c6			bmi 	_UEFalse 					; exit if signed.
.a499		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a49b		b5 58		lda $58,x			lda 	NSMantissa0,x
.a49d		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a49f		c8		iny				iny
.a4a0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4a2		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a4a4		c8		iny				iny
.a4a5		b5 68		lda $68,x			lda 	NSMantissa2,x
.a4a7		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a4a9		90 1b		bcc $a4c6			bcc 	_UEFalse 					; no, return FALSE.
.a4ab		18		clc				clc
.a4ac		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a4ae		b5 58		lda $58,x			lda 	NSMantissa0,x
.a4b0		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a4b2		91 36		sta ($36),y			sta 	(zTemp0),y
.a4b4		c8		iny				iny
.a4b5		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4b7		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a4b9		91 36		sta ($36),y			sta 	(zTemp0),y
.a4bb		c8		iny				iny
.a4bc		b5 68		lda $68,x			lda 	NSMantissa2,x
.a4be		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a4c0		91 36		sta ($36),y			sta 	(zTemp0),y
.a4c2		7a		ply				ply
.a4c3		4c a2 8f	jmp $8fa2			jmp 	ReturnTrue
.a4c6						_UEFalse:
.a4c6		7a		ply				ply 								; restore Y
.a4c7		4c ad 8f	jmp $8fad			jmp 	ReturnFalse 				; and return False
.a4ca						_UEType:
.a4ca		4c 08 a0	jmp $a008			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a4cd						UnaryJoyX:
.a4cd		18		clc				clc
.a4ce		80 01		bra $a4d1			bra 	JoyMain
.a4d0						UnaryJoyY:
.a4d0		38		sec				sec
.a4d1						JoyMain:
.a4d1		fa		plx				plx 								; get pos
.a4d2		08		php				php 								; save carry (set for Y)
.a4d3		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a4d6		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.a4d9		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a4dc		28		plp				plp
.a4dd		b0 02		bcs $a4e1			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a4df		4a		lsr a				lsr 	a
.a4e0		4a		lsr a				lsr 	a
.a4e1						_JMNoShift:
.a4e1		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a4e2		b0 07		bcs $a4eb			bcs 	JMIsLeft
.a4e4		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a4e5		b0 07		bcs $a4ee			bcs 	JMIsRight
.a4e7		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; zero result
.a4ea		60		rts				rts
.a4eb						JMIsLeft:
.a4eb		4c a2 8f	jmp $8fa2			jmp 	ReturnTrue
.a4ee						JMIsRight:
.a4ee		a9 01		lda #$01			lda 	#1
.a4f0		20 82 9e	jsr $9e82			jsr 	NSMSetByte
.a4f3		60		rts				rts
.a4f4						UnaryJoyB:
.a4f4		fa		plx				plx 								; get pos
.a4f5		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a4f8		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.a4fb		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a4fe		29 10		and #$10			and 	#$10
.a500		d0 e9		bne $a4eb			bne 	JMIsLeft
.a502		20 80 9e	jsr $9e80			jsr 	NSMSetZero
.a505		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a506						UnaryTimer:
.a506		fa		plx				plx
.a507		20 1c 8f	jsr $8f1c			jsr 	CheckRightBracket
.a50a						TimerToStackX:
.a50a		20 80 9e	jsr $9e80			jsr 	NSMSetZero 					; zero result
.a50d		64 01		stz $01				stz 	1 							; access I/O
.a50f		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a512		95 58		sta $58,x			sta 	NSMantissa0,x
.a514		ad 5a d6	lda $d65a			lda 	$D65A
.a517		95 60		sta $60,x			sta 	NSMantissa1,x
.a519		ad 5b d6	lda $d65b			lda 	$D65B
.a51c		95 68		sta $68,x			sta 	NSMantissa2,x
.a51e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						RESERVED    .word   ?
>0002						MOUSEEV     .word   ?   ; Mouse event.
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click count
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a51f						MemoryDeleteLine:
.a51f		20 3e a5	jsr $a53e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a522		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a524		a8		tay				tay
.a525						_MDDLLoop:
.a525		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a527		92 30		sta ($30)			sta 	(codePtr)
.a529		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a52b		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a52d		d0 07		bne $a536			bne 	_MDLDLNext
.a52f		a5 31		lda $31				lda 	codePtr+1
.a531		c5 3b		cmp $3b				cmp 	zTemp2+1
.a533		d0 01		bne $a536			bne 	_MDLDLNext
.a535						_MDDLExit:
.a535		60		rts				rts
.a536						_MDLDLNext:
.a536		e6 30		inc $30				inc 	codePtr						; next byte
.a538		d0 eb		bne $a525			bne 	_MDDLLoop
.a53a		e6 31		inc $31				inc 	codePtr+1
.a53c		80 e7		bra $a525			bra 	_MDDLLoop
.a53e						IMemoryFindEnd:
.a53e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a540		85 3a		sta $3a				sta 	0+zTemp2
.a542		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a544		85 3b		sta $3b				sta 	1+zTemp2
.a546						_MDLFELoop:
.a546		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a548		f0 0b		beq $a555			beq 	_MDLFEExit
.a54a		18		clc				clc
.a54b		65 3a		adc $3a				adc 	zTemp2
.a54d		85 3a		sta $3a				sta 	zTemp2
.a54f		90 f5		bcc $a546			bcc 	_MDLFELoop
.a551		e6 3b		inc $3b				inc 	zTemp2+1
.a553		80 f1		bra $a546			bra 	_MDLFELoop
.a555						_MDLFEExit:
.a555		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a556						MemoryInsertLine:
.a556		08		php				php
.a557		20 3e a5	jsr $a53e			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a55a		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a55c		1a		inc a				inc 	a
.a55d		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a55f		b0 36		bcs $a597			bcs 	_MDLIError 					; no, fail.
.a561		28		plp				plp 								; do at a specific point or the end ?
.a562		90 08		bcc $a56c			bcc 	_MDLIFound 					; if specific point already set.
.a564		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a566		85 30		sta $30				sta 	codePtr 					; end.
.a568		a5 3b		lda $3b				lda 	zTemp2+1
.a56a		85 31		sta $31				sta 	codePtr+1
.a56c						_MDLIFound:
.a56c		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a56f		a8		tay				tay
.a570						_MDLIInsert:
.a570		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a572		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a574		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a576		c5 3a		cmp $3a				cmp 	zTemp2
.a578		d0 06		bne $a580			bne 	_MDLINext
.a57a		a5 31		lda $31				lda 	codePtr+1
.a57c		c5 3b		cmp $3b				cmp 	zTemp2+1
.a57e		f0 0a		beq $a58a			beq 	_MDLIHaveSpace
.a580						_MDLINext:
.a580		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a582		d0 02		bne $a586			bne 	_MDLINoBorrow
.a584		c6 3b		dec $3b				dec 	zTemp2+1
.a586						_MDLINoBorrow:
.a586		c6 3a		dec $3a				dec 	zTemp2
.a588		80 e6		bra $a570			bra 	_MDLIInsert
.a58a						_MDLIHaveSpace:
.a58a		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a58d		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a58e						_MDLICopy:
.a58e		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a591		91 30		sta ($30),y			sta 	(codePtr),y
.a593		88		dey				dey
.a594		10 f8		bpl $a58e			bpl 	_MDLICopy
.a596		60		rts				rts
.a597						_MDLIError:
.a597		a9 06		lda #$06		lda	#6
.a599		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.a59c						MDLAppendLine:
.a59c		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a59e		85 36		sta $36				sta 	zTemp0
.a5a0		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5a2		85 38		sta $38				sta 	0+zTemp1
.a5a4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5a6		85 39		sta $39				sta 	1+zTemp1
.a5a8		b2 38		lda ($38)			lda 	(zTemp1)
.a5aa		d0 0a		bne $a5b6			bne 	_MDLANoInitialise
.a5ac		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5ae		8d 65 06	sta $0665			sta 	0+AppendPointer
.a5b1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5b3		8d 66 06	sta $0666			sta 	1+AppendPointer
.a5b6						_MDLANoInitialise:
.a5b6		18		clc				clc
.a5b7		ad 65 06	lda $0665			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a5ba		85 38		sta $38				sta 	zTemp1
.a5bc		72 36		adc ($36)			adc 	(zTemp0)
.a5be		8d 65 06	sta $0665			sta 	AppendPointer
.a5c1		ad 66 06	lda $0666			lda 	AppendPointer+1
.a5c4		85 39		sta $39				sta 	zTemp1+1
.a5c6		69 00		adc #$00			adc 	#0
.a5c8		8d 66 06	sta $0666			sta 	AppendPointer+1
.a5cb		a0 00		ldy #$00			ldy 	#0
.a5cd						_MDLACopy:
.a5cd		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a5cf		91 38		sta ($38),y			sta 	(zTemp1),y
.a5d1		c8		iny				iny
.a5d2		98		tya				tya
.a5d3		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a5d5		d0 f6		bne $a5cd			bne 	_MDLACopy
.a5d7		a9 00		lda #$00			lda 	#0 							; end of program.
.a5d9		91 38		sta ($38),y			sta 	(zTemp1),y
.a5db		60		rts				rts
.0665						AppendPointer:
>0665								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a5dc						MemoryNew:
.a5dc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5de		85 30		sta $30				sta 	codePtr
.a5e0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5e2		85 31		sta $31				sta 	codePtr+1
.a5e4		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a5e6		92 30		sta ($30)			sta 	(codePtr)
.a5e8		60		rts				rts
.a5e9						MemoryInline:
.a5e9		98		tya				tya 								; put address into stack,x
.a5ea		18		clc				clc  								; get the offset, add codePtr
.a5eb		65 30		adc $30				adc 	codePtr
.a5ed		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a5ef		a5 31		lda $31				lda 	codePtr+1
.a5f1		69 00		adc #$00			adc 	#0
.a5f3		95 60		sta $60,x			sta 	NSMantissa1,x
.a5f5		74 68		stz $68,x			stz 	NSMantissa2,x
.a5f7		74 70		stz $70,x			stz 	NSMantissa3,x
.a5f9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a5fa						MemorySearch:
.a5fa		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a5fc		86 37		stx $37				stx 	zTemp0+1
.a5fe		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a600		85 30		sta $30				sta 	codePtr
.a602		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a604		85 31		sta $31				sta 	codePtr+1
.a606						_MTAXLoop:
.a606		b2 30		lda ($30)			lda 	(codePtr)
.a608		18		clc				clc
.a609		f0 21		beq $a62c			beq 	_MTAXExit 					; reached end, exit with CC.
.a60b		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a60d		b1 30		lda ($30),y			lda 	(codePtr),y
.a60f		38		sec				sec
.a610		e5 36		sbc $36				sbc 	zTemp0
.a612		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a614		c8		iny				iny 								; do the MSB
.a615		b1 30		lda ($30),y			lda 	(codePtr),y
.a617		e5 37		sbc $37				sbc 	zTemp0+1
.a619		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a61b		f0 0f		beq $a62c			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a61d		b0 0d		bcs $a62c			bcs 	_MTAXExit 					; current < required exit
.a61f		18		clc				clc
.a620		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a622		65 30		adc $30				adc 	codePtr
.a624		85 30		sta $30				sta 	codePtr
.a626		90 02		bcc $a62a			bcc 	_CREExit
.a628		e6 31		inc $31				inc 	codePtr+1 					; carry
.a62a						_CREExit:
.a62a		80 da		bra $a606			bra 	_MTAXLoop
.a62c						_MTAXExit:
.a62c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a62d						UpdateFont:
.a62d		a5 01		lda $01				lda 	1 							; save position
.a62f		48		pha				pha
.a630		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a632		85 01		sta $01				sta 	1
.a634		a9 5b		lda #$5b			lda 	#((FontBinary) & $FF)
.a636		85 36		sta $36				sta 	0+zTemp0
.a638		a9 a6		lda #$a6			lda 	#((FontBinary) >> 8)
.a63a		85 37		sta $37				sta 	1+zTemp0
.a63c		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a63e		85 38		sta $38				sta 	0+zTemp1
.a640		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a642		85 39		sta $39				sta 	1+zTemp1
.a644						_UFCopy1:
.a644		a0 00		ldy #$00			ldy 	#0
.a646						_UFCopy2:
.a646		b1 36		lda ($36),y			lda 	(zTemp0),y
.a648		91 38		sta ($38),y			sta 	(zTemp1),y
.a64a		c8		iny				iny
.a64b		d0 f9		bne $a646			bne 	_UFCopy2
.a64d		e6 37		inc $37				inc 	zTemp0+1
.a64f		e6 39		inc $39				inc 	zTemp1+1
.a651		a5 39		lda $39				lda 	zTemp1+1
.a653		c9 c8		cmp #$c8			cmp 	#$C8
.a655		d0 ed		bne $a644			bne 	_UFCopy1
.a657		68		pla				pla 								; restore.
.a658		85 01		sta $01				sta 	1
.a65a		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a65b						FontBinary:
>a65b		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a663		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a673		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a683		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a693		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a6a3		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a6b3		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a6c3		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a6d3		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a6e3		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a6f3		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a703		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a713		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a723		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a733		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a743		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a753		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a763		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a773		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a783		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a793		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a7a3		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a7b3		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a7c3		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a7d3		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a7e3		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a7f3		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a803		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a813		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a823		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a833		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a843		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a853		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a863		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a873		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>a883		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a893		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a8a3		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a8b3		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a8c3		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a8d3		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a8e3		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a8f3		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a903		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>a913		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>a923		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>a933		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a943		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>a953		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>a963		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>a973		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>a983		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>a993		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>a9a3		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>a9b3		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>a9c3		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>a9d3		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>a9e3		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>a9f3		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aa03		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>aa13		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>aa23		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>aa33		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>aa43		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>aa53		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>aa63		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>aa73		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>aa83		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aa93		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>aaa3		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>aab3		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>aac3		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>aad3		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>aae3		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>aaf3		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ab03		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ab13		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ab23		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ab33		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ab43		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ab53		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ab63		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ab73		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ab83		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ab93		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>aba3		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>abb3		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>abc3		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>abd3		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>abe3		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>abf3		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ac03		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ac13		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ac23		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ac33		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ac43		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ac53		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ac63		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ac73		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ac83		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ac93		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>aca3		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>acb3		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>acc3		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>acd3		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>ace3		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>acf3		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>ad03		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ad13		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>ad23		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>ad33		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>ad43		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>ad53		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>ad63		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>ad73		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>ad83		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ad93		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ada3		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>adb3		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>adc3		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>add3		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>ade3		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>adf3		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>ae03		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>ae13		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>ae23		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>ae33		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>ae43		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>ae53		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.ae5b						PingCommand:
.ae5b		5a		phy				phy 								; save pos
.ae5c		a9 01		lda #$01			lda 	#1 						; push channel.
.ae5e		48		pha				pha
.ae5f		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.ae61		a2 03		ldx #$03			ldx 	#3 						; length
.ae63		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae65		80 24		bra $ae8b			bra 	SoundEffectCommand
.ae67						ZapCommand:
.ae67		5a		phy				phy 								; save pos
.ae68		a9 01		lda #$01			lda 	#1 						; push channel.
.ae6a		48		pha				pha
.ae6b		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.ae6d		a2 05		ldx #$05			ldx 	#5 						; length
.ae6f		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.ae71		80 18		bra $ae8b			bra 	SoundEffectCommand
.ae73						ShootCommand:
.ae73		5a		phy				phy 								; save pos
.ae74		a9 03		lda #$03			lda 	#3 						; push channel.
.ae76		48		pha				pha
.ae77		a9 20		lda #$20			lda 	#32 						; pitch LSB
.ae79		a2 02		ldx #$02			ldx 	#2 						; length
.ae7b		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae7d		80 0c		bra $ae8b			bra 	SoundEffectCommand
.ae7f						Explode:
.ae7f		5a		phy				phy 								; save pos
.ae80		a9 03		lda #$03			lda 	#3 						; push channel.
.ae82		48		pha				pha
.ae83		a9 50		lda #$50			lda 	#80 						; pitch LSB
.ae85		a2 05		ldx #$05			ldx 	#5 						; length
.ae87		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.ae89		80 00		bra $ae8b			bra 	SoundEffectCommand
.ae8b						SoundEffectCommand:
.ae8b		8d 67 06	sta $0667			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.ae8e		9c 68 06	stz $0668			stz 	SoundCommandBlock+1
.ae91		a9 0f		lda #$0f			lda 	#15
.ae93		8d 69 06	sta $0669			sta 	SoundCommandBlock+2
.ae96		8e 6a 06	stx $066a			stx 	SoundCommandBlock+3
.ae99		8c 6b 06	sty $066b			sty 	SoundCommandBlock+4
.ae9c		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.ae9f		68		pla				pla
.aea0		09 10		ora #$10			ora 	#$10  						; execute command $11
.aea2		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.aea4		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.aea6		20 49 80	jsr $8049			jsr 	SNDCommand
.aea9		7a		ply				ply
.aeaa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.aeab						UnaryPlaying:
.aeab		fa		plx				plx
.aeac		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; get channel #
.aeaf		48		pha				pha
.aeb0		20 1c 8f	jsr $8f1c			jsr		CheckRightBracket
.aeb3		68		pla				pla
.aeb4		c9 04		cmp #$04			cmp 	#4
.aeb6		b0 0c		bcs $aec4			bcs 	_UPNotPlaying
.aeb8		09 20		ora #$20			ora 	#$20 						; query playing ?
.aeba		20 49 80	jsr $8049			jsr 	SNDCommand
.aebd		c9 00		cmp #$00			cmp 	#0
.aebf		f0 03		beq $aec4			beq 	_UPNotPlaying
.aec1		4c a2 8f	jmp $8fa2			jmp 	ReturnTrue
.aec4						_UPNotPlaying:
.aec4		4c ad 8f	jmp $8fad			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.aec7						SoundCommand:
.aec7		b1 30		lda ($30),y			lda 	(codePtr),y
.aec9		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.aecb		d0 09		bne $aed6			bne 	_SNDMain
.aecd		c8		iny				iny 								; skip OFF
.aece		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.aed0		5a		phy				phy
.aed1		20 49 80	jsr $8049			jsr 	SNDCommand
.aed4		7a		ply				ply
.aed5		60		rts				rts
.aed6						_SNDMain:
.aed6		a2 00		ldx #$00			ldx 	#0
.aed8		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; channel
.aedb		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.aedd		b0 4b		bcs $af2a			bcs 	_SndError
.aedf		e8		inx				inx 								; do the rest in slot 1.
.aee0		20 24 8f	jsr $8f24			jsr 	CheckComma
.aee3		20 00 9e	jsr $9e00			jsr 	Evaluate16BitInteger 		; Pitch
.aee6		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.aee8		c9 10		cmp #$10			cmp 	#16
.aeea		b0 3e		bcs $af2a			bcs 	_SndError
.aeec		8d 68 06	sta $0668			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.aeef		b5 58		lda $58,x			lda 	NSMantissa0,x
.aef1		8d 67 06	sta $0667			sta 	SoundCommandBlock
.aef4		20 24 8f	jsr $8f24			jsr 	CheckComma
.aef7		20 1b 9e	jsr $9e1b			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.aefa		8d 6a 06	sta $066a			sta 	SoundCommandBlock+3
.aefd		a9 0f		lda #$0f			lda 	#15
.aeff		8d 69 06	sta $0669			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.af02		9c 6b 06	stz $066b			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.af05		9c 6c 06	stz $066c			stz 	SoundCommandBlock+5
.af08		b1 30		lda ($30),y			lda 	(codePtr),y
.af0a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.af0c		d0 0e		bne $af1c			bne 	_SNDPlay
.af0e		c8		iny				iny
.af0f		20 0a 9e	jsr $9e0a			jsr 	Evaluate16BitIntegerSigned 	; Slide
.af12		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.af14		8d 6b 06	sta $066b			sta 	SoundCommandBlock+4
.af17		b5 60		lda $60,x			lda 	NSMantissa1,x
.af19		8d 6c 06	sta $066c			sta 	SoundCommandBlock+5
.af1c						_SNDPlay:
.af1c		5a		phy				phy
.af1d		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.af1f		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.af21		a2 67		ldx #$67			ldx 	#(SoundCommandBlock & $FF)
.af23		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.af25		20 49 80	jsr $8049			jsr 	SNDCommand
.af28		7a		ply				ply
.af29		60		rts				rts
.af2a						_SndError:
.af2a		4c 03 a0	jmp $a003			jmp 	RangeError
.0667						SoundCommandBlock:
>0667								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.af2d						StackPushByte:
.af2d		48		pha				pha 								; save byte on stack
.af2e		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.af30		d0 08		bne $af3a			bne 	_SPBNoBorrow
.af32		c6 35		dec $35				dec 	basicStack+1 				; borrow
.af34		a5 35		lda $35				lda 	basicStack+1 				; check range.
.af36		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af38		90 06		bcc $af40			bcc 	_SPBMemory
.af3a						_SPBNoBorrow:
.af3a		c6 34		dec $34				dec 	basicStack
.af3c		68		pla				pla 								; get back and write
.af3d		92 34		sta ($34)			sta 	(basicStack)
.af3f		60		rts				rts
.af40						_SPBMemory:
.af40		a9 12		lda #$12		lda	#18
.af42		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.af45						StackPopByte:
.af45		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.af47		e6 34		inc $34				inc 	basicStack
.af49		d0 02		bne $af4d			bne 	_SPBNoCarry
.af4b		e6 35		inc $35				inc 	basicStack+1
.af4d						_SPBNoCarry:
.af4d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.af4e						StackOpen:
.af4e		48		pha				pha 								; save frame byte
.af4f		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.af51		0a		asl a				asl 	a 							; claim twice this for storage
.af52		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.af54		38		sec				sec 								; so basically subtracting from
.af55		65 34		adc $34				adc 	basicStack 	 				; basicStack
.af57		85 34		sta $34				sta 	basicStack
.af59		b0 09		bcs $af64			bcs 	_SONoBorrow
>af5b		db						.byte 	$DB 						; causes a break in the emulator
.af5c		c6 35		dec $35				dec 	basicStack+1
.af5e		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.af60		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.af62		90 04		bcc $af68			bcc 	_SOMemory
.af64						_SONoBorrow:
.af64		68		pla				pla 								; get marker back and write at TOS
.af65		92 34		sta ($34)			sta 	(basicStack)
.af67		60		rts				rts
.af68						_SOMemory:
.af68		a9 12		lda #$12		lda	#18
.af6a		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.af6d						StackClose:
.af6d		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.af6f		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.af71		0a		asl a				asl 	a 							; claim twice this.
.af72		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.af74		85 34		sta $34				sta 	basicStack
.af76		90 02		bcc $af7a			bcc 	_SCExit
.af78		e6 35		inc $35				inc 	basicStack+1
.af7a						_SCExit:
.af7a		60		rts				rts
.af7b						StackCheckFrame:
.af7b		48		pha				pha
.af7c						_StackRemoveLocals:
.af7c		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.af7e		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.af80		b0 05		bcs $af87			bcs 	_SCNoLocal
.af82		20 c9 89	jsr $89c9			jsr 	LocalPopValue 				; restore the local value
.af85		80 f5		bra $af7c			bra 	_StackRemoveLocals 			; gr round again
.af87						_SCNoLocal:
.af87		68		pla				pla 								; get the frame check.
.af88		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.af8a		29 f0		and #$f0			and 	#$F0 						; check type bits
.af8c		d0 01		bne $af8f			bne 	_SCFError 					; different, we have structures mixed up
.af8e		60		rts				rts
.af8f						_SCFError:
.af8f		8a		txa				txa 								; report error X
.af90		4c 35 8f	jmp $8f35			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.af93						STKSaveCodePosition:
.af93		5a		phy				phy
.af94		98		tya				tya 								; save Y
.af95		a0 05		ldy #$05			ldy 	#5
.af97		91 34		sta ($34),y			sta 	(basicStack),y
.af99		88		dey				dey 								; save Code Pointer
.af9a						_STKSaveLoop:
.af9a		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.af9d		91 34		sta ($34),y			sta 	(basicStack),y
.af9f		88		dey				dey
.afa0		d0 f8		bne $af9a			bne 	_STKSaveLoop
.afa2		7a		ply				ply
.afa3		60		rts				rts
.afa4						STKLoadCodePosition:
.afa4		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.afa6						_STKLoadLoop:
.afa6		b1 34		lda ($34),y			lda 	(basicStack),y
.afa8		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.afab		c8		iny				iny
.afac		c0 05		cpy #$05			cpy 	#5
.afae		d0 f6		bne $afa6			bne 	_STKLoadLoop
.afb0		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.afb2		a8		tay				tay
.afb3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.afb4						StackReset:
.afb4		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.afb6		85 34		sta $34				sta 	0+basicStack
.afb8		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.afba		85 35		sta $35				sta 	1+basicStack
.afbc		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.afbe		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.afc0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.afc1						StringConcrete:
.afc1		5a		phy				phy 								; save position on stack
.afc2		20 6f 9a	jsr $9a6f			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afc5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.afc7		85 38		sta $38				sta 	zTemp1
.afc9		b5 60		lda $60,x			lda 	NSMantissa1,x
.afcb		85 39		sta $39				sta 	zTemp1+1
.afcd		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.afcf						_SALength:
.afcf		c8		iny				iny
.afd0		b1 38		lda ($38),y			lda 	(zTemp1),y
.afd2		d0 fb		bne $afcf			bne 	_SALength
.afd4		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.afd6		b0 3d		bcs $b015			bcs 	_SALengthError
.afd8		98		tya				tya 				 				; length of the new string
.afd9		18		clc				clc
.afda		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.afdc		90 02		bcc $afe0			bcc 	_SAHaveLength
.afde		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.afe0						_SAHaveLength:
.afe0		48		pha				pha 								; save length.
.afe1		38		sec				sec
.afe2		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.afe4		6d 0e 04	adc $040e			adc 	stringMemory
.afe7		8d 0e 04	sta $040e			sta 	stringMemory
.afea		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.afec		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.afee		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.aff0		6d 0f 04	adc $040f			adc 	stringMemory+1
.aff3		8d 0f 04	sta $040f			sta 	stringMemory+1
.aff6		85 3b		sta $3b				sta 	zTemp2+1
.aff8		95 60		sta $60,x			sta 	NSMantissa1,x
.affa		68		pla				pla 								; save length-3 (chars allowed) in first byte
.affb		38		sec				sec
.affc		e9 03		sbc #$03			sbc 	#3
.affe		92 3a		sta ($3a)			sta 	(zTemp2)
.b000		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b002		a0 01		ldy #$01			ldy 	#1
.b004		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b006						_SACopyNewString:
.b006		a0 00		ldy #$00			ldy 	#0
.b008						_SACopyNSLoop:
.b008		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b00a		c8		iny				iny 								; write two on in string storage
.b00b		c8		iny				iny
.b00c		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b00e		88		dey				dey 								; this makes it one one.
.b00f		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b011		d0 f5		bne $b008			bne 	_SACopyNSLoop
.b013		7a		ply				ply
.b014		60		rts				rts
.b015						_SALengthError:
.b015		a9 09		lda #$09		lda	#9
.b017		4c 35 8f	jmp $8f35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b01a						StringSystemInitialise:
.b01a		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b01c		8d 0e 04	sta $040e			sta 	0+stringMemory
.b01f		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b021		8d 0f 04	sta $040f			sta 	1+stringMemory
.b024		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b027		60		rts				rts
.b028						StringSpaceInitialise:
.b028		20 6f 9a	jsr $9a6f			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b02b		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b02d		8d 10 04	sta $0410			sta 	stringInitialised
.b030		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b033		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b036		ad 0f 04	lda $040f			lda 	stringMemory+1
.b039		3a		dec a				dec 	a
.b03a		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b03d		60		rts				rts
.b03e						StringTempAllocate:
.b03e		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b040		b0 30		bcs $b072			bcs 	_STALength
.b042		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b045		30 05		bmi $b04c			bmi 	_STAAllocate
.b047		48		pha				pha 								; save value to subtract.
.b048		20 28 b0	jsr $b028			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b04b		68		pla				pla 								; restore it
.b04c						_STAAllocate:
.b04c		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b04e		18		clc				clc  								; deliberate allows one more
.b04f		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b052		8d 11 04	sta $0411			sta 	stringTempPointer
.b055		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b057		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b059		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b05c		69 ff		adc #$ff			adc 	#$FF
.b05e		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b061		85 3d		sta $3d				sta 	zsTemp+1
.b063		95 60		sta $60,x			sta 	NSMantissa1,x
.b065		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b067		74 70		stz $70,x			stz 	NSMantissa3,x
.b069		a9 10		lda #$10			lda 	#NSTString
.b06b		95 50		sta $50,x			sta 	NSStatus,x
.b06d		a9 00		lda #$00			lda 	#0 							; clear the target string
.b06f		92 3c		sta ($3c)			sta 	(zsTemp)
.b071		60		rts				rts
.b072						_STALength:
.b072		a9 09		lda #$09		lda	#9
.b074		4c 35 8f	jmp $8f35		jmp	ErrorHandler
.b077						StringTempWrite:
.b077		48		pha				pha
.b078		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b07a		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b07c		d0 02		bne $b080			bne 	_STWNoCarry
.b07e		e6 3d		inc $3d				inc 	zsTemp+1
.b080						_STWNoCarry:
.b080		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b082		92 3c		sta ($3c)			sta 	(zsTemp)
.b084		68		pla				pla
.b085		60		rts				rts

;******  Return to file: _basic.asm

.b086						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 6f 06	lda $066f			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 6e 06	sty $066e			sty 	EXTColumn
.c022	a022	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6d 06	inc $066d			inc 	EXTRow  					; bump row
.c02a	a02a	9c 6e 06	stz $066e			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6d 06	lda $066d			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 71 06	cmp $0671			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 6e 06	dec $066e			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 6e 06	stz $066e			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6d 06	dec $066d			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6d 06	lda $066d			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6d 06	dec $066d			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 70 06	sbc $0670			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 6e 06	sty $066e			sty 	EXTColumn
.c081	a081	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 6e 06	sty $066e			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 71 06	lda $0671			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6d 06	cmp $066d			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6d 06	inc $066d			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 70 06	adc $0670			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 6e 06	lda $066e			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 6e 06	sta $066e			sta 	EXTColumn
.c0be	a0be	cd 70 06	cmp $0670			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 6e 06	dec $066e			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 70 06	cpy $0670			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackSpace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 6f 06	and $066f			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 6f 06	sta $066f			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 6f 06	ora $066f			ora 	EXTTextColour
.c131	a131	8d 6f 06	sta $066f			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 6f 06	lda $066f			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 6f 06	lda $066f			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 6d 06	stz $066d			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 6e 06	stz $066e			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 6e 06	lda $066e			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 6d 06	lda $066d			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 ca bb	jsr $bbca			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 6e 06	lda $066e			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 6e 06	ldy $066e			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 70 06	cpy $0670			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 6e 06	cpy $066e			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 70 06	lda $0670			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 70 06	ldy $0670			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066d						EXTRow:
>066d								.fill 	1
.066e						EXTColumn:
>066e								.fill 	1
.066f						EXTTextColour:
>066f								.fill 	1
.0670						EXTScreenWidth:
>0670								.fill 	1
.0671						EXTScreenHeight:
>0671								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 6f 06	sta $066f			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 70 06	sta $0670			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 71 06	sta $0671			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 6d 06	lda $066d			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0672						gxCurrentX:
>0672								.fill 	2
.0674						gxCurrentY:
>0674								.fill 	2
.0676						gxLastX:
>0676								.fill 	2
.0678						gxLastY:
>0678								.fill 	2
.067a						gxX0:
>067a								.fill 	2
.067c						gxY0:
>067c								.fill 	2
.067e						gxX1:
>067e								.fill 	2
.0680						gxY1:
>0680								.fill 	2
.0682						gxSpritesOn:
>0682								.fill 	1
.0683						gxBitmapsOn:
>0683								.fill 	1
.0684						gxBasePage:
>0684								.fill 	1
.0685						gxSpritePage:
>0685								.fill 	1
.0686						gxHeight:
>0686								.fill 	1
.0687						gxMode:
>0687								.fill 	1
.0688						gxColour:
>0688								.fill 	1
.0689						gxEORValue:
>0689								.fill 	1
.068a						gxANDValue:
>068a								.fill 	1
.068b						gxOriginalLUTValue:
>068b								.fill 	1
.068c						gxOffset:
>068c								.fill 	1
.068d						GSCurrentSpriteID:
>068d								.fill 	1
.068e						GSCurrentSpriteAddr:
>068e								.fill 	2
.0690						gxSpriteOffsetBase:
>0690								.fill 	2
.0692						gxSpriteLow:
>0692								.fill 	64
.06d2						gxSpriteHigh:
>06d2								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 76 06	sta $0676,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 74 06	sta $0674			sta 	gxCurrentY
.c7dc	a7dc	9c 75 06	stz $0675			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 72 06	sta $0672			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 73 06	sta $0673			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 73 06	lda $0673			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 72 06	lda $0672			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 74 06	lda $0674			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 86 06	cmp $0686			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 72 06	lda $0672,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 15 07	sta $0715			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 83 06	lda $0683			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 16 07	stz $0716			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 13 07	lda $0713			lda 	gxxCentre					; while x <= y
.c83d	a83d	cd 14 07	cmp $0714			cmp 	gxYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 14 07	lda $0714			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 13 07	lda $0713			lda 	gxxCentre 						; swap X and Y
.c867	a867	ae 14 07	ldx $0714			ldx	 	gxYCentre
.c86a	a86a	8d 14 07	sta $0714			sta 	gxYCentre
.c86d	a86d	8e 13 07	stx $0713			stx 	gxxCentre
.c870	a870	ad 16 07	lda $0716			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 16 07	sta $0716			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 15 07	lda $0715	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 16 07	lda $0716			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 14 07	lda $0714			lda 	gxYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 13 07	lda $0713			lda 	gxxCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	gxPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 15 07	lda $0715			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 14 07	sbc $0714			sbc 	gxYCentre
.c8b1	a8b1	8d 14 07	sta $0714			sta 	gxYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7a 06	sta $067a,x			sta 	gxX0,x
.c8c8	a8c8	bd 7f 06	lda $067f,x			lda 	gxX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7b 06	sta $067b,x			sta 	gxX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 16 07	stz $0716			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 13 07	inc $0713			inc 	gxxCentre 					; X++
.c8dd	a8dd	ad 13 07	lda $0713			lda 	gxxCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 13 07	inc $0713			inc 	gxxCentre					; X++
.c8ea	a8ea	ce 14 07	dec $0714			dec 	gxYCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 13 07	lda $0713			lda 	gxxCentre
.c8f1	a8f1	ed 14 07	sbc $0714			sbc 	gxYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 16 07	dec $0716			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 80 06	lda $0680			lda 	gxY1
.c92a	a92a	ed 7c 06	sbc $067c			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 12 07	sta $0712			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 13 07	stz $0713			stz 	gxxCentre
.c93e	a93e	ad 12 07	lda $0712			lda 	gxRadius
.c941	a941	8d 14 07	sta $0714			sta 	gxYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 7e 06	lda $067e,x			lda 	gxX1,x
.c959	a959	7d 7a 06	adc $067a,x			adc 	gxX0,x
.c95c	a95c	9d 7e 06	sta $067e,x			sta 	gxX1,x
.c95f	a95f	bd 7f 06	lda $067f,x			lda 	gxX1+1,x
.c962	a962	7d 7b 06	adc $067b,x			adc 	gxX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 7f 06	sta $067f,x			sta 	gxX1+1,x
.c969	a969	7e 7e 06	ror $067e,x			ror 	gxX1,x
.c96c	a96c	60		rts				rts
.0712						gxRadius:
>0712								.fill 	1
.0713						gxxCentre:
>0713								.fill 	1
.0714						gxYCentre:
>0714								.fill 	1
.0715						gxIsFillMode:
>0715								.fill 	1
.0716						gxYChanged:
>0716								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 86 06	lda $0686			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 84 06	adc $0684			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 84 06	cmp $0684			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 82 06	stz $0682			stz 	gxSpritesOn
.c9c6	a9c6	9c 83 06	stz $0683			stz 	gxBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 72 06	stz $0672,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 83 06	sta $0683			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 84 06	sta $0684			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 86 06	stx $0686			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 82 06	sta $0682			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 85 06	sta $0685			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	zTemp0
.ca43	aa43	8d 90 06	sta $0690			sta 	gxSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	zTemp0+1
.ca48	aa48	8d 91 06	sta $0691			sta 	gxSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 8f 06	stz $068f			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d2 06	stz $06d2,x			stz 	gxSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 83 06	lda $0683			lda 	gxBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8c 06	ldy $068c			ldy 	gxOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8a 06	and $068a			and 	gxANDValue
.ca93	aa93	4d 89 06	eor $0689			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 19 07	lda $0719			lda 	gxIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7a 06	lda $067a			lda 	gxX0 						; compare X, LSB and MSB
.cab1	aab1	4d 7e 06	eor $067e			eor 	gxX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7b 06	lda $067b			lda 	gxX0+1
.cab9	aab9	4d 7f 06	eor $067f			eor 	gxX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 80 06	lda $0680			lda 	gxY1
.cac0	aac0	4d 7c 06	eor $067c			eor 	gxY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1b 07	lda $071b			lda 	gxPosition
.cac8	aac8	6d 1c 07	adc $071c			adc 	gxAdjust
.cacb	aacb	8d 1b 07	sta $071b			sta 	gxPosition
.cace	aace	9c 1e 07	stz $071e			stz 	gxAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 1d 07	cmp $071d			cmp 	gxTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 1e 07	dec $071e			dec 	gxAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 1d 07	sbc $071d			sbc 	gxTotal
.cadf	aadf	8d 1b 07	sta $071b			sta 	gxPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 19 07	lda $0719			lda 	gxIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 1e 07	lda $071e			lda 	gxAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf7	aaf7	ad 1e 07	lda $071e			lda 	gxAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					gxAdjustX:
.cb00	ab00	ad 1a 07	lda $071a			lda 	gxDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7a 06	lda $067a			lda 	gxX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7b 06	dec $067b			dec 	gxX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7a 06	dec $067a			dec 	gxX0
.cb10	ab10	ce 8c 06	dec $068c			dec 	gxOffset 					; pixel left
.cb13	ab13	ad 8c 06	lda $068c			lda 	gxOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7a 06	inc $067a			inc 	gxX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7b 06	inc $067b			inc 	gxX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8c 06	inc $068c			inc 	gxOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7c 06	inc $067c			inc 	gxY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 80 06	lda $0680			lda 	gxY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7c 06	sbc $067c			sbc 	gxY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 18 07	sta $0718			sta 	gxDiffY
.cb58	ab58	9c 1a 07	stz $071a			stz 	gxDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 7e 06	lda $067e			lda 	gxX1
.cb5f	ab5f	ed 7a 06	sbc $067a			sbc 	gxX0
.cb62	ab62	8d 17 07	sta $0717			sta 	gxDiffX
.cb65	ab65	ad 7f 06	lda $067f			lda 	gxX1+1 						; calculate MSB
.cb68	ab68	ed 7b 06	sbc $067b			sbc 	gxX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 17 07	ror $0717			ror 	gxDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 17 07	sbc $0717			sbc 	gxDiffX
.cb78	ab78	8d 17 07	sta $0717			sta 	gxDiffX
.cb7b	ab7b	ce 1a 07	dec $071a			dec 	gxDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 19 07	stz $0719			stz 	gxIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 18 07	lda $0718			lda 	gxDiffY 					; set adjust and total.
.cb84	ab84	8d 1c 07	sta $071c			sta 	gxAdjust
.cb87	ab87	ad 17 07	lda $0717			lda 	gxDiffX
.cb8a	ab8a	8d 1d 07	sta $071d			sta 	gxTotal
.cb8d	ab8d	ad 18 07	lda $0718			lda 	gxDiffY 					; if dy > dx
.cb90	ab90	cd 17 07	cmp $0717			cmp 	gxDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 19 07	dec $0719			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 17 07	lda $0717			lda 	gxDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1c 07	sta $071c			sta 	gxAdjust
.cb9e	ab9e	ad 18 07	lda $0718			lda 	gxDiffY
.cba1	aba1	8d 1d 07	sta $071d			sta 	gxTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 1d 07	lda $071d			lda 	gxTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1b 07	sta $071b			sta 	gxPosition
.cbab	abab	60		rts				rts
.0717						gxDiffX:
>0717								.fill 	1
.0718						gxDiffY:
>0718								.fill 	1
.0719						gxIsDiffYLarger:
>0719								.fill 	1
.071a						gxDXNegative:
>071a								.fill 	1
.071b						gxPosition:
>071b								.fill 	1
.071c						gxAdjust:
>071c								.fill 	1
.071d						gxTotal:
>071d								.fill 	1
.071e						gxAddSelect:
>071e								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 88 06	stx $0688			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 87 06	sta $0687			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8a 06	stz $068a			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 88 06	ldx $0688			ldx 	gxColour
.cbbe	abbe	8e 89 06	stx $0689			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8a 06	stx $068a			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 89 06	stz $0689			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8a 06	lda $068a			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8a 06	sta $068a			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbe0	abe0	ac 8c 06	ldy $068c			ldy 	gxOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8a 06	and $068a			and 	gxANDValue
.cbe8	abe8	4d 89 06	eor $0689			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 83 06	lda $0683			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7c 06	lda $067c			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 80 06	cmp $0680			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7c 06	inc $067c			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7c 06	lda $067c			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 80 06	cmp $0680			cmp 	gxY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 7e 06	lda $067e			lda		gxX1
.cc37	ac37	ed 7a 06	sbc $067a			sbc 	gxX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 7f 06	lda $067f			lda 	gxX1+1
.cc3f	ac3f	ed 7b 06	sbc $067b			sbc 	gxX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8c 06	lda $068c			lda 	gxOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8c 06	ldy $068c			ldy 	gxOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8a 06	and $068a			and 	gxANDValue
.cc5c	ac5c	4d 89 06	eor $0689			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8a 06	and $068a			and 	gxANDValue
.cc7a	ac7a	4d 89 06	eor $0689			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8a 06	and $068a			and 	gxANDValue
.cc92	ac92	4d 89 06	eor $0689			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8c 06	sta $068c			sta 	gxOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 1f 07	sta $071f			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 20 07	sta $0720			sta 	gxMask 						; and mask
.ccb9	acb9	ad 83 06	lda $0683			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7c 06	lda $067c			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 22 07	sty $0722			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 21 07	stx $0721			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; open the bitmap.
.cccb	accb	ad 24 07	lda $0724			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 23 07	sta $0723			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 24 07	bit $0724			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 20 07	lda $0720			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 23 07	lda $0723			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7c 06	lda $067c			lda 	gxY0 						; off screen
.ccf2	acf2	cd 86 06	cmp $0686			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 1f 07	cmp $071f			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7c 06	sta $067c			sta 	gxY0
.cd0b	ad0b	ae 23 07	ldx $0723			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 1f 07	lda $071f			lda 	gxSize
.cd12	ad12	6d 7a 06	adc $067a			adc 	gxX0
.cd15	ad15	8d 7a 06	sta $067a			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7b 06	inc $067b			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 21 07	jmp ($0721)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8c 06	ldy $068c			ldy 	gxOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 23 07	lda $0723			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 87 06	bit $0687			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 20 07	lda $0720			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 24 07	lda $0724			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8a 06	and $068a			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 1f 07	cmp $071f			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7c 06	inc $067c			inc 	gxY0
.cd73	ad73	60		rts				rts
.071f						gxSize:
>071f								.fill 	1
.0720						gxMask:
>0720								.fill 	1
.0721						gxAcquireVector:
>0721								.fill 	2
.0723						gxScale:
>0723								.fill 	1
.0724						gxUseMode:
>0724								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 87 06	eor $0687			eor 	gxMode
.cd79	ad79	8d 24 07	sta $0724			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 88 06	lda $0688			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 82 06	lda $0682			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 87 06	eor $0687			eor 	gxMode
.cdc6	adc6	8d 24 07	sta $0724			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 25 07	lda $0725			lda 	gxSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 85 06	lda $0685			lda 	gxSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 26 07	ldx $0726			ldx 	gxSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	zTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 28 07	adc $0728			adc 	gxSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 29 07	adc $0729			adc 	gxSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 25 07	cpy $0725			cpy 	gxSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 8d 06	sta $068d			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 8f 06	sta $068f			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 8e 06	sta $068e			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 82 06	lda $0682			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 28 07	lda $0728			lda 	gxSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 29 07	lda $0729			lda 	gxSpriteOffset+1
.ce87	ae87	6d 90 06	adc $0690			adc 	gxSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 91 06	lda $0691			lda 	gxSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 26 07	lda $0726			lda 	gxSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 27 07	ora $0727			ora 	gxSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.ceb4	aeb4	ad 26 07	lda $0726			lda 	gxSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d2 06	ora $06d2,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.cec2	aec2	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 82 06	lda $0682			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 8f 06	lda $068f			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 8e 06	lda $068e			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7a 06	adc $067a			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7b 06	lda $067b			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7c 06	adc $067c			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7b 06	lsr $067b			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7a 06	ror $067a			ror 	gxX0
.cf32	af32	4e 7a 06	lsr $067a			lsr 	gxX0
.cf35	af35	4e 7c 06	lsr $067c			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7c 06	lsr $067c			lsr 	gxY0
.cf3b	af3b	ae 8d 06	ldx $068d			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 92 06	lda $0692,x			lda 	gxSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7a 06	ora $067a			ora 	gxX0
.cf46	af46	9d 92 06	sta $0692,x			sta 	gxSpriteLow,x
.cf49	af49	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7c 06	ora $067c			ora 	gxY0
.cf51	af51	9d d2 06	sta $06d2,x			sta 	gxSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8b 06	sta $068b			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8b 06	lda $068b			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					gxPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7c 06	lda $067c			lda 	gxY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7a 06	lda $067a			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8c 06	sta $068c			sta 	gxOffset
.cfa3	afa3	ad 7b 06	lda $067b			lda 	gxX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 84 06	adc $0684			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8c 06	lda $068c			lda 	gxOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8c 06	sta $068c			sta 	gxOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 92 06	lda $0692,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 92 06	ora $0692,x			ora 	gxSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d2 06	lda $06d2,y			lda 	gxSpriteHigh,y
.cff5	aff5	7d d2 06	adc $06d2,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d2 06	lda $06d2,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d2 06	lda $06d2,x			lda 	gxSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 92 06	lda $0692,y			lda 	gxSpriteLow,y
.d023	b023	fd 92 06	sbc $0692,x			sbc 	gxSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 85 06	lda $0685			lda 	gxSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 29 07	sta $0729			sta 	gxSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 26 07	sta $0726			sta 	gxSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 25 07	sta $0725			sta 	gxSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 27 07	sta $0727			sta 	gxSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 28 07	sta $0728			sta 	gxSpriteOffset
.d070	b070	0e 28 07	asl $0728			asl 	gxSpriteOffset
.d073	b073	2e 29 07	rol $0729			rol 	gxSpriteOffset+1
.d076	b076	0e 28 07	asl $0728			asl 	gxSpriteOffset
.d079	b079	2e 29 07	rol $0729			rol 	gxSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0725						gxSizePixels:
>0725								.fill 	1
.0726						gxSizeBits:
>0726								.fill 	1
.0727						gxSpriteLUT:
>0727								.fill 	1
.0728						gxSpriteOffset:
>0728								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7a 06	lda $067a			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 7e 06	cmp $067e			cmp 	gxX1
.d08d	b08d	ad 7b 06	lda $067b			lda 	gxX0+1
.d090	b090	ed 7f 06	sbc $067f			sbc 	gxX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7c 06	lda $067c			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 80 06	cmp $0680			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7a 06	lda $067a,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7a 06	lda $067a,y			lda 	gxX0,y
.d0bd	b0bd	9d 7a 06	sta $067a,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7a 06	sta $067a,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b8 DATA
>d244	b244	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b9 DIM
>d249	b249	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ba DOWNTO
>d251	b251	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bb ELSE
>d257	b257	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bc FROM
>d25d	b25d	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bd GFX
>d262	b262	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $be GOSUB
>d269	b269	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bf GOTO
>d26f	b26f	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c0 HERE
>d275	b275	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c1 IMAGE
>d27c	b27c	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c2 INPUT
>d283	b283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d288	b288	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d28e	b28e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d295	b295	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d29a	b29a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d29e	b29e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2a6	b2a6	45
>d2a7	b2a7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2af	b2af	45
>d2b0	b2b0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2b6	b2b6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2bc	b2bc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2c3	b2c3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2ca	b2ca	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2d1	b2d1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cf PRINT
>d2d8	b2d8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d2de	b2de	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d2e4	b2e4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d2e9	b2e9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d3 RETURN
>d2f1	b2f1	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d2f8	b2f8	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d2ff	b2ff	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d307	b307	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d30d	b30d	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d311	b311	ff					.text	$FF
.d312	b312					KeywordSet1:
>d312	b312	00 65					.text	0,$65,""               ; $80 !0:EOF
>d314	b314	00 58					.text	0,$58,""               ; $81 !1:SH1
>d316	b316	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d318	b318	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d320	b320	4c 45
>d322	b322	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32a	b32a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d332	b332	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d337	b337	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d33f	b33f	45
>d340	b340	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d344	b344	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d34a	b34a	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d350	b350	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d355	b355	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d35b	b35b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d363	b363	45
>d364	b364	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d369	b369	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $8f SETDATE
>d371	b371	45
>d372	b372	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $90 SETTIME
>d37a	b37a	45
>d37b	b37b	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $91 SHOOT
>d382	b382	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $92 SPRITES
>d38a	b38a	53
>d38b	b38b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $93 STOP
>d391	b391	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $94 XGO
>d396	b396	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $95 XLOAD
>d39d	b39d	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $96 ZAP
>d3a2	b3a2	ff					.text	$FF
.d3a3	b3a3					KeywordSet2:
>d3a3	b3a3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3a5	b3a5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3a7	b3a7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3a9	b3a9	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3ae	b3ae	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3b3	b3b3	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3b8	b3b8	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3bd	b3bd	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3c2	b3c2	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3c7	b3c7	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3cc	b3cc	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3d1	b3d1	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3d6	b3d6	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3db	b3db	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3e0	b3e0	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3e5	b3e5	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3ea	b3ea	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3ef	b3ef	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d3f4	b3f4	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d3f9	b3f9	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d3fe	b3fe	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d403	b403	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d408	b408	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d40d	b40d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d412	b412	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d417	b417	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d41c	b41c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d421	b421	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d426	b426	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d42b	b42b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d430	b430	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d435	b435	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d43a	b43a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d43f	b43f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d444	b444	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d449	b449	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d44e	b44e	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d453	b453	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d458	b458	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d45d	b45d	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d462	b462	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d467	b467	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d46c	b46c	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d471	b471	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d476	b476	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d47b	b47b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d480	b480	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d485	b485	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d48a	b48a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d48f	b48f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d494	b494	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d499	b499	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d49e	b49e	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4a3	b4a3	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4a8	b4a8	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ad	b4ad	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4b2	b4b2	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4b7	b4b7	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4bc	b4bc	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4c1	b4c1	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4c6	b4c6	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4cb	b4cb	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4d0	b4d0	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4d5	b4d5	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4da	b4da	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4df	b4df	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4e4	b4e4	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4e9	b4e9	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4ee	b4ee	ff					.text	$FF
.d4ef	b4ef					Export_TKListConvertLine:
.d4ef	b4ef	48		pha				pha 								; save indent on the stack
.d4f0	b4f0	9c 1d 04	stz $041d			stz 	tbOffset
.d4f3	b4f3	9c 2d 04	stz $042d			stz 	tokenBuffer
.d4f6	b4f6	9c 29 04	stz $0429			stz 	currentListColour
.d4f9	b4f9	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d4fb	b4fb	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d4fe	b4fe	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d500	b500	b1 30		lda ($30),y			lda 	(codePtr),y
.d502	b502	aa		tax				tax
.d503	b503	88		dey				dey
.d504	b504	b1 30		lda ($30),y			lda 	(codePtr),y
.d506	b506	20 e9 b6	jsr $b6e9			jsr 	LCLWriteNumberXA
.d509	b509	68		pla				pla 								; adjustment to indent
.d50a	b50a	48		pha				pha 								; save on stack
.d50b	b50b	10 0c		bpl $b519			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d50d	b50d	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d50e	b50e	6d 26 04	adc $0426			adc 	listIndent
.d511	b511	8d 26 04	sta $0426			sta 	listIndent
.d514	b514	10 03		bpl $b519			bpl 	_LCNoAdjust
.d516	b516	9c 26 04	stz $0426			stz 	listIndent
.d519	b519					_LCNoAdjust:
.d519	b519	18		clc				clc		 							; work out actual indent.
.d51a	b51a	ad 26 04	lda $0426			lda 	listIndent
.d51d	b51d	0a		asl a				asl 	a
.d51e	b51e	69 07		adc #$07			adc 	#7
.d520	b520	85 36		sta $36				sta 	zTemp0
.d522	b522					_LCPadOut:
.d522	b522	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d524	b524	20 81 b6	jsr $b681			jsr 	LCLWrite
.d527	b527	ad 1d 04	lda $041d			lda 	tbOffset
.d52a	b52a	c5 36		cmp $36				cmp 	zTemp0
.d52c	b52c	d0 f4		bne $b522			bne 	_LCPadOut
.d52e	b52e	a0 03		ldy #$03			ldy 	#3 							; start position.
.d530	b530					_LCMainLoop:
.d530	b530	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d532	b532	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d535	b535	b1 30		lda ($30),y			lda 	(codePtr),y
.d537	b537	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d539	b539	f0 17		beq $b552			beq 	_LCExit
.d53b	b53b	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d53d	b53d	90 1e		bcc $b55d			bcc 	_LCDoubles
.d53f	b53f	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d541	b541	90 2a		bcc $b56d			bcc 	_LCShiftPunc
.d543	b543	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d545	b545	90 35		bcc $b57c			bcc 	_LCPunctuation
.d547	b547	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d549	b549	90 51		bcc $b59c			bcc 	_LCIdentifiers
.d54b	b54b	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d54d	b54d	90 73		bcc $b5c2			bcc 	_LCTokens
.d54f	b54f	4c 22 b6	jmp $b622			jmp 	_LCData 					; 254-5 are data objects
.d552	b552					_LCExit:
.d552	b552	68		pla				pla 								; get old indent adjust
.d553	b553	30 07		bmi $b55c			bmi 	_LCExit2
.d555	b555	18		clc				clc 								; add to indent if +ve
.d556	b556	6d 26 04	adc $0426			adc 	listIndent
.d559	b559	8d 26 04	sta $0426			sta 	listIndent
.d55c	b55c					_LCExit2:
.d55c	b55c	60		rts				rts
.d55d	b55d					_LCDoubles:
.d55d	b55d	48		pha				pha
.d55e	b55e	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d55f	b55f	29 02		and #$02			and 	#2
.d561	b561	09 3c		ora #$3c			ora 	#60 						; make < >
.d563	b563	20 81 b6	jsr $b681			jsr 	LCLWrite
.d566	b566	68		pla				pla 								; restore, do lower bit
.d567	b567	29 03		and #$03			and 	#3
.d569	b569	09 3c		ora #$3c			ora 	#60
.d56b	b56b	80 0f		bra $b57c			bra		_LCPunctuation 				; print, increment, loop
.d56d	b56d					_LCShiftPunc:
.d56d	b56d	aa		tax				tax 								; save in X
.d56e	b56e	29 07		and #$07			and 	#7 							; lower 3 bits
.d570	b570	f0 02		beq $b574			beq 	_LCNoAdd
.d572	b572	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d574	b574					_LCNoAdd:
.d574	b574	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d576	b576	90 02		bcc $b57a			bcc 	_LCNoAdd2
.d578	b578	09 20		ora #$20			ora 	#32 						; adds $20
.d57a	b57a					_LCNoAdd2:
.d57a	b57a	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d57c	b57c					_LCPunctuation:
.d57c	b57c	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d57e	b57e	d0 03		bne $b583			bne 	_LCPContinue
.d580	b580	20 97 b6	jsr $b697			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d583	b583					_LCPContinue:
.d583	b583	c9 2e		cmp #$2e			cmp 	#'.'
.d585	b585	f0 08		beq $b58f			beq 	_LCPIsConstant
.d587	b587	c9 30		cmp #$30			cmp 	#'0'
.d589	b589	90 0b		bcc $b596			bcc 	_LCPNotConstant
.d58b	b58b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d58d	b58d	b0 07		bcs $b596			bcs 	_LCPNotConstant
.d58f	b58f					_LCPIsConstant:
.d58f	b58f	48		pha				pha
.d590	b590	a9 87		lda #$87			lda 	#CLIConstant+$80
.d592	b592	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d595	b595	68		pla				pla
.d596	b596					_LCPNotConstant:
.d596	b596	c8		iny				iny 								; consume character
.d597	b597	20 81 b6	jsr $b681			jsr 	LCLWrite 					; write it out.
.d59a	b59a	80 94		bra $b530			bra 	_LCMainLoop 				; go round again.
.d59c	b59c					_LCIdentifiers:
.d59c	b59c	18		clc				clc 								; convert to physical address
.d59d	b59d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d59f	b59f	85 37		sta $37				sta 	zTemp0+1
.d5a1	b5a1	c8		iny				iny
.d5a2	b5a2	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a4	b5a4	85 36		sta $36				sta 	zTemp0
.d5a6	b5a6	c8		iny				iny
.d5a7	b5a7	5a		phy				phy 								; save position
.d5a8	b5a8	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5aa	b5aa	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d5ad	b5ad	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5af	b5af					_LCOutIdentifier:
.d5af	b5af	c8		iny				iny
.d5b0	b5b0	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5b2	b5b2	29 7f		and #$7f			and 	#$7F
.d5b4	b5b4	20 d3 b6	jsr $b6d3			jsr 	LCLLowerCase
.d5b7	b5b7	20 81 b6	jsr $b681			jsr 	LCLWrite
.d5ba	b5ba	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5bc	b5bc	10 f1		bpl $b5af			bpl 	_LCOutIdentifier
.d5be	b5be	7a		ply				ply 								; restore position
.d5bf	b5bf	4c 30 b5	jmp $b530			jmp 	_LCMainLoop
.d5c2	b5c2					_LCTokens:
.d5c2	b5c2	aa		tax				tax 								; token in X
.d5c3	b5c3	a9 a3		lda #$a3			lda 	#((KeywordSet2) & $FF)
.d5c5	b5c5	85 36		sta $36				sta 	0+zTemp0
.d5c7	b5c7	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5c9	b5c9	85 37		sta $37				sta 	1+zTemp0
.d5cb	b5cb	e0 82		cpx #$82			cpx 	#$82
.d5cd	b5cd	f0 16		beq $b5e5			beq 	_LCUseShift
.d5cf	b5cf	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.d5d1	b5d1	85 36		sta $36				sta 	0+zTemp0
.d5d3	b5d3	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5d5	b5d5	85 37		sta $37				sta 	1+zTemp0
.d5d7	b5d7	e0 81		cpx #$81			cpx 	#$81
.d5d9	b5d9	f0 0a		beq $b5e5			beq 	_LCUseShift
.d5db	b5db	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d5dd	b5dd	85 36		sta $36				sta 	0+zTemp0
.d5df	b5df	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d5e1	b5e1	85 37		sta $37				sta 	1+zTemp0
.d5e3	b5e3	80 01		bra $b5e6			bra 	_LCNoShift
.d5e5	b5e5					_LCUseShift:
.d5e5	b5e5	c8		iny				iny
.d5e6	b5e6					_LCNoShift:
.d5e6	b5e6	20 ab b6	jsr $b6ab			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5e9	b5e9	b1 30		lda ($30),y			lda 	(codePtr),y
.d5eb	b5eb	aa		tax				tax 								; into X
.d5ec	b5ec					_LCFindText:
.d5ec	b5ec	ca		dex				dex
.d5ed	b5ed	10 0e		bpl $b5fd			bpl 	_LCFoundText 				; found text.
.d5ef	b5ef	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5f1	b5f1	1a		inc a				inc 	a 							; one extra for size
.d5f2	b5f2	38		sec				sec 								; one extra for checksum
.d5f3	b5f3	65 36		adc $36				adc 	zTemp0 						; go to next token
.d5f5	b5f5	85 36		sta $36				sta 	zTemp0
.d5f7	b5f7	90 f3		bcc $b5ec			bcc 	_LCFindText
.d5f9	b5f9	e6 37		inc $37				inc 	zTemp0+1
.d5fb	b5fb	80 ef		bra $b5ec			bra 	_LCFindText
.d5fd	b5fd					_LCFoundText:
.d5fd	b5fd	5a		phy				phy 								; save List position
.d5fe	b5fe	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d600	b600	aa		tax				tax
.d601	b601	a9 86		lda #$86			lda 	#CLIToken+$80
.d603	b603	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d606	b606	a0 02		ldy #$02			ldy 	#2
.d608	b608					_LCCopyToken:
.d608	b608	b1 36		lda ($36),y			lda 	(zTemp0),y
.d60a	b60a	20 d3 b6	jsr $b6d3			jsr 	LCLLowerCase
.d60d	b60d	20 81 b6	jsr $b681			jsr 	LCLWrite
.d610	b610	c8		iny				iny
.d611	b611	ca		dex				dex
.d612	b612	d0 f4		bne $b608			bne 	_LCCopyToken
.d614	b614	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d616	b616	f0 05		beq $b61d			beq 	_LCNoSpace
.d618	b618	a9 20		lda #$20			lda 	#' '
.d61a	b61a	20 81 b6	jsr $b681			jsr 	LCLWrite
.d61d	b61d					_LCNoSpace:
.d61d	b61d	7a		ply				ply 								; restore position.
.d61e	b61e	c8		iny				iny 								; consume token
.d61f	b61f	4c 30 b5	jmp $b530			jmp 	_LCMainLoop 				; and go around again.
.d622	b622					_LCData:
.d622	b622	48		pha				pha 								; save type $FE/$FF
.d623	b623	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d625	b625	c9 fe		cmp #$fe			cmp 	#$FE
.d627	b627	f0 22		beq $b64b			beq 	_LCHaveOpener
.d629	b629	a2 22		ldx #$22			ldx 	#'"'
.d62b	b62b	a9 8f		lda #$8f			lda 	#CLIData+$80
.d62d	b62d	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d630	b630	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d632	b632	d0 17		bne $b64b			bne 	_LCHaveOpener
.d634	b634	88		dey				dey 								; what precedes it ?
.d635	b635	b1 30		lda ($30),y			lda 	(codePtr),y
.d637	b637	c8		iny				iny
.d638	b638	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d63a	b63a	d0 0f		bne $b64b			bne 	_LCHaveOpener
.d63c	b63c	a9 09		lda #$09			lda 	#9 							; tab
.d63e	b63e	20 81 b6	jsr $b681			jsr 	LCLWrite
.d641	b641	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d643	b643	20 81 b6	jsr $b681			jsr 	LCLWrite
.d646	b646	a9 85		lda #$85			lda 	#CLIFComment+$80
.d648	b648	20 78 b6	jsr $b678			jsr 	LCLWriteColour
.d64b	b64b					_LCHaveOpener:
.d64b	b64b	8a		txa				txa 								; output prefix (# or ")
.d64c	b64c	20 81 b6	jsr $b681			jsr 	LCLWrite
.d64f	b64f	c8		iny				iny 								; get count
.d650	b650	b1 30		lda ($30),y			lda 	(codePtr),y
.d652	b652	aa		tax				tax
.d653	b653	c8		iny				iny 								; point at first character
.d654	b654					_LCOutData:
.d654	b654	b1 30		lda ($30),y			lda 	(codePtr),y
.d656	b656	c9 00		cmp #$00			cmp 	#0
.d658	b658	f0 03		beq $b65d			beq 	_LCNoPrint
.d65a	b65a	20 81 b6	jsr $b681			jsr 	LCLWrite
.d65d	b65d					_LCNoPrint:
.d65d	b65d	c8		iny				iny
.d65e	b65e	ca		dex				dex
.d65f	b65f	d0 f3		bne $b654			bne 	_LCOutData
.d661	b661	68		pla				pla 								; closing " required ?
.d662	b662	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d664	b664	d0 0f		bne $b675			bne 	_LCNoQuote
.d666	b666	a9 22		lda #$22			lda 	#'"'
.d668	b668	20 81 b6	jsr $b681			jsr 	LCLWrite
.d66b	b66b	ad 6f 06	lda $066f			lda 	EXTTextColour
.d66e	b66e	29 0f		and #$0f			and 	#$0F
.d670	b670	09 90		ora #$90			ora 	#$90
.d672	b672	20 81 b6	jsr $b681			jsr 	LCLWrite
.d675	b675					_LCNoQuote:
.d675	b675	4c 30 b5	jmp $b530			jmp 	_LCMainLoop
.d678	b678					LCLWriteColour:
.d678	b678	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d67b	b67b	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d67e	b67e	d0 01		bne $b681			bne 	LCLWrite 					; if different, output it
.d680	b680	60		rts				rts
.d681	b681					LCLWrite:
.d681	b681	da		phx				phx
.d682	b682	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d685	b685	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d688	b688	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d68b	b68b	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d68e	b68e	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d690	b690	30 03		bmi $b695			bmi 	_LCLNoColour
.d692	b692	8d 27 04	sta $0427			sta 	lcLastCharacter
.d695	b695					_LCLNoColour:
.d695	b695	fa		plx				plx
.d696	b696	60		rts				rts
.d697	b697					LCLDeleteLastSpace:
.d697	b697	48		pha				pha
.d698	b698	da		phx				phx
.d699	b699	ae 1d 04	ldx $041d			ldx 	tbOffset
.d69c	b69c	f0 0a		beq $b6a8			beq 	_LCDLSExit
.d69e	b69e	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6a1	b6a1	c9 20		cmp #$20			cmp 	#' '
.d6a3	b6a3	d0 03		bne $b6a8			bne 	_LCDLSExit
.d6a5	b6a5	ce 1d 04	dec $041d			dec 	tbOffset
.d6a8	b6a8					_LCDLSExit:
.d6a8	b6a8	fa		plx				plx
.d6a9	b6a9	68		pla				pla
.d6aa	b6aa	60		rts				rts
.d6ab	b6ab					LCLCheckSpaceRequired:
.d6ab	b6ab	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6ae	b6ae	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6b0	b6b0	f0 1b		beq $b6cd			beq 	_LCCSRSpace
.d6b2	b6b2	c9 29		cmp #$29			cmp 	#')'
.d6b4	b6b4	f0 17		beq $b6cd			beq 	_LCCSRSpace
.d6b6	b6b6	c9 23		cmp #$23			cmp 	#'#'
.d6b8	b6b8	f0 13		beq $b6cd			beq 	_LCCSRSpace
.d6ba	b6ba	20 d3 b6	jsr $b6d3			jsr 	LCLLowerCase 				; saves a little effort
.d6bd	b6bd	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6bf	b6bf	90 11		bcc $b6d2			bcc 	_LCCSRExit
.d6c1	b6c1	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6c3	b6c3	90 08		bcc $b6cd			bcc 	_LCCSRSpace
.d6c5	b6c5	c9 61		cmp #$61			cmp 	#"a"
.d6c7	b6c7	90 09		bcc $b6d2			bcc 	_LCCSRExit
.d6c9	b6c9	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6cb	b6cb	b0 05		bcs $b6d2			bcs 	_LCCSRExit
.d6cd	b6cd					_LCCSRSpace:
.d6cd	b6cd	a9 20		lda #$20			lda 	#' '
.d6cf	b6cf	20 81 b6	jsr $b681			jsr 	LCLWrite
.d6d2	b6d2					_LCCSRExit:
.d6d2	b6d2	60		rts				rts
.d6d3	b6d3					LCLLowerCase:
.d6d3	b6d3	c9 41		cmp #$41			cmp 	#"A"
.d6d5	b6d5	90 06		bcc $b6dd			bcc 	_LCLLCOut
.d6d7	b6d7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6d9	b6d9	b0 02		bcs $b6dd			bcs 	_LCLLCOut
.d6db	b6db	69 20		adc #$20			adc 	#$20
.d6dd	b6dd					_LCLLCOut:
.d6dd	b6dd	60		rts				rts
.d6de	b6de					LCLUpperCase:
.d6de	b6de	c9 61		cmp #$61			cmp 	#"a"
.d6e0	b6e0	90 06		bcc $b6e8			bcc 	_LCLUCOut
.d6e2	b6e2	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6e4	b6e4	b0 02		bcs $b6e8			bcs 	_LCLUCOut
.d6e6	b6e6	e9 1f		sbc #$1f			sbc 	#$1F
.d6e8	b6e8					_LCLUCOut:
.d6e8	b6e8	60		rts				rts
.d6e9	b6e9					LCLWriteNumberXA:
.d6e9	b6e9	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6eb	b6eb					_LCLWNLoop1:
.d6eb	b6eb	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6ed	b6ed					_LCLWNLoop2:
.d6ed	b6ed	48		pha				pha 								; save initial LSB
.d6ee	b6ee	38		sec				sec
.d6ef	b6ef	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6f1	b6f1	f9 22 b7	sbc $b722,y			sbc 	_LCLWNTable,y
.d6f4	b6f4	48		pha				pha
.d6f5	b6f5	8a		txa				txa
.d6f6	b6f6	f9 23 b7	sbc $b723,y			sbc 	_LCLWNTable+1,y
.d6f9	b6f9	90 07		bcc $b702			bcc 	_LCLWNUnderflow
.d6fb	b6fb	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d6fd	b6fd	aa		tax				tax 								; update X
.d6fe	b6fe	68		pla				pla 								; restore A
.d6ff	b6ff	7a		ply				ply 								; throw original
.d700	b700	80 eb		bra $b6ed			bra 	_LCLWNLoop2 				; try again.
.d702	b702					_LCLWNUnderflow:
.d702	b702	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d704	b704	d0 06		bne $b70c			bne 	_LCLWNOut
.d706	b706	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d709	b709	3a		dec a				dec 	a
.d70a	b70a	f0 04		beq $b710			beq 	_LCLWNNext
.d70c	b70c					_LCLWNOut:
.d70c	b70c	98		tya				tya
.d70d	b70d	20 1c b7	jsr $b71c			jsr 	_LCLWNOutDigit
.d710	b710					_LCLWNNext:
.d710	b710	7a		ply				ply 							 	; restore original value.
.d711	b711	68		pla				pla
.d712	b712	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d714	b714	c8		iny				iny
.d715	b715	c8		iny				iny
.d716	b716	84 37		sty $37				sty 	zTemp0+1
.d718	b718	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d71a	b71a	d0 cf		bne $b6eb			bne 	_LCLWNLoop1
.d71c	b71c					_LCLWNOutDigit:
.d71c	b71c	09 30		ora #$30			ora 	#'0'
.d71e	b71e	20 81 b6	jsr $b681			jsr 	LCLWrite
.d721	b721	60		rts				rts
.d722	b722					_LCLWNTable:
>d722	b722	10 27						.word 	10000
>d724	b724	e8 03						.word 	1000
>d726	b726	64 00						.word 	100
>d728	b728	0a 00						.word 	10
.d72a	b72a					TOKSearchTable:
.d72a	b72a	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d72c	b72c	85 36		sta $36				sta 	zTemp0
.d72e	b72e	a0 00		ldy #$00			ldy 	#0
.d730	b730	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d732	b732	85 38		sta $38				sta 	zTemp1
.d734	b734					_TSTLoop:
.d734	b734	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d736	b736	30 49		bmi $b781			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d738	b738	f0 2e		beq $b768			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d73a	b73a	c8		iny				iny 								; get the hash
.d73b	b73b	b1 36		lda ($36),y			lda 	(zTemp0),y
.d73d	b73d	88		dey				dey
.d73e	b73e	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d741	b741	d0 25		bne $b768			bne 	_TSTNext
.d743	b743	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d746	b746	38		sec				sec
.d747	b747	ed 00 04	sbc $0400			sbc 	identStart
.d74a	b74a	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d74c	b74c	d0 1a		bne $b768			bne 	_TSTNext
.d74e	b74e	5a		phy				phy 								; save Y , we might fail to match.
.d74f	b74f	c8		iny				iny 								; point to text
.d750	b750	c8		iny				iny
.d751	b751	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d754	b754					_TSTCompareName:
.d754	b754	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d757	b757	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d759	b759	d0 0c		bne $b767			bne 	_TSTNextPullY 				; fail, pullY and do next
.d75b	b75b	e8		inx				inx
.d75c	b75c	c8		iny				iny
.d75d	b75d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d760	b760	d0 f2		bne $b754			bne 	_TSTCompareName
.d762	b762	7a		ply				ply 								; throw Y
.d763	b763	a5 38		lda $38				lda 	zTemp1 						; get token #
.d765	b765	38		sec				sec 								; return with CS = passed.
.d766	b766	60		rts				rts
.d767	b767					_TSTNextPullY:
.d767	b767	7a		ply				ply 								; restore current, fall through.
.d768	b768					_TSTNext:
.d768	b768	e6 38		inc $38				inc 	zTemp1 						; token counter
.d76a	b76a	98		tya				tya
.d76b	b76b	18		clc				clc
.d76c	b76c	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d76e	b76e	1a		inc a				inc 	a 							; +1
.d76f	b76f	1a		inc a				inc 	a 							; +2
.d770	b770	a8		tay				tay
.d771	b771	10 c1		bpl $b734			bpl 	_TSTLoop 					; if Y < $80 loop back
.d773	b773	98		tya				tya 								; add Y to zTemp0 and reset Y
.d774	b774	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d776	b776	18		clc				clc  								; but have tables > 255 bytes
.d777	b777	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d779	b779	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d77b	b77b	90 b7		bcc $b734			bcc 	_TSTLoop
.d77d	b77d	e6 37		inc $37				inc 	zTemp0+1
.d77f	b77f	80 b3		bra $b734			bra 	_TSTLoop
.d781	b781					_TSTFail:
.d781	b781	18		clc				clc
.d782	b782	60		rts				rts
.d783	b783					Export_TKTokeniseLine:
.d783	b783	20 4f b9	jsr $b94f			jsr 	LCLFixLineBufferCase 		; fix line case
.d786	b786	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d788	b788	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d78b	b78b	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d78e	b78e	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d791	b791	a2 ff		ldx #$ff			ldx 	#$FF
.d793	b793					_TKFindFirst:
.d793	b793	e8		inx				inx
.d794	b794	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d797	b797	f0 62		beq $b7fb			beq 	_TKExit
.d799	b799	c9 20		cmp #$20			cmp 	#' '
.d79b	b79b	90 f6		bcc $b793			bcc 	_TKFindFirst
.d79d	b79d	c9 30		cmp #$30			cmp 	#'0'
.d79f	b79f	90 07		bcc $b7a8			bcc 	_TKNoLineNumber
.d7a1	b7a1	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7a3	b7a3	b0 03		bcs $b7a8			bcs 	_TKNoLineNumber
.d7a5	b7a5	20 79 b9	jsr $b979			jsr 	TOKExtractLineNumber
.d7a8	b7a8					_TKNoLineNumber:
.d7a8	b7a8					_TKTokeniseLoop:
.d7a8	b7a8	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ab	b7ab	f0 4e		beq $b7fb			beq 	_TKExit
.d7ad	b7ad	e8		inx				inx
.d7ae	b7ae	c9 20		cmp #$20			cmp 	#' '
.d7b0	b7b0	f0 f6		beq $b7a8			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7b2	b7b2	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7b3	b7b3	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7b5	b7b5	f0 68		beq $b81f			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7b7	b7b7	c9 41		cmp #$41			cmp 	#'A'
.d7b9	b7b9	90 04		bcc $b7bf			bcc 	_TKTokenisePunctuation
.d7bb	b7bb	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7bd	b7bd	90 60		bcc $b81f			bcc 	_TKTokeniseIdentifier
.d7bf	b7bf					_TKTokenisePunctuation:
.d7bf	b7bf	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7c1	b7c1	f0 2e		beq $b7f1			beq 	_TKString
.d7c3	b7c3	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7c5	b7c5	f0 2f		beq $b7f6			beq 	_TKHexConstant
.d7c7	b7c7	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7c9	b7c9	f0 36		beq $b801			beq 	_TKCheckDouble
.d7cb	b7cb	c9 3e		cmp #$3e			cmp 	#'>'
.d7cd	b7cd	f0 32		beq $b801			beq 	_TKCheckDouble
.d7cf	b7cf					_TKStandardPunctuation:
.d7cf	b7cf	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7d2	b7d2	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7d4	b7d4	90 0e		bcc $b7e4			bcc 	_TKNoShift
.d7d6	b7d6	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7d7	b7d7	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7d9	b7d9	85 36		sta $36				sta 	zTemp0
.d7db	b7db	68		pla				pla
.d7dc	b7dc	29 20		and #$20			and 	#32 						; bit 5
.d7de	b7de	4a		lsr a				lsr 	a 							; shift into bit 3
.d7df	b7df	4a		lsr a				lsr 	a
.d7e0	b7e0	05 36		ora $36				ora 	zTemp0
.d7e2	b7e2	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7e4	b7e4					_TKNoShift:
.d7e4	b7e4	20 be b9	jsr $b9be			jsr 	TOKWriteByte 				; write the punctuation character
.d7e7	b7e7	e8		inx				inx 								; consume the character
.d7e8	b7e8	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d7ea	b7ea	d0 bc		bne $b7a8			bne 	_TKTokeniseLoop 			; and loop round again.
.d7ec	b7ec	20 b2 b8	jsr $b8b2			jsr 	TOKCheckComment 			; comment checl
.d7ef	b7ef	80 b7		bra $b7a8			bra 	_TKTokeniseLoop
.d7f1	b7f1					_TKString:
.d7f1	b7f1	20 de b8	jsr $b8de			jsr 	TOKTokenString
.d7f4	b7f4	80 b2		bra $b7a8			bra 	_TKTokeniseLoop
.d7f6	b7f6					_TKHexConstant:
.d7f6	b7f6	20 19 b9	jsr $b919			jsr 	TOKHexConstant
.d7f9	b7f9	80 ad		bra $b7a8			bra 	_TKTokeniseLoop
.d7fb	b7fb	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d7fd	b7fd	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d800	b800	60		rts				rts
.d801	b801					_TKCheckDouble:
.d801	b801	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d804	b804	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d806	b806	90 c7		bcc $b7cf			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d808	b808	c9 3f		cmp #$3f			cmp 	#'>'+1
.d80a	b80a	b0 c3		bcs $b7cf			bcs 	_TKStandardPunctuation
.d80c	b80c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d80f	b80f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d811	b811	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d812	b812	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d815	b815	38		sec				sec
.d816	b816	e9 3c		sbc #$3c			sbc 	#'<'
.d818	b818	20 be b9	jsr $b9be			jsr 	TOKWriteByte 				; this is in the range 0-7
.d81b	b81b	e8		inx				inx 								; consume both
.d81c	b81c	e8		inx				inx
.d81d	b81d	80 89		bra $b7a8			bra 	_TKTokeniseLoop
.d81f	b81f					_TKTokeniseIdentifier:
.d81f	b81f	8e 00 04	stx $0400			stx 	identStart 					; save start
.d822	b822	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d825	b825					_TKCheckLoop:
.d825	b825	e8		inx				inx 								; look at next, we know first is identifier already.
.d826	b826	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d829	b829	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d82b	b82b	f0 f8		beq $b825			beq 	_TKCheckLoop
.d82d	b82d	c9 30		cmp #$30			cmp	 	#"0"
.d82f	b82f	90 0c		bcc $b83d			bcc 	_TKEndIdentifier
.d831	b831	c9 3a		cmp #$3a			cmp 	#"9"+1
.d833	b833	90 f0		bcc $b825			bcc 	_TKCheckLoop
.d835	b835	c9 41		cmp #$41			cmp	 	#"A"
.d837	b837	90 04		bcc $b83d			bcc 	_TKEndIdentifier
.d839	b839	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d83b	b83b	90 e8		bcc $b825			bcc 	_TKCheckLoop
.d83d	b83d					_TKEndIdentifier:
.d83d	b83d	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d840	b840	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d842	b842	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d844	b844	f0 06		beq $b84c			beq 	_TKHasTypeCharacter
.d846	b846	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d848	b848	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d84a	b84a	d0 07		bne $b853			bne 	_TKNoTypeCharacter
.d84c	b84c					_TKHasTypeCharacter:
.d84c	b84c	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d84f	b84f	e8		inx				inx 								; consume the type character
.d850	b850	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d853	b853					_TKNoTypeCharacter:
.d853	b853	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d855	b855	d0 09		bne $b860			bne 	_TKNoArray
.d857	b857	e8		inx				inx 								; skip the (
.d858	b858	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d85b	b85b	09 04		ora #$04			ora 	#$04
.d85d	b85d	8d 04 04	sta $0404			sta 	identTypeByte
.d860	b860					_TKNoArray:
.d860	b860	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d863	b863	20 3a b9	jsr $b93a			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d866	b866	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d868	b868	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d86a	b86a	20 2a b7	jsr $b72a			jsr 	TOKSearchTable
.d86d	b86d	a2 00		ldx #$00			ldx 	#0
.d86f	b86f	b0 1f		bcs $b890			bcs 	_TKFoundToken
.d871	b871	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d873	b873	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.d875	b875	20 2a b7	jsr $b72a			jsr 	TOKSearchTable
.d878	b878	a2 81		ldx #$81			ldx 	#$81
.d87a	b87a	b0 14		bcs $b890			bcs 	_TKFoundToken
.d87c	b87c	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d87e	b87e	a9 a3		lda #$a3			lda 	#(KeywordSet2) & $FF
.d880	b880	20 2a b7	jsr $b72a			jsr 	TOKSearchTable
.d883	b883	a2 82		ldx #$82			ldx 	#$82
.d885	b885	b0 09		bcs $b890			bcs 	_TKFoundToken
.d887	b887	20 ca b9	jsr $b9ca			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d88a	b88a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d88d	b88d	4c a8 b7	jmp $b7a8			jmp 	_TKTokeniseLoop 			; and go round again.
.d890	b890					_TKFoundToken:
.d890	b890	48		pha				pha 								; save token
.d891	b891	8a		txa				txa 								; shift in X, is there one ?
.d892	b892	f0 03		beq $b897			beq 	_TKNoTShift
.d894	b894	20 be b9	jsr $b9be			jsr 	TOKWriteByte 				; if so, write it out
.d897	b897					_TKNoTShift:
.d897	b897	68		pla				pla 								; restore and write token
.d898	b898	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d89b	b89b	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d89d	b89d	d0 0d		bne $b8ac			bne 	_TKNotRem 			 		; not shifted ?
.d89f	b89f	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d8a1	b8a1	d0 09		bne $b8ac			bne 	_TKNotRem
.d8a3	b8a3	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8a6	b8a6	20 b2 b8	jsr $b8b2			jsr 	TOKCheckComment
.d8a9	b8a9	4c a8 b7	jmp $b7a8			jmp 	_TKTokeniseLoop
.d8ac	b8ac					_TKNotRem:
.d8ac	b8ac	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8af	b8af	4c a8 b7	jmp $b7a8			jmp 	_TKTokeniseLoop 			; and go round again.
.d8b2	b8b2					TOKCheckComment:
.d8b2	b8b2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8b5	b8b5	e8		inx				inx
.d8b6	b8b6	c9 20		cmp #$20			cmp 	#' '
.d8b8	b8b8	f0 f8		beq $b8b2			beq 	TOKCheckComment
.d8ba	b8ba	ca		dex				dex 								; first non space character
.d8bb	b8bb	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8bd	b8bd	f0 1e		beq $b8dd			beq 	_TOKCCExit 					; then we are okay
.d8bf	b8bf	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8c1	b8c1	f0 1a		beq $b8dd			beq 	_TOKCCExit 					; then we are okay
.d8c3	b8c3	da		phx				phx
.d8c4	b8c4					_TOKCCLowerCase:
.d8c4	b8c4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8c7	b8c7	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d8c9	b8c9	90 09		bcc $b8d4			bcc 	_TOKKCNotUC
.d8cb	b8cb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8cd	b8cd	b0 05		bcs $b8d4			bcs 	_TOKKCNotUC
.d8cf	b8cf	49 20		eor #$20			eor 	#$20
.d8d1	b8d1	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d8d4	b8d4					_TOKKCNotUC:
.d8d4	b8d4	e8		inx				inx
.d8d5	b8d5	c9 00		cmp #$00			cmp 	#0
.d8d7	b8d7	d0 eb		bne $b8c4			bne 	_TOKCCLowerCase
.d8d9	b8d9	fa		plx				plx
.d8da	b8da	20 de b8	jsr $b8de			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d8dd	b8dd					_TOKCCExit:
.d8dd	b8dd	60		rts				rts
.d8de	b8de					TOKTokenString:
.d8de	b8de	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8e0	b8e0	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d8e3	b8e3	e8		inx				inx									; start of quoted string.
.d8e4	b8e4	da		phx				phx 								; push start of string on top
.d8e5	b8e5	ca		dex				dex 								; because we pre-increment
.d8e6	b8e6					_TSFindEnd:
.d8e6	b8e6	e8		inx				inx
.d8e7	b8e7	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8ea	b8ea	f0 04		beq $b8f0			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8ec	b8ec	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8ee	b8ee	d0 f6		bne $b8e6			bne 	_TSFindEnd
.d8f0	b8f0					_TSEndOfString:
.d8f0	b8f0	7a		ply				ply  								; so now Y is first character, X is character after end.
.d8f1	b8f1	48		pha				pha 								; save terminating character
.d8f2	b8f2	20 fa b8	jsr $b8fa			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d8f5	b8f5	68		pla				pla 								; terminating character
.d8f6	b8f6	f0 01		beq $b8f9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d8f8	b8f8	e8		inx				inx
.d8f9	b8f9					_TSNotQuote:
.d8f9	b8f9	60		rts				rts
.d8fa	b8fa					TOKWriteBlockXY:
.d8fa	b8fa	86 36		stx $36				stx 	zTemp0 						; save end character
.d8fc	b8fc	98		tya				tya 								; use 2's complement to work out the byte size
.d8fd	b8fd	49 ff		eor #$ff			eor 	#$FF
.d8ff	b8ff	38		sec				sec
.d900	b900	65 36		adc $36				adc 	zTemp0
.d902	b902	1a		inc a				inc 	a 							; one extra for NULL
.d903	b903	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d906	b906					_TOBlockLoop:
.d906	b906	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d908	b908	f0 09		beq $b913			beq 	_TOBlockExit
.d90a	b90a	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d90d	b90d	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d910	b910	c8		iny				iny
.d911	b911	80 f3		bra $b906			bra 	_TOBlockLoop
.d913	b913					_TOBlockExit:
.d913	b913	a9 00		lda #$00			lda 	#0 							; add NULL.
.d915	b915	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d918	b918	60		rts				rts
.d919	b919					TOKHexConstant:
.d919	b919	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d91b	b91b	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.d91e	b91e	e8		inx				inx									; start of quoted string.
.d91f	b91f	da		phx				phx 								; push start of constant on top
.d920	b920	ca		dex				dex
.d921	b921					_THFindLoop:
.d921	b921	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d922	b922	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d925	b925	c9 30		cmp #$30			cmp 	#"0"
.d927	b927	90 0c		bcc $b935			bcc 	_THFoundEnd
.d929	b929	c9 3a		cmp #$3a			cmp 	#"9"+1
.d92b	b92b	90 f4		bcc $b921			bcc 	_THFindLoop
.d92d	b92d	c9 41		cmp #$41			cmp 	#"A"
.d92f	b92f	90 04		bcc $b935			bcc 	_THFoundEnd
.d931	b931	c9 47		cmp #$47			cmp 	#"F"+1
.d933	b933	90 ec		bcc $b921			bcc 	_THFindLoop
.d935	b935					_THFoundEnd:
.d935	b935	7a		ply				ply 								; restore start
.d936	b936	20 fa b8	jsr $b8fa			jsr 	TOKWriteBlockXY 			; output the block
.d939	b939	60		rts				rts
.d93a	b93a					TOKCalculateHash:
.d93a	b93a	da		phx				phx
.d93b	b93b	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d93e	b93e	a9 00		lda #$00			lda 	#0
.d940	b940					_TCHLoop:
.d940	b940	18		clc				clc
.d941	b941	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d944	b944	e8		inx				inx
.d945	b945	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d948	b948	d0 f6		bne $b940			bne 	_TCHLoop
.d94a	b94a	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d94d	b94d	fa		plx				plx
.d94e	b94e	60		rts				rts
.d94f	b94f					LCLFixLineBufferCase:
.d94f	b94f	a2 00		ldx #$00			ldx 	#0
.d951	b951					_FLBCLoop:
.d951	b951	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d954	b954	f0 22		beq $b978			beq 	_FLBCExit 					; end of string.
.d956	b956	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d958	b958	f0 11		beq $b96b			beq 	_FLBCInQuotes
.d95a	b95a	e8		inx				inx
.d95b	b95b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d95d	b95d	90 f2		bcc $b951			bcc 	_FLBCLoop
.d95f	b95f	c9 7b		cmp #$7b			cmp 	#'z'+1
.d961	b961	b0 ee		bcs $b951			bcs 	_FLBCLoop
.d963	b963	38		sec				sec 								; make U/C
.d964	b964	e9 20		sbc #$20			sbc 	#32
.d966	b966	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d969	b969	80 e6		bra $b951			bra 	_FLBCLoop
.d96b	b96b					_FLBCInQuotes:
.d96b	b96b	e8		inx				inx 								; advance
.d96c	b96c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d96f	b96f	f0 07		beq $b978			beq 	_FLBCExit 					; exit on EOS
.d971	b971	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d973	b973	d0 f6		bne $b96b			bne 	_FLBCInQuotes
.d975	b975	e8		inx				inx 								; skip over it
.d976	b976	80 d9		bra $b951			bra 	_FLBCLoop
.d978	b978					_FLBCExit:
.d978	b978	60		rts				rts
.d979	b979					TOKExtractLineNumber:
.d979	b979	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d97c	b97c	48		pha				pha
.d97d	b97d	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d980	b980	48		pha				pha
.d981	b981	20 b7 b9	jsr $b9b7			jsr 	_LCLNTimes2 				; line # x 2
.d984	b984	20 b7 b9	jsr $b9b7			jsr 	_LCLNTimes2 				; line # x 4
.d987	b987	18		clc				clc 								; add stacked value
.d988	b988	68		pla				pla
.d989	b989	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d98c	b98c	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d98f	b98f	68		pla				pla
.d990	b990	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d993	b993	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d996	b996	20 b7 b9	jsr $b9b7			jsr 	_LCLNTimes2 				; line # x 10
.d999	b999	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d99c	b99c	e8		inx				inx
.d99d	b99d	29 0f		and #$0f			and 	#15 						; add to line #
.d99f	b99f	18		clc				clc
.d9a0	b9a0	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9a3	b9a3	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9a6	b9a6	90 03		bcc $b9ab			bcc 	_TLENNoCarry
.d9a8	b9a8	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ab	b9ab					_TLENNoCarry:
.d9ab	b9ab	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9ae	b9ae	c9 30		cmp #$30			cmp 	#'0'
.d9b0	b9b0	90 04		bcc $b9b6			bcc 	_TLENExit
.d9b2	b9b2	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9b4	b9b4	90 c3		bcc $b979			bcc 	TOKExtractLineNumber
.d9b6	b9b6					_TLENExit:
.d9b6	b9b6	60		rts				rts
.d9b7	b9b7					_LCLNTimes2:
.d9b7	b9b7	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9ba	b9ba	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9bd	b9bd	60		rts				rts
.d9be	b9be					TOKWriteByte:
.d9be	b9be	da		phx				phx
.d9bf	b9bf	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9c2	b9c2	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9c5	b9c5	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9c8	b9c8	fa		plx				plx
.d9c9	b9c9	60		rts				rts
.d9ca	b9ca					TOKCheckCreateVariableRecord:
.d9ca	b9ca	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9cc	b9cc	85 36		sta $36				sta 	0+zTemp0
.d9ce	b9ce	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9d0	b9d0	85 37		sta $37				sta 	1+zTemp0
.d9d2	b9d2					_CCVSearch:
.d9d2	b9d2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9d4	b9d4	f0 2c		beq $ba02			beq 	_CCVFail
.d9d6	b9d6	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9d8	b9d8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9da	b9da	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9dd	b9dd	d0 16		bne $b9f5			bne 	_CCVNext
.d9df	b9df	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9e1	b9e1	ae 00 04	ldx $0400			ldx 	identStart
.d9e4	b9e4					_CCVCompare:
.d9e4	b9e4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9e7	b9e7	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9e9	b9e9	e8		inx				inx 								; advance pointers
.d9ea	b9ea	c8		iny				iny
.d9eb	b9eb	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9ec	b9ec	d0 07		bne $b9f5			bne 	_CCVNext  					; didn't match go to next.
.d9ee	b9ee	90 f4		bcc $b9e4			bcc 	_CCVCompare 				; not finished yet.
.d9f0	b9f0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d9f3	b9f3	f0 41		beq $ba36			beq 	_CCVFound 					; yes, we were successful
.d9f5	b9f5					_CCVNext:
.d9f5	b9f5	18		clc				clc 								; go to next record.
.d9f6	b9f6	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d9f8	b9f8	65 36		adc $36				adc 	zTemp0
.d9fa	b9fa	85 36		sta $36				sta 	zTemp0
.d9fc	b9fc	90 d4		bcc $b9d2			bcc 	_CCVSearch
.d9fe	b9fe	e6 37		inc $37				inc 	zTemp0+1
.da00	ba00	80 d0		bra $b9d2			bra 	_CCVSearch
.da02	ba02					_CCVFail:
.da02	ba02	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da04	ba04	ad 03 04	lda $0403			lda 	identHash
.da07	ba07	91 36		sta ($36),y			sta 	(zTemp0),y
.da09	ba09	c8		iny				iny 								; offset 2 is the type byte
.da0a	ba0a	ad 04 04	lda $0404			lda 	identTypeByte
.da0d	ba0d	91 36		sta ($36),y			sta 	(zTemp0),y
.da0f	ba0f	c8		iny				iny
.da10	ba10					_CCVData:
.da10	ba10	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da12	ba12	91 36		sta ($36),y			sta 	(zTemp0),y
.da14	ba14	c8		iny				iny
.da15	ba15	c0 08		cpy #$08			cpy 	#8
.da17	ba17	90 f7		bcc $ba10			bcc 	_CCVData
.da19	ba19	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da1c	ba1c					_CCVCopyName:
.da1c	ba1c	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da1f	ba1f	91 36		sta ($36),y			sta 	(zTemp0),y
.da21	ba21	e8		inx				inx
.da22	ba22	c8		iny				iny
.da23	ba23	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da26	ba26	d0 f4		bne $ba1c			bne 	_CCVCopyName
.da28	ba28	98		tya				tya 								; patch offset
.da29	ba29	92 36		sta ($36)			sta 	(zTemp0)
.da2b	ba2b	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da2d	ba2d	91 36		sta ($36),y			sta 	(zTemp0),y
.da2f	ba2f	88		dey				dey
.da30	ba30	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da32	ba32	09 80		ora #$80			ora 	#$80
.da34	ba34	91 36		sta ($36),y			sta 	(zTemp0),y
.da36	ba36					_CCVFound:
.da36	ba36	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da38	ba38	38		sec				sec
.da39	ba39	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da3b	ba3b	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da3d	ba3d	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.da40	ba40	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da42	ba42	20 be b9	jsr $b9be			jsr 	TOKWriteByte
.da45	ba45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da46	ba46					SNDCheckChannel:
.da46	ba46	aa		tax				tax
.da47	ba47	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da4a	ba4a	d0 38		bne $ba84			bne 	_SNDCCExit
.da4c	ba4c	da		phx				phx 								; save current channel
.da4d	ba4d	8a		txa				txa 								; put in A
.da4e	ba4e	20 ca ba	jsr $baca			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da51	ba51	68		pla				pla 								; channel # in A
.da52	ba52	90 30		bcc $ba84			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da54	ba54	a8		tay				tay 								; Y is the channel #
.da55	ba55	bd 2d 07	lda $072d,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da58	ba58	99 2c 08	sta $082c,y			sta 	SNDPitchLow,y
.da5b	ba5b	bd 2e 07	lda $072e,x			lda 	SNDQueue+2,x
.da5e	ba5e	99 30 08	sta $0830,y			sta 	SNDPitchHigh,y
.da61	ba61	bd 2f 07	lda $072f,x			lda 	SNDQueue+3,x
.da64	ba64	99 34 08	sta $0834,y			sta 	SNDVolume,y
.da67	ba67	bd 30 07	lda $0730,x			lda 	SNDQueue+4,x
.da6a	ba6a	99 38 08	sta $0838,y			sta 	SNDTimeLeft,y
.da6d	ba6d	bd 31 07	lda $0731,x			lda 	SNDQueue+5,x
.da70	ba70	99 3c 08	sta $083c,y			sta 	SNDAdjustLow,y
.da73	ba73	bd 32 07	lda $0732,x			lda 	SNDQueue+6,x
.da76	ba76	99 40 08	sta $0840,y			sta 	SNDAdjustHigh,y
.da79	ba79	5a		phy				phy 								; save channel #
.da7a	ba7a	20 e4 ba	jsr $bae4			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da7d	ba7d	ce 2b 07	dec $072b			dec 	SNDLength 					; reduce the queue length.
.da80	ba80	68		pla				pla
.da81	ba81	20 85 ba	jsr $ba85			jsr 	SNDUpdateNote 				; update channel A
.da84	ba84					_SNDCCExit:
.da84	ba84	60		rts				rts
.da85	ba85					SNDUpdateNote:
.da85	ba85	aa		tax				tax 								; so we can access records
.da86	ba86	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da87	ba87	0a		asl a				asl 	a
.da88	ba88	0a		asl a				asl 	a
.da89	ba89	0a		asl a				asl 	a
.da8a	ba8a	0a		asl a				asl 	a
.da8b	ba8b	8d 2a 07	sta $072a			sta 	SNDChannelBits
.da8e	ba8e	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; are we silent
.da91	ba91	f0 2e		beq $bac1			beq 	_SNDUNIsSilent
.da93	ba93	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; push channel bits on stack
.da96	ba96	48		pha				pha
.da97	ba97	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.da9a	ba9a	29 0f		and #$0f			and 	#$0F
.da9c	ba9c	0d 2a 07	ora $072a			ora 	SNDChannelBits 				; set channel bits
.da9f	ba9f	09 80		ora #$80			ora 	#$80 						; write to pitch register
.daa1	baa1	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts
.daa4	baa4	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daa7	baa7	8d 2a 07	sta $072a			sta 	SNDChannelBits
.daaa	baaa	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.daad	baad	4e 2a 07	lsr $072a			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dab0	bab0	6a		ror a				ror 	a
.dab1	bab1	4e 2a 07	lsr $072a			lsr 	SNDChannelBits
.dab4	bab4	6a		ror a				ror 	a
.dab5	bab5	4a		lsr a				lsr 	a 							; put in bits 0-5
.dab6	bab6	4a		lsr a				lsr 	a
.dab7	bab7	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts 				; write as rest of pitch register
.daba	baba	68		pla				pla
.dabb	babb	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.dabd	babd	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts
.dac0	bac0	60		rts				rts
.dac1	bac1					_SNDUNIsSilent:
.dac1	bac1	ad 2a 07	lda $072a			lda 	SNDChannelBits 				; channel bits
.dac4	bac4	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dac6	bac6	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts 				; write to the ports
.dac9	bac9	60		rts				rts
.daca	baca					SNDFindNextNoteForA:
.daca	baca	ac 2b 07	ldy $072b			ldy 	SNDLength 					; queue size into Y
.dacd	bacd	f0 13		beq $bae2			beq 	_SNDFNNFail 				; queue empty.
.dacf	bacf	a2 00		ldx #$00			ldx 	#0
.dad1	bad1					_SNDFNNSearch:
.dad1	bad1	dd 2c 07	cmp $072c,x			cmp 	SNDQueue,x 					; does it match the channel
.dad4	bad4	38		sec				sec
.dad5	bad5	f0 0c		beq $bae3			beq 	_SNDFNNExit 				; if so exit with CS.
.dad7	bad7	e8		inx				inx 								; next queue slot.
.dad8	bad8	e8		inx				inx
.dad9	bad9	e8		inx				inx
.dada	bada	e8		inx				inx
.dadb	badb	e8		inx				inx
.dadc	badc	e8		inx				inx
.dadd	badd	e8		inx				inx
.dade	bade	e8		inx				inx
.dadf	badf	88		dey				dey 								; done the whole queue
.dae0	bae0	d0 ef		bne $bad1			bne 	_SNDFNNSearch 				; no, go back.
.dae2	bae2					_SNDFNNFail:
.dae2	bae2	18		clc				clc
.dae3	bae3					_SNDFNNExit:
.dae3	bae3	60		rts				rts
.dae4	bae4					SNDDeleteXFromQueue:
.dae4	bae4	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.dae6	bae6	f0 09		beq $baf1			beq 	_SNDDXExit
.dae8	bae8	bd 34 07	lda $0734,x			lda 	SNDQueue+8,x
.daeb	baeb	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.daee	baee	e8		inx				inx
.daef	baef	80 f3		bra $bae4			bra 	SNDDeleteXFromQueue
.daf1	baf1					_SNDDXExit:
.daf1	baf1	60		rts				rts
.072a						SNDChannelBits:
>072a								.fill 	1
.daf2	baf2					SNDQueueRequest:
.daf2	baf2	86 36		stx $36				stx 	zTemp0						; save queue address
.daf4	baf4	84 37		sty $37				sty 	zTemp0+1
.daf6	baf6	ae 2b 07	ldx $072b			ldx 	SNDLength 					; queue is full, can't take any more.
.daf9	baf9	e0 20		cpx #$20			cpx 	#SNDQueueSize
.dafb	bafb	f0 21		beq $bb1e			beq 	_SNDQRExit
.dafd	bafd	29 03		and #$03			and 	#3	 						; channel # and push on stack
.daff	baff	48		pha				pha
.db00	bb00	8a		txa				txa  								; get offset in queue buffer/
.db01	bb01	0a		asl a				asl 	a
.db02	bb02	0a		asl a				asl 	a
.db03	bb03	0a		asl a				asl 	a
.db04	bb04	aa		tax				tax
.db05	bb05	68		pla				pla 								; get back and push again
.db06	bb06	48		pha				pha
.db07	bb07	9d 2c 07	sta $072c,x			sta 	SNDQueue+0,x 				; save the channel #
.db0a	bb0a	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db0c	bb0c					_SNDQCopy:
.db0c	bb0c	b1 36		lda ($36),y			lda 	(zTemp0),y
.db0e	bb0e	e8		inx				inx
.db0f	bb0f	c8		iny				iny
.db10	bb10	9d 2c 07	sta $072c,x			sta 	SNDQueue,x
.db13	bb13	c0 06		cpy #$06			cpy 	#6
.db15	bb15	d0 f5		bne $bb0c			bne 	_SNDQCopy
.db17	bb17	ee 2b 07	inc $072b			inc 	SNDLength 					; bump queue length.
.db1a	bb1a	68		pla				pla 								; get channel # back
.db1b	bb1b	20 46 ba	jsr $ba46			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db1e	bb1e					_SNDQRExit:
.db1e	bb1e	60		rts				rts
.db1f	bb1f					SNDSilenceChannel:
.db1f	bb1f	aa		tax				tax 								; zero time left.
.db20	bb20	9e 38 08	stz $0838,x			stz 	SNDTimeLeft,x
.db23	bb23	0a		asl a				asl 	a 							; shift into position
.db24	bb24	0a		asl a				asl 	a
.db25	bb25	0a		asl a				asl 	a
.db26	bb26	0a		asl a				asl 	a
.db27	bb27	0a		asl a				asl 	a
.db28	bb28	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db2a	bb2a	20 2e bb	jsr $bb2e			jsr 	SNDWritePorts
.db2d	bb2d	60		rts				rts
.db2e	bb2e					SNDWritePorts:
.db2e	bb2e	da		phx				phx 								; save X
.db2f	bb2f	a6 01		ldx $01				ldx 	1 							; save I/O status
.db31	bb31	64 01		stz $01				stz 	1 							; access I/O page 0
.db33	bb33	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db36	bb36	8d 10 d6	sta $d610			sta 	$D610
.db39	bb39	86 01		stx $01				stx 	1 							; restore I/O
.db3b	bb3b	fa		plx				plx 								; restore X
.db3c	bb3c	60		rts				rts
.db3d	bb3d					Export_SNDCommand:
.db3d	bb3d	da		phx				phx 								; save XY
.db3e	bb3e	5a		phy				phy
.db3f	bb3f	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db41	bb41	f0 1d		beq $bb60			beq 	_SNDInitialise
.db43	bb43	90 28		bcc $bb6d			bcc 	_SNDExit
.db45	bb45	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db47	bb47	f0 17		beq $bb60			beq 	_SNDSilence
.db49	bb49	b0 22		bcs $bb6d			bcs 	_SNDExit
.db4b	bb4b	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db4d	bb4d	b0 09		bcs $bb58			bcs 	_SNDQueryPlay
.db4f	bb4f	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db51	bb51	b0 1a		bcs $bb6d			bcs 	_SNDExit
.db53	bb53	20 f2 ba	jsr $baf2			jsr 	SNDQueueRequest
.db56	bb56	80 15		bra $bb6d			bra 	_SNDExit
.db58	bb58					_SNDQueryPlay:
.db58	bb58	29 03		and #$03			and 	#3 							; get channel #
.db5a	bb5a	aa		tax				tax
.db5b	bb5b	bd 38 08	lda $0838,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db5e	bb5e	80 0d		bra $bb6d			bra 	_SNDExit
.db60	bb60					_SNDInitialise:
.db60	bb60					_SNDSilence:
.db60	bb60	9c 2b 07	stz $072b			stz 	SNDLength 					; empty the queue.
.db63	bb63	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db65	bb65					_SNDSilenceLoop:
.db65	bb65	48		pha				pha
.db66	bb66	20 1f bb	jsr $bb1f			jsr 	SNDSilenceChannel
.db69	bb69	68		pla				pla
.db6a	bb6a	3a		dec a				dec 	a
.db6b	bb6b	10 f8		bpl $bb65			bpl 	_SNDSilenceLoop
.db6d	bb6d					_SNDExit:
.db6d	bb6d	7a		ply				ply
.db6e	bb6e	fa		plx				plx
.db6f	bb6f	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072b						SNDLength:
>072b								.fill 	1
.072c						SNDQueue:
>072c								.fill 	SNDQueueSize * 8
.082c						SNDPitchLow:
>082c								.fill 	4
.0830						SNDPitchHigh:
>0830								.fill 	4
.0834						SNDVolume:
>0834								.fill 	4
.0838						SNDTimeLeft:
>0838								.fill 	4
.083c						SNDAdjustLow:
>083c								.fill 	4
.0840						SNDAdjustHigh:
>0840								.fill 	4
.db70	bb70					Export_SNDUpdate:
.db70	bb70					PagedSNDUpdate:
.db70	bb70	ad 38 08	lda $0838			lda 	SNDTimeLeft+0 				; look at time remaining
.db73	bb73	f0 05		beq $bb7a			beq 	_SNDUNot0 					; not playing
.db75	bb75	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db77	bb77	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel 			; update it.
.db7a	bb7a					_SNDUNot0:
.db7a	bb7a	ad 39 08	lda $0839			lda 	SNDTimeLeft+1
.db7d	bb7d	f0 05		beq $bb84			beq 	_SNDUNot1
.db7f	bb7f	a2 01		ldx #$01			ldx 	#1
.db81	bb81	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel
.db84	bb84					_SNDUNot1:
.db84	bb84	ad 3a 08	lda $083a			lda 	SNDTimeLeft+2
.db87	bb87	f0 05		beq $bb8e			beq 	_SNDUNot2
.db89	bb89	a2 02		ldx #$02			ldx 	#2
.db8b	bb8b	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel
.db8e	bb8e					_SNDUNot2:
.db8e	bb8e	ad 3b 08	lda $083b			lda 	SNDTimeLeft+3
.db91	bb91	f0 05		beq $bb98			beq 	_SNDUNot3
.db93	bb93	a2 03		ldx #$03			ldx 	#3
.db95	bb95	20 99 bb	jsr $bb99			jsr 	SNDUpdateChannel
.db98	bb98					_SNDUNot3:
.db98	bb98	60		rts				rts
.db99	bb99					SNDUpdateChannel:
.db99	bb99	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.db9b	bb9b	f0 2c		beq $bbc9			beq 	_SNDUCExit
.db9d	bb9d	3a		dec a				dec 	a 							; decrement and update timer
.db9e	bb9e	9d 38 08	sta $0838,x			sta 	SNDTimeLeft,x
.dba1	bba1	f0 1d		beq $bbc0			beq 	_SNDUCUpdate 				; if zero, silence channel
.dba3	bba3	bd 3c 08	lda $083c,x			lda 	SNDAdjustLow,x 				; adjust ?
.dba6	bba6	1d 40 08	ora $0840,x			ora 	SNDAdjustHigh,x
.dba9	bba9	f0 1e		beq $bbc9			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbab	bbab	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbac	bbac	bd 2c 08	lda $082c,x			lda 	SNDPitchLow,x
.dbaf	bbaf	7d 3c 08	adc $083c,x			adc 	SNDAdjustLow,x
.dbb2	bbb2	9d 2c 08	sta $082c,x			sta 	SNDPitchLow,x
.dbb5	bbb5	bd 30 08	lda $0830,x			lda 	SNDPitchHigh,x
.dbb8	bbb8	7d 40 08	adc $0840,x			adc 	SNDAdjustHigh,x
.dbbb	bbbb	29 03		and #$03			and 	#3
.dbbd	bbbd	9d 30 08	sta $0830,x			sta 	SNDPitchHigh,x
.dbc0	bbc0					_SNDUCUpdate:
.dbc0	bbc0	8a		txa				txa 								; which channel.
.dbc1	bbc1	48		pha				pha
.dbc2	bbc2	20 85 ba	jsr $ba85			jsr 	SNDUpdateNote 				; update the current note
.dbc5	bbc5	68		pla				pla
.dbc6	bbc6	20 46 ba	jsr $ba46			jsr 	SNDCheckChannel 			; more to do ?
.dbc9	bbc9					_SNDUCExit:
.dbc9	bbc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dbca	bbca					Export_KNLInputSingleCharacter:
.dbca	bbca					PagedInputSingleCharacter:
.dbca	bbca	da		phx				phx
.dbcb	bbcb	5a		phy				phy
.dbcc	bbcc					_EISCWait:
.dbcc	bbcc	a5 01		lda $01				lda 	1 							; save I/O 0
.dbce	bbce	48		pha				pha
.dbcf	bbcf	64 01		stz $01				stz 	1 							; access I/O Page 0
.dbd1	bbd1	38		sec				sec 								; calculate timer - LastTick
.dbd2	bbd2	ad 59 d6	lda $d659			lda 	$D659
.dbd5	bbd5	aa		tax				tax 								; saving timer in X
.dbd6	bbd6	ed 5c 06	sbc $065c			sbc 	LastTick
.dbd9	bbd9	c9 03		cmp #$03			cmp 	#3
.dbdb	bbdb	90 06		bcc $bbe3			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dbdd	bbdd	8e 5c 06	stx $065c			stx 	LastTick 					; update last timer
.dbe0	bbe0	20 70 bb	jsr $bb70			jsr 	PagedSNDUpdate 							; go do the code.
.dbe3	bbe3					_NoFireTick:
.dbe3	bbe3	68		pla				pla 								; restore I/O 0
.dbe4	bbe4	85 01		sta $01				sta 	1
.dbe6	bbe6	20 f0 bb	jsr $bbf0			jsr 	CheckKeyPressed
.dbe9	bbe9	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dbeb	bbeb	f0 df		beq $bbcc			beq 	_EISCWait
.dbed	bbed	7a		ply				ply
.dbee	bbee	fa		plx				plx
.dbef	bbef	60		rts				rts
.dbf0	bbf0					Export_KNLInkey:
.dbf0	bbf0					CheckKeyPressed:
.dbf0	bbf0	a9 44		lda #$44			lda     #<event 					; tell kernel where events go.
.dbf2	bbf2	85 f0		sta $f0				sta     kernel.args.events+0
.dbf4	bbf4	a9 08		lda #$08			lda     #>event
.dbf6	bbf6	85 f1		sta $f1				sta     kernel.args.events+1
.dbf8	bbf8	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dbfb	bbfb	b0 0b		bcs $bc08			bcs 	_CKPNoEvent 				; no event
.dbfd	bbfd	ad 44 08	lda $0844			lda     event.type
.dc00	bc00	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc02	bc02	d0 04		bne $bc08			bne 	_CKPNoEvent
.dc04	bc04	ad 49 08	lda $0849			lda     event.key.ascii
.dc07	bc07	60		rts				rts
.dc08	bc08					_CKPNoEvent:
.dc08	bc08	a9 00		lda #$00			lda 	#0
.dc0a	bc0a	60		rts				rts
.dc0b	bc0b					Export_EXTBreakCheck:
.dc0b	bc0b	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc0e	bc0e					Export_EXTReadController:
.dc0e	bc0e	da		phx				phx
.dc0f	bc0f	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc11	bc11	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc13	bc13	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc16	bc16	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc18	bc18	fa		plx				plx
.dc19	bc19	60		rts				rts
.0844						event
>0844						type        .byte   ?   ; Enum above
>0845						buf         .byte   ?   ; page id or zero
>0846						ext         .byte   ?   ; page id or zero
.0847						key
>0847						keyboard    .byte   ?   ; Keyboard ID
>0848						raw         .byte   ?   ; Raw key ID
>0849						ascii       .byte   ?   ; ASCII value
>084a						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0847						mouse
.0847						delta
>0847						x           .byte   ?
>0848						y           .byte   ?
>0849						z           .byte   ?
>084a						buttons     .byte   ?
.0847						clicks
>0847						inner       .byte   ?
>0848						middle      .byte   ?
>0849						outer       .byte   ?
.0847						udp
>0847						token       .byte   ?   ; TODO: break out into fields
.0847						file
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						data
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						read        .byte   ?   ; Number of bytes actually read
.0849						wrote
>0849						requested   .byte   ?   ; Requested number of bytes to read
>084a						wrote       .byte   ?   ; Number of bytes actually read
.0847						directory
>0847						stream      .byte   ?
>0848						cookie      .byte   ?
.0849						volume
>0849						len         .byte   ?   ; Length of volname (in buf)
>084a						flags       .byte   ?   ; block size, text encoding
.0849						file
>0849						len         .byte   ?
>084a						flags       .byte   ?   ; block scale, text encoding, approx size
.0849						free
>0849						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  End of listing
