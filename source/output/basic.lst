
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=1 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Jan 27 16:41:56 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						AUTORUN=1
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		03						.byte   3               			; 3 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 d8 bb	jsr $bbd8		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 0b bc	jsr $bc0b		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 89 b5	jsr $b589		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 1d b8	jsr $b81d		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80a3		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a5		09 80		ora #$80			ora 	#$80
.80a7		85 00		sta $00				sta 	0
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80ca		20 2e 82	jsr $822e			jsr 	KNLSetDrive
.80cd		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cf		aa		tax				tax
.80d0		a8		tay				tay
.80d1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d4		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d6		20 75 80	jsr $8075			jsr 	SNDCommand
.80d9		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80db		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80de		a9 09		lda #$09			lda 	#9
.80e0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		64 01		stz $01				stz 	1
.80e8		ad ad d6	lda $d6ad			lda 	$D6AD
.80eb		20 03 84	jsr $8403			jsr 	PrintHex
.80ee		ad ac d6	lda $d6ac			lda 	$D6AC
.80f1		20 03 84	jsr $8403			jsr 	PrintHex
.80f4		ad ab d6	lda $d6ab			lda 	$D6AB
.80f7		20 03 84	jsr $8403			jsr 	PrintHex
.80fa		ad aa d6	lda $d6aa			lda 	$D6AA
.80fd		20 03 84	jsr $8403			jsr 	PrintHex
.8100		a9 20		lda #$20			lda 	#32
.8102		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8105		ad a8 d6	lda $d6a8			lda 	$D6A8
.8108		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810b		ad a9 d6	lda $d6a9			lda 	$D6A9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8113		a9 21		lda #$21			lda 	#Prompt & $FF
.8115		20 2b 98	jsr $982b			jsr 	PrintStringXA
.8118		20 fd 91	jsr $91fd			jsr 	NewProgram 					; erase current program
.811b		20 87 85	jsr $8587			jsr 	BackloadProgram
.811e		4c 88 93	jmp $9388			jmp 	RunCurrentProgram
>8121		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8123		09 09 32 37 2f 30 31 2f			.text 9,9,"27/01/23 32"
>812b		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>8130		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8134						ProcessEvents:
.8134		20 6d 82	jsr $826d			jsr 	KNLSetEventPointer
.8137		20 a5 81	jsr $81a5			jsr     GetNextEvent 				; get next event
.813a		b0 27		bcs $8163			bcs 	_PEExitZ 					; nothing left to process.
.813c		ad 82 07	lda $0782			lda 	KNLEvent.type 				; go back if event not key.pressed.
.813f		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8141		d0 f1		bne $8134			bne 	ProcessEvents
.8143		ad 88 07	lda $0788			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8146		d0 ec		bne $8134			bne 	ProcessEvents
.8148		ad 87 07	lda $0787			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814b		c9 03		cmp #$03			cmp 	#3
.814d		f0 11		beq $8160			beq 	_PEReturnBreak  			; no, keep going.
.814f		da		phx				phx
.8150		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8153		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8155		f0 06		beq $815d			beq 	_PENoQueue
.8157		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815a		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.815d						_PENoQueue:
.815d		fa		plx				plx
.815e		80 d4		bra $8134			bra 	ProcessEvents
.8160						_PEReturnBreak:
.8160		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8162		60		rts				rts
.8163						_PEExitZ:
.8163		a9 00		lda #$00			lda 	#0
.8165		60		rts				rts
.8166						PopKeyboardQueue:
.8166		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8169		f0 17		beq $8182			beq 	_PKQExit 					; zero, then exit.
.816b		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.816e		48		pha				pha
.816f		da		phx				phx 								; drop head of queue
.8170		a2 00		ldx #$00			ldx 	#0
.8172						_PKQLoop:
.8172		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8175		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8178		e8		inx				inx
.8179		e0 07		cpx #$07			cpx 	#7
.817b		d0 f5		bne $8172			bne 	_PKQLoop
.817d		fa		plx				plx
.817e		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8181		68		pla				pla 								; restore head of queue.
.8182						_PKQExit:
.8182		60		rts				rts
.8183						KNLGetKeyPressed:
.8183		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8186		d0 de		bne $8166			bne 	PopKeyboardQueue 			; if so, pop and return it
.8188		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process any outstanding events
.818b		a9 00		lda #$00			lda 	#0
.818d		60		rts				rts
.818e						KNLGetSingleCharacter:
.818e		20 83 81	jsr $8183			jsr 	KNLGetKeyPressed
.8191		c9 00		cmp #$00			cmp 	#0
.8193		f0 f9		beq $818e			beq 	KNLGetSingleCharacter
.8195		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8196						TickHandler:
.8196		5a		phy				phy 								; need to preserve Y
.8197		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819a		7a		ply				ply
.819b		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819c						ResetIOTracking:
.819c		a2 21		ldx #$21			ldx 	#GNEEnd-GNEBegin-1
.819e						_RIOLoop:
.819e		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.81a1		ca		dex				dex
.81a2		10 fa		bpl $819e			bpl 	_RIOLoop
.81a4		60		rts				rts
.81a5						GetNextEvent:
.81a5		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.81a8		08		php				php									; save yes/no flag.
.81a9		b0 29		bcs $81d4			bcs 	_GNEExit
.81ab		48		pha				pha 								; save registers
.81ac		da		phx				phx
.81ad		5a		phy				phy
.81ae		ad 82 07	lda $0782			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.81b1		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.81b3		f0 04		beq $81b9			beq 	_GNEKeyEvent
.81b5		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.81b7		d0 08		bne $81c1			bne 	_GNECheckMouseEvent
.81b9						_GNEKeyEvent:
.81b9		20 dc 81	jsr $81dc			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.81bc		20 f9 81	jsr $81f9			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.81bf		80 10		bra $81d1			bra 	_GNEEventExit
.81c1						_GNECheckMouseEvent:
.81c1		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.81c3		d0 05		bne $81ca			bne 	_GNENotDelta
.81c5		20 d6 81	jsr $81d6			jsr 	ProcessMouseDeltaEvent 		; process them.
.81c8		80 07		bra $81d1			bra 	_GNEEventExit
.81ca						_GNENotDelta:
.81ca		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.81cc		d0 03		bne $81d1			bne 	_GNEEventExit
.81ce		20 d9 81	jsr $81d9			jsr 	ProcessMouseClickEvent 		; process them.
.81d1						_GNEEventExit:
.81d1		7a		ply				ply 								; restore registers
.81d2		fa		plx				plx
.81d3		68		pla				pla
.81d4						_GNEExit:
.81d4		28		plp				plp
.81d5		60		rts				rts
.81d6						ProcessMouseDeltaEvent:
.81d6		e6 e0		inc $e0				inc 	$E0
.81d8		60		rts				rts
.81d9						ProcessMouseClickEvent:
.81d9		e6 e1		inc $e1				inc 	$E1
.81db		60		rts				rts
.81dc						ProcessKeyboardEvent:
.81dc		ad 86 07	lda $0786			lda 	KNLEvent.key.raw 			; raw key code.
.81df		20 1a 82	jsr $821a			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.81e2		ac 82 07	ldy $0782			ldy 	KNLEvent.type
.81e5		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.81e7		f0 07		beq $81f0			beq 	_PKERelease
.81e9		1d 5f 06	ora $065f,x			ora 	KeyStatus,x 				; set bit
.81ec		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81ef		60		rts				rts
.81f0						_PKERelease:
.81f0		49 ff		eor #$ff			eor 	#$FF						; clear bit
.81f2		3d 5f 06	and $065f,x			and 	KeyStatus,x
.81f5		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81f8		60		rts				rts
.81f9						UpdateKeyboardJoystick:
.81f9		9c 80 06	stz $0680			stz 	KeyJoystick
.81fc		a2 00		ldx #$00			ldx 	#0
.81fe						_UKJLoop:
.81fe		bd 15 82	lda $8215,x			lda 	_UKJKeys,x 					; which key
.8201		29 1f		and #$1f			and 	#$1F
.8203		a8		tay				tay
.8204		b9 5f 06	lda $065f,y			lda 	KeyStatus,y 				; get status
.8207		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8209		18		clc				clc  								; set C if bit set
.820a		69 ff		adc #$ff			adc 	#$FF
.820c		2e 80 06	rol $0680			rol 	KeyJoystick 				; shift into place
.820f		e8		inx				inx
.8210		e0 05		cpx #$05			cpx 	#5 							; do all 5
.8212		d0 ea		bne $81fe			bne 	_UKJLoop
.8214		60		rts				rts
.8215						_UKJKeys:
>8215		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.821a						KeyboardConvertXA:
.821a		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.821c		8e 7f 06	stx $067f			stx 	KeyMaskTemp
.821f						_KCCALoop:
.821f		18		clc				clc
.8220		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.8222		b0 05		bcs $8229			bcs 	_KCCADone
.8224		0e 7f 06	asl $067f			asl 	KeyMaskTemp 				; shift the mask temp
.8227		80 f6		bra $821f			bra 	_KCCALoop
.8229						_KCCADone:
.8229		aa		tax				tax 								; table entry in X
.822a		ad 7f 06	lda $067f			lda 	KeyMaskTemp 				; mask temp in A.
.822d		60		rts				rts
.065f						GNEBegin:
.065f						KeyStatus:
>065f								.fill 	32
.067f						KeyMaskTemp:
>067f								.fill 	1
.0680						KeyJoystick:
>0680								.fill 	1
.0681						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.822e						KNLSetDrive:
.822e		8d 81 07	sta $0781			sta 	KNLDefaultDrive
.8231		60		rts				rts
.8232						KNLOpenFileWrite:
.8232		48		pha				pha
.8233		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8235		80 03		bra $823a			bra 	KNLOpenStart
.8237						KNLOpenFileRead:
.8237		48		pha				pha
.8238		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.823a						KNLOpenStart:
.823a		85 f5		sta $f5				sta     kernel.args.file.open.mode
.823c		68		pla				pla
.823d		20 78 82	jsr $8278			jsr 	KNLSetupFileName
.8240		20 6d 82	jsr $826d			jsr 	KNLSetEventPointer
.8243		ad 81 07	lda $0781			lda 	KNLDefaultDrive 			; currently drive zero only.
.8246		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.8248		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.824b		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.824d		b0 1d		bcs $826c			bcs     _out
.824f						_loop
.824f		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8252		20 a5 81	jsr $81a5			jsr     GetNextEvent
.8255		b0 f8		bcs $824f			bcs     _loop
.8257		ad 82 07	lda $0782			lda 	KNLEvent.type
.825a		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.825c		f0 0a		beq $8268			beq 	_success
.825e		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8260		f0 0a		beq $826c			beq 	_out
.8262		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8264		f0 06		beq $826c			beq 	_out
.8266		80 e7		bra $824f			bra     _loop
.8268						_success
.8268		ad 85 07	lda $0785			lda     KNLEvent.file.stream
.826b		18		clc				clc
.826c						_out
.826c		60		rts				rts
.826d						KNLSetEventPointer:
.826d		48		pha				pha
.826e		a9 82		lda #$82			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8270		85 f0		sta $f0				sta     kernel.args.events+0
.8272		a9 07		lda #$07			lda     #KNLEvent >> 8
.8274		85 f1		sta $f1				sta     kernel.args.events+1
.8276		68		pla				pla
.8277		60		rts				rts
.8278						KNLSetupFileName:
.8278		5a		phy				phy 								; save Y on stack
.8279		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.827b		86 37		stx $37				stx 	zTemp0+1
.827d		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.827f		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8281		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8283						_KNLGetLength:
.8283		c8		iny				iny
.8284		b1 36		lda ($36),y			lda 	(zTemp0),y
.8286		d0 fb		bne $8283			bne 	_KNLGetLength
.8288		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.828a		7a		ply				ply
.828b		60		rts				rts
.828c						KNLReadBlock:
.828c		85 f3		sta $f3				sta     kernel.args.file.read.stream
.828e		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8290		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8293		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8295		b0 2e		bcs $82c5			bcs     _KGNBExitFail               ; report as general error
.8297						_KGRBEventLoop:
.8297		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.829a		20 a5 81	jsr $81a5			jsr     GetNextEvent
.829d		b0 f8		bcs $8297			bcs     _KGRBEventLoop
.829f		ad 82 07	lda $0782			lda 	KNLEvent.type 				; get event
.82a2		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.82a4		f0 0a		beq $82b0			beq     _KNLRBGetNextByte
.82a6		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.82a8		f0 1b		beq $82c5			beq 	_KGNBExitFail
.82aa		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82ac		f0 17		beq $82c5			beq 	_KGNBExitFail
.82ae		80 e7		bra $8297			bra 	_KGRBEventLoop
.82b0						_KNLRBGetNextByte:
.82b0		a9 81		lda #$81			lda     #<KNLReadBuffer 			; Set the target buffer
.82b2		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.82b4		a9 06		lda #$06			lda     #>KNLReadBuffer
.82b6		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.82b8		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Set the target length
.82bb		85 fd		sta $fd				sta     kernel.args.recv.buflen
.82bd		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.82c0		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.82c3		18		clc				clc
.82c4		60		rts				rts
.82c5						_KGNBExitFail:
.82c5		38		sec				sec
.82c6		60		rts				rts
.82c7						KNLWriteBlock:
.82c7		da		phx				phx
.82c8		5a		phy				phy
.82c9		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.82cb		a5 36		lda $36				lda     zTemp0 						; save the data location.
.82cd		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.82cf		a5 37		lda $37				lda     zTemp0+1
.82d1		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.82d3		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.82d5		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.82d8		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.82da		b0 21		bcs $82fd			bcs 	_KWBFailed
.82dc						_KNLWLoop:
.82dc		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.82df		20 a5 81	jsr $81a5			jsr     GetNextEvent
.82e2		b0 f8		bcs $82dc			bcs     _KNLWLoop
.82e4		ad 82 07	lda $0782			lda     KNLEvent.type 				; various errors.
.82e7		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.82e9		f0 12		beq $82fd			beq 	_KWBFailed
.82eb		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.82ed		f0 0e		beq $82fd			beq 	_KWBFailed
.82ef		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82f1		f0 0a		beq $82fd			beq 	_KWBFailed
.82f3		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.82f5		d0 e5		bne $82dc			bne 	_KNLWLoop
.82f7		18		clc				clc
.82f8		ad 88 07	lda $0788			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.82fb		80 01		bra $82fe			bra 	_KWBExit
.82fd						_KWBFailed:
.82fd		38		sec				sec
.82fe						_KWBExit:
.82fe		7a		ply				ply
.82ff		fa		plx				plx
.8300		60		rts				rts
.8301						KNLCloseFile:
.8301		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8303		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8306		60		rts				rts
.8307						KNLReadController:
.8307		da		phx				phx
.8308		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.830a		64 01		stz $01				stz 	1 							; switch to I/O 0
.830c		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.830f		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8311		0d 80 06	ora $0680			ora 	KeyJoystick 				; use key joystick.
.8314		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8316		fa		plx				plx
.8317		60		rts				rts
.0681						KNLReadBuffer:
>0681								.fill   256
.0781						KNLDefaultDrive:
>0781								.byte 	?
.0782						KNLEvent
>0782						type        .byte   ?   ; Enum above
>0783						buf         .byte   ?   ; page id or zero
>0784						ext         .byte   ?   ; page id or zero
.0785						key
>0785						keyboard    .byte   ?   ; Keyboard ID
>0786						raw         .byte   ?   ; Raw key ID
>0787						ascii       .byte   ?   ; ASCII value
>0788						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0785						mouse
.0785						delta
>0785						x           .byte   ?
>0786						y           .byte   ?
>0787						z           .byte   ?
>0788						buttons     .byte   ?
.0785						clicks
>0785						inner       .byte   ?
>0786						middle      .byte   ?
>0787						outer       .byte   ?
.0785						joystick
>0785						joy0        .byte   ?
>0786						joy1        .byte   ?
.0785						udp
>0785						token       .byte   ?   ; TODO: break out into fields
.0785						file
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						data
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						read        .byte   ?   ; Number of bytes actually read
.0787						wrote
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						wrote       .byte   ?   ; Number of bytes actually read
.0785						directory
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						volume
>0787						len         .byte   ?   ; Length of volname (in buf)
>0788						flags       .byte   ?   ; block size, text encoding
.0787						file
>0787						len         .byte   ?
>0788						flags       .byte   ?   ; block scale, text encoding, approx size
.0787						free
>0787						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8318						AssembleGroup1:
.8318		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.831a		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.831d		80 02		bra $8321			bra 	AsmGroup12
.831f						AssembleGroup2:
.831f		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8321						AsmGroup12:
.8321		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8324		68		pla				pla 								; pop the return address to access the information following.
.8325		fa		plx				plx
.8326		20 ad 83	jsr $83ad			jsr 	AccessParameters 			; get opcode and save as base
.8329		8d 20 04	sta $0420			sta 	BaseOpcode
.832c		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.832f		d0 08		bne $8339			bne 	_AG12HaveMask
.8331		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8333		20 b5 83	jsr $83b5			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8336		8d 21 04	sta $0421			sta 	ModeMask
.8339						_AG12HaveMask:
.8339		20 e9 84	jsr $84e9			jsr 	TypeAndCalculateOperand 	; get zero page type
.833c		da		phx				phx 								; save found address mode
.833d		20 19 84	jsr $8419			jsr 	AssembleModeX
.8340		fa		plx				plx  								; restore address mode
.8341		b0 0b		bcs $834e			bcs 	_AG12Exit
.8343		20 4f 83	jsr $834f			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8346		20 19 84	jsr $8419			jsr 	AssembleModeX
.8349		b0 03		bcs $834e			bcs 	_AG12Exit
.834b		4c d1 a9	jmp $a9d1			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.834e						_AG12Exit:
.834e		60		rts				rts
.834f						PromoteToAbsolute:
.834f		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8351		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8353		f0 19		beq $836e			beq 	_PTADo
.8355		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8357		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8359		f0 13		beq $836e			beq 	_PTADo
.835b		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.835d		e0 80		cpx #$80			cpx 	#AM_ZEROY
.835f		f0 0d		beq $836e			beq 	_PTADo
.8361		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8363		e0 d1		cpx #$d1			cpx 	#AM_IND
.8365		f0 07		beq $836e			beq 	_PTADo
.8367		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8369		e0 c0		cpx #$c0			cpx 	#AM_INDX
.836b		f0 01		beq $836e			beq 	_PTADo
.836d		60		rts				rts
.836e						_PTADo:
.836e		aa		tax				tax
.836f		60		rts				rts
.8370						AssembleGroup3:
.8370		68		pla				pla 								; get parameters, which is just the opcode.
.8371		fa		plx				plx
.8372		20 ad 83	jsr $83ad			jsr 	AccessParameters 			; get and output opcode
.8375		20 c5 83	jsr $83c5			jsr 	AssemblerWriteByte
.8378		20 4d 85	jsr $854d			jsr 	CalculateOperand 			; get a 16 bit operand
.837b		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.837d		38		sec				sec
.837e		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8381		48		pha				pha 								; LSB in A
.8382		a5 60		lda $60				lda 	NSMantissa1
.8384		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.8387		aa		tax				tax 								; MSB in X
.8388		68		pla				pla
.8389		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.838a		69 7f		adc #$7f			adc 	#$7F
.838c		90 01		bcc $838f			bcc 	_AG3NoCarry
.838e		e8		inx				inx
.838f						_AG3NoCarry:
.838f		38		sec				sec 								; fix back and write out anyways.
.8390		e9 80		sbc #$80			sbc 	#$80
.8392		20 c5 83	jsr $83c5			jsr 	AssemblerWriteByte
.8395		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8397		f0 0a		beq $83a3			beq 	_AG3Exit
.8399		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.839c		29 01		and #$01			and 	#1
.839e		f0 03		beq $83a3			beq 	_AG3Exit
.83a0		4c d6 a9	jmp $a9d6			jmp 	RangeError 					; no, branch is out of range
.83a3						_AG3Exit:
.83a3		60		rts				rts
.83a4						AssembleGroup4:
.83a4		68		pla				pla 								; pop address
.83a5		fa		plx				plx
.83a6		20 ad 83	jsr $83ad			jsr 	AccessParameters 			; access and get first
.83a9		20 c5 83	jsr $83c5			jsr 	AssemblerWriteByte 			; output it.
.83ac		60		rts				rts
.83ad						AccessParameters:
.83ad		8d 1d 04	sta $041d			sta 	ParamStart
.83b0		8e 1e 04	stx $041e			stx 	ParamStart+1
.83b3		a9 01		lda #$01			lda 	#1
.83b5						GetParameter:
.83b5		5a		phy				phy
.83b6		a8		tay				tay
.83b7		ad 1d 04	lda $041d			lda 	ParamStart
.83ba		85 36		sta $36				sta 	zTemp0
.83bc		ad 1e 04	lda $041e			lda 	ParamStart+1
.83bf		85 37		sta $37				sta 	zTemp0+1
.83c1		b1 36		lda ($36),y			lda 	(zTemp0),y
.83c3		7a		ply				ply
.83c4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.83c5						AssemblerWriteByte:
.83c5		48		pha			pha
.83c6		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.83c9		29 02		and #$02		and 	#2
.83cb		f0 1b		beq $83e8		beq 	_AWBNoPrint
.83cd		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.83d0		20 03 84	jsr $8403		jsr 	PrintHex
.83d3		ad 1a 04	lda $041a		lda		AssemblerAddress
.83d6		20 03 84	jsr $8403		jsr 	PrintHex
.83d9		a9 20		lda #$20		lda 	#' '
.83db		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83de		68		pla			pla 									; print byte
.83df		48		pha			pha
.83e0		20 03 84	jsr $8403		jsr 	PrintHex
.83e3		a9 0d		lda #$0d		lda 	#13
.83e5		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83e8						_AWBNoPrint:
.83e8		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.83eb		85 36		sta $36			sta 	zTemp0
.83ed		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.83f0		f0 0e		beq $8400		beq 	_AWBRange
.83f2		85 37		sta $37			sta 	zTemp0+1
.83f4		68		pla			pla 									; write byte out
.83f5		92 36		sta ($36)		sta 	(zTemp0)
.83f7		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.83fa		d0 03		bne $83ff		bne 	_AWBNoCarry
.83fc		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.83ff						_AWBNoCarry:
.83ff		60		rts			rts
.8400						_AWBRange:
.8400		4c d6 a9	jmp $a9d6		jmp 	RangeError
.8403						PrintHex:
.8403		48		pha				pha
.8404		4a		lsr a				lsr 	a
.8405		4a		lsr a				lsr 	a
.8406		4a		lsr a				lsr 	a
.8407		4a		lsr a				lsr 	a
.8408		20 0c 84	jsr $840c			jsr 	_PrintNibble
.840b		68		pla				pla
.840c						_PrintNibble:
.840c		29 0f		and #$0f			and 	#15
.840e		c9 0a		cmp #$0a			cmp 	#10
.8410		90 02		bcc $8414			bcc 	_NoShift
.8412		69 06		adc #$06			adc 	#6
.8414						_NoShift:
.8414		69 30		adc #$30			adc 	#48
.8416		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8419						AssembleModeX:
.8419		5a		phy				phy
.841a		ad 1f 04	lda $041f			lda 	IsGroup1
.841d		f0 17		beq $8436			beq 	_AMXGroup2
.841f		8a		txa				txa 							; is it in group # 1
.8420		29 40		and #$40			and 	#AM_ISG1
.8422		f0 4d		beq $8471			beq 	_AMXFail 				; no, give up.
.8424		8a		txa				txa 							; get back.
.8425		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8427		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8429		d0 22		bne $844d			bne 	_AMXHaveInfo
.842b		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.842e		c9 81		cmp #$81			cmp 	#$81
.8430		f0 3f		beq $8471			beq 	_AMXFail
.8432		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8434		80 17		bra $844d			bra 	_AMXHaveInfo 			; odd design decision there.
.8436						_AMXGroup2:
.8436		8a		txa				txa 							; is it in group 2 ?
.8437		29 20		and #$20			and 	#AM_ISG2
.8439		f0 36		beq $8471			beq 	_AMXFail 				; no, give up.
.843b		8a		txa				txa 							; get the offset into Y
.843c		29 1f		and #$1f			and 	#$1F
.843e		4a		lsr a				lsr 	a 						; make it 0-7.
.843f		4a		lsr a				lsr  	a
.8440		a8		tay				tay
.8441		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8444						_AMXCheckOkay:
.8444		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8445		88		dey				dey
.8446		10 fc		bpl $8444			bpl 	_AMXCheckOkay
.8448		90 27		bcc $8471			bcc 	_AMXFail 				; not allowed.
.844a		8a		txa				txa  							; get mask back
.844b		29 1f		and #$1f			and 	#$1F
.844d						_AMXHaveInfo:
.844d		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.844f		10 04		bpl $8455			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8451		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8453		d0 1c		bne $8471			bne 	_AMXFail
.8455						_AMXAnySize:
.8455		18		clc				clc 							; add offset to the base opcode
.8456		6d 20 04	adc $0420			adc 	BaseOpcode
.8459						_AMXOutputCode:
.8459		20 c5 83	jsr $83c5			jsr 	AssemblerWriteByte 		; write the opcode out.
.845c		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.845e		f0 0e		beq $846e			beq 	_AMXExit
.8460		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8462		20 c5 83	jsr $83c5			jsr 	AssemblerWriteByte
.8465		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8467		30 05		bmi $846e			bmi 	_AMXExit
.8469		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.846b		20 c5 83	jsr $83c5			jsr 	AssemblerWriteByte
.846e						_AMXExit:
.846e		7a		ply				ply
.846f		38		sec				sec
.8470		60		rts				rts
.8471						_AMXFail:
.8471		a0 00		ldy #$00			ldy 	#0
.8473						_AMXCheckOddities:
.8473		8a		txa				txa
.8474		d9 9b 84	cmp $849b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8477		d0 15		bne $848e			bne 	_AMXCONext
.8479		b9 99 84	lda $8499,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.847c		cd 20 04	cmp $0420			cmp 	BaseOpcode
.847f		d0 0d		bne $848e			bne 	_AMXCONext
.8481		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8483		10 04		bpl $8489			bpl 	_AMXCONotZero
.8485		a5 60		lda $60				lda 	NSMantissa1
.8487		d0 05		bne $848e			bne 	_AMXCONext
.8489						_AMXCONotZero:
.8489		b9 9a 84	lda $849a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.848c		80 cb		bra $8459			bra 	_AMXOutputCode 			; and assemble it
.848e						_AMXCONext:
.848e		c8		iny				iny
.848f		c8		iny				iny
.8490		c8		iny				iny
.8491		b9 99 84	lda $8499,y			lda 	ExtraOpcode+0,y 		; end of table
.8494		d0 dd		bne $8473			bne 	_AMXCheckOddities
.8496						_AMXCOFail:
.8496		7a		ply				ply
.8497		18		clc				clc
.8498		60		rts				rts
.8499						ExtraOpcode:
>8499		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>849c		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>849f		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>84a2		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>84a5		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>84a8		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>84ab		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>84ae		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>84b1		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>84b4		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>84b7		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.84b8						LabelHere:
.84b8		c8		iny				iny 								; skip .
.84b9		a2 00		ldx #$00			ldx 	#0 							; get a term
.84bb		20 20 a1	jsr $a120			jsr 	EvaluateTerm
.84be		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.84c0		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.84c2		d0 22		bne $84e6			bne 	_ALType 					; otherwise typing error
.84c4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.84c6		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.84c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.84ca		85 37		sta $37				sta 	zTemp0+1
.84cc		5a		phy				phy 								; copy address in (64k)
.84cd		a0 01		ldy #$01			ldy 	#1
.84cf		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.84d2		92 36		sta ($36)			sta 	(zTemp0)
.84d4		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.84d7		91 36		sta ($36),y			sta 	(zTemp0),y
.84d9		c8		iny				iny
.84da		a9 00		lda #$00			lda 	#0 							; zero the rest.
.84dc		91 36		sta ($36),y			sta 	(zTemp0),y
.84de		c8		iny				iny
.84df		91 36		sta ($36),y			sta 	(zTemp0),y
.84e1		c8		iny				iny
.84e2		91 36		sta ($36),y			sta 	(zTemp0),y
.84e4		7a		ply				ply
.84e5		60		rts				rts
.84e6						_ALType:
.84e6		4c db a9	jmp $a9db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.84e9						TypeAndCalculateOperand:
.84e9		b1 30		lda ($30),y			lda 	(codePtr),y
.84eb		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.84ed		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.84ef		f0 5b		beq $854c			beq 	_TACOExit
.84f1		c9 80		cmp #$80			cmp 	#KWC_EOL
.84f3		f0 57		beq $854c			beq 	_TACOExit
.84f5		c8		iny				iny
.84f6		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.84f8		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.84fa		f0 51		beq $854d			beq 	CalculateOperand
.84fc		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.84fe		f0 1f		beq $851f			beq 	_TACOIndirect
.8500		88		dey				dey 								; undo get of first character
.8501		20 4d 85	jsr $854d			jsr 	CalculateOperand 			; get operand
.8504		b1 30		lda ($30),y			lda 	(codePtr),y
.8506		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8508		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.850a		d0 40		bne $854c			bne 	_TACOExit
.850c		c8		iny				iny
.850d		20 57 85	jsr $8557			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8510		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8512		c9 58		cmp #$58			cmp 	#'X'
.8514		f0 36		beq $854c			beq 	_TACOExit
.8516		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8518		c9 59		cmp #$59			cmp 	#'Y'
.851a		f0 30		beq $854c			beq 	_TACOExit
.851c						_TACOSyntax:
.851c		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.851f						_TACOIndirect:
.851f		20 4d 85	jsr $854d			jsr 	CalculateOperand 			; get the operand
.8522		b1 30		lda ($30),y			lda 	(codePtr),y
.8524		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8526		f0 17		beq $853f			beq 	_TACOIndX
.8528		20 b9 97	jsr $97b9			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.852b		b1 30		lda ($30),y			lda 	(codePtr),y
.852d		a2 d1		ldx #$d1			ldx 	#AM_IND
.852f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8531		d0 19		bne $854c			bne 	_TACOExit
.8533		c8		iny				iny
.8534		20 57 85	jsr $8557			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8537		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8539		d0 e1		bne $851c			bne 	_TACOSyntax
.853b		a2 d0		ldx #$d0			ldx 	#AM_INDY
.853d		80 0d		bra $854c			bra 	_TACOExit
.853f						_TACOIndX:
.853f		c8		iny				iny
.8540		20 57 85	jsr $8557			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8543		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8545		d0 d5		bne $851c			bne 	_TACOSyntax
.8547		20 b9 97	jsr $97b9			jsr 	CheckRightBracket			; check )
.854a		a2 c0		ldx #$c0			ldx 	#AM_INDX
.854c						_TACOExit:
.854c		60		rts				rts
.854d						CalculateOperand:
.854d		48		pha				pha
.854e		da		phx				phx
.854f		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8551		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.8554		fa		plx				plx
.8555		68		pla				pla
.8556		60		rts				rts
.8557						TACOCheckXY:
.8557		b1 30		lda ($30),y			lda 	(codePtr),y
.8559		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.855b		c9 40		cmp #$40			cmp 	#$40
.855d		d0 21		bne $8580			bne 	_TCXYFail
.855f		b1 30		lda ($30),y			lda 	(codePtr),y
.8561		18		clc				clc
.8562		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8564		85 37		sta $37				sta 	zTemp0+1
.8566		c8		iny				iny
.8567		b1 30		lda ($30),y			lda 	(codePtr),y
.8569		c8		iny				iny
.856a		85 36		sta $36				sta 	zTemp0
.856c		5a		phy				phy 								; save position
.856d		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.856f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8571		d0 0c		bne $857f			bne 	_TCXYPopFail
.8573		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8575		b1 36		lda ($36),y			lda 	(zTemp0),y
.8577		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8579		f0 08		beq $8583			beq 	_TCXYFound
.857b		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.857d		f0 04		beq $8583			beq 	_TCXYFound
.857f						_TCXYPopFail:
.857f		7a		ply				ply
.8580						_TCXYFail:
.8580		a9 00		lda #$00			lda 	#0
.8582		60		rts				rts
.8583						_TCXYFound:
.8583		7a		ply				ply 								; restore position
.8584		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8586		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8587						BackloadProgram:
.8587		20 fd 91	jsr $91fd			jsr 	NewProgram 					; does the actual NEW.
.858a		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.858c		a9 de		lda #$de			lda 	#_BLLoad & $FF
.858e		20 2b 98	jsr $982b			jsr 	PrintStringXA
.8591		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8593		8d 89 07	sta $0789			sta 	BackLoadPage
.8596		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8598		8d 8a 07	sta $078a			sta 	0+BackLoadPointer
.859b		a9 60		lda #$60			lda 	#(($6000) >> 8)
.859d		8d 8b 07	sta $078b			sta 	1+BackLoadPointer
.85a0		a9 ff		lda #$ff			lda 	#$FF
.85a2		8d fa ff	sta $fffa			sta 	$FFFA
.85a5						_BPLoop:
.85a5		a2 ff		ldx #$ff			ldx 	#$FF
.85a7		20 f3 85	jsr $85f3			jsr 	BLReadByte 					; read a byte
.85aa		c9 00		cmp #$00			cmp 	#0
.85ac		f0 29		beq $85d7			beq 	_BPExit 					; if 0 exit
.85ae		30 27		bmi $85d7			bmi 	_BPExit 					; if -ve exit
.85b0						_BPCopy:
.85b0		e8		inx				inx  								; copy byte into the lineBuffer
.85b1		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.85b4		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.85b7		20 f3 85	jsr $85f3			jsr 	BLReadByte 					; read next byte
.85ba		30 0a		bmi $85c6			bmi 	_BPEndLine 					; -ve = EOL
.85bc		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.85be		d0 02		bne $85c2			bne 	_BPNotTab
.85c0		a9 20		lda #$20			lda 	#' '
.85c2						_BPNotTab:
.85c2		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.85c4		b0 ea		bcs $85b0			bcs 	_BPCopy 					; until a control character, should be 13 received.
.85c6						_BPEndLine:
.85c6		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.85c9		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.85cc		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85cf		f0 d4		beq $85a5			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.85d1		ea		nop				nop
.85d2		20 21 86	jsr $8621			jsr 	EditProgramCode
.85d5		80 ce		bra $85a5			bra 	_BPLoop
.85d7						_BPExit:
.85d7		9c fa ff	stz $fffa			stz 	$FFFA
.85da		20 df 86	jsr $86df			jsr 	ClearCommand 				; clear variables etc.
.85dd		60		rts				rts
.85de						_BLLoad:
>85de		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>85e6		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.85f3						BLReadByte:
.85f3		da		phx				phx
.85f4		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.85f6		ad 89 07	lda $0789			lda 	BackLoadPage	 			; set current page
.85f9		85 0b		sta $0b				sta 	8+3
.85fb		ad 8a 07	lda $078a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.85fe		85 36		sta $36				sta 	zTemp0
.8600		ad 8b 07	lda $078b			lda 	BackLoadPointer+1
.8603		85 37		sta $37				sta 	zTemp0+1
.8605		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8607		ee 8a 07	inc $078a			inc 	BackLoadPointer 			; bump pointer
.860a		d0 0f		bne $861b			bne 	_BLNoCarry
.860c		ee 8b 07	inc $078b			inc 	BackLoadPointer+1
.860f		10 0a		bpl $861b			bpl 	_BLNoCarry 					; need a new page
.8611		48		pha				pha
.8612		a9 60		lda #$60			lda 	#$60 						; reset pointer
.8614		8d 8b 07	sta $078b			sta 	BackLoadPointer+1
.8617		ee 89 07	inc $0789			inc 	BackLoadPage 				; next page from source.
.861a		68		pla				pla
.861b						_BLNoCarry:
.861b		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.861d		fa		plx				plx
.861e		c9 00		cmp #$00			cmp 	#0
.8620		60		rts				rts
.0789						BackLoadPage:
>0789								.fill  	1
.078a						BackLoadPointer:
>078a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8621						EditProgramCode:
.8621		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.8624		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.8627		20 69 ac	jsr $ac69			jsr 	MemorySearch
.862a		90 05		bcc $8631			bcc 	_EPCNoDelete 				; reached the end : don't delete
.862c		d0 03		bne $8631			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.862e		20 8e ab	jsr $ab8e			jsr 	MemoryDeleteLine 			; delete the line
.8631						_EPCNoDelete:
.8631		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8634		c9 80		cmp #$80			cmp 	#KWC_EOL
.8636		f0 0d		beq $8645			beq 	_EPCNoInsert
.8638		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.863b		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.863e		20 69 ac	jsr $ac69			jsr 	MemorySearch
.8641		18		clc				clc 								; insert at this point.
.8642		20 c5 ab	jsr $abc5			jsr 	MemoryInsertLine 			; insert the line
.8645						_EPCNoInsert:
.8645		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8646						WarmStart:
.8646		a2 ff		ldx #$ff			ldx 	#$FF
.8648		9a		txs				txs
.8649		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.864b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.864e		20 9c 81	jsr $819c			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8651		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.8654		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.8657		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.865a		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.865d		d0 17		bne $8676			bne 	_WSEditCode 				; if so,edit code.
.865f		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8662		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.8664		85 30		sta $30				sta 	codePtr
.8666		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8668		85 31		sta $31				sta 	codePtr+1
.866a		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.866d		c9 80		cmp #$80			cmp 	#KWC_EOL
.866f		f0 d5		beq $8646			beq 	WarmStart
.8671		20 9a 93	jsr $939a			jsr 	RUNCodePointerLine 			; execute that line.
.8674		80 d0		bra $8646			bra 	WarmStart
.8676						_WSEditCode:
.8676		20 21 86	jsr $8621			jsr 	EditProgramCode 			; edit the program code
.8679		20 df 86	jsr $86df			jsr 	ClearCommand 				; clear all variables etc.
.867c		80 c8		bra $8646			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.867e						AssembleCommand:
.867e		a2 00		ldx #$00			ldx 	#0
.8680		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger 		; start address
.8683		a5 58		lda $58				lda 	NSMantissa0
.8685		8d 1a 04	sta $041a			sta 	AssemblerAddress
.8688		a5 60		lda $60				lda 	NSMantissa1
.868a		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.868d		20 c1 97	jsr $97c1			jsr 	CheckComma
.8690		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; options 0-3
.8693		a5 58		lda $58				lda 	NSMantissa0
.8695		8d 1c 04	sta $041c			sta 	AssemblerControl
.8698		60		rts				rts
.8699		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.869a						AssertCommand:
.869a		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.869c		20 99 a6	jsr $a699			jsr 	EvaluateInteger 			; the assert test
.869f		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; exit if result is non zero.
.86a2		d0 05		bne $86a9			bne 	_ACExit
.86a4		a9 0a		lda #$0a		lda	#10
.86a6		4c d2 97	jmp $97d2		jmp	ErrorHandler
.86a9						_ACExit:
.86a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.86aa						CallCommand:
.86aa		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.86ac		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.86af						_CCClear
.86af		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.86b0		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; these are optional sequentially.
.86b3		e0 04		cpx #$04			cpx 	#4
.86b5		d0 f8		bne $86af			bne 	_CCClear
.86b7		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.86b9						_CCCParam:
.86b9		b1 30		lda ($30),y			lda 	(codePtr),y
.86bb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86bd		d0 09		bne $86c8			bne 	_CCCRun6502
.86bf		c8		iny				iny 								; skip comma
.86c0		e8		inx				inx	 								; next level
.86c1		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get A/X/Y
.86c4		e0 03		cpx #$03			cpx 	#3
.86c6		90 f1		bcc $86b9			bcc 	_CCCParam 					; done all 3 ?
.86c8						_CCCRun6502:
.86c8		5a		phy				phy 								; save position
.86c9		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.86cb		85 37		sta $37				sta 	zTemp0+1
.86cd		a5 58		lda $58				lda 	NSMantissa0
.86cf		85 36		sta $36				sta 	zTemp0
.86d1		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.86d3		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.86d5		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.86d7		20 dc 86	jsr $86dc			jsr 	_CCCZTemp0 					; call zTemp0
.86da		7a		ply				ply 								; restore position and exit
.86db		60		rts				rts
.86dc						_CCCZTemp0:
.86dc		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.86df						ClearCommand:
.86df		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.86e1		85 36		sta $36				sta 	0+zTemp0
.86e3		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.86e5		85 37		sta $37				sta 	1+zTemp0
.86e7						_ClearZeroLoop:
.86e7		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.86e9		f0 24		beq $870f			beq 	_ClearZeroEnd
.86eb		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.86ed		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.86ef						_ClearOneVariable:
.86ef		91 36		sta ($36),y			sta 	(zTemp0),y
.86f1		c8		iny				iny
.86f2		c0 08		cpy #$08			cpy 	#8
.86f4		d0 f9		bne $86ef			bne 	_ClearOneVariable
.86f6		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.86f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.86fa		c9 18		cmp #$18			cmp 	#NSTProcedure
.86fc		d0 04		bne $8702			bne 	_ClearNotProcedure
.86fe		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8700		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8702						_ClearNotProcedure:
.8702		18		clc				clc 								; go to the next variable
.8703		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8705		65 36		adc $36				adc 	zTemp0
.8707		85 36		sta $36				sta 	zTemp0
.8709		90 dc		bcc $86e7			bcc 	_ClearZeroLoop
.870b		e6 37		inc $37				inc 	zTemp0+1
.870d		80 d8		bra $86e7			bra 	_ClearZeroLoop
.870f						_ClearZeroEnd:
.870f		18		clc				clc
.8710		a5 36		lda $36				lda 	zTemp0
.8712		69 01		adc #$01			adc 	#1
.8714		8d 08 04	sta $0408			sta 	lowMemPtr
.8717		a5 37		lda $37				lda 	zTemp0+1
.8719		69 00		adc #$00			adc 	#0
.871b		8d 09 04	sta $0409			sta 	lowMemPtr+1
.871e		20 b1 b0	jsr $b0b1			jsr 	StackReset
.8721		20 17 b1	jsr $b117			jsr 	StringSystemInitialise
.8724		20 c2 96	jsr $96c2			jsr 	ProcedureScan
.8727		20 3c 93	jsr $933c			jsr 	Command_Restore
.872a		9c 1a 04	stz $041a			stz 	AssemblerAddress
.872d		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.8730		9c 1c 04	stz $041c			stz 	AssemblerControl
.8733		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.8736		20 0c a3	jsr $a30c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8739		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.873a						XLoadCommand:
.873a		20 fd 91	jsr $91fd			jsr 	NewProgram
.873d		20 87 85	jsr $8587			jsr 	BackloadProgram
.8740		4c 46 86	jmp $8646			jmp 	WarmStart
.8743						XGoCommand:
.8743		20 fd 91	jsr $91fd			jsr 	NewProgram
.8746		20 87 85	jsr $8587			jsr 	BackloadProgram
.8749		4c 88 93	jmp $9388			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.874c						Command_Data:
.874c		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.874e		a2 80		ldx #$80			ldx 	#KWC_EOL
.8750		20 14 97	jsr $9714			jsr 	ScanForward
.8753		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8754						DimCommand:
.8754		b1 30		lda ($30),y			lda 	(codePtr),y
.8756		29 c0		and #$c0			and 	#$C0
.8758		c9 40		cmp #$40			cmp 	#$40
.875a		d0 7a		bne $87d6			bne 	_DCSyntax 				; n o, error.
.875c		b1 30		lda ($30),y			lda 	(codePtr),y
.875e		18		clc				clc
.875f		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8761		85 3f		sta $3f				sta 	zaTemp+1
.8763		c8		iny				iny
.8764		b1 30		lda ($30),y			lda 	(codePtr),y
.8766		c8		iny				iny
.8767		85 3e		sta $3e				sta 	zaTemp
.8769		5a		phy				phy
.876a		a0 02		ldy #$02			ldy 	#2 						; read type byte
.876c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.876e		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8770		c9 18		cmp #$18			cmp 	#NSTProcedure
.8772		f0 62		beq $87d6			beq 	_DCSyntax
.8774		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8776		29 04		and #$04			and 	#NSBIsArray
.8778		f0 64		beq $87de			beq 	_DCType
.877a		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.877c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.877e		d0 59		bne $87d9			bne 	_DCRedefine
.8780		7a		ply				ply
.8781		20 e1 87	jsr $87e1			jsr 	_DCGetSize 				; get array size, check it.
.8784		5a		phy				phy
.8785		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8787		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8789		7a		ply				ply 							; is there a second (e.g. ,x)
.878a		b1 30		lda ($30),y			lda 	(codePtr),y
.878c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.878e		d0 0a		bne $879a			bne 	_DCOneDimension
.8790		c8		iny				iny 							; skip comma
.8791		20 e1 87	jsr $87e1			jsr 	_DCGetSize 				; get 2nd array size
.8794		5a		phy				phy
.8795		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8797		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8799		7a		ply				ply
.879a						_DCOneDimension:
.879a		5a		phy				phy 							; save position
.879b		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.879d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.879f		aa		tax				tax
.87a0		c8		iny				iny
.87a1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87a3		e8		inx				inx 							; bump them.
.87a4		1a		inc a				inc 	a
.87a5		20 d7 a6	jsr $a6d7			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.87a8		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.87aa		29 e0		and #$e0			and 	#$E0
.87ac		d0 23		bne $87d1			bne 	_DCSize
.87ae		a0 02		ldy #$02			ldy 	#2 						; get base type
.87b0		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87b2		20 ef 87	jsr $87ef			jsr 	ScaleByBaseType 		; scale by base type
.87b5		a5 36		lda $36				lda 	zTemp0
.87b7		a6 37		ldx $37				ldx 	zTemp0+1
.87b9		20 ce a2	jsr $a2ce			jsr 	AllocateXABytes 		; allocate memory
.87bc		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.87be		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87c0		c8		iny				iny
.87c1		8a		txa				txa
.87c2		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87c4		7a		ply				ply 							; get position back
.87c5		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 		; check )
.87c8		b1 30		lda ($30),y			lda 	(codePtr),y
.87ca		c8		iny				iny 							; consume in case
.87cb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.87cd		f0 85		beq $8754			beq 	DimCommand
.87cf		88		dey				dey 							; undo consume
.87d0		60		rts				rts
.87d1						_DCSize:
.87d1		a9 16		lda #$16		lda	#22
.87d3		4c d2 97	jmp $97d2		jmp	ErrorHandler
.87d6						_DCSyntax:
.87d6		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.87d9						_DCRedefine:
.87d9		a9 15		lda #$15		lda	#21
.87db		4c d2 97	jmp $97d2		jmp	ErrorHandler
.87de						_DCType:
.87de		4c db a9	jmp $a9db			jmp 	TypeError
.87e1						_DCGetSize:
.87e1		a2 00		ldx #$00			ldx 	#0 						; get first index.
.87e3		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 	; get array dimension
.87e6		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.87e8		f0 e7		beq $87d1			beq 	_DCSize
.87ea		c9 fe		cmp #$fe			cmp 	#254
.87ec		f0 e3		beq $87d1			beq 	_DCSize
.87ee		60		rts				rts
.87ef						ScaleByBaseType:
.87ef		29 10		and #$10			and 	#NSBIsString 			; is it string
.87f1		d0 19		bne $880c			bne 	_SBBTString
.87f3		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.87f5		48		pha				pha
.87f6		a5 36		lda $36				lda 	zTemp0
.87f8		48		pha				pha
.87f9		06 36		asl $36				asl 	zTemp0 					; x 2
.87fb		26 37		rol $37				rol 	zTemp0+1
.87fd		06 36		asl $36				asl 	zTemp0 					; x 4
.87ff		26 37		rol $37				rol 	zTemp0+1
.8801		68		pla				pla 							; add stacked value = x 5
.8802		65 36		adc $36				adc 	zTemp0
.8804		85 36		sta $36				sta 	zTemp0
.8806		68		pla				pla
.8807		65 37		adc $37				adc 	zTemp0+1
.8809		85 37		sta $37				sta 	zTemp0+1
.880b		60		rts				rts
.880c						_SBBTString:
.880c		06 36		asl $36				asl 	zTemp0
.880e		26 37		rol $37				rol 	zTemp0+1
.8810		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.8811						BootDOS:
.8811		a9 1f		lda #$1f	            lda     #dosName & $FF
.8813		85 fb		sta $fb		            sta     kernel.args.buf+0
.8815		a9 88		lda #$88	            lda     #dosName >> 8
.8817		85 fc		sta $fc		            sta     kernel.args.buf+1
.8819		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.881c		4c 46 86	jmp $8646	            jmp 	WarmStart
>881f		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8823						EndCommand:
.8823		4c 46 86	jmp $8646			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.8826						UnaryEvent:
.8826		fa		plx				plx
.8827		20 ad 96	jsr $96ad			jsr 	TimerToStackX 				; timer in +0
.882a		e8		inx				inx  								; put reference into +1
.882b		20 20 a1	jsr $a120			jsr 	EvaluateTerm
.882e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.8830		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8832		d0 4c		bne $8880			bne 	_UEType
.8834		e8		inx				inx 								; put the step in +2
.8835		20 c1 97	jsr $97c1			jsr 	CheckComma
.8838		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.883b		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.883e		ca		dex				dex
.883f		ca		dex				dex
.8840		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8842		85 36		sta $36				sta 	zTemp0
.8844		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.8846		85 37		sta $37				sta 	zTemp0+1
.8848		5a		phy				phy
.8849		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.884b		b1 36		lda ($36),y			lda 	(zTemp0),y
.884d		30 2d		bmi $887c			bmi 	_UEFalse 					; exit if signed.
.884f		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8851		b5 58		lda $58,x			lda 	NSMantissa0,x
.8853		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8855		c8		iny				iny
.8856		b5 60		lda $60,x			lda 	NSMantissa1,x
.8858		f1 36		sbc ($36),y			sbc		(zTemp0),y
.885a		c8		iny				iny
.885b		b5 68		lda $68,x			lda 	NSMantissa2,x
.885d		f1 36		sbc ($36),y			sbc		(zTemp0),y
.885f		90 1b		bcc $887c			bcc 	_UEFalse 					; no, return FALSE.
.8861		18		clc				clc
.8862		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8864		b5 58		lda $58,x			lda 	NSMantissa0,x
.8866		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.8868		91 36		sta ($36),y			sta 	(zTemp0),y
.886a		c8		iny				iny
.886b		b5 60		lda $60,x			lda 	NSMantissa1,x
.886d		75 62		adc $62,x			adc 	NSMantissa1+2,x
.886f		91 36		sta ($36),y			sta 	(zTemp0),y
.8871		c8		iny				iny
.8872		b5 68		lda $68,x			lda 	NSMantissa2,x
.8874		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.8876		91 36		sta ($36),y			sta 	(zTemp0),y
.8878		7a		ply				ply
.8879		4c 3f 98	jmp $983f			jmp 	ReturnTrue
.887c						_UEFalse:
.887c		7a		ply				ply 								; restore Y
.887d		4c 4a 98	jmp $984a			jmp 	ReturnFalse 				; and return False
.8880						_UEType:
.8880		4c db a9	jmp $a9db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.8883						Command_BLoad:
.8883		a2 00		ldx #$00			ldx 	#0
.8885		20 84 a6	jsr $a684			jsr 	EvaluateString 				; file name to load
.8888		20 c1 97	jsr $97c1			jsr 	CheckComma 					; consume comma
.888b		e8		inx				inx
.888c		20 99 a6	jsr $a699			jsr 	EvaluateInteger 			; load address (full physical address)
.888f		5a		phy				phy
.8890		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8892		a6 60		ldx $60				ldx 	NSMantissa1
.8894		20 37 82	jsr $8237			jsr 	KNLOpenFileRead 			; open file for reading
.8897		b0 4e		bcs $88e7			bcs 	CBLErrorHandler 			; error, so fail.
.8899		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.889c		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.889e		20 ea 88	jsr $88ea			jsr 	BLOpenPhysicalMemory 		; open for access.
.88a1						_BLReadFile:
.88a1		ad 90 07	lda $0790			lda 	BasicFileStream
.88a4		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.88a6		20 8c 82	jsr $828c			jsr 	KNLReadBlock 				; read next block
.88a9		b0 22		bcs $88cd			bcs 	_BLFileError 				; file error, which might be EOF.
.88ab		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.88ad		f0 f2		beq $88a1			beq 	_BLReadFile
.88af		8d 8e 07	sta $078e			sta 	BLCopyCounter 				; counter.
.88b2		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; copy the buffer out here
.88b5		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.88b7						_BLCopyLoop:
.88b7		bd 81 06	lda $0681,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.88ba		91 3a		sta ($3a),y			sta 	(zTemp2),y
.88bc		c8		iny				iny
.88bd		d0 03		bne $88c2			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.88bf		20 12 89	jsr $8912			jsr 	BLAdvancePhysicalMemory
.88c2						_BLNoAdjust:
.88c2		e8		inx				inx
.88c3		ce 8e 07	dec $078e			dec 	BLCopyCounter
.88c6		d0 ef		bne $88b7			bne 	_BLCopyLoop
.88c8		8c 8d 07	sty $078d			sty 	BLYOffset 					; update Y offset
.88cb		80 d4		bra $88a1			bra 	_BLReadFile 				; go ask for more.
.88cd						_BLFileError:
.88cd		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.88cf		d0 16		bne $88e7			bne 	CBLErrorHandler				; no, it's an actual error
.88d1		20 0c 89	jsr $890c			jsr 	BLClosePhysicalMemory 		; close the access.
.88d4		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.88d7		20 01 83	jsr $8301			jsr 	KNLCloseFile
.88da		7a		ply				ply
.88db		60		rts				rts
.88dc						CBLCloseError:
.88dc		48		pha				pha
.88dd		20 0c 89	jsr $890c			jsr 	BLClosePhysicalMemory
.88e0		ad 90 07	lda $0790			lda 	BasicFileStream
.88e3		20 01 83	jsr $8301			jsr 	KNLCloseFile
.88e6		68		pla				pla
.88e7						CBLErrorHandler:
.88e7		4c d0 8a	jmp $8ad0			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.88ea						BLOpenPhysicalMemory:
.88ea		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.88ec		8d 8c 07	sta $078c			sta 	BLNormalMapping
.88ef		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.88f1		8d 8d 07	sta $078d			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.88f4		64 3a		stz $3a				stz 	zTemp2
.88f6		b5 60		lda $60,x			lda 	NSMantissa1,x
.88f8		29 1f		and #$1f			and 	#$1F
.88fa		09 60		ora #$60			ora 	#BLAccessPage << 5
.88fc		85 3b		sta $3b				sta 	zTemp2+1
.88fe		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8900		16 60		asl $60,x			asl 	NSMantissa1,x
.8902		2a		rol a				rol 	a
.8903		16 60		asl $60,x			asl 	NSMantissa1,x
.8905		2a		rol a				rol 	a
.8906		16 60		asl $60,x			asl 	NSMantissa1,x
.8908		2a		rol a				rol 	a
.8909		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.890b		60		rts				rts
.890c						BLClosePhysicalMemory:
.890c		ad 8c 07	lda $078c			lda 	BLNormalMapping
.890f		85 0b		sta $0b				sta 	BLAccessPage+8
.8911		60		rts				rts
.8912						BLAdvancePhysicalMemory:
.8912		48		pha				pha
.8913		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8915		a5 3b		lda $3b				lda 	zTemp2+1
.8917		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8919		d0 06		bne $8921			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.891b		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.891d		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.891f		85 3b		sta $3b				sta 	zTemp2+1
.8921						_BLAPMExit:
.8921		68		pla				pla
.8922		60		rts				rts
.078c						BLNormalMapping:
>078c								.fill 	1
.078d						BLYOffset:
>078d								.fill 	1
.078e						BLCopyCounter:
>078e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.8923						Command_BSave:
.8923		a2 00		ldx #$00			ldx 	#0
.8925		20 84 a6	jsr $a684			jsr 	EvaluateString 				; file name to load
.8928		20 c1 97	jsr $97c1			jsr 	CheckComma 					; consume comma
.892b		e8		inx				inx
.892c		20 99 a6	jsr $a699			jsr 	EvaluateInteger 			; load address (full physical address)
.892f		20 c1 97	jsr $97c1			jsr 	CheckComma 					; consume comma
.8932		e8		inx				inx
.8933		20 99 a6	jsr $a699			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8936		5a		phy				phy
.8937		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8939		a6 60		ldx $60				ldx 	NSMantissa1
.893b		20 32 82	jsr $8232			jsr 	KNLOpenFileWrite 			; open file for reading
.893e		b0 62		bcs $89a2			bcs 	CBSErrorHandler 			; error, so fail.
.8940		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8943		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8945		20 ea 88	jsr $88ea			jsr 	BLOpenPhysicalMemory 		; open for access.
.8948		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.894a		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; used for data offset.
.894d						_BSWriteToFileLoop:
.894d		38		sec				sec 								; pre decrement count.
.894e		a5 5a		lda $5a				lda 	NSMantissa0+2
.8950		e9 01		sbc #$01			sbc 	#1
.8952		85 5a		sta $5a				sta 	NSMantissa0+2
.8954		a5 62		lda $62				lda 	NSMantissa1+2
.8956		e9 00		sbc #$00			sbc 	#0
.8958		85 62		sta $62				sta 	NSMantissa1+2
.895a		a5 6a		lda $6a				lda 	NSMantissa2+2
.895c		e9 00		sbc #$00			sbc 	#0
.895e		85 6a		sta $6a				sta 	NSMantissa2+2
.8960		30 15		bmi $8977			bmi 	_BSFileComplete 			; undercounted, so exit.
.8962		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.8964		9d 81 06	sta $0681,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.8967		e8		inx				inx
.8968		c8		iny				iny 								; next byte
.8969		d0 03		bne $896e			bne 	_BSNoCheck
.896b		20 12 89	jsr $8912			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.896e						_BSNoCheck:
.896e		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.8970		d0 db		bne $894d			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.8972		20 85 89	jsr $8985			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8975		80 d6		bra $894d			bra 	_BSWriteToFileLoop 			; and keep on going
.8977						_BSFileComplete:
.8977		20 85 89	jsr $8985			jsr 	BSFlushBuffer 				; write the buffer remainder.
.897a		20 0c 89	jsr $890c			jsr 	BLClosePhysicalMemory 		; close the access.
.897d		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.8980		20 01 83	jsr $8301			jsr 	KNLCloseFile
.8983		7a		ply				ply
.8984		60		rts				rts
.8985						BSFlushBuffer:
.8985		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8987		f0 0d		beq $8996			beq 	_BSFBExit 					; if so, exit.
.8989		a9 81		lda #$81			lda 	#KNLReadBuffer & $FF 		; where to write from.
.898b		85 36		sta $36				sta 	zTemp0
.898d		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.898f		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8991		20 8c 8b	jsr $8b8c			jsr 	CLWriteByteBlock 			; write it.
.8994		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8996						_BSFBExit:
.8996		60		rts				rts
.8997						CBSSCloseError:
.8997		48		pha				pha
.8998		20 0c 89	jsr $890c			jsr 	BLClosePhysicalMemory
.899b		ad 90 07	lda $0790			lda 	BasicFileStream
.899e		20 01 83	jsr $8301			jsr 	KNLCloseFile
.89a1		68		pla				pla
.89a2						CBSErrorHandler:
.89a2		4c d0 8a	jmp $8ad0			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.89a5						Command_Dir:
.89a5		ad 81 07	lda $0781			lda     KNLDefaultDrive				; set drive to list.
.89a8		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.89aa		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.89ac		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.89af		b0 4f		bcs $8a00			bcs     _CDExit
.89b1						_CDEventLoop:
.89b1		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.89b4		20 a5 81	jsr $81a5			jsr     GetNextEvent
.89b7		b0 f8		bcs $89b1			bcs     _CDEventLoop
.89b9		ad 82 07	lda $0782			lda     KNLEvent.type
.89bc		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.89be		f0 40		beq $8a00			beq    	_CDExit
.89c0		20 c5 89	jsr $89c5			jsr     _CDMessages 				; handle various messages
.89c3		80 ec		bra $89b1			bra     _CDEventLoop
.89c5						_CDMessages:
.89c5		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.89c7		f0 15		beq $89de			beq     _CDEVRead
.89c9		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.89cb		f0 19		beq $89e6			beq     _CDEVVolume
.89cd		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.89cf		f0 32		beq $8a03			beq     _CDEVFile
.89d1		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.89d3		f0 70		beq $8a45			beq     _CDEVFree
.89d5		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.89d7		f0 6e		beq $8a47			beq     _CDEVEOF
.89d9		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.89db		f0 6a		beq $8a47			beq     _CDEVEOF
.89dd		60		rts				rts
.89de						_CDEVRead:
.89de		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.89e1		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.89e3		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.89e6						_CDEVVolume:
.89e6		a9 5b		lda #$5b			lda 	#"["
.89e8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89eb		ad 87 07	lda $0787			lda     KNLEvent.directory.volume.len
.89ee		20 4f 8a	jsr $8a4f			jsr     _CDReadData
.89f1		20 2b 98	jsr $982b			jsr 	PrintStringXA
.89f4		a9 5d		lda #$5d			lda 	#"]"
.89f6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89f9		a9 0d		lda #$0d			lda 	#13
.89fb		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89fe		80 de		bra $89de			bra     _CDEVRead
.8a00						_CDExit:
.8a00		4c 46 86	jmp $8646			jmp 	WarmStart
.8a03						_CDEVFile:
.8a03		a9 20		lda #$20			lda 	#32
.8a05		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a08		ad 87 07	lda $0787			lda     KNLEvent.directory.file.len
.8a0b		48		pha				pha
.8a0c		20 4f 8a	jsr $8a4f			jsr     _CDReadData
.8a0f		20 2b 98	jsr $982b			jsr 	PrintStringXA
.8a12		68		pla				pla
.8a13		49 ff		eor #$ff			eor 	#$FF
.8a15		38		sec				sec
.8a16		69 10		adc #$10			adc 	#16
.8a18		aa		tax				tax
.8a19						_CDEVTab:
.8a19		a9 20		lda #$20			lda 	#32
.8a1b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a1e		ca		dex				dex
.8a1f		10 f8		bpl $8a19			bpl 	_CDEVTab
.8a21		20 66 8a	jsr $8a66			jsr 	_CDReadExtended
.8a24		ad 26 05	lda $0526			lda 	lineBuffer
.8a27		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8a2a		20 41 9c	jsr $9c41			jsr 	ConvertInt16
.8a2d		20 2b 98	jsr $982b			jsr 	PrintStringXA
.8a30		a2 8a		ldx #$8a			ldx 	#_CDEVFMessage >> 8
.8a32		a9 39		lda #$39			lda 	#_CDEVFMessage & $FF
.8a34		20 2b 98	jsr $982b			jsr 	PrintStringXA
.8a37		80 a5		bra $89de			bra     _CDEVRead
.8a39						_CDEVFMessage:
>8a39		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8a41		29 2e 0d 00
.8a45						_CDEVFree:
.8a45		80 00		bra $8a47			bra     _CDEVEOF
.8a47						_CDEVEOF:
.8a47		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.8a4a		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8a4c		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8a4f						_CDReadData:
.8a4f		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a51		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a53		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a55		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a57		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a59		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8a5c		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8a5e		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8a61		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8a63		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8a65		60		rts				rts
.8a66						_CDReadExtended:
.8a66		a9 02		lda #$02			lda     #2
.8a68		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a6a		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a6c		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a6e		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a70		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a72		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8a75						Command_Drive:
.8a75		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.8a78		20 2e 82	jsr $822e			jsr 	KNLSetDrive
.8a7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8a7c						Command_Load:
.8a7c		20 82 8a	jsr $8a82			jsr 	LoadFile
.8a7f		4c 46 86	jmp $8646			jmp 	WarmStart
.8a82						LoadFile:
.8a82		20 84 a6	jsr $a684			jsr 	EvaluateString 				; file name to load
.8a85		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a87		a5 36		lda $36				lda 	zTemp0
.8a89		20 37 82	jsr $8237			jsr 	KNLOpenFileRead 			; open file for reading
.8a8c		b0 42		bcs $8ad0			bcs 	CLErrorHandler 				; error, so fail.
.8a8e		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8a91		20 20 8b	jsr $8b20			jsr     LoadReadByteInit            ; Init reader with the stream
.8a94		20 fd 91	jsr $91fd			jsr 	NewProgram 					; does the actual NEW.
.8a97		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a9a						_CLLoop:
.8a9a		20 de 8a	jsr $8ade			jsr 	LoadReadLine 				; get next line.
.8a9d		f0 10		beq $8aaf			beq 	_CLExit 					; end, exit.
.8a9f		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8aa2		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8aa5		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8aa8		f0 f0		beq $8a9a			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8aaa		20 21 86	jsr $8621			jsr 	EditProgramCode 			; do the editing etc.
.8aad		80 eb		bra $8a9a			bra 	_CLLoop
.8aaf						_CLExit:
.8aaf		ad 90 07	lda $0790			lda 	BasicFileStream
.8ab2		20 01 83	jsr $8301			jsr 	KNLCloseFile
.8ab5						CLComplete:
.8ab5		a9 bd		lda #$bd			lda 	#_CLCMsg & $FF
.8ab7		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8ab9		20 2b 98	jsr $982b			jsr 	PrintStringXA
.8abc		60		rts				rts
.8abd						_CLCMsg:
>8abd		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8ac5		2e 0d 00
.8ac8						CLCloseError:
.8ac8		48		pha				pha
.8ac9		ad 90 07	lda $0790			lda 	BasicFileStream
.8acc		20 01 83	jsr $8301			jsr 	KNLCloseFile
.8acf		68		pla				pla
.8ad0						CLErrorHandler:
.8ad0		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8ad2		f0 05		beq $8ad9			beq 	_CLEHNotFound
.8ad4		a9 1a		lda #$1a		lda	#26
.8ad6		4c d2 97	jmp $97d2		jmp	ErrorHandler
.8ad9						_CLEHNotFound:
.8ad9		a9 19		lda #$19		lda	#25
.8adb		4c d2 97	jmp $97d2		jmp	ErrorHandler
.8ade						LoadReadLine:
.8ade		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8ae0		20 fa 8a	jsr $8afa			jsr 	LoadReadCharacter
.8ae3		f0 14		beq $8af9			beq 	_LRLExit 					; eof ?
.8ae5		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8ae7		90 f5		bcc $8ade			bcc 	LoadReadLine
.8ae9						_LRLLoop:
.8ae9		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8aec		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8aef		e8		inx				inx
.8af0		20 fa 8a	jsr $8afa			jsr 	LoadReadCharacter 			; next line
.8af3		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8af5		b0 f2		bcs $8ae9			bcs 	_LRLLoop
.8af7		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8af9						_LRLExit:
.8af9		60		rts				rts
.8afa						LoadReadCharacter:
.8afa		da		phx				phx
.8afb		5a		phy				phy
.8afc		ad 8f 07	lda $078f			lda 	LoadEOFFlag 				; already done EOF.
.8aff		d0 0c		bne $8b0d			bne 	_LRCIsEOF
.8b01		20 2a 8b	jsr $8b2a			jsr 	LoadReadByte 				; read a byte
.8b04		90 09		bcc $8b0f			bcc		_LRCExit 					; read okay.
.8b06		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8b08		d0 be		bne $8ac8			bne 	CLCloseError
.8b0a		ce 8f 07	dec $078f			dec 	LoadEOFFlag
.8b0d						_LRCIsEOF:
.8b0d		a9 00		lda #$00			lda 	#0
.8b0f						_LRCExit:
.8b0f		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8b11		d0 02		bne $8b15			bne 	_LRCNotTab
.8b13		a9 20		lda #$20			lda 	#' '
.8b15						_LRCNotTab:
.8b15		c9 0a		cmp #$0a			cmp 	#$0A
.8b17		d0 02		bne $8b1b			bne 	_LRCNotLF
.8b19		a9 0d		lda #$0d			lda 	#$0D
.8b1b						_LRCNotLF:
.8b1b		7a		ply				ply
.8b1c		fa		plx				plx
.8b1d		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b1f		60		rts				rts
.8b20						LoadReadByteInit:
.8b20		8d 91 07	sta $0791			sta     LoadFileStream 				; save stream
.8b23		9c 92 07	stz $0792			stz     LoadNextCharacter 			; reset buffer
.8b26		9c 93 07	stz $0793			stz     LoadEndCharacter
.8b29		60		rts				rts
.8b2a						LoadReadByte:
.8b2a		da		phx				phx
.8b2b		ae 92 07	ldx $0792			ldx     LoadNextCharacter 					; all data consumed ?
.8b2e		ec 93 07	cpx $0793			cpx     LoadEndCharacter
.8b31		d0 12		bne $8b45			bne     _KNLRBGetNextByte
.8b33		ad 91 07	lda $0791			lda     LoadFileStream
.8b36		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8b38		20 8c 82	jsr $828c			jsr     KNLReadBlock 				; read next chunk from the stream
.8b3b		b0 0f		bcs $8b4c			bcs     _KNLRBError 				; error has occurred on read.
.8b3d		8d 93 07	sta $0793			sta     LoadEndCharacter 						; # read is the number available
.8b40		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8b42		8e 92 07	stx $0792			stx     LoadNextCharacter
.8b45						_KNLRBGetNextByte:
.8b45		bd 81 06	lda $0681,x			lda     KNLReadBuffer,x 			; get the next data item
.8b48		ee 92 07	inc $0792			inc     LoadNextCharacter 					; and advance the index
.8b4b		18		clc				clc 								; succeeded
.8b4c						_KNLRBError:
.8b4c		fa		plx				plx
.8b4d		60		rts				rts
.078f						LoadEOFFlag:
>078f								.fill 	1
.0790						BasicFileStream:
>0790								.fill 	1
.0791						LoadFileStream:
>0791								.byte   ?
.0792						LoadNextCharacter:
>0792								.byte   ?
.0793						LoadEndCharacter:
>0793								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8b4e						Command_Save:
.8b4e		20 84 a6	jsr $a684			jsr 	EvaluateString 				; file name to load
.8b51		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b53		a5 36		lda $36				lda 	zTemp0
.8b55		20 32 82	jsr $8232			jsr 	KNLOpenFileWrite 			; open file for writing
.8b58		b0 2f		bcs $8b89			bcs 	CSErrorHandler 				; error, so fail.
.8b5a		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8b5d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b5f		85 30		sta $30				sta 	codePtr
.8b61		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b63		85 31		sta $31				sta 	codePtr+1
.8b65						_CSLoop:
.8b65		b2 30		lda ($30)			lda 	(codePtr)
.8b67		f0 17		beq $8b80			beq 	_CSExit
.8b69		20 ad 8b	jsr $8bad			jsr 	CSGetCleanLine
.8b6c		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8b6e		85 36		sta $36				sta 	zTemp0
.8b70		20 8c 8b	jsr $8b8c			jsr 	CLWriteByteBlock 			; write the block out.
.8b73		18		clc				clc
.8b74		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b76		65 30		adc $30				adc 	codePtr
.8b78		85 30		sta $30				sta 	codePtr
.8b7a		90 02		bcc $8b7e			bcc 	_CREExit
.8b7c		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b7e						_CREExit:
.8b7e		80 e5		bra $8b65			bra 	_CSLoop
.8b80						_CSExit:
.8b80		ad 90 07	lda $0790			lda 	BasicFileStream 			; close file
.8b83		20 01 83	jsr $8301			jsr 	KNLCloseFile
.8b86		4c b5 8a	jmp $8ab5			jmp 	CLComplete 					; display complete message.
.8b89						CSErrorHandler:
.8b89		4c d0 8a	jmp $8ad0			jmp 	CLErrorHandler
.8b8c						CLWriteByteBlock:
.8b8c		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8b8e		f0 1c		beq $8bac			beq 	_CLWBBExit					; if so, exit
.8b90		ad 90 07	lda $0790			lda 	BasicFileStream 			; stream to write, count in X
.8b93		20 c7 82	jsr $82c7			jsr 	KNLWriteBlock 				; call one write attempt
.8b96		b0 f1		bcs $8b89			bcs 	CSErrorHandler 				; error occurred
.8b98		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8b9a		8a		txa				txa 								; subtract bytes written from X, total count.
.8b9b		38		sec				sec
.8b9c		e5 38		sbc $38				sbc 	zTemp1
.8b9e		aa		tax				tax
.8b9f		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8ba0		a5 36		lda $36				lda 	zTemp0
.8ba2		65 38		adc $38				adc 	zTemp1
.8ba4		85 36		sta $36				sta 	zTemp0
.8ba6		90 e4		bcc $8b8c			bcc 	CLWriteByteBlock
.8ba8		e6 37		inc $37				inc 	zTemp0+1
.8baa		80 e0		bra $8b8c			bra 	CLWriteByteBlock 			; and retry write out.
.8bac						_CLWBBExit:
.8bac		60		rts				rts
.8bad						CSGetCleanLine:
.8bad		a9 00		lda #$00			lda 	#0 							; no indent.
.8baf		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8bb2		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8bb4		a0 00		ldy #$00			ldy 	#0
.8bb6						_CSClean:
.8bb6		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8bb9		f0 09		beq $8bc4			beq 	_CSDoneClean
.8bbb		30 04		bmi $8bc1			bmi 	_CSIgnoreCharacter
.8bbd		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8bc0		e8		inx				inx
.8bc1						_CSIgnoreCharacter:
.8bc1		c8		iny				iny
.8bc2		80 f2		bra $8bb6			bra 	_CSClean
.8bc4						_CSDoneClean:
.8bc4		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8bc6		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8bc9		e8		inx				inx
.8bca		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8bcd		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8bcf		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8bd1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.dc65						m
.8bd2						Command_VERIFY:
.8bd2		20 84 a6	jsr $a684			jsr 	EvaluateString 				; file name to verify
.8bd5		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8bd7		a5 36		lda $36				lda 	zTemp0
.8bd9		20 37 82	jsr $8237			jsr 	KNLOpenFileRead 			; open file for reading
.8bdc		b0 4b		bcs $8c29			bcs 	_CVErrorHandler 			; error, so fail.
.8bde		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8be1		20 20 8b	jsr $8b20			jsr     LoadReadByteInit            ; Init reader with the stream
.8be4		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8be7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8be9		85 30		sta $30				sta 	codePtr
.8beb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bed		85 31		sta $31				sta 	codePtr+1
.8bef						_CVLoop:
.8bef		20 de 8a	jsr $8ade			jsr 	LoadReadLine 				; get next line.
.8bf2		f0 27		beq $8c1b			beq 	_CVExit 					; end, exit.
.8bf4		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8bf7		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8bfa		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8bfd		f0 f0		beq $8bef			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8bff		a0 00		ldy #$00			ldy 	#0 							; start compare
.8c01						_CVCompareLoop:
.8c01		b1 30		lda ($30),y			lda 	(codePtr),y
.8c03		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8c06		d0 1c		bne $8c24			bne 	_CVCompareError
.8c08		c8		iny				iny
.8c09		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8c0c		d0 f3		bne $8c01			bne 	_CVCompareLoop
.8c0e		18		clc				clc
.8c0f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c11		65 30		adc $30				adc 	codePtr
.8c13		85 30		sta $30				sta 	codePtr
.8c15		90 02		bcc $8c19			bcc 	_CREExit
.8c17		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c19						_CREExit:
.8c19		80 d4		bra $8bef			bra 	_CVLoop
.8c1b						_CVExit:
.8c1b		ad 90 07	lda $0790			lda 	BasicFileStream
.8c1e		20 01 83	jsr $8301			jsr 	KNLCloseFile
.8c21		4c b5 8a	jmp $8ab5			jmp 	CLComplete
.8c24						_CVCompareError:
.8c24		a9 1b		lda #$1b		lda	#27
.8c26		4c d2 97	jmp $97d2		jmp	ErrorHandler
.8c29						_CVErrorHandler:
.8c29		4c d0 8a	jmp $8ad0			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c2c						ForCommand:
.8c2c		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8c2e		20 4b b0	jsr $b04b			jsr 	StackOpen
.8c31		a2 00		ldx #$00			ldx 	#0
.8c33		20 20 a1	jsr $a120			jsr 	EvaluateTerm
.8c36		b5 50		lda $50,x			lda 	NSStatus,x
.8c38		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c3a		d0 47		bne $8c83			bne		_FCError
.8c3c		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c3e		20 c9 97	jsr $97c9			jsr 	CheckNextA
.8c41		e8		inx				inx
.8c42		20 99 a6	jsr $a699			jsr 	EvaluateInteger 			; <from> in +1
.8c45		b1 30		lda ($30),y			lda 	(codePtr),y
.8c47		c8		iny				iny 								; consume it
.8c48		48		pha				pha 								; save on stack for later
.8c49		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8c4b		f0 04		beq $8c51			beq 	_FCNoSyntax
.8c4d		c9 db		cmp #$db			cmp 	#KWD_TO
.8c4f		d0 35		bne $8c86			bne 	_FCSyntaxError
.8c51						_FCNoSyntax:
.8c51		e8		inx				inx
.8c52		20 99 a6	jsr $a699			jsr 	EvaluateInteger
.8c55		20 90 b0	jsr $b090			jsr 	STKSaveCodePosition 		; save loop back position
.8c58		68		pla				pla 								; restore DOWNTO or TO
.8c59		5a		phy				phy 								; save Y on the stack
.8c5a		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8c5c		f0 02		beq $8c60			beq 	_FCNotDownTo
.8c5e		a9 02		lda #$02			lda 	#2
.8c60						_FCNotDownTo:
.8c60		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8c61		a0 10		ldy #$10			ldy 	#16
.8c63		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8c65		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8c67		a5 58		lda $58				lda 	NSMantissa0
.8c69		91 34		sta ($34),y			sta 	(basicStack),y
.8c6b		a5 60		lda $60				lda 	NSMantissa1
.8c6d		c8		iny				iny
.8c6e		91 34		sta ($34),y			sta 	(basicStack),y
.8c70		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c72		a2 01		ldx #$01			ldx 	#1
.8c74		20 89 8c	jsr $8c89			jsr 	FCIntegerToStack
.8c77		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8c79		a2 02		ldx #$02			ldx 	#2
.8c7b		20 89 8c	jsr $8c89			jsr 	FCIntegerToStack
.8c7e		20 a4 8c	jsr $8ca4			jsr 	CopyIndexToReference
.8c81		7a		ply				ply 								; restore position
.8c82		60		rts				rts
.8c83						_FCError:
.8c83		4c db a9	jmp $a9db			jmp 	TypeError
.8c86						_FCSyntaxError:
.8c86		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.8c89						FCIntegerToStack:
.8c89		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8c8b		10 03		bpl $8c90			bpl	 	_FCNotNegative
.8c8d		20 f5 a6	jsr $a6f5			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c90						_FCNotNegative:
.8c90		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c92		91 34		sta ($34),y			sta 	(basicStack),y
.8c94		c8		iny				iny
.8c95		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c97		91 34		sta ($34),y			sta 	(basicStack),y
.8c99		c8		iny				iny
.8c9a		b5 68		lda $68,x			lda 	NSMantissa2,x
.8c9c		91 34		sta ($34),y			sta 	(basicStack),y
.8c9e		c8		iny				iny
.8c9f		b5 70		lda $70,x			lda 	NSMantissa3,x
.8ca1		91 34		sta ($34),y			sta 	(basicStack),y
.8ca3		60		rts				rts
.8ca4						CopyIndexToReference:
.8ca4		5a		phy				phy
.8ca5		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8ca7		38		sec				sec 								; (because we copy from offset 8)
.8ca8		b1 34		lda ($34),y			lda 	(basicStack),y
.8caa		e9 08		sbc #$08			sbc 	#8
.8cac		85 36		sta $36				sta 	zTemp0
.8cae		c8		iny				iny
.8caf		b1 34		lda ($34),y			lda 	(basicStack),y
.8cb1		e9 00		sbc #$00			sbc 	#0
.8cb3		85 37		sta $37				sta 	zTemp0+1
.8cb5		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8cb7		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8cb9		b1 34		lda ($34),y			lda 	(basicStack),y
.8cbb		0a		asl a				asl 	a 							; into carry
.8cbc		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8cbe		90 14		bcc $8cd4			bcc 	_CITRNormal
.8cc0		38		sec				sec
.8cc1						_CITRNegative:
.8cc1		a9 00		lda #$00			lda 	#0
.8cc3		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8cc5		91 36		sta ($36),y			sta 	(zTemp0),y
.8cc7		c8		iny				iny
.8cc8		ca		dex				dex
.8cc9		d0 f6		bne $8cc1			bne 	_CITRNegative
.8ccb		88		dey				dey 								; look at MSB of mantissa
.8ccc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8cce		09 80		ora #$80			ora 	#$80
.8cd0		91 36		sta ($36),y			sta 	(zTemp0),y
.8cd2		7a		ply				ply
.8cd3		60		rts				rts
.8cd4						_CITRNormal:
.8cd4		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8cd6		91 36		sta ($36),y			sta 	(zTemp0),y
.8cd8		c8		iny				iny
.8cd9		ca		dex				dex
.8cda		d0 f8		bne $8cd4			bne 	_CITRNormal
.8cdc		7a		ply				ply 								; and exit.
.8cdd		60		rts				rts
.8cde						NextCommand:
.8cde		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8ce0		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8ce2		20 78 b0	jsr $b078			jsr 	StackCheckFrame
.8ce5		5a		phy				phy
.8ce6		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8ce8		b1 34		lda ($34),y			lda 	(basicStack),y
.8cea		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8cec		30 02		bmi $8cf0			bmi 	_NCStepNeg
.8cee		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8cf0						_NCStepNeg:
.8cf0		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8cf2		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8cf4		18		clc				clc
.8cf5						_NCBump:
.8cf5		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8cf7		91 34		sta ($34),y			sta 	(basicStack),y
.8cf9		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8cfb		c8		iny				iny 								; next byte
.8cfc		ca		dex				dex 								; do four times
.8cfd		d0 f6		bne $8cf5			bne 	_NCBump
.8cff		20 a4 8c	jsr $8ca4			jsr		CopyIndexToReference		; copy it to the reference variable.
.8d02		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8d04		b1 34		lda ($34),y			lda 	(basicStack),y
.8d06		0a		asl a				asl 	a 							; sign bit to carry
.8d07		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8d09		85 38		sta $38				sta 	zTemp1
.8d0b		90 02		bcc $8d0f			bcc 	_NCCompRev 					; use if step is +ve
.8d0d		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8d0f						_NCCompRev:
.8d0f		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8d11		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8d13		85 39		sta $39				sta 	zTemp1+1
.8d15		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8d17		38		sec				sec
.8d18						_NCCompare:
.8d18		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d1a		b1 34		lda ($34),y			lda 	(basicStack),y
.8d1c		a4 39		ldy $39				ldy 	zTemp1+1
.8d1e		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d20		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d22		e6 39		inc $39				inc 	zTemp1+1
.8d24		ca		dex				dex 								; do it 4 times.
.8d25		d0 f1		bne $8d18			bne 	_NCCompare
.8d27		50 02		bvc $8d2b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d29		49 80		eor #$80			eor 	#$80
.8d2b						_NCNoOverflow:
.8d2b		7a		ply				ply 								; restore Y position
.8d2c		0a		asl a				asl 	a 							; is bit 7 set.
.8d2d		90 04		bcc $8d33			bcc 	_NCLoopBack 				; if no , >= so loop back
.8d2f		20 6a b0	jsr $b06a			jsr 	StackClose 					; exit the loop
.8d32		60		rts				rts
.8d33						_NCLoopBack:
.8d33		20 a1 b0	jsr $b0a1			jsr 	STKLoadCodePosition 		; loop back
.8d36		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d37						Command_GOSUB:
.8d37		a2 00		ldx #$00			ldx 	#0
.8d39		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d3c		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d3e		20 4b b0	jsr $b04b			jsr 	StackOpen 					; create frame
.8d41		20 90 b0	jsr $b090			jsr 	STKSaveCodePosition 		; save current position
.8d44		4c 5a 8d	jmp $8d5a			jmp 	GotoStackX
.8d47						Command_RETURN:
.8d47		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d49		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d4b		20 78 b0	jsr $b078			jsr 	StackCheckFrame
.8d4e		20 a1 b0	jsr $b0a1			jsr 	STKLoadCodePosition 		; restore code position
.8d51		20 6a b0	jsr $b06a			jsr 	StackClose
.8d54		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d55						GotoCommand:
.8d55		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d57		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.8d5a						GotoStackX:
.8d5a		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8d5c		48		pha				pha 								; it is slightly inefficient, just in cases.
.8d5d		b5 58		lda $58,x			lda 	NSMantissa0,x
.8d5f		fa		plx				plx
.8d60		20 69 ac	jsr $ac69			jsr 	MemorySearch 				; transfer to line number AX.
.8d63		90 05		bcc $8d6a			bcc 	_GotoError 					; not found, off end.
.8d65		d0 03		bne $8d6a			bne 	_GotoError 					; not found exactly
.8d67		4c 93 93	jmp $9393			jmp 	RunNewLine 					; and go straight to new line code.
.8d6a						_GotoError:
.8d6a		a9 0d		lda #$0d		lda	#13
.8d6c		4c d2 97	jmp $97d2		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d6f						IfCommand:
.8d6f		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8d71		20 7a a6	jsr $a67a			jsr 	EvaluateNumber
.8d74		b1 30		lda ($30),y			lda 	(codePtr),y
.8d76		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8d78		d0 0a		bne $8d84			bne 	_IfStructured 				; we still support it.
.8d7a		c8		iny				iny 								; consume THEN
.8d7b		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; is it zero
.8d7e		f0 01		beq $8d81			beq 	_IfFail 					; if fail, go to next line
.8d80		60		rts				rts 								; if THEN just continue
.8d81						_IfFail:
.8d81		4c 6e 93	jmp $936e			jmp 	EOLCommand
.8d84						_IfStructured:
.8d84		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; is it zero
.8d87		d0 07		bne $8d90			bne 	_IfExit 					; if not, then continue normally.
.8d89		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8d8b		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8d8d		20 14 97	jsr $9714			jsr 	ScanForward 				; and run from there
.8d90						_IfExit:
.8d90		60		rts				rts
.8d91						ElseCode:
.8d91		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d93		aa		tax				tax 								; so just go to the structure exit
.8d94		20 14 97	jsr $9714			jsr 	ScanForward
.8d97		60		rts				rts
.8d98						EndIf:
.8d98		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8d99						Command_Input:
.8d99		9c 24 04	stz $0424			stz 	isPrintFlag
.8d9c		80 0c		bra $8daa			bra 	Command_IP_Main
.8d9e						Command_CPrint:
.8d9e		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8da0		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8da3		80 05		bra $8daa			bra 	Command_IP_Main
.8da5						Command_Print:
.8da5		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8da7		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8daa						Command_IP_Main:
.8daa		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8dab						_CPLoop:
.8dab		08		php				php 								; save last action flag
.8dac		b1 30		lda ($30),y			lda 	(codePtr),y
.8dae		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8db0		f0 54		beq $8e06			beq 	_CPExit
.8db2		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8db4		f0 50		beq $8e06			beq 	_CPExit
.8db6		68		pla				pla 								; throw last action flag
.8db7		b1 30		lda ($30),y			lda 	(codePtr),y
.8db9		c8		iny				iny
.8dba		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8dbc		f0 45		beq $8e03			beq 	_CPContinueWithSameLine
.8dbe		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8dc0		f0 3c		beq $8dfe			beq 	_CPTab
.8dc2		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8dc4		f0 34		beq $8dfa			beq 	_CPNewLine
.8dc6		88		dey				dey 								; undo the get.
.8dc7		20 d4 9c	jsr $9cd4			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8dca		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8dcc		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8dce		f0 0d		beq $8ddd			beq 	_CPIsValue 					; no, display it.
.8dd0		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8dd3		d0 05		bne $8dda			bne 	_CPIsPrint 					; otherwise display.
.8dd5		20 0f 8e	jsr $8e0f			jsr 	CIInputValue 				; input a value to the reference
.8dd8		80 20		bra $8dfa			bra 	_CPNewLine
.8dda						_CPIsPrint:
.8dda		20 99 9f	jsr $9f99			jsr 	Dereference 				; dereference if required.
.8ddd						_CPIsValue:
.8ddd		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8ddf		29 10		and #$10			and 	#NSBIsString
.8de1		f0 09		beq $8dec			beq 	_CPNumber
.8de3		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8de5		a5 58		lda $58				lda 	NSMantissa0
.8de7		20 72 8e	jsr $8e72			jsr 	CPPrintStringXA
.8dea		80 be		bra $8daa			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8dec						_CPNumber:
.8dec		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8dee		20 61 a5	jsr $a561			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8df1		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8df3		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8df5		20 72 8e	jsr $8e72			jsr 	CPPrintStringXA 			; print it.
.8df8		80 b0		bra $8daa			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8dfa						_CPNewLine:
.8dfa		a9 0d		lda #$0d			lda 	#13
.8dfc		80 02		bra $8e00			bra 	_CPPrintCharDirect
.8dfe						_CPTab:
.8dfe		a9 09		lda #$09			lda 	#9 							; print TAB
.8e00						_CPPrintCharDirect:
.8e00		20 8d 8e	jsr $8e8d			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8e03						_CPContinueWithSameLine:
.8e03		38		sec				sec 								; loop round with carry set, which
.8e04		80 a5		bra $8dab			bra 	_CPLoop 					; will inhibit final CR
.8e06						_CPExit:
.8e06		28		plp				plp 								; get last action flag
.8e07		b0 05		bcs $8e0e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e09		a9 0d		lda #$0d			lda 	#13 						; print new line
.8e0b		20 8d 8e	jsr $8e8d			jsr 	CPPVControl
.8e0e						_CPExit2:
.8e0e		60		rts				rts
.8e0f						CIInputValue:
.8e0f		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8e11						_CIInputLine:
.8e11		20 90 8e	jsr $8e90			jsr 	CPInputVector 				; get key
.8e14		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8e16		f0 1f		beq $8e37			beq 	_CIHaveValue
.8e18		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8e1a		f0 11		beq $8e2d			beq 	_CIBackspace
.8e1c		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8e1e		90 f1		bcc $8e11			bcc 	_CIInputLine
.8e20		e0 50		cpx #$50			cpx 	#80 						; max length
.8e22		b0 ed		bcs $8e11			bcs 	_CIInputLine
.8e24		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8e27		e8		inx				inx
.8e28		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e2b		80 e4		bra $8e11			bra 	_CIInputLine
.8e2d						_CIBackspace:
.8e2d		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8e2f		f0 e0		beq $8e11			beq 	_CIInputLine
.8e31		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e34		ca		dex				dex
.8e35		80 da		bra $8e11			bra 	_CIInputLine
.8e37						_CIHaveValue:
.8e37		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8e3a		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8e3c		29 10		and #$10			and 	#NSBIsString
.8e3e		f0 17		beq $8e57			beq 	_CIAssignNumber 			; assign a number
.8e40		a2 01		ldx #$01			ldx 	#1
.8e42		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e44		95 58		sta $58,x			sta 	NSMantissa0,x
.8e46		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e48		95 60		sta $60,x			sta 	NSMantissa1,x
.8e4a		74 68		stz $68,x			stz 	NSMantissa2,x
.8e4c		74 70		stz $70,x			stz 	NSMantissa3,x
.8e4e		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8e50		95 50		sta $50,x			sta  	NSStatus,x
.8e52		ca		dex				dex 								; X = 0
.8e53		20 05 8f	jsr $8f05			jsr 	AssignVariable
.8e56		60		rts				rts
.8e57						_CIAssignNumber:
.8e57		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e59		85 36		sta $36				sta 	zTemp0
.8e5b		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e5d		85 37		sta $37				sta 	zTemp0+1
.8e5f		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8e61		20 41 a4	jsr $a441			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8e64		90 07		bcc $8e6d			bcc 	_CIIsOkay
.8e66		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8e68		20 85 8e	jsr $8e85			jsr 	CPPrintVector
.8e6b		80 a2		bra $8e0f			bra 	CIInputValue
.8e6d						_CIIsOkay:
.8e6d		ca		dex				dex 								; X = 0
.8e6e		20 05 8f	jsr $8f05			jsr 	AssignVariable
.8e71		60		rts				rts
.8e72						CPPrintStringXA:
.8e72		5a		phy				phy
.8e73		86 37		stx $37				stx 	zTemp0+1
.8e75		85 36		sta $36				sta 	zTemp0
.8e77		a0 00		ldy #$00			ldy 	#0
.8e79						_PSXALoop:
.8e79		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e7b		f0 06		beq $8e83			beq 	_PSXAExit
.8e7d		20 85 8e	jsr $8e85			jsr 	CPPrintVector
.8e80		c8		iny				iny
.8e81		80 f6		bra $8e79			bra 	_PSXALoop
.8e83						_PSXAExit:
.8e83		7a		ply				ply
.8e84		60		rts				rts
.8e85						CPPrintVector:
.8e85		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8e88		30 03		bmi $8e8d			bmi 	CPPVControl
.8e8a		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8e8d						CPPVControl:
.8e8d		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8e90						CPInputVector:
.8e90		4c 8e 81	jmp $818e			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8e93						UnaryJoyX:
.8e93		18		clc				clc
.8e94		80 01		bra $8e97			bra 	JoyMain
.8e96						UnaryJoyY:
.8e96		38		sec				sec
.8e97						JoyMain:
.8e97		fa		plx				plx 								; get pos
.8e98		08		php				php 								; save carry (set for Y)
.8e99		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e9c		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.8e9f		20 07 83	jsr $8307			jsr 	KNLReadController 			; read the controller.
.8ea2		28		plp				plp
.8ea3		b0 02		bcs $8ea7			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8ea5		4a		lsr a				lsr 	a
.8ea6		4a		lsr a				lsr 	a
.8ea7						_JMNoShift:
.8ea7		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8ea8		b0 07		bcs $8eb1			bcs 	JMIsLeft
.8eaa		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8eab		b0 07		bcs $8eb4			bcs 	JMIsRight
.8ead		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; zero result
.8eb0		60		rts				rts
.8eb1						JMIsLeft:
.8eb1		4c 3f 98	jmp $983f			jmp 	ReturnTrue
.8eb4						JMIsRight:
.8eb4		a9 01		lda #$01			lda 	#1
.8eb6		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.8eb9		60		rts				rts
.8eba						UnaryJoyB:
.8eba		fa		plx				plx 								; get pos
.8ebb		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ebe		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.8ec1		20 07 83	jsr $8307			jsr 	KNLReadController 			; read the controller.
.8ec4		29 10		and #$10			and 	#$10
.8ec6		d0 e9		bne $8eb1			bne 	JMIsLeft
.8ec8		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.8ecb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8ecc						LetCommand:
.8ecc		a2 00		ldx #$00			ldx 	#0
.8ece		b1 30		lda ($30),y			lda 	(codePtr),y
.8ed0		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8ed2		d0 14		bne $8ee8			bne 	_LCStandard
.8ed4		c8		iny				iny 								; skip equal
.8ed5		20 20 a1	jsr $a120			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8ed8		20 99 9f	jsr $9f99			jsr 	Dereference 				; dereference it to a value
.8edb		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8edd		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8edf		95 50		sta $50,x			sta 	NSStatus,x
.8ee1		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8ee3		d0 0f		bne $8ef4			bne 	_LCMain
.8ee5		4c db a9	jmp $a9db			jmp 	TypeError 					; was a reference before.
.8ee8						_LCStandard:
.8ee8		ad be 9c	lda $9cbe			lda 	PrecedenceLevel+"*"			; precedence > this
.8eeb		20 d8 9c	jsr $9cd8			jsr 	EvaluateExpressionAtPrecedence
.8eee		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8ef0		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8ef2		f0 0e		beq $8f02			beq 	_LetGoProc 					; it's a procedure call.
.8ef4						_LCMain:
.8ef4		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8ef6		20 c9 97	jsr $97c9			jsr 	CheckNextA
.8ef9		e8		inx				inx 								; RHS
.8efa		20 71 a6	jsr $a671			jsr 	EvaluateValue
.8efd		ca		dex				dex
.8efe		20 05 8f	jsr $8f05			jsr 	AssignVariable
.8f01		60		rts				rts
.8f02						_LetGoProc:
.8f02		4c 44 92	jmp $9244			jmp 	CallProcedure
.8f05						AssignVariable:
.8f05		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8f07		48		pha				pha 								; save a copy
.8f08		55 51		eor $51,x			eor 	NSStatus+1,x
.8f0a		29 10		and #$10			and 	#NSBIsString
.8f0c		d0 0b		bne $8f19			bne 	_ASError
.8f0e		68		pla				pla 								; get back
.8f0f		29 10		and #$10			and 	#NSBIsString 				; check type
.8f11		d0 03		bne $8f16			bne 	_ASString
.8f13		4c d7 9e	jmp $9ed7			jmp 	AssignNumber
.8f16						_ASString:
.8f16		4c 35 9f	jmp $9f35			jmp 	AssignString
.8f19						_ASError:
.8f19		4c db a9	jmp $a9db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f1c						Command_List:
.8f1c		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8f1f		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8f21		20 75 80	jsr $8075			jsr 	SNDCommand
.8f24		b1 30		lda ($30),y			lda 	(codePtr),y
.8f26		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8f28		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8f2a		f0 72		beq $8f9e			beq 	_CLListProcedure
.8f2c		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f2e		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8f30		a9 ff		lda #$ff			lda 	#$FF
.8f32		85 5f		sta $5f				sta 	NSMantissa0+7
.8f34		85 67		sta $67				sta 	NSMantissa1+7
.8f36		b1 30		lda ($30),y			lda 	(codePtr),y
.8f38		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f3a		f0 1a		beq $8f56			beq 	_CLSecond
.8f3c		20 1b 90	jsr $901b			jsr 	CLIsDigit 					; if not digit, list all
.8f3f		b0 20		bcs $8f61			bcs 	_CLStart
.8f41		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f43		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.8f46		b1 30		lda ($30),y			lda 	(codePtr),y
.8f48		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f4a		f0 0a		beq $8f56			beq 	_CLSecond 					; if so go get it
.8f4c		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8f4e		85 5f		sta $5f				sta 	NSMantissa0+7
.8f50		a5 64		lda $64				lda 	NSMantissa1+4
.8f52		85 67		sta $67				sta 	NSMantissa1+7
.8f54		80 0b		bra $8f61			bra 	_CLStart
.8f56						_CLSecond:
.8f56		c8		iny				iny 								; consume comma
.8f57		20 1b 90	jsr $901b			jsr 	CLIsDigit 					; digit found
.8f5a		b0 05		bcs $8f61			bcs 	_CLStart 					; if not, continue listing
.8f5c		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f5e		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.8f61						_CLStart
.8f61		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f63		85 30		sta $30				sta 	codePtr
.8f65		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f67		85 31		sta $31				sta 	codePtr+1
.8f69						_CLLoop:
.8f69		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f6b		f0 03		beq $8f70			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f6d		20 34 81	jsr $8134			jsr 	ProcessEvents
.8f70						_NoEvents:
.8f70		d0 27		bne $8f99			bne 	_CLBreak
.8f72		b2 30		lda ($30)			lda 	(codePtr)
.8f74		f0 20		beq $8f96			beq 	_CLExit
.8f76		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8f78		20 0a 90	jsr $900a			jsr 	CLCompareLineNo
.8f7b		90 0c		bcc $8f89			bcc 	_CLNext
.8f7d		a2 07		ldx #$07			ldx 	#7
.8f7f		20 0a 90	jsr $900a			jsr 	CLCompareLineNo
.8f82		f0 02		beq $8f86			beq 	_CLDoThisOne
.8f84		b0 03		bcs $8f89			bcs 	_CLNext
.8f86						_CLDoThisOne:
.8f86		20 f7 8f	jsr $8ff7			jsr 	CLListOneLine 				; routine to list the current line.
.8f89						_CLNext:
.8f89		18		clc				clc
.8f8a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f8c		65 30		adc $30				adc 	codePtr
.8f8e		85 30		sta $30				sta 	codePtr
.8f90		90 02		bcc $8f94			bcc 	_CREExit
.8f92		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f94						_CREExit:
.8f94		80 d3		bra $8f69			bra 	_CLLoop
.8f96						_CLExit:
.8f96		4c 46 86	jmp $8646			jmp 	WarmStart
.8f99						_CLBreak:
.8f99		a9 01		lda #$01		lda	#1
.8f9b		4c d2 97	jmp $97d2		jmp	ErrorHandler
.8f9e						_CLListProcedure:
.8f9e		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa0		85 38		sta $38				sta 	zTemp1
.8fa2		c8		iny				iny
.8fa3		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa5		85 39		sta $39				sta 	zTemp1+1
.8fa7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fa9		85 30		sta $30				sta 	codePtr
.8fab		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fad		85 31		sta $31				sta 	codePtr+1
.8faf						_CLLPSearch:
.8faf		b2 30		lda ($30)			lda 	(codePtr)
.8fb1		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8fb3		f0 e1		beq $8f96			beq 	_CLExit
.8fb5		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8fb7		b1 30		lda ($30),y			lda 	(codePtr),y
.8fb9		c9 af		cmp #$af			cmp 	#KWD_PROC
.8fbb		d0 0e		bne $8fcb			bne 	_CLLPNext
.8fbd		c8		iny				iny 								; check if PROC this.
.8fbe		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc0		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8fc2		d0 07		bne $8fcb			bne 	_CLLPNext
.8fc4		c8		iny				iny
.8fc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc7		c5 39		cmp $39				cmp 	zTemp1+1
.8fc9		f0 0d		beq $8fd8			beq 	_CLLPFound
.8fcb						_CLLPNext:
.8fcb		18		clc				clc
.8fcc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fce		65 30		adc $30				adc 	codePtr
.8fd0		85 30		sta $30				sta 	codePtr
.8fd2		90 02		bcc $8fd6			bcc 	_CREExit
.8fd4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fd6						_CREExit:
.8fd6		80 d7		bra $8faf			bra 	_CLLPSearch
.8fd8						_CLLPFound:
.8fd8		b2 30		lda ($30)			lda 	(codePtr)
.8fda		f0 ba		beq $8f96			beq 	_CLExit
.8fdc		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8fde		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe0		48		pha				pha
.8fe1		20 f7 8f	jsr $8ff7			jsr 	CLListOneLine 				; list line and go forward
.8fe4		18		clc				clc
.8fe5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fe7		65 30		adc $30				adc 	codePtr
.8fe9		85 30		sta $30				sta 	codePtr
.8feb		90 02		bcc $8fef			bcc 	_CREExit
.8fed		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fef						_CREExit:
.8fef		68		pla				pla 								; reached ENDPROC ?
.8ff0		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.8ff2		d0 e4		bne $8fd8			bne 	_CLLPFound
.8ff4		4c 46 86	jmp $8646			jmp 	WarmStart
.8ff7						CLListOneLine:
.8ff7		20 77 97	jsr $9777			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8ffa		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ffd		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8fff		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.9001		20 2b 98	jsr $982b			jsr 	PrintStringXA
.9004		a9 0d		lda #$0d			lda 	#13 						; new line
.9006		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9009		60		rts				rts
.900a						CLCompareLineNo:
.900a		38		sec				sec
.900b		a0 01		ldy #$01			ldy 	#1
.900d		b1 30		lda ($30),y			lda 	(codePtr),y
.900f		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9011		85 36		sta $36				sta 	zTemp0
.9013		c8		iny				iny
.9014		b1 30		lda ($30),y			lda 	(codePtr),y
.9016		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9018		05 36		ora $36				ora 	zTemp0
.901a		60		rts				rts
.901b						CLIsDigit:
.901b		b1 30		lda ($30),y			lda 	(codePtr),y
.901d		c9 30		cmp #$30			cmp 	#"0"
.901f		90 03		bcc $9024			bcc	 	_CLIDExitFalse
.9021		c9 3a		cmp #$3a			cmp 	#"9"+1
.9023		60		rts				rts
.9024						_CLIDExitFalse:
.9024		38		sec				sec
.9025		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9026						Command_LOCAL:
.9026		a2 00		ldx #$00			ldx 	#0 							; at level 0
.9028		20 34 90	jsr $9034			jsr 	LocaliseNextTerm 			; convert term to a local.
.902b		b1 30		lda ($30),y			lda 	(codePtr),y
.902d		c8		iny				iny
.902e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9030		f0 f4		beq $9026			beq 	Command_LOCAL 				; if so, localise another variable.
.9032		88		dey				dey 								; unpick pre-get
.9033		60		rts				rts
.9034						LocaliseNextTerm:
.9034		20 20 a1	jsr $a120			jsr 	EvaluateTerm 				; evaluate the term
.9037		b5 50		lda $50,x			lda 	NSStatus,x
.9039		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.903b		f0 5c		beq $9099			beq		_LNTError
.903d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.903f		85 36		sta $36				sta 	zTemp0
.9041		b5 60		lda $60,x			lda 	NSMantissa1,x
.9043		85 37		sta $37				sta  	zTemp0+1
.9045		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.9047		29 10		and #$10			and 	#NSBIsString
.9049		d0 1e		bne $9069			bne 	_LNTPushString
.904b		5a		phy				phy
.904c		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.904e						_LNTPushNumLoop:
.904e		b1 36		lda ($36),y			lda		(zTemp0),y
.9050		20 2a b0	jsr $b02a			jsr 	StackPushByte
.9053		c8		iny				iny
.9054		c0 05		cpy #$05			cpy 	#5
.9056		d0 f6		bne $904e			bne 	_LNTPushNumLoop
.9058		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.905a		20 2a b0	jsr $b02a			jsr 	StackPushByte
.905d		a5 37		lda $37				lda 	zTemp0+1
.905f		20 2a b0	jsr $b02a			jsr 	StackPushByte
.9062		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.9064		20 2a b0	jsr $b02a			jsr 	StackPushByte
.9067		7a		ply				ply
.9068		60		rts				rts
.9069						_LNTPushString:
.9069		5a		phy				phy
.906a		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.906c		85 38		sta $38				sta 	zTemp1
.906e		a0 01		ldy #$01			ldy 	#1
.9070		b1 36		lda ($36),y			lda 	(zTemp0),y
.9072		85 39		sta $39				sta 	zTemp1+1
.9074		a0 00		ldy #$00			ldy 	#0 							; output string
.9076		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.9078		f0 0a		beq $9084			beq 	_LNTStringOut
.907a						_LNTPushStrLoop:
.907a		b1 38		lda ($38),y			lda 	(zTemp1),y
.907c		f0 06		beq $9084			beq 	_LNTStringOut
.907e		20 2a b0	jsr $b02a			jsr 	StackPushByte
.9081		c8		iny				iny
.9082		80 f6		bra $907a			bra 	_LNTPushStrLoop
.9084						_LNTStringOut:
.9084		98		tya				tya									; output length (chars written).
.9085		20 2a b0	jsr $b02a			jsr 	StackPushByte
.9088		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.908a		20 2a b0	jsr $b02a			jsr 	StackPushByte
.908d		b5 60		lda $60,x			lda 	NSMantissa1,x
.908f		20 2a b0	jsr $b02a			jsr 	StackPushByte
.9092		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9094		20 2a b0	jsr $b02a			jsr 	StackPushByte
.9097		7a		ply				ply
.9098		60		rts				rts
.9099						_LNTError:
.9099		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.909c						LocalPopValue:
.909c		20 42 b0	jsr $b042			jsr 	StackPopByte
.909f		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.90a1		d0 17		bne $90ba			bne 	_LPVString
.90a3		20 42 b0	jsr $b042			jsr 	StackPopByte 				; address
.90a6		85 37		sta $37				sta 	zTemp0+1
.90a8		20 42 b0	jsr $b042			jsr 	StackPopByte
.90ab		85 36		sta $36				sta 	zTemp0
.90ad		5a		phy				phy
.90ae		a0 04		ldy #$04			ldy 	#4 							; copy back
.90b0						_LPVNumberCopy:
.90b0		20 42 b0	jsr $b042			jsr 	StackPopByte
.90b3		91 36		sta ($36),y			sta 	(zTemp0),y
.90b5		88		dey				dey
.90b6		10 f8		bpl $90b0			bpl 	_LPVNumberCopy
.90b8		7a		ply				ply 								; and complete
.90b9		60		rts				rts
.90ba						_LPVString:
.90ba		20 42 b0	jsr $b042			jsr 	StackPopByte 				; address of record copied to zTemp0
.90bd		85 37		sta $37				sta 	zTemp0+1
.90bf		20 42 b0	jsr $b042			jsr 	StackPopByte
.90c2		85 36		sta $36				sta 	zTemp0
.90c4		5a		phy				phy
.90c5		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.90c7		85 38		sta $38				sta 	zTemp1
.90c9		a0 01		ldy #$01			ldy 	#1
.90cb		b1 36		lda ($36),y			lda 	(zTemp0),y
.90cd		85 39		sta $39				sta 	zTemp1+1
.90cf		20 42 b0	jsr $b042			jsr 	StackPopByte 				; # chars to get => y
.90d2		a8		tay				tay
.90d3		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.90d5		f0 0e		beq $90e5			beq 	_LPVStringCopied
.90d7		a9 00		lda #$00			lda 	#0 							; NULL on end
.90d9		91 38		sta ($38),y			sta 	(zTemp1),y
.90db						_LPVStringCopy:
.90db		88		dey				dey
.90dc		30 07		bmi $90e5			bmi 	_LPVStringCopied
.90de		20 42 b0	jsr $b042			jsr 	StackPopByte
.90e1		91 38		sta ($38),y			sta 	(zTemp1),y
.90e3		80 f6		bra $90db			bra 	_LPVStringCopy
.90e5						_LPVStringCopied:
.90e5		fa		plx				plx
.90e6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.90e7						MCCommand:
.90e7		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.90e9		48		pha				pha
.90ea		64 01		stz $01				stz 	1
.90ec		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.90ef		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.90f1		8d 94 07	sta $0794			sta 	DMAControlByte
.90f4		20 a2 91	jsr $91a2			jsr 	MCPosition 					; start position
.90f7		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.90f9		20 73 91	jsr $9173			jsr 	MCCopyAddress
.90fc		a2 08		ldx #$08			ldx 	#8
.90fe		20 73 91	jsr $9173			jsr 	MCCopyAddress
.9101		b1 30		lda ($30),y			lda 	(codePtr),y
.9103		c8		iny				iny
.9104		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.9106		f0 09		beq $9111			beq 	_MCSize1D
.9108		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.910a		f0 11		beq $911d			beq 	_MCRect2D
.910c						_MCSyntax:
.910c		a9 02		lda #$02		lda	#2
.910e		4c d2 97	jmp $97d2		jmp	ErrorHandler
.9111						_MCSize1D:
.9111		a2 00		ldx #$00			ldx 	#0 							; get size
.9113		20 99 a6	jsr $a699			jsr 	EvaluateInteger
.9116		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.9118		20 73 91	jsr $9173			jsr 	MCCopyAddress
.911b		80 24		bra $9141			bra 	_MCDestination
.911d						_MCRect2D:
.911d		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.911f		20 90 91	jsr $9190			jsr 	MCEvalCopyData16
.9122		20 c1 97	jsr $97c1			jsr 	CheckComma
.9125		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.9127		20 90 91	jsr $9190			jsr 	MCEvalCopyData16
.912a		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.912c		20 c9 97	jsr $97c9			jsr 	CheckNextA
.912f		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.9131		20 90 91	jsr $9190			jsr 	MCEvalCopyData16
.9134		a2 12		ldx #$12			ldx 	#$12
.9136		20 97 91	jsr $9197			jsr 	MCCopyData16
.9139		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.913c		09 02		ora #$02			ora 	#$02
.913e		8d 94 07	sta $0794			sta 	DMAControlByte
.9141						_MCDestination:
.9141		b1 30		lda ($30),y			lda 	(codePtr),y
.9143		c8		iny				iny
.9144		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.9146		f0 0e		beq $9156			beq 	_MCDestPoke
.9148		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.914a		d0 c0		bne $910c			bne 	_MCSyntax
.914c		20 a2 91	jsr $91a2			jsr 	MCPosition 					; get target address
.914f		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.9151		20 73 91	jsr $9173			jsr 	MCCopyAddress
.9154		80 0e		bra $9164			bra 	_MCDoDMA 					; and we can go.
.9156						_MCDestPoke:
.9156		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; POKE what
.9159		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.915c		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.915f		09 04		ora #$04			ora 	#$04
.9161		8d 94 07	sta $0794			sta 	DMAControlByte
.9164						_MCDoDMA:
.9164		ad 94 07	lda $0794			lda 	DMAControlByte 				; set the DMA Control byte to go !
.9167		8d 00 df	sta $df00			sta 	$DF00
.916a						_MCWaitBUSD:
.916a		ad 01 df	lda $df01			lda 	$DF01
.916d		30 fb		bmi $916a			bmi 	_MCWaitBUSD
.916f		68		pla				pla 								; restore I/O.
.9170		85 01		sta $01				sta 	1
.9172		60		rts				rts
.9173						MCCopyAddress:
.9173		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.9175		29 fc		and #$fc			and 	#$FC
.9177		05 70		ora $70				ora 	NSMantissa3
.9179		d0 10		bne $918b			bne 	_MCRange
.917b		a5 58		lda $58				lda 	NSMantissa0
.917d		9d 00 df	sta $df00,x			sta 	$DF00,x
.9180		a5 60		lda $60				lda 	NSMantissa1
.9182		9d 01 df	sta $df01,x			sta 	$DF01,x
.9185		a5 68		lda $68				lda 	NSMantissa2
.9187		9d 02 df	sta $df02,x			sta 	$DF02,x
.918a		60		rts				rts
.918b						_MCRange:
.918b		a9 04		lda #$04		lda	#4
.918d		4c d2 97	jmp $97d2		jmp	ErrorHandler
.9190						MCEvalCopyData16:
.9190		da		phx				phx
.9191		a2 00		ldx #$00			ldx 	#0
.9193		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.9196		fa		plx				plx
.9197						MCCopyData16:
.9197		a5 58		lda $58				lda 	NSMantissa0
.9199		9d 00 df	sta $df00,x			sta 	$DF00,x
.919c		a5 60		lda $60				lda 	NSMantissa1
.919e		9d 01 df	sta $df01,x			sta 	$DF01,x
.91a1		60		rts				rts
.91a2						MCPosition:
.91a2		a2 00		ldx #$00			ldx 	#0 							; get start address.
.91a4		b1 30		lda ($30),y			lda 	(codePtr),y
.91a6		c9 b8		cmp #$b8			cmp 	#KWD_AT
.91a8		f0 04		beq $91ae			beq 	_MCPAt
.91aa		20 99 a6	jsr $a699			jsr 	EvaluateInteger
.91ad		60		rts				rts
.91ae						_MCPAt:
.91ae		c8		iny				iny
.91af		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; X position
.91b2		48		pha				pha
.91b3		20 c1 97	jsr $97c1			jsr 	CheckComma
.91b6		e8		inx				inx
.91b7		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; Y position
.91ba		ca		dex				dex
.91bb		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.91bd		64 58		stz $58				stz 	NSMantissa0
.91bf		64 68		stz $68				stz 	NSMantissa2
.91c1		64 70		stz $70				stz 	NSMantissa3
.91c3		46 60		lsr $60				lsr 	NSMantissa1
.91c5		66 58		ror $58				ror 	NSMantissa0
.91c7		46 60		lsr $60				lsr 	NSMantissa1
.91c9		66 58		ror $58				ror 	NSMantissa0
.91cb		68		pla				pla
.91cc		18		clc				clc
.91cd		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.91cf		85 58		sta $58				sta 	NSMantissa0
.91d1		a5 60		lda $60				lda 	NSMantissa1
.91d3		65 59		adc $59				adc 	NSMantissa0+1
.91d5		85 60		sta $60				sta 	NSMantissa1
.91d7		90 02		bcc $91db			bcc 	_MCPNoCarry
.91d9		e6 68		inc $68				inc 	NSMantissa2
.91db						_MCPNoCarry:
.91db		ad bd 07	lda $07bd			lda 	gxBasePage
.91de		85 69		sta $69				sta 	NSMantissa2+1
.91e0		64 59		stz $59				stz 	NSMantissa0+1
.91e2		64 61		stz $61				stz 	NSMantissa1+1
.91e4		64 71		stz $71				stz 	NSMantissa3+1
.91e6		a2 01		ldx #$01			ldx 	#1
.91e8		20 45 a7	jsr $a745			jsr 	NSMShiftRight
.91eb		20 45 a7	jsr $a745			jsr 	NSMShiftRight
.91ee		20 45 a7	jsr $a745			jsr 	NSMShiftRight
.91f1		a2 00		ldx #$00			ldx 	#0
.91f3		20 cc 9a	jsr $9acc			jsr 	AddTopTwoStack
.91f6		60		rts				rts
.0794						DMAControlByte:
>0794								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.91f7						NewCommand:
.91f7		20 fd 91	jsr $91fd			jsr 	NewProgram 					; does the actual NEW.
.91fa		4c 46 86	jmp $8646			jmp 	WarmStart 					; and warm starts straight away.
.91fd						NewProgram:
.91fd		20 4b ac	jsr $ac4b			jsr 	MemoryNew
.9200		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9203		20 df 86	jsr $86df			jsr 	ClearCommand 				; clear everything.
.9206		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.9207						PokeBCommand:
.9207		a9 01		lda #$01			lda 	#1
.9209		80 0c		bra $9217			bra 	PokeCommand
.920b						PokeWCommand:
.920b		a9 02		lda #$02			lda 	#2
.920d		80 08		bra $9217			bra 	PokeCommand
.920f						PokeLCommand:
.920f		a9 03		lda #$03			lda 	#3
.9211		80 04		bra $9217			bra 	PokeCommand
.9213						PokeDCommand:
.9213		a9 04		lda #$04			lda 	#4
.9215		80 00		bra $9217			bra 	PokeCommand
.9217						PokeCommand:
.9217		48		pha				pha 								; save count on stack
.9218		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.921a		20 ac a6	jsr $a6ac			jsr		Evaluate16BitInteger 		; address
.921d		20 c1 97	jsr $97c1			jsr 	CheckComma
.9220		e8		inx				inx
.9221		20 99 a6	jsr $a699			jsr		EvaluateInteger 			; data
.9224		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.9226		85 36		sta $36				sta 	zTemp0
.9228		a5 60		lda $60				lda 	NSMantissa1
.922a		85 37		sta $37				sta 	zTemp0+1
.922c		68		pla				pla 								; count -> zTemp1
.922d		85 38		sta $38				sta 	zTemp1
.922f		5a		phy				phy 								; save Y position.
.9230		a0 00		ldy #$00			ldy 	#0 							; index to write
.9232		a2 00		ldx #$00			ldx 	#0 							; index to read
.9234						_PCLoop:
.9234		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.9236		91 36		sta ($36),y			sta 	(zTemp0),y
.9238		c8		iny				iny 								; next byte to write
.9239		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.923a		18		clc				clc
.923b		69 08		adc #$08			adc 	#MathStackSize
.923d		aa		tax				tax
.923e		c6 38		dec $38				dec 	zTemp1 						; done them all
.9240		d0 f2		bne $9234			bne 	_PCLoop
.9242		7a		ply				ply 								; restore position.
.9243		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.9244						CallProcedure:
.9244		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9246		b1 30		lda ($30),y			lda 	(codePtr),y
.9248		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.924a		f0 0c		beq $9258			beq 	_CPEndParam
.924c						_CPParamLoop:
.924c		20 71 a6	jsr $a671			jsr 	EvaluateValue 				; get parameter onto stack
.924f		e8		inx				inx 								; bump next stack
.9250		b1 30		lda ($30),y			lda 	(codePtr),y
.9252		c8		iny				iny
.9253		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9255		f0 f5		beq $924c			beq 	_CPParamLoop
.9257		88		dey				dey 								; unpick.
.9258						_CPEndParam:
.9258		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.925b		c8		iny				iny									; skip right bracket
.925c		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.925e		20 4b b0	jsr $b04b			jsr 	StackOpen
.9261		20 90 b0	jsr $b090			jsr 	STKSaveCodePosition 		; save loop position
.9264		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9266		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9268		a5 60		lda $60				lda 	NSMantissa1
.926a		85 37		sta $37				sta 	zTemp0+1
.926c		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.926e		b2 36		lda ($36)			lda 	(zTemp0)
.9270		85 30		sta $30				sta 	safePtr
.9272		b1 36		lda ($36),y			lda 	(zTemp0),y
.9274		85 31		sta $31				sta 	safePtr+1
.9276		c8		iny				iny
.9277		b1 36		lda ($36),y			lda 	(zTemp0),y
.9279		85 32		sta $32				sta 	safePtr+2
.927b		c8		iny				iny
.927c		b1 36		lda ($36),y			lda 	(zTemp0),y
.927e		85 33		sta $33				sta 	safePtr+3
.9280		c8		iny				iny 								; get Y offset -> Y
.9281		b1 36		lda ($36),y			lda 	(zTemp0),y
.9283		a8		tay				tay
.9284		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9286		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9289		f0 13		beq $929e			beq 	_ParamExit 					; if so, exit.
.928b						_ParamExtract:
.928b		ca		dex				dex 								; put a local term on the level before
.928c		20 34 90	jsr $9034			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.928f		20 05 8f	jsr $8f05			jsr 	AssignVariable 				; assign stacked value to the variable.
.9292		e8		inx				inx 								; advance to next parameter to do.
.9293		e8		inx				inx
.9294		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9297		f0 05		beq $929e			beq 	_ParamExit
.9299		20 c1 97	jsr $97c1			jsr 	CheckComma 					; comma seperating parameters
.929c		80 ed		bra $928b			bra 	_ParamExtract
.929e						_ParamExit:
.929e		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; check )
.92a1		60		rts				rts 								; and continue from here
.92a2						Command_ENDPROC:
.92a2		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.92a4		a2 14		ldx #$14			ldx 	#ERRID_PROC
.92a6		20 78 b0	jsr $b078			jsr 	StackCheckFrame
.92a9		20 a1 b0	jsr $b0a1			jsr 	STKLoadCodePosition 		; restore code position
.92ac		20 6a b0	jsr $b06a			jsr 	StackClose
.92af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.92b0						Command_Read:
.92b0		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.92b2		20 20 a1	jsr $a120			jsr 	EvaluateTerm
.92b5		b5 50		lda $50,x			lda 	NSStatus,x
.92b7		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.92b9		f0 4f		beq $930a			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.92bb		20 53 93	jsr $9353			jsr 	SwapDataCodePtrs 			; swap code and data
.92be		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.92c1		d0 25		bne $92e8			bne 	_CRContinueData  			; forward for the next one.
.92c3		b2 30		lda ($30)			lda 	(codePtr)
.92c5		f0 1c		beq $92e3			beq 	_CRNoData
.92c7						_CRKeepSearching:
.92c7		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.92c9		a2 80		ldx #$80			ldx 	#KWC_EOL
.92cb		20 14 97	jsr $9714			jsr 	ScanForward
.92ce		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.92d0		f0 16		beq $92e8			beq 	_CRHaveData 				; found it
.92d2		18		clc				clc
.92d3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92d5		65 30		adc $30				adc 	codePtr
.92d7		85 30		sta $30				sta 	codePtr
.92d9		90 02		bcc $92dd			bcc 	_CREExit
.92db		e6 31		inc $31				inc 	codePtr+1 					; carry
.92dd						_CREExit:
.92dd		a0 03		ldy #$03			ldy 	#3 							; start of line.
.92df		b2 30		lda ($30)			lda 	(codePtr)
.92e1		d0 e4		bne $92c7			bne 	_CRKeepSearching
.92e3						_CRNoData:
.92e3		a9 0b		lda #$0b		lda	#11
.92e5		4c d2 97	jmp $97d2		jmp	ErrorHandler
.92e8						_CRHaveData:
.92e8						_CRContinueData:
.92e8		a2 01		ldx #$01			ldx 	#1
.92ea		20 71 a6	jsr $a671			jsr 	EvaluateValue 				; evaluate value into slot # 1
.92ed		ca		dex				dex
.92ee		20 05 8f	jsr $8f05			jsr		AssignVariable 				; do the assignment
.92f1		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.92f4		b1 30		lda ($30),y			lda 	(codePtr),y
.92f6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.92f8		d0 04		bne $92fe			bne 	_CRSwapBack
.92fa		c8		iny				iny 								; consume comma
.92fb		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.92fe						_CRSwapBack:
.92fe		20 53 93	jsr $9353			jsr 	SwapDataCodePtrs			; swap them back.
.9301		b1 30		lda ($30),y			lda 	(codePtr),y
.9303		c8		iny				iny
.9304		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9306		f0 a8		beq $92b0			beq 	Command_Read 				; if so go round again.
.9308		88		dey				dey 								; unpick get.
.9309		60		rts				rts
.930a						_CRSyntax:
.930a		4c d1 a9	jmp $a9d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.930d						RemCommand:
.930d		b1 30		lda ($30),y			lda 	(codePtr),y
.930f		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9311		d0 06		bne $9319			bne 	_RMExit
.9313		c8		iny				iny 								; point to offset
.9314		98		tya				tya 								; A = offset position
.9315		38		sec				sec 								; add size +1 hence SEC
.9316		71 30		adc ($30),y			adc 	(codePtr),y
.9318		a8		tay				tay 								; make current position.
.9319						_RMExit:
.9319		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.931a						Command_REPEAT:
.931a		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.931c		20 4b b0	jsr $b04b			jsr 	StackOpen
.931f		20 90 b0	jsr $b090			jsr 	STKSaveCodePosition 		; save loop position
.9322		60		rts				rts
.9323						Command_UNTIL:
.9323		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9325		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9327		20 78 b0	jsr $b078			jsr 	StackCheckFrame
.932a		a2 00		ldx #$00			ldx 	#0
.932c		20 7a a6	jsr $a67a			jsr 	EvaluateNumber 				; work out the number
.932f		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; check if zero
.9332		f0 04		beq $9338			beq 	_CULoopBack 				; if so keep looping
.9334		20 6a b0	jsr $b06a			jsr 	StackClose		 			; return
.9337		60		rts				rts
.9338						_CULoopBack:
.9338		20 a1 b0	jsr $b0a1			jsr 	STKLoadCodePosition 		; loop back
.933b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.933c						Command_Restore:
.933c		20 53 93	jsr $9353			jsr 	SwapDataCodePtrs 			; swap code and data
.933f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9341		85 30		sta $30				sta 	codePtr
.9343		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9345		85 31		sta $31				sta 	codePtr+1
.9347		20 53 93	jsr $9353			jsr 	SwapDataCodePtrs 			; put them back
.934a		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.934c		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.934f		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.9352		60		rts				rts
.9353						SwapDataCodePtrs:
.9353		da		phx				phx
.9354		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9356						_SDCPLoop:
.9356		b5 30		lda $30,x			lda 	safePtr,x
.9358		48		pha				pha
.9359		bd 13 04	lda $0413,x			lda 	dataPointer,x
.935c		95 30		sta $30,x			sta 	safePtr,x
.935e		68		pla				pla
.935f		9d 13 04	sta $0413,x			sta 	dataPointer,x
.9362		ca		dex				dex
.9363		10 f1		bpl $9356			bpl 	_SDCPLoop
.9365		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9368		8c 17 04	sty $0417			sty 	dataPointer+4
.936b		a8		tay				tay
.936c		fa		plx				plx
.936d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.936e						EOLCommand:
.936e		18		clc				clc
.936f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9371		65 30		adc $30				adc 	codePtr
.9373		85 30		sta $30				sta 	codePtr
.9375		90 02		bcc $9379			bcc 	_CREExit
.9377		e6 31		inc $31				inc 	codePtr+1 					; carry
.9379						_CREExit:
.9379		80 18		bra $9393			bra 	RunNewLine
.937b						CommandRUNOptLoad:
.937b		b1 30		lda ($30),y			lda 	(codePtr),y
.937d		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.937f		f0 07		beq $9388			beq 	RunCurrentProgram
.9381		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9383		f0 03		beq $9388			beq 	RunCurrentProgram
.9385		20 82 8a	jsr $8a82			jsr 	LoadFile 					; load expected name file.
.9388						RunCurrentProgram:
.9388		20 df 86	jsr $86df			jsr 	ClearCommand 				; clear variable/stacks/etc.
.938b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.938d		85 30		sta $30				sta 	codePtr
.938f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9391		85 31		sta $31				sta 	codePtr+1
.9393						RunNewLine:
.9393		b2 30		lda ($30)			lda 	(codePtr)
.9395		f0 74		beq $940b			beq 	CRNoProgram         		; no then END.
.9397		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9399		9a		txs				txs
.939a						RUNCodePointerLine:
.939a		a0 02		ldy #$02			ldy 	#2 							; start of program
.939c						_CRIncMainLoop:
.939c		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.939e		f0 03		beq $93a3			beq 	_NoEvents					; if zero, skip with Z flag set.
.93a0		20 34 81	jsr $8134			jsr 	ProcessEvents
.93a3						_NoEvents:
.93a3		d0 61		bne $9406			bne 	_CRBreak
.93a5		a5 01		lda $01				lda 	1 							; save I/O 0
.93a7		48		pha				pha
.93a8		64 01		stz $01				stz 	1 							; access I/O Page 0
.93aa		38		sec				sec 								; calculate timer - LastTick
.93ab		ad 59 d6	lda $d659			lda 	$D659
.93ae		cd 5e 06	cmp $065e			cmp 	LastTick
.93b1		f0 06		beq $93b9			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.93b3		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.93b6		20 96 81	jsr $8196			jsr 	TickHandler 							; go do the code.
.93b9						_NoFireTick:
.93b9		68		pla				pla 								; restore I/O 0
.93ba		85 01		sta $01				sta 	1
.93bc						_CRNoBreakCheck:
.93bc		c8		iny				iny									; next token
.93bd						_CRMainLoop:
.93bd		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.93c0		b1 30		lda ($30),y			lda 	(codePtr),y
.93c2		10 10		bpl $93d4			bpl 	_CRNotKeyword				; not a token.
.93c4		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.93c6		b0 04		bcs $93cc			bcs 	_CRIsKeyword
.93c8		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.93ca		b0 34		bcs $9400			bcs		_CRSyntaxError
.93cc						_CRIsKeyword:
.93cc		c8		iny				iny 								; consume command
.93cd		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.93ce		aa		tax				tax 								; put in X for vector jump
.93cf		20 03 94	jsr $9403			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.93d2		80 e9		bra $93bd			bra 	_CRMainLoop 				; and loop round
.93d4						_CRNotKeyword:
.93d4		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.93d6		f0 c4		beq $939c			beq 	_CRIncMainLoop
.93d8		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.93da		90 05		bcc $93e1			bcc 	_CRNotVariable
.93dc						_CRGoLet:
.93dc		20 cc 8e	jsr $8ecc			jsr 	LetCommand
.93df		80 dc		bra $93bd			bra 	_CRMainLoop
.93e1						_CRNotVariable:
.93e1		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.93e3		f0 f7		beq $93dc			beq 	_CRGoLet
.93e5		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.93e7		f0 f3		beq $93dc			beq 	_CRGoLet
.93e9		c9 21		cmp #$21			cmp 	#KWD_PLING
.93eb		f0 ef		beq $93dc			beq 	_CRGoLet
.93ed		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.93ef		f0 09		beq $93fa			beq 	_CRGoRem
.93f1		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.93f3		d0 0b		bne $9400			bne 	_CRSyntaxError
.93f5		20 b8 84	jsr $84b8			jsr 	LabelHere
.93f8		80 c3		bra $93bd			bra 	_CRMainLoop
.93fa						_CRGoRem:
.93fa		c8		iny				iny
.93fb		20 0d 93	jsr $930d			jsr 	RemCommand
.93fe		80 bd		bra $93bd			bra 	_CRMainLoop
.9400						_CRSyntaxError:
.9400		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.9403						_CRCallVector0:
.9403		7c a2 94	jmp ($94a2,x)			jmp 	(VectorSet0,x)
.9406						_CRBreak:
.9406		a9 01		lda #$01		lda	#1
.9408		4c d2 97	jmp $97d2		jmp	ErrorHandler
.940b						CRNoProgram:
.940b		4c 23 88	jmp $8823			jmp 	EndCommand
.940e						Shift1Command:
.940e		b1 30		lda ($30),y			lda 	(codePtr),y
.9410		c8		iny				iny
.9411		0a		asl a				asl 	a
.9412		aa		tax				tax
.9413		7c 5a 95	jmp ($955a,x)			jmp 	(VectorSet1,x)
.9416						Shift2Command:
.9416		b1 30		lda ($30),y			lda 	(codePtr),y
.9418		c8		iny				iny
.9419		0a		asl a				asl 	a
.941a		aa		tax				tax
.941b		7c a8 95	jmp ($95a8,x)			jmp 	(VectorSet2,x)
.941e						Unused1:
.941e						Unused2:
.941e						Unused3:
.941e						Unused4:
.941e		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
>9421								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9422						VectorSetPunc:
>9422		8a 9a					.word	ShiftLeft                        ; $00 <<
>9424		75 98					.word	BinaryCompareLessEqual           ; $01 <=
>9426		6b 98					.word	BinaryCompareNotEqual            ; $02 <>
>9428		d1 a9					.word	SyntaxError                      ; $03 !!3
>942a		d1 a9					.word	SyntaxError                      ; $04 ><
>942c		7f 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>942e		8d 9a					.word	ShiftRight                       ; $06 >>
>9430		d1 a9					.word	SyntaxError                      ; $07 !!7
>9432		d1 a9					.word	SyntaxError                      ; $08 !!8
>9434		d1 a9					.word	SyntaxError                      ; $09 !!9
>9436		d1 a9					.word	SyntaxError                      ; $0a !!10
>9438		d1 a9					.word	SyntaxError                      ; $0b !!11
>943a		d1 a9					.word	SyntaxError                      ; $0c !!12
>943c		d1 a9					.word	SyntaxError                      ; $0d !!13
>943e		d1 a9					.word	SyntaxError                      ; $0e !!14
>9440		d1 a9					.word	SyntaxError                      ; $0f !!15
>9442		d1 a9					.word	SyntaxError                      ; $10 @
>9444		d1 a9					.word	SyntaxError                      ; $11 !!17
>9446		d1 a9					.word	SyntaxError                      ; $12 !!18
>9448		d1 a9					.word	SyntaxError                      ; $13 [
>944a		36 99					.word	IntegerDivide                    ; $14 \
>944c		d1 a9					.word	SyntaxError                      ; $15 ]
>944e		c8 9b					.word	EorInteger                       ; $16 ^
>9450		d1 a9					.word	SyntaxError                      ; $17 _
>9452		d1 a9					.word	SyntaxError                      ; $18 `
>9454		d1 a9					.word	SyntaxError                      ; $19 !!25
>9456		d1 a9					.word	SyntaxError                      ; $1a !!26
>9458		d1 a9					.word	SyntaxError                      ; $1b {
>945a		93 9b					.word	OraInteger                       ; $1c |
>945c		d1 a9					.word	SyntaxError                      ; $1d }
>945e		d1 a9					.word	SyntaxError                      ; $1e ~
>9460		d1 a9					.word	SyntaxError                      ; $1f <7F>
>9462		d1 a9					.word	SyntaxError                      ; $20
>9464		fd 9b					.word	WordIndirect                     ; $21 !
>9466		d1 a9					.word	SyntaxError                      ; $22 "
>9468		d1 a9					.word	SyntaxError                      ; $23 #
>946a		d1 a9					.word	SyntaxError                      ; $24 $
>946c		77 99					.word	IntegerModulus                   ; $25 %
>946e		5e 9b					.word	AndInteger                       ; $26 &
>9470		d1 a9					.word	SyntaxError                      ; $27 '
>9472		d1 a9					.word	SyntaxError                      ; $28 (
>9474		d1 a9					.word	SyntaxError                      ; $29 )
>9476		e5 99					.word	MulInteger                       ; $2a *
>9478		00 9b					.word	AddInteger                       ; $2b +
>947a		d1 a9					.word	SyntaxError                      ; $2c ,
>947c		39 9b					.word	SubInteger                       ; $2d -
>947e		d1 a9					.word	SyntaxError                      ; $2e .
>9480		b7 9d					.word	FDivideCommand                   ; $2f /
>9482		d1 a9					.word	SyntaxError                      ; $30 0
>9484		d1 a9					.word	SyntaxError                      ; $31 1
>9486		d1 a9					.word	SyntaxError                      ; $32 2
>9488		d1 a9					.word	SyntaxError                      ; $33 3
>948a		d1 a9					.word	SyntaxError                      ; $34 4
>948c		d1 a9					.word	SyntaxError                      ; $35 5
>948e		d1 a9					.word	SyntaxError                      ; $36 6
>9490		d1 a9					.word	SyntaxError                      ; $37 7
>9492		d1 a9					.word	SyntaxError                      ; $38 8
>9494		d1 a9					.word	SyntaxError                      ; $39 9
>9496		d1 a9					.word	SyntaxError                      ; $3a :
>9498		d1 a9					.word	SyntaxError                      ; $3b ;
>949a		57 98					.word	BinaryCompareLess                ; $3c <
>949c		4d 98					.word	BinaryCompareEqual               ; $3d =
>949e		61 98					.word	BinaryCompareGreater             ; $3e >
>94a0		1f 9c					.word	ByteIndirect                     ; $3f ?
.94a2						VectorSet0:
>94a2		6e 93					.word	EOLCommand                       ; $80 !0:EOF
>94a4		0e 94					.word	Shift1Command                    ; $81 !1:SH1
>94a6		16 94					.word	Shift2Command                    ; $82 !2:SH2
>94a8		a1 a2					.word	AbsUnary                         ; $83 ABS(
>94aa		af a2					.word	AllocUnary                       ; $84 ALLOC(
>94ac		1f a3					.word	AscUnary                         ; $85 ASC(
>94ae		70 a4					.word	ChrUnary                         ; $86 CHR$(
>94b0		26 88					.word	UnaryEvent                       ; $87 EVENT(
>94b2		49 98					.word	UnaryFalse                       ; $88 FALSE
>94b4		2c a3					.word	FracUnary                        ; $89 FRAC(
>94b6		d5 a7					.word	ChrGet                           ; $8a GET$(
>94b8		b1 a7					.word	AscGet                           ; $8b GET(
>94ba		5b a7					.word	UnaryGetDate                     ; $8c GETDATE$(
>94bc		57 a7					.word	UnaryGetTime                     ; $8d GETTIME$(
>94be		ec ae					.word	UnaryHit                         ; $8e HIT(
>94c0		dc a7					.word	ChrInkey                         ; $8f INKEY$(
>94c2		ca a7					.word	AscInkey                         ; $90 INKEY(
>94c4		41 a3					.word	IntUnary                         ; $91 INT(
>94c6		2f a4					.word	IsValUnary                       ; $92 ISVAL(
>94c8		82 a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>94ca		a6 a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>94cc		ba 8e					.word	UnaryJoyB                        ; $95 JOYB(
>94ce		93 8e					.word	UnaryJoyX                        ; $96 JOYX(
>94d0		96 8e					.word	UnaryJoyY                        ; $97 JOYY(
>94d2		f5 a7					.word	KeyDown                          ; $98 KEYDOWN(
>94d4		e5 a5					.word	Unary_Left                       ; $99 LEFT$(
>94d6		52 a3					.word	LenUnary                         ; $9a LEN(
>94d8		70 a3					.word	Unary_Max                        ; $9b MAX(
>94da		07 a6					.word	Unary_Mid                        ; $9c MID$(
>94dc		6c a3					.word	Unary_Min                        ; $9d MIN(
>94de		bb a3					.word	Unary_Not                        ; $9e NOT(
>94e0		ce a3					.word	PeekByteUnary                    ; $9f PEEK(
>94e2		da a3					.word	PeekDUnary                       ; $a0 PEEKD(
>94e4		d6 a3					.word	PeekLUnary                       ; $a1 PEEKL(
>94e6		d2 a3					.word	PeekWUnary                       ; $a2 PEEKW(
>94e8		a8 af					.word	UnaryPlaying                     ; $a3 PLAYING(
>94ea		0f a8					.word	Unary_Random                     ; $a4 RANDOM(
>94ec		f2 a5					.word	Unary_Right                      ; $a5 RIGHT$(
>94ee		29 a8					.word	Unary_Rnd                        ; $a6 RND(
>94f0		07 a4					.word	SgnUnary                         ; $a7 SGN(
>94f2		24 a5					.word	SpcUnary                         ; $a8 SPC(
>94f4		3f a5					.word	Unary_Str                        ; $a9 STR$(
>94f6		a9 96					.word	UnaryTimer                       ; $aa TIMER(
>94f8		3e 98					.word	UnaryTrue                        ; $ab TRUE
>94fa		25 a4					.word	ValUnary                         ; $ac VAL(
>94fc		2c 8c					.word	ForCommand                       ; $ad FOR
>94fe		6f 8d					.word	IfCommand                        ; $ae IF
>9500		1e 94					.word	Unused1                          ; $af PROC
>9502		1a 93					.word	Command_REPEAT                   ; $b0 REPEAT
>9504		8a 97					.word	Command_WHILE                    ; $b1 WHILE
>9506		98 8d					.word	EndIf                            ; $b2 ENDIF
>9508		a2 92					.word	Command_ENDPROC                  ; $b3 ENDPROC
>950a		de 8c					.word	NextCommand                      ; $b4 NEXT
>950c		1e 94					.word	Unused4                          ; $b5 THEN
>950e		23 93					.word	Command_UNTIL                    ; $b6 UNTIL
>9510		ab 97					.word	Command_WEND                     ; $b7 WEND
>9512		d1 a9					.word	SyntaxError                      ; $b8 AT
>9514		d1 a9					.word	SyntaxError                      ; $b9 BY
>9516		aa 86					.word	CallCommand                      ; $ba CALL
>9518		a0 ac					.word	CircleCommand                    ; $bb CIRCLE
>951a		df 86					.word	ClearCommand                     ; $bc CLEAR
>951c		d1 a9					.word	SyntaxError                      ; $bd COLOR
>951e		d1 a9					.word	SyntaxError                      ; $be COLOUR
>9520		4c 87					.word	Command_Data                     ; $bf DATA
>9522		54 87					.word	DimCommand                       ; $c0 DIM
>9524		1e 94					.word	Unused3                          ; $c1 DOWNTO
>9526		91 8d					.word	ElseCode                         ; $c2 ELSE
>9528		d1 a9					.word	SyntaxError                      ; $c3 FROM
>952a		bf ae					.word	GfxCommand                       ; $c4 GFX
>952c		d1 a9					.word	SyntaxError                      ; $c5 HERE
>952e		c9 ac					.word	ImageCommand                     ; $c6 IMAGE
>9530		cc 8e					.word	LetCommand                       ; $c7 LET
>9532		1b ad					.word	LineCommand                      ; $c8 LINE
>9534		26 90					.word	Command_LOCAL                    ; $c9 LOCAL
>9536		e7 90					.word	MCCommand                        ; $ca MEMCOPY
>9538		d1 a9					.word	SyntaxError                      ; $cb OFF
>953a		d1 a9					.word	SyntaxError                      ; $cc ON
>953c		d1 a9					.word	SyntaxError                      ; $cd OUTLINE
>953e		10 af					.word	PaletteCommand                   ; $ce PALETTE
>9540		14 ad					.word	PlotCommand                      ; $cf PLOT
>9542		07 92					.word	PokeBCommand                     ; $d0 POKE
>9544		13 92					.word	PokeDCommand                     ; $d1 POKED
>9546		0f 92					.word	PokeLCommand                     ; $d2 POKEL
>9548		0b 92					.word	PokeWCommand                     ; $d3 POKEW
>954a		b0 92					.word	Command_Read                     ; $d4 READ
>954c		9c ac					.word	RectangleCommand                 ; $d5 RECT
>954e		0d 93					.word	RemCommand                       ; $d6 REM
>9550		d1 a9					.word	SyntaxError                      ; $d7 SOLID
>9552		c4 af					.word	SoundCommand                     ; $d8 SOUND
>9554		ab ac					.word	SpriteCommand                    ; $d9 SPRITE
>9556		e5 ac					.word	TextCommand                      ; $da TEXT
>9558		1e 94					.word	Unused2                          ; $db TO
.955a						VectorSet1:
>955a		d1 a9					.word	SyntaxError                      ; $80 !0:EOF
>955c		d1 a9					.word	SyntaxError                      ; $81 !1:SH1
>955e		d1 a9					.word	SyntaxError                      ; $82 !2:SH2
>9560		7e 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>9562		9a 86					.word	AssertCommand                    ; $84 ASSERT
>9564		5f ae					.word	BitmapCtrl                       ; $85 BITMAP
>9566		83 88					.word	Command_BLoad                    ; $86 BLOAD
>9568		23 89					.word	Command_BSave                    ; $87 BSAVE
>956a		50 af					.word	ClearScreen                      ; $88 CLS
>956c		9e 8d					.word	Command_CPrint                   ; $89 CPRINT
>956e		a5 89					.word	Command_Dir                      ; $8a DIR
>9570		11 88					.word	BootDOS                          ; $8b DOS
>9572		75 8a					.word	Command_Drive                    ; $8c DRIVE
>9574		23 88					.word	EndCommand                       ; $8d END
>9576		7c af					.word	Explode                          ; $8e EXPLODE
>9578		d1 a9					.word	SyntaxError                      ; $8f GO
>957a		37 8d					.word	Command_GOSUB                    ; $90 GOSUB
>957c		55 8d					.word	GotoCommand                      ; $91 GOTO
>957e		d1 a9					.word	SyntaxError                      ; $92 HIMEM
>9580		99 8d					.word	Command_Input                    ; $93 INPUT
>9582		1c 8f					.word	Command_List                     ; $94 LIST
>9584		7c 8a					.word	Command_Load                     ; $95 LOAD
>9586		d1 a9					.word	SyntaxError                      ; $96 MOUSE
>9588		f7 91					.word	NewCommand                       ; $97 NEW
>958a		58 af					.word	PingCommand                      ; $98 PING
>958c		a5 8d					.word	Command_Print                    ; $99 PRINT
>958e		3c 93					.word	Command_Restore                  ; $9a RESTORE
>9590		47 8d					.word	Command_RETURN                   ; $9b RETURN
>9592		7b 93					.word	CommandRUNOptLoad                ; $9c RUN
>9594		4e 8b					.word	Command_Save                     ; $9d SAVE
>9596		30 96					.word	CommandSetDate                   ; $9e SETDATE
>9598		34 96					.word	CommandSetTime                   ; $9f SETTIME
>959a		70 af					.word	ShootCommand                     ; $a0 SHOOT
>959c		a4 ae					.word	SpritesCtrl                      ; $a1 SPRITES
>959e		a4 96					.word	StopCommand                      ; $a2 STOP
>95a0		d2 8b					.word	Command_VERIFY                   ; $a3 VERIFY
>95a2		43 87					.word	XGoCommand                       ; $a4 XGO
>95a4		3a 87					.word	XLoadCommand                     ; $a5 XLOAD
>95a6		64 af					.word	ZapCommand                       ; $a6 ZAP
.95a8						VectorSet2:
>95a8		d1 a9					.word	SyntaxError                      ; $80 !0:EOF
>95aa		d1 a9					.word	SyntaxError                      ; $81 !1:SH1
>95ac		d1 a9					.word	SyntaxError                      ; $82 !2:SH2
>95ae		90 a8					.word	Assemble_adc                     ; $83 ADC
>95b0		88 a8					.word	Assemble_and                     ; $84 AND
>95b2		a4 a8					.word	Assemble_asl                     ; $85 ASL
>95b4		0e a9					.word	Assemble_bcc                     ; $86 BCC
>95b6		12 a9					.word	Assemble_bcs                     ; $87 BCS
>95b8		1a a9					.word	Assemble_beq                     ; $88 BEQ
>95ba		d1 a8					.word	Assemble_bit                     ; $89 BIT
>95bc		02 a9					.word	Assemble_bmi                     ; $8a BMI
>95be		16 a9					.word	Assemble_bne                     ; $8b BNE
>95c0		fe a8					.word	Assemble_bpl                     ; $8c BPL
>95c2		1e a9					.word	Assemble_bra                     ; $8d BRA
>95c4		22 a9					.word	Assemble_brk                     ; $8e BRK
>95c6		06 a9					.word	Assemble_bvc                     ; $8f BVC
>95c8		0a a9					.word	Assemble_bvs                     ; $90 BVS
>95ca		2a a9					.word	Assemble_clc                     ; $91 CLC
>95cc		7e a9					.word	Assemble_cld                     ; $92 CLD
>95ce		3e a9					.word	Assemble_cli                     ; $93 CLI
>95d0		6e a9					.word	Assemble_clv                     ; $94 CLV
>95d2		9c a8					.word	Assemble_cmp                     ; $95 CMP
>95d4		e5 a8					.word	Assemble_cpx                     ; $96 CPX
>95d6		e0 a8					.word	Assemble_cpy                     ; $97 CPY
>95d8		c2 a8					.word	Assemble_dec                     ; $98 DEC
>95da		7a a9					.word	Assemble_dex                     ; $99 DEX
>95dc		56 a9					.word	Assemble_dey                     ; $9a DEY
>95de		8c a8					.word	Assemble_eor                     ; $9b EOR
>95e0		c7 a8					.word	Assemble_inc                     ; $9c INC
>95e2		8a a9					.word	Assemble_inx                     ; $9d INX
>95e4		76 a9					.word	Assemble_iny                     ; $9e INY
>95e6		f9 a8					.word	Assemble_jmp                     ; $9f JMP
>95e8		f4 a8					.word	Assemble_jsr                     ; $a0 JSR
>95ea		98 a8					.word	Assemble_lda                     ; $a1 LDA
>95ec		bd a8					.word	Assemble_ldx                     ; $a2 LDX
>95ee		db a8					.word	Assemble_ldy                     ; $a3 LDY
>95f0		ae a8					.word	Assemble_lsr                     ; $a4 LSR
>95f2		8e a9					.word	Assemble_nop                     ; $a5 NOP
>95f4		84 a8					.word	Assemble_ora                     ; $a6 ORA
>95f6		3a a9					.word	Assemble_pha                     ; $a7 PHA
>95f8		26 a9					.word	Assemble_php                     ; $a8 PHP
>95fa		82 a9					.word	Assemble_phx                     ; $a9 PHX
>95fc		42 a9					.word	Assemble_phy                     ; $aa PHY
>95fe		4a a9					.word	Assemble_pla                     ; $ab PLA
>9600		2e a9					.word	Assemble_plp                     ; $ac PLP
>9602		96 a9					.word	Assemble_plx                     ; $ad PLX
>9604		52 a9					.word	Assemble_ply                     ; $ae PLY
>9606		a9 a8					.word	Assemble_rol                     ; $af ROL
>9608		b3 a8					.word	Assemble_ror                     ; $b0 ROR
>960a		36 a9					.word	Assemble_rti                     ; $b1 RTI
>960c		46 a9					.word	Assemble_rts                     ; $b2 RTS
>960e		a0 a8					.word	Assemble_sbc                     ; $b3 SBC
>9610		32 a9					.word	Assemble_sec                     ; $b4 SEC
>9612		92 a9					.word	Assemble_sed                     ; $b5 SED
>9614		4e a9					.word	Assemble_sei                     ; $b6 SEI
>9616		94 a8					.word	Assemble_sta                     ; $b7 STA
>9618		86 a9					.word	Assemble_stp                     ; $b8 STP
>961a		b8 a8					.word	Assemble_stx                     ; $b9 STX
>961c		d6 a8					.word	Assemble_sty                     ; $ba STY
>961e		cc a8					.word	Assemble_stz                     ; $bb STZ
>9620		6a a9					.word	Assemble_tax                     ; $bc TAX
>9622		66 a9					.word	Assemble_tay                     ; $bd TAY
>9624		ef a8					.word	Assemble_trb                     ; $be TRB
>9626		ea a8					.word	Assemble_tsb                     ; $bf TSB
>9628		72 a9					.word	Assemble_tsx                     ; $c0 TSX
>962a		5a a9					.word	Assemble_txa                     ; $c1 TXA
>962c		62 a9					.word	Assemble_txs                     ; $c2 TXS
>962e		5e a9					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.9630						CommandSetDate:
.9630		a9 03		lda #$03			lda 	#3
.9632		80 02		bra $9636			bra 	CSDTMain
.9634						CommandSetTime:
.9634		a9 00		lda #$00			lda 	#0
.9636						CSDTMain:
.9636		48		pha				pha 								; save table offsets 0 or 3
.9637		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9639		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.963c		20 c1 97	jsr $97c1			jsr 	CheckComma
.963f		e8		inx				inx
.9640		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.9643		20 c1 97	jsr $97c1			jsr 	CheckComma
.9646		e8		inx				inx
.9647		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.964a		68		pla				pla 								; table offset in Y, saving Y
.964b		5a		phy				phy
.964c		a8		tay				tay
.964d		a2 00		ldx #$00			ldx 	#0 							; first number
.964f		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.9651		48		pha				pha
.9652		64 01		stz $01				stz 	1
.9654						_CSDTCopy:
.9654		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.9656		d9 98 96	cmp $9698,y			cmp 	RTCWMinValues,y 			; check range
.9659		90 1b		bcc $9676			bcc 	_CSDTRange
.965b		d9 9e 96	cmp $969e,y			cmp 	RTCWMaxValues,y
.965e		b0 16		bcs $9676			bcs 	_CSDTRange
.9660		20 7b 96	jsr $967b			jsr 	CSDTDecimalToBCD
.9663		da		phx				phx 								; save X
.9664		be 92 96	ldx $9692,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.9667		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.966a		fa		plx				plx 								; restore X
.966b		e8		inx				inx 								; next number
.966c		c8		iny				iny 								; next table entries
.966d		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.966f		d0 e3		bne $9654			bne 	_CSDTCopy
.9671		68		pla				pla 								; restore I/O space
.9672		85 01		sta $01				sta 	1
.9674		7a		ply				ply 								; restore code pos and exit.
.9675		60		rts				rts
.9676						_CSDTRange:
.9676		a9 04		lda #$04		lda	#4
.9678		4c d2 97	jmp $97d2		jmp	ErrorHandler
.967b						CSDTDecimalToBCD:
.967b		da		phx				phx 								; 10 count in X
.967c		a2 00		ldx #$00			ldx 	#0
.967e						_CSDTDBLoop:
.967e		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.9680		90 05		bcc $9687			bcc 	_CSDTDBExit
.9682		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.9684		e8		inx				inx 								; one more 10s.
.9685		80 f7		bra $967e			bra 	_CSDTDBLoop
.9687						_CSDTDBExit:
.9687		85 36		sta $36				sta 	zTemp0 						; units
.9689		8a		txa				txa 								; 10s x 16
.968a		0a		asl a				asl 	a
.968b		0a		asl a				asl 	a
.968c		0a		asl a				asl 	a
.968d		0a		asl a				asl 	a
.968e		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9690		fa		plx				plx
.9691		60		rts				rts
.9692						RTCWOffset:
>9692		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9698						RTCWMinValues:
>9698		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.969e						RTCWMaxValues:
>969e		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96a4						StopCommand:
.96a4		a9 08		lda #$08		lda	#8
.96a6		4c d2 97	jmp $97d2		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.96a9						UnaryTimer:
.96a9		fa		plx				plx
.96aa		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.96ad						TimerToStackX:
.96ad		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; zero result
.96b0		64 01		stz $01				stz 	1 							; access I/O
.96b2		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96b5		95 58		sta $58,x			sta 	NSMantissa0,x
.96b7		ad 5a d6	lda $d65a			lda 	$D65A
.96ba		95 60		sta $60,x			sta 	NSMantissa1,x
.96bc		ad 5b d6	lda $d65b			lda 	$D65B
.96bf		95 68		sta $68,x			sta 	NSMantissa2,x
.96c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.96c2						ProcedureScan:
.96c2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.96c4		85 30		sta $30				sta 	codePtr
.96c6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.96c8		85 31		sta $31				sta 	codePtr+1
.96ca						_PSLoop:
.96ca		b2 30		lda ($30)			lda 	(codePtr)
.96cc		f0 42		beq $9710			beq 	_PSExit
.96ce		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.96d0		b1 30		lda ($30),y			lda 	(codePtr),y
.96d2		c9 af		cmp #$af			cmp 	#KWD_PROC
.96d4		d0 2d		bne $9703			bne 	_PSNext
.96d6		c8		iny				iny 								; get the address of the record to zTemp0 and
.96d7		b1 30		lda ($30),y			lda 	(codePtr),y
.96d9		29 c0		and #$c0			and 	#$C0
.96db		c9 40		cmp #$40			cmp 	#$40
.96dd		d0 32		bne $9711			bne 	_PSSyntax
.96df		b1 30		lda ($30),y			lda 	(codePtr),y
.96e1		18		clc				clc
.96e2		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.96e4		85 37		sta $37				sta 	zTemp0+1
.96e6		c8		iny				iny 								; LSB
.96e7		b1 30		lda ($30),y			lda 	(codePtr),y
.96e9		85 36		sta $36				sta 	zTemp0
.96eb		c8		iny				iny 								; character after variable call.
.96ec		98		tya				tya 								; save Y offset at +7 (exponent slot)
.96ed		a0 07		ldy #$07			ldy 	#7
.96ef		91 36		sta ($36),y			sta 	(zTemp0),y
.96f1		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.96f3		a0 02		ldy #$02			ldy 	#2
.96f5		91 36		sta ($36),y			sta 	(zTemp0),y
.96f7		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.96f9						_PSCopy:
.96f9		b5 30		lda $30,x			lda 	safePtr,x
.96fb		c8		iny				iny
.96fc		91 36		sta ($36),y			sta 	(zTemp0),y
.96fe		e8		inx				inx
.96ff		e0 04		cpx #$04			cpx 	#4
.9701		d0 f6		bne $96f9			bne 	_PSCopy
.9703						_PSNext:
.9703		18		clc				clc
.9704		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9706		65 30		adc $30				adc 	codePtr
.9708		85 30		sta $30				sta 	codePtr
.970a		90 02		bcc $970e			bcc 	_CREExit
.970c		e6 31		inc $31				inc 	codePtr+1 					; carry
.970e						_CREExit:
.970e		80 ba		bra $96ca			bra 	_PSLoop
.9710						_PSExit:
.9710		60		rts				rts
.9711						_PSSyntax:
.9711		4c d1 a9	jmp $a9d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9714						ScanForward:
.9714		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9716		86 37		stx $37				stx 	zTemp0+1
.9718		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.971a						_ScanLoop:
.971a		b1 30		lda ($30),y			lda 	(codePtr),y
.971c		c8		iny				iny
.971d		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.971f		d0 0e		bne $972f			bne 	_ScanGoNext
.9721		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9723		f0 04		beq $9729			beq 	_ScanMatch
.9725		c5 37		cmp $37				cmp 	zTemp0+1
.9727		d0 06		bne $972f			bne 	_ScanGoNext
.9729						_ScanMatch:
.9729		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.972b		d0 01		bne $972e			bne 	_ScanNotEndEOL
.972d		88		dey				dey
.972e						_ScanNotEndEOL:
.972e		60		rts				rts
.972f						_ScanGoNext:
.972f		20 34 97	jsr $9734			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9732		80 e6		bra $971a			bra 	_ScanLoop
.9734						ScanForwardOne:
.9734		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9736		90 3e		bcc $9776			bcc 	_SFWExit
.9738		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.973a		90 18		bcc $9754			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.973c		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.973e		b0 2f		bcs $976f			bcs 	_ScanSkipData
.9740		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9742		90 32		bcc $9776			bcc 	_SFWExit 					; if not, ordinary keywords.
.9744		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.9746		b0 2e		bcs $9776			bcs 	_SFWExit
.9748		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.974a		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.974c		b0 28		bcs $9776			bcs 	_SFWExit
.974e		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9750		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9752		80 22		bra $9776			bra 	_SFWExit
.9754						_ScanSkipOne:
.9754		c8		iny				iny 								; consume the extra one.
.9755		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9757		d0 1d		bne $9776			bne 	_SFWExit
.9759		18		clc				clc
.975a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.975c		65 30		adc $30				adc 	codePtr
.975e		85 30		sta $30				sta 	codePtr
.9760		90 02		bcc $9764			bcc 	_CREExit
.9762		e6 31		inc $31				inc 	codePtr+1 					; carry
.9764						_CREExit:
.9764		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9766		b2 30		lda ($30)			lda 	(codePtr)
.9768		d0 0c		bne $9776			bne 	_SFWExit 					; if not zero, more to scan
.976a		a9 13		lda #$13		lda	#19
.976c		4c d2 97	jmp $97d2		jmp	ErrorHandler
.976f						_ScanSkipData:
.976f		88		dey				dey 								; point at data token
.9770		c8		iny				iny 								; point to offset
.9771		98		tya				tya 								; A = offset position
.9772		38		sec				sec 								; add size +1 hence SEC
.9773		71 30		adc ($30),y			adc 	(codePtr),y
.9775		a8		tay				tay 								; make current position.
.9776						_SFWExit:
.9776		60		rts				rts
.9777						ScanGetCurrentLineStep:
.9777		64 38		stz $38				stz 	zTemp1
.9779		a0 03		ldy #$03			ldy 	#3
.977b						_SGCLSLoop:
.977b		b1 30		lda ($30),y			lda 	(codePtr),y
.977d		c8		iny				iny
.977e		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9780		f0 05		beq $9787			beq 	_SGCLSExit
.9782		20 34 97	jsr $9734			jsr 	ScanForwardOne
.9785		80 f4		bra $977b			bra 	_SGCLSLoop
.9787						_SGCLSExit:
.9787		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9789		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.978a						Command_WHILE:
.978a		5a		phy				phy 								; save position of the test
.978b		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.978d		20 7a a6	jsr $a67a			jsr 	EvaluateNumber
.9790		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; check if zero
.9793		f0 0e		beq $97a3			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9795		98		tya				tya 								; position *after* test.
.9796		7a		ply				ply 								; restore position before test, at WHILE
.9797		88		dey				dey 								; so we execute the WHILE command again.
.9798		48		pha				pha 								; push after test on the stack
.9799		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.979b		20 4b b0	jsr $b04b			jsr 	StackOpen
.979e		20 90 b0	jsr $b090			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.97a1		7a		ply				ply 								; restore the position *after* the test
.97a2		60		rts				rts
.97a3						_WHExitLoop:
.97a3		68		pla				pla 								; throw post loop position
.97a4		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.97a6		aa		tax				tax
.97a7		20 14 97	jsr $9714			jsr 	ScanForward
.97aa		60		rts				rts
.97ab						Command_WEND:
.97ab		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.97ad		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.97af		20 78 b0	jsr $b078			jsr 	StackCheckFrame
.97b2		20 a1 b0	jsr $b0a1			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.97b5		20 6a b0	jsr $b06a			jsr 	StackClose		 			; erase the frame
.97b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.97b9						CheckRightBracket:
.97b9		b1 30		lda ($30),y			lda 	(codePtr),y
.97bb		c8		iny				iny
.97bc		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.97be		d0 0f		bne $97cf			bne 	CNAFail
.97c0		60		rts				rts
.97c1						CheckComma:
.97c1		b1 30		lda ($30),y			lda 	(codePtr),y
.97c3		c8		iny				iny
.97c4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.97c6		d0 07		bne $97cf			bne 	CNAFail
.97c8		60		rts				rts
.97c9						CheckNextA:
.97c9		d1 30		cmp ($30),y			cmp 	(codePtr),y
.97cb		d0 02		bne $97cf			bne 	CNAFail
.97cd		c8		iny				iny 								; skip character
.97ce		60		rts				rts 								; and exit
.97cf						CNAFail:
.97cf		4c d1 a9	jmp $a9d1			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.97d2						ErrorHandler:
.97d2		a8		tay				tay 								; find the error text
.97d3		f0 49		beq $981e			beq 	_EHEnd
.97d5		a2 00		ldx #$00			ldx 	#0
.97d7		a9 ea		lda #$ea			lda 	#((ErrorText) & $FF)
.97d9		85 36		sta $36				sta 	0+zTemp0
.97db		a9 a9		lda #$a9			lda 	#((ErrorText) >> 8)
.97dd		85 37		sta $37				sta 	1+zTemp0
.97df						_EHFind:
.97df		88		dey				dey 								; keep looking through text
.97e0		f0 0e		beq $97f0			beq 	_EHFound
.97e2						_EHFindZero:
.97e2		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.97e4		e6 36		inc $36				inc 	zTemp0
.97e6		d0 02		bne $97ea			bne 	_EHFNoCarry
.97e8		e6 37		inc $37				inc 	zTemp0+1
.97ea						_EHFNoCarry:
.97ea		c9 00		cmp #$00			cmp 	#0
.97ec		d0 f4		bne $97e2			bne 	_EHFindZero
.97ee		80 ef		bra $97df			bra 	_EHFind
.97f0						_EHFound:
.97f0		a5 36		lda $36				lda 	zTemp0 						; print message
.97f2		a6 37		ldx $37				ldx 	zTemp0+1
.97f4		20 2b 98	jsr $982b			jsr 	PrintStringXA
.97f7		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.97f9		b1 30		lda ($30),y			lda 	(codePtr),y
.97fb		d0 05		bne $9802			bne 	_EHAtMsg
.97fd		c8		iny				iny
.97fe		b1 30		lda ($30),y			lda 	(codePtr),y
.9800		f0 17		beq $9819			beq 	_EHCREnd
.9802						_EHAtMsg:
.9802		a2 98		ldx #$98			ldx 	#_AtMsg >> 8 				; print " at "
.9804		a9 21		lda #$21			lda 	#_AtMsg & $FF
.9806		20 2b 98	jsr $982b			jsr 	PrintStringXA
.9809		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.980b		b1 30		lda ($30),y			lda 	(codePtr),y
.980d		48		pha				pha
.980e		c8		iny				iny
.980f		b1 30		lda ($30),y			lda 	(codePtr),y
.9811		aa		tax				tax
.9812		68		pla				pla
.9813		20 41 9c	jsr $9c41			jsr 	ConvertInt16 				; convert XA to string
.9816		20 2b 98	jsr $982b			jsr 	PrintStringXA 				; and print it.
.9819						_EHCREnd:
.9819		a9 0d		lda #$0d			lda 	#13 						; new line
.981b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.981e						_EHEnd:
.981e		4c 46 86	jmp $8646			jmp 	WarmStart
>9821		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9829		20 00
.982b						PrintStringXA:
.982b		5a		phy				phy
.982c		86 37		stx $37				stx 	zTemp0+1
.982e		85 36		sta $36				sta 	zTemp0
.9830		a0 00		ldy #$00			ldy 	#0
.9832						_PSXALoop:
.9832		b1 36		lda ($36),y			lda 	(zTemp0),y
.9834		f0 06		beq $983c			beq 	_PSXAExit
.9836		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9839		c8		iny				iny
.983a		80 f6		bra $9832			bra 	_PSXALoop
.983c						_PSXAExit:
.983c		7a		ply				ply
.983d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.983e						UnaryTrue:
.983e		fa		plx				plx
.983f						ReturnTrue:
.983f		a9 01		lda #$01			lda 	#1  						; set to 1
.9841		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.9844		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9846		95 50		sta $50,x			sta 	NSStatus,x
.9848		60		rts				rts
.9849						UnaryFalse:
.9849		fa		plx				plx
.984a						ReturnFalse:
.984a		4c 2c a7	jmp $a72c			jmp 	NSMSetZero 					; set it all to zero
.984d						BinaryCompareEqual:
.984d		fa		plx				plx
.984e		20 89 98	jsr $9889			jsr 	CompareBaseCode
.9851		c9 00		cmp #$00			cmp 	#0
.9853		f0 ea		beq $983f			beq 	ReturnTrue
.9855		80 f3		bra $984a			bra 	ReturnFalse
.9857						BinaryCompareLess:
.9857		fa		plx				plx
.9858		20 89 98	jsr $9889			jsr 	CompareBaseCode
.985b		c9 ff		cmp #$ff			cmp 	#$FF
.985d		f0 e0		beq $983f			beq 	ReturnTrue
.985f		80 e9		bra $984a			bra 	ReturnFalse
.9861						BinaryCompareGreater:
.9861		fa		plx				plx
.9862		20 89 98	jsr $9889			jsr 	CompareBaseCode
.9865		c9 01		cmp #$01			cmp 	#1
.9867		f0 d6		beq $983f			beq 	ReturnTrue
.9869		80 df		bra $984a			bra 	ReturnFalse
.986b						BinaryCompareNotEqual:
.986b		fa		plx				plx
.986c		20 89 98	jsr $9889			jsr 	CompareBaseCode
.986f		c9 00		cmp #$00			cmp 	#0
.9871		d0 cc		bne $983f			bne 	ReturnTrue
.9873		80 d5		bra $984a			bra 	ReturnFalse
.9875						BinaryCompareLessEqual:
.9875		fa		plx				plx
.9876		20 89 98	jsr $9889			jsr 	CompareBaseCode
.9879		c9 01		cmp #$01			cmp 	#1
.987b		d0 c2		bne $983f			bne 	ReturnTrue
.987d		80 cb		bra $984a			bra 	ReturnFalse
.987f						BinaryCompareGreaterEqual:
.987f		fa		plx				plx
.9880		20 89 98	jsr $9889			jsr 	CompareBaseCode
.9883		c9 ff		cmp #$ff			cmp 	#$FF
.9885		d0 b8		bne $983f			bne 	ReturnTrue
.9887		80 c1		bra $984a			bra 	ReturnFalse
.9889						CompareBaseCode:
.9889		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; make both values if references.
.988c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.988e		15 51		ora $51,x			ora 	NSStatus+1,x
.9890		29 10		and #$10			and 	#NSTString
.9892		d0 37		bne $98cb			bne 	_CBCString 					; if so do string code, which will check if both.
.9894		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9896		15 79		ora $79,x			ora 	NSExponent+1,x
.9898		d0 34		bne $98ce			bne 	_CBCFloat
.989a		b5 50		lda $50,x			lda 	NSStatus,x
.989c		15 51		ora $51,x			ora 	NSStatus+1,x
.989e		29 08		and #$08			and 	#NSTFloat
.98a0		d0 2c		bne $98ce			bne 	_CBCFloat
.98a2		20 d1 98	jsr $98d1			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.98a5		e8		inx				inx
.98a6		20 d1 98	jsr $98d1			jsr 	CompareFixMinusZero
.98a9		ca		dex				dex
.98aa		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.98ac		55 51		eor $51,x			eor 	NSStatus+1,x
.98ae		10 0a		bpl $98ba			bpl 	_CDCSameSign
.98b0		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.98b2		30 14		bmi $98c8			bmi 	_CBCLess 					; return $FF
.98b4						_CBCGreater:
.98b4		a9 01		lda #$01			lda 	#1
.98b6		60		rts				rts
.98b7						_CBCEqual:
.98b7		a9 00		lda #$00			lda 	#0
.98b9		60		rts				rts
.98ba						_CDCSameSign:
.98ba		20 e6 9a	jsr $9ae6			jsr 	SubTopTwoStack 				; unsigned subtract
.98bd		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; or the mantissa together
.98c0		f0 f5		beq $98b7			beq 	_CBCEqual 					; -0 == 0
.98c2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.98c4		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.98c6		10 ec		bpl $98b4			bpl 	_CBCGreater
.98c8						_CBCLess:
.98c8		a9 ff		lda #$ff			lda 	#$FF
.98ca		60		rts				rts
.98cb						_CBCString:
.98cb		4c 57 9a	jmp $9a57			jmp 	CompareStrings
.98ce						_CBCFloat:
.98ce		4c a1 9d	jmp $9da1			jmp 	CompareFloat
.98d1						CompareFixMinusZero:
.98d1		20 4e a7	jsr $a74e			jsr 	NSMIsZero
.98d4		d0 02		bne $98d8			bne 	_CFXMZNotZero
.98d6		74 50		stz $50,x			stz 	NSStatus,x
.98d8						_CFXMZNotZero:
.98d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.98d9						StringConcat:
.98d9		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.98db		35 51		and $51,x			and 	NSStatus+1,x
.98dd		29 18		and #$18			and 	#NSBTypeMask
.98df		c9 10		cmp #$10			cmp 	#NSTString
.98e1		d0 50		bne $9933			bne		_SCType
.98e3		64 38		stz $38				stz 	zTemp1 						; counting total length
.98e5		e8		inx				inx
.98e6		20 04 99	jsr $9904			jsr 	_SCSetupZ0 					; setup for second
.98e9		20 0d 99	jsr $990d			jsr 	_SCLengthZ0 				; length for second
.98ec		ca		dex				dex
.98ed		20 04 99	jsr $9904			jsr 	_SCSetupZ0 					; setup for first
.98f0		20 0d 99	jsr $990d			jsr 	_SCLengthZ0 				; length for first
.98f3		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.98f5		20 3b b1	jsr $b13b			jsr 	StringTempAllocate
.98f8		20 24 99	jsr $9924			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.98fb		e8		inx				inx
.98fc		20 04 99	jsr $9904			jsr 	_SCSetupZ0 					; copy second out
.98ff		20 24 99	jsr $9924			jsr 	_SCCopy
.9902		ca		dex				dex
.9903		60		rts				rts
.9904						_SCSetupZ0:
.9904		b5 58		lda $58,x			lda 	NSMantissa0,x
.9906		85 36		sta $36				sta 	zTemp0
.9908		b5 60		lda $60,x			lda 	NSMantissa1,x
.990a		85 37		sta $37				sta 	zTemp0+1
.990c		60		rts				rts
.990d						_SCLengthZ0:
.990d		5a		phy				phy
.990e		a0 00		ldy #$00			ldy 	#0
.9910						_SCLenLoop:
.9910		b1 36		lda ($36),y			lda 	(zTemp0),y
.9912		f0 0e		beq $9922			beq 	_SCLExit
.9914		c8		iny				iny
.9915		e6 38		inc $38				inc 	zTemp1
.9917		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9919		c9 fd		cmp #$fd			cmp 	#253
.991b		d0 f3		bne $9910			bne		_SCLenLoop
.991d		a9 09		lda #$09		lda	#9
.991f		4c d2 97	jmp $97d2		jmp	ErrorHandler
.9922						_SCLExit:
.9922		7a		ply				ply
.9923		60		rts				rts
.9924						_SCCopy:
.9924		5a		phy				phy
.9925		a0 00		ldy #$00			ldy 	#0
.9927						_SCCopyLoop:
.9927		b1 36		lda ($36),y			lda 	(zTemp0),y
.9929		f0 06		beq $9931			beq 	_SCCExit
.992b		20 74 b1	jsr $b174			jsr 	StringTempWrite
.992e		c8		iny				iny
.992f		80 f6		bra $9927			bra 	_SCCopyLoop
.9931						_SCCExit:
.9931		7a		ply				ply
.9932		60		rts				rts
.9933						_SCType:
.9933		4c db a9	jmp $a9db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9936						IntegerDivide:
.9936		fa		plx				plx
.9937		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9939		15 51		ora $51,x			ora 	NSStatus+1,x
.993b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.993c		0a		asl a				asl 	a
.993d		10 05		bpl $9944			bpl 	_NotRef
.993f		48		pha				pha
.9940		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9943		68		pla				pla
.9944						_NotRef:
.9944		0a		asl a				asl 	a
.9945		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9947		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9949		15 79		ora $79,x			ora 	NSExponent+1,x
.994b		f0 03		beq $9950			beq 	_IntegerCode 				; if clear, then we have two integers
.994d		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9950						_IntegerCode:
.9950		20 6a 99	jsr $996a			jsr 	CheckDivideZero 			; do div zero check
.9953		20 9c 99	jsr $999c			jsr 	Int32Divide 				; do the division
.9956		20 4d 9a	jsr $9a4d			jsr 	CalculateSign 				; calculate result sign
.9959						NSMCopyPlusTwoToZero:
.9959		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.995b		95 58		sta $58,x			sta 	NSMantissa0,x
.995d		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.995f		95 60		sta $60,x			sta 	NSMantissa1,x
.9961		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9963		95 68		sta $68,x			sta 	NSMantissa2,x
.9965		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9967		95 70		sta $70,x			sta 	NSMantissa3,x
.9969		60		rts				rts
.996a						CheckDivideZero:
.996a		e8		inx				inx
.996b		20 4e a7	jsr $a74e			jsr 	NSMIsZero
.996e		f0 02		beq $9972			beq 	_CDVError
.9970		ca		dex				dex
.9971		60		rts				rts
.9972						_CDVError:
.9972		a9 03		lda #$03		lda	#3
.9974		4c d2 97	jmp $97d2		jmp	ErrorHandler
.9977						IntegerModulus:
.9977		fa		plx				plx
.9978		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.997a		15 51		ora $51,x			ora 	NSStatus+1,x
.997c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.997d		0a		asl a				asl 	a
.997e		10 05		bpl $9985			bpl 	_NotRef
.9980		48		pha				pha
.9981		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9984		68		pla				pla
.9985						_NotRef:
.9985		0a		asl a				asl 	a
.9986		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9988		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.998a		15 79		ora $79,x			ora 	NSExponent+1,x
.998c		f0 03		beq $9991			beq 	_IntegerCode 				; if clear, then we have two integers
.998e		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9991						_IntegerCode:
.9991						IntegerModulusNoCheck:
.9991		20 6a 99	jsr $996a			jsr 	CheckDivideZero 			; do div zero check
.9994		20 9c 99	jsr $999c			jsr 	Int32Divide 				; do the division
.9997		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9999		56 50		lsr $50,x			lsr 	NSStatus,x
.999b		60		rts				rts
.999c						Int32Divide:
.999c		48		pha				pha 								; save AXY
.999d		5a		phy				phy
.999e		20 0f a7	jsr $a70f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99a1		20 28 a7	jsr $a728			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.99a4		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.99a6						_I32DivideLoop:
.99a6		e8		inx				inx
.99a7		e8		inx				inx
.99a8		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.99ab		ca		dex				dex
.99ac		ca		dex				dex
.99ad		20 3c a7	jsr $a73c			jsr 	NSMRotateLeft
.99b0		20 db 99	jsr $99db			jsr 	DivideCheckSubtract 		; check if subtract possible
.99b3		90 02		bcc $99b7			bcc 	_I32DivideNoCarryIn
.99b5		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.99b7						_I32DivideNoCarryIn:
.99b7		88		dey				dey 								; loop round till division completed.
.99b8		d0 ec		bne $99a6			bne 	_I32DivideLoop
.99ba		7a		ply				ply 								; restore AXY and exit
.99bb		68		pla				pla
.99bc		60		rts				rts
.99bd						Int32ShiftDivide:
.99bd		48		pha				pha 								; save AY
.99be		5a		phy				phy
.99bf		e8		inx				inx 								; clear S[X+2]
.99c0		e8		inx				inx
.99c1		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.99c4		ca		dex				dex
.99c5		ca		dex				dex
.99c6		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.99c8						_I32SDLoop:
.99c8		20 db 99	jsr $99db			jsr 	DivideCheckSubtract 		; check if subtract possible
.99cb		e8		inx				inx
.99cc		e8		inx				inx
.99cd		20 3c a7	jsr $a73c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.99d0		ca		dex				dex
.99d1		ca		dex				dex
.99d2		20 3c a7	jsr $a73c			jsr 	NSMRotateLeft
.99d5		88		dey				dey 	 							; do 31 times
.99d6		d0 f0		bne $99c8			bne 	_I32SDLoop
.99d8		7a		ply				ply 								; restore AY and exit
.99d9		68		pla				pla
.99da		60		rts				rts
.99db						DivideCheckSubtract:
.99db		20 e6 9a	jsr $9ae6			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.99de		b0 04		bcs $99e4			bcs 	_DCSExit 					; if carry set, then could do, exit
.99e0		20 cc 9a	jsr $9acc			jsr 	AddTopTwoStack 				; add it back in
.99e3		18		clc				clc 								; and return False
.99e4						_DCSExit:
.99e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.99e5						MulInteger:
.99e5		fa		plx				plx
.99e6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99e8		15 51		ora $51,x			ora 	NSStatus+1,x
.99ea		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99eb		0a		asl a				asl 	a
.99ec		10 05		bpl $99f3			bpl 	_NotRef
.99ee		48		pha				pha
.99ef		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99f2		68		pla				pla
.99f3						_NotRef:
.99f3		0a		asl a				asl 	a 							; put MSB of type into A:7
.99f4		30 09		bmi $99ff			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99f6		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99f8		15 79		ora $79,x			ora 	NSExponent+1,x
.99fa		f0 06		beq $9a02			beq 	_IntegerCode 				; if clear, then we have two integers
.99fc		4c 63 9e	jmp $9e63			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.99ff						_StringData:
.99ff		4c e5 a9	jmp $a9e5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9a02						_IntegerCode:
.9a02		20 0f 9a	jsr $9a0f			jsr 	MultiplyShort
.9a05		c9 00		cmp #$00			cmp 	#0
.9a07		f0 05		beq $9a0e			beq 	_MIExit
.9a09		a9 04		lda #$04		lda	#4
.9a0b		4c d2 97	jmp $97d2		jmp	ErrorHandler
.9a0e						_MIExit:
.9a0e		60		rts				rts
.9a0f						MultiplyShort:
.9a0f		5a		phy				phy 								; save Y
.9a10		20 0f a7	jsr $a70f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9a13		20 28 a7	jsr $a728			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9a16		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9a18						_I32MLoop:
.9a18		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9a1a		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9a1c		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9a1e		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9a20		f0 25		beq $9a47			beq 	_I32MExit 					; exit if zero
.9a22		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a24		29 01		and #$01			and 	#1
.9a26		f0 0d		beq $9a35			beq 	_I32MNoAdd
.9a28		20 cc 9a	jsr $9acc			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a2b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a2d		10 06		bpl $9a35			bpl 	_I32MNoAdd
.9a2f						_I32ShiftRight:
.9a2f		20 45 a7	jsr $a745			jsr 	NSMShiftRight 				; shift S[X] right
.9a32		c8		iny				iny 								; increment shift count
.9a33		80 09		bra $9a3e			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a35						_I32MNoAdd:
.9a35		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a37		70 f6		bvs $9a2f			bvs 	_I32ShiftRight 				; instead.
.9a39		e8		inx				inx
.9a3a		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a3d		ca		dex				dex
.9a3e						_I32MShiftUpper:
.9a3e		e8		inx				inx 								; shift S[X+2] right
.9a3f		e8		inx				inx
.9a40		20 45 a7	jsr $a745			jsr 	NSMShiftRight
.9a43		ca		dex				dex
.9a44		ca		dex				dex
.9a45		80 d1		bra $9a18			bra 	_I32MLoop 					; try again.
.9a47						_I32MExit:
.9a47		20 4d 9a	jsr $9a4d			jsr 	CalculateSign
.9a4a		98		tya				tya 								; shift in A
.9a4b		7a		ply				ply 								; restore Y and exit
.9a4c		60		rts				rts
.9a4d						CalculateSign:
.9a4d		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a4f		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9a51		55 51		eor $51,x			eor 	NSStatus+1,x
.9a53		0a		asl a				asl 	a 							; shift bit 7 into carry
.9a54		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9a56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a57						CompareStrings:
.9a57		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9a59		35 51		and $51,x			and 	NSStatus+1,x
.9a5b		29 10		and #$10			and 	#NSBIsString
.9a5d		f0 28		beq $9a87			beq 	_CSTypeError
.9a5f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a61		85 36		sta $36				sta 	zTemp0
.9a63		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a65		85 37		sta $37				sta 	zTemp0+1
.9a67		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9a69		85 38		sta $38				sta 	zTemp1
.9a6b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a6d		85 39		sta $39				sta 	zTemp1+1
.9a6f		5a		phy				phy 								; save Y so we can access strings
.9a70		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a72						_CSLoop:
.9a72		c8		iny				iny
.9a73		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a75		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a77		d0 06		bne $9a7f			bne 	_CSDifferent
.9a79		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a7b		d0 f5		bne $9a72			bne 	_CSLoop 					; still comparing
.9a7d						_CSExit:
.9a7d		7a		ply				ply 								; reached end, return zero in A from EOS
.9a7e		60		rts				rts
.9a7f						_CSDifferent:
.9a7f		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a81		90 fa		bcc $9a7d			bcc		_CSExit
.9a83		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a85		80 f6		bra $9a7d			bra 	_CSExit
.9a87						_CSTypeError:
.9a87		4c db a9	jmp $a9db			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a8a						ShiftLeft:
.9a8a		38		sec				sec 								; common code, carry determines which way.
.9a8b		80 01		bra $9a8e			bra 	ShiftMain
.9a8d						ShiftRight:
.9a8d		18		clc				clc
.9a8e						ShiftMain:
.9a8e		fa		plx				plx 								; restore X
.9a8f		08		php				php 								; save direction
.9a90		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a92		15 51		ora $51,x			ora 	NSStatus+1,x
.9a94		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a95		0a		asl a				asl 	a
.9a96		10 05		bpl $9a9d			bpl 	_NotRef
.9a98		48		pha				pha
.9a99		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a9c		68		pla				pla
.9a9d						_NotRef:
.9a9d		0a		asl a				asl 	a
.9a9e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9aa0		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9aa2		15 79		ora $79,x			ora 	NSExponent+1,x
.9aa4		f0 03		beq $9aa9			beq 	_IntegerCode 				; if clear, then we have two integers
.9aa6		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9aa9						_IntegerCode:
.9aa9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9aab		29 e0		and #$e0			and 	#$E0
.9aad		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9aaf		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9ab1		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9ab3		d0 12		bne $9ac7			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9ab5						_SMLoop:
.9ab5		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9ab7		30 11		bmi $9aca			bmi 	_SMExit 					; exit if done.
.9ab9		28		plp				plp 								; restore direction setting
.9aba		08		php				php
.9abb		90 05		bcc $9ac2			bcc 	_SMRight
.9abd		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; shift left if CS
.9ac0		80 f3		bra $9ab5			bra 	_SMLoop
.9ac2						_SMRight:
.9ac2		20 45 a7	jsr $a745			jsr 	NSMShiftRight 				; shift right if CC
.9ac5		80 ee		bra $9ab5			bra 	_SMLoop
.9ac7						_SMExit0:
.9ac7		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; return zero.
.9aca						_SMExit:
.9aca		28		plp				plp 								; throw direction
.9acb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9acc						AddTopTwoStack:
.9acc		18		clc				clc
.9acd		b5 58		lda $58,x			lda		NSMantissa0,x
.9acf		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9ad1		95 58		sta $58,x			sta 	NSMantissa0,x
.9ad3		b5 60		lda $60,x			lda		NSMantissa1,x
.9ad5		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9ad7		95 60		sta $60,x			sta 	NSMantissa1,x
.9ad9		b5 68		lda $68,x			lda		NSMantissa2,x
.9adb		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9add		95 68		sta $68,x			sta 	NSMantissa2,x
.9adf		b5 70		lda $70,x			lda		NSMantissa3,x
.9ae1		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9ae3		95 70		sta $70,x			sta 	NSMantissa3,x
.9ae5		60		rts				rts
.9ae6						SubTopTwoStack:
.9ae6		38		sec				sec
.9ae7		b5 58		lda $58,x			lda		NSMantissa0,x
.9ae9		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9aeb		95 58		sta $58,x			sta 	NSMantissa0,x
.9aed		b5 60		lda $60,x			lda		NSMantissa1,x
.9aef		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9af1		95 60		sta $60,x			sta 	NSMantissa1,x
.9af3		b5 68		lda $68,x			lda		NSMantissa2,x
.9af5		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9af7		95 68		sta $68,x			sta 	NSMantissa2,x
.9af9		b5 70		lda $70,x			lda		NSMantissa3,x
.9afb		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9afd		95 70		sta $70,x			sta 	NSMantissa3,x
.9aff		60		rts				rts
.9b00						AddInteger:
.9b00		fa		plx				plx
.9b01		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b03		15 51		ora $51,x			ora 	NSStatus+1,x
.9b05		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b06		0a		asl a				asl 	a
.9b07		10 05		bpl $9b0e			bpl 	_NotRef
.9b09		48		pha				pha
.9b0a		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b0d		68		pla				pla
.9b0e						_NotRef:
.9b0e		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b0f		30 09		bmi $9b1a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b11		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b13		15 79		ora $79,x			ora 	NSExponent+1,x
.9b15		f0 06		beq $9b1d			beq 	_IntegerCode 				; if clear, then we have two integers
.9b17		4c 13 9d	jmp $9d13			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b1a						_StringData:
.9b1a		4c d9 98	jmp $98d9			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b1d						_IntegerCode:
.9b1d						AddCode:
.9b1d		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b1f		55 51		eor $51,x			eor 	NSStatus+1,x
.9b21		10 a9		bpl $9acc			bpl 	AddTopTwoStack
.9b23		20 e6 9a	jsr $9ae6			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b26		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b28		10 07		bpl $9b31			bpl 	_AddExit
.9b2a		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b2c		95 50		sta $50,x			sta 	NSStatus,x
.9b2e		20 f5 a6	jsr $a6f5			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b31						_AddExit:
.9b31		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; check for -0
.9b34		d0 02		bne $9b38			bne 	_AddNonZero
.9b36		74 50		stz $50,x			stz 	NSStatus,x
.9b38						_AddNonZero:
.9b38		60		rts				rts
.9b39						SubInteger:
.9b39		fa		plx				plx
.9b3a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b3c		15 51		ora $51,x			ora 	NSStatus+1,x
.9b3e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b3f		0a		asl a				asl 	a
.9b40		10 05		bpl $9b47			bpl 	_NotRef
.9b42		48		pha				pha
.9b43		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b46		68		pla				pla
.9b47						_NotRef:
.9b47		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b48		30 09		bmi $9b53			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b4a		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b4c		15 79		ora $79,x			ora 	NSExponent+1,x
.9b4e		f0 06		beq $9b56			beq 	_IntegerCode 				; if clear, then we have two integers
.9b50		4c 18 9d	jmp $9d18			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b53						_StringData:
.9b53		4c e5 a9	jmp $a9e5			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b56						_IntegerCode:
.9b56		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9b58		49 80		eor #$80			eor 	#$80
.9b5a		95 51		sta $51,x			sta 	NSStatus+1,x
.9b5c		80 bf		bra $9b1d			bra 	AddCode 					; and do the same code as add.
.9b5e						AndInteger:
.9b5e		fa		plx				plx
.9b5f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b61		15 51		ora $51,x			ora 	NSStatus+1,x
.9b63		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b64		0a		asl a				asl 	a
.9b65		10 05		bpl $9b6c			bpl 	_NotRef
.9b67		48		pha				pha
.9b68		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b6b		68		pla				pla
.9b6c						_NotRef:
.9b6c		0a		asl a				asl 	a
.9b6d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b6f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b71		15 79		ora $79,x			ora 	NSExponent+1,x
.9b73		f0 03		beq $9b78			beq 	_IntegerCode 				; if clear, then we have two integers
.9b75		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9b78						_IntegerCode:
.9b78		b5 58		lda $58,x			lda		NSMantissa0,x
.9b7a		35 59		and $59,x			and 		NSMantissa0+1,x
.9b7c		95 58		sta $58,x			sta 	NSMantissa0,x
.9b7e		b5 60		lda $60,x			lda		NSMantissa1,x
.9b80		35 61		and $61,x			and 		NSMantissa1+1,x
.9b82		95 60		sta $60,x			sta 	NSMantissa1,x
.9b84		b5 68		lda $68,x			lda		NSMantissa2,x
.9b86		35 69		and $69,x			and 		NSMantissa2+1,x
.9b88		95 68		sta $68,x			sta 	NSMantissa2,x
.9b8a		b5 70		lda $70,x			lda		NSMantissa3,x
.9b8c		35 71		and $71,x			and 		NSMantissa3+1,x
.9b8e		95 70		sta $70,x			sta 	NSMantissa3,x
.9b90		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b92		60		rts				rts
.9b93						OraInteger:
.9b93		fa		plx				plx
.9b94		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b96		15 51		ora $51,x			ora 	NSStatus+1,x
.9b98		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b99		0a		asl a				asl 	a
.9b9a		10 05		bpl $9ba1			bpl 	_NotRef
.9b9c		48		pha				pha
.9b9d		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ba0		68		pla				pla
.9ba1						_NotRef:
.9ba1		0a		asl a				asl 	a
.9ba2		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ba4		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ba6		15 79		ora $79,x			ora 	NSExponent+1,x
.9ba8		f0 03		beq $9bad			beq 	_IntegerCode 				; if clear, then we have two integers
.9baa		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9bad						_IntegerCode:
.9bad		b5 58		lda $58,x			lda		NSMantissa0,x
.9baf		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9bb1		95 58		sta $58,x			sta 	NSMantissa0,x
.9bb3		b5 60		lda $60,x			lda		NSMantissa1,x
.9bb5		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9bb7		95 60		sta $60,x			sta 	NSMantissa1,x
.9bb9		b5 68		lda $68,x			lda		NSMantissa2,x
.9bbb		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9bbd		95 68		sta $68,x			sta 	NSMantissa2,x
.9bbf		b5 70		lda $70,x			lda		NSMantissa3,x
.9bc1		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9bc3		95 70		sta $70,x			sta 	NSMantissa3,x
.9bc5		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9bc7		60		rts				rts
.9bc8						EorInteger:
.9bc8		fa		plx				plx
.9bc9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bcb		15 51		ora $51,x			ora 	NSStatus+1,x
.9bcd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bce		0a		asl a				asl 	a
.9bcf		10 05		bpl $9bd6			bpl 	_NotRef
.9bd1		48		pha				pha
.9bd2		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bd5		68		pla				pla
.9bd6						_NotRef:
.9bd6		0a		asl a				asl 	a
.9bd7		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bd9		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bdb		15 79		ora $79,x			ora 	NSExponent+1,x
.9bdd		f0 03		beq $9be2			beq 	_IntegerCode 				; if clear, then we have two integers
.9bdf		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9be2						_IntegerCode:
.9be2		b5 58		lda $58,x			lda		NSMantissa0,x
.9be4		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9be6		95 58		sta $58,x			sta 	NSMantissa0,x
.9be8		b5 60		lda $60,x			lda		NSMantissa1,x
.9bea		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9bec		95 60		sta $60,x			sta 	NSMantissa1,x
.9bee		b5 68		lda $68,x			lda		NSMantissa2,x
.9bf0		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9bf2		95 68		sta $68,x			sta 	NSMantissa2,x
.9bf4		b5 70		lda $70,x			lda		NSMantissa3,x
.9bf6		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9bf8		95 70		sta $70,x			sta 	NSMantissa3,x
.9bfa		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9bfc		60		rts				rts
.9bfd						WordIndirect:
.9bfd		fa		plx				plx
.9bfe		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c00		15 51		ora $51,x			ora 	NSStatus+1,x
.9c02		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c03		0a		asl a				asl 	a
.9c04		10 05		bpl $9c0b			bpl 	_NotRef
.9c06		48		pha				pha
.9c07		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c0a		68		pla				pla
.9c0b						_NotRef:
.9c0b		0a		asl a				asl 	a
.9c0c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c0e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c10		15 79		ora $79,x			ora 	NSExponent+1,x
.9c12		f0 03		beq $9c17			beq 	_IntegerCode 				; if clear, then we have two integers
.9c14		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9c17						_IntegerCode:
.9c17		20 1d 9b	jsr $9b1d			jsr 	AddCode 					; add the two values
.9c1a		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c1c		95 50		sta $50,x			sta 	NSStatus,x
.9c1e		60		rts				rts
.9c1f						ByteIndirect:
.9c1f		fa		plx				plx
.9c20		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c22		15 51		ora $51,x			ora 	NSStatus+1,x
.9c24		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c25		0a		asl a				asl 	a
.9c26		10 05		bpl $9c2d			bpl 	_NotRef
.9c28		48		pha				pha
.9c29		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c2c		68		pla				pla
.9c2d						_NotRef:
.9c2d		0a		asl a				asl 	a
.9c2e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c30		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c32		15 79		ora $79,x			ora 	NSExponent+1,x
.9c34		f0 03		beq $9c39			beq 	_IntegerCode 				; if clear, then we have two integers
.9c36		4c db a9	jmp $a9db			jmp 	TypeError 					; anything else, type mismatch.
.9c39						_IntegerCode:
.9c39		20 1d 9b	jsr $9b1d			jsr 	AddCode 					; add the two values
.9c3c		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9c3e		95 50		sta $50,x			sta 	NSStatus,x
.9c40		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9c41						ConvertInt16:
.9c41		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9c43		86 60		stx $60				stx 	NSMantissa1
.9c45		64 68		stz $68				stz 	NSMantissa2
.9c47		64 70		stz $70				stz 	NSMantissa3
.9c49		64 50		stz $50				stz 	NSStatus 					; positive integer
.9c4b		a2 00		ldx #$00			ldx 	#0 							; stack level
.9c4d		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9c4f		80 00		bra $9c51			bra 	ConvertInt32
.9c51						ConvertInt32:
.9c51		5a		phy				phy
.9c52		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9c54		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9c56		10 08		bpl $9c60			bpl 	_CI32NotNeg
.9c58		48		pha				pha
.9c59		a9 2d		lda #$2d			lda 	#'-'
.9c5b		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c5e		c8		iny				iny
.9c5f		68		pla				pla
.9c60						_CI32NotNeg:
.9c60		20 6e 9c	jsr $9c6e			jsr 	_CI32DivideConvert 			; recursive conversion
.9c63		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9c65		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c68		7a		ply				ply
.9c69		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9c6b		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9c6d		60		rts				rts
.9c6e						_CI32DivideConvert:
.9c6e		e8		inx				inx 								; write to next slot up
.9c6f		20 2e a7	jsr $a72e			jsr 	NSMSetByte 		 			; write the base out.
.9c72		ca		dex				dex
.9c73		20 9c 99	jsr $999c			jsr 	Int32Divide 				; divide
.9c76		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9c78		48		pha				pha
.9c79		20 59 99	jsr $9959			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9c7c		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; is it zero ?
.9c7f		f0 05		beq $9c86			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9c81		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9c83		20 6e 9c	jsr $9c6e			jsr 	_CI32DivideConvert 			; and recusrively call.
.9c86						_CI32NoRecurse:
.9c86		68		pla				pla 								; remainder
.9c87		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9c89		90 02		bcc $9c8d			bcc 	_CI32NotHex
.9c8b		69 26		adc #$26			adc 	#6+32
.9c8d						_CI32NotHex:
.9c8d		69 30		adc #$30			adc 	#48
.9c8f		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9c92		c8		iny				iny
.9c93		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9c94						PrecedenceLevel:
>9c94		04					.byte	 4	; $00 <<
>9c95		02					.byte	 2	; $01 <=
>9c96		02					.byte	 2	; $02 <>
>9c97		00					.byte	 0	; $03 !!3
>9c98		00					.byte	 0	; $04 ><
>9c99		02					.byte	 2	; $05 >=
>9c9a		04					.byte	 4	; $06 >>
>9c9b		00					.byte	 0	; $07 !!7
>9c9c		00					.byte	 0	; $08 !!8
>9c9d		00					.byte	 0	; $09 !!9
>9c9e		00					.byte	 0	; $0a !!10
>9c9f		00					.byte	 0	; $0b !!11
>9ca0		00					.byte	 0	; $0c !!12
>9ca1		00					.byte	 0	; $0d !!13
>9ca2		00					.byte	 0	; $0e !!14
>9ca3		00					.byte	 0	; $0f !!15
>9ca4		00					.byte	 0	; $10 @
>9ca5		00					.byte	 0	; $11 !!17
>9ca6		00					.byte	 0	; $12 !!18
>9ca7		00					.byte	 0	; $13 [
>9ca8		04					.byte	 4	; $14 \
>9ca9		00					.byte	 0	; $15 ]
>9caa		01					.byte	 1	; $16 ^
>9cab		00					.byte	 0	; $17 _
>9cac		00					.byte	 0	; $18 `
>9cad		00					.byte	 0	; $19 !!25
>9cae		00					.byte	 0	; $1a !!26
>9caf		00					.byte	 0	; $1b {
>9cb0		01					.byte	 1	; $1c |
>9cb1		00					.byte	 0	; $1d }
>9cb2		00					.byte	 0	; $1e ~
>9cb3		00					.byte	 0	; $1f <7F>
>9cb4		00					.byte	 0	; $20
>9cb5		05					.byte	 5	; $21 !
>9cb6		00					.byte	 0	; $22 "
>9cb7		00					.byte	 0	; $23 #
>9cb8		05					.byte	 5	; $24 $
>9cb9		04					.byte	 4	; $25 %
>9cba		01					.byte	 1	; $26 &
>9cbb		00					.byte	 0	; $27 '
>9cbc		00					.byte	 0	; $28 (
>9cbd		00					.byte	 0	; $29 )
>9cbe		04					.byte	 4	; $2a *
>9cbf		03					.byte	 3	; $2b +
>9cc0		00					.byte	 0	; $2c ,
>9cc1		03					.byte	 3	; $2d -
>9cc2		00					.byte	 0	; $2e .
>9cc3		04					.byte	 4	; $2f /
>9cc4		00					.byte	 0	; $30 0
>9cc5		00					.byte	 0	; $31 1
>9cc6		00					.byte	 0	; $32 2
>9cc7		00					.byte	 0	; $33 3
>9cc8		00					.byte	 0	; $34 4
>9cc9		00					.byte	 0	; $35 5
>9cca		00					.byte	 0	; $36 6
>9ccb		00					.byte	 0	; $37 7
>9ccc		00					.byte	 0	; $38 8
>9ccd		00					.byte	 0	; $39 9
>9cce		00					.byte	 0	; $3a :
>9ccf		00					.byte	 0	; $3b ;
>9cd0		02					.byte	 2	; $3c <
>9cd1		02					.byte	 2	; $3d =
>9cd2		02					.byte	 2	; $3e >
>9cd3		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9cd4						EvaluateExpressionAt0:
.9cd4		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9cd6						EvaluateExpression:
.9cd6		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9cd8						EvaluateExpressionAtPrecedence:
.9cd8		48		pha				pha 								; save precedence level
.9cd9		20 20 a1	jsr $a120			jsr 	EvaluateTerm 				; evaluate term into level X.
.9cdc		68		pla				pla 								; restore precedence level.
.9cdd						_EXPRLoop:
.9cdd		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9cdf		b1 30		lda ($30),y			lda 	(codePtr),y
.9ce1		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ce3		b0 25		bcs $9d0a			bcs 	_EXPRExit
.9ce5		da		phx				phx 								; read the operator precedence
.9ce6		aa		tax				tax
.9ce7		bd 94 9c	lda $9c94,x			lda 	PrecedenceLevel,x
.9cea		fa		plx				plx
.9ceb		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9ced		f0 1b		beq $9d0a			beq 	_EXPRExit
.9cef		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9cf1		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9cf3		c5 37		cmp $37				cmp 	zTemp0+1
.9cf5		b0 13		bcs $9d0a			bcs		_EXPRExit 					; if current >= operator exit
.9cf7		48		pha				pha 								; save current precedence.
.9cf8		b1 30		lda ($30),y			lda 	(codePtr),y
.9cfa		c8		iny				iny
.9cfb		48		pha				pha
.9cfc		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9cfe		e8		inx				inx 								; work out the right hand side.
.9cff		20 d8 9c	jsr $9cd8			jsr 	EvaluateExpressionAtPrecedence
.9d02		ca		dex				dex
.9d03		68		pla				pla 								; get operator, call the code.
.9d04		20 0d 9d	jsr $9d0d			jsr 	_EXPRCaller
.9d07		68		pla				pla 								; restore precedence level
.9d08		80 d3		bra $9cdd			bra 	_EXPRLoop 					; and go round.
.9d0a						_EXPRExit:
.9d0a		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d0c		60		rts				rts
.9d0d						_EXPRCaller:
.9d0d		da		phx				phx 								; save on stack, first thing is to restore it
.9d0e		0a		asl a				asl 	a 							; double so can use vectors into X
.9d0f		aa		tax				tax
.9d10		7c 22 94	jmp ($9422,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9d13						FloatingPointAdd:
.9d13		20 89 9e	jsr $9e89			jsr 	FloatPrepare 				; prepare for floats
.9d16		80 09		bra $9d21			bra 	FloatAdd
.9d18						FloatingPointSub:
.9d18		20 89 9e	jsr $9e89			jsr 	FloatPrepare 				; prepare for floats
.9d1b						FloatSubtract:
.9d1b		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9d1d		49 80		eor #$80			eor 	#$80
.9d1f		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9d21						FloatAdd:
.9d21		48		pha				pha
.9d22		5a		phy				phy
.9d23		20 98 9e	jsr $9e98			jsr 	NSNormalise 				; normalise S[X]
.9d26		f0 51		beq $9d79			beq 	_FAReturn1
.9d28		e8		inx				inx 								; normalise S[X+1]
.9d29		20 98 9e	jsr $9e98			jsr 	NSNormalise
.9d2c		ca		dex				dex
.9d2d		c9 00		cmp #$00			cmp 	#0
.9d2f		f0 60		beq $9d91			beq 	_FAExit 					; if so, just return A
.9d31		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9d33		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9d35		f0 18		beq $9d4f			beq 	_FAExponentsEqual
.9d37		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9d39		a8		tay				tay
.9d3a		38		sec				sec 								; do a signed comparison of the exponents.
.9d3b		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d3d		50 02		bvc $9d41			bvc 	_FANoSignedChange
.9d3f		49 80		eor #$80			eor 	#$80
.9d41						_FANoSignedChange:
.9d41		29 80		and #$80			and 	#$80
.9d43		10 02		bpl $9d47			bpl 	_FAHaveMax
.9d45		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9d47						_FAHaveMax:
.9d47		20 94 9d	jsr $9d94			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9d4a		e8		inx				inx
.9d4b		20 94 9d	jsr $9d94			jsr 	_FAShiftToExponent
.9d4e		ca		dex				dex
.9d4f						_FAExponentsEqual:
.9d4f		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9d51		55 51		eor $51,x			eor 	NSStatus+1,x
.9d53		30 0e		bmi $9d63			bmi 	_FADifferentSigns
.9d55		20 cc 9a	jsr $9acc			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9d58		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9d5a		10 35		bpl $9d91			bpl 	_FAExit 					; if no, we are done.
.9d5c		20 45 a7	jsr $a745			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9d5f		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9d61		80 2e		bra $9d91			bra 	_FAExit
.9d63						_FADifferentSigns:
.9d63		20 e6 9a	jsr $9ae6			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9d66		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9d68		10 06		bpl $9d70			bpl 	_FACheckZero 				; if no, check for -0
.9d6a		20 ee a6	jsr $a6ee			jsr 	NSMNegate 					; netate result
.9d6d		20 f5 a6	jsr $a6f5			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9d70						_FACheckZero:
.9d70		20 4e a7	jsr $a74e			jsr 	NSMIsZero	 				; check for -0
.9d73		d0 1c		bne $9d91			bne 	_FAExit
.9d75		74 50		stz $50,x			stz 	NSStatus,x
.9d77		80 18		bra $9d91			bra 	_FAExit
.9d79						_FAReturn1:
.9d79		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9d7b		95 58		sta $58,x			sta 	NSMantissa0,x
.9d7d		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d7f		95 60		sta $60,x			sta 	NSMantissa1,x
.9d81		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d83		95 68		sta $68,x			sta 	NSMantissa2,x
.9d85		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d87		95 70		sta $70,x			sta 	NSMantissa3,x
.9d89		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d8b		95 78		sta $78,x			sta 	NSExponent,x
.9d8d		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d8f		95 50		sta $50,x			sta 	NSStatus,x
.9d91						_FAExit:
.9d91		7a		ply				ply
.9d92		68		pla				pla
.9d93		60		rts				rts
.9d94						_FAShiftToExponent:
.9d94						_FAShiftToExponent2:
.9d94		98		tya				tya 								; compare Y to exponent
.9d95		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9d97		f0 07		beq $9da0			beq 	_FASEExit 					; exit if so.
.9d99		20 45 a7	jsr $a745			jsr 	NSMShiftRight	 			; shift the mantissa right
.9d9c		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9d9e		80 f4		bra $9d94			bra 	_FAShiftToExponent2
.9da0						_FASEExit:
.9da0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9da1						CompareFloat:
.9da1		20 1b 9d	jsr $9d1b			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9da4		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9da6		29 f8		and #$f8			and 	#$F8
.9da8		15 68		ora $68,x			ora 	NSMantissa2,x
.9daa		15 70		ora $70,x			ora 	NSMantissa3,x
.9dac		f0 08		beq $9db6			beq 	_FCExit 					; zero, so approximately identical
.9dae		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9db0		34 50		bit $50,x			bit 	NSStatus,x
.9db2		10 02		bpl $9db6			bpl 	_FCExit
.9db4						_FCNegative:
.9db4		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9db6						_FCExit:
.9db6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9db7						FDivideCommand:
.9db7		fa		plx				plx	 								; restore stack position
.9db8		20 89 9e	jsr $9e89			jsr 	FloatPrepare 				; prepare for floats
.9dbb						FloatDivide:
.9dbb		48		pha				pha
.9dbc		e8		inx				inx
.9dbd		20 98 9e	jsr $9e98			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9dc0		ca		dex				dex
.9dc1		c9 00		cmp #$00			cmp 	#0
.9dc3		f0 1d		beq $9de2			beq 	_FDZero
.9dc5		20 98 9e	jsr $9e98			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9dc8		f0 16		beq $9de0			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9dca		20 bd 99	jsr $99bd			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9dcd		20 59 99	jsr $9959			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9dd0		20 98 9e	jsr $9e98			jsr		NSNormalise 				; renormalise
.9dd3		20 4d 9a	jsr $9a4d			jsr 	CalculateSign 				; calculate result sign
.9dd6		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9dd8		38		sec				sec
.9dd9		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9ddb		38		sec				sec
.9ddc		e9 1e		sbc #$1e			sbc 	#30
.9dde		95 78		sta $78,x			sta 	NSExponent,x
.9de0						_FDExit:
.9de0		68		pla				pla
.9de1		60		rts				rts
.9de2						_FDZero:
.9de2		a9 03		lda #$03		lda	#3
.9de4		4c d2 97	jmp $97d2		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9de7						FloatFractionalPart:
.9de7		5a		phy				phy
.9de8		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9dea		29 7f		and #$7f			and 	#$7F
.9dec		95 50		sta $50,x			sta 	NSStatus,x
.9dee		20 98 9e	jsr $9e98			jsr 	NSNormalise
.9df1		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9df3		38		sec				sec
.9df4		e9 e0		sbc #$e0			sbc 	#$E0
.9df6		90 29		bcc $9e21			bcc 	_FFPExit 					; already fractional
.9df8		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9dfa		b0 22		bcs $9e1e			bcs 	_FFPZero
.9dfc		a8		tay				tay 								; put count to do in Y
.9dfd		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9dff		20 23 9e	jsr $9e23			jsr 	_FFPPartial
.9e02		95 70		sta $70,x			sta 	NSMantissa3,x
.9e04		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e06		20 23 9e	jsr $9e23			jsr 	_FFPPartial
.9e09		95 68		sta $68,x			sta 	NSMantissa2,x
.9e0b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e0d		20 23 9e	jsr $9e23			jsr 	_FFPPartial
.9e10		95 60		sta $60,x			sta 	NSMantissa1,x
.9e12		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e14		20 23 9e	jsr $9e23			jsr 	_FFPPartial
.9e17		95 58		sta $58,x			sta 	NSMantissa0,x
.9e19		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; zeroed check.
.9e1c		d0 03		bne $9e21			bne 	_FFPExit
.9e1e						_FFPZero:
.9e1e		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.9e21						_FFPExit:
.9e21		7a		ply				ply
.9e22		60		rts				rts
.9e23						_FFPPartial:
.9e23		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9e25		f0 17		beq $9e3e			beq 	_FFFPPExit
.9e27		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9e29		b0 0c		bcs $9e37			bcs 	_FFFPPWholeByte
.9e2b		5a		phy				phy
.9e2c						_FFFPPLeft:
.9e2c		0a		asl a				asl 	a
.9e2d		88		dey				dey
.9e2e		d0 fc		bne $9e2c			bne 	_FFFPPLeft
.9e30		7a		ply				ply
.9e31						_FFFPPRight:
.9e31		4a		lsr a				lsr 	a
.9e32		88		dey				dey
.9e33		d0 fc		bne $9e31			bne 	_FFFPPRight
.9e35		80 07		bra $9e3e			bra 	_FFFPPExit
.9e37						_FFFPPWholeByte:
.9e37		98		tya				tya 								; subtract 8 from count
.9e38		38		sec				sec
.9e39		e9 08		sbc #$08			sbc 	#8
.9e3b		a8		tay				tay
.9e3c		a9 00		lda #$00			lda 	#0 							; and clear all
.9e3e						_FFFPPExit:
.9e3e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9e3f						FloatIntegerPart:
.9e3f		48		pha				pha
.9e40		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9e42		f0 1d		beq $9e61			beq 	_FIPExit 					; if so do nothing
.9e44		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; is it zero ?
.9e47		f0 15		beq $9e5e			beq 	_FIPZero 					; if so return zero.
.9e49		20 98 9e	jsr $9e98			jsr 	NSNormalise 				; normalise
.9e4c		f0 10		beq $9e5e			beq 	_FIPZero 					; normalised to zero, exit zero
.9e4e						_FIPShift:
.9e4e		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9e50		10 07		bpl $9e59			bpl 	_FIPCheckZero
.9e52		20 45 a7	jsr $a745			jsr 	NSMShiftRight 				; shift mantissa right
.9e55		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9e57		80 f5		bra $9e4e			bra 	_FIPShift
.9e59						_FIPCheckZero:
.9e59		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; avoid -0 problem
.9e5c		d0 03		bne $9e61			bne 	_FIPExit 					; set to zero if mantissa zero.
.9e5e						_FIPZero:
.9e5e		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.9e61						_FIPExit:
.9e61		68		pla				pla
.9e62		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9e63						FloatingPointMultiply:
.9e63		20 89 9e	jsr $9e89			jsr 	FloatPrepare 				; prepare for floats
.9e66						FloatMultiply:
.9e66		48		pha				pha
.9e67		20 98 9e	jsr $9e98			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9e6a		f0 18		beq $9e84			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9e6c		e8		inx				inx
.9e6d		20 98 9e	jsr $9e98			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9e70		ca		dex				dex
.9e71		c9 00		cmp #$00			cmp 	#0
.9e73		f0 0c		beq $9e81			beq 	_FDSetZero
.9e75		20 0f 9a	jsr $9a0f			jsr 	MultiplyShort 				; calculate the result.
.9e78		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9e7a		18		clc				clc
.9e7b		75 79		adc $79,x			adc 	NSExponent+1,x
.9e7d		95 78		sta $78,x			sta 	NSExponent,x
.9e7f		80 03		bra $9e84			bra 	_FDExit
.9e81						_FDSetZero:
.9e81		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; return 0
.9e84						_FDExit:
.9e84		20 98 9e	jsr $9e98			jsr 	NSNormalise 				; normalise the result
.9e87		68		pla				pla
.9e88		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9e89						FloatPrepare:
.9e89		20 94 9f	jsr $9f94			jsr 	DereferenceTopTwo 			; dereference the top two values
.9e8c		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9e8e		15 51		ora $51,x			ora 	NSStatus+1,x
.9e90		29 10		and #$10			and 	#NSBIsString
.9e92		d0 01		bne $9e95			bne 	_FDType
.9e94		60		rts				rts
.9e95						_FDType:
.9e95		4c db a9	jmp $a9db			jmp 	TypeError
.9e98						NSNormalise:
.9e98		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9e9a		29 80		and #$80			and 	#$80
.9e9c		09 08		ora #$08			ora 	#NSTFloat
.9e9e		95 50		sta $50,x			sta 	NSStatus,x
.9ea0		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; if zero exit
.9ea3		d0 07		bne $9eac			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9ea5		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9ea7		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9ea9		a9 00		lda #$00			lda 	#0 							; set Z flag
.9eab		60		rts				rts
.9eac						_NSNormaliseOptimise:
.9eac		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9eae		d0 19		bne $9ec9			bne 	_NSNormaliseLoop
.9eb0		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9eb2		30 15		bmi $9ec9			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9eb4		95 70		sta $70,x			sta 	NSMantissa3,x
.9eb6		b5 60		lda $60,x			lda 	NSMantissa1,x
.9eb8		95 68		sta $68,x			sta 	NSMantissa2,x
.9eba		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ebc		95 60		sta $60,x			sta 	NSMantissa1,x
.9ebe		74 58		stz $58,x			stz 	NSMantissa0,x
.9ec0		b5 78		lda $78,x			lda 	NSExponent,x
.9ec2		38		sec				sec
.9ec3		e9 08		sbc #$08			sbc 	#8
.9ec5		95 78		sta $78,x			sta 	NSExponent,x
.9ec7		80 e3		bra $9eac			bra 	_NSNormaliseOptimise
.9ec9						_NSNormaliseLoop:
.9ec9		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9ecb		70 07		bvs $9ed4			bvs 	_NSNExit 					; exit if so with Z flag clear
.9ecd		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; shift mantissa left
.9ed0		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9ed2		80 f5		bra $9ec9			bra 	_NSNormaliseLoop
.9ed4						_NSNExit:
.9ed4		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9ed6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ed7						AssignNumber:
.9ed7		5a		phy				phy
.9ed8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9eda		85 36		sta $36				sta 	zTemp0
.9edc		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ede		85 37		sta $37				sta 	zTemp0+1
.9ee0		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9ee2		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ee4		95 50		sta $50,x			sta 	NSStatus,x
.9ee6		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ee8		c9 08		cmp #$08			cmp 	#NSTFloat
.9eea		f0 24		beq $9f10			beq 	_ANFloat
.9eec		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9eee		f0 03		beq $9ef3			beq		_ANNotFloat
.9ef0		4c d6 a9	jmp $a9d6			jmp 	RangeError					; if it is, report an error.
.9ef3						_ANNotFloat:
.9ef3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ef5		29 03		and #$03			and 	#3
.9ef7		d0 05		bne $9efe			bne 	_ANByteWord
.9ef9		20 1b 9f	jsr $9f1b			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9efc		80 1b		bra $9f19			bra 	_ANExit
.9efe						_ANByteWord:
.9efe		48		pha				pha 								; save count
.9eff		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9f01		92 36		sta ($36)			sta 	(zTemp0)
.9f03		68		pla				pla
.9f04		c9 01		cmp #$01			cmp	 	#1
.9f06		f0 11		beq $9f19			beq 	_ANExit
.9f08		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9f0a		a0 01		ldy #$01			ldy 	#1
.9f0c		91 36		sta ($36),y			sta 	(zTemp0),y
.9f0e		80 09		bra $9f19			bra 	_ANExit
.9f10						_ANFloat:
.9f10		20 1b 9f	jsr $9f1b			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f13		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f15		a0 04		ldy #$04			ldy 	#4
.9f17		91 36		sta ($36),y			sta 	(zTemp0),y
.9f19						_ANExit:
.9f19		7a		ply				ply
.9f1a		60		rts				rts
.9f1b						_ANCopy4PackSign:
.9f1b		a0 03		ldy #$03			ldy 	#3
.9f1d		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9f1f		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f21		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9f23		91 36		sta ($36),y			sta 	(zTemp0),y
.9f25		88		dey				dey
.9f26		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f28		91 36		sta ($36),y			sta 	(zTemp0),y
.9f2a		88		dey				dey
.9f2b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f2d		91 36		sta ($36),y			sta 	(zTemp0),y
.9f2f		88		dey				dey
.9f30		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f32		91 36		sta ($36),y			sta 	(zTemp0),y
.9f34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f35						AssignString:
.9f35		5a		phy				phy
.9f36		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f38		85 38		sta $38				sta 	zTemp1
.9f3a		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f3c		85 39		sta $39				sta 	zTemp1+1
.9f3e		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f40		85 36		sta $36				sta 	zTemp0
.9f42		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f44		85 37		sta $37				sta 	zTemp0+1
.9f46		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f48		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f4a		f0 23		beq $9f6f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f4c		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f4d		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f4f		e9 02		sbc #$02			sbc 	#2
.9f51		85 3c		sta $3c				sta 	zsTemp
.9f53		a0 01		ldy #$01			ldy 	#1
.9f55		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f57		e9 00		sbc #$00			sbc 	#0
.9f59		85 3d		sta $3d				sta 	zsTemp+1
.9f5b		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9f5d						_ASGetLength:
.9f5d		c8		iny				iny
.9f5e		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f60		d0 fb		bne $9f5d			bne 	_ASGetLength
.9f62		98		tya				tya 								; is this length <= current length
.9f63		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9f65		90 1e		bcc $9f85			bcc 	_ASCopyString
.9f67		f0 1c		beq $9f85			beq 	_ASCopyString
.9f69		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9f6b		a0 01		ldy #$01			ldy 	#1
.9f6d		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f6f						_ASNewStringRequired:
.9f6f		e8		inx				inx 								; concrete the new string.
.9f70		20 be b0	jsr $b0be			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9f73		ca		dex				dex
.9f74		18		clc				clc
.9f75		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9f77		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9f79		92 36		sta ($36)			sta 	(zTemp0)
.9f7b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f7d		69 00		adc #$00			adc 	#0
.9f7f		a0 01		ldy #$01			ldy 	#1
.9f81		91 36		sta ($36),y			sta 	(zTemp0),y
.9f83		80 0d		bra $9f92			bra 	_ASExit
.9f85						_ASCopyString:
.9f85		a0 00		ldy #$00			ldy 	#0
.9f87						_ASCopyLoop:
.9f87		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f89		c8		iny				iny
.9f8a		c8		iny				iny
.9f8b		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f8d		88		dey				dey
.9f8e		c9 00		cmp #$00			cmp 	#0
.9f90		d0 f5		bne $9f87			bne 	_ASCopyLoop
.9f92						_ASExit:
.9f92		7a		ply				ply
.9f93		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9f94						DereferenceTopTwo:
.9f94		e8		inx				inx
.9f95		20 99 9f	jsr $9f99			jsr 	Dereference 				; deref x+1
.9f98		ca		dex				dex  								; falls through to deref x
.9f99						Dereference:
.9f99		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9f9b		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9f9d		f0 48		beq $9fe7			beq 	_DRFExit 					; not a reference, so exit.
.9f9f		5a		phy				phy
.9fa0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9fa2		85 36		sta $36				sta 	zTemp0
.9fa4		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fa6		85 37		sta $37				sta 	zTemp0+1
.9fa8		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9faa		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9fac		95 58		sta $58,x			sta 	NSMantissa0,x
.9fae		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9fb0		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9fb2		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9fb4		f0 0e		beq $9fc4			beq 	_DRFDereferenceTwo
.9fb6		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9fb8		f0 2f		beq $9fe9			beq 	_DRFFull
.9fba		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9fbc		29 03		and #$03			and 	#3
.9fbe		f0 29		beq $9fe9			beq 	_DRFFull 					; the whole word
.9fc0		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9fc2		f0 06		beq $9fca			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9fc4						_DRFDereferenceTwo:
.9fc4		a0 01		ldy #$01			ldy 	#1
.9fc6		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fc8		95 60		sta $60,x			sta 	NSMantissa1,x
.9fca						_DRFClear23:
.9fca		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9fcc		74 70		stz $70,x			stz 	NSMantissa3,x
.9fce		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9fd0		29 18		and #$18			and 	#NSBTypeMask
.9fd2		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9fd4		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9fd6		d0 0e		bne $9fe6			bne 	_DRFNotString
.9fd8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9fda		15 60		ora $60,x			ora 	NSMantissa1,x
.9fdc		d0 08		bne $9fe6			bne 	_DRFNotString
.9fde		a9 e8		lda #$e8			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9fe0		95 58		sta $58,x			sta 	NSMantissa0,x
.9fe2		a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9fe4		95 60		sta $60,x			sta 	NSMantissa1,x
.9fe6						_DRFNotString
.9fe6		7a		ply				ply 								; restore Y and exit
.9fe7						_DRFExit:
.9fe7		60		rts				rts
.9fe8						_DRFNullString:
>9fe8		00						.byte 	0
.9fe9						_DRFFull:
.9fe9		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9feb		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fed		95 60		sta $60,x			sta 	NSMantissa1,x
.9fef		c8		iny				iny
.9ff0		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ff2		95 68		sta $68,x			sta 	NSMantissa2,x
.9ff4		c8		iny				iny
.9ff5		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ff7		95 70		sta $70,x			sta 	NSMantissa3,x
.9ff9		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9ffb		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9ffd		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9fff		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.a001		f0 05		beq $a008			beq 	_DRFNoExponent
.a003		c8		iny				iny 								; if not, read the exponent as well.
.a004		b1 36		lda ($36),y			lda 	(zTemp0),y
.a006		95 78		sta $78,x			sta 	NSExponent,x
.a008						_DRFNoExponent:
.a008		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a00a		10 0a		bpl $a016			bpl 	_DRFExit2 					; if not, then exit.
.a00c		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a00e		95 70		sta $70,x			sta 	NSMantissa3,x
.a010		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.a012		09 80		ora #$80			ora 	#NSBIsNegative
.a014		95 50		sta $50,x			sta 	NSStatus,x
.a016						_DRFExit2:
.a016		7a		ply				ply
.a017		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.a018						EncodeNumberStart:
.a018		38		sec				sec
.a019		80 01		bra $a01c			bra 	EncodeNumberContinue+1
.a01b						EncodeNumberContinue:
.a01b		18		clc				clc
.a01c						EncodeNumber:
.a01c		08		php				php 								; save reset flag.
.a01d		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a01f		f0 12		beq $a033			beq 	_ENIsOkay
.a021		c9 30		cmp #$30			cmp 	#"0"
.a023		90 04		bcc $a029			bcc 	_ENBadNumber
.a025		c9 3a		cmp #$3a			cmp 	#"9"+1
.a027		90 0a		bcc $a033			bcc 	_ENIsOkay
.a029						_ENBadNumber:
.a029		28		plp				plp 								; throw saved reset
.a02a		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.a02d		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a02f		f0 7b		beq $a0ac			beq 	_ENConstructFinal
.a031						_ENFail:
.a031		18		clc				clc 								; not allowed
.a032		60		rts				rts
.a033						_ENIsOkay:
.a033		28		plp				plp 								; are we restarting
.a034		90 15		bcc $a04b			bcc 	_ENNoRestart
.a036						_ENStartEncode:
.a036		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.a038		f0 0c		beq $a046			beq 	_ENFirstDP
.a03a		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a03c		20 2e a7	jsr $a72e			jsr 	NSMSetByte 					; in single byte mode.
.a03f		a9 01		lda #$01			lda 	#ESTA_Low
.a041						_ENExitChange:
.a041		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a044		38		sec				sec
.a045		60		rts				rts
.a046						_ENFirstDP:
.a046		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; clear integer part
.a049		80 3c		bra $a087			bra 	_ESTASwitchFloat			; go straight to float and exi
.a04b						_ENNoRestart:
.a04b		48		pha				pha 								; save digit or DP on stack.
.a04c		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a04f		c9 01		cmp #$01			cmp 	#ESTA_Low
.a051		f0 09		beq $a05c			beq  	_ESTALowState
.a053		c9 02		cmp #$02			cmp 	#ESTA_High
.a055		f0 26		beq $a07d			beq 	_ESTAHighState
.a057		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a059		f0 38		beq $a093			beq 	_ESTADecimalState
>a05b		db						.byte 	$DB 						; causes a break in the emulator
.a05c						_ESTALowState:
.a05c		68		pla				pla 								; get value back
.a05d		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a05f		f0 26		beq $a087			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a061		29 0f		and #$0f			and 	#15 						; make digit
.a063		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a066		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a068		0a		asl a				asl 	a
.a069		0a		asl a				asl 	a
.a06a		75 58		adc $58,x			adc 	NSMantissa0,x
.a06c		0a		asl a				asl 	a
.a06d		6d 06 04	adc $0406			adc 	digitTemp
.a070		95 58		sta $58,x			sta 	NSMantissa0,x
.a072		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a074		90 05		bcc $a07b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a076		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a078		8d 05 04	sta $0405			sta 	encodeState
.a07b						_ESTANoSwitch:
.a07b		38		sec				sec
.a07c		60		rts				rts
.a07d						_ESTAHighState:
.a07d		68		pla				pla 								; get value back
.a07e		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a080		f0 05		beq $a087			beq 	_ESTASwitchFloat
.a082		20 e0 a0	jsr $a0e0			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a085		38		sec				sec
.a086		60		rts				rts
.a087						_ESTASwitchFloat:
.a087		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a08a		e8		inx				inx 								; zero the decimal additive.
.a08b		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.a08e		ca		dex				dex
.a08f		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a091		80 ae		bra $a041			bra 	_ENExitChange
.a093						_ESTADecimalState:
.a093		68		pla				pla 								; digit.
.a094		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a096		f0 99		beq $a031			beq 	_ENFail
.a098		e8		inx				inx 								; put digit into fractional part of X+1
.a099		20 e0 a0	jsr $a0e0			jsr 	ESTAShiftDigitIntoMantissa
.a09c		ca		dex				dex
.a09d		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a0a0		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a0a3		c9 0b		cmp #$0b			cmp 	#11
.a0a5		f0 02		beq $a0a9			beq 	_ESTADSFail
.a0a7		38		sec				sec
.a0a8		60		rts				rts
.a0a9						_ESTADSFail:
.a0a9		4c d6 a9	jmp $a9d6			jmp 	RangeError
.a0ac						_ENConstructFinal:
.a0ac		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a0af		f0 2d		beq $a0de			beq 	_ENCFExit 					; no decimals
.a0b1		5a		phy				phy
.a0b2		0a		asl a				asl 	a 							; x 4 and CLC
.a0b3		0a		asl a				asl 	a
.a0b4		6d 07 04	adc $0407			adc 	decimalCount
.a0b7		a8		tay				tay
.a0b8		b9 95 a9	lda $a995,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a0bb		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a0bd		b9 96 a9	lda $a996,y			lda 	DecimalScalarTable-5+1,y
.a0c0		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a0c2		b9 97 a9	lda $a997,y			lda 	DecimalScalarTable-5+2,y
.a0c5		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a0c7		b9 98 a9	lda $a998,y			lda 	DecimalScalarTable-5+3,y
.a0ca		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a0cc		b9 99 a9	lda $a999,y			lda 	DecimalScalarTable-5+4,y
.a0cf		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a0d1		a9 08		lda #$08			lda 	#NSTFloat
.a0d3		95 52		sta $52,x			sta 	NSStatus+2,x
.a0d5		7a		ply				ply
.a0d6		e8		inx				inx 								; multiply decimal const by decimal scalar
.a0d7		20 66 9e	jsr $9e66			jsr 	FloatMultiply
.a0da		ca		dex				dex
.a0db		20 21 9d	jsr $9d21			jsr 	FloatAdd 					; add to integer part.
.a0de						_ENCFExit:
.a0de		18		clc				clc 								; reject the digit.
.a0df		60		rts				rts
.a0e0						ESTAShiftDigitIntoMantissa:
.a0e0		29 0f		and #$0f			and 	#15 						; save digit
.a0e2		48		pha				pha
.a0e3		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a0e5		48		pha				pha
.a0e6		b5 68		lda $68,x			lda 	NSMantissa2,x
.a0e8		48		pha				pha
.a0e9		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0eb		48		pha				pha
.a0ec		b5 58		lda $58,x			lda 	NSMantissa0,x
.a0ee		48		pha				pha
.a0ef		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; x 2
.a0f2		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; x 4
.a0f5		18		clc				clc 								; pop mantissa and add
.a0f6		68		pla				pla
.a0f7		75 58		adc $58,x			adc 	NSMantissa0,x
.a0f9		95 58		sta $58,x			sta 	NSMantissa0,x
.a0fb		68		pla				pla
.a0fc		75 60		adc $60,x			adc 	NSMantissa1,x
.a0fe		95 60		sta $60,x			sta 	NSMantissa1,x
.a100		68		pla				pla
.a101		75 68		adc $68,x			adc 	NSMantissa2,x
.a103		95 68		sta $68,x			sta 	NSMantissa2,x
.a105		68		pla				pla
.a106		75 70		adc $70,x			adc 	NSMantissa3,x
.a108		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a10a		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; x 10
.a10d		68		pla				pla 								; add digit
.a10e		18		clc				clc
.a10f		75 58		adc $58,x			adc 	NSMantissa0,x
.a111		95 58		sta $58,x			sta 	NSMantissa0,x
.a113		90 0a		bcc $a11f			bcc 	_ESTASDExit
.a115		f6 60		inc $60,x			inc 	NSMantissa1,x
.a117		d0 06		bne $a11f			bne 	_ESTASDExit
.a119		f6 68		inc $68,x			inc 	NSMantissa2,x
.a11b		d0 02		bne $a11f			bne 	_ESTASDExit
.a11d		f6 70		inc $70,x			inc 	NSMantissa3,x
.a11f						_ESTASDExit:
.a11f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a120						EvaluateTerm:
.a120		b1 30		lda ($30),y			lda 	(codePtr),y
.a122		30 18		bmi $a13c			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a124		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a126		b0 6c		bcs $a194			bcs 	_ETVariable
.a128		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a12a		90 6b		bcc $a197			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a12c		c9 3a		cmp #$3a			cmp 	#'9'+1
.a12e		b0 67		bcs $a197			bcs 	_ETPuncUnary
.a130		20 18 a0	jsr $a018			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a133						_ETNumber:
.a133		c8		iny				iny 								; keep encoding until we have the numbers
.a134		b1 30		lda ($30),y			lda 	(codePtr),y
.a136		20 1b a0	jsr $a01b			jsr 	EncodeNumberContinue
.a139		b0 f8		bcs $a133			bcs 	_ETNumber 					; go back if accepted.
.a13b		60		rts				rts
.a13c						_ETCheckUnary:
.a13c		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a13e		f0 3f		beq $a17f			beq 	_ETString
.a140		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a142		f0 12		beq $a156			beq 	_ETHexConstant
.a144		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a146		90 0b		bcc $a153			bcc 	_ETSyntaxError
.a148		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a14a		b0 07		bcs $a153			bcs 	_ETSyntaxError
.a14c		da		phx				phx 								; push X on the stack
.a14d		0a		asl a				asl 	a 							; put vector x 2 into X
.a14e		aa		tax				tax
.a14f		c8		iny				iny 								; consume unary function token
.a150		7c a2 94	jmp ($94a2,x)			jmp 	(VectorSet0,x) 				; and do it.
.a153						_ETSyntaxError:
.a153		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.a156						_ETHexConstant:
.a156		c8		iny				iny 								; skip #
.a157		c8		iny				iny 								; skip count
.a158		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; clear result
.a15b						_ETHLoop:
.a15b		b1 30		lda ($30),y			lda 	(codePtr),y
.a15d		c8		iny				iny 								; and consume
.a15e		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a160		f0 1c		beq $a17e			beq 	_ETHExit
.a162		48		pha				pha 								; save on stack.
.a163		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; x 2
.a166		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; x 4
.a169		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; x 8
.a16c		20 3b a7	jsr $a73b			jsr 	NSMShiftLeft 				; x 16
.a16f		68		pla				pla 								; ASCII
.a170		c9 41		cmp #$41			cmp 	#'A'
.a172		90 02		bcc $a176			bcc 	_ETHNotChar
.a174		e9 07		sbc #$07			sbc 	#7
.a176						_ETHNotChar:
.a176		29 0f		and #$0f			and 	#15 						; digit now
.a178		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a17a		95 58		sta $58,x			sta 	NSMantissa0,x
.a17c		80 dd		bra $a15b			bra 	_ETHLoop 					; go round.
.a17e						_ETHExit:
.a17e		60		rts				rts
.a17f						_ETString:
.a17f		c8		iny				iny 								; look at length
.a180		b1 30		lda ($30),y			lda 	(codePtr),y
.a182		48		pha				pha
.a183		c8		iny				iny 								; first character
.a184		20 58 ac	jsr $ac58			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a187		68		pla				pla 								; restore count and save
.a188		85 36		sta $36				sta 	zTemp0
.a18a		98		tya				tya 								; add length to Y to skip it.
.a18b		18		clc				clc
.a18c		65 36		adc $36				adc 	zTemp0
.a18e		a8		tay				tay
.a18f		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a191		95 50		sta $50,x			sta 	NSStatus,x
.a193		60		rts				rts
.a194						_ETVariable:
.a194		4c e9 a1	jmp $a1e9			jmp 	VariableHandler
.a197						_ETPuncUnary:
.a197		c8		iny				iny 								; consume the unary character
.a198		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a19a		f0 2b		beq $a1c7			beq 	_ETUnaryNegate
.a19c		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a19e		f0 36		beq $a1d6			beq 	_ETDereference
.a1a0		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a1a2		f0 3e		beq $a1e2			beq 	_ETParenthesis
.a1a4		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a1a6		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a1a8		f0 06		beq $a1b0			beq 	_ETIndirection
.a1aa		e6 36		inc $36				inc 	zTemp0
.a1ac		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a1ae		d0 a3		bne $a153			bne 	_ETSyntaxError
.a1b0						_ETIndirection:
.a1b0		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a1b2		1a		inc a				inc 	a
.a1b3		48		pha				pha
.a1b4		20 20 a1	jsr $a120			jsr 	EvaluateTerm				; evaluate the term
.a1b7		20 99 9f	jsr $9f99			jsr 	Dereference 				; dereference it.
.a1ba		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a1bc		d0 06		bne $a1c4			bne 	_ETTypeMismatch
.a1be		68		pla				pla 								; indirection 1-2
.a1bf		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a1c1		95 50		sta $50,x			sta 	NSStatus,x
.a1c3		60		rts				rts
.a1c4						_ETTypeMismatch:
.a1c4		4c db a9	jmp $a9db			jmp 	TypeError
.a1c7						_ETUnaryNegate:
.a1c7		20 20 a1	jsr $a120			jsr 	EvaluateTerm				; evaluate the term
.a1ca		20 99 9f	jsr $9f99			jsr 	Dereference 				; dereference it.
.a1cd		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a1cf		29 10		and #$10			and 	#NSTString
.a1d1		d0 f1		bne $a1c4			bne 	_ETTypeMismatch
.a1d3		4c ee a6	jmp $a6ee			jmp 	NSMNegate  					; just toggles the sign bit.
.a1d6						_ETDereference:
.a1d6		20 20 a1	jsr $a120			jsr 	EvaluateTerm				; evaluate the term
.a1d9		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a1db		29 20		and #$20			and 	#NSBIsReference
.a1dd		f0 e5		beq $a1c4			beq 	_ETTypeMismatch
.a1df		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a1e1		60		rts				rts
.a1e2						_ETParenthesis:
.a1e2		20 d6 9c	jsr $9cd6			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a1e5		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; check for )
.a1e8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a1e9						VariableHandler:
.a1e9		b1 30		lda ($30),y			lda 	(codePtr),y
.a1eb		18		clc				clc
.a1ec		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a1ee		85 37		sta $37				sta 	zTemp0+1
.a1f0		c8		iny				iny
.a1f1		b1 30		lda ($30),y			lda 	(codePtr),y
.a1f3		85 36		sta $36				sta 	zTemp0
.a1f5		c8		iny				iny
.a1f6		18		clc				clc									; copy variable address+3 to mantissa
.a1f7		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a1f9		95 58		sta $58,x			sta 	NSMantissa0,x
.a1fb		a5 37		lda $37				lda 	zTemp0+1
.a1fd		69 00		adc #$00			adc 	#0
.a1ff		95 60		sta $60,x			sta 	NSMantissa1,x
.a201		74 68		stz $68,x			stz 	NSMantissa2,x
.a203		74 70		stz $70,x			stz 	NSMantissa3,x
.a205		74 78		stz $78,x			stz 	NSExponent,x
.a207		5a		phy				phy
.a208		a0 02		ldy #$02			ldy 	#2 							; read type
.a20a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a20c		7a		ply				ply
.a20d		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a20f		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a211		95 50		sta $50,x			sta 	NSStatus,x
.a213		29 04		and #$04			and 	#NSBIsArray
.a215		d0 01		bne $a218			bne 	_VHArray
.a217		60		rts				rts
.a218						_VHArray:
.a218		e8		inx				inx
.a219		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a21c		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a21e		95 51		sta $51,x			sta 	NSStatus+1,x
.a220		b1 30		lda ($30),y			lda 	(codePtr),y
.a222		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a224		d0 06		bne $a22c			bne 	_VHNoSecondIndex
.a226		c8		iny				iny 								; skip the comma
.a227		e8		inx				inx
.a228		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a22b		ca		dex				dex
.a22c						_VHNoSecondIndex:
.a22c		ca		dex				dex 								; set X back.
.a22d		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; and check the right bracket.
.a230		5a		phy				phy 								; save position
.a231		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a233		85 3e		sta $3e				sta 	zaTemp
.a235		b5 60		lda $60,x			lda 	NSMantissa1,x
.a237		85 3f		sta $3f				sta 	zaTemp+1
.a239		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a23b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a23d		f0 5d		beq $a29c			beq 	_VHBadArray
.a23f		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a241		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a243		f0 02		beq $a247			beq 	_VHHas2Mask
.a245		a9 ff		lda #$ff			lda 	#$FF
.a247						_VHHas2Mask:
.a247		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a249		f0 4c		beq $a297			beq 	_VHBadIndex
.a24b		0a		asl a				asl 	a 							; carry will be set if a second index
.a24c		90 08		bcc $a256			bcc 	_VHCheckFirstIndex
.a24e		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a250		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a252		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a254		90 41		bcc $a297			bcc 	_VHBadIndex
.a256						_VHCheckFirstIndex:
.a256		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a258		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a25a		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a25c		90 39		bcc $a297			bcc 	_VHBadIndex
.a25e		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a260		64 37		stz $37				stz 	zTemp0+1
.a262		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a264		30 0e		bmi $a274			bmi 	_VHNoMultiply
.a266		da		phx				phx
.a267		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a269		48		pha				pha
.a26a		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a26c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a26e		1a		inc a				inc 	a 							; add 1 for zero base
.a26f		fa		plx				plx
.a270		20 d7 a6	jsr $a6d7			jsr 	Multiply8x8 				; calculate -> Z0
.a273		fa		plx				plx
.a274						_VHNoMultiply:
.a274		18		clc				clc
.a275		a5 36		lda $36				lda 	zTemp0
.a277		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a279		85 36		sta $36				sta 	zTemp0
.a27b		a5 37		lda $37				lda 	zTemp0+1
.a27d		69 00		adc #$00			adc 	#0
.a27f		85 37		sta $37				sta 	zTemp0+1
.a281		b5 50		lda $50,x			lda 	NSStatus,x
.a283		20 ef 87	jsr $87ef			jsr 	ScaleByBaseType
.a286		18		clc				clc
.a287		b2 3e		lda ($3e)			lda 	(zaTemp)
.a289		65 36		adc $36				adc 	zTemp0
.a28b		95 58		sta $58,x			sta 	NSMantissa0,x
.a28d		a0 01		ldy #$01			ldy 	#1
.a28f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a291		65 37		adc $37				adc 	zTemp0+1
.a293		95 60		sta $60,x			sta 	NSMantissa1,x
.a295		7a		ply				ply 								; restore position
.a296		60		rts				rts
.a297						_VHBadIndex:
.a297		a9 17		lda #$17		lda	#23
.a299		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a29c						_VHBadArray:
.a29c		a9 18		lda #$18		lda	#24
.a29e		4c d2 97	jmp $97d2		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a2a1						AbsUnary:
.a2a1		fa		plx				plx 								; restore stack pos
.a2a2		20 7a a6	jsr $a67a			jsr 	EvaluateNumber 				; get a float or int
.a2a5		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a2a8		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a2aa		29 7f		and #$7f			and 	#$7F
.a2ac		95 50		sta $50,x			sta 	NSStatus,x
.a2ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a2af						AllocUnary:
.a2af		fa		plx				plx 								; restore stack pos
.a2b0		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger		; get bytes required.
.a2b3		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a2b6		da		phx				phx 								; save X/Y
.a2b7		5a		phy				phy
.a2b8		8a		txa				txa 								; copy X into Y
.a2b9		a8		tay				tay
.a2ba		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a2bd		aa		tax				tax
.a2be		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a2c1		20 ce a2	jsr $a2ce			jsr 	AllocateXABytes 			; allocate memory
.a2c4		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a2c7		8a		txa				txa 	 							; typing is 16 bit integer.
.a2c8		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a2cb		7a		ply				ply
.a2cc		fa		plx				plx
.a2cd		60		rts				rts
.a2ce						AllocateXABytes:
.a2ce		5a		phy				phy
.a2cf		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a2d2		84 36		sty $36				sty 	zTemp0
.a2d4		5a		phy				phy
.a2d5		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a2d8		84 37		sty $37				sty 	zTemp0+1
.a2da		5a		phy				phy
.a2db		18		clc				clc 								; add to low memory pointer
.a2dc		6d 08 04	adc $0408			adc 	lowMemPtr
.a2df		8d 08 04	sta $0408			sta 	lowMemPtr
.a2e2		8a		txa				txa
.a2e3		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a2e6		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a2e9		b0 2f		bcs $a31a			bcs 	CISSMemory
.a2eb		20 0c a3	jsr $a30c			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a2ee						_ClearMemory:
.a2ee		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a2f1		c5 36		cmp $36				cmp 	zTemp0
.a2f3		d0 07		bne $a2fc			bne 	_CMClearNext
.a2f5		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a2f8		c5 37		cmp $37				cmp 	zTemp0+1
.a2fa		f0 0c		beq $a308			beq 	_CMExit
.a2fc						_CMClearNext:
.a2fc		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a2fe		92 36		sta ($36)			sta 	(zTemp0)
.a300		e6 36		inc $36				inc 	zTemp0
.a302		d0 ea		bne $a2ee			bne 	_ClearMemory
.a304		e6 37		inc $37				inc		zTemp0+1
.a306		80 e6		bra $a2ee			bra 	_ClearMemory
.a308						_CMExit:
.a308		fa		plx				plx
.a309		68		pla				pla
.a30a		7a		ply				ply
.a30b		60		rts				rts
.a30c						CheckIdentifierStringSpace:
.a30c		48		pha				pha
.a30d		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a310		18		clc				clc
.a311		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a313		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a316		b0 02		bcs $a31a			bcs 	CISSMemory
.a318		68		pla				pla
.a319		60		rts				rts
.a31a						CISSMemory:
.a31a		a9 06		lda #$06		lda	#6
.a31c		4c d2 97	jmp $97d2		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a31f						AscUnary:
.a31f		fa		plx				plx 								; restore stack pos
.a320		20 84 a6	jsr $a684			jsr 	EvaluateString 				; get a string
.a323		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a325		20 2e a7	jsr $a72e			jsr 	NSMSetByte 					; ASC("") will return zero.
.a328		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a32b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a32c						FracUnary:
.a32c		fa		plx				plx 								; restore stack pos
.a32d		20 7a a6	jsr $a67a			jsr 	EvaluateNumber 				; get a float or int
.a330		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a333		b5 50		lda $50,x			lda 	NSStatus,x
.a335		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a337		f0 04		beq $a33d			beq 	_IUZero
.a339		20 e7 9d	jsr $9de7			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a33c		60		rts				rts
.a33d						_IUZero:
.a33d		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.a340		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a341						IntUnary:
.a341		fa		plx				plx 								; restore stack pos
.a342		20 7a a6	jsr $a67a			jsr 	EvaluateNumber 				; get a float or int
.a345		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a348		b5 50		lda $50,x			lda 	NSStatus,x
.a34a		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a34c		f0 03		beq $a351			beq 	_IUExit
.a34e		20 3f 9e	jsr $9e3f			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a351						_IUExit:
.a351		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a352						LenUnary:
.a352		fa		plx				plx 								; restore stack pos
.a353		20 84 a6	jsr $a684			jsr 	EvaluateString 				; get a string
.a356		5a		phy				phy
.a357		a0 00		ldy #$00			ldy 	#0 							; find length
.a359						_LenFind:
.a359		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a35b		f0 06		beq $a363			beq 	_LenExit
.a35d		c8		iny				iny
.a35e		d0 f9		bne $a359			bne 	_LenFind
.a360		4c d6 a9	jmp $a9d6			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a363						_LenExit:
.a363		98		tya				tya		 							; return length
.a364		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.a367		7a		ply				ply
.a368		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a36b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a36c						Unary_Min:
.a36c		a9 01		lda #$01			lda 	#1
.a36e		80 02		bra $a372			bra 	UnaryMinMaxMain
.a370						Unary_Max:
.a370		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a372						UnaryMinMaxMain:
.a372		fa		plx				plx 								; get index on number stack
.a373		48		pha				pha 								; save comparator
.a374		20 71 a6	jsr $a671			jsr 	EvaluateValue 				; get the first value.
.a377						_UMMMLoop:
.a377		b1 30		lda ($30),y			lda 	(codePtr),y
.a379		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a37b		f0 22		beq $a39f			beq 	_UMMMDone
.a37d		20 c1 97	jsr $97c1			jsr 	CheckComma 					; must be a comma
.a380		e8		inx				inx
.a381		20 71 a6	jsr $a671			jsr 	EvaluateValue
.a384		ca		dex				dex
.a385		20 0f a7	jsr $a70f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a388		e8		inx				inx
.a389		20 0f a7	jsr $a70f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a38c		e8		inx				inx
.a38d		20 89 98	jsr $9889			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a390		ca		dex				dex
.a391		ca		dex				dex
.a392		85 36		sta $36				sta 	zTemp0 						; save required result
.a394		68		pla				pla 								; get and save comparator
.a395		48		pha				pha
.a396		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a398		d0 dd		bne $a377			bne 	_UMMMLoop
.a39a		20 a2 a3	jsr $a3a2			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a39d		80 d8		bra $a377			bra 	_UMMMLoop
.a39f						_UMMMDone:
.a39f		68		pla				pla 								; throw the comparator
.a3a0		c8		iny				iny 								; skip )
.a3a1		60		rts				rts
.a3a2						ExpCopyAboveDown:
.a3a2		b5 51		lda $51,x			lda 	NSStatus+1,x
.a3a4		95 50		sta $50,x			sta 	NSStatus,x
.a3a6		b5 79		lda $79,x			lda 	NSExponent+1,x
.a3a8		95 78		sta $78,x			sta 	NSExponent,x
.a3aa		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a3ac		95 58		sta $58,x			sta 	NSMantissa0,x
.a3ae		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a3b0		95 60		sta $60,x			sta 	NSMantissa1,x
.a3b2		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a3b4		95 68		sta $68,x			sta 	NSMantissa2,x
.a3b6		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a3b8		95 70		sta $70,x			sta 	NSMantissa3,x
.a3ba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a3bb						Unary_Not:
.a3bb		fa		plx				plx
.a3bc		20 99 a6	jsr $a699			jsr 	EvaluateInteger 			; get integer
.a3bf		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a3c2		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; zero mantissa ?
.a3c5		f0 04		beq $a3cb			beq 	_NotZero
.a3c7		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.a3ca		60		rts				rts
.a3cb						_NotZero:
.a3cb		4c 3f 98	jmp $983f			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a3ce						PeekByteUnary:
.a3ce		a9 01		lda #$01			lda 	#1
.a3d0		80 0a		bra $a3dc			bra 	PeekUnary
.a3d2						PeekWUnary:
.a3d2		a9 02		lda #$02			lda 	#2
.a3d4		80 06		bra $a3dc			bra 	PeekUnary
.a3d6						PeekLUnary:
.a3d6		a9 03		lda #$03			lda 	#3
.a3d8		80 02		bra $a3dc			bra 	PeekUnary
.a3da						PeekDUnary:
.a3da		a9 04		lda #$04			lda 	#4
.a3dc						PeekUnary:
.a3dc		fa		plx				plx 								; restore position.
.a3dd		48		pha				pha 								; save count to copy on stack
.a3de		20 ac a6	jsr $a6ac			jsr		Evaluate16BitInteger 		; address as constant.
.a3e1		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a3e4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a3e6		85 36		sta $36				sta 	zTemp0
.a3e8		b5 60		lda $60,x			lda 	NSMantissa1,x
.a3ea		85 37		sta $37				sta 	zTemp0+1
.a3ec		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; clear the result to zero.
.a3ef		68		pla				pla 								; count in zTemp2
.a3f0		85 3a		sta $3a				sta 	zTemp2
.a3f2		da		phx				phx 								; save stack position and offset of read
.a3f3		5a		phy				phy
.a3f4		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a3f6						_PULoop:
.a3f6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a3f8		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a3fa		c8		iny				iny 								; next byte to write
.a3fb		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a3fc		18		clc				clc
.a3fd		69 08		adc #$08			adc 	#MathStackSize
.a3ff		aa		tax				tax
.a400		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a402		d0 f2		bne $a3f6			bne 	_PULoop
.a404		7a		ply				ply 								; restore stack/code pos and exit.
.a405		fa		plx				plx
.a406		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a407						SgnUnary:
.a407		fa		plx				plx 								; restore stack pos
.a408		20 7a a6	jsr $a67a			jsr 	EvaluateNumber 				; get a float or int
.a40b		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a40e		20 4e a7	jsr $a74e			jsr 	NSMIsZero 					; if zero
.a411		f0 0e		beq $a421			beq 	_SGZero  					; return Int Zero
.a413		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a415		48		pha				pha
.a416		a9 01		lda #$01			lda 	#1 							; set to 1
.a418		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.a41b		68		pla				pla
.a41c		29 80		and #$80			and		#$80 						; copy the sign byte out
.a41e		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a420		60		rts				rts
.a421		20 2c a7	jsr $a72c	_SGZero:jsr 	NSMSetZero
.a424		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a425						ValUnary:
.a425		fa		plx				plx 								; restore stack pos
.a426		20 3b a4	jsr $a43b			jsr 	ValMainCode 				; do the main val() code
.a429		b0 01		bcs $a42c			bcs 	_VUError 					; couldn't convert
.a42b		60		rts				rts
.a42c						_VUError:
.a42c		4c db a9	jmp $a9db			jmp 	TypeError
.a42f						IsValUnary:
.a42f		fa		plx				plx 								; restore stack pos
.a430		20 3b a4	jsr $a43b			jsr 	ValMainCode 				; do the main val() code
.a433		b0 03		bcs $a438			bcs 	_VUBad
.a435		4c 3f 98	jmp $983f			jmp 	ReturnTrue
.a438						_VUBad:
.a438		4c 4a 98	jmp $984a			jmp 	ReturnFalse
.a43b						ValMainCode:
.a43b		20 84 a6	jsr $a684			jsr 	EvaluateString 				; get a string
.a43e		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; check right bracket present
.a441						ValEvaluateZTemp0:
.a441		5a		phy				phy
.a442		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a444		f0 17		beq $a45d			beq 	_VMCFail2
.a446		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a448		48		pha				pha 								; save first character
.a449		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a44b		d0 01		bne $a44e			bne 	_VMCStart
.a44d		c8		iny				iny 								; skip over -
.a44e						_VMCStart:
.a44e		38		sec				sec 								; initialise first time round.
.a44f						_VMCNext:
.a44f		c8		iny				iny 								; pre-increment
.a450		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a452		f0 0c		beq $a460			beq 	_VMCSuccess 				; successful.
.a454		20 1c a0	jsr $a01c			jsr 	EncodeNumber 				; send it to the number-builder
.a457		90 03		bcc $a45c			bcc 	_VMCFail 					; if failed, give up.
.a459		18		clc				clc 								; next time round, countinue
.a45a		80 f3		bra $a44f			bra 	_VMCNext
.a45c						_VMCFail:
.a45c		68		pla				pla
.a45d						_VMCFail2:
.a45d		7a		ply				ply
.a45e		38		sec				sec
.a45f		60		rts				rts
.a460						_VMCSuccess:
.a460		a9 00		lda #$00			lda 	#0 							; construct final
.a462		20 1c a0	jsr $a01c			jsr 	EncodeNumber 				; by sending a duff value.
.a465		68		pla				pla 								; if it was -ve
.a466		c9 2d		cmp #$2d			cmp 	#"-"
.a468		d0 03		bne $a46d			bne 	_VMCNotNegative
.a46a		20 ee a6	jsr $a6ee			jsr		NSMNegate 					; negate it.
.a46d						_VMCNotNegative:
.a46d		7a		ply				ply
.a46e		18		clc				clc
.a46f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a470						ChrUnary:
.a470		fa		plx				plx 								; restore stack pos
.a471		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a474		48		pha				pha
.a475		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a478		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a47a		20 3b b1	jsr $b13b			jsr 	StringTempAllocate
.a47d		68		pla				pla 								; write number to it
.a47e		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a481		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a482						ItemCountUnary:
.a482		fa		plx				plx
.a483		20 84 a6	jsr $a684			jsr 	EvaluateString
.a486		e8		inx				inx
.a487		20 fa a4	jsr $a4fa			jsr 	ICGetSeperator
.a48a		ca		dex				dex
.a48b		20 1b a5	jsr $a51b			jsr 	ICSetPointer 				; zTemp0 = (string)
.a48e		20 2c a7	jsr $a72c			jsr 	NSMSetZero 					; zero the result.
.a491		5a		phy				phy
.a492		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a494						_ICULoop:
.a494		c8		iny				iny
.a495		b1 36		lda ($36),y			lda 	(zTemp0),y
.a497		cd 95 07	cmp $0795			cmp 	ICSeperator
.a49a		d0 02		bne $a49e			bne 	_ICUNoMatch
.a49c		f6 58		inc $58,x			inc 	NSMantissa0,x
.a49e						_ICUNoMatch:
.a49e		c9 00		cmp #$00			cmp 	#0
.a4a0		d0 f2		bne $a494			bne 	_ICULoop
.a4a2		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a4a4		7a		ply				ply
.a4a5		60		rts				rts
.a4a6						ItemGetUnary:
.a4a6		fa		plx				plx
.a4a7		20 84 a6	jsr $a684			jsr 	EvaluateString 				; search string
.a4aa		20 c1 97	jsr $97c1			jsr 	CheckComma
.a4ad		e8		inx				inx 								; get count
.a4ae		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.a4b1		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a4b3		f0 61		beq $a516			beq 	ICGSRange
.a4b5		e8		inx				inx 								; get seperator.
.a4b6		20 fa a4	jsr $a4fa			jsr 	ICGetSeperator
.a4b9		ca		dex				dex
.a4ba		ca		dex				dex
.a4bb		5a		phy				phy
.a4bc		20 1b a5	jsr $a51b			jsr 	ICSetPointer 				; zTemp0 points to string.
.a4bf		a0 00		ldy #$00			ldy 	#0
.a4c1		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a4c3		f0 0e		beq $a4d3			beq 	_IGUFoundStart
.a4c5						_IGUFindNext:
.a4c5		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a4c7		f0 4d		beq $a516			beq 	ICGSRange 					; eol, not found.
.a4c9		c8		iny				iny
.a4ca		cd 95 07	cmp $0795			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a4cd		d0 f6		bne $a4c5			bne 	_IGUFindNext
.a4cf		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a4d1		d0 f2		bne $a4c5			bne 	_IGUFindNext
.a4d3						_IGUFoundStart:
.a4d3		84 38		sty $38				sty 	zTemp1 						; save start
.a4d5		88		dey				dey
.a4d6						_IGUFindLength:
.a4d6		c8		iny				iny 								; forward till seperator/EOS
.a4d7		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4d9		f0 05		beq $a4e0			beq 	_IGUFoundLength
.a4db		cd 95 07	cmp $0795			cmp 	ICSeperator
.a4de		d0 f6		bne $a4d6			bne 	_IGUFindLength
.a4e0						_IGUFoundLength:
.a4e0		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a4e2		98		tya				tya 								; calculate length of new string.
.a4e3		38		sec				sec
.a4e4		e5 38		sbc $38				sbc 	zTemp1
.a4e6		20 3b b1	jsr $b13b			jsr 	StringTempAllocate 			; allocate bytes for it.
.a4e9		a4 38		ldy $38				ldy 	zTemp1
.a4eb						_IGUCopySub:
.a4eb		c4 39		cpy $39				cpy 	zTemp1+1
.a4ed		f0 08		beq $a4f7			beq 	_IGUCopyOver
.a4ef		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4f1		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a4f4		c8		iny				iny
.a4f5		80 f4		bra $a4eb			bra 	_IGUCopySub
.a4f7						_IGUCopyOver:
.a4f7		7a		ply				ply
.a4f8		60		rts				rts
>a4f9		db						.byte 	$DB 						; causes a break in the emulator
.a4fa						ICGetSeperator:
.a4fa		20 c1 97	jsr $97c1			jsr 	CheckComma 					; preceding comma
.a4fd		20 84 a6	jsr $a684			jsr 	EvaluateString 				; seperator string
.a500		20 1b a5	jsr $a51b			jsr 	ICSetPointer 				; access it
.a503		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a505		8d 95 07	sta $0795			sta 	ICSeperator
.a508		f0 0c		beq $a516			beq 	ICGSRange 					; check LEN(seperator) = 1
.a50a		5a		phy				phy
.a50b		a0 01		ldy #$01			ldy 	#1
.a50d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a50f		d0 05		bne $a516			bne 	ICGSRange
.a511		7a		ply				ply
.a512		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; check following )
.a515		60		rts				rts
.a516						ICGSRange:
.a516		a9 04		lda #$04		lda	#4
.a518		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a51b						ICSetPointer:
.a51b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a51d		85 36		sta $36				sta 	zTemp0
.a51f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a521		85 37		sta $37				sta 	zTemp0+1
.a523		60		rts				rts
.0795						ICSeperator:
>0795								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a524						SpcUnary:
.a524		fa		plx				plx 								; restore stack pos
.a525		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger			; get value
.a528		5a		phy				phy
.a529		48		pha				pha 								; save count
.a52a		20 3b b1	jsr $b13b			jsr 	StringTempAllocate
.a52d		7a		ply				ply 								; to do count in Y
.a52e						_SpcLoop:
.a52e		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a530		f0 08		beq $a53a			beq 	_SpcExit
.a532		a9 20		lda #$20			lda 	#32
.a534		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a537		88		dey				dey
.a538		80 f4		bra $a52e			bra 	_SpcLoop
.a53a						_SpcExit:
.a53a		7a		ply				ply
.a53b		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a53e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a53f						Unary_Str:
.a53f		fa		plx				plx
.a540		20 7a a6	jsr $a67a			jsr 	EvaluateNumber  			; get number
.a543		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; closing bracket
.a546		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a548		20 61 a5	jsr $a561			jsr 	ConvertNumberToString 		; do the conversion.
.a54b		a9 21		lda #$21			lda		#33 						; create buffer
.a54d		20 3b b1	jsr $b13b			jsr 	StringTempAllocate 			; allocate memory
.a550		da		phx				phx  								; copy the converted string into the buffer.
.a551		a2 00		ldx #$00			ldx 	#0
.a553						_USCopy:
.a553		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a556		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a559		e8		inx				inx
.a55a		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a55d		d0 f4		bne $a553			bne 	_USCopy
.a55f		fa		plx				plx
.a560		60		rts				rts
.a561						ConvertNumberToString:
.a561		5a		phy				phy 								; save code position
.a562		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a565		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a568		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a56a		10 09		bpl $a575			bpl 	_CNTSNotNegative
.a56c		29 7f		and #$7f			and 	#$7F 						; make +ve
.a56e		95 50		sta $50,x			sta 	NSStatus,x
.a570		a9 2d		lda #$2d			lda 	#"-"
.a572		20 d6 a5	jsr $a5d6			jsr 	WriteDecimalBuffer
.a575						_CNTSNotNegative:
.a575		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a577		f0 12		beq $a58b			beq 	_CNTSNotFloat
.a579		e8		inx				inx 								; round up so we don't get too many 6.999999
.a57a		a9 01		lda #$01			lda 	#1
.a57c		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.a57f		ca		dex				dex
.a580		b5 78		lda $78,x			lda		NSExponent,x
.a582		95 79		sta $79,x			sta 	NSExponent+1,x
.a584		a9 08		lda #$08			lda 	#NSTFloat
.a586		95 51		sta $51,x			sta 	NSStatus+1,x
.a588		20 21 9d	jsr $9d21			jsr 	FloatAdd
.a58b						_CNTSNotFloat:
.a58b		20 b8 a5	jsr $a5b8			jsr 	MakePlusTwoString 			; do the integer part.
.a58e		20 e7 9d	jsr $9de7			jsr 	FloatFractionalPart 		; get the fractional part
.a591		20 98 9e	jsr $9e98			jsr 	NSNormalise					; normalise , exit if zero
.a594		f0 20		beq $a5b6			beq 	_CNTSExit
.a596		a9 2e		lda #$2e			lda 	#"."
.a598		20 d6 a5	jsr $a5d6			jsr 	WriteDecimalBuffer 			; write decimal place
.a59b						_CNTSDecimal:
.a59b		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a59e		30 16		bmi $a5b6			bmi 	_CNTSExit
.a5a0		e8		inx				inx 								; x 10.0
.a5a1		a9 0a		lda #$0a			lda 	#10
.a5a3		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.a5a6		a9 08		lda #$08			lda 	#NSTFloat
.a5a8		95 50		sta $50,x			sta 	NSStatus,x
.a5aa		ca		dex				dex
.a5ab		20 66 9e	jsr $9e66			jsr 	FloatMultiply
.a5ae		20 b8 a5	jsr $a5b8			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a5b1		20 e7 9d	jsr $9de7			jsr 	FloatFractionalPart 		; get the fractional part
.a5b4		80 e5		bra $a59b			bra 	_CNTSDecimal 				; keep going.
.a5b6						_CNTSExit:
.a5b6		7a		ply				ply
.a5b7		60		rts				rts
.a5b8						MakePlusTwoString:
.a5b8		da		phx				phx
.a5b9		20 0f a7	jsr $a70f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a5bc		e8		inx				inx 								; access it
.a5bd		e8		inx				inx
.a5be		20 3f 9e	jsr $9e3f			jsr 	FloatIntegerPart 			; make it an integer
.a5c1		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a5c3		20 51 9c	jsr $9c51			jsr 	ConvertInt32
.a5c6		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a5c8						_MPTSCopy:
.a5c8		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5cb		20 d6 a5	jsr $a5d6			jsr 	WriteDecimalBuffer
.a5ce		e8		inx				inx
.a5cf		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5d2		d0 f4		bne $a5c8			bne 	_MPTSCopy
.a5d4		fa		plx				plx
.a5d5		60		rts				rts
.a5d6						WriteDecimalBuffer:
.a5d6		da		phx				phx
.a5d7		ae 11 04	ldx $0411			ldx 	dbOffset
.a5da		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a5dd		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a5e0		ee 11 04	inc $0411			inc 	dbOffset
.a5e3		fa		plx				plx
.a5e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5e5						Unary_Left:
.a5e5		fa		plx				plx
.a5e6		18		clc				clc 								; only one parameter
.a5e7		20 4a a6	jsr $a64a			jsr 	SubstringInitial 			; set up.
.a5ea		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5ec		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5ee		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5f0		80 25		bra $a617			bra 	SubstringMain
.a5f2						Unary_Right:
.a5f2		fa		plx				plx
.a5f3		18		clc				clc 								; only one parameter
.a5f4		20 4a a6	jsr $a64a			jsr 	SubstringInitial 			; set up.
.a5f7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5f9		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5fb		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a5fd		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5ff		b0 02		bcs $a603			bcs 	_URNotUnderflow
.a601		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a603						_URNotUnderflow:
.a603		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a605		80 10		bra $a617			bra 	SubstringMain
.a607						Unary_Mid:
.a607		fa		plx				plx
.a608		38		sec				sec 								; two parameters
.a609		20 4a a6	jsr $a64a			jsr 	SubstringInitial 			; set up.
.a60c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a60e		f0 04		beq $a614			beq 	_UMError
.a610		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a612		80 03		bra $a617			bra 	SubstringMain
.a614						_UMError:
.a614		4c e0 a9	jmp $a9e0			jmp 	ArgumentError
.a617						SubstringMain:
.a617		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a619		d5 78		cmp $78,x			cmp 	NSExponent,x
.a61b		b0 27		bcs $a644			bcs 	_SSMNull 					; if so, return an empty string.
.a61d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a61f		f0 23		beq $a644			beq 	_SSMNull 					; return empty string.
.a621		18		clc				clc 								; add the offset +1 to the address and
.a622		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a624		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a626		85 36		sta $36				sta 	zTemp0
.a628		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a62a		69 00		adc #$00			adc 	#0
.a62c		85 37		sta $37				sta 	zTemp0+1
.a62e						_SSMNoCarry:
.a62e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a630		20 3b b1	jsr $b13b			jsr 	StringTempAllocate 			; allocate that many characters
.a633		5a		phy				phy 								; save Y
.a634		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a636						_SSMCopy:
.a636		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a638		f0 08		beq $a642			beq 	_SSMEString 				; no more to copy
.a63a		20 74 b1	jsr $b174			jsr 	StringTempWrite 			; and write it out.
.a63d		c8		iny				iny
.a63e		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a640		d0 f4		bne $a636			bne 	_SSMCopy
.a642						_SSMEString:
.a642		7a		ply				ply
.a643						_SSMExit:
.a643		60		rts				rts
.a644						_SSMNull:
.a644		a9 00		lda #$00			lda 	#0
.a646		20 3b b1	jsr $b13b			jsr 	StringTempAllocate
.a649		60		rts				rts
.a64a						SubstringInitial:
.a64a		da		phx				phx 								; save initial stack position
.a64b		08		php				php 								; save carry on stack indicating 2 parameters
.a64c		20 84 a6	jsr $a684			jsr 	EvaluateString 				; get a string
.a64f		5a		phy				phy 								; calculate length to exponent.
.a650		a0 ff		ldy #$ff			ldy 	#$FF
.a652						_SIFindLength:
.a652		c8		iny				iny
.a653		b1 36		lda ($36),y			lda 	(zTemp0),y
.a655		d0 fb		bne $a652			bne 	_SIFindLength
.a657		98		tya				tya
.a658		95 78		sta $78,x			sta 	NSExponent,x
.a65a		7a		ply				ply
.a65b		e8		inx				inx
.a65c		20 c1 97	jsr $97c1			jsr 	CheckComma 					; comma next
.a65f		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get next parameter
.a662		28		plp				plp 								; is it the last parameter ?
.a663		90 07		bcc $a66c			bcc 	_SSIExit 					; if so, exit.
.a665		e8		inx				inx
.a666		20 c1 97	jsr $97c1			jsr 	CheckComma 					; comma next
.a669		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get last parameter
.a66c						_SSIExit:
.a66c		fa		plx				plx
.a66d		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; check closing bracket
.a670		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a671						EvaluateValue:
.a671		48		pha				pha
.a672		20 d6 9c	jsr $9cd6			jsr		EvaluateExpression 			; expression
.a675		20 99 9f	jsr $9f99			jsr 	Dereference					; derefernce it
.a678		68		pla				pla
.a679		60		rts				rts
.a67a						EvaluateNumber:
.a67a		20 71 a6	jsr $a671			jsr 	EvaluateValue 				; get a value
.a67d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a67f		29 10		and #$10			and 	#NSBIsString
.a681		d0 13		bne $a696			bne 	HelperTypeError
.a683		60		rts				rts
.a684						EvaluateString:
.a684		20 71 a6	jsr $a671			jsr 	EvaluateValue 				; get a value
.a687		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a689		29 10		and #$10			and 	#NSBIsString
.a68b		f0 09		beq $a696			beq 	HelperTypeError
.a68d						CopyAddressToTemp0:
.a68d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a68f		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a691		b5 60		lda $60,x			lda 	NSMantissa1,x
.a693		85 37		sta $37				sta 	zTemp0+1
.a695		60		rts				rts
.a696						HelperTypeError:
.a696		4c db a9	jmp $a9db			jmp 	TypeError
.a699						EvaluateInteger:
.a699		20 7a a6	jsr $a67a			jsr 	EvaluateNumber
.a69c		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a69e		d0 09		bne $a6a9			bne 	HelperValueError 			; if not, it's a float.
.a6a0		60		rts				rts
.a6a1						EvaluateUnsignedInteger:
.a6a1		20 99 a6	jsr $a699			jsr 	EvaluateInteger 			; check integer is +ve
.a6a4		b5 50		lda $50,x			lda 	NSStatus,x
.a6a6		30 01		bmi $a6a9			bmi 	HelperValueError
.a6a8		60		rts				rts
.a6a9						HelperValueError:
.a6a9		4c e0 a9	jmp $a9e0			jmp 	ArgumentError
.a6ac						Evaluate16BitInteger:
.a6ac		20 a1 a6	jsr $a6a1			jsr	 	EvaluateUnsignedInteger		; get integer
.a6af		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6b1		15 68		ora $68,x			ora 	NSMantissa2,x
.a6b3		d0 f4		bne $a6a9			bne 	HelperValueError
.a6b5		60		rts				rts
.a6b6						Evaluate16BitIntegerSigned:
.a6b6		20 99 a6	jsr $a699			jsr	 	EvaluateInteger				; get integer
.a6b9		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6bb		15 68		ora $68,x			ora 	NSMantissa2,x
.a6bd		d0 ea		bne $a6a9			bne 	HelperValueError
.a6bf		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a6c1		10 03		bpl $a6c6			bpl 	_EISNotSigned
.a6c3		20 f5 a6	jsr $a6f5			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a6c6						_EISNotSigned:
.a6c6		60		rts				rts
.a6c7						Evaluate8BitInteger:
.a6c7		20 a1 a6	jsr $a6a1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6ca		d0 dd		bne $a6a9			bne 	HelperValueError
.a6cc		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6ce		15 68		ora $68,x			ora 	NSMantissa2,x
.a6d0		15 60		ora $60,x			ora 	NSMantissa1,x
.a6d2		d0 d5		bne $a6a9			bne 	HelperValueError
.a6d4		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6d6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a6d7						Multiply8x8:
.a6d7		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a6d8		85 36		sta $36			  	sta 	zTemp0
.a6da		86 37		stx $37				stx 	zTemp0+1
.a6dc		a9 00		lda #$00			lda 	#0
.a6de		a2 08		ldx #$08			ldx 	#8
.a6e0						_M88Loop:
.a6e0		90 03		bcc $a6e5			bcc 	_M88NoAdd
.a6e2		18		clc				clc
.a6e3		65 37		adc $37				adc 	zTemp0+1
.a6e5						_M88NoAdd:
.a6e5		6a		ror a				ror 	a
.a6e6		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a6e8		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a6e9		d0 f5		bne $a6e0			bne 	_M88Loop
.a6eb		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a6ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6ee						NSMNegate:
.a6ee		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a6f0		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a6f2		95 50		sta $50,x			sta 	NSStatus,x
.a6f4		60		rts				rts
.a6f5						NSMNegateMantissa:
.a6f5		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a6f6		a9 00		lda #$00			lda 	#0
.a6f8		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a6fa		95 58		sta $58,x			sta 	NSMantissa0,x
.a6fc		a9 00		lda #$00			lda 	#0
.a6fe		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a700		95 60		sta $60,x			sta 	NSMantissa1,x
.a702		a9 00		lda #$00			lda 	#0
.a704		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a706		95 68		sta $68,x			sta 	NSMantissa2,x
.a708		a9 00		lda #$00			lda 	#0
.a70a		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a70c		95 70		sta $70,x			sta 	NSMantissa3,x
.a70e		60		rts				rts
.a70f						NSMShiftUpTwo:
.a70f		b5 58		lda $58,x			lda 	NSMantissa0,x
.a711		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a713		b5 60		lda $60,x			lda 	NSMantissa1,x
.a715		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a717		b5 68		lda $68,x			lda 	NSMantissa2,x
.a719		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a71b		b5 70		lda $70,x			lda 	NSMantissa3,x
.a71d		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a71f		b5 78		lda $78,x			lda 	NSExponent,x
.a721		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a723		b5 50		lda $50,x			lda 	NSStatus,x
.a725		95 52		sta $52,x			sta 	NSStatus+2,x
.a727		60		rts				rts
.a728						NSMSetZeroMantissaOnly:
.a728		a9 00		lda #$00			lda 	#0
.a72a		80 06		bra $a732			bra 	NSMSetMantissa
.a72c						NSMSetZero:
.a72c		a9 00		lda #$00			lda 	#0
.a72e						NSMSetByte:
.a72e		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a730		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a732						NSMSetMantissa:
.a732		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a734		74 60		stz $60,x			stz 	NSMantissa1,x
.a736		74 68		stz $68,x			stz 	NSMantissa2,x
.a738		74 70		stz $70,x			stz 	NSMantissa3,x
.a73a		60		rts				rts
.a73b						NSMShiftLeft:
.a73b		18		clc				clc
.a73c						NSMRotateLeft:
.a73c		36 58		rol $58,x			rol 	NSMantissa0,x
.a73e		36 60		rol $60,x			rol		NSMantissa1,x
.a740		36 68		rol $68,x			rol		NSMantissa2,x
.a742		36 70		rol $70,x			rol		NSMantissa3,x
.a744		60		rts				rts
.a745						NSMShiftRight:
.a745		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a747		76 68		ror $68,x			ror		NSMantissa2,x
.a749		76 60		ror $60,x			ror		NSMantissa1,x
.a74b		76 58		ror $58,x			ror		NSMantissa0,x
.a74d		60		rts				rts
.a74e						NSMIsZero:
.a74e		b5 70		lda $70,x			lda 	NSMantissa3,x
.a750		15 68		ora $68,x			ora		NSMantissa2,x
.a752		15 60		ora $60,x			ora		NSMantissa1,x
.a754		15 58		ora $58,x			ora		NSMantissa0,x
.a756		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.a757						UnaryGetTime:
.a757		a9 00		lda #$00			lda 	#0
.a759		80 02		bra $a75d			bra 	UGDTMain
.a75b						UnaryGetDate:
.a75b		a9 03		lda #$03			lda 	#3
.a75d						UGDTMain:
.a75d		fa		plx				plx 								; get stack position back
.a75e		48		pha				pha 								; save table offset
.a75f		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger			; ignored parameter
.a762		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; closing )
.a765		68		pla				pla 								; table offset in A
.a766		5a		phy				phy 								; saving Y
.a767		a8		tay				tay 								; table offset in Y
.a768		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a76a		20 3b b1	jsr $b13b			jsr 	StringTempAllocate
.a76d		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a76f		48		pha				pha
.a770		64 01		stz $01				stz 	1
.a772		20 85 a7	jsr $a785			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a775		20 80 a7	jsr $a780			jsr 	UGDTColonDigit
.a778		20 80 a7	jsr $a780			jsr 	UGDTColonDigit
.a77b		68		pla				pla 								; restore I/O select
.a77c		85 01		sta $01				sta 	1
.a77e		7a		ply				ply  								; restore code position
.a77f		60		rts				rts
.a780						UGDTColonDigit:
.a780		a9 3a		lda #$3a			lda 	#':'
.a782		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a785						UGDTDigit:
.a785		da		phx				phx 								; save X
.a786		b9 a5 a7	lda $a7a5,y			lda 	RTCROffset,y 				; get offset in RTC register
.a789		aa		tax				tax
.a78a		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a78d		39 ab a7	and $a7ab,y			and 	RTCRMask,y 					; and with Mask.
.a790		fa		plx				plx
.a791		48		pha				pha 								; output in BCD
.a792		4a		lsr a				lsr 	a
.a793		4a		lsr a				lsr 	a
.a794		4a		lsr a				lsr 	a
.a795		4a		lsr a				lsr 	a
.a796		09 30		ora #$30			ora 	#48
.a798		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a79b		68		pla				pla
.a79c		29 0f		and #$0f			and 	#15
.a79e		09 30		ora #$30			ora 	#48
.a7a0		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a7a3		c8		iny				iny
.a7a4		60		rts				rts
.a7a5						RTCROffset:
>a7a5		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a7ab						RTCRMask:
>a7ab		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.a7b1						AscGet:
.a7b1		fa		plx				plx 								; restore stack pos
.a7b2						AscGet2:
.a7b2		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a7b5		20 34 81	jsr $8134	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a7b8		d0 0b		bne $a7c5			bne 	_AGBreak
.a7ba		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; wait for key.
.a7bd		c9 00		cmp #$00			cmp 	#0
.a7bf		f0 f4		beq $a7b5			beq 	_AGKey
.a7c1		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.a7c4		60		rts				rts
.a7c5						_AGBreak:
.a7c5		a9 01		lda #$01		lda	#1
.a7c7		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a7ca						AscInkey:
.a7ca		fa		plx				plx 								; restore stack pos
.a7cb						AscInkey2:
.a7cb		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a7ce		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a7d1		20 2e a7	jsr $a72e			jsr 	NSMSetByte
.a7d4		60		rts				rts
.a7d5						ChrGet:
.a7d5		fa		plx				plx
.a7d6		20 b2 a7	jsr $a7b2			jsr 	AscGet2
.a7d9		4c e0 a7	jmp $a7e0			jmp 	GetInkeyToString
.a7dc						ChrInkey:
.a7dc		fa		plx				plx
.a7dd		20 cb a7	jsr $a7cb			jsr 	AscInkey2
.a7e0						GetInkeyToString:
.a7e0		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a7e2		f0 0b		beq $a7ef			beq 	_GKISNull
.a7e4		48		pha				pha
.a7e5		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a7e7		20 3b b1	jsr $b13b			jsr 	StringTempAllocate
.a7ea		68		pla				pla 								; write number to it
.a7eb		20 74 b1	jsr $b174			jsr 	StringTempWrite
.a7ee		60		rts				rts
.a7ef						_GKISNull:
.a7ef		a9 00		lda #$00			lda 	#0
.a7f1		20 3b b1	jsr $b13b			jsr 	StringTempAllocate
.a7f4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.a7f5						KeyDown:
.a7f5		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process outstanding events.
.a7f8		fa		plx				plx 								; restore stack pos
.a7f9		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; key to check.
.a7fc		48		pha				pha 								; check right bracket.
.a7fd		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a800		68		pla				pla
.a801		20 1a 82	jsr $821a			jsr 	KeyboardConvertXA 			; get offset and mask.
.a804		3d 5f 06	and $065f,x			and 	KeyStatus,x 				; is it zero ?
.a807		f0 03		beq $a80c			beq 	_KeyUp
.a809		4c 3f 98	jmp $983f			jmp 	ReturnTrue
.a80c		4c 4a 98	jmp $984a	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.a80f						Unary_Random:
.a80f		fa		plx				plx
.a810		20 60 a8	jsr $a860			jsr 	URCopyToMantissa  			; put random # in mantissa
.a813		b1 30		lda ($30),y			lda 	(codePtr),y
.a815		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a817		f0 08		beq $a821			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a819		e8		inx				inx
.a81a		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a81d		ca		dex				dex
.a81e		20 91 99	jsr $9991			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a821						_URNoModulus:
.a821		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a823		74 78		stz $78,x			stz 	NSExponent,x
.a825		20 b9 97	jsr $97b9			jsr 	CheckRightBracket
.a828		60		rts				rts
.a829						Unary_Rnd:
.a829		fa		plx				plx
.a82a		20 7a a6	jsr $a67a			jsr 	EvaluateNumber 				; number to use.
.a82d		20 b9 97	jsr $97b9			jsr 	CheckRightBracket 			; closing bracket
.a830		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a832		10 20		bpl $a854			bpl 	_URDontSeed
.a834		a5 01		lda $01				lda 	1 							; switch to page 0
.a836		48		pha				pha
.a837		64 01		stz $01				stz 	1
.a839		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a83b		49 17		eor #$17			eor 	#$17
.a83d		8d a4 d6	sta $d6a4			sta 	$D6A4
.a840		b5 60		lda $60,x			lda 	NSMantissa1,x
.a842		49 a5		eor #$a5			eor 	#$A5
.a844		8d a5 d6	sta $d6a5			sta 	$D6A5
.a847		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a849		8d a6 d6	sta $d6a6			sta 	$D6A6
.a84c		a9 01		lda #$01			lda 	#1
.a84e		8d a6 d6	sta $d6a6			sta 	$D6A6
.a851		68		pla				pla
.a852		85 01		sta $01				sta 	1
.a854						_URDontSeed:
.a854		20 60 a8	jsr $a860			jsr 	URCopyToMantissa 			; copy into mantissa
.a857		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a859		95 78		sta $78,x			sta 	NSExponent,x
.a85b		a9 08		lda #$08			lda 	#NSTFloat
.a85d		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a85f		60		rts				rts
.a860						URCopyToMantissa:
.a860		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a862		48		pha				pha
.a863		64 01		stz $01				stz 	1
.a865		a9 01		lda #$01			lda 	#1
.a867		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a86a		ad a4 d6	lda $d6a4			lda 	$D6A4
.a86d		95 58		sta $58,x			sta 	NSMantissa0,x
.a86f		ad a5 d6	lda $d6a5			lda 	$D6A5
.a872		95 60		sta $60,x			sta 	NSMantissa1,x
.a874		ad a4 d6	lda $d6a4			lda 	$D6A4
.a877		95 68		sta $68,x			sta 	NSMantissa2,x
.a879		ad a5 d6	lda $d6a5			lda 	$D6A5
.a87c		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a87e		95 70		sta $70,x			sta 	NSMantissa3,x
.a880		68		pla				pla
.a881		85 01		sta $01				sta 	1
.a883		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a884						Assemble_ora:
.a884		20 18 83	jsr $8318		jsr	AssembleGroup1
>a887		01					.byte $01
.a888						Assemble_and:
.a888		20 18 83	jsr $8318		jsr	AssembleGroup1
>a88b		21					.byte $21
.a88c						Assemble_eor:
.a88c		20 18 83	jsr $8318		jsr	AssembleGroup1
>a88f		41					.byte $41
.a890						Assemble_adc:
.a890		20 18 83	jsr $8318		jsr	AssembleGroup1
>a893		61					.byte $61
.a894						Assemble_sta:
.a894		20 18 83	jsr $8318		jsr	AssembleGroup1
>a897		81					.byte $81
.a898						Assemble_lda:
.a898		20 18 83	jsr $8318		jsr	AssembleGroup1
>a89b		a1					.byte $a1
.a89c						Assemble_cmp:
.a89c		20 18 83	jsr $8318		jsr	AssembleGroup1
>a89f		c1					.byte $c1
.a8a0						Assemble_sbc:
.a8a0		20 18 83	jsr $8318		jsr	AssembleGroup1
>a8a3		e1					.byte $e1
.a8a4						Assemble_asl:
.a8a4		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8a7		02					.byte $02
>a8a8		75					.byte $75
.a8a9						Assemble_rol:
.a8a9		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8ac		22					.byte $22
>a8ad		75					.byte $75
.a8ae						Assemble_lsr:
.a8ae		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8b1		42					.byte $42
>a8b2		75					.byte $75
.a8b3						Assemble_ror:
.a8b3		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8b6		62					.byte $62
>a8b7		75					.byte $75
.a8b8						Assemble_stx:
.a8b8		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8bb		82					.byte $82
>a8bc		50					.byte $50
.a8bd						Assemble_ldx:
.a8bd		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8c0		a2					.byte $a2
>a8c1		d0					.byte $d0
.a8c2						Assemble_dec:
.a8c2		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8c5		c2					.byte $c2
>a8c6		55					.byte $55
.a8c7						Assemble_inc:
.a8c7		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8ca		e2					.byte $e2
>a8cb		55					.byte $55
.a8cc						Assemble_stz:
.a8cc		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8cf		60					.byte $60
>a8d0		44					.byte $44
.a8d1						Assemble_bit:
.a8d1		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8d4		20					.byte $20
>a8d5		55					.byte $55
.a8d6						Assemble_sty:
.a8d6		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8d9		80					.byte $80
>a8da		54					.byte $54
.a8db						Assemble_ldy:
.a8db		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8de		a0					.byte $a0
>a8df		d5					.byte $d5
.a8e0						Assemble_cpy:
.a8e0		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8e3		c0					.byte $c0
>a8e4		d4					.byte $d4
.a8e5						Assemble_cpx:
.a8e5		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8e8		e0					.byte $e0
>a8e9		d0					.byte $d0
.a8ea						Assemble_tsb:
.a8ea		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8ed		00					.byte $00
>a8ee		50					.byte $50
.a8ef						Assemble_trb:
.a8ef		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8f2		10					.byte $10
>a8f3		50					.byte $50
.a8f4						Assemble_jsr:
.a8f4		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8f7		14					.byte $14
>a8f8		10					.byte $10
.a8f9						Assemble_jmp:
.a8f9		20 1f 83	jsr $831f		jsr	AssembleGroup2
>a8fc		40					.byte $40
>a8fd		10					.byte $10
.a8fe						Assemble_bpl:
.a8fe		20 70 83	jsr $8370		jsr	AssembleGroup3
>a901		10					.byte $10
.a902						Assemble_bmi:
.a902		20 70 83	jsr $8370		jsr	AssembleGroup3
>a905		30					.byte $30
.a906						Assemble_bvc:
.a906		20 70 83	jsr $8370		jsr	AssembleGroup3
>a909		50					.byte $50
.a90a						Assemble_bvs:
.a90a		20 70 83	jsr $8370		jsr	AssembleGroup3
>a90d		70					.byte $70
.a90e						Assemble_bcc:
.a90e		20 70 83	jsr $8370		jsr	AssembleGroup3
>a911		90					.byte $90
.a912						Assemble_bcs:
.a912		20 70 83	jsr $8370		jsr	AssembleGroup3
>a915		b0					.byte $b0
.a916						Assemble_bne:
.a916		20 70 83	jsr $8370		jsr	AssembleGroup3
>a919		d0					.byte $d0
.a91a						Assemble_beq:
.a91a		20 70 83	jsr $8370		jsr	AssembleGroup3
>a91d		f0					.byte $f0
.a91e						Assemble_bra:
.a91e		20 70 83	jsr $8370		jsr	AssembleGroup3
>a921		80					.byte $80
.a922						Assemble_brk:
.a922		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a925		00					.byte $00
.a926						Assemble_php:
.a926		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a929		08					.byte $08
.a92a						Assemble_clc:
.a92a		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a92d		18					.byte $18
.a92e						Assemble_plp:
.a92e		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a931		28					.byte $28
.a932						Assemble_sec:
.a932		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a935		38					.byte $38
.a936						Assemble_rti:
.a936		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a939		40					.byte $40
.a93a						Assemble_pha:
.a93a		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a93d		48					.byte $48
.a93e						Assemble_cli:
.a93e		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a941		58					.byte $58
.a942						Assemble_phy:
.a942		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a945		5a					.byte $5a
.a946						Assemble_rts:
.a946		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a949		60					.byte $60
.a94a						Assemble_pla:
.a94a		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a94d		68					.byte $68
.a94e						Assemble_sei:
.a94e		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a951		78					.byte $78
.a952						Assemble_ply:
.a952		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a955		7a					.byte $7a
.a956						Assemble_dey:
.a956		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a959		88					.byte $88
.a95a						Assemble_txa:
.a95a		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a95d		8a					.byte $8a
.a95e						Assemble_tya:
.a95e		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a961		98					.byte $98
.a962						Assemble_txs:
.a962		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a965		9a					.byte $9a
.a966						Assemble_tay:
.a966		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a969		a8					.byte $a8
.a96a						Assemble_tax:
.a96a		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a96d		aa					.byte $aa
.a96e						Assemble_clv:
.a96e		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a971		b8					.byte $b8
.a972						Assemble_tsx:
.a972		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a975		ba					.byte $ba
.a976						Assemble_iny:
.a976		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a979		c8					.byte $c8
.a97a						Assemble_dex:
.a97a		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a97d		ca					.byte $ca
.a97e						Assemble_cld:
.a97e		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a981		d8					.byte $d8
.a982						Assemble_phx:
.a982		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a985		da					.byte $da
.a986						Assemble_stp:
.a986		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a989		db					.byte $db
.a98a						Assemble_inx:
.a98a		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a98d		e8					.byte $e8
.a98e						Assemble_nop:
.a98e		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a991		ea					.byte $ea
.a992						Assemble_sed:
.a992		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a995		f8					.byte $f8
.a996						Assemble_plx:
.a996		20 a4 83	jsr $83a4		jsr	AssembleGroup4
>a999		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a99a						DecimalScalarTable:
>a99a		66 66 66 66				.dword $66666666 ; 0.1
>a99e		de					.byte $de
>a99f		1f 85 eb 51				.dword $51eb851f ; 0.01
>a9a3		db					.byte $db
>a9a4		4c 37 89 41				.dword $4189374c ; 0.001
>a9a8		d8					.byte $d8
>a9a9		ac 8b db 68				.dword $68db8bac ; 0.0001
>a9ad		d4					.byte $d4
>a9ae		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a9b2		d1					.byte $d1
>a9b3		83 de 1b 43				.dword $431bde83 ; 1e-06
>a9b7		ce					.byte $ce
>a9b8		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a9bc		ca					.byte $ca
>a9bd		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a9c1		c7					.byte $c7
>a9c2		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a9c6		c4					.byte $c4
>a9c7		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a9cb		c0					.byte $c0
>a9cc		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a9d0		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a9d1						SyntaxError:
.a9d1		a9 02		lda #$02		lda	#2
.a9d3		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a9d6						RangeError:
.a9d6		a9 04		lda #$04		lda	#4
.a9d8		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a9db						TypeError:
.a9db		a9 05		lda #$05		lda	#5
.a9dd		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a9e0						ArgumentError:
.a9e0		a9 07		lda #$07		lda	#7
.a9e2		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a9e5						NotDoneError:
.a9e5		a9 0c		lda #$0c		lda	#12
.a9e7		4c d2 97	jmp $97d2		jmp	ErrorHandler
.a9ea						ErrorText:
>a9ea		42 72 65 61 6b 00			.text	"Break",0
>a9f0		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a9f8		72 72 6f 72 00
>a9fd		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aa05		20 62 79 20 7a 65 72 6f 00
>aa0e		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aa16		61 6e 67 65 00
>aa1b		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aa23		6d 61 74 63 68 00
>aa29		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aa31		65 6d 6f 72 79 00
>aa37		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>aa3f		61 72 67 75 6d 65 6e 74 00
>aa48		53 74 6f 70 00				.text	"Stop",0
>aa4d		53 74 72 69 6e 67 20 74			.text	"String too long",0
>aa55		6f 6f 20 6c 6f 6e 67 00
>aa5d		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>aa65		6e 20 66 61 69 6c 65 64 00
>aa6e		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>aa76		61 74 61 00
>aa7a		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>aa82		65 6e 74 65 64 00
>aa88		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>aa90		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>aa9c		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>aaa4		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>aab1		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aab9		74 68 6f 75 74 20 52 65 70 65 61 74 00
>aac6		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>aace		68 6f 75 74 20 57 68 69 6c 65 00
>aad9		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>aae1		68 6f 75 74 20 46 6f 72 00
>aaea		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>aaf2		61 63 6b 20 66 75 6c 6c 00
>aafb		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ab03		75 63 74 75 72 65 00
>ab0a		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ab12		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ab1f		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ab27		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ab35		41 72 72 61 79 20 73 69			.text	"Array size",0
>ab3d		7a 65 00
>ab40		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ab48		79 20 69 6e 64 65 78 00
>ab50		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>ab58		74 20 64 65 63 6c 61 72 65 64 00
>ab63		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>ab6b		20 66 6f 75 6e 64 00
>ab72		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>ab7a		65 72 72 6f 72 00
>ab80		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>ab88		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc65		09 09 32 37 2f 30 31 2f			.text 9,9,"27/01/23 32"
>dc6d		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.ab8e						MemoryDeleteLine:
.ab8e		20 ad ab	jsr $abad			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ab91		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ab93		a8		tay				tay
.ab94						_MDDLLoop:
.ab94		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ab96		92 30		sta ($30)			sta 	(codePtr)
.ab98		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ab9a		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ab9c		d0 07		bne $aba5			bne 	_MDLDLNext
.ab9e		a5 31		lda $31				lda 	codePtr+1
.aba0		c5 3b		cmp $3b				cmp 	zTemp2+1
.aba2		d0 01		bne $aba5			bne 	_MDLDLNext
.aba4						_MDDLExit:
.aba4		60		rts				rts
.aba5						_MDLDLNext:
.aba5		e6 30		inc $30				inc 	codePtr						; next byte
.aba7		d0 eb		bne $ab94			bne 	_MDDLLoop
.aba9		e6 31		inc $31				inc 	codePtr+1
.abab		80 e7		bra $ab94			bra 	_MDDLLoop
.abad						IMemoryFindEnd:
.abad		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.abaf		85 3a		sta $3a				sta 	0+zTemp2
.abb1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.abb3		85 3b		sta $3b				sta 	1+zTemp2
.abb5						_MDLFELoop:
.abb5		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.abb7		f0 0b		beq $abc4			beq 	_MDLFEExit
.abb9		18		clc				clc
.abba		65 3a		adc $3a				adc 	zTemp2
.abbc		85 3a		sta $3a				sta 	zTemp2
.abbe		90 f5		bcc $abb5			bcc 	_MDLFELoop
.abc0		e6 3b		inc $3b				inc 	zTemp2+1
.abc2		80 f1		bra $abb5			bra 	_MDLFELoop
.abc4						_MDLFEExit:
.abc4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.abc5						MemoryInsertLine:
.abc5		08		php				php
.abc6		20 ad ab	jsr $abad			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.abc9		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.abcb		1a		inc a				inc 	a
.abcc		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.abce		b0 36		bcs $ac06			bcs 	_MDLIError 					; no, fail.
.abd0		28		plp				plp 								; do at a specific point or the end ?
.abd1		90 08		bcc $abdb			bcc 	_MDLIFound 					; if specific point already set.
.abd3		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.abd5		85 30		sta $30				sta 	codePtr 					; end.
.abd7		a5 3b		lda $3b				lda 	zTemp2+1
.abd9		85 31		sta $31				sta 	codePtr+1
.abdb						_MDLIFound:
.abdb		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.abde		a8		tay				tay
.abdf						_MDLIInsert:
.abdf		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.abe1		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.abe3		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.abe5		c5 3a		cmp $3a				cmp 	zTemp2
.abe7		d0 06		bne $abef			bne 	_MDLINext
.abe9		a5 31		lda $31				lda 	codePtr+1
.abeb		c5 3b		cmp $3b				cmp 	zTemp2+1
.abed		f0 0a		beq $abf9			beq 	_MDLIHaveSpace
.abef						_MDLINext:
.abef		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.abf1		d0 02		bne $abf5			bne 	_MDLINoBorrow
.abf3		c6 3b		dec $3b				dec 	zTemp2+1
.abf5						_MDLINoBorrow:
.abf5		c6 3a		dec $3a				dec 	zTemp2
.abf7		80 e6		bra $abdf			bra 	_MDLIInsert
.abf9						_MDLIHaveSpace:
.abf9		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.abfc		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.abfd						_MDLICopy:
.abfd		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ac00		91 30		sta ($30),y			sta 	(codePtr),y
.ac02		88		dey				dey
.ac03		10 f8		bpl $abfd			bpl 	_MDLICopy
.ac05		60		rts				rts
.ac06						_MDLIError:
.ac06		a9 06		lda #$06		lda	#6
.ac08		4c d2 97	jmp $97d2		jmp	ErrorHandler
.ac0b						MDLAppendLine:
.ac0b		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ac0d		85 36		sta $36				sta 	zTemp0
.ac0f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac11		85 38		sta $38				sta 	0+zTemp1
.ac13		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac15		85 39		sta $39				sta 	1+zTemp1
.ac17		b2 38		lda ($38)			lda 	(zTemp1)
.ac19		d0 0a		bne $ac25			bne 	_MDLANoInitialise
.ac1b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac1d		8d 96 07	sta $0796			sta 	0+AppendPointer
.ac20		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac22		8d 97 07	sta $0797			sta 	1+AppendPointer
.ac25						_MDLANoInitialise:
.ac25		18		clc				clc
.ac26		ad 96 07	lda $0796			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ac29		85 38		sta $38				sta 	zTemp1
.ac2b		72 36		adc ($36)			adc 	(zTemp0)
.ac2d		8d 96 07	sta $0796			sta 	AppendPointer
.ac30		ad 97 07	lda $0797			lda 	AppendPointer+1
.ac33		85 39		sta $39				sta 	zTemp1+1
.ac35		69 00		adc #$00			adc 	#0
.ac37		8d 97 07	sta $0797			sta 	AppendPointer+1
.ac3a		a0 00		ldy #$00			ldy 	#0
.ac3c						_MDLACopy:
.ac3c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ac3e		91 38		sta ($38),y			sta 	(zTemp1),y
.ac40		c8		iny				iny
.ac41		98		tya				tya
.ac42		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ac44		d0 f6		bne $ac3c			bne 	_MDLACopy
.ac46		a9 00		lda #$00			lda 	#0 							; end of program.
.ac48		91 38		sta ($38),y			sta 	(zTemp1),y
.ac4a		60		rts				rts
.0796						AppendPointer:
>0796								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.ac4b						MemoryNew:
.ac4b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac4d		85 30		sta $30				sta 	codePtr
.ac4f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac51		85 31		sta $31				sta 	codePtr+1
.ac53		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ac55		92 30		sta ($30)			sta 	(codePtr)
.ac57		60		rts				rts
.ac58						MemoryInline:
.ac58		98		tya				tya 								; put address into stack,x
.ac59		18		clc				clc  								; get the offset, add codePtr
.ac5a		65 30		adc $30				adc 	codePtr
.ac5c		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ac5e		a5 31		lda $31				lda 	codePtr+1
.ac60		69 00		adc #$00			adc 	#0
.ac62		95 60		sta $60,x			sta 	NSMantissa1,x
.ac64		74 68		stz $68,x			stz 	NSMantissa2,x
.ac66		74 70		stz $70,x			stz 	NSMantissa3,x
.ac68		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.ac69						MemorySearch:
.ac69		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ac6b		86 37		stx $37				stx 	zTemp0+1
.ac6d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac6f		85 30		sta $30				sta 	codePtr
.ac71		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac73		85 31		sta $31				sta 	codePtr+1
.ac75						_MTAXLoop:
.ac75		b2 30		lda ($30)			lda 	(codePtr)
.ac77		18		clc				clc
.ac78		f0 21		beq $ac9b			beq 	_MTAXExit 					; reached end, exit with CC.
.ac7a		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ac7c		b1 30		lda ($30),y			lda 	(codePtr),y
.ac7e		38		sec				sec
.ac7f		e5 36		sbc $36				sbc 	zTemp0
.ac81		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ac83		c8		iny				iny 								; do the MSB
.ac84		b1 30		lda ($30),y			lda 	(codePtr),y
.ac86		e5 37		sbc $37				sbc 	zTemp0+1
.ac88		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ac8a		f0 0f		beq $ac9b			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ac8c		b0 0d		bcs $ac9b			bcs 	_MTAXExit 					; current < required exit
.ac8e		18		clc				clc
.ac8f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ac91		65 30		adc $30				adc 	codePtr
.ac93		85 30		sta $30				sta 	codePtr
.ac95		90 02		bcc $ac99			bcc 	_CREExit
.ac97		e6 31		inc $31				inc 	codePtr+1 					; carry
.ac99						_CREExit:
.ac99		80 da		bra $ac75			bra 	_MTAXLoop
.ac9b						_MTAXExit:
.ac9b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.ac9c						RectangleCommand:
.ac9c		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.ac9e		80 02		bra $aca2			bra 	ShapeDrawCmd
.aca0						CircleCommand:
.aca0		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.aca2						ShapeDrawCmd:
.aca2		20 2c ad	jsr $ad2c			jsr 	RunGraphicsCommand
.aca5						ShapeDraw:
.aca5		0d 99 07	ora $0799			ora 	gxFillSolid  				; adjust AXY for solid fill.
.aca8		4c 20 ad	jmp $ad20			jmp 	ExecuteGraphicCommand	 	; and complete
.acab						SpriteCommand:
.acab		a2 00		ldx #$00			ldx 	#0
.acad		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get image number.
.acb0		5a		phy				phy
.acb1		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.acb3		a6 58		ldx $58				ldx 	NSMantissa0
.acb5		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.acb7		b0 0d		bcs $acc6			bcs 	_SCRange
.acb9		a0 ff		ldy #$ff			ldy 	#255
.acbb		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.acbe		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.acc0		7a		ply				ply
.acc1		20 2c ad	jsr $ad2c			jsr 	RunGraphicsCommand
.acc4		80 5a		bra $ad20			bra 	ExecuteGraphicCommand
.acc6						_SCRange:
.acc6		4c d6 a9	jmp $a9d6			jmp 	RangeError
.acc9						ImageCommand:
.acc9		a2 00		ldx #$00			ldx 	#0
.accb		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get image number.
.acce		20 2c ad	jsr $ad2c			jsr 	RunGraphicsCommand
.acd1						ImageRunDraw:
.acd1		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.acd3		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.acd6		ad 9f 07	lda $079f			lda 	gxDrawScale
.acd9		0a		asl a				asl 	a
.acda		0a		asl a				asl 	a
.acdb		0a		asl a				asl 	a
.acdc		a8		tay				tay
.acdd		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.acdf		a6 58		ldx $58				ldx 	NSMantissa0
.ace1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ace4		60		rts				rts
.ace5						TextCommand:
.ace5		a2 00		ldx #$00			ldx 	#0
.ace7		20 84 a6	jsr $a684			jsr 	EvaluateString 				; get text
.acea		20 2c ad	jsr $ad2c			jsr 	RunGraphicsCommand
.aced						TextRunDraw:
.aced		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.acef		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.acf2		a0 00		ldy #$00			ldy 	#0
.acf4						_IRDLoop:
.acf4		a5 60		lda $60				lda 	NSMantissa1 				; access character
.acf6		85 37		sta $37				sta 	zTemp0+1
.acf8		a5 58		lda $58				lda 	NSMantissa0
.acfa		85 36		sta $36				sta 	zTemp0
.acfc		b1 36		lda ($36),y			lda 	(zTemp0),y
.acfe		f0 13		beq $ad13			beq 	_IRDExit
.ad00		5a		phy				phy									; save string pos
.ad01		48		pha				pha 								; save char
.ad02		ad 9f 07	lda $079f			lda 	gxDrawScale 				; get scale
.ad05		0a		asl a				asl 	a
.ad06		0a		asl a				asl 	a
.ad07		0a		asl a				asl 	a
.ad08		a8		tay				tay
.ad09		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.ad0b		fa		plx				plx 								; char to draw
.ad0c		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad0f		7a		ply				ply 								; restore string pos
.ad10		c8		iny				iny
.ad11		90 e1		bcc $acf4			bcc 	_IRDLoop 					; go back if no error.
.ad13						_IRDExit:
.ad13		60		rts				rts
.ad14						PlotCommand:
.ad14		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.ad16		20 2c ad	jsr $ad2c			jsr 	RunGraphicsCommand
.ad19		80 05		bra $ad20			bra 	ExecuteGraphicCommand
.ad1b						LineCommand:
.ad1b		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.ad1d		20 2c ad	jsr $ad2c			jsr 	RunGraphicsCommand
.ad20						ExecuteGraphicCommand:
.ad20		0d 98 07	ora $0798			ora 	gxCommandID 				; make a full command
.ad23		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.ad26		b0 01		bcs $ad29			bcs 	_EGCError
.ad28		60		rts				rts
.ad29						_EGCError:
.ad29		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.ad2c						RunGraphicsCommand:
.ad2c		8d 98 07	sta $0798			sta 	gxCommandID					; save TODO graphics command.
.ad2f		68		pla				pla 								; pop handler address
.ad30		fa		plx				plx
.ad31		1a		inc a				inc 	a
.ad32		d0 01		bne $ad35			bne 	_RGINoCarry
.ad34		e8		inx				inx
.ad35						_RGINoCarry:
.ad35		8d 9d 07	sta $079d			sta 	gxHandler
.ad38		8e 9e 07	stx $079e			stx 	gxHandler+1
.ad3b						_RGICommandLoop:
.ad3b		b1 30		lda ($30),y			lda 	(codePtr),y
.ad3d		c8		iny				iny
.ad3e		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.ad40		f0 53		beq $ad95			beq 	_RGI_To
.ad42		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.ad44		f0 55		beq $ad9b			beq 	_RGI_Here
.ad46		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.ad48		f0 3d		beq $ad87			beq 	_RGI_Exit
.ad4a		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.ad4c		f0 39		beq $ad87			beq 	_RGI_Exit
.ad4e		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.ad50		f0 3e		beq $ad90			beq 	_RGI_Frame
.ad52		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.ad54		f0 33		beq $ad89			beq 	_RGI_Solid
.ad56		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.ad58		f0 4b		beq $ada5			beq 	_RGI_By
.ad5a		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.ad5c		f0 17		beq $ad75			beq 	_RGI_Move2
.ad5e		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.ad60		f0 62		beq $adc4			beq 	_RGI_Dim
.ad62		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.ad64		f0 74		beq $adda			beq 	_RGI_Colour
.ad66		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.ad68		f0 70		beq $adda			beq 	_RGI_Colour
.ad6a		ae 98 07	ldx $0798			ldx 	gxCommandID
.ad6d		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.ad6f		d0 03		bne $ad74			bne 	_RGI_Move 					; move
.ad71		4c 02 ae	jmp $ae02			jmp		_RGI_SpriteInstructions
.ad74						_RGI_Move:
.ad74		88		dey				dey 								; unpick get.
.ad75						_RGI_Move2:
.ad75		20 28 ae	jsr $ae28			jsr 	GCGetCoordinatePair 		; move to here
.ad78		20 4f ae	jsr $ae4f			jsr 	GCCopyPairToStore 			; save
.ad7b		5a		phy				phy
.ad7c		20 45 ae	jsr $ae45			jsr 	GCLoadAXY 					; load in
.ad7f		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.ad81		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad84		7a		ply				ply
.ad85		80 b4		bra $ad3b			bra 	_RGICommandLoop 			; and go round
.ad87						_RGI_Exit:
.ad87		88		dey				dey 								; unpick : / EOL
.ad88		60		rts				rts
.ad89						_RGI_Solid:
.ad89		a9 02		lda #$02			lda 	#2
.ad8b		8d 99 07	sta $0799			sta 	gxFillSolid
.ad8e		80 ab		bra $ad3b			bra 	_RGICommandLoop
.ad90						_RGI_Frame:
.ad90		9c 99 07	stz $0799			stz 	gxFillSolid
.ad93		80 a6		bra $ad3b			bra 	_RGICommandLoop
.ad95						_RGI_To:
.ad95		20 28 ae	jsr $ae28			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.ad98		20 4f ae	jsr $ae4f			jsr 	GCCopyPairToStore
.ad9b						_RGI_Here:
.ad9b		5a		phy				phy
.ad9c		20 45 ae	jsr $ae45			jsr 	GCLoadAXY 					; load it into AXY
.ad9f		20 ff ad	jsr $adff			jsr 	_RGICallHandler 			; go do whatever it is.
.ada2		7a		ply				ply
.ada3		80 96		bra $ad3b			bra 	_RGICommandLoop 			; and go round
.ada5						_RGI_By:
.ada5		20 35 ae	jsr $ae35			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.ada8		18		clc				clc
.ada9		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.adab		6d 9a 07	adc $079a			adc 	gxXPos
.adae		8d 9a 07	sta $079a			sta 	gxXPos
.adb1		a5 61		lda $61				lda 	NSMantissa1+1
.adb3		6d 9b 07	adc $079b			adc 	gxXPos+1
.adb6		8d 9b 07	sta $079b			sta 	gxXPos+1
.adb9		a5 5a		lda $5a				lda 	NSMantissa0+2
.adbb		18		clc				clc
.adbc		6d 9c 07	adc $079c			adc 	gxYPos
.adbf		8d 9c 07	sta $079c			sta 	gxYPos
.adc2		80 d7		bra $ad9b			bra 	_RGI_Here
.adc4						_RGI_Dim:
.adc4		a2 01		ldx #$01			ldx	 	#1
.adc6		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.adc9		a5 59		lda $59				lda 	NSMantissa0+1
.adcb		c9 00		cmp #$00			cmp 	#0
.adcd		f0 2d		beq $adfc			beq 	_RGIRange
.adcf		c9 09		cmp #$09			cmp 	#8+1
.add1		b0 29		bcs $adfc			bcs		_RGIRange
.add3		3a		dec a				dec 	a
.add4		8d 9f 07	sta $079f			sta 	gxDrawScale
.add7		4c 3b ad	jmp $ad3b			jmp 	_RGICommandLoop
.adda						_RGI_Colour:
.adda		a2 01		ldx #$01			ldx 	#1 							; colour
.addc		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.addf		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.ade1		20 2c a7	jsr $a72c			jsr 	NSMSetZero
.ade4		b1 30		lda ($30),y			lda 	(codePtr),y
.ade6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.ade8		d0 04		bne $adee			bne 	_RGICDefaultMode
.adea		c8		iny				iny
.adeb		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.adee						_RGICDefaultMode:
.adee		5a		phy				phy
.adef		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.adf1		a6 59		ldx $59				ldx 	NSMantissa0+1
.adf3		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.adf5		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.adf8		7a		ply				ply
.adf9		4c 3b ad	jmp $ad3b			jmp 	_RGICommandLoop 			; and go round
.adfc						_RGIRange:
.adfc		4c d6 a9	jmp $a9d6			jmp 	RangeError
.adff						_RGICallHandler:
.adff		6c 9d 07	jmp ($079d)			jmp 	(gxHandler)
.ae02						_RGI_SpriteInstructions:
.ae02		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.ae04		f0 07		beq $ae0d			beq 	_RGISpriteOff
.ae06		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.ae08		f0 13		beq $ae1d			beq 	_RGISetImage
.ae0a		4c 74 ad	jmp $ad74			jmp 	_RGI_Move
.ae0d						_RGISpriteOff:
.ae0d		5a		phy				phy
.ae0e		a0 01		ldy #$01			ldy 	#1
.ae10		a2 00		ldx #$00			ldx 	#0
.ae12						_RGIDoCommandLoop:
.ae12		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.ae14		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae17		7a		ply				ply
.ae18		b0 e2		bcs $adfc			bcs 	_RGIRange
.ae1a		4c 3b ad	jmp $ad3b			jmp 	_RGICommandLoop
.ae1d						_RGISetImage:
.ae1d		a2 01		ldx #$01			ldx 	#1
.ae1f		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger
.ae22		5a		phy				phy
.ae23		aa		tax				tax
.ae24		a0 00		ldy #$00			ldy 	#0
.ae26		80 ea		bra $ae12			bra 	_RGIDoCommandLoop
.ae28						GCGetCoordinatePair:
.ae28		a2 01		ldx #$01			ldx 	#1
.ae2a		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.ae2d		20 c1 97	jsr $97c1			jsr 	CheckComma
.ae30		e8		inx				inx
.ae31		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger
.ae34		60		rts				rts
.ae35						GCSignedCoordinatePair:
.ae35		a2 01		ldx #$01			ldx 	#1
.ae37		20 b6 a6	jsr $a6b6			jsr 	Evaluate16BitIntegerSigned
.ae3a		20 c1 97	jsr $97c1			jsr 	CheckComma
.ae3d		e8		inx				inx
.ae3e		20 b6 a6	jsr $a6b6			jsr 	Evaluate16BitIntegerSigned
.ae41		60		rts				rts
.ae42						_GCCPRange:
.ae42		4c d6 a9	jmp $a9d6			jmp 	RangeError
.ae45						GCLoadAXY:
.ae45		ad 9b 07	lda $079b			lda 	gxXPos+1
.ae48		ae 9a 07	ldx $079a			ldx 	gxXPos
.ae4b		ac 9c 07	ldy $079c			ldy 	gxYPos
.ae4e		60		rts				rts
.ae4f						GCCopyPairToStore:
.ae4f		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ae51		8d 9a 07	sta $079a			sta 	gxXPos
.ae54		a5 61		lda $61				lda 	NSMantissa1+1
.ae56		8d 9b 07	sta $079b			sta 	gxXPos+1
.ae59		a5 5a		lda $5a				lda 	NSMantissa0+2
.ae5b		8d 9c 07	sta $079c			sta 	gxYPos
.ae5e		60		rts				rts
.0798						gxCommandID:
>0798								.fill 	1
.0799						gxFillSolid:
>0799								.fill 	1
.079a						gxXPos:
>079a								.fill 	2
.079c						gxYPos:
>079c								.fill 	1
.079d						gxHandler:
>079d								.fill 	2
.079f						gxDrawScale:
>079f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.ae5f						BitmapCtrl:
.ae5f		b1 30		lda ($30),y			lda 	(codePtr),y
.ae61		c8		iny				iny
.ae62		a2 01		ldx #$01			ldx 	#1
.ae64		c9 cc		cmp #$cc			cmp 	#KWD_ON
.ae66		f0 11		beq $ae79			beq 	BitmapSwitch
.ae68		ca		dex				dex
.ae69		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.ae6b		f0 0c		beq $ae79			beq 	BitmapSwitch
.ae6d		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get the colour
.ae70		5a		phy				phy
.ae71		aa		tax				tax
.ae72		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.ae74		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae77		7a		ply				ply
.ae78		60		rts				rts
.ae79						BitmapSwitch:
.ae79		5a		phy				phy
.ae7a		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.ae7c		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.ae7e		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae81		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.ae83		a0 00		ldy #$00			ldy 	#0
.ae85		a2 ff		ldx #$ff			ldx 	#$FF
.ae87		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae8a		9c 99 07	stz $0799			stz 	gxFillSolid
.ae8d		9c 9a 07	stz $079a			stz 	gxXPos
.ae90		9c 9b 07	stz $079b			stz 	gxXPos+1
.ae93		9c 9c 07	stz $079c			stz 	gxYPos
.ae96		9c 9f 07	stz $079f			stz 	gxDrawScale
.ae99		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.ae9b		a2 00		ldx #$00			ldx 	#0
.ae9d		a0 00		ldy #$00			ldy 	#0
.ae9f		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aea2		7a		ply				ply
.aea3		60		rts				rts
.aea4						SpritesCtrl:
.aea4		b1 30		lda ($30),y			lda 	(codePtr),y
.aea6		c8		iny				iny
.aea7		a2 01		ldx #$01			ldx 	#1
.aea9		c9 cc		cmp #$cc			cmp 	#KWD_ON
.aeab		f0 08		beq $aeb5			beq 	SpriteSwitch
.aead		ca		dex				dex
.aeae		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.aeb0		f0 03		beq $aeb5			beq 	SpriteSwitch
.aeb2		4c d1 a9	jmp $a9d1			jmp 	SyntaxError
.aeb5						SpriteSwitch:
.aeb5		5a		phy				phy
.aeb6		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.aeb8		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.aeba		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aebd		7a		ply				ply
.aebe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.aebf						GfxCommand:
.aebf		a2 00		ldx #$00			ldx 	#0
.aec1		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; command
.aec4		20 c1 97	jsr $97c1			jsr 	CheckComma
.aec7		e8		inx				inx
.aec8		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger 		; X
.aecb		20 c1 97	jsr $97c1			jsr 	CheckComma
.aece		e8		inx				inx
.aecf		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; Y
.aed2		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aed4		4a		lsr a				lsr 	a
.aed5		d0 12		bne $aee9			bne 	_GfxError
.aed7		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.aed9		b0 0e		bcs $aee9			bcs 	_GfxError 					; bit 7 should have been zero
.aedb		5a		phy				phy 								; save pos
.aedc		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.aede		a6 59		ldx $59				ldx 	NSMantissa0+1
.aee0		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aee2		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aee5		b0 02		bcs $aee9			bcs 	_GfxError
.aee7		7a		ply				ply 								; restore pos and exit.
.aee8		60		rts				rts
.aee9						_GfxError:
.aee9		4c d6 a9	jmp $a9d6			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.aeec						UnaryHit:
.aeec		fa		plx				plx
.aeed		a9 36		lda #$36			lda 	#zTemp0
.aeef		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get sprite number 0
.aef2		20 c1 97	jsr $97c1			jsr 	CheckComma
.aef5		e8		inx				inx
.aef6		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get sprite number 1
.aef9		20 b9 97	jsr $97b9			jsr		CheckRightBracket
.aefc		ca		dex				dex 								; fix back up again.
.aefd		da		phx				phx 								; save X/Y
.aefe		5a		phy				phy
.aeff		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.af01		b5 58		lda $58,x			lda 	NSMantissa0,x
.af03		aa		tax				tax
.af04		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.af06		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.af09		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.af0a		7a		ply				ply 								; restore XY
.af0b		fa		plx				plx
.af0c		20 2e a7	jsr $a72e			jsr 	NSMSetByte 					; return the hit result
.af0f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.af10						PaletteCommand:
.af10		a2 00		ldx #$00			ldx 	#0
.af12		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; colour
.af15		20 c1 97	jsr $97c1			jsr 	CheckComma
.af18		e8		inx				inx
.af19		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger 		; r
.af1c		20 c1 97	jsr $97c1			jsr 	CheckComma
.af1f		e8		inx				inx
.af20		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; g
.af23		20 c1 97	jsr $97c1			jsr 	CheckComma
.af26		e8		inx				inx
.af27		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; b
.af2a		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.af2c		85 36		sta $36				sta 	zTemp0
.af2e		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.af30		85 37		sta $37				sta 	zTemp0+1
.af32		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.af34		26 37		rol $37				rol	 	zTemp0+1
.af36		06 36		asl $36				asl 	zTemp0
.af38		26 37		rol $37				rol	 	zTemp0+1
.af3a		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.af3c		85 01		sta $01				sta 	1
.af3e		5a		phy				phy
.af3f		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.af41		92 36		sta ($36)			sta 	(zTemp0)
.af43		a0 01		ldy #$01			ldy 	#1
.af45		a5 5a		lda $5a				lda 	NSMantissa0+2
.af47		91 36		sta ($36),y			sta 	(zTemp0),y
.af49		a5 59		lda $59				lda 	NSMantissa0+1
.af4b		c8		iny				iny
.af4c		91 36		sta ($36),y			sta 	(zTemp0),y
.af4e		7a		ply				ply
.af4f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.af50						ClearScreen:
.af50		5a		phy				phy
.af51		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.af53		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.af56		7a		ply				ply
.af57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.af58						PingCommand:
.af58		5a		phy				phy 								; save pos
.af59		a9 01		lda #$01			lda 	#1 						; push channel.
.af5b		48		pha				pha
.af5c		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.af5e		a2 06		ldx #$06			ldx 	#6 						; length
.af60		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af62		80 24		bra $af88			bra 	SoundEffectCommand
.af64						ZapCommand:
.af64		5a		phy				phy 								; save pos
.af65		a9 01		lda #$01			lda 	#1 						; push channel.
.af67		48		pha				pha
.af68		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.af6a		a2 0a		ldx #$0a			ldx 	#10 						; length
.af6c		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.af6e		80 18		bra $af88			bra 	SoundEffectCommand
.af70						ShootCommand:
.af70		5a		phy				phy 								; save pos
.af71		a9 03		lda #$03			lda 	#3 						; push channel.
.af73		48		pha				pha
.af74		a9 20		lda #$20			lda 	#32 						; pitch LSB
.af76		a2 04		ldx #$04			ldx 	#4 						; length
.af78		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af7a		80 0c		bra $af88			bra 	SoundEffectCommand
.af7c						Explode:
.af7c		5a		phy				phy 								; save pos
.af7d		a9 03		lda #$03			lda 	#3 						; push channel.
.af7f		48		pha				pha
.af80		a9 50		lda #$50			lda 	#80 						; pitch LSB
.af82		a2 0a		ldx #$0a			ldx 	#10 						; length
.af84		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af86		80 00		bra $af88			bra 	SoundEffectCommand
.af88						SoundEffectCommand:
.af88		8d a0 07	sta $07a0			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.af8b		9c a1 07	stz $07a1			stz 	SoundCommandBlock+1
.af8e		a9 0f		lda #$0f			lda 	#15
.af90		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2
.af93		8e a3 07	stx $07a3			stx 	SoundCommandBlock+3
.af96		8c a4 07	sty $07a4			sty 	SoundCommandBlock+4
.af99		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.af9c		68		pla				pla
.af9d		09 10		ora #$10			ora 	#$10  						; execute command $11
.af9f		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.afa1		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.afa3		20 75 80	jsr $8075			jsr 	SNDCommand
.afa6		7a		ply				ply
.afa7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.afa8						UnaryPlaying:
.afa8		fa		plx				plx
.afa9		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; get channel #
.afac		48		pha				pha
.afad		20 b9 97	jsr $97b9			jsr		CheckRightBracket
.afb0		68		pla				pla
.afb1		c9 04		cmp #$04			cmp 	#4
.afb3		b0 0c		bcs $afc1			bcs 	_UPNotPlaying
.afb5		09 20		ora #$20			ora 	#$20 						; query playing ?
.afb7		20 75 80	jsr $8075			jsr 	SNDCommand
.afba		c9 00		cmp #$00			cmp 	#0
.afbc		f0 03		beq $afc1			beq 	_UPNotPlaying
.afbe		4c 3f 98	jmp $983f			jmp 	ReturnTrue
.afc1						_UPNotPlaying:
.afc1		4c 4a 98	jmp $984a			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.afc4						SoundCommand:
.afc4		b1 30		lda ($30),y			lda 	(codePtr),y
.afc6		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.afc8		d0 09		bne $afd3			bne 	_SNDMain
.afca		c8		iny				iny 								; skip OFF
.afcb		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.afcd		5a		phy				phy
.afce		20 75 80	jsr $8075			jsr 	SNDCommand
.afd1		7a		ply				ply
.afd2		60		rts				rts
.afd3						_SNDMain:
.afd3		a2 00		ldx #$00			ldx 	#0
.afd5		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; channel
.afd8		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.afda		b0 4b		bcs $b027			bcs 	_SndError
.afdc		e8		inx				inx 								; do the rest in slot 1.
.afdd		20 c1 97	jsr $97c1			jsr 	CheckComma
.afe0		20 ac a6	jsr $a6ac			jsr 	Evaluate16BitInteger 		; Pitch
.afe3		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.afe5		c9 10		cmp #$10			cmp 	#16
.afe7		b0 3e		bcs $b027			bcs 	_SndError
.afe9		8d a1 07	sta $07a1			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.afec		b5 58		lda $58,x			lda 	NSMantissa0,x
.afee		8d a0 07	sta $07a0			sta 	SoundCommandBlock
.aff1		20 c1 97	jsr $97c1			jsr 	CheckComma
.aff4		20 c7 a6	jsr $a6c7			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.aff7		8d a3 07	sta $07a3			sta 	SoundCommandBlock+3
.affa		a9 0f		lda #$0f			lda 	#15
.affc		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.afff		9c a4 07	stz $07a4			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b002		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.b005		b1 30		lda ($30),y			lda 	(codePtr),y
.b007		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b009		d0 0e		bne $b019			bne 	_SNDPlay
.b00b		c8		iny				iny
.b00c		20 b6 a6	jsr $a6b6			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b00f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b011		8d a4 07	sta $07a4			sta 	SoundCommandBlock+4
.b014		b5 60		lda $60,x			lda 	NSMantissa1,x
.b016		8d a5 07	sta $07a5			sta 	SoundCommandBlock+5
.b019						_SNDPlay:
.b019		5a		phy				phy
.b01a		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b01c		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b01e		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.b020		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b022		20 75 80	jsr $8075			jsr 	SNDCommand
.b025		7a		ply				ply
.b026		60		rts				rts
.b027						_SndError:
.b027		4c d6 a9	jmp $a9d6			jmp 	RangeError
.07a0						SoundCommandBlock:
>07a0								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b02a						StackPushByte:
.b02a		48		pha				pha 								; save byte on stack
.b02b		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b02d		d0 08		bne $b037			bne 	_SPBNoBorrow
.b02f		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b031		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b033		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b035		90 06		bcc $b03d			bcc 	_SPBMemory
.b037						_SPBNoBorrow:
.b037		c6 34		dec $34				dec 	basicStack
.b039		68		pla				pla 								; get back and write
.b03a		92 34		sta ($34)			sta 	(basicStack)
.b03c		60		rts				rts
.b03d						_SPBMemory:
.b03d		a9 12		lda #$12		lda	#18
.b03f		4c d2 97	jmp $97d2		jmp	ErrorHandler
.b042						StackPopByte:
.b042		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b044		e6 34		inc $34				inc 	basicStack
.b046		d0 02		bne $b04a			bne 	_SPBNoCarry
.b048		e6 35		inc $35				inc 	basicStack+1
.b04a						_SPBNoCarry:
.b04a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b04b						StackOpen:
.b04b		48		pha				pha 								; save frame byte
.b04c		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b04e		0a		asl a				asl 	a 							; claim twice this for storage
.b04f		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b051		38		sec				sec 								; so basically subtracting from
.b052		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b054		85 34		sta $34				sta 	basicStack
.b056		b0 09		bcs $b061			bcs 	_SONoBorrow
>b058		db						.byte 	$DB 						; causes a break in the emulator
.b059		c6 35		dec $35				dec 	basicStack+1
.b05b		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b05d		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b05f		90 04		bcc $b065			bcc 	_SOMemory
.b061						_SONoBorrow:
.b061		68		pla				pla 								; get marker back and write at TOS
.b062		92 34		sta ($34)			sta 	(basicStack)
.b064		60		rts				rts
.b065						_SOMemory:
.b065		a9 12		lda #$12		lda	#18
.b067		4c d2 97	jmp $97d2		jmp	ErrorHandler
.b06a						StackClose:
.b06a		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b06c		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b06e		0a		asl a				asl 	a 							; claim twice this.
.b06f		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b071		85 34		sta $34				sta 	basicStack
.b073		90 02		bcc $b077			bcc 	_SCExit
.b075		e6 35		inc $35				inc 	basicStack+1
.b077						_SCExit:
.b077		60		rts				rts
.b078						StackCheckFrame:
.b078		48		pha				pha
.b079						_StackRemoveLocals:
.b079		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b07b		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b07d		b0 05		bcs $b084			bcs 	_SCNoLocal
.b07f		20 9c 90	jsr $909c			jsr 	LocalPopValue 				; restore the local value
.b082		80 f5		bra $b079			bra 	_StackRemoveLocals 			; gr round again
.b084						_SCNoLocal:
.b084		68		pla				pla 								; get the frame check.
.b085		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b087		29 f0		and #$f0			and 	#$F0 						; check type bits
.b089		d0 01		bne $b08c			bne 	_SCFError 					; different, we have structures mixed up
.b08b		60		rts				rts
.b08c						_SCFError:
.b08c		8a		txa				txa 								; report error X
.b08d		4c d2 97	jmp $97d2			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b090						STKSaveCodePosition:
.b090		5a		phy				phy
.b091		98		tya				tya 								; save Y
.b092		a0 05		ldy #$05			ldy 	#5
.b094		91 34		sta ($34),y			sta 	(basicStack),y
.b096		88		dey				dey 								; save Code Pointer
.b097						_STKSaveLoop:
.b097		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b09a		91 34		sta ($34),y			sta 	(basicStack),y
.b09c		88		dey				dey
.b09d		d0 f8		bne $b097			bne 	_STKSaveLoop
.b09f		7a		ply				ply
.b0a0		60		rts				rts
.b0a1						STKLoadCodePosition:
.b0a1		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b0a3						_STKLoadLoop:
.b0a3		b1 34		lda ($34),y			lda 	(basicStack),y
.b0a5		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b0a8		c8		iny				iny
.b0a9		c0 05		cpy #$05			cpy 	#5
.b0ab		d0 f6		bne $b0a3			bne 	_STKLoadLoop
.b0ad		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b0af		a8		tay				tay
.b0b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b0b1						StackReset:
.b0b1		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b0b3		85 34		sta $34				sta 	0+basicStack
.b0b5		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b0b7		85 35		sta $35				sta 	1+basicStack
.b0b9		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b0bb		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b0bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b0be						StringConcrete:
.b0be		5a		phy				phy 								; save position on stack
.b0bf		20 0c a3	jsr $a30c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b0c2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b0c4		85 38		sta $38				sta 	zTemp1
.b0c6		b5 60		lda $60,x			lda 	NSMantissa1,x
.b0c8		85 39		sta $39				sta 	zTemp1+1
.b0ca		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b0cc						_SALength:
.b0cc		c8		iny				iny
.b0cd		b1 38		lda ($38),y			lda 	(zTemp1),y
.b0cf		d0 fb		bne $b0cc			bne 	_SALength
.b0d1		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b0d3		b0 3d		bcs $b112			bcs 	_SALengthError
.b0d5		98		tya				tya 				 				; length of the new string
.b0d6		18		clc				clc
.b0d7		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b0d9		90 02		bcc $b0dd			bcc 	_SAHaveLength
.b0db		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b0dd						_SAHaveLength:
.b0dd		48		pha				pha 								; save length.
.b0de		38		sec				sec
.b0df		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b0e1		6d 0a 04	adc $040a			adc 	stringMemory
.b0e4		8d 0a 04	sta $040a			sta 	stringMemory
.b0e7		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b0e9		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b0eb		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b0ed		6d 0b 04	adc $040b			adc 	stringMemory+1
.b0f0		8d 0b 04	sta $040b			sta 	stringMemory+1
.b0f3		85 3b		sta $3b				sta 	zTemp2+1
.b0f5		95 60		sta $60,x			sta 	NSMantissa1,x
.b0f7		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b0f8		38		sec				sec
.b0f9		e9 03		sbc #$03			sbc 	#3
.b0fb		92 3a		sta ($3a)			sta 	(zTemp2)
.b0fd		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b0ff		a0 01		ldy #$01			ldy 	#1
.b101		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b103						_SACopyNewString:
.b103		a0 00		ldy #$00			ldy 	#0
.b105						_SACopyNSLoop:
.b105		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b107		c8		iny				iny 								; write two on in string storage
.b108		c8		iny				iny
.b109		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b10b		88		dey				dey 								; this makes it one one.
.b10c		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b10e		d0 f5		bne $b105			bne 	_SACopyNSLoop
.b110		7a		ply				ply
.b111		60		rts				rts
.b112						_SALengthError:
.b112		a9 09		lda #$09		lda	#9
.b114		4c d2 97	jmp $97d2		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b117						StringSystemInitialise:
.b117		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b119		8d 0a 04	sta $040a			sta 	0+stringMemory
.b11c		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b11e		8d 0b 04	sta $040b			sta 	1+stringMemory
.b121		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b124		60		rts				rts
.b125						StringSpaceInitialise:
.b125		20 0c a3	jsr $a30c			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b128		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b12a		8d 0c 04	sta $040c			sta 	stringInitialised
.b12d		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b130		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b133		ad 0b 04	lda $040b			lda 	stringMemory+1
.b136		3a		dec a				dec 	a
.b137		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b13a		60		rts				rts
.b13b						StringTempAllocate:
.b13b		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b13d		b0 30		bcs $b16f			bcs 	_STALength
.b13f		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b142		30 05		bmi $b149			bmi 	_STAAllocate
.b144		48		pha				pha 								; save value to subtract.
.b145		20 25 b1	jsr $b125			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b148		68		pla				pla 								; restore it
.b149						_STAAllocate:
.b149		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b14b		18		clc				clc  								; deliberate allows one more
.b14c		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b14f		8d 0d 04	sta $040d			sta 	stringTempPointer
.b152		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b154		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b156		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b159		69 ff		adc #$ff			adc 	#$FF
.b15b		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b15e		85 3d		sta $3d				sta 	zsTemp+1
.b160		95 60		sta $60,x			sta 	NSMantissa1,x
.b162		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b164		74 70		stz $70,x			stz 	NSMantissa3,x
.b166		a9 10		lda #$10			lda 	#NSTString
.b168		95 50		sta $50,x			sta 	NSStatus,x
.b16a		a9 00		lda #$00			lda 	#0 							; clear the target string
.b16c		92 3c		sta ($3c)			sta 	(zsTemp)
.b16e		60		rts				rts
.b16f						_STALength:
.b16f		a9 09		lda #$09		lda	#9
.b171		4c d2 97	jmp $97d2		jmp	ErrorHandler
.b174						StringTempWrite:
.b174		48		pha				pha
.b175		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b177		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b179		d0 02		bne $b17d			bne 	_STWNoCarry
.b17b		e6 3d		inc $3d				inc 	zsTemp+1
.b17d						_STWNoCarry:
.b17d		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b17f		92 3c		sta ($3c)			sta 	(zsTemp)
.b181		68		pla				pla
.b182		60		rts				rts

;******  Return to file: _basic.asm

.b183						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad a8 07	lda $07a8			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c a7 07	sty $07a7			sty 	EXTColumn
.c02d	a02d	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee a6 07	inc $07a6			inc 	EXTRow  					; bump row
.c035	a035	9c a7 07	stz $07a7			stz 	EXTColumn 					; back to column 0
.c038	a038	ad a6 07	lda $07a6			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd aa 07	cmp $07aa			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce a7 07	dec $07a7			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c a7 07	stz $07a7			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce a6 07	dec $07a6			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad a6 07	lda $07a6			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce a6 07	dec $07a6			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed a9 07	sbc $07a9			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c a7 07	sty $07a7			sty 	EXTColumn
.c08c	a08c	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c a7 07	sty $07a7			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad aa 07	lda $07aa			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd a6 07	cmp $07a6			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee a6 07	inc $07a6			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad a7 07	lda $07a7			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d a7 07	sta $07a7			sta 	EXTColumn
.c0c9	a0c9	cd a9 07	cmp $07a9			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce a7 07	dec $07a7			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d a8 07	and $07a8			and 	EXTTextColour 				; mask out old.
.c135	a135	8d a8 07	sta $07a8			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d a8 07	ora $07a8			ora 	EXTTextColour
.c13c	a13c	8d a8 07	sta $07a8			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad a8 07	lda $07a8			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad a8 07	lda $07a8			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c a6 07	stz $07a6			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c a7 07	stz $07a7			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad a7 07	lda $07a7			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad a6 07	lda $07a6			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 8e 81	jsr $818e			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad a7 07	lda $07a7			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc a7 07	cpy $07a7			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad a9 07	lda $07a9			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07a6						EXTRow:
>07a6								.fill 	1
.07a7						EXTColumn:
>07a7								.fill 	1
.07a8						EXTTextColour:
>07a8								.fill 	1
.07a9						EXTScreenWidth:
>07a9								.fill 	1
.07aa						EXTScreenHeight:
>07aa								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d a8 07	sta $07a8			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d a9 07	sta $07a9			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d aa 07	sta $07aa			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad a6 07	lda $07a6			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07ab						gxCurrentX:
>07ab								.fill 	2
.07ad						gxCurrentY:
>07ad								.fill 	2
.07af						gxLastX:
>07af								.fill 	2
.07b1						gxLastY:
>07b1								.fill 	2
.07b3						gxX0:
>07b3								.fill 	2
.07b5						gxY0:
>07b5								.fill 	2
.07b7						gxX1:
>07b7								.fill 	2
.07b9						gxY1:
>07b9								.fill 	2
.07bb						gxSpritesOn:
>07bb								.fill 	1
.07bc						gxBitmapsOn:
>07bc								.fill 	1
.07bd						gxBasePage:
>07bd								.fill 	1
.07be						gxSpritePage:
>07be								.fill 	1
.07bf						gxHeight:
>07bf								.fill 	1
.07c0						gxMode:
>07c0								.fill 	1
.07c1						gxColour:
>07c1								.fill 	1
.07c2						gxEORValue:
>07c2								.fill 	1
.07c3						gxANDValue:
>07c3								.fill 	1
.07c4						gxOriginalLUTValue:
>07c4								.fill 	1
.07c5						gxOffset:
>07c5								.fill 	1
.07c6						GSCurrentSpriteID:
>07c6								.fill 	1
.07c7						GSCurrentSpriteAddr:
>07c7								.fill 	2
.07c9						gxSpriteOffsetBase:
>07c9								.fill 	2
.07cb						gxSpriteLow:
>07cb								.fill 	64
.080b						gxSpriteHigh:
>080b								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d af 07	sta $07af,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d ad 07	sta $07ad			sta 	gxCurrentY
.c7e7	a7e7	9c ae 07	stz $07ae			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d ab 07	sta $07ab			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d ac 07	sta $07ac			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad ac 07	lda $07ac			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad ab 07	lda $07ab			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad ad 07	lda $07ad			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd bf 07	cmp $07bf			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c819	a819	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 4e 08	sta $084e			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 4f 08	stz $084f			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 4c 08	lda $084c			lda 	gxxCentre					; while x <= y
.c848	a848	cd 4d 08	cmp $084d			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 4d 08	lda $084d			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 4c 08	lda $084c			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 4d 08	ldx $084d			ldx	 	gxYCentre
.c875	a875	8d 4d 08	sta $084d			sta 	gxYCentre
.c878	a878	8e 4c 08	stx $084c			stx 	gxxCentre
.c87b	a87b	ad 4f 08	lda $084f			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 4f 08	sta $084f			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 4e 08	lda $084e	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 4f 08	lda $084f			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 4d 08	lda $084d			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 4c 08	lda $084c			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 4e 08	lda $084e			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8bc	a8bc	8d 4d 08	sta $084d			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c8d3	a8d3	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d b4 07	sta $07b4,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 4f 08	stz $084f			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 4c 08	inc $084c			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 4c 08	lda $084c			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 4c 08	inc $084c			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 4d 08	dec $084d			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 4c 08	lda $084c			lda 	gxxCentre
.c8fc	a8fc	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 4f 08	dec $084f			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad b9 07	lda $07b9			lda 	gxY1
.c935	a935	ed b5 07	sbc $07b5			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 4b 08	sta $084b			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 4c 08	stz $084c			stz 	gxxCentre
.c949	a949	ad 4b 08	lda $084b			lda 	gxRadius
.c94c	a94c	8d 4d 08	sta $084d			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c964	a964	7d b3 07	adc $07b3,x			adc 	gxX0,x
.c967	a967	9d b7 07	sta $07b7,x			sta 	gxX1,x
.c96a	a96a	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c96d	a96d	7d b4 07	adc $07b4,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d b8 07	sta $07b8,x			sta 	gxX1+1,x
.c974	a974	7e b7 07	ror $07b7,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.084b						gxRadius:
>084b								.fill 	1
.084c						gxxCentre:
>084c								.fill 	1
.084d						gxYCentre:
>084d								.fill 	1
.084e						gxIsFillMode:
>084e								.fill 	1
.084f						gxYChanged:
>084f								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad bf 07	lda $07bf			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d bd 07	adc $07bd			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd bd 07	cmp $07bd			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c bb 07	stz $07bb			stz 	gxSpritesOn
.c9d1	a9d1	9c bc 07	stz $07bc			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e ab 07	stz $07ab,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d bc 07	sta $07bc			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d bd 07	sta $07bd			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e bf 07	stx $07bf			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d bb 07	sta $07bb			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d be 07	sta $07be			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d c9 07	sta $07c9			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d ca 07	sta $07ca			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c c8 07	stz $07c8			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 0b 08	stz $080b,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac c5 07	ldy $07c5			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d c3 07	and $07c3			and 	gxANDValue
.ca9e	aa9e	4d c2 07	eor $07c2			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 52 08	lda $0852			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad b3 07	lda $07b3			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d b7 07	eor $07b7			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad b4 07	lda $07b4			lda 	gxX0+1
.cac4	aac4	4d b8 07	eor $07b8			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad b9 07	lda $07b9			lda 	gxY1
.cacb	aacb	4d b5 07	eor $07b5			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 54 08	lda $0854			lda 	gxPosition
.cad3	aad3	6d 55 08	adc $0855			adc 	gxAdjust
.cad6	aad6	8d 54 08	sta $0854			sta 	gxPosition
.cad9	aad9	9c 57 08	stz $0857			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 56 08	cmp $0856			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 57 08	dec $0857			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 56 08	sbc $0856			sbc 	gxTotal
.caea	aaea	8d 54 08	sta $0854			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 52 08	lda $0852			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 57 08	lda $0857			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 57 08	lda $0857			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 53 08	lda $0853			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad b3 07	lda $07b3			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce b4 07	dec $07b4			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce b3 07	dec $07b3			dec 	gxX0
.cb1b	ab1b	ce c5 07	dec $07c5			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad c5 07	lda $07c5			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee b3 07	inc $07b3			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee b4 07	inc $07b4			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee c5 07	inc $07c5			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee b5 07	inc $07b5			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad b9 07	lda $07b9			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed b5 07	sbc $07b5			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 51 08	sta $0851			sta 	gxDiffY
.cb63	ab63	9c 53 08	stz $0853			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad b7 07	lda $07b7			lda 	gxX1
.cb6a	ab6a	ed b3 07	sbc $07b3			sbc 	gxX0
.cb6d	ab6d	8d 50 08	sta $0850			sta 	gxDiffX
.cb70	ab70	ad b8 07	lda $07b8			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 50 08	ror $0850			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 50 08	sbc $0850			sbc 	gxDiffX
.cb83	ab83	8d 50 08	sta $0850			sta 	gxDiffX
.cb86	ab86	ce 53 08	dec $0853			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 52 08	stz $0852			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 51 08	lda $0851			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 55 08	sta $0855			sta 	gxAdjust
.cb92	ab92	ad 50 08	lda $0850			lda 	gxDiffX
.cb95	ab95	8d 56 08	sta $0856			sta 	gxTotal
.cb98	ab98	ad 51 08	lda $0851			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 50 08	cmp $0850			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 52 08	dec $0852			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 50 08	lda $0850			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 55 08	sta $0855			sta 	gxAdjust
.cba9	aba9	ad 51 08	lda $0851			lda 	gxDiffY
.cbac	abac	8d 56 08	sta $0856			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 56 08	lda $0856			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 54 08	sta $0854			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.0850						gxDiffX:
>0850								.fill 	1
.0851						gxDiffY:
>0851								.fill 	1
.0852						gxIsDiffYLarger:
>0852								.fill 	1
.0853						gxDXNegative:
>0853								.fill 	1
.0854						gxPosition:
>0854								.fill 	1
.0855						gxAdjust:
>0855								.fill 	1
.0856						gxTotal:
>0856								.fill 	1
.0857						gxAddSelect:
>0857								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e c1 07	stx $07c1			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d c0 07	sta $07c0			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c c3 07	stz $07c3			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae c1 07	ldx $07c1			ldx 	gxColour
.cbc9	abc9	8e c2 07	stx $07c2			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e c3 07	stx $07c3			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c c2 07	stz $07c2			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad c3 07	lda $07c3			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d c3 07	sta $07c3			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac c5 07	ldy $07c5			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d c3 07	and $07c3			and 	gxANDValue
.cbf3	abf3	4d c2 07	eor $07c2			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad b5 07	lda $07b5			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd b9 07	cmp $07b9			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee b5 07	inc $07b5			inc 	gxY0 						; change Y pos
.cc22	ac22	ad b5 07	lda $07b5			lda 	gxY0 						; reached last line
.cc25	ac25	cd b9 07	cmp $07b9			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad b7 07	lda $07b7			lda		gxX1
.cc42	ac42	ed b3 07	sbc $07b3			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad b8 07	lda $07b8			lda 	gxX1+1
.cc4a	ac4a	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad c5 07	lda $07c5			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d c3 07	and $07c3			and 	gxANDValue
.cc67	ac67	4d c2 07	eor $07c2			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d c3 07	and $07c3			and 	gxANDValue
.cc85	ac85	4d c2 07	eor $07c2			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d c3 07	and $07c3			and 	gxANDValue
.cc9d	ac9d	4d c2 07	eor $07c2			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d c5 07	sta $07c5			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 58 08	sta $0858			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 59 08	sta $0859			sta 	gxMask 						; and mask
.ccc4	acc4	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad b5 07	lda $07b5			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 5b 08	sty $085b			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 5a 08	stx $085a			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 5d 08	lda $085d			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 5c 08	sta $085c			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 5d 08	bit $085d			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 59 08	lda $0859			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 5c 08	lda $085c			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad b5 07	lda $07b5			lda 	gxY0 						; off screen
.ccfd	acfd	cd bf 07	cmp $07bf			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 58 08	cmp $0858			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d b5 07	sta $07b5			sta 	gxY0
.cd16	ad16	ae 5c 08	ldx $085c			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 58 08	lda $0858			lda 	gxSize
.cd1d	ad1d	6d b3 07	adc $07b3			adc 	gxX0
.cd20	ad20	8d b3 07	sta $07b3			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee b4 07	inc $07b4			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 5a 08	jmp ($085a)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 5c 08	lda $085c			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c c0 07	bit $07c0			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 59 08	lda $0859			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 5d 08	lda $085d			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d c3 07	and $07c3			and 	gxANDValue
.cd61	ad61	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 58 08	cmp $0858			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee b5 07	inc $07b5			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0858						gxSize:
>0858								.fill 	1
.0859						gxMask:
>0859								.fill 	1
.085a						gxAcquireVector:
>085a								.fill 	2
.085c						gxScale:
>085c								.fill 	1
.085d						gxUseMode:
>085d								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d c0 07	eor $07c0			eor 	gxMode
.cd84	ad84	8d 5d 08	sta $085d			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad c1 07	lda $07c1			lda 	gxColour
.cdbd	adbd	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad bb 07	lda $07bb			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d c0 07	eor $07c0			eor 	gxMode
.cdd1	add1	8d 5d 08	sta $085d			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 5e 08	lda $085e			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad be 07	lda $07be			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 5f 08	ldx $085f			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 61 08	adc $0861			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 62 08	adc $0862			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 5e 08	cpy $085e			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d c6 07	sta $07c6			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d c8 07	sta $07c8			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d c7 07	sta $07c7			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 61 08	lda $0861			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 62 08	lda $0862			lda 	gxSpriteOffset+1
.ce92	ae92	6d c9 07	adc $07c9			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad ca 07	lda $07ca			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 60 08	ora $0860			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 0b 08	ora $080b,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad bb 07	lda $07bb			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d b3 07	adc $07b3			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad b4 07	lda $07b4			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d b5 07	adc $07b5			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e b4 07	lsr $07b4			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e b3 07	ror $07b3			ror 	gxX0
.cf3d	af3d	4e b3 07	lsr $07b3			lsr 	gxX0
.cf40	af40	4e b5 07	lsr $07b5			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e b5 07	lsr $07b5			lsr 	gxY0
.cf46	af46	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d b3 07	ora $07b3			ora 	gxX0
.cf51	af51	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cf54	af54	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d b5 07	ora $07b5			ora 	gxY0
.cf5c	af5c	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d c4 07	sta $07c4			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad c4 07	lda $07c4			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad b5 07	lda $07b5			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad b3 07	lda $07b3			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d c5 07	sta $07c5			sta 	gxOffset
.cfae	afae	ad b4 07	lda $07b4			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d bd 07	adc $07bd			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad c5 07	lda $07c5			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d c5 07	sta $07c5			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d cb 07	ora $07cb,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y
.d000	b000	7d 0b 08	adc $080b,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y
.d02e	b02e	fd cb 07	sbc $07cb,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad be 07	lda $07be			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 62 08	sta $0862			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 5f 08	sta $085f			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 5e 08	sta $085e			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 60 08	sta $0860			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 61 08	sta $0861			sta 	gxSpriteOffset
.d07b	b07b	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d07e	b07e	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d081	b081	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d084	b084	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.085e						gxSizePixels:
>085e								.fill 	1
.085f						gxSizeBits:
>085f								.fill 	1
.0860						gxSpriteLUT:
>0860								.fill 	1
.0861						gxSpriteOffset:
>0861								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad b3 07	lda $07b3			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd b7 07	cmp $07b7			cmp 	gxX1
.d098	b098	ad b4 07	lda $07b4			lda 	gxX0+1
.d09b	b09b	ed b8 07	sbc $07b8			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad b5 07	lda $07b5			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd b9 07	cmp $07b9			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd b3 07	lda $07b3,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 b3 07	lda $07b3,y			lda 	gxX0,y
.d0c8	b0c8	9d b3 07	sta $07b3,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 b3 07	sta $07b3,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d10e	b10e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d114	b114	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d11c	b11c	45 24 28
>d11f	b11f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d127	b127	45 24 28
>d12a	b12a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d130	b130	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d138	b138	28
>d139	b139	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d141	b141	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d147	b147	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d14f	b14f	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d157	b157	55 4e 54 28
>d15b	b15b	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d163	b163	54 24 28
>d166	b166	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d16d	b16d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d174	b174	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d17b	b17b	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>d183	b183	4e 28
>d185	b185	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>d18d	b18d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>d193	b193	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>d199	b199	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>d1a0	b1a0	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>d1a6	b1a6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>d1ac	b1ac	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>d1b3	b1b3	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>d1bb	b1bb	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>d1c3	b1c3	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>d1cb	b1cb	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>d1d3	b1d3	47 28
>d1d5	b1d5	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>d1dd	b1dd	28
>d1de	b1de	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>d1e6	b1e6	28
>d1e7	b1e7	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>d1ed	b1ed	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>d1f3	b1f3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>d1f9	b1f9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>d200	b200	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>d208	b208	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>d20e	b20e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>d214	b214	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>d219	b219	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>d21d	b21d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>d223	b223	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>d22b	b22b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>d232	b232	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>d239	b239	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>d241	b241	43
>d242	b242	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>d248	b248	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>d24e	b24e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>d255	b255	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>d25b	b25b	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>d25f	b25f	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>d263	b263	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>d269	b269	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>d271	b271	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>d278	b278	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>d27f	b27f	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>d287	b287	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>d28d	b28d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>d292	b292	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>d29a	b29a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>d2a0	b2a0	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>d2a6	b2a6	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>d2ab	b2ab	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>d2b1	b2b1	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>d2b8	b2b8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>d2bd	b2bd	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>d2c3	b2c3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>d2ca	b2ca	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>d2d2	b2d2	59
>d2d3	b2d3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>d2d8	b2d8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>d2dc	b2dc	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>d2e4	b2e4	45
>d2e5	b2e5	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>d2ed	b2ed	45
>d2ee	b2ee	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>d2f4	b2f4	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>d2fa	b2fa	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>d301	b301	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>d308	b308	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>d30f	b30f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>d315	b315	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>d31b	b31b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>d320	b320	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>d327	b327	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>d32e	b32e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>d336	b336	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>d33c	b33c	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>d340	b340	ff					.text	$FF
.d341	b341					KeywordSet1:
>d341	b341	00 65					.text	0,$65,""               ; $80 !0:EOF
>d343	b343	00 58					.text	0,$58,""               ; $81 !1:SH1
>d345	b345	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d347	b347	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d34f	b34f	4c 45
>d351	b351	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d359	b359	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d361	b361	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d368	b368	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d36f	b36f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d374	b374	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37c	b37c	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d381	b381	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d386	b386	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d38d	b38d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d392	b392	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d39a	b39a	45
>d39b	b39b	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d39f	b39f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d3a6	b3a6	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3ac	b3ac	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3b3	b3b3	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3ba	b3ba	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3c0	b3c0	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3c6	b3c6	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>d3cd	b3cd	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>d3d2	b3d2	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>d3d8	b3d8	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>d3df	b3df	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>d3e7	b3e7	45
>d3e8	b3e8	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d3f0	b3f0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d3f5	b3f5	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d3fb	b3fb	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d403	b403	45
>d404	b404	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d40c	b40c	45
>d40d	b40d	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d414	b414	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d41c	b41c	53
>d41d	b41d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d423	b423	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a3 VERIFY
>d42b	b42b	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a4 XGO
>d430	b430	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a5 XLOAD
>d437	b437	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a6 ZAP
>d43c	b43c	ff					.text	$FF
.d43d	b43d					KeywordSet2:
>d43d	b43d	00 65					.text	0,$65,""               ; $80 !0:EOF
>d43f	b43f	00 58					.text	0,$58,""               ; $81 !1:SH1
>d441	b441	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d443	b443	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d448	b448	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d44d	b44d	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d452	b452	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d457	b457	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d45c	b45c	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d461	b461	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d466	b466	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d46b	b46b	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d470	b470	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d475	b475	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d47a	b47a	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d47f	b47f	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d484	b484	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d489	b489	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d48e	b48e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d493	b493	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d498	b498	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d49d	b49d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4a2	b4a2	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4a7	b4a7	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4ac	b4ac	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4b1	b4b1	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4b6	b4b6	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4bb	b4bb	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4c0	b4c0	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4c5	b4c5	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4ca	b4ca	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4cf	b4cf	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4d4	b4d4	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4d9	b4d9	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4de	b4de	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4e3	b4e3	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4e8	b4e8	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4ed	b4ed	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4f2	b4f2	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4f7	b4f7	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4fc	b4fc	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d501	b501	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d506	b506	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d50b	b50b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d510	b510	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d515	b515	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d51a	b51a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d51f	b51f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d524	b524	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d529	b529	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d52e	b52e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d533	b533	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d538	b538	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d53d	b53d	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d542	b542	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d547	b547	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d54c	b54c	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d551	b551	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d556	b556	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d55b	b55b	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d560	b560	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d565	b565	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d56a	b56a	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d56f	b56f	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d574	b574	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d579	b579	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d57e	b57e	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d583	b583	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d588	b588	ff					.text	$FF
.d589	b589					Export_TKListConvertLine:
.d589	b589	48		pha				pha 								; save indent on the stack
.d58a	b58a	9c 19 04	stz $0419			stz 	tbOffset
.d58d	b58d	9c 29 04	stz $0429			stz 	tokenBuffer
.d590	b590	9c 25 04	stz $0425			stz 	currentListColour
.d593	b593	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d595	b595	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d598	b598	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d59a	b59a	b1 30		lda ($30),y			lda 	(codePtr),y
.d59c	b59c	aa		tax				tax
.d59d	b59d	88		dey				dey
.d59e	b59e	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a0	b5a0	20 83 b7	jsr $b783			jsr 	LCLWriteNumberXA
.d5a3	b5a3	68		pla				pla 								; adjustment to indent
.d5a4	b5a4	48		pha				pha 								; save on stack
.d5a5	b5a5	10 0c		bpl $b5b3			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5a7	b5a7	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5a8	b5a8	6d 22 04	adc $0422			adc 	listIndent
.d5ab	b5ab	8d 22 04	sta $0422			sta 	listIndent
.d5ae	b5ae	10 03		bpl $b5b3			bpl 	_LCNoAdjust
.d5b0	b5b0	9c 22 04	stz $0422			stz 	listIndent
.d5b3	b5b3					_LCNoAdjust:
.d5b3	b5b3	18		clc				clc		 							; work out actual indent.
.d5b4	b5b4	ad 22 04	lda $0422			lda 	listIndent
.d5b7	b5b7	0a		asl a				asl 	a
.d5b8	b5b8	69 07		adc #$07			adc 	#7
.d5ba	b5ba	85 36		sta $36				sta 	zTemp0
.d5bc	b5bc					_LCPadOut:
.d5bc	b5bc	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5be	b5be	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d5c1	b5c1	ad 19 04	lda $0419			lda 	tbOffset
.d5c4	b5c4	c5 36		cmp $36				cmp 	zTemp0
.d5c6	b5c6	d0 f4		bne $b5bc			bne 	_LCPadOut
.d5c8	b5c8	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5ca	b5ca					_LCMainLoop:
.d5ca	b5ca	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5cc	b5cc	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d5cf	b5cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d5d1	b5d1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5d3	b5d3	f0 17		beq $b5ec			beq 	_LCExit
.d5d5	b5d5	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5d7	b5d7	90 1e		bcc $b5f7			bcc 	_LCDoubles
.d5d9	b5d9	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5db	b5db	90 2a		bcc $b607			bcc 	_LCShiftPunc
.d5dd	b5dd	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5df	b5df	90 35		bcc $b616			bcc 	_LCPunctuation
.d5e1	b5e1	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5e3	b5e3	90 51		bcc $b636			bcc 	_LCIdentifiers
.d5e5	b5e5	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5e7	b5e7	90 73		bcc $b65c			bcc 	_LCTokens
.d5e9	b5e9	4c bc b6	jmp $b6bc			jmp 	_LCData 					; 254-5 are data objects
.d5ec	b5ec					_LCExit:
.d5ec	b5ec	68		pla				pla 								; get old indent adjust
.d5ed	b5ed	30 07		bmi $b5f6			bmi 	_LCExit2
.d5ef	b5ef	18		clc				clc 								; add to indent if +ve
.d5f0	b5f0	6d 22 04	adc $0422			adc 	listIndent
.d5f3	b5f3	8d 22 04	sta $0422			sta 	listIndent
.d5f6	b5f6					_LCExit2:
.d5f6	b5f6	60		rts				rts
.d5f7	b5f7					_LCDoubles:
.d5f7	b5f7	48		pha				pha
.d5f8	b5f8	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5f9	b5f9	29 02		and #$02			and 	#2
.d5fb	b5fb	09 3c		ora #$3c			ora 	#60 						; make < >
.d5fd	b5fd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d600	b600	68		pla				pla 								; restore, do lower bit
.d601	b601	29 03		and #$03			and 	#3
.d603	b603	09 3c		ora #$3c			ora 	#60
.d605	b605	80 0f		bra $b616			bra		_LCPunctuation 				; print, increment, loop
.d607	b607					_LCShiftPunc:
.d607	b607	aa		tax				tax 								; save in X
.d608	b608	29 07		and #$07			and 	#7 							; lower 3 bits
.d60a	b60a	f0 02		beq $b60e			beq 	_LCNoAdd
.d60c	b60c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d60e	b60e					_LCNoAdd:
.d60e	b60e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d610	b610	90 02		bcc $b614			bcc 	_LCNoAdd2
.d612	b612	09 20		ora #$20			ora 	#32 						; adds $20
.d614	b614					_LCNoAdd2:
.d614	b614	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d616	b616					_LCPunctuation:
.d616	b616	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d618	b618	d0 03		bne $b61d			bne 	_LCPContinue
.d61a	b61a	20 31 b7	jsr $b731			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d61d	b61d					_LCPContinue:
.d61d	b61d	c9 2e		cmp #$2e			cmp 	#'.'
.d61f	b61f	f0 08		beq $b629			beq 	_LCPIsConstant
.d621	b621	c9 30		cmp #$30			cmp 	#'0'
.d623	b623	90 0b		bcc $b630			bcc 	_LCPNotConstant
.d625	b625	c9 3a		cmp #$3a			cmp 	#'9'+1
.d627	b627	b0 07		bcs $b630			bcs 	_LCPNotConstant
.d629	b629					_LCPIsConstant:
.d629	b629	48		pha				pha
.d62a	b62a	a9 87		lda #$87			lda 	#CLIConstant+$80
.d62c	b62c	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d62f	b62f	68		pla				pla
.d630	b630					_LCPNotConstant:
.d630	b630	c8		iny				iny 								; consume character
.d631	b631	20 1b b7	jsr $b71b			jsr 	LCLWrite 					; write it out.
.d634	b634	80 94		bra $b5ca			bra 	_LCMainLoop 				; go round again.
.d636	b636					_LCIdentifiers:
.d636	b636	18		clc				clc 								; convert to physical address
.d637	b637	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d639	b639	85 37		sta $37				sta 	zTemp0+1
.d63b	b63b	c8		iny				iny
.d63c	b63c	b1 30		lda ($30),y			lda 	(codePtr),y
.d63e	b63e	85 36		sta $36				sta 	zTemp0
.d640	b640	c8		iny				iny
.d641	b641	5a		phy				phy 								; save position
.d642	b642	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d644	b644	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d647	b647	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d649	b649					_LCOutIdentifier:
.d649	b649	c8		iny				iny
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d64c	b64c	29 7f		and #$7f			and 	#$7F
.d64e	b64e	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d651	b651	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d654	b654	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d656	b656	10 f1		bpl $b649			bpl 	_LCOutIdentifier
.d658	b658	7a		ply				ply 								; restore position
.d659	b659	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d65c	b65c					_LCTokens:
.d65c	b65c	aa		tax				tax 								; token in X
.d65d	b65d	a9 3d		lda #$3d			lda 	#((KeywordSet2) & $FF)
.d65f	b65f	85 36		sta $36				sta 	0+zTemp0
.d661	b661	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d663	b663	85 37		sta $37				sta 	1+zTemp0
.d665	b665	e0 82		cpx #$82			cpx 	#$82
.d667	b667	f0 16		beq $b67f			beq 	_LCUseShift
.d669	b669	a9 41		lda #$41			lda 	#((KeywordSet1) & $FF)
.d66b	b66b	85 36		sta $36				sta 	0+zTemp0
.d66d	b66d	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d66f	b66f	85 37		sta $37				sta 	1+zTemp0
.d671	b671	e0 81		cpx #$81			cpx 	#$81
.d673	b673	f0 0a		beq $b67f			beq 	_LCUseShift
.d675	b675	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d677	b677	85 36		sta $36				sta 	0+zTemp0
.d679	b679	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d67b	b67b	85 37		sta $37				sta 	1+zTemp0
.d67d	b67d	80 01		bra $b680			bra 	_LCNoShift
.d67f	b67f					_LCUseShift:
.d67f	b67f	c8		iny				iny
.d680	b680					_LCNoShift:
.d680	b680	20 45 b7	jsr $b745			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d683	b683	b1 30		lda ($30),y			lda 	(codePtr),y
.d685	b685	aa		tax				tax 								; into X
.d686	b686					_LCFindText:
.d686	b686	ca		dex				dex
.d687	b687	10 0e		bpl $b697			bpl 	_LCFoundText 				; found text.
.d689	b689	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d68b	b68b	1a		inc a				inc 	a 							; one extra for size
.d68c	b68c	38		sec				sec 								; one extra for checksum
.d68d	b68d	65 36		adc $36				adc 	zTemp0 						; go to next token
.d68f	b68f	85 36		sta $36				sta 	zTemp0
.d691	b691	90 f3		bcc $b686			bcc 	_LCFindText
.d693	b693	e6 37		inc $37				inc 	zTemp0+1
.d695	b695	80 ef		bra $b686			bra 	_LCFindText
.d697	b697					_LCFoundText:
.d697	b697	5a		phy				phy 								; save List position
.d698	b698	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d69a	b69a	aa		tax				tax
.d69b	b69b	a9 86		lda #$86			lda 	#CLIToken+$80
.d69d	b69d	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6a0	b6a0	a0 02		ldy #$02			ldy 	#2
.d6a2	b6a2					_LCCopyToken:
.d6a2	b6a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6a4	b6a4	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d6a7	b6a7	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6aa	b6aa	c8		iny				iny
.d6ab	b6ab	ca		dex				dex
.d6ac	b6ac	d0 f4		bne $b6a2			bne 	_LCCopyToken
.d6ae	b6ae	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6b0	b6b0	f0 05		beq $b6b7			beq 	_LCNoSpace
.d6b2	b6b2	a9 20		lda #$20			lda 	#' '
.d6b4	b6b4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6b7	b6b7					_LCNoSpace:
.d6b7	b6b7	7a		ply				ply 								; restore position.
.d6b8	b6b8	c8		iny				iny 								; consume token
.d6b9	b6b9	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop 				; and go around again.
.d6bc	b6bc					_LCData:
.d6bc	b6bc	48		pha				pha 								; save type $FE/$FF
.d6bd	b6bd	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6bf	b6bf	c9 fe		cmp #$fe			cmp 	#$FE
.d6c1	b6c1	f0 22		beq $b6e5			beq 	_LCHaveOpener
.d6c3	b6c3	a2 22		ldx #$22			ldx 	#'"'
.d6c5	b6c5	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6c7	b6c7	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6ca	b6ca	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6cc	b6cc	d0 17		bne $b6e5			bne 	_LCHaveOpener
.d6ce	b6ce	88		dey				dey 								; what precedes it ?
.d6cf	b6cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d1	b6d1	c8		iny				iny
.d6d2	b6d2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6d4	b6d4	d0 0f		bne $b6e5			bne 	_LCHaveOpener
.d6d6	b6d6	a9 09		lda #$09			lda 	#9 							; tab
.d6d8	b6d8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6db	b6db	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6dd	b6dd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e0	b6e0	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6e2	b6e2	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6e5	b6e5					_LCHaveOpener:
.d6e5	b6e5	8a		txa				txa 								; output prefix (# or ")
.d6e6	b6e6	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e9	b6e9	c8		iny				iny 								; get count
.d6ea	b6ea	b1 30		lda ($30),y			lda 	(codePtr),y
.d6ec	b6ec	aa		tax				tax
.d6ed	b6ed	c8		iny				iny 								; point at first character
.d6ee	b6ee					_LCOutData:
.d6ee	b6ee	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f0	b6f0	c9 00		cmp #$00			cmp 	#0
.d6f2	b6f2	f0 03		beq $b6f7			beq 	_LCNoPrint
.d6f4	b6f4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6f7	b6f7					_LCNoPrint:
.d6f7	b6f7	c8		iny				iny
.d6f8	b6f8	ca		dex				dex
.d6f9	b6f9	d0 f3		bne $b6ee			bne 	_LCOutData
.d6fb	b6fb	68		pla				pla 								; closing " required ?
.d6fc	b6fc	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6fe	b6fe	d0 0f		bne $b70f			bne 	_LCNoQuote
.d700	b700	a9 22		lda #$22			lda 	#'"'
.d702	b702	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d705	b705	ad a8 07	lda $07a8			lda 	EXTTextColour
.d708	b708	29 0f		and #$0f			and 	#$0F
.d70a	b70a	09 90		ora #$90			ora 	#$90
.d70c	b70c	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d70f	b70f					_LCNoQuote:
.d70f	b70f	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d712	b712					LCLWriteColour:
.d712	b712	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d715	b715	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d718	b718	d0 01		bne $b71b			bne 	LCLWrite 					; if different, output it
.d71a	b71a	60		rts				rts
.d71b	b71b					LCLWrite:
.d71b	b71b	da		phx				phx
.d71c	b71c	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d71f	b71f	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d722	b722	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d725	b725	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d728	b728	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d72a	b72a	30 03		bmi $b72f			bmi 	_LCLNoColour
.d72c	b72c	8d 23 04	sta $0423			sta 	lcLastCharacter
.d72f	b72f					_LCLNoColour:
.d72f	b72f	fa		plx				plx
.d730	b730	60		rts				rts
.d731	b731					LCLDeleteLastSpace:
.d731	b731	48		pha				pha
.d732	b732	da		phx				phx
.d733	b733	ae 19 04	ldx $0419			ldx 	tbOffset
.d736	b736	f0 0a		beq $b742			beq 	_LCDLSExit
.d738	b738	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d73b	b73b	c9 20		cmp #$20			cmp 	#' '
.d73d	b73d	d0 03		bne $b742			bne 	_LCDLSExit
.d73f	b73f	ce 19 04	dec $0419			dec 	tbOffset
.d742	b742					_LCDLSExit:
.d742	b742	fa		plx				plx
.d743	b743	68		pla				pla
.d744	b744	60		rts				rts
.d745	b745					LCLCheckSpaceRequired:
.d745	b745	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d748	b748	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d74a	b74a	f0 1b		beq $b767			beq 	_LCCSRSpace
.d74c	b74c	c9 29		cmp #$29			cmp 	#')'
.d74e	b74e	f0 17		beq $b767			beq 	_LCCSRSpace
.d750	b750	c9 23		cmp #$23			cmp 	#'#'
.d752	b752	f0 13		beq $b767			beq 	_LCCSRSpace
.d754	b754	20 6d b7	jsr $b76d			jsr 	LCLLowerCase 				; saves a little effort
.d757	b757	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d759	b759	90 11		bcc $b76c			bcc 	_LCCSRExit
.d75b	b75b	c9 3a		cmp #$3a			cmp 	#"9"+1
.d75d	b75d	90 08		bcc $b767			bcc 	_LCCSRSpace
.d75f	b75f	c9 61		cmp #$61			cmp 	#"a"
.d761	b761	90 09		bcc $b76c			bcc 	_LCCSRExit
.d763	b763	c9 7b		cmp #$7b			cmp 	#"z"+1
.d765	b765	b0 05		bcs $b76c			bcs 	_LCCSRExit
.d767	b767					_LCCSRSpace:
.d767	b767	a9 20		lda #$20			lda 	#' '
.d769	b769	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d76c	b76c					_LCCSRExit:
.d76c	b76c	60		rts				rts
.d76d	b76d					LCLLowerCase:
.d76d	b76d	c9 41		cmp #$41			cmp 	#"A"
.d76f	b76f	90 06		bcc $b777			bcc 	_LCLLCOut
.d771	b771	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d773	b773	b0 02		bcs $b777			bcs 	_LCLLCOut
.d775	b775	69 20		adc #$20			adc 	#$20
.d777	b777					_LCLLCOut:
.d777	b777	60		rts				rts
.d778	b778					LCLUpperCase:
.d778	b778	c9 61		cmp #$61			cmp 	#"a"
.d77a	b77a	90 06		bcc $b782			bcc 	_LCLUCOut
.d77c	b77c	c9 7b		cmp #$7b			cmp 	#"z"+1
.d77e	b77e	b0 02		bcs $b782			bcs 	_LCLUCOut
.d780	b780	e9 1f		sbc #$1f			sbc 	#$1F
.d782	b782					_LCLUCOut:
.d782	b782	60		rts				rts
.d783	b783					LCLWriteNumberXA:
.d783	b783	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d785	b785					_LCLWNLoop1:
.d785	b785	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d787	b787					_LCLWNLoop2:
.d787	b787	48		pha				pha 								; save initial LSB
.d788	b788	38		sec				sec
.d789	b789	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d78b	b78b	f9 bc b7	sbc $b7bc,y			sbc 	_LCLWNTable,y
.d78e	b78e	48		pha				pha
.d78f	b78f	8a		txa				txa
.d790	b790	f9 bd b7	sbc $b7bd,y			sbc 	_LCLWNTable+1,y
.d793	b793	90 07		bcc $b79c			bcc 	_LCLWNUnderflow
.d795	b795	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d797	b797	aa		tax				tax 								; update X
.d798	b798	68		pla				pla 								; restore A
.d799	b799	7a		ply				ply 								; throw original
.d79a	b79a	80 eb		bra $b787			bra 	_LCLWNLoop2 				; try again.
.d79c	b79c					_LCLWNUnderflow:
.d79c	b79c	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d79e	b79e	d0 06		bne $b7a6			bne 	_LCLWNOut
.d7a0	b7a0	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7a3	b7a3	3a		dec a				dec 	a
.d7a4	b7a4	f0 04		beq $b7aa			beq 	_LCLWNNext
.d7a6	b7a6					_LCLWNOut:
.d7a6	b7a6	98		tya				tya
.d7a7	b7a7	20 b6 b7	jsr $b7b6			jsr 	_LCLWNOutDigit
.d7aa	b7aa					_LCLWNNext:
.d7aa	b7aa	7a		ply				ply 							 	; restore original value.
.d7ab	b7ab	68		pla				pla
.d7ac	b7ac	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7ae	b7ae	c8		iny				iny
.d7af	b7af	c8		iny				iny
.d7b0	b7b0	84 37		sty $37				sty 	zTemp0+1
.d7b2	b7b2	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7b4	b7b4	d0 cf		bne $b785			bne 	_LCLWNLoop1
.d7b6	b7b6					_LCLWNOutDigit:
.d7b6	b7b6	09 30		ora #$30			ora 	#'0'
.d7b8	b7b8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d7bb	b7bb	60		rts				rts
.d7bc	b7bc					_LCLWNTable:
>d7bc	b7bc	10 27						.word 	10000
>d7be	b7be	e8 03						.word 	1000
>d7c0	b7c0	64 00						.word 	100
>d7c2	b7c2	0a 00						.word 	10
.d7c4	b7c4					TOKSearchTable:
.d7c4	b7c4	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7c6	b7c6	85 36		sta $36				sta 	zTemp0
.d7c8	b7c8	a0 00		ldy #$00			ldy 	#0
.d7ca	b7ca	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7cc	b7cc	85 38		sta $38				sta 	zTemp1
.d7ce	b7ce					_TSTLoop:
.d7ce	b7ce	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7d0	b7d0	30 49		bmi $b81b			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7d2	b7d2	f0 2e		beq $b802			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7d4	b7d4	c8		iny				iny 								; get the hash
.d7d5	b7d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7d7	b7d7	88		dey				dey
.d7d8	b7d8	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7db	b7db	d0 25		bne $b802			bne 	_TSTNext
.d7dd	b7dd	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7e0	b7e0	38		sec				sec
.d7e1	b7e1	ed 00 04	sbc $0400			sbc 	identStart
.d7e4	b7e4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7e6	b7e6	d0 1a		bne $b802			bne 	_TSTNext
.d7e8	b7e8	5a		phy				phy 								; save Y , we might fail to match.
.d7e9	b7e9	c8		iny				iny 								; point to text
.d7ea	b7ea	c8		iny				iny
.d7eb	b7eb	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7ee	b7ee					_TSTCompareName:
.d7ee	b7ee	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7f3	b7f3	d0 0c		bne $b801			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7f5	b7f5	e8		inx				inx
.d7f6	b7f6	c8		iny				iny
.d7f7	b7f7	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7fa	b7fa	d0 f2		bne $b7ee			bne 	_TSTCompareName
.d7fc	b7fc	7a		ply				ply 								; throw Y
.d7fd	b7fd	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7ff	b7ff	38		sec				sec 								; return with CS = passed.
.d800	b800	60		rts				rts
.d801	b801					_TSTNextPullY:
.d801	b801	7a		ply				ply 								; restore current, fall through.
.d802	b802					_TSTNext:
.d802	b802	e6 38		inc $38				inc 	zTemp1 						; token counter
.d804	b804	98		tya				tya
.d805	b805	18		clc				clc
.d806	b806	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d808	b808	1a		inc a				inc 	a 							; +1
.d809	b809	1a		inc a				inc 	a 							; +2
.d80a	b80a	a8		tay				tay
.d80b	b80b	10 c1		bpl $b7ce			bpl 	_TSTLoop 					; if Y < $80 loop back
.d80d	b80d	98		tya				tya 								; add Y to zTemp0 and reset Y
.d80e	b80e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d810	b810	18		clc				clc  								; but have tables > 255 bytes
.d811	b811	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d813	b813	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d815	b815	90 b7		bcc $b7ce			bcc 	_TSTLoop
.d817	b817	e6 37		inc $37				inc 	zTemp0+1
.d819	b819	80 b3		bra $b7ce			bra 	_TSTLoop
.d81b	b81b					_TSTFail:
.d81b	b81b	18		clc				clc
.d81c	b81c	60		rts				rts
.d81d	b81d					Export_TKTokeniseLine:
.d81d	b81d	20 ea b9	jsr $b9ea			jsr 	LCLFixLineBufferCase 		; fix line case
.d820	b820	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d822	b822	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d825	b825	9c 27 04	stz $0427			stz 	tokenLineNumber
.d828	b828	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d82b	b82b	a2 ff		ldx #$ff			ldx 	#$FF
.d82d	b82d					_TKFindFirst:
.d82d	b82d	e8		inx				inx
.d82e	b82e	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d831	b831	f0 62		beq $b895			beq 	_TKExit
.d833	b833	c9 20		cmp #$20			cmp 	#' '
.d835	b835	90 f6		bcc $b82d			bcc 	_TKFindFirst
.d837	b837	c9 30		cmp #$30			cmp 	#'0'
.d839	b839	90 07		bcc $b842			bcc 	_TKNoLineNumber
.d83b	b83b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d83d	b83d	b0 03		bcs $b842			bcs 	_TKNoLineNumber
.d83f	b83f	20 14 ba	jsr $ba14			jsr 	TOKExtractLineNumber
.d842	b842					_TKNoLineNumber:
.d842	b842					_TKTokeniseLoop:
.d842	b842	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d845	b845	f0 4e		beq $b895			beq 	_TKExit
.d847	b847	e8		inx				inx
.d848	b848	c9 20		cmp #$20			cmp 	#' '
.d84a	b84a	f0 f6		beq $b842			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d84c	b84c	ca		dex				dex 								; undo last get, A contains character, X is position.
.d84d	b84d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d84f	b84f	f0 68		beq $b8b9			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d851	b851	c9 41		cmp #$41			cmp 	#'A'
.d853	b853	90 04		bcc $b859			bcc 	_TKTokenisePunctuation
.d855	b855	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d857	b857	90 60		bcc $b8b9			bcc 	_TKTokeniseIdentifier
.d859	b859					_TKTokenisePunctuation:
.d859	b859	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d85b	b85b	f0 2e		beq $b88b			beq 	_TKString
.d85d	b85d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d85f	b85f	f0 2f		beq $b890			beq 	_TKHexConstant
.d861	b861	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d863	b863	f0 36		beq $b89b			beq 	_TKCheckDouble
.d865	b865	c9 3e		cmp #$3e			cmp 	#'>'
.d867	b867	f0 32		beq $b89b			beq 	_TKCheckDouble
.d869	b869					_TKStandardPunctuation:
.d869	b869	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d86c	b86c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d86e	b86e	90 0e		bcc $b87e			bcc 	_TKNoShift
.d870	b870	48		pha				pha 								; save. we are about to convert this punctuation token from
.d871	b871	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d873	b873	85 36		sta $36				sta 	zTemp0
.d875	b875	68		pla				pla
.d876	b876	29 20		and #$20			and 	#32 						; bit 5
.d878	b878	4a		lsr a				lsr 	a 							; shift into bit 3
.d879	b879	4a		lsr a				lsr 	a
.d87a	b87a	05 36		ora $36				ora 	zTemp0
.d87c	b87c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d87e	b87e					_TKNoShift:
.d87e	b87e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; write the punctuation character
.d881	b881	e8		inx				inx 								; consume the character
.d882	b882	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d884	b884	d0 bc		bne $b842			bne 	_TKTokeniseLoop 			; and loop round again.
.d886	b886	20 4c b9	jsr $b94c			jsr 	TOKCheckComment 			; comment checl
.d889	b889	80 b7		bra $b842			bra 	_TKTokeniseLoop
.d88b	b88b					_TKString:
.d88b	b88b	20 79 b9	jsr $b979			jsr 	TOKTokenString
.d88e	b88e	80 b2		bra $b842			bra 	_TKTokeniseLoop
.d890	b890					_TKHexConstant:
.d890	b890	20 b4 b9	jsr $b9b4			jsr 	TOKHexConstant
.d893	b893	80 ad		bra $b842			bra 	_TKTokeniseLoop
.d895	b895	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d897	b897	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d89a	b89a	60		rts				rts
.d89b	b89b					_TKCheckDouble:
.d89b	b89b	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d89e	b89e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8a0	b8a0	90 c7		bcc $b869			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8a2	b8a2	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8a4	b8a4	b0 c3		bcs $b869			bcs 	_TKStandardPunctuation
.d8a6	b8a6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8a9	b8a9	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8ab	b8ab	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8ac	b8ac	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8af	b8af	38		sec				sec
.d8b0	b8b0	e9 3c		sbc #$3c			sbc 	#'<'
.d8b2	b8b2	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8b5	b8b5	e8		inx				inx 								; consume both
.d8b6	b8b6	e8		inx				inx
.d8b7	b8b7	80 89		bra $b842			bra 	_TKTokeniseLoop
.d8b9	b8b9					_TKTokeniseIdentifier:
.d8b9	b8b9	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8bc	b8bc	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8bf	b8bf					_TKCheckLoop:
.d8bf	b8bf	e8		inx				inx 								; look at next, we know first is identifier already.
.d8c0	b8c0	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8c3	b8c3	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8c5	b8c5	f0 f8		beq $b8bf			beq 	_TKCheckLoop
.d8c7	b8c7	c9 30		cmp #$30			cmp	 	#"0"
.d8c9	b8c9	90 0c		bcc $b8d7			bcc 	_TKEndIdentifier
.d8cb	b8cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8cd	b8cd	90 f0		bcc $b8bf			bcc 	_TKCheckLoop
.d8cf	b8cf	c9 41		cmp #$41			cmp	 	#"A"
.d8d1	b8d1	90 04		bcc $b8d7			bcc 	_TKEndIdentifier
.d8d3	b8d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8d5	b8d5	90 e8		bcc $b8bf			bcc 	_TKCheckLoop
.d8d7	b8d7					_TKEndIdentifier:
.d8d7	b8d7	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8da	b8da	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8dc	b8dc	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8de	b8de	f0 06		beq $b8e6			beq 	_TKHasTypeCharacter
.d8e0	b8e0	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8e2	b8e2	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8e4	b8e4	d0 07		bne $b8ed			bne 	_TKNoTypeCharacter
.d8e6	b8e6					_TKHasTypeCharacter:
.d8e6	b8e6	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8e9	b8e9	e8		inx				inx 								; consume the type character
.d8ea	b8ea	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8ed	b8ed					_TKNoTypeCharacter:
.d8ed	b8ed	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8ef	b8ef	d0 09		bne $b8fa			bne 	_TKNoArray
.d8f1	b8f1	e8		inx				inx 								; skip the (
.d8f2	b8f2	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8f5	b8f5	09 04		ora #$04			ora 	#$04
.d8f7	b8f7	8d 04 04	sta $0404			sta 	identTypeByte
.d8fa	b8fa					_TKNoArray:
.d8fa	b8fa	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8fd	b8fd	20 d5 b9	jsr $b9d5			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d900	b900	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d902	b902	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d904	b904	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d907	b907	a2 00		ldx #$00			ldx 	#0
.d909	b909	b0 1f		bcs $b92a			bcs 	_TKFoundToken
.d90b	b90b	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d90d	b90d	a9 41		lda #$41			lda 	#(KeywordSet1) & $FF
.d90f	b90f	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d912	b912	a2 81		ldx #$81			ldx 	#$81
.d914	b914	b0 14		bcs $b92a			bcs 	_TKFoundToken
.d916	b916	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d918	b918	a9 3d		lda #$3d			lda 	#(KeywordSet2) & $FF
.d91a	b91a	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d91d	b91d	a2 82		ldx #$82			ldx 	#$82
.d91f	b91f	b0 09		bcs $b92a			bcs 	_TKFoundToken
.d921	b921	20 65 ba	jsr $ba65			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d924	b924	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d927	b927	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d92a	b92a					_TKFoundToken:
.d92a	b92a	48		pha				pha 								; save token
.d92b	b92b	8a		txa				txa 								; shift in X, is there one ?
.d92c	b92c	f0 03		beq $b931			beq 	_TKNoTShift
.d92e	b92e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; if so, write it out
.d931	b931					_TKNoTShift:
.d931	b931	68		pla				pla 								; restore and write token
.d932	b932	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d935	b935	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d937	b937	d0 0d		bne $b946			bne 	_TKNotRem 			 		; not shifted ?
.d939	b939	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d93b	b93b	d0 09		bne $b946			bne 	_TKNotRem
.d93d	b93d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d940	b940	20 4c b9	jsr $b94c			jsr 	TOKCheckComment
.d943	b943	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop
.d946	b946					_TKNotRem:
.d946	b946	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d949	b949	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d94c	b94c					TOKCheckComment:
.d94c	b94c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d94f	b94f	e8		inx				inx
.d950	b950	c9 20		cmp #$20			cmp 	#' '
.d952	b952	f0 f8		beq $b94c			beq 	TOKCheckComment
.d954	b954	ca		dex				dex 								; first non space character
.d955	b955	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d957	b957	f0 1f		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d959	b959	c9 00		cmp #$00			cmp 	#0 							; EOL
.d95b	b95b	f0 1b		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d95d	b95d	da		phx				phx
.d95e	b95e					_TOKCCLowerCase:
.d95e	b95e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d961	b961	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d963	b963	90 09		bcc $b96e			bcc 	_TOKKCNotUC
.d965	b965	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d967	b967	b0 05		bcs $b96e			bcs 	_TOKKCNotUC
.d969	b969	49 20		eor #$20			eor 	#$20
.d96b	b96b	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d96e	b96e					_TOKKCNotUC:
.d96e	b96e	e8		inx				inx
.d96f	b96f	c9 00		cmp #$00			cmp 	#0
.d971	b971	d0 eb		bne $b95e			bne 	_TOKCCLowerCase
.d973	b973	fa		plx				plx
.d974	b974	ca		dex				dex 								; tokenise string expects initial skip.
.d975	b975	20 79 b9	jsr $b979			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d978	b978					_TOKCCExit:
.d978	b978	60		rts				rts
.d979	b979					TOKTokenString:
.d979	b979	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d97b	b97b	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d97e	b97e	e8		inx				inx									; start of quoted string.
.d97f	b97f	da		phx				phx 								; push start of string on top
.d980	b980	ca		dex				dex 								; because we pre-increment
.d981	b981					_TSFindEnd:
.d981	b981	e8		inx				inx
.d982	b982	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d985	b985	f0 04		beq $b98b			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d987	b987	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d989	b989	d0 f6		bne $b981			bne 	_TSFindEnd
.d98b	b98b					_TSEndOfString:
.d98b	b98b	7a		ply				ply  								; so now Y is first character, X is character after end.
.d98c	b98c	48		pha				pha 								; save terminating character
.d98d	b98d	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d990	b990	68		pla				pla 								; terminating character
.d991	b991	f0 01		beq $b994			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d993	b993	e8		inx				inx
.d994	b994					_TSNotQuote:
.d994	b994	60		rts				rts
.d995	b995					TOKWriteBlockXY:
.d995	b995	86 36		stx $36				stx 	zTemp0 						; save end character
.d997	b997	98		tya				tya 								; use 2's complement to work out the byte size
.d998	b998	49 ff		eor #$ff			eor 	#$FF
.d99a	b99a	38		sec				sec
.d99b	b99b	65 36		adc $36				adc 	zTemp0
.d99d	b99d	1a		inc a				inc 	a 							; one extra for NULL
.d99e	b99e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9a1	b9a1					_TOBlockLoop:
.d9a1	b9a1	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9a3	b9a3	f0 09		beq $b9ae			beq 	_TOBlockExit
.d9a5	b9a5	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9a8	b9a8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9ab	b9ab	c8		iny				iny
.d9ac	b9ac	80 f3		bra $b9a1			bra 	_TOBlockLoop
.d9ae	b9ae					_TOBlockExit:
.d9ae	b9ae	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9b0	b9b0	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b3	b9b3	60		rts				rts
.d9b4	b9b4					TOKHexConstant:
.d9b4	b9b4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9b6	b9b6	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b9	b9b9	e8		inx				inx									; start of quoted string.
.d9ba	b9ba	da		phx				phx 								; push start of constant on top
.d9bb	b9bb	ca		dex				dex
.d9bc	b9bc					_THFindLoop:
.d9bc	b9bc	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9bd	b9bd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9c0	b9c0	c9 30		cmp #$30			cmp 	#"0"
.d9c2	b9c2	90 0c		bcc $b9d0			bcc 	_THFoundEnd
.d9c4	b9c4	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9c6	b9c6	90 f4		bcc $b9bc			bcc 	_THFindLoop
.d9c8	b9c8	c9 41		cmp #$41			cmp 	#"A"
.d9ca	b9ca	90 04		bcc $b9d0			bcc 	_THFoundEnd
.d9cc	b9cc	c9 47		cmp #$47			cmp 	#"F"+1
.d9ce	b9ce	90 ec		bcc $b9bc			bcc 	_THFindLoop
.d9d0	b9d0					_THFoundEnd:
.d9d0	b9d0	7a		ply				ply 								; restore start
.d9d1	b9d1	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; output the block
.d9d4	b9d4	60		rts				rts
.d9d5	b9d5					TOKCalculateHash:
.d9d5	b9d5	da		phx				phx
.d9d6	b9d6	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9d9	b9d9	a9 00		lda #$00			lda 	#0
.d9db	b9db					_TCHLoop:
.d9db	b9db	18		clc				clc
.d9dc	b9dc	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9e3	b9e3	d0 f6		bne $b9db			bne 	_TCHLoop
.d9e5	b9e5	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9e8	b9e8	fa		plx				plx
.d9e9	b9e9	60		rts				rts
.d9ea	b9ea					LCLFixLineBufferCase:
.d9ea	b9ea	a2 00		ldx #$00			ldx 	#0
.d9ec	b9ec					_FLBCLoop:
.d9ec	b9ec	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9ef	b9ef	f0 22		beq $ba13			beq 	_FLBCExit 					; end of string.
.d9f1	b9f1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9f3	b9f3	f0 11		beq $ba06			beq 	_FLBCInQuotes
.d9f5	b9f5	e8		inx				inx
.d9f6	b9f6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9f8	b9f8	90 f2		bcc $b9ec			bcc 	_FLBCLoop
.d9fa	b9fa	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9fc	b9fc	b0 ee		bcs $b9ec			bcs 	_FLBCLoop
.d9fe	b9fe	38		sec				sec 								; make U/C
.d9ff	b9ff	e9 20		sbc #$20			sbc 	#32
.da01	ba01	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da04	ba04	80 e6		bra $b9ec			bra 	_FLBCLoop
.da06	ba06					_FLBCInQuotes:
.da06	ba06	e8		inx				inx 								; advance
.da07	ba07	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da0a	ba0a	f0 07		beq $ba13			beq 	_FLBCExit 					; exit on EOS
.da0c	ba0c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da0e	ba0e	d0 f6		bne $ba06			bne 	_FLBCInQuotes
.da10	ba10	e8		inx				inx 								; skip over it
.da11	ba11	80 d9		bra $b9ec			bra 	_FLBCLoop
.da13	ba13					_FLBCExit:
.da13	ba13	60		rts				rts
.da14	ba14					TOKExtractLineNumber:
.da14	ba14	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da17	ba17	48		pha				pha
.da18	ba18	ad 27 04	lda $0427			lda 	tokenLineNumber
.da1b	ba1b	48		pha				pha
.da1c	ba1c	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 2
.da1f	ba1f	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 4
.da22	ba22	18		clc				clc 								; add stacked value
.da23	ba23	68		pla				pla
.da24	ba24	6d 27 04	adc $0427			adc 	tokenLineNumber
.da27	ba27	8d 27 04	sta $0427			sta 	tokenLineNumber
.da2a	ba2a	68		pla				pla
.da2b	ba2b	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da2e	ba2e	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da31	ba31	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 10
.da34	ba34	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da37	ba37	e8		inx				inx
.da38	ba38	29 0f		and #$0f			and 	#15 						; add to line #
.da3a	ba3a	18		clc				clc
.da3b	ba3b	6d 27 04	adc $0427			adc 	tokenLineNumber
.da3e	ba3e	8d 27 04	sta $0427			sta 	tokenLineNumber
.da41	ba41	90 03		bcc $ba46			bcc 	_TLENNoCarry
.da43	ba43	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da46	ba46					_TLENNoCarry:
.da46	ba46	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da49	ba49	c9 30		cmp #$30			cmp 	#'0'
.da4b	ba4b	90 04		bcc $ba51			bcc 	_TLENExit
.da4d	ba4d	c9 3a		cmp #$3a			cmp 	#'9'+1
.da4f	ba4f	90 c3		bcc $ba14			bcc 	TOKExtractLineNumber
.da51	ba51					_TLENExit:
.da51	ba51	60		rts				rts
.da52	ba52					_LCLNTimes2:
.da52	ba52	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da55	ba55	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da58	ba58	60		rts				rts
.da59	ba59					TOKWriteByte:
.da59	ba59	da		phx				phx
.da5a	ba5a	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da5d	ba5d	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da60	ba60	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da63	ba63	fa		plx				plx
.da64	ba64	60		rts				rts
.da65	ba65					TOKCheckCreateVariableRecord:
.da65	ba65	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da67	ba67	85 36		sta $36				sta 	0+zTemp0
.da69	ba69	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da6b	ba6b	85 37		sta $37				sta 	1+zTemp0
.da6d	ba6d					_CCVSearch:
.da6d	ba6d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da6f	ba6f	f0 2c		beq $ba9d			beq 	_CCVFail
.da71	ba71	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da75	ba75	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da78	ba78	d0 16		bne $ba90			bne 	_CCVNext
.da7a	ba7a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da7c	ba7c	ae 00 04	ldx $0400			ldx 	identStart
.da7f	ba7f					_CCVCompare:
.da7f	ba7f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da82	ba82	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da84	ba84	e8		inx				inx 								; advance pointers
.da85	ba85	c8		iny				iny
.da86	ba86	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da87	ba87	d0 07		bne $ba90			bne 	_CCVNext  					; didn't match go to next.
.da89	ba89	90 f4		bcc $ba7f			bcc 	_CCVCompare 				; not finished yet.
.da8b	ba8b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da8e	ba8e	f0 41		beq $bad1			beq 	_CCVFound 					; yes, we were successful
.da90	ba90					_CCVNext:
.da90	ba90	18		clc				clc 								; go to next record.
.da91	ba91	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da93	ba93	65 36		adc $36				adc 	zTemp0
.da95	ba95	85 36		sta $36				sta 	zTemp0
.da97	ba97	90 d4		bcc $ba6d			bcc 	_CCVSearch
.da99	ba99	e6 37		inc $37				inc 	zTemp0+1
.da9b	ba9b	80 d0		bra $ba6d			bra 	_CCVSearch
.da9d	ba9d					_CCVFail:
.da9d	ba9d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da9f	ba9f	ad 03 04	lda $0403			lda 	identHash
.daa2	baa2	91 36		sta ($36),y			sta 	(zTemp0),y
.daa4	baa4	c8		iny				iny 								; offset 2 is the type byte
.daa5	baa5	ad 04 04	lda $0404			lda 	identTypeByte
.daa8	baa8	91 36		sta ($36),y			sta 	(zTemp0),y
.daaa	baaa	c8		iny				iny
.daab	baab					_CCVData:
.daab	baab	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daad	baad	91 36		sta ($36),y			sta 	(zTemp0),y
.daaf	baaf	c8		iny				iny
.dab0	bab0	c0 08		cpy #$08			cpy 	#8
.dab2	bab2	90 f7		bcc $baab			bcc 	_CCVData
.dab4	bab4	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dab7	bab7					_CCVCopyName:
.dab7	bab7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	e8		inx				inx
.dabd	babd	c8		iny				iny
.dabe	babe	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dac1	bac1	d0 f4		bne $bab7			bne 	_CCVCopyName
.dac3	bac3	98		tya				tya 								; patch offset
.dac4	bac4	92 36		sta ($36)			sta 	(zTemp0)
.dac6	bac6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dac8	bac8	91 36		sta ($36),y			sta 	(zTemp0),y
.daca	baca	88		dey				dey
.dacb	bacb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dacd	bacd	09 80		ora #$80			ora 	#$80
.dacf	bacf	91 36		sta ($36),y			sta 	(zTemp0),y
.dad1	bad1					_CCVFound:
.dad1	bad1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dad3	bad3	38		sec				sec
.dad4	bad4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dad6	bad6	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dad8	bad8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dadb	badb	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dadd	badd	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dae0	bae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dae1	bae1					SNDCheckChannel:
.dae1	bae1	aa		tax				tax
.dae2	bae2	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dae5	bae5	d0 38		bne $bb1f			bne 	_SNDCCExit
.dae7	bae7	da		phx				phx 								; save current channel
.dae8	bae8	8a		txa				txa 								; put in A
.dae9	bae9	20 65 bb	jsr $bb65			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daec	baec	68		pla				pla 								; channel # in A
.daed	baed	90 30		bcc $bb1f			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.daef	baef	a8		tay				tay 								; Y is the channel #
.daf0	baf0	bd 66 08	lda $0866,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.daf3	baf3	99 65 09	sta $0965,y			sta 	SNDPitchLow,y
.daf6	baf6	bd 67 08	lda $0867,x			lda 	SNDQueue+2,x
.daf9	baf9	99 69 09	sta $0969,y			sta 	SNDPitchHigh,y
.dafc	bafc	bd 68 08	lda $0868,x			lda 	SNDQueue+3,x
.daff	baff	99 6d 09	sta $096d,y			sta 	SNDVolume,y
.db02	bb02	bd 69 08	lda $0869,x			lda 	SNDQueue+4,x
.db05	bb05	99 71 09	sta $0971,y			sta 	SNDTimeLeft,y
.db08	bb08	bd 6a 08	lda $086a,x			lda 	SNDQueue+5,x
.db0b	bb0b	99 75 09	sta $0975,y			sta 	SNDAdjustLow,y
.db0e	bb0e	bd 6b 08	lda $086b,x			lda 	SNDQueue+6,x
.db11	bb11	99 79 09	sta $0979,y			sta 	SNDAdjustHigh,y
.db14	bb14	5a		phy				phy 								; save channel #
.db15	bb15	20 7f bb	jsr $bb7f			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db18	bb18	ce 64 08	dec $0864			dec 	SNDLength 					; reduce the queue length.
.db1b	bb1b	68		pla				pla
.db1c	bb1c	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update channel A
.db1f	bb1f					_SNDCCExit:
.db1f	bb1f	60		rts				rts
.db20	bb20					SNDUpdateNote:
.db20	bb20	aa		tax				tax 								; so we can access records
.db21	bb21	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db22	bb22	0a		asl a				asl 	a
.db23	bb23	0a		asl a				asl 	a
.db24	bb24	0a		asl a				asl 	a
.db25	bb25	0a		asl a				asl 	a
.db26	bb26	8d 63 08	sta $0863			sta 	SNDChannelBits
.db29	bb29	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; are we silent
.db2c	bb2c	f0 2e		beq $bb5c			beq 	_SNDUNIsSilent
.db2e	bb2e	ad 63 08	lda $0863			lda 	SNDChannelBits 				; push channel bits on stack
.db31	bb31	48		pha				pha
.db32	bb32	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db35	bb35	29 0f		and #$0f			and 	#$0F
.db37	bb37	0d 63 08	ora $0863			ora 	SNDChannelBits 				; set channel bits
.db3a	bb3a	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db3c	bb3c	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db3f	bb3f	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db42	bb42	8d 63 08	sta $0863			sta 	SNDChannelBits
.db45	bb45	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.db48	bb48	4e 63 08	lsr $0863			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db4b	bb4b	6a		ror a				ror 	a
.db4c	bb4c	4e 63 08	lsr $0863			lsr 	SNDChannelBits
.db4f	bb4f	6a		ror a				ror 	a
.db50	bb50	4a		lsr a				lsr 	a 							; put in bits 0-5
.db51	bb51	4a		lsr a				lsr 	a
.db52	bb52	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write as rest of pitch register
.db55	bb55	68		pla				pla
.db56	bb56	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db58	bb58	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db5b	bb5b	60		rts				rts
.db5c	bb5c					_SNDUNIsSilent:
.db5c	bb5c	ad 63 08	lda $0863			lda 	SNDChannelBits 				; channel bits
.db5f	bb5f	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db61	bb61	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write to the ports
.db64	bb64	60		rts				rts
.db65	bb65					SNDFindNextNoteForA:
.db65	bb65	ac 64 08	ldy $0864			ldy 	SNDLength 					; queue size into Y
.db68	bb68	f0 13		beq $bb7d			beq 	_SNDFNNFail 				; queue empty.
.db6a	bb6a	a2 00		ldx #$00			ldx 	#0
.db6c	bb6c					_SNDFNNSearch:
.db6c	bb6c	dd 65 08	cmp $0865,x			cmp 	SNDQueue,x 					; does it match the channel
.db6f	bb6f	38		sec				sec
.db70	bb70	f0 0c		beq $bb7e			beq 	_SNDFNNExit 				; if so exit with CS.
.db72	bb72	e8		inx				inx 								; next queue slot.
.db73	bb73	e8		inx				inx
.db74	bb74	e8		inx				inx
.db75	bb75	e8		inx				inx
.db76	bb76	e8		inx				inx
.db77	bb77	e8		inx				inx
.db78	bb78	e8		inx				inx
.db79	bb79	e8		inx				inx
.db7a	bb7a	88		dey				dey 								; done the whole queue
.db7b	bb7b	d0 ef		bne $bb6c			bne 	_SNDFNNSearch 				; no, go back.
.db7d	bb7d					_SNDFNNFail:
.db7d	bb7d	18		clc				clc
.db7e	bb7e					_SNDFNNExit:
.db7e	bb7e	60		rts				rts
.db7f	bb7f					SNDDeleteXFromQueue:
.db7f	bb7f	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db81	bb81	f0 09		beq $bb8c			beq 	_SNDDXExit
.db83	bb83	bd 6d 08	lda $086d,x			lda 	SNDQueue+8,x
.db86	bb86	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.db89	bb89	e8		inx				inx
.db8a	bb8a	80 f3		bra $bb7f			bra 	SNDDeleteXFromQueue
.db8c	bb8c					_SNDDXExit:
.db8c	bb8c	60		rts				rts
.0863						SNDChannelBits:
>0863								.fill 	1
.db8d	bb8d					SNDQueueRequest:
.db8d	bb8d	86 36		stx $36				stx 	zTemp0						; save queue address
.db8f	bb8f	84 37		sty $37				sty 	zTemp0+1
.db91	bb91	ae 64 08	ldx $0864			ldx 	SNDLength 					; queue is full, can't take any more.
.db94	bb94	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db96	bb96	f0 21		beq $bbb9			beq 	_SNDQRExit
.db98	bb98	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db9a	bb9a	48		pha				pha
.db9b	bb9b	8a		txa				txa  								; get offset in queue buffer/
.db9c	bb9c	0a		asl a				asl 	a
.db9d	bb9d	0a		asl a				asl 	a
.db9e	bb9e	0a		asl a				asl 	a
.db9f	bb9f	aa		tax				tax
.dba0	bba0	68		pla				pla 								; get back and push again
.dba1	bba1	48		pha				pha
.dba2	bba2	9d 65 08	sta $0865,x			sta 	SNDQueue+0,x 				; save the channel #
.dba5	bba5	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dba7	bba7					_SNDQCopy:
.dba7	bba7	b1 36		lda ($36),y			lda 	(zTemp0),y
.dba9	bba9	e8		inx				inx
.dbaa	bbaa	c8		iny				iny
.dbab	bbab	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.dbae	bbae	c0 06		cpy #$06			cpy 	#6
.dbb0	bbb0	d0 f5		bne $bba7			bne 	_SNDQCopy
.dbb2	bbb2	ee 64 08	inc $0864			inc 	SNDLength 					; bump queue length.
.dbb5	bbb5	68		pla				pla 								; get channel # back
.dbb6	bbb6	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbb9	bbb9					_SNDQRExit:
.dbb9	bbb9	60		rts				rts
.dbba	bbba					SNDSilenceChannel:
.dbba	bbba	aa		tax				tax 								; zero time left.
.dbbb	bbbb	9e 71 09	stz $0971,x			stz 	SNDTimeLeft,x
.dbbe	bbbe	0a		asl a				asl 	a 							; shift into position
.dbbf	bbbf	0a		asl a				asl 	a
.dbc0	bbc0	0a		asl a				asl 	a
.dbc1	bbc1	0a		asl a				asl 	a
.dbc2	bbc2	0a		asl a				asl 	a
.dbc3	bbc3	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbc5	bbc5	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.dbc8	bbc8	60		rts				rts
.dbc9	bbc9					SNDWritePorts:
.dbc9	bbc9	da		phx				phx 								; save X
.dbca	bbca	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbcc	bbcc	64 01		stz $01				stz 	1 							; access I/O page 0
.dbce	bbce	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbd1	bbd1	8d 10 d6	sta $d610			sta 	$D610
.dbd4	bbd4	86 01		stx $01				stx 	1 							; restore I/O
.dbd6	bbd6	fa		plx				plx 								; restore X
.dbd7	bbd7	60		rts				rts
.dbd8	bbd8					Export_SNDCommand:
.dbd8	bbd8	da		phx				phx 								; save XY
.dbd9	bbd9	5a		phy				phy
.dbda	bbda	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbdc	bbdc	f0 1d		beq $bbfb			beq 	_SNDInitialise
.dbde	bbde	90 28		bcc $bc08			bcc 	_SNDExit
.dbe0	bbe0	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbe2	bbe2	f0 17		beq $bbfb			beq 	_SNDSilence
.dbe4	bbe4	b0 22		bcs $bc08			bcs 	_SNDExit
.dbe6	bbe6	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbe8	bbe8	b0 09		bcs $bbf3			bcs 	_SNDQueryPlay
.dbea	bbea	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbec	bbec	b0 1a		bcs $bc08			bcs 	_SNDExit
.dbee	bbee	20 8d bb	jsr $bb8d			jsr 	SNDQueueRequest
.dbf1	bbf1	80 15		bra $bc08			bra 	_SNDExit
.dbf3	bbf3					_SNDQueryPlay:
.dbf3	bbf3	29 03		and #$03			and 	#3 							; get channel #
.dbf5	bbf5	aa		tax				tax
.dbf6	bbf6	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbf9	bbf9	80 0d		bra $bc08			bra 	_SNDExit
.dbfb	bbfb					_SNDInitialise:
.dbfb	bbfb					_SNDSilence:
.dbfb	bbfb	9c 64 08	stz $0864			stz 	SNDLength 					; empty the queue.
.dbfe	bbfe	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc00	bc00					_SNDSilenceLoop:
.dc00	bc00	48		pha				pha
.dc01	bc01	20 ba bb	jsr $bbba			jsr 	SNDSilenceChannel
.dc04	bc04	68		pla				pla
.dc05	bc05	3a		dec a				dec 	a
.dc06	bc06	10 f8		bpl $bc00			bpl 	_SNDSilenceLoop
.dc08	bc08					_SNDExit:
.dc08	bc08	7a		ply				ply
.dc09	bc09	fa		plx				plx
.dc0a	bc0a	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0864						SNDLength:
>0864								.fill 	1
.0865						SNDQueue:
>0865								.fill 	SNDQueueSize * 8
.0965						SNDPitchLow:
>0965								.fill 	4
.0969						SNDPitchHigh:
>0969								.fill 	4
.096d						SNDVolume:
>096d								.fill 	4
.0971						SNDTimeLeft:
>0971								.fill 	4
.0975						SNDAdjustLow:
>0975								.fill 	4
.0979						SNDAdjustHigh:
>0979								.fill 	4
.dc0b	bc0b					Export_SNDUpdate:
.dc0b	bc0b					PagedSNDUpdate:
.dc0b	bc0b	ad 71 09	lda $0971			lda 	SNDTimeLeft+0 				; look at time remaining
.dc0e	bc0e	f0 05		beq $bc15			beq 	_SNDUNot0 					; not playing
.dc10	bc10	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc12	bc12	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel 			; update it.
.dc15	bc15					_SNDUNot0:
.dc15	bc15	ad 72 09	lda $0972			lda 	SNDTimeLeft+1
.dc18	bc18	f0 05		beq $bc1f			beq 	_SNDUNot1
.dc1a	bc1a	a2 01		ldx #$01			ldx 	#1
.dc1c	bc1c	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc1f	bc1f					_SNDUNot1:
.dc1f	bc1f	ad 73 09	lda $0973			lda 	SNDTimeLeft+2
.dc22	bc22	f0 05		beq $bc29			beq 	_SNDUNot2
.dc24	bc24	a2 02		ldx #$02			ldx 	#2
.dc26	bc26	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc29	bc29					_SNDUNot2:
.dc29	bc29	ad 74 09	lda $0974			lda 	SNDTimeLeft+3
.dc2c	bc2c	f0 05		beq $bc33			beq 	_SNDUNot3
.dc2e	bc2e	a2 03		ldx #$03			ldx 	#3
.dc30	bc30	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc33	bc33					_SNDUNot3:
.dc33	bc33	60		rts				rts
.dc34	bc34					SNDUpdateChannel:
.dc34	bc34	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc36	bc36	f0 2c		beq $bc64			beq 	_SNDUCExit
.dc38	bc38	3a		dec a				dec 	a 							; decrement and update timer
.dc39	bc39	9d 71 09	sta $0971,x			sta 	SNDTimeLeft,x
.dc3c	bc3c	f0 1d		beq $bc5b			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc3e	bc3e	bd 75 09	lda $0975,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc41	bc41	1d 79 09	ora $0979,x			ora 	SNDAdjustHigh,x
.dc44	bc44	f0 1e		beq $bc64			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc46	bc46	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc47	bc47	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.dc4a	bc4a	7d 75 09	adc $0975,x			adc 	SNDAdjustLow,x
.dc4d	bc4d	9d 65 09	sta $0965,x			sta 	SNDPitchLow,x
.dc50	bc50	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x
.dc53	bc53	7d 79 09	adc $0979,x			adc 	SNDAdjustHigh,x
.dc56	bc56	29 03		and #$03			and 	#3
.dc58	bc58	9d 69 09	sta $0969,x			sta 	SNDPitchHigh,x
.dc5b	bc5b					_SNDUCUpdate:
.dc5b	bc5b	8a		txa				txa 								; which channel.
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update the current note
.dc60	bc60	68		pla				pla
.dc61	bc61	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; more to do ?
.dc64	bc64					_SNDUCExit:
.dc64	bc64	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
