
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 26 16:54:37 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PLOT                             = $c1; $c1 PLOT
=$c2					KWD_PRINT                            = $c2; $c2 PRINT
=$c3					KWD_READ                             = $c3; $c3 READ
=$c4					KWD_RECT                             = $c4; $c4 RECT
=$c5					KWD_REM                              = $c5; $c5 REM
=$c6					KWD_RETURN                           = $c6; $c6 RETURN
=$c7					KWD_SOLID                            = $c7; $c7 SOLID
=$c8					KWD_SPRITE                           = $c8; $c8 SPRITE
=$c9					KWD_TEXT                             = $c9; $c9 TEXT
=$ca					KWD_TO                               = $ca; $ca TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 7f b5	jsr $b57f			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 de 99	jsr $99de			jsr 	PrintStringXA
.8014	20 00 93	jsr $9300			jsr 	NewCommand 					; erase current program
.8017	20 de a6	jsr $a6de			jsr 	BackloadProgram
.801a	4c 7b 94	jmp $947b			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 57 65			.text "Built Wednesday 26-Oct-2022. Build 2259."
>8065	64 6e 65 73 64 61 79 20 32 36 2d 4f 63 74 2d 32
>8075	30 32 32 2e 20 42 75 69 6c 64 20 32 32 35 39 2e

;******  Return to file: ./common/aa.system/00start.asm

>8085	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSprite:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8088					GXGraphicDraw:
.8088	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.808a	b0 06		bcs $8092			bcs 	_GDCoordinate
.808c	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808e	84 37		sty $37				sty 	gxzTemp0+1
.8090	80 4b		bra $80dd			bra 	_GDExecuteA 				; and execute
.8092					_GDCoordinate:
.8092	48		pha				pha 								; save AXY
.8093	da		phx				phx
.8094	5a		phy				phy
.8095	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8097					_GDCopy1:
.8097	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.809a	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809d	ca		dex				dex
.809e	10 f7		bpl $8097			bpl 	_GDCopy1
.80a0	68		pla				pla 								; update Y
.80a1	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a4	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a7	68		pla				pla
.80a8	8d 2a 06	sta $062a			sta 	gxCurrentX
.80ab	68		pla				pla 								; get A (command+X.1) back
.80ac	48		pha				pha
.80ad	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80af	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b2	68		pla				pla 								; get command back
.80b3	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b5	48		pha				pha 								; push back.
.80b6	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b8	f0 17		beq $80d1			beq 	_GDCopyToWorkArea
.80ba	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bd	f0 07		beq $80c6			beq 	_GDCheckY
.80bf	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c2	c9 40		cmp #$40			cmp 	#64
.80c4	b0 08		bcs $80ce			bcs 	_GDError1
.80c6					_GDCheckY:
.80c6	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c9	cd 3e 06	cmp $063e			cmp 	gxHeight
.80cc	90 03		bcc $80d1			bcc 	_GDCopyToWorkArea
.80ce					_GDError1:
.80ce	68		pla				pla
.80cf					_GDError2:
.80cf	38		sec				sec
.80d0	60		rts				rts
.80d1					_GDCopyToWorkArea:
.80d1	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d3					_GDCopy2:
.80d3	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d6	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d9	ca		dex				dex
.80da	10 f7		bpl $80d3			bpl 	_GDCopy2
.80dc	68		pla				pla 								; get command
.80dd					_GDExecuteA:
.80dd	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80df	b0 ee		bcs $80cf			bcs 	_GDError2
.80e1	aa		tax				tax
.80e2	7c e8 80	jmp ($80e8,x)			jmp 	(GRVectorTable,x)
.80e5					GXMove:
.80e5	18		clc				clc
.80e6	60		rts				rts
.80e7					GRUndefined:
>80e7	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e8					GRVectorTable:
>80e8	b7 82					.word	GXInitialise             ; $00 Initialise
>80ea	ce 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80ec	16 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ee	69 82					.word	GXClearBitmap            ; $03 Clear
>80f0	94 84					.word	GXSetColourMode          ; $04 Colour
>80f2	5f 86					.word	GXFontHandler            ; $05 DrawFont
>80f4	a7 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f6	0f 87					.word	GXSelect                 ; $07 SPRUSE
>80f8	35 87					.word	GXSelectImage            ; $08 SPRIMG
>80fa	e7 80					.word	GRUndefined              ; $09
>80fc	e7 80					.word	GRUndefined              ; $0a
>80fe	e7 80					.word	GRUndefined              ; $0b
>8100	e7 80					.word	GRUndefined              ; $0c
>8102	e7 80					.word	GRUndefined              ; $0d
>8104	e7 80					.word	GRUndefined              ; $0e
>8106	e7 80					.word	GRUndefined              ; $0f
>8108	e5 80					.word	GXMove                   ; $10 Move
>810a	62 83					.word	GXLine                   ; $11 Line
>810c	dd 84					.word	GXFrameRectangle         ; $12 FrameRect
>810e	da 84					.word	GXFillRectangle          ; $13 FillRect
>8110	20 81					.word	GXFrameCircle            ; $14 FrameCircle
>8112	1c 81					.word	GXFillCircle             ; $15 FillCircle
>8114	e7 80					.word	GRUndefined              ; $16
>8116	e7 80					.word	GRUndefined              ; $17
>8118	c2 84					.word	GXPlotPoint              ; $18 Plot
>811a	9a 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811c					GXFillCircle:
.811c	a9 ff		lda #$ff			lda 	#255
.811e	80 02		bra $8122			bra 	GXCircle
.8120					GXFrameCircle:
.8120	a9 00		lda #$00			lda 	#0
.8122					GXCircle:
.8122	8d 4d 06	sta $064d			sta 	gxIsFillMode					; save Fill flag
.8125	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8128	f0 26		beq $8150			beq 	_GXCFail
.812a	20 a1 88	jsr $88a1			jsr 	GXSortXY 					; topleft/bottomright
.812d	20 d6 87	jsr $87d6			jsr 	GXOpenBitmap 				; start drawing
.8130	20 22 82	jsr $8222			jsr 	GXCircleSetup 				; set up for drawing
.8133	9c 4e 06	stz $064e			stz 	gxYChanged
.8136					_GXCircleDraw:
.8136	ad 4b 06	lda $064b			lda 	gXCentre					; while x <= y
.8139	cd 4c 06	cmp $064c			cmp 	gYCentre
.813c	90 0a		bcc $8148			bcc 	_GXCircleContinue
.813e	d0 03		bne $8143			bne 	_GXNoLast
.8140	20 55 81	jsr $8155			jsr 	GXPlot1
.8143					_GXNoLast:
.8143	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap 				; close the bitmap
.8146	18		clc				clc
.8147	60		rts				rts
.8148					_GXCircleContinue:
.8148	20 52 81	jsr $8152			jsr 	GXPlot2 					; draw it
.814b	20 cf 81	jsr $81cf			jsr 	GXCircleMove 				; adjust the coordinates
.814e	80 e6		bra $8136			bra 	_GXCircleDraw
.8150					_GXCFail:
.8150	38		sec				sec
.8151	60		rts				rts
.8152					GXPlot2:
.8152	20 55 81	jsr $8155			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8155					GXPlot1:
.8155	ad 4c 06	lda $064c			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8158	f0 03		beq $815d			beq 	_GXPlot1Only
.815a	20 79 81	jsr $8179			jsr 	GXPlot0 						; plot and negate
.815d					_GXPlot1Only:
.815d	20 79 81	jsr $8179			jsr 	GXPlot0 						; twice, undoing negation
.8160	ad 4b 06	lda $064b			lda 	gXCentre 						; swap X and Y
.8163	ae 4c 06	ldx $064c			ldx	 	gYCentre
.8166	8d 4c 06	sta $064c			sta 	gYCentre
.8169	8e 4b 06	stx $064b			stx 	gXCentre
.816c	ad 4e 06	lda $064e			lda 	gxYChanged 						; toggle Y Changed flag
.816f	a9 ff		lda #$ff			lda 	#$FF
.8171	8d 4e 06	sta $064e			sta 	gxYChanged
.8174	60		rts				rts
.8175	20 79 81	jsr $8179			jsr 	GXPlot0 						; do once
.8178	60		rts				rts
.8179	ad 4d 06	lda $064d	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817c	f0 05		beq $8183			beq 	_GXPlot0Always
.817e	ad 4e 06	lda $064e			lda 	gxYChanged						; fill mode, only draw if changed.
.8181	f0 2d		beq $81b0			beq 	GXPlot0Exit
.8183					_GXPlot0Always:
.8183	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8185	ad 4c 06	lda $064c			lda 	gYCentre
.8188	20 b1 81	jsr $81b1			jsr 	GXSubCopy
.818b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818d	ad 4b 06	lda $064b			lda 	gXCentre
.8190	20 b1 81	jsr $81b1			jsr 	GXSubCopy
.8193	48		pha				pha 									; save last offset X
.8194	20 f4 87	jsr $87f4			jsr 	GXPositionCalc 					; calculate position/offset.
.8197	68		pla				pla
.8198	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8199	85 36		sta $36				sta 	gxzTemp0
.819b	64 37		stz $37				stz 	gxzTemp0+1
.819d	26 37		rol $37				rol 	gxzTemp0+1
.819f	ad 4d 06	lda $064d			lda 	gxIsFillMode
.81a2	69 80		adc #$80			adc 	#128
.81a4	20 2d 85	jsr $852d			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a7	38		sec				sec 									; GY = -GY
.81a8	a9 00		lda #$00			lda 	#0
.81aa	ed 4c 06	sbc $064c			sbc 	gYCentre
.81ad	8d 4c 06	sta $064c			sta 	gYCentre
.81b0					GXPlot0Exit:
.81b0	60		rts				rts
.81b1					GXSubCopy:
.81b1	85 36		sta $36				sta 	gxzTemp0
.81b3	64 37		stz $37				stz 	gxzTemp0+1
.81b5	29 80		and #$80			and 	#$80
.81b7	f0 02		beq $81bb			beq 	_GXNoSx
.81b9	c6 37		dec $37				dec 	gxzTemp0+1
.81bb					_GXNoSx:
.81bb	38		sec				sec
.81bc	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bf	e5 36		sbc $36				sbc 	gxzTemp0
.81c1	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c4	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c7	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c9	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81cc	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81ce	60		rts				rts
.81cf					GXCircleMove:
.81cf	9c 4e 06	stz $064e			stz 	gxYChanged 					; clear Y changed flag
.81d2	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d4	10 0d		bpl $81e3			bpl 	_GXEMPositive
.81d6	ee 4b 06	inc $064b			inc 	gXCentre 					; X++
.81d9	ad 4b 06	lda $064b			lda 	gXCentre
.81dc	20 02 82	jsr $8202			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81df	a9 06		lda #$06			lda 	#6  						; and add 6
.81e1	80 15		bra $81f8			bra 	_GXEMAddD
.81e3					_GXEMPositive:
.81e3	ee 4b 06	inc $064b			inc 	gXCentre					; X++
.81e6	ce 4c 06	dec $064c			dec 	gyCentre 					; Y--
.81e9	38		sec				sec 								; calculate X-Y
.81ea	ad 4b 06	lda $064b			lda 	gXCentre
.81ed	ed 4c 06	sbc $064c			sbc 	gYCentre
.81f0	20 02 82	jsr $8202			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f3	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f5	ce 4e 06	dec $064e			dec 	gxYChanged
.81f8					_GXEMAddD:
.81f8	18		clc				clc
.81f9	65 38		adc $38				adc 	gxzTemp1
.81fb	85 38		sta $38				sta 	gxzTemp1
.81fd	90 02		bcc $8201			bcc 	_GXEMNoCarry
.81ff	e6 39		inc $39				inc 	gxzTemp1+1
.8201					_GXEMNoCarry:
.8201	60		rts				rts
.8202					_GXAdd4TimesToD:
.8202	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8204	29 80		and #$80			and 	#$80
.8206	f0 02		beq $820a			beq 	_GXA4Unsigned
.8208	a9 ff		lda #$ff			lda 	#$FF
.820a					_GXA4Unsigned:
.820a	85 37		sta $37				sta 	gxzTemp0+1
.820c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820e	26 37		rol $37				rol 	gxzTemp0+1
.8210	06 36		asl $36				asl 	gxzTemp0
.8212	26 37		rol $37				rol 	gxzTemp0+1
.8214	18		clc				clc 								; add
.8215	a5 36		lda $36				lda		gxzTemp0
.8217	65 38		adc $38				adc 	gxzTemp1
.8219	85 38		sta $38				sta 	gxzTemp1
.821b	a5 37		lda $37				lda		gxzTemp0+1
.821d	65 39		adc $39				adc 	gxzTemp1+1
.821f	85 39		sta $39				sta 	gxzTemp1+1
.8221	60		rts				rts
.8222					GXCircleSetup:
.8222	38		sec				sec
.8223	ad 38 06	lda $0638			lda 	gxY1
.8226	ed 34 06	sbc $0634			sbc 	gxY0
.8229	4a		lsr a				lsr 	a
.822a	8d 4a 06	sta $064a			sta 	gxRadius
.822d	a2 00		ldx #$00			ldx 	#0
.822f	20 51 82	jsr $8251			jsr 	_GXCalculateCentre
.8232	a2 02		ldx #$02			ldx 	#2
.8234	20 51 82	jsr $8251			jsr 	_GXCalculateCentre
.8237	9c 4b 06	stz $064b			stz 	gXCentre
.823a	ad 4a 06	lda $064a			lda 	gxRadius
.823d	8d 4c 06	sta $064c			sta 	gYCentre
.8240	0a		asl a				asl 	a 							; R x 2
.8241	85 36		sta $36				sta 	gxzTemp0
.8243	38		sec				sec
.8244	a9 03		lda #$03			lda 	#3
.8246	e5 36		sbc $36				sbc 	gxzTemp0
.8248	85 38		sta $38				sta 	gxzTemp1
.824a	a9 00		lda #$00			lda 	#0
.824c	e9 00		sbc #$00			sbc 	#0
.824e	85 39		sta $39				sta 	gxzTemp1+1
.8250	60		rts				rts
.8251					_GXCalculateCentre:
.8251	38		sec				sec
.8252	bd 36 06	lda $0636,x			lda 	gxX1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0,x
.8258	9d 36 06	sta $0636,x			sta 	gXX1,x
.825b	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825e	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.8261	4a		lsr a				lsr 	a
.8262	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8265	7e 36 06	ror $0636,x			ror 	gXX1,x
.8268	60		rts				rts
.064a					gxRadius:
>064a							.fill 	1
.064b					gXCentre:
>064b							.fill 	1
.064c					gYCentre:
>064c							.fill 	1
.064d					gxIsFillMode:
>064d							.fill 	1
.064e					gxYChanged:
>064e							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8269					GXClearBitmap:
.8269	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826c	f0 24		beq $8292			beq 	_GXCBFail
.826e	20 d6 87	jsr $87d6			jsr 	GXOpenBitmap 				; start access
.8271	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8273	ad 3e 06	lda $063e			lda 	gxHeight
.8276	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8278	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.827a					_GXCalcLastPage:
.827a	98		tya				tya 								; add to base page
.827b	18		clc				clc
.827c	6d 3c 06	adc $063c			adc 	gxBasePage
.827f	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8281					_GXClearAll:
.8281	20 94 82	jsr $8294			jsr 	_GXClearBlock 				; clear 8k block
.8284	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8286	a5 0b		lda $0b				lda 	GXEditSlot
.8288	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.828b	b0 f4		bcs $8281			bcs 	_GXClearAll
.828d	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap	 			; stop access
.8290	18		clc				clc
.8291	60		rts				rts
.8292					_GXCBFail:
.8292	38		sec				sec
.8293	60		rts				rts
.8294					_GXClearBlock:
.8294	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8296	85 38		sta $38				sta 	0+gxzTemp1
.8298	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.829a	85 39		sta $39				sta 	1+gxzTemp1
.829c					_GXCB0:
.829c	a5 36		lda $36				lda 	gxzTemp0
.829e	a0 00		ldy #$00			ldy 	#0
.82a0					_GXCB1:
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a5	c8		iny				iny
.82a6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a8	c8		iny				iny
.82a9	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82ab	c8		iny				iny
.82ac	d0 f2		bne $82a0			bne 	_GXCB1
.82ae	e6 39		inc $39				inc 	gxzTemp1+1
.82b0	a5 39		lda $39				lda 	gxzTemp1+1
.82b2	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b4	d0 e6		bne $829c			bne 	_GXCB0
.82b6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b7					GXInitialise:
.82b7	64 01		stz $01				stz 	1
.82b9	a9 01		lda #$01			lda 	#1
.82bb	8d 00 d0	sta $d000			sta 	$D000
.82be	18		clc				clc
.82bf	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c2	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c5	a2 0f		ldx #$0f			ldx 	#15
.82c7					_GXIClear:
.82c7	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82ca	ca		dex				dex
.82cb	10 fa		bpl $82c7			bpl 	_GXIClear
.82cd	60		rts				rts
.82ce					GXControlBitmap:
.82ce	64 01		stz $01				stz 	1
.82d0	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d2	29 01		and #$01			and 	#1 							; set bitmap flag
.82d4	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d7	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d8	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82db	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82dd	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82df	90 02		bcc $82e3			bcc 	_CBNotOn
.82e1	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e3					_CBNotOn:
.82e3	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e6	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e8	29 07		and #$07			and 	#7
.82ea	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ed	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ef	d0 02		bne $82f3			bne 	_CBNotDefault
.82f1	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f3					_CBNotDefault:
.82f3	8d 3c 06	sta $063c			sta 	gxBasePage
.82f6	20 54 83	jsr $8354			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f9	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fb	8d 03 d1	sta $d103			sta 	$D103
.82fe	a5 36		lda $36				lda 	gxzTemp0
.8300	8d 02 d1	sta $d102			sta 	$D102
.8303	9c 01 d1	stz $d101			stz 	$D101
.8306	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8308	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830b	29 01		and #$01			and 	#1
.830d	f0 02		beq $8311			beq 	_CBHaveHeight
.830f	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8311					_CBHaveHeight
.8311	8e 3e 06	stx $063e			stx 	gxHeight
.8314	18		clc				clc
.8315	60		rts				rts
.8316					GXControlSprite:
.8316	64 01		stz $01				stz 	1
.8318	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831a	29 01		and #$01			and 	#1 							; set sprites flag
.831c	8d 3a 06	sta $063a			sta 	gxSpritesOn
.831f	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8320	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8323	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8325	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8327	90 02		bcc $832b			bcc 	_CSNotOn
.8329	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832b					_CSNotOn:
.832b	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8330	d0 02		bne $8334			bne 	_CSNotDefault
.8332	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8334					_CSNotDefault:
.8334	8d 3d 06	sta $063d			sta 	gxSpritePage
.8337	20 54 83	jsr $8354			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833a	a5 36		lda $36				lda 	zTemp0
.833c	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.833f	a5 37		lda $37				lda 	zTemp0+1
.8341	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8344	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8346					_CSClear:
.8346	9e 00 d9	stz $d900,x			stz 	$D900,x
.8349	9e 00 da	stz $da00,x			stz 	$DA00,x
.834c	ca		dex				dex
.834d	d0 f7		bne $8346			bne 	_CSClear
.834f	9c 47 06	stz $0647			stz 	GSCurrentSprite+1 			; no sprite selected.
.8352	18		clc				clc
.8353	60		rts				rts
.8354					GXCalculateBaseAddress:
.8354	85 36		sta $36				sta 	gxzTemp0
.8356	64 37		stz $37				stz 	gxzTemp0+1
.8358	a9 05		lda #$05			lda 	#5
.835a					_GXShift:
.835a	06 36		asl $36				asl 	gxzTemp0
.835c	26 37		rol $37				rol 	gxzTemp0+1
.835e	3a		dec a				dec		a
.835f	d0 f9		bne $835a			bne 	_GXShift
.8361	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8362					GXLine:
.8362	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8365	f0 28		beq $838f			beq 	_GXLFail
.8367	20 d6 87	jsr $87d6			jsr 	GXOpenBitmap
.836a	20 bf 88	jsr $88bf			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.836d	20 35 84	jsr $8435			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8370	20 f4 87	jsr $87f4			jsr 	GXPositionCalc 				; calculate position/offset.
.8373					_GXDrawLoop:
.8373	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8376	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8378	2d 42 06	and $0642			and 	gxANDValue
.837b	4d 41 06	eor $0641			eor 	gxEORValue
.837e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8380	20 91 83	jsr $8391			jsr 	GXLineIsComplete 			; is the line complete ?
.8383	f0 05		beq $838a			beq 	_GXLExit
.8385	20 ac 83	jsr $83ac			jsr 	GXLineAdvance 				; code as per advance method
.8388	80 e9		bra $8373			bra 	_GXDrawLoop
.838a					_GXLExit:
.838a	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap
.838d	18		clc				clc
.838e	60		rts				rts
.838f					_GXLFail:
.838f	38		sec				sec
.8390	60		rts				rts
.8391					GXLineIsComplete:
.8391	ad 51 06	lda $0651			lda 	GXIsDiffYLarger 			; is dy larger
.8394	d0 0f		bne $83a5			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8396	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.8399	4d 36 06	eor $0636			eor 	GXX1
.839c	d0 06		bne $83a4			bne 	_GXLICExit
.839e	ad 33 06	lda $0633			lda 	GXX0+1
.83a1	4d 37 06	eor $0637			eor 	GXX1+1
.83a4					_GXLICExit:
.83a4	60		rts				rts
.83a5					_GXLICCompareY:
.83a5	ad 38 06	lda $0638			lda 	GXY1
.83a8	4d 34 06	eor $0634			eor 	GXY0
.83ab	60		rts				rts
.83ac					GXLineAdvance:
.83ac	18		clc				clc 								; add adjust to position
.83ad	ad 53 06	lda $0653			lda 	GXPosition
.83b0	6d 54 06	adc $0654			adc 	GXAdjust
.83b3	8d 53 06	sta $0653			sta 	GXPosition
.83b6	9c 56 06	stz $0656			stz 	GXAddSelect 				; clear add select flag
.83b9	b0 05		bcs $83c0			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83bb	cd 55 06	cmp $0655			cmp 	GXTotal 					; if exceeded total
.83be	90 0a		bcc $83ca			bcc 	_GXLANoExtra
.83c0					_GXLAOverflow:
.83c0	ce 56 06	dec $0656			dec 	GXAddSelect 				; set addselect to $FF
.83c3	38		sec				sec 								; subtract total and write back
.83c4	ed 55 06	sbc $0655			sbc 	GXTotal
.83c7	8d 53 06	sta $0653			sta 	GXPosition
.83ca					_GXLANoExtra:
.83ca	ad 51 06	lda $0651			lda 	GXIsDiffYLarger
.83cd	f0 0d		beq $83dc			beq 	_GXDXLarger
.83cf	20 2e 84	jsr $842e			jsr 	GXIncrementY
.83d2	ad 56 06	lda $0656			lda 	GXAddSelect
.83d5	f0 10		beq $83e7			beq 	_GXLAExit
.83d7	20 e8 83	jsr $83e8			jsr 	GXAdjustX
.83da	80 0b		bra $83e7			bra 	_GXLAExit
.83dc					_GXDXLarger:
.83dc	20 e8 83	jsr $83e8			jsr 	GXAdjustX
.83df	ad 56 06	lda $0656			lda 	GXAddSelect
.83e2	f0 03		beq $83e7			beq 	_GXLAExit
.83e4	20 2e 84	jsr $842e			jsr 	GXIncrementY
.83e7					_GXLAExit:
.83e7	60		rts				rts
.83e8					GXAdjustX:
.83e8	ad 52 06	lda $0652			lda 	GXDXNegative
.83eb	10 25		bpl $8412			bpl 	_GXAXRight
.83ed	ad 32 06	lda $0632			lda 	GXX0
.83f0	d0 03		bne $83f5			bne 	_GXAXNoBorrow
.83f2	ce 33 06	dec $0633			dec 	GXX0+1
.83f5					_GXAXNoBorrow:
.83f5	ce 32 06	dec $0632			dec 	GXX0
.83f8	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.83fb	ad 45 06	lda $0645			lda 	gsOffset
.83fe	c9 ff		cmp #$ff			cmp 	#$FF
.8400	d0 0f		bne $8411			bne 	_GXAYExit 					; underflow
.8402	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8404	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8406	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8408	b0 07		bcs $8411			bcs 	_GXAYExit
.840a	18		clc				clc
.840b	69 20		adc #$20			adc 	#$20 						; fix up
.840d	85 3d		sta $3d				sta 	gxzScreen+1
.840f	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8411					_GXAYExit:
.8411	60		rts				rts
.8412					_GXAXRight:
.8412	ee 32 06	inc $0632			inc 	GXX0
.8415	d0 03		bne $841a			bne 	_GXAXNoCarry
.8417	ee 33 06	inc $0633			inc 	GXX0+1
.841a					_GXAXNoCarry:
.841a	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.841d	d0 0e		bne $842d			bne 	_GXAXExit 					; if not overflowed, exit.
.841f	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8421	a5 3d		lda $3d				lda 	gxzScreen+1
.8423	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8425	90 06		bcc $842d			bcc 	_GXAXExit
.8427	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8429	85 3d		sta $3d				sta 	gxzScreen+1
.842b	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.842d					_GXAXExit:
.842d	60		rts				rts
.842e					GXIncrementY:
.842e	ee 34 06	inc $0634			inc 	GXY0
.8431	20 4a 88	jsr $884a			jsr 	GXMovePositionDown
.8434	60		rts				rts
.8435					GXLineSetup:
.8435	ad 38 06	lda $0638			lda 	GXY1
.8438	38		sec				sec
.8439	ed 34 06	sbc $0634			sbc 	GXY0
.843c	4a		lsr a				lsr 	a
.843d	8d 50 06	sta $0650			sta 	GXDiffY
.8440	9c 52 06	stz $0652			stz 	GXDXNegative 				; clear -ve flag
.8443	38		sec				sec
.8444	ad 36 06	lda $0636			lda 	GXX1
.8447	ed 32 06	sbc $0632			sbc 	GXX0
.844a	8d 4f 06	sta $064f			sta 	GXDiffX
.844d	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8450	ed 33 06	sbc $0633			sbc 	GXX0+1
.8453	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8454	6e 4f 06	ror $064f			ror 	GXDiffX
.8457	0a		asl a				asl 	a
.8458	10 0c		bpl $8466			bpl 	_GDXNotNegative
.845a	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.845c	38		sec				sec
.845d	ed 4f 06	sbc $064f			sbc 	GXDiffX
.8460	8d 4f 06	sta $064f			sta 	GXDiffX
.8463	ce 52 06	dec $0652			dec 	GXDXNegative 				; -ve flag = $FF.
.8466					_GDXNotNegative:
.8466	9c 51 06	stz $0651			stz 	GXIsDiffYLarger 			; clear larger flag
.8469	ad 50 06	lda $0650			lda 	GXDiffY 					; set adjust and total.
.846c	8d 54 06	sta $0654			sta 	GXAdjust
.846f	ad 4f 06	lda $064f			lda 	GXDiffX
.8472	8d 55 06	sta $0655			sta 	GXTotal
.8475	ad 50 06	lda $0650			lda 	GXDiffY 					; if dy > dx
.8478	cd 4f 06	cmp $064f			cmp 	GXDiffX
.847b	90 0f		bcc $848c			bcc 	_GDXNotLarger
.847d	ce 51 06	dec $0651			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8480	ad 4f 06	lda $064f			lda 	GXDiffX 					; set adjust and total other way round
.8483	8d 54 06	sta $0654			sta 	GXAdjust
.8486	ad 50 06	lda $0650			lda 	GXDiffY
.8489	8d 55 06	sta $0655			sta 	GXTotal
.848c					_GDXNotLarger:
.848c	ad 55 06	lda $0655			lda 	GXTotal
.848f	4a		lsr a				lsr 	a
.8490	8d 53 06	sta $0653			sta 	GXPosition
.8493	60		rts				rts
.064f					GXDiffX:
>064f							.fill 	1
.0650					GXDiffY:
>0650							.fill 	1
.0651					GXIsDiffYLarger:
>0651							.fill 	1
.0652					GXDXNegative:
>0652							.fill 	1
.0653					GXPosition:
>0653							.fill 	1
.0654					GXAdjust:
>0654							.fill 	1
.0655					GXTotal:
>0655							.fill 	1
.0656					GXAddSelect:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8494					GXSetColourMode:
.8494	a6 36		ldx $36				ldx 	gxzTemp0
.8496	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.8499	a5 37		lda $37				lda 	gxzTemp0+1 								;
.849b	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.849e	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84a0	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84a3	ae 40 06	ldx $0640			ldx 	gxColour
.84a6	8e 41 06	stx $0641			stx 	gxEORValue
.84a9	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84ab	90 03		bcc $84b0			bcc 	_GXSDCNotAndColour
.84ad	8e 42 06	stx $0642			stx 	gxANDValue
.84b0					_GXSDCNotAndColour:
.84b0	d0 03		bne $84b5			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84b2	9c 41 06	stz $0641			stz 	gxEORValue
.84b5					_GXSDCNotAnd:
.84b5	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84b6	90 08		bcc $84c0			bcc 	_GXSDCNoFlip
.84b8	ad 42 06	lda $0642			lda	 	gxANDValue
.84bb	49 ff		eor #$ff			eor 	#$FF
.84bd	8d 42 06	sta $0642			sta 	gxANDValue
.84c0					_GXSDCNoFlip:
.84c0	18		clc				clc
.84c1	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84c2					GXPlotPoint:
.84c2	20 d6 87	jsr $87d6			jsr 	GXOpenBitmap 				; start drawing
.84c5	20 f4 87	jsr $87f4			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84c8	ac 45 06	ldy $0645			ldy 	gsOffset
.84cb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84cd	2d 42 06	and $0642			and 	gxANDValue
.84d0	4d 41 06	eor $0641			eor 	gxEORValue
.84d3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84d5	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap 				; stop drawing and exit
.84d8	18		clc				clc
.84d9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84da					GXFillRectangle:
.84da	38		sec				sec
.84db	80 01		bra $84de			bra 	GXRectangle
.84dd					GXFrameRectangle:
.84dd	18		clc				clc
.84de					GXRectangle:
.84de	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84e1	f0 35		beq $8518			beq 	_GXRFail
.84e3	08		php				php 								; save Fill flag (CS)
.84e4	20 d6 87	jsr $87d6			jsr 	GXOpenBitmap 				; start drawing
.84e7	20 a1 88	jsr $88a1			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84ea	20 f4 87	jsr $87f4			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ed	38		sec				sec 								; sec = Draw line
.84ee	20 1a 85	jsr $851a			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84f1	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.84f4	cd 38 06	cmp $0638			cmp 	gxY1
.84f7	f0 19		beq $8512			beq 	_GXRectangleExit
.84f9					_GXRectLoop:
.84f9	20 4a 88	jsr $884a			jsr 	GXMovePositionDown 			; down one.
.84fc	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.84ff	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8502	cd 38 06	cmp $0638			cmp 	gXY1
.8505	f0 07		beq $850e			beq 	_GXLastLine
.8507	28		plp				plp 								; get flag back
.8508	08		php				php
.8509	20 1a 85	jsr $851a			jsr 	GXDrawLineX1X0 				; draw horizontal line
.850c	80 eb		bra $84f9			bra 	_GXRectLoop
.850e					_GXLastLine:
.850e	38		sec				sec
.850f	20 1a 85	jsr $851a			jsr 	GXDrawLineX1X0
.8512					_GXRectangleExit:
.8512	68		pla				pla 								; throw fill flag.
.8513	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap 				; stop drawing and exit
.8516	18		clc				clc
.8517	60		rts				rts
.8518					_GXRFail:
.8518	38		sec				sec
.8519	60		rts				rts
.851a					GXDrawLineX1X0:
.851a	08		php				php 								; save solid/either-end
.851b	38		sec				sec
.851c	ad 36 06	lda $0636			lda		gXX1
.851f	ed 32 06	sbc $0632			sbc 	gXX0
.8522	85 36		sta $36				sta 	gxzTemp0
.8524	ad 37 06	lda $0637			lda 	gXX1+1
.8527	ed 33 06	sbc $0633			sbc 	gXX0+1
.852a	85 37		sta $37				sta 	gxzTemp0+1
.852c	28		plp				plp
.852d					GXDrawLineTemp0:
.852d	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.852f	48		pha				pha
.8530	a5 3d		lda $3d				lda 	gxzScreen+1
.8532	48		pha				pha
.8533	ad 45 06	lda $0645			lda 	gsOffset
.8536	48		pha				pha
.8537	a5 0b		lda $0b				lda 	GXEditSlot
.8539	48		pha				pha
.853a	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.853d	90 1e		bcc $855d			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.853f					_GXDLTLine:
.853f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8541	2d 42 06	and $0642			and 	gxANDValue
.8544	4d 41 06	eor $0641			eor 	gxEORValue
.8547	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8549	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.854b	d0 04		bne $8551			bne 	_GXDLTNoBorrow
.854d	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.854f	30 2e		bmi $857f			bmi 	_GXDLTExit
.8551					_GXDLTNoBorrow:
.8551	c6 36		dec $36				dec 	gxzTemp0
.8553	c8		iny				iny 								; next slot.
.8554	d0 e9		bne $853f			bne 	_GXDLTLine
.8556	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8558	20 8d 85	jsr $858d			jsr 	GXDLTCheckWrap				; check for new page.
.855b	80 e2		bra $853f			bra 	_GXDLTLine
.855d					_GXDLTEndPoints:
.855d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.855f	2d 42 06	and $0642			and 	gxANDValue
.8562	4d 41 06	eor $0641			eor 	gxEORValue
.8565	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8567	98		tya				tya 								; advance to right side
.8568	18		clc				clc
.8569	65 36		adc $36				adc 	gxzTemp0
.856b	a8		tay				tay
.856c	a5 3d		lda $3d				lda 	gxzScreen+1
.856e	65 37		adc $37				adc 	gxzTemp0+1
.8570	85 3d		sta $3d				sta 	gxzScreen+1
.8572	20 8d 85	jsr $858d			jsr 	GXDLTCheckWrap 			; fix up.
.8575	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8577	2d 42 06	and $0642			and 	gxANDValue
.857a	4d 41 06	eor $0641			eor 	gxEORValue
.857d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857f					_GXDLTExit:
.857f	68		pla				pla
.8580	85 0b		sta $0b				sta 	GXEditSlot
.8582	68		pla				pla
.8583	8d 45 06	sta $0645			sta 	gsOffset
.8586	68		pla				pla
.8587	85 3d		sta $3d				sta 	gxzScreen+1
.8589	68		pla				pla
.858a	85 3c		sta $3c				sta 	gxzScreen
.858c	60		rts				rts
.858d					GXDLTCheckWrap:
.858d	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.858f	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8591	90 06		bcc $8599			bcc 	_GXDLTCWExit
.8593	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8595	85 3d		sta $3d				sta 	gxzScreen+1
.8597	e6 0b		inc $0b				inc 	GXEditSlot
.8599					_GXDLTCWExit:
.8599	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.859a					GXDrawGraphicElement:
.859a	8d 57 06	sta $0657			sta 	gxSize 						; save size
.859d	3a		dec a				dec 	a
.859e	8d 58 06	sta $0658			sta 	gxMask 						; and mask
.85a1	9c 5c 06	stz $065c			stz 	gxVFlip 					; set the flip bytes
.85a4	9c 5d 06	stz $065d			stz 	gxHFlip
.85a7	2c 5e 06	bit $065e			bit 	gxUseMode
.85aa	10 03		bpl $85af			bpl 	_GXNotVertical
.85ac	8d 5c 06	sta $065c			sta 	gxVFlip
.85af					_GXNotVertical:
.85af	50 03		bvc $85b4			bvc 	_GXNotHorizontal
.85b1	8d 5d 06	sta $065d			sta 	gxHFlip
.85b4					_GXNotHorizontal:
.85b4	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b7	f0 5f		beq $8618			beq 	_GXSLFail
.85b9	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85bc	48		pha				pha
.85bd	8c 5a 06	sty $065a			sty 	gxAcquireVector+1 			; and acquisition vector
.85c0	8e 59 06	stx $0659			stx 	gxAcquireVector
.85c3	20 d6 87	jsr $87d6			jsr 	gxOpenBitmap 				; open the bitmap.
.85c6	ad 5e 06	lda $065e			lda 	gxUseMode 					; scale bits
.85c9	4a		lsr a				lsr 	a
.85ca	4a		lsr a				lsr 	a
.85cb	4a		lsr a				lsr 	a
.85cc	29 07		and #$07			and		#7
.85ce	1a		inc a				inc 	a
.85cf	8d 5b 06	sta $065b			sta 	gxScale
.85d2	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d4					_GXGELoop:
.85d4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d6	4d 5c 06	eor $065c			eor 	gxVFlip
.85d9	aa		tax				tax 								; get the Xth line.
.85da	20 1a 86	jsr $861a			jsr 	_GXCallAcquire 				; get that data.
.85dd	ad 5b 06	lda $065b			lda 	gxScale 					; do scale identical copies of that line.
.85e0	85 39		sta $39				sta 	gxzTemp1+1
.85e2					_GXGELoop2:
.85e2	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85e5	cd 3e 06	cmp $063e			cmp 	gxHeight
.85e8	b0 10		bcs $85fa			bcs 	_GXDGEExit
.85ea	20 1d 86	jsr $861d			jsr 	GXRenderOneLine 			; render line
.85ed	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85ef	d0 f1		bne $85e2			bne 	_GXGELoop2
.85f1	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85f3	a5 38		lda $38				lda 	gxzTemp1
.85f5	cd 57 06	cmp $0657			cmp 	gxSize
.85f8	d0 da		bne $85d4			bne 	_GXGELoop
.85fa					_GXDGEExit:
.85fa	68		pla				pla 								; restore Y for next time
.85fb	8d 34 06	sta $0634			sta 	gxY0
.85fe	ae 5b 06	ldx $065b			ldx 	gxScale 					; get scale (1-8)
.8601					_GXShiftLeft:
.8601	18		clc				clc
.8602	ad 57 06	lda $0657			lda 	gxSize
.8605	6d 32 06	adc $0632			adc 	gxX0
.8608	8d 32 06	sta $0632			sta 	gxX0
.860b	90 03		bcc $8610			bcc 	_GXSLNoCarry
.860d	ee 33 06	inc $0633			inc 	gxX0+1
.8610					_GXSLNoCarry:
.8610	ca		dex				dex
.8611	d0 ee		bne $8601			bne 	_GXShiftLeft
.8613	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap
.8616	18		clc				clc
.8617	60		rts				rts
.8618					_GXSLFail:
.8618	38		sec				sec
.8619	60		rts				rts
.861a					_GXCallAcquire:
.861a	6c 59 06	jmp ($0659)			jmp 	(gxAcquireVector)
.861d					GXRenderOneLine:
.861d	20 f4 87	jsr $87f4			jsr 	GXPositionCalc 				; calculate position/offset.
.8620	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.8623	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.8625					_GXROLLoop1:
.8625	ad 5b 06	lda $065b			lda 	gxScale 					; set to do 'scale' times
.8628	85 3b		sta $3b				sta 	gxzTemp2+1
.862a					_GXROLLoop2:
.862a	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.862c	4d 5d 06	eor $065d			eor 	gxHFlip
.862f	aa		tax				tax 								; read from the pixel buffer
.8630	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8633	d0 07		bne $863c			bne 	_GXDraw 					; draw if non zero
.8635	ad 5e 06	lda $065e			lda 	gxUseMode 					; check to see if solid background
.8638	29 04		and #$04			and 	#4
.863a	f0 0a		beq $8646			beq 	_GXZeroPixel
.863c					_GXDraw:
.863c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.863e	2d 42 06	and $0642			and 	gxANDValue
.8641	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8644	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8646					_GXZeroPixel:
.8646	c8		iny				iny 								; advance pointer
.8647	d0 05		bne $864e			bne 	_GXNoShift
.8649	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.864b	20 8d 85	jsr $858d			jsr 	GXDLTCheckWrap				; check for new page.
.864e					_GXNoShift:
.864e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8650	d0 d8		bne $862a			bne 	_GXROLLoop2
.8652	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8654	a5 3a		lda $3a				lda 	gxzTemp2
.8656	cd 57 06	cmp $0657			cmp 	gxSize
.8659	d0 ca		bne $8625			bne 	_GXROLLoop1
.865b	ee 34 06	inc $0634			inc 	gxY0
.865e	60		rts				rts
.0657					gxSize:
>0657							.fill 	1
.0658					gxMask:
>0658							.fill 	1
.0659					gxAcquireVector:
>0659							.fill 	2
.065b					gxScale:
>065b							.fill 	1
.065c					gxVFlip:
>065c							.fill 	1
.065d					gxHFlip:
>065d							.fill 	1
.065e					gxUseMode:
>065e							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.865f					GXFontHandler:
.865f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8661	4d 3f 06	eor $063f			eor 	gxMode
.8664	8d 5e 06	sta $065e			sta 	gxUseMode
.8667	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8669	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.866b	26 37		rol $37				rol	 	gxzTemp0+1
.866d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.866f	26 37		rol $37				rol	 	gxzTemp0+1
.8671	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8673	26 37		rol $37				rol	 	gxzTemp0+1
.8675	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8677	09 c0		ora #$c0			ora 	#$C0
.8679	85 37		sta $37				sta 	gxzTemp0+1
.867b	a9 08		lda #$08			lda 	#8 							; size 8x8
.867d	a2 85		ldx #$85			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.867f	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8681	20 9a 85	jsr $859a			jsr 	GXDrawGraphicElement
.8684	60		rts				rts
.8685					GXGetGraphicDataFont:
.8685	8a		txa				txa 								; X->Y
.8686	a8		tay				tay
.8687	a6 01		ldx $01				ldx 	1 							; preserve old value
.8689	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.868b	85 01		sta $01				sta 	1
.868d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.868f	86 01		stx $01				stx 	1 							; put old value back.
.8691	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8693					_GXExpand:
.8693	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8696	0a		asl a				asl 	a 							; shift bit 7 into C
.8697	90 08		bcc $86a1			bcc 	_GXNoPixel
.8699	48		pha				pha 								; if set, set pixel buffer to current colour.
.869a	ad 40 06	lda $0640			lda 	gxColour
.869d	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86a0	68		pla				pla
.86a1					_GXNoPixel:
.86a1	e8		inx				inx 								; do the whole byte.
.86a2	e0 08		cpx #$08			cpx 	#8
.86a4	d0 ed		bne $8693			bne 	_GXExpand
.86a6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86a7					GXSpriteHandler:
.86a7	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86a9	4d 3f 06	eor $063f			eor 	gxMode
.86ac	8d 5e 06	sta $065e			sta 	gxUseMode
.86af	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86b1	da		phx				phx
.86b2	20 d6 87	jsr $87d6			jsr 	GXOpenBitmap 				; can access sprite information
.86b5	68		pla				pla
.86b6	20 65 88	jsr $8865			jsr 	GXFindSprite 				; get the sprite address
.86b9	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap
.86bc	ad 5f 06	lda $065f			lda 	GXSizePixels 					; return size
.86bf	a2 c7		ldx #$c7			ldx 	#GXSpriteAcquire & $FF
.86c1	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86c3	20 9a 85	jsr $859a			jsr 	GXDrawGraphicElement
.86c6	60		rts				rts
.86c7					GXSpriteAcquire:
.86c7	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86ca	85 0b		sta $0b				sta 	GXEditSlot
.86cc	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86ce	a9 00		lda #$00			lda 	#0
.86d0	ae 60 06	ldx $0660			ldx 	GXSizeBits
.86d3					_GXTimesRowNumber:
.86d3	18		clc				clc
.86d4	65 36		adc $36				adc 	zTemp0
.86d6	ca		dex				dex
.86d7	10 fa		bpl $86d3			bpl 	_GXTimesRowNumber
.86d9	64 37		stz $37				stz 	gxzTemp0+1
.86db	0a		asl a				asl 	a 							; row x 2,4,6,8
.86dc	26 37		rol $37				rol 	gxzTemp0+1
.86de	0a		asl a				asl 	a 							; row x 4,8,12,16
.86df	26 37		rol $37				rol 	gxzTemp0+1
.86e1	0a		asl a				asl 	a 							; row x 8,16,24,32
.86e2	26 37		rol $37				rol 	gxzTemp0+1
.86e4	85 36		sta $36				sta 	gxzTemp0
.86e6	18		clc				clc 								; add base address.
.86e7	a5 36		lda $36				lda 	gxzTemp0
.86e9	6d 62 06	adc $0662			adc 	GXSpriteOffset
.86ec	85 36		sta $36				sta 	gxzTemp0
.86ee	a5 37		lda $37				lda 	gxzTemp0+1
.86f0	6d 63 06	adc $0663			adc 	GXSpriteOffset+1
.86f3					_GXSAFindPage:
.86f3	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86f5	90 06		bcc $86fd			bcc 	_GXSAFoundPage
.86f7	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86f9	e6 0b		inc $0b				inc 	GXEditSlot
.86fb	80 f6		bra $86f3			bra 	_GXSAFindPage
.86fd					_GXSAFoundPage:
.86fd	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ff	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8701	a0 00		ldy #$00			ldy 	#0
.8703					_GXSACopyLoop:
.8703	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8705	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.8708	c8		iny				iny
.8709	cc 5f 06	cpy $065f			cpy 	GXSizePixels
.870c	d0 f5		bne $8703			bne 	_GXSACopyLoop
.870e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.870f					GXSelect:
.870f	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8712	f0 1f		beq $8733			beq 	_GXSFail
.8714	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8716	c9 40		cmp #$40			cmp 	#64
.8718	b0 19		bcs $8733			bcs 	_GXSFail
.871a	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.871c	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.871e	06 36		asl $36				asl 	gxzTemp0
.8720	06 36		asl $36				asl 	gxzTemp0
.8722	06 36		asl $36				asl 	gxzTemp0
.8724	2a		rol a				rol 	a
.8725	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8727	8d 47 06	sta $0647			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.872a	85 37		sta $37				sta 	gxzTemp0+1
.872c	a5 36		lda $36				lda 	gxzTemp0
.872e	8d 46 06	sta $0646			sta 	GSCurrentSprite
.8731	18		clc				clc
.8732	60		rts				rts
.8733					_GXSFail:
.8733	38		sec				sec
.8734	60		rts				rts
.8735					GXSelectImage:
.8735	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8738	f0 5e		beq $8798			beq 	_GXSIFail
.873a	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.873d	f0 59		beq $8798			beq 	_GXSIFail
.873f	64 01		stz $01				stz 	1
.8741	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8743	d0 43		bne $8788			bne 	_GXSIHide
.8745	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8747	48		pha				pha
.8748	20 d6 87	jsr $87d6			jsr 	GXOpenBitmap
.874b	68		pla				pla
.874c	20 65 88	jsr $8865			jsr 	GXFindSprite
.874f	a0 01		ldy #$01			ldy 	#1
.8751	ad 46 06	lda $0646			lda 	GSCurrentSprite
.8754	85 36		sta $36				sta 	gxzTemp0
.8756	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.8759	85 37		sta $37				sta 	gxzTemp0+1
.875b	ad 62 06	lda $0662			lda 	GXSpriteOffset
.875e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8760	18		clc				clc
.8761	ad 63 06	lda $0663			lda 	GXSpriteOffset+1
.8764	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.8767	c8		iny				iny
.8768	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.876a	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.876d	69 00		adc #$00			adc 	#0
.876f	c8		iny				iny
.8770	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8772	ad 60 06	lda $0660			lda 	GXSizeBits 					; get raw size
.8775	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8777	2a		rol a				rol 	a 							; x 2
.8778	0a		asl a				asl 	a 							; x 4
.8779	0a		asl a				asl 	a 							; x 8
.877a	0a		asl a				asl 	a 							; x 16
.877b	0d 61 06	ora $0661			ora 	GXSpriteLUT 						; Or with LUT
.877e	0a		asl a				asl 	a 							; 1 shift
.877f	09 01		ora #$01			ora 	#1 							; enable sprite.
.8781	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8783	20 e7 87	jsr $87e7			jsr 	GXCloseBitmap
.8786	18		clc				clc
.8787	60		rts				rts
.8788					_GXSIHide:
.8788	ad 46 06	lda $0646			lda 	GSCurrentSprite
.878b	85 36		sta $36				sta 	gxzTemp0
.878d	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.8790	85 37		sta $37				sta 	gxzTemp0+1
.8792	a9 00		lda #$00			lda 	#0
.8794	92 36		sta ($36)			sta 	(gxzTemp0)
.8796	18		clc				clc
.8797	60		rts				rts
.8798					_GXSIFail:
.8798	38		sec				sec
.8799	60		rts				rts
.879a					GXMoveSprite:
.879a	ad 3a 06	lda $063a			lda 	gxSpritesOn
.879d	f0 35		beq $87d4			beq 	_GXSIFail
.879f	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.87a2	f0 30		beq $87d4			beq 	_GXSIFail
.87a4	85 37		sta $37				sta 	gxzTemp0+1
.87a6	a0 04		ldy #$04			ldy 	#4
.87a8	ad 46 06	lda $0646			lda 	GSCurrentSprite
.87ab	85 36		sta $36				sta 	gxzTemp0
.87ad	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87af	38		sec				sec
.87b0	ed 5f 06	sbc $065f			sbc 	GXSizePixels
.87b3	4a		lsr a				lsr 	a
.87b4	48		pha				pha
.87b5	18		clc				clc
.87b6	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.87b9	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87bb	c8		iny				iny
.87bc	ad 33 06	lda $0633			lda 	gxX0+1
.87bf	69 00		adc #$00			adc 	#0
.87c1	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c3	c8		iny				iny
.87c4	68		pla				pla
.87c5	18		clc				clc
.87c6	6d 34 06	adc $0634			adc 	gxY0
.87c9	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87cb	a9 00		lda #$00			lda 	#0
.87cd	69 00		adc #$00			adc 	#0
.87cf	c8		iny				iny
.87d0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87d2	18		clc				clc
.87d3	60		rts				rts
.87d4					_GXSIFail:
.87d4	38		sec				sec
.87d5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87d6					GXOpenBitmap:
.87d6	78		sei				sei 								; no interrupts here
.87d7	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87d9	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.87dc	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87de	85 00		sta $00				sta 	0
.87e0	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87e2	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.87e5	58		cli				cli
.87e6	60		rts				rts
.87e7					GXCloseBitmap:
.87e7	78		sei				sei
.87e8	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87eb	85 0b		sta $0b				sta 	GXEditSlot
.87ed	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87f0	85 00		sta $00				sta 	0
.87f2	58		cli				cli
.87f3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87f4					GXPositionCalc:
.87f4	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87f6	48		pha				pha
.87f7	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.87fa	85 3c		sta $3c				sta 	gxzScreen
.87fc	64 3d		stz $3d				stz 	gxzScreen+1
.87fe	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.8800	26 3d		rol $3d				rol 	gxzScreen+1
.8802	06 3c		asl $3c				asl 	gxzScreen
.8804	26 3d		rol $3d				rol 	gxzScreen+1
.8806	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8807	65 3c		adc $3c				adc 	gxzScreen
.8809	85 3c		sta $3c				sta 	gxzScreen
.880b	90 02		bcc $880f			bcc 	_GXPCNoCarry
.880d	e6 3d		inc $3d				inc 	gxzScreen+1
.880f					_GXPCNoCarry:
.880f	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8811	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8813	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8815	85 36		sta $36				sta 	gxzTemp0
.8817	64 3d		stz $3d				stz 	gxzScreen+1
.8819	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.881b					_GXPCMultiply32:
.881b	06 3c		asl $3c				asl 	gxzScreen
.881d	26 3d		rol $3d				rol 	gxzScreen+1
.881f	3a		dec a				dec 	a
.8820	d0 f9		bne $881b			bne 	_GXPCMultiply32
.8822	18		clc				clc
.8823	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8826	65 3c		adc $3c				adc 	gxzScreen
.8828	8d 45 06	sta $0645			sta 	gsOffset
.882b	ad 33 06	lda $0633			lda 	GXX0+1
.882e	65 3d		adc $3d				adc 	gxzScreen+1
.8830	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8832	90 04		bcc $8838			bcc 	_GXPCNoOverflow
.8834	29 1f		and #$1f			and 	#$1F 						; fix it up
.8836	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8838					_GXPCNoOverflow:
.8838	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.883a	85 3d		sta $3d				sta 	gxzScreen+1
.883c	64 3c		stz $3c				stz 	gxzScreen
.883e	18		clc				clc
.883f	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8841	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.8844	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8846	68		pla				pla
.8847	85 36		sta $36				sta 	gxzTemp0
.8849	60		rts				rts
.884a					GXMovePositionDown:
.884a	18		clc				clc 								; add 320 to offset/temp+1
.884b	ad 45 06	lda $0645			lda 	gsOffset
.884e	69 40		adc #$40			adc 	#64
.8850	8d 45 06	sta $0645			sta 	gsOffset
.8853	a5 3d		lda $3d				lda 	gxzScreen+1
.8855	69 01		adc #$01			adc 	#1
.8857	85 3d		sta $3d				sta 	gxzScreen+1
.8859	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.885b	90 07		bcc $8864			bcc 	_GXMPDExit
.885d	38		sec				sec  								; next page
.885e	e9 20		sbc #$20			sbc 	#$20
.8860	85 3d		sta $3d				sta 	gxzScreen+1
.8862	e6 0b		inc $0b				inc 	GXEditSlot
.8864					_GXMPDExit:
.8864	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8865					GXFindSprite:
.8865	aa		tax				tax
.8866	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8869	85 0b		sta $0b				sta 	GXEditSlot
.886b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.886e	8d 63 06	sta $0663			sta 	GXSpriteOffset+1
.8871	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8874	48		pha				pha 								; save twice
.8875	48		pha				pha
.8876	29 03		and #$03			and 	#3 							; get sprite size
.8878	8d 60 06	sta $0660			sta 	GXSizeBits 					; save raw (0-3)
.887b	aa		tax				tax
.887c	bd 9d 88	lda $889d,x			lda 	_GXFXSSTTable,x 			; read sprite size
.887f	8d 5f 06	sta $065f			sta 	GXSizePixels 					; save (8/16/24/32)
.8882	68		pla				pla 								; get LUT
.8883	4a		lsr a				lsr		a
.8884	4a		lsr a				lsr		a
.8885	29 03		and #$03			and 	#3
.8887	8d 61 06	sta $0661			sta 	GXSpriteLUT
.888a	68		pla				pla 								; address, neeeds to be x 4
.888b	29 f0		and #$f0			and 	#$F0
.888d	8d 62 06	sta $0662			sta 	GXSpriteOffset
.8890	0e 62 06	asl $0662			asl 	GXSpriteOffset
.8893	2e 63 06	rol $0663			rol 	GXSpriteOffset+1
.8896	0e 62 06	asl $0662			asl 	GXSpriteOffset
.8899	2e 63 06	rol $0663			rol 	GXSpriteOffset+1
.889c	60		rts				rts
.889d					_GXFXSSTTable:
>889d	08 10 18 20					.byte 	8,16,24,32
.065f					GXSizePixels:
>065f							.fill 	1
.0660					GXSizeBits:
>0660							.fill 	1
.0661					GXSpriteLUT:
>0661							.fill 	1
.0662					GXSpriteOffset:
>0662							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.88a1					GXSortXY:
.88a1	20 bf 88	jsr $88bf			jsr 	GXSortY 					; will be sorted on Y now
.88a4	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.88a7	cd 36 06	cmp $0636			cmp 	gxX1
.88aa	ad 33 06	lda $0633			lda 	gXX0+1
.88ad	ed 37 06	sbc $0637			sbc 	gXX1+1
.88b0	90 0c		bcc $88be			bcc 	_GXSXYExit 					; X0 < X1 exit
.88b2	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88b4	a0 04		ldy #$04			ldy 	#4
.88b6	20 d3 88	jsr $88d3			jsr 	GXSwapXY
.88b9	e8		inx				inx
.88ba	c8		iny				iny
.88bb	20 d3 88	jsr $88d3			jsr 	GXSwapXY
.88be					_GXSXYExit:
.88be	60		rts				rts
.88bf					GXSortY:
.88bf	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.88c2	cd 38 06	cmp $0638			cmp 	gxY1
.88c5	90 0b		bcc $88d2			bcc 	_GXSYSorted
.88c7	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88c9	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88cb					_GXSwap1:
.88cb	20 d3 88	jsr $88d3			jsr 	GXSwapXY
.88ce	88		dey				dey
.88cf	ca		dex				dex
.88d0	10 f9		bpl $88cb			bpl 	_GXSwap1
.88d2					_GXSYSorted:
.88d2	60		rts				rts
.88d3					GXSwapXY:
.88d3	bd 32 06	lda $0632,x			lda 	gxX0,x
.88d6	48		pha				pha
.88d7	b9 32 06	lda $0632,y			lda 	gxX0,y
.88da	9d 32 06	sta $0632,x			sta 	gxX0,x
.88dd	68		pla				pla
.88de	99 32 06	sta $0632,y			sta 	gxX0,y
.88e1	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88e2					AssembleGroup1:
.88e2	a9 ff		lda #$ff			lda 	#$FF
.88e4	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88e7	80 02		bra $88eb			bra 	AsmGroup12
.88e9					AssembleGroup2:
.88e9	a5 00		lda $00				lda 	$00
.88eb					AsmGroup12:
.88eb	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88ee	68		pla				pla 								; pop the return address to access the information following.
.88ef	fa		plx				plx
.88f0	20 79 89	jsr $8979			jsr 	AccessParameters 			; get opcode and save as base
.88f3	8d a4 04	sta $04a4			sta 	BaseOpcode
.88f6	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88f9	d0 08		bne $8903			bne 	_AG12HaveMask
.88fb	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88fd	20 81 89	jsr $8981			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8900	8d a5 04	sta $04a5			sta 	ModeMask
.8903					_AG12HaveMask:
.8903	20 bc 8a	jsr $8abc			jsr 	TypeAndCalculateOperand 	; get zero page type
.8906	da		phx				phx 								; save found address mode
.8907	20 e5 89	jsr $89e5			jsr 	AssembleModeX
.890a	fa		plx				plx  								; restore address mode
.890b	b0 0b		bcs $8918			bcs 	_AG12Exit
.890d	20 19 89	jsr $8919			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8910	20 e5 89	jsr $89e5			jsr 	AssembleModeX
.8913	b0 03		bcs $8918			bcs 	_AG12Exit
.8915	4c d8 b3	jmp $b3d8			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8918					_AG12Exit:
.8918	60		rts				rts
.8919					PromoteToAbsolute:
.8919	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.891b	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.891d	f0 19		beq $8938			beq 	_PTADo
.891f	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8921	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8923	f0 13		beq $8938			beq 	_PTADo
.8925	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8927	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8929	f0 0d		beq $8938			beq 	_PTADo
.892b	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.892d	e0 d1		cpx #$d1			cpx 	#AM_IND
.892f	f0 07		beq $8938			beq 	_PTADo
.8931	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8933	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8935	f0 01		beq $8938			beq 	_PTADo
.8937	60		rts				rts
.8938					_PTADo:
.8938	aa		tax				tax
.8939	60		rts				rts
.893a					AssembleGroup3:
.893a	68		pla				pla 								; get parameters, which is just the opcode.
.893b	fa		plx				plx
.893c	20 79 89	jsr $8979			jsr 	AccessParameters 			; get and output opcode
.893f	20 91 89	jsr $8991			jsr 	AssemblerWriteByte
.8942	20 20 8b	jsr $8b20			jsr 	CalculateOperand 			; get a 16 bit operand
.8945	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8948	38		sec				sec
.8949	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.894c	48		pha				pha 								; LSB in A
.894d	ad 10 04	lda $0410			lda 	NSMantissa1
.8950	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8953	aa		tax				tax 								; MSB in X
.8954	68		pla				pla
.8955	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8956	69 7f		adc #$7f			adc 	#$7F
.8958	90 01		bcc $895b			bcc 	_AG3NoCarry
.895a	e8		inx				inx
.895b					_AG3NoCarry:
.895b	38		sec				sec 								; fix back and write out anyways.
.895c	e9 80		sbc #$80			sbc 	#$80
.895e	20 91 89	jsr $8991			jsr 	AssemblerWriteByte
.8961	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8963	f0 0a		beq $896f			beq 	_AG3Exit
.8965	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8968	29 01		and #$01			and 	#1
.896a	f0 03		beq $896f			beq 	_AG3Exit
.896c	4c dd b3	jmp $b3dd			jmp 	RangeError 					; no, branch is out of range
.896f					_AG3Exit:
.896f	60		rts				rts
.8970					AssembleGroup4:
.8970	68		pla				pla 								; pop address
.8971	fa		plx				plx
.8972	20 79 89	jsr $8979			jsr 	AccessParameters 			; access and get first
.8975	20 91 89	jsr $8991			jsr 	AssemblerWriteByte 			; output it.
.8978	60		rts				rts
.8979					AccessParameters:
.8979	8d a1 04	sta $04a1			sta 	ParamStart
.897c	8e a2 04	stx $04a2			stx 	ParamStart+1
.897f	a9 01		lda #$01			lda 	#1
.8981					GetParameter:
.8981	5a		phy				phy
.8982	a8		tay				tay
.8983	ad a1 04	lda $04a1			lda 	ParamStart
.8986	85 36		sta $36				sta 	zTemp0
.8988	ad a2 04	lda $04a2			lda 	ParamStart+1
.898b	85 37		sta $37				sta 	zTemp0+1
.898d	b1 36		lda ($36),y			lda 	(zTemp0),y
.898f	7a		ply				ply
.8990	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8991					AssemblerWriteByte:
.8991	48		pha			pha
.8992	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8995	29 02		and #$02		and 	#2
.8997	f0 1b		beq $89b4		beq 	_AWBNoPrint
.8999	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.899c	20 cf 89	jsr $89cf		jsr 	PrintHex
.899f	ad 9e 04	lda $049e		lda		AssemblerAddress
.89a2	20 cf 89	jsr $89cf		jsr 	PrintHex
.89a5	a9 20		lda #$20		lda 	#' '
.89a7	20 93 b5	jsr $b593		jsr 	EXTPrintCharacter
.89aa	68		pla			pla 									; print byte
.89ab	48		pha			pha
.89ac	20 cf 89	jsr $89cf		jsr 	PrintHex
.89af	a9 0d		lda #$0d		lda 	#13
.89b1	20 93 b5	jsr $b593		jsr 	EXTPrintCharacter
.89b4					_AWBNoPrint:
.89b4	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89b7	85 36		sta $36			sta 	zTemp0
.89b9	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89bc	f0 0e		beq $89cc		beq 	_AWBRange
.89be	85 37		sta $37			sta 	zTemp0+1
.89c0	68		pla			pla 									; write byte out
.89c1	92 36		sta ($36)		sta 	(zTemp0)
.89c3	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89c6	d0 03		bne $89cb		bne 	_AWBNoCarry
.89c8	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89cb					_AWBNoCarry:
.89cb	60		rts			rts
.89cc					_AWBRange:
.89cc	4c dd b3	jmp $b3dd		jmp 	RangeError
.89cf					PrintHex:
.89cf	48		pha				pha
.89d0	4a		lsr a				lsr 	a
.89d1	4a		lsr a				lsr 	a
.89d2	4a		lsr a				lsr 	a
.89d3	4a		lsr a				lsr 	a
.89d4	20 d8 89	jsr $89d8			jsr 	_PrintNibble
.89d7	68		pla				pla
.89d8					_PrintNibble:
.89d8	29 0f		and #$0f			and 	#15
.89da	c9 0a		cmp #$0a			cmp 	#10
.89dc	90 02		bcc $89e0			bcc 	_NoShift
.89de	69 06		adc #$06			adc 	#6
.89e0					_NoShift:
.89e0	69 30		adc #$30			adc 	#48
.89e2	4c 93 b5	jmp $b593			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89e5					AssembleModeX:
.89e5	5a		phy				phy
.89e6	ad a3 04	lda $04a3			lda 	IsGroup1
.89e9	f0 17		beq $8a02			beq 	_AMXGroup2
.89eb	8a		txa				txa 							; is it in group # 1
.89ec	29 40		and #$40			and 	#AM_ISG1
.89ee	f0 50		beq $8a40			beq 	_AMXFail 				; no, give up.
.89f0	8a		txa				txa 							; get back.
.89f1	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89f3	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89f5	d0 22		bne $8a19			bne 	_AMXHaveInfo
.89f7	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89fa	c9 81		cmp #$81			cmp 	#$81
.89fc	f0 42		beq $8a40			beq 	_AMXFail
.89fe	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a00	80 17		bra $8a19			bra 	_AMXHaveInfo 			; odd design decision there.
.8a02					_AMXGroup2:
.8a02	8a		txa				txa 							; is it in group 2 ?
.8a03	29 20		and #$20			and 	#AM_ISG2
.8a05	f0 39		beq $8a40			beq 	_AMXFail 				; no, give up.
.8a07	8a		txa				txa 							; get the offset into Y
.8a08	29 1f		and #$1f			and 	#$1F
.8a0a	4a		lsr a				lsr 	a 						; make it 0-7.
.8a0b	4a		lsr a				lsr  	a
.8a0c	a8		tay				tay
.8a0d	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a10					_AMXCheckOkay:
.8a10	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a11	88		dey				dey
.8a12	10 fc		bpl $8a10			bpl 	_AMXCheckOkay
.8a14	90 2a		bcc $8a40			bcc 	_AMXFail 				; not allowed.
.8a16	8a		txa				txa  							; get mask back
.8a17	29 1f		and #$1f			and 	#$1F
.8a19					_AMXHaveInfo:
.8a19	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a1b	10 05		bpl $8a22			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a1d	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a20	d0 1e		bne $8a40			bne 	_AMXFail
.8a22					_AMXAnySize:
.8a22	18		clc				clc 							; add offset to the base opcode
.8a23	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a26					_AMXOutputCode:
.8a26	20 91 89	jsr $8991			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a29	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a2b	f0 10		beq $8a3d			beq 	_AMXExit
.8a2d	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a30	20 91 89	jsr $8991			jsr 	AssemblerWriteByte
.8a33	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a35	30 06		bmi $8a3d			bmi 	_AMXExit
.8a37	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a3a	20 91 89	jsr $8991			jsr 	AssemblerWriteByte
.8a3d					_AMXExit:
.8a3d	7a		ply				ply
.8a3e	38		sec				sec
.8a3f	60		rts				rts
.8a40					_AMXFail:
.8a40	a0 00		ldy #$00			ldy 	#0
.8a42					_AMXCheckOddities:
.8a42	8a		txa				txa
.8a43	d9 6b 8a	cmp $8a6b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a46	d0 16		bne $8a5e			bne 	_AMXCONext
.8a48	b9 69 8a	lda $8a69,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a4b	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a4e	d0 0e		bne $8a5e			bne 	_AMXCONext
.8a50	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a52	10 05		bpl $8a59			bpl 	_AMXCONotZero
.8a54	ad 10 04	lda $0410			lda 	NSMantissa1
.8a57	d0 05		bne $8a5e			bne 	_AMXCONext
.8a59					_AMXCONotZero:
.8a59	b9 6a 8a	lda $8a6a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a5c	80 c8		bra $8a26			bra 	_AMXOutputCode 			; and assemble it
.8a5e					_AMXCONext:
.8a5e	c8		iny				iny
.8a5f	c8		iny				iny
.8a60	c8		iny				iny
.8a61	b9 69 8a	lda $8a69,y			lda 	ExtraOpcode+0,y 		; end of table
.8a64	d0 dc		bne $8a42			bne 	_AMXCheckOddities
.8a66					_AMXCOFail:
.8a66	7a		ply				ply
.8a67	18		clc				clc
.8a68	60		rts				rts
.8a69					ExtraOpcode:
>8a69	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a6c	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a6f	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a72	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a75	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a78	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a7b	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a7e	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a81	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a84	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a87	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a88					LabelHere:
.8a88	c8		iny				iny 								; skip .
.8a89	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a8b	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; get a term
.8a8e	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a91	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a93	d0 24		bne $8ab9			bne 	_ALType
.8a95	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a98	85 36		sta $36				sta 	zTemp0
.8a9a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a9d	85 37		sta $37				sta 	zTemp0+1
.8a9f	5a		phy				phy 								; copy address in.
.8aa0	a0 01		ldy #$01			ldy 	#1
.8aa2	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8aa5	92 36		sta ($36)			sta 	(zTemp0)
.8aa7	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8aaa	91 36		sta ($36),y			sta 	(zTemp0),y
.8aac	c8		iny				iny
.8aad	a9 00		lda #$00			lda 	#0
.8aaf	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab1	c8		iny				iny
.8ab2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab4	c8		iny				iny
.8ab5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab7	7a		ply				ply
.8ab8	60		rts				rts
.8ab9					_ALType:
.8ab9	4c e2 b3	jmp $b3e2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8abc					TypeAndCalculateOperand:
.8abc	b1 30		lda ($30),y			lda 	(codePtr),y
.8abe	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ac0	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ac2	f0 5b		beq $8b1f			beq 	_TACOExit
.8ac4	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ac6	f0 57		beq $8b1f			beq 	_TACOExit
.8ac8	c8		iny				iny
.8ac9	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8acb	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8acd	f0 51		beq $8b20			beq 	CalculateOperand
.8acf	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ad1	f0 1f		beq $8af2			beq 	_TACOIndirect
.8ad3	88		dey				dey 								; undo get of first character
.8ad4	20 20 8b	jsr $8b20			jsr 	CalculateOperand 			; get operand
.8ad7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad9	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8adb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8add	d0 40		bne $8b1f			bne 	_TACOExit
.8adf	c8		iny				iny
.8ae0	20 69 ad	jsr $ad69			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8ae3	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ae5	c9 58		cmp #$58			cmp 	#'X'
.8ae7	f0 36		beq $8b1f			beq 	_TACOExit
.8ae9	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8aeb	c9 59		cmp #$59			cmp 	#'Y'
.8aed	f0 30		beq $8b1f			beq 	_TACOExit
.8aef					_TACOSyntax:
.8aef	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.8af2					_TACOIndirect:
.8af2	20 20 8b	jsr $8b20			jsr 	CalculateOperand 			; get the operand
.8af5	b1 30		lda ($30),y			lda 	(codePtr),y
.8af7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8af9	f0 17		beq $8b12			beq 	_TACOIndX
.8afb	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8afe	b1 30		lda ($30),y			lda 	(codePtr),y
.8b00	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b02	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b04	d0 19		bne $8b1f			bne 	_TACOExit
.8b06	c8		iny				iny
.8b07	20 69 ad	jsr $ad69			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b0a	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b0c	d0 e1		bne $8aef			bne 	_TACOSyntax
.8b0e	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b10	80 0d		bra $8b1f			bra 	_TACOExit
.8b12					_TACOIndX:
.8b12	c8		iny				iny
.8b13	20 69 ad	jsr $ad69			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b16	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b18	d0 d5		bne $8aef			bne 	_TACOSyntax
.8b1a	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket			; check )
.8b1d	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b1f					_TACOExit:
.8b1f	60		rts				rts
.8b20					CalculateOperand:
.8b20	48		pha				pha
.8b21	da		phx				phx
.8b22	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b24	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.8b27	fa		plx				plx
.8b28	68		pla				pla
.8b29	60		rts				rts
.ad69					TACOCheckXY:
.ad69	b1 30		lda ($30),y			lda 	(codePtr),y
.ad6b	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ad6d	c9 40		cmp #$40			cmp 	#$40
.ad6f	d0 21		bne $ad92			bne 	_TCXYFail
.ad71	b1 30		lda ($30),y			lda 	(codePtr),y
.ad73	18		clc				clc
.ad74	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ad76	85 37		sta $37				sta 	zTemp0+1
.ad78	c8		iny				iny
.ad79	b1 30		lda ($30),y			lda 	(codePtr),y
.ad7b	c8		iny				iny
.ad7c	85 36		sta $36				sta 	zTemp0
.ad7e	5a		phy				phy 								; save position
.ad7f	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ad81	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad83	d0 0c		bne $ad91			bne 	_TCXYPopFail
.ad85	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ad87	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad89	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ad8b	f0 08		beq $ad95			beq 	_TCXYFound
.ad8d	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ad8f	f0 04		beq $ad95			beq 	_TCXYFound
.ad91					_TCXYPopFail:
.ad91	7a		ply				ply
.ad92					_TCXYFail:
.ad92	a9 00		lda #$00			lda 	#0
.ad94	60		rts				rts
.ad95					_TCXYFound:
.ad95	7a		ply				ply 								; restore position
.ad96	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ad98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b2a					EditProgramCode:
.8b2a	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8b2d	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8b30	20 17 a6	jsr $a617			jsr 	MemorySearch
.8b33	90 05		bcc $8b3a			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b35	d0 03		bne $8b3a			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b37	20 1e b6	jsr $b61e			jsr 	MemoryDeleteLine 			; delete the line
.8b3a					_EPCNoDelete:
.8b3a	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8b3d	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b3f	f0 0d		beq $8b4e			beq 	_EPCNoInsert
.8b41	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b44	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b47	20 17 a6	jsr $a617			jsr 	MemorySearch
.8b4a	18		clc				clc 								; insert at this point.
.8b4b	20 55 b6	jsr $b655			jsr 	MemoryInsertLine 			; insert the line
.8b4e					_EPCNoInsert:
.8b4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b4f					WarmStart:
.8b4f	a2 ff		ldx #$ff			ldx 	#$FF
.8b51	9a		txs				txs
.8b52	20 a9 b5	jsr $b5a9			jsr 	EXTInputLine 				; get line to lineBuffer
.8b55	20 ea aa	jsr $aaea			jsr 	TokeniseLine 				; tokenise the line
.8b58	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8b5b	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8b5e	d0 17		bne $8b77			bne 	_WSEditCode 				; if so,edit code.
.8b60	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b63	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8b65	85 30		sta $30				sta 	codePtr
.8b67	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b69	85 31		sta $31				sta 	codePtr+1
.8b6b	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8b6e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b70	f0 dd		beq $8b4f			beq 	WarmStart
.8b72	20 8d 94	jsr $948d			jsr 	RUNCodePointerLine 			; execute that line.
.8b75	80 d8		bra $8b4f			bra 	WarmStart
.8b77					_WSEditCode:
.8b77	20 2a 8b	jsr $8b2a			jsr 	EditProgramCode
.8b7a	20 e8 8b	jsr $8be8			jsr 	ClearCommand
.8b7d	80 d0		bra $8b4f			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b7f					AssembleCommand:
.8b7f	a2 00		ldx #$00			ldx 	#0
.8b81	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger 		; start address
.8b84	ad 08 04	lda $0408			lda 	NSMantissa0
.8b87	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b8a	ad 10 04	lda $0410			lda 	NSMantissa1
.8b8d	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b90	20 fa ad	jsr $adfa			jsr 	CheckComma
.8b93	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; options
.8b96	ad 08 04	lda $0408			lda 	NSMantissa0
.8b99	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b9c	60		rts				rts
.8b9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b9e					AssertCommand:
.8b9e	a2 00		ldx #$00			ldx 	#0
.8ba0	20 1b a5	jsr $a51b			jsr 	EvaluateInteger 			; the assert test
.8ba3	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; exit if result is non zero.
.8ba6	d0 05		bne $8bad			bne 	_ACExit
.8ba8	a9 0a		lda #$0a		lda	#10
.8baa	4c 85 99	jmp $9985		jmp	ErrorHandler
.8bad					_ACExit:
.8bad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8bae					CallCommand:
.8bae	a2 00		ldx #$00			ldx 	#0
.8bb0	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.8bb3					_CCClear
.8bb3	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8bb4	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.8bb7	e0 04		cpx #$04			cpx 	#4
.8bb9	d0 f8		bne $8bb3			bne 	_CCClear
.8bbb	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8bbd					_CCCParam:
.8bbd	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bc1	d0 09		bne $8bcc			bne 	_CCCRun6502
.8bc3	c8		iny				iny 								; skip comma
.8bc4	e8		inx				inx	 								; next level
.8bc5	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bc8	e0 03		cpx #$03			cpx 	#3
.8bca	90 f1		bcc $8bbd			bcc 	_CCCParam 					; done all 3 ?
.8bcc					_CCCRun6502:
.8bcc	5a		phy				phy 								; save position
.8bcd	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bd0	85 37		sta $37				sta 	zTemp0+1
.8bd2	ad 08 04	lda $0408			lda 	NSMantissa0
.8bd5	85 36		sta $36				sta 	zTemp0
.8bd7	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bda	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bdd	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8be0	20 e5 8b	jsr $8be5			jsr 	_CCCZTemp0 					; call zTemp0
.8be3	7a		ply				ply 								; restore position and exit
.8be4	60		rts				rts
.8be5					_CCCZTemp0:
.8be5	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8be8					ClearCommand:
.8be8	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bea	85 36		sta $36				sta 	0+zTemp0
.8bec	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bee	85 37		sta $37				sta 	1+zTemp0
.8bf0					_ClearZeroLoop:
.8bf0	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8bf2	f0 24		beq $8c18			beq 	_ClearZeroEnd
.8bf4	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8bf6	a9 00		lda #$00			lda 	#0
.8bf8					_ClearOneVariable:
.8bf8	91 36		sta ($36),y			sta 	(zTemp0),y
.8bfa	c8		iny				iny
.8bfb	c0 08		cpy #$08			cpy 	#8
.8bfd	d0 f9		bne $8bf8			bne 	_ClearOneVariable
.8bff	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c01	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c03	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c05	d0 04		bne $8c0b			bne 	_ClearNotProcedure
.8c07	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c09	91 36		sta ($36),y			sta 	(zTemp0),y
.8c0b					_ClearNotProcedure:
.8c0b	18		clc				clc 								; go to the next variable
.8c0c	b2 36		lda ($36)			lda 	(zTemp0)
.8c0e	65 36		adc $36				adc 	zTemp0
.8c10	85 36		sta $36				sta 	zTemp0
.8c12	90 dc		bcc $8bf0			bcc 	_ClearZeroLoop
.8c14	e6 37		inc $37				inc 	zTemp0+1
.8c16	80 d8		bra $8bf0			bra 	_ClearZeroLoop
.8c18					_ClearZeroEnd:
.8c18	18		clc				clc
.8c19	a5 36		lda $36				lda 	zTemp0
.8c1b	69 01		adc #$01			adc 	#1
.8c1d	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c20	a5 37		lda $37				lda 	zTemp0+1
.8c22	69 00		adc #$00			adc 	#0
.8c24	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c27	20 d1 a6	jsr $a6d1			jsr 	StackReset
.8c2a	20 38 b7	jsr $b738			jsr 	StringSystemInitialise
.8c2d	20 8e 98	jsr $988e			jsr 	ProcedureScan
.8c30	20 49 94	jsr $9449			jsr 	Command_Restore
.8c33	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c36	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c39	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c3c	20 52 a2	jsr $a252			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c40					ClearScreen:
.8c40	5a		phy				phy
.8c41	20 90 b5	jsr $b590			jsr 	EXTClearScreen
.8c44	7a		ply				ply
.8c45	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c46					Command_Data:
.8c46	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c48	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c4a	20 e0 98	jsr $98e0			jsr 	ScanForward
.8c4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c4e					DimCommand:
.8c4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c50	29 c0		and #$c0			and 	#$C0
.8c52	c9 40		cmp #$40			cmp 	#$40
.8c54	d0 7a		bne $8cd0			bne 	_DCSyntax
.8c56	b1 30		lda ($30),y			lda 	(codePtr),y
.8c58	18		clc				clc
.8c59	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c5b	85 3f		sta $3f				sta 	zaTemp+1
.8c5d	c8		iny				iny
.8c5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c60	c8		iny				iny
.8c61	85 3e		sta $3e				sta 	zaTemp
.8c63	5a		phy				phy
.8c64	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c66	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c68	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c6a	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c6c	f0 62		beq $8cd0			beq 	_DCSyntax
.8c6e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c70	29 04		and #$04			and 	#NSBIsArray
.8c72	f0 64		beq $8cd8			beq 	_DCType
.8c74	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c76	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c78	d0 59		bne $8cd3			bne 	_DCRedefine
.8c7a	7a		ply				ply
.8c7b	20 db 8c	jsr $8cdb			jsr 	_DCGetSize 				; get array size, check it.
.8c7e	5a		phy				phy
.8c7f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c81	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c83	7a		ply				ply 							; is there a second (e.g. ,x)
.8c84	b1 30		lda ($30),y			lda 	(codePtr),y
.8c86	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c88	d0 0a		bne $8c94			bne 	_DCOneDimension
.8c8a	c8		iny				iny 							; skip comma
.8c8b	20 db 8c	jsr $8cdb			jsr 	_DCGetSize 				; get 2nd array size
.8c8e	5a		phy				phy
.8c8f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c91	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c93	7a		ply				ply
.8c94					_DCOneDimension:
.8c94	5a		phy				phy 							; save position
.8c95	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c97	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c99	aa		tax				tax
.8c9a	c8		iny				iny
.8c9b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c9d	e8		inx				inx 							; bump them.
.8c9e	1a		inc a				inc 	a
.8c9f	20 74 b2	jsr $b274			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8ca2	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8ca4	29 e0		and #$e0			and 	#$E0
.8ca6	d0 23		bne $8ccb			bne 	_DCSize
.8ca8	a0 02		ldy #$02			ldy 	#2 						; get base type
.8caa	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cac	20 e9 8c	jsr $8ce9			jsr 	ScaleByBaseType 		; scale by base type
.8caf	a5 36		lda $36				lda 	zTemp0
.8cb1	a6 37		ldx $37				ldx 	zTemp0+1
.8cb3	20 14 a2	jsr $a214			jsr 	AllocateXABytes 		; allocate memory
.8cb6	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8cb8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cba	c8		iny				iny
.8cbb	8a		txa				txa
.8cbc	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cbe	7a		ply				ply 							; get position back
.8cbf	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 		; check )
.8cc2	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc4	c8		iny				iny 							; consume in case
.8cc5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cc7	f0 85		beq $8c4e			beq 	DimCommand
.8cc9	88		dey				dey 							; undo consume
.8cca	60		rts				rts
.8ccb					_DCSize:
.8ccb	a9 16		lda #$16		lda	#22
.8ccd	4c 85 99	jmp $9985		jmp	ErrorHandler
.8cd0					_DCSyntax:
.8cd0	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.8cd3					_DCRedefine:
.8cd3	a9 15		lda #$15		lda	#21
.8cd5	4c 85 99	jmp $9985		jmp	ErrorHandler
.8cd8					_DCType:
.8cd8	4c e2 b3	jmp $b3e2			jmp 	TypeError
.8cdb					_DCGetSize:
.8cdb	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cdd	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 	; get array dimension
.8ce0	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8ce2	f0 e7		beq $8ccb			beq 	_DCSize
.8ce4	c9 fe		cmp #$fe			cmp 	#254
.8ce6	f0 e3		beq $8ccb			beq 	_DCSize
.8ce8	60		rts				rts
.8ce9					ScaleByBaseType:
.8ce9	29 10		and #$10			and 	#NSBIsString 			; is it string
.8ceb	d0 19		bne $8d06			bne 	_SBBTString
.8ced	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cef	48		pha				pha
.8cf0	a5 36		lda $36				lda 	zTemp0
.8cf2	48		pha				pha
.8cf3	06 36		asl $36				asl 	zTemp0 					; x 2
.8cf5	26 37		rol $37				rol 	zTemp0+1
.8cf7	06 36		asl $36				asl 	zTemp0 					; x 4
.8cf9	26 37		rol $37				rol 	zTemp0+1
.8cfb	68		pla				pla 							; add stacked value = x 5
.8cfc	65 36		adc $36				adc 	zTemp0
.8cfe	85 36		sta $36				sta 	zTemp0
.8d00	68		pla				pla
.8d01	65 37		adc $37				adc 	zTemp0+1
.8d03	85 37		sta $37				sta 	zTemp0+1
.8d05	60		rts				rts
.8d06					_SBBTString:
.8d06	06 36		asl $36				asl 	zTemp0
.8d08	26 37		rol $37				rol 	zTemp0+1
.8d0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d0b					EndCommand:
.8d0b	4c 4f 8b	jmp $8b4f			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d0e					UnaryEvent:
.8d0e	fa		plx				plx
.8d0f	20 cd 96	jsr $96cd			jsr 	TimerToStackX 				; timer in +0
.8d12	e8		inx				inx  								; put reference into +1
.8d13	20 5f a0	jsr $a05f			jsr 	EvaluateTerm
.8d16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d19	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d1b	d0 57		bne $8d74			bne 	_UEType
.8d1d	e8		inx				inx 								; put the step in +2
.8d1e	20 fa ad	jsr $adfa			jsr 	CheckComma
.8d21	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.8d24	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.8d27	ca		dex				dex
.8d28	ca		dex				dex
.8d29	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8d2c	85 36		sta $36				sta 	zTemp0
.8d2e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8d31	85 37		sta $37				sta 	zTemp0+1
.8d33	5a		phy				phy
.8d34	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d36	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d38	30 36		bmi $8d70			bmi 	_UEFalse 					; exit if signed.
.8d3a	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d3c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d3f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d41	c8		iny				iny
.8d42	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d45	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d47	c8		iny				iny
.8d48	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d4b	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d4d	90 21		bcc $8d70			bcc 	_UEFalse 					; no, return FALSE.
.8d4f	18		clc				clc
.8d50	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d52	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d55	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d58	91 36		sta ($36),y			sta 	(zTemp0),y
.8d5a	c8		iny				iny
.8d5b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d5e	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d61	91 36		sta ($36),y			sta 	(zTemp0),y
.8d63	c8		iny				iny
.8d64	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d67	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d6a	91 36		sta ($36),y			sta 	(zTemp0),y
.8d6c	7a		ply				ply
.8d6d	4c f2 99	jmp $99f2			jmp 	ReturnTrue
.8d70					_UEFalse:
.8d70	7a		ply				ply 								; restore Y
.8d71	4c fe 99	jmp $99fe			jmp 	ReturnFalse 				; and return False
.8d74					_UEType:
.8d74	4c e2 b3	jmp $b3e2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d77					ForCommand:
.8d77	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d79	20 6c a6	jsr $a66c			jsr 	StackOpen
.8d7c	a2 00		ldx #$00			ldx 	#0
.8d7e	20 5f a0	jsr $a05f			jsr 	EvaluateTerm
.8d81	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d84	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d86	d0 49		bne $8dd1			bne		_FCError
.8d88	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d8a	20 02 ae	jsr $ae02			jsr 	CheckNextA
.8d8d	e8		inx				inx
.8d8e	20 1b a5	jsr $a51b			jsr 	EvaluateInteger 			; <from> in +1
.8d91	b1 30		lda ($30),y			lda 	(codePtr),y
.8d93	c8		iny				iny 								; consume it
.8d94	48		pha				pha 								; save on stack for later
.8d95	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8d97	f0 04		beq $8d9d			beq 	_FCNoSyntax
.8d99	c9 ca		cmp #$ca			cmp 	#KWD_TO
.8d9b	d0 37		bne $8dd4			bne 	_FCSyntaxError
.8d9d					_FCNoSyntax:
.8d9d	e8		inx				inx
.8d9e	20 1b a5	jsr $a51b			jsr 	EvaluateInteger
.8da1	20 b0 a6	jsr $a6b0			jsr 	STKSaveCodePosition 		; save loop back position
.8da4	68		pla				pla 								; restore DOWNTO or TO
.8da5	5a		phy				phy 								; save Y on the stack
.8da6	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8da8	f0 02		beq $8dac			beq 	_FCNotDownTo
.8daa	a9 02		lda #$02			lda 	#2
.8dac					_FCNotDownTo:
.8dac	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8dad	a0 10		ldy #$10			ldy 	#16
.8daf	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8db1	a0 06		ldy #$06			ldy 	#6
.8db3	ad 08 04	lda $0408			lda 	NSMantissa0
.8db6	91 34		sta ($34),y			sta 	(basicStack),y
.8db8	ad 10 04	lda $0410			lda 	NSMantissa1
.8dbb	c8		iny				iny
.8dbc	91 34		sta ($34),y			sta 	(basicStack),y
.8dbe	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8dc0	a2 01		ldx #$01			ldx 	#1
.8dc2	20 d7 8d	jsr $8dd7			jsr 	FCIntegerToStack
.8dc5	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dc7	a2 02		ldx #$02			ldx 	#2
.8dc9	20 d7 8d	jsr $8dd7			jsr 	FCIntegerToStack
.8dcc	20 f7 8d	jsr $8df7			jsr 	CopyIndexToReference
.8dcf	7a		ply				ply 								; restore position
.8dd0	60		rts				rts
.8dd1					_FCError:
.8dd1	4c e2 b3	jmp $b3e2			jmp 	TypeError
.8dd4					_FCSyntaxError:
.8dd4	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.8dd7					FCIntegerToStack:
.8dd7	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dda	10 03		bpl $8ddf			bpl	 	_FCNotNegative
.8ddc	20 6d a5	jsr $a56d			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8ddf					_FCNotNegative:
.8ddf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8de2	91 34		sta ($34),y			sta 	(basicStack),y
.8de4	c8		iny				iny
.8de5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8de8	91 34		sta ($34),y			sta 	(basicStack),y
.8dea	c8		iny				iny
.8deb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dee	91 34		sta ($34),y			sta 	(basicStack),y
.8df0	c8		iny				iny
.8df1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8df4	91 34		sta ($34),y			sta 	(basicStack),y
.8df6	60		rts				rts
.8df7					CopyIndexToReference:
.8df7	5a		phy				phy
.8df8	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8dfa	38		sec				sec 								; (because we copy from offset 8)
.8dfb	b1 34		lda ($34),y			lda 	(basicStack),y
.8dfd	e9 08		sbc #$08			sbc 	#8
.8dff	85 36		sta $36				sta 	zTemp0
.8e01	c8		iny				iny
.8e02	b1 34		lda ($34),y			lda 	(basicStack),y
.8e04	e9 00		sbc #$00			sbc 	#0
.8e06	85 37		sta $37				sta 	zTemp0+1
.8e08	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e0a	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e0c	b1 34		lda ($34),y			lda 	(basicStack),y
.8e0e	0a		asl a				asl 	a 							; into carry
.8e0f	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e11	90 14		bcc $8e27			bcc 	_CITRNormal
.8e13	38		sec				sec
.8e14					_CITRNegative:
.8e14	a9 00		lda #$00			lda 	#0
.8e16	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e18	91 36		sta ($36),y			sta 	(zTemp0),y
.8e1a	c8		iny				iny
.8e1b	ca		dex				dex
.8e1c	d0 f6		bne $8e14			bne 	_CITRNegative
.8e1e	88		dey				dey 								; look at MSB of mantissa
.8e1f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e21	09 80		ora #$80			ora 	#$80
.8e23	91 36		sta ($36),y			sta 	(zTemp0),y
.8e25	7a		ply				ply
.8e26	60		rts				rts
.8e27					_CITRNormal:
.8e27	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e29	91 36		sta ($36),y			sta 	(zTemp0),y
.8e2b	c8		iny				iny
.8e2c	ca		dex				dex
.8e2d	d0 f8		bne $8e27			bne 	_CITRNormal
.8e2f	7a		ply				ply 								; and exit.
.8e30	60		rts				rts
.8e31					NextCommand:
.8e31	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e33	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e35	20 98 a6	jsr $a698			jsr 	StackCheckFrame
.8e38	5a		phy				phy
.8e39	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e3b	b1 34		lda ($34),y			lda 	(basicStack),y
.8e3d	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e3f	30 02		bmi $8e43			bmi 	_NCStepNeg
.8e41	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e43					_NCStepNeg:
.8e43	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e45	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e47	18		clc				clc
.8e48					_NCBump:
.8e48	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e4a	91 34		sta ($34),y			sta 	(basicStack),y
.8e4c	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e4e	c8		iny				iny 								; next byte
.8e4f	ca		dex				dex 								; do four times
.8e50	d0 f6		bne $8e48			bne 	_NCBump
.8e52	20 f7 8d	jsr $8df7			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e55	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e57	b1 34		lda ($34),y			lda 	(basicStack),y
.8e59	0a		asl a				asl 	a 							; sign bit to carry
.8e5a	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e5c	85 38		sta $38				sta 	zTemp1
.8e5e	90 02		bcc $8e62			bcc 	_NCCompRev 					; use if step is +ve
.8e60	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e62					_NCCompRev:
.8e62	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e64	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e66	85 39		sta $39				sta 	zTemp1+1
.8e68	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e6a	38		sec				sec
.8e6b					_NCCompare:
.8e6b	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e6d	b1 34		lda ($34),y			lda 	(basicStack),y
.8e6f	a4 39		ldy $39				ldy 	zTemp1+1
.8e71	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e73	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e75	e6 39		inc $39				inc 	zTemp1+1
.8e77	ca		dex				dex 								; do it 4 times.
.8e78	d0 f1		bne $8e6b			bne 	_NCCompare
.8e7a	50 02		bvc $8e7e			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e7c	49 80		eor #$80			eor 	#$80
.8e7e					_NCNoOverflow:
.8e7e	7a		ply				ply 								; restore Y position
.8e7f	0a		asl a				asl 	a 							; is bit 7 set.
.8e80	90 04		bcc $8e86			bcc 	_NCLoopback 				; if no , >= so loop back
.8e82	20 8a a6	jsr $a68a			jsr 	StackClose 					; exit the loop
.8e85	60		rts				rts
.8e86					_NCLoopBack:
.8e86	20 c1 a6	jsr $a6c1			jsr 	STKLoadCodePosition 		; loop back
.8e89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e8a					RectangleCommand:
.8e8a	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e8c	80 02		bra $8e90			bra 	ShapeDrawCmd
.8e8e					CircleCommand:
.8e8e	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e90					ShapeDrawCmd:
.8e90	20 1e 8f	jsr $8f1e			jsr 	RunGraphicsCommand
.8e93					ShapeDraw:
.8e93	0d 65 06	ora $0665			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8e96	4c 12 8f	jmp $8f12			jmp 	ExecuteGraphicCommand	 	; and complete
.8e99					SpriteCommand:
.8e99	a2 00		ldx #$00			ldx 	#0
.8e9b	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get image number.
.8e9e	5a		phy				phy
.8e9f	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8ea1	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ea4	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8ea6	b0 0d		bcs $8eb5			bcs 	_SCRange
.8ea8	a0 ff		ldy #$ff			ldy 	#255
.8eaa	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ead	a9 32		lda #$32			lda 	#25*2
.8eaf	7a		ply				ply
.8eb0	20 1e 8f	jsr $8f1e			jsr 	RunGraphicsCommand
.8eb3	80 5d		bra $8f12			bra 	ExecuteGraphicCommand
.8eb5					_SCRange:
.8eb5	4c dd b3	jmp $b3dd			jmp 	RangeError
.8eb8					ImageCommand:
.8eb8	a2 00		ldx #$00			ldx 	#0
.8eba	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get image number.
.8ebd	20 1e 8f	jsr $8f1e			jsr 	RunGraphicsCommand
.8ec0					ImageRunDraw:
.8ec0	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ec2	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ec5	ad 6b 06	lda $066b			lda 	gxDrawScale
.8ec8	0a		asl a				asl 	a
.8ec9	0a		asl a				asl 	a
.8eca	0a		asl a				asl 	a
.8ecb	a8		tay				tay
.8ecc	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8ece	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ed1	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ed4	60		rts				rts
.8ed5					TextCommand:
.8ed5	a2 00		ldx #$00			ldx 	#0
.8ed7	20 03 a5	jsr $a503			jsr 	EvaluateString 				; get text
.8eda	20 1e 8f	jsr $8f1e			jsr 	RunGraphicsCommand
.8edd					TextRunDraw:
.8edd	09 20		ora #$20			ora 	#16*2 						; move cursor
.8edf	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ee2	a0 00		ldy #$00			ldy 	#0
.8ee4					_IRDLoop:
.8ee4	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ee7	85 37		sta $37				sta 	zTemp0+1
.8ee9	ad 08 04	lda $0408			lda 	NSMantissa0
.8eec	85 36		sta $36				sta 	zTemp0
.8eee	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ef0	f0 13		beq $8f05			beq 	_IRDExit
.8ef2	5a		phy				phy									; save string pos
.8ef3	48		pha				pha 								; save char
.8ef4	ad 6b 06	lda $066b			lda 	gxDrawScale 				; get scale
.8ef7	0a		asl a				asl 	a
.8ef8	0a		asl a				asl 	a
.8ef9	0a		asl a				asl 	a
.8efa	a8		tay				tay
.8efb	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8efd	fa		plx				plx 								; char to draw
.8efe	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f01	7a		ply				ply 								; restore string pos
.8f02	c8		iny				iny
.8f03	90 df		bcc $8ee4			bcc 	_IRDLoop 					; go back if no error.
.8f05					_IRDExit:
.8f05	60		rts				rts
.8f06					PlotCommand:
.8f06	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f08	20 1e 8f	jsr $8f1e			jsr 	RunGraphicsCommand
.8f0b	80 05		bra $8f12			bra 	ExecuteGraphicCommand
.8f0d					LineCommand:
.8f0d	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f0f	20 1e 8f	jsr $8f1e			jsr 	RunGraphicsCommand
.8f12					ExecuteGraphicCommand:
.8f12	0d 64 06	ora $0664			ora 	gxCommandID 				; make a full command
.8f15	20 88 80	jsr $8088			jsr 	GXGraphicDraw 				; draw it and exit
.8f18	b0 01		bcs $8f1b			bcs 	_EGCError
.8f1a	60		rts				rts
.8f1b					_EGCError:
.8f1b	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.8f1e					RunGraphicsCommand:
.8f1e	8d 64 06	sta $0664			sta 	gxCommandID					; save TODO graphics command.
.8f21	68		pla				pla 								; pop handler address
.8f22	fa		plx				plx
.8f23	1a		inc a				inc 	a
.8f24	d0 01		bne $8f27			bne 	_RGINoCarry
.8f26	e8		inx				inx
.8f27					_RGINoCarry:
.8f27	8d 69 06	sta $0669			sta 	GXHandler
.8f2a	8e 6a 06	stx $066a			stx 	GXHandler+1
.8f2d					_RGICommandLoop:
.8f2d	b1 30		lda ($30),y			lda 	(codePtr),y
.8f2f	c8		iny				iny
.8f30	c9 ca		cmp #$ca			cmp 	#KWD_TO						; is it TO x,y
.8f32	f0 53		beq $8f87			beq 	_RGI_To
.8f34	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8f36	f0 55		beq $8f8d			beq 	_RGI_Here
.8f38	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f3a	f0 3d		beq $8f79			beq 	_RGI_Exit
.8f3c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f3e	f0 39		beq $8f79			beq 	_RGI_Exit
.8f40	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8f42	f0 3e		beq $8f82			beq 	_RGI_Frame
.8f44	c9 c7		cmp #$c7			cmp 	#KWD_SOLID
.8f46	f0 33		beq $8f7b			beq 	_RGI_Solid
.8f48	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8f4a	f0 4b		beq $8f97			beq 	_RGI_By
.8f4c	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8f4e	f0 17		beq $8f67			beq 	_RGI_Move2
.8f50	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8f52	f0 65		beq $8fb9			beq 	_RGI_Dim
.8f54	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8f56	f0 78		beq $8fd0			beq 	_RGI_Colour
.8f58	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8f5a	f0 74		beq $8fd0			beq 	_RGI_Colour
.8f5c	ae 64 06	ldx $0664			ldx 	gxCommandID
.8f5f	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f61	d0 03		bne $8f66			bne 	_RGI_Move 					; move
.8f63	4c fa 8f	jmp $8ffa			jmp		_RGI_SpriteInstructions
.8f66					_RGI_Move:
.8f66	88		dey				dey 								; unpick get.
.8f67					_RGI_Move2:
.8f67	20 1e 90	jsr $901e			jsr 	GCGetCoordinatePair 		; move to here
.8f6a	20 45 90	jsr $9045			jsr 	GCCopyPairToStore 			; save
.8f6d	5a		phy				phy
.8f6e	20 3b 90	jsr $903b			jsr 	GCLoadAXY 					; load in
.8f71	09 20		ora #$20			ora 	#16*2 						; move there
.8f73	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8f76	7a		ply				ply
.8f77	80 b4		bra $8f2d			bra 	_RGICommandLoop 			; and go round
.8f79					_RGI_Exit:
.8f79	88		dey				dey 								; unpick : / EOL
.8f7a	60		rts				rts
.8f7b					_RGI_Solid:
.8f7b	a9 02		lda #$02			lda 	#2
.8f7d	8d 65 06	sta $0665			sta 	gxFillSolid
.8f80	80 ab		bra $8f2d			bra 	_RGICommandLoop
.8f82					_RGI_Frame:
.8f82	9c 65 06	stz $0665			stz 	gxFillSolid
.8f85	80 a6		bra $8f2d			bra 	_RGICommandLoop
.8f87					_RGI_To:
.8f87	20 1e 90	jsr $901e			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f8a	20 45 90	jsr $9045			jsr 	GCCopyPairToStore
.8f8d					_RGI_Here:
.8f8d	5a		phy				phy
.8f8e	20 3b 90	jsr $903b			jsr 	GCLoadAXY 					; load it into AXY
.8f91	20 f7 8f	jsr $8ff7			jsr 	_RGICallHandler 			; go do whatever it is.
.8f94	7a		ply				ply
.8f95	80 96		bra $8f2d			bra 	_RGICommandLoop 			; and go round
.8f97					_RGI_By:
.8f97	20 2b 90	jsr $902b			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8f9a	18		clc				clc
.8f9b	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f9e	6d 66 06	adc $0666			adc 	gxxPos
.8fa1	8d 66 06	sta $0666			sta 	gxXPos
.8fa4	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fa7	6d 67 06	adc $0667			adc 	gxxPos+1
.8faa	8d 67 06	sta $0667			sta 	gxXPos+1
.8fad	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fb0	18		clc				clc
.8fb1	6d 68 06	adc $0668			adc 	gxYPos
.8fb4	8d 68 06	sta $0668			sta 	gxYPos
.8fb7	80 d4		bra $8f8d			bra 	_RGI_Here
.8fb9					_RGI_Dim:
.8fb9	a2 01		ldx #$01			ldx	 	#1
.8fbb	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger
.8fbe	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fc1	c9 00		cmp #$00			cmp 	#0
.8fc3	f0 2f		beq $8ff4			beq 	_RGIRange
.8fc5	c9 09		cmp #$09			cmp 	#8+1
.8fc7	b0 2b		bcs $8ff4			bcs		_RGIRange
.8fc9	3a		dec a				dec 	a
.8fca	8d 6b 06	sta $066b			sta 	gxDrawScale
.8fcd	4c 2d 8f	jmp $8f2d			jmp 	_RGICommandLoop
.8fd0					_RGI_Colour:
.8fd0	a2 01		ldx #$01			ldx 	#1 							; colour
.8fd2	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger
.8fd5	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fd7	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.8fda	b1 30		lda ($30),y			lda 	(codePtr),y
.8fdc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fde	d0 04		bne $8fe4			bne 	_RGICDefaultMode
.8fe0	c8		iny				iny
.8fe1	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger
.8fe4					_RGICDefaultMode:
.8fe4	5a		phy				phy
.8fe5	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fe7	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fea	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fed	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.8ff0	7a		ply				ply
.8ff1	4c 2d 8f	jmp $8f2d			jmp 	_RGICommandLoop 			; and go round
.8ff4					_RGIRange:
.8ff4	4c dd b3	jmp $b3dd			jmp 	RangeError
.8ff7					_RGICallHandler:
.8ff7	6c 69 06	jmp ($0669)			jmp 	(GXHandler)
.8ffa					_RGI_SpriteInstructions:
.8ffa	c9 be		cmp #$be			cmp 	#KWD_OFF
.8ffc	f0 07		beq $9005			beq 	_RGISpriteOff
.8ffe	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.9000	f0 11		beq $9013			beq 	_RGISetImage
.9002	4c 66 8f	jmp $8f66			jmp 	_RGI_Move
.9005					_RGISpriteOff:
.9005	5a		phy				phy
.9006	a0 01		ldy #$01			ldy 	#1
.9008	a2 00		ldx #$00			ldx 	#0
.900a					_RGIDoCommandLoop:
.900a	a9 10		lda #$10			lda 	#8*2
.900c	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.900f	7a		ply				ply
.9010	4c 2d 8f	jmp $8f2d			jmp 	_RGICommandLoop
.9013					_RGISetImage:
.9013	a2 01		ldx #$01			ldx 	#1
.9015	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger
.9018	5a		phy				phy
.9019	aa		tax				tax
.901a	a0 00		ldy #$00			ldy 	#0
.901c	80 ec		bra $900a			bra 	_RGIDoCommandLoop
.901e					GCGetCoordinatePair:
.901e	a2 01		ldx #$01			ldx 	#1
.9020	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.9023	20 fa ad	jsr $adfa			jsr 	CheckComma
.9026	e8		inx				inx
.9027	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.902a	60		rts				rts
.902b					GCSignedCoordinatePair:
.902b	a2 01		ldx #$01			ldx 	#1
.902d	20 3c a5	jsr $a53c			jsr 	Evaluate16BitIntegerSigned
.9030	20 fa ad	jsr $adfa			jsr 	CheckComma
.9033	e8		inx				inx
.9034	20 3c a5	jsr $a53c			jsr 	Evaluate16BitIntegerSigned
.9037	60		rts				rts
.9038					_GCCPRange:
.9038	4c dd b3	jmp $b3dd			jmp 	RangeError
.903b					GCLoadAXY:
.903b	ad 67 06	lda $0667			lda 	gxXPos+1
.903e	ae 66 06	ldx $0666			ldx 	gxXPos
.9041	ac 68 06	ldy $0668			ldy 	gxYPos
.9044	60		rts				rts
.9045					GCCopyPairToStore:
.9045	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9048	8d 66 06	sta $0666			sta 	gxXPos
.904b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.904e	8d 67 06	sta $0667			sta 	gxXPos+1
.9051	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9054	8d 68 06	sta $0668			sta 	gxYPos
.9057	60		rts				rts
.0664					gxCommandID:
>0664							.fill 	1
.0665					gxFillSolid:
>0665							.fill 	1
.0666					gxXPos:
>0666							.fill 	2
.0668					gxYPos:
>0668							.fill 	1
.0669					gxHandler:
>0669							.fill 	2
.066b					gxDrawScale:
>066b							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9058					BitmapCtrl:
.9058	b1 30		lda ($30),y			lda 	(codePtr),y
.905a	c8		iny				iny
.905b	a2 01		ldx #$01			ldx 	#1
.905d	c9 bf		cmp #$bf			cmp 	#KWD_ON
.905f	f0 11		beq $9072			beq 	BitmapSwitch
.9061	ca		dex				dex
.9062	c9 be		cmp #$be			cmp 	#KWD_OFF
.9064	f0 0c		beq $9072			beq 	BitmapSwitch
.9066	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get the colour
.9069	5a		phy				phy
.906a	aa		tax				tax
.906b	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.906d	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9070	7a		ply				ply
.9071	60		rts				rts
.9072					BitmapSwitch:
.9072	5a		phy				phy
.9073	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9075	a9 02		lda #$02			lda 	#1*2
.9077	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.907a	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.907c	a0 00		ldy #$00			ldy 	#0
.907e	a2 ff		ldx #$ff			ldx 	#$FF
.9080	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.9083	9c 65 06	stz $0665			stz 	gxFillSolid
.9086	9c 66 06	stz $0666			stz 	gxXPos
.9089	9c 67 06	stz $0667			stz 	gxXPos+1
.908c	9c 68 06	stz $0668			stz 	gxYPos
.908f	9c 6b 06	stz $066b			stz 	gxDrawScale
.9092	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9094	a2 00		ldx #$00			ldx 	#0
.9096	a0 00		ldy #$00			ldy 	#0
.9098	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.909b	7a		ply				ply
.909c	60		rts				rts
.909d					SpritesCtrl:
.909d	b1 30		lda ($30),y			lda 	(codePtr),y
.909f	c8		iny				iny
.90a0	a2 01		ldx #$01			ldx 	#1
.90a2	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90a4	f0 08		beq $90ae			beq 	SpriteSwitch
.90a6	ca		dex				dex
.90a7	c9 be		cmp #$be			cmp 	#KWD_OFF
.90a9	f0 03		beq $90ae			beq 	SpriteSwitch
.90ab	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.90ae					SpriteSwitch:
.90ae	5a		phy				phy
.90af	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90b1	a9 04		lda #$04			lda 	#2*2
.90b3	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90b6	7a		ply				ply
.90b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90b8					GfxCommand:
.90b8	a2 00		ldx #$00			ldx 	#0
.90ba	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; command
.90bd	20 fa ad	jsr $adfa			jsr 	CheckComma
.90c0	e8		inx				inx
.90c1	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger 		; X
.90c4	20 fa ad	jsr $adfa			jsr 	CheckComma
.90c7	e8		inx				inx
.90c8	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; Y
.90cb	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90ce	4a		lsr a				lsr 	a
.90cf	d0 16		bne $90e7			bne 	_GfxError
.90d1	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90d4	b0 11		bcs $90e7			bcs 	_GfxError 					; bit 7 should have been zero
.90d6	5a		phy				phy 								; save pos
.90d7	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90da	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90dd	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90e0	20 88 80	jsr $8088			jsr 	GXGraphicDraw
.90e3	b0 02		bcs $90e7			bcs 	_GfxError
.90e5	7a		ply				ply 								; restore pos and exit.
.90e6	60		rts				rts
.90e7					_GfxError:
.90e7	4c dd b3	jmp $b3dd			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90ea					Command_GOSUB:
.90ea	a2 00		ldx #$00			ldx 	#0
.90ec	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90ef	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.90f1	20 6c a6	jsr $a66c			jsr 	StackOpen 					; create frame
.90f4	20 b0 a6	jsr $a6b0			jsr 	STKSaveCodePosition 		; save current position
.90f7	4c 0d 91	jmp $910d			jmp 	GotoStackX
.90fa					Command_RETURN:
.90fa	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.90fc	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.90fe	20 98 a6	jsr $a698			jsr 	StackCheckFrame
.9101	20 c1 a6	jsr $a6c1			jsr 	STKLoadCodePosition 		; restore code position
.9104	20 8a a6	jsr $a68a			jsr 	StackClose
.9107	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9108					GotoCommand:
.9108	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.910a	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.910d					GotoStackX:
.910d	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9110	48		pha				pha 								; it is slightly inefficient, just in cases.
.9111	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9114	fa		plx				plx
.9115	20 17 a6	jsr $a617			jsr 	MemorySearch 				; transfer to line number AX.
.9118	90 05		bcc $911f			bcc 	_GotoError 					; not found, off end.
.911a	d0 03		bne $911f			bne 	_GotoError 					; not found exactly
.911c	4c 86 94	jmp $9486			jmp 	RunNewLine 					; and go straight to new line code.
.911f					_GotoError:
.911f	a9 0d		lda #$0d		lda	#13
.9121	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9124					IfCommand:
.9124	a2 00		ldx #$00			ldx 	#0 							; If what.
.9126	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber
.9129	b1 30		lda ($30),y			lda 	(codePtr),y
.912b	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.912d	d0 0a		bne $9139			bne 	_IFStructured
.912f	c8		iny				iny 								; consume THEN
.9130	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; is it zero
.9133	f0 01		beq $9136			beq 	_IfFail 					; if fail, go to next line
.9135	60		rts				rts 								; if THEN just continue
.9136					_IfFail:
.9136	4c eb 94	jmp $94eb			jmp 	EOLCommand
.9139					_IfStructured:
.9139	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; is it zero
.913c	d0 07		bne $9145			bne 	_IfExit 					; if not, then continue normally.
.913e	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.9140	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.9142	20 e0 98	jsr $98e0			jsr 	ScanForward 				; and run from there/
.9145					_IfExit:
.9145	60		rts				rts
.9146					ElseCode:
.9146	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9148	aa		tax				tax 								; so just go to the structure exit
.9149	20 e0 98	jsr $98e0			jsr 	ScanForward
.914c	60		rts				rts
.914d					EndIf:
.914d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.914e					UnaryJoyX:
.914e	18		clc				clc
.914f	80 01		bra $9152			bra 	JoyMain
.9151					UnaryJoyY:
.9151	38		sec				sec
.9152					JoyMain:
.9152	fa		plx				plx 								; get pos
.9153	08		php				php 								; save carry (set for Y)
.9154	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9157	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.915a	20 d7 b5	jsr $b5d7			jsr 	EXTReadController 			; read the controller.
.915d	28		plp				plp
.915e	90 02		bcc $9162			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.9160	4a		lsr a				lsr 	a
.9161	4a		lsr a				lsr 	a
.9162					_JMNoShift:
.9162	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9163	b0 0a		bcs $916f			bcs 	_JMIsRight
.9165	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9166	b0 04		bcs $916c			bcs 	_JMIsLeft
.9168	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero 					; zero result
.916b	60		rts				rts
.916c					_JMIsLeft:
.916c	4c f2 99	jmp $99f2			jmp 	ReturnTrue
.916f					_JMIsRight:
.916f	a9 01		lda #$01			lda 	#1
.9171	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.9174	60		rts				rts
.9175					UnaryJoyB:
.9175	fa		plx				plx 								; get pos
.9176	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9179	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.917c	20 d7 b5	jsr $b5d7			jsr 	EXTReadController 			; read the controller.
.917f	4a		lsr a				lsr 	a
.9180	4a		lsr a				lsr 	a
.9181	4a		lsr a				lsr 	a
.9182	4a		lsr a				lsr 	a
.9183	29 01		and #$01			and 	#1
.9185	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.9188	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9189					LetCommand:
.9189	a2 00		ldx #$00			ldx 	#0
.918b	b1 30		lda ($30),y			lda 	(codePtr),y
.918d	c9 10		cmp #$10			cmp 	#KWD_AT
.918f	d0 16		bne $91a7			bne 	_LCStandard
.9191	c8		iny				iny 								; skip equal
.9192	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; get a number
.9195	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; dereference it
.9198	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.919b	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.919d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91a0	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.91a2	d0 10		bne $91b4			bne 	_LCMain
.91a4	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; was a reference before.
.91a7					_LCStandard:
.91a7	ad 76 9d	lda $9d76			lda 	PrecedenceLevel+"*"			; precedence > this
.91aa	20 90 9d	jsr $9d90			jsr 	EvaluateExpressionAtPrecedence
.91ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91b0	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91b2	f0 0e		beq $91c2			beq 	_LetGoProc 					; it's a procedure call.
.91b4					_LCMain:
.91b4	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91b6	20 02 ae	jsr $ae02			jsr 	CheckNextA
.91b9	e8		inx				inx 								; RHS
.91ba	20 ef a4	jsr $a4ef			jsr 	EvaluateValue
.91bd	ca		dex				dex
.91be	20 c5 91	jsr $91c5			jsr 	AssignVariable
.91c1	60		rts				rts
.91c2					_LetGoProc:
.91c2	4c 61 93	jmp $9361			jmp 	CallProcedure
.91c5					AssignVariable:
.91c5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91c8	48		pha				pha 								; save a copy
.91c9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91cc	29 10		and #$10			and 	#NSBIsString
.91ce	d0 0b		bne $91db			bne 	_ASError
.91d0	68		pla				pla 								; get back
.91d1	29 10		and #$10			and 	#NSBIsString 				; check type
.91d3	d0 03		bne $91d8			bne 	_ASString
.91d5	4c cb 9d	jmp $9dcb			jmp 	AssignNumber
.91d8					_ASString:
.91d8	4c 39 9e	jmp $9e39			jmp 	AssignString
.91db					_ASError:
.91db	4c e2 b3	jmp $b3e2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91de					Command_List:
.91de	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.91e1	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91e4	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91e7	a9 ff		lda #$ff			lda 	#$FF
.91e9	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91ec	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91ef	b1 30		lda ($30),y			lda 	(codePtr),y
.91f1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91f3	f0 1e		beq $9213			beq 	_CLSecond
.91f5	20 71 92	jsr $9271			jsr 	CLIsDigit 					; if not digit, list all
.91f8	b0 24		bcs $921e			bcs 	_CLStart
.91fa	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91fc	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.91ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9201	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9203	f0 0e		beq $9213			beq 	_CLSecond 					; if so go get it
.9205	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9208	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.920b	ad 14 04	lda $0414			lda 	NSMantissa1+4
.920e	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9211	80 0b		bra $921e			bra 	_CLStart
.9213					_CLSecond:
.9213	c8		iny				iny 								; consume comma
.9214	20 71 92	jsr $9271			jsr 	CLIsDigit 					; digit found
.9217	b0 05		bcs $921e			bcs 	_CLStart 					; if not, continue listing
.9219	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.921b	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger
.921e					_CLStart
.921e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9220	85 30		sta $30				sta 	codePtr
.9222	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9224	85 31		sta $31				sta 	codePtr+1
.9226					_CLLoop:
.9226	20 d4 b5	jsr $b5d4			jsr 	EXTBreakCheck 				; break check
.9229	f0 30		beq $925b			beq 	_CLExit
.922b	b2 30		lda ($30)			lda 	(codePtr)
.922d	f0 2c		beq $925b			beq 	_CLExit
.922f	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9231	20 5e 92	jsr $925e			jsr 	CLCompareLineNo
.9234	90 18		bcc $924e			bcc 	_CLNext
.9236	a2 07		ldx #$07			ldx 	#7
.9238	20 5e 92	jsr $925e			jsr 	CLCompareLineNo
.923b	f0 02		beq $923f			beq 	_CLDoThisOne
.923d	b0 0f		bcs $924e			bcs 	_CLNext
.923f					_CLDoThisOne:
.923f	20 e5 96	jsr $96e5			jsr 	ListConvertLine 			; convert line into token Buffer
.9242	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9244	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9246	20 de 99	jsr $99de			jsr 	PrintStringXA
.9249	a9 0d		lda #$0d			lda 	#13 						; new line
.924b	20 93 b5	jsr $b593			jsr 	EXTPrintCharacter
.924e					_CLNext:
.924e	18		clc				clc
.924f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9251	65 30		adc $30				adc 	codePtr
.9253	85 30		sta $30				sta 	codePtr
.9255	90 02		bcc $9259			bcc 	_CREExit
.9257	e6 31		inc $31				inc 	codePtr+1
.9259					_CREExit:
.9259	80 cb		bra $9226			bra 	_CLLoop
.925b					_CLExit:
.925b	4c 4f 8b	jmp $8b4f			jmp 	WarmStart
.925e					CLCompareLineNo:
.925e	38		sec				sec
.925f	a0 01		ldy #$01			ldy 	#1
.9261	b1 30		lda ($30),y			lda 	(codePtr),y
.9263	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9266	85 36		sta $36				sta 	zTemp0
.9268	c8		iny				iny
.9269	b1 30		lda ($30),y			lda 	(codePtr),y
.926b	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.926e	05 36		ora $36				ora 	zTemp0
.9270	60		rts				rts
.9271					CLIsDigit:
.9271	b1 30		lda ($30),y			lda 	(codePtr),y
.9273	c9 30		cmp #$30			cmp 	#"0"
.9275	90 03		bcc $927a			bcc	 	_CLIDExitFalse
.9277	c9 3a		cmp #$3a			cmp 	#"9"+1
.9279	60		rts				rts
.927a					_CLIDExitFalse:
.927a	38		sec				sec
.927b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.927c					Command_LOCAL:
.927c	a2 00		ldx #$00			ldx 	#0 							; at level 0
.927e	20 8a 92	jsr $928a			jsr 	LocaliseNextTerm 			; convert term to a local.
.9281	b1 30		lda ($30),y			lda 	(codePtr),y
.9283	c8		iny				iny
.9284	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9286	f0 f4		beq $927c			beq 	Command_LOCAL
.9288	88		dey				dey 								; unpick pre-get
.9289	60		rts				rts
.928a					LocaliseNextTerm:
.928a	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; evaluate the term
.928d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9290	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9292	f0 69		beq $92fd			beq		_LNTError
.9294	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9297	85 36		sta $36				sta 	zTemp0
.9299	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.929c	85 37		sta $37				sta  	zTemp0+1
.929e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92a1	29 10		and #$10			and 	#NSBIsString
.92a3	d0 22		bne $92c7			bne 	_LNTPushString
.92a5	5a		phy				phy
.92a6	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.92a8					_LNTPushNumLoop:
.92a8	b1 36		lda ($36),y			lda		(zTemp0),y
.92aa	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92ad	a9 00		lda #$00			lda 	#0
.92af	91 36		sta ($36),y			sta 	(zTemp0),y
.92b1	c8		iny				iny
.92b2	c0 05		cpy #$05			cpy 	#5
.92b4	d0 f2		bne $92a8			bne 	_LNTPushNumLoop
.92b6	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92b8	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92bb	a5 37		lda $37				lda 	zTemp0+1
.92bd	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92c0	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92c2	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92c5	7a		ply				ply
.92c6	60		rts				rts
.92c7					_LNTPushString:
.92c7	5a		phy				phy
.92c8	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92ca	85 38		sta $38				sta 	zTemp1
.92cc	a0 01		ldy #$01			ldy 	#1
.92ce	b1 36		lda ($36),y			lda 	(zTemp0),y
.92d0	85 39		sta $39				sta 	zTemp1+1
.92d2	a0 00		ldy #$00			ldy 	#0 							; output string
.92d4	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92d6	f0 0a		beq $92e2			beq 	_LNTStringOut
.92d8					_LNTPushStrLoop:
.92d8	b1 38		lda ($38),y			lda 	(zTemp1),y
.92da	f0 06		beq $92e2			beq 	_LNTStringOut
.92dc	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92df	c8		iny				iny
.92e0	80 f6		bra $92d8			bra 	_LNTPushStrLoop
.92e2					_LNTStringOut:
.92e2	98		tya				tya									; output length
.92e3	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92e6	a9 00		lda #$00			lda 	#0 							; clear original string.
.92e8	92 38		sta ($38)			sta 	(zTemp1)
.92ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92ed	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92f0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92f3	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92f6	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92f8	20 4a a6	jsr $a64a			jsr 	StackPushByte
.92fb	7a		ply				ply
.92fc	60		rts				rts
.92fd					_LNTError:
.92fd	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.ad99					LocalPopValue:
.ad99	20 63 a6	jsr $a663			jsr 	StackPopByte
.ad9c	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ad9e	d0 17		bne $adb7			bne 	_LPVString
.ada0	20 63 a6	jsr $a663			jsr 	StackPopByte 				; address
.ada3	85 37		sta $37				sta 	zTemp0+1
.ada5	20 63 a6	jsr $a663			jsr 	StackPopByte
.ada8	85 36		sta $36				sta 	zTemp0
.adaa	5a		phy				phy
.adab	a0 04		ldy #$04			ldy 	#4 							; copy back
.adad					_LPVNumberCopy:
.adad	20 63 a6	jsr $a663			jsr 	StackPopByte
.adb0	91 36		sta ($36),y			sta 	(zTemp0),y
.adb2	88		dey				dey
.adb3	10 f8		bpl $adad			bpl 	_LPVNumberCopy
.adb5	7a		ply				ply 								; and complete
.adb6	60		rts				rts
.adb7					_LPVString:
.adb7	20 63 a6	jsr $a663			jsr 	StackPopByte 				; address of record => zTemp0
.adba	85 37		sta $37				sta 	zTemp0+1
.adbc	20 63 a6	jsr $a663			jsr 	StackPopByte
.adbf	85 36		sta $36				sta 	zTemp0
.adc1	5a		phy				phy
.adc2	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.adc4	85 38		sta $38				sta 	zTemp1
.adc6	a0 01		ldy #$01			ldy 	#1
.adc8	b1 36		lda ($36),y			lda 	(zTemp0),y
.adca	85 39		sta $39				sta 	zTemp1+1
.adcc	20 63 a6	jsr $a663			jsr 	StackPopByte 				; # to get => y
.adcf	a8		tay				tay
.add0	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.add2	f0 0e		beq $ade2			beq 	_LPVStringCopied
.add4	a9 00		lda #$00			lda 	#0 							; NULL on end
.add6	91 38		sta ($38),y			sta 	(zTemp1),y
.add8					_LPVStringCopy:
.add8	88		dey				dey
.add9	30 07		bmi $ade2			bmi 	_LPVStringCopied
.addb	20 63 a6	jsr $a663			jsr 	StackPopByte
.adde	91 38		sta ($38),y			sta 	(zTemp1),y
.ade0	80 f6		bra $add8			bra 	_LPVStringCopy
.ade2					_LPVStringCopied:
.ade2	fa		plx				plx
.ade3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9300					NewCommand:
.9300	20 f5 a5	jsr $a5f5			jsr 	MemoryNew
.9303	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9306	20 e8 8b	jsr $8be8			jsr 	ClearCommand 				; clear everything.
.9309	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.930a					Command_Print:
.930a	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.930b					_CPLoop:
.930b	08		php				php 								; save last action flag
.930c	b1 30		lda ($30),y			lda 	(codePtr),y
.930e	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9310	f0 46		beq $9358			beq 	_CPExit
.9312	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9314	f0 42		beq $9358			beq 	_CPExit
.9316	68		pla				pla 								; throw last action flag
.9317	b1 30		lda ($30),y			lda 	(codePtr),y
.9319	c8		iny				iny
.931a	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.931c	f0 37		beq $9355			beq 	_CPContinueWithSameLine
.931e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9320	f0 2e		beq $9350			beq 	_CPTab
.9322	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9324	f0 26		beq $934c			beq 	_CPNewLine
.9326	88		dey				dey 								; undo the get.
.9327	a2 00		ldx #$00			ldx 	#0
.9329	20 ef a4	jsr $a4ef			jsr 	EvaluateValue 				; get a value into slot 0
.932c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.932f	29 10		and #$10			and 	#NSBIsString
.9331	f0 0b		beq $933e			beq 	_CPNumber
.9333	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9336	ad 08 04	lda $0408			lda 	NSMantissa0
.9339	20 de 99	jsr $99de			jsr 	PrintStringXA
.933c	80 cc		bra $930a			bra 	Command_Print 				; loop round clearing carry so NL if end
.933e					_CPNumber:
.933e	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9340	20 c5 a3	jsr $a3c5			jsr 	ConvertNumberToString 		; convert to string
.9343	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9345	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.9347	20 de 99	jsr $99de			jsr 	PrintStringXA
.934a	80 be		bra $930a			bra 	Command_Print 				; loop round clearing carry so NL if end
.934c					_CPNewLine:
.934c	a9 0d		lda #$0d			lda 	#13
.934e	80 02		bra $9352			bra 	_CPPrintChar
.9350					_CPTab:
.9350	a9 09		lda #$09			lda 	#9 							; print TAB
.9352					_CPPrintChar:
.9352	20 93 b5	jsr $b593			jsr 	EXTPrintCharacter
.9355					_CPContinueWithSameLine:
.9355	38		sec				sec 								; loop round with carry set, which
.9356	80 b3		bra $930b			bra 	_CPLoop 					; will inhibit final CR
.9358					_CPExit:
.9358	28		plp				plp 								; get last action flag
.9359	b0 05		bcs $9360			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.935b	a9 0d		lda #$0d			lda 	#13 						; print new line
.935d	20 93 b5	jsr $b593			jsr 	EXTPrintCharacter
.9360					_CPExit2:
.9360	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9361					CallProcedure:
.9361	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9363	b1 30		lda ($30),y			lda 	(codePtr),y
.9365	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9367	f0 0c		beq $9375			beq 	_CPEndParam
.9369					_CPParamLoop:
.9369	20 ef a4	jsr $a4ef			jsr 	EvaluateValue 				; get parameter onto stack
.936c	e8		inx				inx 								; bump next stack
.936d	b1 30		lda ($30),y			lda 	(codePtr),y
.936f	c8		iny				iny
.9370	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9372	f0 f5		beq $9369			beq 	_CPParamLoop
.9374	88		dey				dey 								; unpick.
.9375					_CPEndParam:
.9375	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9378	c8		iny				iny									; skip right bracket
.9379	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.937b	20 6c a6	jsr $a66c			jsr 	StackOpen
.937e	20 b0 a6	jsr $a6b0			jsr 	STKSaveCodePosition 		; save loop position
.9381	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9384	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9386	ad 10 04	lda $0410			lda 	NSMantissa1
.9389	85 37		sta $37				sta 	zTemp0+1
.938b	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.938d	b2 36		lda ($36)			lda 	(zTemp0)
.938f	85 30		sta $30				sta 	safePtr
.9391	b1 36		lda ($36),y			lda 	(zTemp0),y
.9393	85 31		sta $31				sta 	safePtr+1
.9395	c8		iny				iny
.9396	b1 36		lda ($36),y			lda 	(zTemp0),y
.9398	85 32		sta $32				sta 	safePtr+2
.939a	c8		iny				iny
.939b	b1 36		lda ($36),y			lda 	(zTemp0),y
.939d	85 33		sta $33				sta 	safePtr+3
.939f	c8		iny				iny 								; get Y offset -> Y
.93a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.93a2	a8		tay				tay
.93a3	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.93a5	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.93a8	f0 13		beq $93bd			beq 	_ParamExit 					; if so, exit.
.93aa					_ParamExtract:
.93aa	ca		dex				dex 								; put a local term on the level before
.93ab	20 8a 92	jsr $928a			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93ae	20 c5 91	jsr $91c5			jsr 	AssignVariable 				; assign stacked value to the variable.
.93b1	e8		inx				inx 								; advance to next parameter to do.
.93b2	e8		inx				inx
.93b3	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93b6	f0 05		beq $93bd			beq 	_ParamExit
.93b8	20 fa ad	jsr $adfa			jsr 	CheckComma 					; comma seperating parameters
.93bb	80 ed		bra $93aa			bra 	_ParamExtract
.93bd					_ParamExit:
.93bd	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 			; check )
.93c0	60		rts				rts 								; and continue from here
.ade4					Command_ENDPROC:
.ade4	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ade6	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ade8	20 98 a6	jsr $a698			jsr 	StackCheckFrame
.adeb	20 c1 a6	jsr $a6c1			jsr 	STKLoadCodePosition 		; restore code position
.adee	20 8a a6	jsr $a68a			jsr 	StackClose
.adf1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93c1					Command_Read:
.93c1	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93c3	20 5f a0	jsr $a05f			jsr 	EvaluateTerm
.93c6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93c9	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93cb	f0 4a		beq $9417			beq 	_CRSyntax 					; check reference (bit 0)
.93cd	20 60 94	jsr $9460			jsr 	SwapDataCodePtrs 			; swap code and data
.93d0	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93d3	d0 20		bne $93f5			bne 	_CRContinueData
.93d5					_CRKeepSearching:
.93d5	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.93d7	aa		tax				tax
.93d8	20 e0 98	jsr $98e0			jsr 	ScanForward
.93db	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.93dd	f0 16		beq $93f5			beq 	_CRHaveData 				; found it
.93df	18		clc				clc
.93e0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93e2	65 30		adc $30				adc 	codePtr
.93e4	85 30		sta $30				sta 	codePtr
.93e6	90 02		bcc $93ea			bcc 	_CREExit
.93e8	e6 31		inc $31				inc 	codePtr+1
.93ea					_CREExit:
.93ea	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93ec	b2 30		lda ($30)			lda 	(codePtr)
.93ee	d0 e5		bne $93d5			bne 	_CRKeepSearching
.93f0	a9 0b		lda #$0b		lda	#11
.93f2	4c 85 99	jmp $9985		jmp	ErrorHandler
.93f5					_CRHaveData:
.93f5					_CRContinueData:
.93f5	a2 01		ldx #$01			ldx 	#1
.93f7	20 ef a4	jsr $a4ef			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93fa	ca		dex				dex
.93fb	20 c5 91	jsr $91c5			jsr		AssignVariable 				; do the assignment
.93fe	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9401	b1 30		lda ($30),y			lda 	(codePtr),y
.9403	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9405	d0 04		bne $940b			bne 	_CRSwapBack
.9407	c8		iny				iny 								; consume comma
.9408	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.940b					_CRSwapBack:
.940b	20 60 94	jsr $9460			jsr 	SwapDataCodePtrs			; swap them back.
.940e	b1 30		lda ($30),y			lda 	(codePtr),y
.9410	c8		iny				iny
.9411	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9413	f0 ac		beq $93c1			beq 	Command_Read 				; if so go round again.
.9415	88		dey				dey 								; unpick get.
.9416	60		rts				rts
.9417					_CRSyntax:
.9417	4c d8 b3	jmp $b3d8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.941a					RemCommand:
.941a	b1 30		lda ($30),y			lda 	(codePtr),y
.941c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.941e	d0 06		bne $9426			bne 	_RMExit
.9420	c8		iny				iny
.9421	98		tya				tya
.9422	38		sec				sec
.9423	71 30		adc ($30),y			adc 	(codePtr),y
.9425	a8		tay				tay
.9426					_RMExit:
.9426	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9427					Command_REPEAT:
.9427	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9429	20 6c a6	jsr $a66c			jsr 	StackOpen
.942c	20 b0 a6	jsr $a6b0			jsr 	STKSaveCodePosition 		; save loop position
.942f	60		rts				rts
.9430					Command_UNTIL:
.9430	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9432	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9434	20 98 a6	jsr $a698			jsr 	StackCheckFrame
.9437	a2 00		ldx #$00			ldx 	#0
.9439	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber 				; work out the number
.943c	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; check if zero
.943f	f0 04		beq $9445			beq 	_CULoopBack 				; if so keep looping
.9441	20 8a a6	jsr $a68a			jsr 	StackClose		 			; return
.9444	60		rts				rts
.9445					_CULoopBack:
.9445	20 c1 a6	jsr $a6c1			jsr 	STKLoadCodePosition 		; loop back
.9448	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9449					Command_Restore:
.9449	20 60 94	jsr $9460			jsr 	SwapDataCodePtrs 			; swap code and data
.944c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.944e	85 30		sta $30				sta 	codePtr
.9450	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9452	85 31		sta $31				sta 	codePtr+1
.9454	20 60 94	jsr $9460			jsr 	SwapDataCodePtrs 			; put them back
.9457	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9459	8d 9b 04	sta $049b			sta 	dataPointer+4
.945c	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.945f	60		rts				rts
.9460					SwapDataCodePtrs:
.9460	da		phx				phx
.9461	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9463					_SDCPLoop:
.9463	b5 30		lda $30,x			lda 	safePtr,x
.9465	48		pha				pha
.9466	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9469	95 30		sta $30,x			sta 	safePtr,x
.946b	68		pla				pla
.946c	9d 97 04	sta $0497,x			sta 	dataPointer,x
.946f	ca		dex				dex
.9470	10 f1		bpl $9463			bpl 	_SDCPLoop
.9472	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.9475	8c 9b 04	sty $049b			sty 	dataPointer+4
.9478	a8		tay				tay
.9479	fa		plx				plx
.947a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.947b					CommandRUN:
.947b	20 e8 8b	jsr $8be8			jsr 	ClearCommand 				; clear variable/stacks/etc.
.947e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9480	85 30		sta $30				sta 	codePtr
.9482	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9484	85 31		sta $31				sta 	codePtr+1
.9486					RUNNewLine:
.9486	b2 30		lda ($30)			lda 	(codePtr)
.9488	f0 5e		beq $94e8			beq 	CRNoProgram         		; no then END.
.948a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.948c	9a		txs				txs
.948d					RUNCodePointerLine:
.948d	a0 02		ldy #$02			ldy 	#2 							; start of program
.948f					_CRIncMainLoop:
.948f	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9492	d0 05		bne $9499			bne 	_CRNoBreakCheck
.9494	20 d4 b5	jsr $b5d4			jsr 	EXTBreakCheck 				; break check
.9497	f0 4a		beq $94e3			beq 	_CRBreak
.9499					_CRNoBreakCheck:
.9499	c8		iny				iny
.949a					_CRMainLoop:
.949a	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.949d	b1 30		lda ($30),y			lda 	(codePtr),y
.949f	10 10		bpl $94b1			bpl 	_CRNotKeyword
.94a1	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.94a3	b0 04		bcs $94a9			bcs 	_CRIsKeyword
.94a5	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.94a7	b0 34		bcs $94dd			bcs		_CRSyntaxError
.94a9					_CRIsKeyword:
.94a9	c8		iny				iny 								; consume command
.94aa	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.94ab	aa		tax				tax 								; put in X for vector jump
.94ac	20 e0 94	jsr $94e0			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94af	80 e9		bra $949a			bra 	_CRMainLoop 				; and loop round
.94b1					_CRNotKeyword:
.94b1	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94b3	f0 da		beq $948f			beq 	_CRIncMainLoop
.94b5	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94b7	90 05		bcc $94be			bcc 	_CRNotVariable
.94b9					_CRGoLet:
.94b9	20 89 91	jsr $9189			jsr 	LetCommand
.94bc	80 dc		bra $949a			bra 	_CRMainLoop
.94be					_CRNotVariable:
.94be	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94c0	f0 f7		beq $94b9			beq 	_CRGoLet
.94c2	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94c4	f0 f3		beq $94b9			beq 	_CRGoLet
.94c6	c9 21		cmp #$21			cmp 	#KWD_PLING
.94c8	f0 ef		beq $94b9			beq 	_CRGoLet
.94ca	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94cc	f0 09		beq $94d7			beq 	_CRGoRem
.94ce	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94d0	d0 0b		bne $94dd			bne 	_CRSyntaxError
.94d2	20 88 8a	jsr $8a88			jsr 	LabelHere
.94d5	80 c3		bra $949a			bra 	_CRMainLoop
.94d7					_CRGoRem:
.94d7	c8		iny				iny
.94d8	20 1a 94	jsr $941a			jsr 	RemCommand
.94db	80 bd		bra $949a			bra 	_CRMainLoop
.94dd					_CRSyntaxError:
.94dd	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.94e0					_CRCallVector0:
.94e0	7c 8c 95	jmp ($958c,x)			jmp 	(VectorSet0,x)
.94e3					_CRBreak:
.94e3	a9 01		lda #$01		lda	#1
.94e5	4c 85 99	jmp $9985		jmp	ErrorHandler
.94e8					CRNoProgram:
.94e8	4c 0b 8d	jmp $8d0b			jmp 	EndCommand
.94eb					EOLCommand:
.94eb	18		clc				clc
.94ec	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94ee	65 30		adc $30				adc 	codePtr
.94f0	85 30		sta $30				sta 	codePtr
.94f2	90 02		bcc $94f6			bcc 	_CREExit
.94f4	e6 31		inc $31				inc 	codePtr+1
.94f6					_CREExit:
.94f6	80 8e		bra $9486			bra 	RunNewLine
.94f8					Shift1Command:
.94f8	b1 30		lda ($30),y			lda 	(codePtr),y
.94fa	c8		iny				iny
.94fb	0a		asl a				asl 	a
.94fc	aa		tax				tax
.94fd	7c 22 96	jmp ($9622,x)			jmp 	(VectorSet1,x)
.9500					Shift2Command:
.9500	b1 30		lda ($30),y			lda 	(codePtr),y
.9502	c8		iny				iny
.9503	0a		asl a				asl 	a
.9504	aa		tax				tax
.9505	7c 3c 96	jmp ($963c,x)			jmp 	(VectorSet2,x)
.9508					Unused1:
.9508					Unused2:
.9508					Unused3:
.9508					Unused4:
.9508	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
>950b							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.950c					VectorSetPunc:
>950c	2f 9b					.word	ShiftLeft                        ; $00 <<
>950e	29 9a					.word	BinaryCompareLessEqual           ; $01 <=
>9510	1f 9a					.word	BinaryCompareNotEqual            ; $02 <>
>9512	d8 b3					.word	SyntaxError                      ; $03 !!3
>9514	d8 b3					.word	SyntaxError                      ; $04 ><
>9516	33 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>9518	32 9b					.word	ShiftRight                       ; $06 >>
>951a	d8 b3					.word	SyntaxError                      ; $07 !!7
>951c	d8 b3					.word	SyntaxError                      ; $08 !!8
>951e	d8 b3					.word	SyntaxError                      ; $09 !!9
>9520	d8 b3					.word	SyntaxError                      ; $0a !!10
>9522	d8 b3					.word	SyntaxError                      ; $0b !!11
>9524	d8 b3					.word	SyntaxError                      ; $0c !!12
>9526	d8 b3					.word	SyntaxError                      ; $0d !!13
>9528	d8 b3					.word	SyntaxError                      ; $0e !!14
>952a	d8 b3					.word	SyntaxError                      ; $0f !!15
>952c	d8 b3					.word	SyntaxError                      ; $10 @
>952e	d8 b3					.word	SyntaxError                      ; $11 !!17
>9530	d8 b3					.word	SyntaxError                      ; $12 !!18
>9532	d8 b3					.word	SyntaxError                      ; $13 [
>9534	0b ae					.word	IntegerDivide                    ; $14 \
>9536	d8 b3					.word	SyntaxError                      ; $15 ]
>9538	b8 9c					.word	EorInteger                       ; $16 ^
>953a	d8 b3					.word	SyntaxError                      ; $17 _
>953c	d8 b3					.word	SyntaxError                      ; $18 `
>953e	d8 b3					.word	SyntaxError                      ; $19 !!25
>9540	d8 b3					.word	SyntaxError                      ; $1a !!26
>9542	d8 b3					.word	SyntaxError                      ; $1b {
>9544	72 9c					.word	OraInteger                       ; $1c |
>9546	d8 b3					.word	SyntaxError                      ; $1d }
>9548	d8 b3					.word	SyntaxError                      ; $1e ~
>954a	d8 b3					.word	SyntaxError                      ; $1f [7m<7F>[m
>954c	d8 b3					.word	SyntaxError                      ; $20
>954e	fe 9c					.word	WordIndirect                     ; $21 !
>9550	d8 b3					.word	SyntaxError                      ; $22 "
>9552	d8 b3					.word	SyntaxError                      ; $23 #
>9554	d8 b3					.word	SyntaxError                      ; $24 $
>9556	58 ae					.word	IntegerModulus                   ; $25 %
>9558	2c 9c					.word	AndInteger                       ; $26 &
>955a	d8 b3					.word	SyntaxError                      ; $27 '
>955c	d8 b3					.word	SyntaxError                      ; $28 (
>955e	d8 b3					.word	SyntaxError                      ; $29 )
>9560	cd ae					.word	MulInteger                       ; $2a *
>9562	c6 9b					.word	AddInteger                       ; $2b +
>9564	d8 b3					.word	SyntaxError                      ; $2c ,
>9566	01 9c					.word	SubInteger                       ; $2d -
>9568	d8 b3					.word	SyntaxError                      ; $2e .
>956a	64 b0					.word	FDivideCommand                   ; $2f /
>956c	d8 b3					.word	SyntaxError                      ; $30 0
>956e	d8 b3					.word	SyntaxError                      ; $31 1
>9570	d8 b3					.word	SyntaxError                      ; $32 2
>9572	d8 b3					.word	SyntaxError                      ; $33 3
>9574	d8 b3					.word	SyntaxError                      ; $34 4
>9576	d8 b3					.word	SyntaxError                      ; $35 5
>9578	d8 b3					.word	SyntaxError                      ; $36 6
>957a	d8 b3					.word	SyntaxError                      ; $37 7
>957c	d8 b3					.word	SyntaxError                      ; $38 8
>957e	d8 b3					.word	SyntaxError                      ; $39 9
>9580	d8 b3					.word	SyntaxError                      ; $3a :
>9582	d8 b3					.word	SyntaxError                      ; $3b ;
>9584	0b 9a					.word	BinaryCompareLess                ; $3c <
>9586	01 9a					.word	BinaryCompareEqual               ; $3d =
>9588	15 9a					.word	BinaryCompareGreater             ; $3e >
>958a	25 9d					.word	ByteIndirect                     ; $3f ?
.958c					VectorSet0:
>958c	eb 94					.word	EOLCommand                       ; $80 !0:EOF
>958e	f8 94					.word	Shift1Command                    ; $81 !1:SH1
>9590	00 95					.word	Shift2Command                    ; $82 !2:SH2
>9592	aa b1					.word	AbsUnary                         ; $83 ABS(
>9594	f5 a1					.word	AllocUnary                       ; $84 ALLOC(
>9596	ba b1					.word	AscUnary                         ; $85 ASC(
>9598	76 a3					.word	ChrUnary                         ; $86 CHR$(
>959a	0e 8d					.word	UnaryEvent                       ; $87 EVENT(
>959c	fd 99					.word	UnaryFalse                       ; $88 FALSE
>959e	c7 b1					.word	FracUnary                        ; $89 FRAC(
>95a0	d8 b3					.word	SyntaxError                      ; $8a HIT(
>95a2	dd b1					.word	IntUnary                         ; $8b INT(
>95a4	33 b2					.word	IsValUnary                       ; $8c ISVAL(
>95a6	75 91					.word	UnaryJoyB                        ; $8d JOYB(
>95a8	4e 91					.word	UnaryJoyX                        ; $8e JOYX(
>95aa	51 91					.word	UnaryJoyY                        ; $8f JOYY(
>95ac	50 a4					.word	Unary_Left                       ; $90 LEFT$(
>95ae	ef b1					.word	LenUnary                         ; $91 LEN(
>95b0	69 a2					.word	Unary_Max                        ; $92 MAX(
>95b2	7a a4					.word	Unary_Mid                        ; $93 MID$(
>95b4	65 a2					.word	Unary_Min                        ; $94 MIN(
>95b6	c0 a2					.word	Unary_Not                        ; $95 NOT(
>95b8	d6 a2					.word	Unary_Random                     ; $96 RANDOM(
>95ba	60 a4					.word	Unary_Right                      ; $97 RIGHT$(
>95bc	f5 a2					.word	Unary_Rnd                        ; $98 RND(
>95be	09 b2					.word	SgnUnary                         ; $99 SGN(
>95c0	88 a3					.word	SpcUnary                         ; $9a SPC(
>95c2	a3 a3					.word	Unary_Str                        ; $9b STR$(
>95c4	c9 96					.word	UnaryTimer                       ; $9c TIMER(
>95c6	f1 99					.word	UnaryTrue                        ; $9d TRUE
>95c8	29 b2					.word	ValUnary                         ; $9e VAL(
>95ca	77 8d					.word	ForCommand                       ; $9f FOR
>95cc	24 91					.word	IfCommand                        ; $a0 IF
>95ce	08 95					.word	Unused1                          ; $a1 PROC
>95d0	27 94					.word	Command_REPEAT                   ; $a2 REPEAT
>95d2	56 99					.word	Command_WHILE                    ; $a3 WHILE
>95d4	4d 91					.word	EndIf                            ; $a4 ENDIF
>95d6	e4 ad					.word	Command_ENDPROC                  ; $a5 ENDPROC
>95d8	31 8e					.word	NextCommand                      ; $a6 NEXT
>95da	08 95					.word	Unused4                          ; $a7 THEN
>95dc	30 94					.word	Command_UNTIL                    ; $a8 UNTIL
>95de	77 99					.word	Command_WEND                     ; $a9 WEND
>95e0	d8 b3					.word	SyntaxError                      ; $aa BY
>95e2	ae 8b					.word	CallCommand                      ; $ab CALL
>95e4	8e 8e					.word	CircleCommand                    ; $ac CIRCLE
>95e6	e8 8b					.word	ClearCommand                     ; $ad CLEAR
>95e8	40 8c					.word	ClearScreen                      ; $ae CLS
>95ea	d8 b3					.word	SyntaxError                      ; $af COLOR
>95ec	d8 b3					.word	SyntaxError                      ; $b0 COLOUR
>95ee	46 8c					.word	Command_Data                     ; $b1 DATA
>95f0	4e 8c					.word	DimCommand                       ; $b2 DIM
>95f2	08 95					.word	Unused3                          ; $b3 DOWNTO
>95f4	46 91					.word	ElseCode                         ; $b4 ELSE
>95f6	d8 b3					.word	SyntaxError                      ; $b5 FROM
>95f8	b8 90					.word	GfxCommand                       ; $b6 GFX
>95fa	ea 90					.word	Command_GOSUB                    ; $b7 GOSUB
>95fc	08 91					.word	GotoCommand                      ; $b8 GOTO
>95fe	d8 b3					.word	SyntaxError                      ; $b9 HERE
>9600	b8 8e					.word	ImageCommand                     ; $ba IMAGE
>9602	89 91					.word	LetCommand                       ; $bb LET
>9604	0d 8f					.word	LineCommand                      ; $bc LINE
>9606	7c 92					.word	Command_LOCAL                    ; $bd LOCAL
>9608	d8 b3					.word	SyntaxError                      ; $be OFF
>960a	d8 b3					.word	SyntaxError                      ; $bf ON
>960c	d8 b3					.word	SyntaxError                      ; $c0 OUTLINE
>960e	06 8f					.word	PlotCommand                      ; $c1 PLOT
>9610	0a 93					.word	Command_Print                    ; $c2 PRINT
>9612	c1 93					.word	Command_Read                     ; $c3 READ
>9614	8a 8e					.word	RectangleCommand                 ; $c4 RECT
>9616	1a 94					.word	RemCommand                       ; $c5 REM
>9618	fa 90					.word	Command_RETURN                   ; $c6 RETURN
>961a	d8 b3					.word	SyntaxError                      ; $c7 SOLID
>961c	99 8e					.word	SpriteCommand                    ; $c8 SPRITE
>961e	d5 8e					.word	TextCommand                      ; $c9 TEXT
>9620	08 95					.word	Unused2                          ; $ca TO
.9622					VectorSet1:
>9622	d8 b3					.word	SyntaxError                      ; $80 !0:EOF
>9624	d8 b3					.word	SyntaxError                      ; $81 !1:SH1
>9626	d8 b3					.word	SyntaxError                      ; $82 !2:SH2
>9628	7f 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>962a	9e 8b					.word	AssertCommand                    ; $84 ASSERT
>962c	58 90					.word	BitmapCtrl                       ; $85 BITMAP
>962e	0b 8d					.word	EndCommand                       ; $86 END
>9630	de 91					.word	Command_List                     ; $87 LIST
>9632	00 93					.word	NewCommand                       ; $88 NEW
>9634	49 94					.word	Command_Restore                  ; $89 RESTORE
>9636	7b 94					.word	CommandRUN                       ; $8a RUN
>9638	9d 90					.word	SpritesCtrl                      ; $8b SPRITES
>963a	c4 96					.word	StopCommand                      ; $8c STOP
.963c					VectorSet2:
>963c	d8 b3					.word	SyntaxError                      ; $80 !0:EOF
>963e	d8 b3					.word	SyntaxError                      ; $81 !1:SH1
>9640	d8 b3					.word	SyntaxError                      ; $82 !2:SH2
>9642	97 b2					.word	Assemble_adc                     ; $83 ADC
>9644	8f b2					.word	Assemble_and                     ; $84 AND
>9646	ab b2					.word	Assemble_asl                     ; $85 ASL
>9648	15 b3					.word	Assemble_bcc                     ; $86 BCC
>964a	19 b3					.word	Assemble_bcs                     ; $87 BCS
>964c	21 b3					.word	Assemble_beq                     ; $88 BEQ
>964e	d8 b2					.word	Assemble_bit                     ; $89 BIT
>9650	09 b3					.word	Assemble_bmi                     ; $8a BMI
>9652	1d b3					.word	Assemble_bne                     ; $8b BNE
>9654	05 b3					.word	Assemble_bpl                     ; $8c BPL
>9656	25 b3					.word	Assemble_bra                     ; $8d BRA
>9658	29 b3					.word	Assemble_brk                     ; $8e BRK
>965a	0d b3					.word	Assemble_bvc                     ; $8f BVC
>965c	11 b3					.word	Assemble_bvs                     ; $90 BVS
>965e	31 b3					.word	Assemble_clc                     ; $91 CLC
>9660	85 b3					.word	Assemble_cld                     ; $92 CLD
>9662	45 b3					.word	Assemble_cli                     ; $93 CLI
>9664	75 b3					.word	Assemble_clv                     ; $94 CLV
>9666	a3 b2					.word	Assemble_cmp                     ; $95 CMP
>9668	ec b2					.word	Assemble_cpx                     ; $96 CPX
>966a	e7 b2					.word	Assemble_cpy                     ; $97 CPY
>966c	c9 b2					.word	Assemble_dec                     ; $98 DEC
>966e	81 b3					.word	Assemble_dex                     ; $99 DEX
>9670	5d b3					.word	Assemble_dey                     ; $9a DEY
>9672	93 b2					.word	Assemble_eor                     ; $9b EOR
>9674	ce b2					.word	Assemble_inc                     ; $9c INC
>9676	91 b3					.word	Assemble_inx                     ; $9d INX
>9678	7d b3					.word	Assemble_iny                     ; $9e INY
>967a	00 b3					.word	Assemble_jmp                     ; $9f JMP
>967c	fb b2					.word	Assemble_jsr                     ; $a0 JSR
>967e	9f b2					.word	Assemble_lda                     ; $a1 LDA
>9680	c4 b2					.word	Assemble_ldx                     ; $a2 LDX
>9682	e2 b2					.word	Assemble_ldy                     ; $a3 LDY
>9684	b5 b2					.word	Assemble_lsr                     ; $a4 LSR
>9686	95 b3					.word	Assemble_nop                     ; $a5 NOP
>9688	8b b2					.word	Assemble_ora                     ; $a6 ORA
>968a	41 b3					.word	Assemble_pha                     ; $a7 PHA
>968c	2d b3					.word	Assemble_php                     ; $a8 PHP
>968e	89 b3					.word	Assemble_phx                     ; $a9 PHX
>9690	49 b3					.word	Assemble_phy                     ; $aa PHY
>9692	51 b3					.word	Assemble_pla                     ; $ab PLA
>9694	35 b3					.word	Assemble_plp                     ; $ac PLP
>9696	9d b3					.word	Assemble_plx                     ; $ad PLX
>9698	59 b3					.word	Assemble_ply                     ; $ae PLY
>969a	b0 b2					.word	Assemble_rol                     ; $af ROL
>969c	ba b2					.word	Assemble_ror                     ; $b0 ROR
>969e	3d b3					.word	Assemble_rti                     ; $b1 RTI
>96a0	4d b3					.word	Assemble_rts                     ; $b2 RTS
>96a2	a7 b2					.word	Assemble_sbc                     ; $b3 SBC
>96a4	39 b3					.word	Assemble_sec                     ; $b4 SEC
>96a6	99 b3					.word	Assemble_sed                     ; $b5 SED
>96a8	55 b3					.word	Assemble_sei                     ; $b6 SEI
>96aa	9b b2					.word	Assemble_sta                     ; $b7 STA
>96ac	8d b3					.word	Assemble_stp                     ; $b8 STP
>96ae	bf b2					.word	Assemble_stx                     ; $b9 STX
>96b0	dd b2					.word	Assemble_sty                     ; $ba STY
>96b2	d3 b2					.word	Assemble_stz                     ; $bb STZ
>96b4	71 b3					.word	Assemble_tax                     ; $bc TAX
>96b6	6d b3					.word	Assemble_tay                     ; $bd TAY
>96b8	f6 b2					.word	Assemble_trb                     ; $be TRB
>96ba	f1 b2					.word	Assemble_tsb                     ; $bf TSB
>96bc	79 b3					.word	Assemble_tsx                     ; $c0 TSX
>96be	61 b3					.word	Assemble_txa                     ; $c1 TXA
>96c0	69 b3					.word	Assemble_txs                     ; $c2 TXS
>96c2	65 b3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96c4					StopCommand:
.96c4	a9 08		lda #$08		lda	#8
.96c6	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96c9					UnaryTimer:
.96c9	fa		plx				plx
.96ca	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.96cd					TimerToStackX:
.96cd	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero 					; zero result
.96d0	64 01		stz $01				stz 	1 							; access I/O
.96d2	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96d5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96d8	ad 5a d6	lda $d65a			lda 	$D65A
.96db	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96de	ad 5b d6	lda $d65b			lda 	$D65B
.96e1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96e5					ListConvertLine:
.96e5	9c 9d 04	stz $049d			stz 	tbOffset
.96e8	9c aa 04	stz $04aa			stz 	tokenBuffer
.96eb	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96ed	b1 30		lda ($30),y			lda 	(codePtr),y
.96ef	aa		tax				tax
.96f0	88		dey				dey
.96f1	b1 30		lda ($30),y			lda 	(codePtr),y
.96f3	20 4e af	jsr $af4e			jsr 	ConvertInt16
.96f6	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96f8	86 37		stx $37				stx 	zTemp0+1
.96fa	a0 00		ldy #$00			ldy 	#0
.96fc					_LCCopyNumber:
.96fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.96fe	20 2a 98	jsr $982a			jsr 	LCLWrite
.9701	c8		iny				iny
.9702	b1 36		lda ($36),y			lda 	(zTemp0),y
.9704	d0 f6		bne $96fc			bne 	_LCCopyNumber
.9706	20 43 99	jsr $9943			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.9709	48		pha				pha 								; save on stack
.970a	10 0c		bpl $9718			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.970c	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.970d	6d a6 04	adc $04a6			adc 	listIndent
.9710	8d a6 04	sta $04a6			sta 	listIndent
.9713	10 03		bpl $9718			bpl 	_LCNoAdjust
.9715	9c a6 04	stz $04a6			stz 	listIndent
.9718					_LCNoAdjust:
.9718	18		clc				clc		 							; work out actual indent.
.9719	ad a6 04	lda $04a6			lda 	listIndent
.971c	0a		asl a				asl 	a
.971d	69 06		adc #$06			adc 	#6
.971f	85 36		sta $36				sta 	zTemp0
.9721					_LCPadOut:
.9721	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9723	20 2a 98	jsr $982a			jsr 	LCLWrite
.9726	ad 9d 04	lda $049d			lda 	tbOffset
.9729	c5 36		cmp $36				cmp 	zTemp0
.972b	d0 f4		bne $9721			bne 	_LCPadOut
.972d	a0 03		ldy #$03			ldy 	#3 							; start position.
.972f					_LCMainLoop:
.972f	b1 30		lda ($30),y			lda 	(codePtr),y
.9731	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9733	f0 17		beq $974c			beq 	_LCExit
.9735	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9737	90 1e		bcc $9757			bcc 	_LCDoubles
.9739	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.973b	90 2a		bcc $9767			bcc 	_LCShiftPunc
.973d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.973f	90 35		bcc $9776			bcc 	_LCPunctuation
.9741	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9743	90 3e		bcc $9783			bcc 	_LCIdentifiers
.9745	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9747	90 5a		bcc $97a3			bcc 	_LCTokens
.9749	4c fe 97	jmp $97fe			jmp 	_LCData 					; 254-5 are data objects
.974c					_LCExit:
.974c	68		pla				pla 								; get old indent adjust
.974d	30 07		bmi $9756			bmi 	_LCExit2
.974f	18		clc				clc 								; add to indent if +ve
.9750	6d a6 04	adc $04a6			adc 	listIndent
.9753	8d a6 04	sta $04a6			sta 	listIndent
.9756					_LCExit2:
.9756	60		rts				rts
.9757					_LCDoubles:
.9757	48		pha				pha
.9758	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9759	29 02		and #$02			and 	#2
.975b	09 3c		ora #$3c			ora 	#60 						; make < >
.975d	20 2a 98	jsr $982a			jsr 	LCLWrite
.9760	68		pla				pla 								; restore, do lower bit
.9761	29 03		and #$03			and 	#3
.9763	09 3c		ora #$3c			ora 	#60
.9765	80 0f		bra $9776			bra		_LCPunctuation 				; print, increment, loop
.9767					_LCShiftPunc:
.9767	aa		tax				tax 								; save in X
.9768	29 07		and #$07			and 	#7 							; lower 3 bits
.976a	f0 02		beq $976e			beq 	_LCNoAdd
.976c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.976e					_LCNoAdd:
.976e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9770	90 02		bcc $9774			bcc 	_LCNoAdd2
.9772	09 20		ora #$20			ora 	#32 						; adds $20
.9774					_LCNoAdd2:
.9774	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9776					_LCPunctuation:
.9776	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.9778	d0 03		bne $977d			bne 	_LCPContinue
.977a	20 39 98	jsr $9839			jsr 	LCDeleteLastSpace
.977d					_LCPContinue:
.977d	c8		iny				iny 								; consume character
.977e	20 2a 98	jsr $982a			jsr 	LCLWrite 					; write it out.
.9781	80 ac		bra $972f			bra 	_LCMainLoop 				; go round again.
.9783					_LCIdentifiers:
.9783	18		clc				clc 								; convert to physical address
.9784	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9786	85 37		sta $37				sta 	zTemp0+1
.9788	c8		iny				iny
.9789	b1 30		lda ($30),y			lda 	(codePtr),y
.978b	85 36		sta $36				sta 	zTemp0
.978d	c8		iny				iny
.978e	5a		phy				phy 								; save position
.978f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9791					_LCOutIdentifier:
.9791	c8		iny				iny
.9792	b1 36		lda ($36),y			lda 	(zTemp0),y
.9794	29 7f		and #$7f			and 	#$7F
.9796	20 78 98	jsr $9878			jsr 	LCLLowerCase
.9799	20 2a 98	jsr $982a			jsr 	LCLWrite
.979c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.979e	10 f1		bpl $9791			bpl 	_LCOutIdentifier
.97a0	7a		ply				ply 								; restore position
.97a1	80 8c		bra $972f			bra 	_LCMainLoop
.97a3					_LCTokens:
.97a3	aa		tax				tax 								; token in X
.97a4	a9 9e		lda #$9e			lda 	#((KeywordSet2) & $FF)
.97a6	85 36		sta $36				sta 	0+zTemp0
.97a8	a9 a9		lda #$a9			lda 	#((KeywordSet2) >> 8)
.97aa	85 37		sta $37				sta 	1+zTemp0
.97ac	e0 82		cpx #$82			cpx 	#$82
.97ae	f0 16		beq $97c6			beq 	_LCUseShift
.97b0	a9 50		lda #$50			lda 	#((KeywordSet1) & $FF)
.97b2	85 36		sta $36				sta 	0+zTemp0
.97b4	a9 a9		lda #$a9			lda 	#((KeywordSet1) >> 8)
.97b6	85 37		sta $37				sta 	1+zTemp0
.97b8	e0 81		cpx #$81			cpx 	#$81
.97ba	f0 0a		beq $97c6			beq 	_LCUseShift
.97bc	a9 74		lda #$74			lda 	#((KeywordSet0) & $FF)
.97be	85 36		sta $36				sta 	0+zTemp0
.97c0	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.97c2	85 37		sta $37				sta 	1+zTemp0
.97c4	80 01		bra $97c7			bra 	_LCNoShift
.97c6					_LCUseShift:
.97c6	c8		iny				iny
.97c7					_LCNoShift:
.97c7	20 4d 98	jsr $984d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.97ca	b1 30		lda ($30),y			lda 	(codePtr),y
.97cc	aa		tax				tax 								; into X
.97cd					_LCFindText:
.97cd	ca		dex				dex
.97ce	10 0e		bpl $97de			bpl 	_LCFoundText 				; found text.
.97d0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.97d2	1a		inc a				inc 	a 							; one extra for size
.97d3	38		sec				sec 								; one extra for checksum
.97d4	65 36		adc $36				adc 	zTemp0 						; go to next token
.97d6	85 36		sta $36				sta 	zTemp0
.97d8	90 f3		bcc $97cd			bcc 	_LCFindText
.97da	e6 37		inc $37				inc 	zTemp0+1
.97dc	80 ef		bra $97cd			bra 	_LCFindText
.97de					_LCFoundText:
.97de	5a		phy				phy 								; save List position
.97df	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.97e1	aa		tax				tax
.97e2	a0 02		ldy #$02			ldy 	#2
.97e4					_LCCopyToken:
.97e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.97e6	20 78 98	jsr $9878			jsr 	LCLLowerCase
.97e9	20 2a 98	jsr $982a			jsr 	LCLWrite
.97ec	c8		iny				iny
.97ed	ca		dex				dex
.97ee	d0 f4		bne $97e4			bne 	_LCCopyToken
.97f0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.97f2	f0 05		beq $97f9			beq 	_LCNoSpace
.97f4	a9 20		lda #$20			lda 	#' '
.97f6	20 2a 98	jsr $982a			jsr 	LCLWrite
.97f9					_LCNoSpace:
.97f9	7a		ply				ply 								; restore position.
.97fa	c8		iny				iny 								; consume token
.97fb	4c 2f 97	jmp $972f			jmp 	_LCMainLoop 				; and go around again.
.97fe					_LCData:
.97fe	48		pha				pha 								; save type $FE/$FF
.97ff	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9801	c9 fe		cmp #$fe			cmp 	#$FE
.9803	f0 02		beq $9807			beq 	_LCHaveOpener
.9805	a2 22		ldx #$22			ldx 	#'"'
.9807					_LCHaveOpener:
.9807	8a		txa				txa 								; output prefix (# or ")
.9808	20 2a 98	jsr $982a			jsr 	LCLWrite
.980b	c8		iny				iny 								; get count
.980c	b1 30		lda ($30),y			lda 	(codePtr),y
.980e	aa		tax				tax
.980f	c8		iny				iny 								; point at first character
.9810					_LCOutData:
.9810	b1 30		lda ($30),y			lda 	(codePtr),y
.9812	c9 00		cmp #$00			cmp 	#0
.9814	f0 03		beq $9819			beq 	_LCNoPrint
.9816	20 2a 98	jsr $982a			jsr 	LCLWrite
.9819					_LCNoPrint:
.9819	c8		iny				iny
.981a	ca		dex				dex
.981b	d0 f3		bne $9810			bne 	_LCOutData
.981d	68		pla				pla 								; closing " required ?
.981e	c9 ff		cmp #$ff			cmp 	#$FF
.9820	d0 05		bne $9827			bne 	_LCNoQuote
.9822	a9 22		lda #$22			lda 	#'"'
.9824	20 2a 98	jsr $982a			jsr 	LCLWrite
.9827					_LCNoQuote:
.9827	4c 2f 97	jmp $972f			jmp 	_LCMainLoop
.982a					LCLWrite:
.982a	da		phx				phx
.982b	ae 9d 04	ldx $049d			ldx 	tbOffset
.982e	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9831	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9834	ee 9d 04	inc $049d			inc 	tbOffset
.9837	fa		plx				plx
.9838	60		rts				rts
.9839					LCDeleteLastSpace:
.9839	48		pha				pha
.983a	da		phx				phx
.983b	ae 9d 04	ldx $049d			ldx 	tbOffset
.983e	f0 0a		beq $984a			beq 	_LCDLSExit
.9840	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9843	c9 20		cmp #$20			cmp 	#' '
.9845	d0 03		bne $984a			bne 	_LCDLSExit
.9847	ce 9d 04	dec $049d			dec 	tbOffset
.984a					_LCDLSExit:
.984a	fa		plx				plx
.984b	68		pla				pla
.984c	60		rts				rts
.984d					LCCheckSpaceRequired:
.984d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9850	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.9853	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.9855	f0 1b		beq $9872			beq 	_LCCSRSpace
.9857	c9 29		cmp #$29			cmp 	#')'
.9859	f0 17		beq $9872			beq 	_LCCSRSpace
.985b	c9 23		cmp #$23			cmp 	#'#'
.985d	f0 13		beq $9872			beq 	_LCCSRSpace
.985f	20 78 98	jsr $9878			jsr 	LCLLowerCase 				; saves a little effort
.9862	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9864	90 11		bcc $9877			bcc 	_LCCSRExit
.9866	c9 3a		cmp #$3a			cmp 	#"9"+1
.9868	90 08		bcc $9872			bcc 	_LCCSRSpace
.986a	c9 61		cmp #$61			cmp 	#"a"
.986c	90 09		bcc $9877			bcc 	_LCCSRExit
.986e	c9 7b		cmp #$7b			cmp 	#"z"+1
.9870	b0 05		bcs $9877			bcs 	_LCCSRExit
.9872					_LCCSRSpace:
.9872	a9 20		lda #$20			lda 	#' '
.9874	20 2a 98	jsr $982a			jsr 	LCLWrite
.9877					_LCCSRExit:
.9877	60		rts				rts
.9878					LCLLowerCase:
.9878	c9 41		cmp #$41			cmp 	#"A"
.987a	90 06		bcc $9882			bcc 	_LCLLCOut
.987c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.987e	b0 02		bcs $9882			bcs 	_LCLLCOut
.9880	69 20		adc #$20			adc 	#$20
.9882					_LCLLCOut:
.9882	60		rts				rts
.9883					LCLUpperCase:
.9883	c9 61		cmp #$61			cmp 	#"a"
.9885	90 06		bcc $988d			bcc 	_LCLUCOut
.9887	c9 7b		cmp #$7b			cmp 	#"z"+1
.9889	b0 02		bcs $988d			bcs 	_LCLUCOut
.988b	e9 1f		sbc #$1f			sbc 	#$1F
.988d					_LCLUCOut:
.988d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.988e					ProcedureScan:
.988e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9890	85 30		sta $30				sta 	codePtr
.9892	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9894	85 31		sta $31				sta 	codePtr+1
.9896					_PSLoop:
.9896	b2 30		lda ($30)			lda 	(codePtr)
.9898	f0 42		beq $98dc			beq 	_PSExit
.989a	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.989c	b1 30		lda ($30),y			lda 	(codePtr),y
.989e	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.98a0	d0 2d		bne $98cf			bne 	_PSNext
.98a2	c8		iny				iny 								; get the address of the record to zTemp0 and
.98a3	b1 30		lda ($30),y			lda 	(codePtr),y
.98a5	29 c0		and #$c0			and 	#$C0
.98a7	c9 40		cmp #$40			cmp 	#$40
.98a9	d0 32		bne $98dd			bne 	_PSSyntax
.98ab	b1 30		lda ($30),y			lda 	(codePtr),y
.98ad	18		clc				clc
.98ae	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98b0	85 37		sta $37				sta 	zTemp0+1
.98b2	c8		iny				iny 								; LSB
.98b3	b1 30		lda ($30),y			lda 	(codePtr),y
.98b5	85 36		sta $36				sta 	zTemp0
.98b7	c8		iny				iny 								; character after variable call.
.98b8	98		tya				tya 								; save Y offset at +7
.98b9	a0 07		ldy #$07			ldy 	#7
.98bb	91 36		sta ($36),y			sta 	(zTemp0),y
.98bd	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.98bf	a0 02		ldy #$02			ldy 	#2
.98c1	91 36		sta ($36),y			sta 	(zTemp0),y
.98c3	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.98c5					_PSCopy:
.98c5	b5 30		lda $30,x			lda 	safePtr,x
.98c7	c8		iny				iny
.98c8	91 36		sta ($36),y			sta 	(zTemp0),y
.98ca	e8		inx				inx
.98cb	e0 04		cpx #$04			cpx 	#4
.98cd	d0 f6		bne $98c5			bne 	_PSCopy
.98cf					_PSNext:
.98cf	18		clc				clc
.98d0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98d2	65 30		adc $30				adc 	codePtr
.98d4	85 30		sta $30				sta 	codePtr
.98d6	90 02		bcc $98da			bcc 	_CREExit
.98d8	e6 31		inc $31				inc 	codePtr+1
.98da					_CREExit:
.98da	80 ba		bra $9896			bra 	_PSLoop
.98dc					_PSExit:
.98dc	60		rts				rts
.98dd					_PSSyntax:
.98dd	4c d8 b3	jmp $b3d8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.98e0					ScanForward:
.98e0	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.98e2	86 37		stx $37				stx 	zTemp0+1
.98e4	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.98e6					_ScanLoop:
.98e6	b1 30		lda ($30),y			lda 	(codePtr),y
.98e8	c8		iny				iny
.98e9	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.98eb	d0 0e		bne $98fb			bne 	_ScanGoNext
.98ed	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.98ef	f0 04		beq $98f5			beq 	_ScanMatch
.98f1	c5 37		cmp $37				cmp 	zTemp0+1
.98f3	d0 06		bne $98fb			bne 	_ScanGoNext
.98f5					_ScanMatch:
.98f5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.98f7	d0 01		bne $98fa			bne 	_ScanNotEndEOL
.98f9	88		dey				dey
.98fa					_ScanNotEndEOL:
.98fa	60		rts				rts
.98fb					_ScanGoNext:
.98fb	20 00 99	jsr $9900			jsr  	ScanForwardOne
.98fe	80 e6		bra $98e6			bra 	_ScanLoop
.9900					ScanForwardOne:
.9900	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9902	90 3e		bcc $9942			bcc 	_SFWExit
.9904	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9906	90 18		bcc $9920			bcc 	_ScanSkipOne
.9908	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.990a	b0 2f		bcs $993b			bcs 	_ScanSkipData
.990c	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.990e	90 32		bcc $9942			bcc 	_SFWExit 					; if not, ordinary keywords.
.9910	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9912	b0 2e		bcs $9942			bcs 	_SFWExit
.9914	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9916	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9918	b0 28		bcs $9942			bcs 	_SFWExit
.991a	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.991c	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.991e	80 22		bra $9942			bra 	_SFWExit
.9920					_ScanSkipOne:
.9920	c8		iny				iny 								; consume the extra one.
.9921	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9923	d0 1d		bne $9942			bne 	_SFWExit
.9925	18		clc				clc
.9926	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9928	65 30		adc $30				adc 	codePtr
.992a	85 30		sta $30				sta 	codePtr
.992c	90 02		bcc $9930			bcc 	_CREExit
.992e	e6 31		inc $31				inc 	codePtr+1
.9930					_CREExit:
.9930	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9932	b2 30		lda ($30)			lda 	(codePtr)
.9934	d0 0c		bne $9942			bne 	_SFWExit 					; if not zero, more to scan
.9936	a9 13		lda #$13		lda	#19
.9938	4c 85 99	jmp $9985		jmp	ErrorHandler
.993b					_ScanSkipData:
.993b	88		dey				dey 								; point at data token
.993c	c8		iny				iny
.993d	98		tya				tya
.993e	38		sec				sec
.993f	71 30		adc ($30),y			adc 	(codePtr),y
.9941	a8		tay				tay
.9942					_SFWExit:
.9942	60		rts				rts
.9943					ScanGetCurrentLineStep:
.9943	64 38		stz $38				stz 	zTemp1
.9945	a0 03		ldy #$03			ldy 	#3
.9947					_SGCLSLoop:
.9947	b1 30		lda ($30),y			lda 	(codePtr),y
.9949	c8		iny				iny
.994a	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.994c	f0 05		beq $9953			beq 	_SGCLSExit
.994e	20 00 99	jsr $9900			jsr 	ScanForwardOne
.9951	80 f4		bra $9947			bra 	_SGCLSLoop
.9953					_SGCLSExit:
.9953	a5 38		lda $38				lda 	zTemp1
.9955	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9956					Command_WHILE:
.9956	5a		phy				phy 								; save position of the test
.9957	a2 00		ldx #$00			ldx 	#0
.9959	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber 				; work out the number
.995c	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; check if zero
.995f	f0 0e		beq $996f			beq 	_WHExitLoop 				; if so exit the loop
.9961	98		tya				tya 								; position *after* test.
.9962	7a		ply				ply 								; restore position before test, at WHILE
.9963	88		dey				dey
.9964	48		pha				pha 								; push after test on the stack
.9965	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9967	20 6c a6	jsr $a66c			jsr 	StackOpen
.996a	20 b0 a6	jsr $a6b0			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.996d	7a		ply				ply 								; restore the position *after* the test
.996e	60		rts				rts
.996f					_WHExitLoop:
.996f	68		pla				pla 								; throw post loop position
.9970	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9972	aa		tax				tax
.9973	20 e0 98	jsr $98e0			jsr 	ScanForward
.9976	60		rts				rts
.9977					Command_WEND:
.9977	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9979	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.997b	20 98 a6	jsr $a698			jsr 	StackCheckFrame
.997e	20 c1 a6	jsr $a6c1			jsr 	STKLoadCodePosition 		; loop back
.9981	20 8a a6	jsr $a68a			jsr 	StackClose		 			; erase the frame
.9984	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.adf2					CheckRightBracket:
.adf2	b1 30		lda ($30),y			lda 	(codePtr),y
.adf4	c8		iny				iny
.adf5	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.adf7	d0 0f		bne $ae08			bne 	CNAFail
.adf9	60		rts				rts
.adfa					CheckComma:
.adfa	b1 30		lda ($30),y			lda 	(codePtr),y
.adfc	c8		iny				iny
.adfd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.adff	d0 07		bne $ae08			bne 	CNAFail
.ae01	60		rts				rts
.ae02					CheckNextA:
.ae02	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ae04	d0 02		bne $ae08			bne 	CNAFail
.ae06	c8		iny				iny 								; skip character
.ae07	60		rts				rts 								; and exit
.ae08					CNAFail:
.ae08	4c d8 b3	jmp $b3d8			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9985					ErrorHandler:
.9985	a8		tay				tay 								; find the error text
.9986	f0 49		beq $99d1			beq 	_EHEnd
.9988	a2 00		ldx #$00			ldx 	#0
.998a	a9 f1		lda #$f1			lda 	#((ErrorText) & $FF)
.998c	85 36		sta $36				sta 	0+zTemp0
.998e	a9 b3		lda #$b3			lda 	#((ErrorText) >> 8)
.9990	85 37		sta $37				sta 	1+zTemp0
.9992					_EHFind:
.9992	88		dey				dey 								; found the error text ?
.9993	f0 0e		beq $99a3			beq 	_EHFound
.9995					_EHFindZero:
.9995	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9997	e6 36		inc $36				inc 	zTemp0
.9999	d0 02		bne $999d			bne 	_EHFNoCarry
.999b	e6 37		inc $37				inc 	zTemp0+1
.999d					_EHFNoCarry:
.999d	c9 00		cmp #$00			cmp 	#0
.999f	d0 f4		bne $9995			bne 	_EHFindZero
.99a1	80 ef		bra $9992			bra 	_EHFind
.99a3					_EHFound:
.99a3	a5 36		lda $36				lda 	zTemp0 						; print message
.99a5	a6 37		ldx $37				ldx 	zTemp0+1
.99a7	20 de 99	jsr $99de			jsr 	PrintStringXA
.99aa	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.99ac	b1 30		lda ($30),y			lda 	(codePtr),y
.99ae	d0 05		bne $99b5			bne 	_EHAtMsg
.99b0	c8		iny				iny
.99b1	b1 30		lda ($30),y			lda 	(codePtr),y
.99b3	f0 17		beq $99cc			beq 	_EHCREnd
.99b5					_EHAtMsg:
.99b5	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.99b7	a9 d4		lda #$d4			lda 	#_AtMsg & $FF
.99b9	20 de 99	jsr $99de			jsr 	PrintStringXA
.99bc	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.99be	b1 30		lda ($30),y			lda 	(codePtr),y
.99c0	48		pha				pha
.99c1	c8		iny				iny
.99c2	b1 30		lda ($30),y			lda 	(codePtr),y
.99c4	aa		tax				tax
.99c5	68		pla				pla
.99c6	20 4e af	jsr $af4e			jsr 	ConvertInt16 				; convert XA to string
.99c9	20 de 99	jsr $99de			jsr 	PrintStringXA 				; and print it.
.99cc					_EHCREnd:
.99cc	a9 0d		lda #$0d			lda 	#13 						; new line
.99ce	20 93 b5	jsr $b593			jsr 	EXTPrintCharacter
.99d1					_EHEnd:
.99d1	4c 4f 8b	jmp $8b4f			jmp 	WarmStart
>99d4	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>99dc	20 00
.99de					PrintStringXA:
.99de	5a		phy				phy
.99df	86 37		stx $37				stx 	zTemp0+1
.99e1	85 36		sta $36				sta 	zTemp0
.99e3	a0 00		ldy #$00			ldy 	#0
.99e5					_PSXALoop:
.99e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.99e7	f0 06		beq $99ef			beq 	_PSXAExit
.99e9	20 93 b5	jsr $b593			jsr 	EXTPrintCharacter
.99ec	c8		iny				iny
.99ed	80 f6		bra $99e5			bra 	_PSXALoop
.99ef					_PSXAExit:
.99ef	7a		ply				ply
.99f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.99f1					UnaryTrue:
.99f1	fa		plx				plx
.99f2					ReturnTrue:
.99f2	a9 01		lda #$01			lda 	#1  						; set to 1
.99f4	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.99f7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.99f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99fc	60		rts				rts
.99fd					UnaryFalse:
.99fd	fa		plx				plx
.99fe					ReturnFalse:
.99fe	4c b8 a5	jmp $a5b8			jmp 	NSMSetZero 					; set it all to zero
.9a01					BinaryCompareEqual:
.9a01	fa		plx				plx
.9a02	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a05	c9 00		cmp #$00			cmp 	#0
.9a07	f0 e9		beq $99f2			beq 	ReturnTrue
.9a09	80 f3		bra $99fe			bra 	ReturnFalse
.9a0b					BinaryCompareLess:
.9a0b	fa		plx				plx
.9a0c	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a0f	c9 ff		cmp #$ff			cmp 	#$FF
.9a11	f0 df		beq $99f2			beq 	ReturnTrue
.9a13	80 e9		bra $99fe			bra 	ReturnFalse
.9a15					BinaryCompareGreater:
.9a15	fa		plx				plx
.9a16	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a19	c9 01		cmp #$01			cmp 	#1
.9a1b	f0 d5		beq $99f2			beq 	ReturnTrue
.9a1d	80 df		bra $99fe			bra 	ReturnFalse
.9a1f					BinaryCompareNotEqual:
.9a1f	fa		plx				plx
.9a20	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a23	c9 00		cmp #$00			cmp 	#0
.9a25	d0 cb		bne $99f2			bne 	ReturnTrue
.9a27	80 d5		bra $99fe			bra 	ReturnFalse
.9a29					BinaryCompareLessEqual:
.9a29	fa		plx				plx
.9a2a	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a2d	c9 01		cmp #$01			cmp 	#1
.9a2f	d0 c1		bne $99f2			bne 	ReturnTrue
.9a31	80 cb		bra $99fe			bra 	ReturnFalse
.9a33					BinaryCompareGreaterEqual:
.9a33	fa		plx				plx
.9a34	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode
.9a37	c9 ff		cmp #$ff			cmp 	#$FF
.9a39	d0 b7		bne $99f2			bne 	ReturnTrue
.9a3b	80 c1		bra $99fe			bra 	ReturnFalse
.9a3d					CompareBaseCode:
.9a3d	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; make both values if references.
.9a40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9a43	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a46	29 10		and #$10			and 	#NSTString
.9a48	d0 40		bne $9a8a			bne 	_CBCString
.9a4a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9a4d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a50	d0 3b		bne $9a8d			bne 	_CBCFloat
.9a52	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a55	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a58	29 08		and #$08			and 	#NSTFloat
.9a5a	d0 31		bne $9a8d			bne 	_CBCFloat
.9a5c	20 90 9a	jsr $9a90			jsr 	CompareFixMinusZero
.9a5f	e8		inx				inx
.9a60	20 90 9a	jsr $9a90			jsr 	CompareFixMinusZero
.9a63	ca		dex				dex
.9a64	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9a67	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9a6a	10 0b		bpl $9a77			bpl 	_CDCSameSign
.9a6c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9a6f	30 16		bmi $9a87			bmi 	_CBCLess 					; return $FF
.9a71					_CBCGreater:
.9a71	a9 01		lda #$01			lda 	#1
.9a73	60		rts				rts
.9a74					_CBCEqual:
.9a74	a9 00		lda #$00			lda 	#0
.9a76	60		rts				rts
.9a77					_CDCSameSign:
.9a77	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; unsigned subtract
.9a7a	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; or the mantissa together
.9a7d	f0 f5		beq $9a74			beq 	_CBCEqual 					; -0 == 0
.9a7f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9a82	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9a85	10 ea		bpl $9a71			bpl 	_CBCGreater
.9a87					_CBCLess:
.9a87	a9 ff		lda #$ff			lda 	#$FF
.9a89	60		rts				rts
.9a8a					_CBCString:
.9a8a	4c f6 9a	jmp $9af6			jmp 	CompareStrings
.9a8d					_CBCFloat:
.9a8d	4c 4a b0	jmp $b04a			jmp 	CompareFloat
.9a90					CompareFixMinusZero:
.9a90	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero
.9a93	d0 03		bne $9a98			bne 	_CFXMZNotZero
.9a95	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a98					_CFXMZNotZero:
.9a98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a99					StringConcat:
.9a99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a9c	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a9f	29 18		and #$18			and 	#NSBTypeMask
.9aa1	c9 10		cmp #$10			cmp 	#NSTString
.9aa3	d0 4e		bne $9af3			bne		_SCType
.9aa5	64 38		stz $38				stz 	zTemp1 						; counting total length
.9aa7	e8		inx				inx
.9aa8	20 c6 9a	jsr $9ac6			jsr 	_SCSetupZ0 					; setup for second
.9aab	20 d1 9a	jsr $9ad1			jsr 	_SCLengthZ0 				; length for second
.9aae	ca		dex				dex
.9aaf	20 c6 9a	jsr $9ac6			jsr 	_SCSetupZ0 					; setup for first
.9ab2	20 d1 9a	jsr $9ad1			jsr 	_SCLengthZ0 				; length for first
.9ab5	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9ab7	20 5c b7	jsr $b75c			jsr 	StringTempAllocate
.9aba	20 e4 9a	jsr $9ae4			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9abd	e8		inx				inx
.9abe	20 c6 9a	jsr $9ac6			jsr 	_SCSetupZ0 					; copy second out
.9ac1	20 e4 9a	jsr $9ae4			jsr 	_SCCopy
.9ac4	ca		dex				dex
.9ac5	60		rts				rts
.9ac6					_SCSetupZ0:
.9ac6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ac9	85 36		sta $36				sta 	zTemp0
.9acb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ace	85 37		sta $37				sta 	zTemp0+1
.9ad0	60		rts				rts
.9ad1					_SCLengthZ0:
.9ad1	5a		phy				phy
.9ad2	a0 00		ldy #$00			ldy 	#0
.9ad4					_SCLenLoop:
.9ad4	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ad6	f0 0a		beq $9ae2			beq 	_SCLExit
.9ad8	c8		iny				iny
.9ad9	e6 38		inc $38				inc 	zTemp1
.9adb	10 f7		bpl $9ad4			bpl		_SCLenLoop
.9add	a9 09		lda #$09		lda	#9
.9adf	4c 85 99	jmp $9985		jmp	ErrorHandler
.9ae2					_SCLExit:
.9ae2	7a		ply				ply
.9ae3	60		rts				rts
.9ae4					_SCCopy:
.9ae4	5a		phy				phy
.9ae5	a0 00		ldy #$00			ldy 	#0
.9ae7					_SCCopyLoop:
.9ae7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ae9	f0 06		beq $9af1			beq 	_SCCExit
.9aeb	20 9a b7	jsr $b79a			jsr 	StringTempWrite
.9aee	c8		iny				iny
.9aef	80 f6		bra $9ae7			bra 	_SCCopyLoop
.9af1					_SCCExit:
.9af1	7a		ply				ply
.9af2	60		rts				rts
.9af3					_SCType:
.9af3	4c e2 b3	jmp $b3e2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ae0b					IntegerDivide:
.ae0b	fa		plx				plx
.ae0c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae0f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae12	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae13	0a		asl a				asl 	a
.ae14	10 05		bpl $ae1b			bpl 	_NotRef
.ae16	48		pha				pha
.ae17	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae1a	68		pla				pla
.ae1b					_NotRef:
.ae1b	0a		asl a				asl 	a
.ae1c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae1e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae21	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae24	f0 03		beq $ae29			beq 	_IntegerCode 				; if clear, then we have two integers
.ae26	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.ae29					_IntegerCode:
.ae29	20 4b ae	jsr $ae4b			jsr 	CheckDivideZero 			; do div zero check
.ae2c	20 83 ae	jsr $ae83			jsr 	Int32Divide 				; do the division
.ae2f	20 40 af	jsr $af40			jsr 	CalculateSign 				; calculate result sign
.ae32					NSMCopyPlusTwoToZero:
.ae32	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.ae35	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ae38	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.ae3b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ae3e	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.ae41	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ae44	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.ae47	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ae4a	60		rts				rts
.ae4b					CheckDivideZero:
.ae4b	e8		inx				inx
.ae4c	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero
.ae4f	f0 02		beq $ae53			beq 	_CDVError
.ae51	ca		dex				dex
.ae52	60		rts				rts
.ae53					_CDVError:
.ae53	a9 03		lda #$03		lda	#3
.ae55	4c 85 99	jmp $9985		jmp	ErrorHandler
.ae58					IntegerModulus:
.ae58	fa		plx				plx
.ae59	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae5c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae5f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae60	0a		asl a				asl 	a
.ae61	10 05		bpl $ae68			bpl 	_NotRef
.ae63	48		pha				pha
.ae64	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae67	68		pla				pla
.ae68					_NotRef:
.ae68	0a		asl a				asl 	a
.ae69	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae6b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae6e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae71	f0 03		beq $ae76			beq 	_IntegerCode 				; if clear, then we have two integers
.ae73	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.ae76					_IntegerCode:
.ae76					IntegerModulusNoCheck:
.ae76	20 4b ae	jsr $ae4b			jsr 	CheckDivideZero 			; do div zero check
.ae79	20 83 ae	jsr $ae83			jsr 	Int32Divide 				; do the division
.ae7c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ae7f	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ae82	60		rts				rts
.ae83					Int32Divide:
.ae83	48		pha				pha 								; save AXY
.ae84	5a		phy				phy
.ae85	20 8f a5	jsr $a58f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae88	20 b4 a5	jsr $a5b4			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ae8b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ae8d					_I32DivideLoop:
.ae8d	e8		inx				inx
.ae8e	e8		inx				inx
.ae8f	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ae92	ca		dex				dex
.ae93	ca		dex				dex
.ae94	20 ce a5	jsr $a5ce			jsr 	NSMRotateLeft
.ae97	20 c3 ae	jsr $aec3			jsr 	DivideCheckSubtract 		; check if subtract possible
.ae9a	90 03		bcc $ae9f			bcc 	_I32DivideNoCarryIn
.ae9c	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ae9f					_I32DivideNoCarryIn:
.ae9f	88		dey				dey 								; loop round till division completed.
.aea0	d0 eb		bne $ae8d			bne 	_I32DivideLoop
.aea2	7a		ply				ply 								; restore AXY and exit
.aea3	68		pla				pla
.aea4	60		rts				rts
.aea5					Int32ShiftDivide:
.aea5	48		pha				pha 								; save AY
.aea6	5a		phy				phy
.aea7	e8		inx				inx 								; clear S[X+2]
.aea8	e8		inx				inx
.aea9	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.aeac	ca		dex				dex
.aead	ca		dex				dex
.aeae	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.aeb0					_I32SDLoop:
.aeb0	20 c3 ae	jsr $aec3			jsr 	DivideCheckSubtract 		; check if subtract possible
.aeb3	e8		inx				inx
.aeb4	e8		inx				inx
.aeb5	20 ce a5	jsr $a5ce			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.aeb8	ca		dex				dex
.aeb9	ca		dex				dex
.aeba	20 ce a5	jsr $a5ce			jsr 	NSMRotateLeft
.aebd	88		dey				dey 	 							; do 31 times
.aebe	d0 f0		bne $aeb0			bne 	_I32SDLoop
.aec0	7a		ply				ply 								; restore AY and exit
.aec1	68		pla				pla
.aec2	60		rts				rts
.aec3					DivideCheckSubtract:
.aec3	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.aec6	b0 04		bcs $aecc			bcs 	_DCSExit 					; if carry set, then could do, exit
.aec8	20 7a 9b	jsr $9b7a			jsr 	AddTopTwoStack 				; add it back in
.aecb	18		clc				clc 								; and return False
.aecc					_DCSExit:
.aecc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.aecd					MulInteger:
.aecd	fa		plx				plx
.aece	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aed1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aed4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aed5	0a		asl a				asl 	a
.aed6	10 05		bpl $aedd			bpl 	_NotRef
.aed8	48		pha				pha
.aed9	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aedc	68		pla				pla
.aedd					_NotRef:
.aedd	0a		asl a				asl 	a 							; put MSB of type into A:7
.aede	30 0b		bmi $aeeb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.aee0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aee3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aee6	f0 06		beq $aeee			beq 	_IntegerCode 				; if clear, then we have two integers
.aee8	4c 21 b1	jmp $b121			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.aeeb					_StringData:
.aeeb	4c ec b3	jmp $b3ec			jmp 	NotDoneError							; at least one string - don't know both are strings.
.aeee					_IntegerCode:
.aeee	20 fb ae	jsr $aefb			jsr 	MultiplyShort
.aef1	c9 00		cmp #$00			cmp 	#0
.aef3	f0 05		beq $aefa			beq 	_MIExit
.aef5	a9 04		lda #$04		lda	#4
.aef7	4c 85 99	jmp $9985		jmp	ErrorHandler
.aefa					_MIExit:
.aefa	60		rts				rts
.aefb					MultiplyShort:
.aefb	5a		phy				phy 								; save Y
.aefc	20 8f a5	jsr $a58f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aeff	20 b4 a5	jsr $a5b4			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.af02	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.af04					_I32MLoop:
.af04	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.af07	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.af0a	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.af0d	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.af10	f0 28		beq $af3a			beq 	_I32MExit 					; exit if zero
.af12	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.af15	29 01		and #$01			and 	#1
.af17	f0 0e		beq $af27			beq 	_I32MNoAdd
.af19	20 7a 9b	jsr $9b7a			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.af1c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.af1f	10 06		bpl $af27			bpl 	_I32MNoAdd
.af21					_I32ShiftRight:
.af21	20 db a5	jsr $a5db			jsr 	NSMShiftRight 				; shift S[X] right
.af24	c8		iny				iny 								; increment shift count
.af25	80 0a		bra $af31			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.af27					_I32MNoAdd:
.af27	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.af2a	70 f5		bvs $af21			bvs 	_I32ShiftRight 				; instead.
.af2c	e8		inx				inx
.af2d	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.af30	ca		dex				dex
.af31					_I32MShiftUpper:
.af31	e8		inx				inx 								; shift S[X+2] right
.af32	e8		inx				inx
.af33	20 db a5	jsr $a5db			jsr 	NSMShiftRight
.af36	ca		dex				dex
.af37	ca		dex				dex
.af38	80 ca		bra $af04			bra 	_I32MLoop 					; try again.
.af3a					_I32MExit:
.af3a	20 40 af	jsr $af40			jsr 	CalculateSign
.af3d	98		tya				tya 								; shift in A
.af3e	7a		ply				ply 								; restore Y and exit
.af3f	60		rts				rts
.af40					CalculateSign:
.af40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.af43	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.af46	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.af49	0a		asl a				asl 	a 							; shift bit 7 into carry
.af4a	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.af4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9af6					CompareStrings:
.9af6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9af9	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9afc	29 10		and #$10			and 	#NSBIsString
.9afe	f0 2c		beq $9b2c			beq 	_CSTypeError
.9b00	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9b03	85 36		sta $36				sta 	zTemp0
.9b05	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b08	85 37		sta $37				sta 	zTemp0+1
.9b0a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b0d	85 38		sta $38				sta 	zTemp1
.9b0f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b12	85 39		sta $39				sta 	zTemp1+1
.9b14	5a		phy				phy 								; save Y so we can access strings
.9b15	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9b17					_CSLoop:
.9b17	c8		iny				iny
.9b18	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9b1a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9b1c	d0 06		bne $9b24			bne 	_CSDifferent
.9b1e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9b20	d0 f5		bne $9b17			bne 	_CSLoop 					; still comparing
.9b22					_CSExit:
.9b22	7a		ply				ply 								; reached end, return zero in A from EOS
.9b23	60		rts				rts
.9b24					_CSDifferent:
.9b24	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9b26	90 fa		bcc $9b22			bcc		_CSExit
.9b28	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9b2a	80 f6		bra $9b22			bra 	_CSExit
.9b2c					_CSTypeError:
.9b2c	4c e2 b3	jmp $b3e2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9b2f					ShiftLeft:
.9b2f	38		sec				sec
.9b30	80 01		bra $9b33			bra 	ShiftMain
.9b32					ShiftRight:
.9b32	18		clc				clc
.9b33					ShiftMain:
.9b33	fa		plx				plx 								; restore X
.9b34	08		php				php 								; save direction
.9b35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b38	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b3b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b3c	0a		asl a				asl 	a
.9b3d	10 05		bpl $9b44			bpl 	_NotRef
.9b3f	48		pha				pha
.9b40	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b43	68		pla				pla
.9b44					_NotRef:
.9b44	0a		asl a				asl 	a
.9b45	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b47	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b4a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b4d	f0 03		beq $9b52			beq 	_IntegerCode 				; if clear, then we have two integers
.9b4f	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.9b52					_IntegerCode:
.9b52	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9b55	29 e0		and #$e0			and 	#$E0
.9b57	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9b5a	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9b5d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9b60	d0 13		bne $9b75			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9b62					_SMLoop:
.9b62	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9b65	30 11		bmi $9b78			bmi 	_SMExit 					; exit if done.
.9b67	28		plp				plp 								; restore direcition setting
.9b68	08		php				php
.9b69	90 05		bcc $9b70			bcc 	_SMRight
.9b6b	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; shift left if CS
.9b6e	80 f2		bra $9b62			bra 	_SMLoop
.9b70					_SMRight:
.9b70	20 db a5	jsr $a5db			jsr 	NSMShiftRight 				; shift right if CC
.9b73	80 ed		bra $9b62			bra 	_SMLoop
.9b75					_SMExit0:
.9b75	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero 					; return zero.
.9b78					_SMExit:
.9b78	28		plp				plp 								; throw direction
.9b79	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9b7a					AddTopTwoStack:
.9b7a	18		clc				clc
.9b7b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b7e	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9b81	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b84	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b87	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9b8a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b8d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b90	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b93	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b96	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b99	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b9c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b9f	60		rts				rts
.9ba0					SubTopTwoStack:
.9ba0	38		sec				sec
.9ba1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ba4	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9ba7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9baa	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bad	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9bb0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bb3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bb6	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9bb9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bbc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bbf	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9bc2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bc5	60		rts				rts
.9bc6					AddInteger:
.9bc6	fa		plx				plx
.9bc7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bca	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bcd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bce	0a		asl a				asl 	a
.9bcf	10 05		bpl $9bd6			bpl 	_NotRef
.9bd1	48		pha				pha
.9bd2	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bd5	68		pla				pla
.9bd6					_NotRef:
.9bd6	0a		asl a				asl 	a 							; put MSB of type into A:7
.9bd7	30 0b		bmi $9be4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9bd9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bdc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bdf	f0 06		beq $9be7			beq 	_IntegerCode 				; if clear, then we have two integers
.9be1	4c a9 af	jmp $afa9			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9be4					_StringData:
.9be4	4c 99 9a	jmp $9a99			jmp 	StringConcat							; at least one string - don't know both are strings.
.9be7					_IntegerCode:
.9be7					AddCode:
.9be7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9bea	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bed	10 8b		bpl $9b7a			bpl 	AddTopTwoStack
.9bef	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; do a physical subtraction
.9bf2	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9bf5	10 09		bpl $9c00			bpl 	_AddExit
.9bf7	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9bfa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bfd	20 6d a5	jsr $a56d			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9c00					_AddExit:
.9c00	60		rts				rts
.9c01					SubInteger:
.9c01	fa		plx				plx
.9c02	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c05	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c08	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c09	0a		asl a				asl 	a
.9c0a	10 05		bpl $9c11			bpl 	_NotRef
.9c0c	48		pha				pha
.9c0d	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c10	68		pla				pla
.9c11					_NotRef:
.9c11	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c12	30 0b		bmi $9c1f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c14	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c17	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c1a	f0 06		beq $9c22			beq 	_IntegerCode 				; if clear, then we have two integers
.9c1c	4c ae af	jmp $afae			jmp 	FloatingPointSub 							; otherwise at least one float.
.9c1f					_StringData:
.9c1f	4c ec b3	jmp $b3ec			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c22					_IntegerCode:
.9c22	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9c25	49 80		eor #$80			eor 	#$80
.9c27	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c2a	80 bb		bra $9be7			bra 	AddCode 					; and do the same code as add.
.9c2c					AndInteger:
.9c2c	fa		plx				plx
.9c2d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c30	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c33	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c34	0a		asl a				asl 	a
.9c35	10 05		bpl $9c3c			bpl 	_NotRef
.9c37	48		pha				pha
.9c38	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c3b	68		pla				pla
.9c3c					_NotRef:
.9c3c	0a		asl a				asl 	a
.9c3d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c3f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c42	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c45	f0 03		beq $9c4a			beq 	_IntegerCode 				; if clear, then we have two integers
.9c47	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.9c4a					_IntegerCode:
.9c4a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c4d	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9c50	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c53	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c56	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9c59	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c5c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c5f	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9c62	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c65	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c68	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9c6b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c6e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c71	60		rts				rts
.9c72					OraInteger:
.9c72	fa		plx				plx
.9c73	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c76	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c79	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c7a	0a		asl a				asl 	a
.9c7b	10 05		bpl $9c82			bpl 	_NotRef
.9c7d	48		pha				pha
.9c7e	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c81	68		pla				pla
.9c82					_NotRef:
.9c82	0a		asl a				asl 	a
.9c83	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c85	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c88	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c8b	f0 03		beq $9c90			beq 	_IntegerCode 				; if clear, then we have two integers
.9c8d	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.9c90					_IntegerCode:
.9c90	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c93	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c96	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c99	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c9c	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c9f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ca2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ca5	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9ca8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cab	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cae	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9cb1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cb4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9cb7	60		rts				rts
.9cb8					EorInteger:
.9cb8	fa		plx				plx
.9cb9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cbc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cbf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cc0	0a		asl a				asl 	a
.9cc1	10 05		bpl $9cc8			bpl 	_NotRef
.9cc3	48		pha				pha
.9cc4	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cc7	68		pla				pla
.9cc8					_NotRef:
.9cc8	0a		asl a				asl 	a
.9cc9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ccb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cce	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cd1	f0 03		beq $9cd6			beq 	_IntegerCode 				; if clear, then we have two integers
.9cd3	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.9cd6					_IntegerCode:
.9cd6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cd9	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9cdc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cdf	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9ce2	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9ce5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ce8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ceb	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9cee	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cf1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cf4	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9cf7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cfa	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9cfd	60		rts				rts
.9cfe					WordIndirect:
.9cfe	fa		plx				plx
.9cff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d02	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d05	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d06	0a		asl a				asl 	a
.9d07	10 05		bpl $9d0e			bpl 	_NotRef
.9d09	48		pha				pha
.9d0a	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d0d	68		pla				pla
.9d0e					_NotRef:
.9d0e	0a		asl a				asl 	a
.9d0f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d11	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d14	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d17	f0 03		beq $9d1c			beq 	_IntegerCode 				; if clear, then we have two integers
.9d19	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.9d1c					_IntegerCode:
.9d1c	20 e7 9b	jsr $9be7			jsr 	AddCode 					; add the two values
.9d1f	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9d21	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d24	60		rts				rts
.9d25					ByteIndirect:
.9d25	fa		plx				plx
.9d26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d29	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d2c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d2d	0a		asl a				asl 	a
.9d2e	10 05		bpl $9d35			bpl 	_NotRef
.9d30	48		pha				pha
.9d31	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d34	68		pla				pla
.9d35					_NotRef:
.9d35	0a		asl a				asl 	a
.9d36	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d38	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d3b	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d3e	f0 03		beq $9d43			beq 	_IntegerCode 				; if clear, then we have two integers
.9d40	4c e2 b3	jmp $b3e2			jmp 	TypeError 					; anything else, type mismatch.
.9d43					_IntegerCode:
.9d43	20 e7 9b	jsr $9be7			jsr 	AddCode 					; add the two values
.9d46	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9d48	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.af4e					ConvertInt16:
.af4e	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.af51	8e 10 04	stx $0410			stx 	NSMantissa1
.af54	9c 18 04	stz $0418			stz 	NSMantissa2
.af57	9c 20 04	stz $0420			stz 	NSMantissa3
.af5a	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.af5d	a2 00		ldx #$00			ldx 	#0 							; stack level
.af5f	a9 0a		lda #$0a			lda 	#10 						; base
.af61	80 00		bra $af63			bra 	ConvertInt32
.af63					ConvertInt32:
.af63	5a		phy				phy
.af64	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.af66	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.af69	10 08		bpl $af73			bpl 	_CI32NotNeg
.af6b	48		pha				pha
.af6c	a9 2d		lda #$2d			lda 	#'-'
.af6e	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.af71	c8		iny				iny
.af72	68		pla				pla
.af73					_CI32NotNeg:
.af73	20 81 af	jsr $af81			jsr 	_CI32DivideConvert 			; recursive conversion
.af76	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.af78	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.af7b	7a		ply				ply
.af7c	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.af7e	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.af80	60		rts				rts
.af81					_CI32DivideConvert:
.af81	e8		inx				inx 								; write to next slot up
.af82	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.af85	ca		dex				dex
.af86	20 83 ae	jsr $ae83			jsr 	Int32Divide 				; divide
.af89	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.af8c	48		pha				pha
.af8d	20 32 ae	jsr $ae32			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.af90	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; is it zero ?
.af93	f0 06		beq $af9b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.af95	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.af98	20 81 af	jsr $af81			jsr 	_CI32DivideConvert 			; and recusrively call.
.af9b					_CI32NoRecurse:
.af9b	68		pla				pla 								; remainder
.af9c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.af9e	90 02		bcc $afa2			bcc 	_CI32NotHex
.afa0	69 26		adc #$26			adc 	#6+32
.afa2					_CI32NotHex:
.afa2	69 30		adc #$30			adc 	#48
.afa4	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.afa7	c8		iny				iny
.afa8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9d4c					PrecedenceLevel:
>9d4c	04					.byte	 4	; $00 <<
>9d4d	02					.byte	 2	; $01 <=
>9d4e	02					.byte	 2	; $02 <>
>9d4f	00					.byte	 0	; $03 !!3
>9d50	00					.byte	 0	; $04 ><
>9d51	02					.byte	 2	; $05 >=
>9d52	04					.byte	 4	; $06 >>
>9d53	00					.byte	 0	; $07 !!7
>9d54	00					.byte	 0	; $08 !!8
>9d55	00					.byte	 0	; $09 !!9
>9d56	00					.byte	 0	; $0a !!10
>9d57	00					.byte	 0	; $0b !!11
>9d58	00					.byte	 0	; $0c !!12
>9d59	00					.byte	 0	; $0d !!13
>9d5a	00					.byte	 0	; $0e !!14
>9d5b	00					.byte	 0	; $0f !!15
>9d5c	00					.byte	 0	; $10 @
>9d5d	00					.byte	 0	; $11 !!17
>9d5e	00					.byte	 0	; $12 !!18
>9d5f	00					.byte	 0	; $13 [
>9d60	04					.byte	 4	; $14 \
>9d61	00					.byte	 0	; $15 ]
>9d62	01					.byte	 1	; $16 ^
>9d63	00					.byte	 0	; $17 _
>9d64	00					.byte	 0	; $18 `
>9d65	00					.byte	 0	; $19 !!25
>9d66	00					.byte	 0	; $1a !!26
>9d67	00					.byte	 0	; $1b {
>9d68	01					.byte	 1	; $1c |
>9d69	00					.byte	 0	; $1d }
>9d6a	00					.byte	 0	; $1e ~
>9d6b	00					.byte	 0	; $1f [7m<7F>[m
>9d6c	00					.byte	 0	; $20
>9d6d	05					.byte	 5	; $21 !
>9d6e	00					.byte	 0	; $22 "
>9d6f	00					.byte	 0	; $23 #
>9d70	05					.byte	 5	; $24 $
>9d71	04					.byte	 4	; $25 %
>9d72	01					.byte	 1	; $26 &
>9d73	00					.byte	 0	; $27 '
>9d74	00					.byte	 0	; $28 (
>9d75	00					.byte	 0	; $29 )
>9d76	04					.byte	 4	; $2a *
>9d77	03					.byte	 3	; $2b +
>9d78	00					.byte	 0	; $2c ,
>9d79	03					.byte	 3	; $2d -
>9d7a	00					.byte	 0	; $2e .
>9d7b	04					.byte	 4	; $2f /
>9d7c	00					.byte	 0	; $30 0
>9d7d	00					.byte	 0	; $31 1
>9d7e	00					.byte	 0	; $32 2
>9d7f	00					.byte	 0	; $33 3
>9d80	00					.byte	 0	; $34 4
>9d81	00					.byte	 0	; $35 5
>9d82	00					.byte	 0	; $36 6
>9d83	00					.byte	 0	; $37 7
>9d84	00					.byte	 0	; $38 8
>9d85	00					.byte	 0	; $39 9
>9d86	00					.byte	 0	; $3a :
>9d87	00					.byte	 0	; $3b ;
>9d88	02					.byte	 2	; $3c <
>9d89	02					.byte	 2	; $3d =
>9d8a	02					.byte	 2	; $3e >
>9d8b	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9d8c					EvaluateExpressionAt0:
.9d8c	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d8e					EvaluateExpression:
.9d8e	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d90					EvaluateExpressionAtPrecedence:
.9d90	48		pha				pha 								; save precedence level
.9d91	20 5f a0	jsr $a05f			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d94	68		pla				pla 								; restore precedence level.
.9d95					_EXPRLoop:
.9d95	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d97	b1 30		lda ($30),y			lda 	(codePtr),y
.9d99	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d9b	b0 25		bcs $9dc2			bcs 	_EXPRExit
.9d9d	da		phx				phx 								; read the operator precedence
.9d9e	aa		tax				tax
.9d9f	bd 4c 9d	lda $9d4c,x			lda 	PrecedenceLevel,x
.9da2	fa		plx				plx
.9da3	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9da5	f0 1b		beq $9dc2			beq 	_EXPRExit
.9da7	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9da9	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9dab	c5 37		cmp $37				cmp 	zTemp0+1
.9dad	b0 13		bcs $9dc2			bcs		_EXPRExit 					; if current >= operator exit
.9daf	48		pha				pha 								; save current precedence.
.9db0	b1 30		lda ($30),y			lda 	(codePtr),y
.9db2	c8		iny				iny
.9db3	48		pha				pha
.9db4	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9db6	e8		inx				inx 								; work out the right hand side.
.9db7	20 90 9d	jsr $9d90			jsr 	EvaluateExpressionAtPrecedence
.9dba	ca		dex				dex
.9dbb	68		pla				pla 								; get operator, call the code.
.9dbc	20 c5 9d	jsr $9dc5			jsr 	_EXPRCaller
.9dbf	68		pla				pla 								; restore precedence level
.9dc0	80 d3		bra $9d95			bra 	_EXPRLoop 					; and go round.
.9dc2					_EXPRExit:
.9dc2	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9dc4	60		rts				rts
.9dc5					_EXPRCaller:
.9dc5	da		phx				phx 								; save on stack, first thing is to restore it
.9dc6	0a		asl a				asl 	a 							; double so can use vectors into X
.9dc7	aa		tax				tax
.9dc8	7c 0c 95	jmp ($950c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.afa9					FloatingPointAdd:
.afa9	20 4a b1	jsr $b14a			jsr 	FloatPrepare 				; prepare for floats
.afac	80 0b		bra $afb9			bra 	FloatAdd
.afae					FloatingPointSub:
.afae	20 4a b1	jsr $b14a			jsr 	FloatPrepare 				; prepare for floats
.afb1					FloatSubtract:
.afb1	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.afb4	49 80		eor #$80			eor 	#$80
.afb6	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.afb9					FloatAdd:
.afb9	48		pha				pha
.afba	5a		phy				phy
.afbb	20 5b b1	jsr $b15b			jsr 	NSNormalise 				; normalise S[X]
.afbe	f0 54		beq $b014			beq 	_FAReturn1
.afc0	e8		inx				inx 								; normalise S[X+1]
.afc1	20 5b b1	jsr $b15b			jsr 	NSNormalise
.afc4	ca		dex				dex
.afc5	c9 00		cmp #$00			cmp 	#0
.afc7	f0 6f		beq $b038			beq 	_FAExit 					; if so, just return A
.afc9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.afcc	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.afcf	f0 1b		beq $afec			beq 	_FAExponentsEqual
.afd1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.afd4	a8		tay				tay
.afd5	38		sec				sec 								; do a signed comparison of the exponents.
.afd6	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.afd9	50 02		bvc $afdd			bvc 	_FANoSignedChange
.afdb	49 80		eor #$80			eor 	#$80
.afdd					_FANoSignedChange:
.afdd	29 80		and #$80			and 	#$80
.afdf	10 03		bpl $afe4			bpl 	_FAHaveMax
.afe1	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.afe4					_FAHaveMax:
.afe4	20 3b b0	jsr $b03b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.afe7	e8		inx				inx
.afe8	20 3b b0	jsr $b03b			jsr 	_FAShiftToExponent
.afeb	ca		dex				dex
.afec					_FAExponentsEqual:
.afec	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.afef	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aff2	30 10		bmi $b004			bmi 	_FADifferentSigns
.aff4	20 7a 9b	jsr $9b7a			jsr 	AddTopTwoStack 				; do the add of the mantissae
.aff7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.affa	10 3c		bpl $b038			bpl 	_FAExit 					; if no, we are done.
.affc	20 db a5	jsr $a5db			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.afff	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b002	80 34		bra $b038			bra 	_FAExit
.b004					_FADifferentSigns:
.b004	20 a0 9b	jsr $9ba0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b007	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b00a	10 2c		bpl $b038			bpl 	_FAExit 					; if no, we are done.
.b00c	20 64 a5	jsr $a564			jsr 	NSMNegate 					; netate result
.b00f	20 6d a5	jsr $a56d			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b012	80 24		bra $b038			bra 	_FAExit
.b014					_FAReturn1:
.b014	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b017	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b01a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b01d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b020	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b023	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b026	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b029	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b02c	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b02f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b032	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b035	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b038					_FAExit:
.b038	7a		ply				ply
.b039	68		pla				pla
.b03a	60		rts				rts
.b03b					_FAShiftToExponent:
.b03b					_FAShiftToExponent2:
.b03b	98		tya				tya 								; compare Y to exponent
.b03c	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b03f	f0 08		beq $b049			beq 	_FASEExit 					; exit if so.
.b041	20 db a5	jsr $a5db			jsr 	NSMShiftRight	 			; shift the mantissa right
.b044	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b047	80 f2		bra $b03b			bra 	_FAShiftToExponent2
.b049					_FASEExit:
.b049	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b04a					CompareFloat:
.b04a	20 b1 af	jsr $afb1			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b04d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b050	29 f8		and #$f8			and 	#$F8
.b052	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b055	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b058	f0 09		beq $b063			beq 	_FCExit 					; zero, so approximately identical
.b05a	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b05c	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b05f	10 02		bpl $b063			bpl 	_FCExit
.b061					_FCNegative:
.b061	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b063					_FCExit:
.b063	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b064					FDivideCommand:
.b064	fa		plx				plx	 								; restore stack position
.b065	20 4a b1	jsr $b14a			jsr 	FloatPrepare 				; prepare for floats
.b068					FloatDivide:
.b068	48		pha				pha
.b069	e8		inx				inx
.b06a	20 5b b1	jsr $b15b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b06d	ca		dex				dex
.b06e	c9 00		cmp #$00			cmp 	#0
.b070	f0 20		beq $b092			beq 	_FDZero
.b072	20 5b b1	jsr $b15b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b075	f0 19		beq $b090			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b077	20 a5 ae	jsr $aea5			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b07a	20 32 ae	jsr $ae32			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b07d	20 5b b1	jsr $b15b			jsr		NSNormalise 				; renormalise
.b080	20 40 af	jsr $af40			jsr 	CalculateSign 				; calculate result sign
.b083	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b086	38		sec				sec
.b087	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b08a	38		sec				sec
.b08b	e9 1e		sbc #$1e			sbc 	#30
.b08d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b090					_FDExit:
.b090	68		pla				pla
.b091	60		rts				rts
.b092					_FDZero:
.b092	a9 03		lda #$03		lda	#3
.b094	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b097					FloatFractionalPart:
.b097	5a		phy				phy
.b098	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b09b	29 7f		and #$7f			and 	#$7F
.b09d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0a0	20 5b b1	jsr $b15b			jsr 	NSNormalise
.b0a3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b0a6	38		sec				sec
.b0a7	e9 e0		sbc #$e0			sbc 	#$E0
.b0a9	90 31		bcc $b0dc			bcc 	_FFPExit 					; already fractional
.b0ab	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b0ad	b0 2a		bcs $b0d9			bcs 	_FFPZero
.b0af	a8		tay				tay 								; put count to do in Y
.b0b0	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b0b3	20 de b0	jsr $b0de			jsr 	_FFPPartial
.b0b6	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b0b9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b0bc	20 de b0	jsr $b0de			jsr 	_FFPPartial
.b0bf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b0c2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b0c5	20 de b0	jsr $b0de			jsr 	_FFPPartial
.b0c8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0cb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b0ce	20 de b0	jsr $b0de			jsr 	_FFPPartial
.b0d1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b0d4	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; zeroed check.
.b0d7	d0 03		bne $b0dc			bne 	_FFPExit
.b0d9					_FFPZero:
.b0d9	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.b0dc					_FFPExit:
.b0dc	7a		ply				ply
.b0dd	60		rts				rts
.b0de					_FFPPartial:
.b0de	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b0e0	f0 17		beq $b0f9			beq 	_FFFPPExit
.b0e2	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b0e4	b0 0c		bcs $b0f2			bcs 	_FFFPPWholeByte
.b0e6	5a		phy				phy
.b0e7					_FFFPPLeft:
.b0e7	0a		asl a				asl 	a
.b0e8	88		dey				dey
.b0e9	d0 fc		bne $b0e7			bne 	_FFFPPLeft
.b0eb	7a		ply				ply
.b0ec					_FFFPPRight:
.b0ec	4a		lsr a				lsr 	a
.b0ed	88		dey				dey
.b0ee	d0 fc		bne $b0ec			bne 	_FFFPPRight
.b0f0	80 07		bra $b0f9			bra 	_FFFPPExit
.b0f2					_FFFPPWholeByte:
.b0f2	98		tya				tya 								; subtract 8 from count
.b0f3	38		sec				sec
.b0f4	e9 08		sbc #$08			sbc 	#8
.b0f6	a8		tay				tay
.b0f7	a9 00		lda #$00			lda 	#0 							; and clear all
.b0f9					_FFFPPExit:
.b0f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b0fa					FloatIntegerPart:
.b0fa	48		pha				pha
.b0fb	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b0fe	f0 1f		beq $b11f			beq 	_FIPExit 					; if so do nothing
.b100	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; is it zero ?
.b103	f0 17		beq $b11c			beq 	_FIPZero 					; if so return zero.
.b105	20 5b b1	jsr $b15b			jsr 	NSNormalise 				; normalise
.b108	f0 12		beq $b11c			beq 	_FIPZero 					; normalised to zero, exit zero
.b10a					_FIPShift:
.b10a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b10d	10 08		bpl $b117			bpl 	_FIPCheckZero
.b10f	20 db a5	jsr $a5db			jsr 	NSMShiftRight 				; shift mantissa right
.b112	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b115	80 f3		bra $b10a			bra 	_FIPShift
.b117					_FIPCheckZero:
.b117	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; avoid -0 problem
.b11a	d0 03		bne $b11f			bne 	_FIPExit 					; set to zero if mantissa zero.
.b11c					_FIPZero:
.b11c	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.b11f					_FIPExit:
.b11f	68		pla				pla
.b120	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b121					FloatingPointMultiply:
.b121	20 4a b1	jsr $b14a			jsr 	FloatPrepare 				; prepare for floats
.b124					FloatMultiply:
.b124	48		pha				pha
.b125	20 5b b1	jsr $b15b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b128	f0 1b		beq $b145			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b12a	e8		inx				inx
.b12b	20 5b b1	jsr $b15b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b12e	ca		dex				dex
.b12f	c9 00		cmp #$00			cmp 	#0
.b131	f0 0f		beq $b142			beq 	_FDSetZero
.b133	20 fb ae	jsr $aefb			jsr 	MultiplyShort 				; calculate the result.
.b136	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b139	18		clc				clc
.b13a	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b13d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b140	80 03		bra $b145			bra 	_FDExit
.b142					_FDSetZero:
.b142	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero 					; return 0
.b145					_FDExit:
.b145	20 5b b1	jsr $b15b			jsr 	NSNormalise 				; normalise the result
.b148	68		pla				pla
.b149	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b14a					FloatPrepare:
.b14a	20 9e 9e	jsr $9e9e			jsr 	DereferenceTopTwo 			; dereference the top two values
.b14d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b150	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b153	29 10		and #$10			and 	#NSBIsString
.b155	d0 01		bne $b158			bne 	_FDType
.b157	60		rts				rts
.b158					_FDType:
.b158	4c e2 b3	jmp $b3e2			jmp 	TypeError
.b15b					NSNormalise:
.b15b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b15e	29 80		and #$80			and 	#$80
.b160	09 08		ora #$08			ora 	#NSTFloat
.b162	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b165	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; if zero exit
.b168	d0 09		bne $b173			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b16a	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b16d	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b170	a9 00		lda #$00			lda 	#0 							; set Z flag
.b172	60		rts				rts
.b173					_NSNormaliseOptimise:
.b173	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b176	d0 22		bne $b19a			bne 	_NSNormaliseLoop
.b178	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b17b	30 1d		bmi $b19a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b17d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b180	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b183	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b186	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b189	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b18c	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b18f	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b192	38		sec				sec
.b193	e9 08		sbc #$08			sbc 	#8
.b195	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b198	80 d9		bra $b173			bra 	_NSNormaliseOptimise
.b19a					_NSNormaliseLoop:
.b19a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b19d	70 08		bvs $b1a7			bvs 	_NSNExit 					; exit if so with Z flag clear
.b19f	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; shift mantissa left
.b1a2	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b1a5	80 f3		bra $b19a			bra 	_NSNormaliseLoop
.b1a7					_NSNExit:
.b1a7	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b1a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9dcb					AssignNumber:
.9dcb	5a		phy				phy
.9dcc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9dcf	85 36		sta $36				sta 	zTemp0
.9dd1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dd4	85 37		sta $37				sta 	zTemp0+1
.9dd6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9dd9	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ddb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dde	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9de0	c9 08		cmp #$08			cmp 	#NSTFloat
.9de2	f0 2a		beq $9e0e			beq 	_ANFloat
.9de4	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9de7	f0 05		beq $9dee			beq		_ANNotFloat
.9de9	e8		inx				inx
.9dea	20 fa b0	jsr $b0fa			jsr 	FloatIntegerPart 			; make it an integer
.9ded	ca		dex				dex
.9dee					_ANNotFloat:
.9dee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9df1	29 03		and #$03			and 	#3
.9df3	d0 05		bne $9dfa			bne 	_ANByteWord
.9df5	20 1a 9e	jsr $9e1a			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9df8	80 1e		bra $9e18			bra 	_ANExit
.9dfa					_ANByteWord:
.9dfa	48		pha				pha 								; save count
.9dfb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9dfe	92 36		sta ($36)			sta 	(zTemp0)
.9e00	68		pla				pla
.9e01	c9 01		cmp #$01			cmp	 	#1
.9e03	f0 13		beq $9e18			beq 	_ANExit
.9e05	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9e08	a0 01		ldy #$01			ldy 	#1
.9e0a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e0c	80 0a		bra $9e18			bra 	_ANExit
.9e0e					_ANFloat:
.9e0e	20 1a 9e	jsr $9e1a			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e11	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e14	a0 04		ldy #$04			ldy 	#4
.9e16	91 36		sta ($36),y			sta 	(zTemp0),y
.9e18					_ANExit:
.9e18	7a		ply				ply
.9e19	60		rts				rts
.9e1a					_ANCopy4PackSign:
.9e1a	a0 03		ldy #$03			ldy 	#3
.9e1c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9e1f	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e21	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9e24	91 36		sta ($36),y			sta 	(zTemp0),y
.9e26	88		dey				dey
.9e27	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9e2a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e2c	88		dey				dey
.9e2d	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e30	91 36		sta ($36),y			sta 	(zTemp0),y
.9e32	88		dey				dey
.9e33	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e36	91 36		sta ($36),y			sta 	(zTemp0),y
.9e38	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9e39					AssignString:
.9e39	5a		phy				phy
.9e3a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9e3d	85 38		sta $38				sta 	zTemp1
.9e3f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e42	85 39		sta $39				sta 	zTemp1+1
.9e44	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9e47	85 36		sta $36				sta 	zTemp0
.9e49	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e4c	85 37		sta $37				sta 	zTemp0+1
.9e4e	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9e50	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e52	f0 23		beq $9e77			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9e54	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9e55	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9e57	e9 02		sbc #$02			sbc 	#2
.9e59	85 3c		sta $3c				sta 	zsTemp
.9e5b	a0 01		ldy #$01			ldy 	#1
.9e5d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e5f	e9 00		sbc #$00			sbc 	#0
.9e61	85 3d		sta $3d				sta 	zsTemp+1
.9e63	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9e65					_ASGetLength:
.9e65	c8		iny				iny
.9e66	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e68	d0 fb		bne $9e65			bne 	_ASGetLength
.9e6a	98		tya				tya 								; is this length <= current length
.9e6b	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9e6d	90 20		bcc $9e8f			bcc 	_ASCopyString
.9e6f	f0 1e		beq $9e8f			beq 	_ASCopyString
.9e71	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9e73	a0 01		ldy #$01			ldy 	#1
.9e75	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e77					_ASNewStringRequired:
.9e77	e8		inx				inx 								; concrete the new string.
.9e78	20 db b6	jsr $b6db			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e7b	ca		dex				dex
.9e7c	18		clc				clc
.9e7d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e80	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e82	92 36		sta ($36)			sta 	(zTemp0)
.9e84	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e87	69 00		adc #$00			adc 	#0
.9e89	a0 01		ldy #$01			ldy 	#1
.9e8b	91 36		sta ($36),y			sta 	(zTemp0),y
.9e8d	80 0d		bra $9e9c			bra 	_ASExit
.9e8f					_ASCopyString:
.9e8f	a0 00		ldy #$00			ldy 	#0
.9e91					_ASCopyLoop:
.9e91	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e93	c8		iny				iny
.9e94	c8		iny				iny
.9e95	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e97	88		dey				dey
.9e98	c9 00		cmp #$00			cmp 	#0
.9e9a	d0 f5		bne $9e91			bne 	_ASCopyLoop
.9e9c					_ASExit:
.9e9c	7a		ply				ply
.9e9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e9e					DereferenceTopTwo:
.9e9e	e8		inx				inx
.9e9f	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; deref x+1
.9ea2	ca		dex				dex  								; falls through to deref x
.9ea3					Dereference:
.9ea3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9ea6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ea8	f0 57		beq $9f01			beq 	_DRFExit 					; not a reference
.9eaa	5a		phy				phy
.9eab	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9eae	85 36		sta $36				sta 	zTemp0
.9eb0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9eb3	85 37		sta $37				sta 	zTemp0+1
.9eb5	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9eb8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9eba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ebd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9ec0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9ec2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9ec4	f0 0f		beq $9ed5			beq 	_DRFDereferenceTwo
.9ec6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9ec8	f0 39		beq $9f03			beq 	_DRFFull
.9eca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9ecd	29 03		and #$03			and 	#3
.9ecf	f0 32		beq $9f03			beq 	_DRFFull 					; the whole word
.9ed1	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9ed3	f0 07		beq $9edc			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9ed5					_DRFDereferenceTwo:
.9ed5	a0 01		ldy #$01			ldy 	#1
.9ed7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ed9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9edc					_DRFClear23:
.9edc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9edf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9ee2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9ee5	29 18		and #$18			and 	#NSBTypeMask
.9ee7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9eea	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9eec	d0 12		bne $9f00			bne 	_DRFNotString
.9eee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9ef1	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9ef4	d0 0a		bne $9f00			bne 	_DRFNotString
.9ef6	a9 02		lda #$02			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9ef8	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9efb	a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9efd	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9f00					_DRFNotString
.9f00	7a		ply				ply 								; restore Y and exit
.9f01					_DRFExit:
.9f01	60		rts				rts
.9f02					_DRFNullString:
>9f02	00						.byte 	0
.9f03					_DRFFull:
.9f03	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f05	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f07	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f0a	c8		iny				iny
.9f0b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f0d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f10	c8		iny				iny
.9f11	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f13	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f16	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9f19	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9f1c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f1e	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9f21	f0 06		beq $9f29			beq 	_DRFNoExponent
.9f23	c8		iny				iny 								; if not, read the exponent as well.
.9f24	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f26	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f29					_DRFNoExponent:
.9f29	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f2c	10 0d		bpl $9f3b			bpl 	_DRFExit2 					; if not, then exit.
.9f2e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f30	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f33	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9f36	09 80		ora #$80			ora 	#NSBIsNegative
.9f38	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f3b					_DRFExit2:
.9f3b	7a		ply				ply
.9f3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9f3d					EncodeNumberStart:
.9f3d	38		sec				sec
.9f3e	80 01		bra $9f41			bra 	EncodeNumberContinue+1
.9f40					EncodeNumberContinue:
.9f40	18		clc				clc
.9f41					EncodeNumber:
.9f41	08		php				php 								; save reset.
.9f42	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9f44	f0 12		beq $9f58			beq 	_ENIsOkay
.9f46	c9 30		cmp #$30			cmp 	#"0"
.9f48	90 04		bcc $9f4e			bcc 	_ENBadNumber
.9f4a	c9 3a		cmp #$3a			cmp 	#"9"+1
.9f4c	90 0a		bcc $9f58			bcc 	_ENIsOkay
.9f4e					_ENBadNumber:
.9f4e	28		plp				plp 								; throw saved reset
.9f4f	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9f52	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f54	f0 7e		beq $9fd4			beq 	_ENConstructFinal
.9f56					_ENFail:
.9f56	18		clc				clc 								; not allowed
.9f57	60		rts				rts
.9f58					_ENIsOkay:
.9f58	28		plp				plp 								; are we restarting
.9f59	90 15		bcc $9f70			bcc 	_ENNoRestart
.9f5b					_ENStartEncode:
.9f5b	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9f5d	f0 0c		beq $9f6b			beq 	_ENFirstDP
.9f5f	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9f61	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.9f64	a9 01		lda #$01			lda 	#ESTA_Low
.9f66					_ENExitChange:
.9f66	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9f69	38		sec				sec
.9f6a	60		rts				rts
.9f6b					_ENFirstDP:
.9f6b	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero 					; clear integer part
.9f6e	80 3f		bra $9faf			bra 	_ESTASwitchFloat			; go straight to float and exi
.9f70					_ENNoRestart:
.9f70	48		pha				pha 								; save on stack.
.9f71	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9f74	c9 01		cmp #$01			cmp 	#ESTA_Low
.9f76	f0 09		beq $9f81			beq  	_ESTALowState
.9f78	c9 02		cmp #$02			cmp 	#ESTA_High
.9f7a	f0 29		beq $9fa5			beq 	_ESTAHighState
.9f7c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f7e	f0 3b		beq $9fbb			beq 	_ESTADecimalState
>9f80	db						.byte 	$DB 						; causes a break in the emulator
.9f81					_ESTALowState:
.9f81	68		pla				pla 								; get value back
.9f82	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f84	f0 29		beq $9faf			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f86	29 0f		and #$0f			and 	#15 						; make digit
.9f88	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9f8b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f8e	0a		asl a				asl 	a
.9f8f	0a		asl a				asl 	a
.9f90	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f93	0a		asl a				asl 	a
.9f94	6d 86 04	adc $0486			adc 	DigitTemp
.9f97	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f9a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f9c	90 05		bcc $9fa3			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f9e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9fa0	8d 85 04	sta $0485			sta 	EncodeState
.9fa3					_ESTANoSwitch:
.9fa3	38		sec				sec
.9fa4	60		rts				rts
.9fa5					_ESTAHighState:
.9fa5	68		pla				pla 								; get value back
.9fa6	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9fa8	f0 05		beq $9faf			beq 	_ESTASwitchFloat
.9faa	20 0e a0	jsr $a00e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9fad	38		sec				sec
.9fae	60		rts				rts
.9faf					_ESTASwitchFloat:
.9faf	9c 87 04	stz $0487			stz 	DecimalCount
.9fb2	e8		inx				inx 								; zero the decimal additive.
.9fb3	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.9fb6	ca		dex				dex
.9fb7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9fb9	80 ab		bra $9f66			bra 	_ENExitChange
.9fbb					_ESTADecimalState:
.9fbb	68		pla				pla 								; digit.
.9fbc	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9fbe	f0 96		beq $9f56			beq 	_ENFail
.9fc0	e8		inx				inx 								; put digit into fractional part of X+1
.9fc1	20 0e a0	jsr $a00e			jsr 	ESTAShiftDigitIntoMantissa
.9fc4	ca		dex				dex
.9fc5	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9fc8	ad 87 04	lda $0487			lda 	DecimalCount
.9fcb	c9 0b		cmp #$0b			cmp 	#11
.9fcd	f0 02		beq $9fd1			beq 	_ESTADSFail
.9fcf	38		sec				sec
.9fd0	60		rts				rts
.9fd1					_ESTADSFail:
.9fd1	4c dd b3	jmp $b3dd			jmp 	RangeError
.9fd4					_ENConstructFinal:
.9fd4	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9fd7	f0 33		beq $a00c			beq 	_ENCFExit 					; no decimals
.9fd9	5a		phy				phy
.9fda	0a		asl a				asl 	a 							; x 4 and CLC
.9fdb	0a		asl a				asl 	a
.9fdc	6d 87 04	adc $0487			adc 	DecimalCount
.9fdf	a8		tay				tay
.9fe0	b9 9c b3	lda $b39c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9fe3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fe6	b9 9d b3	lda $b39d,y			lda 	DecimalScalarTable-5+1,y
.9fe9	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9fec	b9 9e b3	lda $b39e,y			lda 	DecimalScalarTable-5+2,y
.9fef	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9ff2	b9 9f b3	lda $b39f,y			lda 	DecimalScalarTable-5+3,y
.9ff5	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ff8	b9 a0 b3	lda $b3a0,y			lda 	DecimalScalarTable-5+4,y
.9ffb	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ffe	a9 08		lda #$08			lda 	#NSTFloat
.a000	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a003	7a		ply				ply
.a004	e8		inx				inx 								; multiply decimal const by decimal scalar
.a005	20 24 b1	jsr $b124			jsr 	FloatMultiply
.a008	ca		dex				dex
.a009	20 b9 af	jsr $afb9			jsr 	FloatAdd 					; add to integer part.
.a00c					_ENCFExit:
.a00c	18		clc				clc 								; reject the digit.
.a00d	60		rts				rts
.a00e					ESTAShiftDigitIntoMantissa:
.a00e	29 0f		and #$0f			and 	#15 						; save digit
.a010	48		pha				pha
.a011	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a014	48		pha				pha
.a015	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a018	48		pha				pha
.a019	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a01c	48		pha				pha
.a01d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a020	48		pha				pha
.a021	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; x 2
.a024	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; x 4
.a027	18		clc				clc 								; pop mantissa and add
.a028	68		pla				pla
.a029	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a02c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a02f	68		pla				pla
.a030	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a033	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a036	68		pla				pla
.a037	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a03a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a03d	68		pla				pla
.a03e	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a041	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a044	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; x 10
.a047	68		pla				pla 								; add digit
.a048	18		clc				clc
.a049	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a04c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a04f	90 0d		bcc $a05e			bcc 	_ESTASDExit
.a051	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a054	d0 08		bne $a05e			bne 	_ESTASDExit
.a056	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a059	d0 03		bne $a05e			bne 	_ESTASDExit
.a05b	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a05e					_ESTASDExit:
.a05e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a05f					EvaluateTerm:
.a05f	b1 30		lda ($30),y			lda 	(codePtr),y
.a061	30 18		bmi $a07b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a063	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a065	b0 6f		bcs $a0d6			bcs 	_ETVariable
.a067	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a069	90 6e		bcc $a0d9			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a06b	c9 3a		cmp #$3a			cmp 	#'9'+1
.a06d	b0 6a		bcs $a0d9			bcs 	_ETPuncUnary
.a06f	20 3d 9f	jsr $9f3d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a072					_ETNumber:
.a072	c8		iny				iny 								; keep encoding until we have the numbers
.a073	b1 30		lda ($30),y			lda 	(codePtr),y
.a075	20 40 9f	jsr $9f40			jsr 	EncodeNumberContinue
.a078	b0 f8		bcs $a072			bcs 	_ETNumber 					; go back if accepted.
.a07a	60		rts				rts
.a07b					_ETCheckUnary:
.a07b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a07d	f0 41		beq $a0c0			beq 	_ETString
.a07f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a081	f0 12		beq $a095			beq 	_ETHexConstant
.a083	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a085	90 0b		bcc $a092			bcc 	_ETSyntaxError
.a087	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a089	b0 07		bcs $a092			bcs 	_ETSyntaxError
.a08b	da		phx				phx 								; push X on the stack
.a08c	0a		asl a				asl 	a 							; put vector x 2 into X
.a08d	aa		tax				tax
.a08e	c8		iny				iny 								; consume unary function token
.a08f	7c 8c 95	jmp ($958c,x)			jmp 	(VectorSet0,x) 				; and do it.
.a092					_ETSyntaxError:
.a092	4c d8 b3	jmp $b3d8			jmp 	SyntaxError
.a095					_ETHexConstant:
.a095	c8		iny				iny 								; skip #
.a096	c8		iny				iny 								; skip count
.a097	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero 					; clear result
.a09a					_ETHLoop:
.a09a	b1 30		lda ($30),y			lda 	(codePtr),y
.a09c	c8		iny				iny 								; and consume
.a09d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a09f	f0 1e		beq $a0bf			beq 	_ETHExit
.a0a1	48		pha				pha 								; save on stack.
.a0a2	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; x 2
.a0a5	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; x 4
.a0a8	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; x 8
.a0ab	20 cd a5	jsr $a5cd			jsr 	NSMShiftLeft 				; x 16
.a0ae	68		pla				pla 								; ASCII
.a0af	c9 41		cmp #$41			cmp 	#'A'
.a0b1	90 02		bcc $a0b5			bcc 	_ETHNotChar
.a0b3	e9 07		sbc #$07			sbc 	#7
.a0b5					_ETHNotChar:
.a0b5	29 0f		and #$0f			and 	#15 						; digit now
.a0b7	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a0ba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0bd	80 db		bra $a09a			bra 	_ETHLoop 					; go round.
.a0bf					_ETHExit:
.a0bf	60		rts				rts
.a0c0					_ETString:
.a0c0	c8		iny				iny 								; look at length
.a0c1	b1 30		lda ($30),y			lda 	(codePtr),y
.a0c3	48		pha				pha
.a0c4	c8		iny				iny 								; first character
.a0c5	20 02 a6	jsr $a602			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a0c8	68		pla				pla 								; restore count and save
.a0c9	85 36		sta $36				sta 	zTemp0
.a0cb	98		tya				tya 								; add length to Y to skip it.
.a0cc	18		clc				clc
.a0cd	65 36		adc $36				adc 	zTemp0
.a0cf	a8		tay				tay
.a0d0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a0d2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0d5	60		rts				rts
.a0d6					_ETVariable:
.a0d6	4c 30 a1	jmp $a130			jmp 	VariableHandler
.a0d9					_ETPuncUnary:
.a0d9	c8		iny				iny 								; consume the unary character
.a0da	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a0dc	f0 2d		beq $a10b			beq 	_ETUnaryNegate
.a0de	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a0e0	f0 39		beq $a11b			beq 	_ETDereference
.a0e2	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a0e4	f0 43		beq $a129			beq 	_ETParenthesis
.a0e6	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a0e8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a0ea	f0 06		beq $a0f2			beq 	_ETIndirection
.a0ec	e6 36		inc $36				inc 	zTemp0
.a0ee	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a0f0	d0 a0		bne $a092			bne 	_ETSyntaxError
.a0f2					_ETIndirection:
.a0f2	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a0f4	1a		inc a				inc 	a
.a0f5	48		pha				pha
.a0f6	20 5f a0	jsr $a05f			jsr 	EvaluateTerm				; evaluate the term
.a0f9	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; dereference it.
.a0fc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a0ff	d0 07		bne $a108			bne 	_ETTypeMismatch
.a101	68		pla				pla 								; indirection 1-2
.a102	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a104	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a107	60		rts				rts
.a108					_ETTypeMismatch:
.a108	4c e2 b3	jmp $b3e2			jmp 	TypeError
.a10b					_ETUnaryNegate:
.a10b	20 5f a0	jsr $a05f			jsr 	EvaluateTerm				; evaluate the term
.a10e	20 a3 9e	jsr $9ea3			jsr 	Dereference 				; dereference it.
.a111	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a114	29 10		and #$10			and 	#NSTString
.a116	d0 f0		bne $a108			bne 	_ETTypeMismatch
.a118	4c 64 a5	jmp $a564			jmp 	NSMNegate  					; just toggles the sign bit.
.a11b					_ETDereference:
.a11b	20 5f a0	jsr $a05f			jsr 	EvaluateTerm				; evaluate the term
.a11e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a121	29 20		and #$20			and 	#NSBIsReference
.a123	f0 e3		beq $a108			beq 	_ETTypeMismatch
.a125	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a128	60		rts				rts
.a129					_ETParenthesis:
.a129	20 8e 9d	jsr $9d8e			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a12c	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 			; check for )
.a12f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a130					VariableHandler:
.a130	b1 30		lda ($30),y			lda 	(codePtr),y
.a132	18		clc				clc
.a133	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a135	85 37		sta $37				sta 	zTemp0+1
.a137	c8		iny				iny
.a138	b1 30		lda ($30),y			lda 	(codePtr),y
.a13a	85 36		sta $36				sta 	zTemp0
.a13c	c8		iny				iny
.a13d	18		clc				clc									; copy variable address+3 to mantissa
.a13e	69 03		adc #$03			adc 	#3
.a140	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a143	a5 37		lda $37				lda 	zTemp0+1
.a145	69 00		adc #$00			adc 	#0
.a147	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a14a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a14d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a150	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a153	5a		phy				phy
.a154	a0 02		ldy #$02			ldy 	#2 							; read type
.a156	b1 36		lda ($36),y			lda 	(zTemp0),y
.a158	7a		ply				ply
.a159	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a15b	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a15d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a160	29 04		and #$04			and 	#NSBIsArray
.a162	d0 01		bne $a165			bne 	_VHArray
.a164	60		rts				rts
.a165					_VHArray:
.a165	e8		inx				inx
.a166	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a169	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a16b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a16e	b1 30		lda ($30),y			lda 	(codePtr),y
.a170	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a172	d0 06		bne $a17a			bne 	_VHNoSecondIndex
.a174	c8		iny				iny 								; skip the comma
.a175	e8		inx				inx
.a176	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a179	ca		dex				dex
.a17a					_VHNoSecondIndex:
.a17a	ca		dex				dex 								; set X back.
.a17b	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 			; and check the right bracket.
.a17e	5a		phy				phy 								; save position
.a17f	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a181	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a183	f0 6b		beq $a1f0			beq 	_VHBadIndex
.a185	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a188	85 3e		sta $3e				sta 	zaTemp
.a18a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a18d	85 3f		sta $3f				sta 	zaTemp+1
.a18f	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a191	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a193	f0 02		beq $a197			beq 	_VHHas2Mask
.a195	a9 ff		lda #$ff			lda 	#$FF
.a197					_VHHas2Mask:
.a197	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a19a	f0 54		beq $a1f0			beq 	_VHBadIndex
.a19c	0a		asl a				asl 	a 							; carry will be set if a second index
.a19d	90 09		bcc $a1a8			bcc 	_VHCheckFirstIndex
.a19f	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a1a1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1a3	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a1a6	90 48		bcc $a1f0			bcc 	_VHBadIndex
.a1a8					_VHCheckFirstIndex:
.a1a8	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a1aa	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1ac	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a1af	90 3f		bcc $a1f0			bcc 	_VHBadIndex
.a1b1	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a1b3	64 37		stz $37				stz 	zTemp0+1
.a1b5	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a1b8	30 0f		bmi $a1c9			bmi 	_VHNoMultiply
.a1ba	da		phx				phx
.a1bb	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a1be	48		pha				pha
.a1bf	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a1c1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1c3	1a		inc a				inc 	a 							; add 1 for zero base
.a1c4	fa		plx				plx
.a1c5	20 74 b2	jsr $b274			jsr 	Multiply8x8 				; calculate -> Z0
.a1c8	fa		plx				plx
.a1c9					_VHNoMultiply:
.a1c9	18		clc				clc
.a1ca	a5 36		lda $36				lda 	zTemp0
.a1cc	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a1cf	85 36		sta $36				sta 	zTemp0
.a1d1	a5 37		lda $37				lda 	zTemp0+1
.a1d3	69 00		adc #$00			adc 	#0
.a1d5	85 37		sta $37				sta 	zTemp0+1
.a1d7	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1da	20 e9 8c	jsr $8ce9			jsr 	ScaleByBaseType
.a1dd	18		clc				clc
.a1de	b2 3e		lda ($3e)			lda 	(zaTemp)
.a1e0	65 36		adc $36				adc 	zTemp0
.a1e2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1e5	a0 01		ldy #$01			ldy 	#1
.a1e7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1e9	65 37		adc $37				adc 	zTemp0+1
.a1eb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1ee	7a		ply				ply 								; restore position
.a1ef	60		rts				rts
.a1f0					_VHBadIndex:
.a1f0	a9 17		lda #$17		lda	#23
.a1f2	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b1aa					AbsUnary:
.b1aa	fa		plx				plx 								; restore stack pos
.b1ab	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber 				; get a float or int
.b1ae	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.b1b1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b1b4	29 7f		and #$7f			and 	#$7F
.b1b6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a1f5					AllocUnary:
.a1f5	fa		plx				plx 								; restore stack pos
.a1f6	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger		; get bytes required.
.a1f9	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.a1fc	da		phx				phx 								; save X/Y
.a1fd	5a		phy				phy
.a1fe	8a		txa				txa 								; copy X into Y
.a1ff	a8		tay				tay
.a200	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a203	aa		tax				tax
.a204	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a207	20 14 a2	jsr $a214			jsr 	AllocateXABytes 			; allocate memory
.a20a	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a20d	8a		txa				txa
.a20e	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a211	7a		ply				ply
.a212	fa		plx				plx
.a213	60		rts				rts
.a214					AllocateXABytes:
.a214	5a		phy				phy
.a215	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a218	84 36		sty $36				sty 	zTemp0
.a21a	5a		phy				phy
.a21b	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a21e	84 37		sty $37				sty 	zTemp0+1
.a220	5a		phy				phy
.a221	18		clc				clc 								; add to low memory pointer
.a222	6d 8c 04	adc $048c			adc 	lowMemPtr
.a225	8d 8c 04	sta $048c			sta 	lowMemPtr
.a228	8a		txa				txa
.a229	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a22c	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a22f	b0 2f		bcs $a260			bcs 	CISSMemory
.a231	20 52 a2	jsr $a252			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a234					_ClearMemory:
.a234	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a237	c5 36		cmp $36				cmp 	zTemp0
.a239	d0 07		bne $a242			bne 	_CMClearNext
.a23b	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a23e	c5 37		cmp $37				cmp 	zTemp0+1
.a240	f0 0c		beq $a24e			beq 	_CMExit
.a242					_CMClearNext:
.a242	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a244	92 36		sta ($36)			sta 	(zTemp0)
.a246	e6 36		inc $36				inc 	zTemp0
.a248	d0 ea		bne $a234			bne 	_ClearMemory
.a24a	e6 37		inc $37				inc		zTemp0+1
.a24c	80 e6		bra $a234			bra 	_ClearMemory
.a24e					_CMExit:
.a24e	fa		plx				plx
.a24f	68		pla				pla
.a250	7a		ply				ply
.a251	60		rts				rts
.a252					CheckIdentifierStringSpace:
.a252	48		pha				pha
.a253	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a256	18		clc				clc
.a257	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a259	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a25c	b0 02		bcs $a260			bcs 	CISSMemory
.a25e	68		pla				pla
.a25f	60		rts				rts
.a260					CISSMemory:
.a260	a9 06		lda #$06		lda	#6
.a262	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b1ba					AscUnary:
.b1ba	fa		plx				plx 								; restore stack pos
.b1bb	20 03 a5	jsr $a503			jsr 	EvaluateString 				; get a string
.b1be	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b1c0	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.b1c3	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.b1c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b1c7					FracUnary:
.b1c7	fa		plx				plx 								; restore stack pos
.b1c8	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber 				; get a float or int
.b1cb	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.b1ce	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b1d1	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b1d3	f0 04		beq $b1d9			beq 	_IUZero
.b1d5	20 97 b0	jsr $b097			jsr 	FloatFractionalPart
.b1d8	60		rts				rts
.b1d9					_IUZero:
.b1d9	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.b1dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b1dd					IntUnary:
.b1dd	fa		plx				plx 								; restore stack pos
.b1de	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber 				; get a float or int
.b1e1	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.b1e4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b1e7	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b1e9	f0 03		beq $b1ee			beq 	_IUExit
.b1eb	20 fa b0	jsr $b0fa			jsr 	FloatIntegerPart
.b1ee					_IUExit:
.b1ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b1ef					LenUnary:
.b1ef	fa		plx				plx 								; restore stack pos
.b1f0	20 03 a5	jsr $a503			jsr 	EvaluateString 				; get a string
.b1f3	5a		phy				phy
.b1f4	a0 00		ldy #$00			ldy 	#0 							; find length
.b1f6					_LenFind:
.b1f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.b1f8	f0 06		beq $b200			beq 	_LenExit
.b1fa	c8		iny				iny
.b1fb	d0 f9		bne $b1f6			bne 	_LenFind
.b1fd	4c dd b3	jmp $b3dd			jmp 	RangeError 					; string > 255
.b200					_LenExit:
.b200	98		tya				tya
.b201	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.b204	7a		ply				ply
.b205	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.b208	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a265					Unary_Min:
.a265	a9 01		lda #$01			lda 	#1
.a267	80 02		bra $a26b			bra 	UnaryMinMaxMain
.a269					Unary_Max:
.a269	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a26b					UnaryMinMaxMain:
.a26b	fa		plx				plx 								; get index on number stack
.a26c	48		pha				pha 								; save comparator
.a26d	20 ef a4	jsr $a4ef			jsr 	EvaluateValue 				; get the first value.
.a270					_UMMMLoop:
.a270	b1 30		lda ($30),y			lda 	(codePtr),y
.a272	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a274	f0 22		beq $a298			beq 	_UMMMDone
.a276	20 fa ad	jsr $adfa			jsr 	CheckComma 					; must be a comma
.a279	e8		inx				inx
.a27a	20 ef a4	jsr $a4ef			jsr 	EvaluateValue
.a27d	ca		dex				dex
.a27e	20 8f a5	jsr $a58f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a281	e8		inx				inx
.a282	20 8f a5	jsr $a58f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a285	e8		inx				inx
.a286	20 3d 9a	jsr $9a3d			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a289	ca		dex				dex
.a28a	ca		dex				dex
.a28b	85 36		sta $36				sta 	zTemp0 						; save required result
.a28d	68		pla				pla 								; get and save comparator
.a28e	48		pha				pha
.a28f	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a291	d0 dd		bne $a270			bne 	_UMMMLoop
.a293	20 9b a2	jsr $a29b			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a296	80 d8		bra $a270			bra 	_UMMMLoop
.a298					_UMMMDone:
.a298	68		pla				pla 								; throw the comparator
.a299	c8		iny				iny 								; skip )
.a29a	60		rts				rts
.a29b					ExpCopyAboveDown:
.a29b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a29e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2a1	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a2a4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a2a7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a2aa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2ad	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a2b0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2b3	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a2b6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a2b9	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a2bc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a2bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a2c0					Unary_Not:
.a2c0	fa		plx				plx
.a2c1	20 1b a5	jsr $a51b			jsr 	EvaluateInteger 			; get integer
.a2c4	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.a2c7	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; zero mantissa ?
.a2ca	f0 04		beq $a2d0			beq 	_NotZero
.a2cc	20 b8 a5	jsr $a5b8			jsr 	NSMSetZero
.a2cf	60		rts				rts
.a2d0					_NotZero:
.a2d0	4c f2 99	jmp $99f2			jmp 	ReturnTrue
.a2d3					_UNBad:
.a2d3	4c e7 b3	jmp $b3e7			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a2d6					Unary_Random:
.a2d6	fa		plx				plx
.a2d7	20 55 a3	jsr $a355			jsr 	Random32Bit 				; get a random number
.a2da	20 3a a3	jsr $a33a			jsr 	URCopyToMantissa  			; put in mantissa
.a2dd	b1 30		lda ($30),y			lda 	(codePtr),y
.a2df	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a2e1	f0 08		beq $a2eb			beq 	_URNoModulus
.a2e3	e8		inx				inx
.a2e4	20 30 a5	jsr $a530			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a2e7	ca		dex				dex
.a2e8	20 76 ae	jsr $ae76			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a2eb					_URNoModulus:
.a2eb	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a2ee	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a2f1	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.a2f4	60		rts				rts
.a2f5					Unary_Rnd:
.a2f5	fa		plx				plx
.a2f6	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber 				; number to use.
.a2f9	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 			; closing bracket
.a2fc	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a2ff	f0 2b		beq $a32c			beq 	_URCopySeed
.a301	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a304	10 23		bpl $a329			bpl 	_URDontSeed
.a306	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a309	49 17		eor #$17			eor 	#$17
.a30b	8d 88 04	sta $0488			sta 	RandomSeed+0
.a30e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a311	49 a5		eor #$a5			eor 	#$A5
.a313	8d 89 04	sta $0489			sta 	RandomSeed+1
.a316	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a319	49 c2		eor #$c2			eor 	#$C2
.a31b	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a31e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a321	49 9d		eor #$9d			eor 	#$9D
.a323	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a326	20 55 a3	jsr $a355			jsr 	Random32Bit
.a329					_URDontSeed:
.a329	20 55 a3	jsr $a355			jsr 	Random32Bit 				; generate a number.
.a32c					_URCopySeed:
.a32c	20 3a a3	jsr $a33a			jsr 	URCopyToMantissa 			; copy into mantissa
.a32f	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a331	8d 28 04	sta $0428			sta 	NSExponent
.a334	a9 08		lda #$08			lda 	#NSTFloat
.a336	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a339	60		rts				rts
.a33a					URCopyToMantissa:
.a33a	ad 88 04	lda $0488			lda 	RandomSeed+0
.a33d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a340	ad 89 04	lda $0489			lda 	RandomSeed+1
.a343	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a346	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a349	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a34c	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a34f	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a351	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a354	60		rts				rts
.a355					Random32Bit:
.a355	5a		phy				phy
.a356	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a358	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a35b	d0 03		bne $a360			bne 	_Random1
.a35d	a8		tay				tay 								; if so do it 256 times
.a35e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a360					_Random1:
.a360	0a		asl a				asl 	a 							; LSFR RNG
.a361	2e 89 04	rol $0489			rol 	RandomSeed+1
.a364	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a367	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a36a	90 02		bcc $a36e			bcc 	_Random2
.a36c	49 c5		eor #$c5			eor 	#$C5
.a36e					_Random2:
.a36e	88		dey				dey
.a36f	d0 ef		bne $a360			bne 	_Random1
.a371	8d 88 04	sta $0488			sta 	RandomSeed+0
.a374	7a		ply				ply
.a375	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b209					SgnUnary:
.b209	fa		plx				plx 								; restore stack pos
.b20a	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber 				; get a float or int
.b20d	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.b210	20 e8 a5	jsr $a5e8			jsr 	NSMIsZero 					; if zero
.b213	f0 10		beq $b225			beq 	_SGZero  					; return Int Zero
.b215	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b218	48		pha				pha
.b219	a9 01		lda #$01			lda 	#1 							; set to 1
.b21b	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.b21e	68		pla				pla
.b21f	29 80		and #$80			and		#$80 						; copy the sign byte out
.b221	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b224	60		rts				rts
.b225	20 b8 a5	jsr $a5b8	_SGZero:jsr 	NSMSetZero
.b228	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b229					ValUnary:
.b229	fa		plx				plx 								; restore stack pos
.b22a	20 3f b2	jsr $b23f			jsr 	ValMainCode 				; do the main val() code
.b22d	b0 01		bcs $b230			bcs 	_VUError 					; couldn't convert
.b22f	60		rts				rts
.b230					_VUError:
.b230	4c e2 b3	jmp $b3e2			jmp 	TypeError
.b233					IsValUnary:
.b233	fa		plx				plx 								; restore stack pos
.b234	20 3f b2	jsr $b23f			jsr 	ValMainCode 				; do the main val() code
.b237	b0 03		bcs $b23c			bcs 	_VUBad
.b239	4c f2 99	jmp $99f2			jmp 	ReturnTrue
.b23c					_VUBad:
.b23c	4c fe 99	jmp $99fe			jmp 	ReturnFalse
.b23f					ValMainCode:
.b23f	20 03 a5	jsr $a503			jsr 	EvaluateString 				; get a string
.b242	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 			; check right bracket present
.b245	5a		phy				phy
.b246	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b248	f0 17		beq $b261			beq 	_VMCFail2
.b24a	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b24c	48		pha				pha 								; save first character
.b24d	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b24f	d0 01		bne $b252			bne 	_VMCStart
.b251	c8		iny				iny 								; skip over -
.b252					_VMCStart:
.b252	38		sec				sec 								; initialise first time round.
.b253					_VMCNext:
.b253	c8		iny				iny 								; pre-increment
.b254	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b256	f0 0c		beq $b264			beq 	_VMCSuccess 				; successful.
.b258	20 41 9f	jsr $9f41			jsr 	EncodeNumber 				; send it to the number-builder
.b25b	90 03		bcc $b260			bcc 	_VMCFail 					; if failed, give up.
.b25d	18		clc				clc 								; next time round, countinue
.b25e	80 f3		bra $b253			bra 	_VMCNext
.b260					_VMCFail:
.b260	68		pla				pla
.b261					_VMCFail2:
.b261	7a		ply				ply
.b262	38		sec				sec
.b263	60		rts				rts
.b264					_VMCSuccess:
.b264	a9 00		lda #$00			lda 	#0 							; construct final
.b266	20 41 9f	jsr $9f41			jsr 	EncodeNumber
.b269	68		pla				pla
.b26a	c9 2d		cmp #$2d			cmp 	#"-"
.b26c	d0 03		bne $b271			bne 	_VMCNotNegative
.b26e	20 64 a5	jsr $a564			jsr		NSMNegate
.b271					_VMCNotNegative:
.b271	7a		ply				ply
.b272	18		clc				clc
.b273	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a376					ChrUnary:
.a376	fa		plx				plx 								; restore stack pos
.a377	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger			; get value
.a37a	48		pha				pha
.a37b	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.a37e	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a380	20 5c b7	jsr $b75c			jsr 	StringTempAllocate
.a383	68		pla				pla 								; write number to it
.a384	20 9a b7	jsr $b79a			jsr 	StringTempWrite
.a387	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a388					SpcUnary:
.a388	fa		plx				plx 								; restore stack pos
.a389	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger			; get value
.a38c	5a		phy				phy
.a38d	48		pha				pha 								; save count
.a38e	20 5c b7	jsr $b75c			jsr 	StringTempAllocate
.a391	7a		ply				ply 								; to do count in Y
.a392					_SpcLoop:
.a392	c0 00		cpy #$00			cpy 	#0
.a394	f0 08		beq $a39e			beq 	_SpcExit
.a396	a9 20		lda #$20			lda 	#32
.a398	20 9a b7	jsr $b79a			jsr 	StringTempWrite
.a39b	88		dey				dey
.a39c	80 f4		bra $a392			bra 	_SPCLoop
.a39e					_SpcExit:
.a39e	7a		ply				ply
.a39f	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket
.a3a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a3a3					Unary_Str:
.a3a3	fa		plx				plx
.a3a4	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber  			; get number
.a3a7	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 			; closing bracket
.a3aa	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a3ac	20 c5 a3	jsr $a3c5			jsr 	ConvertNumberToString 		; do the conversion.
.a3af	a9 21		lda #$21			lda		#33 						; create buffer
.a3b1	20 5c b7	jsr $b75c			jsr 	StringTempAllocate 			; allocate memory
.a3b4	da		phx				phx
.a3b5	a2 00		ldx #$00			ldx 	#0
.a3b7					_USCopy:
.a3b7	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a3ba	20 9a b7	jsr $b79a			jsr 	StringTempWrite
.a3bd	e8		inx				inx
.a3be	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a3c1	d0 f4		bne $a3b7			bne 	_USCopy
.a3c3	fa		plx				plx
.a3c4	60		rts				rts
.a3c5					ConvertNumberToString:
.a3c5	5a		phy				phy 								; save code position
.a3c6	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a3c9	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a3cc	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a3cf	10 0a		bpl $a3db			bpl 	_CNTSNotNegative
.a3d1	29 7f		and #$7f			and 	#$7F 						; make +ve
.a3d3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3d6	a9 2d		lda #$2d			lda 	#"-"
.a3d8	20 41 a4	jsr $a441			jsr 	WriteDecimalBuffer
.a3db					_CNTSNotNegative:
.a3db	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a3de	f0 15		beq $a3f5			beq 	_CNTSNotFloat
.a3e0	e8		inx				inx 								; round up
.a3e1	a9 01		lda #$01			lda 	#1
.a3e3	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.a3e6	ca		dex				dex
.a3e7	bd 28 04	lda $0428,x			lda		NSExponent,x
.a3ea	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a3ed	a9 08		lda #$08			lda 	#NSTFloat
.a3ef	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a3f2	20 b9 af	jsr $afb9			jsr 	FloatAdd
.a3f5					_CNTSNotFloat:
.a3f5	20 23 a4	jsr $a423			jsr 	MakePlusTwoString
.a3f8	20 97 b0	jsr $b097			jsr 	FloatFractionalPart 		; get the fractional part
.a3fb	20 5b b1	jsr $b15b			jsr 	NSNormalise					; normalise , exit if zero
.a3fe	f0 21		beq $a421			beq 	_CNTSExit
.a400	a9 2e		lda #$2e			lda 	#"."
.a402	20 41 a4	jsr $a441			jsr 	WriteDecimalBuffer 			; write decimal place
.a405					_CNTSDecimal:
.a405	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a408	30 17		bmi $a421			bmi 	_CNTSExit
.a40a	e8		inx				inx 								; x 10.0
.a40b	a9 0a		lda #$0a			lda 	#10
.a40d	20 ba a5	jsr $a5ba			jsr 	NSMSetByte
.a410	a9 08		lda #$08			lda 	#NSTFloat
.a412	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a415	ca		dex				dex
.a416	20 24 b1	jsr $b124			jsr 	FloatMultiply
.a419	20 23 a4	jsr $a423			jsr 	MakePlusTwoString
.a41c	20 97 b0	jsr $b097			jsr 	FloatFractionalPart 		; get the fractional part
.a41f	80 e4		bra $a405			bra 	_CNTSDecimal 				; keep going.
.a421					_CNTSExit:
.a421	7a		ply				ply
.a422	60		rts				rts
.a423					MakePlusTwoString:
.a423	da		phx				phx
.a424	20 8f a5	jsr $a58f			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a427	e8		inx				inx 								; access it
.a428	e8		inx				inx
.a429	20 fa b0	jsr $b0fa			jsr 	FloatIntegerPart 			; make it an integer
.a42c	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a42e	20 63 af	jsr $af63			jsr 	ConvertInt32
.a431	a2 00		ldx #$00			ldx	 	#0
.a433					_MPTSCopy:
.a433	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a436	20 41 a4	jsr $a441			jsr 	WriteDecimalBuffer
.a439	e8		inx				inx
.a43a	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a43d	d0 f4		bne $a433			bne 	_MPTSCopy
.a43f	fa		plx				plx
.a440	60		rts				rts
.a441					WriteDecimalBuffer:
.a441	da		phx				phx
.a442	ae 95 04	ldx $0495			ldx 	dbOffset
.a445	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a448	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a44b	ee 95 04	inc $0495			inc 	dbOffset
.a44e	fa		plx				plx
.a44f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a450					Unary_Left:
.a450	fa		plx				plx
.a451	18		clc				clc 								; only one parameter
.a452	20 c7 a4	jsr $a4c7			jsr 	SubstringInitial 			; set up.
.a455	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a458	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a45b	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a45e	80 2c		bra $a48c			bra 	SubstringMain
.a460					Unary_Right:
.a460	fa		plx				plx
.a461	18		clc				clc 								; only one parameter
.a462	20 c7 a4	jsr $a4c7			jsr 	SubstringInitial 			; set up.
.a465	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a468	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a46b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a46e	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a471	b0 02		bcs $a475			bcs 	_URNotUnderflow
.a473	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a475					_URNotUnderFlow:
.a475	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a478	80 12		bra $a48c			bra 	SubStringMain
.a47a					Unary_Mid:
.a47a	fa		plx				plx
.a47b	38		sec				sec 								; two parameters
.a47c	20 c7 a4	jsr $a4c7			jsr 	SubstringInitial 			; set up.
.a47f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a482	f0 05		beq $a489			beq 	_UMError
.a484	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a487	80 03		bra $a48c			bra 	SubStringMain
.a489					_UMError:
.a489	4c e7 b3	jmp $b3e7			jmp 	ArgumentError
.a48c					SubStringMain:
.a48c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a48f	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a492	b0 2d		bcs $a4c1			bcs 	_SSMNull 					; if so, return an empty string.
.a494	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a497	f0 28		beq $a4c1			beq 	_SSMNull 					; return empty string.
.a499	18		clc				clc 								; add the offset +1 to the address and
.a49a	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a49d	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a4a0	85 36		sta $36				sta 	zTemp0
.a4a2	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a4a5	69 00		adc #$00			adc 	#0
.a4a7	85 37		sta $37				sta 	zTemp0+1
.a4a9					_SSMNoCarry:
.a4a9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a4ac	20 5c b7	jsr $b75c			jsr 	StringTempAllocate 			; allocate that many characters
.a4af	5a		phy				phy 								; save Y
.a4b0	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a4b2					_SSMCopy:
.a4b2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a4b4	f0 09		beq $a4bf			beq 	_SSMEString 				; no more to copy
.a4b6	20 9a b7	jsr $b79a			jsr 	StringTempWrite 			; and write it out.
.a4b9	c8		iny				iny
.a4ba	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a4bd	d0 f3		bne $a4b2			bne 	_SSMCopy
.a4bf					_SSMEString:
.a4bf	7a		ply				ply
.a4c0					_SSMExit:
.a4c0	60		rts				rts
.a4c1					_SSMNull:
.a4c1	a9 00		lda #$00			lda 	#0
.a4c3	20 5c b7	jsr $b75c			jsr 	StringTempAllocate
.a4c6	60		rts				rts
.a4c7					SubstringInitial:
.a4c7	da		phx				phx 								; save initial stack position
.a4c8	08		php				php 								; save carry on stack indicating 2 parameters
.a4c9	20 03 a5	jsr $a503			jsr 	EvaluateString 				; get a string
.a4cc	5a		phy				phy 								; calculate length to exponent.
.a4cd	a0 ff		ldy #$ff			ldy 	#$FF
.a4cf					_SIFindLength:
.a4cf	c8		iny				iny
.a4d0	b1 36		lda ($36),y			lda 	(zTemp0),y
.a4d2	d0 fb		bne $a4cf			bne 	_SIFindLength
.a4d4	98		tya				tya
.a4d5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a4d8	7a		ply				ply
.a4d9	e8		inx				inx
.a4da	20 fa ad	jsr $adfa			jsr 	CheckComma 					; comma next
.a4dd	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get next parameter
.a4e0	28		plp				plp 								; is it the last parameter ?
.a4e1	90 07		bcc $a4ea			bcc 	_SSIExit 					; if so, exit.
.a4e3	e8		inx				inx
.a4e4	20 fa ad	jsr $adfa			jsr 	CheckComma 					; comma next
.a4e7	20 50 a5	jsr $a550			jsr 	Evaluate8BitInteger 		; get last parameter
.a4ea					_SSIExit:
.a4ea	fa		plx				plx
.a4eb	20 f2 ad	jsr $adf2			jsr 	CheckRightBracket 			; check closing bracket
.a4ee	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a4ef					EvaluateValue:
.a4ef	48		pha				pha
.a4f0	20 8e 9d	jsr $9d8e			jsr		EvaluateExpression 			; expression
.a4f3	20 a3 9e	jsr $9ea3			jsr 	Dereference					; derefernce it
.a4f6	68		pla				pla
.a4f7	60		rts				rts
.a4f8					EvaluateNumber:
.a4f8	20 ef a4	jsr $a4ef			jsr 	EvaluateValue 				; get a value
.a4fb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a4fe	29 10		and #$10			and 	#NSBIsString
.a500	d0 16		bne $a518			bne 	HelperTypeError
.a502	60		rts				rts
.a503					EvaluateString:
.a503	20 ef a4	jsr $a4ef			jsr 	EvaluateValue 				; get a value
.a506	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a509	29 10		and #$10			and 	#NSBIsString
.a50b	f0 0b		beq $a518			beq 	HelperTypeError
.a50d					CopyAddressToTemp0:
.a50d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a510	85 36		sta $36				sta 	zTemp0
.a512	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a515	85 37		sta $37				sta 	zTemp0+1
.a517	60		rts				rts
.a518					HelperTypeError:
.a518	4c e2 b3	jmp $b3e2			jmp 	TypeError
.a51b					EvaluateInteger:
.a51b	20 f8 a4	jsr $a4f8			jsr 	EvaluateNumber
.a51e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a521	d0 0a		bne $a52d			bne 	HelperValueError 			; if not, it's a float.
.a523	60		rts				rts
.a524					EvaluateUnsignedInteger:
.a524	20 1b a5	jsr $a51b			jsr 	EvaluateInteger 			; check integer is +ve
.a527	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a52a	30 01		bmi $a52d			bmi 	HelperValueError
.a52c	60		rts				rts
.a52d					HelperValueError:
.a52d	4c e7 b3	jmp $b3e7			jmp 	ArgumentError
.a530					Evaluate16BitInteger:
.a530	20 24 a5	jsr $a524			jsr	 	EvaluateUnsignedInteger		; get integer
.a533	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a536	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a539	d0 f2		bne $a52d			bne 	HelperValueError
.a53b	60		rts				rts
.a53c					Evaluate16BitIntegerSigned:
.a53c	20 1b a5	jsr $a51b			jsr	 	EvaluateInteger				; get integer
.a53f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a542	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a545	d0 e6		bne $a52d			bne 	HelperValueError
.a547	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a54a	10 03		bpl $a54f			bpl 	_EISNotSigned
.a54c	20 6d a5	jsr $a56d			jsr 	NSMNegateMantissa
.a54f					_EISNotSigned:
.a54f	60		rts				rts
.a550					Evaluate8BitInteger:
.a550	20 24 a5	jsr $a524			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a553	d0 d8		bne $a52d			bne 	HelperValueError
.a555	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a558	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a55b	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a55e	d0 cd		bne $a52d			bne 	HelperValueError
.a560	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a563	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b274					Multiply8x8:
.b274	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b275	85 36		sta $36			  	sta 	zTemp0
.b277	86 37		stx $37				stx 	zTemp0+1
.b279	a9 00		lda #$00			lda 	#0
.b27b	a2 08		ldx #$08			ldx 	#8
.b27d					_M88Loop:
.b27d	90 03		bcc $b282			bcc 	_M88NoAdd
.b27f	18		clc				clc
.b280	65 37		adc $37				adc 	zTemp0+1
.b282					_M88NoAdd:
.b282	6a		ror a				ror 	a
.b283	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b285	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b286	d0 f5		bne $b27d			bne 	_M88Loop
.b288	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b28a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a564					NSMNegate:
.a564	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a567	49 80		eor #$80			eor 	#NSBIsNegative
.a569	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a56c	60		rts				rts
.a56d					NSMNegateMantissa:
.a56d	38		sec				sec
.a56e	a9 00		lda #$00			lda 	#0
.a570	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a573	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a576	a9 00		lda #$00			lda 	#0
.a578	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a57b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a57e	a9 00		lda #$00			lda 	#0
.a580	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a583	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a586	a9 00		lda #$00			lda 	#0
.a588	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a58b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a58e	60		rts				rts
.a58f					NSMShiftUpTwo:
.a58f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a592	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a595	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a598	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a59b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a59e	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a5a1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a5a4	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a5a7	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a5aa	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a5ad	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a5b0	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a5b3	60		rts				rts
.a5b4					NSMSetZeroMantissaOnly:
.a5b4	a9 00		lda #$00			lda 	#0
.a5b6	80 08		bra $a5c0			bra 	NSMSetMantissa
.a5b8					NSMSetZero:
.a5b8	a9 00		lda #$00			lda 	#0
.a5ba					NSMSetByte:
.a5ba	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a5bd	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a5c0					NSMSetMantissa:
.a5c0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a5c3	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a5c6	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a5c9	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a5cc	60		rts				rts
.a5cd					NSMShiftLeft:
.a5cd	18		clc				clc
.a5ce					NSMRotateLeft:
.a5ce	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a5d1	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a5d4	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a5d7	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a5da	60		rts				rts
.a5db					NSMShiftRight:
.a5db	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a5de	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a5e1	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a5e4	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a5e7	60		rts				rts
.a5e8					NSMIsZero:
.a5e8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a5eb	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a5ee	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a5f1	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a5f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b28b					Assemble_ora:
.b28b	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b28e	01					.byte $01
.b28f					Assemble_and:
.b28f	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b292	21					.byte $21
.b293					Assemble_eor:
.b293	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b296	41					.byte $41
.b297					Assemble_adc:
.b297	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b29a	61					.byte $61
.b29b					Assemble_sta:
.b29b	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b29e	81					.byte $81
.b29f					Assemble_lda:
.b29f	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b2a2	a1					.byte $a1
.b2a3					Assemble_cmp:
.b2a3	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b2a6	c1					.byte $c1
.b2a7					Assemble_sbc:
.b2a7	20 e2 88	jsr $88e2		jsr	AssembleGroup1
>b2aa	e1					.byte $e1
.b2ab					Assemble_asl:
.b2ab	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2ae	02					.byte $02
>b2af	75					.byte $75
.b2b0					Assemble_rol:
.b2b0	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2b3	22					.byte $22
>b2b4	75					.byte $75
.b2b5					Assemble_lsr:
.b2b5	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2b8	42					.byte $42
>b2b9	75					.byte $75
.b2ba					Assemble_ror:
.b2ba	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2bd	62					.byte $62
>b2be	75					.byte $75
.b2bf					Assemble_stx:
.b2bf	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2c2	82					.byte $82
>b2c3	50					.byte $50
.b2c4					Assemble_ldx:
.b2c4	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2c7	a2					.byte $a2
>b2c8	d0					.byte $d0
.b2c9					Assemble_dec:
.b2c9	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2cc	c2					.byte $c2
>b2cd	55					.byte $55
.b2ce					Assemble_inc:
.b2ce	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2d1	e2					.byte $e2
>b2d2	55					.byte $55
.b2d3					Assemble_stz:
.b2d3	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2d6	60					.byte $60
>b2d7	44					.byte $44
.b2d8					Assemble_bit:
.b2d8	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2db	20					.byte $20
>b2dc	55					.byte $55
.b2dd					Assemble_sty:
.b2dd	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2e0	80					.byte $80
>b2e1	54					.byte $54
.b2e2					Assemble_ldy:
.b2e2	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2e5	a0					.byte $a0
>b2e6	d5					.byte $d5
.b2e7					Assemble_cpy:
.b2e7	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2ea	c0					.byte $c0
>b2eb	d4					.byte $d4
.b2ec					Assemble_cpx:
.b2ec	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2ef	e0					.byte $e0
>b2f0	d0					.byte $d0
.b2f1					Assemble_tsb:
.b2f1	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2f4	00					.byte $00
>b2f5	50					.byte $50
.b2f6					Assemble_trb:
.b2f6	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2f9	10					.byte $10
>b2fa	50					.byte $50
.b2fb					Assemble_jsr:
.b2fb	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b2fe	14					.byte $14
>b2ff	10					.byte $10
.b300					Assemble_jmp:
.b300	20 e9 88	jsr $88e9		jsr	AssembleGroup2
>b303	40					.byte $40
>b304	10					.byte $10
.b305					Assemble_bpl:
.b305	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b308	10					.byte $10
.b309					Assemble_bmi:
.b309	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b30c	30					.byte $30
.b30d					Assemble_bvc:
.b30d	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b310	50					.byte $50
.b311					Assemble_bvs:
.b311	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b314	70					.byte $70
.b315					Assemble_bcc:
.b315	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b318	90					.byte $90
.b319					Assemble_bcs:
.b319	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b31c	b0					.byte $b0
.b31d					Assemble_bne:
.b31d	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b320	d0					.byte $d0
.b321					Assemble_beq:
.b321	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b324	f0					.byte $f0
.b325					Assemble_bra:
.b325	20 3a 89	jsr $893a		jsr	AssembleGroup3
>b328	80					.byte $80
.b329					Assemble_brk:
.b329	20 70 89	jsr $8970		jsr	AssembleGroup4
>b32c	00					.byte $00
.b32d					Assemble_php:
.b32d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b330	08					.byte $08
.b331					Assemble_clc:
.b331	20 70 89	jsr $8970		jsr	AssembleGroup4
>b334	18					.byte $18
.b335					Assemble_plp:
.b335	20 70 89	jsr $8970		jsr	AssembleGroup4
>b338	28					.byte $28
.b339					Assemble_sec:
.b339	20 70 89	jsr $8970		jsr	AssembleGroup4
>b33c	38					.byte $38
.b33d					Assemble_rti:
.b33d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b340	40					.byte $40
.b341					Assemble_pha:
.b341	20 70 89	jsr $8970		jsr	AssembleGroup4
>b344	48					.byte $48
.b345					Assemble_cli:
.b345	20 70 89	jsr $8970		jsr	AssembleGroup4
>b348	58					.byte $58
.b349					Assemble_phy:
.b349	20 70 89	jsr $8970		jsr	AssembleGroup4
>b34c	5a					.byte $5a
.b34d					Assemble_rts:
.b34d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b350	60					.byte $60
.b351					Assemble_pla:
.b351	20 70 89	jsr $8970		jsr	AssembleGroup4
>b354	68					.byte $68
.b355					Assemble_sei:
.b355	20 70 89	jsr $8970		jsr	AssembleGroup4
>b358	78					.byte $78
.b359					Assemble_ply:
.b359	20 70 89	jsr $8970		jsr	AssembleGroup4
>b35c	7a					.byte $7a
.b35d					Assemble_dey:
.b35d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b360	88					.byte $88
.b361					Assemble_txa:
.b361	20 70 89	jsr $8970		jsr	AssembleGroup4
>b364	8a					.byte $8a
.b365					Assemble_tya:
.b365	20 70 89	jsr $8970		jsr	AssembleGroup4
>b368	98					.byte $98
.b369					Assemble_txs:
.b369	20 70 89	jsr $8970		jsr	AssembleGroup4
>b36c	9a					.byte $9a
.b36d					Assemble_tay:
.b36d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b370	a8					.byte $a8
.b371					Assemble_tax:
.b371	20 70 89	jsr $8970		jsr	AssembleGroup4
>b374	aa					.byte $aa
.b375					Assemble_clv:
.b375	20 70 89	jsr $8970		jsr	AssembleGroup4
>b378	b8					.byte $b8
.b379					Assemble_tsx:
.b379	20 70 89	jsr $8970		jsr	AssembleGroup4
>b37c	ba					.byte $ba
.b37d					Assemble_iny:
.b37d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b380	c8					.byte $c8
.b381					Assemble_dex:
.b381	20 70 89	jsr $8970		jsr	AssembleGroup4
>b384	ca					.byte $ca
.b385					Assemble_cld:
.b385	20 70 89	jsr $8970		jsr	AssembleGroup4
>b388	d8					.byte $d8
.b389					Assemble_phx:
.b389	20 70 89	jsr $8970		jsr	AssembleGroup4
>b38c	da					.byte $da
.b38d					Assemble_stp:
.b38d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b390	db					.byte $db
.b391					Assemble_inx:
.b391	20 70 89	jsr $8970		jsr	AssembleGroup4
>b394	e8					.byte $e8
.b395					Assemble_nop:
.b395	20 70 89	jsr $8970		jsr	AssembleGroup4
>b398	ea					.byte $ea
.b399					Assemble_sed:
.b399	20 70 89	jsr $8970		jsr	AssembleGroup4
>b39c	f8					.byte $f8
.b39d					Assemble_plx:
.b39d	20 70 89	jsr $8970		jsr	AssembleGroup4
>b3a0	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b3a1					DecimalScalarTable:
>b3a1	66 66 66 66				.dword $66666666 ; 0.1
>b3a5	de					.byte $de
>b3a6	1f 85 eb 51				.dword $51eb851f ; 0.01
>b3aa	db					.byte $db
>b3ab	4c 37 89 41				.dword $4189374c ; 0.001
>b3af	d8					.byte $d8
>b3b0	ac 8b db 68				.dword $68db8bac ; 0.0001
>b3b4	d4					.byte $d4
>b3b5	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b3b9	d1					.byte $d1
>b3ba	83 de 1b 43				.dword $431bde83 ; 1e-06
>b3be	ce					.byte $ce
>b3bf	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b3c3	ca					.byte $ca
>b3c4	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b3c8	c7					.byte $c7
>b3c9	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b3cd	c4					.byte $c4
>b3ce	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b3d2	c0					.byte $c0
>b3d3	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b3d7	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b3d8					SyntaxError:
.b3d8	a9 02		lda #$02		lda	#2
.b3da	4c 85 99	jmp $9985		jmp	ErrorHandler
.b3dd					RangeError:
.b3dd	a9 04		lda #$04		lda	#4
.b3df	4c 85 99	jmp $9985		jmp	ErrorHandler
.b3e2					TypeError:
.b3e2	a9 05		lda #$05		lda	#5
.b3e4	4c 85 99	jmp $9985		jmp	ErrorHandler
.b3e7					ArgumentError:
.b3e7	a9 07		lda #$07		lda	#7
.b3e9	4c 85 99	jmp $9985		jmp	ErrorHandler
.b3ec					NotDoneError:
.b3ec	a9 0c		lda #$0c		lda	#12
.b3ee	4c 85 99	jmp $9985		jmp	ErrorHandler
.b3f1					ErrorText:
>b3f1	42 72 65 61 6b 00			.text	"Break",0
>b3f7	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b3ff	72 72 6f 72 00
>b404	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b40c	20 62 79 20 7a 65 72 6f 00
>b415	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b41d	61 6e 67 65 00
>b422	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b42a	6d 61 74 63 68 00
>b430	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b438	65 6d 6f 72 79 00
>b43e	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b446	61 72 67 75 6d 65 6e 74 00
>b44f	53 74 6f 70 00				.text	"Stop",0
>b454	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b45c	6f 6f 20 6c 6f 6e 67 00
>b464	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b46c	6e 20 66 61 69 6c 65 64 00
>b475	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b47d	61 74 61 00
>b481	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b489	65 6e 74 65 64 00
>b48f	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b497	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b4a3	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b4ab	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b4b8	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b4c0	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b4cd	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b4d5	68 6f 75 74 20 57 68 69 6c 65 00
>b4e0	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b4e8	68 6f 75 74 20 46 6f 72 00
>b4f1	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b4f9	61 63 6b 20 66 75 6c 6c 00
>b502	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b50a	75 63 74 75 72 65 00
>b511	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b519	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b526	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b52e	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b53c	41 72 72 61 79 20 73 69			.text	"Array size",0
>b544	7a 65 00
>b547	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b54f	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b557	42 75 69 6c 74 20 57 65			.text "Built Wednesday 26-Oct-2022. Build 2259."
>b55f	64 6e 65 73 64 61 79 20 32 36 2d 4f 63 74 2d 32
>b56f	30 32 32 2e 20 42 75 69 6c 64 20 32 32 35 39 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b57f					EXTInitialise:
.b57f	64 01		stz $01				stz 	1 							; Access I/O
.b581	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b584	9c 08 d0	stz $d008			stz 	$D008
.b587	9c 09 d0	stz $d009			stz 	$D009
.b58a	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b58c	8d 58 d6	sta $d658			sta 	$D658
.b58f	60		rts				rts
.b590					EXTClearScreen:
.b590	4c ea ff	jmp $ffea			jmp 	$FFEA
.b593					EXTPrintCharacter:
.b593	48		pha				pha
.b594	da		phx				phx
.b595	5a		phy				phy
.b596	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b599	7a		ply				ply
.b59a	fa		plx				plx
.b59b	68		pla				pla
.b59c	60		rts				rts
.b59d					EXTInputSingleCharacter:
.b59d	da		phx				phx
.b59e	5a		phy				phy
.b59f					_EISCWait:
.b59f	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b5a2	c9 00		cmp #$00			cmp 	#0
.b5a4	f0 f9		beq $b59f			beq 	_EISCWait
.b5a6	7a		ply				ply
.b5a7	fa		plx				plx
.b5a8	60		rts				rts
.b5a9					EXTInputLine:
.b5a9	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b5ab					_ILLoop:
.b5ab	da		phx				phx 								; read character in
.b5ac	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b5af	fa		plx				plx
.b5b0	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b5b2	f0 12		beq $b5c6			beq 	_ILBackspace
.b5b4	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b5b6	f0 15		beq $b5cd			beq 	_ILExit
.b5b8	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b5ba	90 ef		bcc $b5ab			bcc 	_ILLoop
.b5bc	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b5be	f0 eb		beq $b5ab			beq 	_ILLoop
.b5c0	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b5c3	e8		inx				inx
.b5c4	80 e5		bra $b5ab			bra 	_ILLoop
.b5c6					_ILBackspace:
.b5c6	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b5c8	f0 e1		beq $b5ab			beq 	_ILLoop
.b5ca	ca		dex				dex 								; back one.
.b5cb	80 de		bra $b5ab			bra 	_ILLoop
.b5cd					_ILExit:
.b5cd	20 93 b5	jsr $b593			jsr 	EXTPrintCharacter
.b5d0	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b5d3	60		rts				rts
.b5d4					EXTBreakCheck:
.b5d4	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b5d7					EXTReadController:
.b5d7	da		phx				phx
.b5d8	a2 00		ldx #$00			ldx 	#0
.b5da	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b5dc	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b5df	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b5e1	f0 04		beq $b5e7			beq 	_NoSet1
.b5e3	8a		txa				txa
.b5e4	09 01		ora #$01			ora 	#1
.b5e6	aa		tax				tax
.b5e7					_NoSet1:
.b5e7	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b5e9	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b5ec	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b5ee	f0 04		beq $b5f4			beq 	_NoSet1
.b5f0	8a		txa				txa
.b5f1	09 02		ora #$02			ora 	#2
.b5f3	aa		tax				tax
.b5f4					_NoSet1:
.b5f4	a9 06		lda #$06			lda 	#(($32) >> 3)
.b5f6	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b5f9	29 04		and #$04			and 	#($01 << (($32) & 7))
.b5fb	f0 04		beq $b601			beq 	_NoSet1
.b5fd	8a		txa				txa
.b5fe	09 04		ora #$04			ora 	#4
.b600	aa		tax				tax
.b601					_NoSet1:
.b601	a9 04		lda #$04			lda 	#(($25) >> 3)
.b603	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b606	29 20		and #$20			and 	#($01 << (($25) & 7))
.b608	f0 04		beq $b60e			beq 	_NoSet1
.b60a	8a		txa				txa
.b60b	09 08		ora #$08			ora 	#8
.b60d	aa		tax				tax
.b60e					_NoSet1:
.b60e	a9 04		lda #$04			lda 	#(($26) >> 3)
.b610	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b613	29 40		and #$40			and 	#($01 << (($26) & 7))
.b615	f0 04		beq $b61b			beq 	_NoSet1
.b617	8a		txa				txa
.b618	09 10		ora #$10			ora 	#16
.b61a	aa		tax				tax
.b61b					_NoSet1:
.b61b	8a		txa				txa
.b61c	fa		plx				plx
.b61d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b61e					MemoryDeleteLine:
.b61e	20 3d b6	jsr $b63d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b621	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b623	a8		tay				tay
.b624					_MDDLLoop:
.b624	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b626	92 30		sta ($30)			sta 	(codePtr)
.b628	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b62a	c5 3a		cmp $3a				cmp 	zTemp2
.b62c	d0 07		bne $b635			bne 	_MDLDLNext
.b62e	a5 31		lda $31				lda 	codePtr+1
.b630	c5 3b		cmp $3b				cmp 	zTemp2+1
.b632	d0 01		bne $b635			bne 	_MDLDLNext
.b634					_MDDLExit:
.b634	60		rts				rts
.b635					_MDLDLNext:
.b635	e6 30		inc $30				inc 	codePtr						; next byte
.b637	d0 eb		bne $b624			bne 	_MDDLLoop
.b639	e6 31		inc $31				inc 	codePtr+1
.b63b	80 e7		bra $b624			bra 	_MDDLLoop
.b63d					IMemoryFindEnd:
.b63d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b63f	85 3a		sta $3a				sta 	0+zTemp2
.b641	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b643	85 3b		sta $3b				sta 	1+zTemp2
.b645					_MDLFELoop:
.b645	b2 3a		lda ($3a)			lda 	(zTemp2)
.b647	f0 0b		beq $b654			beq 	_MDLFEExit
.b649	18		clc				clc
.b64a	65 3a		adc $3a				adc 	zTemp2
.b64c	85 3a		sta $3a				sta 	zTemp2
.b64e	90 f5		bcc $b645			bcc 	_MDLFELoop
.b650	e6 3b		inc $3b				inc 	zTemp2+1
.b652	80 f1		bra $b645			bra 	_MDLFELoop
.b654					_MDLFEExit:
.b654	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b655					MemoryInsertLine:
.b655	08		php				php
.b656	20 3d b6	jsr $b63d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b659	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b65b	1a		inc a				inc 	a
.b65c	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b65e	b0 36		bcs $b696			bcs 	_MDLIError
.b660	28		plp				plp
.b661	90 08		bcc $b66b			bcc 	_MDLIFound
.b663	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b665	85 30		sta $30				sta 	codePtr
.b667	a5 3b		lda $3b				lda 	zTemp2+1
.b669	85 31		sta $31				sta 	codePtr+1
.b66b					_MDLIFound:
.b66b	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b66e	a8		tay				tay
.b66f					_MDLIInsert:
.b66f	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b671	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b673	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b675	c5 3a		cmp $3a				cmp 	zTemp2
.b677	d0 06		bne $b67f			bne 	_MDLINext
.b679	a5 31		lda $31				lda 	codePtr+1
.b67b	c5 3b		cmp $3b				cmp 	zTemp2+1
.b67d	f0 0a		beq $b689			beq 	_MDLIHaveSpace
.b67f					_MDLINext:
.b67f	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b681	d0 02		bne $b685			bne 	_MDLINoBorrow
.b683	c6 3b		dec $3b				dec 	zTemp2+1
.b685					_MDLINoBorrow:
.b685	c6 3a		dec $3a				dec 	zTemp2
.b687	80 e6		bra $b66f			bra 	_MDLIInsert
.b689					_MDLIHaveSpace:
.b689	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b68c	88		dey				dey 								; from offset-1 to 0
.b68d					_MDLICopy:
.b68d	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b690	91 30		sta ($30),y			sta 	(codePtr),y
.b692	88		dey				dey
.b693	10 f8		bpl $b68d			bpl 	_MDLICopy
.b695	60		rts				rts
.b696					_MDLIError:
.b696	a9 06		lda #$06		lda	#6
.b698	4c 85 99	jmp $9985		jmp	ErrorHandler
.b69b					MDLAppendLine:
.b69b	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b69d	85 36		sta $36				sta 	zTemp0
.b69f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6a1	85 38		sta $38				sta 	0+zTemp1
.b6a3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6a5	85 39		sta $39				sta 	1+zTemp1
.b6a7	b2 38		lda ($38)			lda 	(zTemp1)
.b6a9	d0 0a		bne $b6b5			bne 	_MDLANoInitialise
.b6ab	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6ad	8d 6c 06	sta $066c			sta 	0+AppendPointer
.b6b0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6b2	8d 6d 06	sta $066d			sta 	1+AppendPointer
.b6b5					_MDLANoInitialise:
.b6b5	18		clc				clc
.b6b6	ad 6c 06	lda $066c			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b6b9	85 38		sta $38				sta 	zTemp1
.b6bb	72 36		adc ($36)			adc 	(zTemp0)
.b6bd	8d 6c 06	sta $066c			sta 	AppendPointer
.b6c0	ad 6d 06	lda $066d			lda 	AppendPointer+1
.b6c3	85 39		sta $39				sta 	zTemp1+1
.b6c5	69 00		adc #$00			adc 	#0
.b6c7	8d 6d 06	sta $066d			sta 	AppendPointer+1
.b6ca	a0 00		ldy #$00			ldy 	#0
.b6cc					_MDLACopy:
.b6cc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b6ce	91 38		sta ($38),y			sta 	(zTemp1),y
.b6d0	c8		iny				iny
.b6d1	98		tya				tya
.b6d2	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b6d4	d0 f6		bne $b6cc			bne 	_MDLACopy
.b6d6	a9 00		lda #$00			lda 	#0 							; end of program.
.b6d8	91 38		sta ($38),y			sta 	(zTemp1),y
.b6da	60		rts				rts
.066c					AppendPointer:
>066c							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a5f5					MemoryNew:
.a5f5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5f7	85 30		sta $30				sta 	codePtr
.a5f9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5fb	85 31		sta $31				sta 	codePtr+1
.a5fd	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a5ff	92 30		sta ($30)			sta 	(codePtr)
.a601	60		rts				rts
.a602					MemoryInline:
.a602	98		tya				tya 								; put address into stack,x
.a603	18		clc				clc
.a604	65 30		adc $30				adc 	codePtr
.a606	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a609	a5 31		lda $31				lda 	codePtr+1
.a60b	69 00		adc #$00			adc 	#0
.a60d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a610	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a613	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a616	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a617					MemorySearch:
.a617	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a619	86 37		stx $37				stx 	zTemp0+1
.a61b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a61d	85 30		sta $30				sta 	codePtr
.a61f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a621	85 31		sta $31				sta 	codePtr+1
.a623					_MTAXLoop:
.a623	b2 30		lda ($30)			lda 	(codePtr)
.a625	18		clc				clc
.a626	f0 21		beq $a649			beq 	_MTAXExit 					; reached end, exit with CC.
.a628	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a62a	b1 30		lda ($30),y			lda 	(codePtr),y
.a62c	38		sec				sec
.a62d	e5 36		sbc $36				sbc 	zTemp0
.a62f	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a631	c8		iny				iny 								; do the MSB
.a632	b1 30		lda ($30),y			lda 	(codePtr),y
.a634	e5 37		sbc $37				sbc 	zTemp0+1
.a636	05 38		ora $38				ora 	zTemp1
.a638	f0 0f		beq $a649			beq 	_MTAXExit	 				; found
.a63a	b0 0d		bcs $a649			bcs 	_MTAXExit 					; current < required exit
.a63c	18		clc				clc
.a63d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a63f	65 30		adc $30				adc 	codePtr
.a641	85 30		sta $30				sta 	codePtr
.a643	90 02		bcc $a647			bcc 	_CREExit
.a645	e6 31		inc $31				inc 	codePtr+1
.a647					_CREExit:
.a647	80 da		bra $a623			bra 	_MTAXLoop
.a649					_MTAXExit:
.a649	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a64a					StackPushByte:
.a64a	48		pha				pha 								; save byte
.a64b	a5 34		lda $34				lda 	BasicStack
.a64d	d0 09		bne $a658			bne 	_SPBNoBorrow
.a64f	c6 35		dec $35				dec 	BasicStack+1
.a651	48		pha				pha
.a652	a5 35		lda $35				lda 	BasicStack+1
.a654	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a656	90 06		bcc $a65e			bcc 	_SPBMemory
.a658					_SPBNoBorrow:
.a658	c6 34		dec $34				dec 	BasicStack
.a65a	68		pla				pla 								; get back and write
.a65b	92 34		sta ($34)			sta 	(BasicStack)
.a65d	60		rts				rts
.a65e					_SPBMemory:
.a65e	a9 12		lda #$12		lda	#18
.a660	4c 85 99	jmp $9985		jmp	ErrorHandler
.a663					StackPopByte:
.a663	b2 34		lda ($34)			lda 	(BasicStack)
.a665	e6 34		inc $34				inc 	BasicStack
.a667	d0 02		bne $a66b			bne 	_SPBNoCarry
.a669	e6 35		inc $35				inc 	BasicStack+1
.a66b					_SPBNoCarry:
.a66b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a66c					StackOpen:
.a66c	48		pha				pha 								; save frame byte
.a66d	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a66f	0a		asl a				asl 	a 							; claim twice this for storage
.a670	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a672	38		sec				sec 								; so basically subtracting from
.a673	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a675	85 34		sta $34				sta 	basicStack
.a677	b0 08		bcs $a681			bcs 	_SONoBorrow
.a679	c6 35		dec $35				dec 	basicStack+1
.a67b	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a67d	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a67f	90 04		bcc $a685			bcc 	_SOMemory
.a681					_SONoBorrow:
.a681	68		pla				pla 								; get marker back and write at TOS
.a682	92 34		sta ($34)			sta 	(basicStack)
.a684	60		rts				rts
.a685					_SOMemory:
.a685	a9 12		lda #$12		lda	#18
.a687	4c 85 99	jmp $9985		jmp	ErrorHandler
.a68a					StackClose:
.a68a	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a68c	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a68e	0a		asl a				asl 	a 							; claim twice this.
.a68f	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a691	85 34		sta $34				sta 	basicStack
.a693	90 02		bcc $a697			bcc 	_SCExit
.a695	e6 35		inc $35				inc 	basicStack+1
.a697					_SCExit:
.a697	60		rts				rts
.a698					StackCheckFrame:
.a698	48		pha				pha
.a699					_StackRemoveLocals:
.a699	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a69b	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a69d	b0 05		bcs $a6a4			bcs 	_SCNoLocal
.a69f	20 99 ad	jsr $ad99			jsr 	LocalPopValue
.a6a2	80 f5		bra $a699			bra 	_StackRemoveLocals
.a6a4					_SCNoLocal:
.a6a4	68		pla				pla
.a6a5	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a6a7	29 f0		and #$f0			and 	#$F0 						; check type bits
.a6a9	d0 01		bne $a6ac			bne 	_SCFError 					; different, we have structures mixed up
.a6ab	60		rts				rts
.a6ac					_SCFError:
.a6ac	8a		txa				txa 								; report error X
.a6ad	4c 85 99	jmp $9985			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a6b0					STKSaveCodePosition:
.a6b0	5a		phy				phy
.a6b1	98		tya				tya 								; save Y
.a6b2	a0 05		ldy #$05			ldy 	#5
.a6b4	91 34		sta ($34),y			sta 	(basicStack),y
.a6b6	88		dey				dey 								; save Code Pointer
.a6b7					_STKSaveLoop:
.a6b7	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a6ba	91 34		sta ($34),y			sta 	(basicStack),y
.a6bc	88		dey				dey
.a6bd	d0 f8		bne $a6b7			bne 	_STKSaveLoop
.a6bf	7a		ply				ply
.a6c0	60		rts				rts
.a6c1					STKLoadCodePosition:
.a6c1	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a6c3					_STKLoadLoop:
.a6c3	b1 34		lda ($34),y			lda 	(basicStack),y
.a6c5	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a6c8	c8		iny				iny
.a6c9	c0 05		cpy #$05			cpy 	#5
.a6cb	d0 f6		bne $a6c3			bne 	_STKLoadLoop
.a6cd	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a6cf	a8		tay				tay
.a6d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a6d1					StackReset:
.a6d1	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a6d3	85 34		sta $34				sta 	0+basicStack
.a6d5	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a6d7	85 35		sta $35				sta 	1+basicStack
.a6d9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a6db	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a6dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b6db					StringConcrete:
.b6db	5a		phy				phy 								; save position on stack
.b6dc	20 52 a2	jsr $a252			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b6df	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b6e2	85 38		sta $38				sta 	zTemp1
.b6e4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b6e7	85 39		sta $39				sta 	zTemp1+1
.b6e9	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b6eb					_SALength:
.b6eb	c8		iny				iny
.b6ec	b1 38		lda ($38),y			lda 	(zTemp1),y
.b6ee	d0 fb		bne $b6eb			bne 	_SALength
.b6f0	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b6f2	b0 3f		bcs $b733			bcs 	_SALengthError
.b6f4	98		tya				tya 				 				; length of the new string
.b6f5	18		clc				clc
.b6f6	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b6f8	90 02		bcc $b6fc			bcc 	_SAHaveLength
.b6fa	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b6fc					_SAHaveLength:
.b6fc	48		pha				pha 								; save length.
.b6fd	38		sec				sec
.b6fe	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b700	6d 8e 04	adc $048e			adc 	StringMemory
.b703	8d 8e 04	sta $048e			sta 	StringMemory
.b706	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b708	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b70b	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b70d	6d 8f 04	adc $048f			adc 	StringMemory+1
.b710	8d 8f 04	sta $048f			sta 	StringMemory+1
.b713	85 3b		sta $3b				sta 	zTemp2+1
.b715	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b718	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b719	38		sec				sec
.b71a	e9 03		sbc #$03			sbc 	#3
.b71c	92 3a		sta ($3a)			sta 	(zTemp2)
.b71e	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b720	a0 01		ldy #$01			ldy 	#1
.b722	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b724					_SACopyNewString:
.b724	a0 00		ldy #$00			ldy 	#0
.b726					_SACopyNSLoop:
.b726	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b728	c8		iny				iny 								; write two on in string storage
.b729	c8		iny				iny
.b72a	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b72c	88		dey				dey 								; this makes it one one.
.b72d	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b72f	d0 f5		bne $b726			bne 	_SACopyNSLoop
.b731	7a		ply				ply
.b732	60		rts				rts
.b733					_SALengthError:
.b733	a9 09		lda #$09		lda	#9
.b735	4c 85 99	jmp $9985		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b738					StringSystemInitialise:
.b738	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b73a	8d 8e 04	sta $048e			sta 	0+StringMemory
.b73d	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b73f	8d 8f 04	sta $048f			sta 	1+StringMemory
.b742	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b745	60		rts				rts
.b746					StringSpaceInitialise:
.b746	20 52 a2	jsr $a252			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b749	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b74b	8d 90 04	sta $0490			sta 	StringInitialised
.b74e	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b751	8d 91 04	sta $0491			sta 	StringTempPointer
.b754	ad 8f 04	lda $048f			lda 	StringMemory+1
.b757	3a		dec a				dec 	a
.b758	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b75b	60		rts				rts
.b75c					StringTempAllocate:
.b75c	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b75e	b0 35		bcs $b795			bcs 	_STALength
.b760	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b763	30 05		bmi $b76a			bmi 	_STAAllocate
.b765	48		pha				pha 								; save value to subtract.
.b766	20 46 b7	jsr $b746			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b769	68		pla				pla 								; restore it
.b76a					_STAAllocate:
.b76a	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b76c	18		clc				clc  								; deliberate allows one more
.b76d	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b770	8d 91 04	sta $0491			sta 	StringTempPointer
.b773	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b776	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b778	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b77b	69 ff		adc #$ff			adc 	#$FF
.b77d	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b780	85 3d		sta $3d				sta 	zsTemp+1
.b782	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b785	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b788	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b78b	a9 10		lda #$10			lda 	#NSTString
.b78d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b790	a9 00		lda #$00			lda 	#0 							; clear the target string
.b792	92 3c		sta ($3c)			sta 	(zsTemp)
.b794	60		rts				rts
.b795					_STALength:
.b795	a9 09		lda #$09		lda	#9
.b797	4c 85 99	jmp $9985		jmp	ErrorHandler
.b79a					StringTempWrite:
.b79a	48		pha				pha
.b79b	92 3c		sta ($3c)			sta 	(zsTemp)
.b79d	e6 3c		inc $3c				inc 	zsTemp
.b79f	d0 02		bne $b7a3			bne 	_STWNoCarry
.b7a1	e6 3d		inc $3d				inc 	zsTemp+1
.b7a3					_STWNoCarry:
.b7a3	a9 00		lda #$00			lda 	#0
.b7a5	92 3c		sta ($3c)			sta 	(zsTemp)
.b7a7	68		pla				pla
.b7a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a6de					BackloadProgram:
.a6de	a2 ff		ldx #$ff			ldx 	#$FF
.a6e0	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a6e3	20 0d a7	jsr $a70d			jsr 	BLReadByte
.a6e6	30 1e		bmi $a706			bmi 	_BPExit
.a6e8					_BPCopy:
.a6e8	e8		inx				inx  								; copy byte in
.a6e9	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a6ec	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a6ef	20 0d a7	jsr $a70d			jsr 	BLReadByte 					; read next byte
.a6f2	30 0a		bmi $a6fe			bmi 	_BPEndLine 					; -ve = EOL
.a6f4	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a6f6	d0 02		bne $a6fa			bne 	_BPNotTab
.a6f8	a9 20		lda #$20			lda 	#' '
.a6fa					_BPNotTab:
.a6fa	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a6fc	b0 ea		bcs $a6e8			bcs 	_BPCopy
.a6fe					_BPEndLine:
.a6fe	20 ea aa	jsr $aaea			jsr 	TokeniseLine 				; tokenise the line.
.a701	20 2a 8b	jsr $8b2a			jsr 	EditProgramCode
.a704	80 d8		bra $a6de			bra 	BackloadProgram
.a706					_BPExit:
.a706	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a709	20 e8 8b	jsr $8be8			jsr 	ClearCommand 				; clear variables etc.
.a70c	60		rts				rts
.a70d					BLReadByte:
.a70d					_BLLoad:
.a70d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a710	ee 0e a7	inc $a70e			inc 	_BLLoad+1
.a713	d0 03		bne $a718			bne 	_BLNoCarry
.a715	ee 0f a7	inc $a70f			inc 	_BLLoad+2
.a718					_BLNoCarry:
.a718	c9 00		cmp #$00			cmp 	#0
.a71a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a71b					TokeniseSearchTable:
.a71b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a71d	85 36		sta $36				sta 	zTemp0
.a71f	a0 00		ldy #$00			ldy 	#0
.a721	a9 80		lda #$80			lda 	#$80 						; token #
.a723	85 38		sta $38				sta 	zTemp1
.a725					_TSTLoop:
.a725	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a727	30 49		bmi $a772			bmi 	_TSTFail 					; -ve = end of table
.a729	f0 2e		beq $a759			beq 	_TSTNext 					; zero, check next it's a dummy
.a72b	c8		iny				iny 								; get the hash
.a72c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a72e	88		dey				dey
.a72f	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a732	d0 25		bne $a759			bne 	_TSTNext
.a734	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a737	38		sec				sec
.a738	ed 80 04	sbc $0480			sbc 	identStart
.a73b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a73d	d0 1a		bne $a759			bne 	_TSTNext
.a73f	5a		phy				phy 								; save Y , we might fail
.a740	c8		iny				iny 								; point to text
.a741	c8		iny				iny
.a742	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a745					_TSTCompareName:
.a745	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a748	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a74a	d0 0c		bne $a758			bne 	_TSTNextPullY 				; fail, pullY and do next
.a74c	e8		inx				inx
.a74d	c8		iny				iny
.a74e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a751	d0 f2		bne $a745			bne 	_TSTCompareName
.a753	7a		ply				ply 								; throw Y
.a754	a5 38		lda $38				lda 	zTemp1 						; get token #
.a756	38		sec				sec 								; return with CS = passed.
.a757	60		rts				rts
.a758					_TSTNextPullY:
.a758	7a		ply				ply 								; restore current, fall through.
.a759					_TSTNext:
.a759	e6 38		inc $38				inc 	zTemp1 						; token counter
.a75b	98		tya				tya
.a75c	18		clc				clc
.a75d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a75f	1a		inc a				inc 	a 							; +1
.a760	1a		inc a				inc 	a 							; +2
.a761	a8		tay				tay
.a762	10 c1		bpl $a725			bpl 	_TSTLoop 					; if Y < $80 loop back
.a764	98		tya				tya 								; add Y to zTemp0 and reset Y
.a765	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a767	18		clc				clc  								; but have tables > 255 bytes
.a768	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a76a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a76c	90 b7		bcc $a725			bcc 	_TSTLoop
.a76e	e6 37		inc $37				inc 	zTemp0+1
.a770	80 b3		bra $a725			bra 	_TSTLoop
.a772					_TSTFail:
.a772	18		clc				clc
.a773	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a774					KeywordSet0:
>a774	00 65					.text	0,$65,""               ; $80 !0:EOF
>a776	00 58					.text	0,$58,""               ; $81 !1:SH1
>a778	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a77a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a780	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a788	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a78e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a795	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a79d	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a7a4	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a7ab	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a7b1	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a7b7	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a7bf	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a7c6	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a7cd	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a7d4	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a7dc	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a7e2	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a7e8	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a7ef	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a7f5	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a7fb	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a803	28
>a804	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a80c	28
>a80d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a813	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a819	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a81f	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a826	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a82e	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a834	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a83a	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a83f	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a843	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a849	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a851	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a858	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a85f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a867	43
>a868	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a86e	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a874	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a87b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a881	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a885	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a88b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a893	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a89a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a89f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a8a6	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a8ae	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a8b4	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a8b9	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a8c1	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a8c7	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a8cd	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a8d2	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a8d9	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a8df	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a8e5	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a8ec	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a8f1	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a8f7	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a8fe	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a903	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a907	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a90f	45
>a910	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c1 PLOT
>a916	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c2 PRINT
>a91d	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c3 READ
>a923	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c4 RECT
>a929	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c5 REM
>a92e	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c6 RETURN
>a936	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c7 SOLID
>a93d	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c8 SPRITE
>a945	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c9 TEXT
>a94b	02 a3 54 4f				.text	2,$a3,"TO"             ; $ca TO
>a94f	ff					.text	$FF
.a950					KeywordSet1:
>a950	00 65					.text	0,$65,""               ; $80 !0:EOF
>a952	00 58					.text	0,$58,""               ; $81 !1:SH1
>a954	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a956	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a95e	4c 45
>a960	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a968	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a970	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a975	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a97b	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a980	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a988	45
>a989	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a98e	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a996	53
>a997	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a99d	ff					.text	$FF
.a99e					KeywordSet2:
>a99e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a9a0	00 58					.text	0,$58,""               ; $81 !1:SH1
>a9a2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a9a4	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a9a9	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a9ae	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a9b3	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a9b8	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a9bd	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a9c2	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a9c7	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a9cc	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a9d1	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a9d6	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a9db	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a9e0	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a9e5	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a9ea	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a9ef	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a9f4	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a9f9	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a9fe	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>aa03	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>aa08	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>aa0d	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>aa12	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>aa17	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>aa1c	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>aa21	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>aa26	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>aa2b	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>aa30	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>aa35	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>aa3a	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aa3f	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aa44	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>aa49	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>aa4e	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aa53	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>aa58	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>aa5d	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>aa62	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>aa67	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>aa6c	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>aa71	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aa76	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aa7b	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aa80	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aa85	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>aa8a	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aa8f	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aa94	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>aa99	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>aa9e	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>aaa3	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>aaa8	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>aaad	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>aab2	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>aab7	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>aabc	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>aac1	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>aac6	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>aacb	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>aad0	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>aad5	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>aada	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>aadf	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>aae4	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>aae9	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.aaea					TokeniseLine:
.aaea	20 72 ac	jsr $ac72			jsr 	FixLineBufferCase 			; fix line case
.aaed	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.aaef	8d a7 04	sta $04a7			sta 	tokenOffset
.aaf2	9c a8 04	stz $04a8			stz 	tokenLineNumber
.aaf5	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.aaf8	a2 ff		ldx #$ff			ldx 	#$FF
.aafa					_TKFindFirst:
.aafa	e8		inx				inx
.aafb	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.aafe	f0 79		beq $ab79			beq 	_TKExit
.ab00	c9 20		cmp #$20			cmp 	#' '
.ab02	90 f6		bcc $aafa			bcc 	_TKFindFirst
.ab04	c9 30		cmp #$30			cmp 	#'0'
.ab06	90 07		bcc $ab0f			bcc 	_TKNoLineNumber
.ab08	c9 3a		cmp #$3a			cmp 	#'9'+1
.ab0a	b0 03		bcs $ab0f			bcs 	_TKNoLineNumber
.ab0c	20 9c ac	jsr $ac9c			jsr 	TokeniseExtractLineNumber
.ab0f					_TKNoLineNumber:
.ab0f					_TKTokeniseLoop:
.ab0f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ab12	f0 65		beq $ab79			beq 	_TKExit
.ab14	e8		inx				inx
.ab15	c9 20		cmp #$20			cmp 	#' '
.ab17	f0 f6		beq $ab0f			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ab19	ca		dex				dex 								; undo last get, A contains character, X is position.
.ab1a	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ab1c	f0 61		beq $ab7f			beq 	_TKTokeniseIdentifier
.ab1e	c9 41		cmp #$41			cmp 	#'A'
.ab20	90 04		bcc $ab26			bcc 	_TKTokenisePunctuation
.ab22	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ab24	90 59		bcc $ab7f			bcc 	_TKTokeniseIdentifier
.ab26					_TKTokenisePunctuation:
.ab26	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ab28	f0 27		beq $ab51			beq 	_TKString
.ab2a	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ab2c	f0 28		beq $ab56			beq 	_TKHexConstant
.ab2e	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ab30	f0 29		beq $ab5b			beq 	_TKCheckDouble
.ab32	c9 3e		cmp #$3e			cmp 	#'>'
.ab34	f0 25		beq $ab5b			beq 	_TKCheckDouble
.ab36					_TKStandardPunctuation:
.ab36	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ab39	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ab3b	90 0e		bcc $ab4b			bcc 	_TKNoShift
.ab3d	48		pha				pha 								; save
.ab3e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.ab40	85 36		sta $36				sta 	zTemp0
.ab42	68		pla				pla
.ab43	29 20		and #$20			and 	#32 						; bit 5
.ab45	4a		lsr a				lsr 	a 							; shift into bit 3
.ab46	4a		lsr a				lsr 	a
.ab47	05 36		ora $36				ora 	zTemp0
.ab49	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.ab4b					_TKNoShift:
.ab4b	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte 			; write the punctuation character
.ab4e	e8		inx				inx 								; consume the character
.ab4f	80 be		bra $ab0f			bra 	_TKTokeniseLoop 			; and loop round again.
.ab51					_TKString:
.ab51	20 01 ac	jsr $ac01			jsr 	TokeniseString
.ab54	80 b9		bra $ab0f			bra 	_TKTokeniseLoop
.ab56					_TKHexConstant:
.ab56	20 3c ac	jsr $ac3c			jsr 	TokeniseHexConstant
.ab59	80 b4		bra $ab0f			bra 	_TKTokeniseLoop
.ab5b					_TKCheckDouble:
.ab5b	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.ab5e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.ab60	90 d4		bcc $ab36			bcc 	_TKStandardPunctuation
.ab62	c9 3f		cmp #$3f			cmp 	#'>'+1
.ab64	b0 d0		bcs $ab36			bcs 	_TKStandardPunctuation
.ab66	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.ab69	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.ab6b	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.ab6c	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.ab6f	38		sec				sec
.ab70	e9 3c		sbc #$3c			sbc 	#'<'
.ab72	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ab75	e8		inx				inx 								; consume both
.ab76	e8		inx				inx
.ab77	80 96		bra $ab0f			bra 	_TKTokeniseLoop
.ab79	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ab7b	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ab7e	60		rts				rts
.ab7f					_TKTokeniseIdentifier:
.ab7f	8e 80 04	stx $0480			stx 	identStart 					; save start
.ab82	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ab85					_TKCheckLoop:
.ab85	e8		inx				inx 								; look at next, we know first is identifier.
.ab86	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.ab89	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ab8b	f0 f8		beq $ab85			beq 	_TKCheckLoop
.ab8d	c9 30		cmp #$30			cmp	 	#"0"
.ab8f	90 0c		bcc $ab9d			bcc 	_TKEndIdentifier
.ab91	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab93	90 f0		bcc $ab85			bcc 	_TKCheckLoop
.ab95	c9 41		cmp #$41			cmp	 	#"A"
.ab97	90 04		bcc $ab9d			bcc 	_TKEndIdentifier
.ab99	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ab9b	90 e8		bcc $ab85			bcc 	_TKCheckLoop
.ab9d					_TKEndIdentifier:
.ab9d	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.aba0	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.aba2	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.aba4	f0 06		beq $abac			beq 	_TKHasTypeCharacter
.aba6	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.aba8	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.abaa	d0 07		bne $abb3			bne 	_TKNoTypeCharacter
.abac					_TKHasTypeCharacter:
.abac	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.abaf	e8		inx				inx 								; read next
.abb0	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.abb3					_TKNoTypeCharacter:
.abb3	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.abb5	d0 09		bne $abc0			bne 	_TKNoArray
.abb7	e8		inx				inx 								; skip the (
.abb8	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.abbb	09 04		ora #$04			ora 	#$04
.abbd	8d 84 04	sta $0484			sta 	identTypeByte
.abc0					_TKNoArray:
.abc0	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.abc3	20 5d ac	jsr $ac5d			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.abc6	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.abc8	a9 74		lda #$74			lda 	#(KeywordSet0) & $FF
.abca	20 1b a7	jsr $a71b			jsr 	TokeniseSearchTable
.abcd	a2 00		ldx #$00			ldx 	#0
.abcf	b0 1f		bcs $abf0			bcs 	_TKFoundToken
.abd1	a0 a9		ldy #$a9			ldy 	#(KeywordSet1) >> 8
.abd3	a9 50		lda #$50			lda 	#(KeywordSet1) & $FF
.abd5	20 1b a7	jsr $a71b			jsr 	TokeniseSearchTable
.abd8	a2 81		ldx #$81			ldx 	#$81
.abda	b0 14		bcs $abf0			bcs 	_TKFoundToken
.abdc	a0 a9		ldy #$a9			ldy 	#(KeywordSet2) >> 8
.abde	a9 9e		lda #$9e			lda 	#(KeywordSet2) & $FF
.abe0	20 1b a7	jsr $a71b			jsr 	TokeniseSearchTable
.abe3	a2 82		ldx #$82			ldx 	#$82
.abe5	b0 09		bcs $abf0			bcs 	_TKFoundToken
.abe7	20 ed ac	jsr $aced			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.abea	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.abed	4c 0f ab	jmp $ab0f			jmp 	_TKTokeniseLoop 			; and go round again.
.abf0					_TKFoundToken:
.abf0	48		pha				pha 								; save token
.abf1	8a		txa				txa 								; shift in X, is there one ?
.abf2	f0 03		beq $abf7			beq 	_TKNoTShift
.abf4	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte 			; if so, write it out
.abf7					_TKNoTShift:
.abf7	68		pla				pla 								; restore and write token
.abf8	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.abfb	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.abfe	4c 0f ab	jmp $ab0f			jmp 	_TKTokeniseLoop 			; and go round again.
.ac01					TokeniseString:
.ac01	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ac03	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ac06	e8		inx				inx									; start of quoted string.
.ac07	da		phx				phx 								; push start of string on top
.ac08	ca		dex				dex
.ac09					_TSFindEnd:
.ac09	e8		inx				inx
.ac0a	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ac0d	f0 04		beq $ac13			beq 	_TSEndOfString
.ac0f	c9 22		cmp #$22			cmp 	#'"'
.ac11	d0 f6		bne $ac09			bne 	_TSFindEnd
.ac13					_TSEndOfString:
.ac13	7a		ply				ply  								; so now Y is first character, X is character after end.
.ac14	48		pha				pha 								; save terminating character
.ac15	20 1d ac	jsr $ac1d			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ac18	68		pla				pla 								; terminating character
.ac19	f0 01		beq $ac1c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ac1b	e8		inx				inx
.ac1c					_TSNotQuote:
.ac1c	60		rts				rts
.ac1d					TOWriteBlockXY:
.ac1d	86 36		stx $36				stx 	zTemp0 						; write end character
.ac1f	98		tya				tya
.ac20	49 ff		eor #$ff			eor 	#$FF
.ac22	38		sec				sec
.ac23	65 36		adc $36				adc 	zTemp0
.ac25	1a		inc a				inc 	a 							; one extra for NULL
.ac26	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ac29					_TOBlockLoop:
.ac29	c4 36		cpy $36				cpy 	zTemp0
.ac2b	f0 09		beq $ac36			beq 	_TOBlockExit
.ac2d	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ac30	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ac33	c8		iny				iny
.ac34	80 f3		bra $ac29			bra 	_TOBlockLoop
.ac36					_TOBlockExit:
.ac36	a9 00		lda #$00			lda 	#0
.ac38	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ac3b	60		rts				rts
.ac3c					TokeniseHexConstant:
.ac3c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ac3e	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ac41	e8		inx				inx									; start of quoted string.
.ac42	da		phx				phx 								; push start of constant on top
.ac43	ca		dex				dex
.ac44					_THFindLoop:
.ac44	e8		inx				inx
.ac45	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac48	c9 30		cmp #$30			cmp 	#"0"
.ac4a	90 0c		bcc $ac58			bcc 	_THFoundEnd
.ac4c	c9 3a		cmp #$3a			cmp 	#"9"+1
.ac4e	90 f4		bcc $ac44			bcc 	_THFindLoop
.ac50	c9 41		cmp #$41			cmp 	#"A"
.ac52	90 04		bcc $ac58			bcc 	_THFoundEnd
.ac54	c9 47		cmp #$47			cmp 	#"F"+1
.ac56	90 ec		bcc $ac44			bcc 	_THFindLoop
.ac58					_THFoundEnd:
.ac58	7a		ply				ply 								; restore start
.ac59	20 1d ac	jsr $ac1d			jsr 	TOWriteBlockXY 				; output the block
.ac5c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.ac5d					TokeniseCalculateHash:
.ac5d	da		phx				phx
.ac5e	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.ac61	a9 00		lda #$00			lda 	#0
.ac63					_TCHLoop:
.ac63	18		clc				clc
.ac64	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.ac67	e8		inx				inx
.ac68	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ac6b	d0 f6		bne $ac63			bne 	_TCHLoop
.ac6d	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ac70	fa		plx				plx
.ac71	60		rts				rts
.ac72					FixLineBufferCase:
.ac72	a2 00		ldx #$00			ldx 	#0
.ac74					_FLBCLoop:
.ac74	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.ac77	f0 22		beq $ac9b			beq 	_FLBCExit 					; end of string.
.ac79	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ac7b	f0 11		beq $ac8e			beq 	_FLBCInQuotes
.ac7d	e8		inx				inx
.ac7e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ac80	90 f2		bcc $ac74			bcc 	_FLBCLoop
.ac82	c9 7b		cmp #$7b			cmp 	#'z'+1
.ac84	b0 ee		bcs $ac74			bcs 	_FLBCLoop
.ac86	38		sec				sec 								; make U/C
.ac87	e9 20		sbc #$20			sbc 	#32
.ac89	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ac8c	80 e6		bra $ac74			bra 	_FLBCLoop
.ac8e					_FLBCInQuotes:
.ac8e	e8		inx				inx 								; advance
.ac8f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.ac92	f0 07		beq $ac9b			beq 	_FLBCExit 					; exit on EOS
.ac94	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ac96	d0 f6		bne $ac8e			bne 	_FLBCInQuotes
.ac98	e8		inx				inx 								; skip over it
.ac99	80 d9		bra $ac74			bra 	_FLBCLoop
.ac9b					_FLBCExit:
.ac9b	60		rts				rts
.ac9c					TokeniseExtractLineNumber:
.ac9c	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.ac9f	48		pha				pha
.aca0	ad a8 04	lda $04a8			lda 	tokenLineNumber
.aca3	48		pha				pha
.aca4	20 da ac	jsr $acda			jsr 	_TELNTimes2 				; line # x 4
.aca7	20 da ac	jsr $acda			jsr 	_TELNTimes2 				; line # x 2
.acaa	18		clc				clc 								; add stacked value
.acab	68		pla				pla
.acac	6d a8 04	adc $04a8			adc 	tokenLineNumber
.acaf	8d a8 04	sta $04a8			sta 	tokenLineNumber
.acb2	68		pla				pla
.acb3	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.acb6	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.acb9	20 da ac	jsr $acda			jsr 	_TELNTimes2 				; line # x 10
.acbc	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.acbf	e8		inx				inx
.acc0	29 0f		and #$0f			and 	#15 						; add to line #
.acc2	18		clc				clc
.acc3	6d a8 04	adc $04a8			adc 	tokenLineNumber
.acc6	8d a8 04	sta $04a8			sta 	tokenLineNumber
.acc9	90 03		bcc $acce			bcc 	_TLENNoCarry
.accb	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.acce					_TLENNoCarry:
.acce	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.acd1	c9 30		cmp #$30			cmp 	#'0'
.acd3	90 04		bcc $acd9			bcc 	_TLENExit
.acd5	c9 3a		cmp #$3a			cmp 	#'9'+1
.acd7	90 c3		bcc $ac9c			bcc 	TokeniseExtractLineNumber
.acd9					_TLENExit:
.acd9	60		rts				rts
.acda					_TELNTimes2:
.acda	0e a8 04	asl $04a8			asl 	tokenLineNumber
.acdd	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ace0	60		rts				rts
.ace1					TokeniseWriteByte:
.ace1	da		phx				phx
.ace2	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ace5	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ace8	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.aceb	fa		plx				plx
.acec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.aced					CheckCreateVariableRecord:
.aced	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.acef	85 36		sta $36				sta 	0+zTemp0
.acf1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.acf3	85 37		sta $37				sta 	1+zTemp0
.acf5					_CCVSearch:
.acf5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.acf7	f0 2c		beq $ad25			beq 	_CCVFail
.acf9	a0 01		ldy #$01			ldy 	#1 							; read the hash
.acfb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.acfd	cd 83 04	cmp $0483			cmp 	identHash
.ad00	d0 16		bne $ad18			bne 	_CCVNext
.ad02	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ad04	ae 80 04	ldx $0480			ldx 	identStart
.ad07					_CCVCompare:
.ad07	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ad0a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ad0c	e8		inx				inx 								; advance pointers
.ad0d	c8		iny				iny
.ad0e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ad0f	d0 07		bne $ad18			bne 	_CCVNext  					; didn't match go to next.
.ad11	90 f4		bcc $ad07			bcc 	_CCVCompare 				; not finished yet.
.ad13	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ad16	f0 41		beq $ad59			beq 	_CCVFound 					; yes, we were successful
.ad18					_CCVNext:
.ad18	18		clc				clc
.ad19	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ad1b	65 36		adc $36				adc 	zTemp0
.ad1d	85 36		sta $36				sta 	zTemp0
.ad1f	90 d4		bcc $acf5			bcc 	_CCVSearch
.ad21	e6 37		inc $37				inc 	zTemp0+1
.ad23	80 d0		bra $acf5			bra 	_CCVSearch
.ad25					_CCVFail:
.ad25	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ad27	ad 83 04	lda $0483			lda 	identHash
.ad2a	91 36		sta ($36),y			sta 	(zTemp0),y
.ad2c	c8		iny				iny 								; offset 2 is the type byte
.ad2d	ad 84 04	lda $0484			lda 	identTypeByte
.ad30	91 36		sta ($36),y			sta 	(zTemp0),y
.ad32	c8		iny				iny
.ad33					_CCVData:
.ad33	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ad35	91 36		sta ($36),y			sta 	(zTemp0),y
.ad37	c8		iny				iny
.ad38	c0 08		cpy #$08			cpy 	#8
.ad3a	90 f7		bcc $ad33			bcc 	_CCVData
.ad3c	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.ad3f					_CCVCopyName:
.ad3f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad42	91 36		sta ($36),y			sta 	(zTemp0),y
.ad44	e8		inx				inx
.ad45	c8		iny				iny
.ad46	ec 82 04	cpx $0482			cpx 	identTypeEnd
.ad49	d0 f4		bne $ad3f			bne 	_CCVCopyName
.ad4b	98		tya				tya 								; patch offset
.ad4c	92 36		sta ($36)			sta 	(zTemp0)
.ad4e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.ad50	91 36		sta ($36),y			sta 	(zTemp0),y
.ad52	88		dey				dey
.ad53	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ad55	09 80		ora #$80			ora 	#$80
.ad57	91 36		sta ($36),y			sta 	(zTemp0),y
.ad59					_CCVFound:
.ad59	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ad5b	38		sec				sec
.ad5c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.ad5e	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.ad60	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ad63	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.ad65	20 e1 ac	jsr $ace1			jsr 	TokeniseWriteByte
.ad68	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
