
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Jan 20 15:48:52 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56				        .text	$f2,$56         			; Signature
>8002		03				        .byte   3               			; 3 blocks
>8003		04				        .byte   4               			; mount at $8000
>8004		40 80				        .word   Boot 	      				; Start here
>8006		00 00				        .word   0 			               	; version
>8008		00 00				        .word   0               			; kernel
>800a		53 75 70 65 72 42 41 53		        .text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 d8 bb	jsr $bbd8		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 0b bc	jsr $bc0b		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 89 b5	jsr $b589		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 1d b8	jsr $b81d		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a2		09 80		ora #$80			ora 	#$80
.80a4		85 00		sta $00				sta 	0
.80a6		20 1b a7	jsr $a71b			jsr		UpdateFont 					; update font if between FPGA updates.
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80cb		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80cd		20 f5 81	jsr $81f5			jsr 	KNLSetDrive
.80d0		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80d2		aa		tax				tax
.80d3		a8		tay				tay
.80d4		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d7		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d9		20 75 80	jsr $8075			jsr 	SNDCommand
.80dc		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e1		a9 09		lda #$09			lda 	#9
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e9		64 01		stz $01				stz 	1
.80eb		ad ad d6	lda $d6ad			lda 	$D6AD
.80ee		20 c7 83	jsr $83c7			jsr 	PrintHex
.80f1		ad ac d6	lda $d6ac			lda 	$D6AC
.80f4		20 c7 83	jsr $83c7			jsr 	PrintHex
.80f7		ad ab d6	lda $d6ab			lda 	$D6AB
.80fa		20 c7 83	jsr $83c7			jsr 	PrintHex
.80fd		ad aa d6	lda $d6aa			lda 	$D6AA
.8100		20 c7 83	jsr $83c7			jsr 	PrintHex
.8103		a9 20		lda #$20			lda 	#32
.8105		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8108		ad a8 d6	lda $d6a8			lda 	$D6A8
.810b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810e		ad a9 d6	lda $d6a9			lda 	$D6A9
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8116		a9 24		lda #$24			lda 	#Prompt & $FF
.8118		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.811b		20 c1 91	jsr $91c1			jsr 	NewProgram 					; erase current program
.811e		4c 0a 86	jmp $860a			jmp 	WarmStart					; make same size.
.8121		4c 0a 86	jmp $860a			jmp 	WarmStart
>8124		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8126		09 09 32 30 2f 30 31 2f			.text 9,9,"20/01/23 32"
>812e		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>8133		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8137						ProcessEvents:
.8137		20 34 82	jsr $8234			jsr 	KNLSetEventPointer
.813a		20 a8 81	jsr $81a8			jsr     GetNextEvent 				; get next event
.813d		b0 27		bcs $8166			bcs 	_PEExitZ 					; nothing left to process.
.813f		ad 81 07	lda $0781			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8142		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8144		d0 f1		bne $8137			bne 	ProcessEvents
.8146		ad 87 07	lda $0787			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8149		d0 ec		bne $8137			bne 	ProcessEvents
.814b		ad 86 07	lda $0786			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814e		c9 03		cmp #$03			cmp 	#3
.8150		f0 11		beq $8163			beq 	_PEReturnBreak  			; no, keep going.
.8152		da		phx				phx
.8153		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8156		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8158		f0 06		beq $8160			beq 	_PENoQueue
.815a		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815d		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8160						_PENoQueue:
.8160		fa		plx				plx
.8161		80 d4		bra $8137			bra 	ProcessEvents
.8163						_PEReturnBreak:
.8163		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8165		60		rts				rts
.8166						_PEExitZ:
.8166		a9 00		lda #$00			lda 	#0
.8168		60		rts				rts
.8169						PopKeyboardQueue:
.8169		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.816c		f0 17		beq $8185			beq 	_PKQExit 					; zero, then exit.
.816e		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8171		48		pha				pha
.8172		da		phx				phx 								; drop head of queue
.8173		a2 00		ldx #$00			ldx 	#0
.8175						_PKQLoop:
.8175		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8178		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.817b		e8		inx				inx
.817c		e0 07		cpx #$07			cpx 	#7
.817e		d0 f5		bne $8175			bne 	_PKQLoop
.8180		fa		plx				plx
.8181		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8184		68		pla				pla 								; restore head of queue.
.8185						_PKQExit:
.8185		60		rts				rts
.8186						KNLGetKeyPressed:
.8186		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8189		d0 de		bne $8169			bne 	PopKeyboardQueue 			; if so, pop and return it
.818b		20 37 81	jsr $8137			jsr 	ProcessEvents 				; process any outstanding events
.818e		a9 00		lda #$00			lda 	#0
.8190		60		rts				rts
.8191						KNLGetSingleCharacter:
.8191		20 86 81	jsr $8186			jsr 	KNLGetKeyPressed
.8194		c9 00		cmp #$00			cmp 	#0
.8196		f0 f9		beq $8191			beq 	KNLGetSingleCharacter
.8198		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8199						TickHandler:
.8199		5a		phy				phy 								; need to preserve Y
.819a		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819d		7a		ply				ply
.819e		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819f						ResetIOTracking:
.819f		a2 20		ldx #$20			ldx 	#GNEEnd-GNEBegin-1
.81a1						_RIOLoop:
.81a1		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.81a4		ca		dex				dex
.81a5		10 fa		bpl $81a1			bpl 	_RIOLoop
.81a7		60		rts				rts
.81a8						GetNextEvent:
.81a8		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.81ab		08		php				php									; save yes/no flag.
.81ac		b0 14		bcs $81c2			bcs 	_GNEExit
.81ae		48		pha				pha 								; save registers
.81af		da		phx				phx
.81b0		5a		phy				phy
.81b1		ad 81 07	lda $0781			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.81b4		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.81b6		f0 04		beq $81bc			beq 	_GNEKeyEvent
.81b8		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.81ba		d0 03		bne $81bf			bne 	_GNECheckMouseEvent
.81bc						_GNEKeyEvent:
.81bc		20 c4 81	jsr $81c4			jsr 	ProcessKeyboardEvent
.81bf						_GNECheckMouseEvent:
.81bf		7a		ply				ply 								; restore registers
.81c0		fa		plx				plx
.81c1		68		pla				pla
.81c2						_GNEExit:
.81c2		28		plp				plp
.81c3		60		rts				rts
.81c4						ProcessKeyboardEvent:
.81c4		ad 86 07	lda $0786			lda 	KNLEvent.key.ascii 			; raw key code.
.81c7		20 e1 81	jsr $81e1			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.81ca		ac 81 07	ldy $0781			ldy 	KNLEvent.type
.81cd		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.81cf		f0 07		beq $81d8			beq 	_PKERelease
.81d1		1d 5f 06	ora $065f,x			ora 	KeyStatus,x 				; set bit
.81d4		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81d7		60		rts				rts
.81d8						_PKERelease:
.81d8		49 ff		eor #$ff			eor 	#$FF						; clear bit
.81da		3d 5f 06	and $065f,x			and 	KeyStatus,x
.81dd		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81e0		60		rts				rts
.81e1						KeyboardConvertXA:
.81e1		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.81e3		8e 7f 06	stx $067f			stx 	KeyMaskTemp
.81e6						_KCCALoop:
.81e6		18		clc				clc
.81e7		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.81e9		b0 05		bcs $81f0			bcs 	_KCCADone
.81eb		0e 7f 06	asl $067f			asl 	KeyMaskTemp 				; shift the mask temp
.81ee		80 f6		bra $81e6			bra 	_KCCALoop
.81f0						_KCCADone:
.81f0		aa		tax				tax 								; table entry in X
.81f1		ad 7f 06	lda $067f			lda 	KeyMaskTemp 				; mask temp in A.
.81f4		60		rts				rts
.065f						GNEBegin:
.065f						KeyStatus:
>065f								.fill 	32
.067f						KeyMaskTemp:
>067f								.fill 	1
.0680						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.81f5						KNLSetDrive:
.81f5		8d 80 07	sta $0780			sta 	KNLDefaultDrive
.81f8		60		rts				rts
.81f9						KNLOpenFileWrite:
.81f9		48		pha				pha
.81fa		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.81fc		80 03		bra $8201			bra 	KNLOpenStart
.81fe						KNLOpenFileRead:
.81fe		48		pha				pha
.81ff		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8201						KNLOpenStart:
.8201		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8203		68		pla				pla
.8204		20 3f 82	jsr $823f			jsr 	KNLSetupFileName
.8207		20 34 82	jsr $8234			jsr 	KNLSetEventPointer
.820a		ad 80 07	lda $0780			lda 	KNLDefaultDrive 			; currently drive zero only.
.820d		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.820f		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8212		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8214		b0 1d		bcs $8233			bcs     _out
.8216						_loop
.8216		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8219		20 a8 81	jsr $81a8			jsr     GetNextEvent
.821c		b0 f8		bcs $8216			bcs     _loop
.821e		ad 81 07	lda $0781			lda 	KNLEvent.type
.8221		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.8223		f0 0a		beq $822f			beq 	_success
.8225		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8227		f0 0a		beq $8233			beq 	_out
.8229		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.822b		f0 06		beq $8233			beq 	_out
.822d		80 e7		bra $8216			bra     _loop
.822f						_success
.822f		ad 84 07	lda $0784			lda     KNLEvent.file.stream
.8232		18		clc				clc
.8233						_out
.8233		60		rts				rts
.8234						KNLSetEventPointer:
.8234		48		pha				pha
.8235		a9 81		lda #$81			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8237		85 f0		sta $f0				sta     kernel.args.events+0
.8239		a9 07		lda #$07			lda     #KNLEvent >> 8
.823b		85 f1		sta $f1				sta     kernel.args.events+1
.823d		68		pla				pla
.823e		60		rts				rts
.823f						KNLSetupFileName:
.823f		5a		phy				phy 								; save Y on stack
.8240		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.8242		86 37		stx $37				stx 	zTemp0+1
.8244		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8246		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8248		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.824a						_KNLGetLength:
.824a		c8		iny				iny
.824b		b1 36		lda ($36),y			lda 	(zTemp0),y
.824d		d0 fb		bne $824a			bne 	_KNLGetLength
.824f		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.8251		7a		ply				ply
.8252		60		rts				rts
.8253						KNLReadBlock:
.8253		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8255		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8257		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.825a		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.825c		b0 2e		bcs $828c			bcs     _KGNBExitFail               ; report as general error
.825e						_KGRBEventLoop:
.825e		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8261		20 a8 81	jsr $81a8			jsr     GetNextEvent
.8264		b0 f8		bcs $825e			bcs     _KGRBEventLoop
.8266		ad 81 07	lda $0781			lda 	KNLEvent.type 				; get event
.8269		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.826b		f0 0a		beq $8277			beq     _KNLRBGetNextByte
.826d		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.826f		f0 1b		beq $828c			beq 	_KGNBExitFail
.8271		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8273		f0 17		beq $828c			beq 	_KGNBExitFail
.8275		80 e7		bra $825e			bra 	_KGRBEventLoop
.8277						_KNLRBGetNextByte:
.8277		a9 80		lda #$80			lda     #<KNLReadBuffer 			; Set the target buffer
.8279		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.827b		a9 06		lda #$06			lda     #>KNLReadBuffer
.827d		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.827f		ad 87 07	lda $0787			lda     KNLEvent.file.data.read 	; Set the target length
.8282		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8284		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8287		ad 87 07	lda $0787			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.828a		18		clc				clc
.828b		60		rts				rts
.828c						_KGNBExitFail:
.828c		38		sec				sec
.828d		60		rts				rts
.828e						KNLWriteBlock:
.828e		da		phx				phx
.828f		5a		phy				phy
.8290		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.8292		a5 36		lda $36				lda     zTemp0 						; save the data location.
.8294		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8296		a5 37		lda $37				lda     zTemp0+1
.8298		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.829a		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.829c		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.829f		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.82a1		b0 21		bcs $82c4			bcs 	_KWBFailed
.82a3						_KNLWLoop:
.82a3		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.82a6		20 a8 81	jsr $81a8			jsr     GetNextEvent
.82a9		b0 f8		bcs $82a3			bcs     _KNLWLoop
.82ab		ad 81 07	lda $0781			lda     KNLEvent.type 				; various errors.
.82ae		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.82b0		f0 12		beq $82c4			beq 	_KWBFailed
.82b2		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.82b4		f0 0e		beq $82c4			beq 	_KWBFailed
.82b6		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82b8		f0 0a		beq $82c4			beq 	_KWBFailed
.82ba		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.82bc		d0 e5		bne $82a3			bne 	_KNLWLoop
.82be		18		clc				clc
.82bf		ad 87 07	lda $0787			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.82c2		80 01		bra $82c5			bra 	_KWBExit
.82c4						_KWBFailed:
.82c4		38		sec				sec
.82c5						_KWBExit:
.82c5		7a		ply				ply
.82c6		fa		plx				plx
.82c7		60		rts				rts
.82c8						KNLCloseFile:
.82c8		85 f3		sta $f3				sta     kernel.args.file.close.stream
.82ca		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.82cd		60		rts				rts
.82ce						KNLReadController:
.82ce		da		phx				phx
.82cf		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.82d1		64 01		stz $01				stz 	1 							; switch to I/O 0
.82d3		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.82d6		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.82d8		86 01		stx $01				stx 	1 							; repair old I/O and exit
.82da		fa		plx				plx
.82db		60		rts				rts
.0680						KNLReadBuffer:
>0680								.fill   256
.0780						KNLDefaultDrive:
>0780								.byte 	?
.0781						KNLEvent
>0781						type        .byte   ?   ; Enum above
>0782						buf         .byte   ?   ; page id or zero
>0783						ext         .byte   ?   ; page id or zero
.0784						key
>0784						keyboard    .byte   ?   ; Keyboard ID
>0785						raw         .byte   ?   ; Raw key ID
>0786						ascii       .byte   ?   ; ASCII value
>0787						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0784						mouse
.0784						delta
>0784						x           .byte   ?
>0785						y           .byte   ?
>0786						z           .byte   ?
>0787						buttons     .byte   ?
.0784						clicks
>0784						inner       .byte   ?
>0785						middle      .byte   ?
>0786						outer       .byte   ?
.0784						joystick
>0784						joy0        .byte   ?
>0785						joy1        .byte   ?
.0784						udp
>0784						token       .byte   ?   ; TODO: break out into fields
.0784						file
>0784						stream      .byte   ?
>0785						cookie      .byte   ?
.0786						data
>0786						requested   .byte   ?   ; Requested number of bytes to read
>0787						read        .byte   ?   ; Number of bytes actually read
.0786						wrote
>0786						requested   .byte   ?   ; Requested number of bytes to read
>0787						wrote       .byte   ?   ; Number of bytes actually read
.0784						directory
>0784						stream      .byte   ?
>0785						cookie      .byte   ?
.0786						volume
>0786						len         .byte   ?   ; Length of volname (in buf)
>0787						flags       .byte   ?   ; block size, text encoding
.0786						file
>0786						len         .byte   ?
>0787						flags       .byte   ?   ; block scale, text encoding, approx size
.0786						free
>0786						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.82dc						AssembleGroup1:
.82dc		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.82de		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.82e1		80 02		bra $82e5			bra 	AsmGroup12
.82e3						AssembleGroup2:
.82e3		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.82e5						AsmGroup12:
.82e5		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.82e8		68		pla				pla 								; pop the return address to access the information following.
.82e9		fa		plx				plx
.82ea		20 71 83	jsr $8371			jsr 	AccessParameters 			; get opcode and save as base
.82ed		8d 20 04	sta $0420			sta 	BaseOpcode
.82f0		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.82f3		d0 08		bne $82fd			bne 	_AG12HaveMask
.82f5		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.82f7		20 79 83	jsr $8379			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.82fa		8d 21 04	sta $0421			sta 	ModeMask
.82fd						_AG12HaveMask:
.82fd		20 ad 84	jsr $84ad			jsr 	TypeAndCalculateOperand 	; get zero page type
.8300		da		phx				phx 								; save found address mode
.8301		20 dd 83	jsr $83dd			jsr 	AssembleModeX
.8304		fa		plx				plx  								; restore address mode
.8305		b0 0b		bcs $8312			bcs 	_AG12Exit
.8307		20 13 83	jsr $8313			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.830a		20 dd 83	jsr $83dd			jsr 	AssembleModeX
.830d		b0 03		bcs $8312			bcs 	_AG12Exit
.830f		4c c3 b1	jmp $b1c3			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8312						_AG12Exit:
.8312		60		rts				rts
.8313						PromoteToAbsolute:
.8313		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8315		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8317		f0 19		beq $8332			beq 	_PTADo
.8319		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.831b		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.831d		f0 13		beq $8332			beq 	_PTADo
.831f		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8321		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8323		f0 0d		beq $8332			beq 	_PTADo
.8325		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8327		e0 d1		cpx #$d1			cpx 	#AM_IND
.8329		f0 07		beq $8332			beq 	_PTADo
.832b		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.832d		e0 c0		cpx #$c0			cpx 	#AM_INDX
.832f		f0 01		beq $8332			beq 	_PTADo
.8331		60		rts				rts
.8332						_PTADo:
.8332		aa		tax				tax
.8333		60		rts				rts
.8334						AssembleGroup3:
.8334		68		pla				pla 								; get parameters, which is just the opcode.
.8335		fa		plx				plx
.8336		20 71 83	jsr $8371			jsr 	AccessParameters 			; get and output opcode
.8339		20 89 83	jsr $8389			jsr 	AssemblerWriteByte
.833c		20 11 85	jsr $8511			jsr 	CalculateOperand 			; get a 16 bit operand
.833f		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8341		38		sec				sec
.8342		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8345		48		pha				pha 								; LSB in A
.8346		a5 60		lda $60				lda 	NSMantissa1
.8348		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.834b		aa		tax				tax 								; MSB in X
.834c		68		pla				pla
.834d		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.834e		69 7f		adc #$7f			adc 	#$7F
.8350		90 01		bcc $8353			bcc 	_AG3NoCarry
.8352		e8		inx				inx
.8353						_AG3NoCarry:
.8353		38		sec				sec 								; fix back and write out anyways.
.8354		e9 80		sbc #$80			sbc 	#$80
.8356		20 89 83	jsr $8389			jsr 	AssemblerWriteByte
.8359		e0 00		cpx #$00			cpx 	#0 							; was it in range
.835b		f0 0a		beq $8367			beq 	_AG3Exit
.835d		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.8360		29 01		and #$01			and 	#1
.8362		f0 03		beq $8367			beq 	_AG3Exit
.8364		4c c8 b1	jmp $b1c8			jmp 	RangeError 					; no, branch is out of range
.8367						_AG3Exit:
.8367		60		rts				rts
.8368						AssembleGroup4:
.8368		68		pla				pla 								; pop address
.8369		fa		plx				plx
.836a		20 71 83	jsr $8371			jsr 	AccessParameters 			; access and get first
.836d		20 89 83	jsr $8389			jsr 	AssemblerWriteByte 			; output it.
.8370		60		rts				rts
.8371						AccessParameters:
.8371		8d 1d 04	sta $041d			sta 	ParamStart
.8374		8e 1e 04	stx $041e			stx 	ParamStart+1
.8377		a9 01		lda #$01			lda 	#1
.8379						GetParameter:
.8379		5a		phy				phy
.837a		a8		tay				tay
.837b		ad 1d 04	lda $041d			lda 	ParamStart
.837e		85 36		sta $36				sta 	zTemp0
.8380		ad 1e 04	lda $041e			lda 	ParamStart+1
.8383		85 37		sta $37				sta 	zTemp0+1
.8385		b1 36		lda ($36),y			lda 	(zTemp0),y
.8387		7a		ply				ply
.8388		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8389						AssemblerWriteByte:
.8389		48		pha			pha
.838a		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.838d		29 02		and #$02		and 	#2
.838f		f0 1b		beq $83ac		beq 	_AWBNoPrint
.8391		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8394		20 c7 83	jsr $83c7		jsr 	PrintHex
.8397		ad 1a 04	lda $041a		lda		AssemblerAddress
.839a		20 c7 83	jsr $83c7		jsr 	PrintHex
.839d		a9 20		lda #$20		lda 	#' '
.839f		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83a2		68		pla			pla 									; print byte
.83a3		48		pha			pha
.83a4		20 c7 83	jsr $83c7		jsr 	PrintHex
.83a7		a9 0d		lda #$0d		lda 	#13
.83a9		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83ac						_AWBNoPrint:
.83ac		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.83af		85 36		sta $36			sta 	zTemp0
.83b1		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.83b4		f0 0e		beq $83c4		beq 	_AWBRange
.83b6		85 37		sta $37			sta 	zTemp0+1
.83b8		68		pla			pla 									; write byte out
.83b9		92 36		sta ($36)		sta 	(zTemp0)
.83bb		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.83be		d0 03		bne $83c3		bne 	_AWBNoCarry
.83c0		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.83c3						_AWBNoCarry:
.83c3		60		rts			rts
.83c4						_AWBRange:
.83c4		4c c8 b1	jmp $b1c8		jmp 	RangeError
.83c7						PrintHex:
.83c7		48		pha				pha
.83c8		4a		lsr a				lsr 	a
.83c9		4a		lsr a				lsr 	a
.83ca		4a		lsr a				lsr 	a
.83cb		4a		lsr a				lsr 	a
.83cc		20 d0 83	jsr $83d0			jsr 	_PrintNibble
.83cf		68		pla				pla
.83d0						_PrintNibble:
.83d0		29 0f		and #$0f			and 	#15
.83d2		c9 0a		cmp #$0a			cmp 	#10
.83d4		90 02		bcc $83d8			bcc 	_NoShift
.83d6		69 06		adc #$06			adc 	#6
.83d8						_NoShift:
.83d8		69 30		adc #$30			adc 	#48
.83da		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.83dd						AssembleModeX:
.83dd		5a		phy				phy
.83de		ad 1f 04	lda $041f			lda 	IsGroup1
.83e1		f0 17		beq $83fa			beq 	_AMXGroup2
.83e3		8a		txa				txa 							; is it in group # 1
.83e4		29 40		and #$40			and 	#AM_ISG1
.83e6		f0 4d		beq $8435			beq 	_AMXFail 				; no, give up.
.83e8		8a		txa				txa 							; get back.
.83e9		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.83eb		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.83ed		d0 22		bne $8411			bne 	_AMXHaveInfo
.83ef		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.83f2		c9 81		cmp #$81			cmp 	#$81
.83f4		f0 3f		beq $8435			beq 	_AMXFail
.83f6		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.83f8		80 17		bra $8411			bra 	_AMXHaveInfo 			; odd design decision there.
.83fa						_AMXGroup2:
.83fa		8a		txa				txa 							; is it in group 2 ?
.83fb		29 20		and #$20			and 	#AM_ISG2
.83fd		f0 36		beq $8435			beq 	_AMXFail 				; no, give up.
.83ff		8a		txa				txa 							; get the offset into Y
.8400		29 1f		and #$1f			and 	#$1F
.8402		4a		lsr a				lsr 	a 						; make it 0-7.
.8403		4a		lsr a				lsr  	a
.8404		a8		tay				tay
.8405		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8408						_AMXCheckOkay:
.8408		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8409		88		dey				dey
.840a		10 fc		bpl $8408			bpl 	_AMXCheckOkay
.840c		90 27		bcc $8435			bcc 	_AMXFail 				; not allowed.
.840e		8a		txa				txa  							; get mask back
.840f		29 1f		and #$1f			and 	#$1F
.8411						_AMXHaveInfo:
.8411		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8413		10 04		bpl $8419			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8415		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8417		d0 1c		bne $8435			bne 	_AMXFail
.8419						_AMXAnySize:
.8419		18		clc				clc 							; add offset to the base opcode
.841a		6d 20 04	adc $0420			adc 	BaseOpcode
.841d						_AMXOutputCode:
.841d		20 89 83	jsr $8389			jsr 	AssemblerWriteByte 		; write the opcode out.
.8420		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8422		f0 0e		beq $8432			beq 	_AMXExit
.8424		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8426		20 89 83	jsr $8389			jsr 	AssemblerWriteByte
.8429		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.842b		30 05		bmi $8432			bmi 	_AMXExit
.842d		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.842f		20 89 83	jsr $8389			jsr 	AssemblerWriteByte
.8432						_AMXExit:
.8432		7a		ply				ply
.8433		38		sec				sec
.8434		60		rts				rts
.8435						_AMXFail:
.8435		a0 00		ldy #$00			ldy 	#0
.8437						_AMXCheckOddities:
.8437		8a		txa				txa
.8438		d9 5f 84	cmp $845f,y			cmp 	ExtraOpcode+2,y 		; match address mode
.843b		d0 15		bne $8452			bne 	_AMXCONext
.843d		b9 5d 84	lda $845d,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8440		cd 20 04	cmp $0420			cmp 	BaseOpcode
.8443		d0 0d		bne $8452			bne 	_AMXCONext
.8445		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8447		10 04		bpl $844d			bpl 	_AMXCONotZero
.8449		a5 60		lda $60				lda 	NSMantissa1
.844b		d0 05		bne $8452			bne 	_AMXCONext
.844d						_AMXCONotZero:
.844d		b9 5e 84	lda $845e,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8450		80 cb		bra $841d			bra 	_AMXOutputCode 			; and assemble it
.8452						_AMXCONext:
.8452		c8		iny				iny
.8453		c8		iny				iny
.8454		c8		iny				iny
.8455		b9 5d 84	lda $845d,y			lda 	ExtraOpcode+0,y 		; end of table
.8458		d0 dd		bne $8437			bne 	_AMXCheckOddities
.845a						_AMXCOFail:
.845a		7a		ply				ply
.845b		18		clc				clc
.845c		60		rts				rts
.845d						ExtraOpcode:
>845d		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8460		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8463		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8466		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8469		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>846c		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>846f		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8472		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8475		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8478		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>847b		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.847c						LabelHere:
.847c		c8		iny				iny 								; skip .
.847d		a2 00		ldx #$00			ldx 	#0 							; get a term
.847f		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm
.8482		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8484		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8486		d0 22		bne $84aa			bne 	_ALType 					; otherwise typing error
.8488		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.848a		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.848c		b5 60		lda $60,x			lda 	NSMantissa1,x
.848e		85 37		sta $37				sta 	zTemp0+1
.8490		5a		phy				phy 								; copy address in (64k)
.8491		a0 01		ldy #$01			ldy 	#1
.8493		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8496		92 36		sta ($36)			sta 	(zTemp0)
.8498		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.849b		91 36		sta ($36),y			sta 	(zTemp0),y
.849d		c8		iny				iny
.849e		a9 00		lda #$00			lda 	#0 							; zero the rest.
.84a0		91 36		sta ($36),y			sta 	(zTemp0),y
.84a2		c8		iny				iny
.84a3		91 36		sta ($36),y			sta 	(zTemp0),y
.84a5		c8		iny				iny
.84a6		91 36		sta ($36),y			sta 	(zTemp0),y
.84a8		7a		ply				ply
.84a9		60		rts				rts
.84aa						_ALType:
.84aa		4c cd b1	jmp $b1cd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.84ad						TypeAndCalculateOperand:
.84ad		b1 30		lda ($30),y			lda 	(codePtr),y
.84af		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.84b1		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.84b3		f0 5b		beq $8510			beq 	_TACOExit
.84b5		c9 80		cmp #$80			cmp 	#KWC_EOL
.84b7		f0 57		beq $8510			beq 	_TACOExit
.84b9		c8		iny				iny
.84ba		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.84bc		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.84be		f0 51		beq $8511			beq 	CalculateOperand
.84c0		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.84c2		f0 1f		beq $84e3			beq 	_TACOIndirect
.84c4		88		dey				dey 								; undo get of first character
.84c5		20 11 85	jsr $8511			jsr 	CalculateOperand 			; get operand
.84c8		b1 30		lda ($30),y			lda 	(codePtr),y
.84ca		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.84cc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84ce		d0 40		bne $8510			bne 	_TACOExit
.84d0		c8		iny				iny
.84d1		20 1b 85	jsr $851b			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.84d4		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.84d6		c9 58		cmp #$58			cmp 	#'X'
.84d8		f0 36		beq $8510			beq 	_TACOExit
.84da		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.84dc		c9 59		cmp #$59			cmp 	#'Y'
.84de		f0 30		beq $8510			beq 	_TACOExit
.84e0						_TACOSyntax:
.84e0		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.84e3						_TACOIndirect:
.84e3		20 11 85	jsr $8511			jsr 	CalculateOperand 			; get the operand
.84e6		b1 30		lda ($30),y			lda 	(codePtr),y
.84e8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.84ea		f0 17		beq $8503			beq 	_TACOIndX
.84ec		20 7d 97	jsr $977d			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.84ef		b1 30		lda ($30),y			lda 	(codePtr),y
.84f1		a2 d1		ldx #$d1			ldx 	#AM_IND
.84f3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.84f5		d0 19		bne $8510			bne 	_TACOExit
.84f7		c8		iny				iny
.84f8		20 1b 85	jsr $851b			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84fb		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84fd		d0 e1		bne $84e0			bne 	_TACOSyntax
.84ff		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8501		80 0d		bra $8510			bra 	_TACOExit
.8503						_TACOIndX:
.8503		c8		iny				iny
.8504		20 1b 85	jsr $851b			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8507		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8509		d0 d5		bne $84e0			bne 	_TACOSyntax
.850b		20 7d 97	jsr $977d			jsr 	CheckRightBracket			; check )
.850e		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8510						_TACOExit:
.8510		60		rts				rts
.8511						CalculateOperand:
.8511		48		pha				pha
.8512		da		phx				phx
.8513		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8515		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.8518		fa		plx				plx
.8519		68		pla				pla
.851a		60		rts				rts
.851b						TACOCheckXY:
.851b		b1 30		lda ($30),y			lda 	(codePtr),y
.851d		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.851f		c9 40		cmp #$40			cmp 	#$40
.8521		d0 21		bne $8544			bne 	_TCXYFail
.8523		b1 30		lda ($30),y			lda 	(codePtr),y
.8525		18		clc				clc
.8526		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8528		85 37		sta $37				sta 	zTemp0+1
.852a		c8		iny				iny
.852b		b1 30		lda ($30),y			lda 	(codePtr),y
.852d		c8		iny				iny
.852e		85 36		sta $36				sta 	zTemp0
.8530		5a		phy				phy 								; save position
.8531		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8533		b1 36		lda ($36),y			lda 	(zTemp0),y
.8535		d0 0c		bne $8543			bne 	_TCXYPopFail
.8537		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8539		b1 36		lda ($36),y			lda 	(zTemp0),y
.853b		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.853d		f0 08		beq $8547			beq 	_TCXYFound
.853f		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8541		f0 04		beq $8547			beq 	_TCXYFound
.8543						_TCXYPopFail:
.8543		7a		ply				ply
.8544						_TCXYFail:
.8544		a9 00		lda #$00			lda 	#0
.8546		60		rts				rts
.8547						_TCXYFound:
.8547		7a		ply				ply 								; restore position
.8548		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.854a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.854b						BackloadProgram:
.854b		20 c1 91	jsr $91c1			jsr 	NewProgram 					; does the actual NEW.
.854e		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.8550		a9 a2		lda #$a2			lda 	#_BLLoad & $FF
.8552		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.8555		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8557		8d 88 07	sta $0788			sta 	BackLoadPage
.855a		a9 00		lda #$00			lda 	#(($6000) & $FF)
.855c		8d 89 07	sta $0789			sta 	0+BackLoadPointer
.855f		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8561		8d 8a 07	sta $078a			sta 	1+BackLoadPointer
.8564		a9 ff		lda #$ff			lda 	#$FF
.8566		8d fa ff	sta $fffa			sta 	$FFFA
.8569						_BPLoop:
.8569		a2 ff		ldx #$ff			ldx 	#$FF
.856b		20 b7 85	jsr $85b7			jsr 	BLReadByte 					; read a byte
.856e		c9 00		cmp #$00			cmp 	#0
.8570		f0 29		beq $859b			beq 	_BPExit 					; if 0 exit
.8572		30 27		bmi $859b			bmi 	_BPExit 					; if -ve exit
.8574						_BPCopy:
.8574		e8		inx				inx  								; copy byte into the lineBuffer
.8575		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8578		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.857b		20 b7 85	jsr $85b7			jsr 	BLReadByte 					; read next byte
.857e		30 0a		bmi $858a			bmi 	_BPEndLine 					; -ve = EOL
.8580		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8582		d0 02		bne $8586			bne 	_BPNotTab
.8584		a9 20		lda #$20			lda 	#' '
.8586						_BPNotTab:
.8586		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8588		b0 ea		bcs $8574			bcs 	_BPCopy 					; until a control character, should be 13 received.
.858a						_BPEndLine:
.858a		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.858d		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8590		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8593		f0 d4		beq $8569			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8595		38		sec				sec 								; append not insert
.8596		20 b7 b3	jsr $b3b7			jsr 	MemoryInsertLine 			; append to current program
.8599		80 ce		bra $8569			bra 	_BPLoop
.859b						_BPExit:
.859b		9c fa ff	stz $fffa			stz 	$FFFA
.859e		20 a3 86	jsr $86a3			jsr 	ClearCommand 				; clear variables etc.
.85a1		60		rts				rts
.85a2						_BLLoad:
>85a2		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>85aa		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.85b7						BLReadByte:
.85b7		da		phx				phx
.85b8		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.85ba		ad 88 07	lda $0788			lda 	BackLoadPage	 			; set current page
.85bd		85 0b		sta $0b				sta 	8+3
.85bf		ad 89 07	lda $0789			lda 	BackLoadPointer 			; copy pointer to zTemp0
.85c2		85 36		sta $36				sta 	zTemp0
.85c4		ad 8a 07	lda $078a			lda 	BackLoadPointer+1
.85c7		85 37		sta $37				sta 	zTemp0+1
.85c9		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.85cb		ee 89 07	inc $0789			inc 	BackLoadPointer 			; bump pointer
.85ce		d0 0f		bne $85df			bne 	_BLNoCarry
.85d0		ee 8a 07	inc $078a			inc 	BackLoadPointer+1
.85d3		10 0a		bpl $85df			bpl 	_BLNoCarry 					; need a new page
.85d5		48		pha				pha
.85d6		a9 60		lda #$60			lda 	#$60 						; reset pointer
.85d8		8d 8a 07	sta $078a			sta 	BackLoadPointer+1
.85db		ee 88 07	inc $0788			inc 	BackLoadPage 				; next page from source.
.85de		68		pla				pla
.85df						_BLNoCarry:
.85df		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.85e1		fa		plx				plx
.85e2		c9 00		cmp #$00			cmp 	#0
.85e4		60		rts				rts
.0788						BackLoadPage:
>0788								.fill  	1
.0789						BackLoadPointer:
>0789								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.85e5						EditProgramCode:
.85e5		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.85e8		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.85eb		20 5b b4	jsr $b45b			jsr 	MemorySearch
.85ee		90 05		bcc $85f5			bcc 	_EPCNoDelete 				; reached the end : don't delete
.85f0		d0 03		bne $85f5			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.85f2		20 80 b3	jsr $b380			jsr 	MemoryDeleteLine 			; delete the line
.85f5						_EPCNoDelete:
.85f5		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.85f8		c9 80		cmp #$80			cmp 	#KWC_EOL
.85fa		f0 0d		beq $8609			beq 	_EPCNoInsert
.85fc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85ff		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8602		20 5b b4	jsr $b45b			jsr 	MemorySearch
.8605		18		clc				clc 								; insert at this point.
.8606		20 b7 b3	jsr $b3b7			jsr 	MemoryInsertLine 			; insert the line
.8609						_EPCNoInsert:
.8609		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.860a						WarmStart:
.860a		a2 ff		ldx #$ff			ldx 	#$FF
.860c		9a		txs				txs
.860d		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.860f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8612		20 9f 81	jsr $819f			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8615		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.8618		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.861b		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.861e		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8621		d0 17		bne $863a			bne 	_WSEditCode 				; if so,edit code.
.8623		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8626		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.8628		85 30		sta $30				sta 	codePtr
.862a		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.862c		85 31		sta $31				sta 	codePtr+1
.862e		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8631		c9 80		cmp #$80			cmp 	#KWC_EOL
.8633		f0 d5		beq $860a			beq 	WarmStart
.8635		20 5e 93	jsr $935e			jsr 	RUNCodePointerLine 			; execute that line.
.8638		80 d0		bra $860a			bra 	WarmStart
.863a						_WSEditCode:
.863a		20 e5 85	jsr $85e5			jsr 	EditProgramCode 			; edit the program code
.863d		20 a3 86	jsr $86a3			jsr 	ClearCommand 				; clear all variables etc.
.8640		80 c8		bra $860a			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8642						AssembleCommand:
.8642		a2 00		ldx #$00			ldx 	#0
.8644		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger 		; start address
.8647		a5 58		lda $58				lda 	NSMantissa0
.8649		8d 1a 04	sta $041a			sta 	AssemblerAddress
.864c		a5 60		lda $60				lda 	NSMantissa1
.864e		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8651		20 85 97	jsr $9785			jsr 	CheckComma
.8654		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; options 0-3
.8657		a5 58		lda $58				lda 	NSMantissa0
.8659		8d 1c 04	sta $041c			sta 	AssemblerControl
.865c		60		rts				rts
.865d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.865e						AssertCommand:
.865e		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8660		20 5d a6	jsr $a65d			jsr 	EvaluateInteger 			; the assert test
.8663		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; exit if result is non zero.
.8666		d0 05		bne $866d			bne 	_ACExit
.8668		a9 0a		lda #$0a		lda	#10
.866a		4c 96 97	jmp $9796		jmp	ErrorHandler
.866d						_ACExit:
.866d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.866e						CallCommand:
.866e		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8670		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.8673						_CCClear
.8673		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8674		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; these are optional sequentially.
.8677		e0 04		cpx #$04			cpx 	#4
.8679		d0 f8		bne $8673			bne 	_CCClear
.867b		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.867d						_CCCParam:
.867d		b1 30		lda ($30),y			lda 	(codePtr),y
.867f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8681		d0 09		bne $868c			bne 	_CCCRun6502
.8683		c8		iny				iny 								; skip comma
.8684		e8		inx				inx	 								; next level
.8685		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8688		e0 03		cpx #$03			cpx 	#3
.868a		90 f1		bcc $867d			bcc 	_CCCParam 					; done all 3 ?
.868c						_CCCRun6502:
.868c		5a		phy				phy 								; save position
.868d		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.868f		85 37		sta $37				sta 	zTemp0+1
.8691		a5 58		lda $58				lda 	NSMantissa0
.8693		85 36		sta $36				sta 	zTemp0
.8695		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8697		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8699		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.869b		20 a0 86	jsr $86a0			jsr 	_CCCZTemp0 					; call zTemp0
.869e		7a		ply				ply 								; restore position and exit
.869f		60		rts				rts
.86a0						_CCCZTemp0:
.86a0		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.86a3						ClearCommand:
.86a3		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.86a5		85 36		sta $36				sta 	0+zTemp0
.86a7		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.86a9		85 37		sta $37				sta 	1+zTemp0
.86ab						_ClearZeroLoop:
.86ab		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.86ad		f0 24		beq $86d3			beq 	_ClearZeroEnd
.86af		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.86b1		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.86b3						_ClearOneVariable:
.86b3		91 36		sta ($36),y			sta 	(zTemp0),y
.86b5		c8		iny				iny
.86b6		c0 08		cpy #$08			cpy 	#8
.86b8		d0 f9		bne $86b3			bne 	_ClearOneVariable
.86ba		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.86bc		b1 36		lda ($36),y			lda 	(zTemp0),y
.86be		c9 18		cmp #$18			cmp 	#NSTProcedure
.86c0		d0 04		bne $86c6			bne 	_ClearNotProcedure
.86c2		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.86c4		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.86c6						_ClearNotProcedure:
.86c6		18		clc				clc 								; go to the next variable
.86c7		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.86c9		65 36		adc $36				adc 	zTemp0
.86cb		85 36		sta $36				sta 	zTemp0
.86cd		90 dc		bcc $86ab			bcc 	_ClearZeroLoop
.86cf		e6 37		inc $37				inc 	zTemp0+1
.86d1		80 d8		bra $86ab			bra 	_ClearZeroLoop
.86d3						_ClearZeroEnd:
.86d3		18		clc				clc
.86d4		a5 36		lda $36				lda 	zTemp0
.86d6		69 01		adc #$01			adc 	#1
.86d8		8d 08 04	sta $0408			sta 	lowMemPtr
.86db		a5 37		lda $37				lda 	zTemp0+1
.86dd		69 00		adc #$00			adc 	#0
.86df		8d 09 04	sta $0409			sta 	lowMemPtr+1
.86e2		20 a3 b8	jsr $b8a3			jsr 	StackReset
.86e5		20 09 b9	jsr $b909			jsr 	StringSystemInitialise
.86e8		20 86 96	jsr $9686			jsr 	ProcedureScan
.86eb		20 00 93	jsr $9300			jsr 	Command_Restore
.86ee		9c 1a 04	stz $041a			stz 	AssemblerAddress
.86f1		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.86f4		9c 1c 04	stz $041c			stz 	AssemblerControl
.86f7		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.86fa		20 d0 a2	jsr $a2d0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.86fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.86fe						XLoadCommand:
.86fe		20 c1 91	jsr $91c1			jsr 	NewProgram
.8701		20 4b 85	jsr $854b			jsr 	BackloadProgram
.8704		4c 0a 86	jmp $860a			jmp 	WarmStart
.8707						XGoCommand:
.8707		20 c1 91	jsr $91c1			jsr 	NewProgram
.870a		20 4b 85	jsr $854b			jsr 	BackloadProgram
.870d		4c 4c 93	jmp $934c			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8710						Command_Data:
.8710		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8712		a2 80		ldx #$80			ldx 	#KWC_EOL
.8714		20 d8 96	jsr $96d8			jsr 	ScanForward
.8717		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8718						DimCommand:
.8718		b1 30		lda ($30),y			lda 	(codePtr),y
.871a		29 c0		and #$c0			and 	#$C0
.871c		c9 40		cmp #$40			cmp 	#$40
.871e		d0 7a		bne $879a			bne 	_DCSyntax 				; n o, error.
.8720		b1 30		lda ($30),y			lda 	(codePtr),y
.8722		18		clc				clc
.8723		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8725		85 3f		sta $3f				sta 	zaTemp+1
.8727		c8		iny				iny
.8728		b1 30		lda ($30),y			lda 	(codePtr),y
.872a		c8		iny				iny
.872b		85 3e		sta $3e				sta 	zaTemp
.872d		5a		phy				phy
.872e		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8730		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8732		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8734		c9 18		cmp #$18			cmp 	#NSTProcedure
.8736		f0 62		beq $879a			beq 	_DCSyntax
.8738		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.873a		29 04		and #$04			and 	#NSBIsArray
.873c		f0 64		beq $87a2			beq 	_DCType
.873e		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8740		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8742		d0 59		bne $879d			bne 	_DCRedefine
.8744		7a		ply				ply
.8745		20 a5 87	jsr $87a5			jsr 	_DCGetSize 				; get array size, check it.
.8748		5a		phy				phy
.8749		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.874b		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.874d		7a		ply				ply 							; is there a second (e.g. ,x)
.874e		b1 30		lda ($30),y			lda 	(codePtr),y
.8750		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8752		d0 0a		bne $875e			bne 	_DCOneDimension
.8754		c8		iny				iny 							; skip comma
.8755		20 a5 87	jsr $87a5			jsr 	_DCGetSize 				; get 2nd array size
.8758		5a		phy				phy
.8759		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.875b		91 3e		sta ($3e),y			sta 	(zaTemp),y
.875d		7a		ply				ply
.875e						_DCOneDimension:
.875e		5a		phy				phy 							; save position
.875f		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8761		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8763		aa		tax				tax
.8764		c8		iny				iny
.8765		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8767		e8		inx				inx 							; bump them.
.8768		1a		inc a				inc 	a
.8769		20 9b a6	jsr $a69b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.876c		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.876e		29 e0		and #$e0			and 	#$E0
.8770		d0 23		bne $8795			bne 	_DCSize
.8772		a0 02		ldy #$02			ldy 	#2 						; get base type
.8774		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8776		20 b3 87	jsr $87b3			jsr 	ScaleByBaseType 		; scale by base type
.8779		a5 36		lda $36				lda 	zTemp0
.877b		a6 37		ldx $37				ldx 	zTemp0+1
.877d		20 92 a2	jsr $a292			jsr 	AllocateXABytes 		; allocate memory
.8780		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8782		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8784		c8		iny				iny
.8785		8a		txa				txa
.8786		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8788		7a		ply				ply 							; get position back
.8789		20 7d 97	jsr $977d			jsr 	CheckRightBracket 		; check )
.878c		b1 30		lda ($30),y			lda 	(codePtr),y
.878e		c8		iny				iny 							; consume in case
.878f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8791		f0 85		beq $8718			beq 	DimCommand
.8793		88		dey				dey 							; undo consume
.8794		60		rts				rts
.8795						_DCSize:
.8795		a9 16		lda #$16		lda	#22
.8797		4c 96 97	jmp $9796		jmp	ErrorHandler
.879a						_DCSyntax:
.879a		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.879d						_DCRedefine:
.879d		a9 15		lda #$15		lda	#21
.879f		4c 96 97	jmp $9796		jmp	ErrorHandler
.87a2						_DCType:
.87a2		4c cd b1	jmp $b1cd			jmp 	TypeError
.87a5						_DCGetSize:
.87a5		a2 00		ldx #$00			ldx 	#0 						; get first index.
.87a7		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 	; get array dimension
.87aa		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.87ac		f0 e7		beq $8795			beq 	_DCSize
.87ae		c9 fe		cmp #$fe			cmp 	#254
.87b0		f0 e3		beq $8795			beq 	_DCSize
.87b2		60		rts				rts
.87b3						ScaleByBaseType:
.87b3		29 10		and #$10			and 	#NSBIsString 			; is it string
.87b5		d0 19		bne $87d0			bne 	_SBBTString
.87b7		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.87b9		48		pha				pha
.87ba		a5 36		lda $36				lda 	zTemp0
.87bc		48		pha				pha
.87bd		06 36		asl $36				asl 	zTemp0 					; x 2
.87bf		26 37		rol $37				rol 	zTemp0+1
.87c1		06 36		asl $36				asl 	zTemp0 					; x 4
.87c3		26 37		rol $37				rol 	zTemp0+1
.87c5		68		pla				pla 							; add stacked value = x 5
.87c6		65 36		adc $36				adc 	zTemp0
.87c8		85 36		sta $36				sta 	zTemp0
.87ca		68		pla				pla
.87cb		65 37		adc $37				adc 	zTemp0+1
.87cd		85 37		sta $37				sta 	zTemp0+1
.87cf		60		rts				rts
.87d0						_SBBTString:
.87d0		06 36		asl $36				asl 	zTemp0
.87d2		26 37		rol $37				rol 	zTemp0+1
.87d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.87d5						BootDOS:
.87d5		a9 e3		lda #$e3	            lda     #dosName & $FF
.87d7		85 fb		sta $fb		            sta     kernel.args.buf+0
.87d9		a9 87		lda #$87	            lda     #dosName >> 8
.87db		85 fc		sta $fc		            sta     kernel.args.buf+1
.87dd		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.87e0		4c 0a 86	jmp $860a	            jmp 	WarmStart
>87e3		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.87e7						EndCommand:
.87e7		4c 0a 86	jmp $860a			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.87ea						UnaryEvent:
.87ea		fa		plx				plx
.87eb		20 71 96	jsr $9671			jsr 	TimerToStackX 				; timer in +0
.87ee		e8		inx				inx  								; put reference into +1
.87ef		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm
.87f2		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.87f4		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.87f6		d0 4c		bne $8844			bne 	_UEType
.87f8		e8		inx				inx 								; put the step in +2
.87f9		20 85 97	jsr $9785			jsr 	CheckComma
.87fc		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.87ff		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.8802		ca		dex				dex
.8803		ca		dex				dex
.8804		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8806		85 36		sta $36				sta 	zTemp0
.8808		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.880a		85 37		sta $37				sta 	zTemp0+1
.880c		5a		phy				phy
.880d		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.880f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8811		30 2d		bmi $8840			bmi 	_UEFalse 					; exit if signed.
.8813		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8815		b5 58		lda $58,x			lda 	NSMantissa0,x
.8817		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8819		c8		iny				iny
.881a		b5 60		lda $60,x			lda 	NSMantissa1,x
.881c		f1 36		sbc ($36),y			sbc		(zTemp0),y
.881e		c8		iny				iny
.881f		b5 68		lda $68,x			lda 	NSMantissa2,x
.8821		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8823		90 1b		bcc $8840			bcc 	_UEFalse 					; no, return FALSE.
.8825		18		clc				clc
.8826		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8828		b5 58		lda $58,x			lda 	NSMantissa0,x
.882a		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.882c		91 36		sta ($36),y			sta 	(zTemp0),y
.882e		c8		iny				iny
.882f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8831		75 62		adc $62,x			adc 	NSMantissa1+2,x
.8833		91 36		sta ($36),y			sta 	(zTemp0),y
.8835		c8		iny				iny
.8836		b5 68		lda $68,x			lda 	NSMantissa2,x
.8838		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.883a		91 36		sta ($36),y			sta 	(zTemp0),y
.883c		7a		ply				ply
.883d		4c 03 98	jmp $9803			jmp 	ReturnTrue
.8840						_UEFalse:
.8840		7a		ply				ply 								; restore Y
.8841		4c 0e 98	jmp $980e			jmp 	ReturnFalse 				; and return False
.8844						_UEType:
.8844		4c cd b1	jmp $b1cd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.8847						Command_BLoad:
.8847		a2 00		ldx #$00			ldx 	#0
.8849		20 48 a6	jsr $a648			jsr 	EvaluateString 				; file name to load
.884c		20 85 97	jsr $9785			jsr 	CheckComma 					; consume comma
.884f		e8		inx				inx
.8850		20 5d a6	jsr $a65d			jsr 	EvaluateInteger 			; load address (full physical address)
.8853		5a		phy				phy
.8854		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8856		a6 60		ldx $60				ldx 	NSMantissa1
.8858		20 fe 81	jsr $81fe			jsr 	KNLOpenFileRead 			; open file for reading
.885b		b0 4e		bcs $88ab			bcs 	CBLErrorHandler 			; error, so fail.
.885d		8d 8f 07	sta $078f			sta 	BasicFileStream 			; save the reading stream.
.8860		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8862		20 ae 88	jsr $88ae			jsr 	BLOpenPhysicalMemory 		; open for access.
.8865						_BLReadFile:
.8865		ad 8f 07	lda $078f			lda 	BasicFileStream
.8868		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.886a		20 53 82	jsr $8253			jsr 	KNLReadBlock 				; read next block
.886d		b0 22		bcs $8891			bcs 	_BLFileError 				; file error, which might be EOF.
.886f		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8871		f0 f2		beq $8865			beq 	_BLReadFile
.8873		8d 8d 07	sta $078d			sta 	BLCopyCounter 				; counter.
.8876		ac 8c 07	ldy $078c			ldy 	BLYOffset 					; copy the buffer out here
.8879		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.887b						_BLCopyLoop:
.887b		bd 80 06	lda $0680,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.887e		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8880		c8		iny				iny
.8881		d0 03		bne $8886			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.8883		20 d6 88	jsr $88d6			jsr 	BLAdvancePhysicalMemory
.8886						_BLNoAdjust:
.8886		e8		inx				inx
.8887		ce 8d 07	dec $078d			dec 	BLCopyCounter
.888a		d0 ef		bne $887b			bne 	_BLCopyLoop
.888c		8c 8c 07	sty $078c			sty 	BLYOffset 					; update Y offset
.888f		80 d4		bra $8865			bra 	_BLReadFile 				; go ask for more.
.8891						_BLFileError:
.8891		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8893		d0 16		bne $88ab			bne 	CBLErrorHandler				; no, it's an actual error
.8895		20 d0 88	jsr $88d0			jsr 	BLClosePhysicalMemory 		; close the access.
.8898		ad 8f 07	lda $078f			lda 	BasicFileStream 			; close the file
.889b		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.889e		7a		ply				ply
.889f		60		rts				rts
.88a0						CBLCloseError:
.88a0		48		pha				pha
.88a1		20 d0 88	jsr $88d0			jsr 	BLClosePhysicalMemory
.88a4		ad 8f 07	lda $078f			lda 	BasicFileStream
.88a7		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.88aa		68		pla				pla
.88ab						CBLErrorHandler:
.88ab		4c 94 8a	jmp $8a94			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.88ae						BLOpenPhysicalMemory:
.88ae		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.88b0		8d 8b 07	sta $078b			sta 	BLNormalMapping
.88b3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.88b5		8d 8c 07	sta $078c			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.88b8		64 3a		stz $3a				stz 	zTemp2
.88ba		b5 60		lda $60,x			lda 	NSMantissa1,x
.88bc		29 1f		and #$1f			and 	#$1F
.88be		09 60		ora #$60			ora 	#BLAccessPage << 5
.88c0		85 3b		sta $3b				sta 	zTemp2+1
.88c2		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.88c4		16 60		asl $60,x			asl 	NSMantissa1,x
.88c6		2a		rol a				rol 	a
.88c7		16 60		asl $60,x			asl 	NSMantissa1,x
.88c9		2a		rol a				rol 	a
.88ca		16 60		asl $60,x			asl 	NSMantissa1,x
.88cc		2a		rol a				rol 	a
.88cd		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.88cf		60		rts				rts
.88d0						BLClosePhysicalMemory:
.88d0		ad 8b 07	lda $078b			lda 	BLNormalMapping
.88d3		85 0b		sta $0b				sta 	BLAccessPage+8
.88d5		60		rts				rts
.88d6						BLAdvancePhysicalMemory:
.88d6		48		pha				pha
.88d7		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.88d9		a5 3b		lda $3b				lda 	zTemp2+1
.88db		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.88dd		d0 06		bne $88e5			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.88df		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.88e1		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.88e3		85 3b		sta $3b				sta 	zTemp2+1
.88e5						_BLAPMExit:
.88e5		68		pla				pla
.88e6		60		rts				rts
.078b						BLNormalMapping:
>078b								.fill 	1
.078c						BLYOffset:
>078c								.fill 	1
.078d						BLCopyCounter:
>078d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.88e7						Command_BSave:
.88e7		a2 00		ldx #$00			ldx 	#0
.88e9		20 48 a6	jsr $a648			jsr 	EvaluateString 				; file name to load
.88ec		20 85 97	jsr $9785			jsr 	CheckComma 					; consume comma
.88ef		e8		inx				inx
.88f0		20 5d a6	jsr $a65d			jsr 	EvaluateInteger 			; load address (full physical address)
.88f3		20 85 97	jsr $9785			jsr 	CheckComma 					; consume comma
.88f6		e8		inx				inx
.88f7		20 5d a6	jsr $a65d			jsr 	EvaluateInteger 			; data length (3 bytes only)
.88fa		5a		phy				phy
.88fb		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.88fd		a6 60		ldx $60				ldx 	NSMantissa1
.88ff		20 f9 81	jsr $81f9			jsr 	KNLOpenFileWrite 			; open file for reading
.8902		b0 62		bcs $8966			bcs 	CBSErrorHandler 			; error, so fail.
.8904		8d 8f 07	sta $078f			sta 	BasicFileStream 			; save the reading stream.
.8907		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8909		20 ae 88	jsr $88ae			jsr 	BLOpenPhysicalMemory 		; open for access.
.890c		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.890e		ac 8c 07	ldy $078c			ldy 	BLYOffset 					; used for data offset.
.8911						_BSWriteToFileLoop:
.8911		38		sec				sec 								; pre decrement count.
.8912		a5 5a		lda $5a				lda 	NSMantissa0+2
.8914		e9 01		sbc #$01			sbc 	#1
.8916		85 5a		sta $5a				sta 	NSMantissa0+2
.8918		a5 62		lda $62				lda 	NSMantissa1+2
.891a		e9 00		sbc #$00			sbc 	#0
.891c		85 62		sta $62				sta 	NSMantissa1+2
.891e		a5 6a		lda $6a				lda 	NSMantissa2+2
.8920		e9 00		sbc #$00			sbc 	#0
.8922		85 6a		sta $6a				sta 	NSMantissa2+2
.8924		30 15		bmi $893b			bmi 	_BSFileComplete 			; undercounted, so exit.
.8926		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.8928		9d 80 06	sta $0680,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.892b		e8		inx				inx
.892c		c8		iny				iny 								; next byte
.892d		d0 03		bne $8932			bne 	_BSNoCheck
.892f		20 d6 88	jsr $88d6			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8932						_BSNoCheck:
.8932		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.8934		d0 db		bne $8911			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.8936		20 49 89	jsr $8949			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8939		80 d6		bra $8911			bra 	_BSWriteToFileLoop 			; and keep on going
.893b						_BSFileComplete:
.893b		20 49 89	jsr $8949			jsr 	BSFlushBuffer 				; write the buffer remainder.
.893e		20 d0 88	jsr $88d0			jsr 	BLClosePhysicalMemory 		; close the access.
.8941		ad 8f 07	lda $078f			lda 	BasicFileStream 			; close the file
.8944		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.8947		7a		ply				ply
.8948		60		rts				rts
.8949						BSFlushBuffer:
.8949		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.894b		f0 0d		beq $895a			beq 	_BSFBExit 					; if so, exit.
.894d		a9 80		lda #$80			lda 	#KNLReadBuffer & $FF 		; where to write from.
.894f		85 36		sta $36				sta 	zTemp0
.8951		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.8953		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8955		20 50 8b	jsr $8b50			jsr 	CLWriteByteBlock 			; write it.
.8958		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.895a						_BSFBExit:
.895a		60		rts				rts
.895b						CBSSCloseError:
.895b		48		pha				pha
.895c		20 d0 88	jsr $88d0			jsr 	BLClosePhysicalMemory
.895f		ad 8f 07	lda $078f			lda 	BasicFileStream
.8962		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.8965		68		pla				pla
.8966						CBSErrorHandler:
.8966		4c 94 8a	jmp $8a94			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.8969						Command_Dir:
.8969		ad 80 07	lda $0780			lda     KNLDefaultDrive				; set drive to list.
.896c		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.896e		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.8970		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8973		b0 4f		bcs $89c4			bcs     _CDExit
.8975						_CDEventLoop:
.8975		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8978		20 a8 81	jsr $81a8			jsr     GetNextEvent
.897b		b0 f8		bcs $8975			bcs     _CDEventLoop
.897d		ad 81 07	lda $0781			lda     KNLEvent.type
.8980		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8982		f0 40		beq $89c4			beq    	_CDExit
.8984		20 89 89	jsr $8989			jsr     _CDMessages 				; handle various messages
.8987		80 ec		bra $8975			bra     _CDEventLoop
.8989						_CDMessages:
.8989		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.898b		f0 15		beq $89a2			beq     _CDEVRead
.898d		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.898f		f0 19		beq $89aa			beq     _CDEVVolume
.8991		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8993		f0 32		beq $89c7			beq     _CDEVFile
.8995		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8997		f0 70		beq $8a09			beq     _CDEVFree
.8999		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.899b		f0 6e		beq $8a0b			beq     _CDEVEOF
.899d		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.899f		f0 6a		beq $8a0b			beq     _CDEVEOF
.89a1		60		rts				rts
.89a2						_CDEVRead:
.89a2		ad 84 07	lda $0784			lda     KNLEvent.directory.stream
.89a5		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.89a7		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.89aa						_CDEVVolume:
.89aa		a9 5b		lda #$5b			lda 	#"["
.89ac		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89af		ad 86 07	lda $0786			lda     KNLEvent.directory.volume.len
.89b2		20 13 8a	jsr $8a13			jsr     _CDReadData
.89b5		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.89b8		a9 5d		lda #$5d			lda 	#"]"
.89ba		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89bd		a9 0d		lda #$0d			lda 	#13
.89bf		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89c2		80 de		bra $89a2			bra     _CDEVRead
.89c4						_CDExit:
.89c4		4c 0a 86	jmp $860a			jmp 	WarmStart
.89c7						_CDEVFile:
.89c7		a9 20		lda #$20			lda 	#32
.89c9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89cc		ad 86 07	lda $0786			lda     KNLEvent.directory.file.len
.89cf		48		pha				pha
.89d0		20 13 8a	jsr $8a13			jsr     _CDReadData
.89d3		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.89d6		68		pla				pla
.89d7		49 ff		eor #$ff			eor 	#$FF
.89d9		38		sec				sec
.89da		69 10		adc #$10			adc 	#16
.89dc		aa		tax				tax
.89dd						_CDEVTab:
.89dd		a9 20		lda #$20			lda 	#32
.89df		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89e2		ca		dex				dex
.89e3		10 f8		bpl $89dd			bpl 	_CDEVTab
.89e5		20 2a 8a	jsr $8a2a			jsr 	_CDReadExtended
.89e8		ad 26 05	lda $0526			lda 	lineBuffer
.89eb		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.89ee		20 05 9c	jsr $9c05			jsr 	ConvertInt16
.89f1		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.89f4		a2 89		ldx #$89			ldx 	#_CDEVFMessage >> 8
.89f6		a9 fd		lda #$fd			lda 	#_CDEVFMessage & $FF
.89f8		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.89fb		80 a5		bra $89a2			bra     _CDEVRead
.89fd						_CDEVFMessage:
>89fd		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8a05		29 2e 0d 00
.8a09						_CDEVFree:
.8a09		80 00		bra $8a0b			bra     _CDEVEOF
.8a0b						_CDEVEOF:
.8a0b		ad 84 07	lda $0784			lda     KNLEvent.directory.stream
.8a0e		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8a10		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8a13						_CDReadData:
.8a13		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a15		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a17		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a19		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a1b		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a1d		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8a20		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8a22		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8a25		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8a27		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8a29		60		rts				rts
.8a2a						_CDReadExtended:
.8a2a		a9 02		lda #$02			lda     #2
.8a2c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a2e		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a30		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a32		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a34		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a36		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8a39						Command_Drive:
.8a39		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.8a3c		20 f5 81	jsr $81f5			jsr 	KNLSetDrive
.8a3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8a40						Command_Load:
.8a40		20 46 8a	jsr $8a46			jsr 	LoadFile
.8a43		4c 0a 86	jmp $860a			jmp 	WarmStart
.8a46						LoadFile:
.8a46		20 48 a6	jsr $a648			jsr 	EvaluateString 				; file name to load
.8a49		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a4b		a5 36		lda $36				lda 	zTemp0
.8a4d		20 fe 81	jsr $81fe			jsr 	KNLOpenFileRead 			; open file for reading
.8a50		b0 42		bcs $8a94			bcs 	CLErrorHandler 				; error, so fail.
.8a52		8d 8f 07	sta $078f			sta 	BasicFileStream 			; save the reading stream.
.8a55		20 e4 8a	jsr $8ae4			jsr     LoadReadByteInit            ; Init reader with the stream
.8a58		20 c1 91	jsr $91c1			jsr 	NewProgram 					; does the actual NEW.
.8a5b		9c 8e 07	stz $078e			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a5e						_CLLoop:
.8a5e		20 a2 8a	jsr $8aa2			jsr 	LoadReadLine 				; get next line.
.8a61		f0 10		beq $8a73			beq 	_CLExit 					; end, exit.
.8a63		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8a66		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8a69		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8a6c		f0 f0		beq $8a5e			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a6e		20 e5 85	jsr $85e5			jsr 	EditProgramCode 			; do the editing etc.
.8a71		80 eb		bra $8a5e			bra 	_CLLoop
.8a73						_CLExit:
.8a73		ad 8f 07	lda $078f			lda 	BasicFileStream
.8a76		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.8a79						CLComplete:
.8a79		a9 81		lda #$81			lda 	#_CLCMsg & $FF
.8a7b		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8a7d		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.8a80		60		rts				rts
.8a81						_CLCMsg:
>8a81		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8a89		2e 0d 00
.8a8c						CLCloseError:
.8a8c		48		pha				pha
.8a8d		ad 8f 07	lda $078f			lda 	BasicFileStream
.8a90		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.8a93		68		pla				pla
.8a94						CLErrorHandler:
.8a94		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a96		f0 05		beq $8a9d			beq 	_CLEHNotFound
.8a98		a9 1a		lda #$1a		lda	#26
.8a9a		4c 96 97	jmp $9796		jmp	ErrorHandler
.8a9d						_CLEHNotFound:
.8a9d		a9 19		lda #$19		lda	#25
.8a9f		4c 96 97	jmp $9796		jmp	ErrorHandler
.8aa2						LoadReadLine:
.8aa2		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8aa4		20 be 8a	jsr $8abe			jsr 	LoadReadCharacter
.8aa7		f0 14		beq $8abd			beq 	_LRLExit 					; eof ?
.8aa9		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8aab		90 f5		bcc $8aa2			bcc 	LoadReadLine
.8aad						_LRLLoop:
.8aad		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8ab0		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8ab3		e8		inx				inx
.8ab4		20 be 8a	jsr $8abe			jsr 	LoadReadCharacter 			; next line
.8ab7		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8ab9		b0 f2		bcs $8aad			bcs 	_LRLLoop
.8abb		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8abd						_LRLExit:
.8abd		60		rts				rts
.8abe						LoadReadCharacter:
.8abe		da		phx				phx
.8abf		5a		phy				phy
.8ac0		ad 8e 07	lda $078e			lda 	LoadEOFFlag 				; already done EOF.
.8ac3		d0 0c		bne $8ad1			bne 	_LRCIsEOF
.8ac5		20 ee 8a	jsr $8aee			jsr 	LoadReadByte 				; read a byte
.8ac8		90 09		bcc $8ad3			bcc		_LRCExit 					; read okay.
.8aca		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8acc		d0 be		bne $8a8c			bne 	CLCloseError
.8ace		ce 8e 07	dec $078e			dec 	LoadEOFFlag
.8ad1						_LRCIsEOF:
.8ad1		a9 00		lda #$00			lda 	#0
.8ad3						_LRCExit:
.8ad3		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8ad5		d0 02		bne $8ad9			bne 	_LRCNotTab
.8ad7		a9 20		lda #$20			lda 	#' '
.8ad9						_LRCNotTab:
.8ad9		c9 0a		cmp #$0a			cmp 	#$0A
.8adb		d0 02		bne $8adf			bne 	_LRCNotLF
.8add		a9 0d		lda #$0d			lda 	#$0D
.8adf						_LRCNotLF:
.8adf		7a		ply				ply
.8ae0		fa		plx				plx
.8ae1		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8ae3		60		rts				rts
.8ae4						LoadReadByteInit:
.8ae4		8d 90 07	sta $0790			sta     LoadFileStream 				; save stream
.8ae7		9c 91 07	stz $0791			stz     LoadNextCharacter 			; reset buffer
.8aea		9c 92 07	stz $0792			stz     LoadEndCharacter
.8aed		60		rts				rts
.8aee						LoadReadByte:
.8aee		da		phx				phx
.8aef		ae 91 07	ldx $0791			ldx     LoadNextCharacter 					; all data consumed ?
.8af2		ec 92 07	cpx $0792			cpx     LoadEndCharacter
.8af5		d0 12		bne $8b09			bne     _KNLRBGetNextByte
.8af7		ad 90 07	lda $0790			lda     LoadFileStream
.8afa		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8afc		20 53 82	jsr $8253			jsr     KNLReadBlock 				; read next chunk from the stream
.8aff		b0 0f		bcs $8b10			bcs     _KNLRBError 				; error has occurred on read.
.8b01		8d 92 07	sta $0792			sta     LoadEndCharacter 						; # read is the number available
.8b04		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8b06		8e 91 07	stx $0791			stx     LoadNextCharacter
.8b09						_KNLRBGetNextByte:
.8b09		bd 80 06	lda $0680,x			lda     KNLReadBuffer,x 			; get the next data item
.8b0c		ee 91 07	inc $0791			inc     LoadNextCharacter 					; and advance the index
.8b0f		18		clc				clc 								; succeeded
.8b10						_KNLRBError:
.8b10		fa		plx				plx
.8b11		60		rts				rts
.078e						LoadEOFFlag:
>078e								.fill 	1
.078f						BasicFileStream:
>078f								.fill 	1
.0790						LoadFileStream:
>0790								.byte   ?
.0791						LoadNextCharacter:
>0791								.byte   ?
.0792						LoadEndCharacter:
>0792								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8b12						Command_Save:
.8b12		20 48 a6	jsr $a648			jsr 	EvaluateString 				; file name to load
.8b15		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b17		a5 36		lda $36				lda 	zTemp0
.8b19		20 f9 81	jsr $81f9			jsr 	KNLOpenFileWrite 			; open file for writing
.8b1c		b0 2f		bcs $8b4d			bcs 	CSErrorHandler 				; error, so fail.
.8b1e		8d 8f 07	sta $078f			sta 	BasicFileStream 			; save the reading stream.
.8b21		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b23		85 30		sta $30				sta 	codePtr
.8b25		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b27		85 31		sta $31				sta 	codePtr+1
.8b29						_CSLoop:
.8b29		b2 30		lda ($30)			lda 	(codePtr)
.8b2b		f0 17		beq $8b44			beq 	_CSExit
.8b2d		20 71 8b	jsr $8b71			jsr 	CSGetCleanLine
.8b30		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8b32		85 36		sta $36				sta 	zTemp0
.8b34		20 50 8b	jsr $8b50			jsr 	CLWriteByteBlock 			; write the block out.
.8b37		18		clc				clc
.8b38		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b3a		65 30		adc $30				adc 	codePtr
.8b3c		85 30		sta $30				sta 	codePtr
.8b3e		90 02		bcc $8b42			bcc 	_CREExit
.8b40		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b42						_CREExit:
.8b42		80 e5		bra $8b29			bra 	_CSLoop
.8b44						_CSExit:
.8b44		ad 8f 07	lda $078f			lda 	BasicFileStream 			; close file
.8b47		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.8b4a		4c 79 8a	jmp $8a79			jmp 	CLComplete 					; display complete message.
.8b4d						CSErrorHandler:
.8b4d		4c 94 8a	jmp $8a94			jmp 	CLErrorHandler
.8b50						CLWriteByteBlock:
.8b50		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8b52		f0 1c		beq $8b70			beq 	_CLWBBExit					; if so, exit
.8b54		ad 8f 07	lda $078f			lda 	BasicFileStream 			; stream to write, count in X
.8b57		20 8e 82	jsr $828e			jsr 	KNLWriteBlock 				; call one write attempt
.8b5a		b0 f1		bcs $8b4d			bcs 	CSErrorHandler 				; error occurred
.8b5c		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8b5e		8a		txa				txa 								; subtract bytes written from X, total count.
.8b5f		38		sec				sec
.8b60		e5 38		sbc $38				sbc 	zTemp1
.8b62		aa		tax				tax
.8b63		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8b64		a5 36		lda $36				lda 	zTemp0
.8b66		65 38		adc $38				adc 	zTemp1
.8b68		85 36		sta $36				sta 	zTemp0
.8b6a		90 e4		bcc $8b50			bcc 	CLWriteByteBlock
.8b6c		e6 37		inc $37				inc 	zTemp0+1
.8b6e		80 e0		bra $8b50			bra 	CLWriteByteBlock 			; and retry write out.
.8b70						_CLWBBExit:
.8b70		60		rts				rts
.8b71						CSGetCleanLine:
.8b71		a9 00		lda #$00			lda 	#0 							; no indent.
.8b73		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8b76		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8b78		a0 00		ldy #$00			ldy 	#0
.8b7a						_CSClean:
.8b7a		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8b7d		f0 09		beq $8b88			beq 	_CSDoneClean
.8b7f		30 04		bmi $8b85			bmi 	_CSIgnoreCharacter
.8b81		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b84		e8		inx				inx
.8b85						_CSIgnoreCharacter:
.8b85		c8		iny				iny
.8b86		80 f2		bra $8b7a			bra 	_CSClean
.8b88						_CSDoneClean:
.8b88		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8b8a		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b8d		e8		inx				inx
.8b8e		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8b91		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8b93		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8b95		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.dc65						m
.8b96						Command_VERIFY:
.8b96		20 48 a6	jsr $a648			jsr 	EvaluateString 				; file name to verify
.8b99		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b9b		a5 36		lda $36				lda 	zTemp0
.8b9d		20 fe 81	jsr $81fe			jsr 	KNLOpenFileRead 			; open file for reading
.8ba0		b0 4b		bcs $8bed			bcs 	_CVErrorHandler 			; error, so fail.
.8ba2		8d 8f 07	sta $078f			sta 	BasicFileStream 			; save the reading stream.
.8ba5		20 e4 8a	jsr $8ae4			jsr     LoadReadByteInit            ; Init reader with the stream
.8ba8		9c 8e 07	stz $078e			stz 	LoadEOFFlag 				; clear EOF Flag.
.8bab		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bad		85 30		sta $30				sta 	codePtr
.8baf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bb1		85 31		sta $31				sta 	codePtr+1
.8bb3						_CVLoop:
.8bb3		20 a2 8a	jsr $8aa2			jsr 	LoadReadLine 				; get next line.
.8bb6		f0 27		beq $8bdf			beq 	_CVExit 					; end, exit.
.8bb8		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8bbb		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8bbe		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8bc1		f0 f0		beq $8bb3			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8bc3		a0 00		ldy #$00			ldy 	#0 							; start compare
.8bc5						_CVCompareLoop:
.8bc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8bc7		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8bca		d0 1c		bne $8be8			bne 	_CVCompareError
.8bcc		c8		iny				iny
.8bcd		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8bd0		d0 f3		bne $8bc5			bne 	_CVCompareLoop
.8bd2		18		clc				clc
.8bd3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bd5		65 30		adc $30				adc 	codePtr
.8bd7		85 30		sta $30				sta 	codePtr
.8bd9		90 02		bcc $8bdd			bcc 	_CREExit
.8bdb		e6 31		inc $31				inc 	codePtr+1 					; carry
.8bdd						_CREExit:
.8bdd		80 d4		bra $8bb3			bra 	_CVLoop
.8bdf						_CVExit:
.8bdf		ad 8f 07	lda $078f			lda 	BasicFileStream
.8be2		20 c8 82	jsr $82c8			jsr 	KNLCloseFile
.8be5		4c 79 8a	jmp $8a79			jmp 	CLComplete
.8be8						_CVCompareError:
.8be8		a9 1b		lda #$1b		lda	#27
.8bea		4c 96 97	jmp $9796		jmp	ErrorHandler
.8bed						_CVErrorHandler:
.8bed		4c 94 8a	jmp $8a94			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8bf0						ForCommand:
.8bf0		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8bf2		20 3d b8	jsr $b83d			jsr 	StackOpen
.8bf5		a2 00		ldx #$00			ldx 	#0
.8bf7		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm
.8bfa		b5 50		lda $50,x			lda 	NSStatus,x
.8bfc		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8bfe		d0 47		bne $8c47			bne		_FCError
.8c00		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c02		20 8d 97	jsr $978d			jsr 	CheckNextA
.8c05		e8		inx				inx
.8c06		20 5d a6	jsr $a65d			jsr 	EvaluateInteger 			; <from> in +1
.8c09		b1 30		lda ($30),y			lda 	(codePtr),y
.8c0b		c8		iny				iny 								; consume it
.8c0c		48		pha				pha 								; save on stack for later
.8c0d		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8c0f		f0 04		beq $8c15			beq 	_FCNoSyntax
.8c11		c9 db		cmp #$db			cmp 	#KWD_TO
.8c13		d0 35		bne $8c4a			bne 	_FCSyntaxError
.8c15						_FCNoSyntax:
.8c15		e8		inx				inx
.8c16		20 5d a6	jsr $a65d			jsr 	EvaluateInteger
.8c19		20 82 b8	jsr $b882			jsr 	STKSaveCodePosition 		; save loop back position
.8c1c		68		pla				pla 								; restore DOWNTO or TO
.8c1d		5a		phy				phy 								; save Y on the stack
.8c1e		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8c20		f0 02		beq $8c24			beq 	_FCNotDownTo
.8c22		a9 02		lda #$02			lda 	#2
.8c24						_FCNotDownTo:
.8c24		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8c25		a0 10		ldy #$10			ldy 	#16
.8c27		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8c29		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8c2b		a5 58		lda $58				lda 	NSMantissa0
.8c2d		91 34		sta ($34),y			sta 	(basicStack),y
.8c2f		a5 60		lda $60				lda 	NSMantissa1
.8c31		c8		iny				iny
.8c32		91 34		sta ($34),y			sta 	(basicStack),y
.8c34		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c36		a2 01		ldx #$01			ldx 	#1
.8c38		20 4d 8c	jsr $8c4d			jsr 	FCIntegerToStack
.8c3b		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8c3d		a2 02		ldx #$02			ldx 	#2
.8c3f		20 4d 8c	jsr $8c4d			jsr 	FCIntegerToStack
.8c42		20 68 8c	jsr $8c68			jsr 	CopyIndexToReference
.8c45		7a		ply				ply 								; restore position
.8c46		60		rts				rts
.8c47						_FCError:
.8c47		4c cd b1	jmp $b1cd			jmp 	TypeError
.8c4a						_FCSyntaxError:
.8c4a		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.8c4d						FCIntegerToStack:
.8c4d		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8c4f		10 03		bpl $8c54			bpl	 	_FCNotNegative
.8c51		20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c54						_FCNotNegative:
.8c54		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c56		91 34		sta ($34),y			sta 	(basicStack),y
.8c58		c8		iny				iny
.8c59		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c5b		91 34		sta ($34),y			sta 	(basicStack),y
.8c5d		c8		iny				iny
.8c5e		b5 68		lda $68,x			lda 	NSMantissa2,x
.8c60		91 34		sta ($34),y			sta 	(basicStack),y
.8c62		c8		iny				iny
.8c63		b5 70		lda $70,x			lda 	NSMantissa3,x
.8c65		91 34		sta ($34),y			sta 	(basicStack),y
.8c67		60		rts				rts
.8c68						CopyIndexToReference:
.8c68		5a		phy				phy
.8c69		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c6b		38		sec				sec 								; (because we copy from offset 8)
.8c6c		b1 34		lda ($34),y			lda 	(basicStack),y
.8c6e		e9 08		sbc #$08			sbc 	#8
.8c70		85 36		sta $36				sta 	zTemp0
.8c72		c8		iny				iny
.8c73		b1 34		lda ($34),y			lda 	(basicStack),y
.8c75		e9 00		sbc #$00			sbc 	#0
.8c77		85 37		sta $37				sta 	zTemp0+1
.8c79		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c7b		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c7d		b1 34		lda ($34),y			lda 	(basicStack),y
.8c7f		0a		asl a				asl 	a 							; into carry
.8c80		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c82		90 14		bcc $8c98			bcc 	_CITRNormal
.8c84		38		sec				sec
.8c85						_CITRNegative:
.8c85		a9 00		lda #$00			lda 	#0
.8c87		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c89		91 36		sta ($36),y			sta 	(zTemp0),y
.8c8b		c8		iny				iny
.8c8c		ca		dex				dex
.8c8d		d0 f6		bne $8c85			bne 	_CITRNegative
.8c8f		88		dey				dey 								; look at MSB of mantissa
.8c90		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c92		09 80		ora #$80			ora 	#$80
.8c94		91 36		sta ($36),y			sta 	(zTemp0),y
.8c96		7a		ply				ply
.8c97		60		rts				rts
.8c98						_CITRNormal:
.8c98		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c9a		91 36		sta ($36),y			sta 	(zTemp0),y
.8c9c		c8		iny				iny
.8c9d		ca		dex				dex
.8c9e		d0 f8		bne $8c98			bne 	_CITRNormal
.8ca0		7a		ply				ply 								; and exit.
.8ca1		60		rts				rts
.8ca2						NextCommand:
.8ca2		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8ca4		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8ca6		20 6a b8	jsr $b86a			jsr 	StackCheckFrame
.8ca9		5a		phy				phy
.8caa		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8cac		b1 34		lda ($34),y			lda 	(basicStack),y
.8cae		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8cb0		30 02		bmi $8cb4			bmi 	_NCStepNeg
.8cb2		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8cb4						_NCStepNeg:
.8cb4		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8cb6		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8cb8		18		clc				clc
.8cb9						_NCBump:
.8cb9		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8cbb		91 34		sta ($34),y			sta 	(basicStack),y
.8cbd		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8cbf		c8		iny				iny 								; next byte
.8cc0		ca		dex				dex 								; do four times
.8cc1		d0 f6		bne $8cb9			bne 	_NCBump
.8cc3		20 68 8c	jsr $8c68			jsr		CopyIndexToReference		; copy it to the reference variable.
.8cc6		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8cc8		b1 34		lda ($34),y			lda 	(basicStack),y
.8cca		0a		asl a				asl 	a 							; sign bit to carry
.8ccb		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ccd		85 38		sta $38				sta 	zTemp1
.8ccf		90 02		bcc $8cd3			bcc 	_NCCompRev 					; use if step is +ve
.8cd1		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8cd3						_NCCompRev:
.8cd3		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8cd5		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8cd7		85 39		sta $39				sta 	zTemp1+1
.8cd9		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8cdb		38		sec				sec
.8cdc						_NCCompare:
.8cdc		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8cde		b1 34		lda ($34),y			lda 	(basicStack),y
.8ce0		a4 39		ldy $39				ldy 	zTemp1+1
.8ce2		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ce4		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ce6		e6 39		inc $39				inc 	zTemp1+1
.8ce8		ca		dex				dex 								; do it 4 times.
.8ce9		d0 f1		bne $8cdc			bne 	_NCCompare
.8ceb		50 02		bvc $8cef			bvc 	_NCNoOverflow 				; convert to signed comparison
.8ced		49 80		eor #$80			eor 	#$80
.8cef						_NCNoOverflow:
.8cef		7a		ply				ply 								; restore Y position
.8cf0		0a		asl a				asl 	a 							; is bit 7 set.
.8cf1		90 04		bcc $8cf7			bcc 	_NCLoopBack 				; if no , >= so loop back
.8cf3		20 5c b8	jsr $b85c			jsr 	StackClose 					; exit the loop
.8cf6		60		rts				rts
.8cf7						_NCLoopBack:
.8cf7		20 93 b8	jsr $b893			jsr 	STKLoadCodePosition 		; loop back
.8cfa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8cfb						Command_GOSUB:
.8cfb		a2 00		ldx #$00			ldx 	#0
.8cfd		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d00		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d02		20 3d b8	jsr $b83d			jsr 	StackOpen 					; create frame
.8d05		20 82 b8	jsr $b882			jsr 	STKSaveCodePosition 		; save current position
.8d08		4c 1e 8d	jmp $8d1e			jmp 	GotoStackX
.8d0b						Command_RETURN:
.8d0b		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d0d		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d0f		20 6a b8	jsr $b86a			jsr 	StackCheckFrame
.8d12		20 93 b8	jsr $b893			jsr 	STKLoadCodePosition 		; restore code position
.8d15		20 5c b8	jsr $b85c			jsr 	StackClose
.8d18		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d19						GotoCommand:
.8d19		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d1b		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.8d1e						GotoStackX:
.8d1e		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8d20		48		pha				pha 								; it is slightly inefficient, just in cases.
.8d21		b5 58		lda $58,x			lda 	NSMantissa0,x
.8d23		fa		plx				plx
.8d24		20 5b b4	jsr $b45b			jsr 	MemorySearch 				; transfer to line number AX.
.8d27		90 05		bcc $8d2e			bcc 	_GotoError 					; not found, off end.
.8d29		d0 03		bne $8d2e			bne 	_GotoError 					; not found exactly
.8d2b		4c 57 93	jmp $9357			jmp 	RunNewLine 					; and go straight to new line code.
.8d2e						_GotoError:
.8d2e		a9 0d		lda #$0d		lda	#13
.8d30		4c 96 97	jmp $9796		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d33						IfCommand:
.8d33		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8d35		20 3e a6	jsr $a63e			jsr 	EvaluateNumber
.8d38		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3a		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8d3c		d0 0a		bne $8d48			bne 	_IfStructured 				; we still support it.
.8d3e		c8		iny				iny 								; consume THEN
.8d3f		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; is it zero
.8d42		f0 01		beq $8d45			beq 	_IfFail 					; if fail, go to next line
.8d44		60		rts				rts 								; if THEN just continue
.8d45						_IfFail:
.8d45		4c 32 93	jmp $9332			jmp 	EOLCommand
.8d48						_IfStructured:
.8d48		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; is it zero
.8d4b		d0 07		bne $8d54			bne 	_IfExit 					; if not, then continue normally.
.8d4d		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8d4f		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8d51		20 d8 96	jsr $96d8			jsr 	ScanForward 				; and run from there
.8d54						_IfExit:
.8d54		60		rts				rts
.8d55						ElseCode:
.8d55		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d57		aa		tax				tax 								; so just go to the structure exit
.8d58		20 d8 96	jsr $96d8			jsr 	ScanForward
.8d5b		60		rts				rts
.8d5c						EndIf:
.8d5c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8d5d						Command_Input:
.8d5d		9c 24 04	stz $0424			stz 	isPrintFlag
.8d60		80 0c		bra $8d6e			bra 	Command_IP_Main
.8d62						Command_CPrint:
.8d62		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8d64		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d67		80 05		bra $8d6e			bra 	Command_IP_Main
.8d69						Command_Print:
.8d69		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8d6b		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d6e						Command_IP_Main:
.8d6e		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8d6f						_CPLoop:
.8d6f		08		php				php 								; save last action flag
.8d70		b1 30		lda ($30),y			lda 	(codePtr),y
.8d72		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8d74		f0 54		beq $8dca			beq 	_CPExit
.8d76		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8d78		f0 50		beq $8dca			beq 	_CPExit
.8d7a		68		pla				pla 								; throw last action flag
.8d7b		b1 30		lda ($30),y			lda 	(codePtr),y
.8d7d		c8		iny				iny
.8d7e		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8d80		f0 45		beq $8dc7			beq 	_CPContinueWithSameLine
.8d82		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8d84		f0 3c		beq $8dc2			beq 	_CPTab
.8d86		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8d88		f0 34		beq $8dbe			beq 	_CPNewLine
.8d8a		88		dey				dey 								; undo the get.
.8d8b		20 98 9c	jsr $9c98			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8d8e		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8d90		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8d92		f0 0d		beq $8da1			beq 	_CPIsValue 					; no, display it.
.8d94		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8d97		d0 05		bne $8d9e			bne 	_CPIsPrint 					; otherwise display.
.8d99		20 d3 8d	jsr $8dd3			jsr 	CIInputValue 				; input a value to the reference
.8d9c		80 20		bra $8dbe			bra 	_CPNewLine
.8d9e						_CPIsPrint:
.8d9e		20 5d 9f	jsr $9f5d			jsr 	Dereference 				; dereference if required.
.8da1						_CPIsValue:
.8da1		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8da3		29 10		and #$10			and 	#NSBIsString
.8da5		f0 09		beq $8db0			beq 	_CPNumber
.8da7		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8da9		a5 58		lda $58				lda 	NSMantissa0
.8dab		20 36 8e	jsr $8e36			jsr 	CPPrintStringXA
.8dae		80 be		bra $8d6e			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8db0						_CPNumber:
.8db0		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8db2		20 25 a5	jsr $a525			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8db5		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8db7		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8db9		20 36 8e	jsr $8e36			jsr 	CPPrintStringXA 			; print it.
.8dbc		80 b0		bra $8d6e			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8dbe						_CPNewLine:
.8dbe		a9 0d		lda #$0d			lda 	#13
.8dc0		80 02		bra $8dc4			bra 	_CPPrintCharDirect
.8dc2						_CPTab:
.8dc2		a9 09		lda #$09			lda 	#9 							; print TAB
.8dc4						_CPPrintCharDirect:
.8dc4		20 51 8e	jsr $8e51			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8dc7						_CPContinueWithSameLine:
.8dc7		38		sec				sec 								; loop round with carry set, which
.8dc8		80 a5		bra $8d6f			bra 	_CPLoop 					; will inhibit final CR
.8dca						_CPExit:
.8dca		28		plp				plp 								; get last action flag
.8dcb		b0 05		bcs $8dd2			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8dcd		a9 0d		lda #$0d			lda 	#13 						; print new line
.8dcf		20 51 8e	jsr $8e51			jsr 	CPPVControl
.8dd2						_CPExit2:
.8dd2		60		rts				rts
.8dd3						CIInputValue:
.8dd3		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8dd5						_CIInputLine:
.8dd5		20 54 8e	jsr $8e54			jsr 	CPInputVector 				; get key
.8dd8		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8dda		f0 1f		beq $8dfb			beq 	_CIHaveValue
.8ddc		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8dde		f0 11		beq $8df1			beq 	_CIBackspace
.8de0		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8de2		90 f1		bcc $8dd5			bcc 	_CIInputLine
.8de4		e0 50		cpx #$50			cpx 	#80 						; max length
.8de6		b0 ed		bcs $8dd5			bcs 	_CIInputLine
.8de8		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8deb		e8		inx				inx
.8dec		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8def		80 e4		bra $8dd5			bra 	_CIInputLine
.8df1						_CIBackspace:
.8df1		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8df3		f0 e0		beq $8dd5			beq 	_CIInputLine
.8df5		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8df8		ca		dex				dex
.8df9		80 da		bra $8dd5			bra 	_CIInputLine
.8dfb						_CIHaveValue:
.8dfb		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8dfe		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8e00		29 10		and #$10			and 	#NSBIsString
.8e02		f0 17		beq $8e1b			beq 	_CIAssignNumber 			; assign a number
.8e04		a2 01		ldx #$01			ldx 	#1
.8e06		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e08		95 58		sta $58,x			sta 	NSMantissa0,x
.8e0a		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e0c		95 60		sta $60,x			sta 	NSMantissa1,x
.8e0e		74 68		stz $68,x			stz 	NSMantissa2,x
.8e10		74 70		stz $70,x			stz 	NSMantissa3,x
.8e12		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8e14		95 50		sta $50,x			sta  	NSStatus,x
.8e16		ca		dex				dex 								; X = 0
.8e17		20 c9 8e	jsr $8ec9			jsr 	AssignVariable
.8e1a		60		rts				rts
.8e1b						_CIAssignNumber:
.8e1b		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e1d		85 36		sta $36				sta 	zTemp0
.8e1f		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e21		85 37		sta $37				sta 	zTemp0+1
.8e23		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8e25		20 05 a4	jsr $a405			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8e28		90 07		bcc $8e31			bcc 	_CIIsOkay
.8e2a		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8e2c		20 49 8e	jsr $8e49			jsr 	CPPrintVector
.8e2f		80 a2		bra $8dd3			bra 	CIInputValue
.8e31						_CIIsOkay:
.8e31		ca		dex				dex 								; X = 0
.8e32		20 c9 8e	jsr $8ec9			jsr 	AssignVariable
.8e35		60		rts				rts
.8e36						CPPrintStringXA:
.8e36		5a		phy				phy
.8e37		86 37		stx $37				stx 	zTemp0+1
.8e39		85 36		sta $36				sta 	zTemp0
.8e3b		a0 00		ldy #$00			ldy 	#0
.8e3d						_PSXALoop:
.8e3d		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e3f		f0 06		beq $8e47			beq 	_PSXAExit
.8e41		20 49 8e	jsr $8e49			jsr 	CPPrintVector
.8e44		c8		iny				iny
.8e45		80 f6		bra $8e3d			bra 	_PSXALoop
.8e47						_PSXAExit:
.8e47		7a		ply				ply
.8e48		60		rts				rts
.8e49						CPPrintVector:
.8e49		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8e4c		30 03		bmi $8e51			bmi 	CPPVControl
.8e4e		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8e51						CPPVControl:
.8e51		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8e54						CPInputVector:
.8e54		4c 91 81	jmp $8191			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8e57						UnaryJoyX:
.8e57		18		clc				clc
.8e58		80 01		bra $8e5b			bra 	JoyMain
.8e5a						UnaryJoyY:
.8e5a		38		sec				sec
.8e5b						JoyMain:
.8e5b		fa		plx				plx 								; get pos
.8e5c		08		php				php 								; save carry (set for Y)
.8e5d		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e60		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.8e63		20 ce 82	jsr $82ce			jsr 	KNLReadController 			; read the controller.
.8e66		28		plp				plp
.8e67		b0 02		bcs $8e6b			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8e69		4a		lsr a				lsr 	a
.8e6a		4a		lsr a				lsr 	a
.8e6b						_JMNoShift:
.8e6b		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8e6c		b0 07		bcs $8e75			bcs 	JMIsLeft
.8e6e		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8e6f		b0 07		bcs $8e78			bcs 	JMIsRight
.8e71		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; zero result
.8e74		60		rts				rts
.8e75						JMIsLeft:
.8e75		4c 03 98	jmp $9803			jmp 	ReturnTrue
.8e78						JMIsRight:
.8e78		a9 01		lda #$01			lda 	#1
.8e7a		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.8e7d		60		rts				rts
.8e7e						UnaryJoyB:
.8e7e		fa		plx				plx 								; get pos
.8e7f		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e82		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.8e85		20 ce 82	jsr $82ce			jsr 	KNLReadController 			; read the controller.
.8e88		29 10		and #$10			and 	#$10
.8e8a		d0 e9		bne $8e75			bne 	JMIsLeft
.8e8c		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.8e8f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8e90						LetCommand:
.8e90		a2 00		ldx #$00			ldx 	#0
.8e92		b1 30		lda ($30),y			lda 	(codePtr),y
.8e94		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8e96		d0 14		bne $8eac			bne 	_LCStandard
.8e98		c8		iny				iny 								; skip equal
.8e99		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8e9c		20 5d 9f	jsr $9f5d			jsr 	Dereference 				; dereference it to a value
.8e9f		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8ea1		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8ea3		95 50		sta $50,x			sta 	NSStatus,x
.8ea5		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8ea7		d0 0f		bne $8eb8			bne 	_LCMain
.8ea9		4c cd b1	jmp $b1cd			jmp 	TypeError 					; was a reference before.
.8eac						_LCStandard:
.8eac		ad 82 9c	lda $9c82			lda 	PrecedenceLevel+"*"			; precedence > this
.8eaf		20 9c 9c	jsr $9c9c			jsr 	EvaluateExpressionAtPrecedence
.8eb2		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8eb4		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8eb6		f0 0e		beq $8ec6			beq 	_LetGoProc 					; it's a procedure call.
.8eb8						_LCMain:
.8eb8		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8eba		20 8d 97	jsr $978d			jsr 	CheckNextA
.8ebd		e8		inx				inx 								; RHS
.8ebe		20 35 a6	jsr $a635			jsr 	EvaluateValue
.8ec1		ca		dex				dex
.8ec2		20 c9 8e	jsr $8ec9			jsr 	AssignVariable
.8ec5		60		rts				rts
.8ec6						_LetGoProc:
.8ec6		4c 08 92	jmp $9208			jmp 	CallProcedure
.8ec9						AssignVariable:
.8ec9		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8ecb		48		pha				pha 								; save a copy
.8ecc		55 51		eor $51,x			eor 	NSStatus+1,x
.8ece		29 10		and #$10			and 	#NSBIsString
.8ed0		d0 0b		bne $8edd			bne 	_ASError
.8ed2		68		pla				pla 								; get back
.8ed3		29 10		and #$10			and 	#NSBIsString 				; check type
.8ed5		d0 03		bne $8eda			bne 	_ASString
.8ed7		4c 9b 9e	jmp $9e9b			jmp 	AssignNumber
.8eda						_ASString:
.8eda		4c f9 9e	jmp $9ef9			jmp 	AssignString
.8edd						_ASError:
.8edd		4c cd b1	jmp $b1cd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8ee0						Command_List:
.8ee0		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8ee3		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8ee5		20 75 80	jsr $8075			jsr 	SNDCommand
.8ee8		b1 30		lda ($30),y			lda 	(codePtr),y
.8eea		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8eec		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8eee		f0 72		beq $8f62			beq 	_CLListProcedure
.8ef0		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8ef2		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8ef4		a9 ff		lda #$ff			lda 	#$FF
.8ef6		85 5f		sta $5f				sta 	NSMantissa0+7
.8ef8		85 67		sta $67				sta 	NSMantissa1+7
.8efa		b1 30		lda ($30),y			lda 	(codePtr),y
.8efc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8efe		f0 1a		beq $8f1a			beq 	_CLSecond
.8f00		20 df 8f	jsr $8fdf			jsr 	CLIsDigit 					; if not digit, list all
.8f03		b0 20		bcs $8f25			bcs 	_CLStart
.8f05		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f07		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.8f0a		b1 30		lda ($30),y			lda 	(codePtr),y
.8f0c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f0e		f0 0a		beq $8f1a			beq 	_CLSecond 					; if so go get it
.8f10		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8f12		85 5f		sta $5f				sta 	NSMantissa0+7
.8f14		a5 64		lda $64				lda 	NSMantissa1+4
.8f16		85 67		sta $67				sta 	NSMantissa1+7
.8f18		80 0b		bra $8f25			bra 	_CLStart
.8f1a						_CLSecond:
.8f1a		c8		iny				iny 								; consume comma
.8f1b		20 df 8f	jsr $8fdf			jsr 	CLIsDigit 					; digit found
.8f1e		b0 05		bcs $8f25			bcs 	_CLStart 					; if not, continue listing
.8f20		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f22		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.8f25						_CLStart
.8f25		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f27		85 30		sta $30				sta 	codePtr
.8f29		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f2b		85 31		sta $31				sta 	codePtr+1
.8f2d						_CLLoop:
.8f2d		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f2f		f0 03		beq $8f34			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f31		20 37 81	jsr $8137			jsr 	ProcessEvents
.8f34						_NoEvents:
.8f34		d0 27		bne $8f5d			bne 	_CLBreak
.8f36		b2 30		lda ($30)			lda 	(codePtr)
.8f38		f0 20		beq $8f5a			beq 	_CLExit
.8f3a		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8f3c		20 ce 8f	jsr $8fce			jsr 	CLCompareLineNo
.8f3f		90 0c		bcc $8f4d			bcc 	_CLNext
.8f41		a2 07		ldx #$07			ldx 	#7
.8f43		20 ce 8f	jsr $8fce			jsr 	CLCompareLineNo
.8f46		f0 02		beq $8f4a			beq 	_CLDoThisOne
.8f48		b0 03		bcs $8f4d			bcs 	_CLNext
.8f4a						_CLDoThisOne:
.8f4a		20 bb 8f	jsr $8fbb			jsr 	CLListOneLine 				; routine to list the current line.
.8f4d						_CLNext:
.8f4d		18		clc				clc
.8f4e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f50		65 30		adc $30				adc 	codePtr
.8f52		85 30		sta $30				sta 	codePtr
.8f54		90 02		bcc $8f58			bcc 	_CREExit
.8f56		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f58						_CREExit:
.8f58		80 d3		bra $8f2d			bra 	_CLLoop
.8f5a						_CLExit:
.8f5a		4c 0a 86	jmp $860a			jmp 	WarmStart
.8f5d						_CLBreak:
.8f5d		a9 01		lda #$01		lda	#1
.8f5f		4c 96 97	jmp $9796		jmp	ErrorHandler
.8f62						_CLListProcedure:
.8f62		b1 30		lda ($30),y			lda 	(codePtr),y
.8f64		85 38		sta $38				sta 	zTemp1
.8f66		c8		iny				iny
.8f67		b1 30		lda ($30),y			lda 	(codePtr),y
.8f69		85 39		sta $39				sta 	zTemp1+1
.8f6b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f6d		85 30		sta $30				sta 	codePtr
.8f6f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f71		85 31		sta $31				sta 	codePtr+1
.8f73						_CLLPSearch:
.8f73		b2 30		lda ($30)			lda 	(codePtr)
.8f75		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8f77		f0 e1		beq $8f5a			beq 	_CLExit
.8f79		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8f7b		b1 30		lda ($30),y			lda 	(codePtr),y
.8f7d		c9 af		cmp #$af			cmp 	#KWD_PROC
.8f7f		d0 0e		bne $8f8f			bne 	_CLLPNext
.8f81		c8		iny				iny 								; check if PROC this.
.8f82		b1 30		lda ($30),y			lda 	(codePtr),y
.8f84		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8f86		d0 07		bne $8f8f			bne 	_CLLPNext
.8f88		c8		iny				iny
.8f89		b1 30		lda ($30),y			lda 	(codePtr),y
.8f8b		c5 39		cmp $39				cmp 	zTemp1+1
.8f8d		f0 0d		beq $8f9c			beq 	_CLLPFound
.8f8f						_CLLPNext:
.8f8f		18		clc				clc
.8f90		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f92		65 30		adc $30				adc 	codePtr
.8f94		85 30		sta $30				sta 	codePtr
.8f96		90 02		bcc $8f9a			bcc 	_CREExit
.8f98		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f9a						_CREExit:
.8f9a		80 d7		bra $8f73			bra 	_CLLPSearch
.8f9c						_CLLPFound:
.8f9c		b2 30		lda ($30)			lda 	(codePtr)
.8f9e		f0 ba		beq $8f5a			beq 	_CLExit
.8fa0		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8fa2		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa4		48		pha				pha
.8fa5		20 bb 8f	jsr $8fbb			jsr 	CLListOneLine 				; list line and go forward
.8fa8		18		clc				clc
.8fa9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fab		65 30		adc $30				adc 	codePtr
.8fad		85 30		sta $30				sta 	codePtr
.8faf		90 02		bcc $8fb3			bcc 	_CREExit
.8fb1		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fb3						_CREExit:
.8fb3		68		pla				pla 								; reached ENDPROC ?
.8fb4		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.8fb6		d0 e4		bne $8f9c			bne 	_CLLPFound
.8fb8		4c 0a 86	jmp $860a			jmp 	WarmStart
.8fbb						CLListOneLine:
.8fbb		20 3b 97	jsr $973b			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8fbe		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8fc1		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8fc3		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8fc5		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.8fc8		a9 0d		lda #$0d			lda 	#13 						; new line
.8fca		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8fcd		60		rts				rts
.8fce						CLCompareLineNo:
.8fce		38		sec				sec
.8fcf		a0 01		ldy #$01			ldy 	#1
.8fd1		b1 30		lda ($30),y			lda 	(codePtr),y
.8fd3		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8fd5		85 36		sta $36				sta 	zTemp0
.8fd7		c8		iny				iny
.8fd8		b1 30		lda ($30),y			lda 	(codePtr),y
.8fda		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8fdc		05 36		ora $36				ora 	zTemp0
.8fde		60		rts				rts
.8fdf						CLIsDigit:
.8fdf		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe1		c9 30		cmp #$30			cmp 	#"0"
.8fe3		90 03		bcc $8fe8			bcc	 	_CLIDExitFalse
.8fe5		c9 3a		cmp #$3a			cmp 	#"9"+1
.8fe7		60		rts				rts
.8fe8						_CLIDExitFalse:
.8fe8		38		sec				sec
.8fe9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8fea						Command_LOCAL:
.8fea		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8fec		20 f8 8f	jsr $8ff8			jsr 	LocaliseNextTerm 			; convert term to a local.
.8fef		b1 30		lda ($30),y			lda 	(codePtr),y
.8ff1		c8		iny				iny
.8ff2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ff4		f0 f4		beq $8fea			beq 	Command_LOCAL 				; if so, localise another variable.
.8ff6		88		dey				dey 								; unpick pre-get
.8ff7		60		rts				rts
.8ff8						LocaliseNextTerm:
.8ff8		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm 				; evaluate the term
.8ffb		b5 50		lda $50,x			lda 	NSStatus,x
.8ffd		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8fff		f0 5c		beq $905d			beq		_LNTError
.9001		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9003		85 36		sta $36				sta 	zTemp0
.9005		b5 60		lda $60,x			lda 	NSMantissa1,x
.9007		85 37		sta $37				sta  	zTemp0+1
.9009		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.900b		29 10		and #$10			and 	#NSBIsString
.900d		d0 1e		bne $902d			bne 	_LNTPushString
.900f		5a		phy				phy
.9010		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9012						_LNTPushNumLoop:
.9012		b1 36		lda ($36),y			lda		(zTemp0),y
.9014		20 1c b8	jsr $b81c			jsr 	StackPushByte
.9017		c8		iny				iny
.9018		c0 05		cpy #$05			cpy 	#5
.901a		d0 f6		bne $9012			bne 	_LNTPushNumLoop
.901c		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.901e		20 1c b8	jsr $b81c			jsr 	StackPushByte
.9021		a5 37		lda $37				lda 	zTemp0+1
.9023		20 1c b8	jsr $b81c			jsr 	StackPushByte
.9026		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.9028		20 1c b8	jsr $b81c			jsr 	StackPushByte
.902b		7a		ply				ply
.902c		60		rts				rts
.902d						_LNTPushString:
.902d		5a		phy				phy
.902e		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.9030		85 38		sta $38				sta 	zTemp1
.9032		a0 01		ldy #$01			ldy 	#1
.9034		b1 36		lda ($36),y			lda 	(zTemp0),y
.9036		85 39		sta $39				sta 	zTemp1+1
.9038		a0 00		ldy #$00			ldy 	#0 							; output string
.903a		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.903c		f0 0a		beq $9048			beq 	_LNTStringOut
.903e						_LNTPushStrLoop:
.903e		b1 38		lda ($38),y			lda 	(zTemp1),y
.9040		f0 06		beq $9048			beq 	_LNTStringOut
.9042		20 1c b8	jsr $b81c			jsr 	StackPushByte
.9045		c8		iny				iny
.9046		80 f6		bra $903e			bra 	_LNTPushStrLoop
.9048						_LNTStringOut:
.9048		98		tya				tya									; output length (chars written).
.9049		20 1c b8	jsr $b81c			jsr 	StackPushByte
.904c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.904e		20 1c b8	jsr $b81c			jsr 	StackPushByte
.9051		b5 60		lda $60,x			lda 	NSMantissa1,x
.9053		20 1c b8	jsr $b81c			jsr 	StackPushByte
.9056		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9058		20 1c b8	jsr $b81c			jsr 	StackPushByte
.905b		7a		ply				ply
.905c		60		rts				rts
.905d						_LNTError:
.905d		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.9060						LocalPopValue:
.9060		20 34 b8	jsr $b834			jsr 	StackPopByte
.9063		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9065		d0 17		bne $907e			bne 	_LPVString
.9067		20 34 b8	jsr $b834			jsr 	StackPopByte 				; address
.906a		85 37		sta $37				sta 	zTemp0+1
.906c		20 34 b8	jsr $b834			jsr 	StackPopByte
.906f		85 36		sta $36				sta 	zTemp0
.9071		5a		phy				phy
.9072		a0 04		ldy #$04			ldy 	#4 							; copy back
.9074						_LPVNumberCopy:
.9074		20 34 b8	jsr $b834			jsr 	StackPopByte
.9077		91 36		sta ($36),y			sta 	(zTemp0),y
.9079		88		dey				dey
.907a		10 f8		bpl $9074			bpl 	_LPVNumberCopy
.907c		7a		ply				ply 								; and complete
.907d		60		rts				rts
.907e						_LPVString:
.907e		20 34 b8	jsr $b834			jsr 	StackPopByte 				; address of record copied to zTemp0
.9081		85 37		sta $37				sta 	zTemp0+1
.9083		20 34 b8	jsr $b834			jsr 	StackPopByte
.9086		85 36		sta $36				sta 	zTemp0
.9088		5a		phy				phy
.9089		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.908b		85 38		sta $38				sta 	zTemp1
.908d		a0 01		ldy #$01			ldy 	#1
.908f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9091		85 39		sta $39				sta 	zTemp1+1
.9093		20 34 b8	jsr $b834			jsr 	StackPopByte 				; # chars to get => y
.9096		a8		tay				tay
.9097		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9099		f0 0e		beq $90a9			beq 	_LPVStringCopied
.909b		a9 00		lda #$00			lda 	#0 							; NULL on end
.909d		91 38		sta ($38),y			sta 	(zTemp1),y
.909f						_LPVStringCopy:
.909f		88		dey				dey
.90a0		30 07		bmi $90a9			bmi 	_LPVStringCopied
.90a2		20 34 b8	jsr $b834			jsr 	StackPopByte
.90a5		91 38		sta ($38),y			sta 	(zTemp1),y
.90a7		80 f6		bra $909f			bra 	_LPVStringCopy
.90a9						_LPVStringCopied:
.90a9		fa		plx				plx
.90aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.90ab						MCCommand:
.90ab		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.90ad		48		pha				pha
.90ae		64 01		stz $01				stz 	1
.90b0		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.90b3		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.90b5		8d 93 07	sta $0793			sta 	DMAControlByte
.90b8		20 66 91	jsr $9166			jsr 	MCPosition 					; start position
.90bb		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.90bd		20 37 91	jsr $9137			jsr 	MCCopyAddress
.90c0		a2 08		ldx #$08			ldx 	#8
.90c2		20 37 91	jsr $9137			jsr 	MCCopyAddress
.90c5		b1 30		lda ($30),y			lda 	(codePtr),y
.90c7		c8		iny				iny
.90c8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.90ca		f0 09		beq $90d5			beq 	_MCSize1D
.90cc		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.90ce		f0 11		beq $90e1			beq 	_MCRect2D
.90d0						_MCSyntax:
.90d0		a9 02		lda #$02		lda	#2
.90d2		4c 96 97	jmp $9796		jmp	ErrorHandler
.90d5						_MCSize1D:
.90d5		a2 00		ldx #$00			ldx 	#0 							; get size
.90d7		20 5d a6	jsr $a65d			jsr 	EvaluateInteger
.90da		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.90dc		20 37 91	jsr $9137			jsr 	MCCopyAddress
.90df		80 24		bra $9105			bra 	_MCDestination
.90e1						_MCRect2D:
.90e1		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.90e3		20 54 91	jsr $9154			jsr 	MCEvalCopyData16
.90e6		20 85 97	jsr $9785			jsr 	CheckComma
.90e9		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.90eb		20 54 91	jsr $9154			jsr 	MCEvalCopyData16
.90ee		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.90f0		20 8d 97	jsr $978d			jsr 	CheckNextA
.90f3		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.90f5		20 54 91	jsr $9154			jsr 	MCEvalCopyData16
.90f8		a2 12		ldx #$12			ldx 	#$12
.90fa		20 5b 91	jsr $915b			jsr 	MCCopyData16
.90fd		ad 93 07	lda $0793			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.9100		09 02		ora #$02			ora 	#$02
.9102		8d 93 07	sta $0793			sta 	DMAControlByte
.9105						_MCDestination:
.9105		b1 30		lda ($30),y			lda 	(codePtr),y
.9107		c8		iny				iny
.9108		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.910a		f0 0e		beq $911a			beq 	_MCDestPoke
.910c		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.910e		d0 c0		bne $90d0			bne 	_MCSyntax
.9110		20 66 91	jsr $9166			jsr 	MCPosition 					; get target address
.9113		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.9115		20 37 91	jsr $9137			jsr 	MCCopyAddress
.9118		80 0e		bra $9128			bra 	_MCDoDMA 					; and we can go.
.911a						_MCDestPoke:
.911a		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; POKE what
.911d		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.9120		ad 93 07	lda $0793			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.9123		09 04		ora #$04			ora 	#$04
.9125		8d 93 07	sta $0793			sta 	DMAControlByte
.9128						_MCDoDMA:
.9128		ad 93 07	lda $0793			lda 	DMAControlByte 				; set the DMA Control byte to go !
.912b		8d 00 df	sta $df00			sta 	$DF00
.912e						_MCWaitBUSD:
.912e		ad 01 df	lda $df01			lda 	$DF01
.9131		30 fb		bmi $912e			bmi 	_MCWaitBUSD
.9133		68		pla				pla 								; restore I/O.
.9134		85 01		sta $01				sta 	1
.9136		60		rts				rts
.9137						MCCopyAddress:
.9137		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.9139		29 fc		and #$fc			and 	#$FC
.913b		05 70		ora $70				ora 	NSMantissa3
.913d		d0 10		bne $914f			bne 	_MCRange
.913f		a5 58		lda $58				lda 	NSMantissa0
.9141		9d 00 df	sta $df00,x			sta 	$DF00,x
.9144		a5 60		lda $60				lda 	NSMantissa1
.9146		9d 01 df	sta $df01,x			sta 	$DF01,x
.9149		a5 68		lda $68				lda 	NSMantissa2
.914b		9d 02 df	sta $df02,x			sta 	$DF02,x
.914e		60		rts				rts
.914f						_MCRange:
.914f		a9 04		lda #$04		lda	#4
.9151		4c 96 97	jmp $9796		jmp	ErrorHandler
.9154						MCEvalCopyData16:
.9154		da		phx				phx
.9155		a2 00		ldx #$00			ldx 	#0
.9157		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.915a		fa		plx				plx
.915b						MCCopyData16:
.915b		a5 58		lda $58				lda 	NSMantissa0
.915d		9d 00 df	sta $df00,x			sta 	$DF00,x
.9160		a5 60		lda $60				lda 	NSMantissa1
.9162		9d 01 df	sta $df01,x			sta 	$DF01,x
.9165		60		rts				rts
.9166						MCPosition:
.9166		a2 00		ldx #$00			ldx 	#0 							; get start address.
.9168		b1 30		lda ($30),y			lda 	(codePtr),y
.916a		c9 b8		cmp #$b8			cmp 	#KWD_AT
.916c		f0 04		beq $9172			beq 	_MCPAt
.916e		20 5d a6	jsr $a65d			jsr 	EvaluateInteger
.9171		60		rts				rts
.9172						_MCPAt:
.9172		c8		iny				iny
.9173		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; X position
.9176		48		pha				pha
.9177		20 85 97	jsr $9785			jsr 	CheckComma
.917a		e8		inx				inx
.917b		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; Y position
.917e		ca		dex				dex
.917f		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.9181		64 58		stz $58				stz 	NSMantissa0
.9183		64 68		stz $68				stz 	NSMantissa2
.9185		64 70		stz $70				stz 	NSMantissa3
.9187		46 60		lsr $60				lsr 	NSMantissa1
.9189		66 58		ror $58				ror 	NSMantissa0
.918b		46 60		lsr $60				lsr 	NSMantissa1
.918d		66 58		ror $58				ror 	NSMantissa0
.918f		68		pla				pla
.9190		18		clc				clc
.9191		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.9193		85 58		sta $58				sta 	NSMantissa0
.9195		a5 60		lda $60				lda 	NSMantissa1
.9197		65 59		adc $59				adc 	NSMantissa0+1
.9199		85 60		sta $60				sta 	NSMantissa1
.919b		90 02		bcc $919f			bcc 	_MCPNoCarry
.919d		e6 68		inc $68				inc 	NSMantissa2
.919f						_MCPNoCarry:
.919f		ad bc 07	lda $07bc			lda 	gxBasePage
.91a2		85 69		sta $69				sta 	NSMantissa2+1
.91a4		64 59		stz $59				stz 	NSMantissa0+1
.91a6		64 61		stz $61				stz 	NSMantissa1+1
.91a8		64 71		stz $71				stz 	NSMantissa3+1
.91aa		a2 01		ldx #$01			ldx 	#1
.91ac		20 09 a7	jsr $a709			jsr 	NSMShiftRight
.91af		20 09 a7	jsr $a709			jsr 	NSMShiftRight
.91b2		20 09 a7	jsr $a709			jsr 	NSMShiftRight
.91b5		a2 00		ldx #$00			ldx 	#0
.91b7		20 90 9a	jsr $9a90			jsr 	AddTopTwoStack
.91ba		60		rts				rts
.0793						DMAControlByte:
>0793								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.91bb						NewCommand:
.91bb		20 c1 91	jsr $91c1			jsr 	NewProgram 					; does the actual NEW.
.91be		4c 0a 86	jmp $860a			jmp 	WarmStart 					; and warm starts straight away.
.91c1						NewProgram:
.91c1		20 3d b4	jsr $b43d			jsr 	MemoryNew
.91c4		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.91c7		20 a3 86	jsr $86a3			jsr 	ClearCommand 				; clear everything.
.91ca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.91cb						PokeBCommand:
.91cb		a9 01		lda #$01			lda 	#1
.91cd		80 0c		bra $91db			bra 	PokeCommand
.91cf						PokeWCommand:
.91cf		a9 02		lda #$02			lda 	#2
.91d1		80 08		bra $91db			bra 	PokeCommand
.91d3						PokeLCommand:
.91d3		a9 03		lda #$03			lda 	#3
.91d5		80 04		bra $91db			bra 	PokeCommand
.91d7						PokeDCommand:
.91d7		a9 04		lda #$04			lda 	#4
.91d9		80 00		bra $91db			bra 	PokeCommand
.91db						PokeCommand:
.91db		48		pha				pha 								; save count on stack
.91dc		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.91de		20 70 a6	jsr $a670			jsr		Evaluate16BitInteger 		; address
.91e1		20 85 97	jsr $9785			jsr 	CheckComma
.91e4		e8		inx				inx
.91e5		20 5d a6	jsr $a65d			jsr		EvaluateInteger 			; data
.91e8		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.91ea		85 36		sta $36				sta 	zTemp0
.91ec		a5 60		lda $60				lda 	NSMantissa1
.91ee		85 37		sta $37				sta 	zTemp0+1
.91f0		68		pla				pla 								; count -> zTemp1
.91f1		85 38		sta $38				sta 	zTemp1
.91f3		5a		phy				phy 								; save Y position.
.91f4		a0 00		ldy #$00			ldy 	#0 							; index to write
.91f6		a2 00		ldx #$00			ldx 	#0 							; index to read
.91f8						_PCLoop:
.91f8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.91fa		91 36		sta ($36),y			sta 	(zTemp0),y
.91fc		c8		iny				iny 								; next byte to write
.91fd		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.91fe		18		clc				clc
.91ff		69 08		adc #$08			adc 	#MathStackSize
.9201		aa		tax				tax
.9202		c6 38		dec $38				dec 	zTemp1 						; done them all
.9204		d0 f2		bne $91f8			bne 	_PCLoop
.9206		7a		ply				ply 								; restore position.
.9207		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.9208						CallProcedure:
.9208		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.920a		b1 30		lda ($30),y			lda 	(codePtr),y
.920c		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.920e		f0 0c		beq $921c			beq 	_CPEndParam
.9210						_CPParamLoop:
.9210		20 35 a6	jsr $a635			jsr 	EvaluateValue 				; get parameter onto stack
.9213		e8		inx				inx 								; bump next stack
.9214		b1 30		lda ($30),y			lda 	(codePtr),y
.9216		c8		iny				iny
.9217		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9219		f0 f5		beq $9210			beq 	_CPParamLoop
.921b		88		dey				dey 								; unpick.
.921c						_CPEndParam:
.921c		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.921f		c8		iny				iny									; skip right bracket
.9220		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9222		20 3d b8	jsr $b83d			jsr 	StackOpen
.9225		20 82 b8	jsr $b882			jsr 	STKSaveCodePosition 		; save loop position
.9228		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.922a		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.922c		a5 60		lda $60				lda 	NSMantissa1
.922e		85 37		sta $37				sta 	zTemp0+1
.9230		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9232		b2 36		lda ($36)			lda 	(zTemp0)
.9234		85 30		sta $30				sta 	safePtr
.9236		b1 36		lda ($36),y			lda 	(zTemp0),y
.9238		85 31		sta $31				sta 	safePtr+1
.923a		c8		iny				iny
.923b		b1 36		lda ($36),y			lda 	(zTemp0),y
.923d		85 32		sta $32				sta 	safePtr+2
.923f		c8		iny				iny
.9240		b1 36		lda ($36),y			lda 	(zTemp0),y
.9242		85 33		sta $33				sta 	safePtr+3
.9244		c8		iny				iny 								; get Y offset -> Y
.9245		b1 36		lda ($36),y			lda 	(zTemp0),y
.9247		a8		tay				tay
.9248		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.924a		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.924d		f0 13		beq $9262			beq 	_ParamExit 					; if so, exit.
.924f						_ParamExtract:
.924f		ca		dex				dex 								; put a local term on the level before
.9250		20 f8 8f	jsr $8ff8			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9253		20 c9 8e	jsr $8ec9			jsr 	AssignVariable 				; assign stacked value to the variable.
.9256		e8		inx				inx 								; advance to next parameter to do.
.9257		e8		inx				inx
.9258		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.925b		f0 05		beq $9262			beq 	_ParamExit
.925d		20 85 97	jsr $9785			jsr 	CheckComma 					; comma seperating parameters
.9260		80 ed		bra $924f			bra 	_ParamExtract
.9262						_ParamExit:
.9262		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; check )
.9265		60		rts				rts 								; and continue from here
.9266						Command_ENDPROC:
.9266		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9268		a2 14		ldx #$14			ldx 	#ERRID_PROC
.926a		20 6a b8	jsr $b86a			jsr 	StackCheckFrame
.926d		20 93 b8	jsr $b893			jsr 	STKLoadCodePosition 		; restore code position
.9270		20 5c b8	jsr $b85c			jsr 	StackClose
.9273		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9274						Command_Read:
.9274		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9276		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm
.9279		b5 50		lda $50,x			lda 	NSStatus,x
.927b		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.927d		f0 4f		beq $92ce			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.927f		20 17 93	jsr $9317			jsr 	SwapDataCodePtrs 			; swap code and data
.9282		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9285		d0 25		bne $92ac			bne 	_CRContinueData  			; forward for the next one.
.9287		b2 30		lda ($30)			lda 	(codePtr)
.9289		f0 1c		beq $92a7			beq 	_CRNoData
.928b						_CRKeepSearching:
.928b		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.928d		a2 80		ldx #$80			ldx 	#KWC_EOL
.928f		20 d8 96	jsr $96d8			jsr 	ScanForward
.9292		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.9294		f0 16		beq $92ac			beq 	_CRHaveData 				; found it
.9296		18		clc				clc
.9297		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9299		65 30		adc $30				adc 	codePtr
.929b		85 30		sta $30				sta 	codePtr
.929d		90 02		bcc $92a1			bcc 	_CREExit
.929f		e6 31		inc $31				inc 	codePtr+1 					; carry
.92a1						_CREExit:
.92a1		a0 03		ldy #$03			ldy 	#3 							; start of line.
.92a3		b2 30		lda ($30)			lda 	(codePtr)
.92a5		d0 e4		bne $928b			bne 	_CRKeepSearching
.92a7						_CRNoData:
.92a7		a9 0b		lda #$0b		lda	#11
.92a9		4c 96 97	jmp $9796		jmp	ErrorHandler
.92ac						_CRHaveData:
.92ac						_CRContinueData:
.92ac		a2 01		ldx #$01			ldx 	#1
.92ae		20 35 a6	jsr $a635			jsr 	EvaluateValue 				; evaluate value into slot # 1
.92b1		ca		dex				dex
.92b2		20 c9 8e	jsr $8ec9			jsr		AssignVariable 				; do the assignment
.92b5		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.92b8		b1 30		lda ($30),y			lda 	(codePtr),y
.92ba		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.92bc		d0 04		bne $92c2			bne 	_CRSwapBack
.92be		c8		iny				iny 								; consume comma
.92bf		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.92c2						_CRSwapBack:
.92c2		20 17 93	jsr $9317			jsr 	SwapDataCodePtrs			; swap them back.
.92c5		b1 30		lda ($30),y			lda 	(codePtr),y
.92c7		c8		iny				iny
.92c8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92ca		f0 a8		beq $9274			beq 	Command_Read 				; if so go round again.
.92cc		88		dey				dey 								; unpick get.
.92cd		60		rts				rts
.92ce						_CRSyntax:
.92ce		4c c3 b1	jmp $b1c3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.92d1						RemCommand:
.92d1		b1 30		lda ($30),y			lda 	(codePtr),y
.92d3		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.92d5		d0 06		bne $92dd			bne 	_RMExit
.92d7		c8		iny				iny 								; point to offset
.92d8		98		tya				tya 								; A = offset position
.92d9		38		sec				sec 								; add size +1 hence SEC
.92da		71 30		adc ($30),y			adc 	(codePtr),y
.92dc		a8		tay				tay 								; make current position.
.92dd						_RMExit:
.92dd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.92de						Command_REPEAT:
.92de		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.92e0		20 3d b8	jsr $b83d			jsr 	StackOpen
.92e3		20 82 b8	jsr $b882			jsr 	STKSaveCodePosition 		; save loop position
.92e6		60		rts				rts
.92e7						Command_UNTIL:
.92e7		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.92e9		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.92eb		20 6a b8	jsr $b86a			jsr 	StackCheckFrame
.92ee		a2 00		ldx #$00			ldx 	#0
.92f0		20 3e a6	jsr $a63e			jsr 	EvaluateNumber 				; work out the number
.92f3		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; check if zero
.92f6		f0 04		beq $92fc			beq 	_CULoopBack 				; if so keep looping
.92f8		20 5c b8	jsr $b85c			jsr 	StackClose		 			; return
.92fb		60		rts				rts
.92fc						_CULoopBack:
.92fc		20 93 b8	jsr $b893			jsr 	STKLoadCodePosition 		; loop back
.92ff		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9300						Command_Restore:
.9300		20 17 93	jsr $9317			jsr 	SwapDataCodePtrs 			; swap code and data
.9303		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9305		85 30		sta $30				sta 	codePtr
.9307		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9309		85 31		sta $31				sta 	codePtr+1
.930b		20 17 93	jsr $9317			jsr 	SwapDataCodePtrs 			; put them back
.930e		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9310		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.9313		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.9316		60		rts				rts
.9317						SwapDataCodePtrs:
.9317		da		phx				phx
.9318		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.931a						_SDCPLoop:
.931a		b5 30		lda $30,x			lda 	safePtr,x
.931c		48		pha				pha
.931d		bd 13 04	lda $0413,x			lda 	dataPointer,x
.9320		95 30		sta $30,x			sta 	safePtr,x
.9322		68		pla				pla
.9323		9d 13 04	sta $0413,x			sta 	dataPointer,x
.9326		ca		dex				dex
.9327		10 f1		bpl $931a			bpl 	_SDCPLoop
.9329		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.932c		8c 17 04	sty $0417			sty 	dataPointer+4
.932f		a8		tay				tay
.9330		fa		plx				plx
.9331		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9332						EOLCommand:
.9332		18		clc				clc
.9333		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9335		65 30		adc $30				adc 	codePtr
.9337		85 30		sta $30				sta 	codePtr
.9339		90 02		bcc $933d			bcc 	_CREExit
.933b		e6 31		inc $31				inc 	codePtr+1 					; carry
.933d						_CREExit:
.933d		80 18		bra $9357			bra 	RunNewLine
.933f						CommandRUNOptLoad:
.933f		b1 30		lda ($30),y			lda 	(codePtr),y
.9341		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.9343		f0 07		beq $934c			beq 	RunCurrentProgram
.9345		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9347		f0 03		beq $934c			beq 	RunCurrentProgram
.9349		20 46 8a	jsr $8a46			jsr 	LoadFile 					; load expected name file.
.934c						RunCurrentProgram:
.934c		20 a3 86	jsr $86a3			jsr 	ClearCommand 				; clear variable/stacks/etc.
.934f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9351		85 30		sta $30				sta 	codePtr
.9353		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9355		85 31		sta $31				sta 	codePtr+1
.9357						RunNewLine:
.9357		b2 30		lda ($30)			lda 	(codePtr)
.9359		f0 74		beq $93cf			beq 	CRNoProgram         		; no then END.
.935b		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.935d		9a		txs				txs
.935e						RUNCodePointerLine:
.935e		a0 02		ldy #$02			ldy 	#2 							; start of program
.9360						_CRIncMainLoop:
.9360		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.9362		f0 03		beq $9367			beq 	_NoEvents					; if zero, skip with Z flag set.
.9364		20 37 81	jsr $8137			jsr 	ProcessEvents
.9367						_NoEvents:
.9367		d0 61		bne $93ca			bne 	_CRBreak
.9369		a5 01		lda $01				lda 	1 							; save I/O 0
.936b		48		pha				pha
.936c		64 01		stz $01				stz 	1 							; access I/O Page 0
.936e		38		sec				sec 								; calculate timer - LastTick
.936f		ad 59 d6	lda $d659			lda 	$D659
.9372		cd 5e 06	cmp $065e			cmp 	LastTick
.9375		f0 06		beq $937d			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9377		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.937a		20 99 81	jsr $8199			jsr 	TickHandler 							; go do the code.
.937d						_NoFireTick:
.937d		68		pla				pla 								; restore I/O 0
.937e		85 01		sta $01				sta 	1
.9380						_CRNoBreakCheck:
.9380		c8		iny				iny									; next token
.9381						_CRMainLoop:
.9381		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9384		b1 30		lda ($30),y			lda 	(codePtr),y
.9386		10 10		bpl $9398			bpl 	_CRNotKeyword				; not a token.
.9388		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.938a		b0 04		bcs $9390			bcs 	_CRIsKeyword
.938c		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.938e		b0 34		bcs $93c4			bcs		_CRSyntaxError
.9390						_CRIsKeyword:
.9390		c8		iny				iny 								; consume command
.9391		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9392		aa		tax				tax 								; put in X for vector jump
.9393		20 c7 93	jsr $93c7			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9396		80 e9		bra $9381			bra 	_CRMainLoop 				; and loop round
.9398						_CRNotKeyword:
.9398		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.939a		f0 c4		beq $9360			beq 	_CRIncMainLoop
.939c		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.939e		90 05		bcc $93a5			bcc 	_CRNotVariable
.93a0						_CRGoLet:
.93a0		20 90 8e	jsr $8e90			jsr 	LetCommand
.93a3		80 dc		bra $9381			bra 	_CRMainLoop
.93a5						_CRNotVariable:
.93a5		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.93a7		f0 f7		beq $93a0			beq 	_CRGoLet
.93a9		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.93ab		f0 f3		beq $93a0			beq 	_CRGoLet
.93ad		c9 21		cmp #$21			cmp 	#KWD_PLING
.93af		f0 ef		beq $93a0			beq 	_CRGoLet
.93b1		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.93b3		f0 09		beq $93be			beq 	_CRGoRem
.93b5		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.93b7		d0 0b		bne $93c4			bne 	_CRSyntaxError
.93b9		20 7c 84	jsr $847c			jsr 	LabelHere
.93bc		80 c3		bra $9381			bra 	_CRMainLoop
.93be						_CRGoRem:
.93be		c8		iny				iny
.93bf		20 d1 92	jsr $92d1			jsr 	RemCommand
.93c2		80 bd		bra $9381			bra 	_CRMainLoop
.93c4						_CRSyntaxError:
.93c4		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.93c7						_CRCallVector0:
.93c7		7c 66 94	jmp ($9466,x)			jmp 	(VectorSet0,x)
.93ca						_CRBreak:
.93ca		a9 01		lda #$01		lda	#1
.93cc		4c 96 97	jmp $9796		jmp	ErrorHandler
.93cf						CRNoProgram:
.93cf		4c e7 87	jmp $87e7			jmp 	EndCommand
.93d2						Shift1Command:
.93d2		b1 30		lda ($30),y			lda 	(codePtr),y
.93d4		c8		iny				iny
.93d5		0a		asl a				asl 	a
.93d6		aa		tax				tax
.93d7		7c 1e 95	jmp ($951e,x)			jmp 	(VectorSet1,x)
.93da						Shift2Command:
.93da		b1 30		lda ($30),y			lda 	(codePtr),y
.93dc		c8		iny				iny
.93dd		0a		asl a				asl 	a
.93de		aa		tax				tax
.93df		7c 6c 95	jmp ($956c,x)			jmp 	(VectorSet2,x)
.93e2						Unused1:
.93e2						Unused2:
.93e2						Unused3:
.93e2						Unused4:
.93e2		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
>93e5								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.93e6						VectorSetPunc:
>93e6		4e 9a					.word	ShiftLeft                        ; $00 <<
>93e8		39 98					.word	BinaryCompareLessEqual           ; $01 <=
>93ea		2f 98					.word	BinaryCompareNotEqual            ; $02 <>
>93ec		c3 b1					.word	SyntaxError                      ; $03 !!3
>93ee		c3 b1					.word	SyntaxError                      ; $04 ><
>93f0		43 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>93f2		51 9a					.word	ShiftRight                       ; $06 >>
>93f4		c3 b1					.word	SyntaxError                      ; $07 !!7
>93f6		c3 b1					.word	SyntaxError                      ; $08 !!8
>93f8		c3 b1					.word	SyntaxError                      ; $09 !!9
>93fa		c3 b1					.word	SyntaxError                      ; $0a !!10
>93fc		c3 b1					.word	SyntaxError                      ; $0b !!11
>93fe		c3 b1					.word	SyntaxError                      ; $0c !!12
>9400		c3 b1					.word	SyntaxError                      ; $0d !!13
>9402		c3 b1					.word	SyntaxError                      ; $0e !!14
>9404		c3 b1					.word	SyntaxError                      ; $0f !!15
>9406		c3 b1					.word	SyntaxError                      ; $10 @
>9408		c3 b1					.word	SyntaxError                      ; $11 !!17
>940a		c3 b1					.word	SyntaxError                      ; $12 !!18
>940c		c3 b1					.word	SyntaxError                      ; $13 [
>940e		fa 98					.word	IntegerDivide                    ; $14 \
>9410		c3 b1					.word	SyntaxError                      ; $15 ]
>9412		8c 9b					.word	EorInteger                       ; $16 ^
>9414		c3 b1					.word	SyntaxError                      ; $17 _
>9416		c3 b1					.word	SyntaxError                      ; $18 `
>9418		c3 b1					.word	SyntaxError                      ; $19 !!25
>941a		c3 b1					.word	SyntaxError                      ; $1a !!26
>941c		c3 b1					.word	SyntaxError                      ; $1b {
>941e		57 9b					.word	OraInteger                       ; $1c |
>9420		c3 b1					.word	SyntaxError                      ; $1d }
>9422		c3 b1					.word	SyntaxError                      ; $1e ~
>9424		c3 b1					.word	SyntaxError                      ; $1f <7F>
>9426		c3 b1					.word	SyntaxError                      ; $20
>9428		c1 9b					.word	WordIndirect                     ; $21 !
>942a		c3 b1					.word	SyntaxError                      ; $22 "
>942c		c3 b1					.word	SyntaxError                      ; $23 #
>942e		c3 b1					.word	SyntaxError                      ; $24 $
>9430		3b 99					.word	IntegerModulus                   ; $25 %
>9432		22 9b					.word	AndInteger                       ; $26 &
>9434		c3 b1					.word	SyntaxError                      ; $27 '
>9436		c3 b1					.word	SyntaxError                      ; $28 (
>9438		c3 b1					.word	SyntaxError                      ; $29 )
>943a		a9 99					.word	MulInteger                       ; $2a *
>943c		c4 9a					.word	AddInteger                       ; $2b +
>943e		c3 b1					.word	SyntaxError                      ; $2c ,
>9440		fd 9a					.word	SubInteger                       ; $2d -
>9442		c3 b1					.word	SyntaxError                      ; $2e .
>9444		7b 9d					.word	FDivideCommand                   ; $2f /
>9446		c3 b1					.word	SyntaxError                      ; $30 0
>9448		c3 b1					.word	SyntaxError                      ; $31 1
>944a		c3 b1					.word	SyntaxError                      ; $32 2
>944c		c3 b1					.word	SyntaxError                      ; $33 3
>944e		c3 b1					.word	SyntaxError                      ; $34 4
>9450		c3 b1					.word	SyntaxError                      ; $35 5
>9452		c3 b1					.word	SyntaxError                      ; $36 6
>9454		c3 b1					.word	SyntaxError                      ; $37 7
>9456		c3 b1					.word	SyntaxError                      ; $38 8
>9458		c3 b1					.word	SyntaxError                      ; $39 9
>945a		c3 b1					.word	SyntaxError                      ; $3a :
>945c		c3 b1					.word	SyntaxError                      ; $3b ;
>945e		1b 98					.word	BinaryCompareLess                ; $3c <
>9460		11 98					.word	BinaryCompareEqual               ; $3d =
>9462		25 98					.word	BinaryCompareGreater             ; $3e >
>9464		e3 9b					.word	ByteIndirect                     ; $3f ?
.9466						VectorSet0:
>9466		32 93					.word	EOLCommand                       ; $80 !0:EOF
>9468		d2 93					.word	Shift1Command                    ; $81 !1:SH1
>946a		da 93					.word	Shift2Command                    ; $82 !2:SH2
>946c		65 a2					.word	AbsUnary                         ; $83 ABS(
>946e		73 a2					.word	AllocUnary                       ; $84 ALLOC(
>9470		e3 a2					.word	AscUnary                         ; $85 ASC(
>9472		34 a4					.word	ChrUnary                         ; $86 CHR$(
>9474		ea 87					.word	UnaryEvent                       ; $87 EVENT(
>9476		0d 98					.word	UnaryFalse                       ; $88 FALSE
>9478		f0 a2					.word	FracUnary                        ; $89 FRAC(
>947a		c7 af					.word	ChrGet                           ; $8a GET$(
>947c		a3 af					.word	AscGet                           ; $8b GET(
>947e		4d af					.word	UnaryGetDate                     ; $8c GETDATE$(
>9480		49 af					.word	UnaryGetTime                     ; $8d GETTIME$(
>9482		de b6					.word	UnaryHit                         ; $8e HIT(
>9484		ce af					.word	ChrInkey                         ; $8f INKEY$(
>9486		bc af					.word	AscInkey                         ; $90 INKEY(
>9488		05 a3					.word	IntUnary                         ; $91 INT(
>948a		f3 a3					.word	IsValUnary                       ; $92 ISVAL(
>948c		46 a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>948e		6a a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>9490		7e 8e					.word	UnaryJoyB                        ; $95 JOYB(
>9492		57 8e					.word	UnaryJoyX                        ; $96 JOYX(
>9494		5a 8e					.word	UnaryJoyY                        ; $97 JOYY(
>9496		e7 af					.word	KeyDown                          ; $98 KEYDOWN(
>9498		a9 a5					.word	Unary_Left                       ; $99 LEFT$(
>949a		16 a3					.word	LenUnary                         ; $9a LEN(
>949c		34 a3					.word	Unary_Max                        ; $9b MAX(
>949e		cb a5					.word	Unary_Mid                        ; $9c MID$(
>94a0		30 a3					.word	Unary_Min                        ; $9d MIN(
>94a2		7f a3					.word	Unary_Not                        ; $9e NOT(
>94a4		92 a3					.word	PeekByteUnary                    ; $9f PEEK(
>94a6		9e a3					.word	PeekDUnary                       ; $a0 PEEKD(
>94a8		9a a3					.word	PeekLUnary                       ; $a1 PEEKL(
>94aa		96 a3					.word	PeekWUnary                       ; $a2 PEEKW(
>94ac		9a b7					.word	UnaryPlaying                     ; $a3 PLAYING(
>94ae		01 b0					.word	Unary_Random                     ; $a4 RANDOM(
>94b0		b6 a5					.word	Unary_Right                      ; $a5 RIGHT$(
>94b2		1b b0					.word	Unary_Rnd                        ; $a6 RND(
>94b4		cb a3					.word	SgnUnary                         ; $a7 SGN(
>94b6		e8 a4					.word	SpcUnary                         ; $a8 SPC(
>94b8		03 a5					.word	Unary_Str                        ; $a9 STR$(
>94ba		6d 96					.word	UnaryTimer                       ; $aa TIMER(
>94bc		02 98					.word	UnaryTrue                        ; $ab TRUE
>94be		e9 a3					.word	ValUnary                         ; $ac VAL(
>94c0		f0 8b					.word	ForCommand                       ; $ad FOR
>94c2		33 8d					.word	IfCommand                        ; $ae IF
>94c4		e2 93					.word	Unused1                          ; $af PROC
>94c6		de 92					.word	Command_REPEAT                   ; $b0 REPEAT
>94c8		4e 97					.word	Command_WHILE                    ; $b1 WHILE
>94ca		5c 8d					.word	EndIf                            ; $b2 ENDIF
>94cc		66 92					.word	Command_ENDPROC                  ; $b3 ENDPROC
>94ce		a2 8c					.word	NextCommand                      ; $b4 NEXT
>94d0		e2 93					.word	Unused4                          ; $b5 THEN
>94d2		e7 92					.word	Command_UNTIL                    ; $b6 UNTIL
>94d4		6f 97					.word	Command_WEND                     ; $b7 WEND
>94d6		c3 b1					.word	SyntaxError                      ; $b8 AT
>94d8		c3 b1					.word	SyntaxError                      ; $b9 BY
>94da		6e 86					.word	CallCommand                      ; $ba CALL
>94dc		92 b4					.word	CircleCommand                    ; $bb CIRCLE
>94de		a3 86					.word	ClearCommand                     ; $bc CLEAR
>94e0		c3 b1					.word	SyntaxError                      ; $bd COLOR
>94e2		c3 b1					.word	SyntaxError                      ; $be COLOUR
>94e4		10 87					.word	Command_Data                     ; $bf DATA
>94e6		18 87					.word	DimCommand                       ; $c0 DIM
>94e8		e2 93					.word	Unused3                          ; $c1 DOWNTO
>94ea		55 8d					.word	ElseCode                         ; $c2 ELSE
>94ec		c3 b1					.word	SyntaxError                      ; $c3 FROM
>94ee		b1 b6					.word	GfxCommand                       ; $c4 GFX
>94f0		c3 b1					.word	SyntaxError                      ; $c5 HERE
>94f2		bb b4					.word	ImageCommand                     ; $c6 IMAGE
>94f4		90 8e					.word	LetCommand                       ; $c7 LET
>94f6		0d b5					.word	LineCommand                      ; $c8 LINE
>94f8		ea 8f					.word	Command_LOCAL                    ; $c9 LOCAL
>94fa		ab 90					.word	MCCommand                        ; $ca MEMCOPY
>94fc		c3 b1					.word	SyntaxError                      ; $cb OFF
>94fe		c3 b1					.word	SyntaxError                      ; $cc ON
>9500		c3 b1					.word	SyntaxError                      ; $cd OUTLINE
>9502		02 b7					.word	PaletteCommand                   ; $ce PALETTE
>9504		06 b5					.word	PlotCommand                      ; $cf PLOT
>9506		cb 91					.word	PokeBCommand                     ; $d0 POKE
>9508		d7 91					.word	PokeDCommand                     ; $d1 POKED
>950a		d3 91					.word	PokeLCommand                     ; $d2 POKEL
>950c		cf 91					.word	PokeWCommand                     ; $d3 POKEW
>950e		74 92					.word	Command_Read                     ; $d4 READ
>9510		8e b4					.word	RectangleCommand                 ; $d5 RECT
>9512		d1 92					.word	RemCommand                       ; $d6 REM
>9514		c3 b1					.word	SyntaxError                      ; $d7 SOLID
>9516		b6 b7					.word	SoundCommand                     ; $d8 SOUND
>9518		9d b4					.word	SpriteCommand                    ; $d9 SPRITE
>951a		d7 b4					.word	TextCommand                      ; $da TEXT
>951c		e2 93					.word	Unused2                          ; $db TO
.951e						VectorSet1:
>951e		c3 b1					.word	SyntaxError                      ; $80 !0:EOF
>9520		c3 b1					.word	SyntaxError                      ; $81 !1:SH1
>9522		c3 b1					.word	SyntaxError                      ; $82 !2:SH2
>9524		42 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>9526		5e 86					.word	AssertCommand                    ; $84 ASSERT
>9528		51 b6					.word	BitmapCtrl                       ; $85 BITMAP
>952a		47 88					.word	Command_BLoad                    ; $86 BLOAD
>952c		e7 88					.word	Command_BSave                    ; $87 BSAVE
>952e		42 b7					.word	ClearScreen                      ; $88 CLS
>9530		62 8d					.word	Command_CPrint                   ; $89 CPRINT
>9532		69 89					.word	Command_Dir                      ; $8a DIR
>9534		d5 87					.word	BootDOS                          ; $8b DOS
>9536		39 8a					.word	Command_Drive                    ; $8c DRIVE
>9538		e7 87					.word	EndCommand                       ; $8d END
>953a		6e b7					.word	Explode                          ; $8e EXPLODE
>953c		c3 b1					.word	SyntaxError                      ; $8f GO
>953e		fb 8c					.word	Command_GOSUB                    ; $90 GOSUB
>9540		19 8d					.word	GotoCommand                      ; $91 GOTO
>9542		c3 b1					.word	SyntaxError                      ; $92 HIMEM
>9544		5d 8d					.word	Command_Input                    ; $93 INPUT
>9546		e0 8e					.word	Command_List                     ; $94 LIST
>9548		40 8a					.word	Command_Load                     ; $95 LOAD
>954a		c3 b1					.word	SyntaxError                      ; $96 MOUSE
>954c		bb 91					.word	NewCommand                       ; $97 NEW
>954e		4a b7					.word	PingCommand                      ; $98 PING
>9550		69 8d					.word	Command_Print                    ; $99 PRINT
>9552		00 93					.word	Command_Restore                  ; $9a RESTORE
>9554		0b 8d					.word	Command_RETURN                   ; $9b RETURN
>9556		3f 93					.word	CommandRUNOptLoad                ; $9c RUN
>9558		12 8b					.word	Command_Save                     ; $9d SAVE
>955a		f4 95					.word	CommandSetDate                   ; $9e SETDATE
>955c		f8 95					.word	CommandSetTime                   ; $9f SETTIME
>955e		62 b7					.word	ShootCommand                     ; $a0 SHOOT
>9560		96 b6					.word	SpritesCtrl                      ; $a1 SPRITES
>9562		68 96					.word	StopCommand                      ; $a2 STOP
>9564		96 8b					.word	Command_VERIFY                   ; $a3 VERIFY
>9566		07 87					.word	XGoCommand                       ; $a4 XGO
>9568		fe 86					.word	XLoadCommand                     ; $a5 XLOAD
>956a		56 b7					.word	ZapCommand                       ; $a6 ZAP
.956c						VectorSet2:
>956c		c3 b1					.word	SyntaxError                      ; $80 !0:EOF
>956e		c3 b1					.word	SyntaxError                      ; $81 !1:SH1
>9570		c3 b1					.word	SyntaxError                      ; $82 !2:SH2
>9572		82 b0					.word	Assemble_adc                     ; $83 ADC
>9574		7a b0					.word	Assemble_and                     ; $84 AND
>9576		96 b0					.word	Assemble_asl                     ; $85 ASL
>9578		00 b1					.word	Assemble_bcc                     ; $86 BCC
>957a		04 b1					.word	Assemble_bcs                     ; $87 BCS
>957c		0c b1					.word	Assemble_beq                     ; $88 BEQ
>957e		c3 b0					.word	Assemble_bit                     ; $89 BIT
>9580		f4 b0					.word	Assemble_bmi                     ; $8a BMI
>9582		08 b1					.word	Assemble_bne                     ; $8b BNE
>9584		f0 b0					.word	Assemble_bpl                     ; $8c BPL
>9586		10 b1					.word	Assemble_bra                     ; $8d BRA
>9588		14 b1					.word	Assemble_brk                     ; $8e BRK
>958a		f8 b0					.word	Assemble_bvc                     ; $8f BVC
>958c		fc b0					.word	Assemble_bvs                     ; $90 BVS
>958e		1c b1					.word	Assemble_clc                     ; $91 CLC
>9590		70 b1					.word	Assemble_cld                     ; $92 CLD
>9592		30 b1					.word	Assemble_cli                     ; $93 CLI
>9594		60 b1					.word	Assemble_clv                     ; $94 CLV
>9596		8e b0					.word	Assemble_cmp                     ; $95 CMP
>9598		d7 b0					.word	Assemble_cpx                     ; $96 CPX
>959a		d2 b0					.word	Assemble_cpy                     ; $97 CPY
>959c		b4 b0					.word	Assemble_dec                     ; $98 DEC
>959e		6c b1					.word	Assemble_dex                     ; $99 DEX
>95a0		48 b1					.word	Assemble_dey                     ; $9a DEY
>95a2		7e b0					.word	Assemble_eor                     ; $9b EOR
>95a4		b9 b0					.word	Assemble_inc                     ; $9c INC
>95a6		7c b1					.word	Assemble_inx                     ; $9d INX
>95a8		68 b1					.word	Assemble_iny                     ; $9e INY
>95aa		eb b0					.word	Assemble_jmp                     ; $9f JMP
>95ac		e6 b0					.word	Assemble_jsr                     ; $a0 JSR
>95ae		8a b0					.word	Assemble_lda                     ; $a1 LDA
>95b0		af b0					.word	Assemble_ldx                     ; $a2 LDX
>95b2		cd b0					.word	Assemble_ldy                     ; $a3 LDY
>95b4		a0 b0					.word	Assemble_lsr                     ; $a4 LSR
>95b6		80 b1					.word	Assemble_nop                     ; $a5 NOP
>95b8		76 b0					.word	Assemble_ora                     ; $a6 ORA
>95ba		2c b1					.word	Assemble_pha                     ; $a7 PHA
>95bc		18 b1					.word	Assemble_php                     ; $a8 PHP
>95be		74 b1					.word	Assemble_phx                     ; $a9 PHX
>95c0		34 b1					.word	Assemble_phy                     ; $aa PHY
>95c2		3c b1					.word	Assemble_pla                     ; $ab PLA
>95c4		20 b1					.word	Assemble_plp                     ; $ac PLP
>95c6		88 b1					.word	Assemble_plx                     ; $ad PLX
>95c8		44 b1					.word	Assemble_ply                     ; $ae PLY
>95ca		9b b0					.word	Assemble_rol                     ; $af ROL
>95cc		a5 b0					.word	Assemble_ror                     ; $b0 ROR
>95ce		28 b1					.word	Assemble_rti                     ; $b1 RTI
>95d0		38 b1					.word	Assemble_rts                     ; $b2 RTS
>95d2		92 b0					.word	Assemble_sbc                     ; $b3 SBC
>95d4		24 b1					.word	Assemble_sec                     ; $b4 SEC
>95d6		84 b1					.word	Assemble_sed                     ; $b5 SED
>95d8		40 b1					.word	Assemble_sei                     ; $b6 SEI
>95da		86 b0					.word	Assemble_sta                     ; $b7 STA
>95dc		78 b1					.word	Assemble_stp                     ; $b8 STP
>95de		aa b0					.word	Assemble_stx                     ; $b9 STX
>95e0		c8 b0					.word	Assemble_sty                     ; $ba STY
>95e2		be b0					.word	Assemble_stz                     ; $bb STZ
>95e4		5c b1					.word	Assemble_tax                     ; $bc TAX
>95e6		58 b1					.word	Assemble_tay                     ; $bd TAY
>95e8		e1 b0					.word	Assemble_trb                     ; $be TRB
>95ea		dc b0					.word	Assemble_tsb                     ; $bf TSB
>95ec		64 b1					.word	Assemble_tsx                     ; $c0 TSX
>95ee		4c b1					.word	Assemble_txa                     ; $c1 TXA
>95f0		54 b1					.word	Assemble_txs                     ; $c2 TXS
>95f2		50 b1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.95f4						CommandSetDate:
.95f4		a9 03		lda #$03			lda 	#3
.95f6		80 02		bra $95fa			bra 	CSDTMain
.95f8						CommandSetTime:
.95f8		a9 00		lda #$00			lda 	#0
.95fa						CSDTMain:
.95fa		48		pha				pha 								; save table offsets 0 or 3
.95fb		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.95fd		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.9600		20 85 97	jsr $9785			jsr 	CheckComma
.9603		e8		inx				inx
.9604		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.9607		20 85 97	jsr $9785			jsr 	CheckComma
.960a		e8		inx				inx
.960b		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.960e		68		pla				pla 								; table offset in Y, saving Y
.960f		5a		phy				phy
.9610		a8		tay				tay
.9611		a2 00		ldx #$00			ldx 	#0 							; first number
.9613		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.9615		48		pha				pha
.9616		64 01		stz $01				stz 	1
.9618						_CSDTCopy:
.9618		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.961a		d9 5c 96	cmp $965c,y			cmp 	RTCWMinValues,y 			; check range
.961d		90 1b		bcc $963a			bcc 	_CSDTRange
.961f		d9 62 96	cmp $9662,y			cmp 	RTCWMaxValues,y
.9622		b0 16		bcs $963a			bcs 	_CSDTRange
.9624		20 3f 96	jsr $963f			jsr 	CSDTDecimalToBCD
.9627		da		phx				phx 								; save X
.9628		be 56 96	ldx $9656,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.962b		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.962e		fa		plx				plx 								; restore X
.962f		e8		inx				inx 								; next number
.9630		c8		iny				iny 								; next table entries
.9631		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.9633		d0 e3		bne $9618			bne 	_CSDTCopy
.9635		68		pla				pla 								; restore I/O space
.9636		85 01		sta $01				sta 	1
.9638		7a		ply				ply 								; restore code pos and exit.
.9639		60		rts				rts
.963a						_CSDTRange:
.963a		a9 04		lda #$04		lda	#4
.963c		4c 96 97	jmp $9796		jmp	ErrorHandler
.963f						CSDTDecimalToBCD:
.963f		da		phx				phx 								; 10 count in X
.9640		a2 00		ldx #$00			ldx 	#0
.9642						_CSDTDBLoop:
.9642		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.9644		90 05		bcc $964b			bcc 	_CSDTDBExit
.9646		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.9648		e8		inx				inx 								; one more 10s.
.9649		80 f7		bra $9642			bra 	_CSDTDBLoop
.964b						_CSDTDBExit:
.964b		85 36		sta $36				sta 	zTemp0 						; units
.964d		8a		txa				txa 								; 10s x 16
.964e		0a		asl a				asl 	a
.964f		0a		asl a				asl 	a
.9650		0a		asl a				asl 	a
.9651		0a		asl a				asl 	a
.9652		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9654		fa		plx				plx
.9655		60		rts				rts
.9656						RTCWOffset:
>9656		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.965c						RTCWMinValues:
>965c		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.9662						RTCWMaxValues:
>9662		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9668						StopCommand:
.9668		a9 08		lda #$08		lda	#8
.966a		4c 96 97	jmp $9796		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.966d						UnaryTimer:
.966d		fa		plx				plx
.966e		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.9671						TimerToStackX:
.9671		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; zero result
.9674		64 01		stz $01				stz 	1 							; access I/O
.9676		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9679		95 58		sta $58,x			sta 	NSMantissa0,x
.967b		ad 5a d6	lda $d65a			lda 	$D65A
.967e		95 60		sta $60,x			sta 	NSMantissa1,x
.9680		ad 5b d6	lda $d65b			lda 	$D65B
.9683		95 68		sta $68,x			sta 	NSMantissa2,x
.9685		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9686						ProcedureScan:
.9686		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9688		85 30		sta $30				sta 	codePtr
.968a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.968c		85 31		sta $31				sta 	codePtr+1
.968e						_PSLoop:
.968e		b2 30		lda ($30)			lda 	(codePtr)
.9690		f0 42		beq $96d4			beq 	_PSExit
.9692		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9694		b1 30		lda ($30),y			lda 	(codePtr),y
.9696		c9 af		cmp #$af			cmp 	#KWD_PROC
.9698		d0 2d		bne $96c7			bne 	_PSNext
.969a		c8		iny				iny 								; get the address of the record to zTemp0 and
.969b		b1 30		lda ($30),y			lda 	(codePtr),y
.969d		29 c0		and #$c0			and 	#$C0
.969f		c9 40		cmp #$40			cmp 	#$40
.96a1		d0 32		bne $96d5			bne 	_PSSyntax
.96a3		b1 30		lda ($30),y			lda 	(codePtr),y
.96a5		18		clc				clc
.96a6		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.96a8		85 37		sta $37				sta 	zTemp0+1
.96aa		c8		iny				iny 								; LSB
.96ab		b1 30		lda ($30),y			lda 	(codePtr),y
.96ad		85 36		sta $36				sta 	zTemp0
.96af		c8		iny				iny 								; character after variable call.
.96b0		98		tya				tya 								; save Y offset at +7 (exponent slot)
.96b1		a0 07		ldy #$07			ldy 	#7
.96b3		91 36		sta ($36),y			sta 	(zTemp0),y
.96b5		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.96b7		a0 02		ldy #$02			ldy 	#2
.96b9		91 36		sta ($36),y			sta 	(zTemp0),y
.96bb		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.96bd						_PSCopy:
.96bd		b5 30		lda $30,x			lda 	safePtr,x
.96bf		c8		iny				iny
.96c0		91 36		sta ($36),y			sta 	(zTemp0),y
.96c2		e8		inx				inx
.96c3		e0 04		cpx #$04			cpx 	#4
.96c5		d0 f6		bne $96bd			bne 	_PSCopy
.96c7						_PSNext:
.96c7		18		clc				clc
.96c8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.96ca		65 30		adc $30				adc 	codePtr
.96cc		85 30		sta $30				sta 	codePtr
.96ce		90 02		bcc $96d2			bcc 	_CREExit
.96d0		e6 31		inc $31				inc 	codePtr+1 					; carry
.96d2						_CREExit:
.96d2		80 ba		bra $968e			bra 	_PSLoop
.96d4						_PSExit:
.96d4		60		rts				rts
.96d5						_PSSyntax:
.96d5		4c c3 b1	jmp $b1c3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.96d8						ScanForward:
.96d8		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.96da		86 37		stx $37				stx 	zTemp0+1
.96dc		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.96de						_ScanLoop:
.96de		b1 30		lda ($30),y			lda 	(codePtr),y
.96e0		c8		iny				iny
.96e1		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.96e3		d0 0e		bne $96f3			bne 	_ScanGoNext
.96e5		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.96e7		f0 04		beq $96ed			beq 	_ScanMatch
.96e9		c5 37		cmp $37				cmp 	zTemp0+1
.96eb		d0 06		bne $96f3			bne 	_ScanGoNext
.96ed						_ScanMatch:
.96ed		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.96ef		d0 01		bne $96f2			bne 	_ScanNotEndEOL
.96f1		88		dey				dey
.96f2						_ScanNotEndEOL:
.96f2		60		rts				rts
.96f3						_ScanGoNext:
.96f3		20 f8 96	jsr $96f8			jsr  	ScanForwardOne 				; allows for shifts and so on.
.96f6		80 e6		bra $96de			bra 	_ScanLoop
.96f8						ScanForwardOne:
.96f8		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.96fa		90 3e		bcc $973a			bcc 	_SFWExit
.96fc		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.96fe		90 18		bcc $9718			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9700		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9702		b0 2f		bcs $9733			bcs 	_ScanSkipData
.9704		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9706		90 32		bcc $973a			bcc 	_SFWExit 					; if not, ordinary keywords.
.9708		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.970a		b0 2e		bcs $973a			bcs 	_SFWExit
.970c		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.970e		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9710		b0 28		bcs $973a			bcs 	_SFWExit
.9712		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9714		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9716		80 22		bra $973a			bra 	_SFWExit
.9718						_ScanSkipOne:
.9718		c8		iny				iny 								; consume the extra one.
.9719		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.971b		d0 1d		bne $973a			bne 	_SFWExit
.971d		18		clc				clc
.971e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9720		65 30		adc $30				adc 	codePtr
.9722		85 30		sta $30				sta 	codePtr
.9724		90 02		bcc $9728			bcc 	_CREExit
.9726		e6 31		inc $31				inc 	codePtr+1 					; carry
.9728						_CREExit:
.9728		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.972a		b2 30		lda ($30)			lda 	(codePtr)
.972c		d0 0c		bne $973a			bne 	_SFWExit 					; if not zero, more to scan
.972e		a9 13		lda #$13		lda	#19
.9730		4c 96 97	jmp $9796		jmp	ErrorHandler
.9733						_ScanSkipData:
.9733		88		dey				dey 								; point at data token
.9734		c8		iny				iny 								; point to offset
.9735		98		tya				tya 								; A = offset position
.9736		38		sec				sec 								; add size +1 hence SEC
.9737		71 30		adc ($30),y			adc 	(codePtr),y
.9739		a8		tay				tay 								; make current position.
.973a						_SFWExit:
.973a		60		rts				rts
.973b						ScanGetCurrentLineStep:
.973b		64 38		stz $38				stz 	zTemp1
.973d		a0 03		ldy #$03			ldy 	#3
.973f						_SGCLSLoop:
.973f		b1 30		lda ($30),y			lda 	(codePtr),y
.9741		c8		iny				iny
.9742		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9744		f0 05		beq $974b			beq 	_SGCLSExit
.9746		20 f8 96	jsr $96f8			jsr 	ScanForwardOne
.9749		80 f4		bra $973f			bra 	_SGCLSLoop
.974b						_SGCLSExit:
.974b		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.974d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.974e						Command_WHILE:
.974e		5a		phy				phy 								; save position of the test
.974f		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9751		20 3e a6	jsr $a63e			jsr 	EvaluateNumber
.9754		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; check if zero
.9757		f0 0e		beq $9767			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9759		98		tya				tya 								; position *after* test.
.975a		7a		ply				ply 								; restore position before test, at WHILE
.975b		88		dey				dey 								; so we execute the WHILE command again.
.975c		48		pha				pha 								; push after test on the stack
.975d		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.975f		20 3d b8	jsr $b83d			jsr 	StackOpen
.9762		20 82 b8	jsr $b882			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9765		7a		ply				ply 								; restore the position *after* the test
.9766		60		rts				rts
.9767						_WHExitLoop:
.9767		68		pla				pla 								; throw post loop position
.9768		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.976a		aa		tax				tax
.976b		20 d8 96	jsr $96d8			jsr 	ScanForward
.976e		60		rts				rts
.976f						Command_WEND:
.976f		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9771		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9773		20 6a b8	jsr $b86a			jsr 	StackCheckFrame
.9776		20 93 b8	jsr $b893			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9779		20 5c b8	jsr $b85c			jsr 	StackClose		 			; erase the frame
.977c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.977d						CheckRightBracket:
.977d		b1 30		lda ($30),y			lda 	(codePtr),y
.977f		c8		iny				iny
.9780		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9782		d0 0f		bne $9793			bne 	CNAFail
.9784		60		rts				rts
.9785						CheckComma:
.9785		b1 30		lda ($30),y			lda 	(codePtr),y
.9787		c8		iny				iny
.9788		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.978a		d0 07		bne $9793			bne 	CNAFail
.978c		60		rts				rts
.978d						CheckNextA:
.978d		d1 30		cmp ($30),y			cmp 	(codePtr),y
.978f		d0 02		bne $9793			bne 	CNAFail
.9791		c8		iny				iny 								; skip character
.9792		60		rts				rts 								; and exit
.9793						CNAFail:
.9793		4c c3 b1	jmp $b1c3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9796						ErrorHandler:
.9796		a8		tay				tay 								; find the error text
.9797		f0 49		beq $97e2			beq 	_EHEnd
.9799		a2 00		ldx #$00			ldx 	#0
.979b		a9 dc		lda #$dc			lda 	#((ErrorText) & $FF)
.979d		85 36		sta $36				sta 	0+zTemp0
.979f		a9 b1		lda #$b1			lda 	#((ErrorText) >> 8)
.97a1		85 37		sta $37				sta 	1+zTemp0
.97a3						_EHFind:
.97a3		88		dey				dey 								; keep looking through text
.97a4		f0 0e		beq $97b4			beq 	_EHFound
.97a6						_EHFindZero:
.97a6		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.97a8		e6 36		inc $36				inc 	zTemp0
.97aa		d0 02		bne $97ae			bne 	_EHFNoCarry
.97ac		e6 37		inc $37				inc 	zTemp0+1
.97ae						_EHFNoCarry:
.97ae		c9 00		cmp #$00			cmp 	#0
.97b0		d0 f4		bne $97a6			bne 	_EHFindZero
.97b2		80 ef		bra $97a3			bra 	_EHFind
.97b4						_EHFound:
.97b4		a5 36		lda $36				lda 	zTemp0 						; print message
.97b6		a6 37		ldx $37				ldx 	zTemp0+1
.97b8		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.97bb		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.97bd		b1 30		lda ($30),y			lda 	(codePtr),y
.97bf		d0 05		bne $97c6			bne 	_EHAtMsg
.97c1		c8		iny				iny
.97c2		b1 30		lda ($30),y			lda 	(codePtr),y
.97c4		f0 17		beq $97dd			beq 	_EHCREnd
.97c6						_EHAtMsg:
.97c6		a2 97		ldx #$97			ldx 	#_AtMsg >> 8 				; print " at "
.97c8		a9 e5		lda #$e5			lda 	#_AtMsg & $FF
.97ca		20 ef 97	jsr $97ef			jsr 	PrintStringXA
.97cd		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.97cf		b1 30		lda ($30),y			lda 	(codePtr),y
.97d1		48		pha				pha
.97d2		c8		iny				iny
.97d3		b1 30		lda ($30),y			lda 	(codePtr),y
.97d5		aa		tax				tax
.97d6		68		pla				pla
.97d7		20 05 9c	jsr $9c05			jsr 	ConvertInt16 				; convert XA to string
.97da		20 ef 97	jsr $97ef			jsr 	PrintStringXA 				; and print it.
.97dd						_EHCREnd:
.97dd		a9 0d		lda #$0d			lda 	#13 						; new line
.97df		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.97e2						_EHEnd:
.97e2		4c 0a 86	jmp $860a			jmp 	WarmStart
>97e5		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>97ed		20 00
.97ef						PrintStringXA:
.97ef		5a		phy				phy
.97f0		86 37		stx $37				stx 	zTemp0+1
.97f2		85 36		sta $36				sta 	zTemp0
.97f4		a0 00		ldy #$00			ldy 	#0
.97f6						_PSXALoop:
.97f6		b1 36		lda ($36),y			lda 	(zTemp0),y
.97f8		f0 06		beq $9800			beq 	_PSXAExit
.97fa		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.97fd		c8		iny				iny
.97fe		80 f6		bra $97f6			bra 	_PSXALoop
.9800						_PSXAExit:
.9800		7a		ply				ply
.9801		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9802						UnaryTrue:
.9802		fa		plx				plx
.9803						ReturnTrue:
.9803		a9 01		lda #$01			lda 	#1  						; set to 1
.9805		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.9808		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.980a		95 50		sta $50,x			sta 	NSStatus,x
.980c		60		rts				rts
.980d						UnaryFalse:
.980d		fa		plx				plx
.980e						ReturnFalse:
.980e		4c f0 a6	jmp $a6f0			jmp 	NSMSetZero 					; set it all to zero
.9811						BinaryCompareEqual:
.9811		fa		plx				plx
.9812		20 4d 98	jsr $984d			jsr 	CompareBaseCode
.9815		c9 00		cmp #$00			cmp 	#0
.9817		f0 ea		beq $9803			beq 	ReturnTrue
.9819		80 f3		bra $980e			bra 	ReturnFalse
.981b						BinaryCompareLess:
.981b		fa		plx				plx
.981c		20 4d 98	jsr $984d			jsr 	CompareBaseCode
.981f		c9 ff		cmp #$ff			cmp 	#$FF
.9821		f0 e0		beq $9803			beq 	ReturnTrue
.9823		80 e9		bra $980e			bra 	ReturnFalse
.9825						BinaryCompareGreater:
.9825		fa		plx				plx
.9826		20 4d 98	jsr $984d			jsr 	CompareBaseCode
.9829		c9 01		cmp #$01			cmp 	#1
.982b		f0 d6		beq $9803			beq 	ReturnTrue
.982d		80 df		bra $980e			bra 	ReturnFalse
.982f						BinaryCompareNotEqual:
.982f		fa		plx				plx
.9830		20 4d 98	jsr $984d			jsr 	CompareBaseCode
.9833		c9 00		cmp #$00			cmp 	#0
.9835		d0 cc		bne $9803			bne 	ReturnTrue
.9837		80 d5		bra $980e			bra 	ReturnFalse
.9839						BinaryCompareLessEqual:
.9839		fa		plx				plx
.983a		20 4d 98	jsr $984d			jsr 	CompareBaseCode
.983d		c9 01		cmp #$01			cmp 	#1
.983f		d0 c2		bne $9803			bne 	ReturnTrue
.9841		80 cb		bra $980e			bra 	ReturnFalse
.9843						BinaryCompareGreaterEqual:
.9843		fa		plx				plx
.9844		20 4d 98	jsr $984d			jsr 	CompareBaseCode
.9847		c9 ff		cmp #$ff			cmp 	#$FF
.9849		d0 b8		bne $9803			bne 	ReturnTrue
.984b		80 c1		bra $980e			bra 	ReturnFalse
.984d						CompareBaseCode:
.984d		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; make both values if references.
.9850		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9852		15 51		ora $51,x			ora 	NSStatus+1,x
.9854		29 10		and #$10			and 	#NSTString
.9856		d0 37		bne $988f			bne 	_CBCString 					; if so do string code, which will check if both.
.9858		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.985a		15 79		ora $79,x			ora 	NSExponent+1,x
.985c		d0 34		bne $9892			bne 	_CBCFloat
.985e		b5 50		lda $50,x			lda 	NSStatus,x
.9860		15 51		ora $51,x			ora 	NSStatus+1,x
.9862		29 08		and #$08			and 	#NSTFloat
.9864		d0 2c		bne $9892			bne 	_CBCFloat
.9866		20 95 98	jsr $9895			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9869		e8		inx				inx
.986a		20 95 98	jsr $9895			jsr 	CompareFixMinusZero
.986d		ca		dex				dex
.986e		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9870		55 51		eor $51,x			eor 	NSStatus+1,x
.9872		10 0a		bpl $987e			bpl 	_CDCSameSign
.9874		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9876		30 14		bmi $988c			bmi 	_CBCLess 					; return $FF
.9878						_CBCGreater:
.9878		a9 01		lda #$01			lda 	#1
.987a		60		rts				rts
.987b						_CBCEqual:
.987b		a9 00		lda #$00			lda 	#0
.987d		60		rts				rts
.987e						_CDCSameSign:
.987e		20 aa 9a	jsr $9aaa			jsr 	SubTopTwoStack 				; unsigned subtract
.9881		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; or the mantissa together
.9884		f0 f5		beq $987b			beq 	_CBCEqual 					; -0 == 0
.9886		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9888		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.988a		10 ec		bpl $9878			bpl 	_CBCGreater
.988c						_CBCLess:
.988c		a9 ff		lda #$ff			lda 	#$FF
.988e		60		rts				rts
.988f						_CBCString:
.988f		4c 1b 9a	jmp $9a1b			jmp 	CompareStrings
.9892						_CBCFloat:
.9892		4c 65 9d	jmp $9d65			jmp 	CompareFloat
.9895						CompareFixMinusZero:
.9895		20 12 a7	jsr $a712			jsr 	NSMIsZero
.9898		d0 02		bne $989c			bne 	_CFXMZNotZero
.989a		74 50		stz $50,x			stz 	NSStatus,x
.989c						_CFXMZNotZero:
.989c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.989d						StringConcat:
.989d		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.989f		35 51		and $51,x			and 	NSStatus+1,x
.98a1		29 18		and #$18			and 	#NSBTypeMask
.98a3		c9 10		cmp #$10			cmp 	#NSTString
.98a5		d0 50		bne $98f7			bne		_SCType
.98a7		64 38		stz $38				stz 	zTemp1 						; counting total length
.98a9		e8		inx				inx
.98aa		20 c8 98	jsr $98c8			jsr 	_SCSetupZ0 					; setup for second
.98ad		20 d1 98	jsr $98d1			jsr 	_SCLengthZ0 				; length for second
.98b0		ca		dex				dex
.98b1		20 c8 98	jsr $98c8			jsr 	_SCSetupZ0 					; setup for first
.98b4		20 d1 98	jsr $98d1			jsr 	_SCLengthZ0 				; length for first
.98b7		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.98b9		20 2d b9	jsr $b92d			jsr 	StringTempAllocate
.98bc		20 e8 98	jsr $98e8			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.98bf		e8		inx				inx
.98c0		20 c8 98	jsr $98c8			jsr 	_SCSetupZ0 					; copy second out
.98c3		20 e8 98	jsr $98e8			jsr 	_SCCopy
.98c6		ca		dex				dex
.98c7		60		rts				rts
.98c8						_SCSetupZ0:
.98c8		b5 58		lda $58,x			lda 	NSMantissa0,x
.98ca		85 36		sta $36				sta 	zTemp0
.98cc		b5 60		lda $60,x			lda 	NSMantissa1,x
.98ce		85 37		sta $37				sta 	zTemp0+1
.98d0		60		rts				rts
.98d1						_SCLengthZ0:
.98d1		5a		phy				phy
.98d2		a0 00		ldy #$00			ldy 	#0
.98d4						_SCLenLoop:
.98d4		b1 36		lda ($36),y			lda 	(zTemp0),y
.98d6		f0 0e		beq $98e6			beq 	_SCLExit
.98d8		c8		iny				iny
.98d9		e6 38		inc $38				inc 	zTemp1
.98db		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.98dd		c9 fd		cmp #$fd			cmp 	#253
.98df		d0 f3		bne $98d4			bne		_SCLenLoop
.98e1		a9 09		lda #$09		lda	#9
.98e3		4c 96 97	jmp $9796		jmp	ErrorHandler
.98e6						_SCLExit:
.98e6		7a		ply				ply
.98e7		60		rts				rts
.98e8						_SCCopy:
.98e8		5a		phy				phy
.98e9		a0 00		ldy #$00			ldy 	#0
.98eb						_SCCopyLoop:
.98eb		b1 36		lda ($36),y			lda 	(zTemp0),y
.98ed		f0 06		beq $98f5			beq 	_SCCExit
.98ef		20 66 b9	jsr $b966			jsr 	StringTempWrite
.98f2		c8		iny				iny
.98f3		80 f6		bra $98eb			bra 	_SCCopyLoop
.98f5						_SCCExit:
.98f5		7a		ply				ply
.98f6		60		rts				rts
.98f7						_SCType:
.98f7		4c cd b1	jmp $b1cd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.98fa						IntegerDivide:
.98fa		fa		plx				plx
.98fb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98fd		15 51		ora $51,x			ora 	NSStatus+1,x
.98ff		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9900		0a		asl a				asl 	a
.9901		10 05		bpl $9908			bpl 	_NotRef
.9903		48		pha				pha
.9904		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9907		68		pla				pla
.9908						_NotRef:
.9908		0a		asl a				asl 	a
.9909		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.990b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.990d		15 79		ora $79,x			ora 	NSExponent+1,x
.990f		f0 03		beq $9914			beq 	_IntegerCode 				; if clear, then we have two integers
.9911		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9914						_IntegerCode:
.9914		20 2e 99	jsr $992e			jsr 	CheckDivideZero 			; do div zero check
.9917		20 60 99	jsr $9960			jsr 	Int32Divide 				; do the division
.991a		20 11 9a	jsr $9a11			jsr 	CalculateSign 				; calculate result sign
.991d						NSMCopyPlusTwoToZero:
.991d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.991f		95 58		sta $58,x			sta 	NSMantissa0,x
.9921		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9923		95 60		sta $60,x			sta 	NSMantissa1,x
.9925		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9927		95 68		sta $68,x			sta 	NSMantissa2,x
.9929		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.992b		95 70		sta $70,x			sta 	NSMantissa3,x
.992d		60		rts				rts
.992e						CheckDivideZero:
.992e		e8		inx				inx
.992f		20 12 a7	jsr $a712			jsr 	NSMIsZero
.9932		f0 02		beq $9936			beq 	_CDVError
.9934		ca		dex				dex
.9935		60		rts				rts
.9936						_CDVError:
.9936		a9 03		lda #$03		lda	#3
.9938		4c 96 97	jmp $9796		jmp	ErrorHandler
.993b						IntegerModulus:
.993b		fa		plx				plx
.993c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.993e		15 51		ora $51,x			ora 	NSStatus+1,x
.9940		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9941		0a		asl a				asl 	a
.9942		10 05		bpl $9949			bpl 	_NotRef
.9944		48		pha				pha
.9945		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9948		68		pla				pla
.9949						_NotRef:
.9949		0a		asl a				asl 	a
.994a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.994c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.994e		15 79		ora $79,x			ora 	NSExponent+1,x
.9950		f0 03		beq $9955			beq 	_IntegerCode 				; if clear, then we have two integers
.9952		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9955						_IntegerCode:
.9955						IntegerModulusNoCheck:
.9955		20 2e 99	jsr $992e			jsr 	CheckDivideZero 			; do div zero check
.9958		20 60 99	jsr $9960			jsr 	Int32Divide 				; do the division
.995b		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.995d		56 50		lsr $50,x			lsr 	NSStatus,x
.995f		60		rts				rts
.9960						Int32Divide:
.9960		48		pha				pha 								; save AXY
.9961		5a		phy				phy
.9962		20 d3 a6	jsr $a6d3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9965		20 ec a6	jsr $a6ec			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9968		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.996a						_I32DivideLoop:
.996a		e8		inx				inx
.996b		e8		inx				inx
.996c		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.996f		ca		dex				dex
.9970		ca		dex				dex
.9971		20 00 a7	jsr $a700			jsr 	NSMRotateLeft
.9974		20 9f 99	jsr $999f			jsr 	DivideCheckSubtract 		; check if subtract possible
.9977		90 02		bcc $997b			bcc 	_I32DivideNoCarryIn
.9979		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.997b						_I32DivideNoCarryIn:
.997b		88		dey				dey 								; loop round till division completed.
.997c		d0 ec		bne $996a			bne 	_I32DivideLoop
.997e		7a		ply				ply 								; restore AXY and exit
.997f		68		pla				pla
.9980		60		rts				rts
.9981						Int32ShiftDivide:
.9981		48		pha				pha 								; save AY
.9982		5a		phy				phy
.9983		e8		inx				inx 								; clear S[X+2]
.9984		e8		inx				inx
.9985		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.9988		ca		dex				dex
.9989		ca		dex				dex
.998a		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.998c						_I32SDLoop:
.998c		20 9f 99	jsr $999f			jsr 	DivideCheckSubtract 		; check if subtract possible
.998f		e8		inx				inx
.9990		e8		inx				inx
.9991		20 00 a7	jsr $a700			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9994		ca		dex				dex
.9995		ca		dex				dex
.9996		20 00 a7	jsr $a700			jsr 	NSMRotateLeft
.9999		88		dey				dey 	 							; do 31 times
.999a		d0 f0		bne $998c			bne 	_I32SDLoop
.999c		7a		ply				ply 								; restore AY and exit
.999d		68		pla				pla
.999e		60		rts				rts
.999f						DivideCheckSubtract:
.999f		20 aa 9a	jsr $9aaa			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.99a2		b0 04		bcs $99a8			bcs 	_DCSExit 					; if carry set, then could do, exit
.99a4		20 90 9a	jsr $9a90			jsr 	AddTopTwoStack 				; add it back in
.99a7		18		clc				clc 								; and return False
.99a8						_DCSExit:
.99a8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.99a9						MulInteger:
.99a9		fa		plx				plx
.99aa		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99ac		15 51		ora $51,x			ora 	NSStatus+1,x
.99ae		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99af		0a		asl a				asl 	a
.99b0		10 05		bpl $99b7			bpl 	_NotRef
.99b2		48		pha				pha
.99b3		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99b6		68		pla				pla
.99b7						_NotRef:
.99b7		0a		asl a				asl 	a 							; put MSB of type into A:7
.99b8		30 09		bmi $99c3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99ba		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99bc		15 79		ora $79,x			ora 	NSExponent+1,x
.99be		f0 06		beq $99c6			beq 	_IntegerCode 				; if clear, then we have two integers
.99c0		4c 27 9e	jmp $9e27			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.99c3						_StringData:
.99c3		4c d7 b1	jmp $b1d7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99c6						_IntegerCode:
.99c6		20 d3 99	jsr $99d3			jsr 	MultiplyShort
.99c9		c9 00		cmp #$00			cmp 	#0
.99cb		f0 05		beq $99d2			beq 	_MIExit
.99cd		a9 04		lda #$04		lda	#4
.99cf		4c 96 97	jmp $9796		jmp	ErrorHandler
.99d2						_MIExit:
.99d2		60		rts				rts
.99d3						MultiplyShort:
.99d3		5a		phy				phy 								; save Y
.99d4		20 d3 a6	jsr $a6d3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99d7		20 ec a6	jsr $a6ec			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.99da		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.99dc						_I32MLoop:
.99dc		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.99de		15 62		ora $62,x			ora 	NSMantissa1+2,x
.99e0		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.99e2		15 72		ora $72,x			ora 	NSMantissa3+2,x
.99e4		f0 25		beq $9a0b			beq 	_I32MExit 					; exit if zero
.99e6		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.99e8		29 01		and #$01			and 	#1
.99ea		f0 0d		beq $99f9			beq 	_I32MNoAdd
.99ec		20 90 9a	jsr $9a90			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.99ef		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.99f1		10 06		bpl $99f9			bpl 	_I32MNoAdd
.99f3						_I32ShiftRight:
.99f3		20 09 a7	jsr $a709			jsr 	NSMShiftRight 				; shift S[X] right
.99f6		c8		iny				iny 								; increment shift count
.99f7		80 09		bra $9a02			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.99f9						_I32MNoAdd:
.99f9		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.99fb		70 f6		bvs $99f3			bvs 	_I32ShiftRight 				; instead.
.99fd		e8		inx				inx
.99fe		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a01		ca		dex				dex
.9a02						_I32MShiftUpper:
.9a02		e8		inx				inx 								; shift S[X+2] right
.9a03		e8		inx				inx
.9a04		20 09 a7	jsr $a709			jsr 	NSMShiftRight
.9a07		ca		dex				dex
.9a08		ca		dex				dex
.9a09		80 d1		bra $99dc			bra 	_I32MLoop 					; try again.
.9a0b						_I32MExit:
.9a0b		20 11 9a	jsr $9a11			jsr 	CalculateSign
.9a0e		98		tya				tya 								; shift in A
.9a0f		7a		ply				ply 								; restore Y and exit
.9a10		60		rts				rts
.9a11						CalculateSign:
.9a11		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a13		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9a15		55 51		eor $51,x			eor 	NSStatus+1,x
.9a17		0a		asl a				asl 	a 							; shift bit 7 into carry
.9a18		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9a1a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a1b						CompareStrings:
.9a1b		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9a1d		35 51		and $51,x			and 	NSStatus+1,x
.9a1f		29 10		and #$10			and 	#NSBIsString
.9a21		f0 28		beq $9a4b			beq 	_CSTypeError
.9a23		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a25		85 36		sta $36				sta 	zTemp0
.9a27		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a29		85 37		sta $37				sta 	zTemp0+1
.9a2b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9a2d		85 38		sta $38				sta 	zTemp1
.9a2f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a31		85 39		sta $39				sta 	zTemp1+1
.9a33		5a		phy				phy 								; save Y so we can access strings
.9a34		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a36						_CSLoop:
.9a36		c8		iny				iny
.9a37		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a39		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a3b		d0 06		bne $9a43			bne 	_CSDifferent
.9a3d		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a3f		d0 f5		bne $9a36			bne 	_CSLoop 					; still comparing
.9a41						_CSExit:
.9a41		7a		ply				ply 								; reached end, return zero in A from EOS
.9a42		60		rts				rts
.9a43						_CSDifferent:
.9a43		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a45		90 fa		bcc $9a41			bcc		_CSExit
.9a47		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a49		80 f6		bra $9a41			bra 	_CSExit
.9a4b						_CSTypeError:
.9a4b		4c cd b1	jmp $b1cd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a4e						ShiftLeft:
.9a4e		38		sec				sec 								; common code, carry determines which way.
.9a4f		80 01		bra $9a52			bra 	ShiftMain
.9a51						ShiftRight:
.9a51		18		clc				clc
.9a52						ShiftMain:
.9a52		fa		plx				plx 								; restore X
.9a53		08		php				php 								; save direction
.9a54		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a56		15 51		ora $51,x			ora 	NSStatus+1,x
.9a58		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a59		0a		asl a				asl 	a
.9a5a		10 05		bpl $9a61			bpl 	_NotRef
.9a5c		48		pha				pha
.9a5d		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a60		68		pla				pla
.9a61						_NotRef:
.9a61		0a		asl a				asl 	a
.9a62		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a64		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a66		15 79		ora $79,x			ora 	NSExponent+1,x
.9a68		f0 03		beq $9a6d			beq 	_IntegerCode 				; if clear, then we have two integers
.9a6a		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9a6d						_IntegerCode:
.9a6d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9a6f		29 e0		and #$e0			and 	#$E0
.9a71		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9a73		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9a75		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9a77		d0 12		bne $9a8b			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9a79						_SMLoop:
.9a79		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9a7b		30 11		bmi $9a8e			bmi 	_SMExit 					; exit if done.
.9a7d		28		plp				plp 								; restore direction setting
.9a7e		08		php				php
.9a7f		90 05		bcc $9a86			bcc 	_SMRight
.9a81		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; shift left if CS
.9a84		80 f3		bra $9a79			bra 	_SMLoop
.9a86						_SMRight:
.9a86		20 09 a7	jsr $a709			jsr 	NSMShiftRight 				; shift right if CC
.9a89		80 ee		bra $9a79			bra 	_SMLoop
.9a8b						_SMExit0:
.9a8b		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; return zero.
.9a8e						_SMExit:
.9a8e		28		plp				plp 								; throw direction
.9a8f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9a90						AddTopTwoStack:
.9a90		18		clc				clc
.9a91		b5 58		lda $58,x			lda		NSMantissa0,x
.9a93		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9a95		95 58		sta $58,x			sta 	NSMantissa0,x
.9a97		b5 60		lda $60,x			lda		NSMantissa1,x
.9a99		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9a9b		95 60		sta $60,x			sta 	NSMantissa1,x
.9a9d		b5 68		lda $68,x			lda		NSMantissa2,x
.9a9f		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9aa1		95 68		sta $68,x			sta 	NSMantissa2,x
.9aa3		b5 70		lda $70,x			lda		NSMantissa3,x
.9aa5		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9aa7		95 70		sta $70,x			sta 	NSMantissa3,x
.9aa9		60		rts				rts
.9aaa						SubTopTwoStack:
.9aaa		38		sec				sec
.9aab		b5 58		lda $58,x			lda		NSMantissa0,x
.9aad		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9aaf		95 58		sta $58,x			sta 	NSMantissa0,x
.9ab1		b5 60		lda $60,x			lda		NSMantissa1,x
.9ab3		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9ab5		95 60		sta $60,x			sta 	NSMantissa1,x
.9ab7		b5 68		lda $68,x			lda		NSMantissa2,x
.9ab9		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9abb		95 68		sta $68,x			sta 	NSMantissa2,x
.9abd		b5 70		lda $70,x			lda		NSMantissa3,x
.9abf		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9ac1		95 70		sta $70,x			sta 	NSMantissa3,x
.9ac3		60		rts				rts
.9ac4						AddInteger:
.9ac4		fa		plx				plx
.9ac5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ac7		15 51		ora $51,x			ora 	NSStatus+1,x
.9ac9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aca		0a		asl a				asl 	a
.9acb		10 05		bpl $9ad2			bpl 	_NotRef
.9acd		48		pha				pha
.9ace		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ad1		68		pla				pla
.9ad2						_NotRef:
.9ad2		0a		asl a				asl 	a 							; put MSB of type into A:7
.9ad3		30 09		bmi $9ade			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ad5		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ad7		15 79		ora $79,x			ora 	NSExponent+1,x
.9ad9		f0 06		beq $9ae1			beq 	_IntegerCode 				; if clear, then we have two integers
.9adb		4c d7 9c	jmp $9cd7			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9ade						_StringData:
.9ade		4c 9d 98	jmp $989d			jmp 	StringConcat							; at least one string - don't know both are strings.
.9ae1						_IntegerCode:
.9ae1						AddCode:
.9ae1		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9ae3		55 51		eor $51,x			eor 	NSStatus+1,x
.9ae5		10 a9		bpl $9a90			bpl 	AddTopTwoStack
.9ae7		20 aa 9a	jsr $9aaa			jsr 	SubTopTwoStack 				; do a physical subtraction
.9aea		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9aec		10 07		bpl $9af5			bpl 	_AddExit
.9aee		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9af0		95 50		sta $50,x			sta 	NSStatus,x
.9af2		20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9af5						_AddExit:
.9af5		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; check for -0
.9af8		d0 02		bne $9afc			bne 	_AddNonZero
.9afa		74 50		stz $50,x			stz 	NSStatus,x
.9afc						_AddNonZero:
.9afc		60		rts				rts
.9afd						SubInteger:
.9afd		fa		plx				plx
.9afe		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b00		15 51		ora $51,x			ora 	NSStatus+1,x
.9b02		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b03		0a		asl a				asl 	a
.9b04		10 05		bpl $9b0b			bpl 	_NotRef
.9b06		48		pha				pha
.9b07		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b0a		68		pla				pla
.9b0b						_NotRef:
.9b0b		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b0c		30 09		bmi $9b17			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b0e		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b10		15 79		ora $79,x			ora 	NSExponent+1,x
.9b12		f0 06		beq $9b1a			beq 	_IntegerCode 				; if clear, then we have two integers
.9b14		4c dc 9c	jmp $9cdc			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b17						_StringData:
.9b17		4c d7 b1	jmp $b1d7			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b1a						_IntegerCode:
.9b1a		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9b1c		49 80		eor #$80			eor 	#$80
.9b1e		95 51		sta $51,x			sta 	NSStatus+1,x
.9b20		80 bf		bra $9ae1			bra 	AddCode 					; and do the same code as add.
.9b22						AndInteger:
.9b22		fa		plx				plx
.9b23		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b25		15 51		ora $51,x			ora 	NSStatus+1,x
.9b27		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b28		0a		asl a				asl 	a
.9b29		10 05		bpl $9b30			bpl 	_NotRef
.9b2b		48		pha				pha
.9b2c		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b2f		68		pla				pla
.9b30						_NotRef:
.9b30		0a		asl a				asl 	a
.9b31		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b33		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b35		15 79		ora $79,x			ora 	NSExponent+1,x
.9b37		f0 03		beq $9b3c			beq 	_IntegerCode 				; if clear, then we have two integers
.9b39		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9b3c						_IntegerCode:
.9b3c		b5 58		lda $58,x			lda		NSMantissa0,x
.9b3e		35 59		and $59,x			and 		NSMantissa0+1,x
.9b40		95 58		sta $58,x			sta 	NSMantissa0,x
.9b42		b5 60		lda $60,x			lda		NSMantissa1,x
.9b44		35 61		and $61,x			and 		NSMantissa1+1,x
.9b46		95 60		sta $60,x			sta 	NSMantissa1,x
.9b48		b5 68		lda $68,x			lda		NSMantissa2,x
.9b4a		35 69		and $69,x			and 		NSMantissa2+1,x
.9b4c		95 68		sta $68,x			sta 	NSMantissa2,x
.9b4e		b5 70		lda $70,x			lda		NSMantissa3,x
.9b50		35 71		and $71,x			and 		NSMantissa3+1,x
.9b52		95 70		sta $70,x			sta 	NSMantissa3,x
.9b54		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b56		60		rts				rts
.9b57						OraInteger:
.9b57		fa		plx				plx
.9b58		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b5a		15 51		ora $51,x			ora 	NSStatus+1,x
.9b5c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b5d		0a		asl a				asl 	a
.9b5e		10 05		bpl $9b65			bpl 	_NotRef
.9b60		48		pha				pha
.9b61		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b64		68		pla				pla
.9b65						_NotRef:
.9b65		0a		asl a				asl 	a
.9b66		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b68		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b6a		15 79		ora $79,x			ora 	NSExponent+1,x
.9b6c		f0 03		beq $9b71			beq 	_IntegerCode 				; if clear, then we have two integers
.9b6e		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9b71						_IntegerCode:
.9b71		b5 58		lda $58,x			lda		NSMantissa0,x
.9b73		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9b75		95 58		sta $58,x			sta 	NSMantissa0,x
.9b77		b5 60		lda $60,x			lda		NSMantissa1,x
.9b79		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9b7b		95 60		sta $60,x			sta 	NSMantissa1,x
.9b7d		b5 68		lda $68,x			lda		NSMantissa2,x
.9b7f		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9b81		95 68		sta $68,x			sta 	NSMantissa2,x
.9b83		b5 70		lda $70,x			lda		NSMantissa3,x
.9b85		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9b87		95 70		sta $70,x			sta 	NSMantissa3,x
.9b89		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b8b		60		rts				rts
.9b8c						EorInteger:
.9b8c		fa		plx				plx
.9b8d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b8f		15 51		ora $51,x			ora 	NSStatus+1,x
.9b91		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b92		0a		asl a				asl 	a
.9b93		10 05		bpl $9b9a			bpl 	_NotRef
.9b95		48		pha				pha
.9b96		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b99		68		pla				pla
.9b9a						_NotRef:
.9b9a		0a		asl a				asl 	a
.9b9b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b9d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b9f		15 79		ora $79,x			ora 	NSExponent+1,x
.9ba1		f0 03		beq $9ba6			beq 	_IntegerCode 				; if clear, then we have two integers
.9ba3		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9ba6						_IntegerCode:
.9ba6		b5 58		lda $58,x			lda		NSMantissa0,x
.9ba8		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9baa		95 58		sta $58,x			sta 	NSMantissa0,x
.9bac		b5 60		lda $60,x			lda		NSMantissa1,x
.9bae		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9bb0		95 60		sta $60,x			sta 	NSMantissa1,x
.9bb2		b5 68		lda $68,x			lda		NSMantissa2,x
.9bb4		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9bb6		95 68		sta $68,x			sta 	NSMantissa2,x
.9bb8		b5 70		lda $70,x			lda		NSMantissa3,x
.9bba		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9bbc		95 70		sta $70,x			sta 	NSMantissa3,x
.9bbe		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9bc0		60		rts				rts
.9bc1						WordIndirect:
.9bc1		fa		plx				plx
.9bc2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bc4		15 51		ora $51,x			ora 	NSStatus+1,x
.9bc6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bc7		0a		asl a				asl 	a
.9bc8		10 05		bpl $9bcf			bpl 	_NotRef
.9bca		48		pha				pha
.9bcb		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bce		68		pla				pla
.9bcf						_NotRef:
.9bcf		0a		asl a				asl 	a
.9bd0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bd2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bd4		15 79		ora $79,x			ora 	NSExponent+1,x
.9bd6		f0 03		beq $9bdb			beq 	_IntegerCode 				; if clear, then we have two integers
.9bd8		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9bdb						_IntegerCode:
.9bdb		20 e1 9a	jsr $9ae1			jsr 	AddCode 					; add the two values
.9bde		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9be0		95 50		sta $50,x			sta 	NSStatus,x
.9be2		60		rts				rts
.9be3						ByteIndirect:
.9be3		fa		plx				plx
.9be4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9be6		15 51		ora $51,x			ora 	NSStatus+1,x
.9be8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9be9		0a		asl a				asl 	a
.9bea		10 05		bpl $9bf1			bpl 	_NotRef
.9bec		48		pha				pha
.9bed		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bf0		68		pla				pla
.9bf1						_NotRef:
.9bf1		0a		asl a				asl 	a
.9bf2		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bf4		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bf6		15 79		ora $79,x			ora 	NSExponent+1,x
.9bf8		f0 03		beq $9bfd			beq 	_IntegerCode 				; if clear, then we have two integers
.9bfa		4c cd b1	jmp $b1cd			jmp 	TypeError 					; anything else, type mismatch.
.9bfd						_IntegerCode:
.9bfd		20 e1 9a	jsr $9ae1			jsr 	AddCode 					; add the two values
.9c00		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9c02		95 50		sta $50,x			sta 	NSStatus,x
.9c04		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9c05						ConvertInt16:
.9c05		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9c07		86 60		stx $60				stx 	NSMantissa1
.9c09		64 68		stz $68				stz 	NSMantissa2
.9c0b		64 70		stz $70				stz 	NSMantissa3
.9c0d		64 50		stz $50				stz 	NSStatus 					; positive integer
.9c0f		a2 00		ldx #$00			ldx 	#0 							; stack level
.9c11		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9c13		80 00		bra $9c15			bra 	ConvertInt32
.9c15						ConvertInt32:
.9c15		5a		phy				phy
.9c16		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9c18		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9c1a		10 08		bpl $9c24			bpl 	_CI32NotNeg
.9c1c		48		pha				pha
.9c1d		a9 2d		lda #$2d			lda 	#'-'
.9c1f		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c22		c8		iny				iny
.9c23		68		pla				pla
.9c24						_CI32NotNeg:
.9c24		20 32 9c	jsr $9c32			jsr 	_CI32DivideConvert 			; recursive conversion
.9c27		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9c29		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c2c		7a		ply				ply
.9c2d		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9c2f		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9c31		60		rts				rts
.9c32						_CI32DivideConvert:
.9c32		e8		inx				inx 								; write to next slot up
.9c33		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte 		 			; write the base out.
.9c36		ca		dex				dex
.9c37		20 60 99	jsr $9960			jsr 	Int32Divide 				; divide
.9c3a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9c3c		48		pha				pha
.9c3d		20 1d 99	jsr $991d			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9c40		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; is it zero ?
.9c43		f0 05		beq $9c4a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9c45		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9c47		20 32 9c	jsr $9c32			jsr 	_CI32DivideConvert 			; and recusrively call.
.9c4a						_CI32NoRecurse:
.9c4a		68		pla				pla 								; remainder
.9c4b		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9c4d		90 02		bcc $9c51			bcc 	_CI32NotHex
.9c4f		69 26		adc #$26			adc 	#6+32
.9c51						_CI32NotHex:
.9c51		69 30		adc #$30			adc 	#48
.9c53		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9c56		c8		iny				iny
.9c57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9c58						PrecedenceLevel:
>9c58		04					.byte	 4	; $00 <<
>9c59		02					.byte	 2	; $01 <=
>9c5a		02					.byte	 2	; $02 <>
>9c5b		00					.byte	 0	; $03 !!3
>9c5c		00					.byte	 0	; $04 ><
>9c5d		02					.byte	 2	; $05 >=
>9c5e		04					.byte	 4	; $06 >>
>9c5f		00					.byte	 0	; $07 !!7
>9c60		00					.byte	 0	; $08 !!8
>9c61		00					.byte	 0	; $09 !!9
>9c62		00					.byte	 0	; $0a !!10
>9c63		00					.byte	 0	; $0b !!11
>9c64		00					.byte	 0	; $0c !!12
>9c65		00					.byte	 0	; $0d !!13
>9c66		00					.byte	 0	; $0e !!14
>9c67		00					.byte	 0	; $0f !!15
>9c68		00					.byte	 0	; $10 @
>9c69		00					.byte	 0	; $11 !!17
>9c6a		00					.byte	 0	; $12 !!18
>9c6b		00					.byte	 0	; $13 [
>9c6c		04					.byte	 4	; $14 \
>9c6d		00					.byte	 0	; $15 ]
>9c6e		01					.byte	 1	; $16 ^
>9c6f		00					.byte	 0	; $17 _
>9c70		00					.byte	 0	; $18 `
>9c71		00					.byte	 0	; $19 !!25
>9c72		00					.byte	 0	; $1a !!26
>9c73		00					.byte	 0	; $1b {
>9c74		01					.byte	 1	; $1c |
>9c75		00					.byte	 0	; $1d }
>9c76		00					.byte	 0	; $1e ~
>9c77		00					.byte	 0	; $1f <7F>
>9c78		00					.byte	 0	; $20
>9c79		05					.byte	 5	; $21 !
>9c7a		00					.byte	 0	; $22 "
>9c7b		00					.byte	 0	; $23 #
>9c7c		05					.byte	 5	; $24 $
>9c7d		04					.byte	 4	; $25 %
>9c7e		01					.byte	 1	; $26 &
>9c7f		00					.byte	 0	; $27 '
>9c80		00					.byte	 0	; $28 (
>9c81		00					.byte	 0	; $29 )
>9c82		04					.byte	 4	; $2a *
>9c83		03					.byte	 3	; $2b +
>9c84		00					.byte	 0	; $2c ,
>9c85		03					.byte	 3	; $2d -
>9c86		00					.byte	 0	; $2e .
>9c87		04					.byte	 4	; $2f /
>9c88		00					.byte	 0	; $30 0
>9c89		00					.byte	 0	; $31 1
>9c8a		00					.byte	 0	; $32 2
>9c8b		00					.byte	 0	; $33 3
>9c8c		00					.byte	 0	; $34 4
>9c8d		00					.byte	 0	; $35 5
>9c8e		00					.byte	 0	; $36 6
>9c8f		00					.byte	 0	; $37 7
>9c90		00					.byte	 0	; $38 8
>9c91		00					.byte	 0	; $39 9
>9c92		00					.byte	 0	; $3a :
>9c93		00					.byte	 0	; $3b ;
>9c94		02					.byte	 2	; $3c <
>9c95		02					.byte	 2	; $3d =
>9c96		02					.byte	 2	; $3e >
>9c97		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9c98						EvaluateExpressionAt0:
.9c98		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9c9a						EvaluateExpression:
.9c9a		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9c9c						EvaluateExpressionAtPrecedence:
.9c9c		48		pha				pha 								; save precedence level
.9c9d		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm 				; evaluate term into level X.
.9ca0		68		pla				pla 								; restore precedence level.
.9ca1						_EXPRLoop:
.9ca1		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9ca3		b1 30		lda ($30),y			lda 	(codePtr),y
.9ca5		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ca7		b0 25		bcs $9cce			bcs 	_EXPRExit
.9ca9		da		phx				phx 								; read the operator precedence
.9caa		aa		tax				tax
.9cab		bd 58 9c	lda $9c58,x			lda 	PrecedenceLevel,x
.9cae		fa		plx				plx
.9caf		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9cb1		f0 1b		beq $9cce			beq 	_EXPRExit
.9cb3		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9cb5		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9cb7		c5 37		cmp $37				cmp 	zTemp0+1
.9cb9		b0 13		bcs $9cce			bcs		_EXPRExit 					; if current >= operator exit
.9cbb		48		pha				pha 								; save current precedence.
.9cbc		b1 30		lda ($30),y			lda 	(codePtr),y
.9cbe		c8		iny				iny
.9cbf		48		pha				pha
.9cc0		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9cc2		e8		inx				inx 								; work out the right hand side.
.9cc3		20 9c 9c	jsr $9c9c			jsr 	EvaluateExpressionAtPrecedence
.9cc6		ca		dex				dex
.9cc7		68		pla				pla 								; get operator, call the code.
.9cc8		20 d1 9c	jsr $9cd1			jsr 	_EXPRCaller
.9ccb		68		pla				pla 								; restore precedence level
.9ccc		80 d3		bra $9ca1			bra 	_EXPRLoop 					; and go round.
.9cce						_EXPRExit:
.9cce		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9cd0		60		rts				rts
.9cd1						_EXPRCaller:
.9cd1		da		phx				phx 								; save on stack, first thing is to restore it
.9cd2		0a		asl a				asl 	a 							; double so can use vectors into X
.9cd3		aa		tax				tax
.9cd4		7c e6 93	jmp ($93e6,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9cd7						FloatingPointAdd:
.9cd7		20 4d 9e	jsr $9e4d			jsr 	FloatPrepare 				; prepare for floats
.9cda		80 09		bra $9ce5			bra 	FloatAdd
.9cdc						FloatingPointSub:
.9cdc		20 4d 9e	jsr $9e4d			jsr 	FloatPrepare 				; prepare for floats
.9cdf						FloatSubtract:
.9cdf		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9ce1		49 80		eor #$80			eor 	#$80
.9ce3		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9ce5						FloatAdd:
.9ce5		48		pha				pha
.9ce6		5a		phy				phy
.9ce7		20 5c 9e	jsr $9e5c			jsr 	NSNormalise 				; normalise S[X]
.9cea		f0 51		beq $9d3d			beq 	_FAReturn1
.9cec		e8		inx				inx 								; normalise S[X+1]
.9ced		20 5c 9e	jsr $9e5c			jsr 	NSNormalise
.9cf0		ca		dex				dex
.9cf1		c9 00		cmp #$00			cmp 	#0
.9cf3		f0 60		beq $9d55			beq 	_FAExit 					; if so, just return A
.9cf5		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9cf7		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9cf9		f0 18		beq $9d13			beq 	_FAExponentsEqual
.9cfb		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9cfd		a8		tay				tay
.9cfe		38		sec				sec 								; do a signed comparison of the exponents.
.9cff		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d01		50 02		bvc $9d05			bvc 	_FANoSignedChange
.9d03		49 80		eor #$80			eor 	#$80
.9d05						_FANoSignedChange:
.9d05		29 80		and #$80			and 	#$80
.9d07		10 02		bpl $9d0b			bpl 	_FAHaveMax
.9d09		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9d0b						_FAHaveMax:
.9d0b		20 58 9d	jsr $9d58			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9d0e		e8		inx				inx
.9d0f		20 58 9d	jsr $9d58			jsr 	_FAShiftToExponent
.9d12		ca		dex				dex
.9d13						_FAExponentsEqual:
.9d13		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9d15		55 51		eor $51,x			eor 	NSStatus+1,x
.9d17		30 0e		bmi $9d27			bmi 	_FADifferentSigns
.9d19		20 90 9a	jsr $9a90			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9d1c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9d1e		10 35		bpl $9d55			bpl 	_FAExit 					; if no, we are done.
.9d20		20 09 a7	jsr $a709			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9d23		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9d25		80 2e		bra $9d55			bra 	_FAExit
.9d27						_FADifferentSigns:
.9d27		20 aa 9a	jsr $9aaa			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9d2a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9d2c		10 06		bpl $9d34			bpl 	_FACheckZero 				; if no, check for -0
.9d2e		20 b2 a6	jsr $a6b2			jsr 	NSMNegate 					; netate result
.9d31		20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9d34						_FACheckZero:
.9d34		20 12 a7	jsr $a712			jsr 	NSMIsZero	 				; check for -0
.9d37		d0 1c		bne $9d55			bne 	_FAExit
.9d39		74 50		stz $50,x			stz 	NSStatus,x
.9d3b		80 18		bra $9d55			bra 	_FAExit
.9d3d						_FAReturn1:
.9d3d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9d3f		95 58		sta $58,x			sta 	NSMantissa0,x
.9d41		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d43		95 60		sta $60,x			sta 	NSMantissa1,x
.9d45		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d47		95 68		sta $68,x			sta 	NSMantissa2,x
.9d49		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d4b		95 70		sta $70,x			sta 	NSMantissa3,x
.9d4d		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d4f		95 78		sta $78,x			sta 	NSExponent,x
.9d51		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d53		95 50		sta $50,x			sta 	NSStatus,x
.9d55						_FAExit:
.9d55		7a		ply				ply
.9d56		68		pla				pla
.9d57		60		rts				rts
.9d58						_FAShiftToExponent:
.9d58						_FAShiftToExponent2:
.9d58		98		tya				tya 								; compare Y to exponent
.9d59		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9d5b		f0 07		beq $9d64			beq 	_FASEExit 					; exit if so.
.9d5d		20 09 a7	jsr $a709			jsr 	NSMShiftRight	 			; shift the mantissa right
.9d60		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9d62		80 f4		bra $9d58			bra 	_FAShiftToExponent2
.9d64						_FASEExit:
.9d64		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9d65						CompareFloat:
.9d65		20 df 9c	jsr $9cdf			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9d68		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9d6a		29 f8		and #$f8			and 	#$F8
.9d6c		15 68		ora $68,x			ora 	NSMantissa2,x
.9d6e		15 70		ora $70,x			ora 	NSMantissa3,x
.9d70		f0 08		beq $9d7a			beq 	_FCExit 					; zero, so approximately identical
.9d72		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9d74		34 50		bit $50,x			bit 	NSStatus,x
.9d76		10 02		bpl $9d7a			bpl 	_FCExit
.9d78						_FCNegative:
.9d78		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9d7a						_FCExit:
.9d7a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9d7b						FDivideCommand:
.9d7b		fa		plx				plx	 								; restore stack position
.9d7c		20 4d 9e	jsr $9e4d			jsr 	FloatPrepare 				; prepare for floats
.9d7f						FloatDivide:
.9d7f		48		pha				pha
.9d80		e8		inx				inx
.9d81		20 5c 9e	jsr $9e5c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9d84		ca		dex				dex
.9d85		c9 00		cmp #$00			cmp 	#0
.9d87		f0 1d		beq $9da6			beq 	_FDZero
.9d89		20 5c 9e	jsr $9e5c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9d8c		f0 16		beq $9da4			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9d8e		20 81 99	jsr $9981			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9d91		20 1d 99	jsr $991d			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9d94		20 5c 9e	jsr $9e5c			jsr		NSNormalise 				; renormalise
.9d97		20 11 9a	jsr $9a11			jsr 	CalculateSign 				; calculate result sign
.9d9a		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9d9c		38		sec				sec
.9d9d		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d9f		38		sec				sec
.9da0		e9 1e		sbc #$1e			sbc 	#30
.9da2		95 78		sta $78,x			sta 	NSExponent,x
.9da4						_FDExit:
.9da4		68		pla				pla
.9da5		60		rts				rts
.9da6						_FDZero:
.9da6		a9 03		lda #$03		lda	#3
.9da8		4c 96 97	jmp $9796		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9dab						FloatFractionalPart:
.9dab		5a		phy				phy
.9dac		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9dae		29 7f		and #$7f			and 	#$7F
.9db0		95 50		sta $50,x			sta 	NSStatus,x
.9db2		20 5c 9e	jsr $9e5c			jsr 	NSNormalise
.9db5		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9db7		38		sec				sec
.9db8		e9 e0		sbc #$e0			sbc 	#$E0
.9dba		90 29		bcc $9de5			bcc 	_FFPExit 					; already fractional
.9dbc		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9dbe		b0 22		bcs $9de2			bcs 	_FFPZero
.9dc0		a8		tay				tay 								; put count to do in Y
.9dc1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9dc3		20 e7 9d	jsr $9de7			jsr 	_FFPPartial
.9dc6		95 70		sta $70,x			sta 	NSMantissa3,x
.9dc8		b5 68		lda $68,x			lda 	NSMantissa2,x
.9dca		20 e7 9d	jsr $9de7			jsr 	_FFPPartial
.9dcd		95 68		sta $68,x			sta 	NSMantissa2,x
.9dcf		b5 60		lda $60,x			lda 	NSMantissa1,x
.9dd1		20 e7 9d	jsr $9de7			jsr 	_FFPPartial
.9dd4		95 60		sta $60,x			sta 	NSMantissa1,x
.9dd6		b5 58		lda $58,x			lda 	NSMantissa0,x
.9dd8		20 e7 9d	jsr $9de7			jsr 	_FFPPartial
.9ddb		95 58		sta $58,x			sta 	NSMantissa0,x
.9ddd		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; zeroed check.
.9de0		d0 03		bne $9de5			bne 	_FFPExit
.9de2						_FFPZero:
.9de2		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.9de5						_FFPExit:
.9de5		7a		ply				ply
.9de6		60		rts				rts
.9de7						_FFPPartial:
.9de7		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9de9		f0 17		beq $9e02			beq 	_FFFPPExit
.9deb		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9ded		b0 0c		bcs $9dfb			bcs 	_FFFPPWholeByte
.9def		5a		phy				phy
.9df0						_FFFPPLeft:
.9df0		0a		asl a				asl 	a
.9df1		88		dey				dey
.9df2		d0 fc		bne $9df0			bne 	_FFFPPLeft
.9df4		7a		ply				ply
.9df5						_FFFPPRight:
.9df5		4a		lsr a				lsr 	a
.9df6		88		dey				dey
.9df7		d0 fc		bne $9df5			bne 	_FFFPPRight
.9df9		80 07		bra $9e02			bra 	_FFFPPExit
.9dfb						_FFFPPWholeByte:
.9dfb		98		tya				tya 								; subtract 8 from count
.9dfc		38		sec				sec
.9dfd		e9 08		sbc #$08			sbc 	#8
.9dff		a8		tay				tay
.9e00		a9 00		lda #$00			lda 	#0 							; and clear all
.9e02						_FFFPPExit:
.9e02		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9e03						FloatIntegerPart:
.9e03		48		pha				pha
.9e04		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9e06		f0 1d		beq $9e25			beq 	_FIPExit 					; if so do nothing
.9e08		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; is it zero ?
.9e0b		f0 15		beq $9e22			beq 	_FIPZero 					; if so return zero.
.9e0d		20 5c 9e	jsr $9e5c			jsr 	NSNormalise 				; normalise
.9e10		f0 10		beq $9e22			beq 	_FIPZero 					; normalised to zero, exit zero
.9e12						_FIPShift:
.9e12		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9e14		10 07		bpl $9e1d			bpl 	_FIPCheckZero
.9e16		20 09 a7	jsr $a709			jsr 	NSMShiftRight 				; shift mantissa right
.9e19		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9e1b		80 f5		bra $9e12			bra 	_FIPShift
.9e1d						_FIPCheckZero:
.9e1d		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; avoid -0 problem
.9e20		d0 03		bne $9e25			bne 	_FIPExit 					; set to zero if mantissa zero.
.9e22						_FIPZero:
.9e22		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.9e25						_FIPExit:
.9e25		68		pla				pla
.9e26		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9e27						FloatingPointMultiply:
.9e27		20 4d 9e	jsr $9e4d			jsr 	FloatPrepare 				; prepare for floats
.9e2a						FloatMultiply:
.9e2a		48		pha				pha
.9e2b		20 5c 9e	jsr $9e5c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9e2e		f0 18		beq $9e48			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9e30		e8		inx				inx
.9e31		20 5c 9e	jsr $9e5c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9e34		ca		dex				dex
.9e35		c9 00		cmp #$00			cmp 	#0
.9e37		f0 0c		beq $9e45			beq 	_FDSetZero
.9e39		20 d3 99	jsr $99d3			jsr 	MultiplyShort 				; calculate the result.
.9e3c		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9e3e		18		clc				clc
.9e3f		75 79		adc $79,x			adc 	NSExponent+1,x
.9e41		95 78		sta $78,x			sta 	NSExponent,x
.9e43		80 03		bra $9e48			bra 	_FDExit
.9e45						_FDSetZero:
.9e45		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; return 0
.9e48						_FDExit:
.9e48		20 5c 9e	jsr $9e5c			jsr 	NSNormalise 				; normalise the result
.9e4b		68		pla				pla
.9e4c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9e4d						FloatPrepare:
.9e4d		20 58 9f	jsr $9f58			jsr 	DereferenceTopTwo 			; dereference the top two values
.9e50		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9e52		15 51		ora $51,x			ora 	NSStatus+1,x
.9e54		29 10		and #$10			and 	#NSBIsString
.9e56		d0 01		bne $9e59			bne 	_FDType
.9e58		60		rts				rts
.9e59						_FDType:
.9e59		4c cd b1	jmp $b1cd			jmp 	TypeError
.9e5c						NSNormalise:
.9e5c		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9e5e		29 80		and #$80			and 	#$80
.9e60		09 08		ora #$08			ora 	#NSTFloat
.9e62		95 50		sta $50,x			sta 	NSStatus,x
.9e64		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; if zero exit
.9e67		d0 07		bne $9e70			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9e69		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9e6b		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9e6d		a9 00		lda #$00			lda 	#0 							; set Z flag
.9e6f		60		rts				rts
.9e70						_NSNormaliseOptimise:
.9e70		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9e72		d0 19		bne $9e8d			bne 	_NSNormaliseLoop
.9e74		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9e76		30 15		bmi $9e8d			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9e78		95 70		sta $70,x			sta 	NSMantissa3,x
.9e7a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e7c		95 68		sta $68,x			sta 	NSMantissa2,x
.9e7e		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e80		95 60		sta $60,x			sta 	NSMantissa1,x
.9e82		74 58		stz $58,x			stz 	NSMantissa0,x
.9e84		b5 78		lda $78,x			lda 	NSExponent,x
.9e86		38		sec				sec
.9e87		e9 08		sbc #$08			sbc 	#8
.9e89		95 78		sta $78,x			sta 	NSExponent,x
.9e8b		80 e3		bra $9e70			bra 	_NSNormaliseOptimise
.9e8d						_NSNormaliseLoop:
.9e8d		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9e8f		70 07		bvs $9e98			bvs 	_NSNExit 					; exit if so with Z flag clear
.9e91		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; shift mantissa left
.9e94		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9e96		80 f5		bra $9e8d			bra 	_NSNormaliseLoop
.9e98						_NSNExit:
.9e98		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9e9a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9e9b						AssignNumber:
.9e9b		5a		phy				phy
.9e9c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9e9e		85 36		sta $36				sta 	zTemp0
.9ea0		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ea2		85 37		sta $37				sta 	zTemp0+1
.9ea4		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9ea6		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ea8		95 50		sta $50,x			sta 	NSStatus,x
.9eaa		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9eac		c9 08		cmp #$08			cmp 	#NSTFloat
.9eae		f0 24		beq $9ed4			beq 	_ANFloat
.9eb0		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9eb2		f0 03		beq $9eb7			beq		_ANNotFloat
.9eb4		4c c8 b1	jmp $b1c8			jmp 	RangeError					; if it is, report an error.
.9eb7						_ANNotFloat:
.9eb7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9eb9		29 03		and #$03			and 	#3
.9ebb		d0 05		bne $9ec2			bne 	_ANByteWord
.9ebd		20 df 9e	jsr $9edf			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ec0		80 1b		bra $9edd			bra 	_ANExit
.9ec2						_ANByteWord:
.9ec2		48		pha				pha 								; save count
.9ec3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9ec5		92 36		sta ($36)			sta 	(zTemp0)
.9ec7		68		pla				pla
.9ec8		c9 01		cmp #$01			cmp	 	#1
.9eca		f0 11		beq $9edd			beq 	_ANExit
.9ecc		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ece		a0 01		ldy #$01			ldy 	#1
.9ed0		91 36		sta ($36),y			sta 	(zTemp0),y
.9ed2		80 09		bra $9edd			bra 	_ANExit
.9ed4						_ANFloat:
.9ed4		20 df 9e	jsr $9edf			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9ed7		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9ed9		a0 04		ldy #$04			ldy 	#4
.9edb		91 36		sta ($36),y			sta 	(zTemp0),y
.9edd						_ANExit:
.9edd		7a		ply				ply
.9ede		60		rts				rts
.9edf						_ANCopy4PackSign:
.9edf		a0 03		ldy #$03			ldy 	#3
.9ee1		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9ee3		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9ee5		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9ee7		91 36		sta ($36),y			sta 	(zTemp0),y
.9ee9		88		dey				dey
.9eea		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9eec		91 36		sta ($36),y			sta 	(zTemp0),y
.9eee		88		dey				dey
.9eef		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ef1		91 36		sta ($36),y			sta 	(zTemp0),y
.9ef3		88		dey				dey
.9ef4		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9ef6		91 36		sta ($36),y			sta 	(zTemp0),y
.9ef8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9ef9						AssignString:
.9ef9		5a		phy				phy
.9efa		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9efc		85 38		sta $38				sta 	zTemp1
.9efe		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f00		85 39		sta $39				sta 	zTemp1+1
.9f02		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f04		85 36		sta $36				sta 	zTemp0
.9f06		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f08		85 37		sta $37				sta 	zTemp0+1
.9f0a		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f0c		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f0e		f0 23		beq $9f33			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f10		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f11		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f13		e9 02		sbc #$02			sbc 	#2
.9f15		85 3c		sta $3c				sta 	zsTemp
.9f17		a0 01		ldy #$01			ldy 	#1
.9f19		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f1b		e9 00		sbc #$00			sbc 	#0
.9f1d		85 3d		sta $3d				sta 	zsTemp+1
.9f1f		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9f21						_ASGetLength:
.9f21		c8		iny				iny
.9f22		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f24		d0 fb		bne $9f21			bne 	_ASGetLength
.9f26		98		tya				tya 								; is this length <= current length
.9f27		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9f29		90 1e		bcc $9f49			bcc 	_ASCopyString
.9f2b		f0 1c		beq $9f49			beq 	_ASCopyString
.9f2d		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9f2f		a0 01		ldy #$01			ldy 	#1
.9f31		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f33						_ASNewStringRequired:
.9f33		e8		inx				inx 								; concrete the new string.
.9f34		20 b0 b8	jsr $b8b0			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9f37		ca		dex				dex
.9f38		18		clc				clc
.9f39		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9f3b		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9f3d		92 36		sta ($36)			sta 	(zTemp0)
.9f3f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f41		69 00		adc #$00			adc 	#0
.9f43		a0 01		ldy #$01			ldy 	#1
.9f45		91 36		sta ($36),y			sta 	(zTemp0),y
.9f47		80 0d		bra $9f56			bra 	_ASExit
.9f49						_ASCopyString:
.9f49		a0 00		ldy #$00			ldy 	#0
.9f4b						_ASCopyLoop:
.9f4b		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f4d		c8		iny				iny
.9f4e		c8		iny				iny
.9f4f		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f51		88		dey				dey
.9f52		c9 00		cmp #$00			cmp 	#0
.9f54		d0 f5		bne $9f4b			bne 	_ASCopyLoop
.9f56						_ASExit:
.9f56		7a		ply				ply
.9f57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9f58						DereferenceTopTwo:
.9f58		e8		inx				inx
.9f59		20 5d 9f	jsr $9f5d			jsr 	Dereference 				; deref x+1
.9f5c		ca		dex				dex  								; falls through to deref x
.9f5d						Dereference:
.9f5d		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9f5f		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9f61		f0 48		beq $9fab			beq 	_DRFExit 					; not a reference, so exit.
.9f63		5a		phy				phy
.9f64		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f66		85 36		sta $36				sta 	zTemp0
.9f68		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f6a		85 37		sta $37				sta 	zTemp0+1
.9f6c		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9f6e		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f70		95 58		sta $58,x			sta 	NSMantissa0,x
.9f72		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9f74		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f76		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f78		f0 0e		beq $9f88			beq 	_DRFDereferenceTwo
.9f7a		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9f7c		f0 2f		beq $9fad			beq 	_DRFFull
.9f7e		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9f80		29 03		and #$03			and 	#3
.9f82		f0 29		beq $9fad			beq 	_DRFFull 					; the whole word
.9f84		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9f86		f0 06		beq $9f8e			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9f88						_DRFDereferenceTwo:
.9f88		a0 01		ldy #$01			ldy 	#1
.9f8a		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f8c		95 60		sta $60,x			sta 	NSMantissa1,x
.9f8e						_DRFClear23:
.9f8e		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9f90		74 70		stz $70,x			stz 	NSMantissa3,x
.9f92		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9f94		29 18		and #$18			and 	#NSBTypeMask
.9f96		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9f98		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f9a		d0 0e		bne $9faa			bne 	_DRFNotString
.9f9c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9f9e		15 60		ora $60,x			ora 	NSMantissa1,x
.9fa0		d0 08		bne $9faa			bne 	_DRFNotString
.9fa2		a9 ac		lda #$ac			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9fa4		95 58		sta $58,x			sta 	NSMantissa0,x
.9fa6		a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9fa8		95 60		sta $60,x			sta 	NSMantissa1,x
.9faa						_DRFNotString
.9faa		7a		ply				ply 								; restore Y and exit
.9fab						_DRFExit:
.9fab		60		rts				rts
.9fac						_DRFNullString:
>9fac		00						.byte 	0
.9fad						_DRFFull:
.9fad		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9faf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb1		95 60		sta $60,x			sta 	NSMantissa1,x
.9fb3		c8		iny				iny
.9fb4		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb6		95 68		sta $68,x			sta 	NSMantissa2,x
.9fb8		c8		iny				iny
.9fb9		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fbb		95 70		sta $70,x			sta 	NSMantissa3,x
.9fbd		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9fbf		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9fc1		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9fc3		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9fc5		f0 05		beq $9fcc			beq 	_DRFNoExponent
.9fc7		c8		iny				iny 								; if not, read the exponent as well.
.9fc8		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fca		95 78		sta $78,x			sta 	NSExponent,x
.9fcc						_DRFNoExponent:
.9fcc		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9fce		10 0a		bpl $9fda			bpl 	_DRFExit2 					; if not, then exit.
.9fd0		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9fd2		95 70		sta $70,x			sta 	NSMantissa3,x
.9fd4		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9fd6		09 80		ora #$80			ora 	#NSBIsNegative
.9fd8		95 50		sta $50,x			sta 	NSStatus,x
.9fda						_DRFExit2:
.9fda		7a		ply				ply
.9fdb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9fdc						EncodeNumberStart:
.9fdc		38		sec				sec
.9fdd		80 01		bra $9fe0			bra 	EncodeNumberContinue+1
.9fdf						EncodeNumberContinue:
.9fdf		18		clc				clc
.9fe0						EncodeNumber:
.9fe0		08		php				php 								; save reset flag.
.9fe1		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9fe3		f0 12		beq $9ff7			beq 	_ENIsOkay
.9fe5		c9 30		cmp #$30			cmp 	#"0"
.9fe7		90 04		bcc $9fed			bcc 	_ENBadNumber
.9fe9		c9 3a		cmp #$3a			cmp 	#"9"+1
.9feb		90 0a		bcc $9ff7			bcc 	_ENIsOkay
.9fed						_ENBadNumber:
.9fed		28		plp				plp 								; throw saved reset
.9fee		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9ff1		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ff3		f0 7b		beq $a070			beq 	_ENConstructFinal
.9ff5						_ENFail:
.9ff5		18		clc				clc 								; not allowed
.9ff6		60		rts				rts
.9ff7						_ENIsOkay:
.9ff7		28		plp				plp 								; are we restarting
.9ff8		90 15		bcc $a00f			bcc 	_ENNoRestart
.9ffa						_ENStartEncode:
.9ffa		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9ffc		f0 0c		beq $a00a			beq 	_ENFirstDP
.9ffe		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a000		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte 					; in single byte mode.
.a003		a9 01		lda #$01			lda 	#ESTA_Low
.a005						_ENExitChange:
.a005		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a008		38		sec				sec
.a009		60		rts				rts
.a00a						_ENFirstDP:
.a00a		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; clear integer part
.a00d		80 3c		bra $a04b			bra 	_ESTASwitchFloat			; go straight to float and exi
.a00f						_ENNoRestart:
.a00f		48		pha				pha 								; save digit or DP on stack.
.a010		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a013		c9 01		cmp #$01			cmp 	#ESTA_Low
.a015		f0 09		beq $a020			beq  	_ESTALowState
.a017		c9 02		cmp #$02			cmp 	#ESTA_High
.a019		f0 26		beq $a041			beq 	_ESTAHighState
.a01b		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a01d		f0 38		beq $a057			beq 	_ESTADecimalState
>a01f		db						.byte 	$DB 						; causes a break in the emulator
.a020						_ESTALowState:
.a020		68		pla				pla 								; get value back
.a021		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a023		f0 26		beq $a04b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a025		29 0f		and #$0f			and 	#15 						; make digit
.a027		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a02a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a02c		0a		asl a				asl 	a
.a02d		0a		asl a				asl 	a
.a02e		75 58		adc $58,x			adc 	NSMantissa0,x
.a030		0a		asl a				asl 	a
.a031		6d 06 04	adc $0406			adc 	digitTemp
.a034		95 58		sta $58,x			sta 	NSMantissa0,x
.a036		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a038		90 05		bcc $a03f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a03a		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a03c		8d 05 04	sta $0405			sta 	encodeState
.a03f						_ESTANoSwitch:
.a03f		38		sec				sec
.a040		60		rts				rts
.a041						_ESTAHighState:
.a041		68		pla				pla 								; get value back
.a042		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a044		f0 05		beq $a04b			beq 	_ESTASwitchFloat
.a046		20 a4 a0	jsr $a0a4			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a049		38		sec				sec
.a04a		60		rts				rts
.a04b						_ESTASwitchFloat:
.a04b		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a04e		e8		inx				inx 								; zero the decimal additive.
.a04f		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.a052		ca		dex				dex
.a053		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a055		80 ae		bra $a005			bra 	_ENExitChange
.a057						_ESTADecimalState:
.a057		68		pla				pla 								; digit.
.a058		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a05a		f0 99		beq $9ff5			beq 	_ENFail
.a05c		e8		inx				inx 								; put digit into fractional part of X+1
.a05d		20 a4 a0	jsr $a0a4			jsr 	ESTAShiftDigitIntoMantissa
.a060		ca		dex				dex
.a061		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a064		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a067		c9 0b		cmp #$0b			cmp 	#11
.a069		f0 02		beq $a06d			beq 	_ESTADSFail
.a06b		38		sec				sec
.a06c		60		rts				rts
.a06d						_ESTADSFail:
.a06d		4c c8 b1	jmp $b1c8			jmp 	RangeError
.a070						_ENConstructFinal:
.a070		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a073		f0 2d		beq $a0a2			beq 	_ENCFExit 					; no decimals
.a075		5a		phy				phy
.a076		0a		asl a				asl 	a 							; x 4 and CLC
.a077		0a		asl a				asl 	a
.a078		6d 07 04	adc $0407			adc 	decimalCount
.a07b		a8		tay				tay
.a07c		b9 87 b1	lda $b187,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a07f		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a081		b9 88 b1	lda $b188,y			lda 	DecimalScalarTable-5+1,y
.a084		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a086		b9 89 b1	lda $b189,y			lda 	DecimalScalarTable-5+2,y
.a089		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a08b		b9 8a b1	lda $b18a,y			lda 	DecimalScalarTable-5+3,y
.a08e		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a090		b9 8b b1	lda $b18b,y			lda 	DecimalScalarTable-5+4,y
.a093		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a095		a9 08		lda #$08			lda 	#NSTFloat
.a097		95 52		sta $52,x			sta 	NSStatus+2,x
.a099		7a		ply				ply
.a09a		e8		inx				inx 								; multiply decimal const by decimal scalar
.a09b		20 2a 9e	jsr $9e2a			jsr 	FloatMultiply
.a09e		ca		dex				dex
.a09f		20 e5 9c	jsr $9ce5			jsr 	FloatAdd 					; add to integer part.
.a0a2						_ENCFExit:
.a0a2		18		clc				clc 								; reject the digit.
.a0a3		60		rts				rts
.a0a4						ESTAShiftDigitIntoMantissa:
.a0a4		29 0f		and #$0f			and 	#15 						; save digit
.a0a6		48		pha				pha
.a0a7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a0a9		48		pha				pha
.a0aa		b5 68		lda $68,x			lda 	NSMantissa2,x
.a0ac		48		pha				pha
.a0ad		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0af		48		pha				pha
.a0b0		b5 58		lda $58,x			lda 	NSMantissa0,x
.a0b2		48		pha				pha
.a0b3		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; x 2
.a0b6		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; x 4
.a0b9		18		clc				clc 								; pop mantissa and add
.a0ba		68		pla				pla
.a0bb		75 58		adc $58,x			adc 	NSMantissa0,x
.a0bd		95 58		sta $58,x			sta 	NSMantissa0,x
.a0bf		68		pla				pla
.a0c0		75 60		adc $60,x			adc 	NSMantissa1,x
.a0c2		95 60		sta $60,x			sta 	NSMantissa1,x
.a0c4		68		pla				pla
.a0c5		75 68		adc $68,x			adc 	NSMantissa2,x
.a0c7		95 68		sta $68,x			sta 	NSMantissa2,x
.a0c9		68		pla				pla
.a0ca		75 70		adc $70,x			adc 	NSMantissa3,x
.a0cc		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a0ce		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; x 10
.a0d1		68		pla				pla 								; add digit
.a0d2		18		clc				clc
.a0d3		75 58		adc $58,x			adc 	NSMantissa0,x
.a0d5		95 58		sta $58,x			sta 	NSMantissa0,x
.a0d7		90 0a		bcc $a0e3			bcc 	_ESTASDExit
.a0d9		f6 60		inc $60,x			inc 	NSMantissa1,x
.a0db		d0 06		bne $a0e3			bne 	_ESTASDExit
.a0dd		f6 68		inc $68,x			inc 	NSMantissa2,x
.a0df		d0 02		bne $a0e3			bne 	_ESTASDExit
.a0e1		f6 70		inc $70,x			inc 	NSMantissa3,x
.a0e3						_ESTASDExit:
.a0e3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a0e4						EvaluateTerm:
.a0e4		b1 30		lda ($30),y			lda 	(codePtr),y
.a0e6		30 18		bmi $a100			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a0e8		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a0ea		b0 6c		bcs $a158			bcs 	_ETVariable
.a0ec		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a0ee		90 6b		bcc $a15b			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a0f0		c9 3a		cmp #$3a			cmp 	#'9'+1
.a0f2		b0 67		bcs $a15b			bcs 	_ETPuncUnary
.a0f4		20 dc 9f	jsr $9fdc			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a0f7						_ETNumber:
.a0f7		c8		iny				iny 								; keep encoding until we have the numbers
.a0f8		b1 30		lda ($30),y			lda 	(codePtr),y
.a0fa		20 df 9f	jsr $9fdf			jsr 	EncodeNumberContinue
.a0fd		b0 f8		bcs $a0f7			bcs 	_ETNumber 					; go back if accepted.
.a0ff		60		rts				rts
.a100						_ETCheckUnary:
.a100		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a102		f0 3f		beq $a143			beq 	_ETString
.a104		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a106		f0 12		beq $a11a			beq 	_ETHexConstant
.a108		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a10a		90 0b		bcc $a117			bcc 	_ETSyntaxError
.a10c		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a10e		b0 07		bcs $a117			bcs 	_ETSyntaxError
.a110		da		phx				phx 								; push X on the stack
.a111		0a		asl a				asl 	a 							; put vector x 2 into X
.a112		aa		tax				tax
.a113		c8		iny				iny 								; consume unary function token
.a114		7c 66 94	jmp ($9466,x)			jmp 	(VectorSet0,x) 				; and do it.
.a117						_ETSyntaxError:
.a117		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.a11a						_ETHexConstant:
.a11a		c8		iny				iny 								; skip #
.a11b		c8		iny				iny 								; skip count
.a11c		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; clear result
.a11f						_ETHLoop:
.a11f		b1 30		lda ($30),y			lda 	(codePtr),y
.a121		c8		iny				iny 								; and consume
.a122		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a124		f0 1c		beq $a142			beq 	_ETHExit
.a126		48		pha				pha 								; save on stack.
.a127		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; x 2
.a12a		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; x 4
.a12d		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; x 8
.a130		20 ff a6	jsr $a6ff			jsr 	NSMShiftLeft 				; x 16
.a133		68		pla				pla 								; ASCII
.a134		c9 41		cmp #$41			cmp 	#'A'
.a136		90 02		bcc $a13a			bcc 	_ETHNotChar
.a138		e9 07		sbc #$07			sbc 	#7
.a13a						_ETHNotChar:
.a13a		29 0f		and #$0f			and 	#15 						; digit now
.a13c		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a13e		95 58		sta $58,x			sta 	NSMantissa0,x
.a140		80 dd		bra $a11f			bra 	_ETHLoop 					; go round.
.a142						_ETHExit:
.a142		60		rts				rts
.a143						_ETString:
.a143		c8		iny				iny 								; look at length
.a144		b1 30		lda ($30),y			lda 	(codePtr),y
.a146		48		pha				pha
.a147		c8		iny				iny 								; first character
.a148		20 4a b4	jsr $b44a			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a14b		68		pla				pla 								; restore count and save
.a14c		85 36		sta $36				sta 	zTemp0
.a14e		98		tya				tya 								; add length to Y to skip it.
.a14f		18		clc				clc
.a150		65 36		adc $36				adc 	zTemp0
.a152		a8		tay				tay
.a153		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a155		95 50		sta $50,x			sta 	NSStatus,x
.a157		60		rts				rts
.a158						_ETVariable:
.a158		4c ad a1	jmp $a1ad			jmp 	VariableHandler
.a15b						_ETPuncUnary:
.a15b		c8		iny				iny 								; consume the unary character
.a15c		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a15e		f0 2b		beq $a18b			beq 	_ETUnaryNegate
.a160		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a162		f0 36		beq $a19a			beq 	_ETDereference
.a164		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a166		f0 3e		beq $a1a6			beq 	_ETParenthesis
.a168		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a16a		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a16c		f0 06		beq $a174			beq 	_ETIndirection
.a16e		e6 36		inc $36				inc 	zTemp0
.a170		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a172		d0 a3		bne $a117			bne 	_ETSyntaxError
.a174						_ETIndirection:
.a174		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a176		1a		inc a				inc 	a
.a177		48		pha				pha
.a178		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm				; evaluate the term
.a17b		20 5d 9f	jsr $9f5d			jsr 	Dereference 				; dereference it.
.a17e		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a180		d0 06		bne $a188			bne 	_ETTypeMismatch
.a182		68		pla				pla 								; indirection 1-2
.a183		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a185		95 50		sta $50,x			sta 	NSStatus,x
.a187		60		rts				rts
.a188						_ETTypeMismatch:
.a188		4c cd b1	jmp $b1cd			jmp 	TypeError
.a18b						_ETUnaryNegate:
.a18b		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm				; evaluate the term
.a18e		20 5d 9f	jsr $9f5d			jsr 	Dereference 				; dereference it.
.a191		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a193		29 10		and #$10			and 	#NSTString
.a195		d0 f1		bne $a188			bne 	_ETTypeMismatch
.a197		4c b2 a6	jmp $a6b2			jmp 	NSMNegate  					; just toggles the sign bit.
.a19a						_ETDereference:
.a19a		20 e4 a0	jsr $a0e4			jsr 	EvaluateTerm				; evaluate the term
.a19d		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a19f		29 20		and #$20			and 	#NSBIsReference
.a1a1		f0 e5		beq $a188			beq 	_ETTypeMismatch
.a1a3		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a1a5		60		rts				rts
.a1a6						_ETParenthesis:
.a1a6		20 9a 9c	jsr $9c9a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a1a9		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; check for )
.a1ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a1ad						VariableHandler:
.a1ad		b1 30		lda ($30),y			lda 	(codePtr),y
.a1af		18		clc				clc
.a1b0		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a1b2		85 37		sta $37				sta 	zTemp0+1
.a1b4		c8		iny				iny
.a1b5		b1 30		lda ($30),y			lda 	(codePtr),y
.a1b7		85 36		sta $36				sta 	zTemp0
.a1b9		c8		iny				iny
.a1ba		18		clc				clc									; copy variable address+3 to mantissa
.a1bb		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a1bd		95 58		sta $58,x			sta 	NSMantissa0,x
.a1bf		a5 37		lda $37				lda 	zTemp0+1
.a1c1		69 00		adc #$00			adc 	#0
.a1c3		95 60		sta $60,x			sta 	NSMantissa1,x
.a1c5		74 68		stz $68,x			stz 	NSMantissa2,x
.a1c7		74 70		stz $70,x			stz 	NSMantissa3,x
.a1c9		74 78		stz $78,x			stz 	NSExponent,x
.a1cb		5a		phy				phy
.a1cc		a0 02		ldy #$02			ldy 	#2 							; read type
.a1ce		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1d0		7a		ply				ply
.a1d1		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a1d3		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a1d5		95 50		sta $50,x			sta 	NSStatus,x
.a1d7		29 04		and #$04			and 	#NSBIsArray
.a1d9		d0 01		bne $a1dc			bne 	_VHArray
.a1db		60		rts				rts
.a1dc						_VHArray:
.a1dc		e8		inx				inx
.a1dd		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a1e0		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a1e2		95 51		sta $51,x			sta 	NSStatus+1,x
.a1e4		b1 30		lda ($30),y			lda 	(codePtr),y
.a1e6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a1e8		d0 06		bne $a1f0			bne 	_VHNoSecondIndex
.a1ea		c8		iny				iny 								; skip the comma
.a1eb		e8		inx				inx
.a1ec		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a1ef		ca		dex				dex
.a1f0						_VHNoSecondIndex:
.a1f0		ca		dex				dex 								; set X back.
.a1f1		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; and check the right bracket.
.a1f4		5a		phy				phy 								; save position
.a1f5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a1f7		85 3e		sta $3e				sta 	zaTemp
.a1f9		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1fb		85 3f		sta $3f				sta 	zaTemp+1
.a1fd		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a1ff		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a201		f0 5d		beq $a260			beq 	_VHBadArray
.a203		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a205		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a207		f0 02		beq $a20b			beq 	_VHHas2Mask
.a209		a9 ff		lda #$ff			lda 	#$FF
.a20b						_VHHas2Mask:
.a20b		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a20d		f0 4c		beq $a25b			beq 	_VHBadIndex
.a20f		0a		asl a				asl 	a 							; carry will be set if a second index
.a210		90 08		bcc $a21a			bcc 	_VHCheckFirstIndex
.a212		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a214		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a216		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a218		90 41		bcc $a25b			bcc 	_VHBadIndex
.a21a						_VHCheckFirstIndex:
.a21a		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a21c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a21e		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a220		90 39		bcc $a25b			bcc 	_VHBadIndex
.a222		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a224		64 37		stz $37				stz 	zTemp0+1
.a226		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a228		30 0e		bmi $a238			bmi 	_VHNoMultiply
.a22a		da		phx				phx
.a22b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a22d		48		pha				pha
.a22e		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a230		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a232		1a		inc a				inc 	a 							; add 1 for zero base
.a233		fa		plx				plx
.a234		20 9b a6	jsr $a69b			jsr 	Multiply8x8 				; calculate -> Z0
.a237		fa		plx				plx
.a238						_VHNoMultiply:
.a238		18		clc				clc
.a239		a5 36		lda $36				lda 	zTemp0
.a23b		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a23d		85 36		sta $36				sta 	zTemp0
.a23f		a5 37		lda $37				lda 	zTemp0+1
.a241		69 00		adc #$00			adc 	#0
.a243		85 37		sta $37				sta 	zTemp0+1
.a245		b5 50		lda $50,x			lda 	NSStatus,x
.a247		20 b3 87	jsr $87b3			jsr 	ScaleByBaseType
.a24a		18		clc				clc
.a24b		b2 3e		lda ($3e)			lda 	(zaTemp)
.a24d		65 36		adc $36				adc 	zTemp0
.a24f		95 58		sta $58,x			sta 	NSMantissa0,x
.a251		a0 01		ldy #$01			ldy 	#1
.a253		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a255		65 37		adc $37				adc 	zTemp0+1
.a257		95 60		sta $60,x			sta 	NSMantissa1,x
.a259		7a		ply				ply 								; restore position
.a25a		60		rts				rts
.a25b						_VHBadIndex:
.a25b		a9 17		lda #$17		lda	#23
.a25d		4c 96 97	jmp $9796		jmp	ErrorHandler
.a260						_VHBadArray:
.a260		a9 18		lda #$18		lda	#24
.a262		4c 96 97	jmp $9796		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a265						AbsUnary:
.a265		fa		plx				plx 								; restore stack pos
.a266		20 3e a6	jsr $a63e			jsr 	EvaluateNumber 				; get a float or int
.a269		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a26c		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a26e		29 7f		and #$7f			and 	#$7F
.a270		95 50		sta $50,x			sta 	NSStatus,x
.a272		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a273						AllocUnary:
.a273		fa		plx				plx 								; restore stack pos
.a274		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger		; get bytes required.
.a277		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a27a		da		phx				phx 								; save X/Y
.a27b		5a		phy				phy
.a27c		8a		txa				txa 								; copy X into Y
.a27d		a8		tay				tay
.a27e		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a281		aa		tax				tax
.a282		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a285		20 92 a2	jsr $a292			jsr 	AllocateXABytes 			; allocate memory
.a288		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a28b		8a		txa				txa 	 							; typing is 16 bit integer.
.a28c		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a28f		7a		ply				ply
.a290		fa		plx				plx
.a291		60		rts				rts
.a292						AllocateXABytes:
.a292		5a		phy				phy
.a293		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a296		84 36		sty $36				sty 	zTemp0
.a298		5a		phy				phy
.a299		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a29c		84 37		sty $37				sty 	zTemp0+1
.a29e		5a		phy				phy
.a29f		18		clc				clc 								; add to low memory pointer
.a2a0		6d 08 04	adc $0408			adc 	lowMemPtr
.a2a3		8d 08 04	sta $0408			sta 	lowMemPtr
.a2a6		8a		txa				txa
.a2a7		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a2aa		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a2ad		b0 2f		bcs $a2de			bcs 	CISSMemory
.a2af		20 d0 a2	jsr $a2d0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a2b2						_ClearMemory:
.a2b2		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a2b5		c5 36		cmp $36				cmp 	zTemp0
.a2b7		d0 07		bne $a2c0			bne 	_CMClearNext
.a2b9		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a2bc		c5 37		cmp $37				cmp 	zTemp0+1
.a2be		f0 0c		beq $a2cc			beq 	_CMExit
.a2c0						_CMClearNext:
.a2c0		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a2c2		92 36		sta ($36)			sta 	(zTemp0)
.a2c4		e6 36		inc $36				inc 	zTemp0
.a2c6		d0 ea		bne $a2b2			bne 	_ClearMemory
.a2c8		e6 37		inc $37				inc		zTemp0+1
.a2ca		80 e6		bra $a2b2			bra 	_ClearMemory
.a2cc						_CMExit:
.a2cc		fa		plx				plx
.a2cd		68		pla				pla
.a2ce		7a		ply				ply
.a2cf		60		rts				rts
.a2d0						CheckIdentifierStringSpace:
.a2d0		48		pha				pha
.a2d1		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a2d4		18		clc				clc
.a2d5		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a2d7		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a2da		b0 02		bcs $a2de			bcs 	CISSMemory
.a2dc		68		pla				pla
.a2dd		60		rts				rts
.a2de						CISSMemory:
.a2de		a9 06		lda #$06		lda	#6
.a2e0		4c 96 97	jmp $9796		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a2e3						AscUnary:
.a2e3		fa		plx				plx 								; restore stack pos
.a2e4		20 48 a6	jsr $a648			jsr 	EvaluateString 				; get a string
.a2e7		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a2e9		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte 					; ASC("") will return zero.
.a2ec		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a2ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a2f0						FracUnary:
.a2f0		fa		plx				plx 								; restore stack pos
.a2f1		20 3e a6	jsr $a63e			jsr 	EvaluateNumber 				; get a float or int
.a2f4		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a2f7		b5 50		lda $50,x			lda 	NSStatus,x
.a2f9		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a2fb		f0 04		beq $a301			beq 	_IUZero
.a2fd		20 ab 9d	jsr $9dab			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a300		60		rts				rts
.a301						_IUZero:
.a301		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.a304		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a305						IntUnary:
.a305		fa		plx				plx 								; restore stack pos
.a306		20 3e a6	jsr $a63e			jsr 	EvaluateNumber 				; get a float or int
.a309		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a30c		b5 50		lda $50,x			lda 	NSStatus,x
.a30e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a310		f0 03		beq $a315			beq 	_IUExit
.a312		20 03 9e	jsr $9e03			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a315						_IUExit:
.a315		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a316						LenUnary:
.a316		fa		plx				plx 								; restore stack pos
.a317		20 48 a6	jsr $a648			jsr 	EvaluateString 				; get a string
.a31a		5a		phy				phy
.a31b		a0 00		ldy #$00			ldy 	#0 							; find length
.a31d						_LenFind:
.a31d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a31f		f0 06		beq $a327			beq 	_LenExit
.a321		c8		iny				iny
.a322		d0 f9		bne $a31d			bne 	_LenFind
.a324		4c c8 b1	jmp $b1c8			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a327						_LenExit:
.a327		98		tya				tya		 							; return length
.a328		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.a32b		7a		ply				ply
.a32c		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a32f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a330						Unary_Min:
.a330		a9 01		lda #$01			lda 	#1
.a332		80 02		bra $a336			bra 	UnaryMinMaxMain
.a334						Unary_Max:
.a334		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a336						UnaryMinMaxMain:
.a336		fa		plx				plx 								; get index on number stack
.a337		48		pha				pha 								; save comparator
.a338		20 35 a6	jsr $a635			jsr 	EvaluateValue 				; get the first value.
.a33b						_UMMMLoop:
.a33b		b1 30		lda ($30),y			lda 	(codePtr),y
.a33d		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a33f		f0 22		beq $a363			beq 	_UMMMDone
.a341		20 85 97	jsr $9785			jsr 	CheckComma 					; must be a comma
.a344		e8		inx				inx
.a345		20 35 a6	jsr $a635			jsr 	EvaluateValue
.a348		ca		dex				dex
.a349		20 d3 a6	jsr $a6d3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a34c		e8		inx				inx
.a34d		20 d3 a6	jsr $a6d3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a350		e8		inx				inx
.a351		20 4d 98	jsr $984d			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a354		ca		dex				dex
.a355		ca		dex				dex
.a356		85 36		sta $36				sta 	zTemp0 						; save required result
.a358		68		pla				pla 								; get and save comparator
.a359		48		pha				pha
.a35a		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a35c		d0 dd		bne $a33b			bne 	_UMMMLoop
.a35e		20 66 a3	jsr $a366			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a361		80 d8		bra $a33b			bra 	_UMMMLoop
.a363						_UMMMDone:
.a363		68		pla				pla 								; throw the comparator
.a364		c8		iny				iny 								; skip )
.a365		60		rts				rts
.a366						ExpCopyAboveDown:
.a366		b5 51		lda $51,x			lda 	NSStatus+1,x
.a368		95 50		sta $50,x			sta 	NSStatus,x
.a36a		b5 79		lda $79,x			lda 	NSExponent+1,x
.a36c		95 78		sta $78,x			sta 	NSExponent,x
.a36e		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a370		95 58		sta $58,x			sta 	NSMantissa0,x
.a372		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a374		95 60		sta $60,x			sta 	NSMantissa1,x
.a376		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a378		95 68		sta $68,x			sta 	NSMantissa2,x
.a37a		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a37c		95 70		sta $70,x			sta 	NSMantissa3,x
.a37e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a37f						Unary_Not:
.a37f		fa		plx				plx
.a380		20 5d a6	jsr $a65d			jsr 	EvaluateInteger 			; get integer
.a383		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a386		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; zero mantissa ?
.a389		f0 04		beq $a38f			beq 	_NotZero
.a38b		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.a38e		60		rts				rts
.a38f						_NotZero:
.a38f		4c 03 98	jmp $9803			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a392						PeekByteUnary:
.a392		a9 01		lda #$01			lda 	#1
.a394		80 0a		bra $a3a0			bra 	PeekUnary
.a396						PeekWUnary:
.a396		a9 02		lda #$02			lda 	#2
.a398		80 06		bra $a3a0			bra 	PeekUnary
.a39a						PeekLUnary:
.a39a		a9 03		lda #$03			lda 	#3
.a39c		80 02		bra $a3a0			bra 	PeekUnary
.a39e						PeekDUnary:
.a39e		a9 04		lda #$04			lda 	#4
.a3a0						PeekUnary:
.a3a0		fa		plx				plx 								; restore position.
.a3a1		48		pha				pha 								; save count to copy on stack
.a3a2		20 70 a6	jsr $a670			jsr		Evaluate16BitInteger 		; address as constant.
.a3a5		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a3a8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a3aa		85 36		sta $36				sta 	zTemp0
.a3ac		b5 60		lda $60,x			lda 	NSMantissa1,x
.a3ae		85 37		sta $37				sta 	zTemp0+1
.a3b0		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; clear the result to zero.
.a3b3		68		pla				pla 								; count in zTemp2
.a3b4		85 3a		sta $3a				sta 	zTemp2
.a3b6		da		phx				phx 								; save stack position and offset of read
.a3b7		5a		phy				phy
.a3b8		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a3ba						_PULoop:
.a3ba		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a3bc		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a3be		c8		iny				iny 								; next byte to write
.a3bf		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a3c0		18		clc				clc
.a3c1		69 08		adc #$08			adc 	#MathStackSize
.a3c3		aa		tax				tax
.a3c4		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a3c6		d0 f2		bne $a3ba			bne 	_PULoop
.a3c8		7a		ply				ply 								; restore stack/code pos and exit.
.a3c9		fa		plx				plx
.a3ca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a3cb						SgnUnary:
.a3cb		fa		plx				plx 								; restore stack pos
.a3cc		20 3e a6	jsr $a63e			jsr 	EvaluateNumber 				; get a float or int
.a3cf		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a3d2		20 12 a7	jsr $a712			jsr 	NSMIsZero 					; if zero
.a3d5		f0 0e		beq $a3e5			beq 	_SGZero  					; return Int Zero
.a3d7		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a3d9		48		pha				pha
.a3da		a9 01		lda #$01			lda 	#1 							; set to 1
.a3dc		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.a3df		68		pla				pla
.a3e0		29 80		and #$80			and		#$80 						; copy the sign byte out
.a3e2		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a3e4		60		rts				rts
.a3e5		20 f0 a6	jsr $a6f0	_SGZero:jsr 	NSMSetZero
.a3e8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a3e9						ValUnary:
.a3e9		fa		plx				plx 								; restore stack pos
.a3ea		20 ff a3	jsr $a3ff			jsr 	ValMainCode 				; do the main val() code
.a3ed		b0 01		bcs $a3f0			bcs 	_VUError 					; couldn't convert
.a3ef		60		rts				rts
.a3f0						_VUError:
.a3f0		4c cd b1	jmp $b1cd			jmp 	TypeError
.a3f3						IsValUnary:
.a3f3		fa		plx				plx 								; restore stack pos
.a3f4		20 ff a3	jsr $a3ff			jsr 	ValMainCode 				; do the main val() code
.a3f7		b0 03		bcs $a3fc			bcs 	_VUBad
.a3f9		4c 03 98	jmp $9803			jmp 	ReturnTrue
.a3fc						_VUBad:
.a3fc		4c 0e 98	jmp $980e			jmp 	ReturnFalse
.a3ff						ValMainCode:
.a3ff		20 48 a6	jsr $a648			jsr 	EvaluateString 				; get a string
.a402		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; check right bracket present
.a405						ValEvaluateZTemp0:
.a405		5a		phy				phy
.a406		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a408		f0 17		beq $a421			beq 	_VMCFail2
.a40a		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a40c		48		pha				pha 								; save first character
.a40d		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a40f		d0 01		bne $a412			bne 	_VMCStart
.a411		c8		iny				iny 								; skip over -
.a412						_VMCStart:
.a412		38		sec				sec 								; initialise first time round.
.a413						_VMCNext:
.a413		c8		iny				iny 								; pre-increment
.a414		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a416		f0 0c		beq $a424			beq 	_VMCSuccess 				; successful.
.a418		20 e0 9f	jsr $9fe0			jsr 	EncodeNumber 				; send it to the number-builder
.a41b		90 03		bcc $a420			bcc 	_VMCFail 					; if failed, give up.
.a41d		18		clc				clc 								; next time round, countinue
.a41e		80 f3		bra $a413			bra 	_VMCNext
.a420						_VMCFail:
.a420		68		pla				pla
.a421						_VMCFail2:
.a421		7a		ply				ply
.a422		38		sec				sec
.a423		60		rts				rts
.a424						_VMCSuccess:
.a424		a9 00		lda #$00			lda 	#0 							; construct final
.a426		20 e0 9f	jsr $9fe0			jsr 	EncodeNumber 				; by sending a duff value.
.a429		68		pla				pla 								; if it was -ve
.a42a		c9 2d		cmp #$2d			cmp 	#"-"
.a42c		d0 03		bne $a431			bne 	_VMCNotNegative
.a42e		20 b2 a6	jsr $a6b2			jsr		NSMNegate 					; negate it.
.a431						_VMCNotNegative:
.a431		7a		ply				ply
.a432		18		clc				clc
.a433		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a434						ChrUnary:
.a434		fa		plx				plx 								; restore stack pos
.a435		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a438		48		pha				pha
.a439		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a43c		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a43e		20 2d b9	jsr $b92d			jsr 	StringTempAllocate
.a441		68		pla				pla 								; write number to it
.a442		20 66 b9	jsr $b966			jsr 	StringTempWrite
.a445		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a446						ItemCountUnary:
.a446		fa		plx				plx
.a447		20 48 a6	jsr $a648			jsr 	EvaluateString
.a44a		e8		inx				inx
.a44b		20 be a4	jsr $a4be			jsr 	ICGetSeperator
.a44e		ca		dex				dex
.a44f		20 df a4	jsr $a4df			jsr 	ICSetPointer 				; zTemp0 = (string)
.a452		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero 					; zero the result.
.a455		5a		phy				phy
.a456		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a458						_ICULoop:
.a458		c8		iny				iny
.a459		b1 36		lda ($36),y			lda 	(zTemp0),y
.a45b		cd 94 07	cmp $0794			cmp 	ICSeperator
.a45e		d0 02		bne $a462			bne 	_ICUNoMatch
.a460		f6 58		inc $58,x			inc 	NSMantissa0,x
.a462						_ICUNoMatch:
.a462		c9 00		cmp #$00			cmp 	#0
.a464		d0 f2		bne $a458			bne 	_ICULoop
.a466		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a468		7a		ply				ply
.a469		60		rts				rts
.a46a						ItemGetUnary:
.a46a		fa		plx				plx
.a46b		20 48 a6	jsr $a648			jsr 	EvaluateString 				; search string
.a46e		20 85 97	jsr $9785			jsr 	CheckComma
.a471		e8		inx				inx 								; get count
.a472		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.a475		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a477		f0 61		beq $a4da			beq 	ICGSRange
.a479		e8		inx				inx 								; get seperator.
.a47a		20 be a4	jsr $a4be			jsr 	ICGetSeperator
.a47d		ca		dex				dex
.a47e		ca		dex				dex
.a47f		5a		phy				phy
.a480		20 df a4	jsr $a4df			jsr 	ICSetPointer 				; zTemp0 points to string.
.a483		a0 00		ldy #$00			ldy 	#0
.a485		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a487		f0 0e		beq $a497			beq 	_IGUFoundStart
.a489						_IGUFindNext:
.a489		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a48b		f0 4d		beq $a4da			beq 	ICGSRange 					; eol, not found.
.a48d		c8		iny				iny
.a48e		cd 94 07	cmp $0794			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a491		d0 f6		bne $a489			bne 	_IGUFindNext
.a493		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a495		d0 f2		bne $a489			bne 	_IGUFindNext
.a497						_IGUFoundStart:
.a497		84 38		sty $38				sty 	zTemp1 						; save start
.a499		88		dey				dey
.a49a						_IGUFindLength:
.a49a		c8		iny				iny 								; forward till seperator/EOS
.a49b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a49d		f0 05		beq $a4a4			beq 	_IGUFoundLength
.a49f		cd 94 07	cmp $0794			cmp 	ICSeperator
.a4a2		d0 f6		bne $a49a			bne 	_IGUFindLength
.a4a4						_IGUFoundLength:
.a4a4		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a4a6		98		tya				tya 								; calculate length of new string.
.a4a7		38		sec				sec
.a4a8		e5 38		sbc $38				sbc 	zTemp1
.a4aa		20 2d b9	jsr $b92d			jsr 	StringTempAllocate 			; allocate bytes for it.
.a4ad		a4 38		ldy $38				ldy 	zTemp1
.a4af						_IGUCopySub:
.a4af		c4 39		cpy $39				cpy 	zTemp1+1
.a4b1		f0 08		beq $a4bb			beq 	_IGUCopyOver
.a4b3		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4b5		20 66 b9	jsr $b966			jsr 	StringTempWrite
.a4b8		c8		iny				iny
.a4b9		80 f4		bra $a4af			bra 	_IGUCopySub
.a4bb						_IGUCopyOver:
.a4bb		7a		ply				ply
.a4bc		60		rts				rts
>a4bd		db						.byte 	$DB 						; causes a break in the emulator
.a4be						ICGetSeperator:
.a4be		20 85 97	jsr $9785			jsr 	CheckComma 					; preceding comma
.a4c1		20 48 a6	jsr $a648			jsr 	EvaluateString 				; seperator string
.a4c4		20 df a4	jsr $a4df			jsr 	ICSetPointer 				; access it
.a4c7		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a4c9		8d 94 07	sta $0794			sta 	ICSeperator
.a4cc		f0 0c		beq $a4da			beq 	ICGSRange 					; check LEN(seperator) = 1
.a4ce		5a		phy				phy
.a4cf		a0 01		ldy #$01			ldy 	#1
.a4d1		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4d3		d0 05		bne $a4da			bne 	ICGSRange
.a4d5		7a		ply				ply
.a4d6		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; check following )
.a4d9		60		rts				rts
.a4da						ICGSRange:
.a4da		a9 04		lda #$04		lda	#4
.a4dc		4c 96 97	jmp $9796		jmp	ErrorHandler
.a4df						ICSetPointer:
.a4df		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a4e1		85 36		sta $36				sta 	zTemp0
.a4e3		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4e5		85 37		sta $37				sta 	zTemp0+1
.a4e7		60		rts				rts
.0794						ICSeperator:
>0794								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4e8						SpcUnary:
.a4e8		fa		plx				plx 								; restore stack pos
.a4e9		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger			; get value
.a4ec		5a		phy				phy
.a4ed		48		pha				pha 								; save count
.a4ee		20 2d b9	jsr $b92d			jsr 	StringTempAllocate
.a4f1		7a		ply				ply 								; to do count in Y
.a4f2						_SpcLoop:
.a4f2		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a4f4		f0 08		beq $a4fe			beq 	_SpcExit
.a4f6		a9 20		lda #$20			lda 	#32
.a4f8		20 66 b9	jsr $b966			jsr 	StringTempWrite
.a4fb		88		dey				dey
.a4fc		80 f4		bra $a4f2			bra 	_SpcLoop
.a4fe						_SpcExit:
.a4fe		7a		ply				ply
.a4ff		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.a502		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a503						Unary_Str:
.a503		fa		plx				plx
.a504		20 3e a6	jsr $a63e			jsr 	EvaluateNumber  			; get number
.a507		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; closing bracket
.a50a		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a50c		20 25 a5	jsr $a525			jsr 	ConvertNumberToString 		; do the conversion.
.a50f		a9 21		lda #$21			lda		#33 						; create buffer
.a511		20 2d b9	jsr $b92d			jsr 	StringTempAllocate 			; allocate memory
.a514		da		phx				phx  								; copy the converted string into the buffer.
.a515		a2 00		ldx #$00			ldx 	#0
.a517						_USCopy:
.a517		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a51a		20 66 b9	jsr $b966			jsr 	StringTempWrite
.a51d		e8		inx				inx
.a51e		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a521		d0 f4		bne $a517			bne 	_USCopy
.a523		fa		plx				plx
.a524		60		rts				rts
.a525						ConvertNumberToString:
.a525		5a		phy				phy 								; save code position
.a526		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a529		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a52c		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a52e		10 09		bpl $a539			bpl 	_CNTSNotNegative
.a530		29 7f		and #$7f			and 	#$7F 						; make +ve
.a532		95 50		sta $50,x			sta 	NSStatus,x
.a534		a9 2d		lda #$2d			lda 	#"-"
.a536		20 9a a5	jsr $a59a			jsr 	WriteDecimalBuffer
.a539						_CNTSNotNegative:
.a539		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a53b		f0 12		beq $a54f			beq 	_CNTSNotFloat
.a53d		e8		inx				inx 								; round up so we don't get too many 6.999999
.a53e		a9 01		lda #$01			lda 	#1
.a540		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.a543		ca		dex				dex
.a544		b5 78		lda $78,x			lda		NSExponent,x
.a546		95 79		sta $79,x			sta 	NSExponent+1,x
.a548		a9 08		lda #$08			lda 	#NSTFloat
.a54a		95 51		sta $51,x			sta 	NSStatus+1,x
.a54c		20 e5 9c	jsr $9ce5			jsr 	FloatAdd
.a54f						_CNTSNotFloat:
.a54f		20 7c a5	jsr $a57c			jsr 	MakePlusTwoString 			; do the integer part.
.a552		20 ab 9d	jsr $9dab			jsr 	FloatFractionalPart 		; get the fractional part
.a555		20 5c 9e	jsr $9e5c			jsr 	NSNormalise					; normalise , exit if zero
.a558		f0 20		beq $a57a			beq 	_CNTSExit
.a55a		a9 2e		lda #$2e			lda 	#"."
.a55c		20 9a a5	jsr $a59a			jsr 	WriteDecimalBuffer 			; write decimal place
.a55f						_CNTSDecimal:
.a55f		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a562		30 16		bmi $a57a			bmi 	_CNTSExit
.a564		e8		inx				inx 								; x 10.0
.a565		a9 0a		lda #$0a			lda 	#10
.a567		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.a56a		a9 08		lda #$08			lda 	#NSTFloat
.a56c		95 50		sta $50,x			sta 	NSStatus,x
.a56e		ca		dex				dex
.a56f		20 2a 9e	jsr $9e2a			jsr 	FloatMultiply
.a572		20 7c a5	jsr $a57c			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a575		20 ab 9d	jsr $9dab			jsr 	FloatFractionalPart 		; get the fractional part
.a578		80 e5		bra $a55f			bra 	_CNTSDecimal 				; keep going.
.a57a						_CNTSExit:
.a57a		7a		ply				ply
.a57b		60		rts				rts
.a57c						MakePlusTwoString:
.a57c		da		phx				phx
.a57d		20 d3 a6	jsr $a6d3			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a580		e8		inx				inx 								; access it
.a581		e8		inx				inx
.a582		20 03 9e	jsr $9e03			jsr 	FloatIntegerPart 			; make it an integer
.a585		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a587		20 15 9c	jsr $9c15			jsr 	ConvertInt32
.a58a		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a58c						_MPTSCopy:
.a58c		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a58f		20 9a a5	jsr $a59a			jsr 	WriteDecimalBuffer
.a592		e8		inx				inx
.a593		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a596		d0 f4		bne $a58c			bne 	_MPTSCopy
.a598		fa		plx				plx
.a599		60		rts				rts
.a59a						WriteDecimalBuffer:
.a59a		da		phx				phx
.a59b		ae 11 04	ldx $0411			ldx 	dbOffset
.a59e		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a5a1		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a5a4		ee 11 04	inc $0411			inc 	dbOffset
.a5a7		fa		plx				plx
.a5a8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5a9						Unary_Left:
.a5a9		fa		plx				plx
.a5aa		18		clc				clc 								; only one parameter
.a5ab		20 0e a6	jsr $a60e			jsr 	SubstringInitial 			; set up.
.a5ae		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5b0		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5b2		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5b4		80 25		bra $a5db			bra 	SubstringMain
.a5b6						Unary_Right:
.a5b6		fa		plx				plx
.a5b7		18		clc				clc 								; only one parameter
.a5b8		20 0e a6	jsr $a60e			jsr 	SubstringInitial 			; set up.
.a5bb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5bd		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5bf		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a5c1		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5c3		b0 02		bcs $a5c7			bcs 	_URNotUnderflow
.a5c5		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5c7						_URNotUnderflow:
.a5c7		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5c9		80 10		bra $a5db			bra 	SubstringMain
.a5cb						Unary_Mid:
.a5cb		fa		plx				plx
.a5cc		38		sec				sec 								; two parameters
.a5cd		20 0e a6	jsr $a60e			jsr 	SubstringInitial 			; set up.
.a5d0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5d2		f0 04		beq $a5d8			beq 	_UMError
.a5d4		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5d6		80 03		bra $a5db			bra 	SubstringMain
.a5d8						_UMError:
.a5d8		4c d2 b1	jmp $b1d2			jmp 	ArgumentError
.a5db						SubstringMain:
.a5db		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5dd		d5 78		cmp $78,x			cmp 	NSExponent,x
.a5df		b0 27		bcs $a608			bcs 	_SSMNull 					; if so, return an empty string.
.a5e1		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5e3		f0 23		beq $a608			beq 	_SSMNull 					; return empty string.
.a5e5		18		clc				clc 								; add the offset +1 to the address and
.a5e6		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a5e8		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a5ea		85 36		sta $36				sta 	zTemp0
.a5ec		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a5ee		69 00		adc #$00			adc 	#0
.a5f0		85 37		sta $37				sta 	zTemp0+1
.a5f2						_SSMNoCarry:
.a5f2		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a5f4		20 2d b9	jsr $b92d			jsr 	StringTempAllocate 			; allocate that many characters
.a5f7		5a		phy				phy 								; save Y
.a5f8		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a5fa						_SSMCopy:
.a5fa		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a5fc		f0 08		beq $a606			beq 	_SSMEString 				; no more to copy
.a5fe		20 66 b9	jsr $b966			jsr 	StringTempWrite 			; and write it out.
.a601		c8		iny				iny
.a602		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a604		d0 f4		bne $a5fa			bne 	_SSMCopy
.a606						_SSMEString:
.a606		7a		ply				ply
.a607						_SSMExit:
.a607		60		rts				rts
.a608						_SSMNull:
.a608		a9 00		lda #$00			lda 	#0
.a60a		20 2d b9	jsr $b92d			jsr 	StringTempAllocate
.a60d		60		rts				rts
.a60e						SubstringInitial:
.a60e		da		phx				phx 								; save initial stack position
.a60f		08		php				php 								; save carry on stack indicating 2 parameters
.a610		20 48 a6	jsr $a648			jsr 	EvaluateString 				; get a string
.a613		5a		phy				phy 								; calculate length to exponent.
.a614		a0 ff		ldy #$ff			ldy 	#$FF
.a616						_SIFindLength:
.a616		c8		iny				iny
.a617		b1 36		lda ($36),y			lda 	(zTemp0),y
.a619		d0 fb		bne $a616			bne 	_SIFindLength
.a61b		98		tya				tya
.a61c		95 78		sta $78,x			sta 	NSExponent,x
.a61e		7a		ply				ply
.a61f		e8		inx				inx
.a620		20 85 97	jsr $9785			jsr 	CheckComma 					; comma next
.a623		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get next parameter
.a626		28		plp				plp 								; is it the last parameter ?
.a627		90 07		bcc $a630			bcc 	_SSIExit 					; if so, exit.
.a629		e8		inx				inx
.a62a		20 85 97	jsr $9785			jsr 	CheckComma 					; comma next
.a62d		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get last parameter
.a630						_SSIExit:
.a630		fa		plx				plx
.a631		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; check closing bracket
.a634		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a635						EvaluateValue:
.a635		48		pha				pha
.a636		20 9a 9c	jsr $9c9a			jsr		EvaluateExpression 			; expression
.a639		20 5d 9f	jsr $9f5d			jsr 	Dereference					; derefernce it
.a63c		68		pla				pla
.a63d		60		rts				rts
.a63e						EvaluateNumber:
.a63e		20 35 a6	jsr $a635			jsr 	EvaluateValue 				; get a value
.a641		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a643		29 10		and #$10			and 	#NSBIsString
.a645		d0 13		bne $a65a			bne 	HelperTypeError
.a647		60		rts				rts
.a648						EvaluateString:
.a648		20 35 a6	jsr $a635			jsr 	EvaluateValue 				; get a value
.a64b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a64d		29 10		and #$10			and 	#NSBIsString
.a64f		f0 09		beq $a65a			beq 	HelperTypeError
.a651						CopyAddressToTemp0:
.a651		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a653		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a655		b5 60		lda $60,x			lda 	NSMantissa1,x
.a657		85 37		sta $37				sta 	zTemp0+1
.a659		60		rts				rts
.a65a						HelperTypeError:
.a65a		4c cd b1	jmp $b1cd			jmp 	TypeError
.a65d						EvaluateInteger:
.a65d		20 3e a6	jsr $a63e			jsr 	EvaluateNumber
.a660		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a662		d0 09		bne $a66d			bne 	HelperValueError 			; if not, it's a float.
.a664		60		rts				rts
.a665						EvaluateUnsignedInteger:
.a665		20 5d a6	jsr $a65d			jsr 	EvaluateInteger 			; check integer is +ve
.a668		b5 50		lda $50,x			lda 	NSStatus,x
.a66a		30 01		bmi $a66d			bmi 	HelperValueError
.a66c		60		rts				rts
.a66d						HelperValueError:
.a66d		4c d2 b1	jmp $b1d2			jmp 	ArgumentError
.a670						Evaluate16BitInteger:
.a670		20 65 a6	jsr $a665			jsr	 	EvaluateUnsignedInteger		; get integer
.a673		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a675		15 68		ora $68,x			ora 	NSMantissa2,x
.a677		d0 f4		bne $a66d			bne 	HelperValueError
.a679		60		rts				rts
.a67a						Evaluate16BitIntegerSigned:
.a67a		20 5d a6	jsr $a65d			jsr	 	EvaluateInteger				; get integer
.a67d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a67f		15 68		ora $68,x			ora 	NSMantissa2,x
.a681		d0 ea		bne $a66d			bne 	HelperValueError
.a683		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a685		10 03		bpl $a68a			bpl 	_EISNotSigned
.a687		20 b9 a6	jsr $a6b9			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a68a						_EISNotSigned:
.a68a		60		rts				rts
.a68b						Evaluate8BitInteger:
.a68b		20 65 a6	jsr $a665			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a68e		d0 dd		bne $a66d			bne 	HelperValueError
.a690		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a692		15 68		ora $68,x			ora 	NSMantissa2,x
.a694		15 60		ora $60,x			ora 	NSMantissa1,x
.a696		d0 d5		bne $a66d			bne 	HelperValueError
.a698		b5 58		lda $58,x			lda 	NSMantissa0,x
.a69a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a69b						Multiply8x8:
.a69b		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a69c		85 36		sta $36			  	sta 	zTemp0
.a69e		86 37		stx $37				stx 	zTemp0+1
.a6a0		a9 00		lda #$00			lda 	#0
.a6a2		a2 08		ldx #$08			ldx 	#8
.a6a4						_M88Loop:
.a6a4		90 03		bcc $a6a9			bcc 	_M88NoAdd
.a6a6		18		clc				clc
.a6a7		65 37		adc $37				adc 	zTemp0+1
.a6a9						_M88NoAdd:
.a6a9		6a		ror a				ror 	a
.a6aa		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a6ac		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a6ad		d0 f5		bne $a6a4			bne 	_M88Loop
.a6af		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a6b1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6b2						NSMNegate:
.a6b2		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a6b4		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a6b6		95 50		sta $50,x			sta 	NSStatus,x
.a6b8		60		rts				rts
.a6b9						NSMNegateMantissa:
.a6b9		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a6ba		a9 00		lda #$00			lda 	#0
.a6bc		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a6be		95 58		sta $58,x			sta 	NSMantissa0,x
.a6c0		a9 00		lda #$00			lda 	#0
.a6c2		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a6c4		95 60		sta $60,x			sta 	NSMantissa1,x
.a6c6		a9 00		lda #$00			lda 	#0
.a6c8		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a6ca		95 68		sta $68,x			sta 	NSMantissa2,x
.a6cc		a9 00		lda #$00			lda 	#0
.a6ce		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a6d0		95 70		sta $70,x			sta 	NSMantissa3,x
.a6d2		60		rts				rts
.a6d3						NSMShiftUpTwo:
.a6d3		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6d5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a6d7		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6d9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a6db		b5 68		lda $68,x			lda 	NSMantissa2,x
.a6dd		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a6df		b5 70		lda $70,x			lda 	NSMantissa3,x
.a6e1		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a6e3		b5 78		lda $78,x			lda 	NSExponent,x
.a6e5		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a6e7		b5 50		lda $50,x			lda 	NSStatus,x
.a6e9		95 52		sta $52,x			sta 	NSStatus+2,x
.a6eb		60		rts				rts
.a6ec						NSMSetZeroMantissaOnly:
.a6ec		a9 00		lda #$00			lda 	#0
.a6ee		80 06		bra $a6f6			bra 	NSMSetMantissa
.a6f0						NSMSetZero:
.a6f0		a9 00		lda #$00			lda 	#0
.a6f2						NSMSetByte:
.a6f2		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a6f4		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a6f6						NSMSetMantissa:
.a6f6		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a6f8		74 60		stz $60,x			stz 	NSMantissa1,x
.a6fa		74 68		stz $68,x			stz 	NSMantissa2,x
.a6fc		74 70		stz $70,x			stz 	NSMantissa3,x
.a6fe		60		rts				rts
.a6ff						NSMShiftLeft:
.a6ff		18		clc				clc
.a700						NSMRotateLeft:
.a700		36 58		rol $58,x			rol 	NSMantissa0,x
.a702		36 60		rol $60,x			rol		NSMantissa1,x
.a704		36 68		rol $68,x			rol		NSMantissa2,x
.a706		36 70		rol $70,x			rol		NSMantissa3,x
.a708		60		rts				rts
.a709						NSMShiftRight:
.a709		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a70b		76 68		ror $68,x			ror		NSMantissa2,x
.a70d		76 60		ror $60,x			ror		NSMantissa1,x
.a70f		76 58		ror $58,x			ror		NSMantissa0,x
.a711		60		rts				rts
.a712						NSMIsZero:
.a712		b5 70		lda $70,x			lda 	NSMantissa3,x
.a714		15 68		ora $68,x			ora		NSMantissa2,x
.a716		15 60		ora $60,x			ora		NSMantissa1,x
.a718		15 58		ora $58,x			ora		NSMantissa0,x
.a71a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/font_update/newfont.asm

.a71b						UpdateFont:
.a71b		a5 01		lda $01				lda 	1 							; save position
.a71d		48		pha				pha
.a71e		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a720		85 01		sta $01				sta 	1
.a722		a9 49		lda #$49			lda 	#((FontBinary) & $FF)
.a724		85 36		sta $36				sta 	0+zTemp0
.a726		a9 a7		lda #$a7			lda 	#((FontBinary) >> 8)
.a728		85 37		sta $37				sta 	1+zTemp0
.a72a		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a72c		85 38		sta $38				sta 	0+zTemp1
.a72e		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a730		85 39		sta $39				sta 	1+zTemp1
.a732						_UFCopy1:
.a732		a0 00		ldy #$00			ldy 	#0
.a734						_UFCopy2:
.a734		b1 36		lda ($36),y			lda 	(zTemp0),y
.a736		91 38		sta ($38),y			sta 	(zTemp1),y
.a738		c8		iny				iny
.a739		d0 f9		bne $a734			bne 	_UFCopy2
.a73b		e6 37		inc $37				inc 	zTemp0+1
.a73d		e6 39		inc $39				inc 	zTemp1+1
.a73f		a5 39		lda $39				lda 	zTemp1+1
.a741		c9 c8		cmp #$c8			cmp 	#$C8
.a743		d0 ed		bne $a732			bne 	_UFCopy1
.a745		68		pla				pla 								; restore.
.a746		85 01		sta $01				sta 	1
.a748		60		rts				rts
.a749						FontBinary:
>a749		06 09 10 3c 10 21 7e 00				.binary 	"../../common/generated/font.bin"
>a751		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a761		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a771		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a781		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a791		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a7a1		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a7b1		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a7c1		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a7d1		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a7e1		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a7f1		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a801		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a811		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a821		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a831		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a841		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a851		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a861		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a871		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a881		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a891		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a8a1		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a8b1		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a8c1		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a8d1		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a8e1		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a8f1		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a901		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a911		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a921		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a931		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a941		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a951		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a961		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>a971		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a981		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a991		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a9a1		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a9b1		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a9c1		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a9d1		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a9e1		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a9f1		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>aa01		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>aa11		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>aa21		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>aa31		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>aa41		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aa51		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aa61		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>aa71		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aa81		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aa91		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aaa1		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>aab1		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>aac1		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>aad1		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aae1		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aaf1		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>ab01		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ab11		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ab21		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ab31		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>ab41		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ab51		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ab61		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ab71		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ab81		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ab91		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>aba1		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>abb1		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>abc1		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>abd1		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>abe1		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>abf1		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ac01		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ac11		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ac21		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ac31		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ac41		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ac51		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ac61		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ac71		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ac81		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ac91		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>aca1		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>acb1		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>acc1		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>acd1		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ace1		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>acf1		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>ad01		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>ad11		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>ad21		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>ad31		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>ad41		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>ad51		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ad61		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ad71		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ad81		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ad91		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ada1		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>adb1		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>adc1		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>add1		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ade1		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>adf1		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ae01		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>ae11		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>ae21		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>ae31		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>ae41		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>ae51		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>ae61		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>ae71		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ae81		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ae91		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>aea1		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>aeb1		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>aec1		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>aed1		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>aee1		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>aef1		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>af01		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>af11		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>af21		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>af31		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>af41		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.af49						UnaryGetTime:
.af49		a9 00		lda #$00			lda 	#0
.af4b		80 02		bra $af4f			bra 	UGDTMain
.af4d						UnaryGetDate:
.af4d		a9 03		lda #$03			lda 	#3
.af4f						UGDTMain:
.af4f		fa		plx				plx 								; get stack position back
.af50		48		pha				pha 								; save table offset
.af51		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger			; ignored parameter
.af54		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; closing )
.af57		68		pla				pla 								; table offset in A
.af58		5a		phy				phy 								; saving Y
.af59		a8		tay				tay 								; table offset in Y
.af5a		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.af5c		20 2d b9	jsr $b92d			jsr 	StringTempAllocate
.af5f		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.af61		48		pha				pha
.af62		64 01		stz $01				stz 	1
.af64		20 77 af	jsr $af77			jsr 	UGDTDigit 					; do XX:YY:ZZ
.af67		20 72 af	jsr $af72			jsr 	UGDTColonDigit
.af6a		20 72 af	jsr $af72			jsr 	UGDTColonDigit
.af6d		68		pla				pla 								; restore I/O select
.af6e		85 01		sta $01				sta 	1
.af70		7a		ply				ply  								; restore code position
.af71		60		rts				rts
.af72						UGDTColonDigit:
.af72		a9 3a		lda #$3a			lda 	#':'
.af74		20 66 b9	jsr $b966			jsr 	StringTempWrite
.af77						UGDTDigit:
.af77		da		phx				phx 								; save X
.af78		b9 97 af	lda $af97,y			lda 	RTCROffset,y 				; get offset in RTC register
.af7b		aa		tax				tax
.af7c		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.af7f		39 9d af	and $af9d,y			and 	RTCRMask,y 					; and with Mask.
.af82		fa		plx				plx
.af83		48		pha				pha 								; output in BCD
.af84		4a		lsr a				lsr 	a
.af85		4a		lsr a				lsr 	a
.af86		4a		lsr a				lsr 	a
.af87		4a		lsr a				lsr 	a
.af88		09 30		ora #$30			ora 	#48
.af8a		20 66 b9	jsr $b966			jsr 	StringTempWrite
.af8d		68		pla				pla
.af8e		29 0f		and #$0f			and 	#15
.af90		09 30		ora #$30			ora 	#48
.af92		20 66 b9	jsr $b966			jsr 	StringTempWrite
.af95		c8		iny				iny
.af96		60		rts				rts
.af97						RTCROffset:
>af97		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.af9d						RTCRMask:
>af9d		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.afa3						AscGet:
.afa3		fa		plx				plx 								; restore stack pos
.afa4						AscGet2:
.afa4		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.afa7		20 37 81	jsr $8137	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.afaa		d0 0b		bne $afb7			bne 	_AGBreak
.afac		20 69 81	jsr $8169			jsr 	PopKeyboardQueue 			; wait for key.
.afaf		c9 00		cmp #$00			cmp 	#0
.afb1		f0 f4		beq $afa7			beq 	_AGKey
.afb3		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.afb6		60		rts				rts
.afb7						_AGBreak:
.afb7		a9 01		lda #$01		lda	#1
.afb9		4c 96 97	jmp $9796		jmp	ErrorHandler
.afbc						AscInkey:
.afbc		fa		plx				plx 								; restore stack pos
.afbd						AscInkey2:
.afbd		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.afc0		20 69 81	jsr $8169			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.afc3		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte
.afc6		60		rts				rts
.afc7						ChrGet:
.afc7		fa		plx				plx
.afc8		20 a4 af	jsr $afa4			jsr 	AscGet2
.afcb		4c d2 af	jmp $afd2			jmp 	GetInkeyToString
.afce						ChrInkey:
.afce		fa		plx				plx
.afcf		20 bd af	jsr $afbd			jsr 	AscInkey2
.afd2						GetInkeyToString:
.afd2		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.afd4		f0 0b		beq $afe1			beq 	_GKISNull
.afd6		48		pha				pha
.afd7		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.afd9		20 2d b9	jsr $b92d			jsr 	StringTempAllocate
.afdc		68		pla				pla 								; write number to it
.afdd		20 66 b9	jsr $b966			jsr 	StringTempWrite
.afe0		60		rts				rts
.afe1						_GKISNull:
.afe1		a9 00		lda #$00			lda 	#0
.afe3		20 2d b9	jsr $b92d			jsr 	StringTempAllocate
.afe6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.afe7						KeyDown:
.afe7		20 37 81	jsr $8137			jsr 	ProcessEvents 				; process outstanding events.
.afea		fa		plx				plx 								; restore stack pos
.afeb		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; key to check.
.afee		48		pha				pha 								; check right bracket.
.afef		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.aff2		68		pla				pla
.aff3		20 e1 81	jsr $81e1			jsr 	KeyboardConvertXA 			; get offset and mask.
.aff6		3d 5f 06	and $065f,x			and 	KeyStatus,x 				; is it zero ?
.aff9		f0 03		beq $affe			beq 	_KeyUp
.affb		4c 03 98	jmp $9803			jmp 	ReturnTrue
.affe		4c 0e 98	jmp $980e	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.b001						Unary_Random:
.b001		fa		plx				plx
.b002		20 52 b0	jsr $b052			jsr 	URCopyToMantissa  			; put random # in mantissa
.b005		b1 30		lda ($30),y			lda 	(codePtr),y
.b007		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b009		f0 08		beq $b013			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b00b		e8		inx				inx
.b00c		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b00f		ca		dex				dex
.b010		20 55 99	jsr $9955			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b013						_URNoModulus:
.b013		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b015		74 78		stz $78,x			stz 	NSExponent,x
.b017		20 7d 97	jsr $977d			jsr 	CheckRightBracket
.b01a		60		rts				rts
.b01b						Unary_Rnd:
.b01b		fa		plx				plx
.b01c		20 3e a6	jsr $a63e			jsr 	EvaluateNumber 				; number to use.
.b01f		20 7d 97	jsr $977d			jsr 	CheckRightBracket 			; closing bracket
.b022		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b024		10 20		bpl $b046			bpl 	_URDontSeed
.b026		a5 01		lda $01				lda 	1 							; switch to page 0
.b028		48		pha				pha
.b029		64 01		stz $01				stz 	1
.b02b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b02d		49 17		eor #$17			eor 	#$17
.b02f		8d a4 d6	sta $d6a4			sta 	$D6A4
.b032		b5 60		lda $60,x			lda 	NSMantissa1,x
.b034		49 a5		eor #$a5			eor 	#$A5
.b036		8d a5 d6	sta $d6a5			sta 	$D6A5
.b039		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b03b		8d a6 d6	sta $d6a6			sta 	$D6A6
.b03e		a9 01		lda #$01			lda 	#1
.b040		8d a6 d6	sta $d6a6			sta 	$D6A6
.b043		68		pla				pla
.b044		85 01		sta $01				sta 	1
.b046						_URDontSeed:
.b046		20 52 b0	jsr $b052			jsr 	URCopyToMantissa 			; copy into mantissa
.b049		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b04b		95 78		sta $78,x			sta 	NSExponent,x
.b04d		a9 08		lda #$08			lda 	#NSTFloat
.b04f		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b051		60		rts				rts
.b052						URCopyToMantissa:
.b052		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b054		48		pha				pha
.b055		64 01		stz $01				stz 	1
.b057		a9 01		lda #$01			lda 	#1
.b059		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b05c		ad a4 d6	lda $d6a4			lda 	$D6A4
.b05f		95 58		sta $58,x			sta 	NSMantissa0,x
.b061		ad a5 d6	lda $d6a5			lda 	$D6A5
.b064		95 60		sta $60,x			sta 	NSMantissa1,x
.b066		ad a4 d6	lda $d6a4			lda 	$D6A4
.b069		95 68		sta $68,x			sta 	NSMantissa2,x
.b06b		ad a5 d6	lda $d6a5			lda 	$D6A5
.b06e		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b070		95 70		sta $70,x			sta 	NSMantissa3,x
.b072		68		pla				pla
.b073		85 01		sta $01				sta 	1
.b075		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b076						Assemble_ora:
.b076		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b079		01					.byte $01
.b07a						Assemble_and:
.b07a		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b07d		21					.byte $21
.b07e						Assemble_eor:
.b07e		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b081		41					.byte $41
.b082						Assemble_adc:
.b082		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b085		61					.byte $61
.b086						Assemble_sta:
.b086		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b089		81					.byte $81
.b08a						Assemble_lda:
.b08a		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b08d		a1					.byte $a1
.b08e						Assemble_cmp:
.b08e		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b091		c1					.byte $c1
.b092						Assemble_sbc:
.b092		20 dc 82	jsr $82dc		jsr	AssembleGroup1
>b095		e1					.byte $e1
.b096						Assemble_asl:
.b096		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b099		02					.byte $02
>b09a		75					.byte $75
.b09b						Assemble_rol:
.b09b		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b09e		22					.byte $22
>b09f		75					.byte $75
.b0a0						Assemble_lsr:
.b0a0		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0a3		42					.byte $42
>b0a4		75					.byte $75
.b0a5						Assemble_ror:
.b0a5		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0a8		62					.byte $62
>b0a9		75					.byte $75
.b0aa						Assemble_stx:
.b0aa		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0ad		82					.byte $82
>b0ae		50					.byte $50
.b0af						Assemble_ldx:
.b0af		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0b2		a2					.byte $a2
>b0b3		d0					.byte $d0
.b0b4						Assemble_dec:
.b0b4		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0b7		c2					.byte $c2
>b0b8		55					.byte $55
.b0b9						Assemble_inc:
.b0b9		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0bc		e2					.byte $e2
>b0bd		55					.byte $55
.b0be						Assemble_stz:
.b0be		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0c1		60					.byte $60
>b0c2		44					.byte $44
.b0c3						Assemble_bit:
.b0c3		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0c6		20					.byte $20
>b0c7		55					.byte $55
.b0c8						Assemble_sty:
.b0c8		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0cb		80					.byte $80
>b0cc		54					.byte $54
.b0cd						Assemble_ldy:
.b0cd		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0d0		a0					.byte $a0
>b0d1		d5					.byte $d5
.b0d2						Assemble_cpy:
.b0d2		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0d5		c0					.byte $c0
>b0d6		d4					.byte $d4
.b0d7						Assemble_cpx:
.b0d7		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0da		e0					.byte $e0
>b0db		d0					.byte $d0
.b0dc						Assemble_tsb:
.b0dc		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0df		00					.byte $00
>b0e0		50					.byte $50
.b0e1						Assemble_trb:
.b0e1		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0e4		10					.byte $10
>b0e5		50					.byte $50
.b0e6						Assemble_jsr:
.b0e6		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0e9		14					.byte $14
>b0ea		10					.byte $10
.b0eb						Assemble_jmp:
.b0eb		20 e3 82	jsr $82e3		jsr	AssembleGroup2
>b0ee		40					.byte $40
>b0ef		10					.byte $10
.b0f0						Assemble_bpl:
.b0f0		20 34 83	jsr $8334		jsr	AssembleGroup3
>b0f3		10					.byte $10
.b0f4						Assemble_bmi:
.b0f4		20 34 83	jsr $8334		jsr	AssembleGroup3
>b0f7		30					.byte $30
.b0f8						Assemble_bvc:
.b0f8		20 34 83	jsr $8334		jsr	AssembleGroup3
>b0fb		50					.byte $50
.b0fc						Assemble_bvs:
.b0fc		20 34 83	jsr $8334		jsr	AssembleGroup3
>b0ff		70					.byte $70
.b100						Assemble_bcc:
.b100		20 34 83	jsr $8334		jsr	AssembleGroup3
>b103		90					.byte $90
.b104						Assemble_bcs:
.b104		20 34 83	jsr $8334		jsr	AssembleGroup3
>b107		b0					.byte $b0
.b108						Assemble_bne:
.b108		20 34 83	jsr $8334		jsr	AssembleGroup3
>b10b		d0					.byte $d0
.b10c						Assemble_beq:
.b10c		20 34 83	jsr $8334		jsr	AssembleGroup3
>b10f		f0					.byte $f0
.b110						Assemble_bra:
.b110		20 34 83	jsr $8334		jsr	AssembleGroup3
>b113		80					.byte $80
.b114						Assemble_brk:
.b114		20 68 83	jsr $8368		jsr	AssembleGroup4
>b117		00					.byte $00
.b118						Assemble_php:
.b118		20 68 83	jsr $8368		jsr	AssembleGroup4
>b11b		08					.byte $08
.b11c						Assemble_clc:
.b11c		20 68 83	jsr $8368		jsr	AssembleGroup4
>b11f		18					.byte $18
.b120						Assemble_plp:
.b120		20 68 83	jsr $8368		jsr	AssembleGroup4
>b123		28					.byte $28
.b124						Assemble_sec:
.b124		20 68 83	jsr $8368		jsr	AssembleGroup4
>b127		38					.byte $38
.b128						Assemble_rti:
.b128		20 68 83	jsr $8368		jsr	AssembleGroup4
>b12b		40					.byte $40
.b12c						Assemble_pha:
.b12c		20 68 83	jsr $8368		jsr	AssembleGroup4
>b12f		48					.byte $48
.b130						Assemble_cli:
.b130		20 68 83	jsr $8368		jsr	AssembleGroup4
>b133		58					.byte $58
.b134						Assemble_phy:
.b134		20 68 83	jsr $8368		jsr	AssembleGroup4
>b137		5a					.byte $5a
.b138						Assemble_rts:
.b138		20 68 83	jsr $8368		jsr	AssembleGroup4
>b13b		60					.byte $60
.b13c						Assemble_pla:
.b13c		20 68 83	jsr $8368		jsr	AssembleGroup4
>b13f		68					.byte $68
.b140						Assemble_sei:
.b140		20 68 83	jsr $8368		jsr	AssembleGroup4
>b143		78					.byte $78
.b144						Assemble_ply:
.b144		20 68 83	jsr $8368		jsr	AssembleGroup4
>b147		7a					.byte $7a
.b148						Assemble_dey:
.b148		20 68 83	jsr $8368		jsr	AssembleGroup4
>b14b		88					.byte $88
.b14c						Assemble_txa:
.b14c		20 68 83	jsr $8368		jsr	AssembleGroup4
>b14f		8a					.byte $8a
.b150						Assemble_tya:
.b150		20 68 83	jsr $8368		jsr	AssembleGroup4
>b153		98					.byte $98
.b154						Assemble_txs:
.b154		20 68 83	jsr $8368		jsr	AssembleGroup4
>b157		9a					.byte $9a
.b158						Assemble_tay:
.b158		20 68 83	jsr $8368		jsr	AssembleGroup4
>b15b		a8					.byte $a8
.b15c						Assemble_tax:
.b15c		20 68 83	jsr $8368		jsr	AssembleGroup4
>b15f		aa					.byte $aa
.b160						Assemble_clv:
.b160		20 68 83	jsr $8368		jsr	AssembleGroup4
>b163		b8					.byte $b8
.b164						Assemble_tsx:
.b164		20 68 83	jsr $8368		jsr	AssembleGroup4
>b167		ba					.byte $ba
.b168						Assemble_iny:
.b168		20 68 83	jsr $8368		jsr	AssembleGroup4
>b16b		c8					.byte $c8
.b16c						Assemble_dex:
.b16c		20 68 83	jsr $8368		jsr	AssembleGroup4
>b16f		ca					.byte $ca
.b170						Assemble_cld:
.b170		20 68 83	jsr $8368		jsr	AssembleGroup4
>b173		d8					.byte $d8
.b174						Assemble_phx:
.b174		20 68 83	jsr $8368		jsr	AssembleGroup4
>b177		da					.byte $da
.b178						Assemble_stp:
.b178		20 68 83	jsr $8368		jsr	AssembleGroup4
>b17b		db					.byte $db
.b17c						Assemble_inx:
.b17c		20 68 83	jsr $8368		jsr	AssembleGroup4
>b17f		e8					.byte $e8
.b180						Assemble_nop:
.b180		20 68 83	jsr $8368		jsr	AssembleGroup4
>b183		ea					.byte $ea
.b184						Assemble_sed:
.b184		20 68 83	jsr $8368		jsr	AssembleGroup4
>b187		f8					.byte $f8
.b188						Assemble_plx:
.b188		20 68 83	jsr $8368		jsr	AssembleGroup4
>b18b		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b18c						DecimalScalarTable:
>b18c		66 66 66 66				.dword $66666666 ; 0.1
>b190		de					.byte $de
>b191		1f 85 eb 51				.dword $51eb851f ; 0.01
>b195		db					.byte $db
>b196		4c 37 89 41				.dword $4189374c ; 0.001
>b19a		d8					.byte $d8
>b19b		ac 8b db 68				.dword $68db8bac ; 0.0001
>b19f		d4					.byte $d4
>b1a0		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b1a4		d1					.byte $d1
>b1a5		83 de 1b 43				.dword $431bde83 ; 1e-06
>b1a9		ce					.byte $ce
>b1aa		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b1ae		ca					.byte $ca
>b1af		89 3b e6 55				.dword $55e63b89 ; 1e-08
>b1b3		c7					.byte $c7
>b1b4		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b1b8		c4					.byte $c4
>b1b9		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b1bd		c0					.byte $c0
>b1be		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b1c2		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b1c3						SyntaxError:
.b1c3		a9 02		lda #$02		lda	#2
.b1c5		4c 96 97	jmp $9796		jmp	ErrorHandler
.b1c8						RangeError:
.b1c8		a9 04		lda #$04		lda	#4
.b1ca		4c 96 97	jmp $9796		jmp	ErrorHandler
.b1cd						TypeError:
.b1cd		a9 05		lda #$05		lda	#5
.b1cf		4c 96 97	jmp $9796		jmp	ErrorHandler
.b1d2						ArgumentError:
.b1d2		a9 07		lda #$07		lda	#7
.b1d4		4c 96 97	jmp $9796		jmp	ErrorHandler
.b1d7						NotDoneError:
.b1d7		a9 0c		lda #$0c		lda	#12
.b1d9		4c 96 97	jmp $9796		jmp	ErrorHandler
.b1dc						ErrorText:
>b1dc		42 72 65 61 6b 00			.text	"Break",0
>b1e2		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b1ea		72 72 6f 72 00
>b1ef		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b1f7		20 62 79 20 7a 65 72 6f 00
>b200		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b208		61 6e 67 65 00
>b20d		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b215		6d 61 74 63 68 00
>b21b		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b223		65 6d 6f 72 79 00
>b229		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b231		61 72 67 75 6d 65 6e 74 00
>b23a		53 74 6f 70 00				.text	"Stop",0
>b23f		53 74 72 69 6e 67 20 74			.text	"String too long",0
>b247		6f 6f 20 6c 6f 6e 67 00
>b24f		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b257		6e 20 66 61 69 6c 65 64 00
>b260		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b268		61 74 61 00
>b26c		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b274		65 6e 74 65 64 00
>b27a		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b282		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b28e		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b296		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b2a3		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b2ab		74 68 6f 75 74 20 52 65 70 65 61 74 00
>b2b8		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b2c0		68 6f 75 74 20 57 68 69 6c 65 00
>b2cb		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b2d3		68 6f 75 74 20 46 6f 72 00
>b2dc		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b2e4		61 63 6b 20 66 75 6c 6c 00
>b2ed		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b2f5		75 63 74 75 72 65 00
>b2fc		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b304		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b311		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b319		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b327		41 72 72 61 79 20 73 69			.text	"Array size",0
>b32f		7a 65 00
>b332		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b33a		79 20 69 6e 64 65 78 00
>b342		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>b34a		74 20 64 65 63 6c 61 72 65 64 00
>b355		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>b35d		20 66 6f 75 6e 64 00
>b364		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>b36c		65 72 72 6f 72 00
>b372		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>b37a		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc65		09 09 32 30 2f 30 31 2f			.text 9,9,"20/01/23 32"
>dc6d		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.b380						MemoryDeleteLine:
.b380		20 9f b3	jsr $b39f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b383		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b385		a8		tay				tay
.b386						_MDDLLoop:
.b386		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b388		92 30		sta ($30)			sta 	(codePtr)
.b38a		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b38c		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.b38e		d0 07		bne $b397			bne 	_MDLDLNext
.b390		a5 31		lda $31				lda 	codePtr+1
.b392		c5 3b		cmp $3b				cmp 	zTemp2+1
.b394		d0 01		bne $b397			bne 	_MDLDLNext
.b396						_MDDLExit:
.b396		60		rts				rts
.b397						_MDLDLNext:
.b397		e6 30		inc $30				inc 	codePtr						; next byte
.b399		d0 eb		bne $b386			bne 	_MDDLLoop
.b39b		e6 31		inc $31				inc 	codePtr+1
.b39d		80 e7		bra $b386			bra 	_MDDLLoop
.b39f						IMemoryFindEnd:
.b39f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3a1		85 3a		sta $3a				sta 	0+zTemp2
.b3a3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3a5		85 3b		sta $3b				sta 	1+zTemp2
.b3a7						_MDLFELoop:
.b3a7		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.b3a9		f0 0b		beq $b3b6			beq 	_MDLFEExit
.b3ab		18		clc				clc
.b3ac		65 3a		adc $3a				adc 	zTemp2
.b3ae		85 3a		sta $3a				sta 	zTemp2
.b3b0		90 f5		bcc $b3a7			bcc 	_MDLFELoop
.b3b2		e6 3b		inc $3b				inc 	zTemp2+1
.b3b4		80 f1		bra $b3a7			bra 	_MDLFELoop
.b3b6						_MDLFEExit:
.b3b6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.b3b7						MemoryInsertLine:
.b3b7		08		php				php
.b3b8		20 9f b3	jsr $b39f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b3bb		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.b3bd		1a		inc a				inc 	a
.b3be		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b3c0		b0 36		bcs $b3f8			bcs 	_MDLIError 					; no, fail.
.b3c2		28		plp				plp 								; do at a specific point or the end ?
.b3c3		90 08		bcc $b3cd			bcc 	_MDLIFound 					; if specific point already set.
.b3c5		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.b3c7		85 30		sta $30				sta 	codePtr 					; end.
.b3c9		a5 3b		lda $3b				lda 	zTemp2+1
.b3cb		85 31		sta $31				sta 	codePtr+1
.b3cd						_MDLIFound:
.b3cd		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b3d0		a8		tay				tay
.b3d1						_MDLIInsert:
.b3d1		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.b3d3		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b3d5		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.b3d7		c5 3a		cmp $3a				cmp 	zTemp2
.b3d9		d0 06		bne $b3e1			bne 	_MDLINext
.b3db		a5 31		lda $31				lda 	codePtr+1
.b3dd		c5 3b		cmp $3b				cmp 	zTemp2+1
.b3df		f0 0a		beq $b3eb			beq 	_MDLIHaveSpace
.b3e1						_MDLINext:
.b3e1		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.b3e3		d0 02		bne $b3e7			bne 	_MDLINoBorrow
.b3e5		c6 3b		dec $3b				dec 	zTemp2+1
.b3e7						_MDLINoBorrow:
.b3e7		c6 3a		dec $3a				dec 	zTemp2
.b3e9		80 e6		bra $b3d1			bra 	_MDLIInsert
.b3eb						_MDLIHaveSpace:
.b3eb		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.b3ee		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.b3ef						_MDLICopy:
.b3ef		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.b3f2		91 30		sta ($30),y			sta 	(codePtr),y
.b3f4		88		dey				dey
.b3f5		10 f8		bpl $b3ef			bpl 	_MDLICopy
.b3f7		60		rts				rts
.b3f8						_MDLIError:
.b3f8		a9 06		lda #$06		lda	#6
.b3fa		4c 96 97	jmp $9796		jmp	ErrorHandler
.b3fd						MDLAppendLine:
.b3fd		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b3ff		85 36		sta $36				sta 	zTemp0
.b401		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b403		85 38		sta $38				sta 	0+zTemp1
.b405		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b407		85 39		sta $39				sta 	1+zTemp1
.b409		b2 38		lda ($38)			lda 	(zTemp1)
.b40b		d0 0a		bne $b417			bne 	_MDLANoInitialise
.b40d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b40f		8d 95 07	sta $0795			sta 	0+AppendPointer
.b412		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b414		8d 96 07	sta $0796			sta 	1+AppendPointer
.b417						_MDLANoInitialise:
.b417		18		clc				clc
.b418		ad 95 07	lda $0795			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b41b		85 38		sta $38				sta 	zTemp1
.b41d		72 36		adc ($36)			adc 	(zTemp0)
.b41f		8d 95 07	sta $0795			sta 	AppendPointer
.b422		ad 96 07	lda $0796			lda 	AppendPointer+1
.b425		85 39		sta $39				sta 	zTemp1+1
.b427		69 00		adc #$00			adc 	#0
.b429		8d 96 07	sta $0796			sta 	AppendPointer+1
.b42c		a0 00		ldy #$00			ldy 	#0
.b42e						_MDLACopy:
.b42e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b430		91 38		sta ($38),y			sta 	(zTemp1),y
.b432		c8		iny				iny
.b433		98		tya				tya
.b434		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b436		d0 f6		bne $b42e			bne 	_MDLACopy
.b438		a9 00		lda #$00			lda 	#0 							; end of program.
.b43a		91 38		sta ($38),y			sta 	(zTemp1),y
.b43c		60		rts				rts
.0795						AppendPointer:
>0795								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.b43d						MemoryNew:
.b43d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b43f		85 30		sta $30				sta 	codePtr
.b441		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b443		85 31		sta $31				sta 	codePtr+1
.b445		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.b447		92 30		sta ($30)			sta 	(codePtr)
.b449		60		rts				rts
.b44a						MemoryInline:
.b44a		98		tya				tya 								; put address into stack,x
.b44b		18		clc				clc  								; get the offset, add codePtr
.b44c		65 30		adc $30				adc 	codePtr
.b44e		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.b450		a5 31		lda $31				lda 	codePtr+1
.b452		69 00		adc #$00			adc 	#0
.b454		95 60		sta $60,x			sta 	NSMantissa1,x
.b456		74 68		stz $68,x			stz 	NSMantissa2,x
.b458		74 70		stz $70,x			stz 	NSMantissa3,x
.b45a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.b45b						MemorySearch:
.b45b		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.b45d		86 37		stx $37				stx 	zTemp0+1
.b45f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b461		85 30		sta $30				sta 	codePtr
.b463		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b465		85 31		sta $31				sta 	codePtr+1
.b467						_MTAXLoop:
.b467		b2 30		lda ($30)			lda 	(codePtr)
.b469		18		clc				clc
.b46a		f0 21		beq $b48d			beq 	_MTAXExit 					; reached end, exit with CC.
.b46c		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.b46e		b1 30		lda ($30),y			lda 	(codePtr),y
.b470		38		sec				sec
.b471		e5 36		sbc $36				sbc 	zTemp0
.b473		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.b475		c8		iny				iny 								; do the MSB
.b476		b1 30		lda ($30),y			lda 	(codePtr),y
.b478		e5 37		sbc $37				sbc 	zTemp0+1
.b47a		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.b47c		f0 0f		beq $b48d			beq 	_MTAXExit	 				; found so exit (CS will be set)
.b47e		b0 0d		bcs $b48d			bcs 	_MTAXExit 					; current < required exit
.b480		18		clc				clc
.b481		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b483		65 30		adc $30				adc 	codePtr
.b485		85 30		sta $30				sta 	codePtr
.b487		90 02		bcc $b48b			bcc 	_CREExit
.b489		e6 31		inc $31				inc 	codePtr+1 					; carry
.b48b						_CREExit:
.b48b		80 da		bra $b467			bra 	_MTAXLoop
.b48d						_MTAXExit:
.b48d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.b48e						RectangleCommand:
.b48e		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.b490		80 02		bra $b494			bra 	ShapeDrawCmd
.b492						CircleCommand:
.b492		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.b494						ShapeDrawCmd:
.b494		20 1e b5	jsr $b51e			jsr 	RunGraphicsCommand
.b497						ShapeDraw:
.b497		0d 98 07	ora $0798			ora 	gxFillSolid  				; adjust AXY for solid fill.
.b49a		4c 12 b5	jmp $b512			jmp 	ExecuteGraphicCommand	 	; and complete
.b49d						SpriteCommand:
.b49d		a2 00		ldx #$00			ldx 	#0
.b49f		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get image number.
.b4a2		5a		phy				phy
.b4a3		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.b4a5		a6 58		ldx $58				ldx 	NSMantissa0
.b4a7		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.b4a9		b0 0d		bcs $b4b8			bcs 	_SCRange
.b4ab		a0 ff		ldy #$ff			ldy 	#255
.b4ad		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b4b0		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.b4b2		7a		ply				ply
.b4b3		20 1e b5	jsr $b51e			jsr 	RunGraphicsCommand
.b4b6		80 5a		bra $b512			bra 	ExecuteGraphicCommand
.b4b8						_SCRange:
.b4b8		4c c8 b1	jmp $b1c8			jmp 	RangeError
.b4bb						ImageCommand:
.b4bb		a2 00		ldx #$00			ldx 	#0
.b4bd		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get image number.
.b4c0		20 1e b5	jsr $b51e			jsr 	RunGraphicsCommand
.b4c3						ImageRunDraw:
.b4c3		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.b4c5		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b4c8		ad 9e 07	lda $079e			lda 	gxDrawScale
.b4cb		0a		asl a				asl 	a
.b4cc		0a		asl a				asl 	a
.b4cd		0a		asl a				asl 	a
.b4ce		a8		tay				tay
.b4cf		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.b4d1		a6 58		ldx $58				ldx 	NSMantissa0
.b4d3		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b4d6		60		rts				rts
.b4d7						TextCommand:
.b4d7		a2 00		ldx #$00			ldx 	#0
.b4d9		20 48 a6	jsr $a648			jsr 	EvaluateString 				; get text
.b4dc		20 1e b5	jsr $b51e			jsr 	RunGraphicsCommand
.b4df						TextRunDraw:
.b4df		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.b4e1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b4e4		a0 00		ldy #$00			ldy 	#0
.b4e6						_IRDLoop:
.b4e6		a5 60		lda $60				lda 	NSMantissa1 				; access character
.b4e8		85 37		sta $37				sta 	zTemp0+1
.b4ea		a5 58		lda $58				lda 	NSMantissa0
.b4ec		85 36		sta $36				sta 	zTemp0
.b4ee		b1 36		lda ($36),y			lda 	(zTemp0),y
.b4f0		f0 13		beq $b505			beq 	_IRDExit
.b4f2		5a		phy				phy									; save string pos
.b4f3		48		pha				pha 								; save char
.b4f4		ad 9e 07	lda $079e			lda 	gxDrawScale 				; get scale
.b4f7		0a		asl a				asl 	a
.b4f8		0a		asl a				asl 	a
.b4f9		0a		asl a				asl 	a
.b4fa		a8		tay				tay
.b4fb		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.b4fd		fa		plx				plx 								; char to draw
.b4fe		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b501		7a		ply				ply 								; restore string pos
.b502		c8		iny				iny
.b503		90 e1		bcc $b4e6			bcc 	_IRDLoop 					; go back if no error.
.b505						_IRDExit:
.b505		60		rts				rts
.b506						PlotCommand:
.b506		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.b508		20 1e b5	jsr $b51e			jsr 	RunGraphicsCommand
.b50b		80 05		bra $b512			bra 	ExecuteGraphicCommand
.b50d						LineCommand:
.b50d		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.b50f		20 1e b5	jsr $b51e			jsr 	RunGraphicsCommand
.b512						ExecuteGraphicCommand:
.b512		0d 97 07	ora $0797			ora 	gxCommandID 				; make a full command
.b515		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.b518		b0 01		bcs $b51b			bcs 	_EGCError
.b51a		60		rts				rts
.b51b						_EGCError:
.b51b		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.b51e						RunGraphicsCommand:
.b51e		8d 97 07	sta $0797			sta 	gxCommandID					; save TODO graphics command.
.b521		68		pla				pla 								; pop handler address
.b522		fa		plx				plx
.b523		1a		inc a				inc 	a
.b524		d0 01		bne $b527			bne 	_RGINoCarry
.b526		e8		inx				inx
.b527						_RGINoCarry:
.b527		8d 9c 07	sta $079c			sta 	gxHandler
.b52a		8e 9d 07	stx $079d			stx 	gxHandler+1
.b52d						_RGICommandLoop:
.b52d		b1 30		lda ($30),y			lda 	(codePtr),y
.b52f		c8		iny				iny
.b530		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.b532		f0 53		beq $b587			beq 	_RGI_To
.b534		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.b536		f0 55		beq $b58d			beq 	_RGI_Here
.b538		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.b53a		f0 3d		beq $b579			beq 	_RGI_Exit
.b53c		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.b53e		f0 39		beq $b579			beq 	_RGI_Exit
.b540		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.b542		f0 3e		beq $b582			beq 	_RGI_Frame
.b544		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.b546		f0 33		beq $b57b			beq 	_RGI_Solid
.b548		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.b54a		f0 4b		beq $b597			beq 	_RGI_By
.b54c		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.b54e		f0 17		beq $b567			beq 	_RGI_Move2
.b550		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.b552		f0 62		beq $b5b6			beq 	_RGI_Dim
.b554		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.b556		f0 74		beq $b5cc			beq 	_RGI_Colour
.b558		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.b55a		f0 70		beq $b5cc			beq 	_RGI_Colour
.b55c		ae 97 07	ldx $0797			ldx 	gxCommandID
.b55f		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.b561		d0 03		bne $b566			bne 	_RGI_Move 					; move
.b563		4c f4 b5	jmp $b5f4			jmp		_RGI_SpriteInstructions
.b566						_RGI_Move:
.b566		88		dey				dey 								; unpick get.
.b567						_RGI_Move2:
.b567		20 1a b6	jsr $b61a			jsr 	GCGetCoordinatePair 		; move to here
.b56a		20 41 b6	jsr $b641			jsr 	GCCopyPairToStore 			; save
.b56d		5a		phy				phy
.b56e		20 37 b6	jsr $b637			jsr 	GCLoadAXY 					; load in
.b571		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.b573		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b576		7a		ply				ply
.b577		80 b4		bra $b52d			bra 	_RGICommandLoop 			; and go round
.b579						_RGI_Exit:
.b579		88		dey				dey 								; unpick : / EOL
.b57a		60		rts				rts
.b57b						_RGI_Solid:
.b57b		a9 02		lda #$02			lda 	#2
.b57d		8d 98 07	sta $0798			sta 	gxFillSolid
.b580		80 ab		bra $b52d			bra 	_RGICommandLoop
.b582						_RGI_Frame:
.b582		9c 98 07	stz $0798			stz 	gxFillSolid
.b585		80 a6		bra $b52d			bra 	_RGICommandLoop
.b587						_RGI_To:
.b587		20 1a b6	jsr $b61a			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.b58a		20 41 b6	jsr $b641			jsr 	GCCopyPairToStore
.b58d						_RGI_Here:
.b58d		5a		phy				phy
.b58e		20 37 b6	jsr $b637			jsr 	GCLoadAXY 					; load it into AXY
.b591		20 f1 b5	jsr $b5f1			jsr 	_RGICallHandler 			; go do whatever it is.
.b594		7a		ply				ply
.b595		80 96		bra $b52d			bra 	_RGICommandLoop 			; and go round
.b597						_RGI_By:
.b597		20 27 b6	jsr $b627			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.b59a		18		clc				clc
.b59b		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b59d		6d 99 07	adc $0799			adc 	gxXPos
.b5a0		8d 99 07	sta $0799			sta 	gxXPos
.b5a3		a5 61		lda $61				lda 	NSMantissa1+1
.b5a5		6d 9a 07	adc $079a			adc 	gxXPos+1
.b5a8		8d 9a 07	sta $079a			sta 	gxXPos+1
.b5ab		a5 5a		lda $5a				lda 	NSMantissa0+2
.b5ad		18		clc				clc
.b5ae		6d 9b 07	adc $079b			adc 	gxYPos
.b5b1		8d 9b 07	sta $079b			sta 	gxYPos
.b5b4		80 d7		bra $b58d			bra 	_RGI_Here
.b5b6						_RGI_Dim:
.b5b6		a2 01		ldx #$01			ldx	 	#1
.b5b8		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.b5bb		a5 59		lda $59				lda 	NSMantissa0+1
.b5bd		c9 00		cmp #$00			cmp 	#0
.b5bf		f0 2d		beq $b5ee			beq 	_RGIRange
.b5c1		c9 09		cmp #$09			cmp 	#8+1
.b5c3		b0 29		bcs $b5ee			bcs		_RGIRange
.b5c5		3a		dec a				dec 	a
.b5c6		8d 9e 07	sta $079e			sta 	gxDrawScale
.b5c9		4c 2d b5	jmp $b52d			jmp 	_RGICommandLoop
.b5cc						_RGI_Colour:
.b5cc		a2 01		ldx #$01			ldx 	#1 							; colour
.b5ce		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.b5d1		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.b5d3		20 f0 a6	jsr $a6f0			jsr 	NSMSetZero
.b5d6		b1 30		lda ($30),y			lda 	(codePtr),y
.b5d8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.b5da		d0 04		bne $b5e0			bne 	_RGICDefaultMode
.b5dc		c8		iny				iny
.b5dd		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.b5e0						_RGICDefaultMode:
.b5e0		5a		phy				phy
.b5e1		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.b5e3		a6 59		ldx $59				ldx 	NSMantissa0+1
.b5e5		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b5e7		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b5ea		7a		ply				ply
.b5eb		4c 2d b5	jmp $b52d			jmp 	_RGICommandLoop 			; and go round
.b5ee						_RGIRange:
.b5ee		4c c8 b1	jmp $b1c8			jmp 	RangeError
.b5f1						_RGICallHandler:
.b5f1		6c 9c 07	jmp ($079c)			jmp 	(gxHandler)
.b5f4						_RGI_SpriteInstructions:
.b5f4		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b5f6		f0 07		beq $b5ff			beq 	_RGISpriteOff
.b5f8		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.b5fa		f0 13		beq $b60f			beq 	_RGISetImage
.b5fc		4c 66 b5	jmp $b566			jmp 	_RGI_Move
.b5ff						_RGISpriteOff:
.b5ff		5a		phy				phy
.b600		a0 01		ldy #$01			ldy 	#1
.b602		a2 00		ldx #$00			ldx 	#0
.b604						_RGIDoCommandLoop:
.b604		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.b606		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b609		7a		ply				ply
.b60a		b0 e2		bcs $b5ee			bcs 	_RGIRange
.b60c		4c 2d b5	jmp $b52d			jmp 	_RGICommandLoop
.b60f						_RGISetImage:
.b60f		a2 01		ldx #$01			ldx 	#1
.b611		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger
.b614		5a		phy				phy
.b615		aa		tax				tax
.b616		a0 00		ldy #$00			ldy 	#0
.b618		80 ea		bra $b604			bra 	_RGIDoCommandLoop
.b61a						GCGetCoordinatePair:
.b61a		a2 01		ldx #$01			ldx 	#1
.b61c		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.b61f		20 85 97	jsr $9785			jsr 	CheckComma
.b622		e8		inx				inx
.b623		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger
.b626		60		rts				rts
.b627						GCSignedCoordinatePair:
.b627		a2 01		ldx #$01			ldx 	#1
.b629		20 7a a6	jsr $a67a			jsr 	Evaluate16BitIntegerSigned
.b62c		20 85 97	jsr $9785			jsr 	CheckComma
.b62f		e8		inx				inx
.b630		20 7a a6	jsr $a67a			jsr 	Evaluate16BitIntegerSigned
.b633		60		rts				rts
.b634						_GCCPRange:
.b634		4c c8 b1	jmp $b1c8			jmp 	RangeError
.b637						GCLoadAXY:
.b637		ad 9a 07	lda $079a			lda 	gxXPos+1
.b63a		ae 99 07	ldx $0799			ldx 	gxXPos
.b63d		ac 9b 07	ldy $079b			ldy 	gxYPos
.b640		60		rts				rts
.b641						GCCopyPairToStore:
.b641		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b643		8d 99 07	sta $0799			sta 	gxXPos
.b646		a5 61		lda $61				lda 	NSMantissa1+1
.b648		8d 9a 07	sta $079a			sta 	gxXPos+1
.b64b		a5 5a		lda $5a				lda 	NSMantissa0+2
.b64d		8d 9b 07	sta $079b			sta 	gxYPos
.b650		60		rts				rts
.0797						gxCommandID:
>0797								.fill 	1
.0798						gxFillSolid:
>0798								.fill 	1
.0799						gxXPos:
>0799								.fill 	2
.079b						gxYPos:
>079b								.fill 	1
.079c						gxHandler:
>079c								.fill 	2
.079e						gxDrawScale:
>079e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.b651						BitmapCtrl:
.b651		b1 30		lda ($30),y			lda 	(codePtr),y
.b653		c8		iny				iny
.b654		a2 01		ldx #$01			ldx 	#1
.b656		c9 cc		cmp #$cc			cmp 	#KWD_ON
.b658		f0 11		beq $b66b			beq 	BitmapSwitch
.b65a		ca		dex				dex
.b65b		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b65d		f0 0c		beq $b66b			beq 	BitmapSwitch
.b65f		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get the colour
.b662		5a		phy				phy
.b663		aa		tax				tax
.b664		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.b666		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b669		7a		ply				ply
.b66a		60		rts				rts
.b66b						BitmapSwitch:
.b66b		5a		phy				phy
.b66c		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.b66e		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.b670		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b673		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.b675		a0 00		ldy #$00			ldy 	#0
.b677		a2 ff		ldx #$ff			ldx 	#$FF
.b679		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b67c		9c 98 07	stz $0798			stz 	gxFillSolid
.b67f		9c 99 07	stz $0799			stz 	gxXPos
.b682		9c 9a 07	stz $079a			stz 	gxXPos+1
.b685		9c 9b 07	stz $079b			stz 	gxYPos
.b688		9c 9e 07	stz $079e			stz 	gxDrawScale
.b68b		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.b68d		a2 00		ldx #$00			ldx 	#0
.b68f		a0 00		ldy #$00			ldy 	#0
.b691		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b694		7a		ply				ply
.b695		60		rts				rts
.b696						SpritesCtrl:
.b696		b1 30		lda ($30),y			lda 	(codePtr),y
.b698		c8		iny				iny
.b699		a2 01		ldx #$01			ldx 	#1
.b69b		c9 cc		cmp #$cc			cmp 	#KWD_ON
.b69d		f0 08		beq $b6a7			beq 	SpriteSwitch
.b69f		ca		dex				dex
.b6a0		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b6a2		f0 03		beq $b6a7			beq 	SpriteSwitch
.b6a4		4c c3 b1	jmp $b1c3			jmp 	SyntaxError
.b6a7						SpriteSwitch:
.b6a7		5a		phy				phy
.b6a8		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.b6aa		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.b6ac		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b6af		7a		ply				ply
.b6b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.b6b1						GfxCommand:
.b6b1		a2 00		ldx #$00			ldx 	#0
.b6b3		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; command
.b6b6		20 85 97	jsr $9785			jsr 	CheckComma
.b6b9		e8		inx				inx
.b6ba		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger 		; X
.b6bd		20 85 97	jsr $9785			jsr 	CheckComma
.b6c0		e8		inx				inx
.b6c1		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; Y
.b6c4		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.b6c6		4a		lsr a				lsr 	a
.b6c7		d0 12		bne $b6db			bne 	_GfxError
.b6c9		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.b6cb		b0 0e		bcs $b6db			bcs 	_GfxError 					; bit 7 should have been zero
.b6cd		5a		phy				phy 								; save pos
.b6ce		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.b6d0		a6 59		ldx $59				ldx 	NSMantissa0+1
.b6d2		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b6d4		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b6d7		b0 02		bcs $b6db			bcs 	_GfxError
.b6d9		7a		ply				ply 								; restore pos and exit.
.b6da		60		rts				rts
.b6db						_GfxError:
.b6db		4c c8 b1	jmp $b1c8			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.b6de						UnaryHit:
.b6de		fa		plx				plx
.b6df		a9 36		lda #$36			lda 	#zTemp0
.b6e1		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get sprite number 0
.b6e4		20 85 97	jsr $9785			jsr 	CheckComma
.b6e7		e8		inx				inx
.b6e8		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get sprite number 1
.b6eb		20 7d 97	jsr $977d			jsr		CheckRightBracket
.b6ee		ca		dex				dex 								; fix back up again.
.b6ef		da		phx				phx 								; save X/Y
.b6f0		5a		phy				phy
.b6f1		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.b6f3		b5 58		lda $58,x			lda 	NSMantissa0,x
.b6f5		aa		tax				tax
.b6f6		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.b6f8		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.b6fb		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.b6fc		7a		ply				ply 								; restore XY
.b6fd		fa		plx				plx
.b6fe		20 f2 a6	jsr $a6f2			jsr 	NSMSetByte 					; return the hit result
.b701		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.b702						PaletteCommand:
.b702		a2 00		ldx #$00			ldx 	#0
.b704		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; colour
.b707		20 85 97	jsr $9785			jsr 	CheckComma
.b70a		e8		inx				inx
.b70b		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger 		; r
.b70e		20 85 97	jsr $9785			jsr 	CheckComma
.b711		e8		inx				inx
.b712		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; g
.b715		20 85 97	jsr $9785			jsr 	CheckComma
.b718		e8		inx				inx
.b719		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; b
.b71c		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.b71e		85 36		sta $36				sta 	zTemp0
.b720		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.b722		85 37		sta $37				sta 	zTemp0+1
.b724		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.b726		26 37		rol $37				rol	 	zTemp0+1
.b728		06 36		asl $36				asl 	zTemp0
.b72a		26 37		rol $37				rol	 	zTemp0+1
.b72c		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.b72e		85 01		sta $01				sta 	1
.b730		5a		phy				phy
.b731		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.b733		92 36		sta ($36)			sta 	(zTemp0)
.b735		a0 01		ldy #$01			ldy 	#1
.b737		a5 5a		lda $5a				lda 	NSMantissa0+2
.b739		91 36		sta ($36),y			sta 	(zTemp0),y
.b73b		a5 59		lda $59				lda 	NSMantissa0+1
.b73d		c8		iny				iny
.b73e		91 36		sta ($36),y			sta 	(zTemp0),y
.b740		7a		ply				ply
.b741		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.b742						ClearScreen:
.b742		5a		phy				phy
.b743		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.b745		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.b748		7a		ply				ply
.b749		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b74a						PingCommand:
.b74a		5a		phy				phy 								; save pos
.b74b		a9 01		lda #$01			lda 	#1 						; push channel.
.b74d		48		pha				pha
.b74e		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b750		a2 06		ldx #$06			ldx 	#6 						; length
.b752		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b754		80 24		bra $b77a			bra 	SoundEffectCommand
.b756						ZapCommand:
.b756		5a		phy				phy 								; save pos
.b757		a9 01		lda #$01			lda 	#1 						; push channel.
.b759		48		pha				pha
.b75a		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b75c		a2 0a		ldx #$0a			ldx 	#10 						; length
.b75e		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b760		80 18		bra $b77a			bra 	SoundEffectCommand
.b762						ShootCommand:
.b762		5a		phy				phy 								; save pos
.b763		a9 03		lda #$03			lda 	#3 						; push channel.
.b765		48		pha				pha
.b766		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b768		a2 04		ldx #$04			ldx 	#4 						; length
.b76a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b76c		80 0c		bra $b77a			bra 	SoundEffectCommand
.b76e						Explode:
.b76e		5a		phy				phy 								; save pos
.b76f		a9 03		lda #$03			lda 	#3 						; push channel.
.b771		48		pha				pha
.b772		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b774		a2 0a		ldx #$0a			ldx 	#10 						; length
.b776		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b778		80 00		bra $b77a			bra 	SoundEffectCommand
.b77a						SoundEffectCommand:
.b77a		8d 9f 07	sta $079f			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b77d		9c a0 07	stz $07a0			stz 	SoundCommandBlock+1
.b780		a9 0f		lda #$0f			lda 	#15
.b782		8d a1 07	sta $07a1			sta 	SoundCommandBlock+2
.b785		8e a2 07	stx $07a2			stx 	SoundCommandBlock+3
.b788		8c a3 07	sty $07a3			sty 	SoundCommandBlock+4
.b78b		9c a4 07	stz $07a4			stz 	SoundCommandBlock+5
.b78e		68		pla				pla
.b78f		09 10		ora #$10			ora 	#$10  						; execute command $11
.b791		a2 9f		ldx #$9f			ldx 	#(SoundCommandBlock & $FF)
.b793		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b795		20 75 80	jsr $8075			jsr 	SNDCommand
.b798		7a		ply				ply
.b799		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b79a						UnaryPlaying:
.b79a		fa		plx				plx
.b79b		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; get channel #
.b79e		48		pha				pha
.b79f		20 7d 97	jsr $977d			jsr		CheckRightBracket
.b7a2		68		pla				pla
.b7a3		c9 04		cmp #$04			cmp 	#4
.b7a5		b0 0c		bcs $b7b3			bcs 	_UPNotPlaying
.b7a7		09 20		ora #$20			ora 	#$20 						; query playing ?
.b7a9		20 75 80	jsr $8075			jsr 	SNDCommand
.b7ac		c9 00		cmp #$00			cmp 	#0
.b7ae		f0 03		beq $b7b3			beq 	_UPNotPlaying
.b7b0		4c 03 98	jmp $9803			jmp 	ReturnTrue
.b7b3						_UPNotPlaying:
.b7b3		4c 0e 98	jmp $980e			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b7b6						SoundCommand:
.b7b6		b1 30		lda ($30),y			lda 	(codePtr),y
.b7b8		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.b7ba		d0 09		bne $b7c5			bne 	_SNDMain
.b7bc		c8		iny				iny 								; skip OFF
.b7bd		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b7bf		5a		phy				phy
.b7c0		20 75 80	jsr $8075			jsr 	SNDCommand
.b7c3		7a		ply				ply
.b7c4		60		rts				rts
.b7c5						_SNDMain:
.b7c5		a2 00		ldx #$00			ldx 	#0
.b7c7		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; channel
.b7ca		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b7cc		b0 4b		bcs $b819			bcs 	_SndError
.b7ce		e8		inx				inx 								; do the rest in slot 1.
.b7cf		20 85 97	jsr $9785			jsr 	CheckComma
.b7d2		20 70 a6	jsr $a670			jsr 	Evaluate16BitInteger 		; Pitch
.b7d5		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b7d7		c9 10		cmp #$10			cmp 	#16
.b7d9		b0 3e		bcs $b819			bcs 	_SndError
.b7db		8d a0 07	sta $07a0			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b7de		b5 58		lda $58,x			lda 	NSMantissa0,x
.b7e0		8d 9f 07	sta $079f			sta 	SoundCommandBlock
.b7e3		20 85 97	jsr $9785			jsr 	CheckComma
.b7e6		20 8b a6	jsr $a68b			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b7e9		8d a2 07	sta $07a2			sta 	SoundCommandBlock+3
.b7ec		a9 0f		lda #$0f			lda 	#15
.b7ee		8d a1 07	sta $07a1			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b7f1		9c a3 07	stz $07a3			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b7f4		9c a4 07	stz $07a4			stz 	SoundCommandBlock+5
.b7f7		b1 30		lda ($30),y			lda 	(codePtr),y
.b7f9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b7fb		d0 0e		bne $b80b			bne 	_SNDPlay
.b7fd		c8		iny				iny
.b7fe		20 7a a6	jsr $a67a			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b801		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b803		8d a3 07	sta $07a3			sta 	SoundCommandBlock+4
.b806		b5 60		lda $60,x			lda 	NSMantissa1,x
.b808		8d a4 07	sta $07a4			sta 	SoundCommandBlock+5
.b80b						_SNDPlay:
.b80b		5a		phy				phy
.b80c		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b80e		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b810		a2 9f		ldx #$9f			ldx 	#(SoundCommandBlock & $FF)
.b812		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b814		20 75 80	jsr $8075			jsr 	SNDCommand
.b817		7a		ply				ply
.b818		60		rts				rts
.b819						_SndError:
.b819		4c c8 b1	jmp $b1c8			jmp 	RangeError
.079f						SoundCommandBlock:
>079f								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b81c						StackPushByte:
.b81c		48		pha				pha 								; save byte on stack
.b81d		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b81f		d0 08		bne $b829			bne 	_SPBNoBorrow
.b821		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b823		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b825		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b827		90 06		bcc $b82f			bcc 	_SPBMemory
.b829						_SPBNoBorrow:
.b829		c6 34		dec $34				dec 	basicStack
.b82b		68		pla				pla 								; get back and write
.b82c		92 34		sta ($34)			sta 	(basicStack)
.b82e		60		rts				rts
.b82f						_SPBMemory:
.b82f		a9 12		lda #$12		lda	#18
.b831		4c 96 97	jmp $9796		jmp	ErrorHandler
.b834						StackPopByte:
.b834		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b836		e6 34		inc $34				inc 	basicStack
.b838		d0 02		bne $b83c			bne 	_SPBNoCarry
.b83a		e6 35		inc $35				inc 	basicStack+1
.b83c						_SPBNoCarry:
.b83c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b83d						StackOpen:
.b83d		48		pha				pha 								; save frame byte
.b83e		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b840		0a		asl a				asl 	a 							; claim twice this for storage
.b841		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b843		38		sec				sec 								; so basically subtracting from
.b844		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b846		85 34		sta $34				sta 	basicStack
.b848		b0 09		bcs $b853			bcs 	_SONoBorrow
>b84a		db						.byte 	$DB 						; causes a break in the emulator
.b84b		c6 35		dec $35				dec 	basicStack+1
.b84d		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b84f		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b851		90 04		bcc $b857			bcc 	_SOMemory
.b853						_SONoBorrow:
.b853		68		pla				pla 								; get marker back and write at TOS
.b854		92 34		sta ($34)			sta 	(basicStack)
.b856		60		rts				rts
.b857						_SOMemory:
.b857		a9 12		lda #$12		lda	#18
.b859		4c 96 97	jmp $9796		jmp	ErrorHandler
.b85c						StackClose:
.b85c		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b85e		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b860		0a		asl a				asl 	a 							; claim twice this.
.b861		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b863		85 34		sta $34				sta 	basicStack
.b865		90 02		bcc $b869			bcc 	_SCExit
.b867		e6 35		inc $35				inc 	basicStack+1
.b869						_SCExit:
.b869		60		rts				rts
.b86a						StackCheckFrame:
.b86a		48		pha				pha
.b86b						_StackRemoveLocals:
.b86b		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b86d		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b86f		b0 05		bcs $b876			bcs 	_SCNoLocal
.b871		20 60 90	jsr $9060			jsr 	LocalPopValue 				; restore the local value
.b874		80 f5		bra $b86b			bra 	_StackRemoveLocals 			; gr round again
.b876						_SCNoLocal:
.b876		68		pla				pla 								; get the frame check.
.b877		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b879		29 f0		and #$f0			and 	#$F0 						; check type bits
.b87b		d0 01		bne $b87e			bne 	_SCFError 					; different, we have structures mixed up
.b87d		60		rts				rts
.b87e						_SCFError:
.b87e		8a		txa				txa 								; report error X
.b87f		4c 96 97	jmp $9796			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b882						STKSaveCodePosition:
.b882		5a		phy				phy
.b883		98		tya				tya 								; save Y
.b884		a0 05		ldy #$05			ldy 	#5
.b886		91 34		sta ($34),y			sta 	(basicStack),y
.b888		88		dey				dey 								; save Code Pointer
.b889						_STKSaveLoop:
.b889		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b88c		91 34		sta ($34),y			sta 	(basicStack),y
.b88e		88		dey				dey
.b88f		d0 f8		bne $b889			bne 	_STKSaveLoop
.b891		7a		ply				ply
.b892		60		rts				rts
.b893						STKLoadCodePosition:
.b893		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b895						_STKLoadLoop:
.b895		b1 34		lda ($34),y			lda 	(basicStack),y
.b897		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b89a		c8		iny				iny
.b89b		c0 05		cpy #$05			cpy 	#5
.b89d		d0 f6		bne $b895			bne 	_STKLoadLoop
.b89f		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b8a1		a8		tay				tay
.b8a2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b8a3						StackReset:
.b8a3		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b8a5		85 34		sta $34				sta 	0+basicStack
.b8a7		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b8a9		85 35		sta $35				sta 	1+basicStack
.b8ab		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b8ad		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b8af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b8b0						StringConcrete:
.b8b0		5a		phy				phy 								; save position on stack
.b8b1		20 d0 a2	jsr $a2d0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8b4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b8b6		85 38		sta $38				sta 	zTemp1
.b8b8		b5 60		lda $60,x			lda 	NSMantissa1,x
.b8ba		85 39		sta $39				sta 	zTemp1+1
.b8bc		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b8be						_SALength:
.b8be		c8		iny				iny
.b8bf		b1 38		lda ($38),y			lda 	(zTemp1),y
.b8c1		d0 fb		bne $b8be			bne 	_SALength
.b8c3		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b8c5		b0 3d		bcs $b904			bcs 	_SALengthError
.b8c7		98		tya				tya 				 				; length of the new string
.b8c8		18		clc				clc
.b8c9		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b8cb		90 02		bcc $b8cf			bcc 	_SAHaveLength
.b8cd		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b8cf						_SAHaveLength:
.b8cf		48		pha				pha 								; save length.
.b8d0		38		sec				sec
.b8d1		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b8d3		6d 0a 04	adc $040a			adc 	stringMemory
.b8d6		8d 0a 04	sta $040a			sta 	stringMemory
.b8d9		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b8db		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b8dd		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b8df		6d 0b 04	adc $040b			adc 	stringMemory+1
.b8e2		8d 0b 04	sta $040b			sta 	stringMemory+1
.b8e5		85 3b		sta $3b				sta 	zTemp2+1
.b8e7		95 60		sta $60,x			sta 	NSMantissa1,x
.b8e9		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b8ea		38		sec				sec
.b8eb		e9 03		sbc #$03			sbc 	#3
.b8ed		92 3a		sta ($3a)			sta 	(zTemp2)
.b8ef		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b8f1		a0 01		ldy #$01			ldy 	#1
.b8f3		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b8f5						_SACopyNewString:
.b8f5		a0 00		ldy #$00			ldy 	#0
.b8f7						_SACopyNSLoop:
.b8f7		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b8f9		c8		iny				iny 								; write two on in string storage
.b8fa		c8		iny				iny
.b8fb		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b8fd		88		dey				dey 								; this makes it one one.
.b8fe		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b900		d0 f5		bne $b8f7			bne 	_SACopyNSLoop
.b902		7a		ply				ply
.b903		60		rts				rts
.b904						_SALengthError:
.b904		a9 09		lda #$09		lda	#9
.b906		4c 96 97	jmp $9796		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b909						StringSystemInitialise:
.b909		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b90b		8d 0a 04	sta $040a			sta 	0+stringMemory
.b90e		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b910		8d 0b 04	sta $040b			sta 	1+stringMemory
.b913		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b916		60		rts				rts
.b917						StringSpaceInitialise:
.b917		20 d0 a2	jsr $a2d0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b91a		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b91c		8d 0c 04	sta $040c			sta 	stringInitialised
.b91f		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b922		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b925		ad 0b 04	lda $040b			lda 	stringMemory+1
.b928		3a		dec a				dec 	a
.b929		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b92c		60		rts				rts
.b92d						StringTempAllocate:
.b92d		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b92f		b0 30		bcs $b961			bcs 	_STALength
.b931		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b934		30 05		bmi $b93b			bmi 	_STAAllocate
.b936		48		pha				pha 								; save value to subtract.
.b937		20 17 b9	jsr $b917			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b93a		68		pla				pla 								; restore it
.b93b						_STAAllocate:
.b93b		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b93d		18		clc				clc  								; deliberate allows one more
.b93e		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b941		8d 0d 04	sta $040d			sta 	stringTempPointer
.b944		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b946		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b948		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b94b		69 ff		adc #$ff			adc 	#$FF
.b94d		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b950		85 3d		sta $3d				sta 	zsTemp+1
.b952		95 60		sta $60,x			sta 	NSMantissa1,x
.b954		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b956		74 70		stz $70,x			stz 	NSMantissa3,x
.b958		a9 10		lda #$10			lda 	#NSTString
.b95a		95 50		sta $50,x			sta 	NSStatus,x
.b95c		a9 00		lda #$00			lda 	#0 							; clear the target string
.b95e		92 3c		sta ($3c)			sta 	(zsTemp)
.b960		60		rts				rts
.b961						_STALength:
.b961		a9 09		lda #$09		lda	#9
.b963		4c 96 97	jmp $9796		jmp	ErrorHandler
.b966						StringTempWrite:
.b966		48		pha				pha
.b967		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b969		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b96b		d0 02		bne $b96f			bne 	_STWNoCarry
.b96d		e6 3d		inc $3d				inc 	zsTemp+1
.b96f						_STWNoCarry:
.b96f		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b971		92 3c		sta ($3c)			sta 	(zsTemp)
.b973		68		pla				pla
.b974		60		rts				rts

;******  Return to file: _basic.asm

.b975						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac a6 07	ldy $07a6			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac a6 07	ldy $07a6			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad a7 07	lda $07a7			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c a6 07	sty $07a6			sty 	EXTColumn
.c02d	a02d	cc a8 07	cpy $07a8			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee a5 07	inc $07a5			inc 	EXTRow  					; bump row
.c035	a035	9c a6 07	stz $07a6			stz 	EXTColumn 					; back to column 0
.c038	a038	ad a5 07	lda $07a5			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd a9 07	cmp $07a9			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d a8 07	adc $07a8			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce a6 07	dec $07a6			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c a6 07	stz $07a6			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce a5 07	dec $07a5			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad a5 07	lda $07a5			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce a5 07	dec $07a5			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed a8 07	sbc $07a8			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c a6 07	sty $07a6			sty 	EXTColumn
.c08c	a08c	cc a8 07	cpy $07a8			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c a6 07	sty $07a6			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad a9 07	lda $07a9			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd a5 07	cmp $07a5			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee a5 07	inc $07a5			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d a8 07	adc $07a8			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad a6 07	lda $07a6			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d a6 07	sta $07a6			sta 	EXTColumn
.c0c9	a0c9	cd a8 07	cmp $07a8			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce a6 07	dec $07a6			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac a8 07	ldy $07a8			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc a8 07	cpy $07a8			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d a7 07	and $07a7			and 	EXTTextColour 				; mask out old.
.c135	a135	8d a7 07	sta $07a7			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d a7 07	ora $07a7			ora 	EXTTextColour
.c13c	a13c	8d a7 07	sta $07a7			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad a7 07	lda $07a7			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad a7 07	lda $07a7			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c a5 07	stz $07a5			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c a6 07	stz $07a6			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad a6 07	lda $07a6			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad a5 07	lda $07a5			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 91 81	jsr $8191			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad a6 07	lda $07a6			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac a6 07	ldy $07a6			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc a8 07	cpy $07a8			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac a6 07	ldy $07a6			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc a8 07	cpy $07a8			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac a8 07	ldy $07a8			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc a6 07	cpy $07a6			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad a8 07	lda $07a8			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac a8 07	ldy $07a8			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07a5						EXTRow:
>07a5								.fill 	1
.07a6						EXTColumn:
>07a6								.fill 	1
.07a7						EXTTextColour:
>07a7								.fill 	1
.07a8						EXTScreenWidth:
>07a8								.fill 	1
.07a9						EXTScreenHeight:
>07a9								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d a7 07	sta $07a7			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d a8 07	sta $07a8			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d a9 07	sta $07a9			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad a5 07	lda $07a5			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07aa						gxCurrentX:
>07aa								.fill 	2
.07ac						gxCurrentY:
>07ac								.fill 	2
.07ae						gxLastX:
>07ae								.fill 	2
.07b0						gxLastY:
>07b0								.fill 	2
.07b2						gxX0:
>07b2								.fill 	2
.07b4						gxY0:
>07b4								.fill 	2
.07b6						gxX1:
>07b6								.fill 	2
.07b8						gxY1:
>07b8								.fill 	2
.07ba						gxSpritesOn:
>07ba								.fill 	1
.07bb						gxBitmapsOn:
>07bb								.fill 	1
.07bc						gxBasePage:
>07bc								.fill 	1
.07bd						gxSpritePage:
>07bd								.fill 	1
.07be						gxHeight:
>07be								.fill 	1
.07bf						gxMode:
>07bf								.fill 	1
.07c0						gxColour:
>07c0								.fill 	1
.07c1						gxEORValue:
>07c1								.fill 	1
.07c2						gxANDValue:
>07c2								.fill 	1
.07c3						gxOriginalLUTValue:
>07c3								.fill 	1
.07c4						gxOffset:
>07c4								.fill 	1
.07c5						GSCurrentSpriteID:
>07c5								.fill 	1
.07c6						GSCurrentSpriteAddr:
>07c6								.fill 	2
.07c8						gxSpriteOffsetBase:
>07c8								.fill 	2
.07ca						gxSpriteLow:
>07ca								.fill 	64
.080a						gxSpriteHigh:
>080a								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd aa 07	lda $07aa,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d ae 07	sta $07ae,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d ac 07	sta $07ac			sta 	gxCurrentY
.c7e7	a7e7	9c ad 07	stz $07ad			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d aa 07	sta $07aa			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d ab 07	sta $07ab			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad ab 07	lda $07ab			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad aa 07	lda $07aa			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad ac 07	lda $07ac			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd be 07	cmp $07be			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd aa 07	lda $07aa,x			lda 	gxCurrentX,x
.c819	a819	9d b2 07	sta $07b2,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 4d 08	sta $084d			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad bb 07	lda $07bb			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 4e 08	stz $084e			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 4b 08	lda $084b			lda 	gxxCentre					; while x <= y
.c848	a848	cd 4c 08	cmp $084c			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 4c 08	lda $084c			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 4b 08	lda $084b			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 4c 08	ldx $084c			ldx	 	gxYCentre
.c875	a875	8d 4c 08	sta $084c			sta 	gxYCentre
.c878	a878	8e 4b 08	stx $084b			stx 	gxxCentre
.c87b	a87b	ad 4e 08	lda $084e			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 4e 08	sta $084e			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 4d 08	lda $084d	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 4e 08	lda $084e			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 4c 08	lda $084c			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 4b 08	lda $084b			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 4d 08	lda $084d			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 4c 08	sbc $084c			sbc 	gxYCentre
.c8bc	a8bc	8d 4c 08	sta $084c			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd b6 07	lda $07b6,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d b2 07	sta $07b2,x			sta 	gxX0,x
.c8d3	a8d3	bd b7 07	lda $07b7,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d b3 07	sta $07b3,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 4e 08	stz $084e			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 4b 08	inc $084b			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 4b 08	lda $084b			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 4b 08	inc $084b			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 4c 08	dec $084c			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 4b 08	lda $084b			lda 	gxxCentre
.c8fc	a8fc	ed 4c 08	sbc $084c			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 4e 08	dec $084e			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad b8 07	lda $07b8			lda 	gxY1
.c935	a935	ed b4 07	sbc $07b4			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 4a 08	sta $084a			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 4b 08	stz $084b			stz 	gxxCentre
.c949	a949	ad 4a 08	lda $084a			lda 	gxRadius
.c94c	a94c	8d 4c 08	sta $084c			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd b6 07	lda $07b6,x			lda 	gxX1,x
.c964	a964	7d b2 07	adc $07b2,x			adc 	gxX0,x
.c967	a967	9d b6 07	sta $07b6,x			sta 	gxX1,x
.c96a	a96a	bd b7 07	lda $07b7,x			lda 	gxX1+1,x
.c96d	a96d	7d b3 07	adc $07b3,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d b7 07	sta $07b7,x			sta 	gxX1+1,x
.c974	a974	7e b6 07	ror $07b6,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.084a						gxRadius:
>084a								.fill 	1
.084b						gxxCentre:
>084b								.fill 	1
.084c						gxYCentre:
>084c								.fill 	1
.084d						gxIsFillMode:
>084d								.fill 	1
.084e						gxYChanged:
>084e								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad bb 07	lda $07bb			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad be 07	lda $07be			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d bc 07	adc $07bc			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd bc 07	cmp $07bc			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c ba 07	stz $07ba			stz 	gxSpritesOn
.c9d1	a9d1	9c bb 07	stz $07bb			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e aa 07	stz $07aa,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d bb 07	sta $07bb			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d bc 07	sta $07bc			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e be 07	stx $07be			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d ba 07	sta $07ba			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d bd 07	sta $07bd			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d c8 07	sta $07c8			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d c9 07	sta $07c9			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c c7 07	stz $07c7			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 0a 08	stz $080a,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d ca 07	sta $07ca,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad bb 07	lda $07bb			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac c4 07	ldy $07c4			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d c2 07	and $07c2			and 	gxANDValue
.ca9e	aa9e	4d c1 07	eor $07c1			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 51 08	lda $0851			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad b2 07	lda $07b2			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d b6 07	eor $07b6			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad b3 07	lda $07b3			lda 	gxX0+1
.cac4	aac4	4d b7 07	eor $07b7			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad b8 07	lda $07b8			lda 	gxY1
.cacb	aacb	4d b4 07	eor $07b4			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 53 08	lda $0853			lda 	gxPosition
.cad3	aad3	6d 54 08	adc $0854			adc 	gxAdjust
.cad6	aad6	8d 53 08	sta $0853			sta 	gxPosition
.cad9	aad9	9c 56 08	stz $0856			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 55 08	cmp $0855			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 56 08	dec $0856			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 55 08	sbc $0855			sbc 	gxTotal
.caea	aaea	8d 53 08	sta $0853			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 51 08	lda $0851			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 56 08	lda $0856			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 56 08	lda $0856			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 52 08	lda $0852			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad b2 07	lda $07b2			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce b3 07	dec $07b3			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce b2 07	dec $07b2			dec 	gxX0
.cb1b	ab1b	ce c4 07	dec $07c4			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad c4 07	lda $07c4			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee b2 07	inc $07b2			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee b3 07	inc $07b3			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee c4 07	inc $07c4			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee b4 07	inc $07b4			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad b8 07	lda $07b8			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed b4 07	sbc $07b4			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 50 08	sta $0850			sta 	gxDiffY
.cb63	ab63	9c 52 08	stz $0852			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad b6 07	lda $07b6			lda 	gxX1
.cb6a	ab6a	ed b2 07	sbc $07b2			sbc 	gxX0
.cb6d	ab6d	8d 4f 08	sta $084f			sta 	gxDiffX
.cb70	ab70	ad b7 07	lda $07b7			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed b3 07	sbc $07b3			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 4f 08	ror $084f			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 4f 08	sbc $084f			sbc 	gxDiffX
.cb83	ab83	8d 4f 08	sta $084f			sta 	gxDiffX
.cb86	ab86	ce 52 08	dec $0852			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 51 08	stz $0851			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 50 08	lda $0850			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 54 08	sta $0854			sta 	gxAdjust
.cb92	ab92	ad 4f 08	lda $084f			lda 	gxDiffX
.cb95	ab95	8d 55 08	sta $0855			sta 	gxTotal
.cb98	ab98	ad 50 08	lda $0850			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 4f 08	cmp $084f			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 51 08	dec $0851			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 4f 08	lda $084f			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 54 08	sta $0854			sta 	gxAdjust
.cba9	aba9	ad 50 08	lda $0850			lda 	gxDiffY
.cbac	abac	8d 55 08	sta $0855			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 55 08	lda $0855			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 53 08	sta $0853			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.084f						gxDiffX:
>084f								.fill 	1
.0850						gxDiffY:
>0850								.fill 	1
.0851						gxIsDiffYLarger:
>0851								.fill 	1
.0852						gxDXNegative:
>0852								.fill 	1
.0853						gxPosition:
>0853								.fill 	1
.0854						gxAdjust:
>0854								.fill 	1
.0855						gxTotal:
>0855								.fill 	1
.0856						gxAddSelect:
>0856								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e c0 07	stx $07c0			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d bf 07	sta $07bf			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c c2 07	stz $07c2			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae c0 07	ldx $07c0			ldx 	gxColour
.cbc9	abc9	8e c1 07	stx $07c1			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e c2 07	stx $07c2			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c c1 07	stz $07c1			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad c2 07	lda $07c2			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d c2 07	sta $07c2			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac c4 07	ldy $07c4			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d c2 07	and $07c2			and 	gxANDValue
.cbf3	abf3	4d c1 07	eor $07c1			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad bb 07	lda $07bb			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad b4 07	lda $07b4			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd b8 07	cmp $07b8			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee b4 07	inc $07b4			inc 	gxY0 						; change Y pos
.cc22	ac22	ad b4 07	lda $07b4			lda 	gxY0 						; reached last line
.cc25	ac25	cd b8 07	cmp $07b8			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad b6 07	lda $07b6			lda		gxX1
.cc42	ac42	ed b2 07	sbc $07b2			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad b7 07	lda $07b7			lda 	gxX1+1
.cc4a	ac4a	ed b3 07	sbc $07b3			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad c4 07	lda $07c4			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac c4 07	ldy $07c4			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d c2 07	and $07c2			and 	gxANDValue
.cc67	ac67	4d c1 07	eor $07c1			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d c2 07	and $07c2			and 	gxANDValue
.cc85	ac85	4d c1 07	eor $07c1			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d c2 07	and $07c2			and 	gxANDValue
.cc9d	ac9d	4d c1 07	eor $07c1			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d c4 07	sta $07c4			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 57 08	sta $0857			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 58 08	sta $0858			sta 	gxMask 						; and mask
.ccc4	acc4	ad bb 07	lda $07bb			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad b4 07	lda $07b4			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 5a 08	sty $085a			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 59 08	stx $0859			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 5c 08	lda $085c			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 5b 08	sta $085b			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 5c 08	bit $085c			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 58 08	lda $0858			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 5b 08	lda $085b			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad b4 07	lda $07b4			lda 	gxY0 						; off screen
.ccfd	acfd	cd be 07	cmp $07be			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 57 08	cmp $0857			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d b4 07	sta $07b4			sta 	gxY0
.cd16	ad16	ae 5b 08	ldx $085b			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 57 08	lda $0857			lda 	gxSize
.cd1d	ad1d	6d b2 07	adc $07b2			adc 	gxX0
.cd20	ad20	8d b2 07	sta $07b2			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee b3 07	inc $07b3			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 59 08	jmp ($0859)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac c4 07	ldy $07c4			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 5b 08	lda $085b			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c bf 07	bit $07bf			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 58 08	lda $0858			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 5c 08	lda $085c			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d c2 07	and $07c2			and 	gxANDValue
.cd61	ad61	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 57 08	cmp $0857			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee b4 07	inc $07b4			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0857						gxSize:
>0857								.fill 	1
.0858						gxMask:
>0858								.fill 	1
.0859						gxAcquireVector:
>0859								.fill 	2
.085b						gxScale:
>085b								.fill 	1
.085c						gxUseMode:
>085c								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d bf 07	eor $07bf			eor 	gxMode
.cd84	ad84	8d 5c 08	sta $085c			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad c0 07	lda $07c0			lda 	gxColour
.cdbd	adbd	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad ba 07	lda $07ba			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d bf 07	eor $07bf			eor 	gxMode
.cdd1	add1	8d 5c 08	sta $085c			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 5d 08	lda $085d			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad bd 07	lda $07bd			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 5e 08	ldx $085e			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 60 08	adc $0860			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 61 08	adc $0861			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 5d 08	cpy $085d			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad ba 07	lda $07ba			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d c5 07	sta $07c5			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d c7 07	sta $07c7			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d c6 07	sta $07c6			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad ba 07	lda $07ba			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad c6 07	lda $07c6			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 60 08	lda $0860			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 61 08	lda $0861			lda 	gxSpriteOffset+1
.ce92	ae92	6d c8 07	adc $07c8			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad c9 07	lda $07c9			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 5e 08	lda $085e			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 5f 08	ora $085f			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae c5 07	ldx $07c5			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 0a 08	lda $080a,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 0a 08	sta $080a,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 5e 08	lda $085e			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 0a 08	ora $080a,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 0a 08	sta $080a,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd ca 07	lda $07ca,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d ca 07	sta $07ca,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad c6 07	lda $07c6			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae c5 07	ldx $07c5			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd ca 07	lda $07ca,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d ca 07	sta $07ca,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad ba 07	lda $07ba			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad c6 07	lda $07c6			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae c5 07	ldx $07c5			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 0a 08	lda $080a,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d b2 07	adc $07b2			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad b3 07	lda $07b3			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d b4 07	adc $07b4			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e b3 07	lsr $07b3			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e b2 07	ror $07b2			ror 	gxX0
.cf3d	af3d	4e b2 07	lsr $07b2			lsr 	gxX0
.cf40	af40	4e b4 07	lsr $07b4			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e b4 07	lsr $07b4			lsr 	gxY0
.cf46	af46	ae c5 07	ldx $07c5			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd ca 07	lda $07ca,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d b2 07	ora $07b2			ora 	gxX0
.cf51	af51	9d ca 07	sta $07ca,x			sta 	gxSpriteLow,x
.cf54	af54	bd 0a 08	lda $080a,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d b4 07	ora $07b4			ora 	gxY0
.cf5c	af5c	9d 0a 08	sta $080a,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d c3 07	sta $07c3			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad c3 07	lda $07c3			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad b4 07	lda $07b4			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad b2 07	lda $07b2			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d c4 07	sta $07c4			sta 	gxOffset
.cfae	afae	ad b3 07	lda $07b3			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d bc 07	adc $07bc			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad c4 07	lda $07c4			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d c4 07	sta $07c4			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 ca 07	lda $07ca,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d ca 07	ora $07ca,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 0a 08	lda $080a,y			lda 	gxSpriteHigh,y
.d000	b000	7d 0a 08	adc $080a,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 0a 08	lda $080a,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 0a 08	lda $080a,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 ca 07	lda $07ca,y			lda 	gxSpriteLow,y
.d02e	b02e	fd ca 07	sbc $07ca,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad bd 07	lda $07bd			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 61 08	sta $0861			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 5e 08	sta $085e			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 5d 08	sta $085d			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 5f 08	sta $085f			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 60 08	sta $0860			sta 	gxSpriteOffset
.d07b	b07b	0e 60 08	asl $0860			asl 	gxSpriteOffset
.d07e	b07e	2e 61 08	rol $0861			rol 	gxSpriteOffset+1
.d081	b081	0e 60 08	asl $0860			asl 	gxSpriteOffset
.d084	b084	2e 61 08	rol $0861			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.085d						gxSizePixels:
>085d								.fill 	1
.085e						gxSizeBits:
>085e								.fill 	1
.085f						gxSpriteLUT:
>085f								.fill 	1
.0860						gxSpriteOffset:
>0860								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad b2 07	lda $07b2			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd b6 07	cmp $07b6			cmp 	gxX1
.d098	b098	ad b3 07	lda $07b3			lda 	gxX0+1
.d09b	b09b	ed b7 07	sbc $07b7			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad b4 07	lda $07b4			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd b8 07	cmp $07b8			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd b2 07	lda $07b2,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 b2 07	lda $07b2,y			lda 	gxX0,y
.d0c8	b0c8	9d b2 07	sta $07b2,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 b2 07	sta $07b2,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d10e	b10e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d114	b114	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d11c	b11c	45 24 28
>d11f	b11f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d127	b127	45 24 28
>d12a	b12a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d130	b130	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d138	b138	28
>d139	b139	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d141	b141	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d147	b147	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d14f	b14f	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d157	b157	55 4e 54 28
>d15b	b15b	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d163	b163	54 24 28
>d166	b166	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d16d	b16d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d174	b174	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d17b	b17b	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>d183	b183	4e 28
>d185	b185	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>d18d	b18d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>d193	b193	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>d199	b199	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>d1a0	b1a0	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>d1a6	b1a6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>d1ac	b1ac	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>d1b3	b1b3	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>d1bb	b1bb	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>d1c3	b1c3	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>d1cb	b1cb	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>d1d3	b1d3	47 28
>d1d5	b1d5	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>d1dd	b1dd	28
>d1de	b1de	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>d1e6	b1e6	28
>d1e7	b1e7	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>d1ed	b1ed	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>d1f3	b1f3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>d1f9	b1f9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>d200	b200	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>d208	b208	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>d20e	b20e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>d214	b214	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>d219	b219	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>d21d	b21d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>d223	b223	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>d22b	b22b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>d232	b232	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>d239	b239	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>d241	b241	43
>d242	b242	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>d248	b248	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>d24e	b24e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>d255	b255	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>d25b	b25b	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>d25f	b25f	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>d263	b263	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>d269	b269	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>d271	b271	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>d278	b278	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>d27f	b27f	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>d287	b287	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>d28d	b28d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>d292	b292	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>d29a	b29a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>d2a0	b2a0	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>d2a6	b2a6	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>d2ab	b2ab	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>d2b1	b2b1	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>d2b8	b2b8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>d2bd	b2bd	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>d2c3	b2c3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>d2ca	b2ca	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>d2d2	b2d2	59
>d2d3	b2d3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>d2d8	b2d8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>d2dc	b2dc	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>d2e4	b2e4	45
>d2e5	b2e5	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>d2ed	b2ed	45
>d2ee	b2ee	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>d2f4	b2f4	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>d2fa	b2fa	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>d301	b301	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>d308	b308	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>d30f	b30f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>d315	b315	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>d31b	b31b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>d320	b320	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>d327	b327	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>d32e	b32e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>d336	b336	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>d33c	b33c	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>d340	b340	ff					.text	$FF
.d341	b341					KeywordSet1:
>d341	b341	00 65					.text	0,$65,""               ; $80 !0:EOF
>d343	b343	00 58					.text	0,$58,""               ; $81 !1:SH1
>d345	b345	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d347	b347	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d34f	b34f	4c 45
>d351	b351	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d359	b359	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d361	b361	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d368	b368	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d36f	b36f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d374	b374	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37c	b37c	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d381	b381	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d386	b386	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d38d	b38d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d392	b392	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d39a	b39a	45
>d39b	b39b	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d39f	b39f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d3a6	b3a6	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3ac	b3ac	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3b3	b3b3	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3ba	b3ba	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3c0	b3c0	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3c6	b3c6	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>d3cd	b3cd	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>d3d2	b3d2	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>d3d8	b3d8	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>d3df	b3df	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>d3e7	b3e7	45
>d3e8	b3e8	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d3f0	b3f0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d3f5	b3f5	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d3fb	b3fb	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d403	b403	45
>d404	b404	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d40c	b40c	45
>d40d	b40d	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d414	b414	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d41c	b41c	53
>d41d	b41d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d423	b423	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a3 VERIFY
>d42b	b42b	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a4 XGO
>d430	b430	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a5 XLOAD
>d437	b437	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a6 ZAP
>d43c	b43c	ff					.text	$FF
.d43d	b43d					KeywordSet2:
>d43d	b43d	00 65					.text	0,$65,""               ; $80 !0:EOF
>d43f	b43f	00 58					.text	0,$58,""               ; $81 !1:SH1
>d441	b441	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d443	b443	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d448	b448	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d44d	b44d	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d452	b452	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d457	b457	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d45c	b45c	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d461	b461	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d466	b466	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d46b	b46b	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d470	b470	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d475	b475	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d47a	b47a	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d47f	b47f	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d484	b484	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d489	b489	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d48e	b48e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d493	b493	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d498	b498	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d49d	b49d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4a2	b4a2	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4a7	b4a7	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4ac	b4ac	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4b1	b4b1	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4b6	b4b6	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4bb	b4bb	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4c0	b4c0	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4c5	b4c5	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4ca	b4ca	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4cf	b4cf	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4d4	b4d4	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4d9	b4d9	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4de	b4de	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4e3	b4e3	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4e8	b4e8	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4ed	b4ed	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4f2	b4f2	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4f7	b4f7	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4fc	b4fc	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d501	b501	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d506	b506	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d50b	b50b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d510	b510	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d515	b515	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d51a	b51a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d51f	b51f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d524	b524	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d529	b529	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d52e	b52e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d533	b533	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d538	b538	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d53d	b53d	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d542	b542	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d547	b547	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d54c	b54c	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d551	b551	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d556	b556	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d55b	b55b	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d560	b560	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d565	b565	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d56a	b56a	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d56f	b56f	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d574	b574	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d579	b579	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d57e	b57e	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d583	b583	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d588	b588	ff					.text	$FF
.d589	b589					Export_TKListConvertLine:
.d589	b589	48		pha				pha 								; save indent on the stack
.d58a	b58a	9c 19 04	stz $0419			stz 	tbOffset
.d58d	b58d	9c 29 04	stz $0429			stz 	tokenBuffer
.d590	b590	9c 25 04	stz $0425			stz 	currentListColour
.d593	b593	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d595	b595	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d598	b598	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d59a	b59a	b1 30		lda ($30),y			lda 	(codePtr),y
.d59c	b59c	aa		tax				tax
.d59d	b59d	88		dey				dey
.d59e	b59e	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a0	b5a0	20 83 b7	jsr $b783			jsr 	LCLWriteNumberXA
.d5a3	b5a3	68		pla				pla 								; adjustment to indent
.d5a4	b5a4	48		pha				pha 								; save on stack
.d5a5	b5a5	10 0c		bpl $b5b3			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5a7	b5a7	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5a8	b5a8	6d 22 04	adc $0422			adc 	listIndent
.d5ab	b5ab	8d 22 04	sta $0422			sta 	listIndent
.d5ae	b5ae	10 03		bpl $b5b3			bpl 	_LCNoAdjust
.d5b0	b5b0	9c 22 04	stz $0422			stz 	listIndent
.d5b3	b5b3					_LCNoAdjust:
.d5b3	b5b3	18		clc				clc		 							; work out actual indent.
.d5b4	b5b4	ad 22 04	lda $0422			lda 	listIndent
.d5b7	b5b7	0a		asl a				asl 	a
.d5b8	b5b8	69 07		adc #$07			adc 	#7
.d5ba	b5ba	85 36		sta $36				sta 	zTemp0
.d5bc	b5bc					_LCPadOut:
.d5bc	b5bc	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5be	b5be	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d5c1	b5c1	ad 19 04	lda $0419			lda 	tbOffset
.d5c4	b5c4	c5 36		cmp $36				cmp 	zTemp0
.d5c6	b5c6	d0 f4		bne $b5bc			bne 	_LCPadOut
.d5c8	b5c8	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5ca	b5ca					_LCMainLoop:
.d5ca	b5ca	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5cc	b5cc	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d5cf	b5cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d5d1	b5d1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5d3	b5d3	f0 17		beq $b5ec			beq 	_LCExit
.d5d5	b5d5	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5d7	b5d7	90 1e		bcc $b5f7			bcc 	_LCDoubles
.d5d9	b5d9	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5db	b5db	90 2a		bcc $b607			bcc 	_LCShiftPunc
.d5dd	b5dd	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5df	b5df	90 35		bcc $b616			bcc 	_LCPunctuation
.d5e1	b5e1	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5e3	b5e3	90 51		bcc $b636			bcc 	_LCIdentifiers
.d5e5	b5e5	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5e7	b5e7	90 73		bcc $b65c			bcc 	_LCTokens
.d5e9	b5e9	4c bc b6	jmp $b6bc			jmp 	_LCData 					; 254-5 are data objects
.d5ec	b5ec					_LCExit:
.d5ec	b5ec	68		pla				pla 								; get old indent adjust
.d5ed	b5ed	30 07		bmi $b5f6			bmi 	_LCExit2
.d5ef	b5ef	18		clc				clc 								; add to indent if +ve
.d5f0	b5f0	6d 22 04	adc $0422			adc 	listIndent
.d5f3	b5f3	8d 22 04	sta $0422			sta 	listIndent
.d5f6	b5f6					_LCExit2:
.d5f6	b5f6	60		rts				rts
.d5f7	b5f7					_LCDoubles:
.d5f7	b5f7	48		pha				pha
.d5f8	b5f8	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5f9	b5f9	29 02		and #$02			and 	#2
.d5fb	b5fb	09 3c		ora #$3c			ora 	#60 						; make < >
.d5fd	b5fd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d600	b600	68		pla				pla 								; restore, do lower bit
.d601	b601	29 03		and #$03			and 	#3
.d603	b603	09 3c		ora #$3c			ora 	#60
.d605	b605	80 0f		bra $b616			bra		_LCPunctuation 				; print, increment, loop
.d607	b607					_LCShiftPunc:
.d607	b607	aa		tax				tax 								; save in X
.d608	b608	29 07		and #$07			and 	#7 							; lower 3 bits
.d60a	b60a	f0 02		beq $b60e			beq 	_LCNoAdd
.d60c	b60c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d60e	b60e					_LCNoAdd:
.d60e	b60e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d610	b610	90 02		bcc $b614			bcc 	_LCNoAdd2
.d612	b612	09 20		ora #$20			ora 	#32 						; adds $20
.d614	b614					_LCNoAdd2:
.d614	b614	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d616	b616					_LCPunctuation:
.d616	b616	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d618	b618	d0 03		bne $b61d			bne 	_LCPContinue
.d61a	b61a	20 31 b7	jsr $b731			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d61d	b61d					_LCPContinue:
.d61d	b61d	c9 2e		cmp #$2e			cmp 	#'.'
.d61f	b61f	f0 08		beq $b629			beq 	_LCPIsConstant
.d621	b621	c9 30		cmp #$30			cmp 	#'0'
.d623	b623	90 0b		bcc $b630			bcc 	_LCPNotConstant
.d625	b625	c9 3a		cmp #$3a			cmp 	#'9'+1
.d627	b627	b0 07		bcs $b630			bcs 	_LCPNotConstant
.d629	b629					_LCPIsConstant:
.d629	b629	48		pha				pha
.d62a	b62a	a9 87		lda #$87			lda 	#CLIConstant+$80
.d62c	b62c	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d62f	b62f	68		pla				pla
.d630	b630					_LCPNotConstant:
.d630	b630	c8		iny				iny 								; consume character
.d631	b631	20 1b b7	jsr $b71b			jsr 	LCLWrite 					; write it out.
.d634	b634	80 94		bra $b5ca			bra 	_LCMainLoop 				; go round again.
.d636	b636					_LCIdentifiers:
.d636	b636	18		clc				clc 								; convert to physical address
.d637	b637	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d639	b639	85 37		sta $37				sta 	zTemp0+1
.d63b	b63b	c8		iny				iny
.d63c	b63c	b1 30		lda ($30),y			lda 	(codePtr),y
.d63e	b63e	85 36		sta $36				sta 	zTemp0
.d640	b640	c8		iny				iny
.d641	b641	5a		phy				phy 								; save position
.d642	b642	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d644	b644	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d647	b647	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d649	b649					_LCOutIdentifier:
.d649	b649	c8		iny				iny
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d64c	b64c	29 7f		and #$7f			and 	#$7F
.d64e	b64e	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d651	b651	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d654	b654	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d656	b656	10 f1		bpl $b649			bpl 	_LCOutIdentifier
.d658	b658	7a		ply				ply 								; restore position
.d659	b659	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d65c	b65c					_LCTokens:
.d65c	b65c	aa		tax				tax 								; token in X
.d65d	b65d	a9 3d		lda #$3d			lda 	#((KeywordSet2) & $FF)
.d65f	b65f	85 36		sta $36				sta 	0+zTemp0
.d661	b661	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d663	b663	85 37		sta $37				sta 	1+zTemp0
.d665	b665	e0 82		cpx #$82			cpx 	#$82
.d667	b667	f0 16		beq $b67f			beq 	_LCUseShift
.d669	b669	a9 41		lda #$41			lda 	#((KeywordSet1) & $FF)
.d66b	b66b	85 36		sta $36				sta 	0+zTemp0
.d66d	b66d	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d66f	b66f	85 37		sta $37				sta 	1+zTemp0
.d671	b671	e0 81		cpx #$81			cpx 	#$81
.d673	b673	f0 0a		beq $b67f			beq 	_LCUseShift
.d675	b675	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d677	b677	85 36		sta $36				sta 	0+zTemp0
.d679	b679	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d67b	b67b	85 37		sta $37				sta 	1+zTemp0
.d67d	b67d	80 01		bra $b680			bra 	_LCNoShift
.d67f	b67f					_LCUseShift:
.d67f	b67f	c8		iny				iny
.d680	b680					_LCNoShift:
.d680	b680	20 45 b7	jsr $b745			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d683	b683	b1 30		lda ($30),y			lda 	(codePtr),y
.d685	b685	aa		tax				tax 								; into X
.d686	b686					_LCFindText:
.d686	b686	ca		dex				dex
.d687	b687	10 0e		bpl $b697			bpl 	_LCFoundText 				; found text.
.d689	b689	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d68b	b68b	1a		inc a				inc 	a 							; one extra for size
.d68c	b68c	38		sec				sec 								; one extra for checksum
.d68d	b68d	65 36		adc $36				adc 	zTemp0 						; go to next token
.d68f	b68f	85 36		sta $36				sta 	zTemp0
.d691	b691	90 f3		bcc $b686			bcc 	_LCFindText
.d693	b693	e6 37		inc $37				inc 	zTemp0+1
.d695	b695	80 ef		bra $b686			bra 	_LCFindText
.d697	b697					_LCFoundText:
.d697	b697	5a		phy				phy 								; save List position
.d698	b698	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d69a	b69a	aa		tax				tax
.d69b	b69b	a9 86		lda #$86			lda 	#CLIToken+$80
.d69d	b69d	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6a0	b6a0	a0 02		ldy #$02			ldy 	#2
.d6a2	b6a2					_LCCopyToken:
.d6a2	b6a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6a4	b6a4	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d6a7	b6a7	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6aa	b6aa	c8		iny				iny
.d6ab	b6ab	ca		dex				dex
.d6ac	b6ac	d0 f4		bne $b6a2			bne 	_LCCopyToken
.d6ae	b6ae	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6b0	b6b0	f0 05		beq $b6b7			beq 	_LCNoSpace
.d6b2	b6b2	a9 20		lda #$20			lda 	#' '
.d6b4	b6b4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6b7	b6b7					_LCNoSpace:
.d6b7	b6b7	7a		ply				ply 								; restore position.
.d6b8	b6b8	c8		iny				iny 								; consume token
.d6b9	b6b9	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop 				; and go around again.
.d6bc	b6bc					_LCData:
.d6bc	b6bc	48		pha				pha 								; save type $FE/$FF
.d6bd	b6bd	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6bf	b6bf	c9 fe		cmp #$fe			cmp 	#$FE
.d6c1	b6c1	f0 22		beq $b6e5			beq 	_LCHaveOpener
.d6c3	b6c3	a2 22		ldx #$22			ldx 	#'"'
.d6c5	b6c5	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6c7	b6c7	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6ca	b6ca	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6cc	b6cc	d0 17		bne $b6e5			bne 	_LCHaveOpener
.d6ce	b6ce	88		dey				dey 								; what precedes it ?
.d6cf	b6cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d1	b6d1	c8		iny				iny
.d6d2	b6d2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6d4	b6d4	d0 0f		bne $b6e5			bne 	_LCHaveOpener
.d6d6	b6d6	a9 09		lda #$09			lda 	#9 							; tab
.d6d8	b6d8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6db	b6db	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6dd	b6dd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e0	b6e0	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6e2	b6e2	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6e5	b6e5					_LCHaveOpener:
.d6e5	b6e5	8a		txa				txa 								; output prefix (# or ")
.d6e6	b6e6	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e9	b6e9	c8		iny				iny 								; get count
.d6ea	b6ea	b1 30		lda ($30),y			lda 	(codePtr),y
.d6ec	b6ec	aa		tax				tax
.d6ed	b6ed	c8		iny				iny 								; point at first character
.d6ee	b6ee					_LCOutData:
.d6ee	b6ee	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f0	b6f0	c9 00		cmp #$00			cmp 	#0
.d6f2	b6f2	f0 03		beq $b6f7			beq 	_LCNoPrint
.d6f4	b6f4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6f7	b6f7					_LCNoPrint:
.d6f7	b6f7	c8		iny				iny
.d6f8	b6f8	ca		dex				dex
.d6f9	b6f9	d0 f3		bne $b6ee			bne 	_LCOutData
.d6fb	b6fb	68		pla				pla 								; closing " required ?
.d6fc	b6fc	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6fe	b6fe	d0 0f		bne $b70f			bne 	_LCNoQuote
.d700	b700	a9 22		lda #$22			lda 	#'"'
.d702	b702	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d705	b705	ad a7 07	lda $07a7			lda 	EXTTextColour
.d708	b708	29 0f		and #$0f			and 	#$0F
.d70a	b70a	09 90		ora #$90			ora 	#$90
.d70c	b70c	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d70f	b70f					_LCNoQuote:
.d70f	b70f	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d712	b712					LCLWriteColour:
.d712	b712	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d715	b715	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d718	b718	d0 01		bne $b71b			bne 	LCLWrite 					; if different, output it
.d71a	b71a	60		rts				rts
.d71b	b71b					LCLWrite:
.d71b	b71b	da		phx				phx
.d71c	b71c	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d71f	b71f	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d722	b722	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d725	b725	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d728	b728	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d72a	b72a	30 03		bmi $b72f			bmi 	_LCLNoColour
.d72c	b72c	8d 23 04	sta $0423			sta 	lcLastCharacter
.d72f	b72f					_LCLNoColour:
.d72f	b72f	fa		plx				plx
.d730	b730	60		rts				rts
.d731	b731					LCLDeleteLastSpace:
.d731	b731	48		pha				pha
.d732	b732	da		phx				phx
.d733	b733	ae 19 04	ldx $0419			ldx 	tbOffset
.d736	b736	f0 0a		beq $b742			beq 	_LCDLSExit
.d738	b738	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d73b	b73b	c9 20		cmp #$20			cmp 	#' '
.d73d	b73d	d0 03		bne $b742			bne 	_LCDLSExit
.d73f	b73f	ce 19 04	dec $0419			dec 	tbOffset
.d742	b742					_LCDLSExit:
.d742	b742	fa		plx				plx
.d743	b743	68		pla				pla
.d744	b744	60		rts				rts
.d745	b745					LCLCheckSpaceRequired:
.d745	b745	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d748	b748	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d74a	b74a	f0 1b		beq $b767			beq 	_LCCSRSpace
.d74c	b74c	c9 29		cmp #$29			cmp 	#')'
.d74e	b74e	f0 17		beq $b767			beq 	_LCCSRSpace
.d750	b750	c9 23		cmp #$23			cmp 	#'#'
.d752	b752	f0 13		beq $b767			beq 	_LCCSRSpace
.d754	b754	20 6d b7	jsr $b76d			jsr 	LCLLowerCase 				; saves a little effort
.d757	b757	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d759	b759	90 11		bcc $b76c			bcc 	_LCCSRExit
.d75b	b75b	c9 3a		cmp #$3a			cmp 	#"9"+1
.d75d	b75d	90 08		bcc $b767			bcc 	_LCCSRSpace
.d75f	b75f	c9 61		cmp #$61			cmp 	#"a"
.d761	b761	90 09		bcc $b76c			bcc 	_LCCSRExit
.d763	b763	c9 7b		cmp #$7b			cmp 	#"z"+1
.d765	b765	b0 05		bcs $b76c			bcs 	_LCCSRExit
.d767	b767					_LCCSRSpace:
.d767	b767	a9 20		lda #$20			lda 	#' '
.d769	b769	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d76c	b76c					_LCCSRExit:
.d76c	b76c	60		rts				rts
.d76d	b76d					LCLLowerCase:
.d76d	b76d	c9 41		cmp #$41			cmp 	#"A"
.d76f	b76f	90 06		bcc $b777			bcc 	_LCLLCOut
.d771	b771	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d773	b773	b0 02		bcs $b777			bcs 	_LCLLCOut
.d775	b775	69 20		adc #$20			adc 	#$20
.d777	b777					_LCLLCOut:
.d777	b777	60		rts				rts
.d778	b778					LCLUpperCase:
.d778	b778	c9 61		cmp #$61			cmp 	#"a"
.d77a	b77a	90 06		bcc $b782			bcc 	_LCLUCOut
.d77c	b77c	c9 7b		cmp #$7b			cmp 	#"z"+1
.d77e	b77e	b0 02		bcs $b782			bcs 	_LCLUCOut
.d780	b780	e9 1f		sbc #$1f			sbc 	#$1F
.d782	b782					_LCLUCOut:
.d782	b782	60		rts				rts
.d783	b783					LCLWriteNumberXA:
.d783	b783	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d785	b785					_LCLWNLoop1:
.d785	b785	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d787	b787					_LCLWNLoop2:
.d787	b787	48		pha				pha 								; save initial LSB
.d788	b788	38		sec				sec
.d789	b789	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d78b	b78b	f9 bc b7	sbc $b7bc,y			sbc 	_LCLWNTable,y
.d78e	b78e	48		pha				pha
.d78f	b78f	8a		txa				txa
.d790	b790	f9 bd b7	sbc $b7bd,y			sbc 	_LCLWNTable+1,y
.d793	b793	90 07		bcc $b79c			bcc 	_LCLWNUnderflow
.d795	b795	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d797	b797	aa		tax				tax 								; update X
.d798	b798	68		pla				pla 								; restore A
.d799	b799	7a		ply				ply 								; throw original
.d79a	b79a	80 eb		bra $b787			bra 	_LCLWNLoop2 				; try again.
.d79c	b79c					_LCLWNUnderflow:
.d79c	b79c	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d79e	b79e	d0 06		bne $b7a6			bne 	_LCLWNOut
.d7a0	b7a0	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7a3	b7a3	3a		dec a				dec 	a
.d7a4	b7a4	f0 04		beq $b7aa			beq 	_LCLWNNext
.d7a6	b7a6					_LCLWNOut:
.d7a6	b7a6	98		tya				tya
.d7a7	b7a7	20 b6 b7	jsr $b7b6			jsr 	_LCLWNOutDigit
.d7aa	b7aa					_LCLWNNext:
.d7aa	b7aa	7a		ply				ply 							 	; restore original value.
.d7ab	b7ab	68		pla				pla
.d7ac	b7ac	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7ae	b7ae	c8		iny				iny
.d7af	b7af	c8		iny				iny
.d7b0	b7b0	84 37		sty $37				sty 	zTemp0+1
.d7b2	b7b2	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7b4	b7b4	d0 cf		bne $b785			bne 	_LCLWNLoop1
.d7b6	b7b6					_LCLWNOutDigit:
.d7b6	b7b6	09 30		ora #$30			ora 	#'0'
.d7b8	b7b8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d7bb	b7bb	60		rts				rts
.d7bc	b7bc					_LCLWNTable:
>d7bc	b7bc	10 27						.word 	10000
>d7be	b7be	e8 03						.word 	1000
>d7c0	b7c0	64 00						.word 	100
>d7c2	b7c2	0a 00						.word 	10
.d7c4	b7c4					TOKSearchTable:
.d7c4	b7c4	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7c6	b7c6	85 36		sta $36				sta 	zTemp0
.d7c8	b7c8	a0 00		ldy #$00			ldy 	#0
.d7ca	b7ca	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7cc	b7cc	85 38		sta $38				sta 	zTemp1
.d7ce	b7ce					_TSTLoop:
.d7ce	b7ce	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7d0	b7d0	30 49		bmi $b81b			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7d2	b7d2	f0 2e		beq $b802			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7d4	b7d4	c8		iny				iny 								; get the hash
.d7d5	b7d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7d7	b7d7	88		dey				dey
.d7d8	b7d8	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7db	b7db	d0 25		bne $b802			bne 	_TSTNext
.d7dd	b7dd	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7e0	b7e0	38		sec				sec
.d7e1	b7e1	ed 00 04	sbc $0400			sbc 	identStart
.d7e4	b7e4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7e6	b7e6	d0 1a		bne $b802			bne 	_TSTNext
.d7e8	b7e8	5a		phy				phy 								; save Y , we might fail to match.
.d7e9	b7e9	c8		iny				iny 								; point to text
.d7ea	b7ea	c8		iny				iny
.d7eb	b7eb	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7ee	b7ee					_TSTCompareName:
.d7ee	b7ee	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7f3	b7f3	d0 0c		bne $b801			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7f5	b7f5	e8		inx				inx
.d7f6	b7f6	c8		iny				iny
.d7f7	b7f7	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7fa	b7fa	d0 f2		bne $b7ee			bne 	_TSTCompareName
.d7fc	b7fc	7a		ply				ply 								; throw Y
.d7fd	b7fd	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7ff	b7ff	38		sec				sec 								; return with CS = passed.
.d800	b800	60		rts				rts
.d801	b801					_TSTNextPullY:
.d801	b801	7a		ply				ply 								; restore current, fall through.
.d802	b802					_TSTNext:
.d802	b802	e6 38		inc $38				inc 	zTemp1 						; token counter
.d804	b804	98		tya				tya
.d805	b805	18		clc				clc
.d806	b806	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d808	b808	1a		inc a				inc 	a 							; +1
.d809	b809	1a		inc a				inc 	a 							; +2
.d80a	b80a	a8		tay				tay
.d80b	b80b	10 c1		bpl $b7ce			bpl 	_TSTLoop 					; if Y < $80 loop back
.d80d	b80d	98		tya				tya 								; add Y to zTemp0 and reset Y
.d80e	b80e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d810	b810	18		clc				clc  								; but have tables > 255 bytes
.d811	b811	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d813	b813	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d815	b815	90 b7		bcc $b7ce			bcc 	_TSTLoop
.d817	b817	e6 37		inc $37				inc 	zTemp0+1
.d819	b819	80 b3		bra $b7ce			bra 	_TSTLoop
.d81b	b81b					_TSTFail:
.d81b	b81b	18		clc				clc
.d81c	b81c	60		rts				rts
.d81d	b81d					Export_TKTokeniseLine:
.d81d	b81d	20 ea b9	jsr $b9ea			jsr 	LCLFixLineBufferCase 		; fix line case
.d820	b820	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d822	b822	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d825	b825	9c 27 04	stz $0427			stz 	tokenLineNumber
.d828	b828	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d82b	b82b	a2 ff		ldx #$ff			ldx 	#$FF
.d82d	b82d					_TKFindFirst:
.d82d	b82d	e8		inx				inx
.d82e	b82e	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d831	b831	f0 62		beq $b895			beq 	_TKExit
.d833	b833	c9 20		cmp #$20			cmp 	#' '
.d835	b835	90 f6		bcc $b82d			bcc 	_TKFindFirst
.d837	b837	c9 30		cmp #$30			cmp 	#'0'
.d839	b839	90 07		bcc $b842			bcc 	_TKNoLineNumber
.d83b	b83b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d83d	b83d	b0 03		bcs $b842			bcs 	_TKNoLineNumber
.d83f	b83f	20 14 ba	jsr $ba14			jsr 	TOKExtractLineNumber
.d842	b842					_TKNoLineNumber:
.d842	b842					_TKTokeniseLoop:
.d842	b842	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d845	b845	f0 4e		beq $b895			beq 	_TKExit
.d847	b847	e8		inx				inx
.d848	b848	c9 20		cmp #$20			cmp 	#' '
.d84a	b84a	f0 f6		beq $b842			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d84c	b84c	ca		dex				dex 								; undo last get, A contains character, X is position.
.d84d	b84d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d84f	b84f	f0 68		beq $b8b9			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d851	b851	c9 41		cmp #$41			cmp 	#'A'
.d853	b853	90 04		bcc $b859			bcc 	_TKTokenisePunctuation
.d855	b855	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d857	b857	90 60		bcc $b8b9			bcc 	_TKTokeniseIdentifier
.d859	b859					_TKTokenisePunctuation:
.d859	b859	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d85b	b85b	f0 2e		beq $b88b			beq 	_TKString
.d85d	b85d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d85f	b85f	f0 2f		beq $b890			beq 	_TKHexConstant
.d861	b861	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d863	b863	f0 36		beq $b89b			beq 	_TKCheckDouble
.d865	b865	c9 3e		cmp #$3e			cmp 	#'>'
.d867	b867	f0 32		beq $b89b			beq 	_TKCheckDouble
.d869	b869					_TKStandardPunctuation:
.d869	b869	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d86c	b86c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d86e	b86e	90 0e		bcc $b87e			bcc 	_TKNoShift
.d870	b870	48		pha				pha 								; save. we are about to convert this punctuation token from
.d871	b871	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d873	b873	85 36		sta $36				sta 	zTemp0
.d875	b875	68		pla				pla
.d876	b876	29 20		and #$20			and 	#32 						; bit 5
.d878	b878	4a		lsr a				lsr 	a 							; shift into bit 3
.d879	b879	4a		lsr a				lsr 	a
.d87a	b87a	05 36		ora $36				ora 	zTemp0
.d87c	b87c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d87e	b87e					_TKNoShift:
.d87e	b87e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; write the punctuation character
.d881	b881	e8		inx				inx 								; consume the character
.d882	b882	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d884	b884	d0 bc		bne $b842			bne 	_TKTokeniseLoop 			; and loop round again.
.d886	b886	20 4c b9	jsr $b94c			jsr 	TOKCheckComment 			; comment checl
.d889	b889	80 b7		bra $b842			bra 	_TKTokeniseLoop
.d88b	b88b					_TKString:
.d88b	b88b	20 79 b9	jsr $b979			jsr 	TOKTokenString
.d88e	b88e	80 b2		bra $b842			bra 	_TKTokeniseLoop
.d890	b890					_TKHexConstant:
.d890	b890	20 b4 b9	jsr $b9b4			jsr 	TOKHexConstant
.d893	b893	80 ad		bra $b842			bra 	_TKTokeniseLoop
.d895	b895	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d897	b897	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d89a	b89a	60		rts				rts
.d89b	b89b					_TKCheckDouble:
.d89b	b89b	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d89e	b89e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8a0	b8a0	90 c7		bcc $b869			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8a2	b8a2	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8a4	b8a4	b0 c3		bcs $b869			bcs 	_TKStandardPunctuation
.d8a6	b8a6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8a9	b8a9	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8ab	b8ab	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8ac	b8ac	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8af	b8af	38		sec				sec
.d8b0	b8b0	e9 3c		sbc #$3c			sbc 	#'<'
.d8b2	b8b2	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8b5	b8b5	e8		inx				inx 								; consume both
.d8b6	b8b6	e8		inx				inx
.d8b7	b8b7	80 89		bra $b842			bra 	_TKTokeniseLoop
.d8b9	b8b9					_TKTokeniseIdentifier:
.d8b9	b8b9	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8bc	b8bc	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8bf	b8bf					_TKCheckLoop:
.d8bf	b8bf	e8		inx				inx 								; look at next, we know first is identifier already.
.d8c0	b8c0	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8c3	b8c3	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8c5	b8c5	f0 f8		beq $b8bf			beq 	_TKCheckLoop
.d8c7	b8c7	c9 30		cmp #$30			cmp	 	#"0"
.d8c9	b8c9	90 0c		bcc $b8d7			bcc 	_TKEndIdentifier
.d8cb	b8cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8cd	b8cd	90 f0		bcc $b8bf			bcc 	_TKCheckLoop
.d8cf	b8cf	c9 41		cmp #$41			cmp	 	#"A"
.d8d1	b8d1	90 04		bcc $b8d7			bcc 	_TKEndIdentifier
.d8d3	b8d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8d5	b8d5	90 e8		bcc $b8bf			bcc 	_TKCheckLoop
.d8d7	b8d7					_TKEndIdentifier:
.d8d7	b8d7	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8da	b8da	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8dc	b8dc	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8de	b8de	f0 06		beq $b8e6			beq 	_TKHasTypeCharacter
.d8e0	b8e0	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8e2	b8e2	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8e4	b8e4	d0 07		bne $b8ed			bne 	_TKNoTypeCharacter
.d8e6	b8e6					_TKHasTypeCharacter:
.d8e6	b8e6	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8e9	b8e9	e8		inx				inx 								; consume the type character
.d8ea	b8ea	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8ed	b8ed					_TKNoTypeCharacter:
.d8ed	b8ed	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8ef	b8ef	d0 09		bne $b8fa			bne 	_TKNoArray
.d8f1	b8f1	e8		inx				inx 								; skip the (
.d8f2	b8f2	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8f5	b8f5	09 04		ora #$04			ora 	#$04
.d8f7	b8f7	8d 04 04	sta $0404			sta 	identTypeByte
.d8fa	b8fa					_TKNoArray:
.d8fa	b8fa	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8fd	b8fd	20 d5 b9	jsr $b9d5			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d900	b900	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d902	b902	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d904	b904	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d907	b907	a2 00		ldx #$00			ldx 	#0
.d909	b909	b0 1f		bcs $b92a			bcs 	_TKFoundToken
.d90b	b90b	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d90d	b90d	a9 41		lda #$41			lda 	#(KeywordSet1) & $FF
.d90f	b90f	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d912	b912	a2 81		ldx #$81			ldx 	#$81
.d914	b914	b0 14		bcs $b92a			bcs 	_TKFoundToken
.d916	b916	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d918	b918	a9 3d		lda #$3d			lda 	#(KeywordSet2) & $FF
.d91a	b91a	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d91d	b91d	a2 82		ldx #$82			ldx 	#$82
.d91f	b91f	b0 09		bcs $b92a			bcs 	_TKFoundToken
.d921	b921	20 65 ba	jsr $ba65			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d924	b924	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d927	b927	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d92a	b92a					_TKFoundToken:
.d92a	b92a	48		pha				pha 								; save token
.d92b	b92b	8a		txa				txa 								; shift in X, is there one ?
.d92c	b92c	f0 03		beq $b931			beq 	_TKNoTShift
.d92e	b92e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; if so, write it out
.d931	b931					_TKNoTShift:
.d931	b931	68		pla				pla 								; restore and write token
.d932	b932	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d935	b935	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d937	b937	d0 0d		bne $b946			bne 	_TKNotRem 			 		; not shifted ?
.d939	b939	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d93b	b93b	d0 09		bne $b946			bne 	_TKNotRem
.d93d	b93d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d940	b940	20 4c b9	jsr $b94c			jsr 	TOKCheckComment
.d943	b943	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop
.d946	b946					_TKNotRem:
.d946	b946	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d949	b949	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d94c	b94c					TOKCheckComment:
.d94c	b94c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d94f	b94f	e8		inx				inx
.d950	b950	c9 20		cmp #$20			cmp 	#' '
.d952	b952	f0 f8		beq $b94c			beq 	TOKCheckComment
.d954	b954	ca		dex				dex 								; first non space character
.d955	b955	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d957	b957	f0 1f		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d959	b959	c9 00		cmp #$00			cmp 	#0 							; EOL
.d95b	b95b	f0 1b		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d95d	b95d	da		phx				phx
.d95e	b95e					_TOKCCLowerCase:
.d95e	b95e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d961	b961	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d963	b963	90 09		bcc $b96e			bcc 	_TOKKCNotUC
.d965	b965	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d967	b967	b0 05		bcs $b96e			bcs 	_TOKKCNotUC
.d969	b969	49 20		eor #$20			eor 	#$20
.d96b	b96b	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d96e	b96e					_TOKKCNotUC:
.d96e	b96e	e8		inx				inx
.d96f	b96f	c9 00		cmp #$00			cmp 	#0
.d971	b971	d0 eb		bne $b95e			bne 	_TOKCCLowerCase
.d973	b973	fa		plx				plx
.d974	b974	ca		dex				dex 								; tokenise string expects initial skip.
.d975	b975	20 79 b9	jsr $b979			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d978	b978					_TOKCCExit:
.d978	b978	60		rts				rts
.d979	b979					TOKTokenString:
.d979	b979	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d97b	b97b	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d97e	b97e	e8		inx				inx									; start of quoted string.
.d97f	b97f	da		phx				phx 								; push start of string on top
.d980	b980	ca		dex				dex 								; because we pre-increment
.d981	b981					_TSFindEnd:
.d981	b981	e8		inx				inx
.d982	b982	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d985	b985	f0 04		beq $b98b			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d987	b987	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d989	b989	d0 f6		bne $b981			bne 	_TSFindEnd
.d98b	b98b					_TSEndOfString:
.d98b	b98b	7a		ply				ply  								; so now Y is first character, X is character after end.
.d98c	b98c	48		pha				pha 								; save terminating character
.d98d	b98d	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d990	b990	68		pla				pla 								; terminating character
.d991	b991	f0 01		beq $b994			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d993	b993	e8		inx				inx
.d994	b994					_TSNotQuote:
.d994	b994	60		rts				rts
.d995	b995					TOKWriteBlockXY:
.d995	b995	86 36		stx $36				stx 	zTemp0 						; save end character
.d997	b997	98		tya				tya 								; use 2's complement to work out the byte size
.d998	b998	49 ff		eor #$ff			eor 	#$FF
.d99a	b99a	38		sec				sec
.d99b	b99b	65 36		adc $36				adc 	zTemp0
.d99d	b99d	1a		inc a				inc 	a 							; one extra for NULL
.d99e	b99e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9a1	b9a1					_TOBlockLoop:
.d9a1	b9a1	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9a3	b9a3	f0 09		beq $b9ae			beq 	_TOBlockExit
.d9a5	b9a5	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9a8	b9a8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9ab	b9ab	c8		iny				iny
.d9ac	b9ac	80 f3		bra $b9a1			bra 	_TOBlockLoop
.d9ae	b9ae					_TOBlockExit:
.d9ae	b9ae	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9b0	b9b0	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b3	b9b3	60		rts				rts
.d9b4	b9b4					TOKHexConstant:
.d9b4	b9b4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9b6	b9b6	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b9	b9b9	e8		inx				inx									; start of quoted string.
.d9ba	b9ba	da		phx				phx 								; push start of constant on top
.d9bb	b9bb	ca		dex				dex
.d9bc	b9bc					_THFindLoop:
.d9bc	b9bc	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9bd	b9bd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9c0	b9c0	c9 30		cmp #$30			cmp 	#"0"
.d9c2	b9c2	90 0c		bcc $b9d0			bcc 	_THFoundEnd
.d9c4	b9c4	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9c6	b9c6	90 f4		bcc $b9bc			bcc 	_THFindLoop
.d9c8	b9c8	c9 41		cmp #$41			cmp 	#"A"
.d9ca	b9ca	90 04		bcc $b9d0			bcc 	_THFoundEnd
.d9cc	b9cc	c9 47		cmp #$47			cmp 	#"F"+1
.d9ce	b9ce	90 ec		bcc $b9bc			bcc 	_THFindLoop
.d9d0	b9d0					_THFoundEnd:
.d9d0	b9d0	7a		ply				ply 								; restore start
.d9d1	b9d1	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; output the block
.d9d4	b9d4	60		rts				rts
.d9d5	b9d5					TOKCalculateHash:
.d9d5	b9d5	da		phx				phx
.d9d6	b9d6	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9d9	b9d9	a9 00		lda #$00			lda 	#0
.d9db	b9db					_TCHLoop:
.d9db	b9db	18		clc				clc
.d9dc	b9dc	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9e3	b9e3	d0 f6		bne $b9db			bne 	_TCHLoop
.d9e5	b9e5	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9e8	b9e8	fa		plx				plx
.d9e9	b9e9	60		rts				rts
.d9ea	b9ea					LCLFixLineBufferCase:
.d9ea	b9ea	a2 00		ldx #$00			ldx 	#0
.d9ec	b9ec					_FLBCLoop:
.d9ec	b9ec	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9ef	b9ef	f0 22		beq $ba13			beq 	_FLBCExit 					; end of string.
.d9f1	b9f1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9f3	b9f3	f0 11		beq $ba06			beq 	_FLBCInQuotes
.d9f5	b9f5	e8		inx				inx
.d9f6	b9f6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9f8	b9f8	90 f2		bcc $b9ec			bcc 	_FLBCLoop
.d9fa	b9fa	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9fc	b9fc	b0 ee		bcs $b9ec			bcs 	_FLBCLoop
.d9fe	b9fe	38		sec				sec 								; make U/C
.d9ff	b9ff	e9 20		sbc #$20			sbc 	#32
.da01	ba01	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da04	ba04	80 e6		bra $b9ec			bra 	_FLBCLoop
.da06	ba06					_FLBCInQuotes:
.da06	ba06	e8		inx				inx 								; advance
.da07	ba07	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da0a	ba0a	f0 07		beq $ba13			beq 	_FLBCExit 					; exit on EOS
.da0c	ba0c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da0e	ba0e	d0 f6		bne $ba06			bne 	_FLBCInQuotes
.da10	ba10	e8		inx				inx 								; skip over it
.da11	ba11	80 d9		bra $b9ec			bra 	_FLBCLoop
.da13	ba13					_FLBCExit:
.da13	ba13	60		rts				rts
.da14	ba14					TOKExtractLineNumber:
.da14	ba14	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da17	ba17	48		pha				pha
.da18	ba18	ad 27 04	lda $0427			lda 	tokenLineNumber
.da1b	ba1b	48		pha				pha
.da1c	ba1c	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 2
.da1f	ba1f	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 4
.da22	ba22	18		clc				clc 								; add stacked value
.da23	ba23	68		pla				pla
.da24	ba24	6d 27 04	adc $0427			adc 	tokenLineNumber
.da27	ba27	8d 27 04	sta $0427			sta 	tokenLineNumber
.da2a	ba2a	68		pla				pla
.da2b	ba2b	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da2e	ba2e	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da31	ba31	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 10
.da34	ba34	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da37	ba37	e8		inx				inx
.da38	ba38	29 0f		and #$0f			and 	#15 						; add to line #
.da3a	ba3a	18		clc				clc
.da3b	ba3b	6d 27 04	adc $0427			adc 	tokenLineNumber
.da3e	ba3e	8d 27 04	sta $0427			sta 	tokenLineNumber
.da41	ba41	90 03		bcc $ba46			bcc 	_TLENNoCarry
.da43	ba43	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da46	ba46					_TLENNoCarry:
.da46	ba46	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da49	ba49	c9 30		cmp #$30			cmp 	#'0'
.da4b	ba4b	90 04		bcc $ba51			bcc 	_TLENExit
.da4d	ba4d	c9 3a		cmp #$3a			cmp 	#'9'+1
.da4f	ba4f	90 c3		bcc $ba14			bcc 	TOKExtractLineNumber
.da51	ba51					_TLENExit:
.da51	ba51	60		rts				rts
.da52	ba52					_LCLNTimes2:
.da52	ba52	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da55	ba55	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da58	ba58	60		rts				rts
.da59	ba59					TOKWriteByte:
.da59	ba59	da		phx				phx
.da5a	ba5a	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da5d	ba5d	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da60	ba60	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da63	ba63	fa		plx				plx
.da64	ba64	60		rts				rts
.da65	ba65					TOKCheckCreateVariableRecord:
.da65	ba65	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da67	ba67	85 36		sta $36				sta 	0+zTemp0
.da69	ba69	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da6b	ba6b	85 37		sta $37				sta 	1+zTemp0
.da6d	ba6d					_CCVSearch:
.da6d	ba6d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da6f	ba6f	f0 2c		beq $ba9d			beq 	_CCVFail
.da71	ba71	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da75	ba75	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da78	ba78	d0 16		bne $ba90			bne 	_CCVNext
.da7a	ba7a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da7c	ba7c	ae 00 04	ldx $0400			ldx 	identStart
.da7f	ba7f					_CCVCompare:
.da7f	ba7f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da82	ba82	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da84	ba84	e8		inx				inx 								; advance pointers
.da85	ba85	c8		iny				iny
.da86	ba86	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da87	ba87	d0 07		bne $ba90			bne 	_CCVNext  					; didn't match go to next.
.da89	ba89	90 f4		bcc $ba7f			bcc 	_CCVCompare 				; not finished yet.
.da8b	ba8b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da8e	ba8e	f0 41		beq $bad1			beq 	_CCVFound 					; yes, we were successful
.da90	ba90					_CCVNext:
.da90	ba90	18		clc				clc 								; go to next record.
.da91	ba91	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da93	ba93	65 36		adc $36				adc 	zTemp0
.da95	ba95	85 36		sta $36				sta 	zTemp0
.da97	ba97	90 d4		bcc $ba6d			bcc 	_CCVSearch
.da99	ba99	e6 37		inc $37				inc 	zTemp0+1
.da9b	ba9b	80 d0		bra $ba6d			bra 	_CCVSearch
.da9d	ba9d					_CCVFail:
.da9d	ba9d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da9f	ba9f	ad 03 04	lda $0403			lda 	identHash
.daa2	baa2	91 36		sta ($36),y			sta 	(zTemp0),y
.daa4	baa4	c8		iny				iny 								; offset 2 is the type byte
.daa5	baa5	ad 04 04	lda $0404			lda 	identTypeByte
.daa8	baa8	91 36		sta ($36),y			sta 	(zTemp0),y
.daaa	baaa	c8		iny				iny
.daab	baab					_CCVData:
.daab	baab	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daad	baad	91 36		sta ($36),y			sta 	(zTemp0),y
.daaf	baaf	c8		iny				iny
.dab0	bab0	c0 08		cpy #$08			cpy 	#8
.dab2	bab2	90 f7		bcc $baab			bcc 	_CCVData
.dab4	bab4	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dab7	bab7					_CCVCopyName:
.dab7	bab7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	e8		inx				inx
.dabd	babd	c8		iny				iny
.dabe	babe	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dac1	bac1	d0 f4		bne $bab7			bne 	_CCVCopyName
.dac3	bac3	98		tya				tya 								; patch offset
.dac4	bac4	92 36		sta ($36)			sta 	(zTemp0)
.dac6	bac6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dac8	bac8	91 36		sta ($36),y			sta 	(zTemp0),y
.daca	baca	88		dey				dey
.dacb	bacb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dacd	bacd	09 80		ora #$80			ora 	#$80
.dacf	bacf	91 36		sta ($36),y			sta 	(zTemp0),y
.dad1	bad1					_CCVFound:
.dad1	bad1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dad3	bad3	38		sec				sec
.dad4	bad4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dad6	bad6	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dad8	bad8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dadb	badb	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dadd	badd	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dae0	bae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dae1	bae1					SNDCheckChannel:
.dae1	bae1	aa		tax				tax
.dae2	bae2	bd 70 09	lda $0970,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dae5	bae5	d0 38		bne $bb1f			bne 	_SNDCCExit
.dae7	bae7	da		phx				phx 								; save current channel
.dae8	bae8	8a		txa				txa 								; put in A
.dae9	bae9	20 65 bb	jsr $bb65			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daec	baec	68		pla				pla 								; channel # in A
.daed	baed	90 30		bcc $bb1f			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.daef	baef	a8		tay				tay 								; Y is the channel #
.daf0	baf0	bd 65 08	lda $0865,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.daf3	baf3	99 64 09	sta $0964,y			sta 	SNDPitchLow,y
.daf6	baf6	bd 66 08	lda $0866,x			lda 	SNDQueue+2,x
.daf9	baf9	99 68 09	sta $0968,y			sta 	SNDPitchHigh,y
.dafc	bafc	bd 67 08	lda $0867,x			lda 	SNDQueue+3,x
.daff	baff	99 6c 09	sta $096c,y			sta 	SNDVolume,y
.db02	bb02	bd 68 08	lda $0868,x			lda 	SNDQueue+4,x
.db05	bb05	99 70 09	sta $0970,y			sta 	SNDTimeLeft,y
.db08	bb08	bd 69 08	lda $0869,x			lda 	SNDQueue+5,x
.db0b	bb0b	99 74 09	sta $0974,y			sta 	SNDAdjustLow,y
.db0e	bb0e	bd 6a 08	lda $086a,x			lda 	SNDQueue+6,x
.db11	bb11	99 78 09	sta $0978,y			sta 	SNDAdjustHigh,y
.db14	bb14	5a		phy				phy 								; save channel #
.db15	bb15	20 7f bb	jsr $bb7f			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db18	bb18	ce 63 08	dec $0863			dec 	SNDLength 					; reduce the queue length.
.db1b	bb1b	68		pla				pla
.db1c	bb1c	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update channel A
.db1f	bb1f					_SNDCCExit:
.db1f	bb1f	60		rts				rts
.db20	bb20					SNDUpdateNote:
.db20	bb20	aa		tax				tax 								; so we can access records
.db21	bb21	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db22	bb22	0a		asl a				asl 	a
.db23	bb23	0a		asl a				asl 	a
.db24	bb24	0a		asl a				asl 	a
.db25	bb25	0a		asl a				asl 	a
.db26	bb26	8d 62 08	sta $0862			sta 	SNDChannelBits
.db29	bb29	bd 70 09	lda $0970,x			lda 	SNDTimeLeft,x 				; are we silent
.db2c	bb2c	f0 2e		beq $bb5c			beq 	_SNDUNIsSilent
.db2e	bb2e	ad 62 08	lda $0862			lda 	SNDChannelBits 				; push channel bits on stack
.db31	bb31	48		pha				pha
.db32	bb32	bd 64 09	lda $0964,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db35	bb35	29 0f		and #$0f			and 	#$0F
.db37	bb37	0d 62 08	ora $0862			ora 	SNDChannelBits 				; set channel bits
.db3a	bb3a	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db3c	bb3c	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db3f	bb3f	bd 68 09	lda $0968,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db42	bb42	8d 62 08	sta $0862			sta 	SNDChannelBits
.db45	bb45	bd 64 09	lda $0964,x			lda 	SNDPitchLow,x
.db48	bb48	4e 62 08	lsr $0862			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db4b	bb4b	6a		ror a				ror 	a
.db4c	bb4c	4e 62 08	lsr $0862			lsr 	SNDChannelBits
.db4f	bb4f	6a		ror a				ror 	a
.db50	bb50	4a		lsr a				lsr 	a 							; put in bits 0-5
.db51	bb51	4a		lsr a				lsr 	a
.db52	bb52	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write as rest of pitch register
.db55	bb55	68		pla				pla
.db56	bb56	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db58	bb58	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db5b	bb5b	60		rts				rts
.db5c	bb5c					_SNDUNIsSilent:
.db5c	bb5c	ad 62 08	lda $0862			lda 	SNDChannelBits 				; channel bits
.db5f	bb5f	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db61	bb61	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write to the ports
.db64	bb64	60		rts				rts
.db65	bb65					SNDFindNextNoteForA:
.db65	bb65	ac 63 08	ldy $0863			ldy 	SNDLength 					; queue size into Y
.db68	bb68	f0 13		beq $bb7d			beq 	_SNDFNNFail 				; queue empty.
.db6a	bb6a	a2 00		ldx #$00			ldx 	#0
.db6c	bb6c					_SNDFNNSearch:
.db6c	bb6c	dd 64 08	cmp $0864,x			cmp 	SNDQueue,x 					; does it match the channel
.db6f	bb6f	38		sec				sec
.db70	bb70	f0 0c		beq $bb7e			beq 	_SNDFNNExit 				; if so exit with CS.
.db72	bb72	e8		inx				inx 								; next queue slot.
.db73	bb73	e8		inx				inx
.db74	bb74	e8		inx				inx
.db75	bb75	e8		inx				inx
.db76	bb76	e8		inx				inx
.db77	bb77	e8		inx				inx
.db78	bb78	e8		inx				inx
.db79	bb79	e8		inx				inx
.db7a	bb7a	88		dey				dey 								; done the whole queue
.db7b	bb7b	d0 ef		bne $bb6c			bne 	_SNDFNNSearch 				; no, go back.
.db7d	bb7d					_SNDFNNFail:
.db7d	bb7d	18		clc				clc
.db7e	bb7e					_SNDFNNExit:
.db7e	bb7e	60		rts				rts
.db7f	bb7f					SNDDeleteXFromQueue:
.db7f	bb7f	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db81	bb81	f0 09		beq $bb8c			beq 	_SNDDXExit
.db83	bb83	bd 6c 08	lda $086c,x			lda 	SNDQueue+8,x
.db86	bb86	9d 64 08	sta $0864,x			sta 	SNDQueue,x
.db89	bb89	e8		inx				inx
.db8a	bb8a	80 f3		bra $bb7f			bra 	SNDDeleteXFromQueue
.db8c	bb8c					_SNDDXExit:
.db8c	bb8c	60		rts				rts
.0862						SNDChannelBits:
>0862								.fill 	1
.db8d	bb8d					SNDQueueRequest:
.db8d	bb8d	86 36		stx $36				stx 	zTemp0						; save queue address
.db8f	bb8f	84 37		sty $37				sty 	zTemp0+1
.db91	bb91	ae 63 08	ldx $0863			ldx 	SNDLength 					; queue is full, can't take any more.
.db94	bb94	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db96	bb96	f0 21		beq $bbb9			beq 	_SNDQRExit
.db98	bb98	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db9a	bb9a	48		pha				pha
.db9b	bb9b	8a		txa				txa  								; get offset in queue buffer/
.db9c	bb9c	0a		asl a				asl 	a
.db9d	bb9d	0a		asl a				asl 	a
.db9e	bb9e	0a		asl a				asl 	a
.db9f	bb9f	aa		tax				tax
.dba0	bba0	68		pla				pla 								; get back and push again
.dba1	bba1	48		pha				pha
.dba2	bba2	9d 64 08	sta $0864,x			sta 	SNDQueue+0,x 				; save the channel #
.dba5	bba5	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dba7	bba7					_SNDQCopy:
.dba7	bba7	b1 36		lda ($36),y			lda 	(zTemp0),y
.dba9	bba9	e8		inx				inx
.dbaa	bbaa	c8		iny				iny
.dbab	bbab	9d 64 08	sta $0864,x			sta 	SNDQueue,x
.dbae	bbae	c0 06		cpy #$06			cpy 	#6
.dbb0	bbb0	d0 f5		bne $bba7			bne 	_SNDQCopy
.dbb2	bbb2	ee 63 08	inc $0863			inc 	SNDLength 					; bump queue length.
.dbb5	bbb5	68		pla				pla 								; get channel # back
.dbb6	bbb6	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbb9	bbb9					_SNDQRExit:
.dbb9	bbb9	60		rts				rts
.dbba	bbba					SNDSilenceChannel:
.dbba	bbba	aa		tax				tax 								; zero time left.
.dbbb	bbbb	9e 70 09	stz $0970,x			stz 	SNDTimeLeft,x
.dbbe	bbbe	0a		asl a				asl 	a 							; shift into position
.dbbf	bbbf	0a		asl a				asl 	a
.dbc0	bbc0	0a		asl a				asl 	a
.dbc1	bbc1	0a		asl a				asl 	a
.dbc2	bbc2	0a		asl a				asl 	a
.dbc3	bbc3	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbc5	bbc5	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.dbc8	bbc8	60		rts				rts
.dbc9	bbc9					SNDWritePorts:
.dbc9	bbc9	da		phx				phx 								; save X
.dbca	bbca	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbcc	bbcc	64 01		stz $01				stz 	1 							; access I/O page 0
.dbce	bbce	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbd1	bbd1	8d 10 d6	sta $d610			sta 	$D610
.dbd4	bbd4	86 01		stx $01				stx 	1 							; restore I/O
.dbd6	bbd6	fa		plx				plx 								; restore X
.dbd7	bbd7	60		rts				rts
.dbd8	bbd8					Export_SNDCommand:
.dbd8	bbd8	da		phx				phx 								; save XY
.dbd9	bbd9	5a		phy				phy
.dbda	bbda	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbdc	bbdc	f0 1d		beq $bbfb			beq 	_SNDInitialise
.dbde	bbde	90 28		bcc $bc08			bcc 	_SNDExit
.dbe0	bbe0	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbe2	bbe2	f0 17		beq $bbfb			beq 	_SNDSilence
.dbe4	bbe4	b0 22		bcs $bc08			bcs 	_SNDExit
.dbe6	bbe6	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbe8	bbe8	b0 09		bcs $bbf3			bcs 	_SNDQueryPlay
.dbea	bbea	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbec	bbec	b0 1a		bcs $bc08			bcs 	_SNDExit
.dbee	bbee	20 8d bb	jsr $bb8d			jsr 	SNDQueueRequest
.dbf1	bbf1	80 15		bra $bc08			bra 	_SNDExit
.dbf3	bbf3					_SNDQueryPlay:
.dbf3	bbf3	29 03		and #$03			and 	#3 							; get channel #
.dbf5	bbf5	aa		tax				tax
.dbf6	bbf6	bd 70 09	lda $0970,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbf9	bbf9	80 0d		bra $bc08			bra 	_SNDExit
.dbfb	bbfb					_SNDInitialise:
.dbfb	bbfb					_SNDSilence:
.dbfb	bbfb	9c 63 08	stz $0863			stz 	SNDLength 					; empty the queue.
.dbfe	bbfe	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc00	bc00					_SNDSilenceLoop:
.dc00	bc00	48		pha				pha
.dc01	bc01	20 ba bb	jsr $bbba			jsr 	SNDSilenceChannel
.dc04	bc04	68		pla				pla
.dc05	bc05	3a		dec a				dec 	a
.dc06	bc06	10 f8		bpl $bc00			bpl 	_SNDSilenceLoop
.dc08	bc08					_SNDExit:
.dc08	bc08	7a		ply				ply
.dc09	bc09	fa		plx				plx
.dc0a	bc0a	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0863						SNDLength:
>0863								.fill 	1
.0864						SNDQueue:
>0864								.fill 	SNDQueueSize * 8
.0964						SNDPitchLow:
>0964								.fill 	4
.0968						SNDPitchHigh:
>0968								.fill 	4
.096c						SNDVolume:
>096c								.fill 	4
.0970						SNDTimeLeft:
>0970								.fill 	4
.0974						SNDAdjustLow:
>0974								.fill 	4
.0978						SNDAdjustHigh:
>0978								.fill 	4
.dc0b	bc0b					Export_SNDUpdate:
.dc0b	bc0b					PagedSNDUpdate:
.dc0b	bc0b	ad 70 09	lda $0970			lda 	SNDTimeLeft+0 				; look at time remaining
.dc0e	bc0e	f0 05		beq $bc15			beq 	_SNDUNot0 					; not playing
.dc10	bc10	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc12	bc12	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel 			; update it.
.dc15	bc15					_SNDUNot0:
.dc15	bc15	ad 71 09	lda $0971			lda 	SNDTimeLeft+1
.dc18	bc18	f0 05		beq $bc1f			beq 	_SNDUNot1
.dc1a	bc1a	a2 01		ldx #$01			ldx 	#1
.dc1c	bc1c	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc1f	bc1f					_SNDUNot1:
.dc1f	bc1f	ad 72 09	lda $0972			lda 	SNDTimeLeft+2
.dc22	bc22	f0 05		beq $bc29			beq 	_SNDUNot2
.dc24	bc24	a2 02		ldx #$02			ldx 	#2
.dc26	bc26	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc29	bc29					_SNDUNot2:
.dc29	bc29	ad 73 09	lda $0973			lda 	SNDTimeLeft+3
.dc2c	bc2c	f0 05		beq $bc33			beq 	_SNDUNot3
.dc2e	bc2e	a2 03		ldx #$03			ldx 	#3
.dc30	bc30	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc33	bc33					_SNDUNot3:
.dc33	bc33	60		rts				rts
.dc34	bc34					SNDUpdateChannel:
.dc34	bc34	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc36	bc36	f0 2c		beq $bc64			beq 	_SNDUCExit
.dc38	bc38	3a		dec a				dec 	a 							; decrement and update timer
.dc39	bc39	9d 70 09	sta $0970,x			sta 	SNDTimeLeft,x
.dc3c	bc3c	f0 1d		beq $bc5b			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc3e	bc3e	bd 74 09	lda $0974,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc41	bc41	1d 78 09	ora $0978,x			ora 	SNDAdjustHigh,x
.dc44	bc44	f0 1e		beq $bc64			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc46	bc46	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc47	bc47	bd 64 09	lda $0964,x			lda 	SNDPitchLow,x
.dc4a	bc4a	7d 74 09	adc $0974,x			adc 	SNDAdjustLow,x
.dc4d	bc4d	9d 64 09	sta $0964,x			sta 	SNDPitchLow,x
.dc50	bc50	bd 68 09	lda $0968,x			lda 	SNDPitchHigh,x
.dc53	bc53	7d 78 09	adc $0978,x			adc 	SNDAdjustHigh,x
.dc56	bc56	29 03		and #$03			and 	#3
.dc58	bc58	9d 68 09	sta $0968,x			sta 	SNDPitchHigh,x
.dc5b	bc5b					_SNDUCUpdate:
.dc5b	bc5b	8a		txa				txa 								; which channel.
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update the current note
.dc60	bc60	68		pla				pla
.dc61	bc61	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; more to do ?
.dc64	bc64					_SNDUCExit:
.dc64	bc64	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
