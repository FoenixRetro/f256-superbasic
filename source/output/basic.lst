
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" "-D TILEMAP_ADDRESS=\$24000" "-D TILEIMAGES_ADDRESS=\$26000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Thu Mar  2 18:21:07 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=$24000						 TILEMAP_ADDRESS=$24000
=$26000						 TILEIMAGES_ADDRESS=$26000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TILELPAREN                       = $aa; $aa TILE(
=$ab						KWD_TIMERLPAREN                      = $ab; $ab TIMER(
=$ac						KWD_TRUE                             = $ac; $ac TRUE
=$ad						KWD_VALLPAREN                        = $ad; $ad VAL(
=$ae						KWD_FOR                              = $ae; $ae FOR
=$af						KWD_IF                               = $af; $af IF
=$b0						KWD_PROC                             = $b0; $b0 PROC
=$b1						KWD_REPEAT                           = $b1; $b1 REPEAT
=$b2						KWD_WHILE                            = $b2; $b2 WHILE
=$b3						KWD_ENDIF                            = $b3; $b3 ENDIF
=$b4						KWD_ENDPROC                          = $b4; $b4 ENDPROC
=$b5						KWD_NEXT                             = $b5; $b5 NEXT
=$b6						KWD_THEN                             = $b6; $b6 THEN
=$b7						KWD_UNTIL                            = $b7; $b7 UNTIL
=$b8						KWD_WEND                             = $b8; $b8 WEND
=$b9						KWD_AT                               = $b9; $b9 AT
=$ba						KWD_BY                               = $ba; $ba BY
=$bb						KWD_CALL                             = $bb; $bb CALL
=$bc						KWD_CIRCLE                           = $bc; $bc CIRCLE
=$bd						KWD_CLEAR                            = $bd; $bd CLEAR
=$be						KWD_COLOR                            = $be; $be COLOR
=$bf						KWD_COLOUR                           = $bf; $bf COLOUR
=$c0						KWD_DATA                             = $c0; $c0 DATA
=$c1						KWD_DIM                              = $c1; $c1 DIM
=$c2						KWD_DOWNTO                           = $c2; $c2 DOWNTO
=$c3						KWD_ELSE                             = $c3; $c3 ELSE
=$c4						KWD_FROM                             = $c4; $c4 FROM
=$c5						KWD_GFX                              = $c5; $c5 GFX
=$c6						KWD_HERE                             = $c6; $c6 HERE
=$c7						KWD_IMAGE                            = $c7; $c7 IMAGE
=$c8						KWD_LET                              = $c8; $c8 LET
=$c9						KWD_LINE                             = $c9; $c9 LINE
=$ca						KWD_LOCAL                            = $ca; $ca LOCAL
=$cb						KWD_MEMCOPY                          = $cb; $cb MEMCOPY
=$cc						KWD_OFF                              = $cc; $cc OFF
=$cd						KWD_ON                               = $cd; $cd ON
=$ce						KWD_OUTLINE                          = $ce; $ce OUTLINE
=$cf						KWD_PALETTE                          = $cf; $cf PALETTE
=$d0						KWD_PLOT                             = $d0; $d0 PLOT
=$d1						KWD_POKE                             = $d1; $d1 POKE
=$d2						KWD_POKED                            = $d2; $d2 POKED
=$d3						KWD_POKEL                            = $d3; $d3 POKEL
=$d4						KWD_POKEW                            = $d4; $d4 POKEW
=$d5						KWD_READ                             = $d5; $d5 READ
=$d6						KWD_RECT                             = $d6; $d6 RECT
=$d7						KWD_REM                              = $d7; $d7 REM
=$d8						KWD_SOLID                            = $d8; $d8 SOLID
=$d9						KWD_SOUND                            = $d9; $d9 SOUND
=$da						KWD_SPRITE                           = $da; $da SPRITE
=$db						KWD_TEXT                             = $db; $db TEXT
=$dc						KWD_TO                               = $dc; $dc TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_CURSOR                           = $8a; $8a CURSOR
=$8b						KWD1_DIR                              = $8b; $8b DIR
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_PING                             = $99; $99 PING
=$9a						KWD1_PRINT                            = $9a; $9a PRINT
=$9b						KWD1_RESTORE                          = $9b; $9b RESTORE
=$9c						KWD1_RETURN                           = $9c; $9c RETURN
=$9d						KWD1_RUN                              = $9d; $9d RUN
=$9e						KWD1_SAVE                             = $9e; $9e SAVE
=$9f						KWD1_SETDATE                          = $9f; $9f SETDATE
=$a0						KWD1_SETTIME                          = $a0; $a0 SETTIME
=$a1						KWD1_SHOOT                            = $a1; $a1 SHOOT
=$a2						KWD1_SPRITES                          = $a2; $a2 SPRITES
=$a3						KWD1_STOP                             = $a3; $a3 STOP
=$a4						KWD1_TILE                             = $a4; $a4 TILE
=$a5						KWD1_TILES                            = $a5; $a5 TILES
=$a6						KWD1_TRY                              = $a6; $a6 TRY
=$a7						KWD1_VERIFY                           = $a7; $a7 VERIFY
=$a8						KWD1_XGO                              = $a8; $a8 XGO
=$a9						KWD1_XLOAD                            = $a9; $a9 XLOAD
=$aa						KWD1_ZAP                              = $aa; $aa ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ae						KWC_FIRST_STRUCTURE = $ae
=$b3						KWC_FIRST_STRUCTURE_DEC = $b3
=$b8						KWC_LAST_STRUCTURE = $b8
=$83						KWC_FIRST_UNARY = $83
=$ad						KWC_LAST_UNARY = $ad

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 93 80	jmp $8093	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 d0 a1	jsr $a1d0		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 5a b9	jsr $b95a		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 8d b9	jsr $b98d		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 0b b3	jsr $b30b		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 9f b5	jsr $b59f		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8093		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8095		9a		txs				txs
.8096		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.8099		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809b		09 80		ora #$80			ora 	#$80
.809d		85 00		sta $00				sta 	0
.809f		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a2		c9 42		cmp #$42			cmp 	#"B"
.80a4		d0 18		bne $80be			bne 	_NoMachineCode
.80a6		ad 03 20	lda $2003			lda 	$2003
.80a9		c9 54		cmp #$54			cmp 	#"T"
.80ab		d0 11		bne $80be			bne 	_NoMachineCode
.80ad		ad 04 20	lda $2004			lda 	$2004
.80b0		c9 36		cmp #$36			cmp 	#"6"
.80b2		d0 0a		bne $80be			bne 	_NoMachineCode
.80b4		ad 05 20	lda $2005			lda 	$2005
.80b7		c9 35		cmp #$35			cmp 	#"5"
.80b9		d0 03		bne $80be			bne 	_NoMachineCode
.80bb		4c 00 20	jmp $2000			jmp 	$2000
.80be						_NoMachineCode:
.80be		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80c0		20 c1 83	jsr $83c1			jsr 	KNLSetDrive
.80c3		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c5		aa		tax				tax
.80c6		a8		tay				tay
.80c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80ca		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80cc		20 6b 80	jsr $806b			jsr 	SNDCommand
.80cf		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d4		a9 09		lda #$09			lda 	#9
.80d6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80dc		64 01		stz $01				stz 	1
.80de		ad ad d6	lda $d6ad			lda 	$D6AD
.80e1		20 96 85	jsr $8596			jsr 	PrintHex
.80e4		ad ac d6	lda $d6ac			lda 	$D6AC
.80e7		20 96 85	jsr $8596			jsr 	PrintHex
.80ea		ad ab d6	lda $d6ab			lda 	$D6AB
.80ed		20 96 85	jsr $8596			jsr 	PrintHex
.80f0		ad aa d6	lda $d6aa			lda 	$D6AA
.80f3		20 96 85	jsr $8596			jsr 	PrintHex
.80f6		a9 20		lda #$20			lda 	#32
.80f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80fb		ad a8 d6	lda $d6a8			lda 	$D6A8
.80fe		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8101		ad a9 d6	lda $d6a9			lda 	$D6A9
.8104		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8107		a9 0d		lda #$0d			lda 	#13 						; display Kernel information
.8109		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810c		a9 09		lda #$09			lda 	#9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a9 08		lda #$08			lda 	#$08
.8116		a2 e0		ldx #$e0			ldx 	#$E0
.8118		20 14 94	jsr $9414			jsr 	PrintStringXA
.811b		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.811d		a9 2e		lda #$2e			lda 	#Prompt & $FF
.811f		20 14 94	jsr $9414			jsr 	PrintStringXA
.8122		20 78 82	jsr $8278			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8125		20 ff 8d	jsr $8dff			jsr 	NewProgram 					; erase current program
.8128		4c 02 88	jmp $8802			jmp 	WarmStart					; make same size.
.812b		4c 02 88	jmp $8802			jmp 	WarmStart
>812e		0d				Prompt:	.text 	13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>812f		09 09 30 32 2f 30 33 2f			.text 9,9,"02/03/23 01b"
>8137		32 33 20 30 31 62

;******  Return to file: ./common/aa.system/00start.asm

>813d		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8141						ProcessEvents:
.8141		20 00 84	jsr $8400			jsr 	KNLSetEventPointer
.8144		20 81 82	jsr $8281			jsr     GetNextEvent 				; get next event
.8147		b0 36		bcs $817f			bcs 	_PEExitZ 					; nothing left to process.
.8149		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; go back if event not key.pressed.
.814c		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.814e		d0 f1		bne $8141			bne 	ProcessEvents
.8150		ad a1 07	lda $07a1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8153		30 0b		bmi $8160			bmi 	_PEIsRaw
.8155		d0 ea		bne $8141			bne 	ProcessEvents
.8157		ad a0 07	lda $07a0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.815a		c9 03		cmp #$03			cmp 	#3
.815c		f0 1e		beq $817c			beq 	_PEReturnBreak  			; no, keep going.
.815e		80 0b		bra $816b			bra 	_PEQueueA
.8160						_PEIsRaw:
.8160		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; return raw key if F1-F12
.8163		c9 81		cmp #$81			cmp 	#129
.8165		90 da		bcc $8141			bcc		ProcessEvents
.8167		c9 8d		cmp #$8d			cmp 	#140+1
.8169		b0 d6		bcs $8141			bcs 	ProcessEvents
.816b						_PEQueueA:
.816b		da		phx				phx
.816c		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.816f		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8171		f0 06		beq $8179			beq 	_PENoQueue
.8173		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8176		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8179						_PENoQueue:
.8179		fa		plx				plx
.817a		80 c5		bra $8141			bra 	ProcessEvents
.817c						_PEReturnBreak:
.817c		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.817e		60		rts				rts
.817f						_PEExitZ:
.817f		a9 00		lda #$00			lda 	#0
.8181		60		rts				rts
.8182						PopKeyboardQueue:
.8182		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8185		f0 17		beq $819e			beq 	_PKQExit 					; zero, then exit.
.8187		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.818a		48		pha				pha
.818b		da		phx				phx 								; drop head of queue
.818c		a2 00		ldx #$00			ldx 	#0
.818e						_PKQLoop:
.818e		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8191		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8194		e8		inx				inx
.8195		e0 07		cpx #$07			cpx 	#7
.8197		d0 f5		bne $818e			bne 	_PKQLoop
.8199		fa		plx				plx
.819a		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.819d		68		pla				pla 								; restore head of queue.
.819e						_PKQExit:
.819e		60		rts				rts
.819f						KNLGetKeyPressed:
.819f		a5 01		lda $01				lda 	1 							; save I/O 0
.81a1		48		pha				pha
.81a2		64 01		stz $01				stz 	1 							; access I/O Page 0
.81a4		38		sec				sec 								; calculate timer - LastTick
.81a5		ad 59 d6	lda $d659			lda 	$D659
.81a8		cd 5e 06	cmp $065e			cmp 	LastTick
.81ab		f0 06		beq $81b3			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.81ad		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.81b0		20 70 82	jsr $8270			jsr 	TickHandler 							; go do the code.
.81b3						_NoFireTick:
.81b3		68		pla				pla 								; restore I/O 0
.81b4		85 01		sta $01				sta 	1
.81b6		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.81b9		d0 c7		bne $8182			bne 	PopKeyboardQueue 			; if so, pop and return it
.81bb		20 41 81	jsr $8141			jsr 	ProcessEvents 				; process any outstanding events
.81be		a9 00		lda #$00			lda 	#0
.81c0		60		rts				rts
.81c1						KNLGetSingleCharacter:
.81c1		20 9f 81	jsr $819f			jsr 	KNLGetKeyPressed
.81c4		c9 00		cmp #$00			cmp 	#0
.81c6		f0 f9		beq $81c1			beq 	KNLGetSingleCharacter
.81c8		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81c9						EXTInputLine:
.81c9		48		pha				pha
.81ca		da		phx				phx
.81cb		5a		phy				phy
.81cc		a5 01		lda $01				lda 	1 							; save I/O page
.81ce		48		pha				pha
.81cf						_EILLoop:
.81cf		20 c1 81	jsr $81c1			jsr 	KNLGetSingleCharacter 		; get one single character
.81d2		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81d4		f0 44		beq $821a			beq 	_EILExit
.81d6		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81d8		f0 2a		beq $8204			beq 	_EILDelete
.81da		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81dc		f0 1c		beq $81fa			beq 	_EILBackspace
.81de		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81e0		90 12		bcc $81f4			bcc 	_EILPrintLoop
.81e2		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81e4		b0 0e		bcs $81f4			bcs 	_EILPrintLoop
.81e6		48		pha				pha 								; save character
.81e7		a9 02		lda #$02			lda 	#2  						; insert a space
.81e9		85 01		sta $01				sta 	1
.81eb		20 5e 82	jsr $825e			jsr 	EXTILInsert 				; insert in text screen
.81ee		e6 01		inc $01				inc 	1
.81f0		20 5e 82	jsr $825e			jsr 	EXTILInsert 				; insert in colour screen
.81f3		68		pla				pla 								; get character back.
.81f4						_EILPrintLoop:
.81f4		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81f7		80 d6		bra $81cf			bra 	_EILLoop
.81f9		60		rts				rts
.81fa						_EILBackspace:
.81fa		ad c8 07	lda $07c8			lda 	EXTColumn					; can we backspace ?
.81fd		f0 d0		beq $81cf			beq 	_EILLoop
.81ff		a9 02		lda #$02			lda 	#2 							; move cursor left
.8201		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8204						_EILDelete
.8204		a9 02		lda #$02			lda 	#2 							; text block
.8206		85 01		sta $01				sta 	1
.8208		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.820a		20 49 82	jsr $8249			jsr 	EXTILDelete
.820d		e6 01		inc $01				inc 	1 							; colour block
.820f		ac c8 07	ldy $07c8			ldy 	EXTColumn 					; get attribute of last character
.8212		88		dey				dey
.8213		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8215		20 49 82	jsr $8249			jsr 	EXTILDelete 				; backspace attribute
.8218		80 b5		bra $81cf			bra 	_EILLoop 					; and go round.
.821a						_EILExit:
.821a		a9 02		lda #$02			lda 	#2 							; switch to page 2
.821c		85 01		sta $01				sta 	1
.821e		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.8220						_EILScrapeLine:
.8220		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8222		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8225		c8		iny				iny
.8226		cc ca 07	cpy $07ca			cpy 	EXTScreenWidth
.8229		d0 f5		bne $8220			bne 	_EILScrapeLine
.822b						_EILTrimSpaces:
.822b		88		dey				dey
.822c		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.822e		f0 07		beq $8237			beq 	_EILEndTrim		 			; zero the input line.
.8230		b9 26 05	lda $0526,y			lda 	lineBuffer,y
.8233		c9 20		cmp #$20			cmp 	#' '
.8235		f0 f4		beq $822b			beq 	_EILTrimSpaces 				; if fail this found non space character
.8237						_EILEndTrim:
.8237		c8		iny				iny 								; trim after non space character.
.8238		a9 00		lda #$00			lda 	#0 							; trim here.
.823a		99 26 05	sta $0526,y			sta 	lineBuffer,y
.823d		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.823f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8242		68		pla				pla 								; reset I/O page
.8243		85 01		sta $01				sta 	1
.8245		7a		ply				ply
.8246		fa		plx				plx
.8247		68		pla				pla
.8248		60		rts				rts
.8249						EXTILDelete:
.8249		48		pha				pha 								; save the new character
.824a		ac c8 07	ldy $07c8			ldy 	EXTColumn 					; start copying from here.
.824d						_EXTDLoop:
.824d		c8		iny				iny 								; copy one byte down.
.824e		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8250		88		dey				dey
.8251		91 40		sta ($40),y			sta 	(EXTAddress),y
.8253		c8		iny				iny 								; do till end of line.
.8254		cc ca 07	cpy $07ca			cpy 	EXTScreenWidth
.8257		90 f4		bcc $824d			bcc 	_EXTDLoop
.8259		88		dey				dey 	 							; write in last slot.
.825a		68		pla				pla
.825b		91 40		sta ($40),y			sta 	(EXTAddress),y
.825d		60		rts				rts
.825e						EXTILInsert:
.825e		ac ca 07	ldy $07ca			ldy 	EXTScreenWidth 				; end position
.8261						_EXTILoop:
.8261		88		dey				dey 								; back one
.8262		cc c8 07	cpy $07c8			cpy 	EXTColumn 					; exit if reached insert point.
.8265		f0 08		beq $826f			beq 	_EXTIExit
.8267		88		dey				dey 								; copy one byte up.
.8268		b1 40		lda ($40),y			lda 	(EXTAddress),y
.826a		c8		iny				iny
.826b		91 40		sta ($40),y			sta 	(EXTAddress),y
.826d		80 f2		bra $8261			bra 	_EXTILoop
.826f						_EXTIExit:
.826f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8270						TickHandler:
.8270		da		phx				phx
.8271		5a		phy				phy 								; need to preserve Y
.8272		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8275		7a		ply				ply
.8276		fa		plx				plx
.8277		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8278						ResetIOTracking:
.8278		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.827a						_RIOLoop:
.827a		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.827d		ca		dex				dex
.827e		10 fa		bpl $827a			bpl 	_RIOLoop
.8280		60		rts				rts
.8281						GetNextEvent:
.8281		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8284		08		php				php									; save yes/no flag.
.8285		b0 29		bcs $82b0			bcs 	_GNEExit
.8287		48		pha				pha 								; save registers
.8288		da		phx				phx
.8289		5a		phy				phy
.828a		ad 9b 07	lda $079b			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.828d		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.828f		f0 04		beq $8295			beq 	_GNEKeyEvent
.8291		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.8293		d0 08		bne $829d			bne 	_GNECheckMouseEvent
.8295						_GNEKeyEvent:
.8295		20 6f 83	jsr $836f			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.8298		20 8c 83	jsr $838c			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.829b		80 10		bra $82ad			bra 	_GNEEventExit
.829d						_GNECheckMouseEvent:
.829d		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.829f		d0 05		bne $82a6			bne 	_GNENotDelta
.82a1		20 b2 82	jsr $82b2			jsr 	ProcessMouseDeltaEvent 		; process them.
.82a4		80 07		bra $82ad			bra 	_GNEEventExit
.82a6						_GNENotDelta:
.82a6		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.82a8		d0 03		bne $82ad			bne 	_GNEEventExit
.82aa		20 e1 82	jsr $82e1			jsr 	ProcessMouseClickEvent 		; process them.
.82ad						_GNEEventExit:
.82ad		7a		ply				ply 								; restore registers
.82ae		fa		plx				plx
.82af		68		pla				pla
.82b0						_GNEExit:
.82b0		28		plp				plp
.82b1		60		rts				rts
.82b2						ProcessMouseDeltaEvent:
.82b2		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.82b4		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.delta.x
.82b7		20 08 83	jsr $8308			jsr 	PMKAdjustTotal
.82ba		20 4b 83	jsr $834b			jsr 	PMKAddSubtract
.82bd		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.delta.y
.82c0		20 08 83	jsr $8308			jsr 	PMKAdjustTotal
.82c3		20 4b 83	jsr $834b			jsr 	PMKAddSubtract
.82c6		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.delta.z
.82c9		20 08 83	jsr $8308			jsr 	PMKAdjustTotal
.82cc		20 4b 83	jsr $834b			jsr 	PMKAddSubtract
.82cf		ad a1 07	lda $07a1			lda 	KNLEvent.mouse.delta.buttons
.82d2		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82d4		20 f6 82	jsr $82f6			jsr 	PMKOutputButton
.82d7		20 f6 82	jsr $82f6			jsr 	PMKOutputButton
.82da		20 f6 82	jsr $82f6			jsr 	PMKOutputButton
.82dd		20 17 83	jsr $8317			jsr 	PMKClipMouseCoord
.82e0		60		rts				rts
.82e1						ProcessMouseClickEvent:
.82e1		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82e3		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.clicks.inner
.82e6		20 4f 83	jsr $834f			jsr 	PMKAdd
.82e9		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.clicks.middle
.82ec		20 4f 83	jsr $834f			jsr 	PMKAdd
.82ef		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.clicks.outer
.82f2		20 4f 83	jsr $834f			jsr 	PMKAdd
.82f5		60		rts				rts
.82f6						PMKOutputButton:
.82f6		9e 5f 06	stz $065f,x			stz 	GNEBegin,x 					; button to zero
.82f9		9e 60 06	stz $0660,x			stz 	GNEBegin+1,x
.82fc		6a		ror a				ror 	a 							; shift LSB into carry
.82fd		90 06		bcc $8305			bcc 	_PMKOBExit
.82ff		de 5f 06	dec $065f,x			dec 	GNEBegin,x 					; if set then set to -1
.8302		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.8305						_PMKOBExit:
.8305		e8		inx				inx  								; next button
.8306		e8		inx				inx
.8307		60		rts				rts
.8308						PMKAdjustTotal:
.8308		48		pha				pha 								; save offset A index X
.8309		da		phx				phx
.830a		48		pha				pha 								; point X to the position
.830b		8a		txa				txa
.830c		18		clc				clc
.830d		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.830f		aa		tax				tax
.8310		68		pla				pla
.8311		20 4b 83	jsr $834b			jsr 	PMKAddSubtract 				; reuse the addition code.
.8314		fa		plx				plx 								; restore XA
.8315		68		pla				pla
.8316		60		rts				rts
.8317						PMKClipMouseCoord:
.8317		a2 00		ldx #$00			ldx 	#0
.8319						_PCMCLoop:
.8319		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x 				; check if -ve
.831c		10 06		bpl $8324			bpl 	_PCMCNotNeg
.831e		9e 8e 06	stz $068e,x			stz 	MousePosX,x 				; if so zero position.
.8321		9e 8f 06	stz $068f,x			stz 	MousePosX+1,x
.8324						_PCMCNotNeg:
.8324		bd 8e 06	lda $068e,x			lda 	MousePosX,x 				; compare pos vs extent
.8327		dd 45 83	cmp $8345,x			cmp 	_PCMCExtent,x
.832a		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x
.832d		fd 46 83	sbc $8346,x			sbc 	_PCMCExtent+1,x
.8330		90 0c		bcc $833e			bcc 	_PCMCNotOver 				; in range ?
.8332		bd 45 83	lda $8345,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8335		9d 8e 06	sta $068e,x			sta 	MousePosX,x
.8338		bd 46 83	lda $8346,x			lda 	_PCMCExtent+1,x
.833b		9d 8f 06	sta $068f,x			sta 	MousePosX+1,x
.833e						_PCMCNotOver:
.833e		e8		inx				inx
.833f		e8		inx				inx
.8340		e0 06		cpx #$06			cpx 	#3*2
.8342		d0 d5		bne $8319			bne 	_PCMCLoop
.8344		60		rts				rts
.8345						_PCMCExtent:
>8345		3f 01 ef 00 ff 00				.word 	319,239,255
.834b						PMKAddSubtract:
.834b		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.834d		30 0e		bmi $835d			bmi 	PMKSubtract
.834f						PMKAdd:
.834f		18		clc				clc
.8350		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8353		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8356		90 14		bcc $836c			bcc 	PMKExit
.8358		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.835b		80 0f		bra $836c			bra 	PMKExit
.835d						PMKSubtract:
.835d		18		clc				clc
.835e		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8361		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8364		bd 60 06	lda $0660,x			lda 	GNEBegin+1,x
.8367		69 ff		adc #$ff			adc 	#$FF
.8369		9d 60 06	sta $0660,x			sta 	GNEBegin+1,x
.836c						PMKExit:
.836c		e8		inx				inx 								; next slot ?
.836d		e8		inx				inx
.836e		60		rts				rts
.836f						ProcessKeyboardEvent:
.836f		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; raw key code.
.8372		20 ad 83	jsr $83ad			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8375		ac 9b 07	ldy $079b			ldy 	KNLEvent.type
.8378		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.837a		f0 07		beq $8383			beq 	_PKERelease
.837c		1d 60 06	ora $0660,x			ora 	KeyStatus,x 				; set bit
.837f		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.8382		60		rts				rts
.8383						_PKERelease:
.8383		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8385		3d 60 06	and $0660,x			and 	KeyStatus,x
.8388		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.838b		60		rts				rts
.838c						UpdateKeyboardJoystick:
.838c		9c 81 06	stz $0681			stz 	KeyJoystick
.838f		a2 00		ldx #$00			ldx 	#0
.8391						_UKJLoop:
.8391		bd a8 83	lda $83a8,x			lda 	_UKJKeys,x 					; which key
.8394		29 1f		and #$1f			and 	#$1F
.8396		a8		tay				tay
.8397		b9 60 06	lda $0660,y			lda 	KeyStatus,y 				; get status
.839a		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.839c		18		clc				clc  								; set C if bit set
.839d		69 ff		adc #$ff			adc 	#$FF
.839f		2e 81 06	rol $0681			rol 	KeyJoystick 				; shift into place
.83a2		e8		inx				inx
.83a3		e0 05		cpx #$05			cpx 	#5 							; do all 5
.83a5		d0 ea		bne $8391			bne 	_UKJLoop
.83a7		60		rts				rts
.83a8						_UKJKeys:
>83a8		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.83ad						KeyboardConvertXA:
.83ad		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.83af		8e 80 06	stx $0680			stx 	KeyMaskTemp
.83b2						_KCCALoop:
.83b2		18		clc				clc
.83b3		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.83b5		b0 05		bcs $83bc			bcs 	_KCCADone
.83b7		0e 80 06	asl $0680			asl 	KeyMaskTemp 				; shift the mask temp
.83ba		80 f6		bra $83b2			bra 	_KCCALoop
.83bc						_KCCADone:
.83bc		aa		tax				tax 								; table entry in X
.83bd		ad 80 06	lda $0680			lda 	KeyMaskTemp 				; mask temp in A.
.83c0		60		rts				rts
.065f						GNEBegin:
.065f						CMDMouseFlag:
>065f								.fill 	1
.0660						KeyStatus:
>0660								.fill 	32
.0680						KeyMaskTemp:
>0680								.fill 	1
.0681						KeyJoystick:
>0681								.fill 	1
.0682						MouseDeltaX:
>0682								.fill 	2
.0684						MouseDeltaY:
>0684								.fill 	2
.0686						MouseDeltaZ:
>0686								.fill 	2
.0688						MouseCountInner:
>0688								.fill 	2
.068a						MouseCountMiddle:
>068a								.fill 	2
.068c						MouseCountOuter:
>068c								.fill 	2
.068e						MousePosX:
>068e								.fill 	2
.0690						MousePosY:
>0690								.fill 	2
.0692						MousePosZ:
>0692								.fill 	2
.0694						MouseStatusX:
>0694								.fill 	2
.0696						MouseStatusY:
>0696								.fill 	2
.0698						MouseStatusZ:
>0698								.fill 	2
.069a						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.83c1						KNLSetDrive:
.83c1		8d 9a 07	sta $079a			sta 	KNLDefaultDrive
.83c4		60		rts				rts
.83c5						KNLOpenFileWrite:
.83c5		48		pha				pha
.83c6		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83c8		80 03		bra $83cd			bra 	KNLOpenStart
.83ca						KNLOpenFileRead:
.83ca		48		pha				pha
.83cb		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83cd						KNLOpenStart:
.83cd		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83cf		68		pla				pla
.83d0		20 0b 84	jsr $840b			jsr 	KNLSetupFileName
.83d3		20 00 84	jsr $8400			jsr 	KNLSetEventPointer
.83d6		ad 9a 07	lda $079a			lda 	KNLDefaultDrive 			; currently drive zero only.
.83d9		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83db		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83de		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83e0		b0 1d		bcs $83ff			bcs     _out
.83e2						_loop
.83e2		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83e5		20 81 82	jsr $8281			jsr     GetNextEvent
.83e8		b0 f8		bcs $83e2			bcs     _loop
.83ea		ad 9b 07	lda $079b			lda 	KNLEvent.type
.83ed		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83ef		f0 0a		beq $83fb			beq 	_success
.83f1		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.83f3		f0 0a		beq $83ff			beq 	_out
.83f5		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.83f7		f0 06		beq $83ff			beq 	_out
.83f9		80 e7		bra $83e2			bra     _loop
.83fb						_success
.83fb		ad 9e 07	lda $079e			lda     KNLEvent.file.stream
.83fe		18		clc				clc
.83ff						_out
.83ff		60		rts				rts
.8400						KNLSetEventPointer:
.8400		48		pha				pha
.8401		a9 9b		lda #$9b			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8403		85 f0		sta $f0				sta     kernel.args.events+0
.8405		a9 07		lda #$07			lda     #KNLEvent >> 8
.8407		85 f1		sta $f1				sta     kernel.args.events+1
.8409		68		pla				pla
.840a		60		rts				rts
.840b						KNLSetupFileName:
.840b		5a		phy				phy 								; save Y on stack
.840c		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.840e		86 37		stx $37				stx 	zTemp0+1
.8410		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8412		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8414		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8416						_KNLGetLength:
.8416		c8		iny				iny
.8417		b1 36		lda ($36),y			lda 	(zTemp0),y
.8419		d0 fb		bne $8416			bne 	_KNLGetLength
.841b		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.841d		7a		ply				ply
.841e		60		rts				rts
.841f						KNLReadBlock:
.841f		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8421		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8423		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8426		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8428		b0 2e		bcs $8458			bcs     _KGNBExitFail               ; report as general error
.842a						_KGRBEventLoop:
.842a		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.842d		20 81 82	jsr $8281			jsr     GetNextEvent
.8430		b0 f8		bcs $842a			bcs     _KGRBEventLoop
.8432		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; get event
.8435		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8437		f0 0a		beq $8443			beq     _KNLRBGetNextByte
.8439		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.843b		f0 1b		beq $8458			beq 	_KGNBExitFail
.843d		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.843f		f0 17		beq $8458			beq 	_KGNBExitFail
.8441		80 e7		bra $842a			bra 	_KGRBEventLoop
.8443						_KNLRBGetNextByte:
.8443		a9 9a		lda #$9a			lda     #<KNLReadBuffer 			; Set the target buffer
.8445		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8447		a9 06		lda #$06			lda     #>KNLReadBuffer
.8449		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.844b		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Set the target length
.844e		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8450		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8453		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8456		18		clc				clc
.8457		60		rts				rts
.8458						_KGNBExitFail:
.8458		38		sec				sec
.8459		60		rts				rts
.845a						KNLWriteBlock:
.845a		da		phx				phx
.845b		5a		phy				phy
.845c		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.845e		a5 36		lda $36				lda     zTemp0 						; save the data location.
.8460		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8462		a5 37		lda $37				lda     zTemp0+1
.8464		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8466		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8468		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.846b		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.846d		b0 21		bcs $8490			bcs 	_KWBFailed
.846f						_KNLWLoop:
.846f		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8472		20 81 82	jsr $8281			jsr     GetNextEvent
.8475		b0 f8		bcs $846f			bcs     _KNLWLoop
.8477		ad 9b 07	lda $079b			lda     KNLEvent.type 				; various errors.
.847a		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.847c		f0 12		beq $8490			beq 	_KWBFailed
.847e		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8480		f0 0e		beq $8490			beq 	_KWBFailed
.8482		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8484		f0 0a		beq $8490			beq 	_KWBFailed
.8486		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8488		d0 e5		bne $846f			bne 	_KNLWLoop
.848a		18		clc				clc
.848b		ad a1 07	lda $07a1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.848e		80 01		bra $8491			bra 	_KWBExit
.8490						_KWBFailed:
.8490		38		sec				sec
.8491						_KWBExit:
.8491		7a		ply				ply
.8492		fa		plx				plx
.8493		60		rts				rts
.8494						KNLCloseFile:
.8494		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8496		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8499		60		rts				rts
.849a						KNLReadController:
.849a		da		phx				phx
.849b		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.849d		64 01		stz $01				stz 	1 							; switch to I/O 0
.849f		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.84a2		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.84a4		0d 81 06	ora $0681			ora 	KeyJoystick 				; use key joystick.
.84a7		86 01		stx $01				stx 	1 							; repair old I/O and exit
.84a9		fa		plx				plx
.84aa		60		rts				rts
.069a						KNLReadBuffer:
>069a								.fill   256
.079a						KNLDefaultDrive:
>079a								.byte 	?
.079b						KNLEvent
>079b						type        .byte   ?   ; Enum above
>079c						buf         .byte   ?   ; page id or zero
>079d						ext         .byte   ?   ; page id or zero
.079e						key
>079e						keyboard    .byte   ?   ; Keyboard ID
>079f						raw         .byte   ?   ; Raw key ID
>07a0						ascii       .byte   ?   ; ASCII value
>07a1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.079e						mouse
.079e						delta
>079e						x           .byte   ?
>079f						y           .byte   ?
>07a0						z           .byte   ?
>07a1						buttons     .byte   ?
.079e						clicks
>079e						inner       .byte   ?
>079f						middle      .byte   ?
>07a0						outer       .byte   ?
.079e						joystick
>079e						joy0        .byte   ?
>079f						joy1        .byte   ?
.079e						udp
>079e						token       .byte   ?   ; TODO: break out into fields
.079e						tcp
>079e						len         .byte   ?   ; Raw packet length.
.079e						file
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						data
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						read        .byte   ?   ; Number of bytes actually read
.07a0						wrote
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						wrote       .byte   ?   ; Number of bytes actually read
.079e						directory
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						volume
>07a0						len         .byte   ?   ; Length of volname (in buf)
>07a1						flags       .byte   ?   ; block size, text encoding
.07a0						file
>07a0						len         .byte   ?
>07a1						flags       .byte   ?   ; block scale, text encoding, approx size
.07a0						free
>07a0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Seek        .fill   4   ; Seek to a specific position in a file.
>ff78						Open        .fill   4   ; Open a directory for reading.
>ff7c						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff80						Close       .fill   4   ; Close a directory once finished reading.
>ff84						MkDir       .fill   4   ; Create a directory
>ff88						RmDir       .fill   4   ; Delete a directory
>ff8c						            .fill   4   ; call gate
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						SendICMP    .fill   4
>ffa4						Match       .fill   4
>ffa8						Init        .fill   4
>ffac						Send        .fill   4
>ffb0						Recv        .fill   4
>ffb4						Open        .fill   4
>ffb8						Accept      .fill   4
>ffbc						Reject      .fill   4
>ffc0						Send        .fill   4
>ffc4						Recv        .fill   4
>ffc8						Close       .fill   4
>ffcc						Reset       .fill   4   ; Re-init the display
>ffd0						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd4						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd8						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffdc						GetTime     .fill   4
>ffe0						SetTime     .fill   4
>ffe4						GetSysInfo  .fill   4
>ffe8						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						seek
>00f3						stream      .byte       ?
>00f4						position    .dword      ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						mkdir
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						rmdir
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.00f3						config
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						seek
>0003						stream      .byte       ?
>0004						position    .dword      ?
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						mkdir
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						rmdir
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.0003						config
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						seek
>0000						stream      .byte       ?
>0001						position    .dword      ?
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_seek_t
>0000						stream      .byte       ?
>0001						position    .dword      ?
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						mkdir
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						rmdir
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
.0000						config_t
.0000						time_t
>0000						century     .byte       ?
>0001						year        .byte       ?
>0002						month       .byte       ?
>0003						day         .byte       ?
>0004						hours       .byte       ?
>0005						minutes     .byte       ?
>0006						seconds     .byte       ?
>0007						millis      .byte       ?
.0008						size
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						SEEK        .word   ?   ; The seek request has completed.
>003c						OPENED      .word   ?   ; The directory open request succeeded.
>003e						VOLUME      .word   ?   ; A volume record was found.
>0040						FILE        .word   ?   ; A file record was found.
>0042						FREE        .word   ?   ; A file-system free-space record was found.
>0044						EOF         .word   ?   ; All data has been read.
>0046						CLOSED      .word   ?   ; The directory file has been closed.
>0048						ERROR       .word   ?   ; An error occured; user should close.
>004a						CREATED     .word   ?   ; The directory has been created.
>004c						DELETED     .word   ?   ; The directory has been deleted.
>004e						TCP         .word   ?
>0050						UDP         .word   ?
>0052						TICK        .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.84ab						AssembleGroup1:
.84ab		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.84ad		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.84b0		80 02		bra $84b4			bra 	AsmGroup12
.84b2						AssembleGroup2:
.84b2		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.84b4						AsmGroup12:
.84b4		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.84b7		68		pla				pla 								; pop the return address to access the information following.
.84b8		fa		plx				plx
.84b9		20 40 85	jsr $8540			jsr 	AccessParameters 			; get opcode and save as base
.84bc		8d 20 04	sta $0420			sta 	BaseOpcode
.84bf		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84c2		d0 08		bne $84cc			bne 	_AG12HaveMask
.84c4		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84c6		20 48 85	jsr $8548			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84c9		8d 21 04	sta $0421			sta 	ModeMask
.84cc						_AG12HaveMask:
.84cc		20 7c 86	jsr $867c			jsr 	TypeAndCalculateOperand 	; get zero page type
.84cf		da		phx				phx 								; save found address mode
.84d0		20 ac 85	jsr $85ac			jsr 	AssembleModeX
.84d3		fa		plx				plx  								; restore address mode
.84d4		b0 0b		bcs $84e1			bcs 	_AG12Exit
.84d6		20 e2 84	jsr $84e2			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84d9		20 ac 85	jsr $85ac			jsr 	AssembleModeX
.84dc		b0 03		bcs $84e1			bcs 	_AG12Exit
.84de		4c 8d a4	jmp $a48d			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84e1						_AG12Exit:
.84e1		60		rts				rts
.84e2						PromoteToAbsolute:
.84e2		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84e4		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84e6		f0 19		beq $8501			beq 	_PTADo
.84e8		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84ea		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84ec		f0 13		beq $8501			beq 	_PTADo
.84ee		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84f0		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84f2		f0 0d		beq $8501			beq 	_PTADo
.84f4		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84f6		e0 d1		cpx #$d1			cpx 	#AM_IND
.84f8		f0 07		beq $8501			beq 	_PTADo
.84fa		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84fc		e0 c0		cpx #$c0			cpx 	#AM_INDX
.84fe		f0 01		beq $8501			beq 	_PTADo
.8500		60		rts				rts
.8501						_PTADo:
.8501		aa		tax				tax
.8502		60		rts				rts
.8503						AssembleGroup3:
.8503		68		pla				pla 								; get parameters, which is just the opcode.
.8504		fa		plx				plx
.8505		20 40 85	jsr $8540			jsr 	AccessParameters 			; get and output opcode
.8508		20 58 85	jsr $8558			jsr 	AssemblerWriteByte
.850b		20 e0 86	jsr $86e0			jsr 	CalculateOperand 			; get a 16 bit operand
.850e		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8510		38		sec				sec
.8511		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8514		48		pha				pha 								; LSB in A
.8515		a5 60		lda $60				lda 	NSMantissa1
.8517		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.851a		aa		tax				tax 								; MSB in X
.851b		68		pla				pla
.851c		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.851d		69 7f		adc #$7f			adc 	#$7F
.851f		90 01		bcc $8522			bcc 	_AG3NoCarry
.8521		e8		inx				inx
.8522						_AG3NoCarry:
.8522		38		sec				sec 								; fix back and write out anyways.
.8523		e9 80		sbc #$80			sbc 	#$80
.8525		20 58 85	jsr $8558			jsr 	AssemblerWriteByte
.8528		e0 00		cpx #$00			cpx 	#0 							; was it in range
.852a		f0 0a		beq $8536			beq 	_AG3Exit
.852c		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.852f		29 01		and #$01			and 	#1
.8531		f0 03		beq $8536			beq 	_AG3Exit
.8533		4c 92 a4	jmp $a492			jmp 	RangeError 					; no, branch is out of range
.8536						_AG3Exit:
.8536		60		rts				rts
.8537						AssembleGroup4:
.8537		68		pla				pla 								; pop address
.8538		fa		plx				plx
.8539		20 40 85	jsr $8540			jsr 	AccessParameters 			; access and get first
.853c		20 58 85	jsr $8558			jsr 	AssemblerWriteByte 			; output it.
.853f		60		rts				rts
.8540						AccessParameters:
.8540		8d 1d 04	sta $041d			sta 	ParamStart
.8543		8e 1e 04	stx $041e			stx 	ParamStart+1
.8546		a9 01		lda #$01			lda 	#1
.8548						GetParameter:
.8548		5a		phy				phy
.8549		a8		tay				tay
.854a		ad 1d 04	lda $041d			lda 	ParamStart
.854d		85 36		sta $36				sta 	zTemp0
.854f		ad 1e 04	lda $041e			lda 	ParamStart+1
.8552		85 37		sta $37				sta 	zTemp0+1
.8554		b1 36		lda ($36),y			lda 	(zTemp0),y
.8556		7a		ply				ply
.8557		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8558						AssemblerWriteByte:
.8558		48		pha			pha
.8559		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.855c		29 02		and #$02		and 	#2
.855e		f0 1b		beq $857b		beq 	_AWBNoPrint
.8560		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8563		20 96 85	jsr $8596		jsr 	PrintHex
.8566		ad 1a 04	lda $041a		lda		AssemblerAddress
.8569		20 96 85	jsr $8596		jsr 	PrintHex
.856c		a9 20		lda #$20		lda 	#' '
.856e		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8571		68		pla			pla 									; print byte
.8572		48		pha			pha
.8573		20 96 85	jsr $8596		jsr 	PrintHex
.8576		a9 0d		lda #$0d		lda 	#13
.8578		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.857b						_AWBNoPrint:
.857b		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.857e		85 36		sta $36			sta 	zTemp0
.8580		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8583		f0 0e		beq $8593		beq 	_AWBRange
.8585		85 37		sta $37			sta 	zTemp0+1
.8587		68		pla			pla 									; write byte out
.8588		92 36		sta ($36)		sta 	(zTemp0)
.858a		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.858d		d0 03		bne $8592		bne 	_AWBNoCarry
.858f		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8592						_AWBNoCarry:
.8592		60		rts			rts
.8593						_AWBRange:
.8593		4c 92 a4	jmp $a492		jmp 	RangeError
.8596						PrintHex:
.8596		48		pha				pha
.8597		4a		lsr a				lsr 	a
.8598		4a		lsr a				lsr 	a
.8599		4a		lsr a				lsr 	a
.859a		4a		lsr a				lsr 	a
.859b		20 9f 85	jsr $859f			jsr 	_PrintNibble
.859e		68		pla				pla
.859f						_PrintNibble:
.859f		29 0f		and #$0f			and 	#15
.85a1		c9 0a		cmp #$0a			cmp 	#10
.85a3		90 02		bcc $85a7			bcc 	_NoShift
.85a5		69 06		adc #$06			adc 	#6
.85a7						_NoShift:
.85a7		69 30		adc #$30			adc 	#48
.85a9		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.85ac						AssembleModeX:
.85ac		5a		phy				phy
.85ad		ad 1f 04	lda $041f			lda 	IsGroup1
.85b0		f0 17		beq $85c9			beq 	_AMXGroup2
.85b2		8a		txa				txa 							; is it in group # 1
.85b3		29 40		and #$40			and 	#AM_ISG1
.85b5		f0 4d		beq $8604			beq 	_AMXFail 				; no, give up.
.85b7		8a		txa				txa 							; get back.
.85b8		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85ba		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85bc		d0 22		bne $85e0			bne 	_AMXHaveInfo
.85be		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.85c1		c9 81		cmp #$81			cmp 	#$81
.85c3		f0 3f		beq $8604			beq 	_AMXFail
.85c5		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85c7		80 17		bra $85e0			bra 	_AMXHaveInfo 			; odd design decision there.
.85c9						_AMXGroup2:
.85c9		8a		txa				txa 							; is it in group 2 ?
.85ca		29 20		and #$20			and 	#AM_ISG2
.85cc		f0 36		beq $8604			beq 	_AMXFail 				; no, give up.
.85ce		8a		txa				txa 							; get the offset into Y
.85cf		29 1f		and #$1f			and 	#$1F
.85d1		4a		lsr a				lsr 	a 						; make it 0-7.
.85d2		4a		lsr a				lsr  	a
.85d3		a8		tay				tay
.85d4		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85d7						_AMXCheckOkay:
.85d7		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85d8		88		dey				dey
.85d9		10 fc		bpl $85d7			bpl 	_AMXCheckOkay
.85db		90 27		bcc $8604			bcc 	_AMXFail 				; not allowed.
.85dd		8a		txa				txa  							; get mask back
.85de		29 1f		and #$1f			and 	#$1F
.85e0						_AMXHaveInfo:
.85e0		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85e2		10 04		bpl $85e8			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85e4		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85e6		d0 1c		bne $8604			bne 	_AMXFail
.85e8						_AMXAnySize:
.85e8		18		clc				clc 							; add offset to the base opcode
.85e9		6d 20 04	adc $0420			adc 	BaseOpcode
.85ec						_AMXOutputCode:
.85ec		20 58 85	jsr $8558			jsr 	AssemblerWriteByte 		; write the opcode out.
.85ef		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85f1		f0 0e		beq $8601			beq 	_AMXExit
.85f3		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.85f5		20 58 85	jsr $8558			jsr 	AssemblerWriteByte
.85f8		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85fa		30 05		bmi $8601			bmi 	_AMXExit
.85fc		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.85fe		20 58 85	jsr $8558			jsr 	AssemblerWriteByte
.8601						_AMXExit:
.8601		7a		ply				ply
.8602		38		sec				sec
.8603		60		rts				rts
.8604						_AMXFail:
.8604		a0 00		ldy #$00			ldy 	#0
.8606						_AMXCheckOddities:
.8606		8a		txa				txa
.8607		d9 2e 86	cmp $862e,y			cmp 	ExtraOpcode+2,y 		; match address mode
.860a		d0 15		bne $8621			bne 	_AMXCONext
.860c		b9 2c 86	lda $862c,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.860f		cd 20 04	cmp $0420			cmp 	BaseOpcode
.8612		d0 0d		bne $8621			bne 	_AMXCONext
.8614		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8616		10 04		bpl $861c			bpl 	_AMXCONotZero
.8618		a5 60		lda $60				lda 	NSMantissa1
.861a		d0 05		bne $8621			bne 	_AMXCONext
.861c						_AMXCONotZero:
.861c		b9 2d 86	lda $862d,y			lda 	ExtraOpcode+1,y 		; get new opcode
.861f		80 cb		bra $85ec			bra 	_AMXOutputCode 			; and assemble it
.8621						_AMXCONext:
.8621		c8		iny				iny
.8622		c8		iny				iny
.8623		c8		iny				iny
.8624		b9 2c 86	lda $862c,y			lda 	ExtraOpcode+0,y 		; end of table
.8627		d0 dd		bne $8606			bne 	_AMXCheckOddities
.8629						_AMXCOFail:
.8629		7a		ply				ply
.862a		18		clc				clc
.862b		60		rts				rts
.862c						ExtraOpcode:
>862c		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>862f		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8632		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8635		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8638		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>863b		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>863e		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8641		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8644		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8647		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>864a		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.864b						LabelHere:
.864b		c8		iny				iny 								; skip .
.864c		a2 00		ldx #$00			ldx 	#0 							; get a term
.864e		20 09 9d	jsr $9d09			jsr 	EvaluateTerm
.8651		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8653		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8655		d0 22		bne $8679			bne 	_ALType 					; otherwise typing error
.8657		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8659		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.865b		b5 60		lda $60,x			lda 	NSMantissa1,x
.865d		85 37		sta $37				sta 	zTemp0+1
.865f		5a		phy				phy 								; copy address in (64k)
.8660		a0 01		ldy #$01			ldy 	#1
.8662		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8665		92 36		sta ($36)			sta 	(zTemp0)
.8667		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.866a		91 36		sta ($36),y			sta 	(zTemp0),y
.866c		c8		iny				iny
.866d		a9 00		lda #$00			lda 	#0 							; zero the rest.
.866f		91 36		sta ($36),y			sta 	(zTemp0),y
.8671		c8		iny				iny
.8672		91 36		sta ($36),y			sta 	(zTemp0),y
.8674		c8		iny				iny
.8675		91 36		sta ($36),y			sta 	(zTemp0),y
.8677		7a		ply				ply
.8678		60		rts				rts
.8679						_ALType:
.8679		4c 97 a4	jmp $a497			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.867c						TypeAndCalculateOperand:
.867c		b1 30		lda ($30),y			lda 	(codePtr),y
.867e		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8680		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8682		f0 5b		beq $86df			beq 	_TACOExit
.8684		c9 80		cmp #$80			cmp 	#KWC_EOL
.8686		f0 57		beq $86df			beq 	_TACOExit
.8688		c8		iny				iny
.8689		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.868b		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.868d		f0 51		beq $86e0			beq 	CalculateOperand
.868f		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8691		f0 1f		beq $86b2			beq 	_TACOIndirect
.8693		88		dey				dey 								; undo get of first character
.8694		20 e0 86	jsr $86e0			jsr 	CalculateOperand 			; get operand
.8697		b1 30		lda ($30),y			lda 	(codePtr),y
.8699		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.869b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.869d		d0 40		bne $86df			bne 	_TACOExit
.869f		c8		iny				iny
.86a0		20 ea 86	jsr $86ea			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.86a3		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.86a5		c9 58		cmp #$58			cmp 	#'X'
.86a7		f0 36		beq $86df			beq 	_TACOExit
.86a9		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.86ab		c9 59		cmp #$59			cmp 	#'Y'
.86ad		f0 30		beq $86df			beq 	_TACOExit
.86af						_TACOSyntax:
.86af		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.86b2						_TACOIndirect:
.86b2		20 e0 86	jsr $86e0			jsr 	CalculateOperand 			; get the operand
.86b5		b1 30		lda ($30),y			lda 	(codePtr),y
.86b7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86b9		f0 17		beq $86d2			beq 	_TACOIndX
.86bb		20 9c 93	jsr $939c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86be		b1 30		lda ($30),y			lda 	(codePtr),y
.86c0		a2 d1		ldx #$d1			ldx 	#AM_IND
.86c2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86c4		d0 19		bne $86df			bne 	_TACOExit
.86c6		c8		iny				iny
.86c7		20 ea 86	jsr $86ea			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86ca		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86cc		d0 e1		bne $86af			bne 	_TACOSyntax
.86ce		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86d0		80 0d		bra $86df			bra 	_TACOExit
.86d2						_TACOIndX:
.86d2		c8		iny				iny
.86d3		20 ea 86	jsr $86ea			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86d6		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86d8		d0 d5		bne $86af			bne 	_TACOSyntax
.86da		20 9c 93	jsr $939c			jsr 	CheckRightBracket			; check )
.86dd		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86df						_TACOExit:
.86df		60		rts				rts
.86e0						CalculateOperand:
.86e0		48		pha				pha
.86e1		da		phx				phx
.86e2		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86e4		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.86e7		fa		plx				plx
.86e8		68		pla				pla
.86e9		60		rts				rts
.86ea						TACOCheckXY:
.86ea		b1 30		lda ($30),y			lda 	(codePtr),y
.86ec		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86ee		c9 40		cmp #$40			cmp 	#$40
.86f0		d0 21		bne $8713			bne 	_TCXYFail
.86f2		b1 30		lda ($30),y			lda 	(codePtr),y
.86f4		18		clc				clc
.86f5		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86f7		85 37		sta $37				sta 	zTemp0+1
.86f9		c8		iny				iny
.86fa		b1 30		lda ($30),y			lda 	(codePtr),y
.86fc		c8		iny				iny
.86fd		85 36		sta $36				sta 	zTemp0
.86ff		5a		phy				phy 								; save position
.8700		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8702		b1 36		lda ($36),y			lda 	(zTemp0),y
.8704		d0 0c		bne $8712			bne 	_TCXYPopFail
.8706		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8708		b1 36		lda ($36),y			lda 	(zTemp0),y
.870a		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.870c		f0 08		beq $8716			beq 	_TCXYFound
.870e		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8710		f0 04		beq $8716			beq 	_TCXYFound
.8712						_TCXYPopFail:
.8712		7a		ply				ply
.8713						_TCXYFail:
.8713		a9 00		lda #$00			lda 	#0
.8715		60		rts				rts
.8716						_TCXYFound:
.8716		7a		ply				ply 								; restore position
.8717		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8719		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.871a						BackloadProgram:
.871a		20 ff 8d	jsr $8dff			jsr 	NewProgram 					; does the actual NEW.
.871d		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.871f		a9 7a		lda #$7a			lda 	#_BLLoad & $FF
.8721		20 14 94	jsr $9414			jsr 	PrintStringXA
.8724		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8726		8d a2 07	sta $07a2			sta 	BackLoadPage
.8729		a9 00		lda #$00			lda 	#(($6000) & $FF)
.872b		8d a3 07	sta $07a3			sta 	0+BackLoadPointer
.872e		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8730		8d a4 07	sta $07a4			sta 	1+BackLoadPointer
.8733		9c a5 07	stz $07a5			stz 	BackLoadLast 				; reset backload last.
.8736		9c a6 07	stz $07a6			stz 	BackLoadLast+1
.8739		a9 ff		lda #$ff			lda 	#$FF
.873b		8d fa ff	sta $fffa			sta 	$FFFA
.873e						_BPLoop:
.873e		a2 ff		ldx #$ff			ldx 	#$FF
.8740		20 af 87	jsr $87af			jsr 	BLReadByte 					; read a byte
.8743		c9 00		cmp #$00			cmp 	#0
.8745		f0 2c		beq $8773			beq 	_BPExit 					; if 0 exit
.8747		30 2a		bmi $8773			bmi 	_BPExit 					; if -ve exit
.8749						_BPCopy:
.8749		e8		inx				inx  								; copy byte into the lineBuffer
.874a		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.874d		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.8750		20 af 87	jsr $87af			jsr 	BLReadByte 					; read next byte
.8753		30 0a		bmi $875f			bmi 	_BPEndLine 					; -ve = EOL
.8755		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8757		d0 02		bne $875b			bne 	_BPNotTab
.8759		a9 20		lda #$20			lda 	#' '
.875b						_BPNotTab:
.875b		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.875d		b0 ea		bcs $8749			bcs 	_BPCopy 					; until a control character, should be 13 received.
.875f						_BPEndLine:
.875f		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.8762		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8765		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8768		f0 d4		beq $873e			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.876a		20 8f 87	jsr $878f			jsr 	BLCheckLast 				; check last backload okay.
.876d		38		sec				sec 								; append not insert
.876e		20 81 a6	jsr $a681			jsr 	MemoryInsertLine 			; append to current program
.8771		80 cb		bra $873e			bra 	_BPLoop
.8773						_BPExit:
.8773		9c fa ff	stz $fffa			stz 	$FFFA
.8776		20 41 92	jsr $9241			jsr 	ClearSystem 				; clear variables etc.
.8779		60		rts				rts
.877a						_BLLoad:
>877a		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8782		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.878f						BLCheckLast:
.878f		ad a5 07	lda $07a5			lda 	BackLoadLast 				; check last < current
.8792		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8795		ad a6 07	lda $07a6			lda 	BackLoadLast+1
.8798		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.879b		b0 0d		bcs $87aa			bcs 	_BLCheckFail
.879d		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.87a0		8d a5 07	sta $07a5			sta 	BackLoadLast
.87a3		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.87a6		8d a6 07	sta $07a6			sta 	BackLoadLast+1
.87a9		60		rts				rts
.87aa						_BLCheckFail:
.87aa		a9 02		lda #$02		lda	#2
.87ac		4c b5 93	jmp $93b5		jmp	ErrorHandler
.87af						BLReadByte:
.87af		da		phx				phx
.87b0		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.87b2		ad a2 07	lda $07a2			lda 	BackLoadPage	 			; set current page
.87b5		85 0b		sta $0b				sta 	8+3
.87b7		ad a3 07	lda $07a3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.87ba		85 36		sta $36				sta 	zTemp0
.87bc		ad a4 07	lda $07a4			lda 	BackLoadPointer+1
.87bf		85 37		sta $37				sta 	zTemp0+1
.87c1		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87c3		ee a3 07	inc $07a3			inc 	BackLoadPointer 			; bump pointer
.87c6		d0 0f		bne $87d7			bne 	_BLNoCarry
.87c8		ee a4 07	inc $07a4			inc 	BackLoadPointer+1
.87cb		10 0a		bpl $87d7			bpl 	_BLNoCarry 					; need a new page
.87cd		48		pha				pha
.87ce		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87d0		8d a4 07	sta $07a4			sta 	BackLoadPointer+1
.87d3		ee a2 07	inc $07a2			inc 	BackLoadPage 				; next page from source.
.87d6		68		pla				pla
.87d7						_BLNoCarry:
.87d7		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87d9		fa		plx				plx
.87da		c9 00		cmp #$00			cmp 	#0
.87dc		60		rts				rts
.07a2						BackLoadPage:
>07a2								.fill  	1
.07a3						BackLoadPointer:
>07a3								.fill 	2
.07a5						BackLoadLast:
>07a5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87dd						EditProgramCode:
.87dd		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.87e0		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.87e3		20 25 a7	jsr $a725			jsr 	MemorySearch
.87e6		90 05		bcc $87ed			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87e8		d0 03		bne $87ed			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87ea		20 4a a6	jsr $a64a			jsr 	MemoryDeleteLine 			; delete the line
.87ed						_EPCNoDelete:
.87ed		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87f0		c9 80		cmp #$80			cmp 	#KWC_EOL
.87f2		f0 0d		beq $8801			beq 	_EPCNoInsert
.87f4		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.87f7		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87fa		20 25 a7	jsr $a725			jsr 	MemorySearch
.87fd		18		clc				clc 								; insert at this point.
.87fe		20 81 a6	jsr $a681			jsr 	MemoryInsertLine 			; insert the line
.8801						_EPCNoInsert:
.8801		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8802						WarmStart:
.8802		a2 ff		ldx #$ff			ldx 	#$FF
.8804		9a		txs				txs
.8805		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8807		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.880a		20 c9 81	jsr $81c9			jsr 	EXTInputLine 				; get line to lineBuffer
.880d		ad 26 05	lda $0526			lda 	lineBuffer 					; first character is slash
.8810		c9 2f		cmp #$2f			cmp 	#"/"
.8812		d0 07		bne $881b			bne 	_WSNotSlash
.8814		a2 05		ldx #$05			ldx 	#(lineBuffer+1) >> 8 		; boot rest of line.
.8816		a9 27		lda #$27			lda 	#(lineBuffer+1) & $FF
.8818		4c a8 ab	jmp $aba8			jmp 	BootXA
.881b						_WSNotSlash:
.881b		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.881e		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.8821		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8824		d0 17		bne $883d			bne 	_WSEditCode 				; if so,edit code.
.8826		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8829		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.882b		85 30		sta $30				sta 	codePtr
.882d		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.882f		85 31		sta $31				sta 	codePtr+1
.8831		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8834		c9 80		cmp #$80			cmp 	#KWC_EOL
.8836		f0 ca		beq $8802			beq 	WarmStart
.8838		20 9c 8f	jsr $8f9c			jsr 	RUNCodePointerLine 			; execute that line.
.883b		80 c5		bra $8802			bra 	WarmStart
.883d						_WSEditCode:
.883d		20 dd 87	jsr $87dd			jsr 	EditProgramCode 			; edit the program code
.8840		20 41 92	jsr $9241			jsr 	ClearSystem 				; clear all variables etc.
.8843		80 bd		bra $8802			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8845						AssembleCommand:
.8845		a2 00		ldx #$00			ldx 	#0
.8847		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger 		; start address
.884a		a5 58		lda $58				lda 	NSMantissa0
.884c		8d 1a 04	sta $041a			sta 	AssemblerAddress
.884f		a5 60		lda $60				lda 	NSMantissa1
.8851		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8854		20 a4 93	jsr $93a4			jsr 	CheckComma
.8857		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; options 0-3
.885a		a5 58		lda $58				lda 	NSMantissa0
.885c		8d 1c 04	sta $041c			sta 	AssemblerControl
.885f		60		rts				rts
.8860		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8861						AssertCommand:
.8861		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8863		20 82 a2	jsr $a282			jsr 	EvaluateInteger 			; the assert test
.8866		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; exit if result is non zero.
.8869		d0 05		bne $8870			bne 	_ACExit
.886b		a9 0a		lda #$0a		lda	#10
.886d		4c b5 93	jmp $93b5		jmp	ErrorHandler
.8870						_ACExit:
.8870		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8871						CallCommand:
.8871		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8873		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.8876						_CCClear
.8876		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8877		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; these are optional sequentially.
.887a		e0 04		cpx #$04			cpx 	#4
.887c		d0 f8		bne $8876			bne 	_CCClear
.887e		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8880						_CCCParam:
.8880		b1 30		lda ($30),y			lda 	(codePtr),y
.8882		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8884		d0 09		bne $888f			bne 	_CCCRun6502
.8886		c8		iny				iny 								; skip comma
.8887		e8		inx				inx	 								; next level
.8888		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get A/X/Y
.888b		e0 03		cpx #$03			cpx 	#3
.888d		90 f1		bcc $8880			bcc 	_CCCParam 					; done all 3 ?
.888f						_CCCRun6502:
.888f		5a		phy				phy 								; save position
.8890		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8892		85 37		sta $37				sta 	zTemp0+1
.8894		a5 58		lda $58				lda 	NSMantissa0
.8896		85 36		sta $36				sta 	zTemp0
.8898		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.889a		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.889c		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.889e		20 a3 88	jsr $88a3			jsr 	_CCCZTemp0 					; call zTemp0
.88a1		7a		ply				ply 								; restore position and exit
.88a2		60		rts				rts
.88a3						_CCCZTemp0:
.88a3		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.88a6						Command_Data:
.88a6		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.88a8		a2 80		ldx #$80			ldx 	#KWC_EOL
.88aa		20 f7 92	jsr $92f7			jsr 	ScanForward
.88ad		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.88ae						DimCommand:
.88ae		b1 30		lda ($30),y			lda 	(codePtr),y
.88b0		29 c0		and #$c0			and 	#$C0
.88b2		c9 40		cmp #$40			cmp 	#$40
.88b4		d0 7a		bne $8930			bne 	_DCSyntax 				; n o, error.
.88b6		b1 30		lda ($30),y			lda 	(codePtr),y
.88b8		18		clc				clc
.88b9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88bb		85 3f		sta $3f				sta 	zaTemp+1
.88bd		c8		iny				iny
.88be		b1 30		lda ($30),y			lda 	(codePtr),y
.88c0		c8		iny				iny
.88c1		85 3e		sta $3e				sta 	zaTemp
.88c3		5a		phy				phy
.88c4		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88c6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88c8		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88ca		c9 18		cmp #$18			cmp 	#NSTProcedure
.88cc		f0 62		beq $8930			beq 	_DCSyntax
.88ce		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88d0		29 04		and #$04			and 	#NSBIsArray
.88d2		f0 64		beq $8938			beq 	_DCType
.88d4		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88d6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88d8		d0 59		bne $8933			bne 	_DCRedefine
.88da		7a		ply				ply
.88db		20 3b 89	jsr $893b			jsr 	_DCGetSize 				; get array size, check it.
.88de		5a		phy				phy
.88df		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88e1		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88e3		7a		ply				ply 							; is there a second (e.g. ,x)
.88e4		b1 30		lda ($30),y			lda 	(codePtr),y
.88e6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88e8		d0 0a		bne $88f4			bne 	_DCOneDimension
.88ea		c8		iny				iny 							; skip comma
.88eb		20 3b 89	jsr $893b			jsr 	_DCGetSize 				; get 2nd array size
.88ee		5a		phy				phy
.88ef		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88f1		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88f3		7a		ply				ply
.88f4						_DCOneDimension:
.88f4		5a		phy				phy 							; save position
.88f5		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.88f7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88f9		aa		tax				tax
.88fa		c8		iny				iny
.88fb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88fd		e8		inx				inx 							; bump them.
.88fe		1a		inc a				inc 	a
.88ff		20 c0 a2	jsr $a2c0			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8902		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8904		29 e0		and #$e0			and 	#$E0
.8906		d0 23		bne $892b			bne 	_DCSize
.8908		a0 02		ldy #$02			ldy 	#2 						; get base type
.890a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.890c		20 49 89	jsr $8949			jsr 	ScaleByBaseType 		; scale by base type
.890f		a5 36		lda $36				lda 	zTemp0
.8911		a6 37		ldx $37				ldx 	zTemp0+1
.8913		20 b7 9e	jsr $9eb7			jsr 	AllocateXABytes 		; allocate memory
.8916		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8918		91 3e		sta ($3e),y			sta 	(zaTemp),y
.891a		c8		iny				iny
.891b		8a		txa				txa
.891c		91 3e		sta ($3e),y			sta 	(zaTemp),y
.891e		7a		ply				ply 							; get position back
.891f		20 9c 93	jsr $939c			jsr 	CheckRightBracket 		; check )
.8922		b1 30		lda ($30),y			lda 	(codePtr),y
.8924		c8		iny				iny 							; consume in case
.8925		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8927		f0 85		beq $88ae			beq 	DimCommand
.8929		88		dey				dey 							; undo consume
.892a		60		rts				rts
.892b						_DCSize:
.892b		a9 16		lda #$16		lda	#22
.892d		4c b5 93	jmp $93b5		jmp	ErrorHandler
.8930						_DCSyntax:
.8930		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.8933						_DCRedefine:
.8933		a9 15		lda #$15		lda	#21
.8935		4c b5 93	jmp $93b5		jmp	ErrorHandler
.8938						_DCType:
.8938		4c 97 a4	jmp $a497			jmp 	TypeError
.893b						_DCGetSize:
.893b		a2 00		ldx #$00			ldx 	#0 						; get first index.
.893d		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 	; get array dimension
.8940		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8942		f0 e7		beq $892b			beq 	_DCSize
.8944		c9 fe		cmp #$fe			cmp 	#254
.8946		f0 e3		beq $892b			beq 	_DCSize
.8948		60		rts				rts
.8949						ScaleByBaseType:
.8949		29 10		and #$10			and 	#NSBIsString 			; is it string
.894b		d0 19		bne $8966			bne 	_SBBTString
.894d		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.894f		48		pha				pha
.8950		a5 36		lda $36				lda 	zTemp0
.8952		48		pha				pha
.8953		06 36		asl $36				asl 	zTemp0 					; x 2
.8955		26 37		rol $37				rol 	zTemp0+1
.8957		06 36		asl $36				asl 	zTemp0 					; x 4
.8959		26 37		rol $37				rol 	zTemp0+1
.895b		68		pla				pla 							; add stacked value = x 5
.895c		65 36		adc $36				adc 	zTemp0
.895e		85 36		sta $36				sta 	zTemp0
.8960		68		pla				pla
.8961		65 37		adc $37				adc 	zTemp0+1
.8963		85 37		sta $37				sta 	zTemp0+1
.8965		60		rts				rts
.8966						_SBBTString:
.8966		06 36		asl $36				asl 	zTemp0
.8968		26 37		rol $37				rol 	zTemp0+1
.896a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.896b						EndCommand:
.896b		4c 02 88	jmp $8802			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.896e						ForCommand:
.896e		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8970		20 70 b4	jsr $b470			jsr 	StackOpen
.8973		a2 00		ldx #$00			ldx 	#0
.8975		20 09 9d	jsr $9d09			jsr 	EvaluateTerm
.8978		b5 50		lda $50,x			lda 	NSStatus,x
.897a		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.897c		d0 47		bne $89c5			bne		_FCError
.897e		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8980		20 ac 93	jsr $93ac			jsr 	CheckNextA
.8983		e8		inx				inx
.8984		20 82 a2	jsr $a282			jsr 	EvaluateInteger 			; <from> in +1
.8987		b1 30		lda ($30),y			lda 	(codePtr),y
.8989		c8		iny				iny 								; consume it
.898a		48		pha				pha 								; save on stack for later
.898b		c9 c2		cmp #$c2			cmp 	#KWD_DOWNTO
.898d		f0 04		beq $8993			beq 	_FCNoSyntax
.898f		c9 dc		cmp #$dc			cmp 	#KWD_TO
.8991		d0 35		bne $89c8			bne 	_FCSyntaxError
.8993						_FCNoSyntax:
.8993		e8		inx				inx
.8994		20 82 a2	jsr $a282			jsr 	EvaluateInteger
.8997		20 b5 b4	jsr $b4b5			jsr 	STKSaveCodePosition 		; save loop back position
.899a		68		pla				pla 								; restore DOWNTO or TO
.899b		5a		phy				phy 								; save Y on the stack
.899c		49 c2		eor #$c2			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.899e		f0 02		beq $89a2			beq 	_FCNotDownTo
.89a0		a9 02		lda #$02			lda 	#2
.89a2						_FCNotDownTo:
.89a2		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.89a3		a0 10		ldy #$10			ldy 	#16
.89a5		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89a7		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.89a9		a5 58		lda $58				lda 	NSMantissa0
.89ab		91 34		sta ($34),y			sta 	(basicStack),y
.89ad		a5 60		lda $60				lda 	NSMantissa1
.89af		c8		iny				iny
.89b0		91 34		sta ($34),y			sta 	(basicStack),y
.89b2		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89b4		a2 01		ldx #$01			ldx 	#1
.89b6		20 cb 89	jsr $89cb			jsr 	FCIntegerToStack
.89b9		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89bb		a2 02		ldx #$02			ldx 	#2
.89bd		20 cb 89	jsr $89cb			jsr 	FCIntegerToStack
.89c0		20 e6 89	jsr $89e6			jsr 	CopyIndexToReference
.89c3		7a		ply				ply 								; restore position
.89c4		60		rts				rts
.89c5						_FCError:
.89c5		4c 97 a4	jmp $a497			jmp 	TypeError
.89c8						_FCSyntaxError:
.89c8		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.89cb						FCIntegerToStack:
.89cb		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89cd		10 03		bpl $89d2			bpl	 	_FCNotNegative
.89cf		20 de a2	jsr $a2de			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89d2						_FCNotNegative:
.89d2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89d4		91 34		sta ($34),y			sta 	(basicStack),y
.89d6		c8		iny				iny
.89d7		b5 60		lda $60,x			lda 	NSMantissa1,x
.89d9		91 34		sta ($34),y			sta 	(basicStack),y
.89db		c8		iny				iny
.89dc		b5 68		lda $68,x			lda 	NSMantissa2,x
.89de		91 34		sta ($34),y			sta 	(basicStack),y
.89e0		c8		iny				iny
.89e1		b5 70		lda $70,x			lda 	NSMantissa3,x
.89e3		91 34		sta ($34),y			sta 	(basicStack),y
.89e5		60		rts				rts
.89e6						CopyIndexToReference:
.89e6		5a		phy				phy
.89e7		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89e9		38		sec				sec 								; (because we copy from offset 8)
.89ea		b1 34		lda ($34),y			lda 	(basicStack),y
.89ec		e9 08		sbc #$08			sbc 	#8
.89ee		85 36		sta $36				sta 	zTemp0
.89f0		c8		iny				iny
.89f1		b1 34		lda ($34),y			lda 	(basicStack),y
.89f3		e9 00		sbc #$00			sbc 	#0
.89f5		85 37		sta $37				sta 	zTemp0+1
.89f7		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89f9		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89fb		b1 34		lda ($34),y			lda 	(basicStack),y
.89fd		0a		asl a				asl 	a 							; into carry
.89fe		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8a00		90 14		bcc $8a16			bcc 	_CITRNormal
.8a02		38		sec				sec
.8a03						_CITRNegative:
.8a03		a9 00		lda #$00			lda 	#0
.8a05		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a07		91 36		sta ($36),y			sta 	(zTemp0),y
.8a09		c8		iny				iny
.8a0a		ca		dex				dex
.8a0b		d0 f6		bne $8a03			bne 	_CITRNegative
.8a0d		88		dey				dey 								; look at MSB of mantissa
.8a0e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a10		09 80		ora #$80			ora 	#$80
.8a12		91 36		sta ($36),y			sta 	(zTemp0),y
.8a14		7a		ply				ply
.8a15		60		rts				rts
.8a16						_CITRNormal:
.8a16		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a18		91 36		sta ($36),y			sta 	(zTemp0),y
.8a1a		c8		iny				iny
.8a1b		ca		dex				dex
.8a1c		d0 f8		bne $8a16			bne 	_CITRNormal
.8a1e		7a		ply				ply 								; and exit.
.8a1f		60		rts				rts
.8a20						NextCommand:
.8a20		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a22		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a24		20 9d b4	jsr $b49d			jsr 	StackCheckFrame
.8a27		5a		phy				phy
.8a28		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a2a		b1 34		lda ($34),y			lda 	(basicStack),y
.8a2c		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a2e		30 02		bmi $8a32			bmi 	_NCStepNeg
.8a30		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a32						_NCStepNeg:
.8a32		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a34		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a36		18		clc				clc
.8a37						_NCBump:
.8a37		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a39		91 34		sta ($34),y			sta 	(basicStack),y
.8a3b		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a3d		c8		iny				iny 								; next byte
.8a3e		ca		dex				dex 								; do four times
.8a3f		d0 f6		bne $8a37			bne 	_NCBump
.8a41		20 e6 89	jsr $89e6			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a44		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a46		b1 34		lda ($34),y			lda 	(basicStack),y
.8a48		0a		asl a				asl 	a 							; sign bit to carry
.8a49		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a4b		85 38		sta $38				sta 	zTemp1
.8a4d		90 02		bcc $8a51			bcc 	_NCCompRev 					; use if step is +ve
.8a4f		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a51						_NCCompRev:
.8a51		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a53		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a55		85 39		sta $39				sta 	zTemp1+1
.8a57		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a59		38		sec				sec
.8a5a						_NCCompare:
.8a5a		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a5c		b1 34		lda ($34),y			lda 	(basicStack),y
.8a5e		a4 39		ldy $39				ldy 	zTemp1+1
.8a60		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a62		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a64		e6 39		inc $39				inc 	zTemp1+1
.8a66		ca		dex				dex 								; do it 4 times.
.8a67		d0 f1		bne $8a5a			bne 	_NCCompare
.8a69		50 02		bvc $8a6d			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a6b		49 80		eor #$80			eor 	#$80
.8a6d						_NCNoOverflow:
.8a6d		7a		ply				ply 								; restore Y position
.8a6e		0a		asl a				asl 	a 							; is bit 7 set.
.8a6f		90 04		bcc $8a75			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a71		20 8f b4	jsr $b48f			jsr 	StackClose 					; exit the loop
.8a74		60		rts				rts
.8a75						_NCLoopBack:
.8a75		20 c6 b4	jsr $b4c6			jsr 	STKLoadCodePosition 		; loop back
.8a78		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a79						Command_GOSUB:
.8a79		a2 00		ldx #$00			ldx 	#0
.8a7b		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a7e		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a80		20 70 b4	jsr $b470			jsr 	StackOpen 					; create frame
.8a83		20 b5 b4	jsr $b4b5			jsr 	STKSaveCodePosition 		; save current position
.8a86		4c 9c 8a	jmp $8a9c			jmp 	GotoStackX
.8a89						Command_RETURN:
.8a89		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a8b		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a8d		20 9d b4	jsr $b49d			jsr 	StackCheckFrame
.8a90		20 c6 b4	jsr $b4c6			jsr 	STKLoadCodePosition 		; restore code position
.8a93		20 8f b4	jsr $b48f			jsr 	StackClose
.8a96		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a97						GotoCommand:
.8a97		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a99		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.8a9c						GotoStackX:
.8a9c		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a9e		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a9f		b5 58		lda $58,x			lda 	NSMantissa0,x
.8aa1		fa		plx				plx
.8aa2		20 25 a7	jsr $a725			jsr 	MemorySearch 				; transfer to line number AX.
.8aa5		90 05		bcc $8aac			bcc 	_GotoError 					; not found, off end.
.8aa7		d0 03		bne $8aac			bne 	_GotoError 					; not found exactly
.8aa9		4c 95 8f	jmp $8f95			jmp 	RunNewLine 					; and go straight to new line code.
.8aac						_GotoError:
.8aac		a9 0d		lda #$0d		lda	#13
.8aae		4c b5 93	jmp $93b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ab1						IfCommand:
.8ab1		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8ab3		20 63 a2	jsr $a263			jsr 	EvaluateNumber
.8ab6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ab8		c9 b6		cmp #$b6			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8aba		d0 0a		bne $8ac6			bne 	_IfStructured 				; we still support it.
.8abc		c8		iny				iny 								; consume THEN
.8abd		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; is it zero
.8ac0		f0 01		beq $8ac3			beq 	_IfFail 					; if fail, go to next line
.8ac2		60		rts				rts 								; if THEN just continue
.8ac3						_IfFail:
.8ac3		4c 70 8f	jmp $8f70			jmp 	EOLCommand
.8ac6						_IfStructured:
.8ac6		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; is it zero
.8ac9		d0 07		bne $8ad2			bne 	_IfExit 					; if not, then continue normally.
.8acb		a9 c3		lda #$c3			lda 	#KWD_ELSE 					; look for else/endif
.8acd		a2 b3		ldx #$b3			ldx 	#KWD_ENDIF
.8acf		20 f7 92	jsr $92f7			jsr 	ScanForward 				; and run from there
.8ad2						_IfExit:
.8ad2		60		rts				rts
.8ad3						ElseCode:
.8ad3		a9 b3		lda #$b3			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ad5		aa		tax				tax 								; so just go to the structure exit
.8ad6		20 f7 92	jsr $92f7			jsr 	ScanForward
.8ad9		60		rts				rts
.8ada						EndIf:
.8ada		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8adb						Command_Input:
.8adb		9c 24 04	stz $0424			stz 	isPrintFlag
.8ade		80 0c		bra $8aec			bra 	Command_IP_Main
.8ae0						Command_CPrint:
.8ae0		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8ae2		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ae5		80 05		bra $8aec			bra 	Command_IP_Main
.8ae7						Command_Print:
.8ae7		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8ae9		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8aec						Command_IP_Main:
.8aec		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8aed						_CPLoop:
.8aed		08		php				php 								; save last action flag
.8aee		b1 30		lda ($30),y			lda 	(codePtr),y
.8af0		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8af2		f0 54		beq $8b48			beq 	_CPExit
.8af4		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8af6		f0 50		beq $8b48			beq 	_CPExit
.8af8		68		pla				pla 								; throw last action flag
.8af9		b1 30		lda ($30),y			lda 	(codePtr),y
.8afb		c8		iny				iny
.8afc		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8afe		f0 45		beq $8b45			beq 	_CPContinueWithSameLine
.8b00		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8b02		f0 3c		beq $8b40			beq 	_CPTab
.8b04		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8b06		f0 34		beq $8b3c			beq 	_CPNewLine
.8b08		88		dey				dey 								; undo the get.
.8b09		20 bd 98	jsr $98bd			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8b0c		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8b0e		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b10		f0 0d		beq $8b1f			beq 	_CPIsValue 					; no, display it.
.8b12		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8b15		d0 05		bne $8b1c			bne 	_CPIsPrint 					; otherwise display.
.8b17		20 51 8b	jsr $8b51			jsr 	CIInputValue 				; input a value to the reference
.8b1a		80 20		bra $8b3c			bra 	_CPNewLine
.8b1c						_CPIsPrint:
.8b1c		20 82 9b	jsr $9b82			jsr 	Dereference 				; dereference if required.
.8b1f						_CPIsValue:
.8b1f		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b21		29 10		and #$10			and 	#NSBIsString
.8b23		f0 09		beq $8b2e			beq 	_CPNumber
.8b25		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b27		a5 58		lda $58				lda 	NSMantissa0
.8b29		20 b4 8b	jsr $8bb4			jsr 	CPPrintStringXA
.8b2c		80 be		bra $8aec			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b2e						_CPNumber:
.8b2e		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b30		20 4a a1	jsr $a14a			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b33		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b35		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b37		20 b4 8b	jsr $8bb4			jsr 	CPPrintStringXA 			; print it.
.8b3a		80 b0		bra $8aec			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b3c						_CPNewLine:
.8b3c		a9 0d		lda #$0d			lda 	#13
.8b3e		80 02		bra $8b42			bra 	_CPPrintCharDirect
.8b40						_CPTab:
.8b40		a9 09		lda #$09			lda 	#9 							; print TAB
.8b42						_CPPrintCharDirect:
.8b42		20 cf 8b	jsr $8bcf			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b45						_CPContinueWithSameLine:
.8b45		38		sec				sec 								; loop round with carry set, which
.8b46		80 a5		bra $8aed			bra 	_CPLoop 					; will inhibit final CR
.8b48						_CPExit:
.8b48		28		plp				plp 								; get last action flag
.8b49		b0 05		bcs $8b50			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b4b		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b4d		20 cf 8b	jsr $8bcf			jsr 	CPPVControl
.8b50						_CPExit2:
.8b50		60		rts				rts
.8b51						CIInputValue:
.8b51		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b53						_CIInputLine:
.8b53		20 d2 8b	jsr $8bd2			jsr 	CPInputVector 				; get key
.8b56		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b58		f0 1f		beq $8b79			beq 	_CIHaveValue
.8b5a		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b5c		f0 11		beq $8b6f			beq 	_CIBackspace
.8b5e		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b60		90 f1		bcc $8b53			bcc 	_CIInputLine
.8b62		e0 50		cpx #$50			cpx 	#80 						; max length
.8b64		b0 ed		bcs $8b53			bcs 	_CIInputLine
.8b66		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b69		e8		inx				inx
.8b6a		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b6d		80 e4		bra $8b53			bra 	_CIInputLine
.8b6f						_CIBackspace:
.8b6f		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b71		f0 e0		beq $8b53			beq 	_CIInputLine
.8b73		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b76		ca		dex				dex
.8b77		80 da		bra $8b53			bra 	_CIInputLine
.8b79						_CIHaveValue:
.8b79		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b7c		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b7e		29 10		and #$10			and 	#NSBIsString
.8b80		f0 17		beq $8b99			beq 	_CIAssignNumber 			; assign a number
.8b82		a2 01		ldx #$01			ldx 	#1
.8b84		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b86		95 58		sta $58,x			sta 	NSMantissa0,x
.8b88		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b8a		95 60		sta $60,x			sta 	NSMantissa1,x
.8b8c		74 68		stz $68,x			stz 	NSMantissa2,x
.8b8e		74 70		stz $70,x			stz 	NSMantissa3,x
.8b90		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b92		95 50		sta $50,x			sta  	NSStatus,x
.8b94		ca		dex				dex 								; X = 0
.8b95		20 0e 8c	jsr $8c0e			jsr 	AssignVariable
.8b98		60		rts				rts
.8b99						_CIAssignNumber:
.8b99		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b9b		85 36		sta $36				sta 	zTemp0
.8b9d		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b9f		85 37		sta $37				sta 	zTemp0+1
.8ba1		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8ba3		20 2a a0	jsr $a02a			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8ba6		90 07		bcc $8baf			bcc 	_CIIsOkay
.8ba8		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8baa		20 c7 8b	jsr $8bc7			jsr 	CPPrintVector
.8bad		80 a2		bra $8b51			bra 	CIInputValue
.8baf						_CIIsOkay:
.8baf		ca		dex				dex 								; X = 0
.8bb0		20 0e 8c	jsr $8c0e			jsr 	AssignVariable
.8bb3		60		rts				rts
.8bb4						CPPrintStringXA:
.8bb4		5a		phy				phy
.8bb5		86 37		stx $37				stx 	zTemp0+1
.8bb7		85 36		sta $36				sta 	zTemp0
.8bb9		a0 00		ldy #$00			ldy 	#0
.8bbb						_PSXALoop:
.8bbb		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bbd		f0 06		beq $8bc5			beq 	_PSXAExit
.8bbf		20 c7 8b	jsr $8bc7			jsr 	CPPrintVector
.8bc2		c8		iny				iny
.8bc3		80 f6		bra $8bbb			bra 	_PSXALoop
.8bc5						_PSXAExit:
.8bc5		7a		ply				ply
.8bc6		60		rts				rts
.8bc7						CPPrintVector:
.8bc7		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8bca		30 03		bmi $8bcf			bmi 	CPPVControl
.8bcc		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8bcf						CPPVControl:
.8bcf		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bd2						CPInputVector:
.8bd2		4c c1 81	jmp $81c1			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bd5						LetCommand:
.8bd5		a2 00		ldx #$00			ldx 	#0
.8bd7		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd9		c9 b9		cmp #$b9			cmp 	#KWD_AT
.8bdb		d0 14		bne $8bf1			bne 	_LCStandard
.8bdd		c8		iny				iny 								; skip equal
.8bde		20 09 9d	jsr $9d09			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8be1		20 82 9b	jsr $9b82			jsr 	Dereference 				; dereference it to a value
.8be4		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8be6		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8be8		95 50		sta $50,x			sta 	NSStatus,x
.8bea		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bec		d0 0f		bne $8bfd			bne 	_LCMain
.8bee		4c 97 a4	jmp $a497			jmp 	TypeError 					; was a reference before.
.8bf1						_LCStandard:
.8bf1		ad a7 98	lda $98a7			lda 	PrecedenceLevel+"*"			; precedence > this
.8bf4		20 c1 98	jsr $98c1			jsr 	EvaluateExpressionAtPrecedence
.8bf7		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bf9		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bfb		f0 0e		beq $8c0b			beq 	_LetGoProc 					; it's a procedure call.
.8bfd						_LCMain:
.8bfd		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bff		20 ac 93	jsr $93ac			jsr 	CheckNextA
.8c02		e8		inx				inx 								; RHS
.8c03		20 5a a2	jsr $a25a			jsr 	EvaluateValue
.8c06		ca		dex				dex
.8c07		20 0e 8c	jsr $8c0e			jsr 	AssignVariable
.8c0a		60		rts				rts
.8c0b						_LetGoProc:
.8c0b		4c 46 8e	jmp $8e46			jmp 	CallProcedure
.8c0e						AssignVariable:
.8c0e		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c10		48		pha				pha 								; save a copy
.8c11		55 51		eor $51,x			eor 	NSStatus+1,x
.8c13		29 10		and #$10			and 	#NSBIsString
.8c15		d0 0b		bne $8c22			bne 	_ASError
.8c17		68		pla				pla 								; get back
.8c18		29 10		and #$10			and 	#NSBIsString 				; check type
.8c1a		d0 03		bne $8c1f			bne 	_ASString
.8c1c		4c c0 9a	jmp $9ac0			jmp 	AssignNumber
.8c1f						_ASString:
.8c1f		4c 1e 9b	jmp $9b1e			jmp 	AssignString
.8c22						_ASError:
.8c22		4c 97 a4	jmp $a497			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c25						Command_List:
.8c25		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c28		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c2a		20 6b 80	jsr $806b			jsr 	SNDCommand
.8c2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2f		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c31		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c33		f0 72		beq $8ca7			beq 	_CLListProcedure
.8c35		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c37		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c39		a9 ff		lda #$ff			lda 	#$FF
.8c3b		85 5f		sta $5f				sta 	NSMantissa0+7
.8c3d		85 67		sta $67				sta 	NSMantissa1+7
.8c3f		b1 30		lda ($30),y			lda 	(codePtr),y
.8c41		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c43		f0 1a		beq $8c5f			beq 	_CLSecond
.8c45		20 2d 8d	jsr $8d2d			jsr 	CLIsDigit 					; if not digit, list all
.8c48		b0 20		bcs $8c6a			bcs 	_CLStart
.8c4a		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c4c		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.8c4f		b1 30		lda ($30),y			lda 	(codePtr),y
.8c51		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c53		f0 0a		beq $8c5f			beq 	_CLSecond 					; if so go get it
.8c55		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c57		85 5f		sta $5f				sta 	NSMantissa0+7
.8c59		a5 64		lda $64				lda 	NSMantissa1+4
.8c5b		85 67		sta $67				sta 	NSMantissa1+7
.8c5d		80 0b		bra $8c6a			bra 	_CLStart
.8c5f						_CLSecond:
.8c5f		c8		iny				iny 								; consume comma
.8c60		20 2d 8d	jsr $8d2d			jsr 	CLIsDigit 					; digit found
.8c63		b0 05		bcs $8c6a			bcs 	_CLStart 					; if not, continue listing
.8c65		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c67		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.8c6a						_CLStart
.8c6a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c6c		85 30		sta $30				sta 	codePtr
.8c6e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c70		85 31		sta $31				sta 	codePtr+1
.8c72						_CLLoop:
.8c72		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c74		f0 03		beq $8c79			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c76		20 41 81	jsr $8141			jsr 	ProcessEvents
.8c79						_NoEvents:
.8c79		d0 27		bne $8ca2			bne 	_CLBreak
.8c7b		b2 30		lda ($30)			lda 	(codePtr)
.8c7d		f0 20		beq $8c9f			beq 	_CLExit
.8c7f		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c81		20 1c 8d	jsr $8d1c			jsr 	CLCompareLineNo
.8c84		90 0c		bcc $8c92			bcc 	_CLNext
.8c86		a2 07		ldx #$07			ldx 	#7
.8c88		20 1c 8d	jsr $8d1c			jsr 	CLCompareLineNo
.8c8b		f0 02		beq $8c8f			beq 	_CLDoThisOne
.8c8d		b0 03		bcs $8c92			bcs 	_CLNext
.8c8f						_CLDoThisOne:
.8c8f		20 09 8d	jsr $8d09			jsr 	CLListOneLine 				; routine to list the current line.
.8c92						_CLNext:
.8c92		18		clc				clc
.8c93		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c95		65 30		adc $30				adc 	codePtr
.8c97		85 30		sta $30				sta 	codePtr
.8c99		90 02		bcc $8c9d			bcc 	_CREExit
.8c9b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c9d						_CREExit:
.8c9d		80 d3		bra $8c72			bra 	_CLLoop
.8c9f						_CLExit:
.8c9f		4c 02 88	jmp $8802			jmp 	WarmStart
.8ca2						_CLBreak:
.8ca2		a9 01		lda #$01		lda	#1
.8ca4		4c b5 93	jmp $93b5		jmp	ErrorHandler
.8ca7						_CLListProcedure:
.8ca7		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca9		85 38		sta $38				sta 	zTemp1
.8cab		c8		iny				iny
.8cac		b1 30		lda ($30),y			lda 	(codePtr),y
.8cae		85 39		sta $39				sta 	zTemp1+1
.8cb0		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cb2		85 30		sta $30				sta 	codePtr
.8cb4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cb6		85 31		sta $31				sta 	codePtr+1
.8cb8						_CLLPSearch:
.8cb8		b2 30		lda ($30)			lda 	(codePtr)
.8cba		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cbc		f0 e1		beq $8c9f			beq 	_CLExit
.8cbe		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8cc0		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc2		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.8cc4		d0 0e		bne $8cd4			bne 	_CLLPNext
.8cc6		c8		iny				iny 								; check if PROC this.
.8cc7		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc9		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8ccb		d0 07		bne $8cd4			bne 	_CLLPNext
.8ccd		c8		iny				iny
.8cce		b1 30		lda ($30),y			lda 	(codePtr),y
.8cd0		c5 39		cmp $39				cmp 	zTemp1+1
.8cd2		f0 0d		beq $8ce1			beq 	_CLLPFound
.8cd4						_CLLPNext:
.8cd4		18		clc				clc
.8cd5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cd7		65 30		adc $30				adc 	codePtr
.8cd9		85 30		sta $30				sta 	codePtr
.8cdb		90 02		bcc $8cdf			bcc 	_CREExit
.8cdd		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cdf						_CREExit:
.8cdf		80 d7		bra $8cb8			bra 	_CLLPSearch
.8ce1						_CLLPFound:
.8ce1		b2 30		lda ($30)			lda 	(codePtr)
.8ce3		f0 ba		beq $8c9f			beq 	_CLExit
.8ce5		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8ce7		f0 03		beq $8cec			beq 	_NoEvents					; if zero, skip with Z flag set.
.8ce9		20 41 81	jsr $8141			jsr 	ProcessEvents
.8cec						_NoEvents:
.8cec		d0 b4		bne $8ca2			bne 	_CLBreak
.8cee		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cf0		b1 30		lda ($30),y			lda 	(codePtr),y
.8cf2		48		pha				pha
.8cf3		20 09 8d	jsr $8d09			jsr 	CLListOneLine 				; list line and go forward
.8cf6		18		clc				clc
.8cf7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cf9		65 30		adc $30				adc 	codePtr
.8cfb		85 30		sta $30				sta 	codePtr
.8cfd		90 02		bcc $8d01			bcc 	_CREExit
.8cff		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d01						_CREExit:
.8d01		68		pla				pla 								; reached ENDPROC ?
.8d02		c9 b4		cmp #$b4			cmp 	#KWD_ENDPROC
.8d04		d0 db		bne $8ce1			bne 	_CLLPFound
.8d06		4c 02 88	jmp $8802			jmp 	WarmStart
.8d09						CLListOneLine:
.8d09		20 5a 93	jsr $935a			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8d0c		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8d0f		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d11		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8d13		20 14 94	jsr $9414			jsr 	PrintStringXA
.8d16		a9 0d		lda #$0d			lda 	#13 						; new line
.8d18		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8d1b		60		rts				rts
.8d1c						CLCompareLineNo:
.8d1c		38		sec				sec
.8d1d		a0 01		ldy #$01			ldy 	#1
.8d1f		b1 30		lda ($30),y			lda 	(codePtr),y
.8d21		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d23		85 36		sta $36				sta 	zTemp0
.8d25		c8		iny				iny
.8d26		b1 30		lda ($30),y			lda 	(codePtr),y
.8d28		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d2a		05 36		ora $36				ora 	zTemp0
.8d2c		60		rts				rts
.8d2d						CLIsDigit:
.8d2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8d2f		c9 30		cmp #$30			cmp 	#"0"
.8d31		90 03		bcc $8d36			bcc	 	_CLIDExitFalse
.8d33		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d35		60		rts				rts
.8d36						_CLIDExitFalse:
.8d36		38		sec				sec
.8d37		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d38						Command_LOCAL:
.8d38		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d3a		20 46 8d	jsr $8d46			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d3d		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3f		c8		iny				iny
.8d40		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d42		f0 f4		beq $8d38			beq 	Command_LOCAL 				; if so, localise another variable.
.8d44		88		dey				dey 								; unpick pre-get
.8d45		60		rts				rts
.8d46						LocaliseNextTerm:
.8d46		20 09 9d	jsr $9d09			jsr 	EvaluateTerm 				; evaluate the term
.8d49		b5 50		lda $50,x			lda 	NSStatus,x
.8d4b		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d4d		f0 5c		beq $8dab			beq		_LNTError
.8d4f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d51		85 36		sta $36				sta 	zTemp0
.8d53		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d55		85 37		sta $37				sta  	zTemp0+1
.8d57		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d59		29 10		and #$10			and 	#NSBIsString
.8d5b		d0 1e		bne $8d7b			bne 	_LNTPushString
.8d5d		5a		phy				phy
.8d5e		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d60						_LNTPushNumLoop:
.8d60		b1 36		lda ($36),y			lda		(zTemp0),y
.8d62		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8d65		c8		iny				iny
.8d66		c0 05		cpy #$05			cpy 	#5
.8d68		d0 f6		bne $8d60			bne 	_LNTPushNumLoop
.8d6a		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d6c		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8d6f		a5 37		lda $37				lda 	zTemp0+1
.8d71		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8d74		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d76		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8d79		7a		ply				ply
.8d7a		60		rts				rts
.8d7b						_LNTPushString:
.8d7b		5a		phy				phy
.8d7c		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d7e		85 38		sta $38				sta 	zTemp1
.8d80		a0 01		ldy #$01			ldy 	#1
.8d82		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d84		85 39		sta $39				sta 	zTemp1+1
.8d86		a0 00		ldy #$00			ldy 	#0 							; output string
.8d88		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d8a		f0 0a		beq $8d96			beq 	_LNTStringOut
.8d8c						_LNTPushStrLoop:
.8d8c		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d8e		f0 06		beq $8d96			beq 	_LNTStringOut
.8d90		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8d93		c8		iny				iny
.8d94		80 f6		bra $8d8c			bra 	_LNTPushStrLoop
.8d96						_LNTStringOut:
.8d96		98		tya				tya									; output length (chars written).
.8d97		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8d9a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d9c		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8d9f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8da1		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8da4		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8da6		20 4f b4	jsr $b44f			jsr 	StackPushByte
.8da9		7a		ply				ply
.8daa		60		rts				rts
.8dab						_LNTError:
.8dab		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.8dae						LocalPopValue:
.8dae		20 67 b4	jsr $b467			jsr 	StackPopByte
.8db1		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8db3		d0 17		bne $8dcc			bne 	_LPVString
.8db5		20 67 b4	jsr $b467			jsr 	StackPopByte 				; address
.8db8		85 37		sta $37				sta 	zTemp0+1
.8dba		20 67 b4	jsr $b467			jsr 	StackPopByte
.8dbd		85 36		sta $36				sta 	zTemp0
.8dbf		5a		phy				phy
.8dc0		a0 04		ldy #$04			ldy 	#4 							; copy back
.8dc2						_LPVNumberCopy:
.8dc2		20 67 b4	jsr $b467			jsr 	StackPopByte
.8dc5		91 36		sta ($36),y			sta 	(zTemp0),y
.8dc7		88		dey				dey
.8dc8		10 f8		bpl $8dc2			bpl 	_LPVNumberCopy
.8dca		7a		ply				ply 								; and complete
.8dcb		60		rts				rts
.8dcc						_LPVString:
.8dcc		20 67 b4	jsr $b467			jsr 	StackPopByte 				; address of record copied to zTemp0
.8dcf		85 37		sta $37				sta 	zTemp0+1
.8dd1		20 67 b4	jsr $b467			jsr 	StackPopByte
.8dd4		85 36		sta $36				sta 	zTemp0
.8dd6		5a		phy				phy
.8dd7		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8dd9		85 38		sta $38				sta 	zTemp1
.8ddb		a0 01		ldy #$01			ldy 	#1
.8ddd		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ddf		85 39		sta $39				sta 	zTemp1+1
.8de1		20 67 b4	jsr $b467			jsr 	StackPopByte 				; # chars to get => y
.8de4		a8		tay				tay
.8de5		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8de7		f0 0e		beq $8df7			beq 	_LPVStringCopied
.8de9		a9 00		lda #$00			lda 	#0 							; NULL on end
.8deb		91 38		sta ($38),y			sta 	(zTemp1),y
.8ded						_LPVStringCopy:
.8ded		88		dey				dey
.8dee		30 07		bmi $8df7			bmi 	_LPVStringCopied
.8df0		20 67 b4	jsr $b467			jsr 	StackPopByte
.8df3		91 38		sta ($38),y			sta 	(zTemp1),y
.8df5		80 f6		bra $8ded			bra 	_LPVStringCopy
.8df7						_LPVStringCopied:
.8df7		fa		plx				plx
.8df8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8df9						NewCommand:
.8df9		20 ff 8d	jsr $8dff			jsr 	NewProgram 					; does the actual NEW.
.8dfc		4c 02 88	jmp $8802			jmp 	WarmStart 					; and warm starts straight away.
.8dff						NewProgram:
.8dff		20 07 a7	jsr $a707			jsr 	MemoryNew
.8e02		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e05		20 41 92	jsr $9241			jsr 	ClearSystem					; clear everything.
.8e08		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8e09						PokeBCommand:
.8e09		a9 01		lda #$01			lda 	#1
.8e0b		80 0c		bra $8e19			bra 	PokeCommand
.8e0d						PokeWCommand:
.8e0d		a9 02		lda #$02			lda 	#2
.8e0f		80 08		bra $8e19			bra 	PokeCommand
.8e11						PokeLCommand:
.8e11		a9 03		lda #$03			lda 	#3
.8e13		80 04		bra $8e19			bra 	PokeCommand
.8e15						PokeDCommand:
.8e15		a9 04		lda #$04			lda 	#4
.8e17		80 00		bra $8e19			bra 	PokeCommand
.8e19						PokeCommand:
.8e19		48		pha				pha 								; save count on stack
.8e1a		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e1c		20 95 a2	jsr $a295			jsr		Evaluate16BitInteger 		; address
.8e1f		20 a4 93	jsr $93a4			jsr 	CheckComma
.8e22		e8		inx				inx
.8e23		20 82 a2	jsr $a282			jsr		EvaluateInteger 			; data
.8e26		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8e28		85 36		sta $36				sta 	zTemp0
.8e2a		a5 60		lda $60				lda 	NSMantissa1
.8e2c		85 37		sta $37				sta 	zTemp0+1
.8e2e		68		pla				pla 								; count -> zTemp1
.8e2f		85 38		sta $38				sta 	zTemp1
.8e31		5a		phy				phy 								; save Y position.
.8e32		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e34		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e36						_PCLoop:
.8e36		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e38		91 36		sta ($36),y			sta 	(zTemp0),y
.8e3a		c8		iny				iny 								; next byte to write
.8e3b		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e3c		18		clc				clc
.8e3d		69 08		adc #$08			adc 	#MathStackSize
.8e3f		aa		tax				tax
.8e40		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e42		d0 f2		bne $8e36			bne 	_PCLoop
.8e44		7a		ply				ply 								; restore position.
.8e45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e46						CallProcedure:
.8e46		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e48		b1 30		lda ($30),y			lda 	(codePtr),y
.8e4a		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e4c		f0 0c		beq $8e5a			beq 	_CPEndParam
.8e4e						_CPParamLoop:
.8e4e		20 5a a2	jsr $a25a			jsr 	EvaluateValue 				; get parameter onto stack
.8e51		e8		inx				inx 								; bump next stack
.8e52		b1 30		lda ($30),y			lda 	(codePtr),y
.8e54		c8		iny				iny
.8e55		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e57		f0 f5		beq $8e4e			beq 	_CPParamLoop
.8e59		88		dey				dey 								; unpick.
.8e5a						_CPEndParam:
.8e5a		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8e5d		c8		iny				iny									; skip right bracket
.8e5e		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e60		20 70 b4	jsr $b470			jsr 	StackOpen
.8e63		20 b5 b4	jsr $b4b5			jsr 	STKSaveCodePosition 		; save loop position
.8e66		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e68		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e6a		a5 60		lda $60				lda 	NSMantissa1
.8e6c		85 37		sta $37				sta 	zTemp0+1
.8e6e		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e70		b2 36		lda ($36)			lda 	(zTemp0)
.8e72		85 30		sta $30				sta 	safePtr
.8e74		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e76		85 31		sta $31				sta 	safePtr+1
.8e78		c8		iny				iny
.8e79		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e7b		85 32		sta $32				sta 	safePtr+2
.8e7d		c8		iny				iny
.8e7e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e80		85 33		sta $33				sta 	safePtr+3
.8e82		c8		iny				iny 								; get Y offset -> Y
.8e83		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e85		a8		tay				tay
.8e86		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e88		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.8e8b		f0 13		beq $8ea0			beq 	_ParamExit 					; if so, exit.
.8e8d						_ParamExtract:
.8e8d		ca		dex				dex 								; put a local term on the level before
.8e8e		20 46 8d	jsr $8d46			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e91		20 0e 8c	jsr $8c0e			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e94		e8		inx				inx 								; advance to next parameter to do.
.8e95		e8		inx				inx
.8e96		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.8e99		f0 05		beq $8ea0			beq 	_ParamExit
.8e9b		20 a4 93	jsr $93a4			jsr 	CheckComma 					; comma seperating parameters
.8e9e		80 ed		bra $8e8d			bra 	_ParamExtract
.8ea0						_ParamExit:
.8ea0		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; check )
.8ea3		60		rts				rts 								; and continue from here
.8ea4						Command_ENDPROC:
.8ea4		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8ea6		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8ea8		20 9d b4	jsr $b49d			jsr 	StackCheckFrame
.8eab		20 c6 b4	jsr $b4c6			jsr 	STKLoadCodePosition 		; restore code position
.8eae		20 8f b4	jsr $b48f			jsr 	StackClose
.8eb1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8eb2						Command_Read:
.8eb2		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8eb4		20 09 9d	jsr $9d09			jsr 	EvaluateTerm
.8eb7		b5 50		lda $50,x			lda 	NSStatus,x
.8eb9		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ebb		f0 4f		beq $8f0c			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8ebd		20 55 8f	jsr $8f55			jsr 	SwapDataCodePtrs 			; swap code and data
.8ec0		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ec3		d0 25		bne $8eea			bne 	_CRContinueData  			; forward for the next one.
.8ec5		b2 30		lda ($30)			lda 	(codePtr)
.8ec7		f0 1c		beq $8ee5			beq 	_CRNoData
.8ec9						_CRKeepSearching:
.8ec9		a9 c0		lda #$c0			lda 	#KWD_DATA 					; scan for instruction
.8ecb		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ecd		20 f7 92	jsr $92f7			jsr 	ScanForward
.8ed0		c9 c0		cmp #$c0			cmp 	#KWD_DATA 					; found data ?
.8ed2		f0 16		beq $8eea			beq 	_CRHaveData 				; found it
.8ed4		18		clc				clc
.8ed5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ed7		65 30		adc $30				adc 	codePtr
.8ed9		85 30		sta $30				sta 	codePtr
.8edb		90 02		bcc $8edf			bcc 	_CREExit
.8edd		e6 31		inc $31				inc 	codePtr+1 					; carry
.8edf						_CREExit:
.8edf		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ee1		b2 30		lda ($30)			lda 	(codePtr)
.8ee3		d0 e4		bne $8ec9			bne 	_CRKeepSearching
.8ee5						_CRNoData:
.8ee5		a9 0b		lda #$0b		lda	#11
.8ee7		4c b5 93	jmp $93b5		jmp	ErrorHandler
.8eea						_CRHaveData:
.8eea						_CRContinueData:
.8eea		a2 01		ldx #$01			ldx 	#1
.8eec		20 5a a2	jsr $a25a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8eef		ca		dex				dex
.8ef0		20 0e 8c	jsr $8c0e			jsr		AssignVariable 				; do the assignment
.8ef3		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.8ef6		b1 30		lda ($30),y			lda 	(codePtr),y
.8ef8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8efa		d0 04		bne $8f00			bne 	_CRSwapBack
.8efc		c8		iny				iny 								; consume comma
.8efd		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.8f00						_CRSwapBack:
.8f00		20 55 8f	jsr $8f55			jsr 	SwapDataCodePtrs			; swap them back.
.8f03		b1 30		lda ($30),y			lda 	(codePtr),y
.8f05		c8		iny				iny
.8f06		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f08		f0 a8		beq $8eb2			beq 	Command_Read 				; if so go round again.
.8f0a		88		dey				dey 								; unpick get.
.8f0b		60		rts				rts
.8f0c						_CRSyntax:
.8f0c		4c 8d a4	jmp $a48d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f0f						RemCommand:
.8f0f		b1 30		lda ($30),y			lda 	(codePtr),y
.8f11		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8f13		d0 06		bne $8f1b			bne 	_RMExit
.8f15		c8		iny				iny 								; point to offset
.8f16		98		tya				tya 								; A = offset position
.8f17		38		sec				sec 								; add size +1 hence SEC
.8f18		71 30		adc ($30),y			adc 	(codePtr),y
.8f1a		a8		tay				tay 								; make current position.
.8f1b						_RMExit:
.8f1b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f1c						Command_REPEAT:
.8f1c		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f1e		20 70 b4	jsr $b470			jsr 	StackOpen
.8f21		20 b5 b4	jsr $b4b5			jsr 	STKSaveCodePosition 		; save loop position
.8f24		60		rts				rts
.8f25						Command_UNTIL:
.8f25		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f27		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f29		20 9d b4	jsr $b49d			jsr 	StackCheckFrame
.8f2c		a2 00		ldx #$00			ldx 	#0
.8f2e		20 63 a2	jsr $a263			jsr 	EvaluateNumber 				; work out the number
.8f31		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; check if zero
.8f34		f0 04		beq $8f3a			beq 	_CULoopBack 				; if so keep looping
.8f36		20 8f b4	jsr $b48f			jsr 	StackClose		 			; return
.8f39		60		rts				rts
.8f3a						_CULoopBack:
.8f3a		20 c6 b4	jsr $b4c6			jsr 	STKLoadCodePosition 		; loop back
.8f3d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f3e						Command_Restore:
.8f3e		20 55 8f	jsr $8f55			jsr 	SwapDataCodePtrs 			; swap code and data
.8f41		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f43		85 30		sta $30				sta 	codePtr
.8f45		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f47		85 31		sta $31				sta 	codePtr+1
.8f49		20 55 8f	jsr $8f55			jsr 	SwapDataCodePtrs 			; put them back
.8f4c		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f4e		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.8f51		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.8f54		60		rts				rts
.8f55						SwapDataCodePtrs:
.8f55		da		phx				phx
.8f56		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f58						_SDCPLoop:
.8f58		b5 30		lda $30,x			lda 	safePtr,x
.8f5a		48		pha				pha
.8f5b		bd 13 04	lda $0413,x			lda 	dataPointer,x
.8f5e		95 30		sta $30,x			sta 	safePtr,x
.8f60		68		pla				pla
.8f61		9d 13 04	sta $0413,x			sta 	dataPointer,x
.8f64		ca		dex				dex
.8f65		10 f1		bpl $8f58			bpl 	_SDCPLoop
.8f67		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.8f6a		8c 17 04	sty $0417			sty 	dataPointer+4
.8f6d		a8		tay				tay
.8f6e		fa		plx				plx
.8f6f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f70						EOLCommand:
.8f70		18		clc				clc
.8f71		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f73		65 30		adc $30				adc 	codePtr
.8f75		85 30		sta $30				sta 	codePtr
.8f77		90 02		bcc $8f7b			bcc 	_CREExit
.8f79		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f7b						_CREExit:
.8f7b		80 18		bra $8f95			bra 	RunNewLine
.8f7d						CommandRUNOptLoad:
.8f7d		b1 30		lda ($30),y			lda 	(codePtr),y
.8f7f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8f81		f0 07		beq $8f8a			beq 	RunCurrentProgram
.8f83		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f85		f0 03		beq $8f8a			beq 	RunCurrentProgram
.8f87		20 1f ae	jsr $ae1f			jsr 	LoadFile 					; load expected name file.
.8f8a						RunCurrentProgram:
.8f8a		20 41 92	jsr $9241			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8f8d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f8f		85 30		sta $30				sta 	codePtr
.8f91		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f93		85 31		sta $31				sta 	codePtr+1
.8f95						RunNewLine:
.8f95		b2 30		lda ($30)			lda 	(codePtr)
.8f97		f0 74		beq $900d			beq 	CRNoProgram         		; no then END.
.8f99		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f9b		9a		txs				txs
.8f9c						RUNCodePointerLine:
.8f9c		a0 02		ldy #$02			ldy 	#2 							; start of program
.8f9e						_CRIncMainLoop:
.8f9e		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8fa0		f0 03		beq $8fa5			beq 	_NoEvents					; if zero, skip with Z flag set.
.8fa2		20 41 81	jsr $8141			jsr 	ProcessEvents
.8fa5						_NoEvents:
.8fa5		d0 61		bne $9008			bne 	_CRBreak
.8fa7		a5 01		lda $01				lda 	1 							; save I/O 0
.8fa9		48		pha				pha
.8faa		64 01		stz $01				stz 	1 							; access I/O Page 0
.8fac		38		sec				sec 								; calculate timer - LastTick
.8fad		ad 59 d6	lda $d659			lda 	$D659
.8fb0		cd 5e 06	cmp $065e			cmp 	LastTick
.8fb3		f0 06		beq $8fbb			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8fb5		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.8fb8		20 70 82	jsr $8270			jsr 	TickHandler 							; go do the code.
.8fbb						_NoFireTick:
.8fbb		68		pla				pla 								; restore I/O 0
.8fbc		85 01		sta $01				sta 	1
.8fbe						_CRNoBreakCheck:
.8fbe		c8		iny				iny									; next token
.8fbf						_CRMainLoop:
.8fbf		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8fc2		b1 30		lda ($30),y			lda 	(codePtr),y
.8fc4		10 10		bpl $8fd6			bpl 	_CRNotKeyword				; not a token.
.8fc6		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8fc8		b0 04		bcs $8fce			bcs 	_CRIsKeyword
.8fca		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8fcc		b0 34		bcs $9002			bcs		_CRSyntaxError
.8fce						_CRIsKeyword:
.8fce		c8		iny				iny 								; consume command
.8fcf		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8fd0		aa		tax				tax 								; put in X for vector jump
.8fd1		20 05 90	jsr $9005			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8fd4		80 e9		bra $8fbf			bra 	_CRMainLoop 				; and loop round
.8fd6						_CRNotKeyword:
.8fd6		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8fd8		f0 c4		beq $8f9e			beq 	_CRIncMainLoop
.8fda		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fdc		90 05		bcc $8fe3			bcc 	_CRNotVariable
.8fde						_CRGoLet:
.8fde		20 d5 8b	jsr $8bd5			jsr 	LetCommand
.8fe1		80 dc		bra $8fbf			bra 	_CRMainLoop
.8fe3						_CRNotVariable:
.8fe3		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; handle @
.8fe5		f0 f7		beq $8fde			beq 	_CRGoLet
.8fe7		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8fe9		f0 f3		beq $8fde			beq 	_CRGoLet
.8feb		c9 21		cmp #$21			cmp 	#KWD_PLING
.8fed		f0 ef		beq $8fde			beq 	_CRGoLet
.8fef		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8ff1		f0 09		beq $8ffc			beq 	_CRGoRem
.8ff3		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8ff5		d0 0b		bne $9002			bne 	_CRSyntaxError
.8ff7		20 4b 86	jsr $864b			jsr 	LabelHere
.8ffa		80 c3		bra $8fbf			bra 	_CRMainLoop
.8ffc						_CRGoRem:
.8ffc		c8		iny				iny
.8ffd		20 0f 8f	jsr $8f0f			jsr 	RemCommand
.9000		80 bd		bra $8fbf			bra 	_CRMainLoop
.9002						_CRSyntaxError:
.9002		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.9005						_CRCallVector0:
.9005		7c a4 90	jmp ($90a4,x)			jmp 	(VectorSet0,x)
.9008						_CRBreak:
.9008		a9 01		lda #$01		lda	#1
.900a		4c b5 93	jmp $93b5		jmp	ErrorHandler
.900d						CRNoProgram:
.900d		4c 6b 89	jmp $896b			jmp 	EndCommand
.9010						Shift1Command:
.9010		b1 30		lda ($30),y			lda 	(codePtr),y
.9012		c8		iny				iny
.9013		0a		asl a				asl 	a
.9014		aa		tax				tax
.9015		7c 5e 91	jmp ($915e,x)			jmp 	(VectorSet1,x)
.9018						Shift2Command:
.9018		b1 30		lda ($30),y			lda 	(codePtr),y
.901a		c8		iny				iny
.901b		0a		asl a				asl 	a
.901c		aa		tax				tax
.901d		7c b4 91	jmp ($91b4,x)			jmp 	(VectorSet2,x)
.9020						Unused1:
.9020						Unused2:
.9020						Unused3:
.9020						Unused4:
.9020		4c 8d a4	jmp $a48d			jmp 	SyntaxError
>9023								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9024						VectorSetPunc:
>9024		73 96					.word	ShiftLeft                        ; $00 <<
>9026		5e 94					.word	BinaryCompareLessEqual           ; $01 <=
>9028		54 94					.word	BinaryCompareNotEqual            ; $02 <>
>902a		8d a4					.word	SyntaxError                      ; $03 !!3
>902c		8d a4					.word	SyntaxError                      ; $04 ><
>902e		68 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>9030		76 96					.word	ShiftRight                       ; $06 >>
>9032		8d a4					.word	SyntaxError                      ; $07 !!7
>9034		8d a4					.word	SyntaxError                      ; $08 !!8
>9036		8d a4					.word	SyntaxError                      ; $09 !!9
>9038		8d a4					.word	SyntaxError                      ; $0a !!10
>903a		8d a4					.word	SyntaxError                      ; $0b !!11
>903c		8d a4					.word	SyntaxError                      ; $0c !!12
>903e		8d a4					.word	SyntaxError                      ; $0d !!13
>9040		8d a4					.word	SyntaxError                      ; $0e !!14
>9042		8d a4					.word	SyntaxError                      ; $0f !!15
>9044		8d a4					.word	SyntaxError                      ; $10 @
>9046		8d a4					.word	SyntaxError                      ; $11 !!17
>9048		8d a4					.word	SyntaxError                      ; $12 !!18
>904a		8d a4					.word	SyntaxError                      ; $13 [
>904c		1f 95					.word	IntegerDivide                    ; $14 \
>904e		8d a4					.word	SyntaxError                      ; $15 ]
>9050		b1 97					.word	EorInteger                       ; $16 ^
>9052		8d a4					.word	SyntaxError                      ; $17 _
>9054		8d a4					.word	SyntaxError                      ; $18 `
>9056		8d a4					.word	SyntaxError                      ; $19 !!25
>9058		8d a4					.word	SyntaxError                      ; $1a !!26
>905a		8d a4					.word	SyntaxError                      ; $1b {
>905c		7c 97					.word	OraInteger                       ; $1c |
>905e		8d a4					.word	SyntaxError                      ; $1d }
>9060		8d a4					.word	SyntaxError                      ; $1e ~
>9062		8d a4					.word	SyntaxError                      ; $1f <7F>
>9064		8d a4					.word	SyntaxError                      ; $20
>9066		e6 97					.word	WordIndirect                     ; $21 !
>9068		8d a4					.word	SyntaxError                      ; $22 "
>906a		8d a4					.word	SyntaxError                      ; $23 #
>906c		8d a4					.word	SyntaxError                      ; $24 $
>906e		60 95					.word	IntegerModulus                   ; $25 %
>9070		47 97					.word	AndInteger                       ; $26 &
>9072		8d a4					.word	SyntaxError                      ; $27 '
>9074		8d a4					.word	SyntaxError                      ; $28 (
>9076		8d a4					.word	SyntaxError                      ; $29 )
>9078		ce 95					.word	MulInteger                       ; $2a *
>907a		e9 96					.word	AddInteger                       ; $2b +
>907c		8d a4					.word	SyntaxError                      ; $2c ,
>907e		22 97					.word	SubInteger                       ; $2d -
>9080		8d a4					.word	SyntaxError                      ; $2e .
>9082		a0 99					.word	FDivideCommand                   ; $2f /
>9084		8d a4					.word	SyntaxError                      ; $30 0
>9086		8d a4					.word	SyntaxError                      ; $31 1
>9088		8d a4					.word	SyntaxError                      ; $32 2
>908a		8d a4					.word	SyntaxError                      ; $33 3
>908c		8d a4					.word	SyntaxError                      ; $34 4
>908e		8d a4					.word	SyntaxError                      ; $35 5
>9090		8d a4					.word	SyntaxError                      ; $36 6
>9092		8d a4					.word	SyntaxError                      ; $37 7
>9094		8d a4					.word	SyntaxError                      ; $38 8
>9096		8d a4					.word	SyntaxError                      ; $39 9
>9098		8d a4					.word	SyntaxError                      ; $3a :
>909a		8d a4					.word	SyntaxError                      ; $3b ;
>909c		40 94					.word	BinaryCompareLess                ; $3c <
>909e		36 94					.word	BinaryCompareEqual               ; $3d =
>90a0		4a 94					.word	BinaryCompareGreater             ; $3e >
>90a2		08 98					.word	ByteIndirect                     ; $3f ?
.90a4						VectorSet0:
>90a4		70 8f					.word	EOLCommand                       ; $80 !0:EOF
>90a6		10 90					.word	Shift1Command                    ; $81 !1:SH1
>90a8		18 90					.word	Shift2Command                    ; $82 !2:SH2
>90aa		8a 9e					.word	AbsUnary                         ; $83 ABS(
>90ac		98 9e					.word	AllocUnary                       ; $84 ALLOC(
>90ae		08 9f					.word	AscUnary                         ; $85 ASC(
>90b0		59 a0					.word	ChrUnary                         ; $86 CHR$(
>90b2		b6 ab					.word	UnaryEvent                       ; $87 EVENT(
>90b4		32 94					.word	UnaryFalse                       ; $88 FALSE
>90b6		15 9f					.word	FracUnary                        ; $89 FRAC(
>90b8		ce b2					.word	ChrGet                           ; $8a GET$(
>90ba		b3 b2					.word	AscGet                           ; $8b GET(
>90bc		5d b2					.word	UnaryGetDate                     ; $8c GETDATE$(
>90be		59 b2					.word	UnaryGetTime                     ; $8d GETTIME$(
>90c0		6e aa					.word	UnaryHit                         ; $8e HIT(
>90c2		d5 b2					.word	ChrInkey                         ; $8f INKEY$(
>90c4		c3 b2					.word	AscInkey                         ; $90 INKEY(
>90c6		2a 9f					.word	IntUnary                         ; $91 INT(
>90c8		18 a0					.word	IsValUnary                       ; $92 ISVAL(
>90ca		6b a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>90cc		8f a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>90ce		30 b0					.word	UnaryJoyB                        ; $95 JOYB(
>90d0		09 b0					.word	UnaryJoyX                        ; $96 JOYX(
>90d2		0c b0					.word	UnaryJoyY                        ; $97 JOYY(
>90d4		ee b2					.word	KeyDown                          ; $98 KEYDOWN(
>90d6		ce a1					.word	Unary_Left                       ; $99 LEFT$(
>90d8		3b 9f					.word	LenUnary                         ; $9a LEN(
>90da		59 9f					.word	Unary_Max                        ; $9b MAX(
>90dc		f0 a1					.word	Unary_Mid                        ; $9c MID$(
>90de		55 9f					.word	Unary_Min                        ; $9d MIN(
>90e0		a4 9f					.word	Unary_Not                        ; $9e NOT(
>90e2		b7 9f					.word	PeekByteUnary                    ; $9f PEEK(
>90e4		c3 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>90e6		bf 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>90e8		bb 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>90ea		cd b3					.word	UnaryPlaying                     ; $a3 PLAYING(
>90ec		08 b3					.word	Unary_Random                     ; $a4 RANDOM(
>90ee		db a1					.word	Unary_Right                      ; $a5 RIGHT$(
>90f0		22 b3					.word	Unary_Rnd                        ; $a6 RND(
>90f2		f0 9f					.word	SgnUnary                         ; $a7 SGN(
>90f4		0d a1					.word	SpcUnary                         ; $a8 SPC(
>90f6		28 a1					.word	Unary_Str                        ; $a9 STR$(
>90f8		4d ab					.word	TileRead                         ; $aa TILE(
>90fa		40 b2					.word	UnaryTimer                       ; $ab TIMER(
>90fc		27 94					.word	UnaryTrue                        ; $ac TRUE
>90fe		0e a0					.word	ValUnary                         ; $ad VAL(
>9100		6e 89					.word	ForCommand                       ; $ae FOR
>9102		b1 8a					.word	IfCommand                        ; $af IF
>9104		20 90					.word	Unused1                          ; $b0 PROC
>9106		1c 8f					.word	Command_REPEAT                   ; $b1 REPEAT
>9108		6d 93					.word	Command_WHILE                    ; $b2 WHILE
>910a		da 8a					.word	EndIf                            ; $b3 ENDIF
>910c		a4 8e					.word	Command_ENDPROC                  ; $b4 ENDPROC
>910e		20 8a					.word	NextCommand                      ; $b5 NEXT
>9110		20 90					.word	Unused4                          ; $b6 THEN
>9112		25 8f					.word	Command_UNTIL                    ; $b7 UNTIL
>9114		8e 93					.word	Command_WEND                     ; $b8 WEND
>9116		8d a4					.word	SyntaxError                      ; $b9 AT
>9118		8d a4					.word	SyntaxError                      ; $ba BY
>911a		71 88					.word	CallCommand                      ; $bb CALL
>911c		5c a7					.word	CircleCommand                    ; $bc CIRCLE
>911e		8d a4					.word	SyntaxError                      ; $bd CLEAR
>9120		8d a4					.word	SyntaxError                      ; $be COLOR
>9122		8d a4					.word	SyntaxError                      ; $bf COLOUR
>9124		a6 88					.word	Command_Data                     ; $c0 DATA
>9126		ae 88					.word	DimCommand                       ; $c1 DIM
>9128		20 90					.word	Unused3                          ; $c2 DOWNTO
>912a		d3 8a					.word	ElseCode                         ; $c3 ELSE
>912c		8d a4					.word	SyntaxError                      ; $c4 FROM
>912e		41 aa					.word	GfxCommand                       ; $c5 GFX
>9130		8d a4					.word	SyntaxError                      ; $c6 HERE
>9132		85 a7					.word	ImageCommand                     ; $c7 IMAGE
>9134		d5 8b					.word	LetCommand                       ; $c8 LET
>9136		d7 a7					.word	LineCommand                      ; $c9 LINE
>9138		38 8d					.word	Command_LOCAL                    ; $ca LOCAL
>913a		42 b0					.word	MCCommand                        ; $cb MEMCOPY
>913c		8d a4					.word	SyntaxError                      ; $cc OFF
>913e		8d a4					.word	SyntaxError                      ; $cd ON
>9140		8d a4					.word	SyntaxError                      ; $ce OUTLINE
>9142		92 aa					.word	PaletteCommand                   ; $cf PALETTE
>9144		d0 a7					.word	PlotCommand                      ; $d0 PLOT
>9146		09 8e					.word	PokeBCommand                     ; $d1 POKE
>9148		15 8e					.word	PokeDCommand                     ; $d2 POKED
>914a		11 8e					.word	PokeLCommand                     ; $d3 POKEL
>914c		0d 8e					.word	PokeWCommand                     ; $d4 POKEW
>914e		b2 8e					.word	Command_Read                     ; $d5 READ
>9150		58 a7					.word	RectangleCommand                 ; $d6 RECT
>9152		0f 8f					.word	RemCommand                       ; $d7 REM
>9154		8d a4					.word	SyntaxError                      ; $d8 SOLID
>9156		e9 b3					.word	SoundCommand                     ; $d9 SOUND
>9158		67 a7					.word	SpriteCommand                    ; $da SPRITE
>915a		a1 a7					.word	TextCommand                      ; $db TEXT
>915c		20 90					.word	Unused2                          ; $dc TO
.915e						VectorSet1:
>915e		8d a4					.word	SyntaxError                      ; $80 !0:EOF
>9160		8d a4					.word	SyntaxError                      ; $81 !1:SH1
>9162		8d a4					.word	SyntaxError                      ; $82 !2:SH2
>9164		45 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>9166		61 88					.word	AssertCommand                    ; $84 ASSERT
>9168		32 a9					.word	BitmapCtrl                       ; $85 BITMAP
>916a		13 ac					.word	Command_BLoad                    ; $86 BLOAD
>916c		bf ac					.word	Command_BSave                    ; $87 BSAVE
>916e		68 ab					.word	ClearScreen                      ; $88 CLS
>9170		e0 8a					.word	Command_CPrint                   ; $89 CPRINT
>9172		70 ab					.word	CursorControl                    ; $8a CURSOR
>9174		42 ad					.word	Command_Dir                      ; $8b DIR
>9176		12 ae					.word	Command_Drive                    ; $8c DRIVE
>9178		6b 89					.word	EndCommand                       ; $8d END
>917a		a1 b3					.word	Explode                          ; $8e EXPLODE
>917c		8d a4					.word	SyntaxError                      ; $8f GO
>917e		79 8a					.word	Command_GOSUB                    ; $90 GOSUB
>9180		97 8a					.word	GotoCommand                      ; $91 GOTO
>9182		8d a4					.word	SyntaxError                      ; $92 HIMEM
>9184		db 8a					.word	Command_Input                    ; $93 INPUT
>9186		25 8c					.word	Command_List                     ; $94 LIST
>9188		19 ae					.word	Command_Load                     ; $95 LOAD
>918a		56 b1					.word	MouseDeltaStatus                 ; $96 MDELTA
>918c		52 b1					.word	MouseStatus                      ; $97 MOUSE
>918e		f9 8d					.word	NewCommand                       ; $98 NEW
>9190		7d b3					.word	PingCommand                      ; $99 PING
>9192		e7 8a					.word	Command_Print                    ; $9a PRINT
>9194		3e 8f					.word	Command_Restore                  ; $9b RESTORE
>9196		89 8a					.word	Command_RETURN                   ; $9c RETURN
>9198		7d 8f					.word	CommandRUNOptLoad                ; $9d RUN
>919a		eb ae					.word	Command_Save                     ; $9e SAVE
>919c		cc b1					.word	CommandSetDate                   ; $9f SETDATE
>919e		d0 b1					.word	CommandSetTime                   ; $a0 SETTIME
>91a0		95 b3					.word	ShootCommand                     ; $a1 SHOOT
>91a2		8c a9					.word	SpritesCtrl                      ; $a2 SPRITES
>91a4		3c 92					.word	StopCommand                      ; $a3 STOP
>91a6		d2 aa					.word	TileCommand                      ; $a4 TILE
>91a8		b4 a9					.word	TilesCtrl                        ; $a5 TILES
>91aa		72 af					.word	Command_Try                      ; $a6 TRY
>91ac		af af					.word	Command_VERIFY                   ; $a7 VERIFY
>91ae		9f ab					.word	XGoCommand                       ; $a8 XGO
>91b0		96 ab					.word	XLoadCommand                     ; $a9 XLOAD
>91b2		89 b3					.word	ZapCommand                       ; $aa ZAP
.91b4						VectorSet2:
>91b4		8d a4					.word	SyntaxError                      ; $80 !0:EOF
>91b6		8d a4					.word	SyntaxError                      ; $81 !1:SH1
>91b8		8d a4					.word	SyntaxError                      ; $82 !2:SH2
>91ba		4c a3					.word	Assemble_adc                     ; $83 ADC
>91bc		44 a3					.word	Assemble_and                     ; $84 AND
>91be		60 a3					.word	Assemble_asl                     ; $85 ASL
>91c0		ca a3					.word	Assemble_bcc                     ; $86 BCC
>91c2		ce a3					.word	Assemble_bcs                     ; $87 BCS
>91c4		d6 a3					.word	Assemble_beq                     ; $88 BEQ
>91c6		8d a3					.word	Assemble_bit                     ; $89 BIT
>91c8		be a3					.word	Assemble_bmi                     ; $8a BMI
>91ca		d2 a3					.word	Assemble_bne                     ; $8b BNE
>91cc		ba a3					.word	Assemble_bpl                     ; $8c BPL
>91ce		da a3					.word	Assemble_bra                     ; $8d BRA
>91d0		de a3					.word	Assemble_brk                     ; $8e BRK
>91d2		c2 a3					.word	Assemble_bvc                     ; $8f BVC
>91d4		c6 a3					.word	Assemble_bvs                     ; $90 BVS
>91d6		e6 a3					.word	Assemble_clc                     ; $91 CLC
>91d8		3a a4					.word	Assemble_cld                     ; $92 CLD
>91da		fa a3					.word	Assemble_cli                     ; $93 CLI
>91dc		2a a4					.word	Assemble_clv                     ; $94 CLV
>91de		58 a3					.word	Assemble_cmp                     ; $95 CMP
>91e0		a1 a3					.word	Assemble_cpx                     ; $96 CPX
>91e2		9c a3					.word	Assemble_cpy                     ; $97 CPY
>91e4		7e a3					.word	Assemble_dec                     ; $98 DEC
>91e6		36 a4					.word	Assemble_dex                     ; $99 DEX
>91e8		12 a4					.word	Assemble_dey                     ; $9a DEY
>91ea		48 a3					.word	Assemble_eor                     ; $9b EOR
>91ec		83 a3					.word	Assemble_inc                     ; $9c INC
>91ee		46 a4					.word	Assemble_inx                     ; $9d INX
>91f0		32 a4					.word	Assemble_iny                     ; $9e INY
>91f2		b5 a3					.word	Assemble_jmp                     ; $9f JMP
>91f4		b0 a3					.word	Assemble_jsr                     ; $a0 JSR
>91f6		54 a3					.word	Assemble_lda                     ; $a1 LDA
>91f8		79 a3					.word	Assemble_ldx                     ; $a2 LDX
>91fa		97 a3					.word	Assemble_ldy                     ; $a3 LDY
>91fc		6a a3					.word	Assemble_lsr                     ; $a4 LSR
>91fe		4a a4					.word	Assemble_nop                     ; $a5 NOP
>9200		40 a3					.word	Assemble_ora                     ; $a6 ORA
>9202		f6 a3					.word	Assemble_pha                     ; $a7 PHA
>9204		e2 a3					.word	Assemble_php                     ; $a8 PHP
>9206		3e a4					.word	Assemble_phx                     ; $a9 PHX
>9208		fe a3					.word	Assemble_phy                     ; $aa PHY
>920a		06 a4					.word	Assemble_pla                     ; $ab PLA
>920c		ea a3					.word	Assemble_plp                     ; $ac PLP
>920e		52 a4					.word	Assemble_plx                     ; $ad PLX
>9210		0e a4					.word	Assemble_ply                     ; $ae PLY
>9212		65 a3					.word	Assemble_rol                     ; $af ROL
>9214		6f a3					.word	Assemble_ror                     ; $b0 ROR
>9216		f2 a3					.word	Assemble_rti                     ; $b1 RTI
>9218		02 a4					.word	Assemble_rts                     ; $b2 RTS
>921a		5c a3					.word	Assemble_sbc                     ; $b3 SBC
>921c		ee a3					.word	Assemble_sec                     ; $b4 SEC
>921e		4e a4					.word	Assemble_sed                     ; $b5 SED
>9220		0a a4					.word	Assemble_sei                     ; $b6 SEI
>9222		50 a3					.word	Assemble_sta                     ; $b7 STA
>9224		42 a4					.word	Assemble_stp                     ; $b8 STP
>9226		74 a3					.word	Assemble_stx                     ; $b9 STX
>9228		92 a3					.word	Assemble_sty                     ; $ba STY
>922a		88 a3					.word	Assemble_stz                     ; $bb STZ
>922c		26 a4					.word	Assemble_tax                     ; $bc TAX
>922e		22 a4					.word	Assemble_tay                     ; $bd TAY
>9230		ab a3					.word	Assemble_trb                     ; $be TRB
>9232		a6 a3					.word	Assemble_tsb                     ; $bf TSB
>9234		2e a4					.word	Assemble_tsx                     ; $c0 TSX
>9236		16 a4					.word	Assemble_txa                     ; $c1 TXA
>9238		1e a4					.word	Assemble_txs                     ; $c2 TXS
>923a		1a a4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.923c						StopCommand:
.923c		a9 08		lda #$08		lda	#8
.923e		4c b5 93	jmp $93b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9241						ClearSystem:
.9241		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9243		85 36		sta $36				sta 	0+zTemp0
.9245		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9247		85 37		sta $37				sta 	1+zTemp0
.9249						_ClearZeroLoop:
.9249		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.924b		f0 24		beq $9271			beq 	_ClearZeroEnd
.924d		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.924f		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9251						_ClearOneVariable:
.9251		91 36		sta ($36),y			sta 	(zTemp0),y
.9253		c8		iny				iny
.9254		c0 08		cpy #$08			cpy 	#8
.9256		d0 f9		bne $9251			bne 	_ClearOneVariable
.9258		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.925a		b1 36		lda ($36),y			lda 	(zTemp0),y
.925c		c9 18		cmp #$18			cmp 	#NSTProcedure
.925e		d0 04		bne $9264			bne 	_ClearNotProcedure
.9260		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9262		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9264						_ClearNotProcedure:
.9264		18		clc				clc 								; go to the next variable
.9265		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.9267		65 36		adc $36				adc 	zTemp0
.9269		85 36		sta $36				sta 	zTemp0
.926b		90 dc		bcc $9249			bcc 	_ClearZeroLoop
.926d		e6 37		inc $37				inc 	zTemp0+1
.926f		80 d8		bra $9249			bra 	_ClearZeroLoop
.9271						_ClearZeroEnd:
.9271		18		clc				clc
.9272		a5 36		lda $36				lda 	zTemp0
.9274		69 01		adc #$01			adc 	#1
.9276		8d 08 04	sta $0408			sta 	lowMemPtr
.9279		a5 37		lda $37				lda 	zTemp0+1
.927b		69 00		adc #$00			adc 	#0
.927d		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9280		20 d6 b4	jsr $b4d6			jsr 	StackReset
.9283		20 3c b5	jsr $b53c			jsr 	StringSystemInitialise
.9286		20 9f 92	jsr $929f			jsr 	ProcedureScan
.9289		20 3e 8f	jsr $8f3e			jsr 	Command_Restore
.928c		9c 1a 04	stz $041a			stz 	AssemblerAddress
.928f		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.9292		9c 1c 04	stz $041c			stz 	AssemblerControl
.9295		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.9298		20 f5 9e	jsr $9ef5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.929b		20 1b a9	jsr $a91b			jsr 	ResetBitmapSpritesTiles
.929e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.929f						ProcedureScan:
.929f		20 55 8f	jsr $8f55			jsr 	SwapDataCodePtrs 			; swap code and data
.92a2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92a4		85 30		sta $30				sta 	codePtr
.92a6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92a8		85 31		sta $31				sta 	codePtr+1
.92aa						_PSLoop:
.92aa		b2 30		lda ($30)			lda 	(codePtr)
.92ac		f0 42		beq $92f0			beq 	_PSExit
.92ae		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.92b0		b1 30		lda ($30),y			lda 	(codePtr),y
.92b2		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.92b4		d0 2d		bne $92e3			bne 	_PSNext
.92b6		c8		iny				iny 								; get the address of the record to zTemp0 and
.92b7		b1 30		lda ($30),y			lda 	(codePtr),y
.92b9		29 c0		and #$c0			and 	#$C0
.92bb		c9 40		cmp #$40			cmp 	#$40
.92bd		d0 35		bne $92f4			bne 	_PSSyntax
.92bf		b1 30		lda ($30),y			lda 	(codePtr),y
.92c1		18		clc				clc
.92c2		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92c4		85 37		sta $37				sta 	zTemp0+1
.92c6		c8		iny				iny 								; LSB
.92c7		b1 30		lda ($30),y			lda 	(codePtr),y
.92c9		85 36		sta $36				sta 	zTemp0
.92cb		c8		iny				iny 								; character after variable call.
.92cc		98		tya				tya 								; save Y offset at +7 (exponent slot)
.92cd		a0 07		ldy #$07			ldy 	#7
.92cf		91 36		sta ($36),y			sta 	(zTemp0),y
.92d1		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92d3		a0 02		ldy #$02			ldy 	#2
.92d5		91 36		sta ($36),y			sta 	(zTemp0),y
.92d7		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.92d9						_PSCopy:
.92d9		b5 30		lda $30,x			lda 	safePtr,x
.92db		c8		iny				iny
.92dc		91 36		sta ($36),y			sta 	(zTemp0),y
.92de		e8		inx				inx
.92df		e0 04		cpx #$04			cpx 	#4
.92e1		d0 f6		bne $92d9			bne 	_PSCopy
.92e3						_PSNext:
.92e3		18		clc				clc
.92e4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92e6		65 30		adc $30				adc 	codePtr
.92e8		85 30		sta $30				sta 	codePtr
.92ea		90 02		bcc $92ee			bcc 	_CREExit
.92ec		e6 31		inc $31				inc 	codePtr+1 					; carry
.92ee						_CREExit:
.92ee		80 ba		bra $92aa			bra 	_PSLoop
.92f0						_PSExit:
.92f0		20 55 8f	jsr $8f55			jsr 	SwapDataCodePtrs 			; swap code and data
.92f3		60		rts				rts
.92f4						_PSSyntax:
.92f4		4c 8d a4	jmp $a48d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92f7						ScanForward:
.92f7		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.92f9		86 37		stx $37				stx 	zTemp0+1
.92fb		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.92fd						_ScanLoop:
.92fd		b1 30		lda ($30),y			lda 	(codePtr),y
.92ff		c8		iny				iny
.9300		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9302		d0 0e		bne $9312			bne 	_ScanGoNext
.9304		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9306		f0 04		beq $930c			beq 	_ScanMatch
.9308		c5 37		cmp $37				cmp 	zTemp0+1
.930a		d0 06		bne $9312			bne 	_ScanGoNext
.930c						_ScanMatch:
.930c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.930e		d0 01		bne $9311			bne 	_ScanNotEndEOL
.9310		88		dey				dey
.9311						_ScanNotEndEOL:
.9311		60		rts				rts
.9312						_ScanGoNext:
.9312		20 17 93	jsr $9317			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9315		80 e6		bra $92fd			bra 	_ScanLoop
.9317						ScanForwardOne:
.9317		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9319		90 3e		bcc $9359			bcc 	_SFWExit
.931b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.931d		90 18		bcc $9337			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.931f		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9321		b0 2f		bcs $9352			bcs 	_ScanSkipData
.9323		c9 ae		cmp #$ae			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9325		90 32		bcc $9359			bcc 	_SFWExit 					; if not, ordinary keywords.
.9327		c9 b9		cmp #$b9			cmp 	#KWC_LAST_STRUCTURE+1
.9329		b0 2e		bcs $9359			bcs 	_SFWExit
.932b		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.932d		c9 b3		cmp #$b3			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.932f		b0 28		bcs $9359			bcs 	_SFWExit
.9331		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9333		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9335		80 22		bra $9359			bra 	_SFWExit
.9337						_ScanSkipOne:
.9337		c8		iny				iny 								; consume the extra one.
.9338		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.933a		d0 1d		bne $9359			bne 	_SFWExit
.933c		18		clc				clc
.933d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.933f		65 30		adc $30				adc 	codePtr
.9341		85 30		sta $30				sta 	codePtr
.9343		90 02		bcc $9347			bcc 	_CREExit
.9345		e6 31		inc $31				inc 	codePtr+1 					; carry
.9347						_CREExit:
.9347		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9349		b2 30		lda ($30)			lda 	(codePtr)
.934b		d0 0c		bne $9359			bne 	_SFWExit 					; if not zero, more to scan
.934d		a9 13		lda #$13		lda	#19
.934f		4c b5 93	jmp $93b5		jmp	ErrorHandler
.9352						_ScanSkipData:
.9352		88		dey				dey 								; point at data token
.9353		c8		iny				iny 								; point to offset
.9354		98		tya				tya 								; A = offset position
.9355		38		sec				sec 								; add size +1 hence SEC
.9356		71 30		adc ($30),y			adc 	(codePtr),y
.9358		a8		tay				tay 								; make current position.
.9359						_SFWExit:
.9359		60		rts				rts
.935a						ScanGetCurrentLineStep:
.935a		64 38		stz $38				stz 	zTemp1
.935c		a0 03		ldy #$03			ldy 	#3
.935e						_SGCLSLoop:
.935e		b1 30		lda ($30),y			lda 	(codePtr),y
.9360		c8		iny				iny
.9361		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9363		f0 05		beq $936a			beq 	_SGCLSExit
.9365		20 17 93	jsr $9317			jsr 	ScanForwardOne
.9368		80 f4		bra $935e			bra 	_SGCLSLoop
.936a						_SGCLSExit:
.936a		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.936c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.936d						Command_WHILE:
.936d		5a		phy				phy 								; save position of the test
.936e		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9370		20 63 a2	jsr $a263			jsr 	EvaluateNumber
.9373		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; check if zero
.9376		f0 0e		beq $9386			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9378		98		tya				tya 								; position *after* test.
.9379		7a		ply				ply 								; restore position before test, at WHILE
.937a		88		dey				dey 								; so we execute the WHILE command again.
.937b		48		pha				pha 								; push after test on the stack
.937c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.937e		20 70 b4	jsr $b470			jsr 	StackOpen
.9381		20 b5 b4	jsr $b4b5			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9384		7a		ply				ply 								; restore the position *after* the test
.9385		60		rts				rts
.9386						_WHExitLoop:
.9386		68		pla				pla 								; throw post loop position
.9387		a9 b8		lda #$b8			lda 	#KWD_WEND 					; scan forward past WEND
.9389		aa		tax				tax
.938a		20 f7 92	jsr $92f7			jsr 	ScanForward
.938d		60		rts				rts
.938e						Command_WEND:
.938e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9390		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9392		20 9d b4	jsr $b49d			jsr 	StackCheckFrame
.9395		20 c6 b4	jsr $b4c6			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9398		20 8f b4	jsr $b48f			jsr 	StackClose		 			; erase the frame
.939b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.939c						CheckRightBracket:
.939c		b1 30		lda ($30),y			lda 	(codePtr),y
.939e		c8		iny				iny
.939f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.93a1		d0 0f		bne $93b2			bne 	CNAFail
.93a3		60		rts				rts
.93a4						CheckComma:
.93a4		b1 30		lda ($30),y			lda 	(codePtr),y
.93a6		c8		iny				iny
.93a7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.93a9		d0 07		bne $93b2			bne 	CNAFail
.93ab		60		rts				rts
.93ac						CheckNextA:
.93ac		d1 30		cmp ($30),y			cmp 	(codePtr),y
.93ae		d0 02		bne $93b2			bne 	CNAFail
.93b0		c8		iny				iny 								; skip character
.93b1		60		rts				rts 								; and exit
.93b2						CNAFail:
.93b2		4c 8d a4	jmp $a48d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.93b5						ErrorHandler:
.93b5		48		pha				pha 								; save error #
.93b6		a8		tay				tay 								; find the error text
.93b7		f0 4e		beq $9407			beq 	_EHEnd
.93b9		a2 00		ldx #$00			ldx 	#0
.93bb		a9 a6		lda #$a6			lda 	#((ErrorText) & $FF)
.93bd		85 36		sta $36				sta 	0+zTemp0
.93bf		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.93c1		85 37		sta $37				sta 	1+zTemp0
.93c3						_EHFind:
.93c3		88		dey				dey 								; keep looking through text
.93c4		f0 0e		beq $93d4			beq 	_EHFound
.93c6						_EHFindZero:
.93c6		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.93c8		e6 36		inc $36				inc 	zTemp0
.93ca		d0 02		bne $93ce			bne 	_EHFNoCarry
.93cc		e6 37		inc $37				inc 	zTemp0+1
.93ce						_EHFNoCarry:
.93ce		c9 00		cmp #$00			cmp 	#0
.93d0		d0 f4		bne $93c6			bne 	_EHFindZero
.93d2		80 ef		bra $93c3			bra 	_EHFind
.93d4						_EHFound:
.93d4		a5 36		lda $36				lda 	zTemp0 						; print message
.93d6		a6 37		ldx $37				ldx 	zTemp0+1
.93d8		20 14 94	jsr $9414			jsr 	PrintStringXA
.93db		68		pla				pla  								; check if error is 'open structure'
.93dc		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.93de		f0 22		beq $9402			beq 	_EHCREnd
.93e0		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.93e2		b1 30		lda ($30),y			lda 	(codePtr),y
.93e4		d0 05		bne $93eb			bne 	_EHAtMsg
.93e6		c8		iny				iny
.93e7		b1 30		lda ($30),y			lda 	(codePtr),y
.93e9		f0 17		beq $9402			beq 	_EHCREnd
.93eb						_EHAtMsg:
.93eb		a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.93ed		a9 0a		lda #$0a			lda 	#_AtMsg & $FF
.93ef		20 14 94	jsr $9414			jsr 	PrintStringXA
.93f2		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93f4		b1 30		lda ($30),y			lda 	(codePtr),y
.93f6		48		pha				pha
.93f7		c8		iny				iny
.93f8		b1 30		lda ($30),y			lda 	(codePtr),y
.93fa		aa		tax				tax
.93fb		68		pla				pla
.93fc		20 2a 98	jsr $982a			jsr 	ConvertInt16 				; convert XA to string
.93ff		20 14 94	jsr $9414			jsr 	PrintStringXA 				; and print it.
.9402						_EHCREnd:
.9402		a9 0d		lda #$0d			lda 	#13 						; new line
.9404		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9407						_EHEnd:
.9407		4c 02 88	jmp $8802			jmp 	WarmStart
>940a		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9412		20 00
.9414						PrintStringXA:
.9414		5a		phy				phy
.9415		86 37		stx $37				stx 	zTemp0+1
.9417		85 36		sta $36				sta 	zTemp0
.9419		a0 00		ldy #$00			ldy 	#0
.941b						_PSXALoop:
.941b		b1 36		lda ($36),y			lda 	(zTemp0),y
.941d		f0 06		beq $9425			beq 	_PSXAExit
.941f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9422		c8		iny				iny
.9423		80 f6		bra $941b			bra 	_PSXALoop
.9425						_PSXAExit:
.9425		7a		ply				ply
.9426		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9427						UnaryTrue:
.9427		fa		plx				plx
.9428						ReturnTrue:
.9428		a9 01		lda #$01			lda 	#1  						; set to 1
.942a		20 17 a3	jsr $a317			jsr 	NSMSetByte
.942d		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.942f		95 50		sta $50,x			sta 	NSStatus,x
.9431		60		rts				rts
.9432						UnaryFalse:
.9432		fa		plx				plx
.9433						ReturnFalse:
.9433		4c 15 a3	jmp $a315			jmp 	NSMSetZero 					; set it all to zero
.9436						BinaryCompareEqual:
.9436		fa		plx				plx
.9437		20 72 94	jsr $9472			jsr 	CompareBaseCode
.943a		c9 00		cmp #$00			cmp 	#0
.943c		f0 ea		beq $9428			beq 	ReturnTrue
.943e		80 f3		bra $9433			bra 	ReturnFalse
.9440						BinaryCompareLess:
.9440		fa		plx				plx
.9441		20 72 94	jsr $9472			jsr 	CompareBaseCode
.9444		c9 ff		cmp #$ff			cmp 	#$FF
.9446		f0 e0		beq $9428			beq 	ReturnTrue
.9448		80 e9		bra $9433			bra 	ReturnFalse
.944a						BinaryCompareGreater:
.944a		fa		plx				plx
.944b		20 72 94	jsr $9472			jsr 	CompareBaseCode
.944e		c9 01		cmp #$01			cmp 	#1
.9450		f0 d6		beq $9428			beq 	ReturnTrue
.9452		80 df		bra $9433			bra 	ReturnFalse
.9454						BinaryCompareNotEqual:
.9454		fa		plx				plx
.9455		20 72 94	jsr $9472			jsr 	CompareBaseCode
.9458		c9 00		cmp #$00			cmp 	#0
.945a		d0 cc		bne $9428			bne 	ReturnTrue
.945c		80 d5		bra $9433			bra 	ReturnFalse
.945e						BinaryCompareLessEqual:
.945e		fa		plx				plx
.945f		20 72 94	jsr $9472			jsr 	CompareBaseCode
.9462		c9 01		cmp #$01			cmp 	#1
.9464		d0 c2		bne $9428			bne 	ReturnTrue
.9466		80 cb		bra $9433			bra 	ReturnFalse
.9468						BinaryCompareGreaterEqual:
.9468		fa		plx				plx
.9469		20 72 94	jsr $9472			jsr 	CompareBaseCode
.946c		c9 ff		cmp #$ff			cmp 	#$FF
.946e		d0 b8		bne $9428			bne 	ReturnTrue
.9470		80 c1		bra $9433			bra 	ReturnFalse
.9472						CompareBaseCode:
.9472		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; make both values if references.
.9475		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9477		15 51		ora $51,x			ora 	NSStatus+1,x
.9479		29 10		and #$10			and 	#NSTString
.947b		d0 37		bne $94b4			bne 	_CBCString 					; if so do string code, which will check if both.
.947d		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.947f		15 79		ora $79,x			ora 	NSExponent+1,x
.9481		d0 34		bne $94b7			bne 	_CBCFloat
.9483		b5 50		lda $50,x			lda 	NSStatus,x
.9485		15 51		ora $51,x			ora 	NSStatus+1,x
.9487		29 08		and #$08			and 	#NSTFloat
.9489		d0 2c		bne $94b7			bne 	_CBCFloat
.948b		20 ba 94	jsr $94ba			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.948e		e8		inx				inx
.948f		20 ba 94	jsr $94ba			jsr 	CompareFixMinusZero
.9492		ca		dex				dex
.9493		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9495		55 51		eor $51,x			eor 	NSStatus+1,x
.9497		10 0a		bpl $94a3			bpl 	_CDCSameSign
.9499		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.949b		30 14		bmi $94b1			bmi 	_CBCLess 					; return $FF
.949d						_CBCGreater:
.949d		a9 01		lda #$01			lda 	#1
.949f		60		rts				rts
.94a0						_CBCEqual:
.94a0		a9 00		lda #$00			lda 	#0
.94a2		60		rts				rts
.94a3						_CDCSameSign:
.94a3		20 cf 96	jsr $96cf			jsr 	SubTopTwoStack 				; unsigned subtract
.94a6		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; or the mantissa together
.94a9		f0 f5		beq $94a0			beq 	_CBCEqual 					; -0 == 0
.94ab		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.94ad		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.94af		10 ec		bpl $949d			bpl 	_CBCGreater
.94b1						_CBCLess:
.94b1		a9 ff		lda #$ff			lda 	#$FF
.94b3		60		rts				rts
.94b4						_CBCString:
.94b4		4c 40 96	jmp $9640			jmp 	CompareStrings
.94b7						_CBCFloat:
.94b7		4c 8a 99	jmp $998a			jmp 	CompareFloat
.94ba						CompareFixMinusZero:
.94ba		20 37 a3	jsr $a337			jsr 	NSMIsZero
.94bd		d0 02		bne $94c1			bne 	_CFXMZNotZero
.94bf		74 50		stz $50,x			stz 	NSStatus,x
.94c1						_CFXMZNotZero:
.94c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94c2						StringConcat:
.94c2		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.94c4		35 51		and $51,x			and 	NSStatus+1,x
.94c6		29 18		and #$18			and 	#NSBTypeMask
.94c8		c9 10		cmp #$10			cmp 	#NSTString
.94ca		d0 50		bne $951c			bne		_SCType
.94cc		64 38		stz $38				stz 	zTemp1 						; counting total length
.94ce		e8		inx				inx
.94cf		20 ed 94	jsr $94ed			jsr 	_SCSetupZ0 					; setup for second
.94d2		20 f6 94	jsr $94f6			jsr 	_SCLengthZ0 				; length for second
.94d5		ca		dex				dex
.94d6		20 ed 94	jsr $94ed			jsr 	_SCSetupZ0 					; setup for first
.94d9		20 f6 94	jsr $94f6			jsr 	_SCLengthZ0 				; length for first
.94dc		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.94de		20 60 b5	jsr $b560			jsr 	StringTempAllocate
.94e1		20 0d 95	jsr $950d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94e4		e8		inx				inx
.94e5		20 ed 94	jsr $94ed			jsr 	_SCSetupZ0 					; copy second out
.94e8		20 0d 95	jsr $950d			jsr 	_SCCopy
.94eb		ca		dex				dex
.94ec		60		rts				rts
.94ed						_SCSetupZ0:
.94ed		b5 58		lda $58,x			lda 	NSMantissa0,x
.94ef		85 36		sta $36				sta 	zTemp0
.94f1		b5 60		lda $60,x			lda 	NSMantissa1,x
.94f3		85 37		sta $37				sta 	zTemp0+1
.94f5		60		rts				rts
.94f6						_SCLengthZ0:
.94f6		5a		phy				phy
.94f7		a0 00		ldy #$00			ldy 	#0
.94f9						_SCLenLoop:
.94f9		b1 36		lda ($36),y			lda 	(zTemp0),y
.94fb		f0 0e		beq $950b			beq 	_SCLExit
.94fd		c8		iny				iny
.94fe		e6 38		inc $38				inc 	zTemp1
.9500		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9502		c9 fd		cmp #$fd			cmp 	#253
.9504		d0 f3		bne $94f9			bne		_SCLenLoop
.9506		a9 09		lda #$09		lda	#9
.9508		4c b5 93	jmp $93b5		jmp	ErrorHandler
.950b						_SCLExit:
.950b		7a		ply				ply
.950c		60		rts				rts
.950d						_SCCopy:
.950d		5a		phy				phy
.950e		a0 00		ldy #$00			ldy 	#0
.9510						_SCCopyLoop:
.9510		b1 36		lda ($36),y			lda 	(zTemp0),y
.9512		f0 06		beq $951a			beq 	_SCCExit
.9514		20 99 b5	jsr $b599			jsr 	StringTempWrite
.9517		c8		iny				iny
.9518		80 f6		bra $9510			bra 	_SCCopyLoop
.951a						_SCCExit:
.951a		7a		ply				ply
.951b		60		rts				rts
.951c						_SCType:
.951c		4c 97 a4	jmp $a497			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.951f						IntegerDivide:
.951f		fa		plx				plx
.9520		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9522		15 51		ora $51,x			ora 	NSStatus+1,x
.9524		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9525		0a		asl a				asl 	a
.9526		10 05		bpl $952d			bpl 	_NotRef
.9528		48		pha				pha
.9529		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.952c		68		pla				pla
.952d						_NotRef:
.952d		0a		asl a				asl 	a
.952e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9530		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9532		15 79		ora $79,x			ora 	NSExponent+1,x
.9534		f0 03		beq $9539			beq 	_IntegerCode 				; if clear, then we have two integers
.9536		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.9539						_IntegerCode:
.9539		20 53 95	jsr $9553			jsr 	CheckDivideZero 			; do div zero check
.953c		20 85 95	jsr $9585			jsr 	Int32Divide 				; do the division
.953f		20 36 96	jsr $9636			jsr 	CalculateSign 				; calculate result sign
.9542						NSMCopyPlusTwoToZero:
.9542		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9544		95 58		sta $58,x			sta 	NSMantissa0,x
.9546		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9548		95 60		sta $60,x			sta 	NSMantissa1,x
.954a		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.954c		95 68		sta $68,x			sta 	NSMantissa2,x
.954e		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9550		95 70		sta $70,x			sta 	NSMantissa3,x
.9552		60		rts				rts
.9553						CheckDivideZero:
.9553		e8		inx				inx
.9554		20 37 a3	jsr $a337			jsr 	NSMIsZero
.9557		f0 02		beq $955b			beq 	_CDVError
.9559		ca		dex				dex
.955a		60		rts				rts
.955b						_CDVError:
.955b		a9 03		lda #$03		lda	#3
.955d		4c b5 93	jmp $93b5		jmp	ErrorHandler
.9560						IntegerModulus:
.9560		fa		plx				plx
.9561		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9563		15 51		ora $51,x			ora 	NSStatus+1,x
.9565		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9566		0a		asl a				asl 	a
.9567		10 05		bpl $956e			bpl 	_NotRef
.9569		48		pha				pha
.956a		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.956d		68		pla				pla
.956e						_NotRef:
.956e		0a		asl a				asl 	a
.956f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9571		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9573		15 79		ora $79,x			ora 	NSExponent+1,x
.9575		f0 03		beq $957a			beq 	_IntegerCode 				; if clear, then we have two integers
.9577		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.957a						_IntegerCode:
.957a						IntegerModulusNoCheck:
.957a		20 53 95	jsr $9553			jsr 	CheckDivideZero 			; do div zero check
.957d		20 85 95	jsr $9585			jsr 	Int32Divide 				; do the division
.9580		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9582		56 50		lsr $50,x			lsr 	NSStatus,x
.9584		60		rts				rts
.9585						Int32Divide:
.9585		48		pha				pha 								; save AXY
.9586		5a		phy				phy
.9587		20 f8 a2	jsr $a2f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.958a		20 11 a3	jsr $a311			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.958d		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.958f						_I32DivideLoop:
.958f		e8		inx				inx
.9590		e8		inx				inx
.9591		20 24 a3	jsr $a324			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9594		ca		dex				dex
.9595		ca		dex				dex
.9596		20 25 a3	jsr $a325			jsr 	NSMRotateLeft
.9599		20 c4 95	jsr $95c4			jsr 	DivideCheckSubtract 		; check if subtract possible
.959c		90 02		bcc $95a0			bcc 	_I32DivideNoCarryIn
.959e		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.95a0						_I32DivideNoCarryIn:
.95a0		88		dey				dey 								; loop round till division completed.
.95a1		d0 ec		bne $958f			bne 	_I32DivideLoop
.95a3		7a		ply				ply 								; restore AXY and exit
.95a4		68		pla				pla
.95a5		60		rts				rts
.95a6						Int32ShiftDivide:
.95a6		48		pha				pha 								; save AY
.95a7		5a		phy				phy
.95a8		e8		inx				inx 								; clear S[X+2]
.95a9		e8		inx				inx
.95aa		20 15 a3	jsr $a315			jsr 	NSMSetZero
.95ad		ca		dex				dex
.95ae		ca		dex				dex
.95af		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.95b1						_I32SDLoop:
.95b1		20 c4 95	jsr $95c4			jsr 	DivideCheckSubtract 		; check if subtract possible
.95b4		e8		inx				inx
.95b5		e8		inx				inx
.95b6		20 25 a3	jsr $a325			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.95b9		ca		dex				dex
.95ba		ca		dex				dex
.95bb		20 25 a3	jsr $a325			jsr 	NSMRotateLeft
.95be		88		dey				dey 	 							; do 31 times
.95bf		d0 f0		bne $95b1			bne 	_I32SDLoop
.95c1		7a		ply				ply 								; restore AY and exit
.95c2		68		pla				pla
.95c3		60		rts				rts
.95c4						DivideCheckSubtract:
.95c4		20 cf 96	jsr $96cf			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.95c7		b0 04		bcs $95cd			bcs 	_DCSExit 					; if carry set, then could do, exit
.95c9		20 b5 96	jsr $96b5			jsr 	AddTopTwoStack 				; add it back in
.95cc		18		clc				clc 								; and return False
.95cd						_DCSExit:
.95cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95ce						MulInteger:
.95ce		fa		plx				plx
.95cf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95d1		15 51		ora $51,x			ora 	NSStatus+1,x
.95d3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95d4		0a		asl a				asl 	a
.95d5		10 05		bpl $95dc			bpl 	_NotRef
.95d7		48		pha				pha
.95d8		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95db		68		pla				pla
.95dc						_NotRef:
.95dc		0a		asl a				asl 	a 							; put MSB of type into A:7
.95dd		30 09		bmi $95e8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95df		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95e1		15 79		ora $79,x			ora 	NSExponent+1,x
.95e3		f0 06		beq $95eb			beq 	_IntegerCode 				; if clear, then we have two integers
.95e5		4c 4c 9a	jmp $9a4c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95e8						_StringData:
.95e8		4c a1 a4	jmp $a4a1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95eb						_IntegerCode:
.95eb		20 f8 95	jsr $95f8			jsr 	MultiplyShort
.95ee		c9 00		cmp #$00			cmp 	#0
.95f0		f0 05		beq $95f7			beq 	_MIExit
.95f2		a9 04		lda #$04		lda	#4
.95f4		4c b5 93	jmp $93b5		jmp	ErrorHandler
.95f7						_MIExit:
.95f7		60		rts				rts
.95f8						MultiplyShort:
.95f8		5a		phy				phy 								; save Y
.95f9		20 f8 a2	jsr $a2f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95fc		20 11 a3	jsr $a311			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95ff		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9601						_I32MLoop:
.9601		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9603		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9605		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9607		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9609		f0 25		beq $9630			beq 	_I32MExit 					; exit if zero
.960b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.960d		29 01		and #$01			and 	#1
.960f		f0 0d		beq $961e			beq 	_I32MNoAdd
.9611		20 b5 96	jsr $96b5			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9614		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9616		10 06		bpl $961e			bpl 	_I32MNoAdd
.9618						_I32ShiftRight:
.9618		20 2e a3	jsr $a32e			jsr 	NSMShiftRight 				; shift S[X] right
.961b		c8		iny				iny 								; increment shift count
.961c		80 09		bra $9627			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.961e						_I32MNoAdd:
.961e		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9620		70 f6		bvs $9618			bvs 	_I32ShiftRight 				; instead.
.9622		e8		inx				inx
.9623		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9626		ca		dex				dex
.9627						_I32MShiftUpper:
.9627		e8		inx				inx 								; shift S[X+2] right
.9628		e8		inx				inx
.9629		20 2e a3	jsr $a32e			jsr 	NSMShiftRight
.962c		ca		dex				dex
.962d		ca		dex				dex
.962e		80 d1		bra $9601			bra 	_I32MLoop 					; try again.
.9630						_I32MExit:
.9630		20 36 96	jsr $9636			jsr 	CalculateSign
.9633		98		tya				tya 								; shift in A
.9634		7a		ply				ply 								; restore Y and exit
.9635		60		rts				rts
.9636						CalculateSign:
.9636		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9638		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.963a		55 51		eor $51,x			eor 	NSStatus+1,x
.963c		0a		asl a				asl 	a 							; shift bit 7 into carry
.963d		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.963f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9640						CompareStrings:
.9640		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9642		35 51		and $51,x			and 	NSStatus+1,x
.9644		29 10		and #$10			and 	#NSBIsString
.9646		f0 28		beq $9670			beq 	_CSTypeError
.9648		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.964a		85 36		sta $36				sta 	zTemp0
.964c		b5 60		lda $60,x			lda 	NSMantissa1,x
.964e		85 37		sta $37				sta 	zTemp0+1
.9650		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9652		85 38		sta $38				sta 	zTemp1
.9654		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9656		85 39		sta $39				sta 	zTemp1+1
.9658		5a		phy				phy 								; save Y so we can access strings
.9659		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.965b						_CSLoop:
.965b		c8		iny				iny
.965c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.965e		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9660		d0 06		bne $9668			bne 	_CSDifferent
.9662		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9664		d0 f5		bne $965b			bne 	_CSLoop 					; still comparing
.9666						_CSExit:
.9666		7a		ply				ply 								; reached end, return zero in A from EOS
.9667		60		rts				rts
.9668						_CSDifferent:
.9668		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.966a		90 fa		bcc $9666			bcc		_CSExit
.966c		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.966e		80 f6		bra $9666			bra 	_CSExit
.9670						_CSTypeError:
.9670		4c 97 a4	jmp $a497			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9673						ShiftLeft:
.9673		38		sec				sec 								; common code, carry determines which way.
.9674		80 01		bra $9677			bra 	ShiftMain
.9676						ShiftRight:
.9676		18		clc				clc
.9677						ShiftMain:
.9677		fa		plx				plx 								; restore X
.9678		08		php				php 								; save direction
.9679		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.967b		15 51		ora $51,x			ora 	NSStatus+1,x
.967d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.967e		0a		asl a				asl 	a
.967f		10 05		bpl $9686			bpl 	_NotRef
.9681		48		pha				pha
.9682		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9685		68		pla				pla
.9686						_NotRef:
.9686		0a		asl a				asl 	a
.9687		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9689		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.968b		15 79		ora $79,x			ora 	NSExponent+1,x
.968d		f0 03		beq $9692			beq 	_IntegerCode 				; if clear, then we have two integers
.968f		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.9692						_IntegerCode:
.9692		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9694		29 e0		and #$e0			and 	#$E0
.9696		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9698		15 69		ora $69,x			ora 	NSMantissa2+1,x
.969a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.969c		d0 12		bne $96b0			bne 	_SMExit0 					; if >= 32 it will always return zero.
.969e						_SMLoop:
.969e		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.96a0		30 11		bmi $96b3			bmi 	_SMExit 					; exit if done.
.96a2		28		plp				plp 								; restore direction setting
.96a3		08		php				php
.96a4		90 05		bcc $96ab			bcc 	_SMRight
.96a6		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; shift left if CS
.96a9		80 f3		bra $969e			bra 	_SMLoop
.96ab						_SMRight:
.96ab		20 2e a3	jsr $a32e			jsr 	NSMShiftRight 				; shift right if CC
.96ae		80 ee		bra $969e			bra 	_SMLoop
.96b0						_SMExit0:
.96b0		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; return zero.
.96b3						_SMExit:
.96b3		28		plp				plp 								; throw direction
.96b4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.96b5						AddTopTwoStack:
.96b5		18		clc				clc
.96b6		b5 58		lda $58,x			lda		NSMantissa0,x
.96b8		75 59		adc $59,x			adc 		NSMantissa0+1,x
.96ba		95 58		sta $58,x			sta 	NSMantissa0,x
.96bc		b5 60		lda $60,x			lda		NSMantissa1,x
.96be		75 61		adc $61,x			adc 		NSMantissa1+1,x
.96c0		95 60		sta $60,x			sta 	NSMantissa1,x
.96c2		b5 68		lda $68,x			lda		NSMantissa2,x
.96c4		75 69		adc $69,x			adc 		NSMantissa2+1,x
.96c6		95 68		sta $68,x			sta 	NSMantissa2,x
.96c8		b5 70		lda $70,x			lda		NSMantissa3,x
.96ca		75 71		adc $71,x			adc 		NSMantissa3+1,x
.96cc		95 70		sta $70,x			sta 	NSMantissa3,x
.96ce		60		rts				rts
.96cf						SubTopTwoStack:
.96cf		38		sec				sec
.96d0		b5 58		lda $58,x			lda		NSMantissa0,x
.96d2		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.96d4		95 58		sta $58,x			sta 	NSMantissa0,x
.96d6		b5 60		lda $60,x			lda		NSMantissa1,x
.96d8		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.96da		95 60		sta $60,x			sta 	NSMantissa1,x
.96dc		b5 68		lda $68,x			lda		NSMantissa2,x
.96de		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.96e0		95 68		sta $68,x			sta 	NSMantissa2,x
.96e2		b5 70		lda $70,x			lda		NSMantissa3,x
.96e4		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.96e6		95 70		sta $70,x			sta 	NSMantissa3,x
.96e8		60		rts				rts
.96e9						AddInteger:
.96e9		fa		plx				plx
.96ea		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96ec		15 51		ora $51,x			ora 	NSStatus+1,x
.96ee		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96ef		0a		asl a				asl 	a
.96f0		10 05		bpl $96f7			bpl 	_NotRef
.96f2		48		pha				pha
.96f3		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96f6		68		pla				pla
.96f7						_NotRef:
.96f7		0a		asl a				asl 	a 							; put MSB of type into A:7
.96f8		30 09		bmi $9703			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96fa		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96fc		15 79		ora $79,x			ora 	NSExponent+1,x
.96fe		f0 06		beq $9706			beq 	_IntegerCode 				; if clear, then we have two integers
.9700		4c fc 98	jmp $98fc			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9703						_StringData:
.9703		4c c2 94	jmp $94c2			jmp 	StringConcat							; at least one string - don't know both are strings.
.9706						_IntegerCode:
.9706						AddCode:
.9706		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9708		55 51		eor $51,x			eor 	NSStatus+1,x
.970a		10 a9		bpl $96b5			bpl 	AddTopTwoStack
.970c		20 cf 96	jsr $96cf			jsr 	SubTopTwoStack 				; do a physical subtraction
.970f		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9711		10 07		bpl $971a			bpl 	_AddExit
.9713		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9715		95 50		sta $50,x			sta 	NSStatus,x
.9717		20 de a2	jsr $a2de			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.971a						_AddExit:
.971a		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; check for -0
.971d		d0 02		bne $9721			bne 	_AddNonZero
.971f		74 50		stz $50,x			stz 	NSStatus,x
.9721						_AddNonZero:
.9721		60		rts				rts
.9722						SubInteger:
.9722		fa		plx				plx
.9723		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9725		15 51		ora $51,x			ora 	NSStatus+1,x
.9727		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9728		0a		asl a				asl 	a
.9729		10 05		bpl $9730			bpl 	_NotRef
.972b		48		pha				pha
.972c		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.972f		68		pla				pla
.9730						_NotRef:
.9730		0a		asl a				asl 	a 							; put MSB of type into A:7
.9731		30 09		bmi $973c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9733		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9735		15 79		ora $79,x			ora 	NSExponent+1,x
.9737		f0 06		beq $973f			beq 	_IntegerCode 				; if clear, then we have two integers
.9739		4c 01 99	jmp $9901			jmp 	FloatingPointSub 							; otherwise at least one float.
.973c						_StringData:
.973c		4c a1 a4	jmp $a4a1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.973f						_IntegerCode:
.973f		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9741		49 80		eor #$80			eor 	#$80
.9743		95 51		sta $51,x			sta 	NSStatus+1,x
.9745		80 bf		bra $9706			bra 	AddCode 					; and do the same code as add.
.9747						AndInteger:
.9747		fa		plx				plx
.9748		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.974a		15 51		ora $51,x			ora 	NSStatus+1,x
.974c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.974d		0a		asl a				asl 	a
.974e		10 05		bpl $9755			bpl 	_NotRef
.9750		48		pha				pha
.9751		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9754		68		pla				pla
.9755						_NotRef:
.9755		0a		asl a				asl 	a
.9756		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9758		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.975a		15 79		ora $79,x			ora 	NSExponent+1,x
.975c		f0 03		beq $9761			beq 	_IntegerCode 				; if clear, then we have two integers
.975e		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.9761						_IntegerCode:
.9761		b5 58		lda $58,x			lda		NSMantissa0,x
.9763		35 59		and $59,x			and 		NSMantissa0+1,x
.9765		95 58		sta $58,x			sta 	NSMantissa0,x
.9767		b5 60		lda $60,x			lda		NSMantissa1,x
.9769		35 61		and $61,x			and 		NSMantissa1+1,x
.976b		95 60		sta $60,x			sta 	NSMantissa1,x
.976d		b5 68		lda $68,x			lda		NSMantissa2,x
.976f		35 69		and $69,x			and 		NSMantissa2+1,x
.9771		95 68		sta $68,x			sta 	NSMantissa2,x
.9773		b5 70		lda $70,x			lda		NSMantissa3,x
.9775		35 71		and $71,x			and 		NSMantissa3+1,x
.9777		95 70		sta $70,x			sta 	NSMantissa3,x
.9779		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.977b		60		rts				rts
.977c						OraInteger:
.977c		fa		plx				plx
.977d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.977f		15 51		ora $51,x			ora 	NSStatus+1,x
.9781		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9782		0a		asl a				asl 	a
.9783		10 05		bpl $978a			bpl 	_NotRef
.9785		48		pha				pha
.9786		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9789		68		pla				pla
.978a						_NotRef:
.978a		0a		asl a				asl 	a
.978b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.978d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.978f		15 79		ora $79,x			ora 	NSExponent+1,x
.9791		f0 03		beq $9796			beq 	_IntegerCode 				; if clear, then we have two integers
.9793		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.9796						_IntegerCode:
.9796		b5 58		lda $58,x			lda		NSMantissa0,x
.9798		15 59		ora $59,x			ora 		NSMantissa0+1,x
.979a		95 58		sta $58,x			sta 	NSMantissa0,x
.979c		b5 60		lda $60,x			lda		NSMantissa1,x
.979e		15 61		ora $61,x			ora 		NSMantissa1+1,x
.97a0		95 60		sta $60,x			sta 	NSMantissa1,x
.97a2		b5 68		lda $68,x			lda		NSMantissa2,x
.97a4		15 69		ora $69,x			ora 		NSMantissa2+1,x
.97a6		95 68		sta $68,x			sta 	NSMantissa2,x
.97a8		b5 70		lda $70,x			lda		NSMantissa3,x
.97aa		15 71		ora $71,x			ora 		NSMantissa3+1,x
.97ac		95 70		sta $70,x			sta 	NSMantissa3,x
.97ae		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97b0		60		rts				rts
.97b1						EorInteger:
.97b1		fa		plx				plx
.97b2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97b4		15 51		ora $51,x			ora 	NSStatus+1,x
.97b6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97b7		0a		asl a				asl 	a
.97b8		10 05		bpl $97bf			bpl 	_NotRef
.97ba		48		pha				pha
.97bb		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97be		68		pla				pla
.97bf						_NotRef:
.97bf		0a		asl a				asl 	a
.97c0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97c2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97c4		15 79		ora $79,x			ora 	NSExponent+1,x
.97c6		f0 03		beq $97cb			beq 	_IntegerCode 				; if clear, then we have two integers
.97c8		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.97cb						_IntegerCode:
.97cb		b5 58		lda $58,x			lda		NSMantissa0,x
.97cd		55 59		eor $59,x			eor 		NSMantissa0+1,x
.97cf		95 58		sta $58,x			sta 	NSMantissa0,x
.97d1		b5 60		lda $60,x			lda		NSMantissa1,x
.97d3		55 61		eor $61,x			eor 		NSMantissa1+1,x
.97d5		95 60		sta $60,x			sta 	NSMantissa1,x
.97d7		b5 68		lda $68,x			lda		NSMantissa2,x
.97d9		55 69		eor $69,x			eor 		NSMantissa2+1,x
.97db		95 68		sta $68,x			sta 	NSMantissa2,x
.97dd		b5 70		lda $70,x			lda		NSMantissa3,x
.97df		55 71		eor $71,x			eor 		NSMantissa3+1,x
.97e1		95 70		sta $70,x			sta 	NSMantissa3,x
.97e3		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97e5		60		rts				rts
.97e6						WordIndirect:
.97e6		fa		plx				plx
.97e7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97e9		15 51		ora $51,x			ora 	NSStatus+1,x
.97eb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ec		0a		asl a				asl 	a
.97ed		10 05		bpl $97f4			bpl 	_NotRef
.97ef		48		pha				pha
.97f0		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97f3		68		pla				pla
.97f4						_NotRef:
.97f4		0a		asl a				asl 	a
.97f5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97f7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97f9		15 79		ora $79,x			ora 	NSExponent+1,x
.97fb		f0 03		beq $9800			beq 	_IntegerCode 				; if clear, then we have two integers
.97fd		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.9800						_IntegerCode:
.9800		20 06 97	jsr $9706			jsr 	AddCode 					; add the two values
.9803		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9805		95 50		sta $50,x			sta 	NSStatus,x
.9807		60		rts				rts
.9808						ByteIndirect:
.9808		fa		plx				plx
.9809		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.980b		15 51		ora $51,x			ora 	NSStatus+1,x
.980d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.980e		0a		asl a				asl 	a
.980f		10 05		bpl $9816			bpl 	_NotRef
.9811		48		pha				pha
.9812		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9815		68		pla				pla
.9816						_NotRef:
.9816		0a		asl a				asl 	a
.9817		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9819		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.981b		15 79		ora $79,x			ora 	NSExponent+1,x
.981d		f0 03		beq $9822			beq 	_IntegerCode 				; if clear, then we have two integers
.981f		4c 97 a4	jmp $a497			jmp 	TypeError 					; anything else, type mismatch.
.9822						_IntegerCode:
.9822		20 06 97	jsr $9706			jsr 	AddCode 					; add the two values
.9825		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9827		95 50		sta $50,x			sta 	NSStatus,x
.9829		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.982a						ConvertInt16:
.982a		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.982c		86 60		stx $60				stx 	NSMantissa1
.982e		64 68		stz $68				stz 	NSMantissa2
.9830		64 70		stz $70				stz 	NSMantissa3
.9832		64 50		stz $50				stz 	NSStatus 					; positive integer
.9834		a2 00		ldx #$00			ldx 	#0 							; stack level
.9836		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9838		80 00		bra $983a			bra 	ConvertInt32
.983a						ConvertInt32:
.983a		5a		phy				phy
.983b		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.983d		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.983f		10 08		bpl $9849			bpl 	_CI32NotNeg
.9841		48		pha				pha
.9842		a9 2d		lda #$2d			lda 	#'-'
.9844		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9847		c8		iny				iny
.9848		68		pla				pla
.9849						_CI32NotNeg:
.9849		20 57 98	jsr $9857			jsr 	_CI32DivideConvert 			; recursive conversion
.984c		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.984e		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9851		7a		ply				ply
.9852		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9854		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9856		60		rts				rts
.9857						_CI32DivideConvert:
.9857		e8		inx				inx 								; write to next slot up
.9858		20 17 a3	jsr $a317			jsr 	NSMSetByte 		 			; write the base out.
.985b		ca		dex				dex
.985c		20 85 95	jsr $9585			jsr 	Int32Divide 				; divide
.985f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9861		48		pha				pha
.9862		20 42 95	jsr $9542			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9865		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; is it zero ?
.9868		f0 05		beq $986f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.986a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.986c		20 57 98	jsr $9857			jsr 	_CI32DivideConvert 			; and recusrively call.
.986f						_CI32NoRecurse:
.986f		68		pla				pla 								; remainder
.9870		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9872		90 02		bcc $9876			bcc 	_CI32NotHex
.9874		69 26		adc #$26			adc 	#6+32
.9876						_CI32NotHex:
.9876		69 30		adc #$30			adc 	#48
.9878		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.987b		c8		iny				iny
.987c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.987d						PrecedenceLevel:
>987d		04					.byte	 4	; $00 <<
>987e		02					.byte	 2	; $01 <=
>987f		02					.byte	 2	; $02 <>
>9880		00					.byte	 0	; $03 !!3
>9881		00					.byte	 0	; $04 ><
>9882		02					.byte	 2	; $05 >=
>9883		04					.byte	 4	; $06 >>
>9884		00					.byte	 0	; $07 !!7
>9885		00					.byte	 0	; $08 !!8
>9886		00					.byte	 0	; $09 !!9
>9887		00					.byte	 0	; $0a !!10
>9888		00					.byte	 0	; $0b !!11
>9889		00					.byte	 0	; $0c !!12
>988a		00					.byte	 0	; $0d !!13
>988b		00					.byte	 0	; $0e !!14
>988c		00					.byte	 0	; $0f !!15
>988d		00					.byte	 0	; $10 @
>988e		00					.byte	 0	; $11 !!17
>988f		00					.byte	 0	; $12 !!18
>9890		00					.byte	 0	; $13 [
>9891		04					.byte	 4	; $14 \
>9892		00					.byte	 0	; $15 ]
>9893		01					.byte	 1	; $16 ^
>9894		00					.byte	 0	; $17 _
>9895		00					.byte	 0	; $18 `
>9896		00					.byte	 0	; $19 !!25
>9897		00					.byte	 0	; $1a !!26
>9898		00					.byte	 0	; $1b {
>9899		01					.byte	 1	; $1c |
>989a		00					.byte	 0	; $1d }
>989b		00					.byte	 0	; $1e ~
>989c		00					.byte	 0	; $1f <7F>
>989d		00					.byte	 0	; $20
>989e		05					.byte	 5	; $21 !
>989f		00					.byte	 0	; $22 "
>98a0		00					.byte	 0	; $23 #
>98a1		05					.byte	 5	; $24 $
>98a2		04					.byte	 4	; $25 %
>98a3		01					.byte	 1	; $26 &
>98a4		00					.byte	 0	; $27 '
>98a5		00					.byte	 0	; $28 (
>98a6		00					.byte	 0	; $29 )
>98a7		04					.byte	 4	; $2a *
>98a8		03					.byte	 3	; $2b +
>98a9		00					.byte	 0	; $2c ,
>98aa		03					.byte	 3	; $2d -
>98ab		00					.byte	 0	; $2e .
>98ac		04					.byte	 4	; $2f /
>98ad		00					.byte	 0	; $30 0
>98ae		00					.byte	 0	; $31 1
>98af		00					.byte	 0	; $32 2
>98b0		00					.byte	 0	; $33 3
>98b1		00					.byte	 0	; $34 4
>98b2		00					.byte	 0	; $35 5
>98b3		00					.byte	 0	; $36 6
>98b4		00					.byte	 0	; $37 7
>98b5		00					.byte	 0	; $38 8
>98b6		00					.byte	 0	; $39 9
>98b7		00					.byte	 0	; $3a :
>98b8		00					.byte	 0	; $3b ;
>98b9		02					.byte	 2	; $3c <
>98ba		02					.byte	 2	; $3d =
>98bb		02					.byte	 2	; $3e >
>98bc		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.98bd						EvaluateExpressionAt0:
.98bd		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.98bf						EvaluateExpression:
.98bf		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.98c1						EvaluateExpressionAtPrecedence:
.98c1		48		pha				pha 								; save precedence level
.98c2		20 09 9d	jsr $9d09			jsr 	EvaluateTerm 				; evaluate term into level X.
.98c5		68		pla				pla 								; restore precedence level.
.98c6						_EXPRLoop:
.98c6		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.98c8		b1 30		lda ($30),y			lda 	(codePtr),y
.98ca		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.98cc		b0 25		bcs $98f3			bcs 	_EXPRExit
.98ce		da		phx				phx 								; read the operator precedence
.98cf		aa		tax				tax
.98d0		bd 7d 98	lda $987d,x			lda 	PrecedenceLevel,x
.98d3		fa		plx				plx
.98d4		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98d6		f0 1b		beq $98f3			beq 	_EXPRExit
.98d8		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98da		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98dc		c5 37		cmp $37				cmp 	zTemp0+1
.98de		b0 13		bcs $98f3			bcs		_EXPRExit 					; if current >= operator exit
.98e0		48		pha				pha 								; save current precedence.
.98e1		b1 30		lda ($30),y			lda 	(codePtr),y
.98e3		c8		iny				iny
.98e4		48		pha				pha
.98e5		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98e7		e8		inx				inx 								; work out the right hand side.
.98e8		20 c1 98	jsr $98c1			jsr 	EvaluateExpressionAtPrecedence
.98eb		ca		dex				dex
.98ec		68		pla				pla 								; get operator, call the code.
.98ed		20 f6 98	jsr $98f6			jsr 	_EXPRCaller
.98f0		68		pla				pla 								; restore precedence level
.98f1		80 d3		bra $98c6			bra 	_EXPRLoop 					; and go round.
.98f3						_EXPRExit:
.98f3		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98f5		60		rts				rts
.98f6						_EXPRCaller:
.98f6		da		phx				phx 								; save on stack, first thing is to restore it
.98f7		0a		asl a				asl 	a 							; double so can use vectors into X
.98f8		aa		tax				tax
.98f9		7c 24 90	jmp ($9024,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.98fc						FloatingPointAdd:
.98fc		20 72 9a	jsr $9a72			jsr 	FloatPrepare 				; prepare for floats
.98ff		80 09		bra $990a			bra 	FloatAdd
.9901						FloatingPointSub:
.9901		20 72 9a	jsr $9a72			jsr 	FloatPrepare 				; prepare for floats
.9904						FloatSubtract:
.9904		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9906		49 80		eor #$80			eor 	#$80
.9908		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.990a						FloatAdd:
.990a		48		pha				pha
.990b		5a		phy				phy
.990c		20 81 9a	jsr $9a81			jsr 	NSNormalise 				; normalise S[X]
.990f		f0 51		beq $9962			beq 	_FAReturn1
.9911		e8		inx				inx 								; normalise S[X+1]
.9912		20 81 9a	jsr $9a81			jsr 	NSNormalise
.9915		ca		dex				dex
.9916		c9 00		cmp #$00			cmp 	#0
.9918		f0 60		beq $997a			beq 	_FAExit 					; if so, just return A
.991a		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.991c		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.991e		f0 18		beq $9938			beq 	_FAExponentsEqual
.9920		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9922		a8		tay				tay
.9923		38		sec				sec 								; do a signed comparison of the exponents.
.9924		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9926		50 02		bvc $992a			bvc 	_FANoSignedChange
.9928		49 80		eor #$80			eor 	#$80
.992a						_FANoSignedChange:
.992a		29 80		and #$80			and 	#$80
.992c		10 02		bpl $9930			bpl 	_FAHaveMax
.992e		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9930						_FAHaveMax:
.9930		20 7d 99	jsr $997d			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9933		e8		inx				inx
.9934		20 7d 99	jsr $997d			jsr 	_FAShiftToExponent
.9937		ca		dex				dex
.9938						_FAExponentsEqual:
.9938		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.993a		55 51		eor $51,x			eor 	NSStatus+1,x
.993c		30 0e		bmi $994c			bmi 	_FADifferentSigns
.993e		20 b5 96	jsr $96b5			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9941		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9943		10 35		bpl $997a			bpl 	_FAExit 					; if no, we are done.
.9945		20 2e a3	jsr $a32e			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9948		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.994a		80 2e		bra $997a			bra 	_FAExit
.994c						_FADifferentSigns:
.994c		20 cf 96	jsr $96cf			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.994f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9951		10 06		bpl $9959			bpl 	_FACheckZero 				; if no, check for -0
.9953		20 d7 a2	jsr $a2d7			jsr 	NSMNegate 					; netate result
.9956		20 de a2	jsr $a2de			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9959						_FACheckZero:
.9959		20 37 a3	jsr $a337			jsr 	NSMIsZero	 				; check for -0
.995c		d0 1c		bne $997a			bne 	_FAExit
.995e		74 50		stz $50,x			stz 	NSStatus,x
.9960		80 18		bra $997a			bra 	_FAExit
.9962						_FAReturn1:
.9962		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9964		95 58		sta $58,x			sta 	NSMantissa0,x
.9966		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9968		95 60		sta $60,x			sta 	NSMantissa1,x
.996a		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.996c		95 68		sta $68,x			sta 	NSMantissa2,x
.996e		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9970		95 70		sta $70,x			sta 	NSMantissa3,x
.9972		b5 79		lda $79,x			lda 	NSExponent+1,x
.9974		95 78		sta $78,x			sta 	NSExponent,x
.9976		b5 51		lda $51,x			lda 	NSStatus+1,x
.9978		95 50		sta $50,x			sta 	NSStatus,x
.997a						_FAExit:
.997a		7a		ply				ply
.997b		68		pla				pla
.997c		60		rts				rts
.997d						_FAShiftToExponent:
.997d						_FAShiftToExponent2:
.997d		98		tya				tya 								; compare Y to exponent
.997e		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9980		f0 07		beq $9989			beq 	_FASEExit 					; exit if so.
.9982		20 2e a3	jsr $a32e			jsr 	NSMShiftRight	 			; shift the mantissa right
.9985		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9987		80 f4		bra $997d			bra 	_FAShiftToExponent2
.9989						_FASEExit:
.9989		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.998a						CompareFloat:
.998a		20 04 99	jsr $9904			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.998d		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.998f		29 f8		and #$f8			and 	#$F8
.9991		15 68		ora $68,x			ora 	NSMantissa2,x
.9993		15 70		ora $70,x			ora 	NSMantissa3,x
.9995		f0 08		beq $999f			beq 	_FCExit 					; zero, so approximately identical
.9997		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9999		34 50		bit $50,x			bit 	NSStatus,x
.999b		10 02		bpl $999f			bpl 	_FCExit
.999d						_FCNegative:
.999d		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.999f						_FCExit:
.999f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.99a0						FDivideCommand:
.99a0		fa		plx				plx	 								; restore stack position
.99a1		20 72 9a	jsr $9a72			jsr 	FloatPrepare 				; prepare for floats
.99a4						FloatDivide:
.99a4		48		pha				pha
.99a5		e8		inx				inx
.99a6		20 81 9a	jsr $9a81			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.99a9		ca		dex				dex
.99aa		c9 00		cmp #$00			cmp 	#0
.99ac		f0 1d		beq $99cb			beq 	_FDZero
.99ae		20 81 9a	jsr $9a81			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.99b1		f0 16		beq $99c9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.99b3		20 a6 95	jsr $95a6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.99b6		20 42 95	jsr $9542			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.99b9		20 81 9a	jsr $9a81			jsr		NSNormalise 				; renormalise
.99bc		20 36 96	jsr $9636			jsr 	CalculateSign 				; calculate result sign
.99bf		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.99c1		38		sec				sec
.99c2		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.99c4		38		sec				sec
.99c5		e9 1e		sbc #$1e			sbc 	#30
.99c7		95 78		sta $78,x			sta 	NSExponent,x
.99c9						_FDExit:
.99c9		68		pla				pla
.99ca		60		rts				rts
.99cb						_FDZero:
.99cb		a9 03		lda #$03		lda	#3
.99cd		4c b5 93	jmp $93b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.99d0						FloatFractionalPart:
.99d0		5a		phy				phy
.99d1		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.99d3		29 7f		and #$7f			and 	#$7F
.99d5		95 50		sta $50,x			sta 	NSStatus,x
.99d7		20 81 9a	jsr $9a81			jsr 	NSNormalise
.99da		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.99dc		38		sec				sec
.99dd		e9 e0		sbc #$e0			sbc 	#$E0
.99df		90 29		bcc $9a0a			bcc 	_FFPExit 					; already fractional
.99e1		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.99e3		b0 22		bcs $9a07			bcs 	_FFPZero
.99e5		a8		tay				tay 								; put count to do in Y
.99e6		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.99e8		20 0c 9a	jsr $9a0c			jsr 	_FFPPartial
.99eb		95 70		sta $70,x			sta 	NSMantissa3,x
.99ed		b5 68		lda $68,x			lda 	NSMantissa2,x
.99ef		20 0c 9a	jsr $9a0c			jsr 	_FFPPartial
.99f2		95 68		sta $68,x			sta 	NSMantissa2,x
.99f4		b5 60		lda $60,x			lda 	NSMantissa1,x
.99f6		20 0c 9a	jsr $9a0c			jsr 	_FFPPartial
.99f9		95 60		sta $60,x			sta 	NSMantissa1,x
.99fb		b5 58		lda $58,x			lda 	NSMantissa0,x
.99fd		20 0c 9a	jsr $9a0c			jsr 	_FFPPartial
.9a00		95 58		sta $58,x			sta 	NSMantissa0,x
.9a02		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; zeroed check.
.9a05		d0 03		bne $9a0a			bne 	_FFPExit
.9a07						_FFPZero:
.9a07		20 15 a3	jsr $a315			jsr 	NSMSetZero
.9a0a						_FFPExit:
.9a0a		7a		ply				ply
.9a0b		60		rts				rts
.9a0c						_FFPPartial:
.9a0c		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9a0e		f0 17		beq $9a27			beq 	_FFFPPExit
.9a10		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9a12		b0 0c		bcs $9a20			bcs 	_FFFPPWholeByte
.9a14		5a		phy				phy
.9a15						_FFFPPLeft:
.9a15		0a		asl a				asl 	a
.9a16		88		dey				dey
.9a17		d0 fc		bne $9a15			bne 	_FFFPPLeft
.9a19		7a		ply				ply
.9a1a						_FFFPPRight:
.9a1a		4a		lsr a				lsr 	a
.9a1b		88		dey				dey
.9a1c		d0 fc		bne $9a1a			bne 	_FFFPPRight
.9a1e		80 07		bra $9a27			bra 	_FFFPPExit
.9a20						_FFFPPWholeByte:
.9a20		98		tya				tya 								; subtract 8 from count
.9a21		38		sec				sec
.9a22		e9 08		sbc #$08			sbc 	#8
.9a24		a8		tay				tay
.9a25		a9 00		lda #$00			lda 	#0 							; and clear all
.9a27						_FFFPPExit:
.9a27		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9a28						FloatIntegerPart:
.9a28		48		pha				pha
.9a29		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9a2b		f0 1d		beq $9a4a			beq 	_FIPExit 					; if so do nothing
.9a2d		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; is it zero ?
.9a30		f0 15		beq $9a47			beq 	_FIPZero 					; if so return zero.
.9a32		20 81 9a	jsr $9a81			jsr 	NSNormalise 				; normalise
.9a35		f0 10		beq $9a47			beq 	_FIPZero 					; normalised to zero, exit zero
.9a37						_FIPShift:
.9a37		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a39		10 07		bpl $9a42			bpl 	_FIPCheckZero
.9a3b		20 2e a3	jsr $a32e			jsr 	NSMShiftRight 				; shift mantissa right
.9a3e		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a40		80 f5		bra $9a37			bra 	_FIPShift
.9a42						_FIPCheckZero:
.9a42		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; avoid -0 problem
.9a45		d0 03		bne $9a4a			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a47						_FIPZero:
.9a47		20 15 a3	jsr $a315			jsr 	NSMSetZero
.9a4a						_FIPExit:
.9a4a		68		pla				pla
.9a4b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a4c						FloatingPointMultiply:
.9a4c		20 72 9a	jsr $9a72			jsr 	FloatPrepare 				; prepare for floats
.9a4f						FloatMultiply:
.9a4f		48		pha				pha
.9a50		20 81 9a	jsr $9a81			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a53		f0 18		beq $9a6d			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a55		e8		inx				inx
.9a56		20 81 9a	jsr $9a81			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a59		ca		dex				dex
.9a5a		c9 00		cmp #$00			cmp 	#0
.9a5c		f0 0c		beq $9a6a			beq 	_FDSetZero
.9a5e		20 f8 95	jsr $95f8			jsr 	MultiplyShort 				; calculate the result.
.9a61		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a63		18		clc				clc
.9a64		75 79		adc $79,x			adc 	NSExponent+1,x
.9a66		95 78		sta $78,x			sta 	NSExponent,x
.9a68		80 03		bra $9a6d			bra 	_FDExit
.9a6a						_FDSetZero:
.9a6a		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; return 0
.9a6d						_FDExit:
.9a6d		20 81 9a	jsr $9a81			jsr 	NSNormalise 				; normalise the result
.9a70		68		pla				pla
.9a71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a72						FloatPrepare:
.9a72		20 7d 9b	jsr $9b7d			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a75		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a77		15 51		ora $51,x			ora 	NSStatus+1,x
.9a79		29 10		and #$10			and 	#NSBIsString
.9a7b		d0 01		bne $9a7e			bne 	_FDType
.9a7d		60		rts				rts
.9a7e						_FDType:
.9a7e		4c 97 a4	jmp $a497			jmp 	TypeError
.9a81						NSNormalise:
.9a81		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9a83		29 80		and #$80			and 	#$80
.9a85		09 08		ora #$08			ora 	#NSTFloat
.9a87		95 50		sta $50,x			sta 	NSStatus,x
.9a89		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; if zero exit
.9a8c		d0 07		bne $9a95			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a8e		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a90		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9a92		a9 00		lda #$00			lda 	#0 							; set Z flag
.9a94		60		rts				rts
.9a95						_NSNormaliseOptimise:
.9a95		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a97		d0 19		bne $9ab2			bne 	_NSNormaliseLoop
.9a99		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9a9b		30 15		bmi $9ab2			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a9d		95 70		sta $70,x			sta 	NSMantissa3,x
.9a9f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9aa1		95 68		sta $68,x			sta 	NSMantissa2,x
.9aa3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9aa5		95 60		sta $60,x			sta 	NSMantissa1,x
.9aa7		74 58		stz $58,x			stz 	NSMantissa0,x
.9aa9		b5 78		lda $78,x			lda 	NSExponent,x
.9aab		38		sec				sec
.9aac		e9 08		sbc #$08			sbc 	#8
.9aae		95 78		sta $78,x			sta 	NSExponent,x
.9ab0		80 e3		bra $9a95			bra 	_NSNormaliseOptimise
.9ab2						_NSNormaliseLoop:
.9ab2		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9ab4		70 07		bvs $9abd			bvs 	_NSNExit 					; exit if so with Z flag clear
.9ab6		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; shift mantissa left
.9ab9		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9abb		80 f5		bra $9ab2			bra 	_NSNormaliseLoop
.9abd						_NSNExit:
.9abd		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9abf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ac0						AssignNumber:
.9ac0		5a		phy				phy
.9ac1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9ac3		85 36		sta $36				sta 	zTemp0
.9ac5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ac7		85 37		sta $37				sta 	zTemp0+1
.9ac9		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9acb		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9acd		95 50		sta $50,x			sta 	NSStatus,x
.9acf		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ad1		c9 08		cmp #$08			cmp 	#NSTFloat
.9ad3		f0 24		beq $9af9			beq 	_ANFloat
.9ad5		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9ad7		f0 03		beq $9adc			beq		_ANNotFloat
.9ad9		4c 92 a4	jmp $a492			jmp 	RangeError					; if it is, report an error.
.9adc						_ANNotFloat:
.9adc		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ade		29 03		and #$03			and 	#3
.9ae0		d0 05		bne $9ae7			bne 	_ANByteWord
.9ae2		20 04 9b	jsr $9b04			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ae5		80 1b		bra $9b02			bra 	_ANExit
.9ae7						_ANByteWord:
.9ae7		48		pha				pha 								; save count
.9ae8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9aea		92 36		sta ($36)			sta 	(zTemp0)
.9aec		68		pla				pla
.9aed		c9 01		cmp #$01			cmp	 	#1
.9aef		f0 11		beq $9b02			beq 	_ANExit
.9af1		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9af3		a0 01		ldy #$01			ldy 	#1
.9af5		91 36		sta ($36),y			sta 	(zTemp0),y
.9af7		80 09		bra $9b02			bra 	_ANExit
.9af9						_ANFloat:
.9af9		20 04 9b	jsr $9b04			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9afc		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9afe		a0 04		ldy #$04			ldy 	#4
.9b00		91 36		sta ($36),y			sta 	(zTemp0),y
.9b02						_ANExit:
.9b02		7a		ply				ply
.9b03		60		rts				rts
.9b04						_ANCopy4PackSign:
.9b04		a0 03		ldy #$03			ldy 	#3
.9b06		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9b08		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9b0a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9b0c		91 36		sta ($36),y			sta 	(zTemp0),y
.9b0e		88		dey				dey
.9b0f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b11		91 36		sta ($36),y			sta 	(zTemp0),y
.9b13		88		dey				dey
.9b14		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b16		91 36		sta ($36),y			sta 	(zTemp0),y
.9b18		88		dey				dey
.9b19		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b1b		91 36		sta ($36),y			sta 	(zTemp0),y
.9b1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9b1e						AssignString:
.9b1e		5a		phy				phy
.9b1f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b21		85 38		sta $38				sta 	zTemp1
.9b23		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b25		85 39		sta $39				sta 	zTemp1+1
.9b27		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b29		85 36		sta $36				sta 	zTemp0
.9b2b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b2d		85 37		sta $37				sta 	zTemp0+1
.9b2f		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b31		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b33		f0 23		beq $9b58			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b35		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b36		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b38		e9 02		sbc #$02			sbc 	#2
.9b3a		85 3c		sta $3c				sta 	zsTemp
.9b3c		a0 01		ldy #$01			ldy 	#1
.9b3e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b40		e9 00		sbc #$00			sbc 	#0
.9b42		85 3d		sta $3d				sta 	zsTemp+1
.9b44		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b46						_ASGetLength:
.9b46		c8		iny				iny
.9b47		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b49		d0 fb		bne $9b46			bne 	_ASGetLength
.9b4b		98		tya				tya 								; is this length <= current length
.9b4c		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b4e		90 1e		bcc $9b6e			bcc 	_ASCopyString
.9b50		f0 1c		beq $9b6e			beq 	_ASCopyString
.9b52		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b54		a0 01		ldy #$01			ldy 	#1
.9b56		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b58						_ASNewStringRequired:
.9b58		e8		inx				inx 								; concrete the new string.
.9b59		20 e3 b4	jsr $b4e3			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b5c		ca		dex				dex
.9b5d		18		clc				clc
.9b5e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b60		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b62		92 36		sta ($36)			sta 	(zTemp0)
.9b64		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b66		69 00		adc #$00			adc 	#0
.9b68		a0 01		ldy #$01			ldy 	#1
.9b6a		91 36		sta ($36),y			sta 	(zTemp0),y
.9b6c		80 0d		bra $9b7b			bra 	_ASExit
.9b6e						_ASCopyString:
.9b6e		a0 00		ldy #$00			ldy 	#0
.9b70						_ASCopyLoop:
.9b70		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b72		c8		iny				iny
.9b73		c8		iny				iny
.9b74		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b76		88		dey				dey
.9b77		c9 00		cmp #$00			cmp 	#0
.9b79		d0 f5		bne $9b70			bne 	_ASCopyLoop
.9b7b						_ASExit:
.9b7b		7a		ply				ply
.9b7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b7d						DereferenceTopTwo:
.9b7d		e8		inx				inx
.9b7e		20 82 9b	jsr $9b82			jsr 	Dereference 				; deref x+1
.9b81		ca		dex				dex  								; falls through to deref x
.9b82						Dereference:
.9b82		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9b84		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9b86		f0 48		beq $9bd0			beq 	_DRFExit 					; not a reference, so exit.
.9b88		5a		phy				phy
.9b89		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b8b		85 36		sta $36				sta 	zTemp0
.9b8d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b8f		85 37		sta $37				sta 	zTemp0+1
.9b91		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9b93		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b95		95 58		sta $58,x			sta 	NSMantissa0,x
.9b97		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9b99		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b9b		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b9d		f0 0e		beq $9bad			beq 	_DRFDereferenceTwo
.9b9f		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9ba1		f0 2f		beq $9bd2			beq 	_DRFFull
.9ba3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9ba5		29 03		and #$03			and 	#3
.9ba7		f0 29		beq $9bd2			beq 	_DRFFull 					; the whole word
.9ba9		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9bab		f0 06		beq $9bb3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9bad						_DRFDereferenceTwo:
.9bad		a0 01		ldy #$01			ldy 	#1
.9baf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bb1		95 60		sta $60,x			sta 	NSMantissa1,x
.9bb3						_DRFClear23:
.9bb3		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9bb5		74 70		stz $70,x			stz 	NSMantissa3,x
.9bb7		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9bb9		29 18		and #$18			and 	#NSBTypeMask
.9bbb		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9bbd		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9bbf		d0 0e		bne $9bcf			bne 	_DRFNotString
.9bc1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9bc3		15 60		ora $60,x			ora 	NSMantissa1,x
.9bc5		d0 08		bne $9bcf			bne 	_DRFNotString
.9bc7		a9 d1		lda #$d1			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9bc9		95 58		sta $58,x			sta 	NSMantissa0,x
.9bcb		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9bcd		95 60		sta $60,x			sta 	NSMantissa1,x
.9bcf						_DRFNotString
.9bcf		7a		ply				ply 								; restore Y and exit
.9bd0						_DRFExit:
.9bd0		60		rts				rts
.9bd1						_DRFNullString:
>9bd1		00						.byte 	0
.9bd2						_DRFFull:
.9bd2		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9bd4		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bd6		95 60		sta $60,x			sta 	NSMantissa1,x
.9bd8		c8		iny				iny
.9bd9		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bdb		95 68		sta $68,x			sta 	NSMantissa2,x
.9bdd		c8		iny				iny
.9bde		b1 36		lda ($36),y			lda 	(zTemp0),y
.9be0		95 70		sta $70,x			sta 	NSMantissa3,x
.9be2		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9be4		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9be6		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9be8		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9bea		f0 05		beq $9bf1			beq 	_DRFNoExponent
.9bec		c8		iny				iny 								; if not, read the exponent as well.
.9bed		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bef		95 78		sta $78,x			sta 	NSExponent,x
.9bf1						_DRFNoExponent:
.9bf1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9bf3		10 0a		bpl $9bff			bpl 	_DRFExit2 					; if not, then exit.
.9bf5		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9bf7		95 70		sta $70,x			sta 	NSMantissa3,x
.9bf9		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9bfb		09 80		ora #$80			ora 	#NSBIsNegative
.9bfd		95 50		sta $50,x			sta 	NSStatus,x
.9bff						_DRFExit2:
.9bff		7a		ply				ply
.9c00		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9c01						EncodeNumberStart:
.9c01		38		sec				sec
.9c02		80 01		bra $9c05			bra 	EncodeNumberContinue+1
.9c04						EncodeNumberContinue:
.9c04		18		clc				clc
.9c05						EncodeNumber:
.9c05		08		php				php 								; save reset flag.
.9c06		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9c08		f0 12		beq $9c1c			beq 	_ENIsOkay
.9c0a		c9 30		cmp #$30			cmp 	#"0"
.9c0c		90 04		bcc $9c12			bcc 	_ENBadNumber
.9c0e		c9 3a		cmp #$3a			cmp 	#"9"+1
.9c10		90 0a		bcc $9c1c			bcc 	_ENIsOkay
.9c12						_ENBadNumber:
.9c12		28		plp				plp 								; throw saved reset
.9c13		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9c16		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c18		f0 7b		beq $9c95			beq 	_ENConstructFinal
.9c1a						_ENFail:
.9c1a		18		clc				clc 								; not allowed
.9c1b		60		rts				rts
.9c1c						_ENIsOkay:
.9c1c		28		plp				plp 								; are we restarting
.9c1d		90 15		bcc $9c34			bcc 	_ENNoRestart
.9c1f						_ENStartEncode:
.9c1f		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9c21		f0 0c		beq $9c2f			beq 	_ENFirstDP
.9c23		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9c25		20 17 a3	jsr $a317			jsr 	NSMSetByte 					; in single byte mode.
.9c28		a9 01		lda #$01			lda 	#ESTA_Low
.9c2a						_ENExitChange:
.9c2a		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9c2d		38		sec				sec
.9c2e		60		rts				rts
.9c2f						_ENFirstDP:
.9c2f		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; clear integer part
.9c32		80 3c		bra $9c70			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c34						_ENNoRestart:
.9c34		48		pha				pha 								; save digit or DP on stack.
.9c35		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9c38		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c3a		f0 09		beq $9c45			beq  	_ESTALowState
.9c3c		c9 02		cmp #$02			cmp 	#ESTA_High
.9c3e		f0 26		beq $9c66			beq 	_ESTAHighState
.9c40		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c42		f0 38		beq $9c7c			beq 	_ESTADecimalState
>9c44		db						.byte 	$DB 						; causes a break in the emulator
.9c45						_ESTALowState:
.9c45		68		pla				pla 								; get value back
.9c46		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c48		f0 26		beq $9c70			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c4a		29 0f		and #$0f			and 	#15 						; make digit
.9c4c		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9c4f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c51		0a		asl a				asl 	a
.9c52		0a		asl a				asl 	a
.9c53		75 58		adc $58,x			adc 	NSMantissa0,x
.9c55		0a		asl a				asl 	a
.9c56		6d 06 04	adc $0406			adc 	digitTemp
.9c59		95 58		sta $58,x			sta 	NSMantissa0,x
.9c5b		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c5d		90 05		bcc $9c64			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c5f		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c61		8d 05 04	sta $0405			sta 	encodeState
.9c64						_ESTANoSwitch:
.9c64		38		sec				sec
.9c65		60		rts				rts
.9c66						_ESTAHighState:
.9c66		68		pla				pla 								; get value back
.9c67		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c69		f0 05		beq $9c70			beq 	_ESTASwitchFloat
.9c6b		20 c9 9c	jsr $9cc9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c6e		38		sec				sec
.9c6f		60		rts				rts
.9c70						_ESTASwitchFloat:
.9c70		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c73		e8		inx				inx 								; zero the decimal additive.
.9c74		20 15 a3	jsr $a315			jsr 	NSMSetZero
.9c77		ca		dex				dex
.9c78		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c7a		80 ae		bra $9c2a			bra 	_ENExitChange
.9c7c						_ESTADecimalState:
.9c7c		68		pla				pla 								; digit.
.9c7d		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c7f		f0 99		beq $9c1a			beq 	_ENFail
.9c81		e8		inx				inx 								; put digit into fractional part of X+1
.9c82		20 c9 9c	jsr $9cc9			jsr 	ESTAShiftDigitIntoMantissa
.9c85		ca		dex				dex
.9c86		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9c89		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9c8c		c9 0b		cmp #$0b			cmp 	#11
.9c8e		f0 02		beq $9c92			beq 	_ESTADSFail
.9c90		38		sec				sec
.9c91		60		rts				rts
.9c92						_ESTADSFail:
.9c92		4c 92 a4	jmp $a492			jmp 	RangeError
.9c95						_ENConstructFinal:
.9c95		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9c98		f0 2d		beq $9cc7			beq 	_ENCFExit 					; no decimals
.9c9a		5a		phy				phy
.9c9b		0a		asl a				asl 	a 							; x 4 and CLC
.9c9c		0a		asl a				asl 	a
.9c9d		6d 07 04	adc $0407			adc 	decimalCount
.9ca0		a8		tay				tay
.9ca1		b9 51 a4	lda $a451,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9ca4		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9ca6		b9 52 a4	lda $a452,y			lda 	DecimalScalarTable-5+1,y
.9ca9		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9cab		b9 53 a4	lda $a453,y			lda 	DecimalScalarTable-5+2,y
.9cae		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9cb0		b9 54 a4	lda $a454,y			lda 	DecimalScalarTable-5+3,y
.9cb3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9cb5		b9 55 a4	lda $a455,y			lda 	DecimalScalarTable-5+4,y
.9cb8		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9cba		a9 08		lda #$08			lda 	#NSTFloat
.9cbc		95 52		sta $52,x			sta 	NSStatus+2,x
.9cbe		7a		ply				ply
.9cbf		e8		inx				inx 								; multiply decimal const by decimal scalar
.9cc0		20 4f 9a	jsr $9a4f			jsr 	FloatMultiply
.9cc3		ca		dex				dex
.9cc4		20 0a 99	jsr $990a			jsr 	FloatAdd 					; add to integer part.
.9cc7						_ENCFExit:
.9cc7		18		clc				clc 								; reject the digit.
.9cc8		60		rts				rts
.9cc9						ESTAShiftDigitIntoMantissa:
.9cc9		29 0f		and #$0f			and 	#15 						; save digit
.9ccb		48		pha				pha
.9ccc		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9cce		48		pha				pha
.9ccf		b5 68		lda $68,x			lda 	NSMantissa2,x
.9cd1		48		pha				pha
.9cd2		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cd4		48		pha				pha
.9cd5		b5 58		lda $58,x			lda 	NSMantissa0,x
.9cd7		48		pha				pha
.9cd8		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; x 2
.9cdb		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; x 4
.9cde		18		clc				clc 								; pop mantissa and add
.9cdf		68		pla				pla
.9ce0		75 58		adc $58,x			adc 	NSMantissa0,x
.9ce2		95 58		sta $58,x			sta 	NSMantissa0,x
.9ce4		68		pla				pla
.9ce5		75 60		adc $60,x			adc 	NSMantissa1,x
.9ce7		95 60		sta $60,x			sta 	NSMantissa1,x
.9ce9		68		pla				pla
.9cea		75 68		adc $68,x			adc 	NSMantissa2,x
.9cec		95 68		sta $68,x			sta 	NSMantissa2,x
.9cee		68		pla				pla
.9cef		75 70		adc $70,x			adc 	NSMantissa3,x
.9cf1		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9cf3		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; x 10
.9cf6		68		pla				pla 								; add digit
.9cf7		18		clc				clc
.9cf8		75 58		adc $58,x			adc 	NSMantissa0,x
.9cfa		95 58		sta $58,x			sta 	NSMantissa0,x
.9cfc		90 0a		bcc $9d08			bcc 	_ESTASDExit
.9cfe		f6 60		inc $60,x			inc 	NSMantissa1,x
.9d00		d0 06		bne $9d08			bne 	_ESTASDExit
.9d02		f6 68		inc $68,x			inc 	NSMantissa2,x
.9d04		d0 02		bne $9d08			bne 	_ESTASDExit
.9d06		f6 70		inc $70,x			inc 	NSMantissa3,x
.9d08						_ESTASDExit:
.9d08		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9d09						EvaluateTerm:
.9d09		b1 30		lda ($30),y			lda 	(codePtr),y
.9d0b		30 18		bmi $9d25			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9d0d		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9d0f		b0 6c		bcs $9d7d			bcs 	_ETVariable
.9d11		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9d13		90 6b		bcc $9d80			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9d15		c9 3a		cmp #$3a			cmp 	#'9'+1
.9d17		b0 67		bcs $9d80			bcs 	_ETPuncUnary
.9d19		20 01 9c	jsr $9c01			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9d1c						_ETNumber:
.9d1c		c8		iny				iny 								; keep encoding until we have the numbers
.9d1d		b1 30		lda ($30),y			lda 	(codePtr),y
.9d1f		20 04 9c	jsr $9c04			jsr 	EncodeNumberContinue
.9d22		b0 f8		bcs $9d1c			bcs 	_ETNumber 					; go back if accepted.
.9d24		60		rts				rts
.9d25						_ETCheckUnary:
.9d25		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9d27		f0 3f		beq $9d68			beq 	_ETString
.9d29		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9d2b		f0 12		beq $9d3f			beq 	_ETHexConstant
.9d2d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d2f		90 0b		bcc $9d3c			bcc 	_ETSyntaxError
.9d31		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1
.9d33		b0 07		bcs $9d3c			bcs 	_ETSyntaxError
.9d35		da		phx				phx 								; push X on the stack
.9d36		0a		asl a				asl 	a 							; put vector x 2 into X
.9d37		aa		tax				tax
.9d38		c8		iny				iny 								; consume unary function token
.9d39		7c a4 90	jmp ($90a4,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d3c						_ETSyntaxError:
.9d3c		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.9d3f						_ETHexConstant:
.9d3f		c8		iny				iny 								; skip #
.9d40		c8		iny				iny 								; skip count
.9d41		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; clear result
.9d44						_ETHLoop:
.9d44		b1 30		lda ($30),y			lda 	(codePtr),y
.9d46		c8		iny				iny 								; and consume
.9d47		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d49		f0 1c		beq $9d67			beq 	_ETHExit
.9d4b		48		pha				pha 								; save on stack.
.9d4c		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; x 2
.9d4f		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; x 4
.9d52		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; x 8
.9d55		20 24 a3	jsr $a324			jsr 	NSMShiftLeft 				; x 16
.9d58		68		pla				pla 								; ASCII
.9d59		c9 41		cmp #$41			cmp 	#'A'
.9d5b		90 02		bcc $9d5f			bcc 	_ETHNotChar
.9d5d		e9 07		sbc #$07			sbc 	#7
.9d5f						_ETHNotChar:
.9d5f		29 0f		and #$0f			and 	#15 						; digit now
.9d61		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d63		95 58		sta $58,x			sta 	NSMantissa0,x
.9d65		80 dd		bra $9d44			bra 	_ETHLoop 					; go round.
.9d67						_ETHExit:
.9d67		60		rts				rts
.9d68						_ETString:
.9d68		c8		iny				iny 								; look at length
.9d69		b1 30		lda ($30),y			lda 	(codePtr),y
.9d6b		48		pha				pha
.9d6c		c8		iny				iny 								; first character
.9d6d		20 14 a7	jsr $a714			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d70		68		pla				pla 								; restore count and save
.9d71		85 36		sta $36				sta 	zTemp0
.9d73		98		tya				tya 								; add length to Y to skip it.
.9d74		18		clc				clc
.9d75		65 36		adc $36				adc 	zTemp0
.9d77		a8		tay				tay
.9d78		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d7a		95 50		sta $50,x			sta 	NSStatus,x
.9d7c		60		rts				rts
.9d7d						_ETVariable:
.9d7d		4c d2 9d	jmp $9dd2			jmp 	VariableHandler
.9d80						_ETPuncUnary:
.9d80		c8		iny				iny 								; consume the unary character
.9d81		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d83		f0 2b		beq $9db0			beq 	_ETUnaryNegate
.9d85		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; @ reference -> constant
.9d87		f0 36		beq $9dbf			beq 	_ETDereference
.9d89		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d8b		f0 3e		beq $9dcb			beq 	_ETParenthesis
.9d8d		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d8f		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d91		f0 06		beq $9d99			beq 	_ETIndirection
.9d93		e6 36		inc $36				inc 	zTemp0
.9d95		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d97		d0 a3		bne $9d3c			bne 	_ETSyntaxError
.9d99						_ETIndirection:
.9d99		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d9b		1a		inc a				inc 	a
.9d9c		48		pha				pha
.9d9d		20 09 9d	jsr $9d09			jsr 	EvaluateTerm				; evaluate the term
.9da0		20 82 9b	jsr $9b82			jsr 	Dereference 				; dereference it.
.9da3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9da5		d0 06		bne $9dad			bne 	_ETTypeMismatch
.9da7		68		pla				pla 								; indirection 1-2
.9da8		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9daa		95 50		sta $50,x			sta 	NSStatus,x
.9dac		60		rts				rts
.9dad						_ETTypeMismatch:
.9dad		4c 97 a4	jmp $a497			jmp 	TypeError
.9db0						_ETUnaryNegate:
.9db0		20 09 9d	jsr $9d09			jsr 	EvaluateTerm				; evaluate the term
.9db3		20 82 9b	jsr $9b82			jsr 	Dereference 				; dereference it.
.9db6		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9db8		29 10		and #$10			and 	#NSTString
.9dba		d0 f1		bne $9dad			bne 	_ETTypeMismatch
.9dbc		4c d7 a2	jmp $a2d7			jmp 	NSMNegate  					; just toggles the sign bit.
.9dbf						_ETDereference:
.9dbf		20 09 9d	jsr $9d09			jsr 	EvaluateTerm				; evaluate the term
.9dc2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9dc4		29 20		and #$20			and 	#NSBIsReference
.9dc6		f0 e5		beq $9dad			beq 	_ETTypeMismatch
.9dc8		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9dca		60		rts				rts
.9dcb						_ETParenthesis:
.9dcb		20 bf 98	jsr $98bf			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9dce		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; check for )
.9dd1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9dd2						VariableHandler:
.9dd2		b1 30		lda ($30),y			lda 	(codePtr),y
.9dd4		18		clc				clc
.9dd5		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9dd7		85 37		sta $37				sta 	zTemp0+1
.9dd9		c8		iny				iny
.9dda		b1 30		lda ($30),y			lda 	(codePtr),y
.9ddc		85 36		sta $36				sta 	zTemp0
.9dde		c8		iny				iny
.9ddf		18		clc				clc									; copy variable address+3 to mantissa
.9de0		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9de2		95 58		sta $58,x			sta 	NSMantissa0,x
.9de4		a5 37		lda $37				lda 	zTemp0+1
.9de6		69 00		adc #$00			adc 	#0
.9de8		95 60		sta $60,x			sta 	NSMantissa1,x
.9dea		74 68		stz $68,x			stz 	NSMantissa2,x
.9dec		74 70		stz $70,x			stz 	NSMantissa3,x
.9dee		74 78		stz $78,x			stz 	NSExponent,x
.9df0		5a		phy				phy
.9df1		a0 02		ldy #$02			ldy 	#2 							; read type
.9df3		b1 36		lda ($36),y			lda 	(zTemp0),y
.9df5		7a		ply				ply
.9df6		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9df8		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9dfa		95 50		sta $50,x			sta 	NSStatus,x
.9dfc		29 04		and #$04			and 	#NSBIsArray
.9dfe		d0 01		bne $9e01			bne 	_VHArray
.9e00		60		rts				rts
.9e01						_VHArray:
.9e01		e8		inx				inx
.9e02		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9e05		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9e07		95 51		sta $51,x			sta 	NSStatus+1,x
.9e09		b1 30		lda ($30),y			lda 	(codePtr),y
.9e0b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9e0d		d0 06		bne $9e15			bne 	_VHNoSecondIndex
.9e0f		c8		iny				iny 								; skip the comma
.9e10		e8		inx				inx
.9e11		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9e14		ca		dex				dex
.9e15						_VHNoSecondIndex:
.9e15		ca		dex				dex 								; set X back.
.9e16		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; and check the right bracket.
.9e19		5a		phy				phy 								; save position
.9e1a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9e1c		85 3e		sta $3e				sta 	zaTemp
.9e1e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e20		85 3f		sta $3f				sta 	zaTemp+1
.9e22		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9e24		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e26		f0 5d		beq $9e85			beq 	_VHBadArray
.9e28		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9e2a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e2c		f0 02		beq $9e30			beq 	_VHHas2Mask
.9e2e		a9 ff		lda #$ff			lda 	#$FF
.9e30						_VHHas2Mask:
.9e30		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e32		f0 4c		beq $9e80			beq 	_VHBadIndex
.9e34		0a		asl a				asl 	a 							; carry will be set if a second index
.9e35		90 08		bcc $9e3f			bcc 	_VHCheckFirstIndex
.9e37		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e39		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e3b		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e3d		90 41		bcc $9e80			bcc 	_VHBadIndex
.9e3f						_VHCheckFirstIndex:
.9e3f		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e41		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e43		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e45		90 39		bcc $9e80			bcc 	_VHBadIndex
.9e47		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e49		64 37		stz $37				stz 	zTemp0+1
.9e4b		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e4d		30 0e		bmi $9e5d			bmi 	_VHNoMultiply
.9e4f		da		phx				phx
.9e50		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e52		48		pha				pha
.9e53		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e55		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e57		1a		inc a				inc 	a 							; add 1 for zero base
.9e58		fa		plx				plx
.9e59		20 c0 a2	jsr $a2c0			jsr 	Multiply8x8 				; calculate -> Z0
.9e5c		fa		plx				plx
.9e5d						_VHNoMultiply:
.9e5d		18		clc				clc
.9e5e		a5 36		lda $36				lda 	zTemp0
.9e60		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e62		85 36		sta $36				sta 	zTemp0
.9e64		a5 37		lda $37				lda 	zTemp0+1
.9e66		69 00		adc #$00			adc 	#0
.9e68		85 37		sta $37				sta 	zTemp0+1
.9e6a		b5 50		lda $50,x			lda 	NSStatus,x
.9e6c		20 49 89	jsr $8949			jsr 	ScaleByBaseType
.9e6f		18		clc				clc
.9e70		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e72		65 36		adc $36				adc 	zTemp0
.9e74		95 58		sta $58,x			sta 	NSMantissa0,x
.9e76		a0 01		ldy #$01			ldy 	#1
.9e78		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e7a		65 37		adc $37				adc 	zTemp0+1
.9e7c		95 60		sta $60,x			sta 	NSMantissa1,x
.9e7e		7a		ply				ply 								; restore position
.9e7f		60		rts				rts
.9e80						_VHBadIndex:
.9e80		a9 17		lda #$17		lda	#23
.9e82		4c b5 93	jmp $93b5		jmp	ErrorHandler
.9e85						_VHBadArray:
.9e85		a9 18		lda #$18		lda	#24
.9e87		4c b5 93	jmp $93b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9e8a						AbsUnary:
.9e8a		fa		plx				plx 								; restore stack pos
.9e8b		20 63 a2	jsr $a263			jsr 	EvaluateNumber 				; get a float or int
.9e8e		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9e91		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9e93		29 7f		and #$7f			and 	#$7F
.9e95		95 50		sta $50,x			sta 	NSStatus,x
.9e97		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e98						AllocUnary:
.9e98		fa		plx				plx 								; restore stack pos
.9e99		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger		; get bytes required.
.9e9c		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9e9f		da		phx				phx 								; save X/Y
.9ea0		5a		phy				phy
.9ea1		8a		txa				txa 								; copy X into Y
.9ea2		a8		tay				tay
.9ea3		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9ea6		aa		tax				tax
.9ea7		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9eaa		20 b7 9e	jsr $9eb7			jsr 	AllocateXABytes 			; allocate memory
.9ead		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9eb0		8a		txa				txa 	 							; typing is 16 bit integer.
.9eb1		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9eb4		7a		ply				ply
.9eb5		fa		plx				plx
.9eb6		60		rts				rts
.9eb7						AllocateXABytes:
.9eb7		5a		phy				phy
.9eb8		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9ebb		84 36		sty $36				sty 	zTemp0
.9ebd		5a		phy				phy
.9ebe		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.9ec1		84 37		sty $37				sty 	zTemp0+1
.9ec3		5a		phy				phy
.9ec4		18		clc				clc 								; add to low memory pointer
.9ec5		6d 08 04	adc $0408			adc 	lowMemPtr
.9ec8		8d 08 04	sta $0408			sta 	lowMemPtr
.9ecb		8a		txa				txa
.9ecc		6d 09 04	adc $0409			adc 	lowMemPtr+1
.9ecf		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9ed2		b0 2f		bcs $9f03			bcs 	CISSMemory
.9ed4		20 f5 9e	jsr $9ef5			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9ed7						_ClearMemory:
.9ed7		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.9eda		c5 36		cmp $36				cmp 	zTemp0
.9edc		d0 07		bne $9ee5			bne 	_CMClearNext
.9ede		ad 09 04	lda $0409			lda 	lowMemPtr+1
.9ee1		c5 37		cmp $37				cmp 	zTemp0+1
.9ee3		f0 0c		beq $9ef1			beq 	_CMExit
.9ee5						_CMClearNext:
.9ee5		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9ee7		92 36		sta ($36)			sta 	(zTemp0)
.9ee9		e6 36		inc $36				inc 	zTemp0
.9eeb		d0 ea		bne $9ed7			bne 	_ClearMemory
.9eed		e6 37		inc $37				inc		zTemp0+1
.9eef		80 e6		bra $9ed7			bra 	_ClearMemory
.9ef1						_CMExit:
.9ef1		fa		plx				plx
.9ef2		68		pla				pla
.9ef3		7a		ply				ply
.9ef4		60		rts				rts
.9ef5						CheckIdentifierStringSpace:
.9ef5		48		pha				pha
.9ef6		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.9ef9		18		clc				clc
.9efa		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9efc		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.9eff		b0 02		bcs $9f03			bcs 	CISSMemory
.9f01		68		pla				pla
.9f02		60		rts				rts
.9f03						CISSMemory:
.9f03		a9 06		lda #$06		lda	#6
.9f05		4c b5 93	jmp $93b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9f08						AscUnary:
.9f08		fa		plx				plx 								; restore stack pos
.9f09		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; get a string
.9f0c		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9f0e		20 17 a3	jsr $a317			jsr 	NSMSetByte 					; ASC("") will return zero.
.9f11		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9f14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9f15						FracUnary:
.9f15		fa		plx				plx 								; restore stack pos
.9f16		20 63 a2	jsr $a263			jsr 	EvaluateNumber 				; get a float or int
.9f19		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9f1c		b5 50		lda $50,x			lda 	NSStatus,x
.9f1e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f20		f0 04		beq $9f26			beq 	_IUZero
.9f22		20 d0 99	jsr $99d0			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9f25		60		rts				rts
.9f26						_IUZero:
.9f26		20 15 a3	jsr $a315			jsr 	NSMSetZero
.9f29		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9f2a						IntUnary:
.9f2a		fa		plx				plx 								; restore stack pos
.9f2b		20 63 a2	jsr $a263			jsr 	EvaluateNumber 				; get a float or int
.9f2e		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9f31		b5 50		lda $50,x			lda 	NSStatus,x
.9f33		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f35		f0 03		beq $9f3a			beq 	_IUExit
.9f37		20 28 9a	jsr $9a28			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f3a						_IUExit:
.9f3a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f3b						LenUnary:
.9f3b		fa		plx				plx 								; restore stack pos
.9f3c		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; get a string
.9f3f		5a		phy				phy
.9f40		a0 00		ldy #$00			ldy 	#0 							; find length
.9f42						_LenFind:
.9f42		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f44		f0 06		beq $9f4c			beq 	_LenExit
.9f46		c8		iny				iny
.9f47		d0 f9		bne $9f42			bne 	_LenFind
.9f49		4c 92 a4	jmp $a492			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f4c						_LenExit:
.9f4c		98		tya				tya		 							; return length
.9f4d		20 17 a3	jsr $a317			jsr 	NSMSetByte
.9f50		7a		ply				ply
.9f51		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9f54		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f55						Unary_Min:
.9f55		a9 01		lda #$01			lda 	#1
.9f57		80 02		bra $9f5b			bra 	UnaryMinMaxMain
.9f59						Unary_Max:
.9f59		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f5b						UnaryMinMaxMain:
.9f5b		fa		plx				plx 								; get index on number stack
.9f5c		48		pha				pha 								; save comparator
.9f5d		20 5a a2	jsr $a25a			jsr 	EvaluateValue 				; get the first value.
.9f60						_UMMMLoop:
.9f60		b1 30		lda ($30),y			lda 	(codePtr),y
.9f62		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f64		f0 22		beq $9f88			beq 	_UMMMDone
.9f66		20 a4 93	jsr $93a4			jsr 	CheckComma 					; must be a comma
.9f69		e8		inx				inx
.9f6a		20 5a a2	jsr $a25a			jsr 	EvaluateValue
.9f6d		ca		dex				dex
.9f6e		20 f8 a2	jsr $a2f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f71		e8		inx				inx
.9f72		20 f8 a2	jsr $a2f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f75		e8		inx				inx
.9f76		20 72 94	jsr $9472			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f79		ca		dex				dex
.9f7a		ca		dex				dex
.9f7b		85 36		sta $36				sta 	zTemp0 						; save required result
.9f7d		68		pla				pla 								; get and save comparator
.9f7e		48		pha				pha
.9f7f		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9f81		d0 dd		bne $9f60			bne 	_UMMMLoop
.9f83		20 8b 9f	jsr $9f8b			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9f86		80 d8		bra $9f60			bra 	_UMMMLoop
.9f88						_UMMMDone:
.9f88		68		pla				pla 								; throw the comparator
.9f89		c8		iny				iny 								; skip )
.9f8a		60		rts				rts
.9f8b						ExpCopyAboveDown:
.9f8b		b5 51		lda $51,x			lda 	NSStatus+1,x
.9f8d		95 50		sta $50,x			sta 	NSStatus,x
.9f8f		b5 79		lda $79,x			lda 	NSExponent+1,x
.9f91		95 78		sta $78,x			sta 	NSExponent,x
.9f93		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f95		95 58		sta $58,x			sta 	NSMantissa0,x
.9f97		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f99		95 60		sta $60,x			sta 	NSMantissa1,x
.9f9b		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f9d		95 68		sta $68,x			sta 	NSMantissa2,x
.9f9f		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9fa1		95 70		sta $70,x			sta 	NSMantissa3,x
.9fa3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9fa4						Unary_Not:
.9fa4		fa		plx				plx
.9fa5		20 82 a2	jsr $a282			jsr 	EvaluateInteger 			; get integer
.9fa8		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9fab		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; zero mantissa ?
.9fae		f0 04		beq $9fb4			beq 	_NotZero
.9fb0		20 15 a3	jsr $a315			jsr 	NSMSetZero
.9fb3		60		rts				rts
.9fb4						_NotZero:
.9fb4		4c 28 94	jmp $9428			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9fb7						PeekByteUnary:
.9fb7		a9 01		lda #$01			lda 	#1
.9fb9		80 0a		bra $9fc5			bra 	PeekUnary
.9fbb						PeekWUnary:
.9fbb		a9 02		lda #$02			lda 	#2
.9fbd		80 06		bra $9fc5			bra 	PeekUnary
.9fbf						PeekLUnary:
.9fbf		a9 03		lda #$03			lda 	#3
.9fc1		80 02		bra $9fc5			bra 	PeekUnary
.9fc3						PeekDUnary:
.9fc3		a9 04		lda #$04			lda 	#4
.9fc5						PeekUnary:
.9fc5		fa		plx				plx 								; restore position.
.9fc6		48		pha				pha 								; save count to copy on stack
.9fc7		20 95 a2	jsr $a295			jsr		Evaluate16BitInteger 		; address as constant.
.9fca		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9fcd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9fcf		85 36		sta $36				sta 	zTemp0
.9fd1		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fd3		85 37		sta $37				sta 	zTemp0+1
.9fd5		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; clear the result to zero.
.9fd8		68		pla				pla 								; count in zTemp2
.9fd9		85 3a		sta $3a				sta 	zTemp2
.9fdb		da		phx				phx 								; save stack position and offset of read
.9fdc		5a		phy				phy
.9fdd		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9fdf						_PULoop:
.9fdf		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9fe1		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9fe3		c8		iny				iny 								; next byte to write
.9fe4		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9fe5		18		clc				clc
.9fe6		69 08		adc #$08			adc 	#MathStackSize
.9fe8		aa		tax				tax
.9fe9		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9feb		d0 f2		bne $9fdf			bne 	_PULoop
.9fed		7a		ply				ply 								; restore stack/code pos and exit.
.9fee		fa		plx				plx
.9fef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9ff0						SgnUnary:
.9ff0		fa		plx				plx 								; restore stack pos
.9ff1		20 63 a2	jsr $a263			jsr 	EvaluateNumber 				; get a float or int
.9ff4		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.9ff7		20 37 a3	jsr $a337			jsr 	NSMIsZero 					; if zero
.9ffa		f0 0e		beq $a00a			beq 	_SGZero  					; return Int Zero
.9ffc		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9ffe		48		pha				pha
.9fff		a9 01		lda #$01			lda 	#1 							; set to 1
.a001		20 17 a3	jsr $a317			jsr 	NSMSetByte
.a004		68		pla				pla
.a005		29 80		and #$80			and		#$80 						; copy the sign byte out
.a007		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a009		60		rts				rts
.a00a		20 15 a3	jsr $a315	_SGZero:jsr 	NSMSetZero
.a00d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a00e						ValUnary:
.a00e		fa		plx				plx 								; restore stack pos
.a00f		20 24 a0	jsr $a024			jsr 	ValMainCode 				; do the main val() code
.a012		b0 01		bcs $a015			bcs 	_VUError 					; couldn't convert
.a014		60		rts				rts
.a015						_VUError:
.a015		4c 97 a4	jmp $a497			jmp 	TypeError
.a018						IsValUnary:
.a018		fa		plx				plx 								; restore stack pos
.a019		20 24 a0	jsr $a024			jsr 	ValMainCode 				; do the main val() code
.a01c		b0 03		bcs $a021			bcs 	_VUBad
.a01e		4c 28 94	jmp $9428			jmp 	ReturnTrue
.a021						_VUBad:
.a021		4c 33 94	jmp $9433			jmp 	ReturnFalse
.a024						ValMainCode:
.a024		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; get a string
.a027		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; check right bracket present
.a02a						ValEvaluateZTemp0:
.a02a		5a		phy				phy
.a02b		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a02d		f0 17		beq $a046			beq 	_VMCFail2
.a02f		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a031		48		pha				pha 								; save first character
.a032		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a034		d0 01		bne $a037			bne 	_VMCStart
.a036		c8		iny				iny 								; skip over -
.a037						_VMCStart:
.a037		38		sec				sec 								; initialise first time round.
.a038						_VMCNext:
.a038		c8		iny				iny 								; pre-increment
.a039		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a03b		f0 0c		beq $a049			beq 	_VMCSuccess 				; successful.
.a03d		20 05 9c	jsr $9c05			jsr 	EncodeNumber 				; send it to the number-builder
.a040		90 03		bcc $a045			bcc 	_VMCFail 					; if failed, give up.
.a042		18		clc				clc 								; next time round, countinue
.a043		80 f3		bra $a038			bra 	_VMCNext
.a045						_VMCFail:
.a045		68		pla				pla
.a046						_VMCFail2:
.a046		7a		ply				ply
.a047		38		sec				sec
.a048		60		rts				rts
.a049						_VMCSuccess:
.a049		a9 00		lda #$00			lda 	#0 							; construct final
.a04b		20 05 9c	jsr $9c05			jsr 	EncodeNumber 				; by sending a duff value.
.a04e		68		pla				pla 								; if it was -ve
.a04f		c9 2d		cmp #$2d			cmp 	#"-"
.a051		d0 03		bne $a056			bne 	_VMCNotNegative
.a053		20 d7 a2	jsr $a2d7			jsr		NSMNegate 					; negate it.
.a056						_VMCNotNegative:
.a056		7a		ply				ply
.a057		18		clc				clc
.a058		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a059						ChrUnary:
.a059		fa		plx				plx 								; restore stack pos
.a05a		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a05d		48		pha				pha
.a05e		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.a061		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a063		20 60 b5	jsr $b560			jsr 	StringTempAllocate
.a066		68		pla				pla 								; write number to it
.a067		20 99 b5	jsr $b599			jsr 	StringTempWrite
.a06a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a06b						ItemCountUnary:
.a06b		fa		plx				plx
.a06c		20 6d a2	jsr $a26d			jsr 	EvaluateString
.a06f		e8		inx				inx
.a070		20 e3 a0	jsr $a0e3			jsr 	ICGetSeperator
.a073		ca		dex				dex
.a074		20 04 a1	jsr $a104			jsr 	ICSetPointer 				; zTemp0 = (string)
.a077		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; zero the result.
.a07a		5a		phy				phy
.a07b		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a07d						_ICULoop:
.a07d		c8		iny				iny
.a07e		b1 36		lda ($36),y			lda 	(zTemp0),y
.a080		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a083		d0 02		bne $a087			bne 	_ICUNoMatch
.a085		f6 58		inc $58,x			inc 	NSMantissa0,x
.a087						_ICUNoMatch:
.a087		c9 00		cmp #$00			cmp 	#0
.a089		d0 f2		bne $a07d			bne 	_ICULoop
.a08b		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a08d		7a		ply				ply
.a08e		60		rts				rts
.a08f						ItemGetUnary:
.a08f		fa		plx				plx
.a090		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; search string
.a093		20 a4 93	jsr $93a4			jsr 	CheckComma
.a096		e8		inx				inx 								; get count
.a097		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.a09a		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a09c		f0 61		beq $a0ff			beq 	ICGSRange
.a09e		e8		inx				inx 								; get seperator.
.a09f		20 e3 a0	jsr $a0e3			jsr 	ICGetSeperator
.a0a2		ca		dex				dex
.a0a3		ca		dex				dex
.a0a4		5a		phy				phy
.a0a5		20 04 a1	jsr $a104			jsr 	ICSetPointer 				; zTemp0 points to string.
.a0a8		a0 00		ldy #$00			ldy 	#0
.a0aa		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a0ac		f0 0e		beq $a0bc			beq 	_IGUFoundStart
.a0ae						_IGUFindNext:
.a0ae		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a0b0		f0 4d		beq $a0ff			beq 	ICGSRange 					; eol, not found.
.a0b2		c8		iny				iny
.a0b3		cd a7 07	cmp $07a7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a0b6		d0 f6		bne $a0ae			bne 	_IGUFindNext
.a0b8		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a0ba		d0 f2		bne $a0ae			bne 	_IGUFindNext
.a0bc						_IGUFoundStart:
.a0bc		84 38		sty $38				sty 	zTemp1 						; save start
.a0be		88		dey				dey
.a0bf						_IGUFindLength:
.a0bf		c8		iny				iny 								; forward till seperator/EOS
.a0c0		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0c2		f0 05		beq $a0c9			beq 	_IGUFoundLength
.a0c4		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a0c7		d0 f6		bne $a0bf			bne 	_IGUFindLength
.a0c9						_IGUFoundLength:
.a0c9		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a0cb		98		tya				tya 								; calculate length of new string.
.a0cc		38		sec				sec
.a0cd		e5 38		sbc $38				sbc 	zTemp1
.a0cf		20 60 b5	jsr $b560			jsr 	StringTempAllocate 			; allocate bytes for it.
.a0d2		a4 38		ldy $38				ldy 	zTemp1
.a0d4						_IGUCopySub:
.a0d4		c4 39		cpy $39				cpy 	zTemp1+1
.a0d6		f0 08		beq $a0e0			beq 	_IGUCopyOver
.a0d8		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0da		20 99 b5	jsr $b599			jsr 	StringTempWrite
.a0dd		c8		iny				iny
.a0de		80 f4		bra $a0d4			bra 	_IGUCopySub
.a0e0						_IGUCopyOver:
.a0e0		7a		ply				ply
.a0e1		60		rts				rts
>a0e2		db						.byte 	$DB 						; causes a break in the emulator
.a0e3						ICGetSeperator:
.a0e3		20 a4 93	jsr $93a4			jsr 	CheckComma 					; preceding comma
.a0e6		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; seperator string
.a0e9		20 04 a1	jsr $a104			jsr 	ICSetPointer 				; access it
.a0ec		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a0ee		8d a7 07	sta $07a7			sta 	ICSeperator
.a0f1		f0 0c		beq $a0ff			beq 	ICGSRange 					; check LEN(seperator) = 1
.a0f3		5a		phy				phy
.a0f4		a0 01		ldy #$01			ldy 	#1
.a0f6		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0f8		d0 05		bne $a0ff			bne 	ICGSRange
.a0fa		7a		ply				ply
.a0fb		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; check following )
.a0fe		60		rts				rts
.a0ff						ICGSRange:
.a0ff		a9 04		lda #$04		lda	#4
.a101		4c b5 93	jmp $93b5		jmp	ErrorHandler
.a104						ICSetPointer:
.a104		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a106		85 36		sta $36				sta 	zTemp0
.a108		b5 60		lda $60,x			lda 	NSMantissa1,x
.a10a		85 37		sta $37				sta 	zTemp0+1
.a10c		60		rts				rts
.07a7						ICSeperator:
>07a7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a10d						SpcUnary:
.a10d		fa		plx				plx 								; restore stack pos
.a10e		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger			; get value
.a111		5a		phy				phy
.a112		48		pha				pha 								; save count
.a113		20 60 b5	jsr $b560			jsr 	StringTempAllocate
.a116		7a		ply				ply 								; to do count in Y
.a117						_SpcLoop:
.a117		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a119		f0 08		beq $a123			beq 	_SpcExit
.a11b		a9 20		lda #$20			lda 	#32
.a11d		20 99 b5	jsr $b599			jsr 	StringTempWrite
.a120		88		dey				dey
.a121		80 f4		bra $a117			bra 	_SpcLoop
.a123						_SpcExit:
.a123		7a		ply				ply
.a124		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.a127		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a128						Unary_Str:
.a128		fa		plx				plx
.a129		20 63 a2	jsr $a263			jsr 	EvaluateNumber  			; get number
.a12c		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; closing bracket
.a12f		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a131		20 4a a1	jsr $a14a			jsr 	ConvertNumberToString 		; do the conversion.
.a134		a9 21		lda #$21			lda		#33 						; create buffer
.a136		20 60 b5	jsr $b560			jsr 	StringTempAllocate 			; allocate memory
.a139		da		phx				phx  								; copy the converted string into the buffer.
.a13a		a2 00		ldx #$00			ldx 	#0
.a13c						_USCopy:
.a13c		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a13f		20 99 b5	jsr $b599			jsr 	StringTempWrite
.a142		e8		inx				inx
.a143		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a146		d0 f4		bne $a13c			bne 	_USCopy
.a148		fa		plx				plx
.a149		60		rts				rts
.a14a						ConvertNumberToString:
.a14a		5a		phy				phy 								; save code position
.a14b		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a14e		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a151		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a153		10 09		bpl $a15e			bpl 	_CNTSNotNegative
.a155		29 7f		and #$7f			and 	#$7F 						; make +ve
.a157		95 50		sta $50,x			sta 	NSStatus,x
.a159		a9 2d		lda #$2d			lda 	#"-"
.a15b		20 bf a1	jsr $a1bf			jsr 	WriteDecimalBuffer
.a15e						_CNTSNotNegative:
.a15e		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a160		f0 12		beq $a174			beq 	_CNTSNotFloat
.a162		e8		inx				inx 								; round up so we don't get too many 6.999999
.a163		a9 01		lda #$01			lda 	#1
.a165		20 17 a3	jsr $a317			jsr 	NSMSetByte
.a168		ca		dex				dex
.a169		b5 78		lda $78,x			lda		NSExponent,x
.a16b		95 79		sta $79,x			sta 	NSExponent+1,x
.a16d		a9 08		lda #$08			lda 	#NSTFloat
.a16f		95 51		sta $51,x			sta 	NSStatus+1,x
.a171		20 0a 99	jsr $990a			jsr 	FloatAdd
.a174						_CNTSNotFloat:
.a174		20 a1 a1	jsr $a1a1			jsr 	MakePlusTwoString 			; do the integer part.
.a177		20 d0 99	jsr $99d0			jsr 	FloatFractionalPart 		; get the fractional part
.a17a		20 81 9a	jsr $9a81			jsr 	NSNormalise					; normalise , exit if zero
.a17d		f0 20		beq $a19f			beq 	_CNTSExit
.a17f		a9 2e		lda #$2e			lda 	#"."
.a181		20 bf a1	jsr $a1bf			jsr 	WriteDecimalBuffer 			; write decimal place
.a184						_CNTSDecimal:
.a184		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a187		30 16		bmi $a19f			bmi 	_CNTSExit
.a189		e8		inx				inx 								; x 10.0
.a18a		a9 0a		lda #$0a			lda 	#10
.a18c		20 17 a3	jsr $a317			jsr 	NSMSetByte
.a18f		a9 08		lda #$08			lda 	#NSTFloat
.a191		95 50		sta $50,x			sta 	NSStatus,x
.a193		ca		dex				dex
.a194		20 4f 9a	jsr $9a4f			jsr 	FloatMultiply
.a197		20 a1 a1	jsr $a1a1			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a19a		20 d0 99	jsr $99d0			jsr 	FloatFractionalPart 		; get the fractional part
.a19d		80 e5		bra $a184			bra 	_CNTSDecimal 				; keep going.
.a19f						_CNTSExit:
.a19f		7a		ply				ply
.a1a0		60		rts				rts
.a1a1						MakePlusTwoString:
.a1a1		da		phx				phx
.a1a2		20 f8 a2	jsr $a2f8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a1a5		e8		inx				inx 								; access it
.a1a6		e8		inx				inx
.a1a7		20 28 9a	jsr $9a28			jsr 	FloatIntegerPart 			; make it an integer
.a1aa		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a1ac		20 3a 98	jsr $983a			jsr 	ConvertInt32
.a1af		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a1b1						_MPTSCopy:
.a1b1		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a1b4		20 bf a1	jsr $a1bf			jsr 	WriteDecimalBuffer
.a1b7		e8		inx				inx
.a1b8		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a1bb		d0 f4		bne $a1b1			bne 	_MPTSCopy
.a1bd		fa		plx				plx
.a1be		60		rts				rts
.a1bf						WriteDecimalBuffer:
.a1bf		da		phx				phx
.a1c0		ae 11 04	ldx $0411			ldx 	dbOffset
.a1c3		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a1c6		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a1c9		ee 11 04	inc $0411			inc 	dbOffset
.a1cc		fa		plx				plx
.a1cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a1ce						Unary_Left:
.a1ce		fa		plx				plx
.a1cf		18		clc				clc 								; only one parameter
.a1d0		20 33 a2	jsr $a233			jsr 	SubstringInitial 			; set up.
.a1d3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a1d5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1d7		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a1d9		80 25		bra $a200			bra 	SubstringMain
.a1db						Unary_Right:
.a1db		fa		plx				plx
.a1dc		18		clc				clc 								; only one parameter
.a1dd		20 33 a2	jsr $a233			jsr 	SubstringInitial 			; set up.
.a1e0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a1e2		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1e4		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a1e6		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a1e8		b0 02		bcs $a1ec			bcs 	_URNotUnderflow
.a1ea		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a1ec						_URNotUnderflow:
.a1ec		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a1ee		80 10		bra $a200			bra 	SubstringMain
.a1f0						Unary_Mid:
.a1f0		fa		plx				plx
.a1f1		38		sec				sec 								; two parameters
.a1f2		20 33 a2	jsr $a233			jsr 	SubstringInitial 			; set up.
.a1f5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a1f7		f0 04		beq $a1fd			beq 	_UMError
.a1f9		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1fb		80 03		bra $a200			bra 	SubstringMain
.a1fd						_UMError:
.a1fd		4c 9c a4	jmp $a49c			jmp 	ArgumentError
.a200						SubstringMain:
.a200		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a202		d5 78		cmp $78,x			cmp 	NSExponent,x
.a204		b0 27		bcs $a22d			bcs 	_SSMNull 					; if so, return an empty string.
.a206		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a208		f0 23		beq $a22d			beq 	_SSMNull 					; return empty string.
.a20a		18		clc				clc 								; add the offset +1 to the address and
.a20b		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a20d		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a20f		85 36		sta $36				sta 	zTemp0
.a211		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a213		69 00		adc #$00			adc 	#0
.a215		85 37		sta $37				sta 	zTemp0+1
.a217						_SSMNoCarry:
.a217		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a219		20 60 b5	jsr $b560			jsr 	StringTempAllocate 			; allocate that many characters
.a21c		5a		phy				phy 								; save Y
.a21d		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a21f						_SSMCopy:
.a21f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a221		f0 08		beq $a22b			beq 	_SSMEString 				; no more to copy
.a223		20 99 b5	jsr $b599			jsr 	StringTempWrite 			; and write it out.
.a226		c8		iny				iny
.a227		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a229		d0 f4		bne $a21f			bne 	_SSMCopy
.a22b						_SSMEString:
.a22b		7a		ply				ply
.a22c						_SSMExit:
.a22c		60		rts				rts
.a22d						_SSMNull:
.a22d		a9 00		lda #$00			lda 	#0
.a22f		20 60 b5	jsr $b560			jsr 	StringTempAllocate
.a232		60		rts				rts
.a233						SubstringInitial:
.a233		da		phx				phx 								; save initial stack position
.a234		08		php				php 								; save carry on stack indicating 2 parameters
.a235		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; get a string
.a238		5a		phy				phy 								; calculate length to exponent.
.a239		a0 ff		ldy #$ff			ldy 	#$FF
.a23b						_SIFindLength:
.a23b		c8		iny				iny
.a23c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a23e		d0 fb		bne $a23b			bne 	_SIFindLength
.a240		98		tya				tya
.a241		95 78		sta $78,x			sta 	NSExponent,x
.a243		7a		ply				ply
.a244		e8		inx				inx
.a245		20 a4 93	jsr $93a4			jsr 	CheckComma 					; comma next
.a248		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get next parameter
.a24b		28		plp				plp 								; is it the last parameter ?
.a24c		90 07		bcc $a255			bcc 	_SSIExit 					; if so, exit.
.a24e		e8		inx				inx
.a24f		20 a4 93	jsr $93a4			jsr 	CheckComma 					; comma next
.a252		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get last parameter
.a255						_SSIExit:
.a255		fa		plx				plx
.a256		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; check closing bracket
.a259		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a25a						EvaluateValue:
.a25a		48		pha				pha
.a25b		20 bf 98	jsr $98bf			jsr		EvaluateExpression 			; expression
.a25e		20 82 9b	jsr $9b82			jsr 	Dereference					; derefernce it
.a261		68		pla				pla
.a262		60		rts				rts
.a263						EvaluateNumber:
.a263		20 5a a2	jsr $a25a			jsr 	EvaluateValue 				; get a value
.a266		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a268		29 10		and #$10			and 	#NSBIsString
.a26a		d0 13		bne $a27f			bne 	HelperTypeError
.a26c		60		rts				rts
.a26d						EvaluateString:
.a26d		20 5a a2	jsr $a25a			jsr 	EvaluateValue 				; get a value
.a270		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a272		29 10		and #$10			and 	#NSBIsString
.a274		f0 09		beq $a27f			beq 	HelperTypeError
.a276						CopyAddressToTemp0:
.a276		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a278		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a27a		b5 60		lda $60,x			lda 	NSMantissa1,x
.a27c		85 37		sta $37				sta 	zTemp0+1
.a27e		60		rts				rts
.a27f						HelperTypeError:
.a27f		4c 97 a4	jmp $a497			jmp 	TypeError
.a282						EvaluateInteger:
.a282		20 63 a2	jsr $a263			jsr 	EvaluateNumber
.a285		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a287		d0 09		bne $a292			bne 	HelperValueError 			; if not, it's a float.
.a289		60		rts				rts
.a28a						EvaluateUnsignedInteger:
.a28a		20 82 a2	jsr $a282			jsr 	EvaluateInteger 			; check integer is +ve
.a28d		b5 50		lda $50,x			lda 	NSStatus,x
.a28f		30 01		bmi $a292			bmi 	HelperValueError
.a291		60		rts				rts
.a292						HelperValueError:
.a292		4c 9c a4	jmp $a49c			jmp 	ArgumentError
.a295						Evaluate16BitInteger:
.a295		20 8a a2	jsr $a28a			jsr	 	EvaluateUnsignedInteger		; get integer
.a298		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a29a		15 68		ora $68,x			ora 	NSMantissa2,x
.a29c		d0 f4		bne $a292			bne 	HelperValueError
.a29e		60		rts				rts
.a29f						Evaluate16BitIntegerSigned:
.a29f		20 82 a2	jsr $a282			jsr	 	EvaluateInteger				; get integer
.a2a2		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a2a4		15 68		ora $68,x			ora 	NSMantissa2,x
.a2a6		d0 ea		bne $a292			bne 	HelperValueError
.a2a8		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a2aa		10 03		bpl $a2af			bpl 	_EISNotSigned
.a2ac		20 de a2	jsr $a2de			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a2af						_EISNotSigned:
.a2af		60		rts				rts
.a2b0						Evaluate8BitInteger:
.a2b0		20 8a a2	jsr $a28a			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a2b3		d0 dd		bne $a292			bne 	HelperValueError
.a2b5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a2b7		15 68		ora $68,x			ora 	NSMantissa2,x
.a2b9		15 60		ora $60,x			ora 	NSMantissa1,x
.a2bb		d0 d5		bne $a292			bne 	HelperValueError
.a2bd		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2c0						Multiply8x8:
.a2c0		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2c1		85 36		sta $36			  	sta 	zTemp0
.a2c3		86 37		stx $37				stx 	zTemp0+1
.a2c5		a9 00		lda #$00			lda 	#0
.a2c7		a2 08		ldx #$08			ldx 	#8
.a2c9						_M88Loop:
.a2c9		90 03		bcc $a2ce			bcc 	_M88NoAdd
.a2cb		18		clc				clc
.a2cc		65 37		adc $37				adc 	zTemp0+1
.a2ce						_M88NoAdd:
.a2ce		6a		ror a				ror 	a
.a2cf		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2d1		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2d2		d0 f5		bne $a2c9			bne 	_M88Loop
.a2d4		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2d6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a2d7						NSMNegate:
.a2d7		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a2d9		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a2db		95 50		sta $50,x			sta 	NSStatus,x
.a2dd		60		rts				rts
.a2de						NSMNegateMantissa:
.a2de		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a2df		a9 00		lda #$00			lda 	#0
.a2e1		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a2e3		95 58		sta $58,x			sta 	NSMantissa0,x
.a2e5		a9 00		lda #$00			lda 	#0
.a2e7		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a2e9		95 60		sta $60,x			sta 	NSMantissa1,x
.a2eb		a9 00		lda #$00			lda 	#0
.a2ed		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a2ef		95 68		sta $68,x			sta 	NSMantissa2,x
.a2f1		a9 00		lda #$00			lda 	#0
.a2f3		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a2f5		95 70		sta $70,x			sta 	NSMantissa3,x
.a2f7		60		rts				rts
.a2f8						NSMShiftUpTwo:
.a2f8		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2fa		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a2fc		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2fe		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a300		b5 68		lda $68,x			lda 	NSMantissa2,x
.a302		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a304		b5 70		lda $70,x			lda 	NSMantissa3,x
.a306		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a308		b5 78		lda $78,x			lda 	NSExponent,x
.a30a		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a30c		b5 50		lda $50,x			lda 	NSStatus,x
.a30e		95 52		sta $52,x			sta 	NSStatus+2,x
.a310		60		rts				rts
.a311						NSMSetZeroMantissaOnly:
.a311		a9 00		lda #$00			lda 	#0
.a313		80 06		bra $a31b			bra 	NSMSetMantissa
.a315						NSMSetZero:
.a315		a9 00		lda #$00			lda 	#0
.a317						NSMSetByte:
.a317		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a319		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a31b						NSMSetMantissa:
.a31b		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a31d		74 60		stz $60,x			stz 	NSMantissa1,x
.a31f		74 68		stz $68,x			stz 	NSMantissa2,x
.a321		74 70		stz $70,x			stz 	NSMantissa3,x
.a323		60		rts				rts
.a324						NSMShiftLeft:
.a324		18		clc				clc
.a325						NSMRotateLeft:
.a325		36 58		rol $58,x			rol 	NSMantissa0,x
.a327		36 60		rol $60,x			rol		NSMantissa1,x
.a329		36 68		rol $68,x			rol		NSMantissa2,x
.a32b		36 70		rol $70,x			rol		NSMantissa3,x
.a32d		60		rts				rts
.a32e						NSMShiftRight:
.a32e		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a330		76 68		ror $68,x			ror		NSMantissa2,x
.a332		76 60		ror $60,x			ror		NSMantissa1,x
.a334		76 58		ror $58,x			ror		NSMantissa0,x
.a336		60		rts				rts
.a337						NSMIsZero:
.a337		b5 70		lda $70,x			lda 	NSMantissa3,x
.a339		15 68		ora $68,x			ora		NSMantissa2,x
.a33b		15 60		ora $60,x			ora		NSMantissa1,x
.a33d		15 58		ora $58,x			ora		NSMantissa0,x
.a33f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a340						Assemble_ora:
.a340		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a343		01					.byte $01
.a344						Assemble_and:
.a344		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a347		21					.byte $21
.a348						Assemble_eor:
.a348		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a34b		41					.byte $41
.a34c						Assemble_adc:
.a34c		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a34f		61					.byte $61
.a350						Assemble_sta:
.a350		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a353		81					.byte $81
.a354						Assemble_lda:
.a354		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a357		a1					.byte $a1
.a358						Assemble_cmp:
.a358		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a35b		c1					.byte $c1
.a35c						Assemble_sbc:
.a35c		20 ab 84	jsr $84ab		jsr	AssembleGroup1
>a35f		e1					.byte $e1
.a360						Assemble_asl:
.a360		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a363		02					.byte $02
>a364		75					.byte $75
.a365						Assemble_rol:
.a365		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a368		22					.byte $22
>a369		75					.byte $75
.a36a						Assemble_lsr:
.a36a		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a36d		42					.byte $42
>a36e		75					.byte $75
.a36f						Assemble_ror:
.a36f		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a372		62					.byte $62
>a373		75					.byte $75
.a374						Assemble_stx:
.a374		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a377		82					.byte $82
>a378		50					.byte $50
.a379						Assemble_ldx:
.a379		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a37c		a2					.byte $a2
>a37d		d0					.byte $d0
.a37e						Assemble_dec:
.a37e		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a381		c2					.byte $c2
>a382		55					.byte $55
.a383						Assemble_inc:
.a383		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a386		e2					.byte $e2
>a387		55					.byte $55
.a388						Assemble_stz:
.a388		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a38b		60					.byte $60
>a38c		44					.byte $44
.a38d						Assemble_bit:
.a38d		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a390		20					.byte $20
>a391		55					.byte $55
.a392						Assemble_sty:
.a392		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a395		80					.byte $80
>a396		54					.byte $54
.a397						Assemble_ldy:
.a397		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a39a		a0					.byte $a0
>a39b		d5					.byte $d5
.a39c						Assemble_cpy:
.a39c		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a39f		c0					.byte $c0
>a3a0		d4					.byte $d4
.a3a1						Assemble_cpx:
.a3a1		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a3a4		e0					.byte $e0
>a3a5		d0					.byte $d0
.a3a6						Assemble_tsb:
.a3a6		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a3a9		00					.byte $00
>a3aa		50					.byte $50
.a3ab						Assemble_trb:
.a3ab		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a3ae		10					.byte $10
>a3af		50					.byte $50
.a3b0						Assemble_jsr:
.a3b0		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a3b3		14					.byte $14
>a3b4		10					.byte $10
.a3b5						Assemble_jmp:
.a3b5		20 b2 84	jsr $84b2		jsr	AssembleGroup2
>a3b8		40					.byte $40
>a3b9		10					.byte $10
.a3ba						Assemble_bpl:
.a3ba		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3bd		10					.byte $10
.a3be						Assemble_bmi:
.a3be		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3c1		30					.byte $30
.a3c2						Assemble_bvc:
.a3c2		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3c5		50					.byte $50
.a3c6						Assemble_bvs:
.a3c6		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3c9		70					.byte $70
.a3ca						Assemble_bcc:
.a3ca		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3cd		90					.byte $90
.a3ce						Assemble_bcs:
.a3ce		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3d1		b0					.byte $b0
.a3d2						Assemble_bne:
.a3d2		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3d5		d0					.byte $d0
.a3d6						Assemble_beq:
.a3d6		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3d9		f0					.byte $f0
.a3da						Assemble_bra:
.a3da		20 03 85	jsr $8503		jsr	AssembleGroup3
>a3dd		80					.byte $80
.a3de						Assemble_brk:
.a3de		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3e1		00					.byte $00
.a3e2						Assemble_php:
.a3e2		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3e5		08					.byte $08
.a3e6						Assemble_clc:
.a3e6		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3e9		18					.byte $18
.a3ea						Assemble_plp:
.a3ea		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3ed		28					.byte $28
.a3ee						Assemble_sec:
.a3ee		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3f1		38					.byte $38
.a3f2						Assemble_rti:
.a3f2		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3f5		40					.byte $40
.a3f6						Assemble_pha:
.a3f6		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3f9		48					.byte $48
.a3fa						Assemble_cli:
.a3fa		20 37 85	jsr $8537		jsr	AssembleGroup4
>a3fd		58					.byte $58
.a3fe						Assemble_phy:
.a3fe		20 37 85	jsr $8537		jsr	AssembleGroup4
>a401		5a					.byte $5a
.a402						Assemble_rts:
.a402		20 37 85	jsr $8537		jsr	AssembleGroup4
>a405		60					.byte $60
.a406						Assemble_pla:
.a406		20 37 85	jsr $8537		jsr	AssembleGroup4
>a409		68					.byte $68
.a40a						Assemble_sei:
.a40a		20 37 85	jsr $8537		jsr	AssembleGroup4
>a40d		78					.byte $78
.a40e						Assemble_ply:
.a40e		20 37 85	jsr $8537		jsr	AssembleGroup4
>a411		7a					.byte $7a
.a412						Assemble_dey:
.a412		20 37 85	jsr $8537		jsr	AssembleGroup4
>a415		88					.byte $88
.a416						Assemble_txa:
.a416		20 37 85	jsr $8537		jsr	AssembleGroup4
>a419		8a					.byte $8a
.a41a						Assemble_tya:
.a41a		20 37 85	jsr $8537		jsr	AssembleGroup4
>a41d		98					.byte $98
.a41e						Assemble_txs:
.a41e		20 37 85	jsr $8537		jsr	AssembleGroup4
>a421		9a					.byte $9a
.a422						Assemble_tay:
.a422		20 37 85	jsr $8537		jsr	AssembleGroup4
>a425		a8					.byte $a8
.a426						Assemble_tax:
.a426		20 37 85	jsr $8537		jsr	AssembleGroup4
>a429		aa					.byte $aa
.a42a						Assemble_clv:
.a42a		20 37 85	jsr $8537		jsr	AssembleGroup4
>a42d		b8					.byte $b8
.a42e						Assemble_tsx:
.a42e		20 37 85	jsr $8537		jsr	AssembleGroup4
>a431		ba					.byte $ba
.a432						Assemble_iny:
.a432		20 37 85	jsr $8537		jsr	AssembleGroup4
>a435		c8					.byte $c8
.a436						Assemble_dex:
.a436		20 37 85	jsr $8537		jsr	AssembleGroup4
>a439		ca					.byte $ca
.a43a						Assemble_cld:
.a43a		20 37 85	jsr $8537		jsr	AssembleGroup4
>a43d		d8					.byte $d8
.a43e						Assemble_phx:
.a43e		20 37 85	jsr $8537		jsr	AssembleGroup4
>a441		da					.byte $da
.a442						Assemble_stp:
.a442		20 37 85	jsr $8537		jsr	AssembleGroup4
>a445		db					.byte $db
.a446						Assemble_inx:
.a446		20 37 85	jsr $8537		jsr	AssembleGroup4
>a449		e8					.byte $e8
.a44a						Assemble_nop:
.a44a		20 37 85	jsr $8537		jsr	AssembleGroup4
>a44d		ea					.byte $ea
.a44e						Assemble_sed:
.a44e		20 37 85	jsr $8537		jsr	AssembleGroup4
>a451		f8					.byte $f8
.a452						Assemble_plx:
.a452		20 37 85	jsr $8537		jsr	AssembleGroup4
>a455		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a456						DecimalScalarTable:
>a456		66 66 66 66				.dword $66666666 ; 0.1
>a45a		de					.byte $de
>a45b		1f 85 eb 51				.dword $51eb851f ; 0.01
>a45f		db					.byte $db
>a460		4c 37 89 41				.dword $4189374c ; 0.001
>a464		d8					.byte $d8
>a465		ac 8b db 68				.dword $68db8bac ; 0.0001
>a469		d4					.byte $d4
>a46a		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a46e		d1					.byte $d1
>a46f		83 de 1b 43				.dword $431bde83 ; 1e-06
>a473		ce					.byte $ce
>a474		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a478		ca					.byte $ca
>a479		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a47d		c7					.byte $c7
>a47e		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a482		c4					.byte $c4
>a483		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a487		c0					.byte $c0
>a488		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a48c		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a48d						SyntaxError:
.a48d		a9 02		lda #$02		lda	#2
.a48f		4c b5 93	jmp $93b5		jmp	ErrorHandler
.a492						RangeError:
.a492		a9 04		lda #$04		lda	#4
.a494		4c b5 93	jmp $93b5		jmp	ErrorHandler
.a497						TypeError:
.a497		a9 05		lda #$05		lda	#5
.a499		4c b5 93	jmp $93b5		jmp	ErrorHandler
.a49c						ArgumentError:
.a49c		a9 07		lda #$07		lda	#7
.a49e		4c b5 93	jmp $93b5		jmp	ErrorHandler
.a4a1						NotDoneError:
.a4a1		a9 0c		lda #$0c		lda	#12
.a4a3		4c b5 93	jmp $93b5		jmp	ErrorHandler
.a4a6						ErrorText:
>a4a6		42 72 65 61 6b 00			.text	"Break",0
>a4ac		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a4b4		72 72 6f 72 00
>a4b9		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a4c1		20 62 79 20 7a 65 72 6f 00
>a4ca		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4d2		61 6e 67 65 00
>a4d7		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4df		6d 61 74 63 68 00
>a4e5		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4ed		65 6d 6f 72 79 00
>a4f3		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4fb		61 72 67 75 6d 65 6e 74 00
>a504		53 74 6f 70 00				.text	"Stop",0
>a509		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a511		6f 6f 20 6c 6f 6e 67 00
>a519		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a521		6e 20 66 61 69 6c 65 64 00
>a52a		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a532		61 74 61 00
>a536		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a53e		65 6e 74 65 64 00
>a544		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a54c		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a558		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a560		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a56d		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a575		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a582		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a58a		68 6f 75 74 20 57 68 69 6c 65 00
>a595		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a59d		68 6f 75 74 20 46 6f 72 00
>a5a6		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a5ae		61 63 6b 20 66 75 6c 6c 00
>a5b7		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a5bf		75 63 74 75 72 65 00
>a5c6		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5ce		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5db		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5e3		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5f1		41 72 72 61 79 20 73 69			.text	"Array size",0
>a5f9		7a 65 00
>a5fc		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a604		79 20 69 6e 64 65 78 00
>a60c		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a614		74 20 64 65 63 6c 61 72 65 64 00
>a61f		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a627		20 66 6f 75 6e 64 00
>a62e		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a636		65 72 72 6f 72 00
>a63c		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a644		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e76b		09 09 30 32 2f 30 33 2f			.text 9,9,"02/03/23 01b"
>e773		32 33 20 30 31 62

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a64a						MemoryDeleteLine:
.a64a		20 69 a6	jsr $a669			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a64d		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a64f		a8		tay				tay
.a650						_MDDLLoop:
.a650		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a652		92 30		sta ($30)			sta 	(codePtr)
.a654		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a656		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a658		d0 07		bne $a661			bne 	_MDLDLNext
.a65a		a5 31		lda $31				lda 	codePtr+1
.a65c		c5 3b		cmp $3b				cmp 	zTemp2+1
.a65e		d0 01		bne $a661			bne 	_MDLDLNext
.a660						_MDDLExit:
.a660		60		rts				rts
.a661						_MDLDLNext:
.a661		e6 30		inc $30				inc 	codePtr						; next byte
.a663		d0 eb		bne $a650			bne 	_MDDLLoop
.a665		e6 31		inc $31				inc 	codePtr+1
.a667		80 e7		bra $a650			bra 	_MDDLLoop
.a669						IMemoryFindEnd:
.a669		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a66b		85 3a		sta $3a				sta 	0+zTemp2
.a66d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a66f		85 3b		sta $3b				sta 	1+zTemp2
.a671						_MDLFELoop:
.a671		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a673		f0 0b		beq $a680			beq 	_MDLFEExit
.a675		18		clc				clc
.a676		65 3a		adc $3a				adc 	zTemp2
.a678		85 3a		sta $3a				sta 	zTemp2
.a67a		90 f5		bcc $a671			bcc 	_MDLFELoop
.a67c		e6 3b		inc $3b				inc 	zTemp2+1
.a67e		80 f1		bra $a671			bra 	_MDLFELoop
.a680						_MDLFEExit:
.a680		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a681						MemoryInsertLine:
.a681		08		php				php
.a682		20 69 a6	jsr $a669			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a685		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a687		1a		inc a				inc 	a
.a688		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a68a		b0 36		bcs $a6c2			bcs 	_MDLIError 					; no, fail.
.a68c		28		plp				plp 								; do at a specific point or the end ?
.a68d		90 08		bcc $a697			bcc 	_MDLIFound 					; if specific point already set.
.a68f		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a691		85 30		sta $30				sta 	codePtr 					; end.
.a693		a5 3b		lda $3b				lda 	zTemp2+1
.a695		85 31		sta $31				sta 	codePtr+1
.a697						_MDLIFound:
.a697		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a69a		a8		tay				tay
.a69b						_MDLIInsert:
.a69b		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a69d		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a69f		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a6a1		c5 3a		cmp $3a				cmp 	zTemp2
.a6a3		d0 06		bne $a6ab			bne 	_MDLINext
.a6a5		a5 31		lda $31				lda 	codePtr+1
.a6a7		c5 3b		cmp $3b				cmp 	zTemp2+1
.a6a9		f0 0a		beq $a6b5			beq 	_MDLIHaveSpace
.a6ab						_MDLINext:
.a6ab		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a6ad		d0 02		bne $a6b1			bne 	_MDLINoBorrow
.a6af		c6 3b		dec $3b				dec 	zTemp2+1
.a6b1						_MDLINoBorrow:
.a6b1		c6 3a		dec $3a				dec 	zTemp2
.a6b3		80 e6		bra $a69b			bra 	_MDLIInsert
.a6b5						_MDLIHaveSpace:
.a6b5		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.a6b8		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a6b9						_MDLICopy:
.a6b9		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.a6bc		91 30		sta ($30),y			sta 	(codePtr),y
.a6be		88		dey				dey
.a6bf		10 f8		bpl $a6b9			bpl 	_MDLICopy
.a6c1		60		rts				rts
.a6c2						_MDLIError:
.a6c2		a9 06		lda #$06		lda	#6
.a6c4		4c b5 93	jmp $93b5		jmp	ErrorHandler
.a6c7						MDLAppendLine:
.a6c7		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a6c9		85 36		sta $36				sta 	zTemp0
.a6cb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6cd		85 38		sta $38				sta 	0+zTemp1
.a6cf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6d1		85 39		sta $39				sta 	1+zTemp1
.a6d3		b2 38		lda ($38)			lda 	(zTemp1)
.a6d5		d0 0a		bne $a6e1			bne 	_MDLANoInitialise
.a6d7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6d9		8d a8 07	sta $07a8			sta 	0+AppendPointer
.a6dc		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6de		8d a9 07	sta $07a9			sta 	1+AppendPointer
.a6e1						_MDLANoInitialise:
.a6e1		18		clc				clc
.a6e2		ad a8 07	lda $07a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a6e5		85 38		sta $38				sta 	zTemp1
.a6e7		72 36		adc ($36)			adc 	(zTemp0)
.a6e9		8d a8 07	sta $07a8			sta 	AppendPointer
.a6ec		ad a9 07	lda $07a9			lda 	AppendPointer+1
.a6ef		85 39		sta $39				sta 	zTemp1+1
.a6f1		69 00		adc #$00			adc 	#0
.a6f3		8d a9 07	sta $07a9			sta 	AppendPointer+1
.a6f6		a0 00		ldy #$00			ldy 	#0
.a6f8						_MDLACopy:
.a6f8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6fa		91 38		sta ($38),y			sta 	(zTemp1),y
.a6fc		c8		iny				iny
.a6fd		98		tya				tya
.a6fe		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a700		d0 f6		bne $a6f8			bne 	_MDLACopy
.a702		a9 00		lda #$00			lda 	#0 							; end of program.
.a704		91 38		sta ($38),y			sta 	(zTemp1),y
.a706		60		rts				rts
.07a8						AppendPointer:
>07a8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a707						MemoryNew:
.a707		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a709		85 30		sta $30				sta 	codePtr
.a70b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a70d		85 31		sta $31				sta 	codePtr+1
.a70f		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a711		92 30		sta ($30)			sta 	(codePtr)
.a713		60		rts				rts
.a714						MemoryInline:
.a714		98		tya				tya 								; put address into stack,x
.a715		18		clc				clc  								; get the offset, add codePtr
.a716		65 30		adc $30				adc 	codePtr
.a718		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a71a		a5 31		lda $31				lda 	codePtr+1
.a71c		69 00		adc #$00			adc 	#0
.a71e		95 60		sta $60,x			sta 	NSMantissa1,x
.a720		74 68		stz $68,x			stz 	NSMantissa2,x
.a722		74 70		stz $70,x			stz 	NSMantissa3,x
.a724		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a725						MemorySearch:
.a725		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a727		86 37		stx $37				stx 	zTemp0+1
.a729		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a72b		85 30		sta $30				sta 	codePtr
.a72d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a72f		85 31		sta $31				sta 	codePtr+1
.a731						_MTAXLoop:
.a731		b2 30		lda ($30)			lda 	(codePtr)
.a733		18		clc				clc
.a734		f0 21		beq $a757			beq 	_MTAXExit 					; reached end, exit with CC.
.a736		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a738		b1 30		lda ($30),y			lda 	(codePtr),y
.a73a		38		sec				sec
.a73b		e5 36		sbc $36				sbc 	zTemp0
.a73d		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a73f		c8		iny				iny 								; do the MSB
.a740		b1 30		lda ($30),y			lda 	(codePtr),y
.a742		e5 37		sbc $37				sbc 	zTemp0+1
.a744		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a746		f0 0f		beq $a757			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a748		b0 0d		bcs $a757			bcs 	_MTAXExit 					; current < required exit
.a74a		18		clc				clc
.a74b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a74d		65 30		adc $30				adc 	codePtr
.a74f		85 30		sta $30				sta 	codePtr
.a751		90 02		bcc $a755			bcc 	_CREExit
.a753		e6 31		inc $31				inc 	codePtr+1 					; carry
.a755						_CREExit:
.a755		80 da		bra $a731			bra 	_MTAXLoop
.a757						_MTAXExit:
.a757		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a758						RectangleCommand:
.a758		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a75a		80 02		bra $a75e			bra 	ShapeDrawCmd
.a75c						CircleCommand:
.a75c		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a75e						ShapeDrawCmd:
.a75e		20 e8 a7	jsr $a7e8			jsr 	RunGraphicsCommand
.a761						ShapeDraw:
.a761		0d ab 07	ora $07ab			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a764		4c dc a7	jmp $a7dc			jmp 	ExecuteGraphicCommand	 	; and complete
.a767						SpriteCommand:
.a767		a2 00		ldx #$00			ldx 	#0
.a769		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get image number.
.a76c		5a		phy				phy
.a76d		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a76f		a6 58		ldx $58				ldx 	NSMantissa0
.a771		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a773		b0 0d		bcs $a782			bcs 	_SCRange
.a775		a0 ff		ldy #$ff			ldy 	#255
.a777		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a77a		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a77c		7a		ply				ply
.a77d		20 e8 a7	jsr $a7e8			jsr 	RunGraphicsCommand
.a780		80 5a		bra $a7dc			bra 	ExecuteGraphicCommand
.a782						_SCRange:
.a782		4c 92 a4	jmp $a492			jmp 	RangeError
.a785						ImageCommand:
.a785		a2 00		ldx #$00			ldx 	#0
.a787		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get image number.
.a78a		20 e8 a7	jsr $a7e8			jsr 	RunGraphicsCommand
.a78d						ImageRunDraw:
.a78d		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a78f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a792		ad b1 07	lda $07b1			lda 	gxDrawScale
.a795		0a		asl a				asl 	a
.a796		0a		asl a				asl 	a
.a797		0a		asl a				asl 	a
.a798		a8		tay				tay
.a799		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a79b		a6 58		ldx $58				ldx 	NSMantissa0
.a79d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7a0		60		rts				rts
.a7a1						TextCommand:
.a7a1		a2 00		ldx #$00			ldx 	#0
.a7a3		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; get text
.a7a6		20 e8 a7	jsr $a7e8			jsr 	RunGraphicsCommand
.a7a9						TextRunDraw:
.a7a9		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a7ab		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7ae		a0 00		ldy #$00			ldy 	#0
.a7b0						_IRDLoop:
.a7b0		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a7b2		85 37		sta $37				sta 	zTemp0+1
.a7b4		a5 58		lda $58				lda 	NSMantissa0
.a7b6		85 36		sta $36				sta 	zTemp0
.a7b8		b1 36		lda ($36),y			lda 	(zTemp0),y
.a7ba		f0 13		beq $a7cf			beq 	_IRDExit
.a7bc		5a		phy				phy									; save string pos
.a7bd		48		pha				pha 								; save char
.a7be		ad b1 07	lda $07b1			lda 	gxDrawScale 				; get scale
.a7c1		0a		asl a				asl 	a
.a7c2		0a		asl a				asl 	a
.a7c3		0a		asl a				asl 	a
.a7c4		a8		tay				tay
.a7c5		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a7c7		fa		plx				plx 								; char to draw
.a7c8		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7cb		7a		ply				ply 								; restore string pos
.a7cc		c8		iny				iny
.a7cd		90 e1		bcc $a7b0			bcc 	_IRDLoop 					; go back if no error.
.a7cf						_IRDExit:
.a7cf		60		rts				rts
.a7d0						PlotCommand:
.a7d0		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a7d2		20 e8 a7	jsr $a7e8			jsr 	RunGraphicsCommand
.a7d5		80 05		bra $a7dc			bra 	ExecuteGraphicCommand
.a7d7						LineCommand:
.a7d7		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a7d9		20 e8 a7	jsr $a7e8			jsr 	RunGraphicsCommand
.a7dc						ExecuteGraphicCommand:
.a7dc		0d aa 07	ora $07aa			ora 	gxCommandID 				; make a full command
.a7df		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a7e2		b0 01		bcs $a7e5			bcs 	_EGCError
.a7e4		60		rts				rts
.a7e5						_EGCError:
.a7e5		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.a7e8						RunGraphicsCommand:
.a7e8		8d aa 07	sta $07aa			sta 	gxCommandID					; save TODO graphics command.
.a7eb		68		pla				pla 								; pop handler address
.a7ec		fa		plx				plx
.a7ed		1a		inc a				inc 	a
.a7ee		d0 01		bne $a7f1			bne 	_RGINoCarry
.a7f0		e8		inx				inx
.a7f1						_RGINoCarry:
.a7f1		8d af 07	sta $07af			sta 	gxHandler
.a7f4		8e b0 07	stx $07b0			stx 	gxHandler+1
.a7f7						_RGICommandLoop:
.a7f7		b1 30		lda ($30),y			lda 	(codePtr),y
.a7f9		c8		iny				iny
.a7fa		c9 dc		cmp #$dc			cmp 	#KWD_TO						; is it TO x,y
.a7fc		f0 53		beq $a851			beq 	_RGI_To
.a7fe		c9 c6		cmp #$c6			cmp 	#KWD_HERE 					; do it here.
.a800		f0 55		beq $a857			beq 	_RGI_Here
.a802		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a804		f0 3d		beq $a843			beq 	_RGI_Exit
.a806		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a808		f0 39		beq $a843			beq 	_RGI_Exit
.a80a		c9 ce		cmp #$ce			cmp 	#KWD_OUTLINE 				; solid or outline
.a80c		f0 3e		beq $a84c			beq 	_RGI_Frame
.a80e		c9 d8		cmp #$d8			cmp 	#KWD_SOLID
.a810		f0 33		beq $a845			beq 	_RGI_Solid
.a812		c9 ba		cmp #$ba			cmp 	#KWD_BY 					; by offset
.a814		f0 4b		beq $a861			beq 	_RGI_By
.a816		c9 c4		cmp #$c4			cmp 	#KWD_FROM 					; from
.a818		f0 17		beq $a831			beq 	_RGI_Move2
.a81a		c9 c1		cmp #$c1			cmp 	#KWD_DIM 					; dim (set scale)
.a81c		f0 62		beq $a880			beq 	_RGI_Dim
.a81e		c9 bf		cmp #$bf			cmp 	#KWD_COLOUR 				; colour or Color
.a820		f0 74		beq $a896			beq 	_RGI_Colour
.a822		c9 be		cmp #$be			cmp 	#KWD_COLOR
.a824		f0 70		beq $a896			beq 	_RGI_Colour
.a826		ae aa 07	ldx $07aa			ldx 	gxCommandID
.a829		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a82b		d0 03		bne $a830			bne 	_RGI_Move 					; move
.a82d		4c be a8	jmp $a8be			jmp		_RGI_SpriteInstructions
.a830						_RGI_Move:
.a830		88		dey				dey 								; unpick get.
.a831						_RGI_Move2:
.a831		20 e4 a8	jsr $a8e4			jsr 	GCGetCoordinatePair 		; move to here
.a834		20 0b a9	jsr $a90b			jsr 	GCCopyPairToStore 			; save
.a837		5a		phy				phy
.a838		20 01 a9	jsr $a901			jsr 	GCLoadAXY 					; load in
.a83b		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a83d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a840		7a		ply				ply
.a841		80 b4		bra $a7f7			bra 	_RGICommandLoop 			; and go round
.a843						_RGI_Exit:
.a843		88		dey				dey 								; unpick : / EOL
.a844		60		rts				rts
.a845						_RGI_Solid:
.a845		a9 02		lda #$02			lda 	#2
.a847		8d ab 07	sta $07ab			sta 	gxFillSolid
.a84a		80 ab		bra $a7f7			bra 	_RGICommandLoop
.a84c						_RGI_Frame:
.a84c		9c ab 07	stz $07ab			stz 	gxFillSolid
.a84f		80 a6		bra $a7f7			bra 	_RGICommandLoop
.a851						_RGI_To:
.a851		20 e4 a8	jsr $a8e4			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a854		20 0b a9	jsr $a90b			jsr 	GCCopyPairToStore
.a857						_RGI_Here:
.a857		5a		phy				phy
.a858		20 01 a9	jsr $a901			jsr 	GCLoadAXY 					; load it into AXY
.a85b		20 bb a8	jsr $a8bb			jsr 	_RGICallHandler 			; go do whatever it is.
.a85e		7a		ply				ply
.a85f		80 96		bra $a7f7			bra 	_RGICommandLoop 			; and go round
.a861						_RGI_By:
.a861		20 f1 a8	jsr $a8f1			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a864		18		clc				clc
.a865		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a867		6d ac 07	adc $07ac			adc 	gxXPos
.a86a		8d ac 07	sta $07ac			sta 	gxXPos
.a86d		a5 61		lda $61				lda 	NSMantissa1+1
.a86f		6d ad 07	adc $07ad			adc 	gxXPos+1
.a872		8d ad 07	sta $07ad			sta 	gxXPos+1
.a875		a5 5a		lda $5a				lda 	NSMantissa0+2
.a877		18		clc				clc
.a878		6d ae 07	adc $07ae			adc 	gxYPos
.a87b		8d ae 07	sta $07ae			sta 	gxYPos
.a87e		80 d7		bra $a857			bra 	_RGI_Here
.a880						_RGI_Dim:
.a880		a2 01		ldx #$01			ldx	 	#1
.a882		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.a885		a5 59		lda $59				lda 	NSMantissa0+1
.a887		c9 00		cmp #$00			cmp 	#0
.a889		f0 2d		beq $a8b8			beq 	_RGIRange
.a88b		c9 09		cmp #$09			cmp 	#8+1
.a88d		b0 29		bcs $a8b8			bcs		_RGIRange
.a88f		3a		dec a				dec 	a
.a890		8d b1 07	sta $07b1			sta 	gxDrawScale
.a893		4c f7 a7	jmp $a7f7			jmp 	_RGICommandLoop
.a896						_RGI_Colour:
.a896		a2 01		ldx #$01			ldx 	#1 							; colour
.a898		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.a89b		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a89d		20 15 a3	jsr $a315			jsr 	NSMSetZero
.a8a0		b1 30		lda ($30),y			lda 	(codePtr),y
.a8a2		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a8a4		d0 04		bne $a8aa			bne 	_RGICDefaultMode
.a8a6		c8		iny				iny
.a8a7		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.a8aa						_RGICDefaultMode:
.a8aa		5a		phy				phy
.a8ab		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a8ad		a6 59		ldx $59				ldx 	NSMantissa0+1
.a8af		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a8b1		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8b4		7a		ply				ply
.a8b5		4c f7 a7	jmp $a7f7			jmp 	_RGICommandLoop 			; and go round
.a8b8						_RGIRange:
.a8b8		4c 92 a4	jmp $a492			jmp 	RangeError
.a8bb						_RGICallHandler:
.a8bb		6c af 07	jmp ($07af)			jmp 	(gxHandler)
.a8be						_RGI_SpriteInstructions:
.a8be		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a8c0		f0 07		beq $a8c9			beq 	_RGISpriteOff
.a8c2		c9 c7		cmp #$c7			cmp 	#KWD_IMAGE
.a8c4		f0 13		beq $a8d9			beq 	_RGISetImage
.a8c6		4c 30 a8	jmp $a830			jmp 	_RGI_Move
.a8c9						_RGISpriteOff:
.a8c9		5a		phy				phy
.a8ca		a0 01		ldy #$01			ldy 	#1
.a8cc		a2 00		ldx #$00			ldx 	#0
.a8ce						_RGIDoCommandLoop:
.a8ce		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a8d0		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8d3		7a		ply				ply
.a8d4		b0 e2		bcs $a8b8			bcs 	_RGIRange
.a8d6		4c f7 a7	jmp $a7f7			jmp 	_RGICommandLoop
.a8d9						_RGISetImage:
.a8d9		a2 01		ldx #$01			ldx 	#1
.a8db		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.a8de		5a		phy				phy
.a8df		aa		tax				tax
.a8e0		a0 00		ldy #$00			ldy 	#0
.a8e2		80 ea		bra $a8ce			bra 	_RGIDoCommandLoop
.a8e4						GCGetCoordinatePair:
.a8e4		a2 01		ldx #$01			ldx 	#1
.a8e6		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.a8e9		20 a4 93	jsr $93a4			jsr 	CheckComma
.a8ec		e8		inx				inx
.a8ed		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.a8f0		60		rts				rts
.a8f1						GCSignedCoordinatePair:
.a8f1		a2 01		ldx #$01			ldx 	#1
.a8f3		20 9f a2	jsr $a29f			jsr 	Evaluate16BitIntegerSigned
.a8f6		20 a4 93	jsr $93a4			jsr 	CheckComma
.a8f9		e8		inx				inx
.a8fa		20 9f a2	jsr $a29f			jsr 	Evaluate16BitIntegerSigned
.a8fd		60		rts				rts
.a8fe						_GCCPRange:
.a8fe		4c 92 a4	jmp $a492			jmp 	RangeError
.a901						GCLoadAXY:
.a901		ad ad 07	lda $07ad			lda 	gxXPos+1
.a904		ae ac 07	ldx $07ac			ldx 	gxXPos
.a907		ac ae 07	ldy $07ae			ldy 	gxYPos
.a90a		60		rts				rts
.a90b						GCCopyPairToStore:
.a90b		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a90d		8d ac 07	sta $07ac			sta 	gxXPos
.a910		a5 61		lda $61				lda 	NSMantissa1+1
.a912		8d ad 07	sta $07ad			sta 	gxXPos+1
.a915		a5 5a		lda $5a				lda 	NSMantissa0+2
.a917		8d ae 07	sta $07ae			sta 	gxYPos
.a91a		60		rts				rts
.07aa						gxCommandID:
>07aa								.fill 	1
.07ab						gxFillSolid:
>07ab								.fill 	1
.07ac						gxXPos:
>07ac								.fill 	2
.07ae						gxYPos:
>07ae								.fill 	1
.07af						gxHandler:
>07af								.fill 	2
.07b1						gxDrawScale:
>07b1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a91b						ResetBitmapSpritesTiles:
.a91b		9c b2 07	stz $07b2			stz 	BitmapPageNumber
.a91e		9c b3 07	stz $07b3			stz 	SpritePageNumber
.a921		9c b4 07	stz $07b4			stz 	TileMapPageNumber
.a924		9c b5 07	stz $07b5			stz 	TileImagePageNumber
.a927		a9 40		lda #$40			lda 	#64
.a929		8d b6 07	sta $07b6			sta 	TileMapWidth
.a92c		a9 20		lda #$20			lda 	#32
.a92e		8d b7 07	sta $07b7			sta 	TileMapHeight
.a931		60		rts				rts
.a932						BitmapCtrl:
.a932						BitmapCtrlLoop:
.a932		b1 30		lda ($30),y			lda 	(codePtr),y
.a934		c8		iny				iny
.a935		a2 01		ldx #$01			ldx 	#1
.a937		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a939		f0 24		beq $a95f			beq 	BitmapSwitch
.a93b		ca		dex				dex
.a93c		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a93e		f0 1f		beq $a95f			beq 	BitmapSwitch
.a940		c9 b9		cmp #$b9			cmp 	#KWD_AT  					; set address
.a942		f0 13		beq $a957			beq 	BitmapAddress
.a944		c9 bd		cmp #$bd			cmp 	#KWD_CLEAR
.a946		f0 02		beq $a94a			beq 	BitmapClear
.a948		88		dey				dey
.a949		60		rts				rts
.a94a						BitmapClear:
.a94a		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get the colour
.a94d		5a		phy				phy
.a94e		aa		tax				tax
.a94f		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a951		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a954		7a		ply				ply
.a955		80 db		bra $a932			bra 	BitmapCtrlLoop
.a957						BitmapAddress:
.a957		20 23 aa	jsr $aa23			jsr 	GetPageNumber
.a95a		8d b2 07	sta $07b2			sta 	BitmapPageNumber
.a95d		80 d3		bra $a932			bra 	BitmapCtrlLoop
.a95f						BitmapSwitch:
.a95f		5a		phy				phy
.a960		ac b2 07	ldy $07b2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a963		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a965		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a968		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a96a		a0 00		ldy #$00			ldy 	#0
.a96c		a2 ff		ldx #$ff			ldx 	#$FF
.a96e		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a971		9c ab 07	stz $07ab			stz 	gxFillSolid
.a974		9c ac 07	stz $07ac			stz 	gxXPos
.a977		9c ad 07	stz $07ad			stz 	gxXPos+1
.a97a		9c ae 07	stz $07ae			stz 	gxYPos
.a97d		9c b1 07	stz $07b1			stz 	gxDrawScale
.a980		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a982		a2 00		ldx #$00			ldx 	#0
.a984		a0 00		ldy #$00			ldy 	#0
.a986		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a989		7a		ply				ply
.a98a		80 a6		bra $a932			bra 	BitmapCtrlLoop
.a98c						SpritesCtrl:
.a98c						SpritesCtrlLoop:
.a98c		b1 30		lda ($30),y			lda 	(codePtr),y
.a98e		c8		iny				iny
.a98f		a2 01		ldx #$01			ldx 	#1
.a991		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a993		f0 13		beq $a9a8			beq 	SpriteSwitch
.a995		ca		dex				dex
.a996		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a998		f0 0e		beq $a9a8			beq 	SpriteSwitch
.a99a		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a99c		f0 02		beq $a9a0			beq 	SpriteSetAddress
.a99e		88		dey				dey
.a99f		60		rts				rts
.a9a0						SpriteSetAddress:
.a9a0		20 23 aa	jsr $aa23			jsr 	GetPageNumber
.a9a3		8d b3 07	sta $07b3			sta 	SpritePageNumber
.a9a6		80 e4		bra $a98c			bra 	SpritesCtrlLoop
.a9a8						SpriteSwitch:
.a9a8		5a		phy				phy
.a9a9		ac b3 07	ldy $07b3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a9ac		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a9ae		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9b1		7a		ply				ply
.a9b2		80 d8		bra $a98c			bra 	SpritesCtrlLoop
.a9b4						TilesCtrl:
.a9b4						TilesCtrlLoop:
.a9b4		b1 30		lda ($30),y			lda 	(codePtr),y
.a9b6		c8		iny				iny
.a9b7		a2 80		ldx #$80			ldx 	#$80
.a9b9		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a9bb		f0 34		beq $a9f1			beq 	TileSwitch
.a9bd		a2 00		ldx #$00			ldx 	#$00
.a9bf		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a9c1		f0 2e		beq $a9f1			beq 	TileSwitch
.a9c3		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a9c5		f0 19		beq $a9e0			beq 	TileSetAddress
.a9c7		c9 c1		cmp #$c1			cmp 	#KWD_DIM
.a9c9		f0 02		beq $a9cd			beq 	TileSetSize
.a9cb		88		dey				dey
.a9cc		60		rts				rts
.a9cd						TileSetSize:
.a9cd		a2 00		ldx #$00			ldx 	#0
.a9cf		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.a9d2		8d b6 07	sta $07b6			sta 	TileMapWidth
.a9d5		20 a4 93	jsr $93a4			jsr 	CheckComma
.a9d8		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.a9db		8d b7 07	sta $07b7			sta 	TileMapHeight
.a9de		80 d4		bra $a9b4			bra 	TilesCtrlLoop
.a9e0						TileSetAddress:
.a9e0		20 23 aa	jsr $aa23			jsr 	GetPageNumber 				; map page
.a9e3		8d b4 07	sta $07b4			sta 	TileMapPageNumber
.a9e6		20 a4 93	jsr $93a4			jsr 	CheckComma
.a9e9		20 23 aa	jsr $aa23			jsr 	GetPageNumber 				; image page
.a9ec		8d b5 07	sta $07b5			sta 	TileImagePageNumber
.a9ef		80 c3		bra $a9b4			bra 	TilesCtrlLoop
.a9f1						TileSwitch:
.a9f1		5a		phy				phy
.a9f2		da		phx				phx 								; set the on/off state and the pages.
.a9f3		8a		txa				txa
.a9f4		0d b4 07	ora $07b4			ora 	TileMapPageNumber
.a9f7		aa		tax				tax
.a9f8		ac b5 07	ldy $07b5			ldy 	TileImagePageNumber
.a9fb		a9 14		lda #$14			lda 	#GCMD_TileCtl
.a9fd		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa00		fa		plx				plx
.aa01		10 b1		bpl $a9b4			bpl 	TilesCtrlLoop 				; nothing else.
.aa03		a9 16		lda #$16			lda 	#GCMD_TileSize 				; set size of tile map.
.aa05		ae b6 07	ldx $07b6			ldx 	TileMapWidth
.aa08		ac b7 07	ldy $07b7			ldy 	TileMapHeight
.aa0b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa0e		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; reset scroll
.aa10		20 1c aa	jsr $aa1c			jsr 	_TileResetScroll
.aa13		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY
.aa15		20 1c aa	jsr $aa1c			jsr 	_TileResetScroll
.aa18		7a		ply				ply
.aa19		4c b4 a9	jmp $a9b4			jmp 	TilesCtrlLoop
.aa1c						_TileResetScroll:
.aa1c		a2 00		ldx #$00			ldx 	#0
.aa1e		a0 00		ldy #$00			ldy 	#0
.aa20		4c 61 80	jmp $8061			jmp 	GXGraphicDraw
.aa23						GetPageNumber:
.aa23		a2 00		ldx #$00			ldx 	#0
.aa25		20 8a a2	jsr $a28a			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.aa28		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.aa2a		29 1f		and #$1f			and 	#$1F
.aa2c		05 58		ora $58				ora 	NSMantissa0
.aa2e		d0 0c		bne $aa3c			bne 	_GPNError
.aa30		a5 68		lda $68				lda 	NSMantissa2
.aa32		06 60		asl $60				asl 	NSMantissa1					; get page number
.aa34		2a		rol a				rol 	a
.aa35		06 60		asl $60				asl 	NSMantissa1
.aa37		2a		rol a				rol 	a
.aa38		06 60		asl $60				asl 	NSMantissa1
.aa3a		2a		rol a				rol 	a
.aa3b		60		rts				rts
.aa3c						_GPNError:
.aa3c		a9 07		lda #$07		lda	#7
.aa3e		4c b5 93	jmp $93b5		jmp	ErrorHandler
.07b2						BitmapPageNumber:
>07b2								.fill 	1
.07b3						SpritePageNumber:
>07b3								.fill 	1
.07b4						TileMapPageNumber:
>07b4								.fill 	1
.07b5						TileImagePageNumber:
>07b5								.fill 	1
.07b6						TileMapWidth:
>07b6								.fill 	1
.07b7						TileMapHeight:
>07b7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.aa41						GfxCommand:
.aa41		a2 00		ldx #$00			ldx 	#0
.aa43		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; command
.aa46		20 a4 93	jsr $93a4			jsr 	CheckComma
.aa49		e8		inx				inx
.aa4a		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger 		; X
.aa4d		20 a4 93	jsr $93a4			jsr 	CheckComma
.aa50		e8		inx				inx
.aa51		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; Y
.aa54		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aa56		4a		lsr a				lsr 	a
.aa57		d0 12		bne $aa6b			bne 	_GfxError
.aa59		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.aa5b		b0 0e		bcs $aa6b			bcs 	_GfxError 					; bit 7 should have been zero
.aa5d		5a		phy				phy 								; save pos
.aa5e		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.aa60		a6 59		ldx $59				ldx 	NSMantissa0+1
.aa62		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aa64		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aa67		b0 02		bcs $aa6b			bcs 	_GfxError
.aa69		7a		ply				ply 								; restore pos and exit.
.aa6a		60		rts				rts
.aa6b						_GfxError:
.aa6b		4c 92 a4	jmp $a492			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.aa6e						UnaryHit:
.aa6e		fa		plx				plx
.aa6f		a9 36		lda #$36			lda 	#zTemp0
.aa71		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get sprite number 0
.aa74		20 a4 93	jsr $93a4			jsr 	CheckComma
.aa77		e8		inx				inx
.aa78		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get sprite number 1
.aa7b		20 9c 93	jsr $939c			jsr		CheckRightBracket
.aa7e		ca		dex				dex 								; fix back up again.
.aa7f		da		phx				phx 								; save X/Y
.aa80		5a		phy				phy
.aa81		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.aa83		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa85		aa		tax				tax
.aa86		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.aa88		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.aa8b		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.aa8c		7a		ply				ply 								; restore XY
.aa8d		fa		plx				plx
.aa8e		20 17 a3	jsr $a317			jsr 	NSMSetByte 					; return the hit result
.aa91		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.aa92						PaletteCommand:
.aa92		a2 00		ldx #$00			ldx 	#0
.aa94		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; colour
.aa97		20 a4 93	jsr $93a4			jsr 	CheckComma
.aa9a		e8		inx				inx
.aa9b		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger 		; r
.aa9e		20 a4 93	jsr $93a4			jsr 	CheckComma
.aaa1		e8		inx				inx
.aaa2		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; g
.aaa5		20 a4 93	jsr $93a4			jsr 	CheckComma
.aaa8		e8		inx				inx
.aaa9		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; b
.aaac		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aaae		85 36		sta $36				sta 	zTemp0
.aab0		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aab2		85 37		sta $37				sta 	zTemp0+1
.aab4		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.aab6		26 37		rol $37				rol	 	zTemp0+1
.aab8		06 36		asl $36				asl 	zTemp0
.aaba		26 37		rol $37				rol	 	zTemp0+1
.aabc		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.aabe		85 01		sta $01				sta 	1
.aac0		5a		phy				phy
.aac1		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aac3		92 36		sta ($36)			sta 	(zTemp0)
.aac5		a0 01		ldy #$01			ldy 	#1
.aac7		a5 5a		lda $5a				lda 	NSMantissa0+2
.aac9		91 36		sta ($36),y			sta 	(zTemp0),y
.aacb		a5 59		lda $59				lda 	NSMantissa0+1
.aacd		c8		iny				iny
.aace		91 36		sta ($36),y			sta 	(zTemp0),y
.aad0		7a		ply				ply
.aad1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/tile.asm

.aad2						TileCommand:
.aad2		b1 30		lda ($30),y			lda 	(codePtr),y
.aad4		c8		iny				iny
.aad5		c9 b9		cmp #$b9			cmp 	#KWD_AT
.aad7		f0 0a		beq $aae3			beq 	_TileSetPos
.aad9		c9 d0		cmp #$d0			cmp 	#KWD_PLOT
.aadb		f0 15		beq $aaf2			beq 	_TilePlot
.aadd		c9 dc		cmp #$dc			cmp 	#KWD_TO
.aadf		f0 40		beq $ab21			beq 	_TileScroll
.aae1		88		dey				dey
.aae2		60		rts				rts
.aae3						_TileSetPos:
.aae3		a2 00		ldx #$00			ldx 	#0 							; location to XA
.aae5		20 41 ab	jsr $ab41			jsr 	TileGetPair
.aae8		5a		phy				phy 								; call routine
.aae9		a8		tay				tay
.aaea		a9 1c		lda #$1c			lda 	#GCMD_TilePos
.aaec		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.aaef		7a		ply				ply
.aaf0		80 e0		bra $aad2			bra 	TileCommand 				; loop round
.aaf2						_TilePlot:
.aaf2		a2 00		ldx #$00			ldx 	#0
.aaf4		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; tile to print
.aaf7		a9 01		lda #$01			lda 	#1
.aaf9		85 59		sta $59				sta 	NSMantissa0+1 				; default repeat count.
.aafb		a2 01		ldx #$01			ldx 	#1
.aafd		b1 30		lda ($30),y			lda 	(codePtr),y
.aaff		c9 c9		cmp #$c9			cmp 	#KWD_LINE
.ab01		d0 04		bne $ab07			bne 	_TileNoRepeat
.ab03		c8		iny				iny 								; skip LINE
.ab04		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; evaluate count
.ab07						_TileNoRepeat:
.ab07						_TileOutLoop:
.ab07		a5 59		lda $59				lda 	NSMantissa0+1 				; complete ?
.ab09		f0 0d		beq $ab18			beq 	_TileCheckAgain 			; check , <repeats>
.ab0b		c6 59		dec $59				dec 	NSMantissa0+1 				; dec count
.ab0d		a9 1e		lda #$1e			lda 	#GCMD_TileWrite				; set up to write tile.
.ab0f		a6 58		ldx $58				ldx 	NSMantissa0
.ab11		5a		phy				phy 								; call preserving Y
.ab12		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab15		7a		ply				ply
.ab16		80 ef		bra $ab07			bra 	_TileOutLoop
.ab18						_TileCheckAgain:
.ab18		b1 30		lda ($30),y			lda 	(codePtr),y
.ab1a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.ab1c		d0 b4		bne $aad2			bne 	TileCommand 				; no, do again
.ab1e		c8		iny				iny 								; consume comma
.ab1f		80 d1		bra $aaf2			bra 	_TilePlot 					; and loop round.
.ab21						_TileScroll:
.ab21		a9 18		lda #$18			lda 	#GCMD_TileScrollX 			; do X
.ab23		20 30 ab	jsr $ab30			jsr 	_TileSetScroll
.ab26		20 a4 93	jsr $93a4			jsr 	CheckComma
.ab29		a9 1a		lda #$1a			lda 	#GCMD_TileScrollY 			; do Y
.ab2b		20 30 ab	jsr $ab30			jsr 	_TileSetScroll
.ab2e		80 a2		bra $aad2			bra 	TileCommand
.ab30						_TileSetScroll:
.ab30		48		pha				pha 								; save command on stack
.ab31		a2 00		ldx #$00			ldx 	#0 							; get value to scroll to
.ab33		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.ab36		68		pla				pla 								; restore command
.ab37		5a		phy				phy 								; save Y code pos
.ab38		a6 58		ldx $58				ldx 	NSMantissa0 				; YX = scroll value
.ab3a		a4 60		ldy $60				ldy 	NSMantissa1
.ab3c		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; do command
.ab3f		7a		ply				ply 								; restore code pos
.ab40		60		rts				rts
.ab41						TileGetPair:
.ab41		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.ab44		48		pha				pha
.ab45		20 a4 93	jsr $93a4			jsr 	CheckComma
.ab48		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.ab4b		fa		plx				plx
.ab4c		60		rts				rts
.ab4d						TileRead:
.ab4d		fa		plx				plx 								; current stack pos (where the result goes)
.ab4e		da		phx				phx 								; save it back again
.ab4f		e8		inx				inx   								; space to evaluate coordinates
.ab50		20 41 ab	jsr $ab41			jsr 	TileGetPair 				; X A are the coordinates
.ab53		5a		phy				phy 								; save code position
.ab54		a8		tay				tay 								; X Y are the coordinates.
.ab55		a9 1c		lda #$1c			lda 	#GCMD_TilePos 				; set the read position.
.ab57		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab5a		a9 20		lda #$20			lda 	#GCMD_TileRead 				; read the tile there
.ab5c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.ab5f		7a		ply				ply 								; restore code and stack positions
.ab60		fa		plx				plx
.ab61		20 17 a3	jsr $a317			jsr 	NSMSetByte 					; set the result.
.ab64		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; check for )
.ab67		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.ab68						ClearScreen:
.ab68		5a		phy				phy
.ab69		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.ab6b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ab6e		7a		ply				ply
.ab6f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cursor.asm

.ab70						CursorControl:
.ab70		a2 00		ldx #$00			ldx 	#0
.ab72		b1 30		lda ($30),y			lda 	(codePtr),y
.ab74		c8		iny				iny
.ab75		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.ab77		f0 08		beq $ab81			beq 	_CCOnOff
.ab79		e8		inx				inx
.ab7a		c9 cd		cmp #$cd			cmp 	#KWD_ON
.ab7c		f0 03		beq $ab81			beq 	_CCOnOff
.ab7e		4c 8d a4	jmp $a48d			jmp 	SyntaxError
.ab81						_CCOnOff:
.ab81		a5 01		lda $01				lda 	1 							; save current I/O
.ab83		48		pha				pha
.ab84		64 01		stz $01				stz 	1 		 					; page 0.
.ab86		ad 10 d0	lda $d010			lda 	$D010 						; read Cursor control register
.ab89		29 fe		and #$fe			and 	#$FE 						; clear enable bit
.ab8b		86 36		stx $36				stx 	zTemp0 						; put bit back in
.ab8d		05 36		ora $36				ora 	zTemp0
.ab8f		8d 10 d0	sta $d010			sta 	$D010
.ab92		68		pla				pla 	 							; switch I/O back
.ab93		85 01		sta $01				sta 	1
.ab95		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.ab96						XLoadCommand:
.ab96		20 ff 8d	jsr $8dff			jsr 	NewProgram
.ab99		20 1a 87	jsr $871a			jsr 	BackloadProgram
.ab9c		4c 02 88	jmp $8802			jmp 	WarmStart
.ab9f						XGoCommand:
.ab9f		20 ff 8d	jsr $8dff			jsr 	NewProgram
.aba2		20 1a 87	jsr $871a			jsr 	BackloadProgram
.aba5		4c 8a 8f	jmp $8f8a			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.aba8						BootXA:
.aba8		85 fb		sta $fb		            sta     kernel.args.buf+0
.abaa		86 fc		stx $fc		            stx     kernel.args.buf+1
.abac		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.abaf		4c 02 88	jmp $8802	            jmp 	WarmStart
>abb2		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.abb6						UnaryEvent:
.abb6		fa		plx				plx
.abb7		20 44 b2	jsr $b244			jsr 	TimerToStackX 				; timer in +0
.abba		e8		inx				inx  								; put reference into +1
.abbb		20 09 9d	jsr $9d09			jsr 	EvaluateTerm
.abbe		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.abc0		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.abc2		d0 4c		bne $ac10			bne 	_UEType
.abc4		e8		inx				inx 								; put the step in +2
.abc5		20 a4 93	jsr $93a4			jsr 	CheckComma
.abc8		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.abcb		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.abce		ca		dex				dex
.abcf		ca		dex				dex
.abd0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.abd2		85 36		sta $36				sta 	zTemp0
.abd4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.abd6		85 37		sta $37				sta 	zTemp0+1
.abd8		5a		phy				phy
.abd9		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.abdb		b1 36		lda ($36),y			lda 	(zTemp0),y
.abdd		30 2d		bmi $ac0c			bmi 	_UEFalse 					; exit if signed.
.abdf		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.abe1		b5 58		lda $58,x			lda 	NSMantissa0,x
.abe3		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.abe5		c8		iny				iny
.abe6		b5 60		lda $60,x			lda 	NSMantissa1,x
.abe8		f1 36		sbc ($36),y			sbc		(zTemp0),y
.abea		c8		iny				iny
.abeb		b5 68		lda $68,x			lda 	NSMantissa2,x
.abed		f1 36		sbc ($36),y			sbc		(zTemp0),y
.abef		90 1b		bcc $ac0c			bcc 	_UEFalse 					; no, return FALSE.
.abf1		18		clc				clc
.abf2		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.abf4		b5 58		lda $58,x			lda 	NSMantissa0,x
.abf6		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.abf8		91 36		sta ($36),y			sta 	(zTemp0),y
.abfa		c8		iny				iny
.abfb		b5 60		lda $60,x			lda 	NSMantissa1,x
.abfd		75 62		adc $62,x			adc 	NSMantissa1+2,x
.abff		91 36		sta ($36),y			sta 	(zTemp0),y
.ac01		c8		iny				iny
.ac02		b5 68		lda $68,x			lda 	NSMantissa2,x
.ac04		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.ac06		91 36		sta ($36),y			sta 	(zTemp0),y
.ac08		7a		ply				ply
.ac09		4c 28 94	jmp $9428			jmp 	ReturnTrue
.ac0c						_UEFalse:
.ac0c		7a		ply				ply 								; restore Y
.ac0d		4c 33 94	jmp $9433			jmp 	ReturnFalse 				; and return False
.ac10						_UEType:
.ac10		4c 97 a4	jmp $a497			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.ac13						Command_BLoad:
.ac13		20 1e ac	jsr $ac1e			jsr 	BLOADHandler
.ac16		c9 00		cmp #$00			cmp 	#0
.ac18		d0 01		bne $ac1b			bne 	_BLError
.ac1a		60		rts				rts
.ac1b						_BLError:
.ac1b		4c 6d ae	jmp $ae6d			jmp 	CLErrorHandler
.ac1e						BLOADHandler:
.ac1e		a2 00		ldx #$00			ldx 	#0
.ac20		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; file name to load
.ac23		20 a4 93	jsr $93a4			jsr 	CheckComma 					; consume comma
.ac26		e8		inx				inx
.ac27		20 82 a2	jsr $a282			jsr 	EvaluateInteger 			; load address (full physical address)
.ac2a		5a		phy				phy
.ac2b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ac2d		a6 60		ldx $60				ldx 	NSMantissa1
.ac2f		20 ca 83	jsr $83ca			jsr 	KNLOpenFileRead 			; open file for reading
.ac32		b0 50		bcs $ac84			bcs 	_BLErrorExit 				; error, so fail.
.ac34		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.ac37		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ac39		20 86 ac	jsr $ac86			jsr 	BLOpenPhysicalMemory 		; open for access.
.ac3c						_BLReadFile:
.ac3c		ad bc 07	lda $07bc			lda 	BasicFileStream
.ac3f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ac41		20 1f 84	jsr $841f			jsr 	KNLReadBlock 				; read next block
.ac44		b0 22		bcs $ac68			bcs 	_BLFileError 				; file error, which might be EOF.
.ac46		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.ac48		f0 f2		beq $ac3c			beq 	_BLReadFile
.ac4a		8d ba 07	sta $07ba			sta 	BLCopyCounter 				; counter.
.ac4d		ac b9 07	ldy $07b9			ldy 	BLYOffset 					; copy the buffer out here
.ac50		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.ac52						_BLCopyLoop:
.ac52		bd 9a 06	lda $069a,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.ac55		91 3a		sta ($3a),y			sta 	(zTemp2),y
.ac57		c8		iny				iny
.ac58		d0 03		bne $ac5d			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.ac5a		20 ae ac	jsr $acae			jsr 	BLAdvancePhysicalMemory
.ac5d						_BLNoAdjust:
.ac5d		e8		inx				inx
.ac5e		ce ba 07	dec $07ba			dec 	BLCopyCounter
.ac61		d0 ef		bne $ac52			bne 	_BLCopyLoop
.ac63		8c b9 07	sty $07b9			sty 	BLYOffset 					; update Y offset
.ac66		80 d4		bra $ac3c			bra 	_BLReadFile 				; go ask for more.
.ac68						_BLFileError:
.ac68		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.ac6a		d0 0d		bne $ac79			bne 	_BLErrorHandler				; no, it's an actual error
.ac6c		20 a8 ac	jsr $aca8			jsr 	BLClosePhysicalMemory 		; close the access.
.ac6f		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close the file
.ac72		20 94 84	jsr $8494			jsr 	KNLCloseFile
.ac75		a9 00		lda #$00			lda 	#0 							; and return zero.
.ac77		7a		ply				ply
.ac78		60		rts				rts
.ac79						_BLErrorHandler:
.ac79		48		pha				pha 								; save code
.ac7a		20 a8 ac	jsr $aca8			jsr 	BLClosePhysicalMemory 		; close access
.ac7d		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close the open file
.ac80		20 94 84	jsr $8494			jsr 	KNLCloseFile
.ac83		68		pla				pla 								; get error code
.ac84						_BLErrorExit:
.ac84		7a		ply				ply 								; restore position and exit.
.ac85		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.ac86						BLOpenPhysicalMemory:
.ac86		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.ac88		8d b8 07	sta $07b8			sta 	BLNormalMapping
.ac8b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.ac8d		8d b9 07	sta $07b9			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.ac90		64 3a		stz $3a				stz 	zTemp2
.ac92		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac94		29 1f		and #$1f			and 	#$1F
.ac96		09 60		ora #$60			ora 	#BLAccessPage << 5
.ac98		85 3b		sta $3b				sta 	zTemp2+1
.ac9a		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.ac9c		16 60		asl $60,x			asl 	NSMantissa1,x
.ac9e		2a		rol a				rol 	a
.ac9f		16 60		asl $60,x			asl 	NSMantissa1,x
.aca1		2a		rol a				rol 	a
.aca2		16 60		asl $60,x			asl 	NSMantissa1,x
.aca4		2a		rol a				rol 	a
.aca5		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.aca7		60		rts				rts
.aca8						BLClosePhysicalMemory:
.aca8		ad b8 07	lda $07b8			lda 	BLNormalMapping
.acab		85 0b		sta $0b				sta 	BLAccessPage+8
.acad		60		rts				rts
.acae						BLAdvancePhysicalMemory:
.acae		48		pha				pha
.acaf		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.acb1		a5 3b		lda $3b				lda 	zTemp2+1
.acb3		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.acb5		d0 06		bne $acbd			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.acb7		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.acb9		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.acbb		85 3b		sta $3b				sta 	zTemp2+1
.acbd						_BLAPMExit:
.acbd		68		pla				pla
.acbe		60		rts				rts
.07b8						BLNormalMapping:
>07b8								.fill 	1
.07b9						BLYOffset:
>07b9								.fill 	1
.07ba						BLCopyCounter:
>07ba								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.acbf						Command_BSave:
.acbf		20 ca ac	jsr $acca			jsr 	BSaveHandler
.acc2		c9 00		cmp #$00			cmp 	#0
.acc4		d0 01		bne $acc7			bne 	_BSError
.acc6		60		rts				rts
.acc7						_BSError:
.acc7		4c 6d ae	jmp $ae6d			jmp 	CLErrorHandler
.acca						BSaveHandler:
.acca		a2 00		ldx #$00			ldx 	#0
.accc		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; file name to load
.accf		20 a4 93	jsr $93a4			jsr 	CheckComma 					; consume comma
.acd2		e8		inx				inx
.acd3		20 82 a2	jsr $a282			jsr 	EvaluateInteger 			; load address (full physical address)
.acd6		20 a4 93	jsr $93a4			jsr 	CheckComma 					; consume comma
.acd9		e8		inx				inx
.acda		20 82 a2	jsr $a282			jsr 	EvaluateInteger 			; data length (3 bytes only)
.acdd		5a		phy				phy
.acde		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ace0		a6 60		ldx $60				ldx 	NSMantissa1
.ace2		20 c5 83	jsr $83c5			jsr 	KNLOpenFileWrite 			; open file for reading
.ace5		b0 47		bcs $ad2e			bcs 	_BSErrorExit 				; error, so fail.
.ace7		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.acea		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.acec		20 86 ac	jsr $ac86			jsr 	BLOpenPhysicalMemory 		; open for access.
.acef		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.acf1		ac b9 07	ldy $07b9			ldy 	BLYOffset 					; used for data offset.
.acf4						_BSWriteToFileLoop:
.acf4		38		sec				sec 								; pre decrement count.
.acf5		a5 5a		lda $5a				lda 	NSMantissa0+2
.acf7		e9 01		sbc #$01			sbc 	#1
.acf9		85 5a		sta $5a				sta 	NSMantissa0+2
.acfb		a5 62		lda $62				lda 	NSMantissa1+2
.acfd		e9 00		sbc #$00			sbc 	#0
.acff		85 62		sta $62				sta 	NSMantissa1+2
.ad01		a5 6a		lda $6a				lda 	NSMantissa2+2
.ad03		e9 00		sbc #$00			sbc 	#0
.ad05		85 6a		sta $6a				sta 	NSMantissa2+2
.ad07		30 15		bmi $ad1e			bmi 	_BSFileComplete 			; undercounted, so exit.
.ad09		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.ad0b		9d 9a 06	sta $069a,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.ad0e		e8		inx				inx
.ad0f		c8		iny				iny 								; next byte
.ad10		d0 03		bne $ad15			bne 	_BSNoCheck
.ad12		20 ae ac	jsr $acae			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.ad15						_BSNoCheck:
.ad15		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.ad17		d0 db		bne $acf4			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.ad19		20 30 ad	jsr $ad30			jsr 	BSFlushBuffer 				; yes, flush the buffer
.ad1c		80 d6		bra $acf4			bra 	_BSWriteToFileLoop 			; and keep on going
.ad1e						_BSFileComplete:
.ad1e		20 30 ad	jsr $ad30			jsr 	BSFlushBuffer 				; write the buffer remainder.
.ad21		20 a8 ac	jsr $aca8			jsr 	BLClosePhysicalMemory 		; close the access.
.ad24		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close the file
.ad27		20 94 84	jsr $8494			jsr 	KNLCloseFile
.ad2a		a9 00		lda #$00			lda 	#0
.ad2c		7a		ply				ply
.ad2d		60		rts				rts
.ad2e						_BSErrorExit:
.ad2e		7a		ply				ply
.ad2f		60		rts				rts
.ad30						BSFlushBuffer:
.ad30		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.ad32		f0 0d		beq $ad41			beq 	_BSFBExit 					; if so, exit.
.ad34		a9 9a		lda #$9a			lda 	#KNLReadBuffer & $FF 		; where to write from.
.ad36		85 36		sta $36				sta 	zTemp0
.ad38		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.ad3a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.ad3c		20 2c af	jsr $af2c			jsr 	CLWriteByteBlock 			; write it.
.ad3f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.ad41						_BSFBExit:
.ad41		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.ad42						Command_Dir:
.ad42		ad 9a 07	lda $079a			lda     KNLDefaultDrive				; set drive to list.
.ad45		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.ad47		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.ad49		20 78 ff	jsr $ff78			jsr     kernel.Directory.Open
.ad4c		b0 4f		bcs $ad9d			bcs     _CDExit
.ad4e						_CDEventLoop:
.ad4e		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.ad51		20 81 82	jsr $8281			jsr     GetNextEvent
.ad54		b0 f8		bcs $ad4e			bcs     _CDEventLoop
.ad56		ad 9b 07	lda $079b			lda     KNLEvent.type
.ad59		c9 46		cmp #$46			cmp     #kernel.event.directory.CLOSED
.ad5b		f0 40		beq $ad9d			beq    	_CDExit
.ad5d		20 62 ad	jsr $ad62			jsr     _CDMessages 				; handle various messages
.ad60		80 ec		bra $ad4e			bra     _CDEventLoop
.ad62						_CDMessages:
.ad62		c9 3c		cmp #$3c			cmp     #kernel.event.directory.OPENED
.ad64		f0 15		beq $ad7b			beq     _CDEVRead
.ad66		c9 3e		cmp #$3e			cmp     #kernel.event.directory.VOLUME
.ad68		f0 19		beq $ad83			beq     _CDEVVolume
.ad6a		c9 40		cmp #$40			cmp     #kernel.event.directory.FILE
.ad6c		f0 32		beq $ada0			beq     _CDEVFile
.ad6e		c9 42		cmp #$42			cmp     #kernel.event.directory.FREE
.ad70		f0 70		beq $ade2			beq     _CDEVFree
.ad72		c9 44		cmp #$44			cmp     #kernel.event.directory.EOF
.ad74		f0 6e		beq $ade4			beq     _CDEVEOF
.ad76		c9 48		cmp #$48			cmp     #kernel.event.directory.ERROR
.ad78		f0 6a		beq $ade4			beq     _CDEVEOF
.ad7a		60		rts				rts
.ad7b						_CDEVRead:
.ad7b		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ad7e		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.ad80		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Read
.ad83						_CDEVVolume:
.ad83		a9 5b		lda #$5b			lda 	#"["
.ad85		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad88		ad a0 07	lda $07a0			lda     KNLEvent.directory.volume.len
.ad8b		20 ec ad	jsr $adec			jsr     _CDReadData
.ad8e		20 14 94	jsr $9414			jsr 	PrintStringXA
.ad91		a9 5d		lda #$5d			lda 	#"]"
.ad93		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad96		a9 0d		lda #$0d			lda 	#13
.ad98		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ad9b		80 de		bra $ad7b			bra     _CDEVRead
.ad9d						_CDExit:
.ad9d		4c 02 88	jmp $8802			jmp 	WarmStart
.ada0						_CDEVFile:
.ada0		a9 20		lda #$20			lda 	#32
.ada2		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ada5		ad a0 07	lda $07a0			lda     KNLEvent.directory.file.len
.ada8		48		pha				pha
.ada9		20 ec ad	jsr $adec			jsr     _CDReadData
.adac		20 14 94	jsr $9414			jsr 	PrintStringXA
.adaf		68		pla				pla
.adb0		49 ff		eor #$ff			eor 	#$FF
.adb2		38		sec				sec
.adb3		69 10		adc #$10			adc 	#16
.adb5		aa		tax				tax
.adb6						_CDEVTab:
.adb6		a9 20		lda #$20			lda 	#32
.adb8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.adbb		ca		dex				dex
.adbc		10 f8		bpl $adb6			bpl 	_CDEVTab
.adbe		20 03 ae	jsr $ae03			jsr 	_CDReadExtended
.adc1		ad 26 05	lda $0526			lda 	lineBuffer
.adc4		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.adc7		20 2a 98	jsr $982a			jsr 	ConvertInt16
.adca		20 14 94	jsr $9414			jsr 	PrintStringXA
.adcd		a2 ad		ldx #$ad			ldx 	#_CDEVFMessage >> 8
.adcf		a9 d6		lda #$d6			lda 	#_CDEVFMessage & $FF
.add1		20 14 94	jsr $9414			jsr 	PrintStringXA
.add4		80 a5		bra $ad7b			bra     _CDEVRead
.add6						_CDEVFMessage:
>add6		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>adde		29 2e 0d 00
.ade2						_CDEVFree:
.ade2		80 00		bra $ade4			bra     _CDEVEOF
.ade4						_CDEVEOF:
.ade4		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ade7		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.ade9		4c 80 ff	jmp $ff80			jmp     kernel.Directory.Close
.adec						_CDReadData:
.adec		85 fd		sta $fd				sta     kernel.args.recv.buflen
.adee		a9 26		lda #$26			lda     #lineBuffer & $FF
.adf0		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.adf2		a9 05		lda #$05			lda     #lineBuffer >> 8
.adf4		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.adf6		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.adf9		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.adfb		9e 26 05	stz $0526,x			stz     lineBuffer,x
.adfe		a9 26		lda #$26			lda 	#lineBuffer & $FF
.ae00		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.ae02		60		rts				rts
.ae03						_CDReadExtended:
.ae03		a9 02		lda #$02			lda     #2
.ae05		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ae07		a9 26		lda #$26			lda     #lineBuffer & $FF
.ae09		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ae0b		a9 05		lda #$05			lda     #lineBuffer >> 8
.ae0d		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ae0f		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.ae12						Command_Drive:
.ae12		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.ae15		20 c1 83	jsr $83c1			jsr 	KNLSetDrive
.ae18		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.ae19						Command_Load:
.ae19		20 1f ae	jsr $ae1f			jsr 	LoadFile
.ae1c		4c 02 88	jmp $8802			jmp 	WarmStart
.ae1f						LoadFile:
.ae1f		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; file name to load
.ae22		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ae24		a5 36		lda $36				lda 	zTemp0
.ae26		20 ca 83	jsr $83ca			jsr 	KNLOpenFileRead 			; open file for reading
.ae29		b0 42		bcs $ae6d			bcs 	CLErrorHandler 				; error, so fail.
.ae2b		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.ae2e		20 bd ae	jsr $aebd			jsr     LoadReadByteInit            ; Init reader with the stream
.ae31		20 ff 8d	jsr $8dff			jsr 	NewProgram 					; does the actual NEW.
.ae34		9c bb 07	stz $07bb			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae37						_CLLoop:
.ae37		20 7b ae	jsr $ae7b			jsr 	LoadReadLine 				; get next line.
.ae3a		f0 10		beq $ae4c			beq 	_CLExit 					; end, exit.
.ae3c		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae3f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.ae42		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.ae45		f0 f0		beq $ae37			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.ae47		20 dd 87	jsr $87dd			jsr 	EditProgramCode 			; do the editing etc.
.ae4a		80 eb		bra $ae37			bra 	_CLLoop
.ae4c						_CLExit:
.ae4c		ad bc 07	lda $07bc			lda 	BasicFileStream
.ae4f		20 94 84	jsr $8494			jsr 	KNLCloseFile
.ae52						CLComplete:
.ae52		a9 5a		lda #$5a			lda 	#_CLCMsg & $FF
.ae54		a2 ae		ldx #$ae			ldx 	#_CLCMsg >> 8
.ae56		20 14 94	jsr $9414			jsr 	PrintStringXA
.ae59		60		rts				rts
.ae5a						_CLCMsg:
>ae5a		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>ae62		2e 0d 00
.ae65						CLCloseError:
.ae65		48		pha				pha
.ae66		ad bc 07	lda $07bc			lda 	BasicFileStream
.ae69		20 94 84	jsr $8494			jsr 	KNLCloseFile
.ae6c		68		pla				pla
.ae6d						CLErrorHandler:
.ae6d		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.ae6f		f0 05		beq $ae76			beq 	_CLEHNotFound
.ae71		a9 1a		lda #$1a		lda	#26
.ae73		4c b5 93	jmp $93b5		jmp	ErrorHandler
.ae76						_CLEHNotFound:
.ae76		a9 19		lda #$19		lda	#25
.ae78		4c b5 93	jmp $93b5		jmp	ErrorHandler
.ae7b						LoadReadLine:
.ae7b		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.ae7d		20 97 ae	jsr $ae97			jsr 	LoadReadCharacter
.ae80		f0 14		beq $ae96			beq 	_LRLExit 					; eof ?
.ae82		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.ae84		90 f5		bcc $ae7b			bcc 	LoadReadLine
.ae86						_LRLLoop:
.ae86		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.ae89		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.ae8c		e8		inx				inx
.ae8d		20 97 ae	jsr $ae97			jsr 	LoadReadCharacter 			; next line
.ae90		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.ae92		b0 f2		bcs $ae86			bcs 	_LRLLoop
.ae94		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.ae96						_LRLExit:
.ae96		60		rts				rts
.ae97						LoadReadCharacter:
.ae97		da		phx				phx
.ae98		5a		phy				phy
.ae99		ad bb 07	lda $07bb			lda 	LoadEOFFlag 				; already done EOF.
.ae9c		d0 0c		bne $aeaa			bne 	_LRCIsEOF
.ae9e		20 c7 ae	jsr $aec7			jsr 	LoadReadByte 				; read a byte
.aea1		90 09		bcc $aeac			bcc		_LRCExit 					; read okay.
.aea3		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.aea5		d0 be		bne $ae65			bne 	CLCloseError
.aea7		ce bb 07	dec $07bb			dec 	LoadEOFFlag
.aeaa						_LRCIsEOF:
.aeaa		a9 00		lda #$00			lda 	#0
.aeac						_LRCExit:
.aeac		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.aeae		d0 02		bne $aeb2			bne 	_LRCNotTab
.aeb0		a9 20		lda #$20			lda 	#' '
.aeb2						_LRCNotTab:
.aeb2		c9 0a		cmp #$0a			cmp 	#$0A
.aeb4		d0 02		bne $aeb8			bne 	_LRCNotLF
.aeb6		a9 0d		lda #$0d			lda 	#$0D
.aeb8						_LRCNotLF:
.aeb8		7a		ply				ply
.aeb9		fa		plx				plx
.aeba		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.aebc		60		rts				rts
.aebd						LoadReadByteInit:
.aebd		8d bd 07	sta $07bd			sta     LoadFileStream 				; save stream
.aec0		9c be 07	stz $07be			stz     LoadNextCharacter 			; reset buffer
.aec3		9c bf 07	stz $07bf			stz     LoadEndCharacter
.aec6		60		rts				rts
.aec7						LoadReadByte:
.aec7		da		phx				phx
.aec8		ae be 07	ldx $07be			ldx     LoadNextCharacter 					; all data consumed ?
.aecb		ec bf 07	cpx $07bf			cpx     LoadEndCharacter
.aece		d0 12		bne $aee2			bne     _KNLRBGetNextByte
.aed0		ad bd 07	lda $07bd			lda     LoadFileStream
.aed3		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.aed5		20 1f 84	jsr $841f			jsr     KNLReadBlock 				; read next chunk from the stream
.aed8		b0 0f		bcs $aee9			bcs     _KNLRBError 				; error has occurred on read.
.aeda		8d bf 07	sta $07bf			sta     LoadEndCharacter 						; # read is the number available
.aedd		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.aedf		8e be 07	stx $07be			stx     LoadNextCharacter
.aee2						_KNLRBGetNextByte:
.aee2		bd 9a 06	lda $069a,x			lda     KNLReadBuffer,x 			; get the next data item
.aee5		ee be 07	inc $07be			inc     LoadNextCharacter 					; and advance the index
.aee8		18		clc				clc 								; succeeded
.aee9						_KNLRBError:
.aee9		fa		plx				plx
.aeea		60		rts				rts
.07bb						LoadEOFFlag:
>07bb								.fill 	1
.07bc						BasicFileStream:
>07bc								.fill 	1
.07bd						LoadFileStream:
>07bd								.byte   ?
.07be						LoadNextCharacter:
>07be								.byte   ?
.07bf						LoadEndCharacter:
>07bf								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.aeeb						Command_Save:
.aeeb		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; file name to load
.aeee		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.aef0		a5 36		lda $36				lda 	zTemp0
.aef2		20 c5 83	jsr $83c5			jsr 	KNLOpenFileWrite 			; open file for writing
.aef5		b0 32		bcs $af29			bcs 	CSErrorHandler 				; error, so fail.
.aef7		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.aefa		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aefc		85 30		sta $30				sta 	codePtr
.aefe		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af00		85 31		sta $31				sta 	codePtr+1
.af02						_CSLoop:
.af02		b2 30		lda ($30)			lda 	(codePtr)
.af04		f0 17		beq $af1d			beq 	_CSExit
.af06		20 4d af	jsr $af4d			jsr 	CSGetCleanLine
.af09		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.af0b		85 36		sta $36				sta 	zTemp0
.af0d		20 2c af	jsr $af2c			jsr 	CLWriteByteBlock 			; write the block out.
.af10		18		clc				clc
.af11		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.af13		65 30		adc $30				adc 	codePtr
.af15		85 30		sta $30				sta 	codePtr
.af17		90 02		bcc $af1b			bcc 	_CREExit
.af19		e6 31		inc $31				inc 	codePtr+1 					; carry
.af1b						_CREExit:
.af1b		80 e5		bra $af02			bra 	_CSLoop
.af1d						_CSExit:
.af1d		ad bc 07	lda $07bc			lda 	BasicFileStream 			; close file
.af20		20 94 84	jsr $8494			jsr 	KNLCloseFile
.af23		20 52 ae	jsr $ae52			jsr 	CLComplete 					; display complete message.
.af26		4c 02 88	jmp $8802			jmp 	WarmStart 					; and warm start
.af29						CSErrorHandler:
.af29		4c 6d ae	jmp $ae6d			jmp 	CLErrorHandler
.af2c						CLWriteByteBlock:
.af2c		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.af2e		f0 1c		beq $af4c			beq 	_CLWBBExit					; if so, exit
.af30		ad bc 07	lda $07bc			lda 	BasicFileStream 			; stream to write, count in X
.af33		20 5a 84	jsr $845a			jsr 	KNLWriteBlock 				; call one write attempt
.af36		b0 f1		bcs $af29			bcs 	CSErrorHandler 				; error occurred
.af38		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.af3a		8a		txa				txa 								; subtract bytes written from X, total count.
.af3b		38		sec				sec
.af3c		e5 38		sbc $38				sbc 	zTemp1
.af3e		aa		tax				tax
.af3f		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.af40		a5 36		lda $36				lda 	zTemp0
.af42		65 38		adc $38				adc 	zTemp1
.af44		85 36		sta $36				sta 	zTemp0
.af46		90 e4		bcc $af2c			bcc 	CLWriteByteBlock
.af48		e6 37		inc $37				inc 	zTemp0+1
.af4a		80 e0		bra $af2c			bra 	CLWriteByteBlock 			; and retry write out.
.af4c						_CLWBBExit:
.af4c		60		rts				rts
.af4d						CSGetCleanLine:
.af4d		a9 00		lda #$00			lda 	#0 							; no indent.
.af4f		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.af52		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.af54		a0 00		ldy #$00			ldy 	#0
.af56						_CSClean:
.af56		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.af59		f0 09		beq $af64			beq 	_CSDoneClean
.af5b		30 04		bmi $af61			bmi 	_CSIgnoreCharacter
.af5d		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.af60		e8		inx				inx
.af61						_CSIgnoreCharacter:
.af61		c8		iny				iny
.af62		80 f2		bra $af56			bra 	_CSClean
.af64						_CSDoneClean:
.af64		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.af66		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.af69		e8		inx				inx
.af6a		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.af6d		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.af6f		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.af71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.af72						Command_Try:
.af72		b1 30		lda ($30),y			lda 	(codePtr),y
.af74		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.af76		d0 0c		bne $af84			bne 	_TrySyntax
.af78		c8		iny				iny 								; get second
.af79		b1 30		lda ($30),y			lda 	(codePtr),y
.af7b		c8		iny				iny 								; and consume it.
.af7c		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.af7e		f0 09		beq $af89			beq 	_TryBLoad
.af80		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.af82		f0 0a		beq $af8e			beq 	_TryBSave
.af84						_TrySyntax:
.af84		a9 02		lda #$02		lda	#2
.af86		4c b5 93	jmp $93b5		jmp	ErrorHandler
.af89						_TryBLoad:
.af89		20 1e ac	jsr $ac1e			jsr 	BLOADHandler
.af8c		80 03		bra $af91			bra 	_TryExit
.af8e						_TryBSave:
.af8e		20 ca ac	jsr $acca			jsr 	BSaveHandler
.af91						_TryExit:
.af91		48		pha				pha 								; save result
.af92		b1 30		lda ($30),y			lda 	(codePtr),y
.af94		c8		iny				iny
.af95		c9 dc		cmp #$dc			cmp 	#KWD_TO
.af97		d0 eb		bne $af84			bne 	_TrySyntax
.af99		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.af9b		20 09 9d	jsr $9d09			jsr 	EvaluateTerm
.af9e		b5 50		lda $50,x			lda 	NSStatus,x
.afa0		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.afa2		d0 e0		bne $af84			bne		_TrySyntax
.afa4		68		pla				pla 								; error code.
.afa5		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.afa7		20 17 a3	jsr $a317			jsr 	NSMSetByte
.afaa		ca		dex				dex
.afab		20 0e 8c	jsr $8c0e			jsr 	AssignVariable 				; do the assign and exit
.afae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e779						m
.afaf						Command_VERIFY:
.afaf		20 6d a2	jsr $a26d			jsr 	EvaluateString 				; file name to verify
.afb2		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.afb4		a5 36		lda $36				lda 	zTemp0
.afb6		20 ca 83	jsr $83ca			jsr 	KNLOpenFileRead 			; open file for reading
.afb9		b0 4b		bcs $b006			bcs 	_CVErrorHandler 			; error, so fail.
.afbb		8d bc 07	sta $07bc			sta 	BasicFileStream 			; save the reading stream.
.afbe		20 bd ae	jsr $aebd			jsr     LoadReadByteInit            ; Init reader with the stream
.afc1		9c bb 07	stz $07bb			stz 	LoadEOFFlag 				; clear EOF Flag.
.afc4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.afc6		85 30		sta $30				sta 	codePtr
.afc8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afca		85 31		sta $31				sta 	codePtr+1
.afcc						_CVLoop:
.afcc		20 7b ae	jsr $ae7b			jsr 	LoadReadLine 				; get next line.
.afcf		f0 27		beq $aff8			beq 	_CVExit 					; end, exit.
.afd1		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.afd4		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.afd7		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.afda		f0 f0		beq $afcc			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.afdc		a0 00		ldy #$00			ldy 	#0 							; start compare
.afde						_CVCompareLoop:
.afde		b1 30		lda ($30),y			lda 	(codePtr),y
.afe0		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.afe3		d0 1c		bne $b001			bne 	_CVCompareError
.afe5		c8		iny				iny
.afe6		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.afe9		d0 f3		bne $afde			bne 	_CVCompareLoop
.afeb		18		clc				clc
.afec		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.afee		65 30		adc $30				adc 	codePtr
.aff0		85 30		sta $30				sta 	codePtr
.aff2		90 02		bcc $aff6			bcc 	_CREExit
.aff4		e6 31		inc $31				inc 	codePtr+1 					; carry
.aff6						_CREExit:
.aff6		80 d4		bra $afcc			bra 	_CVLoop
.aff8						_CVExit:
.aff8		ad bc 07	lda $07bc			lda 	BasicFileStream
.affb		20 94 84	jsr $8494			jsr 	KNLCloseFile
.affe		4c 52 ae	jmp $ae52			jmp 	CLComplete
.b001						_CVCompareError:
.b001		a9 1b		lda #$1b		lda	#27
.b003		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b006						_CVErrorHandler:
.b006		4c 6d ae	jmp $ae6d			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.b009						UnaryJoyX:
.b009		18		clc				clc
.b00a		80 01		bra $b00d			bra 	JoyMain
.b00c						UnaryJoyY:
.b00c		38		sec				sec
.b00d						JoyMain:
.b00d		fa		plx				plx 								; get pos
.b00e		08		php				php 								; save carry (set for Y)
.b00f		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.b012		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.b015		20 9a 84	jsr $849a			jsr 	KNLReadController 			; read the controller.
.b018		28		plp				plp
.b019		b0 02		bcs $b01d			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.b01b		4a		lsr a				lsr 	a
.b01c		4a		lsr a				lsr 	a
.b01d						_JMNoShift:
.b01d		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.b01e		b0 07		bcs $b027			bcs 	JMIsLeft
.b020		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.b021		b0 07		bcs $b02a			bcs 	JMIsRight
.b023		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; zero result
.b026		60		rts				rts
.b027						JMIsLeft:
.b027		4c 28 94	jmp $9428			jmp 	ReturnTrue
.b02a						JMIsRight:
.b02a		a9 01		lda #$01			lda 	#1
.b02c		20 17 a3	jsr $a317			jsr 	NSMSetByte
.b02f		60		rts				rts
.b030						UnaryJoyB:
.b030		fa		plx				plx 								; get pos
.b031		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; ignore the parameter
.b034		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.b037		20 9a 84	jsr $849a			jsr 	KNLReadController 			; read the controller.
.b03a		29 10		and #$10			and 	#$10
.b03c		d0 e9		bne $b027			bne 	JMIsLeft
.b03e		20 15 a3	jsr $a315			jsr 	NSMSetZero
.b041		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.b042						MCCommand:
.b042		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.b044		48		pha				pha
.b045		64 01		stz $01				stz 	1
.b047		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.b04a		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.b04c		8d c0 07	sta $07c0			sta 	DMAControlByte
.b04f		20 fd b0	jsr $b0fd			jsr 	MCPosition 					; start position
.b052		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.b054		20 ce b0	jsr $b0ce			jsr 	MCCopyAddress
.b057		a2 08		ldx #$08			ldx 	#8
.b059		20 ce b0	jsr $b0ce			jsr 	MCCopyAddress
.b05c		b1 30		lda ($30),y			lda 	(codePtr),y
.b05e		c8		iny				iny
.b05f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.b061		f0 09		beq $b06c			beq 	_MCSize1D
.b063		c9 d6		cmp #$d6			cmp 	#KWD_RECT 					; RECT <x>,<y>
.b065		f0 11		beq $b078			beq 	_MCRect2D
.b067						_MCSyntax:
.b067		a9 02		lda #$02		lda	#2
.b069		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b06c						_MCSize1D:
.b06c		a2 00		ldx #$00			ldx 	#0 							; get size
.b06e		20 82 a2	jsr $a282			jsr 	EvaluateInteger
.b071		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.b073		20 ce b0	jsr $b0ce			jsr 	MCCopyAddress
.b076		80 24		bra $b09c			bra 	_MCDestination
.b078						_MCRect2D:
.b078		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.b07a		20 eb b0	jsr $b0eb			jsr 	MCEvalCopyData16
.b07d		20 a4 93	jsr $93a4			jsr 	CheckComma
.b080		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.b082		20 eb b0	jsr $b0eb			jsr 	MCEvalCopyData16
.b085		a9 ba		lda #$ba			lda 	#KWD_BY 					; BY keyword.
.b087		20 ac 93	jsr $93ac			jsr 	CheckNextA
.b08a		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.b08c		20 eb b0	jsr $b0eb			jsr 	MCEvalCopyData16
.b08f		a2 12		ldx #$12			ldx 	#$12
.b091		20 f2 b0	jsr $b0f2			jsr 	MCCopyData16
.b094		ad c0 07	lda $07c0			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.b097		09 02		ora #$02			ora 	#$02
.b099		8d c0 07	sta $07c0			sta 	DMAControlByte
.b09c						_MCDestination:
.b09c		b1 30		lda ($30),y			lda 	(codePtr),y
.b09e		c8		iny				iny
.b09f		c9 d1		cmp #$d1			cmp 	#KWD_POKE 					; is it POKE n
.b0a1		f0 0e		beq $b0b1			beq 	_MCDestPoke
.b0a3		c9 dc		cmp #$dc			cmp 	#KWD_TO 					; is it TO n
.b0a5		d0 c0		bne $b067			bne 	_MCSyntax
.b0a7		20 fd b0	jsr $b0fd			jsr 	MCPosition 					; get target address
.b0aa		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.b0ac		20 ce b0	jsr $b0ce			jsr 	MCCopyAddress
.b0af		80 0e		bra $b0bf			bra 	_MCDoDMA 					; and we can go.
.b0b1						_MCDestPoke:
.b0b1		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; POKE what
.b0b4		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.b0b7		ad c0 07	lda $07c0			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.b0ba		09 04		ora #$04			ora 	#$04
.b0bc		8d c0 07	sta $07c0			sta 	DMAControlByte
.b0bf						_MCDoDMA:
.b0bf		ad c0 07	lda $07c0			lda 	DMAControlByte 				; set the DMA Control byte to go !
.b0c2		8d 00 df	sta $df00			sta 	$DF00
.b0c5						_MCWaitBUSD:
.b0c5		ad 01 df	lda $df01			lda 	$DF01
.b0c8		30 fb		bmi $b0c5			bmi 	_MCWaitBUSD
.b0ca		68		pla				pla 								; restore I/O.
.b0cb		85 01		sta $01				sta 	1
.b0cd		60		rts				rts
.b0ce						MCCopyAddress:
.b0ce		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.b0d0		29 fc		and #$fc			and 	#$FC
.b0d2		05 70		ora $70				ora 	NSMantissa3
.b0d4		d0 10		bne $b0e6			bne 	_MCRange
.b0d6		a5 58		lda $58				lda 	NSMantissa0
.b0d8		9d 00 df	sta $df00,x			sta 	$DF00,x
.b0db		a5 60		lda $60				lda 	NSMantissa1
.b0dd		9d 01 df	sta $df01,x			sta 	$DF01,x
.b0e0		a5 68		lda $68				lda 	NSMantissa2
.b0e2		9d 02 df	sta $df02,x			sta 	$DF02,x
.b0e5		60		rts				rts
.b0e6						_MCRange:
.b0e6		a9 04		lda #$04		lda	#4
.b0e8		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b0eb						MCEvalCopyData16:
.b0eb		da		phx				phx
.b0ec		a2 00		ldx #$00			ldx 	#0
.b0ee		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger
.b0f1		fa		plx				plx
.b0f2						MCCopyData16:
.b0f2		a5 58		lda $58				lda 	NSMantissa0
.b0f4		9d 00 df	sta $df00,x			sta 	$DF00,x
.b0f7		a5 60		lda $60				lda 	NSMantissa1
.b0f9		9d 01 df	sta $df01,x			sta 	$DF01,x
.b0fc		60		rts				rts
.b0fd						MCPosition:
.b0fd		a2 00		ldx #$00			ldx 	#0 							; get start address.
.b0ff		b1 30		lda ($30),y			lda 	(codePtr),y
.b101		c9 b9		cmp #$b9			cmp 	#KWD_AT
.b103		f0 04		beq $b109			beq 	_MCPAt
.b105		20 82 a2	jsr $a282			jsr 	EvaluateInteger
.b108		60		rts				rts
.b109						_MCPAt:
.b109		c8		iny				iny
.b10a		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; X position
.b10d		48		pha				pha
.b10e		20 a4 93	jsr $93a4			jsr 	CheckComma
.b111		e8		inx				inx
.b112		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; Y position
.b115		ca		dex				dex
.b116		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.b118		64 58		stz $58				stz 	NSMantissa0
.b11a		64 68		stz $68				stz 	NSMantissa2
.b11c		64 70		stz $70				stz 	NSMantissa3
.b11e		46 60		lsr $60				lsr 	NSMantissa1
.b120		66 58		ror $58				ror 	NSMantissa0
.b122		46 60		lsr $60				lsr 	NSMantissa1
.b124		66 58		ror $58				ror 	NSMantissa0
.b126		68		pla				pla
.b127		18		clc				clc
.b128		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.b12a		85 58		sta $58				sta 	NSMantissa0
.b12c		a5 60		lda $60				lda 	NSMantissa1
.b12e		65 59		adc $59				adc 	NSMantissa0+1
.b130		85 60		sta $60				sta 	NSMantissa1
.b132		90 02		bcc $b136			bcc 	_MCPNoCarry
.b134		e6 68		inc $68				inc 	NSMantissa2
.b136						_MCPNoCarry:
.b136		ad df 07	lda $07df			lda 	gxBasePage
.b139		85 69		sta $69				sta 	NSMantissa2+1
.b13b		64 59		stz $59				stz 	NSMantissa0+1
.b13d		64 61		stz $61				stz 	NSMantissa1+1
.b13f		64 71		stz $71				stz 	NSMantissa3+1
.b141		a2 01		ldx #$01			ldx 	#1
.b143		20 2e a3	jsr $a32e			jsr 	NSMShiftRight
.b146		20 2e a3	jsr $a32e			jsr 	NSMShiftRight
.b149		20 2e a3	jsr $a32e			jsr 	NSMShiftRight
.b14c		a2 00		ldx #$00			ldx 	#0
.b14e		20 b5 96	jsr $96b5			jsr 	AddTopTwoStack
.b151		60		rts				rts
.07c0						DMAControlByte:
>07c0								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.b152						MouseStatus:
.b152		a9 ff		lda #$ff	        lda     #255
.b154		80 02		bra $b158	        bra     MouseCommand
.b156						MouseDeltaStatus:
.b156		a9 00		lda #$00	        lda     #0
.b158						MouseCommand:
.b158		8d 5f 06	sta $065f	        sta     CMDMouseFlag
.b15b		a2 00		ldx #$00	        ldx     #0
.b15d						_MouseCommandLoop:
.b15d		da		phx		        phx                                 ; save slot.
.b15e		20 bd 98	jsr $98bd	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.b161		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.b163		c9 20		cmp #$20	        cmp     #NSBIsReference
.b165		d0 60		bne $b1c7	        bne     _MouseNotRef
.b167		b1 30		lda ($30),y			lda 	(codePtr),y
.b169		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.b16b		d0 01		bne $b16e	        bne     _MouseNoSkipComma
.b16d		c8		iny		        iny
.b16e						_MouseNoSkipComma:
.b16e		fa		plx		        plx                                 ; restore X
.b16f		5a		phy		        phy                                 ; save Y
.b170		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.b172		85 36		sta $36		        sta     zTemp0
.b174		a5 60		lda $60		        lda     NSMantissa1
.b176		85 37		sta $37		        sta     zTemp0+1
.b178		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b17a		a9 00		lda #$00	        lda     #0
.b17c		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b17e		88		dey		        dey
.b17f		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b181		88		dey		        dey
.b182		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b184		88		dey		        dey
.b185		2c 5f 06	bit $065f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b188		30 12		bmi $b19c	        bmi     _MouseMouseCommand
.b18a						_MouseMDeltaCommand:
.b18a		bd 82 06	lda $0682,x	        lda     MouseDeltaX,x
.b18d		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b18f		bd 83 06	lda $0683,x	        lda     MouseDeltaX+1,x
.b192		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b194		9e 82 06	stz $0682,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b197		9e 83 06	stz $0683,x	        stz     MouseDeltaX+1,x
.b19a		80 0a		bra $b1a6	        bra     _MouseProcessData
.b19c						_MouseMouseCommand:
.b19c		bd 8e 06	lda $068e,x	        lda     MousePosX,x
.b19f		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b1a1		bd 8f 06	lda $068f,x	        lda     MousePosX+1,x
.b1a4		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b1a6						_MouseProcessData:
.b1a6		b1 36		lda ($36),y	        lda     (zTemp0),y
.b1a8		10 15		bpl $b1bf	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b1aa		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b1ab		a9 00		lda #$00	        lda     #0
.b1ad		f2 36		sbc ($36)	        sbc     (zTemp0)
.b1af		92 36		sta ($36)	        sta     (zTemp0)
.b1b1		a9 00		lda #$00	        lda     #0
.b1b3		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b1b5		91 36		sta ($36),y	        sta     (zTemp0),y
.b1b7		a0 03		ldy #$03	        ldy     #3
.b1b9		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b1bb		09 80		ora #$80	        ora     #$80
.b1bd		91 36		sta ($36),y	        sta     (zTemp0),y
.b1bf						_MouseDataPos:
.b1bf		7a		ply		        ply                                 ; restore Y.
.b1c0		e8		inx		        inx                                 ; next entry
.b1c1		e8		inx		        inx
.b1c2		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b1c4		d0 97		bne $b15d	        bne     _MouseCommandLoop
.b1c6		60		rts		        rts
.b1c7						_MouseNotRef:
.b1c7		a9 07		lda #$07		lda	#7
.b1c9		4c b5 93	jmp $93b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b1cc						CommandSetDate:
.b1cc		a9 03		lda #$03			lda 	#3
.b1ce		80 02		bra $b1d2			bra 	CSDTMain
.b1d0						CommandSetTime:
.b1d0		a9 00		lda #$00			lda 	#0
.b1d2						CSDTMain:
.b1d2		48		pha				pha 								; save table offsets 0 or 3
.b1d3		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b1d5		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.b1d8		20 a4 93	jsr $93a4			jsr 	CheckComma
.b1db		e8		inx				inx
.b1dc		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.b1df		20 a4 93	jsr $93a4			jsr 	CheckComma
.b1e2		e8		inx				inx
.b1e3		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger
.b1e6		68		pla				pla 								; table offset in Y, saving Y
.b1e7		5a		phy				phy
.b1e8		a8		tay				tay
.b1e9		a2 00		ldx #$00			ldx 	#0 							; first number
.b1eb		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b1ed		48		pha				pha
.b1ee		64 01		stz $01				stz 	1
.b1f0						_CSDTCopy:
.b1f0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b1f2		d9 34 b2	cmp $b234,y			cmp 	RTCWMinValues,y 			; check range
.b1f5		90 1b		bcc $b212			bcc 	_CSDTRange
.b1f7		d9 3a b2	cmp $b23a,y			cmp 	RTCWMaxValues,y
.b1fa		b0 16		bcs $b212			bcs 	_CSDTRange
.b1fc		20 17 b2	jsr $b217			jsr 	CSDTDecimalToBCD
.b1ff		da		phx				phx 								; save X
.b200		be 2e b2	ldx $b22e,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b203		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b206		fa		plx				plx 								; restore X
.b207		e8		inx				inx 								; next number
.b208		c8		iny				iny 								; next table entries
.b209		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b20b		d0 e3		bne $b1f0			bne 	_CSDTCopy
.b20d		68		pla				pla 								; restore I/O space
.b20e		85 01		sta $01				sta 	1
.b210		7a		ply				ply 								; restore code pos and exit.
.b211		60		rts				rts
.b212						_CSDTRange:
.b212		a9 04		lda #$04		lda	#4
.b214		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b217						CSDTDecimalToBCD:
.b217		da		phx				phx 								; 10 count in X
.b218		a2 00		ldx #$00			ldx 	#0
.b21a						_CSDTDBLoop:
.b21a		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b21c		90 05		bcc $b223			bcc 	_CSDTDBExit
.b21e		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b220		e8		inx				inx 								; one more 10s.
.b221		80 f7		bra $b21a			bra 	_CSDTDBLoop
.b223						_CSDTDBExit:
.b223		85 36		sta $36				sta 	zTemp0 						; units
.b225		8a		txa				txa 								; 10s x 16
.b226		0a		asl a				asl 	a
.b227		0a		asl a				asl 	a
.b228		0a		asl a				asl 	a
.b229		0a		asl a				asl 	a
.b22a		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b22c		fa		plx				plx
.b22d		60		rts				rts
.b22e						RTCWOffset:
>b22e		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b234						RTCWMinValues:
>b234		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b23a						RTCWMaxValues:
>b23a		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b240						UnaryTimer:
.b240		fa		plx				plx
.b241		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.b244						TimerToStackX:
.b244		20 15 a3	jsr $a315			jsr 	NSMSetZero 					; zero result
.b247		64 01		stz $01				stz 	1 							; access I/O
.b249		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b24c		95 58		sta $58,x			sta 	NSMantissa0,x
.b24e		ad 5a d6	lda $d65a			lda 	$D65A
.b251		95 60		sta $60,x			sta 	NSMantissa1,x
.b253		ad 5b d6	lda $d65b			lda 	$D65B
.b256		95 68		sta $68,x			sta 	NSMantissa2,x
.b258		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b259						UnaryGetTime:
.b259		a9 00		lda #$00			lda 	#0
.b25b		80 02		bra $b25f			bra 	UGDTMain
.b25d						UnaryGetDate:
.b25d		a9 03		lda #$03			lda 	#3
.b25f						UGDTMain:
.b25f		fa		plx				plx 								; get stack position back
.b260		48		pha				pha 								; save table offset
.b261		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger			; ignored parameter
.b264		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; closing )
.b267		68		pla				pla 								; table offset in A
.b268		5a		phy				phy 								; saving Y
.b269		a8		tay				tay 								; table offset in Y
.b26a		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b26c		20 60 b5	jsr $b560			jsr 	StringTempAllocate
.b26f		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b271		48		pha				pha
.b272		64 01		stz $01				stz 	1
.b274		20 87 b2	jsr $b287			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b277		20 82 b2	jsr $b282			jsr 	UGDTColonDigit
.b27a		20 82 b2	jsr $b282			jsr 	UGDTColonDigit
.b27d		68		pla				pla 								; restore I/O select
.b27e		85 01		sta $01				sta 	1
.b280		7a		ply				ply  								; restore code position
.b281		60		rts				rts
.b282						UGDTColonDigit:
.b282		a9 3a		lda #$3a			lda 	#':'
.b284		20 99 b5	jsr $b599			jsr 	StringTempWrite
.b287						UGDTDigit:
.b287		da		phx				phx 								; save X
.b288		b9 a7 b2	lda $b2a7,y			lda 	RTCROffset,y 				; get offset in RTC register
.b28b		aa		tax				tax
.b28c		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b28f		39 ad b2	and $b2ad,y			and 	RTCRMask,y 					; and with Mask.
.b292		fa		plx				plx
.b293		48		pha				pha 								; output in BCD
.b294		4a		lsr a				lsr 	a
.b295		4a		lsr a				lsr 	a
.b296		4a		lsr a				lsr 	a
.b297		4a		lsr a				lsr 	a
.b298		09 30		ora #$30			ora 	#48
.b29a		20 99 b5	jsr $b599			jsr 	StringTempWrite
.b29d		68		pla				pla
.b29e		29 0f		and #$0f			and 	#15
.b2a0		09 30		ora #$30			ora 	#48
.b2a2		20 99 b5	jsr $b599			jsr 	StringTempWrite
.b2a5		c8		iny				iny
.b2a6		60		rts				rts
.b2a7						RTCROffset:
>b2a7		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b2ad						RTCRMask:
>b2ad		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b2b3						AscGet:
.b2b3		fa		plx				plx 								; restore stack pos
.b2b4						AscGet2:
.b2b4		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.b2b7		20 c1 81	jsr $81c1			jsr 	KNLGetSingleCharacter
.b2ba		20 17 a3	jsr $a317			jsr 	NSMSetByte
.b2bd		60		rts				rts
.b2be						_AGBreak:
.b2be		a9 01		lda #$01		lda	#1
.b2c0		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b2c3						AscInkey:
.b2c3		fa		plx				plx 								; restore stack pos
.b2c4						AscInkey2:
.b2c4		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.b2c7		20 9f 81	jsr $819f			jsr 	KNLGetKeyPressed
.b2ca		20 17 a3	jsr $a317			jsr 	NSMSetByte
.b2cd		60		rts				rts
.b2ce						ChrGet:
.b2ce		fa		plx				plx
.b2cf		20 b4 b2	jsr $b2b4			jsr 	AscGet2
.b2d2		4c d9 b2	jmp $b2d9			jmp 	GetInkeyToString
.b2d5						ChrInkey:
.b2d5		fa		plx				plx
.b2d6		20 c4 b2	jsr $b2c4			jsr 	AscInkey2
.b2d9						GetInkeyToString:
.b2d9		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b2db		f0 0b		beq $b2e8			beq 	_GKISNull
.b2dd		48		pha				pha
.b2de		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b2e0		20 60 b5	jsr $b560			jsr 	StringTempAllocate
.b2e3		68		pla				pla 								; write number to it
.b2e4		20 99 b5	jsr $b599			jsr 	StringTempWrite
.b2e7		60		rts				rts
.b2e8						_GKISNull:
.b2e8		a9 00		lda #$00			lda 	#0
.b2ea		20 60 b5	jsr $b560			jsr 	StringTempAllocate
.b2ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b2ee						KeyDown:
.b2ee		20 41 81	jsr $8141			jsr 	ProcessEvents 				; process outstanding events.
.b2f1		fa		plx				plx 								; restore stack pos
.b2f2		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; key to check.
.b2f5		48		pha				pha 								; check right bracket.
.b2f6		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.b2f9		68		pla				pla
.b2fa		20 ad 83	jsr $83ad			jsr 	KeyboardConvertXA 			; get offset and mask.
.b2fd		3d 60 06	and $0660,x			and 	KeyStatus,x 				; is it zero ?
.b300		f0 03		beq $b305			beq 	_KeyUp
.b302		4c 28 94	jmp $9428			jmp 	ReturnTrue
.b305		4c 33 94	jmp $9433	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b308						Unary_Random:
.b308		fa		plx				plx
.b309		20 59 b3	jsr $b359			jsr 	URCopyToMantissa  			; put random # in mantissa
.b30c		b1 30		lda ($30),y			lda 	(codePtr),y
.b30e		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b310		f0 08		beq $b31a			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b312		e8		inx				inx
.b313		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b316		ca		dex				dex
.b317		20 7a 95	jsr $957a			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b31a						_URNoModulus:
.b31a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b31c		74 78		stz $78,x			stz 	NSExponent,x
.b31e		20 9c 93	jsr $939c			jsr 	CheckRightBracket
.b321		60		rts				rts
.b322						Unary_Rnd:
.b322		fa		plx				plx
.b323		20 63 a2	jsr $a263			jsr 	EvaluateNumber 				; number to use.
.b326		20 9c 93	jsr $939c			jsr 	CheckRightBracket 			; closing bracket
.b329		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b32b		10 20		bpl $b34d			bpl 	_URDontSeed
.b32d		a5 01		lda $01				lda 	1 							; switch to page 0
.b32f		48		pha				pha
.b330		64 01		stz $01				stz 	1
.b332		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b334		49 17		eor #$17			eor 	#$17
.b336		8d a4 d6	sta $d6a4			sta 	$D6A4
.b339		b5 60		lda $60,x			lda 	NSMantissa1,x
.b33b		49 a5		eor #$a5			eor 	#$A5
.b33d		8d a5 d6	sta $d6a5			sta 	$D6A5
.b340		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b342		8d a6 d6	sta $d6a6			sta 	$D6A6
.b345		a9 01		lda #$01			lda 	#1
.b347		8d a6 d6	sta $d6a6			sta 	$D6A6
.b34a		68		pla				pla
.b34b		85 01		sta $01				sta 	1
.b34d						_URDontSeed:
.b34d		20 59 b3	jsr $b359			jsr 	URCopyToMantissa 			; copy into mantissa
.b350		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b352		95 78		sta $78,x			sta 	NSExponent,x
.b354		a9 08		lda #$08			lda 	#NSTFloat
.b356		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b358		60		rts				rts
.b359						URCopyToMantissa:
.b359		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b35b		48		pha				pha
.b35c		64 01		stz $01				stz 	1
.b35e		a9 01		lda #$01			lda 	#1
.b360		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b363		ad a4 d6	lda $d6a4			lda 	$D6A4
.b366		95 58		sta $58,x			sta 	NSMantissa0,x
.b368		ad a5 d6	lda $d6a5			lda 	$D6A5
.b36b		95 60		sta $60,x			sta 	NSMantissa1,x
.b36d		ad a4 d6	lda $d6a4			lda 	$D6A4
.b370		95 68		sta $68,x			sta 	NSMantissa2,x
.b372		ad a5 d6	lda $d6a5			lda 	$D6A5
.b375		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b377		95 70		sta $70,x			sta 	NSMantissa3,x
.b379		68		pla				pla
.b37a		85 01		sta $01				sta 	1
.b37c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b37d						PingCommand:
.b37d		5a		phy				phy 								; save pos
.b37e		a9 01		lda #$01			lda 	#1 						; push channel.
.b380		48		pha				pha
.b381		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b383		a2 06		ldx #$06			ldx 	#6 						; length
.b385		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b387		80 24		bra $b3ad			bra 	SoundEffectCommand
.b389						ZapCommand:
.b389		5a		phy				phy 								; save pos
.b38a		a9 01		lda #$01			lda 	#1 						; push channel.
.b38c		48		pha				pha
.b38d		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b38f		a2 0a		ldx #$0a			ldx 	#10 						; length
.b391		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b393		80 18		bra $b3ad			bra 	SoundEffectCommand
.b395						ShootCommand:
.b395		5a		phy				phy 								; save pos
.b396		a9 03		lda #$03			lda 	#3 						; push channel.
.b398		48		pha				pha
.b399		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b39b		a2 04		ldx #$04			ldx 	#4 						; length
.b39d		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b39f		80 0c		bra $b3ad			bra 	SoundEffectCommand
.b3a1						Explode:
.b3a1		5a		phy				phy 								; save pos
.b3a2		a9 03		lda #$03			lda 	#3 						; push channel.
.b3a4		48		pha				pha
.b3a5		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b3a7		a2 0a		ldx #$0a			ldx 	#10 						; length
.b3a9		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b3ab		80 00		bra $b3ad			bra 	SoundEffectCommand
.b3ad						SoundEffectCommand:
.b3ad		8d c1 07	sta $07c1			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b3b0		9c c2 07	stz $07c2			stz 	SoundCommandBlock+1
.b3b3		a9 0f		lda #$0f			lda 	#15
.b3b5		8d c3 07	sta $07c3			sta 	SoundCommandBlock+2
.b3b8		8e c4 07	stx $07c4			stx 	SoundCommandBlock+3
.b3bb		8c c5 07	sty $07c5			sty 	SoundCommandBlock+4
.b3be		9c c6 07	stz $07c6			stz 	SoundCommandBlock+5
.b3c1		68		pla				pla
.b3c2		09 10		ora #$10			ora 	#$10  						; execute command $11
.b3c4		a2 c1		ldx #$c1			ldx 	#(SoundCommandBlock & $FF)
.b3c6		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b3c8		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3cb		7a		ply				ply
.b3cc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b3cd						UnaryPlaying:
.b3cd		fa		plx				plx
.b3ce		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; get channel #
.b3d1		48		pha				pha
.b3d2		20 9c 93	jsr $939c			jsr		CheckRightBracket
.b3d5		68		pla				pla
.b3d6		c9 04		cmp #$04			cmp 	#4
.b3d8		b0 0c		bcs $b3e6			bcs 	_UPNotPlaying
.b3da		09 20		ora #$20			ora 	#$20 						; query playing ?
.b3dc		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3df		c9 00		cmp #$00			cmp 	#0
.b3e1		f0 03		beq $b3e6			beq 	_UPNotPlaying
.b3e3		4c 28 94	jmp $9428			jmp 	ReturnTrue
.b3e6						_UPNotPlaying:
.b3e6		4c 33 94	jmp $9433			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b3e9						SoundCommand:
.b3e9		b1 30		lda ($30),y			lda 	(codePtr),y
.b3eb		c9 cc		cmp #$cc			cmp 	#KWD_OFF 					; SOUND OFF ?
.b3ed		d0 09		bne $b3f8			bne 	_SNDMain
.b3ef		c8		iny				iny 								; skip OFF
.b3f0		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b3f2		5a		phy				phy
.b3f3		20 6b 80	jsr $806b			jsr 	SNDCommand
.b3f6		7a		ply				ply
.b3f7		60		rts				rts
.b3f8						_SNDMain:
.b3f8		a2 00		ldx #$00			ldx 	#0
.b3fa		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; channel
.b3fd		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b3ff		b0 4b		bcs $b44c			bcs 	_SndError
.b401		e8		inx				inx 								; do the rest in slot 1.
.b402		20 a4 93	jsr $93a4			jsr 	CheckComma
.b405		20 95 a2	jsr $a295			jsr 	Evaluate16BitInteger 		; Pitch
.b408		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b40a		c9 10		cmp #$10			cmp 	#16
.b40c		b0 3e		bcs $b44c			bcs 	_SndError
.b40e		8d c2 07	sta $07c2			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b411		b5 58		lda $58,x			lda 	NSMantissa0,x
.b413		8d c1 07	sta $07c1			sta 	SoundCommandBlock
.b416		20 a4 93	jsr $93a4			jsr 	CheckComma
.b419		20 b0 a2	jsr $a2b0			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b41c		8d c4 07	sta $07c4			sta 	SoundCommandBlock+3
.b41f		a9 0f		lda #$0f			lda 	#15
.b421		8d c3 07	sta $07c3			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b424		9c c5 07	stz $07c5			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b427		9c c6 07	stz $07c6			stz 	SoundCommandBlock+5
.b42a		b1 30		lda ($30),y			lda 	(codePtr),y
.b42c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b42e		d0 0e		bne $b43e			bne 	_SNDPlay
.b430		c8		iny				iny
.b431		20 9f a2	jsr $a29f			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b434		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b436		8d c5 07	sta $07c5			sta 	SoundCommandBlock+4
.b439		b5 60		lda $60,x			lda 	NSMantissa1,x
.b43b		8d c6 07	sta $07c6			sta 	SoundCommandBlock+5
.b43e						_SNDPlay:
.b43e		5a		phy				phy
.b43f		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b441		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b443		a2 c1		ldx #$c1			ldx 	#(SoundCommandBlock & $FF)
.b445		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b447		20 6b 80	jsr $806b			jsr 	SNDCommand
.b44a		7a		ply				ply
.b44b		60		rts				rts
.b44c						_SndError:
.b44c		4c 92 a4	jmp $a492			jmp 	RangeError
.07c1						SoundCommandBlock:
>07c1								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b44f						StackPushByte:
.b44f		48		pha				pha 								; save byte on stack
.b450		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b452		d0 08		bne $b45c			bne 	_SPBNoBorrow
.b454		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b456		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b458		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b45a		90 06		bcc $b462			bcc 	_SPBMemory
.b45c						_SPBNoBorrow:
.b45c		c6 34		dec $34				dec 	basicStack
.b45e		68		pla				pla 								; get back and write
.b45f		92 34		sta ($34)			sta 	(basicStack)
.b461		60		rts				rts
.b462						_SPBMemory:
.b462		a9 12		lda #$12		lda	#18
.b464		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b467						StackPopByte:
.b467		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b469		e6 34		inc $34				inc 	basicStack
.b46b		d0 02		bne $b46f			bne 	_SPBNoCarry
.b46d		e6 35		inc $35				inc 	basicStack+1
.b46f						_SPBNoCarry:
.b46f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b470						StackOpen:
.b470		48		pha				pha 								; save frame byte
.b471		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b473		0a		asl a				asl 	a 							; claim twice this for storage
.b474		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b476		38		sec				sec 								; so basically subtracting from
.b477		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b479		85 34		sta $34				sta 	basicStack
.b47b		b0 09		bcs $b486			bcs 	_SONoBorrow
>b47d		db						.byte 	$DB 						; causes a break in the emulator
.b47e		c6 35		dec $35				dec 	basicStack+1
.b480		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b482		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b484		90 04		bcc $b48a			bcc 	_SOMemory
.b486						_SONoBorrow:
.b486		68		pla				pla 								; get marker back and write at TOS
.b487		92 34		sta ($34)			sta 	(basicStack)
.b489		60		rts				rts
.b48a						_SOMemory:
.b48a		a9 12		lda #$12		lda	#18
.b48c		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b48f						StackClose:
.b48f		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b491		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b493		0a		asl a				asl 	a 							; claim twice this.
.b494		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b496		85 34		sta $34				sta 	basicStack
.b498		90 02		bcc $b49c			bcc 	_SCExit
.b49a		e6 35		inc $35				inc 	basicStack+1
.b49c						_SCExit:
.b49c		60		rts				rts
.b49d						StackCheckFrame:
.b49d		48		pha				pha
.b49e						_StackRemoveLocals:
.b49e		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b4a0		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b4a2		b0 05		bcs $b4a9			bcs 	_SCNoLocal
.b4a4		20 ae 8d	jsr $8dae			jsr 	LocalPopValue 				; restore the local value
.b4a7		80 f5		bra $b49e			bra 	_StackRemoveLocals 			; gr round again
.b4a9						_SCNoLocal:
.b4a9		68		pla				pla 								; get the frame check.
.b4aa		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b4ac		29 f0		and #$f0			and 	#$F0 						; check type bits
.b4ae		d0 01		bne $b4b1			bne 	_SCFError 					; different, we have structures mixed up
.b4b0		60		rts				rts
.b4b1						_SCFError:
.b4b1		8a		txa				txa 								; report error X
.b4b2		4c b5 93	jmp $93b5			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b4b5						STKSaveCodePosition:
.b4b5		5a		phy				phy
.b4b6		98		tya				tya 								; save Y
.b4b7		a0 05		ldy #$05			ldy 	#5
.b4b9		91 34		sta ($34),y			sta 	(basicStack),y
.b4bb		88		dey				dey 								; save Code Pointer
.b4bc						_STKSaveLoop:
.b4bc		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b4bf		91 34		sta ($34),y			sta 	(basicStack),y
.b4c1		88		dey				dey
.b4c2		d0 f8		bne $b4bc			bne 	_STKSaveLoop
.b4c4		7a		ply				ply
.b4c5		60		rts				rts
.b4c6						STKLoadCodePosition:
.b4c6		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b4c8						_STKLoadLoop:
.b4c8		b1 34		lda ($34),y			lda 	(basicStack),y
.b4ca		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b4cd		c8		iny				iny
.b4ce		c0 05		cpy #$05			cpy 	#5
.b4d0		d0 f6		bne $b4c8			bne 	_STKLoadLoop
.b4d2		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b4d4		a8		tay				tay
.b4d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b4d6						StackReset:
.b4d6		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b4d8		85 34		sta $34				sta 	0+basicStack
.b4da		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b4dc		85 35		sta $35				sta 	1+basicStack
.b4de		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b4e0		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b4e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b4e3						StringConcrete:
.b4e3		5a		phy				phy 								; save position on stack
.b4e4		20 f5 9e	jsr $9ef5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b4e7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b4e9		85 38		sta $38				sta 	zTemp1
.b4eb		b5 60		lda $60,x			lda 	NSMantissa1,x
.b4ed		85 39		sta $39				sta 	zTemp1+1
.b4ef		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b4f1						_SALength:
.b4f1		c8		iny				iny
.b4f2		b1 38		lda ($38),y			lda 	(zTemp1),y
.b4f4		d0 fb		bne $b4f1			bne 	_SALength
.b4f6		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b4f8		b0 3d		bcs $b537			bcs 	_SALengthError
.b4fa		98		tya				tya 				 				; length of the new string
.b4fb		18		clc				clc
.b4fc		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b4fe		90 02		bcc $b502			bcc 	_SAHaveLength
.b500		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b502						_SAHaveLength:
.b502		48		pha				pha 								; save length.
.b503		38		sec				sec
.b504		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b506		6d 0a 04	adc $040a			adc 	stringMemory
.b509		8d 0a 04	sta $040a			sta 	stringMemory
.b50c		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b50e		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b510		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b512		6d 0b 04	adc $040b			adc 	stringMemory+1
.b515		8d 0b 04	sta $040b			sta 	stringMemory+1
.b518		85 3b		sta $3b				sta 	zTemp2+1
.b51a		95 60		sta $60,x			sta 	NSMantissa1,x
.b51c		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b51d		38		sec				sec
.b51e		e9 03		sbc #$03			sbc 	#3
.b520		92 3a		sta ($3a)			sta 	(zTemp2)
.b522		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b524		a0 01		ldy #$01			ldy 	#1
.b526		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b528						_SACopyNewString:
.b528		a0 00		ldy #$00			ldy 	#0
.b52a						_SACopyNSLoop:
.b52a		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b52c		c8		iny				iny 								; write two on in string storage
.b52d		c8		iny				iny
.b52e		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b530		88		dey				dey 								; this makes it one one.
.b531		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b533		d0 f5		bne $b52a			bne 	_SACopyNSLoop
.b535		7a		ply				ply
.b536		60		rts				rts
.b537						_SALengthError:
.b537		a9 09		lda #$09		lda	#9
.b539		4c b5 93	jmp $93b5		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b53c						StringSystemInitialise:
.b53c		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b53e		8d 0a 04	sta $040a			sta 	0+stringMemory
.b541		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b543		8d 0b 04	sta $040b			sta 	1+stringMemory
.b546		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b549		60		rts				rts
.b54a						StringSpaceInitialise:
.b54a		20 f5 9e	jsr $9ef5			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b54d		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b54f		8d 0c 04	sta $040c			sta 	stringInitialised
.b552		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b555		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b558		ad 0b 04	lda $040b			lda 	stringMemory+1
.b55b		3a		dec a				dec 	a
.b55c		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b55f		60		rts				rts
.b560						StringTempAllocate:
.b560		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b562		b0 30		bcs $b594			bcs 	_STALength
.b564		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b567		30 05		bmi $b56e			bmi 	_STAAllocate
.b569		48		pha				pha 								; save value to subtract.
.b56a		20 4a b5	jsr $b54a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b56d		68		pla				pla 								; restore it
.b56e						_STAAllocate:
.b56e		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b570		18		clc				clc  								; deliberate allows one more
.b571		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b574		8d 0d 04	sta $040d			sta 	stringTempPointer
.b577		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b579		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b57b		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b57e		69 ff		adc #$ff			adc 	#$FF
.b580		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b583		85 3d		sta $3d				sta 	zsTemp+1
.b585		95 60		sta $60,x			sta 	NSMantissa1,x
.b587		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b589		74 70		stz $70,x			stz 	NSMantissa3,x
.b58b		a9 10		lda #$10			lda 	#NSTString
.b58d		95 50		sta $50,x			sta 	NSStatus,x
.b58f		a9 00		lda #$00			lda 	#0 							; clear the target string
.b591		92 3c		sta ($3c)			sta 	(zsTemp)
.b593		60		rts				rts
.b594						_STALength:
.b594		a9 09		lda #$09		lda	#9
.b596		4c b5 93	jmp $93b5		jmp	ErrorHandler
.b599						StringTempWrite:
.b599		48		pha				pha
.b59a		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b59c		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b59e		d0 02		bne $b5a2			bne 	_STWNoCarry
.b5a0		e6 3d		inc $3d				inc 	zsTemp+1
.b5a2						_STWNoCarry:
.b5a2		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b5a4		92 3c		sta ($3c)			sta 	(zsTemp)
.b5a6		68		pla				pla
.b5a7		60		rts				rts

;******  Return to file: _basic.asm

.b5a8						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac c8 07	ldy $07c8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac c8 07	ldy $07c8			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad c9 07	lda $07c9			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c c8 07	sty $07c8			sty 	EXTColumn
.c02d	a02d	cc ca 07	cpy $07ca			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee c7 07	inc $07c7			inc 	EXTRow  					; bump row
.c035	a035	9c c8 07	stz $07c8			stz 	EXTColumn 					; back to column 0
.c038	a038	ad c7 07	lda $07c7			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd cb 07	cmp $07cb			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d ca 07	adc $07ca			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce c8 07	dec $07c8			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c c8 07	stz $07c8			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce c7 07	dec $07c7			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad c7 07	lda $07c7			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce c7 07	dec $07c7			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed ca 07	sbc $07ca			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c c8 07	sty $07c8			sty 	EXTColumn
.c08c	a08c	cc ca 07	cpy $07ca			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c c8 07	sty $07c8			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad cb 07	lda $07cb			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd c7 07	cmp $07c7			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee c7 07	inc $07c7			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d ca 07	adc $07ca			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad c8 07	lda $07c8			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d c8 07	sta $07c8			sta 	EXTColumn
.c0c9	a0c9	cd ca 07	cmp $07ca			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce c8 07	dec $07c8			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac ca 07	ldy $07ca			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc ca 07	cpy $07ca			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d c9 07	and $07c9			and 	EXTTextColour 				; mask out old.
.c135	a135	8d c9 07	sta $07c9			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d c9 07	ora $07c9			ora 	EXTTextColour
.c13c	a13c	8d c9 07	sta $07c9			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad c9 07	lda $07c9			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad c9 07	lda $07c9			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor				; home cursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c c7 07	stz $07c7			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c c8 07	stz $07c8			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address in I/O memory
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	ad c8 07	lda $07c8			lda 	EXTColumn
.c1c0	a1c0	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c3	a1c3	9c 15 d0	stz $d015			stz 	$D015
.c1c6	a1c6	ad c7 07	lda $07c7			lda 	EXTRow
.c1c9	a1c9	8d 16 d0	sta $d016			sta 	$D016
.c1cc	a1cc	9c 17 d0	stz $d017			stz 	$D017
.c1cf	a1cf	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07c7						EXTRow:
>07c7								.fill 	1
.07c8						EXTColumn:
>07c8								.fill 	1
.07c9						EXTTextColour:
>07c9								.fill 	1
.07ca						EXTScreenWidth:
>07ca								.fill 	1
.07cb						EXTScreenHeight:
>07cb								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1d0	a1d0					Export_EXTInitialise:
.c1d0	a1d0	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1d2	a1d2	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1d5	a1d5	9c 08 d0	stz $d008			stz 	$D008
.c1d8	a1d8	9c 09 d0	stz $d009			stz 	$D009
.c1db	a1db	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1dd	a1dd	8d 58 d6	sta $d658			sta 	$D658
.c1e0	a1e0	a9 52		lda #$52			lda 	#$52
.c1e2	a1e2	8d c9 07	sta $07c9			sta 	EXTTextColour
.c1e5	a1e5	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1e7	a1e7	8d ca 07	sta $07ca			sta 	EXTScreenWidth
.c1ea	a1ea	a9 3c		lda #$3c			lda 	#60
.c1ec	a1ec	8d cb 07	sta $07cb			sta 	EXTScreenHeight
.c1ef	a1ef	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1f1	a1f1	8d 10 d0	sta $d010			sta 	$D010
.c1f4	a1f4	a9 d6		lda #$d6			lda 	#214 						; cursor character
.c1f6	a1f6	8d 12 d0	sta $d012			sta 	$D012
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad c7 07	lda $07c7			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 92		ldx #$92			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 21		ldx #$21			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 c2		ldx #$c2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd 23 67	lda $6723,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad ca 07	lda $07ca			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac ca 07	ldy $07ca			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=20						GCMD_TileCtl = 10*2
=22						GCMD_TileSize = 11*2
=24						GCMD_TileScrollX = 12*2
=26						GCMD_TileScrollY = 13*2
=28						GCMD_TilePos = 14*2
=30						GCMD_TileWrite = 15*2
=32						GCMD_TileRead = 16*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	39 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	60 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	a8 a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e9 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	d9 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f8 a9					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	40 aa					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	b1 aa					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	da aa					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	ff ac					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	e9 a5					.word	GXControlTilemap         ; $0a TileCtl
>c2fd	a2fd	71 a6					.word	GXControlTileSize        ; $0b TileSize
>c2ff	a2ff	a1 a9					.word	GXControlTileScrollX     ; $0c TileScrollX
>c301	a301	b2 a9					.word	GXControlTileScrollY     ; $0d TileScrollY
>c303	a303	e0 ab					.word	GXSelectTile             ; $0e TilePos
>c305	a305	42 ac					.word	GXSTWriteTile            ; $0f TileWrite
>c307	a307	45 ac					.word	GXSTReadTile             ; $10 TileRead
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	a7 a6					.word	GXLine                   ; $21 Line
>c32b	a32b	22 a8					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	1f a8					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	a0 a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9c a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	07 a8					.word	GXPlotPoint              ; $28 Plot
>c339	a339	70 ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07cc						gxCurrentX:
>07cc								.fill 	2
.07ce						gxCurrentY:
>07ce								.fill 	2
.07d0						gxLastX:
>07d0								.fill 	2
.07d2						gxLastY:
>07d2								.fill 	2
.07d4						gxX0:
>07d4								.fill 	2
.07d6						gxY0:
>07d6								.fill 	2
.07d8						gxX1:
>07d8								.fill 	2
.07da						gxY1:
>07da								.fill 	2
.07dc						gxSpritesOn:
>07dc								.fill 	1
.07dd						gxBitmapsOn:
>07dd								.fill 	1
.07de						gxTilesOn:
>07de								.fill 	1
.07df						gxBasePage:
>07df								.fill 	1
.07e0						gxSpritePage:
>07e0								.fill 	1
.07e1						gxTileImagePage:
>07e1								.fill 	1
.07e2						gxTileMapPage:
>07e2								.fill 	1
.07e3						gxTileMapWidth:
>07e3								.fill 	1
.07e4						gxTileMapHeight:
>07e4								.fill 	1
.07e5						gxHeight:
>07e5								.fill 	1
.07e6						gxMode:
>07e6								.fill 	1
.07e7						gxColour:
>07e7								.fill 	1
.07e8						gxEORValue:
>07e8								.fill 	1
.07e9						gxANDValue:
>07e9								.fill 	1
.07ea						gxOriginalLUTValue:
>07ea								.fill 	1
.07eb						gxOffset:
>07eb								.fill 	1
.07ec						GSCurrentSpriteID:
>07ec								.fill 	1
.07ed						GSCurrentSpriteAddr:
>07ed								.fill 	2
.07ef						gxSpriteOffsetBase:
>07ef								.fill 	2
.07f1						gxSpriteLow:
>07f1								.fill 	64
.0831						gxSpriteHigh:
>0831								.fill 	64
.0871						gxTileAccessPage:
>0871								.fill 	1
.0872						gxTileAccessAddress:
>0872								.fill 	2
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd cc 07	lda $07cc,x			lda 	gxCurrentX,x
.c34d	a34d	9d d0 07	sta $07d0,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d ce 07	sta $07ce			sta 	gxCurrentY
.c357	a357	9c cf 07	stz $07cf			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d cc 07	sta $07cc			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d cd 07	sta $07cd			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad cd 07	lda $07cd			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad cc 07	lda $07cc			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad ce 07	lda $07ce			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd e5 07	cmp $07e5			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd cc 07	lda $07cc,x			lda 	gxCurrentX,x
.c389	a389	9d d4 07	sta $07d4,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
.c39a	a39a	38		sec				sec
.c39b	a39b	60		rts				rts
.c39c	a39c					GXFillCircle:
.c39c	a39c	a9 ff		lda #$ff			lda 	#255 						; A determines fill or not
.c39e	a39e	80 02		bra $a3a2			bra 	GXCircle
.c3a0	a3a0					GXFrameCircle:
.c3a0	a3a0	a9 00		lda #$00			lda 	#0
.c3a2	a3a2					GXCircle:
.c3a2	a3a2	8d 77 08	sta $0877			sta 	gxIsFillMode				; save Fill flag
.c3a5	a3a5	ad dd 07	lda $07dd			lda 	gxBitmapsOn
.c3a8	a3a8	f0 26		beq $a3d0			beq 	_GXCFail
.c3aa	a3aa	20 ed ad	jsr $aded			jsr 	GXSortXY 					; topleft/bottomright
.c3ad	a3ad	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c3b0	a3b0	20 a2 a4	jsr $a4a2			jsr 	GXCircleSetup 				; set up for drawing
.c3b3	a3b3	9c 78 08	stz $0878			stz 	gxYChanged
.c3b6	a3b6					_GXCircleDraw:
.c3b6	a3b6	ad 75 08	lda $0875			lda 	gxxCentre					; while x <= y
.c3b9	a3b9	cd 76 08	cmp $0876			cmp 	gxYCentre
.c3bc	a3bc	90 0a		bcc $a3c8			bcc 	_GXCircleContinue
.c3be	a3be	d0 03		bne $a3c3			bne 	_GXNoLast  					; fix up if x < y
.c3c0	a3c0	20 d5 a3	jsr $a3d5			jsr 	GXPlot1
.c3c3	a3c3					_GXNoLast:
.c3c3	a3c3	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; close the bitmap
.c3c6	a3c6	18		clc				clc
.c3c7	a3c7	60		rts				rts
.c3c8	a3c8					_GXCircleContinue:
.c3c8	a3c8	20 d2 a3	jsr $a3d2			jsr 	GXPlot2 					; draw it
.c3cb	a3cb	20 4f a4	jsr $a44f			jsr 	GXCircleMove 				; adjust the coordinates
.c3ce	a3ce	80 e6		bra $a3b6			bra 	_GXCircleDraw
.c3d0	a3d0					_GXCFail:
.c3d0	a3d0	38		sec				sec
.c3d1	a3d1	60		rts				rts
.c3d2	a3d2					GXPlot2:
.c3d2	a3d2	20 d5 a3	jsr $a3d5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d5	a3d5					GXPlot1:
.c3d5	a3d5	ad 76 08	lda $0876			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d8	a3d8	f0 03		beq $a3dd			beq 	_GXPlot1Only
.c3da	a3da	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; plot and negate
.c3dd	a3dd					_GXPlot1Only:
.c3dd	a3dd	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; twice, undoing negation
.c3e0	a3e0	ad 75 08	lda $0875			lda 	gxxCentre 						; swap X and Y
.c3e3	a3e3	ae 76 08	ldx $0876			ldx	 	gxYCentre
.c3e6	a3e6	8d 76 08	sta $0876			sta 	gxYCentre
.c3e9	a3e9	8e 75 08	stx $0875			stx 	gxxCentre
.c3ec	a3ec	ad 78 08	lda $0878			lda 	gxYChanged 						; toggle Y Changed flag
.c3ef	a3ef	a9 ff		lda #$ff			lda 	#$FF
.c3f1	a3f1	8d 78 08	sta $0878			sta 	gxYChanged
.c3f4	a3f4	60		rts				rts
.c3f5	a3f5	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; do once
.c3f8	a3f8	60		rts				rts
.c3f9	a3f9	ad 77 08	lda $0877	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fc	a3fc	f0 05		beq $a403			beq 	_GXPlot0Always
.c3fe	a3fe	ad 78 08	lda $0878			lda 	gxYChanged						; fill mode, only draw if changed.
.c401	a401	f0 2d		beq $a430			beq 	GXPlot0Exit
.c403	a403					_GXPlot0Always:
.c403	a403	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c405	a405	ad 76 08	lda $0876			lda 	gxYCentre
.c408	a408	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c40b	a40b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40d	a40d	ad 75 08	lda $0875			lda 	gxxCentre
.c410	a410	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c413	a413	48		pha				pha 									; save last offset X
.c414	a414	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 					; calculate position/offset.
.c417	a417	68		pla				pla
.c418	a418	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c419	a419	85 36		sta $36				sta 	gxzTemp0
.c41b	a41b	64 37		stz $37				stz 	gxzTemp0+1
.c41d	a41d	26 37		rol $37				rol 	gxzTemp0+1
.c41f	a41f	ad 77 08	lda $0877			lda 	gxIsFillMode
.c422	a422	69 80		adc #$80			adc 	#128
.c424	a424	20 72 a8	jsr $a872			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c427	a427	38		sec				sec 									; GY = -GY
.c428	a428	a9 00		lda #$00			lda 	#0
.c42a	a42a	ed 76 08	sbc $0876			sbc 	gxYCentre
.c42d	a42d	8d 76 08	sta $0876			sta 	gxYCentre
.c430	a430					GXPlot0Exit:
.c430	a430	60		rts				rts
.c431	a431					GXSubCopy:
.c431	a431	85 36		sta $36				sta 	gxzTemp0
.c433	a433	64 37		stz $37				stz 	gxzTemp0+1
.c435	a435	29 80		and #$80			and 	#$80
.c437	a437	f0 02		beq $a43b			beq 	_GXNoSx
.c439	a439	c6 37		dec $37				dec 	gxzTemp0+1
.c43b	a43b					_GXNoSx:
.c43b	a43b	38		sec				sec
.c43c	a43c	bd d8 07	lda $07d8,x			lda 	gxX1,x
.c43f	a43f	e5 36		sbc $36				sbc 	gxzTemp0
.c441	a441	9d d4 07	sta $07d4,x			sta 	gxX0,x
.c444	a444	bd d9 07	lda $07d9,x			lda 	gxX1+1,x
.c447	a447	e5 37		sbc $37				sbc 	gxzTemp0+1
.c449	a449	9d d5 07	sta $07d5,x			sta 	gxX0+1,x
.c44c	a44c	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44e	a44e	60		rts				rts
.c44f	a44f					GXCircleMove:
.c44f	a44f	9c 78 08	stz $0878			stz 	gxYChanged 					; clear Y changed flag
.c452	a452	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c454	a454	10 0d		bpl $a463			bpl 	_GXEMPositive
.c456	a456	ee 75 08	inc $0875			inc 	gxxCentre 					; X++
.c459	a459	ad 75 08	lda $0875			lda 	gxxCentre
.c45c	a45c	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45f	a45f	a9 06		lda #$06			lda 	#6  						; and add 6
.c461	a461	80 15		bra $a478			bra 	_GXEMAddD
.c463	a463					_GXEMPositive:
.c463	a463	ee 75 08	inc $0875			inc 	gxxCentre					; X++
.c466	a466	ce 76 08	dec $0876			dec 	gxYCentre 					; Y--
.c469	a469	38		sec				sec 								; calculate X-Y
.c46a	a46a	ad 75 08	lda $0875			lda 	gxxCentre
.c46d	a46d	ed 76 08	sbc $0876			sbc 	gxYCentre
.c470	a470	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c473	a473	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c475	a475	ce 78 08	dec $0878			dec 	gxYChanged
.c478	a478					_GXEMAddD:
.c478	a478	18		clc				clc
.c479	a479	65 38		adc $38				adc 	gxzTemp1
.c47b	a47b	85 38		sta $38				sta 	gxzTemp1
.c47d	a47d	90 02		bcc $a481			bcc 	_GXEMNoCarry
.c47f	a47f	e6 39		inc $39				inc 	gxzTemp1+1
.c481	a481					_GXEMNoCarry:
.c481	a481	60		rts				rts
.c482	a482					_GXAdd4TimesToD:
.c482	a482	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c484	a484	29 80		and #$80			and 	#$80
.c486	a486	f0 02		beq $a48a			beq 	_GXA4Unsigned
.c488	a488	a9 ff		lda #$ff			lda 	#$FF
.c48a	a48a					_GXA4Unsigned:
.c48a	a48a	85 37		sta $37				sta 	gxzTemp0+1
.c48c	a48c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48e	a48e	26 37		rol $37				rol 	gxzTemp0+1
.c490	a490	06 36		asl $36				asl 	gxzTemp0
.c492	a492	26 37		rol $37				rol 	gxzTemp0+1
.c494	a494	18		clc				clc 								; add
.c495	a495	a5 36		lda $36				lda		gxzTemp0
.c497	a497	65 38		adc $38				adc 	gxzTemp1
.c499	a499	85 38		sta $38				sta 	gxzTemp1
.c49b	a49b	a5 37		lda $37				lda		gxzTemp0+1
.c49d	a49d	65 39		adc $39				adc 	gxzTemp1+1
.c49f	a49f	85 39		sta $39				sta 	gxzTemp1+1
.c4a1	a4a1	60		rts				rts
.c4a2	a4a2					GXCircleSetup:
.c4a2	a4a2	38		sec				sec
.c4a3	a4a3	ad da 07	lda $07da			lda 	gxY1
.c4a6	a4a6	ed d6 07	sbc $07d6			sbc 	gxY0
.c4a9	a4a9	4a		lsr a				lsr 	a
.c4aa	a4aa	8d 74 08	sta $0874			sta 	gxRadius
.c4ad	a4ad	a2 00		ldx #$00			ldx 	#0
.c4af	a4af	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b2	a4b2	a2 02		ldx #$02			ldx 	#2
.c4b4	a4b4	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b7	a4b7	9c 75 08	stz $0875			stz 	gxxCentre
.c4ba	a4ba	ad 74 08	lda $0874			lda 	gxRadius
.c4bd	a4bd	8d 76 08	sta $0876			sta 	gxYCentre
.c4c0	a4c0	0a		asl a				asl 	a 							; R x 2
.c4c1	a4c1	85 36		sta $36				sta 	gxzTemp0
.c4c3	a4c3	38		sec				sec
.c4c4	a4c4	a9 03		lda #$03			lda 	#3
.c4c6	a4c6	e5 36		sbc $36				sbc 	gxzTemp0
.c4c8	a4c8	85 38		sta $38				sta 	gxzTemp1
.c4ca	a4ca	a9 00		lda #$00			lda 	#0
.c4cc	a4cc	e9 00		sbc #$00			sbc 	#0
.c4ce	a4ce	85 39		sta $39				sta 	gxzTemp1+1
.c4d0	a4d0	60		rts				rts
.c4d1	a4d1					_GXCalculateCentre:
.c4d1	a4d1	38		sec				sec
.c4d2	a4d2	bd d8 07	lda $07d8,x			lda 	gxX1,x
.c4d5	a4d5	7d d4 07	adc $07d4,x			adc 	gxX0,x
.c4d8	a4d8	9d d8 07	sta $07d8,x			sta 	gxX1,x
.c4db	a4db	bd d9 07	lda $07d9,x			lda 	gxX1+1,x
.c4de	a4de	7d d5 07	adc $07d5,x			adc 	gxX0+1,x
.c4e1	a4e1	4a		lsr a				lsr 	a
.c4e2	a4e2	9d d9 07	sta $07d9,x			sta 	gxX1+1,x
.c4e5	a4e5	7e d8 07	ror $07d8,x			ror 	gxX1,x
.c4e8	a4e8	60		rts				rts
.0874						gxRadius:
>0874								.fill 	1
.0875						gxxCentre:
>0875								.fill 	1
.0876						gxYCentre:
>0876								.fill 	1
.0877						gxIsFillMode:
>0877								.fill 	1
.0878						gxYChanged:
>0878								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e9	a4e9					GXClearBitmap:
.c4e9	a4e9	ad dd 07	lda $07dd			lda 	gxBitmapsOn 				; check BMP turned on.
.c4ec	a4ec	f0 26		beq $a514			beq 	_GXCBFail
.c4ee	a4ee	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start access
.c4f1	a4f1	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f3	a4f3	ad e5 07	lda $07e5			lda 	gxHeight
.c4f6	a4f6	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f8	a4f8	f0 02		beq $a4fc			beq 	_GXCalcLastPage
.c4fa	a4fa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fc	a4fc					_GXCalcLastPage:
.c4fc	a4fc	98		tya				tya 								; add to base page
.c4fd	a4fd	18		clc				clc
.c4fe	a4fe	6d df 07	adc $07df			adc 	gxBasePage
.c501	a501	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c503	a503					_GXClearAll:
.c503	a503	20 16 a5	jsr $a516			jsr 	_GXClearBlock 				; clear 8k block
.c506	a506	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c508	a508	a5 0b		lda $0b				lda 	GXEditSlot
.c50a	a50a	cd df 07	cmp $07df			cmp 	gxBasePage 					; until before base page
.c50d	a50d	b0 f4		bcs $a503			bcs 	_GXClearAll
.c50f	a50f	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap	 			; stop access
.c512	a512	18		clc				clc
.c513	a513	60		rts				rts
.c514	a514					_GXCBFail:
.c514	a514	38		sec				sec
.c515	a515	60		rts				rts
.c516	a516					_GXClearBlock:
.c516	a516	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c518	a518	85 38		sta $38				sta 	0+gxzTemp1
.c51a	a51a	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51c	a51c	85 39		sta $39				sta 	1+gxzTemp1
.c51e	a51e					_GXCB0:
.c51e	a51e	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c520	a520	a0 00		ldy #$00			ldy 	#0
.c522	a522					_GXCB1:
.c522	a522	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c524	a524	c8		iny				iny
.c525	a525	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c527	a527	c8		iny				iny
.c528	a528	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52a	a52a	c8		iny				iny
.c52b	a52b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52d	a52d	c8		iny				iny
.c52e	a52e	d0 f2		bne $a522			bne 	_GXCB1
.c530	a530	e6 39		inc $39				inc 	gxzTemp1+1
.c532	a532	a5 39		lda $39				lda 	gxzTemp1+1
.c534	a534	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c536	a536	d0 e6		bne $a51e			bne 	_GXCB0
.c538	a538	60		rts				rts
.c539	a539					GXInitialise:
.c539	a539	64 01		stz $01				stz 	1 							; access I/O
.c53b	a53b	a9 01		lda #$01			lda 	#1 							; reset bitmap address
.c53d	a53d	8d 00 d0	sta $d000			sta 	$D000
.c540	a540	18		clc				clc
.c541	a541	9c dc 07	stz $07dc			stz 	gxSpritesOn					; sprites/bitmaps/tiles off.
.c544	a544	9c dd 07	stz $07dd			stz 	gxBitmapsOn
.c547	a547	9c de 07	stz $07de			stz 	gxTilesOn
.c54a	a54a	a2 0f		ldx #$0f			ldx 	#15 						; erase work area
.c54c	a54c					_GXIClear:
.c54c	a54c	9e cc 07	stz $07cc,x			stz 	gxCurrentX,x
.c54f	a54f	ca		dex				dex
.c550	a550	10 fa		bpl $a54c			bpl 	_GXIClear
.c552	a552	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore 			; clear sprite backup space.
.c555	a555	a9 40		lda #$40			lda 	#$40                   		; Layer 0 = Bitmap 0, Layer 1 = Tile map 0
.c557	a557	8d 02 d0	sta $d002			sta 	$D002
.c55a	a55a	a9 15		lda #$15			lda 	#$15                   		; Layer 2 = Tile Map 1
.c55c	a55c	8d 03 d0	sta $d003			sta 	$D003
.c55f	a55f	60		rts				rts
.c560	a560					GXControlBitmap:
.c560	a560	64 01		stz $01				stz 	1
.c562	a562	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c564	a564	29 01		and #$01			and 	#1 							; get bitmap flag (is enabled)
.c566	a566	8d dd 07	sta $07dd			sta 	gxBitmapsOn
.c569	a569	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c56a	a56a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c56d	a56d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c56f	a56f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c571	a571	90 02		bcc $a575			bcc 	_CBNotOn
.c573	a573	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c575	a575					_CBNotOn:
.c575	a575	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c578	a578	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c57a	a57a	29 07		and #$07			and 	#7
.c57c	a57c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c57f	a57f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page requested
.c581	a581	d0 02		bne $a585			bne 	_CBNotDefault
.c583	a583	a9 08		lda #$08			lda 	#8  						; if zero, use default 8 e.g. bitmap at $10000
.c585	a585					_CBNotDefault:
.c585	a585	8d df 07	sta $07df			sta 	gxBasePage 					; save as bitmap base page.
.c588	a588	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c58b	a58b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c58d	a58d	8d 03 d1	sta $d103			sta 	$D103
.c590	a590	a5 36		lda $36				lda 	gxzTemp0
.c592	a592	8d 02 d1	sta $d102			sta 	$D102
.c595	a595	9c 01 d1	stz $d101			stz 	$D101
.c598	a598	a2 f0		ldx #$f0			ldx 	#240 						; height is 240 or 200 ?
.c59a	a59a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c59d	a59d	29 01		and #$01			and 	#1
.c59f	a59f	f0 02		beq $a5a3			beq 	_CBHaveHeight
.c5a1	a5a1	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c5a3	a5a3					_CBHaveHeight
.c5a3	a5a3	8e e5 07	stx $07e5			stx 	gxHeight
.c5a6	a5a6	18		clc				clc
.c5a7	a5a7	60		rts				rts
.c5a8	a5a8					GXControlSprite:
.c5a8	a5a8	64 01		stz $01				stz 	1
.c5aa	a5aa	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5ac	a5ac	29 01		and #$01			and 	#1 							; set sprites flag
.c5ae	a5ae	8d dc 07	sta $07dc			sta 	gxSpritesOn
.c5b1	a5b1	4a		lsr a				lsr 	a 							; bit 0 into carry
.c5b2	a5b2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5b5	a5b5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5b7	a5b7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5b9	a5b9	90 02		bcc $a5bd			bcc 	_CSNotOn
.c5bb	a5bb	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5bd	a5bd					_CSNotOn:
.c5bd	a5bd	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5c0	a5c0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5c2	a5c2	d0 02		bne $a5c6			bne 	_CSNotDefault
.c5c4	a5c4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5c6	a5c6					_CSNotDefault:
.c5c6	a5c6	8d e0 07	sta $07e0			sta 	gxSpritePage
.c5c9	a5c9	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5cc	a5cc	a5 36		lda $36				lda 	gxzTemp0 					; save this so we know where the sprites are.
.c5ce	a5ce	8d ef 07	sta $07ef			sta 	gxSpriteOffsetBase
.c5d1	a5d1	a5 37		lda $37				lda 	gxzTemp0+1
.c5d3	a5d3	8d f0 07	sta $07f0			sta 	gxSpriteOffsetBase+1
.c5d6	a5d6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5d8	a5d8					_CSClear:
.c5d8	a5d8	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5db	a5db	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5de	a5de	ca		dex				dex
.c5df	a5df	d0 f7		bne $a5d8			bne 	_CSClear
.c5e1	a5e1	9c ee 07	stz $07ee			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5e4	a5e4	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore
.c5e7	a5e7	18		clc				clc
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXControlTilemap:
.c5e9	a5e9	64 01		stz $01				stz 	1 							; access I/O
.c5eb	a5eb	a5 36		lda $36				lda 	gxzTemp0 					; get the Map Page/Enable
.c5ed	a5ed	30 0d		bmi $a5fc			bmi 	_GXCTOn
.c5ef	a5ef	ad 00 d0	lda $d000			lda 	$D000 						; turn off bitmap enable bit in MCR
.c5f2	a5f2	29 ef		and #$ef			and 	#$EF 						; clear bit 4
.c5f4	a5f4	8d 00 d0	sta $d000			sta 	$D000
.c5f7	a5f7	9c de 07	stz $07de			stz 	gxTilesOn 					; clear tiles on flag.
.c5fa	a5fa	18		clc				clc
.c5fb	a5fb	60		rts				rts
.c5fc	a5fc					_GXCTOn:
.c5fc	a5fc	8d de 07	sta $07de			sta 	gxTilesOn 					; set tiles on flag.
.c5ff	a5ff	ad 00 d0	lda $d000			lda 	$D000	 					; turn tilemap on
.c602	a602	09 17		ora #$17			ora 	#$17
.c604	a604	8d 00 d0	sta $d000			sta 	$D000
.c607	a607	9c c0 d2	stz $d2c0			stz 	$D2C0 						; turn off tilemap#1 and tilemap#2
.c60a	a60a	9c 18 d2	stz $d218			stz 	$D218
.c60d	a60d	a9 40		lda #$40			lda 	#64 						; default size of 64x32
.c60f	a60f	8d e3 07	sta $07e3			sta 	gxTileMapWidth
.c612	a612	a9 20		lda #$20			lda		#32
.c614	a614	8d e4 07	sta $07e4			sta 	gxTileMapHeight
.c617	a617	ad de 07	lda $07de			lda 	gxTilesOn 					; set the tile map page
.c61a	a61a	29 7f		and #$7f			and 	#$7F
.c61c	a61c	d0 02		bne $a620			bne	 	_GXCTNotMapDefault 			; check for default
.c61e	a61e	a9 12		lda #$12			lda 	#TILEMAP_ADDRESS >> 13
.c620	a620					_GXCTNotMapDefault:
.c620	a620	8d e2 07	sta $07e2			sta 	gxTileMapPage
.c623	a623	a5 37		lda $37				lda 	gxzTemp0+1 					; set the tile image page
.c625	a625	d0 02		bne $a629			bne 	_GXCTNotImgDefault 			; check for default
.c627	a627	a9 13		lda #$13			lda 	#TILEIMAGES_ADDRESS >> 13
.c629	a629					_GXCTNotImgDefault:
.c629	a629	8d e1 07	sta $07e1			sta 	gxTileImagePage
.c62c	a62c	a9 11		lda #$11			lda 	#$11 						; set tilemap#0 on and 8x8
.c62e	a62e	8d 00 d2	sta $d200			sta 	$D200
.c631	a631	ad e2 07	lda $07e2			lda 	gxTileMapPage 				; put tile map address in.
.c634	a634	20 8b a6	jsr $a68b			jsr		GXCalculateBaseAddress
.c637	a637	9c 01 d2	stz $d201			stz 	$D201
.c63a	a63a	a5 36		lda $36				lda 	gxzTemp0
.c63c	a63c	8d 02 d2	sta $d202			sta 	$D202
.c63f	a63f	a5 37		lda $37				lda 	gxzTemp0+1
.c641	a641	8d 03 d2	sta $d203			sta 	$D203
.c644	a644	ad e3 07	lda $07e3			lda 	gxTileMapWidth	 			; set tilemap size.
.c647	a647	8d 04 d2	sta $d204			sta 	$D204
.c64a	a64a	ad e4 07	lda $07e4			lda 	gxTileMapHeight
.c64d	a64d	8d 06 d2	sta $d206			sta 	$D206
.c650	a650	9c 08 d2	stz $d208			stz 	$D208 						; clear scrolling register
.c653	a653	9c 09 d2	stz $d209			stz 	$D209
.c656	a656	9c 0a d2	stz $d20a			stz 	$D20A
.c659	a659	9c 0b d2	stz $d20b			stz 	$D20B
.c65c	a65c	ad e1 07	lda $07e1			lda 	gxTileImagePage 			; set the tile image address
.c65f	a65f	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress
.c662	a662	9c 80 d2	stz $d280			stz 	$D280
.c665	a665	a5 36		lda $36				lda 	gxzTemp0
.c667	a667	8d 81 d2	sta $d281			sta 	$D281
.c66a	a66a	a5 37		lda $37				lda 	gxzTemp0+1
.c66c	a66c	8d 82 d2	sta $d282			sta 	$D282
.c66f	a66f	18		clc				clc
.c670	a670	60		rts				rts
.c671	a671					GXControlTileSize:
.c671	a671	ad de 07	lda $07de			lda 	gxTilesOn 					; check on
.c674	a674	38		sec				sec
.c675	a675	f0 13		beq $a68a			beq 	_GXCTSExit
.c677	a677	64 01		stz $01				stz 	1 							; access I/O 0
.c679	a679	a5 36		lda $36				lda 	gxzTemp0 					; save parameter to registes
.c67b	a67b	8d e3 07	sta $07e3			sta 	gxTileMapWidth
.c67e	a67e	8d 04 d2	sta $d204			sta 	$D204
.c681	a681	a5 37		lda $37				lda 	gxzTemp0+1
.c683	a683	8d e4 07	sta $07e4			sta 	gxTileMapHeight
.c686	a686	8d 06 d2	sta $d206			sta 	$D206
.c689	a689	18		clc				clc
.c68a	a68a					_GXCTSExit:
.c68a	a68a	60		rts				rts
.c68b	a68b					GXCalculateBaseAddress:
.c68b	a68b	85 36		sta $36				sta 	gxzTemp0
.c68d	a68d	64 37		stz $37				stz 	gxzTemp0+1
.c68f	a68f	a9 05		lda #$05			lda 	#5
.c691	a691					_GXShift:
.c691	a691	06 36		asl $36				asl 	gxzTemp0
.c693	a693	26 37		rol $37				rol 	gxzTemp0+1
.c695	a695	3a		dec a				dec		a
.c696	a696	d0 f9		bne $a691			bne 	_GXShift
.c698	a698	60		rts				rts
.c699	a699					GXClearSpriteStore:
.c699	a699	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c69b	a69b					_GXCSSLoop:
.c69b	a69b	9e 31 08	stz $0831,x			stz 	gxSpriteHigh,x
.c69e	a69e	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c6a0	a6a0	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.c6a3	a6a3	ca		dex				dex
.c6a4	a6a4	10 f5		bpl $a69b			bpl 	_GXCSSLoop
.c6a6	a6a6	60		rts				rts
.c6a7	a6a7					GXLine:
.c6a7	a6a7	ad dd 07	lda $07dd			lda 	gxBitmapsOn					; check bitmap on.
.c6aa	a6aa	f0 28		beq $a6d4			beq 	_GXLFail
.c6ac	a6ac	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; access it.
.c6af	a6af	20 0b ae	jsr $ae0b			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6b2	a6b2	20 7a a7	jsr $a77a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6b5	a6b5	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c6b8	a6b8					_GXDrawLoop:
.c6b8	a6b8	ac eb 07	ldy $07eb			ldy 	gxOffset 					; draw the pixel
.c6bb	a6bb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6bd	a6bd	2d e9 07	and $07e9			and 	gxANDValue
.c6c0	a6c0	4d e8 07	eor $07e8			eor 	gxEORValue
.c6c3	a6c3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6c5	a6c5	20 d6 a6	jsr $a6d6			jsr 	GXLineIsComplete 			; is the line complete ?
.c6c8	a6c8	f0 05		beq $a6cf			beq 	_GXLExit
.c6ca	a6ca	20 f1 a6	jsr $a6f1			jsr 	GXLineAdvance 				; code as per advance method
.c6cd	a6cd	80 e9		bra $a6b8			bra 	_GXDrawLoop
.c6cf	a6cf					_GXLExit:
.c6cf	a6cf	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; restore and return success.
.c6d2	a6d2	18		clc				clc
.c6d3	a6d3	60		rts				rts
.c6d4	a6d4					_GXLFail:
.c6d4	a6d4	38		sec				sec
.c6d5	a6d5	60		rts				rts
.c6d6	a6d6					GXLineIsComplete:
.c6d6	a6d6	ad 7b 08	lda $087b			lda 	gxIsDiffYLarger 			; is dy larger
.c6d9	a6d9	d0 0f		bne $a6ea			bne 	_GXLICCompareY 				; if so compare Y1 versus Y0
.c6db	a6db	ad d4 07	lda $07d4			lda 	gxX0 						; compare X, LSB and MSB
.c6de	a6de	4d d8 07	eor $07d8			eor 	gxX1
.c6e1	a6e1	d0 06		bne $a6e9			bne 	_GXLICExit
.c6e3	a6e3	ad d5 07	lda $07d5			lda 	gxX0+1
.c6e6	a6e6	4d d9 07	eor $07d9			eor 	gxX1+1
.c6e9	a6e9					_GXLICExit:
.c6e9	a6e9	60		rts				rts
.c6ea	a6ea					_GXLICCompareY:
.c6ea	a6ea	ad da 07	lda $07da			lda 	gxY1
.c6ed	a6ed	4d d6 07	eor $07d6			eor 	gxY0
.c6f0	a6f0	60		rts				rts
.c6f1	a6f1					GXLineAdvance:
.c6f1	a6f1	18		clc				clc 								; add adjust to position
.c6f2	a6f2	ad 7d 08	lda $087d			lda 	gxPosition
.c6f5	a6f5	6d 7e 08	adc $087e			adc 	gxAdjust
.c6f8	a6f8	8d 7d 08	sta $087d			sta 	gxPosition
.c6fb	a6fb	9c 80 08	stz $0880			stz 	gxAddSelect 				; clear add select flag
.c6fe	a6fe	b0 05		bcs $a705			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c700	a700	cd 7f 08	cmp $087f			cmp 	gxTotal 					; if exceeded total
.c703	a703	90 0a		bcc $a70f			bcc 	_GXLANoExtra
.c705	a705					_GXLAOverflow:
.c705	a705	ce 80 08	dec $0880			dec 	gxAddSelect 				; set addselect to $FF
.c708	a708	38		sec				sec 								; subtract total and write back
.c709	a709	ed 7f 08	sbc $087f			sbc 	gxTotal
.c70c	a70c	8d 7d 08	sta $087d			sta 	gxPosition
.c70f	a70f					_GXLANoExtra:
.c70f	a70f	ad 7b 08	lda $087b			lda 	gxIsDiffYLarger
.c712	a712	f0 0d		beq $a721			beq 	_GXDXLarger
.c714	a714	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c717	a717	ad 80 08	lda $0880			lda 	gxAddSelect
.c71a	a71a	f0 10		beq $a72c			beq 	_GXLAExit
.c71c	a71c	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c71f	a71f	80 0b		bra $a72c			bra 	_GXLAExit
.c721	a721					_GXDXLarger:
.c721	a721	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c724	a724	ad 80 08	lda $0880			lda 	gxAddSelect
.c727	a727	f0 03		beq $a72c			beq 	_GXLAExit
.c729	a729	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c72c	a72c					_GXLAExit:
.c72c	a72c	60		rts				rts
.c72d	a72d					gxAdjustX:
.c72d	a72d	ad 7c 08	lda $087c			lda 	gxDXNegative
.c730	a730	10 25		bpl $a757			bpl 	_GXAXRight
.c732	a732	ad d4 07	lda $07d4			lda 	gxX0
.c735	a735	d0 03		bne $a73a			bne 	_GXAXNoBorrow
.c737	a737	ce d5 07	dec $07d5			dec 	gxX0+1
.c73a	a73a					_GXAXNoBorrow:
.c73a	a73a	ce d4 07	dec $07d4			dec 	gxX0
.c73d	a73d	ce eb 07	dec $07eb			dec 	gxOffset 					; pixel left
.c740	a740	ad eb 07	lda $07eb			lda 	gxOffset
.c743	a743	c9 ff		cmp #$ff			cmp 	#$FF
.c745	a745	d0 0f		bne $a756			bne 	_GXAYExit 					; underflow
.c747	a747	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c749	a749	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c74b	a74b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c74d	a74d	b0 07		bcs $a756			bcs 	_GXAYExit
.c74f	a74f	18		clc				clc
.c750	a750	69 20		adc #$20			adc 	#$20 						; fix up
.c752	a752	85 3d		sta $3d				sta 	gxzScreen+1
.c754	a754	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c756	a756					_GXAYExit:
.c756	a756	60		rts				rts
.c757	a757					_GXAXRight:
.c757	a757	ee d4 07	inc $07d4			inc 	gxX0
.c75a	a75a	d0 03		bne $a75f			bne 	_GXAXNoCarry
.c75c	a75c	ee d5 07	inc $07d5			inc 	gxX0+1
.c75f	a75f					_GXAXNoCarry:
.c75f	a75f	ee eb 07	inc $07eb			inc 	gxOffset 					; pixel right
.c762	a762	d0 0e		bne $a772			bne 	_GXAXExit 					; if not overflowed, exit.
.c764	a764	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c766	a766	a5 3d		lda $3d				lda 	gxzScreen+1
.c768	a768	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c76a	a76a	90 06		bcc $a772			bcc 	_GXAXExit
.c76c	a76c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c76e	a76e	85 3d		sta $3d				sta 	gxzScreen+1
.c770	a770	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c772	a772					_GXAXExit:
.c772	a772	60		rts				rts
.c773	a773					GXIncrementY:
.c773	a773	ee d6 07	inc $07d6			inc 	gxY0
.c776	a776	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown
.c779	a779	60		rts				rts
.c77a	a77a					GXLineSetup:
.c77a	a77a	ad da 07	lda $07da			lda 	gxY1
.c77d	a77d	38		sec				sec
.c77e	a77e	ed d6 07	sbc $07d6			sbc 	gxY0
.c781	a781	4a		lsr a				lsr 	a
.c782	a782	8d 7a 08	sta $087a			sta 	gxDiffY
.c785	a785	9c 7c 08	stz $087c			stz 	gxDXNegative 				; clear -ve flag
.c788	a788	38		sec				sec
.c789	a789	ad d8 07	lda $07d8			lda 	gxX1
.c78c	a78c	ed d4 07	sbc $07d4			sbc 	gxX0
.c78f	a78f	8d 79 08	sta $0879			sta 	gxDiffX
.c792	a792	ad d9 07	lda $07d9			lda 	gxX1+1 						; calculate MSB
.c795	a795	ed d5 07	sbc $07d5			sbc 	gxX0+1
.c798	a798	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c799	a799	6e 79 08	ror $0879			ror 	gxDiffX
.c79c	a79c	0a		asl a				asl 	a
.c79d	a79d	10 0c		bpl $a7ab			bpl 	_GDXNotNegative
.c79f	a79f	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c7a1	a7a1	38		sec				sec
.c7a2	a7a2	ed 79 08	sbc $0879			sbc 	gxDiffX
.c7a5	a7a5	8d 79 08	sta $0879			sta 	gxDiffX
.c7a8	a7a8	ce 7c 08	dec $087c			dec 	gxDXNegative 				; -ve flag = $FF.
.c7ab	a7ab					_GDXNotNegative:
.c7ab	a7ab	9c 7b 08	stz $087b			stz 	gxIsDiffYLarger 			; clear larger flag
.c7ae	a7ae	ad 7a 08	lda $087a			lda 	gxDiffY 					; set adjust and total.
.c7b1	a7b1	8d 7e 08	sta $087e			sta 	gxAdjust
.c7b4	a7b4	ad 79 08	lda $0879			lda 	gxDiffX
.c7b7	a7b7	8d 7f 08	sta $087f			sta 	gxTotal
.c7ba	a7ba	ad 7a 08	lda $087a			lda 	gxDiffY 					; if dy > dx
.c7bd	a7bd	cd 79 08	cmp $0879			cmp 	gxDiffX
.c7c0	a7c0	90 0f		bcc $a7d1			bcc 	_GDXNotLarger
.c7c2	a7c2	ce 7b 08	dec $087b			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7c5	a7c5	ad 79 08	lda $0879			lda 	gxDiffX 					; set adjust and total other way round
.c7c8	a7c8	8d 7e 08	sta $087e			sta 	gxAdjust
.c7cb	a7cb	ad 7a 08	lda $087a			lda 	gxDiffY
.c7ce	a7ce	8d 7f 08	sta $087f			sta 	gxTotal
.c7d1	a7d1					_GDXNotLarger:
.c7d1	a7d1	ad 7f 08	lda $087f			lda 	gxTotal
.c7d4	a7d4	4a		lsr a				lsr 	a
.c7d5	a7d5	8d 7d 08	sta $087d			sta 	gxPosition
.c7d8	a7d8	60		rts				rts
.0879						gxDiffX:
>0879								.fill 	1
.087a						gxDiffY:
>087a								.fill 	1
.087b						gxIsDiffYLarger:
>087b								.fill 	1
.087c						gxDXNegative:
>087c								.fill 	1
.087d						gxPosition:
>087d								.fill 	1
.087e						gxAdjust:
>087e								.fill 	1
.087f						gxTotal:
>087f								.fill 	1
.0880						gxAddSelect:
>0880								.fill 	1
.c7d9	a7d9					GXSetColourMode:
.c7d9	a7d9	a6 36		ldx $36				ldx 	gxzTemp0
.c7db	a7db	8e e7 07	stx $07e7			stx 	gxColour 								; set colour
.c7de	a7de	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7e0	a7e0	8d e6 07	sta $07e6			sta 	gxMode 									; set mode
.c7e3	a7e3	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7e5	a7e5	9c e9 07	stz $07e9			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7e8	a7e8	ae e7 07	ldx $07e7			ldx 	gxColour
.c7eb	a7eb	8e e8 07	stx $07e8			stx 	gxEORValue
.c7ee	a7ee	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7f0	a7f0	90 03		bcc $a7f5			bcc 	_GXSDCNotAndColour
.c7f2	a7f2	8e e9 07	stx $07e9			stx 	gxANDValue
.c7f5	a7f5					_GXSDCNotAndColour:
.c7f5	a7f5	d0 03		bne $a7fa			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7f7	a7f7	9c e8 07	stz $07e8			stz 	gxEORValue
.c7fa	a7fa					_GXSDCNotAnd:
.c7fa	a7fa	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7fb	a7fb	90 08		bcc $a805			bcc 	_GXSDCNoFlip
.c7fd	a7fd	ad e9 07	lda $07e9			lda	 	gxANDValue
.c800	a800	49 ff		eor #$ff			eor 	#$FF
.c802	a802	8d e9 07	sta $07e9			sta 	gxANDValue
.c805	a805					_GXSDCNoFlip:
.c805	a805	18		clc				clc
.c806	a806	60		rts				rts
.c807	a807					GXPlotPoint:
.c807	a807	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c80a	a80a	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c80d	a80d	ac eb 07	ldy $07eb			ldy 	gxOffset
.c810	a810	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c812	a812	2d e9 07	and $07e9			and 	gxANDValue
.c815	a815	4d e8 07	eor $07e8			eor 	gxEORValue
.c818	a818	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c81a	a81a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GXFillRectangle:
.c81f	a81f	38		sec				sec 								; pass carry in for fill/frame
.c820	a820	80 01		bra $a823			bra 	GXRectangle
.c822	a822					GXFrameRectangle:
.c822	a822	18		clc				clc
.c823	a823					GXRectangle:
.c823	a823	ad dd 07	lda $07dd			lda 	gxBitmapsOn 				; exit if off.
.c826	a826	f0 35		beq $a85d			beq 	_GXRFail
.c828	a828	08		php				php 								; save Fill flag (CS)
.c829	a829	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c82c	a82c	20 ed ad	jsr $aded			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c82f	a82f	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c832	a832	38		sec				sec 								; sec = Draw line
.c833	a833	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c836	a836	ad d6 07	lda $07d6			lda 	gxY0 						; reached end of rectangle ?
.c839	a839	cd da 07	cmp $07da			cmp 	gxY1 						; e.g. 1 pixel high.
.c83c	a83c	f0 19		beq $a857			beq 	_GXRectangleExit
.c83e	a83e					_GXRectLoop:
.c83e	a83e	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown 			; down one.
.c841	a841	ee d6 07	inc $07d6			inc 	gxY0 						; change Y pos
.c844	a844	ad d6 07	lda $07d6			lda 	gxY0 						; reached last line
.c847	a847	cd da 07	cmp $07da			cmp 	gxY1
.c84a	a84a	f0 07		beq $a853			beq 	_GXLastLine
.c84c	a84c	28		plp				plp 								; get flag back for solid/edged
.c84d	a84d	08		php				php
.c84e	a84e	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c851	a851	80 eb		bra $a83e			bra 	_GXRectLoop
.c853	a853					_GXLastLine:
.c853	a853	38		sec				sec
.c854	a854	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0
.c857	a857					_GXRectangleExit:
.c857	a857	68		pla				pla 								; throw fill flag.
.c858	a858	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c85b	a85b	18		clc				clc
.c85c	a85c	60		rts				rts
.c85d	a85d					_GXRFail:
.c85d	a85d	38		sec				sec
.c85e	a85e	60		rts				rts
.c85f	a85f					GXDrawLineX1X0:
.c85f	a85f	08		php				php 								; save solid/either-end
.c860	a860	38		sec				sec 								; calculate x1-x0
.c861	a861	ad d8 07	lda $07d8			lda		gxX1
.c864	a864	ed d4 07	sbc $07d4			sbc 	gxX0
.c867	a867	85 36		sta $36				sta 	gxzTemp0
.c869	a869	ad d9 07	lda $07d9			lda 	gxX1+1
.c86c	a86c	ed d5 07	sbc $07d5			sbc 	gxX0+1
.c86f	a86f	85 37		sta $37				sta 	gxzTemp0+1
.c871	a871	28		plp				plp
.c872	a872					GXDrawLineTemp0:
.c872	a872	a5 3c		lda $3c				lda 	gxzScreen 					; push gxzScreen, gxOffset and GXEditSlot on stack
.c874	a874	48		pha				pha
.c875	a875	a5 3d		lda $3d				lda 	gxzScreen+1
.c877	a877	48		pha				pha
.c878	a878	ad eb 07	lda $07eb			lda 	gxOffset
.c87b	a87b	48		pha				pha
.c87c	a87c	a5 0b		lda $0b				lda 	GXEditSlot
.c87e	a87e	48		pha				pha
.c87f	a87f	ac eb 07	ldy $07eb			ldy 	gxOffset 					; Y offset
.c882	a882	90 1e		bcc $a8a2			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c884	a884					_GXDLTLine:
.c884	a884	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c886	a886	2d e9 07	and $07e9			and 	gxANDValue
.c889	a889	4d e8 07	eor $07e8			eor 	gxEORValue
.c88c	a88c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c88e	a88e	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c890	a890	d0 04		bne $a896			bne 	_GXDLTNoBorrow
.c892	a892	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c894	a894	30 2e		bmi $a8c4			bmi 	_GXDLTExit
.c896	a896					_GXDLTNoBorrow:
.c896	a896	c6 36		dec $36				dec 	gxzTemp0
.c898	a898	c8		iny				iny 								; next slot.
.c899	a899	d0 e9		bne $a884			bne 	_GXDLTLine
.c89b	a89b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c89d	a89d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c8a0	a8a0	80 e2		bra $a884			bra 	_GXDLTLine
.c8a2	a8a2					_GXDLTEndPoints:
.c8a2	a8a2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c8a4	a8a4	2d e9 07	and $07e9			and 	gxANDValue
.c8a7	a8a7	4d e8 07	eor $07e8			eor 	gxEORValue
.c8aa	a8aa	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8ac	a8ac	98		tya				tya 								; advance to right side
.c8ad	a8ad	18		clc				clc
.c8ae	a8ae	65 36		adc $36				adc 	gxzTemp0
.c8b0	a8b0	a8		tay				tay
.c8b1	a8b1	a5 3d		lda $3d				lda 	gxzScreen+1
.c8b3	a8b3	65 37		adc $37				adc 	gxzTemp0+1
.c8b5	a8b5	85 3d		sta $3d				sta 	gxzScreen+1
.c8b7	a8b7	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap 				; fix up.
.c8ba	a8ba	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c8bc	a8bc	2d e9 07	and $07e9			and 	gxANDValue
.c8bf	a8bf	4d e8 07	eor $07e8			eor 	gxEORValue
.c8c2	a8c2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8c4	a8c4					_GXDLTExit:
.c8c4	a8c4	68		pla				pla
.c8c5	a8c5	85 0b		sta $0b				sta 	GXEditSlot
.c8c7	a8c7	68		pla				pla
.c8c8	a8c8	8d eb 07	sta $07eb			sta 	gxOffset
.c8cb	a8cb	68		pla				pla
.c8cc	a8cc	85 3d		sta $3d				sta 	gxzScreen+1
.c8ce	a8ce	68		pla				pla
.c8cf	a8cf	85 3c		sta $3c				sta 	gxzScreen
.c8d1	a8d1	60		rts				rts
.c8d2	a8d2					GXDLTCheckWrap:
.c8d2	a8d2	a5 3d		lda $3d				lda 	gxzScreen+1 				; check end of page
.c8d4	a8d4	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8d6	a8d6	90 06		bcc $a8de			bcc 	_GXDLTCWExit
.c8d8	a8d8	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8da	a8da	85 3d		sta $3d				sta 	gxzScreen+1
.c8dc	a8dc	e6 0b		inc $0b				inc 	GXEditSlot 					; next bitmap vram page.
.c8de	a8de					_GXDLTCWExit:
.c8de	a8de	60		rts				rts
.c8df	a8df					GXDrawGraphicElement:
.c8df	a8df	8d 81 08	sta $0881			sta 	gxSize 						; save size
.c8e2	a8e2	3a		dec a				dec 	a
.c8e3	a8e3	8d 82 08	sta $0882			sta 	gxMask 						; and mask
.c8e6	a8e6	ad dd 07	lda $07dd			lda 	gxBitmapsOn 				; check BMP on
.c8e9	a8e9	f0 67		beq $a952			beq 	_GXSLFail
.c8eb	a8eb	ad d6 07	lda $07d6			lda 	gxY0 						; push Y on stack
.c8ee	a8ee	48		pha				pha
.c8ef	a8ef	8c 84 08	sty $0884			sty 	gxAcquireVector+1 			; and acquisition vector
.c8f2	a8f2	8e 83 08	stx $0883			stx 	gxAcquireVector
.c8f5	a8f5	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; open the bitmap.
.c8f8	a8f8	ad 86 08	lda $0886			lda 	gxUseMode 					; scale bits
.c8fb	a8fb	4a		lsr a				lsr 	a
.c8fc	a8fc	4a		lsr a				lsr 	a
.c8fd	a8fd	4a		lsr a				lsr 	a
.c8fe	a8fe	29 07		and #$07			and		#7
.c900	a900	1a		inc a				inc 	a
.c901	a901	8d 85 08	sta $0885			sta 	gxScale
.c904	a904	64 38		stz $38				stz 	gxzTemp1					; start first line
.c906	a906					_GXGELoop:
.c906	a906	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c908	a908	2c 86 08	bit $0886			bit 	gxUseMode 					; check for flip.
.c90b	a90b	10 06		bpl $a913			bpl		_GXNoVFlip
.c90d	a90d	ad 82 08	lda $0882			lda 	gxMask
.c910	a910	38		sec				sec
.c911	a911	e5 38		sbc $38				sbc 	gxzTemp1
.c913	a913					_GXNoVFlip:
.c913	a913	aa		tax				tax 								; get the Xth line.
.c914	a914	20 54 a9	jsr $a954			jsr 	_GXCallAcquire 				; get that data.
.c917	a917	ad 85 08	lda $0885			lda 	gxScale 					; do scale identical copies of that line.
.c91a	a91a	85 39		sta $39				sta 	gxzTemp1+1
.c91c	a91c					_GXGELoop2:
.c91c	a91c	ad d6 07	lda $07d6			lda 	gxY0 						; off screen
.c91f	a91f	cd e5 07	cmp $07e5			cmp 	gxHeight
.c922	a922	b0 10		bcs $a934			bcs 	_GXDGEExit
.c924	a924	20 57 a9	jsr $a957			jsr 	GXRenderOneLine 			; render line
.c927	a927	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c929	a929	d0 f1		bne $a91c			bne 	_GXGELoop2
.c92b	a92b	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c92d	a92d	a5 38		lda $38				lda 	gxzTemp1
.c92f	a92f	cd 81 08	cmp $0881			cmp 	gxSize
.c932	a932	d0 d2		bne $a906			bne 	_GXGELoop
.c934	a934					_GXDGEExit:
.c934	a934	68		pla				pla 								; restore Y for next time
.c935	a935	8d d6 07	sta $07d6			sta 	gxY0
.c938	a938	ae 85 08	ldx $0885			ldx 	gxScale 					; get scale (1-8)
.c93b	a93b					_GXShiftLeft:
.c93b	a93b	18		clc				clc
.c93c	a93c	ad 81 08	lda $0881			lda 	gxSize
.c93f	a93f	6d d4 07	adc $07d4			adc 	gxX0
.c942	a942	8d d4 07	sta $07d4			sta 	gxX0
.c945	a945	90 03		bcc $a94a			bcc 	_GXSLNoCarry
.c947	a947	ee d5 07	inc $07d5			inc 	gxX0+1
.c94a	a94a					_GXSLNoCarry:
.c94a	a94a	ca		dex				dex
.c94b	a94b	d0 ee		bne $a93b			bne 	_GXShiftLeft
.c94d	a94d	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.c950	a950	18		clc				clc
.c951	a951	60		rts				rts
.c952	a952					_GXSLFail:
.c952	a952	38		sec				sec
.c953	a953	60		rts				rts
.c954	a954					_GXCallAcquire:
.c954	a954	6c 83 08	jmp ($0883)			jmp 	(gxAcquireVector)
.c957	a957					GXRenderOneLine:
.c957	a957	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c95a	a95a	ac eb 07	ldy $07eb			ldy 	gxOffset 					; Y contains position.
.c95d	a95d	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c95f	a95f					_GXROLLoop1:
.c95f	a95f	ad 85 08	lda $0885			lda 	gxScale 					; set to do 'scale' times
.c962	a962	85 3b		sta $3b				sta 	gxzTemp2+1
.c964	a964					_GXROLLoop2:
.c964	a964	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c966	a966	2c e6 07	bit $07e6			bit 	gxMode 						; check H Flip
.c969	a969	50 06		bvc $a971			bvc 	_GXNoHFlip
.c96b	a96b	ad 82 08	lda $0882			lda 	gxMask
.c96e	a96e	38		sec				sec
.c96f	a96f	e5 3a		sbc $3a				sbc 	gxzTemp2
.c971	a971					_GXNoHFlip:
.c971	a971	aa		tax				tax 								; read from the pixel buffer
.c972	a972	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c975	a975	d0 07		bne $a97e			bne 	_GXDraw 					; draw if non zero
.c977	a977	ad 86 08	lda $0886			lda 	gxUseMode 					; check to see if solid background
.c97a	a97a	29 04		and #$04			and 	#4
.c97c	a97c	f0 0a		beq $a988			beq 	_GXZeroPixel
.c97e	a97e					_GXDraw:
.c97e	a97e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c980	a980	2d e9 07	and $07e9			and 	gxANDValue
.c983	a983	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c986	a986	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c988	a988					_GXZeroPixel:
.c988	a988	c8		iny				iny 								; advance pointer
.c989	a989	d0 05		bne $a990			bne 	_GXNoShift
.c98b	a98b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c98d	a98d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c990	a990					_GXNoShift:
.c990	a990	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c992	a992	d0 d0		bne $a964			bne 	_GXROLLoop2
.c994	a994	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c996	a996	a5 3a		lda $3a				lda 	gxzTemp2
.c998	a998	cd 81 08	cmp $0881			cmp 	gxSize
.c99b	a99b	d0 c2		bne $a95f			bne 	_GXROLLoop1
.c99d	a99d	ee d6 07	inc $07d6			inc 	gxY0
.c9a0	a9a0	60		rts				rts
.0881						gxSize:
>0881								.fill 	1
.0882						gxMask:
>0882								.fill 	1
.0883						gxAcquireVector:
>0883								.fill 	2
.0885						gxScale:
>0885								.fill 	1
.0886						gxUseMode:
>0886								.fill 	1
.c9a1	a9a1					GXControlTileScrollX:
.c9a1	a9a1	ad e3 07	lda $07e3			lda 	gxTileMapWidth 				; comparator value (max X tile)
.c9a4	a9a4	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9a7	a9a7	b0 08		bcs $a9b1			bcs 	_GXCTSExit
.c9a9	a9a9	64 01		stz $01				stz 	1 							; write it out.
.c9ab	a9ab	8e 08 d2	stx $d208			stx 	$D208
.c9ae	a9ae	8c 09 d2	sty $d209			sty 	$D209
.c9b1	a9b1					_GXCTSExit:
.c9b1	a9b1	60		rts				rts
.c9b2	a9b2					GXControlTileScrollY:
.c9b2	a9b2	ad e4 07	lda $07e4			lda 	gxTileMapHeight 			; comparator value (max X tile)
.c9b5	a9b5	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9b8	a9b8	b0 08		bcs $a9c2			bcs 	_GXCTSExit
.c9ba	a9ba	64 01		stz $01				stz 	1 							; write it out.
.c9bc	a9bc	8e 0a d2	stx $d20a			stx 	$D20A
.c9bf	a9bf	8c 0b d2	sty $d20b			sty 	$D20B
.c9c2	a9c2					_GXCTSExit:
.c9c2	a9c2	60		rts				rts
.c9c3	a9c3					GXScrollProcessor:
.c9c3	a9c3	85 38		sta $38				sta 	gxzTemp1 					; save max tile value.
.c9c5	a9c5	ad de 07	lda $07de			lda 	gxTilesOn 					; check tile map is on.
.c9c8	a9c8	38		sec				sec
.c9c9	a9c9	f0 2c		beq $a9f7			beq 	_GXSPExit
.c9cb	a9cb	64 39		stz $39				stz 	gxzTemp1+1 					; convert tile size to a pixel scroll.
.c9cd	a9cd	a2 03		ldx #$03			ldx 	#3
.c9cf	a9cf					_GXCalcMaxPixelScroll:
.c9cf	a9cf	06 38		asl $38				asl 	gxzTemp1
.c9d1	a9d1	26 39		rol $39				rol 	gxzTemp1+1
.c9d3	a9d3	ca		dex				dex
.c9d4	a9d4	d0 f9		bne $a9cf			bne 	_GXCalcMaxPixelScroll
.c9d6	a9d6	a5 36		lda $36				lda 	gxzTemp0 					; check scroll in range.
.c9d8	a9d8	c5 38		cmp $38				cmp 	gxzTemp1
.c9da	a9da	a5 37		lda $37				lda 	gxzTemp0+1
.c9dc	a9dc	e5 39		sbc $39				sbc 	gxzTemp1+1
.c9de	a9de	b0 17		bcs $a9f7			bcs		_GXSPExit
.c9e0	a9e0	a5 36		lda $36				lda 	gxzTemp0 	 				; save fine scroll.
.c9e2	a9e2	29 07		and #$07			and		#7
.c9e4	a9e4	85 38		sta $38				sta 	gxzTemp1
.c9e6	a9e6	06 36		asl $36				asl 	gxzTemp0 					; shift left one, as whole tiles are 8 pixels.
.c9e8	a9e8	26 37		rol $37				rol 	gxzTemp0+1
.c9ea	a9ea	a5 37		lda $37				lda 	gxzTemp0+1 					; MSB is the upper byte.
.c9ec	a9ec	29 0f		and #$0f			and 	#$0F
.c9ee	a9ee	a8		tay				tay
.c9ef	a9ef	a5 36		lda $36				lda 	gxzTemp0 					; get coarse scroll
.c9f1	a9f1	29 f0		and #$f0			and 	#$F0
.c9f3	a9f3	05 38		ora $38				ora 	gxzTemp1 					; OR in fine scroll.
.c9f5	a9f5	aa		tax				tax 								; return in X
.c9f6	a9f6	18		clc				clc
.c9f7	a9f7					_GXSPExit:
.c9f7	a9f7	60		rts				rts
.c9f8	a9f8					GXFontHandler:
.c9f8	a9f8	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9fa	a9fa	4d e6 07	eor $07e6			eor 	gxMode
.c9fd	a9fd	8d 86 08	sta $0886			sta 	gxUseMode
.ca00	aa00	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.ca02	aa02	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.ca04	aa04	26 37		rol $37				rol	 	gxzTemp0+1
.ca06	aa06	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.ca08	aa08	26 37		rol $37				rol	 	gxzTemp0+1
.ca0a	aa0a	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ca0c	aa0c	26 37		rol $37				rol	 	gxzTemp0+1
.ca0e	aa0e	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ca10	aa10	09 c0		ora #$c0			ora 	#$C0
.ca12	aa12	85 37		sta $37				sta 	gxzTemp0+1
.ca14	aa14	a9 08		lda #$08			lda 	#8 							; size 8x8
.ca16	aa16	a2 1e		ldx #$1e			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.ca18	aa18	a0 aa		ldy #$aa			ldy 	#GXGetGraphicDataFont >> 8
.ca1a	aa1a	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca1d	aa1d	60		rts				rts
.ca1e	aa1e					GXGetGraphicDataFont:
.ca1e	aa1e	8a		txa				txa 								; X->Y
.ca1f	aa1f	a8		tay				tay
.ca20	aa20	a6 01		ldx $01				ldx 	1 							; preserve old value
.ca22	aa22	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.ca24	aa24	85 01		sta $01				sta 	1
.ca26	aa26	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.ca28	aa28	86 01		stx $01				stx 	1 							; put old value back.
.ca2a	aa2a	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ca2c	aa2c					_GXExpand:
.ca2c	aa2c	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ca2f	aa2f	0a		asl a				asl 	a 							; shift bit 7 into C
.ca30	aa30	90 08		bcc $aa3a			bcc 	_GXNoPixel
.ca32	aa32	48		pha				pha 								; if set, set pixel buffer to current colour.
.ca33	aa33	ad e7 07	lda $07e7			lda 	gxColour
.ca36	aa36	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.ca39	aa39	68		pla				pla
.ca3a	aa3a					_GXNoPixel:
.ca3a	aa3a	e8		inx				inx 								; do the whole byte.
.ca3b	aa3b	e0 08		cpx #$08			cpx 	#8
.ca3d	aa3d	d0 ed		bne $aa2c			bne 	_GXExpand
.ca3f	aa3f	60		rts				rts
.ca40	aa40					GXSpriteHandler:
.ca40	aa40	ad dc 07	lda $07dc			lda 	gxSpritesOn 				; sprites on ?
.ca43	aa43	f0 23		beq $aa68			beq 	_GXSHExit
.ca45	aa45	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ca47	aa47	4d e6 07	eor $07e6			eor 	gxMode
.ca4a	aa4a	8d 86 08	sta $0886			sta 	gxUseMode
.ca4d	aa4d	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ca4f	aa4f	da		phx				phx
.ca50	aa50	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; can access sprite information
.ca53	aa53	68		pla				pla
.ca54	aa54	20 5f ad	jsr $ad5f			jsr 	GXFindSprite 				; get the sprite address
.ca57	aa57	08		php				php
.ca58	aa58	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.ca5b	aa5b	28		plp				plp
.ca5c	aa5c	b0 0a		bcs $aa68			bcs		_GXSHExit 					; exit if find failed.
.ca5e	aa5e	ad 87 08	lda $0887			lda 	gxSizePixels 				; return size
.ca61	aa61	a2 69		ldx #$69			ldx 	#GXSpriteAcquire & $FF
.ca63	aa63	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca65	aa65	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca68	aa68					_GXSHExit:
.ca68	aa68	60		rts				rts
.ca69	aa69					GXSpriteAcquire:
.ca69	aa69	ad e0 07	lda $07e0			lda 	gxSpritePage				; point to base page
.ca6c	aa6c	85 0b		sta $0b				sta 	GXEditSlot
.ca6e	aa6e	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca70	aa70	a9 00		lda #$00			lda 	#0
.ca72	aa72	ae 88 08	ldx $0888			ldx 	gxSizeBits
.ca75	aa75					_GXTimesRowNumber:
.ca75	aa75	18		clc				clc
.ca76	aa76	65 36		adc $36				adc 	gxzTemp0
.ca78	aa78	ca		dex				dex
.ca79	aa79	10 fa		bpl $aa75			bpl 	_GXTimesRowNumber
.ca7b	aa7b	64 37		stz $37				stz 	gxzTemp0+1
.ca7d	aa7d	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca7e	aa7e	26 37		rol $37				rol 	gxzTemp0+1
.ca80	aa80	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca81	aa81	26 37		rol $37				rol 	gxzTemp0+1
.ca83	aa83	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca84	aa84	26 37		rol $37				rol 	gxzTemp0+1
.ca86	aa86	85 36		sta $36				sta 	gxzTemp0
.ca88	aa88	18		clc				clc 								; add base address.
.ca89	aa89	a5 36		lda $36				lda 	gxzTemp0
.ca8b	aa8b	6d 8a 08	adc $088a			adc 	gxSpriteOffset
.ca8e	aa8e	85 36		sta $36				sta 	gxzTemp0
.ca90	aa90	a5 37		lda $37				lda 	gxzTemp0+1
.ca92	aa92	6d 8b 08	adc $088b			adc 	gxSpriteOffset+1
.ca95	aa95					_GXSAFindPage:
.ca95	aa95	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca97	aa97	90 06		bcc $aa9f			bcc 	_GXSAFoundPage
.ca99	aa99	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca9b	aa9b	e6 0b		inc $0b				inc 	GXEditSlot
.ca9d	aa9d	80 f6		bra $aa95			bra 	_GXSAFindPage
.ca9f	aa9f					_GXSAFoundPage:
.ca9f	aa9f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.caa1	aaa1	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.caa3	aaa3	a0 00		ldy #$00			ldy 	#0
.caa5	aaa5					_GXSACopyLoop:
.caa5	aaa5	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.caa7	aaa7	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.caaa	aaaa	c8		iny				iny
.caab	aaab	cc 87 08	cpy $0887			cpy 	gxSizePixels
.caae	aaae	d0 f5		bne $aaa5			bne 	_GXSACopyLoop
.cab0	aab0	60		rts				rts
.cab1	aab1					GXSelect:
.cab1	aab1	ad dc 07	lda $07dc			lda 	gxSpritesOn
.cab4	aab4	f0 22		beq $aad8			beq 	_GXSFail
.cab6	aab6	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.cab8	aab8	c9 40		cmp #$40			cmp 	#64
.caba	aaba	b0 1c		bcs $aad8			bcs 	_GXSFail
.cabc	aabc	8d ec 07	sta $07ec			sta 	GSCurrentSpriteID
.cabf	aabf	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.cac1	aac1	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.cac3	aac3	06 36		asl $36				asl 	gxzTemp0
.cac5	aac5	06 36		asl $36				asl 	gxzTemp0
.cac7	aac7	06 36		asl $36				asl 	gxzTemp0
.cac9	aac9	2a		rol a				rol 	a
.caca	aaca	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.cacc	aacc	8d ee 07	sta $07ee			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.cacf	aacf	85 37		sta $37				sta 	gxzTemp0+1
.cad1	aad1	a5 36		lda $36				lda 	gxzTemp0
.cad3	aad3	8d ed 07	sta $07ed			sta 	GSCurrentSpriteAddr
.cad6	aad6	18		clc				clc
.cad7	aad7	60		rts				rts
.cad8	aad8					_GXSFail:
.cad8	aad8	38		sec				sec
.cad9	aad9	60		rts				rts
.cada	aada					GXSelectImage:
.cada	aada	ad dc 07	lda $07dc			lda 	gxSpritesOn
.cadd	aadd	f0 74		beq $ab53			beq 	_GXSIFail
.cadf	aadf	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cae2	aae2	f0 6f		beq $ab53			beq 	_GXSIFail 					; (checking the MSB)
.cae4	aae4	64 01		stz $01				stz 	1
.cae6	aae6	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.cae8	aae8	d0 6b		bne $ab55			bne 	_GXSIHide
.caea	aaea	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.caec	aaec	48		pha				pha
.caed	aaed	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap
.caf0	aaf0	68		pla				pla
.caf1	aaf1	20 5f ad	jsr $ad5f			jsr 	GXFindSprite
.caf4	aaf4	b0 5a		bcs $ab50			bcs 	_GXSICloseFail 				; no image
.caf6	aaf6	a0 01		ldy #$01			ldy 	#1
.caf8	aaf8	ad ed 07	lda $07ed			lda 	GSCurrentSpriteAddr
.cafb	aafb	85 36		sta $36				sta 	gxzTemp0
.cafd	aafd	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1
.cb00	ab00	85 37		sta $37				sta 	gxzTemp0+1
.cb02	ab02	ad 8a 08	lda $088a			lda 	gxSpriteOffset
.cb05	ab05	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb07	ab07	18		clc				clc
.cb08	ab08	ad 8b 08	lda $088b			lda 	gxSpriteOffset+1
.cb0b	ab0b	6d ef 07	adc $07ef			adc 	gxSpriteOffsetBase
.cb0e	ab0e	c8		iny				iny
.cb0f	ab0f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb11	ab11	ad f0 07	lda $07f0			lda 	gxSpriteOffsetBase+1
.cb14	ab14	69 00		adc #$00			adc 	#0
.cb16	ab16	c8		iny				iny
.cb17	ab17	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb19	ab19	ad 88 08	lda $0888			lda 	gxSizeBits 					; get raw size
.cb1c	ab1c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cb1e	ab1e	2a		rol a				rol 	a 							; x 2
.cb1f	ab1f	0a		asl a				asl 	a 							; x 4
.cb20	ab20	0a		asl a				asl 	a 							; x 8
.cb21	ab21	0a		asl a				asl 	a 							; x 16
.cb22	ab22	0d 89 08	ora $0889			ora 	gxSpriteLUT 				; Or with LUT
.cb25	ab25	0a		asl a				asl 	a 							; 1 shift
.cb26	ab26	09 01		ora #$01			ora 	#1 							; enable sprite.
.cb28	ab28	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cb2a	ab2a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb2d	ab2d	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cb30	ab30	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cb33	ab33	29 3f		and #$3f			and 	#$3F
.cb35	ab35	9d 31 08	sta $0831,x			sta 	gxSpriteHigh,x
.cb38	ab38	ad 88 08	lda $0888			lda 	gxSizeBits 					; get bit size
.cb3b	ab3b	6a		ror a				ror 	a 							; shift into bits 6/7
.cb3c	ab3c	6a		ror a				ror 	a
.cb3d	ab3d	6a		ror a				ror 	a
.cb3e	ab3e	29 c0		and #$c0			and 	#$C0
.cb40	ab40	1d 31 08	ora $0831,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cb43	ab43	9d 31 08	sta $0831,x			sta 	gxSpriteHigh,x
.cb46	ab46	bd f1 07	lda $07f1,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cb49	ab49	29 7f		and #$7f			and 	#$7F
.cb4b	ab4b	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.cb4e	ab4e	18		clc				clc
.cb4f	ab4f	60		rts				rts
.cb50	ab50					_GXSICloseFail:
.cb50	ab50	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb53	ab53					_GXSIFail:
.cb53	ab53	38		sec				sec
.cb54	ab54	60		rts				rts
.cb55	ab55					_GXSIHide:
.cb55	ab55	ad ed 07	lda $07ed			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cb58	ab58	85 36		sta $36				sta 	gxzTemp0
.cb5a	ab5a	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1
.cb5d	ab5d	85 37		sta $37				sta 	gxzTemp0+1
.cb5f	ab5f	a9 00		lda #$00			lda 	#0
.cb61	ab61	92 36		sta ($36)			sta 	(gxzTemp0)
.cb63	ab63	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb66	ab66	bd f1 07	lda $07f1,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb69	ab69	09 80		ora #$80			ora 	#$80
.cb6b	ab6b	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.cb6e	ab6e	18		clc				clc
.cb6f	ab6f	60		rts				rts
.cb70	ab70					GXMoveSprite:
.cb70	ab70	ad dc 07	lda $07dc			lda 	gxSpritesOn
.cb73	ab73	f0 65		beq $abda			beq 	_GXSIFail
.cb75	ab75	ad ee 07	lda $07ee			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb78	ab78	f0 60		beq $abda			beq 	_GXSIFail
.cb7a	ab7a	85 37		sta $37				sta 	gxzTemp0+1
.cb7c	ab7c	a0 04		ldy #$04			ldy 	#4
.cb7e	ab7e	ad ed 07	lda $07ed			lda 	GSCurrentSpriteAddr
.cb81	ab81	85 36		sta $36				sta 	gxzTemp0
.cb83	ab83	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb86	ab86	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x
.cb89	ab89	2a		rol a				rol 	a	 						; into bits 0,1.
.cb8a	ab8a	2a		rol a				rol 	a
.cb8b	ab8b	2a		rol a				rol 	a
.cb8c	ab8c	29 03		and #$03			and 	#3
.cb8e	ab8e	aa		tax				tax
.cb8f	ab8f	bd dc ab	lda $abdc,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb92	ab92	48		pha				pha
.cb93	ab93	18		clc				clc
.cb94	ab94	6d d4 07	adc $07d4			adc 	gxX0						; copy position.
.cb97	ab97	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb99	ab99	c8		iny				iny
.cb9a	ab9a	ad d5 07	lda $07d5			lda 	gxX0+1
.cb9d	ab9d	69 00		adc #$00			adc 	#0
.cb9f	ab9f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba1	aba1	c8		iny				iny
.cba2	aba2	68		pla				pla
.cba3	aba3	18		clc				clc
.cba4	aba4	6d d6 07	adc $07d6			adc 	gxY0
.cba7	aba7	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba9	aba9	a9 00		lda #$00			lda 	#0
.cbab	abab	69 00		adc #$00			adc 	#0
.cbad	abad	c8		iny				iny
.cbae	abae	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cbb0	abb0	4e d5 07	lsr $07d5			lsr 	gxX0+1 						; divide X by 4
.cbb3	abb3	6e d4 07	ror $07d4			ror 	gxX0
.cbb6	abb6	4e d4 07	lsr $07d4			lsr 	gxX0
.cbb9	abb9	4e d6 07	lsr $07d6			lsr 	gxY0 						; divide Y by 4
.cbbc	abbc	4e d6 07	lsr $07d6			lsr 	gxY0
.cbbf	abbf	ae ec 07	ldx $07ec			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cbc2	abc2	bd f1 07	lda $07f1,x			lda 	gxSpriteLow,x
.cbc5	abc5	29 80		and #$80			and 	#$80
.cbc7	abc7	0d d4 07	ora $07d4			ora 	gxX0
.cbca	abca	9d f1 07	sta $07f1,x			sta 	gxSpriteLow,x
.cbcd	abcd	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x
.cbd0	abd0	29 c0		and #$c0			and 	#$C0
.cbd2	abd2	0d d6 07	ora $07d6			ora 	gxY0
.cbd5	abd5	9d 31 08	sta $0831,x			sta 	gxSpriteHigh,x
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					_GXSIFail:
.cbda	abda	38		sec				sec
.cbdb	abdb	60		rts				rts
.cbdc	abdc					_GXMSOffset:
>cbdc	abdc	1c						.byte 	32-8/2
>cbdd	abdd	18						.byte 	32-16/2
>cbde	abde	14						.byte 	32-24/2
>cbdf	abdf	10						.byte 	32-32/2
.cbe0	abe0					GXSelectTile:
.cbe0	abe0	ad de 07	lda $07de			lda 	gxTilesOn 					; check tilemap in use
.cbe3	abe3	f0 4b		beq $ac30			beq 	_GXSFail
.cbe5	abe5	a5 36		lda $36				lda 	gxzTemp0 					; check X and Y in range
.cbe7	abe7	cd e3 07	cmp $07e3			cmp 	gxTileMapWidth
.cbea	abea	b0 44		bcs $ac30			bcs 	_GXSFail
.cbec	abec	a5 37		lda $37				lda 	gxzTemp0+1
.cbee	abee	cd e4 07	cmp $07e4			cmp 	gxTileMapHeight
.cbf1	abf1	b0 3d		bcs $ac30			bcs 	_GXSFail
.cbf3	abf3	ad e2 07	lda $07e2			lda 	gxTileMapPage 				; page to access = tile access page.
.cbf6	abf6	8d 71 08	sta $0871			sta 	gxTileAccessPage
.cbf9	abf9	ae e3 07	ldx $07e3			ldx 	gxTileMapWidth 				; YX is the additive, e.g. shifted left. gxzTemp0+1 is shifted right.
.cbfc	abfc	a0 00		ldy #$00			ldy 	#0
.cbfe	abfe	a5 36		lda $36				lda 	gxzTemp0 					; initial result is X
.cc00	ac00	8d 72 08	sta $0872			sta 	gxTileAccessAddress
.cc03	ac03	9c 73 08	stz $0873			stz  	gxTileAccessAddress+1
.cc06	ac06					_GXSTMultiply:
.cc06	ac06	46 37		lsr $37				lsr 	gxzTemp0+1 					; shift Y right
.cc08	ac08	90 0f		bcc $ac19			bcc 	_GXSTNoAdd 					; add if CS
.cc0a	ac0a	18		clc				clc 								; add YX to result
.cc0b	ac0b	8a		txa				txa
.cc0c	ac0c	6d 72 08	adc $0872			adc 	gxTileAccessAddress
.cc0f	ac0f	8d 72 08	sta $0872			sta 	gxTileAccessAddress
.cc12	ac12	98		tya				tya
.cc13	ac13	6d 73 08	adc $0873			adc 	gxTileAccessAddress+1
.cc16	ac16	8d 73 08	sta $0873			sta 	gxTileAccessAddress+1
.cc19	ac19					_GXSTNoAdd:
.cc19	ac19	8a		txa				txa 								; shift YX left
.cc1a	ac1a	0a		asl a				asl 	a
.cc1b	ac1b	aa		tax				tax
.cc1c	ac1c	98		tya				tya
.cc1d	ac1d	2a		rol a				rol 	a
.cc1e	ac1e	a8		tay				tay
.cc1f	ac1f	a5 37		lda $37				lda 	gxzTemp0+1 					; multiply complete
.cc21	ac21	d0 e3		bne $ac06			bne 	_GXSTMultiply
.cc23	ac23	0e 72 08	asl $0872			asl 	gxTileAccessAddress 		; double it, as it is a word array.
.cc26	ac26	2e 73 08	rol $0873			rol 	gxTileAccessAddress+1
.cc29	ac29					_GXSTFixAddressLoop:
.cc29	ac29	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress
.cc2c	ac2c	b0 fb		bcs $ac29			bcs 	_GXSTFixAddressLoop
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXSFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXSTFixAddress:
.cc32	ac32	48		pha				pha
.cc33	ac33	ad 73 08	lda $0873			lda 	gxTileAccessAddress+1 		; in legal page range e.g. $0000-$1FFF
.cc36	ac36	c9 20		cmp #$20			cmp 	#$20
.cc38	ac38	90 06		bcc $ac40			bcc 	_GXSTFAExit
.cc3a	ac3a	e9 20		sbc #$20			sbc 	#$20 						; adjust address
.cc3c	ac3c	ee 71 08	inc $0871			inc 	gxTileAccessPage 			; adjust page up.
.cc3f	ac3f	38		sec				sec
.cc40	ac40					_GXSTFAExit:
.cc40	ac40	68		pla				pla
.cc41	ac41	60		rts				rts
.cc42	ac42					GXSTWriteTile:
.cc42	ac42	38		sec				sec 								; CS = update flag
.cc43	ac43	80 01		bra $ac46			bra 	GXSTTileAccess
.cc45	ac45					GXSTReadTile:
.cc45	ac45	18		clc				clc
.cc46	ac46					GXSTTileAccess:
.cc46	ac46	a5 0b		lda $0b				lda 	GXEditSlot 					; save oroginal page
.cc48	ac48	48		pha				pha
.cc49	ac49	08		php				php 								; save update flag
.cc4a	ac4a	ad 71 08	lda $0871			lda 	gxTileAccessPage 			; access the tile page.
.cc4d	ac4d	85 0b		sta $0b				sta 	GXEditSlot
.cc4f	ac4f	a6 36		ldx $36				ldx 	gxzTemp0 					; X = New value
.cc51	ac51	ad 72 08	lda $0872			lda 	gxTileAccessAddress 		; set gxzTemp0 to point there
.cc54	ac54	85 36		sta $36				sta 	gxzTemp0
.cc56	ac56	ad 73 08	lda $0873			lda 	gxTileAccessAddress+1
.cc59	ac59	09 60		ora #$60			ora 	#(GXMappingAddress >> 8)
.cc5b	ac5b	85 37		sta $37				sta 	gxzTemp0+1
.cc5d	ac5d	28		plp				plp 								; get flag
.cc5e	ac5e	90 09		bcc $ac69			bcc 	_GXSNoUpdate 				; updating the tile map ?
.cc60	ac60	8a		txa				txa 								; new value
.cc61	ac61	92 36		sta ($36)			sta 	(gxzTemp0) 					; write it out, as a word.
.cc63	ac63	a0 01		ldy #$01			ldy 	#1
.cc65	ac65	a9 00		lda #$00			lda 	#0
.cc67	ac67	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cc69	ac69					_GXSNoUpdate:
.cc69	ac69	b2 36		lda ($36)			lda 	(gxzTemp0) 					; read the value
.cc6b	ac6b	fa		plx				plx 								; restore old page
.cc6c	ac6c	86 0b		stx $0b				stx 	GXEditSlot
.cc6e	ac6e	ee 72 08	inc $0872			inc 	gxTileAccessAddress 		; advance tile ptr by 2 - will always be even.
.cc71	ac71	ee 72 08	inc $0872			inc 	gxTileAccessAddress
.cc74	ac74	d0 03		bne $ac79			bne 	_GXSNoCarry
.cc76	ac76	ee 73 08	inc $0873			inc 	gxTileAccessAddress+1
.cc79	ac79					_GXSNoCarry:
.cc79	ac79	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress 				; fix address if required.
.cc7c	ac7c	18		clc				clc 								; return with ok flag.
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					GXOpenBitmap:
.cc7e	ac7e	78		sei				sei 								; no interrupts here
.cc7f	ac7f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cc81	ac81	8d ea 07	sta $07ea			sta 	gxOriginalLUTValue
.cc84	ac84	58		cli				cli
.cc85	ac85	60		rts				rts
.cc86	ac86					GXCloseBitmap:
.cc86	ac86	78		sei				sei
.cc87	ac87	ad ea 07	lda $07ea			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cc8a	ac8a	85 0b		sta $0b				sta 	GXEditSlot
.cc8c	ac8c	58		cli				cli
.cc8d	ac8d	60		rts				rts
.cc8e	ac8e					gxPositionCalc:
.cc8e	ac8e	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.cc90	ac90	48		pha				pha
.cc91	ac91	ad d6 07	lda $07d6			lda 	gxY0 							; gxzScreen = Y0
.cc94	ac94	85 3c		sta $3c				sta 	gxzScreen
.cc96	ac96	64 3d		stz $3d				stz 	gxzScreen+1
.cc98	ac98	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cc9a	ac9a	26 3d		rol $3d				rol 	gxzScreen+1
.cc9c	ac9c	06 3c		asl $3c				asl 	gxzScreen
.cc9e	ac9e	26 3d		rol $3d				rol 	gxzScreen+1
.cca0	aca0	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cca1	aca1	65 3c		adc $3c				adc 	gxzScreen
.cca3	aca3	85 3c		sta $3c				sta 	gxzScreen
.cca5	aca5	90 02		bcc $aca9			bcc 	_GXPCNoCarry
.cca7	aca7	e6 3d		inc $3d				inc 	gxzScreen+1
.cca9	aca9					_GXPCNoCarry:
.cca9	aca9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.ccab	acab	26 3d		rol $3d				rol 	gxzScreen+1
.ccad	acad	a5 3d		lda $3d				lda	 	gxzScreen+1
.ccaf	acaf	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.ccb1	acb1	64 3d		stz $3d				stz 	gxzScreen+1
.ccb3	acb3	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.ccb5	acb5					_GXPCMultiply32:
.ccb5	acb5	06 3c		asl $3c				asl 	gxzScreen
.ccb7	acb7	26 3d		rol $3d				rol 	gxzScreen+1
.ccb9	acb9	3a		dec a				dec 	a
.ccba	acba	d0 f9		bne $acb5			bne 	_GXPCMultiply32
.ccbc	acbc	18		clc				clc
.ccbd	acbd	ad d4 07	lda $07d4			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.ccc0	acc0	65 3c		adc $3c				adc 	gxzScreen
.ccc2	acc2	8d eb 07	sta $07eb			sta 	gxOffset
.ccc5	acc5	ad d5 07	lda $07d5			lda 	gxX0+1
.ccc8	acc8	65 3d		adc $3d				adc 	gxzScreen+1
.ccca	acca	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cccc	accc	90 04		bcc $acd2			bcc 	_GXPCNoOverflow
.ccce	acce	29 1f		and #$1f			and 	#$1F 						; fix it up
.ccd0	acd0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.ccd2	acd2					_GXPCNoOverflow:
.ccd2	acd2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.ccd4	acd4	85 3d		sta $3d				sta 	gxzScreen+1
.ccd6	acd6	64 3c		stz $3c				stz 	gxzScreen
.ccd8	acd8	18		clc				clc
.ccd9	acd9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.ccdb	acdb	6d df 07	adc $07df			adc 	gxBasePage 					; by adding the base page
.ccde	acde	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cce0	ace0	68		pla				pla
.cce1	ace1	85 36		sta $36				sta 	gxzTemp0
.cce3	ace3	60		rts				rts
.cce4	ace4					GXMovePositionDown:
.cce4	ace4	18		clc				clc 								; add 320 to offset/temp+1
.cce5	ace5	ad eb 07	lda $07eb			lda 	gxOffset
.cce8	ace8	69 40		adc #$40			adc 	#64
.ccea	acea	8d eb 07	sta $07eb			sta 	gxOffset
.cced	aced	a5 3d		lda $3d				lda 	gxzScreen+1
.ccef	acef	69 01		adc #$01			adc 	#1
.ccf1	acf1	85 3d		sta $3d				sta 	gxzScreen+1
.ccf3	acf3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ccf5	acf5	90 07		bcc $acfe			bcc 	_GXMPDExit
.ccf7	acf7	38		sec				sec  								; next page, adjust address
.ccf8	acf8	e9 20		sbc #$20			sbc 	#$20
.ccfa	acfa	85 3d		sta $3d				sta 	gxzScreen+1
.ccfc	acfc	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.ccfe	acfe					_GXMPDExit:
.ccfe	acfe	60		rts				rts
.ccff	acff					GXCollide:
.ccff	acff	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cd01	ad01	aa		tax				tax
.cd02	ad02	05 37		ora $37				ora 	gxzTemp0+1
.cd04	ad04	29 c0		and #$c0			and 	#$C0
.cd06	ad06	38		sec				sec
.cd07	ad07	d0 53		bne $ad5c			bne 	_GXCollideFail 				; if either >= 64, fail.
.cd09	ad09	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cd0b	ad0b	b9 f1 07	lda $07f1,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cd0e	ad0e	1d f1 07	ora $07f1,x			ora 	gxSpriteLow,x
.cd11	ad11	30 48		bmi $ad5b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cd13	ad13	18		clc				clc 								; need to calculate sum of sizes.
.cd14	ad14	b9 31 08	lda $0831,y			lda 	gxSpriteHigh,y
.cd17	ad17	7d 31 08	adc $0831,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cd1a	ad1a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cd1c	ad1c	6a		ror a				ror 	a 							; 5/6/7
.cd1d	ad1d	4a		lsr a				lsr 	a 							; 4/5/6
.cd1e	ad1e	4a		lsr a				lsr 	a 							; 3/4/5
.cd1f	ad1f	4a		lsr a				lsr 	a 							; 2/3/4
.cd20	ad20	18		clc				clc
.cd21	ad21	69 08		adc #$08			adc 	#$08
.cd23	ad23	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cd24	ad24	4a		lsr a				lsr 	a
.cd25	ad25	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cd27	ad27	b9 31 08	lda $0831,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cd2a	ad2a	29 3f		and #$3f			and 	#$3F
.cd2c	ad2c	85 39		sta $39				sta 	gxzTemp1+1
.cd2e	ad2e	38		sec				sec
.cd2f	ad2f	bd 31 08	lda $0831,x			lda 	gxSpriteHigh,x
.cd32	ad32	29 3f		and #$3f			and 	#$3F
.cd34	ad34	e5 39		sbc $39				sbc 	gxzTemp1+1
.cd36	ad36	b0 03		bcs $ad3b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cd38	ad38	49 ff		eor #$ff			eor 	#$FF
.cd3a	ad3a	1a		inc a				inc 	a
.cd3b	ad3b					_GXCAbs1:
.cd3b	ad3b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd3d	ad3d	b0 1c		bcs $ad5b			bcs 	_GXOkayFail
.cd3f	ad3f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cd41	ad41	38		sec				sec 								; calculate |x1-x0|
.cd42	ad42	b9 f1 07	lda $07f1,y			lda 	gxSpriteLow,y
.cd45	ad45	fd f1 07	sbc $07f1,x			sbc 	gxSpriteLow,x
.cd48	ad48	b0 03		bcs $ad4d			bcs 	_GXCAbs2
.cd4a	ad4a	49 ff		eor #$ff			eor 	#$FF
.cd4c	ad4c	1a		inc a				inc 	a
.cd4d	ad4d					_GXCAbs2:
.cd4d	ad4d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd4f	ad4f	b0 0a		bcs $ad5b			bcs 	_GXOkayFail
.cd51	ad51	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cd53	ad53	90 02		bcc $ad57			bcc 	_GXCHaveLowest
.cd55	ad55	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cd57	ad57					_GXCHaveLowest:
.cd57	ad57	0a		asl a				asl 	a 							; scale to allow for >> 2
.cd58	ad58	0a		asl a				asl 	a
.cd59	ad59	18		clc				clc
.cd5a	ad5a	60		rts				rts
.cd5b	ad5b					_GXOkayFail:
.cd5b	ad5b	18		clc				clc
.cd5c	ad5c					_GXCollideFail:
.cd5c	ad5c	a9 ff		lda #$ff			lda 	#$FF
.cd5e	ad5e	60		rts				rts
.cd5f	ad5f					GXFindSprite:
.cd5f	ad5f	aa		tax				tax  								; sprite index in X
.cd60	ad60	9c 8a 08	stz $088a			stz 	gxSpriteOffset 				; sprite offset is the offset in the sprite list.
.cd63	ad63	9c 8b 08	stz $088b			stz 	gxSpriteOffset+1
.cd66	ad66	64 38		stz $38				stz 	gxzTemp1 					; zTemp1 is the address in memory, given the current selected page.
.cd68	ad68	a9 60		lda #$60			lda 	#GXMappingAddress >> 8
.cd6a	ad6a	85 39		sta $39				sta 	gxzTemp1+1
.cd6c	ad6c	ad e0 07	lda $07e0			lda 	gxSpritePage 				; and point to the sprite page.
.cd6f	ad6f	85 0b		sta $0b				sta 	GXEditSlot
.cd71	ad71	b2 38		lda ($38)			lda 	(gxzTemp1) 					; get the first sprite record header, identifying the format.
.cd73	ad73	c9 11		cmp #$11			cmp 	#$11						; should be $11
.cd75	ad75	d0 6c		bne $ade3			bne 	_GXFSFail 					; if not, fail
.cd77	ad77	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; increment pointers.
.cd7a	ad7a					_GXFindLoop:
.cd7a	ad7a	b2 38		lda ($38)			lda 	(gxzTemp1) 					; reached the end, if so then failed.
.cd7c	ad7c	c9 80		cmp #$80			cmp 	#$80
.cd7e	ad7e	f0 63		beq $ade3			beq 	_GXFSFail
.cd80	ad80	e0 00		cpx #$00			cpx 	#0 							; if zero, then found.
.cd82	ad82	f0 2c		beq $adb0			beq 	_GXFSFound
.cd84	ad84	ca		dex				dex 								; decrement count.
.cd85	ad85	0a		asl a				asl 	a 							; index into table
.cd86	ad86	a8		tay				tay 								; so we can look it up.
.cd87	ad87	18		clc				clc 								; add LSB
.cd88	ad88	ad 8a 08	lda $088a			lda 	gxSpriteOffset
.cd8b	ad8b	79 e5 ad	adc $ade5,y			adc 	_GXFSSizeTable,y
.cd8e	ad8e	8d 8a 08	sta $088a			sta 	gxSpriteOffset 				; these two should move in lock step.
.cd91	ad91	85 38		sta $38				sta 	gxzTemp1
.cd93	ad93	90 05		bcc $ad9a			bcc 	_GXNextNoCarry 				; adjust for carry as we add the MSB seperately.
.cd95	ad95	ee 8b 08	inc $088b			inc 	gxSpriteOffset+1
.cd98	ad98	e6 39		inc $39				inc 	gxzTemp1+1
.cd9a	ad9a					_GXNextNoCarry:
.cd9a	ad9a	18		clc				clc
.cd9b	ad9b	a5 39		lda $39				lda 	gxzTemp1+1 					; add MSB
.cd9d	ad9d	79 e6 ad	adc $ade6,y			adc 	_GXFSSizeTable+1,y
.cda0	ada0	85 39		sta $39				sta 	gxzTemp1+1
.cda2	ada2	ad 8b 08	lda $088b			lda 	gxSpriteOffset+1
.cda5	ada5	79 e6 ad	adc $ade6,y			adc 	_GXFSSizeTable+1,y
.cda8	ada8	8d 8b 08	sta $088b			sta 	gxSpriteOffset+1
.cdab	adab	20 d5 ad	jsr $add5			jsr 	_GXFSNormalise 				; and normalise the page address.
.cdae	adae	80 ca		bra $ad7a			bra 	_GXFindLoop 				; and go round again.
.cdb0	adb0					_GXFSFound:
.cdb0	adb0	b2 38		lda ($38)			lda 	(gxzTemp1)					; get the bit size (e.g. 0-3)
.cdb2	adb2	8d 88 08	sta $0888			sta 	gxSizeBits
.cdb5	adb5	1a		inc a				inc 	a 							; 1,2,3,4 - calculating pixel size
.cdb6	adb6	0a		asl a				asl 	a 							; 2,4,6,8
.cdb7	adb7	0a		asl a				asl 	a 							; 4,8,12,16
.cdb8	adb8	0a		asl a				asl 	a 							; 8,16,24,32
.cdb9	adb9	8d 87 08	sta $0887			sta 	gxSizePixels
.cdbc	adbc	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; and to the LUT
.cdbf	adbf	b2 38		lda ($38)			lda 	(gxzTemp1) 					; copy that out.
.cdc1	adc1	8d 89 08	sta $0889			sta 	gxSpriteLUT
.cdc4	adc4	20 c9 ad	jsr $adc9			jsr 	_GXFSIncrement 				; and it now points to the first graphic data byte
.cdc7	adc7	18		clc				clc
.cdc8	adc8	60		rts				rts
.cdc9	adc9					_GXFSIncrement:
.cdc9	adc9	ee 8a 08	inc $088a			inc 	gxSpriteOffset 				; these two should move in sync
.cdcc	adcc	e6 38		inc $38				inc 	gxzTemp1
.cdce	adce	d0 05		bne $add5			bne 	_GXFSNormalise
.cdd0	add0	ee 8b 08	inc $088b			inc 	gxSpriteOffset+1
.cdd3	add3	e6 39		inc $39				inc 	gxzTemp1+1
.cdd5	add5					_GXFSNormalise:
.cdd5	add5	a5 39		lda $39				lda 	gxzTemp1+1 					; are we out of range.
.cdd7	add7	c9 80		cmp #$80			cmp 	#(GXMappingAddress >> 8)+$20
.cdd9	add9	90 07		bcc $ade2			bcc 	_GXFSOkay
.cddb	addb	e6 0b		inc $0b				inc 	GXEditSlot 					; next 8k page
.cddd	addd	38		sec				sec 								; adjust page address back
.cdde	adde	e9 20		sbc #$20			sbc 	#$20
.cde0	ade0	85 39		sta $39				sta 	gxzTemp1+1
.cde2	ade2					_GXFSOkay:
.cde2	ade2	60		rts				rts
.cde3	ade3					_GXFSFail:
.cde3	ade3	38		sec				sec
.cde4	ade4	60		rts				rts
.cde5	ade5					_GXFSSizeTable:
>cde5	ade5	42 00 02 01 42 02 02 04				.word 	8*8+2,16*16+2,24*24+2,32*32+2
.0887						gxSizePixels:
>0887								.fill 	1
.0888						gxSizeBits:
>0888								.fill 	1
.0889						gxSpriteLUT:
>0889								.fill 	1
.088a						gxSpriteOffset:
>088a								.fill 	2
.cded	aded					GXSortXY:
.cded	aded	20 0b ae	jsr $ae0b			jsr 	GXSortY 					; will be sorted on Y now
.cdf0	adf0	ad d4 07	lda $07d4			lda 	gxX0 						; compare X0 v X1
.cdf3	adf3	cd d8 07	cmp $07d8			cmp 	gxX1
.cdf6	adf6	ad d5 07	lda $07d5			lda 	gxX0+1
.cdf9	adf9	ed d9 07	sbc $07d9			sbc 	gxX1+1
.cdfc	adfc	90 0c		bcc $ae0a			bcc 	_GXSXYExit 					; X0 < X1 exit
.cdfe	adfe	a2 00		ldx #$00			ldx 	#0 							; swap them over
.ce00	ae00	a0 04		ldy #$04			ldy 	#4
.ce02	ae02	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce05	ae05	e8		inx				inx
.ce06	ae06	c8		iny				iny
.ce07	ae07	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce0a	ae0a					_GXSXYExit:
.ce0a	ae0a	60		rts				rts
.ce0b	ae0b					GXSortY:
.ce0b	ae0b	ad d6 07	lda $07d6			lda 	gxY0 						; if Y0 >= Y1
.ce0e	ae0e	cd da 07	cmp $07da			cmp 	gxY1
.ce11	ae11	90 0b		bcc $ae1e			bcc 	_GXSYSorted
.ce13	ae13	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.ce15	ae15	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.ce17	ae17					_GXSwap1:
.ce17	ae17	20 1f ae	jsr $ae1f			jsr 	GXSwapXY
.ce1a	ae1a	88		dey				dey
.ce1b	ae1b	ca		dex				dex
.ce1c	ae1c	10 f9		bpl $ae17			bpl 	_GXSwap1
.ce1e	ae1e					_GXSYSorted:
.ce1e	ae1e	60		rts				rts
.ce1f	ae1f					GXSwapXY:
.ce1f	ae1f	bd d4 07	lda $07d4,x			lda 	gxX0,x
.ce22	ae22	48		pha				pha
.ce23	ae23	b9 d4 07	lda $07d4,y			lda 	gxX0,y
.ce26	ae26	9d d4 07	sta $07d4,x			sta 	gxX0,x
.ce29	ae29	68		pla				pla
.ce2a	ae2a	99 d4 07	sta $07d4,y			sta 	gxX0,y
.ce2d	ae2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.ce2e	ae2e					KeywordSet0:
>ce2e	ae2e	00 65					.text	0,$65,""               ; $80 !0:EOF
>ce30	ae30	00 58					.text	0,$58,""               ; $81 !1:SH1
>ce32	ae32	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ce34	ae34	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>ce3a	ae3a	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>ce42	ae42	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>ce48	ae48	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>ce4f	ae4f	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>ce57	ae57	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>ce5e	ae5e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>ce65	ae65	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>ce6c	ae6c	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>ce72	ae72	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>ce7a	ae7a	45 24 28
>ce7d	ae7d	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>ce85	ae85	45 24 28
>ce88	ae88	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>ce8e	ae8e	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>ce96	ae96	28
>ce97	ae97	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ce9f	ae9f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>cea5	aea5	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>cead	aead	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ceb5	aeb5	55 4e 54 28
>ceb9	aeb9	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>cec1	aec1	54 24 28
>cec4	aec4	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>cecb	aecb	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>ced2	aed2	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>ced9	aed9	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>cee1	aee1	4e 28
>cee3	aee3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>ceeb	aeeb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cef1	aef1	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cef7	aef7	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cefe	aefe	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cf04	af04	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cf0a	af0a	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cf11	af11	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cf19	af19	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cf21	af21	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cf29	af29	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cf31	af31	47 28
>cf33	af33	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cf3b	af3b	28
>cf3c	af3c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cf44	af44	28
>cf45	af45	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cf4b	af4b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cf51	af51	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cf57	af57	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cf5e	af5e	05 56 54 49 4c 45 28			.text	5,$56,"TILE("          ; $aa TILE(
>cf65	af65	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $ab TIMER(
>cf6d	af6d	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ac TRUE
>cf73	af73	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ad VAL(
>cf79	af79	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ae FOR
>cf7e	af7e	02 8f 49 46				.text	2,$8f,"IF"             ; $af IF
>cf82	af82	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $b0 PROC
>cf88	af88	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b1 REPEAT
>cf90	af90	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b2 WHILE
>cf97	af97	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b3 ENDIF
>cf9e	af9e	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b4 ENDPROC
>cfa6	afa6	43
>cfa7	afa7	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b5 NEXT
>cfad	afad	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b6 THEN
>cfb3	afb3	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b7 UNTIL
>cfba	afba	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b8 WEND
>cfc0	afc0	02 95 41 54				.text	2,$95,"AT"             ; $b9 AT
>cfc4	afc4	02 9b 42 59				.text	2,$9b,"BY"             ; $ba BY
>cfc8	afc8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $bb CALL
>cfce	afce	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bc CIRCLE
>cfd6	afd6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bd CLEAR
>cfdd	afdd	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $be COLOR
>cfe4	afe4	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bf COLOUR
>cfec	afec	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $c0 DATA
>cff2	aff2	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c1 DIM
>cff7	aff7	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c2 DOWNTO
>cfff	afff	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c3 ELSE
>d005	b005	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c4 FROM
>d00b	b00b	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c5 GFX
>d010	b010	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c6 HERE
>d016	b016	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c7 IMAGE
>d01d	b01d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c8 LET
>d022	b022	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c9 LINE
>d028	b028	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ca LOCAL
>d02f	b02f	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $cb MEMCOPY
>d037	b037	59
>d038	b038	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cc OFF
>d03d	b03d	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cd ON
>d041	b041	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ce OUTLINE
>d049	b049	45
>d04a	b04a	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cf PALETTE
>d052	b052	45
>d053	b053	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $d0 PLOT
>d059	b059	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d1 POKE
>d05f	b05f	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d2 POKED
>d066	b066	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d3 POKEL
>d06d	b06d	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d4 POKEW
>d074	b074	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d5 READ
>d07a	b07a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d6 RECT
>d080	b080	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d7 REM
>d085	b085	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d8 SOLID
>d08c	b08c	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d9 SOUND
>d093	b093	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $da SPRITE
>d09b	b09b	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $db TEXT
>d0a1	b0a1	02 a3 54 4f				.text	2,$a3,"TO"             ; $dc TO
>d0a5	b0a5	ff					.text	$FF
.d0a6	b0a6					KeywordSet1:
>d0a6	b0a6	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0a8	b0a8	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0aa	b0aa	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0ac	b0ac	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d0b4	b0b4	4c 45
>d0b6	b0b6	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d0be	b0be	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d0c6	b0c6	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d0cd	b0cd	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d0d4	b0d4	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d0d9	b0d9	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d0e1	b0e1	06 de 43 55 52 53 4f 52			.text	6,$de,"CURSOR"         ; $8a CURSOR
>d0e9	b0e9	03 df 44 49 52				.text	3,$df,"DIR"            ; $8b DIR
>d0ee	b0ee	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d0f5	b0f5	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d0fa	b0fa	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d102	b102	45
>d103	b103	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d107	b107	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d10e	b10e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d114	b114	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d11b	b11b	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d122	b122	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d128	b128	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d12e	b12e	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>d136	b136	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>d13d	b13d	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>d142	b142	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $99 PING
>d148	b148	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9a PRINT
>d14f	b14f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9b RESTORE
>d157	b157	45
>d158	b158	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9c RETURN
>d160	b160	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9d RUN
>d165	b165	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9e SAVE
>d16b	b16b	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9f SETDATE
>d173	b173	45
>d174	b174	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a0 SETTIME
>d17c	b17c	45
>d17d	b17d	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a1 SHOOT
>d184	b184	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a2 SPRITES
>d18c	b18c	53
>d18d	b18d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a3 STOP
>d193	b193	04 2e 54 49 4c 45			.text	4,$2e,"TILE"           ; $a4 TILE
>d199	b199	05 81 54 49 4c 45 53			.text	5,$81,"TILES"          ; $a5 TILES
>d1a0	b1a0	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a6 TRY
>d1a5	b1a5	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a7 VERIFY
>d1ad	b1ad	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a8 XGO
>d1b2	b1b2	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a9 XLOAD
>d1b9	b1b9	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $aa ZAP
>d1be	b1be	ff					.text	$FF
.d1bf	b1bf					KeywordSet2:
>d1bf	b1bf	00 65					.text	0,$65,""               ; $80 !0:EOF
>d1c1	b1c1	00 58					.text	0,$58,""               ; $81 !1:SH1
>d1c3	b1c3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d1c5	b1c5	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d1ca	b1ca	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d1cf	b1cf	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d1d4	b1d4	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d1d9	b1d9	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d1de	b1de	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d1e3	b1e3	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d1e8	b1e8	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d1ed	b1ed	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d1f2	b1f2	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d1f7	b1f7	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d1fc	b1fc	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d201	b201	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d206	b206	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d20b	b20b	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d210	b210	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d215	b215	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d21a	b21a	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d21f	b21f	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d224	b224	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d229	b229	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d22e	b22e	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d233	b233	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d238	b238	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d23d	b23d	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d242	b242	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d247	b247	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d24c	b24c	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d251	b251	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d256	b256	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d25b	b25b	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d260	b260	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d265	b265	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d26a	b26a	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d26f	b26f	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d274	b274	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d279	b279	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d27e	b27e	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d283	b283	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d288	b288	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d28d	b28d	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d292	b292	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d297	b297	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d29c	b29c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d2a1	b2a1	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d2a6	b2a6	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d2ab	b2ab	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d2b0	b2b0	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d2b5	b2b5	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d2ba	b2ba	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d2bf	b2bf	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d2c4	b2c4	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d2c9	b2c9	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d2ce	b2ce	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d2d3	b2d3	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d2d8	b2d8	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d2dd	b2dd	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d2e2	b2e2	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d2e7	b2e7	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d2ec	b2ec	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d2f1	b2f1	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d2f6	b2f6	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d2fb	b2fb	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d300	b300	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d305	b305	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d30a	b30a	ff					.text	$FF
.d30b	b30b					Export_TKListConvertLine:
.d30b	b30b	48		pha				pha 								; save indent on the stack
.d30c	b30c	9c 19 04	stz $0419			stz 	tbOffset
.d30f	b30f	9c 29 04	stz $0429			stz 	tokenBuffer
.d312	b312	9c 25 04	stz $0425			stz 	currentListColour
.d315	b315	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d317	b317	20 94 b4	jsr $b494			jsr 	LCLWriteColour
.d31a	b31a	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d31c	b31c	b1 30		lda ($30),y			lda 	(codePtr),y
.d31e	b31e	aa		tax				tax
.d31f	b31f	88		dey				dey
.d320	b320	b1 30		lda ($30),y			lda 	(codePtr),y
.d322	b322	20 05 b5	jsr $b505			jsr 	LCLWriteNumberXA
.d325	b325	68		pla				pla 								; adjustment to indent
.d326	b326	48		pha				pha 								; save on stack
.d327	b327	10 0c		bpl $b335			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d329	b329	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d32a	b32a	6d 22 04	adc $0422			adc 	listIndent
.d32d	b32d	8d 22 04	sta $0422			sta 	listIndent
.d330	b330	10 03		bpl $b335			bpl 	_LCNoAdjust
.d332	b332	9c 22 04	stz $0422			stz 	listIndent
.d335	b335					_LCNoAdjust:
.d335	b335	18		clc				clc		 							; work out actual indent.
.d336	b336	ad 22 04	lda $0422			lda 	listIndent
.d339	b339	0a		asl a				asl 	a
.d33a	b33a	69 07		adc #$07			adc 	#7
.d33c	b33c	85 36		sta $36				sta 	zTemp0
.d33e	b33e					_LCPadOut:
.d33e	b33e	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d340	b340	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d343	b343	ad 19 04	lda $0419			lda 	tbOffset
.d346	b346	c5 36		cmp $36				cmp 	zTemp0
.d348	b348	d0 f4		bne $b33e			bne 	_LCPadOut
.d34a	b34a	a0 03		ldy #$03			ldy 	#3 							; start position.
.d34c	b34c					_LCMainLoop:
.d34c	b34c	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d34e	b34e	20 94 b4	jsr $b494			jsr 	LCLWriteColour
.d351	b351	b1 30		lda ($30),y			lda 	(codePtr),y
.d353	b353	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d355	b355	f0 17		beq $b36e			beq 	_LCExit
.d357	b357	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d359	b359	90 1e		bcc $b379			bcc 	_LCDoubles
.d35b	b35b	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d35d	b35d	90 2a		bcc $b389			bcc 	_LCShiftPunc
.d35f	b35f	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d361	b361	90 35		bcc $b398			bcc 	_LCPunctuation
.d363	b363	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d365	b365	90 51		bcc $b3b8			bcc 	_LCIdentifiers
.d367	b367	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d369	b369	90 73		bcc $b3de			bcc 	_LCTokens
.d36b	b36b	4c 3e b4	jmp $b43e			jmp 	_LCData 					; 254-5 are data objects
.d36e	b36e					_LCExit:
.d36e	b36e	68		pla				pla 								; get old indent adjust
.d36f	b36f	30 07		bmi $b378			bmi 	_LCExit2
.d371	b371	18		clc				clc 								; add to indent if +ve
.d372	b372	6d 22 04	adc $0422			adc 	listIndent
.d375	b375	8d 22 04	sta $0422			sta 	listIndent
.d378	b378					_LCExit2:
.d378	b378	60		rts				rts
.d379	b379					_LCDoubles:
.d379	b379	48		pha				pha
.d37a	b37a	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d37b	b37b	29 02		and #$02			and 	#2
.d37d	b37d	09 3c		ora #$3c			ora 	#60 						; make < >
.d37f	b37f	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d382	b382	68		pla				pla 								; restore, do lower bit
.d383	b383	29 03		and #$03			and 	#3
.d385	b385	09 3c		ora #$3c			ora 	#60
.d387	b387	80 0f		bra $b398			bra		_LCPunctuation 				; print, increment, loop
.d389	b389					_LCShiftPunc:
.d389	b389	aa		tax				tax 								; save in X
.d38a	b38a	29 07		and #$07			and 	#7 							; lower 3 bits
.d38c	b38c	f0 02		beq $b390			beq 	_LCNoAdd
.d38e	b38e	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d390	b390					_LCNoAdd:
.d390	b390	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d392	b392	90 02		bcc $b396			bcc 	_LCNoAdd2
.d394	b394	09 20		ora #$20			ora 	#32 						; adds $20
.d396	b396					_LCNoAdd2:
.d396	b396	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d398	b398					_LCPunctuation:
.d398	b398	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d39a	b39a	d0 03		bne $b39f			bne 	_LCPContinue
.d39c	b39c	20 b3 b4	jsr $b4b3			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d39f	b39f					_LCPContinue:
.d39f	b39f	c9 2e		cmp #$2e			cmp 	#'.'
.d3a1	b3a1	f0 08		beq $b3ab			beq 	_LCPIsConstant
.d3a3	b3a3	c9 30		cmp #$30			cmp 	#'0'
.d3a5	b3a5	90 0b		bcc $b3b2			bcc 	_LCPNotConstant
.d3a7	b3a7	c9 3a		cmp #$3a			cmp 	#'9'+1
.d3a9	b3a9	b0 07		bcs $b3b2			bcs 	_LCPNotConstant
.d3ab	b3ab					_LCPIsConstant:
.d3ab	b3ab	48		pha				pha
.d3ac	b3ac	a9 87		lda #$87			lda 	#CLIConstant+$80
.d3ae	b3ae	20 94 b4	jsr $b494			jsr 	LCLWriteColour
.d3b1	b3b1	68		pla				pla
.d3b2	b3b2					_LCPNotConstant:
.d3b2	b3b2	c8		iny				iny 								; consume character
.d3b3	b3b3	20 9d b4	jsr $b49d			jsr 	LCLWrite 					; write it out.
.d3b6	b3b6	80 94		bra $b34c			bra 	_LCMainLoop 				; go round again.
.d3b8	b3b8					_LCIdentifiers:
.d3b8	b3b8	18		clc				clc 								; convert to physical address
.d3b9	b3b9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d3bb	b3bb	85 37		sta $37				sta 	zTemp0+1
.d3bd	b3bd	c8		iny				iny
.d3be	b3be	b1 30		lda ($30),y			lda 	(codePtr),y
.d3c0	b3c0	85 36		sta $36				sta 	zTemp0
.d3c2	b3c2	c8		iny				iny
.d3c3	b3c3	5a		phy				phy 								; save position
.d3c4	b3c4	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d3c6	b3c6	20 94 b4	jsr $b494			jsr 	LCLWriteColour
.d3c9	b3c9	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d3cb	b3cb					_LCOutIdentifier:
.d3cb	b3cb	c8		iny				iny
.d3cc	b3cc	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d3ce	b3ce	29 7f		and #$7f			and 	#$7F
.d3d0	b3d0	20 ef b4	jsr $b4ef			jsr 	LCLLowerCase
.d3d3	b3d3	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d3d6	b3d6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d3d8	b3d8	10 f1		bpl $b3cb			bpl 	_LCOutIdentifier
.d3da	b3da	7a		ply				ply 								; restore position
.d3db	b3db	4c 4c b3	jmp $b34c			jmp 	_LCMainLoop
.d3de	b3de					_LCTokens:
.d3de	b3de	aa		tax				tax 								; token in X
.d3df	b3df	a9 bf		lda #$bf			lda 	#((KeywordSet2) & $FF)
.d3e1	b3e1	85 36		sta $36				sta 	0+zTemp0
.d3e3	b3e3	a9 b1		lda #$b1			lda 	#((KeywordSet2) >> 8)
.d3e5	b3e5	85 37		sta $37				sta 	1+zTemp0
.d3e7	b3e7	e0 82		cpx #$82			cpx 	#$82
.d3e9	b3e9	f0 16		beq $b401			beq 	_LCUseShift
.d3eb	b3eb	a9 a6		lda #$a6			lda 	#((KeywordSet1) & $FF)
.d3ed	b3ed	85 36		sta $36				sta 	0+zTemp0
.d3ef	b3ef	a9 b0		lda #$b0			lda 	#((KeywordSet1) >> 8)
.d3f1	b3f1	85 37		sta $37				sta 	1+zTemp0
.d3f3	b3f3	e0 81		cpx #$81			cpx 	#$81
.d3f5	b3f5	f0 0a		beq $b401			beq 	_LCUseShift
.d3f7	b3f7	a9 2e		lda #$2e			lda 	#((KeywordSet0) & $FF)
.d3f9	b3f9	85 36		sta $36				sta 	0+zTemp0
.d3fb	b3fb	a9 ae		lda #$ae			lda 	#((KeywordSet0) >> 8)
.d3fd	b3fd	85 37		sta $37				sta 	1+zTemp0
.d3ff	b3ff	80 01		bra $b402			bra 	_LCNoShift
.d401	b401					_LCUseShift:
.d401	b401	c8		iny				iny
.d402	b402					_LCNoShift:
.d402	b402	20 c7 b4	jsr $b4c7			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d405	b405	b1 30		lda ($30),y			lda 	(codePtr),y
.d407	b407	aa		tax				tax 								; into X
.d408	b408					_LCFindText:
.d408	b408	ca		dex				dex
.d409	b409	10 0e		bpl $b419			bpl 	_LCFoundText 				; found text.
.d40b	b40b	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d40d	b40d	1a		inc a				inc 	a 							; one extra for size
.d40e	b40e	38		sec				sec 								; one extra for checksum
.d40f	b40f	65 36		adc $36				adc 	zTemp0 						; go to next token
.d411	b411	85 36		sta $36				sta 	zTemp0
.d413	b413	90 f3		bcc $b408			bcc 	_LCFindText
.d415	b415	e6 37		inc $37				inc 	zTemp0+1
.d417	b417	80 ef		bra $b408			bra 	_LCFindText
.d419	b419					_LCFoundText:
.d419	b419	5a		phy				phy 								; save List position
.d41a	b41a	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d41c	b41c	aa		tax				tax
.d41d	b41d	a9 86		lda #$86			lda 	#CLIToken+$80
.d41f	b41f	20 94 b4	jsr $b494			jsr 	LCLWriteColour
.d422	b422	a0 02		ldy #$02			ldy 	#2
.d424	b424					_LCCopyToken:
.d424	b424	b1 36		lda ($36),y			lda 	(zTemp0),y
.d426	b426	20 ef b4	jsr $b4ef			jsr 	LCLLowerCase
.d429	b429	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d42c	b42c	c8		iny				iny
.d42d	b42d	ca		dex				dex
.d42e	b42e	d0 f4		bne $b424			bne 	_LCCopyToken
.d430	b430	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d432	b432	f0 05		beq $b439			beq 	_LCNoSpace
.d434	b434	a9 20		lda #$20			lda 	#' '
.d436	b436	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d439	b439					_LCNoSpace:
.d439	b439	7a		ply				ply 								; restore position.
.d43a	b43a	c8		iny				iny 								; consume token
.d43b	b43b	4c 4c b3	jmp $b34c			jmp 	_LCMainLoop 				; and go around again.
.d43e	b43e					_LCData:
.d43e	b43e	48		pha				pha 								; save type $FE/$FF
.d43f	b43f	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d441	b441	c9 fe		cmp #$fe			cmp 	#$FE
.d443	b443	f0 22		beq $b467			beq 	_LCHaveOpener
.d445	b445	a2 22		ldx #$22			ldx 	#'"'
.d447	b447	a9 8f		lda #$8f			lda 	#CLIData+$80
.d449	b449	20 94 b4	jsr $b494			jsr 	LCLWriteColour
.d44c	b44c	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d44e	b44e	d0 17		bne $b467			bne 	_LCHaveOpener
.d450	b450	88		dey				dey 								; what precedes it ?
.d451	b451	b1 30		lda ($30),y			lda 	(codePtr),y
.d453	b453	c8		iny				iny
.d454	b454	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d456	b456	d0 0f		bne $b467			bne 	_LCHaveOpener
.d458	b458	a9 09		lda #$09			lda 	#9 							; tab
.d45a	b45a	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d45d	b45d	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d45f	b45f	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d462	b462	a9 85		lda #$85			lda 	#CLIFComment+$80
.d464	b464	20 94 b4	jsr $b494			jsr 	LCLWriteColour
.d467	b467					_LCHaveOpener:
.d467	b467	8a		txa				txa 								; output prefix (# or ")
.d468	b468	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d46b	b46b	c8		iny				iny 								; get count
.d46c	b46c	b1 30		lda ($30),y			lda 	(codePtr),y
.d46e	b46e	aa		tax				tax
.d46f	b46f	c8		iny				iny 								; point at first character
.d470	b470					_LCOutData:
.d470	b470	b1 30		lda ($30),y			lda 	(codePtr),y
.d472	b472	c9 00		cmp #$00			cmp 	#0
.d474	b474	f0 03		beq $b479			beq 	_LCNoPrint
.d476	b476	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d479	b479					_LCNoPrint:
.d479	b479	c8		iny				iny
.d47a	b47a	ca		dex				dex
.d47b	b47b	d0 f3		bne $b470			bne 	_LCOutData
.d47d	b47d	68		pla				pla 								; closing " required ?
.d47e	b47e	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d480	b480	d0 0f		bne $b491			bne 	_LCNoQuote
.d482	b482	a9 22		lda #$22			lda 	#'"'
.d484	b484	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d487	b487	ad c9 07	lda $07c9			lda 	EXTTextColour
.d48a	b48a	29 0f		and #$0f			and 	#$0F
.d48c	b48c	09 90		ora #$90			ora 	#$90
.d48e	b48e	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d491	b491					_LCNoQuote:
.d491	b491	4c 4c b3	jmp $b34c			jmp 	_LCMainLoop
.d494	b494					LCLWriteColour:
.d494	b494	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d497	b497	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d49a	b49a	d0 01		bne $b49d			bne 	LCLWrite 					; if different, output it
.d49c	b49c	60		rts				rts
.d49d	b49d					LCLWrite:
.d49d	b49d	da		phx				phx
.d49e	b49e	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d4a1	b4a1	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d4a4	b4a4	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d4a7	b4a7	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d4aa	b4aa	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d4ac	b4ac	30 03		bmi $b4b1			bmi 	_LCLNoColour
.d4ae	b4ae	8d 23 04	sta $0423			sta 	lcLastCharacter
.d4b1	b4b1					_LCLNoColour:
.d4b1	b4b1	fa		plx				plx
.d4b2	b4b2	60		rts				rts
.d4b3	b4b3					LCLDeleteLastSpace:
.d4b3	b4b3	48		pha				pha
.d4b4	b4b4	da		phx				phx
.d4b5	b4b5	ae 19 04	ldx $0419			ldx 	tbOffset
.d4b8	b4b8	f0 0a		beq $b4c4			beq 	_LCDLSExit
.d4ba	b4ba	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d4bd	b4bd	c9 20		cmp #$20			cmp 	#' '
.d4bf	b4bf	d0 03		bne $b4c4			bne 	_LCDLSExit
.d4c1	b4c1	ce 19 04	dec $0419			dec 	tbOffset
.d4c4	b4c4					_LCDLSExit:
.d4c4	b4c4	fa		plx				plx
.d4c5	b4c5	68		pla				pla
.d4c6	b4c6	60		rts				rts
.d4c7	b4c7					LCLCheckSpaceRequired:
.d4c7	b4c7	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d4ca	b4ca	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d4cc	b4cc	f0 1b		beq $b4e9			beq 	_LCCSRSpace
.d4ce	b4ce	c9 29		cmp #$29			cmp 	#')'
.d4d0	b4d0	f0 17		beq $b4e9			beq 	_LCCSRSpace
.d4d2	b4d2	c9 23		cmp #$23			cmp 	#'#'
.d4d4	b4d4	f0 13		beq $b4e9			beq 	_LCCSRSpace
.d4d6	b4d6	20 ef b4	jsr $b4ef			jsr 	LCLLowerCase 				; saves a little effort
.d4d9	b4d9	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d4db	b4db	90 11		bcc $b4ee			bcc 	_LCCSRExit
.d4dd	b4dd	c9 3a		cmp #$3a			cmp 	#"9"+1
.d4df	b4df	90 08		bcc $b4e9			bcc 	_LCCSRSpace
.d4e1	b4e1	c9 61		cmp #$61			cmp 	#"a"
.d4e3	b4e3	90 09		bcc $b4ee			bcc 	_LCCSRExit
.d4e5	b4e5	c9 7b		cmp #$7b			cmp 	#"z"+1
.d4e7	b4e7	b0 05		bcs $b4ee			bcs 	_LCCSRExit
.d4e9	b4e9					_LCCSRSpace:
.d4e9	b4e9	a9 20		lda #$20			lda 	#' '
.d4eb	b4eb	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d4ee	b4ee					_LCCSRExit:
.d4ee	b4ee	60		rts				rts
.d4ef	b4ef					LCLLowerCase:
.d4ef	b4ef	c9 41		cmp #$41			cmp 	#"A"
.d4f1	b4f1	90 06		bcc $b4f9			bcc 	_LCLLCOut
.d4f3	b4f3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4f5	b4f5	b0 02		bcs $b4f9			bcs 	_LCLLCOut
.d4f7	b4f7	69 20		adc #$20			adc 	#$20
.d4f9	b4f9					_LCLLCOut:
.d4f9	b4f9	60		rts				rts
.d4fa	b4fa					LCLUpperCase:
.d4fa	b4fa	c9 61		cmp #$61			cmp 	#"a"
.d4fc	b4fc	90 06		bcc $b504			bcc 	_LCLUCOut
.d4fe	b4fe	c9 7b		cmp #$7b			cmp 	#"z"+1
.d500	b500	b0 02		bcs $b504			bcs 	_LCLUCOut
.d502	b502	e9 1f		sbc #$1f			sbc 	#$1F
.d504	b504					_LCLUCOut:
.d504	b504	60		rts				rts
.d505	b505					LCLWriteNumberXA:
.d505	b505	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d507	b507					_LCLWNLoop1:
.d507	b507	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d509	b509					_LCLWNLoop2:
.d509	b509	48		pha				pha 								; save initial LSB
.d50a	b50a	38		sec				sec
.d50b	b50b	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d50d	b50d	f9 3e b5	sbc $b53e,y			sbc 	_LCLWNTable,y
.d510	b510	48		pha				pha
.d511	b511	8a		txa				txa
.d512	b512	f9 3f b5	sbc $b53f,y			sbc 	_LCLWNTable+1,y
.d515	b515	90 07		bcc $b51e			bcc 	_LCLWNUnderflow
.d517	b517	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d519	b519	aa		tax				tax 								; update X
.d51a	b51a	68		pla				pla 								; restore A
.d51b	b51b	7a		ply				ply 								; throw original
.d51c	b51c	80 eb		bra $b509			bra 	_LCLWNLoop2 				; try again.
.d51e	b51e					_LCLWNUnderflow:
.d51e	b51e	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d520	b520	d0 06		bne $b528			bne 	_LCLWNOut
.d522	b522	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d525	b525	3a		dec a				dec 	a
.d526	b526	f0 04		beq $b52c			beq 	_LCLWNNext
.d528	b528					_LCLWNOut:
.d528	b528	98		tya				tya
.d529	b529	20 38 b5	jsr $b538			jsr 	_LCLWNOutDigit
.d52c	b52c					_LCLWNNext:
.d52c	b52c	7a		ply				ply 							 	; restore original value.
.d52d	b52d	68		pla				pla
.d52e	b52e	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d530	b530	c8		iny				iny
.d531	b531	c8		iny				iny
.d532	b532	84 37		sty $37				sty 	zTemp0+1
.d534	b534	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d536	b536	d0 cf		bne $b507			bne 	_LCLWNLoop1
.d538	b538					_LCLWNOutDigit:
.d538	b538	09 30		ora #$30			ora 	#'0'
.d53a	b53a	20 9d b4	jsr $b49d			jsr 	LCLWrite
.d53d	b53d	60		rts				rts
.d53e	b53e					_LCLWNTable:
>d53e	b53e	10 27						.word 	10000
>d540	b540	e8 03						.word 	1000
>d542	b542	64 00						.word 	100
>d544	b544	0a 00						.word 	10
.d546	b546					TOKSearchTable:
.d546	b546	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d548	b548	85 36		sta $36				sta 	zTemp0
.d54a	b54a	a0 00		ldy #$00			ldy 	#0
.d54c	b54c	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d54e	b54e	85 38		sta $38				sta 	zTemp1
.d550	b550					_TSTLoop:
.d550	b550	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d552	b552	30 49		bmi $b59d			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d554	b554	f0 2e		beq $b584			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d556	b556	c8		iny				iny 								; get the hash
.d557	b557	b1 36		lda ($36),y			lda 	(zTemp0),y
.d559	b559	88		dey				dey
.d55a	b55a	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d55d	b55d	d0 25		bne $b584			bne 	_TSTNext
.d55f	b55f	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d562	b562	38		sec				sec
.d563	b563	ed 00 04	sbc $0400			sbc 	identStart
.d566	b566	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d568	b568	d0 1a		bne $b584			bne 	_TSTNext
.d56a	b56a	5a		phy				phy 								; save Y , we might fail to match.
.d56b	b56b	c8		iny				iny 								; point to text
.d56c	b56c	c8		iny				iny
.d56d	b56d	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d570	b570					_TSTCompareName:
.d570	b570	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d573	b573	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d575	b575	d0 0c		bne $b583			bne 	_TSTNextPullY 				; fail, pullY and do next
.d577	b577	e8		inx				inx
.d578	b578	c8		iny				iny
.d579	b579	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d57c	b57c	d0 f2		bne $b570			bne 	_TSTCompareName
.d57e	b57e	7a		ply				ply 								; throw Y
.d57f	b57f	a5 38		lda $38				lda 	zTemp1 						; get token #
.d581	b581	38		sec				sec 								; return with CS = passed.
.d582	b582	60		rts				rts
.d583	b583					_TSTNextPullY:
.d583	b583	7a		ply				ply 								; restore current, fall through.
.d584	b584					_TSTNext:
.d584	b584	e6 38		inc $38				inc 	zTemp1 						; token counter
.d586	b586	98		tya				tya
.d587	b587	18		clc				clc
.d588	b588	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d58a	b58a	1a		inc a				inc 	a 							; +1
.d58b	b58b	1a		inc a				inc 	a 							; +2
.d58c	b58c	a8		tay				tay
.d58d	b58d	10 c1		bpl $b550			bpl 	_TSTLoop 					; if Y < $80 loop back
.d58f	b58f	98		tya				tya 								; add Y to zTemp0 and reset Y
.d590	b590	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d592	b592	18		clc				clc  								; but have tables > 255 bytes
.d593	b593	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d595	b595	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d597	b597	90 b7		bcc $b550			bcc 	_TSTLoop
.d599	b599	e6 37		inc $37				inc 	zTemp0+1
.d59b	b59b	80 b3		bra $b550			bra 	_TSTLoop
.d59d	b59d					_TSTFail:
.d59d	b59d	18		clc				clc
.d59e	b59e	60		rts				rts
.d59f	b59f					Export_TKTokeniseLine:
.d59f	b59f	20 6c b7	jsr $b76c			jsr 	LCLFixLineBufferCase 		; fix line case
.d5a2	b5a2	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d5a4	b5a4	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d5a7	b5a7	9c 27 04	stz $0427			stz 	tokenLineNumber
.d5aa	b5aa	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d5ad	b5ad	a2 ff		ldx #$ff			ldx 	#$FF
.d5af	b5af					_TKFindFirst:
.d5af	b5af	e8		inx				inx
.d5b0	b5b0	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d5b3	b5b3	f0 62		beq $b617			beq 	_TKExit
.d5b5	b5b5	c9 20		cmp #$20			cmp 	#' '
.d5b7	b5b7	90 f6		bcc $b5af			bcc 	_TKFindFirst
.d5b9	b5b9	c9 30		cmp #$30			cmp 	#'0'
.d5bb	b5bb	90 07		bcc $b5c4			bcc 	_TKNoLineNumber
.d5bd	b5bd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5bf	b5bf	b0 03		bcs $b5c4			bcs 	_TKNoLineNumber
.d5c1	b5c1	20 96 b7	jsr $b796			jsr 	TOKExtractLineNumber
.d5c4	b5c4					_TKNoLineNumber:
.d5c4	b5c4					_TKTokeniseLoop:
.d5c4	b5c4	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d5c7	b5c7	f0 4e		beq $b617			beq 	_TKExit
.d5c9	b5c9	e8		inx				inx
.d5ca	b5ca	c9 20		cmp #$20			cmp 	#' '
.d5cc	b5cc	f0 f6		beq $b5c4			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d5ce	b5ce	ca		dex				dex 								; undo last get, A contains character, X is position.
.d5cf	b5cf	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d5d1	b5d1	f0 68		beq $b63b			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d5d3	b5d3	c9 41		cmp #$41			cmp 	#'A'
.d5d5	b5d5	90 04		bcc $b5db			bcc 	_TKTokenisePunctuation
.d5d7	b5d7	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d5d9	b5d9	90 60		bcc $b63b			bcc 	_TKTokeniseIdentifier
.d5db	b5db					_TKTokenisePunctuation:
.d5db	b5db	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d5dd	b5dd	f0 2e		beq $b60d			beq 	_TKString
.d5df	b5df	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d5e1	b5e1	f0 2f		beq $b612			beq 	_TKHexConstant
.d5e3	b5e3	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d5e5	b5e5	f0 36		beq $b61d			beq 	_TKCheckDouble
.d5e7	b5e7	c9 3e		cmp #$3e			cmp 	#'>'
.d5e9	b5e9	f0 32		beq $b61d			beq 	_TKCheckDouble
.d5eb	b5eb					_TKStandardPunctuation:
.d5eb	b5eb	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d5ee	b5ee	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d5f0	b5f0	90 0e		bcc $b600			bcc 	_TKNoShift
.d5f2	b5f2	48		pha				pha 								; save. we are about to convert this punctuation token from
.d5f3	b5f3	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d5f5	b5f5	85 36		sta $36				sta 	zTemp0
.d5f7	b5f7	68		pla				pla
.d5f8	b5f8	29 20		and #$20			and 	#32 						; bit 5
.d5fa	b5fa	4a		lsr a				lsr 	a 							; shift into bit 3
.d5fb	b5fb	4a		lsr a				lsr 	a
.d5fc	b5fc	05 36		ora $36				ora 	zTemp0
.d5fe	b5fe	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d600	b600					_TKNoShift:
.d600	b600	20 db b7	jsr $b7db			jsr 	TOKWriteByte 				; write the punctuation character
.d603	b603	e8		inx				inx 								; consume the character
.d604	b604	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d606	b606	d0 bc		bne $b5c4			bne 	_TKTokeniseLoop 			; and loop round again.
.d608	b608	20 ce b6	jsr $b6ce			jsr 	TOKCheckComment 			; comment checl
.d60b	b60b	80 b7		bra $b5c4			bra 	_TKTokeniseLoop
.d60d	b60d					_TKString:
.d60d	b60d	20 fb b6	jsr $b6fb			jsr 	TOKTokenString
.d610	b610	80 b2		bra $b5c4			bra 	_TKTokeniseLoop
.d612	b612					_TKHexConstant:
.d612	b612	20 36 b7	jsr $b736			jsr 	TOKHexConstant
.d615	b615	80 ad		bra $b5c4			bra 	_TKTokeniseLoop
.d617	b617	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d619	b619	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d61c	b61c	60		rts				rts
.d61d	b61d					_TKCheckDouble:
.d61d	b61d	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d620	b620	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d622	b622	90 c7		bcc $b5eb			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d624	b624	c9 3f		cmp #$3f			cmp 	#'>'+1
.d626	b626	b0 c3		bcs $b5eb			bcs 	_TKStandardPunctuation
.d628	b628	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d62b	b62b	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d62d	b62d	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d62e	b62e	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d631	b631	38		sec				sec
.d632	b632	e9 3c		sbc #$3c			sbc 	#'<'
.d634	b634	20 db b7	jsr $b7db			jsr 	TOKWriteByte 				; this is in the range 0-7
.d637	b637	e8		inx				inx 								; consume both
.d638	b638	e8		inx				inx
.d639	b639	80 89		bra $b5c4			bra 	_TKTokeniseLoop
.d63b	b63b					_TKTokeniseIdentifier:
.d63b	b63b	8e 00 04	stx $0400			stx 	identStart 					; save start
.d63e	b63e	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d641	b641					_TKCheckLoop:
.d641	b641	e8		inx				inx 								; look at next, we know first is identifier already.
.d642	b642	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d645	b645	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d647	b647	f0 f8		beq $b641			beq 	_TKCheckLoop
.d649	b649	c9 30		cmp #$30			cmp	 	#"0"
.d64b	b64b	90 0c		bcc $b659			bcc 	_TKEndIdentifier
.d64d	b64d	c9 3a		cmp #$3a			cmp 	#"9"+1
.d64f	b64f	90 f0		bcc $b641			bcc 	_TKCheckLoop
.d651	b651	c9 41		cmp #$41			cmp	 	#"A"
.d653	b653	90 04		bcc $b659			bcc 	_TKEndIdentifier
.d655	b655	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d657	b657	90 e8		bcc $b641			bcc 	_TKCheckLoop
.d659	b659					_TKEndIdentifier:
.d659	b659	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d65c	b65c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d65e	b65e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d660	b660	f0 06		beq $b668			beq 	_TKHasTypeCharacter
.d662	b662	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d664	b664	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d666	b666	d0 07		bne $b66f			bne 	_TKNoTypeCharacter
.d668	b668					_TKHasTypeCharacter:
.d668	b668	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d66b	b66b	e8		inx				inx 								; consume the type character
.d66c	b66c	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d66f	b66f					_TKNoTypeCharacter:
.d66f	b66f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d671	b671	d0 09		bne $b67c			bne 	_TKNoArray
.d673	b673	e8		inx				inx 								; skip the (
.d674	b674	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d677	b677	09 04		ora #$04			ora 	#$04
.d679	b679	8d 04 04	sta $0404			sta 	identTypeByte
.d67c	b67c					_TKNoArray:
.d67c	b67c	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d67f	b67f	20 57 b7	jsr $b757			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d682	b682	a0 ae		ldy #$ae			ldy 	#(KeywordSet0) >> 8
.d684	b684	a9 2e		lda #$2e			lda 	#(KeywordSet0) & $FF
.d686	b686	20 46 b5	jsr $b546			jsr 	TOKSearchTable
.d689	b689	a2 00		ldx #$00			ldx 	#0
.d68b	b68b	b0 1f		bcs $b6ac			bcs 	_TKFoundToken
.d68d	b68d	a0 b0		ldy #$b0			ldy 	#(KeywordSet1) >> 8
.d68f	b68f	a9 a6		lda #$a6			lda 	#(KeywordSet1) & $FF
.d691	b691	20 46 b5	jsr $b546			jsr 	TOKSearchTable
.d694	b694	a2 81		ldx #$81			ldx 	#$81
.d696	b696	b0 14		bcs $b6ac			bcs 	_TKFoundToken
.d698	b698	a0 b1		ldy #$b1			ldy 	#(KeywordSet2) >> 8
.d69a	b69a	a9 bf		lda #$bf			lda 	#(KeywordSet2) & $FF
.d69c	b69c	20 46 b5	jsr $b546			jsr 	TOKSearchTable
.d69f	b69f	a2 82		ldx #$82			ldx 	#$82
.d6a1	b6a1	b0 09		bcs $b6ac			bcs 	_TKFoundToken
.d6a3	b6a3	20 e7 b7	jsr $b7e7			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d6a6	b6a6	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d6a9	b6a9	4c c4 b5	jmp $b5c4			jmp 	_TKTokeniseLoop 			; and go round again.
.d6ac	b6ac					_TKFoundToken:
.d6ac	b6ac	48		pha				pha 								; save token
.d6ad	b6ad	8a		txa				txa 								; shift in X, is there one ?
.d6ae	b6ae	f0 03		beq $b6b3			beq 	_TKNoTShift
.d6b0	b6b0	20 db b7	jsr $b7db			jsr 	TOKWriteByte 				; if so, write it out
.d6b3	b6b3					_TKNoTShift:
.d6b3	b6b3	68		pla				pla 								; restore and write token
.d6b4	b6b4	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d6b7	b6b7	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d6b9	b6b9	d0 0d		bne $b6c8			bne 	_TKNotRem 			 		; not shifted ?
.d6bb	b6bb	c9 d7		cmp #$d7			cmp 	#KWD_REM
.d6bd	b6bd	d0 09		bne $b6c8			bne 	_TKNotRem
.d6bf	b6bf	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d6c2	b6c2	20 ce b6	jsr $b6ce			jsr 	TOKCheckComment
.d6c5	b6c5	4c c4 b5	jmp $b5c4			jmp 	_TKTokeniseLoop
.d6c8	b6c8					_TKNotRem:
.d6c8	b6c8	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d6cb	b6cb	4c c4 b5	jmp $b5c4			jmp 	_TKTokeniseLoop 			; and go round again.
.d6ce	b6ce					TOKCheckComment:
.d6ce	b6ce	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d6d1	b6d1	e8		inx				inx
.d6d2	b6d2	c9 20		cmp #$20			cmp 	#' '
.d6d4	b6d4	f0 f8		beq $b6ce			beq 	TOKCheckComment
.d6d6	b6d6	ca		dex				dex 								; first non space character
.d6d7	b6d7	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d6d9	b6d9	f0 1f		beq $b6fa			beq 	_TOKCCExit 					; then we are okay
.d6db	b6db	c9 00		cmp #$00			cmp 	#0 							; EOL
.d6dd	b6dd	f0 1b		beq $b6fa			beq 	_TOKCCExit 					; then we are okay
.d6df	b6df	da		phx				phx
.d6e0	b6e0					_TOKCCLowerCase:
.d6e0	b6e0	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d6e3	b6e3	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d6e5	b6e5	90 09		bcc $b6f0			bcc 	_TOKKCNotUC
.d6e7	b6e7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6e9	b6e9	b0 05		bcs $b6f0			bcs 	_TOKKCNotUC
.d6eb	b6eb	49 20		eor #$20			eor 	#$20
.d6ed	b6ed	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d6f0	b6f0					_TOKKCNotUC:
.d6f0	b6f0	e8		inx				inx
.d6f1	b6f1	c9 00		cmp #$00			cmp 	#0
.d6f3	b6f3	d0 eb		bne $b6e0			bne 	_TOKCCLowerCase
.d6f5	b6f5	fa		plx				plx
.d6f6	b6f6	ca		dex				dex 								; tokenise string expects initial skip.
.d6f7	b6f7	20 fb b6	jsr $b6fb			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d6fa	b6fa					_TOKCCExit:
.d6fa	b6fa	60		rts				rts
.d6fb	b6fb					TOKTokenString:
.d6fb	b6fb	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d6fd	b6fd	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d700	b700	e8		inx				inx									; start of quoted string.
.d701	b701	da		phx				phx 								; push start of string on top
.d702	b702	ca		dex				dex 								; because we pre-increment
.d703	b703					_TSFindEnd:
.d703	b703	e8		inx				inx
.d704	b704	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d707	b707	f0 04		beq $b70d			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d709	b709	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d70b	b70b	d0 f6		bne $b703			bne 	_TSFindEnd
.d70d	b70d					_TSEndOfString:
.d70d	b70d	7a		ply				ply  								; so now Y is first character, X is character after end.
.d70e	b70e	48		pha				pha 								; save terminating character
.d70f	b70f	20 17 b7	jsr $b717			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d712	b712	68		pla				pla 								; terminating character
.d713	b713	f0 01		beq $b716			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d715	b715	e8		inx				inx
.d716	b716					_TSNotQuote:
.d716	b716	60		rts				rts
.d717	b717					TOKWriteBlockXY:
.d717	b717	86 36		stx $36				stx 	zTemp0 						; save end character
.d719	b719	98		tya				tya 								; use 2's complement to work out the byte size
.d71a	b71a	49 ff		eor #$ff			eor 	#$FF
.d71c	b71c	38		sec				sec
.d71d	b71d	65 36		adc $36				adc 	zTemp0
.d71f	b71f	1a		inc a				inc 	a 							; one extra for NULL
.d720	b720	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d723	b723					_TOBlockLoop:
.d723	b723	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d725	b725	f0 09		beq $b730			beq 	_TOBlockExit
.d727	b727	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d72a	b72a	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d72d	b72d	c8		iny				iny
.d72e	b72e	80 f3		bra $b723			bra 	_TOBlockLoop
.d730	b730					_TOBlockExit:
.d730	b730	a9 00		lda #$00			lda 	#0 							; add NULL.
.d732	b732	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d735	b735	60		rts				rts
.d736	b736					TOKHexConstant:
.d736	b736	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d738	b738	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d73b	b73b	e8		inx				inx									; start of quoted string.
.d73c	b73c	da		phx				phx 								; push start of constant on top
.d73d	b73d	ca		dex				dex
.d73e	b73e					_THFindLoop:
.d73e	b73e	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d73f	b73f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d742	b742	c9 30		cmp #$30			cmp 	#"0"
.d744	b744	90 0c		bcc $b752			bcc 	_THFoundEnd
.d746	b746	c9 3a		cmp #$3a			cmp 	#"9"+1
.d748	b748	90 f4		bcc $b73e			bcc 	_THFindLoop
.d74a	b74a	c9 41		cmp #$41			cmp 	#"A"
.d74c	b74c	90 04		bcc $b752			bcc 	_THFoundEnd
.d74e	b74e	c9 47		cmp #$47			cmp 	#"F"+1
.d750	b750	90 ec		bcc $b73e			bcc 	_THFindLoop
.d752	b752					_THFoundEnd:
.d752	b752	7a		ply				ply 								; restore start
.d753	b753	20 17 b7	jsr $b717			jsr 	TOKWriteBlockXY 			; output the block
.d756	b756	60		rts				rts
.d757	b757					TOKCalculateHash:
.d757	b757	da		phx				phx
.d758	b758	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d75b	b75b	a9 00		lda #$00			lda 	#0
.d75d	b75d					_TCHLoop:
.d75d	b75d	18		clc				clc
.d75e	b75e	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d761	b761	e8		inx				inx
.d762	b762	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d765	b765	d0 f6		bne $b75d			bne 	_TCHLoop
.d767	b767	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d76a	b76a	fa		plx				plx
.d76b	b76b	60		rts				rts
.d76c	b76c					LCLFixLineBufferCase:
.d76c	b76c	a2 00		ldx #$00			ldx 	#0
.d76e	b76e					_FLBCLoop:
.d76e	b76e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d771	b771	f0 22		beq $b795			beq 	_FLBCExit 					; end of string.
.d773	b773	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d775	b775	f0 11		beq $b788			beq 	_FLBCInQuotes
.d777	b777	e8		inx				inx
.d778	b778	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d77a	b77a	90 f2		bcc $b76e			bcc 	_FLBCLoop
.d77c	b77c	c9 7b		cmp #$7b			cmp 	#'z'+1
.d77e	b77e	b0 ee		bcs $b76e			bcs 	_FLBCLoop
.d780	b780	38		sec				sec 								; make U/C
.d781	b781	e9 20		sbc #$20			sbc 	#32
.d783	b783	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d786	b786	80 e6		bra $b76e			bra 	_FLBCLoop
.d788	b788					_FLBCInQuotes:
.d788	b788	e8		inx				inx 								; advance
.d789	b789	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d78c	b78c	f0 07		beq $b795			beq 	_FLBCExit 					; exit on EOS
.d78e	b78e	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d790	b790	d0 f6		bne $b788			bne 	_FLBCInQuotes
.d792	b792	e8		inx				inx 								; skip over it
.d793	b793	80 d9		bra $b76e			bra 	_FLBCLoop
.d795	b795					_FLBCExit:
.d795	b795	60		rts				rts
.d796	b796					TOKExtractLineNumber:
.d796	b796	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d799	b799	48		pha				pha
.d79a	b79a	ad 27 04	lda $0427			lda 	tokenLineNumber
.d79d	b79d	48		pha				pha
.d79e	b79e	20 d4 b7	jsr $b7d4			jsr 	_LCLNTimes2 				; line # x 2
.d7a1	b7a1	20 d4 b7	jsr $b7d4			jsr 	_LCLNTimes2 				; line # x 4
.d7a4	b7a4	18		clc				clc 								; add stacked value
.d7a5	b7a5	68		pla				pla
.d7a6	b7a6	6d 27 04	adc $0427			adc 	tokenLineNumber
.d7a9	b7a9	8d 27 04	sta $0427			sta 	tokenLineNumber
.d7ac	b7ac	68		pla				pla
.d7ad	b7ad	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d7b0	b7b0	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d7b3	b7b3	20 d4 b7	jsr $b7d4			jsr 	_LCLNTimes2 				; line # x 10
.d7b6	b7b6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d7b9	b7b9	e8		inx				inx
.d7ba	b7ba	29 0f		and #$0f			and 	#15 						; add to line #
.d7bc	b7bc	18		clc				clc
.d7bd	b7bd	6d 27 04	adc $0427			adc 	tokenLineNumber
.d7c0	b7c0	8d 27 04	sta $0427			sta 	tokenLineNumber
.d7c3	b7c3	90 03		bcc $b7c8			bcc 	_TLENNoCarry
.d7c5	b7c5	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d7c8	b7c8					_TLENNoCarry:
.d7c8	b7c8	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d7cb	b7cb	c9 30		cmp #$30			cmp 	#'0'
.d7cd	b7cd	90 04		bcc $b7d3			bcc 	_TLENExit
.d7cf	b7cf	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7d1	b7d1	90 c3		bcc $b796			bcc 	TOKExtractLineNumber
.d7d3	b7d3					_TLENExit:
.d7d3	b7d3	60		rts				rts
.d7d4	b7d4					_LCLNTimes2:
.d7d4	b7d4	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d7d7	b7d7	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d7da	b7da	60		rts				rts
.d7db	b7db					TOKWriteByte:
.d7db	b7db	da		phx				phx
.d7dc	b7dc	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d7df	b7df	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d7e2	b7e2	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d7e5	b7e5	fa		plx				plx
.d7e6	b7e6	60		rts				rts
.d7e7	b7e7					TOKCheckCreateVariableRecord:
.d7e7	b7e7	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d7e9	b7e9	85 36		sta $36				sta 	0+zTemp0
.d7eb	b7eb	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d7ed	b7ed	85 37		sta $37				sta 	1+zTemp0
.d7ef	b7ef					_CCVSearch:
.d7ef	b7ef	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d7f1	b7f1	f0 2c		beq $b81f			beq 	_CCVFail
.d7f3	b7f3	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d7f5	b7f5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d7f7	b7f7	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d7fa	b7fa	d0 16		bne $b812			bne 	_CCVNext
.d7fc	b7fc	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d7fe	b7fe	ae 00 04	ldx $0400			ldx 	identStart
.d801	b801					_CCVCompare:
.d801	b801	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d804	b804	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d806	b806	e8		inx				inx 								; advance pointers
.d807	b807	c8		iny				iny
.d808	b808	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d809	b809	d0 07		bne $b812			bne 	_CCVNext  					; didn't match go to next.
.d80b	b80b	90 f4		bcc $b801			bcc 	_CCVCompare 				; not finished yet.
.d80d	b80d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d810	b810	f0 41		beq $b853			beq 	_CCVFound 					; yes, we were successful
.d812	b812					_CCVNext:
.d812	b812	18		clc				clc 								; go to next record.
.d813	b813	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d815	b815	65 36		adc $36				adc 	zTemp0
.d817	b817	85 36		sta $36				sta 	zTemp0
.d819	b819	90 d4		bcc $b7ef			bcc 	_CCVSearch
.d81b	b81b	e6 37		inc $37				inc 	zTemp0+1
.d81d	b81d	80 d0		bra $b7ef			bra 	_CCVSearch
.d81f	b81f					_CCVFail:
.d81f	b81f	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d821	b821	ad 03 04	lda $0403			lda 	identHash
.d824	b824	91 36		sta ($36),y			sta 	(zTemp0),y
.d826	b826	c8		iny				iny 								; offset 2 is the type byte
.d827	b827	ad 04 04	lda $0404			lda 	identTypeByte
.d82a	b82a	91 36		sta ($36),y			sta 	(zTemp0),y
.d82c	b82c	c8		iny				iny
.d82d	b82d					_CCVData:
.d82d	b82d	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d82f	b82f	91 36		sta ($36),y			sta 	(zTemp0),y
.d831	b831	c8		iny				iny
.d832	b832	c0 08		cpy #$08			cpy 	#8
.d834	b834	90 f7		bcc $b82d			bcc 	_CCVData
.d836	b836	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d839	b839					_CCVCopyName:
.d839	b839	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d83c	b83c	91 36		sta ($36),y			sta 	(zTemp0),y
.d83e	b83e	e8		inx				inx
.d83f	b83f	c8		iny				iny
.d840	b840	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d843	b843	d0 f4		bne $b839			bne 	_CCVCopyName
.d845	b845	98		tya				tya 								; patch offset
.d846	b846	92 36		sta ($36)			sta 	(zTemp0)
.d848	b848	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d84a	b84a	91 36		sta ($36),y			sta 	(zTemp0),y
.d84c	b84c	88		dey				dey
.d84d	b84d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d84f	b84f	09 80		ora #$80			ora 	#$80
.d851	b851	91 36		sta ($36),y			sta 	(zTemp0),y
.d853	b853					_CCVFound:
.d853	b853	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d855	b855	38		sec				sec
.d856	b856	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d858	b858	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d85a	b85a	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d85d	b85d	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d85f	b85f	20 db b7	jsr $b7db			jsr 	TOKWriteByte
.d862	b862	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d863	b863					SNDCheckChannel:
.d863	b863	aa		tax				tax
.d864	b864	bd 9a 09	lda $099a,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d867	b867	d0 38		bne $b8a1			bne 	_SNDCCExit
.d869	b869	da		phx				phx 								; save current channel
.d86a	b86a	8a		txa				txa 								; put in A
.d86b	b86b	20 e7 b8	jsr $b8e7			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d86e	b86e	68		pla				pla 								; channel # in A
.d86f	b86f	90 30		bcc $b8a1			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d871	b871	a8		tay				tay 								; Y is the channel #
.d872	b872	bd 8f 08	lda $088f,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d875	b875	99 8e 09	sta $098e,y			sta 	SNDPitchLow,y
.d878	b878	bd 90 08	lda $0890,x			lda 	SNDQueue+2,x
.d87b	b87b	99 92 09	sta $0992,y			sta 	SNDPitchHigh,y
.d87e	b87e	bd 91 08	lda $0891,x			lda 	SNDQueue+3,x
.d881	b881	99 96 09	sta $0996,y			sta 	SNDVolume,y
.d884	b884	bd 92 08	lda $0892,x			lda 	SNDQueue+4,x
.d887	b887	99 9a 09	sta $099a,y			sta 	SNDTimeLeft,y
.d88a	b88a	bd 93 08	lda $0893,x			lda 	SNDQueue+5,x
.d88d	b88d	99 9e 09	sta $099e,y			sta 	SNDAdjustLow,y
.d890	b890	bd 94 08	lda $0894,x			lda 	SNDQueue+6,x
.d893	b893	99 a2 09	sta $09a2,y			sta 	SNDAdjustHigh,y
.d896	b896	5a		phy				phy 								; save channel #
.d897	b897	20 01 b9	jsr $b901			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d89a	b89a	ce 8d 08	dec $088d			dec 	SNDLength 					; reduce the queue length.
.d89d	b89d	68		pla				pla
.d89e	b89e	20 a2 b8	jsr $b8a2			jsr 	SNDUpdateNote 				; update channel A
.d8a1	b8a1					_SNDCCExit:
.d8a1	b8a1	60		rts				rts
.d8a2	b8a2					SNDUpdateNote:
.d8a2	b8a2	aa		tax				tax 								; so we can access records
.d8a3	b8a3	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d8a4	b8a4	0a		asl a				asl 	a
.d8a5	b8a5	0a		asl a				asl 	a
.d8a6	b8a6	0a		asl a				asl 	a
.d8a7	b8a7	0a		asl a				asl 	a
.d8a8	b8a8	8d 8c 08	sta $088c			sta 	SNDChannelBits
.d8ab	b8ab	bd 9a 09	lda $099a,x			lda 	SNDTimeLeft,x 				; are we silent
.d8ae	b8ae	f0 2e		beq $b8de			beq 	_SNDUNIsSilent
.d8b0	b8b0	ad 8c 08	lda $088c			lda 	SNDChannelBits 				; push channel bits on stack
.d8b3	b8b3	48		pha				pha
.d8b4	b8b4	bd 8e 09	lda $098e,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d8b7	b8b7	29 0f		and #$0f			and 	#$0F
.d8b9	b8b9	0d 8c 08	ora $088c			ora 	SNDChannelBits 				; set channel bits
.d8bc	b8bc	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d8be	b8be	20 4b b9	jsr $b94b			jsr 	SNDWritePorts
.d8c1	b8c1	bd 92 09	lda $0992,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d8c4	b8c4	8d 8c 08	sta $088c			sta 	SNDChannelBits
.d8c7	b8c7	bd 8e 09	lda $098e,x			lda 	SNDPitchLow,x
.d8ca	b8ca	4e 8c 08	lsr $088c			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d8cd	b8cd	6a		ror a				ror 	a
.d8ce	b8ce	4e 8c 08	lsr $088c			lsr 	SNDChannelBits
.d8d1	b8d1	6a		ror a				ror 	a
.d8d2	b8d2	4a		lsr a				lsr 	a 							; put in bits 0-5
.d8d3	b8d3	4a		lsr a				lsr 	a
.d8d4	b8d4	20 4b b9	jsr $b94b			jsr 	SNDWritePorts 				; write as rest of pitch register
.d8d7	b8d7	68		pla				pla
.d8d8	b8d8	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d8da	b8da	20 4b b9	jsr $b94b			jsr 	SNDWritePorts
.d8dd	b8dd	60		rts				rts
.d8de	b8de					_SNDUNIsSilent:
.d8de	b8de	ad 8c 08	lda $088c			lda 	SNDChannelBits 				; channel bits
.d8e1	b8e1	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d8e3	b8e3	20 4b b9	jsr $b94b			jsr 	SNDWritePorts 				; write to the ports
.d8e6	b8e6	60		rts				rts
.d8e7	b8e7					SNDFindNextNoteForA:
.d8e7	b8e7	ac 8d 08	ldy $088d			ldy 	SNDLength 					; queue size into Y
.d8ea	b8ea	f0 13		beq $b8ff			beq 	_SNDFNNFail 				; queue empty.
.d8ec	b8ec	a2 00		ldx #$00			ldx 	#0
.d8ee	b8ee					_SNDFNNSearch:
.d8ee	b8ee	dd 8e 08	cmp $088e,x			cmp 	SNDQueue,x 					; does it match the channel
.d8f1	b8f1	38		sec				sec
.d8f2	b8f2	f0 0c		beq $b900			beq 	_SNDFNNExit 				; if so exit with CS.
.d8f4	b8f4	e8		inx				inx 								; next queue slot.
.d8f5	b8f5	e8		inx				inx
.d8f6	b8f6	e8		inx				inx
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	e8		inx				inx
.d8f9	b8f9	e8		inx				inx
.d8fa	b8fa	e8		inx				inx
.d8fb	b8fb	e8		inx				inx
.d8fc	b8fc	88		dey				dey 								; done the whole queue
.d8fd	b8fd	d0 ef		bne $b8ee			bne 	_SNDFNNSearch 				; no, go back.
.d8ff	b8ff					_SNDFNNFail:
.d8ff	b8ff	18		clc				clc
.d900	b900					_SNDFNNExit:
.d900	b900	60		rts				rts
.d901	b901					SNDDeleteXFromQueue:
.d901	b901	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d903	b903	f0 09		beq $b90e			beq 	_SNDDXExit
.d905	b905	bd 96 08	lda $0896,x			lda 	SNDQueue+8,x
.d908	b908	9d 8e 08	sta $088e,x			sta 	SNDQueue,x
.d90b	b90b	e8		inx				inx
.d90c	b90c	80 f3		bra $b901			bra 	SNDDeleteXFromQueue
.d90e	b90e					_SNDDXExit:
.d90e	b90e	60		rts				rts
.088c						SNDChannelBits:
>088c								.fill 	1
.d90f	b90f					SNDQueueRequest:
.d90f	b90f	86 36		stx $36				stx 	zTemp0						; save queue address
.d911	b911	84 37		sty $37				sty 	zTemp0+1
.d913	b913	ae 8d 08	ldx $088d			ldx 	SNDLength 					; queue is full, can't take any more.
.d916	b916	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d918	b918	f0 21		beq $b93b			beq 	_SNDQRExit
.d91a	b91a	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d91c	b91c	48		pha				pha
.d91d	b91d	8a		txa				txa  								; get offset in queue buffer/
.d91e	b91e	0a		asl a				asl 	a
.d91f	b91f	0a		asl a				asl 	a
.d920	b920	0a		asl a				asl 	a
.d921	b921	aa		tax				tax
.d922	b922	68		pla				pla 								; get back and push again
.d923	b923	48		pha				pha
.d924	b924	9d 8e 08	sta $088e,x			sta 	SNDQueue+0,x 				; save the channel #
.d927	b927	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d929	b929					_SNDQCopy:
.d929	b929	b1 36		lda ($36),y			lda 	(zTemp0),y
.d92b	b92b	e8		inx				inx
.d92c	b92c	c8		iny				iny
.d92d	b92d	9d 8e 08	sta $088e,x			sta 	SNDQueue,x
.d930	b930	c0 06		cpy #$06			cpy 	#6
.d932	b932	d0 f5		bne $b929			bne 	_SNDQCopy
.d934	b934	ee 8d 08	inc $088d			inc 	SNDLength 					; bump queue length.
.d937	b937	68		pla				pla 								; get channel # back
.d938	b938	20 63 b8	jsr $b863			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d93b	b93b					_SNDQRExit:
.d93b	b93b	60		rts				rts
.d93c	b93c					SNDSilenceChannel:
.d93c	b93c	aa		tax				tax 								; zero time left.
.d93d	b93d	9e 9a 09	stz $099a,x			stz 	SNDTimeLeft,x
.d940	b940	0a		asl a				asl 	a 							; shift into position
.d941	b941	0a		asl a				asl 	a
.d942	b942	0a		asl a				asl 	a
.d943	b943	0a		asl a				asl 	a
.d944	b944	0a		asl a				asl 	a
.d945	b945	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d947	b947	20 4b b9	jsr $b94b			jsr 	SNDWritePorts
.d94a	b94a	60		rts				rts
.d94b	b94b					SNDWritePorts:
.d94b	b94b	da		phx				phx 								; save X
.d94c	b94c	a6 01		ldx $01				ldx 	1 							; save I/O status
.d94e	b94e	64 01		stz $01				stz 	1 							; access I/O page 0
.d950	b950	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d953	b953	8d 10 d6	sta $d610			sta 	$D610
.d956	b956	86 01		stx $01				stx 	1 							; restore I/O
.d958	b958	fa		plx				plx 								; restore X
.d959	b959	60		rts				rts
.d95a	b95a					Export_SNDCommand:
.d95a	b95a	da		phx				phx 								; save XY
.d95b	b95b	5a		phy				phy
.d95c	b95c	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d95e	b95e	f0 1d		beq $b97d			beq 	_SNDInitialise
.d960	b960	90 28		bcc $b98a			bcc 	_SNDExit
.d962	b962	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d964	b964	f0 17		beq $b97d			beq 	_SNDSilence
.d966	b966	b0 22		bcs $b98a			bcs 	_SNDExit
.d968	b968	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d96a	b96a	b0 09		bcs $b975			bcs 	_SNDQueryPlay
.d96c	b96c	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d96e	b96e	b0 1a		bcs $b98a			bcs 	_SNDExit
.d970	b970	20 0f b9	jsr $b90f			jsr 	SNDQueueRequest
.d973	b973	80 15		bra $b98a			bra 	_SNDExit
.d975	b975					_SNDQueryPlay:
.d975	b975	29 03		and #$03			and 	#3 							; get channel #
.d977	b977	aa		tax				tax
.d978	b978	bd 9a 09	lda $099a,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d97b	b97b	80 0d		bra $b98a			bra 	_SNDExit
.d97d	b97d					_SNDInitialise:
.d97d	b97d					_SNDSilence:
.d97d	b97d	9c 8d 08	stz $088d			stz 	SNDLength 					; empty the queue.
.d980	b980	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d982	b982					_SNDSilenceLoop:
.d982	b982	48		pha				pha
.d983	b983	20 3c b9	jsr $b93c			jsr 	SNDSilenceChannel
.d986	b986	68		pla				pla
.d987	b987	3a		dec a				dec 	a
.d988	b988	10 f8		bpl $b982			bpl 	_SNDSilenceLoop
.d98a	b98a					_SNDExit:
.d98a	b98a	7a		ply				ply
.d98b	b98b	fa		plx				plx
.d98c	b98c	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.088d						SNDLength:
>088d								.fill 	1
.088e						SNDQueue:
>088e								.fill 	SNDQueueSize * 8
.098e						SNDPitchLow:
>098e								.fill 	4
.0992						SNDPitchHigh:
>0992								.fill 	4
.0996						SNDVolume:
>0996								.fill 	4
.099a						SNDTimeLeft:
>099a								.fill 	4
.099e						SNDAdjustLow:
>099e								.fill 	4
.09a2						SNDAdjustHigh:
>09a2								.fill 	4
.d98d	b98d					Export_SNDUpdate:
.d98d	b98d					PagedSNDUpdate:
.d98d	b98d	ad 9a 09	lda $099a			lda 	SNDTimeLeft+0 				; look at time remaining
.d990	b990	f0 05		beq $b997			beq 	_SNDUNot0 					; not playing
.d992	b992	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d994	b994	20 b6 b9	jsr $b9b6			jsr 	SNDUpdateChannel 			; update it.
.d997	b997					_SNDUNot0:
.d997	b997	ad 9b 09	lda $099b			lda 	SNDTimeLeft+1
.d99a	b99a	f0 05		beq $b9a1			beq 	_SNDUNot1
.d99c	b99c	a2 01		ldx #$01			ldx 	#1
.d99e	b99e	20 b6 b9	jsr $b9b6			jsr 	SNDUpdateChannel
.d9a1	b9a1					_SNDUNot1:
.d9a1	b9a1	ad 9c 09	lda $099c			lda 	SNDTimeLeft+2
.d9a4	b9a4	f0 05		beq $b9ab			beq 	_SNDUNot2
.d9a6	b9a6	a2 02		ldx #$02			ldx 	#2
.d9a8	b9a8	20 b6 b9	jsr $b9b6			jsr 	SNDUpdateChannel
.d9ab	b9ab					_SNDUNot2:
.d9ab	b9ab	ad 9d 09	lda $099d			lda 	SNDTimeLeft+3
.d9ae	b9ae	f0 05		beq $b9b5			beq 	_SNDUNot3
.d9b0	b9b0	a2 03		ldx #$03			ldx 	#3
.d9b2	b9b2	20 b6 b9	jsr $b9b6			jsr 	SNDUpdateChannel
.d9b5	b9b5					_SNDUNot3:
.d9b5	b9b5	60		rts				rts
.d9b6	b9b6					SNDUpdateChannel:
.d9b6	b9b6	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d9b8	b9b8	f0 2c		beq $b9e6			beq 	_SNDUCExit
.d9ba	b9ba	3a		dec a				dec 	a 							; decrement and update timer
.d9bb	b9bb	9d 9a 09	sta $099a,x			sta 	SNDTimeLeft,x
.d9be	b9be	f0 1d		beq $b9dd			beq 	_SNDUCUpdate 				; if zero, silence channel
.d9c0	b9c0	bd 9e 09	lda $099e,x			lda 	SNDAdjustLow,x 				; adjust ?
.d9c3	b9c3	1d a2 09	ora $09a2,x			ora 	SNDAdjustHigh,x
.d9c6	b9c6	f0 1e		beq $b9e6			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d9c8	b9c8	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d9c9	b9c9	bd 8e 09	lda $098e,x			lda 	SNDPitchLow,x
.d9cc	b9cc	7d 9e 09	adc $099e,x			adc 	SNDAdjustLow,x
.d9cf	b9cf	9d 8e 09	sta $098e,x			sta 	SNDPitchLow,x
.d9d2	b9d2	bd 92 09	lda $0992,x			lda 	SNDPitchHigh,x
.d9d5	b9d5	7d a2 09	adc $09a2,x			adc 	SNDAdjustHigh,x
.d9d8	b9d8	29 03		and #$03			and 	#3
.d9da	b9da	9d 92 09	sta $0992,x			sta 	SNDPitchHigh,x
.d9dd	b9dd					_SNDUCUpdate:
.d9dd	b9dd	8a		txa				txa 								; which channel.
.d9de	b9de	48		pha				pha
.d9df	b9df	20 a2 b8	jsr $b8a2			jsr 	SNDUpdateNote 				; update the current note
.d9e2	b9e2	68		pla				pla
.d9e3	b9e3	20 63 b8	jsr $b863			jsr 	SNDCheckChannel 			; more to do ?
.d9e6	b9e6					_SNDUCExit:
.d9e6	b9e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff f2 58 f2 ff d8 07 d8			.byte	255,242,88,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,255,242,8,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,15,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,120,120,255,242,7,242,120,120,255,242,15,242,120,120,242,242,120,120,255,242,4,242,120,120,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,2,242,210,210,255,242,18,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,3,242,210,210,255,242,17,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,3,242,255,210,4,210,209,210,255,242,2,242,210,210,255,242,4,242,210,210,255,242,87,242,255,114,80,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e018	a018	ff f2 02 f2 ff d8 06 d8 ff f2 09 f2 d2 d2 f2 f2
>e028	a028	ff d2 07 d2 ff f2 11 f2 68 68 ff f2 07 f2 68 68
>e038	a038	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e048	a048	ff f2 04 f2 68 68 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e058	a058	ff f2 04 f2 d2 d2 ff f2 10 f2 e8 e8 ff f2 0e f2
>e068	a068	e8 e8 f2 f2 e8 e8 ff f2 08 f2 e8 e8 ff f2 0f f2
>e078	a078	d2 d2 f2 f2 d2 d2 ff f2 04 f2 d2 d2 ff f2 10 f2
>e088	a088	ff 38 05 38 ff f2 04 f2 ff 38 06 38 ff f2 02 f2
>e098	a098	ff 38 07 38 ff f2 02 f2 ff 38 07 38 ff f2 09 f2
>e0a8	a0a8	d2 d2 f2 f2 ff d2 07 d2 ff f2 11 f2 78 78 ff f2
>e0b8	a0b8	07 f2 78 78 ff f2 0f f2 78 78 f2 f2 78 78 ff f2
>e0c8	a0c8	04 f2 78 78 f2 f2 d2 d2 ff f2 04 f2 d2 d2 f2 f2
>e0d8	a0d8	d2 d2 ff f2 02 f2 d2 d2 ff f2 12 f2 a8 a8 ff f2
>e0e8	a0e8	07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2 04 f2 a8 a8
>e0f8	a0f8	f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2 d2 d2 ff f2
>e108	a108	04 f2 d2 d2 f2 f2 d2 d2 ff f2 03 f2 d2 d2 ff f2
>e118	a118	11 f2 48 48 ff f2 07 f2 ff 48 08 48 ff f2 02 f2
>e128	a128	ff 48 06 48 ff f2 03 f2 ff 48 06 48 ff f2 03 f2
>e138	a138	ff d2 04 d2 d1 d2 ff f2 02 f2 d2 d2 ff f2 04 f2
>e148	a148	d2 d2 ff f2 57 f2 ff 72 50 72 ff e2 1b e2 72 ff
>e158	a158	92 03 92 91 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	1b e2 72 ff 92 03 92 91 ff 72 12 72 ff c2 18 c2
>e178	a178	72 72 ff e2 1b e2 72 ff 92 03 92 91 ff 72 12 72
>e188	a188	ff c2 18 c2 ff 72 50 72 ff 00
.e192	a192					Header_jchars:
>e192	a192	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e19a	a19a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1aa	a1aa	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1ba	a1ba	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ca	a1ca	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1da	a1da	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e1ea	a1ea	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e1fa	a1fa	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e20a	a20a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e21a	a21a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e22a	a22a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e23a	a23a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e24a	a24a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e25a	a25a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e26a	a26a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e27a	a27a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e28a	a28a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e29a	a29a	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2aa	a2aa	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2ba	a2ba	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ca	a2ca	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2da	a2da	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2ea	a2ea	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e2fa	a2fa	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e30a	a30a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e31a	a31a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e32a	a32a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e33a	a33a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e34a	a34a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e35a	a35a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e36a	a36a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e37a	a37a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e38a	a38a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e39a	a39a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3aa	a3aa	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3ba	a3ba	9d ff 96 18 96 a3 ff 00
.e3c2	a3c2					Header_kattrs:
>e3c2	a3c2	ff f2 5e f2 ff d8 07 d8			.byte	255,242,94,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,2,242,210,210,255,242,3,242,210,210,255,242,28,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,242,242,210,210,255,242,2,242,210,210,255,242,29,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,8,242,210,210,242,242,210,210,255,242,30,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,2,242,255,210,4,210,255,242,31,242,120,120,255,242,7,242,120,120,255,242,15,242,113,113,242,242,113,113,255,242,4,242,113,113,242,242,210,210,242,242,210,210,255,242,30,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,2,242,210,210,255,242,29,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,2,242,210,210,255,242,3,242,210,210,255,242,93,242,255,114,80,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3ca	a3ca	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e3da	a3da	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 d2 d2 ff f2
>e3ea	a3ea	03 f2 d2 d2 ff f2 1c f2 68 68 ff f2 07 f2 68 68
>e3fa	a3fa	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e40a	a40a	ff f2 04 f2 68 68 f2 f2 d2 d2 ff f2 02 f2 d2 d2
>e41a	a41a	ff f2 1d f2 e8 e8 ff f2 0e f2 e8 e8 f2 f2 e8 e8
>e42a	a42a	ff f2 08 f2 e8 e8 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e43a	a43a	ff f2 1e f2 ff 38 05 38 ff f2 04 f2 ff 38 06 38
>e44a	a44a	ff f2 02 f2 ff 38 07 38 ff f2 02 f2 ff 38 07 38
>e45a	a45a	ff f2 02 f2 ff d2 04 d2 ff f2 1f f2 78 78 ff f2
>e46a	a46a	07 f2 78 78 ff f2 0f f2 71 71 f2 f2 71 71 ff f2
>e47a	a47a	04 f2 71 71 f2 f2 d2 d2 f2 f2 d2 d2 ff f2 1e f2
>e48a	a48a	a8 a8 ff f2 07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2
>e49a	a49a	04 f2 a8 a8 f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2
>e4aa	a4aa	d2 d2 ff f2 02 f2 d2 d2 ff f2 1d f2 48 48 ff f2
>e4ba	a4ba	07 f2 ff 48 08 48 ff f2 02 f2 ff 48 06 48 ff f2
>e4ca	a4ca	03 f2 ff 48 06 48 ff f2 02 f2 d2 d2 ff f2 03 f2
>e4da	a4da	d2 d2 ff f2 5d f2 ff 72 50 72 ff e2 1b e2 72 ff
>e4ea	a4ea	92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2 1b
>e4fa	a4fa	e2 72 ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72
>e50a	a50a	ff e2 1b e2 72 ff 92 04 92 ff 72 12 72 ff c2 18
>e51a	a51a	c2 ff 72 50 72 ff 00
.e521	a521					Header_kchars:
>e521	a521	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e529	a529	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e539	a539	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e549	a549	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e559	a559	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e569	a569	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e579	a579	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e589	a589	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e599	a599	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e5a9	a5a9	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e5b9	a5b9	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e5c9	a5c9	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e5d9	a5d9	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e5e9	a5e9	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e5f9	a5f9	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e609	a609	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e619	a619	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e629	a629	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e639	a639	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e649	a649	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e659	a659	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e669	a669	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e679	a679	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e689	a689	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e699	a699	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e6a9	a6a9	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e6b9	a6b9	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e6c9	a6c9	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e6d9	a6d9	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e6e9	a6e9	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e6f9	a6f9	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e709	a709	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e719	a719	16 96 9d ff 96 18 96 bf ff 00
.e723	a723					Header_Palette:
>e723	a723	00 00 00 00				.dword $000000
>e727	a727	66 66 66 00				.dword $666666
>e72b	a72b	aa 00 00 00				.dword $0000aa
>e72f	a72f	00 aa 00 00				.dword $00aa00
>e733	a733	ea 41 c0 00				.dword $c041ea
>e737	a737	00 48 87 00				.dword $874800
>e73b	a73b	00 9c ff 00				.dword $ff9c00
>e73f	a73f	ff db 57 00				.dword $57dbff
>e743	a743	28 3f 3f 00				.dword $3f3f28
>e747	a747	8a aa aa 00				.dword $aaaa8a
>e74b	a74b	ff 55 55 00				.dword $5555ff
>e74f	a74f	55 ff 55 00				.dword $55ff55
>e753	a753	ed 8d ff 00				.dword $ff8ded
>e757	a757	00 00 ff 00				.dword $ff0000
>e75b	a75b	55 ff ff 00				.dword $ffff55
>e75f	a75f	ff ff ff 00				.dword $ffffff
>e763	a763	ff ff ff 00				.dword $ffffff
>e767	a767	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
