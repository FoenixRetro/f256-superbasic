
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 14:37:58 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 c9 81	jsr $81c9			jsr 	NewCommand 					; erase current program
.8006	20 7b 8d	jsr $8d7b			jsr 	BackloadProgram
.8009	4c 37 82	jmp $8237			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 ba 98	jsr $98ba			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	3a 84					.word	ShiftLeft                        ; $00 <<
>8016	34 83					.word	BinaryCompareLessEqual           ; $01 <=
>8018	2a 83					.word	BinaryCompareNotEqual            ; $02 <>
>801a	21 97					.word	SyntaxError                      ; $03 !!3
>801c	21 97					.word	SyntaxError                      ; $04 ><
>801e	3e 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	3d 84					.word	ShiftRight                       ; $06 >>
>8022	21 97					.word	SyntaxError                      ; $07 !!7
>8024	21 97					.word	SyntaxError                      ; $08 !!8
>8026	21 97					.word	SyntaxError                      ; $09 !!9
>8028	21 97					.word	SyntaxError                      ; $0a !!10
>802a	21 97					.word	SyntaxError                      ; $0b !!11
>802c	21 97					.word	SyntaxError                      ; $0c !!12
>802e	21 97					.word	SyntaxError                      ; $0d !!13
>8030	21 97					.word	SyntaxError                      ; $0e !!14
>8032	21 97					.word	SyntaxError                      ; $0f !!15
>8034	21 97					.word	SyntaxError                      ; $10 @
>8036	21 97					.word	SyntaxError                      ; $11 !!17
>8038	21 97					.word	SyntaxError                      ; $12 !!18
>803a	21 97					.word	SyntaxError                      ; $13 [
>803c	81 92					.word	IntegerDivide                    ; $14 \
>803e	21 97					.word	SyntaxError                      ; $15 ]
>8040	c3 85					.word	EorInteger                       ; $16 ^
>8042	21 97					.word	SyntaxError                      ; $17 _
>8044	21 97					.word	SyntaxError                      ; $18 `
>8046	21 97					.word	SyntaxError                      ; $19 !!25
>8048	21 97					.word	SyntaxError                      ; $1a !!26
>804a	21 97					.word	SyntaxError                      ; $1b {
>804c	7d 85					.word	OraInteger                       ; $1c |
>804e	21 97					.word	SyntaxError                      ; $1d }
>8050	21 97					.word	SyntaxError                      ; $1e ~
>8052	21 97					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	21 97					.word	SyntaxError                      ; $20
>8056	09 86					.word	WordIndirect                     ; $21 !
>8058	21 97					.word	SyntaxError                      ; $22 "
>805a	21 97					.word	SyntaxError                      ; $23 #
>805c	21 97					.word	SyntaxError                      ; $24 $
>805e	ce 92					.word	IntegerModulus                   ; $25 %
>8060	37 85					.word	AndInteger                       ; $26 &
>8062	21 97					.word	SyntaxError                      ; $27 '
>8064	21 97					.word	SyntaxError                      ; $28 (
>8066	21 97					.word	SyntaxError                      ; $29 )
>8068	43 93					.word	MulInteger                       ; $2a *
>806a	d1 84					.word	AddInteger                       ; $2b +
>806c	21 97					.word	SyntaxError                      ; $2c ,
>806e	0c 85					.word	SubInteger                       ; $2d -
>8070	21 97					.word	SyntaxError                      ; $2e .
>8072	da 94					.word	FDivideCommand                   ; $2f /
>8074	21 97					.word	SyntaxError                      ; $30 0
>8076	21 97					.word	SyntaxError                      ; $31 1
>8078	21 97					.word	SyntaxError                      ; $32 2
>807a	21 97					.word	SyntaxError                      ; $33 3
>807c	21 97					.word	SyntaxError                      ; $34 4
>807e	21 97					.word	SyntaxError                      ; $35 5
>8080	21 97					.word	SyntaxError                      ; $36 6
>8082	21 97					.word	SyntaxError                      ; $37 7
>8084	21 97					.word	SyntaxError                      ; $38 8
>8086	21 97					.word	SyntaxError                      ; $39 9
>8088	21 97					.word	SyntaxError                      ; $3a :
>808a	21 97					.word	SyntaxError                      ; $3b ;
>808c	16 83					.word	BinaryCompareLess                ; $3c <
>808e	0c 83					.word	BinaryCompareEqual               ; $3d =
>8090	20 83					.word	BinaryCompareGreater             ; $3e >
>8092	30 86					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	82 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	8f 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	21 97					.word	SyntaxError                      ; $82 !2:SH2
>809a	20 96					.word	AbsUnary                         ; $83 ABS(
>809c	73 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	30 96					.word	AscUnary                         ; $85 ASC(
>80a0	10 8b					.word	ChrUnary                         ; $86 CHR$(
>80a2	08 83					.word	UnaryFalse                       ; $87 FALSE
>80a4	3d 96					.word	FracUnary                        ; $88 FRAC(
>80a6	53 96					.word	IntUnary                         ; $89 INT(
>80a8	a9 96					.word	IsValUnary                       ; $8a ISVAL(
>80aa	ea 8b					.word	Unary_Left                       ; $8b LEFT$(
>80ac	65 96					.word	LenUnary                         ; $8c LEN(
>80ae	14 8c					.word	Unary_Mid                        ; $8d MID$(
>80b0	ad 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	fa 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	c3 8a					.word	Unary_Rnd                        ; $90 RND(
>80b6	7f 96					.word	SgnUnary                         ; $91 SGN(
>80b8	22 8b					.word	SpcUnary                         ; $92 SPC(
>80ba	3d 8b					.word	Unary_Str                        ; $93 STR$(
>80bc	fc 82					.word	UnaryTrue                        ; $94 TRUE
>80be	9f 96					.word	ValUnary                         ; $95 VAL(
>80c0	21 97					.word	SyntaxError                      ; $96 FOR
>80c2	75 81					.word	IfCommand                        ; $97 IF
>80c4	21 97					.word	SyntaxError                      ; $98 PROC
>80c6	21 97					.word	SyntaxError                      ; $99 REPEAT
>80c8	21 97					.word	SyntaxError                      ; $9a WHILE
>80ca	21 97					.word	SyntaxError                      ; $9b ENDIF
>80cc	21 97					.word	SyntaxError                      ; $9c ENDPROC
>80ce	21 97					.word	SyntaxError                      ; $9d NEXT
>80d0	21 97					.word	SyntaxError                      ; $9e UNTIL
>80d2	21 97					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	21 97					.word	SyntaxError                      ; $a1 CLS
>80d8	21 97					.word	SyntaxError                      ; $a2 DATA
>80da	21 97					.word	SyntaxError                      ; $a3 DIM
>80dc	21 97					.word	SyntaxError                      ; $a4 GOSUB
>80de	62 81					.word	GotoCommand                      ; $a5 GOTO
>80e0	9a 81					.word	LetCommand                       ; $a6 LET
>80e2	d3 81					.word	Command_Print                    ; $a7 PRINT
>80e4	21 97					.word	SyntaxError                      ; $a8 READ
>80e6	2a 82					.word	RemCommand                       ; $a9 REM
>80e8	21 97					.word	SyntaxError                      ; $aa RETURN
>80ea	21 97					.word	SyntaxError                      ; $ab THEN
>80ec	21 97					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	21 97					.word	SyntaxError                      ; $80 !0:EOF
>80f0	21 97					.word	SyntaxError                      ; $81 !1:SH1
>80f2	21 97					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	21 97					.word	SyntaxError                      ; $86 LIST
>80fc	c9 81					.word	NewCommand                       ; $87 NEW
>80fe	21 97					.word	SyntaxError                      ; $88 RESTORE
>8100	37 82					.word	CommandRUN                       ; $89 RUN
>8102	21 97					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	21 97					.word	SyntaxError                      ; $80 !0:EOF
>8106	21 97					.word	SyntaxError                      ; $81 !1:SH1
>8108	21 97					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 b5 8c	jsr $8cb5			jsr 	EvaluateInteger 			; the assert test
.810f	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 97 82	jmp $8297		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 ca 8c	jsr $8cca			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 46 98	jsr $9846			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8162					GotoCommand:
.8162	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8164	20 ca 8c	jsr $8cca			jsr 	Evaluate16BitInteger
.8167					GotoStackX:
.8167	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.816a	48		pha				pha 								; it is slightly inefficient, just in cases.
.816b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.816e	fa		plx				plx
.816f	20 36 92	jsr $9236			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8172	4c 42 82	jmp $8242			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8175					IfCommand:
.8175	a2 00		ldx #$00			ldx 	#0 							; If what.
.8177	20 92 8c	jsr $8c92			jsr 	EvaluateNumber
.817a	b1 30		lda ($30),y			lda 	(codePtr),y
.817c	c9 ab		cmp #$ab			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.817e	f0 04		beq $8184			beq 	_IfOldStyle
.8180	c9 a5		cmp #$a5			cmp 	#KWD_GOTO
.8182	d0 13		bne $8197			bne 	_IfStructured
.8184					_IfOldStyle:
.8184	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; is it zero
.8187	f0 0b		beq $8194			beq 	_IfFail 					; if fail, go to next line
.8189	b1 30		lda ($30),y			lda 	(codePtr),y
.818b	c8		iny				iny 								; consume GOTO or THEN
.818c	c9 a5		cmp #$a5			cmp 	#KWD_GOTO
.818e	f0 01		beq $8191			beq 	_IfGoto
.8190	60		rts				rts 								; if THEN just continue
.8191					_IfGoto:
.8191	4c 62 81	jmp $8162			jmp 	GotoCommand
.8194					_IfFail:
.8194	4c 82 82	jmp $8282			jmp 	EOLCommand
.8197					_IfStructured:
>8197	db						.byte 	$DB 						; causes a break in the emulator
.8198	80 fd		bra $8197			bra 	_IfStructured

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.819a					LetCommand:
.819a	a2 00		ldx #$00			ldx 	#0
.819c	ad 81 86	lda $8681			lda 	PrecedenceLevel+"*"			; precedence > this
.819f	20 9b 86	jsr $869b			jsr 	EvaluateExpressionAtPrecedence
.81a2	a9 3d		lda #$3d			lda 	#"=" 						; check =
.81a4	20 78 92	jsr $9278			jsr 	CheckNextA
.81a7	e8		inx				inx 								; RHS
.81a8	20 99 86	jsr $8699			jsr 	EvaluateExpression
.81ab	ca		dex				dex
.81ac	20 b0 81	jsr $81b0			jsr 	AssignVariable
.81af	60		rts				rts
.81b0					AssignVariable:
.81b0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.81b3	48		pha				pha 								; save a copy
.81b4	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.81b7	29 10		and #$10			and 	#NSBIsString
.81b9	d0 0b		bne $81c6			bne 	_ASError
.81bb	68		pla				pla 								; get back
.81bc	29 10		and #$10			and 	#NSBIsString 				; check type
.81be	d0 03		bne $81c3			bne 	_ASString
.81c0	4c d6 86	jmp $86d6			jmp 	AssignNumber
.81c3					_ASString:
.81c3	4c 44 87	jmp $8744			jmp 	AssignString
.81c6					_ASError:
.81c6	4c 2b 97	jmp $972b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.81c9					NewCommand:
.81c9	20 e5 91	jsr $91e5			jsr 	MemoryNew
.81cc	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.81cf	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.81d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.81d3					Command_Print:
.81d3	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.81d4					_CPLoop:
.81d4	08		php				php 								; save last action flag
.81d5	b1 30		lda ($30),y			lda 	(codePtr),y
.81d7	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81d9	f0 46		beq $8221			beq 	_CPExit
.81db	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81dd	f0 42		beq $8221			beq 	_CPExit
.81df	68		pla				pla 								; throw last action flag
.81e0	b1 30		lda ($30),y			lda 	(codePtr),y
.81e2	c8		iny				iny
.81e3	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81e5	f0 37		beq $821e			beq 	_CPContinueWithSameLine
.81e7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81e9	f0 2e		beq $8219			beq 	_CPTab
.81eb	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81ed	f0 26		beq $8215			beq 	_CPNewLine
.81ef	88		dey				dey 								; undo the get.
.81f0	a2 00		ldx #$00			ldx 	#0
.81f2	20 89 8c	jsr $8c89			jsr 	EvaluateValue 				; get a value into slot 0
.81f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81f8	29 10		and #$10			and 	#NSBIsString
.81fa	f0 0b		beq $8207			beq 	_CPNumber
.81fc	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81ff	ad 08 06	lda $0608			lda 	NSMantissa0
.8202	20 e9 82	jsr $82e9			jsr 	PrintStringXA
.8205	80 cc		bra $81d3			bra 	Command_Print 				; loop round clearing carry so NL if end
.8207					_CPNumber:
.8207	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8209	20 5f 8b	jsr $8b5f			jsr 	ConvertNumberToString 		; convert to string
.820c	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.820e	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8210	20 e9 82	jsr $82e9			jsr 	PrintStringXA
.8213	80 be		bra $81d3			bra 	Command_Print 				; loop round clearing carry so NL if end
.8215					_CPNewLine:
.8215	a9 0d		lda #$0d			lda 	#13
.8217	80 02		bra $821b			bra 	_CPPrintChar
.8219					_CPTab:
.8219	a9 09		lda #$09			lda 	#9 							; print TAB
.821b					_CPPrintChar:
.821b	20 ba 98	jsr $98ba			jsr 	EXTPrintCharacter
.821e					_CPContinueWithSameLine:
.821e	38		sec				sec 								; loop round with carry set, which
.821f	80 b3		bra $81d4			bra 	_CPLoop 					; will inhibit final CR
.8221					_CPExit:
.8221	28		plp				plp 								; get last action flag
.8222	b0 05		bcs $8229			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8224	a9 0d		lda #$0d			lda 	#13 						; print new line
.8226	20 ba 98	jsr $98ba			jsr 	EXTPrintCharacter
.8229					_CPExit2:
.8229	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.822a					RemCommand:
.822a	b1 30		lda ($30),y			lda 	(codePtr),y
.822c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.822e	d0 06		bne $8236			bne 	_RMExit
.8230	c8		iny				iny
.8231	98		tya				tya
.8232	38		sec				sec
.8233	71 30		adc ($30),y			adc 	(codePtr),y
.8235	a8		tay				tay
.8236					_RMExit:
.8236	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8237					CommandRUN:
.8237	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.823a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.823c	85 30		sta $30				sta 	codePtr
.823e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8240	85 31		sta $31				sta 	codePtr+1
.8242					RUNNewLine:
.8242	b2 30		lda ($30)			lda 	(codePtr)
.8244	f0 39		beq $827f			beq 	CRNoProgram         		; no then END.
.8246	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8248	9a		txs				txs
.8249					RUNCodePointerLine:
.8249	a0 02		ldy #$02			ldy 	#2 							; start of program
.824b					_CRIncMainLoop:
.824b	c8		iny				iny
.824c					_CRMainLoop:
.824c	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.824f	b1 30		lda ($30),y			lda 	(codePtr),y
.8251	10 10		bpl $8263			bpl 	_CRNotKeyword
.8253	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8255	b0 04		bcs $825b			bcs 	_CRIsKeyword
.8257	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8259	b0 1e		bcs $8279			bcs		_CRSyntaxError
.825b					_CRIsKeyword:
.825b	c8		iny				iny 								; consume command
.825c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.825d	aa		tax				tax 								; put in X for vector jump
.825e	20 7c 82	jsr $827c			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8261	80 e9		bra $824c			bra 	_CRMainLoop 				; and loop round
.8263					_CRNotKeyword:
.8263	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8265	f0 e4		beq $824b			beq 	_CRIncMainLoop
.8267	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8269	90 05		bcc $8270			bcc 	_CRNotVariable
.826b					_CRGoLet:
.826b	20 9a 81	jsr $819a			jsr 	LetCommand
.826e	80 dc		bra $824c			bra 	_CRMainLoop
.8270					_CRNotVariable:
.8270	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.8272	f0 f7		beq $826b			beq 	_CRGoLet
.8274	c9 21		cmp #$21			cmp 	#KWD_PLING
.8276	f0 f3		beq $826b			beq 	_CRGoLet
>8278	db						.byte 	$DB 						; causes a break in the emulator
.8279					_CRSyntaxError:
.8279	4c 21 97	jmp $9721			jmp 	SyntaxError
.827c					_CRCallVector0:
.827c	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.827f					CRNoProgram:
.827f	4c 5f 81	jmp $815f			jmp 	EndCommand
.8282					EOLCommand:
.8282	18		clc				clc
.8283	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8285	65 30		adc $30				adc 	codePtr
.8287	85 30		sta $30				sta 	codePtr
.8289	90 02		bcc $828d			bcc 	_CREExit
.828b	e6 31		inc $31				inc 	codePtr+1
.828d					_CREExit:
.828d	80 b3		bra $8242			bra 	RunNewLine
.828f					Shift1Command:
.828f	b1 30		lda ($30),y			lda 	(codePtr),y
.8291	c8		iny				iny
.8292	0a		asl a				asl 	a
.8293	aa		tax				tax
.8294	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9268					CheckRightBracket:
.9268	b1 30		lda ($30),y			lda 	(codePtr),y
.926a	c8		iny				iny
.926b	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.926d	d0 0f		bne $927e			bne 	CNAFail
.926f	60		rts				rts
.9270					CheckComma:
.9270	b1 30		lda ($30),y			lda 	(codePtr),y
.9272	c8		iny				iny
.9273	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9275	d0 07		bne $927e			bne 	CNAFail
.9277	60		rts				rts
.9278					CheckNextA:
.9278	d1 30		cmp ($30),y			cmp 	(codePtr),y
.927a	d0 02		bne $927e			bne 	CNAFail
.927c	c8		iny				iny 								; skip character
.927d	60		rts				rts 								; and exit
.927e					CNAFail:
.927e	4c 21 97	jmp $9721			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8297					ErrorHandler:
.8297	a8		tay				tay 								; find the error text
.8298	f0 42		beq $82dc			beq 	_EHEnd
.829a	a2 00		ldx #$00			ldx 	#0
.829c					_EHFind:
.829c	88		dey				dey 								; found the error text ?
.829d	f0 0a		beq $82a9			beq 	_EHFound
.829f					_EHFindZero:
.829f	bd 3a 97	lda $973a,x			lda 	ErrorText,x 				; find the next error
.82a2	e8		inx				inx
.82a3	c9 00		cmp #$00			cmp 	#0
.82a5	d0 f8		bne $829f			bne 	_EHFindZero
.82a7	80 f3		bra $829c			bra 	_EHFind
.82a9					_EHFound:
.82a9	bd 3a 97	lda $973a,x			lda 	ErrorText,x 				; print the message
.82ac	20 ba 98	jsr $98ba			jsr 	EXTPrintCharacter
.82af	e8		inx				inx
.82b0	bd 3a 97	lda $973a,x			lda 	ErrorText,x
.82b3	d0 f4		bne $82a9			bne 	_EHFound
.82b5	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.82b7	b1 30		lda ($30),y			lda 	(codePtr),y
.82b9	d0 05		bne $82c0			bne 	_EHAtMsg
.82bb	c8		iny				iny
.82bc	b1 30		lda ($30),y			lda 	(codePtr),y
.82be	f0 17		beq $82d7			beq 	_EHCREnd
.82c0					_EHAtMsg:
.82c0	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.82c2	a9 df		lda #$df			lda 	#_AtMsg & $FF
.82c4	20 e9 82	jsr $82e9			jsr 	PrintStringXA
.82c7	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.82c9	b1 30		lda ($30),y			lda 	(codePtr),y
.82cb	48		pha				pha
.82cc	c8		iny				iny
.82cd	b1 30		lda ($30),y			lda 	(codePtr),y
.82cf	aa		tax				tax
.82d0	68		pla				pla
.82d1	20 c4 93	jsr $93c4			jsr 	ConvertInt16 				; convert XA to string
.82d4	20 e9 82	jsr $82e9			jsr 	PrintStringXA 				; and print it.
.82d7					_EHCREnd:
.82d7	a9 0d		lda #$0d			lda 	#13 						; new line
.82d9	20 ba 98	jsr $98ba			jsr 	EXTPrintCharacter
.82dc					_EHEnd:
.82dc	4c 0c 80	jmp $800c			jmp 	WarmStart
>82df	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82e7	20 00
.82e9					PrintStringXA:
.82e9	5a		phy				phy
.82ea	86 37		stx $37				stx 	zTemp0+1
.82ec	85 36		sta $36				sta 	zTemp0
.82ee	a0 00		ldy #$00			ldy 	#0
.82f0					_PSXALoop:
.82f0	b1 36		lda ($36),y			lda 	(zTemp0),y
.82f2	f0 06		beq $82fa			beq 	_PSXAExit
.82f4	20 ba 98	jsr $98ba			jsr 	EXTPrintCharacter
.82f7	c8		iny				iny
.82f8	80 f6		bra $82f0			bra 	_PSXALoop
.82fa					_PSXAExit:
.82fa	7a		ply				ply
.82fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82fc					UnaryTrue:
.82fc	fa		plx				plx
.82fd					ReturnTrue:
.82fd	a9 01		lda #$01			lda 	#1  						; set to 1
.82ff	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.8302	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8304	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8307	60		rts				rts
.8308					UnaryFalse:
.8308	fa		plx				plx
.8309					ReturnFalse:
.8309	4c 3e 8d	jmp $8d3e			jmp 	NSMSetZero 					; set it all to zero
.830c					BinaryCompareEqual:
.830c	fa		plx				plx
.830d	20 48 83	jsr $8348			jsr 	CompareBaseCode
.8310	c9 00		cmp #$00			cmp 	#0
.8312	f0 e9		beq $82fd			beq 	ReturnTrue
.8314	80 f3		bra $8309			bra 	ReturnFalse
.8316					BinaryCompareLess:
.8316	fa		plx				plx
.8317	20 48 83	jsr $8348			jsr 	CompareBaseCode
.831a	c9 ff		cmp #$ff			cmp 	#$FF
.831c	f0 df		beq $82fd			beq 	ReturnTrue
.831e	80 e9		bra $8309			bra 	ReturnFalse
.8320					BinaryCompareGreater:
.8320	fa		plx				plx
.8321	20 48 83	jsr $8348			jsr 	CompareBaseCode
.8324	c9 01		cmp #$01			cmp 	#1
.8326	f0 d5		beq $82fd			beq 	ReturnTrue
.8328	80 df		bra $8309			bra 	ReturnFalse
.832a					BinaryCompareNotEqual:
.832a	fa		plx				plx
.832b	20 48 83	jsr $8348			jsr 	CompareBaseCode
.832e	c9 00		cmp #$00			cmp 	#0
.8330	d0 cb		bne $82fd			bne 	ReturnTrue
.8332	80 d5		bra $8309			bra 	ReturnFalse
.8334					BinaryCompareLessEqual:
.8334	fa		plx				plx
.8335	20 48 83	jsr $8348			jsr 	CompareBaseCode
.8338	c9 01		cmp #$01			cmp 	#1
.833a	d0 c1		bne $82fd			bne 	ReturnTrue
.833c	80 cb		bra $8309			bra 	ReturnFalse
.833e					BinaryCompareGreaterEqual:
.833e	fa		plx				plx
.833f	20 48 83	jsr $8348			jsr 	CompareBaseCode
.8342	c9 ff		cmp #$ff			cmp 	#$FF
.8344	d0 b7		bne $82fd			bne 	ReturnTrue
.8346	80 c1		bra $8309			bra 	ReturnFalse
.8348					CompareBaseCode:
.8348	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; make both values if references.
.834b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.834e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8351	29 10		and #$10			and 	#NSTString
.8353	d0 40		bne $8395			bne 	_CBCString
.8355	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8358	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.835b	d0 3b		bne $8398			bne 	_CBCFloat
.835d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8360	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8363	29 08		and #$08			and 	#NSTFloat
.8365	d0 31		bne $8398			bne 	_CBCFloat
.8367	20 9b 83	jsr $839b			jsr 	CompareFixMinusZero
.836a	e8		inx				inx
.836b	20 9b 83	jsr $839b			jsr 	CompareFixMinusZero
.836e	ca		dex				dex
.836f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8372	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8375	10 0b		bpl $8382			bpl 	_CDCSameSign
.8377	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.837a	30 16		bmi $8392			bmi 	_CBCLess 					; return $FF
.837c					_CBCGreater:
.837c	a9 01		lda #$01			lda 	#1
.837e	60		rts				rts
.837f					_CBCEqual:
.837f	a9 00		lda #$00			lda 	#0
.8381	60		rts				rts
.8382					_CDCSameSign:
.8382	20 ab 84	jsr $84ab			jsr 	SubTopTwoStack 				; unsigned subtract
.8385	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; or the mantissa together
.8388	f0 f5		beq $837f			beq 	_CBCEqual 					; -0 == 0
.838a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.838d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8390	10 ea		bpl $837c			bpl 	_CBCGreater
.8392					_CBCLess:
.8392	a9 ff		lda #$ff			lda 	#$FF
.8394	60		rts				rts
.8395					_CBCString:
.8395	4c 01 84	jmp $8401			jmp 	CompareStrings
.8398					_CBCFloat:
.8398	4c c0 94	jmp $94c0			jmp 	CompareFloat
.839b					CompareFixMinusZero:
.839b	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero
.839e	d0 03		bne $83a3			bne 	_CFXMZNotZero
.83a0	9e 00 06	stz $0600,x			stz 	NSStatus,x
.83a3					_CFXMZNotZero:
.83a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.83a4					StringConcat:
.83a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.83a7	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83aa	29 18		and #$18			and 	#NSBTypeMask
.83ac	c9 10		cmp #$10			cmp 	#NSTString
.83ae	d0 4e		bne $83fe			bne		_SCType
.83b0	64 38		stz $38				stz 	zTemp1 						; counting total length
.83b2	e8		inx				inx
.83b3	20 d1 83	jsr $83d1			jsr 	_SCSetupZ0 					; setup for second
.83b6	20 dc 83	jsr $83dc			jsr 	_SCLengthZ0 				; length for second
.83b9	ca		dex				dex
.83ba	20 d1 83	jsr $83d1			jsr 	_SCSetupZ0 					; setup for first
.83bd	20 dc 83	jsr $83dc			jsr 	_SCLengthZ0 				; length for first
.83c0	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.83c2	20 67 98	jsr $9867			jsr 	StringTempAllocate
.83c5	20 ef 83	jsr $83ef			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.83c8	e8		inx				inx
.83c9	20 d1 83	jsr $83d1			jsr 	_SCSetupZ0 					; copy second out
.83cc	20 ef 83	jsr $83ef			jsr 	_SCCopy
.83cf	ca		dex				dex
.83d0	60		rts				rts
.83d1					_SCSetupZ0:
.83d1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.83d4	85 36		sta $36				sta 	zTemp0
.83d6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83d9	85 37		sta $37				sta 	zTemp0+1
.83db	60		rts				rts
.83dc					_SCLengthZ0:
.83dc	5a		phy				phy
.83dd	a0 00		ldy #$00			ldy 	#0
.83df					_SCLenLoop:
.83df	b1 36		lda ($36),y			lda 	(zTemp0),y
.83e1	f0 0a		beq $83ed			beq 	_SCLExit
.83e3	c8		iny				iny
.83e4	e6 38		inc $38				inc 	zTemp1
.83e6	10 f7		bpl $83df			bpl		_SCLenLoop
.83e8	a9 09		lda #$09		lda	#9
.83ea	4c 97 82	jmp $8297		jmp	ErrorHandler
.83ed					_SCLExit:
.83ed	7a		ply				ply
.83ee	60		rts				rts
.83ef					_SCCopy:
.83ef	5a		phy				phy
.83f0	a0 00		ldy #$00			ldy 	#0
.83f2					_SCCopyLoop:
.83f2	b1 36		lda ($36),y			lda 	(zTemp0),y
.83f4	f0 06		beq $83fc			beq 	_SCCExit
.83f6	20 a5 98	jsr $98a5			jsr 	StringTempWrite
.83f9	c8		iny				iny
.83fa	80 f6		bra $83f2			bra 	_SCCopyLoop
.83fc					_SCCExit:
.83fc	7a		ply				ply
.83fd	60		rts				rts
.83fe					_SCType:
.83fe	4c 2b 97	jmp $972b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9281					IntegerDivide:
.9281	fa		plx				plx
.9282	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9285	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9288	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9289	0a		asl a				asl 	a
.928a	10 05		bpl $9291			bpl 	_NotRef
.928c	48		pha				pha
.928d	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9290	68		pla				pla
.9291					_NotRef:
.9291	0a		asl a				asl 	a
.9292	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9294	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9297	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.929a	f0 03		beq $929f			beq 	_IntegerCode 				; if clear, then we have two integers
.929c	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.929f					_IntegerCode:
.929f	20 c1 92	jsr $92c1			jsr 	CheckDivideZero 			; do div zero check
.92a2	20 f9 92	jsr $92f9			jsr 	Int32Divide 				; do the division
.92a5	20 b6 93	jsr $93b6			jsr 	CalculateSign 				; calculate result sign
.92a8					NSMCopyPlusTwoToZero:
.92a8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.92ab	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92ae	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.92b1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92b4	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.92b7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.92ba	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.92bd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92c0	60		rts				rts
.92c1					CheckDivideZero:
.92c1	e8		inx				inx
.92c2	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero
.92c5	f0 02		beq $92c9			beq 	_CDVError
.92c7	ca		dex				dex
.92c8	60		rts				rts
.92c9					_CDVError:
.92c9	a9 03		lda #$03		lda	#3
.92cb	4c 97 82	jmp $8297		jmp	ErrorHandler
.92ce					IntegerModulus:
.92ce	fa		plx				plx
.92cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.92d2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92d5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92d6	0a		asl a				asl 	a
.92d7	10 05		bpl $92de			bpl 	_NotRef
.92d9	48		pha				pha
.92da	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92dd	68		pla				pla
.92de					_NotRef:
.92de	0a		asl a				asl 	a
.92df	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92e1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92e4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.92e7	f0 03		beq $92ec			beq 	_IntegerCode 				; if clear, then we have two integers
.92e9	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.92ec					_IntegerCode:
.92ec	20 c1 92	jsr $92c1			jsr 	CheckDivideZero 			; do div zero check
.92ef	20 f9 92	jsr $92f9			jsr 	Int32Divide 				; do the division
.92f2	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.92f5	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.92f8	60		rts				rts
.92f9					Int32Divide:
.92f9	48		pha				pha 								; save AXY
.92fa	5a		phy				phy
.92fb	20 15 8d	jsr $8d15			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.92fe	20 3a 8d	jsr $8d3a			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9301	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9303					_I32DivideLoop:
.9303	e8		inx				inx
.9304	e8		inx				inx
.9305	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9308	ca		dex				dex
.9309	ca		dex				dex
.930a	20 54 8d	jsr $8d54			jsr 	NSMRotateLeft
.930d	20 39 93	jsr $9339			jsr 	DivideCheckSubtract 		; check if subtract possible
.9310	90 03		bcc $9315			bcc 	_I32DivideNoCarryIn
.9312	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9315					_I32DivideNoCarryIn:
.9315	88		dey				dey 								; loop round till division completed.
.9316	d0 eb		bne $9303			bne 	_I32DivideLoop
.9318	7a		ply				ply 								; restore AXY and exit
.9319	68		pla				pla
.931a	60		rts				rts
.931b					Int32ShiftDivide:
.931b	48		pha				pha 								; save AY
.931c	5a		phy				phy
.931d	e8		inx				inx 								; clear S[X+2]
.931e	e8		inx				inx
.931f	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero
.9322	ca		dex				dex
.9323	ca		dex				dex
.9324	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9326					_I32SDLoop:
.9326	20 39 93	jsr $9339			jsr 	DivideCheckSubtract 		; check if subtract possible
.9329	e8		inx				inx
.932a	e8		inx				inx
.932b	20 54 8d	jsr $8d54			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.932e	ca		dex				dex
.932f	ca		dex				dex
.9330	20 54 8d	jsr $8d54			jsr 	NSMRotateLeft
.9333	88		dey				dey 	 							; do 31 times
.9334	d0 f0		bne $9326			bne 	_I32SDLoop
.9336	7a		ply				ply 								; restore AY and exit
.9337	68		pla				pla
.9338	60		rts				rts
.9339					DivideCheckSubtract:
.9339	20 ab 84	jsr $84ab			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.933c	b0 04		bcs $9342			bcs 	_DCSExit 					; if carry set, then could do, exit
.933e	20 85 84	jsr $8485			jsr 	AddTopTwoStack 				; add it back in
.9341	18		clc				clc 								; and return False
.9342					_DCSExit:
.9342	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9343					MulInteger:
.9343	fa		plx				plx
.9344	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9347	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.934a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.934b	0a		asl a				asl 	a
.934c	10 05		bpl $9353			bpl 	_NotRef
.934e	48		pha				pha
.934f	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9352	68		pla				pla
.9353					_NotRef:
.9353	0a		asl a				asl 	a 							; put MSB of type into A:7
.9354	30 0b		bmi $9361			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9356	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9359	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.935c	f0 06		beq $9364			beq 	_IntegerCode 				; if clear, then we have two integers
.935e	4c 97 95	jmp $9597			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9361					_StringData:
.9361	4c 35 97	jmp $9735			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9364					_IntegerCode:
.9364	20 71 93	jsr $9371			jsr 	MultiplyShort
.9367	c9 00		cmp #$00			cmp 	#0
.9369	f0 05		beq $9370			beq 	_MIExit
.936b	a9 04		lda #$04		lda	#4
.936d	4c 97 82	jmp $8297		jmp	ErrorHandler
.9370					_MIExit:
.9370	60		rts				rts
.9371					MultiplyShort:
.9371	5a		phy				phy 								; save Y
.9372	20 15 8d	jsr $8d15			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9375	20 3a 8d	jsr $8d3a			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9378	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.937a					_I32MLoop:
.937a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.937d	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9380	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9383	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9386	f0 28		beq $93b0			beq 	_I32MExit 					; exit if zero
.9388	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.938b	29 01		and #$01			and 	#1
.938d	f0 0e		beq $939d			beq 	_I32MNoAdd
.938f	20 85 84	jsr $8485			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9392	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9395	10 06		bpl $939d			bpl 	_I32MNoAdd
.9397					_I32ShiftRight:
.9397	20 61 8d	jsr $8d61			jsr 	NSMShiftRight 				; shift S[X] right
.939a	c8		iny				iny 								; increment shift count
.939b	80 0a		bra $93a7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.939d					_I32MNoAdd:
.939d	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.93a0	70 f5		bvs $9397			bvs 	_I32ShiftRight 				; instead.
.93a2	e8		inx				inx
.93a3	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.93a6	ca		dex				dex
.93a7					_I32MShiftUpper:
.93a7	e8		inx				inx 								; shift S[X+2] right
.93a8	e8		inx				inx
.93a9	20 61 8d	jsr $8d61			jsr 	NSMShiftRight
.93ac	ca		dex				dex
.93ad	ca		dex				dex
.93ae	80 ca		bra $937a			bra 	_I32MLoop 					; try again.
.93b0					_I32MExit:
.93b0	20 b6 93	jsr $93b6			jsr 	CalculateSign
.93b3	98		tya				tya 								; shift in A
.93b4	7a		ply				ply 								; restore Y and exit
.93b5	60		rts				rts
.93b6					CalculateSign:
.93b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.93b9	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.93bc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.93bf	0a		asl a				asl 	a 							; shift bit 7 into carry
.93c0	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.93c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8401					CompareStrings:
.8401	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8404	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8407	29 10		and #$10			and 	#NSBIsString
.8409	f0 2c		beq $8437			beq 	_CSTypeError
.840b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.840e	85 36		sta $36				sta 	zTemp0
.8410	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8413	85 37		sta $37				sta 	zTemp0+1
.8415	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8418	85 38		sta $38				sta 	zTemp1
.841a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.841d	85 39		sta $39				sta 	zTemp1+1
.841f	5a		phy				phy 								; save Y so we can access strings
.8420	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8422					_CSLoop:
.8422	c8		iny				iny
.8423	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8425	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8427	d0 06		bne $842f			bne 	_CSDifferent
.8429	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.842b	d0 f5		bne $8422			bne 	_CSLoop 					; still comparing
.842d					_CSExit:
.842d	7a		ply				ply 								; reached end, return zero in A from EOS
.842e	60		rts				rts
.842f					_CSDifferent:
.842f	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8431	90 fa		bcc $842d			bcc		_CSExit
.8433	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8435	80 f6		bra $842d			bra 	_CSExit
.8437					_CSTypeError:
.8437	4c 2b 97	jmp $972b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.843a					ShiftLeft:
.843a	38		sec				sec
.843b	80 01		bra $843e			bra 	ShiftMain
.843d					ShiftRight:
.843d	18		clc				clc
.843e					ShiftMain:
.843e	fa		plx				plx 								; restore X
.843f	08		php				php 								; save direction
.8440	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8443	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8446	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8447	0a		asl a				asl 	a
.8448	10 05		bpl $844f			bpl 	_NotRef
.844a	48		pha				pha
.844b	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.844e	68		pla				pla
.844f					_NotRef:
.844f	0a		asl a				asl 	a
.8450	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8452	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8455	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8458	f0 03		beq $845d			beq 	_IntegerCode 				; if clear, then we have two integers
.845a	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.845d					_IntegerCode:
.845d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8460	29 e0		and #$e0			and 	#$E0
.8462	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8465	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8468	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.846b	d0 13		bne $8480			bne 	_SMExit0 					; if >= 32 it will always return zero.
.846d					_SMLoop:
.846d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8470	30 11		bmi $8483			bmi 	_SMExit 					; exit if done.
.8472	28		plp				plp 								; restore direcition setting
.8473	08		php				php
.8474	90 05		bcc $847b			bcc 	_SMRight
.8476	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; shift left if CS
.8479	80 f2		bra $846d			bra 	_SMLoop
.847b					_SMRight:
.847b	20 61 8d	jsr $8d61			jsr 	NSMShiftRight 				; shift right if CC
.847e	80 ed		bra $846d			bra 	_SMLoop
.8480					_SMExit0:
.8480	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero 					; return zero.
.8483					_SMExit:
.8483	28		plp				plp 								; throw direction
.8484	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8485					AddTopTwoStack:
.8485	18		clc				clc
.8486	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8489	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.848c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.848f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8492	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8495	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8498	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.849b	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.849e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84a1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84a4	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.84a7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84aa	60		rts				rts
.84ab					SubTopTwoStack:
.84ab	38		sec				sec
.84ac	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.84af	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.84b2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84b5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.84b8	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.84bb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84be	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.84c1	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.84c4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84c7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.84ca	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.84cd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.84d0	60		rts				rts
.84d1					AddInteger:
.84d1	fa		plx				plx
.84d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84d9	0a		asl a				asl 	a
.84da	10 05		bpl $84e1			bpl 	_NotRef
.84dc	48		pha				pha
.84dd	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84e0	68		pla				pla
.84e1					_NotRef:
.84e1	0a		asl a				asl 	a 							; put MSB of type into A:7
.84e2	30 0b		bmi $84ef			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84e4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84e7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ea	f0 06		beq $84f2			beq 	_IntegerCode 				; if clear, then we have two integers
.84ec	4c 1f 94	jmp $941f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84ef					_StringData:
.84ef	4c a4 83	jmp $83a4			jmp 	StringConcat							; at least one string - don't know both are strings.
.84f2					_IntegerCode:
.84f2					AddCode:
.84f2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84f5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84f8	10 8b		bpl $8485			bpl 	AddTopTwoStack
.84fa	20 ab 84	jsr $84ab			jsr 	SubTopTwoStack 				; do a physical subtraction
.84fd	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8500	10 09		bpl $850b			bpl 	_AddExit
.8502	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8505	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8508	20 f3 8c	jsr $8cf3			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.850b					_AddExit:
.850b	60		rts				rts
.850c					SubInteger:
.850c	fa		plx				plx
.850d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8510	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8513	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8514	0a		asl a				asl 	a
.8515	10 05		bpl $851c			bpl 	_NotRef
.8517	48		pha				pha
.8518	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.851b	68		pla				pla
.851c					_NotRef:
.851c	0a		asl a				asl 	a 							; put MSB of type into A:7
.851d	30 0b		bmi $852a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.851f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8522	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8525	f0 06		beq $852d			beq 	_IntegerCode 				; if clear, then we have two integers
.8527	4c 24 94	jmp $9424			jmp 	FloatingPointSub 							; otherwise at least one float.
.852a					_StringData:
.852a	4c 35 97	jmp $9735			jmp 	NotDoneError							; at least one string - don't know both are strings.
.852d					_IntegerCode:
.852d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8530	49 80		eor #$80			eor 	#$80
.8532	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8535	80 bb		bra $84f2			bra 	AddCode 					; and do the same code as add.
.8537					AndInteger:
.8537	fa		plx				plx
.8538	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.853b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.853e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.853f	0a		asl a				asl 	a
.8540	10 05		bpl $8547			bpl 	_NotRef
.8542	48		pha				pha
.8543	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8546	68		pla				pla
.8547					_NotRef:
.8547	0a		asl a				asl 	a
.8548	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.854a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.854d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8550	f0 03		beq $8555			beq 	_IntegerCode 				; if clear, then we have two integers
.8552	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.8555					_IntegerCode:
.8555	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8558	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.855b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.855e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8561	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8564	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8567	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.856a	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.856d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8570	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8573	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8576	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8579	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.857c	60		rts				rts
.857d					OraInteger:
.857d	fa		plx				plx
.857e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8581	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8584	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8585	0a		asl a				asl 	a
.8586	10 05		bpl $858d			bpl 	_NotRef
.8588	48		pha				pha
.8589	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.858c	68		pla				pla
.858d					_NotRef:
.858d	0a		asl a				asl 	a
.858e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8590	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8593	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8596	f0 03		beq $859b			beq 	_IntegerCode 				; if clear, then we have two integers
.8598	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.859b					_IntegerCode:
.859b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.859e	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.85a1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85a4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85a7	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.85aa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85ad	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85b0	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.85b3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85b6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85b9	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.85bc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85bf	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85c2	60		rts				rts
.85c3					EorInteger:
.85c3	fa		plx				plx
.85c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85c7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85ca	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85cb	0a		asl a				asl 	a
.85cc	10 05		bpl $85d3			bpl 	_NotRef
.85ce	48		pha				pha
.85cf	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85d2	68		pla				pla
.85d3					_NotRef:
.85d3	0a		asl a				asl 	a
.85d4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85d6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85d9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85dc	f0 03		beq $85e1			beq 	_IntegerCode 				; if clear, then we have two integers
.85de	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.85e1					_IntegerCode:
.85e1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85e4	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85e7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85ea	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85ed	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85f0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85f3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85f6	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85f9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85fc	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85ff	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8602	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8605	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8608	60		rts				rts
.8609					WordIndirect:
.8609	fa		plx				plx
.860a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.860d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8610	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8611	0a		asl a				asl 	a
.8612	10 05		bpl $8619			bpl 	_NotRef
.8614	48		pha				pha
.8615	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8618	68		pla				pla
.8619					_NotRef:
.8619	0a		asl a				asl 	a
.861a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.861c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.861f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8622	f0 03		beq $8627			beq 	_IntegerCode 				; if clear, then we have two integers
.8624	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.8627					_IntegerCode:
.8627	20 f2 84	jsr $84f2			jsr 	AddCode 					; add the two values
.862a	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.862c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.862f	60		rts				rts
.8630					ByteIndirect:
.8630	fa		plx				plx
.8631	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8634	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8637	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8638	0a		asl a				asl 	a
.8639	10 05		bpl $8640			bpl 	_NotRef
.863b	48		pha				pha
.863c	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.863f	68		pla				pla
.8640					_NotRef:
.8640	0a		asl a				asl 	a
.8641	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8643	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8646	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8649	f0 03		beq $864e			beq 	_IntegerCode 				; if clear, then we have two integers
.864b	4c 2b 97	jmp $972b			jmp 	TypeError 					; anything else, type mismatch.
.864e					_IntegerCode:
.864e	20 f2 84	jsr $84f2			jsr 	AddCode 					; add the two values
.8651	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8653	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8656	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.93c4					ConvertInt16:
.93c4	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.93c7	8e 10 06	stx $0610			stx 	NSMantissa1
.93ca	9c 18 06	stz $0618			stz 	NSMantissa2
.93cd	9c 20 06	stz $0620			stz 	NSMantissa3
.93d0	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.93d3	a2 00		ldx #$00			ldx 	#0 							; stack level
.93d5	a9 0a		lda #$0a			lda 	#10 						; base
.93d7	80 00		bra $93d9			bra 	ConvertInt32
.93d9					ConvertInt32:
.93d9	5a		phy				phy
.93da	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.93dc	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.93df	10 08		bpl $93e9			bpl 	_CI32NotNeg
.93e1	48		pha				pha
.93e2	a9 2d		lda #$2d			lda 	#'-'
.93e4	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.93e7	c8		iny				iny
.93e8	68		pla				pla
.93e9					_CI32NotNeg:
.93e9	20 f7 93	jsr $93f7			jsr 	_CI32DivideConvert 			; recursive conversion
.93ec	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.93ee	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.93f1	7a		ply				ply
.93f2	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.93f4	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.93f6	60		rts				rts
.93f7					_CI32DivideConvert:
.93f7	e8		inx				inx 								; write to next slot up
.93f8	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.93fb	ca		dex				dex
.93fc	20 f9 92	jsr $92f9			jsr 	Int32Divide 				; divide
.93ff	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9402	48		pha				pha
.9403	20 a8 92	jsr $92a8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9406	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; is it zero ?
.9409	f0 06		beq $9411			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.940b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.940e	20 f7 93	jsr $93f7			jsr 	_CI32DivideConvert 			; and recusrively call.
.9411					_CI32NoRecurse:
.9411	68		pla				pla 								; remainder
.9412	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9414	90 02		bcc $9418			bcc 	_CI32NotHex
.9416	69 26		adc #$26			adc 	#6+32
.9418					_CI32NotHex:
.9418	69 30		adc #$30			adc 	#48
.941a	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.941d	c8		iny				iny
.941e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8657					PrecedenceLevel:
>8657	04					.byte	 4	; $00 <<
>8658	02					.byte	 2	; $01 <=
>8659	02					.byte	 2	; $02 <>
>865a	00					.byte	 0	; $03 !!3
>865b	00					.byte	 0	; $04 ><
>865c	02					.byte	 2	; $05 >=
>865d	04					.byte	 4	; $06 >>
>865e	00					.byte	 0	; $07 !!7
>865f	00					.byte	 0	; $08 !!8
>8660	00					.byte	 0	; $09 !!9
>8661	00					.byte	 0	; $0a !!10
>8662	00					.byte	 0	; $0b !!11
>8663	00					.byte	 0	; $0c !!12
>8664	00					.byte	 0	; $0d !!13
>8665	00					.byte	 0	; $0e !!14
>8666	00					.byte	 0	; $0f !!15
>8667	00					.byte	 0	; $10 @
>8668	00					.byte	 0	; $11 !!17
>8669	00					.byte	 0	; $12 !!18
>866a	00					.byte	 0	; $13 [
>866b	04					.byte	 4	; $14 \
>866c	00					.byte	 0	; $15 ]
>866d	01					.byte	 1	; $16 ^
>866e	00					.byte	 0	; $17 _
>866f	00					.byte	 0	; $18 `
>8670	00					.byte	 0	; $19 !!25
>8671	00					.byte	 0	; $1a !!26
>8672	00					.byte	 0	; $1b {
>8673	01					.byte	 1	; $1c |
>8674	00					.byte	 0	; $1d }
>8675	00					.byte	 0	; $1e ~
>8676	00					.byte	 0	; $1f [7m<7F>[m
>8677	00					.byte	 0	; $20
>8678	05					.byte	 5	; $21 !
>8679	00					.byte	 0	; $22 "
>867a	00					.byte	 0	; $23 #
>867b	05					.byte	 5	; $24 $
>867c	04					.byte	 4	; $25 %
>867d	01					.byte	 1	; $26 &
>867e	00					.byte	 0	; $27 '
>867f	00					.byte	 0	; $28 (
>8680	00					.byte	 0	; $29 )
>8681	04					.byte	 4	; $2a *
>8682	03					.byte	 3	; $2b +
>8683	00					.byte	 0	; $2c ,
>8684	03					.byte	 3	; $2d -
>8685	00					.byte	 0	; $2e .
>8686	04					.byte	 4	; $2f /
>8687	00					.byte	 0	; $30 0
>8688	00					.byte	 0	; $31 1
>8689	00					.byte	 0	; $32 2
>868a	00					.byte	 0	; $33 3
>868b	00					.byte	 0	; $34 4
>868c	00					.byte	 0	; $35 5
>868d	00					.byte	 0	; $36 6
>868e	00					.byte	 0	; $37 7
>868f	00					.byte	 0	; $38 8
>8690	00					.byte	 0	; $39 9
>8691	00					.byte	 0	; $3a :
>8692	00					.byte	 0	; $3b ;
>8693	02					.byte	 2	; $3c <
>8694	02					.byte	 2	; $3d =
>8695	02					.byte	 2	; $3e >
>8696	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8697					EvaluateExpressionAt0:
.8697	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8699					EvaluateExpression:
.8699	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.869b					EvaluateExpressionAtPrecedence:
.869b	48		pha				pha 								; save precedence level
.869c	20 6a 89	jsr $896a			jsr 	EvaluateTerm 				; evaluate term into level X.
.869f	68		pla				pla 								; restore precedence level.
.86a0					_EXPRLoop:
.86a0	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.86a2	b1 30		lda ($30),y			lda 	(codePtr),y
.86a4	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.86a6	b0 25		bcs $86cd			bcs 	_EXPRExit
.86a8	da		phx				phx 								; read the operator precedence
.86a9	aa		tax				tax
.86aa	bd 57 86	lda $8657,x			lda 	PrecedenceLevel,x
.86ad	fa		plx				plx
.86ae	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.86b0	f0 1b		beq $86cd			beq 	_EXPRExit
.86b2	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.86b4	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.86b6	c5 37		cmp $37				cmp 	zTemp0+1
.86b8	b0 13		bcs $86cd			bcs		_EXPRExit 					; if current >= operator exit
.86ba	48		pha				pha 								; save current precedence.
.86bb	b1 30		lda ($30),y			lda 	(codePtr),y
.86bd	c8		iny				iny
.86be	48		pha				pha
.86bf	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.86c1	e8		inx				inx 								; work out the right hand side.
.86c2	20 9b 86	jsr $869b			jsr 	EvaluateExpressionAtPrecedence
.86c5	ca		dex				dex
.86c6	68		pla				pla 								; get operator, call the code.
.86c7	20 d0 86	jsr $86d0			jsr 	_EXPRCaller
.86ca	68		pla				pla 								; restore precedence level
.86cb	80 d3		bra $86a0			bra 	_EXPRLoop 					; and go round.
.86cd					_EXPRExit:
.86cd	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.86cf	60		rts				rts
.86d0					_EXPRCaller:
.86d0	da		phx				phx 								; save on stack, first thing is to restore it
.86d1	0a		asl a				asl 	a 							; double so can use vectors into X
.86d2	aa		tax				tax
.86d3	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.941f					FloatingPointAdd:
.941f	20 c0 95	jsr $95c0			jsr 	FloatPrepare 				; prepare for floats
.9422	80 0b		bra $942f			bra 	FloatAdd
.9424					FloatingPointSub:
.9424	20 c0 95	jsr $95c0			jsr 	FloatPrepare 				; prepare for floats
.9427					FloatSubtract:
.9427	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.942a	49 80		eor #$80			eor 	#$80
.942c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.942f					FloatAdd:
.942f	48		pha				pha
.9430	5a		phy				phy
.9431	20 d1 95	jsr $95d1			jsr 	NSNormalise 				; normalise S[X]
.9434	f0 54		beq $948a			beq 	_FAReturn1
.9436	e8		inx				inx 								; normalise S[X+1]
.9437	20 d1 95	jsr $95d1			jsr 	NSNormalise
.943a	ca		dex				dex
.943b	c9 00		cmp #$00			cmp 	#0
.943d	f0 6f		beq $94ae			beq 	_FAExit 					; if so, just return A
.943f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9442	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9445	f0 1b		beq $9462			beq 	_FAExponentsEqual
.9447	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.944a	a8		tay				tay
.944b	38		sec				sec 								; do a signed comparison of the exponents.
.944c	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.944f	50 02		bvc $9453			bvc 	_FANoSignedChange
.9451	49 80		eor #$80			eor 	#$80
.9453					_FANoSignedChange:
.9453	29 80		and #$80			and 	#$80
.9455	10 03		bpl $945a			bpl 	_FAHaveMax
.9457	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.945a					_FAHaveMax:
.945a	20 b1 94	jsr $94b1			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.945d	e8		inx				inx
.945e	20 b1 94	jsr $94b1			jsr 	_FAShiftToExponent
.9461	ca		dex				dex
.9462					_FAExponentsEqual:
.9462	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9465	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9468	30 10		bmi $947a			bmi 	_FADifferentSigns
.946a	20 85 84	jsr $8485			jsr 	AddTopTwoStack 				; do the add of the mantissae
.946d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9470	10 3c		bpl $94ae			bpl 	_FAExit 					; if no, we are done.
.9472	20 61 8d	jsr $8d61			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9475	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9478	80 34		bra $94ae			bra 	_FAExit
.947a					_FADifferentSigns:
.947a	20 ab 84	jsr $84ab			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.947d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9480	10 2c		bpl $94ae			bpl 	_FAExit 					; if no, we are done.
.9482	20 ea 8c	jsr $8cea			jsr 	NSMNegate 					; netate result
.9485	20 f3 8c	jsr $8cf3			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9488	80 24		bra $94ae			bra 	_FAExit
.948a					_FAReturn1:
.948a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.948d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9490	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9493	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9496	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9499	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.949c	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.949f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94a2	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.94a5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94a8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.94ab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94ae					_FAExit:
.94ae	7a		ply				ply
.94af	68		pla				pla
.94b0	60		rts				rts
.94b1					_FAShiftToExponent:
.94b1					_FAShiftToExponent2:
.94b1	98		tya				tya 								; compare Y to exponent
.94b2	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.94b5	f0 08		beq $94bf			beq 	_FASEExit 					; exit if so.
.94b7	20 61 8d	jsr $8d61			jsr 	NSMShiftRight	 			; shift the mantissa right
.94ba	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.94bd	80 f2		bra $94b1			bra 	_FAShiftToExponent2
.94bf					_FASEExit:
.94bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.94c0					CompareFloat:
.94c0	20 27 94	jsr $9427			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.94c3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.94c6	29 f8		and #$f8			and 	#$F8
.94c8	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.94cb	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.94ce	f0 09		beq $94d9			beq 	_FCExit 					; zero, so approximately identical
.94d0	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.94d2	3c 00 06	bit $0600,x			bit 	NSStatus,x
.94d5	10 02		bpl $94d9			bpl 	_FCExit
.94d7					_FCNegative:
.94d7	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.94d9					_FCExit:
.94d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.94da					FDivideCommand:
.94da	fa		plx				plx	 								; restore stack position
.94db	20 c0 95	jsr $95c0			jsr 	FloatPrepare 				; prepare for floats
.94de					FloatDivide:
.94de	48		pha				pha
.94df	e8		inx				inx
.94e0	20 d1 95	jsr $95d1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94e3	ca		dex				dex
.94e4	c9 00		cmp #$00			cmp 	#0
.94e6	f0 20		beq $9508			beq 	_FDZero
.94e8	20 d1 95	jsr $95d1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94eb	f0 19		beq $9506			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94ed	20 1b 93	jsr $931b			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.94f0	20 a8 92	jsr $92a8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.94f3	20 d1 95	jsr $95d1			jsr		NSNormalise 				; renormalise
.94f6	20 b6 93	jsr $93b6			jsr 	CalculateSign 				; calculate result sign
.94f9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.94fc	38		sec				sec
.94fd	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9500	38		sec				sec
.9501	e9 1e		sbc #$1e			sbc 	#30
.9503	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9506					_FDExit:
.9506	68		pla				pla
.9507	60		rts				rts
.9508					_FDZero:
.9508	a9 03		lda #$03		lda	#3
.950a	4c 97 82	jmp $8297		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.950d					FloatFractionalPart:
.950d	5a		phy				phy
.950e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9511	29 7f		and #$7f			and 	#$7F
.9513	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9516	20 d1 95	jsr $95d1			jsr 	NSNormalise
.9519	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.951c	38		sec				sec
.951d	e9 e0		sbc #$e0			sbc 	#$E0
.951f	90 31		bcc $9552			bcc 	_FFPExit 					; already fractional
.9521	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9523	b0 2a		bcs $954f			bcs 	_FFPZero
.9525	a8		tay				tay 								; put count to do in Y
.9526	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9529	20 54 95	jsr $9554			jsr 	_FFPPartial
.952c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.952f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9532	20 54 95	jsr $9554			jsr 	_FFPPartial
.9535	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9538	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.953b	20 54 95	jsr $9554			jsr 	_FFPPartial
.953e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9541	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9544	20 54 95	jsr $9554			jsr 	_FFPPartial
.9547	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.954a	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; zeroed check.
.954d	d0 03		bne $9552			bne 	_FFPExit
.954f					_FFPZero:
.954f	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero
.9552					_FFPExit:
.9552	7a		ply				ply
.9553	60		rts				rts
.9554					_FFPPartial:
.9554	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9556	f0 17		beq $956f			beq 	_FFFPPExit
.9558	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.955a	b0 0c		bcs $9568			bcs 	_FFFPPWholeByte
.955c	5a		phy				phy
.955d					_FFFPPLeft:
.955d	0a		asl a				asl 	a
.955e	88		dey				dey
.955f	d0 fc		bne $955d			bne 	_FFFPPLeft
.9561	7a		ply				ply
.9562					_FFFPPRight:
.9562	4a		lsr a				lsr 	a
.9563	88		dey				dey
.9564	d0 fc		bne $9562			bne 	_FFFPPRight
.9566	80 07		bra $956f			bra 	_FFFPPExit
.9568					_FFFPPWholeByte:
.9568	98		tya				tya 								; subtract 8 from count
.9569	38		sec				sec
.956a	e9 08		sbc #$08			sbc 	#8
.956c	a8		tay				tay
.956d	a9 00		lda #$00			lda 	#0 							; and clear all
.956f					_FFFPPExit:
.956f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9570					FloatIntegerPart:
.9570	48		pha				pha
.9571	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9574	f0 1f		beq $9595			beq 	_FIPExit 					; if so do nothing
.9576	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; is it zero ?
.9579	f0 17		beq $9592			beq 	_FIPZero 					; if so return zero.
.957b	20 d1 95	jsr $95d1			jsr 	NSNormalise 				; normalise
.957e	f0 12		beq $9592			beq 	_FIPZero 					; normalised to zero, exit zero
.9580					_FIPShift:
.9580	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9583	10 08		bpl $958d			bpl 	_FIPCheckZero
.9585	20 61 8d	jsr $8d61			jsr 	NSMShiftRight 				; shift mantissa right
.9588	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.958b	80 f3		bra $9580			bra 	_FIPShift
.958d					_FIPCheckZero:
.958d	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; avoid -0 problem
.9590	d0 03		bne $9595			bne 	_FIPExit 					; set to zero if mantissa zero.
.9592					_FIPZero:
.9592	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero
.9595					_FIPExit:
.9595	68		pla				pla
.9596	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9597					FloatingPointMultiply:
.9597	20 c0 95	jsr $95c0			jsr 	FloatPrepare 				; prepare for floats
.959a					FloatMultiply:
.959a	48		pha				pha
.959b	20 d1 95	jsr $95d1			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.959e	f0 1b		beq $95bb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.95a0	e8		inx				inx
.95a1	20 d1 95	jsr $95d1			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95a4	ca		dex				dex
.95a5	c9 00		cmp #$00			cmp 	#0
.95a7	f0 0f		beq $95b8			beq 	_FDSetZero
.95a9	20 71 93	jsr $9371			jsr 	MultiplyShort 				; calculate the result.
.95ac	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.95af	18		clc				clc
.95b0	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.95b3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95b6	80 03		bra $95bb			bra 	_FDExit
.95b8					_FDSetZero:
.95b8	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero 					; return 0
.95bb					_FDExit:
.95bb	20 d1 95	jsr $95d1			jsr 	NSNormalise 				; normalise the result
.95be	68		pla				pla
.95bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.95c0					FloatPrepare:
.95c0	20 a9 87	jsr $87a9			jsr 	DereferenceTopTwo 			; dereference the top two values
.95c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.95c6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.95c9	29 10		and #$10			and 	#NSBIsString
.95cb	d0 01		bne $95ce			bne 	_FDType
.95cd	60		rts				rts
.95ce					_FDType:
.95ce	4c 2b 97	jmp $972b			jmp 	TypeError
.95d1					NSNormalise:
.95d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.95d4	29 80		and #$80			and 	#$80
.95d6	09 08		ora #$08			ora 	#NSTFloat
.95d8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95db	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; if zero exit
.95de	d0 09		bne $95e9			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.95e0	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.95e3	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.95e6	a9 00		lda #$00			lda 	#0 							; set Z flag
.95e8	60		rts				rts
.95e9					_NSNormaliseOptimise:
.95e9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.95ec	d0 22		bne $9610			bne 	_NSNormaliseLoop
.95ee	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.95f1	30 1d		bmi $9610			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.95f3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95f6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.95f9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95fc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.95ff	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9602	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9605	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9608	38		sec				sec
.9609	e9 08		sbc #$08			sbc 	#8
.960b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.960e	80 d9		bra $95e9			bra 	_NSNormaliseOptimise
.9610					_NSNormaliseLoop:
.9610	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9613	70 08		bvs $961d			bvs 	_NSNExit 					; exit if so with Z flag clear
.9615	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; shift mantissa left
.9618	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.961b	80 f3		bra $9610			bra 	_NSNormaliseLoop
.961d					_NSNExit:
.961d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.961f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.86d6					AssignNumber:
.86d6	5a		phy				phy
.86d7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.86da	85 36		sta $36				sta 	zTemp0
.86dc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86df	85 37		sta $37				sta 	zTemp0+1
.86e1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.86e4	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.86e6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86e9	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.86eb	c9 08		cmp #$08			cmp 	#NSTFloat
.86ed	f0 2a		beq $8719			beq 	_ANFloat
.86ef	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.86f2	f0 05		beq $86f9			beq		_ANNotFloat
.86f4	e8		inx				inx
.86f5	20 70 95	jsr $9570			jsr 	FloatIntegerPart 			; make it an integer
.86f8	ca		dex				dex
.86f9					_ANNotFloat:
.86f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.86fc	29 03		and #$03			and 	#3
.86fe	d0 05		bne $8705			bne 	_ANByteWord
.8700	20 25 87	jsr $8725			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8703	80 1e		bra $8723			bra 	_ANExit
.8705					_ANByteWord:
.8705	48		pha				pha 								; save count
.8706	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8709	92 36		sta ($36)			sta 	(zTemp0)
.870b	68		pla				pla
.870c	c9 01		cmp #$01			cmp	 	#1
.870e	f0 13		beq $8723			beq 	_ANExit
.8710	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8713	a0 01		ldy #$01			ldy 	#1
.8715	91 36		sta ($36),y			sta 	(zTemp0),y
.8717	80 0a		bra $8723			bra 	_ANExit
.8719					_ANFloat:
.8719	20 25 87	jsr $8725			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.871c	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.871f	a0 04		ldy #$04			ldy 	#4
.8721	91 36		sta ($36),y			sta 	(zTemp0),y
.8723					_ANExit:
.8723	7a		ply				ply
.8724	60		rts				rts
.8725					_ANCopy4PackSign:
.8725	a0 03		ldy #$03			ldy 	#3
.8727	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.872a	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.872c	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.872f	91 36		sta ($36),y			sta 	(zTemp0),y
.8731	88		dey				dey
.8732	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8735	91 36		sta ($36),y			sta 	(zTemp0),y
.8737	88		dey				dey
.8738	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.873b	91 36		sta ($36),y			sta 	(zTemp0),y
.873d	88		dey				dey
.873e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8741	91 36		sta ($36),y			sta 	(zTemp0),y
.8743	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8744					AssignString:
.8744	5a		phy				phy
.8745	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8748	85 38		sta $38				sta 	zTemp1
.874a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.874d	85 39		sta $39				sta 	zTemp1+1
.874f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8752	85 36		sta $36				sta 	zTemp0
.8754	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8757	85 37		sta $37				sta 	zTemp0+1
.8759	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.875b	b1 36		lda ($36),y			lda 	(zTemp0),y
.875d	f0 23		beq $8782			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.875f	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8760	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8762	e9 02		sbc #$02			sbc 	#2
.8764	85 3c		sta $3c				sta 	zsTemp
.8766	a0 01		ldy #$01			ldy 	#1
.8768	b1 36		lda ($36),y			lda 	(zTemp0),y
.876a	e9 00		sbc #$00			sbc 	#0
.876c	85 3d		sta $3d				sta 	zsTemp+1
.876e	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8770					_ASGetLength:
.8770	c8		iny				iny
.8771	b1 38		lda ($38),y			lda 	(zTemp1),y
.8773	d0 fb		bne $8770			bne 	_ASGetLength
.8775	98		tya				tya 								; is this length <= current length
.8776	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8778	90 20		bcc $879a			bcc 	_ASCopyString
.877a	f0 1e		beq $879a			beq 	_ASCopyString
.877c	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.877e	a0 01		ldy #$01			ldy 	#1
.8780	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8782					_ASNewStringRequired:
.8782	e8		inx				inx 								; concrete the new string.
.8783	20 ec 97	jsr $97ec			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8786	ca		dex				dex
.8787	18		clc				clc
.8788	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.878b	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.878d	92 36		sta ($36)			sta 	(zTemp0)
.878f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8792	69 00		adc #$00			adc 	#0
.8794	a0 01		ldy #$01			ldy 	#1
.8796	91 36		sta ($36),y			sta 	(zTemp0),y
.8798	80 0d		bra $87a7			bra 	_ASExit
.879a					_ASCopyString:
.879a	a0 00		ldy #$00			ldy 	#0
.879c					_ASCopyLoop:
.879c	b1 38		lda ($38),y			lda 	(zTemp1),y
.879e	c8		iny				iny
.879f	c8		iny				iny
.87a0	91 3c		sta ($3c),y			sta 	(zsTemp),y
.87a2	88		dey				dey
.87a3	c9 00		cmp #$00			cmp 	#0
.87a5	d0 f5		bne $879c			bne 	_ASCopyLoop
.87a7					_ASExit:
.87a7	7a		ply				ply
.87a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.87a9					DereferenceTopTwo:
.87a9	e8		inx				inx
.87aa	20 ae 87	jsr $87ae			jsr 	Dereference 				; deref x+1
.87ad	ca		dex				dex  								; falls through to deref x
.87ae					Dereference:
.87ae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.87b1	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.87b3	f0 57		beq $880c			beq 	_DRFExit 					; not a reference
.87b5	5a		phy				phy
.87b6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.87b9	85 36		sta $36				sta 	zTemp0
.87bb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87be	85 37		sta $37				sta 	zTemp0+1
.87c0	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.87c3	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.87c5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87c8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.87cb	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.87cd	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.87cf	f0 0f		beq $87e0			beq 	_DRFDereferenceTwo
.87d1	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.87d3	f0 39		beq $880e			beq 	_DRFFull
.87d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.87d8	29 03		and #$03			and 	#3
.87da	f0 32		beq $880e			beq 	_DRFFull 					; the whole word
.87dc	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.87de	f0 07		beq $87e7			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.87e0					_DRFDereferenceTwo:
.87e0	a0 01		ldy #$01			ldy 	#1
.87e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87e7					_DRFClear23:
.87e7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.87ea	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87ed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.87f0	29 18		and #$18			and 	#NSBTypeMask
.87f2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87f5	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.87f7	d0 12		bne $880b			bne 	_DRFNotString
.87f9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.87fc	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87ff	d0 0a		bne $880b			bne 	_DRFNotString
.8801	a9 0d		lda #$0d			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8803	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8806	a9 88		lda #$88			lda 	#_DRFNullString >> 8
.8808	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.880b					_DRFNotString
.880b	7a		ply				ply 								; restore Y and exit
.880c					_DRFExit:
.880c	60		rts				rts
.880d					_DRFNullString:
>880d	00						.byte 	0
.880e					_DRFFull:
.880e	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8810	b1 36		lda ($36),y			lda 	(zTemp0),y
.8812	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8815	c8		iny				iny
.8816	b1 36		lda ($36),y			lda 	(zTemp0),y
.8818	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.881b	c8		iny				iny
.881c	b1 36		lda ($36),y			lda 	(zTemp0),y
.881e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8821	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8824	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8827	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8829	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.882c	f0 06		beq $8834			beq 	_DRFNoExponent
.882e	c8		iny				iny 								; if not, read the exponent as well.
.882f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8831	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8834					_DRFNoExponent:
.8834	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8837	10 0d		bpl $8846			bpl 	_DRFExit2 					; if not, then exit.
.8839	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.883b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.883e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8841	09 80		ora #$80			ora 	#NSBIsNegative
.8843	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8846					_DRFExit2:
.8846	7a		ply				ply
.8847	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8848					EncodeNumberStart:
.8848	38		sec				sec
.8849	80 01		bra $884c			bra 	EncodeNumberContinue+1
.884b					EncodeNumberContinue:
.884b	18		clc				clc
.884c					EncodeNumber:
.884c	08		php				php 								; save reset.
.884d	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.884f	f0 12		beq $8863			beq 	_ENIsOkay
.8851	c9 30		cmp #$30			cmp 	#"0"
.8853	90 04		bcc $8859			bcc 	_ENBadNumber
.8855	c9 3a		cmp #$3a			cmp 	#"9"+1
.8857	90 0a		bcc $8863			bcc 	_ENIsOkay
.8859					_ENBadNumber:
.8859	28		plp				plp 								; throw saved reset
.885a	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.885d	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.885f	f0 7e		beq $88df			beq 	_ENConstructFinal
.8861					_ENFail:
.8861	18		clc				clc 								; not allowed
.8862	60		rts				rts
.8863					_ENIsOkay:
.8863	28		plp				plp 								; are we restarting
.8864	90 15		bcc $887b			bcc 	_ENNoRestart
.8866					_ENStartEncode:
.8866	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8868	f0 0c		beq $8876			beq 	_ENFirstDP
.886a	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.886c	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.886f	a9 01		lda #$01			lda 	#ESTA_Low
.8871					_ENExitChange:
.8871	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8874	38		sec				sec
.8875	60		rts				rts
.8876					_ENFirstDP:
.8876	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero 					; clear integer part
.8879	80 3f		bra $88ba			bra 	_ESTASwitchFloat			; go straight to float and exi
.887b					_ENNoRestart:
.887b	48		pha				pha 								; save on stack.
.887c	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.887f	c9 01		cmp #$01			cmp 	#ESTA_Low
.8881	f0 09		beq $888c			beq  	_ESTALowState
.8883	c9 02		cmp #$02			cmp 	#ESTA_High
.8885	f0 29		beq $88b0			beq 	_ESTAHighState
.8887	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8889	f0 3b		beq $88c6			beq 	_ESTADecimalState
>888b	db						.byte 	$DB 						; causes a break in the emulator
.888c					_ESTALowState:
.888c	68		pla				pla 								; get value back
.888d	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.888f	f0 29		beq $88ba			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8891	29 0f		and #$0f			and 	#15 						; make digit
.8893	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8896	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8899	0a		asl a				asl 	a
.889a	0a		asl a				asl 	a
.889b	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.889e	0a		asl a				asl 	a
.889f	6d 06 07	adc $0706			adc 	DigitTemp
.88a2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88a5	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.88a7	90 05		bcc $88ae			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.88a9	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.88ab	8d 05 07	sta $0705			sta 	EncodeState
.88ae					_ESTANoSwitch:
.88ae	38		sec				sec
.88af	60		rts				rts
.88b0					_ESTAHighState:
.88b0	68		pla				pla 								; get value back
.88b1	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.88b3	f0 05		beq $88ba			beq 	_ESTASwitchFloat
.88b5	20 19 89	jsr $8919			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.88b8	38		sec				sec
.88b9	60		rts				rts
.88ba					_ESTASwitchFloat:
.88ba	9c 07 07	stz $0707			stz 	DecimalCount
.88bd	e8		inx				inx 								; zero the decimal additive.
.88be	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero
.88c1	ca		dex				dex
.88c2	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.88c4	80 ab		bra $8871			bra 	_ENExitChange
.88c6					_ESTADecimalState:
.88c6	68		pla				pla 								; digit.
.88c7	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.88c9	f0 96		beq $8861			beq 	_ENFail
.88cb	e8		inx				inx 								; put digit into fractional part of X+1
.88cc	20 19 89	jsr $8919			jsr 	ESTAShiftDigitIntoMantissa
.88cf	ca		dex				dex
.88d0	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.88d3	ad 07 07	lda $0707			lda 	DecimalCount
.88d6	c9 0b		cmp #$0b			cmp 	#11
.88d8	f0 02		beq $88dc			beq 	_ESTADSFail
.88da	38		sec				sec
.88db	60		rts				rts
.88dc					_ESTADSFail:
.88dc	4c 26 97	jmp $9726			jmp 	RangeError
.88df					_ENConstructFinal:
.88df	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.88e2	f0 33		beq $8917			beq 	_ENCFExit 					; no decimals
.88e4	5a		phy				phy
.88e5	0a		asl a				asl 	a 							; x 4 and CLC
.88e6	0a		asl a				asl 	a
.88e7	6d 07 07	adc $0707			adc 	DecimalCount
.88ea	a8		tay				tay
.88eb	b9 e5 96	lda $96e5,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.88ee	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88f1	b9 e6 96	lda $96e6,y			lda 	DecimalScalarTable-5+1,y
.88f4	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.88f7	b9 e7 96	lda $96e7,y			lda 	DecimalScalarTable-5+2,y
.88fa	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.88fd	b9 e8 96	lda $96e8,y			lda 	DecimalScalarTable-5+3,y
.8900	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8903	b9 e9 96	lda $96e9,y			lda 	DecimalScalarTable-5+4,y
.8906	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8909	a9 08		lda #$08			lda 	#NSTFloat
.890b	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.890e	7a		ply				ply
.890f	e8		inx				inx 								; multiply decimal const by decimal scalar
.8910	20 9a 95	jsr $959a			jsr 	FloatMultiply
.8913	ca		dex				dex
.8914	20 2f 94	jsr $942f			jsr 	FloatAdd 					; add to integer part.
.8917					_ENCFExit:
.8917	18		clc				clc 								; reject the digit.
.8918	60		rts				rts
.8919					ESTAShiftDigitIntoMantissa:
.8919	29 0f		and #$0f			and 	#15 						; save digit
.891b	48		pha				pha
.891c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.891f	48		pha				pha
.8920	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8923	48		pha				pha
.8924	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8927	48		pha				pha
.8928	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.892b	48		pha				pha
.892c	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; x 2
.892f	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; x 4
.8932	18		clc				clc 								; pop mantissa and add
.8933	68		pla				pla
.8934	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8937	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.893a	68		pla				pla
.893b	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.893e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8941	68		pla				pla
.8942	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8945	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8948	68		pla				pla
.8949	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.894c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.894f	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; x 10
.8952	68		pla				pla 								; add digit
.8953	18		clc				clc
.8954	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8957	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.895a	90 0d		bcc $8969			bcc 	_ESTASDExit
.895c	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.895f	d0 08		bne $8969			bne 	_ESTASDExit
.8961	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8964	d0 03		bne $8969			bne 	_ESTASDExit
.8966	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8969					_ESTASDExit:
.8969	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.896a					EvaluateTerm:
.896a	b1 30		lda ($30),y			lda 	(codePtr),y
.896c	30 18		bmi $8986			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.896e	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8970	b0 6f		bcs $89e1			bcs 	_ETVariable
.8972	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8974	90 6e		bcc $89e4			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8976	c9 3a		cmp #$3a			cmp 	#'9'+1
.8978	b0 6a		bcs $89e4			bcs 	_ETPuncUnary
.897a	20 48 88	jsr $8848			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.897d					_ETNumber:
.897d	c8		iny				iny 								; keep encoding until we have the numbers
.897e	b1 30		lda ($30),y			lda 	(codePtr),y
.8980	20 4b 88	jsr $884b			jsr 	EncodeNumberContinue
.8983	b0 f8		bcs $897d			bcs 	_ETNumber 					; go back if accepted.
.8985	60		rts				rts
.8986					_ETCheckUnary:
.8986	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8988	f0 41		beq $89cb			beq 	_ETString
.898a	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.898c	f0 12		beq $89a0			beq 	_ETHexConstant
.898e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8990	90 0b		bcc $899d			bcc 	_ETSyntaxError
.8992	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8994	b0 07		bcs $899d			bcs 	_ETSyntaxError
.8996	da		phx				phx 								; push X on the stack
.8997	0a		asl a				asl 	a 							; put vector x 2 into X
.8998	aa		tax				tax
.8999	c8		iny				iny 								; consume unary function token
.899a	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.899d					_ETSyntaxError:
.899d	4c 21 97	jmp $9721			jmp 	SyntaxError
.89a0					_ETHexConstant:
.89a0	c8		iny				iny 								; skip #
.89a1	c8		iny				iny 								; skip count
.89a2	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero 					; clear result
.89a5					_ETHLoop:
.89a5	b1 30		lda ($30),y			lda 	(codePtr),y
.89a7	c8		iny				iny 								; and consume
.89a8	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.89aa	f0 1e		beq $89ca			beq 	_ETHExit
.89ac	48		pha				pha 								; save on stack.
.89ad	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; x 2
.89b0	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; x 4
.89b3	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; x 8
.89b6	20 53 8d	jsr $8d53			jsr 	NSMShiftLeft 				; x 16
.89b9	68		pla				pla 								; ASCII
.89ba	c9 41		cmp #$41			cmp 	#'A'
.89bc	90 02		bcc $89c0			bcc 	_ETHNotChar
.89be	e9 07		sbc #$07			sbc 	#7
.89c0					_ETHNotChar:
.89c0	29 0f		and #$0f			and 	#15 						; digit now
.89c2	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.89c5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89c8	80 db		bra $89a5			bra 	_ETHLoop 					; go round.
.89ca					_ETHExit:
.89ca	60		rts				rts
.89cb					_ETString:
.89cb	c8		iny				iny 								; look at length
.89cc	b1 30		lda ($30),y			lda 	(codePtr),y
.89ce	48		pha				pha
.89cf	c8		iny				iny 								; first character
.89d0	20 21 92	jsr $9221			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.89d3	68		pla				pla 								; restore count and save
.89d4	85 36		sta $36				sta 	zTemp0
.89d6	98		tya				tya 								; add length to Y to skip it.
.89d7	18		clc				clc
.89d8	65 36		adc $36				adc 	zTemp0
.89da	a8		tay				tay
.89db	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.89dd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89e0	60		rts				rts
.89e1					_ETVariable:
.89e1	4c 3b 8a	jmp $8a3b			jmp 	VariableHandler
.89e4					_ETPuncUnary:
.89e4	c8		iny				iny 								; consume the unary character
.89e5	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.89e7	f0 2d		beq $8a16			beq 	_ETUnaryNegate
.89e9	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.89eb	f0 39		beq $8a26			beq 	_ETDereference
.89ed	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.89ef	f0 43		beq $8a34			beq 	_ETParenthesis
.89f1	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.89f3	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.89f5	f0 06		beq $89fd			beq 	_ETIndirection
.89f7	e6 36		inc $36				inc 	zTemp0
.89f9	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.89fb	d0 a0		bne $899d			bne 	_ETSyntaxError
.89fd					_ETIndirection:
.89fd	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.89ff	1a		inc a				inc 	a
.8a00	48		pha				pha
.8a01	20 6a 89	jsr $896a			jsr 	EvaluateTerm				; evaluate the term
.8a04	20 ae 87	jsr $87ae			jsr 	Dereference 				; dereference it.
.8a07	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8a0a	d0 07		bne $8a13			bne 	_ETTypeMismatch
.8a0c	68		pla				pla 								; indirection 1-2
.8a0d	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8a0f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a12	60		rts				rts
.8a13					_ETTypeMismatch:
.8a13	4c 2b 97	jmp $972b			jmp 	TypeError
.8a16					_ETUnaryNegate:
.8a16	20 6a 89	jsr $896a			jsr 	EvaluateTerm				; evaluate the term
.8a19	20 ae 87	jsr $87ae			jsr 	Dereference 				; dereference it.
.8a1c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8a1f	29 10		and #$10			and 	#NSTString
.8a21	d0 f0		bne $8a13			bne 	_ETTypeMismatch
.8a23	4c ea 8c	jmp $8cea			jmp 	NSMNegate  					; just toggles the sign bit.
.8a26					_ETDereference:
.8a26	20 6a 89	jsr $896a			jsr 	EvaluateTerm				; evaluate the term
.8a29	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8a2c	29 20		and #$20			and 	#NSBIsReference
.8a2e	f0 e3		beq $8a13			beq 	_ETTypeMismatch
.8a30	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8a33	60		rts				rts
.8a34					_ETParenthesis:
.8a34	20 99 86	jsr $8699			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8a37	20 68 92	jsr $9268			jsr 	CheckRightBracket 			; check for )
.8a3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8a3b					VariableHandler:
.8a3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8a3d	18		clc				clc
.8a3e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a40	85 37		sta $37				sta 	zTemp0+1
.8a42	c8		iny				iny
.8a43	b1 30		lda ($30),y			lda 	(codePtr),y
.8a45	85 36		sta $36				sta 	zTemp0
.8a47	c8		iny				iny
.8a48	18		clc				clc									; copy variable address+3 to mantissa
.8a49	69 03		adc #$03			adc 	#3
.8a4b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a4e	a5 37		lda $37				lda 	zTemp0+1
.8a50	69 00		adc #$00			adc 	#0
.8a52	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a55	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a58	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a5b	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8a5e	5a		phy				phy
.8a5f	a0 02		ldy #$02			ldy 	#2 							; read type
.8a61	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a63	7a		ply				ply
.8a64	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8a66	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8a68	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a6b	29 04		and #$04			and 	#NSBIsArray
.8a6d	d0 01		bne $8a70			bne 	_VHArray
.8a6f	60		rts				rts
.8a70					_VHArray:
>8a70	db						.byte 	$DB 						; causes a break in the emulator
.8a71	80 fd		bra $8a70			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9620					AbsUnary:
.9620	fa		plx				plx 								; restore stack pos
.9621	20 92 8c	jsr $8c92			jsr 	EvaluateNumber 				; get a float or int
.9624	20 68 92	jsr $9268			jsr 	CheckRightBracket
.9627	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.962a	29 7f		and #$7f			and 	#$7F
.962c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.962f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8a73					AllocUnary:
.8a73	fa		plx				plx 								; restore stack pos
.8a74	20 ca 8c	jsr $8cca			jsr 	Evaluate16BitInteger		; get bytes required.
.8a77	20 68 92	jsr $9268			jsr 	CheckRightBracket
.8a7a	da		phx				phx 								; save X/Y
.8a7b	5a		phy				phy
.8a7c	8a		txa				txa 								; copy X into Y
.8a7d	a8		tay				tay
.8a7e	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8a81	aa		tax				tax
.8a82	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8a85	20 92 8a	jsr $8a92			jsr 	AllocateXABytes 			; allocate memory
.8a88	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8a8b	8a		txa				txa
.8a8c	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8a8f	7a		ply				ply
.8a90	fa		plx				plx
.8a91	60		rts				rts
.8a92					AllocateXABytes:
.8a92	5a		phy				phy
.8a93	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8a96	5a		phy				phy
.8a97	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8a9a	5a		phy				phy
.8a9b	18		clc				clc
.8a9c	6d 0c 07	adc $070c			adc 	lowMemPtr
.8a9f	8d 0c 07	sta $070c			sta 	lowMemPtr
.8aa2	8a		txa				txa
.8aa3	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8aa6	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8aa9	fa		plx				plx
.8aaa	68		pla				pla
.8aab	7a		ply				ply
.8aac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9630					AscUnary:
.9630	fa		plx				plx 								; restore stack pos
.9631	20 9d 8c	jsr $8c9d			jsr 	EvaluateString 				; get a string
.9634	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9636	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.9639	20 68 92	jsr $9268			jsr 	CheckRightBracket
.963c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.963d					FracUnary:
.963d	fa		plx				plx 								; restore stack pos
.963e	20 92 8c	jsr $8c92			jsr 	EvaluateNumber 				; get a float or int
.9641	20 68 92	jsr $9268			jsr 	CheckRightBracket
.9644	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9647	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9649	f0 04		beq $964f			beq 	_IUZero
.964b	20 0d 95	jsr $950d			jsr 	FloatFractionalPart
.964e	60		rts				rts
.964f					_IUZero:
.964f	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero
.9652	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9653					IntUnary:
.9653	fa		plx				plx 								; restore stack pos
.9654	20 92 8c	jsr $8c92			jsr 	EvaluateNumber 				; get a float or int
.9657	20 68 92	jsr $9268			jsr 	CheckRightBracket
.965a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.965d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.965f	f0 03		beq $9664			beq 	_IUExit
.9661	20 70 95	jsr $9570			jsr 	FloatIntegerPart
.9664					_IUExit:
.9664	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9665					LenUnary:
.9665	fa		plx				plx 								; restore stack pos
.9666	20 9d 8c	jsr $8c9d			jsr 	EvaluateString 				; get a string
.9669	5a		phy				phy
.966a	a0 00		ldy #$00			ldy 	#0 							; find length
.966c					_LenFind:
.966c	b1 36		lda ($36),y			lda 	(zTemp0),y
.966e	f0 06		beq $9676			beq 	_LenExit
.9670	c8		iny				iny
.9671	d0 f9		bne $966c			bne 	_LenFind
.9673	4c 26 97	jmp $9726			jmp 	RangeError 					; string > 255
.9676					_LenExit:
.9676	98		tya				tya
.9677	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.967a	7a		ply				ply
.967b	20 68 92	jsr $9268			jsr 	CheckRightBracket
.967e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8aad					Unary_Not:
.8aad	fa		plx				plx
.8aae	20 b5 8c	jsr $8cb5			jsr 	EvaluateInteger 			; get integer
.8ab1	20 68 92	jsr $9268			jsr 	CheckRightBracket
.8ab4	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; zero mantissa ?
.8ab7	f0 04		beq $8abd			beq 	_NotZero
.8ab9	20 3e 8d	jsr $8d3e			jsr 	NSMSetZero
.8abc	60		rts				rts
.8abd					_NotZero:
.8abd	4c fd 82	jmp $82fd			jmp 	ReturnTrue
.8ac0					_UNBad:
.8ac0	4c 30 97	jmp $9730			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8ac3					Unary_Rnd:
.8ac3	20 92 8c	jsr $8c92			jsr 	EvaluateNumber 				; number to use.
.8ac6	20 68 92	jsr $9268			jsr 	CheckRightBracket 			; closing bracket
.8ac9	20 f2 8a	jsr $8af2			jsr 	Random32Bit 				; generate a number.
.8acc	ad 08 07	lda $0708			lda 	RandomSeed+0
.8acf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ad2	ad 09 07	lda $0709			lda 	RandomSeed+1
.8ad5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ad8	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8adb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ade	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8ae1	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8ae3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ae6	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8ae8	8d 28 06	sta $0628			sta 	NSExponent
.8aeb	a9 08		lda #$08			lda 	#NSTFloat
.8aed	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8af0	db						.byte 	$DB 						; causes a break in the emulator
.8af1	60		rts				rts
.8af2					Random32Bit:
.8af2	5a		phy				phy
.8af3	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8af5	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8af8	d0 03		bne $8afd			bne 	_Random1
.8afa	a8		tay				tay 								; if so do it 256 times
.8afb	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8afd					_Random1:
.8afd	0a		asl a				asl 	a 							; LSFR RNG
.8afe	2e 09 07	rol $0709			rol 	RandomSeed+1
.8b01	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8b04	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8b07	90 02		bcc $8b0b			bcc 	_Random2
.8b09	49 c5		eor #$c5			eor 	#$C5
.8b0b					_Random2:
.8b0b	88		dey				dey
.8b0c	d0 ef		bne $8afd			bne 	_Random1
.8b0e	7a		ply				ply
.8b0f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.967f					SgnUnary:
.967f	fa		plx				plx 								; restore stack pos
.9680	20 92 8c	jsr $8c92			jsr 	EvaluateNumber 				; get a float or int
.9683	20 68 92	jsr $9268			jsr 	CheckRightBracket
.9686	20 6e 8d	jsr $8d6e			jsr 	NSMIsZero 					; if zero
.9689	f0 10		beq $969b			beq 	_SGZero  					; return Int Zero
.968b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.968e	48		pha				pha
.968f	a9 01		lda #$01			lda 	#1 							; set to 1
.9691	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.9694	68		pla				pla
.9695	29 80		and #$80			and		#$80 						; copy the sign byte out
.9697	9d 00 06	sta $0600,x			sta 	NSStatus,x
.969a	60		rts				rts
.969b	20 3e 8d	jsr $8d3e	_SGZero:jsr 	NSMSetZero
.969e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.969f					ValUnary:
.969f	fa		plx				plx 								; restore stack pos
.96a0	20 b5 96	jsr $96b5			jsr 	ValMainCode 				; do the main val() code
.96a3	b0 01		bcs $96a6			bcs 	_VUError 					; couldn't convert
.96a5	60		rts				rts
.96a6					_VUError:
.96a6	4c 2b 97	jmp $972b			jmp 	TypeError
.96a9					IsValUnary:
.96a9	fa		plx				plx 								; restore stack pos
.96aa	20 b5 96	jsr $96b5			jsr 	ValMainCode 				; do the main val() code
.96ad	b0 03		bcs $96b2			bcs 	_VUBad
.96af	4c fd 82	jmp $82fd			jmp 	ReturnTrue
.96b2					_VUBad:
.96b2	4c 09 83	jmp $8309			jmp 	ReturnFalse
.96b5					ValMainCode:
.96b5	20 9d 8c	jsr $8c9d			jsr 	EvaluateString 				; get a string
.96b8	20 68 92	jsr $9268			jsr 	CheckRightBracket 			; check right bracket present
.96bb	5a		phy				phy
.96bc	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.96be	f0 17		beq $96d7			beq 	_VMCFail2
.96c0	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.96c2	48		pha				pha 								; save first character
.96c3	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.96c5	d0 01		bne $96c8			bne 	_VMCStart
.96c7	c8		iny				iny 								; skip over -
.96c8					_VMCStart:
.96c8	38		sec				sec 								; initialise first time round.
.96c9					_VMCNext:
.96c9	c8		iny				iny 								; pre-increment
.96ca	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.96cc	f0 0c		beq $96da			beq 	_VMCSuccess 				; successful.
.96ce	20 4c 88	jsr $884c			jsr 	EncodeNumber 				; send it to the number-builder
.96d1	90 03		bcc $96d6			bcc 	_VMCFail 					; if failed, give up.
.96d3	18		clc				clc 								; next time round, countinue
.96d4	80 f3		bra $96c9			bra 	_VMCNext
.96d6					_VMCFail:
.96d6	68		pla				pla
.96d7					_VMCFail2:
.96d7	7a		ply				ply
.96d8	38		sec				sec
.96d9	60		rts				rts
.96da					_VMCSuccess:
.96da	a9 00		lda #$00			lda 	#0 							; construct final
.96dc	20 4c 88	jsr $884c			jsr 	EncodeNumber
.96df	68		pla				pla
.96e0	c9 2d		cmp #$2d			cmp 	#"-"
.96e2	d0 03		bne $96e7			bne 	_VMCNotNegative
.96e4	20 ea 8c	jsr $8cea			jsr		NSMNegate
.96e7					_VMCNotNegative:
.96e7	7a		ply				ply
.96e8	18		clc				clc
.96e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8b10					ChrUnary:
.8b10	fa		plx				plx 								; restore stack pos
.8b11	20 d6 8c	jsr $8cd6			jsr 	Evaluate8BitInteger			; get value
.8b14	48		pha				pha
.8b15	20 68 92	jsr $9268			jsr 	CheckRightBracket
.8b18	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8b1a	20 67 98	jsr $9867			jsr 	StringTempAllocate
.8b1d	68		pla				pla 								; write number to it
.8b1e	20 a5 98	jsr $98a5			jsr 	StringTempWrite
.8b21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8b22					SpcUnary:
.8b22	fa		plx				plx 								; restore stack pos
.8b23	20 d6 8c	jsr $8cd6			jsr 	Evaluate8BitInteger			; get value
.8b26	5a		phy				phy
.8b27	48		pha				pha 								; save count
.8b28	20 67 98	jsr $9867			jsr 	StringTempAllocate
.8b2b	7a		ply				ply 								; to do count in Y
.8b2c					_SpcLoop:
.8b2c	c0 00		cpy #$00			cpy 	#0
.8b2e	f0 08		beq $8b38			beq 	_SpcExit
.8b30	a9 20		lda #$20			lda 	#32
.8b32	20 a5 98	jsr $98a5			jsr 	StringTempWrite
.8b35	88		dey				dey
.8b36	80 f4		bra $8b2c			bra 	_SPCLoop
.8b38					_SpcExit:
.8b38	7a		ply				ply
.8b39	20 68 92	jsr $9268			jsr 	CheckRightBracket
.8b3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8b3d					Unary_Str:
.8b3d	fa		plx				plx
.8b3e	20 92 8c	jsr $8c92			jsr 	EvaluateNumber  			; get number
.8b41	20 68 92	jsr $9268			jsr 	CheckRightBracket 			; closing bracket
.8b44	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b46	20 5f 8b	jsr $8b5f			jsr 	ConvertNumberToString 		; do the conversion.
.8b49	a9 21		lda #$21			lda		#33 						; create buffer
.8b4b	20 67 98	jsr $9867			jsr 	StringTempAllocate 			; allocate memory
.8b4e	da		phx				phx
.8b4f	a2 00		ldx #$00			ldx 	#0
.8b51					_USCopy:
.8b51	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b54	20 a5 98	jsr $98a5			jsr 	StringTempWrite
.8b57	e8		inx				inx
.8b58	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b5b	d0 f4		bne $8b51			bne 	_USCopy
.8b5d	fa		plx				plx
.8b5e	60		rts				rts
.8b5f					ConvertNumberToString:
.8b5f	5a		phy				phy 								; save code position
.8b60	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8b63	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8b66	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8b69	10 0a		bpl $8b75			bpl 	_CNTSNotNegative
.8b6b	29 7f		and #$7f			and 	#$7F 						; make +ve
.8b6d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b70	a9 2d		lda #$2d			lda 	#"-"
.8b72	20 db 8b	jsr $8bdb			jsr 	WriteDecimalBuffer
.8b75					_CNTSNotNegative:
.8b75	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8b78	f0 15		beq $8b8f			beq 	_CNTSNotFloat
.8b7a	e8		inx				inx 								; round up
.8b7b	a9 01		lda #$01			lda 	#1
.8b7d	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.8b80	ca		dex				dex
.8b81	bd 28 06	lda $0628,x			lda		NSExponent,x
.8b84	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8b87	a9 08		lda #$08			lda 	#NSTFloat
.8b89	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b8c	20 2f 94	jsr $942f			jsr 	FloatAdd
.8b8f					_CNTSNotFloat:
.8b8f	20 bd 8b	jsr $8bbd			jsr 	MakePlusTwoString
.8b92	20 0d 95	jsr $950d			jsr 	FloatFractionalPart 		; get the fractional part
.8b95	20 d1 95	jsr $95d1			jsr 	NSNormalise					; normalise , exit if zero
.8b98	f0 21		beq $8bbb			beq 	_CNTSExit
.8b9a	a9 2e		lda #$2e			lda 	#"."
.8b9c	20 db 8b	jsr $8bdb			jsr 	WriteDecimalBuffer 			; write decimal place
.8b9f					_CNTSDecimal:
.8b9f	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8ba2	30 17		bmi $8bbb			bmi 	_CNTSExit
.8ba4	e8		inx				inx 								; x 10.0
.8ba5	a9 0a		lda #$0a			lda 	#10
.8ba7	20 40 8d	jsr $8d40			jsr 	NSMSetByte
.8baa	a9 08		lda #$08			lda 	#NSTFloat
.8bac	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8baf	ca		dex				dex
.8bb0	20 9a 95	jsr $959a			jsr 	FloatMultiply
.8bb3	20 bd 8b	jsr $8bbd			jsr 	MakePlusTwoString
.8bb6	20 0d 95	jsr $950d			jsr 	FloatFractionalPart 		; get the fractional part
.8bb9	80 e4		bra $8b9f			bra 	_CNTSDecimal 				; keep going.
.8bbb					_CNTSExit:
.8bbb	7a		ply				ply
.8bbc	60		rts				rts
.8bbd					MakePlusTwoString:
.8bbd	da		phx				phx
.8bbe	20 15 8d	jsr $8d15			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8bc1	e8		inx				inx 								; access it
.8bc2	e8		inx				inx
.8bc3	20 70 95	jsr $9570			jsr 	FloatIntegerPart 			; make it an integer
.8bc6	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8bc8	20 d9 93	jsr $93d9			jsr 	ConvertInt32
.8bcb	a2 00		ldx #$00			ldx	 	#0
.8bcd					_MPTSCopy:
.8bcd	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8bd0	20 db 8b	jsr $8bdb			jsr 	WriteDecimalBuffer
.8bd3	e8		inx				inx
.8bd4	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8bd7	d0 f4		bne $8bcd			bne 	_MPTSCopy
.8bd9	fa		plx				plx
.8bda	60		rts				rts
.8bdb					WriteDecimalBuffer:
.8bdb	da		phx				phx
.8bdc	ae 14 07	ldx $0714			ldx 	dbOffset
.8bdf	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8be2	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8be5	ee 14 07	inc $0714			inc 	dbOffset
.8be8	fa		plx				plx
.8be9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8bea					Unary_Left:
.8bea	fa		plx				plx
.8beb	18		clc				clc 								; only one parameter
.8bec	20 61 8c	jsr $8c61			jsr 	SubstringInitial 			; set up.
.8bef	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8bf2	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bf5	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8bf8	80 2c		bra $8c26			bra 	SubstringMain
.8bfa					Unary_Right:
.8bfa	fa		plx				plx
.8bfb	18		clc				clc 								; only one parameter
.8bfc	20 61 8c	jsr $8c61			jsr 	SubstringInitial 			; set up.
.8bff	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8c02	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c05	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8c08	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8c0b	b0 02		bcs $8c0f			bcs 	_URNotUnderflow
.8c0d	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8c0f					_URNotUnderFlow:
.8c0f	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8c12	80 12		bra $8c26			bra 	SubStringMain
.8c14					Unary_Mid:
.8c14	fa		plx				plx
.8c15	38		sec				sec 								; two parameters
.8c16	20 61 8c	jsr $8c61			jsr 	SubstringInitial 			; set up.
.8c19	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8c1c	f0 05		beq $8c23			beq 	_UMError
.8c1e	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8c21	80 03		bra $8c26			bra 	SubStringMain
.8c23					_UMError:
.8c23	4c 30 97	jmp $9730			jmp 	ArgumentError
.8c26					SubStringMain:
.8c26	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8c29	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8c2c	b0 2d		bcs $8c5b			bcs 	_SSMNull 					; if so, return an empty string.
.8c2e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8c31	f0 28		beq $8c5b			beq 	_SSMNull 					; return empty string.
.8c33	18		clc				clc 								; add the offset +1 to the address and
.8c34	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8c37	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8c3a	85 36		sta $36				sta 	zTemp0
.8c3c	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8c3f	69 00		adc #$00			adc 	#0
.8c41	85 37		sta $37				sta 	zTemp0+1
.8c43					_SSMNoCarry:
.8c43	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c46	20 67 98	jsr $9867			jsr 	StringTempAllocate 			; allocate that many characters
.8c49	5a		phy				phy 								; save Y
.8c4a	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c4c					_SSMCopy:
.8c4c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c4e	f0 09		beq $8c59			beq 	_SSMEString 				; no more to copy
.8c50	20 a5 98	jsr $98a5			jsr 	StringTempWrite 			; and write it out.
.8c53	c8		iny				iny
.8c54	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c57	d0 f3		bne $8c4c			bne 	_SSMCopy
.8c59					_SSMEString:
.8c59	7a		ply				ply
.8c5a					_SSMExit:
.8c5a	60		rts				rts
.8c5b					_SSMNull:
.8c5b	a9 00		lda #$00			lda 	#0
.8c5d	20 67 98	jsr $9867			jsr 	StringTempAllocate
.8c60	60		rts				rts
.8c61					SubstringInitial:
.8c61	da		phx				phx 								; save initial stack position
.8c62	08		php				php 								; save carry on stack indicating 2 parameters
.8c63	20 9d 8c	jsr $8c9d			jsr 	EvaluateString 				; get a string
.8c66	5a		phy				phy 								; calculate length to exponent.
.8c67	a0 ff		ldy #$ff			ldy 	#$FF
.8c69					_SIFindLength:
.8c69	c8		iny				iny
.8c6a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c6c	d0 fb		bne $8c69			bne 	_SIFindLength
.8c6e	98		tya				tya
.8c6f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8c72	7a		ply				ply
.8c73	e8		inx				inx
.8c74	20 70 92	jsr $9270			jsr 	CheckComma 					; comma next
.8c77	20 d6 8c	jsr $8cd6			jsr 	Evaluate8BitInteger 		; get next parameter
.8c7a	28		plp				plp 								; is it the last parameter ?
.8c7b	90 07		bcc $8c84			bcc 	_SSIExit 					; if so, exit.
.8c7d	e8		inx				inx
.8c7e	20 70 92	jsr $9270			jsr 	CheckComma 					; comma next
.8c81	20 d6 8c	jsr $8cd6			jsr 	Evaluate8BitInteger 		; get last parameter
.8c84					_SSIExit:
.8c84	fa		plx				plx
.8c85	20 68 92	jsr $9268			jsr 	CheckRightBracket 			; check closing bracket
.8c88	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8c89					EvaluateValue:
.8c89	48		pha				pha
.8c8a	20 99 86	jsr $8699			jsr		EvaluateExpression 			; expression
.8c8d	20 ae 87	jsr $87ae			jsr 	Dereference					; derefernce it
.8c90	68		pla				pla
.8c91	60		rts				rts
.8c92					EvaluateNumber:
.8c92	20 89 8c	jsr $8c89			jsr 	EvaluateValue 				; get a value
.8c95	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c98	29 10		and #$10			and 	#NSBIsString
.8c9a	d0 16		bne $8cb2			bne 	HelperTypeError
.8c9c	60		rts				rts
.8c9d					EvaluateString:
.8c9d	20 89 8c	jsr $8c89			jsr 	EvaluateValue 				; get a value
.8ca0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8ca3	29 10		and #$10			and 	#NSBIsString
.8ca5	f0 0b		beq $8cb2			beq 	HelperTypeError
.8ca7					CopyAddressToTemp0:
.8ca7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8caa	85 36		sta $36				sta 	zTemp0
.8cac	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8caf	85 37		sta $37				sta 	zTemp0+1
.8cb1	60		rts				rts
.8cb2					HelperTypeError:
.8cb2	4c 2b 97	jmp $972b			jmp 	TypeError
.8cb5					EvaluateInteger:
.8cb5	20 92 8c	jsr $8c92			jsr 	EvaluateNumber
.8cb8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8cbb	d0 0a		bne $8cc7			bne 	HelperValueError 			; if not, it's a float.
.8cbd	60		rts				rts
.8cbe					EvaluateUnsignedInteger:
.8cbe	20 b5 8c	jsr $8cb5			jsr 	EvaluateInteger 			; check integer is +ve
.8cc1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cc4	30 01		bmi $8cc7			bmi 	HelperValueError
.8cc6	60		rts				rts
.8cc7					HelperValueError:
.8cc7	4c 30 97	jmp $9730			jmp 	ArgumentError
.8cca					Evaluate16BitInteger:
.8cca	20 be 8c	jsr $8cbe			jsr	 	EvaluateUnsignedInteger		; get integer
.8ccd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8cd0	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8cd3	d0 f2		bne $8cc7			bne 	HelperValueError
.8cd5	60		rts				rts
.8cd6					Evaluate8BitInteger:
.8cd6	20 be 8c	jsr $8cbe			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8cd9	d0 ec		bne $8cc7			bne 	HelperValueError
.8cdb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8cde	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8ce1	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8ce4	d0 e1		bne $8cc7			bne 	HelperValueError
.8ce6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ce9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8cea					NSMNegate:
.8cea	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8ced	49 80		eor #$80			eor 	#NSBIsNegative
.8cef	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cf2	60		rts				rts
.8cf3					NSMNegateMantissa:
.8cf3	38		sec				sec
.8cf4	a9 00		lda #$00			lda 	#0
.8cf6	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8cf9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cfc	a9 00		lda #$00			lda 	#0
.8cfe	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8d01	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d04	a9 00		lda #$00			lda 	#0
.8d06	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8d09	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d0c	a9 00		lda #$00			lda 	#0
.8d0e	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8d11	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d14	60		rts				rts
.8d15					NSMShiftUpTwo:
.8d15	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d18	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8d1b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d1e	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8d21	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8d24	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8d27	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d2a	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8d2d	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8d30	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8d33	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d36	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d39	60		rts				rts
.8d3a					NSMSetZeroMantissaOnly:
.8d3a	a9 00		lda #$00			lda 	#0
.8d3c	80 08		bra $8d46			bra 	NSMSetMantissa
.8d3e					NSMSetZero:
.8d3e	a9 00		lda #$00			lda 	#0
.8d40					NSMSetByte:
.8d40	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d43	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d46					NSMSetMantissa:
.8d46	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d49	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d4c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d4f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d52	60		rts				rts
.8d53					NSMShiftLeft:
.8d53	18		clc				clc
.8d54					NSMRotateLeft:
.8d54	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d57	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d5a	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8d5d	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8d60	60		rts				rts
.8d61					NSMShiftRight:
.8d61	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8d64	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8d67	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8d6a	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8d6d	60		rts				rts
.8d6e					NSMIsZero:
.8d6e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d71	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8d74	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8d77	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8d7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.96ea					DecimalScalarTable:
>96ea	66 66 66 66				.dword $66666666 ; 0.1
>96ee	de					.byte $de
>96ef	1f 85 eb 51				.dword $51eb851f ; 0.01
>96f3	db					.byte $db
>96f4	4c 37 89 41				.dword $4189374c ; 0.001
>96f8	d8					.byte $d8
>96f9	ac 8b db 68				.dword $68db8bac ; 0.0001
>96fd	d4					.byte $d4
>96fe	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9702	d1					.byte $d1
>9703	83 de 1b 43				.dword $431bde83 ; 1e-06
>9707	ce					.byte $ce
>9708	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>970c	ca					.byte $ca
>970d	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9711	c7					.byte $c7
>9712	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9716	c4					.byte $c4
>9717	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>971b	c0					.byte $c0
>971c	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9720	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9721					SyntaxError:
.9721	a9 02		lda #$02		lda	#2
.9723	4c 97 82	jmp $8297		jmp	ErrorHandler
.9726					RangeError:
.9726	a9 04		lda #$04		lda	#4
.9728	4c 97 82	jmp $8297		jmp	ErrorHandler
.972b					TypeError:
.972b	a9 05		lda #$05		lda	#5
.972d	4c 97 82	jmp $8297		jmp	ErrorHandler
.9730					ArgumentError:
.9730	a9 07		lda #$07		lda	#7
.9732	4c 97 82	jmp $8297		jmp	ErrorHandler
.9735					NotDoneError:
.9735	a9 0c		lda #$0c		lda	#12
.9737	4c 97 82	jmp $8297		jmp	ErrorHandler
.973a					ErrorText:
>973a	42 72 65 61 6b 00			.text	"Break",0
>9740	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9748	72 72 6f 72 00
>974d	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9755	20 62 79 20 7a 65 72 6f 00
>975e	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9766	61 6e 67 65 00
>976b	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9773	6d 61 74 63 68 00
>9779	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9781	65 6d 6f 72 79 00
>9787	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>978f	61 72 67 75 6d 65 6e 74 00
>9798	53 74 6f 70 00				.text	"Stop",0
>979d	53 74 72 69 6e 67 20 74			.text	"String too long",0
>97a5	6f 6f 20 6c 6f 6e 67 00
>97ad	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>97b5	6e 20 66 61 69 6c 65 64 00
>97be	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>97c6	61 74 61 00
>97ca	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>97d2	65 6e 74 65 64 00
>97d8	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>97e0	6c 69 6e 65 20 6e 75 6d 62 65 72 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.97ec					StringConcrete:
.97ec	5a		phy				phy 								; save position on stack
.97ed	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.97f0	85 38		sta $38				sta 	zTemp1
.97f2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97f5	85 39		sta $39				sta 	zTemp1+1
.97f7	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.97f9					_SALength:
.97f9	c8		iny				iny
.97fa	b1 38		lda ($38),y			lda 	(zTemp1),y
.97fc	d0 fb		bne $97f9			bne 	_SALength
.97fe	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9800	b0 3f		bcs $9841			bcs 	_SALengthError
.9802	98		tya				tya 				 				; length of the new string
.9803	18		clc				clc
.9804	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9806	90 02		bcc $980a			bcc 	_SAHaveLength
.9808	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.980a					_SAHaveLength:
.980a	48		pha				pha 								; save length.
.980b	38		sec				sec
.980c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.980e	6d 0e 07	adc $070e			adc 	StringMemory
.9811	8d 0e 07	sta $070e			sta 	StringMemory
.9814	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9816	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9819	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.981b	6d 0f 07	adc $070f			adc 	StringMemory+1
.981e	8d 0f 07	sta $070f			sta 	StringMemory+1
.9821	85 3b		sta $3b				sta 	zTemp2+1
.9823	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9826	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9827	38		sec				sec
.9828	e9 03		sbc #$03			sbc 	#3
.982a	92 3a		sta ($3a)			sta 	(zTemp2)
.982c	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.982e	a0 01		ldy #$01			ldy 	#1
.9830	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9832					_SACopyNewString:
.9832	a0 00		ldy #$00			ldy 	#0
.9834					_SACopyNSLoop:
.9834	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9836	c8		iny				iny 								; write two on in string storage
.9837	c8		iny				iny
.9838	91 3a		sta ($3a),y			sta 	(zTemp2),y
.983a	88		dey				dey 								; this makes it one one.
.983b	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.983d	d0 f5		bne $9834			bne 	_SACopyNSLoop
.983f	7a		ply				ply
.9840	60		rts				rts
.9841					_SALengthError:
.9841	a9 09		lda #$09		lda	#9
.9843	4c 97 82	jmp $8297		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9846					StringSystemInitialise:
.9846	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9848	8d 0e 07	sta $070e			sta 	0+StringMemory
.984b	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.984d	8d 0f 07	sta $070f			sta 	1+StringMemory
.9850	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9853	60		rts				rts
.9854					StringSpaceInitialise:
.9854	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9856	8d 10 07	sta $0710			sta 	StringInitialised
.9859	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.985c	8d 11 07	sta $0711			sta 	StringTempPointer
.985f	ad 0f 07	lda $070f			lda 	StringMemory+1
.9862	3a		dec a				dec 	a
.9863	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9866	60		rts				rts
.9867					StringTempAllocate:
.9867	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9869	b0 35		bcs $98a0			bcs 	_STALength
.986b	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.986e	30 05		bmi $9875			bmi 	_STAAllocate
.9870	48		pha				pha 								; save value to subtract.
.9871	20 54 98	jsr $9854			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9874	68		pla				pla 								; restore it
.9875					_STAAllocate:
.9875	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9877	18		clc				clc  								; deliberate allows one more
.9878	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.987b	8d 11 07	sta $0711			sta 	StringTempPointer
.987e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9881	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9883	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9886	69 ff		adc #$ff			adc 	#$FF
.9888	8d 12 07	sta $0712			sta 	StringTempPointer+1
.988b	85 3d		sta $3d				sta 	zsTemp+1
.988d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9890	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9893	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9896	a9 10		lda #$10			lda 	#NSTString
.9898	9d 00 06	sta $0600,x			sta 	NSStatus,x
.989b	a9 00		lda #$00			lda 	#0 							; clear the target string
.989d	92 3c		sta ($3c)			sta 	(zsTemp)
.989f	60		rts				rts
.98a0					_STALength:
.98a0	a9 09		lda #$09		lda	#9
.98a2	4c 97 82	jmp $8297		jmp	ErrorHandler
.98a5					StringTempWrite:
.98a5	48		pha				pha
.98a6	92 3c		sta ($3c)			sta 	(zsTemp)
.98a8	e6 3c		inc $3c				inc 	zsTemp
.98aa	d0 02		bne $98ae			bne 	_STWNoCarry
.98ac	e6 3d		inc $3d				inc 	zsTemp+1
.98ae					_STWNoCarry:
.98ae	a9 00		lda #$00			lda 	#0
.98b0	92 3c		sta ($3c)			sta 	(zsTemp)
.98b2	68		pla				pla
.98b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8d7b					BackloadProgram:
.8d7b	a2 ff		ldx #$ff			ldx 	#$FF
.8d7d	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8d80	20 aa 8d	jsr $8daa			jsr 	BLReadByte
.8d83	30 1e		bmi $8da3			bmi 	_BPExit
.8d85					_BPCopy:
.8d85	e8		inx				inx  								; copy byte in
.8d86	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8d89	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8d8c	20 aa 8d	jsr $8daa			jsr 	BLReadByte 					; read next byte
.8d8f	30 0a		bmi $8d9b			bmi 	_BPEndLine 					; -ve = EOL
.8d91	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8d93	d0 02		bne $8d97			bne 	_BPNotTab
.8d95	a9 20		lda #$20			lda 	#' '
.8d97					_BPNotTab:
.8d97	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8d99	b0 ea		bcs $8d85			bcs 	_BPCopy
.8d9b					_BPEndLine:
.8d9b	20 66 8f	jsr $8f66			jsr 	TokeniseLine 				; tokenise the line.
.8d9e	20 f2 91	jsr $91f2			jsr 	MemoryAppend 				; append to current program
.8da1	80 d8		bra $8d7b			bra 	BackloadProgram
.8da3					_BPExit:
.8da3	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.8da6	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8da9	60		rts				rts
.8daa					BLReadByte:
.8daa					_BLLoad:
.8daa	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8dad	ee ab 8d	inc $8dab			inc 	_BLLoad+1
.8db0	d0 03		bne $8db5			bne 	_BLNoCarry
.8db2	ee ac 8d	inc $8dac			inc 	_BLLoad+2
.8db5					_BLNoCarry:
.8db5	c9 00		cmp #$00			cmp 	#0
.8db7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8db8					TokeniseSearchTable:
.8db8	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8dba	85 36		sta $36				sta 	zTemp0
.8dbc	a0 00		ldy #$00			ldy 	#0
.8dbe	a9 80		lda #$80			lda 	#$80 						; token #
.8dc0	85 38		sta $38				sta 	zTemp1
.8dc2					_TSTLoop:
.8dc2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8dc4	30 49		bmi $8e0f			bmi 	_TSTFail 					; -ve = end of table
.8dc6	f0 2e		beq $8df6			beq 	_TSTNext 					; zero, check next it's a dummy
.8dc8	c8		iny				iny 								; get the hash
.8dc9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dcb	88		dey				dey
.8dcc	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8dcf	d0 25		bne $8df6			bne 	_TSTNext
.8dd1	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8dd4	38		sec				sec
.8dd5	ed 00 07	sbc $0700			sbc 	identStart
.8dd8	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8dda	d0 1a		bne $8df6			bne 	_TSTNext
.8ddc	5a		phy				phy 								; save Y , we might fail
.8ddd	c8		iny				iny 								; point to text
.8dde	c8		iny				iny
.8ddf	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8de2					_TSTCompareName:
.8de2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8de5	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8de7	d0 0c		bne $8df5			bne 	_TSTNextPullY 				; fail, pullY and do next
.8de9	e8		inx				inx
.8dea	c8		iny				iny
.8deb	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8dee	d0 f2		bne $8de2			bne 	_TSTCompareName
.8df0	7a		ply				ply 								; throw Y
.8df1	a5 38		lda $38				lda 	zTemp1 						; get token #
.8df3	38		sec				sec 								; return with CS = passed.
.8df4	60		rts				rts
.8df5					_TSTNextPullY:
.8df5	7a		ply				ply 								; restore current, fall through.
.8df6					_TSTNext:
.8df6	e6 38		inc $38				inc 	zTemp1 						; token counter
.8df8	98		tya				tya
.8df9	18		clc				clc
.8dfa	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8dfc	1a		inc a				inc 	a 							; +1
.8dfd	1a		inc a				inc 	a 							; +2
.8dfe	a8		tay				tay
.8dff	10 c1		bpl $8dc2			bpl 	_TSTLoop 					; if Y < $80 loop back
.8e01	98		tya				tya 								; add Y to zTemp0 and reset Y
.8e02	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8e04	18		clc				clc  								; but have tables > 255 bytes
.8e05	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8e07	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8e09	90 b7		bcc $8dc2			bcc 	_TSTLoop
.8e0b	e6 37		inc $37				inc 	zTemp0+1
.8e0d	80 b3		bra $8dc2			bra 	_TSTLoop
.8e0f					_TSTFail:
.8e0f	18		clc				clc
.8e10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8e11					KeywordSet0:
>8e11	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e13	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e15	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e17	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8e1d	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8e25	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8e2b	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8e32	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8e39	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8e40	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8e46	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8e4e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8e56	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8e5c	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8e63	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8e69	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8e71	28
>8e72	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8e78	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8e7e	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8e84	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8e8b	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8e91	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8e97	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8e9c	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8ea0	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8ea6	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8eae	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8eb5	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8ebc	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8ec4	43
>8ec5	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8ecb	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8ed2	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8ed8	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8ede	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8ee3	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8ee9	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8eee	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8ef5	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8efb	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8f00	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8f07	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8f0d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8f12	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8f1a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8f20	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8f24	ff					.text	$FF
.8f25					KeywordSet1:
>8f25	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f27	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f29	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f2b	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8f33	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8f3a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8f3f	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8f45	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8f4a	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8f52	45
>8f53	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8f58	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8f5e	ff					.text	$FF
.8f5f					KeywordSet2:
>8f5f	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f61	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f63	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f65	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8f66					TokeniseLine:
.8f66	20 ee 90	jsr $90ee			jsr 	FixLineBufferCase 			; fix line case
.8f69	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8f6b	8d 15 07	sta $0715			sta 	tokenOffset
.8f6e	9c 16 07	stz $0716			stz 	tokenLineNumber
.8f71	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8f74	a2 ff		ldx #$ff			ldx 	#$FF
.8f76					_TKFindFirst:
.8f76	e8		inx				inx
.8f77	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f7a	f0 79		beq $8ff5			beq 	_TKExit
.8f7c	c9 20		cmp #$20			cmp 	#' '
.8f7e	90 f6		bcc $8f76			bcc 	_TKFindFirst
.8f80	c9 30		cmp #$30			cmp 	#'0'
.8f82	90 07		bcc $8f8b			bcc 	_TKNoLineNumber
.8f84	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f86	b0 03		bcs $8f8b			bcs 	_TKNoLineNumber
.8f88	20 18 91	jsr $9118			jsr 	TokeniseExtractLineNumber
.8f8b					_TKNoLineNumber:
.8f8b					_TKTokeniseLoop:
.8f8b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8f8e	f0 65		beq $8ff5			beq 	_TKExit
.8f90	e8		inx				inx
.8f91	c9 20		cmp #$20			cmp 	#' '
.8f93	f0 f6		beq $8f8b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8f95	ca		dex				dex 								; undo last get, A contains character, X is position.
.8f96	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8f98	f0 61		beq $8ffb			beq 	_TKTokeniseIdentifier
.8f9a	c9 41		cmp #$41			cmp 	#'A'
.8f9c	90 04		bcc $8fa2			bcc 	_TKTokenisePunctuation
.8f9e	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8fa0	90 59		bcc $8ffb			bcc 	_TKTokeniseIdentifier
.8fa2					_TKTokenisePunctuation:
.8fa2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8fa4	f0 27		beq $8fcd			beq 	_TKString
.8fa6	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8fa8	f0 28		beq $8fd2			beq 	_TKHexConstant
.8faa	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8fac	f0 29		beq $8fd7			beq 	_TKCheckDouble
.8fae	c9 3e		cmp #$3e			cmp 	#'>'
.8fb0	f0 25		beq $8fd7			beq 	_TKCheckDouble
.8fb2					_TKStandardPunctuation:
.8fb2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8fb5	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8fb7	90 0e		bcc $8fc7			bcc 	_TKNoShift
.8fb9	48		pha				pha 								; save
.8fba	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8fbc	85 36		sta $36				sta 	zTemp0
.8fbe	68		pla				pla
.8fbf	29 20		and #$20			and 	#32 						; bit 5
.8fc1	4a		lsr a				lsr 	a 							; shift into bit 3
.8fc2	4a		lsr a				lsr 	a
.8fc3	05 36		ora $36				ora 	zTemp0
.8fc5	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8fc7					_TKNoShift:
.8fc7	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte 			; write the punctuation character
.8fca	e8		inx				inx 								; consume the character
.8fcb	80 be		bra $8f8b			bra 	_TKTokeniseLoop 			; and loop round again.
.8fcd					_TKString:
.8fcd	20 7d 90	jsr $907d			jsr 	TokeniseString
.8fd0	80 b9		bra $8f8b			bra 	_TKTokeniseLoop
.8fd2					_TKHexConstant:
.8fd2	20 b8 90	jsr $90b8			jsr 	TokeniseHexConstant
.8fd5	80 b4		bra $8f8b			bra 	_TKTokeniseLoop
.8fd7					_TKCheckDouble:
.8fd7	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8fda	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8fdc	90 d4		bcc $8fb2			bcc 	_TKStandardPunctuation
.8fde	c9 3f		cmp #$3f			cmp 	#'>'+1
.8fe0	b0 d0		bcs $8fb2			bcs 	_TKStandardPunctuation
.8fe2	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8fe5	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8fe7	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8fe8	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8feb	38		sec				sec
.8fec	e9 3c		sbc #$3c			sbc 	#'<'
.8fee	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8ff1	e8		inx				inx 								; consume both
.8ff2	e8		inx				inx
.8ff3	80 96		bra $8f8b			bra 	_TKTokeniseLoop
.8ff5	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8ff7	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.8ffa	60		rts				rts
.8ffb					_TKTokeniseIdentifier:
.8ffb	8e 00 07	stx $0700			stx 	identStart 					; save start
.8ffe	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9001					_TKCheckLoop:
.9001	e8		inx				inx 								; look at next, we know first is identifier.
.9002	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9005	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9007	f0 f8		beq $9001			beq 	_TKCheckLoop
.9009	c9 30		cmp #$30			cmp	 	#"0"
.900b	90 0c		bcc $9019			bcc 	_TKEndIdentifier
.900d	c9 3a		cmp #$3a			cmp 	#"9"+1
.900f	90 f0		bcc $9001			bcc 	_TKCheckLoop
.9011	c9 41		cmp #$41			cmp	 	#"A"
.9013	90 04		bcc $9019			bcc 	_TKEndIdentifier
.9015	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9017	90 e8		bcc $9001			bcc 	_TKCheckLoop
.9019					_TKEndIdentifier:
.9019	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.901c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.901e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9020	f0 06		beq $9028			beq 	_TKHasTypeCharacter
.9022	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9024	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9026	d0 07		bne $902f			bne 	_TKNoTypeCharacter
.9028					_TKHasTypeCharacter:
.9028	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.902b	e8		inx				inx 								; read next
.902c	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.902f					_TKNoTypeCharacter:
.902f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9031	d0 09		bne $903c			bne 	_TKNoArray
.9033	e8		inx				inx 								; skip the (
.9034	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9037	09 04		ora #$04			ora 	#$04
.9039	8d 04 07	sta $0704			sta 	identTypeByte
.903c					_TKNoArray:
.903c	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.903f	20 d9 90	jsr $90d9			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9042	a0 8e		ldy #$8e			ldy 	#(KeywordSet0) >> 8
.9044	a9 11		lda #$11			lda 	#(KeywordSet0) & $FF
.9046	20 b8 8d	jsr $8db8			jsr 	TokeniseSearchTable
.9049	a2 00		ldx #$00			ldx 	#0
.904b	b0 1f		bcs $906c			bcs 	_TKFoundToken
.904d	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.904f	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.9051	20 b8 8d	jsr $8db8			jsr 	TokeniseSearchTable
.9054	a2 81		ldx #$81			ldx 	#$81
.9056	b0 14		bcs $906c			bcs 	_TKFoundToken
.9058	a0 8f		ldy #$8f			ldy 	#(KeywordSet1) >> 8
.905a	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.905c	20 b8 8d	jsr $8db8			jsr 	TokeniseSearchTable
.905f	a2 82		ldx #$82			ldx 	#$82
.9061	b0 09		bcs $906c			bcs 	_TKFoundToken
.9063	20 69 91	jsr $9169			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9066	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9069	4c 8b 8f	jmp $8f8b			jmp 	_TKTokeniseLoop 			; and go round again.
.906c					_TKFoundToken:
.906c	48		pha				pha 								; save token
.906d	8a		txa				txa 								; shift in X, is there one ?
.906e	f0 03		beq $9073			beq 	_TKNoTShift
.9070	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte 			; if so, write it out
.9073					_TKNoTShift:
.9073	68		pla				pla 								; restore and write token
.9074	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.9077	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.907a	4c 8b 8f	jmp $8f8b			jmp 	_TKTokeniseLoop 			; and go round again.
.907d					TokeniseString:
.907d	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.907f	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.9082	e8		inx				inx									; start of quoted string.
.9083	da		phx				phx 								; push start of string on top
.9084	ca		dex				dex
.9085					_TSFindEnd:
.9085	e8		inx				inx
.9086	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9089	f0 04		beq $908f			beq 	_TSEndOfString
.908b	c9 22		cmp #$22			cmp 	#'"'
.908d	d0 f6		bne $9085			bne 	_TSFindEnd
.908f					_TSEndOfString:
.908f	7a		ply				ply  								; so now Y is first character, X is character after end.
.9090	48		pha				pha 								; save terminating character
.9091	20 99 90	jsr $9099			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9094	68		pla				pla 								; terminating character
.9095	f0 01		beq $9098			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9097	e8		inx				inx
.9098					_TSNotQuote:
.9098	60		rts				rts
.9099					TOWriteBlockXY:
.9099	86 36		stx $36				stx 	zTemp0 						; write end character
.909b	98		tya				tya
.909c	49 ff		eor #$ff			eor 	#$FF
.909e	38		sec				sec
.909f	65 36		adc $36				adc 	zTemp0
.90a1	1a		inc a				inc 	a 							; one extra for NULL
.90a2	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.90a5					_TOBlockLoop:
.90a5	c4 36		cpy $36				cpy 	zTemp0
.90a7	f0 09		beq $90b2			beq 	_TOBlockExit
.90a9	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.90ac	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.90af	c8		iny				iny
.90b0	80 f3		bra $90a5			bra 	_TOBlockLoop
.90b2					_TOBlockExit:
.90b2	a9 00		lda #$00			lda 	#0
.90b4	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.90b7	60		rts				rts
.90b8					TokeniseHexConstant:
.90b8	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.90ba	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.90bd	e8		inx				inx									; start of quoted string.
.90be	da		phx				phx 								; push start of constant on top
.90bf	ca		dex				dex
.90c0					_THFindLoop:
.90c0	e8		inx				inx
.90c1	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.90c4	c9 30		cmp #$30			cmp 	#"0"
.90c6	90 0c		bcc $90d4			bcc 	_THFoundEnd
.90c8	c9 3a		cmp #$3a			cmp 	#"9"+1
.90ca	90 f4		bcc $90c0			bcc 	_THFindLoop
.90cc	c9 41		cmp #$41			cmp 	#"A"
.90ce	90 04		bcc $90d4			bcc 	_THFoundEnd
.90d0	c9 47		cmp #$47			cmp 	#"F"+1
.90d2	90 ec		bcc $90c0			bcc 	_THFindLoop
.90d4					_THFoundEnd:
.90d4	7a		ply				ply 								; restore start
.90d5	20 99 90	jsr $9099			jsr 	TOWriteBlockXY 				; output the block
.90d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.90d9					TokeniseCalculateHash:
.90d9	da		phx				phx
.90da	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.90dd	a9 00		lda #$00			lda 	#0
.90df					_TCHLoop:
.90df	18		clc				clc
.90e0	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.90e3	e8		inx				inx
.90e4	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.90e7	d0 f6		bne $90df			bne 	_TCHLoop
.90e9	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.90ec	fa		plx				plx
.90ed	60		rts				rts
.90ee					FixLineBufferCase:
.90ee	a2 00		ldx #$00			ldx 	#0
.90f0					_FLBCLoop:
.90f0	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.90f3	f0 22		beq $9117			beq 	_FLBCExit 					; end of string.
.90f5	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.90f7	f0 11		beq $910a			beq 	_FLBCInQuotes
.90f9	e8		inx				inx
.90fa	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.90fc	90 f2		bcc $90f0			bcc 	_FLBCLoop
.90fe	c9 7b		cmp #$7b			cmp 	#'z'+1
.9100	b0 ee		bcs $90f0			bcs 	_FLBCLoop
.9102	38		sec				sec 								; make U/C
.9103	e9 20		sbc #$20			sbc 	#32
.9105	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9108	80 e6		bra $90f0			bra 	_FLBCLoop
.910a					_FLBCInQuotes:
.910a	e8		inx				inx 								; advance
.910b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.910e	f0 07		beq $9117			beq 	_FLBCExit 					; exit on EOS
.9110	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9112	d0 f6		bne $910a			bne 	_FLBCInQuotes
.9114	e8		inx				inx 								; skip over it
.9115	80 d9		bra $90f0			bra 	_FLBCLoop
.9117					_FLBCExit:
.9117	60		rts				rts
.9118					TokeniseExtractLineNumber:
.9118	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.911b	48		pha				pha
.911c	ad 16 07	lda $0716			lda 	tokenLineNumber
.911f	48		pha				pha
.9120	20 56 91	jsr $9156			jsr 	_TELNTimes2 				; line # x 4
.9123	20 56 91	jsr $9156			jsr 	_TELNTimes2 				; line # x 2
.9126	18		clc				clc 								; add stacked value
.9127	68		pla				pla
.9128	6d 16 07	adc $0716			adc 	tokenLineNumber
.912b	8d 16 07	sta $0716			sta 	tokenLineNumber
.912e	68		pla				pla
.912f	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9132	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9135	20 56 91	jsr $9156			jsr 	_TELNTimes2 				; line # x 10
.9138	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.913b	e8		inx				inx
.913c	29 0f		and #$0f			and 	#15 						; add to line #
.913e	18		clc				clc
.913f	6d 16 07	adc $0716			adc 	tokenLineNumber
.9142	8d 16 07	sta $0716			sta 	tokenLineNumber
.9145	90 03		bcc $914a			bcc 	_TLENNoCarry
.9147	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.914a					_TLENNoCarry:
.914a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.914d	c9 30		cmp #$30			cmp 	#'0'
.914f	90 04		bcc $9155			bcc 	_TLENExit
.9151	c9 3a		cmp #$3a			cmp 	#'9'+1
.9153	90 c3		bcc $9118			bcc 	TokeniseExtractLineNumber
.9155					_TLENExit:
.9155	60		rts				rts
.9156					_TELNTimes2:
.9156	0e 16 07	asl $0716			asl 	tokenLineNumber
.9159	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.915c	60		rts				rts
.915d					TokeniseWriteByte:
.915d	da		phx				phx
.915e	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9161	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9164	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9167	fa		plx				plx
.9168	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9169					CheckCreateVariableRecord:
.9169	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.916b	85 36		sta $36				sta 	0+zTemp0
.916d	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.916f	85 37		sta $37				sta 	1+zTemp0
.9171					_CCVSearch:
.9171	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9173	f0 2c		beq $91a1			beq 	_CCVFail
.9175	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9177	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9179	cd 03 07	cmp $0703			cmp 	identHash
.917c	d0 16		bne $9194			bne 	_CCVNext
.917e	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9180	ae 00 07	ldx $0700			ldx 	identStart
.9183					_CCVCompare:
.9183	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9186	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9188	e8		inx				inx 								; advance pointers
.9189	c8		iny				iny
.918a	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.918b	d0 07		bne $9194			bne 	_CCVNext  					; didn't match go to next.
.918d	90 f4		bcc $9183			bcc 	_CCVCompare 				; not finished yet.
.918f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9192	f0 41		beq $91d5			beq 	_CCVFound 					; yes, we were successful
.9194					_CCVNext:
.9194	18		clc				clc
.9195	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9197	65 36		adc $36				adc 	zTemp0
.9199	85 36		sta $36				sta 	zTemp0
.919b	90 d4		bcc $9171			bcc 	_CCVSearch
.919d	e6 37		inc $37				inc 	zTemp0+1
.919f	80 d0		bra $9171			bra 	_CCVSearch
.91a1					_CCVFail:
.91a1	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.91a3	ad 03 07	lda $0703			lda 	identHash
.91a6	91 36		sta ($36),y			sta 	(zTemp0),y
.91a8	c8		iny				iny 								; offset 2 is the type byte
.91a9	ad 04 07	lda $0704			lda 	identTypeByte
.91ac	91 36		sta ($36),y			sta 	(zTemp0),y
.91ae	c8		iny				iny
.91af					_CCVData:
.91af	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.91b1	91 36		sta ($36),y			sta 	(zTemp0),y
.91b3	c8		iny				iny
.91b4	c0 08		cpy #$08			cpy 	#8
.91b6	90 f7		bcc $91af			bcc 	_CCVData
.91b8	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.91bb					_CCVCopyName:
.91bb	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.91be	91 36		sta ($36),y			sta 	(zTemp0),y
.91c0	e8		inx				inx
.91c1	c8		iny				iny
.91c2	ec 02 07	cpx $0702			cpx 	identTypeEnd
.91c5	d0 f4		bne $91bb			bne 	_CCVCopyName
.91c7	98		tya				tya 								; patch offset
.91c8	92 36		sta ($36)			sta 	(zTemp0)
.91ca	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.91cc	91 36		sta ($36),y			sta 	(zTemp0),y
.91ce	88		dey				dey
.91cf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.91d1	09 80		ora #$80			ora 	#$80
.91d3	91 36		sta ($36),y			sta 	(zTemp0),y
.91d5					_CCVFound:
.91d5	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.91d7	38		sec				sec
.91d8	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.91da	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.91dc	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.91df	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.91e1	20 5d 91	jsr $915d			jsr 	TokeniseWriteByte
.91e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.98b4					MemoryPeek:
.98b4	b2 36		lda ($36)			lda 	(zTemp0)
.98b6	60		rts				rts
.98b7					MemoryPoke:
.98b7	92 36		sta ($36)			sta 	(zTemp0)
.98b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.98ba					EXTPrintCharacter:
.98ba	48		pha				pha
.98bb	da		phx				phx
.98bc	5a		phy				phy
.98bd	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.98c0	7a		ply				ply
.98c1	fa		plx				plx
.98c2	68		pla				pla
.98c3	60		rts				rts
.98c4					EXTInputSingleCharacter:
.98c4	da		phx				phx
.98c5	5a		phy				phy
.98c6					_EISCWait:
.98c6	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.98c9	c9 00		cmp #$00			cmp 	#0
.98cb	f0 f9		beq $98c6			beq 	_EISCWait
.98cd	7a		ply				ply
.98ce	fa		plx				plx
.98cf	60		rts				rts
.98d0					EXTInputLine:
.98d0	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.98d2					_ILLoop:
.98d2	da		phx				phx 								; read character in
.98d3	20 cf ff	jsr $ffcf			jsr 	$FFCF
.98d6	fa		plx				plx
.98d7	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.98d9	f0 12		beq $98ed			beq 	_ILBackspace
.98db	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.98dd	f0 15		beq $98f4			beq 	_ILExit
.98df	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.98e1	90 ef		bcc $98d2			bcc 	_ILLoop
.98e3	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.98e5	f0 eb		beq $98d2			beq 	_ILLoop
.98e7	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.98ea	e8		inx				inx
.98eb	80 e5		bra $98d2			bra 	_ILLoop
.98ed					_ILBackspace:
.98ed	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.98ef	f0 e1		beq $98d2			beq 	_ILLoop
.98f1	ca		dex				dex 								; back one.
.98f2	80 de		bra $98d2			bra 	_ILLoop
.98f4					_ILExit:
.98f4	20 ba 98	jsr $98ba			jsr 	EXTPrintCharacter
.98f7	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.98fa	60		rts				rts
.98fb					EXTBreakCheck:
.98fb	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.91e5					MemoryNew:
.91e5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91e7	85 30		sta $30				sta 	codePtr
.91e9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91eb	85 31		sta $31				sta 	codePtr+1
.91ed	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.91ef	92 30		sta ($30)			sta 	(codePtr)
.91f1	60		rts				rts
.91f2					MemoryAppend:
.91f2	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91f4	85 30		sta $30				sta 	codePtr
.91f6	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91f8	85 31		sta $31				sta 	codePtr+1
.91fa					_MAFindEnd:
.91fa	b2 30		lda ($30)			lda 	(codePtr)
.91fc	f0 0d		beq $920b			beq 	_MAFoundEnd
.91fe	18		clc				clc
.91ff	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9201	65 30		adc $30				adc 	codePtr
.9203	85 30		sta $30				sta 	codePtr
.9205	90 02		bcc $9209			bcc 	_CREExit
.9207	e6 31		inc $31				inc 	codePtr+1
.9209					_CREExit:
.9209	80 ef		bra $91fa			bra 	_MAFindEnd
.920b					_MAFoundEnd:
.920b	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.920e	c0 04		cpy #$04			cpy 	#4 							; blank line
.9210	f0 0e		beq $9220			beq 	_MANoLine
.9212	a9 00		lda #$00			lda 	#0 							; end of program
.9214	91 30		sta ($30),y			sta 	(codePtr),y
.9216					_MACopy:
.9216	88		dey				dey
.9217	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.921a	91 30		sta ($30),y			sta 	(codePtr),y
.921c	c0 00		cpy #$00			cpy 	#0
.921e	d0 f6		bne $9216			bne 	_MACopy
.9220					_MANoLine:
.9220	60		rts				rts
.9221					MemoryInline:
.9221	98		tya				tya 								; put address into stack,x
.9222	18		clc				clc
.9223	65 30		adc $30				adc 	codePtr
.9225	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9228	a5 31		lda $31				lda 	codePtr+1
.922a	69 00		adc #$00			adc 	#0
.922c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.922f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9232	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9235	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9236					MemoryTransferAX:
.9236	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9238	86 37		stx $37				stx 	zTemp0+1
.923a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.923c	85 30		sta $30				sta 	codePtr
.923e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9240	85 31		sta $31				sta 	codePtr+1
.9242					_MTAXLoop:
.9242	b2 30		lda ($30)			lda 	(codePtr)
.9244	f0 1d		beq $9263			beq 	_MTAXError 					; not found.
.9246	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9248	b1 30		lda ($30),y			lda 	(codePtr),y
.924a	c5 36		cmp $36				cmp 	zTemp0
.924c	d0 07		bne $9255			bne 	_MTAXNext
.924e	c8		iny				iny 								; check MSB
.924f	b1 30		lda ($30),y			lda 	(codePtr),y
.9251	c5 37		cmp $37				cmp 	zTemp0+1
.9253	f0 0d		beq $9262			beq 	_MTAXExit 					; success !
.9255					_MTAXNext:
.9255	18		clc				clc
.9256	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9258	65 30		adc $30				adc 	codePtr
.925a	85 30		sta $30				sta 	codePtr
.925c	90 02		bcc $9260			bcc 	_CREExit
.925e	e6 31		inc $31				inc 	codePtr+1
.9260					_CREExit:
.9260	80 e0		bra $9242			bra 	_MTAXLoop
.9262					_MTAXExit:
.9262	60		rts				rts
.9263					_MTAXError:
.9263	a9 0d		lda #$0d		lda	#13
.9265	4c 97 82	jmp $8297		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
