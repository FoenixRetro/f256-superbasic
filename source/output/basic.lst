
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Mon Oct 10 12:45:01 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 f0 93	jsr $93f0			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 8c 85	jsr $858c			jsr 	RunDemos
.8013	20 d2 8d	jsr $8dd2			jsr 	NewCommand 					; erase current program
.8016	20 75 a0	jsr $a075			jsr 	BackloadProgram
.8019	4c 2e 89	jmp $892e			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 4d 6f			.text "Built Monday 10-Oct-2022. Build 1178."
>8064	6e 64 61 79 20 31 30 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 31 31 37 38 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/circle.asm

.8084					GXFillCircle:
.8084	a9 ff		lda #$ff			lda 	#255
.8086	80 02		bra $808a			bra 	GXCircle
.8088					GXFrameCircle:
.8088	a9 00		lda #$00			lda 	#0
.808a					GXCircle:
.808a	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.808d	20 80 86	jsr $8680			jsr 	GXSortXY 					; topleft/bottomright
.8090	20 f1 85	jsr $85f1			jsr 	GXOpenBitmap 				; start drawing
.8093	20 82 81	jsr $8182			jsr 	GXCircleSetup 				; set up for drawing
.8096	9c 46 06	stz $0646			stz 	gYChanged
.8099					_GXCircleDraw:
.8099	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.809c	cd 44 06	cmp $0644			cmp 	gY
.809f	90 09		bcc $80aa			bcc 	_GXCircleContinue
.80a1	d0 03		bne $80a6			bne 	_GXNoLast
.80a3	20 b5 80	jsr $80b5			jsr 	GXPlot1
.80a6					_GXNoLast:
.80a6	20 02 86	jsr $8602			jsr 	GXCloseBitmap 				; close the bitmap
.80a9	60		rts				rts
.80aa					_GXCircleContinue:
.80aa	20 b2 80	jsr $80b2			jsr 	GXPlot2 					; draw it
.80ad	20 2f 81	jsr $812f			jsr 	GXCircleMove 				; adjust the coordinates
.80b0	80 e7		bra $8099			bra 	_GXCircleDraw
.80b2					GXPlot2:
.80b2	20 b5 80	jsr $80b5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.80b5					GXPlot1:
.80b5	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.80b8	f0 03		beq $80bd			beq 	_GXPlot1Only
.80ba	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; plot and negate
.80bd					_GXPlot1Only:
.80bd	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; twice, undoing negation
.80c0	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.80c3	ae 44 06	ldx $0644			ldx	 	gY
.80c6	8d 44 06	sta $0644			sta 	gY
.80c9	8e 43 06	stx $0643			stx 	gX
.80cc	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.80cf	a9 ff		lda #$ff			lda 	#$FF
.80d1	8d 46 06	sta $0646			sta 	gYChanged
.80d4	60		rts				rts
.80d5	20 d9 80	jsr $80d9			jsr 	GXPlot0 						; do once
.80d8	60		rts				rts
.80d9	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.80dc	f0 05		beq $80e3			beq 	_GXPlot0Always
.80de	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.80e1	f0 2d		beq $8110			beq 	GXPlot0Exit
.80e3					_GXPlot0Always:
.80e3	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.80e5	ad 44 06	lda $0644			lda 	gY
.80e8	20 11 81	jsr $8111			jsr 	GXSubCopy
.80eb	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.80ed	ad 43 06	lda $0643			lda 	gX
.80f0	20 11 81	jsr $8111			jsr 	GXSubCopy
.80f3	48		pha				pha 									; save last offset X
.80f4	20 0f 86	jsr $860f			jsr 	GXPositionCalc 					; calculate position/offset.
.80f7	68		pla				pla
.80f8	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.80f9	85 36		sta $36				sta 	gzTemp0
.80fb	64 37		stz $37				stz 	gzTemp0+1
.80fd	26 37		rol $37				rol 	gzTemp0+1
.80ff	ad 45 06	lda $0645			lda 	gIsFillMode
.8102	69 80		adc #$80			adc 	#128
.8104	20 88 83	jsr $8388			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8107	38		sec				sec 									; GY = -GY
.8108	a9 00		lda #$00			lda 	#0
.810a	ed 44 06	sbc $0644			sbc 	gY
.810d	8d 44 06	sta $0644			sta 	gY
.8110					GXPlot0Exit:
.8110	60		rts				rts
.8111					GXSubCopy:
.8111	85 36		sta $36				sta 	gzTemp0
.8113	64 37		stz $37				stz 	gzTemp0+1
.8115	29 80		and #$80			and 	#$80
.8117	f0 02		beq $811b			beq 	_GXNoSx
.8119	c6 37		dec $37				dec 	gzTemp0+1
.811b					_GXNoSx:
.811b	38		sec				sec
.811c	bd 35 06	lda $0635,x			lda 	gXX1,x
.811f	e5 36		sbc $36				sbc 	gzTemp0
.8121	9d 31 06	sta $0631,x			sta 	gXX0,x
.8124	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8127	e5 37		sbc $37				sbc 	gzTemp0+1
.8129	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.812c	a5 36		lda $36				lda 	gzTemp0 						; return A
.812e	60		rts				rts
.812f					GXCircleMove:
.812f	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.8132	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.8134	10 0d		bpl $8143			bpl 	_GXEMPositive
.8136	ee 43 06	inc $0643			inc 	gX 							; X++
.8139	ad 43 06	lda $0643			lda 	gX
.813c	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.813f	a9 06		lda #$06			lda 	#6  						; and add 6
.8141	80 15		bra $8158			bra 	_GXEMAddD
.8143					_GXEMPositive:
.8143	ee 43 06	inc $0643			inc 	gX 							; X++
.8146	ce 44 06	dec $0644			dec 	gy 							; Y--
.8149	38		sec				sec 								; calculate X-Y
.814a	ad 43 06	lda $0643			lda 	gX
.814d	ed 44 06	sbc $0644			sbc 	gY
.8150	20 62 81	jsr $8162			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.8153	a9 0a		lda #$0a			lda 	#10  						; and add 10
.8155	ce 46 06	dec $0646			dec 	gYChanged
.8158					_GXEMAddD:
.8158	18		clc				clc
.8159	65 38		adc $38				adc 	gzTemp1
.815b	85 38		sta $38				sta 	gzTemp1
.815d	90 02		bcc $8161			bcc 	_GXEMNoCarry
.815f	e6 39		inc $39				inc 	gzTemp1+1
.8161					_GXEMNoCarry:
.8161	60		rts				rts
.8162					_GXAdd4TimesToD:
.8162	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.8164	29 80		and #$80			and 	#$80
.8166	f0 02		beq $816a			beq 	_GXA4Unsigned
.8168	a9 ff		lda #$ff			lda 	#$FF
.816a					_GXA4Unsigned:
.816a	85 37		sta $37				sta 	gzTemp0+1
.816c	06 36		asl $36				asl 	gzTemp0  					; x 4
.816e	26 37		rol $37				rol 	gzTemp0+1
.8170	06 36		asl $36				asl 	gzTemp0
.8172	26 37		rol $37				rol 	gzTemp0+1
.8174	18		clc				clc 								; add
.8175	a5 36		lda $36				lda		gzTemp0
.8177	65 38		adc $38				adc 	gzTemp1
.8179	85 38		sta $38				sta 	gzTemp1
.817b	a5 37		lda $37				lda		gzTemp0+1
.817d	65 39		adc $39				adc 	gzTemp1+1
.817f	85 39		sta $39				sta 	gzTemp1+1
.8181	60		rts				rts
.8182					GXCircleSetup:
.8182	38		sec				sec
.8183	ad 37 06	lda $0637			lda 	gxY1
.8186	ed 33 06	sbc $0633			sbc 	gxY0
.8189	4a		lsr a				lsr 	a
.818a	8d 42 06	sta $0642			sta 	gRadius
.818d	a2 00		ldx #$00			ldx 	#0
.818f	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8192	a2 02		ldx #$02			ldx 	#2
.8194	20 b1 81	jsr $81b1			jsr 	_GXCalculateCentre
.8197	9c 43 06	stz $0643			stz 	gX
.819a	ad 42 06	lda $0642			lda 	gRadius
.819d	8d 44 06	sta $0644			sta 	gY
.81a0	0a		asl a				asl 	a 							; R x 2
.81a1	85 36		sta $36				sta 	gzTemp0
.81a3	38		sec				sec
.81a4	a9 03		lda #$03			lda 	#3
.81a6	e5 36		sbc $36				sbc 	gzTemp0
.81a8	85 38		sta $38				sta 	gzTemp1
.81aa	a9 00		lda #$00			lda 	#0
.81ac	e9 00		sbc #$00			sbc 	#0
.81ae	85 39		sta $39				sta 	gzTemp1+1
.81b0	60		rts				rts
.81b1					_GXCalculateCentre:
.81b1	38		sec				sec
.81b2	bd 35 06	lda $0635,x			lda 	gxX1,x
.81b5	7d 31 06	adc $0631,x			adc 	gXX0,x
.81b8	9d 35 06	sta $0635,x			sta 	gXX1,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.81c1	4a		lsr a				lsr 	a
.81c2	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.81c5	7e 35 06	ror $0635,x			ror 	gXX1,x
.81c8	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.81c9					GXClearBitmap:
.81c9	48		pha				pha
.81ca	5a		phy				phy
.81cb	20 f1 85	jsr $85f1			jsr 	GXOpenBitmap 				; start access
.81ce	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.81d0	ad 3a 06	lda $063a			lda 	gxHeight
.81d3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.81d5	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.81d7					_GXCalcLastPage:
.81d7	98		tya				tya 								; add to base page
.81d8	18		clc				clc
.81d9	6d 39 06	adc $0639			adc 	gxBasePage
.81dc	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.81de					_GXClearAll:
.81de	20 f0 81	jsr $81f0			jsr 	_GXClearBlock 				; clear 8k block
.81e1	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.81e3	a5 0b		lda $0b				lda 	GFXEditSlot
.81e5	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.81e8	b0 f4		bcs $81de			bcs 	_GXClearAll
.81ea	20 02 86	jsr $8602			jsr 	GXCloseBitmap	 			; stop access
.81ed	7a		ply				ply
.81ee	68		pla				pla
.81ef	60		rts				rts
.81f0					_GXClearBlock:
.81f0	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.81f2	85 38		sta $38				sta 	0+gzTemp1
.81f4	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.81f6	85 39		sta $39				sta 	1+gzTemp1
.81f8					_GXCB0:
.81f8	a5 36		lda $36				lda 	gzTemp0
.81fa	a0 00		ldy #$00			ldy 	#0
.81fc					_GXCB1:
.81fc	91 38		sta ($38),y			sta 	(gzTemp1),y
.81fe	c8		iny				iny
.81ff	91 38		sta ($38),y			sta 	(gzTemp1),y
.8201	c8		iny				iny
.8202	91 38		sta ($38),y			sta 	(gzTemp1),y
.8204	c8		iny				iny
.8205	91 38		sta ($38),y			sta 	(gzTemp1),y
.8207	c8		iny				iny
.8208	d0 f2		bne $81fc			bne 	_GXCB1
.820a	e6 39		inc $39				inc 	gzTemp1+1
.820c	a5 39		lda $39				lda 	gzTemp1+1
.820e	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8210	d0 e6		bne $81f8			bne 	_GXCB0
.8212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.8213					GXLine:
.8213	20 f1 85	jsr $85f1			jsr 	GXOpenBitmap
.8216	20 9e 86	jsr $869e			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8219	20 de 82	jsr $82de			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.821c	20 0f 86	jsr $860f			jsr 	GXPositionCalc 				; calculate position/offset.
.821f					_GXDrawLoop:
.821f	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.8222	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8224	2d 3e 06	and $063e			and 	gxANDValue
.8227	4d 3d 06	eor $063d			eor 	gxEORValue
.822a	91 3c		sta ($3c),y			sta 	(gsTemp),y
.822c	20 3a 82	jsr $823a			jsr 	GXLineIsComplete 			; is the line complete ?
.822f	f0 05		beq $8236			beq 	_GXLExit
.8231	20 55 82	jsr $8255			jsr 	GXLineAdvance 				; code as per advance method
.8234	80 e9		bra $821f			bra 	_GXDrawLoop
.8236					_GXLExit:
.8236	20 02 86	jsr $8602			jsr 	GXCloseBitmap
.8239	60		rts				rts
.823a					GXLineIsComplete:
.823a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.823d	d0 0f		bne $824e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.823f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8242	4d 35 06	eor $0635			eor 	GXX1
.8245	d0 06		bne $824d			bne 	_GXLICExit
.8247	ad 32 06	lda $0632			lda 	GXX0+1
.824a	4d 36 06	eor $0636			eor 	GXX1+1
.824d					_GXLICExit:
.824d	60		rts				rts
.824e					_GXLICCompareY:
.824e	ad 37 06	lda $0637			lda 	GXY1
.8251	4d 33 06	eor $0633			eor 	GXY0
.8254	60		rts				rts
.8255					GXLineAdvance:
.8255	18		clc				clc 								; add adjust to position
.8256	ad 4b 06	lda $064b			lda 	GXPosition
.8259	6d 4c 06	adc $064c			adc 	GXAdjust
.825c	8d 4b 06	sta $064b			sta 	GXPosition
.825f	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.8262	b0 05		bcs $8269			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8264	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.8267	90 0a		bcc $8273			bcc 	_GXLANoExtra
.8269					_GXLAOverflow:
.8269	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.826c	38		sec				sec 								; subtract total and write back
.826d	ed 4d 06	sbc $064d			sbc 	GXTotal
.8270	8d 4b 06	sta $064b			sta 	GXPosition
.8273					_GXLANoExtra:
.8273	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.8276	f0 0d		beq $8285			beq 	_GXDXLarger
.8278	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.827b	ad 4e 06	lda $064e			lda 	GXAddSelect
.827e	f0 10		beq $8290			beq 	_GXLAExit
.8280	20 91 82	jsr $8291			jsr 	GXAdjustX
.8283	80 0b		bra $8290			bra 	_GXLAExit
.8285					_GXDXLarger:
.8285	20 91 82	jsr $8291			jsr 	GXAdjustX
.8288	ad 4e 06	lda $064e			lda 	GXAddSelect
.828b	f0 03		beq $8290			beq 	_GXLAExit
.828d	20 d7 82	jsr $82d7			jsr 	GXIncrementY
.8290					_GXLAExit:
.8290	60		rts				rts
.8291					GXAdjustX:
.8291	ad 4a 06	lda $064a			lda 	GXDXNegative
.8294	10 25		bpl $82bb			bpl 	_GXAXRight
.8296	ad 31 06	lda $0631			lda 	GXX0
.8299	d0 03		bne $829e			bne 	_GXAXNoBorrow
.829b	ce 32 06	dec $0632			dec 	GXX0+1
.829e					_GXAXNoBorrow:
.829e	ce 31 06	dec $0631			dec 	GXX0
.82a1	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.82a4	ad 41 06	lda $0641			lda 	gsOffset
.82a7	c9 ff		cmp #$ff			cmp 	#$FF
.82a9	d0 0f		bne $82ba			bne 	_GXAYExit 					; underflow
.82ab	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.82ad	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.82af	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.82b1	b0 07		bcs $82ba			bcs 	_GXAYExit
.82b3	18		clc				clc
.82b4	69 20		adc #$20			adc 	#$20 						; fix up
.82b6	85 3d		sta $3d				sta 	gsTemp+1
.82b8	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.82ba					_GXAYExit:
.82ba	60		rts				rts
.82bb					_GXAXRight:
.82bb	ee 31 06	inc $0631			inc 	GXX0
.82be	d0 03		bne $82c3			bne 	_GXAXNoCarry
.82c0	ee 32 06	inc $0632			inc 	GXX0+1
.82c3					_GXAXNoCarry:
.82c3	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.82c6	d0 0e		bne $82d6			bne 	_GXAXExit 					; if not overflowed, exit.
.82c8	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.82ca	a5 3d		lda $3d				lda 	gsTemp+1
.82cc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.82ce	90 06		bcc $82d6			bcc 	_GXAXExit
.82d0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.82d2	85 3d		sta $3d				sta 	gsTemp+1
.82d4	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.82d6					_GXAXExit:
.82d6	60		rts				rts
.82d7					GXIncrementY:
.82d7	ee 33 06	inc $0633			inc 	GXY0
.82da	20 65 86	jsr $8665			jsr 	GXMovePositionDown
.82dd	60		rts				rts
.82de					GXLineSetup:
.82de	ad 37 06	lda $0637			lda 	GXY1
.82e1	38		sec				sec
.82e2	ed 33 06	sbc $0633			sbc 	GXY0
.82e5	4a		lsr a				lsr 	a
.82e6	8d 48 06	sta $0648			sta 	GXDiffY
.82e9	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.82ec	38		sec				sec
.82ed	ad 35 06	lda $0635			lda 	GXX1
.82f0	ed 31 06	sbc $0631			sbc 	GXX0
.82f3	8d 47 06	sta $0647			sta 	GXDiffX
.82f6	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.82f9	ed 32 06	sbc $0632			sbc 	GXX0+1
.82fc	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.82fd	6e 47 06	ror $0647			ror 	GXDiffX
.8300	0a		asl a				asl 	a
.8301	10 0c		bpl $830f			bpl 	_GDXNotNegative
.8303	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8305	38		sec				sec
.8306	ed 47 06	sbc $0647			sbc 	GXDiffX
.8309	8d 47 06	sta $0647			sta 	GXDiffX
.830c	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.830f					_GDXNotNegative:
.830f	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.8312	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.8315	8d 4c 06	sta $064c			sta 	GXAdjust
.8318	ad 47 06	lda $0647			lda 	GXDiffX
.831b	8d 4d 06	sta $064d			sta 	GXTotal
.831e	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.8321	cd 47 06	cmp $0647			cmp 	GXDiffX
.8324	90 0f		bcc $8335			bcc 	_GDXNotLarger
.8326	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8329	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.832c	8d 4c 06	sta $064c			sta 	GXAdjust
.832f	ad 48 06	lda $0648			lda 	GXDiffY
.8332	8d 4d 06	sta $064d			sta 	GXTotal
.8335					_GDXNotLarger:
.8335	ad 4d 06	lda $064d			lda 	GXTotal
.8338	4a		lsr a				lsr 	a
.8339	8d 4b 06	sta $064b			sta 	GXPosition
.833c	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/rect.asm

.833d					GXFillRectangle:
.833d	38		sec				sec
.833e	80 01		bra $8341			bra 	GXRectangle
.8340					GXFrameRectangle:
.8340	18		clc				clc
.8341					GXRectangle:
.8341	08		php				php 								; save Fill flag (CS)
.8342	20 f1 85	jsr $85f1			jsr 	GXOpenBitmap 				; start drawing
.8345	20 80 86	jsr $8680			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.8348	20 0f 86	jsr $860f			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.834b	38		sec				sec 								; sec = Draw line
.834c	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.834f	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.8352	cd 37 06	cmp $0637			cmp 	gxY1
.8355	f0 19		beq $8370			beq 	_GXRectangleExit
.8357					_GXRectLoop:
.8357	20 65 86	jsr $8665			jsr 	GXMovePositionDown 			; down one.
.835a	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.835d	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.8360	cd 37 06	cmp $0637			cmp 	gXY1
.8363	f0 07		beq $836c			beq 	_GXLastLine
.8365	28		plp				plp 								; get flag back
.8366	08		php				php
.8367	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0 				; draw horizontal line
.836a	80 eb		bra $8357			bra 	_GXRectLoop
.836c					_GXLastLine:
.836c	38		sec				sec
.836d	20 75 83	jsr $8375			jsr 	GXDrawLineX1X0
.8370					_GXRectangleExit:
.8370	68		pla				pla 								; throw fill flag.
.8371	20 02 86	jsr $8602			jsr 	GXCloseBitmap 				; stop drawing and exit
.8374	60		rts				rts
.8375					GXDrawLineX1X0:
.8375	08		php				php 								; save solid/either-end
.8376	38		sec				sec
.8377	ad 35 06	lda $0635			lda		gXX1
.837a	ed 31 06	sbc $0631			sbc 	gXX0
.837d	85 36		sta $36				sta 	gzTemp0
.837f	ad 36 06	lda $0636			lda 	gXX1+1
.8382	ed 32 06	sbc $0632			sbc 	gXX0+1
.8385	85 37		sta $37				sta 	gzTemp0+1
.8387	28		plp				plp
.8388					GXDrawLineTemp0:
.8388	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.838a	48		pha				pha
.838b	a5 3d		lda $3d				lda 	gsTemp+1
.838d	48		pha				pha
.838e	ad 41 06	lda $0641			lda 	gsOffset
.8391	48		pha				pha
.8392	a5 0b		lda $0b				lda 	GFXEditSlot
.8394	48		pha				pha
.8395	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.8398	90 1e		bcc $83b8			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.839a					_GXDLTLine:
.839a	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.839c	2d 3e 06	and $063e			and 	gxANDValue
.839f	4d 3d 06	eor $063d			eor 	gxEORValue
.83a2	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83a4	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.83a6	d0 04		bne $83ac			bne 	_GXDLTNoBorrow
.83a8	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.83aa	30 2e		bmi $83da			bmi 	_GXDLTExit
.83ac					_GXDLTNoBorrow:
.83ac	c6 36		dec $36				dec 	gzTemp0
.83ae	c8		iny				iny 								; next slot.
.83af	d0 e9		bne $839a			bne 	_GXDLTLine
.83b1	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.83b3	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.83b6	80 e2		bra $839a			bra 	_GXDLTLine
.83b8					_GXDLTEndPoints:
.83b8	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.83ba	2d 3e 06	and $063e			and 	gxANDValue
.83bd	4d 3d 06	eor $063d			eor 	gxEORValue
.83c0	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83c2	98		tya				tya 								; advance to right side
.83c3	18		clc				clc
.83c4	65 36		adc $36				adc 	gzTemp0
.83c6	a8		tay				tay
.83c7	a5 3d		lda $3d				lda 	gsTemp+1
.83c9	65 37		adc $37				adc 	gzTemp0+1
.83cb	85 3d		sta $3d				sta 	gsTemp+1
.83cd	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap 			; fix up.
.83d0	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.83d2	2d 3e 06	and $063e			and 	gxANDValue
.83d5	4d 3d 06	eor $063d			eor 	gxEORValue
.83d8	91 3c		sta ($3c),y			sta 	(gsTemp),y
.83da					_GXDLTExit:
.83da	68		pla				pla
.83db	85 0b		sta $0b				sta 	GFXEditSlot
.83dd	68		pla				pla
.83de	8d 41 06	sta $0641			sta 	gsOffset
.83e1	68		pla				pla
.83e2	85 3d		sta $3d				sta 	gsTemp+1
.83e4	68		pla				pla
.83e5	85 3c		sta $3c				sta 	gsTemp
.83e7	60		rts				rts
.83e8					GXDLTCheckWrap:
.83e8	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.83ea	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.83ec	90 06		bcc $83f4			bcc 	_GXDLTCWExit
.83ee	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f0	85 3d		sta $3d				sta 	gsTemp+1
.83f2	e6 0b		inc $0b				inc 	GFXEditSlot
.83f4					_GXDLTCWExit:
.83f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/render.asm

.83f5					GXDrawGraphicElement:
.83f5	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.83f8	3a		dec a				dec 	a
.83f9	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.83fc	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.83ff	9c 47 a6	stz $a647			stz 	gxHFlip
.8402	2c 3b 06	bit $063b			bit 	gxMode
.8405	10 03		bpl $840a			bpl 	_GXNotVertical
.8407	8d 54 06	sta $0654			sta 	gxVFlip
.840a					_GXNotVertical:
.840a	50 03		bvc $840f			bvc 	_GXNotHorizontal
.840c	8d 47 a6	sta $a647			sta 	gxHFlip
.840f					_GXNotHorizontal:
.840f	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.8412	8e 51 06	stx $0651			stx 	gxAcquireVector
.8415	20 f1 85	jsr $85f1			jsr 	gxOpenBitmap 				; open the bitmap.
.8418	ad 3b 06	lda $063b			lda 	gxMode 						; scale bits
.841b	4a		lsr a				lsr 	a
.841c	4a		lsr a				lsr 	a
.841d	4a		lsr a				lsr 	a
.841e	29 07		and #$07			and		#7
.8420	1a		inc a				inc 	a
.8421	8d 53 06	sta $0653			sta 	gxScale
.8424	64 38		stz $38				stz 	gzTemp1						; start first line
.8426					_GXGELoop:
.8426	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.8428	4d 54 06	eor $0654			eor 	gxVFlip
.842b	aa		tax				tax 								; get the Xth line.
.842c	20 50 84	jsr $8450			jsr 	_GXCallAcquire 				; get that data.
.842f	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.8432	85 39		sta $39				sta 	gzTemp1+1
.8434					_GXGELoop2:
.8434	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8437	cd 3a 06	cmp $063a			cmp 	gxHeight
.843a	b0 10		bcs $844c			bcs 	_GXDGEExit
.843c	20 53 84	jsr $8453			jsr 	GXRenderOneLine 			; render line
.843f	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.8441	d0 f1		bne $8434			bne 	_GXGELoop2
.8443	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.8445	a5 38		lda $38				lda 	gzTemp1
.8447	cd 4f 06	cmp $064f			cmp 	gxSize
.844a	d0 da		bne $8426			bne 	_GXGELoop
.844c					_GXDGEExit:
.844c	20 02 86	jsr $8602			jsr 	GXCloseBitmap
.844f	60		rts				rts
.8450					_GXCallAcquire:
.8450	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.8453					GXRenderOneLine:
.8453	20 0f 86	jsr $860f			jsr 	GXPositionCalc 				; calculate position/offset.
.8456	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.8459	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.845b					_GXROLLoop1:
.845b	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.845e	85 3b		sta $3b				sta 	gzTemp2+1
.8460					_GXROLLoop2:
.8460	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.8462	4d 47 a6	eor $a647			eor 	gxHFlip
.8465	aa		tax				tax 								; read from the pixel buffer
.8466	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8469	f0 0a		beq $8475			beq 	_GXZeroPixel 				; don't draw if zero.
.846b	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.846d	2d 3e 06	and $063e			and 	gxANDValue
.8470	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8473	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8475					_GXZeroPixel:
.8475	c8		iny				iny 								; advance pointer
.8476	d0 05		bne $847d			bne 	_GXNoShift
.8478	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.847a	20 e8 83	jsr $83e8			jsr 	GXDLTCheckWrap				; check for new page.
.847d					_GXNoShift:
.847d	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.847f	d0 df		bne $8460			bne 	_GXROLLoop2
.8481	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.8483	a5 3a		lda $3a				lda 	gzTemp2
.8485	cd 4f 06	cmp $064f			cmp 	gxSize
.8488	d0 d1		bne $845b			bne 	_GXROLLoop1
.848a	ee 33 06	inc $0633			inc 	gxY0
.848d	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.a647					gxHFlip:
>a647							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/font.asm

.848e					GXFontHandler:
.848e	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.8490	06 36		asl $36				asl	 	gzTemp0 					; x 2
.8492	26 37		rol $37				rol	 	gzTemp0+1
.8494	06 36		asl $36				asl	 	gzTemp0 					; x 4
.8496	26 37		rol $37				rol	 	gzTemp0+1
.8498	06 36		asl $36				asl	 	gzTemp0 					; x 8
.849a	26 37		rol $37				rol	 	gzTemp0+1
.849c	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.849e	09 c0		ora #$c0			ora 	#$C0
.84a0	85 37		sta $37				sta 	gzTemp0+1
.84a2	a9 08		lda #$08			lda 	#8 							; size 8x8
.84a4	a2 ac		ldx #$ac			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.84a6	a0 84		ldy #$84			ldy 	#GXGetGraphicDataFont >> 8
.84a8	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.84ab	60		rts				rts
.84ac					GXGetGraphicDataFont:
.84ac	8a		txa				txa 								; X->Y
.84ad	a8		tay				tay
.84ae	a6 01		ldx $01				ldx 	1 							; preserve old value
.84b0	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.84b2	85 01		sta $01				sta 	1
.84b4	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.84b6	86 01		stx $01				stx 	1 							; put old value back.
.84b8	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.84ba					_GXExpand:
.84ba	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.84bd	0a		asl a				asl 	a 							; shift bit 7 into C
.84be	90 08		bcc $84c8			bcc 	_GXNoPixel
.84c0	48		pha				pha 								; if set, set pixel buffer to current colour.
.84c1	ad 3c 06	lda $063c			lda 	gxColour
.84c4	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.84c7	68		pla				pla
.84c8					_GXNoPixel:
.84c8	e8		inx				inx 								; do the whole byte.
.84c9	e0 08		cpx #$08			cpx 	#8
.84cb	d0 ed		bne $84ba			bne 	_GXExpand
.84cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/sources/sprite.asm

.84ce					GXSpriteHandler:
.84ce	a9 18		lda #$18			lda 	#GXSpritePage
.84d0	8d 55 06	sta $0655			sta 	GXspriteBasePage
.84d3	a9 08		lda #$08			lda 	#8
.84d5	a2 dd		ldx #$dd			ldx 	#GXSpriteAcquire & $FF
.84d7	a0 84		ldy #$84			ldy 	#GXSpriteAcquire >> 8
.84d9	20 f5 83	jsr $83f5			jsr 	GXDrawGraphicElement
.84dc	60		rts				rts
.84dd					GXSpriteAcquire:
.84dd	ad 55 06	lda $0655			lda 	GXspriteBasePage
.84e0	85 0b		sta $0b				sta 	GFXEditSlot
.84e2	a0 00		ldy #$00			ldy 	#0
.84e4	8a		txa				txa
.84e5	0a		asl a				asl 	a
.84e6	0a		asl a				asl 	a
.84e7	0a		asl a				asl 	a
.84e8	aa		tax				tax
.84e9					_GXSALoop:
.84e9	bd 00 62	lda $6200,x			lda 	GXMappingAddress+$200,x
.84ec	e8		inx				inx
.84ed	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.84f0	c8		iny				iny
.84f1	c0 08		cpy #$08			cpy 	#8
.84f3	d0 f4		bne $84e9			bne 	_GXSALoop
.84f5	60		rts				rts
.0655					GXspriteBasePage:
>0655							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.84f6					GraphicDraw:
.84f6	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.84f8	b0 06		bcs $8500			bcs 	_GDCoordinate
.84fa	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.84fc	84 37		sty $37				sty 	gzTemp0+1
.84fe	80 2c		bra $852c			bra 	_GDExecuteA 				; and execute
.8500					_GDCoordinate:
.8500	48		pha				pha 								; save AXY
.8501	da		phx				phx
.8502	5a		phy				phy
.8503	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8505					_GDCopy1:
.8505	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8508	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.850b	ca		dex				dex
.850c	10 f7		bpl $8505			bpl 	_GDCopy1
.850e	68		pla				pla 								; update Y
.850f	8d 2b 06	sta $062b			sta 	gxCurrentY
.8512	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8515	68		pla				pla
.8516	8d 29 06	sta $0629			sta 	gxCurrentX
.8519	68		pla				pla 								; get A (command+X.1) back
.851a	48		pha				pha
.851b	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.851d	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.8520	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.8522					_GDCopy2:
.8522	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8525	9d 31 06	sta $0631,x			sta 	gxX0,x
.8528	ca		dex				dex
.8529	10 f7		bpl $8522			bpl 	_GDCopy2
.852b	68		pla				pla 								; get command back
.852c					_GDExecuteA:
.852c	29 fe		and #$fe			and 	#$FE 						; lose LSB
.852e	aa		tax				tax
.852f	7c 33 85	jmp ($8533,x)			jmp 	(GDVectors,x)
.8532					GXMove:
.8532	60		rts				rts
.8533					GDVectors:
>8533							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>8537	c9 81						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>8539	5f 85						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>853b	8e 84						.word 	GXFontHandler 				; $04 		; Draw from font
>853d	ce 84						.word 	GXSpriteHandler 			; $05 		; Draw from sprite
>853f							.fill 	10*2 						; $06-$0F 	: Reserved
>8553	32 85						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8555	13 82						.word 	GXLine 						; $11 		: Draw line
>8557	40 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>8559	3d 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>855b	88 80						.word 	GXFrameCircle 				; $14 		; Framed circle
>855d	84 80						.word 	GXFillCircle 				; $15 		; Filled circle
.855f					GXSetColourMode:
.855f	a6 36		ldx $36				ldx 	gzTemp0
.8561	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.8564	a5 37		lda $37				lda 	gzTemp0+1 								;
.8566	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.8569	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.856b	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.856e	ae 3c 06	ldx $063c			ldx 	gxColour
.8571	8e 3d 06	stx $063d			stx 	gxEORValue
.8574	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8576	90 03		bcc $857b			bcc 	_GXSDCNotAndColour
.8578	8e 3e 06	stx $063e			stx 	gxANDValue
.857b					_GXSDCNotAndColour:
.857b	d0 03		bne $8580			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.857d	9c 3d 06	stz $063d			stz 	gxEORValue
.8580					_GXSDCNotAnd:
.8580	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8581	90 08		bcc $858b			bcc 	_GXSDCNoFlip
.8583	ad 3e 06	lda $063e			lda	 	gxANDValue
.8586	49 ff		eor #$ff			eor 	#$FF
.8588	8d 3e 06	sta $063e			sta 	gxANDValue
.858b					_GXSDCNoFlip:
.858b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.858c					RunDemos:
.858c	64 01		stz $01				stz 	1
.858e	a9 0f		lda #$0f			lda 	#$0F
.8590	8d 00 d0	sta $d000			sta 	$D000
.8593	a9 01		lda #$01			lda 	#1
.8595	8d 00 d1	sta $d100			sta 	$D100
.8598	9c 01 d1	stz $d101			stz 	$D101
.859b	9c 02 d1	stz $d102			stz 	$D102
.859e	a9 01		lda #$01			lda 	#1
.85a0	8d 03 d1	sta $d103			sta 	$D103
.85a3	a9 08		lda #$08			lda 	#8
.85a5	8d 39 06	sta $0639			sta 	gxBasePage
.85a8	a9 f0		lda #$f0			lda 	#240
.85aa	8d 3a 06	sta $063a			sta 	gxHeight
.85ad					loop:
.85ad	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.85af	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.85b1	a0 00		ldy #$00			ldy 	#(0)
.85b3	20 f6 84	jsr $84f6			jsr 	GraphicDraw
.85b6	a9 06		lda #$06			lda 	#((3)*2)+((($1C) >> 8) & 1)
.85b8	a2 1c		ldx #$1c			ldx 	#(($1C) & $FF)
.85ba	a0 18		ldy #$18			ldy 	#(0+8*3)
.85bc	20 f6 84	jsr $84f6			jsr 	GraphicDraw
.85bf	a9 20		lda #$20			lda 	#((16)*2)+(((20) >> 8) & 1)
.85c1	a2 14		ldx #$14			ldx 	#((20) & $FF)
.85c3	a0 1e		ldy #$1e			ldy 	#(30)
.85c5	20 f6 84	jsr $84f6			jsr 	GraphicDraw
.85c8	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.85ca	a2 00		ldx #$00			ldx 	#((0) & $FF)
.85cc	a0 00		ldy #$00			ldy 	#(0)
.85ce	20 f6 84	jsr $84f6			jsr 	GraphicDraw
.85d1	60		rts				rts
.85d2	20 00 9d	jsr $9d00	demo:	jsr 	Random32Bit
.85d5	ee 3d 06	inc $063d			inc 	gxEORValue
.85d8	a9 20		lda #$20			lda 	#16*2
.85da	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.85dd	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.85e0	20 f6 84	jsr $84f6			jsr 	GraphicDraw
.85e3	ad 8a 04	lda $048a			lda 	RandomSeed+2
.85e6	29 7f		and #$7f			and 	#127
.85e8	aa		tax				tax
.85e9	a9 08		lda #$08			lda 	#4*2
.85eb	20 f6 84	jsr $84f6			jsr 	GraphicDraw
.85ee	80 e2		bra $85d2			bra 	demo
.85f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.85f1					GXOpenBitmap:
.85f1	78		sei				sei 								; no interrupts here
.85f2	a5 00		lda $00				lda 	0 							; save original MMU Control register
.85f4	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.85f7	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.85f9	85 00		sta $00				sta 	0
.85fb	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.85fd	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.8600	58		cli				cli
.8601	60		rts				rts
.8602					GXCloseBitmap:
.8602	78		sei				sei
.8603	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8606	85 0b		sta $0b				sta 	GFXEditSlot
.8608	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.860b	85 00		sta $00				sta 	0
.860d	58		cli				cli
.860e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.860f					GXPositionCalc:
.860f	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.8611	48		pha				pha
.8612	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.8615	85 3c		sta $3c				sta 	gsTemp
.8617	64 3d		stz $3d				stz 	gsTemp+1
.8619	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.861b	26 3d		rol $3d				rol 	gsTemp+1
.861d	06 3c		asl $3c				asl 	gsTemp
.861f	26 3d		rol $3d				rol 	gsTemp+1
.8621	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8622	65 3c		adc $3c				adc 	gsTemp
.8624	85 3c		sta $3c				sta 	gsTemp
.8626	90 02		bcc $862a			bcc 	_GXPCNoCarry
.8628	e6 3d		inc $3d				inc 	gsTemp+1
.862a					_GXPCNoCarry:
.862a	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.862c	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.862e	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.8630	85 36		sta $36				sta 	gzTemp0
.8632	64 3d		stz $3d				stz 	gsTemp+1
.8634	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8636					_GXPCMultiply32:
.8636	06 3c		asl $3c				asl 	gsTemp
.8638	26 3d		rol $3d				rol 	gsTemp+1
.863a	3a		dec a				dec 	a
.863b	d0 f9		bne $8636			bne 	_GXPCMultiply32
.863d	18		clc				clc
.863e	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.8641	65 3c		adc $3c				adc 	gsTemp
.8643	8d 41 06	sta $0641			sta 	gsOffset
.8646	ad 32 06	lda $0632			lda 	GXX0+1
.8649	65 3d		adc $3d				adc 	gsTemp+1
.864b	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.864d	90 04		bcc $8653			bcc 	_GXPCNoOverflow
.864f	29 1f		and #$1f			and 	#$1F 						; fix it up
.8651	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8653					_GXPCNoOverflow:
.8653	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8655	85 3d		sta $3d				sta 	gsTemp+1
.8657	64 3c		stz $3c				stz 	gsTemp
.8659	18		clc				clc
.865a	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.865c	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.865f	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8661	68		pla				pla
.8662	85 36		sta $36				sta 	gzTemp0
.8664	60		rts				rts
.8665					GXMovePositionDown:
.8665	18		clc				clc 								; add 320 to offset/temp+1
.8666	ad 41 06	lda $0641			lda 	gsOffset
.8669	69 40		adc #$40			adc 	#64
.866b	8d 41 06	sta $0641			sta 	gsOffset
.866e	a5 3d		lda $3d				lda 	gsTemp+1
.8670	69 01		adc #$01			adc 	#1
.8672	85 3d		sta $3d				sta 	gsTemp+1
.8674	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8676	90 07		bcc $867f			bcc 	_GXMPDExit
.8678	38		sec				sec  								; next page
.8679	e9 20		sbc #$20			sbc 	#$20
.867b	85 3d		sta $3d				sta 	gsTemp+1
.867d	e6 0b		inc $0b				inc 	GFXEditSlot
.867f					_GXMPDExit:
.867f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.8680					GXSortXY:
.8680	20 9e 86	jsr $869e			jsr 	GXSortY 					; will be sorted on Y now
.8683	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8686	cd 35 06	cmp $0635			cmp 	gxX1
.8689	ad 32 06	lda $0632			lda 	gXX0+1
.868c	ed 36 06	sbc $0636			sbc 	gXX1+1
.868f	90 0c		bcc $869d			bcc 	_GXSXYExit 					; X0 < X1 exit
.8691	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8693	a0 04		ldy #$04			ldy 	#4
.8695	20 b2 86	jsr $86b2			jsr 	GXSwapXY
.8698	e8		inx				inx
.8699	c8		iny				iny
.869a	20 b2 86	jsr $86b2			jsr 	GXSwapXY
.869d					_GXSXYExit:
.869d	60		rts				rts
.869e					GXSortY:
.869e	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.86a1	cd 37 06	cmp $0637			cmp 	gxY1
.86a4	90 0b		bcc $86b1			bcc 	_GXSYSorted
.86a6	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.86a8	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.86aa					_GXSwap1:
.86aa	20 b2 86	jsr $86b2			jsr 	GXSwapXY
.86ad	88		dey				dey
.86ae	ca		dex				dex
.86af	10 f9		bpl $86aa			bpl 	_GXSwap1
.86b1					_GXSYSorted:
.86b1	60		rts				rts
.86b2					GXSwapXY:
.86b2	bd 31 06	lda $0631,x			lda 	gxX0,x
.86b5	48		pha				pha
.86b6	b9 31 06	lda $0631,y			lda 	gxX0,y
.86b9	9d 31 06	sta $0631,x			sta 	gxX0,x
.86bc	68		pla				pla
.86bd	99 31 06	sta $0631,y			sta 	gxX0,y
.86c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.86c1					AssembleGroup1:
.86c1	a9 ff		lda #$ff			lda 	#$FF
.86c3	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.86c6	80 02		bra $86ca			bra 	AsmGroup12
.86c8					AssembleGroup2:
.86c8	a5 00		lda $00				lda 	$00
.86ca					AsmGroup12:
.86ca	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.86cd	68		pla				pla 								; pop the return address to access the information following.
.86ce	fa		plx				plx
.86cf	20 58 87	jsr $8758			jsr 	AccessParameters 			; get opcode and save as base
.86d2	8d a4 04	sta $04a4			sta 	BaseOpcode
.86d5	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.86d8	d0 08		bne $86e2			bne 	_AG12HaveMask
.86da	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.86dc	20 60 87	jsr $8760			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.86df	8d a5 04	sta $04a5			sta 	ModeMask
.86e2					_AG12HaveMask:
.86e2	20 9b 88	jsr $889b			jsr 	TypeAndCalculateOperand 	; get zero page type
.86e5	da		phx				phx 								; save found address mode
.86e6	20 c4 87	jsr $87c4			jsr 	AssembleModeX
.86e9	fa		plx				plx  								; restore address mode
.86ea	b0 0b		bcs $86f7			bcs 	_AG12Exit
.86ec	20 f8 86	jsr $86f8			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.86ef	20 c4 87	jsr $87c4			jsr 	AssembleModeX
.86f2	b0 03		bcs $86f7			bcs 	_AG12Exit
.86f4	4c b7 ac	jmp $acb7			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.86f7					_AG12Exit:
.86f7	60		rts				rts
.86f8					PromoteToAbsolute:
.86f8	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.86fa	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.86fc	f0 19		beq $8717			beq 	_PTADo
.86fe	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8700	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8702	f0 13		beq $8717			beq 	_PTADo
.8704	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8706	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8708	f0 0d		beq $8717			beq 	_PTADo
.870a	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.870c	e0 d1		cpx #$d1			cpx 	#AM_IND
.870e	f0 07		beq $8717			beq 	_PTADo
.8710	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8712	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8714	f0 01		beq $8717			beq 	_PTADo
.8716	60		rts				rts
.8717					_PTADo:
.8717	aa		tax				tax
.8718	60		rts				rts
.8719					AssembleGroup3:
.8719	68		pla				pla 								; get parameters, which is just the opcode.
.871a	fa		plx				plx
.871b	20 58 87	jsr $8758			jsr 	AccessParameters 			; get and output opcode
.871e	20 70 87	jsr $8770			jsr 	AssemblerWriteByte
.8721	20 ff 88	jsr $88ff			jsr 	CalculateOperand 			; get a 16 bit operand
.8724	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8727	38		sec				sec
.8728	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.872b	48		pha				pha 								; LSB in A
.872c	ad 10 04	lda $0410			lda 	NSMantissa1
.872f	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8732	aa		tax				tax 								; MSB in X
.8733	68		pla				pla
.8734	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8735	69 7f		adc #$7f			adc 	#$7F
.8737	90 01		bcc $873a			bcc 	_AG3NoCarry
.8739	e8		inx				inx
.873a					_AG3NoCarry:
.873a	38		sec				sec 								; fix back and write out anyways.
.873b	e9 80		sbc #$80			sbc 	#$80
.873d	20 70 87	jsr $8770			jsr 	AssemblerWriteByte
.8740	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8742	f0 0a		beq $874e			beq 	_AG3Exit
.8744	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8747	29 01		and #$01			and 	#1
.8749	f0 03		beq $874e			beq 	_AG3Exit
.874b	4c bc ac	jmp $acbc			jmp 	RangeError 					; no, branch is out of range
.874e					_AG3Exit:
.874e	60		rts				rts
.874f					AssembleGroup4:
.874f	68		pla				pla 								; pop address
.8750	fa		plx				plx
.8751	20 58 87	jsr $8758			jsr 	AccessParameters 			; access and get first
.8754	20 70 87	jsr $8770			jsr 	AssemblerWriteByte 			; output it.
.8757	60		rts				rts
.8758					AccessParameters:
.8758	8d a1 04	sta $04a1			sta 	ParamStart
.875b	8e a2 04	stx $04a2			stx 	ParamStart+1
.875e	a9 01		lda #$01			lda 	#1
.8760					GetParameter:
.8760	5a		phy				phy
.8761	a8		tay				tay
.8762	ad a1 04	lda $04a1			lda 	ParamStart
.8765	85 36		sta $36				sta 	zTemp0
.8767	ad a2 04	lda $04a2			lda 	ParamStart+1
.876a	85 37		sta $37				sta 	zTemp0+1
.876c	b1 36		lda ($36),y			lda 	(zTemp0),y
.876e	7a		ply				ply
.876f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8770					AssemblerWriteByte:
.8770	48		pha			pha
.8771	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8774	29 02		and #$02		and 	#2
.8776	f0 1b		beq $8793		beq 	_AWBNoPrint
.8778	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.877b	20 ae 87	jsr $87ae		jsr 	PrintHex
.877e	ad 9e 04	lda $049e		lda		AssemblerAddress
.8781	20 ae 87	jsr $87ae		jsr 	PrintHex
.8784	a9 20		lda #$20		lda 	#' '
.8786	20 5b ae	jsr $ae5b		jsr 	EXTPrintCharacter
.8789	68		pla			pla 									; print byte
.878a	48		pha			pha
.878b	20 ae 87	jsr $87ae		jsr 	PrintHex
.878e	a9 0d		lda #$0d		lda 	#13
.8790	20 5b ae	jsr $ae5b		jsr 	EXTPrintCharacter
.8793					_AWBNoPrint:
.8793	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8796	85 36		sta $36			sta 	zTemp0
.8798	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.879b	f0 0e		beq $87ab		beq 	_AWBRange
.879d	85 37		sta $37			sta 	zTemp0+1
.879f	68		pla			pla 									; write byte out
.87a0	92 36		sta ($36)		sta 	(zTemp0)
.87a2	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.87a5	d0 03		bne $87aa		bne 	_AWBNoCarry
.87a7	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.87aa					_AWBNoCarry:
.87aa	60		rts			rts
.87ab					_AWBRange:
.87ab	4c bc ac	jmp $acbc		jmp 	RangeError
.87ae					PrintHex:
.87ae	48		pha				pha
.87af	4a		lsr a				lsr 	a
.87b0	4a		lsr a				lsr 	a
.87b1	4a		lsr a				lsr 	a
.87b2	4a		lsr a				lsr 	a
.87b3	20 b7 87	jsr $87b7			jsr 	_PrintNibble
.87b6	68		pla				pla
.87b7					_PrintNibble:
.87b7	29 0f		and #$0f			and 	#15
.87b9	c9 0a		cmp #$0a			cmp 	#10
.87bb	90 02		bcc $87bf			bcc 	_NoShift
.87bd	69 06		adc #$06			adc 	#6
.87bf					_NoShift:
.87bf	69 30		adc #$30			adc 	#48
.87c1	4c 5b ae	jmp $ae5b			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.87c4					AssembleModeX:
.87c4	5a		phy				phy
.87c5	ad a3 04	lda $04a3			lda 	IsGroup1
.87c8	f0 17		beq $87e1			beq 	_AMXGroup2
.87ca	8a		txa				txa 							; is it in group # 1
.87cb	29 40		and #$40			and 	#AM_ISG1
.87cd	f0 50		beq $881f			beq 	_AMXFail 				; no, give up.
.87cf	8a		txa				txa 							; get back.
.87d0	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.87d2	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.87d4	d0 22		bne $87f8			bne 	_AMXHaveInfo
.87d6	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.87d9	c9 81		cmp #$81			cmp 	#$81
.87db	f0 42		beq $881f			beq 	_AMXFail
.87dd	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.87df	80 17		bra $87f8			bra 	_AMXHaveInfo 			; odd design decision there.
.87e1					_AMXGroup2:
.87e1	8a		txa				txa 							; is it in group 2 ?
.87e2	29 20		and #$20			and 	#AM_ISG2
.87e4	f0 39		beq $881f			beq 	_AMXFail 				; no, give up.
.87e6	8a		txa				txa 							; get the offset into Y
.87e7	29 1f		and #$1f			and 	#$1F
.87e9	4a		lsr a				lsr 	a 						; make it 0-7.
.87ea	4a		lsr a				lsr  	a
.87eb	a8		tay				tay
.87ec	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.87ef					_AMXCheckOkay:
.87ef	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.87f0	88		dey				dey
.87f1	10 fc		bpl $87ef			bpl 	_AMXCheckOkay
.87f3	90 2a		bcc $881f			bcc 	_AMXFail 				; not allowed.
.87f5	8a		txa				txa  							; get mask back
.87f6	29 1f		and #$1f			and 	#$1F
.87f8					_AMXHaveInfo:
.87f8	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.87fa	10 05		bpl $8801			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.87fc	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.87ff	d0 1e		bne $881f			bne 	_AMXFail
.8801					_AMXAnySize:
.8801	18		clc				clc 							; add offset to the base opcode
.8802	6d a4 04	adc $04a4			adc 	BaseOpcode
.8805					_AMXOutputCode:
.8805	20 70 87	jsr $8770			jsr 	AssemblerWriteByte 		; write the opcode out.
.8808	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.880a	f0 10		beq $881c			beq 	_AMXExit
.880c	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.880f	20 70 87	jsr $8770			jsr 	AssemblerWriteByte
.8812	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8814	30 06		bmi $881c			bmi 	_AMXExit
.8816	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8819	20 70 87	jsr $8770			jsr 	AssemblerWriteByte
.881c					_AMXExit:
.881c	7a		ply				ply
.881d	38		sec				sec
.881e	60		rts				rts
.881f					_AMXFail:
.881f	a0 00		ldy #$00			ldy 	#0
.8821					_AMXCheckOddities:
.8821	8a		txa				txa
.8822	d9 4a 88	cmp $884a,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8825	d0 16		bne $883d			bne 	_AMXCONext
.8827	b9 48 88	lda $8848,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.882a	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.882d	d0 0e		bne $883d			bne 	_AMXCONext
.882f	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8831	10 05		bpl $8838			bpl 	_AMXCONotZero
.8833	ad 10 04	lda $0410			lda 	NSMantissa1
.8836	d0 05		bne $883d			bne 	_AMXCONext
.8838					_AMXCONotZero:
.8838	b9 49 88	lda $8849,y			lda 	ExtraOpcode+1,y 		; get new opcode
.883b	80 c8		bra $8805			bra 	_AMXOutputCode 			; and assemble it
.883d					_AMXCONext:
.883d	c8		iny				iny
.883e	c8		iny				iny
.883f	c8		iny				iny
.8840	b9 48 88	lda $8848,y			lda 	ExtraOpcode+0,y 		; end of table
.8843	d0 dc		bne $8821			bne 	_AMXCheckOddities
.8845					_AMXCOFail:
.8845	7a		ply				ply
.8846	18		clc				clc
.8847	60		rts				rts
.8848					ExtraOpcode:
>8848	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>884b	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>884e	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8851	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8854	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8857	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>885a	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>885d	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8860	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8863	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8866	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8867					LabelHere:
.8867	c8		iny				iny 								; skip .
.8868	a2 00		ldx #$00			ldx 	#0 							; get a term
.886a	20 71 9a	jsr $9a71			jsr 	EvaluateTerm 				; get a term
.886d	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8870	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8872	d0 24		bne $8898			bne 	_ALType
.8874	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8877	85 36		sta $36				sta 	zTemp0
.8879	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.887c	85 37		sta $37				sta 	zTemp0+1
.887e	5a		phy				phy 								; copy address in.
.887f	a0 01		ldy #$01			ldy 	#1
.8881	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8884	92 36		sta ($36)			sta 	(zTemp0)
.8886	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8889	91 36		sta ($36),y			sta 	(zTemp0),y
.888b	c8		iny				iny
.888c	a9 00		lda #$00			lda 	#0
.888e	91 36		sta ($36),y			sta 	(zTemp0),y
.8890	c8		iny				iny
.8891	91 36		sta ($36),y			sta 	(zTemp0),y
.8893	c8		iny				iny
.8894	91 36		sta ($36),y			sta 	(zTemp0),y
.8896	7a		ply				ply
.8897	60		rts				rts
.8898					_ALType:
.8898	4c c1 ac	jmp $acc1			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.889b					TypeAndCalculateOperand:
.889b	b1 30		lda ($30),y			lda 	(codePtr),y
.889d	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.889f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88a1	f0 5b		beq $88fe			beq 	_TACOExit
.88a3	c9 80		cmp #$80			cmp 	#KWC_EOL
.88a5	f0 57		beq $88fe			beq 	_TACOExit
.88a7	c8		iny				iny
.88a8	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.88aa	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.88ac	f0 51		beq $88ff			beq 	CalculateOperand
.88ae	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.88b0	f0 1f		beq $88d1			beq 	_TACOIndirect
.88b2	88		dey				dey 								; undo get of first character
.88b3	20 ff 88	jsr $88ff			jsr 	CalculateOperand 			; get operand
.88b6	b1 30		lda ($30),y			lda 	(codePtr),y
.88b8	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.88ba	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88bc	d0 40		bne $88fe			bne 	_TACOExit
.88be	c8		iny				iny
.88bf	20 48 a6	jsr $a648			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.88c2	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.88c4	c9 58		cmp #$58			cmp 	#'X'
.88c6	f0 36		beq $88fe			beq 	_TACOExit
.88c8	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.88ca	c9 59		cmp #$59			cmp 	#'Y'
.88cc	f0 30		beq $88fe			beq 	_TACOExit
.88ce					_TACOSyntax:
.88ce	4c b7 ac	jmp $acb7			jmp 	SyntaxError
.88d1					_TACOIndirect:
.88d1	20 ff 88	jsr $88ff			jsr 	CalculateOperand 			; get the operand
.88d4	b1 30		lda ($30),y			lda 	(codePtr),y
.88d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.88d8	f0 17		beq $88f1			beq 	_TACOIndX
.88da	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.88dd	b1 30		lda ($30),y			lda 	(codePtr),y
.88df	a2 d1		ldx #$d1			ldx 	#AM_IND
.88e1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.88e3	d0 19		bne $88fe			bne 	_TACOExit
.88e5	c8		iny				iny
.88e6	20 48 a6	jsr $a648			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.88e9	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.88eb	d0 e1		bne $88ce			bne 	_TACOSyntax
.88ed	a2 d0		ldx #$d0			ldx 	#AM_INDY
.88ef	80 0d		bra $88fe			bra 	_TACOExit
.88f1					_TACOIndX:
.88f1	c8		iny				iny
.88f2	20 48 a6	jsr $a648			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.88f5	c9 58		cmp #$58			cmp 	#'X' 						; check X
.88f7	d0 d5		bne $88ce			bne 	_TACOSyntax
.88f9	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket			; check )
.88fc	a2 c0		ldx #$c0			ldx 	#AM_INDX
.88fe					_TACOExit:
.88fe	60		rts				rts
.88ff					CalculateOperand:
.88ff	48		pha				pha
.8900	da		phx				phx
.8901	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8903	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger
.8906	fa		plx				plx
.8907	68		pla				pla
.8908	60		rts				rts
.a648					TACOCheckXY:
.a648	b1 30		lda ($30),y			lda 	(codePtr),y
.a64a	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a64c	c9 40		cmp #$40			cmp 	#$40
.a64e	d0 21		bne $a671			bne 	_TCXYFail
.a650	b1 30		lda ($30),y			lda 	(codePtr),y
.a652	18		clc				clc
.a653	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a655	85 37		sta $37				sta 	zTemp0+1
.a657	c8		iny				iny
.a658	b1 30		lda ($30),y			lda 	(codePtr),y
.a65a	c8		iny				iny
.a65b	85 36		sta $36				sta 	zTemp0
.a65d	5a		phy				phy 								; save position
.a65e	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a660	b1 36		lda ($36),y			lda 	(zTemp0),y
.a662	d0 0c		bne $a670			bne 	_TCXYPopFail
.a664	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a666	b1 36		lda ($36),y			lda 	(zTemp0),y
.a668	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a66a	f0 08		beq $a674			beq 	_TCXYFound
.a66c	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a66e	f0 04		beq $a674			beq 	_TCXYFound
.a670					_TCXYPopFail:
.a670	7a		ply				ply
.a671					_TCXYFail:
.a671	a9 00		lda #$00			lda 	#0
.a673	60		rts				rts
.a674					_TCXYFound:
.a674	7a		ply				ply 								; restore position
.a675	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a677	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8909					EditProgramCode:
.8909	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.890c	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.890f	20 ae 9f	jsr $9fae			jsr 	MemorySearch
.8912	90 05		bcc $8919			bcc 	_EPCNoDelete 				; reached the end don't delete
.8914	d0 03		bne $8919			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8916	20 9f ae	jsr $ae9f			jsr 	MemoryDeleteLine 			; delete the line
.8919					_EPCNoDelete:
.8919	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.891c	c9 80		cmp #$80			cmp 	#KWC_EOL
.891e	f0 0d		beq $892d			beq 	_EPCNoInsert
.8920	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8923	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8926	20 ae 9f	jsr $9fae			jsr 	MemorySearch
.8929	18		clc				clc 								; insert at this point.
.892a	20 d6 ae	jsr $aed6			jsr 	MemoryInsertLine 			; insert the line
.892d					_EPCNoInsert:
.892d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.892e					WarmStart:
.892e	a2 ff		ldx #$ff			ldx 	#$FF
.8930	9a		txs				txs
.8931	20 71 ae	jsr $ae71			jsr 	EXTInputLine 				; get line to lineBuffer
.8934	20 c8 a3	jsr $a3c8			jsr 	TokeniseLine 				; tokenise the line
.8937	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.893a	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.893d	d0 17		bne $8956			bne 	_WSEditCode 				; if so,edit code.
.893f	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8942	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8944	85 30		sta $30				sta 	codePtr
.8946	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8948	85 31		sta $31				sta 	codePtr+1
.894a	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.894d	c9 80		cmp #$80			cmp 	#KWC_EOL
.894f	f0 dd		beq $892e			beq 	WarmStart
.8951	20 5f 8f	jsr $8f5f			jsr 	RUNCodePointerLine 			; execute that line.
.8954	80 d8		bra $892e			bra 	WarmStart
.8956					_WSEditCode:
.8956	20 09 89	jsr $8909			jsr 	EditProgramCode
.8959	20 c7 89	jsr $89c7			jsr 	ClearCommand
.895c	80 d0		bra $892e			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.895e					AssembleCommand:
.895e	a2 00		ldx #$00			ldx 	#0
.8960	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger 		; start address
.8963	ad 08 04	lda $0408			lda 	NSMantissa0
.8966	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8969	ad 10 04	lda $0410			lda 	NSMantissa1
.896c	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.896f	20 d9 a6	jsr $a6d9			jsr 	CheckComma
.8972	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger 		; options
.8975	ad 08 04	lda $0408			lda 	NSMantissa0
.8978	8d a0 04	sta $04a0			sta 	AssemblerControl
.897b	60		rts				rts
.897c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.897d					AssertCommand:
.897d	a2 00		ldx #$00			ldx 	#0
.897f	20 c6 9e	jsr $9ec6			jsr 	EvaluateInteger 			; the assert test
.8982	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; exit if result is non zero.
.8985	d0 05		bne $898c			bne 	_ACExit
.8987	a9 0a		lda #$0a		lda	#10
.8989	4c 97 93	jmp $9397		jmp	ErrorHandler
.898c					_ACExit:
.898c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.898d					CallCommand:
.898d	a2 00		ldx #$00			ldx 	#0
.898f	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger
.8992					_CCClear
.8992	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8993	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero
.8996	e0 04		cpx #$04			cpx 	#4
.8998	d0 f8		bne $8992			bne 	_CCClear
.899a	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.899c					_CCCParam:
.899c	b1 30		lda ($30),y			lda 	(codePtr),y
.899e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89a0	d0 09		bne $89ab			bne 	_CCCRun6502
.89a2	c8		iny				iny 								; skip comma
.89a3	e8		inx				inx	 								; next level
.89a4	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger 		; get A/X/Y
.89a7	e0 03		cpx #$03			cpx 	#3
.89a9	90 f1		bcc $899c			bcc 	_CCCParam 					; done all 3 ?
.89ab					_CCCRun6502:
.89ab	5a		phy				phy 								; save position
.89ac	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.89af	85 37		sta $37				sta 	zTemp0+1
.89b1	ad 08 04	lda $0408			lda 	NSMantissa0
.89b4	85 36		sta $36				sta 	zTemp0
.89b6	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.89b9	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.89bc	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.89bf	20 c4 89	jsr $89c4			jsr 	_CCCZTemp0 					; call zTemp0
.89c2	7a		ply				ply 								; restore position and exit
.89c3	60		rts				rts
.89c4					_CCCZTemp0:
.89c4	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.89c7					ClearCommand:
.89c7	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.89c9	85 36		sta $36				sta 	0+zTemp0
.89cb	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.89cd	85 37		sta $37				sta 	1+zTemp0
.89cf					_ClearZeroLoop:
.89cf	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.89d1	f0 24		beq $89f7			beq 	_ClearZeroEnd
.89d3	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.89d5	a9 00		lda #$00			lda 	#0
.89d7					_ClearOneVariable:
.89d7	91 36		sta ($36),y			sta 	(zTemp0),y
.89d9	c8		iny				iny
.89da	c0 08		cpy #$08			cpy 	#8
.89dc	d0 f9		bne $89d7			bne 	_ClearOneVariable
.89de	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.89e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.89e2	c9 18		cmp #$18			cmp 	#NSTProcedure
.89e4	d0 04		bne $89ea			bne 	_ClearNotProcedure
.89e6	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.89e8	91 36		sta ($36),y			sta 	(zTemp0),y
.89ea					_ClearNotProcedure:
.89ea	18		clc				clc 								; go to the next variable
.89eb	b2 36		lda ($36)			lda 	(zTemp0)
.89ed	65 36		adc $36				adc 	zTemp0
.89ef	85 36		sta $36				sta 	zTemp0
.89f1	90 dc		bcc $89cf			bcc 	_ClearZeroLoop
.89f3	e6 37		inc $37				inc 	zTemp0+1
.89f5	80 d8		bra $89cf			bra 	_ClearZeroLoop
.89f7					_ClearZeroEnd:
.89f7	18		clc				clc
.89f8	a5 36		lda $36				lda 	zTemp0
.89fa	69 01		adc #$01			adc 	#1
.89fc	8d 8c 04	sta $048c			sta 	lowMemPtr
.89ff	a5 37		lda $37				lda 	zTemp0+1
.8a01	69 00		adc #$00			adc 	#0
.8a03	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8a06	20 68 a0	jsr $a068			jsr 	StackReset
.8a09	20 b9 af	jsr $afb9			jsr 	StringSystemInitialise
.8a0c	20 b7 92	jsr $92b7			jsr 	ProcedureScan
.8a0f	20 1b 8f	jsr $8f1b			jsr 	Command_Restore
.8a12	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8a15	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8a18	9c a0 04	stz $04a0			stz 	AssemblerControl
.8a1b	20 5e 9c	jsr $9c5e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8a1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8a1f					Command_Data:
.8a1f	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8a21	a2 80		ldx #$80			ldx 	#KWC_EOL
.8a23	20 09 93	jsr $9309			jsr 	ScanForward
.8a26	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8a27					DimCommand:
.8a27	b1 30		lda ($30),y			lda 	(codePtr),y
.8a29	29 c0		and #$c0			and 	#$C0
.8a2b	c9 40		cmp #$40			cmp 	#$40
.8a2d	d0 7a		bne $8aa9			bne 	_DCSyntax
.8a2f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a31	18		clc				clc
.8a32	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a34	85 3f		sta $3f				sta 	zaTemp+1
.8a36	c8		iny				iny
.8a37	b1 30		lda ($30),y			lda 	(codePtr),y
.8a39	c8		iny				iny
.8a3a	85 3e		sta $3e				sta 	zaTemp
.8a3c	5a		phy				phy
.8a3d	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8a3f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a41	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8a43	c9 18		cmp #$18			cmp 	#NSTProcedure
.8a45	f0 62		beq $8aa9			beq 	_DCSyntax
.8a47	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8a49	29 04		and #$04			and 	#NSBIsArray
.8a4b	f0 64		beq $8ab1			beq 	_DCType
.8a4d	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8a4f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a51	d0 59		bne $8aac			bne 	_DCRedefine
.8a53	7a		ply				ply
.8a54	20 b4 8a	jsr $8ab4			jsr 	_DCGetSize 				; get array size, check it.
.8a57	5a		phy				phy
.8a58	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8a5a	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8a5c	7a		ply				ply 							; is there a second (e.g. ,x)
.8a5d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a61	d0 0a		bne $8a6d			bne 	_DCOneDimension
.8a63	c8		iny				iny 							; skip comma
.8a64	20 b4 8a	jsr $8ab4			jsr 	_DCGetSize 				; get 2nd array size
.8a67	5a		phy				phy
.8a68	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8a6a	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a6c	7a		ply				ply
.8a6d					_DCOneDimension:
.8a6d	5a		phy				phy 							; save position
.8a6e	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8a70	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a72	aa		tax				tax
.8a73	c8		iny				iny
.8a74	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a76	e8		inx				inx 							; bump them.
.8a77	1a		inc a				inc 	a
.8a78	20 53 ab	jsr $ab53			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8a7b	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8a7d	29 e0		and #$e0			and 	#$E0
.8a7f	d0 23		bne $8aa4			bne 	_DCSize
.8a81	a0 02		ldy #$02			ldy 	#2 						; get base type
.8a83	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8a85	20 c2 8a	jsr $8ac2			jsr 	ScaleByBaseType 		; scale by base type
.8a88	a5 36		lda $36				lda 	zTemp0
.8a8a	a6 37		ldx $37				ldx 	zTemp0+1
.8a8c	20 20 9c	jsr $9c20			jsr 	AllocateXABytes 		; allocate memory
.8a8f	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8a91	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a93	c8		iny				iny
.8a94	8a		txa				txa
.8a95	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8a97	7a		ply				ply 							; get position back
.8a98	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 		; check )
.8a9b	b1 30		lda ($30),y			lda 	(codePtr),y
.8a9d	c8		iny				iny 							; consume in case
.8a9e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8aa0	f0 85		beq $8a27			beq 	DimCommand
.8aa2	88		dey				dey 							; undo consume
.8aa3	60		rts				rts
.8aa4					_DCSize:
.8aa4	a9 16		lda #$16		lda	#22
.8aa6	4c 97 93	jmp $9397		jmp	ErrorHandler
.8aa9					_DCSyntax:
.8aa9	4c b7 ac	jmp $acb7			jmp 	SyntaxError
.8aac					_DCRedefine:
.8aac	a9 15		lda #$15		lda	#21
.8aae	4c 97 93	jmp $9397		jmp	ErrorHandler
.8ab1					_DCType:
.8ab1	4c c1 ac	jmp $acc1			jmp 	TypeError
.8ab4					_DCGetSize:
.8ab4	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8ab6	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger 	; get array dimension
.8ab9	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8abb	f0 e7		beq $8aa4			beq 	_DCSize
.8abd	c9 fe		cmp #$fe			cmp 	#254
.8abf	f0 e3		beq $8aa4			beq 	_DCSize
.8ac1	60		rts				rts
.8ac2					ScaleByBaseType:
.8ac2	29 10		and #$10			and 	#NSBIsString 			; is it string
.8ac4	d0 19		bne $8adf			bne 	_SBBTString
.8ac6	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8ac8	48		pha				pha
.8ac9	a5 36		lda $36				lda 	zTemp0
.8acb	48		pha				pha
.8acc	06 36		asl $36				asl 	zTemp0 					; x 2
.8ace	26 37		rol $37				rol 	zTemp0+1
.8ad0	06 36		asl $36				asl 	zTemp0 					; x 4
.8ad2	26 37		rol $37				rol 	zTemp0+1
.8ad4	68		pla				pla 							; add stacked value = x 5
.8ad5	65 36		adc $36				adc 	zTemp0
.8ad7	85 36		sta $36				sta 	zTemp0
.8ad9	68		pla				pla
.8ada	65 37		adc $37				adc 	zTemp0+1
.8adc	85 37		sta $37				sta 	zTemp0+1
.8ade	60		rts				rts
.8adf					_SBBTString:
.8adf	06 36		asl $36				asl 	zTemp0
.8ae1	26 37		rol $37				rol 	zTemp0+1
.8ae3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8ae4					EndCommand:
.8ae4	4c 2e 89	jmp $892e			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8ae7					ForCommand:
.8ae7	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8ae9	20 03 a0	jsr $a003			jsr 	StackOpen
.8aec	a2 00		ldx #$00			ldx 	#0
.8aee	20 71 9a	jsr $9a71			jsr 	EvaluateTerm
.8af1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8af4	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8af6	d0 49		bne $8b41			bne		_FCError
.8af8	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8afa	20 e1 a6	jsr $a6e1			jsr 	CheckNextA
.8afd	e8		inx				inx
.8afe	20 c6 9e	jsr $9ec6			jsr 	EvaluateInteger 			; <from> in +1
.8b01	b1 30		lda ($30),y			lda 	(codePtr),y
.8b03	c8		iny				iny 								; consume it
.8b04	48		pha				pha 								; save on stack for later
.8b05	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8b07	f0 04		beq $8b0d			beq 	_FCNoSyntax
.8b09	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8b0b	d0 37		bne $8b44			bne 	_FCSyntaxError
.8b0d					_FCNoSyntax:
.8b0d	e8		inx				inx
.8b0e	20 c6 9e	jsr $9ec6			jsr 	EvaluateInteger
.8b11	20 47 a0	jsr $a047			jsr 	STKSaveCodePosition 		; save loop back position
.8b14	68		pla				pla 								; restore DOWNTO or TO
.8b15	5a		phy				phy 								; save Y on the stack
.8b16	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8b18	f0 02		beq $8b1c			beq 	_FCNotDownTo
.8b1a	a9 02		lda #$02			lda 	#2
.8b1c					_FCNotDownTo:
.8b1c	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8b1d	a0 10		ldy #$10			ldy 	#16
.8b1f	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8b21	a0 06		ldy #$06			ldy 	#6
.8b23	ad 08 04	lda $0408			lda 	NSMantissa0
.8b26	91 34		sta ($34),y			sta 	(basicStack),y
.8b28	ad 10 04	lda $0410			lda 	NSMantissa1
.8b2b	c8		iny				iny
.8b2c	91 34		sta ($34),y			sta 	(basicStack),y
.8b2e	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8b30	a2 01		ldx #$01			ldx 	#1
.8b32	20 47 8b	jsr $8b47			jsr 	FCIntegerToStack
.8b35	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8b37	a2 02		ldx #$02			ldx 	#2
.8b39	20 47 8b	jsr $8b47			jsr 	FCIntegerToStack
.8b3c	20 67 8b	jsr $8b67			jsr 	CopyIndexToReference
.8b3f	7a		ply				ply 								; restore position
.8b40	60		rts				rts
.8b41					_FCError:
.8b41	4c c1 ac	jmp $acc1			jmp 	TypeError
.8b44					_FCSyntaxError:
.8b44	4c b7 ac	jmp $acb7			jmp 	SyntaxError
.8b47					FCIntegerToStack:
.8b47	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8b4a	10 03		bpl $8b4f			bpl	 	_FCNotNegative
.8b4c	20 04 9f	jsr $9f04			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8b4f					_FCNotNegative:
.8b4f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8b52	91 34		sta ($34),y			sta 	(basicStack),y
.8b54	c8		iny				iny
.8b55	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b58	91 34		sta ($34),y			sta 	(basicStack),y
.8b5a	c8		iny				iny
.8b5b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8b5e	91 34		sta ($34),y			sta 	(basicStack),y
.8b60	c8		iny				iny
.8b61	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8b64	91 34		sta ($34),y			sta 	(basicStack),y
.8b66	60		rts				rts
.8b67					CopyIndexToReference:
.8b67	5a		phy				phy
.8b68	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8b6a	38		sec				sec 								; (because we copy from offset 8)
.8b6b	b1 34		lda ($34),y			lda 	(basicStack),y
.8b6d	e9 08		sbc #$08			sbc 	#8
.8b6f	85 36		sta $36				sta 	zTemp0
.8b71	c8		iny				iny
.8b72	b1 34		lda ($34),y			lda 	(basicStack),y
.8b74	e9 00		sbc #$00			sbc 	#0
.8b76	85 37		sta $37				sta 	zTemp0+1
.8b78	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8b7a	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8b7c	b1 34		lda ($34),y			lda 	(basicStack),y
.8b7e	0a		asl a				asl 	a 							; into carry
.8b7f	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8b81	90 14		bcc $8b97			bcc 	_CITRNormal
.8b83	38		sec				sec
.8b84					_CITRNegative:
.8b84	a9 00		lda #$00			lda 	#0
.8b86	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8b88	91 36		sta ($36),y			sta 	(zTemp0),y
.8b8a	c8		iny				iny
.8b8b	ca		dex				dex
.8b8c	d0 f6		bne $8b84			bne 	_CITRNegative
.8b8e	88		dey				dey 								; look at MSB of mantissa
.8b8f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8b91	09 80		ora #$80			ora 	#$80
.8b93	91 36		sta ($36),y			sta 	(zTemp0),y
.8b95	7a		ply				ply
.8b96	60		rts				rts
.8b97					_CITRNormal:
.8b97	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8b99	91 36		sta ($36),y			sta 	(zTemp0),y
.8b9b	c8		iny				iny
.8b9c	ca		dex				dex
.8b9d	d0 f8		bne $8b97			bne 	_CITRNormal
.8b9f	7a		ply				ply 								; and exit.
.8ba0	60		rts				rts
.8ba1					NextCommand:
.8ba1	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8ba3	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8ba5	20 2f a0	jsr $a02f			jsr 	StackCheckFrame
.8ba8	5a		phy				phy
.8ba9	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8bab	b1 34		lda ($34),y			lda 	(basicStack),y
.8bad	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8baf	30 02		bmi $8bb3			bmi 	_NCStepNeg
.8bb1	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8bb3					_NCStepNeg:
.8bb3	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8bb5	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8bb7	18		clc				clc
.8bb8					_NCBump:
.8bb8	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8bba	91 34		sta ($34),y			sta 	(basicStack),y
.8bbc	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8bbe	c8		iny				iny 								; next byte
.8bbf	ca		dex				dex 								; do four times
.8bc0	d0 f6		bne $8bb8			bne 	_NCBump
.8bc2	20 67 8b	jsr $8b67			jsr		CopyIndexToReference		; copy it to the reference variable.
.8bc5	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8bc7	b1 34		lda ($34),y			lda 	(basicStack),y
.8bc9	0a		asl a				asl 	a 							; sign bit to carry
.8bca	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8bcc	85 38		sta $38				sta 	zTemp1
.8bce	90 02		bcc $8bd2			bcc 	_NCCompRev 					; use if step is +ve
.8bd0	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8bd2					_NCCompRev:
.8bd2	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8bd4	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8bd6	85 39		sta $39				sta 	zTemp1+1
.8bd8	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8bda	38		sec				sec
.8bdb					_NCCompare:
.8bdb	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8bdd	b1 34		lda ($34),y			lda 	(basicStack),y
.8bdf	a4 39		ldy $39				ldy 	zTemp1+1
.8be1	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8be3	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8be5	e6 39		inc $39				inc 	zTemp1+1
.8be7	ca		dex				dex 								; do it 4 times.
.8be8	d0 f1		bne $8bdb			bne 	_NCCompare
.8bea	50 02		bvc $8bee			bvc 	_NCNoOverflow 				; convert to signed comparison
.8bec	49 80		eor #$80			eor 	#$80
.8bee					_NCNoOverflow:
.8bee	7a		ply				ply 								; restore Y position
.8bef	0a		asl a				asl 	a 							; is bit 7 set.
.8bf0	90 04		bcc $8bf6			bcc 	_NCLoopback 				; if no , >= so loop back
.8bf2	20 21 a0	jsr $a021			jsr 	StackClose 					; exit the loop
.8bf5	60		rts				rts
.8bf6					_NCLoopBack:
.8bf6	20 58 a0	jsr $a058			jsr 	STKLoadCodePosition 		; loop back
.8bf9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8bfa					Command_GOSUB:
.8bfa	a2 00		ldx #$00			ldx 	#0
.8bfc	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8bff	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8c01	20 03 a0	jsr $a003			jsr 	StackOpen 					; create frame
.8c04	20 47 a0	jsr $a047			jsr 	STKSaveCodePosition 		; save current position
.8c07	4c 1d 8c	jmp $8c1d			jmp 	GotoStackX
.8c0a					Command_RETURN:
.8c0a	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8c0c	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8c0e	20 2f a0	jsr $a02f			jsr 	StackCheckFrame
.8c11	20 58 a0	jsr $a058			jsr 	STKLoadCodePosition 		; restore code position
.8c14	20 21 a0	jsr $a021			jsr 	StackClose
.8c17	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8c18					GotoCommand:
.8c18	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8c1a	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger
.8c1d					GotoStackX:
.8c1d	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8c20	48		pha				pha 								; it is slightly inefficient, just in cases.
.8c21	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8c24	fa		plx				plx
.8c25	20 ae 9f	jsr $9fae			jsr 	MemorySearch 				; transfer to line number AX.
.8c28	90 05		bcc $8c2f			bcc 	_GotoError 					; not found, off end.
.8c2a	d0 03		bne $8c2f			bne 	_GotoError 					; not found exactly
.8c2c	4c 58 8f	jmp $8f58			jmp 	RunNewLine 					; and go straight to new line code.
.8c2f					_GotoError:
.8c2f	a9 0d		lda #$0d		lda	#13
.8c31	4c 97 93	jmp $9397		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8c34					IfCommand:
.8c34	a2 00		ldx #$00			ldx 	#0 							; If what.
.8c36	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber
.8c39	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3b	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8c3d	d0 0a		bne $8c49			bne 	_IFStructured
.8c3f	c8		iny				iny 								; consume THEN
.8c40	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; is it zero
.8c43	f0 01		beq $8c46			beq 	_IfFail 					; if fail, go to next line
.8c45	60		rts				rts 								; if THEN just continue
.8c46					_IfFail:
.8c46	4c bd 8f	jmp $8fbd			jmp 	EOLCommand
.8c49					_IfStructured:
.8c49	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; is it zero
.8c4c	d0 07		bne $8c55			bne 	_IfExit 					; if not, then continue normally.
.8c4e	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8c50	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8c52	20 09 93	jsr $9309			jsr 	ScanForward 				; and run from there/
.8c55					_IfExit:
.8c55	60		rts				rts
.8c56					ElseCode:
.8c56	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8c58	aa		tax				tax 								; so just go to the structure exit
.8c59	20 09 93	jsr $9309			jsr 	ScanForward
.8c5c	60		rts				rts
.8c5d					EndIf:
.8c5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8c5e					LetCommand:
.8c5e	a2 00		ldx #$00			ldx 	#0
.8c60	b1 30		lda ($30),y			lda 	(codePtr),y
.8c62	c9 10		cmp #$10			cmp 	#KWD_AT
.8c64	d0 16		bne $8c7c			bne 	_LCStandard
.8c66	c8		iny				iny 								; skip equal
.8c67	20 71 9a	jsr $9a71			jsr 	EvaluateTerm 				; get a number
.8c6a	20 b5 98	jsr $98b5			jsr 	Dereference 				; dereference it
.8c6d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8c70	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8c72	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8c75	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8c77	d0 10		bne $8c89			bne 	_LCMain
.8c79	4c c1 ac	jmp $acc1			jmp 	TypeError 					; was a reference before.
.8c7c					_LCStandard:
.8c7c	ad 88 97	lda $9788			lda 	PrecedenceLevel+"*"			; precedence > this
.8c7f	20 a2 97	jsr $97a2			jsr 	EvaluateExpressionAtPrecedence
.8c82	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8c85	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8c87	f0 0e		beq $8c97			beq 	_LetGoProc 					; it's a procedure call.
.8c89					_LCMain:
.8c89	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8c8b	20 e1 a6	jsr $a6e1			jsr 	CheckNextA
.8c8e	e8		inx				inx 								; RHS
.8c8f	20 9a 9e	jsr $9e9a			jsr 	EvaluateValue
.8c92	ca		dex				dex
.8c93	20 9a 8c	jsr $8c9a			jsr 	AssignVariable
.8c96	60		rts				rts
.8c97					_LetGoProc:
.8c97	4c 33 8e	jmp $8e33			jmp 	CallProcedure
.8c9a					AssignVariable:
.8c9a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c9d	48		pha				pha 								; save a copy
.8c9e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8ca1	29 10		and #$10			and 	#NSBIsString
.8ca3	d0 0b		bne $8cb0			bne 	_ASError
.8ca5	68		pla				pla 								; get back
.8ca6	29 10		and #$10			and 	#NSBIsString 				; check type
.8ca8	d0 03		bne $8cad			bne 	_ASString
.8caa	4c dd 97	jmp $97dd			jmp 	AssignNumber
.8cad					_ASString:
.8cad	4c 4b 98	jmp $984b			jmp 	AssignString
.8cb0					_ASError:
.8cb0	4c c1 ac	jmp $acc1			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8cb3					Command_List:
.8cb3	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8cb6	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8cb9	a9 ff		lda #$ff			lda 	#$FF
.8cbb	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8cbe	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8cc1	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cc5	f0 1e		beq $8ce5			beq 	_CLSecond
.8cc7	20 43 8d	jsr $8d43			jsr 	CLIsDigit 					; if not digit, list all
.8cca	b0 24		bcs $8cf0			bcs 	_CLStart
.8ccc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8cce	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger
.8cd1	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cd5	f0 0e		beq $8ce5			beq 	_CLSecond 					; if so go get it
.8cd7	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8cda	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8cdd	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8ce0	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8ce3	80 0b		bra $8cf0			bra 	_CLStart
.8ce5					_CLSecond:
.8ce5	c8		iny				iny 								; consume comma
.8ce6	20 43 8d	jsr $8d43			jsr 	CLIsDigit 					; digit found
.8ce9	b0 05		bcs $8cf0			bcs 	_CLStart 					; if not, continue listing
.8ceb	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8ced	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger
.8cf0					_CLStart
.8cf0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cf2	85 30		sta $30				sta 	codePtr
.8cf4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cf6	85 31		sta $31				sta 	codePtr+1
.8cf8					_CLLoop:
.8cf8	20 9c ae	jsr $ae9c			jsr 	EXTBreakCheck 				; break check
.8cfb	f0 30		beq $8d2d			beq 	_CLExit
.8cfd	b2 30		lda ($30)			lda 	(codePtr)
.8cff	f0 2c		beq $8d2d			beq 	_CLExit
.8d01	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8d03	20 30 8d	jsr $8d30			jsr 	CLCompareLineNo
.8d06	90 18		bcc $8d20			bcc 	_CLNext
.8d08	a2 07		ldx #$07			ldx 	#7
.8d0a	20 30 8d	jsr $8d30			jsr 	CLCompareLineNo
.8d0d	f0 02		beq $8d11			beq 	_CLDoThisOne
.8d0f	b0 0f		bcs $8d20			bcs 	_CLNext
.8d11					_CLDoThisOne:
.8d11	20 65 91	jsr $9165			jsr 	ListConvertLine 			; convert line into token Buffer
.8d14	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d16	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8d18	20 f0 93	jsr $93f0			jsr 	PrintStringXA
.8d1b	a9 0d		lda #$0d			lda 	#13 						; new line
.8d1d	20 5b ae	jsr $ae5b			jsr 	EXTPrintCharacter
.8d20					_CLNext:
.8d20	18		clc				clc
.8d21	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d23	65 30		adc $30				adc 	codePtr
.8d25	85 30		sta $30				sta 	codePtr
.8d27	90 02		bcc $8d2b			bcc 	_CREExit
.8d29	e6 31		inc $31				inc 	codePtr+1
.8d2b					_CREExit:
.8d2b	80 cb		bra $8cf8			bra 	_CLLoop
.8d2d					_CLExit:
.8d2d	4c 2e 89	jmp $892e			jmp 	WarmStart
.8d30					CLCompareLineNo:
.8d30	38		sec				sec
.8d31	a0 01		ldy #$01			ldy 	#1
.8d33	b1 30		lda ($30),y			lda 	(codePtr),y
.8d35	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8d38	85 36		sta $36				sta 	zTemp0
.8d3a	c8		iny				iny
.8d3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3d	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8d40	05 36		ora $36				ora 	zTemp0
.8d42	60		rts				rts
.8d43					CLIsDigit:
.8d43	b1 30		lda ($30),y			lda 	(codePtr),y
.8d45	c9 30		cmp #$30			cmp 	#"0"
.8d47	90 03		bcc $8d4c			bcc	 	_CLIDExitFalse
.8d49	c9 3a		cmp #$3a			cmp 	#"9"+1
.8d4b	60		rts				rts
.8d4c					_CLIDExitFalse:
.8d4c	38		sec				sec
.8d4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d4e					Command_LOCAL:
.8d4e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d50	20 5c 8d	jsr $8d5c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d53	b1 30		lda ($30),y			lda 	(codePtr),y
.8d55	c8		iny				iny
.8d56	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d58	f0 f4		beq $8d4e			beq 	Command_LOCAL
.8d5a	88		dey				dey 								; unpick pre-get
.8d5b	60		rts				rts
.8d5c					LocaliseNextTerm:
.8d5c	20 71 9a	jsr $9a71			jsr 	EvaluateTerm 				; evaluate the term
.8d5f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d62	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8d64	f0 69		beq $8dcf			beq		_LNTError
.8d66	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d69	85 36		sta $36				sta 	zTemp0
.8d6b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d6e	85 37		sta $37				sta  	zTemp0+1
.8d70	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d73	29 10		and #$10			and 	#NSBIsString
.8d75	d0 22		bne $8d99			bne 	_LNTPushString
.8d77	5a		phy				phy
.8d78	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d7a					_LNTPushNumLoop:
.8d7a	b1 36		lda ($36),y			lda		(zTemp0),y
.8d7c	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8d7f	a9 00		lda #$00			lda 	#0
.8d81	91 36		sta ($36),y			sta 	(zTemp0),y
.8d83	c8		iny				iny
.8d84	c0 05		cpy #$05			cpy 	#5
.8d86	d0 f2		bne $8d7a			bne 	_LNTPushNumLoop
.8d88	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d8a	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8d8d	a5 37		lda $37				lda 	zTemp0+1
.8d8f	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8d92	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d94	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8d97	7a		ply				ply
.8d98	60		rts				rts
.8d99					_LNTPushString:
.8d99	5a		phy				phy
.8d9a	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d9c	85 38		sta $38				sta 	zTemp1
.8d9e	a0 01		ldy #$01			ldy 	#1
.8da0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8da2	85 39		sta $39				sta 	zTemp1+1
.8da4	a0 00		ldy #$00			ldy 	#0 							; output string
.8da6	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8da8	f0 0a		beq $8db4			beq 	_LNTStringOut
.8daa					_LNTPushStrLoop:
.8daa	b1 38		lda ($38),y			lda 	(zTemp1),y
.8dac	f0 06		beq $8db4			beq 	_LNTStringOut
.8dae	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8db1	c8		iny				iny
.8db2	80 f6		bra $8daa			bra 	_LNTPushStrLoop
.8db4					_LNTStringOut:
.8db4	98		tya				tya									; output length
.8db5	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8db8	a9 00		lda #$00			lda 	#0 							; clear original string.
.8dba	92 38		sta ($38)			sta 	(zTemp1)
.8dbc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8dbf	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8dc2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dc5	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8dc8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8dca	20 e1 9f	jsr $9fe1			jsr 	StackPushByte
.8dcd	7a		ply				ply
.8dce	60		rts				rts
.8dcf					_LNTError:
.8dcf	4c b7 ac	jmp $acb7			jmp 	SyntaxError
.a678					LocalPopValue:
.a678	20 fa 9f	jsr $9ffa			jsr 	StackPopByte
.a67b	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a67d	d0 17		bne $a696			bne 	_LPVString
.a67f	20 fa 9f	jsr $9ffa			jsr 	StackPopByte 				; address
.a682	85 37		sta $37				sta 	zTemp0+1
.a684	20 fa 9f	jsr $9ffa			jsr 	StackPopByte
.a687	85 36		sta $36				sta 	zTemp0
.a689	5a		phy				phy
.a68a	a0 04		ldy #$04			ldy 	#4 							; copy back
.a68c					_LPVNumberCopy:
.a68c	20 fa 9f	jsr $9ffa			jsr 	StackPopByte
.a68f	91 36		sta ($36),y			sta 	(zTemp0),y
.a691	88		dey				dey
.a692	10 f8		bpl $a68c			bpl 	_LPVNumberCopy
.a694	7a		ply				ply 								; and complete
.a695	60		rts				rts
.a696					_LPVString:
.a696	20 fa 9f	jsr $9ffa			jsr 	StackPopByte 				; address of record => zTemp0
.a699	85 37		sta $37				sta 	zTemp0+1
.a69b	20 fa 9f	jsr $9ffa			jsr 	StackPopByte
.a69e	85 36		sta $36				sta 	zTemp0
.a6a0	5a		phy				phy
.a6a1	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a6a3	85 38		sta $38				sta 	zTemp1
.a6a5	a0 01		ldy #$01			ldy 	#1
.a6a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6a9	85 39		sta $39				sta 	zTemp1+1
.a6ab	20 fa 9f	jsr $9ffa			jsr 	StackPopByte 				; # to get => y
.a6ae	a8		tay				tay
.a6af	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a6b1	f0 0e		beq $a6c1			beq 	_LPVStringCopied
.a6b3	a9 00		lda #$00			lda 	#0 							; NULL on end
.a6b5	91 38		sta ($38),y			sta 	(zTemp1),y
.a6b7					_LPVStringCopy:
.a6b7	88		dey				dey
.a6b8	30 07		bmi $a6c1			bmi 	_LPVStringCopied
.a6ba	20 fa 9f	jsr $9ffa			jsr 	StackPopByte
.a6bd	91 38		sta ($38),y			sta 	(zTemp1),y
.a6bf	80 f6		bra $a6b7			bra 	_LPVStringCopy
.a6c1					_LPVStringCopied:
.a6c1	fa		plx				plx
.a6c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8dd2					NewCommand:
.8dd2	20 8c 9f	jsr $9f8c			jsr 	MemoryNew
.8dd5	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8dd8	20 c7 89	jsr $89c7			jsr 	ClearCommand 				; clear everything.
.8ddb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8ddc					Command_Print:
.8ddc	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ddd					_CPLoop:
.8ddd	08		php				php 								; save last action flag
.8dde	b1 30		lda ($30),y			lda 	(codePtr),y
.8de0	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8de2	f0 46		beq $8e2a			beq 	_CPExit
.8de4	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8de6	f0 42		beq $8e2a			beq 	_CPExit
.8de8	68		pla				pla 								; throw last action flag
.8de9	b1 30		lda ($30),y			lda 	(codePtr),y
.8deb	c8		iny				iny
.8dec	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8dee	f0 37		beq $8e27			beq 	_CPContinueWithSameLine
.8df0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8df2	f0 2e		beq $8e22			beq 	_CPTab
.8df4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8df6	f0 26		beq $8e1e			beq 	_CPNewLine
.8df8	88		dey				dey 								; undo the get.
.8df9	a2 00		ldx #$00			ldx 	#0
.8dfb	20 9a 9e	jsr $9e9a			jsr 	EvaluateValue 				; get a value into slot 0
.8dfe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8e01	29 10		and #$10			and 	#NSBIsString
.8e03	f0 0b		beq $8e10			beq 	_CPNumber
.8e05	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8e08	ad 08 04	lda $0408			lda 	NSMantissa0
.8e0b	20 f0 93	jsr $93f0			jsr 	PrintStringXA
.8e0e	80 cc		bra $8ddc			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e10					_CPNumber:
.8e10	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8e12	20 70 9d	jsr $9d70			jsr 	ConvertNumberToString 		; convert to string
.8e15	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8e17	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8e19	20 f0 93	jsr $93f0			jsr 	PrintStringXA
.8e1c	80 be		bra $8ddc			bra 	Command_Print 				; loop round clearing carry so NL if end
.8e1e					_CPNewLine:
.8e1e	a9 0d		lda #$0d			lda 	#13
.8e20	80 02		bra $8e24			bra 	_CPPrintChar
.8e22					_CPTab:
.8e22	a9 09		lda #$09			lda 	#9 							; print TAB
.8e24					_CPPrintChar:
.8e24	20 5b ae	jsr $ae5b			jsr 	EXTPrintCharacter
.8e27					_CPContinueWithSameLine:
.8e27	38		sec				sec 								; loop round with carry set, which
.8e28	80 b3		bra $8ddd			bra 	_CPLoop 					; will inhibit final CR
.8e2a					_CPExit:
.8e2a	28		plp				plp 								; get last action flag
.8e2b	b0 05		bcs $8e32			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e2d	a9 0d		lda #$0d			lda 	#13 						; print new line
.8e2f	20 5b ae	jsr $ae5b			jsr 	EXTPrintCharacter
.8e32					_CPExit2:
.8e32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8e33					CallProcedure:
.8e33	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e35	b1 30		lda ($30),y			lda 	(codePtr),y
.8e37	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e39	f0 0c		beq $8e47			beq 	_CPEndParam
.8e3b					_CPParamLoop:
.8e3b	20 a0 97	jsr $97a0			jsr 	EvaluateExpression 			; get parameter onto stack
.8e3e	e8		inx				inx 								; bump next stack
.8e3f	b1 30		lda ($30),y			lda 	(codePtr),y
.8e41	c8		iny				iny
.8e42	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e44	f0 f5		beq $8e3b			beq 	_CPParamLoop
.8e46	88		dey				dey 								; unpick.
.8e47					_CPEndParam:
.8e47	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8e4a	c8		iny				iny									; skip right bracket
.8e4b	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e4d	20 03 a0	jsr $a003			jsr 	StackOpen
.8e50	20 47 a0	jsr $a047			jsr 	STKSaveCodePosition 		; save loop position
.8e53	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e56	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e58	ad 10 04	lda $0410			lda 	NSMantissa1
.8e5b	85 37		sta $37				sta 	zTemp0+1
.8e5d	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e5f	b2 36		lda ($36)			lda 	(zTemp0)
.8e61	85 30		sta $30				sta 	safePtr
.8e63	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e65	85 31		sta $31				sta 	safePtr+1
.8e67	c8		iny				iny
.8e68	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6a	85 32		sta $32				sta 	safePtr+2
.8e6c	c8		iny				iny
.8e6d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6f	85 33		sta $33				sta 	safePtr+3
.8e71	c8		iny				iny 								; get Y offset -> Y
.8e72	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e74	a8		tay				tay
.8e75	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e77	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8e7a	f0 13		beq $8e8f			beq 	_ParamExit 					; if so, exit.
.8e7c					_ParamExtract:
.8e7c	ca		dex				dex 								; put a local term on the level before
.8e7d	20 5c 8d	jsr $8d5c			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e80	20 9a 8c	jsr $8c9a			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e83	e8		inx				inx 								; advance to next parameter to do.
.8e84	e8		inx				inx
.8e85	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8e88	f0 05		beq $8e8f			beq 	_ParamExit
.8e8a	20 d9 a6	jsr $a6d9			jsr 	CheckComma 					; comma seperating parameters
.8e8d	80 ed		bra $8e7c			bra 	_ParamExtract
.8e8f					_ParamExit:
.8e8f	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 			; check )
.8e92	60		rts				rts 								; and continue from here
.a6c3					Command_ENDPROC:
.a6c3	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a6c5	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a6c7	20 2f a0	jsr $a02f			jsr 	StackCheckFrame
.a6ca	20 58 a0	jsr $a058			jsr 	STKLoadCodePosition 		; restore code position
.a6cd	20 21 a0	jsr $a021			jsr 	StackClose
.a6d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e93					Command_Read:
.8e93	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e95	20 71 9a	jsr $9a71			jsr 	EvaluateTerm
.8e98	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e9b	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8e9d	f0 4a		beq $8ee9			beq 	_CRSyntax 					; check reference (bit 0)
.8e9f	20 32 8f	jsr $8f32			jsr 	SwapDataCodePtrs 			; swap code and data
.8ea2	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ea5	d0 20		bne $8ec7			bne 	_CRContinueData
.8ea7					_CRKeepSearching:
.8ea7	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8ea9	aa		tax				tax
.8eaa	20 09 93	jsr $9309			jsr 	ScanForward
.8ead	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8eaf	f0 16		beq $8ec7			beq 	_CRHaveData 				; found it
.8eb1	18		clc				clc
.8eb2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8eb4	65 30		adc $30				adc 	codePtr
.8eb6	85 30		sta $30				sta 	codePtr
.8eb8	90 02		bcc $8ebc			bcc 	_CREExit
.8eba	e6 31		inc $31				inc 	codePtr+1
.8ebc					_CREExit:
.8ebc	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ebe	b2 30		lda ($30)			lda 	(codePtr)
.8ec0	d0 e5		bne $8ea7			bne 	_CRKeepSearching
.8ec2	a9 0b		lda #$0b		lda	#11
.8ec4	4c 97 93	jmp $9397		jmp	ErrorHandler
.8ec7					_CRHaveData:
.8ec7					_CRContinueData:
.8ec7	a2 01		ldx #$01			ldx 	#1
.8ec9	20 9a 9e	jsr $9e9a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8ecc	ca		dex				dex
.8ecd	20 9a 8c	jsr $8c9a			jsr		AssignVariable 				; do the assignment
.8ed0	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8ed3	b1 30		lda ($30),y			lda 	(codePtr),y
.8ed5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8ed7	d0 04		bne $8edd			bne 	_CRSwapBack
.8ed9	c8		iny				iny 								; consume comma
.8eda	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8edd					_CRSwapBack:
.8edd	20 32 8f	jsr $8f32			jsr 	SwapDataCodePtrs			; swap them back.
.8ee0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee2	c8		iny				iny
.8ee3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ee5	f0 ac		beq $8e93			beq 	Command_Read 				; if so go round again.
.8ee7	88		dey				dey 								; unpick get.
.8ee8	60		rts				rts
.8ee9					_CRSyntax:
.8ee9	4c b7 ac	jmp $acb7			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8eec					RemCommand:
.8eec	b1 30		lda ($30),y			lda 	(codePtr),y
.8eee	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ef0	d0 06		bne $8ef8			bne 	_RMExit
.8ef2	c8		iny				iny
.8ef3	98		tya				tya
.8ef4	38		sec				sec
.8ef5	71 30		adc ($30),y			adc 	(codePtr),y
.8ef7	a8		tay				tay
.8ef8					_RMExit:
.8ef8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8ef9					Command_REPEAT:
.8ef9	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8efb	20 03 a0	jsr $a003			jsr 	StackOpen
.8efe	20 47 a0	jsr $a047			jsr 	STKSaveCodePosition 		; save loop position
.8f01	60		rts				rts
.8f02					Command_UNTIL:
.8f02	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f04	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f06	20 2f a0	jsr $a02f			jsr 	StackCheckFrame
.8f09	a2 00		ldx #$00			ldx 	#0
.8f0b	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber 				; work out the number
.8f0e	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; check if zero
.8f11	f0 04		beq $8f17			beq 	_CULoopBack 				; if so keep looping
.8f13	20 21 a0	jsr $a021			jsr 	StackClose		 			; return
.8f16	60		rts				rts
.8f17					_CULoopBack:
.8f17	20 58 a0	jsr $a058			jsr 	STKLoadCodePosition 		; loop back
.8f1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f1b					Command_Restore:
.8f1b	20 32 8f	jsr $8f32			jsr 	SwapDataCodePtrs 			; swap code and data
.8f1e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f20	85 30		sta $30				sta 	codePtr
.8f22	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f24	85 31		sta $31				sta 	codePtr+1
.8f26	20 32 8f	jsr $8f32			jsr 	SwapDataCodePtrs 			; put them back
.8f29	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f2b	8d 9b 04	sta $049b			sta 	dataPointer+4
.8f2e	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8f31	60		rts				rts
.8f32					SwapDataCodePtrs:
.8f32	da		phx				phx
.8f33	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f35					_SDCPLoop:
.8f35	b5 30		lda $30,x			lda 	safePtr,x
.8f37	48		pha				pha
.8f38	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8f3b	95 30		sta $30,x			sta 	safePtr,x
.8f3d	68		pla				pla
.8f3e	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8f41	ca		dex				dex
.8f42	10 f1		bpl $8f35			bpl 	_SDCPLoop
.8f44	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8f47	8c 9b 04	sty $049b			sty 	dataPointer+4
.8f4a	a8		tay				tay
.8f4b	fa		plx				plx
.8f4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f4d					CommandRUN:
.8f4d	20 c7 89	jsr $89c7			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8f50	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f52	85 30		sta $30				sta 	codePtr
.8f54	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f56	85 31		sta $31				sta 	codePtr+1
.8f58					RUNNewLine:
.8f58	b2 30		lda ($30)			lda 	(codePtr)
.8f5a	f0 5e		beq $8fba			beq 	CRNoProgram         		; no then END.
.8f5c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f5e	9a		txs				txs
.8f5f					RUNCodePointerLine:
.8f5f	a0 02		ldy #$02			ldy 	#2 							; start of program
.8f61					_CRIncMainLoop:
.8f61	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8f64	d0 05		bne $8f6b			bne 	_CRNoBreakCheck
.8f66	20 9c ae	jsr $ae9c			jsr 	EXTBreakCheck 				; break check
.8f69	f0 4a		beq $8fb5			beq 	_CRBreak
.8f6b					_CRNoBreakCheck:
.8f6b	c8		iny				iny
.8f6c					_CRMainLoop:
.8f6c	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f6f	b1 30		lda ($30),y			lda 	(codePtr),y
.8f71	10 10		bpl $8f83			bpl 	_CRNotKeyword
.8f73	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8f75	b0 04		bcs $8f7b			bcs 	_CRIsKeyword
.8f77	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8f79	b0 34		bcs $8faf			bcs		_CRSyntaxError
.8f7b					_CRIsKeyword:
.8f7b	c8		iny				iny 								; consume command
.8f7c	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8f7d	aa		tax				tax 								; put in X for vector jump
.8f7e	20 b2 8f	jsr $8fb2			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8f81	80 e9		bra $8f6c			bra 	_CRMainLoop 				; and loop round
.8f83					_CRNotKeyword:
.8f83	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8f85	f0 da		beq $8f61			beq 	_CRIncMainLoop
.8f87	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8f89	90 05		bcc $8f90			bcc 	_CRNotVariable
.8f8b					_CRGoLet:
.8f8b	20 5e 8c	jsr $8c5e			jsr 	LetCommand
.8f8e	80 dc		bra $8f6c			bra 	_CRMainLoop
.8f90					_CRNotVariable:
.8f90	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8f92	f0 f7		beq $8f8b			beq 	_CRGoLet
.8f94	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8f96	f0 f3		beq $8f8b			beq 	_CRGoLet
.8f98	c9 21		cmp #$21			cmp 	#KWD_PLING
.8f9a	f0 ef		beq $8f8b			beq 	_CRGoLet
.8f9c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8f9e	f0 09		beq $8fa9			beq 	_CRGoRem
.8fa0	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8fa2	d0 0b		bne $8faf			bne 	_CRSyntaxError
.8fa4	20 67 88	jsr $8867			jsr 	LabelHere
.8fa7	80 c3		bra $8f6c			bra 	_CRMainLoop
.8fa9					_CRGoRem:
.8fa9	c8		iny				iny
.8faa	20 ec 8e	jsr $8eec			jsr 	RemCommand
.8fad	80 bd		bra $8f6c			bra 	_CRMainLoop
.8faf					_CRSyntaxError:
.8faf	4c b7 ac	jmp $acb7			jmp 	SyntaxError
.8fb2					_CRCallVector0:
.8fb2	7c 5e 90	jmp ($905e,x)			jmp 	(VectorSet0,x)
.8fb5					_CRBreak:
.8fb5	a9 01		lda #$01		lda	#1
.8fb7	4c 97 93	jmp $9397		jmp	ErrorHandler
.8fba					CRNoProgram:
.8fba	4c e4 8a	jmp $8ae4			jmp 	EndCommand
.8fbd					EOLCommand:
.8fbd	18		clc				clc
.8fbe	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8fc0	65 30		adc $30				adc 	codePtr
.8fc2	85 30		sta $30				sta 	codePtr
.8fc4	90 02		bcc $8fc8			bcc 	_CREExit
.8fc6	e6 31		inc $31				inc 	codePtr+1
.8fc8					_CREExit:
.8fc8	80 8e		bra $8f58			bra 	RunNewLine
.8fca					Shift1Command:
.8fca	b1 30		lda ($30),y			lda 	(codePtr),y
.8fcc	c8		iny				iny
.8fcd	0a		asl a				asl 	a
.8fce	aa		tax				tax
.8fcf	7c c0 90	jmp ($90c0,x)			jmp 	(VectorSet1,x)
.8fd2					Shift2Command:
.8fd2	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd4	c8		iny				iny
.8fd5	0a		asl a				asl 	a
.8fd6	aa		tax				tax
.8fd7	7c d8 90	jmp ($90d8,x)			jmp 	(VectorSet2,x)
.8fda					Unused1:
.8fda					Unused2:
.8fda					Unused3:
.8fda					Unused4:
.8fda	4c b7 ac	jmp $acb7			jmp 	SyntaxError
>8fdd							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8fde					VectorSetPunc:
>8fde	41 95					.word	ShiftLeft                        ; $00 <<
>8fe0	3b 94					.word	BinaryCompareLessEqual           ; $01 <=
>8fe2	31 94					.word	BinaryCompareNotEqual            ; $02 <>
>8fe4	b7 ac					.word	SyntaxError                      ; $03 !!3
>8fe6	b7 ac					.word	SyntaxError                      ; $04 ><
>8fe8	45 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>8fea	44 95					.word	ShiftRight                       ; $06 >>
>8fec	b7 ac					.word	SyntaxError                      ; $07 !!7
>8fee	b7 ac					.word	SyntaxError                      ; $08 !!8
>8ff0	b7 ac					.word	SyntaxError                      ; $09 !!9
>8ff2	b7 ac					.word	SyntaxError                      ; $0a !!10
>8ff4	b7 ac					.word	SyntaxError                      ; $0b !!11
>8ff6	b7 ac					.word	SyntaxError                      ; $0c !!12
>8ff8	b7 ac					.word	SyntaxError                      ; $0d !!13
>8ffa	b7 ac					.word	SyntaxError                      ; $0e !!14
>8ffc	b7 ac					.word	SyntaxError                      ; $0f !!15
>8ffe	b7 ac					.word	SyntaxError                      ; $10 @
>9000	b7 ac					.word	SyntaxError                      ; $11 !!17
>9002	b7 ac					.word	SyntaxError                      ; $12 !!18
>9004	b7 ac					.word	SyntaxError                      ; $13 [
>9006	ea a6					.word	IntegerDivide                    ; $14 \
>9008	b7 ac					.word	SyntaxError                      ; $15 ]
>900a	ca 96					.word	EorInteger                       ; $16 ^
>900c	b7 ac					.word	SyntaxError                      ; $17 _
>900e	b7 ac					.word	SyntaxError                      ; $18 `
>9010	b7 ac					.word	SyntaxError                      ; $19 !!25
>9012	b7 ac					.word	SyntaxError                      ; $1a !!26
>9014	b7 ac					.word	SyntaxError                      ; $1b {
>9016	84 96					.word	OraInteger                       ; $1c |
>9018	b7 ac					.word	SyntaxError                      ; $1d }
>901a	b7 ac					.word	SyntaxError                      ; $1e ~
>901c	b7 ac					.word	SyntaxError                      ; $1f [7m<7F>[m
>901e	b7 ac					.word	SyntaxError                      ; $20
>9020	10 97					.word	WordIndirect                     ; $21 !
>9022	b7 ac					.word	SyntaxError                      ; $22 "
>9024	b7 ac					.word	SyntaxError                      ; $23 #
>9026	b7 ac					.word	SyntaxError                      ; $24 $
>9028	37 a7					.word	IntegerModulus                   ; $25 %
>902a	3e 96					.word	AndInteger                       ; $26 &
>902c	b7 ac					.word	SyntaxError                      ; $27 '
>902e	b7 ac					.word	SyntaxError                      ; $28 (
>9030	b7 ac					.word	SyntaxError                      ; $29 )
>9032	ac a7					.word	MulInteger                       ; $2a *
>9034	d8 95					.word	AddInteger                       ; $2b +
>9036	b7 ac					.word	SyntaxError                      ; $2c ,
>9038	13 96					.word	SubInteger                       ; $2d -
>903a	b7 ac					.word	SyntaxError                      ; $2e .
>903c	43 a9					.word	FDivideCommand                   ; $2f /
>903e	b7 ac					.word	SyntaxError                      ; $30 0
>9040	b7 ac					.word	SyntaxError                      ; $31 1
>9042	b7 ac					.word	SyntaxError                      ; $32 2
>9044	b7 ac					.word	SyntaxError                      ; $33 3
>9046	b7 ac					.word	SyntaxError                      ; $34 4
>9048	b7 ac					.word	SyntaxError                      ; $35 5
>904a	b7 ac					.word	SyntaxError                      ; $36 6
>904c	b7 ac					.word	SyntaxError                      ; $37 7
>904e	b7 ac					.word	SyntaxError                      ; $38 8
>9050	b7 ac					.word	SyntaxError                      ; $39 9
>9052	b7 ac					.word	SyntaxError                      ; $3a :
>9054	b7 ac					.word	SyntaxError                      ; $3b ;
>9056	1d 94					.word	BinaryCompareLess                ; $3c <
>9058	13 94					.word	BinaryCompareEqual               ; $3d =
>905a	27 94					.word	BinaryCompareGreater             ; $3e >
>905c	37 97					.word	ByteIndirect                     ; $3f ?
.905e					VectorSet0:
>905e	bd 8f					.word	EOLCommand                       ; $80 !0:EOF
>9060	ca 8f					.word	Shift1Command                    ; $81 !1:SH1
>9062	d2 8f					.word	Shift2Command                    ; $82 !2:SH2
>9064	89 aa					.word	AbsUnary                         ; $83 ABS(
>9066	01 9c					.word	AllocUnary                       ; $84 ALLOC(
>9068	99 aa					.word	AscUnary                         ; $85 ASC(
>906a	21 9d					.word	ChrUnary                         ; $86 CHR$(
>906c	0f 94					.word	UnaryFalse                       ; $87 FALSE
>906e	a6 aa					.word	FracUnary                        ; $88 FRAC(
>9070	bc aa					.word	IntUnary                         ; $89 INT(
>9072	12 ab					.word	IsValUnary                       ; $8a ISVAL(
>9074	fb 9d					.word	Unary_Left                       ; $8b LEFT$(
>9076	ce aa					.word	LenUnary                         ; $8c LEN(
>9078	25 9e					.word	Unary_Mid                        ; $8d MID$(
>907a	71 9c					.word	Unary_Not                        ; $8e NOT(
>907c	87 9c					.word	Unary_Random                     ; $8f RANDOM(
>907e	0b 9e					.word	Unary_Right                      ; $90 RIGHT$(
>9080	a0 9c					.word	Unary_Rnd                        ; $91 RND(
>9082	e8 aa					.word	SgnUnary                         ; $92 SGN(
>9084	33 9d					.word	SpcUnary                         ; $93 SPC(
>9086	4e 9d					.word	Unary_Str                        ; $94 STR$(
>9088	03 94					.word	UnaryTrue                        ; $95 TRUE
>908a	08 ab					.word	ValUnary                         ; $96 VAL(
>908c	e7 8a					.word	ForCommand                       ; $97 FOR
>908e	34 8c					.word	IfCommand                        ; $98 IF
>9090	da 8f					.word	Unused1                          ; $99 PROC
>9092	f9 8e					.word	Command_REPEAT                   ; $9a REPEAT
>9094	68 93					.word	Command_WHILE                    ; $9b WHILE
>9096	5d 8c					.word	EndIf                            ; $9c ENDIF
>9098	c3 a6					.word	Command_ENDPROC                  ; $9d ENDPROC
>909a	a1 8b					.word	NextCommand                      ; $9e NEXT
>909c	da 8f					.word	Unused4                          ; $9f THEN
>909e	02 8f					.word	Command_UNTIL                    ; $a0 UNTIL
>90a0	89 93					.word	Command_WEND                     ; $a1 WEND
>90a2	8d 89					.word	CallCommand                      ; $a2 CALL
>90a4	b7 ac					.word	SyntaxError                      ; $a3 CLS
>90a6	1f 8a					.word	Command_Data                     ; $a4 DATA
>90a8	27 8a					.word	DimCommand                       ; $a5 DIM
>90aa	da 8f					.word	Unused3                          ; $a6 DOWNTO
>90ac	56 8c					.word	ElseCode                         ; $a7 ELSE
>90ae	fa 8b					.word	Command_GOSUB                    ; $a8 GOSUB
>90b0	18 8c					.word	GotoCommand                      ; $a9 GOTO
>90b2	5e 8c					.word	LetCommand                       ; $aa LET
>90b4	4e 8d					.word	Command_LOCAL                    ; $ab LOCAL
>90b6	dc 8d					.word	Command_Print                    ; $ac PRINT
>90b8	93 8e					.word	Command_Read                     ; $ad READ
>90ba	ec 8e					.word	RemCommand                       ; $ae REM
>90bc	0a 8c					.word	Command_RETURN                   ; $af RETURN
>90be	da 8f					.word	Unused2                          ; $b0 TO
.90c0					VectorSet1:
>90c0	b7 ac					.word	SyntaxError                      ; $80 !0:EOF
>90c2	b7 ac					.word	SyntaxError                      ; $81 !1:SH1
>90c4	b7 ac					.word	SyntaxError                      ; $82 !2:SH2
>90c6	5e 89					.word	AssembleCommand                  ; $83 ASSEMBLE
>90c8	7d 89					.word	AssertCommand                    ; $84 ASSERT
>90ca	c7 89					.word	ClearCommand                     ; $85 CLEAR
>90cc	e4 8a					.word	EndCommand                       ; $86 END
>90ce	b3 8c					.word	Command_List                     ; $87 LIST
>90d0	d2 8d					.word	NewCommand                       ; $88 NEW
>90d2	1b 8f					.word	Command_Restore                  ; $89 RESTORE
>90d4	4d 8f					.word	CommandRUN                       ; $8a RUN
>90d6	60 91					.word	StopCommand                      ; $8b STOP
.90d8					VectorSet2:
>90d8	b7 ac					.word	SyntaxError                      ; $80 !0:EOF
>90da	b7 ac					.word	SyntaxError                      ; $81 !1:SH1
>90dc	b7 ac					.word	SyntaxError                      ; $82 !2:SH2
>90de	76 ab					.word	Assemble_adc                     ; $83 ADC
>90e0	6e ab					.word	Assemble_and                     ; $84 AND
>90e2	8a ab					.word	Assemble_asl                     ; $85 ASL
>90e4	f4 ab					.word	Assemble_bcc                     ; $86 BCC
>90e6	f8 ab					.word	Assemble_bcs                     ; $87 BCS
>90e8	00 ac					.word	Assemble_beq                     ; $88 BEQ
>90ea	b7 ab					.word	Assemble_bit                     ; $89 BIT
>90ec	e8 ab					.word	Assemble_bmi                     ; $8a BMI
>90ee	fc ab					.word	Assemble_bne                     ; $8b BNE
>90f0	e4 ab					.word	Assemble_bpl                     ; $8c BPL
>90f2	04 ac					.word	Assemble_bra                     ; $8d BRA
>90f4	08 ac					.word	Assemble_brk                     ; $8e BRK
>90f6	ec ab					.word	Assemble_bvc                     ; $8f BVC
>90f8	f0 ab					.word	Assemble_bvs                     ; $90 BVS
>90fa	10 ac					.word	Assemble_clc                     ; $91 CLC
>90fc	64 ac					.word	Assemble_cld                     ; $92 CLD
>90fe	24 ac					.word	Assemble_cli                     ; $93 CLI
>9100	54 ac					.word	Assemble_clv                     ; $94 CLV
>9102	82 ab					.word	Assemble_cmp                     ; $95 CMP
>9104	cb ab					.word	Assemble_cpx                     ; $96 CPX
>9106	c6 ab					.word	Assemble_cpy                     ; $97 CPY
>9108	a8 ab					.word	Assemble_dec                     ; $98 DEC
>910a	60 ac					.word	Assemble_dex                     ; $99 DEX
>910c	3c ac					.word	Assemble_dey                     ; $9a DEY
>910e	72 ab					.word	Assemble_eor                     ; $9b EOR
>9110	ad ab					.word	Assemble_inc                     ; $9c INC
>9112	70 ac					.word	Assemble_inx                     ; $9d INX
>9114	5c ac					.word	Assemble_iny                     ; $9e INY
>9116	df ab					.word	Assemble_jmp                     ; $9f JMP
>9118	da ab					.word	Assemble_jsr                     ; $a0 JSR
>911a	7e ab					.word	Assemble_lda                     ; $a1 LDA
>911c	a3 ab					.word	Assemble_ldx                     ; $a2 LDX
>911e	c1 ab					.word	Assemble_ldy                     ; $a3 LDY
>9120	94 ab					.word	Assemble_lsr                     ; $a4 LSR
>9122	74 ac					.word	Assemble_nop                     ; $a5 NOP
>9124	6a ab					.word	Assemble_ora                     ; $a6 ORA
>9126	20 ac					.word	Assemble_pha                     ; $a7 PHA
>9128	0c ac					.word	Assemble_php                     ; $a8 PHP
>912a	68 ac					.word	Assemble_phx                     ; $a9 PHX
>912c	28 ac					.word	Assemble_phy                     ; $aa PHY
>912e	30 ac					.word	Assemble_pla                     ; $ab PLA
>9130	14 ac					.word	Assemble_plp                     ; $ac PLP
>9132	7c ac					.word	Assemble_plx                     ; $ad PLX
>9134	38 ac					.word	Assemble_ply                     ; $ae PLY
>9136	8f ab					.word	Assemble_rol                     ; $af ROL
>9138	99 ab					.word	Assemble_ror                     ; $b0 ROR
>913a	1c ac					.word	Assemble_rti                     ; $b1 RTI
>913c	2c ac					.word	Assemble_rts                     ; $b2 RTS
>913e	86 ab					.word	Assemble_sbc                     ; $b3 SBC
>9140	18 ac					.word	Assemble_sec                     ; $b4 SEC
>9142	78 ac					.word	Assemble_sed                     ; $b5 SED
>9144	34 ac					.word	Assemble_sei                     ; $b6 SEI
>9146	7a ab					.word	Assemble_sta                     ; $b7 STA
>9148	6c ac					.word	Assemble_stp                     ; $b8 STP
>914a	9e ab					.word	Assemble_stx                     ; $b9 STX
>914c	bc ab					.word	Assemble_sty                     ; $ba STY
>914e	b2 ab					.word	Assemble_stz                     ; $bb STZ
>9150	50 ac					.word	Assemble_tax                     ; $bc TAX
>9152	4c ac					.word	Assemble_tay                     ; $bd TAY
>9154	d5 ab					.word	Assemble_trb                     ; $be TRB
>9156	d0 ab					.word	Assemble_tsb                     ; $bf TSB
>9158	58 ac					.word	Assemble_tsx                     ; $c0 TSX
>915a	40 ac					.word	Assemble_txa                     ; $c1 TXA
>915c	48 ac					.word	Assemble_txs                     ; $c2 TXS
>915e	44 ac					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9160					StopCommand:
.9160	a9 08		lda #$08		lda	#8
.9162	4c 97 93	jmp $9397		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9165					ListConvertLine:
.9165	9c 9d 04	stz $049d			stz 	tbOffset
.9168	9c a9 04	stz $04a9			stz 	tokenBuffer
.916b	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.916d	b1 30		lda ($30),y			lda 	(codePtr),y
.916f	aa		tax				tax
.9170	88		dey				dey
.9171	b1 30		lda ($30),y			lda 	(codePtr),y
.9173	20 2d a8	jsr $a82d			jsr 	ConvertInt16
.9176	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9178	86 37		stx $37				stx 	zTemp0+1
.917a	a0 00		ldy #$00			ldy 	#0
.917c					_LCCopyNumber:
.917c	b1 36		lda ($36),y			lda 	(zTemp0),y
.917e	20 7e 92	jsr $927e			jsr 	LCLWrite
.9181	c8		iny				iny
.9182	b1 36		lda ($36),y			lda 	(zTemp0),y
.9184	d0 f6		bne $917c			bne 	_LCCopyNumber
.9186					_LCPadOut:
.9186	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9188	20 7e 92	jsr $927e			jsr 	LCLWrite
.918b	ad 9d 04	lda $049d			lda 	tbOffset
.918e	c9 06		cmp #$06			cmp 	#6
.9190	d0 f4		bne $9186			bne 	_LCPadOut
.9192	a0 03		ldy #$03			ldy 	#3 							; start position.
.9194					_LCMainLoop:
.9194	b1 30		lda ($30),y			lda 	(codePtr),y
.9196	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9198	f0 17		beq $91b1			beq 	_LCExit
.919a	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.919c	90 14		bcc $91b2			bcc 	_LCDoubles
.919e	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.91a0	90 20		bcc $91c2			bcc 	_LCShiftPunc
.91a2	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.91a4	90 2b		bcc $91d1			bcc 	_LCPunctuation
.91a6	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.91a8	90 2d		bcc $91d7			bcc 	_LCIdentifiers
.91aa	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.91ac	90 49		bcc $91f7			bcc 	_LCTokens
.91ae	4c 52 92	jmp $9252			jmp 	_LCData 					; 254-5 are data objects
.91b1					_LCExit:
.91b1	60		rts				rts
.91b2					_LCDoubles:
.91b2	48		pha				pha
.91b3	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.91b4	29 02		and #$02			and 	#2
.91b6	09 3c		ora #$3c			ora 	#60 						; make < >
.91b8	20 7e 92	jsr $927e			jsr 	LCLWrite
.91bb	68		pla				pla 								; restore, do lower bit
.91bc	29 03		and #$03			and 	#3
.91be	09 3c		ora #$3c			ora 	#60
.91c0	80 0f		bra $91d1			bra		_LCPunctuation 				; print, increment, loop
.91c2					_LCShiftPunc:
.91c2	aa		tax				tax 								; save in X
.91c3	29 07		and #$07			and 	#7 							; lower 3 bits
.91c5	f0 02		beq $91c9			beq 	_LCNoAdd
.91c7	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.91c9					_LCNoAdd:
.91c9	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.91cb	90 02		bcc $91cf			bcc 	_LCNoAdd2
.91cd	09 20		ora #$20			ora 	#32 						; adds $20
.91cf					_LCNoAdd2:
.91cf	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.91d1					_LCPunctuation:
.91d1	c8		iny				iny 								; consume character
.91d2	20 7e 92	jsr $927e			jsr 	LCLWrite 					; write it out.
.91d5	80 bd		bra $9194			bra 	_LCMainLoop 				; go round again.
.91d7					_LCIdentifiers:
.91d7	18		clc				clc 								; convert to physical address
.91d8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.91da	85 37		sta $37				sta 	zTemp0+1
.91dc	c8		iny				iny
.91dd	b1 30		lda ($30),y			lda 	(codePtr),y
.91df	85 36		sta $36				sta 	zTemp0
.91e1	c8		iny				iny
.91e2	5a		phy				phy 								; save position
.91e3	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.91e5					_LCOutIdentifier:
.91e5	c8		iny				iny
.91e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.91e8	29 7f		and #$7f			and 	#$7F
.91ea	20 ac 92	jsr $92ac			jsr 	LCLLowerCase
.91ed	20 7e 92	jsr $927e			jsr 	LCLWrite
.91f0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.91f2	10 f1		bpl $91e5			bpl 	_LCOutIdentifier
.91f4	7a		ply				ply 								; restore position
.91f5	80 9d		bra $9194			bra 	_LCMainLoop
.91f7					_LCTokens:
.91f7	aa		tax				tax 								; token in X
.91f8	a9 7c		lda #$7c			lda 	#((KeywordSet2) & $FF)
.91fa	85 36		sta $36				sta 	0+zTemp0
.91fc	a9 a2		lda #$a2			lda 	#((KeywordSet2) >> 8)
.91fe	85 37		sta $37				sta 	1+zTemp0
.9200	e0 82		cpx #$82			cpx 	#$82
.9202	f0 16		beq $921a			beq 	_LCUseShift
.9204	a9 38		lda #$38			lda 	#((KeywordSet1) & $FF)
.9206	85 36		sta $36				sta 	0+zTemp0
.9208	a9 a2		lda #$a2			lda 	#((KeywordSet1) >> 8)
.920a	85 37		sta $37				sta 	1+zTemp0
.920c	e0 81		cpx #$81			cpx 	#$81
.920e	f0 0a		beq $921a			beq 	_LCUseShift
.9210	a9 06		lda #$06			lda 	#((KeywordSet0) & $FF)
.9212	85 36		sta $36				sta 	0+zTemp0
.9214	a9 a1		lda #$a1			lda 	#((KeywordSet0) >> 8)
.9216	85 37		sta $37				sta 	1+zTemp0
.9218	80 01		bra $921b			bra 	_LCNoShift
.921a					_LCUseShift:
.921a	c8		iny				iny
.921b					_LCNoShift:
.921b	20 8d 92	jsr $928d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.921e	b1 30		lda ($30),y			lda 	(codePtr),y
.9220	aa		tax				tax 								; into X
.9221					_LCFindText:
.9221	ca		dex				dex
.9222	10 0e		bpl $9232			bpl 	_LCFoundText 				; found text.
.9224	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9226	1a		inc a				inc 	a 							; one extra for size
.9227	38		sec				sec 								; one extra for checksum
.9228	65 36		adc $36				adc 	zTemp0 						; go to next token
.922a	85 36		sta $36				sta 	zTemp0
.922c	90 f3		bcc $9221			bcc 	_LCFindText
.922e	e6 37		inc $37				inc 	zTemp0+1
.9230	80 ef		bra $9221			bra 	_LCFindText
.9232					_LCFoundText:
.9232	5a		phy				phy 								; save List position
.9233	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9235	aa		tax				tax
.9236	a0 02		ldy #$02			ldy 	#2
.9238					_LCCopyToken:
.9238	b1 36		lda ($36),y			lda 	(zTemp0),y
.923a	20 ac 92	jsr $92ac			jsr 	LCLLowerCase
.923d	20 7e 92	jsr $927e			jsr 	LCLWrite
.9240	c8		iny				iny
.9241	ca		dex				dex
.9242	d0 f4		bne $9238			bne 	_LCCopyToken
.9244	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9246	f0 05		beq $924d			beq 	_LCNoSpace
.9248	a9 20		lda #$20			lda 	#' '
.924a	20 7e 92	jsr $927e			jsr 	LCLWrite
.924d					_LCNoSpace:
.924d	7a		ply				ply 								; restore position.
.924e	c8		iny				iny 								; consume token
.924f	4c 94 91	jmp $9194			jmp 	_LCMainLoop 				; and go around again.
.9252					_LCData:
.9252	48		pha				pha 								; save type $FE/$FF
.9253	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9255	c9 fe		cmp #$fe			cmp 	#$FE
.9257	f0 02		beq $925b			beq 	_LCHaveOpener
.9259	a2 22		ldx #$22			ldx 	#'"'
.925b					_LCHaveOpener:
.925b	8a		txa				txa 								; output prefix (# or ")
.925c	20 7e 92	jsr $927e			jsr 	LCLWrite
.925f	c8		iny				iny 								; get count
.9260	b1 30		lda ($30),y			lda 	(codePtr),y
.9262	aa		tax				tax
.9263	c8		iny				iny 								; point at first character
.9264					_LCOutData:
.9264	b1 30		lda ($30),y			lda 	(codePtr),y
.9266	c9 00		cmp #$00			cmp 	#0
.9268	f0 03		beq $926d			beq 	_LCNoPrint
.926a	20 7e 92	jsr $927e			jsr 	LCLWrite
.926d					_LCNoPrint:
.926d	c8		iny				iny
.926e	ca		dex				dex
.926f	d0 f3		bne $9264			bne 	_LCOutData
.9271	68		pla				pla 								; closing " required ?
.9272	c9 ff		cmp #$ff			cmp 	#$FF
.9274	d0 05		bne $927b			bne 	_LCNoQuote
.9276	a9 22		lda #$22			lda 	#'"'
.9278	20 7e 92	jsr $927e			jsr 	LCLWrite
.927b					_LCNoQuote:
.927b	4c 94 91	jmp $9194			jmp 	_LCMainLoop
.927e					LCLWrite:
.927e	da		phx				phx
.927f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9282	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9285	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9288	ee 9d 04	inc $049d			inc 	tbOffset
.928b	fa		plx				plx
.928c	60		rts				rts
.928d					LCCheckSpaceRequired:
.928d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9290	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9293	20 ac 92	jsr $92ac			jsr 	LCLLowerCase 				; saves a little effort
.9296	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9298	90 11		bcc $92ab			bcc 	_LCCSRExit
.929a	c9 3a		cmp #$3a			cmp 	#"9"+1
.929c	90 08		bcc $92a6			bcc 	_LCCSRSpace
.929e	c9 61		cmp #$61			cmp 	#"a"
.92a0	90 09		bcc $92ab			bcc 	_LCCSRExit
.92a2	c9 7b		cmp #$7b			cmp 	#"z"+1
.92a4	b0 05		bcs $92ab			bcs 	_LCCSRExit
.92a6					_LCCSRSpace:
.92a6	a9 20		lda #$20			lda 	#' '
.92a8	20 7e 92	jsr $927e			jsr 	LCLWrite
.92ab					_LCCSRExit:
.92ab	60		rts				rts
.92ac					LCLLowerCase:
.92ac	c9 41		cmp #$41			cmp 	#"A"
.92ae	90 06		bcc $92b6			bcc 	_LCLLCOut
.92b0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.92b2	b0 02		bcs $92b6			bcs 	_LCLLCOut
.92b4	69 20		adc #$20			adc 	#$20
.92b6					_LCLLCOut:
.92b6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.92b7					ProcedureScan:
.92b7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.92b9	85 30		sta $30				sta 	codePtr
.92bb	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.92bd	85 31		sta $31				sta 	codePtr+1
.92bf					_PSLoop:
.92bf	b2 30		lda ($30)			lda 	(codePtr)
.92c1	f0 42		beq $9305			beq 	_PSExit
.92c3	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.92c5	b1 30		lda ($30),y			lda 	(codePtr),y
.92c7	c9 99		cmp #$99			cmp 	#KWD_PROC
.92c9	d0 2d		bne $92f8			bne 	_PSNext
.92cb	c8		iny				iny 								; get the address of the record to zTemp0 and
.92cc	b1 30		lda ($30),y			lda 	(codePtr),y
.92ce	29 c0		and #$c0			and 	#$C0
.92d0	c9 40		cmp #$40			cmp 	#$40
.92d2	d0 32		bne $9306			bne 	_PSSyntax
.92d4	b1 30		lda ($30),y			lda 	(codePtr),y
.92d6	18		clc				clc
.92d7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92d9	85 37		sta $37				sta 	zTemp0+1
.92db	c8		iny				iny 								; LSB
.92dc	b1 30		lda ($30),y			lda 	(codePtr),y
.92de	85 36		sta $36				sta 	zTemp0
.92e0	c8		iny				iny 								; character after variable call.
.92e1	98		tya				tya 								; save Y offset at +7
.92e2	a0 07		ldy #$07			ldy 	#7
.92e4	91 36		sta ($36),y			sta 	(zTemp0),y
.92e6	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92e8	a0 02		ldy #$02			ldy 	#2
.92ea	91 36		sta ($36),y			sta 	(zTemp0),y
.92ec	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.92ee					_PSCopy:
.92ee	b5 30		lda $30,x			lda 	safePtr,x
.92f0	c8		iny				iny
.92f1	91 36		sta ($36),y			sta 	(zTemp0),y
.92f3	e8		inx				inx
.92f4	e0 04		cpx #$04			cpx 	#4
.92f6	d0 f6		bne $92ee			bne 	_PSCopy
.92f8					_PSNext:
.92f8	18		clc				clc
.92f9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92fb	65 30		adc $30				adc 	codePtr
.92fd	85 30		sta $30				sta 	codePtr
.92ff	90 02		bcc $9303			bcc 	_CREExit
.9301	e6 31		inc $31				inc 	codePtr+1
.9303					_CREExit:
.9303	80 ba		bra $92bf			bra 	_PSLoop
.9305					_PSExit:
.9305	60		rts				rts
.9306					_PSSyntax:
.9306	4c b7 ac	jmp $acb7			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9309					ScanForward:
.9309	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.930b	86 37		stx $37				stx 	zTemp0+1
.930d	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.930f					_ScanLoop:
.930f	b1 30		lda ($30),y			lda 	(codePtr),y
.9311	c8		iny				iny
.9312	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9314	d0 0e		bne $9324			bne 	_ScanGoNext
.9316	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9318	f0 04		beq $931e			beq 	_ScanMatch
.931a	c5 37		cmp $37				cmp 	zTemp0+1
.931c	d0 06		bne $9324			bne 	_ScanGoNext
.931e					_ScanMatch:
.931e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9320	d0 01		bne $9323			bne 	_ScanNotEndEOL
.9322	88		dey				dey
.9323					_ScanNotEndEOL:
.9323	60		rts				rts
.9324					_ScanGoNext:
.9324	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9326	90 e7		bcc $930f			bcc 	_ScanLoop
.9328	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.932a	90 18		bcc $9344			bcc 	_ScanSkipOne
.932c	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.932e	b0 2f		bcs $935f			bcs 	_ScanSkipData
.9330	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9332	90 db		bcc $930f			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9334	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.9336	b0 d7		bcs $930f			bcs 	_ScanLoop
.9338	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.933a	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.933c	b0 d1		bcs $930f			bcs 	_ScanLoop
.933e	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9340	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9342	80 cb		bra $930f			bra 	_ScanLoop
.9344					_ScanSkipOne:
.9344	c8		iny				iny 								; consume the extra one.
.9345	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9347	d0 c6		bne $930f			bne 	_ScanLoop
.9349	18		clc				clc
.934a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.934c	65 30		adc $30				adc 	codePtr
.934e	85 30		sta $30				sta 	codePtr
.9350	90 02		bcc $9354			bcc 	_CREExit
.9352	e6 31		inc $31				inc 	codePtr+1
.9354					_CREExit:
.9354	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9356	b2 30		lda ($30)			lda 	(codePtr)
.9358	d0 b5		bne $930f			bne 	_ScanLoop 					; if not zero, more to scan
.935a	a9 13		lda #$13		lda	#19
.935c	4c 97 93	jmp $9397		jmp	ErrorHandler
.935f					_ScanSkipData:
.935f	88		dey				dey 								; point at data token
.9360	c8		iny				iny
.9361	98		tya				tya
.9362	38		sec				sec
.9363	71 30		adc ($30),y			adc 	(codePtr),y
.9365	a8		tay				tay
.9366	80 a7		bra $930f			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9368					Command_WHILE:
.9368	5a		phy				phy 								; save position of the test
.9369	a2 00		ldx #$00			ldx 	#0
.936b	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber 				; work out the number
.936e	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; check if zero
.9371	f0 0e		beq $9381			beq 	_WHExitLoop 				; if so exit the loop
.9373	98		tya				tya 								; position *after* test.
.9374	7a		ply				ply 								; restore position before test, at WHILE
.9375	88		dey				dey
.9376	48		pha				pha 								; push after test on the stack
.9377	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9379	20 03 a0	jsr $a003			jsr 	StackOpen
.937c	20 47 a0	jsr $a047			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.937f	7a		ply				ply 								; restore the position *after* the test
.9380	60		rts				rts
.9381					_WHExitLoop:
.9381	68		pla				pla 								; throw post loop position
.9382	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.9384	aa		tax				tax
.9385	20 09 93	jsr $9309			jsr 	ScanForward
.9388	60		rts				rts
.9389					Command_WEND:
.9389	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.938b	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.938d	20 2f a0	jsr $a02f			jsr 	StackCheckFrame
.9390	20 58 a0	jsr $a058			jsr 	STKLoadCodePosition 		; loop back
.9393	20 21 a0	jsr $a021			jsr 	StackClose		 			; erase the frame
.9396	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a6d1					CheckRightBracket:
.a6d1	b1 30		lda ($30),y			lda 	(codePtr),y
.a6d3	c8		iny				iny
.a6d4	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a6d6	d0 0f		bne $a6e7			bne 	CNAFail
.a6d8	60		rts				rts
.a6d9					CheckComma:
.a6d9	b1 30		lda ($30),y			lda 	(codePtr),y
.a6db	c8		iny				iny
.a6dc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a6de	d0 07		bne $a6e7			bne 	CNAFail
.a6e0	60		rts				rts
.a6e1					CheckNextA:
.a6e1	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a6e3	d0 02		bne $a6e7			bne 	CNAFail
.a6e5	c8		iny				iny 								; skip character
.a6e6	60		rts				rts 								; and exit
.a6e7					CNAFail:
.a6e7	4c b7 ac	jmp $acb7			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9397					ErrorHandler:
.9397	a8		tay				tay 								; find the error text
.9398	f0 49		beq $93e3			beq 	_EHEnd
.939a	a2 00		ldx #$00			ldx 	#0
.939c	a9 d0		lda #$d0			lda 	#((ErrorText) & $FF)
.939e	85 36		sta $36				sta 	0+zTemp0
.93a0	a9 ac		lda #$ac			lda 	#((ErrorText) >> 8)
.93a2	85 37		sta $37				sta 	1+zTemp0
.93a4					_EHFind:
.93a4	88		dey				dey 								; found the error text ?
.93a5	f0 0e		beq $93b5			beq 	_EHFound
.93a7					_EHFindZero:
.93a7	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.93a9	e6 36		inc $36				inc 	zTemp0
.93ab	d0 02		bne $93af			bne 	_EHFNoCarry
.93ad	e6 37		inc $37				inc 	zTemp0+1
.93af					_EHFNoCarry:
.93af	c9 00		cmp #$00			cmp 	#0
.93b1	d0 f4		bne $93a7			bne 	_EHFindZero
.93b3	80 ef		bra $93a4			bra 	_EHFind
.93b5					_EHFound:
.93b5	a5 36		lda $36				lda 	zTemp0 						; print message
.93b7	a6 37		ldx $37				ldx 	zTemp0+1
.93b9	20 f0 93	jsr $93f0			jsr 	PrintStringXA
.93bc	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.93be	b1 30		lda ($30),y			lda 	(codePtr),y
.93c0	d0 05		bne $93c7			bne 	_EHAtMsg
.93c2	c8		iny				iny
.93c3	b1 30		lda ($30),y			lda 	(codePtr),y
.93c5	f0 17		beq $93de			beq 	_EHCREnd
.93c7					_EHAtMsg:
.93c7	a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93c9	a9 e6		lda #$e6			lda 	#_AtMsg & $FF
.93cb	20 f0 93	jsr $93f0			jsr 	PrintStringXA
.93ce	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93d0	b1 30		lda ($30),y			lda 	(codePtr),y
.93d2	48		pha				pha
.93d3	c8		iny				iny
.93d4	b1 30		lda ($30),y			lda 	(codePtr),y
.93d6	aa		tax				tax
.93d7	68		pla				pla
.93d8	20 2d a8	jsr $a82d			jsr 	ConvertInt16 				; convert XA to string
.93db	20 f0 93	jsr $93f0			jsr 	PrintStringXA 				; and print it.
.93de					_EHCREnd:
.93de	a9 0d		lda #$0d			lda 	#13 						; new line
.93e0	20 5b ae	jsr $ae5b			jsr 	EXTPrintCharacter
.93e3					_EHEnd:
.93e3	4c 2e 89	jmp $892e			jmp 	WarmStart
>93e6	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93ee	20 00
.93f0					PrintStringXA:
.93f0	5a		phy				phy
.93f1	86 37		stx $37				stx 	zTemp0+1
.93f3	85 36		sta $36				sta 	zTemp0
.93f5	a0 00		ldy #$00			ldy 	#0
.93f7					_PSXALoop:
.93f7	b1 36		lda ($36),y			lda 	(zTemp0),y
.93f9	f0 06		beq $9401			beq 	_PSXAExit
.93fb	20 5b ae	jsr $ae5b			jsr 	EXTPrintCharacter
.93fe	c8		iny				iny
.93ff	80 f6		bra $93f7			bra 	_PSXALoop
.9401					_PSXAExit:
.9401	7a		ply				ply
.9402	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9403					UnaryTrue:
.9403	fa		plx				plx
.9404					ReturnTrue:
.9404	a9 01		lda #$01			lda 	#1  						; set to 1
.9406	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.9409	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.940b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.940e	60		rts				rts
.940f					UnaryFalse:
.940f	fa		plx				plx
.9410					ReturnFalse:
.9410	4c 4f 9f	jmp $9f4f			jmp 	NSMSetZero 					; set it all to zero
.9413					BinaryCompareEqual:
.9413	fa		plx				plx
.9414	20 4f 94	jsr $944f			jsr 	CompareBaseCode
.9417	c9 00		cmp #$00			cmp 	#0
.9419	f0 e9		beq $9404			beq 	ReturnTrue
.941b	80 f3		bra $9410			bra 	ReturnFalse
.941d					BinaryCompareLess:
.941d	fa		plx				plx
.941e	20 4f 94	jsr $944f			jsr 	CompareBaseCode
.9421	c9 ff		cmp #$ff			cmp 	#$FF
.9423	f0 df		beq $9404			beq 	ReturnTrue
.9425	80 e9		bra $9410			bra 	ReturnFalse
.9427					BinaryCompareGreater:
.9427	fa		plx				plx
.9428	20 4f 94	jsr $944f			jsr 	CompareBaseCode
.942b	c9 01		cmp #$01			cmp 	#1
.942d	f0 d5		beq $9404			beq 	ReturnTrue
.942f	80 df		bra $9410			bra 	ReturnFalse
.9431					BinaryCompareNotEqual:
.9431	fa		plx				plx
.9432	20 4f 94	jsr $944f			jsr 	CompareBaseCode
.9435	c9 00		cmp #$00			cmp 	#0
.9437	d0 cb		bne $9404			bne 	ReturnTrue
.9439	80 d5		bra $9410			bra 	ReturnFalse
.943b					BinaryCompareLessEqual:
.943b	fa		plx				plx
.943c	20 4f 94	jsr $944f			jsr 	CompareBaseCode
.943f	c9 01		cmp #$01			cmp 	#1
.9441	d0 c1		bne $9404			bne 	ReturnTrue
.9443	80 cb		bra $9410			bra 	ReturnFalse
.9445					BinaryCompareGreaterEqual:
.9445	fa		plx				plx
.9446	20 4f 94	jsr $944f			jsr 	CompareBaseCode
.9449	c9 ff		cmp #$ff			cmp 	#$FF
.944b	d0 b7		bne $9404			bne 	ReturnTrue
.944d	80 c1		bra $9410			bra 	ReturnFalse
.944f					CompareBaseCode:
.944f	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; make both values if references.
.9452	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9455	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9458	29 10		and #$10			and 	#NSTString
.945a	d0 40		bne $949c			bne 	_CBCString
.945c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.945f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9462	d0 3b		bne $949f			bne 	_CBCFloat
.9464	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9467	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.946a	29 08		and #$08			and 	#NSTFloat
.946c	d0 31		bne $949f			bne 	_CBCFloat
.946e	20 a2 94	jsr $94a2			jsr 	CompareFixMinusZero
.9471	e8		inx				inx
.9472	20 a2 94	jsr $94a2			jsr 	CompareFixMinusZero
.9475	ca		dex				dex
.9476	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9479	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.947c	10 0b		bpl $9489			bpl 	_CDCSameSign
.947e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9481	30 16		bmi $9499			bmi 	_CBCLess 					; return $FF
.9483					_CBCGreater:
.9483	a9 01		lda #$01			lda 	#1
.9485	60		rts				rts
.9486					_CBCEqual:
.9486	a9 00		lda #$00			lda 	#0
.9488	60		rts				rts
.9489					_CDCSameSign:
.9489	20 b2 95	jsr $95b2			jsr 	SubTopTwoStack 				; unsigned subtract
.948c	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; or the mantissa together
.948f	f0 f5		beq $9486			beq 	_CBCEqual 					; -0 == 0
.9491	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9494	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9497	10 ea		bpl $9483			bpl 	_CBCGreater
.9499					_CBCLess:
.9499	a9 ff		lda #$ff			lda 	#$FF
.949b	60		rts				rts
.949c					_CBCString:
.949c	4c 08 95	jmp $9508			jmp 	CompareStrings
.949f					_CBCFloat:
.949f	4c 29 a9	jmp $a929			jmp 	CompareFloat
.94a2					CompareFixMinusZero:
.94a2	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero
.94a5	d0 03		bne $94aa			bne 	_CFXMZNotZero
.94a7	9e 00 04	stz $0400,x			stz 	NSStatus,x
.94aa					_CFXMZNotZero:
.94aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94ab					StringConcat:
.94ab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.94ae	3d 01 04	and $0401,x			and 	NSStatus+1,x
.94b1	29 18		and #$18			and 	#NSBTypeMask
.94b3	c9 10		cmp #$10			cmp 	#NSTString
.94b5	d0 4e		bne $9505			bne		_SCType
.94b7	64 38		stz $38				stz 	zTemp1 						; counting total length
.94b9	e8		inx				inx
.94ba	20 d8 94	jsr $94d8			jsr 	_SCSetupZ0 					; setup for second
.94bd	20 e3 94	jsr $94e3			jsr 	_SCLengthZ0 				; length for second
.94c0	ca		dex				dex
.94c1	20 d8 94	jsr $94d8			jsr 	_SCSetupZ0 					; setup for first
.94c4	20 e3 94	jsr $94e3			jsr 	_SCLengthZ0 				; length for first
.94c7	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.94c9	20 dd af	jsr $afdd			jsr 	StringTempAllocate
.94cc	20 f6 94	jsr $94f6			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94cf	e8		inx				inx
.94d0	20 d8 94	jsr $94d8			jsr 	_SCSetupZ0 					; copy second out
.94d3	20 f6 94	jsr $94f6			jsr 	_SCCopy
.94d6	ca		dex				dex
.94d7	60		rts				rts
.94d8					_SCSetupZ0:
.94d8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.94db	85 36		sta $36				sta 	zTemp0
.94dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.94e0	85 37		sta $37				sta 	zTemp0+1
.94e2	60		rts				rts
.94e3					_SCLengthZ0:
.94e3	5a		phy				phy
.94e4	a0 00		ldy #$00			ldy 	#0
.94e6					_SCLenLoop:
.94e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e8	f0 0a		beq $94f4			beq 	_SCLExit
.94ea	c8		iny				iny
.94eb	e6 38		inc $38				inc 	zTemp1
.94ed	10 f7		bpl $94e6			bpl		_SCLenLoop
.94ef	a9 09		lda #$09		lda	#9
.94f1	4c 97 93	jmp $9397		jmp	ErrorHandler
.94f4					_SCLExit:
.94f4	7a		ply				ply
.94f5	60		rts				rts
.94f6					_SCCopy:
.94f6	5a		phy				phy
.94f7	a0 00		ldy #$00			ldy 	#0
.94f9					_SCCopyLoop:
.94f9	b1 36		lda ($36),y			lda 	(zTemp0),y
.94fb	f0 06		beq $9503			beq 	_SCCExit
.94fd	20 1b b0	jsr $b01b			jsr 	StringTempWrite
.9500	c8		iny				iny
.9501	80 f6		bra $94f9			bra 	_SCCopyLoop
.9503					_SCCExit:
.9503	7a		ply				ply
.9504	60		rts				rts
.9505					_SCType:
.9505	4c c1 ac	jmp $acc1			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a6ea					IntegerDivide:
.a6ea	fa		plx				plx
.a6eb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a6ee	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a6f1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a6f2	0a		asl a				asl 	a
.a6f3	10 05		bpl $a6fa			bpl 	_NotRef
.a6f5	48		pha				pha
.a6f6	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a6f9	68		pla				pla
.a6fa					_NotRef:
.a6fa	0a		asl a				asl 	a
.a6fb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a6fd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a700	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a703	f0 03		beq $a708			beq 	_IntegerCode 				; if clear, then we have two integers
.a705	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.a708					_IntegerCode:
.a708	20 2a a7	jsr $a72a			jsr 	CheckDivideZero 			; do div zero check
.a70b	20 62 a7	jsr $a762			jsr 	Int32Divide 				; do the division
.a70e	20 1f a8	jsr $a81f			jsr 	CalculateSign 				; calculate result sign
.a711					NSMCopyPlusTwoToZero:
.a711	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a714	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a717	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a71a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a71d	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a720	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a723	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a726	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a729	60		rts				rts
.a72a					CheckDivideZero:
.a72a	e8		inx				inx
.a72b	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero
.a72e	f0 02		beq $a732			beq 	_CDVError
.a730	ca		dex				dex
.a731	60		rts				rts
.a732					_CDVError:
.a732	a9 03		lda #$03		lda	#3
.a734	4c 97 93	jmp $9397		jmp	ErrorHandler
.a737					IntegerModulus:
.a737	fa		plx				plx
.a738	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a73b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a73e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a73f	0a		asl a				asl 	a
.a740	10 05		bpl $a747			bpl 	_NotRef
.a742	48		pha				pha
.a743	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a746	68		pla				pla
.a747					_NotRef:
.a747	0a		asl a				asl 	a
.a748	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a74a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a74d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a750	f0 03		beq $a755			beq 	_IntegerCode 				; if clear, then we have two integers
.a752	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.a755					_IntegerCode:
.a755					IntegerModulusNoCheck:
.a755	20 2a a7	jsr $a72a			jsr 	CheckDivideZero 			; do div zero check
.a758	20 62 a7	jsr $a762			jsr 	Int32Divide 				; do the division
.a75b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a75e	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a761	60		rts				rts
.a762					Int32Divide:
.a762	48		pha				pha 								; save AXY
.a763	5a		phy				phy
.a764	20 26 9f	jsr $9f26			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a767	20 4b 9f	jsr $9f4b			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a76a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a76c					_I32DivideLoop:
.a76c	e8		inx				inx
.a76d	e8		inx				inx
.a76e	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a771	ca		dex				dex
.a772	ca		dex				dex
.a773	20 65 9f	jsr $9f65			jsr 	NSMRotateLeft
.a776	20 a2 a7	jsr $a7a2			jsr 	DivideCheckSubtract 		; check if subtract possible
.a779	90 03		bcc $a77e			bcc 	_I32DivideNoCarryIn
.a77b	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a77e					_I32DivideNoCarryIn:
.a77e	88		dey				dey 								; loop round till division completed.
.a77f	d0 eb		bne $a76c			bne 	_I32DivideLoop
.a781	7a		ply				ply 								; restore AXY and exit
.a782	68		pla				pla
.a783	60		rts				rts
.a784					Int32ShiftDivide:
.a784	48		pha				pha 								; save AY
.a785	5a		phy				phy
.a786	e8		inx				inx 								; clear S[X+2]
.a787	e8		inx				inx
.a788	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero
.a78b	ca		dex				dex
.a78c	ca		dex				dex
.a78d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a78f					_I32SDLoop:
.a78f	20 a2 a7	jsr $a7a2			jsr 	DivideCheckSubtract 		; check if subtract possible
.a792	e8		inx				inx
.a793	e8		inx				inx
.a794	20 65 9f	jsr $9f65			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a797	ca		dex				dex
.a798	ca		dex				dex
.a799	20 65 9f	jsr $9f65			jsr 	NSMRotateLeft
.a79c	88		dey				dey 	 							; do 31 times
.a79d	d0 f0		bne $a78f			bne 	_I32SDLoop
.a79f	7a		ply				ply 								; restore AY and exit
.a7a0	68		pla				pla
.a7a1	60		rts				rts
.a7a2					DivideCheckSubtract:
.a7a2	20 b2 95	jsr $95b2			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a7a5	b0 04		bcs $a7ab			bcs 	_DCSExit 					; if carry set, then could do, exit
.a7a7	20 8c 95	jsr $958c			jsr 	AddTopTwoStack 				; add it back in
.a7aa	18		clc				clc 								; and return False
.a7ab					_DCSExit:
.a7ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a7ac					MulInteger:
.a7ac	fa		plx				plx
.a7ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7b0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7b3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7b4	0a		asl a				asl 	a
.a7b5	10 05		bpl $a7bc			bpl 	_NotRef
.a7b7	48		pha				pha
.a7b8	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7bb	68		pla				pla
.a7bc					_NotRef:
.a7bc	0a		asl a				asl 	a 							; put MSB of type into A:7
.a7bd	30 0b		bmi $a7ca			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a7bf	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7c2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7c5	f0 06		beq $a7cd			beq 	_IntegerCode 				; if clear, then we have two integers
.a7c7	4c 00 aa	jmp $aa00			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a7ca					_StringData:
.a7ca	4c cb ac	jmp $accb			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a7cd					_IntegerCode:
.a7cd	20 da a7	jsr $a7da			jsr 	MultiplyShort
.a7d0	c9 00		cmp #$00			cmp 	#0
.a7d2	f0 05		beq $a7d9			beq 	_MIExit
.a7d4	a9 04		lda #$04		lda	#4
.a7d6	4c 97 93	jmp $9397		jmp	ErrorHandler
.a7d9					_MIExit:
.a7d9	60		rts				rts
.a7da					MultiplyShort:
.a7da	5a		phy				phy 								; save Y
.a7db	20 26 9f	jsr $9f26			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a7de	20 4b 9f	jsr $9f4b			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a7e1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a7e3					_I32MLoop:
.a7e3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a7e6	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a7e9	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a7ec	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a7ef	f0 28		beq $a819			beq 	_I32MExit 					; exit if zero
.a7f1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a7f4	29 01		and #$01			and 	#1
.a7f6	f0 0e		beq $a806			beq 	_I32MNoAdd
.a7f8	20 8c 95	jsr $958c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a7fb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a7fe	10 06		bpl $a806			bpl 	_I32MNoAdd
.a800					_I32ShiftRight:
.a800	20 72 9f	jsr $9f72			jsr 	NSMShiftRight 				; shift S[X] right
.a803	c8		iny				iny 								; increment shift count
.a804	80 0a		bra $a810			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a806					_I32MNoAdd:
.a806	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a809	70 f5		bvs $a800			bvs 	_I32ShiftRight 				; instead.
.a80b	e8		inx				inx
.a80c	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a80f	ca		dex				dex
.a810					_I32MShiftUpper:
.a810	e8		inx				inx 								; shift S[X+2] right
.a811	e8		inx				inx
.a812	20 72 9f	jsr $9f72			jsr 	NSMShiftRight
.a815	ca		dex				dex
.a816	ca		dex				dex
.a817	80 ca		bra $a7e3			bra 	_I32MLoop 					; try again.
.a819					_I32MExit:
.a819	20 1f a8	jsr $a81f			jsr 	CalculateSign
.a81c	98		tya				tya 								; shift in A
.a81d	7a		ply				ply 								; restore Y and exit
.a81e	60		rts				rts
.a81f					CalculateSign:
.a81f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a822	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a825	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a828	0a		asl a				asl 	a 							; shift bit 7 into carry
.a829	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a82c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9508					CompareStrings:
.9508	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.950b	3d 01 04	and $0401,x			and 	NSStatus+1,x
.950e	29 10		and #$10			and 	#NSBIsString
.9510	f0 2c		beq $953e			beq 	_CSTypeError
.9512	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9515	85 36		sta $36				sta 	zTemp0
.9517	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.951a	85 37		sta $37				sta 	zTemp0+1
.951c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.951f	85 38		sta $38				sta 	zTemp1
.9521	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9524	85 39		sta $39				sta 	zTemp1+1
.9526	5a		phy				phy 								; save Y so we can access strings
.9527	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9529					_CSLoop:
.9529	c8		iny				iny
.952a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.952c	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.952e	d0 06		bne $9536			bne 	_CSDifferent
.9530	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9532	d0 f5		bne $9529			bne 	_CSLoop 					; still comparing
.9534					_CSExit:
.9534	7a		ply				ply 								; reached end, return zero in A from EOS
.9535	60		rts				rts
.9536					_CSDifferent:
.9536	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9538	90 fa		bcc $9534			bcc		_CSExit
.953a	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.953c	80 f6		bra $9534			bra 	_CSExit
.953e					_CSTypeError:
.953e	4c c1 ac	jmp $acc1			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9541					ShiftLeft:
.9541	38		sec				sec
.9542	80 01		bra $9545			bra 	ShiftMain
.9544					ShiftRight:
.9544	18		clc				clc
.9545					ShiftMain:
.9545	fa		plx				plx 								; restore X
.9546	08		php				php 								; save direction
.9547	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.954a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.954d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.954e	0a		asl a				asl 	a
.954f	10 05		bpl $9556			bpl 	_NotRef
.9551	48		pha				pha
.9552	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9555	68		pla				pla
.9556					_NotRef:
.9556	0a		asl a				asl 	a
.9557	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9559	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.955c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.955f	f0 03		beq $9564			beq 	_IntegerCode 				; if clear, then we have two integers
.9561	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.9564					_IntegerCode:
.9564	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9567	29 e0		and #$e0			and 	#$E0
.9569	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.956c	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.956f	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9572	d0 13		bne $9587			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9574					_SMLoop:
.9574	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9577	30 11		bmi $958a			bmi 	_SMExit 					; exit if done.
.9579	28		plp				plp 								; restore direcition setting
.957a	08		php				php
.957b	90 05		bcc $9582			bcc 	_SMRight
.957d	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; shift left if CS
.9580	80 f2		bra $9574			bra 	_SMLoop
.9582					_SMRight:
.9582	20 72 9f	jsr $9f72			jsr 	NSMShiftRight 				; shift right if CC
.9585	80 ed		bra $9574			bra 	_SMLoop
.9587					_SMExit0:
.9587	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero 					; return zero.
.958a					_SMExit:
.958a	28		plp				plp 								; throw direction
.958b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.958c					AddTopTwoStack:
.958c	18		clc				clc
.958d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9590	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9593	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9596	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9599	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.959c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.959f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95a2	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.95a5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95a8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95ab	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.95ae	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95b1	60		rts				rts
.95b2					SubTopTwoStack:
.95b2	38		sec				sec
.95b3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.95b6	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.95b9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95bc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.95bf	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.95c2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95c5	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.95c8	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.95cb	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95ce	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.95d1	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.95d4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95d7	60		rts				rts
.95d8					AddInteger:
.95d8	fa		plx				plx
.95d9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95dc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95df	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95e0	0a		asl a				asl 	a
.95e1	10 05		bpl $95e8			bpl 	_NotRef
.95e3	48		pha				pha
.95e4	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95e7	68		pla				pla
.95e8					_NotRef:
.95e8	0a		asl a				asl 	a 							; put MSB of type into A:7
.95e9	30 0b		bmi $95f6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95eb	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95ee	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.95f1	f0 06		beq $95f9			beq 	_IntegerCode 				; if clear, then we have two integers
.95f3	4c 88 a8	jmp $a888			jmp 	FloatingPointAdd 							; otherwise at least one float.
.95f6					_StringData:
.95f6	4c ab 94	jmp $94ab			jmp 	StringConcat							; at least one string - don't know both are strings.
.95f9					_IntegerCode:
.95f9					AddCode:
.95f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.95fc	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.95ff	10 8b		bpl $958c			bpl 	AddTopTwoStack
.9601	20 b2 95	jsr $95b2			jsr 	SubTopTwoStack 				; do a physical subtraction
.9604	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9607	10 09		bpl $9612			bpl 	_AddExit
.9609	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.960c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.960f	20 04 9f	jsr $9f04			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9612					_AddExit:
.9612	60		rts				rts
.9613					SubInteger:
.9613	fa		plx				plx
.9614	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9617	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.961a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.961b	0a		asl a				asl 	a
.961c	10 05		bpl $9623			bpl 	_NotRef
.961e	48		pha				pha
.961f	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9622	68		pla				pla
.9623					_NotRef:
.9623	0a		asl a				asl 	a 							; put MSB of type into A:7
.9624	30 0b		bmi $9631			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9626	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9629	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.962c	f0 06		beq $9634			beq 	_IntegerCode 				; if clear, then we have two integers
.962e	4c 8d a8	jmp $a88d			jmp 	FloatingPointSub 							; otherwise at least one float.
.9631					_StringData:
.9631	4c cb ac	jmp $accb			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9634					_IntegerCode:
.9634	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9637	49 80		eor #$80			eor 	#$80
.9639	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.963c	80 bb		bra $95f9			bra 	AddCode 					; and do the same code as add.
.963e					AndInteger:
.963e	fa		plx				plx
.963f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9642	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9645	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9646	0a		asl a				asl 	a
.9647	10 05		bpl $964e			bpl 	_NotRef
.9649	48		pha				pha
.964a	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.964d	68		pla				pla
.964e					_NotRef:
.964e	0a		asl a				asl 	a
.964f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9651	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9654	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9657	f0 03		beq $965c			beq 	_IntegerCode 				; if clear, then we have two integers
.9659	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.965c					_IntegerCode:
.965c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.965f	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9662	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9665	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9668	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.966b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.966e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9671	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9674	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9677	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.967a	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.967d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9680	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9683	60		rts				rts
.9684					OraInteger:
.9684	fa		plx				plx
.9685	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9688	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.968b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.968c	0a		asl a				asl 	a
.968d	10 05		bpl $9694			bpl 	_NotRef
.968f	48		pha				pha
.9690	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9693	68		pla				pla
.9694					_NotRef:
.9694	0a		asl a				asl 	a
.9695	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9697	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.969a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.969d	f0 03		beq $96a2			beq 	_IntegerCode 				; if clear, then we have two integers
.969f	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.96a2					_IntegerCode:
.96a2	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96a5	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.96a8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96ab	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96ae	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.96b1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96b4	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96b7	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.96ba	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96bd	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.96c0	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.96c3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.96c6	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.96c9	60		rts				rts
.96ca					EorInteger:
.96ca	fa		plx				plx
.96cb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96ce	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96d1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96d2	0a		asl a				asl 	a
.96d3	10 05		bpl $96da			bpl 	_NotRef
.96d5	48		pha				pha
.96d6	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96d9	68		pla				pla
.96da					_NotRef:
.96da	0a		asl a				asl 	a
.96db	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.96dd	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96e0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96e3	f0 03		beq $96e8			beq 	_IntegerCode 				; if clear, then we have two integers
.96e5	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.96e8					_IntegerCode:
.96e8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.96eb	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.96ee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96f1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.96f4	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.96f7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96fa	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.96fd	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9700	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9703	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9706	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9709	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.970c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.970f	60		rts				rts
.9710					WordIndirect:
.9710	fa		plx				plx
.9711	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9714	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9717	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9718	0a		asl a				asl 	a
.9719	10 05		bpl $9720			bpl 	_NotRef
.971b	48		pha				pha
.971c	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.971f	68		pla				pla
.9720					_NotRef:
.9720	0a		asl a				asl 	a
.9721	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9723	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9726	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9729	f0 03		beq $972e			beq 	_IntegerCode 				; if clear, then we have two integers
.972b	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.972e					_IntegerCode:
.972e	20 f9 95	jsr $95f9			jsr 	AddCode 					; add the two values
.9731	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9733	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9736	60		rts				rts
.9737					ByteIndirect:
.9737	fa		plx				plx
.9738	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.973b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.973e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.973f	0a		asl a				asl 	a
.9740	10 05		bpl $9747			bpl 	_NotRef
.9742	48		pha				pha
.9743	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9746	68		pla				pla
.9747					_NotRef:
.9747	0a		asl a				asl 	a
.9748	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.974a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.974d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9750	f0 03		beq $9755			beq 	_IntegerCode 				; if clear, then we have two integers
.9752	4c c1 ac	jmp $acc1			jmp 	TypeError 					; anything else, type mismatch.
.9755					_IntegerCode:
.9755	20 f9 95	jsr $95f9			jsr 	AddCode 					; add the two values
.9758	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.975a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.975d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a82d					ConvertInt16:
.a82d	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a830	8e 10 04	stx $0410			stx 	NSMantissa1
.a833	9c 18 04	stz $0418			stz 	NSMantissa2
.a836	9c 20 04	stz $0420			stz 	NSMantissa3
.a839	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a83c	a2 00		ldx #$00			ldx 	#0 							; stack level
.a83e	a9 0a		lda #$0a			lda 	#10 						; base
.a840	80 00		bra $a842			bra 	ConvertInt32
.a842					ConvertInt32:
.a842	5a		phy				phy
.a843	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a845	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a848	10 08		bpl $a852			bpl 	_CI32NotNeg
.a84a	48		pha				pha
.a84b	a9 2d		lda #$2d			lda 	#'-'
.a84d	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a850	c8		iny				iny
.a851	68		pla				pla
.a852					_CI32NotNeg:
.a852	20 60 a8	jsr $a860			jsr 	_CI32DivideConvert 			; recursive conversion
.a855	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a857	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a85a	7a		ply				ply
.a85b	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a85d	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a85f	60		rts				rts
.a860					_CI32DivideConvert:
.a860	e8		inx				inx 								; write to next slot up
.a861	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.a864	ca		dex				dex
.a865	20 62 a7	jsr $a762			jsr 	Int32Divide 				; divide
.a868	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a86b	48		pha				pha
.a86c	20 11 a7	jsr $a711			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a86f	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; is it zero ?
.a872	f0 06		beq $a87a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a874	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a877	20 60 a8	jsr $a860			jsr 	_CI32DivideConvert 			; and recusrively call.
.a87a					_CI32NoRecurse:
.a87a	68		pla				pla 								; remainder
.a87b	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a87d	90 02		bcc $a881			bcc 	_CI32NotHex
.a87f	69 26		adc #$26			adc 	#6+32
.a881					_CI32NotHex:
.a881	69 30		adc #$30			adc 	#48
.a883	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a886	c8		iny				iny
.a887	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.975e					PrecedenceLevel:
>975e	04					.byte	 4	; $00 <<
>975f	02					.byte	 2	; $01 <=
>9760	02					.byte	 2	; $02 <>
>9761	00					.byte	 0	; $03 !!3
>9762	00					.byte	 0	; $04 ><
>9763	02					.byte	 2	; $05 >=
>9764	04					.byte	 4	; $06 >>
>9765	00					.byte	 0	; $07 !!7
>9766	00					.byte	 0	; $08 !!8
>9767	00					.byte	 0	; $09 !!9
>9768	00					.byte	 0	; $0a !!10
>9769	00					.byte	 0	; $0b !!11
>976a	00					.byte	 0	; $0c !!12
>976b	00					.byte	 0	; $0d !!13
>976c	00					.byte	 0	; $0e !!14
>976d	00					.byte	 0	; $0f !!15
>976e	00					.byte	 0	; $10 @
>976f	00					.byte	 0	; $11 !!17
>9770	00					.byte	 0	; $12 !!18
>9771	00					.byte	 0	; $13 [
>9772	04					.byte	 4	; $14 \
>9773	00					.byte	 0	; $15 ]
>9774	01					.byte	 1	; $16 ^
>9775	00					.byte	 0	; $17 _
>9776	00					.byte	 0	; $18 `
>9777	00					.byte	 0	; $19 !!25
>9778	00					.byte	 0	; $1a !!26
>9779	00					.byte	 0	; $1b {
>977a	01					.byte	 1	; $1c |
>977b	00					.byte	 0	; $1d }
>977c	00					.byte	 0	; $1e ~
>977d	00					.byte	 0	; $1f [7m<7F>[m
>977e	00					.byte	 0	; $20
>977f	05					.byte	 5	; $21 !
>9780	00					.byte	 0	; $22 "
>9781	00					.byte	 0	; $23 #
>9782	05					.byte	 5	; $24 $
>9783	04					.byte	 4	; $25 %
>9784	01					.byte	 1	; $26 &
>9785	00					.byte	 0	; $27 '
>9786	00					.byte	 0	; $28 (
>9787	00					.byte	 0	; $29 )
>9788	04					.byte	 4	; $2a *
>9789	03					.byte	 3	; $2b +
>978a	00					.byte	 0	; $2c ,
>978b	03					.byte	 3	; $2d -
>978c	00					.byte	 0	; $2e .
>978d	04					.byte	 4	; $2f /
>978e	00					.byte	 0	; $30 0
>978f	00					.byte	 0	; $31 1
>9790	00					.byte	 0	; $32 2
>9791	00					.byte	 0	; $33 3
>9792	00					.byte	 0	; $34 4
>9793	00					.byte	 0	; $35 5
>9794	00					.byte	 0	; $36 6
>9795	00					.byte	 0	; $37 7
>9796	00					.byte	 0	; $38 8
>9797	00					.byte	 0	; $39 9
>9798	00					.byte	 0	; $3a :
>9799	00					.byte	 0	; $3b ;
>979a	02					.byte	 2	; $3c <
>979b	02					.byte	 2	; $3d =
>979c	02					.byte	 2	; $3e >
>979d	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.979e					EvaluateExpressionAt0:
.979e	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.97a0					EvaluateExpression:
.97a0	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.97a2					EvaluateExpressionAtPrecedence:
.97a2	48		pha				pha 								; save precedence level
.97a3	20 71 9a	jsr $9a71			jsr 	EvaluateTerm 				; evaluate term into level X.
.97a6	68		pla				pla 								; restore precedence level.
.97a7					_EXPRLoop:
.97a7	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.97a9	b1 30		lda ($30),y			lda 	(codePtr),y
.97ab	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.97ad	b0 25		bcs $97d4			bcs 	_EXPRExit
.97af	da		phx				phx 								; read the operator precedence
.97b0	aa		tax				tax
.97b1	bd 5e 97	lda $975e,x			lda 	PrecedenceLevel,x
.97b4	fa		plx				plx
.97b5	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.97b7	f0 1b		beq $97d4			beq 	_EXPRExit
.97b9	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.97bb	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.97bd	c5 37		cmp $37				cmp 	zTemp0+1
.97bf	b0 13		bcs $97d4			bcs		_EXPRExit 					; if current >= operator exit
.97c1	48		pha				pha 								; save current precedence.
.97c2	b1 30		lda ($30),y			lda 	(codePtr),y
.97c4	c8		iny				iny
.97c5	48		pha				pha
.97c6	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.97c8	e8		inx				inx 								; work out the right hand side.
.97c9	20 a2 97	jsr $97a2			jsr 	EvaluateExpressionAtPrecedence
.97cc	ca		dex				dex
.97cd	68		pla				pla 								; get operator, call the code.
.97ce	20 d7 97	jsr $97d7			jsr 	_EXPRCaller
.97d1	68		pla				pla 								; restore precedence level
.97d2	80 d3		bra $97a7			bra 	_EXPRLoop 					; and go round.
.97d4					_EXPRExit:
.97d4	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.97d6	60		rts				rts
.97d7					_EXPRCaller:
.97d7	da		phx				phx 								; save on stack, first thing is to restore it
.97d8	0a		asl a				asl 	a 							; double so can use vectors into X
.97d9	aa		tax				tax
.97da	7c de 8f	jmp ($8fde,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a888					FloatingPointAdd:
.a888	20 29 aa	jsr $aa29			jsr 	FloatPrepare 				; prepare for floats
.a88b	80 0b		bra $a898			bra 	FloatAdd
.a88d					FloatingPointSub:
.a88d	20 29 aa	jsr $aa29			jsr 	FloatPrepare 				; prepare for floats
.a890					FloatSubtract:
.a890	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a893	49 80		eor #$80			eor 	#$80
.a895	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a898					FloatAdd:
.a898	48		pha				pha
.a899	5a		phy				phy
.a89a	20 3a aa	jsr $aa3a			jsr 	NSNormalise 				; normalise S[X]
.a89d	f0 54		beq $a8f3			beq 	_FAReturn1
.a89f	e8		inx				inx 								; normalise S[X+1]
.a8a0	20 3a aa	jsr $aa3a			jsr 	NSNormalise
.a8a3	ca		dex				dex
.a8a4	c9 00		cmp #$00			cmp 	#0
.a8a6	f0 6f		beq $a917			beq 	_FAExit 					; if so, just return A
.a8a8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a8ab	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a8ae	f0 1b		beq $a8cb			beq 	_FAExponentsEqual
.a8b0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a8b3	a8		tay				tay
.a8b4	38		sec				sec 								; do a signed comparison of the exponents.
.a8b5	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a8b8	50 02		bvc $a8bc			bvc 	_FANoSignedChange
.a8ba	49 80		eor #$80			eor 	#$80
.a8bc					_FANoSignedChange:
.a8bc	29 80		and #$80			and 	#$80
.a8be	10 03		bpl $a8c3			bpl 	_FAHaveMax
.a8c0	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a8c3					_FAHaveMax:
.a8c3	20 1a a9	jsr $a91a			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a8c6	e8		inx				inx
.a8c7	20 1a a9	jsr $a91a			jsr 	_FAShiftToExponent
.a8ca	ca		dex				dex
.a8cb					_FAExponentsEqual:
.a8cb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a8ce	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a8d1	30 10		bmi $a8e3			bmi 	_FADifferentSigns
.a8d3	20 8c 95	jsr $958c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a8d6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a8d9	10 3c		bpl $a917			bpl 	_FAExit 					; if no, we are done.
.a8db	20 72 9f	jsr $9f72			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a8de	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a8e1	80 34		bra $a917			bra 	_FAExit
.a8e3					_FADifferentSigns:
.a8e3	20 b2 95	jsr $95b2			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a8e6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a8e9	10 2c		bpl $a917			bpl 	_FAExit 					; if no, we are done.
.a8eb	20 fb 9e	jsr $9efb			jsr 	NSMNegate 					; netate result
.a8ee	20 04 9f	jsr $9f04			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a8f1	80 24		bra $a917			bra 	_FAExit
.a8f3					_FAReturn1:
.a8f3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a8f6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a8f9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a8fc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a8ff	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a902	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a905	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a908	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a90b	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a90e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a911	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a914	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a917					_FAExit:
.a917	7a		ply				ply
.a918	68		pla				pla
.a919	60		rts				rts
.a91a					_FAShiftToExponent:
.a91a					_FAShiftToExponent2:
.a91a	98		tya				tya 								; compare Y to exponent
.a91b	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a91e	f0 08		beq $a928			beq 	_FASEExit 					; exit if so.
.a920	20 72 9f	jsr $9f72			jsr 	NSMShiftRight	 			; shift the mantissa right
.a923	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a926	80 f2		bra $a91a			bra 	_FAShiftToExponent2
.a928					_FASEExit:
.a928	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a929					CompareFloat:
.a929	20 90 a8	jsr $a890			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a92c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a92f	29 f8		and #$f8			and 	#$F8
.a931	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a934	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a937	f0 09		beq $a942			beq 	_FCExit 					; zero, so approximately identical
.a939	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a93b	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a93e	10 02		bpl $a942			bpl 	_FCExit
.a940					_FCNegative:
.a940	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a942					_FCExit:
.a942	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a943					FDivideCommand:
.a943	fa		plx				plx	 								; restore stack position
.a944	20 29 aa	jsr $aa29			jsr 	FloatPrepare 				; prepare for floats
.a947					FloatDivide:
.a947	48		pha				pha
.a948	e8		inx				inx
.a949	20 3a aa	jsr $aa3a			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a94c	ca		dex				dex
.a94d	c9 00		cmp #$00			cmp 	#0
.a94f	f0 20		beq $a971			beq 	_FDZero
.a951	20 3a aa	jsr $aa3a			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a954	f0 19		beq $a96f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a956	20 84 a7	jsr $a784			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a959	20 11 a7	jsr $a711			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a95c	20 3a aa	jsr $aa3a			jsr		NSNormalise 				; renormalise
.a95f	20 1f a8	jsr $a81f			jsr 	CalculateSign 				; calculate result sign
.a962	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a965	38		sec				sec
.a966	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a969	38		sec				sec
.a96a	e9 1e		sbc #$1e			sbc 	#30
.a96c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a96f					_FDExit:
.a96f	68		pla				pla
.a970	60		rts				rts
.a971					_FDZero:
.a971	a9 03		lda #$03		lda	#3
.a973	4c 97 93	jmp $9397		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a976					FloatFractionalPart:
.a976	5a		phy				phy
.a977	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a97a	29 7f		and #$7f			and 	#$7F
.a97c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a97f	20 3a aa	jsr $aa3a			jsr 	NSNormalise
.a982	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a985	38		sec				sec
.a986	e9 e0		sbc #$e0			sbc 	#$E0
.a988	90 31		bcc $a9bb			bcc 	_FFPExit 					; already fractional
.a98a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a98c	b0 2a		bcs $a9b8			bcs 	_FFPZero
.a98e	a8		tay				tay 								; put count to do in Y
.a98f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a992	20 bd a9	jsr $a9bd			jsr 	_FFPPartial
.a995	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a998	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a99b	20 bd a9	jsr $a9bd			jsr 	_FFPPartial
.a99e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a9a1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a9a4	20 bd a9	jsr $a9bd			jsr 	_FFPPartial
.a9a7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9aa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a9ad	20 bd a9	jsr $a9bd			jsr 	_FFPPartial
.a9b0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9b3	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; zeroed check.
.a9b6	d0 03		bne $a9bb			bne 	_FFPExit
.a9b8					_FFPZero:
.a9b8	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero
.a9bb					_FFPExit:
.a9bb	7a		ply				ply
.a9bc	60		rts				rts
.a9bd					_FFPPartial:
.a9bd	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a9bf	f0 17		beq $a9d8			beq 	_FFFPPExit
.a9c1	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a9c3	b0 0c		bcs $a9d1			bcs 	_FFFPPWholeByte
.a9c5	5a		phy				phy
.a9c6					_FFFPPLeft:
.a9c6	0a		asl a				asl 	a
.a9c7	88		dey				dey
.a9c8	d0 fc		bne $a9c6			bne 	_FFFPPLeft
.a9ca	7a		ply				ply
.a9cb					_FFFPPRight:
.a9cb	4a		lsr a				lsr 	a
.a9cc	88		dey				dey
.a9cd	d0 fc		bne $a9cb			bne 	_FFFPPRight
.a9cf	80 07		bra $a9d8			bra 	_FFFPPExit
.a9d1					_FFFPPWholeByte:
.a9d1	98		tya				tya 								; subtract 8 from count
.a9d2	38		sec				sec
.a9d3	e9 08		sbc #$08			sbc 	#8
.a9d5	a8		tay				tay
.a9d6	a9 00		lda #$00			lda 	#0 							; and clear all
.a9d8					_FFFPPExit:
.a9d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a9d9					FloatIntegerPart:
.a9d9	48		pha				pha
.a9da	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a9dd	f0 1f		beq $a9fe			beq 	_FIPExit 					; if so do nothing
.a9df	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; is it zero ?
.a9e2	f0 17		beq $a9fb			beq 	_FIPZero 					; if so return zero.
.a9e4	20 3a aa	jsr $aa3a			jsr 	NSNormalise 				; normalise
.a9e7	f0 12		beq $a9fb			beq 	_FIPZero 					; normalised to zero, exit zero
.a9e9					_FIPShift:
.a9e9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a9ec	10 08		bpl $a9f6			bpl 	_FIPCheckZero
.a9ee	20 72 9f	jsr $9f72			jsr 	NSMShiftRight 				; shift mantissa right
.a9f1	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a9f4	80 f3		bra $a9e9			bra 	_FIPShift
.a9f6					_FIPCheckZero:
.a9f6	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; avoid -0 problem
.a9f9	d0 03		bne $a9fe			bne 	_FIPExit 					; set to zero if mantissa zero.
.a9fb					_FIPZero:
.a9fb	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero
.a9fe					_FIPExit:
.a9fe	68		pla				pla
.a9ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aa00					FloatingPointMultiply:
.aa00	20 29 aa	jsr $aa29			jsr 	FloatPrepare 				; prepare for floats
.aa03					FloatMultiply:
.aa03	48		pha				pha
.aa04	20 3a aa	jsr $aa3a			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aa07	f0 1b		beq $aa24			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aa09	e8		inx				inx
.aa0a	20 3a aa	jsr $aa3a			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aa0d	ca		dex				dex
.aa0e	c9 00		cmp #$00			cmp 	#0
.aa10	f0 0f		beq $aa21			beq 	_FDSetZero
.aa12	20 da a7	jsr $a7da			jsr 	MultiplyShort 				; calculate the result.
.aa15	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aa18	18		clc				clc
.aa19	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aa1c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa1f	80 03		bra $aa24			bra 	_FDExit
.aa21					_FDSetZero:
.aa21	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero 					; return 0
.aa24					_FDExit:
.aa24	20 3a aa	jsr $aa3a			jsr 	NSNormalise 				; normalise the result
.aa27	68		pla				pla
.aa28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aa29					FloatPrepare:
.aa29	20 b0 98	jsr $98b0			jsr 	DereferenceTopTwo 			; dereference the top two values
.aa2c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aa2f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa32	29 10		and #$10			and 	#NSBIsString
.aa34	d0 01		bne $aa37			bne 	_FDType
.aa36	60		rts				rts
.aa37					_FDType:
.aa37	4c c1 ac	jmp $acc1			jmp 	TypeError
.aa3a					NSNormalise:
.aa3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.aa3d	29 80		and #$80			and 	#$80
.aa3f	09 08		ora #$08			ora 	#NSTFloat
.aa41	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa44	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; if zero exit
.aa47	d0 09		bne $aa52			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.aa49	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aa4c	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.aa4f	a9 00		lda #$00			lda 	#0 							; set Z flag
.aa51	60		rts				rts
.aa52					_NSNormaliseOptimise:
.aa52	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.aa55	d0 22		bne $aa79			bne 	_NSNormaliseLoop
.aa57	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.aa5a	30 1d		bmi $aa79			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.aa5c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa5f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa62	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa65	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa68	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa6b	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.aa6e	bd 28 04	lda $0428,x			lda 	NSExponent,x
.aa71	38		sec				sec
.aa72	e9 08		sbc #$08			sbc 	#8
.aa74	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa77	80 d9		bra $aa52			bra 	_NSNormaliseOptimise
.aa79					_NSNormaliseLoop:
.aa79	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.aa7c	70 08		bvs $aa86			bvs 	_NSNExit 					; exit if so with Z flag clear
.aa7e	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; shift mantissa left
.aa81	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.aa84	80 f3		bra $aa79			bra 	_NSNormaliseLoop
.aa86					_NSNExit:
.aa86	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.aa88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.97dd					AssignNumber:
.97dd	5a		phy				phy
.97de	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.97e1	85 36		sta $36				sta 	zTemp0
.97e3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97e6	85 37		sta $37				sta 	zTemp0+1
.97e8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.97eb	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.97ed	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97f0	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.97f2	c9 08		cmp #$08			cmp 	#NSTFloat
.97f4	f0 2a		beq $9820			beq 	_ANFloat
.97f6	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.97f9	f0 05		beq $9800			beq		_ANNotFloat
.97fb	e8		inx				inx
.97fc	20 d9 a9	jsr $a9d9			jsr 	FloatIntegerPart 			; make it an integer
.97ff	ca		dex				dex
.9800					_ANNotFloat:
.9800	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9803	29 03		and #$03			and 	#3
.9805	d0 05		bne $980c			bne 	_ANByteWord
.9807	20 2c 98	jsr $982c			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.980a	80 1e		bra $982a			bra 	_ANExit
.980c					_ANByteWord:
.980c	48		pha				pha 								; save count
.980d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9810	92 36		sta ($36)			sta 	(zTemp0)
.9812	68		pla				pla
.9813	c9 01		cmp #$01			cmp	 	#1
.9815	f0 13		beq $982a			beq 	_ANExit
.9817	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.981a	a0 01		ldy #$01			ldy 	#1
.981c	91 36		sta ($36),y			sta 	(zTemp0),y
.981e	80 0a		bra $982a			bra 	_ANExit
.9820					_ANFloat:
.9820	20 2c 98	jsr $982c			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9823	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9826	a0 04		ldy #$04			ldy 	#4
.9828	91 36		sta ($36),y			sta 	(zTemp0),y
.982a					_ANExit:
.982a	7a		ply				ply
.982b	60		rts				rts
.982c					_ANCopy4PackSign:
.982c	a0 03		ldy #$03			ldy 	#3
.982e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9831	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9833	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9836	91 36		sta ($36),y			sta 	(zTemp0),y
.9838	88		dey				dey
.9839	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.983c	91 36		sta ($36),y			sta 	(zTemp0),y
.983e	88		dey				dey
.983f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9842	91 36		sta ($36),y			sta 	(zTemp0),y
.9844	88		dey				dey
.9845	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9848	91 36		sta ($36),y			sta 	(zTemp0),y
.984a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.984b					AssignString:
.984b	5a		phy				phy
.984c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.984f	85 38		sta $38				sta 	zTemp1
.9851	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9854	85 39		sta $39				sta 	zTemp1+1
.9856	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9859	85 36		sta $36				sta 	zTemp0
.985b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.985e	85 37		sta $37				sta 	zTemp0+1
.9860	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9862	b1 36		lda ($36),y			lda 	(zTemp0),y
.9864	f0 23		beq $9889			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9866	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9867	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9869	e9 02		sbc #$02			sbc 	#2
.986b	85 3c		sta $3c				sta 	zsTemp
.986d	a0 01		ldy #$01			ldy 	#1
.986f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9871	e9 00		sbc #$00			sbc 	#0
.9873	85 3d		sta $3d				sta 	zsTemp+1
.9875	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9877					_ASGetLength:
.9877	c8		iny				iny
.9878	b1 38		lda ($38),y			lda 	(zTemp1),y
.987a	d0 fb		bne $9877			bne 	_ASGetLength
.987c	98		tya				tya 								; is this length <= current length
.987d	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.987f	90 20		bcc $98a1			bcc 	_ASCopyString
.9881	f0 1e		beq $98a1			beq 	_ASCopyString
.9883	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9885	a0 01		ldy #$01			ldy 	#1
.9887	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9889					_ASNewStringRequired:
.9889	e8		inx				inx 								; concrete the new string.
.988a	20 5c af	jsr $af5c			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.988d	ca		dex				dex
.988e	18		clc				clc
.988f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9892	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9894	92 36		sta ($36)			sta 	(zTemp0)
.9896	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9899	69 00		adc #$00			adc 	#0
.989b	a0 01		ldy #$01			ldy 	#1
.989d	91 36		sta ($36),y			sta 	(zTemp0),y
.989f	80 0d		bra $98ae			bra 	_ASExit
.98a1					_ASCopyString:
.98a1	a0 00		ldy #$00			ldy 	#0
.98a3					_ASCopyLoop:
.98a3	b1 38		lda ($38),y			lda 	(zTemp1),y
.98a5	c8		iny				iny
.98a6	c8		iny				iny
.98a7	91 3c		sta ($3c),y			sta 	(zsTemp),y
.98a9	88		dey				dey
.98aa	c9 00		cmp #$00			cmp 	#0
.98ac	d0 f5		bne $98a3			bne 	_ASCopyLoop
.98ae					_ASExit:
.98ae	7a		ply				ply
.98af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.98b0					DereferenceTopTwo:
.98b0	e8		inx				inx
.98b1	20 b5 98	jsr $98b5			jsr 	Dereference 				; deref x+1
.98b4	ca		dex				dex  								; falls through to deref x
.98b5					Dereference:
.98b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.98b8	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.98ba	f0 57		beq $9913			beq 	_DRFExit 					; not a reference
.98bc	5a		phy				phy
.98bd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.98c0	85 36		sta $36				sta 	zTemp0
.98c2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98c5	85 37		sta $37				sta 	zTemp0+1
.98c7	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.98ca	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.98cc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.98d2	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.98d4	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.98d6	f0 0f		beq $98e7			beq 	_DRFDereferenceTwo
.98d8	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.98da	f0 39		beq $9915			beq 	_DRFFull
.98dc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.98df	29 03		and #$03			and 	#3
.98e1	f0 32		beq $9915			beq 	_DRFFull 					; the whole word
.98e3	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.98e5	f0 07		beq $98ee			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.98e7					_DRFDereferenceTwo:
.98e7	a0 01		ldy #$01			ldy 	#1
.98e9	b1 36		lda ($36),y			lda 	(zTemp0),y
.98eb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98ee					_DRFClear23:
.98ee	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.98f1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98f4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.98f7	29 18		and #$18			and 	#NSBTypeMask
.98f9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98fc	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.98fe	d0 12		bne $9912			bne 	_DRFNotString
.9900	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9903	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9906	d0 0a		bne $9912			bne 	_DRFNotString
.9908	a9 14		lda #$14			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.990a	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.990d	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.990f	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9912					_DRFNotString
.9912	7a		ply				ply 								; restore Y and exit
.9913					_DRFExit:
.9913	60		rts				rts
.9914					_DRFNullString:
>9914	00						.byte 	0
.9915					_DRFFull:
.9915	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9917	b1 36		lda ($36),y			lda 	(zTemp0),y
.9919	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.991c	c8		iny				iny
.991d	b1 36		lda ($36),y			lda 	(zTemp0),y
.991f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9922	c8		iny				iny
.9923	b1 36		lda ($36),y			lda 	(zTemp0),y
.9925	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9928	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.992b	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.992e	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9930	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9933	f0 06		beq $993b			beq 	_DRFNoExponent
.9935	c8		iny				iny 								; if not, read the exponent as well.
.9936	b1 36		lda ($36),y			lda 	(zTemp0),y
.9938	9d 28 04	sta $0428,x			sta 	NSExponent,x
.993b					_DRFNoExponent:
.993b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.993e	10 0d		bpl $994d			bpl 	_DRFExit2 					; if not, then exit.
.9940	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9942	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9945	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9948	09 80		ora #$80			ora 	#NSBIsNegative
.994a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.994d					_DRFExit2:
.994d	7a		ply				ply
.994e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.994f					EncodeNumberStart:
.994f	38		sec				sec
.9950	80 01		bra $9953			bra 	EncodeNumberContinue+1
.9952					EncodeNumberContinue:
.9952	18		clc				clc
.9953					EncodeNumber:
.9953	08		php				php 								; save reset.
.9954	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9956	f0 12		beq $996a			beq 	_ENIsOkay
.9958	c9 30		cmp #$30			cmp 	#"0"
.995a	90 04		bcc $9960			bcc 	_ENBadNumber
.995c	c9 3a		cmp #$3a			cmp 	#"9"+1
.995e	90 0a		bcc $996a			bcc 	_ENIsOkay
.9960					_ENBadNumber:
.9960	28		plp				plp 								; throw saved reset
.9961	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9964	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9966	f0 7e		beq $99e6			beq 	_ENConstructFinal
.9968					_ENFail:
.9968	18		clc				clc 								; not allowed
.9969	60		rts				rts
.996a					_ENIsOkay:
.996a	28		plp				plp 								; are we restarting
.996b	90 15		bcc $9982			bcc 	_ENNoRestart
.996d					_ENStartEncode:
.996d	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.996f	f0 0c		beq $997d			beq 	_ENFirstDP
.9971	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9973	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.9976	a9 01		lda #$01			lda 	#ESTA_Low
.9978					_ENExitChange:
.9978	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.997b	38		sec				sec
.997c	60		rts				rts
.997d					_ENFirstDP:
.997d	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero 					; clear integer part
.9980	80 3f		bra $99c1			bra 	_ESTASwitchFloat			; go straight to float and exi
.9982					_ENNoRestart:
.9982	48		pha				pha 								; save on stack.
.9983	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9986	c9 01		cmp #$01			cmp 	#ESTA_Low
.9988	f0 09		beq $9993			beq  	_ESTALowState
.998a	c9 02		cmp #$02			cmp 	#ESTA_High
.998c	f0 29		beq $99b7			beq 	_ESTAHighState
.998e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9990	f0 3b		beq $99cd			beq 	_ESTADecimalState
>9992	db						.byte 	$DB 						; causes a break in the emulator
.9993					_ESTALowState:
.9993	68		pla				pla 								; get value back
.9994	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9996	f0 29		beq $99c1			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9998	29 0f		and #$0f			and 	#15 						; make digit
.999a	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.999d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.99a0	0a		asl a				asl 	a
.99a1	0a		asl a				asl 	a
.99a2	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.99a5	0a		asl a				asl 	a
.99a6	6d 86 04	adc $0486			adc 	DigitTemp
.99a9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99ac	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.99ae	90 05		bcc $99b5			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.99b0	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.99b2	8d 85 04	sta $0485			sta 	EncodeState
.99b5					_ESTANoSwitch:
.99b5	38		sec				sec
.99b6	60		rts				rts
.99b7					_ESTAHighState:
.99b7	68		pla				pla 								; get value back
.99b8	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.99ba	f0 05		beq $99c1			beq 	_ESTASwitchFloat
.99bc	20 20 9a	jsr $9a20			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.99bf	38		sec				sec
.99c0	60		rts				rts
.99c1					_ESTASwitchFloat:
.99c1	9c 87 04	stz $0487			stz 	DecimalCount
.99c4	e8		inx				inx 								; zero the decimal additive.
.99c5	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero
.99c8	ca		dex				dex
.99c9	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.99cb	80 ab		bra $9978			bra 	_ENExitChange
.99cd					_ESTADecimalState:
.99cd	68		pla				pla 								; digit.
.99ce	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.99d0	f0 96		beq $9968			beq 	_ENFail
.99d2	e8		inx				inx 								; put digit into fractional part of X+1
.99d3	20 20 9a	jsr $9a20			jsr 	ESTAShiftDigitIntoMantissa
.99d6	ca		dex				dex
.99d7	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.99da	ad 87 04	lda $0487			lda 	DecimalCount
.99dd	c9 0b		cmp #$0b			cmp 	#11
.99df	f0 02		beq $99e3			beq 	_ESTADSFail
.99e1	38		sec				sec
.99e2	60		rts				rts
.99e3					_ESTADSFail:
.99e3	4c bc ac	jmp $acbc			jmp 	RangeError
.99e6					_ENConstructFinal:
.99e6	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.99e9	f0 33		beq $9a1e			beq 	_ENCFExit 					; no decimals
.99eb	5a		phy				phy
.99ec	0a		asl a				asl 	a 							; x 4 and CLC
.99ed	0a		asl a				asl 	a
.99ee	6d 87 04	adc $0487			adc 	DecimalCount
.99f1	a8		tay				tay
.99f2	b9 7b ac	lda $ac7b,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.99f5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.99f8	b9 7c ac	lda $ac7c,y			lda 	DecimalScalarTable-5+1,y
.99fb	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.99fe	b9 7d ac	lda $ac7d,y			lda 	DecimalScalarTable-5+2,y
.9a01	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9a04	b9 7e ac	lda $ac7e,y			lda 	DecimalScalarTable-5+3,y
.9a07	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9a0a	b9 7f ac	lda $ac7f,y			lda 	DecimalScalarTable-5+4,y
.9a0d	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9a10	a9 08		lda #$08			lda 	#NSTFloat
.9a12	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9a15	7a		ply				ply
.9a16	e8		inx				inx 								; multiply decimal const by decimal scalar
.9a17	20 03 aa	jsr $aa03			jsr 	FloatMultiply
.9a1a	ca		dex				dex
.9a1b	20 98 a8	jsr $a898			jsr 	FloatAdd 					; add to integer part.
.9a1e					_ENCFExit:
.9a1e	18		clc				clc 								; reject the digit.
.9a1f	60		rts				rts
.9a20					ESTAShiftDigitIntoMantissa:
.9a20	29 0f		and #$0f			and 	#15 						; save digit
.9a22	48		pha				pha
.9a23	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9a26	48		pha				pha
.9a27	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9a2a	48		pha				pha
.9a2b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a2e	48		pha				pha
.9a2f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a32	48		pha				pha
.9a33	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; x 2
.9a36	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; x 4
.9a39	18		clc				clc 								; pop mantissa and add
.9a3a	68		pla				pla
.9a3b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a3e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a41	68		pla				pla
.9a42	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9a45	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a48	68		pla				pla
.9a49	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9a4c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a4f	68		pla				pla
.9a50	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9a53	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9a56	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; x 10
.9a59	68		pla				pla 								; add digit
.9a5a	18		clc				clc
.9a5b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a5e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a61	90 0d		bcc $9a70			bcc 	_ESTASDExit
.9a63	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9a66	d0 08		bne $9a70			bne 	_ESTASDExit
.9a68	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9a6b	d0 03		bne $9a70			bne 	_ESTASDExit
.9a6d	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9a70					_ESTASDExit:
.9a70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9a71					EvaluateTerm:
.9a71	b1 30		lda ($30),y			lda 	(codePtr),y
.9a73	30 18		bmi $9a8d			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9a75	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9a77	b0 6f		bcs $9ae8			bcs 	_ETVariable
.9a79	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9a7b	90 6e		bcc $9aeb			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9a7d	c9 3a		cmp #$3a			cmp 	#'9'+1
.9a7f	b0 6a		bcs $9aeb			bcs 	_ETPuncUnary
.9a81	20 4f 99	jsr $994f			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9a84					_ETNumber:
.9a84	c8		iny				iny 								; keep encoding until we have the numbers
.9a85	b1 30		lda ($30),y			lda 	(codePtr),y
.9a87	20 52 99	jsr $9952			jsr 	EncodeNumberContinue
.9a8a	b0 f8		bcs $9a84			bcs 	_ETNumber 					; go back if accepted.
.9a8c	60		rts				rts
.9a8d					_ETCheckUnary:
.9a8d	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9a8f	f0 41		beq $9ad2			beq 	_ETString
.9a91	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9a93	f0 12		beq $9aa7			beq 	_ETHexConstant
.9a95	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9a97	90 0b		bcc $9aa4			bcc 	_ETSyntaxError
.9a99	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9a9b	b0 07		bcs $9aa4			bcs 	_ETSyntaxError
.9a9d	da		phx				phx 								; push X on the stack
.9a9e	0a		asl a				asl 	a 							; put vector x 2 into X
.9a9f	aa		tax				tax
.9aa0	c8		iny				iny 								; consume unary function token
.9aa1	7c 5e 90	jmp ($905e,x)			jmp 	(VectorSet0,x) 				; and do it.
.9aa4					_ETSyntaxError:
.9aa4	4c b7 ac	jmp $acb7			jmp 	SyntaxError
.9aa7					_ETHexConstant:
.9aa7	c8		iny				iny 								; skip #
.9aa8	c8		iny				iny 								; skip count
.9aa9	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero 					; clear result
.9aac					_ETHLoop:
.9aac	b1 30		lda ($30),y			lda 	(codePtr),y
.9aae	c8		iny				iny 								; and consume
.9aaf	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9ab1	f0 1e		beq $9ad1			beq 	_ETHExit
.9ab3	48		pha				pha 								; save on stack.
.9ab4	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; x 2
.9ab7	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; x 4
.9aba	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; x 8
.9abd	20 64 9f	jsr $9f64			jsr 	NSMShiftLeft 				; x 16
.9ac0	68		pla				pla 								; ASCII
.9ac1	c9 41		cmp #$41			cmp 	#'A'
.9ac3	90 02		bcc $9ac7			bcc 	_ETHNotChar
.9ac5	e9 07		sbc #$07			sbc 	#7
.9ac7					_ETHNotChar:
.9ac7	29 0f		and #$0f			and 	#15 						; digit now
.9ac9	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9acc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9acf	80 db		bra $9aac			bra 	_ETHLoop 					; go round.
.9ad1					_ETHExit:
.9ad1	60		rts				rts
.9ad2					_ETString:
.9ad2	c8		iny				iny 								; look at length
.9ad3	b1 30		lda ($30),y			lda 	(codePtr),y
.9ad5	48		pha				pha
.9ad6	c8		iny				iny 								; first character
.9ad7	20 99 9f	jsr $9f99			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9ada	68		pla				pla 								; restore count and save
.9adb	85 36		sta $36				sta 	zTemp0
.9add	98		tya				tya 								; add length to Y to skip it.
.9ade	18		clc				clc
.9adf	65 36		adc $36				adc 	zTemp0
.9ae1	a8		tay				tay
.9ae2	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9ae4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ae7	60		rts				rts
.9ae8					_ETVariable:
.9ae8	4c 42 9b	jmp $9b42			jmp 	VariableHandler
.9aeb					_ETPuncUnary:
.9aeb	c8		iny				iny 								; consume the unary character
.9aec	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9aee	f0 2d		beq $9b1d			beq 	_ETUnaryNegate
.9af0	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9af2	f0 39		beq $9b2d			beq 	_ETDereference
.9af4	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9af6	f0 43		beq $9b3b			beq 	_ETParenthesis
.9af8	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9afa	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9afc	f0 06		beq $9b04			beq 	_ETIndirection
.9afe	e6 36		inc $36				inc 	zTemp0
.9b00	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b02	d0 a0		bne $9aa4			bne 	_ETSyntaxError
.9b04					_ETIndirection:
.9b04	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b06	1a		inc a				inc 	a
.9b07	48		pha				pha
.9b08	20 71 9a	jsr $9a71			jsr 	EvaluateTerm				; evaluate the term
.9b0b	20 b5 98	jsr $98b5			jsr 	Dereference 				; dereference it.
.9b0e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9b11	d0 07		bne $9b1a			bne 	_ETTypeMismatch
.9b13	68		pla				pla 								; indirection 1-2
.9b14	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9b16	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b19	60		rts				rts
.9b1a					_ETTypeMismatch:
.9b1a	4c c1 ac	jmp $acc1			jmp 	TypeError
.9b1d					_ETUnaryNegate:
.9b1d	20 71 9a	jsr $9a71			jsr 	EvaluateTerm				; evaluate the term
.9b20	20 b5 98	jsr $98b5			jsr 	Dereference 				; dereference it.
.9b23	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9b26	29 10		and #$10			and 	#NSTString
.9b28	d0 f0		bne $9b1a			bne 	_ETTypeMismatch
.9b2a	4c fb 9e	jmp $9efb			jmp 	NSMNegate  					; just toggles the sign bit.
.9b2d					_ETDereference:
.9b2d	20 71 9a	jsr $9a71			jsr 	EvaluateTerm				; evaluate the term
.9b30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9b33	29 20		and #$20			and 	#NSBIsReference
.9b35	f0 e3		beq $9b1a			beq 	_ETTypeMismatch
.9b37	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9b3a	60		rts				rts
.9b3b					_ETParenthesis:
.9b3b	20 a0 97	jsr $97a0			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9b3e	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 			; check for )
.9b41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9b42					VariableHandler:
.9b42	b1 30		lda ($30),y			lda 	(codePtr),y
.9b44	18		clc				clc
.9b45	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9b47	85 37		sta $37				sta 	zTemp0+1
.9b49	c8		iny				iny
.9b4a	b1 30		lda ($30),y			lda 	(codePtr),y
.9b4c	85 36		sta $36				sta 	zTemp0
.9b4e	c8		iny				iny
.9b4f	18		clc				clc									; copy variable address+3 to mantissa
.9b50	69 03		adc #$03			adc 	#3
.9b52	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b55	a5 37		lda $37				lda 	zTemp0+1
.9b57	69 00		adc #$00			adc 	#0
.9b59	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b5c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9b5f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9b62	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9b65	5a		phy				phy
.9b66	a0 02		ldy #$02			ldy 	#2 							; read type
.9b68	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b6a	7a		ply				ply
.9b6b	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9b6d	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9b6f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b72	29 04		and #$04			and 	#NSBIsArray
.9b74	d0 01		bne $9b77			bne 	_VHArray
.9b76	60		rts				rts
.9b77					_VHArray:
.9b77	e8		inx				inx
.9b78	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9b7b	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9b7d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9b80	b1 30		lda ($30),y			lda 	(codePtr),y
.9b82	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9b84	d0 06		bne $9b8c			bne 	_VHNoSecondIndex
.9b86	c8		iny				iny 								; skip the comma
.9b87	e8		inx				inx
.9b88	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9b8b	ca		dex				dex
.9b8c					_VHNoSecondIndex:
.9b8c	ca		dex				dex 								; set X back.
.9b8d	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 			; and check the right bracket.
.9b90	5a		phy				phy 								; save position
.9b91	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9b94	85 3e		sta $3e				sta 	zaTemp
.9b96	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b99	85 3f		sta $3f				sta 	zaTemp+1
.9b9b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9b9d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9b9f	f0 02		beq $9ba3			beq 	_VHHas2Mask
.9ba1	a9 ff		lda #$ff			lda 	#$FF
.9ba3					_VHHas2Mask:
.9ba3	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9ba6	f0 54		beq $9bfc			beq 	_VHBadIndex
.9ba8	0a		asl a				asl 	a 							; carry will be set if a second index
.9ba9	90 09		bcc $9bb4			bcc 	_VHCheckFirstIndex
.9bab	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9bad	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9baf	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9bb2	90 48		bcc $9bfc			bcc 	_VHBadIndex
.9bb4					_VHCheckFirstIndex:
.9bb4	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9bb6	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bb8	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9bbb	90 3f		bcc $9bfc			bcc 	_VHBadIndex
.9bbd	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9bbf	64 37		stz $37				stz 	zTemp0+1
.9bc1	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9bc4	30 0f		bmi $9bd5			bmi 	_VHNoMultiply
.9bc6	da		phx				phx
.9bc7	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9bca	48		pha				pha
.9bcb	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9bcd	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bcf	1a		inc a				inc 	a 							; add 1 for zero base
.9bd0	fa		plx				plx
.9bd1	20 53 ab	jsr $ab53			jsr 	Multiply8x8 				; calculate -> Z0
.9bd4	fa		plx				plx
.9bd5					_VHNoMultiply:
.9bd5	18		clc				clc
.9bd6	a5 36		lda $36				lda 	zTemp0
.9bd8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9bdb	85 36		sta $36				sta 	zTemp0
.9bdd	a5 37		lda $37				lda 	zTemp0+1
.9bdf	69 00		adc #$00			adc 	#0
.9be1	85 37		sta $37				sta 	zTemp0+1
.9be3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9be6	20 c2 8a	jsr $8ac2			jsr 	ScaleByBaseType
.9be9	18		clc				clc
.9bea	b2 3e		lda ($3e)			lda 	(zaTemp)
.9bec	65 36		adc $36				adc 	zTemp0
.9bee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bf1	a0 01		ldy #$01			ldy 	#1
.9bf3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9bf5	65 37		adc $37				adc 	zTemp0+1
.9bf7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bfa	7a		ply				ply 								; restore position
.9bfb	60		rts				rts
.9bfc					_VHBadIndex:
.9bfc	a9 17		lda #$17		lda	#23
.9bfe	4c 97 93	jmp $9397		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.aa89					AbsUnary:
.aa89	fa		plx				plx 								; restore stack pos
.aa8a	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber 				; get a float or int
.aa8d	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.aa90	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.aa93	29 7f		and #$7f			and 	#$7F
.aa95	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c01					AllocUnary:
.9c01	fa		plx				plx 								; restore stack pos
.9c02	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger		; get bytes required.
.9c05	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.9c08	da		phx				phx 								; save X/Y
.9c09	5a		phy				phy
.9c0a	8a		txa				txa 								; copy X into Y
.9c0b	a8		tay				tay
.9c0c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9c0f	aa		tax				tax
.9c10	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9c13	20 20 9c	jsr $9c20			jsr 	AllocateXABytes 			; allocate memory
.9c16	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9c19	8a		txa				txa
.9c1a	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9c1d	7a		ply				ply
.9c1e	fa		plx				plx
.9c1f	60		rts				rts
.9c20					AllocateXABytes:
.9c20	5a		phy				phy
.9c21	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9c24	84 36		sty $36				sty 	zTemp0
.9c26	5a		phy				phy
.9c27	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9c2a	84 37		sty $37				sty 	zTemp0+1
.9c2c	5a		phy				phy
.9c2d	18		clc				clc 								; add to low memory pointer
.9c2e	6d 8c 04	adc $048c			adc 	lowMemPtr
.9c31	8d 8c 04	sta $048c			sta 	lowMemPtr
.9c34	8a		txa				txa
.9c35	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9c38	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9c3b	b0 2f		bcs $9c6c			bcs 	CISSMemory
.9c3d	20 5e 9c	jsr $9c5e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9c40					_ClearMemory:
.9c40	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9c43	c5 36		cmp $36				cmp 	zTemp0
.9c45	d0 07		bne $9c4e			bne 	_CMClearNext
.9c47	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9c4a	c5 37		cmp $37				cmp 	zTemp0+1
.9c4c	f0 0c		beq $9c5a			beq 	_CMExit
.9c4e					_CMClearNext:
.9c4e	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9c50	92 36		sta ($36)			sta 	(zTemp0)
.9c52	e6 36		inc $36				inc 	zTemp0
.9c54	d0 ea		bne $9c40			bne 	_ClearMemory
.9c56	e6 37		inc $37				inc		zTemp0+1
.9c58	80 e6		bra $9c40			bra 	_ClearMemory
.9c5a					_CMExit:
.9c5a	fa		plx				plx
.9c5b	68		pla				pla
.9c5c	7a		ply				ply
.9c5d	60		rts				rts
.9c5e					CheckIdentifierStringSpace:
.9c5e	48		pha				pha
.9c5f	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9c62	18		clc				clc
.9c63	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9c65	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9c68	b0 02		bcs $9c6c			bcs 	CISSMemory
.9c6a	68		pla				pla
.9c6b	60		rts				rts
.9c6c					CISSMemory:
.9c6c	a9 06		lda #$06		lda	#6
.9c6e	4c 97 93	jmp $9397		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.aa99					AscUnary:
.aa99	fa		plx				plx 								; restore stack pos
.aa9a	20 ae 9e	jsr $9eae			jsr 	EvaluateString 				; get a string
.aa9d	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.aa9f	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.aaa2	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.aaa5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.aaa6					FracUnary:
.aaa6	fa		plx				plx 								; restore stack pos
.aaa7	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber 				; get a float or int
.aaaa	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.aaad	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aab0	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aab2	f0 04		beq $aab8			beq 	_IUZero
.aab4	20 76 a9	jsr $a976			jsr 	FloatFractionalPart
.aab7	60		rts				rts
.aab8					_IUZero:
.aab8	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero
.aabb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.aabc					IntUnary:
.aabc	fa		plx				plx 								; restore stack pos
.aabd	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber 				; get a float or int
.aac0	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.aac3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.aac6	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.aac8	f0 03		beq $aacd			beq 	_IUExit
.aaca	20 d9 a9	jsr $a9d9			jsr 	FloatIntegerPart
.aacd					_IUExit:
.aacd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.aace					LenUnary:
.aace	fa		plx				plx 								; restore stack pos
.aacf	20 ae 9e	jsr $9eae			jsr 	EvaluateString 				; get a string
.aad2	5a		phy				phy
.aad3	a0 00		ldy #$00			ldy 	#0 							; find length
.aad5					_LenFind:
.aad5	b1 36		lda ($36),y			lda 	(zTemp0),y
.aad7	f0 06		beq $aadf			beq 	_LenExit
.aad9	c8		iny				iny
.aada	d0 f9		bne $aad5			bne 	_LenFind
.aadc	4c bc ac	jmp $acbc			jmp 	RangeError 					; string > 255
.aadf					_LenExit:
.aadf	98		tya				tya
.aae0	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.aae3	7a		ply				ply
.aae4	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.aae7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9c71					Unary_Not:
.9c71	fa		plx				plx
.9c72	20 c6 9e	jsr $9ec6			jsr 	EvaluateInteger 			; get integer
.9c75	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.9c78	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; zero mantissa ?
.9c7b	f0 04		beq $9c81			beq 	_NotZero
.9c7d	20 4f 9f	jsr $9f4f			jsr 	NSMSetZero
.9c80	60		rts				rts
.9c81					_NotZero:
.9c81	4c 04 94	jmp $9404			jmp 	ReturnTrue
.9c84					_UNBad:
.9c84	4c c6 ac	jmp $acc6			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9c87					Unary_Random:
.9c87	fa		plx				plx
.9c88	20 00 9d	jsr $9d00			jsr 	Random32Bit 				; get a random number
.9c8b	20 e5 9c	jsr $9ce5			jsr 	URCopyToMantissa  			; put in mantissa
.9c8e	e8		inx				inx
.9c8f	20 db 9e	jsr $9edb			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9c92	ca		dex				dex
.9c93	20 55 a7	jsr $a755			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9c96	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9c99	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c9c	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.9c9f	60		rts				rts
.9ca0					Unary_Rnd:
.9ca0	fa		plx				plx
.9ca1	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber 				; number to use.
.9ca4	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 			; closing bracket
.9ca7	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9caa	f0 2b		beq $9cd7			beq 	_URCopySeed
.9cac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9caf	10 23		bpl $9cd4			bpl 	_URDontSeed
.9cb1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9cb4	49 17		eor #$17			eor 	#$17
.9cb6	8d 88 04	sta $0488			sta 	RandomSeed+0
.9cb9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9cbc	49 a5		eor #$a5			eor 	#$A5
.9cbe	8d 89 04	sta $0489			sta 	RandomSeed+1
.9cc1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9cc4	49 c2		eor #$c2			eor 	#$C2
.9cc6	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9cc9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9ccc	49 9d		eor #$9d			eor 	#$9D
.9cce	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9cd1	20 00 9d	jsr $9d00			jsr 	Random32Bit
.9cd4					_URDontSeed:
.9cd4	20 00 9d	jsr $9d00			jsr 	Random32Bit 				; generate a number.
.9cd7					_URCopySeed:
.9cd7	20 e5 9c	jsr $9ce5			jsr 	URCopyToMantissa 			; copy into mantissa
.9cda	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9cdc	8d 28 04	sta $0428			sta 	NSExponent
.9cdf	a9 08		lda #$08			lda 	#NSTFloat
.9ce1	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9ce4	60		rts				rts
.9ce5					URCopyToMantissa:
.9ce5	ad 88 04	lda $0488			lda 	RandomSeed+0
.9ce8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ceb	ad 89 04	lda $0489			lda 	RandomSeed+1
.9cee	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cf1	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9cf4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cf7	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9cfa	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9cfc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cff	60		rts				rts
.9d00					Random32Bit:
.9d00	5a		phy				phy
.9d01	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9d03	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9d06	d0 03		bne $9d0b			bne 	_Random1
.9d08	a8		tay				tay 								; if so do it 256 times
.9d09	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9d0b					_Random1:
.9d0b	0a		asl a				asl 	a 							; LSFR RNG
.9d0c	2e 89 04	rol $0489			rol 	RandomSeed+1
.9d0f	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9d12	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9d15	90 02		bcc $9d19			bcc 	_Random2
.9d17	49 c5		eor #$c5			eor 	#$C5
.9d19					_Random2:
.9d19	88		dey				dey
.9d1a	d0 ef		bne $9d0b			bne 	_Random1
.9d1c	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d1f	7a		ply				ply
.9d20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.aae8					SgnUnary:
.aae8	fa		plx				plx 								; restore stack pos
.aae9	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber 				; get a float or int
.aaec	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.aaef	20 7f 9f	jsr $9f7f			jsr 	NSMIsZero 					; if zero
.aaf2	f0 10		beq $ab04			beq 	_SGZero  					; return Int Zero
.aaf4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.aaf7	48		pha				pha
.aaf8	a9 01		lda #$01			lda 	#1 							; set to 1
.aafa	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.aafd	68		pla				pla
.aafe	29 80		and #$80			and		#$80 						; copy the sign byte out
.ab00	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab03	60		rts				rts
.ab04	20 4f 9f	jsr $9f4f	_SGZero:jsr 	NSMSetZero
.ab07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.ab08					ValUnary:
.ab08	fa		plx				plx 								; restore stack pos
.ab09	20 1e ab	jsr $ab1e			jsr 	ValMainCode 				; do the main val() code
.ab0c	b0 01		bcs $ab0f			bcs 	_VUError 					; couldn't convert
.ab0e	60		rts				rts
.ab0f					_VUError:
.ab0f	4c c1 ac	jmp $acc1			jmp 	TypeError
.ab12					IsValUnary:
.ab12	fa		plx				plx 								; restore stack pos
.ab13	20 1e ab	jsr $ab1e			jsr 	ValMainCode 				; do the main val() code
.ab16	b0 03		bcs $ab1b			bcs 	_VUBad
.ab18	4c 04 94	jmp $9404			jmp 	ReturnTrue
.ab1b					_VUBad:
.ab1b	4c 10 94	jmp $9410			jmp 	ReturnFalse
.ab1e					ValMainCode:
.ab1e	20 ae 9e	jsr $9eae			jsr 	EvaluateString 				; get a string
.ab21	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 			; check right bracket present
.ab24	5a		phy				phy
.ab25	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ab27	f0 17		beq $ab40			beq 	_VMCFail2
.ab29	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ab2b	48		pha				pha 								; save first character
.ab2c	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ab2e	d0 01		bne $ab31			bne 	_VMCStart
.ab30	c8		iny				iny 								; skip over -
.ab31					_VMCStart:
.ab31	38		sec				sec 								; initialise first time round.
.ab32					_VMCNext:
.ab32	c8		iny				iny 								; pre-increment
.ab33	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ab35	f0 0c		beq $ab43			beq 	_VMCSuccess 				; successful.
.ab37	20 53 99	jsr $9953			jsr 	EncodeNumber 				; send it to the number-builder
.ab3a	90 03		bcc $ab3f			bcc 	_VMCFail 					; if failed, give up.
.ab3c	18		clc				clc 								; next time round, countinue
.ab3d	80 f3		bra $ab32			bra 	_VMCNext
.ab3f					_VMCFail:
.ab3f	68		pla				pla
.ab40					_VMCFail2:
.ab40	7a		ply				ply
.ab41	38		sec				sec
.ab42	60		rts				rts
.ab43					_VMCSuccess:
.ab43	a9 00		lda #$00			lda 	#0 							; construct final
.ab45	20 53 99	jsr $9953			jsr 	EncodeNumber
.ab48	68		pla				pla
.ab49	c9 2d		cmp #$2d			cmp 	#"-"
.ab4b	d0 03		bne $ab50			bne 	_VMCNotNegative
.ab4d	20 fb 9e	jsr $9efb			jsr		NSMNegate
.ab50					_VMCNotNegative:
.ab50	7a		ply				ply
.ab51	18		clc				clc
.ab52	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9d21					ChrUnary:
.9d21	fa		plx				plx 								; restore stack pos
.9d22	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger			; get value
.9d25	48		pha				pha
.9d26	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.9d29	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9d2b	20 dd af	jsr $afdd			jsr 	StringTempAllocate
.9d2e	68		pla				pla 								; write number to it
.9d2f	20 1b b0	jsr $b01b			jsr 	StringTempWrite
.9d32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9d33					SpcUnary:
.9d33	fa		plx				plx 								; restore stack pos
.9d34	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger			; get value
.9d37	5a		phy				phy
.9d38	48		pha				pha 								; save count
.9d39	20 dd af	jsr $afdd			jsr 	StringTempAllocate
.9d3c	7a		ply				ply 								; to do count in Y
.9d3d					_SpcLoop:
.9d3d	c0 00		cpy #$00			cpy 	#0
.9d3f	f0 08		beq $9d49			beq 	_SpcExit
.9d41	a9 20		lda #$20			lda 	#32
.9d43	20 1b b0	jsr $b01b			jsr 	StringTempWrite
.9d46	88		dey				dey
.9d47	80 f4		bra $9d3d			bra 	_SPCLoop
.9d49					_SpcExit:
.9d49	7a		ply				ply
.9d4a	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket
.9d4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9d4e					Unary_Str:
.9d4e	fa		plx				plx
.9d4f	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber  			; get number
.9d52	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 			; closing bracket
.9d55	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9d57	20 70 9d	jsr $9d70			jsr 	ConvertNumberToString 		; do the conversion.
.9d5a	a9 21		lda #$21			lda		#33 						; create buffer
.9d5c	20 dd af	jsr $afdd			jsr 	StringTempAllocate 			; allocate memory
.9d5f	da		phx				phx
.9d60	a2 00		ldx #$00			ldx 	#0
.9d62					_USCopy:
.9d62	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d65	20 1b b0	jsr $b01b			jsr 	StringTempWrite
.9d68	e8		inx				inx
.9d69	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9d6c	d0 f4		bne $9d62			bne 	_USCopy
.9d6e	fa		plx				plx
.9d6f	60		rts				rts
.9d70					ConvertNumberToString:
.9d70	5a		phy				phy 								; save code position
.9d71	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9d74	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9d77	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9d7a	10 0a		bpl $9d86			bpl 	_CNTSNotNegative
.9d7c	29 7f		and #$7f			and 	#$7F 						; make +ve
.9d7e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d81	a9 2d		lda #$2d			lda 	#"-"
.9d83	20 ec 9d	jsr $9dec			jsr 	WriteDecimalBuffer
.9d86					_CNTSNotNegative:
.9d86	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9d89	f0 15		beq $9da0			beq 	_CNTSNotFloat
.9d8b	e8		inx				inx 								; round up
.9d8c	a9 01		lda #$01			lda 	#1
.9d8e	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.9d91	ca		dex				dex
.9d92	bd 28 04	lda $0428,x			lda		NSExponent,x
.9d95	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9d98	a9 08		lda #$08			lda 	#NSTFloat
.9d9a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d9d	20 98 a8	jsr $a898			jsr 	FloatAdd
.9da0					_CNTSNotFloat:
.9da0	20 ce 9d	jsr $9dce			jsr 	MakePlusTwoString
.9da3	20 76 a9	jsr $a976			jsr 	FloatFractionalPart 		; get the fractional part
.9da6	20 3a aa	jsr $aa3a			jsr 	NSNormalise					; normalise , exit if zero
.9da9	f0 21		beq $9dcc			beq 	_CNTSExit
.9dab	a9 2e		lda #$2e			lda 	#"."
.9dad	20 ec 9d	jsr $9dec			jsr 	WriteDecimalBuffer 			; write decimal place
.9db0					_CNTSDecimal:
.9db0	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9db3	30 17		bmi $9dcc			bmi 	_CNTSExit
.9db5	e8		inx				inx 								; x 10.0
.9db6	a9 0a		lda #$0a			lda 	#10
.9db8	20 51 9f	jsr $9f51			jsr 	NSMSetByte
.9dbb	a9 08		lda #$08			lda 	#NSTFloat
.9dbd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dc0	ca		dex				dex
.9dc1	20 03 aa	jsr $aa03			jsr 	FloatMultiply
.9dc4	20 ce 9d	jsr $9dce			jsr 	MakePlusTwoString
.9dc7	20 76 a9	jsr $a976			jsr 	FloatFractionalPart 		; get the fractional part
.9dca	80 e4		bra $9db0			bra 	_CNTSDecimal 				; keep going.
.9dcc					_CNTSExit:
.9dcc	7a		ply				ply
.9dcd	60		rts				rts
.9dce					MakePlusTwoString:
.9dce	da		phx				phx
.9dcf	20 26 9f	jsr $9f26			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9dd2	e8		inx				inx 								; access it
.9dd3	e8		inx				inx
.9dd4	20 d9 a9	jsr $a9d9			jsr 	FloatIntegerPart 			; make it an integer
.9dd7	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9dd9	20 42 a8	jsr $a842			jsr 	ConvertInt32
.9ddc	a2 00		ldx #$00			ldx	 	#0
.9dde					_MPTSCopy:
.9dde	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9de1	20 ec 9d	jsr $9dec			jsr 	WriteDecimalBuffer
.9de4	e8		inx				inx
.9de5	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9de8	d0 f4		bne $9dde			bne 	_MPTSCopy
.9dea	fa		plx				plx
.9deb	60		rts				rts
.9dec					WriteDecimalBuffer:
.9dec	da		phx				phx
.9ded	ae 95 04	ldx $0495			ldx 	dbOffset
.9df0	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9df3	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9df6	ee 95 04	inc $0495			inc 	dbOffset
.9df9	fa		plx				plx
.9dfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9dfb					Unary_Left:
.9dfb	fa		plx				plx
.9dfc	18		clc				clc 								; only one parameter
.9dfd	20 72 9e	jsr $9e72			jsr 	SubstringInitial 			; set up.
.9e00	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9e03	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e06	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9e09	80 2c		bra $9e37			bra 	SubstringMain
.9e0b					Unary_Right:
.9e0b	fa		plx				plx
.9e0c	18		clc				clc 								; only one parameter
.9e0d	20 72 9e	jsr $9e72			jsr 	SubstringInitial 			; set up.
.9e10	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9e13	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9e16	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9e19	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9e1c	b0 02		bcs $9e20			bcs 	_URNotUnderflow
.9e1e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9e20					_URNotUnderFlow:
.9e20	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9e23	80 12		bra $9e37			bra 	SubStringMain
.9e25					Unary_Mid:
.9e25	fa		plx				plx
.9e26	38		sec				sec 								; two parameters
.9e27	20 72 9e	jsr $9e72			jsr 	SubstringInitial 			; set up.
.9e2a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9e2d	f0 05		beq $9e34			beq 	_UMError
.9e2f	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9e32	80 03		bra $9e37			bra 	SubStringMain
.9e34					_UMError:
.9e34	4c c6 ac	jmp $acc6			jmp 	ArgumentError
.9e37					SubStringMain:
.9e37	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9e3a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9e3d	b0 2d		bcs $9e6c			bcs 	_SSMNull 					; if so, return an empty string.
.9e3f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9e42	f0 28		beq $9e6c			beq 	_SSMNull 					; return empty string.
.9e44	18		clc				clc 								; add the offset +1 to the address and
.9e45	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9e48	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9e4b	85 36		sta $36				sta 	zTemp0
.9e4d	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9e50	69 00		adc #$00			adc 	#0
.9e52	85 37		sta $37				sta 	zTemp0+1
.9e54					_SSMNoCarry:
.9e54	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9e57	20 dd af	jsr $afdd			jsr 	StringTempAllocate 			; allocate that many characters
.9e5a	5a		phy				phy 								; save Y
.9e5b	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9e5d					_SSMCopy:
.9e5d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9e5f	f0 09		beq $9e6a			beq 	_SSMEString 				; no more to copy
.9e61	20 1b b0	jsr $b01b			jsr 	StringTempWrite 			; and write it out.
.9e64	c8		iny				iny
.9e65	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9e68	d0 f3		bne $9e5d			bne 	_SSMCopy
.9e6a					_SSMEString:
.9e6a	7a		ply				ply
.9e6b					_SSMExit:
.9e6b	60		rts				rts
.9e6c					_SSMNull:
.9e6c	a9 00		lda #$00			lda 	#0
.9e6e	20 dd af	jsr $afdd			jsr 	StringTempAllocate
.9e71	60		rts				rts
.9e72					SubstringInitial:
.9e72	da		phx				phx 								; save initial stack position
.9e73	08		php				php 								; save carry on stack indicating 2 parameters
.9e74	20 ae 9e	jsr $9eae			jsr 	EvaluateString 				; get a string
.9e77	5a		phy				phy 								; calculate length to exponent.
.9e78	a0 ff		ldy #$ff			ldy 	#$FF
.9e7a					_SIFindLength:
.9e7a	c8		iny				iny
.9e7b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e7d	d0 fb		bne $9e7a			bne 	_SIFindLength
.9e7f	98		tya				tya
.9e80	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9e83	7a		ply				ply
.9e84	e8		inx				inx
.9e85	20 d9 a6	jsr $a6d9			jsr 	CheckComma 					; comma next
.9e88	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger 		; get next parameter
.9e8b	28		plp				plp 								; is it the last parameter ?
.9e8c	90 07		bcc $9e95			bcc 	_SSIExit 					; if so, exit.
.9e8e	e8		inx				inx
.9e8f	20 d9 a6	jsr $a6d9			jsr 	CheckComma 					; comma next
.9e92	20 e7 9e	jsr $9ee7			jsr 	Evaluate8BitInteger 		; get last parameter
.9e95					_SSIExit:
.9e95	fa		plx				plx
.9e96	20 d1 a6	jsr $a6d1			jsr 	CheckRightBracket 			; check closing bracket
.9e99	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9e9a					EvaluateValue:
.9e9a	48		pha				pha
.9e9b	20 a0 97	jsr $97a0			jsr		EvaluateExpression 			; expression
.9e9e	20 b5 98	jsr $98b5			jsr 	Dereference					; derefernce it
.9ea1	68		pla				pla
.9ea2	60		rts				rts
.9ea3					EvaluateNumber:
.9ea3	20 9a 9e	jsr $9e9a			jsr 	EvaluateValue 				; get a value
.9ea6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9ea9	29 10		and #$10			and 	#NSBIsString
.9eab	d0 16		bne $9ec3			bne 	HelperTypeError
.9ead	60		rts				rts
.9eae					EvaluateString:
.9eae	20 9a 9e	jsr $9e9a			jsr 	EvaluateValue 				; get a value
.9eb1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9eb4	29 10		and #$10			and 	#NSBIsString
.9eb6	f0 0b		beq $9ec3			beq 	HelperTypeError
.9eb8					CopyAddressToTemp0:
.9eb8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9ebb	85 36		sta $36				sta 	zTemp0
.9ebd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ec0	85 37		sta $37				sta 	zTemp0+1
.9ec2	60		rts				rts
.9ec3					HelperTypeError:
.9ec3	4c c1 ac	jmp $acc1			jmp 	TypeError
.9ec6					EvaluateInteger:
.9ec6	20 a3 9e	jsr $9ea3			jsr 	EvaluateNumber
.9ec9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9ecc	d0 0a		bne $9ed8			bne 	HelperValueError 			; if not, it's a float.
.9ece	60		rts				rts
.9ecf					EvaluateUnsignedInteger:
.9ecf	20 c6 9e	jsr $9ec6			jsr 	EvaluateInteger 			; check integer is +ve
.9ed2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ed5	30 01		bmi $9ed8			bmi 	HelperValueError
.9ed7	60		rts				rts
.9ed8					HelperValueError:
.9ed8	4c c6 ac	jmp $acc6			jmp 	ArgumentError
.9edb					Evaluate16BitInteger:
.9edb	20 cf 9e	jsr $9ecf			jsr	 	EvaluateUnsignedInteger		; get integer
.9ede	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9ee1	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9ee4	d0 f2		bne $9ed8			bne 	HelperValueError
.9ee6	60		rts				rts
.9ee7					Evaluate8BitInteger:
.9ee7	20 cf 9e	jsr $9ecf			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9eea	d0 ec		bne $9ed8			bne 	HelperValueError
.9eec	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9eef	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9ef2	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9ef5	d0 e1		bne $9ed8			bne 	HelperValueError
.9ef7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9efa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ab53					Multiply8x8:
.ab53	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ab54	85 36		sta $36			  	sta 	zTemp0
.ab56	86 37		stx $37				stx 	zTemp0+1
.ab58	a9 00		lda #$00			lda 	#0
.ab5a	a2 08		ldx #$08			ldx 	#8
.ab5c					_M88Loop:
.ab5c	90 03		bcc $ab61			bcc 	_M88NoAdd
.ab5e	18		clc				clc
.ab5f	65 37		adc $37				adc 	zTemp0+1
.ab61					_M88NoAdd:
.ab61	6a		ror a				ror 	a
.ab62	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ab64	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ab65	d0 f5		bne $ab5c			bne 	_M88Loop
.ab67	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ab69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9efb					NSMNegate:
.9efb	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9efe	49 80		eor #$80			eor 	#NSBIsNegative
.9f00	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f03	60		rts				rts
.9f04					NSMNegateMantissa:
.9f04	38		sec				sec
.9f05	a9 00		lda #$00			lda 	#0
.9f07	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9f0a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f0d	a9 00		lda #$00			lda 	#0
.9f0f	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9f12	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f15	a9 00		lda #$00			lda 	#0
.9f17	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9f1a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f1d	a9 00		lda #$00			lda 	#0
.9f1f	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9f22	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f25	60		rts				rts
.9f26					NSMShiftUpTwo:
.9f26	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9f29	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f2c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f2f	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f32	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f35	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f38	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f3b	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f3e	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9f41	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f44	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f47	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f4a	60		rts				rts
.9f4b					NSMSetZeroMantissaOnly:
.9f4b	a9 00		lda #$00			lda 	#0
.9f4d	80 08		bra $9f57			bra 	NSMSetMantissa
.9f4f					NSMSetZero:
.9f4f	a9 00		lda #$00			lda 	#0
.9f51					NSMSetByte:
.9f51	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9f54	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9f57					NSMSetMantissa:
.9f57	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9f5a	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9f5d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9f60	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f63	60		rts				rts
.9f64					NSMShiftLeft:
.9f64	18		clc				clc
.9f65					NSMRotateLeft:
.9f65	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9f68	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9f6b	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9f6e	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9f71	60		rts				rts
.9f72					NSMShiftRight:
.9f72	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9f75	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9f78	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9f7b	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9f7e	60		rts				rts
.9f7f					NSMIsZero:
.9f7f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f82	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9f85	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9f88	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9f8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ab6a					Assemble_ora:
.ab6a	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab6d	01					.byte $01
.ab6e					Assemble_and:
.ab6e	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab71	21					.byte $21
.ab72					Assemble_eor:
.ab72	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab75	41					.byte $41
.ab76					Assemble_adc:
.ab76	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab79	61					.byte $61
.ab7a					Assemble_sta:
.ab7a	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab7d	81					.byte $81
.ab7e					Assemble_lda:
.ab7e	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab81	a1					.byte $a1
.ab82					Assemble_cmp:
.ab82	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab85	c1					.byte $c1
.ab86					Assemble_sbc:
.ab86	20 c1 86	jsr $86c1		jsr	AssembleGroup1
>ab89	e1					.byte $e1
.ab8a					Assemble_asl:
.ab8a	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>ab8d	02					.byte $02
>ab8e	75					.byte $75
.ab8f					Assemble_rol:
.ab8f	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>ab92	22					.byte $22
>ab93	75					.byte $75
.ab94					Assemble_lsr:
.ab94	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>ab97	42					.byte $42
>ab98	75					.byte $75
.ab99					Assemble_ror:
.ab99	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>ab9c	62					.byte $62
>ab9d	75					.byte $75
.ab9e					Assemble_stx:
.ab9e	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>aba1	82					.byte $82
>aba2	50					.byte $50
.aba3					Assemble_ldx:
.aba3	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>aba6	a2					.byte $a2
>aba7	d0					.byte $d0
.aba8					Assemble_dec:
.aba8	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abab	c2					.byte $c2
>abac	55					.byte $55
.abad					Assemble_inc:
.abad	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abb0	e2					.byte $e2
>abb1	55					.byte $55
.abb2					Assemble_stz:
.abb2	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abb5	60					.byte $60
>abb6	44					.byte $44
.abb7					Assemble_bit:
.abb7	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abba	20					.byte $20
>abbb	55					.byte $55
.abbc					Assemble_sty:
.abbc	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abbf	80					.byte $80
>abc0	54					.byte $54
.abc1					Assemble_ldy:
.abc1	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abc4	a0					.byte $a0
>abc5	d5					.byte $d5
.abc6					Assemble_cpy:
.abc6	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abc9	c0					.byte $c0
>abca	d4					.byte $d4
.abcb					Assemble_cpx:
.abcb	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abce	e0					.byte $e0
>abcf	d0					.byte $d0
.abd0					Assemble_tsb:
.abd0	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abd3	00					.byte $00
>abd4	50					.byte $50
.abd5					Assemble_trb:
.abd5	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abd8	10					.byte $10
>abd9	50					.byte $50
.abda					Assemble_jsr:
.abda	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abdd	14					.byte $14
>abde	10					.byte $10
.abdf					Assemble_jmp:
.abdf	20 c8 86	jsr $86c8		jsr	AssembleGroup2
>abe2	40					.byte $40
>abe3	10					.byte $10
.abe4					Assemble_bpl:
.abe4	20 19 87	jsr $8719		jsr	AssembleGroup3
>abe7	10					.byte $10
.abe8					Assemble_bmi:
.abe8	20 19 87	jsr $8719		jsr	AssembleGroup3
>abeb	30					.byte $30
.abec					Assemble_bvc:
.abec	20 19 87	jsr $8719		jsr	AssembleGroup3
>abef	50					.byte $50
.abf0					Assemble_bvs:
.abf0	20 19 87	jsr $8719		jsr	AssembleGroup3
>abf3	70					.byte $70
.abf4					Assemble_bcc:
.abf4	20 19 87	jsr $8719		jsr	AssembleGroup3
>abf7	90					.byte $90
.abf8					Assemble_bcs:
.abf8	20 19 87	jsr $8719		jsr	AssembleGroup3
>abfb	b0					.byte $b0
.abfc					Assemble_bne:
.abfc	20 19 87	jsr $8719		jsr	AssembleGroup3
>abff	d0					.byte $d0
.ac00					Assemble_beq:
.ac00	20 19 87	jsr $8719		jsr	AssembleGroup3
>ac03	f0					.byte $f0
.ac04					Assemble_bra:
.ac04	20 19 87	jsr $8719		jsr	AssembleGroup3
>ac07	80					.byte $80
.ac08					Assemble_brk:
.ac08	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac0b	00					.byte $00
.ac0c					Assemble_php:
.ac0c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac0f	08					.byte $08
.ac10					Assemble_clc:
.ac10	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac13	18					.byte $18
.ac14					Assemble_plp:
.ac14	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac17	28					.byte $28
.ac18					Assemble_sec:
.ac18	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac1b	38					.byte $38
.ac1c					Assemble_rti:
.ac1c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac1f	40					.byte $40
.ac20					Assemble_pha:
.ac20	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac23	48					.byte $48
.ac24					Assemble_cli:
.ac24	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac27	58					.byte $58
.ac28					Assemble_phy:
.ac28	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac2b	5a					.byte $5a
.ac2c					Assemble_rts:
.ac2c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac2f	60					.byte $60
.ac30					Assemble_pla:
.ac30	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac33	68					.byte $68
.ac34					Assemble_sei:
.ac34	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac37	78					.byte $78
.ac38					Assemble_ply:
.ac38	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac3b	7a					.byte $7a
.ac3c					Assemble_dey:
.ac3c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac3f	88					.byte $88
.ac40					Assemble_txa:
.ac40	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac43	8a					.byte $8a
.ac44					Assemble_tya:
.ac44	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac47	98					.byte $98
.ac48					Assemble_txs:
.ac48	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac4b	9a					.byte $9a
.ac4c					Assemble_tay:
.ac4c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac4f	a8					.byte $a8
.ac50					Assemble_tax:
.ac50	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac53	aa					.byte $aa
.ac54					Assemble_clv:
.ac54	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac57	b8					.byte $b8
.ac58					Assemble_tsx:
.ac58	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac5b	ba					.byte $ba
.ac5c					Assemble_iny:
.ac5c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac5f	c8					.byte $c8
.ac60					Assemble_dex:
.ac60	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac63	ca					.byte $ca
.ac64					Assemble_cld:
.ac64	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac67	d8					.byte $d8
.ac68					Assemble_phx:
.ac68	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac6b	da					.byte $da
.ac6c					Assemble_stp:
.ac6c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac6f	db					.byte $db
.ac70					Assemble_inx:
.ac70	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac73	e8					.byte $e8
.ac74					Assemble_nop:
.ac74	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac77	ea					.byte $ea
.ac78					Assemble_sed:
.ac78	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac7b	f8					.byte $f8
.ac7c					Assemble_plx:
.ac7c	20 4f 87	jsr $874f		jsr	AssembleGroup4
>ac7f	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ac80					DecimalScalarTable:
>ac80	66 66 66 66				.dword $66666666 ; 0.1
>ac84	de					.byte $de
>ac85	1f 85 eb 51				.dword $51eb851f ; 0.01
>ac89	db					.byte $db
>ac8a	4c 37 89 41				.dword $4189374c ; 0.001
>ac8e	d8					.byte $d8
>ac8f	ac 8b db 68				.dword $68db8bac ; 0.0001
>ac93	d4					.byte $d4
>ac94	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ac98	d1					.byte $d1
>ac99	83 de 1b 43				.dword $431bde83 ; 1e-06
>ac9d	ce					.byte $ce
>ac9e	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aca2	ca					.byte $ca
>aca3	89 3b e6 55				.dword $55e63b89 ; 1e-08
>aca7	c7					.byte $c7
>aca8	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>acac	c4					.byte $c4
>acad	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>acb1	c0					.byte $c0
>acb2	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>acb6	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.acb7					SyntaxError:
.acb7	a9 02		lda #$02		lda	#2
.acb9	4c 97 93	jmp $9397		jmp	ErrorHandler
.acbc					RangeError:
.acbc	a9 04		lda #$04		lda	#4
.acbe	4c 97 93	jmp $9397		jmp	ErrorHandler
.acc1					TypeError:
.acc1	a9 05		lda #$05		lda	#5
.acc3	4c 97 93	jmp $9397		jmp	ErrorHandler
.acc6					ArgumentError:
.acc6	a9 07		lda #$07		lda	#7
.acc8	4c 97 93	jmp $9397		jmp	ErrorHandler
.accb					NotDoneError:
.accb	a9 0c		lda #$0c		lda	#12
.accd	4c 97 93	jmp $9397		jmp	ErrorHandler
.acd0					ErrorText:
>acd0	42 72 65 61 6b 00			.text	"Break",0
>acd6	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>acde	72 72 6f 72 00
>ace3	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aceb	20 62 79 20 7a 65 72 6f 00
>acf4	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>acfc	61 6e 67 65 00
>ad01	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ad09	6d 61 74 63 68 00
>ad0f	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ad17	65 6d 6f 72 79 00
>ad1d	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ad25	61 72 67 75 6d 65 6e 74 00
>ad2e	53 74 6f 70 00				.text	"Stop",0
>ad33	53 74 72 69 6e 67 20 74			.text	"String too long",0
>ad3b	6f 6f 20 6c 6f 6e 67 00
>ad43	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>ad4b	6e 20 66 61 69 6c 65 64 00
>ad54	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ad5c	61 74 61 00
>ad60	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ad68	65 6e 74 65 64 00
>ad6e	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ad76	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ad82	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ad8a	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ad97	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ad9f	74 68 6f 75 74 20 52 65 70 65 61 74 00
>adac	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>adb4	68 6f 75 74 20 57 68 69 6c 65 00
>adbf	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>adc7	68 6f 75 74 20 46 6f 72 00
>add0	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>add8	61 63 6b 20 66 75 6c 6c 00
>ade1	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ade9	75 63 74 75 72 65 00
>adf0	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>adf8	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ae05	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ae0d	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ae1b	41 72 72 61 79 20 73 69			.text	"Array size",0
>ae23	7a 65 00
>ae26	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ae2e	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>ae36	42 75 69 6c 74 20 4d 6f			.text "Built Monday 10-Oct-2022. Build 1178."
>ae3e	6e 64 61 79 20 31 30 2d 4f 63 74 2d 32 30 32 32
>ae4e	2e 20 42 75 69 6c 64 20 31 31 37 38 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.ae5b					EXTPrintCharacter:
.ae5b	48		pha				pha
.ae5c	da		phx				phx
.ae5d	5a		phy				phy
.ae5e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.ae61	7a		ply				ply
.ae62	fa		plx				plx
.ae63	68		pla				pla
.ae64	60		rts				rts
.ae65					EXTInputSingleCharacter:
.ae65	da		phx				phx
.ae66	5a		phy				phy
.ae67					_EISCWait:
.ae67	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.ae6a	c9 00		cmp #$00			cmp 	#0
.ae6c	f0 f9		beq $ae67			beq 	_EISCWait
.ae6e	7a		ply				ply
.ae6f	fa		plx				plx
.ae70	60		rts				rts
.ae71					EXTInputLine:
.ae71	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ae73					_ILLoop:
.ae73	da		phx				phx 								; read character in
.ae74	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ae77	fa		plx				plx
.ae78	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ae7a	f0 12		beq $ae8e			beq 	_ILBackspace
.ae7c	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ae7e	f0 15		beq $ae95			beq 	_ILExit
.ae80	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ae82	90 ef		bcc $ae73			bcc 	_ILLoop
.ae84	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ae86	f0 eb		beq $ae73			beq 	_ILLoop
.ae88	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ae8b	e8		inx				inx
.ae8c	80 e5		bra $ae73			bra 	_ILLoop
.ae8e					_ILBackspace:
.ae8e	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ae90	f0 e1		beq $ae73			beq 	_ILLoop
.ae92	ca		dex				dex 								; back one.
.ae93	80 de		bra $ae73			bra 	_ILLoop
.ae95					_ILExit:
.ae95	20 5b ae	jsr $ae5b			jsr 	EXTPrintCharacter
.ae98	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ae9b	60		rts				rts
.ae9c					EXTBreakCheck:
.ae9c	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ae9f					MemoryDeleteLine:
.ae9f	20 be ae	jsr $aebe			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aea2	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.aea4	a8		tay				tay
.aea5					_MDDLLoop:
.aea5	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.aea7	92 30		sta ($30)			sta 	(codePtr)
.aea9	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.aeab	c5 3a		cmp $3a				cmp 	zTemp2
.aead	d0 07		bne $aeb6			bne 	_MDLDLNext
.aeaf	a5 31		lda $31				lda 	codePtr+1
.aeb1	c5 3b		cmp $3b				cmp 	zTemp2+1
.aeb3	d0 01		bne $aeb6			bne 	_MDLDLNext
.aeb5					_MDDLExit:
.aeb5	60		rts				rts
.aeb6					_MDLDLNext:
.aeb6	e6 30		inc $30				inc 	codePtr						; next byte
.aeb8	d0 eb		bne $aea5			bne 	_MDDLLoop
.aeba	e6 31		inc $31				inc 	codePtr+1
.aebc	80 e7		bra $aea5			bra 	_MDDLLoop
.aebe					IMemoryFindEnd:
.aebe	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aec0	85 3a		sta $3a				sta 	0+zTemp2
.aec2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aec4	85 3b		sta $3b				sta 	1+zTemp2
.aec6					_MDLFELoop:
.aec6	b2 3a		lda ($3a)			lda 	(zTemp2)
.aec8	f0 0b		beq $aed5			beq 	_MDLFEExit
.aeca	18		clc				clc
.aecb	65 3a		adc $3a				adc 	zTemp2
.aecd	85 3a		sta $3a				sta 	zTemp2
.aecf	90 f5		bcc $aec6			bcc 	_MDLFELoop
.aed1	e6 3b		inc $3b				inc 	zTemp2+1
.aed3	80 f1		bra $aec6			bra 	_MDLFELoop
.aed5					_MDLFEExit:
.aed5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.aed6					MemoryInsertLine:
.aed6	08		php				php
.aed7	20 be ae	jsr $aebe			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aeda	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.aedc	1a		inc a				inc 	a
.aedd	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.aedf	b0 36		bcs $af17			bcs 	_MDLIError
.aee1	28		plp				plp
.aee2	90 08		bcc $aeec			bcc 	_MDLIFound
.aee4	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.aee6	85 30		sta $30				sta 	codePtr
.aee8	a5 3b		lda $3b				lda 	zTemp2+1
.aeea	85 31		sta $31				sta 	codePtr+1
.aeec					_MDLIFound:
.aeec	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.aeef	a8		tay				tay
.aef0					_MDLIInsert:
.aef0	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.aef2	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aef4	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.aef6	c5 3a		cmp $3a				cmp 	zTemp2
.aef8	d0 06		bne $af00			bne 	_MDLINext
.aefa	a5 31		lda $31				lda 	codePtr+1
.aefc	c5 3b		cmp $3b				cmp 	zTemp2+1
.aefe	f0 0a		beq $af0a			beq 	_MDLIHaveSpace
.af00					_MDLINext:
.af00	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.af02	d0 02		bne $af06			bne 	_MDLINoBorrow
.af04	c6 3b		dec $3b				dec 	zTemp2+1
.af06					_MDLINoBorrow:
.af06	c6 3a		dec $3a				dec 	zTemp2
.af08	80 e6		bra $aef0			bra 	_MDLIInsert
.af0a					_MDLIHaveSpace:
.af0a	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.af0d	88		dey				dey 								; from offset-1 to 0
.af0e					_MDLICopy:
.af0e	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.af11	91 30		sta ($30),y			sta 	(codePtr),y
.af13	88		dey				dey
.af14	10 f8		bpl $af0e			bpl 	_MDLICopy
.af16	60		rts				rts
.af17					_MDLIError:
.af17	a9 06		lda #$06		lda	#6
.af19	4c 97 93	jmp $9397		jmp	ErrorHandler
.af1c					MDLAppendLine:
.af1c	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.af1e	85 36		sta $36				sta 	zTemp0
.af20	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af22	85 38		sta $38				sta 	0+zTemp1
.af24	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af26	85 39		sta $39				sta 	1+zTemp1
.af28	b2 38		lda ($38)			lda 	(zTemp1)
.af2a	d0 0a		bne $af36			bne 	_MDLANoInitialise
.af2c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af2e	8d 56 06	sta $0656			sta 	0+AppendPointer
.af31	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af33	8d 57 06	sta $0657			sta 	1+AppendPointer
.af36					_MDLANoInitialise:
.af36	18		clc				clc
.af37	ad 56 06	lda $0656			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.af3a	85 38		sta $38				sta 	zTemp1
.af3c	72 36		adc ($36)			adc 	(zTemp0)
.af3e	8d 56 06	sta $0656			sta 	AppendPointer
.af41	ad 57 06	lda $0657			lda 	AppendPointer+1
.af44	85 39		sta $39				sta 	zTemp1+1
.af46	69 00		adc #$00			adc 	#0
.af48	8d 57 06	sta $0657			sta 	AppendPointer+1
.af4b	a0 00		ldy #$00			ldy 	#0
.af4d					_MDLACopy:
.af4d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.af4f	91 38		sta ($38),y			sta 	(zTemp1),y
.af51	c8		iny				iny
.af52	98		tya				tya
.af53	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.af55	d0 f6		bne $af4d			bne 	_MDLACopy
.af57	a9 00		lda #$00			lda 	#0 							; end of program.
.af59	91 38		sta ($38),y			sta 	(zTemp1),y
.af5b	60		rts				rts
.0656					AppendPointer:
>0656							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9f8c					MemoryNew:
.9f8c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f8e	85 30		sta $30				sta 	codePtr
.9f90	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f92	85 31		sta $31				sta 	codePtr+1
.9f94	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9f96	92 30		sta ($30)			sta 	(codePtr)
.9f98	60		rts				rts
.9f99					MemoryInline:
.9f99	98		tya				tya 								; put address into stack,x
.9f9a	18		clc				clc
.9f9b	65 30		adc $30				adc 	codePtr
.9f9d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fa0	a5 31		lda $31				lda 	codePtr+1
.9fa2	69 00		adc #$00			adc 	#0
.9fa4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fa7	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9faa	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9fad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9fae					MemorySearch:
.9fae	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9fb0	86 37		stx $37				stx 	zTemp0+1
.9fb2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9fb4	85 30		sta $30				sta 	codePtr
.9fb6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9fb8	85 31		sta $31				sta 	codePtr+1
.9fba					_MTAXLoop:
.9fba	b2 30		lda ($30)			lda 	(codePtr)
.9fbc	18		clc				clc
.9fbd	f0 21		beq $9fe0			beq 	_MTAXExit 					; reached end, exit with CC.
.9fbf	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9fc1	b1 30		lda ($30),y			lda 	(codePtr),y
.9fc3	38		sec				sec
.9fc4	e5 36		sbc $36				sbc 	zTemp0
.9fc6	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9fc8	c8		iny				iny 								; do the MSB
.9fc9	b1 30		lda ($30),y			lda 	(codePtr),y
.9fcb	e5 37		sbc $37				sbc 	zTemp0+1
.9fcd	05 38		ora $38				ora 	zTemp1
.9fcf	f0 0f		beq $9fe0			beq 	_MTAXExit	 				; found
.9fd1	b0 0d		bcs $9fe0			bcs 	_MTAXExit 					; current < required exit
.9fd3	18		clc				clc
.9fd4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9fd6	65 30		adc $30				adc 	codePtr
.9fd8	85 30		sta $30				sta 	codePtr
.9fda	90 02		bcc $9fde			bcc 	_CREExit
.9fdc	e6 31		inc $31				inc 	codePtr+1
.9fde					_CREExit:
.9fde	80 da		bra $9fba			bra 	_MTAXLoop
.9fe0					_MTAXExit:
.9fe0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9fe1					StackPushByte:
.9fe1	48		pha				pha 								; save byte
.9fe2	a5 34		lda $34				lda 	BasicStack
.9fe4	d0 09		bne $9fef			bne 	_SPBNoBorrow
.9fe6	c6 35		dec $35				dec 	BasicStack+1
.9fe8	48		pha				pha
.9fe9	a5 35		lda $35				lda 	BasicStack+1
.9feb	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9fed	90 06		bcc $9ff5			bcc 	_SPBMemory
.9fef					_SPBNoBorrow:
.9fef	c6 34		dec $34				dec 	BasicStack
.9ff1	68		pla				pla 								; get back and write
.9ff2	92 34		sta ($34)			sta 	(BasicStack)
.9ff4	60		rts				rts
.9ff5					_SPBMemory:
.9ff5	a9 12		lda #$12		lda	#18
.9ff7	4c 97 93	jmp $9397		jmp	ErrorHandler
.9ffa					StackPopByte:
.9ffa	b2 34		lda ($34)			lda 	(BasicStack)
.9ffc	e6 34		inc $34				inc 	BasicStack
.9ffe	d0 02		bne $a002			bne 	_SPBNoCarry
.a000	e6 35		inc $35				inc 	BasicStack+1
.a002					_SPBNoCarry:
.a002	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a003					StackOpen:
.a003	48		pha				pha 								; save frame byte
.a004	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a006	0a		asl a				asl 	a 							; claim twice this for storage
.a007	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a009	38		sec				sec 								; so basically subtracting from
.a00a	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a00c	85 34		sta $34				sta 	basicStack
.a00e	b0 08		bcs $a018			bcs 	_SONoBorrow
.a010	c6 35		dec $35				dec 	basicStack+1
.a012	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a014	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a016	90 04		bcc $a01c			bcc 	_SOMemory
.a018					_SONoBorrow:
.a018	68		pla				pla 								; get marker back and write at TOS
.a019	92 34		sta ($34)			sta 	(basicStack)
.a01b	60		rts				rts
.a01c					_SOMemory:
.a01c	a9 12		lda #$12		lda	#18
.a01e	4c 97 93	jmp $9397		jmp	ErrorHandler
.a021					StackClose:
.a021	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a023	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a025	0a		asl a				asl 	a 							; claim twice this.
.a026	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a028	85 34		sta $34				sta 	basicStack
.a02a	90 02		bcc $a02e			bcc 	_SCExit
.a02c	e6 35		inc $35				inc 	basicStack+1
.a02e					_SCExit:
.a02e	60		rts				rts
.a02f					StackCheckFrame:
.a02f	48		pha				pha
.a030					_StackRemoveLocals:
.a030	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a032	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a034	b0 05		bcs $a03b			bcs 	_SCNoLocal
.a036	20 78 a6	jsr $a678			jsr 	LocalPopValue
.a039	80 f5		bra $a030			bra 	_StackRemoveLocals
.a03b					_SCNoLocal:
.a03b	68		pla				pla
.a03c	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a03e	29 f0		and #$f0			and 	#$F0 						; check type bits
.a040	d0 01		bne $a043			bne 	_SCFError 					; different, we have structures mixed up
.a042	60		rts				rts
.a043					_SCFError:
.a043	8a		txa				txa 								; report error X
.a044	4c 97 93	jmp $9397			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a047					STKSaveCodePosition:
.a047	5a		phy				phy
.a048	98		tya				tya 								; save Y
.a049	a0 05		ldy #$05			ldy 	#5
.a04b	91 34		sta ($34),y			sta 	(basicStack),y
.a04d	88		dey				dey 								; save Code Pointer
.a04e					_STKSaveLoop:
.a04e	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a051	91 34		sta ($34),y			sta 	(basicStack),y
.a053	88		dey				dey
.a054	d0 f8		bne $a04e			bne 	_STKSaveLoop
.a056	7a		ply				ply
.a057	60		rts				rts
.a058					STKLoadCodePosition:
.a058	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a05a					_STKLoadLoop:
.a05a	b1 34		lda ($34),y			lda 	(basicStack),y
.a05c	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a05f	c8		iny				iny
.a060	c0 05		cpy #$05			cpy 	#5
.a062	d0 f6		bne $a05a			bne 	_STKLoadLoop
.a064	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a066	a8		tay				tay
.a067	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a068					StackReset:
.a068	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a06a	85 34		sta $34				sta 	0+basicStack
.a06c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a06e	85 35		sta $35				sta 	1+basicStack
.a070	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a072	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a074	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.af5c					StringConcrete:
.af5c	5a		phy				phy 								; save position on stack
.af5d	20 5e 9c	jsr $9c5e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.af60	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.af63	85 38		sta $38				sta 	zTemp1
.af65	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.af68	85 39		sta $39				sta 	zTemp1+1
.af6a	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.af6c					_SALength:
.af6c	c8		iny				iny
.af6d	b1 38		lda ($38),y			lda 	(zTemp1),y
.af6f	d0 fb		bne $af6c			bne 	_SALength
.af71	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.af73	b0 3f		bcs $afb4			bcs 	_SALengthError
.af75	98		tya				tya 				 				; length of the new string
.af76	18		clc				clc
.af77	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.af79	90 02		bcc $af7d			bcc 	_SAHaveLength
.af7b	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.af7d					_SAHaveLength:
.af7d	48		pha				pha 								; save length.
.af7e	38		sec				sec
.af7f	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.af81	6d 8e 04	adc $048e			adc 	StringMemory
.af84	8d 8e 04	sta $048e			sta 	StringMemory
.af87	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.af89	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.af8c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.af8e	6d 8f 04	adc $048f			adc 	StringMemory+1
.af91	8d 8f 04	sta $048f			sta 	StringMemory+1
.af94	85 3b		sta $3b				sta 	zTemp2+1
.af96	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.af99	68		pla				pla 								; save length-3 (chars allowed) in first byte
.af9a	38		sec				sec
.af9b	e9 03		sbc #$03			sbc 	#3
.af9d	92 3a		sta ($3a)			sta 	(zTemp2)
.af9f	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.afa1	a0 01		ldy #$01			ldy 	#1
.afa3	91 3a		sta ($3a),y			sta 	(zTemp2),y
.afa5					_SACopyNewString:
.afa5	a0 00		ldy #$00			ldy 	#0
.afa7					_SACopyNSLoop:
.afa7	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.afa9	c8		iny				iny 								; write two on in string storage
.afaa	c8		iny				iny
.afab	91 3a		sta ($3a),y			sta 	(zTemp2),y
.afad	88		dey				dey 								; this makes it one one.
.afae	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.afb0	d0 f5		bne $afa7			bne 	_SACopyNSLoop
.afb2	7a		ply				ply
.afb3	60		rts				rts
.afb4					_SALengthError:
.afb4	a9 09		lda #$09		lda	#9
.afb6	4c 97 93	jmp $9397		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.afb9					StringSystemInitialise:
.afb9	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.afbb	8d 8e 04	sta $048e			sta 	0+StringMemory
.afbe	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.afc0	8d 8f 04	sta $048f			sta 	1+StringMemory
.afc3	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.afc6	60		rts				rts
.afc7					StringSpaceInitialise:
.afc7	20 5e 9c	jsr $9c5e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.afca	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.afcc	8d 90 04	sta $0490			sta 	StringInitialised
.afcf	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.afd2	8d 91 04	sta $0491			sta 	StringTempPointer
.afd5	ad 8f 04	lda $048f			lda 	StringMemory+1
.afd8	3a		dec a				dec 	a
.afd9	8d 92 04	sta $0492			sta 	StringTempPointer+1
.afdc	60		rts				rts
.afdd					StringTempAllocate:
.afdd	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.afdf	b0 35		bcs $b016			bcs 	_STALength
.afe1	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.afe4	30 05		bmi $afeb			bmi 	_STAAllocate
.afe6	48		pha				pha 								; save value to subtract.
.afe7	20 c7 af	jsr $afc7			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.afea	68		pla				pla 								; restore it
.afeb					_STAAllocate:
.afeb	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.afed	18		clc				clc  								; deliberate allows one more
.afee	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.aff1	8d 91 04	sta $0491			sta 	StringTempPointer
.aff4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.aff7	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.aff9	ad 92 04	lda $0492			lda 	StringTempPointer+1
.affc	69 ff		adc #$ff			adc 	#$FF
.affe	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b001	85 3d		sta $3d				sta 	zsTemp+1
.b003	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b006	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b009	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b00c	a9 10		lda #$10			lda 	#NSTString
.b00e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b011	a9 00		lda #$00			lda 	#0 							; clear the target string
.b013	92 3c		sta ($3c)			sta 	(zsTemp)
.b015	60		rts				rts
.b016					_STALength:
.b016	a9 09		lda #$09		lda	#9
.b018	4c 97 93	jmp $9397		jmp	ErrorHandler
.b01b					StringTempWrite:
.b01b	48		pha				pha
.b01c	92 3c		sta ($3c)			sta 	(zsTemp)
.b01e	e6 3c		inc $3c				inc 	zsTemp
.b020	d0 02		bne $b024			bne 	_STWNoCarry
.b022	e6 3d		inc $3d				inc 	zsTemp+1
.b024					_STWNoCarry:
.b024	a9 00		lda #$00			lda 	#0
.b026	92 3c		sta ($3c)			sta 	(zsTemp)
.b028	68		pla				pla
.b029	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a075					BackloadProgram:
.a075	a2 ff		ldx #$ff			ldx 	#$FF
.a077	20 9f a0	jsr $a09f			jsr 	BLReadByte
.a07a	30 1f		bmi $a09b			bmi 	_BPExit
.a07c					_BPCopy:
.a07c	e8		inx				inx  								; copy byte in
.a07d	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a080	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a083	20 9f a0	jsr $a09f			jsr 	BLReadByte 					; read next byte
.a086	30 0a		bmi $a092			bmi 	_BPEndLine 					; -ve = EOL
.a088	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a08a	d0 02		bne $a08e			bne 	_BPNotTab
.a08c	a9 20		lda #$20			lda 	#' '
.a08e					_BPNotTab:
.a08e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a090	b0 ea		bcs $a07c			bcs 	_BPCopy
.a092					_BPEndLine:
.a092	20 c8 a3	jsr $a3c8			jsr 	TokeniseLine 				; tokenise the line.
.a095	38		sec				sec 								; append not insert
.a096	20 d6 ae	jsr $aed6			jsr 	MemoryInsertLine 			; append to current program
.a099	80 da		bra $a075			bra 	BackloadProgram
.a09b					_BPExit:
.a09b	20 c7 89	jsr $89c7			jsr 	ClearCommand 				; clear variables etc.
.a09e	60		rts				rts
.a09f					BLReadByte:
.a09f					_BLLoad:
.a09f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a0a2	ee a0 a0	inc $a0a0			inc 	_BLLoad+1
.a0a5	d0 03		bne $a0aa			bne 	_BLNoCarry
.a0a7	ee a1 a0	inc $a0a1			inc 	_BLLoad+2
.a0aa					_BLNoCarry:
.a0aa	c9 00		cmp #$00			cmp 	#0
.a0ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a0ad					TokeniseSearchTable:
.a0ad	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a0af	85 36		sta $36				sta 	zTemp0
.a0b1	a0 00		ldy #$00			ldy 	#0
.a0b3	a9 80		lda #$80			lda 	#$80 						; token #
.a0b5	85 38		sta $38				sta 	zTemp1
.a0b7					_TSTLoop:
.a0b7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a0b9	30 49		bmi $a104			bmi 	_TSTFail 					; -ve = end of table
.a0bb	f0 2e		beq $a0eb			beq 	_TSTNext 					; zero, check next it's a dummy
.a0bd	c8		iny				iny 								; get the hash
.a0be	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0c0	88		dey				dey
.a0c1	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a0c4	d0 25		bne $a0eb			bne 	_TSTNext
.a0c6	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a0c9	38		sec				sec
.a0ca	ed 80 04	sbc $0480			sbc 	identStart
.a0cd	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a0cf	d0 1a		bne $a0eb			bne 	_TSTNext
.a0d1	5a		phy				phy 								; save Y , we might fail
.a0d2	c8		iny				iny 								; point to text
.a0d3	c8		iny				iny
.a0d4	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a0d7					_TSTCompareName:
.a0d7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a0da	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a0dc	d0 0c		bne $a0ea			bne 	_TSTNextPullY 				; fail, pullY and do next
.a0de	e8		inx				inx
.a0df	c8		iny				iny
.a0e0	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a0e3	d0 f2		bne $a0d7			bne 	_TSTCompareName
.a0e5	7a		ply				ply 								; throw Y
.a0e6	a5 38		lda $38				lda 	zTemp1 						; get token #
.a0e8	38		sec				sec 								; return with CS = passed.
.a0e9	60		rts				rts
.a0ea					_TSTNextPullY:
.a0ea	7a		ply				ply 								; restore current, fall through.
.a0eb					_TSTNext:
.a0eb	e6 38		inc $38				inc 	zTemp1 						; token counter
.a0ed	98		tya				tya
.a0ee	18		clc				clc
.a0ef	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a0f1	1a		inc a				inc 	a 							; +1
.a0f2	1a		inc a				inc 	a 							; +2
.a0f3	a8		tay				tay
.a0f4	10 c1		bpl $a0b7			bpl 	_TSTLoop 					; if Y < $80 loop back
.a0f6	98		tya				tya 								; add Y to zTemp0 and reset Y
.a0f7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a0f9	18		clc				clc  								; but have tables > 255 bytes
.a0fa	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a0fc	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a0fe	90 b7		bcc $a0b7			bcc 	_TSTLoop
.a100	e6 37		inc $37				inc 	zTemp0+1
.a102	80 b3		bra $a0b7			bra 	_TSTLoop
.a104					_TSTFail:
.a104	18		clc				clc
.a105	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a106					KeywordSet0:
>a106	00 65					.text	0,$65,""               ; $80 !0:EOF
>a108	00 58					.text	0,$58,""               ; $81 !1:SH1
>a10a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a10c	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a112	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a11a	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a120	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a127	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a12e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a135	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a13b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a143	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a14b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a151	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a158	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a15e	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a166	28
>a167	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a16f	28
>a170	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a176	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a17c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a182	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a189	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a18f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a195	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a19a	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a19e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a1a4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a1ac	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a1b3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a1ba	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a1c2	43
>a1c3	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a1c9	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a1cf	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a1d6	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a1dc	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a1e2	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a1e7	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a1ed	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a1f2	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a1fa	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a200	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a207	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a20d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a212	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a219	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a220	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a226	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a22b	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a233	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a237	ff					.text	$FF
.a238					KeywordSet1:
>a238	00 65					.text	0,$65,""               ; $80 !0:EOF
>a23a	00 58					.text	0,$58,""               ; $81 !1:SH1
>a23c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a23e	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a246	4c 45
>a248	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a250	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a257	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a25c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a262	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a267	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a26f	45
>a270	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a275	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a27b	ff					.text	$FF
.a27c					KeywordSet2:
>a27c	00 65					.text	0,$65,""               ; $80 !0:EOF
>a27e	00 58					.text	0,$58,""               ; $81 !1:SH1
>a280	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a282	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a287	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a28c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a291	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a296	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a29b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a2a0	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a2a5	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a2aa	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a2af	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a2b4	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a2b9	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a2be	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a2c3	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a2c8	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a2cd	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a2d2	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a2d7	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a2dc	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a2e1	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a2e6	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a2eb	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a2f0	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a2f5	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a2fa	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a2ff	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a304	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a309	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a30e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a313	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a318	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a31d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a322	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a327	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a32c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a331	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a336	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a33b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a340	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a345	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a34a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a34f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a354	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a359	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a35e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a363	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a368	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a36d	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a372	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a377	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a37c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a381	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a386	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a38b	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a390	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a395	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a39a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a39f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a3a4	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a3a9	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a3ae	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a3b3	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a3b8	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a3bd	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a3c2	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a3c7	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a3c8					TokeniseLine:
.a3c8	20 50 a5	jsr $a550			jsr 	FixLineBufferCase 			; fix line case
.a3cb	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a3cd	8d a6 04	sta $04a6			sta 	tokenOffset
.a3d0	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a3d3	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a3d6	a2 ff		ldx #$ff			ldx 	#$FF
.a3d8					_TKFindFirst:
.a3d8	e8		inx				inx
.a3d9	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a3dc	f0 79		beq $a457			beq 	_TKExit
.a3de	c9 20		cmp #$20			cmp 	#' '
.a3e0	90 f6		bcc $a3d8			bcc 	_TKFindFirst
.a3e2	c9 30		cmp #$30			cmp 	#'0'
.a3e4	90 07		bcc $a3ed			bcc 	_TKNoLineNumber
.a3e6	c9 3a		cmp #$3a			cmp 	#'9'+1
.a3e8	b0 03		bcs $a3ed			bcs 	_TKNoLineNumber
.a3ea	20 7a a5	jsr $a57a			jsr 	TokeniseExtractLineNumber
.a3ed					_TKNoLineNumber:
.a3ed					_TKTokeniseLoop:
.a3ed	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a3f0	f0 65		beq $a457			beq 	_TKExit
.a3f2	e8		inx				inx
.a3f3	c9 20		cmp #$20			cmp 	#' '
.a3f5	f0 f6		beq $a3ed			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a3f7	ca		dex				dex 								; undo last get, A contains character, X is position.
.a3f8	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a3fa	f0 61		beq $a45d			beq 	_TKTokeniseIdentifier
.a3fc	c9 41		cmp #$41			cmp 	#'A'
.a3fe	90 04		bcc $a404			bcc 	_TKTokenisePunctuation
.a400	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a402	90 59		bcc $a45d			bcc 	_TKTokeniseIdentifier
.a404					_TKTokenisePunctuation:
.a404	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a406	f0 27		beq $a42f			beq 	_TKString
.a408	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a40a	f0 28		beq $a434			beq 	_TKHexConstant
.a40c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a40e	f0 29		beq $a439			beq 	_TKCheckDouble
.a410	c9 3e		cmp #$3e			cmp 	#'>'
.a412	f0 25		beq $a439			beq 	_TKCheckDouble
.a414					_TKStandardPunctuation:
.a414	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a417	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a419	90 0e		bcc $a429			bcc 	_TKNoShift
.a41b	48		pha				pha 								; save
.a41c	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a41e	85 36		sta $36				sta 	zTemp0
.a420	68		pla				pla
.a421	29 20		and #$20			and 	#32 						; bit 5
.a423	4a		lsr a				lsr 	a 							; shift into bit 3
.a424	4a		lsr a				lsr 	a
.a425	05 36		ora $36				ora 	zTemp0
.a427	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a429					_TKNoShift:
.a429	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte 			; write the punctuation character
.a42c	e8		inx				inx 								; consume the character
.a42d	80 be		bra $a3ed			bra 	_TKTokeniseLoop 			; and loop round again.
.a42f					_TKString:
.a42f	20 df a4	jsr $a4df			jsr 	TokeniseString
.a432	80 b9		bra $a3ed			bra 	_TKTokeniseLoop
.a434					_TKHexConstant:
.a434	20 1a a5	jsr $a51a			jsr 	TokeniseHexConstant
.a437	80 b4		bra $a3ed			bra 	_TKTokeniseLoop
.a439					_TKCheckDouble:
.a439	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a43c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a43e	90 d4		bcc $a414			bcc 	_TKStandardPunctuation
.a440	c9 3f		cmp #$3f			cmp 	#'>'+1
.a442	b0 d0		bcs $a414			bcs 	_TKStandardPunctuation
.a444	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a447	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a449	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a44a	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a44d	38		sec				sec
.a44e	e9 3c		sbc #$3c			sbc 	#'<'
.a450	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a453	e8		inx				inx 								; consume both
.a454	e8		inx				inx
.a455	80 96		bra $a3ed			bra 	_TKTokeniseLoop
.a457	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a459	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a45c	60		rts				rts
.a45d					_TKTokeniseIdentifier:
.a45d	8e 80 04	stx $0480			stx 	identStart 					; save start
.a460	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a463					_TKCheckLoop:
.a463	e8		inx				inx 								; look at next, we know first is identifier.
.a464	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a467	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a469	f0 f8		beq $a463			beq 	_TKCheckLoop
.a46b	c9 30		cmp #$30			cmp	 	#"0"
.a46d	90 0c		bcc $a47b			bcc 	_TKEndIdentifier
.a46f	c9 3a		cmp #$3a			cmp 	#"9"+1
.a471	90 f0		bcc $a463			bcc 	_TKCheckLoop
.a473	c9 41		cmp #$41			cmp	 	#"A"
.a475	90 04		bcc $a47b			bcc 	_TKEndIdentifier
.a477	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a479	90 e8		bcc $a463			bcc 	_TKCheckLoop
.a47b					_TKEndIdentifier:
.a47b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a47e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a480	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a482	f0 06		beq $a48a			beq 	_TKHasTypeCharacter
.a484	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a486	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a488	d0 07		bne $a491			bne 	_TKNoTypeCharacter
.a48a					_TKHasTypeCharacter:
.a48a	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a48d	e8		inx				inx 								; read next
.a48e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a491					_TKNoTypeCharacter:
.a491	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a493	d0 09		bne $a49e			bne 	_TKNoArray
.a495	e8		inx				inx 								; skip the (
.a496	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a499	09 04		ora #$04			ora 	#$04
.a49b	8d 84 04	sta $0484			sta 	identTypeByte
.a49e					_TKNoArray:
.a49e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a4a1	20 3b a5	jsr $a53b			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a4a4	a0 a1		ldy #$a1			ldy 	#(KeywordSet0) >> 8
.a4a6	a9 06		lda #$06			lda 	#(KeywordSet0) & $FF
.a4a8	20 ad a0	jsr $a0ad			jsr 	TokeniseSearchTable
.a4ab	a2 00		ldx #$00			ldx 	#0
.a4ad	b0 1f		bcs $a4ce			bcs 	_TKFoundToken
.a4af	a0 a2		ldy #$a2			ldy 	#(KeywordSet1) >> 8
.a4b1	a9 38		lda #$38			lda 	#(KeywordSet1) & $FF
.a4b3	20 ad a0	jsr $a0ad			jsr 	TokeniseSearchTable
.a4b6	a2 81		ldx #$81			ldx 	#$81
.a4b8	b0 14		bcs $a4ce			bcs 	_TKFoundToken
.a4ba	a0 a2		ldy #$a2			ldy 	#(KeywordSet2) >> 8
.a4bc	a9 7c		lda #$7c			lda 	#(KeywordSet2) & $FF
.a4be	20 ad a0	jsr $a0ad			jsr 	TokeniseSearchTable
.a4c1	a2 82		ldx #$82			ldx 	#$82
.a4c3	b0 09		bcs $a4ce			bcs 	_TKFoundToken
.a4c5	20 cb a5	jsr $a5cb			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a4c8	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a4cb	4c ed a3	jmp $a3ed			jmp 	_TKTokeniseLoop 			; and go round again.
.a4ce					_TKFoundToken:
.a4ce	48		pha				pha 								; save token
.a4cf	8a		txa				txa 								; shift in X, is there one ?
.a4d0	f0 03		beq $a4d5			beq 	_TKNoTShift
.a4d2	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte 			; if so, write it out
.a4d5					_TKNoTShift:
.a4d5	68		pla				pla 								; restore and write token
.a4d6	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a4d9	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a4dc	4c ed a3	jmp $a3ed			jmp 	_TKTokeniseLoop 			; and go round again.
.a4df					TokeniseString:
.a4df	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a4e1	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a4e4	e8		inx				inx									; start of quoted string.
.a4e5	da		phx				phx 								; push start of string on top
.a4e6	ca		dex				dex
.a4e7					_TSFindEnd:
.a4e7	e8		inx				inx
.a4e8	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a4eb	f0 04		beq $a4f1			beq 	_TSEndOfString
.a4ed	c9 22		cmp #$22			cmp 	#'"'
.a4ef	d0 f6		bne $a4e7			bne 	_TSFindEnd
.a4f1					_TSEndOfString:
.a4f1	7a		ply				ply  								; so now Y is first character, X is character after end.
.a4f2	48		pha				pha 								; save terminating character
.a4f3	20 fb a4	jsr $a4fb			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a4f6	68		pla				pla 								; terminating character
.a4f7	f0 01		beq $a4fa			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a4f9	e8		inx				inx
.a4fa					_TSNotQuote:
.a4fa	60		rts				rts
.a4fb					TOWriteBlockXY:
.a4fb	86 36		stx $36				stx 	zTemp0 						; write end character
.a4fd	98		tya				tya
.a4fe	49 ff		eor #$ff			eor 	#$FF
.a500	38		sec				sec
.a501	65 36		adc $36				adc 	zTemp0
.a503	1a		inc a				inc 	a 							; one extra for NULL
.a504	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a507					_TOBlockLoop:
.a507	c4 36		cpy $36				cpy 	zTemp0
.a509	f0 09		beq $a514			beq 	_TOBlockExit
.a50b	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a50e	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a511	c8		iny				iny
.a512	80 f3		bra $a507			bra 	_TOBlockLoop
.a514					_TOBlockExit:
.a514	a9 00		lda #$00			lda 	#0
.a516	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a519	60		rts				rts
.a51a					TokeniseHexConstant:
.a51a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a51c	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a51f	e8		inx				inx									; start of quoted string.
.a520	da		phx				phx 								; push start of constant on top
.a521	ca		dex				dex
.a522					_THFindLoop:
.a522	e8		inx				inx
.a523	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a526	c9 30		cmp #$30			cmp 	#"0"
.a528	90 0c		bcc $a536			bcc 	_THFoundEnd
.a52a	c9 3a		cmp #$3a			cmp 	#"9"+1
.a52c	90 f4		bcc $a522			bcc 	_THFindLoop
.a52e	c9 41		cmp #$41			cmp 	#"A"
.a530	90 04		bcc $a536			bcc 	_THFoundEnd
.a532	c9 47		cmp #$47			cmp 	#"F"+1
.a534	90 ec		bcc $a522			bcc 	_THFindLoop
.a536					_THFoundEnd:
.a536	7a		ply				ply 								; restore start
.a537	20 fb a4	jsr $a4fb			jsr 	TOWriteBlockXY 				; output the block
.a53a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a53b					TokeniseCalculateHash:
.a53b	da		phx				phx
.a53c	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a53f	a9 00		lda #$00			lda 	#0
.a541					_TCHLoop:
.a541	18		clc				clc
.a542	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a545	e8		inx				inx
.a546	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a549	d0 f6		bne $a541			bne 	_TCHLoop
.a54b	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a54e	fa		plx				plx
.a54f	60		rts				rts
.a550					FixLineBufferCase:
.a550	a2 00		ldx #$00			ldx 	#0
.a552					_FLBCLoop:
.a552	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a555	f0 22		beq $a579			beq 	_FLBCExit 					; end of string.
.a557	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a559	f0 11		beq $a56c			beq 	_FLBCInQuotes
.a55b	e8		inx				inx
.a55c	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a55e	90 f2		bcc $a552			bcc 	_FLBCLoop
.a560	c9 7b		cmp #$7b			cmp 	#'z'+1
.a562	b0 ee		bcs $a552			bcs 	_FLBCLoop
.a564	38		sec				sec 								; make U/C
.a565	e9 20		sbc #$20			sbc 	#32
.a567	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a56a	80 e6		bra $a552			bra 	_FLBCLoop
.a56c					_FLBCInQuotes:
.a56c	e8		inx				inx 								; advance
.a56d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a570	f0 07		beq $a579			beq 	_FLBCExit 					; exit on EOS
.a572	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a574	d0 f6		bne $a56c			bne 	_FLBCInQuotes
.a576	e8		inx				inx 								; skip over it
.a577	80 d9		bra $a552			bra 	_FLBCLoop
.a579					_FLBCExit:
.a579	60		rts				rts
.a57a					TokeniseExtractLineNumber:
.a57a	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a57d	48		pha				pha
.a57e	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a581	48		pha				pha
.a582	20 b8 a5	jsr $a5b8			jsr 	_TELNTimes2 				; line # x 4
.a585	20 b8 a5	jsr $a5b8			jsr 	_TELNTimes2 				; line # x 2
.a588	18		clc				clc 								; add stacked value
.a589	68		pla				pla
.a58a	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a58d	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a590	68		pla				pla
.a591	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a594	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a597	20 b8 a5	jsr $a5b8			jsr 	_TELNTimes2 				; line # x 10
.a59a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a59d	e8		inx				inx
.a59e	29 0f		and #$0f			and 	#15 						; add to line #
.a5a0	18		clc				clc
.a5a1	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a5a4	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a5a7	90 03		bcc $a5ac			bcc 	_TLENNoCarry
.a5a9	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a5ac					_TLENNoCarry:
.a5ac	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a5af	c9 30		cmp #$30			cmp 	#'0'
.a5b1	90 04		bcc $a5b7			bcc 	_TLENExit
.a5b3	c9 3a		cmp #$3a			cmp 	#'9'+1
.a5b5	90 c3		bcc $a57a			bcc 	TokeniseExtractLineNumber
.a5b7					_TLENExit:
.a5b7	60		rts				rts
.a5b8					_TELNTimes2:
.a5b8	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a5bb	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a5be	60		rts				rts
.a5bf					TokeniseWriteByte:
.a5bf	da		phx				phx
.a5c0	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a5c3	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a5c6	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a5c9	fa		plx				plx
.a5ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a5cb					CheckCreateVariableRecord:
.a5cb	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a5cd	85 36		sta $36				sta 	0+zTemp0
.a5cf	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a5d1	85 37		sta $37				sta 	1+zTemp0
.a5d3					_CCVSearch:
.a5d3	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a5d5	f0 2c		beq $a603			beq 	_CCVFail
.a5d7	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a5d9	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a5db	cd 83 04	cmp $0483			cmp 	identHash
.a5de	d0 16		bne $a5f6			bne 	_CCVNext
.a5e0	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a5e2	ae 80 04	ldx $0480			ldx 	identStart
.a5e5					_CCVCompare:
.a5e5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a5e8	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a5ea	e8		inx				inx 								; advance pointers
.a5eb	c8		iny				iny
.a5ec	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a5ed	d0 07		bne $a5f6			bne 	_CCVNext  					; didn't match go to next.
.a5ef	90 f4		bcc $a5e5			bcc 	_CCVCompare 				; not finished yet.
.a5f1	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a5f4	f0 41		beq $a637			beq 	_CCVFound 					; yes, we were successful
.a5f6					_CCVNext:
.a5f6	18		clc				clc
.a5f7	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a5f9	65 36		adc $36				adc 	zTemp0
.a5fb	85 36		sta $36				sta 	zTemp0
.a5fd	90 d4		bcc $a5d3			bcc 	_CCVSearch
.a5ff	e6 37		inc $37				inc 	zTemp0+1
.a601	80 d0		bra $a5d3			bra 	_CCVSearch
.a603					_CCVFail:
.a603	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a605	ad 83 04	lda $0483			lda 	identHash
.a608	91 36		sta ($36),y			sta 	(zTemp0),y
.a60a	c8		iny				iny 								; offset 2 is the type byte
.a60b	ad 84 04	lda $0484			lda 	identTypeByte
.a60e	91 36		sta ($36),y			sta 	(zTemp0),y
.a610	c8		iny				iny
.a611					_CCVData:
.a611	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a613	91 36		sta ($36),y			sta 	(zTemp0),y
.a615	c8		iny				iny
.a616	c0 08		cpy #$08			cpy 	#8
.a618	90 f7		bcc $a611			bcc 	_CCVData
.a61a	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a61d					_CCVCopyName:
.a61d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a620	91 36		sta ($36),y			sta 	(zTemp0),y
.a622	e8		inx				inx
.a623	c8		iny				iny
.a624	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a627	d0 f4		bne $a61d			bne 	_CCVCopyName
.a629	98		tya				tya 								; patch offset
.a62a	92 36		sta ($36)			sta 	(zTemp0)
.a62c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a62e	91 36		sta ($36),y			sta 	(zTemp0),y
.a630	88		dey				dey
.a631	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a633	09 80		ora #$80			ora 	#$80
.a635	91 36		sta ($36),y			sta 	(zTemp0),y
.a637					_CCVFound:
.a637	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a639	38		sec				sec
.a63a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a63c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a63e	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a641	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a643	20 bf a5	jsr $a5bf			jsr 	TokeniseWriteByte
.a646	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
