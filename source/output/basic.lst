
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 16:45:40 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_CALL                             = $a6; $a6 CALL
=$a7					KWD_CIRCLE                           = $a7; $a7 CIRCLE
=$a8					KWD_CLS                              = $a8; $a8 CLS
=$a9					KWD_COLOR                            = $a9; $a9 COLOR
=$aa					KWD_COLOUR                           = $aa; $aa COLOUR
=$ab					KWD_DATA                             = $ab; $ab DATA
=$ac					KWD_DIM                              = $ac; $ac DIM
=$ad					KWD_DOWNTO                           = $ad; $ad DOWNTO
=$ae					KWD_ELSE                             = $ae; $ae ELSE
=$af					KWD_GFX                              = $af; $af GFX
=$b0					KWD_GOSUB                            = $b0; $b0 GOSUB
=$b1					KWD_GOTO                             = $b1; $b1 GOTO
=$b2					KWD_HERE                             = $b2; $b2 HERE
=$b3					KWD_HIDE                             = $b3; $b3 HIDE
=$b4					KWD_LET                              = $b4; $b4 LET
=$b5					KWD_LINE                             = $b5; $b5 LINE
=$b6					KWD_LOCAL                            = $b6; $b6 LOCAL
=$b7					KWD_OUTLINE                          = $b7; $b7 OUTLINE
=$b8					KWD_PRINT                            = $b8; $b8 PRINT
=$b9					KWD_READ                             = $b9; $b9 READ
=$ba					KWD_RECT                             = $ba; $ba RECT
=$bb					KWD_REM                              = $bb; $bb REM
=$bc					KWD_RETURN                           = $bc; $bc RETURN
=$bd					KWD_SCALE                            = $bd; $bd SCALE
=$be					KWD_SHOW                             = $be; $be SHOW
=$bf					KWD_SOLID                            = $bf; $bf SOLID
=$c0					KWD_SPRITE                           = $c0; $c0 SPRITE
=$c1					KWD_TEXT                             = $c1; $c1 TEXT
=$c2					KWD_TO                               = $c2; $c2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 2a 96	jsr $962a			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 42 88	jsr $8842			jsr 	RunDemos
.8013	20 e5 8f	jsr $8fe5			jsr 	NewCommand 					; erase current program
.8016	20 af a2	jsr $a2af			jsr 	BackloadProgram
.8019	4c 41 8b	jmp $8b41			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1481."
>8064	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8074	32 2e 20 42 75 69 6c 64 20 31 34 38 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxSpritePage:
>063a							.fill 	1
.063b					gxHeight:
>063b							.fill 	1
.063c					gxMode:
>063c							.fill 	1
.063d					gxColour:
>063d							.fill 	1
.063e					gxEORValue:
>063e							.fill 	1
.063f					gxANDValue:
>063f							.fill 	1
.0640					gxOriginalLUTValue:
>0640							.fill 	1
.0641					gxOriginalMMUSetting:
>0641							.fill 	1
.0642					gsOffset:
>0642							.fill 	1
.0643					GSCurrentSprite:
>0643							.fill 	2
.0645					GXSpriteOffsetBase:
>0645							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GXGraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gxzTemp0+1
.808d	80 3d		bra $80cc			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	f0 07		beq $80b8			beq 	_GDXOkay 					; check X range
.80b1	ad 29 06	lda $0629			lda 	gxCurrentX
.80b4	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b6	b0 1e		bcs $80d6			bcs 	_GDError
.80b8					_GDXOkay:
.80b8	ad 2b 06	lda $062b			lda 	gxCurrentY
.80bb	cd 3b 06	cmp $063b			cmp 	gxHeight
.80be	b0 16		bcs $80d6			bcs 	_GDError
.80c0	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c2					_GDCopy2:
.80c2	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c5	9d 31 06	sta $0631,x			sta 	gxX0,x
.80c8	ca		dex				dex
.80c9	10 f7		bpl $80c2			bpl 	_GDCopy2
.80cb	68		pla				pla 								; get command back
.80cc					_GDExecuteA:
.80cc	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80ce	c9 32		cmp #$32			cmp 	#GRFirstFreeCode*2 			; bad ?
.80d0	b0 05		bcs $80d7			bcs 	_GDError2
.80d2	aa		tax				tax
.80d3	7c dc 80	jmp ($80dc,x)			jmp 	(GRVectorTable,x)
.80d6					_GDError:
.80d6	68		pla				pla 								; throw command
.80d7					_GDError2:
.80d7	38		sec				sec
.80d8	60		rts				rts
.80d9					GXMove:
.80d9	18		clc				clc
.80da	60		rts				rts
.80db					GRUndefined:
>80db	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=25					GRFirstFreeCode = 25
.80dc					GRVectorTable:
>80dc	9b 82					.word	GXControlBitmap          ; $00 BITMAPCTL
>80de	de 82					.word	GXControlSprite          ; $01 SPRITECTL
>80e0	54 82					.word	GXClearBitmap            ; $02 Clear
>80e2	50 84					.word	GXSetColourMode          ; $03 Colour
>80e4	06 86					.word	GXFontHandler            ; $04 DrawFont
>80e6	4e 86					.word	GXSpriteHandler          ; $05 DrawSprite
>80e8	b6 86					.word	GXSelect                 ; $06 SPRUSE
>80ea	e6 86					.word	GXSelectImage            ; $07 SPRIMG
>80ec	db 80					.word	GRUndefined              ; $08
>80ee	db 80					.word	GRUndefined              ; $09
>80f0	db 80					.word	GRUndefined              ; $0a
>80f2	db 80					.word	GRUndefined              ; $0b
>80f4	db 80					.word	GRUndefined              ; $0c
>80f6	db 80					.word	GRUndefined              ; $0d
>80f8	db 80					.word	GRUndefined              ; $0e
>80fa	db 80					.word	GRUndefined              ; $0f
>80fc	d9 80					.word	GXMove                   ; $10 Move
>80fe	25 83					.word	GXLine                   ; $11 Line
>8100	99 84					.word	GXFrameRectangle         ; $12 FrameRect
>8102	96 84					.word	GXFillRectangle          ; $13 FillRect
>8104	12 81					.word	GXFrameCircle            ; $14 FrameCircle
>8106	0e 81					.word	GXFillCircle             ; $15 FillCircle
>8108	db 80					.word	GRUndefined              ; $16
>810a	db 80					.word	GRUndefined              ; $17
>810c	7e 84					.word	GXPlotPoint              ; $18 Plot

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.810e					GXFillCircle:
.810e	a9 ff		lda #$ff			lda 	#255
.8110	80 02		bra $8114			bra 	GXCircle
.8112					GXFrameCircle:
.8112	a9 00		lda #$00			lda 	#0
.8114					GXCircle:
.8114	8d 4a 06	sta $064a			sta 	gxIsFillMode					; save Fill flag
.8117	20 01 88	jsr $8801			jsr 	GXSortXY 					; topleft/bottomright
.811a	20 36 87	jsr $8736			jsr 	GXOpenBitmap 				; start drawing
.811d	20 0d 82	jsr $820d			jsr 	GXCircleSetup 				; set up for drawing
.8120	9c 4b 06	stz $064b			stz 	gxYChanged
.8123					_GXCircleDraw:
.8123	ad 48 06	lda $0648			lda 	gXCentre					; while x <= y
.8126	cd 49 06	cmp $0649			cmp 	gYCentre
.8129	90 0a		bcc $8135			bcc 	_GXCircleContinue
.812b	d0 03		bne $8130			bne 	_GXNoLast
.812d	20 40 81	jsr $8140			jsr 	GXPlot1
.8130					_GXNoLast:
.8130	20 47 87	jsr $8747			jsr 	GXCloseBitmap 				; close the bitmap
.8133	18		clc				clc
.8134	60		rts				rts
.8135					_GXCircleContinue:
.8135	20 3d 81	jsr $813d			jsr 	GXPlot2 					; draw it
.8138	20 ba 81	jsr $81ba			jsr 	GXCircleMove 				; adjust the coordinates
.813b	80 e6		bra $8123			bra 	_GXCircleDraw
.813d					GXPlot2:
.813d	20 40 81	jsr $8140			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8140					GXPlot1:
.8140	ad 49 06	lda $0649			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8143	f0 03		beq $8148			beq 	_GXPlot1Only
.8145	20 64 81	jsr $8164			jsr 	GXPlot0 						; plot and negate
.8148					_GXPlot1Only:
.8148	20 64 81	jsr $8164			jsr 	GXPlot0 						; twice, undoing negation
.814b	ad 48 06	lda $0648			lda 	gXCentre 						; swap X and Y
.814e	ae 49 06	ldx $0649			ldx	 	gYCentre
.8151	8d 49 06	sta $0649			sta 	gYCentre
.8154	8e 48 06	stx $0648			stx 	gXCentre
.8157	ad 4b 06	lda $064b			lda 	gxYChanged 						; toggle Y Changed flag
.815a	a9 ff		lda #$ff			lda 	#$FF
.815c	8d 4b 06	sta $064b			sta 	gxYChanged
.815f	60		rts				rts
.8160	20 64 81	jsr $8164			jsr 	GXPlot0 						; do once
.8163	60		rts				rts
.8164	ad 4a 06	lda $064a	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8167	f0 05		beq $816e			beq 	_GXPlot0Always
.8169	ad 4b 06	lda $064b			lda 	gxYChanged						; fill mode, only draw if changed.
.816c	f0 2d		beq $819b			beq 	GXPlot0Exit
.816e					_GXPlot0Always:
.816e	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8170	ad 49 06	lda $0649			lda 	gYCentre
.8173	20 9c 81	jsr $819c			jsr 	GXSubCopy
.8176	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8178	ad 48 06	lda $0648			lda 	gXCentre
.817b	20 9c 81	jsr $819c			jsr 	GXSubCopy
.817e	48		pha				pha 									; save last offset X
.817f	20 54 87	jsr $8754			jsr 	GXPositionCalc 					; calculate position/offset.
.8182	68		pla				pla
.8183	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8184	85 36		sta $36				sta 	gxzTemp0
.8186	64 37		stz $37				stz 	gxzTemp0+1
.8188	26 37		rol $37				rol 	gxzTemp0+1
.818a	ad 4a 06	lda $064a			lda 	gxIsFillMode
.818d	69 80		adc #$80			adc 	#128
.818f	20 e2 84	jsr $84e2			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8192	38		sec				sec 									; GY = -GY
.8193	a9 00		lda #$00			lda 	#0
.8195	ed 49 06	sbc $0649			sbc 	gYCentre
.8198	8d 49 06	sta $0649			sta 	gYCentre
.819b					GXPlot0Exit:
.819b	60		rts				rts
.819c					GXSubCopy:
.819c	85 36		sta $36				sta 	gxzTemp0
.819e	64 37		stz $37				stz 	gxzTemp0+1
.81a0	29 80		and #$80			and 	#$80
.81a2	f0 02		beq $81a6			beq 	_GXNoSx
.81a4	c6 37		dec $37				dec 	gxzTemp0+1
.81a6					_GXNoSx:
.81a6	38		sec				sec
.81a7	bd 35 06	lda $0635,x			lda 	gXX1,x
.81aa	e5 36		sbc $36				sbc 	gxzTemp0
.81ac	9d 31 06	sta $0631,x			sta 	gXX0,x
.81af	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81b2	e5 37		sbc $37				sbc 	gxzTemp0+1
.81b4	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81b7	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81b9	60		rts				rts
.81ba					GXCircleMove:
.81ba	9c 4b 06	stz $064b			stz 	gxYChanged 					; clear Y changed flag
.81bd	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81bf	10 0d		bpl $81ce			bpl 	_GXEMPositive
.81c1	ee 48 06	inc $0648			inc 	gXCentre 					; X++
.81c4	ad 48 06	lda $0648			lda 	gXCentre
.81c7	20 ed 81	jsr $81ed			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ca	a9 06		lda #$06			lda 	#6  						; and add 6
.81cc	80 15		bra $81e3			bra 	_GXEMAddD
.81ce					_GXEMPositive:
.81ce	ee 48 06	inc $0648			inc 	gXCentre					; X++
.81d1	ce 49 06	dec $0649			dec 	gyCentre 					; Y--
.81d4	38		sec				sec 								; calculate X-Y
.81d5	ad 48 06	lda $0648			lda 	gXCentre
.81d8	ed 49 06	sbc $0649			sbc 	gYCentre
.81db	20 ed 81	jsr $81ed			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81de	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81e0	ce 4b 06	dec $064b			dec 	gxYChanged
.81e3					_GXEMAddD:
.81e3	18		clc				clc
.81e4	65 38		adc $38				adc 	gxzTemp1
.81e6	85 38		sta $38				sta 	gxzTemp1
.81e8	90 02		bcc $81ec			bcc 	_GXEMNoCarry
.81ea	e6 39		inc $39				inc 	gxzTemp1+1
.81ec					_GXEMNoCarry:
.81ec	60		rts				rts
.81ed					_GXAdd4TimesToD:
.81ed	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81ef	29 80		and #$80			and 	#$80
.81f1	f0 02		beq $81f5			beq 	_GXA4Unsigned
.81f3	a9 ff		lda #$ff			lda 	#$FF
.81f5					_GXA4Unsigned:
.81f5	85 37		sta $37				sta 	gxzTemp0+1
.81f7	06 36		asl $36				asl 	gxzTemp0  					; x 4
.81f9	26 37		rol $37				rol 	gxzTemp0+1
.81fb	06 36		asl $36				asl 	gxzTemp0
.81fd	26 37		rol $37				rol 	gxzTemp0+1
.81ff	18		clc				clc 								; add
.8200	a5 36		lda $36				lda		gxzTemp0
.8202	65 38		adc $38				adc 	gxzTemp1
.8204	85 38		sta $38				sta 	gxzTemp1
.8206	a5 37		lda $37				lda		gxzTemp0+1
.8208	65 39		adc $39				adc 	gxzTemp1+1
.820a	85 39		sta $39				sta 	gxzTemp1+1
.820c	60		rts				rts
.820d					GXCircleSetup:
.820d	38		sec				sec
.820e	ad 37 06	lda $0637			lda 	gxY1
.8211	ed 33 06	sbc $0633			sbc 	gxY0
.8214	4a		lsr a				lsr 	a
.8215	8d 47 06	sta $0647			sta 	gxRadius
.8218	a2 00		ldx #$00			ldx 	#0
.821a	20 3c 82	jsr $823c			jsr 	_GXCalculateCentre
.821d	a2 02		ldx #$02			ldx 	#2
.821f	20 3c 82	jsr $823c			jsr 	_GXCalculateCentre
.8222	9c 48 06	stz $0648			stz 	gXCentre
.8225	ad 47 06	lda $0647			lda 	gxRadius
.8228	8d 49 06	sta $0649			sta 	gYCentre
.822b	0a		asl a				asl 	a 							; R x 2
.822c	85 36		sta $36				sta 	gxzTemp0
.822e	38		sec				sec
.822f	a9 03		lda #$03			lda 	#3
.8231	e5 36		sbc $36				sbc 	gxzTemp0
.8233	85 38		sta $38				sta 	gxzTemp1
.8235	a9 00		lda #$00			lda 	#0
.8237	e9 00		sbc #$00			sbc 	#0
.8239	85 39		sta $39				sta 	gxzTemp1+1
.823b	60		rts				rts
.823c					_GXCalculateCentre:
.823c	38		sec				sec
.823d	bd 35 06	lda $0635,x			lda 	gxX1,x
.8240	7d 31 06	adc $0631,x			adc 	gXX0,x
.8243	9d 35 06	sta $0635,x			sta 	gXX1,x
.8246	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8249	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.824c	4a		lsr a				lsr 	a
.824d	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.8250	7e 35 06	ror $0635,x			ror 	gXX1,x
.8253	60		rts				rts
.0647					gxRadius:
>0647							.fill 	1
.0648					gXCentre:
>0648							.fill 	1
.0649					gYCentre:
>0649							.fill 	1
.064a					gxIsFillMode:
>064a							.fill 	1
.064b					gxYChanged:
>064b							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8254					GXClearBitmap:
.8254	20 36 87	jsr $8736			jsr 	GXOpenBitmap 				; start access
.8257	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8259	ad 3b 06	lda $063b			lda 	gxHeight
.825c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.825e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8260					_GXCalcLastPage:
.8260	98		tya				tya 								; add to base page
.8261	18		clc				clc
.8262	6d 39 06	adc $0639			adc 	gxBasePage
.8265	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8267					_GXClearAll:
.8267	20 78 82	jsr $8278			jsr 	_GXClearBlock 				; clear 8k block
.826a	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.826c	a5 0b		lda $0b				lda 	GXEditSlot
.826e	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.8271	b0 f4		bcs $8267			bcs 	_GXClearAll
.8273	20 47 87	jsr $8747			jsr 	GXCloseBitmap	 			; stop access
.8276	18		clc				clc
.8277	60		rts				rts
.8278					_GXClearBlock:
.8278	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.827a	85 38		sta $38				sta 	0+gxzTemp1
.827c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.827e	85 39		sta $39				sta 	1+gxzTemp1
.8280					_GXCB0:
.8280	a5 36		lda $36				lda 	gxzTemp0
.8282	a0 00		ldy #$00			ldy 	#0
.8284					_GXCB1:
.8284	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8286	c8		iny				iny
.8287	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8289	c8		iny				iny
.828a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828c	c8		iny				iny
.828d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828f	c8		iny				iny
.8290	d0 f2		bne $8284			bne 	_GXCB1
.8292	e6 39		inc $39				inc 	gxzTemp1+1
.8294	a5 39		lda $39				lda 	gxzTemp1+1
.8296	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8298	d0 e6		bne $8280			bne 	_GXCB0
.829a	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.829b					GXControlBitmap:
.829b	64 01		stz $01				stz 	1
.829d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.829f	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82a0	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82a3	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82a5	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82a7	90 02		bcc $82ab			bcc 	_CBNotOn
.82a9	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82ab					_CBNotOn:
.82ab	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82ae	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82b0	29 07		and #$07			and 	#7
.82b2	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82b5	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82b7	d0 02		bne $82bb			bne 	_CBNotDefault
.82b9	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82bb					_CBNotDefault:
.82bb	8d 39 06	sta $0639			sta 	gxBasePage
.82be	20 17 83	jsr $8317			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82c1	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82c3	8d 03 d1	sta $d103			sta 	$D103
.82c6	a5 36		lda $36				lda 	gxzTemp0
.82c8	8d 02 d1	sta $d102			sta 	$D102
.82cb	9c 01 d1	stz $d101			stz 	$D101
.82ce	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82d0	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.82d3	29 01		and #$01			and 	#1
.82d5	f0 02		beq $82d9			beq 	_CBHaveHeight
.82d7	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.82d9					_CBHaveHeight
.82d9	8e 3b 06	stx $063b			stx 	gxHeight
.82dc	18		clc				clc
.82dd	60		rts				rts
.82de					GXControlSprite:
.82de	64 01		stz $01				stz 	1
.82e0	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82e2	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82e3	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82e6	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82e8	29 df		and #$df			and 	#$DF 						; clear sprite bit
.82ea	90 02		bcc $82ee			bcc 	_CSNotOn
.82ec	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.82ee					_CSNotOn:
.82ee	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82f1	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f3	d0 02		bne $82f7			bne 	_CSNotDefault
.82f5	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.82f7					_CSNotDefault:
.82f7	8d 3a 06	sta $063a			sta 	gxSpritePage
.82fa	20 17 83	jsr $8317			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fd	a5 36		lda $36				lda 	zTemp0
.82ff	8d 45 06	sta $0645			sta 	GXSpriteOffsetBase
.8302	a5 37		lda $37				lda 	zTemp0+1
.8304	8d 46 06	sta $0646			sta 	GXSpriteOffsetBase+1
.8307	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8309					_CSClear:
.8309	9e 00 d9	stz $d900,x			stz 	$D900,x
.830c	9e 00 da	stz $da00,x			stz 	$DA00,x
.830f	ca		dex				dex
.8310	d0 f7		bne $8309			bne 	_CSClear
.8312	9c 44 06	stz $0644			stz 	GSCurrentSprite+1 			; no sprite selected.
.8315	18		clc				clc
.8316	60		rts				rts
.8317					GXCalculateBaseAddress:
.8317	85 36		sta $36				sta 	gxzTemp0
.8319	64 37		stz $37				stz 	gxzTemp0+1
.831b	a9 05		lda #$05			lda 	#5
.831d					_GXShift:
.831d	06 36		asl $36				asl 	gxzTemp0
.831f	26 37		rol $37				rol 	gxzTemp0+1
.8321	3a		dec a				dec		a
.8322	d0 f9		bne $831d			bne 	_GXShift
.8324	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8325					GXLine:
.8325	20 36 87	jsr $8736			jsr 	GXOpenBitmap
.8328	20 1f 88	jsr $881f			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.832b	20 f1 83	jsr $83f1			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.832e	20 54 87	jsr $8754			jsr 	GXPositionCalc 				; calculate position/offset.
.8331					_GXDrawLoop:
.8331	ac 42 06	ldy $0642			ldy 	gsOffset 					; draw the pixel
.8334	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8336	2d 3f 06	and $063f			and 	gxANDValue
.8339	4d 3e 06	eor $063e			eor 	gxEORValue
.833c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.833e	20 4d 83	jsr $834d			jsr 	GXLineIsComplete 			; is the line complete ?
.8341	f0 05		beq $8348			beq 	_GXLExit
.8343	20 68 83	jsr $8368			jsr 	GXLineAdvance 				; code as per advance method
.8346	80 e9		bra $8331			bra 	_GXDrawLoop
.8348					_GXLExit:
.8348	20 47 87	jsr $8747			jsr 	GXCloseBitmap
.834b	18		clc				clc
.834c	60		rts				rts
.834d					GXLineIsComplete:
.834d	ad 4e 06	lda $064e			lda 	GXIsDiffYLarger 			; is dy larger
.8350	d0 0f		bne $8361			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8352	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8355	4d 35 06	eor $0635			eor 	GXX1
.8358	d0 06		bne $8360			bne 	_GXLICExit
.835a	ad 32 06	lda $0632			lda 	GXX0+1
.835d	4d 36 06	eor $0636			eor 	GXX1+1
.8360					_GXLICExit:
.8360	60		rts				rts
.8361					_GXLICCompareY:
.8361	ad 37 06	lda $0637			lda 	GXY1
.8364	4d 33 06	eor $0633			eor 	GXY0
.8367	60		rts				rts
.8368					GXLineAdvance:
.8368	18		clc				clc 								; add adjust to position
.8369	ad 50 06	lda $0650			lda 	GXPosition
.836c	6d 51 06	adc $0651			adc 	GXAdjust
.836f	8d 50 06	sta $0650			sta 	GXPosition
.8372	9c 53 06	stz $0653			stz 	GXAddSelect 				; clear add select flag
.8375	b0 05		bcs $837c			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8377	cd 52 06	cmp $0652			cmp 	GXTotal 					; if exceeded total
.837a	90 0a		bcc $8386			bcc 	_GXLANoExtra
.837c					_GXLAOverflow:
.837c	ce 53 06	dec $0653			dec 	GXAddSelect 				; set addselect to $FF
.837f	38		sec				sec 								; subtract total and write back
.8380	ed 52 06	sbc $0652			sbc 	GXTotal
.8383	8d 50 06	sta $0650			sta 	GXPosition
.8386					_GXLANoExtra:
.8386	ad 4e 06	lda $064e			lda 	GXIsDiffYLarger
.8389	f0 0d		beq $8398			beq 	_GXDXLarger
.838b	20 ea 83	jsr $83ea			jsr 	GXIncrementY
.838e	ad 53 06	lda $0653			lda 	GXAddSelect
.8391	f0 10		beq $83a3			beq 	_GXLAExit
.8393	20 a4 83	jsr $83a4			jsr 	GXAdjustX
.8396	80 0b		bra $83a3			bra 	_GXLAExit
.8398					_GXDXLarger:
.8398	20 a4 83	jsr $83a4			jsr 	GXAdjustX
.839b	ad 53 06	lda $0653			lda 	GXAddSelect
.839e	f0 03		beq $83a3			beq 	_GXLAExit
.83a0	20 ea 83	jsr $83ea			jsr 	GXIncrementY
.83a3					_GXLAExit:
.83a3	60		rts				rts
.83a4					GXAdjustX:
.83a4	ad 4f 06	lda $064f			lda 	GXDXNegative
.83a7	10 25		bpl $83ce			bpl 	_GXAXRight
.83a9	ad 31 06	lda $0631			lda 	GXX0
.83ac	d0 03		bne $83b1			bne 	_GXAXNoBorrow
.83ae	ce 32 06	dec $0632			dec 	GXX0+1
.83b1					_GXAXNoBorrow:
.83b1	ce 31 06	dec $0631			dec 	GXX0
.83b4	ce 42 06	dec $0642			dec 	gsOffset 					; pixel left
.83b7	ad 42 06	lda $0642			lda 	gsOffset
.83ba	c9 ff		cmp #$ff			cmp 	#$FF
.83bc	d0 0f		bne $83cd			bne 	_GXAYExit 					; underflow
.83be	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83c0	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83c2	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83c4	b0 07		bcs $83cd			bcs 	_GXAYExit
.83c6	18		clc				clc
.83c7	69 20		adc #$20			adc 	#$20 						; fix up
.83c9	85 3d		sta $3d				sta 	gxzScreen+1
.83cb	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.83cd					_GXAYExit:
.83cd	60		rts				rts
.83ce					_GXAXRight:
.83ce	ee 31 06	inc $0631			inc 	GXX0
.83d1	d0 03		bne $83d6			bne 	_GXAXNoCarry
.83d3	ee 32 06	inc $0632			inc 	GXX0+1
.83d6					_GXAXNoCarry:
.83d6	ee 42 06	inc $0642			inc 	gsOffset 					; pixel right
.83d9	d0 0e		bne $83e9			bne 	_GXAXExit 					; if not overflowed, exit.
.83db	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.83dd	a5 3d		lda $3d				lda 	gxzScreen+1
.83df	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.83e1	90 06		bcc $83e9			bcc 	_GXAXExit
.83e3	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83e5	85 3d		sta $3d				sta 	gxzScreen+1
.83e7	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.83e9					_GXAXExit:
.83e9	60		rts				rts
.83ea					GXIncrementY:
.83ea	ee 33 06	inc $0633			inc 	GXY0
.83ed	20 aa 87	jsr $87aa			jsr 	GXMovePositionDown
.83f0	60		rts				rts
.83f1					GXLineSetup:
.83f1	ad 37 06	lda $0637			lda 	GXY1
.83f4	38		sec				sec
.83f5	ed 33 06	sbc $0633			sbc 	GXY0
.83f8	4a		lsr a				lsr 	a
.83f9	8d 4d 06	sta $064d			sta 	GXDiffY
.83fc	9c 4f 06	stz $064f			stz 	GXDXNegative 				; clear -ve flag
.83ff	38		sec				sec
.8400	ad 35 06	lda $0635			lda 	GXX1
.8403	ed 31 06	sbc $0631			sbc 	GXX0
.8406	8d 4c 06	sta $064c			sta 	GXDiffX
.8409	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.840c	ed 32 06	sbc $0632			sbc 	GXX0+1
.840f	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8410	6e 4c 06	ror $064c			ror 	GXDiffX
.8413	0a		asl a				asl 	a
.8414	10 0c		bpl $8422			bpl 	_GDXNotNegative
.8416	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8418	38		sec				sec
.8419	ed 4c 06	sbc $064c			sbc 	GXDiffX
.841c	8d 4c 06	sta $064c			sta 	GXDiffX
.841f	ce 4f 06	dec $064f			dec 	GXDXNegative 				; -ve flag = $FF.
.8422					_GDXNotNegative:
.8422	9c 4e 06	stz $064e			stz 	GXIsDiffYLarger 			; clear larger flag
.8425	ad 4d 06	lda $064d			lda 	GXDiffY 					; set adjust and total.
.8428	8d 51 06	sta $0651			sta 	GXAdjust
.842b	ad 4c 06	lda $064c			lda 	GXDiffX
.842e	8d 52 06	sta $0652			sta 	GXTotal
.8431	ad 4d 06	lda $064d			lda 	GXDiffY 					; if dy > dx
.8434	cd 4c 06	cmp $064c			cmp 	GXDiffX
.8437	90 0f		bcc $8448			bcc 	_GDXNotLarger
.8439	ce 4e 06	dec $064e			dec 	GXIsDiffYLarger 			; set the dy larger flag
.843c	ad 4c 06	lda $064c			lda 	GXDiffX 					; set adjust and total other way round
.843f	8d 51 06	sta $0651			sta 	GXAdjust
.8442	ad 4d 06	lda $064d			lda 	GXDiffY
.8445	8d 52 06	sta $0652			sta 	GXTotal
.8448					_GDXNotLarger:
.8448	ad 52 06	lda $0652			lda 	GXTotal
.844b	4a		lsr a				lsr 	a
.844c	8d 50 06	sta $0650			sta 	GXPosition
.844f	60		rts				rts
.064c					GXDiffX:
>064c							.fill 	1
.064d					GXDiffY:
>064d							.fill 	1
.064e					GXIsDiffYLarger:
>064e							.fill 	1
.064f					GXDXNegative:
>064f							.fill 	1
.0650					GXPosition:
>0650							.fill 	1
.0651					GXAdjust:
>0651							.fill 	1
.0652					GXTotal:
>0652							.fill 	1
.0653					GXAddSelect:
>0653							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8450					GXSetColourMode:
.8450	a6 36		ldx $36				ldx 	gxzTemp0
.8452	8e 3d 06	stx $063d			stx 	gxColour 								; set colour
.8455	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8457	8d 3c 06	sta $063c			sta 	gxMode 									; set mode
.845a	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.845c	9c 3f 06	stz $063f			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.845f	ae 3d 06	ldx $063d			ldx 	gxColour
.8462	8e 3e 06	stx $063e			stx 	gxEORValue
.8465	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8467	90 03		bcc $846c			bcc 	_GXSDCNotAndColour
.8469	8e 3f 06	stx $063f			stx 	gxANDValue
.846c					_GXSDCNotAndColour:
.846c	d0 03		bne $8471			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.846e	9c 3e 06	stz $063e			stz 	gxEORValue
.8471					_GXSDCNotAnd:
.8471	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8472	90 08		bcc $847c			bcc 	_GXSDCNoFlip
.8474	ad 3f 06	lda $063f			lda	 	gxANDValue
.8477	49 ff		eor #$ff			eor 	#$FF
.8479	8d 3f 06	sta $063f			sta 	gxANDValue
.847c					_GXSDCNoFlip:
.847c	18		clc				clc
.847d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.847e					GXPlotPoint:
.847e	20 36 87	jsr $8736			jsr 	GXOpenBitmap 				; start drawing
.8481	20 54 87	jsr $8754			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.8484	ac 42 06	ldy $0642			ldy 	gsOffset
.8487	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8489	2d 3f 06	and $063f			and 	gxANDValue
.848c	4d 3e 06	eor $063e			eor 	gxEORValue
.848f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8491	20 47 87	jsr $8747			jsr 	GXCloseBitmap 				; stop drawing and exit
.8494	18		clc				clc
.8495	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.8496					GXFillRectangle:
.8496	38		sec				sec
.8497	80 01		bra $849a			bra 	GXRectangle
.8499					GXFrameRectangle:
.8499	18		clc				clc
.849a					GXRectangle:
.849a	08		php				php 								; save Fill flag (CS)
.849b	20 36 87	jsr $8736			jsr 	GXOpenBitmap 				; start drawing
.849e	20 01 88	jsr $8801			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84a1	20 54 87	jsr $8754			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84a4	38		sec				sec 								; sec = Draw line
.84a5	20 cf 84	jsr $84cf			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84a8	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84ab	cd 37 06	cmp $0637			cmp 	gxY1
.84ae	f0 19		beq $84c9			beq 	_GXRectangleExit
.84b0					_GXRectLoop:
.84b0	20 aa 87	jsr $87aa			jsr 	GXMovePositionDown 			; down one.
.84b3	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84b6	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84b9	cd 37 06	cmp $0637			cmp 	gXY1
.84bc	f0 07		beq $84c5			beq 	_GXLastLine
.84be	28		plp				plp 								; get flag back
.84bf	08		php				php
.84c0	20 cf 84	jsr $84cf			jsr 	GXDrawLineX1X0 				; draw horizontal line
.84c3	80 eb		bra $84b0			bra 	_GXRectLoop
.84c5					_GXLastLine:
.84c5	38		sec				sec
.84c6	20 cf 84	jsr $84cf			jsr 	GXDrawLineX1X0
.84c9					_GXRectangleExit:
.84c9	68		pla				pla 								; throw fill flag.
.84ca	20 47 87	jsr $8747			jsr 	GXCloseBitmap 				; stop drawing and exit
.84cd	18		clc				clc
.84ce	60		rts				rts
.84cf					GXDrawLineX1X0:
.84cf	08		php				php 								; save solid/either-end
.84d0	38		sec				sec
.84d1	ad 35 06	lda $0635			lda		gXX1
.84d4	ed 31 06	sbc $0631			sbc 	gXX0
.84d7	85 36		sta $36				sta 	gxzTemp0
.84d9	ad 36 06	lda $0636			lda 	gXX1+1
.84dc	ed 32 06	sbc $0632			sbc 	gXX0+1
.84df	85 37		sta $37				sta 	gxzTemp0+1
.84e1	28		plp				plp
.84e2					GXDrawLineTemp0:
.84e2	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.84e4	48		pha				pha
.84e5	a5 3d		lda $3d				lda 	gxzScreen+1
.84e7	48		pha				pha
.84e8	ad 42 06	lda $0642			lda 	gsOffset
.84eb	48		pha				pha
.84ec	a5 0b		lda $0b				lda 	GXEditSlot
.84ee	48		pha				pha
.84ef	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y offset
.84f2	90 1e		bcc $8512			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.84f4					_GXDLTLine:
.84f4	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.84f6	2d 3f 06	and $063f			and 	gxANDValue
.84f9	4d 3e 06	eor $063e			eor 	gxEORValue
.84fc	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84fe	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8500	d0 04		bne $8506			bne 	_GXDLTNoBorrow
.8502	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8504	30 2e		bmi $8534			bmi 	_GXDLTExit
.8506					_GXDLTNoBorrow:
.8506	c6 36		dec $36				dec 	gxzTemp0
.8508	c8		iny				iny 								; next slot.
.8509	d0 e9		bne $84f4			bne 	_GXDLTLine
.850b	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.850d	20 42 85	jsr $8542			jsr 	GXDLTCheckWrap				; check for new page.
.8510	80 e2		bra $84f4			bra 	_GXDLTLine
.8512					_GXDLTEndPoints:
.8512	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8514	2d 3f 06	and $063f			and 	gxANDValue
.8517	4d 3e 06	eor $063e			eor 	gxEORValue
.851a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.851c	98		tya				tya 								; advance to right side
.851d	18		clc				clc
.851e	65 36		adc $36				adc 	gxzTemp0
.8520	a8		tay				tay
.8521	a5 3d		lda $3d				lda 	gxzScreen+1
.8523	65 37		adc $37				adc 	gxzTemp0+1
.8525	85 3d		sta $3d				sta 	gxzScreen+1
.8527	20 42 85	jsr $8542			jsr 	GXDLTCheckWrap 			; fix up.
.852a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.852c	2d 3f 06	and $063f			and 	gxANDValue
.852f	4d 3e 06	eor $063e			eor 	gxEORValue
.8532	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8534					_GXDLTExit:
.8534	68		pla				pla
.8535	85 0b		sta $0b				sta 	GXEditSlot
.8537	68		pla				pla
.8538	8d 42 06	sta $0642			sta 	gsOffset
.853b	68		pla				pla
.853c	85 3d		sta $3d				sta 	gxzScreen+1
.853e	68		pla				pla
.853f	85 3c		sta $3c				sta 	gxzScreen
.8541	60		rts				rts
.8542					GXDLTCheckWrap:
.8542	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8544	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8546	90 06		bcc $854e			bcc 	_GXDLTCWExit
.8548	e9 20		sbc #$20			sbc 	#$20 						; fix up
.854a	85 3d		sta $3d				sta 	gxzScreen+1
.854c	e6 0b		inc $0b				inc 	GXEditSlot
.854e					_GXDLTCWExit:
.854e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.854f					GXDrawGraphicElement:
.854f	8d 54 06	sta $0654			sta 	gxSize 						; save size
.8552	3a		dec a				dec 	a
.8553	8d 55 06	sta $0655			sta 	gxMask 						; and mask
.8556	9c 59 06	stz $0659			stz 	gxVFlip 					; set the flip bytes
.8559	9c 5a 06	stz $065a			stz 	gxHFlip
.855c	2c 5b 06	bit $065b			bit 	gxUseMode
.855f	10 03		bpl $8564			bpl 	_GXNotVertical
.8561	8d 59 06	sta $0659			sta 	gxVFlip
.8564					_GXNotVertical:
.8564	50 03		bvc $8569			bvc 	_GXNotHorizontal
.8566	8d 5a 06	sta $065a			sta 	gxHFlip
.8569					_GXNotHorizontal:
.8569	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.856c	48		pha				pha
.856d	8c 57 06	sty $0657			sty 	gxAcquireVector+1 			; and acquisition vector
.8570	8e 56 06	stx $0656			stx 	gxAcquireVector
.8573	20 36 87	jsr $8736			jsr 	gxOpenBitmap 				; open the bitmap.
.8576	ad 5b 06	lda $065b			lda 	gxUseMode 					; scale bits
.8579	4a		lsr a				lsr 	a
.857a	4a		lsr a				lsr 	a
.857b	4a		lsr a				lsr 	a
.857c	29 07		and #$07			and		#7
.857e	1a		inc a				inc 	a
.857f	8d 58 06	sta $0658			sta 	gxScale
.8582	64 38		stz $38				stz 	gxzTemp1						; start first line
.8584					_GXGELoop:
.8584	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.8586	4d 59 06	eor $0659			eor 	gxVFlip
.8589	aa		tax				tax 								; get the Xth line.
.858a	20 c8 85	jsr $85c8			jsr 	_GXCallAcquire 				; get that data.
.858d	ad 58 06	lda $0658			lda 	gxScale 					; do scale identical copies of that line.
.8590	85 39		sta $39				sta 	gxzTemp1+1
.8592					_GXGELoop2:
.8592	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8595	cd 3b 06	cmp $063b			cmp 	gxHeight
.8598	b0 10		bcs $85aa			bcs 	_GXDGEExit
.859a	20 cb 85	jsr $85cb			jsr 	GXRenderOneLine 			; render line
.859d	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.859f	d0 f1		bne $8592			bne 	_GXGELoop2
.85a1	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85a3	a5 38		lda $38				lda 	gxzTemp1
.85a5	cd 54 06	cmp $0654			cmp 	gxSize
.85a8	d0 da		bne $8584			bne 	_GXGELoop
.85aa					_GXDGEExit:
.85aa	68		pla				pla 								; restore Y for next time
.85ab	8d 33 06	sta $0633			sta 	gxY0
.85ae	ae 58 06	ldx $0658			ldx 	gxScale 					; get scale (1-8)
.85b1					_GXShiftLeft:
.85b1	18		clc				clc
.85b2	ad 54 06	lda $0654			lda 	gxSize
.85b5	6d 31 06	adc $0631			adc 	gxX0
.85b8	8d 31 06	sta $0631			sta 	gxX0
.85bb	90 03		bcc $85c0			bcc 	_GXSLNoCarry
.85bd	ee 32 06	inc $0632			inc 	gxX0+1
.85c0					_GXSLNoCarry:
.85c0	ca		dex				dex
.85c1	d0 ee		bne $85b1			bne 	_GXShiftLeft
.85c3	20 47 87	jsr $8747			jsr 	GXCloseBitmap
.85c6	18		clc				clc
.85c7	60		rts				rts
.85c8					_GXCallAcquire:
.85c8	6c 56 06	jmp ($0656)			jmp 	(gxAcquireVector)
.85cb					GXRenderOneLine:
.85cb	20 54 87	jsr $8754			jsr 	GXPositionCalc 				; calculate position/offset.
.85ce	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y contains position.
.85d1	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.85d3					_GXROLLoop1:
.85d3	ad 58 06	lda $0658			lda 	gxScale 					; set to do 'scale' times
.85d6	85 3b		sta $3b				sta 	gxzTemp2+1
.85d8					_GXROLLoop2:
.85d8	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.85da	4d 5a 06	eor $065a			eor 	gxHFlip
.85dd	aa		tax				tax 								; read from the pixel buffer
.85de	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.85e1	f0 0a		beq $85ed			beq 	_GXZeroPixel 				; don't draw if zero.
.85e3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.85e5	2d 3f 06	and $063f			and 	gxANDValue
.85e8	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.85eb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.85ed					_GXZeroPixel:
.85ed	c8		iny				iny 								; advance pointer
.85ee	d0 05		bne $85f5			bne 	_GXNoShift
.85f0	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.85f2	20 42 85	jsr $8542			jsr 	GXDLTCheckWrap				; check for new page.
.85f5					_GXNoShift:
.85f5	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.85f7	d0 df		bne $85d8			bne 	_GXROLLoop2
.85f9	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.85fb	a5 3a		lda $3a				lda 	gxzTemp2
.85fd	cd 54 06	cmp $0654			cmp 	gxSize
.8600	d0 d1		bne $85d3			bne 	_GXROLLoop1
.8602	ee 33 06	inc $0633			inc 	gxY0
.8605	60		rts				rts
.0654					gxSize:
>0654							.fill 	1
.0655					gxMask:
>0655							.fill 	1
.0656					gxAcquireVector:
>0656							.fill 	2
.0658					gxScale:
>0658							.fill 	1
.0659					gxVFlip:
>0659							.fill 	1
.065a					gxHFlip:
>065a							.fill 	1
.065b					gxUseMode:
>065b							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8606					GXFontHandler:
.8606	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8608	4d 3c 06	eor $063c			eor 	gxMode
.860b	8d 5b 06	sta $065b			sta 	gxUseMode
.860e	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8610	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8612	26 37		rol $37				rol	 	gxzTemp0+1
.8614	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.8616	26 37		rol $37				rol	 	gxzTemp0+1
.8618	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.861a	26 37		rol $37				rol	 	gxzTemp0+1
.861c	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.861e	09 c0		ora #$c0			ora 	#$C0
.8620	85 37		sta $37				sta 	gxzTemp0+1
.8622	a9 08		lda #$08			lda 	#8 							; size 8x8
.8624	a2 2c		ldx #$2c			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8626	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8628	20 4f 85	jsr $854f			jsr 	GXDrawGraphicElement
.862b	60		rts				rts
.862c					GXGetGraphicDataFont:
.862c	8a		txa				txa 								; X->Y
.862d	a8		tay				tay
.862e	a6 01		ldx $01				ldx 	1 							; preserve old value
.8630	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8632	85 01		sta $01				sta 	1
.8634	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.8636	86 01		stx $01				stx 	1 							; put old value back.
.8638	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.863a					_GXExpand:
.863a	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.863d	0a		asl a				asl 	a 							; shift bit 7 into C
.863e	90 08		bcc $8648			bcc 	_GXNoPixel
.8640	48		pha				pha 								; if set, set pixel buffer to current colour.
.8641	ad 3d 06	lda $063d			lda 	gxColour
.8644	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8647	68		pla				pla
.8648					_GXNoPixel:
.8648	e8		inx				inx 								; do the whole byte.
.8649	e0 08		cpx #$08			cpx 	#8
.864b	d0 ed		bne $863a			bne 	_GXExpand
.864d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.864e					GXSpriteHandler:
.864e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8650	4d 3c 06	eor $063c			eor 	gxMode
.8653	8d 5b 06	sta $065b			sta 	gxUseMode
.8656	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.8658	da		phx				phx
.8659	20 36 87	jsr $8736			jsr 	GXOpenBitmap 				; can access sprite information
.865c	68		pla				pla
.865d	20 c5 87	jsr $87c5			jsr 	GXFindSprite 				; get the sprite address
.8660	20 47 87	jsr $8747			jsr 	GXCloseBitmap
.8663	ad 5c 06	lda $065c			lda 	GXSizePixels 					; return size
.8666	a2 6e		ldx #$6e			ldx 	#GXSpriteAcquire & $FF
.8668	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.866a	20 4f 85	jsr $854f			jsr 	GXDrawGraphicElement
.866d	60		rts				rts
.866e					GXSpriteAcquire:
.866e	ad 3a 06	lda $063a			lda 	GXSpritePage				; point to base page
.8671	85 0b		sta $0b				sta 	GXEditSlot
.8673	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.8675	a9 00		lda #$00			lda 	#0
.8677	ae 5d 06	ldx $065d			ldx 	GXSizeBits
.867a					_GXTimesRowNumber:
.867a	18		clc				clc
.867b	65 36		adc $36				adc 	zTemp0
.867d	ca		dex				dex
.867e	10 fa		bpl $867a			bpl 	_GXTimesRowNumber
.8680	64 37		stz $37				stz 	gxzTemp0+1
.8682	0a		asl a				asl 	a 							; row x 2,4,6,8
.8683	26 37		rol $37				rol 	gxzTemp0+1
.8685	0a		asl a				asl 	a 							; row x 4,8,12,16
.8686	26 37		rol $37				rol 	gxzTemp0+1
.8688	0a		asl a				asl 	a 							; row x 8,16,24,32
.8689	26 37		rol $37				rol 	gxzTemp0+1
.868b	85 36		sta $36				sta 	gxzTemp0
.868d	18		clc				clc 								; add base address.
.868e	a5 36		lda $36				lda 	gxzTemp0
.8690	6d 5f 06	adc $065f			adc 	GXSpriteOffset
.8693	85 36		sta $36				sta 	gxzTemp0
.8695	a5 37		lda $37				lda 	gxzTemp0+1
.8697	6d 60 06	adc $0660			adc 	GXSpriteOffset+1
.869a					_GXSAFindPage:
.869a	c9 20		cmp #$20			cmp 	#$20 						; on this page
.869c	90 06		bcc $86a4			bcc 	_GXSAFoundPage
.869e	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86a0	e6 0b		inc $0b				inc 	GXEditSlot
.86a2	80 f6		bra $869a			bra 	_GXSAFindPage
.86a4					_GXSAFoundPage:
.86a4	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86a6	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86a8	a0 00		ldy #$00			ldy 	#0
.86aa					_GXSACopyLoop:
.86aa	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86ac	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86af	c8		iny				iny
.86b0	cc 5c 06	cpy $065c			cpy 	GXSizePixels
.86b3	d0 f5		bne $86aa			bne 	_GXSACopyLoop
.86b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86b6					GXSelect:
.86b6	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.86b8	c9 40		cmp #$40			cmp 	#64
.86ba	b0 28		bcs $86e4			bcs 	_GXSFail
.86bc	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.86be	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.86c0	06 36		asl $36				asl 	gxzTemp0
.86c2	06 36		asl $36				asl 	gxzTemp0
.86c4	06 36		asl $36				asl 	gxzTemp0
.86c6	2a		rol a				rol 	a
.86c7	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.86c9	8d 44 06	sta $0644			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.86cc	85 37		sta $37				sta 	gxzTemp0+1
.86ce	a5 36		lda $36				lda 	gxzTemp0
.86d0	8d 43 06	sta $0643			sta 	GSCurrentSprite
.86d3	98		tya				tya 								; control value
.86d4	29 01		and #$01			and 	#1
.86d6	64 01		stz $01				stz 	1 							; access sprite control.
.86d8	92 36		sta ($36)			sta 	(gxzTemp0) 					; write to control register
.86da	a9 40		lda #$40			lda 	#64
.86dc	8d 1c d9	sta $d91c			sta 	$D91C
.86df	8d 1e d9	sta $d91e			sta 	$D91E
.86e2	18		clc				clc
.86e3	60		rts				rts
.86e4					_GXSFail:
.86e4	38		sec				sec
.86e5	60		rts				rts
.86e6					GXSelectImage:
.86e6	ad 44 06	lda $0644			lda 	GSCurrentSprite+1 			; check sprite selected
.86e9	f0 49		beq $8734			beq 	_GXSIFail
.86eb	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.86ed	48		pha				pha
.86ee	20 36 87	jsr $8736			jsr 	GXOpenBitmap
.86f1	68		pla				pla
.86f2	20 c5 87	jsr $87c5			jsr 	GXFindSprite
.86f5	a0 01		ldy #$01			ldy 	#1
.86f7	ad 43 06	lda $0643			lda 	GSCurrentSprite
.86fa	85 36		sta $36				sta 	gxzTemp0
.86fc	ad 44 06	lda $0644			lda 	GSCurrentSprite+1
.86ff	85 37		sta $37				sta 	gxzTemp0+1
.8701	ad 5f 06	lda $065f			lda 	GXSpriteOffset
.8704	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8706	18		clc				clc
.8707	ad 60 06	lda $0660			lda 	GXSpriteOffset+1
.870a	6d 45 06	adc $0645			adc 	GXSpriteOffsetBase
.870d	c8		iny				iny
.870e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8710	ad 46 06	lda $0646			lda 	GXSpriteOffsetBase+1
.8713	69 00		adc #$00			adc 	#0
.8715	c8		iny				iny
.8716	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8718	b2 36		lda ($36)			lda 	(gxzTemp0)					; get LSB into gxzTemp1
.871a	29 01		and #$01			and 	#1
.871c	85 38		sta $38				sta 	gxzTemp1
.871e	ad 5d 06	lda $065d			lda 	GXSizeBits 					; get raw size
.8721	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8723	2a		rol a				rol 	a 							; x 2
.8724	0a		asl a				asl 	a 							; x 4
.8725	0a		asl a				asl 	a 							; x 8
.8726	0a		asl a				asl 	a 							; x 16
.8727	0d 5e 06	ora $065e			ora 	GXSpriteLUT 						; Or with LUT
.872a	0a		asl a				asl 	a 							; 1 shift
.872b	05 38		ora $38				ora 	gxzTemp1 					; Or in the enable bit
.872d	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.872f	20 47 87	jsr $8747			jsr 	GXCloseBitmap
.8732	18		clc				clc
.8733	60		rts				rts
.8734					_GXSIFail:
.8734	38		sec				sec
.8735	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8736					GXOpenBitmap:
.8736	78		sei				sei 								; no interrupts here
.8737	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8739	8d 41 06	sta $0641			sta 	gxOriginalMMUSetting
.873c	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.873e	85 00		sta $00				sta 	0
.8740	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.8742	8d 40 06	sta $0640			sta 	gxOriginalLUTValue
.8745	58		cli				cli
.8746	60		rts				rts
.8747					GXCloseBitmap:
.8747	78		sei				sei
.8748	ad 40 06	lda $0640			lda 	gxOriginalLUTValue 			; restore LUT slot value
.874b	85 0b		sta $0b				sta 	GXEditSlot
.874d	ad 41 06	lda $0641			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8750	85 00		sta $00				sta 	0
.8752	58		cli				cli
.8753	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8754					GXPositionCalc:
.8754	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8756	48		pha				pha
.8757	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.875a	85 3c		sta $3c				sta 	gxzScreen
.875c	64 3d		stz $3d				stz 	gxzScreen+1
.875e	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.8760	26 3d		rol $3d				rol 	gxzScreen+1
.8762	06 3c		asl $3c				asl 	gxzScreen
.8764	26 3d		rol $3d				rol 	gxzScreen+1
.8766	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8767	65 3c		adc $3c				adc 	gxzScreen
.8769	85 3c		sta $3c				sta 	gxzScreen
.876b	90 02		bcc $876f			bcc 	_GXPCNoCarry
.876d	e6 3d		inc $3d				inc 	gxzScreen+1
.876f					_GXPCNoCarry:
.876f	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8771	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8773	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8775	85 36		sta $36				sta 	gxzTemp0
.8777	64 3d		stz $3d				stz 	gxzScreen+1
.8779	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.877b					_GXPCMultiply32:
.877b	06 3c		asl $3c				asl 	gxzScreen
.877d	26 3d		rol $3d				rol 	gxzScreen+1
.877f	3a		dec a				dec 	a
.8780	d0 f9		bne $877b			bne 	_GXPCMultiply32
.8782	18		clc				clc
.8783	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8786	65 3c		adc $3c				adc 	gxzScreen
.8788	8d 42 06	sta $0642			sta 	gsOffset
.878b	ad 32 06	lda $0632			lda 	GXX0+1
.878e	65 3d		adc $3d				adc 	gxzScreen+1
.8790	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8792	90 04		bcc $8798			bcc 	_GXPCNoOverflow
.8794	29 1f		and #$1f			and 	#$1F 						; fix it up
.8796	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8798					_GXPCNoOverflow:
.8798	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.879a	85 3d		sta $3d				sta 	gxzScreen+1
.879c	64 3c		stz $3c				stz 	gxzScreen
.879e	18		clc				clc
.879f	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.87a1	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.87a4	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.87a6	68		pla				pla
.87a7	85 36		sta $36				sta 	gxzTemp0
.87a9	60		rts				rts
.87aa					GXMovePositionDown:
.87aa	18		clc				clc 								; add 320 to offset/temp+1
.87ab	ad 42 06	lda $0642			lda 	gsOffset
.87ae	69 40		adc #$40			adc 	#64
.87b0	8d 42 06	sta $0642			sta 	gsOffset
.87b3	a5 3d		lda $3d				lda 	gxzScreen+1
.87b5	69 01		adc #$01			adc 	#1
.87b7	85 3d		sta $3d				sta 	gxzScreen+1
.87b9	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.87bb	90 07		bcc $87c4			bcc 	_GXMPDExit
.87bd	38		sec				sec  								; next page
.87be	e9 20		sbc #$20			sbc 	#$20
.87c0	85 3d		sta $3d				sta 	gxzScreen+1
.87c2	e6 0b		inc $0b				inc 	GXEditSlot
.87c4					_GXMPDExit:
.87c4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.87c5					GXFindSprite:
.87c5	aa		tax				tax
.87c6	ad 3a 06	lda $063a			lda 	GXSpritePage 				; access the base page of the sprite
.87c9	85 0b		sta $0b				sta 	GXEditSlot
.87cb	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.87ce	8d 60 06	sta $0660			sta 	GXSpriteOffset+1
.87d1	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.87d4	48		pha				pha 								; save twice
.87d5	48		pha				pha
.87d6	29 03		and #$03			and 	#3 							; get sprite size
.87d8	8d 5d 06	sta $065d			sta 	GXSizeBits 					; save raw (0-3)
.87db	aa		tax				tax
.87dc	bd fd 87	lda $87fd,x			lda 	_GXFXSSTTable,x 			; read sprite size
.87df	8d 5c 06	sta $065c			sta 	GXSizePixels 					; save (8/16/24/32)
.87e2	68		pla				pla 								; get LUT
.87e3	4a		lsr a				lsr		a
.87e4	4a		lsr a				lsr		a
.87e5	29 03		and #$03			and 	#3
.87e7	8d 5e 06	sta $065e			sta 	GXSpriteLUT
.87ea	68		pla				pla 								; address, neeeds to be x 4
.87eb	29 f0		and #$f0			and 	#$F0
.87ed	8d 5f 06	sta $065f			sta 	GXSpriteOffset
.87f0	0e 5f 06	asl $065f			asl 	GXSpriteOffset
.87f3	2e 60 06	rol $0660			rol 	GXSpriteOffset+1
.87f6	0e 5f 06	asl $065f			asl 	GXSpriteOffset
.87f9	2e 60 06	rol $0660			rol 	GXSpriteOffset+1
.87fc	60		rts				rts
.87fd					_GXFXSSTTable:
>87fd	08 10 18 20					.byte 	8,16,24,32
.065c					GXSizePixels:
>065c							.fill 	1
.065d					GXSizeBits:
>065d							.fill 	1
.065e					GXSpriteLUT:
>065e							.fill 	1
.065f					GXSpriteOffset:
>065f							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8801					GXSortXY:
.8801	20 1f 88	jsr $881f			jsr 	GXSortY 					; will be sorted on Y now
.8804	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8807	cd 35 06	cmp $0635			cmp 	gxX1
.880a	ad 32 06	lda $0632			lda 	gXX0+1
.880d	ed 36 06	sbc $0636			sbc 	gXX1+1
.8810	90 0c		bcc $881e			bcc 	_GXSXYExit 					; X0 < X1 exit
.8812	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8814	a0 04		ldy #$04			ldy 	#4
.8816	20 33 88	jsr $8833			jsr 	GXSwapXY
.8819	e8		inx				inx
.881a	c8		iny				iny
.881b	20 33 88	jsr $8833			jsr 	GXSwapXY
.881e					_GXSXYExit:
.881e	60		rts				rts
.881f					GXSortY:
.881f	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8822	cd 37 06	cmp $0637			cmp 	gxY1
.8825	90 0b		bcc $8832			bcc 	_GXSYSorted
.8827	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8829	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.882b					_GXSwap1:
.882b	20 33 88	jsr $8833			jsr 	GXSwapXY
.882e	88		dey				dey
.882f	ca		dex				dex
.8830	10 f9		bpl $882b			bpl 	_GXSwap1
.8832					_GXSYSorted:
.8832	60		rts				rts
.8833					GXSwapXY:
.8833	bd 31 06	lda $0631,x			lda 	gxX0,x
.8836	48		pha				pha
.8837	b9 31 06	lda $0631,y			lda 	gxX0,y
.883a	9d 31 06	sta $0631,x			sta 	gxX0,x
.883d	68		pla				pla
.883e	99 31 06	sta $0631,y			sta 	gxX0,y
.8841	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.8842					RunDemos:
.8842					loop:
.8842	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.8844	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8846	a0 00		ldy #$00			ldy 	#(0)
.8848	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.884b	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.884d	a2 01		ldx #$01			ldx 	#((1) & $FF)
.884f	a0 00		ldy #$00			ldy 	#(0)
.8851	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8854	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.8856	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.8858	a0 00		ldy #$00			ldy 	#(0)
.885a	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.885d	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.885f	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.8861	a0 00		ldy #$00			ldy 	#(0)
.8863	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8866	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.8868	a2 82		ldx #$82			ldx 	#((130) & $FF)
.886a	a0 1e		ldy #$1e			ldy 	#(30)
.886c	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.886f	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.8871	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.8873	a0 08		ldy #$08			ldy 	#(1*8)
.8875	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8878	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.887a	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.887c	a0 08		ldy #$08			ldy 	#(1*8)
.887e	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8881	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.8883	a2 00		ldx #$00			ldx 	#((0) & $FF)
.8885	a0 08		ldy #$08			ldy 	#(1*8)
.8887	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.888a	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.888c	a2 01		ldx #$01			ldx 	#((1) & $FF)
.888e	a0 08		ldy #$08			ldy 	#(1*8)
.8890	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8893	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.8895	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8897	a0 08		ldy #$08			ldy 	#(1*8)
.8899	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.889c	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.889e	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.88a0	a0 0a		ldy #$0a			ldy 	#(10)
.88a2	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.88a5	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.88a7	a2 64		ldx #$64			ldx 	#((100) & $FF)
.88a9	a0 64		ldy #$64			ldy 	#(100)
.88ab	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.88ae	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.88b0	a2 03		ldx #$03			ldx 	#((3) & $FF)
.88b2	a0 01		ldy #$01			ldy 	#(1)
.88b4	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.88b7	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.88b9	a2 02		ldx #$02			ldx 	#((2) & $FF)
.88bb	a0 00		ldy #$00			ldy 	#(0)
.88bd	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.88c0	60		rts				rts
.88c1	20 3a 9f	jsr $9f3a	demo:	jsr 	Random32Bit
.88c4	ee 3e 06	inc $063e			inc 	gxEORValue
.88c7	a9 30		lda #$30			lda 	#24*2
.88c9	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.88cc	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.88cf	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.88d2	80 ed		bra $88c1			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88d4					AssembleGroup1:
.88d4	a9 ff		lda #$ff			lda 	#$FF
.88d6	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88d9	80 02		bra $88dd			bra 	AsmGroup12
.88db					AssembleGroup2:
.88db	a5 00		lda $00				lda 	$00
.88dd					AsmGroup12:
.88dd	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88e0	68		pla				pla 								; pop the return address to access the information following.
.88e1	fa		plx				plx
.88e2	20 6b 89	jsr $896b			jsr 	AccessParameters 			; get opcode and save as base
.88e5	8d a4 04	sta $04a4			sta 	BaseOpcode
.88e8	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88eb	d0 08		bne $88f5			bne 	_AG12HaveMask
.88ed	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88ef	20 73 89	jsr $8973			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.88f2	8d a5 04	sta $04a5			sta 	ModeMask
.88f5					_AG12HaveMask:
.88f5	20 ae 8a	jsr $8aae			jsr 	TypeAndCalculateOperand 	; get zero page type
.88f8	da		phx				phx 								; save found address mode
.88f9	20 d7 89	jsr $89d7			jsr 	AssembleModeX
.88fc	fa		plx				plx  								; restore address mode
.88fd	b0 0b		bcs $890a			bcs 	_AG12Exit
.88ff	20 0b 89	jsr $890b			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8902	20 d7 89	jsr $89d7			jsr 	AssembleModeX
.8905	b0 03		bcs $890a			bcs 	_AG12Exit
.8907	4c 79 af	jmp $af79			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.890a					_AG12Exit:
.890a	60		rts				rts
.890b					PromoteToAbsolute:
.890b	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.890d	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.890f	f0 19		beq $892a			beq 	_PTADo
.8911	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8913	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8915	f0 13		beq $892a			beq 	_PTADo
.8917	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8919	e0 80		cpx #$80			cpx 	#AM_ZEROY
.891b	f0 0d		beq $892a			beq 	_PTADo
.891d	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.891f	e0 d1		cpx #$d1			cpx 	#AM_IND
.8921	f0 07		beq $892a			beq 	_PTADo
.8923	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8925	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8927	f0 01		beq $892a			beq 	_PTADo
.8929	60		rts				rts
.892a					_PTADo:
.892a	aa		tax				tax
.892b	60		rts				rts
.892c					AssembleGroup3:
.892c	68		pla				pla 								; get parameters, which is just the opcode.
.892d	fa		plx				plx
.892e	20 6b 89	jsr $896b			jsr 	AccessParameters 			; get and output opcode
.8931	20 83 89	jsr $8983			jsr 	AssemblerWriteByte
.8934	20 12 8b	jsr $8b12			jsr 	CalculateOperand 			; get a 16 bit operand
.8937	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.893a	38		sec				sec
.893b	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.893e	48		pha				pha 								; LSB in A
.893f	ad 10 04	lda $0410			lda 	NSMantissa1
.8942	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8945	aa		tax				tax 								; MSB in X
.8946	68		pla				pla
.8947	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8948	69 7f		adc #$7f			adc 	#$7F
.894a	90 01		bcc $894d			bcc 	_AG3NoCarry
.894c	e8		inx				inx
.894d					_AG3NoCarry:
.894d	38		sec				sec 								; fix back and write out anyways.
.894e	e9 80		sbc #$80			sbc 	#$80
.8950	20 83 89	jsr $8983			jsr 	AssemblerWriteByte
.8953	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8955	f0 0a		beq $8961			beq 	_AG3Exit
.8957	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.895a	29 01		and #$01			and 	#1
.895c	f0 03		beq $8961			beq 	_AG3Exit
.895e	4c 7e af	jmp $af7e			jmp 	RangeError 					; no, branch is out of range
.8961					_AG3Exit:
.8961	60		rts				rts
.8962					AssembleGroup4:
.8962	68		pla				pla 								; pop address
.8963	fa		plx				plx
.8964	20 6b 89	jsr $896b			jsr 	AccessParameters 			; access and get first
.8967	20 83 89	jsr $8983			jsr 	AssemblerWriteByte 			; output it.
.896a	60		rts				rts
.896b					AccessParameters:
.896b	8d a1 04	sta $04a1			sta 	ParamStart
.896e	8e a2 04	stx $04a2			stx 	ParamStart+1
.8971	a9 01		lda #$01			lda 	#1
.8973					GetParameter:
.8973	5a		phy				phy
.8974	a8		tay				tay
.8975	ad a1 04	lda $04a1			lda 	ParamStart
.8978	85 36		sta $36				sta 	zTemp0
.897a	ad a2 04	lda $04a2			lda 	ParamStart+1
.897d	85 37		sta $37				sta 	zTemp0+1
.897f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8981	7a		ply				ply
.8982	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8983					AssemblerWriteByte:
.8983	48		pha			pha
.8984	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8987	29 02		and #$02		and 	#2
.8989	f0 1b		beq $89a6		beq 	_AWBNoPrint
.898b	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.898e	20 c1 89	jsr $89c1		jsr 	PrintHex
.8991	ad 9e 04	lda $049e		lda		AssemblerAddress
.8994	20 c1 89	jsr $89c1		jsr 	PrintHex
.8997	a9 20		lda #$20		lda 	#' '
.8999	20 1e b1	jsr $b11e		jsr 	EXTPrintCharacter
.899c	68		pla			pla 									; print byte
.899d	48		pha			pha
.899e	20 c1 89	jsr $89c1		jsr 	PrintHex
.89a1	a9 0d		lda #$0d		lda 	#13
.89a3	20 1e b1	jsr $b11e		jsr 	EXTPrintCharacter
.89a6					_AWBNoPrint:
.89a6	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89a9	85 36		sta $36			sta 	zTemp0
.89ab	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89ae	f0 0e		beq $89be		beq 	_AWBRange
.89b0	85 37		sta $37			sta 	zTemp0+1
.89b2	68		pla			pla 									; write byte out
.89b3	92 36		sta ($36)		sta 	(zTemp0)
.89b5	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89b8	d0 03		bne $89bd		bne 	_AWBNoCarry
.89ba	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89bd					_AWBNoCarry:
.89bd	60		rts			rts
.89be					_AWBRange:
.89be	4c 7e af	jmp $af7e		jmp 	RangeError
.89c1					PrintHex:
.89c1	48		pha				pha
.89c2	4a		lsr a				lsr 	a
.89c3	4a		lsr a				lsr 	a
.89c4	4a		lsr a				lsr 	a
.89c5	4a		lsr a				lsr 	a
.89c6	20 ca 89	jsr $89ca			jsr 	_PrintNibble
.89c9	68		pla				pla
.89ca					_PrintNibble:
.89ca	29 0f		and #$0f			and 	#15
.89cc	c9 0a		cmp #$0a			cmp 	#10
.89ce	90 02		bcc $89d2			bcc 	_NoShift
.89d0	69 06		adc #$06			adc 	#6
.89d2					_NoShift:
.89d2	69 30		adc #$30			adc 	#48
.89d4	4c 1e b1	jmp $b11e			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89d7					AssembleModeX:
.89d7	5a		phy				phy
.89d8	ad a3 04	lda $04a3			lda 	IsGroup1
.89db	f0 17		beq $89f4			beq 	_AMXGroup2
.89dd	8a		txa				txa 							; is it in group # 1
.89de	29 40		and #$40			and 	#AM_ISG1
.89e0	f0 50		beq $8a32			beq 	_AMXFail 				; no, give up.
.89e2	8a		txa				txa 							; get back.
.89e3	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89e5	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89e7	d0 22		bne $8a0b			bne 	_AMXHaveInfo
.89e9	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89ec	c9 81		cmp #$81			cmp 	#$81
.89ee	f0 42		beq $8a32			beq 	_AMXFail
.89f0	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.89f2	80 17		bra $8a0b			bra 	_AMXHaveInfo 			; odd design decision there.
.89f4					_AMXGroup2:
.89f4	8a		txa				txa 							; is it in group 2 ?
.89f5	29 20		and #$20			and 	#AM_ISG2
.89f7	f0 39		beq $8a32			beq 	_AMXFail 				; no, give up.
.89f9	8a		txa				txa 							; get the offset into Y
.89fa	29 1f		and #$1f			and 	#$1F
.89fc	4a		lsr a				lsr 	a 						; make it 0-7.
.89fd	4a		lsr a				lsr  	a
.89fe	a8		tay				tay
.89ff	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a02					_AMXCheckOkay:
.8a02	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a03	88		dey				dey
.8a04	10 fc		bpl $8a02			bpl 	_AMXCheckOkay
.8a06	90 2a		bcc $8a32			bcc 	_AMXFail 				; not allowed.
.8a08	8a		txa				txa  							; get mask back
.8a09	29 1f		and #$1f			and 	#$1F
.8a0b					_AMXHaveInfo:
.8a0b	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a0d	10 05		bpl $8a14			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a0f	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a12	d0 1e		bne $8a32			bne 	_AMXFail
.8a14					_AMXAnySize:
.8a14	18		clc				clc 							; add offset to the base opcode
.8a15	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a18					_AMXOutputCode:
.8a18	20 83 89	jsr $8983			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a1b	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a1d	f0 10		beq $8a2f			beq 	_AMXExit
.8a1f	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a22	20 83 89	jsr $8983			jsr 	AssemblerWriteByte
.8a25	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a27	30 06		bmi $8a2f			bmi 	_AMXExit
.8a29	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a2c	20 83 89	jsr $8983			jsr 	AssemblerWriteByte
.8a2f					_AMXExit:
.8a2f	7a		ply				ply
.8a30	38		sec				sec
.8a31	60		rts				rts
.8a32					_AMXFail:
.8a32	a0 00		ldy #$00			ldy 	#0
.8a34					_AMXCheckOddities:
.8a34	8a		txa				txa
.8a35	d9 5d 8a	cmp $8a5d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a38	d0 16		bne $8a50			bne 	_AMXCONext
.8a3a	b9 5b 8a	lda $8a5b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a3d	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a40	d0 0e		bne $8a50			bne 	_AMXCONext
.8a42	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a44	10 05		bpl $8a4b			bpl 	_AMXCONotZero
.8a46	ad 10 04	lda $0410			lda 	NSMantissa1
.8a49	d0 05		bne $8a50			bne 	_AMXCONext
.8a4b					_AMXCONotZero:
.8a4b	b9 5c 8a	lda $8a5c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a4e	80 c8		bra $8a18			bra 	_AMXOutputCode 			; and assemble it
.8a50					_AMXCONext:
.8a50	c8		iny				iny
.8a51	c8		iny				iny
.8a52	c8		iny				iny
.8a53	b9 5b 8a	lda $8a5b,y			lda 	ExtraOpcode+0,y 		; end of table
.8a56	d0 dc		bne $8a34			bne 	_AMXCheckOddities
.8a58					_AMXCOFail:
.8a58	7a		ply				ply
.8a59	18		clc				clc
.8a5a	60		rts				rts
.8a5b					ExtraOpcode:
>8a5b	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a5e	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a61	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a64	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a67	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a6a	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a6d	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a70	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a73	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a76	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a79	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a7a					LabelHere:
.8a7a	c8		iny				iny 								; skip .
.8a7b	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a7d	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm 				; get a term
.8a80	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a83	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a85	d0 24		bne $8aab			bne 	_ALType
.8a87	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a8a	85 36		sta $36				sta 	zTemp0
.8a8c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a8f	85 37		sta $37				sta 	zTemp0+1
.8a91	5a		phy				phy 								; copy address in.
.8a92	a0 01		ldy #$01			ldy 	#1
.8a94	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8a97	92 36		sta ($36)			sta 	(zTemp0)
.8a99	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8a9c	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9e	c8		iny				iny
.8a9f	a9 00		lda #$00			lda 	#0
.8aa1	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa3	c8		iny				iny
.8aa4	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa6	c8		iny				iny
.8aa7	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa9	7a		ply				ply
.8aaa	60		rts				rts
.8aab					_ALType:
.8aab	4c 83 af	jmp $af83			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8aae					TypeAndCalculateOperand:
.8aae	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab0	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ab2	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ab4	f0 5b		beq $8b11			beq 	_TACOExit
.8ab6	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ab8	f0 57		beq $8b11			beq 	_TACOExit
.8aba	c8		iny				iny
.8abb	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8abd	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8abf	f0 51		beq $8b12			beq 	CalculateOperand
.8ac1	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ac3	f0 1f		beq $8ae4			beq 	_TACOIndirect
.8ac5	88		dey				dey 								; undo get of first character
.8ac6	20 12 8b	jsr $8b12			jsr 	CalculateOperand 			; get operand
.8ac9	b1 30		lda ($30),y			lda 	(codePtr),y
.8acb	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8acd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8acf	d0 40		bne $8b11			bne 	_TACOExit
.8ad1	c8		iny				iny
.8ad2	20 0a a9	jsr $a90a			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8ad5	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ad7	c9 58		cmp #$58			cmp 	#'X'
.8ad9	f0 36		beq $8b11			beq 	_TACOExit
.8adb	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8add	c9 59		cmp #$59			cmp 	#'Y'
.8adf	f0 30		beq $8b11			beq 	_TACOExit
.8ae1					_TACOSyntax:
.8ae1	4c 79 af	jmp $af79			jmp 	SyntaxError
.8ae4					_TACOIndirect:
.8ae4	20 12 8b	jsr $8b12			jsr 	CalculateOperand 			; get the operand
.8ae7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8aeb	f0 17		beq $8b04			beq 	_TACOIndX
.8aed	20 93 a9	jsr $a993			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8af0	b1 30		lda ($30),y			lda 	(codePtr),y
.8af2	a2 d1		ldx #$d1			ldx 	#AM_IND
.8af4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8af6	d0 19		bne $8b11			bne 	_TACOExit
.8af8	c8		iny				iny
.8af9	20 0a a9	jsr $a90a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8afc	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8afe	d0 e1		bne $8ae1			bne 	_TACOSyntax
.8b00	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b02	80 0d		bra $8b11			bra 	_TACOExit
.8b04					_TACOIndX:
.8b04	c8		iny				iny
.8b05	20 0a a9	jsr $a90a			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b08	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b0a	d0 d5		bne $8ae1			bne 	_TACOSyntax
.8b0c	20 93 a9	jsr $a993			jsr 	CheckRightBracket			; check )
.8b0f	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b11					_TACOExit:
.8b11	60		rts				rts
.8b12					CalculateOperand:
.8b12	48		pha				pha
.8b13	da		phx				phx
.8b14	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b16	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger
.8b19	fa		plx				plx
.8b1a	68		pla				pla
.8b1b	60		rts				rts
.a90a					TACOCheckXY:
.a90a	b1 30		lda ($30),y			lda 	(codePtr),y
.a90c	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a90e	c9 40		cmp #$40			cmp 	#$40
.a910	d0 21		bne $a933			bne 	_TCXYFail
.a912	b1 30		lda ($30),y			lda 	(codePtr),y
.a914	18		clc				clc
.a915	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a917	85 37		sta $37				sta 	zTemp0+1
.a919	c8		iny				iny
.a91a	b1 30		lda ($30),y			lda 	(codePtr),y
.a91c	c8		iny				iny
.a91d	85 36		sta $36				sta 	zTemp0
.a91f	5a		phy				phy 								; save position
.a920	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a922	b1 36		lda ($36),y			lda 	(zTemp0),y
.a924	d0 0c		bne $a932			bne 	_TCXYPopFail
.a926	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a928	b1 36		lda ($36),y			lda 	(zTemp0),y
.a92a	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a92c	f0 08		beq $a936			beq 	_TCXYFound
.a92e	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a930	f0 04		beq $a936			beq 	_TCXYFound
.a932					_TCXYPopFail:
.a932	7a		ply				ply
.a933					_TCXYFail:
.a933	a9 00		lda #$00			lda 	#0
.a935	60		rts				rts
.a936					_TCXYFound:
.a936	7a		ply				ply 								; restore position
.a937	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a939	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b1c					EditProgramCode:
.8b1c	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b1f	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b22	20 e8 a1	jsr $a1e8			jsr 	MemorySearch
.8b25	90 05		bcc $8b2c			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b27	d0 03		bne $8b2c			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b29	20 62 b1	jsr $b162			jsr 	MemoryDeleteLine 			; delete the line
.8b2c					_EPCNoDelete:
.8b2c	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b2f	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b31	f0 0d		beq $8b40			beq 	_EPCNoInsert
.8b33	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b36	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b39	20 e8 a1	jsr $a1e8			jsr 	MemorySearch
.8b3c	18		clc				clc 								; insert at this point.
.8b3d	20 99 b1	jsr $b199			jsr 	MemoryInsertLine 			; insert the line
.8b40					_EPCNoInsert:
.8b40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b41					WarmStart:
.8b41	a2 ff		ldx #$ff			ldx 	#$FF
.8b43	9a		txs				txs
.8b44	20 34 b1	jsr $b134			jsr 	EXTInputLine 				; get line to lineBuffer
.8b47	20 8b a6	jsr $a68b			jsr 	TokeniseLine 				; tokenise the line
.8b4a	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8b4d	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8b50	d0 17		bne $8b69			bne 	_WSEditCode 				; if so,edit code.
.8b52	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b55	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8b57	85 30		sta $30				sta 	codePtr
.8b59	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b5b	85 31		sta $31				sta 	codePtr+1
.8b5d	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8b60	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b62	f0 dd		beq $8b41			beq 	WarmStart
.8b64	20 72 91	jsr $9172			jsr 	RUNCodePointerLine 			; execute that line.
.8b67	80 d8		bra $8b41			bra 	WarmStart
.8b69					_WSEditCode:
.8b69	20 1c 8b	jsr $8b1c			jsr 	EditProgramCode
.8b6c	20 da 8b	jsr $8bda			jsr 	ClearCommand
.8b6f	80 d0		bra $8b41			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b71					AssembleCommand:
.8b71	a2 00		ldx #$00			ldx 	#0
.8b73	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger 		; start address
.8b76	ad 08 04	lda $0408			lda 	NSMantissa0
.8b79	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b7c	ad 10 04	lda $0410			lda 	NSMantissa1
.8b7f	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b82	20 9b a9	jsr $a99b			jsr 	CheckComma
.8b85	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger 		; options
.8b88	ad 08 04	lda $0408			lda 	NSMantissa0
.8b8b	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b8e	60		rts				rts
.8b8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b90					AssertCommand:
.8b90	a2 00		ldx #$00			ldx 	#0
.8b92	20 00 a1	jsr $a100			jsr 	EvaluateInteger 			; the assert test
.8b95	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; exit if result is non zero.
.8b98	d0 05		bne $8b9f			bne 	_ACExit
.8b9a	a9 0a		lda #$0a		lda	#10
.8b9c	4c d1 95	jmp $95d1		jmp	ErrorHandler
.8b9f					_ACExit:
.8b9f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8ba0					CallCommand:
.8ba0	a2 00		ldx #$00			ldx 	#0
.8ba2	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger
.8ba5					_CCClear
.8ba5	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8ba6	20 89 a1	jsr $a189			jsr 	NSMSetZero
.8ba9	e0 04		cpx #$04			cpx 	#4
.8bab	d0 f8		bne $8ba5			bne 	_CCClear
.8bad	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8baf					_CCCParam:
.8baf	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bb3	d0 09		bne $8bbe			bne 	_CCCRun6502
.8bb5	c8		iny				iny 								; skip comma
.8bb6	e8		inx				inx	 								; next level
.8bb7	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bba	e0 03		cpx #$03			cpx 	#3
.8bbc	90 f1		bcc $8baf			bcc 	_CCCParam 					; done all 3 ?
.8bbe					_CCCRun6502:
.8bbe	5a		phy				phy 								; save position
.8bbf	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bc2	85 37		sta $37				sta 	zTemp0+1
.8bc4	ad 08 04	lda $0408			lda 	NSMantissa0
.8bc7	85 36		sta $36				sta 	zTemp0
.8bc9	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bcc	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bcf	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bd2	20 d7 8b	jsr $8bd7			jsr 	_CCCZTemp0 					; call zTemp0
.8bd5	7a		ply				ply 								; restore position and exit
.8bd6	60		rts				rts
.8bd7					_CCCZTemp0:
.8bd7	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bda					ClearCommand:
.8bda	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bdc	85 36		sta $36				sta 	0+zTemp0
.8bde	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8be0	85 37		sta $37				sta 	1+zTemp0
.8be2					_ClearZeroLoop:
.8be2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8be4	f0 24		beq $8c0a			beq 	_ClearZeroEnd
.8be6	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8be8	a9 00		lda #$00			lda 	#0
.8bea					_ClearOneVariable:
.8bea	91 36		sta ($36),y			sta 	(zTemp0),y
.8bec	c8		iny				iny
.8bed	c0 08		cpy #$08			cpy 	#8
.8bef	d0 f9		bne $8bea			bne 	_ClearOneVariable
.8bf1	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8bf3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bf5	c9 18		cmp #$18			cmp 	#NSTProcedure
.8bf7	d0 04		bne $8bfd			bne 	_ClearNotProcedure
.8bf9	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8bfb	91 36		sta ($36),y			sta 	(zTemp0),y
.8bfd					_ClearNotProcedure:
.8bfd	18		clc				clc 								; go to the next variable
.8bfe	b2 36		lda ($36)			lda 	(zTemp0)
.8c00	65 36		adc $36				adc 	zTemp0
.8c02	85 36		sta $36				sta 	zTemp0
.8c04	90 dc		bcc $8be2			bcc 	_ClearZeroLoop
.8c06	e6 37		inc $37				inc 	zTemp0+1
.8c08	80 d8		bra $8be2			bra 	_ClearZeroLoop
.8c0a					_ClearZeroEnd:
.8c0a	18		clc				clc
.8c0b	a5 36		lda $36				lda 	zTemp0
.8c0d	69 01		adc #$01			adc 	#1
.8c0f	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c12	a5 37		lda $37				lda 	zTemp0+1
.8c14	69 00		adc #$00			adc 	#0
.8c16	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c19	20 a2 a2	jsr $a2a2			jsr 	StackReset
.8c1c	20 7c b2	jsr $b27c			jsr 	StringSystemInitialise
.8c1f	20 f1 94	jsr $94f1			jsr 	ProcedureScan
.8c22	20 2e 91	jsr $912e			jsr 	Command_Restore
.8c25	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c28	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c2b	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c2e	20 98 9e	jsr $9e98			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c31	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c32					Command_Data:
.8c32	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c34	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c36	20 43 95	jsr $9543			jsr 	ScanForward
.8c39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c3a					DimCommand:
.8c3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3c	29 c0		and #$c0			and 	#$C0
.8c3e	c9 40		cmp #$40			cmp 	#$40
.8c40	d0 7a		bne $8cbc			bne 	_DCSyntax
.8c42	b1 30		lda ($30),y			lda 	(codePtr),y
.8c44	18		clc				clc
.8c45	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c47	85 3f		sta $3f				sta 	zaTemp+1
.8c49	c8		iny				iny
.8c4a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4c	c8		iny				iny
.8c4d	85 3e		sta $3e				sta 	zaTemp
.8c4f	5a		phy				phy
.8c50	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c52	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c54	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c56	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c58	f0 62		beq $8cbc			beq 	_DCSyntax
.8c5a	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c5c	29 04		and #$04			and 	#NSBIsArray
.8c5e	f0 64		beq $8cc4			beq 	_DCType
.8c60	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c62	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c64	d0 59		bne $8cbf			bne 	_DCRedefine
.8c66	7a		ply				ply
.8c67	20 c7 8c	jsr $8cc7			jsr 	_DCGetSize 				; get array size, check it.
.8c6a	5a		phy				phy
.8c6b	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c6d	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c6f	7a		ply				ply 							; is there a second (e.g. ,x)
.8c70	b1 30		lda ($30),y			lda 	(codePtr),y
.8c72	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c74	d0 0a		bne $8c80			bne 	_DCOneDimension
.8c76	c8		iny				iny 							; skip comma
.8c77	20 c7 8c	jsr $8cc7			jsr 	_DCGetSize 				; get 2nd array size
.8c7a	5a		phy				phy
.8c7b	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c7d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c7f	7a		ply				ply
.8c80					_DCOneDimension:
.8c80	5a		phy				phy 							; save position
.8c81	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c83	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c85	aa		tax				tax
.8c86	c8		iny				iny
.8c87	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c89	e8		inx				inx 							; bump them.
.8c8a	1a		inc a				inc 	a
.8c8b	20 15 ae	jsr $ae15			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c8e	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8c90	29 e0		and #$e0			and 	#$E0
.8c92	d0 23		bne $8cb7			bne 	_DCSize
.8c94	a0 02		ldy #$02			ldy 	#2 						; get base type
.8c96	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c98	20 d5 8c	jsr $8cd5			jsr 	ScaleByBaseType 		; scale by base type
.8c9b	a5 36		lda $36				lda 	zTemp0
.8c9d	a6 37		ldx $37				ldx 	zTemp0+1
.8c9f	20 5a 9e	jsr $9e5a			jsr 	AllocateXABytes 		; allocate memory
.8ca2	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8ca4	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca6	c8		iny				iny
.8ca7	8a		txa				txa
.8ca8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8caa	7a		ply				ply 							; get position back
.8cab	20 93 a9	jsr $a993			jsr 	CheckRightBracket 		; check )
.8cae	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb0	c8		iny				iny 							; consume in case
.8cb1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cb3	f0 85		beq $8c3a			beq 	DimCommand
.8cb5	88		dey				dey 							; undo consume
.8cb6	60		rts				rts
.8cb7					_DCSize:
.8cb7	a9 16		lda #$16		lda	#22
.8cb9	4c d1 95	jmp $95d1		jmp	ErrorHandler
.8cbc					_DCSyntax:
.8cbc	4c 79 af	jmp $af79			jmp 	SyntaxError
.8cbf					_DCRedefine:
.8cbf	a9 15		lda #$15		lda	#21
.8cc1	4c d1 95	jmp $95d1		jmp	ErrorHandler
.8cc4					_DCType:
.8cc4	4c 83 af	jmp $af83			jmp 	TypeError
.8cc7					_DCGetSize:
.8cc7	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cc9	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger 	; get array dimension
.8ccc	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cce	f0 e7		beq $8cb7			beq 	_DCSize
.8cd0	c9 fe		cmp #$fe			cmp 	#254
.8cd2	f0 e3		beq $8cb7			beq 	_DCSize
.8cd4	60		rts				rts
.8cd5					ScaleByBaseType:
.8cd5	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cd7	d0 19		bne $8cf2			bne 	_SBBTString
.8cd9	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cdb	48		pha				pha
.8cdc	a5 36		lda $36				lda 	zTemp0
.8cde	48		pha				pha
.8cdf	06 36		asl $36				asl 	zTemp0 					; x 2
.8ce1	26 37		rol $37				rol 	zTemp0+1
.8ce3	06 36		asl $36				asl 	zTemp0 					; x 4
.8ce5	26 37		rol $37				rol 	zTemp0+1
.8ce7	68		pla				pla 							; add stacked value = x 5
.8ce8	65 36		adc $36				adc 	zTemp0
.8cea	85 36		sta $36				sta 	zTemp0
.8cec	68		pla				pla
.8ced	65 37		adc $37				adc 	zTemp0+1
.8cef	85 37		sta $37				sta 	zTemp0+1
.8cf1	60		rts				rts
.8cf2					_SBBTString:
.8cf2	06 36		asl $36				asl 	zTemp0
.8cf4	26 37		rol $37				rol 	zTemp0+1
.8cf6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8cf7					EndCommand:
.8cf7	4c 41 8b	jmp $8b41			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8cfa					ForCommand:
.8cfa	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8cfc	20 3d a2	jsr $a23d			jsr 	StackOpen
.8cff	a2 00		ldx #$00			ldx 	#0
.8d01	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm
.8d04	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d07	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d09	d0 49		bne $8d54			bne		_FCError
.8d0b	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d0d	20 a3 a9	jsr $a9a3			jsr 	CheckNextA
.8d10	e8		inx				inx
.8d11	20 00 a1	jsr $a100			jsr 	EvaluateInteger 			; <from> in +1
.8d14	b1 30		lda ($30),y			lda 	(codePtr),y
.8d16	c8		iny				iny 								; consume it
.8d17	48		pha				pha 								; save on stack for later
.8d18	c9 ad		cmp #$ad			cmp 	#KWD_DOWNTO
.8d1a	f0 04		beq $8d20			beq 	_FCNoSyntax
.8d1c	c9 c2		cmp #$c2			cmp 	#KWD_TO
.8d1e	d0 37		bne $8d57			bne 	_FCSyntaxError
.8d20					_FCNoSyntax:
.8d20	e8		inx				inx
.8d21	20 00 a1	jsr $a100			jsr 	EvaluateInteger
.8d24	20 81 a2	jsr $a281			jsr 	STKSaveCodePosition 		; save loop back position
.8d27	68		pla				pla 								; restore DOWNTO or TO
.8d28	5a		phy				phy 								; save Y on the stack
.8d29	49 ad		eor #$ad			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8d2b	f0 02		beq $8d2f			beq 	_FCNotDownTo
.8d2d	a9 02		lda #$02			lda 	#2
.8d2f					_FCNotDownTo:
.8d2f	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8d30	a0 10		ldy #$10			ldy 	#16
.8d32	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8d34	a0 06		ldy #$06			ldy 	#6
.8d36	ad 08 04	lda $0408			lda 	NSMantissa0
.8d39	91 34		sta ($34),y			sta 	(basicStack),y
.8d3b	ad 10 04	lda $0410			lda 	NSMantissa1
.8d3e	c8		iny				iny
.8d3f	91 34		sta ($34),y			sta 	(basicStack),y
.8d41	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8d43	a2 01		ldx #$01			ldx 	#1
.8d45	20 5a 8d	jsr $8d5a			jsr 	FCIntegerToStack
.8d48	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8d4a	a2 02		ldx #$02			ldx 	#2
.8d4c	20 5a 8d	jsr $8d5a			jsr 	FCIntegerToStack
.8d4f	20 7a 8d	jsr $8d7a			jsr 	CopyIndexToReference
.8d52	7a		ply				ply 								; restore position
.8d53	60		rts				rts
.8d54					_FCError:
.8d54	4c 83 af	jmp $af83			jmp 	TypeError
.8d57					_FCSyntaxError:
.8d57	4c 79 af	jmp $af79			jmp 	SyntaxError
.8d5a					FCIntegerToStack:
.8d5a	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8d5d	10 03		bpl $8d62			bpl	 	_FCNotNegative
.8d5f	20 3e a1	jsr $a13e			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8d62					_FCNotNegative:
.8d62	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8d65	91 34		sta ($34),y			sta 	(basicStack),y
.8d67	c8		iny				iny
.8d68	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d6b	91 34		sta ($34),y			sta 	(basicStack),y
.8d6d	c8		iny				iny
.8d6e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d71	91 34		sta ($34),y			sta 	(basicStack),y
.8d73	c8		iny				iny
.8d74	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8d77	91 34		sta ($34),y			sta 	(basicStack),y
.8d79	60		rts				rts
.8d7a					CopyIndexToReference:
.8d7a	5a		phy				phy
.8d7b	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8d7d	38		sec				sec 								; (because we copy from offset 8)
.8d7e	b1 34		lda ($34),y			lda 	(basicStack),y
.8d80	e9 08		sbc #$08			sbc 	#8
.8d82	85 36		sta $36				sta 	zTemp0
.8d84	c8		iny				iny
.8d85	b1 34		lda ($34),y			lda 	(basicStack),y
.8d87	e9 00		sbc #$00			sbc 	#0
.8d89	85 37		sta $37				sta 	zTemp0+1
.8d8b	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8d8d	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8d8f	b1 34		lda ($34),y			lda 	(basicStack),y
.8d91	0a		asl a				asl 	a 							; into carry
.8d92	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8d94	90 14		bcc $8daa			bcc 	_CITRNormal
.8d96	38		sec				sec
.8d97					_CITRNegative:
.8d97	a9 00		lda #$00			lda 	#0
.8d99	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d9b	91 36		sta ($36),y			sta 	(zTemp0),y
.8d9d	c8		iny				iny
.8d9e	ca		dex				dex
.8d9f	d0 f6		bne $8d97			bne 	_CITRNegative
.8da1	88		dey				dey 								; look at MSB of mantissa
.8da2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8da4	09 80		ora #$80			ora 	#$80
.8da6	91 36		sta ($36),y			sta 	(zTemp0),y
.8da8	7a		ply				ply
.8da9	60		rts				rts
.8daa					_CITRNormal:
.8daa	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8dac	91 36		sta ($36),y			sta 	(zTemp0),y
.8dae	c8		iny				iny
.8daf	ca		dex				dex
.8db0	d0 f8		bne $8daa			bne 	_CITRNormal
.8db2	7a		ply				ply 								; and exit.
.8db3	60		rts				rts
.8db4					NextCommand:
.8db4	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8db6	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8db8	20 69 a2	jsr $a269			jsr 	StackCheckFrame
.8dbb	5a		phy				phy
.8dbc	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8dbe	b1 34		lda ($34),y			lda 	(basicStack),y
.8dc0	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8dc2	30 02		bmi $8dc6			bmi 	_NCStepNeg
.8dc4	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8dc6					_NCStepNeg:
.8dc6	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8dc8	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8dca	18		clc				clc
.8dcb					_NCBump:
.8dcb	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8dcd	91 34		sta ($34),y			sta 	(basicStack),y
.8dcf	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8dd1	c8		iny				iny 								; next byte
.8dd2	ca		dex				dex 								; do four times
.8dd3	d0 f6		bne $8dcb			bne 	_NCBump
.8dd5	20 7a 8d	jsr $8d7a			jsr		CopyIndexToReference		; copy it to the reference variable.
.8dd8	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8dda	b1 34		lda ($34),y			lda 	(basicStack),y
.8ddc	0a		asl a				asl 	a 							; sign bit to carry
.8ddd	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8ddf	85 38		sta $38				sta 	zTemp1
.8de1	90 02		bcc $8de5			bcc 	_NCCompRev 					; use if step is +ve
.8de3	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8de5					_NCCompRev:
.8de5	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8de7	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8de9	85 39		sta $39				sta 	zTemp1+1
.8deb	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8ded	38		sec				sec
.8dee					_NCCompare:
.8dee	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8df0	b1 34		lda ($34),y			lda 	(basicStack),y
.8df2	a4 39		ldy $39				ldy 	zTemp1+1
.8df4	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8df6	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8df8	e6 39		inc $39				inc 	zTemp1+1
.8dfa	ca		dex				dex 								; do it 4 times.
.8dfb	d0 f1		bne $8dee			bne 	_NCCompare
.8dfd	50 02		bvc $8e01			bvc 	_NCNoOverflow 				; convert to signed comparison
.8dff	49 80		eor #$80			eor 	#$80
.8e01					_NCNoOverflow:
.8e01	7a		ply				ply 								; restore Y position
.8e02	0a		asl a				asl 	a 							; is bit 7 set.
.8e03	90 04		bcc $8e09			bcc 	_NCLoopback 				; if no , >= so loop back
.8e05	20 5b a2	jsr $a25b			jsr 	StackClose 					; exit the loop
.8e08	60		rts				rts
.8e09					_NCLoopBack:
.8e09	20 92 a2	jsr $a292			jsr 	STKLoadCodePosition 		; loop back
.8e0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8e0d					Command_GOSUB:
.8e0d	a2 00		ldx #$00			ldx 	#0
.8e0f	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8e12	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8e14	20 3d a2	jsr $a23d			jsr 	StackOpen 					; create frame
.8e17	20 81 a2	jsr $a281			jsr 	STKSaveCodePosition 		; save current position
.8e1a	4c 30 8e	jmp $8e30			jmp 	GotoStackX
.8e1d					Command_RETURN:
.8e1d	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8e1f	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8e21	20 69 a2	jsr $a269			jsr 	StackCheckFrame
.8e24	20 92 a2	jsr $a292			jsr 	STKLoadCodePosition 		; restore code position
.8e27	20 5b a2	jsr $a25b			jsr 	StackClose
.8e2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8e2b					GotoCommand:
.8e2b	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8e2d	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger
.8e30					GotoStackX:
.8e30	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8e33	48		pha				pha 								; it is slightly inefficient, just in cases.
.8e34	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e37	fa		plx				plx
.8e38	20 e8 a1	jsr $a1e8			jsr 	MemorySearch 				; transfer to line number AX.
.8e3b	90 05		bcc $8e42			bcc 	_GotoError 					; not found, off end.
.8e3d	d0 03		bne $8e42			bne 	_GotoError 					; not found exactly
.8e3f	4c 6b 91	jmp $916b			jmp 	RunNewLine 					; and go straight to new line code.
.8e42					_GotoError:
.8e42	a9 0d		lda #$0d		lda	#13
.8e44	4c d1 95	jmp $95d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8e47					IfCommand:
.8e47	a2 00		ldx #$00			ldx 	#0 							; If what.
.8e49	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber
.8e4c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e4e	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8e50	d0 0a		bne $8e5c			bne 	_IFStructured
.8e52	c8		iny				iny 								; consume THEN
.8e53	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; is it zero
.8e56	f0 01		beq $8e59			beq 	_IfFail 					; if fail, go to next line
.8e58	60		rts				rts 								; if THEN just continue
.8e59					_IfFail:
.8e59	4c d0 91	jmp $91d0			jmp 	EOLCommand
.8e5c					_IfStructured:
.8e5c	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; is it zero
.8e5f	d0 07		bne $8e68			bne 	_IfExit 					; if not, then continue normally.
.8e61	a9 ae		lda #$ae			lda 	#KWD_ELSE 					; look for else/endif
.8e63	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.8e65	20 43 95	jsr $9543			jsr 	ScanForward 				; and run from there/
.8e68					_IfExit:
.8e68	60		rts				rts
.8e69					ElseCode:
.8e69	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8e6b	aa		tax				tax 								; so just go to the structure exit
.8e6c	20 43 95	jsr $9543			jsr 	ScanForward
.8e6f	60		rts				rts
.8e70					EndIf:
.8e70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8e71					LetCommand:
.8e71	a2 00		ldx #$00			ldx 	#0
.8e73	b1 30		lda ($30),y			lda 	(codePtr),y
.8e75	c9 10		cmp #$10			cmp 	#KWD_AT
.8e77	d0 16		bne $8e8f			bne 	_LCStandard
.8e79	c8		iny				iny 								; skip equal
.8e7a	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm 				; get a number
.8e7d	20 ef 9a	jsr $9aef			jsr 	Dereference 				; dereference it
.8e80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8e83	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8e85	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8e88	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8e8a	d0 10		bne $8e9c			bne 	_LCMain
.8e8c	4c 83 af	jmp $af83			jmp 	TypeError 					; was a reference before.
.8e8f					_LCStandard:
.8e8f	ad c2 99	lda $99c2			lda 	PrecedenceLevel+"*"			; precedence > this
.8e92	20 dc 99	jsr $99dc			jsr 	EvaluateExpressionAtPrecedence
.8e95	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8e98	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8e9a	f0 0e		beq $8eaa			beq 	_LetGoProc 					; it's a procedure call.
.8e9c					_LCMain:
.8e9c	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8e9e	20 a3 a9	jsr $a9a3			jsr 	CheckNextA
.8ea1	e8		inx				inx 								; RHS
.8ea2	20 d4 a0	jsr $a0d4			jsr 	EvaluateValue
.8ea5	ca		dex				dex
.8ea6	20 ad 8e	jsr $8ead			jsr 	AssignVariable
.8ea9	60		rts				rts
.8eaa					_LetGoProc:
.8eaa	4c 46 90	jmp $9046			jmp 	CallProcedure
.8ead					AssignVariable:
.8ead	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8eb0	48		pha				pha 								; save a copy
.8eb1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8eb4	29 10		and #$10			and 	#NSBIsString
.8eb6	d0 0b		bne $8ec3			bne 	_ASError
.8eb8	68		pla				pla 								; get back
.8eb9	29 10		and #$10			and 	#NSBIsString 				; check type
.8ebb	d0 03		bne $8ec0			bne 	_ASString
.8ebd	4c 17 9a	jmp $9a17			jmp 	AssignNumber
.8ec0					_ASString:
.8ec0	4c 85 9a	jmp $9a85			jmp 	AssignString
.8ec3					_ASError:
.8ec3	4c 83 af	jmp $af83			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8ec6					Command_List:
.8ec6	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8ec9	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8ecc	a9 ff		lda #$ff			lda 	#$FF
.8ece	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8ed1	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8ed4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ed6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ed8	f0 1e		beq $8ef8			beq 	_CLSecond
.8eda	20 56 8f	jsr $8f56			jsr 	CLIsDigit 					; if not digit, list all
.8edd	b0 24		bcs $8f03			bcs 	_CLStart
.8edf	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8ee1	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger
.8ee4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ee8	f0 0e		beq $8ef8			beq 	_CLSecond 					; if so go get it
.8eea	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8eed	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8ef0	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8ef3	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8ef6	80 0b		bra $8f03			bra 	_CLStart
.8ef8					_CLSecond:
.8ef8	c8		iny				iny 								; consume comma
.8ef9	20 56 8f	jsr $8f56			jsr 	CLIsDigit 					; digit found
.8efc	b0 05		bcs $8f03			bcs 	_CLStart 					; if not, continue listing
.8efe	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f00	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger
.8f03					_CLStart
.8f03	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f05	85 30		sta $30				sta 	codePtr
.8f07	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f09	85 31		sta $31				sta 	codePtr+1
.8f0b					_CLLoop:
.8f0b	20 5f b1	jsr $b15f			jsr 	EXTBreakCheck 				; break check
.8f0e	f0 30		beq $8f40			beq 	_CLExit
.8f10	b2 30		lda ($30)			lda 	(codePtr)
.8f12	f0 2c		beq $8f40			beq 	_CLExit
.8f14	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8f16	20 43 8f	jsr $8f43			jsr 	CLCompareLineNo
.8f19	90 18		bcc $8f33			bcc 	_CLNext
.8f1b	a2 07		ldx #$07			ldx 	#7
.8f1d	20 43 8f	jsr $8f43			jsr 	CLCompareLineNo
.8f20	f0 02		beq $8f24			beq 	_CLDoThisOne
.8f22	b0 0f		bcs $8f33			bcs 	_CLNext
.8f24					_CLDoThisOne:
.8f24	20 9f 93	jsr $939f			jsr 	ListConvertLine 			; convert line into token Buffer
.8f27	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8f29	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8f2b	20 2a 96	jsr $962a			jsr 	PrintStringXA
.8f2e	a9 0d		lda #$0d			lda 	#13 						; new line
.8f30	20 1e b1	jsr $b11e			jsr 	EXTPrintCharacter
.8f33					_CLNext:
.8f33	18		clc				clc
.8f34	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f36	65 30		adc $30				adc 	codePtr
.8f38	85 30		sta $30				sta 	codePtr
.8f3a	90 02		bcc $8f3e			bcc 	_CREExit
.8f3c	e6 31		inc $31				inc 	codePtr+1
.8f3e					_CREExit:
.8f3e	80 cb		bra $8f0b			bra 	_CLLoop
.8f40					_CLExit:
.8f40	4c 41 8b	jmp $8b41			jmp 	WarmStart
.8f43					CLCompareLineNo:
.8f43	38		sec				sec
.8f44	a0 01		ldy #$01			ldy 	#1
.8f46	b1 30		lda ($30),y			lda 	(codePtr),y
.8f48	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8f4b	85 36		sta $36				sta 	zTemp0
.8f4d	c8		iny				iny
.8f4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8f50	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8f53	05 36		ora $36				ora 	zTemp0
.8f55	60		rts				rts
.8f56					CLIsDigit:
.8f56	b1 30		lda ($30),y			lda 	(codePtr),y
.8f58	c9 30		cmp #$30			cmp 	#"0"
.8f5a	90 03		bcc $8f5f			bcc	 	_CLIDExitFalse
.8f5c	c9 3a		cmp #$3a			cmp 	#"9"+1
.8f5e	60		rts				rts
.8f5f					_CLIDExitFalse:
.8f5f	38		sec				sec
.8f60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8f61					Command_LOCAL:
.8f61	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8f63	20 6f 8f	jsr $8f6f			jsr 	LocaliseNextTerm 			; convert term to a local.
.8f66	b1 30		lda ($30),y			lda 	(codePtr),y
.8f68	c8		iny				iny
.8f69	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f6b	f0 f4		beq $8f61			beq 	Command_LOCAL
.8f6d	88		dey				dey 								; unpick pre-get
.8f6e	60		rts				rts
.8f6f					LocaliseNextTerm:
.8f6f	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm 				; evaluate the term
.8f72	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f75	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8f77	f0 69		beq $8fe2			beq		_LNTError
.8f79	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8f7c	85 36		sta $36				sta 	zTemp0
.8f7e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f81	85 37		sta $37				sta  	zTemp0+1
.8f83	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f86	29 10		and #$10			and 	#NSBIsString
.8f88	d0 22		bne $8fac			bne 	_LNTPushString
.8f8a	5a		phy				phy
.8f8b	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8f8d					_LNTPushNumLoop:
.8f8d	b1 36		lda ($36),y			lda		(zTemp0),y
.8f8f	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8f92	a9 00		lda #$00			lda 	#0
.8f94	91 36		sta ($36),y			sta 	(zTemp0),y
.8f96	c8		iny				iny
.8f97	c0 05		cpy #$05			cpy 	#5
.8f99	d0 f2		bne $8f8d			bne 	_LNTPushNumLoop
.8f9b	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8f9d	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8fa0	a5 37		lda $37				lda 	zTemp0+1
.8fa2	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8fa5	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8fa7	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8faa	7a		ply				ply
.8fab	60		rts				rts
.8fac					_LNTPushString:
.8fac	5a		phy				phy
.8fad	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8faf	85 38		sta $38				sta 	zTemp1
.8fb1	a0 01		ldy #$01			ldy 	#1
.8fb3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fb5	85 39		sta $39				sta 	zTemp1+1
.8fb7	a0 00		ldy #$00			ldy 	#0 							; output string
.8fb9	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8fbb	f0 0a		beq $8fc7			beq 	_LNTStringOut
.8fbd					_LNTPushStrLoop:
.8fbd	b1 38		lda ($38),y			lda 	(zTemp1),y
.8fbf	f0 06		beq $8fc7			beq 	_LNTStringOut
.8fc1	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8fc4	c8		iny				iny
.8fc5	80 f6		bra $8fbd			bra 	_LNTPushStrLoop
.8fc7					_LNTStringOut:
.8fc7	98		tya				tya									; output length
.8fc8	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8fcb	a9 00		lda #$00			lda 	#0 							; clear original string.
.8fcd	92 38		sta ($38)			sta 	(zTemp1)
.8fcf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8fd2	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8fd5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8fd8	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8fdb	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8fdd	20 1b a2	jsr $a21b			jsr 	StackPushByte
.8fe0	7a		ply				ply
.8fe1	60		rts				rts
.8fe2					_LNTError:
.8fe2	4c 79 af	jmp $af79			jmp 	SyntaxError
.a93a					LocalPopValue:
.a93a	20 34 a2	jsr $a234			jsr 	StackPopByte
.a93d	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a93f	d0 17		bne $a958			bne 	_LPVString
.a941	20 34 a2	jsr $a234			jsr 	StackPopByte 				; address
.a944	85 37		sta $37				sta 	zTemp0+1
.a946	20 34 a2	jsr $a234			jsr 	StackPopByte
.a949	85 36		sta $36				sta 	zTemp0
.a94b	5a		phy				phy
.a94c	a0 04		ldy #$04			ldy 	#4 							; copy back
.a94e					_LPVNumberCopy:
.a94e	20 34 a2	jsr $a234			jsr 	StackPopByte
.a951	91 36		sta ($36),y			sta 	(zTemp0),y
.a953	88		dey				dey
.a954	10 f8		bpl $a94e			bpl 	_LPVNumberCopy
.a956	7a		ply				ply 								; and complete
.a957	60		rts				rts
.a958					_LPVString:
.a958	20 34 a2	jsr $a234			jsr 	StackPopByte 				; address of record => zTemp0
.a95b	85 37		sta $37				sta 	zTemp0+1
.a95d	20 34 a2	jsr $a234			jsr 	StackPopByte
.a960	85 36		sta $36				sta 	zTemp0
.a962	5a		phy				phy
.a963	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a965	85 38		sta $38				sta 	zTemp1
.a967	a0 01		ldy #$01			ldy 	#1
.a969	b1 36		lda ($36),y			lda 	(zTemp0),y
.a96b	85 39		sta $39				sta 	zTemp1+1
.a96d	20 34 a2	jsr $a234			jsr 	StackPopByte 				; # to get => y
.a970	a8		tay				tay
.a971	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a973	f0 0e		beq $a983			beq 	_LPVStringCopied
.a975	a9 00		lda #$00			lda 	#0 							; NULL on end
.a977	91 38		sta ($38),y			sta 	(zTemp1),y
.a979					_LPVStringCopy:
.a979	88		dey				dey
.a97a	30 07		bmi $a983			bmi 	_LPVStringCopied
.a97c	20 34 a2	jsr $a234			jsr 	StackPopByte
.a97f	91 38		sta ($38),y			sta 	(zTemp1),y
.a981	80 f6		bra $a979			bra 	_LPVStringCopy
.a983					_LPVStringCopied:
.a983	fa		plx				plx
.a984	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8fe5					NewCommand:
.8fe5	20 c6 a1	jsr $a1c6			jsr 	MemoryNew
.8fe8	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8feb	20 da 8b	jsr $8bda			jsr 	ClearCommand 				; clear everything.
.8fee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8fef					Command_Print:
.8fef	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ff0					_CPLoop:
.8ff0	08		php				php 								; save last action flag
.8ff1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ff3	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ff5	f0 46		beq $903d			beq 	_CPExit
.8ff7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ff9	f0 42		beq $903d			beq 	_CPExit
.8ffb	68		pla				pla 								; throw last action flag
.8ffc	b1 30		lda ($30),y			lda 	(codePtr),y
.8ffe	c8		iny				iny
.8fff	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9001	f0 37		beq $903a			beq 	_CPContinueWithSameLine
.9003	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9005	f0 2e		beq $9035			beq 	_CPTab
.9007	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9009	f0 26		beq $9031			beq 	_CPNewLine
.900b	88		dey				dey 								; undo the get.
.900c	a2 00		ldx #$00			ldx 	#0
.900e	20 d4 a0	jsr $a0d4			jsr 	EvaluateValue 				; get a value into slot 0
.9011	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9014	29 10		and #$10			and 	#NSBIsString
.9016	f0 0b		beq $9023			beq 	_CPNumber
.9018	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.901b	ad 08 04	lda $0408			lda 	NSMantissa0
.901e	20 2a 96	jsr $962a			jsr 	PrintStringXA
.9021	80 cc		bra $8fef			bra 	Command_Print 				; loop round clearing carry so NL if end
.9023					_CPNumber:
.9023	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9025	20 aa 9f	jsr $9faa			jsr 	ConvertNumberToString 		; convert to string
.9028	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.902a	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.902c	20 2a 96	jsr $962a			jsr 	PrintStringXA
.902f	80 be		bra $8fef			bra 	Command_Print 				; loop round clearing carry so NL if end
.9031					_CPNewLine:
.9031	a9 0d		lda #$0d			lda 	#13
.9033	80 02		bra $9037			bra 	_CPPrintChar
.9035					_CPTab:
.9035	a9 09		lda #$09			lda 	#9 							; print TAB
.9037					_CPPrintChar:
.9037	20 1e b1	jsr $b11e			jsr 	EXTPrintCharacter
.903a					_CPContinueWithSameLine:
.903a	38		sec				sec 								; loop round with carry set, which
.903b	80 b3		bra $8ff0			bra 	_CPLoop 					; will inhibit final CR
.903d					_CPExit:
.903d	28		plp				plp 								; get last action flag
.903e	b0 05		bcs $9045			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9040	a9 0d		lda #$0d			lda 	#13 						; print new line
.9042	20 1e b1	jsr $b11e			jsr 	EXTPrintCharacter
.9045					_CPExit2:
.9045	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.9046					CallProcedure:
.9046	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9048	b1 30		lda ($30),y			lda 	(codePtr),y
.904a	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.904c	f0 0c		beq $905a			beq 	_CPEndParam
.904e					_CPParamLoop:
.904e	20 da 99	jsr $99da			jsr 	EvaluateExpression 			; get parameter onto stack
.9051	e8		inx				inx 								; bump next stack
.9052	b1 30		lda ($30),y			lda 	(codePtr),y
.9054	c8		iny				iny
.9055	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9057	f0 f5		beq $904e			beq 	_CPParamLoop
.9059	88		dey				dey 								; unpick.
.905a					_CPEndParam:
.905a	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.905d	c8		iny				iny									; skip right bracket
.905e	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9060	20 3d a2	jsr $a23d			jsr 	StackOpen
.9063	20 81 a2	jsr $a281			jsr 	STKSaveCodePosition 		; save loop position
.9066	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9069	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.906b	ad 10 04	lda $0410			lda 	NSMantissa1
.906e	85 37		sta $37				sta 	zTemp0+1
.9070	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9072	b2 36		lda ($36)			lda 	(zTemp0)
.9074	85 30		sta $30				sta 	safePtr
.9076	b1 36		lda ($36),y			lda 	(zTemp0),y
.9078	85 31		sta $31				sta 	safePtr+1
.907a	c8		iny				iny
.907b	b1 36		lda ($36),y			lda 	(zTemp0),y
.907d	85 32		sta $32				sta 	safePtr+2
.907f	c8		iny				iny
.9080	b1 36		lda ($36),y			lda 	(zTemp0),y
.9082	85 33		sta $33				sta 	safePtr+3
.9084	c8		iny				iny 								; get Y offset -> Y
.9085	b1 36		lda ($36),y			lda 	(zTemp0),y
.9087	a8		tay				tay
.9088	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.908a	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.908d	f0 13		beq $90a2			beq 	_ParamExit 					; if so, exit.
.908f					_ParamExtract:
.908f	ca		dex				dex 								; put a local term on the level before
.9090	20 6f 8f	jsr $8f6f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9093	20 ad 8e	jsr $8ead			jsr 	AssignVariable 				; assign stacked value to the variable.
.9096	e8		inx				inx 								; advance to next parameter to do.
.9097	e8		inx				inx
.9098	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.909b	f0 05		beq $90a2			beq 	_ParamExit
.909d	20 9b a9	jsr $a99b			jsr 	CheckComma 					; comma seperating parameters
.90a0	80 ed		bra $908f			bra 	_ParamExtract
.90a2					_ParamExit:
.90a2	20 93 a9	jsr $a993			jsr 	CheckRightBracket 			; check )
.90a5	60		rts				rts 								; and continue from here
.a985					Command_ENDPROC:
.a985	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a987	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a989	20 69 a2	jsr $a269			jsr 	StackCheckFrame
.a98c	20 92 a2	jsr $a292			jsr 	STKLoadCodePosition 		; restore code position
.a98f	20 5b a2	jsr $a25b			jsr 	StackClose
.a992	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.90a6					Command_Read:
.90a6	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.90a8	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm
.90ab	bd 00 04	lda $0400,x			lda 	NSStatus,x
.90ae	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.90b0	f0 4a		beq $90fc			beq 	_CRSyntax 					; check reference (bit 0)
.90b2	20 45 91	jsr $9145			jsr 	SwapDataCodePtrs 			; swap code and data
.90b5	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.90b8	d0 20		bne $90da			bne 	_CRContinueData
.90ba					_CRKeepSearching:
.90ba	a9 ab		lda #$ab			lda 	#KWD_DATA 					; scan for instruction
.90bc	aa		tax				tax
.90bd	20 43 95	jsr $9543			jsr 	ScanForward
.90c0	c9 ab		cmp #$ab			cmp 	#KWD_DATA 					; found data ?
.90c2	f0 16		beq $90da			beq 	_CRHaveData 				; found it
.90c4	18		clc				clc
.90c5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.90c7	65 30		adc $30				adc 	codePtr
.90c9	85 30		sta $30				sta 	codePtr
.90cb	90 02		bcc $90cf			bcc 	_CREExit
.90cd	e6 31		inc $31				inc 	codePtr+1
.90cf					_CREExit:
.90cf	a0 03		ldy #$03			ldy 	#3 							; start of line.
.90d1	b2 30		lda ($30)			lda 	(codePtr)
.90d3	d0 e5		bne $90ba			bne 	_CRKeepSearching
.90d5	a9 0b		lda #$0b		lda	#11
.90d7	4c d1 95	jmp $95d1		jmp	ErrorHandler
.90da					_CRHaveData:
.90da					_CRContinueData:
.90da	a2 01		ldx #$01			ldx 	#1
.90dc	20 d4 a0	jsr $a0d4			jsr 	EvaluateValue 				; evaluate value into slot # 1
.90df	ca		dex				dex
.90e0	20 ad 8e	jsr $8ead			jsr		AssignVariable 				; do the assignment
.90e3	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.90e6	b1 30		lda ($30),y			lda 	(codePtr),y
.90e8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.90ea	d0 04		bne $90f0			bne 	_CRSwapBack
.90ec	c8		iny				iny 								; consume comma
.90ed	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.90f0					_CRSwapBack:
.90f0	20 45 91	jsr $9145			jsr 	SwapDataCodePtrs			; swap them back.
.90f3	b1 30		lda ($30),y			lda 	(codePtr),y
.90f5	c8		iny				iny
.90f6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90f8	f0 ac		beq $90a6			beq 	Command_Read 				; if so go round again.
.90fa	88		dey				dey 								; unpick get.
.90fb	60		rts				rts
.90fc					_CRSyntax:
.90fc	4c 79 af	jmp $af79			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.90ff					RemCommand:
.90ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9101	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9103	d0 06		bne $910b			bne 	_RMExit
.9105	c8		iny				iny
.9106	98		tya				tya
.9107	38		sec				sec
.9108	71 30		adc ($30),y			adc 	(codePtr),y
.910a	a8		tay				tay
.910b					_RMExit:
.910b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.910c					Command_REPEAT:
.910c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.910e	20 3d a2	jsr $a23d			jsr 	StackOpen
.9111	20 81 a2	jsr $a281			jsr 	STKSaveCodePosition 		; save loop position
.9114	60		rts				rts
.9115					Command_UNTIL:
.9115	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9117	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9119	20 69 a2	jsr $a269			jsr 	StackCheckFrame
.911c	a2 00		ldx #$00			ldx 	#0
.911e	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber 				; work out the number
.9121	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; check if zero
.9124	f0 04		beq $912a			beq 	_CULoopBack 				; if so keep looping
.9126	20 5b a2	jsr $a25b			jsr 	StackClose		 			; return
.9129	60		rts				rts
.912a					_CULoopBack:
.912a	20 92 a2	jsr $a292			jsr 	STKLoadCodePosition 		; loop back
.912d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.912e					Command_Restore:
.912e	20 45 91	jsr $9145			jsr 	SwapDataCodePtrs 			; swap code and data
.9131	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9133	85 30		sta $30				sta 	codePtr
.9135	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9137	85 31		sta $31				sta 	codePtr+1
.9139	20 45 91	jsr $9145			jsr 	SwapDataCodePtrs 			; put them back
.913c	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.913e	8d 9b 04	sta $049b			sta 	dataPointer+4
.9141	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9144	60		rts				rts
.9145					SwapDataCodePtrs:
.9145	da		phx				phx
.9146	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9148					_SDCPLoop:
.9148	b5 30		lda $30,x			lda 	safePtr,x
.914a	48		pha				pha
.914b	bd 97 04	lda $0497,x			lda 	dataPointer,x
.914e	95 30		sta $30,x			sta 	safePtr,x
.9150	68		pla				pla
.9151	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9154	ca		dex				dex
.9155	10 f1		bpl $9148			bpl 	_SDCPLoop
.9157	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.915a	8c 9b 04	sty $049b			sty 	dataPointer+4
.915d	a8		tay				tay
.915e	fa		plx				plx
.915f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9160					CommandRUN:
.9160	20 da 8b	jsr $8bda			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9163	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9165	85 30		sta $30				sta 	codePtr
.9167	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9169	85 31		sta $31				sta 	codePtr+1
.916b					RUNNewLine:
.916b	b2 30		lda ($30)			lda 	(codePtr)
.916d	f0 5e		beq $91cd			beq 	CRNoProgram         		; no then END.
.916f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9171	9a		txs				txs
.9172					RUNCodePointerLine:
.9172	a0 02		ldy #$02			ldy 	#2 							; start of program
.9174					_CRIncMainLoop:
.9174	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9177	d0 05		bne $917e			bne 	_CRNoBreakCheck
.9179	20 5f b1	jsr $b15f			jsr 	EXTBreakCheck 				; break check
.917c	f0 4a		beq $91c8			beq 	_CRBreak
.917e					_CRNoBreakCheck:
.917e	c8		iny				iny
.917f					_CRMainLoop:
.917f	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9182	b1 30		lda ($30),y			lda 	(codePtr),y
.9184	10 10		bpl $9196			bpl 	_CRNotKeyword
.9186	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9188	b0 04		bcs $918e			bcs 	_CRIsKeyword
.918a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.918c	b0 34		bcs $91c2			bcs		_CRSyntaxError
.918e					_CRIsKeyword:
.918e	c8		iny				iny 								; consume command
.918f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9190	aa		tax				tax 								; put in X for vector jump
.9191	20 c5 91	jsr $91c5			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9194	80 e9		bra $917f			bra 	_CRMainLoop 				; and loop round
.9196					_CRNotKeyword:
.9196	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9198	f0 da		beq $9174			beq 	_CRIncMainLoop
.919a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.919c	90 05		bcc $91a3			bcc 	_CRNotVariable
.919e					_CRGoLet:
.919e	20 71 8e	jsr $8e71			jsr 	LetCommand
.91a1	80 dc		bra $917f			bra 	_CRMainLoop
.91a3					_CRNotVariable:
.91a3	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.91a5	f0 f7		beq $919e			beq 	_CRGoLet
.91a7	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.91a9	f0 f3		beq $919e			beq 	_CRGoLet
.91ab	c9 21		cmp #$21			cmp 	#KWD_PLING
.91ad	f0 ef		beq $919e			beq 	_CRGoLet
.91af	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.91b1	f0 09		beq $91bc			beq 	_CRGoRem
.91b3	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.91b5	d0 0b		bne $91c2			bne 	_CRSyntaxError
.91b7	20 7a 8a	jsr $8a7a			jsr 	LabelHere
.91ba	80 c3		bra $917f			bra 	_CRMainLoop
.91bc					_CRGoRem:
.91bc	c8		iny				iny
.91bd	20 ff 90	jsr $90ff			jsr 	RemCommand
.91c0	80 bd		bra $917f			bra 	_CRMainLoop
.91c2					_CRSyntaxError:
.91c2	4c 79 af	jmp $af79			jmp 	SyntaxError
.91c5					_CRCallVector0:
.91c5	7c 70 92	jmp ($9270,x)			jmp 	(VectorSet0,x)
.91c8					_CRBreak:
.91c8	a9 01		lda #$01		lda	#1
.91ca	4c d1 95	jmp $95d1		jmp	ErrorHandler
.91cd					CRNoProgram:
.91cd	4c f7 8c	jmp $8cf7			jmp 	EndCommand
.91d0					EOLCommand:
.91d0	18		clc				clc
.91d1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91d3	65 30		adc $30				adc 	codePtr
.91d5	85 30		sta $30				sta 	codePtr
.91d7	90 02		bcc $91db			bcc 	_CREExit
.91d9	e6 31		inc $31				inc 	codePtr+1
.91db					_CREExit:
.91db	80 8e		bra $916b			bra 	RunNewLine
.91dd					Shift1Command:
.91dd	b1 30		lda ($30),y			lda 	(codePtr),y
.91df	c8		iny				iny
.91e0	0a		asl a				asl 	a
.91e1	aa		tax				tax
.91e2	7c f6 92	jmp ($92f6,x)			jmp 	(VectorSet1,x)
.91e5					Shift2Command:
.91e5	b1 30		lda ($30),y			lda 	(codePtr),y
.91e7	c8		iny				iny
.91e8	0a		asl a				asl 	a
.91e9	aa		tax				tax
.91ea	7c 12 93	jmp ($9312,x)			jmp 	(VectorSet2,x)
.91ed					Unused1:
.91ed					Unused2:
.91ed					Unused3:
.91ed					Unused4:
.91ed	4c 79 af	jmp $af79			jmp 	SyntaxError
>91f0							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.91f0					VectorSetPunc:
>91f0	7b 97					.word	ShiftLeft                        ; $00 <<
>91f2	75 96					.word	BinaryCompareLessEqual           ; $01 <=
>91f4	6b 96					.word	BinaryCompareNotEqual            ; $02 <>
>91f6	79 af					.word	SyntaxError                      ; $03 !!3
>91f8	79 af					.word	SyntaxError                      ; $04 ><
>91fa	7f 96					.word	BinaryCompareGreaterEqual        ; $05 >=
>91fc	7e 97					.word	ShiftRight                       ; $06 >>
>91fe	79 af					.word	SyntaxError                      ; $07 !!7
>9200	79 af					.word	SyntaxError                      ; $08 !!8
>9202	79 af					.word	SyntaxError                      ; $09 !!9
>9204	79 af					.word	SyntaxError                      ; $0a !!10
>9206	79 af					.word	SyntaxError                      ; $0b !!11
>9208	79 af					.word	SyntaxError                      ; $0c !!12
>920a	79 af					.word	SyntaxError                      ; $0d !!13
>920c	79 af					.word	SyntaxError                      ; $0e !!14
>920e	79 af					.word	SyntaxError                      ; $0f !!15
>9210	79 af					.word	SyntaxError                      ; $10 @
>9212	79 af					.word	SyntaxError                      ; $11 !!17
>9214	79 af					.word	SyntaxError                      ; $12 !!18
>9216	79 af					.word	SyntaxError                      ; $13 [
>9218	ac a9					.word	IntegerDivide                    ; $14 \
>921a	79 af					.word	SyntaxError                      ; $15 ]
>921c	04 99					.word	EorInteger                       ; $16 ^
>921e	79 af					.word	SyntaxError                      ; $17 _
>9220	79 af					.word	SyntaxError                      ; $18 `
>9222	79 af					.word	SyntaxError                      ; $19 !!25
>9224	79 af					.word	SyntaxError                      ; $1a !!26
>9226	79 af					.word	SyntaxError                      ; $1b {
>9228	be 98					.word	OraInteger                       ; $1c |
>922a	79 af					.word	SyntaxError                      ; $1d }
>922c	79 af					.word	SyntaxError                      ; $1e ~
>922e	79 af					.word	SyntaxError                      ; $1f [7m<7F>[m
>9230	79 af					.word	SyntaxError                      ; $20
>9232	4a 99					.word	WordIndirect                     ; $21 !
>9234	79 af					.word	SyntaxError                      ; $22 "
>9236	79 af					.word	SyntaxError                      ; $23 #
>9238	79 af					.word	SyntaxError                      ; $24 $
>923a	f9 a9					.word	IntegerModulus                   ; $25 %
>923c	78 98					.word	AndInteger                       ; $26 &
>923e	79 af					.word	SyntaxError                      ; $27 '
>9240	79 af					.word	SyntaxError                      ; $28 (
>9242	79 af					.word	SyntaxError                      ; $29 )
>9244	6e aa					.word	MulInteger                       ; $2a *
>9246	12 98					.word	AddInteger                       ; $2b +
>9248	79 af					.word	SyntaxError                      ; $2c ,
>924a	4d 98					.word	SubInteger                       ; $2d -
>924c	79 af					.word	SyntaxError                      ; $2e .
>924e	05 ac					.word	FDivideCommand                   ; $2f /
>9250	79 af					.word	SyntaxError                      ; $30 0
>9252	79 af					.word	SyntaxError                      ; $31 1
>9254	79 af					.word	SyntaxError                      ; $32 2
>9256	79 af					.word	SyntaxError                      ; $33 3
>9258	79 af					.word	SyntaxError                      ; $34 4
>925a	79 af					.word	SyntaxError                      ; $35 5
>925c	79 af					.word	SyntaxError                      ; $36 6
>925e	79 af					.word	SyntaxError                      ; $37 7
>9260	79 af					.word	SyntaxError                      ; $38 8
>9262	79 af					.word	SyntaxError                      ; $39 9
>9264	79 af					.word	SyntaxError                      ; $3a :
>9266	79 af					.word	SyntaxError                      ; $3b ;
>9268	57 96					.word	BinaryCompareLess                ; $3c <
>926a	4d 96					.word	BinaryCompareEqual               ; $3d =
>926c	61 96					.word	BinaryCompareGreater             ; $3e >
>926e	71 99					.word	ByteIndirect                     ; $3f ?
.9270					VectorSet0:
>9270	d0 91					.word	EOLCommand                       ; $80 !0:EOF
>9272	dd 91					.word	Shift1Command                    ; $81 !1:SH1
>9274	e5 91					.word	Shift2Command                    ; $82 !2:SH2
>9276	4b ad					.word	AbsUnary                         ; $83 ABS(
>9278	3b 9e					.word	AllocUnary                       ; $84 ALLOC(
>927a	5b ad					.word	AscUnary                         ; $85 ASC(
>927c	5b 9f					.word	ChrUnary                         ; $86 CHR$(
>927e	79 af					.word	SyntaxError                      ; $87 EVENT(
>9280	49 96					.word	UnaryFalse                       ; $88 FALSE
>9282	68 ad					.word	FracUnary                        ; $89 FRAC(
>9284	7e ad					.word	IntUnary                         ; $8a INT(
>9286	d4 ad					.word	IsValUnary                       ; $8b ISVAL(
>9288	35 a0					.word	Unary_Left                       ; $8c LEFT$(
>928a	90 ad					.word	LenUnary                         ; $8d LEN(
>928c	5f a0					.word	Unary_Mid                        ; $8e MID$(
>928e	ab 9e					.word	Unary_Not                        ; $8f NOT(
>9290	79 af					.word	SyntaxError                      ; $90 OFF
>9292	79 af					.word	SyntaxError                      ; $91 ON
>9294	c1 9e					.word	Unary_Random                     ; $92 RANDOM(
>9296	45 a0					.word	Unary_Right                      ; $93 RIGHT$(
>9298	da 9e					.word	Unary_Rnd                        ; $94 RND(
>929a	aa ad					.word	SgnUnary                         ; $95 SGN(
>929c	6d 9f					.word	SpcUnary                         ; $96 SPC(
>929e	88 9f					.word	Unary_Str                        ; $97 STR$(
>92a0	79 af					.word	SyntaxError                      ; $98 TIMER(
>92a2	3d 96					.word	UnaryTrue                        ; $99 TRUE
>92a4	ca ad					.word	ValUnary                         ; $9a VAL(
>92a6	fa 8c					.word	ForCommand                       ; $9b FOR
>92a8	47 8e					.word	IfCommand                        ; $9c IF
>92aa	ed 91					.word	Unused1                          ; $9d PROC
>92ac	0c 91					.word	Command_REPEAT                   ; $9e REPEAT
>92ae	a2 95					.word	Command_WHILE                    ; $9f WHILE
>92b0	70 8e					.word	EndIf                            ; $a0 ENDIF
>92b2	85 a9					.word	Command_ENDPROC                  ; $a1 ENDPROC
>92b4	b4 8d					.word	NextCommand                      ; $a2 NEXT
>92b6	ed 91					.word	Unused4                          ; $a3 THEN
>92b8	15 91					.word	Command_UNTIL                    ; $a4 UNTIL
>92ba	c3 95					.word	Command_WEND                     ; $a5 WEND
>92bc	a0 8b					.word	CallCommand                      ; $a6 CALL
>92be	79 af					.word	SyntaxError                      ; $a7 CIRCLE
>92c0	79 af					.word	SyntaxError                      ; $a8 CLS
>92c2	79 af					.word	SyntaxError                      ; $a9 COLOR
>92c4	79 af					.word	SyntaxError                      ; $aa COLOUR
>92c6	32 8c					.word	Command_Data                     ; $ab DATA
>92c8	3a 8c					.word	DimCommand                       ; $ac DIM
>92ca	ed 91					.word	Unused3                          ; $ad DOWNTO
>92cc	69 8e					.word	ElseCode                         ; $ae ELSE
>92ce	79 af					.word	SyntaxError                      ; $af GFX
>92d0	0d 8e					.word	Command_GOSUB                    ; $b0 GOSUB
>92d2	2b 8e					.word	GotoCommand                      ; $b1 GOTO
>92d4	79 af					.word	SyntaxError                      ; $b2 HERE
>92d6	79 af					.word	SyntaxError                      ; $b3 HIDE
>92d8	71 8e					.word	LetCommand                       ; $b4 LET
>92da	79 af					.word	SyntaxError                      ; $b5 LINE
>92dc	61 8f					.word	Command_LOCAL                    ; $b6 LOCAL
>92de	79 af					.word	SyntaxError                      ; $b7 OUTLINE
>92e0	ef 8f					.word	Command_Print                    ; $b8 PRINT
>92e2	a6 90					.word	Command_Read                     ; $b9 READ
>92e4	79 af					.word	SyntaxError                      ; $ba RECT
>92e6	ff 90					.word	RemCommand                       ; $bb REM
>92e8	1d 8e					.word	Command_RETURN                   ; $bc RETURN
>92ea	79 af					.word	SyntaxError                      ; $bd SCALE
>92ec	79 af					.word	SyntaxError                      ; $be SHOW
>92ee	79 af					.word	SyntaxError                      ; $bf SOLID
>92f0	79 af					.word	SyntaxError                      ; $c0 SPRITE
>92f2	79 af					.word	SyntaxError                      ; $c1 TEXT
>92f4	ed 91					.word	Unused2                          ; $c2 TO
.92f6					VectorSet1:
>92f6	79 af					.word	SyntaxError                      ; $80 !0:EOF
>92f8	79 af					.word	SyntaxError                      ; $81 !1:SH1
>92fa	79 af					.word	SyntaxError                      ; $82 !2:SH2
>92fc	71 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>92fe	90 8b					.word	AssertCommand                    ; $84 ASSERT
>9300	79 af					.word	SyntaxError                      ; $85 BITMAP
>9302	da 8b					.word	ClearCommand                     ; $86 CLEAR
>9304	f7 8c					.word	EndCommand                       ; $87 END
>9306	c6 8e					.word	Command_List                     ; $88 LIST
>9308	e5 8f					.word	NewCommand                       ; $89 NEW
>930a	2e 91					.word	Command_Restore                  ; $8a RESTORE
>930c	60 91					.word	CommandRUN                       ; $8b RUN
>930e	79 af					.word	SyntaxError                      ; $8c SPRITES
>9310	9a 93					.word	StopCommand                      ; $8d STOP
.9312					VectorSet2:
>9312	79 af					.word	SyntaxError                      ; $80 !0:EOF
>9314	79 af					.word	SyntaxError                      ; $81 !1:SH1
>9316	79 af					.word	SyntaxError                      ; $82 !2:SH2
>9318	38 ae					.word	Assemble_adc                     ; $83 ADC
>931a	30 ae					.word	Assemble_and                     ; $84 AND
>931c	4c ae					.word	Assemble_asl                     ; $85 ASL
>931e	b6 ae					.word	Assemble_bcc                     ; $86 BCC
>9320	ba ae					.word	Assemble_bcs                     ; $87 BCS
>9322	c2 ae					.word	Assemble_beq                     ; $88 BEQ
>9324	79 ae					.word	Assemble_bit                     ; $89 BIT
>9326	aa ae					.word	Assemble_bmi                     ; $8a BMI
>9328	be ae					.word	Assemble_bne                     ; $8b BNE
>932a	a6 ae					.word	Assemble_bpl                     ; $8c BPL
>932c	c6 ae					.word	Assemble_bra                     ; $8d BRA
>932e	ca ae					.word	Assemble_brk                     ; $8e BRK
>9330	ae ae					.word	Assemble_bvc                     ; $8f BVC
>9332	b2 ae					.word	Assemble_bvs                     ; $90 BVS
>9334	d2 ae					.word	Assemble_clc                     ; $91 CLC
>9336	26 af					.word	Assemble_cld                     ; $92 CLD
>9338	e6 ae					.word	Assemble_cli                     ; $93 CLI
>933a	16 af					.word	Assemble_clv                     ; $94 CLV
>933c	44 ae					.word	Assemble_cmp                     ; $95 CMP
>933e	8d ae					.word	Assemble_cpx                     ; $96 CPX
>9340	88 ae					.word	Assemble_cpy                     ; $97 CPY
>9342	6a ae					.word	Assemble_dec                     ; $98 DEC
>9344	22 af					.word	Assemble_dex                     ; $99 DEX
>9346	fe ae					.word	Assemble_dey                     ; $9a DEY
>9348	34 ae					.word	Assemble_eor                     ; $9b EOR
>934a	6f ae					.word	Assemble_inc                     ; $9c INC
>934c	32 af					.word	Assemble_inx                     ; $9d INX
>934e	1e af					.word	Assemble_iny                     ; $9e INY
>9350	a1 ae					.word	Assemble_jmp                     ; $9f JMP
>9352	9c ae					.word	Assemble_jsr                     ; $a0 JSR
>9354	40 ae					.word	Assemble_lda                     ; $a1 LDA
>9356	65 ae					.word	Assemble_ldx                     ; $a2 LDX
>9358	83 ae					.word	Assemble_ldy                     ; $a3 LDY
>935a	56 ae					.word	Assemble_lsr                     ; $a4 LSR
>935c	36 af					.word	Assemble_nop                     ; $a5 NOP
>935e	2c ae					.word	Assemble_ora                     ; $a6 ORA
>9360	e2 ae					.word	Assemble_pha                     ; $a7 PHA
>9362	ce ae					.word	Assemble_php                     ; $a8 PHP
>9364	2a af					.word	Assemble_phx                     ; $a9 PHX
>9366	ea ae					.word	Assemble_phy                     ; $aa PHY
>9368	f2 ae					.word	Assemble_pla                     ; $ab PLA
>936a	d6 ae					.word	Assemble_plp                     ; $ac PLP
>936c	3e af					.word	Assemble_plx                     ; $ad PLX
>936e	fa ae					.word	Assemble_ply                     ; $ae PLY
>9370	51 ae					.word	Assemble_rol                     ; $af ROL
>9372	5b ae					.word	Assemble_ror                     ; $b0 ROR
>9374	de ae					.word	Assemble_rti                     ; $b1 RTI
>9376	ee ae					.word	Assemble_rts                     ; $b2 RTS
>9378	48 ae					.word	Assemble_sbc                     ; $b3 SBC
>937a	da ae					.word	Assemble_sec                     ; $b4 SEC
>937c	3a af					.word	Assemble_sed                     ; $b5 SED
>937e	f6 ae					.word	Assemble_sei                     ; $b6 SEI
>9380	3c ae					.word	Assemble_sta                     ; $b7 STA
>9382	2e af					.word	Assemble_stp                     ; $b8 STP
>9384	60 ae					.word	Assemble_stx                     ; $b9 STX
>9386	7e ae					.word	Assemble_sty                     ; $ba STY
>9388	74 ae					.word	Assemble_stz                     ; $bb STZ
>938a	12 af					.word	Assemble_tax                     ; $bc TAX
>938c	0e af					.word	Assemble_tay                     ; $bd TAY
>938e	97 ae					.word	Assemble_trb                     ; $be TRB
>9390	92 ae					.word	Assemble_tsb                     ; $bf TSB
>9392	1a af					.word	Assemble_tsx                     ; $c0 TSX
>9394	02 af					.word	Assemble_txa                     ; $c1 TXA
>9396	0a af					.word	Assemble_txs                     ; $c2 TXS
>9398	06 af					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.939a					StopCommand:
.939a	a9 08		lda #$08		lda	#8
.939c	4c d1 95	jmp $95d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.939f					ListConvertLine:
.939f	9c 9d 04	stz $049d			stz 	tbOffset
.93a2	9c a9 04	stz $04a9			stz 	tokenBuffer
.93a5	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.93a7	b1 30		lda ($30),y			lda 	(codePtr),y
.93a9	aa		tax				tax
.93aa	88		dey				dey
.93ab	b1 30		lda ($30),y			lda 	(codePtr),y
.93ad	20 ef aa	jsr $aaef			jsr 	ConvertInt16
.93b0	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.93b2	86 37		stx $37				stx 	zTemp0+1
.93b4	a0 00		ldy #$00			ldy 	#0
.93b6					_LCCopyNumber:
.93b6	b1 36		lda ($36),y			lda 	(zTemp0),y
.93b8	20 b8 94	jsr $94b8			jsr 	LCLWrite
.93bb	c8		iny				iny
.93bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.93be	d0 f6		bne $93b6			bne 	_LCCopyNumber
.93c0					_LCPadOut:
.93c0	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.93c2	20 b8 94	jsr $94b8			jsr 	LCLWrite
.93c5	ad 9d 04	lda $049d			lda 	tbOffset
.93c8	c9 06		cmp #$06			cmp 	#6
.93ca	d0 f4		bne $93c0			bne 	_LCPadOut
.93cc	a0 03		ldy #$03			ldy 	#3 							; start position.
.93ce					_LCMainLoop:
.93ce	b1 30		lda ($30),y			lda 	(codePtr),y
.93d0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.93d2	f0 17		beq $93eb			beq 	_LCExit
.93d4	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.93d6	90 14		bcc $93ec			bcc 	_LCDoubles
.93d8	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.93da	90 20		bcc $93fc			bcc 	_LCShiftPunc
.93dc	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.93de	90 2b		bcc $940b			bcc 	_LCPunctuation
.93e0	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.93e2	90 2d		bcc $9411			bcc 	_LCIdentifiers
.93e4	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.93e6	90 49		bcc $9431			bcc 	_LCTokens
.93e8	4c 8c 94	jmp $948c			jmp 	_LCData 					; 254-5 are data objects
.93eb					_LCExit:
.93eb	60		rts				rts
.93ec					_LCDoubles:
.93ec	48		pha				pha
.93ed	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.93ee	29 02		and #$02			and 	#2
.93f0	09 3c		ora #$3c			ora 	#60 						; make < >
.93f2	20 b8 94	jsr $94b8			jsr 	LCLWrite
.93f5	68		pla				pla 								; restore, do lower bit
.93f6	29 03		and #$03			and 	#3
.93f8	09 3c		ora #$3c			ora 	#60
.93fa	80 0f		bra $940b			bra		_LCPunctuation 				; print, increment, loop
.93fc					_LCShiftPunc:
.93fc	aa		tax				tax 								; save in X
.93fd	29 07		and #$07			and 	#7 							; lower 3 bits
.93ff	f0 02		beq $9403			beq 	_LCNoAdd
.9401	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9403					_LCNoAdd:
.9403	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9405	90 02		bcc $9409			bcc 	_LCNoAdd2
.9407	09 20		ora #$20			ora 	#32 						; adds $20
.9409					_LCNoAdd2:
.9409	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.940b					_LCPunctuation:
.940b	c8		iny				iny 								; consume character
.940c	20 b8 94	jsr $94b8			jsr 	LCLWrite 					; write it out.
.940f	80 bd		bra $93ce			bra 	_LCMainLoop 				; go round again.
.9411					_LCIdentifiers:
.9411	18		clc				clc 								; convert to physical address
.9412	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9414	85 37		sta $37				sta 	zTemp0+1
.9416	c8		iny				iny
.9417	b1 30		lda ($30),y			lda 	(codePtr),y
.9419	85 36		sta $36				sta 	zTemp0
.941b	c8		iny				iny
.941c	5a		phy				phy 								; save position
.941d	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.941f					_LCOutIdentifier:
.941f	c8		iny				iny
.9420	b1 36		lda ($36),y			lda 	(zTemp0),y
.9422	29 7f		and #$7f			and 	#$7F
.9424	20 e6 94	jsr $94e6			jsr 	LCLLowerCase
.9427	20 b8 94	jsr $94b8			jsr 	LCLWrite
.942a	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.942c	10 f1		bpl $941f			bpl 	_LCOutIdentifier
.942e	7a		ply				ply 								; restore position
.942f	80 9d		bra $93ce			bra 	_LCMainLoop
.9431					_LCTokens:
.9431	aa		tax				tax 								; token in X
.9432	a9 3f		lda #$3f			lda 	#((KeywordSet2) & $FF)
.9434	85 36		sta $36				sta 	0+zTemp0
.9436	a9 a5		lda #$a5			lda 	#((KeywordSet2) >> 8)
.9438	85 37		sta $37				sta 	1+zTemp0
.943a	e0 82		cpx #$82			cpx 	#$82
.943c	f0 16		beq $9454			beq 	_LCUseShift
.943e	a9 ea		lda #$ea			lda 	#((KeywordSet1) & $FF)
.9440	85 36		sta $36				sta 	0+zTemp0
.9442	a9 a4		lda #$a4			lda 	#((KeywordSet1) >> 8)
.9444	85 37		sta $37				sta 	1+zTemp0
.9446	e0 81		cpx #$81			cpx 	#$81
.9448	f0 0a		beq $9454			beq 	_LCUseShift
.944a	a9 40		lda #$40			lda 	#((KeywordSet0) & $FF)
.944c	85 36		sta $36				sta 	0+zTemp0
.944e	a9 a3		lda #$a3			lda 	#((KeywordSet0) >> 8)
.9450	85 37		sta $37				sta 	1+zTemp0
.9452	80 01		bra $9455			bra 	_LCNoShift
.9454					_LCUseShift:
.9454	c8		iny				iny
.9455					_LCNoShift:
.9455	20 c7 94	jsr $94c7			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9458	b1 30		lda ($30),y			lda 	(codePtr),y
.945a	aa		tax				tax 								; into X
.945b					_LCFindText:
.945b	ca		dex				dex
.945c	10 0e		bpl $946c			bpl 	_LCFoundText 				; found text.
.945e	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9460	1a		inc a				inc 	a 							; one extra for size
.9461	38		sec				sec 								; one extra for checksum
.9462	65 36		adc $36				adc 	zTemp0 						; go to next token
.9464	85 36		sta $36				sta 	zTemp0
.9466	90 f3		bcc $945b			bcc 	_LCFindText
.9468	e6 37		inc $37				inc 	zTemp0+1
.946a	80 ef		bra $945b			bra 	_LCFindText
.946c					_LCFoundText:
.946c	5a		phy				phy 								; save List position
.946d	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.946f	aa		tax				tax
.9470	a0 02		ldy #$02			ldy 	#2
.9472					_LCCopyToken:
.9472	b1 36		lda ($36),y			lda 	(zTemp0),y
.9474	20 e6 94	jsr $94e6			jsr 	LCLLowerCase
.9477	20 b8 94	jsr $94b8			jsr 	LCLWrite
.947a	c8		iny				iny
.947b	ca		dex				dex
.947c	d0 f4		bne $9472			bne 	_LCCopyToken
.947e	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9480	f0 05		beq $9487			beq 	_LCNoSpace
.9482	a9 20		lda #$20			lda 	#' '
.9484	20 b8 94	jsr $94b8			jsr 	LCLWrite
.9487					_LCNoSpace:
.9487	7a		ply				ply 								; restore position.
.9488	c8		iny				iny 								; consume token
.9489	4c ce 93	jmp $93ce			jmp 	_LCMainLoop 				; and go around again.
.948c					_LCData:
.948c	48		pha				pha 								; save type $FE/$FF
.948d	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.948f	c9 fe		cmp #$fe			cmp 	#$FE
.9491	f0 02		beq $9495			beq 	_LCHaveOpener
.9493	a2 22		ldx #$22			ldx 	#'"'
.9495					_LCHaveOpener:
.9495	8a		txa				txa 								; output prefix (# or ")
.9496	20 b8 94	jsr $94b8			jsr 	LCLWrite
.9499	c8		iny				iny 								; get count
.949a	b1 30		lda ($30),y			lda 	(codePtr),y
.949c	aa		tax				tax
.949d	c8		iny				iny 								; point at first character
.949e					_LCOutData:
.949e	b1 30		lda ($30),y			lda 	(codePtr),y
.94a0	c9 00		cmp #$00			cmp 	#0
.94a2	f0 03		beq $94a7			beq 	_LCNoPrint
.94a4	20 b8 94	jsr $94b8			jsr 	LCLWrite
.94a7					_LCNoPrint:
.94a7	c8		iny				iny
.94a8	ca		dex				dex
.94a9	d0 f3		bne $949e			bne 	_LCOutData
.94ab	68		pla				pla 								; closing " required ?
.94ac	c9 ff		cmp #$ff			cmp 	#$FF
.94ae	d0 05		bne $94b5			bne 	_LCNoQuote
.94b0	a9 22		lda #$22			lda 	#'"'
.94b2	20 b8 94	jsr $94b8			jsr 	LCLWrite
.94b5					_LCNoQuote:
.94b5	4c ce 93	jmp $93ce			jmp 	_LCMainLoop
.94b8					LCLWrite:
.94b8	da		phx				phx
.94b9	ae 9d 04	ldx $049d			ldx 	tbOffset
.94bc	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.94bf	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.94c2	ee 9d 04	inc $049d			inc 	tbOffset
.94c5	fa		plx				plx
.94c6	60		rts				rts
.94c7					LCCheckSpaceRequired:
.94c7	ae 9d 04	ldx $049d			ldx 	tbOffset
.94ca	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.94cd	20 e6 94	jsr $94e6			jsr 	LCLLowerCase 				; saves a little effort
.94d0	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.94d2	90 11		bcc $94e5			bcc 	_LCCSRExit
.94d4	c9 3a		cmp #$3a			cmp 	#"9"+1
.94d6	90 08		bcc $94e0			bcc 	_LCCSRSpace
.94d8	c9 61		cmp #$61			cmp 	#"a"
.94da	90 09		bcc $94e5			bcc 	_LCCSRExit
.94dc	c9 7b		cmp #$7b			cmp 	#"z"+1
.94de	b0 05		bcs $94e5			bcs 	_LCCSRExit
.94e0					_LCCSRSpace:
.94e0	a9 20		lda #$20			lda 	#' '
.94e2	20 b8 94	jsr $94b8			jsr 	LCLWrite
.94e5					_LCCSRExit:
.94e5	60		rts				rts
.94e6					LCLLowerCase:
.94e6	c9 41		cmp #$41			cmp 	#"A"
.94e8	90 06		bcc $94f0			bcc 	_LCLLCOut
.94ea	c9 5b		cmp #$5b			cmp 	#"Z"+1
.94ec	b0 02		bcs $94f0			bcs 	_LCLLCOut
.94ee	69 20		adc #$20			adc 	#$20
.94f0					_LCLLCOut:
.94f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.94f1					ProcedureScan:
.94f1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94f3	85 30		sta $30				sta 	codePtr
.94f5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94f7	85 31		sta $31				sta 	codePtr+1
.94f9					_PSLoop:
.94f9	b2 30		lda ($30)			lda 	(codePtr)
.94fb	f0 42		beq $953f			beq 	_PSExit
.94fd	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.94ff	b1 30		lda ($30),y			lda 	(codePtr),y
.9501	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.9503	d0 2d		bne $9532			bne 	_PSNext
.9505	c8		iny				iny 								; get the address of the record to zTemp0 and
.9506	b1 30		lda ($30),y			lda 	(codePtr),y
.9508	29 c0		and #$c0			and 	#$C0
.950a	c9 40		cmp #$40			cmp 	#$40
.950c	d0 32		bne $9540			bne 	_PSSyntax
.950e	b1 30		lda ($30),y			lda 	(codePtr),y
.9510	18		clc				clc
.9511	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9513	85 37		sta $37				sta 	zTemp0+1
.9515	c8		iny				iny 								; LSB
.9516	b1 30		lda ($30),y			lda 	(codePtr),y
.9518	85 36		sta $36				sta 	zTemp0
.951a	c8		iny				iny 								; character after variable call.
.951b	98		tya				tya 								; save Y offset at +7
.951c	a0 07		ldy #$07			ldy 	#7
.951e	91 36		sta ($36),y			sta 	(zTemp0),y
.9520	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9522	a0 02		ldy #$02			ldy 	#2
.9524	91 36		sta ($36),y			sta 	(zTemp0),y
.9526	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9528					_PSCopy:
.9528	b5 30		lda $30,x			lda 	safePtr,x
.952a	c8		iny				iny
.952b	91 36		sta ($36),y			sta 	(zTemp0),y
.952d	e8		inx				inx
.952e	e0 04		cpx #$04			cpx 	#4
.9530	d0 f6		bne $9528			bne 	_PSCopy
.9532					_PSNext:
.9532	18		clc				clc
.9533	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9535	65 30		adc $30				adc 	codePtr
.9537	85 30		sta $30				sta 	codePtr
.9539	90 02		bcc $953d			bcc 	_CREExit
.953b	e6 31		inc $31				inc 	codePtr+1
.953d					_CREExit:
.953d	80 ba		bra $94f9			bra 	_PSLoop
.953f					_PSExit:
.953f	60		rts				rts
.9540					_PSSyntax:
.9540	4c 79 af	jmp $af79			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9543					ScanForward:
.9543	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9545	86 37		stx $37				stx 	zTemp0+1
.9547	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9549					_ScanLoop:
.9549	b1 30		lda ($30),y			lda 	(codePtr),y
.954b	c8		iny				iny
.954c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.954e	d0 0e		bne $955e			bne 	_ScanGoNext
.9550	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9552	f0 04		beq $9558			beq 	_ScanMatch
.9554	c5 37		cmp $37				cmp 	zTemp0+1
.9556	d0 06		bne $955e			bne 	_ScanGoNext
.9558					_ScanMatch:
.9558	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.955a	d0 01		bne $955d			bne 	_ScanNotEndEOL
.955c	88		dey				dey
.955d					_ScanNotEndEOL:
.955d	60		rts				rts
.955e					_ScanGoNext:
.955e	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9560	90 e7		bcc $9549			bcc 	_ScanLoop
.9562	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9564	90 18		bcc $957e			bcc 	_ScanSkipOne
.9566	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9568	b0 2f		bcs $9599			bcs 	_ScanSkipData
.956a	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.956c	90 db		bcc $9549			bcc 	_ScanLoop 					; if not, ordinary keywords.
.956e	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.9570	b0 d7		bcs $9549			bcs 	_ScanLoop
.9572	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9574	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9576	b0 d1		bcs $9549			bcs 	_ScanLoop
.9578	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.957a	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.957c	80 cb		bra $9549			bra 	_ScanLoop
.957e					_ScanSkipOne:
.957e	c8		iny				iny 								; consume the extra one.
.957f	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9581	d0 c6		bne $9549			bne 	_ScanLoop
.9583	18		clc				clc
.9584	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9586	65 30		adc $30				adc 	codePtr
.9588	85 30		sta $30				sta 	codePtr
.958a	90 02		bcc $958e			bcc 	_CREExit
.958c	e6 31		inc $31				inc 	codePtr+1
.958e					_CREExit:
.958e	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9590	b2 30		lda ($30)			lda 	(codePtr)
.9592	d0 b5		bne $9549			bne 	_ScanLoop 					; if not zero, more to scan
.9594	a9 13		lda #$13		lda	#19
.9596	4c d1 95	jmp $95d1		jmp	ErrorHandler
.9599					_ScanSkipData:
.9599	88		dey				dey 								; point at data token
.959a	c8		iny				iny
.959b	98		tya				tya
.959c	38		sec				sec
.959d	71 30		adc ($30),y			adc 	(codePtr),y
.959f	a8		tay				tay
.95a0	80 a7		bra $9549			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.95a2					Command_WHILE:
.95a2	5a		phy				phy 								; save position of the test
.95a3	a2 00		ldx #$00			ldx 	#0
.95a5	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber 				; work out the number
.95a8	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; check if zero
.95ab	f0 0e		beq $95bb			beq 	_WHExitLoop 				; if so exit the loop
.95ad	98		tya				tya 								; position *after* test.
.95ae	7a		ply				ply 								; restore position before test, at WHILE
.95af	88		dey				dey
.95b0	48		pha				pha 								; push after test on the stack
.95b1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.95b3	20 3d a2	jsr $a23d			jsr 	StackOpen
.95b6	20 81 a2	jsr $a281			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.95b9	7a		ply				ply 								; restore the position *after* the test
.95ba	60		rts				rts
.95bb					_WHExitLoop:
.95bb	68		pla				pla 								; throw post loop position
.95bc	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.95be	aa		tax				tax
.95bf	20 43 95	jsr $9543			jsr 	ScanForward
.95c2	60		rts				rts
.95c3					Command_WEND:
.95c3	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.95c5	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.95c7	20 69 a2	jsr $a269			jsr 	StackCheckFrame
.95ca	20 92 a2	jsr $a292			jsr 	STKLoadCodePosition 		; loop back
.95cd	20 5b a2	jsr $a25b			jsr 	StackClose		 			; erase the frame
.95d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a993					CheckRightBracket:
.a993	b1 30		lda ($30),y			lda 	(codePtr),y
.a995	c8		iny				iny
.a996	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a998	d0 0f		bne $a9a9			bne 	CNAFail
.a99a	60		rts				rts
.a99b					CheckComma:
.a99b	b1 30		lda ($30),y			lda 	(codePtr),y
.a99d	c8		iny				iny
.a99e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a9a0	d0 07		bne $a9a9			bne 	CNAFail
.a9a2	60		rts				rts
.a9a3					CheckNextA:
.a9a3	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a9a5	d0 02		bne $a9a9			bne 	CNAFail
.a9a7	c8		iny				iny 								; skip character
.a9a8	60		rts				rts 								; and exit
.a9a9					CNAFail:
.a9a9	4c 79 af	jmp $af79			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.95d1					ErrorHandler:
.95d1	a8		tay				tay 								; find the error text
.95d2	f0 49		beq $961d			beq 	_EHEnd
.95d4	a2 00		ldx #$00			ldx 	#0
.95d6	a9 92		lda #$92			lda 	#((ErrorText) & $FF)
.95d8	85 36		sta $36				sta 	0+zTemp0
.95da	a9 af		lda #$af			lda 	#((ErrorText) >> 8)
.95dc	85 37		sta $37				sta 	1+zTemp0
.95de					_EHFind:
.95de	88		dey				dey 								; found the error text ?
.95df	f0 0e		beq $95ef			beq 	_EHFound
.95e1					_EHFindZero:
.95e1	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.95e3	e6 36		inc $36				inc 	zTemp0
.95e5	d0 02		bne $95e9			bne 	_EHFNoCarry
.95e7	e6 37		inc $37				inc 	zTemp0+1
.95e9					_EHFNoCarry:
.95e9	c9 00		cmp #$00			cmp 	#0
.95eb	d0 f4		bne $95e1			bne 	_EHFindZero
.95ed	80 ef		bra $95de			bra 	_EHFind
.95ef					_EHFound:
.95ef	a5 36		lda $36				lda 	zTemp0 						; print message
.95f1	a6 37		ldx $37				ldx 	zTemp0+1
.95f3	20 2a 96	jsr $962a			jsr 	PrintStringXA
.95f6	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.95f8	b1 30		lda ($30),y			lda 	(codePtr),y
.95fa	d0 05		bne $9601			bne 	_EHAtMsg
.95fc	c8		iny				iny
.95fd	b1 30		lda ($30),y			lda 	(codePtr),y
.95ff	f0 17		beq $9618			beq 	_EHCREnd
.9601					_EHAtMsg:
.9601	a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.9603	a9 20		lda #$20			lda 	#_AtMsg & $FF
.9605	20 2a 96	jsr $962a			jsr 	PrintStringXA
.9608	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.960a	b1 30		lda ($30),y			lda 	(codePtr),y
.960c	48		pha				pha
.960d	c8		iny				iny
.960e	b1 30		lda ($30),y			lda 	(codePtr),y
.9610	aa		tax				tax
.9611	68		pla				pla
.9612	20 ef aa	jsr $aaef			jsr 	ConvertInt16 				; convert XA to string
.9615	20 2a 96	jsr $962a			jsr 	PrintStringXA 				; and print it.
.9618					_EHCREnd:
.9618	a9 0d		lda #$0d			lda 	#13 						; new line
.961a	20 1e b1	jsr $b11e			jsr 	EXTPrintCharacter
.961d					_EHEnd:
.961d	4c 41 8b	jmp $8b41			jmp 	WarmStart
>9620	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9628	20 00
.962a					PrintStringXA:
.962a	5a		phy				phy
.962b	86 37		stx $37				stx 	zTemp0+1
.962d	85 36		sta $36				sta 	zTemp0
.962f	a0 00		ldy #$00			ldy 	#0
.9631					_PSXALoop:
.9631	b1 36		lda ($36),y			lda 	(zTemp0),y
.9633	f0 06		beq $963b			beq 	_PSXAExit
.9635	20 1e b1	jsr $b11e			jsr 	EXTPrintCharacter
.9638	c8		iny				iny
.9639	80 f6		bra $9631			bra 	_PSXALoop
.963b					_PSXAExit:
.963b	7a		ply				ply
.963c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.963d					UnaryTrue:
.963d	fa		plx				plx
.963e					ReturnTrue:
.963e	a9 01		lda #$01			lda 	#1  						; set to 1
.9640	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.9643	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9645	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9648	60		rts				rts
.9649					UnaryFalse:
.9649	fa		plx				plx
.964a					ReturnFalse:
.964a	4c 89 a1	jmp $a189			jmp 	NSMSetZero 					; set it all to zero
.964d					BinaryCompareEqual:
.964d	fa		plx				plx
.964e	20 89 96	jsr $9689			jsr 	CompareBaseCode
.9651	c9 00		cmp #$00			cmp 	#0
.9653	f0 e9		beq $963e			beq 	ReturnTrue
.9655	80 f3		bra $964a			bra 	ReturnFalse
.9657					BinaryCompareLess:
.9657	fa		plx				plx
.9658	20 89 96	jsr $9689			jsr 	CompareBaseCode
.965b	c9 ff		cmp #$ff			cmp 	#$FF
.965d	f0 df		beq $963e			beq 	ReturnTrue
.965f	80 e9		bra $964a			bra 	ReturnFalse
.9661					BinaryCompareGreater:
.9661	fa		plx				plx
.9662	20 89 96	jsr $9689			jsr 	CompareBaseCode
.9665	c9 01		cmp #$01			cmp 	#1
.9667	f0 d5		beq $963e			beq 	ReturnTrue
.9669	80 df		bra $964a			bra 	ReturnFalse
.966b					BinaryCompareNotEqual:
.966b	fa		plx				plx
.966c	20 89 96	jsr $9689			jsr 	CompareBaseCode
.966f	c9 00		cmp #$00			cmp 	#0
.9671	d0 cb		bne $963e			bne 	ReturnTrue
.9673	80 d5		bra $964a			bra 	ReturnFalse
.9675					BinaryCompareLessEqual:
.9675	fa		plx				plx
.9676	20 89 96	jsr $9689			jsr 	CompareBaseCode
.9679	c9 01		cmp #$01			cmp 	#1
.967b	d0 c1		bne $963e			bne 	ReturnTrue
.967d	80 cb		bra $964a			bra 	ReturnFalse
.967f					BinaryCompareGreaterEqual:
.967f	fa		plx				plx
.9680	20 89 96	jsr $9689			jsr 	CompareBaseCode
.9683	c9 ff		cmp #$ff			cmp 	#$FF
.9685	d0 b7		bne $963e			bne 	ReturnTrue
.9687	80 c1		bra $964a			bra 	ReturnFalse
.9689					CompareBaseCode:
.9689	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; make both values if references.
.968c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.968f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9692	29 10		and #$10			and 	#NSTString
.9694	d0 40		bne $96d6			bne 	_CBCString
.9696	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9699	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.969c	d0 3b		bne $96d9			bne 	_CBCFloat
.969e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.96a1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96a4	29 08		and #$08			and 	#NSTFloat
.96a6	d0 31		bne $96d9			bne 	_CBCFloat
.96a8	20 dc 96	jsr $96dc			jsr 	CompareFixMinusZero
.96ab	e8		inx				inx
.96ac	20 dc 96	jsr $96dc			jsr 	CompareFixMinusZero
.96af	ca		dex				dex
.96b0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.96b3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.96b6	10 0b		bpl $96c3			bpl 	_CDCSameSign
.96b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.96bb	30 16		bmi $96d3			bmi 	_CBCLess 					; return $FF
.96bd					_CBCGreater:
.96bd	a9 01		lda #$01			lda 	#1
.96bf	60		rts				rts
.96c0					_CBCEqual:
.96c0	a9 00		lda #$00			lda 	#0
.96c2	60		rts				rts
.96c3					_CDCSameSign:
.96c3	20 ec 97	jsr $97ec			jsr 	SubTopTwoStack 				; unsigned subtract
.96c6	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; or the mantissa together
.96c9	f0 f5		beq $96c0			beq 	_CBCEqual 					; -0 == 0
.96cb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.96ce	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.96d1	10 ea		bpl $96bd			bpl 	_CBCGreater
.96d3					_CBCLess:
.96d3	a9 ff		lda #$ff			lda 	#$FF
.96d5	60		rts				rts
.96d6					_CBCString:
.96d6	4c 42 97	jmp $9742			jmp 	CompareStrings
.96d9					_CBCFloat:
.96d9	4c eb ab	jmp $abeb			jmp 	CompareFloat
.96dc					CompareFixMinusZero:
.96dc	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero
.96df	d0 03		bne $96e4			bne 	_CFXMZNotZero
.96e1	9e 00 04	stz $0400,x			stz 	NSStatus,x
.96e4					_CFXMZNotZero:
.96e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.96e5					StringConcat:
.96e5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.96e8	3d 01 04	and $0401,x			and 	NSStatus+1,x
.96eb	29 18		and #$18			and 	#NSBTypeMask
.96ed	c9 10		cmp #$10			cmp 	#NSTString
.96ef	d0 4e		bne $973f			bne		_SCType
.96f1	64 38		stz $38				stz 	zTemp1 						; counting total length
.96f3	e8		inx				inx
.96f4	20 12 97	jsr $9712			jsr 	_SCSetupZ0 					; setup for second
.96f7	20 1d 97	jsr $971d			jsr 	_SCLengthZ0 				; length for second
.96fa	ca		dex				dex
.96fb	20 12 97	jsr $9712			jsr 	_SCSetupZ0 					; setup for first
.96fe	20 1d 97	jsr $971d			jsr 	_SCLengthZ0 				; length for first
.9701	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9703	20 a0 b2	jsr $b2a0			jsr 	StringTempAllocate
.9706	20 30 97	jsr $9730			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9709	e8		inx				inx
.970a	20 12 97	jsr $9712			jsr 	_SCSetupZ0 					; copy second out
.970d	20 30 97	jsr $9730			jsr 	_SCCopy
.9710	ca		dex				dex
.9711	60		rts				rts
.9712					_SCSetupZ0:
.9712	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9715	85 36		sta $36				sta 	zTemp0
.9717	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.971a	85 37		sta $37				sta 	zTemp0+1
.971c	60		rts				rts
.971d					_SCLengthZ0:
.971d	5a		phy				phy
.971e	a0 00		ldy #$00			ldy 	#0
.9720					_SCLenLoop:
.9720	b1 36		lda ($36),y			lda 	(zTemp0),y
.9722	f0 0a		beq $972e			beq 	_SCLExit
.9724	c8		iny				iny
.9725	e6 38		inc $38				inc 	zTemp1
.9727	10 f7		bpl $9720			bpl		_SCLenLoop
.9729	a9 09		lda #$09		lda	#9
.972b	4c d1 95	jmp $95d1		jmp	ErrorHandler
.972e					_SCLExit:
.972e	7a		ply				ply
.972f	60		rts				rts
.9730					_SCCopy:
.9730	5a		phy				phy
.9731	a0 00		ldy #$00			ldy 	#0
.9733					_SCCopyLoop:
.9733	b1 36		lda ($36),y			lda 	(zTemp0),y
.9735	f0 06		beq $973d			beq 	_SCCExit
.9737	20 de b2	jsr $b2de			jsr 	StringTempWrite
.973a	c8		iny				iny
.973b	80 f6		bra $9733			bra 	_SCCopyLoop
.973d					_SCCExit:
.973d	7a		ply				ply
.973e	60		rts				rts
.973f					_SCType:
.973f	4c 83 af	jmp $af83			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a9ac					IntegerDivide:
.a9ac	fa		plx				plx
.a9ad	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a9b0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a9b3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a9b4	0a		asl a				asl 	a
.a9b5	10 05		bpl $a9bc			bpl 	_NotRef
.a9b7	48		pha				pha
.a9b8	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a9bb	68		pla				pla
.a9bc					_NotRef:
.a9bc	0a		asl a				asl 	a
.a9bd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a9bf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a9c2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a9c5	f0 03		beq $a9ca			beq 	_IntegerCode 				; if clear, then we have two integers
.a9c7	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.a9ca					_IntegerCode:
.a9ca	20 ec a9	jsr $a9ec			jsr 	CheckDivideZero 			; do div zero check
.a9cd	20 24 aa	jsr $aa24			jsr 	Int32Divide 				; do the division
.a9d0	20 e1 aa	jsr $aae1			jsr 	CalculateSign 				; calculate result sign
.a9d3					NSMCopyPlusTwoToZero:
.a9d3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a9d6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9d9	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a9dc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9df	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a9e2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a9e5	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a9e8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a9eb	60		rts				rts
.a9ec					CheckDivideZero:
.a9ec	e8		inx				inx
.a9ed	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero
.a9f0	f0 02		beq $a9f4			beq 	_CDVError
.a9f2	ca		dex				dex
.a9f3	60		rts				rts
.a9f4					_CDVError:
.a9f4	a9 03		lda #$03		lda	#3
.a9f6	4c d1 95	jmp $95d1		jmp	ErrorHandler
.a9f9					IntegerModulus:
.a9f9	fa		plx				plx
.a9fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a9fd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa00	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa01	0a		asl a				asl 	a
.aa02	10 05		bpl $aa09			bpl 	_NotRef
.aa04	48		pha				pha
.aa05	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aa08	68		pla				pla
.aa09					_NotRef:
.aa09	0a		asl a				asl 	a
.aa0a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aa0c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aa0f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aa12	f0 03		beq $aa17			beq 	_IntegerCode 				; if clear, then we have two integers
.aa14	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.aa17					_IntegerCode:
.aa17					IntegerModulusNoCheck:
.aa17	20 ec a9	jsr $a9ec			jsr 	CheckDivideZero 			; do div zero check
.aa1a	20 24 aa	jsr $aa24			jsr 	Int32Divide 				; do the division
.aa1d	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aa20	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.aa23	60		rts				rts
.aa24					Int32Divide:
.aa24	48		pha				pha 								; save AXY
.aa25	5a		phy				phy
.aa26	20 60 a1	jsr $a160			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aa29	20 85 a1	jsr $a185			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aa2c	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aa2e					_I32DivideLoop:
.aa2e	e8		inx				inx
.aa2f	e8		inx				inx
.aa30	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aa33	ca		dex				dex
.aa34	ca		dex				dex
.aa35	20 9f a1	jsr $a19f			jsr 	NSMRotateLeft
.aa38	20 64 aa	jsr $aa64			jsr 	DivideCheckSubtract 		; check if subtract possible
.aa3b	90 03		bcc $aa40			bcc 	_I32DivideNoCarryIn
.aa3d	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aa40					_I32DivideNoCarryIn:
.aa40	88		dey				dey 								; loop round till division completed.
.aa41	d0 eb		bne $aa2e			bne 	_I32DivideLoop
.aa43	7a		ply				ply 								; restore AXY and exit
.aa44	68		pla				pla
.aa45	60		rts				rts
.aa46					Int32ShiftDivide:
.aa46	48		pha				pha 								; save AY
.aa47	5a		phy				phy
.aa48	e8		inx				inx 								; clear S[X+2]
.aa49	e8		inx				inx
.aa4a	20 89 a1	jsr $a189			jsr 	NSMSetZero
.aa4d	ca		dex				dex
.aa4e	ca		dex				dex
.aa4f	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.aa51					_I32SDLoop:
.aa51	20 64 aa	jsr $aa64			jsr 	DivideCheckSubtract 		; check if subtract possible
.aa54	e8		inx				inx
.aa55	e8		inx				inx
.aa56	20 9f a1	jsr $a19f			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.aa59	ca		dex				dex
.aa5a	ca		dex				dex
.aa5b	20 9f a1	jsr $a19f			jsr 	NSMRotateLeft
.aa5e	88		dey				dey 	 							; do 31 times
.aa5f	d0 f0		bne $aa51			bne 	_I32SDLoop
.aa61	7a		ply				ply 								; restore AY and exit
.aa62	68		pla				pla
.aa63	60		rts				rts
.aa64					DivideCheckSubtract:
.aa64	20 ec 97	jsr $97ec			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.aa67	b0 04		bcs $aa6d			bcs 	_DCSExit 					; if carry set, then could do, exit
.aa69	20 c6 97	jsr $97c6			jsr 	AddTopTwoStack 				; add it back in
.aa6c	18		clc				clc 								; and return False
.aa6d					_DCSExit:
.aa6d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.aa6e					MulInteger:
.aa6e	fa		plx				plx
.aa6f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aa72	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa75	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa76	0a		asl a				asl 	a
.aa77	10 05		bpl $aa7e			bpl 	_NotRef
.aa79	48		pha				pha
.aa7a	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aa7d	68		pla				pla
.aa7e					_NotRef:
.aa7e	0a		asl a				asl 	a 							; put MSB of type into A:7
.aa7f	30 0b		bmi $aa8c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.aa81	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aa84	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aa87	f0 06		beq $aa8f			beq 	_IntegerCode 				; if clear, then we have two integers
.aa89	4c c2 ac	jmp $acc2			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.aa8c					_StringData:
.aa8c	4c 8d af	jmp $af8d			jmp 	NotDoneError							; at least one string - don't know both are strings.
.aa8f					_IntegerCode:
.aa8f	20 9c aa	jsr $aa9c			jsr 	MultiplyShort
.aa92	c9 00		cmp #$00			cmp 	#0
.aa94	f0 05		beq $aa9b			beq 	_MIExit
.aa96	a9 04		lda #$04		lda	#4
.aa98	4c d1 95	jmp $95d1		jmp	ErrorHandler
.aa9b					_MIExit:
.aa9b	60		rts				rts
.aa9c					MultiplyShort:
.aa9c	5a		phy				phy 								; save Y
.aa9d	20 60 a1	jsr $a160			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aaa0	20 85 a1	jsr $a185			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.aaa3	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.aaa5					_I32MLoop:
.aaa5	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.aaa8	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.aaab	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.aaae	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.aab1	f0 28		beq $aadb			beq 	_I32MExit 					; exit if zero
.aab3	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.aab6	29 01		and #$01			and 	#1
.aab8	f0 0e		beq $aac8			beq 	_I32MNoAdd
.aaba	20 c6 97	jsr $97c6			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.aabd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.aac0	10 06		bpl $aac8			bpl 	_I32MNoAdd
.aac2					_I32ShiftRight:
.aac2	20 ac a1	jsr $a1ac			jsr 	NSMShiftRight 				; shift S[X] right
.aac5	c8		iny				iny 								; increment shift count
.aac6	80 0a		bra $aad2			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.aac8					_I32MNoAdd:
.aac8	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.aacb	70 f5		bvs $aac2			bvs 	_I32ShiftRight 				; instead.
.aacd	e8		inx				inx
.aace	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.aad1	ca		dex				dex
.aad2					_I32MShiftUpper:
.aad2	e8		inx				inx 								; shift S[X+2] right
.aad3	e8		inx				inx
.aad4	20 ac a1	jsr $a1ac			jsr 	NSMShiftRight
.aad7	ca		dex				dex
.aad8	ca		dex				dex
.aad9	80 ca		bra $aaa5			bra 	_I32MLoop 					; try again.
.aadb					_I32MExit:
.aadb	20 e1 aa	jsr $aae1			jsr 	CalculateSign
.aade	98		tya				tya 								; shift in A
.aadf	7a		ply				ply 								; restore Y and exit
.aae0	60		rts				rts
.aae1					CalculateSign:
.aae1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.aae4	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.aae7	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aaea	0a		asl a				asl 	a 							; shift bit 7 into carry
.aaeb	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.aaee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9742					CompareStrings:
.9742	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9745	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9748	29 10		and #$10			and 	#NSBIsString
.974a	f0 2c		beq $9778			beq 	_CSTypeError
.974c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.974f	85 36		sta $36				sta 	zTemp0
.9751	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9754	85 37		sta $37				sta 	zTemp0+1
.9756	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9759	85 38		sta $38				sta 	zTemp1
.975b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.975e	85 39		sta $39				sta 	zTemp1+1
.9760	5a		phy				phy 								; save Y so we can access strings
.9761	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9763					_CSLoop:
.9763	c8		iny				iny
.9764	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9766	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9768	d0 06		bne $9770			bne 	_CSDifferent
.976a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.976c	d0 f5		bne $9763			bne 	_CSLoop 					; still comparing
.976e					_CSExit:
.976e	7a		ply				ply 								; reached end, return zero in A from EOS
.976f	60		rts				rts
.9770					_CSDifferent:
.9770	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9772	90 fa		bcc $976e			bcc		_CSExit
.9774	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9776	80 f6		bra $976e			bra 	_CSExit
.9778					_CSTypeError:
.9778	4c 83 af	jmp $af83			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.977b					ShiftLeft:
.977b	38		sec				sec
.977c	80 01		bra $977f			bra 	ShiftMain
.977e					ShiftRight:
.977e	18		clc				clc
.977f					ShiftMain:
.977f	fa		plx				plx 								; restore X
.9780	08		php				php 								; save direction
.9781	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9784	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9787	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9788	0a		asl a				asl 	a
.9789	10 05		bpl $9790			bpl 	_NotRef
.978b	48		pha				pha
.978c	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.978f	68		pla				pla
.9790					_NotRef:
.9790	0a		asl a				asl 	a
.9791	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9793	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9796	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9799	f0 03		beq $979e			beq 	_IntegerCode 				; if clear, then we have two integers
.979b	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.979e					_IntegerCode:
.979e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.97a1	29 e0		and #$e0			and 	#$E0
.97a3	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.97a6	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.97a9	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.97ac	d0 13		bne $97c1			bne 	_SMExit0 					; if >= 32 it will always return zero.
.97ae					_SMLoop:
.97ae	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.97b1	30 11		bmi $97c4			bmi 	_SMExit 					; exit if done.
.97b3	28		plp				plp 								; restore direcition setting
.97b4	08		php				php
.97b5	90 05		bcc $97bc			bcc 	_SMRight
.97b7	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; shift left if CS
.97ba	80 f2		bra $97ae			bra 	_SMLoop
.97bc					_SMRight:
.97bc	20 ac a1	jsr $a1ac			jsr 	NSMShiftRight 				; shift right if CC
.97bf	80 ed		bra $97ae			bra 	_SMLoop
.97c1					_SMExit0:
.97c1	20 89 a1	jsr $a189			jsr 	NSMSetZero 					; return zero.
.97c4					_SMExit:
.97c4	28		plp				plp 								; throw direction
.97c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.97c6					AddTopTwoStack:
.97c6	18		clc				clc
.97c7	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.97ca	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.97cd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97d0	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97d3	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.97d6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97d9	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.97dc	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.97df	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97e2	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97e5	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.97e8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97eb	60		rts				rts
.97ec					SubTopTwoStack:
.97ec	38		sec				sec
.97ed	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.97f0	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.97f3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97f6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97f9	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.97fc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97ff	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9802	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9805	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9808	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.980b	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.980e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9811	60		rts				rts
.9812					AddInteger:
.9812	fa		plx				plx
.9813	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9816	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9819	0a		asl a				asl 	a 							; shift reference bit into sign bit
.981a	0a		asl a				asl 	a
.981b	10 05		bpl $9822			bpl 	_NotRef
.981d	48		pha				pha
.981e	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9821	68		pla				pla
.9822					_NotRef:
.9822	0a		asl a				asl 	a 							; put MSB of type into A:7
.9823	30 0b		bmi $9830			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9825	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9828	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.982b	f0 06		beq $9833			beq 	_IntegerCode 				; if clear, then we have two integers
.982d	4c 4a ab	jmp $ab4a			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9830					_StringData:
.9830	4c e5 96	jmp $96e5			jmp 	StringConcat							; at least one string - don't know both are strings.
.9833					_IntegerCode:
.9833					AddCode:
.9833	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9836	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9839	10 8b		bpl $97c6			bpl 	AddTopTwoStack
.983b	20 ec 97	jsr $97ec			jsr 	SubTopTwoStack 				; do a physical subtraction
.983e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9841	10 09		bpl $984c			bpl 	_AddExit
.9843	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9846	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9849	20 3e a1	jsr $a13e			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.984c					_AddExit:
.984c	60		rts				rts
.984d					SubInteger:
.984d	fa		plx				plx
.984e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9851	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9854	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9855	0a		asl a				asl 	a
.9856	10 05		bpl $985d			bpl 	_NotRef
.9858	48		pha				pha
.9859	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.985c	68		pla				pla
.985d					_NotRef:
.985d	0a		asl a				asl 	a 							; put MSB of type into A:7
.985e	30 0b		bmi $986b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9860	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9863	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9866	f0 06		beq $986e			beq 	_IntegerCode 				; if clear, then we have two integers
.9868	4c 4f ab	jmp $ab4f			jmp 	FloatingPointSub 							; otherwise at least one float.
.986b					_StringData:
.986b	4c 8d af	jmp $af8d			jmp 	NotDoneError							; at least one string - don't know both are strings.
.986e					_IntegerCode:
.986e	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9871	49 80		eor #$80			eor 	#$80
.9873	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9876	80 bb		bra $9833			bra 	AddCode 					; and do the same code as add.
.9878					AndInteger:
.9878	fa		plx				plx
.9879	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.987c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.987f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9880	0a		asl a				asl 	a
.9881	10 05		bpl $9888			bpl 	_NotRef
.9883	48		pha				pha
.9884	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9887	68		pla				pla
.9888					_NotRef:
.9888	0a		asl a				asl 	a
.9889	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.988b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.988e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9891	f0 03		beq $9896			beq 	_IntegerCode 				; if clear, then we have two integers
.9893	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.9896					_IntegerCode:
.9896	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9899	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.989c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.989f	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.98a2	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.98a5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98a8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.98ab	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.98ae	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98b1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.98b4	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.98b7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.98ba	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.98bd	60		rts				rts
.98be					OraInteger:
.98be	fa		plx				plx
.98bf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98c2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98c5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98c6	0a		asl a				asl 	a
.98c7	10 05		bpl $98ce			bpl 	_NotRef
.98c9	48		pha				pha
.98ca	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98cd	68		pla				pla
.98ce					_NotRef:
.98ce	0a		asl a				asl 	a
.98cf	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.98d1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98d4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98d7	f0 03		beq $98dc			beq 	_IntegerCode 				; if clear, then we have two integers
.98d9	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.98dc					_IntegerCode:
.98dc	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.98df	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.98e2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98e5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.98e8	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.98eb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98ee	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.98f1	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.98f4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98f7	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.98fa	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.98fd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9900	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9903	60		rts				rts
.9904					EorInteger:
.9904	fa		plx				plx
.9905	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9908	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.990b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.990c	0a		asl a				asl 	a
.990d	10 05		bpl $9914			bpl 	_NotRef
.990f	48		pha				pha
.9910	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9913	68		pla				pla
.9914					_NotRef:
.9914	0a		asl a				asl 	a
.9915	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9917	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.991a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.991d	f0 03		beq $9922			beq 	_IntegerCode 				; if clear, then we have two integers
.991f	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.9922					_IntegerCode:
.9922	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9925	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9928	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.992b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.992e	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9931	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9934	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9937	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.993a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.993d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9940	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9943	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9946	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9949	60		rts				rts
.994a					WordIndirect:
.994a	fa		plx				plx
.994b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.994e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9951	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9952	0a		asl a				asl 	a
.9953	10 05		bpl $995a			bpl 	_NotRef
.9955	48		pha				pha
.9956	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9959	68		pla				pla
.995a					_NotRef:
.995a	0a		asl a				asl 	a
.995b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.995d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9960	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9963	f0 03		beq $9968			beq 	_IntegerCode 				; if clear, then we have two integers
.9965	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.9968					_IntegerCode:
.9968	20 33 98	jsr $9833			jsr 	AddCode 					; add the two values
.996b	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.996d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9970	60		rts				rts
.9971					ByteIndirect:
.9971	fa		plx				plx
.9972	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9975	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9978	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9979	0a		asl a				asl 	a
.997a	10 05		bpl $9981			bpl 	_NotRef
.997c	48		pha				pha
.997d	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9980	68		pla				pla
.9981					_NotRef:
.9981	0a		asl a				asl 	a
.9982	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9984	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9987	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.998a	f0 03		beq $998f			beq 	_IntegerCode 				; if clear, then we have two integers
.998c	4c 83 af	jmp $af83			jmp 	TypeError 					; anything else, type mismatch.
.998f					_IntegerCode:
.998f	20 33 98	jsr $9833			jsr 	AddCode 					; add the two values
.9992	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9994	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9997	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.aaef					ConvertInt16:
.aaef	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.aaf2	8e 10 04	stx $0410			stx 	NSMantissa1
.aaf5	9c 18 04	stz $0418			stz 	NSMantissa2
.aaf8	9c 20 04	stz $0420			stz 	NSMantissa3
.aafb	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.aafe	a2 00		ldx #$00			ldx 	#0 							; stack level
.ab00	a9 0a		lda #$0a			lda 	#10 						; base
.ab02	80 00		bra $ab04			bra 	ConvertInt32
.ab04					ConvertInt32:
.ab04	5a		phy				phy
.ab05	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ab07	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.ab0a	10 08		bpl $ab14			bpl 	_CI32NotNeg
.ab0c	48		pha				pha
.ab0d	a9 2d		lda #$2d			lda 	#'-'
.ab0f	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ab12	c8		iny				iny
.ab13	68		pla				pla
.ab14					_CI32NotNeg:
.ab14	20 22 ab	jsr $ab22			jsr 	_CI32DivideConvert 			; recursive conversion
.ab17	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.ab19	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.ab1c	7a		ply				ply
.ab1d	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.ab1f	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.ab21	60		rts				rts
.ab22					_CI32DivideConvert:
.ab22	e8		inx				inx 								; write to next slot up
.ab23	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.ab26	ca		dex				dex
.ab27	20 24 aa	jsr $aa24			jsr 	Int32Divide 				; divide
.ab2a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.ab2d	48		pha				pha
.ab2e	20 d3 a9	jsr $a9d3			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.ab31	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; is it zero ?
.ab34	f0 06		beq $ab3c			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.ab36	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.ab39	20 22 ab	jsr $ab22			jsr 	_CI32DivideConvert 			; and recusrively call.
.ab3c					_CI32NoRecurse:
.ab3c	68		pla				pla 								; remainder
.ab3d	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.ab3f	90 02		bcc $ab43			bcc 	_CI32NotHex
.ab41	69 26		adc #$26			adc 	#6+32
.ab43					_CI32NotHex:
.ab43	69 30		adc #$30			adc 	#48
.ab45	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.ab48	c8		iny				iny
.ab49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9998					PrecedenceLevel:
>9998	04					.byte	 4	; $00 <<
>9999	02					.byte	 2	; $01 <=
>999a	02					.byte	 2	; $02 <>
>999b	00					.byte	 0	; $03 !!3
>999c	00					.byte	 0	; $04 ><
>999d	02					.byte	 2	; $05 >=
>999e	04					.byte	 4	; $06 >>
>999f	00					.byte	 0	; $07 !!7
>99a0	00					.byte	 0	; $08 !!8
>99a1	00					.byte	 0	; $09 !!9
>99a2	00					.byte	 0	; $0a !!10
>99a3	00					.byte	 0	; $0b !!11
>99a4	00					.byte	 0	; $0c !!12
>99a5	00					.byte	 0	; $0d !!13
>99a6	00					.byte	 0	; $0e !!14
>99a7	00					.byte	 0	; $0f !!15
>99a8	00					.byte	 0	; $10 @
>99a9	00					.byte	 0	; $11 !!17
>99aa	00					.byte	 0	; $12 !!18
>99ab	00					.byte	 0	; $13 [
>99ac	04					.byte	 4	; $14 \
>99ad	00					.byte	 0	; $15 ]
>99ae	01					.byte	 1	; $16 ^
>99af	00					.byte	 0	; $17 _
>99b0	00					.byte	 0	; $18 `
>99b1	00					.byte	 0	; $19 !!25
>99b2	00					.byte	 0	; $1a !!26
>99b3	00					.byte	 0	; $1b {
>99b4	01					.byte	 1	; $1c |
>99b5	00					.byte	 0	; $1d }
>99b6	00					.byte	 0	; $1e ~
>99b7	00					.byte	 0	; $1f [7m<7F>[m
>99b8	00					.byte	 0	; $20
>99b9	05					.byte	 5	; $21 !
>99ba	00					.byte	 0	; $22 "
>99bb	00					.byte	 0	; $23 #
>99bc	05					.byte	 5	; $24 $
>99bd	04					.byte	 4	; $25 %
>99be	01					.byte	 1	; $26 &
>99bf	00					.byte	 0	; $27 '
>99c0	00					.byte	 0	; $28 (
>99c1	00					.byte	 0	; $29 )
>99c2	04					.byte	 4	; $2a *
>99c3	03					.byte	 3	; $2b +
>99c4	00					.byte	 0	; $2c ,
>99c5	03					.byte	 3	; $2d -
>99c6	00					.byte	 0	; $2e .
>99c7	04					.byte	 4	; $2f /
>99c8	00					.byte	 0	; $30 0
>99c9	00					.byte	 0	; $31 1
>99ca	00					.byte	 0	; $32 2
>99cb	00					.byte	 0	; $33 3
>99cc	00					.byte	 0	; $34 4
>99cd	00					.byte	 0	; $35 5
>99ce	00					.byte	 0	; $36 6
>99cf	00					.byte	 0	; $37 7
>99d0	00					.byte	 0	; $38 8
>99d1	00					.byte	 0	; $39 9
>99d2	00					.byte	 0	; $3a :
>99d3	00					.byte	 0	; $3b ;
>99d4	02					.byte	 2	; $3c <
>99d5	02					.byte	 2	; $3d =
>99d6	02					.byte	 2	; $3e >
>99d7	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.99d8					EvaluateExpressionAt0:
.99d8	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.99da					EvaluateExpression:
.99da	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.99dc					EvaluateExpressionAtPrecedence:
.99dc	48		pha				pha 								; save precedence level
.99dd	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm 				; evaluate term into level X.
.99e0	68		pla				pla 								; restore precedence level.
.99e1					_EXPRLoop:
.99e1	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.99e3	b1 30		lda ($30),y			lda 	(codePtr),y
.99e5	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.99e7	b0 25		bcs $9a0e			bcs 	_EXPRExit
.99e9	da		phx				phx 								; read the operator precedence
.99ea	aa		tax				tax
.99eb	bd 98 99	lda $9998,x			lda 	PrecedenceLevel,x
.99ee	fa		plx				plx
.99ef	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.99f1	f0 1b		beq $9a0e			beq 	_EXPRExit
.99f3	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.99f5	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.99f7	c5 37		cmp $37				cmp 	zTemp0+1
.99f9	b0 13		bcs $9a0e			bcs		_EXPRExit 					; if current >= operator exit
.99fb	48		pha				pha 								; save current precedence.
.99fc	b1 30		lda ($30),y			lda 	(codePtr),y
.99fe	c8		iny				iny
.99ff	48		pha				pha
.9a00	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9a02	e8		inx				inx 								; work out the right hand side.
.9a03	20 dc 99	jsr $99dc			jsr 	EvaluateExpressionAtPrecedence
.9a06	ca		dex				dex
.9a07	68		pla				pla 								; get operator, call the code.
.9a08	20 11 9a	jsr $9a11			jsr 	_EXPRCaller
.9a0b	68		pla				pla 								; restore precedence level
.9a0c	80 d3		bra $99e1			bra 	_EXPRLoop 					; and go round.
.9a0e					_EXPRExit:
.9a0e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9a10	60		rts				rts
.9a11					_EXPRCaller:
.9a11	da		phx				phx 								; save on stack, first thing is to restore it
.9a12	0a		asl a				asl 	a 							; double so can use vectors into X
.9a13	aa		tax				tax
.9a14	7c f0 91	jmp ($91f0,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.ab4a					FloatingPointAdd:
.ab4a	20 eb ac	jsr $aceb			jsr 	FloatPrepare 				; prepare for floats
.ab4d	80 0b		bra $ab5a			bra 	FloatAdd
.ab4f					FloatingPointSub:
.ab4f	20 eb ac	jsr $aceb			jsr 	FloatPrepare 				; prepare for floats
.ab52					FloatSubtract:
.ab52	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.ab55	49 80		eor #$80			eor 	#$80
.ab57	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.ab5a					FloatAdd:
.ab5a	48		pha				pha
.ab5b	5a		phy				phy
.ab5c	20 fc ac	jsr $acfc			jsr 	NSNormalise 				; normalise S[X]
.ab5f	f0 54		beq $abb5			beq 	_FAReturn1
.ab61	e8		inx				inx 								; normalise S[X+1]
.ab62	20 fc ac	jsr $acfc			jsr 	NSNormalise
.ab65	ca		dex				dex
.ab66	c9 00		cmp #$00			cmp 	#0
.ab68	f0 6f		beq $abd9			beq 	_FAExit 					; if so, just return A
.ab6a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.ab6d	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.ab70	f0 1b		beq $ab8d			beq 	_FAExponentsEqual
.ab72	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.ab75	a8		tay				tay
.ab76	38		sec				sec 								; do a signed comparison of the exponents.
.ab77	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ab7a	50 02		bvc $ab7e			bvc 	_FANoSignedChange
.ab7c	49 80		eor #$80			eor 	#$80
.ab7e					_FANoSignedChange:
.ab7e	29 80		and #$80			and 	#$80
.ab80	10 03		bpl $ab85			bpl 	_FAHaveMax
.ab82	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.ab85					_FAHaveMax:
.ab85	20 dc ab	jsr $abdc			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.ab88	e8		inx				inx
.ab89	20 dc ab	jsr $abdc			jsr 	_FAShiftToExponent
.ab8c	ca		dex				dex
.ab8d					_FAExponentsEqual:
.ab8d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.ab90	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ab93	30 10		bmi $aba5			bmi 	_FADifferentSigns
.ab95	20 c6 97	jsr $97c6			jsr 	AddTopTwoStack 				; do the add of the mantissae
.ab98	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.ab9b	10 3c		bpl $abd9			bpl 	_FAExit 					; if no, we are done.
.ab9d	20 ac a1	jsr $a1ac			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.aba0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.aba3	80 34		bra $abd9			bra 	_FAExit
.aba5					_FADifferentSigns:
.aba5	20 ec 97	jsr $97ec			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.aba8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.abab	10 2c		bpl $abd9			bpl 	_FAExit 					; if no, we are done.
.abad	20 35 a1	jsr $a135			jsr 	NSMNegate 					; netate result
.abb0	20 3e a1	jsr $a13e			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.abb3	80 24		bra $abd9			bra 	_FAExit
.abb5					_FAReturn1:
.abb5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.abb8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.abbb	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.abbe	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.abc1	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.abc4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.abc7	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.abca	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.abcd	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.abd0	9d 28 04	sta $0428,x			sta 	NSExponent,x
.abd3	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.abd6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abd9					_FAExit:
.abd9	7a		ply				ply
.abda	68		pla				pla
.abdb	60		rts				rts
.abdc					_FAShiftToExponent:
.abdc					_FAShiftToExponent2:
.abdc	98		tya				tya 								; compare Y to exponent
.abdd	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.abe0	f0 08		beq $abea			beq 	_FASEExit 					; exit if so.
.abe2	20 ac a1	jsr $a1ac			jsr 	NSMShiftRight	 			; shift the mantissa right
.abe5	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.abe8	80 f2		bra $abdc			bra 	_FAShiftToExponent2
.abea					_FASEExit:
.abea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.abeb					CompareFloat:
.abeb	20 52 ab	jsr $ab52			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.abee	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.abf1	29 f8		and #$f8			and 	#$F8
.abf3	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.abf6	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.abf9	f0 09		beq $ac04			beq 	_FCExit 					; zero, so approximately identical
.abfb	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.abfd	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ac00	10 02		bpl $ac04			bpl 	_FCExit
.ac02					_FCNegative:
.ac02	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ac04					_FCExit:
.ac04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ac05					FDivideCommand:
.ac05	fa		plx				plx	 								; restore stack position
.ac06	20 eb ac	jsr $aceb			jsr 	FloatPrepare 				; prepare for floats
.ac09					FloatDivide:
.ac09	48		pha				pha
.ac0a	e8		inx				inx
.ac0b	20 fc ac	jsr $acfc			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ac0e	ca		dex				dex
.ac0f	c9 00		cmp #$00			cmp 	#0
.ac11	f0 20		beq $ac33			beq 	_FDZero
.ac13	20 fc ac	jsr $acfc			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ac16	f0 19		beq $ac31			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ac18	20 46 aa	jsr $aa46			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.ac1b	20 d3 a9	jsr $a9d3			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.ac1e	20 fc ac	jsr $acfc			jsr		NSNormalise 				; renormalise
.ac21	20 e1 aa	jsr $aae1			jsr 	CalculateSign 				; calculate result sign
.ac24	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.ac27	38		sec				sec
.ac28	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ac2b	38		sec				sec
.ac2c	e9 1e		sbc #$1e			sbc 	#30
.ac2e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ac31					_FDExit:
.ac31	68		pla				pla
.ac32	60		rts				rts
.ac33					_FDZero:
.ac33	a9 03		lda #$03		lda	#3
.ac35	4c d1 95	jmp $95d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.ac38					FloatFractionalPart:
.ac38	5a		phy				phy
.ac39	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.ac3c	29 7f		and #$7f			and 	#$7F
.ac3e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac41	20 fc ac	jsr $acfc			jsr 	NSNormalise
.ac44	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.ac47	38		sec				sec
.ac48	e9 e0		sbc #$e0			sbc 	#$E0
.ac4a	90 31		bcc $ac7d			bcc 	_FFPExit 					; already fractional
.ac4c	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.ac4e	b0 2a		bcs $ac7a			bcs 	_FFPZero
.ac50	a8		tay				tay 								; put count to do in Y
.ac51	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.ac54	20 7f ac	jsr $ac7f			jsr 	_FFPPartial
.ac57	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ac5a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.ac5d	20 7f ac	jsr $ac7f			jsr 	_FFPPartial
.ac60	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ac63	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ac66	20 7f ac	jsr $ac7f			jsr 	_FFPPartial
.ac69	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac6c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ac6f	20 7f ac	jsr $ac7f			jsr 	_FFPPartial
.ac72	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ac75	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; zeroed check.
.ac78	d0 03		bne $ac7d			bne 	_FFPExit
.ac7a					_FFPZero:
.ac7a	20 89 a1	jsr $a189			jsr 	NSMSetZero
.ac7d					_FFPExit:
.ac7d	7a		ply				ply
.ac7e	60		rts				rts
.ac7f					_FFPPartial:
.ac7f	c0 00		cpy #$00			cpy 	#0 							; no more to do
.ac81	f0 17		beq $ac9a			beq 	_FFFPPExit
.ac83	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.ac85	b0 0c		bcs $ac93			bcs 	_FFFPPWholeByte
.ac87	5a		phy				phy
.ac88					_FFFPPLeft:
.ac88	0a		asl a				asl 	a
.ac89	88		dey				dey
.ac8a	d0 fc		bne $ac88			bne 	_FFFPPLeft
.ac8c	7a		ply				ply
.ac8d					_FFFPPRight:
.ac8d	4a		lsr a				lsr 	a
.ac8e	88		dey				dey
.ac8f	d0 fc		bne $ac8d			bne 	_FFFPPRight
.ac91	80 07		bra $ac9a			bra 	_FFFPPExit
.ac93					_FFFPPWholeByte:
.ac93	98		tya				tya 								; subtract 8 from count
.ac94	38		sec				sec
.ac95	e9 08		sbc #$08			sbc 	#8
.ac97	a8		tay				tay
.ac98	a9 00		lda #$00			lda 	#0 							; and clear all
.ac9a					_FFFPPExit:
.ac9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.ac9b					FloatIntegerPart:
.ac9b	48		pha				pha
.ac9c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.ac9f	f0 1f		beq $acc0			beq 	_FIPExit 					; if so do nothing
.aca1	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; is it zero ?
.aca4	f0 17		beq $acbd			beq 	_FIPZero 					; if so return zero.
.aca6	20 fc ac	jsr $acfc			jsr 	NSNormalise 				; normalise
.aca9	f0 12		beq $acbd			beq 	_FIPZero 					; normalised to zero, exit zero
.acab					_FIPShift:
.acab	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.acae	10 08		bpl $acb8			bpl 	_FIPCheckZero
.acb0	20 ac a1	jsr $a1ac			jsr 	NSMShiftRight 				; shift mantissa right
.acb3	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.acb6	80 f3		bra $acab			bra 	_FIPShift
.acb8					_FIPCheckZero:
.acb8	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; avoid -0 problem
.acbb	d0 03		bne $acc0			bne 	_FIPExit 					; set to zero if mantissa zero.
.acbd					_FIPZero:
.acbd	20 89 a1	jsr $a189			jsr 	NSMSetZero
.acc0					_FIPExit:
.acc0	68		pla				pla
.acc1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.acc2					FloatingPointMultiply:
.acc2	20 eb ac	jsr $aceb			jsr 	FloatPrepare 				; prepare for floats
.acc5					FloatMultiply:
.acc5	48		pha				pha
.acc6	20 fc ac	jsr $acfc			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.acc9	f0 1b		beq $ace6			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.accb	e8		inx				inx
.accc	20 fc ac	jsr $acfc			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.accf	ca		dex				dex
.acd0	c9 00		cmp #$00			cmp 	#0
.acd2	f0 0f		beq $ace3			beq 	_FDSetZero
.acd4	20 9c aa	jsr $aa9c			jsr 	MultiplyShort 				; calculate the result.
.acd7	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.acda	18		clc				clc
.acdb	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.acde	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ace1	80 03		bra $ace6			bra 	_FDExit
.ace3					_FDSetZero:
.ace3	20 89 a1	jsr $a189			jsr 	NSMSetZero 					; return 0
.ace6					_FDExit:
.ace6	20 fc ac	jsr $acfc			jsr 	NSNormalise 				; normalise the result
.ace9	68		pla				pla
.acea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aceb					FloatPrepare:
.aceb	20 ea 9a	jsr $9aea			jsr 	DereferenceTopTwo 			; dereference the top two values
.acee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.acf1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.acf4	29 10		and #$10			and 	#NSBIsString
.acf6	d0 01		bne $acf9			bne 	_FDType
.acf8	60		rts				rts
.acf9					_FDType:
.acf9	4c 83 af	jmp $af83			jmp 	TypeError
.acfc					NSNormalise:
.acfc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.acff	29 80		and #$80			and 	#$80
.ad01	09 08		ora #$08			ora 	#NSTFloat
.ad03	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad06	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; if zero exit
.ad09	d0 09		bne $ad14			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ad0b	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ad0e	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ad11	a9 00		lda #$00			lda 	#0 							; set Z flag
.ad13	60		rts				rts
.ad14					_NSNormaliseOptimise:
.ad14	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.ad17	d0 22		bne $ad3b			bne 	_NSNormaliseLoop
.ad19	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.ad1c	30 1d		bmi $ad3b			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.ad1e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ad21	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ad24	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad27	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ad2a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad2d	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.ad30	bd 28 04	lda $0428,x			lda 	NSExponent,x
.ad33	38		sec				sec
.ad34	e9 08		sbc #$08			sbc 	#8
.ad36	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ad39	80 d9		bra $ad14			bra 	_NSNormaliseOptimise
.ad3b					_NSNormaliseLoop:
.ad3b	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.ad3e	70 08		bvs $ad48			bvs 	_NSNExit 					; exit if so with Z flag clear
.ad40	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; shift mantissa left
.ad43	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ad46	80 f3		bra $ad3b			bra 	_NSNormaliseLoop
.ad48					_NSNExit:
.ad48	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ad4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9a17					AssignNumber:
.9a17	5a		phy				phy
.9a18	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9a1b	85 36		sta $36				sta 	zTemp0
.9a1d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a20	85 37		sta $37				sta 	zTemp0+1
.9a22	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9a25	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9a27	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a2a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9a2c	c9 08		cmp #$08			cmp 	#NSTFloat
.9a2e	f0 2a		beq $9a5a			beq 	_ANFloat
.9a30	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9a33	f0 05		beq $9a3a			beq		_ANNotFloat
.9a35	e8		inx				inx
.9a36	20 9b ac	jsr $ac9b			jsr 	FloatIntegerPart 			; make it an integer
.9a39	ca		dex				dex
.9a3a					_ANNotFloat:
.9a3a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9a3d	29 03		and #$03			and 	#3
.9a3f	d0 05		bne $9a46			bne 	_ANByteWord
.9a41	20 66 9a	jsr $9a66			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9a44	80 1e		bra $9a64			bra 	_ANExit
.9a46					_ANByteWord:
.9a46	48		pha				pha 								; save count
.9a47	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9a4a	92 36		sta ($36)			sta 	(zTemp0)
.9a4c	68		pla				pla
.9a4d	c9 01		cmp #$01			cmp	 	#1
.9a4f	f0 13		beq $9a64			beq 	_ANExit
.9a51	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9a54	a0 01		ldy #$01			ldy 	#1
.9a56	91 36		sta ($36),y			sta 	(zTemp0),y
.9a58	80 0a		bra $9a64			bra 	_ANExit
.9a5a					_ANFloat:
.9a5a	20 66 9a	jsr $9a66			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9a5d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9a60	a0 04		ldy #$04			ldy 	#4
.9a62	91 36		sta ($36),y			sta 	(zTemp0),y
.9a64					_ANExit:
.9a64	7a		ply				ply
.9a65	60		rts				rts
.9a66					_ANCopy4PackSign:
.9a66	a0 03		ldy #$03			ldy 	#3
.9a68	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9a6b	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9a6d	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9a70	91 36		sta ($36),y			sta 	(zTemp0),y
.9a72	88		dey				dey
.9a73	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a76	91 36		sta ($36),y			sta 	(zTemp0),y
.9a78	88		dey				dey
.9a79	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a7c	91 36		sta ($36),y			sta 	(zTemp0),y
.9a7e	88		dey				dey
.9a7f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a82	91 36		sta ($36),y			sta 	(zTemp0),y
.9a84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9a85					AssignString:
.9a85	5a		phy				phy
.9a86	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a89	85 38		sta $38				sta 	zTemp1
.9a8b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a8e	85 39		sta $39				sta 	zTemp1+1
.9a90	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a93	85 36		sta $36				sta 	zTemp0
.9a95	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a98	85 37		sta $37				sta 	zTemp0+1
.9a9a	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9a9c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a9e	f0 23		beq $9ac3			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9aa0	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9aa1	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9aa3	e9 02		sbc #$02			sbc 	#2
.9aa5	85 3c		sta $3c				sta 	zsTemp
.9aa7	a0 01		ldy #$01			ldy 	#1
.9aa9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9aab	e9 00		sbc #$00			sbc 	#0
.9aad	85 3d		sta $3d				sta 	zsTemp+1
.9aaf	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9ab1					_ASGetLength:
.9ab1	c8		iny				iny
.9ab2	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ab4	d0 fb		bne $9ab1			bne 	_ASGetLength
.9ab6	98		tya				tya 								; is this length <= current length
.9ab7	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9ab9	90 20		bcc $9adb			bcc 	_ASCopyString
.9abb	f0 1e		beq $9adb			beq 	_ASCopyString
.9abd	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9abf	a0 01		ldy #$01			ldy 	#1
.9ac1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ac3					_ASNewStringRequired:
.9ac3	e8		inx				inx 								; concrete the new string.
.9ac4	20 1f b2	jsr $b21f			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9ac7	ca		dex				dex
.9ac8	18		clc				clc
.9ac9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9acc	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9ace	92 36		sta ($36)			sta 	(zTemp0)
.9ad0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9ad3	69 00		adc #$00			adc 	#0
.9ad5	a0 01		ldy #$01			ldy 	#1
.9ad7	91 36		sta ($36),y			sta 	(zTemp0),y
.9ad9	80 0d		bra $9ae8			bra 	_ASExit
.9adb					_ASCopyString:
.9adb	a0 00		ldy #$00			ldy 	#0
.9add					_ASCopyLoop:
.9add	b1 38		lda ($38),y			lda 	(zTemp1),y
.9adf	c8		iny				iny
.9ae0	c8		iny				iny
.9ae1	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ae3	88		dey				dey
.9ae4	c9 00		cmp #$00			cmp 	#0
.9ae6	d0 f5		bne $9add			bne 	_ASCopyLoop
.9ae8					_ASExit:
.9ae8	7a		ply				ply
.9ae9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9aea					DereferenceTopTwo:
.9aea	e8		inx				inx
.9aeb	20 ef 9a	jsr $9aef			jsr 	Dereference 				; deref x+1
.9aee	ca		dex				dex  								; falls through to deref x
.9aef					Dereference:
.9aef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9af2	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9af4	f0 57		beq $9b4d			beq 	_DRFExit 					; not a reference
.9af6	5a		phy				phy
.9af7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9afa	85 36		sta $36				sta 	zTemp0
.9afc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9aff	85 37		sta $37				sta 	zTemp0+1
.9b01	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9b04	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b06	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b09	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9b0c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b0e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b10	f0 0f		beq $9b21			beq 	_DRFDereferenceTwo
.9b12	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9b14	f0 39		beq $9b4f			beq 	_DRFFull
.9b16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9b19	29 03		and #$03			and 	#3
.9b1b	f0 32		beq $9b4f			beq 	_DRFFull 					; the whole word
.9b1d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9b1f	f0 07		beq $9b28			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9b21					_DRFDereferenceTwo:
.9b21	a0 01		ldy #$01			ldy 	#1
.9b23	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b25	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b28					_DRFClear23:
.9b28	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9b2b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9b2e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9b31	29 18		and #$18			and 	#NSBTypeMask
.9b33	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b36	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9b38	d0 12		bne $9b4c			bne 	_DRFNotString
.9b3a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9b3d	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9b40	d0 0a		bne $9b4c			bne 	_DRFNotString
.9b42	a9 4e		lda #$4e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9b44	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9b47	a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9b49	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9b4c					_DRFNotString
.9b4c	7a		ply				ply 								; restore Y and exit
.9b4d					_DRFExit:
.9b4d	60		rts				rts
.9b4e					_DRFNullString:
>9b4e	00						.byte 	0
.9b4f					_DRFFull:
.9b4f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9b51	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b53	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b56	c8		iny				iny
.9b57	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b59	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b5c	c8		iny				iny
.9b5d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b5f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b62	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9b65	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9b68	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9b6a	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9b6d	f0 06		beq $9b75			beq 	_DRFNoExponent
.9b6f	c8		iny				iny 								; if not, read the exponent as well.
.9b70	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b72	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9b75					_DRFNoExponent:
.9b75	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9b78	10 0d		bpl $9b87			bpl 	_DRFExit2 					; if not, then exit.
.9b7a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9b7c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b7f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9b82	09 80		ora #$80			ora 	#NSBIsNegative
.9b84	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b87					_DRFExit2:
.9b87	7a		ply				ply
.9b88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9b89					EncodeNumberStart:
.9b89	38		sec				sec
.9b8a	80 01		bra $9b8d			bra 	EncodeNumberContinue+1
.9b8c					EncodeNumberContinue:
.9b8c	18		clc				clc
.9b8d					EncodeNumber:
.9b8d	08		php				php 								; save reset.
.9b8e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9b90	f0 12		beq $9ba4			beq 	_ENIsOkay
.9b92	c9 30		cmp #$30			cmp 	#"0"
.9b94	90 04		bcc $9b9a			bcc 	_ENBadNumber
.9b96	c9 3a		cmp #$3a			cmp 	#"9"+1
.9b98	90 0a		bcc $9ba4			bcc 	_ENIsOkay
.9b9a					_ENBadNumber:
.9b9a	28		plp				plp 								; throw saved reset
.9b9b	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9b9e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ba0	f0 7e		beq $9c20			beq 	_ENConstructFinal
.9ba2					_ENFail:
.9ba2	18		clc				clc 								; not allowed
.9ba3	60		rts				rts
.9ba4					_ENIsOkay:
.9ba4	28		plp				plp 								; are we restarting
.9ba5	90 15		bcc $9bbc			bcc 	_ENNoRestart
.9ba7					_ENStartEncode:
.9ba7	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ba9	f0 0c		beq $9bb7			beq 	_ENFirstDP
.9bab	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9bad	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.9bb0	a9 01		lda #$01			lda 	#ESTA_Low
.9bb2					_ENExitChange:
.9bb2	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9bb5	38		sec				sec
.9bb6	60		rts				rts
.9bb7					_ENFirstDP:
.9bb7	20 89 a1	jsr $a189			jsr 	NSMSetZero 					; clear integer part
.9bba	80 3f		bra $9bfb			bra 	_ESTASwitchFloat			; go straight to float and exi
.9bbc					_ENNoRestart:
.9bbc	48		pha				pha 								; save on stack.
.9bbd	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9bc0	c9 01		cmp #$01			cmp 	#ESTA_Low
.9bc2	f0 09		beq $9bcd			beq  	_ESTALowState
.9bc4	c9 02		cmp #$02			cmp 	#ESTA_High
.9bc6	f0 29		beq $9bf1			beq 	_ESTAHighState
.9bc8	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9bca	f0 3b		beq $9c07			beq 	_ESTADecimalState
>9bcc	db						.byte 	$DB 						; causes a break in the emulator
.9bcd					_ESTALowState:
.9bcd	68		pla				pla 								; get value back
.9bce	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9bd0	f0 29		beq $9bfb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9bd2	29 0f		and #$0f			and 	#15 						; make digit
.9bd4	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9bd7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9bda	0a		asl a				asl 	a
.9bdb	0a		asl a				asl 	a
.9bdc	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9bdf	0a		asl a				asl 	a
.9be0	6d 86 04	adc $0486			adc 	DigitTemp
.9be3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9be6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9be8	90 05		bcc $9bef			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9bea	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9bec	8d 85 04	sta $0485			sta 	EncodeState
.9bef					_ESTANoSwitch:
.9bef	38		sec				sec
.9bf0	60		rts				rts
.9bf1					_ESTAHighState:
.9bf1	68		pla				pla 								; get value back
.9bf2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9bf4	f0 05		beq $9bfb			beq 	_ESTASwitchFloat
.9bf6	20 5a 9c	jsr $9c5a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9bf9	38		sec				sec
.9bfa	60		rts				rts
.9bfb					_ESTASwitchFloat:
.9bfb	9c 87 04	stz $0487			stz 	DecimalCount
.9bfe	e8		inx				inx 								; zero the decimal additive.
.9bff	20 89 a1	jsr $a189			jsr 	NSMSetZero
.9c02	ca		dex				dex
.9c03	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c05	80 ab		bra $9bb2			bra 	_ENExitChange
.9c07					_ESTADecimalState:
.9c07	68		pla				pla 								; digit.
.9c08	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c0a	f0 96		beq $9ba2			beq 	_ENFail
.9c0c	e8		inx				inx 								; put digit into fractional part of X+1
.9c0d	20 5a 9c	jsr $9c5a			jsr 	ESTAShiftDigitIntoMantissa
.9c10	ca		dex				dex
.9c11	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9c14	ad 87 04	lda $0487			lda 	DecimalCount
.9c17	c9 0b		cmp #$0b			cmp 	#11
.9c19	f0 02		beq $9c1d			beq 	_ESTADSFail
.9c1b	38		sec				sec
.9c1c	60		rts				rts
.9c1d					_ESTADSFail:
.9c1d	4c 7e af	jmp $af7e			jmp 	RangeError
.9c20					_ENConstructFinal:
.9c20	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9c23	f0 33		beq $9c58			beq 	_ENCFExit 					; no decimals
.9c25	5a		phy				phy
.9c26	0a		asl a				asl 	a 							; x 4 and CLC
.9c27	0a		asl a				asl 	a
.9c28	6d 87 04	adc $0487			adc 	DecimalCount
.9c2b	a8		tay				tay
.9c2c	b9 3d af	lda $af3d,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9c2f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c32	b9 3e af	lda $af3e,y			lda 	DecimalScalarTable-5+1,y
.9c35	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9c38	b9 3f af	lda $af3f,y			lda 	DecimalScalarTable-5+2,y
.9c3b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9c3e	b9 40 af	lda $af40,y			lda 	DecimalScalarTable-5+3,y
.9c41	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9c44	b9 41 af	lda $af41,y			lda 	DecimalScalarTable-5+4,y
.9c47	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9c4a	a9 08		lda #$08			lda 	#NSTFloat
.9c4c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9c4f	7a		ply				ply
.9c50	e8		inx				inx 								; multiply decimal const by decimal scalar
.9c51	20 c5 ac	jsr $acc5			jsr 	FloatMultiply
.9c54	ca		dex				dex
.9c55	20 5a ab	jsr $ab5a			jsr 	FloatAdd 					; add to integer part.
.9c58					_ENCFExit:
.9c58	18		clc				clc 								; reject the digit.
.9c59	60		rts				rts
.9c5a					ESTAShiftDigitIntoMantissa:
.9c5a	29 0f		and #$0f			and 	#15 						; save digit
.9c5c	48		pha				pha
.9c5d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9c60	48		pha				pha
.9c61	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9c64	48		pha				pha
.9c65	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c68	48		pha				pha
.9c69	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c6c	48		pha				pha
.9c6d	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; x 2
.9c70	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; x 4
.9c73	18		clc				clc 								; pop mantissa and add
.9c74	68		pla				pla
.9c75	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c78	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c7b	68		pla				pla
.9c7c	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9c7f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c82	68		pla				pla
.9c83	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9c86	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c89	68		pla				pla
.9c8a	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9c8d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9c90	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; x 10
.9c93	68		pla				pla 								; add digit
.9c94	18		clc				clc
.9c95	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c98	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c9b	90 0d		bcc $9caa			bcc 	_ESTASDExit
.9c9d	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9ca0	d0 08		bne $9caa			bne 	_ESTASDExit
.9ca2	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9ca5	d0 03		bne $9caa			bne 	_ESTASDExit
.9ca7	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9caa					_ESTASDExit:
.9caa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9cab					EvaluateTerm:
.9cab	b1 30		lda ($30),y			lda 	(codePtr),y
.9cad	30 18		bmi $9cc7			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9caf	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9cb1	b0 6f		bcs $9d22			bcs 	_ETVariable
.9cb3	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9cb5	90 6e		bcc $9d25			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9cb7	c9 3a		cmp #$3a			cmp 	#'9'+1
.9cb9	b0 6a		bcs $9d25			bcs 	_ETPuncUnary
.9cbb	20 89 9b	jsr $9b89			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9cbe					_ETNumber:
.9cbe	c8		iny				iny 								; keep encoding until we have the numbers
.9cbf	b1 30		lda ($30),y			lda 	(codePtr),y
.9cc1	20 8c 9b	jsr $9b8c			jsr 	EncodeNumberContinue
.9cc4	b0 f8		bcs $9cbe			bcs 	_ETNumber 					; go back if accepted.
.9cc6	60		rts				rts
.9cc7					_ETCheckUnary:
.9cc7	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9cc9	f0 41		beq $9d0c			beq 	_ETString
.9ccb	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9ccd	f0 12		beq $9ce1			beq 	_ETHexConstant
.9ccf	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9cd1	90 0b		bcc $9cde			bcc 	_ETSyntaxError
.9cd3	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9cd5	b0 07		bcs $9cde			bcs 	_ETSyntaxError
.9cd7	da		phx				phx 								; push X on the stack
.9cd8	0a		asl a				asl 	a 							; put vector x 2 into X
.9cd9	aa		tax				tax
.9cda	c8		iny				iny 								; consume unary function token
.9cdb	7c 70 92	jmp ($9270,x)			jmp 	(VectorSet0,x) 				; and do it.
.9cde					_ETSyntaxError:
.9cde	4c 79 af	jmp $af79			jmp 	SyntaxError
.9ce1					_ETHexConstant:
.9ce1	c8		iny				iny 								; skip #
.9ce2	c8		iny				iny 								; skip count
.9ce3	20 89 a1	jsr $a189			jsr 	NSMSetZero 					; clear result
.9ce6					_ETHLoop:
.9ce6	b1 30		lda ($30),y			lda 	(codePtr),y
.9ce8	c8		iny				iny 								; and consume
.9ce9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9ceb	f0 1e		beq $9d0b			beq 	_ETHExit
.9ced	48		pha				pha 								; save on stack.
.9cee	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; x 2
.9cf1	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; x 4
.9cf4	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; x 8
.9cf7	20 9e a1	jsr $a19e			jsr 	NSMShiftLeft 				; x 16
.9cfa	68		pla				pla 								; ASCII
.9cfb	c9 41		cmp #$41			cmp 	#'A'
.9cfd	90 02		bcc $9d01			bcc 	_ETHNotChar
.9cff	e9 07		sbc #$07			sbc 	#7
.9d01					_ETHNotChar:
.9d01	29 0f		and #$0f			and 	#15 						; digit now
.9d03	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d06	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d09	80 db		bra $9ce6			bra 	_ETHLoop 					; go round.
.9d0b					_ETHExit:
.9d0b	60		rts				rts
.9d0c					_ETString:
.9d0c	c8		iny				iny 								; look at length
.9d0d	b1 30		lda ($30),y			lda 	(codePtr),y
.9d0f	48		pha				pha
.9d10	c8		iny				iny 								; first character
.9d11	20 d3 a1	jsr $a1d3			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d14	68		pla				pla 								; restore count and save
.9d15	85 36		sta $36				sta 	zTemp0
.9d17	98		tya				tya 								; add length to Y to skip it.
.9d18	18		clc				clc
.9d19	65 36		adc $36				adc 	zTemp0
.9d1b	a8		tay				tay
.9d1c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d1e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d21	60		rts				rts
.9d22					_ETVariable:
.9d22	4c 7c 9d	jmp $9d7c			jmp 	VariableHandler
.9d25					_ETPuncUnary:
.9d25	c8		iny				iny 								; consume the unary character
.9d26	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d28	f0 2d		beq $9d57			beq 	_ETUnaryNegate
.9d2a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9d2c	f0 39		beq $9d67			beq 	_ETDereference
.9d2e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d30	f0 43		beq $9d75			beq 	_ETParenthesis
.9d32	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d34	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d36	f0 06		beq $9d3e			beq 	_ETIndirection
.9d38	e6 36		inc $36				inc 	zTemp0
.9d3a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d3c	d0 a0		bne $9cde			bne 	_ETSyntaxError
.9d3e					_ETIndirection:
.9d3e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d40	1a		inc a				inc 	a
.9d41	48		pha				pha
.9d42	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm				; evaluate the term
.9d45	20 ef 9a	jsr $9aef			jsr 	Dereference 				; dereference it.
.9d48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9d4b	d0 07		bne $9d54			bne 	_ETTypeMismatch
.9d4d	68		pla				pla 								; indirection 1-2
.9d4e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9d50	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d53	60		rts				rts
.9d54					_ETTypeMismatch:
.9d54	4c 83 af	jmp $af83			jmp 	TypeError
.9d57					_ETUnaryNegate:
.9d57	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm				; evaluate the term
.9d5a	20 ef 9a	jsr $9aef			jsr 	Dereference 				; dereference it.
.9d5d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9d60	29 10		and #$10			and 	#NSTString
.9d62	d0 f0		bne $9d54			bne 	_ETTypeMismatch
.9d64	4c 35 a1	jmp $a135			jmp 	NSMNegate  					; just toggles the sign bit.
.9d67					_ETDereference:
.9d67	20 ab 9c	jsr $9cab			jsr 	EvaluateTerm				; evaluate the term
.9d6a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9d6d	29 20		and #$20			and 	#NSBIsReference
.9d6f	f0 e3		beq $9d54			beq 	_ETTypeMismatch
.9d71	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9d74	60		rts				rts
.9d75					_ETParenthesis:
.9d75	20 da 99	jsr $99da			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9d78	20 93 a9	jsr $a993			jsr 	CheckRightBracket 			; check for )
.9d7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9d7c					VariableHandler:
.9d7c	b1 30		lda ($30),y			lda 	(codePtr),y
.9d7e	18		clc				clc
.9d7f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9d81	85 37		sta $37				sta 	zTemp0+1
.9d83	c8		iny				iny
.9d84	b1 30		lda ($30),y			lda 	(codePtr),y
.9d86	85 36		sta $36				sta 	zTemp0
.9d88	c8		iny				iny
.9d89	18		clc				clc									; copy variable address+3 to mantissa
.9d8a	69 03		adc #$03			adc 	#3
.9d8c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d8f	a5 37		lda $37				lda 	zTemp0+1
.9d91	69 00		adc #$00			adc 	#0
.9d93	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d96	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9d99	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9d9c	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d9f	5a		phy				phy
.9da0	a0 02		ldy #$02			ldy 	#2 							; read type
.9da2	b1 36		lda ($36),y			lda 	(zTemp0),y
.9da4	7a		ply				ply
.9da5	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9da7	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9da9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dac	29 04		and #$04			and 	#NSBIsArray
.9dae	d0 01		bne $9db1			bne 	_VHArray
.9db0	60		rts				rts
.9db1					_VHArray:
.9db1	e8		inx				inx
.9db2	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9db5	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9db7	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9dba	b1 30		lda ($30),y			lda 	(codePtr),y
.9dbc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9dbe	d0 06		bne $9dc6			bne 	_VHNoSecondIndex
.9dc0	c8		iny				iny 								; skip the comma
.9dc1	e8		inx				inx
.9dc2	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9dc5	ca		dex				dex
.9dc6					_VHNoSecondIndex:
.9dc6	ca		dex				dex 								; set X back.
.9dc7	20 93 a9	jsr $a993			jsr 	CheckRightBracket 			; and check the right bracket.
.9dca	5a		phy				phy 								; save position
.9dcb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9dce	85 3e		sta $3e				sta 	zaTemp
.9dd0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dd3	85 3f		sta $3f				sta 	zaTemp+1
.9dd5	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9dd7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9dd9	f0 02		beq $9ddd			beq 	_VHHas2Mask
.9ddb	a9 ff		lda #$ff			lda 	#$FF
.9ddd					_VHHas2Mask:
.9ddd	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9de0	f0 54		beq $9e36			beq 	_VHBadIndex
.9de2	0a		asl a				asl 	a 							; carry will be set if a second index
.9de3	90 09		bcc $9dee			bcc 	_VHCheckFirstIndex
.9de5	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9de7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9de9	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9dec	90 48		bcc $9e36			bcc 	_VHBadIndex
.9dee					_VHCheckFirstIndex:
.9dee	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9df0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9df2	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9df5	90 3f		bcc $9e36			bcc 	_VHBadIndex
.9df7	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9df9	64 37		stz $37				stz 	zTemp0+1
.9dfb	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9dfe	30 0f		bmi $9e0f			bmi 	_VHNoMultiply
.9e00	da		phx				phx
.9e01	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e04	48		pha				pha
.9e05	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e07	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e09	1a		inc a				inc 	a 							; add 1 for zero base
.9e0a	fa		plx				plx
.9e0b	20 15 ae	jsr $ae15			jsr 	Multiply8x8 				; calculate -> Z0
.9e0e	fa		plx				plx
.9e0f					_VHNoMultiply:
.9e0f	18		clc				clc
.9e10	a5 36		lda $36				lda 	zTemp0
.9e12	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9e15	85 36		sta $36				sta 	zTemp0
.9e17	a5 37		lda $37				lda 	zTemp0+1
.9e19	69 00		adc #$00			adc 	#0
.9e1b	85 37		sta $37				sta 	zTemp0+1
.9e1d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9e20	20 d5 8c	jsr $8cd5			jsr 	ScaleByBaseType
.9e23	18		clc				clc
.9e24	b2 3e		lda ($3e)			lda 	(zaTemp)
.9e26	65 36		adc $36				adc 	zTemp0
.9e28	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e2b	a0 01		ldy #$01			ldy 	#1
.9e2d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e2f	65 37		adc $37				adc 	zTemp0+1
.9e31	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e34	7a		ply				ply 								; restore position
.9e35	60		rts				rts
.9e36					_VHBadIndex:
.9e36	a9 17		lda #$17		lda	#23
.9e38	4c d1 95	jmp $95d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ad4b					AbsUnary:
.ad4b	fa		plx				plx 								; restore stack pos
.ad4c	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber 				; get a float or int
.ad4f	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.ad52	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ad55	29 7f		and #$7f			and 	#$7F
.ad57	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e3b					AllocUnary:
.9e3b	fa		plx				plx 								; restore stack pos
.9e3c	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger		; get bytes required.
.9e3f	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.9e42	da		phx				phx 								; save X/Y
.9e43	5a		phy				phy
.9e44	8a		txa				txa 								; copy X into Y
.9e45	a8		tay				tay
.9e46	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9e49	aa		tax				tax
.9e4a	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9e4d	20 5a 9e	jsr $9e5a			jsr 	AllocateXABytes 			; allocate memory
.9e50	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9e53	8a		txa				txa
.9e54	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9e57	7a		ply				ply
.9e58	fa		plx				plx
.9e59	60		rts				rts
.9e5a					AllocateXABytes:
.9e5a	5a		phy				phy
.9e5b	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9e5e	84 36		sty $36				sty 	zTemp0
.9e60	5a		phy				phy
.9e61	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9e64	84 37		sty $37				sty 	zTemp0+1
.9e66	5a		phy				phy
.9e67	18		clc				clc 								; add to low memory pointer
.9e68	6d 8c 04	adc $048c			adc 	lowMemPtr
.9e6b	8d 8c 04	sta $048c			sta 	lowMemPtr
.9e6e	8a		txa				txa
.9e6f	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9e72	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9e75	b0 2f		bcs $9ea6			bcs 	CISSMemory
.9e77	20 98 9e	jsr $9e98			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9e7a					_ClearMemory:
.9e7a	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9e7d	c5 36		cmp $36				cmp 	zTemp0
.9e7f	d0 07		bne $9e88			bne 	_CMClearNext
.9e81	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9e84	c5 37		cmp $37				cmp 	zTemp0+1
.9e86	f0 0c		beq $9e94			beq 	_CMExit
.9e88					_CMClearNext:
.9e88	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9e8a	92 36		sta ($36)			sta 	(zTemp0)
.9e8c	e6 36		inc $36				inc 	zTemp0
.9e8e	d0 ea		bne $9e7a			bne 	_ClearMemory
.9e90	e6 37		inc $37				inc		zTemp0+1
.9e92	80 e6		bra $9e7a			bra 	_ClearMemory
.9e94					_CMExit:
.9e94	fa		plx				plx
.9e95	68		pla				pla
.9e96	7a		ply				ply
.9e97	60		rts				rts
.9e98					CheckIdentifierStringSpace:
.9e98	48		pha				pha
.9e99	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9e9c	18		clc				clc
.9e9d	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9e9f	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9ea2	b0 02		bcs $9ea6			bcs 	CISSMemory
.9ea4	68		pla				pla
.9ea5	60		rts				rts
.9ea6					CISSMemory:
.9ea6	a9 06		lda #$06		lda	#6
.9ea8	4c d1 95	jmp $95d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ad5b					AscUnary:
.ad5b	fa		plx				plx 								; restore stack pos
.ad5c	20 e8 a0	jsr $a0e8			jsr 	EvaluateString 				; get a string
.ad5f	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ad61	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.ad64	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.ad67	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ad68					FracUnary:
.ad68	fa		plx				plx 								; restore stack pos
.ad69	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber 				; get a float or int
.ad6c	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.ad6f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ad72	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ad74	f0 04		beq $ad7a			beq 	_IUZero
.ad76	20 38 ac	jsr $ac38			jsr 	FloatFractionalPart
.ad79	60		rts				rts
.ad7a					_IUZero:
.ad7a	20 89 a1	jsr $a189			jsr 	NSMSetZero
.ad7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ad7e					IntUnary:
.ad7e	fa		plx				plx 								; restore stack pos
.ad7f	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber 				; get a float or int
.ad82	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.ad85	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ad88	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ad8a	f0 03		beq $ad8f			beq 	_IUExit
.ad8c	20 9b ac	jsr $ac9b			jsr 	FloatIntegerPart
.ad8f					_IUExit:
.ad8f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ad90					LenUnary:
.ad90	fa		plx				plx 								; restore stack pos
.ad91	20 e8 a0	jsr $a0e8			jsr 	EvaluateString 				; get a string
.ad94	5a		phy				phy
.ad95	a0 00		ldy #$00			ldy 	#0 							; find length
.ad97					_LenFind:
.ad97	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad99	f0 06		beq $ada1			beq 	_LenExit
.ad9b	c8		iny				iny
.ad9c	d0 f9		bne $ad97			bne 	_LenFind
.ad9e	4c 7e af	jmp $af7e			jmp 	RangeError 					; string > 255
.ada1					_LenExit:
.ada1	98		tya				tya
.ada2	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.ada5	7a		ply				ply
.ada6	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.ada9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9eab					Unary_Not:
.9eab	fa		plx				plx
.9eac	20 00 a1	jsr $a100			jsr 	EvaluateInteger 			; get integer
.9eaf	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.9eb2	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; zero mantissa ?
.9eb5	f0 04		beq $9ebb			beq 	_NotZero
.9eb7	20 89 a1	jsr $a189			jsr 	NSMSetZero
.9eba	60		rts				rts
.9ebb					_NotZero:
.9ebb	4c 3e 96	jmp $963e			jmp 	ReturnTrue
.9ebe					_UNBad:
.9ebe	4c 88 af	jmp $af88			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9ec1					Unary_Random:
.9ec1	fa		plx				plx
.9ec2	20 3a 9f	jsr $9f3a			jsr 	Random32Bit 				; get a random number
.9ec5	20 1f 9f	jsr $9f1f			jsr 	URCopyToMantissa  			; put in mantissa
.9ec8	e8		inx				inx
.9ec9	20 15 a1	jsr $a115			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9ecc	ca		dex				dex
.9ecd	20 17 aa	jsr $aa17			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9ed0	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9ed3	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9ed6	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.9ed9	60		rts				rts
.9eda					Unary_Rnd:
.9eda	fa		plx				plx
.9edb	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber 				; number to use.
.9ede	20 93 a9	jsr $a993			jsr 	CheckRightBracket 			; closing bracket
.9ee1	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9ee4	f0 2b		beq $9f11			beq 	_URCopySeed
.9ee6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ee9	10 23		bpl $9f0e			bpl 	_URDontSeed
.9eeb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9eee	49 17		eor #$17			eor 	#$17
.9ef0	8d 88 04	sta $0488			sta 	RandomSeed+0
.9ef3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ef6	49 a5		eor #$a5			eor 	#$A5
.9ef8	8d 89 04	sta $0489			sta 	RandomSeed+1
.9efb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9efe	49 c2		eor #$c2			eor 	#$C2
.9f00	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9f03	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f06	49 9d		eor #$9d			eor 	#$9D
.9f08	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9f0b	20 3a 9f	jsr $9f3a			jsr 	Random32Bit
.9f0e					_URDontSeed:
.9f0e	20 3a 9f	jsr $9f3a			jsr 	Random32Bit 				; generate a number.
.9f11					_URCopySeed:
.9f11	20 1f 9f	jsr $9f1f			jsr 	URCopyToMantissa 			; copy into mantissa
.9f14	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9f16	8d 28 04	sta $0428			sta 	NSExponent
.9f19	a9 08		lda #$08			lda 	#NSTFloat
.9f1b	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9f1e	60		rts				rts
.9f1f					URCopyToMantissa:
.9f1f	ad 88 04	lda $0488			lda 	RandomSeed+0
.9f22	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f25	ad 89 04	lda $0489			lda 	RandomSeed+1
.9f28	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f2b	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9f2e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f31	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9f34	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9f36	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f39	60		rts				rts
.9f3a					Random32Bit:
.9f3a	5a		phy				phy
.9f3b	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9f3d	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9f40	d0 03		bne $9f45			bne 	_Random1
.9f42	a8		tay				tay 								; if so do it 256 times
.9f43	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9f45					_Random1:
.9f45	0a		asl a				asl 	a 							; LSFR RNG
.9f46	2e 89 04	rol $0489			rol 	RandomSeed+1
.9f49	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9f4c	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9f4f	90 02		bcc $9f53			bcc 	_Random2
.9f51	49 c5		eor #$c5			eor 	#$C5
.9f53					_Random2:
.9f53	88		dey				dey
.9f54	d0 ef		bne $9f45			bne 	_Random1
.9f56	8d 88 04	sta $0488			sta 	RandomSeed+0
.9f59	7a		ply				ply
.9f5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.adaa					SgnUnary:
.adaa	fa		plx				plx 								; restore stack pos
.adab	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber 				; get a float or int
.adae	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.adb1	20 b9 a1	jsr $a1b9			jsr 	NSMIsZero 					; if zero
.adb4	f0 10		beq $adc6			beq 	_SGZero  					; return Int Zero
.adb6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.adb9	48		pha				pha
.adba	a9 01		lda #$01			lda 	#1 							; set to 1
.adbc	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.adbf	68		pla				pla
.adc0	29 80		and #$80			and		#$80 						; copy the sign byte out
.adc2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.adc5	60		rts				rts
.adc6	20 89 a1	jsr $a189	_SGZero:jsr 	NSMSetZero
.adc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.adca					ValUnary:
.adca	fa		plx				plx 								; restore stack pos
.adcb	20 e0 ad	jsr $ade0			jsr 	ValMainCode 				; do the main val() code
.adce	b0 01		bcs $add1			bcs 	_VUError 					; couldn't convert
.add0	60		rts				rts
.add1					_VUError:
.add1	4c 83 af	jmp $af83			jmp 	TypeError
.add4					IsValUnary:
.add4	fa		plx				plx 								; restore stack pos
.add5	20 e0 ad	jsr $ade0			jsr 	ValMainCode 				; do the main val() code
.add8	b0 03		bcs $addd			bcs 	_VUBad
.adda	4c 3e 96	jmp $963e			jmp 	ReturnTrue
.addd					_VUBad:
.addd	4c 4a 96	jmp $964a			jmp 	ReturnFalse
.ade0					ValMainCode:
.ade0	20 e8 a0	jsr $a0e8			jsr 	EvaluateString 				; get a string
.ade3	20 93 a9	jsr $a993			jsr 	CheckRightBracket 			; check right bracket present
.ade6	5a		phy				phy
.ade7	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ade9	f0 17		beq $ae02			beq 	_VMCFail2
.adeb	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.aded	48		pha				pha 								; save first character
.adee	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.adf0	d0 01		bne $adf3			bne 	_VMCStart
.adf2	c8		iny				iny 								; skip over -
.adf3					_VMCStart:
.adf3	38		sec				sec 								; initialise first time round.
.adf4					_VMCNext:
.adf4	c8		iny				iny 								; pre-increment
.adf5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.adf7	f0 0c		beq $ae05			beq 	_VMCSuccess 				; successful.
.adf9	20 8d 9b	jsr $9b8d			jsr 	EncodeNumber 				; send it to the number-builder
.adfc	90 03		bcc $ae01			bcc 	_VMCFail 					; if failed, give up.
.adfe	18		clc				clc 								; next time round, countinue
.adff	80 f3		bra $adf4			bra 	_VMCNext
.ae01					_VMCFail:
.ae01	68		pla				pla
.ae02					_VMCFail2:
.ae02	7a		ply				ply
.ae03	38		sec				sec
.ae04	60		rts				rts
.ae05					_VMCSuccess:
.ae05	a9 00		lda #$00			lda 	#0 							; construct final
.ae07	20 8d 9b	jsr $9b8d			jsr 	EncodeNumber
.ae0a	68		pla				pla
.ae0b	c9 2d		cmp #$2d			cmp 	#"-"
.ae0d	d0 03		bne $ae12			bne 	_VMCNotNegative
.ae0f	20 35 a1	jsr $a135			jsr		NSMNegate
.ae12					_VMCNotNegative:
.ae12	7a		ply				ply
.ae13	18		clc				clc
.ae14	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9f5b					ChrUnary:
.9f5b	fa		plx				plx 								; restore stack pos
.9f5c	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger			; get value
.9f5f	48		pha				pha
.9f60	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.9f63	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9f65	20 a0 b2	jsr $b2a0			jsr 	StringTempAllocate
.9f68	68		pla				pla 								; write number to it
.9f69	20 de b2	jsr $b2de			jsr 	StringTempWrite
.9f6c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9f6d					SpcUnary:
.9f6d	fa		plx				plx 								; restore stack pos
.9f6e	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger			; get value
.9f71	5a		phy				phy
.9f72	48		pha				pha 								; save count
.9f73	20 a0 b2	jsr $b2a0			jsr 	StringTempAllocate
.9f76	7a		ply				ply 								; to do count in Y
.9f77					_SpcLoop:
.9f77	c0 00		cpy #$00			cpy 	#0
.9f79	f0 08		beq $9f83			beq 	_SpcExit
.9f7b	a9 20		lda #$20			lda 	#32
.9f7d	20 de b2	jsr $b2de			jsr 	StringTempWrite
.9f80	88		dey				dey
.9f81	80 f4		bra $9f77			bra 	_SPCLoop
.9f83					_SpcExit:
.9f83	7a		ply				ply
.9f84	20 93 a9	jsr $a993			jsr 	CheckRightBracket
.9f87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9f88					Unary_Str:
.9f88	fa		plx				plx
.9f89	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber  			; get number
.9f8c	20 93 a9	jsr $a993			jsr 	CheckRightBracket 			; closing bracket
.9f8f	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9f91	20 aa 9f	jsr $9faa			jsr 	ConvertNumberToString 		; do the conversion.
.9f94	a9 21		lda #$21			lda		#33 						; create buffer
.9f96	20 a0 b2	jsr $b2a0			jsr 	StringTempAllocate 			; allocate memory
.9f99	da		phx				phx
.9f9a	a2 00		ldx #$00			ldx 	#0
.9f9c					_USCopy:
.9f9c	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9f9f	20 de b2	jsr $b2de			jsr 	StringTempWrite
.9fa2	e8		inx				inx
.9fa3	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9fa6	d0 f4		bne $9f9c			bne 	_USCopy
.9fa8	fa		plx				plx
.9fa9	60		rts				rts
.9faa					ConvertNumberToString:
.9faa	5a		phy				phy 								; save code position
.9fab	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9fae	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9fb1	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9fb4	10 0a		bpl $9fc0			bpl 	_CNTSNotNegative
.9fb6	29 7f		and #$7f			and 	#$7F 						; make +ve
.9fb8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fbb	a9 2d		lda #$2d			lda 	#"-"
.9fbd	20 26 a0	jsr $a026			jsr 	WriteDecimalBuffer
.9fc0					_CNTSNotNegative:
.9fc0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9fc3	f0 15		beq $9fda			beq 	_CNTSNotFloat
.9fc5	e8		inx				inx 								; round up
.9fc6	a9 01		lda #$01			lda 	#1
.9fc8	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.9fcb	ca		dex				dex
.9fcc	bd 28 04	lda $0428,x			lda		NSExponent,x
.9fcf	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9fd2	a9 08		lda #$08			lda 	#NSTFloat
.9fd4	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9fd7	20 5a ab	jsr $ab5a			jsr 	FloatAdd
.9fda					_CNTSNotFloat:
.9fda	20 08 a0	jsr $a008			jsr 	MakePlusTwoString
.9fdd	20 38 ac	jsr $ac38			jsr 	FloatFractionalPart 		; get the fractional part
.9fe0	20 fc ac	jsr $acfc			jsr 	NSNormalise					; normalise , exit if zero
.9fe3	f0 21		beq $a006			beq 	_CNTSExit
.9fe5	a9 2e		lda #$2e			lda 	#"."
.9fe7	20 26 a0	jsr $a026			jsr 	WriteDecimalBuffer 			; write decimal place
.9fea					_CNTSDecimal:
.9fea	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9fed	30 17		bmi $a006			bmi 	_CNTSExit
.9fef	e8		inx				inx 								; x 10.0
.9ff0	a9 0a		lda #$0a			lda 	#10
.9ff2	20 8b a1	jsr $a18b			jsr 	NSMSetByte
.9ff5	a9 08		lda #$08			lda 	#NSTFloat
.9ff7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ffa	ca		dex				dex
.9ffb	20 c5 ac	jsr $acc5			jsr 	FloatMultiply
.9ffe	20 08 a0	jsr $a008			jsr 	MakePlusTwoString
.a001	20 38 ac	jsr $ac38			jsr 	FloatFractionalPart 		; get the fractional part
.a004	80 e4		bra $9fea			bra 	_CNTSDecimal 				; keep going.
.a006					_CNTSExit:
.a006	7a		ply				ply
.a007	60		rts				rts
.a008					MakePlusTwoString:
.a008	da		phx				phx
.a009	20 60 a1	jsr $a160			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a00c	e8		inx				inx 								; access it
.a00d	e8		inx				inx
.a00e	20 9b ac	jsr $ac9b			jsr 	FloatIntegerPart 			; make it an integer
.a011	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a013	20 04 ab	jsr $ab04			jsr 	ConvertInt32
.a016	a2 00		ldx #$00			ldx	 	#0
.a018					_MPTSCopy:
.a018	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a01b	20 26 a0	jsr $a026			jsr 	WriteDecimalBuffer
.a01e	e8		inx				inx
.a01f	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a022	d0 f4		bne $a018			bne 	_MPTSCopy
.a024	fa		plx				plx
.a025	60		rts				rts
.a026					WriteDecimalBuffer:
.a026	da		phx				phx
.a027	ae 95 04	ldx $0495			ldx 	dbOffset
.a02a	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a02d	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a030	ee 95 04	inc $0495			inc 	dbOffset
.a033	fa		plx				plx
.a034	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a035					Unary_Left:
.a035	fa		plx				plx
.a036	18		clc				clc 								; only one parameter
.a037	20 ac a0	jsr $a0ac			jsr 	SubstringInitial 			; set up.
.a03a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a03d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a040	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a043	80 2c		bra $a071			bra 	SubstringMain
.a045					Unary_Right:
.a045	fa		plx				plx
.a046	18		clc				clc 								; only one parameter
.a047	20 ac a0	jsr $a0ac			jsr 	SubstringInitial 			; set up.
.a04a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a04d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a050	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a053	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a056	b0 02		bcs $a05a			bcs 	_URNotUnderflow
.a058	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a05a					_URNotUnderFlow:
.a05a	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a05d	80 12		bra $a071			bra 	SubStringMain
.a05f					Unary_Mid:
.a05f	fa		plx				plx
.a060	38		sec				sec 								; two parameters
.a061	20 ac a0	jsr $a0ac			jsr 	SubstringInitial 			; set up.
.a064	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a067	f0 05		beq $a06e			beq 	_UMError
.a069	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a06c	80 03		bra $a071			bra 	SubStringMain
.a06e					_UMError:
.a06e	4c 88 af	jmp $af88			jmp 	ArgumentError
.a071					SubStringMain:
.a071	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a074	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a077	b0 2d		bcs $a0a6			bcs 	_SSMNull 					; if so, return an empty string.
.a079	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a07c	f0 28		beq $a0a6			beq 	_SSMNull 					; return empty string.
.a07e	18		clc				clc 								; add the offset +1 to the address and
.a07f	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a082	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a085	85 36		sta $36				sta 	zTemp0
.a087	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a08a	69 00		adc #$00			adc 	#0
.a08c	85 37		sta $37				sta 	zTemp0+1
.a08e					_SSMNoCarry:
.a08e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a091	20 a0 b2	jsr $b2a0			jsr 	StringTempAllocate 			; allocate that many characters
.a094	5a		phy				phy 								; save Y
.a095	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a097					_SSMCopy:
.a097	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a099	f0 09		beq $a0a4			beq 	_SSMEString 				; no more to copy
.a09b	20 de b2	jsr $b2de			jsr 	StringTempWrite 			; and write it out.
.a09e	c8		iny				iny
.a09f	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a0a2	d0 f3		bne $a097			bne 	_SSMCopy
.a0a4					_SSMEString:
.a0a4	7a		ply				ply
.a0a5					_SSMExit:
.a0a5	60		rts				rts
.a0a6					_SSMNull:
.a0a6	a9 00		lda #$00			lda 	#0
.a0a8	20 a0 b2	jsr $b2a0			jsr 	StringTempAllocate
.a0ab	60		rts				rts
.a0ac					SubstringInitial:
.a0ac	da		phx				phx 								; save initial stack position
.a0ad	08		php				php 								; save carry on stack indicating 2 parameters
.a0ae	20 e8 a0	jsr $a0e8			jsr 	EvaluateString 				; get a string
.a0b1	5a		phy				phy 								; calculate length to exponent.
.a0b2	a0 ff		ldy #$ff			ldy 	#$FF
.a0b4					_SIFindLength:
.a0b4	c8		iny				iny
.a0b5	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0b7	d0 fb		bne $a0b4			bne 	_SIFindLength
.a0b9	98		tya				tya
.a0ba	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a0bd	7a		ply				ply
.a0be	e8		inx				inx
.a0bf	20 9b a9	jsr $a99b			jsr 	CheckComma 					; comma next
.a0c2	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger 		; get next parameter
.a0c5	28		plp				plp 								; is it the last parameter ?
.a0c6	90 07		bcc $a0cf			bcc 	_SSIExit 					; if so, exit.
.a0c8	e8		inx				inx
.a0c9	20 9b a9	jsr $a99b			jsr 	CheckComma 					; comma next
.a0cc	20 21 a1	jsr $a121			jsr 	Evaluate8BitInteger 		; get last parameter
.a0cf					_SSIExit:
.a0cf	fa		plx				plx
.a0d0	20 93 a9	jsr $a993			jsr 	CheckRightBracket 			; check closing bracket
.a0d3	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a0d4					EvaluateValue:
.a0d4	48		pha				pha
.a0d5	20 da 99	jsr $99da			jsr		EvaluateExpression 			; expression
.a0d8	20 ef 9a	jsr $9aef			jsr 	Dereference					; derefernce it
.a0db	68		pla				pla
.a0dc	60		rts				rts
.a0dd					EvaluateNumber:
.a0dd	20 d4 a0	jsr $a0d4			jsr 	EvaluateValue 				; get a value
.a0e0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a0e3	29 10		and #$10			and 	#NSBIsString
.a0e5	d0 16		bne $a0fd			bne 	HelperTypeError
.a0e7	60		rts				rts
.a0e8					EvaluateString:
.a0e8	20 d4 a0	jsr $a0d4			jsr 	EvaluateValue 				; get a value
.a0eb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a0ee	29 10		and #$10			and 	#NSBIsString
.a0f0	f0 0b		beq $a0fd			beq 	HelperTypeError
.a0f2					CopyAddressToTemp0:
.a0f2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a0f5	85 36		sta $36				sta 	zTemp0
.a0f7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a0fa	85 37		sta $37				sta 	zTemp0+1
.a0fc	60		rts				rts
.a0fd					HelperTypeError:
.a0fd	4c 83 af	jmp $af83			jmp 	TypeError
.a100					EvaluateInteger:
.a100	20 dd a0	jsr $a0dd			jsr 	EvaluateNumber
.a103	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a106	d0 0a		bne $a112			bne 	HelperValueError 			; if not, it's a float.
.a108	60		rts				rts
.a109					EvaluateUnsignedInteger:
.a109	20 00 a1	jsr $a100			jsr 	EvaluateInteger 			; check integer is +ve
.a10c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a10f	30 01		bmi $a112			bmi 	HelperValueError
.a111	60		rts				rts
.a112					HelperValueError:
.a112	4c 88 af	jmp $af88			jmp 	ArgumentError
.a115					Evaluate16BitInteger:
.a115	20 09 a1	jsr $a109			jsr	 	EvaluateUnsignedInteger		; get integer
.a118	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a11b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a11e	d0 f2		bne $a112			bne 	HelperValueError
.a120	60		rts				rts
.a121					Evaluate8BitInteger:
.a121	20 09 a1	jsr $a109			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a124	d0 ec		bne $a112			bne 	HelperValueError
.a126	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a129	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a12c	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a12f	d0 e1		bne $a112			bne 	HelperValueError
.a131	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ae15					Multiply8x8:
.ae15	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ae16	85 36		sta $36			  	sta 	zTemp0
.ae18	86 37		stx $37				stx 	zTemp0+1
.ae1a	a9 00		lda #$00			lda 	#0
.ae1c	a2 08		ldx #$08			ldx 	#8
.ae1e					_M88Loop:
.ae1e	90 03		bcc $ae23			bcc 	_M88NoAdd
.ae20	18		clc				clc
.ae21	65 37		adc $37				adc 	zTemp0+1
.ae23					_M88NoAdd:
.ae23	6a		ror a				ror 	a
.ae24	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ae26	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ae27	d0 f5		bne $ae1e			bne 	_M88Loop
.ae29	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ae2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a135					NSMNegate:
.a135	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a138	49 80		eor #$80			eor 	#NSBIsNegative
.a13a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a13d	60		rts				rts
.a13e					NSMNegateMantissa:
.a13e	38		sec				sec
.a13f	a9 00		lda #$00			lda 	#0
.a141	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a144	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a147	a9 00		lda #$00			lda 	#0
.a149	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a14c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a14f	a9 00		lda #$00			lda 	#0
.a151	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a154	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a157	a9 00		lda #$00			lda 	#0
.a159	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a15c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a15f	60		rts				rts
.a160					NSMShiftUpTwo:
.a160	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a163	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a166	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a169	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a16c	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a16f	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a172	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a175	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a178	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a17b	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a17e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a181	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a184	60		rts				rts
.a185					NSMSetZeroMantissaOnly:
.a185	a9 00		lda #$00			lda 	#0
.a187	80 08		bra $a191			bra 	NSMSetMantissa
.a189					NSMSetZero:
.a189	a9 00		lda #$00			lda 	#0
.a18b					NSMSetByte:
.a18b	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a18e	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a191					NSMSetMantissa:
.a191	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a194	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a197	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a19a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a19d	60		rts				rts
.a19e					NSMShiftLeft:
.a19e	18		clc				clc
.a19f					NSMRotateLeft:
.a19f	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a1a2	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a1a5	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a1a8	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a1ab	60		rts				rts
.a1ac					NSMShiftRight:
.a1ac	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a1af	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a1b2	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a1b5	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a1b8	60		rts				rts
.a1b9					NSMIsZero:
.a1b9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a1bc	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a1bf	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a1c2	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a1c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ae2c					Assemble_ora:
.ae2c	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae2f	01					.byte $01
.ae30					Assemble_and:
.ae30	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae33	21					.byte $21
.ae34					Assemble_eor:
.ae34	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae37	41					.byte $41
.ae38					Assemble_adc:
.ae38	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae3b	61					.byte $61
.ae3c					Assemble_sta:
.ae3c	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae3f	81					.byte $81
.ae40					Assemble_lda:
.ae40	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae43	a1					.byte $a1
.ae44					Assemble_cmp:
.ae44	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae47	c1					.byte $c1
.ae48					Assemble_sbc:
.ae48	20 d4 88	jsr $88d4		jsr	AssembleGroup1
>ae4b	e1					.byte $e1
.ae4c					Assemble_asl:
.ae4c	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae4f	02					.byte $02
>ae50	75					.byte $75
.ae51					Assemble_rol:
.ae51	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae54	22					.byte $22
>ae55	75					.byte $75
.ae56					Assemble_lsr:
.ae56	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae59	42					.byte $42
>ae5a	75					.byte $75
.ae5b					Assemble_ror:
.ae5b	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae5e	62					.byte $62
>ae5f	75					.byte $75
.ae60					Assemble_stx:
.ae60	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae63	82					.byte $82
>ae64	50					.byte $50
.ae65					Assemble_ldx:
.ae65	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae68	a2					.byte $a2
>ae69	d0					.byte $d0
.ae6a					Assemble_dec:
.ae6a	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae6d	c2					.byte $c2
>ae6e	55					.byte $55
.ae6f					Assemble_inc:
.ae6f	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae72	e2					.byte $e2
>ae73	55					.byte $55
.ae74					Assemble_stz:
.ae74	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae77	60					.byte $60
>ae78	44					.byte $44
.ae79					Assemble_bit:
.ae79	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae7c	20					.byte $20
>ae7d	55					.byte $55
.ae7e					Assemble_sty:
.ae7e	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae81	80					.byte $80
>ae82	54					.byte $54
.ae83					Assemble_ldy:
.ae83	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae86	a0					.byte $a0
>ae87	d5					.byte $d5
.ae88					Assemble_cpy:
.ae88	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae8b	c0					.byte $c0
>ae8c	d4					.byte $d4
.ae8d					Assemble_cpx:
.ae8d	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae90	e0					.byte $e0
>ae91	d0					.byte $d0
.ae92					Assemble_tsb:
.ae92	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae95	00					.byte $00
>ae96	50					.byte $50
.ae97					Assemble_trb:
.ae97	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae9a	10					.byte $10
>ae9b	50					.byte $50
.ae9c					Assemble_jsr:
.ae9c	20 db 88	jsr $88db		jsr	AssembleGroup2
>ae9f	14					.byte $14
>aea0	10					.byte $10
.aea1					Assemble_jmp:
.aea1	20 db 88	jsr $88db		jsr	AssembleGroup2
>aea4	40					.byte $40
>aea5	10					.byte $10
.aea6					Assemble_bpl:
.aea6	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aea9	10					.byte $10
.aeaa					Assemble_bmi:
.aeaa	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aead	30					.byte $30
.aeae					Assemble_bvc:
.aeae	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aeb1	50					.byte $50
.aeb2					Assemble_bvs:
.aeb2	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aeb5	70					.byte $70
.aeb6					Assemble_bcc:
.aeb6	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aeb9	90					.byte $90
.aeba					Assemble_bcs:
.aeba	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aebd	b0					.byte $b0
.aebe					Assemble_bne:
.aebe	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aec1	d0					.byte $d0
.aec2					Assemble_beq:
.aec2	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aec5	f0					.byte $f0
.aec6					Assemble_bra:
.aec6	20 2c 89	jsr $892c		jsr	AssembleGroup3
>aec9	80					.byte $80
.aeca					Assemble_brk:
.aeca	20 62 89	jsr $8962		jsr	AssembleGroup4
>aecd	00					.byte $00
.aece					Assemble_php:
.aece	20 62 89	jsr $8962		jsr	AssembleGroup4
>aed1	08					.byte $08
.aed2					Assemble_clc:
.aed2	20 62 89	jsr $8962		jsr	AssembleGroup4
>aed5	18					.byte $18
.aed6					Assemble_plp:
.aed6	20 62 89	jsr $8962		jsr	AssembleGroup4
>aed9	28					.byte $28
.aeda					Assemble_sec:
.aeda	20 62 89	jsr $8962		jsr	AssembleGroup4
>aedd	38					.byte $38
.aede					Assemble_rti:
.aede	20 62 89	jsr $8962		jsr	AssembleGroup4
>aee1	40					.byte $40
.aee2					Assemble_pha:
.aee2	20 62 89	jsr $8962		jsr	AssembleGroup4
>aee5	48					.byte $48
.aee6					Assemble_cli:
.aee6	20 62 89	jsr $8962		jsr	AssembleGroup4
>aee9	58					.byte $58
.aeea					Assemble_phy:
.aeea	20 62 89	jsr $8962		jsr	AssembleGroup4
>aeed	5a					.byte $5a
.aeee					Assemble_rts:
.aeee	20 62 89	jsr $8962		jsr	AssembleGroup4
>aef1	60					.byte $60
.aef2					Assemble_pla:
.aef2	20 62 89	jsr $8962		jsr	AssembleGroup4
>aef5	68					.byte $68
.aef6					Assemble_sei:
.aef6	20 62 89	jsr $8962		jsr	AssembleGroup4
>aef9	78					.byte $78
.aefa					Assemble_ply:
.aefa	20 62 89	jsr $8962		jsr	AssembleGroup4
>aefd	7a					.byte $7a
.aefe					Assemble_dey:
.aefe	20 62 89	jsr $8962		jsr	AssembleGroup4
>af01	88					.byte $88
.af02					Assemble_txa:
.af02	20 62 89	jsr $8962		jsr	AssembleGroup4
>af05	8a					.byte $8a
.af06					Assemble_tya:
.af06	20 62 89	jsr $8962		jsr	AssembleGroup4
>af09	98					.byte $98
.af0a					Assemble_txs:
.af0a	20 62 89	jsr $8962		jsr	AssembleGroup4
>af0d	9a					.byte $9a
.af0e					Assemble_tay:
.af0e	20 62 89	jsr $8962		jsr	AssembleGroup4
>af11	a8					.byte $a8
.af12					Assemble_tax:
.af12	20 62 89	jsr $8962		jsr	AssembleGroup4
>af15	aa					.byte $aa
.af16					Assemble_clv:
.af16	20 62 89	jsr $8962		jsr	AssembleGroup4
>af19	b8					.byte $b8
.af1a					Assemble_tsx:
.af1a	20 62 89	jsr $8962		jsr	AssembleGroup4
>af1d	ba					.byte $ba
.af1e					Assemble_iny:
.af1e	20 62 89	jsr $8962		jsr	AssembleGroup4
>af21	c8					.byte $c8
.af22					Assemble_dex:
.af22	20 62 89	jsr $8962		jsr	AssembleGroup4
>af25	ca					.byte $ca
.af26					Assemble_cld:
.af26	20 62 89	jsr $8962		jsr	AssembleGroup4
>af29	d8					.byte $d8
.af2a					Assemble_phx:
.af2a	20 62 89	jsr $8962		jsr	AssembleGroup4
>af2d	da					.byte $da
.af2e					Assemble_stp:
.af2e	20 62 89	jsr $8962		jsr	AssembleGroup4
>af31	db					.byte $db
.af32					Assemble_inx:
.af32	20 62 89	jsr $8962		jsr	AssembleGroup4
>af35	e8					.byte $e8
.af36					Assemble_nop:
.af36	20 62 89	jsr $8962		jsr	AssembleGroup4
>af39	ea					.byte $ea
.af3a					Assemble_sed:
.af3a	20 62 89	jsr $8962		jsr	AssembleGroup4
>af3d	f8					.byte $f8
.af3e					Assemble_plx:
.af3e	20 62 89	jsr $8962		jsr	AssembleGroup4
>af41	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.af42					DecimalScalarTable:
>af42	66 66 66 66				.dword $66666666 ; 0.1
>af46	de					.byte $de
>af47	1f 85 eb 51				.dword $51eb851f ; 0.01
>af4b	db					.byte $db
>af4c	4c 37 89 41				.dword $4189374c ; 0.001
>af50	d8					.byte $d8
>af51	ac 8b db 68				.dword $68db8bac ; 0.0001
>af55	d4					.byte $d4
>af56	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>af5a	d1					.byte $d1
>af5b	83 de 1b 43				.dword $431bde83 ; 1e-06
>af5f	ce					.byte $ce
>af60	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>af64	ca					.byte $ca
>af65	89 3b e6 55				.dword $55e63b89 ; 1e-08
>af69	c7					.byte $c7
>af6a	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>af6e	c4					.byte $c4
>af6f	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>af73	c0					.byte $c0
>af74	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>af78	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.af79					SyntaxError:
.af79	a9 02		lda #$02		lda	#2
.af7b	4c d1 95	jmp $95d1		jmp	ErrorHandler
.af7e					RangeError:
.af7e	a9 04		lda #$04		lda	#4
.af80	4c d1 95	jmp $95d1		jmp	ErrorHandler
.af83					TypeError:
.af83	a9 05		lda #$05		lda	#5
.af85	4c d1 95	jmp $95d1		jmp	ErrorHandler
.af88					ArgumentError:
.af88	a9 07		lda #$07		lda	#7
.af8a	4c d1 95	jmp $95d1		jmp	ErrorHandler
.af8d					NotDoneError:
.af8d	a9 0c		lda #$0c		lda	#12
.af8f	4c d1 95	jmp $95d1		jmp	ErrorHandler
.af92					ErrorText:
>af92	42 72 65 61 6b 00			.text	"Break",0
>af98	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>afa0	72 72 6f 72 00
>afa5	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>afad	20 62 79 20 7a 65 72 6f 00
>afb6	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>afbe	61 6e 67 65 00
>afc3	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>afcb	6d 61 74 63 68 00
>afd1	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>afd9	65 6d 6f 72 79 00
>afdf	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>afe7	61 72 67 75 6d 65 6e 74 00
>aff0	53 74 6f 70 00				.text	"Stop",0
>aff5	53 74 72 69 6e 67 20 74			.text	"String too long",0
>affd	6f 6f 20 6c 6f 6e 67 00
>b005	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b00d	6e 20 66 61 69 6c 65 64 00
>b016	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b01e	61 74 61 00
>b022	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b02a	65 6e 74 65 64 00
>b030	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b038	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b044	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b04c	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b059	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b061	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b06e	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b076	68 6f 75 74 20 57 68 69 6c 65 00
>b081	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b089	68 6f 75 74 20 46 6f 72 00
>b092	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b09a	61 63 6b 20 66 75 6c 6c 00
>b0a3	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b0ab	75 63 74 75 72 65 00
>b0b2	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b0ba	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b0c7	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b0cf	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b0dd	41 72 72 61 79 20 73 69			.text	"Array size",0
>b0e5	7a 65 00
>b0e8	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b0f0	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b0f8	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1481."
>b100	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>b110	32 2e 20 42 75 69 6c 64 20 31 34 38 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b11e					EXTPrintCharacter:
.b11e	48		pha				pha
.b11f	da		phx				phx
.b120	5a		phy				phy
.b121	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b124	7a		ply				ply
.b125	fa		plx				plx
.b126	68		pla				pla
.b127	60		rts				rts
.b128					EXTInputSingleCharacter:
.b128	da		phx				phx
.b129	5a		phy				phy
.b12a					_EISCWait:
.b12a	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b12d	c9 00		cmp #$00			cmp 	#0
.b12f	f0 f9		beq $b12a			beq 	_EISCWait
.b131	7a		ply				ply
.b132	fa		plx				plx
.b133	60		rts				rts
.b134					EXTInputLine:
.b134	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b136					_ILLoop:
.b136	da		phx				phx 								; read character in
.b137	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b13a	fa		plx				plx
.b13b	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b13d	f0 12		beq $b151			beq 	_ILBackspace
.b13f	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b141	f0 15		beq $b158			beq 	_ILExit
.b143	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b145	90 ef		bcc $b136			bcc 	_ILLoop
.b147	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b149	f0 eb		beq $b136			beq 	_ILLoop
.b14b	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b14e	e8		inx				inx
.b14f	80 e5		bra $b136			bra 	_ILLoop
.b151					_ILBackspace:
.b151	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b153	f0 e1		beq $b136			beq 	_ILLoop
.b155	ca		dex				dex 								; back one.
.b156	80 de		bra $b136			bra 	_ILLoop
.b158					_ILExit:
.b158	20 1e b1	jsr $b11e			jsr 	EXTPrintCharacter
.b15b	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b15e	60		rts				rts
.b15f					EXTBreakCheck:
.b15f	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b162					MemoryDeleteLine:
.b162	20 81 b1	jsr $b181			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b165	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b167	a8		tay				tay
.b168					_MDDLLoop:
.b168	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b16a	92 30		sta ($30)			sta 	(codePtr)
.b16c	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b16e	c5 3a		cmp $3a				cmp 	zTemp2
.b170	d0 07		bne $b179			bne 	_MDLDLNext
.b172	a5 31		lda $31				lda 	codePtr+1
.b174	c5 3b		cmp $3b				cmp 	zTemp2+1
.b176	d0 01		bne $b179			bne 	_MDLDLNext
.b178					_MDDLExit:
.b178	60		rts				rts
.b179					_MDLDLNext:
.b179	e6 30		inc $30				inc 	codePtr						; next byte
.b17b	d0 eb		bne $b168			bne 	_MDDLLoop
.b17d	e6 31		inc $31				inc 	codePtr+1
.b17f	80 e7		bra $b168			bra 	_MDDLLoop
.b181					IMemoryFindEnd:
.b181	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b183	85 3a		sta $3a				sta 	0+zTemp2
.b185	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b187	85 3b		sta $3b				sta 	1+zTemp2
.b189					_MDLFELoop:
.b189	b2 3a		lda ($3a)			lda 	(zTemp2)
.b18b	f0 0b		beq $b198			beq 	_MDLFEExit
.b18d	18		clc				clc
.b18e	65 3a		adc $3a				adc 	zTemp2
.b190	85 3a		sta $3a				sta 	zTemp2
.b192	90 f5		bcc $b189			bcc 	_MDLFELoop
.b194	e6 3b		inc $3b				inc 	zTemp2+1
.b196	80 f1		bra $b189			bra 	_MDLFELoop
.b198					_MDLFEExit:
.b198	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b199					MemoryInsertLine:
.b199	08		php				php
.b19a	20 81 b1	jsr $b181			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b19d	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b19f	1a		inc a				inc 	a
.b1a0	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b1a2	b0 36		bcs $b1da			bcs 	_MDLIError
.b1a4	28		plp				plp
.b1a5	90 08		bcc $b1af			bcc 	_MDLIFound
.b1a7	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b1a9	85 30		sta $30				sta 	codePtr
.b1ab	a5 3b		lda $3b				lda 	zTemp2+1
.b1ad	85 31		sta $31				sta 	codePtr+1
.b1af					_MDLIFound:
.b1af	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b1b2	a8		tay				tay
.b1b3					_MDLIInsert:
.b1b3	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b1b5	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b1b7	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b1b9	c5 3a		cmp $3a				cmp 	zTemp2
.b1bb	d0 06		bne $b1c3			bne 	_MDLINext
.b1bd	a5 31		lda $31				lda 	codePtr+1
.b1bf	c5 3b		cmp $3b				cmp 	zTemp2+1
.b1c1	f0 0a		beq $b1cd			beq 	_MDLIHaveSpace
.b1c3					_MDLINext:
.b1c3	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b1c5	d0 02		bne $b1c9			bne 	_MDLINoBorrow
.b1c7	c6 3b		dec $3b				dec 	zTemp2+1
.b1c9					_MDLINoBorrow:
.b1c9	c6 3a		dec $3a				dec 	zTemp2
.b1cb	80 e6		bra $b1b3			bra 	_MDLIInsert
.b1cd					_MDLIHaveSpace:
.b1cd	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b1d0	88		dey				dey 								; from offset-1 to 0
.b1d1					_MDLICopy:
.b1d1	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b1d4	91 30		sta ($30),y			sta 	(codePtr),y
.b1d6	88		dey				dey
.b1d7	10 f8		bpl $b1d1			bpl 	_MDLICopy
.b1d9	60		rts				rts
.b1da					_MDLIError:
.b1da	a9 06		lda #$06		lda	#6
.b1dc	4c d1 95	jmp $95d1		jmp	ErrorHandler
.b1df					MDLAppendLine:
.b1df	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b1e1	85 36		sta $36				sta 	zTemp0
.b1e3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b1e5	85 38		sta $38				sta 	0+zTemp1
.b1e7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b1e9	85 39		sta $39				sta 	1+zTemp1
.b1eb	b2 38		lda ($38)			lda 	(zTemp1)
.b1ed	d0 0a		bne $b1f9			bne 	_MDLANoInitialise
.b1ef	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b1f1	8d 61 06	sta $0661			sta 	0+AppendPointer
.b1f4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b1f6	8d 62 06	sta $0662			sta 	1+AppendPointer
.b1f9					_MDLANoInitialise:
.b1f9	18		clc				clc
.b1fa	ad 61 06	lda $0661			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b1fd	85 38		sta $38				sta 	zTemp1
.b1ff	72 36		adc ($36)			adc 	(zTemp0)
.b201	8d 61 06	sta $0661			sta 	AppendPointer
.b204	ad 62 06	lda $0662			lda 	AppendPointer+1
.b207	85 39		sta $39				sta 	zTemp1+1
.b209	69 00		adc #$00			adc 	#0
.b20b	8d 62 06	sta $0662			sta 	AppendPointer+1
.b20e	a0 00		ldy #$00			ldy 	#0
.b210					_MDLACopy:
.b210	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b212	91 38		sta ($38),y			sta 	(zTemp1),y
.b214	c8		iny				iny
.b215	98		tya				tya
.b216	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b218	d0 f6		bne $b210			bne 	_MDLACopy
.b21a	a9 00		lda #$00			lda 	#0 							; end of program.
.b21c	91 38		sta ($38),y			sta 	(zTemp1),y
.b21e	60		rts				rts
.0661					AppendPointer:
>0661							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a1c6					MemoryNew:
.a1c6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1c8	85 30		sta $30				sta 	codePtr
.a1ca	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1cc	85 31		sta $31				sta 	codePtr+1
.a1ce	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1d0	92 30		sta ($30)			sta 	(codePtr)
.a1d2	60		rts				rts
.a1d3					MemoryInline:
.a1d3	98		tya				tya 								; put address into stack,x
.a1d4	18		clc				clc
.a1d5	65 30		adc $30				adc 	codePtr
.a1d7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1da	a5 31		lda $31				lda 	codePtr+1
.a1dc	69 00		adc #$00			adc 	#0
.a1de	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1e1	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a1e4	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a1e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a1e8					MemorySearch:
.a1e8	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a1ea	86 37		stx $37				stx 	zTemp0+1
.a1ec	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ee	85 30		sta $30				sta 	codePtr
.a1f0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1f2	85 31		sta $31				sta 	codePtr+1
.a1f4					_MTAXLoop:
.a1f4	b2 30		lda ($30)			lda 	(codePtr)
.a1f6	18		clc				clc
.a1f7	f0 21		beq $a21a			beq 	_MTAXExit 					; reached end, exit with CC.
.a1f9	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a1fb	b1 30		lda ($30),y			lda 	(codePtr),y
.a1fd	38		sec				sec
.a1fe	e5 36		sbc $36				sbc 	zTemp0
.a200	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a202	c8		iny				iny 								; do the MSB
.a203	b1 30		lda ($30),y			lda 	(codePtr),y
.a205	e5 37		sbc $37				sbc 	zTemp0+1
.a207	05 38		ora $38				ora 	zTemp1
.a209	f0 0f		beq $a21a			beq 	_MTAXExit	 				; found
.a20b	b0 0d		bcs $a21a			bcs 	_MTAXExit 					; current < required exit
.a20d	18		clc				clc
.a20e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a210	65 30		adc $30				adc 	codePtr
.a212	85 30		sta $30				sta 	codePtr
.a214	90 02		bcc $a218			bcc 	_CREExit
.a216	e6 31		inc $31				inc 	codePtr+1
.a218					_CREExit:
.a218	80 da		bra $a1f4			bra 	_MTAXLoop
.a21a					_MTAXExit:
.a21a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a21b					StackPushByte:
.a21b	48		pha				pha 								; save byte
.a21c	a5 34		lda $34				lda 	BasicStack
.a21e	d0 09		bne $a229			bne 	_SPBNoBorrow
.a220	c6 35		dec $35				dec 	BasicStack+1
.a222	48		pha				pha
.a223	a5 35		lda $35				lda 	BasicStack+1
.a225	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a227	90 06		bcc $a22f			bcc 	_SPBMemory
.a229					_SPBNoBorrow:
.a229	c6 34		dec $34				dec 	BasicStack
.a22b	68		pla				pla 								; get back and write
.a22c	92 34		sta ($34)			sta 	(BasicStack)
.a22e	60		rts				rts
.a22f					_SPBMemory:
.a22f	a9 12		lda #$12		lda	#18
.a231	4c d1 95	jmp $95d1		jmp	ErrorHandler
.a234					StackPopByte:
.a234	b2 34		lda ($34)			lda 	(BasicStack)
.a236	e6 34		inc $34				inc 	BasicStack
.a238	d0 02		bne $a23c			bne 	_SPBNoCarry
.a23a	e6 35		inc $35				inc 	BasicStack+1
.a23c					_SPBNoCarry:
.a23c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a23d					StackOpen:
.a23d	48		pha				pha 								; save frame byte
.a23e	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a240	0a		asl a				asl 	a 							; claim twice this for storage
.a241	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a243	38		sec				sec 								; so basically subtracting from
.a244	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a246	85 34		sta $34				sta 	basicStack
.a248	b0 08		bcs $a252			bcs 	_SONoBorrow
.a24a	c6 35		dec $35				dec 	basicStack+1
.a24c	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a24e	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a250	90 04		bcc $a256			bcc 	_SOMemory
.a252					_SONoBorrow:
.a252	68		pla				pla 								; get marker back and write at TOS
.a253	92 34		sta ($34)			sta 	(basicStack)
.a255	60		rts				rts
.a256					_SOMemory:
.a256	a9 12		lda #$12		lda	#18
.a258	4c d1 95	jmp $95d1		jmp	ErrorHandler
.a25b					StackClose:
.a25b	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a25d	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a25f	0a		asl a				asl 	a 							; claim twice this.
.a260	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a262	85 34		sta $34				sta 	basicStack
.a264	90 02		bcc $a268			bcc 	_SCExit
.a266	e6 35		inc $35				inc 	basicStack+1
.a268					_SCExit:
.a268	60		rts				rts
.a269					StackCheckFrame:
.a269	48		pha				pha
.a26a					_StackRemoveLocals:
.a26a	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a26c	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a26e	b0 05		bcs $a275			bcs 	_SCNoLocal
.a270	20 3a a9	jsr $a93a			jsr 	LocalPopValue
.a273	80 f5		bra $a26a			bra 	_StackRemoveLocals
.a275					_SCNoLocal:
.a275	68		pla				pla
.a276	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a278	29 f0		and #$f0			and 	#$F0 						; check type bits
.a27a	d0 01		bne $a27d			bne 	_SCFError 					; different, we have structures mixed up
.a27c	60		rts				rts
.a27d					_SCFError:
.a27d	8a		txa				txa 								; report error X
.a27e	4c d1 95	jmp $95d1			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a281					STKSaveCodePosition:
.a281	5a		phy				phy
.a282	98		tya				tya 								; save Y
.a283	a0 05		ldy #$05			ldy 	#5
.a285	91 34		sta ($34),y			sta 	(basicStack),y
.a287	88		dey				dey 								; save Code Pointer
.a288					_STKSaveLoop:
.a288	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a28b	91 34		sta ($34),y			sta 	(basicStack),y
.a28d	88		dey				dey
.a28e	d0 f8		bne $a288			bne 	_STKSaveLoop
.a290	7a		ply				ply
.a291	60		rts				rts
.a292					STKLoadCodePosition:
.a292	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a294					_STKLoadLoop:
.a294	b1 34		lda ($34),y			lda 	(basicStack),y
.a296	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a299	c8		iny				iny
.a29a	c0 05		cpy #$05			cpy 	#5
.a29c	d0 f6		bne $a294			bne 	_STKLoadLoop
.a29e	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2a0	a8		tay				tay
.a2a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2a2					StackReset:
.a2a2	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2a4	85 34		sta $34				sta 	0+basicStack
.a2a6	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2a8	85 35		sta $35				sta 	1+basicStack
.a2aa	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2ac	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b21f					StringConcrete:
.b21f	5a		phy				phy 								; save position on stack
.b220	20 98 9e	jsr $9e98			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b223	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b226	85 38		sta $38				sta 	zTemp1
.b228	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b22b	85 39		sta $39				sta 	zTemp1+1
.b22d	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b22f					_SALength:
.b22f	c8		iny				iny
.b230	b1 38		lda ($38),y			lda 	(zTemp1),y
.b232	d0 fb		bne $b22f			bne 	_SALength
.b234	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b236	b0 3f		bcs $b277			bcs 	_SALengthError
.b238	98		tya				tya 				 				; length of the new string
.b239	18		clc				clc
.b23a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b23c	90 02		bcc $b240			bcc 	_SAHaveLength
.b23e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b240					_SAHaveLength:
.b240	48		pha				pha 								; save length.
.b241	38		sec				sec
.b242	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b244	6d 8e 04	adc $048e			adc 	StringMemory
.b247	8d 8e 04	sta $048e			sta 	StringMemory
.b24a	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b24c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b24f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b251	6d 8f 04	adc $048f			adc 	StringMemory+1
.b254	8d 8f 04	sta $048f			sta 	StringMemory+1
.b257	85 3b		sta $3b				sta 	zTemp2+1
.b259	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b25c	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b25d	38		sec				sec
.b25e	e9 03		sbc #$03			sbc 	#3
.b260	92 3a		sta ($3a)			sta 	(zTemp2)
.b262	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b264	a0 01		ldy #$01			ldy 	#1
.b266	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b268					_SACopyNewString:
.b268	a0 00		ldy #$00			ldy 	#0
.b26a					_SACopyNSLoop:
.b26a	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b26c	c8		iny				iny 								; write two on in string storage
.b26d	c8		iny				iny
.b26e	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b270	88		dey				dey 								; this makes it one one.
.b271	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b273	d0 f5		bne $b26a			bne 	_SACopyNSLoop
.b275	7a		ply				ply
.b276	60		rts				rts
.b277					_SALengthError:
.b277	a9 09		lda #$09		lda	#9
.b279	4c d1 95	jmp $95d1		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b27c					StringSystemInitialise:
.b27c	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b27e	8d 8e 04	sta $048e			sta 	0+StringMemory
.b281	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b283	8d 8f 04	sta $048f			sta 	1+StringMemory
.b286	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b289	60		rts				rts
.b28a					StringSpaceInitialise:
.b28a	20 98 9e	jsr $9e98			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b28d	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b28f	8d 90 04	sta $0490			sta 	StringInitialised
.b292	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b295	8d 91 04	sta $0491			sta 	StringTempPointer
.b298	ad 8f 04	lda $048f			lda 	StringMemory+1
.b29b	3a		dec a				dec 	a
.b29c	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b29f	60		rts				rts
.b2a0					StringTempAllocate:
.b2a0	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b2a2	b0 35		bcs $b2d9			bcs 	_STALength
.b2a4	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b2a7	30 05		bmi $b2ae			bmi 	_STAAllocate
.b2a9	48		pha				pha 								; save value to subtract.
.b2aa	20 8a b2	jsr $b28a			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b2ad	68		pla				pla 								; restore it
.b2ae					_STAAllocate:
.b2ae	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b2b0	18		clc				clc  								; deliberate allows one more
.b2b1	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b2b4	8d 91 04	sta $0491			sta 	StringTempPointer
.b2b7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b2ba	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b2bc	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b2bf	69 ff		adc #$ff			adc 	#$FF
.b2c1	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b2c4	85 3d		sta $3d				sta 	zsTemp+1
.b2c6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2c9	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b2cc	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b2cf	a9 10		lda #$10			lda 	#NSTString
.b2d1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2d4	a9 00		lda #$00			lda 	#0 							; clear the target string
.b2d6	92 3c		sta ($3c)			sta 	(zsTemp)
.b2d8	60		rts				rts
.b2d9					_STALength:
.b2d9	a9 09		lda #$09		lda	#9
.b2db	4c d1 95	jmp $95d1		jmp	ErrorHandler
.b2de					StringTempWrite:
.b2de	48		pha				pha
.b2df	92 3c		sta ($3c)			sta 	(zsTemp)
.b2e1	e6 3c		inc $3c				inc 	zsTemp
.b2e3	d0 02		bne $b2e7			bne 	_STWNoCarry
.b2e5	e6 3d		inc $3d				inc 	zsTemp+1
.b2e7					_STWNoCarry:
.b2e7	a9 00		lda #$00			lda 	#0
.b2e9	92 3c		sta ($3c)			sta 	(zsTemp)
.b2eb	68		pla				pla
.b2ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a2af					BackloadProgram:
.a2af	a2 ff		ldx #$ff			ldx 	#$FF
.a2b1	20 d9 a2	jsr $a2d9			jsr 	BLReadByte
.a2b4	30 1f		bmi $a2d5			bmi 	_BPExit
.a2b6					_BPCopy:
.a2b6	e8		inx				inx  								; copy byte in
.a2b7	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a2ba	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a2bd	20 d9 a2	jsr $a2d9			jsr 	BLReadByte 					; read next byte
.a2c0	30 0a		bmi $a2cc			bmi 	_BPEndLine 					; -ve = EOL
.a2c2	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a2c4	d0 02		bne $a2c8			bne 	_BPNotTab
.a2c6	a9 20		lda #$20			lda 	#' '
.a2c8					_BPNotTab:
.a2c8	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a2ca	b0 ea		bcs $a2b6			bcs 	_BPCopy
.a2cc					_BPEndLine:
.a2cc	20 8b a6	jsr $a68b			jsr 	TokeniseLine 				; tokenise the line.
.a2cf	38		sec				sec 								; append not insert
.a2d0	20 99 b1	jsr $b199			jsr 	MemoryInsertLine 			; append to current program
.a2d3	80 da		bra $a2af			bra 	BackloadProgram
.a2d5					_BPExit:
.a2d5	20 da 8b	jsr $8bda			jsr 	ClearCommand 				; clear variables etc.
.a2d8	60		rts				rts
.a2d9					BLReadByte:
.a2d9					_BLLoad:
.a2d9	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a2dc	ee da a2	inc $a2da			inc 	_BLLoad+1
.a2df	d0 03		bne $a2e4			bne 	_BLNoCarry
.a2e1	ee db a2	inc $a2db			inc 	_BLLoad+2
.a2e4					_BLNoCarry:
.a2e4	c9 00		cmp #$00			cmp 	#0
.a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a2e7					TokeniseSearchTable:
.a2e7	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a2e9	85 36		sta $36				sta 	zTemp0
.a2eb	a0 00		ldy #$00			ldy 	#0
.a2ed	a9 80		lda #$80			lda 	#$80 						; token #
.a2ef	85 38		sta $38				sta 	zTemp1
.a2f1					_TSTLoop:
.a2f1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a2f3	30 49		bmi $a33e			bmi 	_TSTFail 					; -ve = end of table
.a2f5	f0 2e		beq $a325			beq 	_TSTNext 					; zero, check next it's a dummy
.a2f7	c8		iny				iny 								; get the hash
.a2f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2fa	88		dey				dey
.a2fb	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a2fe	d0 25		bne $a325			bne 	_TSTNext
.a300	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a303	38		sec				sec
.a304	ed 80 04	sbc $0480			sbc 	identStart
.a307	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a309	d0 1a		bne $a325			bne 	_TSTNext
.a30b	5a		phy				phy 								; save Y , we might fail
.a30c	c8		iny				iny 								; point to text
.a30d	c8		iny				iny
.a30e	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a311					_TSTCompareName:
.a311	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a314	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a316	d0 0c		bne $a324			bne 	_TSTNextPullY 				; fail, pullY and do next
.a318	e8		inx				inx
.a319	c8		iny				iny
.a31a	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a31d	d0 f2		bne $a311			bne 	_TSTCompareName
.a31f	7a		ply				ply 								; throw Y
.a320	a5 38		lda $38				lda 	zTemp1 						; get token #
.a322	38		sec				sec 								; return with CS = passed.
.a323	60		rts				rts
.a324					_TSTNextPullY:
.a324	7a		ply				ply 								; restore current, fall through.
.a325					_TSTNext:
.a325	e6 38		inc $38				inc 	zTemp1 						; token counter
.a327	98		tya				tya
.a328	18		clc				clc
.a329	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a32b	1a		inc a				inc 	a 							; +1
.a32c	1a		inc a				inc 	a 							; +2
.a32d	a8		tay				tay
.a32e	10 c1		bpl $a2f1			bpl 	_TSTLoop 					; if Y < $80 loop back
.a330	98		tya				tya 								; add Y to zTemp0 and reset Y
.a331	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a333	18		clc				clc  								; but have tables > 255 bytes
.a334	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a336	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a338	90 b7		bcc $a2f1			bcc 	_TSTLoop
.a33a	e6 37		inc $37				inc 	zTemp0+1
.a33c	80 b3		bra $a2f1			bra 	_TSTLoop
.a33e					_TSTFail:
.a33e	18		clc				clc
.a33f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a340					KeywordSet0:
>a340	00 65					.text	0,$65,""               ; $80 !0:EOF
>a342	00 58					.text	0,$58,""               ; $81 !1:SH1
>a344	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a346	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a34c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a354	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a35a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a361	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a369	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a370	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a377	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a37d	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a385	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a38d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a393	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a39a	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a3a0	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a3a5	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a3a9	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a3b1	28
>a3b2	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a3ba	28
>a3bb	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a3c1	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a3c7	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a3cd	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a3d4	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a3dc	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a3e2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a3e8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a3ed	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a3f1	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a3f7	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a3ff	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a406	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a40d	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a415	43
>a416	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a41c	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a422	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a429	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a42f	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a6 CALL
>a435	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a7 CIRCLE
>a43d	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a8 CLS
>a442	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $a9 COLOR
>a449	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $aa COLOUR
>a451	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ab DATA
>a457	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ac DIM
>a45c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ad DOWNTO
>a464	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $ae ELSE
>a46a	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $af GFX
>a46f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b0 GOSUB
>a476	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b1 GOTO
>a47c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b2 HERE
>a482	04 1a 48 49 44 45			.text	4,$1a,"HIDE"           ; $b3 HIDE
>a488	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b4 LET
>a48d	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b5 LINE
>a493	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b6 LOCAL
>a49a	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b7 OUTLINE
>a4a2	45
>a4a3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $b8 PRINT
>a4aa	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $b9 READ
>a4b0	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $ba RECT
>a4b6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bb REM
>a4bb	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bc RETURN
>a4c3	05 68 53 43 41 4c 45			.text	5,$68,"SCALE"          ; $bd SCALE
>a4ca	04 41 53 48 4f 57			.text	4,$41,"SHOW"           ; $be SHOW
>a4d0	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $bf SOLID
>a4d7	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c0 SPRITE
>a4df	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c1 TEXT
>a4e5	02 a3 54 4f				.text	2,$a3,"TO"             ; $c2 TO
>a4e9	ff					.text	$FF
.a4ea					KeywordSet1:
>a4ea	00 65					.text	0,$65,""               ; $80 !0:EOF
>a4ec	00 58					.text	0,$58,""               ; $81 !1:SH1
>a4ee	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a4f0	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a4f8	4c 45
>a4fa	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a502	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a50a	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $86 CLEAR
>a511	03 d7 45 4e 44				.text	3,$d7,"END"            ; $87 END
>a516	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $88 LIST
>a51c	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $89 NEW
>a521	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8a RESTORE
>a529	45
>a52a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8b RUN
>a52f	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8c SPRITES
>a537	53
>a538	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8d STOP
>a53e	ff					.text	$FF
.a53f					KeywordSet2:
>a53f	00 65					.text	0,$65,""               ; $80 !0:EOF
>a541	00 58					.text	0,$58,""               ; $81 !1:SH1
>a543	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a545	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a54a	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a54f	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a554	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a559	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a55e	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a563	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a568	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a56d	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a572	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a577	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a57c	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a581	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a586	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a58b	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a590	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a595	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a59a	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a59f	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a5a4	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a5a9	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a5ae	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a5b3	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a5b8	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a5bd	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a5c2	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a5c7	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a5cc	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a5d1	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a5d6	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a5db	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a5e0	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a5e5	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a5ea	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a5ef	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a5f4	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a5f9	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a5fe	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a603	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a608	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a60d	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a612	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a617	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a61c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a621	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a626	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a62b	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a630	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a635	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a63a	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a63f	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a644	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a649	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a64e	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a653	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a658	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a65d	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a662	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a667	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a66c	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a671	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a676	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a67b	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a680	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a685	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a68a	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a68b					TokeniseLine:
.a68b	20 13 a8	jsr $a813			jsr 	FixLineBufferCase 			; fix line case
.a68e	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a690	8d a6 04	sta $04a6			sta 	tokenOffset
.a693	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a696	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a699	a2 ff		ldx #$ff			ldx 	#$FF
.a69b					_TKFindFirst:
.a69b	e8		inx				inx
.a69c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a69f	f0 79		beq $a71a			beq 	_TKExit
.a6a1	c9 20		cmp #$20			cmp 	#' '
.a6a3	90 f6		bcc $a69b			bcc 	_TKFindFirst
.a6a5	c9 30		cmp #$30			cmp 	#'0'
.a6a7	90 07		bcc $a6b0			bcc 	_TKNoLineNumber
.a6a9	c9 3a		cmp #$3a			cmp 	#'9'+1
.a6ab	b0 03		bcs $a6b0			bcs 	_TKNoLineNumber
.a6ad	20 3d a8	jsr $a83d			jsr 	TokeniseExtractLineNumber
.a6b0					_TKNoLineNumber:
.a6b0					_TKTokeniseLoop:
.a6b0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a6b3	f0 65		beq $a71a			beq 	_TKExit
.a6b5	e8		inx				inx
.a6b6	c9 20		cmp #$20			cmp 	#' '
.a6b8	f0 f6		beq $a6b0			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a6ba	ca		dex				dex 								; undo last get, A contains character, X is position.
.a6bb	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a6bd	f0 61		beq $a720			beq 	_TKTokeniseIdentifier
.a6bf	c9 41		cmp #$41			cmp 	#'A'
.a6c1	90 04		bcc $a6c7			bcc 	_TKTokenisePunctuation
.a6c3	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a6c5	90 59		bcc $a720			bcc 	_TKTokeniseIdentifier
.a6c7					_TKTokenisePunctuation:
.a6c7	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a6c9	f0 27		beq $a6f2			beq 	_TKString
.a6cb	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a6cd	f0 28		beq $a6f7			beq 	_TKHexConstant
.a6cf	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a6d1	f0 29		beq $a6fc			beq 	_TKCheckDouble
.a6d3	c9 3e		cmp #$3e			cmp 	#'>'
.a6d5	f0 25		beq $a6fc			beq 	_TKCheckDouble
.a6d7					_TKStandardPunctuation:
.a6d7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a6da	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a6dc	90 0e		bcc $a6ec			bcc 	_TKNoShift
.a6de	48		pha				pha 								; save
.a6df	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a6e1	85 36		sta $36				sta 	zTemp0
.a6e3	68		pla				pla
.a6e4	29 20		and #$20			and 	#32 						; bit 5
.a6e6	4a		lsr a				lsr 	a 							; shift into bit 3
.a6e7	4a		lsr a				lsr 	a
.a6e8	05 36		ora $36				ora 	zTemp0
.a6ea	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a6ec					_TKNoShift:
.a6ec	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte 			; write the punctuation character
.a6ef	e8		inx				inx 								; consume the character
.a6f0	80 be		bra $a6b0			bra 	_TKTokeniseLoop 			; and loop round again.
.a6f2					_TKString:
.a6f2	20 a2 a7	jsr $a7a2			jsr 	TokeniseString
.a6f5	80 b9		bra $a6b0			bra 	_TKTokeniseLoop
.a6f7					_TKHexConstant:
.a6f7	20 dd a7	jsr $a7dd			jsr 	TokeniseHexConstant
.a6fa	80 b4		bra $a6b0			bra 	_TKTokeniseLoop
.a6fc					_TKCheckDouble:
.a6fc	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a6ff	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a701	90 d4		bcc $a6d7			bcc 	_TKStandardPunctuation
.a703	c9 3f		cmp #$3f			cmp 	#'>'+1
.a705	b0 d0		bcs $a6d7			bcs 	_TKStandardPunctuation
.a707	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a70a	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a70c	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a70d	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a710	38		sec				sec
.a711	e9 3c		sbc #$3c			sbc 	#'<'
.a713	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a716	e8		inx				inx 								; consume both
.a717	e8		inx				inx
.a718	80 96		bra $a6b0			bra 	_TKTokeniseLoop
.a71a	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a71c	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a71f	60		rts				rts
.a720					_TKTokeniseIdentifier:
.a720	8e 80 04	stx $0480			stx 	identStart 					; save start
.a723	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a726					_TKCheckLoop:
.a726	e8		inx				inx 								; look at next, we know first is identifier.
.a727	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a72a	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a72c	f0 f8		beq $a726			beq 	_TKCheckLoop
.a72e	c9 30		cmp #$30			cmp	 	#"0"
.a730	90 0c		bcc $a73e			bcc 	_TKEndIdentifier
.a732	c9 3a		cmp #$3a			cmp 	#"9"+1
.a734	90 f0		bcc $a726			bcc 	_TKCheckLoop
.a736	c9 41		cmp #$41			cmp	 	#"A"
.a738	90 04		bcc $a73e			bcc 	_TKEndIdentifier
.a73a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a73c	90 e8		bcc $a726			bcc 	_TKCheckLoop
.a73e					_TKEndIdentifier:
.a73e	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a741	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a743	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a745	f0 06		beq $a74d			beq 	_TKHasTypeCharacter
.a747	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a749	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a74b	d0 07		bne $a754			bne 	_TKNoTypeCharacter
.a74d					_TKHasTypeCharacter:
.a74d	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a750	e8		inx				inx 								; read next
.a751	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a754					_TKNoTypeCharacter:
.a754	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a756	d0 09		bne $a761			bne 	_TKNoArray
.a758	e8		inx				inx 								; skip the (
.a759	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a75c	09 04		ora #$04			ora 	#$04
.a75e	8d 84 04	sta $0484			sta 	identTypeByte
.a761					_TKNoArray:
.a761	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a764	20 fe a7	jsr $a7fe			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a767	a0 a3		ldy #$a3			ldy 	#(KeywordSet0) >> 8
.a769	a9 40		lda #$40			lda 	#(KeywordSet0) & $FF
.a76b	20 e7 a2	jsr $a2e7			jsr 	TokeniseSearchTable
.a76e	a2 00		ldx #$00			ldx 	#0
.a770	b0 1f		bcs $a791			bcs 	_TKFoundToken
.a772	a0 a4		ldy #$a4			ldy 	#(KeywordSet1) >> 8
.a774	a9 ea		lda #$ea			lda 	#(KeywordSet1) & $FF
.a776	20 e7 a2	jsr $a2e7			jsr 	TokeniseSearchTable
.a779	a2 81		ldx #$81			ldx 	#$81
.a77b	b0 14		bcs $a791			bcs 	_TKFoundToken
.a77d	a0 a5		ldy #$a5			ldy 	#(KeywordSet2) >> 8
.a77f	a9 3f		lda #$3f			lda 	#(KeywordSet2) & $FF
.a781	20 e7 a2	jsr $a2e7			jsr 	TokeniseSearchTable
.a784	a2 82		ldx #$82			ldx 	#$82
.a786	b0 09		bcs $a791			bcs 	_TKFoundToken
.a788	20 8e a8	jsr $a88e			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a78b	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a78e	4c b0 a6	jmp $a6b0			jmp 	_TKTokeniseLoop 			; and go round again.
.a791					_TKFoundToken:
.a791	48		pha				pha 								; save token
.a792	8a		txa				txa 								; shift in X, is there one ?
.a793	f0 03		beq $a798			beq 	_TKNoTShift
.a795	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte 			; if so, write it out
.a798					_TKNoTShift:
.a798	68		pla				pla 								; restore and write token
.a799	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a79c	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a79f	4c b0 a6	jmp $a6b0			jmp 	_TKTokeniseLoop 			; and go round again.
.a7a2					TokeniseString:
.a7a2	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a7a4	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a7a7	e8		inx				inx									; start of quoted string.
.a7a8	da		phx				phx 								; push start of string on top
.a7a9	ca		dex				dex
.a7aa					_TSFindEnd:
.a7aa	e8		inx				inx
.a7ab	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a7ae	f0 04		beq $a7b4			beq 	_TSEndOfString
.a7b0	c9 22		cmp #$22			cmp 	#'"'
.a7b2	d0 f6		bne $a7aa			bne 	_TSFindEnd
.a7b4					_TSEndOfString:
.a7b4	7a		ply				ply  								; so now Y is first character, X is character after end.
.a7b5	48		pha				pha 								; save terminating character
.a7b6	20 be a7	jsr $a7be			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a7b9	68		pla				pla 								; terminating character
.a7ba	f0 01		beq $a7bd			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a7bc	e8		inx				inx
.a7bd					_TSNotQuote:
.a7bd	60		rts				rts
.a7be					TOWriteBlockXY:
.a7be	86 36		stx $36				stx 	zTemp0 						; write end character
.a7c0	98		tya				tya
.a7c1	49 ff		eor #$ff			eor 	#$FF
.a7c3	38		sec				sec
.a7c4	65 36		adc $36				adc 	zTemp0
.a7c6	1a		inc a				inc 	a 							; one extra for NULL
.a7c7	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a7ca					_TOBlockLoop:
.a7ca	c4 36		cpy $36				cpy 	zTemp0
.a7cc	f0 09		beq $a7d7			beq 	_TOBlockExit
.a7ce	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a7d1	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a7d4	c8		iny				iny
.a7d5	80 f3		bra $a7ca			bra 	_TOBlockLoop
.a7d7					_TOBlockExit:
.a7d7	a9 00		lda #$00			lda 	#0
.a7d9	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a7dc	60		rts				rts
.a7dd					TokeniseHexConstant:
.a7dd	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a7df	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a7e2	e8		inx				inx									; start of quoted string.
.a7e3	da		phx				phx 								; push start of constant on top
.a7e4	ca		dex				dex
.a7e5					_THFindLoop:
.a7e5	e8		inx				inx
.a7e6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a7e9	c9 30		cmp #$30			cmp 	#"0"
.a7eb	90 0c		bcc $a7f9			bcc 	_THFoundEnd
.a7ed	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7ef	90 f4		bcc $a7e5			bcc 	_THFindLoop
.a7f1	c9 41		cmp #$41			cmp 	#"A"
.a7f3	90 04		bcc $a7f9			bcc 	_THFoundEnd
.a7f5	c9 47		cmp #$47			cmp 	#"F"+1
.a7f7	90 ec		bcc $a7e5			bcc 	_THFindLoop
.a7f9					_THFoundEnd:
.a7f9	7a		ply				ply 								; restore start
.a7fa	20 be a7	jsr $a7be			jsr 	TOWriteBlockXY 				; output the block
.a7fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a7fe					TokeniseCalculateHash:
.a7fe	da		phx				phx
.a7ff	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a802	a9 00		lda #$00			lda 	#0
.a804					_TCHLoop:
.a804	18		clc				clc
.a805	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a808	e8		inx				inx
.a809	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a80c	d0 f6		bne $a804			bne 	_TCHLoop
.a80e	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a811	fa		plx				plx
.a812	60		rts				rts
.a813					FixLineBufferCase:
.a813	a2 00		ldx #$00			ldx 	#0
.a815					_FLBCLoop:
.a815	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a818	f0 22		beq $a83c			beq 	_FLBCExit 					; end of string.
.a81a	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a81c	f0 11		beq $a82f			beq 	_FLBCInQuotes
.a81e	e8		inx				inx
.a81f	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a821	90 f2		bcc $a815			bcc 	_FLBCLoop
.a823	c9 7b		cmp #$7b			cmp 	#'z'+1
.a825	b0 ee		bcs $a815			bcs 	_FLBCLoop
.a827	38		sec				sec 								; make U/C
.a828	e9 20		sbc #$20			sbc 	#32
.a82a	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a82d	80 e6		bra $a815			bra 	_FLBCLoop
.a82f					_FLBCInQuotes:
.a82f	e8		inx				inx 								; advance
.a830	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a833	f0 07		beq $a83c			beq 	_FLBCExit 					; exit on EOS
.a835	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a837	d0 f6		bne $a82f			bne 	_FLBCInQuotes
.a839	e8		inx				inx 								; skip over it
.a83a	80 d9		bra $a815			bra 	_FLBCLoop
.a83c					_FLBCExit:
.a83c	60		rts				rts
.a83d					TokeniseExtractLineNumber:
.a83d	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a840	48		pha				pha
.a841	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a844	48		pha				pha
.a845	20 7b a8	jsr $a87b			jsr 	_TELNTimes2 				; line # x 4
.a848	20 7b a8	jsr $a87b			jsr 	_TELNTimes2 				; line # x 2
.a84b	18		clc				clc 								; add stacked value
.a84c	68		pla				pla
.a84d	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a850	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a853	68		pla				pla
.a854	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a857	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a85a	20 7b a8	jsr $a87b			jsr 	_TELNTimes2 				; line # x 10
.a85d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a860	e8		inx				inx
.a861	29 0f		and #$0f			and 	#15 						; add to line #
.a863	18		clc				clc
.a864	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a867	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a86a	90 03		bcc $a86f			bcc 	_TLENNoCarry
.a86c	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a86f					_TLENNoCarry:
.a86f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a872	c9 30		cmp #$30			cmp 	#'0'
.a874	90 04		bcc $a87a			bcc 	_TLENExit
.a876	c9 3a		cmp #$3a			cmp 	#'9'+1
.a878	90 c3		bcc $a83d			bcc 	TokeniseExtractLineNumber
.a87a					_TLENExit:
.a87a	60		rts				rts
.a87b					_TELNTimes2:
.a87b	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a87e	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a881	60		rts				rts
.a882					TokeniseWriteByte:
.a882	da		phx				phx
.a883	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a886	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a889	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a88c	fa		plx				plx
.a88d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a88e					CheckCreateVariableRecord:
.a88e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a890	85 36		sta $36				sta 	0+zTemp0
.a892	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a894	85 37		sta $37				sta 	1+zTemp0
.a896					_CCVSearch:
.a896	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a898	f0 2c		beq $a8c6			beq 	_CCVFail
.a89a	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a89c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a89e	cd 83 04	cmp $0483			cmp 	identHash
.a8a1	d0 16		bne $a8b9			bne 	_CCVNext
.a8a3	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a8a5	ae 80 04	ldx $0480			ldx 	identStart
.a8a8					_CCVCompare:
.a8a8	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a8ab	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a8ad	e8		inx				inx 								; advance pointers
.a8ae	c8		iny				iny
.a8af	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a8b0	d0 07		bne $a8b9			bne 	_CCVNext  					; didn't match go to next.
.a8b2	90 f4		bcc $a8a8			bcc 	_CCVCompare 				; not finished yet.
.a8b4	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a8b7	f0 41		beq $a8fa			beq 	_CCVFound 					; yes, we were successful
.a8b9					_CCVNext:
.a8b9	18		clc				clc
.a8ba	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a8bc	65 36		adc $36				adc 	zTemp0
.a8be	85 36		sta $36				sta 	zTemp0
.a8c0	90 d4		bcc $a896			bcc 	_CCVSearch
.a8c2	e6 37		inc $37				inc 	zTemp0+1
.a8c4	80 d0		bra $a896			bra 	_CCVSearch
.a8c6					_CCVFail:
.a8c6	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a8c8	ad 83 04	lda $0483			lda 	identHash
.a8cb	91 36		sta ($36),y			sta 	(zTemp0),y
.a8cd	c8		iny				iny 								; offset 2 is the type byte
.a8ce	ad 84 04	lda $0484			lda 	identTypeByte
.a8d1	91 36		sta ($36),y			sta 	(zTemp0),y
.a8d3	c8		iny				iny
.a8d4					_CCVData:
.a8d4	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a8d6	91 36		sta ($36),y			sta 	(zTemp0),y
.a8d8	c8		iny				iny
.a8d9	c0 08		cpy #$08			cpy 	#8
.a8db	90 f7		bcc $a8d4			bcc 	_CCVData
.a8dd	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a8e0					_CCVCopyName:
.a8e0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a8e3	91 36		sta ($36),y			sta 	(zTemp0),y
.a8e5	e8		inx				inx
.a8e6	c8		iny				iny
.a8e7	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a8ea	d0 f4		bne $a8e0			bne 	_CCVCopyName
.a8ec	98		tya				tya 								; patch offset
.a8ed	92 36		sta ($36)			sta 	(zTemp0)
.a8ef	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a8f1	91 36		sta ($36),y			sta 	(zTemp0),y
.a8f3	88		dey				dey
.a8f4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a8f6	09 80		ora #$80			ora 	#$80
.a8f8	91 36		sta ($36),y			sta 	(zTemp0),y
.a8fa					_CCVFound:
.a8fa	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a8fc	38		sec				sec
.a8fd	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a8ff	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a901	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a904	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a906	20 82 a8	jsr $a882			jsr 	TokeniseWriteByte
.a909	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
