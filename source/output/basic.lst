
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Oct  7 14:56:20 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 44 8e	jsr $8e44			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 c0 80	jsr $80c0			jsr 	RunDemos
.8013	20 26 88	jsr $8826			jsr 	NewCommand 					; erase current program
.8016	20 c9 9a	jsr $9ac9			jsr 	BackloadProgram
.8019	4c 82 83	jmp $8382			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 514."
>8064	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 35 31 34 2e

;******  Return to file: ./common/aa.system/00start.asm

>8080	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=5					GXMappingPage = 5
=40960					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=13					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX1:
>0631							.fill 	2
.0633					gxY1:
>0633							.fill 	2
.0635					gxX2:
>0635							.fill 	2
.0637					gxY2:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxForeground:
>063b							.fill 	1
.063c					gxBackground:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8083					GXClearBitmap:
.8083	48		pha				pha
.8084	5a		phy				phy
.8085	85 38		sta $38				sta 	gzTemp1
.8087	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8089	ad 3a 06	lda $063a			lda 	gxHeight
.808c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.808e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8090					_GXCalcLastPage:
.8090	98		tya				tya 								; add to base page
.8091	18		clc				clc
.8092	6d 39 06	adc $0639			adc 	gxBasePage
.8095	85 0d		sta $0d				sta 	GFXEditSlot  				; clear from this page back
.8097					_GXClearAll:
.8097	20 a6 80	jsr $80a6			jsr 	_GXClearBlock 				; clear 8k block
.809a	c6 0d		dec $0d				dec 	GFXEditSlot  				; back to previous
.809c	a5 0d		lda $0d				lda 	GFXEditSlot
.809e	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a1	b0 f4		bcs $8097			bcs 	_GXClearAll
.80a3	7a		ply				ply
.80a4	68		pla				pla
.80a5	60		rts				rts
.80a6					_GXClearBlock:
.80a6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80a8	85 36		sta $36				sta 	0+gzTemp0
.80aa	a9 a0		lda #$a0			lda 	#((GXMappingAddress) >> 8)
.80ac	85 37		sta $37				sta 	1+gzTemp0
.80ae					_GXCB0:
.80ae	a5 38		lda $38				lda 	gzTemp1
.80b0	a0 00		ldy #$00			ldy 	#0
.80b2	91 36		sta ($36),y	_GXCB1:	sta 	(gzTemp0),y
.80b4	c8		iny				iny
.80b5	d0 fb		bne $80b2			bne 	_GXCB1
.80b7	e6 37		inc $37				inc 	gzTemp0+1
.80b9	a5 37		lda $37				lda 	gzTemp0+1
.80bb	c9 c0		cmp #$c0			cmp	 	#(GXMappingAddress >> 8)+$20
.80bd	d0 ef		bne $80ae			bne 	_GXCB0
.80bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.80c0					RunDemos:
.80c0	64 01		stz $01				stz 	1
.80c2	a9 0f		lda #$0f			lda 	#$0F
.80c4	8d 00 d0	sta $d000			sta 	$D000
.80c7	a9 01		lda #$01			lda 	#1
.80c9	8d 00 d1	sta $d100			sta 	$D100
.80cc	9c 01 d1	stz $d101			stz 	$D101
.80cf	9c 02 d1	stz $d102			stz 	$D102
.80d2	a9 02		lda #$02			lda 	#2
.80d4	8d 03 d1	sta $d103			sta 	$D103
.80d7	a9 10		lda #$10			lda 	#16
.80d9	8d 39 06	sta $0639			sta 	gxBasePage
.80dc	a9 f0		lda #$f0			lda 	#240
.80de	8d 3a 06	sta $063a			sta 	gxHeight
.80e1	a9 fc		lda #$fc			lda 	#$FC
.80e3	8d 3b 06	sta $063b			sta 	gxForeground
.80e6	a9 01		lda #$01			lda 	#1
.80e8	8d 3c 06	sta $063c			sta 	gxBackground
.80eb	20 f7 80	jsr $80f7			jsr 	GXOpenBitmap
.80ee	a9 20		lda #$20			lda 	#$20
.80f0	20 83 80	jsr $8083			jsr 	GXClearBitmap
.80f3	20 08 81	jsr $8108			jsr 	GXCloseBitmap
.80f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.80f7					GXOpenBitmap:
.80f7	78		sei				sei 								; no interrupts here
.80f8	a5 00		lda $00				lda 	0 							; save original MMU Control register
.80fa	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.80fd	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.80ff	85 00		sta $00				sta 	0
.8101	a5 0d		lda $0d				lda 	GFXEditSlot 				; Save the original LUT slot value
.8103	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.8106	58		cli				cli
.8107	60		rts				rts
.8108					GXCloseBitmap:
.8108	78		sei				sei
.8109	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.810c	85 0d		sta $0d				sta 	GFXEditSlot
.810e	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8111	85 00		sta $00				sta 	0
.8113	58		cli				cli
.8114	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8115					AssembleGroup1:
.8115	a9 ff		lda #$ff			lda 	#$FF
.8117	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.811a	80 02		bra $811e			bra 	AsmGroup12
.811c					AssembleGroup2:
.811c	a5 00		lda $00				lda 	$00
.811e					AsmGroup12:
.811e	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8121	68		pla				pla 								; pop the return address to access the information following.
.8122	fa		plx				plx
.8123	20 ac 81	jsr $81ac			jsr 	AccessParameters 			; get opcode and save as base
.8126	8d a4 04	sta $04a4			sta 	BaseOpcode
.8129	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.812c	d0 08		bne $8136			bne 	_AG12HaveMask
.812e	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8130	20 b4 81	jsr $81b4			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8133	8d a5 04	sta $04a5			sta 	ModeMask
.8136					_AG12HaveMask:
.8136	20 ef 82	jsr $82ef			jsr 	TypeAndCalculateOperand 	; get zero page type
.8139	da		phx				phx 								; save found address mode
.813a	20 18 82	jsr $8218			jsr 	AssembleModeX
.813d	fa		plx				plx  								; restore address mode
.813e	b0 0b		bcs $814b			bcs 	_AG12Exit
.8140	20 4c 81	jsr $814c			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8143	20 18 82	jsr $8218			jsr 	AssembleModeX
.8146	b0 03		bcs $814b			bcs 	_AG12Exit
.8148	4c 0a a7	jmp $a70a			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.814b					_AG12Exit:
.814b	60		rts				rts
.814c					PromoteToAbsolute:
.814c	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.814e	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8150	f0 19		beq $816b			beq 	_PTADo
.8152	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8154	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8156	f0 13		beq $816b			beq 	_PTADo
.8158	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.815a	e0 80		cpx #$80			cpx 	#AM_ZEROY
.815c	f0 0d		beq $816b			beq 	_PTADo
.815e	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8160	e0 d1		cpx #$d1			cpx 	#AM_IND
.8162	f0 07		beq $816b			beq 	_PTADo
.8164	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8166	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8168	f0 01		beq $816b			beq 	_PTADo
.816a	60		rts				rts
.816b					_PTADo:
.816b	aa		tax				tax
.816c	60		rts				rts
.816d					AssembleGroup3:
.816d	68		pla				pla 								; get parameters, which is just the opcode.
.816e	fa		plx				plx
.816f	20 ac 81	jsr $81ac			jsr 	AccessParameters 			; get and output opcode
.8172	20 c4 81	jsr $81c4			jsr 	AssemblerWriteByte
.8175	20 53 83	jsr $8353			jsr 	CalculateOperand 			; get a 16 bit operand
.8178	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.817b	38		sec				sec
.817c	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.817f	48		pha				pha 								; LSB in A
.8180	ad 10 04	lda $0410			lda 	NSMantissa1
.8183	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8186	aa		tax				tax 								; MSB in X
.8187	68		pla				pla
.8188	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8189	69 7f		adc #$7f			adc 	#$7F
.818b	90 01		bcc $818e			bcc 	_AG3NoCarry
.818d	e8		inx				inx
.818e					_AG3NoCarry:
.818e	38		sec				sec 								; fix back and write out anyways.
.818f	e9 80		sbc #$80			sbc 	#$80
.8191	20 c4 81	jsr $81c4			jsr 	AssemblerWriteByte
.8194	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8196	f0 0a		beq $81a2			beq 	_AG3Exit
.8198	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.819b	29 01		and #$01			and 	#1
.819d	f0 03		beq $81a2			beq 	_AG3Exit
.819f	4c 0f a7	jmp $a70f			jmp 	RangeError 					; no, branch is out of range
.81a2					_AG3Exit:
.81a2	60		rts				rts
.81a3					AssembleGroup4:
.81a3	68		pla				pla 								; pop address
.81a4	fa		plx				plx
.81a5	20 ac 81	jsr $81ac			jsr 	AccessParameters 			; access and get first
.81a8	20 c4 81	jsr $81c4			jsr 	AssemblerWriteByte 			; output it.
.81ab	60		rts				rts
.81ac					AccessParameters:
.81ac	8d a1 04	sta $04a1			sta 	ParamStart
.81af	8e a2 04	stx $04a2			stx 	ParamStart+1
.81b2	a9 01		lda #$01			lda 	#1
.81b4					GetParameter:
.81b4	5a		phy				phy
.81b5	a8		tay				tay
.81b6	ad a1 04	lda $04a1			lda 	ParamStart
.81b9	85 36		sta $36				sta 	zTemp0
.81bb	ad a2 04	lda $04a2			lda 	ParamStart+1
.81be	85 37		sta $37				sta 	zTemp0+1
.81c0	b1 36		lda ($36),y			lda 	(zTemp0),y
.81c2	7a		ply				ply
.81c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81c4					AssemblerWriteByte:
.81c4	48		pha			pha
.81c5	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.81c8	29 02		and #$02		and 	#2
.81ca	f0 1b		beq $81e7		beq 	_AWBNoPrint
.81cc	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.81cf	20 02 82	jsr $8202		jsr 	PrintHex
.81d2	ad 9e 04	lda $049e		lda		AssemblerAddress
.81d5	20 02 82	jsr $8202		jsr 	PrintHex
.81d8	a9 20		lda #$20		lda 	#' '
.81da	20 ad a8	jsr $a8ad		jsr 	EXTPrintCharacter
.81dd	68		pla			pla 									; print byte
.81de	48		pha			pha
.81df	20 02 82	jsr $8202		jsr 	PrintHex
.81e2	a9 0d		lda #$0d		lda 	#13
.81e4	20 ad a8	jsr $a8ad		jsr 	EXTPrintCharacter
.81e7					_AWBNoPrint:
.81e7	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.81ea	85 36		sta $36			sta 	zTemp0
.81ec	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.81ef	f0 0e		beq $81ff		beq 	_AWBRange
.81f1	85 37		sta $37			sta 	zTemp0+1
.81f3	68		pla			pla 									; write byte out
.81f4	92 36		sta ($36)		sta 	(zTemp0)
.81f6	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.81f9	d0 03		bne $81fe		bne 	_AWBNoCarry
.81fb	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.81fe					_AWBNoCarry:
.81fe	60		rts			rts
.81ff					_AWBRange:
.81ff	4c 0f a7	jmp $a70f		jmp 	RangeError
.8202					PrintHex:
.8202	48		pha				pha
.8203	4a		lsr a				lsr 	a
.8204	4a		lsr a				lsr 	a
.8205	4a		lsr a				lsr 	a
.8206	4a		lsr a				lsr 	a
.8207	20 0b 82	jsr $820b			jsr 	_PrintNibble
.820a	68		pla				pla
.820b					_PrintNibble:
.820b	29 0f		and #$0f			and 	#15
.820d	c9 0a		cmp #$0a			cmp 	#10
.820f	90 02		bcc $8213			bcc 	_NoShift
.8211	69 06		adc #$06			adc 	#6
.8213					_NoShift:
.8213	69 30		adc #$30			adc 	#48
.8215	4c ad a8	jmp $a8ad			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8218					AssembleModeX:
.8218	5a		phy				phy
.8219	ad a3 04	lda $04a3			lda 	IsGroup1
.821c	f0 17		beq $8235			beq 	_AMXGroup2
.821e	8a		txa				txa 							; is it in group # 1
.821f	29 40		and #$40			and 	#AM_ISG1
.8221	f0 50		beq $8273			beq 	_AMXFail 				; no, give up.
.8223	8a		txa				txa 							; get back.
.8224	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8226	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8228	d0 22		bne $824c			bne 	_AMXHaveInfo
.822a	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.822d	c9 81		cmp #$81			cmp 	#$81
.822f	f0 42		beq $8273			beq 	_AMXFail
.8231	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8233	80 17		bra $824c			bra 	_AMXHaveInfo 			; odd design decision there.
.8235					_AMXGroup2:
.8235	8a		txa				txa 							; is it in group 2 ?
.8236	29 20		and #$20			and 	#AM_ISG2
.8238	f0 39		beq $8273			beq 	_AMXFail 				; no, give up.
.823a	8a		txa				txa 							; get the offset into Y
.823b	29 1f		and #$1f			and 	#$1F
.823d	4a		lsr a				lsr 	a 						; make it 0-7.
.823e	4a		lsr a				lsr  	a
.823f	a8		tay				tay
.8240	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8243					_AMXCheckOkay:
.8243	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8244	88		dey				dey
.8245	10 fc		bpl $8243			bpl 	_AMXCheckOkay
.8247	90 2a		bcc $8273			bcc 	_AMXFail 				; not allowed.
.8249	8a		txa				txa  							; get mask back
.824a	29 1f		and #$1f			and 	#$1F
.824c					_AMXHaveInfo:
.824c	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.824e	10 05		bpl $8255			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8250	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8253	d0 1e		bne $8273			bne 	_AMXFail
.8255					_AMXAnySize:
.8255	18		clc				clc 							; add offset to the base opcode
.8256	6d a4 04	adc $04a4			adc 	BaseOpcode
.8259					_AMXOutputCode:
.8259	20 c4 81	jsr $81c4			jsr 	AssemblerWriteByte 		; write the opcode out.
.825c	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.825e	f0 10		beq $8270			beq 	_AMXExit
.8260	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8263	20 c4 81	jsr $81c4			jsr 	AssemblerWriteByte
.8266	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8268	30 06		bmi $8270			bmi 	_AMXExit
.826a	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.826d	20 c4 81	jsr $81c4			jsr 	AssemblerWriteByte
.8270					_AMXExit:
.8270	7a		ply				ply
.8271	38		sec				sec
.8272	60		rts				rts
.8273					_AMXFail:
.8273	a0 00		ldy #$00			ldy 	#0
.8275					_AMXCheckOddities:
.8275	8a		txa				txa
.8276	d9 9e 82	cmp $829e,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8279	d0 16		bne $8291			bne 	_AMXCONext
.827b	b9 9c 82	lda $829c,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.827e	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8281	d0 0e		bne $8291			bne 	_AMXCONext
.8283	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8285	10 05		bpl $828c			bpl 	_AMXCONotZero
.8287	ad 10 04	lda $0410			lda 	NSMantissa1
.828a	d0 05		bne $8291			bne 	_AMXCONext
.828c					_AMXCONotZero:
.828c	b9 9d 82	lda $829d,y			lda 	ExtraOpcode+1,y 		; get new opcode
.828f	80 c8		bra $8259			bra 	_AMXOutputCode 			; and assemble it
.8291					_AMXCONext:
.8291	c8		iny				iny
.8292	c8		iny				iny
.8293	c8		iny				iny
.8294	b9 9c 82	lda $829c,y			lda 	ExtraOpcode+0,y 		; end of table
.8297	d0 dc		bne $8275			bne 	_AMXCheckOddities
.8299					_AMXCOFail:
.8299	7a		ply				ply
.829a	18		clc				clc
.829b	60		rts				rts
.829c					ExtraOpcode:
>829c	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>829f	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>82a2	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>82a5	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>82a8	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>82ab	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>82ae	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>82b1	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>82b4	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>82b7	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>82ba	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.82bb					LabelHere:
.82bb	c8		iny				iny 								; skip .
.82bc	a2 00		ldx #$00			ldx 	#0 							; get a term
.82be	20 c5 94	jsr $94c5			jsr 	EvaluateTerm 				; get a term
.82c1	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.82c4	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82c6	d0 24		bne $82ec			bne 	_ALType
.82c8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82cb	85 36		sta $36				sta 	zTemp0
.82cd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.82d0	85 37		sta $37				sta 	zTemp0+1
.82d2	5a		phy				phy 								; copy address in.
.82d3	a0 01		ldy #$01			ldy 	#1
.82d5	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.82d8	92 36		sta ($36)			sta 	(zTemp0)
.82da	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.82dd	91 36		sta ($36),y			sta 	(zTemp0),y
.82df	c8		iny				iny
.82e0	a9 00		lda #$00			lda 	#0
.82e2	91 36		sta ($36),y			sta 	(zTemp0),y
.82e4	c8		iny				iny
.82e5	91 36		sta ($36),y			sta 	(zTemp0),y
.82e7	c8		iny				iny
.82e8	91 36		sta ($36),y			sta 	(zTemp0),y
.82ea	7a		ply				ply
.82eb	60		rts				rts
.82ec					_ALType:
.82ec	4c 14 a7	jmp $a714			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82ef					TypeAndCalculateOperand:
.82ef	b1 30		lda ($30),y			lda 	(codePtr),y
.82f1	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82f3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82f5	f0 5b		beq $8352			beq 	_TACOExit
.82f7	c9 80		cmp #$80			cmp 	#KWC_EOL
.82f9	f0 57		beq $8352			beq 	_TACOExit
.82fb	c8		iny				iny
.82fc	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82fe	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8300	f0 51		beq $8353			beq 	CalculateOperand
.8302	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8304	f0 1f		beq $8325			beq 	_TACOIndirect
.8306	88		dey				dey 								; undo get of first character
.8307	20 53 83	jsr $8353			jsr 	CalculateOperand 			; get operand
.830a	b1 30		lda ($30),y			lda 	(codePtr),y
.830c	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.830e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8310	d0 40		bne $8352			bne 	_TACOExit
.8312	c8		iny				iny
.8313	20 9b a0	jsr $a09b			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8316	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8318	c9 58		cmp #$58			cmp 	#'X'
.831a	f0 36		beq $8352			beq 	_TACOExit
.831c	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.831e	c9 59		cmp #$59			cmp 	#'Y'
.8320	f0 30		beq $8352			beq 	_TACOExit
.8322					_TACOSyntax:
.8322	4c 0a a7	jmp $a70a			jmp 	SyntaxError
.8325					_TACOIndirect:
.8325	20 53 83	jsr $8353			jsr 	CalculateOperand 			; get the operand
.8328	b1 30		lda ($30),y			lda 	(codePtr),y
.832a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.832c	f0 17		beq $8345			beq 	_TACOIndX
.832e	20 24 a1	jsr $a124			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8331	b1 30		lda ($30),y			lda 	(codePtr),y
.8333	a2 d1		ldx #$d1			ldx 	#AM_IND
.8335	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8337	d0 19		bne $8352			bne 	_TACOExit
.8339	c8		iny				iny
.833a	20 9b a0	jsr $a09b			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.833d	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.833f	d0 e1		bne $8322			bne 	_TACOSyntax
.8341	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8343	80 0d		bra $8352			bra 	_TACOExit
.8345					_TACOIndX:
.8345	c8		iny				iny
.8346	20 9b a0	jsr $a09b			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8349	c9 58		cmp #$58			cmp 	#'X' 						; check X
.834b	d0 d5		bne $8322			bne 	_TACOSyntax
.834d	20 24 a1	jsr $a124			jsr 	CheckRightBracket			; check )
.8350	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8352					_TACOExit:
.8352	60		rts				rts
.8353					CalculateOperand:
.8353	48		pha				pha
.8354	da		phx				phx
.8355	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8357	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger
.835a	fa		plx				plx
.835b	68		pla				pla
.835c	60		rts				rts
.a09b					TACOCheckXY:
.a09b	b1 30		lda ($30),y			lda 	(codePtr),y
.a09d	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a09f	c9 40		cmp #$40			cmp 	#$40
.a0a1	d0 21		bne $a0c4			bne 	_TCXYFail
.a0a3	b1 30		lda ($30),y			lda 	(codePtr),y
.a0a5	18		clc				clc
.a0a6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0a8	85 37		sta $37				sta 	zTemp0+1
.a0aa	c8		iny				iny
.a0ab	b1 30		lda ($30),y			lda 	(codePtr),y
.a0ad	c8		iny				iny
.a0ae	85 36		sta $36				sta 	zTemp0
.a0b0	5a		phy				phy 								; save position
.a0b1	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a0b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0b5	d0 0c		bne $a0c3			bne 	_TCXYPopFail
.a0b7	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a0b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0bb	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a0bd	f0 08		beq $a0c7			beq 	_TCXYFound
.a0bf	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a0c1	f0 04		beq $a0c7			beq 	_TCXYFound
.a0c3					_TCXYPopFail:
.a0c3	7a		ply				ply
.a0c4					_TCXYFail:
.a0c4	a9 00		lda #$00			lda 	#0
.a0c6	60		rts				rts
.a0c7					_TCXYFound:
.a0c7	7a		ply				ply 								; restore position
.a0c8	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a0ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.835d					EditProgramCode:
.835d	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8360	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8363	20 02 9a	jsr $9a02			jsr 	MemorySearch
.8366	90 05		bcc $836d			bcc 	_EPCNoDelete 				; reached the end don't delete
.8368	d0 03		bne $836d			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.836a	20 f1 a8	jsr $a8f1			jsr 	MemoryDeleteLine 			; delete the line
.836d					_EPCNoDelete:
.836d	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8370	c9 80		cmp #$80			cmp 	#KWC_EOL
.8372	f0 0d		beq $8381			beq 	_EPCNoInsert
.8374	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8377	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.837a	20 02 9a	jsr $9a02			jsr 	MemorySearch
.837d	18		clc				clc 								; insert at this point.
.837e	20 28 a9	jsr $a928			jsr 	MemoryInsertLine 			; insert the line
.8381					_EPCNoInsert:
.8381	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8382					WarmStart:
.8382	a2 ff		ldx #$ff			ldx 	#$FF
.8384	9a		txs				txs
.8385	20 c3 a8	jsr $a8c3			jsr 	EXTInputLine 				; get line to lineBuffer
.8388	20 1c 9e	jsr $9e1c			jsr 	TokeniseLine 				; tokenise the line
.838b	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.838e	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8391	d0 17		bne $83aa			bne 	_WSEditCode 				; if so,edit code.
.8393	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8396	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8398	85 30		sta $30				sta 	codePtr
.839a	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.839c	85 31		sta $31				sta 	codePtr+1
.839e	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.83a1	c9 80		cmp #$80			cmp 	#KWC_EOL
.83a3	f0 dd		beq $8382			beq 	WarmStart
.83a5	20 b3 89	jsr $89b3			jsr 	RUNCodePointerLine 			; execute that line.
.83a8	80 d8		bra $8382			bra 	WarmStart
.83aa					_WSEditCode:
.83aa	20 5d 83	jsr $835d			jsr 	EditProgramCode
.83ad	20 1b 84	jsr $841b			jsr 	ClearCommand
.83b0	80 d0		bra $8382			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.83b2					AssembleCommand:
.83b2	a2 00		ldx #$00			ldx 	#0
.83b4	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger 		; start address
.83b7	ad 08 04	lda $0408			lda 	NSMantissa0
.83ba	8d 9e 04	sta $049e			sta 	AssemblerAddress
.83bd	ad 10 04	lda $0410			lda 	NSMantissa1
.83c0	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.83c3	20 2c a1	jsr $a12c			jsr 	CheckComma
.83c6	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger 		; options
.83c9	ad 08 04	lda $0408			lda 	NSMantissa0
.83cc	8d a0 04	sta $04a0			sta 	AssemblerControl
.83cf	60		rts				rts
.83d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83d1					AssertCommand:
.83d1	a2 00		ldx #$00			ldx 	#0
.83d3	20 1a 99	jsr $991a			jsr 	EvaluateInteger 			; the assert test
.83d6	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; exit if result is non zero.
.83d9	d0 05		bne $83e0			bne 	_ACExit
.83db	a9 0a		lda #$0a		lda	#10
.83dd	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.83e0					_ACExit:
.83e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83e1					CallCommand:
.83e1	a2 00		ldx #$00			ldx 	#0
.83e3	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger
.83e6					_CCClear
.83e6	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83e7	20 a3 99	jsr $99a3			jsr 	NSMSetZero
.83ea	e0 04		cpx #$04			cpx 	#4
.83ec	d0 f8		bne $83e6			bne 	_CCClear
.83ee	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83f0					_CCCParam:
.83f0	b1 30		lda ($30),y			lda 	(codePtr),y
.83f2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f4	d0 09		bne $83ff			bne 	_CCCRun6502
.83f6	c8		iny				iny 								; skip comma
.83f7	e8		inx				inx	 								; next level
.83f8	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83fb	e0 03		cpx #$03			cpx 	#3
.83fd	90 f1		bcc $83f0			bcc 	_CCCParam 					; done all 3 ?
.83ff					_CCCRun6502:
.83ff	5a		phy				phy 								; save position
.8400	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8403	85 37		sta $37				sta 	zTemp0+1
.8405	ad 08 04	lda $0408			lda 	NSMantissa0
.8408	85 36		sta $36				sta 	zTemp0
.840a	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.840d	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8410	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8413	20 18 84	jsr $8418			jsr 	_CCCZTemp0 					; call zTemp0
.8416	7a		ply				ply 								; restore position and exit
.8417	60		rts				rts
.8418					_CCCZTemp0:
.8418	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.841b					ClearCommand:
.841b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.841d	85 36		sta $36				sta 	0+zTemp0
.841f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8421	85 37		sta $37				sta 	1+zTemp0
.8423					_ClearZeroLoop:
.8423	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8425	f0 24		beq $844b			beq 	_ClearZeroEnd
.8427	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8429	a9 00		lda #$00			lda 	#0
.842b					_ClearOneVariable:
.842b	91 36		sta ($36),y			sta 	(zTemp0),y
.842d	c8		iny				iny
.842e	c0 08		cpy #$08			cpy 	#8
.8430	d0 f9		bne $842b			bne 	_ClearOneVariable
.8432	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8434	b1 36		lda ($36),y			lda 	(zTemp0),y
.8436	c9 18		cmp #$18			cmp 	#NSTProcedure
.8438	d0 04		bne $843e			bne 	_ClearNotProcedure
.843a	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.843c	91 36		sta ($36),y			sta 	(zTemp0),y
.843e					_ClearNotProcedure:
.843e	18		clc				clc 								; go to the next variable
.843f	b2 36		lda ($36)			lda 	(zTemp0)
.8441	65 36		adc $36				adc 	zTemp0
.8443	85 36		sta $36				sta 	zTemp0
.8445	90 dc		bcc $8423			bcc 	_ClearZeroLoop
.8447	e6 37		inc $37				inc 	zTemp0+1
.8449	80 d8		bra $8423			bra 	_ClearZeroLoop
.844b					_ClearZeroEnd:
.844b	18		clc				clc
.844c	a5 36		lda $36				lda 	zTemp0
.844e	69 01		adc #$01			adc 	#1
.8450	8d 8c 04	sta $048c			sta 	lowMemPtr
.8453	a5 37		lda $37				lda 	zTemp0+1
.8455	69 00		adc #$00			adc 	#0
.8457	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.845a	20 bc 9a	jsr $9abc			jsr 	StackReset
.845d	20 0b aa	jsr $aa0b			jsr 	StringSystemInitialise
.8460	20 0b 8d	jsr $8d0b			jsr 	ProcedureScan
.8463	20 6f 89	jsr $896f			jsr 	Command_Restore
.8466	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8469	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.846c	9c a0 04	stz $04a0			stz 	AssemblerControl
.846f	20 b2 96	jsr $96b2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8472	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8473					Command_Data:
.8473	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8475	a2 80		ldx #$80			ldx 	#KWC_EOL
.8477	20 5d 8d	jsr $8d5d			jsr 	ScanForward
.847a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.847b					DimCommand:
.847b	b1 30		lda ($30),y			lda 	(codePtr),y
.847d	29 c0		and #$c0			and 	#$C0
.847f	c9 40		cmp #$40			cmp 	#$40
.8481	d0 7a		bne $84fd			bne 	_DCSyntax
.8483	b1 30		lda ($30),y			lda 	(codePtr),y
.8485	18		clc				clc
.8486	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8488	85 3f		sta $3f				sta 	zaTemp+1
.848a	c8		iny				iny
.848b	b1 30		lda ($30),y			lda 	(codePtr),y
.848d	c8		iny				iny
.848e	85 3e		sta $3e				sta 	zaTemp
.8490	5a		phy				phy
.8491	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8493	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8495	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8497	c9 18		cmp #$18			cmp 	#NSTProcedure
.8499	f0 62		beq $84fd			beq 	_DCSyntax
.849b	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.849d	29 04		and #$04			and 	#NSBIsArray
.849f	f0 64		beq $8505			beq 	_DCType
.84a1	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.84a3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a5	d0 59		bne $8500			bne 	_DCRedefine
.84a7	7a		ply				ply
.84a8	20 08 85	jsr $8508			jsr 	_DCGetSize 				; get array size, check it.
.84ab	5a		phy				phy
.84ac	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.84ae	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.84b0	7a		ply				ply 							; is there a second (e.g. ,x)
.84b1	b1 30		lda ($30),y			lda 	(codePtr),y
.84b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84b5	d0 0a		bne $84c1			bne 	_DCOneDimension
.84b7	c8		iny				iny 							; skip comma
.84b8	20 08 85	jsr $8508			jsr 	_DCGetSize 				; get 2nd array size
.84bb	5a		phy				phy
.84bc	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.84be	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c0	7a		ply				ply
.84c1					_DCOneDimension:
.84c1	5a		phy				phy 							; save position
.84c2	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84c4	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84c6	aa		tax				tax
.84c7	c8		iny				iny
.84c8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ca	e8		inx				inx 							; bump them.
.84cb	1a		inc a				inc 	a
.84cc	20 a6 a5	jsr $a5a6			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84cf	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84d1	29 e0		and #$e0			and 	#$E0
.84d3	d0 23		bne $84f8			bne 	_DCSize
.84d5	a0 02		ldy #$02			ldy 	#2 						; get base type
.84d7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84d9	20 16 85	jsr $8516			jsr 	ScaleByBaseType 		; scale by base type
.84dc	a5 36		lda $36				lda 	zTemp0
.84de	a6 37		ldx $37				ldx 	zTemp0+1
.84e0	20 74 96	jsr $9674			jsr 	AllocateXABytes 		; allocate memory
.84e3	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84e5	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84e7	c8		iny				iny
.84e8	8a		txa				txa
.84e9	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84eb	7a		ply				ply 							; get position back
.84ec	20 24 a1	jsr $a124			jsr 	CheckRightBracket 		; check )
.84ef	b1 30		lda ($30),y			lda 	(codePtr),y
.84f1	c8		iny				iny 							; consume in case
.84f2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84f4	f0 85		beq $847b			beq 	DimCommand
.84f6	88		dey				dey 							; undo consume
.84f7	60		rts				rts
.84f8					_DCSize:
.84f8	a9 16		lda #$16		lda	#22
.84fa	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.84fd					_DCSyntax:
.84fd	4c 0a a7	jmp $a70a			jmp 	SyntaxError
.8500					_DCRedefine:
.8500	a9 15		lda #$15		lda	#21
.8502	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.8505					_DCType:
.8505	4c 14 a7	jmp $a714			jmp 	TypeError
.8508					_DCGetSize:
.8508	a2 00		ldx #$00			ldx 	#0 						; get first index.
.850a	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger 	; get array dimension
.850d	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.850f	f0 e7		beq $84f8			beq 	_DCSize
.8511	c9 fe		cmp #$fe			cmp 	#254
.8513	f0 e3		beq $84f8			beq 	_DCSize
.8515	60		rts				rts
.8516					ScaleByBaseType:
.8516	29 10		and #$10			and 	#NSBIsString 			; is it string
.8518	d0 19		bne $8533			bne 	_SBBTString
.851a	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.851c	48		pha				pha
.851d	a5 36		lda $36				lda 	zTemp0
.851f	48		pha				pha
.8520	06 36		asl $36				asl 	zTemp0 					; x 2
.8522	26 37		rol $37				rol 	zTemp0+1
.8524	06 36		asl $36				asl 	zTemp0 					; x 4
.8526	26 37		rol $37				rol 	zTemp0+1
.8528	68		pla				pla 							; add stacked value = x 5
.8529	65 36		adc $36				adc 	zTemp0
.852b	85 36		sta $36				sta 	zTemp0
.852d	68		pla				pla
.852e	65 37		adc $37				adc 	zTemp0+1
.8530	85 37		sta $37				sta 	zTemp0+1
.8532	60		rts				rts
.8533					_SBBTString:
.8533	06 36		asl $36				asl 	zTemp0
.8535	26 37		rol $37				rol 	zTemp0+1
.8537	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8538					EndCommand:
.8538	4c 82 83	jmp $8382			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.853b					ForCommand:
.853b	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.853d	20 57 9a	jsr $9a57			jsr 	StackOpen
.8540	a2 00		ldx #$00			ldx 	#0
.8542	20 c5 94	jsr $94c5			jsr 	EvaluateTerm
.8545	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8548	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.854a	d0 49		bne $8595			bne		_FCError
.854c	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.854e	20 34 a1	jsr $a134			jsr 	CheckNextA
.8551	e8		inx				inx
.8552	20 1a 99	jsr $991a			jsr 	EvaluateInteger 			; <from> in +1
.8555	b1 30		lda ($30),y			lda 	(codePtr),y
.8557	c8		iny				iny 								; consume it
.8558	48		pha				pha 								; save on stack for later
.8559	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.855b	f0 04		beq $8561			beq 	_FCNoSyntax
.855d	c9 b0		cmp #$b0			cmp 	#KWD_TO
.855f	d0 37		bne $8598			bne 	_FCSyntaxError
.8561					_FCNoSyntax:
.8561	e8		inx				inx
.8562	20 1a 99	jsr $991a			jsr 	EvaluateInteger
.8565	20 9b 9a	jsr $9a9b			jsr 	STKSaveCodePosition 		; save loop back position
.8568	68		pla				pla 								; restore DOWNTO or TO
.8569	5a		phy				phy 								; save Y on the stack
.856a	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.856c	f0 02		beq $8570			beq 	_FCNotDownTo
.856e	a9 02		lda #$02			lda 	#2
.8570					_FCNotDownTo:
.8570	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8571	a0 10		ldy #$10			ldy 	#16
.8573	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8575	a0 06		ldy #$06			ldy 	#6
.8577	ad 08 04	lda $0408			lda 	NSMantissa0
.857a	91 34		sta ($34),y			sta 	(basicStack),y
.857c	ad 10 04	lda $0410			lda 	NSMantissa1
.857f	c8		iny				iny
.8580	91 34		sta ($34),y			sta 	(basicStack),y
.8582	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8584	a2 01		ldx #$01			ldx 	#1
.8586	20 9b 85	jsr $859b			jsr 	FCIntegerToStack
.8589	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.858b	a2 02		ldx #$02			ldx 	#2
.858d	20 9b 85	jsr $859b			jsr 	FCIntegerToStack
.8590	20 bb 85	jsr $85bb			jsr 	CopyIndexToReference
.8593	7a		ply				ply 								; restore position
.8594	60		rts				rts
.8595					_FCError:
.8595	4c 14 a7	jmp $a714			jmp 	TypeError
.8598					_FCSyntaxError:
.8598	4c 0a a7	jmp $a70a			jmp 	SyntaxError
.859b					FCIntegerToStack:
.859b	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.859e	10 03		bpl $85a3			bpl	 	_FCNotNegative
.85a0	20 58 99	jsr $9958			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.85a3					_FCNotNegative:
.85a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.85a6	91 34		sta ($34),y			sta 	(basicStack),y
.85a8	c8		iny				iny
.85a9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.85ac	91 34		sta ($34),y			sta 	(basicStack),y
.85ae	c8		iny				iny
.85af	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.85b2	91 34		sta ($34),y			sta 	(basicStack),y
.85b4	c8		iny				iny
.85b5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.85b8	91 34		sta ($34),y			sta 	(basicStack),y
.85ba	60		rts				rts
.85bb					CopyIndexToReference:
.85bb	5a		phy				phy
.85bc	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.85be	38		sec				sec 								; (because we copy from offset 8)
.85bf	b1 34		lda ($34),y			lda 	(basicStack),y
.85c1	e9 08		sbc #$08			sbc 	#8
.85c3	85 36		sta $36				sta 	zTemp0
.85c5	c8		iny				iny
.85c6	b1 34		lda ($34),y			lda 	(basicStack),y
.85c8	e9 00		sbc #$00			sbc 	#0
.85ca	85 37		sta $37				sta 	zTemp0+1
.85cc	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85ce	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85d0	b1 34		lda ($34),y			lda 	(basicStack),y
.85d2	0a		asl a				asl 	a 							; into carry
.85d3	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85d5	90 14		bcc $85eb			bcc 	_CITRNormal
.85d7	38		sec				sec
.85d8					_CITRNegative:
.85d8	a9 00		lda #$00			lda 	#0
.85da	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85dc	91 36		sta ($36),y			sta 	(zTemp0),y
.85de	c8		iny				iny
.85df	ca		dex				dex
.85e0	d0 f6		bne $85d8			bne 	_CITRNegative
.85e2	88		dey				dey 								; look at MSB of mantissa
.85e3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85e5	09 80		ora #$80			ora 	#$80
.85e7	91 36		sta ($36),y			sta 	(zTemp0),y
.85e9	7a		ply				ply
.85ea	60		rts				rts
.85eb					_CITRNormal:
.85eb	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85ed	91 36		sta ($36),y			sta 	(zTemp0),y
.85ef	c8		iny				iny
.85f0	ca		dex				dex
.85f1	d0 f8		bne $85eb			bne 	_CITRNormal
.85f3	7a		ply				ply 								; and exit.
.85f4	60		rts				rts
.85f5					NextCommand:
.85f5	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85f7	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85f9	20 83 9a	jsr $9a83			jsr 	StackCheckFrame
.85fc	5a		phy				phy
.85fd	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85ff	b1 34		lda ($34),y			lda 	(basicStack),y
.8601	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8603	30 02		bmi $8607			bmi 	_NCStepNeg
.8605	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8607					_NCStepNeg:
.8607	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8609	a2 04		ldx #$04			ldx 	#4 							; count to bump
.860b	18		clc				clc
.860c					_NCBump:
.860c	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.860e	91 34		sta ($34),y			sta 	(basicStack),y
.8610	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8612	c8		iny				iny 								; next byte
.8613	ca		dex				dex 								; do four times
.8614	d0 f6		bne $860c			bne 	_NCBump
.8616	20 bb 85	jsr $85bb			jsr		CopyIndexToReference		; copy it to the reference variable.
.8619	a0 10		ldy #$10			ldy 	#16 						; get step count again
.861b	b1 34		lda ($34),y			lda 	(basicStack),y
.861d	0a		asl a				asl 	a 							; sign bit to carry
.861e	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8620	85 38		sta $38				sta 	zTemp1
.8622	90 02		bcc $8626			bcc 	_NCCompRev 					; use if step is +ve
.8624	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8626					_NCCompRev:
.8626	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8628	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.862a	85 39		sta $39				sta 	zTemp1+1
.862c	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.862e	38		sec				sec
.862f					_NCCompare:
.862f	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8631	b1 34		lda ($34),y			lda 	(basicStack),y
.8633	a4 39		ldy $39				ldy 	zTemp1+1
.8635	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8637	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8639	e6 39		inc $39				inc 	zTemp1+1
.863b	ca		dex				dex 								; do it 4 times.
.863c	d0 f1		bne $862f			bne 	_NCCompare
.863e	50 02		bvc $8642			bvc 	_NCNoOverflow 				; convert to signed comparison
.8640	49 80		eor #$80			eor 	#$80
.8642					_NCNoOverflow:
.8642	7a		ply				ply 								; restore Y position
.8643	0a		asl a				asl 	a 							; is bit 7 set.
.8644	90 04		bcc $864a			bcc 	_NCLoopback 				; if no , >= so loop back
.8646	20 75 9a	jsr $9a75			jsr 	StackClose 					; exit the loop
.8649	60		rts				rts
.864a					_NCLoopBack:
.864a	20 ac 9a	jsr $9aac			jsr 	STKLoadCodePosition 		; loop back
.864d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.864e					Command_GOSUB:
.864e	a2 00		ldx #$00			ldx 	#0
.8650	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8653	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8655	20 57 9a	jsr $9a57			jsr 	StackOpen 					; create frame
.8658	20 9b 9a	jsr $9a9b			jsr 	STKSaveCodePosition 		; save current position
.865b	4c 71 86	jmp $8671			jmp 	GotoStackX
.865e					Command_RETURN:
.865e	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8660	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8662	20 83 9a	jsr $9a83			jsr 	StackCheckFrame
.8665	20 ac 9a	jsr $9aac			jsr 	STKLoadCodePosition 		; restore code position
.8668	20 75 9a	jsr $9a75			jsr 	StackClose
.866b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.866c					GotoCommand:
.866c	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.866e	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger
.8671					GotoStackX:
.8671	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8674	48		pha				pha 								; it is slightly inefficient, just in cases.
.8675	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8678	fa		plx				plx
.8679	20 02 9a	jsr $9a02			jsr 	MemorySearch 				; transfer to line number AX.
.867c	90 05		bcc $8683			bcc 	_GotoError 					; not found, off end.
.867e	d0 03		bne $8683			bne 	_GotoError 					; not found exactly
.8680	4c ac 89	jmp $89ac			jmp 	RunNewLine 					; and go straight to new line code.
.8683					_GotoError:
.8683	a9 0d		lda #$0d		lda	#13
.8685	4c eb 8d	jmp $8deb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8688					IfCommand:
.8688	a2 00		ldx #$00			ldx 	#0 							; If what.
.868a	20 f7 98	jsr $98f7			jsr 	EvaluateNumber
.868d	b1 30		lda ($30),y			lda 	(codePtr),y
.868f	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8691	d0 0a		bne $869d			bne 	_IFStructured
.8693	c8		iny				iny 								; consume THEN
.8694	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; is it zero
.8697	f0 01		beq $869a			beq 	_IfFail 					; if fail, go to next line
.8699	60		rts				rts 								; if THEN just continue
.869a					_IfFail:
.869a	4c 11 8a	jmp $8a11			jmp 	EOLCommand
.869d					_IfStructured:
.869d	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; is it zero
.86a0	d0 07		bne $86a9			bne 	_IfExit 					; if not, then continue normally.
.86a2	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.86a4	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.86a6	20 5d 8d	jsr $8d5d			jsr 	ScanForward 				; and run from there/
.86a9					_IfExit:
.86a9	60		rts				rts
.86aa					ElseCode:
.86aa	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.86ac	aa		tax				tax 								; so just go to the structure exit
.86ad	20 5d 8d	jsr $8d5d			jsr 	ScanForward
.86b0	60		rts				rts
.86b1					EndIf:
.86b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.86b2					LetCommand:
.86b2	a2 00		ldx #$00			ldx 	#0
.86b4	b1 30		lda ($30),y			lda 	(codePtr),y
.86b6	c9 10		cmp #$10			cmp 	#KWD_AT
.86b8	d0 16		bne $86d0			bne 	_LCStandard
.86ba	c8		iny				iny 								; skip equal
.86bb	20 c5 94	jsr $94c5			jsr 	EvaluateTerm 				; get a number
.86be	20 09 93	jsr $9309			jsr 	Dereference 				; dereference it
.86c1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86c4	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86c6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86c9	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86cb	d0 10		bne $86dd			bne 	_LCMain
.86cd	4c 14 a7	jmp $a714			jmp 	TypeError 					; was a reference before.
.86d0					_LCStandard:
.86d0	ad dc 91	lda $91dc			lda 	PrecedenceLevel+"*"			; precedence > this
.86d3	20 f6 91	jsr $91f6			jsr 	EvaluateExpressionAtPrecedence
.86d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86d9	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86db	f0 0e		beq $86eb			beq 	_LetGoProc 					; it's a procedure call.
.86dd					_LCMain:
.86dd	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86df	20 34 a1	jsr $a134			jsr 	CheckNextA
.86e2	e8		inx				inx 								; RHS
.86e3	20 ee 98	jsr $98ee			jsr 	EvaluateValue
.86e6	ca		dex				dex
.86e7	20 ee 86	jsr $86ee			jsr 	AssignVariable
.86ea	60		rts				rts
.86eb					_LetGoProc:
.86eb	4c 87 88	jmp $8887			jmp 	CallProcedure
.86ee					AssignVariable:
.86ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86f1	48		pha				pha 								; save a copy
.86f2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86f5	29 10		and #$10			and 	#NSBIsString
.86f7	d0 0b		bne $8704			bne 	_ASError
.86f9	68		pla				pla 								; get back
.86fa	29 10		and #$10			and 	#NSBIsString 				; check type
.86fc	d0 03		bne $8701			bne 	_ASString
.86fe	4c 31 92	jmp $9231			jmp 	AssignNumber
.8701					_ASString:
.8701	4c 9f 92	jmp $929f			jmp 	AssignString
.8704					_ASError:
.8704	4c 14 a7	jmp $a714			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8707					Command_List:
.8707	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.870a	9c 14 04	stz $0414			stz 	NSMantissa1+4
.870d	a9 ff		lda #$ff			lda 	#$FF
.870f	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8712	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8715	b1 30		lda ($30),y			lda 	(codePtr),y
.8717	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8719	f0 1e		beq $8739			beq 	_CLSecond
.871b	20 97 87	jsr $8797			jsr 	CLIsDigit 					; if not digit, list all
.871e	b0 24		bcs $8744			bcs 	_CLStart
.8720	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8722	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger
.8725	b1 30		lda ($30),y			lda 	(codePtr),y
.8727	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8729	f0 0e		beq $8739			beq 	_CLSecond 					; if so go get it
.872b	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.872e	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8731	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8734	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8737	80 0b		bra $8744			bra 	_CLStart
.8739					_CLSecond:
.8739	c8		iny				iny 								; consume comma
.873a	20 97 87	jsr $8797			jsr 	CLIsDigit 					; digit found
.873d	b0 05		bcs $8744			bcs 	_CLStart 					; if not, continue listing
.873f	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8741	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger
.8744					_CLStart
.8744	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8746	85 30		sta $30				sta 	codePtr
.8748	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.874a	85 31		sta $31				sta 	codePtr+1
.874c					_CLLoop:
.874c	20 ee a8	jsr $a8ee			jsr 	EXTBreakCheck 				; break check
.874f	f0 30		beq $8781			beq 	_CLExit
.8751	b2 30		lda ($30)			lda 	(codePtr)
.8753	f0 2c		beq $8781			beq 	_CLExit
.8755	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8757	20 84 87	jsr $8784			jsr 	CLCompareLineNo
.875a	90 18		bcc $8774			bcc 	_CLNext
.875c	a2 07		ldx #$07			ldx 	#7
.875e	20 84 87	jsr $8784			jsr 	CLCompareLineNo
.8761	f0 02		beq $8765			beq 	_CLDoThisOne
.8763	b0 0f		bcs $8774			bcs 	_CLNext
.8765					_CLDoThisOne:
.8765	20 b9 8b	jsr $8bb9			jsr 	ListConvertLine 			; convert line into token Buffer
.8768	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.876a	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.876c	20 44 8e	jsr $8e44			jsr 	PrintStringXA
.876f	a9 0d		lda #$0d			lda 	#13 						; new line
.8771	20 ad a8	jsr $a8ad			jsr 	EXTPrintCharacter
.8774					_CLNext:
.8774	18		clc				clc
.8775	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8777	65 30		adc $30				adc 	codePtr
.8779	85 30		sta $30				sta 	codePtr
.877b	90 02		bcc $877f			bcc 	_CREExit
.877d	e6 31		inc $31				inc 	codePtr+1
.877f					_CREExit:
.877f	80 cb		bra $874c			bra 	_CLLoop
.8781					_CLExit:
.8781	4c 82 83	jmp $8382			jmp 	WarmStart
.8784					CLCompareLineNo:
.8784	38		sec				sec
.8785	a0 01		ldy #$01			ldy 	#1
.8787	b1 30		lda ($30),y			lda 	(codePtr),y
.8789	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.878c	85 36		sta $36				sta 	zTemp0
.878e	c8		iny				iny
.878f	b1 30		lda ($30),y			lda 	(codePtr),y
.8791	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8794	05 36		ora $36				ora 	zTemp0
.8796	60		rts				rts
.8797					CLIsDigit:
.8797	b1 30		lda ($30),y			lda 	(codePtr),y
.8799	c9 30		cmp #$30			cmp 	#"0"
.879b	90 03		bcc $87a0			bcc	 	_CLIDExitFalse
.879d	c9 3a		cmp #$3a			cmp 	#"9"+1
.879f	60		rts				rts
.87a0					_CLIDExitFalse:
.87a0	38		sec				sec
.87a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.87a2					Command_LOCAL:
.87a2	a2 00		ldx #$00			ldx 	#0 							; at level 0
.87a4	20 b0 87	jsr $87b0			jsr 	LocaliseNextTerm 			; convert term to a local.
.87a7	b1 30		lda ($30),y			lda 	(codePtr),y
.87a9	c8		iny				iny
.87aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87ac	f0 f4		beq $87a2			beq 	Command_LOCAL
.87ae	88		dey				dey 								; unpick pre-get
.87af	60		rts				rts
.87b0					LocaliseNextTerm:
.87b0	20 c5 94	jsr $94c5			jsr 	EvaluateTerm 				; evaluate the term
.87b3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87b6	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.87b8	f0 69		beq $8823			beq		_LNTError
.87ba	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87bd	85 36		sta $36				sta 	zTemp0
.87bf	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87c2	85 37		sta $37				sta  	zTemp0+1
.87c4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87c7	29 10		and #$10			and 	#NSBIsString
.87c9	d0 22		bne $87ed			bne 	_LNTPushString
.87cb	5a		phy				phy
.87cc	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87ce					_LNTPushNumLoop:
.87ce	b1 36		lda ($36),y			lda		(zTemp0),y
.87d0	20 35 9a	jsr $9a35			jsr 	StackPushByte
.87d3	a9 00		lda #$00			lda 	#0
.87d5	91 36		sta ($36),y			sta 	(zTemp0),y
.87d7	c8		iny				iny
.87d8	c0 05		cpy #$05			cpy 	#5
.87da	d0 f2		bne $87ce			bne 	_LNTPushNumLoop
.87dc	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87de	20 35 9a	jsr $9a35			jsr 	StackPushByte
.87e1	a5 37		lda $37				lda 	zTemp0+1
.87e3	20 35 9a	jsr $9a35			jsr 	StackPushByte
.87e6	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87e8	20 35 9a	jsr $9a35			jsr 	StackPushByte
.87eb	7a		ply				ply
.87ec	60		rts				rts
.87ed					_LNTPushString:
.87ed	5a		phy				phy
.87ee	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87f0	85 38		sta $38				sta 	zTemp1
.87f2	a0 01		ldy #$01			ldy 	#1
.87f4	b1 36		lda ($36),y			lda 	(zTemp0),y
.87f6	85 39		sta $39				sta 	zTemp1+1
.87f8	a0 00		ldy #$00			ldy 	#0 							; output string
.87fa	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87fc	f0 0a		beq $8808			beq 	_LNTStringOut
.87fe					_LNTPushStrLoop:
.87fe	b1 38		lda ($38),y			lda 	(zTemp1),y
.8800	f0 06		beq $8808			beq 	_LNTStringOut
.8802	20 35 9a	jsr $9a35			jsr 	StackPushByte
.8805	c8		iny				iny
.8806	80 f6		bra $87fe			bra 	_LNTPushStrLoop
.8808					_LNTStringOut:
.8808	98		tya				tya									; output length
.8809	20 35 9a	jsr $9a35			jsr 	StackPushByte
.880c	a9 00		lda #$00			lda 	#0 							; clear original string.
.880e	92 38		sta ($38)			sta 	(zTemp1)
.8810	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8813	20 35 9a	jsr $9a35			jsr 	StackPushByte
.8816	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8819	20 35 9a	jsr $9a35			jsr 	StackPushByte
.881c	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.881e	20 35 9a	jsr $9a35			jsr 	StackPushByte
.8821	7a		ply				ply
.8822	60		rts				rts
.8823					_LNTError:
.8823	4c 0a a7	jmp $a70a			jmp 	SyntaxError
.a0cb					LocalPopValue:
.a0cb	20 4e 9a	jsr $9a4e			jsr 	StackPopByte
.a0ce	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a0d0	d0 17		bne $a0e9			bne 	_LPVString
.a0d2	20 4e 9a	jsr $9a4e			jsr 	StackPopByte 				; address
.a0d5	85 37		sta $37				sta 	zTemp0+1
.a0d7	20 4e 9a	jsr $9a4e			jsr 	StackPopByte
.a0da	85 36		sta $36				sta 	zTemp0
.a0dc	5a		phy				phy
.a0dd	a0 04		ldy #$04			ldy 	#4 							; copy back
.a0df					_LPVNumberCopy:
.a0df	20 4e 9a	jsr $9a4e			jsr 	StackPopByte
.a0e2	91 36		sta ($36),y			sta 	(zTemp0),y
.a0e4	88		dey				dey
.a0e5	10 f8		bpl $a0df			bpl 	_LPVNumberCopy
.a0e7	7a		ply				ply 								; and complete
.a0e8	60		rts				rts
.a0e9					_LPVString:
.a0e9	20 4e 9a	jsr $9a4e			jsr 	StackPopByte 				; address of record => zTemp0
.a0ec	85 37		sta $37				sta 	zTemp0+1
.a0ee	20 4e 9a	jsr $9a4e			jsr 	StackPopByte
.a0f1	85 36		sta $36				sta 	zTemp0
.a0f3	5a		phy				phy
.a0f4	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a0f6	85 38		sta $38				sta 	zTemp1
.a0f8	a0 01		ldy #$01			ldy 	#1
.a0fa	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0fc	85 39		sta $39				sta 	zTemp1+1
.a0fe	20 4e 9a	jsr $9a4e			jsr 	StackPopByte 				; # to get => y
.a101	a8		tay				tay
.a102	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a104	f0 0e		beq $a114			beq 	_LPVStringCopied
.a106	a9 00		lda #$00			lda 	#0 							; NULL on end
.a108	91 38		sta ($38),y			sta 	(zTemp1),y
.a10a					_LPVStringCopy:
.a10a	88		dey				dey
.a10b	30 07		bmi $a114			bmi 	_LPVStringCopied
.a10d	20 4e 9a	jsr $9a4e			jsr 	StackPopByte
.a110	91 38		sta ($38),y			sta 	(zTemp1),y
.a112	80 f6		bra $a10a			bra 	_LPVStringCopy
.a114					_LPVStringCopied:
.a114	fa		plx				plx
.a115	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8826					NewCommand:
.8826	20 e0 99	jsr $99e0			jsr 	MemoryNew
.8829	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.882c	20 1b 84	jsr $841b			jsr 	ClearCommand 				; clear everything.
.882f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8830					Command_Print:
.8830	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8831					_CPLoop:
.8831	08		php				php 								; save last action flag
.8832	b1 30		lda ($30),y			lda 	(codePtr),y
.8834	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8836	f0 46		beq $887e			beq 	_CPExit
.8838	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.883a	f0 42		beq $887e			beq 	_CPExit
.883c	68		pla				pla 								; throw last action flag
.883d	b1 30		lda ($30),y			lda 	(codePtr),y
.883f	c8		iny				iny
.8840	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8842	f0 37		beq $887b			beq 	_CPContinueWithSameLine
.8844	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8846	f0 2e		beq $8876			beq 	_CPTab
.8848	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.884a	f0 26		beq $8872			beq 	_CPNewLine
.884c	88		dey				dey 								; undo the get.
.884d	a2 00		ldx #$00			ldx 	#0
.884f	20 ee 98	jsr $98ee			jsr 	EvaluateValue 				; get a value into slot 0
.8852	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8855	29 10		and #$10			and 	#NSBIsString
.8857	f0 0b		beq $8864			beq 	_CPNumber
.8859	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.885c	ad 08 04	lda $0408			lda 	NSMantissa0
.885f	20 44 8e	jsr $8e44			jsr 	PrintStringXA
.8862	80 cc		bra $8830			bra 	Command_Print 				; loop round clearing carry so NL if end
.8864					_CPNumber:
.8864	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8866	20 c4 97	jsr $97c4			jsr 	ConvertNumberToString 		; convert to string
.8869	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.886b	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.886d	20 44 8e	jsr $8e44			jsr 	PrintStringXA
.8870	80 be		bra $8830			bra 	Command_Print 				; loop round clearing carry so NL if end
.8872					_CPNewLine:
.8872	a9 0d		lda #$0d			lda 	#13
.8874	80 02		bra $8878			bra 	_CPPrintChar
.8876					_CPTab:
.8876	a9 09		lda #$09			lda 	#9 							; print TAB
.8878					_CPPrintChar:
.8878	20 ad a8	jsr $a8ad			jsr 	EXTPrintCharacter
.887b					_CPContinueWithSameLine:
.887b	38		sec				sec 								; loop round with carry set, which
.887c	80 b3		bra $8831			bra 	_CPLoop 					; will inhibit final CR
.887e					_CPExit:
.887e	28		plp				plp 								; get last action flag
.887f	b0 05		bcs $8886			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8881	a9 0d		lda #$0d			lda 	#13 						; print new line
.8883	20 ad a8	jsr $a8ad			jsr 	EXTPrintCharacter
.8886					_CPExit2:
.8886	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8887					CallProcedure:
.8887	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8889	b1 30		lda ($30),y			lda 	(codePtr),y
.888b	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.888d	f0 0c		beq $889b			beq 	_CPEndParam
.888f					_CPParamLoop:
.888f	20 f4 91	jsr $91f4			jsr 	EvaluateExpression 			; get parameter onto stack
.8892	e8		inx				inx 								; bump next stack
.8893	b1 30		lda ($30),y			lda 	(codePtr),y
.8895	c8		iny				iny
.8896	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8898	f0 f5		beq $888f			beq 	_CPParamLoop
.889a	88		dey				dey 								; unpick.
.889b					_CPEndParam:
.889b	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.889e	c8		iny				iny									; skip right bracket
.889f	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88a1	20 57 9a	jsr $9a57			jsr 	StackOpen
.88a4	20 9b 9a	jsr $9a9b			jsr 	STKSaveCodePosition 		; save loop position
.88a7	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88aa	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88ac	ad 10 04	lda $0410			lda 	NSMantissa1
.88af	85 37		sta $37				sta 	zTemp0+1
.88b1	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88b3	b2 36		lda ($36)			lda 	(zTemp0)
.88b5	85 30		sta $30				sta 	safePtr
.88b7	b1 36		lda ($36),y			lda 	(zTemp0),y
.88b9	85 31		sta $31				sta 	safePtr+1
.88bb	c8		iny				iny
.88bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.88be	85 32		sta $32				sta 	safePtr+2
.88c0	c8		iny				iny
.88c1	b1 36		lda ($36),y			lda 	(zTemp0),y
.88c3	85 33		sta $33				sta 	safePtr+3
.88c5	c8		iny				iny 								; get Y offset -> Y
.88c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.88c8	a8		tay				tay
.88c9	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88cb	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88ce	f0 13		beq $88e3			beq 	_ParamExit 					; if so, exit.
.88d0					_ParamExtract:
.88d0	ca		dex				dex 								; put a local term on the level before
.88d1	20 b0 87	jsr $87b0			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88d4	20 ee 86	jsr $86ee			jsr 	AssignVariable 				; assign stacked value to the variable.
.88d7	e8		inx				inx 								; advance to next parameter to do.
.88d8	e8		inx				inx
.88d9	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.88dc	f0 05		beq $88e3			beq 	_ParamExit
.88de	20 2c a1	jsr $a12c			jsr 	CheckComma 					; comma seperating parameters
.88e1	80 ed		bra $88d0			bra 	_ParamExtract
.88e3					_ParamExit:
.88e3	20 24 a1	jsr $a124			jsr 	CheckRightBracket 			; check )
.88e6	60		rts				rts 								; and continue from here
.a116					Command_ENDPROC:
.a116	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a118	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a11a	20 83 9a	jsr $9a83			jsr 	StackCheckFrame
.a11d	20 ac 9a	jsr $9aac			jsr 	STKLoadCodePosition 		; restore code position
.a120	20 75 9a	jsr $9a75			jsr 	StackClose
.a123	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.88e7					Command_Read:
.88e7	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.88e9	20 c5 94	jsr $94c5			jsr 	EvaluateTerm
.88ec	bd 00 04	lda $0400,x			lda 	NSStatus,x
.88ef	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.88f1	f0 4a		beq $893d			beq 	_CRSyntax 					; check reference (bit 0)
.88f3	20 86 89	jsr $8986			jsr 	SwapDataCodePtrs 			; swap code and data
.88f6	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.88f9	d0 20		bne $891b			bne 	_CRContinueData
.88fb					_CRKeepSearching:
.88fb	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.88fd	aa		tax				tax
.88fe	20 5d 8d	jsr $8d5d			jsr 	ScanForward
.8901	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8903	f0 16		beq $891b			beq 	_CRHaveData 				; found it
.8905	18		clc				clc
.8906	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8908	65 30		adc $30				adc 	codePtr
.890a	85 30		sta $30				sta 	codePtr
.890c	90 02		bcc $8910			bcc 	_CREExit
.890e	e6 31		inc $31				inc 	codePtr+1
.8910					_CREExit:
.8910	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8912	b2 30		lda ($30)			lda 	(codePtr)
.8914	d0 e5		bne $88fb			bne 	_CRKeepSearching
.8916	a9 0b		lda #$0b		lda	#11
.8918	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.891b					_CRHaveData:
.891b					_CRContinueData:
.891b	a2 01		ldx #$01			ldx 	#1
.891d	20 ee 98	jsr $98ee			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8920	ca		dex				dex
.8921	20 ee 86	jsr $86ee			jsr		AssignVariable 				; do the assignment
.8924	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8927	b1 30		lda ($30),y			lda 	(codePtr),y
.8929	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.892b	d0 04		bne $8931			bne 	_CRSwapBack
.892d	c8		iny				iny 								; consume comma
.892e	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8931					_CRSwapBack:
.8931	20 86 89	jsr $8986			jsr 	SwapDataCodePtrs			; swap them back.
.8934	b1 30		lda ($30),y			lda 	(codePtr),y
.8936	c8		iny				iny
.8937	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8939	f0 ac		beq $88e7			beq 	Command_Read 				; if so go round again.
.893b	88		dey				dey 								; unpick get.
.893c	60		rts				rts
.893d					_CRSyntax:
.893d	4c 0a a7	jmp $a70a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8940					RemCommand:
.8940	b1 30		lda ($30),y			lda 	(codePtr),y
.8942	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8944	d0 06		bne $894c			bne 	_RMExit
.8946	c8		iny				iny
.8947	98		tya				tya
.8948	38		sec				sec
.8949	71 30		adc ($30),y			adc 	(codePtr),y
.894b	a8		tay				tay
.894c					_RMExit:
.894c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.894d					Command_REPEAT:
.894d	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.894f	20 57 9a	jsr $9a57			jsr 	StackOpen
.8952	20 9b 9a	jsr $9a9b			jsr 	STKSaveCodePosition 		; save loop position
.8955	60		rts				rts
.8956					Command_UNTIL:
.8956	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8958	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.895a	20 83 9a	jsr $9a83			jsr 	StackCheckFrame
.895d	a2 00		ldx #$00			ldx 	#0
.895f	20 f7 98	jsr $98f7			jsr 	EvaluateNumber 				; work out the number
.8962	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; check if zero
.8965	f0 04		beq $896b			beq 	_CULoopBack 				; if so keep looping
.8967	20 75 9a	jsr $9a75			jsr 	StackClose		 			; return
.896a	60		rts				rts
.896b					_CULoopBack:
.896b	20 ac 9a	jsr $9aac			jsr 	STKLoadCodePosition 		; loop back
.896e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.896f					Command_Restore:
.896f	20 86 89	jsr $8986			jsr 	SwapDataCodePtrs 			; swap code and data
.8972	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8974	85 30		sta $30				sta 	codePtr
.8976	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8978	85 31		sta $31				sta 	codePtr+1
.897a	20 86 89	jsr $8986			jsr 	SwapDataCodePtrs 			; put them back
.897d	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.897f	8d 9b 04	sta $049b			sta 	dataPointer+4
.8982	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8985	60		rts				rts
.8986					SwapDataCodePtrs:
.8986	da		phx				phx
.8987	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8989					_SDCPLoop:
.8989	b5 30		lda $30,x			lda 	safePtr,x
.898b	48		pha				pha
.898c	bd 97 04	lda $0497,x			lda 	dataPointer,x
.898f	95 30		sta $30,x			sta 	safePtr,x
.8991	68		pla				pla
.8992	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8995	ca		dex				dex
.8996	10 f1		bpl $8989			bpl 	_SDCPLoop
.8998	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.899b	8c 9b 04	sty $049b			sty 	dataPointer+4
.899e	a8		tay				tay
.899f	fa		plx				plx
.89a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89a1					CommandRUN:
.89a1	20 1b 84	jsr $841b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89a4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89a6	85 30		sta $30				sta 	codePtr
.89a8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89aa	85 31		sta $31				sta 	codePtr+1
.89ac					RUNNewLine:
.89ac	b2 30		lda ($30)			lda 	(codePtr)
.89ae	f0 5e		beq $8a0e			beq 	CRNoProgram         		; no then END.
.89b0	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89b2	9a		txs				txs
.89b3					RUNCodePointerLine:
.89b3	a0 02		ldy #$02			ldy 	#2 							; start of program
.89b5					_CRIncMainLoop:
.89b5	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89b8	d0 05		bne $89bf			bne 	_CRNoBreakCheck
.89ba	20 ee a8	jsr $a8ee			jsr 	EXTBreakCheck 				; break check
.89bd	f0 4a		beq $8a09			beq 	_CRBreak
.89bf					_CRNoBreakCheck:
.89bf	c8		iny				iny
.89c0					_CRMainLoop:
.89c0	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89c3	b1 30		lda ($30),y			lda 	(codePtr),y
.89c5	10 10		bpl $89d7			bpl 	_CRNotKeyword
.89c7	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89c9	b0 04		bcs $89cf			bcs 	_CRIsKeyword
.89cb	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.89cd	b0 34		bcs $8a03			bcs		_CRSyntaxError
.89cf					_CRIsKeyword:
.89cf	c8		iny				iny 								; consume command
.89d0	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.89d1	aa		tax				tax 								; put in X for vector jump
.89d2	20 06 8a	jsr $8a06			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.89d5	80 e9		bra $89c0			bra 	_CRMainLoop 				; and loop round
.89d7					_CRNotKeyword:
.89d7	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.89d9	f0 da		beq $89b5			beq 	_CRIncMainLoop
.89db	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.89dd	90 05		bcc $89e4			bcc 	_CRNotVariable
.89df					_CRGoLet:
.89df	20 b2 86	jsr $86b2			jsr 	LetCommand
.89e2	80 dc		bra $89c0			bra 	_CRMainLoop
.89e4					_CRNotVariable:
.89e4	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.89e6	f0 f7		beq $89df			beq 	_CRGoLet
.89e8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.89ea	f0 f3		beq $89df			beq 	_CRGoLet
.89ec	c9 21		cmp #$21			cmp 	#KWD_PLING
.89ee	f0 ef		beq $89df			beq 	_CRGoLet
.89f0	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.89f2	f0 09		beq $89fd			beq 	_CRGoRem
.89f4	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.89f6	d0 0b		bne $8a03			bne 	_CRSyntaxError
.89f8	20 bb 82	jsr $82bb			jsr 	LabelHere
.89fb	80 c3		bra $89c0			bra 	_CRMainLoop
.89fd					_CRGoRem:
.89fd	c8		iny				iny
.89fe	20 40 89	jsr $8940			jsr 	RemCommand
.8a01	80 bd		bra $89c0			bra 	_CRMainLoop
.8a03					_CRSyntaxError:
.8a03	4c 0a a7	jmp $a70a			jmp 	SyntaxError
.8a06					_CRCallVector0:
.8a06	7c b2 8a	jmp ($8ab2,x)			jmp 	(VectorSet0,x)
.8a09					_CRBreak:
.8a09	a9 01		lda #$01		lda	#1
.8a0b	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.8a0e					CRNoProgram:
.8a0e	4c 38 85	jmp $8538			jmp 	EndCommand
.8a11					EOLCommand:
.8a11	18		clc				clc
.8a12	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a14	65 30		adc $30				adc 	codePtr
.8a16	85 30		sta $30				sta 	codePtr
.8a18	90 02		bcc $8a1c			bcc 	_CREExit
.8a1a	e6 31		inc $31				inc 	codePtr+1
.8a1c					_CREExit:
.8a1c	80 8e		bra $89ac			bra 	RunNewLine
.8a1e					Shift1Command:
.8a1e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a20	c8		iny				iny
.8a21	0a		asl a				asl 	a
.8a22	aa		tax				tax
.8a23	7c 14 8b	jmp ($8b14,x)			jmp 	(VectorSet1,x)
.8a26					Shift2Command:
.8a26	b1 30		lda ($30),y			lda 	(codePtr),y
.8a28	c8		iny				iny
.8a29	0a		asl a				asl 	a
.8a2a	aa		tax				tax
.8a2b	7c 2c 8b	jmp ($8b2c,x)			jmp 	(VectorSet2,x)
.8a2e					Unused1:
.8a2e					Unused2:
.8a2e					Unused3:
.8a2e					Unused4:
.8a2e	4c 0a a7	jmp $a70a			jmp 	SyntaxError
>8a31							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a32					VectorSetPunc:
>8a32	95 8f					.word	ShiftLeft                        ; $00 <<
>8a34	8f 8e					.word	BinaryCompareLessEqual           ; $01 <=
>8a36	85 8e					.word	BinaryCompareNotEqual            ; $02 <>
>8a38	0a a7					.word	SyntaxError                      ; $03 !!3
>8a3a	0a a7					.word	SyntaxError                      ; $04 ><
>8a3c	99 8e					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a3e	98 8f					.word	ShiftRight                       ; $06 >>
>8a40	0a a7					.word	SyntaxError                      ; $07 !!7
>8a42	0a a7					.word	SyntaxError                      ; $08 !!8
>8a44	0a a7					.word	SyntaxError                      ; $09 !!9
>8a46	0a a7					.word	SyntaxError                      ; $0a !!10
>8a48	0a a7					.word	SyntaxError                      ; $0b !!11
>8a4a	0a a7					.word	SyntaxError                      ; $0c !!12
>8a4c	0a a7					.word	SyntaxError                      ; $0d !!13
>8a4e	0a a7					.word	SyntaxError                      ; $0e !!14
>8a50	0a a7					.word	SyntaxError                      ; $0f !!15
>8a52	0a a7					.word	SyntaxError                      ; $10 @
>8a54	0a a7					.word	SyntaxError                      ; $11 !!17
>8a56	0a a7					.word	SyntaxError                      ; $12 !!18
>8a58	0a a7					.word	SyntaxError                      ; $13 [
>8a5a	3d a1					.word	IntegerDivide                    ; $14 \
>8a5c	0a a7					.word	SyntaxError                      ; $15 ]
>8a5e	1e 91					.word	EorInteger                       ; $16 ^
>8a60	0a a7					.word	SyntaxError                      ; $17 _
>8a62	0a a7					.word	SyntaxError                      ; $18 `
>8a64	0a a7					.word	SyntaxError                      ; $19 !!25
>8a66	0a a7					.word	SyntaxError                      ; $1a !!26
>8a68	0a a7					.word	SyntaxError                      ; $1b {
>8a6a	d8 90					.word	OraInteger                       ; $1c |
>8a6c	0a a7					.word	SyntaxError                      ; $1d }
>8a6e	0a a7					.word	SyntaxError                      ; $1e ~
>8a70	0a a7					.word	SyntaxError                      ; $1f [7m<7F>[m
>8a72	0a a7					.word	SyntaxError                      ; $20
>8a74	64 91					.word	WordIndirect                     ; $21 !
>8a76	0a a7					.word	SyntaxError                      ; $22 "
>8a78	0a a7					.word	SyntaxError                      ; $23 #
>8a7a	0a a7					.word	SyntaxError                      ; $24 $
>8a7c	8a a1					.word	IntegerModulus                   ; $25 %
>8a7e	92 90					.word	AndInteger                       ; $26 &
>8a80	0a a7					.word	SyntaxError                      ; $27 '
>8a82	0a a7					.word	SyntaxError                      ; $28 (
>8a84	0a a7					.word	SyntaxError                      ; $29 )
>8a86	ff a1					.word	MulInteger                       ; $2a *
>8a88	2c 90					.word	AddInteger                       ; $2b +
>8a8a	0a a7					.word	SyntaxError                      ; $2c ,
>8a8c	67 90					.word	SubInteger                       ; $2d -
>8a8e	0a a7					.word	SyntaxError                      ; $2e .
>8a90	96 a3					.word	FDivideCommand                   ; $2f /
>8a92	0a a7					.word	SyntaxError                      ; $30 0
>8a94	0a a7					.word	SyntaxError                      ; $31 1
>8a96	0a a7					.word	SyntaxError                      ; $32 2
>8a98	0a a7					.word	SyntaxError                      ; $33 3
>8a9a	0a a7					.word	SyntaxError                      ; $34 4
>8a9c	0a a7					.word	SyntaxError                      ; $35 5
>8a9e	0a a7					.word	SyntaxError                      ; $36 6
>8aa0	0a a7					.word	SyntaxError                      ; $37 7
>8aa2	0a a7					.word	SyntaxError                      ; $38 8
>8aa4	0a a7					.word	SyntaxError                      ; $39 9
>8aa6	0a a7					.word	SyntaxError                      ; $3a :
>8aa8	0a a7					.word	SyntaxError                      ; $3b ;
>8aaa	71 8e					.word	BinaryCompareLess                ; $3c <
>8aac	67 8e					.word	BinaryCompareEqual               ; $3d =
>8aae	7b 8e					.word	BinaryCompareGreater             ; $3e >
>8ab0	8b 91					.word	ByteIndirect                     ; $3f ?
.8ab2					VectorSet0:
>8ab2	11 8a					.word	EOLCommand                       ; $80 !0:EOF
>8ab4	1e 8a					.word	Shift1Command                    ; $81 !1:SH1
>8ab6	26 8a					.word	Shift2Command                    ; $82 !2:SH2
>8ab8	dc a4					.word	AbsUnary                         ; $83 ABS(
>8aba	55 96					.word	AllocUnary                       ; $84 ALLOC(
>8abc	ec a4					.word	AscUnary                         ; $85 ASC(
>8abe	75 97					.word	ChrUnary                         ; $86 CHR$(
>8ac0	63 8e					.word	UnaryFalse                       ; $87 FALSE
>8ac2	f9 a4					.word	FracUnary                        ; $88 FRAC(
>8ac4	0f a5					.word	IntUnary                         ; $89 INT(
>8ac6	65 a5					.word	IsValUnary                       ; $8a ISVAL(
>8ac8	4f 98					.word	Unary_Left                       ; $8b LEFT$(
>8aca	21 a5					.word	LenUnary                         ; $8c LEN(
>8acc	79 98					.word	Unary_Mid                        ; $8d MID$(
>8ace	c5 96					.word	Unary_Not                        ; $8e NOT(
>8ad0	db 96					.word	Unary_Random                     ; $8f RANDOM(
>8ad2	5f 98					.word	Unary_Right                      ; $90 RIGHT$(
>8ad4	f4 96					.word	Unary_Rnd                        ; $91 RND(
>8ad6	3b a5					.word	SgnUnary                         ; $92 SGN(
>8ad8	87 97					.word	SpcUnary                         ; $93 SPC(
>8ada	a2 97					.word	Unary_Str                        ; $94 STR$(
>8adc	57 8e					.word	UnaryTrue                        ; $95 TRUE
>8ade	5b a5					.word	ValUnary                         ; $96 VAL(
>8ae0	3b 85					.word	ForCommand                       ; $97 FOR
>8ae2	88 86					.word	IfCommand                        ; $98 IF
>8ae4	2e 8a					.word	Unused1                          ; $99 PROC
>8ae6	4d 89					.word	Command_REPEAT                   ; $9a REPEAT
>8ae8	bc 8d					.word	Command_WHILE                    ; $9b WHILE
>8aea	b1 86					.word	EndIf                            ; $9c ENDIF
>8aec	16 a1					.word	Command_ENDPROC                  ; $9d ENDPROC
>8aee	f5 85					.word	NextCommand                      ; $9e NEXT
>8af0	2e 8a					.word	Unused4                          ; $9f THEN
>8af2	56 89					.word	Command_UNTIL                    ; $a0 UNTIL
>8af4	dd 8d					.word	Command_WEND                     ; $a1 WEND
>8af6	e1 83					.word	CallCommand                      ; $a2 CALL
>8af8	0a a7					.word	SyntaxError                      ; $a3 CLS
>8afa	73 84					.word	Command_Data                     ; $a4 DATA
>8afc	7b 84					.word	DimCommand                       ; $a5 DIM
>8afe	2e 8a					.word	Unused3                          ; $a6 DOWNTO
>8b00	aa 86					.word	ElseCode                         ; $a7 ELSE
>8b02	4e 86					.word	Command_GOSUB                    ; $a8 GOSUB
>8b04	6c 86					.word	GotoCommand                      ; $a9 GOTO
>8b06	b2 86					.word	LetCommand                       ; $aa LET
>8b08	a2 87					.word	Command_LOCAL                    ; $ab LOCAL
>8b0a	30 88					.word	Command_Print                    ; $ac PRINT
>8b0c	e7 88					.word	Command_Read                     ; $ad READ
>8b0e	40 89					.word	RemCommand                       ; $ae REM
>8b10	5e 86					.word	Command_RETURN                   ; $af RETURN
>8b12	2e 8a					.word	Unused2                          ; $b0 TO
.8b14					VectorSet1:
>8b14	0a a7					.word	SyntaxError                      ; $80 !0:EOF
>8b16	0a a7					.word	SyntaxError                      ; $81 !1:SH1
>8b18	0a a7					.word	SyntaxError                      ; $82 !2:SH2
>8b1a	b2 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b1c	d1 83					.word	AssertCommand                    ; $84 ASSERT
>8b1e	1b 84					.word	ClearCommand                     ; $85 CLEAR
>8b20	38 85					.word	EndCommand                       ; $86 END
>8b22	07 87					.word	Command_List                     ; $87 LIST
>8b24	26 88					.word	NewCommand                       ; $88 NEW
>8b26	6f 89					.word	Command_Restore                  ; $89 RESTORE
>8b28	a1 89					.word	CommandRUN                       ; $8a RUN
>8b2a	b4 8b					.word	StopCommand                      ; $8b STOP
.8b2c					VectorSet2:
>8b2c	0a a7					.word	SyntaxError                      ; $80 !0:EOF
>8b2e	0a a7					.word	SyntaxError                      ; $81 !1:SH1
>8b30	0a a7					.word	SyntaxError                      ; $82 !2:SH2
>8b32	c9 a5					.word	Assemble_adc                     ; $83 ADC
>8b34	c1 a5					.word	Assemble_and                     ; $84 AND
>8b36	dd a5					.word	Assemble_asl                     ; $85 ASL
>8b38	47 a6					.word	Assemble_bcc                     ; $86 BCC
>8b3a	4b a6					.word	Assemble_bcs                     ; $87 BCS
>8b3c	53 a6					.word	Assemble_beq                     ; $88 BEQ
>8b3e	0a a6					.word	Assemble_bit                     ; $89 BIT
>8b40	3b a6					.word	Assemble_bmi                     ; $8a BMI
>8b42	4f a6					.word	Assemble_bne                     ; $8b BNE
>8b44	37 a6					.word	Assemble_bpl                     ; $8c BPL
>8b46	57 a6					.word	Assemble_bra                     ; $8d BRA
>8b48	5b a6					.word	Assemble_brk                     ; $8e BRK
>8b4a	3f a6					.word	Assemble_bvc                     ; $8f BVC
>8b4c	43 a6					.word	Assemble_bvs                     ; $90 BVS
>8b4e	63 a6					.word	Assemble_clc                     ; $91 CLC
>8b50	b7 a6					.word	Assemble_cld                     ; $92 CLD
>8b52	77 a6					.word	Assemble_cli                     ; $93 CLI
>8b54	a7 a6					.word	Assemble_clv                     ; $94 CLV
>8b56	d5 a5					.word	Assemble_cmp                     ; $95 CMP
>8b58	1e a6					.word	Assemble_cpx                     ; $96 CPX
>8b5a	19 a6					.word	Assemble_cpy                     ; $97 CPY
>8b5c	fb a5					.word	Assemble_dec                     ; $98 DEC
>8b5e	b3 a6					.word	Assemble_dex                     ; $99 DEX
>8b60	8f a6					.word	Assemble_dey                     ; $9a DEY
>8b62	c5 a5					.word	Assemble_eor                     ; $9b EOR
>8b64	00 a6					.word	Assemble_inc                     ; $9c INC
>8b66	c3 a6					.word	Assemble_inx                     ; $9d INX
>8b68	af a6					.word	Assemble_iny                     ; $9e INY
>8b6a	32 a6					.word	Assemble_jmp                     ; $9f JMP
>8b6c	2d a6					.word	Assemble_jsr                     ; $a0 JSR
>8b6e	d1 a5					.word	Assemble_lda                     ; $a1 LDA
>8b70	f6 a5					.word	Assemble_ldx                     ; $a2 LDX
>8b72	14 a6					.word	Assemble_ldy                     ; $a3 LDY
>8b74	e7 a5					.word	Assemble_lsr                     ; $a4 LSR
>8b76	c7 a6					.word	Assemble_nop                     ; $a5 NOP
>8b78	bd a5					.word	Assemble_ora                     ; $a6 ORA
>8b7a	73 a6					.word	Assemble_pha                     ; $a7 PHA
>8b7c	5f a6					.word	Assemble_php                     ; $a8 PHP
>8b7e	bb a6					.word	Assemble_phx                     ; $a9 PHX
>8b80	7b a6					.word	Assemble_phy                     ; $aa PHY
>8b82	83 a6					.word	Assemble_pla                     ; $ab PLA
>8b84	67 a6					.word	Assemble_plp                     ; $ac PLP
>8b86	cf a6					.word	Assemble_plx                     ; $ad PLX
>8b88	8b a6					.word	Assemble_ply                     ; $ae PLY
>8b8a	e2 a5					.word	Assemble_rol                     ; $af ROL
>8b8c	ec a5					.word	Assemble_ror                     ; $b0 ROR
>8b8e	6f a6					.word	Assemble_rti                     ; $b1 RTI
>8b90	7f a6					.word	Assemble_rts                     ; $b2 RTS
>8b92	d9 a5					.word	Assemble_sbc                     ; $b3 SBC
>8b94	6b a6					.word	Assemble_sec                     ; $b4 SEC
>8b96	cb a6					.word	Assemble_sed                     ; $b5 SED
>8b98	87 a6					.word	Assemble_sei                     ; $b6 SEI
>8b9a	cd a5					.word	Assemble_sta                     ; $b7 STA
>8b9c	bf a6					.word	Assemble_stp                     ; $b8 STP
>8b9e	f1 a5					.word	Assemble_stx                     ; $b9 STX
>8ba0	0f a6					.word	Assemble_sty                     ; $ba STY
>8ba2	05 a6					.word	Assemble_stz                     ; $bb STZ
>8ba4	a3 a6					.word	Assemble_tax                     ; $bc TAX
>8ba6	9f a6					.word	Assemble_tay                     ; $bd TAY
>8ba8	28 a6					.word	Assemble_trb                     ; $be TRB
>8baa	23 a6					.word	Assemble_tsb                     ; $bf TSB
>8bac	ab a6					.word	Assemble_tsx                     ; $c0 TSX
>8bae	93 a6					.word	Assemble_txa                     ; $c1 TXA
>8bb0	9b a6					.word	Assemble_txs                     ; $c2 TXS
>8bb2	97 a6					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8bb4					StopCommand:
.8bb4	a9 08		lda #$08		lda	#8
.8bb6	4c eb 8d	jmp $8deb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8bb9					ListConvertLine:
.8bb9	9c 9d 04	stz $049d			stz 	tbOffset
.8bbc	9c a9 04	stz $04a9			stz 	tokenBuffer
.8bbf	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8bc1	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc3	aa		tax				tax
.8bc4	88		dey				dey
.8bc5	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc7	20 80 a2	jsr $a280			jsr 	ConvertInt16
.8bca	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8bcc	86 37		stx $37				stx 	zTemp0+1
.8bce	a0 00		ldy #$00			ldy 	#0
.8bd0					_LCCopyNumber:
.8bd0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd2	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8bd5	c8		iny				iny
.8bd6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd8	d0 f6		bne $8bd0			bne 	_LCCopyNumber
.8bda					_LCPadOut:
.8bda	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8bdc	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8bdf	ad 9d 04	lda $049d			lda 	tbOffset
.8be2	c9 06		cmp #$06			cmp 	#6
.8be4	d0 f4		bne $8bda			bne 	_LCPadOut
.8be6	a0 03		ldy #$03			ldy 	#3 							; start position.
.8be8					_LCMainLoop:
.8be8	b1 30		lda ($30),y			lda 	(codePtr),y
.8bea	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8bec	f0 17		beq $8c05			beq 	_LCExit
.8bee	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8bf0	90 14		bcc $8c06			bcc 	_LCDoubles
.8bf2	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8bf4	90 20		bcc $8c16			bcc 	_LCShiftPunc
.8bf6	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8bf8	90 2b		bcc $8c25			bcc 	_LCPunctuation
.8bfa	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8bfc	90 2d		bcc $8c2b			bcc 	_LCIdentifiers
.8bfe	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8c00	90 49		bcc $8c4b			bcc 	_LCTokens
.8c02	4c a6 8c	jmp $8ca6			jmp 	_LCData 					; 254-5 are data objects
.8c05					_LCExit:
.8c05	60		rts				rts
.8c06					_LCDoubles:
.8c06	48		pha				pha
.8c07	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8c08	29 02		and #$02			and 	#2
.8c0a	09 3c		ora #$3c			ora 	#60 						; make < >
.8c0c	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8c0f	68		pla				pla 								; restore, do lower bit
.8c10	29 03		and #$03			and 	#3
.8c12	09 3c		ora #$3c			ora 	#60
.8c14	80 0f		bra $8c25			bra		_LCPunctuation 				; print, increment, loop
.8c16					_LCShiftPunc:
.8c16	aa		tax				tax 								; save in X
.8c17	29 07		and #$07			and 	#7 							; lower 3 bits
.8c19	f0 02		beq $8c1d			beq 	_LCNoAdd
.8c1b	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8c1d					_LCNoAdd:
.8c1d	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8c1f	90 02		bcc $8c23			bcc 	_LCNoAdd2
.8c21	09 20		ora #$20			ora 	#32 						; adds $20
.8c23					_LCNoAdd2:
.8c23	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8c25					_LCPunctuation:
.8c25	c8		iny				iny 								; consume character
.8c26	20 d2 8c	jsr $8cd2			jsr 	LCLWrite 					; write it out.
.8c29	80 bd		bra $8be8			bra 	_LCMainLoop 				; go round again.
.8c2b					_LCIdentifiers:
.8c2b	18		clc				clc 								; convert to physical address
.8c2c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c2e	85 37		sta $37				sta 	zTemp0+1
.8c30	c8		iny				iny
.8c31	b1 30		lda ($30),y			lda 	(codePtr),y
.8c33	85 36		sta $36				sta 	zTemp0
.8c35	c8		iny				iny
.8c36	5a		phy				phy 								; save position
.8c37	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8c39					_LCOutIdentifier:
.8c39	c8		iny				iny
.8c3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c3c	29 7f		and #$7f			and 	#$7F
.8c3e	20 00 8d	jsr $8d00			jsr 	LCLLowerCase
.8c41	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8c44	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8c46	10 f1		bpl $8c39			bpl 	_LCOutIdentifier
.8c48	7a		ply				ply 								; restore position
.8c49	80 9d		bra $8be8			bra 	_LCMainLoop
.8c4b					_LCTokens:
.8c4b	aa		tax				tax 								; token in X
.8c4c	a9 d0		lda #$d0			lda 	#((KeywordSet2) & $FF)
.8c4e	85 36		sta $36				sta 	0+zTemp0
.8c50	a9 9c		lda #$9c			lda 	#((KeywordSet2) >> 8)
.8c52	85 37		sta $37				sta 	1+zTemp0
.8c54	e0 82		cpx #$82			cpx 	#$82
.8c56	f0 16		beq $8c6e			beq 	_LCUseShift
.8c58	a9 8c		lda #$8c			lda 	#((KeywordSet1) & $FF)
.8c5a	85 36		sta $36				sta 	0+zTemp0
.8c5c	a9 9c		lda #$9c			lda 	#((KeywordSet1) >> 8)
.8c5e	85 37		sta $37				sta 	1+zTemp0
.8c60	e0 81		cpx #$81			cpx 	#$81
.8c62	f0 0a		beq $8c6e			beq 	_LCUseShift
.8c64	a9 5a		lda #$5a			lda 	#((KeywordSet0) & $FF)
.8c66	85 36		sta $36				sta 	0+zTemp0
.8c68	a9 9b		lda #$9b			lda 	#((KeywordSet0) >> 8)
.8c6a	85 37		sta $37				sta 	1+zTemp0
.8c6c	80 01		bra $8c6f			bra 	_LCNoShift
.8c6e					_LCUseShift:
.8c6e	c8		iny				iny
.8c6f					_LCNoShift:
.8c6f	20 e1 8c	jsr $8ce1			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8c72	b1 30		lda ($30),y			lda 	(codePtr),y
.8c74	aa		tax				tax 								; into X
.8c75					_LCFindText:
.8c75	ca		dex				dex
.8c76	10 0e		bpl $8c86			bpl 	_LCFoundText 				; found text.
.8c78	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8c7a	1a		inc a				inc 	a 							; one extra for size
.8c7b	38		sec				sec 								; one extra for checksum
.8c7c	65 36		adc $36				adc 	zTemp0 						; go to next token
.8c7e	85 36		sta $36				sta 	zTemp0
.8c80	90 f3		bcc $8c75			bcc 	_LCFindText
.8c82	e6 37		inc $37				inc 	zTemp0+1
.8c84	80 ef		bra $8c75			bra 	_LCFindText
.8c86					_LCFoundText:
.8c86	5a		phy				phy 								; save List position
.8c87	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8c89	aa		tax				tax
.8c8a	a0 02		ldy #$02			ldy 	#2
.8c8c					_LCCopyToken:
.8c8c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c8e	20 00 8d	jsr $8d00			jsr 	LCLLowerCase
.8c91	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8c94	c8		iny				iny
.8c95	ca		dex				dex
.8c96	d0 f4		bne $8c8c			bne 	_LCCopyToken
.8c98	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8c9a	f0 05		beq $8ca1			beq 	_LCNoSpace
.8c9c	a9 20		lda #$20			lda 	#' '
.8c9e	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8ca1					_LCNoSpace:
.8ca1	7a		ply				ply 								; restore position.
.8ca2	c8		iny				iny 								; consume token
.8ca3	4c e8 8b	jmp $8be8			jmp 	_LCMainLoop 				; and go around again.
.8ca6					_LCData:
.8ca6	48		pha				pha 								; save type $FE/$FF
.8ca7	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8ca9	c9 fe		cmp #$fe			cmp 	#$FE
.8cab	f0 02		beq $8caf			beq 	_LCHaveOpener
.8cad	a2 22		ldx #$22			ldx 	#'"'
.8caf					_LCHaveOpener:
.8caf	8a		txa				txa 								; output prefix (# or ")
.8cb0	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8cb3	c8		iny				iny 								; get count
.8cb4	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb6	aa		tax				tax
.8cb7	c8		iny				iny 								; point at first character
.8cb8					_LCOutData:
.8cb8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cba	c9 00		cmp #$00			cmp 	#0
.8cbc	f0 03		beq $8cc1			beq 	_LCNoPrint
.8cbe	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8cc1					_LCNoPrint:
.8cc1	c8		iny				iny
.8cc2	ca		dex				dex
.8cc3	d0 f3		bne $8cb8			bne 	_LCOutData
.8cc5	68		pla				pla 								; closing " required ?
.8cc6	c9 ff		cmp #$ff			cmp 	#$FF
.8cc8	d0 05		bne $8ccf			bne 	_LCNoQuote
.8cca	a9 22		lda #$22			lda 	#'"'
.8ccc	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8ccf					_LCNoQuote:
.8ccf	4c e8 8b	jmp $8be8			jmp 	_LCMainLoop
.8cd2					LCLWrite:
.8cd2	da		phx				phx
.8cd3	ae 9d 04	ldx $049d			ldx 	tbOffset
.8cd6	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.8cd9	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.8cdc	ee 9d 04	inc $049d			inc 	tbOffset
.8cdf	fa		plx				plx
.8ce0	60		rts				rts
.8ce1					LCCheckSpaceRequired:
.8ce1	ae 9d 04	ldx $049d			ldx 	tbOffset
.8ce4	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.8ce7	20 00 8d	jsr $8d00			jsr 	LCLLowerCase 				; saves a little effort
.8cea	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8cec	90 11		bcc $8cff			bcc 	_LCCSRExit
.8cee	c9 3a		cmp #$3a			cmp 	#"9"+1
.8cf0	90 08		bcc $8cfa			bcc 	_LCCSRSpace
.8cf2	c9 61		cmp #$61			cmp 	#"a"
.8cf4	90 09		bcc $8cff			bcc 	_LCCSRExit
.8cf6	c9 7b		cmp #$7b			cmp 	#"z"+1
.8cf8	b0 05		bcs $8cff			bcs 	_LCCSRExit
.8cfa					_LCCSRSpace:
.8cfa	a9 20		lda #$20			lda 	#' '
.8cfc	20 d2 8c	jsr $8cd2			jsr 	LCLWrite
.8cff					_LCCSRExit:
.8cff	60		rts				rts
.8d00					LCLLowerCase:
.8d00	c9 41		cmp #$41			cmp 	#"A"
.8d02	90 06		bcc $8d0a			bcc 	_LCLLCOut
.8d04	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8d06	b0 02		bcs $8d0a			bcs 	_LCLLCOut
.8d08	69 20		adc #$20			adc 	#$20
.8d0a					_LCLLCOut:
.8d0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8d0b					ProcedureScan:
.8d0b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d0d	85 30		sta $30				sta 	codePtr
.8d0f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d11	85 31		sta $31				sta 	codePtr+1
.8d13					_PSLoop:
.8d13	b2 30		lda ($30)			lda 	(codePtr)
.8d15	f0 42		beq $8d59			beq 	_PSExit
.8d17	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8d19	b1 30		lda ($30),y			lda 	(codePtr),y
.8d1b	c9 99		cmp #$99			cmp 	#KWD_PROC
.8d1d	d0 2d		bne $8d4c			bne 	_PSNext
.8d1f	c8		iny				iny 								; get the address of the record to zTemp0 and
.8d20	b1 30		lda ($30),y			lda 	(codePtr),y
.8d22	29 c0		and #$c0			and 	#$C0
.8d24	c9 40		cmp #$40			cmp 	#$40
.8d26	d0 32		bne $8d5a			bne 	_PSSyntax
.8d28	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2a	18		clc				clc
.8d2b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d2d	85 37		sta $37				sta 	zTemp0+1
.8d2f	c8		iny				iny 								; LSB
.8d30	b1 30		lda ($30),y			lda 	(codePtr),y
.8d32	85 36		sta $36				sta 	zTemp0
.8d34	c8		iny				iny 								; character after variable call.
.8d35	98		tya				tya 								; save Y offset at +7
.8d36	a0 07		ldy #$07			ldy 	#7
.8d38	91 36		sta ($36),y			sta 	(zTemp0),y
.8d3a	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8d3c	a0 02		ldy #$02			ldy 	#2
.8d3e	91 36		sta ($36),y			sta 	(zTemp0),y
.8d40	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8d42					_PSCopy:
.8d42	b5 30		lda $30,x			lda 	safePtr,x
.8d44	c8		iny				iny
.8d45	91 36		sta ($36),y			sta 	(zTemp0),y
.8d47	e8		inx				inx
.8d48	e0 04		cpx #$04			cpx 	#4
.8d4a	d0 f6		bne $8d42			bne 	_PSCopy
.8d4c					_PSNext:
.8d4c	18		clc				clc
.8d4d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8d4f	65 30		adc $30				adc 	codePtr
.8d51	85 30		sta $30				sta 	codePtr
.8d53	90 02		bcc $8d57			bcc 	_CREExit
.8d55	e6 31		inc $31				inc 	codePtr+1
.8d57					_CREExit:
.8d57	80 ba		bra $8d13			bra 	_PSLoop
.8d59					_PSExit:
.8d59	60		rts				rts
.8d5a					_PSSyntax:
.8d5a	4c 0a a7	jmp $a70a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8d5d					ScanForward:
.8d5d	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8d5f	86 37		stx $37				stx 	zTemp0+1
.8d61	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8d63					_ScanLoop:
.8d63	b1 30		lda ($30),y			lda 	(codePtr),y
.8d65	c8		iny				iny
.8d66	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8d68	d0 0e		bne $8d78			bne 	_ScanGoNext
.8d6a	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8d6c	f0 04		beq $8d72			beq 	_ScanMatch
.8d6e	c5 37		cmp $37				cmp 	zTemp0+1
.8d70	d0 06		bne $8d78			bne 	_ScanGoNext
.8d72					_ScanMatch:
.8d72	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8d74	d0 01		bne $8d77			bne 	_ScanNotEndEOL
.8d76	88		dey				dey
.8d77					_ScanNotEndEOL:
.8d77	60		rts				rts
.8d78					_ScanGoNext:
.8d78	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8d7a	90 e7		bcc $8d63			bcc 	_ScanLoop
.8d7c	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8d7e	90 18		bcc $8d98			bcc 	_ScanSkipOne
.8d80	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8d82	b0 2f		bcs $8db3			bcs 	_ScanSkipData
.8d84	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8d86	90 db		bcc $8d63			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8d88	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8d8a	b0 d7		bcs $8d63			bcs 	_ScanLoop
.8d8c	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8d8e	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8d90	b0 d1		bcs $8d63			bcs 	_ScanLoop
.8d92	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8d94	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8d96	80 cb		bra $8d63			bra 	_ScanLoop
.8d98					_ScanSkipOne:
.8d98	c8		iny				iny 								; consume the extra one.
.8d99	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8d9b	d0 c6		bne $8d63			bne 	_ScanLoop
.8d9d	18		clc				clc
.8d9e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8da0	65 30		adc $30				adc 	codePtr
.8da2	85 30		sta $30				sta 	codePtr
.8da4	90 02		bcc $8da8			bcc 	_CREExit
.8da6	e6 31		inc $31				inc 	codePtr+1
.8da8					_CREExit:
.8da8	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8daa	b2 30		lda ($30)			lda 	(codePtr)
.8dac	d0 b5		bne $8d63			bne 	_ScanLoop 					; if not zero, more to scan
.8dae	a9 13		lda #$13		lda	#19
.8db0	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.8db3					_ScanSkipData:
.8db3	88		dey				dey 								; point at data token
.8db4	c8		iny				iny
.8db5	98		tya				tya
.8db6	38		sec				sec
.8db7	71 30		adc ($30),y			adc 	(codePtr),y
.8db9	a8		tay				tay
.8dba	80 a7		bra $8d63			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8dbc					Command_WHILE:
.8dbc	5a		phy				phy 								; save position of the test
.8dbd	a2 00		ldx #$00			ldx 	#0
.8dbf	20 f7 98	jsr $98f7			jsr 	EvaluateNumber 				; work out the number
.8dc2	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; check if zero
.8dc5	f0 0e		beq $8dd5			beq 	_WHExitLoop 				; if so exit the loop
.8dc7	98		tya				tya 								; position *after* test.
.8dc8	7a		ply				ply 								; restore position before test, at WHILE
.8dc9	88		dey				dey
.8dca	48		pha				pha 								; push after test on the stack
.8dcb	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8dcd	20 57 9a	jsr $9a57			jsr 	StackOpen
.8dd0	20 9b 9a	jsr $9a9b			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8dd3	7a		ply				ply 								; restore the position *after* the test
.8dd4	60		rts				rts
.8dd5					_WHExitLoop:
.8dd5	68		pla				pla 								; throw post loop position
.8dd6	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.8dd8	aa		tax				tax
.8dd9	20 5d 8d	jsr $8d5d			jsr 	ScanForward
.8ddc	60		rts				rts
.8ddd					Command_WEND:
.8ddd	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8ddf	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8de1	20 83 9a	jsr $9a83			jsr 	StackCheckFrame
.8de4	20 ac 9a	jsr $9aac			jsr 	STKLoadCodePosition 		; loop back
.8de7	20 75 9a	jsr $9a75			jsr 	StackClose		 			; erase the frame
.8dea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a124					CheckRightBracket:
.a124	b1 30		lda ($30),y			lda 	(codePtr),y
.a126	c8		iny				iny
.a127	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a129	d0 0f		bne $a13a			bne 	CNAFail
.a12b	60		rts				rts
.a12c					CheckComma:
.a12c	b1 30		lda ($30),y			lda 	(codePtr),y
.a12e	c8		iny				iny
.a12f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a131	d0 07		bne $a13a			bne 	CNAFail
.a133	60		rts				rts
.a134					CheckNextA:
.a134	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a136	d0 02		bne $a13a			bne 	CNAFail
.a138	c8		iny				iny 								; skip character
.a139	60		rts				rts 								; and exit
.a13a					CNAFail:
.a13a	4c 0a a7	jmp $a70a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8deb					ErrorHandler:
.8deb	a8		tay				tay 								; find the error text
.8dec	f0 49		beq $8e37			beq 	_EHEnd
.8dee	a2 00		ldx #$00			ldx 	#0
.8df0	a9 23		lda #$23			lda 	#((ErrorText) & $FF)
.8df2	85 36		sta $36				sta 	0+zTemp0
.8df4	a9 a7		lda #$a7			lda 	#((ErrorText) >> 8)
.8df6	85 37		sta $37				sta 	1+zTemp0
.8df8					_EHFind:
.8df8	88		dey				dey 								; found the error text ?
.8df9	f0 0e		beq $8e09			beq 	_EHFound
.8dfb					_EHFindZero:
.8dfb	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8dfd	e6 36		inc $36				inc 	zTemp0
.8dff	d0 02		bne $8e03			bne 	_EHFNoCarry
.8e01	e6 37		inc $37				inc 	zTemp0+1
.8e03					_EHFNoCarry:
.8e03	c9 00		cmp #$00			cmp 	#0
.8e05	d0 f4		bne $8dfb			bne 	_EHFindZero
.8e07	80 ef		bra $8df8			bra 	_EHFind
.8e09					_EHFound:
.8e09	a5 36		lda $36				lda 	zTemp0 						; print message
.8e0b	a6 37		ldx $37				ldx 	zTemp0+1
.8e0d	20 44 8e	jsr $8e44			jsr 	PrintStringXA
.8e10	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8e12	b1 30		lda ($30),y			lda 	(codePtr),y
.8e14	d0 05		bne $8e1b			bne 	_EHAtMsg
.8e16	c8		iny				iny
.8e17	b1 30		lda ($30),y			lda 	(codePtr),y
.8e19	f0 17		beq $8e32			beq 	_EHCREnd
.8e1b					_EHAtMsg:
.8e1b	a2 8e		ldx #$8e			ldx 	#_AtMsg >> 8 				; print " at "
.8e1d	a9 3a		lda #$3a			lda 	#_AtMsg & $FF
.8e1f	20 44 8e	jsr $8e44			jsr 	PrintStringXA
.8e22	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8e24	b1 30		lda ($30),y			lda 	(codePtr),y
.8e26	48		pha				pha
.8e27	c8		iny				iny
.8e28	b1 30		lda ($30),y			lda 	(codePtr),y
.8e2a	aa		tax				tax
.8e2b	68		pla				pla
.8e2c	20 80 a2	jsr $a280			jsr 	ConvertInt16 				; convert XA to string
.8e2f	20 44 8e	jsr $8e44			jsr 	PrintStringXA 				; and print it.
.8e32					_EHCREnd:
.8e32	a9 0d		lda #$0d			lda 	#13 						; new line
.8e34	20 ad a8	jsr $a8ad			jsr 	EXTPrintCharacter
.8e37					_EHEnd:
.8e37	4c 82 83	jmp $8382			jmp 	WarmStart
>8e3a	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8e42	20 00
.8e44					PrintStringXA:
.8e44	5a		phy				phy
.8e45	86 37		stx $37				stx 	zTemp0+1
.8e47	85 36		sta $36				sta 	zTemp0
.8e49	a0 00		ldy #$00			ldy 	#0
.8e4b					_PSXALoop:
.8e4b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4d	f0 06		beq $8e55			beq 	_PSXAExit
.8e4f	20 ad a8	jsr $a8ad			jsr 	EXTPrintCharacter
.8e52	c8		iny				iny
.8e53	80 f6		bra $8e4b			bra 	_PSXALoop
.8e55					_PSXAExit:
.8e55	7a		ply				ply
.8e56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8e57					UnaryTrue:
.8e57	fa		plx				plx
.8e58					ReturnTrue:
.8e58	a9 01		lda #$01			lda 	#1  						; set to 1
.8e5a	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.8e5d	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8e5f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8e62	60		rts				rts
.8e63					UnaryFalse:
.8e63	fa		plx				plx
.8e64					ReturnFalse:
.8e64	4c a3 99	jmp $99a3			jmp 	NSMSetZero 					; set it all to zero
.8e67					BinaryCompareEqual:
.8e67	fa		plx				plx
.8e68	20 a3 8e	jsr $8ea3			jsr 	CompareBaseCode
.8e6b	c9 00		cmp #$00			cmp 	#0
.8e6d	f0 e9		beq $8e58			beq 	ReturnTrue
.8e6f	80 f3		bra $8e64			bra 	ReturnFalse
.8e71					BinaryCompareLess:
.8e71	fa		plx				plx
.8e72	20 a3 8e	jsr $8ea3			jsr 	CompareBaseCode
.8e75	c9 ff		cmp #$ff			cmp 	#$FF
.8e77	f0 df		beq $8e58			beq 	ReturnTrue
.8e79	80 e9		bra $8e64			bra 	ReturnFalse
.8e7b					BinaryCompareGreater:
.8e7b	fa		plx				plx
.8e7c	20 a3 8e	jsr $8ea3			jsr 	CompareBaseCode
.8e7f	c9 01		cmp #$01			cmp 	#1
.8e81	f0 d5		beq $8e58			beq 	ReturnTrue
.8e83	80 df		bra $8e64			bra 	ReturnFalse
.8e85					BinaryCompareNotEqual:
.8e85	fa		plx				plx
.8e86	20 a3 8e	jsr $8ea3			jsr 	CompareBaseCode
.8e89	c9 00		cmp #$00			cmp 	#0
.8e8b	d0 cb		bne $8e58			bne 	ReturnTrue
.8e8d	80 d5		bra $8e64			bra 	ReturnFalse
.8e8f					BinaryCompareLessEqual:
.8e8f	fa		plx				plx
.8e90	20 a3 8e	jsr $8ea3			jsr 	CompareBaseCode
.8e93	c9 01		cmp #$01			cmp 	#1
.8e95	d0 c1		bne $8e58			bne 	ReturnTrue
.8e97	80 cb		bra $8e64			bra 	ReturnFalse
.8e99					BinaryCompareGreaterEqual:
.8e99	fa		plx				plx
.8e9a	20 a3 8e	jsr $8ea3			jsr 	CompareBaseCode
.8e9d	c9 ff		cmp #$ff			cmp 	#$FF
.8e9f	d0 b7		bne $8e58			bne 	ReturnTrue
.8ea1	80 c1		bra $8e64			bra 	ReturnFalse
.8ea3					CompareBaseCode:
.8ea3	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; make both values if references.
.8ea6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8ea9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8eac	29 10		and #$10			and 	#NSTString
.8eae	d0 40		bne $8ef0			bne 	_CBCString
.8eb0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8eb3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8eb6	d0 3b		bne $8ef3			bne 	_CBCFloat
.8eb8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8ebb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ebe	29 08		and #$08			and 	#NSTFloat
.8ec0	d0 31		bne $8ef3			bne 	_CBCFloat
.8ec2	20 f6 8e	jsr $8ef6			jsr 	CompareFixMinusZero
.8ec5	e8		inx				inx
.8ec6	20 f6 8e	jsr $8ef6			jsr 	CompareFixMinusZero
.8ec9	ca		dex				dex
.8eca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8ecd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8ed0	10 0b		bpl $8edd			bpl 	_CDCSameSign
.8ed2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8ed5	30 16		bmi $8eed			bmi 	_CBCLess 					; return $FF
.8ed7					_CBCGreater:
.8ed7	a9 01		lda #$01			lda 	#1
.8ed9	60		rts				rts
.8eda					_CBCEqual:
.8eda	a9 00		lda #$00			lda 	#0
.8edc	60		rts				rts
.8edd					_CDCSameSign:
.8edd	20 06 90	jsr $9006			jsr 	SubTopTwoStack 				; unsigned subtract
.8ee0	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; or the mantissa together
.8ee3	f0 f5		beq $8eda			beq 	_CBCEqual 					; -0 == 0
.8ee5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8ee8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8eeb	10 ea		bpl $8ed7			bpl 	_CBCGreater
.8eed					_CBCLess:
.8eed	a9 ff		lda #$ff			lda 	#$FF
.8eef	60		rts				rts
.8ef0					_CBCString:
.8ef0	4c 5c 8f	jmp $8f5c			jmp 	CompareStrings
.8ef3					_CBCFloat:
.8ef3	4c 7c a3	jmp $a37c			jmp 	CompareFloat
.8ef6					CompareFixMinusZero:
.8ef6	20 d3 99	jsr $99d3			jsr 	NSMIsZero
.8ef9	d0 03		bne $8efe			bne 	_CFXMZNotZero
.8efb	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8efe					_CFXMZNotZero:
.8efe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8eff					StringConcat:
.8eff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8f02	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8f05	29 18		and #$18			and 	#NSBTypeMask
.8f07	c9 10		cmp #$10			cmp 	#NSTString
.8f09	d0 4e		bne $8f59			bne		_SCType
.8f0b	64 38		stz $38				stz 	zTemp1 						; counting total length
.8f0d	e8		inx				inx
.8f0e	20 2c 8f	jsr $8f2c			jsr 	_SCSetupZ0 					; setup for second
.8f11	20 37 8f	jsr $8f37			jsr 	_SCLengthZ0 				; length for second
.8f14	ca		dex				dex
.8f15	20 2c 8f	jsr $8f2c			jsr 	_SCSetupZ0 					; setup for first
.8f18	20 37 8f	jsr $8f37			jsr 	_SCLengthZ0 				; length for first
.8f1b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8f1d	20 2f aa	jsr $aa2f			jsr 	StringTempAllocate
.8f20	20 4a 8f	jsr $8f4a			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8f23	e8		inx				inx
.8f24	20 2c 8f	jsr $8f2c			jsr 	_SCSetupZ0 					; copy second out
.8f27	20 4a 8f	jsr $8f4a			jsr 	_SCCopy
.8f2a	ca		dex				dex
.8f2b	60		rts				rts
.8f2c					_SCSetupZ0:
.8f2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8f2f	85 36		sta $36				sta 	zTemp0
.8f31	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f34	85 37		sta $37				sta 	zTemp0+1
.8f36	60		rts				rts
.8f37					_SCLengthZ0:
.8f37	5a		phy				phy
.8f38	a0 00		ldy #$00			ldy 	#0
.8f3a					_SCLenLoop:
.8f3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f3c	f0 0a		beq $8f48			beq 	_SCLExit
.8f3e	c8		iny				iny
.8f3f	e6 38		inc $38				inc 	zTemp1
.8f41	10 f7		bpl $8f3a			bpl		_SCLenLoop
.8f43	a9 09		lda #$09		lda	#9
.8f45	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.8f48					_SCLExit:
.8f48	7a		ply				ply
.8f49	60		rts				rts
.8f4a					_SCCopy:
.8f4a	5a		phy				phy
.8f4b	a0 00		ldy #$00			ldy 	#0
.8f4d					_SCCopyLoop:
.8f4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f4f	f0 06		beq $8f57			beq 	_SCCExit
.8f51	20 6d aa	jsr $aa6d			jsr 	StringTempWrite
.8f54	c8		iny				iny
.8f55	80 f6		bra $8f4d			bra 	_SCCopyLoop
.8f57					_SCCExit:
.8f57	7a		ply				ply
.8f58	60		rts				rts
.8f59					_SCType:
.8f59	4c 14 a7	jmp $a714			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a13d					IntegerDivide:
.a13d	fa		plx				plx
.a13e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a141	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a144	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a145	0a		asl a				asl 	a
.a146	10 05		bpl $a14d			bpl 	_NotRef
.a148	48		pha				pha
.a149	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a14c	68		pla				pla
.a14d					_NotRef:
.a14d	0a		asl a				asl 	a
.a14e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a150	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a153	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a156	f0 03		beq $a15b			beq 	_IntegerCode 				; if clear, then we have two integers
.a158	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.a15b					_IntegerCode:
.a15b	20 7d a1	jsr $a17d			jsr 	CheckDivideZero 			; do div zero check
.a15e	20 b5 a1	jsr $a1b5			jsr 	Int32Divide 				; do the division
.a161	20 72 a2	jsr $a272			jsr 	CalculateSign 				; calculate result sign
.a164					NSMCopyPlusTwoToZero:
.a164	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a167	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a16a	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a16d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a170	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a173	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a176	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a179	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a17c	60		rts				rts
.a17d					CheckDivideZero:
.a17d	e8		inx				inx
.a17e	20 d3 99	jsr $99d3			jsr 	NSMIsZero
.a181	f0 02		beq $a185			beq 	_CDVError
.a183	ca		dex				dex
.a184	60		rts				rts
.a185					_CDVError:
.a185	a9 03		lda #$03		lda	#3
.a187	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a18a					IntegerModulus:
.a18a	fa		plx				plx
.a18b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a18e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a191	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a192	0a		asl a				asl 	a
.a193	10 05		bpl $a19a			bpl 	_NotRef
.a195	48		pha				pha
.a196	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a199	68		pla				pla
.a19a					_NotRef:
.a19a	0a		asl a				asl 	a
.a19b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a19d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a1a0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a1a3	f0 03		beq $a1a8			beq 	_IntegerCode 				; if clear, then we have two integers
.a1a5	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.a1a8					_IntegerCode:
.a1a8					IntegerModulusNoCheck:
.a1a8	20 7d a1	jsr $a17d			jsr 	CheckDivideZero 			; do div zero check
.a1ab	20 b5 a1	jsr $a1b5			jsr 	Int32Divide 				; do the division
.a1ae	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a1b1	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a1b4	60		rts				rts
.a1b5					Int32Divide:
.a1b5	48		pha				pha 								; save AXY
.a1b6	5a		phy				phy
.a1b7	20 7a 99	jsr $997a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a1ba	20 9f 99	jsr $999f			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a1bd	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a1bf					_I32DivideLoop:
.a1bf	e8		inx				inx
.a1c0	e8		inx				inx
.a1c1	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a1c4	ca		dex				dex
.a1c5	ca		dex				dex
.a1c6	20 b9 99	jsr $99b9			jsr 	NSMRotateLeft
.a1c9	20 f5 a1	jsr $a1f5			jsr 	DivideCheckSubtract 		; check if subtract possible
.a1cc	90 03		bcc $a1d1			bcc 	_I32DivideNoCarryIn
.a1ce	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a1d1					_I32DivideNoCarryIn:
.a1d1	88		dey				dey 								; loop round till division completed.
.a1d2	d0 eb		bne $a1bf			bne 	_I32DivideLoop
.a1d4	7a		ply				ply 								; restore AXY and exit
.a1d5	68		pla				pla
.a1d6	60		rts				rts
.a1d7					Int32ShiftDivide:
.a1d7	48		pha				pha 								; save AY
.a1d8	5a		phy				phy
.a1d9	e8		inx				inx 								; clear S[X+2]
.a1da	e8		inx				inx
.a1db	20 a3 99	jsr $99a3			jsr 	NSMSetZero
.a1de	ca		dex				dex
.a1df	ca		dex				dex
.a1e0	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a1e2					_I32SDLoop:
.a1e2	20 f5 a1	jsr $a1f5			jsr 	DivideCheckSubtract 		; check if subtract possible
.a1e5	e8		inx				inx
.a1e6	e8		inx				inx
.a1e7	20 b9 99	jsr $99b9			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a1ea	ca		dex				dex
.a1eb	ca		dex				dex
.a1ec	20 b9 99	jsr $99b9			jsr 	NSMRotateLeft
.a1ef	88		dey				dey 	 							; do 31 times
.a1f0	d0 f0		bne $a1e2			bne 	_I32SDLoop
.a1f2	7a		ply				ply 								; restore AY and exit
.a1f3	68		pla				pla
.a1f4	60		rts				rts
.a1f5					DivideCheckSubtract:
.a1f5	20 06 90	jsr $9006			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a1f8	b0 04		bcs $a1fe			bcs 	_DCSExit 					; if carry set, then could do, exit
.a1fa	20 e0 8f	jsr $8fe0			jsr 	AddTopTwoStack 				; add it back in
.a1fd	18		clc				clc 								; and return False
.a1fe					_DCSExit:
.a1fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a1ff					MulInteger:
.a1ff	fa		plx				plx
.a200	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a203	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a206	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a207	0a		asl a				asl 	a
.a208	10 05		bpl $a20f			bpl 	_NotRef
.a20a	48		pha				pha
.a20b	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a20e	68		pla				pla
.a20f					_NotRef:
.a20f	0a		asl a				asl 	a 							; put MSB of type into A:7
.a210	30 0b		bmi $a21d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a212	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a215	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a218	f0 06		beq $a220			beq 	_IntegerCode 				; if clear, then we have two integers
.a21a	4c 53 a4	jmp $a453			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a21d					_StringData:
.a21d	4c 1e a7	jmp $a71e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a220					_IntegerCode:
.a220	20 2d a2	jsr $a22d			jsr 	MultiplyShort
.a223	c9 00		cmp #$00			cmp 	#0
.a225	f0 05		beq $a22c			beq 	_MIExit
.a227	a9 04		lda #$04		lda	#4
.a229	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a22c					_MIExit:
.a22c	60		rts				rts
.a22d					MultiplyShort:
.a22d	5a		phy				phy 								; save Y
.a22e	20 7a 99	jsr $997a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a231	20 9f 99	jsr $999f			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a234	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a236					_I32MLoop:
.a236	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a239	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a23c	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a23f	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a242	f0 28		beq $a26c			beq 	_I32MExit 					; exit if zero
.a244	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a247	29 01		and #$01			and 	#1
.a249	f0 0e		beq $a259			beq 	_I32MNoAdd
.a24b	20 e0 8f	jsr $8fe0			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a24e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a251	10 06		bpl $a259			bpl 	_I32MNoAdd
.a253					_I32ShiftRight:
.a253	20 c6 99	jsr $99c6			jsr 	NSMShiftRight 				; shift S[X] right
.a256	c8		iny				iny 								; increment shift count
.a257	80 0a		bra $a263			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a259					_I32MNoAdd:
.a259	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a25c	70 f5		bvs $a253			bvs 	_I32ShiftRight 				; instead.
.a25e	e8		inx				inx
.a25f	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a262	ca		dex				dex
.a263					_I32MShiftUpper:
.a263	e8		inx				inx 								; shift S[X+2] right
.a264	e8		inx				inx
.a265	20 c6 99	jsr $99c6			jsr 	NSMShiftRight
.a268	ca		dex				dex
.a269	ca		dex				dex
.a26a	80 ca		bra $a236			bra 	_I32MLoop 					; try again.
.a26c					_I32MExit:
.a26c	20 72 a2	jsr $a272			jsr 	CalculateSign
.a26f	98		tya				tya 								; shift in A
.a270	7a		ply				ply 								; restore Y and exit
.a271	60		rts				rts
.a272					CalculateSign:
.a272	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a275	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a278	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a27b	0a		asl a				asl 	a 							; shift bit 7 into carry
.a27c	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a27f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8f5c					CompareStrings:
.8f5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8f5f	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8f62	29 10		and #$10			and 	#NSBIsString
.8f64	f0 2c		beq $8f92			beq 	_CSTypeError
.8f66	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8f69	85 36		sta $36				sta 	zTemp0
.8f6b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8f6e	85 37		sta $37				sta 	zTemp0+1
.8f70	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.8f73	85 38		sta $38				sta 	zTemp1
.8f75	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8f78	85 39		sta $39				sta 	zTemp1+1
.8f7a	5a		phy				phy 								; save Y so we can access strings
.8f7b	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8f7d					_CSLoop:
.8f7d	c8		iny				iny
.8f7e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8f80	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8f82	d0 06		bne $8f8a			bne 	_CSDifferent
.8f84	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8f86	d0 f5		bne $8f7d			bne 	_CSLoop 					; still comparing
.8f88					_CSExit:
.8f88	7a		ply				ply 								; reached end, return zero in A from EOS
.8f89	60		rts				rts
.8f8a					_CSDifferent:
.8f8a	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8f8c	90 fa		bcc $8f88			bcc		_CSExit
.8f8e	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8f90	80 f6		bra $8f88			bra 	_CSExit
.8f92					_CSTypeError:
.8f92	4c 14 a7	jmp $a714			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8f95					ShiftLeft:
.8f95	38		sec				sec
.8f96	80 01		bra $8f99			bra 	ShiftMain
.8f98					ShiftRight:
.8f98	18		clc				clc
.8f99					ShiftMain:
.8f99	fa		plx				plx 								; restore X
.8f9a	08		php				php 								; save direction
.8f9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f9e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8fa1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fa2	0a		asl a				asl 	a
.8fa3	10 05		bpl $8faa			bpl 	_NotRef
.8fa5	48		pha				pha
.8fa6	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fa9	68		pla				pla
.8faa					_NotRef:
.8faa	0a		asl a				asl 	a
.8fab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fad	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fb0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8fb3	f0 03		beq $8fb8			beq 	_IntegerCode 				; if clear, then we have two integers
.8fb5	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.8fb8					_IntegerCode:
.8fb8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.8fbb	29 e0		and #$e0			and 	#$E0
.8fbd	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.8fc0	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.8fc3	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.8fc6	d0 13		bne $8fdb			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8fc8					_SMLoop:
.8fc8	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8fcb	30 11		bmi $8fde			bmi 	_SMExit 					; exit if done.
.8fcd	28		plp				plp 								; restore direcition setting
.8fce	08		php				php
.8fcf	90 05		bcc $8fd6			bcc 	_SMRight
.8fd1	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; shift left if CS
.8fd4	80 f2		bra $8fc8			bra 	_SMLoop
.8fd6					_SMRight:
.8fd6	20 c6 99	jsr $99c6			jsr 	NSMShiftRight 				; shift right if CC
.8fd9	80 ed		bra $8fc8			bra 	_SMLoop
.8fdb					_SMExit0:
.8fdb	20 a3 99	jsr $99a3			jsr 	NSMSetZero 					; return zero.
.8fde					_SMExit:
.8fde	28		plp				plp 								; throw direction
.8fdf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8fe0					AddTopTwoStack:
.8fe0	18		clc				clc
.8fe1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.8fe4	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.8fe7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8fea	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.8fed	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.8ff0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ff3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.8ff6	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.8ff9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8ffc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.8fff	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9002	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9005	60		rts				rts
.9006					SubTopTwoStack:
.9006	38		sec				sec
.9007	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.900a	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.900d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9010	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9013	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9016	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9019	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.901c	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.901f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9022	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9025	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9028	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.902b	60		rts				rts
.902c					AddInteger:
.902c	fa		plx				plx
.902d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9030	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9033	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9034	0a		asl a				asl 	a
.9035	10 05		bpl $903c			bpl 	_NotRef
.9037	48		pha				pha
.9038	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.903b	68		pla				pla
.903c					_NotRef:
.903c	0a		asl a				asl 	a 							; put MSB of type into A:7
.903d	30 0b		bmi $904a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.903f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9042	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9045	f0 06		beq $904d			beq 	_IntegerCode 				; if clear, then we have two integers
.9047	4c db a2	jmp $a2db			jmp 	FloatingPointAdd 							; otherwise at least one float.
.904a					_StringData:
.904a	4c ff 8e	jmp $8eff			jmp 	StringConcat							; at least one string - don't know both are strings.
.904d					_IntegerCode:
.904d					AddCode:
.904d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9050	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9053	10 8b		bpl $8fe0			bpl 	AddTopTwoStack
.9055	20 06 90	jsr $9006			jsr 	SubTopTwoStack 				; do a physical subtraction
.9058	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.905b	10 09		bpl $9066			bpl 	_AddExit
.905d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9060	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9063	20 58 99	jsr $9958			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9066					_AddExit:
.9066	60		rts				rts
.9067					SubInteger:
.9067	fa		plx				plx
.9068	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.906b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.906e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.906f	0a		asl a				asl 	a
.9070	10 05		bpl $9077			bpl 	_NotRef
.9072	48		pha				pha
.9073	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9076	68		pla				pla
.9077					_NotRef:
.9077	0a		asl a				asl 	a 							; put MSB of type into A:7
.9078	30 0b		bmi $9085			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.907a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.907d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9080	f0 06		beq $9088			beq 	_IntegerCode 				; if clear, then we have two integers
.9082	4c e0 a2	jmp $a2e0			jmp 	FloatingPointSub 							; otherwise at least one float.
.9085					_StringData:
.9085	4c 1e a7	jmp $a71e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9088					_IntegerCode:
.9088	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.908b	49 80		eor #$80			eor 	#$80
.908d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9090	80 bb		bra $904d			bra 	AddCode 					; and do the same code as add.
.9092					AndInteger:
.9092	fa		plx				plx
.9093	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9096	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9099	0a		asl a				asl 	a 							; shift reference bit into sign bit
.909a	0a		asl a				asl 	a
.909b	10 05		bpl $90a2			bpl 	_NotRef
.909d	48		pha				pha
.909e	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90a1	68		pla				pla
.90a2					_NotRef:
.90a2	0a		asl a				asl 	a
.90a3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90a5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90a8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90ab	f0 03		beq $90b0			beq 	_IntegerCode 				; if clear, then we have two integers
.90ad	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.90b0					_IntegerCode:
.90b0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90b3	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.90b6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90b9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90bc	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.90bf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90c2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90c5	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.90c8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90cb	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90ce	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.90d1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90d4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.90d7	60		rts				rts
.90d8					OraInteger:
.90d8	fa		plx				plx
.90d9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90dc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90df	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90e0	0a		asl a				asl 	a
.90e1	10 05		bpl $90e8			bpl 	_NotRef
.90e3	48		pha				pha
.90e4	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90e7	68		pla				pla
.90e8					_NotRef:
.90e8	0a		asl a				asl 	a
.90e9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90eb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90ee	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90f1	f0 03		beq $90f6			beq 	_IntegerCode 				; if clear, then we have two integers
.90f3	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.90f6					_IntegerCode:
.90f6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.90f9	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.90fc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.90ff	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9102	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9105	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9108	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.910b	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.910e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9111	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9114	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9117	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.911a	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.911d	60		rts				rts
.911e					EorInteger:
.911e	fa		plx				plx
.911f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9122	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9125	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9126	0a		asl a				asl 	a
.9127	10 05		bpl $912e			bpl 	_NotRef
.9129	48		pha				pha
.912a	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.912d	68		pla				pla
.912e					_NotRef:
.912e	0a		asl a				asl 	a
.912f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9131	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9134	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9137	f0 03		beq $913c			beq 	_IntegerCode 				; if clear, then we have two integers
.9139	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.913c					_IntegerCode:
.913c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.913f	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9142	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9145	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9148	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.914b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.914e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9151	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9154	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9157	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.915a	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.915d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9160	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9163	60		rts				rts
.9164					WordIndirect:
.9164	fa		plx				plx
.9165	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9168	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.916b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.916c	0a		asl a				asl 	a
.916d	10 05		bpl $9174			bpl 	_NotRef
.916f	48		pha				pha
.9170	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9173	68		pla				pla
.9174					_NotRef:
.9174	0a		asl a				asl 	a
.9175	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9177	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.917a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.917d	f0 03		beq $9182			beq 	_IntegerCode 				; if clear, then we have two integers
.917f	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.9182					_IntegerCode:
.9182	20 4d 90	jsr $904d			jsr 	AddCode 					; add the two values
.9185	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9187	9d 00 04	sta $0400,x			sta 	NSStatus,x
.918a	60		rts				rts
.918b					ByteIndirect:
.918b	fa		plx				plx
.918c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.918f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9192	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9193	0a		asl a				asl 	a
.9194	10 05		bpl $919b			bpl 	_NotRef
.9196	48		pha				pha
.9197	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.919a	68		pla				pla
.919b					_NotRef:
.919b	0a		asl a				asl 	a
.919c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.919e	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91a1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91a4	f0 03		beq $91a9			beq 	_IntegerCode 				; if clear, then we have two integers
.91a6	4c 14 a7	jmp $a714			jmp 	TypeError 					; anything else, type mismatch.
.91a9					_IntegerCode:
.91a9	20 4d 90	jsr $904d			jsr 	AddCode 					; add the two values
.91ac	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.91ae	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a280					ConvertInt16:
.a280	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a283	8e 10 04	stx $0410			stx 	NSMantissa1
.a286	9c 18 04	stz $0418			stz 	NSMantissa2
.a289	9c 20 04	stz $0420			stz 	NSMantissa3
.a28c	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a28f	a2 00		ldx #$00			ldx 	#0 							; stack level
.a291	a9 0a		lda #$0a			lda 	#10 						; base
.a293	80 00		bra $a295			bra 	ConvertInt32
.a295					ConvertInt32:
.a295	5a		phy				phy
.a296	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a298	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a29b	10 08		bpl $a2a5			bpl 	_CI32NotNeg
.a29d	48		pha				pha
.a29e	a9 2d		lda #$2d			lda 	#'-'
.a2a0	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a2a3	c8		iny				iny
.a2a4	68		pla				pla
.a2a5					_CI32NotNeg:
.a2a5	20 b3 a2	jsr $a2b3			jsr 	_CI32DivideConvert 			; recursive conversion
.a2a8	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a2aa	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a2ad	7a		ply				ply
.a2ae	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a2b0	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a2b2	60		rts				rts
.a2b3					_CI32DivideConvert:
.a2b3	e8		inx				inx 								; write to next slot up
.a2b4	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.a2b7	ca		dex				dex
.a2b8	20 b5 a1	jsr $a1b5			jsr 	Int32Divide 				; divide
.a2bb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a2be	48		pha				pha
.a2bf	20 64 a1	jsr $a164			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a2c2	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; is it zero ?
.a2c5	f0 06		beq $a2cd			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a2c7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a2ca	20 b3 a2	jsr $a2b3			jsr 	_CI32DivideConvert 			; and recusrively call.
.a2cd					_CI32NoRecurse:
.a2cd	68		pla				pla 								; remainder
.a2ce	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a2d0	90 02		bcc $a2d4			bcc 	_CI32NotHex
.a2d2	69 26		adc #$26			adc 	#6+32
.a2d4					_CI32NotHex:
.a2d4	69 30		adc #$30			adc 	#48
.a2d6	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a2d9	c8		iny				iny
.a2da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.91b2					PrecedenceLevel:
>91b2	04					.byte	 4	; $00 <<
>91b3	02					.byte	 2	; $01 <=
>91b4	02					.byte	 2	; $02 <>
>91b5	00					.byte	 0	; $03 !!3
>91b6	00					.byte	 0	; $04 ><
>91b7	02					.byte	 2	; $05 >=
>91b8	04					.byte	 4	; $06 >>
>91b9	00					.byte	 0	; $07 !!7
>91ba	00					.byte	 0	; $08 !!8
>91bb	00					.byte	 0	; $09 !!9
>91bc	00					.byte	 0	; $0a !!10
>91bd	00					.byte	 0	; $0b !!11
>91be	00					.byte	 0	; $0c !!12
>91bf	00					.byte	 0	; $0d !!13
>91c0	00					.byte	 0	; $0e !!14
>91c1	00					.byte	 0	; $0f !!15
>91c2	00					.byte	 0	; $10 @
>91c3	00					.byte	 0	; $11 !!17
>91c4	00					.byte	 0	; $12 !!18
>91c5	00					.byte	 0	; $13 [
>91c6	04					.byte	 4	; $14 \
>91c7	00					.byte	 0	; $15 ]
>91c8	01					.byte	 1	; $16 ^
>91c9	00					.byte	 0	; $17 _
>91ca	00					.byte	 0	; $18 `
>91cb	00					.byte	 0	; $19 !!25
>91cc	00					.byte	 0	; $1a !!26
>91cd	00					.byte	 0	; $1b {
>91ce	01					.byte	 1	; $1c |
>91cf	00					.byte	 0	; $1d }
>91d0	00					.byte	 0	; $1e ~
>91d1	00					.byte	 0	; $1f [7m<7F>[m
>91d2	00					.byte	 0	; $20
>91d3	05					.byte	 5	; $21 !
>91d4	00					.byte	 0	; $22 "
>91d5	00					.byte	 0	; $23 #
>91d6	05					.byte	 5	; $24 $
>91d7	04					.byte	 4	; $25 %
>91d8	01					.byte	 1	; $26 &
>91d9	00					.byte	 0	; $27 '
>91da	00					.byte	 0	; $28 (
>91db	00					.byte	 0	; $29 )
>91dc	04					.byte	 4	; $2a *
>91dd	03					.byte	 3	; $2b +
>91de	00					.byte	 0	; $2c ,
>91df	03					.byte	 3	; $2d -
>91e0	00					.byte	 0	; $2e .
>91e1	04					.byte	 4	; $2f /
>91e2	00					.byte	 0	; $30 0
>91e3	00					.byte	 0	; $31 1
>91e4	00					.byte	 0	; $32 2
>91e5	00					.byte	 0	; $33 3
>91e6	00					.byte	 0	; $34 4
>91e7	00					.byte	 0	; $35 5
>91e8	00					.byte	 0	; $36 6
>91e9	00					.byte	 0	; $37 7
>91ea	00					.byte	 0	; $38 8
>91eb	00					.byte	 0	; $39 9
>91ec	00					.byte	 0	; $3a :
>91ed	00					.byte	 0	; $3b ;
>91ee	02					.byte	 2	; $3c <
>91ef	02					.byte	 2	; $3d =
>91f0	02					.byte	 2	; $3e >
>91f1	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.91f2					EvaluateExpressionAt0:
.91f2	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.91f4					EvaluateExpression:
.91f4	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.91f6					EvaluateExpressionAtPrecedence:
.91f6	48		pha				pha 								; save precedence level
.91f7	20 c5 94	jsr $94c5			jsr 	EvaluateTerm 				; evaluate term into level X.
.91fa	68		pla				pla 								; restore precedence level.
.91fb					_EXPRLoop:
.91fb	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.91fd	b1 30		lda ($30),y			lda 	(codePtr),y
.91ff	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9201	b0 25		bcs $9228			bcs 	_EXPRExit
.9203	da		phx				phx 								; read the operator precedence
.9204	aa		tax				tax
.9205	bd b2 91	lda $91b2,x			lda 	PrecedenceLevel,x
.9208	fa		plx				plx
.9209	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.920b	f0 1b		beq $9228			beq 	_EXPRExit
.920d	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.920f	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9211	c5 37		cmp $37				cmp 	zTemp0+1
.9213	b0 13		bcs $9228			bcs		_EXPRExit 					; if current >= operator exit
.9215	48		pha				pha 								; save current precedence.
.9216	b1 30		lda ($30),y			lda 	(codePtr),y
.9218	c8		iny				iny
.9219	48		pha				pha
.921a	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.921c	e8		inx				inx 								; work out the right hand side.
.921d	20 f6 91	jsr $91f6			jsr 	EvaluateExpressionAtPrecedence
.9220	ca		dex				dex
.9221	68		pla				pla 								; get operator, call the code.
.9222	20 2b 92	jsr $922b			jsr 	_EXPRCaller
.9225	68		pla				pla 								; restore precedence level
.9226	80 d3		bra $91fb			bra 	_EXPRLoop 					; and go round.
.9228					_EXPRExit:
.9228	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.922a	60		rts				rts
.922b					_EXPRCaller:
.922b	da		phx				phx 								; save on stack, first thing is to restore it
.922c	0a		asl a				asl 	a 							; double so can use vectors into X
.922d	aa		tax				tax
.922e	7c 32 8a	jmp ($8a32,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a2db					FloatingPointAdd:
.a2db	20 7c a4	jsr $a47c			jsr 	FloatPrepare 				; prepare for floats
.a2de	80 0b		bra $a2eb			bra 	FloatAdd
.a2e0					FloatingPointSub:
.a2e0	20 7c a4	jsr $a47c			jsr 	FloatPrepare 				; prepare for floats
.a2e3					FloatSubtract:
.a2e3	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a2e6	49 80		eor #$80			eor 	#$80
.a2e8	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a2eb					FloatAdd:
.a2eb	48		pha				pha
.a2ec	5a		phy				phy
.a2ed	20 8d a4	jsr $a48d			jsr 	NSNormalise 				; normalise S[X]
.a2f0	f0 54		beq $a346			beq 	_FAReturn1
.a2f2	e8		inx				inx 								; normalise S[X+1]
.a2f3	20 8d a4	jsr $a48d			jsr 	NSNormalise
.a2f6	ca		dex				dex
.a2f7	c9 00		cmp #$00			cmp 	#0
.a2f9	f0 6f		beq $a36a			beq 	_FAExit 					; if so, just return A
.a2fb	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a2fe	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a301	f0 1b		beq $a31e			beq 	_FAExponentsEqual
.a303	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a306	a8		tay				tay
.a307	38		sec				sec 								; do a signed comparison of the exponents.
.a308	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a30b	50 02		bvc $a30f			bvc 	_FANoSignedChange
.a30d	49 80		eor #$80			eor 	#$80
.a30f					_FANoSignedChange:
.a30f	29 80		and #$80			and 	#$80
.a311	10 03		bpl $a316			bpl 	_FAHaveMax
.a313	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a316					_FAHaveMax:
.a316	20 6d a3	jsr $a36d			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a319	e8		inx				inx
.a31a	20 6d a3	jsr $a36d			jsr 	_FAShiftToExponent
.a31d	ca		dex				dex
.a31e					_FAExponentsEqual:
.a31e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a321	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a324	30 10		bmi $a336			bmi 	_FADifferentSigns
.a326	20 e0 8f	jsr $8fe0			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a329	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a32c	10 3c		bpl $a36a			bpl 	_FAExit 					; if no, we are done.
.a32e	20 c6 99	jsr $99c6			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a331	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a334	80 34		bra $a36a			bra 	_FAExit
.a336					_FADifferentSigns:
.a336	20 06 90	jsr $9006			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a339	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a33c	10 2c		bpl $a36a			bpl 	_FAExit 					; if no, we are done.
.a33e	20 4f 99	jsr $994f			jsr 	NSMNegate 					; netate result
.a341	20 58 99	jsr $9958			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a344	80 24		bra $a36a			bra 	_FAExit
.a346					_FAReturn1:
.a346	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a349	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a34c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a34f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a352	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a355	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a358	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a35b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a35e	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a361	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a364	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a367	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a36a					_FAExit:
.a36a	7a		ply				ply
.a36b	68		pla				pla
.a36c	60		rts				rts
.a36d					_FAShiftToExponent:
.a36d					_FAShiftToExponent2:
.a36d	98		tya				tya 								; compare Y to exponent
.a36e	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a371	f0 08		beq $a37b			beq 	_FASEExit 					; exit if so.
.a373	20 c6 99	jsr $99c6			jsr 	NSMShiftRight	 			; shift the mantissa right
.a376	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a379	80 f2		bra $a36d			bra 	_FAShiftToExponent2
.a37b					_FASEExit:
.a37b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a37c					CompareFloat:
.a37c	20 e3 a2	jsr $a2e3			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a37f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a382	29 f8		and #$f8			and 	#$F8
.a384	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a387	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a38a	f0 09		beq $a395			beq 	_FCExit 					; zero, so approximately identical
.a38c	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a38e	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a391	10 02		bpl $a395			bpl 	_FCExit
.a393					_FCNegative:
.a393	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a395					_FCExit:
.a395	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a396					FDivideCommand:
.a396	fa		plx				plx	 								; restore stack position
.a397	20 7c a4	jsr $a47c			jsr 	FloatPrepare 				; prepare for floats
.a39a					FloatDivide:
.a39a	48		pha				pha
.a39b	e8		inx				inx
.a39c	20 8d a4	jsr $a48d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a39f	ca		dex				dex
.a3a0	c9 00		cmp #$00			cmp 	#0
.a3a2	f0 20		beq $a3c4			beq 	_FDZero
.a3a4	20 8d a4	jsr $a48d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a3a7	f0 19		beq $a3c2			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a3a9	20 d7 a1	jsr $a1d7			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a3ac	20 64 a1	jsr $a164			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a3af	20 8d a4	jsr $a48d			jsr		NSNormalise 				; renormalise
.a3b2	20 72 a2	jsr $a272			jsr 	CalculateSign 				; calculate result sign
.a3b5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a3b8	38		sec				sec
.a3b9	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a3bc	38		sec				sec
.a3bd	e9 1e		sbc #$1e			sbc 	#30
.a3bf	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a3c2					_FDExit:
.a3c2	68		pla				pla
.a3c3	60		rts				rts
.a3c4					_FDZero:
.a3c4	a9 03		lda #$03		lda	#3
.a3c6	4c eb 8d	jmp $8deb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a3c9					FloatFractionalPart:
.a3c9	5a		phy				phy
.a3ca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a3cd	29 7f		and #$7f			and 	#$7F
.a3cf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3d2	20 8d a4	jsr $a48d			jsr 	NSNormalise
.a3d5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a3d8	38		sec				sec
.a3d9	e9 e0		sbc #$e0			sbc 	#$E0
.a3db	90 31		bcc $a40e			bcc 	_FFPExit 					; already fractional
.a3dd	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a3df	b0 2a		bcs $a40b			bcs 	_FFPZero
.a3e1	a8		tay				tay 								; put count to do in Y
.a3e2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a3e5	20 10 a4	jsr $a410			jsr 	_FFPPartial
.a3e8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a3eb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3ee	20 10 a4	jsr $a410			jsr 	_FFPPartial
.a3f1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3f4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3f7	20 10 a4	jsr $a410			jsr 	_FFPPartial
.a3fa	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3fd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a400	20 10 a4	jsr $a410			jsr 	_FFPPartial
.a403	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a406	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; zeroed check.
.a409	d0 03		bne $a40e			bne 	_FFPExit
.a40b					_FFPZero:
.a40b	20 a3 99	jsr $99a3			jsr 	NSMSetZero
.a40e					_FFPExit:
.a40e	7a		ply				ply
.a40f	60		rts				rts
.a410					_FFPPartial:
.a410	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a412	f0 17		beq $a42b			beq 	_FFFPPExit
.a414	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a416	b0 0c		bcs $a424			bcs 	_FFFPPWholeByte
.a418	5a		phy				phy
.a419					_FFFPPLeft:
.a419	0a		asl a				asl 	a
.a41a	88		dey				dey
.a41b	d0 fc		bne $a419			bne 	_FFFPPLeft
.a41d	7a		ply				ply
.a41e					_FFFPPRight:
.a41e	4a		lsr a				lsr 	a
.a41f	88		dey				dey
.a420	d0 fc		bne $a41e			bne 	_FFFPPRight
.a422	80 07		bra $a42b			bra 	_FFFPPExit
.a424					_FFFPPWholeByte:
.a424	98		tya				tya 								; subtract 8 from count
.a425	38		sec				sec
.a426	e9 08		sbc #$08			sbc 	#8
.a428	a8		tay				tay
.a429	a9 00		lda #$00			lda 	#0 							; and clear all
.a42b					_FFFPPExit:
.a42b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a42c					FloatIntegerPart:
.a42c	48		pha				pha
.a42d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a430	f0 1f		beq $a451			beq 	_FIPExit 					; if so do nothing
.a432	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; is it zero ?
.a435	f0 17		beq $a44e			beq 	_FIPZero 					; if so return zero.
.a437	20 8d a4	jsr $a48d			jsr 	NSNormalise 				; normalise
.a43a	f0 12		beq $a44e			beq 	_FIPZero 					; normalised to zero, exit zero
.a43c					_FIPShift:
.a43c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a43f	10 08		bpl $a449			bpl 	_FIPCheckZero
.a441	20 c6 99	jsr $99c6			jsr 	NSMShiftRight 				; shift mantissa right
.a444	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a447	80 f3		bra $a43c			bra 	_FIPShift
.a449					_FIPCheckZero:
.a449	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; avoid -0 problem
.a44c	d0 03		bne $a451			bne 	_FIPExit 					; set to zero if mantissa zero.
.a44e					_FIPZero:
.a44e	20 a3 99	jsr $99a3			jsr 	NSMSetZero
.a451					_FIPExit:
.a451	68		pla				pla
.a452	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a453					FloatingPointMultiply:
.a453	20 7c a4	jsr $a47c			jsr 	FloatPrepare 				; prepare for floats
.a456					FloatMultiply:
.a456	48		pha				pha
.a457	20 8d a4	jsr $a48d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a45a	f0 1b		beq $a477			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a45c	e8		inx				inx
.a45d	20 8d a4	jsr $a48d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a460	ca		dex				dex
.a461	c9 00		cmp #$00			cmp 	#0
.a463	f0 0f		beq $a474			beq 	_FDSetZero
.a465	20 2d a2	jsr $a22d			jsr 	MultiplyShort 				; calculate the result.
.a468	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a46b	18		clc				clc
.a46c	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a46f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a472	80 03		bra $a477			bra 	_FDExit
.a474					_FDSetZero:
.a474	20 a3 99	jsr $99a3			jsr 	NSMSetZero 					; return 0
.a477					_FDExit:
.a477	20 8d a4	jsr $a48d			jsr 	NSNormalise 				; normalise the result
.a47a	68		pla				pla
.a47b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a47c					FloatPrepare:
.a47c	20 04 93	jsr $9304			jsr 	DereferenceTopTwo 			; dereference the top two values
.a47f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a482	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a485	29 10		and #$10			and 	#NSBIsString
.a487	d0 01		bne $a48a			bne 	_FDType
.a489	60		rts				rts
.a48a					_FDType:
.a48a	4c 14 a7	jmp $a714			jmp 	TypeError
.a48d					NSNormalise:
.a48d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a490	29 80		and #$80			and 	#$80
.a492	09 08		ora #$08			ora 	#NSTFloat
.a494	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a497	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; if zero exit
.a49a	d0 09		bne $a4a5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a49c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a49f	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a4a2	a9 00		lda #$00			lda 	#0 							; set Z flag
.a4a4	60		rts				rts
.a4a5					_NSNormaliseOptimise:
.a4a5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a4a8	d0 22		bne $a4cc			bne 	_NSNormaliseLoop
.a4aa	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a4ad	30 1d		bmi $a4cc			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a4af	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4b2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4b5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a4b8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4bb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a4be	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a4c1	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a4c4	38		sec				sec
.a4c5	e9 08		sbc #$08			sbc 	#8
.a4c7	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a4ca	80 d9		bra $a4a5			bra 	_NSNormaliseOptimise
.a4cc					_NSNormaliseLoop:
.a4cc	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a4cf	70 08		bvs $a4d9			bvs 	_NSNExit 					; exit if so with Z flag clear
.a4d1	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; shift mantissa left
.a4d4	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a4d7	80 f3		bra $a4cc			bra 	_NSNormaliseLoop
.a4d9					_NSNExit:
.a4d9	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a4db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9231					AssignNumber:
.9231	5a		phy				phy
.9232	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9235	85 36		sta $36				sta 	zTemp0
.9237	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.923a	85 37		sta $37				sta 	zTemp0+1
.923c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.923f	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9241	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9244	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9246	c9 08		cmp #$08			cmp 	#NSTFloat
.9248	f0 2a		beq $9274			beq 	_ANFloat
.924a	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.924d	f0 05		beq $9254			beq		_ANNotFloat
.924f	e8		inx				inx
.9250	20 2c a4	jsr $a42c			jsr 	FloatIntegerPart 			; make it an integer
.9253	ca		dex				dex
.9254					_ANNotFloat:
.9254	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9257	29 03		and #$03			and 	#3
.9259	d0 05		bne $9260			bne 	_ANByteWord
.925b	20 80 92	jsr $9280			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.925e	80 1e		bra $927e			bra 	_ANExit
.9260					_ANByteWord:
.9260	48		pha				pha 								; save count
.9261	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9264	92 36		sta ($36)			sta 	(zTemp0)
.9266	68		pla				pla
.9267	c9 01		cmp #$01			cmp	 	#1
.9269	f0 13		beq $927e			beq 	_ANExit
.926b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.926e	a0 01		ldy #$01			ldy 	#1
.9270	91 36		sta ($36),y			sta 	(zTemp0),y
.9272	80 0a		bra $927e			bra 	_ANExit
.9274					_ANFloat:
.9274	20 80 92	jsr $9280			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9277	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.927a	a0 04		ldy #$04			ldy 	#4
.927c	91 36		sta ($36),y			sta 	(zTemp0),y
.927e					_ANExit:
.927e	7a		ply				ply
.927f	60		rts				rts
.9280					_ANCopy4PackSign:
.9280	a0 03		ldy #$03			ldy 	#3
.9282	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9285	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9287	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.928a	91 36		sta ($36),y			sta 	(zTemp0),y
.928c	88		dey				dey
.928d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9290	91 36		sta ($36),y			sta 	(zTemp0),y
.9292	88		dey				dey
.9293	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9296	91 36		sta ($36),y			sta 	(zTemp0),y
.9298	88		dey				dey
.9299	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.929c	91 36		sta ($36),y			sta 	(zTemp0),y
.929e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.929f					AssignString:
.929f	5a		phy				phy
.92a0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.92a3	85 38		sta $38				sta 	zTemp1
.92a5	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.92a8	85 39		sta $39				sta 	zTemp1+1
.92aa	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.92ad	85 36		sta $36				sta 	zTemp0
.92af	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92b2	85 37		sta $37				sta 	zTemp0+1
.92b4	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.92b6	b1 36		lda ($36),y			lda 	(zTemp0),y
.92b8	f0 23		beq $92dd			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.92ba	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.92bb	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.92bd	e9 02		sbc #$02			sbc 	#2
.92bf	85 3c		sta $3c				sta 	zsTemp
.92c1	a0 01		ldy #$01			ldy 	#1
.92c3	b1 36		lda ($36),y			lda 	(zTemp0),y
.92c5	e9 00		sbc #$00			sbc 	#0
.92c7	85 3d		sta $3d				sta 	zsTemp+1
.92c9	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.92cb					_ASGetLength:
.92cb	c8		iny				iny
.92cc	b1 38		lda ($38),y			lda 	(zTemp1),y
.92ce	d0 fb		bne $92cb			bne 	_ASGetLength
.92d0	98		tya				tya 								; is this length <= current length
.92d1	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.92d3	90 20		bcc $92f5			bcc 	_ASCopyString
.92d5	f0 1e		beq $92f5			beq 	_ASCopyString
.92d7	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.92d9	a0 01		ldy #$01			ldy 	#1
.92db	91 3c		sta ($3c),y			sta 	(zsTemp),y
.92dd					_ASNewStringRequired:
.92dd	e8		inx				inx 								; concrete the new string.
.92de	20 ae a9	jsr $a9ae			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.92e1	ca		dex				dex
.92e2	18		clc				clc
.92e3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.92e6	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.92e8	92 36		sta ($36)			sta 	(zTemp0)
.92ea	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.92ed	69 00		adc #$00			adc 	#0
.92ef	a0 01		ldy #$01			ldy 	#1
.92f1	91 36		sta ($36),y			sta 	(zTemp0),y
.92f3	80 0d		bra $9302			bra 	_ASExit
.92f5					_ASCopyString:
.92f5	a0 00		ldy #$00			ldy 	#0
.92f7					_ASCopyLoop:
.92f7	b1 38		lda ($38),y			lda 	(zTemp1),y
.92f9	c8		iny				iny
.92fa	c8		iny				iny
.92fb	91 3c		sta ($3c),y			sta 	(zsTemp),y
.92fd	88		dey				dey
.92fe	c9 00		cmp #$00			cmp 	#0
.9300	d0 f5		bne $92f7			bne 	_ASCopyLoop
.9302					_ASExit:
.9302	7a		ply				ply
.9303	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9304					DereferenceTopTwo:
.9304	e8		inx				inx
.9305	20 09 93	jsr $9309			jsr 	Dereference 				; deref x+1
.9308	ca		dex				dex  								; falls through to deref x
.9309					Dereference:
.9309	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.930c	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.930e	f0 57		beq $9367			beq 	_DRFExit 					; not a reference
.9310	5a		phy				phy
.9311	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9314	85 36		sta $36				sta 	zTemp0
.9316	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9319	85 37		sta $37				sta 	zTemp0+1
.931b	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.931e	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9320	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9323	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9326	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9328	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.932a	f0 0f		beq $933b			beq 	_DRFDereferenceTwo
.932c	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.932e	f0 39		beq $9369			beq 	_DRFFull
.9330	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9333	29 03		and #$03			and 	#3
.9335	f0 32		beq $9369			beq 	_DRFFull 					; the whole word
.9337	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9339	f0 07		beq $9342			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.933b					_DRFDereferenceTwo:
.933b	a0 01		ldy #$01			ldy 	#1
.933d	b1 36		lda ($36),y			lda 	(zTemp0),y
.933f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9342					_DRFClear23:
.9342	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9345	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9348	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.934b	29 18		and #$18			and 	#NSBTypeMask
.934d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9350	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9352	d0 12		bne $9366			bne 	_DRFNotString
.9354	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9357	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.935a	d0 0a		bne $9366			bne 	_DRFNotString
.935c	a9 68		lda #$68			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.935e	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9361	a9 93		lda #$93			lda 	#_DRFNullString >> 8
.9363	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9366					_DRFNotString
.9366	7a		ply				ply 								; restore Y and exit
.9367					_DRFExit:
.9367	60		rts				rts
.9368					_DRFNullString:
>9368	00						.byte 	0
.9369					_DRFFull:
.9369	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.936b	b1 36		lda ($36),y			lda 	(zTemp0),y
.936d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9370	c8		iny				iny
.9371	b1 36		lda ($36),y			lda 	(zTemp0),y
.9373	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9376	c8		iny				iny
.9377	b1 36		lda ($36),y			lda 	(zTemp0),y
.9379	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.937c	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.937f	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9382	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9384	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9387	f0 06		beq $938f			beq 	_DRFNoExponent
.9389	c8		iny				iny 								; if not, read the exponent as well.
.938a	b1 36		lda ($36),y			lda 	(zTemp0),y
.938c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.938f					_DRFNoExponent:
.938f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9392	10 0d		bpl $93a1			bpl 	_DRFExit2 					; if not, then exit.
.9394	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9396	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9399	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.939c	09 80		ora #$80			ora 	#NSBIsNegative
.939e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93a1					_DRFExit2:
.93a1	7a		ply				ply
.93a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.93a3					EncodeNumberStart:
.93a3	38		sec				sec
.93a4	80 01		bra $93a7			bra 	EncodeNumberContinue+1
.93a6					EncodeNumberContinue:
.93a6	18		clc				clc
.93a7					EncodeNumber:
.93a7	08		php				php 								; save reset.
.93a8	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.93aa	f0 12		beq $93be			beq 	_ENIsOkay
.93ac	c9 30		cmp #$30			cmp 	#"0"
.93ae	90 04		bcc $93b4			bcc 	_ENBadNumber
.93b0	c9 3a		cmp #$3a			cmp 	#"9"+1
.93b2	90 0a		bcc $93be			bcc 	_ENIsOkay
.93b4					_ENBadNumber:
.93b4	28		plp				plp 								; throw saved reset
.93b5	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.93b8	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.93ba	f0 7e		beq $943a			beq 	_ENConstructFinal
.93bc					_ENFail:
.93bc	18		clc				clc 								; not allowed
.93bd	60		rts				rts
.93be					_ENIsOkay:
.93be	28		plp				plp 								; are we restarting
.93bf	90 15		bcc $93d6			bcc 	_ENNoRestart
.93c1					_ENStartEncode:
.93c1	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.93c3	f0 0c		beq $93d1			beq 	_ENFirstDP
.93c5	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.93c7	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.93ca	a9 01		lda #$01			lda 	#ESTA_Low
.93cc					_ENExitChange:
.93cc	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.93cf	38		sec				sec
.93d0	60		rts				rts
.93d1					_ENFirstDP:
.93d1	20 a3 99	jsr $99a3			jsr 	NSMSetZero 					; clear integer part
.93d4	80 3f		bra $9415			bra 	_ESTASwitchFloat			; go straight to float and exi
.93d6					_ENNoRestart:
.93d6	48		pha				pha 								; save on stack.
.93d7	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.93da	c9 01		cmp #$01			cmp 	#ESTA_Low
.93dc	f0 09		beq $93e7			beq  	_ESTALowState
.93de	c9 02		cmp #$02			cmp 	#ESTA_High
.93e0	f0 29		beq $940b			beq 	_ESTAHighState
.93e2	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.93e4	f0 3b		beq $9421			beq 	_ESTADecimalState
>93e6	db						.byte 	$DB 						; causes a break in the emulator
.93e7					_ESTALowState:
.93e7	68		pla				pla 								; get value back
.93e8	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.93ea	f0 29		beq $9415			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.93ec	29 0f		and #$0f			and 	#15 						; make digit
.93ee	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.93f1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.93f4	0a		asl a				asl 	a
.93f5	0a		asl a				asl 	a
.93f6	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.93f9	0a		asl a				asl 	a
.93fa	6d 86 04	adc $0486			adc 	DigitTemp
.93fd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9400	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9402	90 05		bcc $9409			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9404	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9406	8d 85 04	sta $0485			sta 	EncodeState
.9409					_ESTANoSwitch:
.9409	38		sec				sec
.940a	60		rts				rts
.940b					_ESTAHighState:
.940b	68		pla				pla 								; get value back
.940c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.940e	f0 05		beq $9415			beq 	_ESTASwitchFloat
.9410	20 74 94	jsr $9474			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9413	38		sec				sec
.9414	60		rts				rts
.9415					_ESTASwitchFloat:
.9415	9c 87 04	stz $0487			stz 	DecimalCount
.9418	e8		inx				inx 								; zero the decimal additive.
.9419	20 a3 99	jsr $99a3			jsr 	NSMSetZero
.941c	ca		dex				dex
.941d	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.941f	80 ab		bra $93cc			bra 	_ENExitChange
.9421					_ESTADecimalState:
.9421	68		pla				pla 								; digit.
.9422	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9424	f0 96		beq $93bc			beq 	_ENFail
.9426	e8		inx				inx 								; put digit into fractional part of X+1
.9427	20 74 94	jsr $9474			jsr 	ESTAShiftDigitIntoMantissa
.942a	ca		dex				dex
.942b	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.942e	ad 87 04	lda $0487			lda 	DecimalCount
.9431	c9 0b		cmp #$0b			cmp 	#11
.9433	f0 02		beq $9437			beq 	_ESTADSFail
.9435	38		sec				sec
.9436	60		rts				rts
.9437					_ESTADSFail:
.9437	4c 0f a7	jmp $a70f			jmp 	RangeError
.943a					_ENConstructFinal:
.943a	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.943d	f0 33		beq $9472			beq 	_ENCFExit 					; no decimals
.943f	5a		phy				phy
.9440	0a		asl a				asl 	a 							; x 4 and CLC
.9441	0a		asl a				asl 	a
.9442	6d 87 04	adc $0487			adc 	DecimalCount
.9445	a8		tay				tay
.9446	b9 ce a6	lda $a6ce,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9449	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.944c	b9 cf a6	lda $a6cf,y			lda 	DecimalScalarTable-5+1,y
.944f	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9452	b9 d0 a6	lda $a6d0,y			lda 	DecimalScalarTable-5+2,y
.9455	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9458	b9 d1 a6	lda $a6d1,y			lda 	DecimalScalarTable-5+3,y
.945b	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.945e	b9 d2 a6	lda $a6d2,y			lda 	DecimalScalarTable-5+4,y
.9461	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9464	a9 08		lda #$08			lda 	#NSTFloat
.9466	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9469	7a		ply				ply
.946a	e8		inx				inx 								; multiply decimal const by decimal scalar
.946b	20 56 a4	jsr $a456			jsr 	FloatMultiply
.946e	ca		dex				dex
.946f	20 eb a2	jsr $a2eb			jsr 	FloatAdd 					; add to integer part.
.9472					_ENCFExit:
.9472	18		clc				clc 								; reject the digit.
.9473	60		rts				rts
.9474					ESTAShiftDigitIntoMantissa:
.9474	29 0f		and #$0f			and 	#15 						; save digit
.9476	48		pha				pha
.9477	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.947a	48		pha				pha
.947b	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.947e	48		pha				pha
.947f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9482	48		pha				pha
.9483	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9486	48		pha				pha
.9487	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; x 2
.948a	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; x 4
.948d	18		clc				clc 								; pop mantissa and add
.948e	68		pla				pla
.948f	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9492	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9495	68		pla				pla
.9496	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9499	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.949c	68		pla				pla
.949d	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.94a0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94a3	68		pla				pla
.94a4	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.94a7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.94aa	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; x 10
.94ad	68		pla				pla 								; add digit
.94ae	18		clc				clc
.94af	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.94b2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94b5	90 0d		bcc $94c4			bcc 	_ESTASDExit
.94b7	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.94ba	d0 08		bne $94c4			bne 	_ESTASDExit
.94bc	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.94bf	d0 03		bne $94c4			bne 	_ESTASDExit
.94c1	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.94c4					_ESTASDExit:
.94c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.94c5					EvaluateTerm:
.94c5	b1 30		lda ($30),y			lda 	(codePtr),y
.94c7	30 18		bmi $94e1			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.94c9	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.94cb	b0 6f		bcs $953c			bcs 	_ETVariable
.94cd	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.94cf	90 6e		bcc $953f			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.94d1	c9 3a		cmp #$3a			cmp 	#'9'+1
.94d3	b0 6a		bcs $953f			bcs 	_ETPuncUnary
.94d5	20 a3 93	jsr $93a3			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.94d8					_ETNumber:
.94d8	c8		iny				iny 								; keep encoding until we have the numbers
.94d9	b1 30		lda ($30),y			lda 	(codePtr),y
.94db	20 a6 93	jsr $93a6			jsr 	EncodeNumberContinue
.94de	b0 f8		bcs $94d8			bcs 	_ETNumber 					; go back if accepted.
.94e0	60		rts				rts
.94e1					_ETCheckUnary:
.94e1	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.94e3	f0 41		beq $9526			beq 	_ETString
.94e5	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.94e7	f0 12		beq $94fb			beq 	_ETHexConstant
.94e9	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.94eb	90 0b		bcc $94f8			bcc 	_ETSyntaxError
.94ed	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.94ef	b0 07		bcs $94f8			bcs 	_ETSyntaxError
.94f1	da		phx				phx 								; push X on the stack
.94f2	0a		asl a				asl 	a 							; put vector x 2 into X
.94f3	aa		tax				tax
.94f4	c8		iny				iny 								; consume unary function token
.94f5	7c b2 8a	jmp ($8ab2,x)			jmp 	(VectorSet0,x) 				; and do it.
.94f8					_ETSyntaxError:
.94f8	4c 0a a7	jmp $a70a			jmp 	SyntaxError
.94fb					_ETHexConstant:
.94fb	c8		iny				iny 								; skip #
.94fc	c8		iny				iny 								; skip count
.94fd	20 a3 99	jsr $99a3			jsr 	NSMSetZero 					; clear result
.9500					_ETHLoop:
.9500	b1 30		lda ($30),y			lda 	(codePtr),y
.9502	c8		iny				iny 								; and consume
.9503	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9505	f0 1e		beq $9525			beq 	_ETHExit
.9507	48		pha				pha 								; save on stack.
.9508	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; x 2
.950b	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; x 4
.950e	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; x 8
.9511	20 b8 99	jsr $99b8			jsr 	NSMShiftLeft 				; x 16
.9514	68		pla				pla 								; ASCII
.9515	c9 41		cmp #$41			cmp 	#'A'
.9517	90 02		bcc $951b			bcc 	_ETHNotChar
.9519	e9 07		sbc #$07			sbc 	#7
.951b					_ETHNotChar:
.951b	29 0f		and #$0f			and 	#15 						; digit now
.951d	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9520	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9523	80 db		bra $9500			bra 	_ETHLoop 					; go round.
.9525					_ETHExit:
.9525	60		rts				rts
.9526					_ETString:
.9526	c8		iny				iny 								; look at length
.9527	b1 30		lda ($30),y			lda 	(codePtr),y
.9529	48		pha				pha
.952a	c8		iny				iny 								; first character
.952b	20 ed 99	jsr $99ed			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.952e	68		pla				pla 								; restore count and save
.952f	85 36		sta $36				sta 	zTemp0
.9531	98		tya				tya 								; add length to Y to skip it.
.9532	18		clc				clc
.9533	65 36		adc $36				adc 	zTemp0
.9535	a8		tay				tay
.9536	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9538	9d 00 04	sta $0400,x			sta 	NSStatus,x
.953b	60		rts				rts
.953c					_ETVariable:
.953c	4c 96 95	jmp $9596			jmp 	VariableHandler
.953f					_ETPuncUnary:
.953f	c8		iny				iny 								; consume the unary character
.9540	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9542	f0 2d		beq $9571			beq 	_ETUnaryNegate
.9544	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9546	f0 39		beq $9581			beq 	_ETDereference
.9548	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.954a	f0 43		beq $958f			beq 	_ETParenthesis
.954c	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.954e	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9550	f0 06		beq $9558			beq 	_ETIndirection
.9552	e6 36		inc $36				inc 	zTemp0
.9554	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9556	d0 a0		bne $94f8			bne 	_ETSyntaxError
.9558					_ETIndirection:
.9558	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.955a	1a		inc a				inc 	a
.955b	48		pha				pha
.955c	20 c5 94	jsr $94c5			jsr 	EvaluateTerm				; evaluate the term
.955f	20 09 93	jsr $9309			jsr 	Dereference 				; dereference it.
.9562	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9565	d0 07		bne $956e			bne 	_ETTypeMismatch
.9567	68		pla				pla 								; indirection 1-2
.9568	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.956a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.956d	60		rts				rts
.956e					_ETTypeMismatch:
.956e	4c 14 a7	jmp $a714			jmp 	TypeError
.9571					_ETUnaryNegate:
.9571	20 c5 94	jsr $94c5			jsr 	EvaluateTerm				; evaluate the term
.9574	20 09 93	jsr $9309			jsr 	Dereference 				; dereference it.
.9577	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.957a	29 10		and #$10			and 	#NSTString
.957c	d0 f0		bne $956e			bne 	_ETTypeMismatch
.957e	4c 4f 99	jmp $994f			jmp 	NSMNegate  					; just toggles the sign bit.
.9581					_ETDereference:
.9581	20 c5 94	jsr $94c5			jsr 	EvaluateTerm				; evaluate the term
.9584	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9587	29 20		and #$20			and 	#NSBIsReference
.9589	f0 e3		beq $956e			beq 	_ETTypeMismatch
.958b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.958e	60		rts				rts
.958f					_ETParenthesis:
.958f	20 f4 91	jsr $91f4			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9592	20 24 a1	jsr $a124			jsr 	CheckRightBracket 			; check for )
.9595	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9596					VariableHandler:
.9596	b1 30		lda ($30),y			lda 	(codePtr),y
.9598	18		clc				clc
.9599	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.959b	85 37		sta $37				sta 	zTemp0+1
.959d	c8		iny				iny
.959e	b1 30		lda ($30),y			lda 	(codePtr),y
.95a0	85 36		sta $36				sta 	zTemp0
.95a2	c8		iny				iny
.95a3	18		clc				clc									; copy variable address+3 to mantissa
.95a4	69 03		adc #$03			adc 	#3
.95a6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.95a9	a5 37		lda $37				lda 	zTemp0+1
.95ab	69 00		adc #$00			adc 	#0
.95ad	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95b0	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.95b3	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.95b6	9e 28 04	stz $0428,x			stz 	NSExponent,x
.95b9	5a		phy				phy
.95ba	a0 02		ldy #$02			ldy 	#2 							; read type
.95bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.95be	7a		ply				ply
.95bf	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.95c1	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.95c3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95c6	29 04		and #$04			and 	#NSBIsArray
.95c8	d0 01		bne $95cb			bne 	_VHArray
.95ca	60		rts				rts
.95cb					_VHArray:
.95cb	e8		inx				inx
.95cc	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger 		; get the 1st index.
.95cf	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.95d1	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.95d4	b1 30		lda ($30),y			lda 	(codePtr),y
.95d6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.95d8	d0 06		bne $95e0			bne 	_VHNoSecondIndex
.95da	c8		iny				iny 								; skip the comma
.95db	e8		inx				inx
.95dc	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.95df	ca		dex				dex
.95e0					_VHNoSecondIndex:
.95e0	ca		dex				dex 								; set X back.
.95e1	20 24 a1	jsr $a124			jsr 	CheckRightBracket 			; and check the right bracket.
.95e4	5a		phy				phy 								; save position
.95e5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.95e8	85 3e		sta $3e				sta 	zaTemp
.95ea	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95ed	85 3f		sta $3f				sta 	zaTemp+1
.95ef	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.95f1	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.95f3	f0 02		beq $95f7			beq 	_VHHas2Mask
.95f5	a9 ff		lda #$ff			lda 	#$FF
.95f7					_VHHas2Mask:
.95f7	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.95fa	f0 54		beq $9650			beq 	_VHBadIndex
.95fc	0a		asl a				asl 	a 							; carry will be set if a second index
.95fd	90 09		bcc $9608			bcc 	_VHCheckFirstIndex
.95ff	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9601	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9603	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9606	90 48		bcc $9650			bcc 	_VHBadIndex
.9608					_VHCheckFirstIndex:
.9608	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.960a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.960c	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.960f	90 3f		bcc $9650			bcc 	_VHBadIndex
.9611	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9613	64 37		stz $37				stz 	zTemp0+1
.9615	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9618	30 0f		bmi $9629			bmi 	_VHNoMultiply
.961a	da		phx				phx
.961b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.961e	48		pha				pha
.961f	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9621	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9623	1a		inc a				inc 	a 							; add 1 for zero base
.9624	fa		plx				plx
.9625	20 a6 a5	jsr $a5a6			jsr 	Multiply8x8 				; calculate -> Z0
.9628	fa		plx				plx
.9629					_VHNoMultiply:
.9629	18		clc				clc
.962a	a5 36		lda $36				lda 	zTemp0
.962c	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.962f	85 36		sta $36				sta 	zTemp0
.9631	a5 37		lda $37				lda 	zTemp0+1
.9633	69 00		adc #$00			adc 	#0
.9635	85 37		sta $37				sta 	zTemp0+1
.9637	bd 00 04	lda $0400,x			lda 	NSStatus,x
.963a	20 16 85	jsr $8516			jsr 	ScaleByBaseType
.963d	18		clc				clc
.963e	b2 3e		lda ($3e)			lda 	(zaTemp)
.9640	65 36		adc $36				adc 	zTemp0
.9642	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9645	a0 01		ldy #$01			ldy 	#1
.9647	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9649	65 37		adc $37				adc 	zTemp0+1
.964b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.964e	7a		ply				ply 								; restore position
.964f	60		rts				rts
.9650					_VHBadIndex:
.9650	a9 17		lda #$17		lda	#23
.9652	4c eb 8d	jmp $8deb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a4dc					AbsUnary:
.a4dc	fa		plx				plx 								; restore stack pos
.a4dd	20 f7 98	jsr $98f7			jsr 	EvaluateNumber 				; get a float or int
.a4e0	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.a4e3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a4e6	29 7f		and #$7f			and 	#$7F
.a4e8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a4eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9655					AllocUnary:
.9655	fa		plx				plx 								; restore stack pos
.9656	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger		; get bytes required.
.9659	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.965c	da		phx				phx 								; save X/Y
.965d	5a		phy				phy
.965e	8a		txa				txa 								; copy X into Y
.965f	a8		tay				tay
.9660	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9663	aa		tax				tax
.9664	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9667	20 74 96	jsr $9674			jsr 	AllocateXABytes 			; allocate memory
.966a	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.966d	8a		txa				txa
.966e	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9671	7a		ply				ply
.9672	fa		plx				plx
.9673	60		rts				rts
.9674					AllocateXABytes:
.9674	5a		phy				phy
.9675	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9678	84 36		sty $36				sty 	zTemp0
.967a	5a		phy				phy
.967b	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.967e	84 37		sty $37				sty 	zTemp0+1
.9680	5a		phy				phy
.9681	18		clc				clc 								; add to low memory pointer
.9682	6d 8c 04	adc $048c			adc 	lowMemPtr
.9685	8d 8c 04	sta $048c			sta 	lowMemPtr
.9688	8a		txa				txa
.9689	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.968c	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.968f	b0 2f		bcs $96c0			bcs 	CISSMemory
.9691	20 b2 96	jsr $96b2			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9694					_ClearMemory:
.9694	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9697	c5 36		cmp $36				cmp 	zTemp0
.9699	d0 07		bne $96a2			bne 	_CMClearNext
.969b	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.969e	c5 37		cmp $37				cmp 	zTemp0+1
.96a0	f0 0c		beq $96ae			beq 	_CMExit
.96a2					_CMClearNext:
.96a2	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.96a4	92 36		sta ($36)			sta 	(zTemp0)
.96a6	e6 36		inc $36				inc 	zTemp0
.96a8	d0 ea		bne $9694			bne 	_ClearMemory
.96aa	e6 37		inc $37				inc		zTemp0+1
.96ac	80 e6		bra $9694			bra 	_ClearMemory
.96ae					_CMExit:
.96ae	fa		plx				plx
.96af	68		pla				pla
.96b0	7a		ply				ply
.96b1	60		rts				rts
.96b2					CheckIdentifierStringSpace:
.96b2	48		pha				pha
.96b3	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.96b6	18		clc				clc
.96b7	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.96b9	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.96bc	b0 02		bcs $96c0			bcs 	CISSMemory
.96be	68		pla				pla
.96bf	60		rts				rts
.96c0					CISSMemory:
.96c0	a9 06		lda #$06		lda	#6
.96c2	4c eb 8d	jmp $8deb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a4ec					AscUnary:
.a4ec	fa		plx				plx 								; restore stack pos
.a4ed	20 02 99	jsr $9902			jsr 	EvaluateString 				; get a string
.a4f0	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a4f2	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.a4f5	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.a4f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a4f9					FracUnary:
.a4f9	fa		plx				plx 								; restore stack pos
.a4fa	20 f7 98	jsr $98f7			jsr 	EvaluateNumber 				; get a float or int
.a4fd	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.a500	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a503	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a505	f0 04		beq $a50b			beq 	_IUZero
.a507	20 c9 a3	jsr $a3c9			jsr 	FloatFractionalPart
.a50a	60		rts				rts
.a50b					_IUZero:
.a50b	20 a3 99	jsr $99a3			jsr 	NSMSetZero
.a50e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a50f					IntUnary:
.a50f	fa		plx				plx 								; restore stack pos
.a510	20 f7 98	jsr $98f7			jsr 	EvaluateNumber 				; get a float or int
.a513	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.a516	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a519	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a51b	f0 03		beq $a520			beq 	_IUExit
.a51d	20 2c a4	jsr $a42c			jsr 	FloatIntegerPart
.a520					_IUExit:
.a520	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a521					LenUnary:
.a521	fa		plx				plx 								; restore stack pos
.a522	20 02 99	jsr $9902			jsr 	EvaluateString 				; get a string
.a525	5a		phy				phy
.a526	a0 00		ldy #$00			ldy 	#0 							; find length
.a528					_LenFind:
.a528	b1 36		lda ($36),y			lda 	(zTemp0),y
.a52a	f0 06		beq $a532			beq 	_LenExit
.a52c	c8		iny				iny
.a52d	d0 f9		bne $a528			bne 	_LenFind
.a52f	4c 0f a7	jmp $a70f			jmp 	RangeError 					; string > 255
.a532					_LenExit:
.a532	98		tya				tya
.a533	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.a536	7a		ply				ply
.a537	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.a53a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.96c5					Unary_Not:
.96c5	fa		plx				plx
.96c6	20 1a 99	jsr $991a			jsr 	EvaluateInteger 			; get integer
.96c9	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.96cc	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; zero mantissa ?
.96cf	f0 04		beq $96d5			beq 	_NotZero
.96d1	20 a3 99	jsr $99a3			jsr 	NSMSetZero
.96d4	60		rts				rts
.96d5					_NotZero:
.96d5	4c 58 8e	jmp $8e58			jmp 	ReturnTrue
.96d8					_UNBad:
.96d8	4c 19 a7	jmp $a719			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.96db					Unary_Random:
.96db	fa		plx				plx
.96dc	20 54 97	jsr $9754			jsr 	Random32Bit 				; get a random number
.96df	20 39 97	jsr $9739			jsr 	URCopyToMantissa  			; put in mantissa
.96e2	e8		inx				inx
.96e3	20 2f 99	jsr $992f			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.96e6	ca		dex				dex
.96e7	20 a8 a1	jsr $a1a8			jsr 	IntegerModulusNoCheck 		; calculate modulus
.96ea	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.96ed	9e 28 04	stz $0428,x			stz 	NSExponent,x
.96f0	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.96f3	60		rts				rts
.96f4					Unary_Rnd:
.96f4	fa		plx				plx
.96f5	20 f7 98	jsr $98f7			jsr 	EvaluateNumber 				; number to use.
.96f8	20 24 a1	jsr $a124			jsr 	CheckRightBracket 			; closing bracket
.96fb	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.96fe	f0 2b		beq $972b			beq 	_URCopySeed
.9700	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9703	10 23		bpl $9728			bpl 	_URDontSeed
.9705	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9708	49 17		eor #$17			eor 	#$17
.970a	8d 88 04	sta $0488			sta 	RandomSeed+0
.970d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9710	49 a5		eor #$a5			eor 	#$A5
.9712	8d 89 04	sta $0489			sta 	RandomSeed+1
.9715	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9718	49 c2		eor #$c2			eor 	#$C2
.971a	8d 8a 04	sta $048a			sta 	RandomSeed+2
.971d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9720	49 9d		eor #$9d			eor 	#$9D
.9722	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9725	20 54 97	jsr $9754			jsr 	Random32Bit
.9728					_URDontSeed:
.9728	20 54 97	jsr $9754			jsr 	Random32Bit 				; generate a number.
.972b					_URCopySeed:
.972b	20 39 97	jsr $9739			jsr 	URCopyToMantissa 			; copy into mantissa
.972e	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9730	8d 28 04	sta $0428			sta 	NSExponent
.9733	a9 08		lda #$08			lda 	#NSTFloat
.9735	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9738	60		rts				rts
.9739					URCopyToMantissa:
.9739	ad 88 04	lda $0488			lda 	RandomSeed+0
.973c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.973f	ad 89 04	lda $0489			lda 	RandomSeed+1
.9742	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9745	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9748	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.974b	ad 8b 04	lda $048b			lda 	RandomSeed+3
.974e	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9750	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9753	60		rts				rts
.9754					Random32Bit:
.9754	5a		phy				phy
.9755	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9757	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.975a	d0 03		bne $975f			bne 	_Random1
.975c	a8		tay				tay 								; if so do it 256 times
.975d	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.975f					_Random1:
.975f	0a		asl a				asl 	a 							; LSFR RNG
.9760	2e 89 04	rol $0489			rol 	RandomSeed+1
.9763	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9766	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9769	90 02		bcc $976d			bcc 	_Random2
.976b	49 c5		eor #$c5			eor 	#$C5
.976d					_Random2:
.976d	88		dey				dey
.976e	d0 ef		bne $975f			bne 	_Random1
.9770	8d 88 04	sta $0488			sta 	RandomSeed+0
.9773	7a		ply				ply
.9774	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a53b					SgnUnary:
.a53b	fa		plx				plx 								; restore stack pos
.a53c	20 f7 98	jsr $98f7			jsr 	EvaluateNumber 				; get a float or int
.a53f	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.a542	20 d3 99	jsr $99d3			jsr 	NSMIsZero 					; if zero
.a545	f0 10		beq $a557			beq 	_SGZero  					; return Int Zero
.a547	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a54a	48		pha				pha
.a54b	a9 01		lda #$01			lda 	#1 							; set to 1
.a54d	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.a550	68		pla				pla
.a551	29 80		and #$80			and		#$80 						; copy the sign byte out
.a553	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a556	60		rts				rts
.a557	20 a3 99	jsr $99a3	_SGZero:jsr 	NSMSetZero
.a55a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a55b					ValUnary:
.a55b	fa		plx				plx 								; restore stack pos
.a55c	20 71 a5	jsr $a571			jsr 	ValMainCode 				; do the main val() code
.a55f	b0 01		bcs $a562			bcs 	_VUError 					; couldn't convert
.a561	60		rts				rts
.a562					_VUError:
.a562	4c 14 a7	jmp $a714			jmp 	TypeError
.a565					IsValUnary:
.a565	fa		plx				plx 								; restore stack pos
.a566	20 71 a5	jsr $a571			jsr 	ValMainCode 				; do the main val() code
.a569	b0 03		bcs $a56e			bcs 	_VUBad
.a56b	4c 58 8e	jmp $8e58			jmp 	ReturnTrue
.a56e					_VUBad:
.a56e	4c 64 8e	jmp $8e64			jmp 	ReturnFalse
.a571					ValMainCode:
.a571	20 02 99	jsr $9902			jsr 	EvaluateString 				; get a string
.a574	20 24 a1	jsr $a124			jsr 	CheckRightBracket 			; check right bracket present
.a577	5a		phy				phy
.a578	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a57a	f0 17		beq $a593			beq 	_VMCFail2
.a57c	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a57e	48		pha				pha 								; save first character
.a57f	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a581	d0 01		bne $a584			bne 	_VMCStart
.a583	c8		iny				iny 								; skip over -
.a584					_VMCStart:
.a584	38		sec				sec 								; initialise first time round.
.a585					_VMCNext:
.a585	c8		iny				iny 								; pre-increment
.a586	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a588	f0 0c		beq $a596			beq 	_VMCSuccess 				; successful.
.a58a	20 a7 93	jsr $93a7			jsr 	EncodeNumber 				; send it to the number-builder
.a58d	90 03		bcc $a592			bcc 	_VMCFail 					; if failed, give up.
.a58f	18		clc				clc 								; next time round, countinue
.a590	80 f3		bra $a585			bra 	_VMCNext
.a592					_VMCFail:
.a592	68		pla				pla
.a593					_VMCFail2:
.a593	7a		ply				ply
.a594	38		sec				sec
.a595	60		rts				rts
.a596					_VMCSuccess:
.a596	a9 00		lda #$00			lda 	#0 							; construct final
.a598	20 a7 93	jsr $93a7			jsr 	EncodeNumber
.a59b	68		pla				pla
.a59c	c9 2d		cmp #$2d			cmp 	#"-"
.a59e	d0 03		bne $a5a3			bne 	_VMCNotNegative
.a5a0	20 4f 99	jsr $994f			jsr		NSMNegate
.a5a3					_VMCNotNegative:
.a5a3	7a		ply				ply
.a5a4	18		clc				clc
.a5a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9775					ChrUnary:
.9775	fa		plx				plx 								; restore stack pos
.9776	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger			; get value
.9779	48		pha				pha
.977a	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.977d	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.977f	20 2f aa	jsr $aa2f			jsr 	StringTempAllocate
.9782	68		pla				pla 								; write number to it
.9783	20 6d aa	jsr $aa6d			jsr 	StringTempWrite
.9786	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9787					SpcUnary:
.9787	fa		plx				plx 								; restore stack pos
.9788	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger			; get value
.978b	5a		phy				phy
.978c	48		pha				pha 								; save count
.978d	20 2f aa	jsr $aa2f			jsr 	StringTempAllocate
.9790	7a		ply				ply 								; to do count in Y
.9791					_SpcLoop:
.9791	c0 00		cpy #$00			cpy 	#0
.9793	f0 08		beq $979d			beq 	_SpcExit
.9795	a9 20		lda #$20			lda 	#32
.9797	20 6d aa	jsr $aa6d			jsr 	StringTempWrite
.979a	88		dey				dey
.979b	80 f4		bra $9791			bra 	_SPCLoop
.979d					_SpcExit:
.979d	7a		ply				ply
.979e	20 24 a1	jsr $a124			jsr 	CheckRightBracket
.97a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.97a2					Unary_Str:
.97a2	fa		plx				plx
.97a3	20 f7 98	jsr $98f7			jsr 	EvaluateNumber  			; get number
.97a6	20 24 a1	jsr $a124			jsr 	CheckRightBracket 			; closing bracket
.97a9	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.97ab	20 c4 97	jsr $97c4			jsr 	ConvertNumberToString 		; do the conversion.
.97ae	a9 21		lda #$21			lda		#33 						; create buffer
.97b0	20 2f aa	jsr $aa2f			jsr 	StringTempAllocate 			; allocate memory
.97b3	da		phx				phx
.97b4	a2 00		ldx #$00			ldx 	#0
.97b6					_USCopy:
.97b6	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.97b9	20 6d aa	jsr $aa6d			jsr 	StringTempWrite
.97bc	e8		inx				inx
.97bd	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.97c0	d0 f4		bne $97b6			bne 	_USCopy
.97c2	fa		plx				plx
.97c3	60		rts				rts
.97c4					ConvertNumberToString:
.97c4	5a		phy				phy 								; save code position
.97c5	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.97c8	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.97cb	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.97ce	10 0a		bpl $97da			bpl 	_CNTSNotNegative
.97d0	29 7f		and #$7f			and 	#$7F 						; make +ve
.97d2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97d5	a9 2d		lda #$2d			lda 	#"-"
.97d7	20 40 98	jsr $9840			jsr 	WriteDecimalBuffer
.97da					_CNTSNotNegative:
.97da	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.97dd	f0 15		beq $97f4			beq 	_CNTSNotFloat
.97df	e8		inx				inx 								; round up
.97e0	a9 01		lda #$01			lda 	#1
.97e2	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.97e5	ca		dex				dex
.97e6	bd 28 04	lda $0428,x			lda		NSExponent,x
.97e9	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.97ec	a9 08		lda #$08			lda 	#NSTFloat
.97ee	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.97f1	20 eb a2	jsr $a2eb			jsr 	FloatAdd
.97f4					_CNTSNotFloat:
.97f4	20 22 98	jsr $9822			jsr 	MakePlusTwoString
.97f7	20 c9 a3	jsr $a3c9			jsr 	FloatFractionalPart 		; get the fractional part
.97fa	20 8d a4	jsr $a48d			jsr 	NSNormalise					; normalise , exit if zero
.97fd	f0 21		beq $9820			beq 	_CNTSExit
.97ff	a9 2e		lda #$2e			lda 	#"."
.9801	20 40 98	jsr $9840			jsr 	WriteDecimalBuffer 			; write decimal place
.9804					_CNTSDecimal:
.9804	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9807	30 17		bmi $9820			bmi 	_CNTSExit
.9809	e8		inx				inx 								; x 10.0
.980a	a9 0a		lda #$0a			lda 	#10
.980c	20 a5 99	jsr $99a5			jsr 	NSMSetByte
.980f	a9 08		lda #$08			lda 	#NSTFloat
.9811	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9814	ca		dex				dex
.9815	20 56 a4	jsr $a456			jsr 	FloatMultiply
.9818	20 22 98	jsr $9822			jsr 	MakePlusTwoString
.981b	20 c9 a3	jsr $a3c9			jsr 	FloatFractionalPart 		; get the fractional part
.981e	80 e4		bra $9804			bra 	_CNTSDecimal 				; keep going.
.9820					_CNTSExit:
.9820	7a		ply				ply
.9821	60		rts				rts
.9822					MakePlusTwoString:
.9822	da		phx				phx
.9823	20 7a 99	jsr $997a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9826	e8		inx				inx 								; access it
.9827	e8		inx				inx
.9828	20 2c a4	jsr $a42c			jsr 	FloatIntegerPart 			; make it an integer
.982b	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.982d	20 95 a2	jsr $a295			jsr 	ConvertInt32
.9830	a2 00		ldx #$00			ldx	 	#0
.9832					_MPTSCopy:
.9832	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9835	20 40 98	jsr $9840			jsr 	WriteDecimalBuffer
.9838	e8		inx				inx
.9839	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.983c	d0 f4		bne $9832			bne 	_MPTSCopy
.983e	fa		plx				plx
.983f	60		rts				rts
.9840					WriteDecimalBuffer:
.9840	da		phx				phx
.9841	ae 95 04	ldx $0495			ldx 	dbOffset
.9844	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9847	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.984a	ee 95 04	inc $0495			inc 	dbOffset
.984d	fa		plx				plx
.984e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.984f					Unary_Left:
.984f	fa		plx				plx
.9850	18		clc				clc 								; only one parameter
.9851	20 c6 98	jsr $98c6			jsr 	SubstringInitial 			; set up.
.9854	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9857	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.985a	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.985d	80 2c		bra $988b			bra 	SubstringMain
.985f					Unary_Right:
.985f	fa		plx				plx
.9860	18		clc				clc 								; only one parameter
.9861	20 c6 98	jsr $98c6			jsr 	SubstringInitial 			; set up.
.9864	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9867	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.986a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.986d	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9870	b0 02		bcs $9874			bcs 	_URNotUnderflow
.9872	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9874					_URNotUnderFlow:
.9874	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9877	80 12		bra $988b			bra 	SubStringMain
.9879					Unary_Mid:
.9879	fa		plx				plx
.987a	38		sec				sec 								; two parameters
.987b	20 c6 98	jsr $98c6			jsr 	SubstringInitial 			; set up.
.987e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9881	f0 05		beq $9888			beq 	_UMError
.9883	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9886	80 03		bra $988b			bra 	SubStringMain
.9888					_UMError:
.9888	4c 19 a7	jmp $a719			jmp 	ArgumentError
.988b					SubStringMain:
.988b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.988e	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9891	b0 2d		bcs $98c0			bcs 	_SSMNull 					; if so, return an empty string.
.9893	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9896	f0 28		beq $98c0			beq 	_SSMNull 					; return empty string.
.9898	18		clc				clc 								; add the offset +1 to the address and
.9899	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.989c	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.989f	85 36		sta $36				sta 	zTemp0
.98a1	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.98a4	69 00		adc #$00			adc 	#0
.98a6	85 37		sta $37				sta 	zTemp0+1
.98a8					_SSMNoCarry:
.98a8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.98ab	20 2f aa	jsr $aa2f			jsr 	StringTempAllocate 			; allocate that many characters
.98ae	5a		phy				phy 								; save Y
.98af	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.98b1					_SSMCopy:
.98b1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.98b3	f0 09		beq $98be			beq 	_SSMEString 				; no more to copy
.98b5	20 6d aa	jsr $aa6d			jsr 	StringTempWrite 			; and write it out.
.98b8	c8		iny				iny
.98b9	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.98bc	d0 f3		bne $98b1			bne 	_SSMCopy
.98be					_SSMEString:
.98be	7a		ply				ply
.98bf					_SSMExit:
.98bf	60		rts				rts
.98c0					_SSMNull:
.98c0	a9 00		lda #$00			lda 	#0
.98c2	20 2f aa	jsr $aa2f			jsr 	StringTempAllocate
.98c5	60		rts				rts
.98c6					SubstringInitial:
.98c6	da		phx				phx 								; save initial stack position
.98c7	08		php				php 								; save carry on stack indicating 2 parameters
.98c8	20 02 99	jsr $9902			jsr 	EvaluateString 				; get a string
.98cb	5a		phy				phy 								; calculate length to exponent.
.98cc	a0 ff		ldy #$ff			ldy 	#$FF
.98ce					_SIFindLength:
.98ce	c8		iny				iny
.98cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.98d1	d0 fb		bne $98ce			bne 	_SIFindLength
.98d3	98		tya				tya
.98d4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.98d7	7a		ply				ply
.98d8	e8		inx				inx
.98d9	20 2c a1	jsr $a12c			jsr 	CheckComma 					; comma next
.98dc	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger 		; get next parameter
.98df	28		plp				plp 								; is it the last parameter ?
.98e0	90 07		bcc $98e9			bcc 	_SSIExit 					; if so, exit.
.98e2	e8		inx				inx
.98e3	20 2c a1	jsr $a12c			jsr 	CheckComma 					; comma next
.98e6	20 3b 99	jsr $993b			jsr 	Evaluate8BitInteger 		; get last parameter
.98e9					_SSIExit:
.98e9	fa		plx				plx
.98ea	20 24 a1	jsr $a124			jsr 	CheckRightBracket 			; check closing bracket
.98ed	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.98ee					EvaluateValue:
.98ee	48		pha				pha
.98ef	20 f4 91	jsr $91f4			jsr		EvaluateExpression 			; expression
.98f2	20 09 93	jsr $9309			jsr 	Dereference					; derefernce it
.98f5	68		pla				pla
.98f6	60		rts				rts
.98f7					EvaluateNumber:
.98f7	20 ee 98	jsr $98ee			jsr 	EvaluateValue 				; get a value
.98fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.98fd	29 10		and #$10			and 	#NSBIsString
.98ff	d0 16		bne $9917			bne 	HelperTypeError
.9901	60		rts				rts
.9902					EvaluateString:
.9902	20 ee 98	jsr $98ee			jsr 	EvaluateValue 				; get a value
.9905	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9908	29 10		and #$10			and 	#NSBIsString
.990a	f0 0b		beq $9917			beq 	HelperTypeError
.990c					CopyAddressToTemp0:
.990c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.990f	85 36		sta $36				sta 	zTemp0
.9911	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9914	85 37		sta $37				sta 	zTemp0+1
.9916	60		rts				rts
.9917					HelperTypeError:
.9917	4c 14 a7	jmp $a714			jmp 	TypeError
.991a					EvaluateInteger:
.991a	20 f7 98	jsr $98f7			jsr 	EvaluateNumber
.991d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9920	d0 0a		bne $992c			bne 	HelperValueError 			; if not, it's a float.
.9922	60		rts				rts
.9923					EvaluateUnsignedInteger:
.9923	20 1a 99	jsr $991a			jsr 	EvaluateInteger 			; check integer is +ve
.9926	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9929	30 01		bmi $992c			bmi 	HelperValueError
.992b	60		rts				rts
.992c					HelperValueError:
.992c	4c 19 a7	jmp $a719			jmp 	ArgumentError
.992f					Evaluate16BitInteger:
.992f	20 23 99	jsr $9923			jsr	 	EvaluateUnsignedInteger		; get integer
.9932	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9935	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9938	d0 f2		bne $992c			bne 	HelperValueError
.993a	60		rts				rts
.993b					Evaluate8BitInteger:
.993b	20 23 99	jsr $9923			jsr	 	EvaluateUnsignedInteger 	; get an integer
.993e	d0 ec		bne $992c			bne 	HelperValueError
.9940	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9943	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9946	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9949	d0 e1		bne $992c			bne 	HelperValueError
.994b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.994e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a5a6					Multiply8x8:
.a5a6	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a5a7	85 36		sta $36			  	sta 	zTemp0
.a5a9	86 37		stx $37				stx 	zTemp0+1
.a5ab	a9 00		lda #$00			lda 	#0
.a5ad	a2 08		ldx #$08			ldx 	#8
.a5af					_M88Loop:
.a5af	90 03		bcc $a5b4			bcc 	_M88NoAdd
.a5b1	18		clc				clc
.a5b2	65 37		adc $37				adc 	zTemp0+1
.a5b4					_M88NoAdd:
.a5b4	6a		ror a				ror 	a
.a5b5	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a5b7	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a5b8	d0 f5		bne $a5af			bne 	_M88Loop
.a5ba	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a5bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.994f					NSMNegate:
.994f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9952	49 80		eor #$80			eor 	#NSBIsNegative
.9954	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9957	60		rts				rts
.9958					NSMNegateMantissa:
.9958	38		sec				sec
.9959	a9 00		lda #$00			lda 	#0
.995b	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.995e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9961	a9 00		lda #$00			lda 	#0
.9963	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9966	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9969	a9 00		lda #$00			lda 	#0
.996b	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.996e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9971	a9 00		lda #$00			lda 	#0
.9973	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9976	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9979	60		rts				rts
.997a					NSMShiftUpTwo:
.997a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.997d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9980	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9983	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9986	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9989	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.998c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.998f	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9992	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9995	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9998	bd 00 04	lda $0400,x			lda 	NSStatus,x
.999b	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.999e	60		rts				rts
.999f					NSMSetZeroMantissaOnly:
.999f	a9 00		lda #$00			lda 	#0
.99a1	80 08		bra $99ab			bra 	NSMSetMantissa
.99a3					NSMSetZero:
.99a3	a9 00		lda #$00			lda 	#0
.99a5					NSMSetByte:
.99a5	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.99a8	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.99ab					NSMSetMantissa:
.99ab	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.99ae	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.99b1	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.99b4	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.99b7	60		rts				rts
.99b8					NSMShiftLeft:
.99b8	18		clc				clc
.99b9					NSMRotateLeft:
.99b9	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.99bc	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.99bf	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.99c2	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.99c5	60		rts				rts
.99c6					NSMShiftRight:
.99c6	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.99c9	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.99cc	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.99cf	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.99d2	60		rts				rts
.99d3					NSMIsZero:
.99d3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.99d6	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.99d9	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.99dc	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.99df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a5bd					Assemble_ora:
.a5bd	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5c0	01					.byte $01
.a5c1					Assemble_and:
.a5c1	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5c4	21					.byte $21
.a5c5					Assemble_eor:
.a5c5	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5c8	41					.byte $41
.a5c9					Assemble_adc:
.a5c9	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5cc	61					.byte $61
.a5cd					Assemble_sta:
.a5cd	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5d0	81					.byte $81
.a5d1					Assemble_lda:
.a5d1	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5d4	a1					.byte $a1
.a5d5					Assemble_cmp:
.a5d5	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5d8	c1					.byte $c1
.a5d9					Assemble_sbc:
.a5d9	20 15 81	jsr $8115		jsr	AssembleGroup1
>a5dc	e1					.byte $e1
.a5dd					Assemble_asl:
.a5dd	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a5e0	02					.byte $02
>a5e1	75					.byte $75
.a5e2					Assemble_rol:
.a5e2	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a5e5	22					.byte $22
>a5e6	75					.byte $75
.a5e7					Assemble_lsr:
.a5e7	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a5ea	42					.byte $42
>a5eb	75					.byte $75
.a5ec					Assemble_ror:
.a5ec	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a5ef	62					.byte $62
>a5f0	75					.byte $75
.a5f1					Assemble_stx:
.a5f1	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a5f4	82					.byte $82
>a5f5	50					.byte $50
.a5f6					Assemble_ldx:
.a5f6	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a5f9	a2					.byte $a2
>a5fa	d0					.byte $d0
.a5fb					Assemble_dec:
.a5fb	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a5fe	c2					.byte $c2
>a5ff	55					.byte $55
.a600					Assemble_inc:
.a600	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a603	e2					.byte $e2
>a604	55					.byte $55
.a605					Assemble_stz:
.a605	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a608	60					.byte $60
>a609	44					.byte $44
.a60a					Assemble_bit:
.a60a	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a60d	20					.byte $20
>a60e	55					.byte $55
.a60f					Assemble_sty:
.a60f	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a612	80					.byte $80
>a613	54					.byte $54
.a614					Assemble_ldy:
.a614	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a617	a0					.byte $a0
>a618	d5					.byte $d5
.a619					Assemble_cpy:
.a619	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a61c	c0					.byte $c0
>a61d	d4					.byte $d4
.a61e					Assemble_cpx:
.a61e	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a621	e0					.byte $e0
>a622	d0					.byte $d0
.a623					Assemble_tsb:
.a623	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a626	00					.byte $00
>a627	50					.byte $50
.a628					Assemble_trb:
.a628	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a62b	10					.byte $10
>a62c	50					.byte $50
.a62d					Assemble_jsr:
.a62d	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a630	14					.byte $14
>a631	10					.byte $10
.a632					Assemble_jmp:
.a632	20 1c 81	jsr $811c		jsr	AssembleGroup2
>a635	40					.byte $40
>a636	10					.byte $10
.a637					Assemble_bpl:
.a637	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a63a	10					.byte $10
.a63b					Assemble_bmi:
.a63b	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a63e	30					.byte $30
.a63f					Assemble_bvc:
.a63f	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a642	50					.byte $50
.a643					Assemble_bvs:
.a643	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a646	70					.byte $70
.a647					Assemble_bcc:
.a647	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a64a	90					.byte $90
.a64b					Assemble_bcs:
.a64b	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a64e	b0					.byte $b0
.a64f					Assemble_bne:
.a64f	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a652	d0					.byte $d0
.a653					Assemble_beq:
.a653	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a656	f0					.byte $f0
.a657					Assemble_bra:
.a657	20 6d 81	jsr $816d		jsr	AssembleGroup3
>a65a	80					.byte $80
.a65b					Assemble_brk:
.a65b	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a65e	00					.byte $00
.a65f					Assemble_php:
.a65f	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a662	08					.byte $08
.a663					Assemble_clc:
.a663	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a666	18					.byte $18
.a667					Assemble_plp:
.a667	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a66a	28					.byte $28
.a66b					Assemble_sec:
.a66b	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a66e	38					.byte $38
.a66f					Assemble_rti:
.a66f	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a672	40					.byte $40
.a673					Assemble_pha:
.a673	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a676	48					.byte $48
.a677					Assemble_cli:
.a677	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a67a	58					.byte $58
.a67b					Assemble_phy:
.a67b	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a67e	5a					.byte $5a
.a67f					Assemble_rts:
.a67f	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a682	60					.byte $60
.a683					Assemble_pla:
.a683	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a686	68					.byte $68
.a687					Assemble_sei:
.a687	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a68a	78					.byte $78
.a68b					Assemble_ply:
.a68b	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a68e	7a					.byte $7a
.a68f					Assemble_dey:
.a68f	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a692	88					.byte $88
.a693					Assemble_txa:
.a693	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a696	8a					.byte $8a
.a697					Assemble_tya:
.a697	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a69a	98					.byte $98
.a69b					Assemble_txs:
.a69b	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a69e	9a					.byte $9a
.a69f					Assemble_tay:
.a69f	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6a2	a8					.byte $a8
.a6a3					Assemble_tax:
.a6a3	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6a6	aa					.byte $aa
.a6a7					Assemble_clv:
.a6a7	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6aa	b8					.byte $b8
.a6ab					Assemble_tsx:
.a6ab	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6ae	ba					.byte $ba
.a6af					Assemble_iny:
.a6af	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6b2	c8					.byte $c8
.a6b3					Assemble_dex:
.a6b3	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6b6	ca					.byte $ca
.a6b7					Assemble_cld:
.a6b7	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6ba	d8					.byte $d8
.a6bb					Assemble_phx:
.a6bb	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6be	da					.byte $da
.a6bf					Assemble_stp:
.a6bf	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6c2	db					.byte $db
.a6c3					Assemble_inx:
.a6c3	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6c6	e8					.byte $e8
.a6c7					Assemble_nop:
.a6c7	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6ca	ea					.byte $ea
.a6cb					Assemble_sed:
.a6cb	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6ce	f8					.byte $f8
.a6cf					Assemble_plx:
.a6cf	20 a3 81	jsr $81a3		jsr	AssembleGroup4
>a6d2	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a6d3					DecimalScalarTable:
>a6d3	66 66 66 66				.dword $66666666 ; 0.1
>a6d7	de					.byte $de
>a6d8	1f 85 eb 51				.dword $51eb851f ; 0.01
>a6dc	db					.byte $db
>a6dd	4c 37 89 41				.dword $4189374c ; 0.001
>a6e1	d8					.byte $d8
>a6e2	ac 8b db 68				.dword $68db8bac ; 0.0001
>a6e6	d4					.byte $d4
>a6e7	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a6eb	d1					.byte $d1
>a6ec	83 de 1b 43				.dword $431bde83 ; 1e-06
>a6f0	ce					.byte $ce
>a6f1	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a6f5	ca					.byte $ca
>a6f6	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a6fa	c7					.byte $c7
>a6fb	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a6ff	c4					.byte $c4
>a700	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a704	c0					.byte $c0
>a705	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a709	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a70a					SyntaxError:
.a70a	a9 02		lda #$02		lda	#2
.a70c	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a70f					RangeError:
.a70f	a9 04		lda #$04		lda	#4
.a711	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a714					TypeError:
.a714	a9 05		lda #$05		lda	#5
.a716	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a719					ArgumentError:
.a719	a9 07		lda #$07		lda	#7
.a71b	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a71e					NotDoneError:
.a71e	a9 0c		lda #$0c		lda	#12
.a720	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a723					ErrorText:
>a723	42 72 65 61 6b 00			.text	"Break",0
>a729	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a731	72 72 6f 72 00
>a736	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a73e	20 62 79 20 7a 65 72 6f 00
>a747	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a74f	61 6e 67 65 00
>a754	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a75c	6d 61 74 63 68 00
>a762	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a76a	65 6d 6f 72 79 00
>a770	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a778	61 72 67 75 6d 65 6e 74 00
>a781	53 74 6f 70 00				.text	"Stop",0
>a786	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a78e	6f 6f 20 6c 6f 6e 67 00
>a796	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a79e	6e 20 66 61 69 6c 65 64 00
>a7a7	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a7af	61 74 61 00
>a7b3	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a7bb	65 6e 74 65 64 00
>a7c1	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a7c9	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a7d5	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a7dd	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a7ea	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a7f2	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a7ff	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a807	68 6f 75 74 20 57 68 69 6c 65 00
>a812	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a81a	68 6f 75 74 20 46 6f 72 00
>a823	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a82b	61 63 6b 20 66 75 6c 6c 00
>a834	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a83c	75 63 74 75 72 65 00
>a843	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a84b	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a858	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a860	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a86e	41 72 72 61 79 20 73 69			.text	"Array size",0
>a876	7a 65 00
>a879	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a881	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a889	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 514."
>a891	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>a8a1	2e 20 42 75 69 6c 64 20 35 31 34 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.a8ad					EXTPrintCharacter:
.a8ad	48		pha				pha
.a8ae	da		phx				phx
.a8af	5a		phy				phy
.a8b0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a8b3	7a		ply				ply
.a8b4	fa		plx				plx
.a8b5	68		pla				pla
.a8b6	60		rts				rts
.a8b7					EXTInputSingleCharacter:
.a8b7	da		phx				phx
.a8b8	5a		phy				phy
.a8b9					_EISCWait:
.a8b9	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a8bc	c9 00		cmp #$00			cmp 	#0
.a8be	f0 f9		beq $a8b9			beq 	_EISCWait
.a8c0	7a		ply				ply
.a8c1	fa		plx				plx
.a8c2	60		rts				rts
.a8c3					EXTInputLine:
.a8c3	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a8c5					_ILLoop:
.a8c5	da		phx				phx 								; read character in
.a8c6	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a8c9	fa		plx				plx
.a8ca	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a8cc	f0 12		beq $a8e0			beq 	_ILBackspace
.a8ce	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a8d0	f0 15		beq $a8e7			beq 	_ILExit
.a8d2	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a8d4	90 ef		bcc $a8c5			bcc 	_ILLoop
.a8d6	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a8d8	f0 eb		beq $a8c5			beq 	_ILLoop
.a8da	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.a8dd	e8		inx				inx
.a8de	80 e5		bra $a8c5			bra 	_ILLoop
.a8e0					_ILBackspace:
.a8e0	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a8e2	f0 e1		beq $a8c5			beq 	_ILLoop
.a8e4	ca		dex				dex 								; back one.
.a8e5	80 de		bra $a8c5			bra 	_ILLoop
.a8e7					_ILExit:
.a8e7	20 ad a8	jsr $a8ad			jsr 	EXTPrintCharacter
.a8ea	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a8ed	60		rts				rts
.a8ee					EXTBreakCheck:
.a8ee	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.a8f1					MemoryDeleteLine:
.a8f1	20 10 a9	jsr $a910			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a8f4	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a8f6	a8		tay				tay
.a8f7					_MDDLLoop:
.a8f7	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a8f9	92 30		sta ($30)			sta 	(codePtr)
.a8fb	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a8fd	c5 3a		cmp $3a				cmp 	zTemp2
.a8ff	d0 07		bne $a908			bne 	_MDLDLNext
.a901	a5 31		lda $31				lda 	codePtr+1
.a903	c5 3b		cmp $3b				cmp 	zTemp2+1
.a905	d0 01		bne $a908			bne 	_MDLDLNext
.a907					_MDDLExit:
.a907	60		rts				rts
.a908					_MDLDLNext:
.a908	e6 30		inc $30				inc 	codePtr						; next byte
.a90a	d0 eb		bne $a8f7			bne 	_MDDLLoop
.a90c	e6 31		inc $31				inc 	codePtr+1
.a90e	80 e7		bra $a8f7			bra 	_MDDLLoop
.a910					IMemoryFindEnd:
.a910	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a912	85 3a		sta $3a				sta 	0+zTemp2
.a914	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a916	85 3b		sta $3b				sta 	1+zTemp2
.a918					_MDLFELoop:
.a918	b2 3a		lda ($3a)			lda 	(zTemp2)
.a91a	f0 0b		beq $a927			beq 	_MDLFEExit
.a91c	18		clc				clc
.a91d	65 3a		adc $3a				adc 	zTemp2
.a91f	85 3a		sta $3a				sta 	zTemp2
.a921	90 f5		bcc $a918			bcc 	_MDLFELoop
.a923	e6 3b		inc $3b				inc 	zTemp2+1
.a925	80 f1		bra $a918			bra 	_MDLFELoop
.a927					_MDLFEExit:
.a927	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.a928					MemoryInsertLine:
.a928	08		php				php
.a929	20 10 a9	jsr $a910			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a92c	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a92e	1a		inc a				inc 	a
.a92f	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a931	b0 36		bcs $a969			bcs 	_MDLIError
.a933	28		plp				plp
.a934	90 08		bcc $a93e			bcc 	_MDLIFound
.a936	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a938	85 30		sta $30				sta 	codePtr
.a93a	a5 3b		lda $3b				lda 	zTemp2+1
.a93c	85 31		sta $31				sta 	codePtr+1
.a93e					_MDLIFound:
.a93e	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a941	a8		tay				tay
.a942					_MDLIInsert:
.a942	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a944	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a946	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a948	c5 3a		cmp $3a				cmp 	zTemp2
.a94a	d0 06		bne $a952			bne 	_MDLINext
.a94c	a5 31		lda $31				lda 	codePtr+1
.a94e	c5 3b		cmp $3b				cmp 	zTemp2+1
.a950	f0 0a		beq $a95c			beq 	_MDLIHaveSpace
.a952					_MDLINext:
.a952	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a954	d0 02		bne $a958			bne 	_MDLINoBorrow
.a956	c6 3b		dec $3b				dec 	zTemp2+1
.a958					_MDLINoBorrow:
.a958	c6 3a		dec $3a				dec 	zTemp2
.a95a	80 e6		bra $a942			bra 	_MDLIInsert
.a95c					_MDLIHaveSpace:
.a95c	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.a95f	88		dey				dey 								; from offset-1 to 0
.a960					_MDLICopy:
.a960	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.a963	91 30		sta ($30),y			sta 	(codePtr),y
.a965	88		dey				dey
.a966	10 f8		bpl $a960			bpl 	_MDLICopy
.a968	60		rts				rts
.a969					_MDLIError:
.a969	a9 06		lda #$06		lda	#6
.a96b	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.a96e					MDLAppendLine:
.a96e	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a970	85 36		sta $36				sta 	zTemp0
.a972	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a974	85 38		sta $38				sta 	0+zTemp1
.a976	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a978	85 39		sta $39				sta 	1+zTemp1
.a97a	b2 38		lda ($38)			lda 	(zTemp1)
.a97c	d0 0a		bne $a988			bne 	_MDLANoInitialise
.a97e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a980	8d 3f 06	sta $063f			sta 	0+AppendPointer
.a983	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a985	8d 40 06	sta $0640			sta 	1+AppendPointer
.a988					_MDLANoInitialise:
.a988	18		clc				clc
.a989	ad 3f 06	lda $063f			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a98c	85 38		sta $38				sta 	zTemp1
.a98e	72 36		adc ($36)			adc 	(zTemp0)
.a990	8d 3f 06	sta $063f			sta 	AppendPointer
.a993	ad 40 06	lda $0640			lda 	AppendPointer+1
.a996	85 39		sta $39				sta 	zTemp1+1
.a998	69 00		adc #$00			adc 	#0
.a99a	8d 40 06	sta $0640			sta 	AppendPointer+1
.a99d	a0 00		ldy #$00			ldy 	#0
.a99f					_MDLACopy:
.a99f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a9a1	91 38		sta ($38),y			sta 	(zTemp1),y
.a9a3	c8		iny				iny
.a9a4	98		tya				tya
.a9a5	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a9a7	d0 f6		bne $a99f			bne 	_MDLACopy
.a9a9	a9 00		lda #$00			lda 	#0 							; end of program.
.a9ab	91 38		sta ($38),y			sta 	(zTemp1),y
.a9ad	60		rts				rts
.063f					AppendPointer:
>063f							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.99e0					MemoryNew:
.99e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99e2	85 30		sta $30				sta 	codePtr
.99e4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99e6	85 31		sta $31				sta 	codePtr+1
.99e8	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.99ea	92 30		sta ($30)			sta 	(codePtr)
.99ec	60		rts				rts
.99ed					MemoryInline:
.99ed	98		tya				tya 								; put address into stack,x
.99ee	18		clc				clc
.99ef	65 30		adc $30				adc 	codePtr
.99f1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99f4	a5 31		lda $31				lda 	codePtr+1
.99f6	69 00		adc #$00			adc 	#0
.99f8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99fb	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.99fe	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9a01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9a02					MemorySearch:
.9a02	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9a04	86 37		stx $37				stx 	zTemp0+1
.9a06	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9a08	85 30		sta $30				sta 	codePtr
.9a0a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9a0c	85 31		sta $31				sta 	codePtr+1
.9a0e					_MTAXLoop:
.9a0e	b2 30		lda ($30)			lda 	(codePtr)
.9a10	18		clc				clc
.9a11	f0 21		beq $9a34			beq 	_MTAXExit 					; reached end, exit with CC.
.9a13	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9a15	b1 30		lda ($30),y			lda 	(codePtr),y
.9a17	38		sec				sec
.9a18	e5 36		sbc $36				sbc 	zTemp0
.9a1a	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9a1c	c8		iny				iny 								; do the MSB
.9a1d	b1 30		lda ($30),y			lda 	(codePtr),y
.9a1f	e5 37		sbc $37				sbc 	zTemp0+1
.9a21	05 38		ora $38				ora 	zTemp1
.9a23	f0 0f		beq $9a34			beq 	_MTAXExit	 				; found
.9a25	b0 0d		bcs $9a34			bcs 	_MTAXExit 					; current < required exit
.9a27	18		clc				clc
.9a28	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a2a	65 30		adc $30				adc 	codePtr
.9a2c	85 30		sta $30				sta 	codePtr
.9a2e	90 02		bcc $9a32			bcc 	_CREExit
.9a30	e6 31		inc $31				inc 	codePtr+1
.9a32					_CREExit:
.9a32	80 da		bra $9a0e			bra 	_MTAXLoop
.9a34					_MTAXExit:
.9a34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9a35					StackPushByte:
.9a35	48		pha				pha 								; save byte
.9a36	a5 34		lda $34				lda 	BasicStack
.9a38	d0 09		bne $9a43			bne 	_SPBNoBorrow
.9a3a	c6 35		dec $35				dec 	BasicStack+1
.9a3c	48		pha				pha
.9a3d	a5 35		lda $35				lda 	BasicStack+1
.9a3f	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9a41	90 06		bcc $9a49			bcc 	_SPBMemory
.9a43					_SPBNoBorrow:
.9a43	c6 34		dec $34				dec 	BasicStack
.9a45	68		pla				pla 								; get back and write
.9a46	92 34		sta ($34)			sta 	(BasicStack)
.9a48	60		rts				rts
.9a49					_SPBMemory:
.9a49	a9 12		lda #$12		lda	#18
.9a4b	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.9a4e					StackPopByte:
.9a4e	b2 34		lda ($34)			lda 	(BasicStack)
.9a50	e6 34		inc $34				inc 	BasicStack
.9a52	d0 02		bne $9a56			bne 	_SPBNoCarry
.9a54	e6 35		inc $35				inc 	BasicStack+1
.9a56					_SPBNoCarry:
.9a56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9a57					StackOpen:
.9a57	48		pha				pha 								; save frame byte
.9a58	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9a5a	0a		asl a				asl 	a 							; claim twice this for storage
.9a5b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9a5d	38		sec				sec 								; so basically subtracting from
.9a5e	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9a60	85 34		sta $34				sta 	basicStack
.9a62	b0 08		bcs $9a6c			bcs 	_SONoBorrow
.9a64	c6 35		dec $35				dec 	basicStack+1
.9a66	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9a68	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9a6a	90 04		bcc $9a70			bcc 	_SOMemory
.9a6c					_SONoBorrow:
.9a6c	68		pla				pla 								; get marker back and write at TOS
.9a6d	92 34		sta ($34)			sta 	(basicStack)
.9a6f	60		rts				rts
.9a70					_SOMemory:
.9a70	a9 12		lda #$12		lda	#18
.9a72	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.9a75					StackClose:
.9a75	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9a77	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9a79	0a		asl a				asl 	a 							; claim twice this.
.9a7a	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9a7c	85 34		sta $34				sta 	basicStack
.9a7e	90 02		bcc $9a82			bcc 	_SCExit
.9a80	e6 35		inc $35				inc 	basicStack+1
.9a82					_SCExit:
.9a82	60		rts				rts
.9a83					StackCheckFrame:
.9a83	48		pha				pha
.9a84					_StackRemoveLocals:
.9a84	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9a86	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9a88	b0 05		bcs $9a8f			bcs 	_SCNoLocal
.9a8a	20 cb a0	jsr $a0cb			jsr 	LocalPopValue
.9a8d	80 f5		bra $9a84			bra 	_StackRemoveLocals
.9a8f					_SCNoLocal:
.9a8f	68		pla				pla
.9a90	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9a92	29 f0		and #$f0			and 	#$F0 						; check type bits
.9a94	d0 01		bne $9a97			bne 	_SCFError 					; different, we have structures mixed up
.9a96	60		rts				rts
.9a97					_SCFError:
.9a97	8a		txa				txa 								; report error X
.9a98	4c eb 8d	jmp $8deb			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9a9b					STKSaveCodePosition:
.9a9b	5a		phy				phy
.9a9c	98		tya				tya 								; save Y
.9a9d	a0 05		ldy #$05			ldy 	#5
.9a9f	91 34		sta ($34),y			sta 	(basicStack),y
.9aa1	88		dey				dey 								; save Code Pointer
.9aa2					_STKSaveLoop:
.9aa2	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9aa5	91 34		sta ($34),y			sta 	(basicStack),y
.9aa7	88		dey				dey
.9aa8	d0 f8		bne $9aa2			bne 	_STKSaveLoop
.9aaa	7a		ply				ply
.9aab	60		rts				rts
.9aac					STKLoadCodePosition:
.9aac	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9aae					_STKLoadLoop:
.9aae	b1 34		lda ($34),y			lda 	(basicStack),y
.9ab0	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9ab3	c8		iny				iny
.9ab4	c0 05		cpy #$05			cpy 	#5
.9ab6	d0 f6		bne $9aae			bne 	_STKLoadLoop
.9ab8	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9aba	a8		tay				tay
.9abb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9abc					StackReset:
.9abc	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9abe	85 34		sta $34				sta 	0+basicStack
.9ac0	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9ac2	85 35		sta $35				sta 	1+basicStack
.9ac4	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9ac6	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9ac8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a9ae					StringConcrete:
.a9ae	5a		phy				phy 								; save position on stack
.a9af	20 b2 96	jsr $96b2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a9b2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a9b5	85 38		sta $38				sta 	zTemp1
.a9b7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a9ba	85 39		sta $39				sta 	zTemp1+1
.a9bc	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a9be					_SALength:
.a9be	c8		iny				iny
.a9bf	b1 38		lda ($38),y			lda 	(zTemp1),y
.a9c1	d0 fb		bne $a9be			bne 	_SALength
.a9c3	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a9c5	b0 3f		bcs $aa06			bcs 	_SALengthError
.a9c7	98		tya				tya 				 				; length of the new string
.a9c8	18		clc				clc
.a9c9	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a9cb	90 02		bcc $a9cf			bcc 	_SAHaveLength
.a9cd	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a9cf					_SAHaveLength:
.a9cf	48		pha				pha 								; save length.
.a9d0	38		sec				sec
.a9d1	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a9d3	6d 8e 04	adc $048e			adc 	StringMemory
.a9d6	8d 8e 04	sta $048e			sta 	StringMemory
.a9d9	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a9db	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a9de	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a9e0	6d 8f 04	adc $048f			adc 	StringMemory+1
.a9e3	8d 8f 04	sta $048f			sta 	StringMemory+1
.a9e6	85 3b		sta $3b				sta 	zTemp2+1
.a9e8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9eb	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a9ec	38		sec				sec
.a9ed	e9 03		sbc #$03			sbc 	#3
.a9ef	92 3a		sta ($3a)			sta 	(zTemp2)
.a9f1	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a9f3	a0 01		ldy #$01			ldy 	#1
.a9f5	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a9f7					_SACopyNewString:
.a9f7	a0 00		ldy #$00			ldy 	#0
.a9f9					_SACopyNSLoop:
.a9f9	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a9fb	c8		iny				iny 								; write two on in string storage
.a9fc	c8		iny				iny
.a9fd	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a9ff	88		dey				dey 								; this makes it one one.
.aa00	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.aa02	d0 f5		bne $a9f9			bne 	_SACopyNSLoop
.aa04	7a		ply				ply
.aa05	60		rts				rts
.aa06					_SALengthError:
.aa06	a9 09		lda #$09		lda	#9
.aa08	4c eb 8d	jmp $8deb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.aa0b					StringSystemInitialise:
.aa0b	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.aa0d	8d 8e 04	sta $048e			sta 	0+StringMemory
.aa10	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.aa12	8d 8f 04	sta $048f			sta 	1+StringMemory
.aa15	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.aa18	60		rts				rts
.aa19					StringSpaceInitialise:
.aa19	20 b2 96	jsr $96b2			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.aa1c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.aa1e	8d 90 04	sta $0490			sta 	StringInitialised
.aa21	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.aa24	8d 91 04	sta $0491			sta 	StringTempPointer
.aa27	ad 8f 04	lda $048f			lda 	StringMemory+1
.aa2a	3a		dec a				dec 	a
.aa2b	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aa2e	60		rts				rts
.aa2f					StringTempAllocate:
.aa2f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.aa31	b0 35		bcs $aa68			bcs 	_STALength
.aa33	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.aa36	30 05		bmi $aa3d			bmi 	_STAAllocate
.aa38	48		pha				pha 								; save value to subtract.
.aa39	20 19 aa	jsr $aa19			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.aa3c	68		pla				pla 								; restore it
.aa3d					_STAAllocate:
.aa3d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.aa3f	18		clc				clc  								; deliberate allows one more
.aa40	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.aa43	8d 91 04	sta $0491			sta 	StringTempPointer
.aa46	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.aa49	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.aa4b	ad 92 04	lda $0492			lda 	StringTempPointer+1
.aa4e	69 ff		adc #$ff			adc 	#$FF
.aa50	8d 92 04	sta $0492			sta 	StringTempPointer+1
.aa53	85 3d		sta $3d				sta 	zsTemp+1
.aa55	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa58	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.aa5b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.aa5e	a9 10		lda #$10			lda 	#NSTString
.aa60	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa63	a9 00		lda #$00			lda 	#0 							; clear the target string
.aa65	92 3c		sta ($3c)			sta 	(zsTemp)
.aa67	60		rts				rts
.aa68					_STALength:
.aa68	a9 09		lda #$09		lda	#9
.aa6a	4c eb 8d	jmp $8deb		jmp	ErrorHandler
.aa6d					StringTempWrite:
.aa6d	48		pha				pha
.aa6e	92 3c		sta ($3c)			sta 	(zsTemp)
.aa70	e6 3c		inc $3c				inc 	zsTemp
.aa72	d0 02		bne $aa76			bne 	_STWNoCarry
.aa74	e6 3d		inc $3d				inc 	zsTemp+1
.aa76					_STWNoCarry:
.aa76	a9 00		lda #$00			lda 	#0
.aa78	92 3c		sta ($3c)			sta 	(zsTemp)
.aa7a	68		pla				pla
.aa7b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9ac9					BackloadProgram:
.9ac9	a2 ff		ldx #$ff			ldx 	#$FF
.9acb	20 f3 9a	jsr $9af3			jsr 	BLReadByte
.9ace	30 1f		bmi $9aef			bmi 	_BPExit
.9ad0					_BPCopy:
.9ad0	e8		inx				inx  								; copy byte in
.9ad1	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9ad4	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9ad7	20 f3 9a	jsr $9af3			jsr 	BLReadByte 					; read next byte
.9ada	30 0a		bmi $9ae6			bmi 	_BPEndLine 					; -ve = EOL
.9adc	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9ade	d0 02		bne $9ae2			bne 	_BPNotTab
.9ae0	a9 20		lda #$20			lda 	#' '
.9ae2					_BPNotTab:
.9ae2	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9ae4	b0 ea		bcs $9ad0			bcs 	_BPCopy
.9ae6					_BPEndLine:
.9ae6	20 1c 9e	jsr $9e1c			jsr 	TokeniseLine 				; tokenise the line.
.9ae9	38		sec				sec 								; append not insert
.9aea	20 28 a9	jsr $a928			jsr 	MemoryInsertLine 			; append to current program
.9aed	80 da		bra $9ac9			bra 	BackloadProgram
.9aef					_BPExit:
.9aef	20 1b 84	jsr $841b			jsr 	ClearCommand 				; clear variables etc.
.9af2	60		rts				rts
.9af3					BLReadByte:
.9af3					_BLLoad:
.9af3	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9af6	ee f4 9a	inc $9af4			inc 	_BLLoad+1
.9af9	d0 03		bne $9afe			bne 	_BLNoCarry
.9afb	ee f5 9a	inc $9af5			inc 	_BLLoad+2
.9afe					_BLNoCarry:
.9afe	c9 00		cmp #$00			cmp 	#0
.9b00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9b01					TokeniseSearchTable:
.9b01	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9b03	85 36		sta $36				sta 	zTemp0
.9b05	a0 00		ldy #$00			ldy 	#0
.9b07	a9 80		lda #$80			lda 	#$80 						; token #
.9b09	85 38		sta $38				sta 	zTemp1
.9b0b					_TSTLoop:
.9b0b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9b0d	30 49		bmi $9b58			bmi 	_TSTFail 					; -ve = end of table
.9b0f	f0 2e		beq $9b3f			beq 	_TSTNext 					; zero, check next it's a dummy
.9b11	c8		iny				iny 								; get the hash
.9b12	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b14	88		dey				dey
.9b15	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9b18	d0 25		bne $9b3f			bne 	_TSTNext
.9b1a	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9b1d	38		sec				sec
.9b1e	ed 80 04	sbc $0480			sbc 	identStart
.9b21	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9b23	d0 1a		bne $9b3f			bne 	_TSTNext
.9b25	5a		phy				phy 								; save Y , we might fail
.9b26	c8		iny				iny 								; point to text
.9b27	c8		iny				iny
.9b28	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9b2b					_TSTCompareName:
.9b2b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9b2e	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9b30	d0 0c		bne $9b3e			bne 	_TSTNextPullY 				; fail, pullY and do next
.9b32	e8		inx				inx
.9b33	c8		iny				iny
.9b34	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9b37	d0 f2		bne $9b2b			bne 	_TSTCompareName
.9b39	7a		ply				ply 								; throw Y
.9b3a	a5 38		lda $38				lda 	zTemp1 						; get token #
.9b3c	38		sec				sec 								; return with CS = passed.
.9b3d	60		rts				rts
.9b3e					_TSTNextPullY:
.9b3e	7a		ply				ply 								; restore current, fall through.
.9b3f					_TSTNext:
.9b3f	e6 38		inc $38				inc 	zTemp1 						; token counter
.9b41	98		tya				tya
.9b42	18		clc				clc
.9b43	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9b45	1a		inc a				inc 	a 							; +1
.9b46	1a		inc a				inc 	a 							; +2
.9b47	a8		tay				tay
.9b48	10 c1		bpl $9b0b			bpl 	_TSTLoop 					; if Y < $80 loop back
.9b4a	98		tya				tya 								; add Y to zTemp0 and reset Y
.9b4b	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9b4d	18		clc				clc  								; but have tables > 255 bytes
.9b4e	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9b50	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9b52	90 b7		bcc $9b0b			bcc 	_TSTLoop
.9b54	e6 37		inc $37				inc 	zTemp0+1
.9b56	80 b3		bra $9b0b			bra 	_TSTLoop
.9b58					_TSTFail:
.9b58	18		clc				clc
.9b59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9b5a					KeywordSet0:
>9b5a	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b5c	00 58					.text	0,$58,""               ; $81 !1:SH1
>9b5e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9b60	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9b66	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9b6e	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9b74	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9b7b	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9b82	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9b89	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9b8f	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9b97	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9b9f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9ba5	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9bac	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9bb2	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9bba	28
>9bbb	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9bc3	28
>9bc4	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9bca	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9bd0	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9bd6	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9bdd	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9be3	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9be9	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9bee	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9bf2	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9bf8	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9c00	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9c07	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9c0e	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9c16	43
>9c17	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9c1d	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9c23	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9c2a	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9c30	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9c36	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9c3b	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9c41	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9c46	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9c4e	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9c54	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9c5b	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9c61	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9c66	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9c6d	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9c74	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9c7a	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9c7f	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9c87	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9c8b	ff					.text	$FF
.9c8c					KeywordSet1:
>9c8c	00 65					.text	0,$65,""               ; $80 !0:EOF
>9c8e	00 58					.text	0,$58,""               ; $81 !1:SH1
>9c90	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9c92	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9c9a	4c 45
>9c9c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9ca4	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9cab	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9cb0	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9cb6	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9cbb	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9cc3	45
>9cc4	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9cc9	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9ccf	ff					.text	$FF
.9cd0					KeywordSet2:
>9cd0	00 65					.text	0,$65,""               ; $80 !0:EOF
>9cd2	00 58					.text	0,$58,""               ; $81 !1:SH1
>9cd4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9cd6	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9cdb	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9ce0	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9ce5	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9cea	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9cef	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9cf4	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9cf9	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9cfe	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9d03	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9d08	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9d0d	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9d12	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9d17	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9d1c	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9d21	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9d26	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9d2b	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9d30	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9d35	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9d3a	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9d3f	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9d44	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9d49	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9d4e	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9d53	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9d58	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9d5d	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9d62	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9d67	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9d6c	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9d71	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9d76	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9d7b	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9d80	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9d85	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9d8a	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9d8f	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9d94	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9d99	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9d9e	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9da3	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9da8	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9dad	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9db2	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9db7	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9dbc	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9dc1	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9dc6	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9dcb	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9dd0	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9dd5	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9dda	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9ddf	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>9de4	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>9de9	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>9dee	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>9df3	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>9df8	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>9dfd	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>9e02	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>9e07	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>9e0c	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>9e11	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>9e16	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>9e1b	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9e1c					TokeniseLine:
.9e1c	20 a4 9f	jsr $9fa4			jsr 	FixLineBufferCase 			; fix line case
.9e1f	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9e21	8d a6 04	sta $04a6			sta 	tokenOffset
.9e24	9c a7 04	stz $04a7			stz 	tokenLineNumber
.9e27	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.9e2a	a2 ff		ldx #$ff			ldx 	#$FF
.9e2c					_TKFindFirst:
.9e2c	e8		inx				inx
.9e2d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.9e30	f0 79		beq $9eab			beq 	_TKExit
.9e32	c9 20		cmp #$20			cmp 	#' '
.9e34	90 f6		bcc $9e2c			bcc 	_TKFindFirst
.9e36	c9 30		cmp #$30			cmp 	#'0'
.9e38	90 07		bcc $9e41			bcc 	_TKNoLineNumber
.9e3a	c9 3a		cmp #$3a			cmp 	#'9'+1
.9e3c	b0 03		bcs $9e41			bcs 	_TKNoLineNumber
.9e3e	20 ce 9f	jsr $9fce			jsr 	TokeniseExtractLineNumber
.9e41					_TKNoLineNumber:
.9e41					_TKTokeniseLoop:
.9e41	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9e44	f0 65		beq $9eab			beq 	_TKExit
.9e46	e8		inx				inx
.9e47	c9 20		cmp #$20			cmp 	#' '
.9e49	f0 f6		beq $9e41			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9e4b	ca		dex				dex 								; undo last get, A contains character, X is position.
.9e4c	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9e4e	f0 61		beq $9eb1			beq 	_TKTokeniseIdentifier
.9e50	c9 41		cmp #$41			cmp 	#'A'
.9e52	90 04		bcc $9e58			bcc 	_TKTokenisePunctuation
.9e54	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9e56	90 59		bcc $9eb1			bcc 	_TKTokeniseIdentifier
.9e58					_TKTokenisePunctuation:
.9e58	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9e5a	f0 27		beq $9e83			beq 	_TKString
.9e5c	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9e5e	f0 28		beq $9e88			beq 	_TKHexConstant
.9e60	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9e62	f0 29		beq $9e8d			beq 	_TKCheckDouble
.9e64	c9 3e		cmp #$3e			cmp 	#'>'
.9e66	f0 25		beq $9e8d			beq 	_TKCheckDouble
.9e68					_TKStandardPunctuation:
.9e68	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.9e6b	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9e6d	90 0e		bcc $9e7d			bcc 	_TKNoShift
.9e6f	48		pha				pha 								; save
.9e70	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9e72	85 36		sta $36				sta 	zTemp0
.9e74	68		pla				pla
.9e75	29 20		and #$20			and 	#32 						; bit 5
.9e77	4a		lsr a				lsr 	a 							; shift into bit 3
.9e78	4a		lsr a				lsr 	a
.9e79	05 36		ora $36				ora 	zTemp0
.9e7b	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9e7d					_TKNoShift:
.9e7d	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte 			; write the punctuation character
.9e80	e8		inx				inx 								; consume the character
.9e81	80 be		bra $9e41			bra 	_TKTokeniseLoop 			; and loop round again.
.9e83					_TKString:
.9e83	20 33 9f	jsr $9f33			jsr 	TokeniseString
.9e86	80 b9		bra $9e41			bra 	_TKTokeniseLoop
.9e88					_TKHexConstant:
.9e88	20 6e 9f	jsr $9f6e			jsr 	TokeniseHexConstant
.9e8b	80 b4		bra $9e41			bra 	_TKTokeniseLoop
.9e8d					_TKCheckDouble:
.9e8d	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.9e90	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9e92	90 d4		bcc $9e68			bcc 	_TKStandardPunctuation
.9e94	c9 3f		cmp #$3f			cmp 	#'>'+1
.9e96	b0 d0		bcs $9e68			bcs 	_TKStandardPunctuation
.9e98	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9e9b	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9e9d	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9e9e	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9ea1	38		sec				sec
.9ea2	e9 3c		sbc #$3c			sbc 	#'<'
.9ea4	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9ea7	e8		inx				inx 								; consume both
.9ea8	e8		inx				inx
.9ea9	80 96		bra $9e41			bra 	_TKTokeniseLoop
.9eab	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9ead	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.9eb0	60		rts				rts
.9eb1					_TKTokeniseIdentifier:
.9eb1	8e 80 04	stx $0480			stx 	identStart 					; save start
.9eb4	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.9eb7					_TKCheckLoop:
.9eb7	e8		inx				inx 								; look at next, we know first is identifier.
.9eb8	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.9ebb	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9ebd	f0 f8		beq $9eb7			beq 	_TKCheckLoop
.9ebf	c9 30		cmp #$30			cmp	 	#"0"
.9ec1	90 0c		bcc $9ecf			bcc 	_TKEndIdentifier
.9ec3	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ec5	90 f0		bcc $9eb7			bcc 	_TKCheckLoop
.9ec7	c9 41		cmp #$41			cmp	 	#"A"
.9ec9	90 04		bcc $9ecf			bcc 	_TKEndIdentifier
.9ecb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9ecd	90 e8		bcc $9eb7			bcc 	_TKCheckLoop
.9ecf					_TKEndIdentifier:
.9ecf	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.9ed2	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9ed4	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9ed6	f0 06		beq $9ede			beq 	_TKHasTypeCharacter
.9ed8	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9eda	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9edc	d0 07		bne $9ee5			bne 	_TKNoTypeCharacter
.9ede					_TKHasTypeCharacter:
.9ede	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.9ee1	e8		inx				inx 								; read next
.9ee2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.9ee5					_TKNoTypeCharacter:
.9ee5	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9ee7	d0 09		bne $9ef2			bne 	_TKNoArray
.9ee9	e8		inx				inx 								; skip the (
.9eea	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9eed	09 04		ora #$04			ora 	#$04
.9eef	8d 84 04	sta $0484			sta 	identTypeByte
.9ef2					_TKNoArray:
.9ef2	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9ef5	20 8f 9f	jsr $9f8f			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9ef8	a0 9b		ldy #$9b			ldy 	#(KeywordSet0) >> 8
.9efa	a9 5a		lda #$5a			lda 	#(KeywordSet0) & $FF
.9efc	20 01 9b	jsr $9b01			jsr 	TokeniseSearchTable
.9eff	a2 00		ldx #$00			ldx 	#0
.9f01	b0 1f		bcs $9f22			bcs 	_TKFoundToken
.9f03	a0 9c		ldy #$9c			ldy 	#(KeywordSet1) >> 8
.9f05	a9 8c		lda #$8c			lda 	#(KeywordSet1) & $FF
.9f07	20 01 9b	jsr $9b01			jsr 	TokeniseSearchTable
.9f0a	a2 81		ldx #$81			ldx 	#$81
.9f0c	b0 14		bcs $9f22			bcs 	_TKFoundToken
.9f0e	a0 9c		ldy #$9c			ldy 	#(KeywordSet2) >> 8
.9f10	a9 d0		lda #$d0			lda 	#(KeywordSet2) & $FF
.9f12	20 01 9b	jsr $9b01			jsr 	TokeniseSearchTable
.9f15	a2 82		ldx #$82			ldx 	#$82
.9f17	b0 09		bcs $9f22			bcs 	_TKFoundToken
.9f19	20 1f a0	jsr $a01f			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9f1c	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.9f1f	4c 41 9e	jmp $9e41			jmp 	_TKTokeniseLoop 			; and go round again.
.9f22					_TKFoundToken:
.9f22	48		pha				pha 								; save token
.9f23	8a		txa				txa 								; shift in X, is there one ?
.9f24	f0 03		beq $9f29			beq 	_TKNoTShift
.9f26	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte 			; if so, write it out
.9f29					_TKNoTShift:
.9f29	68		pla				pla 								; restore and write token
.9f2a	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.9f2d	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.9f30	4c 41 9e	jmp $9e41			jmp 	_TKTokeniseLoop 			; and go round again.
.9f33					TokeniseString:
.9f33	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9f35	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.9f38	e8		inx				inx									; start of quoted string.
.9f39	da		phx				phx 								; push start of string on top
.9f3a	ca		dex				dex
.9f3b					_TSFindEnd:
.9f3b	e8		inx				inx
.9f3c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.9f3f	f0 04		beq $9f45			beq 	_TSEndOfString
.9f41	c9 22		cmp #$22			cmp 	#'"'
.9f43	d0 f6		bne $9f3b			bne 	_TSFindEnd
.9f45					_TSEndOfString:
.9f45	7a		ply				ply  								; so now Y is first character, X is character after end.
.9f46	48		pha				pha 								; save terminating character
.9f47	20 4f 9f	jsr $9f4f			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9f4a	68		pla				pla 								; terminating character
.9f4b	f0 01		beq $9f4e			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9f4d	e8		inx				inx
.9f4e					_TSNotQuote:
.9f4e	60		rts				rts
.9f4f					TOWriteBlockXY:
.9f4f	86 36		stx $36				stx 	zTemp0 						; write end character
.9f51	98		tya				tya
.9f52	49 ff		eor #$ff			eor 	#$FF
.9f54	38		sec				sec
.9f55	65 36		adc $36				adc 	zTemp0
.9f57	1a		inc a				inc 	a 							; one extra for NULL
.9f58	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.9f5b					_TOBlockLoop:
.9f5b	c4 36		cpy $36				cpy 	zTemp0
.9f5d	f0 09		beq $9f68			beq 	_TOBlockExit
.9f5f	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.9f62	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.9f65	c8		iny				iny
.9f66	80 f3		bra $9f5b			bra 	_TOBlockLoop
.9f68					_TOBlockExit:
.9f68	a9 00		lda #$00			lda 	#0
.9f6a	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.9f6d	60		rts				rts
.9f6e					TokeniseHexConstant:
.9f6e	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9f70	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.9f73	e8		inx				inx									; start of quoted string.
.9f74	da		phx				phx 								; push start of constant on top
.9f75	ca		dex				dex
.9f76					_THFindLoop:
.9f76	e8		inx				inx
.9f77	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.9f7a	c9 30		cmp #$30			cmp 	#"0"
.9f7c	90 0c		bcc $9f8a			bcc 	_THFoundEnd
.9f7e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9f80	90 f4		bcc $9f76			bcc 	_THFindLoop
.9f82	c9 41		cmp #$41			cmp 	#"A"
.9f84	90 04		bcc $9f8a			bcc 	_THFoundEnd
.9f86	c9 47		cmp #$47			cmp 	#"F"+1
.9f88	90 ec		bcc $9f76			bcc 	_THFindLoop
.9f8a					_THFoundEnd:
.9f8a	7a		ply				ply 								; restore start
.9f8b	20 4f 9f	jsr $9f4f			jsr 	TOWriteBlockXY 				; output the block
.9f8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9f8f					TokeniseCalculateHash:
.9f8f	da		phx				phx
.9f90	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9f93	a9 00		lda #$00			lda 	#0
.9f95					_TCHLoop:
.9f95	18		clc				clc
.9f96	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.9f99	e8		inx				inx
.9f9a	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9f9d	d0 f6		bne $9f95			bne 	_TCHLoop
.9f9f	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.9fa2	fa		plx				plx
.9fa3	60		rts				rts
.9fa4					FixLineBufferCase:
.9fa4	a2 00		ldx #$00			ldx 	#0
.9fa6					_FLBCLoop:
.9fa6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.9fa9	f0 22		beq $9fcd			beq 	_FLBCExit 					; end of string.
.9fab	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9fad	f0 11		beq $9fc0			beq 	_FLBCInQuotes
.9faf	e8		inx				inx
.9fb0	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9fb2	90 f2		bcc $9fa6			bcc 	_FLBCLoop
.9fb4	c9 7b		cmp #$7b			cmp 	#'z'+1
.9fb6	b0 ee		bcs $9fa6			bcs 	_FLBCLoop
.9fb8	38		sec				sec 								; make U/C
.9fb9	e9 20		sbc #$20			sbc 	#32
.9fbb	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.9fbe	80 e6		bra $9fa6			bra 	_FLBCLoop
.9fc0					_FLBCInQuotes:
.9fc0	e8		inx				inx 								; advance
.9fc1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.9fc4	f0 07		beq $9fcd			beq 	_FLBCExit 					; exit on EOS
.9fc6	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9fc8	d0 f6		bne $9fc0			bne 	_FLBCInQuotes
.9fca	e8		inx				inx 								; skip over it
.9fcb	80 d9		bra $9fa6			bra 	_FLBCLoop
.9fcd					_FLBCExit:
.9fcd	60		rts				rts
.9fce					TokeniseExtractLineNumber:
.9fce	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.9fd1	48		pha				pha
.9fd2	ad a7 04	lda $04a7			lda 	tokenLineNumber
.9fd5	48		pha				pha
.9fd6	20 0c a0	jsr $a00c			jsr 	_TELNTimes2 				; line # x 4
.9fd9	20 0c a0	jsr $a00c			jsr 	_TELNTimes2 				; line # x 2
.9fdc	18		clc				clc 								; add stacked value
.9fdd	68		pla				pla
.9fde	6d a7 04	adc $04a7			adc 	tokenLineNumber
.9fe1	8d a7 04	sta $04a7			sta 	tokenLineNumber
.9fe4	68		pla				pla
.9fe5	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.9fe8	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.9feb	20 0c a0	jsr $a00c			jsr 	_TELNTimes2 				; line # x 10
.9fee	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.9ff1	e8		inx				inx
.9ff2	29 0f		and #$0f			and 	#15 						; add to line #
.9ff4	18		clc				clc
.9ff5	6d a7 04	adc $04a7			adc 	tokenLineNumber
.9ff8	8d a7 04	sta $04a7			sta 	tokenLineNumber
.9ffb	90 03		bcc $a000			bcc 	_TLENNoCarry
.9ffd	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a000					_TLENNoCarry:
.a000	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a003	c9 30		cmp #$30			cmp 	#'0'
.a005	90 04		bcc $a00b			bcc 	_TLENExit
.a007	c9 3a		cmp #$3a			cmp 	#'9'+1
.a009	90 c3		bcc $9fce			bcc 	TokeniseExtractLineNumber
.a00b					_TLENExit:
.a00b	60		rts				rts
.a00c					_TELNTimes2:
.a00c	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a00f	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a012	60		rts				rts
.a013					TokeniseWriteByte:
.a013	da		phx				phx
.a014	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a017	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a01a	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a01d	fa		plx				plx
.a01e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a01f					CheckCreateVariableRecord:
.a01f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a021	85 36		sta $36				sta 	0+zTemp0
.a023	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a025	85 37		sta $37				sta 	1+zTemp0
.a027					_CCVSearch:
.a027	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a029	f0 2c		beq $a057			beq 	_CCVFail
.a02b	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a02d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a02f	cd 83 04	cmp $0483			cmp 	identHash
.a032	d0 16		bne $a04a			bne 	_CCVNext
.a034	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a036	ae 80 04	ldx $0480			ldx 	identStart
.a039					_CCVCompare:
.a039	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a03c	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a03e	e8		inx				inx 								; advance pointers
.a03f	c8		iny				iny
.a040	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a041	d0 07		bne $a04a			bne 	_CCVNext  					; didn't match go to next.
.a043	90 f4		bcc $a039			bcc 	_CCVCompare 				; not finished yet.
.a045	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a048	f0 41		beq $a08b			beq 	_CCVFound 					; yes, we were successful
.a04a					_CCVNext:
.a04a	18		clc				clc
.a04b	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a04d	65 36		adc $36				adc 	zTemp0
.a04f	85 36		sta $36				sta 	zTemp0
.a051	90 d4		bcc $a027			bcc 	_CCVSearch
.a053	e6 37		inc $37				inc 	zTemp0+1
.a055	80 d0		bra $a027			bra 	_CCVSearch
.a057					_CCVFail:
.a057	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a059	ad 83 04	lda $0483			lda 	identHash
.a05c	91 36		sta ($36),y			sta 	(zTemp0),y
.a05e	c8		iny				iny 								; offset 2 is the type byte
.a05f	ad 84 04	lda $0484			lda 	identTypeByte
.a062	91 36		sta ($36),y			sta 	(zTemp0),y
.a064	c8		iny				iny
.a065					_CCVData:
.a065	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a067	91 36		sta ($36),y			sta 	(zTemp0),y
.a069	c8		iny				iny
.a06a	c0 08		cpy #$08			cpy 	#8
.a06c	90 f7		bcc $a065			bcc 	_CCVData
.a06e	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a071					_CCVCopyName:
.a071	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a074	91 36		sta ($36),y			sta 	(zTemp0),y
.a076	e8		inx				inx
.a077	c8		iny				iny
.a078	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a07b	d0 f4		bne $a071			bne 	_CCVCopyName
.a07d	98		tya				tya 								; patch offset
.a07e	92 36		sta ($36)			sta 	(zTemp0)
.a080	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a082	91 36		sta ($36),y			sta 	(zTemp0),y
.a084	88		dey				dey
.a085	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a087	09 80		ora #$80			ora 	#$80
.a089	91 36		sta ($36),y			sta 	(zTemp0),y
.a08b					_CCVFound:
.a08b	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a08d	38		sec				sec
.a08e	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a090	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a092	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.a095	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a097	20 13 a0	jsr $a013			jsr 	TokeniseWriteByte
.a09a	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
