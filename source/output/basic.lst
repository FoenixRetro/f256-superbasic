
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 15:11:30 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					tokenOffset:
>070c							.fill 	1
.070d					tokenLineNumber:
>070d							.fill 	2
.070f					tokenBuffer:
>070f							.fill 	253
.080c					lineBuffer:
>080c							.fill 	MaxLineSize+1
.085d					numberBuffer:
>085d							.fill 	34

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 4c 81	jsr $814c			jsr 	NewCommand 					; erase current program
.8006	20 e2 88	jsr $88e2			jsr 	BackloadProgram
.8009	4c 63 81	jmp $8163			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 68 93	jsr $9368			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	4b 82					.word	ShiftLeft                        ; $00 <<
>8016	9d 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8018	93 8d					.word	BinaryCompareNotEqual            ; $02 <>
>801a	ab 92					.word	SyntaxError                      ; $03 !!3
>801c	ab 92					.word	SyntaxError                      ; $04 ><
>801e	a7 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	4e 82					.word	ShiftRight                       ; $06 >>
>8022	ab 92					.word	SyntaxError                      ; $07 !!7
>8024	ab 92					.word	SyntaxError                      ; $08 !!8
>8026	ab 92					.word	SyntaxError                      ; $09 !!9
>8028	ab 92					.word	SyntaxError                      ; $0a !!10
>802a	ab 92					.word	SyntaxError                      ; $0b !!11
>802c	ab 92					.word	SyntaxError                      ; $0c !!12
>802e	ab 92					.word	SyntaxError                      ; $0d !!13
>8030	ab 92					.word	SyntaxError                      ; $0e !!14
>8032	ab 92					.word	SyntaxError                      ; $0f !!15
>8034	ab 92					.word	SyntaxError                      ; $10 @
>8036	ab 92					.word	SyntaxError                      ; $11 !!17
>8038	ab 92					.word	SyntaxError                      ; $12 !!18
>803a	ab 92					.word	SyntaxError                      ; $13 [
>803c	0d 8e					.word	IntegerDivide                    ; $14 \
>803e	ab 92					.word	SyntaxError                      ; $15 ]
>8040	d1 83					.word	EorInteger                       ; $16 ^
>8042	ab 92					.word	SyntaxError                      ; $17 _
>8044	ab 92					.word	SyntaxError                      ; $18 `
>8046	ab 92					.word	SyntaxError                      ; $19 !!25
>8048	ab 92					.word	SyntaxError                      ; $1a !!26
>804a	ab 92					.word	SyntaxError                      ; $1b {
>804c	8c 83					.word	OraInteger                       ; $1c |
>804e	ab 92					.word	SyntaxError                      ; $1d }
>8050	ab 92					.word	SyntaxError                      ; $1e ~
>8052	ab 92					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	ab 92					.word	SyntaxError                      ; $20
>8056	ab 92					.word	SyntaxError                      ; $21 !
>8058	ab 92					.word	SyntaxError                      ; $22 "
>805a	ab 92					.word	SyntaxError                      ; $23 #
>805c	ab 92					.word	SyntaxError                      ; $24 $
>805e	59 8e					.word	IntegerModulus                   ; $25 %
>8060	47 83					.word	AndInteger                       ; $26 &
>8062	ab 92					.word	SyntaxError                      ; $27 '
>8064	ab 92					.word	SyntaxError                      ; $28 (
>8066	ab 92					.word	SyntaxError                      ; $29 )
>8068	cd 8e					.word	MulInteger                       ; $2a *
>806a	e1 82					.word	AddInteger                       ; $2b +
>806c	ab 92					.word	SyntaxError                      ; $2c ,
>806e	1c 83					.word	SubInteger                       ; $2d -
>8070	ab 92					.word	SyntaxError                      ; $2e .
>8072	64 90					.word	FDivideCommand                   ; $2f /
>8074	ab 92					.word	SyntaxError                      ; $30 0
>8076	ab 92					.word	SyntaxError                      ; $31 1
>8078	ab 92					.word	SyntaxError                      ; $32 2
>807a	ab 92					.word	SyntaxError                      ; $33 3
>807c	ab 92					.word	SyntaxError                      ; $34 4
>807e	ab 92					.word	SyntaxError                      ; $35 5
>8080	ab 92					.word	SyntaxError                      ; $36 6
>8082	ab 92					.word	SyntaxError                      ; $37 7
>8084	ab 92					.word	SyntaxError                      ; $38 8
>8086	ab 92					.word	SyntaxError                      ; $39 9
>8088	ab 92					.word	SyntaxError                      ; $3a :
>808a	ab 92					.word	SyntaxError                      ; $3b ;
>808c	7f 8d					.word	BinaryCompareLess                ; $3c <
>808e	75 8d					.word	BinaryCompareEqual               ; $3d =
>8090	89 8d					.word	BinaryCompareGreater             ; $3e >
>8092	ab 92					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	9a 81					.word	EOLCommand                       ; $80 !0:EOF
>8096	a7 81					.word	Shift1Command                    ; $81 !1:SH1
>8098	ab 92					.word	SyntaxError                      ; $82 !2:SH2
>809a	aa 91					.word	AbsUnary                         ; $83 ABS(
>809c	ab 92					.word	SyntaxError                      ; $84 ALLOC(
>809e	ba 91					.word	AscUnary                         ; $85 ASC(
>80a0	ab 92					.word	SyntaxError                      ; $86 CHR$(
>80a2	71 8d					.word	UnaryFalse                       ; $87 FALSE
>80a4	c7 91					.word	FracUnary                        ; $88 FRAC(
>80a6	dd 91					.word	IntUnary                         ; $89 INT(
>80a8	33 92					.word	IsValUnary                       ; $8a ISVAL(
>80aa	ab 92					.word	SyntaxError                      ; $8b LEFT$(
>80ac	ef 91					.word	LenUnary                         ; $8c LEN(
>80ae	ab 92					.word	SyntaxError                      ; $8d MID$(
>80b0	3d 87					.word	Unary_Not                        ; $8e NOT(
>80b2	ab 92					.word	SyntaxError                      ; $8f RIGHT$(
>80b4	53 87					.word	Unary_Rnd                        ; $90 RND(
>80b6	09 92					.word	SgnUnary                         ; $91 SGN(
>80b8	ab 92					.word	SyntaxError                      ; $92 SPC(
>80ba	ab 92					.word	SyntaxError                      ; $93 STR$(
>80bc	65 8d					.word	UnaryTrue                        ; $94 TRUE
>80be	29 92					.word	ValUnary                         ; $95 VAL(
>80c0	ab 92					.word	SyntaxError                      ; $96 FOR
>80c2	ab 92					.word	SyntaxError                      ; $97 IF
>80c4	ab 92					.word	SyntaxError                      ; $98 PROC
>80c6	ab 92					.word	SyntaxError                      ; $99 REPEAT
>80c8	ab 92					.word	SyntaxError                      ; $9a WHILE
>80ca	ab 92					.word	SyntaxError                      ; $9b ENDIF
>80cc	ab 92					.word	SyntaxError                      ; $9c ENDPROC
>80ce	ab 92					.word	SyntaxError                      ; $9d NEXT
>80d0	ab 92					.word	SyntaxError                      ; $9e UNTIL
>80d2	ab 92					.word	SyntaxError                      ; $9f WEND
>80d4	18 81					.word	CallCommand                      ; $a0 CALL
>80d6	ab 92					.word	SyntaxError                      ; $a1 CLS
>80d8	ab 92					.word	SyntaxError                      ; $a2 DATA
>80da	ab 92					.word	SyntaxError                      ; $a3 DIM
>80dc	ab 92					.word	SyntaxError                      ; $a4 GOSUB
>80de	ab 92					.word	SyntaxError                      ; $a5 GOTO
>80e0	ab 92					.word	SyntaxError                      ; $a6 LET
>80e2	ab 92					.word	SyntaxError                      ; $a7 PRINT
>80e4	ab 92					.word	SyntaxError                      ; $a8 READ
>80e6	56 81					.word	RemCommand                       ; $a9 REM
>80e8	ab 92					.word	SyntaxError                      ; $aa RETURN
>80ea	ab 92					.word	SyntaxError                      ; $ab THEN
>80ec	ab 92					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	ab 92					.word	SyntaxError                      ; $80 !0:EOF
>80f0	ab 92					.word	SyntaxError                      ; $81 !1:SH1
>80f2	ab 92					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	24 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	49 81					.word	EndCommand                       ; $85 END
>80fa	ab 92					.word	SyntaxError                      ; $86 LIST
>80fc	4c 81					.word	NewCommand                       ; $87 NEW
>80fe	ab 92					.word	SyntaxError                      ; $88 RESTORE
>8100	63 81					.word	CommandRUN                       ; $89 RUN
>8102	ab 92					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	ab 92					.word	SyntaxError                      ; $80 !0:EOF
>8106	ab 92					.word	SyntaxError                      ; $81 !1:SH1
>8108	ab 92					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.810a					AssertCommand:
.810a	20 cc 87	jsr $87cc			jsr 	EvaluateInteger 			; the assert test
.810d	20 82 88	jsr $8882			jsr 	NSMIsZero 					; exit if result is non zero.
.8110	d0 05		bne $8117			bne 	_ACExit
.8112	a9 0a		lda #$0a		lda	#10
.8114	4c af 81	jmp $81af		jmp	ErrorHandler
.8117					_ACExit:
.8117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8118					CallCommand:
.8118	20 e1 87	jsr $87e1			jsr 	Evaluate16BitInteger
.811b	ad 10 06	lda $0610			lda 	NSMantissa1
.811e	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8121	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8124					ClearCommand:
.8124	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8126	85 36		sta $36				sta 	0+zTemp0
.8128	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812a	85 37		sta $37				sta 	1+zTemp0
.812c					_ClearZeroLoop:
.812c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.812e	f0 18		beq $8148			beq 	_ClearZeroEnd
.8130	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8132	a9 00		lda #$00			lda 	#0
.8134					_ClearOneVariable:
.8134	91 36		sta ($36),y			sta 	(zTemp0),y
.8136	c8		iny				iny
.8137	c0 08		cpy #$08			cpy 	#8
.8139	d0 f9		bne $8134			bne 	_ClearOneVariable
.813b	18		clc				clc 								; go to the next variable
.813c	b2 36		lda ($36)			lda 	(zTemp0)
.813e	65 36		adc $36				adc 	zTemp0
.8140	85 36		sta $36				sta 	zTemp0
.8142	90 e8		bcc $812c			bcc 	_ClearZeroLoop
.8144	e6 37		inc $37				inc 	zTemp0+1
.8146	80 e4		bra $812c			bra 	_ClearZeroLoop
.8148					_ClearZeroEnd:
.8148	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8149					EndCommand:
.8149	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.814c					NewCommand:
.814c	20 8f 88	jsr $888f			jsr 	MemoryNew
.814f	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8152	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear everything.
.8155	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8156					RemCommand:
.8156	b1 30		lda ($30),y			lda 	(codePtr),y
.8158	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.815a	d0 06		bne $8162			bne 	_RMExit
.815c	c8		iny				iny
.815d	98		tya				tya
.815e	38		sec				sec
.815f	71 30		adc ($30),y			adc 	(codePtr),y
.8161	a8		tay				tay
.8162					_RMExit:
.8162	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8163					CommandRUN:
.8163	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8166	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8168	85 30		sta $30				sta 	codePtr
.816a	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.816c	85 31		sta $31				sta 	codePtr+1
.816e					RUNNewLine:
.816e	b2 30		lda ($30)			lda 	(codePtr)
.8170	f0 25		beq $8197			beq 	CRNoProgram         		; no then END.
.8172	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8174	9a		txs				txs
.8175					RUNCodePointerLine:
.8175	a0 02		ldy #$02			ldy 	#2 							; start of program
.8177					_CRIncMainLoop:
.8177	c8		iny				iny
.8178					_CRMainLoop:
.8178	b1 30		lda ($30),y			lda 	(codePtr),y
.817a	10 10		bpl $818c			bpl 	_CRNotKeyword
.817c	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.817e	b0 04		bcs $8184			bcs 	_CRIsKeyword
.8180	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8182	b0 0d		bcs $8191			bcs		_CRSyntaxError
.8184					_CRIsKeyword:
.8184	c8		iny				iny 								; consume command
.8185	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8186	aa		tax				tax 								; put in X for vector jump
.8187	20 94 81	jsr $8194			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.818a	80 ec		bra $8178			bra 	_CRMainLoop 				; and loop round
.818c					_CRNotKeyword:
.818c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.818e	f0 e7		beq $8177			beq 	_CRIncMainLoop
>8190	db						.byte 	$DB 						; causes a break in the emulator
.8191					_CRSyntaxError:
.8191	4c ab 92	jmp $92ab			jmp 	SyntaxError
.8194					_CRCallVector0:
.8194	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8197					CRNoProgram:
.8197	4c 49 81	jmp $8149			jmp 	EndCommand
.819a					EOLCommand:
.819a	18		clc				clc
.819b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.819d	65 30		adc $30				adc 	codePtr
.819f	85 30		sta $30				sta 	codePtr
.81a1	90 02		bcc $81a5			bcc 	_CREExit
.81a3	e6 31		inc $31				inc 	codePtr+1
.81a5					_CREExit:
.81a5	80 c7		bra $816e			bra 	RunNewLine
.81a7					Shift1Command:
.81a7	b1 30		lda ($30),y			lda 	(codePtr),y
.81a9	c8		iny				iny
.81aa	0a		asl a				asl 	a
.81ab	aa		tax				tax
.81ac	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8d4c					CheckRightBracket:
.8d4c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d4e	c8		iny				iny
.8d4f	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d51	d0 0f		bne $8d62			bne 	CNAFail
.8d53	60		rts				rts
.8d54					CheckComma:
.8d54	b1 30		lda ($30),y			lda 	(codePtr),y
.8d56	c8		iny				iny
.8d57	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d59	d0 07		bne $8d62			bne 	CNAFail
.8d5b	60		rts				rts
.8d5c					CheckNextA:
.8d5c	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d5e	d0 02		bne $8d62			bne 	CNAFail
.8d60	c8		iny				iny 								; skip character
.8d61	60		rts				rts 								; and exit
.8d62					CNAFail:
.8d62	4c ab 92	jmp $92ab			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./errors/errors.asm

.81af					ErrorHandler:
.81af	a8		tay				tay 								; find the error text
.81b0	f0 42		beq $81f4			beq 	_EHEnd
.81b2	a2 00		ldx #$00			ldx 	#0
.81b4					_EHFind:
.81b4	88		dey				dey 								; found the error text ?
.81b5	f0 0a		beq $81c1			beq 	_EHFound
.81b7					_EHFindZero:
.81b7	bd c4 92	lda $92c4,x			lda 	ErrorText,x 				; find the next error
.81ba	e8		inx				inx
.81bb	c9 00		cmp #$00			cmp 	#0
.81bd	d0 f8		bne $81b7			bne 	_EHFindZero
.81bf	80 f3		bra $81b4			bra 	_EHFind
.81c1					_EHFound:
.81c1	bd c4 92	lda $92c4,x			lda 	ErrorText,x 				; print the message
.81c4	20 68 93	jsr $9368			jsr 	EXTPrintCharacter
.81c7	e8		inx				inx
.81c8	bd c4 92	lda $92c4,x			lda 	ErrorText,x
.81cb	d0 f4		bne $81c1			bne 	_EHFound
.81cd	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.81cf	b1 30		lda ($30),y			lda 	(codePtr),y
.81d1	d0 05		bne $81d8			bne 	_EHAtMsg
.81d3	c8		iny				iny
.81d4	b1 30		lda ($30),y			lda 	(codePtr),y
.81d6	f0 17		beq $81ef			beq 	_EHCREnd
.81d8					_EHAtMsg:
.81d8	a2 81		ldx #$81			ldx 	#_AtMsg >> 8 				; print " at "
.81da	a9 f7		lda #$f7			lda 	#_AtMsg & $FF
.81dc	20 01 82	jsr $8201			jsr 	PrintStringXA
.81df	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.81e1	b1 30		lda ($30),y			lda 	(codePtr),y
.81e3	48		pha				pha
.81e4	c8		iny				iny
.81e5	b1 30		lda ($30),y			lda 	(codePtr),y
.81e7	aa		tax				tax
.81e8	68		pla				pla
.81e9	20 4e 8f	jsr $8f4e			jsr 	ConvertInt16 				; convert XA to string
.81ec	20 01 82	jsr $8201			jsr 	PrintStringXA 				; and print it.
.81ef					_EHCREnd:
.81ef	a9 0d		lda #$0d			lda 	#13 						; new line
.81f1	20 68 93	jsr $9368			jsr 	EXTPrintCharacter
.81f4					_EHEnd:
.81f4	4c 0c 80	jmp $800c			jmp 	WarmStart
>81f7	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>81ff	20 00
.8201					PrintStringXA:
.8201	86 37		stx $37				stx 	zTemp0+1
.8203	85 36		sta $36				sta 	zTemp0
.8205	a0 00		ldy #$00			ldy 	#0
.8207					_PSXALoop:
.8207	b1 36		lda ($36),y			lda 	(zTemp0),y
.8209	f0 06		beq $8211			beq 	_PSXAExit
.820b	20 68 93	jsr $9368			jsr 	EXTPrintCharacter
.820e	c8		iny				iny
.820f	80 f6		bra $8207			bra 	_PSXALoop
.8211					_PSXAExit:
.8211	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8d65					UnaryTrue:
.8d65	fa		plx				plx
.8d66					ReturnTrue:
.8d66	a9 01		lda #$01			lda 	#1  						; set to 1
.8d68	20 54 88	jsr $8854			jsr 	NSMSetByte
.8d6b	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d6d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d70	60		rts				rts
.8d71					UnaryFalse:
.8d71	fa		plx				plx
.8d72					ReturnFalse:
.8d72	4c 52 88	jmp $8852			jmp 	NSMSetZero 					; set it all to zero
.8d75					BinaryCompareEqual:
.8d75	fa		plx				plx
.8d76	20 b1 8d	jsr $8db1			jsr 	CompareBaseCode
.8d79	c9 00		cmp #$00			cmp 	#0
.8d7b	f0 e9		beq $8d66			beq 	ReturnTrue
.8d7d	80 f3		bra $8d72			bra 	ReturnFalse
.8d7f					BinaryCompareLess:
.8d7f	fa		plx				plx
.8d80	20 b1 8d	jsr $8db1			jsr 	CompareBaseCode
.8d83	c9 ff		cmp #$ff			cmp 	#$FF
.8d85	f0 df		beq $8d66			beq 	ReturnTrue
.8d87	80 e9		bra $8d72			bra 	ReturnFalse
.8d89					BinaryCompareGreater:
.8d89	fa		plx				plx
.8d8a	20 b1 8d	jsr $8db1			jsr 	CompareBaseCode
.8d8d	c9 01		cmp #$01			cmp 	#1
.8d8f	f0 d5		beq $8d66			beq 	ReturnTrue
.8d91	80 df		bra $8d72			bra 	ReturnFalse
.8d93					BinaryCompareNotEqual:
.8d93	fa		plx				plx
.8d94	20 b1 8d	jsr $8db1			jsr 	CompareBaseCode
.8d97	c9 00		cmp #$00			cmp 	#0
.8d99	d0 cb		bne $8d66			bne 	ReturnTrue
.8d9b	80 d5		bra $8d72			bra 	ReturnFalse
.8d9d					BinaryCompareLessEqual:
.8d9d	fa		plx				plx
.8d9e	20 b1 8d	jsr $8db1			jsr 	CompareBaseCode
.8da1	c9 01		cmp #$01			cmp 	#1
.8da3	d0 c1		bne $8d66			bne 	ReturnTrue
.8da5	80 cb		bra $8d72			bra 	ReturnFalse
.8da7					BinaryCompareGreaterEqual:
.8da7	fa		plx				plx
.8da8	20 b1 8d	jsr $8db1			jsr 	CompareBaseCode
.8dab	c9 ff		cmp #$ff			cmp 	#$FF
.8dad	d0 b7		bne $8d66			bne 	ReturnTrue
.8daf	80 c1		bra $8d72			bra 	ReturnFalse
.8db1					CompareBaseCode:
.8db1	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; make both values if references.
.8db4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8db7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dba	29 10		and #$10			and 	#NSTString
.8dbc	d0 40		bne $8dfe			bne 	_CBCString
.8dbe	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8dc1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dc4	d0 3b		bne $8e01			bne 	_CBCFloat
.8dc6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8dc9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dcc	29 08		and #$08			and 	#NSTFloat
.8dce	d0 31		bne $8e01			bne 	_CBCFloat
.8dd0	20 04 8e	jsr $8e04			jsr 	CompareFixMinusZero
.8dd3	e8		inx				inx
.8dd4	20 04 8e	jsr $8e04			jsr 	CompareFixMinusZero
.8dd7	ca		dex				dex
.8dd8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8ddb	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8dde	10 0b		bpl $8deb			bpl 	_CDCSameSign
.8de0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8de3	30 16		bmi $8dfb			bmi 	_CBCLess 					; return $FF
.8de5					_CBCGreater:
.8de5	a9 01		lda #$01			lda 	#1
.8de7	60		rts				rts
.8de8					_CBCEqual:
.8de8	a9 00		lda #$00			lda 	#0
.8dea	60		rts				rts
.8deb					_CDCSameSign:
.8deb	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; unsigned subtract
.8dee	20 82 88	jsr $8882			jsr 	NSMIsZero 					; or the mantissa together
.8df1	f0 f5		beq $8de8			beq 	_CBCEqual 					; -0 == 0
.8df3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8df6	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8df9	10 ea		bpl $8de5			bpl 	_CBCGreater
.8dfb					_CBCLess:
.8dfb	a9 ff		lda #$ff			lda 	#$FF
.8dfd	60		rts				rts
.8dfe					_CBCString:
.8dfe	4c 12 82	jmp $8212			jmp 	CompareStrings
.8e01					_CBCFloat:
.8e01	4c 4a 90	jmp $904a			jmp 	CompareFloat
.8e04					CompareFixMinusZero:
.8e04	20 82 88	jsr $8882			jsr 	NSMIsZero
.8e07	d0 03		bne $8e0c			bne 	_CFXMZNotZero
.8e09	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e0c					_CFXMZNotZero:
.8e0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8e0d					IntegerDivide:
.8e0d	fa		plx				plx
.8e0e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e11	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e14	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e15	0a		asl a				asl 	a
.8e16	10 05		bpl $8e1d			bpl 	_NotRef
.8e18	48		pha				pha
.8e19	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e1c	68		pla				pla
.8e1d					_NotRef:
.8e1d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e1f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e22	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e25	f0 03		beq $8e2a			beq 	_IntegerCode 				; if clear, then we have two integers
.8e27	4c b5 92	jmp $92b5			jmp 	TypeError 					; anything else, type mismatch.
.8e2a					_IntegerCode:
.8e2a	20 4c 8e	jsr $8e4c			jsr 	CheckDivideZero 			; do div zero check
.8e2d	20 83 8e	jsr $8e83			jsr 	Int32Divide 				; do the division
.8e30	20 40 8f	jsr $8f40			jsr 	CalculateSign 				; calculate result sign
.8e33					NSMCopyPlusTwoToZero:
.8e33	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8e36	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e39	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8e3c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e3f	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8e42	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e45	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8e48	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e4b	60		rts				rts
.8e4c					CheckDivideZero:
.8e4c	e8		inx				inx
.8e4d	20 82 88	jsr $8882			jsr 	NSMIsZero
.8e50	f0 02		beq $8e54			beq 	_CDVError
.8e52	ca		dex				dex
.8e53	60		rts				rts
.8e54					_CDVError:
.8e54	a9 03		lda #$03		lda	#3
.8e56	4c af 81	jmp $81af		jmp	ErrorHandler
.8e59					IntegerModulus:
.8e59	fa		plx				plx
.8e5a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e5d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e60	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e61	0a		asl a				asl 	a
.8e62	10 05		bpl $8e69			bpl 	_NotRef
.8e64	48		pha				pha
.8e65	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e68	68		pla				pla
.8e69					_NotRef:
.8e69	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e6b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e6e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e71	f0 03		beq $8e76			beq 	_IntegerCode 				; if clear, then we have two integers
.8e73	4c b5 92	jmp $92b5			jmp 	TypeError 					; anything else, type mismatch.
.8e76					_IntegerCode:
.8e76	20 4c 8e	jsr $8e4c			jsr 	CheckDivideZero 			; do div zero check
.8e79	20 83 8e	jsr $8e83			jsr 	Int32Divide 				; do the division
.8e7c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8e7f	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8e82	60		rts				rts
.8e83					Int32Divide:
.8e83	48		pha				pha 								; save AXY
.8e84	5a		phy				phy
.8e85	20 29 88	jsr $8829			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8e88	20 4e 88	jsr $884e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8e8b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8e8d					_I32DivideLoop:
.8e8d	e8		inx				inx
.8e8e	e8		inx				inx
.8e8f	20 67 88	jsr $8867			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8e92	ca		dex				dex
.8e93	ca		dex				dex
.8e94	20 68 88	jsr $8868			jsr 	NSMRotateLeft
.8e97	20 c3 8e	jsr $8ec3			jsr 	DivideCheckSubtract 		; check if subtract possible
.8e9a	90 03		bcc $8e9f			bcc 	_I32DivideNoCarryIn
.8e9c	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8e9f					_I32DivideNoCarryIn:
.8e9f	88		dey				dey 								; loop round till division completed.
.8ea0	d0 eb		bne $8e8d			bne 	_I32DivideLoop
.8ea2	7a		ply				ply 								; restore AXY and exit
.8ea3	68		pla				pla
.8ea4	60		rts				rts
.8ea5					Int32ShiftDivide:
.8ea5	48		pha				pha 								; save AY
.8ea6	5a		phy				phy
.8ea7	e8		inx				inx 								; clear S[X+2]
.8ea8	e8		inx				inx
.8ea9	20 52 88	jsr $8852			jsr 	NSMSetZero
.8eac	ca		dex				dex
.8ead	ca		dex				dex
.8eae	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8eb0					_I32SDLoop:
.8eb0	20 c3 8e	jsr $8ec3			jsr 	DivideCheckSubtract 		; check if subtract possible
.8eb3	e8		inx				inx
.8eb4	e8		inx				inx
.8eb5	20 68 88	jsr $8868			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8eb8	ca		dex				dex
.8eb9	ca		dex				dex
.8eba	20 68 88	jsr $8868			jsr 	NSMRotateLeft
.8ebd	88		dey				dey 	 							; do 31 times
.8ebe	d0 f0		bne $8eb0			bne 	_I32SDLoop
.8ec0	7a		ply				ply 								; restore AY and exit
.8ec1	68		pla				pla
.8ec2	60		rts				rts
.8ec3					DivideCheckSubtract:
.8ec3	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8ec6	b0 04		bcs $8ecc			bcs 	_DCSExit 					; if carry set, then could do, exit
.8ec8	20 95 82	jsr $8295			jsr 	AddTopTwoStack 				; add it back in
.8ecb	18		clc				clc 								; and return False
.8ecc					_DCSExit:
.8ecc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8ecd					MulInteger:
.8ecd	fa		plx				plx
.8ece	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ed1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ed4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ed5	0a		asl a				asl 	a
.8ed6	10 05		bpl $8edd			bpl 	_NotRef
.8ed8	48		pha				pha
.8ed9	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8edc	68		pla				pla
.8edd					_NotRef:
.8edd	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ede	30 0b		bmi $8eeb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ee0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ee3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ee6	f0 06		beq $8eee			beq 	_IntegerCode 				; if clear, then we have two integers
.8ee8	4c 21 91	jmp $9121			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8eeb					_StringData:
.8eeb	4c bf 92	jmp $92bf			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8eee					_IntegerCode:
.8eee	20 fb 8e	jsr $8efb			jsr 	MultiplyShort
.8ef1	c9 00		cmp #$00			cmp 	#0
.8ef3	f0 05		beq $8efa			beq 	_MIExit
.8ef5	a9 04		lda #$04		lda	#4
.8ef7	4c af 81	jmp $81af		jmp	ErrorHandler
.8efa					_MIExit:
.8efa	60		rts				rts
.8efb					MultiplyShort:
.8efb	5a		phy				phy 								; save Y
.8efc	20 29 88	jsr $8829			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8eff	20 4e 88	jsr $884e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8f02	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8f04					_I32MLoop:
.8f04	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8f07	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8f0a	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8f0d	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8f10	f0 28		beq $8f3a			beq 	_I32MExit 					; exit if zero
.8f12	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8f15	29 01		and #$01			and 	#1
.8f17	f0 0e		beq $8f27			beq 	_I32MNoAdd
.8f19	20 95 82	jsr $8295			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8f1c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8f1f	10 06		bpl $8f27			bpl 	_I32MNoAdd
.8f21					_I32ShiftRight:
.8f21	20 75 88	jsr $8875			jsr 	NSMShiftRight 				; shift S[X] right
.8f24	c8		iny				iny 								; increment shift count
.8f25	80 0a		bra $8f31			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8f27					_I32MNoAdd:
.8f27	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8f2a	70 f5		bvs $8f21			bvs 	_I32ShiftRight 				; instead.
.8f2c	e8		inx				inx
.8f2d	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8f30	ca		dex				dex
.8f31					_I32MShiftUpper:
.8f31	e8		inx				inx 								; shift S[X+2] right
.8f32	e8		inx				inx
.8f33	20 75 88	jsr $8875			jsr 	NSMShiftRight
.8f36	ca		dex				dex
.8f37	ca		dex				dex
.8f38	80 ca		bra $8f04			bra 	_I32MLoop 					; try again.
.8f3a					_I32MExit:
.8f3a	20 40 8f	jsr $8f40			jsr 	CalculateSign
.8f3d	98		tya				tya 								; shift in A
.8f3e	7a		ply				ply 								; restore Y and exit
.8f3f	60		rts				rts
.8f40					CalculateSign:
.8f40	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8f43	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8f46	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f49	0a		asl a				asl 	a 							; shift bit 7 into carry
.8f4a	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8f4d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.8212					CompareStrings:
.8212	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8215	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8218	29 10		and #$10			and 	#NSBIsString
.821a	f0 2c		beq $8248			beq 	_CSTypeError
.821c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.821f	85 36		sta $36				sta 	zTemp0
.8221	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8224	85 37		sta $37				sta 	zTemp0+1
.8226	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8229	85 38		sta $38				sta 	zTemp1
.822b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.822e	85 39		sta $39				sta 	zTemp1+1
.8230	5a		phy				phy 								; save Y so we can access strings
.8231	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8233					_CSLoop:
.8233	c8		iny				iny
.8234	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8236	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8238	d0 06		bne $8240			bne 	_CSDifferent
.823a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.823c	d0 f5		bne $8233			bne 	_CSLoop 					; still comparing
.823e					_CSExit:
.823e	7a		ply				ply 								; reached end, return zero in A from EOS
.823f	60		rts				rts
.8240					_CSDifferent:
.8240	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8242	90 fa		bcc $823e			bcc		_CSExit
.8244	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8246	80 f6		bra $823e			bra 	_CSExit
.8248					_CSTypeError:
.8248	4c b5 92	jmp $92b5			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.824b					ShiftLeft:
.824b	38		sec				sec
.824c	80 01		bra $824f			bra 	ShiftMain
.824e					ShiftRight:
.824e	18		clc				clc
.824f					ShiftMain:
.824f	fa		plx				plx 								; restore X
.8250	08		php				php 								; save direction
.8251	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8254	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8257	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8258	0a		asl a				asl 	a
.8259	10 05		bpl $8260			bpl 	_NotRef
.825b	48		pha				pha
.825c	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.825f	68		pla				pla
.8260					_NotRef:
.8260	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8262	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8265	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8268	f0 03		beq $826d			beq 	_IntegerCode 				; if clear, then we have two integers
.826a	4c b5 92	jmp $92b5			jmp 	TypeError 					; anything else, type mismatch.
.826d					_IntegerCode:
.826d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8270	29 e0		and #$e0			and 	#$E0
.8272	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8275	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8278	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.827b	d0 13		bne $8290			bne 	_SMExit0 					; if >= 32 it will always return zero.
.827d					_SMLoop:
.827d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8280	30 11		bmi $8293			bmi 	_SMExit 					; exit if done.
.8282	28		plp				plp 								; restore direcition setting
.8283	08		php				php
.8284	90 05		bcc $828b			bcc 	_SMRight
.8286	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; shift left if CS
.8289	80 f2		bra $827d			bra 	_SMLoop
.828b					_SMRight:
.828b	20 75 88	jsr $8875			jsr 	NSMShiftRight 				; shift right if CC
.828e	80 ed		bra $827d			bra 	_SMLoop
.8290					_SMExit0:
.8290	20 52 88	jsr $8852			jsr 	NSMSetZero 					; return zero.
.8293					_SMExit:
.8293	28		plp				plp 								; throw direction
.8294	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.8295					AddTopTwoStack:
.8295	18		clc				clc
.8296	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8299	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.829c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.829f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82a2	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.82a5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82a8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82ab	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.82ae	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82b1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82b4	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.82b7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82ba	60		rts				rts
.82bb					SubTopTwoStack:
.82bb	38		sec				sec
.82bc	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82bf	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.82c2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82c5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82c8	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.82cb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82ce	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82d1	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.82d4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82d7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82da	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.82dd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82e0	60		rts				rts
.82e1					AddInteger:
.82e1	fa		plx				plx
.82e2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82e5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82e8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82e9	0a		asl a				asl 	a
.82ea	10 05		bpl $82f1			bpl 	_NotRef
.82ec	48		pha				pha
.82ed	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82f0	68		pla				pla
.82f1					_NotRef:
.82f1	0a		asl a				asl 	a 							; put MSB of type into A:7
.82f2	30 0b		bmi $82ff			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82f4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82f7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82fa	f0 06		beq $8302			beq 	_IntegerCode 				; if clear, then we have two integers
.82fc	4c a9 8f	jmp $8fa9			jmp 	FloatingPointAdd 							; otherwise at least one float.
.82ff					_StringData:
.82ff	4c bf 92	jmp $92bf			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8302					_IntegerCode:
.8302					AddCode:
.8302	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8305	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8308	10 8b		bpl $8295			bpl 	AddTopTwoStack
.830a	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; do a physical subtraction
.830d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8310	10 09		bpl $831b			bpl 	_AddExit
.8312	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8315	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8318	20 07 88	jsr $8807			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.831b					_AddExit:
.831b	60		rts				rts
.831c					SubInteger:
.831c	fa		plx				plx
.831d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8320	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8323	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8324	0a		asl a				asl 	a
.8325	10 05		bpl $832c			bpl 	_NotRef
.8327	48		pha				pha
.8328	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.832b	68		pla				pla
.832c					_NotRef:
.832c	0a		asl a				asl 	a 							; put MSB of type into A:7
.832d	30 0b		bmi $833a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.832f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8332	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8335	f0 06		beq $833d			beq 	_IntegerCode 				; if clear, then we have two integers
.8337	4c ae 8f	jmp $8fae			jmp 	FloatingPointSub 							; otherwise at least one float.
.833a					_StringData:
.833a	4c bf 92	jmp $92bf			jmp 	NotDoneError							; at least one string - don't know both are strings.
.833d					_IntegerCode:
.833d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8340	49 80		eor #$80			eor 	#$80
.8342	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8345	80 bb		bra $8302			bra 	AddCode 					; and do the same code as add.
.8347					AndInteger:
.8347	fa		plx				plx
.8348	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.834b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.834e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.834f	0a		asl a				asl 	a
.8350	10 05		bpl $8357			bpl 	_NotRef
.8352	48		pha				pha
.8353	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8356	68		pla				pla
.8357					_NotRef:
.8357	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8359	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.835c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.835f	f0 03		beq $8364			beq 	_IntegerCode 				; if clear, then we have two integers
.8361	4c b5 92	jmp $92b5			jmp 	TypeError 					; anything else, type mismatch.
.8364					_IntegerCode:
.8364	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8367	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.836a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.836d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8370	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8373	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8376	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8379	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.837c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.837f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8382	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8385	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8388	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.838b	60		rts				rts
.838c					OraInteger:
.838c	fa		plx				plx
.838d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8390	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8393	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8394	0a		asl a				asl 	a
.8395	10 05		bpl $839c			bpl 	_NotRef
.8397	48		pha				pha
.8398	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.839b	68		pla				pla
.839c					_NotRef:
.839c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.839e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83a1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a4	f0 03		beq $83a9			beq 	_IntegerCode 				; if clear, then we have two integers
.83a6	4c b5 92	jmp $92b5			jmp 	TypeError 					; anything else, type mismatch.
.83a9					_IntegerCode:
.83a9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83ac	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.83af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83b2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83b5	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.83b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83bb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83be	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.83c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83c4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83c7	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.83ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83cd	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83d0	60		rts				rts
.83d1					EorInteger:
.83d1	fa		plx				plx
.83d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83d9	0a		asl a				asl 	a
.83da	10 05		bpl $83e1			bpl 	_NotRef
.83dc	48		pha				pha
.83dd	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83e0	68		pla				pla
.83e1					_NotRef:
.83e1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83e3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83e6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83e9	f0 03		beq $83ee			beq 	_IntegerCode 				; if clear, then we have two integers
.83eb	4c b5 92	jmp $92b5			jmp 	TypeError 					; anything else, type mismatch.
.83ee					_IntegerCode:
.83ee	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83f1	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.83f4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83f7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83fa	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.83fd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8400	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8403	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8406	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8409	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.840c	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.840f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8412	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8415	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/tostring.asm

.8f4e					ConvertInt16:
.8f4e	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.8f51	8e 10 06	stx $0610			stx 	NSMantissa1
.8f54	9c 18 06	stz $0618			stz 	NSMantissa2
.8f57	9c 20 06	stz $0620			stz 	NSMantissa3
.8f5a	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.8f5d	a2 00		ldx #$00			ldx 	#0 							; stack level
.8f5f	a9 0a		lda #$0a			lda 	#10 						; base
.8f61	80 00		bra $8f63			bra 	ConvertInt32
.8f63					ConvertInt32:
.8f63	5a		phy				phy
.8f64	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.8f66	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.8f69	10 08		bpl $8f73			bpl 	_CI32NotNeg
.8f6b	48		pha				pha
.8f6c	a9 2d		lda #$2d			lda 	#'-'
.8f6e	99 5d 08	sta $085d,y			sta 	NumberBuffer,y
.8f71	c8		iny				iny
.8f72	68		pla				pla
.8f73					_CI32NotNeg:
.8f73	20 81 8f	jsr $8f81			jsr 	_CI32DivideConvert 			; recursive conversion
.8f76	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.8f78	99 5d 08	sta $085d,y			sta 	NumberBuffer,y
.8f7b	7a		ply				ply
.8f7c	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.8f7e	a9 5d		lda #$5d			lda 	#NumberBuffer & $FF
.8f80	60		rts				rts
.8f81					_CI32DivideConvert:
.8f81	e8		inx				inx 								; write to next slot up
.8f82	20 54 88	jsr $8854			jsr 	NSMSetByte
.8f85	ca		dex				dex
.8f86	20 83 8e	jsr $8e83			jsr 	Int32Divide 				; divide
.8f89	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.8f8c	48		pha				pha
.8f8d	20 33 8e	jsr $8e33			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.8f90	20 82 88	jsr $8882			jsr 	NSMIsZero 					; is it zero ?
.8f93	f0 06		beq $8f9b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.8f95	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.8f98	20 81 8f	jsr $8f81			jsr 	_CI32DivideConvert 			; and recusrively call.
.8f9b					_CI32NoRecurse:
.8f9b	68		pla				pla 								; remainder
.8f9c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.8f9e	90 02		bcc $8fa2			bcc 	_CI32NotHex
.8fa0	69 26		adc #$26			adc 	#6+32
.8fa2					_CI32NotHex:
.8fa2	69 30		adc #$30			adc 	#48
.8fa4	99 5d 08	sta $085d,y			sta 	NumberBuffer,y 				; write out and exit
.8fa7	c8		iny				iny
.8fa8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.8416					PrecedenceLevel:
>8416	04					.byte	 4	; $00 <<
>8417	02					.byte	 2	; $01 <=
>8418	02					.byte	 2	; $02 <>
>8419	00					.byte	 0	; $03 !!3
>841a	00					.byte	 0	; $04 ><
>841b	02					.byte	 2	; $05 >=
>841c	04					.byte	 4	; $06 >>
>841d	00					.byte	 0	; $07 !!7
>841e	00					.byte	 0	; $08 !!8
>841f	00					.byte	 0	; $09 !!9
>8420	00					.byte	 0	; $0a !!10
>8421	00					.byte	 0	; $0b !!11
>8422	00					.byte	 0	; $0c !!12
>8423	00					.byte	 0	; $0d !!13
>8424	00					.byte	 0	; $0e !!14
>8425	00					.byte	 0	; $0f !!15
>8426	00					.byte	 0	; $10 @
>8427	00					.byte	 0	; $11 !!17
>8428	00					.byte	 0	; $12 !!18
>8429	00					.byte	 0	; $13 [
>842a	04					.byte	 4	; $14 \
>842b	00					.byte	 0	; $15 ]
>842c	01					.byte	 1	; $16 ^
>842d	00					.byte	 0	; $17 _
>842e	00					.byte	 0	; $18 `
>842f	00					.byte	 0	; $19 !!25
>8430	00					.byte	 0	; $1a !!26
>8431	00					.byte	 0	; $1b {
>8432	01					.byte	 1	; $1c |
>8433	00					.byte	 0	; $1d }
>8434	00					.byte	 0	; $1e ~
>8435	00					.byte	 0	; $1f [7m<7F>[m
>8436	00					.byte	 0	; $20
>8437	05					.byte	 5	; $21 !
>8438	00					.byte	 0	; $22 "
>8439	00					.byte	 0	; $23 #
>843a	05					.byte	 5	; $24 $
>843b	04					.byte	 4	; $25 %
>843c	01					.byte	 1	; $26 &
>843d	00					.byte	 0	; $27 '
>843e	00					.byte	 0	; $28 (
>843f	00					.byte	 0	; $29 )
>8440	04					.byte	 4	; $2a *
>8441	03					.byte	 3	; $2b +
>8442	00					.byte	 0	; $2c ,
>8443	03					.byte	 3	; $2d -
>8444	00					.byte	 0	; $2e .
>8445	04					.byte	 4	; $2f /
>8446	00					.byte	 0	; $30 0
>8447	00					.byte	 0	; $31 1
>8448	00					.byte	 0	; $32 2
>8449	00					.byte	 0	; $33 3
>844a	00					.byte	 0	; $34 4
>844b	00					.byte	 0	; $35 5
>844c	00					.byte	 0	; $36 6
>844d	00					.byte	 0	; $37 7
>844e	00					.byte	 0	; $38 8
>844f	00					.byte	 0	; $39 9
>8450	00					.byte	 0	; $3a :
>8451	00					.byte	 0	; $3b ;
>8452	02					.byte	 2	; $3c <
>8453	02					.byte	 2	; $3d =
>8454	02					.byte	 2	; $3e >
>8455	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.8456					EvaluateExpressionAt0:
.8456	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8458					EvaluateExpression:
.8458	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.845a					EvaluateExpressionAtPrecedence:
.845a	48		pha				pha 								; save precedence level
.845b	20 56 86	jsr $8656			jsr 	EvaluateTerm 				; evaluate term into level X.
.845e	68		pla				pla 								; restore precedence level.
.845f					_EXPRLoop:
.845f	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8461	b1 30		lda ($30),y			lda 	(codePtr),y
.8463	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8465	b0 25		bcs $848c			bcs 	_EXPRExit
.8467	da		phx				phx 								; read the operator precedence
.8468	aa		tax				tax
.8469	bd 16 84	lda $8416,x			lda 	PrecedenceLevel,x
.846c	fa		plx				plx
.846d	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.846f	f0 1b		beq $848c			beq 	_EXPRExit
.8471	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8473	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8475	c5 37		cmp $37				cmp 	zTemp0+1
.8477	b0 13		bcs $848c			bcs		_EXPRExit 					; if current >= operator exit
.8479	48		pha				pha 								; save current precedence.
.847a	b1 30		lda ($30),y			lda 	(codePtr),y
.847c	c8		iny				iny
.847d	48		pha				pha
.847e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8480	e8		inx				inx 								; work out the right hand side.
.8481	20 5a 84	jsr $845a			jsr 	EvaluateExpressionAtPrecedence
.8484	ca		dex				dex
.8485	68		pla				pla 								; get operator, call the code.
.8486	20 8f 84	jsr $848f			jsr 	_EXPRCaller
.8489	68		pla				pla 								; restore precedence level
.848a	80 d3		bra $845f			bra 	_EXPRLoop 					; and go round.
.848c					_EXPRExit:
.848c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.848e	60		rts				rts
.848f					_EXPRCaller:
.848f	da		phx				phx 								; save on stack, first thing is to restore it
.8490	0a		asl a				asl 	a 							; double so can use vectors into X
.8491	aa		tax				tax
.8492	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8fa9					FloatingPointAdd:
.8fa9	20 4a 91	jsr $914a			jsr 	FloatPrepare 				; prepare for floats
.8fac	80 0b		bra $8fb9			bra 	FloatAdd
.8fae					FloatingPointSub:
.8fae	20 4a 91	jsr $914a			jsr 	FloatPrepare 				; prepare for floats
.8fb1					FloatSubtract:
.8fb1	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.8fb4	49 80		eor #$80			eor 	#$80
.8fb6	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.8fb9					FloatAdd:
.8fb9	48		pha				pha
.8fba	5a		phy				phy
.8fbb	20 5b 91	jsr $915b			jsr 	NSNormalise 				; normalise S[X]
.8fbe	f0 54		beq $9014			beq 	_FAReturn1
.8fc0	e8		inx				inx 								; normalise S[X+1]
.8fc1	20 5b 91	jsr $915b			jsr 	NSNormalise
.8fc4	ca		dex				dex
.8fc5	c9 00		cmp #$00			cmp 	#0
.8fc7	f0 6f		beq $9038			beq 	_FAExit 					; if so, just return A
.8fc9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.8fcc	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.8fcf	f0 1b		beq $8fec			beq 	_FAExponentsEqual
.8fd1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.8fd4	a8		tay				tay
.8fd5	38		sec				sec 								; do a signed comparison of the exponents.
.8fd6	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8fd9	50 02		bvc $8fdd			bvc 	_FANoSignedChange
.8fdb	49 80		eor #$80			eor 	#$80
.8fdd					_FANoSignedChange:
.8fdd	29 80		and #$80			and 	#$80
.8fdf	10 03		bpl $8fe4			bpl 	_FAHaveMax
.8fe1	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.8fe4					_FAHaveMax:
.8fe4	20 3b 90	jsr $903b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.8fe7	e8		inx				inx
.8fe8	20 3b 90	jsr $903b			jsr 	_FAShiftToExponent
.8feb	ca		dex				dex
.8fec					_FAExponentsEqual:
.8fec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.8fef	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ff2	30 10		bmi $9004			bmi 	_FADifferentSigns
.8ff4	20 95 82	jsr $8295			jsr 	AddTopTwoStack 				; do the add of the mantissae
.8ff7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.8ffa	10 3c		bpl $9038			bpl 	_FAExit 					; if no, we are done.
.8ffc	20 75 88	jsr $8875			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.8fff	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9002	80 34		bra $9038			bra 	_FAExit
.9004					_FADifferentSigns:
.9004	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9007	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.900a	10 2c		bpl $9038			bpl 	_FAExit 					; if no, we are done.
.900c	20 fe 87	jsr $87fe			jsr 	NSMNegate 					; netate result
.900f	20 07 88	jsr $8807			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9012	80 24		bra $9038			bra 	_FAExit
.9014					_FAReturn1:
.9014	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9017	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.901a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.901d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9020	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9023	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9026	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9029	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.902c	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.902f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9032	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9035	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9038					_FAExit:
.9038	7a		ply				ply
.9039	68		pla				pla
.903a	60		rts				rts
.903b					_FAShiftToExponent:
.903b					_FAShiftToExponent2:
.903b	98		tya				tya 								; compare Y to exponent
.903c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.903f	f0 08		beq $9049			beq 	_FASEExit 					; exit if so.
.9041	20 75 88	jsr $8875			jsr 	NSMShiftRight	 			; shift the mantissa right
.9044	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9047	80 f2		bra $903b			bra 	_FAShiftToExponent2
.9049					_FASEExit:
.9049	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.904a					CompareFloat:
.904a	20 b1 8f	jsr $8fb1			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.904d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9050	29 fc		and #$fc			and 	#$FC
.9052	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9055	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9058	f0 09		beq $9063			beq 	_FCExit 					; zero, so approximately identical
.905a	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.905c	3c 00 06	bit $0600,x			bit 	NSStatus,x
.905f	10 02		bpl $9063			bpl 	_FCExit
.9061					_FCNegative:
.9061	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9063					_FCExit:
.9063	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.9064					FDivideCommand:
.9064	fa		plx				plx	 								; restore stack position
.9065	20 4a 91	jsr $914a			jsr 	FloatPrepare 				; prepare for floats
.9068					FloatDivide:
.9068	48		pha				pha
.9069	e8		inx				inx
.906a	20 5b 91	jsr $915b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.906d	ca		dex				dex
.906e	c9 00		cmp #$00			cmp 	#0
.9070	f0 20		beq $9092			beq 	_FDZero
.9072	20 5b 91	jsr $915b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9075	f0 19		beq $9090			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9077	20 a5 8e	jsr $8ea5			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.907a	20 33 8e	jsr $8e33			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.907d	20 5b 91	jsr $915b			jsr		NSNormalise 				; renormalise
.9080	20 40 8f	jsr $8f40			jsr 	CalculateSign 				; calculate result sign
.9083	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9086	38		sec				sec
.9087	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.908a	38		sec				sec
.908b	e9 1e		sbc #$1e			sbc 	#30
.908d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9090					_FDExit:
.9090	68		pla				pla
.9091	60		rts				rts
.9092					_FDZero:
.9092	a9 03		lda #$03		lda	#3
.9094	4c af 81	jmp $81af		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/fractional.asm

.9097					FloatFractionalPart:
.9097	5a		phy				phy
.9098	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.909b	29 7f		and #$7f			and 	#$7F
.909d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90a0	20 5b 91	jsr $915b			jsr 	NSNormalise
.90a3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.90a6	38		sec				sec
.90a7	e9 e0		sbc #$e0			sbc 	#$E0
.90a9	90 31		bcc $90dc			bcc 	_FFPExit 					; already fractional
.90ab	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.90ad	b0 2a		bcs $90d9			bcs 	_FFPZero
.90af	a8		tay				tay 								; put count to do in Y
.90b0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.90b3	20 de 90	jsr $90de			jsr 	_FFPPartial
.90b6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90b9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.90bc	20 de 90	jsr $90de			jsr 	_FFPPartial
.90bf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90c2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90c5	20 de 90	jsr $90de			jsr 	_FFPPartial
.90c8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90cb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.90ce	20 de 90	jsr $90de			jsr 	_FFPPartial
.90d1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90d4	20 82 88	jsr $8882			jsr 	NSMIsZero 					; zeroed check.
.90d7	d0 03		bne $90dc			bne 	_FFPExit
.90d9					_FFPZero:
.90d9	20 52 88	jsr $8852			jsr 	NSMSetZero
.90dc					_FFPExit:
.90dc	7a		ply				ply
.90dd	60		rts				rts
.90de					_FFPPartial:
.90de	c0 00		cpy #$00			cpy 	#0 							; no more to do
.90e0	f0 17		beq $90f9			beq 	_FFFPPExit
.90e2	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.90e4	b0 0c		bcs $90f2			bcs 	_FFFPPWholeByte
.90e6	5a		phy				phy
.90e7					_FFFPPLeft:
.90e7	0a		asl a				asl 	a
.90e8	88		dey				dey
.90e9	d0 fc		bne $90e7			bne 	_FFFPPLeft
.90eb	7a		ply				ply
.90ec					_FFFPPRight:
.90ec	4a		lsr a				lsr 	a
.90ed	88		dey				dey
.90ee	d0 fc		bne $90ec			bne 	_FFFPPRight
.90f0	80 07		bra $90f9			bra 	_FFFPPExit
.90f2					_FFFPPWholeByte:
.90f2	98		tya				tya 								; subtract 8 from count
.90f3	38		sec				sec
.90f4	e9 08		sbc #$08			sbc 	#8
.90f6	a8		tay				tay
.90f7	a9 00		lda #$00			lda 	#0 							; and clear all
.90f9					_FFFPPExit:
.90f9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/integer.asm

.90fa					FloatIntegerPart:
.90fa	48		pha				pha
.90fb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.90fe	f0 1f		beq $911f			beq 	_FIPExit 					; if so do nothing
.9100	20 82 88	jsr $8882			jsr 	NSMIsZero 					; is it zero ?
.9103	f0 17		beq $911c			beq 	_FIPZero 					; if so return zero.
.9105	20 5b 91	jsr $915b			jsr 	NSNormalise 				; normalise
.9108	f0 12		beq $911c			beq 	_FIPZero 					; normalised to zero, exit zero
.910a					_FIPShift:
.910a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.910d	10 08		bpl $9117			bpl 	_FIPCheckZero
.910f	20 75 88	jsr $8875			jsr 	NSMShiftRight 				; shift mantissa right
.9112	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9115	80 f3		bra $910a			bra 	_FIPShift
.9117					_FIPCheckZero:
.9117	20 82 88	jsr $8882			jsr 	NSMIsZero 					; avoid -0 problem
.911a	d0 03		bne $911f			bne 	_FIPExit 					; set to zero if mantissa zero.
.911c					_FIPZero:
.911c	20 52 88	jsr $8852			jsr 	NSMSetZero
.911f					_FIPExit:
.911f	68		pla				pla
.9120	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.9121					FloatingPointMultiply:
.9121	20 4a 91	jsr $914a			jsr 	FloatPrepare 				; prepare for floats
.9124					FloatMultiply:
.9124	48		pha				pha
.9125	20 5b 91	jsr $915b			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9128	f0 1b		beq $9145			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.912a	e8		inx				inx
.912b	20 5b 91	jsr $915b			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.912e	ca		dex				dex
.912f	c9 00		cmp #$00			cmp 	#0
.9131	f0 0f		beq $9142			beq 	_FDSetZero
.9133	20 fb 8e	jsr $8efb			jsr 	MultiplyShort 				; calculate the result.
.9136	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9139	18		clc				clc
.913a	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.913d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9140	80 03		bra $9145			bra 	_FDExit
.9142					_FDSetZero:
.9142	20 52 88	jsr $8852			jsr 	NSMSetZero 					; return 0
.9145					_FDExit:
.9145	20 5b 91	jsr $915b			jsr 	NSNormalise 				; normalise the result
.9148	68		pla				pla
.9149	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.914a					FloatPrepare:
.914a	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; dereference the top two values
.914d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9150	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9153	29 10		and #$10			and 	#NSBIsString
.9155	d0 01		bne $9158			bne 	_FDType
.9157	60		rts				rts
.9158					_FDType:
.9158	4c b5 92	jmp $92b5			jmp 	TypeError
.915b					NSNormalise:
.915b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.915e	29 80		and #$80			and 	#$80
.9160	09 08		ora #$08			ora 	#NSTFloat
.9162	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9165	20 82 88	jsr $8882			jsr 	NSMIsZero 					; if zero exit
.9168	d0 09		bne $9173			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.916a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.916d	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9170	a9 00		lda #$00			lda 	#0 							; set Z flag
.9172	60		rts				rts
.9173					_NSNormaliseOptimise:
.9173	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9176	d0 22		bne $919a			bne 	_NSNormaliseLoop
.9178	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.917b	30 1d		bmi $919a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.917d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9180	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9183	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9186	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9189	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.918c	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.918f	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9192	38		sec				sec
.9193	e9 08		sbc #$08			sbc 	#8
.9195	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9198	80 d9		bra $9173			bra 	_NSNormaliseOptimise
.919a					_NSNormaliseLoop:
.919a	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.919d	70 08		bvs $91a7			bvs 	_NSNExit 					; exit if so with Z flag clear
.919f	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; shift mantissa left
.91a2	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.91a5	80 f3		bra $919a			bra 	_NSNormaliseLoop
.91a7					_NSNExit:
.91a7	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.91a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.8495					DereferenceTopTwo:
.8495	e8		inx				inx
.8496	20 9a 84	jsr $849a			jsr 	Dereference 				; deref x+1
.8499	ca		dex				dex  								; falls through to deref x
.849a					Dereference:
.849a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.849d	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.849f	f0 57		beq $84f8			beq 	_DRFExit 					; not a reference
.84a1	5a		phy				phy
.84a2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.84a5	85 36		sta $36				sta 	zTemp0
.84a7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84aa	85 37		sta $37				sta 	zTemp0+1
.84ac	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.84af	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.84b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.84b7	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.84b9	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.84bb	f0 0f		beq $84cc			beq 	_DRFDereferenceTwo
.84bd	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.84bf	f0 39		beq $84fa			beq 	_DRFFull
.84c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.84c4	29 03		and #$03			and 	#3
.84c6	f0 32		beq $84fa			beq 	_DRFFull 					; the whole word
.84c8	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.84ca	f0 07		beq $84d3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.84cc					_DRFDereferenceTwo:
.84cc	a0 01		ldy #$01			ldy 	#1
.84ce	b1 36		lda ($36),y			lda 	(zTemp0),y
.84d0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84d3					_DRFClear23:
.84d3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.84d6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.84d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.84dc	29 18		and #$18			and 	#NSBTypeMask
.84de	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84e1	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.84e3	d0 12		bne $84f7			bne 	_DRFNotString
.84e5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.84e8	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.84eb	d0 0a		bne $84f7			bne 	_DRFNotString
.84ed	a9 f9		lda #$f9			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.84ef	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.84f2	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.84f4	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.84f7					_DRFNotString
.84f7	7a		ply				ply 								; restore Y and exit
.84f8					_DRFExit:
.84f8	60		rts				rts
.84f9					_DRFNullString:
>84f9	00						.byte 	0
.84fa					_DRFFull:
.84fa	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.84fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.84fe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8501	c8		iny				iny
.8502	b1 36		lda ($36),y			lda 	(zTemp0),y
.8504	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8507	c8		iny				iny
.8508	b1 36		lda ($36),y			lda 	(zTemp0),y
.850a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.850d	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8510	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8513	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8515	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8518	f0 06		beq $8520			beq 	_DRFNoExponent
.851a	c8		iny				iny 								; if not, read the exponent as well.
.851b	b1 36		lda ($36),y			lda 	(zTemp0),y
.851d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8520					_DRFNoExponent:
.8520	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8523	10 0d		bpl $8532			bpl 	_DRFExit2 					; if not, then exit.
.8525	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8527	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.852a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.852d	09 80		ora #$80			ora 	#NSBIsNegative
.852f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8532					_DRFExit2:
.8532	7a		ply				ply
.8533	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8534					EncodeNumberStart:
.8534	38		sec				sec
.8535	80 01		bra $8538			bra 	EncodeNumberContinue+1
.8537					EncodeNumberContinue:
.8537	18		clc				clc
.8538					EncodeNumber:
.8538	08		php				php 								; save reset.
.8539	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.853b	f0 12		beq $854f			beq 	_ENIsOkay
.853d	c9 30		cmp #$30			cmp 	#"0"
.853f	90 04		bcc $8545			bcc 	_ENBadNumber
.8541	c9 3a		cmp #$3a			cmp 	#"9"+1
.8543	90 0a		bcc $854f			bcc 	_ENIsOkay
.8545					_ENBadNumber:
.8545	28		plp				plp 								; throw saved reset
.8546	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8549	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.854b	f0 7e		beq $85cb			beq 	_ENConstructFinal
.854d					_ENFail:
.854d	18		clc				clc 								; not allowed
.854e	60		rts				rts
.854f					_ENIsOkay:
.854f	28		plp				plp 								; are we restarting
.8550	90 15		bcc $8567			bcc 	_ENNoRestart
.8552					_ENStartEncode:
.8552	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8554	f0 0c		beq $8562			beq 	_ENFirstDP
.8556	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8558	20 54 88	jsr $8854			jsr 	NSMSetByte
.855b	a9 01		lda #$01			lda 	#ESTA_Low
.855d					_ENExitChange:
.855d	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8560	38		sec				sec
.8561	60		rts				rts
.8562					_ENFirstDP:
.8562	20 52 88	jsr $8852			jsr 	NSMSetZero 					; clear integer part
.8565	80 3f		bra $85a6			bra 	_ESTASwitchFloat			; go straight to float and exi
.8567					_ENNoRestart:
.8567	48		pha				pha 								; save on stack.
.8568	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.856b	c9 01		cmp #$01			cmp 	#ESTA_Low
.856d	f0 09		beq $8578			beq  	_ESTALowState
.856f	c9 02		cmp #$02			cmp 	#ESTA_High
.8571	f0 29		beq $859c			beq 	_ESTAHighState
.8573	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8575	f0 3b		beq $85b2			beq 	_ESTADecimalState
>8577	db						.byte 	$DB 						; causes a break in the emulator
.8578					_ESTALowState:
.8578	68		pla				pla 								; get value back
.8579	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.857b	f0 29		beq $85a6			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.857d	29 0f		and #$0f			and 	#15 						; make digit
.857f	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8582	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8585	0a		asl a				asl 	a
.8586	0a		asl a				asl 	a
.8587	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.858a	0a		asl a				asl 	a
.858b	6d 06 07	adc $0706			adc 	DigitTemp
.858e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8591	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8593	90 05		bcc $859a			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8595	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8597	8d 05 07	sta $0705			sta 	EncodeState
.859a					_ESTANoSwitch:
.859a	38		sec				sec
.859b	60		rts				rts
.859c					_ESTAHighState:
.859c	68		pla				pla 								; get value back
.859d	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.859f	f0 05		beq $85a6			beq 	_ESTASwitchFloat
.85a1	20 05 86	jsr $8605			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.85a4	38		sec				sec
.85a5	60		rts				rts
.85a6					_ESTASwitchFloat:
.85a6	9c 07 07	stz $0707			stz 	DecimalCount
.85a9	e8		inx				inx 								; zero the decimal additive.
.85aa	20 52 88	jsr $8852			jsr 	NSMSetZero
.85ad	ca		dex				dex
.85ae	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.85b0	80 ab		bra $855d			bra 	_ENExitChange
.85b2					_ESTADecimalState:
.85b2	68		pla				pla 								; digit.
.85b3	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.85b5	f0 96		beq $854d			beq 	_ENFail
.85b7	e8		inx				inx 								; put digit into fractional part of X+1
.85b8	20 05 86	jsr $8605			jsr 	ESTAShiftDigitIntoMantissa
.85bb	ca		dex				dex
.85bc	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.85bf	ad 07 07	lda $0707			lda 	DecimalCount
.85c2	c9 0b		cmp #$0b			cmp 	#11
.85c4	f0 02		beq $85c8			beq 	_ESTADSFail
.85c6	38		sec				sec
.85c7	60		rts				rts
.85c8					_ESTADSFail:
.85c8	4c b0 92	jmp $92b0			jmp 	RangeError
.85cb					_ENConstructFinal:
.85cb	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.85ce	f0 33		beq $8603			beq 	_ENCFExit 					; no decimals
.85d0	5a		phy				phy
.85d1	0a		asl a				asl 	a 							; x 4 and CLC
.85d2	0a		asl a				asl 	a
.85d3	6d 07 07	adc $0707			adc 	DecimalCount
.85d6	a8		tay				tay
.85d7	b9 6f 92	lda $926f,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.85da	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.85dd	b9 70 92	lda $9270,y			lda 	DecimalScalarTable-5+1,y
.85e0	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.85e3	b9 71 92	lda $9271,y			lda 	DecimalScalarTable-5+2,y
.85e6	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.85e9	b9 72 92	lda $9272,y			lda 	DecimalScalarTable-5+3,y
.85ec	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.85ef	b9 73 92	lda $9273,y			lda 	DecimalScalarTable-5+4,y
.85f2	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.85f5	a9 08		lda #$08			lda 	#NSTFloat
.85f7	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.85fa	7a		ply				ply
.85fb	e8		inx				inx 								; multiply decimal const by decimal scalar
.85fc	20 24 91	jsr $9124			jsr 	FloatMultiply
.85ff	ca		dex				dex
.8600	20 b9 8f	jsr $8fb9			jsr 	FloatAdd 					; add to integer part.
.8603					_ENCFExit:
.8603	18		clc				clc 								; reject the digit.
.8604	60		rts				rts
.8605					ESTAShiftDigitIntoMantissa:
.8605	29 0f		and #$0f			and 	#15 						; save digit
.8607	48		pha				pha
.8608	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.860b	48		pha				pha
.860c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.860f	48		pha				pha
.8610	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8613	48		pha				pha
.8614	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8617	48		pha				pha
.8618	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; x 2
.861b	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; x 4
.861e	18		clc				clc 								; pop mantissa and add
.861f	68		pla				pla
.8620	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8623	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8626	68		pla				pla
.8627	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.862a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.862d	68		pla				pla
.862e	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8631	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8634	68		pla				pla
.8635	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8638	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.863b	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; x 10
.863e	68		pla				pla 								; add digit
.863f	18		clc				clc
.8640	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8643	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8646	90 0d		bcc $8655			bcc 	_ESTASDExit
.8648	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.864b	d0 08		bne $8655			bne 	_ESTASDExit
.864d	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8650	d0 03		bne $8655			bne 	_ESTASDExit
.8652	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8655					_ESTASDExit:
.8655	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8656					EvaluateTerm:
.8656	b1 30		lda ($30),y			lda 	(codePtr),y
.8658	30 18		bmi $8672			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.865a	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.865c	b0 6f		bcs $86cd			bcs 	_ETVariable
.865e	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8660	90 6f		bcc $86d1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8662	c9 3a		cmp #$3a			cmp 	#'9'+1
.8664	b0 6b		bcs $86d1			bcs 	_ETPuncUnary
.8666	20 34 85	jsr $8534			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8669					_ETNumber:
.8669	c8		iny				iny 								; keep encoding until we have the numbers
.866a	b1 30		lda ($30),y			lda 	(codePtr),y
.866c	20 37 85	jsr $8537			jsr 	EncodeNumberContinue
.866f	b0 f8		bcs $8669			bcs 	_ETNumber 					; go back if accepted.
.8671	60		rts				rts
.8672					_ETCheckUnary:
.8672	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8674	f0 41		beq $86b7			beq 	_ETString
.8676	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8678	f0 12		beq $868c			beq 	_ETHexConstant
.867a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.867c	90 0b		bcc $8689			bcc 	_ETSyntaxError
.867e	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8680	b0 07		bcs $8689			bcs 	_ETSyntaxError
.8682	da		phx				phx 								; push X on the stack
.8683	0a		asl a				asl 	a 							; put vector x 2 into X
.8684	aa		tax				tax
.8685	c8		iny				iny 								; consume unary function token
.8686	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8689					_ETSyntaxError:
.8689	4c ab 92	jmp $92ab			jmp 	SyntaxError
.868c					_ETHexConstant:
.868c	c8		iny				iny 								; skip #
.868d	c8		iny				iny 								; skip count
.868e	20 52 88	jsr $8852			jsr 	NSMSetZero 					; clear result
.8691					_ETHLoop:
.8691	b1 30		lda ($30),y			lda 	(codePtr),y
.8693	c8		iny				iny 								; and consume
.8694	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8696	f0 1e		beq $86b6			beq 	_ETHExit
.8698	48		pha				pha 								; save on stack.
.8699	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; x 2
.869c	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; x 4
.869f	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; x 8
.86a2	20 67 88	jsr $8867			jsr 	NSMShiftLeft 				; x 16
.86a5	68		pla				pla 								; ASCII
.86a6	c9 41		cmp #$41			cmp 	#'A'
.86a8	90 02		bcc $86ac			bcc 	_ETHNotChar
.86aa	e9 07		sbc #$07			sbc 	#7
.86ac					_ETHNotChar:
.86ac	29 0f		and #$0f			and 	#15 						; digit now
.86ae	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.86b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86b4	80 db		bra $8691			bra 	_ETHLoop 					; go round.
.86b6					_ETHExit:
.86b6	60		rts				rts
.86b7					_ETString:
.86b7	c8		iny				iny 								; look at length
.86b8	b1 30		lda ($30),y			lda 	(codePtr),y
.86ba	48		pha				pha
.86bb	c8		iny				iny 								; first character
.86bc	20 cb 88	jsr $88cb			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.86bf	68		pla				pla 								; restore count and save
.86c0	85 36		sta $36				sta 	zTemp0
.86c2	98		tya				tya 								; add length to Y to skip it.
.86c3	18		clc				clc
.86c4	65 36		adc $36				adc 	zTemp0
.86c6	a8		tay				tay
.86c7	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.86c9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86cc	60		rts				rts
.86cd					_ETVariable:
>86cd	db						.byte 	$DB 						; causes a break in the emulator
.86ce	4c ff ff	jmp $ffff			jmp 	$FFFF
.86d1					_ETPuncUnary:
.86d1	c8		iny				iny 								; consume the unary character
.86d2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.86d4	f0 31		beq $8707			beq 	_ETUnaryNegate
.86d6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.86d8	f0 3d		beq $8717			beq 	_ETDereference
.86da	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.86dc	f0 58		beq $8736			beq 	_ETParenthesis
.86de	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.86e0	f0 43		beq $8725			beq 	_ETStringReference
.86e2	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.86e4	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.86e6	f0 06		beq $86ee			beq 	_ETIndirection
.86e8	e6 36		inc $36				inc 	zTemp0
.86ea	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.86ec	d0 9b		bne $8689			bne 	_ETSyntaxError
.86ee					_ETIndirection:
.86ee	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.86f0	1a		inc a				inc 	a
.86f1	48		pha				pha
.86f2	20 56 86	jsr $8656			jsr 	EvaluateTerm				; evaluate the term
.86f5	20 9a 84	jsr $849a			jsr 	Dereference 				; dereference it.
.86f8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.86fb	d0 07		bne $8704			bne 	_ETTypeMismatch
.86fd	68		pla				pla 								; indirection 1-2
.86fe	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8700	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8703	60		rts				rts
.8704					_ETTypeMismatch:
.8704	4c b5 92	jmp $92b5			jmp 	TypeError
.8707					_ETUnaryNegate:
.8707	20 56 86	jsr $8656			jsr 	EvaluateTerm				; evaluate the term
.870a	20 9a 84	jsr $849a			jsr 	Dereference 				; dereference it.
.870d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8710	29 10		and #$10			and 	#NSTString
.8712	d0 f0		bne $8704			bne 	_ETTypeMismatch
.8714	4c fe 87	jmp $87fe			jmp 	NSMNegate  					; just toggles the sign bit.
.8717					_ETDereference:
.8717	20 56 86	jsr $8656			jsr 	EvaluateTerm				; evaluate the term
.871a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.871d	29 20		and #$20			and 	#NSBIsReference
.871f	f0 e3		beq $8704			beq 	_ETTypeMismatch
.8721	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8724	60		rts				rts
.8725					_ETStringReference:
.8725	20 56 86	jsr $8656			jsr 	EvaluateTerm				; evaluate the term
.8728	20 9a 84	jsr $849a			jsr 	Dereference 				; dereference it.
.872b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.872e	d0 d4		bne $8704			bne 	_ETTypeMismatch
.8730	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8732	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8735	60		rts				rts
.8736					_ETParenthesis:
.8736	20 58 84	jsr $8458			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8739	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket 			; check for )
.873c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/abs.asm

.91aa					AbsUnary:
.91aa	fa		plx				plx 								; restore stack pos
.91ab	20 a9 87	jsr $87a9			jsr 	EvaluateNumber 				; get a float or int
.91ae	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket
.91b1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.91b4	29 7f		and #$7f			and 	#$7F
.91b6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/asc.asm

.91ba					AscUnary:
.91ba	fa		plx				plx 								; restore stack pos
.91bb	20 b4 87	jsr $87b4			jsr 	EvaluateString 				; get a string
.91be	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.91c0	20 54 88	jsr $8854			jsr 	NSMSetByte
.91c3	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket
.91c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/frac.asm

.91c7					FracUnary:
.91c7	fa		plx				plx 								; restore stack pos
.91c8	20 a9 87	jsr $87a9			jsr 	EvaluateNumber 				; get a float or int
.91cb	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket
.91ce	bd 00 06	lda $0600,x			lda 	NSStatus,x
.91d1	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.91d3	f0 04		beq $91d9			beq 	_IUZero
.91d5	20 97 90	jsr $9097			jsr 	FloatFractionalPart
.91d8	60		rts				rts
.91d9					_IUZero:
.91d9	20 52 88	jsr $8852			jsr 	NSMSetZero
.91dc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/int.asm

.91dd					IntUnary:
.91dd	fa		plx				plx 								; restore stack pos
.91de	20 a9 87	jsr $87a9			jsr 	EvaluateNumber 				; get a float or int
.91e1	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket
.91e4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.91e7	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.91e9	f0 03		beq $91ee			beq 	_IUExit
.91eb	20 fa 90	jsr $90fa			jsr 	FloatIntegerPart
.91ee					_IUExit:
.91ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/len.asm

.91ef					LenUnary:
.91ef	fa		plx				plx 								; restore stack pos
.91f0	20 b4 87	jsr $87b4			jsr 	EvaluateString 				; get a string
.91f3	5a		phy				phy
.91f4	a0 00		ldy #$00			ldy 	#0 							; find length
.91f6					_LenFind:
.91f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.91f8	f0 06		beq $9200			beq 	_LenExit
.91fa	c8		iny				iny
.91fb	d0 f9		bne $91f6			bne 	_LenFind
.91fd	4c b0 92	jmp $92b0			jmp 	RangeError 					; string > 255
.9200					_LenExit:
.9200	98		tya				tya
.9201	20 54 88	jsr $8854			jsr 	NSMSetByte
.9204	7a		ply				ply
.9205	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket
.9208	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/not.asm

.873d					Unary_Not:
.873d	fa		plx				plx
.873e	20 cc 87	jsr $87cc			jsr 	EvaluateInteger 			; get integer
.8741	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket
.8744	20 82 88	jsr $8882			jsr 	NSMIsZero 					; zero mantissa ?
.8747	f0 04		beq $874d			beq 	_NotZero
.8749	20 52 88	jsr $8852			jsr 	NSMSetZero
.874c	60		rts				rts
.874d					_NotZero:
.874d	4c 66 8d	jmp $8d66			jmp 	ReturnTrue
.8750					_UNBad:
.8750	4c ba 92	jmp $92ba			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/rnd.asm

.8753					Unary_Rnd:
.8753	20 a9 87	jsr $87a9			jsr 	EvaluateNumber 				; number to use.
.8756	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket 			; closing bracket
.8759	20 82 87	jsr $8782			jsr 	Random32Bit 				; generate a number.
.875c	ad 08 07	lda $0708			lda 	RandomSeed+0
.875f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8762	ad 09 07	lda $0709			lda 	RandomSeed+1
.8765	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8768	ad 0a 07	lda $070a			lda 	RandomSeed+2
.876b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.876e	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8771	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8773	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8776	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8778	8d 28 06	sta $0628			sta 	NSExponent
.877b	a9 08		lda #$08			lda 	#NSTFloat
.877d	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8780	db						.byte 	$DB 						; causes a break in the emulator
.8781	60		rts				rts
.8782					Random32Bit:
.8782	5a		phy				phy
.8783	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8785	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8788	d0 03		bne $878d			bne 	_Random1
.878a	a8		tay				tay 								; if so do it 256 times
.878b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.878d					_Random1:
.878d	0a		asl a				asl 	a 							; LSFR RNG
.878e	2e 09 07	rol $0709			rol 	RandomSeed+1
.8791	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8794	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8797	90 02		bcc $879b			bcc 	_Random2
.8799	49 c5		eor #$c5			eor 	#$C5
.879b					_Random2:
.879b	88		dey				dey
.879c	d0 ef		bne $878d			bne 	_Random1
.879e	7a		ply				ply
.879f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/sgn.asm

.9209					SgnUnary:
.9209	fa		plx				plx 								; restore stack pos
.920a	20 a9 87	jsr $87a9			jsr 	EvaluateNumber 				; get a float or int
.920d	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket
.9210	20 82 88	jsr $8882			jsr 	NSMIsZero 					; if zero
.9213	f0 10		beq $9225			beq 	_SGZero  					; return Int Zero
.9215	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9218	48		pha				pha
.9219	a9 01		lda #$01			lda 	#1 							; set to 1
.921b	20 54 88	jsr $8854			jsr 	NSMSetByte
.921e	68		pla				pla
.921f	29 80		and #$80			and		#$80 						; copy the sign byte out
.9221	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9224	60		rts				rts
.9225	20 52 88	jsr $8852	_SGZero:jsr 	NSMSetZero
.9228	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/val.asm

.9229					ValUnary:
.9229	fa		plx				plx 								; restore stack pos
.922a	20 3f 92	jsr $923f			jsr 	ValMainCode 				; do the main val() code
.922d	b0 01		bcs $9230			bcs 	_VUError 					; couldn't convert
.922f	60		rts				rts
.9230					_VUError:
.9230	4c b5 92	jmp $92b5			jmp 	TypeError
.9233					IsValUnary:
.9233	fa		plx				plx 								; restore stack pos
.9234	20 3f 92	jsr $923f			jsr 	ValMainCode 				; do the main val() code
.9237	b0 03		bcs $923c			bcs 	_VUBad
.9239	4c 66 8d	jmp $8d66			jmp 	ReturnTrue
.923c					_VUBad:
.923c	4c 72 8d	jmp $8d72			jmp 	ReturnFalse
.923f					ValMainCode:
.923f	20 b4 87	jsr $87b4			jsr 	EvaluateString 				; get a string
.9242	20 4c 8d	jsr $8d4c			jsr 	CheckRightBracket 			; check right bracket present
.9245	5a		phy				phy
.9246	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9248	f0 17		beq $9261			beq 	_VMCFail2
.924a	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.924c	48		pha				pha 								; save first character
.924d	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.924f	d0 01		bne $9252			bne 	_VMCStart
.9251	c8		iny				iny 								; skip over -
.9252					_VMCStart:
.9252	38		sec				sec 								; initialise first time round.
.9253					_VMCNext:
.9253	c8		iny				iny 								; pre-increment
.9254	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9256	f0 0c		beq $9264			beq 	_VMCSuccess 				; successful.
.9258	20 38 85	jsr $8538			jsr 	EncodeNumber 				; send it to the number-builder
.925b	90 03		bcc $9260			bcc 	_VMCFail 					; if failed, give up.
.925d	18		clc				clc 								; next time round, countinue
.925e	80 f3		bra $9253			bra 	_VMCNext
.9260					_VMCFail:
.9260	68		pla				pla
.9261					_VMCFail2:
.9261	7a		ply				ply
.9262	38		sec				sec
.9263	60		rts				rts
.9264					_VMCSuccess:
.9264	a9 00		lda #$00			lda 	#0 							; construct final
.9266	20 38 85	jsr $8538			jsr 	EncodeNumber
.9269	68		pla				pla
.926a	c9 2d		cmp #$2d			cmp 	#"-"
.926c	d0 03		bne $9271			bne 	_VMCNotNegative
.926e	20 fe 87	jsr $87fe			jsr		NSMNegate
.9271					_VMCNotNegative:
.9271	7a		ply				ply
.9272	18		clc				clc
.9273	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.87a0					EvaluateValue:
.87a0	48		pha				pha
.87a1	20 56 84	jsr $8456			jsr		EvaluateExpressionAt0 		; expression
.87a4	20 9a 84	jsr $849a			jsr 	Dereference					; derefernce it
.87a7	68		pla				pla
.87a8	60		rts				rts
.87a9					EvaluateNumber:
.87a9	20 a0 87	jsr $87a0			jsr 	EvaluateValue 				; get a value
.87ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.87af	29 10		and #$10			and 	#NSBIsString
.87b1	d0 16		bne $87c9			bne 	HelperTypeError
.87b3	60		rts				rts
.87b4					EvaluateString:
.87b4	20 a0 87	jsr $87a0			jsr 	EvaluateValue 				; get a value
.87b7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.87ba	29 10		and #$10			and 	#NSBIsString
.87bc	f0 0b		beq $87c9			beq 	HelperTypeError
.87be					CopyAddressToTemp0:
.87be	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.87c1	85 36		sta $36				sta 	zTemp0
.87c3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87c6	85 37		sta $37				sta 	zTemp0+1
.87c8	60		rts				rts
.87c9					HelperTypeError:
.87c9	4c b5 92	jmp $92b5			jmp 	TypeError
.87cc					EvaluateInteger:
.87cc	20 a9 87	jsr $87a9			jsr 	EvaluateNumber
.87cf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.87d2	d0 0a		bne $87de			bne 	HelperValueError 			; if not, it's a float.
.87d4	60		rts				rts
.87d5					EvaluateUnsignedInteger:
.87d5	20 cc 87	jsr $87cc			jsr 	EvaluateInteger 			; check integer is +ve
.87d8	bd 00 06	lda $0600,x			lda 	NSStatus,x
.87db	30 01		bmi $87de			bmi 	HelperValueError
.87dd	60		rts				rts
.87de					HelperValueError:
.87de	4c ba 92	jmp $92ba			jmp 	ArgumentError
.87e1					Evaluate16BitInteger:
.87e1	20 d5 87	jsr $87d5			jsr	 	EvaluateUnsignedInteger		; get integer
.87e4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.87e7	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.87ea	d0 f2		bne $87de			bne 	HelperValueError
.87ec	60		rts				rts
.87ed					Evaluate8BitInteger:
.87ed	20 d5 87	jsr $87d5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.87f0	d0 ec		bne $87de			bne 	HelperValueError
.87f2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.87f5	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.87f8	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87fb	d0 e1		bne $87de			bne 	HelperValueError
.87fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.87fe					NSMNegate:
.87fe	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8801	49 80		eor #$80			eor 	#NSBIsNegative
.8803	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8806	60		rts				rts
.8807					NSMNegateMantissa:
.8807	38		sec				sec
.8808	a9 00		lda #$00			lda 	#0
.880a	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.880d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8810	a9 00		lda #$00			lda 	#0
.8812	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8815	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8818	a9 00		lda #$00			lda 	#0
.881a	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.881d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8820	a9 00		lda #$00			lda 	#0
.8822	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8825	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8828	60		rts				rts
.8829					NSMShiftUpTwo:
.8829	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.882c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.882f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8832	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8835	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8838	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.883b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.883e	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8841	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8844	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8847	bd 00 06	lda $0600,x			lda 	NSStatus,x
.884a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.884d	60		rts				rts
.884e					NSMSetZeroMantissaOnly:
.884e	a9 00		lda #$00			lda 	#0
.8850	80 08		bra $885a			bra 	NSMSetMantissa
.8852					NSMSetZero:
.8852	a9 00		lda #$00			lda 	#0
.8854					NSMSetByte:
.8854	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8857	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.885a					NSMSetMantissa:
.885a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.885d	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8860	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8863	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8866	60		rts				rts
.8867					NSMShiftLeft:
.8867	18		clc				clc
.8868					NSMRotateLeft:
.8868	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.886b	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.886e	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8871	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8874	60		rts				rts
.8875					NSMShiftRight:
.8875	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8878	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.887b	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.887e	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8881	60		rts				rts
.8882					NSMIsZero:
.8882	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8885	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8888	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.888b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.888e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.9274					DecimalScalarTable:
>9274	66 66 66 66				.dword $66666666 ; 0.1
>9278	de					.byte $de
>9279	1f 85 eb 51				.dword $51eb851f ; 0.01
>927d	db					.byte $db
>927e	4c 37 89 41				.dword $4189374c ; 0.001
>9282	d8					.byte $d8
>9283	ac 8b db 68				.dword $68db8bac ; 0.0001
>9287	d4					.byte $d4
>9288	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>928c	d1					.byte $d1
>928d	83 de 1b 43				.dword $431bde83 ; 1e-06
>9291	ce					.byte $ce
>9292	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9296	ca					.byte $ca
>9297	89 3b e6 55				.dword $55e63b89 ; 1e-08
>929b	c7					.byte $c7
>929c	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>92a0	c4					.byte $c4
>92a1	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>92a5	c0					.byte $c0
>92a6	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>92aa	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.92ab					SyntaxError:
.92ab	a9 02		lda #$02		lda	#2
.92ad	4c af 81	jmp $81af		jmp	ErrorHandler
.92b0					RangeError:
.92b0	a9 04		lda #$04		lda	#4
.92b2	4c af 81	jmp $81af		jmp	ErrorHandler
.92b5					TypeError:
.92b5	a9 05		lda #$05		lda	#5
.92b7	4c af 81	jmp $81af		jmp	ErrorHandler
.92ba					ArgumentError:
.92ba	a9 07		lda #$07		lda	#7
.92bc	4c af 81	jmp $81af		jmp	ErrorHandler
.92bf					NotDoneError:
.92bf	a9 0c		lda #$0c		lda	#12
.92c1	4c af 81	jmp $81af		jmp	ErrorHandler
.92c4					ErrorText:
>92c4	42 72 65 61 6b 00			.text	"Break",0
>92ca	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>92d2	72 72 6f 72 00
>92d7	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>92df	20 62 79 20 7a 65 72 6f 00
>92e8	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>92f0	61 6e 67 65 00
>92f5	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>92fd	6d 61 74 63 68 00
>9303	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>930b	65 6d 6f 72 79 00
>9311	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9319	61 72 67 75 6d 65 6e 74 00
>9322	53 74 6f 70 00				.text	"Stop",0
>9327	53 74 72 69 6e 67 20 74			.text	"String too long",0
>932f	6f 6f 20 6c 6f 6e 67 00
>9337	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>933f	6e 20 66 61 69 6c 65 64 00
>9348	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9350	61 74 61 00
>9354	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>935c	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/memory.asm

.9362					MemoryPeek:
.9362	b2 36		lda ($36)			lda 	(zTemp0)
.9364	60		rts				rts
.9365					MemoryPoke:
.9365	92 36		sta ($36)			sta 	(zTemp0)
.9367	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/vectors.asm

.9368					EXTPrintCharacter:
.9368	48		pha				pha
.9369	da		phx				phx
.936a	5a		phy				phy
.936b	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.936e	7a		ply				ply
.936f	fa		plx				plx
.9370	68		pla				pla
.9371	60		rts				rts
.9372					EXTInputSingleCharacter:
.9372	da		phx				phx
.9373	5a		phy				phy
.9374					_EISCWait:
.9374	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9377	c9 00		cmp #$00			cmp 	#0
.9379	f0 f9		beq $9374			beq 	_EISCWait
.937b	7a		ply				ply
.937c	fa		plx				plx
.937d	60		rts				rts
.937e					EXTInputLine:
.937e	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9380					_ILLoop:
.9380	da		phx				phx 								; read character in
.9381	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9384	fa		plx				plx
.9385	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9387	f0 12		beq $939b			beq 	_ILBackspace
.9389	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.938b	f0 15		beq $93a2			beq 	_ILExit
.938d	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.938f	90 ef		bcc $9380			bcc 	_ILLoop
.9391	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9393	f0 eb		beq $9380			beq 	_ILLoop
.9395	9d 0c 08	sta $080c,x			sta 	lineBuffer,x 				; save it
.9398	e8		inx				inx
.9399	80 e5		bra $9380			bra 	_ILLoop
.939b					_ILBackspace:
.939b	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.939d	f0 e1		beq $9380			beq 	_ILLoop
.939f	ca		dex				dex 								; back one.
.93a0	80 de		bra $9380			bra 	_ILLoop
.93a2					_ILExit:
.93a2	20 68 93	jsr $9368			jsr 	EXTPrintCharacter
.93a5	9e 0c 08	stz $080c,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.93a8	60		rts				rts
.93a9					EXTBreakCheck:
.93a9	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.888f					MemoryNew:
.888f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8891	85 30		sta $30				sta 	codePtr
.8893	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8895	85 31		sta $31				sta 	codePtr+1
.8897	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8899	92 30		sta ($30)			sta 	(codePtr)
.889b	60		rts				rts
.889c					MemoryAppend:
.889c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.889e	85 30		sta $30				sta 	codePtr
.88a0	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.88a2	85 31		sta $31				sta 	codePtr+1
.88a4					_MAFindEnd:
.88a4	b2 30		lda ($30)			lda 	(codePtr)
.88a6	f0 0d		beq $88b5			beq 	_MAFoundEnd
.88a8	18		clc				clc
.88a9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88ab	65 30		adc $30				adc 	codePtr
.88ad	85 30		sta $30				sta 	codePtr
.88af	90 02		bcc $88b3			bcc 	_CREExit
.88b1	e6 31		inc $31				inc 	codePtr+1
.88b3					_CREExit:
.88b3	80 ef		bra $88a4			bra 	_MAFindEnd
.88b5					_MAFoundEnd:
.88b5	ac 0c 07	ldy $070c			ldy 	tokenOffset 				; bytes to copy
.88b8	c0 04		cpy #$04			cpy 	#4 							; blank line
.88ba	f0 0e		beq $88ca			beq 	_MANoLine
.88bc	a9 00		lda #$00			lda 	#0 							; end of program
.88be	91 30		sta ($30),y			sta 	(codePtr),y
.88c0					_MACopy:
.88c0	88		dey				dey
.88c1	b9 0c 07	lda $070c,y			lda 	tokenOffset,y
.88c4	91 30		sta ($30),y			sta 	(codePtr),y
.88c6	c0 00		cpy #$00			cpy 	#0
.88c8	d0 f6		bne $88c0			bne 	_MACopy
.88ca					_MANoLine:
.88ca	60		rts				rts
.88cb					MemoryInline:
.88cb	98		tya				tya 								; put address into stack,x
.88cc	18		clc				clc
.88cd	65 30		adc $30				adc 	codePtr
.88cf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88d2	a5 31		lda $31				lda 	codePtr+1
.88d4	69 00		adc #$00			adc 	#0
.88d6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88d9	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.88dc	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.88df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.88e0					VariableOpen:
.88e0	60		rts				rts
.88e1					VariableClose:
.88e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.88e2					BackloadProgram:
.88e2	a2 ff		ldx #$ff			ldx 	#$FF
.88e4	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.88e7	20 0b 89	jsr $890b			jsr 	BLReadByte
.88ea	30 1e		bmi $890a			bmi 	_BPExit
.88ec					_BPCopy:
.88ec	e8		inx				inx  								; copy byte in
.88ed	9d 0c 08	sta $080c,x			sta 	lineBuffer,x
.88f0	9e 0d 08	stz $080d,x			stz 	lineBuffer+1,x
.88f3	20 0b 89	jsr $890b			jsr 	BLReadByte 					; read next byte
.88f6	30 0a		bmi $8902			bmi 	_BPEndLine 					; -ve = EOL
.88f8	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.88fa	d0 02		bne $88fe			bne 	_BPNotTab
.88fc	a9 20		lda #$20			lda 	#' '
.88fe					_BPNotTab:
.88fe	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8900	b0 ea		bcs $88ec			bcs 	_BPCopy
.8902					_BPEndLine:
.8902	20 c7 8a	jsr $8ac7			jsr 	TokeniseLine 				; tokenise the line.
.8905	20 9c 88	jsr $889c			jsr 	MemoryAppend 				; append to current program
.8908	80 d8		bra $88e2			bra 	BackloadProgram
.890a					_BPExit:
.890a	60		rts				rts
.890b					BLReadByte:
.890b					_BLLoad:
.890b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.890e	ee 0c 89	inc $890c			inc 	_BLLoad+1
.8911	d0 03		bne $8916			bne 	_BLNoCarry
.8913	ee 0d 89	inc $890d			inc 	_BLLoad+2
.8916					_BLNoCarry:
.8916	c9 00		cmp #$00			cmp 	#0
.8918	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8919					TokeniseSearchTable:
.8919	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.891b	85 36		sta $36				sta 	zTemp0
.891d	a0 00		ldy #$00			ldy 	#0
.891f	a9 80		lda #$80			lda 	#$80 						; token #
.8921	85 38		sta $38				sta 	zTemp1
.8923					_TSTLoop:
.8923	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8925	30 49		bmi $8970			bmi 	_TSTFail 					; -ve = end of table
.8927	f0 2e		beq $8957			beq 	_TSTNext 					; zero, check next it's a dummy
.8929	c8		iny				iny 								; get the hash
.892a	b1 36		lda ($36),y			lda 	(zTemp0),y
.892c	88		dey				dey
.892d	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8930	d0 25		bne $8957			bne 	_TSTNext
.8932	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8935	38		sec				sec
.8936	ed 00 07	sbc $0700			sbc 	identStart
.8939	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.893b	d0 1a		bne $8957			bne 	_TSTNext
.893d	5a		phy				phy 								; save Y , we might fail
.893e	c8		iny				iny 								; point to text
.893f	c8		iny				iny
.8940	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8943					_TSTCompareName:
.8943	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; compare text.
.8946	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8948	d0 0c		bne $8956			bne 	_TSTNextPullY 				; fail, pullY and do next
.894a	e8		inx				inx
.894b	c8		iny				iny
.894c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.894f	d0 f2		bne $8943			bne 	_TSTCompareName
.8951	7a		ply				ply 								; throw Y
.8952	a5 38		lda $38				lda 	zTemp1 						; get token #
.8954	38		sec				sec 								; return with CS = passed.
.8955	60		rts				rts
.8956					_TSTNextPullY:
.8956	7a		ply				ply 								; restore current, fall through.
.8957					_TSTNext:
.8957	e6 38		inc $38				inc 	zTemp1 						; token counter
.8959	98		tya				tya
.895a	18		clc				clc
.895b	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.895d	1a		inc a				inc 	a 							; +1
.895e	1a		inc a				inc 	a 							; +2
.895f	a8		tay				tay
.8960	10 c1		bpl $8923			bpl 	_TSTLoop 					; if Y < $80 loop back
.8962	98		tya				tya 								; add Y to zTemp0 and reset Y
.8963	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8965	18		clc				clc  								; but have tables > 255 bytes
.8966	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8968	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.896a	90 b7		bcc $8923			bcc 	_TSTLoop
.896c	e6 37		inc $37				inc 	zTemp0+1
.896e	80 b3		bra $8923			bra 	_TSTLoop
.8970					_TSTFail:
.8970	18		clc				clc
.8971	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.8972					KeywordSet0:
>8972	00 65					.text	0,$65,""               ; $80 !0:EOF
>8974	00 58					.text	0,$58,""               ; $81 !1:SH1
>8976	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8978	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>897e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8986	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>898c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8993	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>899a	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>89a1	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>89a7	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>89af	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>89b7	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>89bd	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>89c4	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>89ca	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>89d2	28
>89d3	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>89d9	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>89df	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>89e5	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>89ec	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>89f2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>89f8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>89fd	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8a01	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8a07	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8a0f	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8a16	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8a1d	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8a25	43
>8a26	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8a2c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8a33	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8a39	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8a3f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8a44	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8a4a	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8a4f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8a56	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8a5c	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8a61	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8a68	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8a6e	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8a73	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8a7b	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8a81	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8a85	ff					.text	$FF
.8a86					KeywordSet1:
>8a86	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a88	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a8a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a8c	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8a94	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8a9b	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8aa0	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8aa6	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8aab	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8ab3	45
>8ab4	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8ab9	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8abf	ff					.text	$FF
.8ac0					KeywordSet2:
>8ac0	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ac2	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ac4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ac6	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8ac7					TokeniseLine:
.8ac7	20 4f 8c	jsr $8c4f			jsr 	FixLineBufferCase 			; fix line case
.8aca	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8acc	8d 0c 07	sta $070c			sta 	tokenOffset
.8acf	9c 0d 07	stz $070d			stz 	tokenLineNumber
.8ad2	9c 0e 07	stz $070e			stz 	tokenLineNumber+1
.8ad5	a2 ff		ldx #$ff			ldx 	#$FF
.8ad7					_TKFindFirst:
.8ad7	e8		inx				inx
.8ad8	bd 0c 08	lda $080c,x			lda 	lineBuffer,x
.8adb	f0 79		beq $8b56			beq 	_TKExit
.8add	c9 20		cmp #$20			cmp 	#' '
.8adf	90 f6		bcc $8ad7			bcc 	_TKFindFirst
.8ae1	c9 30		cmp #$30			cmp 	#'0'
.8ae3	90 07		bcc $8aec			bcc 	_TKNoLineNumber
.8ae5	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ae7	b0 03		bcs $8aec			bcs 	_TKNoLineNumber
.8ae9	20 79 8c	jsr $8c79			jsr 	TokeniseExtractLineNumber
.8aec					_TKNoLineNumber:
.8aec					_TKTokeniseLoop:
.8aec	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8aef	f0 65		beq $8b56			beq 	_TKExit
.8af1	e8		inx				inx
.8af2	c9 20		cmp #$20			cmp 	#' '
.8af4	f0 f6		beq $8aec			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8af6	ca		dex				dex 								; undo last get, A contains character, X is position.
.8af7	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8af9	f0 61		beq $8b5c			beq 	_TKTokeniseIdentifier
.8afb	c9 41		cmp #$41			cmp 	#'A'
.8afd	90 04		bcc $8b03			bcc 	_TKTokenisePunctuation
.8aff	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8b01	90 59		bcc $8b5c			bcc 	_TKTokeniseIdentifier
.8b03					_TKTokenisePunctuation:
.8b03	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8b05	f0 27		beq $8b2e			beq 	_TKString
.8b07	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8b09	f0 28		beq $8b33			beq 	_TKHexConstant
.8b0b	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8b0d	f0 29		beq $8b38			beq 	_TKCheckDouble
.8b0f	c9 3e		cmp #$3e			cmp 	#'>'
.8b11	f0 25		beq $8b38			beq 	_TKCheckDouble
.8b13					_TKStandardPunctuation:
.8b13	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; get it back.
.8b16	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8b18	90 0e		bcc $8b28			bcc 	_TKNoShift
.8b1a	48		pha				pha 								; save
.8b1b	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8b1d	85 36		sta $36				sta 	zTemp0
.8b1f	68		pla				pla
.8b20	29 20		and #$20			and 	#32 						; bit 5
.8b22	4a		lsr a				lsr 	a 							; shift into bit 3
.8b23	4a		lsr a				lsr 	a
.8b24	05 36		ora $36				ora 	zTemp0
.8b26	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8b28					_TKNoShift:
.8b28	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte 			; write the punctuation character
.8b2b	e8		inx				inx 								; consume the character
.8b2c	80 be		bra $8aec			bra 	_TKTokeniseLoop 			; and loop round again.
.8b2e					_TKString:
.8b2e	20 de 8b	jsr $8bde			jsr 	TokeniseString
.8b31	80 b9		bra $8aec			bra 	_TKTokeniseLoop
.8b33					_TKHexConstant:
.8b33	20 19 8c	jsr $8c19			jsr 	TokeniseHexConstant
.8b36	80 b4		bra $8aec			bra 	_TKTokeniseLoop
.8b38					_TKCheckDouble:
.8b38	bd 0d 08	lda $080d,x			lda 	lineBuffer+1,x 				; get next character
.8b3b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8b3d	90 d4		bcc $8b13			bcc 	_TKStandardPunctuation
.8b3f	c9 3f		cmp #$3f			cmp 	#'>'+1
.8b41	b0 d0		bcs $8b13			bcs 	_TKStandardPunctuation
.8b43	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8b46	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8b48	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8b49	7d 0d 08	adc $080d,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8b4c	38		sec				sec
.8b4d	e9 3c		sbc #$3c			sbc 	#'<'
.8b4f	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8b52	e8		inx				inx 								; consume both
.8b53	e8		inx				inx
.8b54	80 96		bra $8aec			bra 	_TKTokeniseLoop
.8b56	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8b58	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8b5b	60		rts				rts
.8b5c					_TKTokeniseIdentifier:
.8b5c	8e 00 07	stx $0700			stx 	identStart 					; save start
.8b5f	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8b62					_TKCheckLoop:
.8b62	e8		inx				inx 								; look at next, we know first is identifier.
.8b63	bd 0c 08	lda $080c,x			lda  	lineBuffer,x
.8b66	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8b68	f0 f8		beq $8b62			beq 	_TKCheckLoop
.8b6a	c9 30		cmp #$30			cmp	 	#"0"
.8b6c	90 0c		bcc $8b7a			bcc 	_TKEndIdentifier
.8b6e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b70	90 f0		bcc $8b62			bcc 	_TKCheckLoop
.8b72	c9 41		cmp #$41			cmp	 	#"A"
.8b74	90 04		bcc $8b7a			bcc 	_TKEndIdentifier
.8b76	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b78	90 e8		bcc $8b62			bcc 	_TKCheckLoop
.8b7a					_TKEndIdentifier:
.8b7a	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8b7d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8b7f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8b81	f0 06		beq $8b89			beq 	_TKHasTypeCharacter
.8b83	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8b85	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8b87	d0 07		bne $8b90			bne 	_TKNoTypeCharacter
.8b89					_TKHasTypeCharacter:
.8b89	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8b8c	e8		inx				inx 								; read next
.8b8d	bd 0c 08	lda $080c,x			lda 	lineBuffer,x
.8b90					_TKNoTypeCharacter:
.8b90	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8b92	d0 09		bne $8b9d			bne 	_TKNoArray
.8b94	e8		inx				inx 								; skip the (
.8b95	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8b98	09 04		ora #$04			ora 	#$04
.8b9a	8d 04 07	sta $0704			sta 	identTypeByte
.8b9d					_TKNoArray:
.8b9d	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8ba0	20 3a 8c	jsr $8c3a			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8ba3	a0 89		ldy #$89			ldy 	#(KeywordSet0) >> 8
.8ba5	a9 72		lda #$72			lda 	#(KeywordSet0) & $FF
.8ba7	20 19 89	jsr $8919			jsr 	TokeniseSearchTable
.8baa	a2 00		ldx #$00			ldx 	#0
.8bac	b0 1f		bcs $8bcd			bcs 	_TKFoundToken
.8bae	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8bb0	a9 86		lda #$86			lda 	#(KeywordSet1) & $FF
.8bb2	20 19 89	jsr $8919			jsr 	TokeniseSearchTable
.8bb5	a2 81		ldx #$81			ldx 	#$81
.8bb7	b0 14		bcs $8bcd			bcs 	_TKFoundToken
.8bb9	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8bbb	a9 86		lda #$86			lda 	#(KeywordSet1) & $FF
.8bbd	20 19 89	jsr $8919			jsr 	TokeniseSearchTable
.8bc0	a2 82		ldx #$82			ldx 	#$82
.8bc2	b0 09		bcs $8bcd			bcs 	_TKFoundToken
.8bc4	20 ca 8c	jsr $8cca			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8bc7	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8bca	4c ec 8a	jmp $8aec			jmp 	_TKTokeniseLoop 			; and go round again.
.8bcd					_TKFoundToken:
.8bcd	48		pha				pha 								; save token
.8bce	8a		txa				txa 								; shift in X, is there one ?
.8bcf	f0 03		beq $8bd4			beq 	_TKNoTShift
.8bd1	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte 			; if so, write it out
.8bd4					_TKNoTShift:
.8bd4	68		pla				pla 								; restore and write token
.8bd5	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8bd8	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8bdb	4c ec 8a	jmp $8aec			jmp 	_TKTokeniseLoop 			; and go round again.
.8bde					TokeniseString:
.8bde	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8be0	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8be3	e8		inx				inx									; start of quoted string.
.8be4	da		phx				phx 								; push start of string on top
.8be5	ca		dex				dex
.8be6					_TSFindEnd:
.8be6	e8		inx				inx
.8be7	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; next character
.8bea	f0 04		beq $8bf0			beq 	_TSEndOfString
.8bec	c9 22		cmp #$22			cmp 	#'"'
.8bee	d0 f6		bne $8be6			bne 	_TSFindEnd
.8bf0					_TSEndOfString:
.8bf0	7a		ply				ply  								; so now Y is first character, X is character after end.
.8bf1	48		pha				pha 								; save terminating character
.8bf2	20 fa 8b	jsr $8bfa			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8bf5	68		pla				pla 								; terminating character
.8bf6	f0 01		beq $8bf9			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8bf8	e8		inx				inx
.8bf9					_TSNotQuote:
.8bf9	60		rts				rts
.8bfa					TOWriteBlockXY:
.8bfa	86 36		stx $36				stx 	zTemp0 						; write end character
.8bfc	98		tya				tya
.8bfd	49 ff		eor #$ff			eor 	#$FF
.8bff	38		sec				sec
.8c00	65 36		adc $36				adc 	zTemp0
.8c02	1a		inc a				inc 	a 							; one extra for NULL
.8c03	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8c06					_TOBlockLoop:
.8c06	c4 36		cpy $36				cpy 	zTemp0
.8c08	f0 09		beq $8c13			beq 	_TOBlockExit
.8c0a	b9 0c 08	lda $080c,y			lda 	lineBuffer,y
.8c0d	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8c10	c8		iny				iny
.8c11	80 f3		bra $8c06			bra 	_TOBlockLoop
.8c13					_TOBlockExit:
.8c13	a9 00		lda #$00			lda 	#0
.8c15	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8c18	60		rts				rts
.8c19					TokeniseHexConstant:
.8c19	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8c1b	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8c1e	e8		inx				inx									; start of quoted string.
.8c1f	da		phx				phx 								; push start of constant on top
.8c20	ca		dex				dex
.8c21					_THFindLoop:
.8c21	e8		inx				inx
.8c22	bd 0c 08	lda $080c,x			lda 	lineBuffer,x
.8c25	c9 30		cmp #$30			cmp 	#"0"
.8c27	90 0c		bcc $8c35			bcc 	_THFoundEnd
.8c29	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c2b	90 f4		bcc $8c21			bcc 	_THFindLoop
.8c2d	c9 41		cmp #$41			cmp 	#"A"
.8c2f	90 04		bcc $8c35			bcc 	_THFoundEnd
.8c31	c9 47		cmp #$47			cmp 	#"F"+1
.8c33	90 ec		bcc $8c21			bcc 	_THFindLoop
.8c35					_THFoundEnd:
.8c35	7a		ply				ply 								; restore start
.8c36	20 fa 8b	jsr $8bfa			jsr 	TOWriteBlockXY 				; output the block
.8c39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8c3a					TokeniseCalculateHash:
.8c3a	da		phx				phx
.8c3b	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8c3e	a9 00		lda #$00			lda 	#0
.8c40					_TCHLoop:
.8c40	18		clc				clc
.8c41	7d 0c 08	adc $080c,x			adc 	lineBuffer,x
.8c44	e8		inx				inx
.8c45	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8c48	d0 f6		bne $8c40			bne 	_TCHLoop
.8c4a	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8c4d	fa		plx				plx
.8c4e	60		rts				rts
.8c4f					FixLineBufferCase:
.8c4f	a2 00		ldx #$00			ldx 	#0
.8c51					_FLBCLoop:
.8c51	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; get next character
.8c54	f0 22		beq $8c78			beq 	_FLBCExit 					; end of string.
.8c56	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8c58	f0 11		beq $8c6b			beq 	_FLBCInQuotes
.8c5a	e8		inx				inx
.8c5b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8c5d	90 f2		bcc $8c51			bcc 	_FLBCLoop
.8c5f	c9 7b		cmp #$7b			cmp 	#'z'+1
.8c61	b0 ee		bcs $8c51			bcs 	_FLBCLoop
.8c63	38		sec				sec 								; make U/C
.8c64	e9 20		sbc #$20			sbc 	#32
.8c66	9d 0b 08	sta $080b,x			sta	 	lineBuffer-1,x 				; write back
.8c69	80 e6		bra $8c51			bra 	_FLBCLoop
.8c6b					_FLBCInQuotes:
.8c6b	e8		inx				inx 								; advance
.8c6c	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; get next
.8c6f	f0 07		beq $8c78			beq 	_FLBCExit 					; exit on EOS
.8c71	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8c73	d0 f6		bne $8c6b			bne 	_FLBCInQuotes
.8c75	e8		inx				inx 								; skip over it
.8c76	80 d9		bra $8c51			bra 	_FLBCLoop
.8c78					_FLBCExit:
.8c78	60		rts				rts
.8c79					TokeniseExtractLineNumber:
.8c79	ad 0e 07	lda $070e			lda 	tokenLineNumber+1 			; push current value on stack
.8c7c	48		pha				pha
.8c7d	ad 0d 07	lda $070d			lda 	tokenLineNumber
.8c80	48		pha				pha
.8c81	20 b7 8c	jsr $8cb7			jsr 	_TELNTimes2 				; line # x 4
.8c84	20 b7 8c	jsr $8cb7			jsr 	_TELNTimes2 				; line # x 2
.8c87	18		clc				clc 								; add stacked value
.8c88	68		pla				pla
.8c89	6d 0d 07	adc $070d			adc 	tokenLineNumber
.8c8c	8d 0d 07	sta $070d			sta 	tokenLineNumber
.8c8f	68		pla				pla
.8c90	6d 0e 07	adc $070e			adc 	tokenLineNumber+1
.8c93	8d 0e 07	sta $070e			sta 	tokenLineNumber+1 			; line # x 5
.8c96	20 b7 8c	jsr $8cb7			jsr 	_TELNTimes2 				; line # x 10
.8c99	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; get and consume character
.8c9c	e8		inx				inx
.8c9d	29 0f		and #$0f			and 	#15 						; add to line #
.8c9f	18		clc				clc
.8ca0	6d 0d 07	adc $070d			adc 	tokenLineNumber
.8ca3	8d 0d 07	sta $070d			sta 	tokenLineNumber
.8ca6	90 03		bcc $8cab			bcc 	_TLENNoCarry
.8ca8	ee 0e 07	inc $070e			inc 	tokenLineNumber+1
.8cab					_TLENNoCarry:
.8cab	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; more digits ?
.8cae	c9 30		cmp #$30			cmp 	#'0'
.8cb0	90 04		bcc $8cb6			bcc 	_TLENExit
.8cb2	c9 3a		cmp #$3a			cmp 	#'9'+1
.8cb4	90 c3		bcc $8c79			bcc 	TokeniseExtractLineNumber
.8cb6					_TLENExit:
.8cb6	60		rts				rts
.8cb7					_TELNTimes2:
.8cb7	0e 0d 07	asl $070d			asl 	tokenLineNumber
.8cba	2e 0e 07	rol $070e			rol 	tokenLineNumber+1
.8cbd	60		rts				rts
.8cbe					TokeniseWriteByte:
.8cbe	da		phx				phx
.8cbf	ae 0c 07	ldx $070c			ldx 	tokenOffset 				; next slot to write to
.8cc2	9d 0c 07	sta $070c,x			sta 	tokenOffset,x 				; write byte out
.8cc5	ee 0c 07	inc $070c			inc 	tokenOffset 				; advance slot.
.8cc8	fa		plx				plx
.8cc9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8cca					CheckCreateVariableRecord:
.8cca	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ccc	85 36		sta $36				sta 	0+zTemp0
.8cce	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cd0	85 37		sta $37				sta 	1+zTemp0
.8cd2	20 e0 88	jsr $88e0			jsr 	VariableOpen 				; make variable space available
.8cd5					_CCVSearch:
.8cd5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8cd7	f0 2c		beq $8d05			beq 	_CCVFail
.8cd9	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8cdb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8cdd	cd 03 07	cmp $0703			cmp 	identHash
.8ce0	d0 16		bne $8cf8			bne 	_CCVNext
.8ce2	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8ce4	ae 00 07	ldx $0700			ldx 	identStart
.8ce7					_CCVCompare:
.8ce7	bd 0c 08	lda $080c,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8cea	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8cec	e8		inx				inx 								; advance pointers
.8ced	c8		iny				iny
.8cee	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8cef	d0 07		bne $8cf8			bne 	_CCVNext  					; didn't match go to next.
.8cf1	90 f4		bcc $8ce7			bcc 	_CCVCompare 				; not finished yet.
.8cf3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8cf6	f0 41		beq $8d39			beq 	_CCVFound 					; yes, we were successful
.8cf8					_CCVNext:
.8cf8	18		clc				clc
.8cf9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8cfb	65 36		adc $36				adc 	zTemp0
.8cfd	85 36		sta $36				sta 	zTemp0
.8cff	90 d4		bcc $8cd5			bcc 	_CCVSearch
.8d01	e6 37		inc $37				inc 	zTemp0+1
.8d03	80 d0		bra $8cd5			bra 	_CCVSearch
.8d05					_CCVFail:
.8d05	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8d07	ad 03 07	lda $0703			lda 	identHash
.8d0a	91 36		sta ($36),y			sta 	(zTemp0),y
.8d0c	c8		iny				iny 								; offset 2 is the type byte
.8d0d	ad 04 07	lda $0704			lda 	identTypeByte
.8d10	91 36		sta ($36),y			sta 	(zTemp0),y
.8d12	c8		iny				iny
.8d13					_CCVData:
.8d13	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8d15	91 36		sta ($36),y			sta 	(zTemp0),y
.8d17	c8		iny				iny
.8d18	c0 08		cpy #$08			cpy 	#8
.8d1a	90 f7		bcc $8d13			bcc 	_CCVData
.8d1c	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8d1f					_CCVCopyName:
.8d1f	bd 0c 08	lda $080c,x			lda 	lineBuffer,x
.8d22	91 36		sta ($36),y			sta 	(zTemp0),y
.8d24	e8		inx				inx
.8d25	c8		iny				iny
.8d26	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8d29	d0 f4		bne $8d1f			bne 	_CCVCopyName
.8d2b	98		tya				tya 								; patch offset
.8d2c	92 36		sta ($36)			sta 	(zTemp0)
.8d2e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8d30	91 36		sta ($36),y			sta 	(zTemp0),y
.8d32	88		dey				dey
.8d33	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8d35	09 80		ora #$80			ora 	#$80
.8d37	91 36		sta ($36),y			sta 	(zTemp0),y
.8d39					_CCVFound:
.8d39	20 e1 88	jsr $88e1			jsr 	VariableClose 				; map out variables, perhaps.
.8d3c	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8d3e	38		sec				sec
.8d3f	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8d41	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8d43	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8d46	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8d48	20 be 8c	jsr $8cbe			jsr 	TokeniseWriteByte
.8d4b	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
