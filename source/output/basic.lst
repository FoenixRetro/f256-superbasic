
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Thu Jan 12 08:06:57 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_LEFTDOLLARLPAREN                 = $98; $98 LEFT$(
=$99						KWD_LENLPAREN                        = $99; $99 LEN(
=$9a						KWD_MAXLPAREN                        = $9a; $9a MAX(
=$9b						KWD_MIDDOLLARLPAREN                  = $9b; $9b MID$(
=$9c						KWD_MINLPAREN                        = $9c; $9c MIN(
=$9d						KWD_NOTLPAREN                        = $9d; $9d NOT(
=$9e						KWD_PEEKLPAREN                       = $9e; $9e PEEK(
=$9f						KWD_PEEKDLPAREN                      = $9f; $9f PEEKD(
=$a0						KWD_PEEKLLPAREN                      = $a0; $a0 PEEKL(
=$a1						KWD_PEEKWLPAREN                      = $a1; $a1 PEEKW(
=$a2						KWD_PLAYINGLPAREN                    = $a2; $a2 PLAYING(
=$a3						KWD_RANDOMLPAREN                     = $a3; $a3 RANDOM(
=$a4						KWD_RIGHTDOLLARLPAREN                = $a4; $a4 RIGHT$(
=$a5						KWD_RNDLPAREN                        = $a5; $a5 RND(
=$a6						KWD_SGNLPAREN                        = $a6; $a6 SGN(
=$a7						KWD_SPCLPAREN                        = $a7; $a7 SPC(
=$a8						KWD_STRDOLLARLPAREN                  = $a8; $a8 STR$(
=$a9						KWD_TIMERLPAREN                      = $a9; $a9 TIMER(
=$aa						KWD_TRUE                             = $aa; $aa TRUE
=$ab						KWD_VALLPAREN                        = $ab; $ab VAL(
=$ac						KWD_FOR                              = $ac; $ac FOR
=$ad						KWD_IF                               = $ad; $ad IF
=$ae						KWD_PROC                             = $ae; $ae PROC
=$af						KWD_REPEAT                           = $af; $af REPEAT
=$b0						KWD_WHILE                            = $b0; $b0 WHILE
=$b1						KWD_ENDIF                            = $b1; $b1 ENDIF
=$b2						KWD_ENDPROC                          = $b2; $b2 ENDPROC
=$b3						KWD_NEXT                             = $b3; $b3 NEXT
=$b4						KWD_THEN                             = $b4; $b4 THEN
=$b5						KWD_UNTIL                            = $b5; $b5 UNTIL
=$b6						KWD_WEND                             = $b6; $b6 WEND
=$b7						KWD_AT                               = $b7; $b7 AT
=$b8						KWD_BY                               = $b8; $b8 BY
=$b9						KWD_CALL                             = $b9; $b9 CALL
=$ba						KWD_CIRCLE                           = $ba; $ba CIRCLE
=$bb						KWD_CLEAR                            = $bb; $bb CLEAR
=$bc						KWD_COLOR                            = $bc; $bc COLOR
=$bd						KWD_COLOUR                           = $bd; $bd COLOUR
=$be						KWD_DATA                             = $be; $be DATA
=$bf						KWD_DIM                              = $bf; $bf DIM
=$c0						KWD_DOWNTO                           = $c0; $c0 DOWNTO
=$c1						KWD_ELSE                             = $c1; $c1 ELSE
=$c2						KWD_FROM                             = $c2; $c2 FROM
=$c3						KWD_GFX                              = $c3; $c3 GFX
=$c4						KWD_HERE                             = $c4; $c4 HERE
=$c5						KWD_IMAGE                            = $c5; $c5 IMAGE
=$c6						KWD_LET                              = $c6; $c6 LET
=$c7						KWD_LINE                             = $c7; $c7 LINE
=$c8						KWD_LOCAL                            = $c8; $c8 LOCAL
=$c9						KWD_MEMCOPY                          = $c9; $c9 MEMCOPY
=$ca						KWD_OFF                              = $ca; $ca OFF
=$cb						KWD_ON                               = $cb; $cb ON
=$cc						KWD_OUTLINE                          = $cc; $cc OUTLINE
=$cd						KWD_PALETTE                          = $cd; $cd PALETTE
=$ce						KWD_PLOT                             = $ce; $ce PLOT
=$cf						KWD_POKE                             = $cf; $cf POKE
=$d0						KWD_POKED                            = $d0; $d0 POKED
=$d1						KWD_POKEL                            = $d1; $d1 POKEL
=$d2						KWD_POKEW                            = $d2; $d2 POKEW
=$d3						KWD_READ                             = $d3; $d3 READ
=$d4						KWD_RECT                             = $d4; $d4 RECT
=$d5						KWD_REM                              = $d5; $d5 REM
=$d6						KWD_SOLID                            = $d6; $d6 SOLID
=$d7						KWD_SOUND                            = $d7; $d7 SOUND
=$d8						KWD_SPRITE                           = $d8; $d8 SPRITE
=$d9						KWD_TEXT                             = $d9; $d9 TEXT
=$da						KWD_TO                               = $da; $da TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ac						KWC_FIRST_STRUCTURE = $ac
=$b1						KWC_FIRST_STRUCTURE_DEC = $b1
=$b6						KWC_LAST_STRUCTURE = $b6
=$83						KWC_FIRST_UNARY = $83
=$ab						KWC_LAST_UNARY = $ab

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 67 80	jmp $8067	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTInputLine:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputSingleCharacter:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						GXGraphicDraw:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						SNDCommand:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 ce bb	jsr $bbce		jsr	Export_SNDCommand
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDUpdate:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 01 bc	jsr $bc01		jsr	Export_SNDUpdate
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						TKListConvertLine:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 7f b5	jsr $b57f		jsr	Export_TKListConvertLine
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKTokeniseLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 13 b8	jsr $b813		jsr	Export_TKTokeniseLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8067		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8069		9a		txs				txs
.806a		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.806c		09 80		ora #$80			ora 	#$80
.806e		85 00		sta $00				sta 	0
.8070		20 98 ad	jsr $ad98			jsr		UpdateFont 					; update font if between FPGA updates.
.8073		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.8076		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.8078		20 40 81	jsr $8140			jsr 	KNLSetDrive
.807b		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.807d		aa		tax				tax
.807e		a8		tay				tay
.807f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.8082		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8084		20 3f 80	jsr $803f			jsr 	SNDCommand
.8087		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.8089		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.808c		a9 09		lda #$09			lda 	#9
.808e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8091		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8094		64 01		stz $01				stz 	1
.8096		ad ad d6	lda $d6ad			lda 	$D6AD
.8099		20 6a 83	jsr $836a			jsr 	PrintHex
.809c		ad ac d6	lda $d6ac			lda 	$D6AC
.809f		20 6a 83	jsr $836a			jsr 	PrintHex
.80a2		ad ab d6	lda $d6ab			lda 	$D6AB
.80a5		20 6a 83	jsr $836a			jsr 	PrintHex
.80a8		ad aa d6	lda $d6aa			lda 	$D6AA
.80ab		20 6a 83	jsr $836a			jsr 	PrintHex
.80ae		a9 20		lda #$20			lda 	#32
.80b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b3		ad a8 d6	lda $d6a8			lda 	$D6A8
.80b6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b9		ad a9 d6	lda $d6a9			lda 	$D6A9
.80bc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80bf		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80c1		a9 cf		lda #$cf			lda 	#Prompt & $FF
.80c3		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.80c6		20 cd 8f	jsr $8fcd			jsr 	NewProgram 					; erase current program
.80c9		4c ad 85	jmp $85ad			jmp 	WarmStart					; make same size.
.80cc		4c ad 85	jmp $85ad			jmp 	WarmStart
>80cf		0d 09 09 47 6f 20 67 6f		Prompt:	.text 	13,9,9,"Go go Gadget!",13
>80d7		20 47 61 64 67 65 74 21 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80e0		09 09 31 32 2f 30 31 2f			.text 9,9,"12/01/23 28"
>80e8		32 33 20 32 38

;******  Return to file: ./common/aa.system/00start.asm

>80ed		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.80f1						ProcessEvents:
.80f1		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.80f4		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.80f7		b0 27		bcs $8120			bcs 	_PEExitZ 					; nothing left to process.
.80f9		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; go back if event not key.pressed.
.80fc		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.80fe		d0 f1		bne $80f1			bne 	ProcessEvents
.8100		ad 65 07	lda $0765			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8103		d0 ec		bne $80f1			bne 	ProcessEvents
.8105		ad 64 07	lda $0764			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8108		c9 03		cmp #$03			cmp 	#3
.810a		f0 11		beq $811d			beq 	_PEReturnBreak  			; no, keep going.
.810c		da		phx				phx
.810d		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8110		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8112		f0 06		beq $811a			beq 	_PENoQueue
.8114		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8117		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.811a						_PENoQueue:
.811a		fa		plx				plx
.811b		80 d4		bra $80f1			bra 	ProcessEvents
.811d						_PEReturnBreak:
.811d		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.811f		60		rts				rts
.8120						_PEExitZ:
.8120		a9 00		lda #$00			lda 	#0
.8122		60		rts				rts
.8123						PopKeyboardQueue:
.8123		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8126		f0 17		beq $813f			beq 	_PKQExit 					; zero, then exit.
.8128		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.812b		48		pha				pha
.812c		da		phx				phx 								; drop head of queue
.812d		a2 00		ldx #$00			ldx 	#0
.812f						_PKQLoop:
.812f		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8132		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8135		e8		inx				inx
.8136		e0 07		cpx #$07			cpx 	#7
.8138		d0 f5		bne $812f			bne 	_PKQLoop
.813a		fa		plx				plx
.813b		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.813e		68		pla				pla 								; restore head of queue.
.813f						_PKQExit:
.813f		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8140						KNLSetDrive:
.8140		8d 5e 07	sta $075e			sta 	KNLDefaultDrive
.8143		60		rts				rts
.8144						KNLOpenFileWrite:
.8144		48		pha				pha
.8145		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8147		80 03		bra $814c			bra 	KNLOpenStart
.8149						KNLOpenFileRead:
.8149		48		pha				pha
.814a		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.814c						KNLOpenStart:
.814c		85 f5		sta $f5				sta     kernel.args.file.open.mode
.814e		68		pla				pla
.814f		20 8a 81	jsr $818a			jsr 	KNLSetupFileName
.8152		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.8155		ad 5e 07	lda $075e			lda 	KNLDefaultDrive 			; currently drive zero only.
.8158		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.815a		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.815d		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.815f		b0 1d		bcs $817e			bcs     _out
.8161						_loop
.8161		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8164		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8167		b0 f8		bcs $8161			bcs     _loop
.8169		ad 5f 07	lda $075f			lda 	KNLEvent.type
.816c		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.816e		f0 0a		beq $817a			beq 	_success
.8170		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8172		f0 0a		beq $817e			beq 	_out
.8174		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8176		f0 06		beq $817e			beq 	_out
.8178		80 e7		bra $8161			bra     _loop
.817a						_success
.817a		ad 62 07	lda $0762			lda     KNLEvent.file.stream
.817d		18		clc				clc
.817e						_out
.817e		60		rts				rts
.817f						KNLSetEventPointer:
.817f		48		pha				pha
.8180		a9 5f		lda #$5f			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8182		85 f0		sta $f0				sta     kernel.args.events+0
.8184		a9 07		lda #$07			lda     #KNLEvent >> 8
.8186		85 f1		sta $f1				sta     kernel.args.events+1
.8188		68		pla				pla
.8189		60		rts				rts
.818a						KNLSetupFileName:
.818a		5a		phy				phy 								; save Y on stack
.818b		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.818d		86 37		stx $37				stx 	zTemp0+1
.818f		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8191		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8193		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8195						_KNLGetLength:
.8195		c8		iny				iny
.8196		b1 36		lda ($36),y			lda 	(zTemp0),y
.8198		d0 fb		bne $8195			bne 	_KNLGetLength
.819a		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.819c		7a		ply				ply
.819d		60		rts				rts
.819e						KNLReadBlock:
.819e		85 f3		sta $f3				sta     kernel.args.file.read.stream
.81a0		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81a2		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81a5		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.81a7		b0 2e		bcs $81d7			bcs     _KGNBExitFail               ; report as general error
.81a9						_KGRBEventLoop:
.81a9		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81ac		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81af		b0 f8		bcs $81a9			bcs     _KGRBEventLoop
.81b1		ad 5f 07	lda $075f			lda 	KNLEvent.type 				; get event
.81b4		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.81b6		f0 0a		beq $81c2			beq     _KNLRBGetNextByte
.81b8		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.81ba		f0 1b		beq $81d7			beq 	_KGNBExitFail
.81bc		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81be		f0 17		beq $81d7			beq 	_KGNBExitFail
.81c0		80 e7		bra $81a9			bra 	_KGRBEventLoop
.81c2						_KNLRBGetNextByte:
.81c2		a9 5e		lda #$5e			lda     #<KNLReadBuffer 			; Set the target buffer
.81c4		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.81c6		a9 06		lda #$06			lda     #>KNLReadBuffer
.81c8		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.81ca		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Set the target length
.81cd		85 fd		sta $fd				sta     kernel.args.recv.buflen
.81cf		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.81d2		ad 65 07	lda $0765			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.81d5		18		clc				clc
.81d6		60		rts				rts
.81d7						_KGNBExitFail:
.81d7		38		sec				sec
.81d8		60		rts				rts
.81d9						KNLWriteBlock:
.81d9		da		phx				phx
.81da		5a		phy				phy
.81db		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.81dd		a5 36		lda $36				lda     zTemp0 						; save the data location.
.81df		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.81e1		a5 37		lda $37				lda     zTemp0+1
.81e3		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.81e5		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.81e7		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.81ea		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.81ec		b0 21		bcs $820f			bcs 	_KWBFailed
.81ee						_KNLWLoop:
.81ee		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.81f1		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81f4		b0 f8		bcs $81ee			bcs     _KNLWLoop
.81f6		ad 5f 07	lda $075f			lda     KNLEvent.type 				; various errors.
.81f9		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.81fb		f0 12		beq $820f			beq 	_KWBFailed
.81fd		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81ff		f0 0e		beq $820f			beq 	_KWBFailed
.8201		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8203		f0 0a		beq $820f			beq 	_KWBFailed
.8205		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8207		d0 e5		bne $81ee			bne 	_KNLWLoop
.8209		18		clc				clc
.820a		ad 65 07	lda $0765			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.820d		80 01		bra $8210			bra 	_KWBExit
.820f						_KWBFailed:
.820f		38		sec				sec
.8210						_KWBExit:
.8210		7a		ply				ply
.8211		fa		plx				plx
.8212		60		rts				rts
.8213						KNLCloseFile:
.8213		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8215		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8218		60		rts				rts
.8219						KNLCheckKeyPressed:
.8219		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.821c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.821f		b0 0b		bcs $822c			bcs 	_CKPNoEvent 				; no event
.8221		ad 5f 07	lda $075f			lda     KNLEvent.type
.8224		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.8226		d0 04		bne $822c			bne 	_CKPNoEvent
.8228		ad 64 07	lda $0764			lda     KNLEvent.key.ascii
.822b		60		rts				rts
.822c						_CKPNoEvent:
.822c		a9 00		lda #$00			lda 	#0
.822e		60		rts				rts
.822f						EXTReadController:
.822f		da		phx				phx
.8230		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8232		64 01		stz $01				stz 	1 							; switch to I/O 0
.8234		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8237		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8239		fa		plx				plx
.823a		60		rts				rts
.065e						KNLReadBuffer:
>065e								.fill   256
.075e						KNLDefaultDrive:
>075e								.byte 	?
.075f						KNLEvent
>075f						type        .byte   ?   ; Enum above
>0760						buf         .byte   ?   ; page id or zero
>0761						ext         .byte   ?   ; page id or zero
.0762						key
>0762						keyboard    .byte   ?   ; Keyboard ID
>0763						raw         .byte   ?   ; Raw key ID
>0764						ascii       .byte   ?   ; ASCII value
>0765						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0762						mouse
.0762						delta
>0762						x           .byte   ?
>0763						y           .byte   ?
>0764						z           .byte   ?
>0765						buttons     .byte   ?
.0762						clicks
>0762						inner       .byte   ?
>0763						middle      .byte   ?
>0764						outer       .byte   ?
.0762						joystick
>0762						joy0        .byte   ?
>0763						joy1        .byte   ?
.0762						udp
>0762						token       .byte   ?   ; TODO: break out into fields
.0762						file
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						data
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						read        .byte   ?   ; Number of bytes actually read
.0764						wrote
>0764						requested   .byte   ?   ; Requested number of bytes to read
>0765						wrote       .byte   ?   ; Number of bytes actually read
.0762						directory
>0762						stream      .byte   ?
>0763						cookie      .byte   ?
.0764						volume
>0764						len         .byte   ?   ; Length of volname (in buf)
>0765						flags       .byte   ?   ; block size, text encoding
.0764						file
>0764						len         .byte   ?
>0765						flags       .byte   ?   ; block scale, text encoding, approx size
.0764						free
>0764						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/getinkey.asm

.823b						AscGet:
.823b		fa		plx				plx 								; restore stack pos
.823c						AscGet2:
.823c		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.823f		20 f1 80	jsr $80f1	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.8242		d0 0b		bne $824f			bne 	_AGBreak
.8244		20 23 81	jsr $8123			jsr 	PopKeyboardQueue 			; wait for key.
.8247		c9 00		cmp #$00			cmp 	#0
.8249		f0 f4		beq $823f			beq 	_AGKey
.824b		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.824e		60		rts				rts
.824f						_AGBreak:
.824f		a9 01		lda #$01		lda	#1
.8251		4c 53 96	jmp $9653		jmp	ErrorHandler
.8254						AscInkey:
.8254		fa		plx				plx 								; restore stack pos
.8255						AscInkey2:
.8255		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.8258		20 23 81	jsr $8123			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.825b		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.825e		60		rts				rts
.825f						ChrGet:
.825f		fa		plx				plx
.8260		20 3c 82	jsr $823c			jsr 	AscGet2
.8263		4c 6a 82	jmp $826a			jmp 	GetInkeyToString
.8266						ChrInkey:
.8266		fa		plx				plx
.8267		20 55 82	jsr $8255			jsr 	AscInkey2
.826a						GetInkeyToString:
.826a		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.826c		f0 0b		beq $8279			beq 	_GKISNull
.826e		48		pha				pha
.826f		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8271		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate
.8274		68		pla				pla 								; write number to it
.8275		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.8278		60		rts				rts
.8279						_GKISNull:
.8279		a9 00		lda #$00			lda 	#0
.827b		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate
.827e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.827f						AssembleGroup1:
.827f		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8281		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8284		80 02		bra $8288			bra 	AsmGroup12
.8286						AssembleGroup2:
.8286		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8288						AsmGroup12:
.8288		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.828b		68		pla				pla 								; pop the return address to access the information following.
.828c		fa		plx				plx
.828d		20 14 83	jsr $8314			jsr 	AccessParameters 			; get opcode and save as base
.8290		8d 20 04	sta $0420			sta 	BaseOpcode
.8293		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8296		d0 08		bne $82a0			bne 	_AG12HaveMask
.8298		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.829a		20 1c 83	jsr $831c			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.829d		8d 21 04	sta $0421			sta 	ModeMask
.82a0						_AG12HaveMask:
.82a0		20 50 84	jsr $8450			jsr 	TypeAndCalculateOperand 	; get zero page type
.82a3		da		phx				phx 								; save found address mode
.82a4		20 80 83	jsr $8380			jsr 	AssembleModeX
.82a7		fa		plx				plx  								; restore address mode
.82a8		b0 0b		bcs $82b5			bcs 	_AG12Exit
.82aa		20 b6 82	jsr $82b6			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82ad		20 80 83	jsr $8380			jsr 	AssembleModeX
.82b0		b0 03		bcs $82b5			bcs 	_AG12Exit
.82b2		4c 58 a7	jmp $a758			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82b5						_AG12Exit:
.82b5		60		rts				rts
.82b6						PromoteToAbsolute:
.82b6		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82b8		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82ba		f0 19		beq $82d5			beq 	_PTADo
.82bc		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82be		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82c0		f0 13		beq $82d5			beq 	_PTADo
.82c2		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82c4		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82c6		f0 0d		beq $82d5			beq 	_PTADo
.82c8		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82ca		e0 d1		cpx #$d1			cpx 	#AM_IND
.82cc		f0 07		beq $82d5			beq 	_PTADo
.82ce		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82d0		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82d2		f0 01		beq $82d5			beq 	_PTADo
.82d4		60		rts				rts
.82d5						_PTADo:
.82d5		aa		tax				tax
.82d6		60		rts				rts
.82d7						AssembleGroup3:
.82d7		68		pla				pla 								; get parameters, which is just the opcode.
.82d8		fa		plx				plx
.82d9		20 14 83	jsr $8314			jsr 	AccessParameters 			; get and output opcode
.82dc		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.82df		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get a 16 bit operand
.82e2		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82e4		38		sec				sec
.82e5		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.82e8		48		pha				pha 								; LSB in A
.82e9		a5 60		lda $60				lda 	NSMantissa1
.82eb		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.82ee		aa		tax				tax 								; MSB in X
.82ef		68		pla				pla
.82f0		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82f1		69 7f		adc #$7f			adc 	#$7F
.82f3		90 01		bcc $82f6			bcc 	_AG3NoCarry
.82f5		e8		inx				inx
.82f6						_AG3NoCarry:
.82f6		38		sec				sec 								; fix back and write out anyways.
.82f7		e9 80		sbc #$80			sbc 	#$80
.82f9		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.82fc		e0 00		cpx #$00			cpx 	#0 							; was it in range
.82fe		f0 0a		beq $830a			beq 	_AG3Exit
.8300		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.8303		29 01		and #$01			and 	#1
.8305		f0 03		beq $830a			beq 	_AG3Exit
.8307		4c 5d a7	jmp $a75d			jmp 	RangeError 					; no, branch is out of range
.830a						_AG3Exit:
.830a		60		rts				rts
.830b						AssembleGroup4:
.830b		68		pla				pla 								; pop address
.830c		fa		plx				plx
.830d		20 14 83	jsr $8314			jsr 	AccessParameters 			; access and get first
.8310		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte 			; output it.
.8313		60		rts				rts
.8314						AccessParameters:
.8314		8d 1d 04	sta $041d			sta 	ParamStart
.8317		8e 1e 04	stx $041e			stx 	ParamStart+1
.831a		a9 01		lda #$01			lda 	#1
.831c						GetParameter:
.831c		5a		phy				phy
.831d		a8		tay				tay
.831e		ad 1d 04	lda $041d			lda 	ParamStart
.8321		85 36		sta $36				sta 	zTemp0
.8323		ad 1e 04	lda $041e			lda 	ParamStart+1
.8326		85 37		sta $37				sta 	zTemp0+1
.8328		b1 36		lda ($36),y			lda 	(zTemp0),y
.832a		7a		ply				ply
.832b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.832c						AssemblerWriteByte:
.832c		48		pha			pha
.832d		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8330		29 02		and #$02		and 	#2
.8332		f0 1b		beq $834f		beq 	_AWBNoPrint
.8334		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8337		20 6a 83	jsr $836a		jsr 	PrintHex
.833a		ad 1a 04	lda $041a		lda		AssemblerAddress
.833d		20 6a 83	jsr $836a		jsr 	PrintHex
.8340		a9 20		lda #$20		lda 	#' '
.8342		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8345		68		pla			pla 									; print byte
.8346		48		pha			pha
.8347		20 6a 83	jsr $836a		jsr 	PrintHex
.834a		a9 0d		lda #$0d		lda 	#13
.834c		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.834f						_AWBNoPrint:
.834f		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.8352		85 36		sta $36			sta 	zTemp0
.8354		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8357		f0 0e		beq $8367		beq 	_AWBRange
.8359		85 37		sta $37			sta 	zTemp0+1
.835b		68		pla			pla 									; write byte out
.835c		92 36		sta ($36)		sta 	(zTemp0)
.835e		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.8361		d0 03		bne $8366		bne 	_AWBNoCarry
.8363		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8366						_AWBNoCarry:
.8366		60		rts			rts
.8367						_AWBRange:
.8367		4c 5d a7	jmp $a75d		jmp 	RangeError
.836a						PrintHex:
.836a		48		pha				pha
.836b		4a		lsr a				lsr 	a
.836c		4a		lsr a				lsr 	a
.836d		4a		lsr a				lsr 	a
.836e		4a		lsr a				lsr 	a
.836f		20 73 83	jsr $8373			jsr 	_PrintNibble
.8372		68		pla				pla
.8373						_PrintNibble:
.8373		29 0f		and #$0f			and 	#15
.8375		c9 0a		cmp #$0a			cmp 	#10
.8377		90 02		bcc $837b			bcc 	_NoShift
.8379		69 06		adc #$06			adc 	#6
.837b						_NoShift:
.837b		69 30		adc #$30			adc 	#48
.837d		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8380						AssembleModeX:
.8380		5a		phy				phy
.8381		ad 1f 04	lda $041f			lda 	IsGroup1
.8384		f0 17		beq $839d			beq 	_AMXGroup2
.8386		8a		txa				txa 							; is it in group # 1
.8387		29 40		and #$40			and 	#AM_ISG1
.8389		f0 4d		beq $83d8			beq 	_AMXFail 				; no, give up.
.838b		8a		txa				txa 							; get back.
.838c		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.838e		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8390		d0 22		bne $83b4			bne 	_AMXHaveInfo
.8392		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8395		c9 81		cmp #$81			cmp 	#$81
.8397		f0 3f		beq $83d8			beq 	_AMXFail
.8399		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.839b		80 17		bra $83b4			bra 	_AMXHaveInfo 			; odd design decision there.
.839d						_AMXGroup2:
.839d		8a		txa				txa 							; is it in group 2 ?
.839e		29 20		and #$20			and 	#AM_ISG2
.83a0		f0 36		beq $83d8			beq 	_AMXFail 				; no, give up.
.83a2		8a		txa				txa 							; get the offset into Y
.83a3		29 1f		and #$1f			and 	#$1F
.83a5		4a		lsr a				lsr 	a 						; make it 0-7.
.83a6		4a		lsr a				lsr  	a
.83a7		a8		tay				tay
.83a8		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83ab						_AMXCheckOkay:
.83ab		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83ac		88		dey				dey
.83ad		10 fc		bpl $83ab			bpl 	_AMXCheckOkay
.83af		90 27		bcc $83d8			bcc 	_AMXFail 				; not allowed.
.83b1		8a		txa				txa  							; get mask back
.83b2		29 1f		and #$1f			and 	#$1F
.83b4						_AMXHaveInfo:
.83b4		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83b6		10 04		bpl $83bc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83b8		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83ba		d0 1c		bne $83d8			bne 	_AMXFail
.83bc						_AMXAnySize:
.83bc		18		clc				clc 							; add offset to the base opcode
.83bd		6d 20 04	adc $0420			adc 	BaseOpcode
.83c0						_AMXOutputCode:
.83c0		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte 		; write the opcode out.
.83c3		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83c5		f0 0e		beq $83d5			beq 	_AMXExit
.83c7		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83c9		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.83cc		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83ce		30 05		bmi $83d5			bmi 	_AMXExit
.83d0		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83d2		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.83d5						_AMXExit:
.83d5		7a		ply				ply
.83d6		38		sec				sec
.83d7		60		rts				rts
.83d8						_AMXFail:
.83d8		a0 00		ldy #$00			ldy 	#0
.83da						_AMXCheckOddities:
.83da		8a		txa				txa
.83db		d9 02 84	cmp $8402,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83de		d0 15		bne $83f5			bne 	_AMXCONext
.83e0		b9 00 84	lda $8400,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83e3		cd 20 04	cmp $0420			cmp 	BaseOpcode
.83e6		d0 0d		bne $83f5			bne 	_AMXCONext
.83e8		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83ea		10 04		bpl $83f0			bpl 	_AMXCONotZero
.83ec		a5 60		lda $60				lda 	NSMantissa1
.83ee		d0 05		bne $83f5			bne 	_AMXCONext
.83f0						_AMXCONotZero:
.83f0		b9 01 84	lda $8401,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83f3		80 cb		bra $83c0			bra 	_AMXOutputCode 			; and assemble it
.83f5						_AMXCONext:
.83f5		c8		iny				iny
.83f6		c8		iny				iny
.83f7		c8		iny				iny
.83f8		b9 00 84	lda $8400,y			lda 	ExtraOpcode+0,y 		; end of table
.83fb		d0 dd		bne $83da			bne 	_AMXCheckOddities
.83fd						_AMXCOFail:
.83fd		7a		ply				ply
.83fe		18		clc				clc
.83ff		60		rts				rts
.8400						ExtraOpcode:
>8400		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8403		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8406		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8409		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>840c		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>840f		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8412		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8415		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8418		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>841b		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>841e		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.841f						LabelHere:
.841f		c8		iny				iny 								; skip .
.8420		a2 00		ldx #$00			ldx 	#0 							; get a term
.8422		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm
.8425		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8427		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8429		d0 22		bne $844d			bne 	_ALType 					; otherwise typing error
.842b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.842d		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.842f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8431		85 37		sta $37				sta 	zTemp0+1
.8433		5a		phy				phy 								; copy address in (64k)
.8434		a0 01		ldy #$01			ldy 	#1
.8436		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8439		92 36		sta ($36)			sta 	(zTemp0)
.843b		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.843e		91 36		sta ($36),y			sta 	(zTemp0),y
.8440		c8		iny				iny
.8441		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8443		91 36		sta ($36),y			sta 	(zTemp0),y
.8445		c8		iny				iny
.8446		91 36		sta ($36),y			sta 	(zTemp0),y
.8448		c8		iny				iny
.8449		91 36		sta ($36),y			sta 	(zTemp0),y
.844b		7a		ply				ply
.844c		60		rts				rts
.844d						_ALType:
.844d		4c 62 a7	jmp $a762			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8450						TypeAndCalculateOperand:
.8450		b1 30		lda ($30),y			lda 	(codePtr),y
.8452		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8454		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8456		f0 5b		beq $84b3			beq 	_TACOExit
.8458		c9 80		cmp #$80			cmp 	#KWC_EOL
.845a		f0 57		beq $84b3			beq 	_TACOExit
.845c		c8		iny				iny
.845d		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.845f		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8461		f0 51		beq $84b4			beq 	CalculateOperand
.8463		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8465		f0 1f		beq $8486			beq 	_TACOIndirect
.8467		88		dey				dey 								; undo get of first character
.8468		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get operand
.846b		b1 30		lda ($30),y			lda 	(codePtr),y
.846d		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.846f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8471		d0 40		bne $84b3			bne 	_TACOExit
.8473		c8		iny				iny
.8474		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8477		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8479		c9 58		cmp #$58			cmp 	#'X'
.847b		f0 36		beq $84b3			beq 	_TACOExit
.847d		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.847f		c9 59		cmp #$59			cmp 	#'Y'
.8481		f0 30		beq $84b3			beq 	_TACOExit
.8483						_TACOSyntax:
.8483		4c 58 a7	jmp $a758			jmp 	SyntaxError
.8486						_TACOIndirect:
.8486		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get the operand
.8489		b1 30		lda ($30),y			lda 	(codePtr),y
.848b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.848d		f0 17		beq $84a6			beq 	_TACOIndX
.848f		20 3a 96	jsr $963a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8492		b1 30		lda ($30),y			lda 	(codePtr),y
.8494		a2 d1		ldx #$d1			ldx 	#AM_IND
.8496		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8498		d0 19		bne $84b3			bne 	_TACOExit
.849a		c8		iny				iny
.849b		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.849e		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84a0		d0 e1		bne $8483			bne 	_TACOSyntax
.84a2		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84a4		80 0d		bra $84b3			bra 	_TACOExit
.84a6						_TACOIndX:
.84a6		c8		iny				iny
.84a7		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84aa		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84ac		d0 d5		bne $8483			bne 	_TACOSyntax
.84ae		20 3a 96	jsr $963a			jsr 	CheckRightBracket			; check )
.84b1		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84b3						_TACOExit:
.84b3		60		rts				rts
.84b4						CalculateOperand:
.84b4		48		pha				pha
.84b5		da		phx				phx
.84b6		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84b8		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.84bb		fa		plx				plx
.84bc		68		pla				pla
.84bd		60		rts				rts
.84be						TACOCheckXY:
.84be		b1 30		lda ($30),y			lda 	(codePtr),y
.84c0		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84c2		c9 40		cmp #$40			cmp 	#$40
.84c4		d0 21		bne $84e7			bne 	_TCXYFail
.84c6		b1 30		lda ($30),y			lda 	(codePtr),y
.84c8		18		clc				clc
.84c9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84cb		85 37		sta $37				sta 	zTemp0+1
.84cd		c8		iny				iny
.84ce		b1 30		lda ($30),y			lda 	(codePtr),y
.84d0		c8		iny				iny
.84d1		85 36		sta $36				sta 	zTemp0
.84d3		5a		phy				phy 								; save position
.84d4		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84d6		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d8		d0 0c		bne $84e6			bne 	_TCXYPopFail
.84da		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84dc		b1 36		lda ($36),y			lda 	(zTemp0),y
.84de		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84e0		f0 08		beq $84ea			beq 	_TCXYFound
.84e2		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84e4		f0 04		beq $84ea			beq 	_TCXYFound
.84e6						_TCXYPopFail:
.84e6		7a		ply				ply
.84e7						_TCXYFail:
.84e7		a9 00		lda #$00			lda 	#0
.84e9		60		rts				rts
.84ea						_TCXYFound:
.84ea		7a		ply				ply 								; restore position
.84eb		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84ee						BackloadProgram:
.84ee		20 cd 8f	jsr $8fcd			jsr 	NewProgram 					; does the actual NEW.
.84f1		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84f3		a9 45		lda #$45			lda 	#_BLLoad & $FF
.84f5		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.84f8		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.84fa		8d 66 07	sta $0766			sta 	BackLoadPage
.84fd		a9 00		lda #$00			lda 	#(($6000) & $FF)
.84ff		8d 67 07	sta $0767			sta 	0+BackLoadPointer
.8502		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8504		8d 68 07	sta $0768			sta 	1+BackLoadPointer
.8507		a9 ff		lda #$ff			lda 	#$FF
.8509		8d fa ff	sta $fffa			sta 	$FFFA
.850c						_BPLoop:
.850c		a2 ff		ldx #$ff			ldx 	#$FF
.850e		20 5a 85	jsr $855a			jsr 	BLReadByte 					; read a byte
.8511		c9 00		cmp #$00			cmp 	#0
.8513		f0 29		beq $853e			beq 	_BPExit 					; if 0 exit
.8515		30 27		bmi $853e			bmi 	_BPExit 					; if -ve exit
.8517						_BPCopy:
.8517		e8		inx				inx  								; copy byte into the lineBuffer
.8518		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.851b		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.851e		20 5a 85	jsr $855a			jsr 	BLReadByte 					; read next byte
.8521		30 0a		bmi $852d			bmi 	_BPEndLine 					; -ve = EOL
.8523		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8525		d0 02		bne $8529			bne 	_BPNotTab
.8527		a9 20		lda #$20			lda 	#' '
.8529						_BPNotTab:
.8529		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.852b		b0 ea		bcs $8517			bcs 	_BPCopy 					; until a control character, should be 13 received.
.852d						_BPEndLine:
.852d		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8530		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8533		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8536		f0 d4		beq $850c			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8538		38		sec				sec 								; append not insert
.8539		20 c1 ac	jsr $acc1			jsr 	MemoryInsertLine 			; append to current program
.853c		80 ce		bra $850c			bra 	_BPLoop
.853e						_BPExit:
.853e		9c fa ff	stz $fffa			stz 	$FFFA
.8541		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear variables etc.
.8544		60		rts				rts
.8545						_BLLoad:
>8545		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>854d		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.855a						BLReadByte:
.855a		da		phx				phx
.855b		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.855d		ad 66 07	lda $0766			lda 	BackLoadPage	 			; set current page
.8560		85 0b		sta $0b				sta 	8+3
.8562		ad 67 07	lda $0767			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8565		85 36		sta $36				sta 	zTemp0
.8567		ad 68 07	lda $0768			lda 	BackLoadPointer+1
.856a		85 37		sta $37				sta 	zTemp0+1
.856c		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.856e		ee 67 07	inc $0767			inc 	BackLoadPointer 			; bump pointer
.8571		d0 0f		bne $8582			bne 	_BLNoCarry
.8573		ee 68 07	inc $0768			inc 	BackLoadPointer+1
.8576		10 0a		bpl $8582			bpl 	_BLNoCarry 					; need a new page
.8578		48		pha				pha
.8579		a9 60		lda #$60			lda 	#$60 						; reset pointer
.857b		8d 68 07	sta $0768			sta 	BackLoadPointer+1
.857e		ee 66 07	inc $0766			inc 	BackLoadPage 				; next page from source.
.8581		68		pla				pla
.8582						_BLNoCarry:
.8582		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8584		fa		plx				plx
.8585		c9 00		cmp #$00			cmp 	#0
.8587		60		rts				rts
.0766						BackLoadPage:
>0766								.fill  	1
.0767						BackLoadPointer:
>0767								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8588						EditProgramCode:
.8588		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.858b		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.858e		20 65 ad	jsr $ad65			jsr 	MemorySearch
.8591		90 05		bcc $8598			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8593		d0 03		bne $8598			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8595		20 8a ac	jsr $ac8a			jsr 	MemoryDeleteLine 			; delete the line
.8598						_EPCNoDelete:
.8598		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.859b		c9 80		cmp #$80			cmp 	#KWC_EOL
.859d		f0 0d		beq $85ac			beq 	_EPCNoInsert
.859f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85a2		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85a5		20 65 ad	jsr $ad65			jsr 	MemorySearch
.85a8		18		clc				clc 								; insert at this point.
.85a9		20 c1 ac	jsr $acc1			jsr 	MemoryInsertLine 			; insert the line
.85ac						_EPCNoInsert:
.85ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85ad						WarmStart:
.85ad		a2 ff		ldx #$ff			ldx 	#$FF
.85af		9a		txs				txs
.85b0		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85b2		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.85b5		20 21 80	jsr $8021			jsr 	EXTInputLine 				; get line to lineBuffer
.85b8		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line
.85bb		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.85be		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85c1		d0 17		bne $85da			bne 	_WSEditCode 				; if so,edit code.
.85c3		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85c6		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.85c8		85 30		sta $30				sta 	codePtr
.85ca		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85cc		85 31		sta $31				sta 	codePtr+1
.85ce		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.85d1		c9 80		cmp #$80			cmp 	#KWC_EOL
.85d3		f0 d8		beq $85ad			beq 	WarmStart
.85d5		20 5d 91	jsr $915d			jsr 	RUNCodePointerLine 			; execute that line.
.85d8		80 d3		bra $85ad			bra 	WarmStart
.85da						_WSEditCode:
.85da		20 88 85	jsr $8588			jsr 	EditProgramCode 			; edit the program code
.85dd		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear all variables etc.
.85e0		80 cb		bra $85ad			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85e2						AssembleCommand:
.85e2		a2 00		ldx #$00			ldx 	#0
.85e4		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger 		; start address
.85e7		a5 58		lda $58				lda 	NSMantissa0
.85e9		8d 1a 04	sta $041a			sta 	AssemblerAddress
.85ec		a5 60		lda $60				lda 	NSMantissa1
.85ee		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.85f1		20 42 96	jsr $9642			jsr 	CheckComma
.85f4		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; options 0-3
.85f7		a5 58		lda $58				lda 	NSMantissa0
.85f9		8d 1c 04	sta $041c			sta 	AssemblerControl
.85fc		60		rts				rts
.85fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.85fe						AssertCommand:
.85fe		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8600		20 47 a5	jsr $a547			jsr 	EvaluateInteger 			; the assert test
.8603		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; exit if result is non zero.
.8606		d0 05		bne $860d			bne 	_ACExit
.8608		a9 0a		lda #$0a		lda	#10
.860a		4c 53 96	jmp $9653		jmp	ErrorHandler
.860d						_ACExit:
.860d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.860e						Command_BLoad:
.860e		a2 00		ldx #$00			ldx 	#0
.8610		20 32 a5	jsr $a532			jsr 	EvaluateString 				; file name to load
.8613		20 42 96	jsr $9642			jsr 	CheckComma 					; consume comma
.8616		e8		inx				inx
.8617		20 47 a5	jsr $a547			jsr 	EvaluateInteger 			; load address (full physical address)
.861a		5a		phy				phy
.861b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.861d		a6 60		ldx $60				ldx 	NSMantissa1
.861f		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.8622		b0 4e		bcs $8672			bcs 	CBLErrorHandler 			; error, so fail.
.8624		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8627		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8629		20 75 86	jsr $8675			jsr 	BLOpenPhysicalMemory 		; open for access.
.862c						_BLReadFile:
.862c		ad 6d 07	lda $076d			lda 	BasicFileStream
.862f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8631		20 9e 81	jsr $819e			jsr 	KNLReadBlock 				; read next block
.8634		b0 22		bcs $8658			bcs 	_BLFileError 				; file error, which might be EOF.
.8636		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8638		f0 f2		beq $862c			beq 	_BLReadFile
.863a		8d 6b 07	sta $076b			sta 	BLCopyCounter 				; counter.
.863d		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; copy the buffer out here
.8640		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8642						_BLCopyLoop:
.8642		bd 5e 06	lda $065e,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8645		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8647		c8		iny				iny
.8648		d0 03		bne $864d			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.864a		20 9d 86	jsr $869d			jsr 	BLAdvancePhysicalMemory
.864d						_BLNoAdjust:
.864d		e8		inx				inx
.864e		ce 6b 07	dec $076b			dec 	BLCopyCounter
.8651		d0 ef		bne $8642			bne 	_BLCopyLoop
.8653		8c 6a 07	sty $076a			sty 	BLYOffset 					; update Y offset
.8656		80 d4		bra $862c			bra 	_BLReadFile 				; go ask for more.
.8658						_BLFileError:
.8658		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.865a		d0 16		bne $8672			bne 	CBLErrorHandler				; no, it's an actual error
.865c		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory 		; close the access.
.865f		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.8662		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8665		7a		ply				ply
.8666		60		rts				rts
.8667						CBLCloseError:
.8667		48		pha				pha
.8668		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory
.866b		ad 6d 07	lda $076d			lda 	BasicFileStream
.866e		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8671		68		pla				pla
.8672						CBLErrorHandler:
.8672		4c 78 8d	jmp $8d78			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8675						BLOpenPhysicalMemory:
.8675		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8677		8d 69 07	sta $0769			sta 	BLNormalMapping
.867a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.867c		8d 6a 07	sta $076a			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.867f		64 3a		stz $3a				stz 	zTemp2
.8681		b5 60		lda $60,x			lda 	NSMantissa1,x
.8683		29 1f		and #$1f			and 	#$1F
.8685		09 60		ora #$60			ora 	#BLAccessPage << 5
.8687		85 3b		sta $3b				sta 	zTemp2+1
.8689		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.868b		16 60		asl $60,x			asl 	NSMantissa1,x
.868d		2a		rol a				rol 	a
.868e		16 60		asl $60,x			asl 	NSMantissa1,x
.8690		2a		rol a				rol 	a
.8691		16 60		asl $60,x			asl 	NSMantissa1,x
.8693		2a		rol a				rol 	a
.8694		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8696		60		rts				rts
.8697						BLClosePhysicalMemory:
.8697		ad 69 07	lda $0769			lda 	BLNormalMapping
.869a		85 0b		sta $0b				sta 	BLAccessPage+8
.869c		60		rts				rts
.869d						BLAdvancePhysicalMemory:
.869d		48		pha				pha
.869e		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.86a0		a5 3b		lda $3b				lda 	zTemp2+1
.86a2		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.86a4		d0 06		bne $86ac			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.86a6		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.86a8		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.86aa		85 3b		sta $3b				sta 	zTemp2+1
.86ac						_BLAPMExit:
.86ac		68		pla				pla
.86ad		60		rts				rts
.0769						BLNormalMapping:
>0769								.fill 	1
.076a						BLYOffset:
>076a								.fill 	1
.076b						BLCopyCounter:
>076b								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.86ae						Command_BSave:
.86ae		a2 00		ldx #$00			ldx 	#0
.86b0		20 32 a5	jsr $a532			jsr 	EvaluateString 				; file name to load
.86b3		20 42 96	jsr $9642			jsr 	CheckComma 					; consume comma
.86b6		e8		inx				inx
.86b7		20 47 a5	jsr $a547			jsr 	EvaluateInteger 			; load address (full physical address)
.86ba		20 42 96	jsr $9642			jsr 	CheckComma 					; consume comma
.86bd		e8		inx				inx
.86be		20 47 a5	jsr $a547			jsr 	EvaluateInteger 			; data length (3 bytes only)
.86c1		5a		phy				phy
.86c2		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.86c4		a6 60		ldx $60				ldx 	NSMantissa1
.86c6		20 44 81	jsr $8144			jsr 	KNLOpenFileWrite 			; open file for reading
.86c9		b0 62		bcs $872d			bcs 	CBSErrorHandler 			; error, so fail.
.86cb		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.86ce		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.86d0		20 75 86	jsr $8675			jsr 	BLOpenPhysicalMemory 		; open for access.
.86d3		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86d5		ac 6a 07	ldy $076a			ldy 	BLYOffset 					; used for data offset.
.86d8						_BSWriteToFileLoop:
.86d8		38		sec				sec 								; pre decrement count.
.86d9		a5 5a		lda $5a				lda 	NSMantissa0+2
.86db		e9 01		sbc #$01			sbc 	#1
.86dd		85 5a		sta $5a				sta 	NSMantissa0+2
.86df		a5 62		lda $62				lda 	NSMantissa1+2
.86e1		e9 00		sbc #$00			sbc 	#0
.86e3		85 62		sta $62				sta 	NSMantissa1+2
.86e5		a5 6a		lda $6a				lda 	NSMantissa2+2
.86e7		e9 00		sbc #$00			sbc 	#0
.86e9		85 6a		sta $6a				sta 	NSMantissa2+2
.86eb		30 15		bmi $8702			bmi 	_BSFileComplete 			; undercounted, so exit.
.86ed		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86ef		9d 5e 06	sta $065e,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86f2		e8		inx				inx
.86f3		c8		iny				iny 								; next byte
.86f4		d0 03		bne $86f9			bne 	_BSNoCheck
.86f6		20 9d 86	jsr $869d			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.86f9						_BSNoCheck:
.86f9		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.86fb		d0 db		bne $86d8			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.86fd		20 10 87	jsr $8710			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8700		80 d6		bra $86d8			bra 	_BSWriteToFileLoop 			; and keep on going
.8702						_BSFileComplete:
.8702		20 10 87	jsr $8710			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8705		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory 		; close the access.
.8708		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close the file
.870b		20 13 82	jsr $8213			jsr 	KNLCloseFile
.870e		7a		ply				ply
.870f		60		rts				rts
.8710						BSFlushBuffer:
.8710		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8712		f0 0d		beq $8721			beq 	_BSFBExit 					; if so, exit.
.8714		a9 5e		lda #$5e			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8716		85 36		sta $36				sta 	zTemp0
.8718		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.871a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.871c		20 2a 94	jsr $942a			jsr 	CLWriteByteBlock 			; write it.
.871f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8721						_BSFBExit:
.8721		60		rts				rts
.8722						CBSSCloseError:
.8722		48		pha				pha
.8723		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory
.8726		ad 6d 07	lda $076d			lda 	BasicFileStream
.8729		20 13 82	jsr $8213			jsr 	KNLCloseFile
.872c		68		pla				pla
.872d						CBSErrorHandler:
.872d		4c 78 8d	jmp $8d78			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8730						CallCommand:
.8730		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8732		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.8735						_CCClear
.8735		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8736		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; these are optional sequentially.
.8739		e0 04		cpx #$04			cpx 	#4
.873b		d0 f8		bne $8735			bne 	_CCClear
.873d		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.873f						_CCCParam:
.873f		b1 30		lda ($30),y			lda 	(codePtr),y
.8741		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8743		d0 09		bne $874e			bne 	_CCCRun6502
.8745		c8		iny				iny 								; skip comma
.8746		e8		inx				inx	 								; next level
.8747		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get A/X/Y
.874a		e0 03		cpx #$03			cpx 	#3
.874c		90 f1		bcc $873f			bcc 	_CCCParam 					; done all 3 ?
.874e						_CCCRun6502:
.874e		5a		phy				phy 								; save position
.874f		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8751		85 37		sta $37				sta 	zTemp0+1
.8753		a5 58		lda $58				lda 	NSMantissa0
.8755		85 36		sta $36				sta 	zTemp0
.8757		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8759		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.875b		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.875d		20 62 87	jsr $8762			jsr 	_CCCZTemp0 					; call zTemp0
.8760		7a		ply				ply 								; restore position and exit
.8761		60		rts				rts
.8762						_CCCZTemp0:
.8762		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8765						ClearCommand:
.8765		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8767		85 36		sta $36				sta 	0+zTemp0
.8769		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.876b		85 37		sta $37				sta 	1+zTemp0
.876d						_ClearZeroLoop:
.876d		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.876f		f0 24		beq $8795			beq 	_ClearZeroEnd
.8771		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8773		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8775						_ClearOneVariable:
.8775		91 36		sta ($36),y			sta 	(zTemp0),y
.8777		c8		iny				iny
.8778		c0 08		cpy #$08			cpy 	#8
.877a		d0 f9		bne $8775			bne 	_ClearOneVariable
.877c		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.877e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8780		c9 18		cmp #$18			cmp 	#NSTProcedure
.8782		d0 04		bne $8788			bne 	_ClearNotProcedure
.8784		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8786		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8788						_ClearNotProcedure:
.8788		18		clc				clc 								; go to the next variable
.8789		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.878b		65 36		adc $36				adc 	zTemp0
.878d		85 36		sta $36				sta 	zTemp0
.878f		90 dc		bcc $876d			bcc 	_ClearZeroLoop
.8791		e6 37		inc $37				inc 	zTemp0+1
.8793		80 d8		bra $876d			bra 	_ClearZeroLoop
.8795						_ClearZeroEnd:
.8795		18		clc				clc
.8796		a5 36		lda $36				lda 	zTemp0
.8798		69 01		adc #$01			adc 	#1
.879a		8d 08 04	sta $0408			sta 	lowMemPtr
.879d		a5 37		lda $37				lda 	zTemp0+1
.879f		69 00		adc #$00			adc 	#0
.87a1		8d 09 04	sta $0409			sta 	lowMemPtr+1
.87a4		20 1f b7	jsr $b71f			jsr 	StackReset
.87a7		20 85 b7	jsr $b785			jsr 	StringSystemInitialise
.87aa		20 e9 94	jsr $94e9			jsr 	ProcedureScan
.87ad		20 0c 91	jsr $910c			jsr 	Command_Restore
.87b0		9c 1a 04	stz $041a			stz 	AssemblerAddress
.87b3		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.87b6		9c 1c 04	stz $041c			stz 	AssemblerControl
.87b9		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.87bc		20 8d a1	jsr $a18d			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.87bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.87c0						ClearScreen:
.87c0		5a		phy				phy
.87c1		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.87c3		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.87c6		7a		ply				ply
.87c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.87c8						Command_Data:
.87c8		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.87ca		a2 80		ldx #$80			ldx 	#KWC_EOL
.87cc		20 3b 95	jsr $953b			jsr 	ScanForward
.87cf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.87d0						DimCommand:
.87d0		b1 30		lda ($30),y			lda 	(codePtr),y
.87d2		29 c0		and #$c0			and 	#$C0
.87d4		c9 40		cmp #$40			cmp 	#$40
.87d6		d0 7a		bne $8852			bne 	_DCSyntax 				; n o, error.
.87d8		b1 30		lda ($30),y			lda 	(codePtr),y
.87da		18		clc				clc
.87db		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87dd		85 3f		sta $3f				sta 	zaTemp+1
.87df		c8		iny				iny
.87e0		b1 30		lda ($30),y			lda 	(codePtr),y
.87e2		c8		iny				iny
.87e3		85 3e		sta $3e				sta 	zaTemp
.87e5		5a		phy				phy
.87e6		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87e8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87ea		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87ec		c9 18		cmp #$18			cmp 	#NSTProcedure
.87ee		f0 62		beq $8852			beq 	_DCSyntax
.87f0		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87f2		29 04		and #$04			and 	#NSBIsArray
.87f4		f0 64		beq $885a			beq 	_DCType
.87f6		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87f8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87fa		d0 59		bne $8855			bne 	_DCRedefine
.87fc		7a		ply				ply
.87fd		20 5d 88	jsr $885d			jsr 	_DCGetSize 				; get array size, check it.
.8800		5a		phy				phy
.8801		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8803		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8805		7a		ply				ply 							; is there a second (e.g. ,x)
.8806		b1 30		lda ($30),y			lda 	(codePtr),y
.8808		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.880a		d0 0a		bne $8816			bne 	_DCOneDimension
.880c		c8		iny				iny 							; skip comma
.880d		20 5d 88	jsr $885d			jsr 	_DCGetSize 				; get 2nd array size
.8810		5a		phy				phy
.8811		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8813		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8815		7a		ply				ply
.8816						_DCOneDimension:
.8816		5a		phy				phy 							; save position
.8817		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8819		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.881b		aa		tax				tax
.881c		c8		iny				iny
.881d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.881f		e8		inx				inx 							; bump them.
.8820		1a		inc a				inc 	a
.8821		20 85 a5	jsr $a585			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8824		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8826		29 e0		and #$e0			and 	#$E0
.8828		d0 23		bne $884d			bne 	_DCSize
.882a		a0 02		ldy #$02			ldy 	#2 						; get base type
.882c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.882e		20 6b 88	jsr $886b			jsr 	ScaleByBaseType 		; scale by base type
.8831		a5 36		lda $36				lda 	zTemp0
.8833		a6 37		ldx $37				ldx 	zTemp0+1
.8835		20 4f a1	jsr $a14f			jsr 	AllocateXABytes 		; allocate memory
.8838		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.883a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.883c		c8		iny				iny
.883d		8a		txa				txa
.883e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8840		7a		ply				ply 							; get position back
.8841		20 3a 96	jsr $963a			jsr 	CheckRightBracket 		; check )
.8844		b1 30		lda ($30),y			lda 	(codePtr),y
.8846		c8		iny				iny 							; consume in case
.8847		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8849		f0 85		beq $87d0			beq 	DimCommand
.884b		88		dey				dey 							; undo consume
.884c		60		rts				rts
.884d						_DCSize:
.884d		a9 16		lda #$16		lda	#22
.884f		4c 53 96	jmp $9653		jmp	ErrorHandler
.8852						_DCSyntax:
.8852		4c 58 a7	jmp $a758			jmp 	SyntaxError
.8855						_DCRedefine:
.8855		a9 15		lda #$15		lda	#21
.8857		4c 53 96	jmp $9653		jmp	ErrorHandler
.885a						_DCType:
.885a		4c 62 a7	jmp $a762			jmp 	TypeError
.885d						_DCGetSize:
.885d		a2 00		ldx #$00			ldx 	#0 						; get first index.
.885f		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 	; get array dimension
.8862		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8864		f0 e7		beq $884d			beq 	_DCSize
.8866		c9 fe		cmp #$fe			cmp 	#254
.8868		f0 e3		beq $884d			beq 	_DCSize
.886a		60		rts				rts
.886b						ScaleByBaseType:
.886b		29 10		and #$10			and 	#NSBIsString 			; is it string
.886d		d0 19		bne $8888			bne 	_SBBTString
.886f		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8871		48		pha				pha
.8872		a5 36		lda $36				lda 	zTemp0
.8874		48		pha				pha
.8875		06 36		asl $36				asl 	zTemp0 					; x 2
.8877		26 37		rol $37				rol 	zTemp0+1
.8879		06 36		asl $36				asl 	zTemp0 					; x 4
.887b		26 37		rol $37				rol 	zTemp0+1
.887d		68		pla				pla 							; add stacked value = x 5
.887e		65 36		adc $36				adc 	zTemp0
.8880		85 36		sta $36				sta 	zTemp0
.8882		68		pla				pla
.8883		65 37		adc $37				adc 	zTemp0+1
.8885		85 37		sta $37				sta 	zTemp0+1
.8887		60		rts				rts
.8888						_SBBTString:
.8888		06 36		asl $36				asl 	zTemp0
.888a		26 37		rol $37				rol 	zTemp0+1
.888c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.888d						Command_Dir:
.888d		ad 5e 07	lda $075e			lda     KNLDefaultDrive				; set drive to list.
.8890		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8892		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8894		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8897		b0 4f		bcs $88e8			bcs     _CDExit
.8899						_CDEventLoop:
.8899		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.889c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.889f		b0 f8		bcs $8899			bcs     _CDEventLoop
.88a1		ad 5f 07	lda $075f			lda     KNLEvent.type
.88a4		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.88a6		f0 40		beq $88e8			beq    	_CDExit
.88a8		20 ad 88	jsr $88ad			jsr     _CDMessages 				; handle various messages
.88ab		80 ec		bra $8899			bra     _CDEventLoop
.88ad						_CDMessages:
.88ad		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.88af		f0 15		beq $88c6			beq     _CDEVRead
.88b1		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.88b3		f0 19		beq $88ce			beq     _CDEVVolume
.88b5		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.88b7		f0 32		beq $88eb			beq     _CDEVFile
.88b9		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.88bb		f0 70		beq $892d			beq     _CDEVFree
.88bd		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.88bf		f0 6e		beq $892f			beq     _CDEVEOF
.88c1		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.88c3		f0 6a		beq $892f			beq     _CDEVEOF
.88c5		60		rts				rts
.88c6						_CDEVRead:
.88c6		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.88c9		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.88cb		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.88ce						_CDEVVolume:
.88ce		a9 5b		lda #$5b			lda 	#"["
.88d0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88d3		ad 64 07	lda $0764			lda     KNLEvent.directory.volume.len
.88d6		20 37 89	jsr $8937			jsr     _CDReadData
.88d9		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.88dc		a9 5d		lda #$5d			lda 	#"]"
.88de		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88e1		a9 0d		lda #$0d			lda 	#13
.88e3		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88e6		80 de		bra $88c6			bra     _CDEVRead
.88e8						_CDExit:
.88e8		4c ad 85	jmp $85ad			jmp 	WarmStart
.88eb						_CDEVFile:
.88eb		a9 20		lda #$20			lda 	#32
.88ed		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88f0		ad 64 07	lda $0764			lda     KNLEvent.directory.file.len
.88f3		48		pha				pha
.88f4		20 37 89	jsr $8937			jsr     _CDReadData
.88f7		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.88fa		68		pla				pla
.88fb		49 ff		eor #$ff			eor 	#$FF
.88fd		38		sec				sec
.88fe		69 10		adc #$10			adc 	#16
.8900		aa		tax				tax
.8901						_CDEVTab:
.8901		a9 20		lda #$20			lda 	#32
.8903		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8906		ca		dex				dex
.8907		10 f8		bpl $8901			bpl 	_CDEVTab
.8909		20 4e 89	jsr $894e			jsr 	_CDReadExtended
.890c		ad 26 05	lda $0526			lda 	lineBuffer
.890f		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8912		20 c2 9a	jsr $9ac2			jsr 	ConvertInt16
.8915		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.8918		a2 89		ldx #$89			ldx 	#_CDEVFMessage >> 8
.891a		a9 21		lda #$21			lda 	#_CDEVFMessage & $FF
.891c		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.891f		80 a5		bra $88c6			bra     _CDEVRead
.8921						_CDEVFMessage:
>8921		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8929		29 2e 0d 00
.892d						_CDEVFree:
.892d		80 00		bra $892f			bra     _CDEVEOF
.892f						_CDEVEOF:
.892f		ad 62 07	lda $0762			lda     KNLEvent.directory.stream
.8932		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8934		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8937						_CDReadData:
.8937		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8939		a9 26		lda #$26			lda     #lineBuffer & $FF
.893b		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.893d		a9 05		lda #$05			lda     #lineBuffer >> 8
.893f		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8941		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8944		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8946		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8949		a9 26		lda #$26			lda 	#lineBuffer & $FF
.894b		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.894d		60		rts				rts
.894e						_CDReadExtended:
.894e		a9 02		lda #$02			lda     #2
.8950		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8952		a9 26		lda #$26			lda     #lineBuffer & $FF
.8954		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8956		a9 05		lda #$05			lda     #lineBuffer >> 8
.8958		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.895a		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.895d						Command_Drive:
.895d		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.8960		20 40 81	jsr $8140			jsr 	KNLSetDrive
.8963		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8964						EndCommand:
.8964		4c ad 85	jmp $85ad			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8967						ForCommand:
.8967		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8969		20 b9 b6	jsr $b6b9			jsr 	StackOpen
.896c		a2 00		ldx #$00			ldx 	#0
.896e		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm
.8971		b5 50		lda $50,x			lda 	NSStatus,x
.8973		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8975		d0 47		bne $89be			bne		_FCError
.8977		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8979		20 4a 96	jsr $964a			jsr 	CheckNextA
.897c		e8		inx				inx
.897d		20 47 a5	jsr $a547			jsr 	EvaluateInteger 			; <from> in +1
.8980		b1 30		lda ($30),y			lda 	(codePtr),y
.8982		c8		iny				iny 								; consume it
.8983		48		pha				pha 								; save on stack for later
.8984		c9 c0		cmp #$c0			cmp 	#KWD_DOWNTO
.8986		f0 04		beq $898c			beq 	_FCNoSyntax
.8988		c9 da		cmp #$da			cmp 	#KWD_TO
.898a		d0 35		bne $89c1			bne 	_FCSyntaxError
.898c						_FCNoSyntax:
.898c		e8		inx				inx
.898d		20 47 a5	jsr $a547			jsr 	EvaluateInteger
.8990		20 fe b6	jsr $b6fe			jsr 	STKSaveCodePosition 		; save loop back position
.8993		68		pla				pla 								; restore DOWNTO or TO
.8994		5a		phy				phy 								; save Y on the stack
.8995		49 c0		eor #$c0			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8997		f0 02		beq $899b			beq 	_FCNotDownTo
.8999		a9 02		lda #$02			lda 	#2
.899b						_FCNotDownTo:
.899b		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.899c		a0 10		ldy #$10			ldy 	#16
.899e		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.89a0		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.89a2		a5 58		lda $58				lda 	NSMantissa0
.89a4		91 34		sta ($34),y			sta 	(basicStack),y
.89a6		a5 60		lda $60				lda 	NSMantissa1
.89a8		c8		iny				iny
.89a9		91 34		sta ($34),y			sta 	(basicStack),y
.89ab		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89ad		a2 01		ldx #$01			ldx 	#1
.89af		20 c4 89	jsr $89c4			jsr 	FCIntegerToStack
.89b2		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89b4		a2 02		ldx #$02			ldx 	#2
.89b6		20 c4 89	jsr $89c4			jsr 	FCIntegerToStack
.89b9		20 df 89	jsr $89df			jsr 	CopyIndexToReference
.89bc		7a		ply				ply 								; restore position
.89bd		60		rts				rts
.89be						_FCError:
.89be		4c 62 a7	jmp $a762			jmp 	TypeError
.89c1						_FCSyntaxError:
.89c1		4c 58 a7	jmp $a758			jmp 	SyntaxError
.89c4						FCIntegerToStack:
.89c4		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89c6		10 03		bpl $89cb			bpl	 	_FCNotNegative
.89c8		20 a3 a5	jsr $a5a3			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89cb						_FCNotNegative:
.89cb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89cd		91 34		sta ($34),y			sta 	(basicStack),y
.89cf		c8		iny				iny
.89d0		b5 60		lda $60,x			lda 	NSMantissa1,x
.89d2		91 34		sta ($34),y			sta 	(basicStack),y
.89d4		c8		iny				iny
.89d5		b5 68		lda $68,x			lda 	NSMantissa2,x
.89d7		91 34		sta ($34),y			sta 	(basicStack),y
.89d9		c8		iny				iny
.89da		b5 70		lda $70,x			lda 	NSMantissa3,x
.89dc		91 34		sta ($34),y			sta 	(basicStack),y
.89de		60		rts				rts
.89df						CopyIndexToReference:
.89df		5a		phy				phy
.89e0		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89e2		38		sec				sec 								; (because we copy from offset 8)
.89e3		b1 34		lda ($34),y			lda 	(basicStack),y
.89e5		e9 08		sbc #$08			sbc 	#8
.89e7		85 36		sta $36				sta 	zTemp0
.89e9		c8		iny				iny
.89ea		b1 34		lda ($34),y			lda 	(basicStack),y
.89ec		e9 00		sbc #$00			sbc 	#0
.89ee		85 37		sta $37				sta 	zTemp0+1
.89f0		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89f2		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89f4		b1 34		lda ($34),y			lda 	(basicStack),y
.89f6		0a		asl a				asl 	a 							; into carry
.89f7		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89f9		90 14		bcc $8a0f			bcc 	_CITRNormal
.89fb		38		sec				sec
.89fc						_CITRNegative:
.89fc		a9 00		lda #$00			lda 	#0
.89fe		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a00		91 36		sta ($36),y			sta 	(zTemp0),y
.8a02		c8		iny				iny
.8a03		ca		dex				dex
.8a04		d0 f6		bne $89fc			bne 	_CITRNegative
.8a06		88		dey				dey 								; look at MSB of mantissa
.8a07		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a09		09 80		ora #$80			ora 	#$80
.8a0b		91 36		sta ($36),y			sta 	(zTemp0),y
.8a0d		7a		ply				ply
.8a0e		60		rts				rts
.8a0f						_CITRNormal:
.8a0f		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a11		91 36		sta ($36),y			sta 	(zTemp0),y
.8a13		c8		iny				iny
.8a14		ca		dex				dex
.8a15		d0 f8		bne $8a0f			bne 	_CITRNormal
.8a17		7a		ply				ply 								; and exit.
.8a18		60		rts				rts
.8a19						NextCommand:
.8a19		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a1b		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a1d		20 e6 b6	jsr $b6e6			jsr 	StackCheckFrame
.8a20		5a		phy				phy
.8a21		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a23		b1 34		lda ($34),y			lda 	(basicStack),y
.8a25		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a27		30 02		bmi $8a2b			bmi 	_NCStepNeg
.8a29		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a2b						_NCStepNeg:
.8a2b		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a2d		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a2f		18		clc				clc
.8a30						_NCBump:
.8a30		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a32		91 34		sta ($34),y			sta 	(basicStack),y
.8a34		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a36		c8		iny				iny 								; next byte
.8a37		ca		dex				dex 								; do four times
.8a38		d0 f6		bne $8a30			bne 	_NCBump
.8a3a		20 df 89	jsr $89df			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a3d		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a3f		b1 34		lda ($34),y			lda 	(basicStack),y
.8a41		0a		asl a				asl 	a 							; sign bit to carry
.8a42		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a44		85 38		sta $38				sta 	zTemp1
.8a46		90 02		bcc $8a4a			bcc 	_NCCompRev 					; use if step is +ve
.8a48		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a4a						_NCCompRev:
.8a4a		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a4c		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a4e		85 39		sta $39				sta 	zTemp1+1
.8a50		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a52		38		sec				sec
.8a53						_NCCompare:
.8a53		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a55		b1 34		lda ($34),y			lda 	(basicStack),y
.8a57		a4 39		ldy $39				ldy 	zTemp1+1
.8a59		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a5b		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a5d		e6 39		inc $39				inc 	zTemp1+1
.8a5f		ca		dex				dex 								; do it 4 times.
.8a60		d0 f1		bne $8a53			bne 	_NCCompare
.8a62		50 02		bvc $8a66			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a64		49 80		eor #$80			eor 	#$80
.8a66						_NCNoOverflow:
.8a66		7a		ply				ply 								; restore Y position
.8a67		0a		asl a				asl 	a 							; is bit 7 set.
.8a68		90 04		bcc $8a6e			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a6a		20 d8 b6	jsr $b6d8			jsr 	StackClose 					; exit the loop
.8a6d		60		rts				rts
.8a6e						_NCLoopBack:
.8a6e		20 0f b7	jsr $b70f			jsr 	STKLoadCodePosition 		; loop back
.8a71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a72						Command_GOSUB:
.8a72		a2 00		ldx #$00			ldx 	#0
.8a74		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a77		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a79		20 b9 b6	jsr $b6b9			jsr 	StackOpen 					; create frame
.8a7c		20 fe b6	jsr $b6fe			jsr 	STKSaveCodePosition 		; save current position
.8a7f		4c 95 8a	jmp $8a95			jmp 	GotoStackX
.8a82						Command_RETURN:
.8a82		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a84		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a86		20 e6 b6	jsr $b6e6			jsr 	StackCheckFrame
.8a89		20 0f b7	jsr $b70f			jsr 	STKLoadCodePosition 		; restore code position
.8a8c		20 d8 b6	jsr $b6d8			jsr 	StackClose
.8a8f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a90						GotoCommand:
.8a90		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a92		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.8a95						GotoStackX:
.8a95		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a97		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a98		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a9a		fa		plx				plx
.8a9b		20 65 ad	jsr $ad65			jsr 	MemorySearch 				; transfer to line number AX.
.8a9e		90 05		bcc $8aa5			bcc 	_GotoError 					; not found, off end.
.8aa0		d0 03		bne $8aa5			bne 	_GotoError 					; not found exactly
.8aa2		4c 56 91	jmp $9156			jmp 	RunNewLine 					; and go straight to new line code.
.8aa5						_GotoError:
.8aa5		a9 0d		lda #$0d		lda	#13
.8aa7		4c 53 96	jmp $9653		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8aaa						IfCommand:
.8aaa		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8aac		20 28 a5	jsr $a528			jsr 	EvaluateNumber
.8aaf		b1 30		lda ($30),y			lda 	(codePtr),y
.8ab1		c9 b4		cmp #$b4			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8ab3		d0 0a		bne $8abf			bne 	_IfStructured 				; we still support it.
.8ab5		c8		iny				iny 								; consume THEN
.8ab6		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; is it zero
.8ab9		f0 01		beq $8abc			beq 	_IfFail 					; if fail, go to next line
.8abb		60		rts				rts 								; if THEN just continue
.8abc						_IfFail:
.8abc		4c 3e 91	jmp $913e			jmp 	EOLCommand
.8abf						_IfStructured:
.8abf		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; is it zero
.8ac2		d0 07		bne $8acb			bne 	_IfExit 					; if not, then continue normally.
.8ac4		a9 c1		lda #$c1			lda 	#KWD_ELSE 					; look for else/endif
.8ac6		a2 b1		ldx #$b1			ldx 	#KWD_ENDIF
.8ac8		20 3b 95	jsr $953b			jsr 	ScanForward 				; and run from there
.8acb						_IfExit:
.8acb		60		rts				rts
.8acc						ElseCode:
.8acc		a9 b1		lda #$b1			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ace		aa		tax				tax 								; so just go to the structure exit
.8acf		20 3b 95	jsr $953b			jsr 	ScanForward
.8ad2		60		rts				rts
.8ad3						EndIf:
.8ad3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8ad4						Command_Input:
.8ad4		9c 24 04	stz $0424			stz 	isPrintFlag
.8ad7		80 0c		bra $8ae5			bra 	Command_IP_Main
.8ad9						Command_CPrint:
.8ad9		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8adb		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ade		80 05		bra $8ae5			bra 	Command_IP_Main
.8ae0						Command_Print:
.8ae0		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8ae2		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ae5						Command_IP_Main:
.8ae5		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ae6						_CPLoop:
.8ae6		08		php				php 								; save last action flag
.8ae7		b1 30		lda ($30),y			lda 	(codePtr),y
.8ae9		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8aeb		f0 54		beq $8b41			beq 	_CPExit
.8aed		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8aef		f0 50		beq $8b41			beq 	_CPExit
.8af1		68		pla				pla 								; throw last action flag
.8af2		b1 30		lda ($30),y			lda 	(codePtr),y
.8af4		c8		iny				iny
.8af5		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8af7		f0 45		beq $8b3e			beq 	_CPContinueWithSameLine
.8af9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8afb		f0 3c		beq $8b39			beq 	_CPTab
.8afd		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8aff		f0 34		beq $8b35			beq 	_CPNewLine
.8b01		88		dey				dey 								; undo the get.
.8b02		20 55 9b	jsr $9b55			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8b05		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8b07		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b09		f0 0d		beq $8b18			beq 	_CPIsValue 					; no, display it.
.8b0b		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8b0e		d0 05		bne $8b15			bne 	_CPIsPrint 					; otherwise display.
.8b10		20 4a 8b	jsr $8b4a			jsr 	CIInputValue 				; input a value to the reference
.8b13		80 20		bra $8b35			bra 	_CPNewLine
.8b15						_CPIsPrint:
.8b15		20 1a 9e	jsr $9e1a			jsr 	Dereference 				; dereference if required.
.8b18						_CPIsValue:
.8b18		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b1a		29 10		and #$10			and 	#NSBIsString
.8b1c		f0 09		beq $8b27			beq 	_CPNumber
.8b1e		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b20		a5 58		lda $58				lda 	NSMantissa0
.8b22		20 ad 8b	jsr $8bad			jsr 	CPPrintStringXA
.8b25		80 be		bra $8ae5			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b27						_CPNumber:
.8b27		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b29		20 0f a4	jsr $a40f			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b2c		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b2e		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b30		20 ad 8b	jsr $8bad			jsr 	CPPrintStringXA 			; print it.
.8b33		80 b0		bra $8ae5			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b35						_CPNewLine:
.8b35		a9 0d		lda #$0d			lda 	#13
.8b37		80 02		bra $8b3b			bra 	_CPPrintCharDirect
.8b39						_CPTab:
.8b39		a9 09		lda #$09			lda 	#9 							; print TAB
.8b3b						_CPPrintCharDirect:
.8b3b		20 c8 8b	jsr $8bc8			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b3e						_CPContinueWithSameLine:
.8b3e		38		sec				sec 								; loop round with carry set, which
.8b3f		80 a5		bra $8ae6			bra 	_CPLoop 					; will inhibit final CR
.8b41						_CPExit:
.8b41		28		plp				plp 								; get last action flag
.8b42		b0 05		bcs $8b49			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b44		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b46		20 c8 8b	jsr $8bc8			jsr 	CPPVControl
.8b49						_CPExit2:
.8b49		60		rts				rts
.8b4a						CIInputValue:
.8b4a		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b4c						_CIInputLine:
.8b4c		20 cb 8b	jsr $8bcb			jsr 	CPInputVector 				; get key
.8b4f		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b51		f0 1f		beq $8b72			beq 	_CIHaveValue
.8b53		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b55		f0 11		beq $8b68			beq 	_CIBackspace
.8b57		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b59		90 f1		bcc $8b4c			bcc 	_CIInputLine
.8b5b		e0 50		cpx #$50			cpx 	#80 						; max length
.8b5d		b0 ed		bcs $8b4c			bcs 	_CIInputLine
.8b5f		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b62		e8		inx				inx
.8b63		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b66		80 e4		bra $8b4c			bra 	_CIInputLine
.8b68						_CIBackspace:
.8b68		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b6a		f0 e0		beq $8b4c			beq 	_CIInputLine
.8b6c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b6f		ca		dex				dex
.8b70		80 da		bra $8b4c			bra 	_CIInputLine
.8b72						_CIHaveValue:
.8b72		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b75		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b77		29 10		and #$10			and 	#NSBIsString
.8b79		f0 17		beq $8b92			beq 	_CIAssignNumber 			; assign a number
.8b7b		a2 01		ldx #$01			ldx 	#1
.8b7d		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b7f		95 58		sta $58,x			sta 	NSMantissa0,x
.8b81		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b83		95 60		sta $60,x			sta 	NSMantissa1,x
.8b85		74 68		stz $68,x			stz 	NSMantissa2,x
.8b87		74 70		stz $70,x			stz 	NSMantissa3,x
.8b89		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b8b		95 50		sta $50,x			sta  	NSStatus,x
.8b8d		ca		dex				dex 								; X = 0
.8b8e		20 07 8c	jsr $8c07			jsr 	AssignVariable
.8b91		60		rts				rts
.8b92						_CIAssignNumber:
.8b92		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b94		85 36		sta $36				sta 	zTemp0
.8b96		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b98		85 37		sta $37				sta 	zTemp0+1
.8b9a		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b9c		20 37 a3	jsr $a337			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b9f		90 07		bcc $8ba8			bcc 	_CIIsOkay
.8ba1		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8ba3		20 c0 8b	jsr $8bc0			jsr 	CPPrintVector
.8ba6		80 a2		bra $8b4a			bra 	CIInputValue
.8ba8						_CIIsOkay:
.8ba8		ca		dex				dex 								; X = 0
.8ba9		20 07 8c	jsr $8c07			jsr 	AssignVariable
.8bac		60		rts				rts
.8bad						CPPrintStringXA:
.8bad		5a		phy				phy
.8bae		86 37		stx $37				stx 	zTemp0+1
.8bb0		85 36		sta $36				sta 	zTemp0
.8bb2		a0 00		ldy #$00			ldy 	#0
.8bb4						_PSXALoop:
.8bb4		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bb6		f0 06		beq $8bbe			beq 	_PSXAExit
.8bb8		20 c0 8b	jsr $8bc0			jsr 	CPPrintVector
.8bbb		c8		iny				iny
.8bbc		80 f6		bra $8bb4			bra 	_PSXALoop
.8bbe						_PSXAExit:
.8bbe		7a		ply				ply
.8bbf		60		rts				rts
.8bc0						CPPrintVector:
.8bc0		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8bc3		30 03		bmi $8bc8			bmi 	CPPVControl
.8bc5		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8bc8						CPPVControl:
.8bc8		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8bcb						CPInputVector:
.8bcb		4c 2b 80	jmp $802b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bce						LetCommand:
.8bce		a2 00		ldx #$00			ldx 	#0
.8bd0		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd2		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8bd4		d0 14		bne $8bea			bne 	_LCStandard
.8bd6		c8		iny				iny 								; skip equal
.8bd7		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bda		20 1a 9e	jsr $9e1a			jsr 	Dereference 				; dereference it to a value
.8bdd		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bdf		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8be1		95 50		sta $50,x			sta 	NSStatus,x
.8be3		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8be5		d0 0f		bne $8bf6			bne 	_LCMain
.8be7		4c 62 a7	jmp $a762			jmp 	TypeError 					; was a reference before.
.8bea						_LCStandard:
.8bea		ad 3f 9b	lda $9b3f			lda 	PrecedenceLevel+"*"			; precedence > this
.8bed		20 59 9b	jsr $9b59			jsr 	EvaluateExpressionAtPrecedence
.8bf0		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bf2		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bf4		f0 0e		beq $8c04			beq 	_LetGoProc 					; it's a procedure call.
.8bf6						_LCMain:
.8bf6		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bf8		20 4a 96	jsr $964a			jsr 	CheckNextA
.8bfb		e8		inx				inx 								; RHS
.8bfc		20 1f a5	jsr $a51f			jsr 	EvaluateValue
.8bff		ca		dex				dex
.8c00		20 07 8c	jsr $8c07			jsr 	AssignVariable
.8c03		60		rts				rts
.8c04						_LetGoProc:
.8c04		4c 14 90	jmp $9014			jmp 	CallProcedure
.8c07						AssignVariable:
.8c07		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c09		48		pha				pha 								; save a copy
.8c0a		55 51		eor $51,x			eor 	NSStatus+1,x
.8c0c		29 10		and #$10			and 	#NSBIsString
.8c0e		d0 0b		bne $8c1b			bne 	_ASError
.8c10		68		pla				pla 								; get back
.8c11		29 10		and #$10			and 	#NSBIsString 				; check type
.8c13		d0 03		bne $8c18			bne 	_ASString
.8c15		4c 58 9d	jmp $9d58			jmp 	AssignNumber
.8c18						_ASString:
.8c18		4c b6 9d	jmp $9db6			jmp 	AssignString
.8c1b						_ASError:
.8c1b		4c 62 a7	jmp $a762			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c1e						Command_List:
.8c1e		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c21		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c23		20 3f 80	jsr $803f			jsr 	SNDCommand
.8c26		b1 30		lda ($30),y			lda 	(codePtr),y
.8c28		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c2a		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c2c		f0 72		beq $8ca0			beq 	_CLListProcedure
.8c2e		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c30		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c32		a9 ff		lda #$ff			lda 	#$FF
.8c34		85 5f		sta $5f				sta 	NSMantissa0+7
.8c36		85 67		sta $67				sta 	NSMantissa1+7
.8c38		b1 30		lda ($30),y			lda 	(codePtr),y
.8c3a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c3c		f0 1a		beq $8c58			beq 	_CLSecond
.8c3e		20 1d 8d	jsr $8d1d			jsr 	CLIsDigit 					; if not digit, list all
.8c41		b0 20		bcs $8c63			bcs 	_CLStart
.8c43		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c45		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.8c48		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c4c		f0 0a		beq $8c58			beq 	_CLSecond 					; if so go get it
.8c4e		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c50		85 5f		sta $5f				sta 	NSMantissa0+7
.8c52		a5 64		lda $64				lda 	NSMantissa1+4
.8c54		85 67		sta $67				sta 	NSMantissa1+7
.8c56		80 0b		bra $8c63			bra 	_CLStart
.8c58						_CLSecond:
.8c58		c8		iny				iny 								; consume comma
.8c59		20 1d 8d	jsr $8d1d			jsr 	CLIsDigit 					; digit found
.8c5c		b0 05		bcs $8c63			bcs 	_CLStart 					; if not, continue listing
.8c5e		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c60		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.8c63						_CLStart
.8c63		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c65		85 30		sta $30				sta 	codePtr
.8c67		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c69		85 31		sta $31				sta 	codePtr+1
.8c6b						_CLLoop:
.8c6b		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c6d		f0 03		beq $8c72			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c6f		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.8c72						_NoEvents:
.8c72		d0 27		bne $8c9b			bne 	_CLBreak
.8c74		b2 30		lda ($30)			lda 	(codePtr)
.8c76		f0 20		beq $8c98			beq 	_CLExit
.8c78		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c7a		20 0c 8d	jsr $8d0c			jsr 	CLCompareLineNo
.8c7d		90 0c		bcc $8c8b			bcc 	_CLNext
.8c7f		a2 07		ldx #$07			ldx 	#7
.8c81		20 0c 8d	jsr $8d0c			jsr 	CLCompareLineNo
.8c84		f0 02		beq $8c88			beq 	_CLDoThisOne
.8c86		b0 03		bcs $8c8b			bcs 	_CLNext
.8c88						_CLDoThisOne:
.8c88		20 f9 8c	jsr $8cf9			jsr 	CLListOneLine 				; routine to list the current line.
.8c8b						_CLNext:
.8c8b		18		clc				clc
.8c8c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c8e		65 30		adc $30				adc 	codePtr
.8c90		85 30		sta $30				sta 	codePtr
.8c92		90 02		bcc $8c96			bcc 	_CREExit
.8c94		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c96						_CREExit:
.8c96		80 d3		bra $8c6b			bra 	_CLLoop
.8c98						_CLExit:
.8c98		4c ad 85	jmp $85ad			jmp 	WarmStart
.8c9b						_CLBreak:
.8c9b		a9 01		lda #$01		lda	#1
.8c9d		4c 53 96	jmp $9653		jmp	ErrorHandler
.8ca0						_CLListProcedure:
.8ca0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca2		85 38		sta $38				sta 	zTemp1
.8ca4		c8		iny				iny
.8ca5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca7		85 39		sta $39				sta 	zTemp1+1
.8ca9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8cab		85 30		sta $30				sta 	codePtr
.8cad		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8caf		85 31		sta $31				sta 	codePtr+1
.8cb1						_CLLPSearch:
.8cb1		b2 30		lda ($30)			lda 	(codePtr)
.8cb3		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cb5		f0 e1		beq $8c98			beq 	_CLExit
.8cb7		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8cb9		b1 30		lda ($30),y			lda 	(codePtr),y
.8cbb		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.8cbd		d0 0e		bne $8ccd			bne 	_CLLPNext
.8cbf		c8		iny				iny 								; check if PROC this.
.8cc0		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc2		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8cc4		d0 07		bne $8ccd			bne 	_CLLPNext
.8cc6		c8		iny				iny
.8cc7		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc9		c5 39		cmp $39				cmp 	zTemp1+1
.8ccb		f0 0d		beq $8cda			beq 	_CLLPFound
.8ccd						_CLLPNext:
.8ccd		18		clc				clc
.8cce		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cd0		65 30		adc $30				adc 	codePtr
.8cd2		85 30		sta $30				sta 	codePtr
.8cd4		90 02		bcc $8cd8			bcc 	_CREExit
.8cd6		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cd8						_CREExit:
.8cd8		80 d7		bra $8cb1			bra 	_CLLPSearch
.8cda						_CLLPFound:
.8cda		b2 30		lda ($30)			lda 	(codePtr)
.8cdc		f0 ba		beq $8c98			beq 	_CLExit
.8cde		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8ce0		b1 30		lda ($30),y			lda 	(codePtr),y
.8ce2		48		pha				pha
.8ce3		20 f9 8c	jsr $8cf9			jsr 	CLListOneLine 				; list line and go forward
.8ce6		18		clc				clc
.8ce7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ce9		65 30		adc $30				adc 	codePtr
.8ceb		85 30		sta $30				sta 	codePtr
.8ced		90 02		bcc $8cf1			bcc 	_CREExit
.8cef		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cf1						_CREExit:
.8cf1		68		pla				pla 								; reached ENDPROC ?
.8cf2		c9 b2		cmp #$b2			cmp 	#KWD_ENDPROC
.8cf4		d0 e4		bne $8cda			bne 	_CLLPFound
.8cf6		4c ad 85	jmp $85ad			jmp 	WarmStart
.8cf9						CLListOneLine:
.8cf9		20 9e 95	jsr $959e			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8cfc		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.8cff		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8d01		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8d03		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.8d06		a9 0d		lda #$0d			lda 	#13 						; new line
.8d08		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8d0b		60		rts				rts
.8d0c						CLCompareLineNo:
.8d0c		38		sec				sec
.8d0d		a0 01		ldy #$01			ldy 	#1
.8d0f		b1 30		lda ($30),y			lda 	(codePtr),y
.8d11		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d13		85 36		sta $36				sta 	zTemp0
.8d15		c8		iny				iny
.8d16		b1 30		lda ($30),y			lda 	(codePtr),y
.8d18		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d1a		05 36		ora $36				ora 	zTemp0
.8d1c		60		rts				rts
.8d1d						CLIsDigit:
.8d1d		b1 30		lda ($30),y			lda 	(codePtr),y
.8d1f		c9 30		cmp #$30			cmp 	#"0"
.8d21		90 03		bcc $8d26			bcc	 	_CLIDExitFalse
.8d23		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d25		60		rts				rts
.8d26						_CLIDExitFalse:
.8d26		38		sec				sec
.8d27		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8d28						Command_Load:
.8d28		20 32 a5	jsr $a532			jsr 	EvaluateString 				; file name to load
.8d2b		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8d2d		a5 36		lda $36				lda 	zTemp0
.8d2f		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.8d32		b0 44		bcs $8d78			bcs 	CLErrorHandler 				; error, so fail.
.8d34		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.8d37		20 c8 8d	jsr $8dc8			jsr     LoadReadByteInit            ; Init reader with the stream
.8d3a		20 cd 8f	jsr $8fcd			jsr 	NewProgram 					; does the actual NEW.
.8d3d		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.8d40						_CLLoop:
.8d40		20 86 8d	jsr $8d86			jsr 	LoadReadLine 				; get next line.
.8d43		f0 10		beq $8d55			beq 	_CLExit 					; end, exit.
.8d45		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8d48		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8d4b		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8d4e		f0 f0		beq $8d40			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8d50		20 88 85	jsr $8588			jsr 	EditProgramCode 			; do the editing etc.
.8d53		80 eb		bra $8d40			bra 	_CLLoop
.8d55						_CLExit:
.8d55		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d58		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8d5b						CLComplete:
.8d5b		a9 65		lda #$65			lda 	#_CLCMsg & $FF
.8d5d		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d5f		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.8d62		4c ad 85	jmp $85ad			jmp 	WarmStart
.8d65						_CLCMsg:
>8d65		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d6d		2e 0d 00
.8d70						CLCloseError:
.8d70		48		pha				pha
.8d71		ad 6d 07	lda $076d			lda 	BasicFileStream
.8d74		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8d77		68		pla				pla
.8d78						CLErrorHandler:
.8d78		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d7a		f0 05		beq $8d81			beq 	_CLEHNotFound
.8d7c		a9 1a		lda #$1a		lda	#26
.8d7e		4c 53 96	jmp $9653		jmp	ErrorHandler
.8d81						_CLEHNotFound:
.8d81		a9 19		lda #$19		lda	#25
.8d83		4c 53 96	jmp $9653		jmp	ErrorHandler
.8d86						LoadReadLine:
.8d86		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d88		20 a2 8d	jsr $8da2			jsr 	LoadReadCharacter
.8d8b		f0 14		beq $8da1			beq 	_LRLExit 					; eof ?
.8d8d		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d8f		90 f5		bcc $8d86			bcc 	LoadReadLine
.8d91						_LRLLoop:
.8d91		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8d94		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8d97		e8		inx				inx
.8d98		20 a2 8d	jsr $8da2			jsr 	LoadReadCharacter 			; next line
.8d9b		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8d9d		b0 f2		bcs $8d91			bcs 	_LRLLoop
.8d9f		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8da1						_LRLExit:
.8da1		60		rts				rts
.8da2						LoadReadCharacter:
.8da2		da		phx				phx
.8da3		5a		phy				phy
.8da4		ad 6c 07	lda $076c			lda 	LoadEOFFlag 				; already done EOF.
.8da7		d0 0c		bne $8db5			bne 	_LRCIsEOF
.8da9		20 d2 8d	jsr $8dd2			jsr 	LoadReadByte 				; read a byte
.8dac		90 09		bcc $8db7			bcc		_LRCExit 					; read okay.
.8dae		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8db0		d0 be		bne $8d70			bne 	CLCloseError
.8db2		ce 6c 07	dec $076c			dec 	LoadEOFFlag
.8db5						_LRCIsEOF:
.8db5		a9 00		lda #$00			lda 	#0
.8db7						_LRCExit:
.8db7		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8db9		d0 02		bne $8dbd			bne 	_LRCNotTab
.8dbb		a9 20		lda #$20			lda 	#' '
.8dbd						_LRCNotTab:
.8dbd		c9 0a		cmp #$0a			cmp 	#$0A
.8dbf		d0 02		bne $8dc3			bne 	_LRCNotLF
.8dc1		a9 0d		lda #$0d			lda 	#$0D
.8dc3						_LRCNotLF:
.8dc3		7a		ply				ply
.8dc4		fa		plx				plx
.8dc5		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8dc7		60		rts				rts
.8dc8						LoadReadByteInit:
.8dc8		8d 6e 07	sta $076e			sta     LoadFileStream 				; save stream
.8dcb		9c 6f 07	stz $076f			stz     LoadNextCharacter 			; reset buffer
.8dce		9c 70 07	stz $0770			stz     LoadEndCharacter
.8dd1		60		rts				rts
.8dd2						LoadReadByte:
.8dd2		da		phx				phx
.8dd3		ae 6f 07	ldx $076f			ldx     LoadNextCharacter 					; all data consumed ?
.8dd6		ec 70 07	cpx $0770			cpx     LoadEndCharacter
.8dd9		d0 12		bne $8ded			bne     _KNLRBGetNextByte
.8ddb		ad 6e 07	lda $076e			lda     LoadFileStream
.8dde		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8de0		20 9e 81	jsr $819e			jsr     KNLReadBlock 				; read next chunk from the stream
.8de3		b0 0f		bcs $8df4			bcs     _KNLRBError 				; error has occurred on read.
.8de5		8d 70 07	sta $0770			sta     LoadEndCharacter 						; # read is the number available
.8de8		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8dea		8e 6f 07	stx $076f			stx     LoadNextCharacter
.8ded						_KNLRBGetNextByte:
.8ded		bd 5e 06	lda $065e,x			lda     KNLReadBuffer,x 			; get the next data item
.8df0		ee 6f 07	inc $076f			inc     LoadNextCharacter 					; and advance the index
.8df3		18		clc				clc 								; succeeded
.8df4						_KNLRBError:
.8df4		fa		plx				plx
.8df5		60		rts				rts
.076c						LoadEOFFlag:
>076c								.fill 	1
.076d						BasicFileStream:
>076d								.fill 	1
.076e						LoadFileStream:
>076e								.byte   ?
.076f						LoadNextCharacter:
>076f								.byte   ?
.0770						LoadEndCharacter:
>0770								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8df6						Command_LOCAL:
.8df6		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8df8		20 04 8e	jsr $8e04			jsr 	LocaliseNextTerm 			; convert term to a local.
.8dfb		b1 30		lda ($30),y			lda 	(codePtr),y
.8dfd		c8		iny				iny
.8dfe		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e00		f0 f4		beq $8df6			beq 	Command_LOCAL 				; if so, localise another variable.
.8e02		88		dey				dey 								; unpick pre-get
.8e03		60		rts				rts
.8e04						LocaliseNextTerm:
.8e04		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm 				; evaluate the term
.8e07		b5 50		lda $50,x			lda 	NSStatus,x
.8e09		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8e0b		f0 5c		beq $8e69			beq		_LNTError
.8e0d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e0f		85 36		sta $36				sta 	zTemp0
.8e11		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e13		85 37		sta $37				sta  	zTemp0+1
.8e15		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8e17		29 10		and #$10			and 	#NSBIsString
.8e19		d0 1e		bne $8e39			bne 	_LNTPushString
.8e1b		5a		phy				phy
.8e1c		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e1e						_LNTPushNumLoop:
.8e1e		b1 36		lda ($36),y			lda		(zTemp0),y
.8e20		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e23		c8		iny				iny
.8e24		c0 05		cpy #$05			cpy 	#5
.8e26		d0 f6		bne $8e1e			bne 	_LNTPushNumLoop
.8e28		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e2a		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e2d		a5 37		lda $37				lda 	zTemp0+1
.8e2f		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e32		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e34		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e37		7a		ply				ply
.8e38		60		rts				rts
.8e39						_LNTPushString:
.8e39		5a		phy				phy
.8e3a		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e3c		85 38		sta $38				sta 	zTemp1
.8e3e		a0 01		ldy #$01			ldy 	#1
.8e40		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e42		85 39		sta $39				sta 	zTemp1+1
.8e44		a0 00		ldy #$00			ldy 	#0 							; output string
.8e46		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8e48		f0 0a		beq $8e54			beq 	_LNTStringOut
.8e4a						_LNTPushStrLoop:
.8e4a		b1 38		lda ($38),y			lda 	(zTemp1),y
.8e4c		f0 06		beq $8e54			beq 	_LNTStringOut
.8e4e		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e51		c8		iny				iny
.8e52		80 f6		bra $8e4a			bra 	_LNTPushStrLoop
.8e54						_LNTStringOut:
.8e54		98		tya				tya									; output length (chars written).
.8e55		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e58		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e5a		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e5d		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e5f		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e62		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e64		20 98 b6	jsr $b698			jsr 	StackPushByte
.8e67		7a		ply				ply
.8e68		60		rts				rts
.8e69						_LNTError:
.8e69		4c 58 a7	jmp $a758			jmp 	SyntaxError
.8e6c						LocalPopValue:
.8e6c		20 b0 b6	jsr $b6b0			jsr 	StackPopByte
.8e6f		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e71		d0 17		bne $8e8a			bne 	_LPVString
.8e73		20 b0 b6	jsr $b6b0			jsr 	StackPopByte 				; address
.8e76		85 37		sta $37				sta 	zTemp0+1
.8e78		20 b0 b6	jsr $b6b0			jsr 	StackPopByte
.8e7b		85 36		sta $36				sta 	zTemp0
.8e7d		5a		phy				phy
.8e7e		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e80						_LPVNumberCopy:
.8e80		20 b0 b6	jsr $b6b0			jsr 	StackPopByte
.8e83		91 36		sta ($36),y			sta 	(zTemp0),y
.8e85		88		dey				dey
.8e86		10 f8		bpl $8e80			bpl 	_LPVNumberCopy
.8e88		7a		ply				ply 								; and complete
.8e89		60		rts				rts
.8e8a						_LPVString:
.8e8a		20 b0 b6	jsr $b6b0			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e8d		85 37		sta $37				sta 	zTemp0+1
.8e8f		20 b0 b6	jsr $b6b0			jsr 	StackPopByte
.8e92		85 36		sta $36				sta 	zTemp0
.8e94		5a		phy				phy
.8e95		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8e97		85 38		sta $38				sta 	zTemp1
.8e99		a0 01		ldy #$01			ldy 	#1
.8e9b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e9d		85 39		sta $39				sta 	zTemp1+1
.8e9f		20 b0 b6	jsr $b6b0			jsr 	StackPopByte 				; # chars to get => y
.8ea2		a8		tay				tay
.8ea3		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8ea5		f0 0e		beq $8eb5			beq 	_LPVStringCopied
.8ea7		a9 00		lda #$00			lda 	#0 							; NULL on end
.8ea9		91 38		sta ($38),y			sta 	(zTemp1),y
.8eab						_LPVStringCopy:
.8eab		88		dey				dey
.8eac		30 07		bmi $8eb5			bmi 	_LPVStringCopied
.8eae		20 b0 b6	jsr $b6b0			jsr 	StackPopByte
.8eb1		91 38		sta ($38),y			sta 	(zTemp1),y
.8eb3		80 f6		bra $8eab			bra 	_LPVStringCopy
.8eb5						_LPVStringCopied:
.8eb5		fa		plx				plx
.8eb6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/memcopy.asm

.8eb7						MCCommand:
.8eb7		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.8eb9		48		pha				pha
.8eba		64 01		stz $01				stz 	1
.8ebc		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.8ebf		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.8ec1		8d 71 07	sta $0771			sta 	DMAControlByte
.8ec4		20 72 8f	jsr $8f72			jsr 	MCPosition 					; start position
.8ec7		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.8ec9		20 43 8f	jsr $8f43			jsr 	MCCopyAddress
.8ecc		a2 08		ldx #$08			ldx 	#8
.8ece		20 43 8f	jsr $8f43			jsr 	MCCopyAddress
.8ed1		b1 30		lda ($30),y			lda 	(codePtr),y
.8ed3		c8		iny				iny
.8ed4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.8ed6		f0 09		beq $8ee1			beq 	_MCSize1D
.8ed8		c9 d4		cmp #$d4			cmp 	#KWD_RECT 					; RECT <x>,<y>
.8eda		f0 11		beq $8eed			beq 	_MCRect2D
.8edc						_MCSyntax:
.8edc		a9 02		lda #$02		lda	#2
.8ede		4c 53 96	jmp $9653		jmp	ErrorHandler
.8ee1						_MCSize1D:
.8ee1		a2 00		ldx #$00			ldx 	#0 							; get size
.8ee3		20 47 a5	jsr $a547			jsr 	EvaluateInteger
.8ee6		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.8ee8		20 43 8f	jsr $8f43			jsr 	MCCopyAddress
.8eeb		80 24		bra $8f11			bra 	_MCDestination
.8eed						_MCRect2D:
.8eed		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.8eef		20 60 8f	jsr $8f60			jsr 	MCEvalCopyData16
.8ef2		20 42 96	jsr $9642			jsr 	CheckComma
.8ef5		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.8ef7		20 60 8f	jsr $8f60			jsr 	MCEvalCopyData16
.8efa		a9 b8		lda #$b8			lda 	#KWD_BY 					; BY keyword.
.8efc		20 4a 96	jsr $964a			jsr 	CheckNextA
.8eff		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.8f01		20 60 8f	jsr $8f60			jsr 	MCEvalCopyData16
.8f04		a2 12		ldx #$12			ldx 	#$12
.8f06		20 67 8f	jsr $8f67			jsr 	MCCopyData16
.8f09		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.8f0c		09 02		ora #$02			ora 	#$02
.8f0e		8d 71 07	sta $0771			sta 	DMAControlByte
.8f11						_MCDestination:
.8f11		b1 30		lda ($30),y			lda 	(codePtr),y
.8f13		c8		iny				iny
.8f14		c9 cf		cmp #$cf			cmp 	#KWD_POKE 					; is it POKE n
.8f16		f0 0e		beq $8f26			beq 	_MCDestPoke
.8f18		c9 da		cmp #$da			cmp 	#KWD_TO 					; is it TO n
.8f1a		d0 c0		bne $8edc			bne 	_MCSyntax
.8f1c		20 72 8f	jsr $8f72			jsr 	MCPosition 					; get target address
.8f1f		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.8f21		20 43 8f	jsr $8f43			jsr 	MCCopyAddress
.8f24		80 0e		bra $8f34			bra 	_MCDoDMA 					; and we can go.
.8f26						_MCDestPoke:
.8f26		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; POKE what
.8f29		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.8f2c		ad 71 07	lda $0771			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.8f2f		09 04		ora #$04			ora 	#$04
.8f31		8d 71 07	sta $0771			sta 	DMAControlByte
.8f34						_MCDoDMA:
.8f34		ad 71 07	lda $0771			lda 	DMAControlByte 				; set the DMA Control byte to go !
.8f37		8d 00 df	sta $df00			sta 	$DF00
.8f3a						_MCWaitBUSD:
.8f3a		ad 01 df	lda $df01			lda 	$DF01
.8f3d		30 fb		bmi $8f3a			bmi 	_MCWaitBUSD
.8f3f		68		pla				pla 								; restore I/O.
.8f40		85 01		sta $01				sta 	1
.8f42		60		rts				rts
.8f43						MCCopyAddress:
.8f43		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.8f45		29 fc		and #$fc			and 	#$FC
.8f47		05 70		ora $70				ora 	NSMantissa3
.8f49		d0 10		bne $8f5b			bne 	_MCRange
.8f4b		a5 58		lda $58				lda 	NSMantissa0
.8f4d		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f50		a5 60		lda $60				lda 	NSMantissa1
.8f52		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f55		a5 68		lda $68				lda 	NSMantissa2
.8f57		9d 02 df	sta $df02,x			sta 	$DF02,x
.8f5a		60		rts				rts
.8f5b						_MCRange:
.8f5b		a9 04		lda #$04		lda	#4
.8f5d		4c 53 96	jmp $9653		jmp	ErrorHandler
.8f60						MCEvalCopyData16:
.8f60		da		phx				phx
.8f61		a2 00		ldx #$00			ldx 	#0
.8f63		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.8f66		fa		plx				plx
.8f67						MCCopyData16:
.8f67		a5 58		lda $58				lda 	NSMantissa0
.8f69		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f6c		a5 60		lda $60				lda 	NSMantissa1
.8f6e		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f71		60		rts				rts
.8f72						MCPosition:
.8f72		a2 00		ldx #$00			ldx 	#0 							; get start address.
.8f74		b1 30		lda ($30),y			lda 	(codePtr),y
.8f76		c9 b7		cmp #$b7			cmp 	#KWD_AT
.8f78		f0 04		beq $8f7e			beq 	_MCPAt
.8f7a		20 47 a5	jsr $a547			jsr 	EvaluateInteger
.8f7d		60		rts				rts
.8f7e						_MCPAt:
.8f7e		c8		iny				iny
.8f7f		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; X position
.8f82		48		pha				pha
.8f83		20 42 96	jsr $9642			jsr 	CheckComma
.8f86		e8		inx				inx
.8f87		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; Y position
.8f8a		ca		dex				dex
.8f8b		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.8f8d		64 58		stz $58				stz 	NSMantissa0
.8f8f		64 68		stz $68				stz 	NSMantissa2
.8f91		64 70		stz $70				stz 	NSMantissa3
.8f93		46 60		lsr $60				lsr 	NSMantissa1
.8f95		66 58		ror $58				ror 	NSMantissa0
.8f97		46 60		lsr $60				lsr 	NSMantissa1
.8f99		66 58		ror $58				ror 	NSMantissa0
.8f9b		68		pla				pla
.8f9c		18		clc				clc
.8f9d		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.8f9f		85 58		sta $58				sta 	NSMantissa0
.8fa1		a5 60		lda $60				lda 	NSMantissa1
.8fa3		65 59		adc $59				adc 	NSMantissa0+1
.8fa5		85 60		sta $60				sta 	NSMantissa1
.8fa7		90 02		bcc $8fab			bcc 	_MCPNoCarry
.8fa9		e6 68		inc $68				inc 	NSMantissa2
.8fab						_MCPNoCarry:
.8fab		ad 9a 07	lda $079a			lda 	gxBasePage
.8fae		85 69		sta $69				sta 	NSMantissa2+1
.8fb0		64 59		stz $59				stz 	NSMantissa0+1
.8fb2		64 61		stz $61				stz 	NSMantissa1+1
.8fb4		64 71		stz $71				stz 	NSMantissa3+1
.8fb6		a2 01		ldx #$01			ldx 	#1
.8fb8		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight
.8fbb		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight
.8fbe		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight
.8fc1		a2 00		ldx #$00			ldx 	#0
.8fc3		20 4d 99	jsr $994d			jsr 	AddTopTwoStack
.8fc6		60		rts				rts
.0771						DMAControlByte:
>0771								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8fc7						NewCommand:
.8fc7		20 cd 8f	jsr $8fcd			jsr 	NewProgram 					; does the actual NEW.
.8fca		4c ad 85	jmp $85ad			jmp 	WarmStart 					; and warm starts straight away.
.8fcd						NewProgram:
.8fcd		20 47 ad	jsr $ad47			jsr 	MemoryNew
.8fd0		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8fd3		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear everything.
.8fd6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8fd7						PokeBCommand:
.8fd7		a9 01		lda #$01			lda 	#1
.8fd9		80 0c		bra $8fe7			bra 	PokeCommand
.8fdb						PokeWCommand:
.8fdb		a9 02		lda #$02			lda 	#2
.8fdd		80 08		bra $8fe7			bra 	PokeCommand
.8fdf						PokeLCommand:
.8fdf		a9 03		lda #$03			lda 	#3
.8fe1		80 04		bra $8fe7			bra 	PokeCommand
.8fe3						PokeDCommand:
.8fe3		a9 04		lda #$04			lda 	#4
.8fe5		80 00		bra $8fe7			bra 	PokeCommand
.8fe7						PokeCommand:
.8fe7		48		pha				pha 								; save count on stack
.8fe8		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8fea		20 5a a5	jsr $a55a			jsr		Evaluate16BitInteger 		; address
.8fed		20 42 96	jsr $9642			jsr 	CheckComma
.8ff0		e8		inx				inx
.8ff1		20 47 a5	jsr $a547			jsr		EvaluateInteger 			; data
.8ff4		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8ff6		85 36		sta $36				sta 	zTemp0
.8ff8		a5 60		lda $60				lda 	NSMantissa1
.8ffa		85 37		sta $37				sta 	zTemp0+1
.8ffc		68		pla				pla 								; count -> zTemp1
.8ffd		85 38		sta $38				sta 	zTemp1
.8fff		5a		phy				phy 								; save Y position.
.9000		a0 00		ldy #$00			ldy 	#0 							; index to write
.9002		a2 00		ldx #$00			ldx 	#0 							; index to read
.9004						_PCLoop:
.9004		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.9006		91 36		sta ($36),y			sta 	(zTemp0),y
.9008		c8		iny				iny 								; next byte to write
.9009		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.900a		18		clc				clc
.900b		69 08		adc #$08			adc 	#MathStackSize
.900d		aa		tax				tax
.900e		c6 38		dec $38				dec 	zTemp1 						; done them all
.9010		d0 f2		bne $9004			bne 	_PCLoop
.9012		7a		ply				ply 								; restore position.
.9013		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.9014						CallProcedure:
.9014		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9016		b1 30		lda ($30),y			lda 	(codePtr),y
.9018		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.901a		f0 0c		beq $9028			beq 	_CPEndParam
.901c						_CPParamLoop:
.901c		20 1f a5	jsr $a51f			jsr 	EvaluateValue 				; get parameter onto stack
.901f		e8		inx				inx 								; bump next stack
.9020		b1 30		lda ($30),y			lda 	(codePtr),y
.9022		c8		iny				iny
.9023		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9025		f0 f5		beq $901c			beq 	_CPParamLoop
.9027		88		dey				dey 								; unpick.
.9028						_CPEndParam:
.9028		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.902b		c8		iny				iny									; skip right bracket
.902c		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.902e		20 b9 b6	jsr $b6b9			jsr 	StackOpen
.9031		20 fe b6	jsr $b6fe			jsr 	STKSaveCodePosition 		; save loop position
.9034		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9036		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9038		a5 60		lda $60				lda 	NSMantissa1
.903a		85 37		sta $37				sta 	zTemp0+1
.903c		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.903e		b2 36		lda ($36)			lda 	(zTemp0)
.9040		85 30		sta $30				sta 	safePtr
.9042		b1 36		lda ($36),y			lda 	(zTemp0),y
.9044		85 31		sta $31				sta 	safePtr+1
.9046		c8		iny				iny
.9047		b1 36		lda ($36),y			lda 	(zTemp0),y
.9049		85 32		sta $32				sta 	safePtr+2
.904b		c8		iny				iny
.904c		b1 36		lda ($36),y			lda 	(zTemp0),y
.904e		85 33		sta $33				sta 	safePtr+3
.9050		c8		iny				iny 								; get Y offset -> Y
.9051		b1 36		lda ($36),y			lda 	(zTemp0),y
.9053		a8		tay				tay
.9054		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9056		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9059		f0 13		beq $906e			beq 	_ParamExit 					; if so, exit.
.905b						_ParamExtract:
.905b		ca		dex				dex 								; put a local term on the level before
.905c		20 04 8e	jsr $8e04			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.905f		20 07 8c	jsr $8c07			jsr 	AssignVariable 				; assign stacked value to the variable.
.9062		e8		inx				inx 								; advance to next parameter to do.
.9063		e8		inx				inx
.9064		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9067		f0 05		beq $906e			beq 	_ParamExit
.9069		20 42 96	jsr $9642			jsr 	CheckComma 					; comma seperating parameters
.906c		80 ed		bra $905b			bra 	_ParamExtract
.906e						_ParamExit:
.906e		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; check )
.9071		60		rts				rts 								; and continue from here
.9072						Command_ENDPROC:
.9072		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9074		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9076		20 e6 b6	jsr $b6e6			jsr 	StackCheckFrame
.9079		20 0f b7	jsr $b70f			jsr 	STKLoadCodePosition 		; restore code position
.907c		20 d8 b6	jsr $b6d8			jsr 	StackClose
.907f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9080						Command_Read:
.9080		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9082		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm
.9085		b5 50		lda $50,x			lda 	NSStatus,x
.9087		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9089		f0 4f		beq $90da			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.908b		20 23 91	jsr $9123			jsr 	SwapDataCodePtrs 			; swap code and data
.908e		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9091		d0 25		bne $90b8			bne 	_CRContinueData  			; forward for the next one.
.9093		b2 30		lda ($30)			lda 	(codePtr)
.9095		f0 1c		beq $90b3			beq 	_CRNoData
.9097						_CRKeepSearching:
.9097		a9 be		lda #$be			lda 	#KWD_DATA 					; scan for instruction
.9099		a2 80		ldx #$80			ldx 	#KWC_EOL
.909b		20 3b 95	jsr $953b			jsr 	ScanForward
.909e		c9 be		cmp #$be			cmp 	#KWD_DATA 					; found data ?
.90a0		f0 16		beq $90b8			beq 	_CRHaveData 				; found it
.90a2		18		clc				clc
.90a3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90a5		65 30		adc $30				adc 	codePtr
.90a7		85 30		sta $30				sta 	codePtr
.90a9		90 02		bcc $90ad			bcc 	_CREExit
.90ab		e6 31		inc $31				inc 	codePtr+1 					; carry
.90ad						_CREExit:
.90ad		a0 03		ldy #$03			ldy 	#3 							; start of line.
.90af		b2 30		lda ($30)			lda 	(codePtr)
.90b1		d0 e4		bne $9097			bne 	_CRKeepSearching
.90b3						_CRNoData:
.90b3		a9 0b		lda #$0b		lda	#11
.90b5		4c 53 96	jmp $9653		jmp	ErrorHandler
.90b8						_CRHaveData:
.90b8						_CRContinueData:
.90b8		a2 01		ldx #$01			ldx 	#1
.90ba		20 1f a5	jsr $a51f			jsr 	EvaluateValue 				; evaluate value into slot # 1
.90bd		ca		dex				dex
.90be		20 07 8c	jsr $8c07			jsr		AssignVariable 				; do the assignment
.90c1		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.90c4		b1 30		lda ($30),y			lda 	(codePtr),y
.90c6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.90c8		d0 04		bne $90ce			bne 	_CRSwapBack
.90ca		c8		iny				iny 								; consume comma
.90cb		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.90ce						_CRSwapBack:
.90ce		20 23 91	jsr $9123			jsr 	SwapDataCodePtrs			; swap them back.
.90d1		b1 30		lda ($30),y			lda 	(codePtr),y
.90d3		c8		iny				iny
.90d4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90d6		f0 a8		beq $9080			beq 	Command_Read 				; if so go round again.
.90d8		88		dey				dey 								; unpick get.
.90d9		60		rts				rts
.90da						_CRSyntax:
.90da		4c 58 a7	jmp $a758			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.90dd						RemCommand:
.90dd		b1 30		lda ($30),y			lda 	(codePtr),y
.90df		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.90e1		d0 06		bne $90e9			bne 	_RMExit
.90e3		c8		iny				iny 								; point to offset
.90e4		98		tya				tya 								; A = offset position
.90e5		38		sec				sec 								; add size +1 hence SEC
.90e6		71 30		adc ($30),y			adc 	(codePtr),y
.90e8		a8		tay				tay 								; make current position.
.90e9						_RMExit:
.90e9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.90ea						Command_REPEAT:
.90ea		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.90ec		20 b9 b6	jsr $b6b9			jsr 	StackOpen
.90ef		20 fe b6	jsr $b6fe			jsr 	STKSaveCodePosition 		; save loop position
.90f2		60		rts				rts
.90f3						Command_UNTIL:
.90f3		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.90f5		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.90f7		20 e6 b6	jsr $b6e6			jsr 	StackCheckFrame
.90fa		a2 00		ldx #$00			ldx 	#0
.90fc		20 28 a5	jsr $a528			jsr 	EvaluateNumber 				; work out the number
.90ff		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; check if zero
.9102		f0 04		beq $9108			beq 	_CULoopBack 				; if so keep looping
.9104		20 d8 b6	jsr $b6d8			jsr 	StackClose		 			; return
.9107		60		rts				rts
.9108						_CULoopBack:
.9108		20 0f b7	jsr $b70f			jsr 	STKLoadCodePosition 		; loop back
.910b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.910c						Command_Restore:
.910c		20 23 91	jsr $9123			jsr 	SwapDataCodePtrs 			; swap code and data
.910f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9111		85 30		sta $30				sta 	codePtr
.9113		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9115		85 31		sta $31				sta 	codePtr+1
.9117		20 23 91	jsr $9123			jsr 	SwapDataCodePtrs 			; put them back
.911a		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.911c		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.911f		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.9122		60		rts				rts
.9123						SwapDataCodePtrs:
.9123		da		phx				phx
.9124		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9126						_SDCPLoop:
.9126		b5 30		lda $30,x			lda 	safePtr,x
.9128		48		pha				pha
.9129		bd 13 04	lda $0413,x			lda 	dataPointer,x
.912c		95 30		sta $30,x			sta 	safePtr,x
.912e		68		pla				pla
.912f		9d 13 04	sta $0413,x			sta 	dataPointer,x
.9132		ca		dex				dex
.9133		10 f1		bpl $9126			bpl 	_SDCPLoop
.9135		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9138		8c 17 04	sty $0417			sty 	dataPointer+4
.913b		a8		tay				tay
.913c		fa		plx				plx
.913d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.913e						EOLCommand:
.913e		18		clc				clc
.913f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9141		65 30		adc $30				adc 	codePtr
.9143		85 30		sta $30				sta 	codePtr
.9145		90 02		bcc $9149			bcc 	_CREExit
.9147		e6 31		inc $31				inc 	codePtr+1 					; carry
.9149						_CREExit:
.9149		80 0b		bra $9156			bra 	RunNewLine
.914b						CommandRUN:
.914b		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear variable/stacks/etc.
.914e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9150		85 30		sta $30				sta 	codePtr
.9152		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9154		85 31		sta $31				sta 	codePtr+1
.9156						RunNewLine:
.9156		b2 30		lda ($30)			lda 	(codePtr)
.9158		f0 74		beq $91ce			beq 	CRNoProgram         		; no then END.
.915a		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.915c		9a		txs				txs
.915d						RUNCodePointerLine:
.915d		a0 02		ldy #$02			ldy 	#2 							; start of program
.915f						_CRIncMainLoop:
.915f		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.9161		f0 03		beq $9166			beq 	_NoEvents					; if zero, skip with Z flag set.
.9163		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.9166						_NoEvents:
.9166		d0 61		bne $91c9			bne 	_CRBreak
.9168		a5 01		lda $01				lda 	1 							; save I/O 0
.916a		48		pha				pha
.916b		64 01		stz $01				stz 	1 							; access I/O Page 0
.916d		38		sec				sec 								; calculate timer - LastTick
.916e		ad 59 d6	lda $d659			lda 	$D659
.9171		cd 72 07	cmp $0772			cmp 	LastTick
.9174		f0 06		beq $917c			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.9176		8d 72 07	sta $0772			sta 	LastTick 					; update last timer
.9179		20 05 a6	jsr $a605			jsr 	TickHandler 							; go do the code.
.917c						_NoFireTick:
.917c		68		pla				pla 								; restore I/O 0
.917d		85 01		sta $01				sta 	1
.917f						_CRNoBreakCheck:
.917f		c8		iny				iny									; next token
.9180						_CRMainLoop:
.9180		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9183		b1 30		lda ($30),y			lda 	(codePtr),y
.9185		10 10		bpl $9197			bpl 	_CRNotKeyword				; not a token.
.9187		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9189		b0 04		bcs $918f			bcs 	_CRIsKeyword
.918b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.918d		b0 34		bcs $91c3			bcs		_CRSyntaxError
.918f						_CRIsKeyword:
.918f		c8		iny				iny 								; consume command
.9190		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9191		aa		tax				tax 								; put in X for vector jump
.9192		20 c6 91	jsr $91c6			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9195		80 e9		bra $9180			bra 	_CRMainLoop 				; and loop round
.9197						_CRNotKeyword:
.9197		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9199		f0 c4		beq $915f			beq 	_CRIncMainLoop
.919b		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.919d		90 05		bcc $91a4			bcc 	_CRNotVariable
.919f						_CRGoLet:
.919f		20 ce 8b	jsr $8bce			jsr 	LetCommand
.91a2		80 dc		bra $9180			bra 	_CRMainLoop
.91a4						_CRNotVariable:
.91a4		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; handle @
.91a6		f0 f7		beq $919f			beq 	_CRGoLet
.91a8		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.91aa		f0 f3		beq $919f			beq 	_CRGoLet
.91ac		c9 21		cmp #$21			cmp 	#KWD_PLING
.91ae		f0 ef		beq $919f			beq 	_CRGoLet
.91b0		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.91b2		f0 09		beq $91bd			beq 	_CRGoRem
.91b4		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.91b6		d0 0b		bne $91c3			bne 	_CRSyntaxError
.91b8		20 1f 84	jsr $841f			jsr 	LabelHere
.91bb		80 c3		bra $9180			bra 	_CRMainLoop
.91bd						_CRGoRem:
.91bd		c8		iny				iny
.91be		20 dd 90	jsr $90dd			jsr 	RemCommand
.91c1		80 bd		bra $9180			bra 	_CRMainLoop
.91c3						_CRSyntaxError:
.91c3		4c 58 a7	jmp $a758			jmp 	SyntaxError
.91c6						_CRCallVector0:
.91c6		7c 64 92	jmp ($9264,x)			jmp 	(VectorSet0,x)
.91c9						_CRBreak:
.91c9		a9 01		lda #$01		lda	#1
.91cb		4c 53 96	jmp $9653		jmp	ErrorHandler
.91ce						CRNoProgram:
.91ce		4c 64 89	jmp $8964			jmp 	EndCommand
.91d1						Shift1Command:
.91d1		b1 30		lda ($30),y			lda 	(codePtr),y
.91d3		c8		iny				iny
.91d4		0a		asl a				asl 	a
.91d5		aa		tax				tax
.91d6		7c 1a 93	jmp ($931a,x)			jmp 	(VectorSet1,x)
.91d9						Shift2Command:
.91d9		b1 30		lda ($30),y			lda 	(codePtr),y
.91db		c8		iny				iny
.91dc		0a		asl a				asl 	a
.91dd		aa		tax				tax
.91de		7c 64 93	jmp ($9364,x)			jmp 	(VectorSet2,x)
.91e1						Unused1:
.91e1						Unused2:
.91e1						Unused3:
.91e1						Unused4:
.91e1		4c 58 a7	jmp $a758			jmp 	SyntaxError
>91e4								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.91e4						VectorSetPunc:
>91e4		0b 99					.word	ShiftLeft                        ; $00 <<
>91e6		f6 96					.word	BinaryCompareLessEqual           ; $01 <=
>91e8		ec 96					.word	BinaryCompareNotEqual            ; $02 <>
>91ea		58 a7					.word	SyntaxError                      ; $03 !!3
>91ec		58 a7					.word	SyntaxError                      ; $04 ><
>91ee		00 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>91f0		0e 99					.word	ShiftRight                       ; $06 >>
>91f2		58 a7					.word	SyntaxError                      ; $07 !!7
>91f4		58 a7					.word	SyntaxError                      ; $08 !!8
>91f6		58 a7					.word	SyntaxError                      ; $09 !!9
>91f8		58 a7					.word	SyntaxError                      ; $0a !!10
>91fa		58 a7					.word	SyntaxError                      ; $0b !!11
>91fc		58 a7					.word	SyntaxError                      ; $0c !!12
>91fe		58 a7					.word	SyntaxError                      ; $0d !!13
>9200		58 a7					.word	SyntaxError                      ; $0e !!14
>9202		58 a7					.word	SyntaxError                      ; $0f !!15
>9204		58 a7					.word	SyntaxError                      ; $10 @
>9206		58 a7					.word	SyntaxError                      ; $11 !!17
>9208		58 a7					.word	SyntaxError                      ; $12 !!18
>920a		58 a7					.word	SyntaxError                      ; $13 [
>920c		b7 97					.word	IntegerDivide                    ; $14 \
>920e		58 a7					.word	SyntaxError                      ; $15 ]
>9210		49 9a					.word	EorInteger                       ; $16 ^
>9212		58 a7					.word	SyntaxError                      ; $17 _
>9214		58 a7					.word	SyntaxError                      ; $18 `
>9216		58 a7					.word	SyntaxError                      ; $19 !!25
>9218		58 a7					.word	SyntaxError                      ; $1a !!26
>921a		58 a7					.word	SyntaxError                      ; $1b {
>921c		14 9a					.word	OraInteger                       ; $1c |
>921e		58 a7					.word	SyntaxError                      ; $1d }
>9220		58 a7					.word	SyntaxError                      ; $1e ~
>9222		58 a7					.word	SyntaxError                      ; $1f <7F>
>9224		58 a7					.word	SyntaxError                      ; $20
>9226		7e 9a					.word	WordIndirect                     ; $21 !
>9228		58 a7					.word	SyntaxError                      ; $22 "
>922a		58 a7					.word	SyntaxError                      ; $23 #
>922c		58 a7					.word	SyntaxError                      ; $24 $
>922e		f8 97					.word	IntegerModulus                   ; $25 %
>9230		df 99					.word	AndInteger                       ; $26 &
>9232		58 a7					.word	SyntaxError                      ; $27 '
>9234		58 a7					.word	SyntaxError                      ; $28 (
>9236		58 a7					.word	SyntaxError                      ; $29 )
>9238		66 98					.word	MulInteger                       ; $2a *
>923a		81 99					.word	AddInteger                       ; $2b +
>923c		58 a7					.word	SyntaxError                      ; $2c ,
>923e		ba 99					.word	SubInteger                       ; $2d -
>9240		58 a7					.word	SyntaxError                      ; $2e .
>9242		38 9c					.word	FDivideCommand                   ; $2f /
>9244		58 a7					.word	SyntaxError                      ; $30 0
>9246		58 a7					.word	SyntaxError                      ; $31 1
>9248		58 a7					.word	SyntaxError                      ; $32 2
>924a		58 a7					.word	SyntaxError                      ; $33 3
>924c		58 a7					.word	SyntaxError                      ; $34 4
>924e		58 a7					.word	SyntaxError                      ; $35 5
>9250		58 a7					.word	SyntaxError                      ; $36 6
>9252		58 a7					.word	SyntaxError                      ; $37 7
>9254		58 a7					.word	SyntaxError                      ; $38 8
>9256		58 a7					.word	SyntaxError                      ; $39 9
>9258		58 a7					.word	SyntaxError                      ; $3a :
>925a		58 a7					.word	SyntaxError                      ; $3b ;
>925c		d8 96					.word	BinaryCompareLess                ; $3c <
>925e		ce 96					.word	BinaryCompareEqual               ; $3d =
>9260		e2 96					.word	BinaryCompareGreater             ; $3e >
>9262		a0 9a					.word	ByteIndirect                     ; $3f ?
.9264						VectorSet0:
>9264		3e 91					.word	EOLCommand                       ; $80 !0:EOF
>9266		d1 91					.word	Shift1Command                    ; $81 !1:SH1
>9268		d9 91					.word	Shift2Command                    ; $82 !2:SH2
>926a		22 a1					.word	AbsUnary                         ; $83 ABS(
>926c		30 a1					.word	AllocUnary                       ; $84 ALLOC(
>926e		a0 a1					.word	AscUnary                         ; $85 ASC(
>9270		66 a3					.word	ChrUnary                         ; $86 CHR$(
>9272		db ab					.word	UnaryEvent                       ; $87 EVENT(
>9274		ca 96					.word	UnaryFalse                       ; $88 FALSE
>9276		ad a1					.word	FracUnary                        ; $89 FRAC(
>9278		5f 82					.word	ChrGet                           ; $8a GET$(
>927a		3b 82					.word	AscGet                           ; $8b GET(
>927c		7c a3					.word	UnaryGetDate                     ; $8c GETDATE$(
>927e		78 a3					.word	UnaryGetTime                     ; $8d GETTIME$(
>9280		65 ab					.word	UnaryHit                         ; $8e HIT(
>9282		66 82					.word	ChrInkey                         ; $8f INKEY$(
>9284		54 82					.word	AscInkey                         ; $90 INKEY(
>9286		c2 a1					.word	IntUnary                         ; $91 INT(
>9288		25 a3					.word	IsValUnary                       ; $92 ISVAL(
>928a		58 a7					.word	SyntaxError                      ; $93 ITEMCOUNT(
>928c		58 a7					.word	SyntaxError                      ; $94 ITEMGET$(
>928e		5f ac					.word	UnaryJoyB                        ; $95 JOYB(
>9290		38 ac					.word	UnaryJoyX                        ; $96 JOYX(
>9292		3b ac					.word	UnaryJoyY                        ; $97 JOYY(
>9294		93 a4					.word	Unary_Left                       ; $98 LEFT$(
>9296		d3 a1					.word	LenUnary                         ; $99 LEN(
>9298		f1 a1					.word	Unary_Max                        ; $9a MAX(
>929a		b5 a4					.word	Unary_Mid                        ; $9b MID$(
>929c		ed a1					.word	Unary_Min                        ; $9c MIN(
>929e		3c a2					.word	Unary_Not                        ; $9d NOT(
>92a0		4f a2					.word	PeekByteUnary                    ; $9e PEEK(
>92a2		5b a2					.word	PeekDUnary                       ; $9f PEEKD(
>92a4		57 a2					.word	PeekLUnary                       ; $a0 PEEKL(
>92a6		53 a2					.word	PeekWUnary                       ; $a1 PEEKW(
>92a8		16 b6					.word	UnaryPlaying                     ; $a2 PLAYING(
>92aa		88 a2					.word	Unary_Random                     ; $a3 RANDOM(
>92ac		a0 a4					.word	Unary_Right                      ; $a4 RIGHT$(
>92ae		a2 a2					.word	Unary_Rnd                        ; $a5 RND(
>92b0		fd a2					.word	SgnUnary                         ; $a6 SGN(
>92b2		d2 a3					.word	SpcUnary                         ; $a7 SPC(
>92b4		ed a3					.word	Unary_Str                        ; $a8 STR$(
>92b6		71 ac					.word	UnaryTimer                       ; $a9 TIMER(
>92b8		bf 96					.word	UnaryTrue                        ; $aa TRUE
>92ba		1b a3					.word	ValUnary                         ; $ab VAL(
>92bc		67 89					.word	ForCommand                       ; $ac FOR
>92be		aa 8a					.word	IfCommand                        ; $ad IF
>92c0		e1 91					.word	Unused1                          ; $ae PROC
>92c2		ea 90					.word	Command_REPEAT                   ; $af REPEAT
>92c4		0b 96					.word	Command_WHILE                    ; $b0 WHILE
>92c6		d3 8a					.word	EndIf                            ; $b1 ENDIF
>92c8		72 90					.word	Command_ENDPROC                  ; $b2 ENDPROC
>92ca		19 8a					.word	NextCommand                      ; $b3 NEXT
>92cc		e1 91					.word	Unused4                          ; $b4 THEN
>92ce		f3 90					.word	Command_UNTIL                    ; $b5 UNTIL
>92d0		2c 96					.word	Command_WEND                     ; $b6 WEND
>92d2		58 a7					.word	SyntaxError                      ; $b7 AT
>92d4		58 a7					.word	SyntaxError                      ; $b8 BY
>92d6		30 87					.word	CallCommand                      ; $b9 CALL
>92d8		19 a9					.word	CircleCommand                    ; $ba CIRCLE
>92da		65 87					.word	ClearCommand                     ; $bb CLEAR
>92dc		58 a7					.word	SyntaxError                      ; $bc COLOR
>92de		58 a7					.word	SyntaxError                      ; $bd COLOUR
>92e0		c8 87					.word	Command_Data                     ; $be DATA
>92e2		d0 87					.word	DimCommand                       ; $bf DIM
>92e4		e1 91					.word	Unused3                          ; $c0 DOWNTO
>92e6		cc 8a					.word	ElseCode                         ; $c1 ELSE
>92e8		58 a7					.word	SyntaxError                      ; $c2 FROM
>92ea		38 ab					.word	GfxCommand                       ; $c3 GFX
>92ec		58 a7					.word	SyntaxError                      ; $c4 HERE
>92ee		42 a9					.word	ImageCommand                     ; $c5 IMAGE
>92f0		ce 8b					.word	LetCommand                       ; $c6 LET
>92f2		94 a9					.word	LineCommand                      ; $c7 LINE
>92f4		f6 8d					.word	Command_LOCAL                    ; $c8 LOCAL
>92f6		b7 8e					.word	MCCommand                        ; $c9 MEMCOPY
>92f8		58 a7					.word	SyntaxError                      ; $ca OFF
>92fa		58 a7					.word	SyntaxError                      ; $cb ON
>92fc		58 a7					.word	SyntaxError                      ; $cc OUTLINE
>92fe		89 ab					.word	PaletteCommand                   ; $cd PALETTE
>9300		8d a9					.word	PlotCommand                      ; $ce PLOT
>9302		d7 8f					.word	PokeBCommand                     ; $cf POKE
>9304		e3 8f					.word	PokeDCommand                     ; $d0 POKED
>9306		df 8f					.word	PokeLCommand                     ; $d1 POKEL
>9308		db 8f					.word	PokeWCommand                     ; $d2 POKEW
>930a		80 90					.word	Command_Read                     ; $d3 READ
>930c		15 a9					.word	RectangleCommand                 ; $d4 RECT
>930e		dd 90					.word	RemCommand                       ; $d5 REM
>9310		58 a7					.word	SyntaxError                      ; $d6 SOLID
>9312		32 b6					.word	SoundCommand                     ; $d7 SOUND
>9314		24 a9					.word	SpriteCommand                    ; $d8 SPRITE
>9316		5e a9					.word	TextCommand                      ; $d9 TEXT
>9318		e1 91					.word	Unused2                          ; $da TO
.931a						VectorSet1:
>931a		58 a7					.word	SyntaxError                      ; $80 !0:EOF
>931c		58 a7					.word	SyntaxError                      ; $81 !1:SH1
>931e		58 a7					.word	SyntaxError                      ; $82 !2:SH2
>9320		e2 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>9322		fe 85					.word	AssertCommand                    ; $84 ASSERT
>9324		d8 aa					.word	BitmapCtrl                       ; $85 BITMAP
>9326		0e 86					.word	Command_BLoad                    ; $86 BLOAD
>9328		ae 86					.word	Command_BSave                    ; $87 BSAVE
>932a		c0 87					.word	ClearScreen                      ; $88 CLS
>932c		d9 8a					.word	Command_CPrint                   ; $89 CPRINT
>932e		8d 88					.word	Command_Dir                      ; $8a DIR
>9330		5d 89					.word	Command_Drive                    ; $8b DRIVE
>9332		64 89					.word	EndCommand                       ; $8c END
>9334		ea b5					.word	Explode                          ; $8d EXPLODE
>9336		58 a7					.word	SyntaxError                      ; $8e GO
>9338		72 8a					.word	Command_GOSUB                    ; $8f GOSUB
>933a		90 8a					.word	GotoCommand                      ; $90 GOTO
>933c		58 a7					.word	SyntaxError                      ; $91 HIMEM
>933e		d4 8a					.word	Command_Input                    ; $92 INPUT
>9340		1e 8c					.word	Command_List                     ; $93 LIST
>9342		28 8d					.word	Command_Load                     ; $94 LOAD
>9344		c7 8f					.word	NewCommand                       ; $95 NEW
>9346		c6 b5					.word	PingCommand                      ; $96 PING
>9348		e0 8a					.word	Command_Print                    ; $97 PRINT
>934a		0c 91					.word	Command_Restore                  ; $98 RESTORE
>934c		82 8a					.word	Command_RETURN                   ; $99 RETURN
>934e		4b 91					.word	CommandRUN                       ; $9a RUN
>9350		ec 93					.word	Command_Save                     ; $9b SAVE
>9352		70 94					.word	CommandSetDate                   ; $9c SETDATE
>9354		74 94					.word	CommandSetTime                   ; $9d SETTIME
>9356		de b5					.word	ShootCommand                     ; $9e SHOOT
>9358		1d ab					.word	SpritesCtrl                      ; $9f SPRITES
>935a		e4 94					.word	StopCommand                      ; $a0 STOP
>935c		b1 95					.word	Command_VERIFY                   ; $a1 VERIFY
>935e		d2 ab					.word	XGoCommand                       ; $a2 XGO
>9360		c9 ab					.word	XLoadCommand                     ; $a3 XLOAD
>9362		d2 b5					.word	ZapCommand                       ; $a4 ZAP
.9364						VectorSet2:
>9364		58 a7					.word	SyntaxError                      ; $80 !0:EOF
>9366		58 a7					.word	SyntaxError                      ; $81 !1:SH1
>9368		58 a7					.word	SyntaxError                      ; $82 !2:SH2
>936a		17 a6					.word	Assemble_adc                     ; $83 ADC
>936c		0f a6					.word	Assemble_and                     ; $84 AND
>936e		2b a6					.word	Assemble_asl                     ; $85 ASL
>9370		95 a6					.word	Assemble_bcc                     ; $86 BCC
>9372		99 a6					.word	Assemble_bcs                     ; $87 BCS
>9374		a1 a6					.word	Assemble_beq                     ; $88 BEQ
>9376		58 a6					.word	Assemble_bit                     ; $89 BIT
>9378		89 a6					.word	Assemble_bmi                     ; $8a BMI
>937a		9d a6					.word	Assemble_bne                     ; $8b BNE
>937c		85 a6					.word	Assemble_bpl                     ; $8c BPL
>937e		a5 a6					.word	Assemble_bra                     ; $8d BRA
>9380		a9 a6					.word	Assemble_brk                     ; $8e BRK
>9382		8d a6					.word	Assemble_bvc                     ; $8f BVC
>9384		91 a6					.word	Assemble_bvs                     ; $90 BVS
>9386		b1 a6					.word	Assemble_clc                     ; $91 CLC
>9388		05 a7					.word	Assemble_cld                     ; $92 CLD
>938a		c5 a6					.word	Assemble_cli                     ; $93 CLI
>938c		f5 a6					.word	Assemble_clv                     ; $94 CLV
>938e		23 a6					.word	Assemble_cmp                     ; $95 CMP
>9390		6c a6					.word	Assemble_cpx                     ; $96 CPX
>9392		67 a6					.word	Assemble_cpy                     ; $97 CPY
>9394		49 a6					.word	Assemble_dec                     ; $98 DEC
>9396		01 a7					.word	Assemble_dex                     ; $99 DEX
>9398		dd a6					.word	Assemble_dey                     ; $9a DEY
>939a		13 a6					.word	Assemble_eor                     ; $9b EOR
>939c		4e a6					.word	Assemble_inc                     ; $9c INC
>939e		11 a7					.word	Assemble_inx                     ; $9d INX
>93a0		fd a6					.word	Assemble_iny                     ; $9e INY
>93a2		80 a6					.word	Assemble_jmp                     ; $9f JMP
>93a4		7b a6					.word	Assemble_jsr                     ; $a0 JSR
>93a6		1f a6					.word	Assemble_lda                     ; $a1 LDA
>93a8		44 a6					.word	Assemble_ldx                     ; $a2 LDX
>93aa		62 a6					.word	Assemble_ldy                     ; $a3 LDY
>93ac		35 a6					.word	Assemble_lsr                     ; $a4 LSR
>93ae		15 a7					.word	Assemble_nop                     ; $a5 NOP
>93b0		0b a6					.word	Assemble_ora                     ; $a6 ORA
>93b2		c1 a6					.word	Assemble_pha                     ; $a7 PHA
>93b4		ad a6					.word	Assemble_php                     ; $a8 PHP
>93b6		09 a7					.word	Assemble_phx                     ; $a9 PHX
>93b8		c9 a6					.word	Assemble_phy                     ; $aa PHY
>93ba		d1 a6					.word	Assemble_pla                     ; $ab PLA
>93bc		b5 a6					.word	Assemble_plp                     ; $ac PLP
>93be		1d a7					.word	Assemble_plx                     ; $ad PLX
>93c0		d9 a6					.word	Assemble_ply                     ; $ae PLY
>93c2		30 a6					.word	Assemble_rol                     ; $af ROL
>93c4		3a a6					.word	Assemble_ror                     ; $b0 ROR
>93c6		bd a6					.word	Assemble_rti                     ; $b1 RTI
>93c8		cd a6					.word	Assemble_rts                     ; $b2 RTS
>93ca		27 a6					.word	Assemble_sbc                     ; $b3 SBC
>93cc		b9 a6					.word	Assemble_sec                     ; $b4 SEC
>93ce		19 a7					.word	Assemble_sed                     ; $b5 SED
>93d0		d5 a6					.word	Assemble_sei                     ; $b6 SEI
>93d2		1b a6					.word	Assemble_sta                     ; $b7 STA
>93d4		0d a7					.word	Assemble_stp                     ; $b8 STP
>93d6		3f a6					.word	Assemble_stx                     ; $b9 STX
>93d8		5d a6					.word	Assemble_sty                     ; $ba STY
>93da		53 a6					.word	Assemble_stz                     ; $bb STZ
>93dc		f1 a6					.word	Assemble_tax                     ; $bc TAX
>93de		ed a6					.word	Assemble_tay                     ; $bd TAY
>93e0		76 a6					.word	Assemble_trb                     ; $be TRB
>93e2		71 a6					.word	Assemble_tsb                     ; $bf TSB
>93e4		f9 a6					.word	Assemble_tsx                     ; $c0 TSX
>93e6		e1 a6					.word	Assemble_txa                     ; $c1 TXA
>93e8		e9 a6					.word	Assemble_txs                     ; $c2 TXS
>93ea		e5 a6					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.93ec						Command_Save:
.93ec		20 32 a5	jsr $a532			jsr 	EvaluateString 				; file name to load
.93ef		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.93f1		a5 36		lda $36				lda 	zTemp0
.93f3		20 44 81	jsr $8144			jsr 	KNLOpenFileWrite 			; open file for writing
.93f6		b0 2f		bcs $9427			bcs 	CSErrorHandler 				; error, so fail.
.93f8		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.93fb		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93fd		85 30		sta $30				sta 	codePtr
.93ff		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9401		85 31		sta $31				sta 	codePtr+1
.9403						_CSLoop:
.9403		b2 30		lda ($30)			lda 	(codePtr)
.9405		f0 17		beq $941e			beq 	_CSExit
.9407		20 4b 94	jsr $944b			jsr 	CSGetCleanLine
.940a		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.940c		85 36		sta $36				sta 	zTemp0
.940e		20 2a 94	jsr $942a			jsr 	CLWriteByteBlock 			; write the block out.
.9411		18		clc				clc
.9412		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9414		65 30		adc $30				adc 	codePtr
.9416		85 30		sta $30				sta 	codePtr
.9418		90 02		bcc $941c			bcc 	_CREExit
.941a		e6 31		inc $31				inc 	codePtr+1 					; carry
.941c						_CREExit:
.941c		80 e5		bra $9403			bra 	_CSLoop
.941e						_CSExit:
.941e		ad 6d 07	lda $076d			lda 	BasicFileStream 			; close file
.9421		20 13 82	jsr $8213			jsr 	KNLCloseFile
.9424		4c 5b 8d	jmp $8d5b			jmp 	CLComplete 					; display complete message.
.9427						CSErrorHandler:
.9427		4c 78 8d	jmp $8d78			jmp 	CLErrorHandler
.942a						CLWriteByteBlock:
.942a		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.942c		f0 1c		beq $944a			beq 	_CLWBBExit					; if so, exit
.942e		ad 6d 07	lda $076d			lda 	BasicFileStream 			; stream to write, count in X
.9431		20 d9 81	jsr $81d9			jsr 	KNLWriteBlock 				; call one write attempt
.9434		b0 f1		bcs $9427			bcs 	CSErrorHandler 				; error occurred
.9436		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.9438		8a		txa				txa 								; subtract bytes written from X, total count.
.9439		38		sec				sec
.943a		e5 38		sbc $38				sbc 	zTemp1
.943c		aa		tax				tax
.943d		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.943e		a5 36		lda $36				lda 	zTemp0
.9440		65 38		adc $38				adc 	zTemp1
.9442		85 36		sta $36				sta 	zTemp0
.9444		90 e4		bcc $942a			bcc 	CLWriteByteBlock
.9446		e6 37		inc $37				inc 	zTemp0+1
.9448		80 e0		bra $942a			bra 	CLWriteByteBlock 			; and retry write out.
.944a						_CLWBBExit:
.944a		60		rts				rts
.944b						CSGetCleanLine:
.944b		a9 00		lda #$00			lda 	#0 							; no indent.
.944d		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.9450		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9452		a0 00		ldy #$00			ldy 	#0
.9454						_CSClean:
.9454		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.9457		f0 09		beq $9462			beq 	_CSDoneClean
.9459		30 04		bmi $945f			bmi 	_CSIgnoreCharacter
.945b		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.945e		e8		inx				inx
.945f						_CSIgnoreCharacter:
.945f		c8		iny				iny
.9460		80 f2		bra $9454			bra 	_CSClean
.9462						_CSDoneClean:
.9462		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9464		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.9467		e8		inx				inx
.9468		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.946b		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.946d		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.946f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/setdatetime.asm

.9470						CommandSetDate:
.9470		a9 03		lda #$03			lda 	#3
.9472		80 02		bra $9476			bra 	CSDTMain
.9474						CommandSetTime:
.9474		a9 00		lda #$00			lda 	#0
.9476						CSDTMain:
.9476		48		pha				pha 								; save table offsets 0 or 3
.9477		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9479		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.947c		20 42 96	jsr $9642			jsr 	CheckComma
.947f		e8		inx				inx
.9480		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.9483		20 42 96	jsr $9642			jsr 	CheckComma
.9486		e8		inx				inx
.9487		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.948a		68		pla				pla 								; table offset in Y, saving Y
.948b		5a		phy				phy
.948c		a8		tay				tay
.948d		a2 00		ldx #$00			ldx 	#0 							; first number
.948f		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.9491		48		pha				pha
.9492		64 01		stz $01				stz 	1
.9494						_CSDTCopy:
.9494		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.9496		d9 d8 94	cmp $94d8,y			cmp 	RTCWMinValues,y 			; check range
.9499		90 1b		bcc $94b6			bcc 	_CSDTRange
.949b		d9 de 94	cmp $94de,y			cmp 	RTCWMaxValues,y
.949e		b0 16		bcs $94b6			bcs 	_CSDTRange
.94a0		20 bb 94	jsr $94bb			jsr 	CSDTDecimalToBCD
.94a3		da		phx				phx 								; save X
.94a4		be d2 94	ldx $94d2,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.94a7		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.94aa		fa		plx				plx 								; restore X
.94ab		e8		inx				inx 								; next number
.94ac		c8		iny				iny 								; next table entries
.94ad		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.94af		d0 e3		bne $9494			bne 	_CSDTCopy
.94b1		68		pla				pla 								; restore I/O space
.94b2		85 01		sta $01				sta 	1
.94b4		7a		ply				ply 								; restore code pos and exit.
.94b5		60		rts				rts
.94b6						_CSDTRange:
.94b6		a9 04		lda #$04		lda	#4
.94b8		4c 53 96	jmp $9653		jmp	ErrorHandler
.94bb						CSDTDecimalToBCD:
.94bb		da		phx				phx 								; 10 count in X
.94bc		a2 00		ldx #$00			ldx 	#0
.94be						_CSDTDBLoop:
.94be		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.94c0		90 05		bcc $94c7			bcc 	_CSDTDBExit
.94c2		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.94c4		e8		inx				inx 								; one more 10s.
.94c5		80 f7		bra $94be			bra 	_CSDTDBLoop
.94c7						_CSDTDBExit:
.94c7		85 36		sta $36				sta 	zTemp0 						; units
.94c9		8a		txa				txa 								; 10s x 16
.94ca		0a		asl a				asl 	a
.94cb		0a		asl a				asl 	a
.94cc		0a		asl a				asl 	a
.94cd		0a		asl a				asl 	a
.94ce		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.94d0		fa		plx				plx
.94d1		60		rts				rts
.94d2						RTCWOffset:
>94d2		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.94d8						RTCWMinValues:
>94d8		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.94de						RTCWMaxValues:
>94de		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.94e4						StopCommand:
.94e4		a9 08		lda #$08		lda	#8
.94e6		4c 53 96	jmp $9653		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.94e9						ProcedureScan:
.94e9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94eb		85 30		sta $30				sta 	codePtr
.94ed		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94ef		85 31		sta $31				sta 	codePtr+1
.94f1						_PSLoop:
.94f1		b2 30		lda ($30)			lda 	(codePtr)
.94f3		f0 42		beq $9537			beq 	_PSExit
.94f5		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.94f7		b1 30		lda ($30),y			lda 	(codePtr),y
.94f9		c9 ae		cmp #$ae			cmp 	#KWD_PROC
.94fb		d0 2d		bne $952a			bne 	_PSNext
.94fd		c8		iny				iny 								; get the address of the record to zTemp0 and
.94fe		b1 30		lda ($30),y			lda 	(codePtr),y
.9500		29 c0		and #$c0			and 	#$C0
.9502		c9 40		cmp #$40			cmp 	#$40
.9504		d0 32		bne $9538			bne 	_PSSyntax
.9506		b1 30		lda ($30),y			lda 	(codePtr),y
.9508		18		clc				clc
.9509		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.950b		85 37		sta $37				sta 	zTemp0+1
.950d		c8		iny				iny 								; LSB
.950e		b1 30		lda ($30),y			lda 	(codePtr),y
.9510		85 36		sta $36				sta 	zTemp0
.9512		c8		iny				iny 								; character after variable call.
.9513		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9514		a0 07		ldy #$07			ldy 	#7
.9516		91 36		sta ($36),y			sta 	(zTemp0),y
.9518		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.951a		a0 02		ldy #$02			ldy 	#2
.951c		91 36		sta ($36),y			sta 	(zTemp0),y
.951e		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9520						_PSCopy:
.9520		b5 30		lda $30,x			lda 	safePtr,x
.9522		c8		iny				iny
.9523		91 36		sta ($36),y			sta 	(zTemp0),y
.9525		e8		inx				inx
.9526		e0 04		cpx #$04			cpx 	#4
.9528		d0 f6		bne $9520			bne 	_PSCopy
.952a						_PSNext:
.952a		18		clc				clc
.952b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.952d		65 30		adc $30				adc 	codePtr
.952f		85 30		sta $30				sta 	codePtr
.9531		90 02		bcc $9535			bcc 	_CREExit
.9533		e6 31		inc $31				inc 	codePtr+1 					; carry
.9535						_CREExit:
.9535		80 ba		bra $94f1			bra 	_PSLoop
.9537						_PSExit:
.9537		60		rts				rts
.9538						_PSSyntax:
.9538		4c 58 a7	jmp $a758			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.953b						ScanForward:
.953b		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.953d		86 37		stx $37				stx 	zTemp0+1
.953f		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9541						_ScanLoop:
.9541		b1 30		lda ($30),y			lda 	(codePtr),y
.9543		c8		iny				iny
.9544		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9546		d0 0e		bne $9556			bne 	_ScanGoNext
.9548		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.954a		f0 04		beq $9550			beq 	_ScanMatch
.954c		c5 37		cmp $37				cmp 	zTemp0+1
.954e		d0 06		bne $9556			bne 	_ScanGoNext
.9550						_ScanMatch:
.9550		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9552		d0 01		bne $9555			bne 	_ScanNotEndEOL
.9554		88		dey				dey
.9555						_ScanNotEndEOL:
.9555		60		rts				rts
.9556						_ScanGoNext:
.9556		20 5b 95	jsr $955b			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9559		80 e6		bra $9541			bra 	_ScanLoop
.955b						ScanForwardOne:
.955b		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.955d		90 3e		bcc $959d			bcc 	_SFWExit
.955f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9561		90 18		bcc $957b			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9563		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9565		b0 2f		bcs $9596			bcs 	_ScanSkipData
.9567		c9 ac		cmp #$ac			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9569		90 32		bcc $959d			bcc 	_SFWExit 					; if not, ordinary keywords.
.956b		c9 b7		cmp #$b7			cmp 	#KWC_LAST_STRUCTURE+1
.956d		b0 2e		bcs $959d			bcs 	_SFWExit
.956f		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9571		c9 b1		cmp #$b1			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9573		b0 28		bcs $959d			bcs 	_SFWExit
.9575		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9577		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9579		80 22		bra $959d			bra 	_SFWExit
.957b						_ScanSkipOne:
.957b		c8		iny				iny 								; consume the extra one.
.957c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.957e		d0 1d		bne $959d			bne 	_SFWExit
.9580		18		clc				clc
.9581		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9583		65 30		adc $30				adc 	codePtr
.9585		85 30		sta $30				sta 	codePtr
.9587		90 02		bcc $958b			bcc 	_CREExit
.9589		e6 31		inc $31				inc 	codePtr+1 					; carry
.958b						_CREExit:
.958b		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.958d		b2 30		lda ($30)			lda 	(codePtr)
.958f		d0 0c		bne $959d			bne 	_SFWExit 					; if not zero, more to scan
.9591		a9 13		lda #$13		lda	#19
.9593		4c 53 96	jmp $9653		jmp	ErrorHandler
.9596						_ScanSkipData:
.9596		88		dey				dey 								; point at data token
.9597		c8		iny				iny 								; point to offset
.9598		98		tya				tya 								; A = offset position
.9599		38		sec				sec 								; add size +1 hence SEC
.959a		71 30		adc ($30),y			adc 	(codePtr),y
.959c		a8		tay				tay 								; make current position.
.959d						_SFWExit:
.959d		60		rts				rts
.959e						ScanGetCurrentLineStep:
.959e		64 38		stz $38				stz 	zTemp1
.95a0		a0 03		ldy #$03			ldy 	#3
.95a2						_SGCLSLoop:
.95a2		b1 30		lda ($30),y			lda 	(codePtr),y
.95a4		c8		iny				iny
.95a5		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.95a7		f0 05		beq $95ae			beq 	_SGCLSExit
.95a9		20 5b 95	jsr $955b			jsr 	ScanForwardOne
.95ac		80 f4		bra $95a2			bra 	_SGCLSLoop
.95ae						_SGCLSExit:
.95ae		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.95b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc5b						m
.95b1						Command_VERIFY:
.95b1		20 32 a5	jsr $a532			jsr 	EvaluateString 				; file name to verify
.95b4		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.95b6		a5 36		lda $36				lda 	zTemp0
.95b8		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.95bb		b0 4b		bcs $9608			bcs 	_CVErrorHandler 			; error, so fail.
.95bd		8d 6d 07	sta $076d			sta 	BasicFileStream 			; save the reading stream.
.95c0		20 c8 8d	jsr $8dc8			jsr     LoadReadByteInit            ; Init reader with the stream
.95c3		9c 6c 07	stz $076c			stz 	LoadEOFFlag 				; clear EOF Flag.
.95c6		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95c8		85 30		sta $30				sta 	codePtr
.95ca		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95cc		85 31		sta $31				sta 	codePtr+1
.95ce						_CVLoop:
.95ce		20 86 8d	jsr $8d86			jsr 	LoadReadLine 				; get next line.
.95d1		f0 27		beq $95fa			beq 	_CVExit 					; end, exit.
.95d3		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.95d6		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.95d9		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.95dc		f0 f0		beq $95ce			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.95de		a0 00		ldy #$00			ldy 	#0 							; start compare
.95e0						_CVCompareLoop:
.95e0		b1 30		lda ($30),y			lda 	(codePtr),y
.95e2		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.95e5		d0 1c		bne $9603			bne 	_CVCompareError
.95e7		c8		iny				iny
.95e8		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.95eb		d0 f3		bne $95e0			bne 	_CVCompareLoop
.95ed		18		clc				clc
.95ee		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.95f0		65 30		adc $30				adc 	codePtr
.95f2		85 30		sta $30				sta 	codePtr
.95f4		90 02		bcc $95f8			bcc 	_CREExit
.95f6		e6 31		inc $31				inc 	codePtr+1 					; carry
.95f8						_CREExit:
.95f8		80 d4		bra $95ce			bra 	_CVLoop
.95fa						_CVExit:
.95fa		ad 6d 07	lda $076d			lda 	BasicFileStream
.95fd		20 13 82	jsr $8213			jsr 	KNLCloseFile
.9600		4c 5b 8d	jmp $8d5b			jmp 	CLComplete
.9603						_CVCompareError:
.9603		a9 1b		lda #$1b		lda	#27
.9605		4c 53 96	jmp $9653		jmp	ErrorHandler
.9608						_CVErrorHandler:
.9608		4c 78 8d	jmp $8d78			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.960b						Command_WHILE:
.960b		5a		phy				phy 								; save position of the test
.960c		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.960e		20 28 a5	jsr $a528			jsr 	EvaluateNumber
.9611		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; check if zero
.9614		f0 0e		beq $9624			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9616		98		tya				tya 								; position *after* test.
.9617		7a		ply				ply 								; restore position before test, at WHILE
.9618		88		dey				dey 								; so we execute the WHILE command again.
.9619		48		pha				pha 								; push after test on the stack
.961a		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.961c		20 b9 b6	jsr $b6b9			jsr 	StackOpen
.961f		20 fe b6	jsr $b6fe			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9622		7a		ply				ply 								; restore the position *after* the test
.9623		60		rts				rts
.9624						_WHExitLoop:
.9624		68		pla				pla 								; throw post loop position
.9625		a9 b6		lda #$b6			lda 	#KWD_WEND 					; scan forward past WEND
.9627		aa		tax				tax
.9628		20 3b 95	jsr $953b			jsr 	ScanForward
.962b		60		rts				rts
.962c						Command_WEND:
.962c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.962e		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9630		20 e6 b6	jsr $b6e6			jsr 	StackCheckFrame
.9633		20 0f b7	jsr $b70f			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9636		20 d8 b6	jsr $b6d8			jsr 	StackClose		 			; erase the frame
.9639		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.963a						CheckRightBracket:
.963a		b1 30		lda ($30),y			lda 	(codePtr),y
.963c		c8		iny				iny
.963d		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.963f		d0 0f		bne $9650			bne 	CNAFail
.9641		60		rts				rts
.9642						CheckComma:
.9642		b1 30		lda ($30),y			lda 	(codePtr),y
.9644		c8		iny				iny
.9645		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9647		d0 07		bne $9650			bne 	CNAFail
.9649		60		rts				rts
.964a						CheckNextA:
.964a		d1 30		cmp ($30),y			cmp 	(codePtr),y
.964c		d0 02		bne $9650			bne 	CNAFail
.964e		c8		iny				iny 								; skip character
.964f		60		rts				rts 								; and exit
.9650						CNAFail:
.9650		4c 58 a7	jmp $a758			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9653						ErrorHandler:
.9653		a8		tay				tay 								; find the error text
.9654		f0 49		beq $969f			beq 	_EHEnd
.9656		a2 00		ldx #$00			ldx 	#0
.9658		a9 71		lda #$71			lda 	#((ErrorText) & $FF)
.965a		85 36		sta $36				sta 	0+zTemp0
.965c		a9 a7		lda #$a7			lda 	#((ErrorText) >> 8)
.965e		85 37		sta $37				sta 	1+zTemp0
.9660						_EHFind:
.9660		88		dey				dey 								; keep looking through text
.9661		f0 0e		beq $9671			beq 	_EHFound
.9663						_EHFindZero:
.9663		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9665		e6 36		inc $36				inc 	zTemp0
.9667		d0 02		bne $966b			bne 	_EHFNoCarry
.9669		e6 37		inc $37				inc 	zTemp0+1
.966b						_EHFNoCarry:
.966b		c9 00		cmp #$00			cmp 	#0
.966d		d0 f4		bne $9663			bne 	_EHFindZero
.966f		80 ef		bra $9660			bra 	_EHFind
.9671						_EHFound:
.9671		a5 36		lda $36				lda 	zTemp0 						; print message
.9673		a6 37		ldx $37				ldx 	zTemp0+1
.9675		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.9678		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.967a		b1 30		lda ($30),y			lda 	(codePtr),y
.967c		d0 05		bne $9683			bne 	_EHAtMsg
.967e		c8		iny				iny
.967f		b1 30		lda ($30),y			lda 	(codePtr),y
.9681		f0 17		beq $969a			beq 	_EHCREnd
.9683						_EHAtMsg:
.9683		a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.9685		a9 a2		lda #$a2			lda 	#_AtMsg & $FF
.9687		20 ac 96	jsr $96ac			jsr 	PrintStringXA
.968a		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.968c		b1 30		lda ($30),y			lda 	(codePtr),y
.968e		48		pha				pha
.968f		c8		iny				iny
.9690		b1 30		lda ($30),y			lda 	(codePtr),y
.9692		aa		tax				tax
.9693		68		pla				pla
.9694		20 c2 9a	jsr $9ac2			jsr 	ConvertInt16 				; convert XA to string
.9697		20 ac 96	jsr $96ac			jsr 	PrintStringXA 				; and print it.
.969a						_EHCREnd:
.969a		a9 0d		lda #$0d			lda 	#13 						; new line
.969c		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.969f						_EHEnd:
.969f		4c ad 85	jmp $85ad			jmp 	WarmStart
>96a2		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>96aa		20 00
.96ac						PrintStringXA:
.96ac		5a		phy				phy
.96ad		86 37		stx $37				stx 	zTemp0+1
.96af		85 36		sta $36				sta 	zTemp0
.96b1		a0 00		ldy #$00			ldy 	#0
.96b3						_PSXALoop:
.96b3		b1 36		lda ($36),y			lda 	(zTemp0),y
.96b5		f0 06		beq $96bd			beq 	_PSXAExit
.96b7		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.96ba		c8		iny				iny
.96bb		80 f6		bra $96b3			bra 	_PSXALoop
.96bd						_PSXAExit:
.96bd		7a		ply				ply
.96be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.96bf						UnaryTrue:
.96bf		fa		plx				plx
.96c0						ReturnTrue:
.96c0		a9 01		lda #$01			lda 	#1  						; set to 1
.96c2		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.96c5		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.96c7		95 50		sta $50,x			sta 	NSStatus,x
.96c9		60		rts				rts
.96ca						UnaryFalse:
.96ca		fa		plx				plx
.96cb						ReturnFalse:
.96cb		4c da a5	jmp $a5da			jmp 	NSMSetZero 					; set it all to zero
.96ce						BinaryCompareEqual:
.96ce		fa		plx				plx
.96cf		20 0a 97	jsr $970a			jsr 	CompareBaseCode
.96d2		c9 00		cmp #$00			cmp 	#0
.96d4		f0 ea		beq $96c0			beq 	ReturnTrue
.96d6		80 f3		bra $96cb			bra 	ReturnFalse
.96d8						BinaryCompareLess:
.96d8		fa		plx				plx
.96d9		20 0a 97	jsr $970a			jsr 	CompareBaseCode
.96dc		c9 ff		cmp #$ff			cmp 	#$FF
.96de		f0 e0		beq $96c0			beq 	ReturnTrue
.96e0		80 e9		bra $96cb			bra 	ReturnFalse
.96e2						BinaryCompareGreater:
.96e2		fa		plx				plx
.96e3		20 0a 97	jsr $970a			jsr 	CompareBaseCode
.96e6		c9 01		cmp #$01			cmp 	#1
.96e8		f0 d6		beq $96c0			beq 	ReturnTrue
.96ea		80 df		bra $96cb			bra 	ReturnFalse
.96ec						BinaryCompareNotEqual:
.96ec		fa		plx				plx
.96ed		20 0a 97	jsr $970a			jsr 	CompareBaseCode
.96f0		c9 00		cmp #$00			cmp 	#0
.96f2		d0 cc		bne $96c0			bne 	ReturnTrue
.96f4		80 d5		bra $96cb			bra 	ReturnFalse
.96f6						BinaryCompareLessEqual:
.96f6		fa		plx				plx
.96f7		20 0a 97	jsr $970a			jsr 	CompareBaseCode
.96fa		c9 01		cmp #$01			cmp 	#1
.96fc		d0 c2		bne $96c0			bne 	ReturnTrue
.96fe		80 cb		bra $96cb			bra 	ReturnFalse
.9700						BinaryCompareGreaterEqual:
.9700		fa		plx				plx
.9701		20 0a 97	jsr $970a			jsr 	CompareBaseCode
.9704		c9 ff		cmp #$ff			cmp 	#$FF
.9706		d0 b8		bne $96c0			bne 	ReturnTrue
.9708		80 c1		bra $96cb			bra 	ReturnFalse
.970a						CompareBaseCode:
.970a		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; make both values if references.
.970d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.970f		15 51		ora $51,x			ora 	NSStatus+1,x
.9711		29 10		and #$10			and 	#NSTString
.9713		d0 37		bne $974c			bne 	_CBCString 					; if so do string code, which will check if both.
.9715		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9717		15 79		ora $79,x			ora 	NSExponent+1,x
.9719		d0 34		bne $974f			bne 	_CBCFloat
.971b		b5 50		lda $50,x			lda 	NSStatus,x
.971d		15 51		ora $51,x			ora 	NSStatus+1,x
.971f		29 08		and #$08			and 	#NSTFloat
.9721		d0 2c		bne $974f			bne 	_CBCFloat
.9723		20 52 97	jsr $9752			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9726		e8		inx				inx
.9727		20 52 97	jsr $9752			jsr 	CompareFixMinusZero
.972a		ca		dex				dex
.972b		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.972d		55 51		eor $51,x			eor 	NSStatus+1,x
.972f		10 0a		bpl $973b			bpl 	_CDCSameSign
.9731		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9733		30 14		bmi $9749			bmi 	_CBCLess 					; return $FF
.9735						_CBCGreater:
.9735		a9 01		lda #$01			lda 	#1
.9737		60		rts				rts
.9738						_CBCEqual:
.9738		a9 00		lda #$00			lda 	#0
.973a		60		rts				rts
.973b						_CDCSameSign:
.973b		20 67 99	jsr $9967			jsr 	SubTopTwoStack 				; unsigned subtract
.973e		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; or the mantissa together
.9741		f0 f5		beq $9738			beq 	_CBCEqual 					; -0 == 0
.9743		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9745		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9747		10 ec		bpl $9735			bpl 	_CBCGreater
.9749						_CBCLess:
.9749		a9 ff		lda #$ff			lda 	#$FF
.974b		60		rts				rts
.974c						_CBCString:
.974c		4c d8 98	jmp $98d8			jmp 	CompareStrings
.974f						_CBCFloat:
.974f		4c 22 9c	jmp $9c22			jmp 	CompareFloat
.9752						CompareFixMinusZero:
.9752		20 fc a5	jsr $a5fc			jsr 	NSMIsZero
.9755		d0 02		bne $9759			bne 	_CFXMZNotZero
.9757		74 50		stz $50,x			stz 	NSStatus,x
.9759						_CFXMZNotZero:
.9759		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.975a						StringConcat:
.975a		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.975c		35 51		and $51,x			and 	NSStatus+1,x
.975e		29 18		and #$18			and 	#NSBTypeMask
.9760		c9 10		cmp #$10			cmp 	#NSTString
.9762		d0 50		bne $97b4			bne		_SCType
.9764		64 38		stz $38				stz 	zTemp1 						; counting total length
.9766		e8		inx				inx
.9767		20 85 97	jsr $9785			jsr 	_SCSetupZ0 					; setup for second
.976a		20 8e 97	jsr $978e			jsr 	_SCLengthZ0 				; length for second
.976d		ca		dex				dex
.976e		20 85 97	jsr $9785			jsr 	_SCSetupZ0 					; setup for first
.9771		20 8e 97	jsr $978e			jsr 	_SCLengthZ0 				; length for first
.9774		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9776		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate
.9779		20 a5 97	jsr $97a5			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.977c		e8		inx				inx
.977d		20 85 97	jsr $9785			jsr 	_SCSetupZ0 					; copy second out
.9780		20 a5 97	jsr $97a5			jsr 	_SCCopy
.9783		ca		dex				dex
.9784		60		rts				rts
.9785						_SCSetupZ0:
.9785		b5 58		lda $58,x			lda 	NSMantissa0,x
.9787		85 36		sta $36				sta 	zTemp0
.9789		b5 60		lda $60,x			lda 	NSMantissa1,x
.978b		85 37		sta $37				sta 	zTemp0+1
.978d		60		rts				rts
.978e						_SCLengthZ0:
.978e		5a		phy				phy
.978f		a0 00		ldy #$00			ldy 	#0
.9791						_SCLenLoop:
.9791		b1 36		lda ($36),y			lda 	(zTemp0),y
.9793		f0 0e		beq $97a3			beq 	_SCLExit
.9795		c8		iny				iny
.9796		e6 38		inc $38				inc 	zTemp1
.9798		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.979a		c9 fd		cmp #$fd			cmp 	#253
.979c		d0 f3		bne $9791			bne		_SCLenLoop
.979e		a9 09		lda #$09		lda	#9
.97a0		4c 53 96	jmp $9653		jmp	ErrorHandler
.97a3						_SCLExit:
.97a3		7a		ply				ply
.97a4		60		rts				rts
.97a5						_SCCopy:
.97a5		5a		phy				phy
.97a6		a0 00		ldy #$00			ldy 	#0
.97a8						_SCCopyLoop:
.97a8		b1 36		lda ($36),y			lda 	(zTemp0),y
.97aa		f0 06		beq $97b2			beq 	_SCCExit
.97ac		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.97af		c8		iny				iny
.97b0		80 f6		bra $97a8			bra 	_SCCopyLoop
.97b2						_SCCExit:
.97b2		7a		ply				ply
.97b3		60		rts				rts
.97b4						_SCType:
.97b4		4c 62 a7	jmp $a762			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.97b7						IntegerDivide:
.97b7		fa		plx				plx
.97b8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97ba		15 51		ora $51,x			ora 	NSStatus+1,x
.97bc		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97bd		0a		asl a				asl 	a
.97be		10 05		bpl $97c5			bpl 	_NotRef
.97c0		48		pha				pha
.97c1		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97c4		68		pla				pla
.97c5						_NotRef:
.97c5		0a		asl a				asl 	a
.97c6		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97c8		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ca		15 79		ora $79,x			ora 	NSExponent+1,x
.97cc		f0 03		beq $97d1			beq 	_IntegerCode 				; if clear, then we have two integers
.97ce		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.97d1						_IntegerCode:
.97d1		20 eb 97	jsr $97eb			jsr 	CheckDivideZero 			; do div zero check
.97d4		20 1d 98	jsr $981d			jsr 	Int32Divide 				; do the division
.97d7		20 ce 98	jsr $98ce			jsr 	CalculateSign 				; calculate result sign
.97da						NSMCopyPlusTwoToZero:
.97da		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.97dc		95 58		sta $58,x			sta 	NSMantissa0,x
.97de		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.97e0		95 60		sta $60,x			sta 	NSMantissa1,x
.97e2		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.97e4		95 68		sta $68,x			sta 	NSMantissa2,x
.97e6		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.97e8		95 70		sta $70,x			sta 	NSMantissa3,x
.97ea		60		rts				rts
.97eb						CheckDivideZero:
.97eb		e8		inx				inx
.97ec		20 fc a5	jsr $a5fc			jsr 	NSMIsZero
.97ef		f0 02		beq $97f3			beq 	_CDVError
.97f1		ca		dex				dex
.97f2		60		rts				rts
.97f3						_CDVError:
.97f3		a9 03		lda #$03		lda	#3
.97f5		4c 53 96	jmp $9653		jmp	ErrorHandler
.97f8						IntegerModulus:
.97f8		fa		plx				plx
.97f9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97fb		15 51		ora $51,x			ora 	NSStatus+1,x
.97fd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97fe		0a		asl a				asl 	a
.97ff		10 05		bpl $9806			bpl 	_NotRef
.9801		48		pha				pha
.9802		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9805		68		pla				pla
.9806						_NotRef:
.9806		0a		asl a				asl 	a
.9807		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9809		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.980b		15 79		ora $79,x			ora 	NSExponent+1,x
.980d		f0 03		beq $9812			beq 	_IntegerCode 				; if clear, then we have two integers
.980f		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.9812						_IntegerCode:
.9812						IntegerModulusNoCheck:
.9812		20 eb 97	jsr $97eb			jsr 	CheckDivideZero 			; do div zero check
.9815		20 1d 98	jsr $981d			jsr 	Int32Divide 				; do the division
.9818		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.981a		56 50		lsr $50,x			lsr 	NSStatus,x
.981c		60		rts				rts
.981d						Int32Divide:
.981d		48		pha				pha 								; save AXY
.981e		5a		phy				phy
.981f		20 bd a5	jsr $a5bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9822		20 d6 a5	jsr $a5d6			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9825		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9827						_I32DivideLoop:
.9827		e8		inx				inx
.9828		e8		inx				inx
.9829		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.982c		ca		dex				dex
.982d		ca		dex				dex
.982e		20 ea a5	jsr $a5ea			jsr 	NSMRotateLeft
.9831		20 5c 98	jsr $985c			jsr 	DivideCheckSubtract 		; check if subtract possible
.9834		90 02		bcc $9838			bcc 	_I32DivideNoCarryIn
.9836		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9838						_I32DivideNoCarryIn:
.9838		88		dey				dey 								; loop round till division completed.
.9839		d0 ec		bne $9827			bne 	_I32DivideLoop
.983b		7a		ply				ply 								; restore AXY and exit
.983c		68		pla				pla
.983d		60		rts				rts
.983e						Int32ShiftDivide:
.983e		48		pha				pha 								; save AY
.983f		5a		phy				phy
.9840		e8		inx				inx 								; clear S[X+2]
.9841		e8		inx				inx
.9842		20 da a5	jsr $a5da			jsr 	NSMSetZero
.9845		ca		dex				dex
.9846		ca		dex				dex
.9847		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9849						_I32SDLoop:
.9849		20 5c 98	jsr $985c			jsr 	DivideCheckSubtract 		; check if subtract possible
.984c		e8		inx				inx
.984d		e8		inx				inx
.984e		20 ea a5	jsr $a5ea			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9851		ca		dex				dex
.9852		ca		dex				dex
.9853		20 ea a5	jsr $a5ea			jsr 	NSMRotateLeft
.9856		88		dey				dey 	 							; do 31 times
.9857		d0 f0		bne $9849			bne 	_I32SDLoop
.9859		7a		ply				ply 								; restore AY and exit
.985a		68		pla				pla
.985b		60		rts				rts
.985c						DivideCheckSubtract:
.985c		20 67 99	jsr $9967			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.985f		b0 04		bcs $9865			bcs 	_DCSExit 					; if carry set, then could do, exit
.9861		20 4d 99	jsr $994d			jsr 	AddTopTwoStack 				; add it back in
.9864		18		clc				clc 								; and return False
.9865						_DCSExit:
.9865		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9866						MulInteger:
.9866		fa		plx				plx
.9867		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9869		15 51		ora $51,x			ora 	NSStatus+1,x
.986b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.986c		0a		asl a				asl 	a
.986d		10 05		bpl $9874			bpl 	_NotRef
.986f		48		pha				pha
.9870		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9873		68		pla				pla
.9874						_NotRef:
.9874		0a		asl a				asl 	a 							; put MSB of type into A:7
.9875		30 09		bmi $9880			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9877		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9879		15 79		ora $79,x			ora 	NSExponent+1,x
.987b		f0 06		beq $9883			beq 	_IntegerCode 				; if clear, then we have two integers
.987d		4c e4 9c	jmp $9ce4			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9880						_StringData:
.9880		4c 6c a7	jmp $a76c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9883						_IntegerCode:
.9883		20 90 98	jsr $9890			jsr 	MultiplyShort
.9886		c9 00		cmp #$00			cmp 	#0
.9888		f0 05		beq $988f			beq 	_MIExit
.988a		a9 04		lda #$04		lda	#4
.988c		4c 53 96	jmp $9653		jmp	ErrorHandler
.988f						_MIExit:
.988f		60		rts				rts
.9890						MultiplyShort:
.9890		5a		phy				phy 								; save Y
.9891		20 bd a5	jsr $a5bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9894		20 d6 a5	jsr $a5d6			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9897		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9899						_I32MLoop:
.9899		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.989b		15 62		ora $62,x			ora 	NSMantissa1+2,x
.989d		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.989f		15 72		ora $72,x			ora 	NSMantissa3+2,x
.98a1		f0 25		beq $98c8			beq 	_I32MExit 					; exit if zero
.98a3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.98a5		29 01		and #$01			and 	#1
.98a7		f0 0d		beq $98b6			beq 	_I32MNoAdd
.98a9		20 4d 99	jsr $994d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.98ac		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.98ae		10 06		bpl $98b6			bpl 	_I32MNoAdd
.98b0						_I32ShiftRight:
.98b0		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift S[X] right
.98b3		c8		iny				iny 								; increment shift count
.98b4		80 09		bra $98bf			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.98b6						_I32MNoAdd:
.98b6		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.98b8		70 f6		bvs $98b0			bvs 	_I32ShiftRight 				; instead.
.98ba		e8		inx				inx
.98bb		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.98be		ca		dex				dex
.98bf						_I32MShiftUpper:
.98bf		e8		inx				inx 								; shift S[X+2] right
.98c0		e8		inx				inx
.98c1		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight
.98c4		ca		dex				dex
.98c5		ca		dex				dex
.98c6		80 d1		bra $9899			bra 	_I32MLoop 					; try again.
.98c8						_I32MExit:
.98c8		20 ce 98	jsr $98ce			jsr 	CalculateSign
.98cb		98		tya				tya 								; shift in A
.98cc		7a		ply				ply 								; restore Y and exit
.98cd		60		rts				rts
.98ce						CalculateSign:
.98ce		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.98d0		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.98d2		55 51		eor $51,x			eor 	NSStatus+1,x
.98d4		0a		asl a				asl 	a 							; shift bit 7 into carry
.98d5		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.98d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.98d8						CompareStrings:
.98d8		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.98da		35 51		and $51,x			and 	NSStatus+1,x
.98dc		29 10		and #$10			and 	#NSBIsString
.98de		f0 28		beq $9908			beq 	_CSTypeError
.98e0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.98e2		85 36		sta $36				sta 	zTemp0
.98e4		b5 60		lda $60,x			lda 	NSMantissa1,x
.98e6		85 37		sta $37				sta 	zTemp0+1
.98e8		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.98ea		85 38		sta $38				sta 	zTemp1
.98ec		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.98ee		85 39		sta $39				sta 	zTemp1+1
.98f0		5a		phy				phy 								; save Y so we can access strings
.98f1		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.98f3						_CSLoop:
.98f3		c8		iny				iny
.98f4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.98f6		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.98f8		d0 06		bne $9900			bne 	_CSDifferent
.98fa		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.98fc		d0 f5		bne $98f3			bne 	_CSLoop 					; still comparing
.98fe						_CSExit:
.98fe		7a		ply				ply 								; reached end, return zero in A from EOS
.98ff		60		rts				rts
.9900						_CSDifferent:
.9900		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9902		90 fa		bcc $98fe			bcc		_CSExit
.9904		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9906		80 f6		bra $98fe			bra 	_CSExit
.9908						_CSTypeError:
.9908		4c 62 a7	jmp $a762			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.990b						ShiftLeft:
.990b		38		sec				sec 								; common code, carry determines which way.
.990c		80 01		bra $990f			bra 	ShiftMain
.990e						ShiftRight:
.990e		18		clc				clc
.990f						ShiftMain:
.990f		fa		plx				plx 								; restore X
.9910		08		php				php 								; save direction
.9911		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9913		15 51		ora $51,x			ora 	NSStatus+1,x
.9915		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9916		0a		asl a				asl 	a
.9917		10 05		bpl $991e			bpl 	_NotRef
.9919		48		pha				pha
.991a		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.991d		68		pla				pla
.991e						_NotRef:
.991e		0a		asl a				asl 	a
.991f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9921		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9923		15 79		ora $79,x			ora 	NSExponent+1,x
.9925		f0 03		beq $992a			beq 	_IntegerCode 				; if clear, then we have two integers
.9927		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.992a						_IntegerCode:
.992a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.992c		29 e0		and #$e0			and 	#$E0
.992e		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9930		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9932		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9934		d0 12		bne $9948			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9936						_SMLoop:
.9936		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9938		30 11		bmi $994b			bmi 	_SMExit 					; exit if done.
.993a		28		plp				plp 								; restore direction setting
.993b		08		php				php
.993c		90 05		bcc $9943			bcc 	_SMRight
.993e		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; shift left if CS
.9941		80 f3		bra $9936			bra 	_SMLoop
.9943						_SMRight:
.9943		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift right if CC
.9946		80 ee		bra $9936			bra 	_SMLoop
.9948						_SMExit0:
.9948		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; return zero.
.994b						_SMExit:
.994b		28		plp				plp 								; throw direction
.994c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.994d						AddTopTwoStack:
.994d		18		clc				clc
.994e		b5 58		lda $58,x			lda		NSMantissa0,x
.9950		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9952		95 58		sta $58,x			sta 	NSMantissa0,x
.9954		b5 60		lda $60,x			lda		NSMantissa1,x
.9956		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9958		95 60		sta $60,x			sta 	NSMantissa1,x
.995a		b5 68		lda $68,x			lda		NSMantissa2,x
.995c		75 69		adc $69,x			adc 		NSMantissa2+1,x
.995e		95 68		sta $68,x			sta 	NSMantissa2,x
.9960		b5 70		lda $70,x			lda		NSMantissa3,x
.9962		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9964		95 70		sta $70,x			sta 	NSMantissa3,x
.9966		60		rts				rts
.9967						SubTopTwoStack:
.9967		38		sec				sec
.9968		b5 58		lda $58,x			lda		NSMantissa0,x
.996a		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.996c		95 58		sta $58,x			sta 	NSMantissa0,x
.996e		b5 60		lda $60,x			lda		NSMantissa1,x
.9970		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9972		95 60		sta $60,x			sta 	NSMantissa1,x
.9974		b5 68		lda $68,x			lda		NSMantissa2,x
.9976		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9978		95 68		sta $68,x			sta 	NSMantissa2,x
.997a		b5 70		lda $70,x			lda		NSMantissa3,x
.997c		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.997e		95 70		sta $70,x			sta 	NSMantissa3,x
.9980		60		rts				rts
.9981						AddInteger:
.9981		fa		plx				plx
.9982		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9984		15 51		ora $51,x			ora 	NSStatus+1,x
.9986		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9987		0a		asl a				asl 	a
.9988		10 05		bpl $998f			bpl 	_NotRef
.998a		48		pha				pha
.998b		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.998e		68		pla				pla
.998f						_NotRef:
.998f		0a		asl a				asl 	a 							; put MSB of type into A:7
.9990		30 09		bmi $999b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9992		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9994		15 79		ora $79,x			ora 	NSExponent+1,x
.9996		f0 06		beq $999e			beq 	_IntegerCode 				; if clear, then we have two integers
.9998		4c 94 9b	jmp $9b94			jmp 	FloatingPointAdd 							; otherwise at least one float.
.999b						_StringData:
.999b		4c 5a 97	jmp $975a			jmp 	StringConcat							; at least one string - don't know both are strings.
.999e						_IntegerCode:
.999e						AddCode:
.999e		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.99a0		55 51		eor $51,x			eor 	NSStatus+1,x
.99a2		10 a9		bpl $994d			bpl 	AddTopTwoStack
.99a4		20 67 99	jsr $9967			jsr 	SubTopTwoStack 				; do a physical subtraction
.99a7		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.99a9		10 07		bpl $99b2			bpl 	_AddExit
.99ab		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.99ad		95 50		sta $50,x			sta 	NSStatus,x
.99af		20 a3 a5	jsr $a5a3			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.99b2						_AddExit:
.99b2		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; check for -0
.99b5		d0 02		bne $99b9			bne 	_AddNonZero
.99b7		74 50		stz $50,x			stz 	NSStatus,x
.99b9						_AddNonZero:
.99b9		60		rts				rts
.99ba						SubInteger:
.99ba		fa		plx				plx
.99bb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99bd		15 51		ora $51,x			ora 	NSStatus+1,x
.99bf		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99c0		0a		asl a				asl 	a
.99c1		10 05		bpl $99c8			bpl 	_NotRef
.99c3		48		pha				pha
.99c4		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99c7		68		pla				pla
.99c8						_NotRef:
.99c8		0a		asl a				asl 	a 							; put MSB of type into A:7
.99c9		30 09		bmi $99d4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99cb		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99cd		15 79		ora $79,x			ora 	NSExponent+1,x
.99cf		f0 06		beq $99d7			beq 	_IntegerCode 				; if clear, then we have two integers
.99d1		4c 99 9b	jmp $9b99			jmp 	FloatingPointSub 							; otherwise at least one float.
.99d4						_StringData:
.99d4		4c 6c a7	jmp $a76c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99d7						_IntegerCode:
.99d7		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.99d9		49 80		eor #$80			eor 	#$80
.99db		95 51		sta $51,x			sta 	NSStatus+1,x
.99dd		80 bf		bra $999e			bra 	AddCode 					; and do the same code as add.
.99df						AndInteger:
.99df		fa		plx				plx
.99e0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99e2		15 51		ora $51,x			ora 	NSStatus+1,x
.99e4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99e5		0a		asl a				asl 	a
.99e6		10 05		bpl $99ed			bpl 	_NotRef
.99e8		48		pha				pha
.99e9		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99ec		68		pla				pla
.99ed						_NotRef:
.99ed		0a		asl a				asl 	a
.99ee		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99f0		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99f2		15 79		ora $79,x			ora 	NSExponent+1,x
.99f4		f0 03		beq $99f9			beq 	_IntegerCode 				; if clear, then we have two integers
.99f6		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.99f9						_IntegerCode:
.99f9		b5 58		lda $58,x			lda		NSMantissa0,x
.99fb		35 59		and $59,x			and 		NSMantissa0+1,x
.99fd		95 58		sta $58,x			sta 	NSMantissa0,x
.99ff		b5 60		lda $60,x			lda		NSMantissa1,x
.9a01		35 61		and $61,x			and 		NSMantissa1+1,x
.9a03		95 60		sta $60,x			sta 	NSMantissa1,x
.9a05		b5 68		lda $68,x			lda		NSMantissa2,x
.9a07		35 69		and $69,x			and 		NSMantissa2+1,x
.9a09		95 68		sta $68,x			sta 	NSMantissa2,x
.9a0b		b5 70		lda $70,x			lda		NSMantissa3,x
.9a0d		35 71		and $71,x			and 		NSMantissa3+1,x
.9a0f		95 70		sta $70,x			sta 	NSMantissa3,x
.9a11		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a13		60		rts				rts
.9a14						OraInteger:
.9a14		fa		plx				plx
.9a15		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a17		15 51		ora $51,x			ora 	NSStatus+1,x
.9a19		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a1a		0a		asl a				asl 	a
.9a1b		10 05		bpl $9a22			bpl 	_NotRef
.9a1d		48		pha				pha
.9a1e		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a21		68		pla				pla
.9a22						_NotRef:
.9a22		0a		asl a				asl 	a
.9a23		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a25		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a27		15 79		ora $79,x			ora 	NSExponent+1,x
.9a29		f0 03		beq $9a2e			beq 	_IntegerCode 				; if clear, then we have two integers
.9a2b		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.9a2e						_IntegerCode:
.9a2e		b5 58		lda $58,x			lda		NSMantissa0,x
.9a30		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9a32		95 58		sta $58,x			sta 	NSMantissa0,x
.9a34		b5 60		lda $60,x			lda		NSMantissa1,x
.9a36		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9a38		95 60		sta $60,x			sta 	NSMantissa1,x
.9a3a		b5 68		lda $68,x			lda		NSMantissa2,x
.9a3c		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9a3e		95 68		sta $68,x			sta 	NSMantissa2,x
.9a40		b5 70		lda $70,x			lda		NSMantissa3,x
.9a42		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9a44		95 70		sta $70,x			sta 	NSMantissa3,x
.9a46		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a48		60		rts				rts
.9a49						EorInteger:
.9a49		fa		plx				plx
.9a4a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a4c		15 51		ora $51,x			ora 	NSStatus+1,x
.9a4e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a4f		0a		asl a				asl 	a
.9a50		10 05		bpl $9a57			bpl 	_NotRef
.9a52		48		pha				pha
.9a53		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a56		68		pla				pla
.9a57						_NotRef:
.9a57		0a		asl a				asl 	a
.9a58		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a5a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a5c		15 79		ora $79,x			ora 	NSExponent+1,x
.9a5e		f0 03		beq $9a63			beq 	_IntegerCode 				; if clear, then we have two integers
.9a60		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.9a63						_IntegerCode:
.9a63		b5 58		lda $58,x			lda		NSMantissa0,x
.9a65		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9a67		95 58		sta $58,x			sta 	NSMantissa0,x
.9a69		b5 60		lda $60,x			lda		NSMantissa1,x
.9a6b		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9a6d		95 60		sta $60,x			sta 	NSMantissa1,x
.9a6f		b5 68		lda $68,x			lda		NSMantissa2,x
.9a71		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9a73		95 68		sta $68,x			sta 	NSMantissa2,x
.9a75		b5 70		lda $70,x			lda		NSMantissa3,x
.9a77		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9a79		95 70		sta $70,x			sta 	NSMantissa3,x
.9a7b		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9a7d		60		rts				rts
.9a7e						WordIndirect:
.9a7e		fa		plx				plx
.9a7f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a81		15 51		ora $51,x			ora 	NSStatus+1,x
.9a83		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a84		0a		asl a				asl 	a
.9a85		10 05		bpl $9a8c			bpl 	_NotRef
.9a87		48		pha				pha
.9a88		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a8b		68		pla				pla
.9a8c						_NotRef:
.9a8c		0a		asl a				asl 	a
.9a8d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a8f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a91		15 79		ora $79,x			ora 	NSExponent+1,x
.9a93		f0 03		beq $9a98			beq 	_IntegerCode 				; if clear, then we have two integers
.9a95		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.9a98						_IntegerCode:
.9a98		20 9e 99	jsr $999e			jsr 	AddCode 					; add the two values
.9a9b		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9a9d		95 50		sta $50,x			sta 	NSStatus,x
.9a9f		60		rts				rts
.9aa0						ByteIndirect:
.9aa0		fa		plx				plx
.9aa1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9aa3		15 51		ora $51,x			ora 	NSStatus+1,x
.9aa5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9aa6		0a		asl a				asl 	a
.9aa7		10 05		bpl $9aae			bpl 	_NotRef
.9aa9		48		pha				pha
.9aaa		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9aad		68		pla				pla
.9aae						_NotRef:
.9aae		0a		asl a				asl 	a
.9aaf		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ab1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ab3		15 79		ora $79,x			ora 	NSExponent+1,x
.9ab5		f0 03		beq $9aba			beq 	_IntegerCode 				; if clear, then we have two integers
.9ab7		4c 62 a7	jmp $a762			jmp 	TypeError 					; anything else, type mismatch.
.9aba						_IntegerCode:
.9aba		20 9e 99	jsr $999e			jsr 	AddCode 					; add the two values
.9abd		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9abf		95 50		sta $50,x			sta 	NSStatus,x
.9ac1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9ac2						ConvertInt16:
.9ac2		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9ac4		86 60		stx $60				stx 	NSMantissa1
.9ac6		64 68		stz $68				stz 	NSMantissa2
.9ac8		64 70		stz $70				stz 	NSMantissa3
.9aca		64 50		stz $50				stz 	NSStatus 					; positive integer
.9acc		a2 00		ldx #$00			ldx 	#0 							; stack level
.9ace		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9ad0		80 00		bra $9ad2			bra 	ConvertInt32
.9ad2						ConvertInt32:
.9ad2		5a		phy				phy
.9ad3		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9ad5		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9ad7		10 08		bpl $9ae1			bpl 	_CI32NotNeg
.9ad9		48		pha				pha
.9ada		a9 2d		lda #$2d			lda 	#'-'
.9adc		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9adf		c8		iny				iny
.9ae0		68		pla				pla
.9ae1						_CI32NotNeg:
.9ae1		20 ef 9a	jsr $9aef			jsr 	_CI32DivideConvert 			; recursive conversion
.9ae4		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9ae6		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9ae9		7a		ply				ply
.9aea		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9aec		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9aee		60		rts				rts
.9aef						_CI32DivideConvert:
.9aef		e8		inx				inx 								; write to next slot up
.9af0		20 dc a5	jsr $a5dc			jsr 	NSMSetByte 		 			; write the base out.
.9af3		ca		dex				dex
.9af4		20 1d 98	jsr $981d			jsr 	Int32Divide 				; divide
.9af7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9af9		48		pha				pha
.9afa		20 da 97	jsr $97da			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9afd		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; is it zero ?
.9b00		f0 05		beq $9b07			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9b02		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9b04		20 ef 9a	jsr $9aef			jsr 	_CI32DivideConvert 			; and recusrively call.
.9b07						_CI32NoRecurse:
.9b07		68		pla				pla 								; remainder
.9b08		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9b0a		90 02		bcc $9b0e			bcc 	_CI32NotHex
.9b0c		69 26		adc #$26			adc 	#6+32
.9b0e						_CI32NotHex:
.9b0e		69 30		adc #$30			adc 	#48
.9b10		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9b13		c8		iny				iny
.9b14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9b15						PrecedenceLevel:
>9b15		04					.byte	 4	; $00 <<
>9b16		02					.byte	 2	; $01 <=
>9b17		02					.byte	 2	; $02 <>
>9b18		00					.byte	 0	; $03 !!3
>9b19		00					.byte	 0	; $04 ><
>9b1a		02					.byte	 2	; $05 >=
>9b1b		04					.byte	 4	; $06 >>
>9b1c		00					.byte	 0	; $07 !!7
>9b1d		00					.byte	 0	; $08 !!8
>9b1e		00					.byte	 0	; $09 !!9
>9b1f		00					.byte	 0	; $0a !!10
>9b20		00					.byte	 0	; $0b !!11
>9b21		00					.byte	 0	; $0c !!12
>9b22		00					.byte	 0	; $0d !!13
>9b23		00					.byte	 0	; $0e !!14
>9b24		00					.byte	 0	; $0f !!15
>9b25		00					.byte	 0	; $10 @
>9b26		00					.byte	 0	; $11 !!17
>9b27		00					.byte	 0	; $12 !!18
>9b28		00					.byte	 0	; $13 [
>9b29		04					.byte	 4	; $14 \
>9b2a		00					.byte	 0	; $15 ]
>9b2b		01					.byte	 1	; $16 ^
>9b2c		00					.byte	 0	; $17 _
>9b2d		00					.byte	 0	; $18 `
>9b2e		00					.byte	 0	; $19 !!25
>9b2f		00					.byte	 0	; $1a !!26
>9b30		00					.byte	 0	; $1b {
>9b31		01					.byte	 1	; $1c |
>9b32		00					.byte	 0	; $1d }
>9b33		00					.byte	 0	; $1e ~
>9b34		00					.byte	 0	; $1f <7F>
>9b35		00					.byte	 0	; $20
>9b36		05					.byte	 5	; $21 !
>9b37		00					.byte	 0	; $22 "
>9b38		00					.byte	 0	; $23 #
>9b39		05					.byte	 5	; $24 $
>9b3a		04					.byte	 4	; $25 %
>9b3b		01					.byte	 1	; $26 &
>9b3c		00					.byte	 0	; $27 '
>9b3d		00					.byte	 0	; $28 (
>9b3e		00					.byte	 0	; $29 )
>9b3f		04					.byte	 4	; $2a *
>9b40		03					.byte	 3	; $2b +
>9b41		00					.byte	 0	; $2c ,
>9b42		03					.byte	 3	; $2d -
>9b43		00					.byte	 0	; $2e .
>9b44		04					.byte	 4	; $2f /
>9b45		00					.byte	 0	; $30 0
>9b46		00					.byte	 0	; $31 1
>9b47		00					.byte	 0	; $32 2
>9b48		00					.byte	 0	; $33 3
>9b49		00					.byte	 0	; $34 4
>9b4a		00					.byte	 0	; $35 5
>9b4b		00					.byte	 0	; $36 6
>9b4c		00					.byte	 0	; $37 7
>9b4d		00					.byte	 0	; $38 8
>9b4e		00					.byte	 0	; $39 9
>9b4f		00					.byte	 0	; $3a :
>9b50		00					.byte	 0	; $3b ;
>9b51		02					.byte	 2	; $3c <
>9b52		02					.byte	 2	; $3d =
>9b53		02					.byte	 2	; $3e >
>9b54		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9b55						EvaluateExpressionAt0:
.9b55		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9b57						EvaluateExpression:
.9b57		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9b59						EvaluateExpressionAtPrecedence:
.9b59		48		pha				pha 								; save precedence level
.9b5a		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm 				; evaluate term into level X.
.9b5d		68		pla				pla 								; restore precedence level.
.9b5e						_EXPRLoop:
.9b5e		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9b60		b1 30		lda ($30),y			lda 	(codePtr),y
.9b62		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9b64		b0 25		bcs $9b8b			bcs 	_EXPRExit
.9b66		da		phx				phx 								; read the operator precedence
.9b67		aa		tax				tax
.9b68		bd 15 9b	lda $9b15,x			lda 	PrecedenceLevel,x
.9b6b		fa		plx				plx
.9b6c		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9b6e		f0 1b		beq $9b8b			beq 	_EXPRExit
.9b70		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9b72		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9b74		c5 37		cmp $37				cmp 	zTemp0+1
.9b76		b0 13		bcs $9b8b			bcs		_EXPRExit 					; if current >= operator exit
.9b78		48		pha				pha 								; save current precedence.
.9b79		b1 30		lda ($30),y			lda 	(codePtr),y
.9b7b		c8		iny				iny
.9b7c		48		pha				pha
.9b7d		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9b7f		e8		inx				inx 								; work out the right hand side.
.9b80		20 59 9b	jsr $9b59			jsr 	EvaluateExpressionAtPrecedence
.9b83		ca		dex				dex
.9b84		68		pla				pla 								; get operator, call the code.
.9b85		20 8e 9b	jsr $9b8e			jsr 	_EXPRCaller
.9b88		68		pla				pla 								; restore precedence level
.9b89		80 d3		bra $9b5e			bra 	_EXPRLoop 					; and go round.
.9b8b						_EXPRExit:
.9b8b		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9b8d		60		rts				rts
.9b8e						_EXPRCaller:
.9b8e		da		phx				phx 								; save on stack, first thing is to restore it
.9b8f		0a		asl a				asl 	a 							; double so can use vectors into X
.9b90		aa		tax				tax
.9b91		7c e4 91	jmp ($91e4,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9b94						FloatingPointAdd:
.9b94		20 0a 9d	jsr $9d0a			jsr 	FloatPrepare 				; prepare for floats
.9b97		80 09		bra $9ba2			bra 	FloatAdd
.9b99						FloatingPointSub:
.9b99		20 0a 9d	jsr $9d0a			jsr 	FloatPrepare 				; prepare for floats
.9b9c						FloatSubtract:
.9b9c		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9b9e		49 80		eor #$80			eor 	#$80
.9ba0		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9ba2						FloatAdd:
.9ba2		48		pha				pha
.9ba3		5a		phy				phy
.9ba4		20 19 9d	jsr $9d19			jsr 	NSNormalise 				; normalise S[X]
.9ba7		f0 51		beq $9bfa			beq 	_FAReturn1
.9ba9		e8		inx				inx 								; normalise S[X+1]
.9baa		20 19 9d	jsr $9d19			jsr 	NSNormalise
.9bad		ca		dex				dex
.9bae		c9 00		cmp #$00			cmp 	#0
.9bb0		f0 60		beq $9c12			beq 	_FAExit 					; if so, just return A
.9bb2		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9bb4		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9bb6		f0 18		beq $9bd0			beq 	_FAExponentsEqual
.9bb8		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9bba		a8		tay				tay
.9bbb		38		sec				sec 								; do a signed comparison of the exponents.
.9bbc		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9bbe		50 02		bvc $9bc2			bvc 	_FANoSignedChange
.9bc0		49 80		eor #$80			eor 	#$80
.9bc2						_FANoSignedChange:
.9bc2		29 80		and #$80			and 	#$80
.9bc4		10 02		bpl $9bc8			bpl 	_FAHaveMax
.9bc6		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9bc8						_FAHaveMax:
.9bc8		20 15 9c	jsr $9c15			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9bcb		e8		inx				inx
.9bcc		20 15 9c	jsr $9c15			jsr 	_FAShiftToExponent
.9bcf		ca		dex				dex
.9bd0						_FAExponentsEqual:
.9bd0		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9bd2		55 51		eor $51,x			eor 	NSStatus+1,x
.9bd4		30 0e		bmi $9be4			bmi 	_FADifferentSigns
.9bd6		20 4d 99	jsr $994d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9bd9		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9bdb		10 35		bpl $9c12			bpl 	_FAExit 					; if no, we are done.
.9bdd		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9be0		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9be2		80 2e		bra $9c12			bra 	_FAExit
.9be4						_FADifferentSigns:
.9be4		20 67 99	jsr $9967			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9be7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9be9		10 06		bpl $9bf1			bpl 	_FACheckZero 				; if no, check for -0
.9beb		20 9c a5	jsr $a59c			jsr 	NSMNegate 					; netate result
.9bee		20 a3 a5	jsr $a5a3			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9bf1						_FACheckZero:
.9bf1		20 fc a5	jsr $a5fc			jsr 	NSMIsZero	 				; check for -0
.9bf4		d0 1c		bne $9c12			bne 	_FAExit
.9bf6		74 50		stz $50,x			stz 	NSStatus,x
.9bf8		80 18		bra $9c12			bra 	_FAExit
.9bfa						_FAReturn1:
.9bfa		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9bfc		95 58		sta $58,x			sta 	NSMantissa0,x
.9bfe		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9c00		95 60		sta $60,x			sta 	NSMantissa1,x
.9c02		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9c04		95 68		sta $68,x			sta 	NSMantissa2,x
.9c06		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9c08		95 70		sta $70,x			sta 	NSMantissa3,x
.9c0a		b5 79		lda $79,x			lda 	NSExponent+1,x
.9c0c		95 78		sta $78,x			sta 	NSExponent,x
.9c0e		b5 51		lda $51,x			lda 	NSStatus+1,x
.9c10		95 50		sta $50,x			sta 	NSStatus,x
.9c12						_FAExit:
.9c12		7a		ply				ply
.9c13		68		pla				pla
.9c14		60		rts				rts
.9c15						_FAShiftToExponent:
.9c15						_FAShiftToExponent2:
.9c15		98		tya				tya 								; compare Y to exponent
.9c16		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9c18		f0 07		beq $9c21			beq 	_FASEExit 					; exit if so.
.9c1a		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight	 			; shift the mantissa right
.9c1d		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9c1f		80 f4		bra $9c15			bra 	_FAShiftToExponent2
.9c21						_FASEExit:
.9c21		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9c22						CompareFloat:
.9c22		20 9c 9b	jsr $9b9c			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9c25		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9c27		29 f8		and #$f8			and 	#$F8
.9c29		15 68		ora $68,x			ora 	NSMantissa2,x
.9c2b		15 70		ora $70,x			ora 	NSMantissa3,x
.9c2d		f0 08		beq $9c37			beq 	_FCExit 					; zero, so approximately identical
.9c2f		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9c31		34 50		bit $50,x			bit 	NSStatus,x
.9c33		10 02		bpl $9c37			bpl 	_FCExit
.9c35						_FCNegative:
.9c35		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9c37						_FCExit:
.9c37		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9c38						FDivideCommand:
.9c38		fa		plx				plx	 								; restore stack position
.9c39		20 0a 9d	jsr $9d0a			jsr 	FloatPrepare 				; prepare for floats
.9c3c						FloatDivide:
.9c3c		48		pha				pha
.9c3d		e8		inx				inx
.9c3e		20 19 9d	jsr $9d19			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c41		ca		dex				dex
.9c42		c9 00		cmp #$00			cmp 	#0
.9c44		f0 1d		beq $9c63			beq 	_FDZero
.9c46		20 19 9d	jsr $9d19			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c49		f0 16		beq $9c61			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9c4b		20 3e 98	jsr $983e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9c4e		20 da 97	jsr $97da			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9c51		20 19 9d	jsr $9d19			jsr		NSNormalise 				; renormalise
.9c54		20 ce 98	jsr $98ce			jsr 	CalculateSign 				; calculate result sign
.9c57		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9c59		38		sec				sec
.9c5a		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9c5c		38		sec				sec
.9c5d		e9 1e		sbc #$1e			sbc 	#30
.9c5f		95 78		sta $78,x			sta 	NSExponent,x
.9c61						_FDExit:
.9c61		68		pla				pla
.9c62		60		rts				rts
.9c63						_FDZero:
.9c63		a9 03		lda #$03		lda	#3
.9c65		4c 53 96	jmp $9653		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9c68						FloatFractionalPart:
.9c68		5a		phy				phy
.9c69		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9c6b		29 7f		and #$7f			and 	#$7F
.9c6d		95 50		sta $50,x			sta 	NSStatus,x
.9c6f		20 19 9d	jsr $9d19			jsr 	NSNormalise
.9c72		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9c74		38		sec				sec
.9c75		e9 e0		sbc #$e0			sbc 	#$E0
.9c77		90 29		bcc $9ca2			bcc 	_FFPExit 					; already fractional
.9c79		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9c7b		b0 22		bcs $9c9f			bcs 	_FFPZero
.9c7d		a8		tay				tay 								; put count to do in Y
.9c7e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9c80		20 a4 9c	jsr $9ca4			jsr 	_FFPPartial
.9c83		95 70		sta $70,x			sta 	NSMantissa3,x
.9c85		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c87		20 a4 9c	jsr $9ca4			jsr 	_FFPPartial
.9c8a		95 68		sta $68,x			sta 	NSMantissa2,x
.9c8c		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c8e		20 a4 9c	jsr $9ca4			jsr 	_FFPPartial
.9c91		95 60		sta $60,x			sta 	NSMantissa1,x
.9c93		b5 58		lda $58,x			lda 	NSMantissa0,x
.9c95		20 a4 9c	jsr $9ca4			jsr 	_FFPPartial
.9c98		95 58		sta $58,x			sta 	NSMantissa0,x
.9c9a		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; zeroed check.
.9c9d		d0 03		bne $9ca2			bne 	_FFPExit
.9c9f						_FFPZero:
.9c9f		20 da a5	jsr $a5da			jsr 	NSMSetZero
.9ca2						_FFPExit:
.9ca2		7a		ply				ply
.9ca3		60		rts				rts
.9ca4						_FFPPartial:
.9ca4		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9ca6		f0 17		beq $9cbf			beq 	_FFFPPExit
.9ca8		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9caa		b0 0c		bcs $9cb8			bcs 	_FFFPPWholeByte
.9cac		5a		phy				phy
.9cad						_FFFPPLeft:
.9cad		0a		asl a				asl 	a
.9cae		88		dey				dey
.9caf		d0 fc		bne $9cad			bne 	_FFFPPLeft
.9cb1		7a		ply				ply
.9cb2						_FFFPPRight:
.9cb2		4a		lsr a				lsr 	a
.9cb3		88		dey				dey
.9cb4		d0 fc		bne $9cb2			bne 	_FFFPPRight
.9cb6		80 07		bra $9cbf			bra 	_FFFPPExit
.9cb8						_FFFPPWholeByte:
.9cb8		98		tya				tya 								; subtract 8 from count
.9cb9		38		sec				sec
.9cba		e9 08		sbc #$08			sbc 	#8
.9cbc		a8		tay				tay
.9cbd		a9 00		lda #$00			lda 	#0 							; and clear all
.9cbf						_FFFPPExit:
.9cbf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9cc0						FloatIntegerPart:
.9cc0		48		pha				pha
.9cc1		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9cc3		f0 1d		beq $9ce2			beq 	_FIPExit 					; if so do nothing
.9cc5		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; is it zero ?
.9cc8		f0 15		beq $9cdf			beq 	_FIPZero 					; if so return zero.
.9cca		20 19 9d	jsr $9d19			jsr 	NSNormalise 				; normalise
.9ccd		f0 10		beq $9cdf			beq 	_FIPZero 					; normalised to zero, exit zero
.9ccf						_FIPShift:
.9ccf		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9cd1		10 07		bpl $9cda			bpl 	_FIPCheckZero
.9cd3		20 f3 a5	jsr $a5f3			jsr 	NSMShiftRight 				; shift mantissa right
.9cd6		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9cd8		80 f5		bra $9ccf			bra 	_FIPShift
.9cda						_FIPCheckZero:
.9cda		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; avoid -0 problem
.9cdd		d0 03		bne $9ce2			bne 	_FIPExit 					; set to zero if mantissa zero.
.9cdf						_FIPZero:
.9cdf		20 da a5	jsr $a5da			jsr 	NSMSetZero
.9ce2						_FIPExit:
.9ce2		68		pla				pla
.9ce3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9ce4						FloatingPointMultiply:
.9ce4		20 0a 9d	jsr $9d0a			jsr 	FloatPrepare 				; prepare for floats
.9ce7						FloatMultiply:
.9ce7		48		pha				pha
.9ce8		20 19 9d	jsr $9d19			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9ceb		f0 18		beq $9d05			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9ced		e8		inx				inx
.9cee		20 19 9d	jsr $9d19			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9cf1		ca		dex				dex
.9cf2		c9 00		cmp #$00			cmp 	#0
.9cf4		f0 0c		beq $9d02			beq 	_FDSetZero
.9cf6		20 90 98	jsr $9890			jsr 	MultiplyShort 				; calculate the result.
.9cf9		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9cfb		18		clc				clc
.9cfc		75 79		adc $79,x			adc 	NSExponent+1,x
.9cfe		95 78		sta $78,x			sta 	NSExponent,x
.9d00		80 03		bra $9d05			bra 	_FDExit
.9d02						_FDSetZero:
.9d02		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; return 0
.9d05						_FDExit:
.9d05		20 19 9d	jsr $9d19			jsr 	NSNormalise 				; normalise the result
.9d08		68		pla				pla
.9d09		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9d0a						FloatPrepare:
.9d0a		20 15 9e	jsr $9e15			jsr 	DereferenceTopTwo 			; dereference the top two values
.9d0d		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9d0f		15 51		ora $51,x			ora 	NSStatus+1,x
.9d11		29 10		and #$10			and 	#NSBIsString
.9d13		d0 01		bne $9d16			bne 	_FDType
.9d15		60		rts				rts
.9d16						_FDType:
.9d16		4c 62 a7	jmp $a762			jmp 	TypeError
.9d19						NSNormalise:
.9d19		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9d1b		29 80		and #$80			and 	#$80
.9d1d		09 08		ora #$08			ora 	#NSTFloat
.9d1f		95 50		sta $50,x			sta 	NSStatus,x
.9d21		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; if zero exit
.9d24		d0 07		bne $9d2d			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9d26		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9d28		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9d2a		a9 00		lda #$00			lda 	#0 							; set Z flag
.9d2c		60		rts				rts
.9d2d						_NSNormaliseOptimise:
.9d2d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9d2f		d0 19		bne $9d4a			bne 	_NSNormaliseLoop
.9d31		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9d33		30 15		bmi $9d4a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9d35		95 70		sta $70,x			sta 	NSMantissa3,x
.9d37		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d39		95 68		sta $68,x			sta 	NSMantissa2,x
.9d3b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d3d		95 60		sta $60,x			sta 	NSMantissa1,x
.9d3f		74 58		stz $58,x			stz 	NSMantissa0,x
.9d41		b5 78		lda $78,x			lda 	NSExponent,x
.9d43		38		sec				sec
.9d44		e9 08		sbc #$08			sbc 	#8
.9d46		95 78		sta $78,x			sta 	NSExponent,x
.9d48		80 e3		bra $9d2d			bra 	_NSNormaliseOptimise
.9d4a						_NSNormaliseLoop:
.9d4a		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9d4c		70 07		bvs $9d55			bvs 	_NSNExit 					; exit if so with Z flag clear
.9d4e		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; shift mantissa left
.9d51		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9d53		80 f5		bra $9d4a			bra 	_NSNormaliseLoop
.9d55						_NSNExit:
.9d55		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9d57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d58						AssignNumber:
.9d58		5a		phy				phy
.9d59		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d5b		85 36		sta $36				sta 	zTemp0
.9d5d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d5f		85 37		sta $37				sta 	zTemp0+1
.9d61		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9d63		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d65		95 50		sta $50,x			sta 	NSStatus,x
.9d67		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d69		c9 08		cmp #$08			cmp 	#NSTFloat
.9d6b		f0 24		beq $9d91			beq 	_ANFloat
.9d6d		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9d6f		f0 03		beq $9d74			beq		_ANNotFloat
.9d71		4c 5d a7	jmp $a75d			jmp 	RangeError					; if it is, report an error.
.9d74						_ANNotFloat:
.9d74		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d76		29 03		and #$03			and 	#3
.9d78		d0 05		bne $9d7f			bne 	_ANByteWord
.9d7a		20 9c 9d	jsr $9d9c			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d7d		80 1b		bra $9d9a			bra 	_ANExit
.9d7f						_ANByteWord:
.9d7f		48		pha				pha 								; save count
.9d80		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9d82		92 36		sta ($36)			sta 	(zTemp0)
.9d84		68		pla				pla
.9d85		c9 01		cmp #$01			cmp	 	#1
.9d87		f0 11		beq $9d9a			beq 	_ANExit
.9d89		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9d8b		a0 01		ldy #$01			ldy 	#1
.9d8d		91 36		sta ($36),y			sta 	(zTemp0),y
.9d8f		80 09		bra $9d9a			bra 	_ANExit
.9d91						_ANFloat:
.9d91		20 9c 9d	jsr $9d9c			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d94		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9d96		a0 04		ldy #$04			ldy 	#4
.9d98		91 36		sta ($36),y			sta 	(zTemp0),y
.9d9a						_ANExit:
.9d9a		7a		ply				ply
.9d9b		60		rts				rts
.9d9c						_ANCopy4PackSign:
.9d9c		a0 03		ldy #$03			ldy 	#3
.9d9e		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9da0		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9da2		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9da4		91 36		sta ($36),y			sta 	(zTemp0),y
.9da6		88		dey				dey
.9da7		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9da9		91 36		sta ($36),y			sta 	(zTemp0),y
.9dab		88		dey				dey
.9dac		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9dae		91 36		sta ($36),y			sta 	(zTemp0),y
.9db0		88		dey				dey
.9db1		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9db3		91 36		sta ($36),y			sta 	(zTemp0),y
.9db5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9db6						AssignString:
.9db6		5a		phy				phy
.9db7		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9db9		85 38		sta $38				sta 	zTemp1
.9dbb		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9dbd		85 39		sta $39				sta 	zTemp1+1
.9dbf		b5 58		lda $58,x			lda 	NSMantissa0,x
.9dc1		85 36		sta $36				sta 	zTemp0
.9dc3		b5 60		lda $60,x			lda 	NSMantissa1,x
.9dc5		85 37		sta $37				sta 	zTemp0+1
.9dc7		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9dc9		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dcb		f0 23		beq $9df0			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9dcd		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9dce		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9dd0		e9 02		sbc #$02			sbc 	#2
.9dd2		85 3c		sta $3c				sta 	zsTemp
.9dd4		a0 01		ldy #$01			ldy 	#1
.9dd6		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dd8		e9 00		sbc #$00			sbc 	#0
.9dda		85 3d		sta $3d				sta 	zsTemp+1
.9ddc		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9dde						_ASGetLength:
.9dde		c8		iny				iny
.9ddf		b1 38		lda ($38),y			lda 	(zTemp1),y
.9de1		d0 fb		bne $9dde			bne 	_ASGetLength
.9de3		98		tya				tya 								; is this length <= current length
.9de4		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9de6		90 1e		bcc $9e06			bcc 	_ASCopyString
.9de8		f0 1c		beq $9e06			beq 	_ASCopyString
.9dea		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9dec		a0 01		ldy #$01			ldy 	#1
.9dee		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9df0						_ASNewStringRequired:
.9df0		e8		inx				inx 								; concrete the new string.
.9df1		20 2c b7	jsr $b72c			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9df4		ca		dex				dex
.9df5		18		clc				clc
.9df6		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9df8		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9dfa		92 36		sta ($36)			sta 	(zTemp0)
.9dfc		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9dfe		69 00		adc #$00			adc 	#0
.9e00		a0 01		ldy #$01			ldy 	#1
.9e02		91 36		sta ($36),y			sta 	(zTemp0),y
.9e04		80 0d		bra $9e13			bra 	_ASExit
.9e06						_ASCopyString:
.9e06		a0 00		ldy #$00			ldy 	#0
.9e08						_ASCopyLoop:
.9e08		b1 38		lda ($38),y			lda 	(zTemp1),y
.9e0a		c8		iny				iny
.9e0b		c8		iny				iny
.9e0c		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e0e		88		dey				dey
.9e0f		c9 00		cmp #$00			cmp 	#0
.9e11		d0 f5		bne $9e08			bne 	_ASCopyLoop
.9e13						_ASExit:
.9e13		7a		ply				ply
.9e14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e15						DereferenceTopTwo:
.9e15		e8		inx				inx
.9e16		20 1a 9e	jsr $9e1a			jsr 	Dereference 				; deref x+1
.9e19		ca		dex				dex  								; falls through to deref x
.9e1a						Dereference:
.9e1a		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9e1c		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9e1e		f0 48		beq $9e68			beq 	_DRFExit 					; not a reference, so exit.
.9e20		5a		phy				phy
.9e21		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e23		85 36		sta $36				sta 	zTemp0
.9e25		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e27		85 37		sta $37				sta 	zTemp0+1
.9e29		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9e2b		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e2d		95 58		sta $58,x			sta 	NSMantissa0,x
.9e2f		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9e31		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e33		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e35		f0 0e		beq $9e45			beq 	_DRFDereferenceTwo
.9e37		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e39		f0 2f		beq $9e6a			beq 	_DRFFull
.9e3b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e3d		29 03		and #$03			and 	#3
.9e3f		f0 29		beq $9e6a			beq 	_DRFFull 					; the whole word
.9e41		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e43		f0 06		beq $9e4b			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e45						_DRFDereferenceTwo:
.9e45		a0 01		ldy #$01			ldy 	#1
.9e47		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e49		95 60		sta $60,x			sta 	NSMantissa1,x
.9e4b						_DRFClear23:
.9e4b		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e4d		74 70		stz $70,x			stz 	NSMantissa3,x
.9e4f		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9e51		29 18		and #$18			and 	#NSBTypeMask
.9e53		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9e55		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e57		d0 0e		bne $9e67			bne 	_DRFNotString
.9e59		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9e5b		15 60		ora $60,x			ora 	NSMantissa1,x
.9e5d		d0 08		bne $9e67			bne 	_DRFNotString
.9e5f		a9 69		lda #$69			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e61		95 58		sta $58,x			sta 	NSMantissa0,x
.9e63		a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e65		95 60		sta $60,x			sta 	NSMantissa1,x
.9e67						_DRFNotString
.9e67		7a		ply				ply 								; restore Y and exit
.9e68						_DRFExit:
.9e68		60		rts				rts
.9e69						_DRFNullString:
>9e69		00						.byte 	0
.9e6a						_DRFFull:
.9e6a		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e6c		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e6e		95 60		sta $60,x			sta 	NSMantissa1,x
.9e70		c8		iny				iny
.9e71		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e73		95 68		sta $68,x			sta 	NSMantissa2,x
.9e75		c8		iny				iny
.9e76		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e78		95 70		sta $70,x			sta 	NSMantissa3,x
.9e7a		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9e7c		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9e7e		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9e80		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9e82		f0 05		beq $9e89			beq 	_DRFNoExponent
.9e84		c8		iny				iny 								; if not, read the exponent as well.
.9e85		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e87		95 78		sta $78,x			sta 	NSExponent,x
.9e89						_DRFNoExponent:
.9e89		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9e8b		10 0a		bpl $9e97			bpl 	_DRFExit2 					; if not, then exit.
.9e8d		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9e8f		95 70		sta $70,x			sta 	NSMantissa3,x
.9e91		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9e93		09 80		ora #$80			ora 	#NSBIsNegative
.9e95		95 50		sta $50,x			sta 	NSStatus,x
.9e97						_DRFExit2:
.9e97		7a		ply				ply
.9e98		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9e99						EncodeNumberStart:
.9e99		38		sec				sec
.9e9a		80 01		bra $9e9d			bra 	EncodeNumberContinue+1
.9e9c						EncodeNumberContinue:
.9e9c		18		clc				clc
.9e9d						EncodeNumber:
.9e9d		08		php				php 								; save reset flag.
.9e9e		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ea0		f0 12		beq $9eb4			beq 	_ENIsOkay
.9ea2		c9 30		cmp #$30			cmp 	#"0"
.9ea4		90 04		bcc $9eaa			bcc 	_ENBadNumber
.9ea6		c9 3a		cmp #$3a			cmp 	#"9"+1
.9ea8		90 0a		bcc $9eb4			bcc 	_ENIsOkay
.9eaa						_ENBadNumber:
.9eaa		28		plp				plp 								; throw saved reset
.9eab		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9eae		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9eb0		f0 7b		beq $9f2d			beq 	_ENConstructFinal
.9eb2						_ENFail:
.9eb2		18		clc				clc 								; not allowed
.9eb3		60		rts				rts
.9eb4						_ENIsOkay:
.9eb4		28		plp				plp 								; are we restarting
.9eb5		90 15		bcc $9ecc			bcc 	_ENNoRestart
.9eb7						_ENStartEncode:
.9eb7		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9eb9		f0 0c		beq $9ec7			beq 	_ENFirstDP
.9ebb		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9ebd		20 dc a5	jsr $a5dc			jsr 	NSMSetByte 					; in single byte mode.
.9ec0		a9 01		lda #$01			lda 	#ESTA_Low
.9ec2						_ENExitChange:
.9ec2		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9ec5		38		sec				sec
.9ec6		60		rts				rts
.9ec7						_ENFirstDP:
.9ec7		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; clear integer part
.9eca		80 3c		bra $9f08			bra 	_ESTASwitchFloat			; go straight to float and exi
.9ecc						_ENNoRestart:
.9ecc		48		pha				pha 								; save digit or DP on stack.
.9ecd		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9ed0		c9 01		cmp #$01			cmp 	#ESTA_Low
.9ed2		f0 09		beq $9edd			beq  	_ESTALowState
.9ed4		c9 02		cmp #$02			cmp 	#ESTA_High
.9ed6		f0 26		beq $9efe			beq 	_ESTAHighState
.9ed8		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9eda		f0 38		beq $9f14			beq 	_ESTADecimalState
>9edc		db						.byte 	$DB 						; causes a break in the emulator
.9edd						_ESTALowState:
.9edd		68		pla				pla 								; get value back
.9ede		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9ee0		f0 26		beq $9f08			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9ee2		29 0f		and #$0f			and 	#15 						; make digit
.9ee4		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9ee7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9ee9		0a		asl a				asl 	a
.9eea		0a		asl a				asl 	a
.9eeb		75 58		adc $58,x			adc 	NSMantissa0,x
.9eed		0a		asl a				asl 	a
.9eee		6d 06 04	adc $0406			adc 	digitTemp
.9ef1		95 58		sta $58,x			sta 	NSMantissa0,x
.9ef3		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9ef5		90 05		bcc $9efc			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9ef7		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9ef9		8d 05 04	sta $0405			sta 	encodeState
.9efc						_ESTANoSwitch:
.9efc		38		sec				sec
.9efd		60		rts				rts
.9efe						_ESTAHighState:
.9efe		68		pla				pla 								; get value back
.9eff		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f01		f0 05		beq $9f08			beq 	_ESTASwitchFloat
.9f03		20 61 9f	jsr $9f61			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f06		38		sec				sec
.9f07		60		rts				rts
.9f08						_ESTASwitchFloat:
.9f08		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9f0b		e8		inx				inx 								; zero the decimal additive.
.9f0c		20 da a5	jsr $a5da			jsr 	NSMSetZero
.9f0f		ca		dex				dex
.9f10		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f12		80 ae		bra $9ec2			bra 	_ENExitChange
.9f14						_ESTADecimalState:
.9f14		68		pla				pla 								; digit.
.9f15		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f17		f0 99		beq $9eb2			beq 	_ENFail
.9f19		e8		inx				inx 								; put digit into fractional part of X+1
.9f1a		20 61 9f	jsr $9f61			jsr 	ESTAShiftDigitIntoMantissa
.9f1d		ca		dex				dex
.9f1e		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9f21		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9f24		c9 0b		cmp #$0b			cmp 	#11
.9f26		f0 02		beq $9f2a			beq 	_ESTADSFail
.9f28		38		sec				sec
.9f29		60		rts				rts
.9f2a						_ESTADSFail:
.9f2a		4c 5d a7	jmp $a75d			jmp 	RangeError
.9f2d						_ENConstructFinal:
.9f2d		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9f30		f0 2d		beq $9f5f			beq 	_ENCFExit 					; no decimals
.9f32		5a		phy				phy
.9f33		0a		asl a				asl 	a 							; x 4 and CLC
.9f34		0a		asl a				asl 	a
.9f35		6d 07 04	adc $0407			adc 	decimalCount
.9f38		a8		tay				tay
.9f39		b9 1c a7	lda $a71c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f3c		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9f3e		b9 1d a7	lda $a71d,y			lda 	DecimalScalarTable-5+1,y
.9f41		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9f43		b9 1e a7	lda $a71e,y			lda 	DecimalScalarTable-5+2,y
.9f46		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9f48		b9 1f a7	lda $a71f,y			lda 	DecimalScalarTable-5+3,y
.9f4b		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9f4d		b9 20 a7	lda $a720,y			lda 	DecimalScalarTable-5+4,y
.9f50		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9f52		a9 08		lda #$08			lda 	#NSTFloat
.9f54		95 52		sta $52,x			sta 	NSStatus+2,x
.9f56		7a		ply				ply
.9f57		e8		inx				inx 								; multiply decimal const by decimal scalar
.9f58		20 e7 9c	jsr $9ce7			jsr 	FloatMultiply
.9f5b		ca		dex				dex
.9f5c		20 a2 9b	jsr $9ba2			jsr 	FloatAdd 					; add to integer part.
.9f5f						_ENCFExit:
.9f5f		18		clc				clc 								; reject the digit.
.9f60		60		rts				rts
.9f61						ESTAShiftDigitIntoMantissa:
.9f61		29 0f		and #$0f			and 	#15 						; save digit
.9f63		48		pha				pha
.9f64		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9f66		48		pha				pha
.9f67		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f69		48		pha				pha
.9f6a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f6c		48		pha				pha
.9f6d		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f6f		48		pha				pha
.9f70		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; x 2
.9f73		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; x 4
.9f76		18		clc				clc 								; pop mantissa and add
.9f77		68		pla				pla
.9f78		75 58		adc $58,x			adc 	NSMantissa0,x
.9f7a		95 58		sta $58,x			sta 	NSMantissa0,x
.9f7c		68		pla				pla
.9f7d		75 60		adc $60,x			adc 	NSMantissa1,x
.9f7f		95 60		sta $60,x			sta 	NSMantissa1,x
.9f81		68		pla				pla
.9f82		75 68		adc $68,x			adc 	NSMantissa2,x
.9f84		95 68		sta $68,x			sta 	NSMantissa2,x
.9f86		68		pla				pla
.9f87		75 70		adc $70,x			adc 	NSMantissa3,x
.9f89		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9f8b		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; x 10
.9f8e		68		pla				pla 								; add digit
.9f8f		18		clc				clc
.9f90		75 58		adc $58,x			adc 	NSMantissa0,x
.9f92		95 58		sta $58,x			sta 	NSMantissa0,x
.9f94		90 0a		bcc $9fa0			bcc 	_ESTASDExit
.9f96		f6 60		inc $60,x			inc 	NSMantissa1,x
.9f98		d0 06		bne $9fa0			bne 	_ESTASDExit
.9f9a		f6 68		inc $68,x			inc 	NSMantissa2,x
.9f9c		d0 02		bne $9fa0			bne 	_ESTASDExit
.9f9e		f6 70		inc $70,x			inc 	NSMantissa3,x
.9fa0						_ESTASDExit:
.9fa0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9fa1						EvaluateTerm:
.9fa1		b1 30		lda ($30),y			lda 	(codePtr),y
.9fa3		30 18		bmi $9fbd			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fa5		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9fa7		b0 6c		bcs $a015			bcs 	_ETVariable
.9fa9		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9fab		90 6b		bcc $a018			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9fad		c9 3a		cmp #$3a			cmp 	#'9'+1
.9faf		b0 67		bcs $a018			bcs 	_ETPuncUnary
.9fb1		20 99 9e	jsr $9e99			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9fb4						_ETNumber:
.9fb4		c8		iny				iny 								; keep encoding until we have the numbers
.9fb5		b1 30		lda ($30),y			lda 	(codePtr),y
.9fb7		20 9c 9e	jsr $9e9c			jsr 	EncodeNumberContinue
.9fba		b0 f8		bcs $9fb4			bcs 	_ETNumber 					; go back if accepted.
.9fbc		60		rts				rts
.9fbd						_ETCheckUnary:
.9fbd		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9fbf		f0 3f		beq $a000			beq 	_ETString
.9fc1		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9fc3		f0 12		beq $9fd7			beq 	_ETHexConstant
.9fc5		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9fc7		90 0b		bcc $9fd4			bcc 	_ETSyntaxError
.9fc9		c9 ac		cmp #$ac			cmp 	#KWC_LAST_UNARY+1
.9fcb		b0 07		bcs $9fd4			bcs 	_ETSyntaxError
.9fcd		da		phx				phx 								; push X on the stack
.9fce		0a		asl a				asl 	a 							; put vector x 2 into X
.9fcf		aa		tax				tax
.9fd0		c8		iny				iny 								; consume unary function token
.9fd1		7c 64 92	jmp ($9264,x)			jmp 	(VectorSet0,x) 				; and do it.
.9fd4						_ETSyntaxError:
.9fd4		4c 58 a7	jmp $a758			jmp 	SyntaxError
.9fd7						_ETHexConstant:
.9fd7		c8		iny				iny 								; skip #
.9fd8		c8		iny				iny 								; skip count
.9fd9		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; clear result
.9fdc						_ETHLoop:
.9fdc		b1 30		lda ($30),y			lda 	(codePtr),y
.9fde		c8		iny				iny 								; and consume
.9fdf		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9fe1		f0 1c		beq $9fff			beq 	_ETHExit
.9fe3		48		pha				pha 								; save on stack.
.9fe4		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; x 2
.9fe7		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; x 4
.9fea		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; x 8
.9fed		20 e9 a5	jsr $a5e9			jsr 	NSMShiftLeft 				; x 16
.9ff0		68		pla				pla 								; ASCII
.9ff1		c9 41		cmp #$41			cmp 	#'A'
.9ff3		90 02		bcc $9ff7			bcc 	_ETHNotChar
.9ff5		e9 07		sbc #$07			sbc 	#7
.9ff7						_ETHNotChar:
.9ff7		29 0f		and #$0f			and 	#15 						; digit now
.9ff9		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9ffb		95 58		sta $58,x			sta 	NSMantissa0,x
.9ffd		80 dd		bra $9fdc			bra 	_ETHLoop 					; go round.
.9fff						_ETHExit:
.9fff		60		rts				rts
.a000						_ETString:
.a000		c8		iny				iny 								; look at length
.a001		b1 30		lda ($30),y			lda 	(codePtr),y
.a003		48		pha				pha
.a004		c8		iny				iny 								; first character
.a005		20 54 ad	jsr $ad54			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a008		68		pla				pla 								; restore count and save
.a009		85 36		sta $36				sta 	zTemp0
.a00b		98		tya				tya 								; add length to Y to skip it.
.a00c		18		clc				clc
.a00d		65 36		adc $36				adc 	zTemp0
.a00f		a8		tay				tay
.a010		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a012		95 50		sta $50,x			sta 	NSStatus,x
.a014		60		rts				rts
.a015						_ETVariable:
.a015		4c 6a a0	jmp $a06a			jmp 	VariableHandler
.a018						_ETPuncUnary:
.a018		c8		iny				iny 								; consume the unary character
.a019		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a01b		f0 2b		beq $a048			beq 	_ETUnaryNegate
.a01d		c9 b7		cmp #$b7			cmp 	#KWD_AT 					; @ reference -> constant
.a01f		f0 36		beq $a057			beq 	_ETDereference
.a021		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a023		f0 3e		beq $a063			beq 	_ETParenthesis
.a025		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a027		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a029		f0 06		beq $a031			beq 	_ETIndirection
.a02b		e6 36		inc $36				inc 	zTemp0
.a02d		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a02f		d0 a3		bne $9fd4			bne 	_ETSyntaxError
.a031						_ETIndirection:
.a031		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a033		1a		inc a				inc 	a
.a034		48		pha				pha
.a035		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm				; evaluate the term
.a038		20 1a 9e	jsr $9e1a			jsr 	Dereference 				; dereference it.
.a03b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a03d		d0 06		bne $a045			bne 	_ETTypeMismatch
.a03f		68		pla				pla 								; indirection 1-2
.a040		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a042		95 50		sta $50,x			sta 	NSStatus,x
.a044		60		rts				rts
.a045						_ETTypeMismatch:
.a045		4c 62 a7	jmp $a762			jmp 	TypeError
.a048						_ETUnaryNegate:
.a048		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm				; evaluate the term
.a04b		20 1a 9e	jsr $9e1a			jsr 	Dereference 				; dereference it.
.a04e		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a050		29 10		and #$10			and 	#NSTString
.a052		d0 f1		bne $a045			bne 	_ETTypeMismatch
.a054		4c 9c a5	jmp $a59c			jmp 	NSMNegate  					; just toggles the sign bit.
.a057						_ETDereference:
.a057		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm				; evaluate the term
.a05a		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a05c		29 20		and #$20			and 	#NSBIsReference
.a05e		f0 e5		beq $a045			beq 	_ETTypeMismatch
.a060		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a062		60		rts				rts
.a063						_ETParenthesis:
.a063		20 57 9b	jsr $9b57			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a066		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; check for )
.a069		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a06a						VariableHandler:
.a06a		b1 30		lda ($30),y			lda 	(codePtr),y
.a06c		18		clc				clc
.a06d		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a06f		85 37		sta $37				sta 	zTemp0+1
.a071		c8		iny				iny
.a072		b1 30		lda ($30),y			lda 	(codePtr),y
.a074		85 36		sta $36				sta 	zTemp0
.a076		c8		iny				iny
.a077		18		clc				clc									; copy variable address+3 to mantissa
.a078		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a07a		95 58		sta $58,x			sta 	NSMantissa0,x
.a07c		a5 37		lda $37				lda 	zTemp0+1
.a07e		69 00		adc #$00			adc 	#0
.a080		95 60		sta $60,x			sta 	NSMantissa1,x
.a082		74 68		stz $68,x			stz 	NSMantissa2,x
.a084		74 70		stz $70,x			stz 	NSMantissa3,x
.a086		74 78		stz $78,x			stz 	NSExponent,x
.a088		5a		phy				phy
.a089		a0 02		ldy #$02			ldy 	#2 							; read type
.a08b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a08d		7a		ply				ply
.a08e		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a090		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a092		95 50		sta $50,x			sta 	NSStatus,x
.a094		29 04		and #$04			and 	#NSBIsArray
.a096		d0 01		bne $a099			bne 	_VHArray
.a098		60		rts				rts
.a099						_VHArray:
.a099		e8		inx				inx
.a09a		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a09d		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a09f		95 51		sta $51,x			sta 	NSStatus+1,x
.a0a1		b1 30		lda ($30),y			lda 	(codePtr),y
.a0a3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0a5		d0 06		bne $a0ad			bne 	_VHNoSecondIndex
.a0a7		c8		iny				iny 								; skip the comma
.a0a8		e8		inx				inx
.a0a9		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a0ac		ca		dex				dex
.a0ad						_VHNoSecondIndex:
.a0ad		ca		dex				dex 								; set X back.
.a0ae		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; and check the right bracket.
.a0b1		5a		phy				phy 								; save position
.a0b2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a0b4		85 3e		sta $3e				sta 	zaTemp
.a0b6		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0b8		85 3f		sta $3f				sta 	zaTemp+1
.a0ba		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a0bc		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0be		f0 5d		beq $a11d			beq 	_VHBadArray
.a0c0		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a0c2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0c4		f0 02		beq $a0c8			beq 	_VHHas2Mask
.a0c6		a9 ff		lda #$ff			lda 	#$FF
.a0c8						_VHHas2Mask:
.a0c8		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a0ca		f0 4c		beq $a118			beq 	_VHBadIndex
.a0cc		0a		asl a				asl 	a 							; carry will be set if a second index
.a0cd		90 08		bcc $a0d7			bcc 	_VHCheckFirstIndex
.a0cf		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a0d1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0d3		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a0d5		90 41		bcc $a118			bcc 	_VHBadIndex
.a0d7						_VHCheckFirstIndex:
.a0d7		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a0d9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0db		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a0dd		90 39		bcc $a118			bcc 	_VHBadIndex
.a0df		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a0e1		64 37		stz $37				stz 	zTemp0+1
.a0e3		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a0e5		30 0e		bmi $a0f5			bmi 	_VHNoMultiply
.a0e7		da		phx				phx
.a0e8		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a0ea		48		pha				pha
.a0eb		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a0ed		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a0ef		1a		inc a				inc 	a 							; add 1 for zero base
.a0f0		fa		plx				plx
.a0f1		20 85 a5	jsr $a585			jsr 	Multiply8x8 				; calculate -> Z0
.a0f4		fa		plx				plx
.a0f5						_VHNoMultiply:
.a0f5		18		clc				clc
.a0f6		a5 36		lda $36				lda 	zTemp0
.a0f8		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a0fa		85 36		sta $36				sta 	zTemp0
.a0fc		a5 37		lda $37				lda 	zTemp0+1
.a0fe		69 00		adc #$00			adc 	#0
.a100		85 37		sta $37				sta 	zTemp0+1
.a102		b5 50		lda $50,x			lda 	NSStatus,x
.a104		20 6b 88	jsr $886b			jsr 	ScaleByBaseType
.a107		18		clc				clc
.a108		b2 3e		lda ($3e)			lda 	(zaTemp)
.a10a		65 36		adc $36				adc 	zTemp0
.a10c		95 58		sta $58,x			sta 	NSMantissa0,x
.a10e		a0 01		ldy #$01			ldy 	#1
.a110		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a112		65 37		adc $37				adc 	zTemp0+1
.a114		95 60		sta $60,x			sta 	NSMantissa1,x
.a116		7a		ply				ply 								; restore position
.a117		60		rts				rts
.a118						_VHBadIndex:
.a118		a9 17		lda #$17		lda	#23
.a11a		4c 53 96	jmp $9653		jmp	ErrorHandler
.a11d						_VHBadArray:
.a11d		a9 18		lda #$18		lda	#24
.a11f		4c 53 96	jmp $9653		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a122						AbsUnary:
.a122		fa		plx				plx 								; restore stack pos
.a123		20 28 a5	jsr $a528			jsr 	EvaluateNumber 				; get a float or int
.a126		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a129		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a12b		29 7f		and #$7f			and 	#$7F
.a12d		95 50		sta $50,x			sta 	NSStatus,x
.a12f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a130						AllocUnary:
.a130		fa		plx				plx 								; restore stack pos
.a131		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger		; get bytes required.
.a134		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a137		da		phx				phx 								; save X/Y
.a138		5a		phy				phy
.a139		8a		txa				txa 								; copy X into Y
.a13a		a8		tay				tay
.a13b		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a13e		aa		tax				tax
.a13f		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a142		20 4f a1	jsr $a14f			jsr 	AllocateXABytes 			; allocate memory
.a145		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a148		8a		txa				txa 	 							; typing is 16 bit integer.
.a149		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a14c		7a		ply				ply
.a14d		fa		plx				plx
.a14e		60		rts				rts
.a14f						AllocateXABytes:
.a14f		5a		phy				phy
.a150		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a153		84 36		sty $36				sty 	zTemp0
.a155		5a		phy				phy
.a156		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a159		84 37		sty $37				sty 	zTemp0+1
.a15b		5a		phy				phy
.a15c		18		clc				clc 								; add to low memory pointer
.a15d		6d 08 04	adc $0408			adc 	lowMemPtr
.a160		8d 08 04	sta $0408			sta 	lowMemPtr
.a163		8a		txa				txa
.a164		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a167		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a16a		b0 2f		bcs $a19b			bcs 	CISSMemory
.a16c		20 8d a1	jsr $a18d			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a16f						_ClearMemory:
.a16f		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a172		c5 36		cmp $36				cmp 	zTemp0
.a174		d0 07		bne $a17d			bne 	_CMClearNext
.a176		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a179		c5 37		cmp $37				cmp 	zTemp0+1
.a17b		f0 0c		beq $a189			beq 	_CMExit
.a17d						_CMClearNext:
.a17d		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a17f		92 36		sta ($36)			sta 	(zTemp0)
.a181		e6 36		inc $36				inc 	zTemp0
.a183		d0 ea		bne $a16f			bne 	_ClearMemory
.a185		e6 37		inc $37				inc		zTemp0+1
.a187		80 e6		bra $a16f			bra 	_ClearMemory
.a189						_CMExit:
.a189		fa		plx				plx
.a18a		68		pla				pla
.a18b		7a		ply				ply
.a18c		60		rts				rts
.a18d						CheckIdentifierStringSpace:
.a18d		48		pha				pha
.a18e		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a191		18		clc				clc
.a192		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a194		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a197		b0 02		bcs $a19b			bcs 	CISSMemory
.a199		68		pla				pla
.a19a		60		rts				rts
.a19b						CISSMemory:
.a19b		a9 06		lda #$06		lda	#6
.a19d		4c 53 96	jmp $9653		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a1a0						AscUnary:
.a1a0		fa		plx				plx 								; restore stack pos
.a1a1		20 32 a5	jsr $a532			jsr 	EvaluateString 				; get a string
.a1a4		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a1a6		20 dc a5	jsr $a5dc			jsr 	NSMSetByte 					; ASC("") will return zero.
.a1a9		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a1ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a1ad						FracUnary:
.a1ad		fa		plx				plx 								; restore stack pos
.a1ae		20 28 a5	jsr $a528			jsr 	EvaluateNumber 				; get a float or int
.a1b1		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a1b4		b5 50		lda $50,x			lda 	NSStatus,x
.a1b6		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1b8		f0 04		beq $a1be			beq 	_IUZero
.a1ba		20 68 9c	jsr $9c68			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a1bd		60		rts				rts
.a1be						_IUZero:
.a1be		20 da a5	jsr $a5da			jsr 	NSMSetZero
.a1c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a1c2						IntUnary:
.a1c2		fa		plx				plx 								; restore stack pos
.a1c3		20 28 a5	jsr $a528			jsr 	EvaluateNumber 				; get a float or int
.a1c6		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a1c9		b5 50		lda $50,x			lda 	NSStatus,x
.a1cb		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a1cd		f0 03		beq $a1d2			beq 	_IUExit
.a1cf		20 c0 9c	jsr $9cc0			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a1d2						_IUExit:
.a1d2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a1d3						LenUnary:
.a1d3		fa		plx				plx 								; restore stack pos
.a1d4		20 32 a5	jsr $a532			jsr 	EvaluateString 				; get a string
.a1d7		5a		phy				phy
.a1d8		a0 00		ldy #$00			ldy 	#0 							; find length
.a1da						_LenFind:
.a1da		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a1dc		f0 06		beq $a1e4			beq 	_LenExit
.a1de		c8		iny				iny
.a1df		d0 f9		bne $a1da			bne 	_LenFind
.a1e1		4c 5d a7	jmp $a75d			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a1e4						_LenExit:
.a1e4		98		tya				tya		 							; return length
.a1e5		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.a1e8		7a		ply				ply
.a1e9		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a1ec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a1ed						Unary_Min:
.a1ed		a9 01		lda #$01			lda 	#1
.a1ef		80 02		bra $a1f3			bra 	UnaryMinMaxMain
.a1f1						Unary_Max:
.a1f1		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a1f3						UnaryMinMaxMain:
.a1f3		fa		plx				plx 								; get index on number stack
.a1f4		48		pha				pha 								; save comparator
.a1f5		20 1f a5	jsr $a51f			jsr 	EvaluateValue 				; get the first value.
.a1f8						_UMMMLoop:
.a1f8		b1 30		lda ($30),y			lda 	(codePtr),y
.a1fa		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a1fc		f0 22		beq $a220			beq 	_UMMMDone
.a1fe		20 42 96	jsr $9642			jsr 	CheckComma 					; must be a comma
.a201		e8		inx				inx
.a202		20 1f a5	jsr $a51f			jsr 	EvaluateValue
.a205		ca		dex				dex
.a206		20 bd a5	jsr $a5bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a209		e8		inx				inx
.a20a		20 bd a5	jsr $a5bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a20d		e8		inx				inx
.a20e		20 0a 97	jsr $970a			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a211		ca		dex				dex
.a212		ca		dex				dex
.a213		85 36		sta $36				sta 	zTemp0 						; save required result
.a215		68		pla				pla 								; get and save comparator
.a216		48		pha				pha
.a217		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a219		d0 dd		bne $a1f8			bne 	_UMMMLoop
.a21b		20 23 a2	jsr $a223			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a21e		80 d8		bra $a1f8			bra 	_UMMMLoop
.a220						_UMMMDone:
.a220		68		pla				pla 								; throw the comparator
.a221		c8		iny				iny 								; skip )
.a222		60		rts				rts
.a223						ExpCopyAboveDown:
.a223		b5 51		lda $51,x			lda 	NSStatus+1,x
.a225		95 50		sta $50,x			sta 	NSStatus,x
.a227		b5 79		lda $79,x			lda 	NSExponent+1,x
.a229		95 78		sta $78,x			sta 	NSExponent,x
.a22b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a22d		95 58		sta $58,x			sta 	NSMantissa0,x
.a22f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a231		95 60		sta $60,x			sta 	NSMantissa1,x
.a233		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a235		95 68		sta $68,x			sta 	NSMantissa2,x
.a237		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a239		95 70		sta $70,x			sta 	NSMantissa3,x
.a23b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a23c						Unary_Not:
.a23c		fa		plx				plx
.a23d		20 47 a5	jsr $a547			jsr 	EvaluateInteger 			; get integer
.a240		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a243		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; zero mantissa ?
.a246		f0 04		beq $a24c			beq 	_NotZero
.a248		20 da a5	jsr $a5da			jsr 	NSMSetZero
.a24b		60		rts				rts
.a24c						_NotZero:
.a24c		4c c0 96	jmp $96c0			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a24f						PeekByteUnary:
.a24f		a9 01		lda #$01			lda 	#1
.a251		80 0a		bra $a25d			bra 	PeekUnary
.a253						PeekWUnary:
.a253		a9 02		lda #$02			lda 	#2
.a255		80 06		bra $a25d			bra 	PeekUnary
.a257						PeekLUnary:
.a257		a9 03		lda #$03			lda 	#3
.a259		80 02		bra $a25d			bra 	PeekUnary
.a25b						PeekDUnary:
.a25b		a9 04		lda #$04			lda 	#4
.a25d						PeekUnary:
.a25d		fa		plx				plx 								; restore position.
.a25e		48		pha				pha 								; save count to copy on stack
.a25f		20 5a a5	jsr $a55a			jsr		Evaluate16BitInteger 		; address as constant.
.a262		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a265		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a267		85 36		sta $36				sta 	zTemp0
.a269		b5 60		lda $60,x			lda 	NSMantissa1,x
.a26b		85 37		sta $37				sta 	zTemp0+1
.a26d		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; clear the result to zero.
.a270		68		pla				pla 								; count in zTemp2
.a271		85 3a		sta $3a				sta 	zTemp2
.a273		da		phx				phx 								; save stack position and offset of read
.a274		5a		phy				phy
.a275		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a277						_PULoop:
.a277		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a279		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a27b		c8		iny				iny 								; next byte to write
.a27c		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a27d		18		clc				clc
.a27e		69 08		adc #$08			adc 	#MathStackSize
.a280		aa		tax				tax
.a281		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a283		d0 f2		bne $a277			bne 	_PULoop
.a285		7a		ply				ply 								; restore stack/code pos and exit.
.a286		fa		plx				plx
.a287		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a288						Unary_Random:
.a288		fa		plx				plx
.a289		20 d9 a2	jsr $a2d9			jsr 	URCopyToMantissa  			; put random # in mantissa
.a28c		b1 30		lda ($30),y			lda 	(codePtr),y
.a28e		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a290		f0 08		beq $a29a			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a292		e8		inx				inx
.a293		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a296		ca		dex				dex
.a297		20 12 98	jsr $9812			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a29a						_URNoModulus:
.a29a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a29c		74 78		stz $78,x			stz 	NSExponent,x
.a29e		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a2a1		60		rts				rts
.a2a2						Unary_Rnd:
.a2a2		fa		plx				plx
.a2a3		20 28 a5	jsr $a528			jsr 	EvaluateNumber 				; number to use.
.a2a6		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; closing bracket
.a2a9		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a2ab		10 20		bpl $a2cd			bpl 	_URDontSeed
.a2ad		a5 01		lda $01				lda 	1 							; switch to page 0
.a2af		48		pha				pha
.a2b0		64 01		stz $01				stz 	1
.a2b2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a2b4		49 17		eor #$17			eor 	#$17
.a2b6		8d a4 d6	sta $d6a4			sta 	$D6A4
.a2b9		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2bb		49 a5		eor #$a5			eor 	#$A5
.a2bd		8d a5 d6	sta $d6a5			sta 	$D6A5
.a2c0		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a2c2		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2c5		a9 01		lda #$01			lda 	#1
.a2c7		8d a6 d6	sta $d6a6			sta 	$D6A6
.a2ca		68		pla				pla
.a2cb		85 01		sta $01				sta 	1
.a2cd						_URDontSeed:
.a2cd		20 d9 a2	jsr $a2d9			jsr 	URCopyToMantissa 			; copy into mantissa
.a2d0		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a2d2		95 78		sta $78,x			sta 	NSExponent,x
.a2d4		a9 08		lda #$08			lda 	#NSTFloat
.a2d6		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a2d8		60		rts				rts
.a2d9						URCopyToMantissa:
.a2d9		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a2db		48		pha				pha
.a2dc		64 01		stz $01				stz 	1
.a2de		a9 01		lda #$01			lda 	#1
.a2e0		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a2e3		ad a4 d6	lda $d6a4			lda 	$D6A4
.a2e6		95 58		sta $58,x			sta 	NSMantissa0,x
.a2e8		ad a5 d6	lda $d6a5			lda 	$D6A5
.a2eb		95 60		sta $60,x			sta 	NSMantissa1,x
.a2ed		ad a4 d6	lda $d6a4			lda 	$D6A4
.a2f0		95 68		sta $68,x			sta 	NSMantissa2,x
.a2f2		ad a5 d6	lda $d6a5			lda 	$D6A5
.a2f5		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a2f7		95 70		sta $70,x			sta 	NSMantissa3,x
.a2f9		68		pla				pla
.a2fa		85 01		sta $01				sta 	1
.a2fc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a2fd						SgnUnary:
.a2fd		fa		plx				plx 								; restore stack pos
.a2fe		20 28 a5	jsr $a528			jsr 	EvaluateNumber 				; get a float or int
.a301		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a304		20 fc a5	jsr $a5fc			jsr 	NSMIsZero 					; if zero
.a307		f0 0e		beq $a317			beq 	_SGZero  					; return Int Zero
.a309		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a30b		48		pha				pha
.a30c		a9 01		lda #$01			lda 	#1 							; set to 1
.a30e		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.a311		68		pla				pla
.a312		29 80		and #$80			and		#$80 						; copy the sign byte out
.a314		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a316		60		rts				rts
.a317		20 da a5	jsr $a5da	_SGZero:jsr 	NSMSetZero
.a31a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a31b						ValUnary:
.a31b		fa		plx				plx 								; restore stack pos
.a31c		20 31 a3	jsr $a331			jsr 	ValMainCode 				; do the main val() code
.a31f		b0 01		bcs $a322			bcs 	_VUError 					; couldn't convert
.a321		60		rts				rts
.a322						_VUError:
.a322		4c 62 a7	jmp $a762			jmp 	TypeError
.a325						IsValUnary:
.a325		fa		plx				plx 								; restore stack pos
.a326		20 31 a3	jsr $a331			jsr 	ValMainCode 				; do the main val() code
.a329		b0 03		bcs $a32e			bcs 	_VUBad
.a32b		4c c0 96	jmp $96c0			jmp 	ReturnTrue
.a32e						_VUBad:
.a32e		4c cb 96	jmp $96cb			jmp 	ReturnFalse
.a331						ValMainCode:
.a331		20 32 a5	jsr $a532			jsr 	EvaluateString 				; get a string
.a334		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; check right bracket present
.a337						ValEvaluateZTemp0:
.a337		5a		phy				phy
.a338		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a33a		f0 17		beq $a353			beq 	_VMCFail2
.a33c		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a33e		48		pha				pha 								; save first character
.a33f		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a341		d0 01		bne $a344			bne 	_VMCStart
.a343		c8		iny				iny 								; skip over -
.a344						_VMCStart:
.a344		38		sec				sec 								; initialise first time round.
.a345						_VMCNext:
.a345		c8		iny				iny 								; pre-increment
.a346		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a348		f0 0c		beq $a356			beq 	_VMCSuccess 				; successful.
.a34a		20 9d 9e	jsr $9e9d			jsr 	EncodeNumber 				; send it to the number-builder
.a34d		90 03		bcc $a352			bcc 	_VMCFail 					; if failed, give up.
.a34f		18		clc				clc 								; next time round, countinue
.a350		80 f3		bra $a345			bra 	_VMCNext
.a352						_VMCFail:
.a352		68		pla				pla
.a353						_VMCFail2:
.a353		7a		ply				ply
.a354		38		sec				sec
.a355		60		rts				rts
.a356						_VMCSuccess:
.a356		a9 00		lda #$00			lda 	#0 							; construct final
.a358		20 9d 9e	jsr $9e9d			jsr 	EncodeNumber 				; by sending a duff value.
.a35b		68		pla				pla 								; if it was -ve
.a35c		c9 2d		cmp #$2d			cmp 	#"-"
.a35e		d0 03		bne $a363			bne 	_VMCNotNegative
.a360		20 9c a5	jsr $a59c			jsr		NSMNegate 					; negate it.
.a363						_VMCNotNegative:
.a363		7a		ply				ply
.a364		18		clc				clc
.a365		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a366						ChrUnary:
.a366		fa		plx				plx 								; restore stack pos
.a367		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a36a		48		pha				pha
.a36b		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a36e		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a370		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate
.a373		68		pla				pla 								; write number to it
.a374		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.a377		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getdatetime.asm

.a378						UnaryGetTime:
.a378		a9 00		lda #$00			lda 	#0
.a37a		80 02		bra $a37e			bra 	UGDTMain
.a37c						UnaryGetDate:
.a37c		a9 03		lda #$03			lda 	#3
.a37e						UGDTMain:
.a37e		fa		plx				plx 								; get stack position back
.a37f		48		pha				pha 								; save table offset
.a380		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger			; ignored parameter
.a383		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; closing )
.a386		68		pla				pla 								; table offset in A
.a387		5a		phy				phy 								; saving Y
.a388		a8		tay				tay 								; table offset in Y
.a389		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a38b		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate
.a38e		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a390		48		pha				pha
.a391		64 01		stz $01				stz 	1
.a393		20 a6 a3	jsr $a3a6			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a396		20 a1 a3	jsr $a3a1			jsr 	UGDTColonDigit
.a399		20 a1 a3	jsr $a3a1			jsr 	UGDTColonDigit
.a39c		68		pla				pla 								; restore I/O select
.a39d		85 01		sta $01				sta 	1
.a39f		7a		ply				ply  								; restore code position
.a3a0		60		rts				rts
.a3a1						UGDTColonDigit:
.a3a1		a9 3a		lda #$3a			lda 	#':'
.a3a3		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.a3a6						UGDTDigit:
.a3a6		da		phx				phx 								; save X
.a3a7		b9 c6 a3	lda $a3c6,y			lda 	RTCROffset,y 				; get offset in RTC register
.a3aa		aa		tax				tax
.a3ab		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a3ae		39 cc a3	and $a3cc,y			and 	RTCRMask,y 					; and with Mask.
.a3b1		fa		plx				plx
.a3b2		48		pha				pha 								; output in BCD
.a3b3		4a		lsr a				lsr 	a
.a3b4		4a		lsr a				lsr 	a
.a3b5		4a		lsr a				lsr 	a
.a3b6		4a		lsr a				lsr 	a
.a3b7		09 30		ora #$30			ora 	#48
.a3b9		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.a3bc		68		pla				pla
.a3bd		29 0f		and #$0f			and 	#15
.a3bf		09 30		ora #$30			ora 	#48
.a3c1		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.a3c4		c8		iny				iny
.a3c5		60		rts				rts
.a3c6						RTCROffset:
>a3c6		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a3cc						RTCRMask:
>a3cc		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a3d2						SpcUnary:
.a3d2		fa		plx				plx 								; restore stack pos
.a3d3		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger			; get value
.a3d6		5a		phy				phy
.a3d7		48		pha				pha 								; save count
.a3d8		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate
.a3db		7a		ply				ply 								; to do count in Y
.a3dc						_SpcLoop:
.a3dc		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a3de		f0 08		beq $a3e8			beq 	_SpcExit
.a3e0		a9 20		lda #$20			lda 	#32
.a3e2		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.a3e5		88		dey				dey
.a3e6		80 f4		bra $a3dc			bra 	_SpcLoop
.a3e8						_SpcExit:
.a3e8		7a		ply				ply
.a3e9		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.a3ec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a3ed						Unary_Str:
.a3ed		fa		plx				plx
.a3ee		20 28 a5	jsr $a528			jsr 	EvaluateNumber  			; get number
.a3f1		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; closing bracket
.a3f4		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a3f6		20 0f a4	jsr $a40f			jsr 	ConvertNumberToString 		; do the conversion.
.a3f9		a9 21		lda #$21			lda		#33 						; create buffer
.a3fb		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate 			; allocate memory
.a3fe		da		phx				phx  								; copy the converted string into the buffer.
.a3ff		a2 00		ldx #$00			ldx 	#0
.a401						_USCopy:
.a401		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a404		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite
.a407		e8		inx				inx
.a408		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a40b		d0 f4		bne $a401			bne 	_USCopy
.a40d		fa		plx				plx
.a40e		60		rts				rts
.a40f						ConvertNumberToString:
.a40f		5a		phy				phy 								; save code position
.a410		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a413		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a416		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a418		10 09		bpl $a423			bpl 	_CNTSNotNegative
.a41a		29 7f		and #$7f			and 	#$7F 						; make +ve
.a41c		95 50		sta $50,x			sta 	NSStatus,x
.a41e		a9 2d		lda #$2d			lda 	#"-"
.a420		20 84 a4	jsr $a484			jsr 	WriteDecimalBuffer
.a423						_CNTSNotNegative:
.a423		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a425		f0 12		beq $a439			beq 	_CNTSNotFloat
.a427		e8		inx				inx 								; round up so we don't get too many 6.999999
.a428		a9 01		lda #$01			lda 	#1
.a42a		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.a42d		ca		dex				dex
.a42e		b5 78		lda $78,x			lda		NSExponent,x
.a430		95 79		sta $79,x			sta 	NSExponent+1,x
.a432		a9 08		lda #$08			lda 	#NSTFloat
.a434		95 51		sta $51,x			sta 	NSStatus+1,x
.a436		20 a2 9b	jsr $9ba2			jsr 	FloatAdd
.a439						_CNTSNotFloat:
.a439		20 66 a4	jsr $a466			jsr 	MakePlusTwoString 			; do the integer part.
.a43c		20 68 9c	jsr $9c68			jsr 	FloatFractionalPart 		; get the fractional part
.a43f		20 19 9d	jsr $9d19			jsr 	NSNormalise					; normalise , exit if zero
.a442		f0 20		beq $a464			beq 	_CNTSExit
.a444		a9 2e		lda #$2e			lda 	#"."
.a446		20 84 a4	jsr $a484			jsr 	WriteDecimalBuffer 			; write decimal place
.a449						_CNTSDecimal:
.a449		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a44c		30 16		bmi $a464			bmi 	_CNTSExit
.a44e		e8		inx				inx 								; x 10.0
.a44f		a9 0a		lda #$0a			lda 	#10
.a451		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.a454		a9 08		lda #$08			lda 	#NSTFloat
.a456		95 50		sta $50,x			sta 	NSStatus,x
.a458		ca		dex				dex
.a459		20 e7 9c	jsr $9ce7			jsr 	FloatMultiply
.a45c		20 66 a4	jsr $a466			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a45f		20 68 9c	jsr $9c68			jsr 	FloatFractionalPart 		; get the fractional part
.a462		80 e5		bra $a449			bra 	_CNTSDecimal 				; keep going.
.a464						_CNTSExit:
.a464		7a		ply				ply
.a465		60		rts				rts
.a466						MakePlusTwoString:
.a466		da		phx				phx
.a467		20 bd a5	jsr $a5bd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a46a		e8		inx				inx 								; access it
.a46b		e8		inx				inx
.a46c		20 c0 9c	jsr $9cc0			jsr 	FloatIntegerPart 			; make it an integer
.a46f		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a471		20 d2 9a	jsr $9ad2			jsr 	ConvertInt32
.a474		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a476						_MPTSCopy:
.a476		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a479		20 84 a4	jsr $a484			jsr 	WriteDecimalBuffer
.a47c		e8		inx				inx
.a47d		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a480		d0 f4		bne $a476			bne 	_MPTSCopy
.a482		fa		plx				plx
.a483		60		rts				rts
.a484						WriteDecimalBuffer:
.a484		da		phx				phx
.a485		ae 11 04	ldx $0411			ldx 	dbOffset
.a488		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a48b		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a48e		ee 11 04	inc $0411			inc 	dbOffset
.a491		fa		plx				plx
.a492		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a493						Unary_Left:
.a493		fa		plx				plx
.a494		18		clc				clc 								; only one parameter
.a495		20 f8 a4	jsr $a4f8			jsr 	SubstringInitial 			; set up.
.a498		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a49a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a49c		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a49e		80 25		bra $a4c5			bra 	SubstringMain
.a4a0						Unary_Right:
.a4a0		fa		plx				plx
.a4a1		18		clc				clc 								; only one parameter
.a4a2		20 f8 a4	jsr $a4f8			jsr 	SubstringInitial 			; set up.
.a4a5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a4a7		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a4a9		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a4ab		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a4ad		b0 02		bcs $a4b1			bcs 	_URNotUnderflow
.a4af		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a4b1						_URNotUnderflow:
.a4b1		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a4b3		80 10		bra $a4c5			bra 	SubstringMain
.a4b5						Unary_Mid:
.a4b5		fa		plx				plx
.a4b6		38		sec				sec 								; two parameters
.a4b7		20 f8 a4	jsr $a4f8			jsr 	SubstringInitial 			; set up.
.a4ba		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a4bc		f0 04		beq $a4c2			beq 	_UMError
.a4be		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a4c0		80 03		bra $a4c5			bra 	SubstringMain
.a4c2						_UMError:
.a4c2		4c 67 a7	jmp $a767			jmp 	ArgumentError
.a4c5						SubstringMain:
.a4c5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a4c7		d5 78		cmp $78,x			cmp 	NSExponent,x
.a4c9		b0 27		bcs $a4f2			bcs 	_SSMNull 					; if so, return an empty string.
.a4cb		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a4cd		f0 23		beq $a4f2			beq 	_SSMNull 					; return empty string.
.a4cf		18		clc				clc 								; add the offset +1 to the address and
.a4d0		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a4d2		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a4d4		85 36		sta $36				sta 	zTemp0
.a4d6		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a4d8		69 00		adc #$00			adc 	#0
.a4da		85 37		sta $37				sta 	zTemp0+1
.a4dc						_SSMNoCarry:
.a4dc		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a4de		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate 			; allocate that many characters
.a4e1		5a		phy				phy 								; save Y
.a4e2		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a4e4						_SSMCopy:
.a4e4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a4e6		f0 08		beq $a4f0			beq 	_SSMEString 				; no more to copy
.a4e8		20 e2 b7	jsr $b7e2			jsr 	StringTempWrite 			; and write it out.
.a4eb		c8		iny				iny
.a4ec		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a4ee		d0 f4		bne $a4e4			bne 	_SSMCopy
.a4f0						_SSMEString:
.a4f0		7a		ply				ply
.a4f1						_SSMExit:
.a4f1		60		rts				rts
.a4f2						_SSMNull:
.a4f2		a9 00		lda #$00			lda 	#0
.a4f4		20 a9 b7	jsr $b7a9			jsr 	StringTempAllocate
.a4f7		60		rts				rts
.a4f8						SubstringInitial:
.a4f8		da		phx				phx 								; save initial stack position
.a4f9		08		php				php 								; save carry on stack indicating 2 parameters
.a4fa		20 32 a5	jsr $a532			jsr 	EvaluateString 				; get a string
.a4fd		5a		phy				phy 								; calculate length to exponent.
.a4fe		a0 ff		ldy #$ff			ldy 	#$FF
.a500						_SIFindLength:
.a500		c8		iny				iny
.a501		b1 36		lda ($36),y			lda 	(zTemp0),y
.a503		d0 fb		bne $a500			bne 	_SIFindLength
.a505		98		tya				tya
.a506		95 78		sta $78,x			sta 	NSExponent,x
.a508		7a		ply				ply
.a509		e8		inx				inx
.a50a		20 42 96	jsr $9642			jsr 	CheckComma 					; comma next
.a50d		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get next parameter
.a510		28		plp				plp 								; is it the last parameter ?
.a511		90 07		bcc $a51a			bcc 	_SSIExit 					; if so, exit.
.a513		e8		inx				inx
.a514		20 42 96	jsr $9642			jsr 	CheckComma 					; comma next
.a517		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get last parameter
.a51a						_SSIExit:
.a51a		fa		plx				plx
.a51b		20 3a 96	jsr $963a			jsr 	CheckRightBracket 			; check closing bracket
.a51e		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a51f						EvaluateValue:
.a51f		48		pha				pha
.a520		20 57 9b	jsr $9b57			jsr		EvaluateExpression 			; expression
.a523		20 1a 9e	jsr $9e1a			jsr 	Dereference					; derefernce it
.a526		68		pla				pla
.a527		60		rts				rts
.a528						EvaluateNumber:
.a528		20 1f a5	jsr $a51f			jsr 	EvaluateValue 				; get a value
.a52b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a52d		29 10		and #$10			and 	#NSBIsString
.a52f		d0 13		bne $a544			bne 	HelperTypeError
.a531		60		rts				rts
.a532						EvaluateString:
.a532		20 1f a5	jsr $a51f			jsr 	EvaluateValue 				; get a value
.a535		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a537		29 10		and #$10			and 	#NSBIsString
.a539		f0 09		beq $a544			beq 	HelperTypeError
.a53b						CopyAddressToTemp0:
.a53b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a53d		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a53f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a541		85 37		sta $37				sta 	zTemp0+1
.a543		60		rts				rts
.a544						HelperTypeError:
.a544		4c 62 a7	jmp $a762			jmp 	TypeError
.a547						EvaluateInteger:
.a547		20 28 a5	jsr $a528			jsr 	EvaluateNumber
.a54a		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a54c		d0 09		bne $a557			bne 	HelperValueError 			; if not, it's a float.
.a54e		60		rts				rts
.a54f						EvaluateUnsignedInteger:
.a54f		20 47 a5	jsr $a547			jsr 	EvaluateInteger 			; check integer is +ve
.a552		b5 50		lda $50,x			lda 	NSStatus,x
.a554		30 01		bmi $a557			bmi 	HelperValueError
.a556		60		rts				rts
.a557						HelperValueError:
.a557		4c 67 a7	jmp $a767			jmp 	ArgumentError
.a55a						Evaluate16BitInteger:
.a55a		20 4f a5	jsr $a54f			jsr	 	EvaluateUnsignedInteger		; get integer
.a55d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a55f		15 68		ora $68,x			ora 	NSMantissa2,x
.a561		d0 f4		bne $a557			bne 	HelperValueError
.a563		60		rts				rts
.a564						Evaluate16BitIntegerSigned:
.a564		20 47 a5	jsr $a547			jsr	 	EvaluateInteger				; get integer
.a567		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a569		15 68		ora $68,x			ora 	NSMantissa2,x
.a56b		d0 ea		bne $a557			bne 	HelperValueError
.a56d		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a56f		10 03		bpl $a574			bpl 	_EISNotSigned
.a571		20 a3 a5	jsr $a5a3			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a574						_EISNotSigned:
.a574		60		rts				rts
.a575						Evaluate8BitInteger:
.a575		20 4f a5	jsr $a54f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a578		d0 dd		bne $a557			bne 	HelperValueError
.a57a		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a57c		15 68		ora $68,x			ora 	NSMantissa2,x
.a57e		15 60		ora $60,x			ora 	NSMantissa1,x
.a580		d0 d5		bne $a557			bne 	HelperValueError
.a582		b5 58		lda $58,x			lda 	NSMantissa0,x
.a584		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a585						Multiply8x8:
.a585		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a586		85 36		sta $36			  	sta 	zTemp0
.a588		86 37		stx $37				stx 	zTemp0+1
.a58a		a9 00		lda #$00			lda 	#0
.a58c		a2 08		ldx #$08			ldx 	#8
.a58e						_M88Loop:
.a58e		90 03		bcc $a593			bcc 	_M88NoAdd
.a590		18		clc				clc
.a591		65 37		adc $37				adc 	zTemp0+1
.a593						_M88NoAdd:
.a593		6a		ror a				ror 	a
.a594		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a596		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a597		d0 f5		bne $a58e			bne 	_M88Loop
.a599		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a59b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a59c						NSMNegate:
.a59c		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a59e		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a5a0		95 50		sta $50,x			sta 	NSStatus,x
.a5a2		60		rts				rts
.a5a3						NSMNegateMantissa:
.a5a3		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a5a4		a9 00		lda #$00			lda 	#0
.a5a6		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a5a8		95 58		sta $58,x			sta 	NSMantissa0,x
.a5aa		a9 00		lda #$00			lda 	#0
.a5ac		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a5ae		95 60		sta $60,x			sta 	NSMantissa1,x
.a5b0		a9 00		lda #$00			lda 	#0
.a5b2		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a5b4		95 68		sta $68,x			sta 	NSMantissa2,x
.a5b6		a9 00		lda #$00			lda 	#0
.a5b8		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a5ba		95 70		sta $70,x			sta 	NSMantissa3,x
.a5bc		60		rts				rts
.a5bd						NSMShiftUpTwo:
.a5bd		b5 58		lda $58,x			lda 	NSMantissa0,x
.a5bf		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5c1		b5 60		lda $60,x			lda 	NSMantissa1,x
.a5c3		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a5c5		b5 68		lda $68,x			lda 	NSMantissa2,x
.a5c7		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a5c9		b5 70		lda $70,x			lda 	NSMantissa3,x
.a5cb		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a5cd		b5 78		lda $78,x			lda 	NSExponent,x
.a5cf		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a5d1		b5 50		lda $50,x			lda 	NSStatus,x
.a5d3		95 52		sta $52,x			sta 	NSStatus+2,x
.a5d5		60		rts				rts
.a5d6						NSMSetZeroMantissaOnly:
.a5d6		a9 00		lda #$00			lda 	#0
.a5d8		80 06		bra $a5e0			bra 	NSMSetMantissa
.a5da						NSMSetZero:
.a5da		a9 00		lda #$00			lda 	#0
.a5dc						NSMSetByte:
.a5dc		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a5de		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a5e0						NSMSetMantissa:
.a5e0		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a5e2		74 60		stz $60,x			stz 	NSMantissa1,x
.a5e4		74 68		stz $68,x			stz 	NSMantissa2,x
.a5e6		74 70		stz $70,x			stz 	NSMantissa3,x
.a5e8		60		rts				rts
.a5e9						NSMShiftLeft:
.a5e9		18		clc				clc
.a5ea						NSMRotateLeft:
.a5ea		36 58		rol $58,x			rol 	NSMantissa0,x
.a5ec		36 60		rol $60,x			rol		NSMantissa1,x
.a5ee		36 68		rol $68,x			rol		NSMantissa2,x
.a5f0		36 70		rol $70,x			rol		NSMantissa3,x
.a5f2		60		rts				rts
.a5f3						NSMShiftRight:
.a5f3		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a5f5		76 68		ror $68,x			ror		NSMantissa2,x
.a5f7		76 60		ror $60,x			ror		NSMantissa1,x
.a5f9		76 58		ror $58,x			ror		NSMantissa0,x
.a5fb		60		rts				rts
.a5fc						NSMIsZero:
.a5fc		b5 70		lda $70,x			lda 	NSMantissa3,x
.a5fe		15 68		ora $68,x			ora		NSMantissa2,x
.a600		15 60		ora $60,x			ora		NSMantissa1,x
.a602		15 58		ora $58,x			ora		NSMantissa0,x
.a604		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a605						TickHandler:
.a605		5a		phy				phy 								; need to preserve Y
.a606		20 49 80	jsr $8049			jsr 	SNDUpdate 					; update sound
.a609		7a		ply				ply
.a60a		60		rts				rts
.0772						LastTick:
>0772								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a60b						Assemble_ora:
.a60b		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a60e		01					.byte $01
.a60f						Assemble_and:
.a60f		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a612		21					.byte $21
.a613						Assemble_eor:
.a613		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a616		41					.byte $41
.a617						Assemble_adc:
.a617		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a61a		61					.byte $61
.a61b						Assemble_sta:
.a61b		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a61e		81					.byte $81
.a61f						Assemble_lda:
.a61f		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a622		a1					.byte $a1
.a623						Assemble_cmp:
.a623		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a626		c1					.byte $c1
.a627						Assemble_sbc:
.a627		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a62a		e1					.byte $e1
.a62b						Assemble_asl:
.a62b		20 86 82	jsr $8286		jsr	AssembleGroup2
>a62e		02					.byte $02
>a62f		75					.byte $75
.a630						Assemble_rol:
.a630		20 86 82	jsr $8286		jsr	AssembleGroup2
>a633		22					.byte $22
>a634		75					.byte $75
.a635						Assemble_lsr:
.a635		20 86 82	jsr $8286		jsr	AssembleGroup2
>a638		42					.byte $42
>a639		75					.byte $75
.a63a						Assemble_ror:
.a63a		20 86 82	jsr $8286		jsr	AssembleGroup2
>a63d		62					.byte $62
>a63e		75					.byte $75
.a63f						Assemble_stx:
.a63f		20 86 82	jsr $8286		jsr	AssembleGroup2
>a642		82					.byte $82
>a643		50					.byte $50
.a644						Assemble_ldx:
.a644		20 86 82	jsr $8286		jsr	AssembleGroup2
>a647		a2					.byte $a2
>a648		d0					.byte $d0
.a649						Assemble_dec:
.a649		20 86 82	jsr $8286		jsr	AssembleGroup2
>a64c		c2					.byte $c2
>a64d		55					.byte $55
.a64e						Assemble_inc:
.a64e		20 86 82	jsr $8286		jsr	AssembleGroup2
>a651		e2					.byte $e2
>a652		55					.byte $55
.a653						Assemble_stz:
.a653		20 86 82	jsr $8286		jsr	AssembleGroup2
>a656		60					.byte $60
>a657		44					.byte $44
.a658						Assemble_bit:
.a658		20 86 82	jsr $8286		jsr	AssembleGroup2
>a65b		20					.byte $20
>a65c		55					.byte $55
.a65d						Assemble_sty:
.a65d		20 86 82	jsr $8286		jsr	AssembleGroup2
>a660		80					.byte $80
>a661		54					.byte $54
.a662						Assemble_ldy:
.a662		20 86 82	jsr $8286		jsr	AssembleGroup2
>a665		a0					.byte $a0
>a666		d5					.byte $d5
.a667						Assemble_cpy:
.a667		20 86 82	jsr $8286		jsr	AssembleGroup2
>a66a		c0					.byte $c0
>a66b		d4					.byte $d4
.a66c						Assemble_cpx:
.a66c		20 86 82	jsr $8286		jsr	AssembleGroup2
>a66f		e0					.byte $e0
>a670		d0					.byte $d0
.a671						Assemble_tsb:
.a671		20 86 82	jsr $8286		jsr	AssembleGroup2
>a674		00					.byte $00
>a675		50					.byte $50
.a676						Assemble_trb:
.a676		20 86 82	jsr $8286		jsr	AssembleGroup2
>a679		10					.byte $10
>a67a		50					.byte $50
.a67b						Assemble_jsr:
.a67b		20 86 82	jsr $8286		jsr	AssembleGroup2
>a67e		14					.byte $14
>a67f		10					.byte $10
.a680						Assemble_jmp:
.a680		20 86 82	jsr $8286		jsr	AssembleGroup2
>a683		40					.byte $40
>a684		10					.byte $10
.a685						Assemble_bpl:
.a685		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a688		10					.byte $10
.a689						Assemble_bmi:
.a689		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a68c		30					.byte $30
.a68d						Assemble_bvc:
.a68d		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a690		50					.byte $50
.a691						Assemble_bvs:
.a691		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a694		70					.byte $70
.a695						Assemble_bcc:
.a695		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a698		90					.byte $90
.a699						Assemble_bcs:
.a699		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a69c		b0					.byte $b0
.a69d						Assemble_bne:
.a69d		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a6a0		d0					.byte $d0
.a6a1						Assemble_beq:
.a6a1		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a6a4		f0					.byte $f0
.a6a5						Assemble_bra:
.a6a5		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a6a8		80					.byte $80
.a6a9						Assemble_brk:
.a6a9		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6ac		00					.byte $00
.a6ad						Assemble_php:
.a6ad		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6b0		08					.byte $08
.a6b1						Assemble_clc:
.a6b1		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6b4		18					.byte $18
.a6b5						Assemble_plp:
.a6b5		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6b8		28					.byte $28
.a6b9						Assemble_sec:
.a6b9		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6bc		38					.byte $38
.a6bd						Assemble_rti:
.a6bd		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6c0		40					.byte $40
.a6c1						Assemble_pha:
.a6c1		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6c4		48					.byte $48
.a6c5						Assemble_cli:
.a6c5		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6c8		58					.byte $58
.a6c9						Assemble_phy:
.a6c9		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6cc		5a					.byte $5a
.a6cd						Assemble_rts:
.a6cd		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6d0		60					.byte $60
.a6d1						Assemble_pla:
.a6d1		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6d4		68					.byte $68
.a6d5						Assemble_sei:
.a6d5		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6d8		78					.byte $78
.a6d9						Assemble_ply:
.a6d9		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6dc		7a					.byte $7a
.a6dd						Assemble_dey:
.a6dd		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6e0		88					.byte $88
.a6e1						Assemble_txa:
.a6e1		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6e4		8a					.byte $8a
.a6e5						Assemble_tya:
.a6e5		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6e8		98					.byte $98
.a6e9						Assemble_txs:
.a6e9		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6ec		9a					.byte $9a
.a6ed						Assemble_tay:
.a6ed		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6f0		a8					.byte $a8
.a6f1						Assemble_tax:
.a6f1		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6f4		aa					.byte $aa
.a6f5						Assemble_clv:
.a6f5		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6f8		b8					.byte $b8
.a6f9						Assemble_tsx:
.a6f9		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a6fc		ba					.byte $ba
.a6fd						Assemble_iny:
.a6fd		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a700		c8					.byte $c8
.a701						Assemble_dex:
.a701		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a704		ca					.byte $ca
.a705						Assemble_cld:
.a705		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a708		d8					.byte $d8
.a709						Assemble_phx:
.a709		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a70c		da					.byte $da
.a70d						Assemble_stp:
.a70d		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a710		db					.byte $db
.a711						Assemble_inx:
.a711		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a714		e8					.byte $e8
.a715						Assemble_nop:
.a715		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a718		ea					.byte $ea
.a719						Assemble_sed:
.a719		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a71c		f8					.byte $f8
.a71d						Assemble_plx:
.a71d		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a720		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a721						DecimalScalarTable:
>a721		66 66 66 66				.dword $66666666 ; 0.1
>a725		de					.byte $de
>a726		1f 85 eb 51				.dword $51eb851f ; 0.01
>a72a		db					.byte $db
>a72b		4c 37 89 41				.dword $4189374c ; 0.001
>a72f		d8					.byte $d8
>a730		ac 8b db 68				.dword $68db8bac ; 0.0001
>a734		d4					.byte $d4
>a735		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a739		d1					.byte $d1
>a73a		83 de 1b 43				.dword $431bde83 ; 1e-06
>a73e		ce					.byte $ce
>a73f		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a743		ca					.byte $ca
>a744		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a748		c7					.byte $c7
>a749		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a74d		c4					.byte $c4
>a74e		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a752		c0					.byte $c0
>a753		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a757		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a758						SyntaxError:
.a758		a9 02		lda #$02		lda	#2
.a75a		4c 53 96	jmp $9653		jmp	ErrorHandler
.a75d						RangeError:
.a75d		a9 04		lda #$04		lda	#4
.a75f		4c 53 96	jmp $9653		jmp	ErrorHandler
.a762						TypeError:
.a762		a9 05		lda #$05		lda	#5
.a764		4c 53 96	jmp $9653		jmp	ErrorHandler
.a767						ArgumentError:
.a767		a9 07		lda #$07		lda	#7
.a769		4c 53 96	jmp $9653		jmp	ErrorHandler
.a76c						NotDoneError:
.a76c		a9 0c		lda #$0c		lda	#12
.a76e		4c 53 96	jmp $9653		jmp	ErrorHandler
.a771						ErrorText:
>a771		42 72 65 61 6b 00			.text	"Break",0
>a777		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a77f		72 72 6f 72 00
>a784		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a78c		20 62 79 20 7a 65 72 6f 00
>a795		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a79d		61 6e 67 65 00
>a7a2		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a7aa		6d 61 74 63 68 00
>a7b0		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a7b8		65 6d 6f 72 79 00
>a7be		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a7c6		61 72 67 75 6d 65 6e 74 00
>a7cf		53 74 6f 70 00				.text	"Stop",0
>a7d4		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a7dc		6f 6f 20 6c 6f 6e 67 00
>a7e4		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a7ec		6e 20 66 61 69 6c 65 64 00
>a7f5		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a7fd		61 74 61 00
>a801		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a809		65 6e 74 65 64 00
>a80f		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a817		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a823		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a82b		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a838		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a840		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a84d		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a855		68 6f 75 74 20 57 68 69 6c 65 00
>a860		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a868		68 6f 75 74 20 46 6f 72 00
>a871		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a879		61 63 6b 20 66 75 6c 6c 00
>a882		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a88a		75 63 74 75 72 65 00
>a891		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a899		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a8a6		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a8ae		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a8bc		41 72 72 61 79 20 73 69			.text	"Array size",0
>a8c4		7a 65 00
>a8c7		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a8cf		79 20 69 6e 64 65 78 00
>a8d7		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a8df		74 20 64 65 63 6c 61 72 65 64 00
>a8ea		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a8f2		20 66 6f 75 6e 64 00
>a8f9		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a901		65 72 72 6f 72 00
>a907		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a90f		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc5b		09 09 31 32 2f 30 31 2f			.text 9,9,"12/01/23 28"
>dc63		32 33 20 32 38

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a915						RectangleCommand:
.a915		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a917		80 02		bra $a91b			bra 	ShapeDrawCmd
.a919						CircleCommand:
.a919		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a91b						ShapeDrawCmd:
.a91b		20 a5 a9	jsr $a9a5			jsr 	RunGraphicsCommand
.a91e						ShapeDraw:
.a91e		0d 74 07	ora $0774			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a921		4c 99 a9	jmp $a999			jmp 	ExecuteGraphicCommand	 	; and complete
.a924						SpriteCommand:
.a924		a2 00		ldx #$00			ldx 	#0
.a926		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get image number.
.a929		5a		phy				phy
.a92a		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a92c		a6 58		ldx $58				ldx 	NSMantissa0
.a92e		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a930		b0 0d		bcs $a93f			bcs 	_SCRange
.a932		a0 ff		ldy #$ff			ldy 	#255
.a934		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a937		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a939		7a		ply				ply
.a93a		20 a5 a9	jsr $a9a5			jsr 	RunGraphicsCommand
.a93d		80 5a		bra $a999			bra 	ExecuteGraphicCommand
.a93f						_SCRange:
.a93f		4c 5d a7	jmp $a75d			jmp 	RangeError
.a942						ImageCommand:
.a942		a2 00		ldx #$00			ldx 	#0
.a944		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get image number.
.a947		20 a5 a9	jsr $a9a5			jsr 	RunGraphicsCommand
.a94a						ImageRunDraw:
.a94a		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a94c		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a94f		ad 7a 07	lda $077a			lda 	gxDrawScale
.a952		0a		asl a				asl 	a
.a953		0a		asl a				asl 	a
.a954		0a		asl a				asl 	a
.a955		a8		tay				tay
.a956		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a958		a6 58		ldx $58				ldx 	NSMantissa0
.a95a		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a95d		60		rts				rts
.a95e						TextCommand:
.a95e		a2 00		ldx #$00			ldx 	#0
.a960		20 32 a5	jsr $a532			jsr 	EvaluateString 				; get text
.a963		20 a5 a9	jsr $a9a5			jsr 	RunGraphicsCommand
.a966						TextRunDraw:
.a966		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a968		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a96b		a0 00		ldy #$00			ldy 	#0
.a96d						_IRDLoop:
.a96d		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a96f		85 37		sta $37				sta 	zTemp0+1
.a971		a5 58		lda $58				lda 	NSMantissa0
.a973		85 36		sta $36				sta 	zTemp0
.a975		b1 36		lda ($36),y			lda 	(zTemp0),y
.a977		f0 13		beq $a98c			beq 	_IRDExit
.a979		5a		phy				phy									; save string pos
.a97a		48		pha				pha 								; save char
.a97b		ad 7a 07	lda $077a			lda 	gxDrawScale 				; get scale
.a97e		0a		asl a				asl 	a
.a97f		0a		asl a				asl 	a
.a980		0a		asl a				asl 	a
.a981		a8		tay				tay
.a982		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a984		fa		plx				plx 								; char to draw
.a985		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a988		7a		ply				ply 								; restore string pos
.a989		c8		iny				iny
.a98a		90 e1		bcc $a96d			bcc 	_IRDLoop 					; go back if no error.
.a98c						_IRDExit:
.a98c		60		rts				rts
.a98d						PlotCommand:
.a98d		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a98f		20 a5 a9	jsr $a9a5			jsr 	RunGraphicsCommand
.a992		80 05		bra $a999			bra 	ExecuteGraphicCommand
.a994						LineCommand:
.a994		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a996		20 a5 a9	jsr $a9a5			jsr 	RunGraphicsCommand
.a999						ExecuteGraphicCommand:
.a999		0d 73 07	ora $0773			ora 	gxCommandID 				; make a full command
.a99c		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; draw it and exit
.a99f		b0 01		bcs $a9a2			bcs 	_EGCError
.a9a1		60		rts				rts
.a9a2						_EGCError:
.a9a2		4c 58 a7	jmp $a758			jmp 	SyntaxError
.a9a5						RunGraphicsCommand:
.a9a5		8d 73 07	sta $0773			sta 	gxCommandID					; save TODO graphics command.
.a9a8		68		pla				pla 								; pop handler address
.a9a9		fa		plx				plx
.a9aa		1a		inc a				inc 	a
.a9ab		d0 01		bne $a9ae			bne 	_RGINoCarry
.a9ad		e8		inx				inx
.a9ae						_RGINoCarry:
.a9ae		8d 78 07	sta $0778			sta 	gxHandler
.a9b1		8e 79 07	stx $0779			stx 	gxHandler+1
.a9b4						_RGICommandLoop:
.a9b4		b1 30		lda ($30),y			lda 	(codePtr),y
.a9b6		c8		iny				iny
.a9b7		c9 da		cmp #$da			cmp 	#KWD_TO						; is it TO x,y
.a9b9		f0 53		beq $aa0e			beq 	_RGI_To
.a9bb		c9 c4		cmp #$c4			cmp 	#KWD_HERE 					; do it here.
.a9bd		f0 55		beq $aa14			beq 	_RGI_Here
.a9bf		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a9c1		f0 3d		beq $aa00			beq 	_RGI_Exit
.a9c3		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a9c5		f0 39		beq $aa00			beq 	_RGI_Exit
.a9c7		c9 cc		cmp #$cc			cmp 	#KWD_OUTLINE 				; solid or outline
.a9c9		f0 3e		beq $aa09			beq 	_RGI_Frame
.a9cb		c9 d6		cmp #$d6			cmp 	#KWD_SOLID
.a9cd		f0 33		beq $aa02			beq 	_RGI_Solid
.a9cf		c9 b8		cmp #$b8			cmp 	#KWD_BY 					; by offset
.a9d1		f0 4b		beq $aa1e			beq 	_RGI_By
.a9d3		c9 c2		cmp #$c2			cmp 	#KWD_FROM 					; from
.a9d5		f0 17		beq $a9ee			beq 	_RGI_Move2
.a9d7		c9 bf		cmp #$bf			cmp 	#KWD_DIM 					; dim (set scale)
.a9d9		f0 62		beq $aa3d			beq 	_RGI_Dim
.a9db		c9 bd		cmp #$bd			cmp 	#KWD_COLOUR 				; colour or Color
.a9dd		f0 74		beq $aa53			beq 	_RGI_Colour
.a9df		c9 bc		cmp #$bc			cmp 	#KWD_COLOR
.a9e1		f0 70		beq $aa53			beq 	_RGI_Colour
.a9e3		ae 73 07	ldx $0773			ldx 	gxCommandID
.a9e6		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a9e8		d0 03		bne $a9ed			bne 	_RGI_Move 					; move
.a9ea		4c 7b aa	jmp $aa7b			jmp		_RGI_SpriteInstructions
.a9ed						_RGI_Move:
.a9ed		88		dey				dey 								; unpick get.
.a9ee						_RGI_Move2:
.a9ee		20 a1 aa	jsr $aaa1			jsr 	GCGetCoordinatePair 		; move to here
.a9f1		20 c8 aa	jsr $aac8			jsr 	GCCopyPairToStore 			; save
.a9f4		5a		phy				phy
.a9f5		20 be aa	jsr $aabe			jsr 	GCLoadAXY 					; load in
.a9f8		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a9fa		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9fd		7a		ply				ply
.a9fe		80 b4		bra $a9b4			bra 	_RGICommandLoop 			; and go round
.aa00						_RGI_Exit:
.aa00		88		dey				dey 								; unpick : / EOL
.aa01		60		rts				rts
.aa02						_RGI_Solid:
.aa02		a9 02		lda #$02			lda 	#2
.aa04		8d 74 07	sta $0774			sta 	gxFillSolid
.aa07		80 ab		bra $a9b4			bra 	_RGICommandLoop
.aa09						_RGI_Frame:
.aa09		9c 74 07	stz $0774			stz 	gxFillSolid
.aa0c		80 a6		bra $a9b4			bra 	_RGICommandLoop
.aa0e						_RGI_To:
.aa0e		20 a1 aa	jsr $aaa1			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.aa11		20 c8 aa	jsr $aac8			jsr 	GCCopyPairToStore
.aa14						_RGI_Here:
.aa14		5a		phy				phy
.aa15		20 be aa	jsr $aabe			jsr 	GCLoadAXY 					; load it into AXY
.aa18		20 78 aa	jsr $aa78			jsr 	_RGICallHandler 			; go do whatever it is.
.aa1b		7a		ply				ply
.aa1c		80 96		bra $a9b4			bra 	_RGICommandLoop 			; and go round
.aa1e						_RGI_By:
.aa1e		20 ae aa	jsr $aaae			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.aa21		18		clc				clc
.aa22		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.aa24		6d 75 07	adc $0775			adc 	gxXPos
.aa27		8d 75 07	sta $0775			sta 	gxXPos
.aa2a		a5 61		lda $61				lda 	NSMantissa1+1
.aa2c		6d 76 07	adc $0776			adc 	gxXPos+1
.aa2f		8d 76 07	sta $0776			sta 	gxXPos+1
.aa32		a5 5a		lda $5a				lda 	NSMantissa0+2
.aa34		18		clc				clc
.aa35		6d 77 07	adc $0777			adc 	gxYPos
.aa38		8d 77 07	sta $0777			sta 	gxYPos
.aa3b		80 d7		bra $aa14			bra 	_RGI_Here
.aa3d						_RGI_Dim:
.aa3d		a2 01		ldx #$01			ldx	 	#1
.aa3f		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.aa42		a5 59		lda $59				lda 	NSMantissa0+1
.aa44		c9 00		cmp #$00			cmp 	#0
.aa46		f0 2d		beq $aa75			beq 	_RGIRange
.aa48		c9 09		cmp #$09			cmp 	#8+1
.aa4a		b0 29		bcs $aa75			bcs		_RGIRange
.aa4c		3a		dec a				dec 	a
.aa4d		8d 7a 07	sta $077a			sta 	gxDrawScale
.aa50		4c b4 a9	jmp $a9b4			jmp 	_RGICommandLoop
.aa53						_RGI_Colour:
.aa53		a2 01		ldx #$01			ldx 	#1 							; colour
.aa55		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.aa58		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.aa5a		20 da a5	jsr $a5da			jsr 	NSMSetZero
.aa5d		b1 30		lda ($30),y			lda 	(codePtr),y
.aa5f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.aa61		d0 04		bne $aa67			bne 	_RGICDefaultMode
.aa63		c8		iny				iny
.aa64		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.aa67						_RGICDefaultMode:
.aa67		5a		phy				phy
.aa68		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.aa6a		a6 59		ldx $59				ldx 	NSMantissa0+1
.aa6c		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aa6e		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa71		7a		ply				ply
.aa72		4c b4 a9	jmp $a9b4			jmp 	_RGICommandLoop 			; and go round
.aa75						_RGIRange:
.aa75		4c 5d a7	jmp $a75d			jmp 	RangeError
.aa78						_RGICallHandler:
.aa78		6c 78 07	jmp ($0778)			jmp 	(gxHandler)
.aa7b						_RGI_SpriteInstructions:
.aa7b		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.aa7d		f0 07		beq $aa86			beq 	_RGISpriteOff
.aa7f		c9 c5		cmp #$c5			cmp 	#KWD_IMAGE
.aa81		f0 13		beq $aa96			beq 	_RGISetImage
.aa83		4c ed a9	jmp $a9ed			jmp 	_RGI_Move
.aa86						_RGISpriteOff:
.aa86		5a		phy				phy
.aa87		a0 01		ldy #$01			ldy 	#1
.aa89		a2 00		ldx #$00			ldx 	#0
.aa8b						_RGIDoCommandLoop:
.aa8b		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.aa8d		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa90		7a		ply				ply
.aa91		b0 e2		bcs $aa75			bcs 	_RGIRange
.aa93		4c b4 a9	jmp $a9b4			jmp 	_RGICommandLoop
.aa96						_RGISetImage:
.aa96		a2 01		ldx #$01			ldx 	#1
.aa98		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger
.aa9b		5a		phy				phy
.aa9c		aa		tax				tax
.aa9d		a0 00		ldy #$00			ldy 	#0
.aa9f		80 ea		bra $aa8b			bra 	_RGIDoCommandLoop
.aaa1						GCGetCoordinatePair:
.aaa1		a2 01		ldx #$01			ldx 	#1
.aaa3		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.aaa6		20 42 96	jsr $9642			jsr 	CheckComma
.aaa9		e8		inx				inx
.aaaa		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.aaad		60		rts				rts
.aaae						GCSignedCoordinatePair:
.aaae		a2 01		ldx #$01			ldx 	#1
.aab0		20 64 a5	jsr $a564			jsr 	Evaluate16BitIntegerSigned
.aab3		20 42 96	jsr $9642			jsr 	CheckComma
.aab6		e8		inx				inx
.aab7		20 64 a5	jsr $a564			jsr 	Evaluate16BitIntegerSigned
.aaba		60		rts				rts
.aabb						_GCCPRange:
.aabb		4c 5d a7	jmp $a75d			jmp 	RangeError
.aabe						GCLoadAXY:
.aabe		ad 76 07	lda $0776			lda 	gxXPos+1
.aac1		ae 75 07	ldx $0775			ldx 	gxXPos
.aac4		ac 77 07	ldy $0777			ldy 	gxYPos
.aac7		60		rts				rts
.aac8						GCCopyPairToStore:
.aac8		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.aaca		8d 75 07	sta $0775			sta 	gxXPos
.aacd		a5 61		lda $61				lda 	NSMantissa1+1
.aacf		8d 76 07	sta $0776			sta 	gxXPos+1
.aad2		a5 5a		lda $5a				lda 	NSMantissa0+2
.aad4		8d 77 07	sta $0777			sta 	gxYPos
.aad7		60		rts				rts
.0773						gxCommandID:
>0773								.fill 	1
.0774						gxFillSolid:
>0774								.fill 	1
.0775						gxXPos:
>0775								.fill 	2
.0777						gxYPos:
>0777								.fill 	1
.0778						gxHandler:
>0778								.fill 	2
.077a						gxDrawScale:
>077a								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.aad8						BitmapCtrl:
.aad8		b1 30		lda ($30),y			lda 	(codePtr),y
.aada		c8		iny				iny
.aadb		a2 01		ldx #$01			ldx 	#1
.aadd		c9 cb		cmp #$cb			cmp 	#KWD_ON
.aadf		f0 11		beq $aaf2			beq 	BitmapSwitch
.aae1		ca		dex				dex
.aae2		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.aae4		f0 0c		beq $aaf2			beq 	BitmapSwitch
.aae6		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get the colour
.aae9		5a		phy				phy
.aaea		aa		tax				tax
.aaeb		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.aaed		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aaf0		7a		ply				ply
.aaf1		60		rts				rts
.aaf2						BitmapSwitch:
.aaf2		5a		phy				phy
.aaf3		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.aaf5		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.aaf7		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aafa		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.aafc		a0 00		ldy #$00			ldy 	#0
.aafe		a2 ff		ldx #$ff			ldx 	#$FF
.ab00		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab03		9c 74 07	stz $0774			stz 	gxFillSolid
.ab06		9c 75 07	stz $0775			stz 	gxXPos
.ab09		9c 76 07	stz $0776			stz 	gxXPos+1
.ab0c		9c 77 07	stz $0777			stz 	gxYPos
.ab0f		9c 7a 07	stz $077a			stz 	gxDrawScale
.ab12		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.ab14		a2 00		ldx #$00			ldx 	#0
.ab16		a0 00		ldy #$00			ldy 	#0
.ab18		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab1b		7a		ply				ply
.ab1c		60		rts				rts
.ab1d						SpritesCtrl:
.ab1d		b1 30		lda ($30),y			lda 	(codePtr),y
.ab1f		c8		iny				iny
.ab20		a2 01		ldx #$01			ldx 	#1
.ab22		c9 cb		cmp #$cb			cmp 	#KWD_ON
.ab24		f0 08		beq $ab2e			beq 	SpriteSwitch
.ab26		ca		dex				dex
.ab27		c9 ca		cmp #$ca			cmp 	#KWD_OFF
.ab29		f0 03		beq $ab2e			beq 	SpriteSwitch
.ab2b		4c 58 a7	jmp $a758			jmp 	SyntaxError
.ab2e						SpriteSwitch:
.ab2e		5a		phy				phy
.ab2f		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.ab31		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.ab33		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab36		7a		ply				ply
.ab37		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.ab38						GfxCommand:
.ab38		a2 00		ldx #$00			ldx 	#0
.ab3a		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; command
.ab3d		20 42 96	jsr $9642			jsr 	CheckComma
.ab40		e8		inx				inx
.ab41		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger 		; X
.ab44		20 42 96	jsr $9642			jsr 	CheckComma
.ab47		e8		inx				inx
.ab48		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; Y
.ab4b		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.ab4d		4a		lsr a				lsr 	a
.ab4e		d0 12		bne $ab62			bne 	_GfxError
.ab50		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.ab52		b0 0e		bcs $ab62			bcs 	_GfxError 					; bit 7 should have been zero
.ab54		5a		phy				phy 								; save pos
.ab55		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.ab57		a6 59		ldx $59				ldx 	NSMantissa0+1
.ab59		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ab5b		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.ab5e		b0 02		bcs $ab62			bcs 	_GfxError
.ab60		7a		ply				ply 								; restore pos and exit.
.ab61		60		rts				rts
.ab62						_GfxError:
.ab62		4c 5d a7	jmp $a75d			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.ab65						UnaryHit:
.ab65		fa		plx				plx
.ab66		a9 36		lda #$36			lda 	#zTemp0
.ab68		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get sprite number 0
.ab6b		20 42 96	jsr $9642			jsr 	CheckComma
.ab6e		e8		inx				inx
.ab6f		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get sprite number 1
.ab72		20 3a 96	jsr $963a			jsr		CheckRightBracket
.ab75		ca		dex				dex 								; fix back up again.
.ab76		da		phx				phx 								; save X/Y
.ab77		5a		phy				phy
.ab78		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.ab7a		b5 58		lda $58,x			lda 	NSMantissa0,x
.ab7c		aa		tax				tax
.ab7d		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.ab7f		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; calculate result
.ab82		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.ab83		7a		ply				ply 								; restore XY
.ab84		fa		plx				plx
.ab85		20 dc a5	jsr $a5dc			jsr 	NSMSetByte 					; return the hit result
.ab88		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.ab89						PaletteCommand:
.ab89		a2 00		ldx #$00			ldx 	#0
.ab8b		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; colour
.ab8e		20 42 96	jsr $9642			jsr 	CheckComma
.ab91		e8		inx				inx
.ab92		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger 		; r
.ab95		20 42 96	jsr $9642			jsr 	CheckComma
.ab98		e8		inx				inx
.ab99		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; g
.ab9c		20 42 96	jsr $9642			jsr 	CheckComma
.ab9f		e8		inx				inx
.aba0		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; b
.aba3		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aba5		85 36		sta $36				sta 	zTemp0
.aba7		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aba9		85 37		sta $37				sta 	zTemp0+1
.abab		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.abad		26 37		rol $37				rol	 	zTemp0+1
.abaf		06 36		asl $36				asl 	zTemp0
.abb1		26 37		rol $37				rol	 	zTemp0+1
.abb3		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.abb5		85 01		sta $01				sta 	1
.abb7		5a		phy				phy
.abb8		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.abba		92 36		sta ($36)			sta 	(zTemp0)
.abbc		a0 01		ldy #$01			ldy 	#1
.abbe		a5 5a		lda $5a				lda 	NSMantissa0+2
.abc0		91 36		sta ($36),y			sta 	(zTemp0),y
.abc2		a5 59		lda $59				lda 	NSMantissa0+1
.abc4		c8		iny				iny
.abc5		91 36		sta ($36),y			sta 	(zTemp0),y
.abc7		7a		ply				ply
.abc8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.abc9						XLoadCommand:
.abc9		20 cd 8f	jsr $8fcd			jsr 	NewProgram
.abcc		20 ee 84	jsr $84ee			jsr 	BackloadProgram
.abcf		4c ad 85	jmp $85ad			jmp 	WarmStart
.abd2						XGoCommand:
.abd2		20 cd 8f	jsr $8fcd			jsr 	NewProgram
.abd5		20 ee 84	jsr $84ee			jsr 	BackloadProgram
.abd8		4c 4b 91	jmp $914b			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.abdb						UnaryEvent:
.abdb		fa		plx				plx
.abdc		20 75 ac	jsr $ac75			jsr 	TimerToStackX 				; timer in +0
.abdf		e8		inx				inx  								; put reference into +1
.abe0		20 a1 9f	jsr $9fa1			jsr 	EvaluateTerm
.abe3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.abe5		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.abe7		d0 4c		bne $ac35			bne 	_UEType
.abe9		e8		inx				inx 								; put the step in +2
.abea		20 42 96	jsr $9642			jsr 	CheckComma
.abed		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger
.abf0		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.abf3		ca		dex				dex
.abf4		ca		dex				dex
.abf5		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.abf7		85 36		sta $36				sta 	zTemp0
.abf9		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.abfb		85 37		sta $37				sta 	zTemp0+1
.abfd		5a		phy				phy
.abfe		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.ac00		b1 36		lda ($36),y			lda 	(zTemp0),y
.ac02		30 2d		bmi $ac31			bmi 	_UEFalse 					; exit if signed.
.ac04		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.ac06		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac08		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.ac0a		c8		iny				iny
.ac0b		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac0d		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ac0f		c8		iny				iny
.ac10		b5 68		lda $68,x			lda 	NSMantissa2,x
.ac12		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ac14		90 1b		bcc $ac31			bcc 	_UEFalse 					; no, return FALSE.
.ac16		18		clc				clc
.ac17		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.ac19		b5 58		lda $58,x			lda 	NSMantissa0,x
.ac1b		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.ac1d		91 36		sta ($36),y			sta 	(zTemp0),y
.ac1f		c8		iny				iny
.ac20		b5 60		lda $60,x			lda 	NSMantissa1,x
.ac22		75 62		adc $62,x			adc 	NSMantissa1+2,x
.ac24		91 36		sta ($36),y			sta 	(zTemp0),y
.ac26		c8		iny				iny
.ac27		b5 68		lda $68,x			lda 	NSMantissa2,x
.ac29		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.ac2b		91 36		sta ($36),y			sta 	(zTemp0),y
.ac2d		7a		ply				ply
.ac2e		4c c0 96	jmp $96c0			jmp 	ReturnTrue
.ac31						_UEFalse:
.ac31		7a		ply				ply 								; restore Y
.ac32		4c cb 96	jmp $96cb			jmp 	ReturnFalse 				; and return False
.ac35						_UEType:
.ac35		4c 62 a7	jmp $a762			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.ac38						UnaryJoyX:
.ac38		18		clc				clc
.ac39		80 01		bra $ac3c			bra 	JoyMain
.ac3b						UnaryJoyY:
.ac3b		38		sec				sec
.ac3c						JoyMain:
.ac3c		fa		plx				plx 								; get pos
.ac3d		08		php				php 								; save carry (set for Y)
.ac3e		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ac41		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.ac44		20 2f 82	jsr $822f			jsr 	EXTReadController 			; read the controller.
.ac47		28		plp				plp
.ac48		b0 02		bcs $ac4c			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.ac4a		4a		lsr a				lsr 	a
.ac4b		4a		lsr a				lsr 	a
.ac4c						_JMNoShift:
.ac4c		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.ac4d		b0 07		bcs $ac56			bcs 	JMIsLeft
.ac4f		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.ac50		b0 07		bcs $ac59			bcs 	JMIsRight
.ac52		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; zero result
.ac55		60		rts				rts
.ac56						JMIsLeft:
.ac56		4c c0 96	jmp $96c0			jmp 	ReturnTrue
.ac59						JMIsRight:
.ac59		a9 01		lda #$01			lda 	#1
.ac5b		20 dc a5	jsr $a5dc			jsr 	NSMSetByte
.ac5e		60		rts				rts
.ac5f						UnaryJoyB:
.ac5f		fa		plx				plx 								; get pos
.ac60		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; ignore the parameter
.ac63		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.ac66		20 2f 82	jsr $822f			jsr 	EXTReadController 			; read the controller.
.ac69		29 10		and #$10			and 	#$10
.ac6b		d0 e9		bne $ac56			bne 	JMIsLeft
.ac6d		20 da a5	jsr $a5da			jsr 	NSMSetZero
.ac70		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.ac71						UnaryTimer:
.ac71		fa		plx				plx
.ac72		20 3a 96	jsr $963a			jsr 	CheckRightBracket
.ac75						TimerToStackX:
.ac75		20 da a5	jsr $a5da			jsr 	NSMSetZero 					; zero result
.ac78		64 01		stz $01				stz 	1 							; access I/O
.ac7a		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.ac7d		95 58		sta $58,x			sta 	NSMantissa0,x
.ac7f		ad 5a d6	lda $d65a			lda 	$D65A
.ac82		95 60		sta $60,x			sta 	NSMantissa1,x
.ac84		ad 5b d6	lda $d65b			lda 	$D65B
.ac87		95 68		sta $68,x			sta 	NSMantissa2,x
.ac89		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		80 fe		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.ac8a						MemoryDeleteLine:
.ac8a		20 a9 ac	jsr $aca9			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac8d		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ac8f		a8		tay				tay
.ac90						_MDDLLoop:
.ac90		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ac92		92 30		sta ($30)			sta 	(codePtr)
.ac94		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ac96		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ac98		d0 07		bne $aca1			bne 	_MDLDLNext
.ac9a		a5 31		lda $31				lda 	codePtr+1
.ac9c		c5 3b		cmp $3b				cmp 	zTemp2+1
.ac9e		d0 01		bne $aca1			bne 	_MDLDLNext
.aca0						_MDDLExit:
.aca0		60		rts				rts
.aca1						_MDLDLNext:
.aca1		e6 30		inc $30				inc 	codePtr						; next byte
.aca3		d0 eb		bne $ac90			bne 	_MDDLLoop
.aca5		e6 31		inc $31				inc 	codePtr+1
.aca7		80 e7		bra $ac90			bra 	_MDDLLoop
.aca9						IMemoryFindEnd:
.aca9		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.acab		85 3a		sta $3a				sta 	0+zTemp2
.acad		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.acaf		85 3b		sta $3b				sta 	1+zTemp2
.acb1						_MDLFELoop:
.acb1		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.acb3		f0 0b		beq $acc0			beq 	_MDLFEExit
.acb5		18		clc				clc
.acb6		65 3a		adc $3a				adc 	zTemp2
.acb8		85 3a		sta $3a				sta 	zTemp2
.acba		90 f5		bcc $acb1			bcc 	_MDLFELoop
.acbc		e6 3b		inc $3b				inc 	zTemp2+1
.acbe		80 f1		bra $acb1			bra 	_MDLFELoop
.acc0						_MDLFEExit:
.acc0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.acc1						MemoryInsertLine:
.acc1		08		php				php
.acc2		20 a9 ac	jsr $aca9			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.acc5		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.acc7		1a		inc a				inc 	a
.acc8		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.acca		b0 36		bcs $ad02			bcs 	_MDLIError 					; no, fail.
.accc		28		plp				plp 								; do at a specific point or the end ?
.accd		90 08		bcc $acd7			bcc 	_MDLIFound 					; if specific point already set.
.accf		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.acd1		85 30		sta $30				sta 	codePtr 					; end.
.acd3		a5 3b		lda $3b				lda 	zTemp2+1
.acd5		85 31		sta $31				sta 	codePtr+1
.acd7						_MDLIFound:
.acd7		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.acda		a8		tay				tay
.acdb						_MDLIInsert:
.acdb		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.acdd		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.acdf		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ace1		c5 3a		cmp $3a				cmp 	zTemp2
.ace3		d0 06		bne $aceb			bne 	_MDLINext
.ace5		a5 31		lda $31				lda 	codePtr+1
.ace7		c5 3b		cmp $3b				cmp 	zTemp2+1
.ace9		f0 0a		beq $acf5			beq 	_MDLIHaveSpace
.aceb						_MDLINext:
.aceb		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.aced		d0 02		bne $acf1			bne 	_MDLINoBorrow
.acef		c6 3b		dec $3b				dec 	zTemp2+1
.acf1						_MDLINoBorrow:
.acf1		c6 3a		dec $3a				dec 	zTemp2
.acf3		80 e6		bra $acdb			bra 	_MDLIInsert
.acf5						_MDLIHaveSpace:
.acf5		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.acf8		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.acf9						_MDLICopy:
.acf9		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.acfc		91 30		sta ($30),y			sta 	(codePtr),y
.acfe		88		dey				dey
.acff		10 f8		bpl $acf9			bpl 	_MDLICopy
.ad01		60		rts				rts
.ad02						_MDLIError:
.ad02		a9 06		lda #$06		lda	#6
.ad04		4c 53 96	jmp $9653		jmp	ErrorHandler
.ad07						MDLAppendLine:
.ad07		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ad09		85 36		sta $36				sta 	zTemp0
.ad0b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad0d		85 38		sta $38				sta 	0+zTemp1
.ad0f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad11		85 39		sta $39				sta 	1+zTemp1
.ad13		b2 38		lda ($38)			lda 	(zTemp1)
.ad15		d0 0a		bne $ad21			bne 	_MDLANoInitialise
.ad17		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad19		8d 7b 07	sta $077b			sta 	0+AppendPointer
.ad1c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad1e		8d 7c 07	sta $077c			sta 	1+AppendPointer
.ad21						_MDLANoInitialise:
.ad21		18		clc				clc
.ad22		ad 7b 07	lda $077b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ad25		85 38		sta $38				sta 	zTemp1
.ad27		72 36		adc ($36)			adc 	(zTemp0)
.ad29		8d 7b 07	sta $077b			sta 	AppendPointer
.ad2c		ad 7c 07	lda $077c			lda 	AppendPointer+1
.ad2f		85 39		sta $39				sta 	zTemp1+1
.ad31		69 00		adc #$00			adc 	#0
.ad33		8d 7c 07	sta $077c			sta 	AppendPointer+1
.ad36		a0 00		ldy #$00			ldy 	#0
.ad38						_MDLACopy:
.ad38		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ad3a		91 38		sta ($38),y			sta 	(zTemp1),y
.ad3c		c8		iny				iny
.ad3d		98		tya				tya
.ad3e		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ad40		d0 f6		bne $ad38			bne 	_MDLACopy
.ad42		a9 00		lda #$00			lda 	#0 							; end of program.
.ad44		91 38		sta ($38),y			sta 	(zTemp1),y
.ad46		60		rts				rts
.077b						AppendPointer:
>077b								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.ad47						MemoryNew:
.ad47		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad49		85 30		sta $30				sta 	codePtr
.ad4b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad4d		85 31		sta $31				sta 	codePtr+1
.ad4f		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ad51		92 30		sta ($30)			sta 	(codePtr)
.ad53		60		rts				rts
.ad54						MemoryInline:
.ad54		98		tya				tya 								; put address into stack,x
.ad55		18		clc				clc  								; get the offset, add codePtr
.ad56		65 30		adc $30				adc 	codePtr
.ad58		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ad5a		a5 31		lda $31				lda 	codePtr+1
.ad5c		69 00		adc #$00			adc 	#0
.ad5e		95 60		sta $60,x			sta 	NSMantissa1,x
.ad60		74 68		stz $68,x			stz 	NSMantissa2,x
.ad62		74 70		stz $70,x			stz 	NSMantissa3,x
.ad64		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.ad65						MemorySearch:
.ad65		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ad67		86 37		stx $37				stx 	zTemp0+1
.ad69		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad6b		85 30		sta $30				sta 	codePtr
.ad6d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad6f		85 31		sta $31				sta 	codePtr+1
.ad71						_MTAXLoop:
.ad71		b2 30		lda ($30)			lda 	(codePtr)
.ad73		18		clc				clc
.ad74		f0 21		beq $ad97			beq 	_MTAXExit 					; reached end, exit with CC.
.ad76		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ad78		b1 30		lda ($30),y			lda 	(codePtr),y
.ad7a		38		sec				sec
.ad7b		e5 36		sbc $36				sbc 	zTemp0
.ad7d		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.ad7f		c8		iny				iny 								; do the MSB
.ad80		b1 30		lda ($30),y			lda 	(codePtr),y
.ad82		e5 37		sbc $37				sbc 	zTemp0+1
.ad84		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.ad86		f0 0f		beq $ad97			beq 	_MTAXExit	 				; found so exit (CS will be set)
.ad88		b0 0d		bcs $ad97			bcs 	_MTAXExit 					; current < required exit
.ad8a		18		clc				clc
.ad8b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ad8d		65 30		adc $30				adc 	codePtr
.ad8f		85 30		sta $30				sta 	codePtr
.ad91		90 02		bcc $ad95			bcc 	_CREExit
.ad93		e6 31		inc $31				inc 	codePtr+1 					; carry
.ad95						_CREExit:
.ad95		80 da		bra $ad71			bra 	_MTAXLoop
.ad97						_MTAXExit:
.ad97		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ad98						UpdateFont:
.ad98		a5 01		lda $01				lda 	1 							; save position
.ad9a		48		pha				pha
.ad9b		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.ad9d		85 01		sta $01				sta 	1
.ad9f		a9 c6		lda #$c6			lda 	#((FontBinary) & $FF)
.ada1		85 36		sta $36				sta 	0+zTemp0
.ada3		a9 ad		lda #$ad			lda 	#((FontBinary) >> 8)
.ada5		85 37		sta $37				sta 	1+zTemp0
.ada7		a9 00		lda #$00			lda 	#(($C000) & $FF)
.ada9		85 38		sta $38				sta 	0+zTemp1
.adab		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.adad		85 39		sta $39				sta 	1+zTemp1
.adaf						_UFCopy1:
.adaf		a0 00		ldy #$00			ldy 	#0
.adb1						_UFCopy2:
.adb1		b1 36		lda ($36),y			lda 	(zTemp0),y
.adb3		91 38		sta ($38),y			sta 	(zTemp1),y
.adb5		c8		iny				iny
.adb6		d0 f9		bne $adb1			bne 	_UFCopy2
.adb8		e6 37		inc $37				inc 	zTemp0+1
.adba		e6 39		inc $39				inc 	zTemp1+1
.adbc		a5 39		lda $39				lda 	zTemp1+1
.adbe		c9 c8		cmp #$c8			cmp 	#$C8
.adc0		d0 ed		bne $adaf			bne 	_UFCopy1
.adc2		68		pla				pla 								; restore.
.adc3		85 01		sta $01				sta 	1
.adc5		60		rts				rts
.adc6						FontBinary:
>adc6		06 09 10 3c 10 21 7e 00				.binary 	"../common/generated/font.bin"
>adce		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>adde		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>adee		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>adfe		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>ae0e		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>ae1e		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>ae2e		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>ae3e		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>ae4e		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>ae5e		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>ae6e		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>ae7e		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>ae8e		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>ae9e		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>aeae		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>aebe		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>aece		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>aede		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>aeee		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>aefe		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>af0e		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>af1e		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>af2e		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>af3e		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>af4e		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>af5e		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>af6e		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>af7e		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>af8e		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>af9e		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>afae		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>afbe		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>afce		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>afde		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>afee		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>affe		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>b00e		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>b01e		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>b02e		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>b03e		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>b04e		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>b05e		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>b06e		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>b07e		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>b08e		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>b09e		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>b0ae		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>b0be		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>b0ce		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>b0de		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>b0ee		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>b0fe		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>b10e		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>b11e		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>b12e		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>b13e		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>b14e		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>b15e		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>b16e		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>b17e		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>b18e		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>b19e		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>b1ae		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>b1be		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>b1ce		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>b1de		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>b1ee		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>b1fe		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>b20e		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b21e		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b22e		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b23e		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b24e		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b25e		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b26e		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b27e		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b28e		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b29e		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b2ae		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b2be		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b2ce		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b2de		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b2ee		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b2fe		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b30e		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b31e		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b32e		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b33e		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b34e		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b35e		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>b36e		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>b37e		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>b38e		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>b39e		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>b3ae		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>b3be		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>b3ce		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b3de		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b3ee		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b3fe		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b40e		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b41e		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b42e		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b43e		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b44e		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b45e		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b46e		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b47e		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>b48e		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>b49e		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>b4ae		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>b4be		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>b4ce		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>b4de		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>b4ee		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b4fe		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b50e		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b51e		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b52e		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b53e		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b54e		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b55e		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b56e		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b57e		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b58e		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b59e		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b5ae		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b5be		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b5c6						PingCommand:
.b5c6		5a		phy				phy 								; save pos
.b5c7		a9 01		lda #$01			lda 	#1 						; push channel.
.b5c9		48		pha				pha
.b5ca		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b5cc		a2 06		ldx #$06			ldx 	#6 						; length
.b5ce		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b5d0		80 24		bra $b5f6			bra 	SoundEffectCommand
.b5d2						ZapCommand:
.b5d2		5a		phy				phy 								; save pos
.b5d3		a9 01		lda #$01			lda 	#1 						; push channel.
.b5d5		48		pha				pha
.b5d6		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b5d8		a2 0a		ldx #$0a			ldx 	#10 						; length
.b5da		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b5dc		80 18		bra $b5f6			bra 	SoundEffectCommand
.b5de						ShootCommand:
.b5de		5a		phy				phy 								; save pos
.b5df		a9 03		lda #$03			lda 	#3 						; push channel.
.b5e1		48		pha				pha
.b5e2		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b5e4		a2 04		ldx #$04			ldx 	#4 						; length
.b5e6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b5e8		80 0c		bra $b5f6			bra 	SoundEffectCommand
.b5ea						Explode:
.b5ea		5a		phy				phy 								; save pos
.b5eb		a9 03		lda #$03			lda 	#3 						; push channel.
.b5ed		48		pha				pha
.b5ee		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b5f0		a2 0a		ldx #$0a			ldx 	#10 						; length
.b5f2		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b5f4		80 00		bra $b5f6			bra 	SoundEffectCommand
.b5f6						SoundEffectCommand:
.b5f6		8d 7d 07	sta $077d			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b5f9		9c 7e 07	stz $077e			stz 	SoundCommandBlock+1
.b5fc		a9 0f		lda #$0f			lda 	#15
.b5fe		8d 7f 07	sta $077f			sta 	SoundCommandBlock+2
.b601		8e 80 07	stx $0780			stx 	SoundCommandBlock+3
.b604		8c 81 07	sty $0781			sty 	SoundCommandBlock+4
.b607		9c 82 07	stz $0782			stz 	SoundCommandBlock+5
.b60a		68		pla				pla
.b60b		09 10		ora #$10			ora 	#$10  						; execute command $11
.b60d		a2 7d		ldx #$7d			ldx 	#(SoundCommandBlock & $FF)
.b60f		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b611		20 3f 80	jsr $803f			jsr 	SNDCommand
.b614		7a		ply				ply
.b615		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b616						UnaryPlaying:
.b616		fa		plx				plx
.b617		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; get channel #
.b61a		48		pha				pha
.b61b		20 3a 96	jsr $963a			jsr		CheckRightBracket
.b61e		68		pla				pla
.b61f		c9 04		cmp #$04			cmp 	#4
.b621		b0 0c		bcs $b62f			bcs 	_UPNotPlaying
.b623		09 20		ora #$20			ora 	#$20 						; query playing ?
.b625		20 3f 80	jsr $803f			jsr 	SNDCommand
.b628		c9 00		cmp #$00			cmp 	#0
.b62a		f0 03		beq $b62f			beq 	_UPNotPlaying
.b62c		4c c0 96	jmp $96c0			jmp 	ReturnTrue
.b62f						_UPNotPlaying:
.b62f		4c cb 96	jmp $96cb			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b632						SoundCommand:
.b632		b1 30		lda ($30),y			lda 	(codePtr),y
.b634		c9 ca		cmp #$ca			cmp 	#KWD_OFF 					; SOUND OFF ?
.b636		d0 09		bne $b641			bne 	_SNDMain
.b638		c8		iny				iny 								; skip OFF
.b639		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b63b		5a		phy				phy
.b63c		20 3f 80	jsr $803f			jsr 	SNDCommand
.b63f		7a		ply				ply
.b640		60		rts				rts
.b641						_SNDMain:
.b641		a2 00		ldx #$00			ldx 	#0
.b643		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; channel
.b646		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b648		b0 4b		bcs $b695			bcs 	_SndError
.b64a		e8		inx				inx 								; do the rest in slot 1.
.b64b		20 42 96	jsr $9642			jsr 	CheckComma
.b64e		20 5a a5	jsr $a55a			jsr 	Evaluate16BitInteger 		; Pitch
.b651		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b653		c9 10		cmp #$10			cmp 	#16
.b655		b0 3e		bcs $b695			bcs 	_SndError
.b657		8d 7e 07	sta $077e			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b65a		b5 58		lda $58,x			lda 	NSMantissa0,x
.b65c		8d 7d 07	sta $077d			sta 	SoundCommandBlock
.b65f		20 42 96	jsr $9642			jsr 	CheckComma
.b662		20 75 a5	jsr $a575			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b665		8d 80 07	sta $0780			sta 	SoundCommandBlock+3
.b668		a9 0f		lda #$0f			lda 	#15
.b66a		8d 7f 07	sta $077f			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b66d		9c 81 07	stz $0781			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b670		9c 82 07	stz $0782			stz 	SoundCommandBlock+5
.b673		b1 30		lda ($30),y			lda 	(codePtr),y
.b675		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b677		d0 0e		bne $b687			bne 	_SNDPlay
.b679		c8		iny				iny
.b67a		20 64 a5	jsr $a564			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b67d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b67f		8d 81 07	sta $0781			sta 	SoundCommandBlock+4
.b682		b5 60		lda $60,x			lda 	NSMantissa1,x
.b684		8d 82 07	sta $0782			sta 	SoundCommandBlock+5
.b687						_SNDPlay:
.b687		5a		phy				phy
.b688		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b68a		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b68c		a2 7d		ldx #$7d			ldx 	#(SoundCommandBlock & $FF)
.b68e		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b690		20 3f 80	jsr $803f			jsr 	SNDCommand
.b693		7a		ply				ply
.b694		60		rts				rts
.b695						_SndError:
.b695		4c 5d a7	jmp $a75d			jmp 	RangeError
.077d						SoundCommandBlock:
>077d								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b698						StackPushByte:
.b698		48		pha				pha 								; save byte on stack
.b699		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b69b		d0 08		bne $b6a5			bne 	_SPBNoBorrow
.b69d		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b69f		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b6a1		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b6a3		90 06		bcc $b6ab			bcc 	_SPBMemory
.b6a5						_SPBNoBorrow:
.b6a5		c6 34		dec $34				dec 	basicStack
.b6a7		68		pla				pla 								; get back and write
.b6a8		92 34		sta ($34)			sta 	(basicStack)
.b6aa		60		rts				rts
.b6ab						_SPBMemory:
.b6ab		a9 12		lda #$12		lda	#18
.b6ad		4c 53 96	jmp $9653		jmp	ErrorHandler
.b6b0						StackPopByte:
.b6b0		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b6b2		e6 34		inc $34				inc 	basicStack
.b6b4		d0 02		bne $b6b8			bne 	_SPBNoCarry
.b6b6		e6 35		inc $35				inc 	basicStack+1
.b6b8						_SPBNoCarry:
.b6b8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b6b9						StackOpen:
.b6b9		48		pha				pha 								; save frame byte
.b6ba		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b6bc		0a		asl a				asl 	a 							; claim twice this for storage
.b6bd		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b6bf		38		sec				sec 								; so basically subtracting from
.b6c0		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b6c2		85 34		sta $34				sta 	basicStack
.b6c4		b0 09		bcs $b6cf			bcs 	_SONoBorrow
>b6c6		db						.byte 	$DB 						; causes a break in the emulator
.b6c7		c6 35		dec $35				dec 	basicStack+1
.b6c9		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b6cb		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b6cd		90 04		bcc $b6d3			bcc 	_SOMemory
.b6cf						_SONoBorrow:
.b6cf		68		pla				pla 								; get marker back and write at TOS
.b6d0		92 34		sta ($34)			sta 	(basicStack)
.b6d2		60		rts				rts
.b6d3						_SOMemory:
.b6d3		a9 12		lda #$12		lda	#18
.b6d5		4c 53 96	jmp $9653		jmp	ErrorHandler
.b6d8						StackClose:
.b6d8		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b6da		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b6dc		0a		asl a				asl 	a 							; claim twice this.
.b6dd		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b6df		85 34		sta $34				sta 	basicStack
.b6e1		90 02		bcc $b6e5			bcc 	_SCExit
.b6e3		e6 35		inc $35				inc 	basicStack+1
.b6e5						_SCExit:
.b6e5		60		rts				rts
.b6e6						StackCheckFrame:
.b6e6		48		pha				pha
.b6e7						_StackRemoveLocals:
.b6e7		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b6e9		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b6eb		b0 05		bcs $b6f2			bcs 	_SCNoLocal
.b6ed		20 6c 8e	jsr $8e6c			jsr 	LocalPopValue 				; restore the local value
.b6f0		80 f5		bra $b6e7			bra 	_StackRemoveLocals 			; gr round again
.b6f2						_SCNoLocal:
.b6f2		68		pla				pla 								; get the frame check.
.b6f3		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b6f5		29 f0		and #$f0			and 	#$F0 						; check type bits
.b6f7		d0 01		bne $b6fa			bne 	_SCFError 					; different, we have structures mixed up
.b6f9		60		rts				rts
.b6fa						_SCFError:
.b6fa		8a		txa				txa 								; report error X
.b6fb		4c 53 96	jmp $9653			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b6fe						STKSaveCodePosition:
.b6fe		5a		phy				phy
.b6ff		98		tya				tya 								; save Y
.b700		a0 05		ldy #$05			ldy 	#5
.b702		91 34		sta ($34),y			sta 	(basicStack),y
.b704		88		dey				dey 								; save Code Pointer
.b705						_STKSaveLoop:
.b705		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b708		91 34		sta ($34),y			sta 	(basicStack),y
.b70a		88		dey				dey
.b70b		d0 f8		bne $b705			bne 	_STKSaveLoop
.b70d		7a		ply				ply
.b70e		60		rts				rts
.b70f						STKLoadCodePosition:
.b70f		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b711						_STKLoadLoop:
.b711		b1 34		lda ($34),y			lda 	(basicStack),y
.b713		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b716		c8		iny				iny
.b717		c0 05		cpy #$05			cpy 	#5
.b719		d0 f6		bne $b711			bne 	_STKLoadLoop
.b71b		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b71d		a8		tay				tay
.b71e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b71f						StackReset:
.b71f		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b721		85 34		sta $34				sta 	0+basicStack
.b723		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b725		85 35		sta $35				sta 	1+basicStack
.b727		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b729		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b72b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b72c						StringConcrete:
.b72c		5a		phy				phy 								; save position on stack
.b72d		20 8d a1	jsr $a18d			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b730		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b732		85 38		sta $38				sta 	zTemp1
.b734		b5 60		lda $60,x			lda 	NSMantissa1,x
.b736		85 39		sta $39				sta 	zTemp1+1
.b738		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b73a						_SALength:
.b73a		c8		iny				iny
.b73b		b1 38		lda ($38),y			lda 	(zTemp1),y
.b73d		d0 fb		bne $b73a			bne 	_SALength
.b73f		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b741		b0 3d		bcs $b780			bcs 	_SALengthError
.b743		98		tya				tya 				 				; length of the new string
.b744		18		clc				clc
.b745		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b747		90 02		bcc $b74b			bcc 	_SAHaveLength
.b749		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b74b						_SAHaveLength:
.b74b		48		pha				pha 								; save length.
.b74c		38		sec				sec
.b74d		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b74f		6d 0a 04	adc $040a			adc 	stringMemory
.b752		8d 0a 04	sta $040a			sta 	stringMemory
.b755		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b757		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b759		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b75b		6d 0b 04	adc $040b			adc 	stringMemory+1
.b75e		8d 0b 04	sta $040b			sta 	stringMemory+1
.b761		85 3b		sta $3b				sta 	zTemp2+1
.b763		95 60		sta $60,x			sta 	NSMantissa1,x
.b765		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b766		38		sec				sec
.b767		e9 03		sbc #$03			sbc 	#3
.b769		92 3a		sta ($3a)			sta 	(zTemp2)
.b76b		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b76d		a0 01		ldy #$01			ldy 	#1
.b76f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b771						_SACopyNewString:
.b771		a0 00		ldy #$00			ldy 	#0
.b773						_SACopyNSLoop:
.b773		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b775		c8		iny				iny 								; write two on in string storage
.b776		c8		iny				iny
.b777		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b779		88		dey				dey 								; this makes it one one.
.b77a		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b77c		d0 f5		bne $b773			bne 	_SACopyNSLoop
.b77e		7a		ply				ply
.b77f		60		rts				rts
.b780						_SALengthError:
.b780		a9 09		lda #$09		lda	#9
.b782		4c 53 96	jmp $9653		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b785						StringSystemInitialise:
.b785		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b787		8d 0a 04	sta $040a			sta 	0+stringMemory
.b78a		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b78c		8d 0b 04	sta $040b			sta 	1+stringMemory
.b78f		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b792		60		rts				rts
.b793						StringSpaceInitialise:
.b793		20 8d a1	jsr $a18d			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b796		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b798		8d 0c 04	sta $040c			sta 	stringInitialised
.b79b		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b79e		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b7a1		ad 0b 04	lda $040b			lda 	stringMemory+1
.b7a4		3a		dec a				dec 	a
.b7a5		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b7a8		60		rts				rts
.b7a9						StringTempAllocate:
.b7a9		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b7ab		b0 30		bcs $b7dd			bcs 	_STALength
.b7ad		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b7b0		30 05		bmi $b7b7			bmi 	_STAAllocate
.b7b2		48		pha				pha 								; save value to subtract.
.b7b3		20 93 b7	jsr $b793			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b7b6		68		pla				pla 								; restore it
.b7b7						_STAAllocate:
.b7b7		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b7b9		18		clc				clc  								; deliberate allows one more
.b7ba		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b7bd		8d 0d 04	sta $040d			sta 	stringTempPointer
.b7c0		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b7c2		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b7c4		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b7c7		69 ff		adc #$ff			adc 	#$FF
.b7c9		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b7cc		85 3d		sta $3d				sta 	zsTemp+1
.b7ce		95 60		sta $60,x			sta 	NSMantissa1,x
.b7d0		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b7d2		74 70		stz $70,x			stz 	NSMantissa3,x
.b7d4		a9 10		lda #$10			lda 	#NSTString
.b7d6		95 50		sta $50,x			sta 	NSStatus,x
.b7d8		a9 00		lda #$00			lda 	#0 							; clear the target string
.b7da		92 3c		sta ($3c)			sta 	(zsTemp)
.b7dc		60		rts				rts
.b7dd						_STALength:
.b7dd		a9 09		lda #$09		lda	#9
.b7df		4c 53 96	jmp $9653		jmp	ErrorHandler
.b7e2						StringTempWrite:
.b7e2		48		pha				pha
.b7e3		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b7e5		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b7e7		d0 02		bne $b7eb			bne 	_STWNoCarry
.b7e9		e6 3d		inc $3d				inc 	zsTemp+1
.b7eb						_STWNoCarry:
.b7eb		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b7ed		92 3c		sta ($3c)			sta 	(zsTemp)
.b7ef		68		pla				pla
.b7f0		60		rts				rts

;******  Return to file: _basic.asm

.b7f1						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 84 07	ldy $0784			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 84 07	ldy $0784			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 85 07	lda $0785			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 84 07	sty $0784			sty 	EXTColumn
.c02d	a02d	cc 86 07	cpy $0786			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 83 07	inc $0783			inc 	EXTRow  					; bump row
.c035	a035	9c 84 07	stz $0784			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 83 07	lda $0783			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 87 07	cmp $0787			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 86 07	adc $0786			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 84 07	dec $0784			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 84 07	stz $0784			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 83 07	dec $0783			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 83 07	lda $0783			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 83 07	dec $0783			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 86 07	sbc $0786			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 84 07	sty $0784			sty 	EXTColumn
.c08c	a08c	cc 86 07	cpy $0786			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 84 07	sty $0784			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 87 07	lda $0787			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 83 07	cmp $0783			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 83 07	inc $0783			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 86 07	adc $0786			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 84 07	lda $0784			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 84 07	sta $0784			sta 	EXTColumn
.c0c9	a0c9	cd 86 07	cmp $0786			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 84 07	dec $0784			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 86 07	ldy $0786			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 86 07	cpy $0786			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 85 07	and $0785			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 85 07	sta $0785			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 85 07	ora $0785			ora 	EXTTextColour
.c13c	a13c	8d 85 07	sta $0785			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 85 07	lda $0785			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 85 07	lda $0785			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 83 07	stz $0783			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 84 07	stz $0784			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 84 07	lda $0784			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 83 07	lda $0783			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 72 07	cmp $0772			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 72 07	sta $0772			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 01 bc	jsr $bc01			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 19 82	jsr $8219			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 84 07	lda $0784			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 84 07	ldy $0784			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 86 07	cpy $0786			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 84 07	ldy $0784			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 86 07	cpy $0786			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 86 07	ldy $0786			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 84 07	cpy $0784			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 86 07	lda $0786			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 86 07	ldy $0786			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0783						EXTRow:
>0783								.fill 	1
.0784						EXTColumn:
>0784								.fill 	1
.0785						EXTTextColour:
>0785								.fill 	1
.0786						EXTScreenWidth:
>0786								.fill 	1
.0787						EXTScreenHeight:
>0787								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 85 07	sta $0785			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 86 07	sta $0786			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 87 07	sta $0787			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 83 07	lda $0783			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.0788						gxCurrentX:
>0788								.fill 	2
.078a						gxCurrentY:
>078a								.fill 	2
.078c						gxLastX:
>078c								.fill 	2
.078e						gxLastY:
>078e								.fill 	2
.0790						gxX0:
>0790								.fill 	2
.0792						gxY0:
>0792								.fill 	2
.0794						gxX1:
>0794								.fill 	2
.0796						gxY1:
>0796								.fill 	2
.0798						gxSpritesOn:
>0798								.fill 	1
.0799						gxBitmapsOn:
>0799								.fill 	1
.079a						gxBasePage:
>079a								.fill 	1
.079b						gxSpritePage:
>079b								.fill 	1
.079c						gxHeight:
>079c								.fill 	1
.079d						gxMode:
>079d								.fill 	1
.079e						gxColour:
>079e								.fill 	1
.079f						gxEORValue:
>079f								.fill 	1
.07a0						gxANDValue:
>07a0								.fill 	1
.07a1						gxOriginalLUTValue:
>07a1								.fill 	1
.07a2						gxOffset:
>07a2								.fill 	1
.07a3						GSCurrentSpriteID:
>07a3								.fill 	1
.07a4						GSCurrentSpriteAddr:
>07a4								.fill 	2
.07a6						gxSpriteOffsetBase:
>07a6								.fill 	2
.07a8						gxSpriteLow:
>07a8								.fill 	64
.07e8						gxSpriteHigh:
>07e8								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 88 07	lda $0788,x			lda 	gxCurrentX,x
.c800	a800	9d 8c 07	sta $078c,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8a 07	sta $078a			sta 	gxCurrentY
.c80a	a80a	9c 8b 07	stz $078b			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 88 07	sta $0788			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 89 07	sta $0789			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 89 07	lda $0789			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 88 07	lda $0788			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8a 07	lda $078a			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd 9c 07	cmp $079c			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 88 07	lda $0788,x			lda 	gxCurrentX,x
.c83c	a83c	9d 90 07	sta $0790,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2b 08	sta $082b			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 99 07	lda $0799			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 2c 08	stz $082c			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 29 08	lda $0829			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2a 08	cmp $082a			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2a 08	lda $082a			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 29 08	lda $0829			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2a 08	ldx $082a			ldx	 	gxYCentre
.c898	a898	8d 2a 08	sta $082a			sta 	gxYCentre
.c89b	a89b	8e 29 08	stx $0829			stx 	gxxCentre
.c89e	a89e	ad 2c 08	lda $082c			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 2c 08	sta $082c			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2b 08	lda $082b	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 2c 08	lda $082c			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2a 08	lda $082a			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 29 08	lda $0829			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2b 08	lda $082b			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2a 08	sbc $082a			sbc 	gxYCentre
.c8df	a8df	8d 2a 08	sta $082a			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 94 07	lda $0794,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 90 07	sta $0790,x			sta 	gxX0,x
.c8f6	a8f6	bd 95 07	lda $0795,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 91 07	sta $0791,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 2c 08	stz $082c			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 29 08	inc $0829			inc 	gxxCentre 					; X++
.c90b	a90b	ad 29 08	lda $0829			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 29 08	inc $0829			inc 	gxxCentre					; X++
.c918	a918	ce 2a 08	dec $082a			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 29 08	lda $0829			lda 	gxxCentre
.c91f	a91f	ed 2a 08	sbc $082a			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 2c 08	dec $082c			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 96 07	lda $0796			lda 	gxY1
.c958	a958	ed 92 07	sbc $0792			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 28 08	sta $0828			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 29 08	stz $0829			stz 	gxxCentre
.c96c	a96c	ad 28 08	lda $0828			lda 	gxRadius
.c96f	a96f	8d 2a 08	sta $082a			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 94 07	lda $0794,x			lda 	gxX1,x
.c987	a987	7d 90 07	adc $0790,x			adc 	gxX0,x
.c98a	a98a	9d 94 07	sta $0794,x			sta 	gxX1,x
.c98d	a98d	bd 95 07	lda $0795,x			lda 	gxX1+1,x
.c990	a990	7d 91 07	adc $0791,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 95 07	sta $0795,x			sta 	gxX1+1,x
.c997	a997	7e 94 07	ror $0794,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.0828						gxRadius:
>0828								.fill 	1
.0829						gxxCentre:
>0829								.fill 	1
.082a						gxYCentre:
>082a								.fill 	1
.082b						gxIsFillMode:
>082b								.fill 	1
.082c						gxYChanged:
>082c								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 99 07	lda $0799			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad 9c 07	lda $079c			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9a 07	adc $079a			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9a 07	cmp $079a			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 98 07	stz $0798			stz 	gxSpritesOn
.c9f4	a9f4	9c 99 07	stz $0799			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 88 07	stz $0788,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 99 07	sta $0799			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9a 07	sta $079a			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e 9c 07	stx $079c			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 98 07	sta $0798			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9b 07	sta $079b			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d a6 07	sta $07a6			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d a7 07	sta $07a7			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a5 07	stz $07a5			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e e8 07	stz $07e8,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d a8 07	sta $07a8,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 99 07	lda $0799			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a2 07	ldy $07a2			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a0 07	and $07a0			and 	gxANDValue
.cac1	aac1	4d 9f 07	eor $079f			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 2f 08	lda $082f			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 90 07	lda $0790			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 94 07	eor $0794			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 91 07	lda $0791			lda 	gxX0+1
.cae7	aae7	4d 95 07	eor $0795			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 96 07	lda $0796			lda 	gxY1
.caee	aaee	4d 92 07	eor $0792			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 31 08	lda $0831			lda 	gxPosition
.caf6	aaf6	6d 32 08	adc $0832			adc 	gxAdjust
.caf9	aaf9	8d 31 08	sta $0831			sta 	gxPosition
.cafc	aafc	9c 34 08	stz $0834			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 33 08	cmp $0833			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 34 08	dec $0834			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 33 08	sbc $0833			sbc 	gxTotal
.cb0d	ab0d	8d 31 08	sta $0831			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 2f 08	lda $082f			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 34 08	lda $0834			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 34 08	lda $0834			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 30 08	lda $0830			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 90 07	lda $0790			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 91 07	dec $0791			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 90 07	dec $0790			dec 	gxX0
.cb3e	ab3e	ce a2 07	dec $07a2			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a2 07	lda $07a2			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 90 07	inc $0790			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 91 07	inc $0791			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a2 07	inc $07a2			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 92 07	inc $0792			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 96 07	lda $0796			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 92 07	sbc $0792			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 2e 08	sta $082e			sta 	gxDiffY
.cb86	ab86	9c 30 08	stz $0830			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 94 07	lda $0794			lda 	gxX1
.cb8d	ab8d	ed 90 07	sbc $0790			sbc 	gxX0
.cb90	ab90	8d 2d 08	sta $082d			sta 	gxDiffX
.cb93	ab93	ad 95 07	lda $0795			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 91 07	sbc $0791			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 2d 08	ror $082d			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 2d 08	sbc $082d			sbc 	gxDiffX
.cba6	aba6	8d 2d 08	sta $082d			sta 	gxDiffX
.cba9	aba9	ce 30 08	dec $0830			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 2f 08	stz $082f			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 2e 08	lda $082e			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 32 08	sta $0832			sta 	gxAdjust
.cbb5	abb5	ad 2d 08	lda $082d			lda 	gxDiffX
.cbb8	abb8	8d 33 08	sta $0833			sta 	gxTotal
.cbbb	abbb	ad 2e 08	lda $082e			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 2d 08	cmp $082d			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 2f 08	dec $082f			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 2d 08	lda $082d			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 32 08	sta $0832			sta 	gxAdjust
.cbcc	abcc	ad 2e 08	lda $082e			lda 	gxDiffY
.cbcf	abcf	8d 33 08	sta $0833			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 33 08	lda $0833			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 31 08	sta $0831			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.082d						gxDiffX:
>082d								.fill 	1
.082e						gxDiffY:
>082e								.fill 	1
.082f						gxIsDiffYLarger:
>082f								.fill 	1
.0830						gxDXNegative:
>0830								.fill 	1
.0831						gxPosition:
>0831								.fill 	1
.0832						gxAdjust:
>0832								.fill 	1
.0833						gxTotal:
>0833								.fill 	1
.0834						gxAddSelect:
>0834								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e 9e 07	stx $079e			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d 9d 07	sta $079d			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a0 07	stz $07a0			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae 9e 07	ldx $079e			ldx 	gxColour
.cbec	abec	8e 9f 07	stx $079f			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a0 07	stx $07a0			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c 9f 07	stz $079f			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a0 07	lda $07a0			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a0 07	sta $07a0			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a2 07	ldy $07a2			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a0 07	and $07a0			and 	gxANDValue
.cc16	ac16	4d 9f 07	eor $079f			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 99 07	lda $0799			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 92 07	lda $0792			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 96 07	cmp $0796			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 92 07	inc $0792			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 92 07	lda $0792			lda 	gxY0 						; reached last line
.cc48	ac48	cd 96 07	cmp $0796			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 94 07	lda $0794			lda		gxX1
.cc65	ac65	ed 90 07	sbc $0790			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 95 07	lda $0795			lda 	gxX1+1
.cc6d	ac6d	ed 91 07	sbc $0791			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a2 07	lda $07a2			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a2 07	ldy $07a2			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a0 07	and $07a0			and 	gxANDValue
.cc8a	ac8a	4d 9f 07	eor $079f			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a0 07	and $07a0			and 	gxANDValue
.cca8	aca8	4d 9f 07	eor $079f			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a0 07	and $07a0			and 	gxANDValue
.ccc0	acc0	4d 9f 07	eor $079f			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a2 07	sta $07a2			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 35 08	sta $0835			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 36 08	sta $0836			sta 	gxMask 						; and mask
.cce7	ace7	ad 99 07	lda $0799			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 92 07	lda $0792			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 38 08	sty $0838			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 37 08	stx $0837			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3a 08	lda $083a			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 39 08	sta $0839			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3a 08	bit $083a			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 36 08	lda $0836			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 39 08	lda $0839			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 92 07	lda $0792			lda 	gxY0 						; off screen
.cd20	ad20	cd 9c 07	cmp $079c			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 35 08	cmp $0835			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 92 07	sta $0792			sta 	gxY0
.cd39	ad39	ae 39 08	ldx $0839			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 35 08	lda $0835			lda 	gxSize
.cd40	ad40	6d 90 07	adc $0790			adc 	gxX0
.cd43	ad43	8d 90 07	sta $0790			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 91 07	inc $0791			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 37 08	jmp ($0837)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a2 07	ldy $07a2			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 39 08	lda $0839			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c 9d 07	bit $079d			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 36 08	lda $0836			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3a 08	lda $083a			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a0 07	and $07a0			and 	gxANDValue
.cd84	ad84	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 35 08	cmp $0835			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 92 07	inc $0792			inc 	gxY0
.cda1	ada1	60		rts				rts
.0835						gxSize:
>0835								.fill 	1
.0836						gxMask:
>0836								.fill 	1
.0837						gxAcquireVector:
>0837								.fill 	2
.0839						gxScale:
>0839								.fill 	1
.083a						gxUseMode:
>083a								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d 9d 07	eor $079d			eor 	gxMode
.cda7	ada7	8d 3a 08	sta $083a			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad 9e 07	lda $079e			lda 	gxColour
.cde0	ade0	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 98 07	lda $0798			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d 9d 07	eor $079d			eor 	gxMode
.cdf4	adf4	8d 3a 08	sta $083a			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3b 08	lda $083b			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9b 07	lda $079b			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 3c 08	ldx $083c			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 3e 08	adc $083e			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 3f 08	adc $083f			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3b 08	cpy $083b			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 98 07	lda $0798			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a3 07	sta $07a3			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a5 07	sta $07a5			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a4 07	sta $07a4			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 98 07	lda $0798			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a4 07	lda $07a4			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 3e 08	lda $083e			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 3f 08	lda $083f			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d a6 07	adc $07a6			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad a7 07	lda $07a7			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 3c 08	lda $083c			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 3d 08	ora $083d			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a3 07	ldx $07a3			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd e8 07	lda $07e8,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d e8 07	sta $07e8,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 3c 08	lda $083c			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d e8 07	ora $07e8,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d e8 07	sta $07e8,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd a8 07	lda $07a8,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d a8 07	sta $07a8,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a4 07	lda $07a4			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a3 07	ldx $07a3			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd a8 07	lda $07a8,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d a8 07	sta $07a8,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 98 07	lda $0798			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a5 07	lda $07a5			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a4 07	lda $07a4			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a3 07	ldx $07a3			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd e8 07	lda $07e8,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 90 07	adc $0790			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 91 07	lda $0791			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 92 07	adc $0792			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 91 07	lsr $0791			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 90 07	ror $0790			ror 	gxX0
.cf60	af60	4e 90 07	lsr $0790			lsr 	gxX0
.cf63	af63	4e 92 07	lsr $0792			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 92 07	lsr $0792			lsr 	gxY0
.cf69	af69	ae a3 07	ldx $07a3			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd a8 07	lda $07a8,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 90 07	ora $0790			ora 	gxX0
.cf74	af74	9d a8 07	sta $07a8,x			sta 	gxSpriteLow,x
.cf77	af77	bd e8 07	lda $07e8,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 92 07	ora $0792			ora 	gxY0
.cf7f	af7f	9d e8 07	sta $07e8,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a1 07	sta $07a1			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a1 07	lda $07a1			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 92 07	lda $0792			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 90 07	lda $0790			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a2 07	sta $07a2			sta 	gxOffset
.cfd1	afd1	ad 91 07	lda $0791			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9a 07	adc $079a			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a2 07	lda $07a2			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a2 07	sta $07a2			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 a8 07	lda $07a8,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d a8 07	ora $07a8,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 e8 07	lda $07e8,y			lda 	gxSpriteHigh,y
.d023	b023	7d e8 07	adc $07e8,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 e8 07	lda $07e8,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd e8 07	lda $07e8,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 a8 07	lda $07a8,y			lda 	gxSpriteLow,y
.d051	b051	fd a8 07	sbc $07a8,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9b 07	lda $079b			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 3f 08	sta $083f			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 3c 08	sta $083c			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3b 08	sta $083b			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 3d 08	sta $083d			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 3e 08	sta $083e			sta 	gxSpriteOffset
.d09e	b09e	0e 3e 08	asl $083e			asl 	gxSpriteOffset
.d0a1	b0a1	2e 3f 08	rol $083f			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 3e 08	asl $083e			asl 	gxSpriteOffset
.d0a7	b0a7	2e 3f 08	rol $083f			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083b						gxSizePixels:
>083b								.fill 	1
.083c						gxSizeBits:
>083c								.fill 	1
.083d						gxSpriteLUT:
>083d								.fill 	1
.083e						gxSpriteOffset:
>083e								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 90 07	lda $0790			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 94 07	cmp $0794			cmp 	gxX1
.d0bb	b0bb	ad 91 07	lda $0791			lda 	gxX0+1
.d0be	b0be	ed 95 07	sbc $0795			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 92 07	lda $0792			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 96 07	cmp $0796			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 90 07	lda $0790,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 90 07	lda $0790,y			lda 	gxX0,y
.d0eb	b0eb	9d 90 07	sta $0790,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 90 07	sta $0790,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $93 JOYB(
>d179	b179	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $94 JOYX(
>d180	b180	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $95 JOYY(
>d187	b187	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $96 LEFT$(
>d18f	b18f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $97 LEN(
>d195	b195	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $98 MAX(
>d19b	b19b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $99 MID$(
>d1a2	b1a2	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9a MIN(
>d1a8	b1a8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9b NOT(
>d1ae	b1ae	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9c PEEK(
>d1b5	b1b5	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9d PEEKD(
>d1bd	b1bd	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9e PEEKL(
>d1c5	b1c5	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9f PEEKW(
>d1cd	b1cd	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a0 PLAYING(
>d1d5	b1d5	47 28
>d1d7	b1d7	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a1 RANDOM(
>d1df	b1df	28
>d1e0	b1e0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a2 RIGHT$(
>d1e8	b1e8	28
>d1e9	b1e9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a3 RND(
>d1ef	b1ef	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a4 SGN(
>d1f5	b1f5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a5 SPC(
>d1fb	b1fb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a6 STR$(
>d202	b202	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a7 TIMER(
>d20a	b20a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a8 TRUE
>d210	b210	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a9 VAL(
>d216	b216	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $aa FOR
>d21b	b21b	02 8f 49 46				.text	2,$8f,"IF"             ; $ab IF
>d21f	b21f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ac PROC
>d225	b225	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $ad REPEAT
>d22d	b22d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $ae WHILE
>d234	b234	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $af ENDIF
>d23b	b23b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b0 ENDPROC
>d243	b243	43
>d244	b244	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b1 NEXT
>d24a	b24a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b2 THEN
>d250	b250	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b3 UNTIL
>d257	b257	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b4 WEND
>d25d	b25d	02 95 41 54				.text	2,$95,"AT"             ; $b5 AT
>d261	b261	02 9b 42 59				.text	2,$9b,"BY"             ; $b6 BY
>d265	b265	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b7 CALL
>d26b	b26b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b8 CIRCLE
>d273	b273	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b9 CLEAR
>d27a	b27a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $ba COLOR
>d281	b281	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bb COLOUR
>d289	b289	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bc DATA
>d28f	b28f	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bd DIM
>d294	b294	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $be DOWNTO
>d29c	b29c	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bf ELSE
>d2a2	b2a2	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c0 FROM
>d2a8	b2a8	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c1 GFX
>d2ad	b2ad	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c2 HERE
>d2b3	b2b3	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c3 IMAGE
>d2ba	b2ba	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d2bf	b2bf	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2c5	b2c5	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2cc	b2cc	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c7 MEMCOPY
>d2d4	b2d4	59
>d2d5	b2d5	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c8 OFF
>d2da	b2da	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c9 ON
>d2de	b2de	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ca OUTLINE
>d2e6	b2e6	45
>d2e7	b2e7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cb PALETTE
>d2ef	b2ef	45
>d2f0	b2f0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cc PLOT
>d2f6	b2f6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cd POKE
>d2fc	b2fc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $ce POKED
>d303	b303	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cf POKEL
>d30a	b30a	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d0 POKEW
>d311	b311	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d317	b317	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d31d	b31d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d322	b322	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d329	b329	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d330	b330	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d338	b338	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d33e	b33e	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d342	b342	ff					.text	$FF
.d343	b343					KeywordSet1:
>d343	b343	00 65					.text	0,$65,""               ; $80 !0:EOF
>d345	b345	00 58					.text	0,$58,""               ; $81 !1:SH1
>d347	b347	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d349	b349	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d351	b351	4c 45
>d353	b353	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d35b	b35b	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d363	b363	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d36a	b36a	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d371	b371	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d376	b376	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37e	b37e	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d383	b383	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d38a	b38a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d38f	b38f	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d397	b397	45
>d398	b398	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d39c	b39c	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d3a3	b3a3	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d3a9	b3a9	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3b0	b3b0	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3b7	b3b7	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3bd	b3bd	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3c3	b3c3	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3c8	b3c8	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3ce	b3ce	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3d5	b3d5	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3dd	b3dd	45
>d3de	b3de	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3e6	b3e6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d3eb	b3eb	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d3f1	b3f1	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d3f9	b3f9	45
>d3fa	b3fa	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d402	b402	45
>d403	b403	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d40a	b40a	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d412	b412	53
>d413	b413	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d419	b419	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d421	b421	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d426	b426	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d42d	b42d	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d432	b432	ff					.text	$FF
.d433	b433					KeywordSet2:
>d433	b433	00 65					.text	0,$65,""               ; $80 !0:EOF
>d435	b435	00 58					.text	0,$58,""               ; $81 !1:SH1
>d437	b437	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d439	b439	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d43e	b43e	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d443	b443	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d448	b448	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d44d	b44d	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d452	b452	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d457	b457	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d45c	b45c	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d461	b461	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d466	b466	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d46b	b46b	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d470	b470	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d475	b475	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d47a	b47a	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d47f	b47f	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d484	b484	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d489	b489	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d48e	b48e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d493	b493	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d498	b498	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d49d	b49d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4a2	b4a2	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4a7	b4a7	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4ac	b4ac	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4b1	b4b1	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4b6	b4b6	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4bb	b4bb	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4c0	b4c0	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4c5	b4c5	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4ca	b4ca	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4cf	b4cf	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4d4	b4d4	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4d9	b4d9	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4de	b4de	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4e3	b4e3	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4e8	b4e8	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4ed	b4ed	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4f2	b4f2	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4f7	b4f7	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4fc	b4fc	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d501	b501	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d506	b506	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d50b	b50b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d510	b510	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d515	b515	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d51a	b51a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d51f	b51f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d524	b524	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d529	b529	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d52e	b52e	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d533	b533	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d538	b538	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d53d	b53d	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d542	b542	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d547	b547	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d54c	b54c	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d551	b551	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d556	b556	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d55b	b55b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d560	b560	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d565	b565	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d56a	b56a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d56f	b56f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d574	b574	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d579	b579	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d57e	b57e	ff					.text	$FF
.d57f	b57f					Export_TKListConvertLine:
.d57f	b57f	48		pha				pha 								; save indent on the stack
.d580	b580	9c 19 04	stz $0419			stz 	tbOffset
.d583	b583	9c 29 04	stz $0429			stz 	tokenBuffer
.d586	b586	9c 25 04	stz $0425			stz 	currentListColour
.d589	b589	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d58b	b58b	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d58e	b58e	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d590	b590	b1 30		lda ($30),y			lda 	(codePtr),y
.d592	b592	aa		tax				tax
.d593	b593	88		dey				dey
.d594	b594	b1 30		lda ($30),y			lda 	(codePtr),y
.d596	b596	20 79 b7	jsr $b779			jsr 	LCLWriteNumberXA
.d599	b599	68		pla				pla 								; adjustment to indent
.d59a	b59a	48		pha				pha 								; save on stack
.d59b	b59b	10 0c		bpl $b5a9			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d59d	b59d	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d59e	b59e	6d 22 04	adc $0422			adc 	listIndent
.d5a1	b5a1	8d 22 04	sta $0422			sta 	listIndent
.d5a4	b5a4	10 03		bpl $b5a9			bpl 	_LCNoAdjust
.d5a6	b5a6	9c 22 04	stz $0422			stz 	listIndent
.d5a9	b5a9					_LCNoAdjust:
.d5a9	b5a9	18		clc				clc		 							; work out actual indent.
.d5aa	b5aa	ad 22 04	lda $0422			lda 	listIndent
.d5ad	b5ad	0a		asl a				asl 	a
.d5ae	b5ae	69 07		adc #$07			adc 	#7
.d5b0	b5b0	85 36		sta $36				sta 	zTemp0
.d5b2	b5b2					_LCPadOut:
.d5b2	b5b2	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5b4	b5b4	20 11 b7	jsr $b711			jsr 	LCLWrite
.d5b7	b5b7	ad 19 04	lda $0419			lda 	tbOffset
.d5ba	b5ba	c5 36		cmp $36				cmp 	zTemp0
.d5bc	b5bc	d0 f4		bne $b5b2			bne 	_LCPadOut
.d5be	b5be	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5c0	b5c0					_LCMainLoop:
.d5c0	b5c0	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5c2	b5c2	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d5c5	b5c5	b1 30		lda ($30),y			lda 	(codePtr),y
.d5c7	b5c7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5c9	b5c9	f0 17		beq $b5e2			beq 	_LCExit
.d5cb	b5cb	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5cd	b5cd	90 1e		bcc $b5ed			bcc 	_LCDoubles
.d5cf	b5cf	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5d1	b5d1	90 2a		bcc $b5fd			bcc 	_LCShiftPunc
.d5d3	b5d3	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5d5	b5d5	90 35		bcc $b60c			bcc 	_LCPunctuation
.d5d7	b5d7	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5d9	b5d9	90 51		bcc $b62c			bcc 	_LCIdentifiers
.d5db	b5db	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5dd	b5dd	90 73		bcc $b652			bcc 	_LCTokens
.d5df	b5df	4c b2 b6	jmp $b6b2			jmp 	_LCData 					; 254-5 are data objects
.d5e2	b5e2					_LCExit:
.d5e2	b5e2	68		pla				pla 								; get old indent adjust
.d5e3	b5e3	30 07		bmi $b5ec			bmi 	_LCExit2
.d5e5	b5e5	18		clc				clc 								; add to indent if +ve
.d5e6	b5e6	6d 22 04	adc $0422			adc 	listIndent
.d5e9	b5e9	8d 22 04	sta $0422			sta 	listIndent
.d5ec	b5ec					_LCExit2:
.d5ec	b5ec	60		rts				rts
.d5ed	b5ed					_LCDoubles:
.d5ed	b5ed	48		pha				pha
.d5ee	b5ee	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5ef	b5ef	29 02		and #$02			and 	#2
.d5f1	b5f1	09 3c		ora #$3c			ora 	#60 						; make < >
.d5f3	b5f3	20 11 b7	jsr $b711			jsr 	LCLWrite
.d5f6	b5f6	68		pla				pla 								; restore, do lower bit
.d5f7	b5f7	29 03		and #$03			and 	#3
.d5f9	b5f9	09 3c		ora #$3c			ora 	#60
.d5fb	b5fb	80 0f		bra $b60c			bra		_LCPunctuation 				; print, increment, loop
.d5fd	b5fd					_LCShiftPunc:
.d5fd	b5fd	aa		tax				tax 								; save in X
.d5fe	b5fe	29 07		and #$07			and 	#7 							; lower 3 bits
.d600	b600	f0 02		beq $b604			beq 	_LCNoAdd
.d602	b602	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d604	b604					_LCNoAdd:
.d604	b604	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d606	b606	90 02		bcc $b60a			bcc 	_LCNoAdd2
.d608	b608	09 20		ora #$20			ora 	#32 						; adds $20
.d60a	b60a					_LCNoAdd2:
.d60a	b60a	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d60c	b60c					_LCPunctuation:
.d60c	b60c	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d60e	b60e	d0 03		bne $b613			bne 	_LCPContinue
.d610	b610	20 27 b7	jsr $b727			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d613	b613					_LCPContinue:
.d613	b613	c9 2e		cmp #$2e			cmp 	#'.'
.d615	b615	f0 08		beq $b61f			beq 	_LCPIsConstant
.d617	b617	c9 30		cmp #$30			cmp 	#'0'
.d619	b619	90 0b		bcc $b626			bcc 	_LCPNotConstant
.d61b	b61b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d61d	b61d	b0 07		bcs $b626			bcs 	_LCPNotConstant
.d61f	b61f					_LCPIsConstant:
.d61f	b61f	48		pha				pha
.d620	b620	a9 87		lda #$87			lda 	#CLIConstant+$80
.d622	b622	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d625	b625	68		pla				pla
.d626	b626					_LCPNotConstant:
.d626	b626	c8		iny				iny 								; consume character
.d627	b627	20 11 b7	jsr $b711			jsr 	LCLWrite 					; write it out.
.d62a	b62a	80 94		bra $b5c0			bra 	_LCMainLoop 				; go round again.
.d62c	b62c					_LCIdentifiers:
.d62c	b62c	18		clc				clc 								; convert to physical address
.d62d	b62d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d62f	b62f	85 37		sta $37				sta 	zTemp0+1
.d631	b631	c8		iny				iny
.d632	b632	b1 30		lda ($30),y			lda 	(codePtr),y
.d634	b634	85 36		sta $36				sta 	zTemp0
.d636	b636	c8		iny				iny
.d637	b637	5a		phy				phy 								; save position
.d638	b638	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d63a	b63a	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d63d	b63d	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d63f	b63f					_LCOutIdentifier:
.d63f	b63f	c8		iny				iny
.d640	b640	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d642	b642	29 7f		and #$7f			and 	#$7F
.d644	b644	20 63 b7	jsr $b763			jsr 	LCLLowerCase
.d647	b647	20 11 b7	jsr $b711			jsr 	LCLWrite
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d64c	b64c	10 f1		bpl $b63f			bpl 	_LCOutIdentifier
.d64e	b64e	7a		ply				ply 								; restore position
.d64f	b64f	4c c0 b5	jmp $b5c0			jmp 	_LCMainLoop
.d652	b652					_LCTokens:
.d652	b652	aa		tax				tax 								; token in X
.d653	b653	a9 33		lda #$33			lda 	#((KeywordSet2) & $FF)
.d655	b655	85 36		sta $36				sta 	0+zTemp0
.d657	b657	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d659	b659	85 37		sta $37				sta 	1+zTemp0
.d65b	b65b	e0 82		cpx #$82			cpx 	#$82
.d65d	b65d	f0 16		beq $b675			beq 	_LCUseShift
.d65f	b65f	a9 43		lda #$43			lda 	#((KeywordSet1) & $FF)
.d661	b661	85 36		sta $36				sta 	0+zTemp0
.d663	b663	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d665	b665	85 37		sta $37				sta 	1+zTemp0
.d667	b667	e0 81		cpx #$81			cpx 	#$81
.d669	b669	f0 0a		beq $b675			beq 	_LCUseShift
.d66b	b66b	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d66d	b66d	85 36		sta $36				sta 	0+zTemp0
.d66f	b66f	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d671	b671	85 37		sta $37				sta 	1+zTemp0
.d673	b673	80 01		bra $b676			bra 	_LCNoShift
.d675	b675					_LCUseShift:
.d675	b675	c8		iny				iny
.d676	b676					_LCNoShift:
.d676	b676	20 3b b7	jsr $b73b			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d679	b679	b1 30		lda ($30),y			lda 	(codePtr),y
.d67b	b67b	aa		tax				tax 								; into X
.d67c	b67c					_LCFindText:
.d67c	b67c	ca		dex				dex
.d67d	b67d	10 0e		bpl $b68d			bpl 	_LCFoundText 				; found text.
.d67f	b67f	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d681	b681	1a		inc a				inc 	a 							; one extra for size
.d682	b682	38		sec				sec 								; one extra for checksum
.d683	b683	65 36		adc $36				adc 	zTemp0 						; go to next token
.d685	b685	85 36		sta $36				sta 	zTemp0
.d687	b687	90 f3		bcc $b67c			bcc 	_LCFindText
.d689	b689	e6 37		inc $37				inc 	zTemp0+1
.d68b	b68b	80 ef		bra $b67c			bra 	_LCFindText
.d68d	b68d					_LCFoundText:
.d68d	b68d	5a		phy				phy 								; save List position
.d68e	b68e	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d690	b690	aa		tax				tax
.d691	b691	a9 86		lda #$86			lda 	#CLIToken+$80
.d693	b693	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d696	b696	a0 02		ldy #$02			ldy 	#2
.d698	b698					_LCCopyToken:
.d698	b698	b1 36		lda ($36),y			lda 	(zTemp0),y
.d69a	b69a	20 63 b7	jsr $b763			jsr 	LCLLowerCase
.d69d	b69d	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6a0	b6a0	c8		iny				iny
.d6a1	b6a1	ca		dex				dex
.d6a2	b6a2	d0 f4		bne $b698			bne 	_LCCopyToken
.d6a4	b6a4	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6a6	b6a6	f0 05		beq $b6ad			beq 	_LCNoSpace
.d6a8	b6a8	a9 20		lda #$20			lda 	#' '
.d6aa	b6aa	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6ad	b6ad					_LCNoSpace:
.d6ad	b6ad	7a		ply				ply 								; restore position.
.d6ae	b6ae	c8		iny				iny 								; consume token
.d6af	b6af	4c c0 b5	jmp $b5c0			jmp 	_LCMainLoop 				; and go around again.
.d6b2	b6b2					_LCData:
.d6b2	b6b2	48		pha				pha 								; save type $FE/$FF
.d6b3	b6b3	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6b5	b6b5	c9 fe		cmp #$fe			cmp 	#$FE
.d6b7	b6b7	f0 22		beq $b6db			beq 	_LCHaveOpener
.d6b9	b6b9	a2 22		ldx #$22			ldx 	#'"'
.d6bb	b6bb	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6bd	b6bd	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d6c0	b6c0	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6c2	b6c2	d0 17		bne $b6db			bne 	_LCHaveOpener
.d6c4	b6c4	88		dey				dey 								; what precedes it ?
.d6c5	b6c5	b1 30		lda ($30),y			lda 	(codePtr),y
.d6c7	b6c7	c8		iny				iny
.d6c8	b6c8	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6ca	b6ca	d0 0f		bne $b6db			bne 	_LCHaveOpener
.d6cc	b6cc	a9 09		lda #$09			lda 	#9 							; tab
.d6ce	b6ce	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6d1	b6d1	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6d3	b6d3	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6d6	b6d6	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6d8	b6d8	20 08 b7	jsr $b708			jsr 	LCLWriteColour
.d6db	b6db					_LCHaveOpener:
.d6db	b6db	8a		txa				txa 								; output prefix (# or ")
.d6dc	b6dc	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6df	b6df	c8		iny				iny 								; get count
.d6e0	b6e0	b1 30		lda ($30),y			lda 	(codePtr),y
.d6e2	b6e2	aa		tax				tax
.d6e3	b6e3	c8		iny				iny 								; point at first character
.d6e4	b6e4					_LCOutData:
.d6e4	b6e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d6e6	b6e6	c9 00		cmp #$00			cmp 	#0
.d6e8	b6e8	f0 03		beq $b6ed			beq 	_LCNoPrint
.d6ea	b6ea	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6ed	b6ed					_LCNoPrint:
.d6ed	b6ed	c8		iny				iny
.d6ee	b6ee	ca		dex				dex
.d6ef	b6ef	d0 f3		bne $b6e4			bne 	_LCOutData
.d6f1	b6f1	68		pla				pla 								; closing " required ?
.d6f2	b6f2	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6f4	b6f4	d0 0f		bne $b705			bne 	_LCNoQuote
.d6f6	b6f6	a9 22		lda #$22			lda 	#'"'
.d6f8	b6f8	20 11 b7	jsr $b711			jsr 	LCLWrite
.d6fb	b6fb	ad 85 07	lda $0785			lda 	EXTTextColour
.d6fe	b6fe	29 0f		and #$0f			and 	#$0F
.d700	b700	09 90		ora #$90			ora 	#$90
.d702	b702	20 11 b7	jsr $b711			jsr 	LCLWrite
.d705	b705					_LCNoQuote:
.d705	b705	4c c0 b5	jmp $b5c0			jmp 	_LCMainLoop
.d708	b708					LCLWriteColour:
.d708	b708	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d70b	b70b	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d70e	b70e	d0 01		bne $b711			bne 	LCLWrite 					; if different, output it
.d710	b710	60		rts				rts
.d711	b711					LCLWrite:
.d711	b711	da		phx				phx
.d712	b712	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d715	b715	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d718	b718	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d71b	b71b	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d71e	b71e	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d720	b720	30 03		bmi $b725			bmi 	_LCLNoColour
.d722	b722	8d 23 04	sta $0423			sta 	lcLastCharacter
.d725	b725					_LCLNoColour:
.d725	b725	fa		plx				plx
.d726	b726	60		rts				rts
.d727	b727					LCLDeleteLastSpace:
.d727	b727	48		pha				pha
.d728	b728	da		phx				phx
.d729	b729	ae 19 04	ldx $0419			ldx 	tbOffset
.d72c	b72c	f0 0a		beq $b738			beq 	_LCDLSExit
.d72e	b72e	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d731	b731	c9 20		cmp #$20			cmp 	#' '
.d733	b733	d0 03		bne $b738			bne 	_LCDLSExit
.d735	b735	ce 19 04	dec $0419			dec 	tbOffset
.d738	b738					_LCDLSExit:
.d738	b738	fa		plx				plx
.d739	b739	68		pla				pla
.d73a	b73a	60		rts				rts
.d73b	b73b					LCLCheckSpaceRequired:
.d73b	b73b	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d73e	b73e	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d740	b740	f0 1b		beq $b75d			beq 	_LCCSRSpace
.d742	b742	c9 29		cmp #$29			cmp 	#')'
.d744	b744	f0 17		beq $b75d			beq 	_LCCSRSpace
.d746	b746	c9 23		cmp #$23			cmp 	#'#'
.d748	b748	f0 13		beq $b75d			beq 	_LCCSRSpace
.d74a	b74a	20 63 b7	jsr $b763			jsr 	LCLLowerCase 				; saves a little effort
.d74d	b74d	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d74f	b74f	90 11		bcc $b762			bcc 	_LCCSRExit
.d751	b751	c9 3a		cmp #$3a			cmp 	#"9"+1
.d753	b753	90 08		bcc $b75d			bcc 	_LCCSRSpace
.d755	b755	c9 61		cmp #$61			cmp 	#"a"
.d757	b757	90 09		bcc $b762			bcc 	_LCCSRExit
.d759	b759	c9 7b		cmp #$7b			cmp 	#"z"+1
.d75b	b75b	b0 05		bcs $b762			bcs 	_LCCSRExit
.d75d	b75d					_LCCSRSpace:
.d75d	b75d	a9 20		lda #$20			lda 	#' '
.d75f	b75f	20 11 b7	jsr $b711			jsr 	LCLWrite
.d762	b762					_LCCSRExit:
.d762	b762	60		rts				rts
.d763	b763					LCLLowerCase:
.d763	b763	c9 41		cmp #$41			cmp 	#"A"
.d765	b765	90 06		bcc $b76d			bcc 	_LCLLCOut
.d767	b767	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d769	b769	b0 02		bcs $b76d			bcs 	_LCLLCOut
.d76b	b76b	69 20		adc #$20			adc 	#$20
.d76d	b76d					_LCLLCOut:
.d76d	b76d	60		rts				rts
.d76e	b76e					LCLUpperCase:
.d76e	b76e	c9 61		cmp #$61			cmp 	#"a"
.d770	b770	90 06		bcc $b778			bcc 	_LCLUCOut
.d772	b772	c9 7b		cmp #$7b			cmp 	#"z"+1
.d774	b774	b0 02		bcs $b778			bcs 	_LCLUCOut
.d776	b776	e9 1f		sbc #$1f			sbc 	#$1F
.d778	b778					_LCLUCOut:
.d778	b778	60		rts				rts
.d779	b779					LCLWriteNumberXA:
.d779	b779	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d77b	b77b					_LCLWNLoop1:
.d77b	b77b	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d77d	b77d					_LCLWNLoop2:
.d77d	b77d	48		pha				pha 								; save initial LSB
.d77e	b77e	38		sec				sec
.d77f	b77f	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d781	b781	f9 b2 b7	sbc $b7b2,y			sbc 	_LCLWNTable,y
.d784	b784	48		pha				pha
.d785	b785	8a		txa				txa
.d786	b786	f9 b3 b7	sbc $b7b3,y			sbc 	_LCLWNTable+1,y
.d789	b789	90 07		bcc $b792			bcc 	_LCLWNUnderflow
.d78b	b78b	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d78d	b78d	aa		tax				tax 								; update X
.d78e	b78e	68		pla				pla 								; restore A
.d78f	b78f	7a		ply				ply 								; throw original
.d790	b790	80 eb		bra $b77d			bra 	_LCLWNLoop2 				; try again.
.d792	b792					_LCLWNUnderflow:
.d792	b792	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d794	b794	d0 06		bne $b79c			bne 	_LCLWNOut
.d796	b796	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d799	b799	3a		dec a				dec 	a
.d79a	b79a	f0 04		beq $b7a0			beq 	_LCLWNNext
.d79c	b79c					_LCLWNOut:
.d79c	b79c	98		tya				tya
.d79d	b79d	20 ac b7	jsr $b7ac			jsr 	_LCLWNOutDigit
.d7a0	b7a0					_LCLWNNext:
.d7a0	b7a0	7a		ply				ply 							 	; restore original value.
.d7a1	b7a1	68		pla				pla
.d7a2	b7a2	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7a4	b7a4	c8		iny				iny
.d7a5	b7a5	c8		iny				iny
.d7a6	b7a6	84 37		sty $37				sty 	zTemp0+1
.d7a8	b7a8	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7aa	b7aa	d0 cf		bne $b77b			bne 	_LCLWNLoop1
.d7ac	b7ac					_LCLWNOutDigit:
.d7ac	b7ac	09 30		ora #$30			ora 	#'0'
.d7ae	b7ae	20 11 b7	jsr $b711			jsr 	LCLWrite
.d7b1	b7b1	60		rts				rts
.d7b2	b7b2					_LCLWNTable:
>d7b2	b7b2	10 27						.word 	10000
>d7b4	b7b4	e8 03						.word 	1000
>d7b6	b7b6	64 00						.word 	100
>d7b8	b7b8	0a 00						.word 	10
.d7ba	b7ba					TOKSearchTable:
.d7ba	b7ba	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7bc	b7bc	85 36		sta $36				sta 	zTemp0
.d7be	b7be	a0 00		ldy #$00			ldy 	#0
.d7c0	b7c0	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7c2	b7c2	85 38		sta $38				sta 	zTemp1
.d7c4	b7c4					_TSTLoop:
.d7c4	b7c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7c6	b7c6	30 49		bmi $b811			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7c8	b7c8	f0 2e		beq $b7f8			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7ca	b7ca	c8		iny				iny 								; get the hash
.d7cb	b7cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7cd	b7cd	88		dey				dey
.d7ce	b7ce	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7d1	b7d1	d0 25		bne $b7f8			bne 	_TSTNext
.d7d3	b7d3	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7d6	b7d6	38		sec				sec
.d7d7	b7d7	ed 00 04	sbc $0400			sbc 	identStart
.d7da	b7da	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7dc	b7dc	d0 1a		bne $b7f8			bne 	_TSTNext
.d7de	b7de	5a		phy				phy 								; save Y , we might fail to match.
.d7df	b7df	c8		iny				iny 								; point to text
.d7e0	b7e0	c8		iny				iny
.d7e1	b7e1	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7e4	b7e4					_TSTCompareName:
.d7e4	b7e4	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7e7	b7e7	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7e9	b7e9	d0 0c		bne $b7f7			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7eb	b7eb	e8		inx				inx
.d7ec	b7ec	c8		iny				iny
.d7ed	b7ed	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7f0	b7f0	d0 f2		bne $b7e4			bne 	_TSTCompareName
.d7f2	b7f2	7a		ply				ply 								; throw Y
.d7f3	b7f3	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7f5	b7f5	38		sec				sec 								; return with CS = passed.
.d7f6	b7f6	60		rts				rts
.d7f7	b7f7					_TSTNextPullY:
.d7f7	b7f7	7a		ply				ply 								; restore current, fall through.
.d7f8	b7f8					_TSTNext:
.d7f8	b7f8	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7fa	b7fa	98		tya				tya
.d7fb	b7fb	18		clc				clc
.d7fc	b7fc	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7fe	b7fe	1a		inc a				inc 	a 							; +1
.d7ff	b7ff	1a		inc a				inc 	a 							; +2
.d800	b800	a8		tay				tay
.d801	b801	10 c1		bpl $b7c4			bpl 	_TSTLoop 					; if Y < $80 loop back
.d803	b803	98		tya				tya 								; add Y to zTemp0 and reset Y
.d804	b804	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d806	b806	18		clc				clc  								; but have tables > 255 bytes
.d807	b807	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d809	b809	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d80b	b80b	90 b7		bcc $b7c4			bcc 	_TSTLoop
.d80d	b80d	e6 37		inc $37				inc 	zTemp0+1
.d80f	b80f	80 b3		bra $b7c4			bra 	_TSTLoop
.d811	b811					_TSTFail:
.d811	b811	18		clc				clc
.d812	b812	60		rts				rts
.d813	b813					Export_TKTokeniseLine:
.d813	b813	20 e0 b9	jsr $b9e0			jsr 	LCLFixLineBufferCase 		; fix line case
.d816	b816	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d818	b818	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d81b	b81b	9c 27 04	stz $0427			stz 	tokenLineNumber
.d81e	b81e	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d821	b821	a2 ff		ldx #$ff			ldx 	#$FF
.d823	b823					_TKFindFirst:
.d823	b823	e8		inx				inx
.d824	b824	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d827	b827	f0 62		beq $b88b			beq 	_TKExit
.d829	b829	c9 20		cmp #$20			cmp 	#' '
.d82b	b82b	90 f6		bcc $b823			bcc 	_TKFindFirst
.d82d	b82d	c9 30		cmp #$30			cmp 	#'0'
.d82f	b82f	90 07		bcc $b838			bcc 	_TKNoLineNumber
.d831	b831	c9 3a		cmp #$3a			cmp 	#'9'+1
.d833	b833	b0 03		bcs $b838			bcs 	_TKNoLineNumber
.d835	b835	20 0a ba	jsr $ba0a			jsr 	TOKExtractLineNumber
.d838	b838					_TKNoLineNumber:
.d838	b838					_TKTokeniseLoop:
.d838	b838	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d83b	b83b	f0 4e		beq $b88b			beq 	_TKExit
.d83d	b83d	e8		inx				inx
.d83e	b83e	c9 20		cmp #$20			cmp 	#' '
.d840	b840	f0 f6		beq $b838			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d842	b842	ca		dex				dex 								; undo last get, A contains character, X is position.
.d843	b843	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d845	b845	f0 68		beq $b8af			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d847	b847	c9 41		cmp #$41			cmp 	#'A'
.d849	b849	90 04		bcc $b84f			bcc 	_TKTokenisePunctuation
.d84b	b84b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d84d	b84d	90 60		bcc $b8af			bcc 	_TKTokeniseIdentifier
.d84f	b84f					_TKTokenisePunctuation:
.d84f	b84f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d851	b851	f0 2e		beq $b881			beq 	_TKString
.d853	b853	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d855	b855	f0 2f		beq $b886			beq 	_TKHexConstant
.d857	b857	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d859	b859	f0 36		beq $b891			beq 	_TKCheckDouble
.d85b	b85b	c9 3e		cmp #$3e			cmp 	#'>'
.d85d	b85d	f0 32		beq $b891			beq 	_TKCheckDouble
.d85f	b85f					_TKStandardPunctuation:
.d85f	b85f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d862	b862	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d864	b864	90 0e		bcc $b874			bcc 	_TKNoShift
.d866	b866	48		pha				pha 								; save. we are about to convert this punctuation token from
.d867	b867	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d869	b869	85 36		sta $36				sta 	zTemp0
.d86b	b86b	68		pla				pla
.d86c	b86c	29 20		and #$20			and 	#32 						; bit 5
.d86e	b86e	4a		lsr a				lsr 	a 							; shift into bit 3
.d86f	b86f	4a		lsr a				lsr 	a
.d870	b870	05 36		ora $36				ora 	zTemp0
.d872	b872	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d874	b874					_TKNoShift:
.d874	b874	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte 				; write the punctuation character
.d877	b877	e8		inx				inx 								; consume the character
.d878	b878	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d87a	b87a	d0 bc		bne $b838			bne 	_TKTokeniseLoop 			; and loop round again.
.d87c	b87c	20 42 b9	jsr $b942			jsr 	TOKCheckComment 			; comment checl
.d87f	b87f	80 b7		bra $b838			bra 	_TKTokeniseLoop
.d881	b881					_TKString:
.d881	b881	20 6f b9	jsr $b96f			jsr 	TOKTokenString
.d884	b884	80 b2		bra $b838			bra 	_TKTokeniseLoop
.d886	b886					_TKHexConstant:
.d886	b886	20 aa b9	jsr $b9aa			jsr 	TOKHexConstant
.d889	b889	80 ad		bra $b838			bra 	_TKTokeniseLoop
.d88b	b88b	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d88d	b88d	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d890	b890	60		rts				rts
.d891	b891					_TKCheckDouble:
.d891	b891	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d894	b894	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d896	b896	90 c7		bcc $b85f			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d898	b898	c9 3f		cmp #$3f			cmp 	#'>'+1
.d89a	b89a	b0 c3		bcs $b85f			bcs 	_TKStandardPunctuation
.d89c	b89c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d89f	b89f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8a1	b8a1	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8a2	b8a2	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8a5	b8a5	38		sec				sec
.d8a6	b8a6	e9 3c		sbc #$3c			sbc 	#'<'
.d8a8	b8a8	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8ab	b8ab	e8		inx				inx 								; consume both
.d8ac	b8ac	e8		inx				inx
.d8ad	b8ad	80 89		bra $b838			bra 	_TKTokeniseLoop
.d8af	b8af					_TKTokeniseIdentifier:
.d8af	b8af	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8b2	b8b2	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8b5	b8b5					_TKCheckLoop:
.d8b5	b8b5	e8		inx				inx 								; look at next, we know first is identifier already.
.d8b6	b8b6	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8b9	b8b9	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8bb	b8bb	f0 f8		beq $b8b5			beq 	_TKCheckLoop
.d8bd	b8bd	c9 30		cmp #$30			cmp	 	#"0"
.d8bf	b8bf	90 0c		bcc $b8cd			bcc 	_TKEndIdentifier
.d8c1	b8c1	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8c3	b8c3	90 f0		bcc $b8b5			bcc 	_TKCheckLoop
.d8c5	b8c5	c9 41		cmp #$41			cmp	 	#"A"
.d8c7	b8c7	90 04		bcc $b8cd			bcc 	_TKEndIdentifier
.d8c9	b8c9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8cb	b8cb	90 e8		bcc $b8b5			bcc 	_TKCheckLoop
.d8cd	b8cd					_TKEndIdentifier:
.d8cd	b8cd	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8d0	b8d0	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8d2	b8d2	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8d4	b8d4	f0 06		beq $b8dc			beq 	_TKHasTypeCharacter
.d8d6	b8d6	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8d8	b8d8	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8da	b8da	d0 07		bne $b8e3			bne 	_TKNoTypeCharacter
.d8dc	b8dc					_TKHasTypeCharacter:
.d8dc	b8dc	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8df	b8df	e8		inx				inx 								; consume the type character
.d8e0	b8e0	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8e3	b8e3					_TKNoTypeCharacter:
.d8e3	b8e3	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8e5	b8e5	d0 09		bne $b8f0			bne 	_TKNoArray
.d8e7	b8e7	e8		inx				inx 								; skip the (
.d8e8	b8e8	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8eb	b8eb	09 04		ora #$04			ora 	#$04
.d8ed	b8ed	8d 04 04	sta $0404			sta 	identTypeByte
.d8f0	b8f0					_TKNoArray:
.d8f0	b8f0	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8f3	b8f3	20 cb b9	jsr $b9cb			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8f6	b8f6	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8f8	b8f8	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d8fa	b8fa	20 ba b7	jsr $b7ba			jsr 	TOKSearchTable
.d8fd	b8fd	a2 00		ldx #$00			ldx 	#0
.d8ff	b8ff	b0 1f		bcs $b920			bcs 	_TKFoundToken
.d901	b901	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d903	b903	a9 43		lda #$43			lda 	#(KeywordSet1) & $FF
.d905	b905	20 ba b7	jsr $b7ba			jsr 	TOKSearchTable
.d908	b908	a2 81		ldx #$81			ldx 	#$81
.d90a	b90a	b0 14		bcs $b920			bcs 	_TKFoundToken
.d90c	b90c	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d90e	b90e	a9 33		lda #$33			lda 	#(KeywordSet2) & $FF
.d910	b910	20 ba b7	jsr $b7ba			jsr 	TOKSearchTable
.d913	b913	a2 82		ldx #$82			ldx 	#$82
.d915	b915	b0 09		bcs $b920			bcs 	_TKFoundToken
.d917	b917	20 5b ba	jsr $ba5b			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d91a	b91a	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d91d	b91d	4c 38 b8	jmp $b838			jmp 	_TKTokeniseLoop 			; and go round again.
.d920	b920					_TKFoundToken:
.d920	b920	48		pha				pha 								; save token
.d921	b921	8a		txa				txa 								; shift in X, is there one ?
.d922	b922	f0 03		beq $b927			beq 	_TKNoTShift
.d924	b924	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte 				; if so, write it out
.d927	b927					_TKNoTShift:
.d927	b927	68		pla				pla 								; restore and write token
.d928	b928	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d92b	b92b	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d92d	b92d	d0 0d		bne $b93c			bne 	_TKNotRem 			 		; not shifted ?
.d92f	b92f	c9 d5		cmp #$d5			cmp 	#KWD_REM
.d931	b931	d0 09		bne $b93c			bne 	_TKNotRem
.d933	b933	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d936	b936	20 42 b9	jsr $b942			jsr 	TOKCheckComment
.d939	b939	4c 38 b8	jmp $b838			jmp 	_TKTokeniseLoop
.d93c	b93c					_TKNotRem:
.d93c	b93c	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d93f	b93f	4c 38 b8	jmp $b838			jmp 	_TKTokeniseLoop 			; and go round again.
.d942	b942					TOKCheckComment:
.d942	b942	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d945	b945	e8		inx				inx
.d946	b946	c9 20		cmp #$20			cmp 	#' '
.d948	b948	f0 f8		beq $b942			beq 	TOKCheckComment
.d94a	b94a	ca		dex				dex 								; first non space character
.d94b	b94b	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d94d	b94d	f0 1f		beq $b96e			beq 	_TOKCCExit 					; then we are okay
.d94f	b94f	c9 00		cmp #$00			cmp 	#0 							; EOL
.d951	b951	f0 1b		beq $b96e			beq 	_TOKCCExit 					; then we are okay
.d953	b953	da		phx				phx
.d954	b954					_TOKCCLowerCase:
.d954	b954	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d957	b957	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d959	b959	90 09		bcc $b964			bcc 	_TOKKCNotUC
.d95b	b95b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d95d	b95d	b0 05		bcs $b964			bcs 	_TOKKCNotUC
.d95f	b95f	49 20		eor #$20			eor 	#$20
.d961	b961	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d964	b964					_TOKKCNotUC:
.d964	b964	e8		inx				inx
.d965	b965	c9 00		cmp #$00			cmp 	#0
.d967	b967	d0 eb		bne $b954			bne 	_TOKCCLowerCase
.d969	b969	fa		plx				plx
.d96a	b96a	ca		dex				dex 								; tokenise string expects initial skip.
.d96b	b96b	20 6f b9	jsr $b96f			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d96e	b96e					_TOKCCExit:
.d96e	b96e	60		rts				rts
.d96f	b96f					TOKTokenString:
.d96f	b96f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d971	b971	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d974	b974	e8		inx				inx									; start of quoted string.
.d975	b975	da		phx				phx 								; push start of string on top
.d976	b976	ca		dex				dex 								; because we pre-increment
.d977	b977					_TSFindEnd:
.d977	b977	e8		inx				inx
.d978	b978	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d97b	b97b	f0 04		beq $b981			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d97d	b97d	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d97f	b97f	d0 f6		bne $b977			bne 	_TSFindEnd
.d981	b981					_TSEndOfString:
.d981	b981	7a		ply				ply  								; so now Y is first character, X is character after end.
.d982	b982	48		pha				pha 								; save terminating character
.d983	b983	20 8b b9	jsr $b98b			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d986	b986	68		pla				pla 								; terminating character
.d987	b987	f0 01		beq $b98a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d989	b989	e8		inx				inx
.d98a	b98a					_TSNotQuote:
.d98a	b98a	60		rts				rts
.d98b	b98b					TOKWriteBlockXY:
.d98b	b98b	86 36		stx $36				stx 	zTemp0 						; save end character
.d98d	b98d	98		tya				tya 								; use 2's complement to work out the byte size
.d98e	b98e	49 ff		eor #$ff			eor 	#$FF
.d990	b990	38		sec				sec
.d991	b991	65 36		adc $36				adc 	zTemp0
.d993	b993	1a		inc a				inc 	a 							; one extra for NULL
.d994	b994	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d997	b997					_TOBlockLoop:
.d997	b997	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d999	b999	f0 09		beq $b9a4			beq 	_TOBlockExit
.d99b	b99b	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d99e	b99e	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d9a1	b9a1	c8		iny				iny
.d9a2	b9a2	80 f3		bra $b997			bra 	_TOBlockLoop
.d9a4	b9a4					_TOBlockExit:
.d9a4	b9a4	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9a6	b9a6	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d9a9	b9a9	60		rts				rts
.d9aa	b9aa					TOKHexConstant:
.d9aa	b9aa	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9ac	b9ac	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.d9af	b9af	e8		inx				inx									; start of quoted string.
.d9b0	b9b0	da		phx				phx 								; push start of constant on top
.d9b1	b9b1	ca		dex				dex
.d9b2	b9b2					_THFindLoop:
.d9b2	b9b2	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9b3	b9b3	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9b6	b9b6	c9 30		cmp #$30			cmp 	#"0"
.d9b8	b9b8	90 0c		bcc $b9c6			bcc 	_THFoundEnd
.d9ba	b9ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9bc	b9bc	90 f4		bcc $b9b2			bcc 	_THFindLoop
.d9be	b9be	c9 41		cmp #$41			cmp 	#"A"
.d9c0	b9c0	90 04		bcc $b9c6			bcc 	_THFoundEnd
.d9c2	b9c2	c9 47		cmp #$47			cmp 	#"F"+1
.d9c4	b9c4	90 ec		bcc $b9b2			bcc 	_THFindLoop
.d9c6	b9c6					_THFoundEnd:
.d9c6	b9c6	7a		ply				ply 								; restore start
.d9c7	b9c7	20 8b b9	jsr $b98b			jsr 	TOKWriteBlockXY 			; output the block
.d9ca	b9ca	60		rts				rts
.d9cb	b9cb					TOKCalculateHash:
.d9cb	b9cb	da		phx				phx
.d9cc	b9cc	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9cf	b9cf	a9 00		lda #$00			lda 	#0
.d9d1	b9d1					_TCHLoop:
.d9d1	b9d1	18		clc				clc
.d9d2	b9d2	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9d5	b9d5	e8		inx				inx
.d9d6	b9d6	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9d9	b9d9	d0 f6		bne $b9d1			bne 	_TCHLoop
.d9db	b9db	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9de	b9de	fa		plx				plx
.d9df	b9df	60		rts				rts
.d9e0	b9e0					LCLFixLineBufferCase:
.d9e0	b9e0	a2 00		ldx #$00			ldx 	#0
.d9e2	b9e2					_FLBCLoop:
.d9e2	b9e2	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9e5	b9e5	f0 22		beq $ba09			beq 	_FLBCExit 					; end of string.
.d9e7	b9e7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9e9	b9e9	f0 11		beq $b9fc			beq 	_FLBCInQuotes
.d9eb	b9eb	e8		inx				inx
.d9ec	b9ec	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9ee	b9ee	90 f2		bcc $b9e2			bcc 	_FLBCLoop
.d9f0	b9f0	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9f2	b9f2	b0 ee		bcs $b9e2			bcs 	_FLBCLoop
.d9f4	b9f4	38		sec				sec 								; make U/C
.d9f5	b9f5	e9 20		sbc #$20			sbc 	#32
.d9f7	b9f7	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d9fa	b9fa	80 e6		bra $b9e2			bra 	_FLBCLoop
.d9fc	b9fc					_FLBCInQuotes:
.d9fc	b9fc	e8		inx				inx 								; advance
.d9fd	b9fd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da00	ba00	f0 07		beq $ba09			beq 	_FLBCExit 					; exit on EOS
.da02	ba02	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da04	ba04	d0 f6		bne $b9fc			bne 	_FLBCInQuotes
.da06	ba06	e8		inx				inx 								; skip over it
.da07	ba07	80 d9		bra $b9e2			bra 	_FLBCLoop
.da09	ba09					_FLBCExit:
.da09	ba09	60		rts				rts
.da0a	ba0a					TOKExtractLineNumber:
.da0a	ba0a	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da0d	ba0d	48		pha				pha
.da0e	ba0e	ad 27 04	lda $0427			lda 	tokenLineNumber
.da11	ba11	48		pha				pha
.da12	ba12	20 48 ba	jsr $ba48			jsr 	_LCLNTimes2 				; line # x 2
.da15	ba15	20 48 ba	jsr $ba48			jsr 	_LCLNTimes2 				; line # x 4
.da18	ba18	18		clc				clc 								; add stacked value
.da19	ba19	68		pla				pla
.da1a	ba1a	6d 27 04	adc $0427			adc 	tokenLineNumber
.da1d	ba1d	8d 27 04	sta $0427			sta 	tokenLineNumber
.da20	ba20	68		pla				pla
.da21	ba21	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da24	ba24	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da27	ba27	20 48 ba	jsr $ba48			jsr 	_LCLNTimes2 				; line # x 10
.da2a	ba2a	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da2d	ba2d	e8		inx				inx
.da2e	ba2e	29 0f		and #$0f			and 	#15 						; add to line #
.da30	ba30	18		clc				clc
.da31	ba31	6d 27 04	adc $0427			adc 	tokenLineNumber
.da34	ba34	8d 27 04	sta $0427			sta 	tokenLineNumber
.da37	ba37	90 03		bcc $ba3c			bcc 	_TLENNoCarry
.da39	ba39	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da3c	ba3c					_TLENNoCarry:
.da3c	ba3c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da3f	ba3f	c9 30		cmp #$30			cmp 	#'0'
.da41	ba41	90 04		bcc $ba47			bcc 	_TLENExit
.da43	ba43	c9 3a		cmp #$3a			cmp 	#'9'+1
.da45	ba45	90 c3		bcc $ba0a			bcc 	TOKExtractLineNumber
.da47	ba47					_TLENExit:
.da47	ba47	60		rts				rts
.da48	ba48					_LCLNTimes2:
.da48	ba48	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da4b	ba4b	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da4e	ba4e	60		rts				rts
.da4f	ba4f					TOKWriteByte:
.da4f	ba4f	da		phx				phx
.da50	ba50	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da53	ba53	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da56	ba56	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da59	ba59	fa		plx				plx
.da5a	ba5a	60		rts				rts
.da5b	ba5b					TOKCheckCreateVariableRecord:
.da5b	ba5b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da5d	ba5d	85 36		sta $36				sta 	0+zTemp0
.da5f	ba5f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da61	ba61	85 37		sta $37				sta 	1+zTemp0
.da63	ba63					_CCVSearch:
.da63	ba63	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da65	ba65	f0 2c		beq $ba93			beq 	_CCVFail
.da67	ba67	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da69	ba69	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da6b	ba6b	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da6e	ba6e	d0 16		bne $ba86			bne 	_CCVNext
.da70	ba70	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da72	ba72	ae 00 04	ldx $0400			ldx 	identStart
.da75	ba75					_CCVCompare:
.da75	ba75	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da78	ba78	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da7a	ba7a	e8		inx				inx 								; advance pointers
.da7b	ba7b	c8		iny				iny
.da7c	ba7c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da7d	ba7d	d0 07		bne $ba86			bne 	_CCVNext  					; didn't match go to next.
.da7f	ba7f	90 f4		bcc $ba75			bcc 	_CCVCompare 				; not finished yet.
.da81	ba81	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da84	ba84	f0 41		beq $bac7			beq 	_CCVFound 					; yes, we were successful
.da86	ba86					_CCVNext:
.da86	ba86	18		clc				clc 								; go to next record.
.da87	ba87	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da89	ba89	65 36		adc $36				adc 	zTemp0
.da8b	ba8b	85 36		sta $36				sta 	zTemp0
.da8d	ba8d	90 d4		bcc $ba63			bcc 	_CCVSearch
.da8f	ba8f	e6 37		inc $37				inc 	zTemp0+1
.da91	ba91	80 d0		bra $ba63			bra 	_CCVSearch
.da93	ba93					_CCVFail:
.da93	ba93	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da95	ba95	ad 03 04	lda $0403			lda 	identHash
.da98	ba98	91 36		sta ($36),y			sta 	(zTemp0),y
.da9a	ba9a	c8		iny				iny 								; offset 2 is the type byte
.da9b	ba9b	ad 04 04	lda $0404			lda 	identTypeByte
.da9e	ba9e	91 36		sta ($36),y			sta 	(zTemp0),y
.daa0	baa0	c8		iny				iny
.daa1	baa1					_CCVData:
.daa1	baa1	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daa3	baa3	91 36		sta ($36),y			sta 	(zTemp0),y
.daa5	baa5	c8		iny				iny
.daa6	baa6	c0 08		cpy #$08			cpy 	#8
.daa8	baa8	90 f7		bcc $baa1			bcc 	_CCVData
.daaa	baaa	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.daad	baad					_CCVCopyName:
.daad	baad	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.dab0	bab0	91 36		sta ($36),y			sta 	(zTemp0),y
.dab2	bab2	e8		inx				inx
.dab3	bab3	c8		iny				iny
.dab4	bab4	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dab7	bab7	d0 f4		bne $baad			bne 	_CCVCopyName
.dab9	bab9	98		tya				tya 								; patch offset
.daba	baba	92 36		sta ($36)			sta 	(zTemp0)
.dabc	babc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dabe	babe	91 36		sta ($36),y			sta 	(zTemp0),y
.dac0	bac0	88		dey				dey
.dac1	bac1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dac3	bac3	09 80		ora #$80			ora 	#$80
.dac5	bac5	91 36		sta ($36),y			sta 	(zTemp0),y
.dac7	bac7					_CCVFound:
.dac7	bac7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dac9	bac9	38		sec				sec
.daca	baca	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dacc	bacc	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dace	bace	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.dad1	bad1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dad3	bad3	20 4f ba	jsr $ba4f			jsr 	TOKWriteByte
.dad6	bad6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dad7	bad7					SNDCheckChannel:
.dad7	bad7	aa		tax				tax
.dad8	bad8	bd 4e 09	lda $094e,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dadb	badb	d0 38		bne $bb15			bne 	_SNDCCExit
.dadd	badd	da		phx				phx 								; save current channel
.dade	bade	8a		txa				txa 								; put in A
.dadf	badf	20 5b bb	jsr $bb5b			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dae2	bae2	68		pla				pla 								; channel # in A
.dae3	bae3	90 30		bcc $bb15			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dae5	bae5	a8		tay				tay 								; Y is the channel #
.dae6	bae6	bd 43 08	lda $0843,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.dae9	bae9	99 42 09	sta $0942,y			sta 	SNDPitchLow,y
.daec	baec	bd 44 08	lda $0844,x			lda 	SNDQueue+2,x
.daef	baef	99 46 09	sta $0946,y			sta 	SNDPitchHigh,y
.daf2	baf2	bd 45 08	lda $0845,x			lda 	SNDQueue+3,x
.daf5	baf5	99 4a 09	sta $094a,y			sta 	SNDVolume,y
.daf8	baf8	bd 46 08	lda $0846,x			lda 	SNDQueue+4,x
.dafb	bafb	99 4e 09	sta $094e,y			sta 	SNDTimeLeft,y
.dafe	bafe	bd 47 08	lda $0847,x			lda 	SNDQueue+5,x
.db01	bb01	99 52 09	sta $0952,y			sta 	SNDAdjustLow,y
.db04	bb04	bd 48 08	lda $0848,x			lda 	SNDQueue+6,x
.db07	bb07	99 56 09	sta $0956,y			sta 	SNDAdjustHigh,y
.db0a	bb0a	5a		phy				phy 								; save channel #
.db0b	bb0b	20 75 bb	jsr $bb75			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db0e	bb0e	ce 41 08	dec $0841			dec 	SNDLength 					; reduce the queue length.
.db11	bb11	68		pla				pla
.db12	bb12	20 16 bb	jsr $bb16			jsr 	SNDUpdateNote 				; update channel A
.db15	bb15					_SNDCCExit:
.db15	bb15	60		rts				rts
.db16	bb16					SNDUpdateNote:
.db16	bb16	aa		tax				tax 								; so we can access records
.db17	bb17	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db18	bb18	0a		asl a				asl 	a
.db19	bb19	0a		asl a				asl 	a
.db1a	bb1a	0a		asl a				asl 	a
.db1b	bb1b	0a		asl a				asl 	a
.db1c	bb1c	8d 40 08	sta $0840			sta 	SNDChannelBits
.db1f	bb1f	bd 4e 09	lda $094e,x			lda 	SNDTimeLeft,x 				; are we silent
.db22	bb22	f0 2e		beq $bb52			beq 	_SNDUNIsSilent
.db24	bb24	ad 40 08	lda $0840			lda 	SNDChannelBits 				; push channel bits on stack
.db27	bb27	48		pha				pha
.db28	bb28	bd 42 09	lda $0942,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db2b	bb2b	29 0f		and #$0f			and 	#$0F
.db2d	bb2d	0d 40 08	ora $0840			ora 	SNDChannelBits 				; set channel bits
.db30	bb30	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db32	bb32	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts
.db35	bb35	bd 46 09	lda $0946,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db38	bb38	8d 40 08	sta $0840			sta 	SNDChannelBits
.db3b	bb3b	bd 42 09	lda $0942,x			lda 	SNDPitchLow,x
.db3e	bb3e	4e 40 08	lsr $0840			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db41	bb41	6a		ror a				ror 	a
.db42	bb42	4e 40 08	lsr $0840			lsr 	SNDChannelBits
.db45	bb45	6a		ror a				ror 	a
.db46	bb46	4a		lsr a				lsr 	a 							; put in bits 0-5
.db47	bb47	4a		lsr a				lsr 	a
.db48	bb48	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts 				; write as rest of pitch register
.db4b	bb4b	68		pla				pla
.db4c	bb4c	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db4e	bb4e	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts
.db51	bb51	60		rts				rts
.db52	bb52					_SNDUNIsSilent:
.db52	bb52	ad 40 08	lda $0840			lda 	SNDChannelBits 				; channel bits
.db55	bb55	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db57	bb57	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts 				; write to the ports
.db5a	bb5a	60		rts				rts
.db5b	bb5b					SNDFindNextNoteForA:
.db5b	bb5b	ac 41 08	ldy $0841			ldy 	SNDLength 					; queue size into Y
.db5e	bb5e	f0 13		beq $bb73			beq 	_SNDFNNFail 				; queue empty.
.db60	bb60	a2 00		ldx #$00			ldx 	#0
.db62	bb62					_SNDFNNSearch:
.db62	bb62	dd 42 08	cmp $0842,x			cmp 	SNDQueue,x 					; does it match the channel
.db65	bb65	38		sec				sec
.db66	bb66	f0 0c		beq $bb74			beq 	_SNDFNNExit 				; if so exit with CS.
.db68	bb68	e8		inx				inx 								; next queue slot.
.db69	bb69	e8		inx				inx
.db6a	bb6a	e8		inx				inx
.db6b	bb6b	e8		inx				inx
.db6c	bb6c	e8		inx				inx
.db6d	bb6d	e8		inx				inx
.db6e	bb6e	e8		inx				inx
.db6f	bb6f	e8		inx				inx
.db70	bb70	88		dey				dey 								; done the whole queue
.db71	bb71	d0 ef		bne $bb62			bne 	_SNDFNNSearch 				; no, go back.
.db73	bb73					_SNDFNNFail:
.db73	bb73	18		clc				clc
.db74	bb74					_SNDFNNExit:
.db74	bb74	60		rts				rts
.db75	bb75					SNDDeleteXFromQueue:
.db75	bb75	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db77	bb77	f0 09		beq $bb82			beq 	_SNDDXExit
.db79	bb79	bd 4a 08	lda $084a,x			lda 	SNDQueue+8,x
.db7c	bb7c	9d 42 08	sta $0842,x			sta 	SNDQueue,x
.db7f	bb7f	e8		inx				inx
.db80	bb80	80 f3		bra $bb75			bra 	SNDDeleteXFromQueue
.db82	bb82					_SNDDXExit:
.db82	bb82	60		rts				rts
.0840						SNDChannelBits:
>0840								.fill 	1
.db83	bb83					SNDQueueRequest:
.db83	bb83	86 36		stx $36				stx 	zTemp0						; save queue address
.db85	bb85	84 37		sty $37				sty 	zTemp0+1
.db87	bb87	ae 41 08	ldx $0841			ldx 	SNDLength 					; queue is full, can't take any more.
.db8a	bb8a	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db8c	bb8c	f0 21		beq $bbaf			beq 	_SNDQRExit
.db8e	bb8e	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db90	bb90	48		pha				pha
.db91	bb91	8a		txa				txa  								; get offset in queue buffer/
.db92	bb92	0a		asl a				asl 	a
.db93	bb93	0a		asl a				asl 	a
.db94	bb94	0a		asl a				asl 	a
.db95	bb95	aa		tax				tax
.db96	bb96	68		pla				pla 								; get back and push again
.db97	bb97	48		pha				pha
.db98	bb98	9d 42 08	sta $0842,x			sta 	SNDQueue+0,x 				; save the channel #
.db9b	bb9b	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db9d	bb9d					_SNDQCopy:
.db9d	bb9d	b1 36		lda ($36),y			lda 	(zTemp0),y
.db9f	bb9f	e8		inx				inx
.dba0	bba0	c8		iny				iny
.dba1	bba1	9d 42 08	sta $0842,x			sta 	SNDQueue,x
.dba4	bba4	c0 06		cpy #$06			cpy 	#6
.dba6	bba6	d0 f5		bne $bb9d			bne 	_SNDQCopy
.dba8	bba8	ee 41 08	inc $0841			inc 	SNDLength 					; bump queue length.
.dbab	bbab	68		pla				pla 								; get channel # back
.dbac	bbac	20 d7 ba	jsr $bad7			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbaf	bbaf					_SNDQRExit:
.dbaf	bbaf	60		rts				rts
.dbb0	bbb0					SNDSilenceChannel:
.dbb0	bbb0	aa		tax				tax 								; zero time left.
.dbb1	bbb1	9e 4e 09	stz $094e,x			stz 	SNDTimeLeft,x
.dbb4	bbb4	0a		asl a				asl 	a 							; shift into position
.dbb5	bbb5	0a		asl a				asl 	a
.dbb6	bbb6	0a		asl a				asl 	a
.dbb7	bbb7	0a		asl a				asl 	a
.dbb8	bbb8	0a		asl a				asl 	a
.dbb9	bbb9	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbbb	bbbb	20 bf bb	jsr $bbbf			jsr 	SNDWritePorts
.dbbe	bbbe	60		rts				rts
.dbbf	bbbf					SNDWritePorts:
.dbbf	bbbf	da		phx				phx 								; save X
.dbc0	bbc0	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbc2	bbc2	64 01		stz $01				stz 	1 							; access I/O page 0
.dbc4	bbc4	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbc7	bbc7	8d 10 d6	sta $d610			sta 	$D610
.dbca	bbca	86 01		stx $01				stx 	1 							; restore I/O
.dbcc	bbcc	fa		plx				plx 								; restore X
.dbcd	bbcd	60		rts				rts
.dbce	bbce					Export_SNDCommand:
.dbce	bbce	da		phx				phx 								; save XY
.dbcf	bbcf	5a		phy				phy
.dbd0	bbd0	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbd2	bbd2	f0 1d		beq $bbf1			beq 	_SNDInitialise
.dbd4	bbd4	90 28		bcc $bbfe			bcc 	_SNDExit
.dbd6	bbd6	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbd8	bbd8	f0 17		beq $bbf1			beq 	_SNDSilence
.dbda	bbda	b0 22		bcs $bbfe			bcs 	_SNDExit
.dbdc	bbdc	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbde	bbde	b0 09		bcs $bbe9			bcs 	_SNDQueryPlay
.dbe0	bbe0	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbe2	bbe2	b0 1a		bcs $bbfe			bcs 	_SNDExit
.dbe4	bbe4	20 83 bb	jsr $bb83			jsr 	SNDQueueRequest
.dbe7	bbe7	80 15		bra $bbfe			bra 	_SNDExit
.dbe9	bbe9					_SNDQueryPlay:
.dbe9	bbe9	29 03		and #$03			and 	#3 							; get channel #
.dbeb	bbeb	aa		tax				tax
.dbec	bbec	bd 4e 09	lda $094e,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbef	bbef	80 0d		bra $bbfe			bra 	_SNDExit
.dbf1	bbf1					_SNDInitialise:
.dbf1	bbf1					_SNDSilence:
.dbf1	bbf1	9c 41 08	stz $0841			stz 	SNDLength 					; empty the queue.
.dbf4	bbf4	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dbf6	bbf6					_SNDSilenceLoop:
.dbf6	bbf6	48		pha				pha
.dbf7	bbf7	20 b0 bb	jsr $bbb0			jsr 	SNDSilenceChannel
.dbfa	bbfa	68		pla				pla
.dbfb	bbfb	3a		dec a				dec 	a
.dbfc	bbfc	10 f8		bpl $bbf6			bpl 	_SNDSilenceLoop
.dbfe	bbfe					_SNDExit:
.dbfe	bbfe	7a		ply				ply
.dbff	bbff	fa		plx				plx
.dc00	bc00	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0841						SNDLength:
>0841								.fill 	1
.0842						SNDQueue:
>0842								.fill 	SNDQueueSize * 8
.0942						SNDPitchLow:
>0942								.fill 	4
.0946						SNDPitchHigh:
>0946								.fill 	4
.094a						SNDVolume:
>094a								.fill 	4
.094e						SNDTimeLeft:
>094e								.fill 	4
.0952						SNDAdjustLow:
>0952								.fill 	4
.0956						SNDAdjustHigh:
>0956								.fill 	4
.dc01	bc01					Export_SNDUpdate:
.dc01	bc01					PagedSNDUpdate:
.dc01	bc01	ad 4e 09	lda $094e			lda 	SNDTimeLeft+0 				; look at time remaining
.dc04	bc04	f0 05		beq $bc0b			beq 	_SNDUNot0 					; not playing
.dc06	bc06	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc08	bc08	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel 			; update it.
.dc0b	bc0b					_SNDUNot0:
.dc0b	bc0b	ad 4f 09	lda $094f			lda 	SNDTimeLeft+1
.dc0e	bc0e	f0 05		beq $bc15			beq 	_SNDUNot1
.dc10	bc10	a2 01		ldx #$01			ldx 	#1
.dc12	bc12	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel
.dc15	bc15					_SNDUNot1:
.dc15	bc15	ad 50 09	lda $0950			lda 	SNDTimeLeft+2
.dc18	bc18	f0 05		beq $bc1f			beq 	_SNDUNot2
.dc1a	bc1a	a2 02		ldx #$02			ldx 	#2
.dc1c	bc1c	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel
.dc1f	bc1f					_SNDUNot2:
.dc1f	bc1f	ad 51 09	lda $0951			lda 	SNDTimeLeft+3
.dc22	bc22	f0 05		beq $bc29			beq 	_SNDUNot3
.dc24	bc24	a2 03		ldx #$03			ldx 	#3
.dc26	bc26	20 2a bc	jsr $bc2a			jsr 	SNDUpdateChannel
.dc29	bc29					_SNDUNot3:
.dc29	bc29	60		rts				rts
.dc2a	bc2a					SNDUpdateChannel:
.dc2a	bc2a	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc2c	bc2c	f0 2c		beq $bc5a			beq 	_SNDUCExit
.dc2e	bc2e	3a		dec a				dec 	a 							; decrement and update timer
.dc2f	bc2f	9d 4e 09	sta $094e,x			sta 	SNDTimeLeft,x
.dc32	bc32	f0 1d		beq $bc51			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc34	bc34	bd 52 09	lda $0952,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc37	bc37	1d 56 09	ora $0956,x			ora 	SNDAdjustHigh,x
.dc3a	bc3a	f0 1e		beq $bc5a			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc3c	bc3c	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc3d	bc3d	bd 42 09	lda $0942,x			lda 	SNDPitchLow,x
.dc40	bc40	7d 52 09	adc $0952,x			adc 	SNDAdjustLow,x
.dc43	bc43	9d 42 09	sta $0942,x			sta 	SNDPitchLow,x
.dc46	bc46	bd 46 09	lda $0946,x			lda 	SNDPitchHigh,x
.dc49	bc49	7d 56 09	adc $0956,x			adc 	SNDAdjustHigh,x
.dc4c	bc4c	29 03		and #$03			and 	#3
.dc4e	bc4e	9d 46 09	sta $0946,x			sta 	SNDPitchHigh,x
.dc51	bc51					_SNDUCUpdate:
.dc51	bc51	8a		txa				txa 								; which channel.
.dc52	bc52	48		pha				pha
.dc53	bc53	20 16 bb	jsr $bb16			jsr 	SNDUpdateNote 				; update the current note
.dc56	bc56	68		pla				pla
.dc57	bc57	20 d7 ba	jsr $bad7			jsr 	SNDCheckChannel 			; more to do ?
.dc5a	bc5a					_SNDUCExit:
.dc5a	bc5a	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
