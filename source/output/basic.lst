
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Jan 21 10:00:53 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56				        .text	$f2,$56         			; Signature
>8002		03				        .byte   3               			; 3 blocks
>8003		04				        .byte   4               			; mount at $8000
>8004		40 80				        .word   Boot 	      				; Start here
>8006		00 00				        .word   0 			               	; version
>8008		00 00				        .word   0               			; kernel
>800a		53 75 70 65 72 42 41 53		        .text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 d8 bb	jsr $bbd8		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 0b bc	jsr $bc0b		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 89 b5	jsr $b589		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 1d b8	jsr $b81d		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a2		09 80		ora #$80			ora 	#$80
.80a4		85 00		sta $00				sta 	0
.80a6		20 41 a7	jsr $a741			jsr		UpdateFont 					; update font if between FPGA updates.
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80cb		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80cd		20 19 82	jsr $8219			jsr 	KNLSetDrive
.80d0		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80d2		aa		tax				tax
.80d3		a8		tay				tay
.80d4		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d7		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d9		20 75 80	jsr $8075			jsr 	SNDCommand
.80dc		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e1		a9 09		lda #$09			lda 	#9
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e9		64 01		stz $01				stz 	1
.80eb		ad ad d6	lda $d6ad			lda 	$D6AD
.80ee		20 ee 83	jsr $83ee			jsr 	PrintHex
.80f1		ad ac d6	lda $d6ac			lda 	$D6AC
.80f4		20 ee 83	jsr $83ee			jsr 	PrintHex
.80f7		ad ab d6	lda $d6ab			lda 	$D6AB
.80fa		20 ee 83	jsr $83ee			jsr 	PrintHex
.80fd		ad aa d6	lda $d6aa			lda 	$D6AA
.8100		20 ee 83	jsr $83ee			jsr 	PrintHex
.8103		a9 20		lda #$20			lda 	#32
.8105		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8108		ad a8 d6	lda $d6a8			lda 	$D6A8
.810b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810e		ad a9 d6	lda $d6a9			lda 	$D6A9
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8116		a9 24		lda #$24			lda 	#Prompt & $FF
.8118		20 15 98	jsr $9815			jsr 	PrintStringXA
.811b		20 e8 91	jsr $91e8			jsr 	NewProgram 					; erase current program
.811e		4c 31 86	jmp $8631			jmp 	WarmStart					; make same size.
.8121		4c 31 86	jmp $8631			jmp 	WarmStart
>8124		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8126		09 09 32 31 2f 30 31 2f			.text 9,9,"21/01/23 32"
>812e		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>8133		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8137						ProcessEvents:
.8137		20 58 82	jsr $8258			jsr 	KNLSetEventPointer
.813a		20 a8 81	jsr $81a8			jsr     GetNextEvent 				; get next event
.813d		b0 27		bcs $8166			bcs 	_PEExitZ 					; nothing left to process.
.813f		ad 82 07	lda $0782			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8142		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8144		d0 f1		bne $8137			bne 	ProcessEvents
.8146		ad 88 07	lda $0788			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8149		d0 ec		bne $8137			bne 	ProcessEvents
.814b		ad 87 07	lda $0787			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814e		c9 03		cmp #$03			cmp 	#3
.8150		f0 11		beq $8163			beq 	_PEReturnBreak  			; no, keep going.
.8152		da		phx				phx
.8153		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8156		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8158		f0 06		beq $8160			beq 	_PENoQueue
.815a		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815d		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8160						_PENoQueue:
.8160		fa		plx				plx
.8161		80 d4		bra $8137			bra 	ProcessEvents
.8163						_PEReturnBreak:
.8163		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8165		60		rts				rts
.8166						_PEExitZ:
.8166		a9 00		lda #$00			lda 	#0
.8168		60		rts				rts
.8169						PopKeyboardQueue:
.8169		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.816c		f0 17		beq $8185			beq 	_PKQExit 					; zero, then exit.
.816e		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8171		48		pha				pha
.8172		da		phx				phx 								; drop head of queue
.8173		a2 00		ldx #$00			ldx 	#0
.8175						_PKQLoop:
.8175		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8178		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.817b		e8		inx				inx
.817c		e0 07		cpx #$07			cpx 	#7
.817e		d0 f5		bne $8175			bne 	_PKQLoop
.8180		fa		plx				plx
.8181		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8184		68		pla				pla 								; restore head of queue.
.8185						_PKQExit:
.8185		60		rts				rts
.8186						KNLGetKeyPressed:
.8186		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8189		d0 de		bne $8169			bne 	PopKeyboardQueue 			; if so, pop and return it
.818b		20 37 81	jsr $8137			jsr 	ProcessEvents 				; process any outstanding events
.818e		a9 00		lda #$00			lda 	#0
.8190		60		rts				rts
.8191						KNLGetSingleCharacter:
.8191		20 86 81	jsr $8186			jsr 	KNLGetKeyPressed
.8194		c9 00		cmp #$00			cmp 	#0
.8196		f0 f9		beq $8191			beq 	KNLGetSingleCharacter
.8198		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8199						TickHandler:
.8199		5a		phy				phy 								; need to preserve Y
.819a		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819d		7a		ply				ply
.819e		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819f						ResetIOTracking:
.819f		a2 21		ldx #$21			ldx 	#GNEEnd-GNEBegin-1
.81a1						_RIOLoop:
.81a1		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.81a4		ca		dex				dex
.81a5		10 fa		bpl $81a1			bpl 	_RIOLoop
.81a7		60		rts				rts
.81a8						GetNextEvent:
.81a8		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.81ab		08		php				php									; save yes/no flag.
.81ac		b0 17		bcs $81c5			bcs 	_GNEExit
.81ae		48		pha				pha 								; save registers
.81af		da		phx				phx
.81b0		5a		phy				phy
.81b1		ad 82 07	lda $0782			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.81b4		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.81b6		f0 04		beq $81bc			beq 	_GNEKeyEvent
.81b8		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.81ba		d0 06		bne $81c2			bne 	_GNECheckMouseEvent
.81bc						_GNEKeyEvent:
.81bc		20 c7 81	jsr $81c7			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.81bf		20 e4 81	jsr $81e4			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.81c2						_GNECheckMouseEvent:
.81c2		7a		ply				ply 								; restore registers
.81c3		fa		plx				plx
.81c4		68		pla				pla
.81c5						_GNEExit:
.81c5		28		plp				plp
.81c6		60		rts				rts
.81c7						ProcessKeyboardEvent:
.81c7		ad 86 07	lda $0786			lda 	KNLEvent.key.raw 			; raw key code.
.81ca		20 05 82	jsr $8205			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.81cd		ac 82 07	ldy $0782			ldy 	KNLEvent.type
.81d0		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.81d2		f0 07		beq $81db			beq 	_PKERelease
.81d4		1d 5f 06	ora $065f,x			ora 	KeyStatus,x 				; set bit
.81d7		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81da		60		rts				rts
.81db						_PKERelease:
.81db		49 ff		eor #$ff			eor 	#$FF						; clear bit
.81dd		3d 5f 06	and $065f,x			and 	KeyStatus,x
.81e0		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.81e3		60		rts				rts
.81e4						UpdateKeyboardJoystick:
.81e4		9c 80 06	stz $0680			stz 	KeyJoystick
.81e7		a2 00		ldx #$00			ldx 	#0
.81e9						_UKJLoop:
.81e9		bd 00 82	lda $8200,x			lda 	_UKJKeys,x 					; which key
.81ec		29 1f		and #$1f			and 	#$1F
.81ee		a8		tay				tay
.81ef		b9 5f 06	lda $065f,y			lda 	KeyStatus,y 				; get status
.81f2		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.81f4		18		clc				clc  								; set C if bit set
.81f5		69 ff		adc #$ff			adc 	#$FF
.81f7		2e 80 06	rol $0680			rol 	KeyJoystick 				; shift into place
.81fa		e8		inx				inx
.81fb		e0 05		cpx #$05			cpx 	#5 							; do all 5
.81fd		d0 ea		bne $81e9			bne 	_UKJLoop
.81ff		60		rts				rts
.8200						_UKJKeys:
>8200		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.8205						KeyboardConvertXA:
.8205		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.8207		8e 7f 06	stx $067f			stx 	KeyMaskTemp
.820a						_KCCALoop:
.820a		18		clc				clc
.820b		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.820d		b0 05		bcs $8214			bcs 	_KCCADone
.820f		0e 7f 06	asl $067f			asl 	KeyMaskTemp 				; shift the mask temp
.8212		80 f6		bra $820a			bra 	_KCCALoop
.8214						_KCCADone:
.8214		aa		tax				tax 								; table entry in X
.8215		ad 7f 06	lda $067f			lda 	KeyMaskTemp 				; mask temp in A.
.8218		60		rts				rts
.065f						GNEBegin:
.065f						KeyStatus:
>065f								.fill 	32
.067f						KeyMaskTemp:
>067f								.fill 	1
.0680						KeyJoystick:
>0680								.fill 	1
.0681						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8219						KNLSetDrive:
.8219		8d 81 07	sta $0781			sta 	KNLDefaultDrive
.821c		60		rts				rts
.821d						KNLOpenFileWrite:
.821d		48		pha				pha
.821e		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8220		80 03		bra $8225			bra 	KNLOpenStart
.8222						KNLOpenFileRead:
.8222		48		pha				pha
.8223		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8225						KNLOpenStart:
.8225		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8227		68		pla				pla
.8228		20 63 82	jsr $8263			jsr 	KNLSetupFileName
.822b		20 58 82	jsr $8258			jsr 	KNLSetEventPointer
.822e		ad 81 07	lda $0781			lda 	KNLDefaultDrive 			; currently drive zero only.
.8231		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.8233		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8236		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8238		b0 1d		bcs $8257			bcs     _out
.823a						_loop
.823a		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.823d		20 a8 81	jsr $81a8			jsr     GetNextEvent
.8240		b0 f8		bcs $823a			bcs     _loop
.8242		ad 82 07	lda $0782			lda 	KNLEvent.type
.8245		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.8247		f0 0a		beq $8253			beq 	_success
.8249		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.824b		f0 0a		beq $8257			beq 	_out
.824d		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.824f		f0 06		beq $8257			beq 	_out
.8251		80 e7		bra $823a			bra     _loop
.8253						_success
.8253		ad 85 07	lda $0785			lda     KNLEvent.file.stream
.8256		18		clc				clc
.8257						_out
.8257		60		rts				rts
.8258						KNLSetEventPointer:
.8258		48		pha				pha
.8259		a9 82		lda #$82			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.825b		85 f0		sta $f0				sta     kernel.args.events+0
.825d		a9 07		lda #$07			lda     #KNLEvent >> 8
.825f		85 f1		sta $f1				sta     kernel.args.events+1
.8261		68		pla				pla
.8262		60		rts				rts
.8263						KNLSetupFileName:
.8263		5a		phy				phy 								; save Y on stack
.8264		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.8266		86 37		stx $37				stx 	zTemp0+1
.8268		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.826a		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.826c		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.826e						_KNLGetLength:
.826e		c8		iny				iny
.826f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8271		d0 fb		bne $826e			bne 	_KNLGetLength
.8273		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.8275		7a		ply				ply
.8276		60		rts				rts
.8277						KNLReadBlock:
.8277		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8279		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.827b		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.827e		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8280		b0 2e		bcs $82b0			bcs     _KGNBExitFail               ; report as general error
.8282						_KGRBEventLoop:
.8282		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8285		20 a8 81	jsr $81a8			jsr     GetNextEvent
.8288		b0 f8		bcs $8282			bcs     _KGRBEventLoop
.828a		ad 82 07	lda $0782			lda 	KNLEvent.type 				; get event
.828d		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.828f		f0 0a		beq $829b			beq     _KNLRBGetNextByte
.8291		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8293		f0 1b		beq $82b0			beq 	_KGNBExitFail
.8295		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8297		f0 17		beq $82b0			beq 	_KGNBExitFail
.8299		80 e7		bra $8282			bra 	_KGRBEventLoop
.829b						_KNLRBGetNextByte:
.829b		a9 81		lda #$81			lda     #<KNLReadBuffer 			; Set the target buffer
.829d		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.829f		a9 06		lda #$06			lda     #>KNLReadBuffer
.82a1		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.82a3		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Set the target length
.82a6		85 fd		sta $fd				sta     kernel.args.recv.buflen
.82a8		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.82ab		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.82ae		18		clc				clc
.82af		60		rts				rts
.82b0						_KGNBExitFail:
.82b0		38		sec				sec
.82b1		60		rts				rts
.82b2						KNLWriteBlock:
.82b2		da		phx				phx
.82b3		5a		phy				phy
.82b4		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.82b6		a5 36		lda $36				lda     zTemp0 						; save the data location.
.82b8		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.82ba		a5 37		lda $37				lda     zTemp0+1
.82bc		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.82be		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.82c0		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.82c3		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.82c5		b0 21		bcs $82e8			bcs 	_KWBFailed
.82c7						_KNLWLoop:
.82c7		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.82ca		20 a8 81	jsr $81a8			jsr     GetNextEvent
.82cd		b0 f8		bcs $82c7			bcs     _KNLWLoop
.82cf		ad 82 07	lda $0782			lda     KNLEvent.type 				; various errors.
.82d2		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.82d4		f0 12		beq $82e8			beq 	_KWBFailed
.82d6		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.82d8		f0 0e		beq $82e8			beq 	_KWBFailed
.82da		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82dc		f0 0a		beq $82e8			beq 	_KWBFailed
.82de		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.82e0		d0 e5		bne $82c7			bne 	_KNLWLoop
.82e2		18		clc				clc
.82e3		ad 88 07	lda $0788			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.82e6		80 01		bra $82e9			bra 	_KWBExit
.82e8						_KWBFailed:
.82e8		38		sec				sec
.82e9						_KWBExit:
.82e9		7a		ply				ply
.82ea		fa		plx				plx
.82eb		60		rts				rts
.82ec						KNLCloseFile:
.82ec		85 f3		sta $f3				sta     kernel.args.file.close.stream
.82ee		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.82f1		60		rts				rts
.82f2						KNLReadController:
.82f2		da		phx				phx
.82f3		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.82f5		64 01		stz $01				stz 	1 							; switch to I/O 0
.82f7		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.82fa		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.82fc		0d 80 06	ora $0680			ora 	KeyJoystick 				; use key joystick.
.82ff		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8301		fa		plx				plx
.8302		60		rts				rts
.0681						KNLReadBuffer:
>0681								.fill   256
.0781						KNLDefaultDrive:
>0781								.byte 	?
.0782						KNLEvent
>0782						type        .byte   ?   ; Enum above
>0783						buf         .byte   ?   ; page id or zero
>0784						ext         .byte   ?   ; page id or zero
.0785						key
>0785						keyboard    .byte   ?   ; Keyboard ID
>0786						raw         .byte   ?   ; Raw key ID
>0787						ascii       .byte   ?   ; ASCII value
>0788						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0785						mouse
.0785						delta
>0785						x           .byte   ?
>0786						y           .byte   ?
>0787						z           .byte   ?
>0788						buttons     .byte   ?
.0785						clicks
>0785						inner       .byte   ?
>0786						middle      .byte   ?
>0787						outer       .byte   ?
.0785						joystick
>0785						joy0        .byte   ?
>0786						joy1        .byte   ?
.0785						udp
>0785						token       .byte   ?   ; TODO: break out into fields
.0785						file
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						data
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						read        .byte   ?   ; Number of bytes actually read
.0787						wrote
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						wrote       .byte   ?   ; Number of bytes actually read
.0785						directory
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						volume
>0787						len         .byte   ?   ; Length of volname (in buf)
>0788						flags       .byte   ?   ; block size, text encoding
.0787						file
>0787						len         .byte   ?
>0788						flags       .byte   ?   ; block scale, text encoding, approx size
.0787						free
>0787						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8303						AssembleGroup1:
.8303		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8305		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8308		80 02		bra $830c			bra 	AsmGroup12
.830a						AssembleGroup2:
.830a		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.830c						AsmGroup12:
.830c		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.830f		68		pla				pla 								; pop the return address to access the information following.
.8310		fa		plx				plx
.8311		20 98 83	jsr $8398			jsr 	AccessParameters 			; get opcode and save as base
.8314		8d 20 04	sta $0420			sta 	BaseOpcode
.8317		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.831a		d0 08		bne $8324			bne 	_AG12HaveMask
.831c		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.831e		20 a0 83	jsr $83a0			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8321		8d 21 04	sta $0421			sta 	ModeMask
.8324						_AG12HaveMask:
.8324		20 d4 84	jsr $84d4			jsr 	TypeAndCalculateOperand 	; get zero page type
.8327		da		phx				phx 								; save found address mode
.8328		20 04 84	jsr $8404			jsr 	AssembleModeX
.832b		fa		plx				plx  								; restore address mode
.832c		b0 0b		bcs $8339			bcs 	_AG12Exit
.832e		20 3a 83	jsr $833a			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8331		20 04 84	jsr $8404			jsr 	AssembleModeX
.8334		b0 03		bcs $8339			bcs 	_AG12Exit
.8336		4c e9 b1	jmp $b1e9			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8339						_AG12Exit:
.8339		60		rts				rts
.833a						PromoteToAbsolute:
.833a		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.833c		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.833e		f0 19		beq $8359			beq 	_PTADo
.8340		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8342		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8344		f0 13		beq $8359			beq 	_PTADo
.8346		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8348		e0 80		cpx #$80			cpx 	#AM_ZEROY
.834a		f0 0d		beq $8359			beq 	_PTADo
.834c		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.834e		e0 d1		cpx #$d1			cpx 	#AM_IND
.8350		f0 07		beq $8359			beq 	_PTADo
.8352		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8354		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8356		f0 01		beq $8359			beq 	_PTADo
.8358		60		rts				rts
.8359						_PTADo:
.8359		aa		tax				tax
.835a		60		rts				rts
.835b						AssembleGroup3:
.835b		68		pla				pla 								; get parameters, which is just the opcode.
.835c		fa		plx				plx
.835d		20 98 83	jsr $8398			jsr 	AccessParameters 			; get and output opcode
.8360		20 b0 83	jsr $83b0			jsr 	AssemblerWriteByte
.8363		20 38 85	jsr $8538			jsr 	CalculateOperand 			; get a 16 bit operand
.8366		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8368		38		sec				sec
.8369		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.836c		48		pha				pha 								; LSB in A
.836d		a5 60		lda $60				lda 	NSMantissa1
.836f		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.8372		aa		tax				tax 								; MSB in X
.8373		68		pla				pla
.8374		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8375		69 7f		adc #$7f			adc 	#$7F
.8377		90 01		bcc $837a			bcc 	_AG3NoCarry
.8379		e8		inx				inx
.837a						_AG3NoCarry:
.837a		38		sec				sec 								; fix back and write out anyways.
.837b		e9 80		sbc #$80			sbc 	#$80
.837d		20 b0 83	jsr $83b0			jsr 	AssemblerWriteByte
.8380		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8382		f0 0a		beq $838e			beq 	_AG3Exit
.8384		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.8387		29 01		and #$01			and 	#1
.8389		f0 03		beq $838e			beq 	_AG3Exit
.838b		4c ee b1	jmp $b1ee			jmp 	RangeError 					; no, branch is out of range
.838e						_AG3Exit:
.838e		60		rts				rts
.838f						AssembleGroup4:
.838f		68		pla				pla 								; pop address
.8390		fa		plx				plx
.8391		20 98 83	jsr $8398			jsr 	AccessParameters 			; access and get first
.8394		20 b0 83	jsr $83b0			jsr 	AssemblerWriteByte 			; output it.
.8397		60		rts				rts
.8398						AccessParameters:
.8398		8d 1d 04	sta $041d			sta 	ParamStart
.839b		8e 1e 04	stx $041e			stx 	ParamStart+1
.839e		a9 01		lda #$01			lda 	#1
.83a0						GetParameter:
.83a0		5a		phy				phy
.83a1		a8		tay				tay
.83a2		ad 1d 04	lda $041d			lda 	ParamStart
.83a5		85 36		sta $36				sta 	zTemp0
.83a7		ad 1e 04	lda $041e			lda 	ParamStart+1
.83aa		85 37		sta $37				sta 	zTemp0+1
.83ac		b1 36		lda ($36),y			lda 	(zTemp0),y
.83ae		7a		ply				ply
.83af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.83b0						AssemblerWriteByte:
.83b0		48		pha			pha
.83b1		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.83b4		29 02		and #$02		and 	#2
.83b6		f0 1b		beq $83d3		beq 	_AWBNoPrint
.83b8		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.83bb		20 ee 83	jsr $83ee		jsr 	PrintHex
.83be		ad 1a 04	lda $041a		lda		AssemblerAddress
.83c1		20 ee 83	jsr $83ee		jsr 	PrintHex
.83c4		a9 20		lda #$20		lda 	#' '
.83c6		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83c9		68		pla			pla 									; print byte
.83ca		48		pha			pha
.83cb		20 ee 83	jsr $83ee		jsr 	PrintHex
.83ce		a9 0d		lda #$0d		lda 	#13
.83d0		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.83d3						_AWBNoPrint:
.83d3		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.83d6		85 36		sta $36			sta 	zTemp0
.83d8		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.83db		f0 0e		beq $83eb		beq 	_AWBRange
.83dd		85 37		sta $37			sta 	zTemp0+1
.83df		68		pla			pla 									; write byte out
.83e0		92 36		sta ($36)		sta 	(zTemp0)
.83e2		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.83e5		d0 03		bne $83ea		bne 	_AWBNoCarry
.83e7		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.83ea						_AWBNoCarry:
.83ea		60		rts			rts
.83eb						_AWBRange:
.83eb		4c ee b1	jmp $b1ee		jmp 	RangeError
.83ee						PrintHex:
.83ee		48		pha				pha
.83ef		4a		lsr a				lsr 	a
.83f0		4a		lsr a				lsr 	a
.83f1		4a		lsr a				lsr 	a
.83f2		4a		lsr a				lsr 	a
.83f3		20 f7 83	jsr $83f7			jsr 	_PrintNibble
.83f6		68		pla				pla
.83f7						_PrintNibble:
.83f7		29 0f		and #$0f			and 	#15
.83f9		c9 0a		cmp #$0a			cmp 	#10
.83fb		90 02		bcc $83ff			bcc 	_NoShift
.83fd		69 06		adc #$06			adc 	#6
.83ff						_NoShift:
.83ff		69 30		adc #$30			adc 	#48
.8401		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8404						AssembleModeX:
.8404		5a		phy				phy
.8405		ad 1f 04	lda $041f			lda 	IsGroup1
.8408		f0 17		beq $8421			beq 	_AMXGroup2
.840a		8a		txa				txa 							; is it in group # 1
.840b		29 40		and #$40			and 	#AM_ISG1
.840d		f0 4d		beq $845c			beq 	_AMXFail 				; no, give up.
.840f		8a		txa				txa 							; get back.
.8410		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8412		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8414		d0 22		bne $8438			bne 	_AMXHaveInfo
.8416		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8419		c9 81		cmp #$81			cmp 	#$81
.841b		f0 3f		beq $845c			beq 	_AMXFail
.841d		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.841f		80 17		bra $8438			bra 	_AMXHaveInfo 			; odd design decision there.
.8421						_AMXGroup2:
.8421		8a		txa				txa 							; is it in group 2 ?
.8422		29 20		and #$20			and 	#AM_ISG2
.8424		f0 36		beq $845c			beq 	_AMXFail 				; no, give up.
.8426		8a		txa				txa 							; get the offset into Y
.8427		29 1f		and #$1f			and 	#$1F
.8429		4a		lsr a				lsr 	a 						; make it 0-7.
.842a		4a		lsr a				lsr  	a
.842b		a8		tay				tay
.842c		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.842f						_AMXCheckOkay:
.842f		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8430		88		dey				dey
.8431		10 fc		bpl $842f			bpl 	_AMXCheckOkay
.8433		90 27		bcc $845c			bcc 	_AMXFail 				; not allowed.
.8435		8a		txa				txa  							; get mask back
.8436		29 1f		and #$1f			and 	#$1F
.8438						_AMXHaveInfo:
.8438		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.843a		10 04		bpl $8440			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.843c		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.843e		d0 1c		bne $845c			bne 	_AMXFail
.8440						_AMXAnySize:
.8440		18		clc				clc 							; add offset to the base opcode
.8441		6d 20 04	adc $0420			adc 	BaseOpcode
.8444						_AMXOutputCode:
.8444		20 b0 83	jsr $83b0			jsr 	AssemblerWriteByte 		; write the opcode out.
.8447		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8449		f0 0e		beq $8459			beq 	_AMXExit
.844b		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.844d		20 b0 83	jsr $83b0			jsr 	AssemblerWriteByte
.8450		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8452		30 05		bmi $8459			bmi 	_AMXExit
.8454		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8456		20 b0 83	jsr $83b0			jsr 	AssemblerWriteByte
.8459						_AMXExit:
.8459		7a		ply				ply
.845a		38		sec				sec
.845b		60		rts				rts
.845c						_AMXFail:
.845c		a0 00		ldy #$00			ldy 	#0
.845e						_AMXCheckOddities:
.845e		8a		txa				txa
.845f		d9 86 84	cmp $8486,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8462		d0 15		bne $8479			bne 	_AMXCONext
.8464		b9 84 84	lda $8484,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8467		cd 20 04	cmp $0420			cmp 	BaseOpcode
.846a		d0 0d		bne $8479			bne 	_AMXCONext
.846c		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.846e		10 04		bpl $8474			bpl 	_AMXCONotZero
.8470		a5 60		lda $60				lda 	NSMantissa1
.8472		d0 05		bne $8479			bne 	_AMXCONext
.8474						_AMXCONotZero:
.8474		b9 85 84	lda $8485,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8477		80 cb		bra $8444			bra 	_AMXOutputCode 			; and assemble it
.8479						_AMXCONext:
.8479		c8		iny				iny
.847a		c8		iny				iny
.847b		c8		iny				iny
.847c		b9 84 84	lda $8484,y			lda 	ExtraOpcode+0,y 		; end of table
.847f		d0 dd		bne $845e			bne 	_AMXCheckOddities
.8481						_AMXCOFail:
.8481		7a		ply				ply
.8482		18		clc				clc
.8483		60		rts				rts
.8484						ExtraOpcode:
>8484		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8487		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>848a		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>848d		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8490		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8493		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8496		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8499		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>849c		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>849f		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>84a2		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.84a3						LabelHere:
.84a3		c8		iny				iny 								; skip .
.84a4		a2 00		ldx #$00			ldx 	#0 							; get a term
.84a6		20 0a a1	jsr $a10a			jsr 	EvaluateTerm
.84a9		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.84ab		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.84ad		d0 22		bne $84d1			bne 	_ALType 					; otherwise typing error
.84af		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.84b1		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.84b3		b5 60		lda $60,x			lda 	NSMantissa1,x
.84b5		85 37		sta $37				sta 	zTemp0+1
.84b7		5a		phy				phy 								; copy address in (64k)
.84b8		a0 01		ldy #$01			ldy 	#1
.84ba		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.84bd		92 36		sta ($36)			sta 	(zTemp0)
.84bf		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.84c2		91 36		sta ($36),y			sta 	(zTemp0),y
.84c4		c8		iny				iny
.84c5		a9 00		lda #$00			lda 	#0 							; zero the rest.
.84c7		91 36		sta ($36),y			sta 	(zTemp0),y
.84c9		c8		iny				iny
.84ca		91 36		sta ($36),y			sta 	(zTemp0),y
.84cc		c8		iny				iny
.84cd		91 36		sta ($36),y			sta 	(zTemp0),y
.84cf		7a		ply				ply
.84d0		60		rts				rts
.84d1						_ALType:
.84d1		4c f3 b1	jmp $b1f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.84d4						TypeAndCalculateOperand:
.84d4		b1 30		lda ($30),y			lda 	(codePtr),y
.84d6		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.84d8		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.84da		f0 5b		beq $8537			beq 	_TACOExit
.84dc		c9 80		cmp #$80			cmp 	#KWC_EOL
.84de		f0 57		beq $8537			beq 	_TACOExit
.84e0		c8		iny				iny
.84e1		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.84e3		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.84e5		f0 51		beq $8538			beq 	CalculateOperand
.84e7		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.84e9		f0 1f		beq $850a			beq 	_TACOIndirect
.84eb		88		dey				dey 								; undo get of first character
.84ec		20 38 85	jsr $8538			jsr 	CalculateOperand 			; get operand
.84ef		b1 30		lda ($30),y			lda 	(codePtr),y
.84f1		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.84f3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.84f5		d0 40		bne $8537			bne 	_TACOExit
.84f7		c8		iny				iny
.84f8		20 42 85	jsr $8542			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.84fb		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.84fd		c9 58		cmp #$58			cmp 	#'X'
.84ff		f0 36		beq $8537			beq 	_TACOExit
.8501		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8503		c9 59		cmp #$59			cmp 	#'Y'
.8505		f0 30		beq $8537			beq 	_TACOExit
.8507						_TACOSyntax:
.8507		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.850a						_TACOIndirect:
.850a		20 38 85	jsr $8538			jsr 	CalculateOperand 			; get the operand
.850d		b1 30		lda ($30),y			lda 	(codePtr),y
.850f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8511		f0 17		beq $852a			beq 	_TACOIndX
.8513		20 a3 97	jsr $97a3			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8516		b1 30		lda ($30),y			lda 	(codePtr),y
.8518		a2 d1		ldx #$d1			ldx 	#AM_IND
.851a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.851c		d0 19		bne $8537			bne 	_TACOExit
.851e		c8		iny				iny
.851f		20 42 85	jsr $8542			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8522		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8524		d0 e1		bne $8507			bne 	_TACOSyntax
.8526		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8528		80 0d		bra $8537			bra 	_TACOExit
.852a						_TACOIndX:
.852a		c8		iny				iny
.852b		20 42 85	jsr $8542			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.852e		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8530		d0 d5		bne $8507			bne 	_TACOSyntax
.8532		20 a3 97	jsr $97a3			jsr 	CheckRightBracket			; check )
.8535		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8537						_TACOExit:
.8537		60		rts				rts
.8538						CalculateOperand:
.8538		48		pha				pha
.8539		da		phx				phx
.853a		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.853c		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.853f		fa		plx				plx
.8540		68		pla				pla
.8541		60		rts				rts
.8542						TACOCheckXY:
.8542		b1 30		lda ($30),y			lda 	(codePtr),y
.8544		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8546		c9 40		cmp #$40			cmp 	#$40
.8548		d0 21		bne $856b			bne 	_TCXYFail
.854a		b1 30		lda ($30),y			lda 	(codePtr),y
.854c		18		clc				clc
.854d		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.854f		85 37		sta $37				sta 	zTemp0+1
.8551		c8		iny				iny
.8552		b1 30		lda ($30),y			lda 	(codePtr),y
.8554		c8		iny				iny
.8555		85 36		sta $36				sta 	zTemp0
.8557		5a		phy				phy 								; save position
.8558		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.855a		b1 36		lda ($36),y			lda 	(zTemp0),y
.855c		d0 0c		bne $856a			bne 	_TCXYPopFail
.855e		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8560		b1 36		lda ($36),y			lda 	(zTemp0),y
.8562		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8564		f0 08		beq $856e			beq 	_TCXYFound
.8566		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8568		f0 04		beq $856e			beq 	_TCXYFound
.856a						_TCXYPopFail:
.856a		7a		ply				ply
.856b						_TCXYFail:
.856b		a9 00		lda #$00			lda 	#0
.856d		60		rts				rts
.856e						_TCXYFound:
.856e		7a		ply				ply 								; restore position
.856f		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8571		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8572						BackloadProgram:
.8572		20 e8 91	jsr $91e8			jsr 	NewProgram 					; does the actual NEW.
.8575		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.8577		a9 c9		lda #$c9			lda 	#_BLLoad & $FF
.8579		20 15 98	jsr $9815			jsr 	PrintStringXA
.857c		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.857e		8d 89 07	sta $0789			sta 	BackLoadPage
.8581		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8583		8d 8a 07	sta $078a			sta 	0+BackLoadPointer
.8586		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8588		8d 8b 07	sta $078b			sta 	1+BackLoadPointer
.858b		a9 ff		lda #$ff			lda 	#$FF
.858d		8d fa ff	sta $fffa			sta 	$FFFA
.8590						_BPLoop:
.8590		a2 ff		ldx #$ff			ldx 	#$FF
.8592		20 de 85	jsr $85de			jsr 	BLReadByte 					; read a byte
.8595		c9 00		cmp #$00			cmp 	#0
.8597		f0 29		beq $85c2			beq 	_BPExit 					; if 0 exit
.8599		30 27		bmi $85c2			bmi 	_BPExit 					; if -ve exit
.859b						_BPCopy:
.859b		e8		inx				inx  								; copy byte into the lineBuffer
.859c		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.859f		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.85a2		20 de 85	jsr $85de			jsr 	BLReadByte 					; read next byte
.85a5		30 0a		bmi $85b1			bmi 	_BPEndLine 					; -ve = EOL
.85a7		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.85a9		d0 02		bne $85ad			bne 	_BPNotTab
.85ab		a9 20		lda #$20			lda 	#' '
.85ad						_BPNotTab:
.85ad		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.85af		b0 ea		bcs $859b			bcs 	_BPCopy 					; until a control character, should be 13 received.
.85b1						_BPEndLine:
.85b1		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.85b4		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.85b7		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85ba		f0 d4		beq $8590			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.85bc		38		sec				sec 								; append not insert
.85bd		20 dd b3	jsr $b3dd			jsr 	MemoryInsertLine 			; append to current program
.85c0		80 ce		bra $8590			bra 	_BPLoop
.85c2						_BPExit:
.85c2		9c fa ff	stz $fffa			stz 	$FFFA
.85c5		20 ca 86	jsr $86ca			jsr 	ClearCommand 				; clear variables etc.
.85c8		60		rts				rts
.85c9						_BLLoad:
>85c9		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>85d1		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.85de						BLReadByte:
.85de		da		phx				phx
.85df		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.85e1		ad 89 07	lda $0789			lda 	BackLoadPage	 			; set current page
.85e4		85 0b		sta $0b				sta 	8+3
.85e6		ad 8a 07	lda $078a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.85e9		85 36		sta $36				sta 	zTemp0
.85eb		ad 8b 07	lda $078b			lda 	BackLoadPointer+1
.85ee		85 37		sta $37				sta 	zTemp0+1
.85f0		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.85f2		ee 8a 07	inc $078a			inc 	BackLoadPointer 			; bump pointer
.85f5		d0 0f		bne $8606			bne 	_BLNoCarry
.85f7		ee 8b 07	inc $078b			inc 	BackLoadPointer+1
.85fa		10 0a		bpl $8606			bpl 	_BLNoCarry 					; need a new page
.85fc		48		pha				pha
.85fd		a9 60		lda #$60			lda 	#$60 						; reset pointer
.85ff		8d 8b 07	sta $078b			sta 	BackLoadPointer+1
.8602		ee 89 07	inc $0789			inc 	BackLoadPage 				; next page from source.
.8605		68		pla				pla
.8606						_BLNoCarry:
.8606		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8608		fa		plx				plx
.8609		c9 00		cmp #$00			cmp 	#0
.860b		60		rts				rts
.0789						BackLoadPage:
>0789								.fill  	1
.078a						BackLoadPointer:
>078a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.860c						EditProgramCode:
.860c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.860f		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.8612		20 81 b4	jsr $b481			jsr 	MemorySearch
.8615		90 05		bcc $861c			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8617		d0 03		bne $861c			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8619		20 a6 b3	jsr $b3a6			jsr 	MemoryDeleteLine 			; delete the line
.861c						_EPCNoDelete:
.861c		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.861f		c9 80		cmp #$80			cmp 	#KWC_EOL
.8621		f0 0d		beq $8630			beq 	_EPCNoInsert
.8623		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8626		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8629		20 81 b4	jsr $b481			jsr 	MemorySearch
.862c		18		clc				clc 								; insert at this point.
.862d		20 dd b3	jsr $b3dd			jsr 	MemoryInsertLine 			; insert the line
.8630						_EPCNoInsert:
.8630		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8631						WarmStart:
.8631		a2 ff		ldx #$ff			ldx 	#$FF
.8633		9a		txs				txs
.8634		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8636		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8639		20 9f 81	jsr $819f			jsr 	ResetIOTracking 			; reset the I/O tracking.
.863c		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.863f		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.8642		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.8645		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8648		d0 17		bne $8661			bne 	_WSEditCode 				; if so,edit code.
.864a		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.864d		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.864f		85 30		sta $30				sta 	codePtr
.8651		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8653		85 31		sta $31				sta 	codePtr+1
.8655		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8658		c9 80		cmp #$80			cmp 	#KWC_EOL
.865a		f0 d5		beq $8631			beq 	WarmStart
.865c		20 85 93	jsr $9385			jsr 	RUNCodePointerLine 			; execute that line.
.865f		80 d0		bra $8631			bra 	WarmStart
.8661						_WSEditCode:
.8661		20 0c 86	jsr $860c			jsr 	EditProgramCode 			; edit the program code
.8664		20 ca 86	jsr $86ca			jsr 	ClearCommand 				; clear all variables etc.
.8667		80 c8		bra $8631			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8669						AssembleCommand:
.8669		a2 00		ldx #$00			ldx 	#0
.866b		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger 		; start address
.866e		a5 58		lda $58				lda 	NSMantissa0
.8670		8d 1a 04	sta $041a			sta 	AssemblerAddress
.8673		a5 60		lda $60				lda 	NSMantissa1
.8675		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8678		20 ab 97	jsr $97ab			jsr 	CheckComma
.867b		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; options 0-3
.867e		a5 58		lda $58				lda 	NSMantissa0
.8680		8d 1c 04	sta $041c			sta 	AssemblerControl
.8683		60		rts				rts
.8684		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8685						AssertCommand:
.8685		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8687		20 83 a6	jsr $a683			jsr 	EvaluateInteger 			; the assert test
.868a		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; exit if result is non zero.
.868d		d0 05		bne $8694			bne 	_ACExit
.868f		a9 0a		lda #$0a		lda	#10
.8691		4c bc 97	jmp $97bc		jmp	ErrorHandler
.8694						_ACExit:
.8694		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8695						CallCommand:
.8695		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8697		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.869a						_CCClear
.869a		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.869b		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; these are optional sequentially.
.869e		e0 04		cpx #$04			cpx 	#4
.86a0		d0 f8		bne $869a			bne 	_CCClear
.86a2		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.86a4						_CCCParam:
.86a4		b1 30		lda ($30),y			lda 	(codePtr),y
.86a6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86a8		d0 09		bne $86b3			bne 	_CCCRun6502
.86aa		c8		iny				iny 								; skip comma
.86ab		e8		inx				inx	 								; next level
.86ac		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get A/X/Y
.86af		e0 03		cpx #$03			cpx 	#3
.86b1		90 f1		bcc $86a4			bcc 	_CCCParam 					; done all 3 ?
.86b3						_CCCRun6502:
.86b3		5a		phy				phy 								; save position
.86b4		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.86b6		85 37		sta $37				sta 	zTemp0+1
.86b8		a5 58		lda $58				lda 	NSMantissa0
.86ba		85 36		sta $36				sta 	zTemp0
.86bc		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.86be		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.86c0		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.86c2		20 c7 86	jsr $86c7			jsr 	_CCCZTemp0 					; call zTemp0
.86c5		7a		ply				ply 								; restore position and exit
.86c6		60		rts				rts
.86c7						_CCCZTemp0:
.86c7		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.86ca						ClearCommand:
.86ca		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.86cc		85 36		sta $36				sta 	0+zTemp0
.86ce		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.86d0		85 37		sta $37				sta 	1+zTemp0
.86d2						_ClearZeroLoop:
.86d2		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.86d4		f0 24		beq $86fa			beq 	_ClearZeroEnd
.86d6		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.86d8		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.86da						_ClearOneVariable:
.86da		91 36		sta ($36),y			sta 	(zTemp0),y
.86dc		c8		iny				iny
.86dd		c0 08		cpy #$08			cpy 	#8
.86df		d0 f9		bne $86da			bne 	_ClearOneVariable
.86e1		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.86e3		b1 36		lda ($36),y			lda 	(zTemp0),y
.86e5		c9 18		cmp #$18			cmp 	#NSTProcedure
.86e7		d0 04		bne $86ed			bne 	_ClearNotProcedure
.86e9		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.86eb		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.86ed						_ClearNotProcedure:
.86ed		18		clc				clc 								; go to the next variable
.86ee		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.86f0		65 36		adc $36				adc 	zTemp0
.86f2		85 36		sta $36				sta 	zTemp0
.86f4		90 dc		bcc $86d2			bcc 	_ClearZeroLoop
.86f6		e6 37		inc $37				inc 	zTemp0+1
.86f8		80 d8		bra $86d2			bra 	_ClearZeroLoop
.86fa						_ClearZeroEnd:
.86fa		18		clc				clc
.86fb		a5 36		lda $36				lda 	zTemp0
.86fd		69 01		adc #$01			adc 	#1
.86ff		8d 08 04	sta $0408			sta 	lowMemPtr
.8702		a5 37		lda $37				lda 	zTemp0+1
.8704		69 00		adc #$00			adc 	#0
.8706		8d 09 04	sta $0409			sta 	lowMemPtr+1
.8709		20 c9 b8	jsr $b8c9			jsr 	StackReset
.870c		20 2f b9	jsr $b92f			jsr 	StringSystemInitialise
.870f		20 ac 96	jsr $96ac			jsr 	ProcedureScan
.8712		20 27 93	jsr $9327			jsr 	Command_Restore
.8715		9c 1a 04	stz $041a			stz 	AssemblerAddress
.8718		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.871b		9c 1c 04	stz $041c			stz 	AssemblerControl
.871e		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.8721		20 f6 a2	jsr $a2f6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8724		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.8725						XLoadCommand:
.8725		20 e8 91	jsr $91e8			jsr 	NewProgram
.8728		20 72 85	jsr $8572			jsr 	BackloadProgram
.872b		4c 31 86	jmp $8631			jmp 	WarmStart
.872e						XGoCommand:
.872e		20 e8 91	jsr $91e8			jsr 	NewProgram
.8731		20 72 85	jsr $8572			jsr 	BackloadProgram
.8734		4c 73 93	jmp $9373			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8737						Command_Data:
.8737		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8739		a2 80		ldx #$80			ldx 	#KWC_EOL
.873b		20 fe 96	jsr $96fe			jsr 	ScanForward
.873e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.873f						DimCommand:
.873f		b1 30		lda ($30),y			lda 	(codePtr),y
.8741		29 c0		and #$c0			and 	#$C0
.8743		c9 40		cmp #$40			cmp 	#$40
.8745		d0 7a		bne $87c1			bne 	_DCSyntax 				; n o, error.
.8747		b1 30		lda ($30),y			lda 	(codePtr),y
.8749		18		clc				clc
.874a		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.874c		85 3f		sta $3f				sta 	zaTemp+1
.874e		c8		iny				iny
.874f		b1 30		lda ($30),y			lda 	(codePtr),y
.8751		c8		iny				iny
.8752		85 3e		sta $3e				sta 	zaTemp
.8754		5a		phy				phy
.8755		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8757		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8759		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.875b		c9 18		cmp #$18			cmp 	#NSTProcedure
.875d		f0 62		beq $87c1			beq 	_DCSyntax
.875f		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8761		29 04		and #$04			and 	#NSBIsArray
.8763		f0 64		beq $87c9			beq 	_DCType
.8765		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8767		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8769		d0 59		bne $87c4			bne 	_DCRedefine
.876b		7a		ply				ply
.876c		20 cc 87	jsr $87cc			jsr 	_DCGetSize 				; get array size, check it.
.876f		5a		phy				phy
.8770		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8772		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8774		7a		ply				ply 							; is there a second (e.g. ,x)
.8775		b1 30		lda ($30),y			lda 	(codePtr),y
.8777		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8779		d0 0a		bne $8785			bne 	_DCOneDimension
.877b		c8		iny				iny 							; skip comma
.877c		20 cc 87	jsr $87cc			jsr 	_DCGetSize 				; get 2nd array size
.877f		5a		phy				phy
.8780		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8782		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8784		7a		ply				ply
.8785						_DCOneDimension:
.8785		5a		phy				phy 							; save position
.8786		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8788		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.878a		aa		tax				tax
.878b		c8		iny				iny
.878c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.878e		e8		inx				inx 							; bump them.
.878f		1a		inc a				inc 	a
.8790		20 c1 a6	jsr $a6c1			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8793		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8795		29 e0		and #$e0			and 	#$E0
.8797		d0 23		bne $87bc			bne 	_DCSize
.8799		a0 02		ldy #$02			ldy 	#2 						; get base type
.879b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.879d		20 da 87	jsr $87da			jsr 	ScaleByBaseType 		; scale by base type
.87a0		a5 36		lda $36				lda 	zTemp0
.87a2		a6 37		ldx $37				ldx 	zTemp0+1
.87a4		20 b8 a2	jsr $a2b8			jsr 	AllocateXABytes 		; allocate memory
.87a7		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.87a9		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87ab		c8		iny				iny
.87ac		8a		txa				txa
.87ad		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87af		7a		ply				ply 							; get position back
.87b0		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 		; check )
.87b3		b1 30		lda ($30),y			lda 	(codePtr),y
.87b5		c8		iny				iny 							; consume in case
.87b6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.87b8		f0 85		beq $873f			beq 	DimCommand
.87ba		88		dey				dey 							; undo consume
.87bb		60		rts				rts
.87bc						_DCSize:
.87bc		a9 16		lda #$16		lda	#22
.87be		4c bc 97	jmp $97bc		jmp	ErrorHandler
.87c1						_DCSyntax:
.87c1		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.87c4						_DCRedefine:
.87c4		a9 15		lda #$15		lda	#21
.87c6		4c bc 97	jmp $97bc		jmp	ErrorHandler
.87c9						_DCType:
.87c9		4c f3 b1	jmp $b1f3			jmp 	TypeError
.87cc						_DCGetSize:
.87cc		a2 00		ldx #$00			ldx 	#0 						; get first index.
.87ce		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 	; get array dimension
.87d1		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.87d3		f0 e7		beq $87bc			beq 	_DCSize
.87d5		c9 fe		cmp #$fe			cmp 	#254
.87d7		f0 e3		beq $87bc			beq 	_DCSize
.87d9		60		rts				rts
.87da						ScaleByBaseType:
.87da		29 10		and #$10			and 	#NSBIsString 			; is it string
.87dc		d0 19		bne $87f7			bne 	_SBBTString
.87de		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.87e0		48		pha				pha
.87e1		a5 36		lda $36				lda 	zTemp0
.87e3		48		pha				pha
.87e4		06 36		asl $36				asl 	zTemp0 					; x 2
.87e6		26 37		rol $37				rol 	zTemp0+1
.87e8		06 36		asl $36				asl 	zTemp0 					; x 4
.87ea		26 37		rol $37				rol 	zTemp0+1
.87ec		68		pla				pla 							; add stacked value = x 5
.87ed		65 36		adc $36				adc 	zTemp0
.87ef		85 36		sta $36				sta 	zTemp0
.87f1		68		pla				pla
.87f2		65 37		adc $37				adc 	zTemp0+1
.87f4		85 37		sta $37				sta 	zTemp0+1
.87f6		60		rts				rts
.87f7						_SBBTString:
.87f7		06 36		asl $36				asl 	zTemp0
.87f9		26 37		rol $37				rol 	zTemp0+1
.87fb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.87fc						BootDOS:
.87fc		a9 0a		lda #$0a	            lda     #dosName & $FF
.87fe		85 fb		sta $fb		            sta     kernel.args.buf+0
.8800		a9 88		lda #$88	            lda     #dosName >> 8
.8802		85 fc		sta $fc		            sta     kernel.args.buf+1
.8804		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8807		4c 31 86	jmp $8631	            jmp 	WarmStart
>880a		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.880e						EndCommand:
.880e		4c 31 86	jmp $8631			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.8811						UnaryEvent:
.8811		fa		plx				plx
.8812		20 97 96	jsr $9697			jsr 	TimerToStackX 				; timer in +0
.8815		e8		inx				inx  								; put reference into +1
.8816		20 0a a1	jsr $a10a			jsr 	EvaluateTerm
.8819		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.881b		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.881d		d0 4c		bne $886b			bne 	_UEType
.881f		e8		inx				inx 								; put the step in +2
.8820		20 ab 97	jsr $97ab			jsr 	CheckComma
.8823		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.8826		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.8829		ca		dex				dex
.882a		ca		dex				dex
.882b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.882d		85 36		sta $36				sta 	zTemp0
.882f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.8831		85 37		sta $37				sta 	zTemp0+1
.8833		5a		phy				phy
.8834		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8836		b1 36		lda ($36),y			lda 	(zTemp0),y
.8838		30 2d		bmi $8867			bmi 	_UEFalse 					; exit if signed.
.883a		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.883c		b5 58		lda $58,x			lda 	NSMantissa0,x
.883e		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8840		c8		iny				iny
.8841		b5 60		lda $60,x			lda 	NSMantissa1,x
.8843		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8845		c8		iny				iny
.8846		b5 68		lda $68,x			lda 	NSMantissa2,x
.8848		f1 36		sbc ($36),y			sbc		(zTemp0),y
.884a		90 1b		bcc $8867			bcc 	_UEFalse 					; no, return FALSE.
.884c		18		clc				clc
.884d		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.884f		b5 58		lda $58,x			lda 	NSMantissa0,x
.8851		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.8853		91 36		sta ($36),y			sta 	(zTemp0),y
.8855		c8		iny				iny
.8856		b5 60		lda $60,x			lda 	NSMantissa1,x
.8858		75 62		adc $62,x			adc 	NSMantissa1+2,x
.885a		91 36		sta ($36),y			sta 	(zTemp0),y
.885c		c8		iny				iny
.885d		b5 68		lda $68,x			lda 	NSMantissa2,x
.885f		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.8861		91 36		sta ($36),y			sta 	(zTemp0),y
.8863		7a		ply				ply
.8864		4c 29 98	jmp $9829			jmp 	ReturnTrue
.8867						_UEFalse:
.8867		7a		ply				ply 								; restore Y
.8868		4c 34 98	jmp $9834			jmp 	ReturnFalse 				; and return False
.886b						_UEType:
.886b		4c f3 b1	jmp $b1f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.886e						Command_BLoad:
.886e		a2 00		ldx #$00			ldx 	#0
.8870		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; file name to load
.8873		20 ab 97	jsr $97ab			jsr 	CheckComma 					; consume comma
.8876		e8		inx				inx
.8877		20 83 a6	jsr $a683			jsr 	EvaluateInteger 			; load address (full physical address)
.887a		5a		phy				phy
.887b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.887d		a6 60		ldx $60				ldx 	NSMantissa1
.887f		20 22 82	jsr $8222			jsr 	KNLOpenFileRead 			; open file for reading
.8882		b0 4e		bcs $88d2			bcs 	CBLErrorHandler 			; error, so fail.
.8884		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8887		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8889		20 d5 88	jsr $88d5			jsr 	BLOpenPhysicalMemory 		; open for access.
.888c						_BLReadFile:
.888c		ad 90 07	lda $0790			lda 	BasicFileStream
.888f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8891		20 77 82	jsr $8277			jsr 	KNLReadBlock 				; read next block
.8894		b0 22		bcs $88b8			bcs 	_BLFileError 				; file error, which might be EOF.
.8896		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8898		f0 f2		beq $888c			beq 	_BLReadFile
.889a		8d 8e 07	sta $078e			sta 	BLCopyCounter 				; counter.
.889d		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; copy the buffer out here
.88a0		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.88a2						_BLCopyLoop:
.88a2		bd 81 06	lda $0681,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.88a5		91 3a		sta ($3a),y			sta 	(zTemp2),y
.88a7		c8		iny				iny
.88a8		d0 03		bne $88ad			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.88aa		20 fd 88	jsr $88fd			jsr 	BLAdvancePhysicalMemory
.88ad						_BLNoAdjust:
.88ad		e8		inx				inx
.88ae		ce 8e 07	dec $078e			dec 	BLCopyCounter
.88b1		d0 ef		bne $88a2			bne 	_BLCopyLoop
.88b3		8c 8d 07	sty $078d			sty 	BLYOffset 					; update Y offset
.88b6		80 d4		bra $888c			bra 	_BLReadFile 				; go ask for more.
.88b8						_BLFileError:
.88b8		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.88ba		d0 16		bne $88d2			bne 	CBLErrorHandler				; no, it's an actual error
.88bc		20 f7 88	jsr $88f7			jsr 	BLClosePhysicalMemory 		; close the access.
.88bf		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.88c2		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.88c5		7a		ply				ply
.88c6		60		rts				rts
.88c7						CBLCloseError:
.88c7		48		pha				pha
.88c8		20 f7 88	jsr $88f7			jsr 	BLClosePhysicalMemory
.88cb		ad 90 07	lda $0790			lda 	BasicFileStream
.88ce		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.88d1		68		pla				pla
.88d2						CBLErrorHandler:
.88d2		4c bb 8a	jmp $8abb			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.88d5						BLOpenPhysicalMemory:
.88d5		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.88d7		8d 8c 07	sta $078c			sta 	BLNormalMapping
.88da		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.88dc		8d 8d 07	sta $078d			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.88df		64 3a		stz $3a				stz 	zTemp2
.88e1		b5 60		lda $60,x			lda 	NSMantissa1,x
.88e3		29 1f		and #$1f			and 	#$1F
.88e5		09 60		ora #$60			ora 	#BLAccessPage << 5
.88e7		85 3b		sta $3b				sta 	zTemp2+1
.88e9		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.88eb		16 60		asl $60,x			asl 	NSMantissa1,x
.88ed		2a		rol a				rol 	a
.88ee		16 60		asl $60,x			asl 	NSMantissa1,x
.88f0		2a		rol a				rol 	a
.88f1		16 60		asl $60,x			asl 	NSMantissa1,x
.88f3		2a		rol a				rol 	a
.88f4		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.88f6		60		rts				rts
.88f7						BLClosePhysicalMemory:
.88f7		ad 8c 07	lda $078c			lda 	BLNormalMapping
.88fa		85 0b		sta $0b				sta 	BLAccessPage+8
.88fc		60		rts				rts
.88fd						BLAdvancePhysicalMemory:
.88fd		48		pha				pha
.88fe		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8900		a5 3b		lda $3b				lda 	zTemp2+1
.8902		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8904		d0 06		bne $890c			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8906		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8908		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.890a		85 3b		sta $3b				sta 	zTemp2+1
.890c						_BLAPMExit:
.890c		68		pla				pla
.890d		60		rts				rts
.078c						BLNormalMapping:
>078c								.fill 	1
.078d						BLYOffset:
>078d								.fill 	1
.078e						BLCopyCounter:
>078e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.890e						Command_BSave:
.890e		a2 00		ldx #$00			ldx 	#0
.8910		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; file name to load
.8913		20 ab 97	jsr $97ab			jsr 	CheckComma 					; consume comma
.8916		e8		inx				inx
.8917		20 83 a6	jsr $a683			jsr 	EvaluateInteger 			; load address (full physical address)
.891a		20 ab 97	jsr $97ab			jsr 	CheckComma 					; consume comma
.891d		e8		inx				inx
.891e		20 83 a6	jsr $a683			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8921		5a		phy				phy
.8922		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8924		a6 60		ldx $60				ldx 	NSMantissa1
.8926		20 1d 82	jsr $821d			jsr 	KNLOpenFileWrite 			; open file for reading
.8929		b0 62		bcs $898d			bcs 	CBSErrorHandler 			; error, so fail.
.892b		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.892e		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8930		20 d5 88	jsr $88d5			jsr 	BLOpenPhysicalMemory 		; open for access.
.8933		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8935		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; used for data offset.
.8938						_BSWriteToFileLoop:
.8938		38		sec				sec 								; pre decrement count.
.8939		a5 5a		lda $5a				lda 	NSMantissa0+2
.893b		e9 01		sbc #$01			sbc 	#1
.893d		85 5a		sta $5a				sta 	NSMantissa0+2
.893f		a5 62		lda $62				lda 	NSMantissa1+2
.8941		e9 00		sbc #$00			sbc 	#0
.8943		85 62		sta $62				sta 	NSMantissa1+2
.8945		a5 6a		lda $6a				lda 	NSMantissa2+2
.8947		e9 00		sbc #$00			sbc 	#0
.8949		85 6a		sta $6a				sta 	NSMantissa2+2
.894b		30 15		bmi $8962			bmi 	_BSFileComplete 			; undercounted, so exit.
.894d		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.894f		9d 81 06	sta $0681,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.8952		e8		inx				inx
.8953		c8		iny				iny 								; next byte
.8954		d0 03		bne $8959			bne 	_BSNoCheck
.8956		20 fd 88	jsr $88fd			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8959						_BSNoCheck:
.8959		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.895b		d0 db		bne $8938			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.895d		20 70 89	jsr $8970			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8960		80 d6		bra $8938			bra 	_BSWriteToFileLoop 			; and keep on going
.8962						_BSFileComplete:
.8962		20 70 89	jsr $8970			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8965		20 f7 88	jsr $88f7			jsr 	BLClosePhysicalMemory 		; close the access.
.8968		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.896b		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.896e		7a		ply				ply
.896f		60		rts				rts
.8970						BSFlushBuffer:
.8970		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8972		f0 0d		beq $8981			beq 	_BSFBExit 					; if so, exit.
.8974		a9 81		lda #$81			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8976		85 36		sta $36				sta 	zTemp0
.8978		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.897a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.897c		20 77 8b	jsr $8b77			jsr 	CLWriteByteBlock 			; write it.
.897f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8981						_BSFBExit:
.8981		60		rts				rts
.8982						CBSSCloseError:
.8982		48		pha				pha
.8983		20 f7 88	jsr $88f7			jsr 	BLClosePhysicalMemory
.8986		ad 90 07	lda $0790			lda 	BasicFileStream
.8989		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.898c		68		pla				pla
.898d						CBSErrorHandler:
.898d		4c bb 8a	jmp $8abb			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.8990						Command_Dir:
.8990		ad 81 07	lda $0781			lda     KNLDefaultDrive				; set drive to list.
.8993		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8995		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.8997		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.899a		b0 4f		bcs $89eb			bcs     _CDExit
.899c						_CDEventLoop:
.899c		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.899f		20 a8 81	jsr $81a8			jsr     GetNextEvent
.89a2		b0 f8		bcs $899c			bcs     _CDEventLoop
.89a4		ad 82 07	lda $0782			lda     KNLEvent.type
.89a7		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.89a9		f0 40		beq $89eb			beq    	_CDExit
.89ab		20 b0 89	jsr $89b0			jsr     _CDMessages 				; handle various messages
.89ae		80 ec		bra $899c			bra     _CDEventLoop
.89b0						_CDMessages:
.89b0		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.89b2		f0 15		beq $89c9			beq     _CDEVRead
.89b4		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.89b6		f0 19		beq $89d1			beq     _CDEVVolume
.89b8		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.89ba		f0 32		beq $89ee			beq     _CDEVFile
.89bc		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.89be		f0 70		beq $8a30			beq     _CDEVFree
.89c0		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.89c2		f0 6e		beq $8a32			beq     _CDEVEOF
.89c4		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.89c6		f0 6a		beq $8a32			beq     _CDEVEOF
.89c8		60		rts				rts
.89c9						_CDEVRead:
.89c9		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.89cc		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.89ce		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.89d1						_CDEVVolume:
.89d1		a9 5b		lda #$5b			lda 	#"["
.89d3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89d6		ad 87 07	lda $0787			lda     KNLEvent.directory.volume.len
.89d9		20 3a 8a	jsr $8a3a			jsr     _CDReadData
.89dc		20 15 98	jsr $9815			jsr 	PrintStringXA
.89df		a9 5d		lda #$5d			lda 	#"]"
.89e1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89e4		a9 0d		lda #$0d			lda 	#13
.89e6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89e9		80 de		bra $89c9			bra     _CDEVRead
.89eb						_CDExit:
.89eb		4c 31 86	jmp $8631			jmp 	WarmStart
.89ee						_CDEVFile:
.89ee		a9 20		lda #$20			lda 	#32
.89f0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.89f3		ad 87 07	lda $0787			lda     KNLEvent.directory.file.len
.89f6		48		pha				pha
.89f7		20 3a 8a	jsr $8a3a			jsr     _CDReadData
.89fa		20 15 98	jsr $9815			jsr 	PrintStringXA
.89fd		68		pla				pla
.89fe		49 ff		eor #$ff			eor 	#$FF
.8a00		38		sec				sec
.8a01		69 10		adc #$10			adc 	#16
.8a03		aa		tax				tax
.8a04						_CDEVTab:
.8a04		a9 20		lda #$20			lda 	#32
.8a06		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a09		ca		dex				dex
.8a0a		10 f8		bpl $8a04			bpl 	_CDEVTab
.8a0c		20 51 8a	jsr $8a51			jsr 	_CDReadExtended
.8a0f		ad 26 05	lda $0526			lda 	lineBuffer
.8a12		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8a15		20 2b 9c	jsr $9c2b			jsr 	ConvertInt16
.8a18		20 15 98	jsr $9815			jsr 	PrintStringXA
.8a1b		a2 8a		ldx #$8a			ldx 	#_CDEVFMessage >> 8
.8a1d		a9 24		lda #$24			lda 	#_CDEVFMessage & $FF
.8a1f		20 15 98	jsr $9815			jsr 	PrintStringXA
.8a22		80 a5		bra $89c9			bra     _CDEVRead
.8a24						_CDEVFMessage:
>8a24		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8a2c		29 2e 0d 00
.8a30						_CDEVFree:
.8a30		80 00		bra $8a32			bra     _CDEVEOF
.8a32						_CDEVEOF:
.8a32		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.8a35		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8a37		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8a3a						_CDReadData:
.8a3a		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a3c		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a3e		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a40		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a42		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a44		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8a47		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8a49		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8a4c		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8a4e		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8a50		60		rts				rts
.8a51						_CDReadExtended:
.8a51		a9 02		lda #$02			lda     #2
.8a53		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a55		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a57		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a59		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a5b		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a5d		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8a60						Command_Drive:
.8a60		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.8a63		20 19 82	jsr $8219			jsr 	KNLSetDrive
.8a66		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8a67						Command_Load:
.8a67		20 6d 8a	jsr $8a6d			jsr 	LoadFile
.8a6a		4c 31 86	jmp $8631			jmp 	WarmStart
.8a6d						LoadFile:
.8a6d		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; file name to load
.8a70		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8a72		a5 36		lda $36				lda 	zTemp0
.8a74		20 22 82	jsr $8222			jsr 	KNLOpenFileRead 			; open file for reading
.8a77		b0 42		bcs $8abb			bcs 	CLErrorHandler 				; error, so fail.
.8a79		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8a7c		20 0b 8b	jsr $8b0b			jsr     LoadReadByteInit            ; Init reader with the stream
.8a7f		20 e8 91	jsr $91e8			jsr 	NewProgram 					; does the actual NEW.
.8a82		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8a85						_CLLoop:
.8a85		20 c9 8a	jsr $8ac9			jsr 	LoadReadLine 				; get next line.
.8a88		f0 10		beq $8a9a			beq 	_CLExit 					; end, exit.
.8a8a		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8a8d		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8a90		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8a93		f0 f0		beq $8a85			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8a95		20 0c 86	jsr $860c			jsr 	EditProgramCode 			; do the editing etc.
.8a98		80 eb		bra $8a85			bra 	_CLLoop
.8a9a						_CLExit:
.8a9a		ad 90 07	lda $0790			lda 	BasicFileStream
.8a9d		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.8aa0						CLComplete:
.8aa0		a9 a8		lda #$a8			lda 	#_CLCMsg & $FF
.8aa2		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8aa4		20 15 98	jsr $9815			jsr 	PrintStringXA
.8aa7		60		rts				rts
.8aa8						_CLCMsg:
>8aa8		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8ab0		2e 0d 00
.8ab3						CLCloseError:
.8ab3		48		pha				pha
.8ab4		ad 90 07	lda $0790			lda 	BasicFileStream
.8ab7		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.8aba		68		pla				pla
.8abb						CLErrorHandler:
.8abb		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8abd		f0 05		beq $8ac4			beq 	_CLEHNotFound
.8abf		a9 1a		lda #$1a		lda	#26
.8ac1		4c bc 97	jmp $97bc		jmp	ErrorHandler
.8ac4						_CLEHNotFound:
.8ac4		a9 19		lda #$19		lda	#25
.8ac6		4c bc 97	jmp $97bc		jmp	ErrorHandler
.8ac9						LoadReadLine:
.8ac9		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8acb		20 e5 8a	jsr $8ae5			jsr 	LoadReadCharacter
.8ace		f0 14		beq $8ae4			beq 	_LRLExit 					; eof ?
.8ad0		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8ad2		90 f5		bcc $8ac9			bcc 	LoadReadLine
.8ad4						_LRLLoop:
.8ad4		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8ad7		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8ada		e8		inx				inx
.8adb		20 e5 8a	jsr $8ae5			jsr 	LoadReadCharacter 			; next line
.8ade		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8ae0		b0 f2		bcs $8ad4			bcs 	_LRLLoop
.8ae2		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8ae4						_LRLExit:
.8ae4		60		rts				rts
.8ae5						LoadReadCharacter:
.8ae5		da		phx				phx
.8ae6		5a		phy				phy
.8ae7		ad 8f 07	lda $078f			lda 	LoadEOFFlag 				; already done EOF.
.8aea		d0 0c		bne $8af8			bne 	_LRCIsEOF
.8aec		20 15 8b	jsr $8b15			jsr 	LoadReadByte 				; read a byte
.8aef		90 09		bcc $8afa			bcc		_LRCExit 					; read okay.
.8af1		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8af3		d0 be		bne $8ab3			bne 	CLCloseError
.8af5		ce 8f 07	dec $078f			dec 	LoadEOFFlag
.8af8						_LRCIsEOF:
.8af8		a9 00		lda #$00			lda 	#0
.8afa						_LRCExit:
.8afa		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8afc		d0 02		bne $8b00			bne 	_LRCNotTab
.8afe		a9 20		lda #$20			lda 	#' '
.8b00						_LRCNotTab:
.8b00		c9 0a		cmp #$0a			cmp 	#$0A
.8b02		d0 02		bne $8b06			bne 	_LRCNotLF
.8b04		a9 0d		lda #$0d			lda 	#$0D
.8b06						_LRCNotLF:
.8b06		7a		ply				ply
.8b07		fa		plx				plx
.8b08		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b0a		60		rts				rts
.8b0b						LoadReadByteInit:
.8b0b		8d 91 07	sta $0791			sta     LoadFileStream 				; save stream
.8b0e		9c 92 07	stz $0792			stz     LoadNextCharacter 			; reset buffer
.8b11		9c 93 07	stz $0793			stz     LoadEndCharacter
.8b14		60		rts				rts
.8b15						LoadReadByte:
.8b15		da		phx				phx
.8b16		ae 92 07	ldx $0792			ldx     LoadNextCharacter 					; all data consumed ?
.8b19		ec 93 07	cpx $0793			cpx     LoadEndCharacter
.8b1c		d0 12		bne $8b30			bne     _KNLRBGetNextByte
.8b1e		ad 91 07	lda $0791			lda     LoadFileStream
.8b21		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8b23		20 77 82	jsr $8277			jsr     KNLReadBlock 				; read next chunk from the stream
.8b26		b0 0f		bcs $8b37			bcs     _KNLRBError 				; error has occurred on read.
.8b28		8d 93 07	sta $0793			sta     LoadEndCharacter 						; # read is the number available
.8b2b		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8b2d		8e 92 07	stx $0792			stx     LoadNextCharacter
.8b30						_KNLRBGetNextByte:
.8b30		bd 81 06	lda $0681,x			lda     KNLReadBuffer,x 			; get the next data item
.8b33		ee 92 07	inc $0792			inc     LoadNextCharacter 					; and advance the index
.8b36		18		clc				clc 								; succeeded
.8b37						_KNLRBError:
.8b37		fa		plx				plx
.8b38		60		rts				rts
.078f						LoadEOFFlag:
>078f								.fill 	1
.0790						BasicFileStream:
>0790								.fill 	1
.0791						LoadFileStream:
>0791								.byte   ?
.0792						LoadNextCharacter:
>0792								.byte   ?
.0793						LoadEndCharacter:
>0793								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8b39						Command_Save:
.8b39		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; file name to load
.8b3c		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b3e		a5 36		lda $36				lda 	zTemp0
.8b40		20 1d 82	jsr $821d			jsr 	KNLOpenFileWrite 			; open file for writing
.8b43		b0 2f		bcs $8b74			bcs 	CSErrorHandler 				; error, so fail.
.8b45		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8b48		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b4a		85 30		sta $30				sta 	codePtr
.8b4c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b4e		85 31		sta $31				sta 	codePtr+1
.8b50						_CSLoop:
.8b50		b2 30		lda ($30)			lda 	(codePtr)
.8b52		f0 17		beq $8b6b			beq 	_CSExit
.8b54		20 98 8b	jsr $8b98			jsr 	CSGetCleanLine
.8b57		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8b59		85 36		sta $36				sta 	zTemp0
.8b5b		20 77 8b	jsr $8b77			jsr 	CLWriteByteBlock 			; write the block out.
.8b5e		18		clc				clc
.8b5f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8b61		65 30		adc $30				adc 	codePtr
.8b63		85 30		sta $30				sta 	codePtr
.8b65		90 02		bcc $8b69			bcc 	_CREExit
.8b67		e6 31		inc $31				inc 	codePtr+1 					; carry
.8b69						_CREExit:
.8b69		80 e5		bra $8b50			bra 	_CSLoop
.8b6b						_CSExit:
.8b6b		ad 90 07	lda $0790			lda 	BasicFileStream 			; close file
.8b6e		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.8b71		4c a0 8a	jmp $8aa0			jmp 	CLComplete 					; display complete message.
.8b74						CSErrorHandler:
.8b74		4c bb 8a	jmp $8abb			jmp 	CLErrorHandler
.8b77						CLWriteByteBlock:
.8b77		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8b79		f0 1c		beq $8b97			beq 	_CLWBBExit					; if so, exit
.8b7b		ad 90 07	lda $0790			lda 	BasicFileStream 			; stream to write, count in X
.8b7e		20 b2 82	jsr $82b2			jsr 	KNLWriteBlock 				; call one write attempt
.8b81		b0 f1		bcs $8b74			bcs 	CSErrorHandler 				; error occurred
.8b83		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8b85		8a		txa				txa 								; subtract bytes written from X, total count.
.8b86		38		sec				sec
.8b87		e5 38		sbc $38				sbc 	zTemp1
.8b89		aa		tax				tax
.8b8a		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8b8b		a5 36		lda $36				lda 	zTemp0
.8b8d		65 38		adc $38				adc 	zTemp1
.8b8f		85 36		sta $36				sta 	zTemp0
.8b91		90 e4		bcc $8b77			bcc 	CLWriteByteBlock
.8b93		e6 37		inc $37				inc 	zTemp0+1
.8b95		80 e0		bra $8b77			bra 	CLWriteByteBlock 			; and retry write out.
.8b97						_CLWBBExit:
.8b97		60		rts				rts
.8b98						CSGetCleanLine:
.8b98		a9 00		lda #$00			lda 	#0 							; no indent.
.8b9a		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8b9d		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8b9f		a0 00		ldy #$00			ldy 	#0
.8ba1						_CSClean:
.8ba1		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8ba4		f0 09		beq $8baf			beq 	_CSDoneClean
.8ba6		30 04		bmi $8bac			bmi 	_CSIgnoreCharacter
.8ba8		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8bab		e8		inx				inx
.8bac						_CSIgnoreCharacter:
.8bac		c8		iny				iny
.8bad		80 f2		bra $8ba1			bra 	_CSClean
.8baf						_CSDoneClean:
.8baf		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8bb1		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8bb4		e8		inx				inx
.8bb5		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8bb8		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8bba		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8bbc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.dc65						m
.8bbd						Command_VERIFY:
.8bbd		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; file name to verify
.8bc0		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8bc2		a5 36		lda $36				lda 	zTemp0
.8bc4		20 22 82	jsr $8222			jsr 	KNLOpenFileRead 			; open file for reading
.8bc7		b0 4b		bcs $8c14			bcs 	_CVErrorHandler 			; error, so fail.
.8bc9		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8bcc		20 0b 8b	jsr $8b0b			jsr     LoadReadByteInit            ; Init reader with the stream
.8bcf		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8bd2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bd4		85 30		sta $30				sta 	codePtr
.8bd6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bd8		85 31		sta $31				sta 	codePtr+1
.8bda						_CVLoop:
.8bda		20 c9 8a	jsr $8ac9			jsr 	LoadReadLine 				; get next line.
.8bdd		f0 27		beq $8c06			beq 	_CVExit 					; end, exit.
.8bdf		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8be2		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8be5		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8be8		f0 f0		beq $8bda			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8bea		a0 00		ldy #$00			ldy 	#0 							; start compare
.8bec						_CVCompareLoop:
.8bec		b1 30		lda ($30),y			lda 	(codePtr),y
.8bee		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8bf1		d0 1c		bne $8c0f			bne 	_CVCompareError
.8bf3		c8		iny				iny
.8bf4		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8bf7		d0 f3		bne $8bec			bne 	_CVCompareLoop
.8bf9		18		clc				clc
.8bfa		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bfc		65 30		adc $30				adc 	codePtr
.8bfe		85 30		sta $30				sta 	codePtr
.8c00		90 02		bcc $8c04			bcc 	_CREExit
.8c02		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c04						_CREExit:
.8c04		80 d4		bra $8bda			bra 	_CVLoop
.8c06						_CVExit:
.8c06		ad 90 07	lda $0790			lda 	BasicFileStream
.8c09		20 ec 82	jsr $82ec			jsr 	KNLCloseFile
.8c0c		4c a0 8a	jmp $8aa0			jmp 	CLComplete
.8c0f						_CVCompareError:
.8c0f		a9 1b		lda #$1b		lda	#27
.8c11		4c bc 97	jmp $97bc		jmp	ErrorHandler
.8c14						_CVErrorHandler:
.8c14		4c bb 8a	jmp $8abb			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c17						ForCommand:
.8c17		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8c19		20 63 b8	jsr $b863			jsr 	StackOpen
.8c1c		a2 00		ldx #$00			ldx 	#0
.8c1e		20 0a a1	jsr $a10a			jsr 	EvaluateTerm
.8c21		b5 50		lda $50,x			lda 	NSStatus,x
.8c23		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c25		d0 47		bne $8c6e			bne		_FCError
.8c27		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c29		20 b3 97	jsr $97b3			jsr 	CheckNextA
.8c2c		e8		inx				inx
.8c2d		20 83 a6	jsr $a683			jsr 	EvaluateInteger 			; <from> in +1
.8c30		b1 30		lda ($30),y			lda 	(codePtr),y
.8c32		c8		iny				iny 								; consume it
.8c33		48		pha				pha 								; save on stack for later
.8c34		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8c36		f0 04		beq $8c3c			beq 	_FCNoSyntax
.8c38		c9 db		cmp #$db			cmp 	#KWD_TO
.8c3a		d0 35		bne $8c71			bne 	_FCSyntaxError
.8c3c						_FCNoSyntax:
.8c3c		e8		inx				inx
.8c3d		20 83 a6	jsr $a683			jsr 	EvaluateInteger
.8c40		20 a8 b8	jsr $b8a8			jsr 	STKSaveCodePosition 		; save loop back position
.8c43		68		pla				pla 								; restore DOWNTO or TO
.8c44		5a		phy				phy 								; save Y on the stack
.8c45		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8c47		f0 02		beq $8c4b			beq 	_FCNotDownTo
.8c49		a9 02		lda #$02			lda 	#2
.8c4b						_FCNotDownTo:
.8c4b		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8c4c		a0 10		ldy #$10			ldy 	#16
.8c4e		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8c50		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8c52		a5 58		lda $58				lda 	NSMantissa0
.8c54		91 34		sta ($34),y			sta 	(basicStack),y
.8c56		a5 60		lda $60				lda 	NSMantissa1
.8c58		c8		iny				iny
.8c59		91 34		sta ($34),y			sta 	(basicStack),y
.8c5b		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c5d		a2 01		ldx #$01			ldx 	#1
.8c5f		20 74 8c	jsr $8c74			jsr 	FCIntegerToStack
.8c62		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8c64		a2 02		ldx #$02			ldx 	#2
.8c66		20 74 8c	jsr $8c74			jsr 	FCIntegerToStack
.8c69		20 8f 8c	jsr $8c8f			jsr 	CopyIndexToReference
.8c6c		7a		ply				ply 								; restore position
.8c6d		60		rts				rts
.8c6e						_FCError:
.8c6e		4c f3 b1	jmp $b1f3			jmp 	TypeError
.8c71						_FCSyntaxError:
.8c71		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.8c74						FCIntegerToStack:
.8c74		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8c76		10 03		bpl $8c7b			bpl	 	_FCNotNegative
.8c78		20 df a6	jsr $a6df			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c7b						_FCNotNegative:
.8c7b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c7d		91 34		sta ($34),y			sta 	(basicStack),y
.8c7f		c8		iny				iny
.8c80		b5 60		lda $60,x			lda 	NSMantissa1,x
.8c82		91 34		sta ($34),y			sta 	(basicStack),y
.8c84		c8		iny				iny
.8c85		b5 68		lda $68,x			lda 	NSMantissa2,x
.8c87		91 34		sta ($34),y			sta 	(basicStack),y
.8c89		c8		iny				iny
.8c8a		b5 70		lda $70,x			lda 	NSMantissa3,x
.8c8c		91 34		sta ($34),y			sta 	(basicStack),y
.8c8e		60		rts				rts
.8c8f						CopyIndexToReference:
.8c8f		5a		phy				phy
.8c90		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c92		38		sec				sec 								; (because we copy from offset 8)
.8c93		b1 34		lda ($34),y			lda 	(basicStack),y
.8c95		e9 08		sbc #$08			sbc 	#8
.8c97		85 36		sta $36				sta 	zTemp0
.8c99		c8		iny				iny
.8c9a		b1 34		lda ($34),y			lda 	(basicStack),y
.8c9c		e9 00		sbc #$00			sbc 	#0
.8c9e		85 37		sta $37				sta 	zTemp0+1
.8ca0		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ca2		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ca4		b1 34		lda ($34),y			lda 	(basicStack),y
.8ca6		0a		asl a				asl 	a 							; into carry
.8ca7		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ca9		90 14		bcc $8cbf			bcc 	_CITRNormal
.8cab		38		sec				sec
.8cac						_CITRNegative:
.8cac		a9 00		lda #$00			lda 	#0
.8cae		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8cb0		91 36		sta ($36),y			sta 	(zTemp0),y
.8cb2		c8		iny				iny
.8cb3		ca		dex				dex
.8cb4		d0 f6		bne $8cac			bne 	_CITRNegative
.8cb6		88		dey				dey 								; look at MSB of mantissa
.8cb7		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8cb9		09 80		ora #$80			ora 	#$80
.8cbb		91 36		sta ($36),y			sta 	(zTemp0),y
.8cbd		7a		ply				ply
.8cbe		60		rts				rts
.8cbf						_CITRNormal:
.8cbf		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8cc1		91 36		sta ($36),y			sta 	(zTemp0),y
.8cc3		c8		iny				iny
.8cc4		ca		dex				dex
.8cc5		d0 f8		bne $8cbf			bne 	_CITRNormal
.8cc7		7a		ply				ply 								; and exit.
.8cc8		60		rts				rts
.8cc9						NextCommand:
.8cc9		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8ccb		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8ccd		20 90 b8	jsr $b890			jsr 	StackCheckFrame
.8cd0		5a		phy				phy
.8cd1		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8cd3		b1 34		lda ($34),y			lda 	(basicStack),y
.8cd5		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8cd7		30 02		bmi $8cdb			bmi 	_NCStepNeg
.8cd9		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8cdb						_NCStepNeg:
.8cdb		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8cdd		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8cdf		18		clc				clc
.8ce0						_NCBump:
.8ce0		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8ce2		91 34		sta ($34),y			sta 	(basicStack),y
.8ce4		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8ce6		c8		iny				iny 								; next byte
.8ce7		ca		dex				dex 								; do four times
.8ce8		d0 f6		bne $8ce0			bne 	_NCBump
.8cea		20 8f 8c	jsr $8c8f			jsr		CopyIndexToReference		; copy it to the reference variable.
.8ced		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8cef		b1 34		lda ($34),y			lda 	(basicStack),y
.8cf1		0a		asl a				asl 	a 							; sign bit to carry
.8cf2		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8cf4		85 38		sta $38				sta 	zTemp1
.8cf6		90 02		bcc $8cfa			bcc 	_NCCompRev 					; use if step is +ve
.8cf8		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8cfa						_NCCompRev:
.8cfa		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8cfc		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8cfe		85 39		sta $39				sta 	zTemp1+1
.8d00		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8d02		38		sec				sec
.8d03						_NCCompare:
.8d03		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d05		b1 34		lda ($34),y			lda 	(basicStack),y
.8d07		a4 39		ldy $39				ldy 	zTemp1+1
.8d09		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d0b		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d0d		e6 39		inc $39				inc 	zTemp1+1
.8d0f		ca		dex				dex 								; do it 4 times.
.8d10		d0 f1		bne $8d03			bne 	_NCCompare
.8d12		50 02		bvc $8d16			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d14		49 80		eor #$80			eor 	#$80
.8d16						_NCNoOverflow:
.8d16		7a		ply				ply 								; restore Y position
.8d17		0a		asl a				asl 	a 							; is bit 7 set.
.8d18		90 04		bcc $8d1e			bcc 	_NCLoopBack 				; if no , >= so loop back
.8d1a		20 82 b8	jsr $b882			jsr 	StackClose 					; exit the loop
.8d1d		60		rts				rts
.8d1e						_NCLoopBack:
.8d1e		20 b9 b8	jsr $b8b9			jsr 	STKLoadCodePosition 		; loop back
.8d21		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d22						Command_GOSUB:
.8d22		a2 00		ldx #$00			ldx 	#0
.8d24		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d27		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d29		20 63 b8	jsr $b863			jsr 	StackOpen 					; create frame
.8d2c		20 a8 b8	jsr $b8a8			jsr 	STKSaveCodePosition 		; save current position
.8d2f		4c 45 8d	jmp $8d45			jmp 	GotoStackX
.8d32						Command_RETURN:
.8d32		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d34		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d36		20 90 b8	jsr $b890			jsr 	StackCheckFrame
.8d39		20 b9 b8	jsr $b8b9			jsr 	STKLoadCodePosition 		; restore code position
.8d3c		20 82 b8	jsr $b882			jsr 	StackClose
.8d3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d40						GotoCommand:
.8d40		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d42		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.8d45						GotoStackX:
.8d45		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8d47		48		pha				pha 								; it is slightly inefficient, just in cases.
.8d48		b5 58		lda $58,x			lda 	NSMantissa0,x
.8d4a		fa		plx				plx
.8d4b		20 81 b4	jsr $b481			jsr 	MemorySearch 				; transfer to line number AX.
.8d4e		90 05		bcc $8d55			bcc 	_GotoError 					; not found, off end.
.8d50		d0 03		bne $8d55			bne 	_GotoError 					; not found exactly
.8d52		4c 7e 93	jmp $937e			jmp 	RunNewLine 					; and go straight to new line code.
.8d55						_GotoError:
.8d55		a9 0d		lda #$0d		lda	#13
.8d57		4c bc 97	jmp $97bc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d5a						IfCommand:
.8d5a		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8d5c		20 64 a6	jsr $a664			jsr 	EvaluateNumber
.8d5f		b1 30		lda ($30),y			lda 	(codePtr),y
.8d61		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8d63		d0 0a		bne $8d6f			bne 	_IfStructured 				; we still support it.
.8d65		c8		iny				iny 								; consume THEN
.8d66		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero
.8d69		f0 01		beq $8d6c			beq 	_IfFail 					; if fail, go to next line
.8d6b		60		rts				rts 								; if THEN just continue
.8d6c						_IfFail:
.8d6c		4c 59 93	jmp $9359			jmp 	EOLCommand
.8d6f						_IfStructured:
.8d6f		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero
.8d72		d0 07		bne $8d7b			bne 	_IfExit 					; if not, then continue normally.
.8d74		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8d76		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8d78		20 fe 96	jsr $96fe			jsr 	ScanForward 				; and run from there
.8d7b						_IfExit:
.8d7b		60		rts				rts
.8d7c						ElseCode:
.8d7c		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d7e		aa		tax				tax 								; so just go to the structure exit
.8d7f		20 fe 96	jsr $96fe			jsr 	ScanForward
.8d82		60		rts				rts
.8d83						EndIf:
.8d83		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8d84						Command_Input:
.8d84		9c 24 04	stz $0424			stz 	isPrintFlag
.8d87		80 0c		bra $8d95			bra 	Command_IP_Main
.8d89						Command_CPrint:
.8d89		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8d8b		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d8e		80 05		bra $8d95			bra 	Command_IP_Main
.8d90						Command_Print:
.8d90		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8d92		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8d95						Command_IP_Main:
.8d95		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8d96						_CPLoop:
.8d96		08		php				php 								; save last action flag
.8d97		b1 30		lda ($30),y			lda 	(codePtr),y
.8d99		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8d9b		f0 54		beq $8df1			beq 	_CPExit
.8d9d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8d9f		f0 50		beq $8df1			beq 	_CPExit
.8da1		68		pla				pla 								; throw last action flag
.8da2		b1 30		lda ($30),y			lda 	(codePtr),y
.8da4		c8		iny				iny
.8da5		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8da7		f0 45		beq $8dee			beq 	_CPContinueWithSameLine
.8da9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8dab		f0 3c		beq $8de9			beq 	_CPTab
.8dad		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8daf		f0 34		beq $8de5			beq 	_CPNewLine
.8db1		88		dey				dey 								; undo the get.
.8db2		20 be 9c	jsr $9cbe			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8db5		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8db7		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8db9		f0 0d		beq $8dc8			beq 	_CPIsValue 					; no, display it.
.8dbb		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8dbe		d0 05		bne $8dc5			bne 	_CPIsPrint 					; otherwise display.
.8dc0		20 fa 8d	jsr $8dfa			jsr 	CIInputValue 				; input a value to the reference
.8dc3		80 20		bra $8de5			bra 	_CPNewLine
.8dc5						_CPIsPrint:
.8dc5		20 83 9f	jsr $9f83			jsr 	Dereference 				; dereference if required.
.8dc8						_CPIsValue:
.8dc8		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8dca		29 10		and #$10			and 	#NSBIsString
.8dcc		f0 09		beq $8dd7			beq 	_CPNumber
.8dce		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8dd0		a5 58		lda $58				lda 	NSMantissa0
.8dd2		20 5d 8e	jsr $8e5d			jsr 	CPPrintStringXA
.8dd5		80 be		bra $8d95			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8dd7						_CPNumber:
.8dd7		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8dd9		20 4b a5	jsr $a54b			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8ddc		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8dde		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8de0		20 5d 8e	jsr $8e5d			jsr 	CPPrintStringXA 			; print it.
.8de3		80 b0		bra $8d95			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8de5						_CPNewLine:
.8de5		a9 0d		lda #$0d			lda 	#13
.8de7		80 02		bra $8deb			bra 	_CPPrintCharDirect
.8de9						_CPTab:
.8de9		a9 09		lda #$09			lda 	#9 							; print TAB
.8deb						_CPPrintCharDirect:
.8deb		20 78 8e	jsr $8e78			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8dee						_CPContinueWithSameLine:
.8dee		38		sec				sec 								; loop round with carry set, which
.8def		80 a5		bra $8d96			bra 	_CPLoop 					; will inhibit final CR
.8df1						_CPExit:
.8df1		28		plp				plp 								; get last action flag
.8df2		b0 05		bcs $8df9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8df4		a9 0d		lda #$0d			lda 	#13 						; print new line
.8df6		20 78 8e	jsr $8e78			jsr 	CPPVControl
.8df9						_CPExit2:
.8df9		60		rts				rts
.8dfa						CIInputValue:
.8dfa		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8dfc						_CIInputLine:
.8dfc		20 7b 8e	jsr $8e7b			jsr 	CPInputVector 				; get key
.8dff		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8e01		f0 1f		beq $8e22			beq 	_CIHaveValue
.8e03		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8e05		f0 11		beq $8e18			beq 	_CIBackspace
.8e07		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8e09		90 f1		bcc $8dfc			bcc 	_CIInputLine
.8e0b		e0 50		cpx #$50			cpx 	#80 						; max length
.8e0d		b0 ed		bcs $8dfc			bcs 	_CIInputLine
.8e0f		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8e12		e8		inx				inx
.8e13		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e16		80 e4		bra $8dfc			bra 	_CIInputLine
.8e18						_CIBackspace:
.8e18		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8e1a		f0 e0		beq $8dfc			beq 	_CIInputLine
.8e1c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e1f		ca		dex				dex
.8e20		80 da		bra $8dfc			bra 	_CIInputLine
.8e22						_CIHaveValue:
.8e22		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8e25		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8e27		29 10		and #$10			and 	#NSBIsString
.8e29		f0 17		beq $8e42			beq 	_CIAssignNumber 			; assign a number
.8e2b		a2 01		ldx #$01			ldx 	#1
.8e2d		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e2f		95 58		sta $58,x			sta 	NSMantissa0,x
.8e31		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e33		95 60		sta $60,x			sta 	NSMantissa1,x
.8e35		74 68		stz $68,x			stz 	NSMantissa2,x
.8e37		74 70		stz $70,x			stz 	NSMantissa3,x
.8e39		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8e3b		95 50		sta $50,x			sta  	NSStatus,x
.8e3d		ca		dex				dex 								; X = 0
.8e3e		20 f0 8e	jsr $8ef0			jsr 	AssignVariable
.8e41		60		rts				rts
.8e42						_CIAssignNumber:
.8e42		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e44		85 36		sta $36				sta 	zTemp0
.8e46		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e48		85 37		sta $37				sta 	zTemp0+1
.8e4a		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8e4c		20 2b a4	jsr $a42b			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8e4f		90 07		bcc $8e58			bcc 	_CIIsOkay
.8e51		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8e53		20 70 8e	jsr $8e70			jsr 	CPPrintVector
.8e56		80 a2		bra $8dfa			bra 	CIInputValue
.8e58						_CIIsOkay:
.8e58		ca		dex				dex 								; X = 0
.8e59		20 f0 8e	jsr $8ef0			jsr 	AssignVariable
.8e5c		60		rts				rts
.8e5d						CPPrintStringXA:
.8e5d		5a		phy				phy
.8e5e		86 37		stx $37				stx 	zTemp0+1
.8e60		85 36		sta $36				sta 	zTemp0
.8e62		a0 00		ldy #$00			ldy 	#0
.8e64						_PSXALoop:
.8e64		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e66		f0 06		beq $8e6e			beq 	_PSXAExit
.8e68		20 70 8e	jsr $8e70			jsr 	CPPrintVector
.8e6b		c8		iny				iny
.8e6c		80 f6		bra $8e64			bra 	_PSXALoop
.8e6e						_PSXAExit:
.8e6e		7a		ply				ply
.8e6f		60		rts				rts
.8e70						CPPrintVector:
.8e70		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8e73		30 03		bmi $8e78			bmi 	CPPVControl
.8e75		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8e78						CPPVControl:
.8e78		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8e7b						CPInputVector:
.8e7b		4c 91 81	jmp $8191			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8e7e						UnaryJoyX:
.8e7e		18		clc				clc
.8e7f		80 01		bra $8e82			bra 	JoyMain
.8e81						UnaryJoyY:
.8e81		38		sec				sec
.8e82						JoyMain:
.8e82		fa		plx				plx 								; get pos
.8e83		08		php				php 								; save carry (set for Y)
.8e84		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8e87		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.8e8a		20 f2 82	jsr $82f2			jsr 	KNLReadController 			; read the controller.
.8e8d		28		plp				plp
.8e8e		b0 02		bcs $8e92			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8e90		4a		lsr a				lsr 	a
.8e91		4a		lsr a				lsr 	a
.8e92						_JMNoShift:
.8e92		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8e93		b0 07		bcs $8e9c			bcs 	JMIsLeft
.8e95		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8e96		b0 07		bcs $8e9f			bcs 	JMIsRight
.8e98		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; zero result
.8e9b		60		rts				rts
.8e9c						JMIsLeft:
.8e9c		4c 29 98	jmp $9829			jmp 	ReturnTrue
.8e9f						JMIsRight:
.8e9f		a9 01		lda #$01			lda 	#1
.8ea1		20 18 a7	jsr $a718			jsr 	NSMSetByte
.8ea4		60		rts				rts
.8ea5						UnaryJoyB:
.8ea5		fa		plx				plx 								; get pos
.8ea6		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ea9		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.8eac		20 f2 82	jsr $82f2			jsr 	KNLReadController 			; read the controller.
.8eaf		29 10		and #$10			and 	#$10
.8eb1		d0 e9		bne $8e9c			bne 	JMIsLeft
.8eb3		20 16 a7	jsr $a716			jsr 	NSMSetZero
.8eb6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8eb7						LetCommand:
.8eb7		a2 00		ldx #$00			ldx 	#0
.8eb9		b1 30		lda ($30),y			lda 	(codePtr),y
.8ebb		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8ebd		d0 14		bne $8ed3			bne 	_LCStandard
.8ebf		c8		iny				iny 								; skip equal
.8ec0		20 0a a1	jsr $a10a			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8ec3		20 83 9f	jsr $9f83			jsr 	Dereference 				; dereference it to a value
.8ec6		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8ec8		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8eca		95 50		sta $50,x			sta 	NSStatus,x
.8ecc		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8ece		d0 0f		bne $8edf			bne 	_LCMain
.8ed0		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; was a reference before.
.8ed3						_LCStandard:
.8ed3		ad a8 9c	lda $9ca8			lda 	PrecedenceLevel+"*"			; precedence > this
.8ed6		20 c2 9c	jsr $9cc2			jsr 	EvaluateExpressionAtPrecedence
.8ed9		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8edb		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8edd		f0 0e		beq $8eed			beq 	_LetGoProc 					; it's a procedure call.
.8edf						_LCMain:
.8edf		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8ee1		20 b3 97	jsr $97b3			jsr 	CheckNextA
.8ee4		e8		inx				inx 								; RHS
.8ee5		20 5b a6	jsr $a65b			jsr 	EvaluateValue
.8ee8		ca		dex				dex
.8ee9		20 f0 8e	jsr $8ef0			jsr 	AssignVariable
.8eec		60		rts				rts
.8eed						_LetGoProc:
.8eed		4c 2f 92	jmp $922f			jmp 	CallProcedure
.8ef0						AssignVariable:
.8ef0		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8ef2		48		pha				pha 								; save a copy
.8ef3		55 51		eor $51,x			eor 	NSStatus+1,x
.8ef5		29 10		and #$10			and 	#NSBIsString
.8ef7		d0 0b		bne $8f04			bne 	_ASError
.8ef9		68		pla				pla 								; get back
.8efa		29 10		and #$10			and 	#NSBIsString 				; check type
.8efc		d0 03		bne $8f01			bne 	_ASString
.8efe		4c c1 9e	jmp $9ec1			jmp 	AssignNumber
.8f01						_ASString:
.8f01		4c 1f 9f	jmp $9f1f			jmp 	AssignString
.8f04						_ASError:
.8f04		4c f3 b1	jmp $b1f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f07						Command_List:
.8f07		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8f0a		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8f0c		20 75 80	jsr $8075			jsr 	SNDCommand
.8f0f		b1 30		lda ($30),y			lda 	(codePtr),y
.8f11		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8f13		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8f15		f0 72		beq $8f89			beq 	_CLListProcedure
.8f17		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f19		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8f1b		a9 ff		lda #$ff			lda 	#$FF
.8f1d		85 5f		sta $5f				sta 	NSMantissa0+7
.8f1f		85 67		sta $67				sta 	NSMantissa1+7
.8f21		b1 30		lda ($30),y			lda 	(codePtr),y
.8f23		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f25		f0 1a		beq $8f41			beq 	_CLSecond
.8f27		20 06 90	jsr $9006			jsr 	CLIsDigit 					; if not digit, list all
.8f2a		b0 20		bcs $8f4c			bcs 	_CLStart
.8f2c		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f2e		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.8f31		b1 30		lda ($30),y			lda 	(codePtr),y
.8f33		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f35		f0 0a		beq $8f41			beq 	_CLSecond 					; if so go get it
.8f37		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8f39		85 5f		sta $5f				sta 	NSMantissa0+7
.8f3b		a5 64		lda $64				lda 	NSMantissa1+4
.8f3d		85 67		sta $67				sta 	NSMantissa1+7
.8f3f		80 0b		bra $8f4c			bra 	_CLStart
.8f41						_CLSecond:
.8f41		c8		iny				iny 								; consume comma
.8f42		20 06 90	jsr $9006			jsr 	CLIsDigit 					; digit found
.8f45		b0 05		bcs $8f4c			bcs 	_CLStart 					; if not, continue listing
.8f47		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f49		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.8f4c						_CLStart
.8f4c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f4e		85 30		sta $30				sta 	codePtr
.8f50		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f52		85 31		sta $31				sta 	codePtr+1
.8f54						_CLLoop:
.8f54		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f56		f0 03		beq $8f5b			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f58		20 37 81	jsr $8137			jsr 	ProcessEvents
.8f5b						_NoEvents:
.8f5b		d0 27		bne $8f84			bne 	_CLBreak
.8f5d		b2 30		lda ($30)			lda 	(codePtr)
.8f5f		f0 20		beq $8f81			beq 	_CLExit
.8f61		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8f63		20 f5 8f	jsr $8ff5			jsr 	CLCompareLineNo
.8f66		90 0c		bcc $8f74			bcc 	_CLNext
.8f68		a2 07		ldx #$07			ldx 	#7
.8f6a		20 f5 8f	jsr $8ff5			jsr 	CLCompareLineNo
.8f6d		f0 02		beq $8f71			beq 	_CLDoThisOne
.8f6f		b0 03		bcs $8f74			bcs 	_CLNext
.8f71						_CLDoThisOne:
.8f71		20 e2 8f	jsr $8fe2			jsr 	CLListOneLine 				; routine to list the current line.
.8f74						_CLNext:
.8f74		18		clc				clc
.8f75		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f77		65 30		adc $30				adc 	codePtr
.8f79		85 30		sta $30				sta 	codePtr
.8f7b		90 02		bcc $8f7f			bcc 	_CREExit
.8f7d		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f7f						_CREExit:
.8f7f		80 d3		bra $8f54			bra 	_CLLoop
.8f81						_CLExit:
.8f81		4c 31 86	jmp $8631			jmp 	WarmStart
.8f84						_CLBreak:
.8f84		a9 01		lda #$01		lda	#1
.8f86		4c bc 97	jmp $97bc		jmp	ErrorHandler
.8f89						_CLListProcedure:
.8f89		b1 30		lda ($30),y			lda 	(codePtr),y
.8f8b		85 38		sta $38				sta 	zTemp1
.8f8d		c8		iny				iny
.8f8e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f90		85 39		sta $39				sta 	zTemp1+1
.8f92		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f94		85 30		sta $30				sta 	codePtr
.8f96		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f98		85 31		sta $31				sta 	codePtr+1
.8f9a						_CLLPSearch:
.8f9a		b2 30		lda ($30)			lda 	(codePtr)
.8f9c		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8f9e		f0 e1		beq $8f81			beq 	_CLExit
.8fa0		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8fa2		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa4		c9 af		cmp #$af			cmp 	#KWD_PROC
.8fa6		d0 0e		bne $8fb6			bne 	_CLLPNext
.8fa8		c8		iny				iny 								; check if PROC this.
.8fa9		b1 30		lda ($30),y			lda 	(codePtr),y
.8fab		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8fad		d0 07		bne $8fb6			bne 	_CLLPNext
.8faf		c8		iny				iny
.8fb0		b1 30		lda ($30),y			lda 	(codePtr),y
.8fb2		c5 39		cmp $39				cmp 	zTemp1+1
.8fb4		f0 0d		beq $8fc3			beq 	_CLLPFound
.8fb6						_CLLPNext:
.8fb6		18		clc				clc
.8fb7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fb9		65 30		adc $30				adc 	codePtr
.8fbb		85 30		sta $30				sta 	codePtr
.8fbd		90 02		bcc $8fc1			bcc 	_CREExit
.8fbf		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fc1						_CREExit:
.8fc1		80 d7		bra $8f9a			bra 	_CLLPSearch
.8fc3						_CLLPFound:
.8fc3		b2 30		lda ($30)			lda 	(codePtr)
.8fc5		f0 ba		beq $8f81			beq 	_CLExit
.8fc7		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8fc9		b1 30		lda ($30),y			lda 	(codePtr),y
.8fcb		48		pha				pha
.8fcc		20 e2 8f	jsr $8fe2			jsr 	CLListOneLine 				; list line and go forward
.8fcf		18		clc				clc
.8fd0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fd2		65 30		adc $30				adc 	codePtr
.8fd4		85 30		sta $30				sta 	codePtr
.8fd6		90 02		bcc $8fda			bcc 	_CREExit
.8fd8		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fda						_CREExit:
.8fda		68		pla				pla 								; reached ENDPROC ?
.8fdb		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.8fdd		d0 e4		bne $8fc3			bne 	_CLLPFound
.8fdf		4c 31 86	jmp $8631			jmp 	WarmStart
.8fe2						CLListOneLine:
.8fe2		20 61 97	jsr $9761			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8fe5		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8fe8		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8fea		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8fec		20 15 98	jsr $9815			jsr 	PrintStringXA
.8fef		a9 0d		lda #$0d			lda 	#13 						; new line
.8ff1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8ff4		60		rts				rts
.8ff5						CLCompareLineNo:
.8ff5		38		sec				sec
.8ff6		a0 01		ldy #$01			ldy 	#1
.8ff8		b1 30		lda ($30),y			lda 	(codePtr),y
.8ffa		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8ffc		85 36		sta $36				sta 	zTemp0
.8ffe		c8		iny				iny
.8fff		b1 30		lda ($30),y			lda 	(codePtr),y
.9001		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9003		05 36		ora $36				ora 	zTemp0
.9005		60		rts				rts
.9006						CLIsDigit:
.9006		b1 30		lda ($30),y			lda 	(codePtr),y
.9008		c9 30		cmp #$30			cmp 	#"0"
.900a		90 03		bcc $900f			bcc	 	_CLIDExitFalse
.900c		c9 3a		cmp #$3a			cmp 	#"9"+1
.900e		60		rts				rts
.900f						_CLIDExitFalse:
.900f		38		sec				sec
.9010		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9011						Command_LOCAL:
.9011		a2 00		ldx #$00			ldx 	#0 							; at level 0
.9013		20 1f 90	jsr $901f			jsr 	LocaliseNextTerm 			; convert term to a local.
.9016		b1 30		lda ($30),y			lda 	(codePtr),y
.9018		c8		iny				iny
.9019		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.901b		f0 f4		beq $9011			beq 	Command_LOCAL 				; if so, localise another variable.
.901d		88		dey				dey 								; unpick pre-get
.901e		60		rts				rts
.901f						LocaliseNextTerm:
.901f		20 0a a1	jsr $a10a			jsr 	EvaluateTerm 				; evaluate the term
.9022		b5 50		lda $50,x			lda 	NSStatus,x
.9024		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.9026		f0 5c		beq $9084			beq		_LNTError
.9028		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.902a		85 36		sta $36				sta 	zTemp0
.902c		b5 60		lda $60,x			lda 	NSMantissa1,x
.902e		85 37		sta $37				sta  	zTemp0+1
.9030		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.9032		29 10		and #$10			and 	#NSBIsString
.9034		d0 1e		bne $9054			bne 	_LNTPushString
.9036		5a		phy				phy
.9037		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9039						_LNTPushNumLoop:
.9039		b1 36		lda ($36),y			lda		(zTemp0),y
.903b		20 42 b8	jsr $b842			jsr 	StackPushByte
.903e		c8		iny				iny
.903f		c0 05		cpy #$05			cpy 	#5
.9041		d0 f6		bne $9039			bne 	_LNTPushNumLoop
.9043		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.9045		20 42 b8	jsr $b842			jsr 	StackPushByte
.9048		a5 37		lda $37				lda 	zTemp0+1
.904a		20 42 b8	jsr $b842			jsr 	StackPushByte
.904d		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.904f		20 42 b8	jsr $b842			jsr 	StackPushByte
.9052		7a		ply				ply
.9053		60		rts				rts
.9054						_LNTPushString:
.9054		5a		phy				phy
.9055		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.9057		85 38		sta $38				sta 	zTemp1
.9059		a0 01		ldy #$01			ldy 	#1
.905b		b1 36		lda ($36),y			lda 	(zTemp0),y
.905d		85 39		sta $39				sta 	zTemp1+1
.905f		a0 00		ldy #$00			ldy 	#0 							; output string
.9061		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.9063		f0 0a		beq $906f			beq 	_LNTStringOut
.9065						_LNTPushStrLoop:
.9065		b1 38		lda ($38),y			lda 	(zTemp1),y
.9067		f0 06		beq $906f			beq 	_LNTStringOut
.9069		20 42 b8	jsr $b842			jsr 	StackPushByte
.906c		c8		iny				iny
.906d		80 f6		bra $9065			bra 	_LNTPushStrLoop
.906f						_LNTStringOut:
.906f		98		tya				tya									; output length (chars written).
.9070		20 42 b8	jsr $b842			jsr 	StackPushByte
.9073		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9075		20 42 b8	jsr $b842			jsr 	StackPushByte
.9078		b5 60		lda $60,x			lda 	NSMantissa1,x
.907a		20 42 b8	jsr $b842			jsr 	StackPushByte
.907d		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.907f		20 42 b8	jsr $b842			jsr 	StackPushByte
.9082		7a		ply				ply
.9083		60		rts				rts
.9084						_LNTError:
.9084		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.9087						LocalPopValue:
.9087		20 5a b8	jsr $b85a			jsr 	StackPopByte
.908a		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.908c		d0 17		bne $90a5			bne 	_LPVString
.908e		20 5a b8	jsr $b85a			jsr 	StackPopByte 				; address
.9091		85 37		sta $37				sta 	zTemp0+1
.9093		20 5a b8	jsr $b85a			jsr 	StackPopByte
.9096		85 36		sta $36				sta 	zTemp0
.9098		5a		phy				phy
.9099		a0 04		ldy #$04			ldy 	#4 							; copy back
.909b						_LPVNumberCopy:
.909b		20 5a b8	jsr $b85a			jsr 	StackPopByte
.909e		91 36		sta ($36),y			sta 	(zTemp0),y
.90a0		88		dey				dey
.90a1		10 f8		bpl $909b			bpl 	_LPVNumberCopy
.90a3		7a		ply				ply 								; and complete
.90a4		60		rts				rts
.90a5						_LPVString:
.90a5		20 5a b8	jsr $b85a			jsr 	StackPopByte 				; address of record copied to zTemp0
.90a8		85 37		sta $37				sta 	zTemp0+1
.90aa		20 5a b8	jsr $b85a			jsr 	StackPopByte
.90ad		85 36		sta $36				sta 	zTemp0
.90af		5a		phy				phy
.90b0		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.90b2		85 38		sta $38				sta 	zTemp1
.90b4		a0 01		ldy #$01			ldy 	#1
.90b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.90b8		85 39		sta $39				sta 	zTemp1+1
.90ba		20 5a b8	jsr $b85a			jsr 	StackPopByte 				; # chars to get => y
.90bd		a8		tay				tay
.90be		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.90c0		f0 0e		beq $90d0			beq 	_LPVStringCopied
.90c2		a9 00		lda #$00			lda 	#0 							; NULL on end
.90c4		91 38		sta ($38),y			sta 	(zTemp1),y
.90c6						_LPVStringCopy:
.90c6		88		dey				dey
.90c7		30 07		bmi $90d0			bmi 	_LPVStringCopied
.90c9		20 5a b8	jsr $b85a			jsr 	StackPopByte
.90cc		91 38		sta ($38),y			sta 	(zTemp1),y
.90ce		80 f6		bra $90c6			bra 	_LPVStringCopy
.90d0						_LPVStringCopied:
.90d0		fa		plx				plx
.90d1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.90d2						MCCommand:
.90d2		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.90d4		48		pha				pha
.90d5		64 01		stz $01				stz 	1
.90d7		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.90da		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.90dc		8d 94 07	sta $0794			sta 	DMAControlByte
.90df		20 8d 91	jsr $918d			jsr 	MCPosition 					; start position
.90e2		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.90e4		20 5e 91	jsr $915e			jsr 	MCCopyAddress
.90e7		a2 08		ldx #$08			ldx 	#8
.90e9		20 5e 91	jsr $915e			jsr 	MCCopyAddress
.90ec		b1 30		lda ($30),y			lda 	(codePtr),y
.90ee		c8		iny				iny
.90ef		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.90f1		f0 09		beq $90fc			beq 	_MCSize1D
.90f3		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.90f5		f0 11		beq $9108			beq 	_MCRect2D
.90f7						_MCSyntax:
.90f7		a9 02		lda #$02		lda	#2
.90f9		4c bc 97	jmp $97bc		jmp	ErrorHandler
.90fc						_MCSize1D:
.90fc		a2 00		ldx #$00			ldx 	#0 							; get size
.90fe		20 83 a6	jsr $a683			jsr 	EvaluateInteger
.9101		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.9103		20 5e 91	jsr $915e			jsr 	MCCopyAddress
.9106		80 24		bra $912c			bra 	_MCDestination
.9108						_MCRect2D:
.9108		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.910a		20 7b 91	jsr $917b			jsr 	MCEvalCopyData16
.910d		20 ab 97	jsr $97ab			jsr 	CheckComma
.9110		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.9112		20 7b 91	jsr $917b			jsr 	MCEvalCopyData16
.9115		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.9117		20 b3 97	jsr $97b3			jsr 	CheckNextA
.911a		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.911c		20 7b 91	jsr $917b			jsr 	MCEvalCopyData16
.911f		a2 12		ldx #$12			ldx 	#$12
.9121		20 82 91	jsr $9182			jsr 	MCCopyData16
.9124		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.9127		09 02		ora #$02			ora 	#$02
.9129		8d 94 07	sta $0794			sta 	DMAControlByte
.912c						_MCDestination:
.912c		b1 30		lda ($30),y			lda 	(codePtr),y
.912e		c8		iny				iny
.912f		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.9131		f0 0e		beq $9141			beq 	_MCDestPoke
.9133		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.9135		d0 c0		bne $90f7			bne 	_MCSyntax
.9137		20 8d 91	jsr $918d			jsr 	MCPosition 					; get target address
.913a		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.913c		20 5e 91	jsr $915e			jsr 	MCCopyAddress
.913f		80 0e		bra $914f			bra 	_MCDoDMA 					; and we can go.
.9141						_MCDestPoke:
.9141		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; POKE what
.9144		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.9147		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.914a		09 04		ora #$04			ora 	#$04
.914c		8d 94 07	sta $0794			sta 	DMAControlByte
.914f						_MCDoDMA:
.914f		ad 94 07	lda $0794			lda 	DMAControlByte 				; set the DMA Control byte to go !
.9152		8d 00 df	sta $df00			sta 	$DF00
.9155						_MCWaitBUSD:
.9155		ad 01 df	lda $df01			lda 	$DF01
.9158		30 fb		bmi $9155			bmi 	_MCWaitBUSD
.915a		68		pla				pla 								; restore I/O.
.915b		85 01		sta $01				sta 	1
.915d		60		rts				rts
.915e						MCCopyAddress:
.915e		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.9160		29 fc		and #$fc			and 	#$FC
.9162		05 70		ora $70				ora 	NSMantissa3
.9164		d0 10		bne $9176			bne 	_MCRange
.9166		a5 58		lda $58				lda 	NSMantissa0
.9168		9d 00 df	sta $df00,x			sta 	$DF00,x
.916b		a5 60		lda $60				lda 	NSMantissa1
.916d		9d 01 df	sta $df01,x			sta 	$DF01,x
.9170		a5 68		lda $68				lda 	NSMantissa2
.9172		9d 02 df	sta $df02,x			sta 	$DF02,x
.9175		60		rts				rts
.9176						_MCRange:
.9176		a9 04		lda #$04		lda	#4
.9178		4c bc 97	jmp $97bc		jmp	ErrorHandler
.917b						MCEvalCopyData16:
.917b		da		phx				phx
.917c		a2 00		ldx #$00			ldx 	#0
.917e		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.9181		fa		plx				plx
.9182						MCCopyData16:
.9182		a5 58		lda $58				lda 	NSMantissa0
.9184		9d 00 df	sta $df00,x			sta 	$DF00,x
.9187		a5 60		lda $60				lda 	NSMantissa1
.9189		9d 01 df	sta $df01,x			sta 	$DF01,x
.918c		60		rts				rts
.918d						MCPosition:
.918d		a2 00		ldx #$00			ldx 	#0 							; get start address.
.918f		b1 30		lda ($30),y			lda 	(codePtr),y
.9191		c9 b8		cmp #$b8			cmp 	#KWD_AT
.9193		f0 04		beq $9199			beq 	_MCPAt
.9195		20 83 a6	jsr $a683			jsr 	EvaluateInteger
.9198		60		rts				rts
.9199						_MCPAt:
.9199		c8		iny				iny
.919a		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; X position
.919d		48		pha				pha
.919e		20 ab 97	jsr $97ab			jsr 	CheckComma
.91a1		e8		inx				inx
.91a2		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; Y position
.91a5		ca		dex				dex
.91a6		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.91a8		64 58		stz $58				stz 	NSMantissa0
.91aa		64 68		stz $68				stz 	NSMantissa2
.91ac		64 70		stz $70				stz 	NSMantissa3
.91ae		46 60		lsr $60				lsr 	NSMantissa1
.91b0		66 58		ror $58				ror 	NSMantissa0
.91b2		46 60		lsr $60				lsr 	NSMantissa1
.91b4		66 58		ror $58				ror 	NSMantissa0
.91b6		68		pla				pla
.91b7		18		clc				clc
.91b8		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.91ba		85 58		sta $58				sta 	NSMantissa0
.91bc		a5 60		lda $60				lda 	NSMantissa1
.91be		65 59		adc $59				adc 	NSMantissa0+1
.91c0		85 60		sta $60				sta 	NSMantissa1
.91c2		90 02		bcc $91c6			bcc 	_MCPNoCarry
.91c4		e6 68		inc $68				inc 	NSMantissa2
.91c6						_MCPNoCarry:
.91c6		ad bd 07	lda $07bd			lda 	gxBasePage
.91c9		85 69		sta $69				sta 	NSMantissa2+1
.91cb		64 59		stz $59				stz 	NSMantissa0+1
.91cd		64 61		stz $61				stz 	NSMantissa1+1
.91cf		64 71		stz $71				stz 	NSMantissa3+1
.91d1		a2 01		ldx #$01			ldx 	#1
.91d3		20 2f a7	jsr $a72f			jsr 	NSMShiftRight
.91d6		20 2f a7	jsr $a72f			jsr 	NSMShiftRight
.91d9		20 2f a7	jsr $a72f			jsr 	NSMShiftRight
.91dc		a2 00		ldx #$00			ldx 	#0
.91de		20 b6 9a	jsr $9ab6			jsr 	AddTopTwoStack
.91e1		60		rts				rts
.0794						DMAControlByte:
>0794								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.91e2						NewCommand:
.91e2		20 e8 91	jsr $91e8			jsr 	NewProgram 					; does the actual NEW.
.91e5		4c 31 86	jmp $8631			jmp 	WarmStart 					; and warm starts straight away.
.91e8						NewProgram:
.91e8		20 63 b4	jsr $b463			jsr 	MemoryNew
.91eb		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.91ee		20 ca 86	jsr $86ca			jsr 	ClearCommand 				; clear everything.
.91f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.91f2						PokeBCommand:
.91f2		a9 01		lda #$01			lda 	#1
.91f4		80 0c		bra $9202			bra 	PokeCommand
.91f6						PokeWCommand:
.91f6		a9 02		lda #$02			lda 	#2
.91f8		80 08		bra $9202			bra 	PokeCommand
.91fa						PokeLCommand:
.91fa		a9 03		lda #$03			lda 	#3
.91fc		80 04		bra $9202			bra 	PokeCommand
.91fe						PokeDCommand:
.91fe		a9 04		lda #$04			lda 	#4
.9200		80 00		bra $9202			bra 	PokeCommand
.9202						PokeCommand:
.9202		48		pha				pha 								; save count on stack
.9203		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.9205		20 96 a6	jsr $a696			jsr		Evaluate16BitInteger 		; address
.9208		20 ab 97	jsr $97ab			jsr 	CheckComma
.920b		e8		inx				inx
.920c		20 83 a6	jsr $a683			jsr		EvaluateInteger 			; data
.920f		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.9211		85 36		sta $36				sta 	zTemp0
.9213		a5 60		lda $60				lda 	NSMantissa1
.9215		85 37		sta $37				sta 	zTemp0+1
.9217		68		pla				pla 								; count -> zTemp1
.9218		85 38		sta $38				sta 	zTemp1
.921a		5a		phy				phy 								; save Y position.
.921b		a0 00		ldy #$00			ldy 	#0 							; index to write
.921d		a2 00		ldx #$00			ldx 	#0 							; index to read
.921f						_PCLoop:
.921f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.9221		91 36		sta ($36),y			sta 	(zTemp0),y
.9223		c8		iny				iny 								; next byte to write
.9224		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9225		18		clc				clc
.9226		69 08		adc #$08			adc 	#MathStackSize
.9228		aa		tax				tax
.9229		c6 38		dec $38				dec 	zTemp1 						; done them all
.922b		d0 f2		bne $921f			bne 	_PCLoop
.922d		7a		ply				ply 								; restore position.
.922e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.922f						CallProcedure:
.922f		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9231		b1 30		lda ($30),y			lda 	(codePtr),y
.9233		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9235		f0 0c		beq $9243			beq 	_CPEndParam
.9237						_CPParamLoop:
.9237		20 5b a6	jsr $a65b			jsr 	EvaluateValue 				; get parameter onto stack
.923a		e8		inx				inx 								; bump next stack
.923b		b1 30		lda ($30),y			lda 	(codePtr),y
.923d		c8		iny				iny
.923e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9240		f0 f5		beq $9237			beq 	_CPParamLoop
.9242		88		dey				dey 								; unpick.
.9243						_CPEndParam:
.9243		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.9246		c8		iny				iny									; skip right bracket
.9247		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9249		20 63 b8	jsr $b863			jsr 	StackOpen
.924c		20 a8 b8	jsr $b8a8			jsr 	STKSaveCodePosition 		; save loop position
.924f		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9251		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9253		a5 60		lda $60				lda 	NSMantissa1
.9255		85 37		sta $37				sta 	zTemp0+1
.9257		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9259		b2 36		lda ($36)			lda 	(zTemp0)
.925b		85 30		sta $30				sta 	safePtr
.925d		b1 36		lda ($36),y			lda 	(zTemp0),y
.925f		85 31		sta $31				sta 	safePtr+1
.9261		c8		iny				iny
.9262		b1 36		lda ($36),y			lda 	(zTemp0),y
.9264		85 32		sta $32				sta 	safePtr+2
.9266		c8		iny				iny
.9267		b1 36		lda ($36),y			lda 	(zTemp0),y
.9269		85 33		sta $33				sta 	safePtr+3
.926b		c8		iny				iny 								; get Y offset -> Y
.926c		b1 36		lda ($36),y			lda 	(zTemp0),y
.926e		a8		tay				tay
.926f		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9271		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9274		f0 13		beq $9289			beq 	_ParamExit 					; if so, exit.
.9276						_ParamExtract:
.9276		ca		dex				dex 								; put a local term on the level before
.9277		20 1f 90	jsr $901f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.927a		20 f0 8e	jsr $8ef0			jsr 	AssignVariable 				; assign stacked value to the variable.
.927d		e8		inx				inx 								; advance to next parameter to do.
.927e		e8		inx				inx
.927f		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9282		f0 05		beq $9289			beq 	_ParamExit
.9284		20 ab 97	jsr $97ab			jsr 	CheckComma 					; comma seperating parameters
.9287		80 ed		bra $9276			bra 	_ParamExtract
.9289						_ParamExit:
.9289		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; check )
.928c		60		rts				rts 								; and continue from here
.928d						Command_ENDPROC:
.928d		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.928f		a2 14		ldx #$14			ldx 	#ERRID_PROC
.9291		20 90 b8	jsr $b890			jsr 	StackCheckFrame
.9294		20 b9 b8	jsr $b8b9			jsr 	STKLoadCodePosition 		; restore code position
.9297		20 82 b8	jsr $b882			jsr 	StackClose
.929a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.929b						Command_Read:
.929b		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.929d		20 0a a1	jsr $a10a			jsr 	EvaluateTerm
.92a0		b5 50		lda $50,x			lda 	NSStatus,x
.92a2		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.92a4		f0 4f		beq $92f5			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.92a6		20 3e 93	jsr $933e			jsr 	SwapDataCodePtrs 			; swap code and data
.92a9		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.92ac		d0 25		bne $92d3			bne 	_CRContinueData  			; forward for the next one.
.92ae		b2 30		lda ($30)			lda 	(codePtr)
.92b0		f0 1c		beq $92ce			beq 	_CRNoData
.92b2						_CRKeepSearching:
.92b2		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.92b4		a2 80		ldx #$80			ldx 	#KWC_EOL
.92b6		20 fe 96	jsr $96fe			jsr 	ScanForward
.92b9		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.92bb		f0 16		beq $92d3			beq 	_CRHaveData 				; found it
.92bd		18		clc				clc
.92be		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92c0		65 30		adc $30				adc 	codePtr
.92c2		85 30		sta $30				sta 	codePtr
.92c4		90 02		bcc $92c8			bcc 	_CREExit
.92c6		e6 31		inc $31				inc 	codePtr+1 					; carry
.92c8						_CREExit:
.92c8		a0 03		ldy #$03			ldy 	#3 							; start of line.
.92ca		b2 30		lda ($30)			lda 	(codePtr)
.92cc		d0 e4		bne $92b2			bne 	_CRKeepSearching
.92ce						_CRNoData:
.92ce		a9 0b		lda #$0b		lda	#11
.92d0		4c bc 97	jmp $97bc		jmp	ErrorHandler
.92d3						_CRHaveData:
.92d3						_CRContinueData:
.92d3		a2 01		ldx #$01			ldx 	#1
.92d5		20 5b a6	jsr $a65b			jsr 	EvaluateValue 				; evaluate value into slot # 1
.92d8		ca		dex				dex
.92d9		20 f0 8e	jsr $8ef0			jsr		AssignVariable 				; do the assignment
.92dc		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.92df		b1 30		lda ($30),y			lda 	(codePtr),y
.92e1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.92e3		d0 04		bne $92e9			bne 	_CRSwapBack
.92e5		c8		iny				iny 								; consume comma
.92e6		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.92e9						_CRSwapBack:
.92e9		20 3e 93	jsr $933e			jsr 	SwapDataCodePtrs			; swap them back.
.92ec		b1 30		lda ($30),y			lda 	(codePtr),y
.92ee		c8		iny				iny
.92ef		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92f1		f0 a8		beq $929b			beq 	Command_Read 				; if so go round again.
.92f3		88		dey				dey 								; unpick get.
.92f4		60		rts				rts
.92f5						_CRSyntax:
.92f5		4c e9 b1	jmp $b1e9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.92f8						RemCommand:
.92f8		b1 30		lda ($30),y			lda 	(codePtr),y
.92fa		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.92fc		d0 06		bne $9304			bne 	_RMExit
.92fe		c8		iny				iny 								; point to offset
.92ff		98		tya				tya 								; A = offset position
.9300		38		sec				sec 								; add size +1 hence SEC
.9301		71 30		adc ($30),y			adc 	(codePtr),y
.9303		a8		tay				tay 								; make current position.
.9304						_RMExit:
.9304		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9305						Command_REPEAT:
.9305		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9307		20 63 b8	jsr $b863			jsr 	StackOpen
.930a		20 a8 b8	jsr $b8a8			jsr 	STKSaveCodePosition 		; save loop position
.930d		60		rts				rts
.930e						Command_UNTIL:
.930e		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9310		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9312		20 90 b8	jsr $b890			jsr 	StackCheckFrame
.9315		a2 00		ldx #$00			ldx 	#0
.9317		20 64 a6	jsr $a664			jsr 	EvaluateNumber 				; work out the number
.931a		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; check if zero
.931d		f0 04		beq $9323			beq 	_CULoopBack 				; if so keep looping
.931f		20 82 b8	jsr $b882			jsr 	StackClose		 			; return
.9322		60		rts				rts
.9323						_CULoopBack:
.9323		20 b9 b8	jsr $b8b9			jsr 	STKLoadCodePosition 		; loop back
.9326		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9327						Command_Restore:
.9327		20 3e 93	jsr $933e			jsr 	SwapDataCodePtrs 			; swap code and data
.932a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.932c		85 30		sta $30				sta 	codePtr
.932e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9330		85 31		sta $31				sta 	codePtr+1
.9332		20 3e 93	jsr $933e			jsr 	SwapDataCodePtrs 			; put them back
.9335		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9337		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.933a		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.933d		60		rts				rts
.933e						SwapDataCodePtrs:
.933e		da		phx				phx
.933f		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9341						_SDCPLoop:
.9341		b5 30		lda $30,x			lda 	safePtr,x
.9343		48		pha				pha
.9344		bd 13 04	lda $0413,x			lda 	dataPointer,x
.9347		95 30		sta $30,x			sta 	safePtr,x
.9349		68		pla				pla
.934a		9d 13 04	sta $0413,x			sta 	dataPointer,x
.934d		ca		dex				dex
.934e		10 f1		bpl $9341			bpl 	_SDCPLoop
.9350		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9353		8c 17 04	sty $0417			sty 	dataPointer+4
.9356		a8		tay				tay
.9357		fa		plx				plx
.9358		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9359						EOLCommand:
.9359		18		clc				clc
.935a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.935c		65 30		adc $30				adc 	codePtr
.935e		85 30		sta $30				sta 	codePtr
.9360		90 02		bcc $9364			bcc 	_CREExit
.9362		e6 31		inc $31				inc 	codePtr+1 					; carry
.9364						_CREExit:
.9364		80 18		bra $937e			bra 	RunNewLine
.9366						CommandRUNOptLoad:
.9366		b1 30		lda ($30),y			lda 	(codePtr),y
.9368		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.936a		f0 07		beq $9373			beq 	RunCurrentProgram
.936c		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.936e		f0 03		beq $9373			beq 	RunCurrentProgram
.9370		20 6d 8a	jsr $8a6d			jsr 	LoadFile 					; load expected name file.
.9373						RunCurrentProgram:
.9373		20 ca 86	jsr $86ca			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9376		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9378		85 30		sta $30				sta 	codePtr
.937a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.937c		85 31		sta $31				sta 	codePtr+1
.937e						RunNewLine:
.937e		b2 30		lda ($30)			lda 	(codePtr)
.9380		f0 74		beq $93f6			beq 	CRNoProgram         		; no then END.
.9382		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9384		9a		txs				txs
.9385						RUNCodePointerLine:
.9385		a0 02		ldy #$02			ldy 	#2 							; start of program
.9387						_CRIncMainLoop:
.9387		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.9389		f0 03		beq $938e			beq 	_NoEvents					; if zero, skip with Z flag set.
.938b		20 37 81	jsr $8137			jsr 	ProcessEvents
.938e						_NoEvents:
.938e		d0 61		bne $93f1			bne 	_CRBreak
.9390		a5 01		lda $01				lda 	1 							; save I/O 0
.9392		48		pha				pha
.9393		64 01		stz $01				stz 	1 							; access I/O Page 0
.9395		38		sec				sec 								; calculate timer - LastTick
.9396		ad 59 d6	lda $d659			lda 	$D659
.9399		cd 5e 06	cmp $065e			cmp 	LastTick
.939c		f0 06		beq $93a4			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.939e		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.93a1		20 99 81	jsr $8199			jsr 	TickHandler 							; go do the code.
.93a4						_NoFireTick:
.93a4		68		pla				pla 								; restore I/O 0
.93a5		85 01		sta $01				sta 	1
.93a7						_CRNoBreakCheck:
.93a7		c8		iny				iny									; next token
.93a8						_CRMainLoop:
.93a8		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.93ab		b1 30		lda ($30),y			lda 	(codePtr),y
.93ad		10 10		bpl $93bf			bpl 	_CRNotKeyword				; not a token.
.93af		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.93b1		b0 04		bcs $93b7			bcs 	_CRIsKeyword
.93b3		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.93b5		b0 34		bcs $93eb			bcs		_CRSyntaxError
.93b7						_CRIsKeyword:
.93b7		c8		iny				iny 								; consume command
.93b8		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.93b9		aa		tax				tax 								; put in X for vector jump
.93ba		20 ee 93	jsr $93ee			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.93bd		80 e9		bra $93a8			bra 	_CRMainLoop 				; and loop round
.93bf						_CRNotKeyword:
.93bf		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.93c1		f0 c4		beq $9387			beq 	_CRIncMainLoop
.93c3		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.93c5		90 05		bcc $93cc			bcc 	_CRNotVariable
.93c7						_CRGoLet:
.93c7		20 b7 8e	jsr $8eb7			jsr 	LetCommand
.93ca		80 dc		bra $93a8			bra 	_CRMainLoop
.93cc						_CRNotVariable:
.93cc		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.93ce		f0 f7		beq $93c7			beq 	_CRGoLet
.93d0		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.93d2		f0 f3		beq $93c7			beq 	_CRGoLet
.93d4		c9 21		cmp #$21			cmp 	#KWD_PLING
.93d6		f0 ef		beq $93c7			beq 	_CRGoLet
.93d8		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.93da		f0 09		beq $93e5			beq 	_CRGoRem
.93dc		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.93de		d0 0b		bne $93eb			bne 	_CRSyntaxError
.93e0		20 a3 84	jsr $84a3			jsr 	LabelHere
.93e3		80 c3		bra $93a8			bra 	_CRMainLoop
.93e5						_CRGoRem:
.93e5		c8		iny				iny
.93e6		20 f8 92	jsr $92f8			jsr 	RemCommand
.93e9		80 bd		bra $93a8			bra 	_CRMainLoop
.93eb						_CRSyntaxError:
.93eb		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.93ee						_CRCallVector0:
.93ee		7c 8c 94	jmp ($948c,x)			jmp 	(VectorSet0,x)
.93f1						_CRBreak:
.93f1		a9 01		lda #$01		lda	#1
.93f3		4c bc 97	jmp $97bc		jmp	ErrorHandler
.93f6						CRNoProgram:
.93f6		4c 0e 88	jmp $880e			jmp 	EndCommand
.93f9						Shift1Command:
.93f9		b1 30		lda ($30),y			lda 	(codePtr),y
.93fb		c8		iny				iny
.93fc		0a		asl a				asl 	a
.93fd		aa		tax				tax
.93fe		7c 44 95	jmp ($9544,x)			jmp 	(VectorSet1,x)
.9401						Shift2Command:
.9401		b1 30		lda ($30),y			lda 	(codePtr),y
.9403		c8		iny				iny
.9404		0a		asl a				asl 	a
.9405		aa		tax				tax
.9406		7c 92 95	jmp ($9592,x)			jmp 	(VectorSet2,x)
.9409						Unused1:
.9409						Unused2:
.9409						Unused3:
.9409						Unused4:
.9409		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
>940c								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.940c						VectorSetPunc:
>940c		74 9a					.word	ShiftLeft                        ; $00 <<
>940e		5f 98					.word	BinaryCompareLessEqual           ; $01 <=
>9410		55 98					.word	BinaryCompareNotEqual            ; $02 <>
>9412		e9 b1					.word	SyntaxError                      ; $03 !!3
>9414		e9 b1					.word	SyntaxError                      ; $04 ><
>9416		69 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>9418		77 9a					.word	ShiftRight                       ; $06 >>
>941a		e9 b1					.word	SyntaxError                      ; $07 !!7
>941c		e9 b1					.word	SyntaxError                      ; $08 !!8
>941e		e9 b1					.word	SyntaxError                      ; $09 !!9
>9420		e9 b1					.word	SyntaxError                      ; $0a !!10
>9422		e9 b1					.word	SyntaxError                      ; $0b !!11
>9424		e9 b1					.word	SyntaxError                      ; $0c !!12
>9426		e9 b1					.word	SyntaxError                      ; $0d !!13
>9428		e9 b1					.word	SyntaxError                      ; $0e !!14
>942a		e9 b1					.word	SyntaxError                      ; $0f !!15
>942c		e9 b1					.word	SyntaxError                      ; $10 @
>942e		e9 b1					.word	SyntaxError                      ; $11 !!17
>9430		e9 b1					.word	SyntaxError                      ; $12 !!18
>9432		e9 b1					.word	SyntaxError                      ; $13 [
>9434		20 99					.word	IntegerDivide                    ; $14 \
>9436		e9 b1					.word	SyntaxError                      ; $15 ]
>9438		b2 9b					.word	EorInteger                       ; $16 ^
>943a		e9 b1					.word	SyntaxError                      ; $17 _
>943c		e9 b1					.word	SyntaxError                      ; $18 `
>943e		e9 b1					.word	SyntaxError                      ; $19 !!25
>9440		e9 b1					.word	SyntaxError                      ; $1a !!26
>9442		e9 b1					.word	SyntaxError                      ; $1b {
>9444		7d 9b					.word	OraInteger                       ; $1c |
>9446		e9 b1					.word	SyntaxError                      ; $1d }
>9448		e9 b1					.word	SyntaxError                      ; $1e ~
>944a		e9 b1					.word	SyntaxError                      ; $1f <7F>
>944c		e9 b1					.word	SyntaxError                      ; $20
>944e		e7 9b					.word	WordIndirect                     ; $21 !
>9450		e9 b1					.word	SyntaxError                      ; $22 "
>9452		e9 b1					.word	SyntaxError                      ; $23 #
>9454		e9 b1					.word	SyntaxError                      ; $24 $
>9456		61 99					.word	IntegerModulus                   ; $25 %
>9458		48 9b					.word	AndInteger                       ; $26 &
>945a		e9 b1					.word	SyntaxError                      ; $27 '
>945c		e9 b1					.word	SyntaxError                      ; $28 (
>945e		e9 b1					.word	SyntaxError                      ; $29 )
>9460		cf 99					.word	MulInteger                       ; $2a *
>9462		ea 9a					.word	AddInteger                       ; $2b +
>9464		e9 b1					.word	SyntaxError                      ; $2c ,
>9466		23 9b					.word	SubInteger                       ; $2d -
>9468		e9 b1					.word	SyntaxError                      ; $2e .
>946a		a1 9d					.word	FDivideCommand                   ; $2f /
>946c		e9 b1					.word	SyntaxError                      ; $30 0
>946e		e9 b1					.word	SyntaxError                      ; $31 1
>9470		e9 b1					.word	SyntaxError                      ; $32 2
>9472		e9 b1					.word	SyntaxError                      ; $33 3
>9474		e9 b1					.word	SyntaxError                      ; $34 4
>9476		e9 b1					.word	SyntaxError                      ; $35 5
>9478		e9 b1					.word	SyntaxError                      ; $36 6
>947a		e9 b1					.word	SyntaxError                      ; $37 7
>947c		e9 b1					.word	SyntaxError                      ; $38 8
>947e		e9 b1					.word	SyntaxError                      ; $39 9
>9480		e9 b1					.word	SyntaxError                      ; $3a :
>9482		e9 b1					.word	SyntaxError                      ; $3b ;
>9484		41 98					.word	BinaryCompareLess                ; $3c <
>9486		37 98					.word	BinaryCompareEqual               ; $3d =
>9488		4b 98					.word	BinaryCompareGreater             ; $3e >
>948a		09 9c					.word	ByteIndirect                     ; $3f ?
.948c						VectorSet0:
>948c		59 93					.word	EOLCommand                       ; $80 !0:EOF
>948e		f9 93					.word	Shift1Command                    ; $81 !1:SH1
>9490		01 94					.word	Shift2Command                    ; $82 !2:SH2
>9492		8b a2					.word	AbsUnary                         ; $83 ABS(
>9494		99 a2					.word	AllocUnary                       ; $84 ALLOC(
>9496		09 a3					.word	AscUnary                         ; $85 ASC(
>9498		5a a4					.word	ChrUnary                         ; $86 CHR$(
>949a		11 88					.word	UnaryEvent                       ; $87 EVENT(
>949c		33 98					.word	UnaryFalse                       ; $88 FALSE
>949e		16 a3					.word	FracUnary                        ; $89 FRAC(
>94a0		ed af					.word	ChrGet                           ; $8a GET$(
>94a2		c9 af					.word	AscGet                           ; $8b GET(
>94a4		73 af					.word	UnaryGetDate                     ; $8c GETDATE$(
>94a6		6f af					.word	UnaryGetTime                     ; $8d GETTIME$(
>94a8		04 b7					.word	UnaryHit                         ; $8e HIT(
>94aa		f4 af					.word	ChrInkey                         ; $8f INKEY$(
>94ac		e2 af					.word	AscInkey                         ; $90 INKEY(
>94ae		2b a3					.word	IntUnary                         ; $91 INT(
>94b0		19 a4					.word	IsValUnary                       ; $92 ISVAL(
>94b2		6c a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>94b4		90 a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>94b6		a5 8e					.word	UnaryJoyB                        ; $95 JOYB(
>94b8		7e 8e					.word	UnaryJoyX                        ; $96 JOYX(
>94ba		81 8e					.word	UnaryJoyY                        ; $97 JOYY(
>94bc		0d b0					.word	KeyDown                          ; $98 KEYDOWN(
>94be		cf a5					.word	Unary_Left                       ; $99 LEFT$(
>94c0		3c a3					.word	LenUnary                         ; $9a LEN(
>94c2		5a a3					.word	Unary_Max                        ; $9b MAX(
>94c4		f1 a5					.word	Unary_Mid                        ; $9c MID$(
>94c6		56 a3					.word	Unary_Min                        ; $9d MIN(
>94c8		a5 a3					.word	Unary_Not                        ; $9e NOT(
>94ca		b8 a3					.word	PeekByteUnary                    ; $9f PEEK(
>94cc		c4 a3					.word	PeekDUnary                       ; $a0 PEEKD(
>94ce		c0 a3					.word	PeekLUnary                       ; $a1 PEEKL(
>94d0		bc a3					.word	PeekWUnary                       ; $a2 PEEKW(
>94d2		c0 b7					.word	UnaryPlaying                     ; $a3 PLAYING(
>94d4		27 b0					.word	Unary_Random                     ; $a4 RANDOM(
>94d6		dc a5					.word	Unary_Right                      ; $a5 RIGHT$(
>94d8		41 b0					.word	Unary_Rnd                        ; $a6 RND(
>94da		f1 a3					.word	SgnUnary                         ; $a7 SGN(
>94dc		0e a5					.word	SpcUnary                         ; $a8 SPC(
>94de		29 a5					.word	Unary_Str                        ; $a9 STR$(
>94e0		93 96					.word	UnaryTimer                       ; $aa TIMER(
>94e2		28 98					.word	UnaryTrue                        ; $ab TRUE
>94e4		0f a4					.word	ValUnary                         ; $ac VAL(
>94e6		17 8c					.word	ForCommand                       ; $ad FOR
>94e8		5a 8d					.word	IfCommand                        ; $ae IF
>94ea		09 94					.word	Unused1                          ; $af PROC
>94ec		05 93					.word	Command_REPEAT                   ; $b0 REPEAT
>94ee		74 97					.word	Command_WHILE                    ; $b1 WHILE
>94f0		83 8d					.word	EndIf                            ; $b2 ENDIF
>94f2		8d 92					.word	Command_ENDPROC                  ; $b3 ENDPROC
>94f4		c9 8c					.word	NextCommand                      ; $b4 NEXT
>94f6		09 94					.word	Unused4                          ; $b5 THEN
>94f8		0e 93					.word	Command_UNTIL                    ; $b6 UNTIL
>94fa		95 97					.word	Command_WEND                     ; $b7 WEND
>94fc		e9 b1					.word	SyntaxError                      ; $b8 AT
>94fe		e9 b1					.word	SyntaxError                      ; $b9 BY
>9500		95 86					.word	CallCommand                      ; $ba CALL
>9502		b8 b4					.word	CircleCommand                    ; $bb CIRCLE
>9504		ca 86					.word	ClearCommand                     ; $bc CLEAR
>9506		e9 b1					.word	SyntaxError                      ; $bd COLOR
>9508		e9 b1					.word	SyntaxError                      ; $be COLOUR
>950a		37 87					.word	Command_Data                     ; $bf DATA
>950c		3f 87					.word	DimCommand                       ; $c0 DIM
>950e		09 94					.word	Unused3                          ; $c1 DOWNTO
>9510		7c 8d					.word	ElseCode                         ; $c2 ELSE
>9512		e9 b1					.word	SyntaxError                      ; $c3 FROM
>9514		d7 b6					.word	GfxCommand                       ; $c4 GFX
>9516		e9 b1					.word	SyntaxError                      ; $c5 HERE
>9518		e1 b4					.word	ImageCommand                     ; $c6 IMAGE
>951a		b7 8e					.word	LetCommand                       ; $c7 LET
>951c		33 b5					.word	LineCommand                      ; $c8 LINE
>951e		11 90					.word	Command_LOCAL                    ; $c9 LOCAL
>9520		d2 90					.word	MCCommand                        ; $ca MEMCOPY
>9522		e9 b1					.word	SyntaxError                      ; $cb OFF
>9524		e9 b1					.word	SyntaxError                      ; $cc ON
>9526		e9 b1					.word	SyntaxError                      ; $cd OUTLINE
>9528		28 b7					.word	PaletteCommand                   ; $ce PALETTE
>952a		2c b5					.word	PlotCommand                      ; $cf PLOT
>952c		f2 91					.word	PokeBCommand                     ; $d0 POKE
>952e		fe 91					.word	PokeDCommand                     ; $d1 POKED
>9530		fa 91					.word	PokeLCommand                     ; $d2 POKEL
>9532		f6 91					.word	PokeWCommand                     ; $d3 POKEW
>9534		9b 92					.word	Command_Read                     ; $d4 READ
>9536		b4 b4					.word	RectangleCommand                 ; $d5 RECT
>9538		f8 92					.word	RemCommand                       ; $d6 REM
>953a		e9 b1					.word	SyntaxError                      ; $d7 SOLID
>953c		dc b7					.word	SoundCommand                     ; $d8 SOUND
>953e		c3 b4					.word	SpriteCommand                    ; $d9 SPRITE
>9540		fd b4					.word	TextCommand                      ; $da TEXT
>9542		09 94					.word	Unused2                          ; $db TO
.9544						VectorSet1:
>9544		e9 b1					.word	SyntaxError                      ; $80 !0:EOF
>9546		e9 b1					.word	SyntaxError                      ; $81 !1:SH1
>9548		e9 b1					.word	SyntaxError                      ; $82 !2:SH2
>954a		69 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>954c		85 86					.word	AssertCommand                    ; $84 ASSERT
>954e		77 b6					.word	BitmapCtrl                       ; $85 BITMAP
>9550		6e 88					.word	Command_BLoad                    ; $86 BLOAD
>9552		0e 89					.word	Command_BSave                    ; $87 BSAVE
>9554		68 b7					.word	ClearScreen                      ; $88 CLS
>9556		89 8d					.word	Command_CPrint                   ; $89 CPRINT
>9558		90 89					.word	Command_Dir                      ; $8a DIR
>955a		fc 87					.word	BootDOS                          ; $8b DOS
>955c		60 8a					.word	Command_Drive                    ; $8c DRIVE
>955e		0e 88					.word	EndCommand                       ; $8d END
>9560		94 b7					.word	Explode                          ; $8e EXPLODE
>9562		e9 b1					.word	SyntaxError                      ; $8f GO
>9564		22 8d					.word	Command_GOSUB                    ; $90 GOSUB
>9566		40 8d					.word	GotoCommand                      ; $91 GOTO
>9568		e9 b1					.word	SyntaxError                      ; $92 HIMEM
>956a		84 8d					.word	Command_Input                    ; $93 INPUT
>956c		07 8f					.word	Command_List                     ; $94 LIST
>956e		67 8a					.word	Command_Load                     ; $95 LOAD
>9570		e9 b1					.word	SyntaxError                      ; $96 MOUSE
>9572		e2 91					.word	NewCommand                       ; $97 NEW
>9574		70 b7					.word	PingCommand                      ; $98 PING
>9576		90 8d					.word	Command_Print                    ; $99 PRINT
>9578		27 93					.word	Command_Restore                  ; $9a RESTORE
>957a		32 8d					.word	Command_RETURN                   ; $9b RETURN
>957c		66 93					.word	CommandRUNOptLoad                ; $9c RUN
>957e		39 8b					.word	Command_Save                     ; $9d SAVE
>9580		1a 96					.word	CommandSetDate                   ; $9e SETDATE
>9582		1e 96					.word	CommandSetTime                   ; $9f SETTIME
>9584		88 b7					.word	ShootCommand                     ; $a0 SHOOT
>9586		bc b6					.word	SpritesCtrl                      ; $a1 SPRITES
>9588		8e 96					.word	StopCommand                      ; $a2 STOP
>958a		bd 8b					.word	Command_VERIFY                   ; $a3 VERIFY
>958c		2e 87					.word	XGoCommand                       ; $a4 XGO
>958e		25 87					.word	XLoadCommand                     ; $a5 XLOAD
>9590		7c b7					.word	ZapCommand                       ; $a6 ZAP
.9592						VectorSet2:
>9592		e9 b1					.word	SyntaxError                      ; $80 !0:EOF
>9594		e9 b1					.word	SyntaxError                      ; $81 !1:SH1
>9596		e9 b1					.word	SyntaxError                      ; $82 !2:SH2
>9598		a8 b0					.word	Assemble_adc                     ; $83 ADC
>959a		a0 b0					.word	Assemble_and                     ; $84 AND
>959c		bc b0					.word	Assemble_asl                     ; $85 ASL
>959e		26 b1					.word	Assemble_bcc                     ; $86 BCC
>95a0		2a b1					.word	Assemble_bcs                     ; $87 BCS
>95a2		32 b1					.word	Assemble_beq                     ; $88 BEQ
>95a4		e9 b0					.word	Assemble_bit                     ; $89 BIT
>95a6		1a b1					.word	Assemble_bmi                     ; $8a BMI
>95a8		2e b1					.word	Assemble_bne                     ; $8b BNE
>95aa		16 b1					.word	Assemble_bpl                     ; $8c BPL
>95ac		36 b1					.word	Assemble_bra                     ; $8d BRA
>95ae		3a b1					.word	Assemble_brk                     ; $8e BRK
>95b0		1e b1					.word	Assemble_bvc                     ; $8f BVC
>95b2		22 b1					.word	Assemble_bvs                     ; $90 BVS
>95b4		42 b1					.word	Assemble_clc                     ; $91 CLC
>95b6		96 b1					.word	Assemble_cld                     ; $92 CLD
>95b8		56 b1					.word	Assemble_cli                     ; $93 CLI
>95ba		86 b1					.word	Assemble_clv                     ; $94 CLV
>95bc		b4 b0					.word	Assemble_cmp                     ; $95 CMP
>95be		fd b0					.word	Assemble_cpx                     ; $96 CPX
>95c0		f8 b0					.word	Assemble_cpy                     ; $97 CPY
>95c2		da b0					.word	Assemble_dec                     ; $98 DEC
>95c4		92 b1					.word	Assemble_dex                     ; $99 DEX
>95c6		6e b1					.word	Assemble_dey                     ; $9a DEY
>95c8		a4 b0					.word	Assemble_eor                     ; $9b EOR
>95ca		df b0					.word	Assemble_inc                     ; $9c INC
>95cc		a2 b1					.word	Assemble_inx                     ; $9d INX
>95ce		8e b1					.word	Assemble_iny                     ; $9e INY
>95d0		11 b1					.word	Assemble_jmp                     ; $9f JMP
>95d2		0c b1					.word	Assemble_jsr                     ; $a0 JSR
>95d4		b0 b0					.word	Assemble_lda                     ; $a1 LDA
>95d6		d5 b0					.word	Assemble_ldx                     ; $a2 LDX
>95d8		f3 b0					.word	Assemble_ldy                     ; $a3 LDY
>95da		c6 b0					.word	Assemble_lsr                     ; $a4 LSR
>95dc		a6 b1					.word	Assemble_nop                     ; $a5 NOP
>95de		9c b0					.word	Assemble_ora                     ; $a6 ORA
>95e0		52 b1					.word	Assemble_pha                     ; $a7 PHA
>95e2		3e b1					.word	Assemble_php                     ; $a8 PHP
>95e4		9a b1					.word	Assemble_phx                     ; $a9 PHX
>95e6		5a b1					.word	Assemble_phy                     ; $aa PHY
>95e8		62 b1					.word	Assemble_pla                     ; $ab PLA
>95ea		46 b1					.word	Assemble_plp                     ; $ac PLP
>95ec		ae b1					.word	Assemble_plx                     ; $ad PLX
>95ee		6a b1					.word	Assemble_ply                     ; $ae PLY
>95f0		c1 b0					.word	Assemble_rol                     ; $af ROL
>95f2		cb b0					.word	Assemble_ror                     ; $b0 ROR
>95f4		4e b1					.word	Assemble_rti                     ; $b1 RTI
>95f6		5e b1					.word	Assemble_rts                     ; $b2 RTS
>95f8		b8 b0					.word	Assemble_sbc                     ; $b3 SBC
>95fa		4a b1					.word	Assemble_sec                     ; $b4 SEC
>95fc		aa b1					.word	Assemble_sed                     ; $b5 SED
>95fe		66 b1					.word	Assemble_sei                     ; $b6 SEI
>9600		ac b0					.word	Assemble_sta                     ; $b7 STA
>9602		9e b1					.word	Assemble_stp                     ; $b8 STP
>9604		d0 b0					.word	Assemble_stx                     ; $b9 STX
>9606		ee b0					.word	Assemble_sty                     ; $ba STY
>9608		e4 b0					.word	Assemble_stz                     ; $bb STZ
>960a		82 b1					.word	Assemble_tax                     ; $bc TAX
>960c		7e b1					.word	Assemble_tay                     ; $bd TAY
>960e		07 b1					.word	Assemble_trb                     ; $be TRB
>9610		02 b1					.word	Assemble_tsb                     ; $bf TSB
>9612		8a b1					.word	Assemble_tsx                     ; $c0 TSX
>9614		72 b1					.word	Assemble_txa                     ; $c1 TXA
>9616		7a b1					.word	Assemble_txs                     ; $c2 TXS
>9618		76 b1					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.961a						CommandSetDate:
.961a		a9 03		lda #$03			lda 	#3
.961c		80 02		bra $9620			bra 	CSDTMain
.961e						CommandSetTime:
.961e		a9 00		lda #$00			lda 	#0
.9620						CSDTMain:
.9620		48		pha				pha 								; save table offsets 0 or 3
.9621		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9623		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.9626		20 ab 97	jsr $97ab			jsr 	CheckComma
.9629		e8		inx				inx
.962a		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.962d		20 ab 97	jsr $97ab			jsr 	CheckComma
.9630		e8		inx				inx
.9631		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.9634		68		pla				pla 								; table offset in Y, saving Y
.9635		5a		phy				phy
.9636		a8		tay				tay
.9637		a2 00		ldx #$00			ldx 	#0 							; first number
.9639		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.963b		48		pha				pha
.963c		64 01		stz $01				stz 	1
.963e						_CSDTCopy:
.963e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.9640		d9 82 96	cmp $9682,y			cmp 	RTCWMinValues,y 			; check range
.9643		90 1b		bcc $9660			bcc 	_CSDTRange
.9645		d9 88 96	cmp $9688,y			cmp 	RTCWMaxValues,y
.9648		b0 16		bcs $9660			bcs 	_CSDTRange
.964a		20 65 96	jsr $9665			jsr 	CSDTDecimalToBCD
.964d		da		phx				phx 								; save X
.964e		be 7c 96	ldx $967c,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.9651		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.9654		fa		plx				plx 								; restore X
.9655		e8		inx				inx 								; next number
.9656		c8		iny				iny 								; next table entries
.9657		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.9659		d0 e3		bne $963e			bne 	_CSDTCopy
.965b		68		pla				pla 								; restore I/O space
.965c		85 01		sta $01				sta 	1
.965e		7a		ply				ply 								; restore code pos and exit.
.965f		60		rts				rts
.9660						_CSDTRange:
.9660		a9 04		lda #$04		lda	#4
.9662		4c bc 97	jmp $97bc		jmp	ErrorHandler
.9665						CSDTDecimalToBCD:
.9665		da		phx				phx 								; 10 count in X
.9666		a2 00		ldx #$00			ldx 	#0
.9668						_CSDTDBLoop:
.9668		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.966a		90 05		bcc $9671			bcc 	_CSDTDBExit
.966c		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.966e		e8		inx				inx 								; one more 10s.
.966f		80 f7		bra $9668			bra 	_CSDTDBLoop
.9671						_CSDTDBExit:
.9671		85 36		sta $36				sta 	zTemp0 						; units
.9673		8a		txa				txa 								; 10s x 16
.9674		0a		asl a				asl 	a
.9675		0a		asl a				asl 	a
.9676		0a		asl a				asl 	a
.9677		0a		asl a				asl 	a
.9678		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.967a		fa		plx				plx
.967b		60		rts				rts
.967c						RTCWOffset:
>967c		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9682						RTCWMinValues:
>9682		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.9688						RTCWMaxValues:
>9688		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.968e						StopCommand:
.968e		a9 08		lda #$08		lda	#8
.9690		4c bc 97	jmp $97bc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.9693						UnaryTimer:
.9693		fa		plx				plx
.9694		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.9697						TimerToStackX:
.9697		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; zero result
.969a		64 01		stz $01				stz 	1 							; access I/O
.969c		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.969f		95 58		sta $58,x			sta 	NSMantissa0,x
.96a1		ad 5a d6	lda $d65a			lda 	$D65A
.96a4		95 60		sta $60,x			sta 	NSMantissa1,x
.96a6		ad 5b d6	lda $d65b			lda 	$D65B
.96a9		95 68		sta $68,x			sta 	NSMantissa2,x
.96ab		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.96ac						ProcedureScan:
.96ac		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.96ae		85 30		sta $30				sta 	codePtr
.96b0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.96b2		85 31		sta $31				sta 	codePtr+1
.96b4						_PSLoop:
.96b4		b2 30		lda ($30)			lda 	(codePtr)
.96b6		f0 42		beq $96fa			beq 	_PSExit
.96b8		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.96ba		b1 30		lda ($30),y			lda 	(codePtr),y
.96bc		c9 af		cmp #$af			cmp 	#KWD_PROC
.96be		d0 2d		bne $96ed			bne 	_PSNext
.96c0		c8		iny				iny 								; get the address of the record to zTemp0 and
.96c1		b1 30		lda ($30),y			lda 	(codePtr),y
.96c3		29 c0		and #$c0			and 	#$C0
.96c5		c9 40		cmp #$40			cmp 	#$40
.96c7		d0 32		bne $96fb			bne 	_PSSyntax
.96c9		b1 30		lda ($30),y			lda 	(codePtr),y
.96cb		18		clc				clc
.96cc		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.96ce		85 37		sta $37				sta 	zTemp0+1
.96d0		c8		iny				iny 								; LSB
.96d1		b1 30		lda ($30),y			lda 	(codePtr),y
.96d3		85 36		sta $36				sta 	zTemp0
.96d5		c8		iny				iny 								; character after variable call.
.96d6		98		tya				tya 								; save Y offset at +7 (exponent slot)
.96d7		a0 07		ldy #$07			ldy 	#7
.96d9		91 36		sta ($36),y			sta 	(zTemp0),y
.96db		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.96dd		a0 02		ldy #$02			ldy 	#2
.96df		91 36		sta ($36),y			sta 	(zTemp0),y
.96e1		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.96e3						_PSCopy:
.96e3		b5 30		lda $30,x			lda 	safePtr,x
.96e5		c8		iny				iny
.96e6		91 36		sta ($36),y			sta 	(zTemp0),y
.96e8		e8		inx				inx
.96e9		e0 04		cpx #$04			cpx 	#4
.96eb		d0 f6		bne $96e3			bne 	_PSCopy
.96ed						_PSNext:
.96ed		18		clc				clc
.96ee		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.96f0		65 30		adc $30				adc 	codePtr
.96f2		85 30		sta $30				sta 	codePtr
.96f4		90 02		bcc $96f8			bcc 	_CREExit
.96f6		e6 31		inc $31				inc 	codePtr+1 					; carry
.96f8						_CREExit:
.96f8		80 ba		bra $96b4			bra 	_PSLoop
.96fa						_PSExit:
.96fa		60		rts				rts
.96fb						_PSSyntax:
.96fb		4c e9 b1	jmp $b1e9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.96fe						ScanForward:
.96fe		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9700		86 37		stx $37				stx 	zTemp0+1
.9702		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9704						_ScanLoop:
.9704		b1 30		lda ($30),y			lda 	(codePtr),y
.9706		c8		iny				iny
.9707		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9709		d0 0e		bne $9719			bne 	_ScanGoNext
.970b		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.970d		f0 04		beq $9713			beq 	_ScanMatch
.970f		c5 37		cmp $37				cmp 	zTemp0+1
.9711		d0 06		bne $9719			bne 	_ScanGoNext
.9713						_ScanMatch:
.9713		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9715		d0 01		bne $9718			bne 	_ScanNotEndEOL
.9717		88		dey				dey
.9718						_ScanNotEndEOL:
.9718		60		rts				rts
.9719						_ScanGoNext:
.9719		20 1e 97	jsr $971e			jsr  	ScanForwardOne 				; allows for shifts and so on.
.971c		80 e6		bra $9704			bra 	_ScanLoop
.971e						ScanForwardOne:
.971e		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9720		90 3e		bcc $9760			bcc 	_SFWExit
.9722		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9724		90 18		bcc $973e			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9726		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9728		b0 2f		bcs $9759			bcs 	_ScanSkipData
.972a		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.972c		90 32		bcc $9760			bcc 	_SFWExit 					; if not, ordinary keywords.
.972e		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.9730		b0 2e		bcs $9760			bcs 	_SFWExit
.9732		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9734		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9736		b0 28		bcs $9760			bcs 	_SFWExit
.9738		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.973a		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.973c		80 22		bra $9760			bra 	_SFWExit
.973e						_ScanSkipOne:
.973e		c8		iny				iny 								; consume the extra one.
.973f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9741		d0 1d		bne $9760			bne 	_SFWExit
.9743		18		clc				clc
.9744		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9746		65 30		adc $30				adc 	codePtr
.9748		85 30		sta $30				sta 	codePtr
.974a		90 02		bcc $974e			bcc 	_CREExit
.974c		e6 31		inc $31				inc 	codePtr+1 					; carry
.974e						_CREExit:
.974e		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9750		b2 30		lda ($30)			lda 	(codePtr)
.9752		d0 0c		bne $9760			bne 	_SFWExit 					; if not zero, more to scan
.9754		a9 13		lda #$13		lda	#19
.9756		4c bc 97	jmp $97bc		jmp	ErrorHandler
.9759						_ScanSkipData:
.9759		88		dey				dey 								; point at data token
.975a		c8		iny				iny 								; point to offset
.975b		98		tya				tya 								; A = offset position
.975c		38		sec				sec 								; add size +1 hence SEC
.975d		71 30		adc ($30),y			adc 	(codePtr),y
.975f		a8		tay				tay 								; make current position.
.9760						_SFWExit:
.9760		60		rts				rts
.9761						ScanGetCurrentLineStep:
.9761		64 38		stz $38				stz 	zTemp1
.9763		a0 03		ldy #$03			ldy 	#3
.9765						_SGCLSLoop:
.9765		b1 30		lda ($30),y			lda 	(codePtr),y
.9767		c8		iny				iny
.9768		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.976a		f0 05		beq $9771			beq 	_SGCLSExit
.976c		20 1e 97	jsr $971e			jsr 	ScanForwardOne
.976f		80 f4		bra $9765			bra 	_SGCLSLoop
.9771						_SGCLSExit:
.9771		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9773		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9774						Command_WHILE:
.9774		5a		phy				phy 								; save position of the test
.9775		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9777		20 64 a6	jsr $a664			jsr 	EvaluateNumber
.977a		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; check if zero
.977d		f0 0e		beq $978d			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.977f		98		tya				tya 								; position *after* test.
.9780		7a		ply				ply 								; restore position before test, at WHILE
.9781		88		dey				dey 								; so we execute the WHILE command again.
.9782		48		pha				pha 								; push after test on the stack
.9783		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9785		20 63 b8	jsr $b863			jsr 	StackOpen
.9788		20 a8 b8	jsr $b8a8			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.978b		7a		ply				ply 								; restore the position *after* the test
.978c		60		rts				rts
.978d						_WHExitLoop:
.978d		68		pla				pla 								; throw post loop position
.978e		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.9790		aa		tax				tax
.9791		20 fe 96	jsr $96fe			jsr 	ScanForward
.9794		60		rts				rts
.9795						Command_WEND:
.9795		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9797		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9799		20 90 b8	jsr $b890			jsr 	StackCheckFrame
.979c		20 b9 b8	jsr $b8b9			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.979f		20 82 b8	jsr $b882			jsr 	StackClose		 			; erase the frame
.97a2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.97a3						CheckRightBracket:
.97a3		b1 30		lda ($30),y			lda 	(codePtr),y
.97a5		c8		iny				iny
.97a6		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.97a8		d0 0f		bne $97b9			bne 	CNAFail
.97aa		60		rts				rts
.97ab						CheckComma:
.97ab		b1 30		lda ($30),y			lda 	(codePtr),y
.97ad		c8		iny				iny
.97ae		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.97b0		d0 07		bne $97b9			bne 	CNAFail
.97b2		60		rts				rts
.97b3						CheckNextA:
.97b3		d1 30		cmp ($30),y			cmp 	(codePtr),y
.97b5		d0 02		bne $97b9			bne 	CNAFail
.97b7		c8		iny				iny 								; skip character
.97b8		60		rts				rts 								; and exit
.97b9						CNAFail:
.97b9		4c e9 b1	jmp $b1e9			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.97bc						ErrorHandler:
.97bc		a8		tay				tay 								; find the error text
.97bd		f0 49		beq $9808			beq 	_EHEnd
.97bf		a2 00		ldx #$00			ldx 	#0
.97c1		a9 02		lda #$02			lda 	#((ErrorText) & $FF)
.97c3		85 36		sta $36				sta 	0+zTemp0
.97c5		a9 b2		lda #$b2			lda 	#((ErrorText) >> 8)
.97c7		85 37		sta $37				sta 	1+zTemp0
.97c9						_EHFind:
.97c9		88		dey				dey 								; keep looking through text
.97ca		f0 0e		beq $97da			beq 	_EHFound
.97cc						_EHFindZero:
.97cc		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.97ce		e6 36		inc $36				inc 	zTemp0
.97d0		d0 02		bne $97d4			bne 	_EHFNoCarry
.97d2		e6 37		inc $37				inc 	zTemp0+1
.97d4						_EHFNoCarry:
.97d4		c9 00		cmp #$00			cmp 	#0
.97d6		d0 f4		bne $97cc			bne 	_EHFindZero
.97d8		80 ef		bra $97c9			bra 	_EHFind
.97da						_EHFound:
.97da		a5 36		lda $36				lda 	zTemp0 						; print message
.97dc		a6 37		ldx $37				ldx 	zTemp0+1
.97de		20 15 98	jsr $9815			jsr 	PrintStringXA
.97e1		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.97e3		b1 30		lda ($30),y			lda 	(codePtr),y
.97e5		d0 05		bne $97ec			bne 	_EHAtMsg
.97e7		c8		iny				iny
.97e8		b1 30		lda ($30),y			lda 	(codePtr),y
.97ea		f0 17		beq $9803			beq 	_EHCREnd
.97ec						_EHAtMsg:
.97ec		a2 98		ldx #$98			ldx 	#_AtMsg >> 8 				; print " at "
.97ee		a9 0b		lda #$0b			lda 	#_AtMsg & $FF
.97f0		20 15 98	jsr $9815			jsr 	PrintStringXA
.97f3		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.97f5		b1 30		lda ($30),y			lda 	(codePtr),y
.97f7		48		pha				pha
.97f8		c8		iny				iny
.97f9		b1 30		lda ($30),y			lda 	(codePtr),y
.97fb		aa		tax				tax
.97fc		68		pla				pla
.97fd		20 2b 9c	jsr $9c2b			jsr 	ConvertInt16 				; convert XA to string
.9800		20 15 98	jsr $9815			jsr 	PrintStringXA 				; and print it.
.9803						_EHCREnd:
.9803		a9 0d		lda #$0d			lda 	#13 						; new line
.9805		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9808						_EHEnd:
.9808		4c 31 86	jmp $8631			jmp 	WarmStart
>980b		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9813		20 00
.9815						PrintStringXA:
.9815		5a		phy				phy
.9816		86 37		stx $37				stx 	zTemp0+1
.9818		85 36		sta $36				sta 	zTemp0
.981a		a0 00		ldy #$00			ldy 	#0
.981c						_PSXALoop:
.981c		b1 36		lda ($36),y			lda 	(zTemp0),y
.981e		f0 06		beq $9826			beq 	_PSXAExit
.9820		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9823		c8		iny				iny
.9824		80 f6		bra $981c			bra 	_PSXALoop
.9826						_PSXAExit:
.9826		7a		ply				ply
.9827		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9828						UnaryTrue:
.9828		fa		plx				plx
.9829						ReturnTrue:
.9829		a9 01		lda #$01			lda 	#1  						; set to 1
.982b		20 18 a7	jsr $a718			jsr 	NSMSetByte
.982e		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9830		95 50		sta $50,x			sta 	NSStatus,x
.9832		60		rts				rts
.9833						UnaryFalse:
.9833		fa		plx				plx
.9834						ReturnFalse:
.9834		4c 16 a7	jmp $a716			jmp 	NSMSetZero 					; set it all to zero
.9837						BinaryCompareEqual:
.9837		fa		plx				plx
.9838		20 73 98	jsr $9873			jsr 	CompareBaseCode
.983b		c9 00		cmp #$00			cmp 	#0
.983d		f0 ea		beq $9829			beq 	ReturnTrue
.983f		80 f3		bra $9834			bra 	ReturnFalse
.9841						BinaryCompareLess:
.9841		fa		plx				plx
.9842		20 73 98	jsr $9873			jsr 	CompareBaseCode
.9845		c9 ff		cmp #$ff			cmp 	#$FF
.9847		f0 e0		beq $9829			beq 	ReturnTrue
.9849		80 e9		bra $9834			bra 	ReturnFalse
.984b						BinaryCompareGreater:
.984b		fa		plx				plx
.984c		20 73 98	jsr $9873			jsr 	CompareBaseCode
.984f		c9 01		cmp #$01			cmp 	#1
.9851		f0 d6		beq $9829			beq 	ReturnTrue
.9853		80 df		bra $9834			bra 	ReturnFalse
.9855						BinaryCompareNotEqual:
.9855		fa		plx				plx
.9856		20 73 98	jsr $9873			jsr 	CompareBaseCode
.9859		c9 00		cmp #$00			cmp 	#0
.985b		d0 cc		bne $9829			bne 	ReturnTrue
.985d		80 d5		bra $9834			bra 	ReturnFalse
.985f						BinaryCompareLessEqual:
.985f		fa		plx				plx
.9860		20 73 98	jsr $9873			jsr 	CompareBaseCode
.9863		c9 01		cmp #$01			cmp 	#1
.9865		d0 c2		bne $9829			bne 	ReturnTrue
.9867		80 cb		bra $9834			bra 	ReturnFalse
.9869						BinaryCompareGreaterEqual:
.9869		fa		plx				plx
.986a		20 73 98	jsr $9873			jsr 	CompareBaseCode
.986d		c9 ff		cmp #$ff			cmp 	#$FF
.986f		d0 b8		bne $9829			bne 	ReturnTrue
.9871		80 c1		bra $9834			bra 	ReturnFalse
.9873						CompareBaseCode:
.9873		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; make both values if references.
.9876		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9878		15 51		ora $51,x			ora 	NSStatus+1,x
.987a		29 10		and #$10			and 	#NSTString
.987c		d0 37		bne $98b5			bne 	_CBCString 					; if so do string code, which will check if both.
.987e		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9880		15 79		ora $79,x			ora 	NSExponent+1,x
.9882		d0 34		bne $98b8			bne 	_CBCFloat
.9884		b5 50		lda $50,x			lda 	NSStatus,x
.9886		15 51		ora $51,x			ora 	NSStatus+1,x
.9888		29 08		and #$08			and 	#NSTFloat
.988a		d0 2c		bne $98b8			bne 	_CBCFloat
.988c		20 bb 98	jsr $98bb			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.988f		e8		inx				inx
.9890		20 bb 98	jsr $98bb			jsr 	CompareFixMinusZero
.9893		ca		dex				dex
.9894		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9896		55 51		eor $51,x			eor 	NSStatus+1,x
.9898		10 0a		bpl $98a4			bpl 	_CDCSameSign
.989a		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.989c		30 14		bmi $98b2			bmi 	_CBCLess 					; return $FF
.989e						_CBCGreater:
.989e		a9 01		lda #$01			lda 	#1
.98a0		60		rts				rts
.98a1						_CBCEqual:
.98a1		a9 00		lda #$00			lda 	#0
.98a3		60		rts				rts
.98a4						_CDCSameSign:
.98a4		20 d0 9a	jsr $9ad0			jsr 	SubTopTwoStack 				; unsigned subtract
.98a7		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; or the mantissa together
.98aa		f0 f5		beq $98a1			beq 	_CBCEqual 					; -0 == 0
.98ac		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.98ae		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.98b0		10 ec		bpl $989e			bpl 	_CBCGreater
.98b2						_CBCLess:
.98b2		a9 ff		lda #$ff			lda 	#$FF
.98b4		60		rts				rts
.98b5						_CBCString:
.98b5		4c 41 9a	jmp $9a41			jmp 	CompareStrings
.98b8						_CBCFloat:
.98b8		4c 8b 9d	jmp $9d8b			jmp 	CompareFloat
.98bb						CompareFixMinusZero:
.98bb		20 38 a7	jsr $a738			jsr 	NSMIsZero
.98be		d0 02		bne $98c2			bne 	_CFXMZNotZero
.98c0		74 50		stz $50,x			stz 	NSStatus,x
.98c2						_CFXMZNotZero:
.98c2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.98c3						StringConcat:
.98c3		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.98c5		35 51		and $51,x			and 	NSStatus+1,x
.98c7		29 18		and #$18			and 	#NSBTypeMask
.98c9		c9 10		cmp #$10			cmp 	#NSTString
.98cb		d0 50		bne $991d			bne		_SCType
.98cd		64 38		stz $38				stz 	zTemp1 						; counting total length
.98cf		e8		inx				inx
.98d0		20 ee 98	jsr $98ee			jsr 	_SCSetupZ0 					; setup for second
.98d3		20 f7 98	jsr $98f7			jsr 	_SCLengthZ0 				; length for second
.98d6		ca		dex				dex
.98d7		20 ee 98	jsr $98ee			jsr 	_SCSetupZ0 					; setup for first
.98da		20 f7 98	jsr $98f7			jsr 	_SCLengthZ0 				; length for first
.98dd		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.98df		20 53 b9	jsr $b953			jsr 	StringTempAllocate
.98e2		20 0e 99	jsr $990e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.98e5		e8		inx				inx
.98e6		20 ee 98	jsr $98ee			jsr 	_SCSetupZ0 					; copy second out
.98e9		20 0e 99	jsr $990e			jsr 	_SCCopy
.98ec		ca		dex				dex
.98ed		60		rts				rts
.98ee						_SCSetupZ0:
.98ee		b5 58		lda $58,x			lda 	NSMantissa0,x
.98f0		85 36		sta $36				sta 	zTemp0
.98f2		b5 60		lda $60,x			lda 	NSMantissa1,x
.98f4		85 37		sta $37				sta 	zTemp0+1
.98f6		60		rts				rts
.98f7						_SCLengthZ0:
.98f7		5a		phy				phy
.98f8		a0 00		ldy #$00			ldy 	#0
.98fa						_SCLenLoop:
.98fa		b1 36		lda ($36),y			lda 	(zTemp0),y
.98fc		f0 0e		beq $990c			beq 	_SCLExit
.98fe		c8		iny				iny
.98ff		e6 38		inc $38				inc 	zTemp1
.9901		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9903		c9 fd		cmp #$fd			cmp 	#253
.9905		d0 f3		bne $98fa			bne		_SCLenLoop
.9907		a9 09		lda #$09		lda	#9
.9909		4c bc 97	jmp $97bc		jmp	ErrorHandler
.990c						_SCLExit:
.990c		7a		ply				ply
.990d		60		rts				rts
.990e						_SCCopy:
.990e		5a		phy				phy
.990f		a0 00		ldy #$00			ldy 	#0
.9911						_SCCopyLoop:
.9911		b1 36		lda ($36),y			lda 	(zTemp0),y
.9913		f0 06		beq $991b			beq 	_SCCExit
.9915		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.9918		c8		iny				iny
.9919		80 f6		bra $9911			bra 	_SCCopyLoop
.991b						_SCCExit:
.991b		7a		ply				ply
.991c		60		rts				rts
.991d						_SCType:
.991d		4c f3 b1	jmp $b1f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9920						IntegerDivide:
.9920		fa		plx				plx
.9921		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9923		15 51		ora $51,x			ora 	NSStatus+1,x
.9925		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9926		0a		asl a				asl 	a
.9927		10 05		bpl $992e			bpl 	_NotRef
.9929		48		pha				pha
.992a		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.992d		68		pla				pla
.992e						_NotRef:
.992e		0a		asl a				asl 	a
.992f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9931		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9933		15 79		ora $79,x			ora 	NSExponent+1,x
.9935		f0 03		beq $993a			beq 	_IntegerCode 				; if clear, then we have two integers
.9937		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.993a						_IntegerCode:
.993a		20 54 99	jsr $9954			jsr 	CheckDivideZero 			; do div zero check
.993d		20 86 99	jsr $9986			jsr 	Int32Divide 				; do the division
.9940		20 37 9a	jsr $9a37			jsr 	CalculateSign 				; calculate result sign
.9943						NSMCopyPlusTwoToZero:
.9943		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9945		95 58		sta $58,x			sta 	NSMantissa0,x
.9947		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9949		95 60		sta $60,x			sta 	NSMantissa1,x
.994b		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.994d		95 68		sta $68,x			sta 	NSMantissa2,x
.994f		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9951		95 70		sta $70,x			sta 	NSMantissa3,x
.9953		60		rts				rts
.9954						CheckDivideZero:
.9954		e8		inx				inx
.9955		20 38 a7	jsr $a738			jsr 	NSMIsZero
.9958		f0 02		beq $995c			beq 	_CDVError
.995a		ca		dex				dex
.995b		60		rts				rts
.995c						_CDVError:
.995c		a9 03		lda #$03		lda	#3
.995e		4c bc 97	jmp $97bc		jmp	ErrorHandler
.9961						IntegerModulus:
.9961		fa		plx				plx
.9962		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9964		15 51		ora $51,x			ora 	NSStatus+1,x
.9966		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9967		0a		asl a				asl 	a
.9968		10 05		bpl $996f			bpl 	_NotRef
.996a		48		pha				pha
.996b		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.996e		68		pla				pla
.996f						_NotRef:
.996f		0a		asl a				asl 	a
.9970		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9972		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9974		15 79		ora $79,x			ora 	NSExponent+1,x
.9976		f0 03		beq $997b			beq 	_IntegerCode 				; if clear, then we have two integers
.9978		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.997b						_IntegerCode:
.997b						IntegerModulusNoCheck:
.997b		20 54 99	jsr $9954			jsr 	CheckDivideZero 			; do div zero check
.997e		20 86 99	jsr $9986			jsr 	Int32Divide 				; do the division
.9981		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9983		56 50		lsr $50,x			lsr 	NSStatus,x
.9985		60		rts				rts
.9986						Int32Divide:
.9986		48		pha				pha 								; save AXY
.9987		5a		phy				phy
.9988		20 f9 a6	jsr $a6f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.998b		20 12 a7	jsr $a712			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.998e		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9990						_I32DivideLoop:
.9990		e8		inx				inx
.9991		e8		inx				inx
.9992		20 25 a7	jsr $a725			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9995		ca		dex				dex
.9996		ca		dex				dex
.9997		20 26 a7	jsr $a726			jsr 	NSMRotateLeft
.999a		20 c5 99	jsr $99c5			jsr 	DivideCheckSubtract 		; check if subtract possible
.999d		90 02		bcc $99a1			bcc 	_I32DivideNoCarryIn
.999f		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.99a1						_I32DivideNoCarryIn:
.99a1		88		dey				dey 								; loop round till division completed.
.99a2		d0 ec		bne $9990			bne 	_I32DivideLoop
.99a4		7a		ply				ply 								; restore AXY and exit
.99a5		68		pla				pla
.99a6		60		rts				rts
.99a7						Int32ShiftDivide:
.99a7		48		pha				pha 								; save AY
.99a8		5a		phy				phy
.99a9		e8		inx				inx 								; clear S[X+2]
.99aa		e8		inx				inx
.99ab		20 16 a7	jsr $a716			jsr 	NSMSetZero
.99ae		ca		dex				dex
.99af		ca		dex				dex
.99b0		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.99b2						_I32SDLoop:
.99b2		20 c5 99	jsr $99c5			jsr 	DivideCheckSubtract 		; check if subtract possible
.99b5		e8		inx				inx
.99b6		e8		inx				inx
.99b7		20 26 a7	jsr $a726			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.99ba		ca		dex				dex
.99bb		ca		dex				dex
.99bc		20 26 a7	jsr $a726			jsr 	NSMRotateLeft
.99bf		88		dey				dey 	 							; do 31 times
.99c0		d0 f0		bne $99b2			bne 	_I32SDLoop
.99c2		7a		ply				ply 								; restore AY and exit
.99c3		68		pla				pla
.99c4		60		rts				rts
.99c5						DivideCheckSubtract:
.99c5		20 d0 9a	jsr $9ad0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.99c8		b0 04		bcs $99ce			bcs 	_DCSExit 					; if carry set, then could do, exit
.99ca		20 b6 9a	jsr $9ab6			jsr 	AddTopTwoStack 				; add it back in
.99cd		18		clc				clc 								; and return False
.99ce						_DCSExit:
.99ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.99cf						MulInteger:
.99cf		fa		plx				plx
.99d0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99d2		15 51		ora $51,x			ora 	NSStatus+1,x
.99d4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99d5		0a		asl a				asl 	a
.99d6		10 05		bpl $99dd			bpl 	_NotRef
.99d8		48		pha				pha
.99d9		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99dc		68		pla				pla
.99dd						_NotRef:
.99dd		0a		asl a				asl 	a 							; put MSB of type into A:7
.99de		30 09		bmi $99e9			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.99e0		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99e2		15 79		ora $79,x			ora 	NSExponent+1,x
.99e4		f0 06		beq $99ec			beq 	_IntegerCode 				; if clear, then we have two integers
.99e6		4c 4d 9e	jmp $9e4d			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.99e9						_StringData:
.99e9		4c fd b1	jmp $b1fd			jmp 	NotDoneError							; at least one string - don't know both are strings.
.99ec						_IntegerCode:
.99ec		20 f9 99	jsr $99f9			jsr 	MultiplyShort
.99ef		c9 00		cmp #$00			cmp 	#0
.99f1		f0 05		beq $99f8			beq 	_MIExit
.99f3		a9 04		lda #$04		lda	#4
.99f5		4c bc 97	jmp $97bc		jmp	ErrorHandler
.99f8						_MIExit:
.99f8		60		rts				rts
.99f9						MultiplyShort:
.99f9		5a		phy				phy 								; save Y
.99fa		20 f9 a6	jsr $a6f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99fd		20 12 a7	jsr $a712			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9a00		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9a02						_I32MLoop:
.9a02		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9a04		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9a06		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9a08		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9a0a		f0 25		beq $9a31			beq 	_I32MExit 					; exit if zero
.9a0c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a0e		29 01		and #$01			and 	#1
.9a10		f0 0d		beq $9a1f			beq 	_I32MNoAdd
.9a12		20 b6 9a	jsr $9ab6			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a15		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a17		10 06		bpl $9a1f			bpl 	_I32MNoAdd
.9a19						_I32ShiftRight:
.9a19		20 2f a7	jsr $a72f			jsr 	NSMShiftRight 				; shift S[X] right
.9a1c		c8		iny				iny 								; increment shift count
.9a1d		80 09		bra $9a28			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a1f						_I32MNoAdd:
.9a1f		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a21		70 f6		bvs $9a19			bvs 	_I32ShiftRight 				; instead.
.9a23		e8		inx				inx
.9a24		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a27		ca		dex				dex
.9a28						_I32MShiftUpper:
.9a28		e8		inx				inx 								; shift S[X+2] right
.9a29		e8		inx				inx
.9a2a		20 2f a7	jsr $a72f			jsr 	NSMShiftRight
.9a2d		ca		dex				dex
.9a2e		ca		dex				dex
.9a2f		80 d1		bra $9a02			bra 	_I32MLoop 					; try again.
.9a31						_I32MExit:
.9a31		20 37 9a	jsr $9a37			jsr 	CalculateSign
.9a34		98		tya				tya 								; shift in A
.9a35		7a		ply				ply 								; restore Y and exit
.9a36		60		rts				rts
.9a37						CalculateSign:
.9a37		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a39		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9a3b		55 51		eor $51,x			eor 	NSStatus+1,x
.9a3d		0a		asl a				asl 	a 							; shift bit 7 into carry
.9a3e		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9a40		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a41						CompareStrings:
.9a41		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9a43		35 51		and $51,x			and 	NSStatus+1,x
.9a45		29 10		and #$10			and 	#NSBIsString
.9a47		f0 28		beq $9a71			beq 	_CSTypeError
.9a49		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a4b		85 36		sta $36				sta 	zTemp0
.9a4d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a4f		85 37		sta $37				sta 	zTemp0+1
.9a51		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9a53		85 38		sta $38				sta 	zTemp1
.9a55		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a57		85 39		sta $39				sta 	zTemp1+1
.9a59		5a		phy				phy 								; save Y so we can access strings
.9a5a		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a5c						_CSLoop:
.9a5c		c8		iny				iny
.9a5d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a5f		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9a61		d0 06		bne $9a69			bne 	_CSDifferent
.9a63		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9a65		d0 f5		bne $9a5c			bne 	_CSLoop 					; still comparing
.9a67						_CSExit:
.9a67		7a		ply				ply 								; reached end, return zero in A from EOS
.9a68		60		rts				rts
.9a69						_CSDifferent:
.9a69		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9a6b		90 fa		bcc $9a67			bcc		_CSExit
.9a6d		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9a6f		80 f6		bra $9a67			bra 	_CSExit
.9a71						_CSTypeError:
.9a71		4c f3 b1	jmp $b1f3			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9a74						ShiftLeft:
.9a74		38		sec				sec 								; common code, carry determines which way.
.9a75		80 01		bra $9a78			bra 	ShiftMain
.9a77						ShiftRight:
.9a77		18		clc				clc
.9a78						ShiftMain:
.9a78		fa		plx				plx 								; restore X
.9a79		08		php				php 								; save direction
.9a7a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a7c		15 51		ora $51,x			ora 	NSStatus+1,x
.9a7e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a7f		0a		asl a				asl 	a
.9a80		10 05		bpl $9a87			bpl 	_NotRef
.9a82		48		pha				pha
.9a83		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a86		68		pla				pla
.9a87						_NotRef:
.9a87		0a		asl a				asl 	a
.9a88		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a8a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a8c		15 79		ora $79,x			ora 	NSExponent+1,x
.9a8e		f0 03		beq $9a93			beq 	_IntegerCode 				; if clear, then we have two integers
.9a90		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.9a93						_IntegerCode:
.9a93		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9a95		29 e0		and #$e0			and 	#$E0
.9a97		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9a99		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9a9b		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9a9d		d0 12		bne $9ab1			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9a9f						_SMLoop:
.9a9f		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9aa1		30 11		bmi $9ab4			bmi 	_SMExit 					; exit if done.
.9aa3		28		plp				plp 								; restore direction setting
.9aa4		08		php				php
.9aa5		90 05		bcc $9aac			bcc 	_SMRight
.9aa7		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; shift left if CS
.9aaa		80 f3		bra $9a9f			bra 	_SMLoop
.9aac						_SMRight:
.9aac		20 2f a7	jsr $a72f			jsr 	NSMShiftRight 				; shift right if CC
.9aaf		80 ee		bra $9a9f			bra 	_SMLoop
.9ab1						_SMExit0:
.9ab1		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; return zero.
.9ab4						_SMExit:
.9ab4		28		plp				plp 								; throw direction
.9ab5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9ab6						AddTopTwoStack:
.9ab6		18		clc				clc
.9ab7		b5 58		lda $58,x			lda		NSMantissa0,x
.9ab9		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9abb		95 58		sta $58,x			sta 	NSMantissa0,x
.9abd		b5 60		lda $60,x			lda		NSMantissa1,x
.9abf		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9ac1		95 60		sta $60,x			sta 	NSMantissa1,x
.9ac3		b5 68		lda $68,x			lda		NSMantissa2,x
.9ac5		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9ac7		95 68		sta $68,x			sta 	NSMantissa2,x
.9ac9		b5 70		lda $70,x			lda		NSMantissa3,x
.9acb		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9acd		95 70		sta $70,x			sta 	NSMantissa3,x
.9acf		60		rts				rts
.9ad0						SubTopTwoStack:
.9ad0		38		sec				sec
.9ad1		b5 58		lda $58,x			lda		NSMantissa0,x
.9ad3		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9ad5		95 58		sta $58,x			sta 	NSMantissa0,x
.9ad7		b5 60		lda $60,x			lda		NSMantissa1,x
.9ad9		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9adb		95 60		sta $60,x			sta 	NSMantissa1,x
.9add		b5 68		lda $68,x			lda		NSMantissa2,x
.9adf		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9ae1		95 68		sta $68,x			sta 	NSMantissa2,x
.9ae3		b5 70		lda $70,x			lda		NSMantissa3,x
.9ae5		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9ae7		95 70		sta $70,x			sta 	NSMantissa3,x
.9ae9		60		rts				rts
.9aea						AddInteger:
.9aea		fa		plx				plx
.9aeb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9aed		15 51		ora $51,x			ora 	NSStatus+1,x
.9aef		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9af0		0a		asl a				asl 	a
.9af1		10 05		bpl $9af8			bpl 	_NotRef
.9af3		48		pha				pha
.9af4		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9af7		68		pla				pla
.9af8						_NotRef:
.9af8		0a		asl a				asl 	a 							; put MSB of type into A:7
.9af9		30 09		bmi $9b04			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9afb		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9afd		15 79		ora $79,x			ora 	NSExponent+1,x
.9aff		f0 06		beq $9b07			beq 	_IntegerCode 				; if clear, then we have two integers
.9b01		4c fd 9c	jmp $9cfd			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b04						_StringData:
.9b04		4c c3 98	jmp $98c3			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b07						_IntegerCode:
.9b07						AddCode:
.9b07		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b09		55 51		eor $51,x			eor 	NSStatus+1,x
.9b0b		10 a9		bpl $9ab6			bpl 	AddTopTwoStack
.9b0d		20 d0 9a	jsr $9ad0			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b10		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b12		10 07		bpl $9b1b			bpl 	_AddExit
.9b14		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b16		95 50		sta $50,x			sta 	NSStatus,x
.9b18		20 df a6	jsr $a6df			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b1b						_AddExit:
.9b1b		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; check for -0
.9b1e		d0 02		bne $9b22			bne 	_AddNonZero
.9b20		74 50		stz $50,x			stz 	NSStatus,x
.9b22						_AddNonZero:
.9b22		60		rts				rts
.9b23						SubInteger:
.9b23		fa		plx				plx
.9b24		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b26		15 51		ora $51,x			ora 	NSStatus+1,x
.9b28		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b29		0a		asl a				asl 	a
.9b2a		10 05		bpl $9b31			bpl 	_NotRef
.9b2c		48		pha				pha
.9b2d		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b30		68		pla				pla
.9b31						_NotRef:
.9b31		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b32		30 09		bmi $9b3d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b34		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b36		15 79		ora $79,x			ora 	NSExponent+1,x
.9b38		f0 06		beq $9b40			beq 	_IntegerCode 				; if clear, then we have two integers
.9b3a		4c 02 9d	jmp $9d02			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b3d						_StringData:
.9b3d		4c fd b1	jmp $b1fd			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b40						_IntegerCode:
.9b40		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9b42		49 80		eor #$80			eor 	#$80
.9b44		95 51		sta $51,x			sta 	NSStatus+1,x
.9b46		80 bf		bra $9b07			bra 	AddCode 					; and do the same code as add.
.9b48						AndInteger:
.9b48		fa		plx				plx
.9b49		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b4b		15 51		ora $51,x			ora 	NSStatus+1,x
.9b4d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b4e		0a		asl a				asl 	a
.9b4f		10 05		bpl $9b56			bpl 	_NotRef
.9b51		48		pha				pha
.9b52		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b55		68		pla				pla
.9b56						_NotRef:
.9b56		0a		asl a				asl 	a
.9b57		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b59		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b5b		15 79		ora $79,x			ora 	NSExponent+1,x
.9b5d		f0 03		beq $9b62			beq 	_IntegerCode 				; if clear, then we have two integers
.9b5f		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.9b62						_IntegerCode:
.9b62		b5 58		lda $58,x			lda		NSMantissa0,x
.9b64		35 59		and $59,x			and 		NSMantissa0+1,x
.9b66		95 58		sta $58,x			sta 	NSMantissa0,x
.9b68		b5 60		lda $60,x			lda		NSMantissa1,x
.9b6a		35 61		and $61,x			and 		NSMantissa1+1,x
.9b6c		95 60		sta $60,x			sta 	NSMantissa1,x
.9b6e		b5 68		lda $68,x			lda		NSMantissa2,x
.9b70		35 69		and $69,x			and 		NSMantissa2+1,x
.9b72		95 68		sta $68,x			sta 	NSMantissa2,x
.9b74		b5 70		lda $70,x			lda		NSMantissa3,x
.9b76		35 71		and $71,x			and 		NSMantissa3+1,x
.9b78		95 70		sta $70,x			sta 	NSMantissa3,x
.9b7a		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9b7c		60		rts				rts
.9b7d						OraInteger:
.9b7d		fa		plx				plx
.9b7e		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b80		15 51		ora $51,x			ora 	NSStatus+1,x
.9b82		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b83		0a		asl a				asl 	a
.9b84		10 05		bpl $9b8b			bpl 	_NotRef
.9b86		48		pha				pha
.9b87		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b8a		68		pla				pla
.9b8b						_NotRef:
.9b8b		0a		asl a				asl 	a
.9b8c		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b8e		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b90		15 79		ora $79,x			ora 	NSExponent+1,x
.9b92		f0 03		beq $9b97			beq 	_IntegerCode 				; if clear, then we have two integers
.9b94		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.9b97						_IntegerCode:
.9b97		b5 58		lda $58,x			lda		NSMantissa0,x
.9b99		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9b9b		95 58		sta $58,x			sta 	NSMantissa0,x
.9b9d		b5 60		lda $60,x			lda		NSMantissa1,x
.9b9f		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9ba1		95 60		sta $60,x			sta 	NSMantissa1,x
.9ba3		b5 68		lda $68,x			lda		NSMantissa2,x
.9ba5		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9ba7		95 68		sta $68,x			sta 	NSMantissa2,x
.9ba9		b5 70		lda $70,x			lda		NSMantissa3,x
.9bab		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9bad		95 70		sta $70,x			sta 	NSMantissa3,x
.9baf		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9bb1		60		rts				rts
.9bb2						EorInteger:
.9bb2		fa		plx				plx
.9bb3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bb5		15 51		ora $51,x			ora 	NSStatus+1,x
.9bb7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bb8		0a		asl a				asl 	a
.9bb9		10 05		bpl $9bc0			bpl 	_NotRef
.9bbb		48		pha				pha
.9bbc		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bbf		68		pla				pla
.9bc0						_NotRef:
.9bc0		0a		asl a				asl 	a
.9bc1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bc3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bc5		15 79		ora $79,x			ora 	NSExponent+1,x
.9bc7		f0 03		beq $9bcc			beq 	_IntegerCode 				; if clear, then we have two integers
.9bc9		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.9bcc						_IntegerCode:
.9bcc		b5 58		lda $58,x			lda		NSMantissa0,x
.9bce		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9bd0		95 58		sta $58,x			sta 	NSMantissa0,x
.9bd2		b5 60		lda $60,x			lda		NSMantissa1,x
.9bd4		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9bd6		95 60		sta $60,x			sta 	NSMantissa1,x
.9bd8		b5 68		lda $68,x			lda		NSMantissa2,x
.9bda		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9bdc		95 68		sta $68,x			sta 	NSMantissa2,x
.9bde		b5 70		lda $70,x			lda		NSMantissa3,x
.9be0		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9be2		95 70		sta $70,x			sta 	NSMantissa3,x
.9be4		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9be6		60		rts				rts
.9be7						WordIndirect:
.9be7		fa		plx				plx
.9be8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bea		15 51		ora $51,x			ora 	NSStatus+1,x
.9bec		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bed		0a		asl a				asl 	a
.9bee		10 05		bpl $9bf5			bpl 	_NotRef
.9bf0		48		pha				pha
.9bf1		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bf4		68		pla				pla
.9bf5						_NotRef:
.9bf5		0a		asl a				asl 	a
.9bf6		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bf8		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bfa		15 79		ora $79,x			ora 	NSExponent+1,x
.9bfc		f0 03		beq $9c01			beq 	_IntegerCode 				; if clear, then we have two integers
.9bfe		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.9c01						_IntegerCode:
.9c01		20 07 9b	jsr $9b07			jsr 	AddCode 					; add the two values
.9c04		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c06		95 50		sta $50,x			sta 	NSStatus,x
.9c08		60		rts				rts
.9c09						ByteIndirect:
.9c09		fa		plx				plx
.9c0a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c0c		15 51		ora $51,x			ora 	NSStatus+1,x
.9c0e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c0f		0a		asl a				asl 	a
.9c10		10 05		bpl $9c17			bpl 	_NotRef
.9c12		48		pha				pha
.9c13		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c16		68		pla				pla
.9c17						_NotRef:
.9c17		0a		asl a				asl 	a
.9c18		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c1a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c1c		15 79		ora $79,x			ora 	NSExponent+1,x
.9c1e		f0 03		beq $9c23			beq 	_IntegerCode 				; if clear, then we have two integers
.9c20		4c f3 b1	jmp $b1f3			jmp 	TypeError 					; anything else, type mismatch.
.9c23						_IntegerCode:
.9c23		20 07 9b	jsr $9b07			jsr 	AddCode 					; add the two values
.9c26		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9c28		95 50		sta $50,x			sta 	NSStatus,x
.9c2a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9c2b						ConvertInt16:
.9c2b		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9c2d		86 60		stx $60				stx 	NSMantissa1
.9c2f		64 68		stz $68				stz 	NSMantissa2
.9c31		64 70		stz $70				stz 	NSMantissa3
.9c33		64 50		stz $50				stz 	NSStatus 					; positive integer
.9c35		a2 00		ldx #$00			ldx 	#0 							; stack level
.9c37		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9c39		80 00		bra $9c3b			bra 	ConvertInt32
.9c3b						ConvertInt32:
.9c3b		5a		phy				phy
.9c3c		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9c3e		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9c40		10 08		bpl $9c4a			bpl 	_CI32NotNeg
.9c42		48		pha				pha
.9c43		a9 2d		lda #$2d			lda 	#'-'
.9c45		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c48		c8		iny				iny
.9c49		68		pla				pla
.9c4a						_CI32NotNeg:
.9c4a		20 58 9c	jsr $9c58			jsr 	_CI32DivideConvert 			; recursive conversion
.9c4d		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9c4f		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c52		7a		ply				ply
.9c53		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9c55		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9c57		60		rts				rts
.9c58						_CI32DivideConvert:
.9c58		e8		inx				inx 								; write to next slot up
.9c59		20 18 a7	jsr $a718			jsr 	NSMSetByte 		 			; write the base out.
.9c5c		ca		dex				dex
.9c5d		20 86 99	jsr $9986			jsr 	Int32Divide 				; divide
.9c60		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9c62		48		pha				pha
.9c63		20 43 99	jsr $9943			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9c66		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero ?
.9c69		f0 05		beq $9c70			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9c6b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9c6d		20 58 9c	jsr $9c58			jsr 	_CI32DivideConvert 			; and recusrively call.
.9c70						_CI32NoRecurse:
.9c70		68		pla				pla 								; remainder
.9c71		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9c73		90 02		bcc $9c77			bcc 	_CI32NotHex
.9c75		69 26		adc #$26			adc 	#6+32
.9c77						_CI32NotHex:
.9c77		69 30		adc #$30			adc 	#48
.9c79		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9c7c		c8		iny				iny
.9c7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9c7e						PrecedenceLevel:
>9c7e		04					.byte	 4	; $00 <<
>9c7f		02					.byte	 2	; $01 <=
>9c80		02					.byte	 2	; $02 <>
>9c81		00					.byte	 0	; $03 !!3
>9c82		00					.byte	 0	; $04 ><
>9c83		02					.byte	 2	; $05 >=
>9c84		04					.byte	 4	; $06 >>
>9c85		00					.byte	 0	; $07 !!7
>9c86		00					.byte	 0	; $08 !!8
>9c87		00					.byte	 0	; $09 !!9
>9c88		00					.byte	 0	; $0a !!10
>9c89		00					.byte	 0	; $0b !!11
>9c8a		00					.byte	 0	; $0c !!12
>9c8b		00					.byte	 0	; $0d !!13
>9c8c		00					.byte	 0	; $0e !!14
>9c8d		00					.byte	 0	; $0f !!15
>9c8e		00					.byte	 0	; $10 @
>9c8f		00					.byte	 0	; $11 !!17
>9c90		00					.byte	 0	; $12 !!18
>9c91		00					.byte	 0	; $13 [
>9c92		04					.byte	 4	; $14 \
>9c93		00					.byte	 0	; $15 ]
>9c94		01					.byte	 1	; $16 ^
>9c95		00					.byte	 0	; $17 _
>9c96		00					.byte	 0	; $18 `
>9c97		00					.byte	 0	; $19 !!25
>9c98		00					.byte	 0	; $1a !!26
>9c99		00					.byte	 0	; $1b {
>9c9a		01					.byte	 1	; $1c |
>9c9b		00					.byte	 0	; $1d }
>9c9c		00					.byte	 0	; $1e ~
>9c9d		00					.byte	 0	; $1f <7F>
>9c9e		00					.byte	 0	; $20
>9c9f		05					.byte	 5	; $21 !
>9ca0		00					.byte	 0	; $22 "
>9ca1		00					.byte	 0	; $23 #
>9ca2		05					.byte	 5	; $24 $
>9ca3		04					.byte	 4	; $25 %
>9ca4		01					.byte	 1	; $26 &
>9ca5		00					.byte	 0	; $27 '
>9ca6		00					.byte	 0	; $28 (
>9ca7		00					.byte	 0	; $29 )
>9ca8		04					.byte	 4	; $2a *
>9ca9		03					.byte	 3	; $2b +
>9caa		00					.byte	 0	; $2c ,
>9cab		03					.byte	 3	; $2d -
>9cac		00					.byte	 0	; $2e .
>9cad		04					.byte	 4	; $2f /
>9cae		00					.byte	 0	; $30 0
>9caf		00					.byte	 0	; $31 1
>9cb0		00					.byte	 0	; $32 2
>9cb1		00					.byte	 0	; $33 3
>9cb2		00					.byte	 0	; $34 4
>9cb3		00					.byte	 0	; $35 5
>9cb4		00					.byte	 0	; $36 6
>9cb5		00					.byte	 0	; $37 7
>9cb6		00					.byte	 0	; $38 8
>9cb7		00					.byte	 0	; $39 9
>9cb8		00					.byte	 0	; $3a :
>9cb9		00					.byte	 0	; $3b ;
>9cba		02					.byte	 2	; $3c <
>9cbb		02					.byte	 2	; $3d =
>9cbc		02					.byte	 2	; $3e >
>9cbd		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9cbe						EvaluateExpressionAt0:
.9cbe		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9cc0						EvaluateExpression:
.9cc0		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9cc2						EvaluateExpressionAtPrecedence:
.9cc2		48		pha				pha 								; save precedence level
.9cc3		20 0a a1	jsr $a10a			jsr 	EvaluateTerm 				; evaluate term into level X.
.9cc6		68		pla				pla 								; restore precedence level.
.9cc7						_EXPRLoop:
.9cc7		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9cc9		b1 30		lda ($30),y			lda 	(codePtr),y
.9ccb		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ccd		b0 25		bcs $9cf4			bcs 	_EXPRExit
.9ccf		da		phx				phx 								; read the operator precedence
.9cd0		aa		tax				tax
.9cd1		bd 7e 9c	lda $9c7e,x			lda 	PrecedenceLevel,x
.9cd4		fa		plx				plx
.9cd5		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9cd7		f0 1b		beq $9cf4			beq 	_EXPRExit
.9cd9		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9cdb		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9cdd		c5 37		cmp $37				cmp 	zTemp0+1
.9cdf		b0 13		bcs $9cf4			bcs		_EXPRExit 					; if current >= operator exit
.9ce1		48		pha				pha 								; save current precedence.
.9ce2		b1 30		lda ($30),y			lda 	(codePtr),y
.9ce4		c8		iny				iny
.9ce5		48		pha				pha
.9ce6		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9ce8		e8		inx				inx 								; work out the right hand side.
.9ce9		20 c2 9c	jsr $9cc2			jsr 	EvaluateExpressionAtPrecedence
.9cec		ca		dex				dex
.9ced		68		pla				pla 								; get operator, call the code.
.9cee		20 f7 9c	jsr $9cf7			jsr 	_EXPRCaller
.9cf1		68		pla				pla 								; restore precedence level
.9cf2		80 d3		bra $9cc7			bra 	_EXPRLoop 					; and go round.
.9cf4						_EXPRExit:
.9cf4		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9cf6		60		rts				rts
.9cf7						_EXPRCaller:
.9cf7		da		phx				phx 								; save on stack, first thing is to restore it
.9cf8		0a		asl a				asl 	a 							; double so can use vectors into X
.9cf9		aa		tax				tax
.9cfa		7c 0c 94	jmp ($940c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9cfd						FloatingPointAdd:
.9cfd		20 73 9e	jsr $9e73			jsr 	FloatPrepare 				; prepare for floats
.9d00		80 09		bra $9d0b			bra 	FloatAdd
.9d02						FloatingPointSub:
.9d02		20 73 9e	jsr $9e73			jsr 	FloatPrepare 				; prepare for floats
.9d05						FloatSubtract:
.9d05		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9d07		49 80		eor #$80			eor 	#$80
.9d09		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9d0b						FloatAdd:
.9d0b		48		pha				pha
.9d0c		5a		phy				phy
.9d0d		20 82 9e	jsr $9e82			jsr 	NSNormalise 				; normalise S[X]
.9d10		f0 51		beq $9d63			beq 	_FAReturn1
.9d12		e8		inx				inx 								; normalise S[X+1]
.9d13		20 82 9e	jsr $9e82			jsr 	NSNormalise
.9d16		ca		dex				dex
.9d17		c9 00		cmp #$00			cmp 	#0
.9d19		f0 60		beq $9d7b			beq 	_FAExit 					; if so, just return A
.9d1b		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9d1d		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9d1f		f0 18		beq $9d39			beq 	_FAExponentsEqual
.9d21		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9d23		a8		tay				tay
.9d24		38		sec				sec 								; do a signed comparison of the exponents.
.9d25		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d27		50 02		bvc $9d2b			bvc 	_FANoSignedChange
.9d29		49 80		eor #$80			eor 	#$80
.9d2b						_FANoSignedChange:
.9d2b		29 80		and #$80			and 	#$80
.9d2d		10 02		bpl $9d31			bpl 	_FAHaveMax
.9d2f		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9d31						_FAHaveMax:
.9d31		20 7e 9d	jsr $9d7e			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9d34		e8		inx				inx
.9d35		20 7e 9d	jsr $9d7e			jsr 	_FAShiftToExponent
.9d38		ca		dex				dex
.9d39						_FAExponentsEqual:
.9d39		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9d3b		55 51		eor $51,x			eor 	NSStatus+1,x
.9d3d		30 0e		bmi $9d4d			bmi 	_FADifferentSigns
.9d3f		20 b6 9a	jsr $9ab6			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9d42		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9d44		10 35		bpl $9d7b			bpl 	_FAExit 					; if no, we are done.
.9d46		20 2f a7	jsr $a72f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9d49		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9d4b		80 2e		bra $9d7b			bra 	_FAExit
.9d4d						_FADifferentSigns:
.9d4d		20 d0 9a	jsr $9ad0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9d50		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9d52		10 06		bpl $9d5a			bpl 	_FACheckZero 				; if no, check for -0
.9d54		20 d8 a6	jsr $a6d8			jsr 	NSMNegate 					; netate result
.9d57		20 df a6	jsr $a6df			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9d5a						_FACheckZero:
.9d5a		20 38 a7	jsr $a738			jsr 	NSMIsZero	 				; check for -0
.9d5d		d0 1c		bne $9d7b			bne 	_FAExit
.9d5f		74 50		stz $50,x			stz 	NSStatus,x
.9d61		80 18		bra $9d7b			bra 	_FAExit
.9d63						_FAReturn1:
.9d63		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9d65		95 58		sta $58,x			sta 	NSMantissa0,x
.9d67		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d69		95 60		sta $60,x			sta 	NSMantissa1,x
.9d6b		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d6d		95 68		sta $68,x			sta 	NSMantissa2,x
.9d6f		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d71		95 70		sta $70,x			sta 	NSMantissa3,x
.9d73		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d75		95 78		sta $78,x			sta 	NSExponent,x
.9d77		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d79		95 50		sta $50,x			sta 	NSStatus,x
.9d7b						_FAExit:
.9d7b		7a		ply				ply
.9d7c		68		pla				pla
.9d7d		60		rts				rts
.9d7e						_FAShiftToExponent:
.9d7e						_FAShiftToExponent2:
.9d7e		98		tya				tya 								; compare Y to exponent
.9d7f		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9d81		f0 07		beq $9d8a			beq 	_FASEExit 					; exit if so.
.9d83		20 2f a7	jsr $a72f			jsr 	NSMShiftRight	 			; shift the mantissa right
.9d86		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9d88		80 f4		bra $9d7e			bra 	_FAShiftToExponent2
.9d8a						_FASEExit:
.9d8a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9d8b						CompareFloat:
.9d8b		20 05 9d	jsr $9d05			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9d8e		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9d90		29 f8		and #$f8			and 	#$F8
.9d92		15 68		ora $68,x			ora 	NSMantissa2,x
.9d94		15 70		ora $70,x			ora 	NSMantissa3,x
.9d96		f0 08		beq $9da0			beq 	_FCExit 					; zero, so approximately identical
.9d98		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9d9a		34 50		bit $50,x			bit 	NSStatus,x
.9d9c		10 02		bpl $9da0			bpl 	_FCExit
.9d9e						_FCNegative:
.9d9e		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9da0						_FCExit:
.9da0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9da1						FDivideCommand:
.9da1		fa		plx				plx	 								; restore stack position
.9da2		20 73 9e	jsr $9e73			jsr 	FloatPrepare 				; prepare for floats
.9da5						FloatDivide:
.9da5		48		pha				pha
.9da6		e8		inx				inx
.9da7		20 82 9e	jsr $9e82			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9daa		ca		dex				dex
.9dab		c9 00		cmp #$00			cmp 	#0
.9dad		f0 1d		beq $9dcc			beq 	_FDZero
.9daf		20 82 9e	jsr $9e82			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9db2		f0 16		beq $9dca			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9db4		20 a7 99	jsr $99a7			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9db7		20 43 99	jsr $9943			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9dba		20 82 9e	jsr $9e82			jsr		NSNormalise 				; renormalise
.9dbd		20 37 9a	jsr $9a37			jsr 	CalculateSign 				; calculate result sign
.9dc0		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9dc2		38		sec				sec
.9dc3		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9dc5		38		sec				sec
.9dc6		e9 1e		sbc #$1e			sbc 	#30
.9dc8		95 78		sta $78,x			sta 	NSExponent,x
.9dca						_FDExit:
.9dca		68		pla				pla
.9dcb		60		rts				rts
.9dcc						_FDZero:
.9dcc		a9 03		lda #$03		lda	#3
.9dce		4c bc 97	jmp $97bc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9dd1						FloatFractionalPart:
.9dd1		5a		phy				phy
.9dd2		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9dd4		29 7f		and #$7f			and 	#$7F
.9dd6		95 50		sta $50,x			sta 	NSStatus,x
.9dd8		20 82 9e	jsr $9e82			jsr 	NSNormalise
.9ddb		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9ddd		38		sec				sec
.9dde		e9 e0		sbc #$e0			sbc 	#$E0
.9de0		90 29		bcc $9e0b			bcc 	_FFPExit 					; already fractional
.9de2		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9de4		b0 22		bcs $9e08			bcs 	_FFPZero
.9de6		a8		tay				tay 								; put count to do in Y
.9de7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9de9		20 0d 9e	jsr $9e0d			jsr 	_FFPPartial
.9dec		95 70		sta $70,x			sta 	NSMantissa3,x
.9dee		b5 68		lda $68,x			lda 	NSMantissa2,x
.9df0		20 0d 9e	jsr $9e0d			jsr 	_FFPPartial
.9df3		95 68		sta $68,x			sta 	NSMantissa2,x
.9df5		b5 60		lda $60,x			lda 	NSMantissa1,x
.9df7		20 0d 9e	jsr $9e0d			jsr 	_FFPPartial
.9dfa		95 60		sta $60,x			sta 	NSMantissa1,x
.9dfc		b5 58		lda $58,x			lda 	NSMantissa0,x
.9dfe		20 0d 9e	jsr $9e0d			jsr 	_FFPPartial
.9e01		95 58		sta $58,x			sta 	NSMantissa0,x
.9e03		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; zeroed check.
.9e06		d0 03		bne $9e0b			bne 	_FFPExit
.9e08						_FFPZero:
.9e08		20 16 a7	jsr $a716			jsr 	NSMSetZero
.9e0b						_FFPExit:
.9e0b		7a		ply				ply
.9e0c		60		rts				rts
.9e0d						_FFPPartial:
.9e0d		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9e0f		f0 17		beq $9e28			beq 	_FFFPPExit
.9e11		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9e13		b0 0c		bcs $9e21			bcs 	_FFFPPWholeByte
.9e15		5a		phy				phy
.9e16						_FFFPPLeft:
.9e16		0a		asl a				asl 	a
.9e17		88		dey				dey
.9e18		d0 fc		bne $9e16			bne 	_FFFPPLeft
.9e1a		7a		ply				ply
.9e1b						_FFFPPRight:
.9e1b		4a		lsr a				lsr 	a
.9e1c		88		dey				dey
.9e1d		d0 fc		bne $9e1b			bne 	_FFFPPRight
.9e1f		80 07		bra $9e28			bra 	_FFFPPExit
.9e21						_FFFPPWholeByte:
.9e21		98		tya				tya 								; subtract 8 from count
.9e22		38		sec				sec
.9e23		e9 08		sbc #$08			sbc 	#8
.9e25		a8		tay				tay
.9e26		a9 00		lda #$00			lda 	#0 							; and clear all
.9e28						_FFFPPExit:
.9e28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9e29						FloatIntegerPart:
.9e29		48		pha				pha
.9e2a		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9e2c		f0 1d		beq $9e4b			beq 	_FIPExit 					; if so do nothing
.9e2e		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; is it zero ?
.9e31		f0 15		beq $9e48			beq 	_FIPZero 					; if so return zero.
.9e33		20 82 9e	jsr $9e82			jsr 	NSNormalise 				; normalise
.9e36		f0 10		beq $9e48			beq 	_FIPZero 					; normalised to zero, exit zero
.9e38						_FIPShift:
.9e38		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9e3a		10 07		bpl $9e43			bpl 	_FIPCheckZero
.9e3c		20 2f a7	jsr $a72f			jsr 	NSMShiftRight 				; shift mantissa right
.9e3f		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9e41		80 f5		bra $9e38			bra 	_FIPShift
.9e43						_FIPCheckZero:
.9e43		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; avoid -0 problem
.9e46		d0 03		bne $9e4b			bne 	_FIPExit 					; set to zero if mantissa zero.
.9e48						_FIPZero:
.9e48		20 16 a7	jsr $a716			jsr 	NSMSetZero
.9e4b						_FIPExit:
.9e4b		68		pla				pla
.9e4c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9e4d						FloatingPointMultiply:
.9e4d		20 73 9e	jsr $9e73			jsr 	FloatPrepare 				; prepare for floats
.9e50						FloatMultiply:
.9e50		48		pha				pha
.9e51		20 82 9e	jsr $9e82			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9e54		f0 18		beq $9e6e			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9e56		e8		inx				inx
.9e57		20 82 9e	jsr $9e82			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9e5a		ca		dex				dex
.9e5b		c9 00		cmp #$00			cmp 	#0
.9e5d		f0 0c		beq $9e6b			beq 	_FDSetZero
.9e5f		20 f9 99	jsr $99f9			jsr 	MultiplyShort 				; calculate the result.
.9e62		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9e64		18		clc				clc
.9e65		75 79		adc $79,x			adc 	NSExponent+1,x
.9e67		95 78		sta $78,x			sta 	NSExponent,x
.9e69		80 03		bra $9e6e			bra 	_FDExit
.9e6b						_FDSetZero:
.9e6b		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; return 0
.9e6e						_FDExit:
.9e6e		20 82 9e	jsr $9e82			jsr 	NSNormalise 				; normalise the result
.9e71		68		pla				pla
.9e72		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9e73						FloatPrepare:
.9e73		20 7e 9f	jsr $9f7e			jsr 	DereferenceTopTwo 			; dereference the top two values
.9e76		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9e78		15 51		ora $51,x			ora 	NSStatus+1,x
.9e7a		29 10		and #$10			and 	#NSBIsString
.9e7c		d0 01		bne $9e7f			bne 	_FDType
.9e7e		60		rts				rts
.9e7f						_FDType:
.9e7f		4c f3 b1	jmp $b1f3			jmp 	TypeError
.9e82						NSNormalise:
.9e82		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9e84		29 80		and #$80			and 	#$80
.9e86		09 08		ora #$08			ora 	#NSTFloat
.9e88		95 50		sta $50,x			sta 	NSStatus,x
.9e8a		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; if zero exit
.9e8d		d0 07		bne $9e96			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9e8f		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9e91		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9e93		a9 00		lda #$00			lda 	#0 							; set Z flag
.9e95		60		rts				rts
.9e96						_NSNormaliseOptimise:
.9e96		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9e98		d0 19		bne $9eb3			bne 	_NSNormaliseLoop
.9e9a		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9e9c		30 15		bmi $9eb3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9e9e		95 70		sta $70,x			sta 	NSMantissa3,x
.9ea0		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ea2		95 68		sta $68,x			sta 	NSMantissa2,x
.9ea4		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ea6		95 60		sta $60,x			sta 	NSMantissa1,x
.9ea8		74 58		stz $58,x			stz 	NSMantissa0,x
.9eaa		b5 78		lda $78,x			lda 	NSExponent,x
.9eac		38		sec				sec
.9ead		e9 08		sbc #$08			sbc 	#8
.9eaf		95 78		sta $78,x			sta 	NSExponent,x
.9eb1		80 e3		bra $9e96			bra 	_NSNormaliseOptimise
.9eb3						_NSNormaliseLoop:
.9eb3		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9eb5		70 07		bvs $9ebe			bvs 	_NSNExit 					; exit if so with Z flag clear
.9eb7		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; shift mantissa left
.9eba		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9ebc		80 f5		bra $9eb3			bra 	_NSNormaliseLoop
.9ebe						_NSNExit:
.9ebe		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9ec0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ec1						AssignNumber:
.9ec1		5a		phy				phy
.9ec2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9ec4		85 36		sta $36				sta 	zTemp0
.9ec6		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ec8		85 37		sta $37				sta 	zTemp0+1
.9eca		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9ecc		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ece		95 50		sta $50,x			sta 	NSStatus,x
.9ed0		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ed2		c9 08		cmp #$08			cmp 	#NSTFloat
.9ed4		f0 24		beq $9efa			beq 	_ANFloat
.9ed6		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9ed8		f0 03		beq $9edd			beq		_ANNotFloat
.9eda		4c ee b1	jmp $b1ee			jmp 	RangeError					; if it is, report an error.
.9edd						_ANNotFloat:
.9edd		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9edf		29 03		and #$03			and 	#3
.9ee1		d0 05		bne $9ee8			bne 	_ANByteWord
.9ee3		20 05 9f	jsr $9f05			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ee6		80 1b		bra $9f03			bra 	_ANExit
.9ee8						_ANByteWord:
.9ee8		48		pha				pha 								; save count
.9ee9		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9eeb		92 36		sta ($36)			sta 	(zTemp0)
.9eed		68		pla				pla
.9eee		c9 01		cmp #$01			cmp	 	#1
.9ef0		f0 11		beq $9f03			beq 	_ANExit
.9ef2		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ef4		a0 01		ldy #$01			ldy 	#1
.9ef6		91 36		sta ($36),y			sta 	(zTemp0),y
.9ef8		80 09		bra $9f03			bra 	_ANExit
.9efa						_ANFloat:
.9efa		20 05 9f	jsr $9f05			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9efd		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9eff		a0 04		ldy #$04			ldy 	#4
.9f01		91 36		sta ($36),y			sta 	(zTemp0),y
.9f03						_ANExit:
.9f03		7a		ply				ply
.9f04		60		rts				rts
.9f05						_ANCopy4PackSign:
.9f05		a0 03		ldy #$03			ldy 	#3
.9f07		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9f09		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f0b		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9f0d		91 36		sta ($36),y			sta 	(zTemp0),y
.9f0f		88		dey				dey
.9f10		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f12		91 36		sta ($36),y			sta 	(zTemp0),y
.9f14		88		dey				dey
.9f15		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f17		91 36		sta ($36),y			sta 	(zTemp0),y
.9f19		88		dey				dey
.9f1a		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f1c		91 36		sta ($36),y			sta 	(zTemp0),y
.9f1e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f1f						AssignString:
.9f1f		5a		phy				phy
.9f20		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f22		85 38		sta $38				sta 	zTemp1
.9f24		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f26		85 39		sta $39				sta 	zTemp1+1
.9f28		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f2a		85 36		sta $36				sta 	zTemp0
.9f2c		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f2e		85 37		sta $37				sta 	zTemp0+1
.9f30		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f32		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f34		f0 23		beq $9f59			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f36		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f37		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f39		e9 02		sbc #$02			sbc 	#2
.9f3b		85 3c		sta $3c				sta 	zsTemp
.9f3d		a0 01		ldy #$01			ldy 	#1
.9f3f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f41		e9 00		sbc #$00			sbc 	#0
.9f43		85 3d		sta $3d				sta 	zsTemp+1
.9f45		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9f47						_ASGetLength:
.9f47		c8		iny				iny
.9f48		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f4a		d0 fb		bne $9f47			bne 	_ASGetLength
.9f4c		98		tya				tya 								; is this length <= current length
.9f4d		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9f4f		90 1e		bcc $9f6f			bcc 	_ASCopyString
.9f51		f0 1c		beq $9f6f			beq 	_ASCopyString
.9f53		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9f55		a0 01		ldy #$01			ldy 	#1
.9f57		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f59						_ASNewStringRequired:
.9f59		e8		inx				inx 								; concrete the new string.
.9f5a		20 d6 b8	jsr $b8d6			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9f5d		ca		dex				dex
.9f5e		18		clc				clc
.9f5f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9f61		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9f63		92 36		sta ($36)			sta 	(zTemp0)
.9f65		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f67		69 00		adc #$00			adc 	#0
.9f69		a0 01		ldy #$01			ldy 	#1
.9f6b		91 36		sta ($36),y			sta 	(zTemp0),y
.9f6d		80 0d		bra $9f7c			bra 	_ASExit
.9f6f						_ASCopyString:
.9f6f		a0 00		ldy #$00			ldy 	#0
.9f71						_ASCopyLoop:
.9f71		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f73		c8		iny				iny
.9f74		c8		iny				iny
.9f75		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f77		88		dey				dey
.9f78		c9 00		cmp #$00			cmp 	#0
.9f7a		d0 f5		bne $9f71			bne 	_ASCopyLoop
.9f7c						_ASExit:
.9f7c		7a		ply				ply
.9f7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9f7e						DereferenceTopTwo:
.9f7e		e8		inx				inx
.9f7f		20 83 9f	jsr $9f83			jsr 	Dereference 				; deref x+1
.9f82		ca		dex				dex  								; falls through to deref x
.9f83						Dereference:
.9f83		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9f85		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9f87		f0 48		beq $9fd1			beq 	_DRFExit 					; not a reference, so exit.
.9f89		5a		phy				phy
.9f8a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f8c		85 36		sta $36				sta 	zTemp0
.9f8e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f90		85 37		sta $37				sta 	zTemp0+1
.9f92		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9f94		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f96		95 58		sta $58,x			sta 	NSMantissa0,x
.9f98		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9f9a		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f9c		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f9e		f0 0e		beq $9fae			beq 	_DRFDereferenceTwo
.9fa0		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9fa2		f0 2f		beq $9fd3			beq 	_DRFFull
.9fa4		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9fa6		29 03		and #$03			and 	#3
.9fa8		f0 29		beq $9fd3			beq 	_DRFFull 					; the whole word
.9faa		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9fac		f0 06		beq $9fb4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9fae						_DRFDereferenceTwo:
.9fae		a0 01		ldy #$01			ldy 	#1
.9fb0		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb2		95 60		sta $60,x			sta 	NSMantissa1,x
.9fb4						_DRFClear23:
.9fb4		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9fb6		74 70		stz $70,x			stz 	NSMantissa3,x
.9fb8		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9fba		29 18		and #$18			and 	#NSBTypeMask
.9fbc		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9fbe		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9fc0		d0 0e		bne $9fd0			bne 	_DRFNotString
.9fc2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9fc4		15 60		ora $60,x			ora 	NSMantissa1,x
.9fc6		d0 08		bne $9fd0			bne 	_DRFNotString
.9fc8		a9 d2		lda #$d2			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9fca		95 58		sta $58,x			sta 	NSMantissa0,x
.9fcc		a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9fce		95 60		sta $60,x			sta 	NSMantissa1,x
.9fd0						_DRFNotString
.9fd0		7a		ply				ply 								; restore Y and exit
.9fd1						_DRFExit:
.9fd1		60		rts				rts
.9fd2						_DRFNullString:
>9fd2		00						.byte 	0
.9fd3						_DRFFull:
.9fd3		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9fd5		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fd7		95 60		sta $60,x			sta 	NSMantissa1,x
.9fd9		c8		iny				iny
.9fda		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fdc		95 68		sta $68,x			sta 	NSMantissa2,x
.9fde		c8		iny				iny
.9fdf		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fe1		95 70		sta $70,x			sta 	NSMantissa3,x
.9fe3		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9fe5		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9fe7		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9fe9		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9feb		f0 05		beq $9ff2			beq 	_DRFNoExponent
.9fed		c8		iny				iny 								; if not, read the exponent as well.
.9fee		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ff0		95 78		sta $78,x			sta 	NSExponent,x
.9ff2						_DRFNoExponent:
.9ff2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ff4		10 0a		bpl $a000			bpl 	_DRFExit2 					; if not, then exit.
.9ff6		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ff8		95 70		sta $70,x			sta 	NSMantissa3,x
.9ffa		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9ffc		09 80		ora #$80			ora 	#NSBIsNegative
.9ffe		95 50		sta $50,x			sta 	NSStatus,x
.a000						_DRFExit2:
.a000		7a		ply				ply
.a001		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.a002						EncodeNumberStart:
.a002		38		sec				sec
.a003		80 01		bra $a006			bra 	EncodeNumberContinue+1
.a005						EncodeNumberContinue:
.a005		18		clc				clc
.a006						EncodeNumber:
.a006		08		php				php 								; save reset flag.
.a007		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a009		f0 12		beq $a01d			beq 	_ENIsOkay
.a00b		c9 30		cmp #$30			cmp 	#"0"
.a00d		90 04		bcc $a013			bcc 	_ENBadNumber
.a00f		c9 3a		cmp #$3a			cmp 	#"9"+1
.a011		90 0a		bcc $a01d			bcc 	_ENIsOkay
.a013						_ENBadNumber:
.a013		28		plp				plp 								; throw saved reset
.a014		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.a017		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a019		f0 7b		beq $a096			beq 	_ENConstructFinal
.a01b						_ENFail:
.a01b		18		clc				clc 								; not allowed
.a01c		60		rts				rts
.a01d						_ENIsOkay:
.a01d		28		plp				plp 								; are we restarting
.a01e		90 15		bcc $a035			bcc 	_ENNoRestart
.a020						_ENStartEncode:
.a020		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.a022		f0 0c		beq $a030			beq 	_ENFirstDP
.a024		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a026		20 18 a7	jsr $a718			jsr 	NSMSetByte 					; in single byte mode.
.a029		a9 01		lda #$01			lda 	#ESTA_Low
.a02b						_ENExitChange:
.a02b		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a02e		38		sec				sec
.a02f		60		rts				rts
.a030						_ENFirstDP:
.a030		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; clear integer part
.a033		80 3c		bra $a071			bra 	_ESTASwitchFloat			; go straight to float and exi
.a035						_ENNoRestart:
.a035		48		pha				pha 								; save digit or DP on stack.
.a036		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a039		c9 01		cmp #$01			cmp 	#ESTA_Low
.a03b		f0 09		beq $a046			beq  	_ESTALowState
.a03d		c9 02		cmp #$02			cmp 	#ESTA_High
.a03f		f0 26		beq $a067			beq 	_ESTAHighState
.a041		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a043		f0 38		beq $a07d			beq 	_ESTADecimalState
>a045		db						.byte 	$DB 						; causes a break in the emulator
.a046						_ESTALowState:
.a046		68		pla				pla 								; get value back
.a047		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a049		f0 26		beq $a071			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a04b		29 0f		and #$0f			and 	#15 						; make digit
.a04d		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a050		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a052		0a		asl a				asl 	a
.a053		0a		asl a				asl 	a
.a054		75 58		adc $58,x			adc 	NSMantissa0,x
.a056		0a		asl a				asl 	a
.a057		6d 06 04	adc $0406			adc 	digitTemp
.a05a		95 58		sta $58,x			sta 	NSMantissa0,x
.a05c		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a05e		90 05		bcc $a065			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a060		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a062		8d 05 04	sta $0405			sta 	encodeState
.a065						_ESTANoSwitch:
.a065		38		sec				sec
.a066		60		rts				rts
.a067						_ESTAHighState:
.a067		68		pla				pla 								; get value back
.a068		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a06a		f0 05		beq $a071			beq 	_ESTASwitchFloat
.a06c		20 ca a0	jsr $a0ca			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a06f		38		sec				sec
.a070		60		rts				rts
.a071						_ESTASwitchFloat:
.a071		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a074		e8		inx				inx 								; zero the decimal additive.
.a075		20 16 a7	jsr $a716			jsr 	NSMSetZero
.a078		ca		dex				dex
.a079		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a07b		80 ae		bra $a02b			bra 	_ENExitChange
.a07d						_ESTADecimalState:
.a07d		68		pla				pla 								; digit.
.a07e		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a080		f0 99		beq $a01b			beq 	_ENFail
.a082		e8		inx				inx 								; put digit into fractional part of X+1
.a083		20 ca a0	jsr $a0ca			jsr 	ESTAShiftDigitIntoMantissa
.a086		ca		dex				dex
.a087		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a08a		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a08d		c9 0b		cmp #$0b			cmp 	#11
.a08f		f0 02		beq $a093			beq 	_ESTADSFail
.a091		38		sec				sec
.a092		60		rts				rts
.a093						_ESTADSFail:
.a093		4c ee b1	jmp $b1ee			jmp 	RangeError
.a096						_ENConstructFinal:
.a096		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a099		f0 2d		beq $a0c8			beq 	_ENCFExit 					; no decimals
.a09b		5a		phy				phy
.a09c		0a		asl a				asl 	a 							; x 4 and CLC
.a09d		0a		asl a				asl 	a
.a09e		6d 07 04	adc $0407			adc 	decimalCount
.a0a1		a8		tay				tay
.a0a2		b9 ad b1	lda $b1ad,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a0a5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a0a7		b9 ae b1	lda $b1ae,y			lda 	DecimalScalarTable-5+1,y
.a0aa		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a0ac		b9 af b1	lda $b1af,y			lda 	DecimalScalarTable-5+2,y
.a0af		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a0b1		b9 b0 b1	lda $b1b0,y			lda 	DecimalScalarTable-5+3,y
.a0b4		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a0b6		b9 b1 b1	lda $b1b1,y			lda 	DecimalScalarTable-5+4,y
.a0b9		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a0bb		a9 08		lda #$08			lda 	#NSTFloat
.a0bd		95 52		sta $52,x			sta 	NSStatus+2,x
.a0bf		7a		ply				ply
.a0c0		e8		inx				inx 								; multiply decimal const by decimal scalar
.a0c1		20 50 9e	jsr $9e50			jsr 	FloatMultiply
.a0c4		ca		dex				dex
.a0c5		20 0b 9d	jsr $9d0b			jsr 	FloatAdd 					; add to integer part.
.a0c8						_ENCFExit:
.a0c8		18		clc				clc 								; reject the digit.
.a0c9		60		rts				rts
.a0ca						ESTAShiftDigitIntoMantissa:
.a0ca		29 0f		and #$0f			and 	#15 						; save digit
.a0cc		48		pha				pha
.a0cd		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a0cf		48		pha				pha
.a0d0		b5 68		lda $68,x			lda 	NSMantissa2,x
.a0d2		48		pha				pha
.a0d3		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0d5		48		pha				pha
.a0d6		b5 58		lda $58,x			lda 	NSMantissa0,x
.a0d8		48		pha				pha
.a0d9		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; x 2
.a0dc		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; x 4
.a0df		18		clc				clc 								; pop mantissa and add
.a0e0		68		pla				pla
.a0e1		75 58		adc $58,x			adc 	NSMantissa0,x
.a0e3		95 58		sta $58,x			sta 	NSMantissa0,x
.a0e5		68		pla				pla
.a0e6		75 60		adc $60,x			adc 	NSMantissa1,x
.a0e8		95 60		sta $60,x			sta 	NSMantissa1,x
.a0ea		68		pla				pla
.a0eb		75 68		adc $68,x			adc 	NSMantissa2,x
.a0ed		95 68		sta $68,x			sta 	NSMantissa2,x
.a0ef		68		pla				pla
.a0f0		75 70		adc $70,x			adc 	NSMantissa3,x
.a0f2		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a0f4		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; x 10
.a0f7		68		pla				pla 								; add digit
.a0f8		18		clc				clc
.a0f9		75 58		adc $58,x			adc 	NSMantissa0,x
.a0fb		95 58		sta $58,x			sta 	NSMantissa0,x
.a0fd		90 0a		bcc $a109			bcc 	_ESTASDExit
.a0ff		f6 60		inc $60,x			inc 	NSMantissa1,x
.a101		d0 06		bne $a109			bne 	_ESTASDExit
.a103		f6 68		inc $68,x			inc 	NSMantissa2,x
.a105		d0 02		bne $a109			bne 	_ESTASDExit
.a107		f6 70		inc $70,x			inc 	NSMantissa3,x
.a109						_ESTASDExit:
.a109		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a10a						EvaluateTerm:
.a10a		b1 30		lda ($30),y			lda 	(codePtr),y
.a10c		30 18		bmi $a126			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a10e		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a110		b0 6c		bcs $a17e			bcs 	_ETVariable
.a112		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a114		90 6b		bcc $a181			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a116		c9 3a		cmp #$3a			cmp 	#'9'+1
.a118		b0 67		bcs $a181			bcs 	_ETPuncUnary
.a11a		20 02 a0	jsr $a002			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a11d						_ETNumber:
.a11d		c8		iny				iny 								; keep encoding until we have the numbers
.a11e		b1 30		lda ($30),y			lda 	(codePtr),y
.a120		20 05 a0	jsr $a005			jsr 	EncodeNumberContinue
.a123		b0 f8		bcs $a11d			bcs 	_ETNumber 					; go back if accepted.
.a125		60		rts				rts
.a126						_ETCheckUnary:
.a126		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a128		f0 3f		beq $a169			beq 	_ETString
.a12a		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a12c		f0 12		beq $a140			beq 	_ETHexConstant
.a12e		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a130		90 0b		bcc $a13d			bcc 	_ETSyntaxError
.a132		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a134		b0 07		bcs $a13d			bcs 	_ETSyntaxError
.a136		da		phx				phx 								; push X on the stack
.a137		0a		asl a				asl 	a 							; put vector x 2 into X
.a138		aa		tax				tax
.a139		c8		iny				iny 								; consume unary function token
.a13a		7c 8c 94	jmp ($948c,x)			jmp 	(VectorSet0,x) 				; and do it.
.a13d						_ETSyntaxError:
.a13d		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.a140						_ETHexConstant:
.a140		c8		iny				iny 								; skip #
.a141		c8		iny				iny 								; skip count
.a142		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; clear result
.a145						_ETHLoop:
.a145		b1 30		lda ($30),y			lda 	(codePtr),y
.a147		c8		iny				iny 								; and consume
.a148		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a14a		f0 1c		beq $a168			beq 	_ETHExit
.a14c		48		pha				pha 								; save on stack.
.a14d		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; x 2
.a150		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; x 4
.a153		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; x 8
.a156		20 25 a7	jsr $a725			jsr 	NSMShiftLeft 				; x 16
.a159		68		pla				pla 								; ASCII
.a15a		c9 41		cmp #$41			cmp 	#'A'
.a15c		90 02		bcc $a160			bcc 	_ETHNotChar
.a15e		e9 07		sbc #$07			sbc 	#7
.a160						_ETHNotChar:
.a160		29 0f		and #$0f			and 	#15 						; digit now
.a162		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a164		95 58		sta $58,x			sta 	NSMantissa0,x
.a166		80 dd		bra $a145			bra 	_ETHLoop 					; go round.
.a168						_ETHExit:
.a168		60		rts				rts
.a169						_ETString:
.a169		c8		iny				iny 								; look at length
.a16a		b1 30		lda ($30),y			lda 	(codePtr),y
.a16c		48		pha				pha
.a16d		c8		iny				iny 								; first character
.a16e		20 70 b4	jsr $b470			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a171		68		pla				pla 								; restore count and save
.a172		85 36		sta $36				sta 	zTemp0
.a174		98		tya				tya 								; add length to Y to skip it.
.a175		18		clc				clc
.a176		65 36		adc $36				adc 	zTemp0
.a178		a8		tay				tay
.a179		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a17b		95 50		sta $50,x			sta 	NSStatus,x
.a17d		60		rts				rts
.a17e						_ETVariable:
.a17e		4c d3 a1	jmp $a1d3			jmp 	VariableHandler
.a181						_ETPuncUnary:
.a181		c8		iny				iny 								; consume the unary character
.a182		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a184		f0 2b		beq $a1b1			beq 	_ETUnaryNegate
.a186		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a188		f0 36		beq $a1c0			beq 	_ETDereference
.a18a		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a18c		f0 3e		beq $a1cc			beq 	_ETParenthesis
.a18e		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a190		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a192		f0 06		beq $a19a			beq 	_ETIndirection
.a194		e6 36		inc $36				inc 	zTemp0
.a196		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a198		d0 a3		bne $a13d			bne 	_ETSyntaxError
.a19a						_ETIndirection:
.a19a		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a19c		1a		inc a				inc 	a
.a19d		48		pha				pha
.a19e		20 0a a1	jsr $a10a			jsr 	EvaluateTerm				; evaluate the term
.a1a1		20 83 9f	jsr $9f83			jsr 	Dereference 				; dereference it.
.a1a4		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a1a6		d0 06		bne $a1ae			bne 	_ETTypeMismatch
.a1a8		68		pla				pla 								; indirection 1-2
.a1a9		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a1ab		95 50		sta $50,x			sta 	NSStatus,x
.a1ad		60		rts				rts
.a1ae						_ETTypeMismatch:
.a1ae		4c f3 b1	jmp $b1f3			jmp 	TypeError
.a1b1						_ETUnaryNegate:
.a1b1		20 0a a1	jsr $a10a			jsr 	EvaluateTerm				; evaluate the term
.a1b4		20 83 9f	jsr $9f83			jsr 	Dereference 				; dereference it.
.a1b7		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a1b9		29 10		and #$10			and 	#NSTString
.a1bb		d0 f1		bne $a1ae			bne 	_ETTypeMismatch
.a1bd		4c d8 a6	jmp $a6d8			jmp 	NSMNegate  					; just toggles the sign bit.
.a1c0						_ETDereference:
.a1c0		20 0a a1	jsr $a10a			jsr 	EvaluateTerm				; evaluate the term
.a1c3		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a1c5		29 20		and #$20			and 	#NSBIsReference
.a1c7		f0 e5		beq $a1ae			beq 	_ETTypeMismatch
.a1c9		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a1cb		60		rts				rts
.a1cc						_ETParenthesis:
.a1cc		20 c0 9c	jsr $9cc0			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a1cf		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; check for )
.a1d2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a1d3						VariableHandler:
.a1d3		b1 30		lda ($30),y			lda 	(codePtr),y
.a1d5		18		clc				clc
.a1d6		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a1d8		85 37		sta $37				sta 	zTemp0+1
.a1da		c8		iny				iny
.a1db		b1 30		lda ($30),y			lda 	(codePtr),y
.a1dd		85 36		sta $36				sta 	zTemp0
.a1df		c8		iny				iny
.a1e0		18		clc				clc									; copy variable address+3 to mantissa
.a1e1		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a1e3		95 58		sta $58,x			sta 	NSMantissa0,x
.a1e5		a5 37		lda $37				lda 	zTemp0+1
.a1e7		69 00		adc #$00			adc 	#0
.a1e9		95 60		sta $60,x			sta 	NSMantissa1,x
.a1eb		74 68		stz $68,x			stz 	NSMantissa2,x
.a1ed		74 70		stz $70,x			stz 	NSMantissa3,x
.a1ef		74 78		stz $78,x			stz 	NSExponent,x
.a1f1		5a		phy				phy
.a1f2		a0 02		ldy #$02			ldy 	#2 							; read type
.a1f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1f6		7a		ply				ply
.a1f7		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a1f9		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a1fb		95 50		sta $50,x			sta 	NSStatus,x
.a1fd		29 04		and #$04			and 	#NSBIsArray
.a1ff		d0 01		bne $a202			bne 	_VHArray
.a201		60		rts				rts
.a202						_VHArray:
.a202		e8		inx				inx
.a203		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a206		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a208		95 51		sta $51,x			sta 	NSStatus+1,x
.a20a		b1 30		lda ($30),y			lda 	(codePtr),y
.a20c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a20e		d0 06		bne $a216			bne 	_VHNoSecondIndex
.a210		c8		iny				iny 								; skip the comma
.a211		e8		inx				inx
.a212		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a215		ca		dex				dex
.a216						_VHNoSecondIndex:
.a216		ca		dex				dex 								; set X back.
.a217		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; and check the right bracket.
.a21a		5a		phy				phy 								; save position
.a21b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a21d		85 3e		sta $3e				sta 	zaTemp
.a21f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a221		85 3f		sta $3f				sta 	zaTemp+1
.a223		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a225		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a227		f0 5d		beq $a286			beq 	_VHBadArray
.a229		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a22b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a22d		f0 02		beq $a231			beq 	_VHHas2Mask
.a22f		a9 ff		lda #$ff			lda 	#$FF
.a231						_VHHas2Mask:
.a231		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a233		f0 4c		beq $a281			beq 	_VHBadIndex
.a235		0a		asl a				asl 	a 							; carry will be set if a second index
.a236		90 08		bcc $a240			bcc 	_VHCheckFirstIndex
.a238		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a23a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a23c		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a23e		90 41		bcc $a281			bcc 	_VHBadIndex
.a240						_VHCheckFirstIndex:
.a240		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a242		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a244		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a246		90 39		bcc $a281			bcc 	_VHBadIndex
.a248		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a24a		64 37		stz $37				stz 	zTemp0+1
.a24c		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a24e		30 0e		bmi $a25e			bmi 	_VHNoMultiply
.a250		da		phx				phx
.a251		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a253		48		pha				pha
.a254		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a256		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a258		1a		inc a				inc 	a 							; add 1 for zero base
.a259		fa		plx				plx
.a25a		20 c1 a6	jsr $a6c1			jsr 	Multiply8x8 				; calculate -> Z0
.a25d		fa		plx				plx
.a25e						_VHNoMultiply:
.a25e		18		clc				clc
.a25f		a5 36		lda $36				lda 	zTemp0
.a261		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a263		85 36		sta $36				sta 	zTemp0
.a265		a5 37		lda $37				lda 	zTemp0+1
.a267		69 00		adc #$00			adc 	#0
.a269		85 37		sta $37				sta 	zTemp0+1
.a26b		b5 50		lda $50,x			lda 	NSStatus,x
.a26d		20 da 87	jsr $87da			jsr 	ScaleByBaseType
.a270		18		clc				clc
.a271		b2 3e		lda ($3e)			lda 	(zaTemp)
.a273		65 36		adc $36				adc 	zTemp0
.a275		95 58		sta $58,x			sta 	NSMantissa0,x
.a277		a0 01		ldy #$01			ldy 	#1
.a279		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a27b		65 37		adc $37				adc 	zTemp0+1
.a27d		95 60		sta $60,x			sta 	NSMantissa1,x
.a27f		7a		ply				ply 								; restore position
.a280		60		rts				rts
.a281						_VHBadIndex:
.a281		a9 17		lda #$17		lda	#23
.a283		4c bc 97	jmp $97bc		jmp	ErrorHandler
.a286						_VHBadArray:
.a286		a9 18		lda #$18		lda	#24
.a288		4c bc 97	jmp $97bc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a28b						AbsUnary:
.a28b		fa		plx				plx 								; restore stack pos
.a28c		20 64 a6	jsr $a664			jsr 	EvaluateNumber 				; get a float or int
.a28f		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a292		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a294		29 7f		and #$7f			and 	#$7F
.a296		95 50		sta $50,x			sta 	NSStatus,x
.a298		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a299						AllocUnary:
.a299		fa		plx				plx 								; restore stack pos
.a29a		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger		; get bytes required.
.a29d		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a2a0		da		phx				phx 								; save X/Y
.a2a1		5a		phy				phy
.a2a2		8a		txa				txa 								; copy X into Y
.a2a3		a8		tay				tay
.a2a4		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a2a7		aa		tax				tax
.a2a8		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a2ab		20 b8 a2	jsr $a2b8			jsr 	AllocateXABytes 			; allocate memory
.a2ae		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a2b1		8a		txa				txa 	 							; typing is 16 bit integer.
.a2b2		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a2b5		7a		ply				ply
.a2b6		fa		plx				plx
.a2b7		60		rts				rts
.a2b8						AllocateXABytes:
.a2b8		5a		phy				phy
.a2b9		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a2bc		84 36		sty $36				sty 	zTemp0
.a2be		5a		phy				phy
.a2bf		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a2c2		84 37		sty $37				sty 	zTemp0+1
.a2c4		5a		phy				phy
.a2c5		18		clc				clc 								; add to low memory pointer
.a2c6		6d 08 04	adc $0408			adc 	lowMemPtr
.a2c9		8d 08 04	sta $0408			sta 	lowMemPtr
.a2cc		8a		txa				txa
.a2cd		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a2d0		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a2d3		b0 2f		bcs $a304			bcs 	CISSMemory
.a2d5		20 f6 a2	jsr $a2f6			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a2d8						_ClearMemory:
.a2d8		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a2db		c5 36		cmp $36				cmp 	zTemp0
.a2dd		d0 07		bne $a2e6			bne 	_CMClearNext
.a2df		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a2e2		c5 37		cmp $37				cmp 	zTemp0+1
.a2e4		f0 0c		beq $a2f2			beq 	_CMExit
.a2e6						_CMClearNext:
.a2e6		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a2e8		92 36		sta ($36)			sta 	(zTemp0)
.a2ea		e6 36		inc $36				inc 	zTemp0
.a2ec		d0 ea		bne $a2d8			bne 	_ClearMemory
.a2ee		e6 37		inc $37				inc		zTemp0+1
.a2f0		80 e6		bra $a2d8			bra 	_ClearMemory
.a2f2						_CMExit:
.a2f2		fa		plx				plx
.a2f3		68		pla				pla
.a2f4		7a		ply				ply
.a2f5		60		rts				rts
.a2f6						CheckIdentifierStringSpace:
.a2f6		48		pha				pha
.a2f7		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a2fa		18		clc				clc
.a2fb		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a2fd		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a300		b0 02		bcs $a304			bcs 	CISSMemory
.a302		68		pla				pla
.a303		60		rts				rts
.a304						CISSMemory:
.a304		a9 06		lda #$06		lda	#6
.a306		4c bc 97	jmp $97bc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a309						AscUnary:
.a309		fa		plx				plx 								; restore stack pos
.a30a		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; get a string
.a30d		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a30f		20 18 a7	jsr $a718			jsr 	NSMSetByte 					; ASC("") will return zero.
.a312		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a315		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a316						FracUnary:
.a316		fa		plx				plx 								; restore stack pos
.a317		20 64 a6	jsr $a664			jsr 	EvaluateNumber 				; get a float or int
.a31a		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a31d		b5 50		lda $50,x			lda 	NSStatus,x
.a31f		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a321		f0 04		beq $a327			beq 	_IUZero
.a323		20 d1 9d	jsr $9dd1			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a326		60		rts				rts
.a327						_IUZero:
.a327		20 16 a7	jsr $a716			jsr 	NSMSetZero
.a32a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a32b						IntUnary:
.a32b		fa		plx				plx 								; restore stack pos
.a32c		20 64 a6	jsr $a664			jsr 	EvaluateNumber 				; get a float or int
.a32f		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a332		b5 50		lda $50,x			lda 	NSStatus,x
.a334		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a336		f0 03		beq $a33b			beq 	_IUExit
.a338		20 29 9e	jsr $9e29			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a33b						_IUExit:
.a33b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a33c						LenUnary:
.a33c		fa		plx				plx 								; restore stack pos
.a33d		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; get a string
.a340		5a		phy				phy
.a341		a0 00		ldy #$00			ldy 	#0 							; find length
.a343						_LenFind:
.a343		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a345		f0 06		beq $a34d			beq 	_LenExit
.a347		c8		iny				iny
.a348		d0 f9		bne $a343			bne 	_LenFind
.a34a		4c ee b1	jmp $b1ee			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a34d						_LenExit:
.a34d		98		tya				tya		 							; return length
.a34e		20 18 a7	jsr $a718			jsr 	NSMSetByte
.a351		7a		ply				ply
.a352		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a355		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a356						Unary_Min:
.a356		a9 01		lda #$01			lda 	#1
.a358		80 02		bra $a35c			bra 	UnaryMinMaxMain
.a35a						Unary_Max:
.a35a		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a35c						UnaryMinMaxMain:
.a35c		fa		plx				plx 								; get index on number stack
.a35d		48		pha				pha 								; save comparator
.a35e		20 5b a6	jsr $a65b			jsr 	EvaluateValue 				; get the first value.
.a361						_UMMMLoop:
.a361		b1 30		lda ($30),y			lda 	(codePtr),y
.a363		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a365		f0 22		beq $a389			beq 	_UMMMDone
.a367		20 ab 97	jsr $97ab			jsr 	CheckComma 					; must be a comma
.a36a		e8		inx				inx
.a36b		20 5b a6	jsr $a65b			jsr 	EvaluateValue
.a36e		ca		dex				dex
.a36f		20 f9 a6	jsr $a6f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a372		e8		inx				inx
.a373		20 f9 a6	jsr $a6f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a376		e8		inx				inx
.a377		20 73 98	jsr $9873			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a37a		ca		dex				dex
.a37b		ca		dex				dex
.a37c		85 36		sta $36				sta 	zTemp0 						; save required result
.a37e		68		pla				pla 								; get and save comparator
.a37f		48		pha				pha
.a380		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a382		d0 dd		bne $a361			bne 	_UMMMLoop
.a384		20 8c a3	jsr $a38c			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a387		80 d8		bra $a361			bra 	_UMMMLoop
.a389						_UMMMDone:
.a389		68		pla				pla 								; throw the comparator
.a38a		c8		iny				iny 								; skip )
.a38b		60		rts				rts
.a38c						ExpCopyAboveDown:
.a38c		b5 51		lda $51,x			lda 	NSStatus+1,x
.a38e		95 50		sta $50,x			sta 	NSStatus,x
.a390		b5 79		lda $79,x			lda 	NSExponent+1,x
.a392		95 78		sta $78,x			sta 	NSExponent,x
.a394		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a396		95 58		sta $58,x			sta 	NSMantissa0,x
.a398		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a39a		95 60		sta $60,x			sta 	NSMantissa1,x
.a39c		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a39e		95 68		sta $68,x			sta 	NSMantissa2,x
.a3a0		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a3a2		95 70		sta $70,x			sta 	NSMantissa3,x
.a3a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a3a5						Unary_Not:
.a3a5		fa		plx				plx
.a3a6		20 83 a6	jsr $a683			jsr 	EvaluateInteger 			; get integer
.a3a9		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a3ac		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; zero mantissa ?
.a3af		f0 04		beq $a3b5			beq 	_NotZero
.a3b1		20 16 a7	jsr $a716			jsr 	NSMSetZero
.a3b4		60		rts				rts
.a3b5						_NotZero:
.a3b5		4c 29 98	jmp $9829			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a3b8						PeekByteUnary:
.a3b8		a9 01		lda #$01			lda 	#1
.a3ba		80 0a		bra $a3c6			bra 	PeekUnary
.a3bc						PeekWUnary:
.a3bc		a9 02		lda #$02			lda 	#2
.a3be		80 06		bra $a3c6			bra 	PeekUnary
.a3c0						PeekLUnary:
.a3c0		a9 03		lda #$03			lda 	#3
.a3c2		80 02		bra $a3c6			bra 	PeekUnary
.a3c4						PeekDUnary:
.a3c4		a9 04		lda #$04			lda 	#4
.a3c6						PeekUnary:
.a3c6		fa		plx				plx 								; restore position.
.a3c7		48		pha				pha 								; save count to copy on stack
.a3c8		20 96 a6	jsr $a696			jsr		Evaluate16BitInteger 		; address as constant.
.a3cb		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a3ce		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a3d0		85 36		sta $36				sta 	zTemp0
.a3d2		b5 60		lda $60,x			lda 	NSMantissa1,x
.a3d4		85 37		sta $37				sta 	zTemp0+1
.a3d6		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; clear the result to zero.
.a3d9		68		pla				pla 								; count in zTemp2
.a3da		85 3a		sta $3a				sta 	zTemp2
.a3dc		da		phx				phx 								; save stack position and offset of read
.a3dd		5a		phy				phy
.a3de		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a3e0						_PULoop:
.a3e0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a3e2		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a3e4		c8		iny				iny 								; next byte to write
.a3e5		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a3e6		18		clc				clc
.a3e7		69 08		adc #$08			adc 	#MathStackSize
.a3e9		aa		tax				tax
.a3ea		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a3ec		d0 f2		bne $a3e0			bne 	_PULoop
.a3ee		7a		ply				ply 								; restore stack/code pos and exit.
.a3ef		fa		plx				plx
.a3f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a3f1						SgnUnary:
.a3f1		fa		plx				plx 								; restore stack pos
.a3f2		20 64 a6	jsr $a664			jsr 	EvaluateNumber 				; get a float or int
.a3f5		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a3f8		20 38 a7	jsr $a738			jsr 	NSMIsZero 					; if zero
.a3fb		f0 0e		beq $a40b			beq 	_SGZero  					; return Int Zero
.a3fd		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a3ff		48		pha				pha
.a400		a9 01		lda #$01			lda 	#1 							; set to 1
.a402		20 18 a7	jsr $a718			jsr 	NSMSetByte
.a405		68		pla				pla
.a406		29 80		and #$80			and		#$80 						; copy the sign byte out
.a408		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a40a		60		rts				rts
.a40b		20 16 a7	jsr $a716	_SGZero:jsr 	NSMSetZero
.a40e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a40f						ValUnary:
.a40f		fa		plx				plx 								; restore stack pos
.a410		20 25 a4	jsr $a425			jsr 	ValMainCode 				; do the main val() code
.a413		b0 01		bcs $a416			bcs 	_VUError 					; couldn't convert
.a415		60		rts				rts
.a416						_VUError:
.a416		4c f3 b1	jmp $b1f3			jmp 	TypeError
.a419						IsValUnary:
.a419		fa		plx				plx 								; restore stack pos
.a41a		20 25 a4	jsr $a425			jsr 	ValMainCode 				; do the main val() code
.a41d		b0 03		bcs $a422			bcs 	_VUBad
.a41f		4c 29 98	jmp $9829			jmp 	ReturnTrue
.a422						_VUBad:
.a422		4c 34 98	jmp $9834			jmp 	ReturnFalse
.a425						ValMainCode:
.a425		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; get a string
.a428		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; check right bracket present
.a42b						ValEvaluateZTemp0:
.a42b		5a		phy				phy
.a42c		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a42e		f0 17		beq $a447			beq 	_VMCFail2
.a430		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a432		48		pha				pha 								; save first character
.a433		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a435		d0 01		bne $a438			bne 	_VMCStart
.a437		c8		iny				iny 								; skip over -
.a438						_VMCStart:
.a438		38		sec				sec 								; initialise first time round.
.a439						_VMCNext:
.a439		c8		iny				iny 								; pre-increment
.a43a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a43c		f0 0c		beq $a44a			beq 	_VMCSuccess 				; successful.
.a43e		20 06 a0	jsr $a006			jsr 	EncodeNumber 				; send it to the number-builder
.a441		90 03		bcc $a446			bcc 	_VMCFail 					; if failed, give up.
.a443		18		clc				clc 								; next time round, countinue
.a444		80 f3		bra $a439			bra 	_VMCNext
.a446						_VMCFail:
.a446		68		pla				pla
.a447						_VMCFail2:
.a447		7a		ply				ply
.a448		38		sec				sec
.a449		60		rts				rts
.a44a						_VMCSuccess:
.a44a		a9 00		lda #$00			lda 	#0 							; construct final
.a44c		20 06 a0	jsr $a006			jsr 	EncodeNumber 				; by sending a duff value.
.a44f		68		pla				pla 								; if it was -ve
.a450		c9 2d		cmp #$2d			cmp 	#"-"
.a452		d0 03		bne $a457			bne 	_VMCNotNegative
.a454		20 d8 a6	jsr $a6d8			jsr		NSMNegate 					; negate it.
.a457						_VMCNotNegative:
.a457		7a		ply				ply
.a458		18		clc				clc
.a459		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a45a						ChrUnary:
.a45a		fa		plx				plx 								; restore stack pos
.a45b		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a45e		48		pha				pha
.a45f		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a462		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a464		20 53 b9	jsr $b953			jsr 	StringTempAllocate
.a467		68		pla				pla 								; write number to it
.a468		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.a46b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a46c						ItemCountUnary:
.a46c		fa		plx				plx
.a46d		20 6e a6	jsr $a66e			jsr 	EvaluateString
.a470		e8		inx				inx
.a471		20 e4 a4	jsr $a4e4			jsr 	ICGetSeperator
.a474		ca		dex				dex
.a475		20 05 a5	jsr $a505			jsr 	ICSetPointer 				; zTemp0 = (string)
.a478		20 16 a7	jsr $a716			jsr 	NSMSetZero 					; zero the result.
.a47b		5a		phy				phy
.a47c		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a47e						_ICULoop:
.a47e		c8		iny				iny
.a47f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a481		cd 95 07	cmp $0795			cmp 	ICSeperator
.a484		d0 02		bne $a488			bne 	_ICUNoMatch
.a486		f6 58		inc $58,x			inc 	NSMantissa0,x
.a488						_ICUNoMatch:
.a488		c9 00		cmp #$00			cmp 	#0
.a48a		d0 f2		bne $a47e			bne 	_ICULoop
.a48c		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a48e		7a		ply				ply
.a48f		60		rts				rts
.a490						ItemGetUnary:
.a490		fa		plx				plx
.a491		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; search string
.a494		20 ab 97	jsr $97ab			jsr 	CheckComma
.a497		e8		inx				inx 								; get count
.a498		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.a49b		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a49d		f0 61		beq $a500			beq 	ICGSRange
.a49f		e8		inx				inx 								; get seperator.
.a4a0		20 e4 a4	jsr $a4e4			jsr 	ICGetSeperator
.a4a3		ca		dex				dex
.a4a4		ca		dex				dex
.a4a5		5a		phy				phy
.a4a6		20 05 a5	jsr $a505			jsr 	ICSetPointer 				; zTemp0 points to string.
.a4a9		a0 00		ldy #$00			ldy 	#0
.a4ab		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a4ad		f0 0e		beq $a4bd			beq 	_IGUFoundStart
.a4af						_IGUFindNext:
.a4af		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a4b1		f0 4d		beq $a500			beq 	ICGSRange 					; eol, not found.
.a4b3		c8		iny				iny
.a4b4		cd 95 07	cmp $0795			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a4b7		d0 f6		bne $a4af			bne 	_IGUFindNext
.a4b9		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a4bb		d0 f2		bne $a4af			bne 	_IGUFindNext
.a4bd						_IGUFoundStart:
.a4bd		84 38		sty $38				sty 	zTemp1 						; save start
.a4bf		88		dey				dey
.a4c0						_IGUFindLength:
.a4c0		c8		iny				iny 								; forward till seperator/EOS
.a4c1		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4c3		f0 05		beq $a4ca			beq 	_IGUFoundLength
.a4c5		cd 95 07	cmp $0795			cmp 	ICSeperator
.a4c8		d0 f6		bne $a4c0			bne 	_IGUFindLength
.a4ca						_IGUFoundLength:
.a4ca		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a4cc		98		tya				tya 								; calculate length of new string.
.a4cd		38		sec				sec
.a4ce		e5 38		sbc $38				sbc 	zTemp1
.a4d0		20 53 b9	jsr $b953			jsr 	StringTempAllocate 			; allocate bytes for it.
.a4d3		a4 38		ldy $38				ldy 	zTemp1
.a4d5						_IGUCopySub:
.a4d5		c4 39		cpy $39				cpy 	zTemp1+1
.a4d7		f0 08		beq $a4e1			beq 	_IGUCopyOver
.a4d9		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4db		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.a4de		c8		iny				iny
.a4df		80 f4		bra $a4d5			bra 	_IGUCopySub
.a4e1						_IGUCopyOver:
.a4e1		7a		ply				ply
.a4e2		60		rts				rts
>a4e3		db						.byte 	$DB 						; causes a break in the emulator
.a4e4						ICGetSeperator:
.a4e4		20 ab 97	jsr $97ab			jsr 	CheckComma 					; preceding comma
.a4e7		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; seperator string
.a4ea		20 05 a5	jsr $a505			jsr 	ICSetPointer 				; access it
.a4ed		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a4ef		8d 95 07	sta $0795			sta 	ICSeperator
.a4f2		f0 0c		beq $a500			beq 	ICGSRange 					; check LEN(seperator) = 1
.a4f4		5a		phy				phy
.a4f5		a0 01		ldy #$01			ldy 	#1
.a4f7		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4f9		d0 05		bne $a500			bne 	ICGSRange
.a4fb		7a		ply				ply
.a4fc		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; check following )
.a4ff		60		rts				rts
.a500						ICGSRange:
.a500		a9 04		lda #$04		lda	#4
.a502		4c bc 97	jmp $97bc		jmp	ErrorHandler
.a505						ICSetPointer:
.a505		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a507		85 36		sta $36				sta 	zTemp0
.a509		b5 60		lda $60,x			lda 	NSMantissa1,x
.a50b		85 37		sta $37				sta 	zTemp0+1
.a50d		60		rts				rts
.0795						ICSeperator:
>0795								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a50e						SpcUnary:
.a50e		fa		plx				plx 								; restore stack pos
.a50f		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger			; get value
.a512		5a		phy				phy
.a513		48		pha				pha 								; save count
.a514		20 53 b9	jsr $b953			jsr 	StringTempAllocate
.a517		7a		ply				ply 								; to do count in Y
.a518						_SpcLoop:
.a518		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a51a		f0 08		beq $a524			beq 	_SpcExit
.a51c		a9 20		lda #$20			lda 	#32
.a51e		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.a521		88		dey				dey
.a522		80 f4		bra $a518			bra 	_SpcLoop
.a524						_SpcExit:
.a524		7a		ply				ply
.a525		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.a528		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a529						Unary_Str:
.a529		fa		plx				plx
.a52a		20 64 a6	jsr $a664			jsr 	EvaluateNumber  			; get number
.a52d		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; closing bracket
.a530		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a532		20 4b a5	jsr $a54b			jsr 	ConvertNumberToString 		; do the conversion.
.a535		a9 21		lda #$21			lda		#33 						; create buffer
.a537		20 53 b9	jsr $b953			jsr 	StringTempAllocate 			; allocate memory
.a53a		da		phx				phx  								; copy the converted string into the buffer.
.a53b		a2 00		ldx #$00			ldx 	#0
.a53d						_USCopy:
.a53d		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a540		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.a543		e8		inx				inx
.a544		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a547		d0 f4		bne $a53d			bne 	_USCopy
.a549		fa		plx				plx
.a54a		60		rts				rts
.a54b						ConvertNumberToString:
.a54b		5a		phy				phy 								; save code position
.a54c		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a54f		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a552		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a554		10 09		bpl $a55f			bpl 	_CNTSNotNegative
.a556		29 7f		and #$7f			and 	#$7F 						; make +ve
.a558		95 50		sta $50,x			sta 	NSStatus,x
.a55a		a9 2d		lda #$2d			lda 	#"-"
.a55c		20 c0 a5	jsr $a5c0			jsr 	WriteDecimalBuffer
.a55f						_CNTSNotNegative:
.a55f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a561		f0 12		beq $a575			beq 	_CNTSNotFloat
.a563		e8		inx				inx 								; round up so we don't get too many 6.999999
.a564		a9 01		lda #$01			lda 	#1
.a566		20 18 a7	jsr $a718			jsr 	NSMSetByte
.a569		ca		dex				dex
.a56a		b5 78		lda $78,x			lda		NSExponent,x
.a56c		95 79		sta $79,x			sta 	NSExponent+1,x
.a56e		a9 08		lda #$08			lda 	#NSTFloat
.a570		95 51		sta $51,x			sta 	NSStatus+1,x
.a572		20 0b 9d	jsr $9d0b			jsr 	FloatAdd
.a575						_CNTSNotFloat:
.a575		20 a2 a5	jsr $a5a2			jsr 	MakePlusTwoString 			; do the integer part.
.a578		20 d1 9d	jsr $9dd1			jsr 	FloatFractionalPart 		; get the fractional part
.a57b		20 82 9e	jsr $9e82			jsr 	NSNormalise					; normalise , exit if zero
.a57e		f0 20		beq $a5a0			beq 	_CNTSExit
.a580		a9 2e		lda #$2e			lda 	#"."
.a582		20 c0 a5	jsr $a5c0			jsr 	WriteDecimalBuffer 			; write decimal place
.a585						_CNTSDecimal:
.a585		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a588		30 16		bmi $a5a0			bmi 	_CNTSExit
.a58a		e8		inx				inx 								; x 10.0
.a58b		a9 0a		lda #$0a			lda 	#10
.a58d		20 18 a7	jsr $a718			jsr 	NSMSetByte
.a590		a9 08		lda #$08			lda 	#NSTFloat
.a592		95 50		sta $50,x			sta 	NSStatus,x
.a594		ca		dex				dex
.a595		20 50 9e	jsr $9e50			jsr 	FloatMultiply
.a598		20 a2 a5	jsr $a5a2			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a59b		20 d1 9d	jsr $9dd1			jsr 	FloatFractionalPart 		; get the fractional part
.a59e		80 e5		bra $a585			bra 	_CNTSDecimal 				; keep going.
.a5a0						_CNTSExit:
.a5a0		7a		ply				ply
.a5a1		60		rts				rts
.a5a2						MakePlusTwoString:
.a5a2		da		phx				phx
.a5a3		20 f9 a6	jsr $a6f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a5a6		e8		inx				inx 								; access it
.a5a7		e8		inx				inx
.a5a8		20 29 9e	jsr $9e29			jsr 	FloatIntegerPart 			; make it an integer
.a5ab		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a5ad		20 3b 9c	jsr $9c3b			jsr 	ConvertInt32
.a5b0		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a5b2						_MPTSCopy:
.a5b2		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5b5		20 c0 a5	jsr $a5c0			jsr 	WriteDecimalBuffer
.a5b8		e8		inx				inx
.a5b9		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5bc		d0 f4		bne $a5b2			bne 	_MPTSCopy
.a5be		fa		plx				plx
.a5bf		60		rts				rts
.a5c0						WriteDecimalBuffer:
.a5c0		da		phx				phx
.a5c1		ae 11 04	ldx $0411			ldx 	dbOffset
.a5c4		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a5c7		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a5ca		ee 11 04	inc $0411			inc 	dbOffset
.a5cd		fa		plx				plx
.a5ce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5cf						Unary_Left:
.a5cf		fa		plx				plx
.a5d0		18		clc				clc 								; only one parameter
.a5d1		20 34 a6	jsr $a634			jsr 	SubstringInitial 			; set up.
.a5d4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5d6		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5d8		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5da		80 25		bra $a601			bra 	SubstringMain
.a5dc						Unary_Right:
.a5dc		fa		plx				plx
.a5dd		18		clc				clc 								; only one parameter
.a5de		20 34 a6	jsr $a634			jsr 	SubstringInitial 			; set up.
.a5e1		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5e3		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a5e5		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a5e7		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5e9		b0 02		bcs $a5ed			bcs 	_URNotUnderflow
.a5eb		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5ed						_URNotUnderflow:
.a5ed		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5ef		80 10		bra $a601			bra 	SubstringMain
.a5f1						Unary_Mid:
.a5f1		fa		plx				plx
.a5f2		38		sec				sec 								; two parameters
.a5f3		20 34 a6	jsr $a634			jsr 	SubstringInitial 			; set up.
.a5f6		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5f8		f0 04		beq $a5fe			beq 	_UMError
.a5fa		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5fc		80 03		bra $a601			bra 	SubstringMain
.a5fe						_UMError:
.a5fe		4c f8 b1	jmp $b1f8			jmp 	ArgumentError
.a601						SubstringMain:
.a601		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a603		d5 78		cmp $78,x			cmp 	NSExponent,x
.a605		b0 27		bcs $a62e			bcs 	_SSMNull 					; if so, return an empty string.
.a607		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a609		f0 23		beq $a62e			beq 	_SSMNull 					; return empty string.
.a60b		18		clc				clc 								; add the offset +1 to the address and
.a60c		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a60e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a610		85 36		sta $36				sta 	zTemp0
.a612		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a614		69 00		adc #$00			adc 	#0
.a616		85 37		sta $37				sta 	zTemp0+1
.a618						_SSMNoCarry:
.a618		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a61a		20 53 b9	jsr $b953			jsr 	StringTempAllocate 			; allocate that many characters
.a61d		5a		phy				phy 								; save Y
.a61e		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a620						_SSMCopy:
.a620		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a622		f0 08		beq $a62c			beq 	_SSMEString 				; no more to copy
.a624		20 8c b9	jsr $b98c			jsr 	StringTempWrite 			; and write it out.
.a627		c8		iny				iny
.a628		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a62a		d0 f4		bne $a620			bne 	_SSMCopy
.a62c						_SSMEString:
.a62c		7a		ply				ply
.a62d						_SSMExit:
.a62d		60		rts				rts
.a62e						_SSMNull:
.a62e		a9 00		lda #$00			lda 	#0
.a630		20 53 b9	jsr $b953			jsr 	StringTempAllocate
.a633		60		rts				rts
.a634						SubstringInitial:
.a634		da		phx				phx 								; save initial stack position
.a635		08		php				php 								; save carry on stack indicating 2 parameters
.a636		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; get a string
.a639		5a		phy				phy 								; calculate length to exponent.
.a63a		a0 ff		ldy #$ff			ldy 	#$FF
.a63c						_SIFindLength:
.a63c		c8		iny				iny
.a63d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a63f		d0 fb		bne $a63c			bne 	_SIFindLength
.a641		98		tya				tya
.a642		95 78		sta $78,x			sta 	NSExponent,x
.a644		7a		ply				ply
.a645		e8		inx				inx
.a646		20 ab 97	jsr $97ab			jsr 	CheckComma 					; comma next
.a649		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get next parameter
.a64c		28		plp				plp 								; is it the last parameter ?
.a64d		90 07		bcc $a656			bcc 	_SSIExit 					; if so, exit.
.a64f		e8		inx				inx
.a650		20 ab 97	jsr $97ab			jsr 	CheckComma 					; comma next
.a653		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get last parameter
.a656						_SSIExit:
.a656		fa		plx				plx
.a657		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; check closing bracket
.a65a		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a65b						EvaluateValue:
.a65b		48		pha				pha
.a65c		20 c0 9c	jsr $9cc0			jsr		EvaluateExpression 			; expression
.a65f		20 83 9f	jsr $9f83			jsr 	Dereference					; derefernce it
.a662		68		pla				pla
.a663		60		rts				rts
.a664						EvaluateNumber:
.a664		20 5b a6	jsr $a65b			jsr 	EvaluateValue 				; get a value
.a667		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a669		29 10		and #$10			and 	#NSBIsString
.a66b		d0 13		bne $a680			bne 	HelperTypeError
.a66d		60		rts				rts
.a66e						EvaluateString:
.a66e		20 5b a6	jsr $a65b			jsr 	EvaluateValue 				; get a value
.a671		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a673		29 10		and #$10			and 	#NSBIsString
.a675		f0 09		beq $a680			beq 	HelperTypeError
.a677						CopyAddressToTemp0:
.a677		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a679		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a67b		b5 60		lda $60,x			lda 	NSMantissa1,x
.a67d		85 37		sta $37				sta 	zTemp0+1
.a67f		60		rts				rts
.a680						HelperTypeError:
.a680		4c f3 b1	jmp $b1f3			jmp 	TypeError
.a683						EvaluateInteger:
.a683		20 64 a6	jsr $a664			jsr 	EvaluateNumber
.a686		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a688		d0 09		bne $a693			bne 	HelperValueError 			; if not, it's a float.
.a68a		60		rts				rts
.a68b						EvaluateUnsignedInteger:
.a68b		20 83 a6	jsr $a683			jsr 	EvaluateInteger 			; check integer is +ve
.a68e		b5 50		lda $50,x			lda 	NSStatus,x
.a690		30 01		bmi $a693			bmi 	HelperValueError
.a692		60		rts				rts
.a693						HelperValueError:
.a693		4c f8 b1	jmp $b1f8			jmp 	ArgumentError
.a696						Evaluate16BitInteger:
.a696		20 8b a6	jsr $a68b			jsr	 	EvaluateUnsignedInteger		; get integer
.a699		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a69b		15 68		ora $68,x			ora 	NSMantissa2,x
.a69d		d0 f4		bne $a693			bne 	HelperValueError
.a69f		60		rts				rts
.a6a0						Evaluate16BitIntegerSigned:
.a6a0		20 83 a6	jsr $a683			jsr	 	EvaluateInteger				; get integer
.a6a3		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6a5		15 68		ora $68,x			ora 	NSMantissa2,x
.a6a7		d0 ea		bne $a693			bne 	HelperValueError
.a6a9		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a6ab		10 03		bpl $a6b0			bpl 	_EISNotSigned
.a6ad		20 df a6	jsr $a6df			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a6b0						_EISNotSigned:
.a6b0		60		rts				rts
.a6b1						Evaluate8BitInteger:
.a6b1		20 8b a6	jsr $a68b			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6b4		d0 dd		bne $a693			bne 	HelperValueError
.a6b6		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6b8		15 68		ora $68,x			ora 	NSMantissa2,x
.a6ba		15 60		ora $60,x			ora 	NSMantissa1,x
.a6bc		d0 d5		bne $a693			bne 	HelperValueError
.a6be		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6c0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a6c1						Multiply8x8:
.a6c1		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a6c2		85 36		sta $36			  	sta 	zTemp0
.a6c4		86 37		stx $37				stx 	zTemp0+1
.a6c6		a9 00		lda #$00			lda 	#0
.a6c8		a2 08		ldx #$08			ldx 	#8
.a6ca						_M88Loop:
.a6ca		90 03		bcc $a6cf			bcc 	_M88NoAdd
.a6cc		18		clc				clc
.a6cd		65 37		adc $37				adc 	zTemp0+1
.a6cf						_M88NoAdd:
.a6cf		6a		ror a				ror 	a
.a6d0		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a6d2		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a6d3		d0 f5		bne $a6ca			bne 	_M88Loop
.a6d5		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a6d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6d8						NSMNegate:
.a6d8		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a6da		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a6dc		95 50		sta $50,x			sta 	NSStatus,x
.a6de		60		rts				rts
.a6df						NSMNegateMantissa:
.a6df		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a6e0		a9 00		lda #$00			lda 	#0
.a6e2		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a6e4		95 58		sta $58,x			sta 	NSMantissa0,x
.a6e6		a9 00		lda #$00			lda 	#0
.a6e8		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a6ea		95 60		sta $60,x			sta 	NSMantissa1,x
.a6ec		a9 00		lda #$00			lda 	#0
.a6ee		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a6f0		95 68		sta $68,x			sta 	NSMantissa2,x
.a6f2		a9 00		lda #$00			lda 	#0
.a6f4		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a6f6		95 70		sta $70,x			sta 	NSMantissa3,x
.a6f8		60		rts				rts
.a6f9						NSMShiftUpTwo:
.a6f9		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6fb		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a6fd		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6ff		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a701		b5 68		lda $68,x			lda 	NSMantissa2,x
.a703		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a705		b5 70		lda $70,x			lda 	NSMantissa3,x
.a707		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a709		b5 78		lda $78,x			lda 	NSExponent,x
.a70b		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a70d		b5 50		lda $50,x			lda 	NSStatus,x
.a70f		95 52		sta $52,x			sta 	NSStatus+2,x
.a711		60		rts				rts
.a712						NSMSetZeroMantissaOnly:
.a712		a9 00		lda #$00			lda 	#0
.a714		80 06		bra $a71c			bra 	NSMSetMantissa
.a716						NSMSetZero:
.a716		a9 00		lda #$00			lda 	#0
.a718						NSMSetByte:
.a718		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a71a		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a71c						NSMSetMantissa:
.a71c		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a71e		74 60		stz $60,x			stz 	NSMantissa1,x
.a720		74 68		stz $68,x			stz 	NSMantissa2,x
.a722		74 70		stz $70,x			stz 	NSMantissa3,x
.a724		60		rts				rts
.a725						NSMShiftLeft:
.a725		18		clc				clc
.a726						NSMRotateLeft:
.a726		36 58		rol $58,x			rol 	NSMantissa0,x
.a728		36 60		rol $60,x			rol		NSMantissa1,x
.a72a		36 68		rol $68,x			rol		NSMantissa2,x
.a72c		36 70		rol $70,x			rol		NSMantissa3,x
.a72e		60		rts				rts
.a72f						NSMShiftRight:
.a72f		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a731		76 68		ror $68,x			ror		NSMantissa2,x
.a733		76 60		ror $60,x			ror		NSMantissa1,x
.a735		76 58		ror $58,x			ror		NSMantissa0,x
.a737		60		rts				rts
.a738						NSMIsZero:
.a738		b5 70		lda $70,x			lda 	NSMantissa3,x
.a73a		15 68		ora $68,x			ora		NSMantissa2,x
.a73c		15 60		ora $60,x			ora		NSMantissa1,x
.a73e		15 58		ora $58,x			ora		NSMantissa0,x
.a740		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/font_update/newfont.asm

.a741						UpdateFont:
.a741		a5 01		lda $01				lda 	1 							; save position
.a743		48		pha				pha
.a744		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a746		85 01		sta $01				sta 	1
.a748		a9 6f		lda #$6f			lda 	#((FontBinary) & $FF)
.a74a		85 36		sta $36				sta 	0+zTemp0
.a74c		a9 a7		lda #$a7			lda 	#((FontBinary) >> 8)
.a74e		85 37		sta $37				sta 	1+zTemp0
.a750		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a752		85 38		sta $38				sta 	0+zTemp1
.a754		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a756		85 39		sta $39				sta 	1+zTemp1
.a758						_UFCopy1:
.a758		a0 00		ldy #$00			ldy 	#0
.a75a						_UFCopy2:
.a75a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a75c		91 38		sta ($38),y			sta 	(zTemp1),y
.a75e		c8		iny				iny
.a75f		d0 f9		bne $a75a			bne 	_UFCopy2
.a761		e6 37		inc $37				inc 	zTemp0+1
.a763		e6 39		inc $39				inc 	zTemp1+1
.a765		a5 39		lda $39				lda 	zTemp1+1
.a767		c9 c8		cmp #$c8			cmp 	#$C8
.a769		d0 ed		bne $a758			bne 	_UFCopy1
.a76b		68		pla				pla 								; restore.
.a76c		85 01		sta $01				sta 	1
.a76e		60		rts				rts
.a76f						FontBinary:
>a76f		06 09 10 3c 10 21 7e 00				.binary 	"../../common/generated/font.bin"
>a777		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a787		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a797		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a7a7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a7b7		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a7c7		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a7d7		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a7e7		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a7f7		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a807		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a817		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a827		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a837		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a847		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a857		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a867		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a877		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a887		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a897		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a8a7		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a8b7		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a8c7		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a8d7		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a8e7		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a8f7		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a907		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a917		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a927		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a937		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a947		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a957		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a967		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a977		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a987		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>a997		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a9a7		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a9b7		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a9c7		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a9d7		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a9e7		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a9f7		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>aa07		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>aa17		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>aa27		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>aa37		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>aa47		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>aa57		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>aa67		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aa77		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aa87		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>aa97		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aaa7		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aab7		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aac7		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>aad7		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>aae7		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>aaf7		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ab07		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ab17		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>ab27		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ab37		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ab47		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ab57		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>ab67		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ab77		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ab87		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ab97		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>aba7		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>abb7		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>abc7		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>abd7		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>abe7		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>abf7		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ac07		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ac17		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ac27		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ac37		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ac47		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ac57		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ac67		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ac77		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ac87		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ac97		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>aca7		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>acb7		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>acc7		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>acd7		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ace7		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>acf7		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ad07		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>ad17		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>ad27		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>ad37		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>ad47		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>ad57		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>ad67		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>ad77		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ad87		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ad97		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ada7		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>adb7		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>adc7		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>add7		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>ade7		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>adf7		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ae07		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>ae17		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ae27		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>ae37		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>ae47		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>ae57		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>ae67		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>ae77		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>ae87		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>ae97		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>aea7		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>aeb7		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>aec7		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>aed7		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>aee7		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>aef7		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>af07		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>af17		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>af27		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>af37		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>af47		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>af57		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>af67		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.af6f						UnaryGetTime:
.af6f		a9 00		lda #$00			lda 	#0
.af71		80 02		bra $af75			bra 	UGDTMain
.af73						UnaryGetDate:
.af73		a9 03		lda #$03			lda 	#3
.af75						UGDTMain:
.af75		fa		plx				plx 								; get stack position back
.af76		48		pha				pha 								; save table offset
.af77		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger			; ignored parameter
.af7a		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; closing )
.af7d		68		pla				pla 								; table offset in A
.af7e		5a		phy				phy 								; saving Y
.af7f		a8		tay				tay 								; table offset in Y
.af80		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.af82		20 53 b9	jsr $b953			jsr 	StringTempAllocate
.af85		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.af87		48		pha				pha
.af88		64 01		stz $01				stz 	1
.af8a		20 9d af	jsr $af9d			jsr 	UGDTDigit 					; do XX:YY:ZZ
.af8d		20 98 af	jsr $af98			jsr 	UGDTColonDigit
.af90		20 98 af	jsr $af98			jsr 	UGDTColonDigit
.af93		68		pla				pla 								; restore I/O select
.af94		85 01		sta $01				sta 	1
.af96		7a		ply				ply  								; restore code position
.af97		60		rts				rts
.af98						UGDTColonDigit:
.af98		a9 3a		lda #$3a			lda 	#':'
.af9a		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.af9d						UGDTDigit:
.af9d		da		phx				phx 								; save X
.af9e		b9 bd af	lda $afbd,y			lda 	RTCROffset,y 				; get offset in RTC register
.afa1		aa		tax				tax
.afa2		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.afa5		39 c3 af	and $afc3,y			and 	RTCRMask,y 					; and with Mask.
.afa8		fa		plx				plx
.afa9		48		pha				pha 								; output in BCD
.afaa		4a		lsr a				lsr 	a
.afab		4a		lsr a				lsr 	a
.afac		4a		lsr a				lsr 	a
.afad		4a		lsr a				lsr 	a
.afae		09 30		ora #$30			ora 	#48
.afb0		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.afb3		68		pla				pla
.afb4		29 0f		and #$0f			and 	#15
.afb6		09 30		ora #$30			ora 	#48
.afb8		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.afbb		c8		iny				iny
.afbc		60		rts				rts
.afbd						RTCROffset:
>afbd		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.afc3						RTCRMask:
>afc3		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.afc9						AscGet:
.afc9		fa		plx				plx 								; restore stack pos
.afca						AscGet2:
.afca		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.afcd		20 37 81	jsr $8137	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.afd0		d0 0b		bne $afdd			bne 	_AGBreak
.afd2		20 69 81	jsr $8169			jsr 	PopKeyboardQueue 			; wait for key.
.afd5		c9 00		cmp #$00			cmp 	#0
.afd7		f0 f4		beq $afcd			beq 	_AGKey
.afd9		20 18 a7	jsr $a718			jsr 	NSMSetByte
.afdc		60		rts				rts
.afdd						_AGBreak:
.afdd		a9 01		lda #$01		lda	#1
.afdf		4c bc 97	jmp $97bc		jmp	ErrorHandler
.afe2						AscInkey:
.afe2		fa		plx				plx 								; restore stack pos
.afe3						AscInkey2:
.afe3		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.afe6		20 69 81	jsr $8169			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.afe9		20 18 a7	jsr $a718			jsr 	NSMSetByte
.afec		60		rts				rts
.afed						ChrGet:
.afed		fa		plx				plx
.afee		20 ca af	jsr $afca			jsr 	AscGet2
.aff1		4c f8 af	jmp $aff8			jmp 	GetInkeyToString
.aff4						ChrInkey:
.aff4		fa		plx				plx
.aff5		20 e3 af	jsr $afe3			jsr 	AscInkey2
.aff8						GetInkeyToString:
.aff8		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.affa		f0 0b		beq $b007			beq 	_GKISNull
.affc		48		pha				pha
.affd		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.afff		20 53 b9	jsr $b953			jsr 	StringTempAllocate
.b002		68		pla				pla 								; write number to it
.b003		20 8c b9	jsr $b98c			jsr 	StringTempWrite
.b006		60		rts				rts
.b007						_GKISNull:
.b007		a9 00		lda #$00			lda 	#0
.b009		20 53 b9	jsr $b953			jsr 	StringTempAllocate
.b00c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.b00d						KeyDown:
.b00d		20 37 81	jsr $8137			jsr 	ProcessEvents 				; process outstanding events.
.b010		fa		plx				plx 								; restore stack pos
.b011		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; key to check.
.b014		48		pha				pha 								; check right bracket.
.b015		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.b018		68		pla				pla
.b019		20 05 82	jsr $8205			jsr 	KeyboardConvertXA 			; get offset and mask.
.b01c		3d 5f 06	and $065f,x			and 	KeyStatus,x 				; is it zero ?
.b01f		f0 03		beq $b024			beq 	_KeyUp
.b021		4c 29 98	jmp $9829			jmp 	ReturnTrue
.b024		4c 34 98	jmp $9834	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.b027						Unary_Random:
.b027		fa		plx				plx
.b028		20 78 b0	jsr $b078			jsr 	URCopyToMantissa  			; put random # in mantissa
.b02b		b1 30		lda ($30),y			lda 	(codePtr),y
.b02d		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b02f		f0 08		beq $b039			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b031		e8		inx				inx
.b032		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b035		ca		dex				dex
.b036		20 7b 99	jsr $997b			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b039						_URNoModulus:
.b039		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b03b		74 78		stz $78,x			stz 	NSExponent,x
.b03d		20 a3 97	jsr $97a3			jsr 	CheckRightBracket
.b040		60		rts				rts
.b041						Unary_Rnd:
.b041		fa		plx				plx
.b042		20 64 a6	jsr $a664			jsr 	EvaluateNumber 				; number to use.
.b045		20 a3 97	jsr $97a3			jsr 	CheckRightBracket 			; closing bracket
.b048		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b04a		10 20		bpl $b06c			bpl 	_URDontSeed
.b04c		a5 01		lda $01				lda 	1 							; switch to page 0
.b04e		48		pha				pha
.b04f		64 01		stz $01				stz 	1
.b051		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b053		49 17		eor #$17			eor 	#$17
.b055		8d a4 d6	sta $d6a4			sta 	$D6A4
.b058		b5 60		lda $60,x			lda 	NSMantissa1,x
.b05a		49 a5		eor #$a5			eor 	#$A5
.b05c		8d a5 d6	sta $d6a5			sta 	$D6A5
.b05f		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b061		8d a6 d6	sta $d6a6			sta 	$D6A6
.b064		a9 01		lda #$01			lda 	#1
.b066		8d a6 d6	sta $d6a6			sta 	$D6A6
.b069		68		pla				pla
.b06a		85 01		sta $01				sta 	1
.b06c						_URDontSeed:
.b06c		20 78 b0	jsr $b078			jsr 	URCopyToMantissa 			; copy into mantissa
.b06f		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b071		95 78		sta $78,x			sta 	NSExponent,x
.b073		a9 08		lda #$08			lda 	#NSTFloat
.b075		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b077		60		rts				rts
.b078						URCopyToMantissa:
.b078		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b07a		48		pha				pha
.b07b		64 01		stz $01				stz 	1
.b07d		a9 01		lda #$01			lda 	#1
.b07f		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b082		ad a4 d6	lda $d6a4			lda 	$D6A4
.b085		95 58		sta $58,x			sta 	NSMantissa0,x
.b087		ad a5 d6	lda $d6a5			lda 	$D6A5
.b08a		95 60		sta $60,x			sta 	NSMantissa1,x
.b08c		ad a4 d6	lda $d6a4			lda 	$D6A4
.b08f		95 68		sta $68,x			sta 	NSMantissa2,x
.b091		ad a5 d6	lda $d6a5			lda 	$D6A5
.b094		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b096		95 70		sta $70,x			sta 	NSMantissa3,x
.b098		68		pla				pla
.b099		85 01		sta $01				sta 	1
.b09b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b09c						Assemble_ora:
.b09c		20 03 83	jsr $8303		jsr	AssembleGroup1
>b09f		01					.byte $01
.b0a0						Assemble_and:
.b0a0		20 03 83	jsr $8303		jsr	AssembleGroup1
>b0a3		21					.byte $21
.b0a4						Assemble_eor:
.b0a4		20 03 83	jsr $8303		jsr	AssembleGroup1
>b0a7		41					.byte $41
.b0a8						Assemble_adc:
.b0a8		20 03 83	jsr $8303		jsr	AssembleGroup1
>b0ab		61					.byte $61
.b0ac						Assemble_sta:
.b0ac		20 03 83	jsr $8303		jsr	AssembleGroup1
>b0af		81					.byte $81
.b0b0						Assemble_lda:
.b0b0		20 03 83	jsr $8303		jsr	AssembleGroup1
>b0b3		a1					.byte $a1
.b0b4						Assemble_cmp:
.b0b4		20 03 83	jsr $8303		jsr	AssembleGroup1
>b0b7		c1					.byte $c1
.b0b8						Assemble_sbc:
.b0b8		20 03 83	jsr $8303		jsr	AssembleGroup1
>b0bb		e1					.byte $e1
.b0bc						Assemble_asl:
.b0bc		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0bf		02					.byte $02
>b0c0		75					.byte $75
.b0c1						Assemble_rol:
.b0c1		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0c4		22					.byte $22
>b0c5		75					.byte $75
.b0c6						Assemble_lsr:
.b0c6		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0c9		42					.byte $42
>b0ca		75					.byte $75
.b0cb						Assemble_ror:
.b0cb		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0ce		62					.byte $62
>b0cf		75					.byte $75
.b0d0						Assemble_stx:
.b0d0		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0d3		82					.byte $82
>b0d4		50					.byte $50
.b0d5						Assemble_ldx:
.b0d5		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0d8		a2					.byte $a2
>b0d9		d0					.byte $d0
.b0da						Assemble_dec:
.b0da		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0dd		c2					.byte $c2
>b0de		55					.byte $55
.b0df						Assemble_inc:
.b0df		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0e2		e2					.byte $e2
>b0e3		55					.byte $55
.b0e4						Assemble_stz:
.b0e4		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0e7		60					.byte $60
>b0e8		44					.byte $44
.b0e9						Assemble_bit:
.b0e9		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0ec		20					.byte $20
>b0ed		55					.byte $55
.b0ee						Assemble_sty:
.b0ee		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0f1		80					.byte $80
>b0f2		54					.byte $54
.b0f3						Assemble_ldy:
.b0f3		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0f6		a0					.byte $a0
>b0f7		d5					.byte $d5
.b0f8						Assemble_cpy:
.b0f8		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b0fb		c0					.byte $c0
>b0fc		d4					.byte $d4
.b0fd						Assemble_cpx:
.b0fd		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b100		e0					.byte $e0
>b101		d0					.byte $d0
.b102						Assemble_tsb:
.b102		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b105		00					.byte $00
>b106		50					.byte $50
.b107						Assemble_trb:
.b107		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b10a		10					.byte $10
>b10b		50					.byte $50
.b10c						Assemble_jsr:
.b10c		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b10f		14					.byte $14
>b110		10					.byte $10
.b111						Assemble_jmp:
.b111		20 0a 83	jsr $830a		jsr	AssembleGroup2
>b114		40					.byte $40
>b115		10					.byte $10
.b116						Assemble_bpl:
.b116		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b119		10					.byte $10
.b11a						Assemble_bmi:
.b11a		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b11d		30					.byte $30
.b11e						Assemble_bvc:
.b11e		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b121		50					.byte $50
.b122						Assemble_bvs:
.b122		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b125		70					.byte $70
.b126						Assemble_bcc:
.b126		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b129		90					.byte $90
.b12a						Assemble_bcs:
.b12a		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b12d		b0					.byte $b0
.b12e						Assemble_bne:
.b12e		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b131		d0					.byte $d0
.b132						Assemble_beq:
.b132		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b135		f0					.byte $f0
.b136						Assemble_bra:
.b136		20 5b 83	jsr $835b		jsr	AssembleGroup3
>b139		80					.byte $80
.b13a						Assemble_brk:
.b13a		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b13d		00					.byte $00
.b13e						Assemble_php:
.b13e		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b141		08					.byte $08
.b142						Assemble_clc:
.b142		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b145		18					.byte $18
.b146						Assemble_plp:
.b146		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b149		28					.byte $28
.b14a						Assemble_sec:
.b14a		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b14d		38					.byte $38
.b14e						Assemble_rti:
.b14e		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b151		40					.byte $40
.b152						Assemble_pha:
.b152		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b155		48					.byte $48
.b156						Assemble_cli:
.b156		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b159		58					.byte $58
.b15a						Assemble_phy:
.b15a		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b15d		5a					.byte $5a
.b15e						Assemble_rts:
.b15e		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b161		60					.byte $60
.b162						Assemble_pla:
.b162		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b165		68					.byte $68
.b166						Assemble_sei:
.b166		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b169		78					.byte $78
.b16a						Assemble_ply:
.b16a		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b16d		7a					.byte $7a
.b16e						Assemble_dey:
.b16e		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b171		88					.byte $88
.b172						Assemble_txa:
.b172		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b175		8a					.byte $8a
.b176						Assemble_tya:
.b176		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b179		98					.byte $98
.b17a						Assemble_txs:
.b17a		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b17d		9a					.byte $9a
.b17e						Assemble_tay:
.b17e		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b181		a8					.byte $a8
.b182						Assemble_tax:
.b182		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b185		aa					.byte $aa
.b186						Assemble_clv:
.b186		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b189		b8					.byte $b8
.b18a						Assemble_tsx:
.b18a		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b18d		ba					.byte $ba
.b18e						Assemble_iny:
.b18e		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b191		c8					.byte $c8
.b192						Assemble_dex:
.b192		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b195		ca					.byte $ca
.b196						Assemble_cld:
.b196		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b199		d8					.byte $d8
.b19a						Assemble_phx:
.b19a		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b19d		da					.byte $da
.b19e						Assemble_stp:
.b19e		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b1a1		db					.byte $db
.b1a2						Assemble_inx:
.b1a2		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b1a5		e8					.byte $e8
.b1a6						Assemble_nop:
.b1a6		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b1a9		ea					.byte $ea
.b1aa						Assemble_sed:
.b1aa		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b1ad		f8					.byte $f8
.b1ae						Assemble_plx:
.b1ae		20 8f 83	jsr $838f		jsr	AssembleGroup4
>b1b1		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b1b2						DecimalScalarTable:
>b1b2		66 66 66 66				.dword $66666666 ; 0.1
>b1b6		de					.byte $de
>b1b7		1f 85 eb 51				.dword $51eb851f ; 0.01
>b1bb		db					.byte $db
>b1bc		4c 37 89 41				.dword $4189374c ; 0.001
>b1c0		d8					.byte $d8
>b1c1		ac 8b db 68				.dword $68db8bac ; 0.0001
>b1c5		d4					.byte $d4
>b1c6		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b1ca		d1					.byte $d1
>b1cb		83 de 1b 43				.dword $431bde83 ; 1e-06
>b1cf		ce					.byte $ce
>b1d0		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b1d4		ca					.byte $ca
>b1d5		89 3b e6 55				.dword $55e63b89 ; 1e-08
>b1d9		c7					.byte $c7
>b1da		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b1de		c4					.byte $c4
>b1df		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b1e3		c0					.byte $c0
>b1e4		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b1e8		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b1e9						SyntaxError:
.b1e9		a9 02		lda #$02		lda	#2
.b1eb		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b1ee						RangeError:
.b1ee		a9 04		lda #$04		lda	#4
.b1f0		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b1f3						TypeError:
.b1f3		a9 05		lda #$05		lda	#5
.b1f5		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b1f8						ArgumentError:
.b1f8		a9 07		lda #$07		lda	#7
.b1fa		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b1fd						NotDoneError:
.b1fd		a9 0c		lda #$0c		lda	#12
.b1ff		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b202						ErrorText:
>b202		42 72 65 61 6b 00			.text	"Break",0
>b208		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b210		72 72 6f 72 00
>b215		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b21d		20 62 79 20 7a 65 72 6f 00
>b226		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b22e		61 6e 67 65 00
>b233		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b23b		6d 61 74 63 68 00
>b241		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b249		65 6d 6f 72 79 00
>b24f		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b257		61 72 67 75 6d 65 6e 74 00
>b260		53 74 6f 70 00				.text	"Stop",0
>b265		53 74 72 69 6e 67 20 74			.text	"String too long",0
>b26d		6f 6f 20 6c 6f 6e 67 00
>b275		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b27d		6e 20 66 61 69 6c 65 64 00
>b286		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b28e		61 74 61 00
>b292		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b29a		65 6e 74 65 64 00
>b2a0		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b2a8		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b2b4		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b2bc		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b2c9		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b2d1		74 68 6f 75 74 20 52 65 70 65 61 74 00
>b2de		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b2e6		68 6f 75 74 20 57 68 69 6c 65 00
>b2f1		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b2f9		68 6f 75 74 20 46 6f 72 00
>b302		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b30a		61 63 6b 20 66 75 6c 6c 00
>b313		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b31b		75 63 74 75 72 65 00
>b322		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b32a		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b337		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b33f		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b34d		41 72 72 61 79 20 73 69			.text	"Array size",0
>b355		7a 65 00
>b358		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b360		79 20 69 6e 64 65 78 00
>b368		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>b370		74 20 64 65 63 6c 61 72 65 64 00
>b37b		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>b383		20 66 6f 75 6e 64 00
>b38a		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>b392		65 72 72 6f 72 00
>b398		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>b3a0		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc65		09 09 32 31 2f 30 31 2f			.text 9,9,"21/01/23 32"
>dc6d		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.b3a6						MemoryDeleteLine:
.b3a6		20 c5 b3	jsr $b3c5			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b3a9		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b3ab		a8		tay				tay
.b3ac						_MDDLLoop:
.b3ac		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b3ae		92 30		sta ($30)			sta 	(codePtr)
.b3b0		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b3b2		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.b3b4		d0 07		bne $b3bd			bne 	_MDLDLNext
.b3b6		a5 31		lda $31				lda 	codePtr+1
.b3b8		c5 3b		cmp $3b				cmp 	zTemp2+1
.b3ba		d0 01		bne $b3bd			bne 	_MDLDLNext
.b3bc						_MDDLExit:
.b3bc		60		rts				rts
.b3bd						_MDLDLNext:
.b3bd		e6 30		inc $30				inc 	codePtr						; next byte
.b3bf		d0 eb		bne $b3ac			bne 	_MDDLLoop
.b3c1		e6 31		inc $31				inc 	codePtr+1
.b3c3		80 e7		bra $b3ac			bra 	_MDDLLoop
.b3c5						IMemoryFindEnd:
.b3c5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b3c7		85 3a		sta $3a				sta 	0+zTemp2
.b3c9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b3cb		85 3b		sta $3b				sta 	1+zTemp2
.b3cd						_MDLFELoop:
.b3cd		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.b3cf		f0 0b		beq $b3dc			beq 	_MDLFEExit
.b3d1		18		clc				clc
.b3d2		65 3a		adc $3a				adc 	zTemp2
.b3d4		85 3a		sta $3a				sta 	zTemp2
.b3d6		90 f5		bcc $b3cd			bcc 	_MDLFELoop
.b3d8		e6 3b		inc $3b				inc 	zTemp2+1
.b3da		80 f1		bra $b3cd			bra 	_MDLFELoop
.b3dc						_MDLFEExit:
.b3dc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.b3dd						MemoryInsertLine:
.b3dd		08		php				php
.b3de		20 c5 b3	jsr $b3c5			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b3e1		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.b3e3		1a		inc a				inc 	a
.b3e4		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b3e6		b0 36		bcs $b41e			bcs 	_MDLIError 					; no, fail.
.b3e8		28		plp				plp 								; do at a specific point or the end ?
.b3e9		90 08		bcc $b3f3			bcc 	_MDLIFound 					; if specific point already set.
.b3eb		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.b3ed		85 30		sta $30				sta 	codePtr 					; end.
.b3ef		a5 3b		lda $3b				lda 	zTemp2+1
.b3f1		85 31		sta $31				sta 	codePtr+1
.b3f3						_MDLIFound:
.b3f3		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b3f6		a8		tay				tay
.b3f7						_MDLIInsert:
.b3f7		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.b3f9		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b3fb		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.b3fd		c5 3a		cmp $3a				cmp 	zTemp2
.b3ff		d0 06		bne $b407			bne 	_MDLINext
.b401		a5 31		lda $31				lda 	codePtr+1
.b403		c5 3b		cmp $3b				cmp 	zTemp2+1
.b405		f0 0a		beq $b411			beq 	_MDLIHaveSpace
.b407						_MDLINext:
.b407		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.b409		d0 02		bne $b40d			bne 	_MDLINoBorrow
.b40b		c6 3b		dec $3b				dec 	zTemp2+1
.b40d						_MDLINoBorrow:
.b40d		c6 3a		dec $3a				dec 	zTemp2
.b40f		80 e6		bra $b3f7			bra 	_MDLIInsert
.b411						_MDLIHaveSpace:
.b411		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.b414		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.b415						_MDLICopy:
.b415		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.b418		91 30		sta ($30),y			sta 	(codePtr),y
.b41a		88		dey				dey
.b41b		10 f8		bpl $b415			bpl 	_MDLICopy
.b41d		60		rts				rts
.b41e						_MDLIError:
.b41e		a9 06		lda #$06		lda	#6
.b420		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b423						MDLAppendLine:
.b423		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b425		85 36		sta $36				sta 	zTemp0
.b427		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b429		85 38		sta $38				sta 	0+zTemp1
.b42b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b42d		85 39		sta $39				sta 	1+zTemp1
.b42f		b2 38		lda ($38)			lda 	(zTemp1)
.b431		d0 0a		bne $b43d			bne 	_MDLANoInitialise
.b433		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b435		8d 96 07	sta $0796			sta 	0+AppendPointer
.b438		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b43a		8d 97 07	sta $0797			sta 	1+AppendPointer
.b43d						_MDLANoInitialise:
.b43d		18		clc				clc
.b43e		ad 96 07	lda $0796			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b441		85 38		sta $38				sta 	zTemp1
.b443		72 36		adc ($36)			adc 	(zTemp0)
.b445		8d 96 07	sta $0796			sta 	AppendPointer
.b448		ad 97 07	lda $0797			lda 	AppendPointer+1
.b44b		85 39		sta $39				sta 	zTemp1+1
.b44d		69 00		adc #$00			adc 	#0
.b44f		8d 97 07	sta $0797			sta 	AppendPointer+1
.b452		a0 00		ldy #$00			ldy 	#0
.b454						_MDLACopy:
.b454		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b456		91 38		sta ($38),y			sta 	(zTemp1),y
.b458		c8		iny				iny
.b459		98		tya				tya
.b45a		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b45c		d0 f6		bne $b454			bne 	_MDLACopy
.b45e		a9 00		lda #$00			lda 	#0 							; end of program.
.b460		91 38		sta ($38),y			sta 	(zTemp1),y
.b462		60		rts				rts
.0796						AppendPointer:
>0796								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.b463						MemoryNew:
.b463		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b465		85 30		sta $30				sta 	codePtr
.b467		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b469		85 31		sta $31				sta 	codePtr+1
.b46b		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.b46d		92 30		sta ($30)			sta 	(codePtr)
.b46f		60		rts				rts
.b470						MemoryInline:
.b470		98		tya				tya 								; put address into stack,x
.b471		18		clc				clc  								; get the offset, add codePtr
.b472		65 30		adc $30				adc 	codePtr
.b474		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.b476		a5 31		lda $31				lda 	codePtr+1
.b478		69 00		adc #$00			adc 	#0
.b47a		95 60		sta $60,x			sta 	NSMantissa1,x
.b47c		74 68		stz $68,x			stz 	NSMantissa2,x
.b47e		74 70		stz $70,x			stz 	NSMantissa3,x
.b480		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.b481						MemorySearch:
.b481		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.b483		86 37		stx $37				stx 	zTemp0+1
.b485		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b487		85 30		sta $30				sta 	codePtr
.b489		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b48b		85 31		sta $31				sta 	codePtr+1
.b48d						_MTAXLoop:
.b48d		b2 30		lda ($30)			lda 	(codePtr)
.b48f		18		clc				clc
.b490		f0 21		beq $b4b3			beq 	_MTAXExit 					; reached end, exit with CC.
.b492		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.b494		b1 30		lda ($30),y			lda 	(codePtr),y
.b496		38		sec				sec
.b497		e5 36		sbc $36				sbc 	zTemp0
.b499		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.b49b		c8		iny				iny 								; do the MSB
.b49c		b1 30		lda ($30),y			lda 	(codePtr),y
.b49e		e5 37		sbc $37				sbc 	zTemp0+1
.b4a0		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.b4a2		f0 0f		beq $b4b3			beq 	_MTAXExit	 				; found so exit (CS will be set)
.b4a4		b0 0d		bcs $b4b3			bcs 	_MTAXExit 					; current < required exit
.b4a6		18		clc				clc
.b4a7		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b4a9		65 30		adc $30				adc 	codePtr
.b4ab		85 30		sta $30				sta 	codePtr
.b4ad		90 02		bcc $b4b1			bcc 	_CREExit
.b4af		e6 31		inc $31				inc 	codePtr+1 					; carry
.b4b1						_CREExit:
.b4b1		80 da		bra $b48d			bra 	_MTAXLoop
.b4b3						_MTAXExit:
.b4b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.b4b4						RectangleCommand:
.b4b4		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.b4b6		80 02		bra $b4ba			bra 	ShapeDrawCmd
.b4b8						CircleCommand:
.b4b8		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.b4ba						ShapeDrawCmd:
.b4ba		20 44 b5	jsr $b544			jsr 	RunGraphicsCommand
.b4bd						ShapeDraw:
.b4bd		0d 99 07	ora $0799			ora 	gxFillSolid  				; adjust AXY for solid fill.
.b4c0		4c 38 b5	jmp $b538			jmp 	ExecuteGraphicCommand	 	; and complete
.b4c3						SpriteCommand:
.b4c3		a2 00		ldx #$00			ldx 	#0
.b4c5		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get image number.
.b4c8		5a		phy				phy
.b4c9		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.b4cb		a6 58		ldx $58				ldx 	NSMantissa0
.b4cd		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.b4cf		b0 0d		bcs $b4de			bcs 	_SCRange
.b4d1		a0 ff		ldy #$ff			ldy 	#255
.b4d3		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b4d6		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.b4d8		7a		ply				ply
.b4d9		20 44 b5	jsr $b544			jsr 	RunGraphicsCommand
.b4dc		80 5a		bra $b538			bra 	ExecuteGraphicCommand
.b4de						_SCRange:
.b4de		4c ee b1	jmp $b1ee			jmp 	RangeError
.b4e1						ImageCommand:
.b4e1		a2 00		ldx #$00			ldx 	#0
.b4e3		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get image number.
.b4e6		20 44 b5	jsr $b544			jsr 	RunGraphicsCommand
.b4e9						ImageRunDraw:
.b4e9		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.b4eb		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b4ee		ad 9f 07	lda $079f			lda 	gxDrawScale
.b4f1		0a		asl a				asl 	a
.b4f2		0a		asl a				asl 	a
.b4f3		0a		asl a				asl 	a
.b4f4		a8		tay				tay
.b4f5		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.b4f7		a6 58		ldx $58				ldx 	NSMantissa0
.b4f9		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b4fc		60		rts				rts
.b4fd						TextCommand:
.b4fd		a2 00		ldx #$00			ldx 	#0
.b4ff		20 6e a6	jsr $a66e			jsr 	EvaluateString 				; get text
.b502		20 44 b5	jsr $b544			jsr 	RunGraphicsCommand
.b505						TextRunDraw:
.b505		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.b507		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b50a		a0 00		ldy #$00			ldy 	#0
.b50c						_IRDLoop:
.b50c		a5 60		lda $60				lda 	NSMantissa1 				; access character
.b50e		85 37		sta $37				sta 	zTemp0+1
.b510		a5 58		lda $58				lda 	NSMantissa0
.b512		85 36		sta $36				sta 	zTemp0
.b514		b1 36		lda ($36),y			lda 	(zTemp0),y
.b516		f0 13		beq $b52b			beq 	_IRDExit
.b518		5a		phy				phy									; save string pos
.b519		48		pha				pha 								; save char
.b51a		ad 9f 07	lda $079f			lda 	gxDrawScale 				; get scale
.b51d		0a		asl a				asl 	a
.b51e		0a		asl a				asl 	a
.b51f		0a		asl a				asl 	a
.b520		a8		tay				tay
.b521		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.b523		fa		plx				plx 								; char to draw
.b524		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b527		7a		ply				ply 								; restore string pos
.b528		c8		iny				iny
.b529		90 e1		bcc $b50c			bcc 	_IRDLoop 					; go back if no error.
.b52b						_IRDExit:
.b52b		60		rts				rts
.b52c						PlotCommand:
.b52c		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.b52e		20 44 b5	jsr $b544			jsr 	RunGraphicsCommand
.b531		80 05		bra $b538			bra 	ExecuteGraphicCommand
.b533						LineCommand:
.b533		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.b535		20 44 b5	jsr $b544			jsr 	RunGraphicsCommand
.b538						ExecuteGraphicCommand:
.b538		0d 98 07	ora $0798			ora 	gxCommandID 				; make a full command
.b53b		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.b53e		b0 01		bcs $b541			bcs 	_EGCError
.b540		60		rts				rts
.b541						_EGCError:
.b541		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.b544						RunGraphicsCommand:
.b544		8d 98 07	sta $0798			sta 	gxCommandID					; save TODO graphics command.
.b547		68		pla				pla 								; pop handler address
.b548		fa		plx				plx
.b549		1a		inc a				inc 	a
.b54a		d0 01		bne $b54d			bne 	_RGINoCarry
.b54c		e8		inx				inx
.b54d						_RGINoCarry:
.b54d		8d 9d 07	sta $079d			sta 	gxHandler
.b550		8e 9e 07	stx $079e			stx 	gxHandler+1
.b553						_RGICommandLoop:
.b553		b1 30		lda ($30),y			lda 	(codePtr),y
.b555		c8		iny				iny
.b556		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.b558		f0 53		beq $b5ad			beq 	_RGI_To
.b55a		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.b55c		f0 55		beq $b5b3			beq 	_RGI_Here
.b55e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.b560		f0 3d		beq $b59f			beq 	_RGI_Exit
.b562		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.b564		f0 39		beq $b59f			beq 	_RGI_Exit
.b566		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.b568		f0 3e		beq $b5a8			beq 	_RGI_Frame
.b56a		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.b56c		f0 33		beq $b5a1			beq 	_RGI_Solid
.b56e		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.b570		f0 4b		beq $b5bd			beq 	_RGI_By
.b572		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.b574		f0 17		beq $b58d			beq 	_RGI_Move2
.b576		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.b578		f0 62		beq $b5dc			beq 	_RGI_Dim
.b57a		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.b57c		f0 74		beq $b5f2			beq 	_RGI_Colour
.b57e		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.b580		f0 70		beq $b5f2			beq 	_RGI_Colour
.b582		ae 98 07	ldx $0798			ldx 	gxCommandID
.b585		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.b587		d0 03		bne $b58c			bne 	_RGI_Move 					; move
.b589		4c 1a b6	jmp $b61a			jmp		_RGI_SpriteInstructions
.b58c						_RGI_Move:
.b58c		88		dey				dey 								; unpick get.
.b58d						_RGI_Move2:
.b58d		20 40 b6	jsr $b640			jsr 	GCGetCoordinatePair 		; move to here
.b590		20 67 b6	jsr $b667			jsr 	GCCopyPairToStore 			; save
.b593		5a		phy				phy
.b594		20 5d b6	jsr $b65d			jsr 	GCLoadAXY 					; load in
.b597		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.b599		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b59c		7a		ply				ply
.b59d		80 b4		bra $b553			bra 	_RGICommandLoop 			; and go round
.b59f						_RGI_Exit:
.b59f		88		dey				dey 								; unpick : / EOL
.b5a0		60		rts				rts
.b5a1						_RGI_Solid:
.b5a1		a9 02		lda #$02			lda 	#2
.b5a3		8d 99 07	sta $0799			sta 	gxFillSolid
.b5a6		80 ab		bra $b553			bra 	_RGICommandLoop
.b5a8						_RGI_Frame:
.b5a8		9c 99 07	stz $0799			stz 	gxFillSolid
.b5ab		80 a6		bra $b553			bra 	_RGICommandLoop
.b5ad						_RGI_To:
.b5ad		20 40 b6	jsr $b640			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.b5b0		20 67 b6	jsr $b667			jsr 	GCCopyPairToStore
.b5b3						_RGI_Here:
.b5b3		5a		phy				phy
.b5b4		20 5d b6	jsr $b65d			jsr 	GCLoadAXY 					; load it into AXY
.b5b7		20 17 b6	jsr $b617			jsr 	_RGICallHandler 			; go do whatever it is.
.b5ba		7a		ply				ply
.b5bb		80 96		bra $b553			bra 	_RGICommandLoop 			; and go round
.b5bd						_RGI_By:
.b5bd		20 4d b6	jsr $b64d			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.b5c0		18		clc				clc
.b5c1		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b5c3		6d 9a 07	adc $079a			adc 	gxXPos
.b5c6		8d 9a 07	sta $079a			sta 	gxXPos
.b5c9		a5 61		lda $61				lda 	NSMantissa1+1
.b5cb		6d 9b 07	adc $079b			adc 	gxXPos+1
.b5ce		8d 9b 07	sta $079b			sta 	gxXPos+1
.b5d1		a5 5a		lda $5a				lda 	NSMantissa0+2
.b5d3		18		clc				clc
.b5d4		6d 9c 07	adc $079c			adc 	gxYPos
.b5d7		8d 9c 07	sta $079c			sta 	gxYPos
.b5da		80 d7		bra $b5b3			bra 	_RGI_Here
.b5dc						_RGI_Dim:
.b5dc		a2 01		ldx #$01			ldx	 	#1
.b5de		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.b5e1		a5 59		lda $59				lda 	NSMantissa0+1
.b5e3		c9 00		cmp #$00			cmp 	#0
.b5e5		f0 2d		beq $b614			beq 	_RGIRange
.b5e7		c9 09		cmp #$09			cmp 	#8+1
.b5e9		b0 29		bcs $b614			bcs		_RGIRange
.b5eb		3a		dec a				dec 	a
.b5ec		8d 9f 07	sta $079f			sta 	gxDrawScale
.b5ef		4c 53 b5	jmp $b553			jmp 	_RGICommandLoop
.b5f2						_RGI_Colour:
.b5f2		a2 01		ldx #$01			ldx 	#1 							; colour
.b5f4		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.b5f7		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.b5f9		20 16 a7	jsr $a716			jsr 	NSMSetZero
.b5fc		b1 30		lda ($30),y			lda 	(codePtr),y
.b5fe		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.b600		d0 04		bne $b606			bne 	_RGICDefaultMode
.b602		c8		iny				iny
.b603		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.b606						_RGICDefaultMode:
.b606		5a		phy				phy
.b607		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.b609		a6 59		ldx $59				ldx 	NSMantissa0+1
.b60b		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b60d		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b610		7a		ply				ply
.b611		4c 53 b5	jmp $b553			jmp 	_RGICommandLoop 			; and go round
.b614						_RGIRange:
.b614		4c ee b1	jmp $b1ee			jmp 	RangeError
.b617						_RGICallHandler:
.b617		6c 9d 07	jmp ($079d)			jmp 	(gxHandler)
.b61a						_RGI_SpriteInstructions:
.b61a		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b61c		f0 07		beq $b625			beq 	_RGISpriteOff
.b61e		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.b620		f0 13		beq $b635			beq 	_RGISetImage
.b622		4c 8c b5	jmp $b58c			jmp 	_RGI_Move
.b625						_RGISpriteOff:
.b625		5a		phy				phy
.b626		a0 01		ldy #$01			ldy 	#1
.b628		a2 00		ldx #$00			ldx 	#0
.b62a						_RGIDoCommandLoop:
.b62a		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.b62c		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b62f		7a		ply				ply
.b630		b0 e2		bcs $b614			bcs 	_RGIRange
.b632		4c 53 b5	jmp $b553			jmp 	_RGICommandLoop
.b635						_RGISetImage:
.b635		a2 01		ldx #$01			ldx 	#1
.b637		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger
.b63a		5a		phy				phy
.b63b		aa		tax				tax
.b63c		a0 00		ldy #$00			ldy 	#0
.b63e		80 ea		bra $b62a			bra 	_RGIDoCommandLoop
.b640						GCGetCoordinatePair:
.b640		a2 01		ldx #$01			ldx 	#1
.b642		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.b645		20 ab 97	jsr $97ab			jsr 	CheckComma
.b648		e8		inx				inx
.b649		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger
.b64c		60		rts				rts
.b64d						GCSignedCoordinatePair:
.b64d		a2 01		ldx #$01			ldx 	#1
.b64f		20 a0 a6	jsr $a6a0			jsr 	Evaluate16BitIntegerSigned
.b652		20 ab 97	jsr $97ab			jsr 	CheckComma
.b655		e8		inx				inx
.b656		20 a0 a6	jsr $a6a0			jsr 	Evaluate16BitIntegerSigned
.b659		60		rts				rts
.b65a						_GCCPRange:
.b65a		4c ee b1	jmp $b1ee			jmp 	RangeError
.b65d						GCLoadAXY:
.b65d		ad 9b 07	lda $079b			lda 	gxXPos+1
.b660		ae 9a 07	ldx $079a			ldx 	gxXPos
.b663		ac 9c 07	ldy $079c			ldy 	gxYPos
.b666		60		rts				rts
.b667						GCCopyPairToStore:
.b667		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b669		8d 9a 07	sta $079a			sta 	gxXPos
.b66c		a5 61		lda $61				lda 	NSMantissa1+1
.b66e		8d 9b 07	sta $079b			sta 	gxXPos+1
.b671		a5 5a		lda $5a				lda 	NSMantissa0+2
.b673		8d 9c 07	sta $079c			sta 	gxYPos
.b676		60		rts				rts
.0798						gxCommandID:
>0798								.fill 	1
.0799						gxFillSolid:
>0799								.fill 	1
.079a						gxXPos:
>079a								.fill 	2
.079c						gxYPos:
>079c								.fill 	1
.079d						gxHandler:
>079d								.fill 	2
.079f						gxDrawScale:
>079f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.b677						BitmapCtrl:
.b677		b1 30		lda ($30),y			lda 	(codePtr),y
.b679		c8		iny				iny
.b67a		a2 01		ldx #$01			ldx 	#1
.b67c		c9 cc		cmp #$cc			cmp 	#KWD_ON
.b67e		f0 11		beq $b691			beq 	BitmapSwitch
.b680		ca		dex				dex
.b681		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b683		f0 0c		beq $b691			beq 	BitmapSwitch
.b685		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get the colour
.b688		5a		phy				phy
.b689		aa		tax				tax
.b68a		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.b68c		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b68f		7a		ply				ply
.b690		60		rts				rts
.b691						BitmapSwitch:
.b691		5a		phy				phy
.b692		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.b694		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.b696		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b699		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.b69b		a0 00		ldy #$00			ldy 	#0
.b69d		a2 ff		ldx #$ff			ldx 	#$FF
.b69f		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b6a2		9c 99 07	stz $0799			stz 	gxFillSolid
.b6a5		9c 9a 07	stz $079a			stz 	gxXPos
.b6a8		9c 9b 07	stz $079b			stz 	gxXPos+1
.b6ab		9c 9c 07	stz $079c			stz 	gxYPos
.b6ae		9c 9f 07	stz $079f			stz 	gxDrawScale
.b6b1		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.b6b3		a2 00		ldx #$00			ldx 	#0
.b6b5		a0 00		ldy #$00			ldy 	#0
.b6b7		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b6ba		7a		ply				ply
.b6bb		60		rts				rts
.b6bc						SpritesCtrl:
.b6bc		b1 30		lda ($30),y			lda 	(codePtr),y
.b6be		c8		iny				iny
.b6bf		a2 01		ldx #$01			ldx 	#1
.b6c1		c9 cc		cmp #$cc			cmp 	#KWD_ON
.b6c3		f0 08		beq $b6cd			beq 	SpriteSwitch
.b6c5		ca		dex				dex
.b6c6		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b6c8		f0 03		beq $b6cd			beq 	SpriteSwitch
.b6ca		4c e9 b1	jmp $b1e9			jmp 	SyntaxError
.b6cd						SpriteSwitch:
.b6cd		5a		phy				phy
.b6ce		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.b6d0		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.b6d2		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b6d5		7a		ply				ply
.b6d6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.b6d7						GfxCommand:
.b6d7		a2 00		ldx #$00			ldx 	#0
.b6d9		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; command
.b6dc		20 ab 97	jsr $97ab			jsr 	CheckComma
.b6df		e8		inx				inx
.b6e0		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger 		; X
.b6e3		20 ab 97	jsr $97ab			jsr 	CheckComma
.b6e6		e8		inx				inx
.b6e7		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; Y
.b6ea		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.b6ec		4a		lsr a				lsr 	a
.b6ed		d0 12		bne $b701			bne 	_GfxError
.b6ef		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.b6f1		b0 0e		bcs $b701			bcs 	_GfxError 					; bit 7 should have been zero
.b6f3		5a		phy				phy 								; save pos
.b6f4		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.b6f6		a6 59		ldx $59				ldx 	NSMantissa0+1
.b6f8		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b6fa		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.b6fd		b0 02		bcs $b701			bcs 	_GfxError
.b6ff		7a		ply				ply 								; restore pos and exit.
.b700		60		rts				rts
.b701						_GfxError:
.b701		4c ee b1	jmp $b1ee			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.b704						UnaryHit:
.b704		fa		plx				plx
.b705		a9 36		lda #$36			lda 	#zTemp0
.b707		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get sprite number 0
.b70a		20 ab 97	jsr $97ab			jsr 	CheckComma
.b70d		e8		inx				inx
.b70e		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get sprite number 1
.b711		20 a3 97	jsr $97a3			jsr		CheckRightBracket
.b714		ca		dex				dex 								; fix back up again.
.b715		da		phx				phx 								; save X/Y
.b716		5a		phy				phy
.b717		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.b719		b5 58		lda $58,x			lda 	NSMantissa0,x
.b71b		aa		tax				tax
.b71c		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.b71e		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.b721		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.b722		7a		ply				ply 								; restore XY
.b723		fa		plx				plx
.b724		20 18 a7	jsr $a718			jsr 	NSMSetByte 					; return the hit result
.b727		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.b728						PaletteCommand:
.b728		a2 00		ldx #$00			ldx 	#0
.b72a		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; colour
.b72d		20 ab 97	jsr $97ab			jsr 	CheckComma
.b730		e8		inx				inx
.b731		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger 		; r
.b734		20 ab 97	jsr $97ab			jsr 	CheckComma
.b737		e8		inx				inx
.b738		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; g
.b73b		20 ab 97	jsr $97ab			jsr 	CheckComma
.b73e		e8		inx				inx
.b73f		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; b
.b742		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.b744		85 36		sta $36				sta 	zTemp0
.b746		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.b748		85 37		sta $37				sta 	zTemp0+1
.b74a		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.b74c		26 37		rol $37				rol	 	zTemp0+1
.b74e		06 36		asl $36				asl 	zTemp0
.b750		26 37		rol $37				rol	 	zTemp0+1
.b752		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.b754		85 01		sta $01				sta 	1
.b756		5a		phy				phy
.b757		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.b759		92 36		sta ($36)			sta 	(zTemp0)
.b75b		a0 01		ldy #$01			ldy 	#1
.b75d		a5 5a		lda $5a				lda 	NSMantissa0+2
.b75f		91 36		sta ($36),y			sta 	(zTemp0),y
.b761		a5 59		lda $59				lda 	NSMantissa0+1
.b763		c8		iny				iny
.b764		91 36		sta ($36),y			sta 	(zTemp0),y
.b766		7a		ply				ply
.b767		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.b768						ClearScreen:
.b768		5a		phy				phy
.b769		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.b76b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.b76e		7a		ply				ply
.b76f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b770						PingCommand:
.b770		5a		phy				phy 								; save pos
.b771		a9 01		lda #$01			lda 	#1 						; push channel.
.b773		48		pha				pha
.b774		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b776		a2 06		ldx #$06			ldx 	#6 						; length
.b778		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b77a		80 24		bra $b7a0			bra 	SoundEffectCommand
.b77c						ZapCommand:
.b77c		5a		phy				phy 								; save pos
.b77d		a9 01		lda #$01			lda 	#1 						; push channel.
.b77f		48		pha				pha
.b780		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b782		a2 0a		ldx #$0a			ldx 	#10 						; length
.b784		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b786		80 18		bra $b7a0			bra 	SoundEffectCommand
.b788						ShootCommand:
.b788		5a		phy				phy 								; save pos
.b789		a9 03		lda #$03			lda 	#3 						; push channel.
.b78b		48		pha				pha
.b78c		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b78e		a2 04		ldx #$04			ldx 	#4 						; length
.b790		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b792		80 0c		bra $b7a0			bra 	SoundEffectCommand
.b794						Explode:
.b794		5a		phy				phy 								; save pos
.b795		a9 03		lda #$03			lda 	#3 						; push channel.
.b797		48		pha				pha
.b798		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b79a		a2 0a		ldx #$0a			ldx 	#10 						; length
.b79c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b79e		80 00		bra $b7a0			bra 	SoundEffectCommand
.b7a0						SoundEffectCommand:
.b7a0		8d a0 07	sta $07a0			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b7a3		9c a1 07	stz $07a1			stz 	SoundCommandBlock+1
.b7a6		a9 0f		lda #$0f			lda 	#15
.b7a8		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2
.b7ab		8e a3 07	stx $07a3			stx 	SoundCommandBlock+3
.b7ae		8c a4 07	sty $07a4			sty 	SoundCommandBlock+4
.b7b1		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.b7b4		68		pla				pla
.b7b5		09 10		ora #$10			ora 	#$10  						; execute command $11
.b7b7		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.b7b9		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b7bb		20 75 80	jsr $8075			jsr 	SNDCommand
.b7be		7a		ply				ply
.b7bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b7c0						UnaryPlaying:
.b7c0		fa		plx				plx
.b7c1		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; get channel #
.b7c4		48		pha				pha
.b7c5		20 a3 97	jsr $97a3			jsr		CheckRightBracket
.b7c8		68		pla				pla
.b7c9		c9 04		cmp #$04			cmp 	#4
.b7cb		b0 0c		bcs $b7d9			bcs 	_UPNotPlaying
.b7cd		09 20		ora #$20			ora 	#$20 						; query playing ?
.b7cf		20 75 80	jsr $8075			jsr 	SNDCommand
.b7d2		c9 00		cmp #$00			cmp 	#0
.b7d4		f0 03		beq $b7d9			beq 	_UPNotPlaying
.b7d6		4c 29 98	jmp $9829			jmp 	ReturnTrue
.b7d9						_UPNotPlaying:
.b7d9		4c 34 98	jmp $9834			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b7dc						SoundCommand:
.b7dc		b1 30		lda ($30),y			lda 	(codePtr),y
.b7de		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.b7e0		d0 09		bne $b7eb			bne 	_SNDMain
.b7e2		c8		iny				iny 								; skip OFF
.b7e3		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b7e5		5a		phy				phy
.b7e6		20 75 80	jsr $8075			jsr 	SNDCommand
.b7e9		7a		ply				ply
.b7ea		60		rts				rts
.b7eb						_SNDMain:
.b7eb		a2 00		ldx #$00			ldx 	#0
.b7ed		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; channel
.b7f0		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b7f2		b0 4b		bcs $b83f			bcs 	_SndError
.b7f4		e8		inx				inx 								; do the rest in slot 1.
.b7f5		20 ab 97	jsr $97ab			jsr 	CheckComma
.b7f8		20 96 a6	jsr $a696			jsr 	Evaluate16BitInteger 		; Pitch
.b7fb		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b7fd		c9 10		cmp #$10			cmp 	#16
.b7ff		b0 3e		bcs $b83f			bcs 	_SndError
.b801		8d a1 07	sta $07a1			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b804		b5 58		lda $58,x			lda 	NSMantissa0,x
.b806		8d a0 07	sta $07a0			sta 	SoundCommandBlock
.b809		20 ab 97	jsr $97ab			jsr 	CheckComma
.b80c		20 b1 a6	jsr $a6b1			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b80f		8d a3 07	sta $07a3			sta 	SoundCommandBlock+3
.b812		a9 0f		lda #$0f			lda 	#15
.b814		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b817		9c a4 07	stz $07a4			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b81a		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.b81d		b1 30		lda ($30),y			lda 	(codePtr),y
.b81f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b821		d0 0e		bne $b831			bne 	_SNDPlay
.b823		c8		iny				iny
.b824		20 a0 a6	jsr $a6a0			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b827		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b829		8d a4 07	sta $07a4			sta 	SoundCommandBlock+4
.b82c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b82e		8d a5 07	sta $07a5			sta 	SoundCommandBlock+5
.b831						_SNDPlay:
.b831		5a		phy				phy
.b832		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b834		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b836		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.b838		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b83a		20 75 80	jsr $8075			jsr 	SNDCommand
.b83d		7a		ply				ply
.b83e		60		rts				rts
.b83f						_SndError:
.b83f		4c ee b1	jmp $b1ee			jmp 	RangeError
.07a0						SoundCommandBlock:
>07a0								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b842						StackPushByte:
.b842		48		pha				pha 								; save byte on stack
.b843		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b845		d0 08		bne $b84f			bne 	_SPBNoBorrow
.b847		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b849		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b84b		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b84d		90 06		bcc $b855			bcc 	_SPBMemory
.b84f						_SPBNoBorrow:
.b84f		c6 34		dec $34				dec 	basicStack
.b851		68		pla				pla 								; get back and write
.b852		92 34		sta ($34)			sta 	(basicStack)
.b854		60		rts				rts
.b855						_SPBMemory:
.b855		a9 12		lda #$12		lda	#18
.b857		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b85a						StackPopByte:
.b85a		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b85c		e6 34		inc $34				inc 	basicStack
.b85e		d0 02		bne $b862			bne 	_SPBNoCarry
.b860		e6 35		inc $35				inc 	basicStack+1
.b862						_SPBNoCarry:
.b862		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b863						StackOpen:
.b863		48		pha				pha 								; save frame byte
.b864		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b866		0a		asl a				asl 	a 							; claim twice this for storage
.b867		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b869		38		sec				sec 								; so basically subtracting from
.b86a		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b86c		85 34		sta $34				sta 	basicStack
.b86e		b0 09		bcs $b879			bcs 	_SONoBorrow
>b870		db						.byte 	$DB 						; causes a break in the emulator
.b871		c6 35		dec $35				dec 	basicStack+1
.b873		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b875		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b877		90 04		bcc $b87d			bcc 	_SOMemory
.b879						_SONoBorrow:
.b879		68		pla				pla 								; get marker back and write at TOS
.b87a		92 34		sta ($34)			sta 	(basicStack)
.b87c		60		rts				rts
.b87d						_SOMemory:
.b87d		a9 12		lda #$12		lda	#18
.b87f		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b882						StackClose:
.b882		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b884		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b886		0a		asl a				asl 	a 							; claim twice this.
.b887		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b889		85 34		sta $34				sta 	basicStack
.b88b		90 02		bcc $b88f			bcc 	_SCExit
.b88d		e6 35		inc $35				inc 	basicStack+1
.b88f						_SCExit:
.b88f		60		rts				rts
.b890						StackCheckFrame:
.b890		48		pha				pha
.b891						_StackRemoveLocals:
.b891		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b893		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b895		b0 05		bcs $b89c			bcs 	_SCNoLocal
.b897		20 87 90	jsr $9087			jsr 	LocalPopValue 				; restore the local value
.b89a		80 f5		bra $b891			bra 	_StackRemoveLocals 			; gr round again
.b89c						_SCNoLocal:
.b89c		68		pla				pla 								; get the frame check.
.b89d		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b89f		29 f0		and #$f0			and 	#$F0 						; check type bits
.b8a1		d0 01		bne $b8a4			bne 	_SCFError 					; different, we have structures mixed up
.b8a3		60		rts				rts
.b8a4						_SCFError:
.b8a4		8a		txa				txa 								; report error X
.b8a5		4c bc 97	jmp $97bc			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b8a8						STKSaveCodePosition:
.b8a8		5a		phy				phy
.b8a9		98		tya				tya 								; save Y
.b8aa		a0 05		ldy #$05			ldy 	#5
.b8ac		91 34		sta ($34),y			sta 	(basicStack),y
.b8ae		88		dey				dey 								; save Code Pointer
.b8af						_STKSaveLoop:
.b8af		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b8b2		91 34		sta ($34),y			sta 	(basicStack),y
.b8b4		88		dey				dey
.b8b5		d0 f8		bne $b8af			bne 	_STKSaveLoop
.b8b7		7a		ply				ply
.b8b8		60		rts				rts
.b8b9						STKLoadCodePosition:
.b8b9		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b8bb						_STKLoadLoop:
.b8bb		b1 34		lda ($34),y			lda 	(basicStack),y
.b8bd		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b8c0		c8		iny				iny
.b8c1		c0 05		cpy #$05			cpy 	#5
.b8c3		d0 f6		bne $b8bb			bne 	_STKLoadLoop
.b8c5		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b8c7		a8		tay				tay
.b8c8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b8c9						StackReset:
.b8c9		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b8cb		85 34		sta $34				sta 	0+basicStack
.b8cd		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b8cf		85 35		sta $35				sta 	1+basicStack
.b8d1		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b8d3		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b8d5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b8d6						StringConcrete:
.b8d6		5a		phy				phy 								; save position on stack
.b8d7		20 f6 a2	jsr $a2f6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8da		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b8dc		85 38		sta $38				sta 	zTemp1
.b8de		b5 60		lda $60,x			lda 	NSMantissa1,x
.b8e0		85 39		sta $39				sta 	zTemp1+1
.b8e2		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b8e4						_SALength:
.b8e4		c8		iny				iny
.b8e5		b1 38		lda ($38),y			lda 	(zTemp1),y
.b8e7		d0 fb		bne $b8e4			bne 	_SALength
.b8e9		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b8eb		b0 3d		bcs $b92a			bcs 	_SALengthError
.b8ed		98		tya				tya 				 				; length of the new string
.b8ee		18		clc				clc
.b8ef		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b8f1		90 02		bcc $b8f5			bcc 	_SAHaveLength
.b8f3		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b8f5						_SAHaveLength:
.b8f5		48		pha				pha 								; save length.
.b8f6		38		sec				sec
.b8f7		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b8f9		6d 0a 04	adc $040a			adc 	stringMemory
.b8fc		8d 0a 04	sta $040a			sta 	stringMemory
.b8ff		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b901		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b903		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b905		6d 0b 04	adc $040b			adc 	stringMemory+1
.b908		8d 0b 04	sta $040b			sta 	stringMemory+1
.b90b		85 3b		sta $3b				sta 	zTemp2+1
.b90d		95 60		sta $60,x			sta 	NSMantissa1,x
.b90f		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b910		38		sec				sec
.b911		e9 03		sbc #$03			sbc 	#3
.b913		92 3a		sta ($3a)			sta 	(zTemp2)
.b915		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b917		a0 01		ldy #$01			ldy 	#1
.b919		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b91b						_SACopyNewString:
.b91b		a0 00		ldy #$00			ldy 	#0
.b91d						_SACopyNSLoop:
.b91d		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b91f		c8		iny				iny 								; write two on in string storage
.b920		c8		iny				iny
.b921		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b923		88		dey				dey 								; this makes it one one.
.b924		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b926		d0 f5		bne $b91d			bne 	_SACopyNSLoop
.b928		7a		ply				ply
.b929		60		rts				rts
.b92a						_SALengthError:
.b92a		a9 09		lda #$09		lda	#9
.b92c		4c bc 97	jmp $97bc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b92f						StringSystemInitialise:
.b92f		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b931		8d 0a 04	sta $040a			sta 	0+stringMemory
.b934		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b936		8d 0b 04	sta $040b			sta 	1+stringMemory
.b939		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b93c		60		rts				rts
.b93d						StringSpaceInitialise:
.b93d		20 f6 a2	jsr $a2f6			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b940		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b942		8d 0c 04	sta $040c			sta 	stringInitialised
.b945		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b948		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b94b		ad 0b 04	lda $040b			lda 	stringMemory+1
.b94e		3a		dec a				dec 	a
.b94f		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b952		60		rts				rts
.b953						StringTempAllocate:
.b953		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b955		b0 30		bcs $b987			bcs 	_STALength
.b957		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b95a		30 05		bmi $b961			bmi 	_STAAllocate
.b95c		48		pha				pha 								; save value to subtract.
.b95d		20 3d b9	jsr $b93d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b960		68		pla				pla 								; restore it
.b961						_STAAllocate:
.b961		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b963		18		clc				clc  								; deliberate allows one more
.b964		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b967		8d 0d 04	sta $040d			sta 	stringTempPointer
.b96a		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b96c		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b96e		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b971		69 ff		adc #$ff			adc 	#$FF
.b973		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b976		85 3d		sta $3d				sta 	zsTemp+1
.b978		95 60		sta $60,x			sta 	NSMantissa1,x
.b97a		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b97c		74 70		stz $70,x			stz 	NSMantissa3,x
.b97e		a9 10		lda #$10			lda 	#NSTString
.b980		95 50		sta $50,x			sta 	NSStatus,x
.b982		a9 00		lda #$00			lda 	#0 							; clear the target string
.b984		92 3c		sta ($3c)			sta 	(zsTemp)
.b986		60		rts				rts
.b987						_STALength:
.b987		a9 09		lda #$09		lda	#9
.b989		4c bc 97	jmp $97bc		jmp	ErrorHandler
.b98c						StringTempWrite:
.b98c		48		pha				pha
.b98d		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b98f		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b991		d0 02		bne $b995			bne 	_STWNoCarry
.b993		e6 3d		inc $3d				inc 	zsTemp+1
.b995						_STWNoCarry:
.b995		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b997		92 3c		sta ($3c)			sta 	(zsTemp)
.b999		68		pla				pla
.b99a		60		rts				rts

;******  Return to file: _basic.asm

.b99b						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad a8 07	lda $07a8			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c a7 07	sty $07a7			sty 	EXTColumn
.c02d	a02d	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee a6 07	inc $07a6			inc 	EXTRow  					; bump row
.c035	a035	9c a7 07	stz $07a7			stz 	EXTColumn 					; back to column 0
.c038	a038	ad a6 07	lda $07a6			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd aa 07	cmp $07aa			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce a7 07	dec $07a7			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c a7 07	stz $07a7			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce a6 07	dec $07a6			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad a6 07	lda $07a6			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce a6 07	dec $07a6			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed a9 07	sbc $07a9			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c a7 07	sty $07a7			sty 	EXTColumn
.c08c	a08c	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c a7 07	sty $07a7			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad aa 07	lda $07aa			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd a6 07	cmp $07a6			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee a6 07	inc $07a6			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad a7 07	lda $07a7			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d a7 07	sta $07a7			sta 	EXTColumn
.c0c9	a0c9	cd a9 07	cmp $07a9			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce a7 07	dec $07a7			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d a8 07	and $07a8			and 	EXTTextColour 				; mask out old.
.c135	a135	8d a8 07	sta $07a8			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d a8 07	ora $07a8			ora 	EXTTextColour
.c13c	a13c	8d a8 07	sta $07a8			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad a8 07	lda $07a8			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad a8 07	lda $07a8			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c a6 07	stz $07a6			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c a7 07	stz $07a7			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad a7 07	lda $07a7			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad a6 07	lda $07a6			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 91 81	jsr $8191			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad a7 07	lda $07a7			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc a7 07	cpy $07a7			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad a9 07	lda $07a9			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07a6						EXTRow:
>07a6								.fill 	1
.07a7						EXTColumn:
>07a7								.fill 	1
.07a8						EXTTextColour:
>07a8								.fill 	1
.07a9						EXTScreenWidth:
>07a9								.fill 	1
.07aa						EXTScreenHeight:
>07aa								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d a8 07	sta $07a8			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d a9 07	sta $07a9			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d aa 07	sta $07aa			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad a6 07	lda $07a6			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07ab						gxCurrentX:
>07ab								.fill 	2
.07ad						gxCurrentY:
>07ad								.fill 	2
.07af						gxLastX:
>07af								.fill 	2
.07b1						gxLastY:
>07b1								.fill 	2
.07b3						gxX0:
>07b3								.fill 	2
.07b5						gxY0:
>07b5								.fill 	2
.07b7						gxX1:
>07b7								.fill 	2
.07b9						gxY1:
>07b9								.fill 	2
.07bb						gxSpritesOn:
>07bb								.fill 	1
.07bc						gxBitmapsOn:
>07bc								.fill 	1
.07bd						gxBasePage:
>07bd								.fill 	1
.07be						gxSpritePage:
>07be								.fill 	1
.07bf						gxHeight:
>07bf								.fill 	1
.07c0						gxMode:
>07c0								.fill 	1
.07c1						gxColour:
>07c1								.fill 	1
.07c2						gxEORValue:
>07c2								.fill 	1
.07c3						gxANDValue:
>07c3								.fill 	1
.07c4						gxOriginalLUTValue:
>07c4								.fill 	1
.07c5						gxOffset:
>07c5								.fill 	1
.07c6						GSCurrentSpriteID:
>07c6								.fill 	1
.07c7						GSCurrentSpriteAddr:
>07c7								.fill 	2
.07c9						gxSpriteOffsetBase:
>07c9								.fill 	2
.07cb						gxSpriteLow:
>07cb								.fill 	64
.080b						gxSpriteHigh:
>080b								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d af 07	sta $07af,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d ad 07	sta $07ad			sta 	gxCurrentY
.c7e7	a7e7	9c ae 07	stz $07ae			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d ab 07	sta $07ab			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d ac 07	sta $07ac			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad ac 07	lda $07ac			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad ab 07	lda $07ab			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad ad 07	lda $07ad			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd bf 07	cmp $07bf			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c819	a819	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 4e 08	sta $084e			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 4f 08	stz $084f			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 4c 08	lda $084c			lda 	gxxCentre					; while x <= y
.c848	a848	cd 4d 08	cmp $084d			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 4d 08	lda $084d			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 4c 08	lda $084c			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 4d 08	ldx $084d			ldx	 	gxYCentre
.c875	a875	8d 4d 08	sta $084d			sta 	gxYCentre
.c878	a878	8e 4c 08	stx $084c			stx 	gxxCentre
.c87b	a87b	ad 4f 08	lda $084f			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 4f 08	sta $084f			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 4e 08	lda $084e	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 4f 08	lda $084f			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 4d 08	lda $084d			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 4c 08	lda $084c			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 4e 08	lda $084e			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8bc	a8bc	8d 4d 08	sta $084d			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c8d3	a8d3	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d b4 07	sta $07b4,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 4f 08	stz $084f			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 4c 08	inc $084c			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 4c 08	lda $084c			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 4c 08	inc $084c			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 4d 08	dec $084d			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 4c 08	lda $084c			lda 	gxxCentre
.c8fc	a8fc	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 4f 08	dec $084f			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad b9 07	lda $07b9			lda 	gxY1
.c935	a935	ed b5 07	sbc $07b5			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 4b 08	sta $084b			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 4c 08	stz $084c			stz 	gxxCentre
.c949	a949	ad 4b 08	lda $084b			lda 	gxRadius
.c94c	a94c	8d 4d 08	sta $084d			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c964	a964	7d b3 07	adc $07b3,x			adc 	gxX0,x
.c967	a967	9d b7 07	sta $07b7,x			sta 	gxX1,x
.c96a	a96a	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c96d	a96d	7d b4 07	adc $07b4,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d b8 07	sta $07b8,x			sta 	gxX1+1,x
.c974	a974	7e b7 07	ror $07b7,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.084b						gxRadius:
>084b								.fill 	1
.084c						gxxCentre:
>084c								.fill 	1
.084d						gxYCentre:
>084d								.fill 	1
.084e						gxIsFillMode:
>084e								.fill 	1
.084f						gxYChanged:
>084f								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad bf 07	lda $07bf			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d bd 07	adc $07bd			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd bd 07	cmp $07bd			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c bb 07	stz $07bb			stz 	gxSpritesOn
.c9d1	a9d1	9c bc 07	stz $07bc			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e ab 07	stz $07ab,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d bc 07	sta $07bc			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d bd 07	sta $07bd			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e bf 07	stx $07bf			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d bb 07	sta $07bb			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d be 07	sta $07be			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d c9 07	sta $07c9			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d ca 07	sta $07ca			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c c8 07	stz $07c8			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 0b 08	stz $080b,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac c5 07	ldy $07c5			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d c3 07	and $07c3			and 	gxANDValue
.ca9e	aa9e	4d c2 07	eor $07c2			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 52 08	lda $0852			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad b3 07	lda $07b3			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d b7 07	eor $07b7			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad b4 07	lda $07b4			lda 	gxX0+1
.cac4	aac4	4d b8 07	eor $07b8			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad b9 07	lda $07b9			lda 	gxY1
.cacb	aacb	4d b5 07	eor $07b5			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 54 08	lda $0854			lda 	gxPosition
.cad3	aad3	6d 55 08	adc $0855			adc 	gxAdjust
.cad6	aad6	8d 54 08	sta $0854			sta 	gxPosition
.cad9	aad9	9c 57 08	stz $0857			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 56 08	cmp $0856			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 57 08	dec $0857			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 56 08	sbc $0856			sbc 	gxTotal
.caea	aaea	8d 54 08	sta $0854			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 52 08	lda $0852			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 57 08	lda $0857			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 57 08	lda $0857			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 53 08	lda $0853			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad b3 07	lda $07b3			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce b4 07	dec $07b4			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce b3 07	dec $07b3			dec 	gxX0
.cb1b	ab1b	ce c5 07	dec $07c5			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad c5 07	lda $07c5			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee b3 07	inc $07b3			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee b4 07	inc $07b4			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee c5 07	inc $07c5			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee b5 07	inc $07b5			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad b9 07	lda $07b9			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed b5 07	sbc $07b5			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 51 08	sta $0851			sta 	gxDiffY
.cb63	ab63	9c 53 08	stz $0853			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad b7 07	lda $07b7			lda 	gxX1
.cb6a	ab6a	ed b3 07	sbc $07b3			sbc 	gxX0
.cb6d	ab6d	8d 50 08	sta $0850			sta 	gxDiffX
.cb70	ab70	ad b8 07	lda $07b8			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 50 08	ror $0850			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 50 08	sbc $0850			sbc 	gxDiffX
.cb83	ab83	8d 50 08	sta $0850			sta 	gxDiffX
.cb86	ab86	ce 53 08	dec $0853			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 52 08	stz $0852			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 51 08	lda $0851			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 55 08	sta $0855			sta 	gxAdjust
.cb92	ab92	ad 50 08	lda $0850			lda 	gxDiffX
.cb95	ab95	8d 56 08	sta $0856			sta 	gxTotal
.cb98	ab98	ad 51 08	lda $0851			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 50 08	cmp $0850			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 52 08	dec $0852			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 50 08	lda $0850			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 55 08	sta $0855			sta 	gxAdjust
.cba9	aba9	ad 51 08	lda $0851			lda 	gxDiffY
.cbac	abac	8d 56 08	sta $0856			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 56 08	lda $0856			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 54 08	sta $0854			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.0850						gxDiffX:
>0850								.fill 	1
.0851						gxDiffY:
>0851								.fill 	1
.0852						gxIsDiffYLarger:
>0852								.fill 	1
.0853						gxDXNegative:
>0853								.fill 	1
.0854						gxPosition:
>0854								.fill 	1
.0855						gxAdjust:
>0855								.fill 	1
.0856						gxTotal:
>0856								.fill 	1
.0857						gxAddSelect:
>0857								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e c1 07	stx $07c1			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d c0 07	sta $07c0			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c c3 07	stz $07c3			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae c1 07	ldx $07c1			ldx 	gxColour
.cbc9	abc9	8e c2 07	stx $07c2			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e c3 07	stx $07c3			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c c2 07	stz $07c2			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad c3 07	lda $07c3			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d c3 07	sta $07c3			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac c5 07	ldy $07c5			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d c3 07	and $07c3			and 	gxANDValue
.cbf3	abf3	4d c2 07	eor $07c2			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad b5 07	lda $07b5			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd b9 07	cmp $07b9			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee b5 07	inc $07b5			inc 	gxY0 						; change Y pos
.cc22	ac22	ad b5 07	lda $07b5			lda 	gxY0 						; reached last line
.cc25	ac25	cd b9 07	cmp $07b9			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad b7 07	lda $07b7			lda		gxX1
.cc42	ac42	ed b3 07	sbc $07b3			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad b8 07	lda $07b8			lda 	gxX1+1
.cc4a	ac4a	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad c5 07	lda $07c5			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d c3 07	and $07c3			and 	gxANDValue
.cc67	ac67	4d c2 07	eor $07c2			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d c3 07	and $07c3			and 	gxANDValue
.cc85	ac85	4d c2 07	eor $07c2			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d c3 07	and $07c3			and 	gxANDValue
.cc9d	ac9d	4d c2 07	eor $07c2			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d c5 07	sta $07c5			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 58 08	sta $0858			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 59 08	sta $0859			sta 	gxMask 						; and mask
.ccc4	acc4	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad b5 07	lda $07b5			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 5b 08	sty $085b			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 5a 08	stx $085a			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 5d 08	lda $085d			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 5c 08	sta $085c			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 5d 08	bit $085d			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 59 08	lda $0859			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 5c 08	lda $085c			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad b5 07	lda $07b5			lda 	gxY0 						; off screen
.ccfd	acfd	cd bf 07	cmp $07bf			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 58 08	cmp $0858			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d b5 07	sta $07b5			sta 	gxY0
.cd16	ad16	ae 5c 08	ldx $085c			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 58 08	lda $0858			lda 	gxSize
.cd1d	ad1d	6d b3 07	adc $07b3			adc 	gxX0
.cd20	ad20	8d b3 07	sta $07b3			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee b4 07	inc $07b4			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 5a 08	jmp ($085a)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 5c 08	lda $085c			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c c0 07	bit $07c0			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 59 08	lda $0859			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 5d 08	lda $085d			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d c3 07	and $07c3			and 	gxANDValue
.cd61	ad61	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 58 08	cmp $0858			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee b5 07	inc $07b5			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0858						gxSize:
>0858								.fill 	1
.0859						gxMask:
>0859								.fill 	1
.085a						gxAcquireVector:
>085a								.fill 	2
.085c						gxScale:
>085c								.fill 	1
.085d						gxUseMode:
>085d								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d c0 07	eor $07c0			eor 	gxMode
.cd84	ad84	8d 5d 08	sta $085d			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad c1 07	lda $07c1			lda 	gxColour
.cdbd	adbd	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad bb 07	lda $07bb			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d c0 07	eor $07c0			eor 	gxMode
.cdd1	add1	8d 5d 08	sta $085d			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 5e 08	lda $085e			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad be 07	lda $07be			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 5f 08	ldx $085f			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 61 08	adc $0861			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 62 08	adc $0862			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 5e 08	cpy $085e			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d c6 07	sta $07c6			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d c8 07	sta $07c8			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d c7 07	sta $07c7			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 61 08	lda $0861			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 62 08	lda $0862			lda 	gxSpriteOffset+1
.ce92	ae92	6d c9 07	adc $07c9			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad ca 07	lda $07ca			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 60 08	ora $0860			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 0b 08	ora $080b,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad bb 07	lda $07bb			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d b3 07	adc $07b3			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad b4 07	lda $07b4			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d b5 07	adc $07b5			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e b4 07	lsr $07b4			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e b3 07	ror $07b3			ror 	gxX0
.cf3d	af3d	4e b3 07	lsr $07b3			lsr 	gxX0
.cf40	af40	4e b5 07	lsr $07b5			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e b5 07	lsr $07b5			lsr 	gxY0
.cf46	af46	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d b3 07	ora $07b3			ora 	gxX0
.cf51	af51	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cf54	af54	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d b5 07	ora $07b5			ora 	gxY0
.cf5c	af5c	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d c4 07	sta $07c4			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad c4 07	lda $07c4			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad b5 07	lda $07b5			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad b3 07	lda $07b3			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d c5 07	sta $07c5			sta 	gxOffset
.cfae	afae	ad b4 07	lda $07b4			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d bd 07	adc $07bd			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad c5 07	lda $07c5			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d c5 07	sta $07c5			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d cb 07	ora $07cb,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y
.d000	b000	7d 0b 08	adc $080b,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y
.d02e	b02e	fd cb 07	sbc $07cb,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad be 07	lda $07be			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 62 08	sta $0862			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 5f 08	sta $085f			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 5e 08	sta $085e			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 60 08	sta $0860			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 61 08	sta $0861			sta 	gxSpriteOffset
.d07b	b07b	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d07e	b07e	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d081	b081	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d084	b084	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.085e						gxSizePixels:
>085e								.fill 	1
.085f						gxSizeBits:
>085f								.fill 	1
.0860						gxSpriteLUT:
>0860								.fill 	1
.0861						gxSpriteOffset:
>0861								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad b3 07	lda $07b3			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd b7 07	cmp $07b7			cmp 	gxX1
.d098	b098	ad b4 07	lda $07b4			lda 	gxX0+1
.d09b	b09b	ed b8 07	sbc $07b8			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad b5 07	lda $07b5			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd b9 07	cmp $07b9			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd b3 07	lda $07b3,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 b3 07	lda $07b3,y			lda 	gxX0,y
.d0c8	b0c8	9d b3 07	sta $07b3,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 b3 07	sta $07b3,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d10e	b10e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d114	b114	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d11c	b11c	45 24 28
>d11f	b11f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d127	b127	45 24 28
>d12a	b12a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d130	b130	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d138	b138	28
>d139	b139	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d141	b141	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d147	b147	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d14f	b14f	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d157	b157	55 4e 54 28
>d15b	b15b	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d163	b163	54 24 28
>d166	b166	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d16d	b16d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d174	b174	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d17b	b17b	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>d183	b183	4e 28
>d185	b185	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>d18d	b18d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>d193	b193	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>d199	b199	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>d1a0	b1a0	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>d1a6	b1a6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>d1ac	b1ac	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>d1b3	b1b3	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>d1bb	b1bb	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>d1c3	b1c3	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>d1cb	b1cb	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>d1d3	b1d3	47 28
>d1d5	b1d5	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>d1dd	b1dd	28
>d1de	b1de	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>d1e6	b1e6	28
>d1e7	b1e7	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>d1ed	b1ed	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>d1f3	b1f3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>d1f9	b1f9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>d200	b200	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>d208	b208	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>d20e	b20e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>d214	b214	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>d219	b219	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>d21d	b21d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>d223	b223	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>d22b	b22b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>d232	b232	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>d239	b239	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>d241	b241	43
>d242	b242	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>d248	b248	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>d24e	b24e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>d255	b255	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>d25b	b25b	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>d25f	b25f	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>d263	b263	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>d269	b269	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>d271	b271	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>d278	b278	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>d27f	b27f	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>d287	b287	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>d28d	b28d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>d292	b292	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>d29a	b29a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>d2a0	b2a0	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>d2a6	b2a6	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>d2ab	b2ab	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>d2b1	b2b1	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>d2b8	b2b8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>d2bd	b2bd	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>d2c3	b2c3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>d2ca	b2ca	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>d2d2	b2d2	59
>d2d3	b2d3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>d2d8	b2d8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>d2dc	b2dc	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>d2e4	b2e4	45
>d2e5	b2e5	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>d2ed	b2ed	45
>d2ee	b2ee	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>d2f4	b2f4	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>d2fa	b2fa	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>d301	b301	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>d308	b308	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>d30f	b30f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>d315	b315	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>d31b	b31b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>d320	b320	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>d327	b327	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>d32e	b32e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>d336	b336	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>d33c	b33c	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>d340	b340	ff					.text	$FF
.d341	b341					KeywordSet1:
>d341	b341	00 65					.text	0,$65,""               ; $80 !0:EOF
>d343	b343	00 58					.text	0,$58,""               ; $81 !1:SH1
>d345	b345	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d347	b347	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d34f	b34f	4c 45
>d351	b351	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d359	b359	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d361	b361	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d368	b368	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d36f	b36f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d374	b374	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37c	b37c	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d381	b381	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d386	b386	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d38d	b38d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d392	b392	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d39a	b39a	45
>d39b	b39b	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d39f	b39f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d3a6	b3a6	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3ac	b3ac	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3b3	b3b3	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3ba	b3ba	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3c0	b3c0	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3c6	b3c6	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>d3cd	b3cd	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>d3d2	b3d2	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>d3d8	b3d8	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>d3df	b3df	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>d3e7	b3e7	45
>d3e8	b3e8	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d3f0	b3f0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d3f5	b3f5	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d3fb	b3fb	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d403	b403	45
>d404	b404	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d40c	b40c	45
>d40d	b40d	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d414	b414	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d41c	b41c	53
>d41d	b41d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d423	b423	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a3 VERIFY
>d42b	b42b	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a4 XGO
>d430	b430	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a5 XLOAD
>d437	b437	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a6 ZAP
>d43c	b43c	ff					.text	$FF
.d43d	b43d					KeywordSet2:
>d43d	b43d	00 65					.text	0,$65,""               ; $80 !0:EOF
>d43f	b43f	00 58					.text	0,$58,""               ; $81 !1:SH1
>d441	b441	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d443	b443	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d448	b448	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d44d	b44d	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d452	b452	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d457	b457	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d45c	b45c	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d461	b461	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d466	b466	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d46b	b46b	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d470	b470	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d475	b475	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d47a	b47a	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d47f	b47f	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d484	b484	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d489	b489	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d48e	b48e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d493	b493	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d498	b498	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d49d	b49d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4a2	b4a2	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4a7	b4a7	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4ac	b4ac	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4b1	b4b1	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4b6	b4b6	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4bb	b4bb	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4c0	b4c0	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4c5	b4c5	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4ca	b4ca	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4cf	b4cf	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4d4	b4d4	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4d9	b4d9	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4de	b4de	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4e3	b4e3	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4e8	b4e8	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4ed	b4ed	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4f2	b4f2	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4f7	b4f7	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4fc	b4fc	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d501	b501	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d506	b506	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d50b	b50b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d510	b510	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d515	b515	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d51a	b51a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d51f	b51f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d524	b524	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d529	b529	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d52e	b52e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d533	b533	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d538	b538	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d53d	b53d	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d542	b542	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d547	b547	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d54c	b54c	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d551	b551	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d556	b556	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d55b	b55b	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d560	b560	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d565	b565	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d56a	b56a	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d56f	b56f	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d574	b574	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d579	b579	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d57e	b57e	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d583	b583	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d588	b588	ff					.text	$FF
.d589	b589					Export_TKListConvertLine:
.d589	b589	48		pha				pha 								; save indent on the stack
.d58a	b58a	9c 19 04	stz $0419			stz 	tbOffset
.d58d	b58d	9c 29 04	stz $0429			stz 	tokenBuffer
.d590	b590	9c 25 04	stz $0425			stz 	currentListColour
.d593	b593	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d595	b595	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d598	b598	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d59a	b59a	b1 30		lda ($30),y			lda 	(codePtr),y
.d59c	b59c	aa		tax				tax
.d59d	b59d	88		dey				dey
.d59e	b59e	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a0	b5a0	20 83 b7	jsr $b783			jsr 	LCLWriteNumberXA
.d5a3	b5a3	68		pla				pla 								; adjustment to indent
.d5a4	b5a4	48		pha				pha 								; save on stack
.d5a5	b5a5	10 0c		bpl $b5b3			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5a7	b5a7	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5a8	b5a8	6d 22 04	adc $0422			adc 	listIndent
.d5ab	b5ab	8d 22 04	sta $0422			sta 	listIndent
.d5ae	b5ae	10 03		bpl $b5b3			bpl 	_LCNoAdjust
.d5b0	b5b0	9c 22 04	stz $0422			stz 	listIndent
.d5b3	b5b3					_LCNoAdjust:
.d5b3	b5b3	18		clc				clc		 							; work out actual indent.
.d5b4	b5b4	ad 22 04	lda $0422			lda 	listIndent
.d5b7	b5b7	0a		asl a				asl 	a
.d5b8	b5b8	69 07		adc #$07			adc 	#7
.d5ba	b5ba	85 36		sta $36				sta 	zTemp0
.d5bc	b5bc					_LCPadOut:
.d5bc	b5bc	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5be	b5be	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d5c1	b5c1	ad 19 04	lda $0419			lda 	tbOffset
.d5c4	b5c4	c5 36		cmp $36				cmp 	zTemp0
.d5c6	b5c6	d0 f4		bne $b5bc			bne 	_LCPadOut
.d5c8	b5c8	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5ca	b5ca					_LCMainLoop:
.d5ca	b5ca	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5cc	b5cc	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d5cf	b5cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d5d1	b5d1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5d3	b5d3	f0 17		beq $b5ec			beq 	_LCExit
.d5d5	b5d5	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5d7	b5d7	90 1e		bcc $b5f7			bcc 	_LCDoubles
.d5d9	b5d9	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5db	b5db	90 2a		bcc $b607			bcc 	_LCShiftPunc
.d5dd	b5dd	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5df	b5df	90 35		bcc $b616			bcc 	_LCPunctuation
.d5e1	b5e1	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5e3	b5e3	90 51		bcc $b636			bcc 	_LCIdentifiers
.d5e5	b5e5	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5e7	b5e7	90 73		bcc $b65c			bcc 	_LCTokens
.d5e9	b5e9	4c bc b6	jmp $b6bc			jmp 	_LCData 					; 254-5 are data objects
.d5ec	b5ec					_LCExit:
.d5ec	b5ec	68		pla				pla 								; get old indent adjust
.d5ed	b5ed	30 07		bmi $b5f6			bmi 	_LCExit2
.d5ef	b5ef	18		clc				clc 								; add to indent if +ve
.d5f0	b5f0	6d 22 04	adc $0422			adc 	listIndent
.d5f3	b5f3	8d 22 04	sta $0422			sta 	listIndent
.d5f6	b5f6					_LCExit2:
.d5f6	b5f6	60		rts				rts
.d5f7	b5f7					_LCDoubles:
.d5f7	b5f7	48		pha				pha
.d5f8	b5f8	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5f9	b5f9	29 02		and #$02			and 	#2
.d5fb	b5fb	09 3c		ora #$3c			ora 	#60 						; make < >
.d5fd	b5fd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d600	b600	68		pla				pla 								; restore, do lower bit
.d601	b601	29 03		and #$03			and 	#3
.d603	b603	09 3c		ora #$3c			ora 	#60
.d605	b605	80 0f		bra $b616			bra		_LCPunctuation 				; print, increment, loop
.d607	b607					_LCShiftPunc:
.d607	b607	aa		tax				tax 								; save in X
.d608	b608	29 07		and #$07			and 	#7 							; lower 3 bits
.d60a	b60a	f0 02		beq $b60e			beq 	_LCNoAdd
.d60c	b60c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d60e	b60e					_LCNoAdd:
.d60e	b60e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d610	b610	90 02		bcc $b614			bcc 	_LCNoAdd2
.d612	b612	09 20		ora #$20			ora 	#32 						; adds $20
.d614	b614					_LCNoAdd2:
.d614	b614	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d616	b616					_LCPunctuation:
.d616	b616	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d618	b618	d0 03		bne $b61d			bne 	_LCPContinue
.d61a	b61a	20 31 b7	jsr $b731			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d61d	b61d					_LCPContinue:
.d61d	b61d	c9 2e		cmp #$2e			cmp 	#'.'
.d61f	b61f	f0 08		beq $b629			beq 	_LCPIsConstant
.d621	b621	c9 30		cmp #$30			cmp 	#'0'
.d623	b623	90 0b		bcc $b630			bcc 	_LCPNotConstant
.d625	b625	c9 3a		cmp #$3a			cmp 	#'9'+1
.d627	b627	b0 07		bcs $b630			bcs 	_LCPNotConstant
.d629	b629					_LCPIsConstant:
.d629	b629	48		pha				pha
.d62a	b62a	a9 87		lda #$87			lda 	#CLIConstant+$80
.d62c	b62c	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d62f	b62f	68		pla				pla
.d630	b630					_LCPNotConstant:
.d630	b630	c8		iny				iny 								; consume character
.d631	b631	20 1b b7	jsr $b71b			jsr 	LCLWrite 					; write it out.
.d634	b634	80 94		bra $b5ca			bra 	_LCMainLoop 				; go round again.
.d636	b636					_LCIdentifiers:
.d636	b636	18		clc				clc 								; convert to physical address
.d637	b637	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d639	b639	85 37		sta $37				sta 	zTemp0+1
.d63b	b63b	c8		iny				iny
.d63c	b63c	b1 30		lda ($30),y			lda 	(codePtr),y
.d63e	b63e	85 36		sta $36				sta 	zTemp0
.d640	b640	c8		iny				iny
.d641	b641	5a		phy				phy 								; save position
.d642	b642	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d644	b644	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d647	b647	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d649	b649					_LCOutIdentifier:
.d649	b649	c8		iny				iny
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d64c	b64c	29 7f		and #$7f			and 	#$7F
.d64e	b64e	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d651	b651	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d654	b654	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d656	b656	10 f1		bpl $b649			bpl 	_LCOutIdentifier
.d658	b658	7a		ply				ply 								; restore position
.d659	b659	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d65c	b65c					_LCTokens:
.d65c	b65c	aa		tax				tax 								; token in X
.d65d	b65d	a9 3d		lda #$3d			lda 	#((KeywordSet2) & $FF)
.d65f	b65f	85 36		sta $36				sta 	0+zTemp0
.d661	b661	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d663	b663	85 37		sta $37				sta 	1+zTemp0
.d665	b665	e0 82		cpx #$82			cpx 	#$82
.d667	b667	f0 16		beq $b67f			beq 	_LCUseShift
.d669	b669	a9 41		lda #$41			lda 	#((KeywordSet1) & $FF)
.d66b	b66b	85 36		sta $36				sta 	0+zTemp0
.d66d	b66d	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d66f	b66f	85 37		sta $37				sta 	1+zTemp0
.d671	b671	e0 81		cpx #$81			cpx 	#$81
.d673	b673	f0 0a		beq $b67f			beq 	_LCUseShift
.d675	b675	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d677	b677	85 36		sta $36				sta 	0+zTemp0
.d679	b679	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d67b	b67b	85 37		sta $37				sta 	1+zTemp0
.d67d	b67d	80 01		bra $b680			bra 	_LCNoShift
.d67f	b67f					_LCUseShift:
.d67f	b67f	c8		iny				iny
.d680	b680					_LCNoShift:
.d680	b680	20 45 b7	jsr $b745			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d683	b683	b1 30		lda ($30),y			lda 	(codePtr),y
.d685	b685	aa		tax				tax 								; into X
.d686	b686					_LCFindText:
.d686	b686	ca		dex				dex
.d687	b687	10 0e		bpl $b697			bpl 	_LCFoundText 				; found text.
.d689	b689	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d68b	b68b	1a		inc a				inc 	a 							; one extra for size
.d68c	b68c	38		sec				sec 								; one extra for checksum
.d68d	b68d	65 36		adc $36				adc 	zTemp0 						; go to next token
.d68f	b68f	85 36		sta $36				sta 	zTemp0
.d691	b691	90 f3		bcc $b686			bcc 	_LCFindText
.d693	b693	e6 37		inc $37				inc 	zTemp0+1
.d695	b695	80 ef		bra $b686			bra 	_LCFindText
.d697	b697					_LCFoundText:
.d697	b697	5a		phy				phy 								; save List position
.d698	b698	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d69a	b69a	aa		tax				tax
.d69b	b69b	a9 86		lda #$86			lda 	#CLIToken+$80
.d69d	b69d	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6a0	b6a0	a0 02		ldy #$02			ldy 	#2
.d6a2	b6a2					_LCCopyToken:
.d6a2	b6a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6a4	b6a4	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d6a7	b6a7	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6aa	b6aa	c8		iny				iny
.d6ab	b6ab	ca		dex				dex
.d6ac	b6ac	d0 f4		bne $b6a2			bne 	_LCCopyToken
.d6ae	b6ae	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6b0	b6b0	f0 05		beq $b6b7			beq 	_LCNoSpace
.d6b2	b6b2	a9 20		lda #$20			lda 	#' '
.d6b4	b6b4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6b7	b6b7					_LCNoSpace:
.d6b7	b6b7	7a		ply				ply 								; restore position.
.d6b8	b6b8	c8		iny				iny 								; consume token
.d6b9	b6b9	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop 				; and go around again.
.d6bc	b6bc					_LCData:
.d6bc	b6bc	48		pha				pha 								; save type $FE/$FF
.d6bd	b6bd	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6bf	b6bf	c9 fe		cmp #$fe			cmp 	#$FE
.d6c1	b6c1	f0 22		beq $b6e5			beq 	_LCHaveOpener
.d6c3	b6c3	a2 22		ldx #$22			ldx 	#'"'
.d6c5	b6c5	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6c7	b6c7	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6ca	b6ca	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6cc	b6cc	d0 17		bne $b6e5			bne 	_LCHaveOpener
.d6ce	b6ce	88		dey				dey 								; what precedes it ?
.d6cf	b6cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d1	b6d1	c8		iny				iny
.d6d2	b6d2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6d4	b6d4	d0 0f		bne $b6e5			bne 	_LCHaveOpener
.d6d6	b6d6	a9 09		lda #$09			lda 	#9 							; tab
.d6d8	b6d8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6db	b6db	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6dd	b6dd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e0	b6e0	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6e2	b6e2	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6e5	b6e5					_LCHaveOpener:
.d6e5	b6e5	8a		txa				txa 								; output prefix (# or ")
.d6e6	b6e6	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e9	b6e9	c8		iny				iny 								; get count
.d6ea	b6ea	b1 30		lda ($30),y			lda 	(codePtr),y
.d6ec	b6ec	aa		tax				tax
.d6ed	b6ed	c8		iny				iny 								; point at first character
.d6ee	b6ee					_LCOutData:
.d6ee	b6ee	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f0	b6f0	c9 00		cmp #$00			cmp 	#0
.d6f2	b6f2	f0 03		beq $b6f7			beq 	_LCNoPrint
.d6f4	b6f4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6f7	b6f7					_LCNoPrint:
.d6f7	b6f7	c8		iny				iny
.d6f8	b6f8	ca		dex				dex
.d6f9	b6f9	d0 f3		bne $b6ee			bne 	_LCOutData
.d6fb	b6fb	68		pla				pla 								; closing " required ?
.d6fc	b6fc	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6fe	b6fe	d0 0f		bne $b70f			bne 	_LCNoQuote
.d700	b700	a9 22		lda #$22			lda 	#'"'
.d702	b702	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d705	b705	ad a8 07	lda $07a8			lda 	EXTTextColour
.d708	b708	29 0f		and #$0f			and 	#$0F
.d70a	b70a	09 90		ora #$90			ora 	#$90
.d70c	b70c	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d70f	b70f					_LCNoQuote:
.d70f	b70f	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d712	b712					LCLWriteColour:
.d712	b712	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d715	b715	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d718	b718	d0 01		bne $b71b			bne 	LCLWrite 					; if different, output it
.d71a	b71a	60		rts				rts
.d71b	b71b					LCLWrite:
.d71b	b71b	da		phx				phx
.d71c	b71c	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d71f	b71f	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d722	b722	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d725	b725	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d728	b728	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d72a	b72a	30 03		bmi $b72f			bmi 	_LCLNoColour
.d72c	b72c	8d 23 04	sta $0423			sta 	lcLastCharacter
.d72f	b72f					_LCLNoColour:
.d72f	b72f	fa		plx				plx
.d730	b730	60		rts				rts
.d731	b731					LCLDeleteLastSpace:
.d731	b731	48		pha				pha
.d732	b732	da		phx				phx
.d733	b733	ae 19 04	ldx $0419			ldx 	tbOffset
.d736	b736	f0 0a		beq $b742			beq 	_LCDLSExit
.d738	b738	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d73b	b73b	c9 20		cmp #$20			cmp 	#' '
.d73d	b73d	d0 03		bne $b742			bne 	_LCDLSExit
.d73f	b73f	ce 19 04	dec $0419			dec 	tbOffset
.d742	b742					_LCDLSExit:
.d742	b742	fa		plx				plx
.d743	b743	68		pla				pla
.d744	b744	60		rts				rts
.d745	b745					LCLCheckSpaceRequired:
.d745	b745	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d748	b748	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d74a	b74a	f0 1b		beq $b767			beq 	_LCCSRSpace
.d74c	b74c	c9 29		cmp #$29			cmp 	#')'
.d74e	b74e	f0 17		beq $b767			beq 	_LCCSRSpace
.d750	b750	c9 23		cmp #$23			cmp 	#'#'
.d752	b752	f0 13		beq $b767			beq 	_LCCSRSpace
.d754	b754	20 6d b7	jsr $b76d			jsr 	LCLLowerCase 				; saves a little effort
.d757	b757	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d759	b759	90 11		bcc $b76c			bcc 	_LCCSRExit
.d75b	b75b	c9 3a		cmp #$3a			cmp 	#"9"+1
.d75d	b75d	90 08		bcc $b767			bcc 	_LCCSRSpace
.d75f	b75f	c9 61		cmp #$61			cmp 	#"a"
.d761	b761	90 09		bcc $b76c			bcc 	_LCCSRExit
.d763	b763	c9 7b		cmp #$7b			cmp 	#"z"+1
.d765	b765	b0 05		bcs $b76c			bcs 	_LCCSRExit
.d767	b767					_LCCSRSpace:
.d767	b767	a9 20		lda #$20			lda 	#' '
.d769	b769	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d76c	b76c					_LCCSRExit:
.d76c	b76c	60		rts				rts
.d76d	b76d					LCLLowerCase:
.d76d	b76d	c9 41		cmp #$41			cmp 	#"A"
.d76f	b76f	90 06		bcc $b777			bcc 	_LCLLCOut
.d771	b771	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d773	b773	b0 02		bcs $b777			bcs 	_LCLLCOut
.d775	b775	69 20		adc #$20			adc 	#$20
.d777	b777					_LCLLCOut:
.d777	b777	60		rts				rts
.d778	b778					LCLUpperCase:
.d778	b778	c9 61		cmp #$61			cmp 	#"a"
.d77a	b77a	90 06		bcc $b782			bcc 	_LCLUCOut
.d77c	b77c	c9 7b		cmp #$7b			cmp 	#"z"+1
.d77e	b77e	b0 02		bcs $b782			bcs 	_LCLUCOut
.d780	b780	e9 1f		sbc #$1f			sbc 	#$1F
.d782	b782					_LCLUCOut:
.d782	b782	60		rts				rts
.d783	b783					LCLWriteNumberXA:
.d783	b783	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d785	b785					_LCLWNLoop1:
.d785	b785	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d787	b787					_LCLWNLoop2:
.d787	b787	48		pha				pha 								; save initial LSB
.d788	b788	38		sec				sec
.d789	b789	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d78b	b78b	f9 bc b7	sbc $b7bc,y			sbc 	_LCLWNTable,y
.d78e	b78e	48		pha				pha
.d78f	b78f	8a		txa				txa
.d790	b790	f9 bd b7	sbc $b7bd,y			sbc 	_LCLWNTable+1,y
.d793	b793	90 07		bcc $b79c			bcc 	_LCLWNUnderflow
.d795	b795	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d797	b797	aa		tax				tax 								; update X
.d798	b798	68		pla				pla 								; restore A
.d799	b799	7a		ply				ply 								; throw original
.d79a	b79a	80 eb		bra $b787			bra 	_LCLWNLoop2 				; try again.
.d79c	b79c					_LCLWNUnderflow:
.d79c	b79c	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d79e	b79e	d0 06		bne $b7a6			bne 	_LCLWNOut
.d7a0	b7a0	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7a3	b7a3	3a		dec a				dec 	a
.d7a4	b7a4	f0 04		beq $b7aa			beq 	_LCLWNNext
.d7a6	b7a6					_LCLWNOut:
.d7a6	b7a6	98		tya				tya
.d7a7	b7a7	20 b6 b7	jsr $b7b6			jsr 	_LCLWNOutDigit
.d7aa	b7aa					_LCLWNNext:
.d7aa	b7aa	7a		ply				ply 							 	; restore original value.
.d7ab	b7ab	68		pla				pla
.d7ac	b7ac	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7ae	b7ae	c8		iny				iny
.d7af	b7af	c8		iny				iny
.d7b0	b7b0	84 37		sty $37				sty 	zTemp0+1
.d7b2	b7b2	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7b4	b7b4	d0 cf		bne $b785			bne 	_LCLWNLoop1
.d7b6	b7b6					_LCLWNOutDigit:
.d7b6	b7b6	09 30		ora #$30			ora 	#'0'
.d7b8	b7b8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d7bb	b7bb	60		rts				rts
.d7bc	b7bc					_LCLWNTable:
>d7bc	b7bc	10 27						.word 	10000
>d7be	b7be	e8 03						.word 	1000
>d7c0	b7c0	64 00						.word 	100
>d7c2	b7c2	0a 00						.word 	10
.d7c4	b7c4					TOKSearchTable:
.d7c4	b7c4	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7c6	b7c6	85 36		sta $36				sta 	zTemp0
.d7c8	b7c8	a0 00		ldy #$00			ldy 	#0
.d7ca	b7ca	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7cc	b7cc	85 38		sta $38				sta 	zTemp1
.d7ce	b7ce					_TSTLoop:
.d7ce	b7ce	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7d0	b7d0	30 49		bmi $b81b			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7d2	b7d2	f0 2e		beq $b802			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7d4	b7d4	c8		iny				iny 								; get the hash
.d7d5	b7d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7d7	b7d7	88		dey				dey
.d7d8	b7d8	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7db	b7db	d0 25		bne $b802			bne 	_TSTNext
.d7dd	b7dd	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7e0	b7e0	38		sec				sec
.d7e1	b7e1	ed 00 04	sbc $0400			sbc 	identStart
.d7e4	b7e4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7e6	b7e6	d0 1a		bne $b802			bne 	_TSTNext
.d7e8	b7e8	5a		phy				phy 								; save Y , we might fail to match.
.d7e9	b7e9	c8		iny				iny 								; point to text
.d7ea	b7ea	c8		iny				iny
.d7eb	b7eb	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7ee	b7ee					_TSTCompareName:
.d7ee	b7ee	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7f3	b7f3	d0 0c		bne $b801			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7f5	b7f5	e8		inx				inx
.d7f6	b7f6	c8		iny				iny
.d7f7	b7f7	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7fa	b7fa	d0 f2		bne $b7ee			bne 	_TSTCompareName
.d7fc	b7fc	7a		ply				ply 								; throw Y
.d7fd	b7fd	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7ff	b7ff	38		sec				sec 								; return with CS = passed.
.d800	b800	60		rts				rts
.d801	b801					_TSTNextPullY:
.d801	b801	7a		ply				ply 								; restore current, fall through.
.d802	b802					_TSTNext:
.d802	b802	e6 38		inc $38				inc 	zTemp1 						; token counter
.d804	b804	98		tya				tya
.d805	b805	18		clc				clc
.d806	b806	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d808	b808	1a		inc a				inc 	a 							; +1
.d809	b809	1a		inc a				inc 	a 							; +2
.d80a	b80a	a8		tay				tay
.d80b	b80b	10 c1		bpl $b7ce			bpl 	_TSTLoop 					; if Y < $80 loop back
.d80d	b80d	98		tya				tya 								; add Y to zTemp0 and reset Y
.d80e	b80e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d810	b810	18		clc				clc  								; but have tables > 255 bytes
.d811	b811	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d813	b813	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d815	b815	90 b7		bcc $b7ce			bcc 	_TSTLoop
.d817	b817	e6 37		inc $37				inc 	zTemp0+1
.d819	b819	80 b3		bra $b7ce			bra 	_TSTLoop
.d81b	b81b					_TSTFail:
.d81b	b81b	18		clc				clc
.d81c	b81c	60		rts				rts
.d81d	b81d					Export_TKTokeniseLine:
.d81d	b81d	20 ea b9	jsr $b9ea			jsr 	LCLFixLineBufferCase 		; fix line case
.d820	b820	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d822	b822	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d825	b825	9c 27 04	stz $0427			stz 	tokenLineNumber
.d828	b828	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d82b	b82b	a2 ff		ldx #$ff			ldx 	#$FF
.d82d	b82d					_TKFindFirst:
.d82d	b82d	e8		inx				inx
.d82e	b82e	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d831	b831	f0 62		beq $b895			beq 	_TKExit
.d833	b833	c9 20		cmp #$20			cmp 	#' '
.d835	b835	90 f6		bcc $b82d			bcc 	_TKFindFirst
.d837	b837	c9 30		cmp #$30			cmp 	#'0'
.d839	b839	90 07		bcc $b842			bcc 	_TKNoLineNumber
.d83b	b83b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d83d	b83d	b0 03		bcs $b842			bcs 	_TKNoLineNumber
.d83f	b83f	20 14 ba	jsr $ba14			jsr 	TOKExtractLineNumber
.d842	b842					_TKNoLineNumber:
.d842	b842					_TKTokeniseLoop:
.d842	b842	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d845	b845	f0 4e		beq $b895			beq 	_TKExit
.d847	b847	e8		inx				inx
.d848	b848	c9 20		cmp #$20			cmp 	#' '
.d84a	b84a	f0 f6		beq $b842			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d84c	b84c	ca		dex				dex 								; undo last get, A contains character, X is position.
.d84d	b84d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d84f	b84f	f0 68		beq $b8b9			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d851	b851	c9 41		cmp #$41			cmp 	#'A'
.d853	b853	90 04		bcc $b859			bcc 	_TKTokenisePunctuation
.d855	b855	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d857	b857	90 60		bcc $b8b9			bcc 	_TKTokeniseIdentifier
.d859	b859					_TKTokenisePunctuation:
.d859	b859	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d85b	b85b	f0 2e		beq $b88b			beq 	_TKString
.d85d	b85d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d85f	b85f	f0 2f		beq $b890			beq 	_TKHexConstant
.d861	b861	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d863	b863	f0 36		beq $b89b			beq 	_TKCheckDouble
.d865	b865	c9 3e		cmp #$3e			cmp 	#'>'
.d867	b867	f0 32		beq $b89b			beq 	_TKCheckDouble
.d869	b869					_TKStandardPunctuation:
.d869	b869	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d86c	b86c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d86e	b86e	90 0e		bcc $b87e			bcc 	_TKNoShift
.d870	b870	48		pha				pha 								; save. we are about to convert this punctuation token from
.d871	b871	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d873	b873	85 36		sta $36				sta 	zTemp0
.d875	b875	68		pla				pla
.d876	b876	29 20		and #$20			and 	#32 						; bit 5
.d878	b878	4a		lsr a				lsr 	a 							; shift into bit 3
.d879	b879	4a		lsr a				lsr 	a
.d87a	b87a	05 36		ora $36				ora 	zTemp0
.d87c	b87c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d87e	b87e					_TKNoShift:
.d87e	b87e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; write the punctuation character
.d881	b881	e8		inx				inx 								; consume the character
.d882	b882	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d884	b884	d0 bc		bne $b842			bne 	_TKTokeniseLoop 			; and loop round again.
.d886	b886	20 4c b9	jsr $b94c			jsr 	TOKCheckComment 			; comment checl
.d889	b889	80 b7		bra $b842			bra 	_TKTokeniseLoop
.d88b	b88b					_TKString:
.d88b	b88b	20 79 b9	jsr $b979			jsr 	TOKTokenString
.d88e	b88e	80 b2		bra $b842			bra 	_TKTokeniseLoop
.d890	b890					_TKHexConstant:
.d890	b890	20 b4 b9	jsr $b9b4			jsr 	TOKHexConstant
.d893	b893	80 ad		bra $b842			bra 	_TKTokeniseLoop
.d895	b895	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d897	b897	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d89a	b89a	60		rts				rts
.d89b	b89b					_TKCheckDouble:
.d89b	b89b	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d89e	b89e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8a0	b8a0	90 c7		bcc $b869			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8a2	b8a2	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8a4	b8a4	b0 c3		bcs $b869			bcs 	_TKStandardPunctuation
.d8a6	b8a6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8a9	b8a9	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8ab	b8ab	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8ac	b8ac	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8af	b8af	38		sec				sec
.d8b0	b8b0	e9 3c		sbc #$3c			sbc 	#'<'
.d8b2	b8b2	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8b5	b8b5	e8		inx				inx 								; consume both
.d8b6	b8b6	e8		inx				inx
.d8b7	b8b7	80 89		bra $b842			bra 	_TKTokeniseLoop
.d8b9	b8b9					_TKTokeniseIdentifier:
.d8b9	b8b9	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8bc	b8bc	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8bf	b8bf					_TKCheckLoop:
.d8bf	b8bf	e8		inx				inx 								; look at next, we know first is identifier already.
.d8c0	b8c0	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8c3	b8c3	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8c5	b8c5	f0 f8		beq $b8bf			beq 	_TKCheckLoop
.d8c7	b8c7	c9 30		cmp #$30			cmp	 	#"0"
.d8c9	b8c9	90 0c		bcc $b8d7			bcc 	_TKEndIdentifier
.d8cb	b8cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8cd	b8cd	90 f0		bcc $b8bf			bcc 	_TKCheckLoop
.d8cf	b8cf	c9 41		cmp #$41			cmp	 	#"A"
.d8d1	b8d1	90 04		bcc $b8d7			bcc 	_TKEndIdentifier
.d8d3	b8d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8d5	b8d5	90 e8		bcc $b8bf			bcc 	_TKCheckLoop
.d8d7	b8d7					_TKEndIdentifier:
.d8d7	b8d7	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8da	b8da	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8dc	b8dc	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8de	b8de	f0 06		beq $b8e6			beq 	_TKHasTypeCharacter
.d8e0	b8e0	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8e2	b8e2	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8e4	b8e4	d0 07		bne $b8ed			bne 	_TKNoTypeCharacter
.d8e6	b8e6					_TKHasTypeCharacter:
.d8e6	b8e6	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8e9	b8e9	e8		inx				inx 								; consume the type character
.d8ea	b8ea	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8ed	b8ed					_TKNoTypeCharacter:
.d8ed	b8ed	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8ef	b8ef	d0 09		bne $b8fa			bne 	_TKNoArray
.d8f1	b8f1	e8		inx				inx 								; skip the (
.d8f2	b8f2	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8f5	b8f5	09 04		ora #$04			ora 	#$04
.d8f7	b8f7	8d 04 04	sta $0404			sta 	identTypeByte
.d8fa	b8fa					_TKNoArray:
.d8fa	b8fa	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8fd	b8fd	20 d5 b9	jsr $b9d5			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d900	b900	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d902	b902	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d904	b904	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d907	b907	a2 00		ldx #$00			ldx 	#0
.d909	b909	b0 1f		bcs $b92a			bcs 	_TKFoundToken
.d90b	b90b	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d90d	b90d	a9 41		lda #$41			lda 	#(KeywordSet1) & $FF
.d90f	b90f	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d912	b912	a2 81		ldx #$81			ldx 	#$81
.d914	b914	b0 14		bcs $b92a			bcs 	_TKFoundToken
.d916	b916	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d918	b918	a9 3d		lda #$3d			lda 	#(KeywordSet2) & $FF
.d91a	b91a	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d91d	b91d	a2 82		ldx #$82			ldx 	#$82
.d91f	b91f	b0 09		bcs $b92a			bcs 	_TKFoundToken
.d921	b921	20 65 ba	jsr $ba65			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d924	b924	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d927	b927	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d92a	b92a					_TKFoundToken:
.d92a	b92a	48		pha				pha 								; save token
.d92b	b92b	8a		txa				txa 								; shift in X, is there one ?
.d92c	b92c	f0 03		beq $b931			beq 	_TKNoTShift
.d92e	b92e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; if so, write it out
.d931	b931					_TKNoTShift:
.d931	b931	68		pla				pla 								; restore and write token
.d932	b932	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d935	b935	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d937	b937	d0 0d		bne $b946			bne 	_TKNotRem 			 		; not shifted ?
.d939	b939	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d93b	b93b	d0 09		bne $b946			bne 	_TKNotRem
.d93d	b93d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d940	b940	20 4c b9	jsr $b94c			jsr 	TOKCheckComment
.d943	b943	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop
.d946	b946					_TKNotRem:
.d946	b946	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d949	b949	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d94c	b94c					TOKCheckComment:
.d94c	b94c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d94f	b94f	e8		inx				inx
.d950	b950	c9 20		cmp #$20			cmp 	#' '
.d952	b952	f0 f8		beq $b94c			beq 	TOKCheckComment
.d954	b954	ca		dex				dex 								; first non space character
.d955	b955	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d957	b957	f0 1f		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d959	b959	c9 00		cmp #$00			cmp 	#0 							; EOL
.d95b	b95b	f0 1b		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d95d	b95d	da		phx				phx
.d95e	b95e					_TOKCCLowerCase:
.d95e	b95e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d961	b961	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d963	b963	90 09		bcc $b96e			bcc 	_TOKKCNotUC
.d965	b965	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d967	b967	b0 05		bcs $b96e			bcs 	_TOKKCNotUC
.d969	b969	49 20		eor #$20			eor 	#$20
.d96b	b96b	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d96e	b96e					_TOKKCNotUC:
.d96e	b96e	e8		inx				inx
.d96f	b96f	c9 00		cmp #$00			cmp 	#0
.d971	b971	d0 eb		bne $b95e			bne 	_TOKCCLowerCase
.d973	b973	fa		plx				plx
.d974	b974	ca		dex				dex 								; tokenise string expects initial skip.
.d975	b975	20 79 b9	jsr $b979			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d978	b978					_TOKCCExit:
.d978	b978	60		rts				rts
.d979	b979					TOKTokenString:
.d979	b979	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d97b	b97b	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d97e	b97e	e8		inx				inx									; start of quoted string.
.d97f	b97f	da		phx				phx 								; push start of string on top
.d980	b980	ca		dex				dex 								; because we pre-increment
.d981	b981					_TSFindEnd:
.d981	b981	e8		inx				inx
.d982	b982	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d985	b985	f0 04		beq $b98b			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d987	b987	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d989	b989	d0 f6		bne $b981			bne 	_TSFindEnd
.d98b	b98b					_TSEndOfString:
.d98b	b98b	7a		ply				ply  								; so now Y is first character, X is character after end.
.d98c	b98c	48		pha				pha 								; save terminating character
.d98d	b98d	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d990	b990	68		pla				pla 								; terminating character
.d991	b991	f0 01		beq $b994			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d993	b993	e8		inx				inx
.d994	b994					_TSNotQuote:
.d994	b994	60		rts				rts
.d995	b995					TOKWriteBlockXY:
.d995	b995	86 36		stx $36				stx 	zTemp0 						; save end character
.d997	b997	98		tya				tya 								; use 2's complement to work out the byte size
.d998	b998	49 ff		eor #$ff			eor 	#$FF
.d99a	b99a	38		sec				sec
.d99b	b99b	65 36		adc $36				adc 	zTemp0
.d99d	b99d	1a		inc a				inc 	a 							; one extra for NULL
.d99e	b99e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9a1	b9a1					_TOBlockLoop:
.d9a1	b9a1	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9a3	b9a3	f0 09		beq $b9ae			beq 	_TOBlockExit
.d9a5	b9a5	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9a8	b9a8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9ab	b9ab	c8		iny				iny
.d9ac	b9ac	80 f3		bra $b9a1			bra 	_TOBlockLoop
.d9ae	b9ae					_TOBlockExit:
.d9ae	b9ae	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9b0	b9b0	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b3	b9b3	60		rts				rts
.d9b4	b9b4					TOKHexConstant:
.d9b4	b9b4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9b6	b9b6	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b9	b9b9	e8		inx				inx									; start of quoted string.
.d9ba	b9ba	da		phx				phx 								; push start of constant on top
.d9bb	b9bb	ca		dex				dex
.d9bc	b9bc					_THFindLoop:
.d9bc	b9bc	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9bd	b9bd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9c0	b9c0	c9 30		cmp #$30			cmp 	#"0"
.d9c2	b9c2	90 0c		bcc $b9d0			bcc 	_THFoundEnd
.d9c4	b9c4	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9c6	b9c6	90 f4		bcc $b9bc			bcc 	_THFindLoop
.d9c8	b9c8	c9 41		cmp #$41			cmp 	#"A"
.d9ca	b9ca	90 04		bcc $b9d0			bcc 	_THFoundEnd
.d9cc	b9cc	c9 47		cmp #$47			cmp 	#"F"+1
.d9ce	b9ce	90 ec		bcc $b9bc			bcc 	_THFindLoop
.d9d0	b9d0					_THFoundEnd:
.d9d0	b9d0	7a		ply				ply 								; restore start
.d9d1	b9d1	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; output the block
.d9d4	b9d4	60		rts				rts
.d9d5	b9d5					TOKCalculateHash:
.d9d5	b9d5	da		phx				phx
.d9d6	b9d6	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9d9	b9d9	a9 00		lda #$00			lda 	#0
.d9db	b9db					_TCHLoop:
.d9db	b9db	18		clc				clc
.d9dc	b9dc	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9e3	b9e3	d0 f6		bne $b9db			bne 	_TCHLoop
.d9e5	b9e5	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9e8	b9e8	fa		plx				plx
.d9e9	b9e9	60		rts				rts
.d9ea	b9ea					LCLFixLineBufferCase:
.d9ea	b9ea	a2 00		ldx #$00			ldx 	#0
.d9ec	b9ec					_FLBCLoop:
.d9ec	b9ec	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9ef	b9ef	f0 22		beq $ba13			beq 	_FLBCExit 					; end of string.
.d9f1	b9f1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9f3	b9f3	f0 11		beq $ba06			beq 	_FLBCInQuotes
.d9f5	b9f5	e8		inx				inx
.d9f6	b9f6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9f8	b9f8	90 f2		bcc $b9ec			bcc 	_FLBCLoop
.d9fa	b9fa	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9fc	b9fc	b0 ee		bcs $b9ec			bcs 	_FLBCLoop
.d9fe	b9fe	38		sec				sec 								; make U/C
.d9ff	b9ff	e9 20		sbc #$20			sbc 	#32
.da01	ba01	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da04	ba04	80 e6		bra $b9ec			bra 	_FLBCLoop
.da06	ba06					_FLBCInQuotes:
.da06	ba06	e8		inx				inx 								; advance
.da07	ba07	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da0a	ba0a	f0 07		beq $ba13			beq 	_FLBCExit 					; exit on EOS
.da0c	ba0c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da0e	ba0e	d0 f6		bne $ba06			bne 	_FLBCInQuotes
.da10	ba10	e8		inx				inx 								; skip over it
.da11	ba11	80 d9		bra $b9ec			bra 	_FLBCLoop
.da13	ba13					_FLBCExit:
.da13	ba13	60		rts				rts
.da14	ba14					TOKExtractLineNumber:
.da14	ba14	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da17	ba17	48		pha				pha
.da18	ba18	ad 27 04	lda $0427			lda 	tokenLineNumber
.da1b	ba1b	48		pha				pha
.da1c	ba1c	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 2
.da1f	ba1f	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 4
.da22	ba22	18		clc				clc 								; add stacked value
.da23	ba23	68		pla				pla
.da24	ba24	6d 27 04	adc $0427			adc 	tokenLineNumber
.da27	ba27	8d 27 04	sta $0427			sta 	tokenLineNumber
.da2a	ba2a	68		pla				pla
.da2b	ba2b	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da2e	ba2e	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da31	ba31	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 10
.da34	ba34	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da37	ba37	e8		inx				inx
.da38	ba38	29 0f		and #$0f			and 	#15 						; add to line #
.da3a	ba3a	18		clc				clc
.da3b	ba3b	6d 27 04	adc $0427			adc 	tokenLineNumber
.da3e	ba3e	8d 27 04	sta $0427			sta 	tokenLineNumber
.da41	ba41	90 03		bcc $ba46			bcc 	_TLENNoCarry
.da43	ba43	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da46	ba46					_TLENNoCarry:
.da46	ba46	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da49	ba49	c9 30		cmp #$30			cmp 	#'0'
.da4b	ba4b	90 04		bcc $ba51			bcc 	_TLENExit
.da4d	ba4d	c9 3a		cmp #$3a			cmp 	#'9'+1
.da4f	ba4f	90 c3		bcc $ba14			bcc 	TOKExtractLineNumber
.da51	ba51					_TLENExit:
.da51	ba51	60		rts				rts
.da52	ba52					_LCLNTimes2:
.da52	ba52	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da55	ba55	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da58	ba58	60		rts				rts
.da59	ba59					TOKWriteByte:
.da59	ba59	da		phx				phx
.da5a	ba5a	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da5d	ba5d	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da60	ba60	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da63	ba63	fa		plx				plx
.da64	ba64	60		rts				rts
.da65	ba65					TOKCheckCreateVariableRecord:
.da65	ba65	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da67	ba67	85 36		sta $36				sta 	0+zTemp0
.da69	ba69	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da6b	ba6b	85 37		sta $37				sta 	1+zTemp0
.da6d	ba6d					_CCVSearch:
.da6d	ba6d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da6f	ba6f	f0 2c		beq $ba9d			beq 	_CCVFail
.da71	ba71	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da75	ba75	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da78	ba78	d0 16		bne $ba90			bne 	_CCVNext
.da7a	ba7a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da7c	ba7c	ae 00 04	ldx $0400			ldx 	identStart
.da7f	ba7f					_CCVCompare:
.da7f	ba7f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da82	ba82	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da84	ba84	e8		inx				inx 								; advance pointers
.da85	ba85	c8		iny				iny
.da86	ba86	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da87	ba87	d0 07		bne $ba90			bne 	_CCVNext  					; didn't match go to next.
.da89	ba89	90 f4		bcc $ba7f			bcc 	_CCVCompare 				; not finished yet.
.da8b	ba8b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da8e	ba8e	f0 41		beq $bad1			beq 	_CCVFound 					; yes, we were successful
.da90	ba90					_CCVNext:
.da90	ba90	18		clc				clc 								; go to next record.
.da91	ba91	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da93	ba93	65 36		adc $36				adc 	zTemp0
.da95	ba95	85 36		sta $36				sta 	zTemp0
.da97	ba97	90 d4		bcc $ba6d			bcc 	_CCVSearch
.da99	ba99	e6 37		inc $37				inc 	zTemp0+1
.da9b	ba9b	80 d0		bra $ba6d			bra 	_CCVSearch
.da9d	ba9d					_CCVFail:
.da9d	ba9d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da9f	ba9f	ad 03 04	lda $0403			lda 	identHash
.daa2	baa2	91 36		sta ($36),y			sta 	(zTemp0),y
.daa4	baa4	c8		iny				iny 								; offset 2 is the type byte
.daa5	baa5	ad 04 04	lda $0404			lda 	identTypeByte
.daa8	baa8	91 36		sta ($36),y			sta 	(zTemp0),y
.daaa	baaa	c8		iny				iny
.daab	baab					_CCVData:
.daab	baab	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daad	baad	91 36		sta ($36),y			sta 	(zTemp0),y
.daaf	baaf	c8		iny				iny
.dab0	bab0	c0 08		cpy #$08			cpy 	#8
.dab2	bab2	90 f7		bcc $baab			bcc 	_CCVData
.dab4	bab4	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dab7	bab7					_CCVCopyName:
.dab7	bab7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	e8		inx				inx
.dabd	babd	c8		iny				iny
.dabe	babe	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dac1	bac1	d0 f4		bne $bab7			bne 	_CCVCopyName
.dac3	bac3	98		tya				tya 								; patch offset
.dac4	bac4	92 36		sta ($36)			sta 	(zTemp0)
.dac6	bac6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dac8	bac8	91 36		sta ($36),y			sta 	(zTemp0),y
.daca	baca	88		dey				dey
.dacb	bacb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dacd	bacd	09 80		ora #$80			ora 	#$80
.dacf	bacf	91 36		sta ($36),y			sta 	(zTemp0),y
.dad1	bad1					_CCVFound:
.dad1	bad1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dad3	bad3	38		sec				sec
.dad4	bad4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dad6	bad6	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dad8	bad8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dadb	badb	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dadd	badd	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dae0	bae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dae1	bae1					SNDCheckChannel:
.dae1	bae1	aa		tax				tax
.dae2	bae2	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dae5	bae5	d0 38		bne $bb1f			bne 	_SNDCCExit
.dae7	bae7	da		phx				phx 								; save current channel
.dae8	bae8	8a		txa				txa 								; put in A
.dae9	bae9	20 65 bb	jsr $bb65			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daec	baec	68		pla				pla 								; channel # in A
.daed	baed	90 30		bcc $bb1f			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.daef	baef	a8		tay				tay 								; Y is the channel #
.daf0	baf0	bd 66 08	lda $0866,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.daf3	baf3	99 65 09	sta $0965,y			sta 	SNDPitchLow,y
.daf6	baf6	bd 67 08	lda $0867,x			lda 	SNDQueue+2,x
.daf9	baf9	99 69 09	sta $0969,y			sta 	SNDPitchHigh,y
.dafc	bafc	bd 68 08	lda $0868,x			lda 	SNDQueue+3,x
.daff	baff	99 6d 09	sta $096d,y			sta 	SNDVolume,y
.db02	bb02	bd 69 08	lda $0869,x			lda 	SNDQueue+4,x
.db05	bb05	99 71 09	sta $0971,y			sta 	SNDTimeLeft,y
.db08	bb08	bd 6a 08	lda $086a,x			lda 	SNDQueue+5,x
.db0b	bb0b	99 75 09	sta $0975,y			sta 	SNDAdjustLow,y
.db0e	bb0e	bd 6b 08	lda $086b,x			lda 	SNDQueue+6,x
.db11	bb11	99 79 09	sta $0979,y			sta 	SNDAdjustHigh,y
.db14	bb14	5a		phy				phy 								; save channel #
.db15	bb15	20 7f bb	jsr $bb7f			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db18	bb18	ce 64 08	dec $0864			dec 	SNDLength 					; reduce the queue length.
.db1b	bb1b	68		pla				pla
.db1c	bb1c	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update channel A
.db1f	bb1f					_SNDCCExit:
.db1f	bb1f	60		rts				rts
.db20	bb20					SNDUpdateNote:
.db20	bb20	aa		tax				tax 								; so we can access records
.db21	bb21	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db22	bb22	0a		asl a				asl 	a
.db23	bb23	0a		asl a				asl 	a
.db24	bb24	0a		asl a				asl 	a
.db25	bb25	0a		asl a				asl 	a
.db26	bb26	8d 63 08	sta $0863			sta 	SNDChannelBits
.db29	bb29	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; are we silent
.db2c	bb2c	f0 2e		beq $bb5c			beq 	_SNDUNIsSilent
.db2e	bb2e	ad 63 08	lda $0863			lda 	SNDChannelBits 				; push channel bits on stack
.db31	bb31	48		pha				pha
.db32	bb32	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db35	bb35	29 0f		and #$0f			and 	#$0F
.db37	bb37	0d 63 08	ora $0863			ora 	SNDChannelBits 				; set channel bits
.db3a	bb3a	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db3c	bb3c	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db3f	bb3f	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db42	bb42	8d 63 08	sta $0863			sta 	SNDChannelBits
.db45	bb45	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.db48	bb48	4e 63 08	lsr $0863			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db4b	bb4b	6a		ror a				ror 	a
.db4c	bb4c	4e 63 08	lsr $0863			lsr 	SNDChannelBits
.db4f	bb4f	6a		ror a				ror 	a
.db50	bb50	4a		lsr a				lsr 	a 							; put in bits 0-5
.db51	bb51	4a		lsr a				lsr 	a
.db52	bb52	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write as rest of pitch register
.db55	bb55	68		pla				pla
.db56	bb56	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db58	bb58	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db5b	bb5b	60		rts				rts
.db5c	bb5c					_SNDUNIsSilent:
.db5c	bb5c	ad 63 08	lda $0863			lda 	SNDChannelBits 				; channel bits
.db5f	bb5f	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db61	bb61	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write to the ports
.db64	bb64	60		rts				rts
.db65	bb65					SNDFindNextNoteForA:
.db65	bb65	ac 64 08	ldy $0864			ldy 	SNDLength 					; queue size into Y
.db68	bb68	f0 13		beq $bb7d			beq 	_SNDFNNFail 				; queue empty.
.db6a	bb6a	a2 00		ldx #$00			ldx 	#0
.db6c	bb6c					_SNDFNNSearch:
.db6c	bb6c	dd 65 08	cmp $0865,x			cmp 	SNDQueue,x 					; does it match the channel
.db6f	bb6f	38		sec				sec
.db70	bb70	f0 0c		beq $bb7e			beq 	_SNDFNNExit 				; if so exit with CS.
.db72	bb72	e8		inx				inx 								; next queue slot.
.db73	bb73	e8		inx				inx
.db74	bb74	e8		inx				inx
.db75	bb75	e8		inx				inx
.db76	bb76	e8		inx				inx
.db77	bb77	e8		inx				inx
.db78	bb78	e8		inx				inx
.db79	bb79	e8		inx				inx
.db7a	bb7a	88		dey				dey 								; done the whole queue
.db7b	bb7b	d0 ef		bne $bb6c			bne 	_SNDFNNSearch 				; no, go back.
.db7d	bb7d					_SNDFNNFail:
.db7d	bb7d	18		clc				clc
.db7e	bb7e					_SNDFNNExit:
.db7e	bb7e	60		rts				rts
.db7f	bb7f					SNDDeleteXFromQueue:
.db7f	bb7f	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db81	bb81	f0 09		beq $bb8c			beq 	_SNDDXExit
.db83	bb83	bd 6d 08	lda $086d,x			lda 	SNDQueue+8,x
.db86	bb86	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.db89	bb89	e8		inx				inx
.db8a	bb8a	80 f3		bra $bb7f			bra 	SNDDeleteXFromQueue
.db8c	bb8c					_SNDDXExit:
.db8c	bb8c	60		rts				rts
.0863						SNDChannelBits:
>0863								.fill 	1
.db8d	bb8d					SNDQueueRequest:
.db8d	bb8d	86 36		stx $36				stx 	zTemp0						; save queue address
.db8f	bb8f	84 37		sty $37				sty 	zTemp0+1
.db91	bb91	ae 64 08	ldx $0864			ldx 	SNDLength 					; queue is full, can't take any more.
.db94	bb94	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db96	bb96	f0 21		beq $bbb9			beq 	_SNDQRExit
.db98	bb98	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db9a	bb9a	48		pha				pha
.db9b	bb9b	8a		txa				txa  								; get offset in queue buffer/
.db9c	bb9c	0a		asl a				asl 	a
.db9d	bb9d	0a		asl a				asl 	a
.db9e	bb9e	0a		asl a				asl 	a
.db9f	bb9f	aa		tax				tax
.dba0	bba0	68		pla				pla 								; get back and push again
.dba1	bba1	48		pha				pha
.dba2	bba2	9d 65 08	sta $0865,x			sta 	SNDQueue+0,x 				; save the channel #
.dba5	bba5	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dba7	bba7					_SNDQCopy:
.dba7	bba7	b1 36		lda ($36),y			lda 	(zTemp0),y
.dba9	bba9	e8		inx				inx
.dbaa	bbaa	c8		iny				iny
.dbab	bbab	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.dbae	bbae	c0 06		cpy #$06			cpy 	#6
.dbb0	bbb0	d0 f5		bne $bba7			bne 	_SNDQCopy
.dbb2	bbb2	ee 64 08	inc $0864			inc 	SNDLength 					; bump queue length.
.dbb5	bbb5	68		pla				pla 								; get channel # back
.dbb6	bbb6	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbb9	bbb9					_SNDQRExit:
.dbb9	bbb9	60		rts				rts
.dbba	bbba					SNDSilenceChannel:
.dbba	bbba	aa		tax				tax 								; zero time left.
.dbbb	bbbb	9e 71 09	stz $0971,x			stz 	SNDTimeLeft,x
.dbbe	bbbe	0a		asl a				asl 	a 							; shift into position
.dbbf	bbbf	0a		asl a				asl 	a
.dbc0	bbc0	0a		asl a				asl 	a
.dbc1	bbc1	0a		asl a				asl 	a
.dbc2	bbc2	0a		asl a				asl 	a
.dbc3	bbc3	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbc5	bbc5	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.dbc8	bbc8	60		rts				rts
.dbc9	bbc9					SNDWritePorts:
.dbc9	bbc9	da		phx				phx 								; save X
.dbca	bbca	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbcc	bbcc	64 01		stz $01				stz 	1 							; access I/O page 0
.dbce	bbce	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbd1	bbd1	8d 10 d6	sta $d610			sta 	$D610
.dbd4	bbd4	86 01		stx $01				stx 	1 							; restore I/O
.dbd6	bbd6	fa		plx				plx 								; restore X
.dbd7	bbd7	60		rts				rts
.dbd8	bbd8					Export_SNDCommand:
.dbd8	bbd8	da		phx				phx 								; save XY
.dbd9	bbd9	5a		phy				phy
.dbda	bbda	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbdc	bbdc	f0 1d		beq $bbfb			beq 	_SNDInitialise
.dbde	bbde	90 28		bcc $bc08			bcc 	_SNDExit
.dbe0	bbe0	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbe2	bbe2	f0 17		beq $bbfb			beq 	_SNDSilence
.dbe4	bbe4	b0 22		bcs $bc08			bcs 	_SNDExit
.dbe6	bbe6	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbe8	bbe8	b0 09		bcs $bbf3			bcs 	_SNDQueryPlay
.dbea	bbea	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbec	bbec	b0 1a		bcs $bc08			bcs 	_SNDExit
.dbee	bbee	20 8d bb	jsr $bb8d			jsr 	SNDQueueRequest
.dbf1	bbf1	80 15		bra $bc08			bra 	_SNDExit
.dbf3	bbf3					_SNDQueryPlay:
.dbf3	bbf3	29 03		and #$03			and 	#3 							; get channel #
.dbf5	bbf5	aa		tax				tax
.dbf6	bbf6	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbf9	bbf9	80 0d		bra $bc08			bra 	_SNDExit
.dbfb	bbfb					_SNDInitialise:
.dbfb	bbfb					_SNDSilence:
.dbfb	bbfb	9c 64 08	stz $0864			stz 	SNDLength 					; empty the queue.
.dbfe	bbfe	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc00	bc00					_SNDSilenceLoop:
.dc00	bc00	48		pha				pha
.dc01	bc01	20 ba bb	jsr $bbba			jsr 	SNDSilenceChannel
.dc04	bc04	68		pla				pla
.dc05	bc05	3a		dec a				dec 	a
.dc06	bc06	10 f8		bpl $bc00			bpl 	_SNDSilenceLoop
.dc08	bc08					_SNDExit:
.dc08	bc08	7a		ply				ply
.dc09	bc09	fa		plx				plx
.dc0a	bc0a	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0864						SNDLength:
>0864								.fill 	1
.0865						SNDQueue:
>0865								.fill 	SNDQueueSize * 8
.0965						SNDPitchLow:
>0965								.fill 	4
.0969						SNDPitchHigh:
>0969								.fill 	4
.096d						SNDVolume:
>096d								.fill 	4
.0971						SNDTimeLeft:
>0971								.fill 	4
.0975						SNDAdjustLow:
>0975								.fill 	4
.0979						SNDAdjustHigh:
>0979								.fill 	4
.dc0b	bc0b					Export_SNDUpdate:
.dc0b	bc0b					PagedSNDUpdate:
.dc0b	bc0b	ad 71 09	lda $0971			lda 	SNDTimeLeft+0 				; look at time remaining
.dc0e	bc0e	f0 05		beq $bc15			beq 	_SNDUNot0 					; not playing
.dc10	bc10	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc12	bc12	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel 			; update it.
.dc15	bc15					_SNDUNot0:
.dc15	bc15	ad 72 09	lda $0972			lda 	SNDTimeLeft+1
.dc18	bc18	f0 05		beq $bc1f			beq 	_SNDUNot1
.dc1a	bc1a	a2 01		ldx #$01			ldx 	#1
.dc1c	bc1c	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc1f	bc1f					_SNDUNot1:
.dc1f	bc1f	ad 73 09	lda $0973			lda 	SNDTimeLeft+2
.dc22	bc22	f0 05		beq $bc29			beq 	_SNDUNot2
.dc24	bc24	a2 02		ldx #$02			ldx 	#2
.dc26	bc26	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc29	bc29					_SNDUNot2:
.dc29	bc29	ad 74 09	lda $0974			lda 	SNDTimeLeft+3
.dc2c	bc2c	f0 05		beq $bc33			beq 	_SNDUNot3
.dc2e	bc2e	a2 03		ldx #$03			ldx 	#3
.dc30	bc30	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc33	bc33					_SNDUNot3:
.dc33	bc33	60		rts				rts
.dc34	bc34					SNDUpdateChannel:
.dc34	bc34	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc36	bc36	f0 2c		beq $bc64			beq 	_SNDUCExit
.dc38	bc38	3a		dec a				dec 	a 							; decrement and update timer
.dc39	bc39	9d 71 09	sta $0971,x			sta 	SNDTimeLeft,x
.dc3c	bc3c	f0 1d		beq $bc5b			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc3e	bc3e	bd 75 09	lda $0975,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc41	bc41	1d 79 09	ora $0979,x			ora 	SNDAdjustHigh,x
.dc44	bc44	f0 1e		beq $bc64			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc46	bc46	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc47	bc47	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.dc4a	bc4a	7d 75 09	adc $0975,x			adc 	SNDAdjustLow,x
.dc4d	bc4d	9d 65 09	sta $0965,x			sta 	SNDPitchLow,x
.dc50	bc50	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x
.dc53	bc53	7d 79 09	adc $0979,x			adc 	SNDAdjustHigh,x
.dc56	bc56	29 03		and #$03			and 	#3
.dc58	bc58	9d 69 09	sta $0969,x			sta 	SNDPitchHigh,x
.dc5b	bc5b					_SNDUCUpdate:
.dc5b	bc5b	8a		txa				txa 								; which channel.
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update the current note
.dc60	bc60	68		pla				pla
.dc61	bc61	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; more to do ?
.dc64	bc64					_SNDUCExit:
.dc64	bc64	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
