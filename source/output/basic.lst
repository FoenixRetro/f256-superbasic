
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Jan 28 10:23:55 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 e2 a3	jsr $a3e2		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 ef b7	jsr $b7ef		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 22 b8	jsr $b822		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 a0 b1	jsr $b1a0		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 34 b4	jsr $b434		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80a3		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a5		09 80		ora #$80			ora 	#$80
.80a7		85 00		sta $00				sta 	0
.80a9		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80ac		c9 42		cmp #$42			cmp 	#"B"
.80ae		d0 18		bne $80c8			bne 	_NoMachineCode
.80b0		ad 03 20	lda $2003			lda 	$2003
.80b3		c9 54		cmp #$54			cmp 	#"T"
.80b5		d0 11		bne $80c8			bne 	_NoMachineCode
.80b7		ad 04 20	lda $2004			lda 	$2004
.80ba		c9 36		cmp #$36			cmp 	#"6"
.80bc		d0 0a		bne $80c8			bne 	_NoMachineCode
.80be		ad 05 20	lda $2005			lda 	$2005
.80c1		c9 35		cmp #$35			cmp 	#"5"
.80c3		d0 03		bne $80c8			bne 	_NoMachineCode
.80c5		4c 00 20	jmp $2000			jmp 	$2000
.80c8						_NoMachineCode:
.80c8		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80ca		20 75 82	jsr $8275			jsr 	KNLSetDrive
.80cd		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cf		aa		tax				tax
.80d0		a8		tay				tay
.80d1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d4		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d6		20 75 80	jsr $8075			jsr 	SNDCommand
.80d9		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80db		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80de		a9 09		lda #$09			lda 	#9
.80e0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		64 01		stz $01				stz 	1
.80e8		ad ad d6	lda $d6ad			lda 	$D6AD
.80eb		20 4a 84	jsr $844a			jsr 	PrintHex
.80ee		ad ac d6	lda $d6ac			lda 	$D6AC
.80f1		20 4a 84	jsr $844a			jsr 	PrintHex
.80f4		ad ab d6	lda $d6ab			lda 	$D6AB
.80f7		20 4a 84	jsr $844a			jsr 	PrintHex
.80fa		ad aa d6	lda $d6aa			lda 	$D6AA
.80fd		20 4a 84	jsr $844a			jsr 	PrintHex
.8100		a9 20		lda #$20			lda 	#32
.8102		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8105		ad a8 d6	lda $d6a8			lda 	$D6A8
.8108		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810b		ad a9 d6	lda $d6a9			lda 	$D6A9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8113		a9 21		lda #$21			lda 	#Prompt & $FF
.8115		20 71 98	jsr $9871			jsr 	PrintStringXA
.8118		20 44 92	jsr $9244			jsr 	NewProgram 					; erase current program
.811b		4c 8d 86	jmp $868d			jmp 	WarmStart					; make same size.
.811e		4c 8d 86	jmp $868d			jmp 	WarmStart
>8121		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8123		09 09 32 38 2f 30 31 2f			.text 9,9,"28/01/23 32"
>812b		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>8130		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8134						ProcessEvents:
.8134		20 b4 82	jsr $82b4			jsr 	KNLSetEventPointer
.8137		20 a5 81	jsr $81a5			jsr     GetNextEvent 				; get next event
.813a		b0 27		bcs $8163			bcs 	_PEExitZ 					; nothing left to process.
.813c		ad 8e 07	lda $078e			lda 	KNLEvent.type 				; go back if event not key.pressed.
.813f		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8141		d0 f1		bne $8134			bne 	ProcessEvents
.8143		ad 94 07	lda $0794			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8146		d0 ec		bne $8134			bne 	ProcessEvents
.8148		ad 93 07	lda $0793			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814b		c9 03		cmp #$03			cmp 	#3
.814d		f0 11		beq $8160			beq 	_PEReturnBreak  			; no, keep going.
.814f		da		phx				phx
.8150		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8153		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8155		f0 06		beq $815d			beq 	_PENoQueue
.8157		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815a		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.815d						_PENoQueue:
.815d		fa		plx				plx
.815e		80 d4		bra $8134			bra 	ProcessEvents
.8160						_PEReturnBreak:
.8160		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8162		60		rts				rts
.8163						_PEExitZ:
.8163		a9 00		lda #$00			lda 	#0
.8165		60		rts				rts
.8166						PopKeyboardQueue:
.8166		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8169		f0 17		beq $8182			beq 	_PKQExit 					; zero, then exit.
.816b		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.816e		48		pha				pha
.816f		da		phx				phx 								; drop head of queue
.8170		a2 00		ldx #$00			ldx 	#0
.8172						_PKQLoop:
.8172		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8175		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8178		e8		inx				inx
.8179		e0 07		cpx #$07			cpx 	#7
.817b		d0 f5		bne $8172			bne 	_PKQLoop
.817d		fa		plx				plx
.817e		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8181		68		pla				pla 								; restore head of queue.
.8182						_PKQExit:
.8182		60		rts				rts
.8183						KNLGetKeyPressed:
.8183		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8186		d0 de		bne $8166			bne 	PopKeyboardQueue 			; if so, pop and return it
.8188		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process any outstanding events
.818b		a9 00		lda #$00			lda 	#0
.818d		60		rts				rts
.818e						KNLGetSingleCharacter:
.818e		20 83 81	jsr $8183			jsr 	KNLGetKeyPressed
.8191		c9 00		cmp #$00			cmp 	#0
.8193		f0 f9		beq $818e			beq 	KNLGetSingleCharacter
.8195		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8196						TickHandler:
.8196		5a		phy				phy 								; need to preserve Y
.8197		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819a		7a		ply				ply
.819b		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819c						ResetIOTracking:
.819c		a2 2d		ldx #$2d			ldx 	#GNEEnd-GNEBegin-1
.819e						_RIOLoop:
.819e		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.81a1		ca		dex				dex
.81a2		10 fa		bpl $819e			bpl 	_RIOLoop
.81a4		60		rts				rts
.81a5						GetNextEvent:
.81a5		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.81a8		08		php				php									; save yes/no flag.
.81a9		b0 29		bcs $81d4			bcs 	_GNEExit
.81ab		48		pha				pha 								; save registers
.81ac		da		phx				phx
.81ad		5a		phy				phy
.81ae		ad 8e 07	lda $078e			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.81b1		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.81b3		f0 04		beq $81b9			beq 	_GNEKeyEvent
.81b5		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.81b7		d0 08		bne $81c1			bne 	_GNECheckMouseEvent
.81b9						_GNEKeyEvent:
.81b9		20 23 82	jsr $8223			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.81bc		20 40 82	jsr $8240			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.81bf		80 10		bra $81d1			bra 	_GNEEventExit
.81c1						_GNECheckMouseEvent:
.81c1		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.81c3		d0 05		bne $81ca			bne 	_GNENotDelta
.81c5		20 d6 81	jsr $81d6			jsr 	ProcessMouseDeltaEvent 		; process them.
.81c8		80 07		bra $81d1			bra 	_GNEEventExit
.81ca						_GNENotDelta:
.81ca		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.81cc		d0 03		bne $81d1			bne 	_GNEEventExit
.81ce		20 eb 81	jsr $81eb			jsr 	ProcessMouseClickEvent 		; process them.
.81d1						_GNEEventExit:
.81d1		7a		ply				ply 								; restore registers
.81d2		fa		plx				plx
.81d3		68		pla				pla
.81d4						_GNEExit:
.81d4		28		plp				plp
.81d5		60		rts				rts
.81d6						ProcessMouseDeltaEvent:
.81d6		a2 22		ldx #$22			ldx 	#MouseDeltaX-GNEBegin
.81d8		ad 91 07	lda $0791			lda 	KNLEvent.mouse.delta.x
.81db		20 00 82	jsr $8200			jsr 	PMKAddSubtract
.81de		ad 92 07	lda $0792			lda 	KNLEvent.mouse.delta.y
.81e1		20 00 82	jsr $8200			jsr 	PMKAddSubtract
.81e4		ad 93 07	lda $0793			lda 	KNLEvent.mouse.delta.z
.81e7		20 00 82	jsr $8200			jsr 	PMKAddSubtract
.81ea		60		rts				rts
.81eb						ProcessMouseClickEvent:
.81eb		a2 28		ldx #$28			ldx 	#MouseCountInner-GNEBegin
.81ed		ad 91 07	lda $0791			lda 	KNLEvent.mouse.clicks.inner
.81f0		20 04 82	jsr $8204			jsr 	PMKAdd
.81f3		ad 92 07	lda $0792			lda 	KNLEvent.mouse.clicks.middle
.81f6		20 04 82	jsr $8204			jsr 	PMKAdd
.81f9		ad 93 07	lda $0793			lda 	KNLEvent.mouse.clicks.outer
.81fc		20 04 82	jsr $8204			jsr 	PMKAdd
.81ff		60		rts				rts
.8200						PMKAddSubtract:
.8200		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.8202		30 0e		bmi $8212			bmi 	PMKSubtract
.8204						PMKAdd:
.8204		18		clc				clc
.8205		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8208		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.820b		90 13		bcc $8220			bcc 	PMKExit
.820d		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.8210		80 0e		bra $8220			bra 	PMKExit
.8212						PMKSubtract:
.8212		38		sec				sec
.8213		49 ff		eor #$ff			eor 	#$FF
.8215		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8218		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.821b		b0 03		bcs $8220			bcs 	PMKExit
.821d		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.8220						PMKExit:
.8220		e8		inx				inx 								; next slot ?
.8221		e8		inx				inx
.8222		60		rts				rts
.8223						ProcessKeyboardEvent:
.8223		ad 92 07	lda $0792			lda 	KNLEvent.key.raw 			; raw key code.
.8226		20 61 82	jsr $8261			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8229		ac 8e 07	ldy $078e			ldy 	KNLEvent.type
.822c		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.822e		f0 07		beq $8237			beq 	_PKERelease
.8230		1d 5f 06	ora $065f,x			ora 	KeyStatus,x 				; set bit
.8233		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.8236		60		rts				rts
.8237						_PKERelease:
.8237		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8239		3d 5f 06	and $065f,x			and 	KeyStatus,x
.823c		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.823f		60		rts				rts
.8240						UpdateKeyboardJoystick:
.8240		9c 80 06	stz $0680			stz 	KeyJoystick
.8243		a2 00		ldx #$00			ldx 	#0
.8245						_UKJLoop:
.8245		bd 5c 82	lda $825c,x			lda 	_UKJKeys,x 					; which key
.8248		29 1f		and #$1f			and 	#$1F
.824a		a8		tay				tay
.824b		b9 5f 06	lda $065f,y			lda 	KeyStatus,y 				; get status
.824e		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8250		18		clc				clc  								; set C if bit set
.8251		69 ff		adc #$ff			adc 	#$FF
.8253		2e 80 06	rol $0680			rol 	KeyJoystick 				; shift into place
.8256		e8		inx				inx
.8257		e0 05		cpx #$05			cpx 	#5 							; do all 5
.8259		d0 ea		bne $8245			bne 	_UKJLoop
.825b		60		rts				rts
.825c						_UKJKeys:
>825c		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.8261						KeyboardConvertXA:
.8261		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.8263		8e 7f 06	stx $067f			stx 	KeyMaskTemp
.8266						_KCCALoop:
.8266		18		clc				clc
.8267		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.8269		b0 05		bcs $8270			bcs 	_KCCADone
.826b		0e 7f 06	asl $067f			asl 	KeyMaskTemp 				; shift the mask temp
.826e		80 f6		bra $8266			bra 	_KCCALoop
.8270						_KCCADone:
.8270		aa		tax				tax 								; table entry in X
.8271		ad 7f 06	lda $067f			lda 	KeyMaskTemp 				; mask temp in A.
.8274		60		rts				rts
.065f						GNEBegin:
.065f						KeyStatus:
>065f								.fill 	32
.067f						KeyMaskTemp:
>067f								.fill 	1
.0680						KeyJoystick:
>0680								.fill 	1
.0681						MouseDeltaX:
>0681								.fill 	2
.0683						MouseDeltaY:
>0683								.fill 	2
.0685						MouseDeltaZ:
>0685								.fill 	2
.0687						MouseCountInner:
>0687								.fill 	2
.0689						MouseCountMiddle:
>0689								.fill 	2
.068b						MouseCountOuter:
>068b								.fill 	2
.068d						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8275						KNLSetDrive:
.8275		8d 8d 07	sta $078d			sta 	KNLDefaultDrive
.8278		60		rts				rts
.8279						KNLOpenFileWrite:
.8279		48		pha				pha
.827a		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.827c		80 03		bra $8281			bra 	KNLOpenStart
.827e						KNLOpenFileRead:
.827e		48		pha				pha
.827f		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8281						KNLOpenStart:
.8281		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8283		68		pla				pla
.8284		20 bf 82	jsr $82bf			jsr 	KNLSetupFileName
.8287		20 b4 82	jsr $82b4			jsr 	KNLSetEventPointer
.828a		ad 8d 07	lda $078d			lda 	KNLDefaultDrive 			; currently drive zero only.
.828d		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.828f		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8292		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8294		b0 1d		bcs $82b3			bcs     _out
.8296						_loop
.8296		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8299		20 a5 81	jsr $81a5			jsr     GetNextEvent
.829c		b0 f8		bcs $8296			bcs     _loop
.829e		ad 8e 07	lda $078e			lda 	KNLEvent.type
.82a1		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.82a3		f0 0a		beq $82af			beq 	_success
.82a5		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.82a7		f0 0a		beq $82b3			beq 	_out
.82a9		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.82ab		f0 06		beq $82b3			beq 	_out
.82ad		80 e7		bra $8296			bra     _loop
.82af						_success
.82af		ad 91 07	lda $0791			lda     KNLEvent.file.stream
.82b2		18		clc				clc
.82b3						_out
.82b3		60		rts				rts
.82b4						KNLSetEventPointer:
.82b4		48		pha				pha
.82b5		a9 8e		lda #$8e			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.82b7		85 f0		sta $f0				sta     kernel.args.events+0
.82b9		a9 07		lda #$07			lda     #KNLEvent >> 8
.82bb		85 f1		sta $f1				sta     kernel.args.events+1
.82bd		68		pla				pla
.82be		60		rts				rts
.82bf						KNLSetupFileName:
.82bf		5a		phy				phy 								; save Y on stack
.82c0		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.82c2		86 37		stx $37				stx 	zTemp0+1
.82c4		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.82c6		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.82c8		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.82ca						_KNLGetLength:
.82ca		c8		iny				iny
.82cb		b1 36		lda ($36),y			lda 	(zTemp0),y
.82cd		d0 fb		bne $82ca			bne 	_KNLGetLength
.82cf		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.82d1		7a		ply				ply
.82d2		60		rts				rts
.82d3						KNLReadBlock:
.82d3		85 f3		sta $f3				sta     kernel.args.file.read.stream
.82d5		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.82d7		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.82da		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.82dc		b0 2e		bcs $830c			bcs     _KGNBExitFail               ; report as general error
.82de						_KGRBEventLoop:
.82de		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.82e1		20 a5 81	jsr $81a5			jsr     GetNextEvent
.82e4		b0 f8		bcs $82de			bcs     _KGRBEventLoop
.82e6		ad 8e 07	lda $078e			lda 	KNLEvent.type 				; get event
.82e9		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.82eb		f0 0a		beq $82f7			beq     _KNLRBGetNextByte
.82ed		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.82ef		f0 1b		beq $830c			beq 	_KGNBExitFail
.82f1		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82f3		f0 17		beq $830c			beq 	_KGNBExitFail
.82f5		80 e7		bra $82de			bra 	_KGRBEventLoop
.82f7						_KNLRBGetNextByte:
.82f7		a9 8d		lda #$8d			lda     #<KNLReadBuffer 			; Set the target buffer
.82f9		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.82fb		a9 06		lda #$06			lda     #>KNLReadBuffer
.82fd		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.82ff		ad 94 07	lda $0794			lda     KNLEvent.file.data.read 	; Set the target length
.8302		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8304		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8307		ad 94 07	lda $0794			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.830a		18		clc				clc
.830b		60		rts				rts
.830c						_KGNBExitFail:
.830c		38		sec				sec
.830d		60		rts				rts
.830e						KNLWriteBlock:
.830e		da		phx				phx
.830f		5a		phy				phy
.8310		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.8312		a5 36		lda $36				lda     zTemp0 						; save the data location.
.8314		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8316		a5 37		lda $37				lda     zTemp0+1
.8318		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.831a		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.831c		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.831f		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.8321		b0 21		bcs $8344			bcs 	_KWBFailed
.8323						_KNLWLoop:
.8323		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8326		20 a5 81	jsr $81a5			jsr     GetNextEvent
.8329		b0 f8		bcs $8323			bcs     _KNLWLoop
.832b		ad 8e 07	lda $078e			lda     KNLEvent.type 				; various errors.
.832e		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8330		f0 12		beq $8344			beq 	_KWBFailed
.8332		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8334		f0 0e		beq $8344			beq 	_KWBFailed
.8336		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8338		f0 0a		beq $8344			beq 	_KWBFailed
.833a		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.833c		d0 e5		bne $8323			bne 	_KNLWLoop
.833e		18		clc				clc
.833f		ad 94 07	lda $0794			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.8342		80 01		bra $8345			bra 	_KWBExit
.8344						_KWBFailed:
.8344		38		sec				sec
.8345						_KWBExit:
.8345		7a		ply				ply
.8346		fa		plx				plx
.8347		60		rts				rts
.8348						KNLCloseFile:
.8348		85 f3		sta $f3				sta     kernel.args.file.close.stream
.834a		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.834d		60		rts				rts
.834e						KNLReadController:
.834e		da		phx				phx
.834f		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8351		64 01		stz $01				stz 	1 							; switch to I/O 0
.8353		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8356		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8358		0d 80 06	ora $0680			ora 	KeyJoystick 				; use key joystick.
.835b		86 01		stx $01				stx 	1 							; repair old I/O and exit
.835d		fa		plx				plx
.835e		60		rts				rts
.068d						KNLReadBuffer:
>068d								.fill   256
.078d						KNLDefaultDrive:
>078d								.byte 	?
.078e						KNLEvent
>078e						type        .byte   ?   ; Enum above
>078f						buf         .byte   ?   ; page id or zero
>0790						ext         .byte   ?   ; page id or zero
.0791						key
>0791						keyboard    .byte   ?   ; Keyboard ID
>0792						raw         .byte   ?   ; Raw key ID
>0793						ascii       .byte   ?   ; ASCII value
>0794						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0791						mouse
.0791						delta
>0791						x           .byte   ?
>0792						y           .byte   ?
>0793						z           .byte   ?
>0794						buttons     .byte   ?
.0791						clicks
>0791						inner       .byte   ?
>0792						middle      .byte   ?
>0793						outer       .byte   ?
.0791						joystick
>0791						joy0        .byte   ?
>0792						joy1        .byte   ?
.0791						udp
>0791						token       .byte   ?   ; TODO: break out into fields
.0791						file
>0791						stream      .byte   ?
>0792						cookie      .byte   ?
.0793						data
>0793						requested   .byte   ?   ; Requested number of bytes to read
>0794						read        .byte   ?   ; Number of bytes actually read
.0793						wrote
>0793						requested   .byte   ?   ; Requested number of bytes to read
>0794						wrote       .byte   ?   ; Number of bytes actually read
.0791						directory
>0791						stream      .byte   ?
>0792						cookie      .byte   ?
.0793						volume
>0793						len         .byte   ?   ; Length of volname (in buf)
>0794						flags       .byte   ?   ; block size, text encoding
.0793						file
>0793						len         .byte   ?
>0794						flags       .byte   ?   ; block scale, text encoding, approx size
.0793						free
>0793						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.835f						AssembleGroup1:
.835f		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8361		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8364		80 02		bra $8368			bra 	AsmGroup12
.8366						AssembleGroup2:
.8366		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8368						AsmGroup12:
.8368		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.836b		68		pla				pla 								; pop the return address to access the information following.
.836c		fa		plx				plx
.836d		20 f4 83	jsr $83f4			jsr 	AccessParameters 			; get opcode and save as base
.8370		8d 20 04	sta $0420			sta 	BaseOpcode
.8373		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8376		d0 08		bne $8380			bne 	_AG12HaveMask
.8378		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.837a		20 fc 83	jsr $83fc			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.837d		8d 21 04	sta $0421			sta 	ModeMask
.8380						_AG12HaveMask:
.8380		20 30 85	jsr $8530			jsr 	TypeAndCalculateOperand 	; get zero page type
.8383		da		phx				phx 								; save found address mode
.8384		20 60 84	jsr $8460			jsr 	AssembleModeX
.8387		fa		plx				plx  								; restore address mode
.8388		b0 0b		bcs $8395			bcs 	_AG12Exit
.838a		20 96 83	jsr $8396			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.838d		20 60 84	jsr $8460			jsr 	AssembleModeX
.8390		b0 03		bcs $8395			bcs 	_AG12Exit
.8392		4c 17 aa	jmp $aa17			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8395						_AG12Exit:
.8395		60		rts				rts
.8396						PromoteToAbsolute:
.8396		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8398		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.839a		f0 19		beq $83b5			beq 	_PTADo
.839c		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.839e		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.83a0		f0 13		beq $83b5			beq 	_PTADo
.83a2		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.83a4		e0 80		cpx #$80			cpx 	#AM_ZEROY
.83a6		f0 0d		beq $83b5			beq 	_PTADo
.83a8		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.83aa		e0 d1		cpx #$d1			cpx 	#AM_IND
.83ac		f0 07		beq $83b5			beq 	_PTADo
.83ae		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.83b0		e0 c0		cpx #$c0			cpx 	#AM_INDX
.83b2		f0 01		beq $83b5			beq 	_PTADo
.83b4		60		rts				rts
.83b5						_PTADo:
.83b5		aa		tax				tax
.83b6		60		rts				rts
.83b7						AssembleGroup3:
.83b7		68		pla				pla 								; get parameters, which is just the opcode.
.83b8		fa		plx				plx
.83b9		20 f4 83	jsr $83f4			jsr 	AccessParameters 			; get and output opcode
.83bc		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.83bf		20 94 85	jsr $8594			jsr 	CalculateOperand 			; get a 16 bit operand
.83c2		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.83c4		38		sec				sec
.83c5		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.83c8		48		pha				pha 								; LSB in A
.83c9		a5 60		lda $60				lda 	NSMantissa1
.83cb		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.83ce		aa		tax				tax 								; MSB in X
.83cf		68		pla				pla
.83d0		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.83d1		69 7f		adc #$7f			adc 	#$7F
.83d3		90 01		bcc $83d6			bcc 	_AG3NoCarry
.83d5		e8		inx				inx
.83d6						_AG3NoCarry:
.83d6		38		sec				sec 								; fix back and write out anyways.
.83d7		e9 80		sbc #$80			sbc 	#$80
.83d9		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.83dc		e0 00		cpx #$00			cpx 	#0 							; was it in range
.83de		f0 0a		beq $83ea			beq 	_AG3Exit
.83e0		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.83e3		29 01		and #$01			and 	#1
.83e5		f0 03		beq $83ea			beq 	_AG3Exit
.83e7		4c 1c aa	jmp $aa1c			jmp 	RangeError 					; no, branch is out of range
.83ea						_AG3Exit:
.83ea		60		rts				rts
.83eb						AssembleGroup4:
.83eb		68		pla				pla 								; pop address
.83ec		fa		plx				plx
.83ed		20 f4 83	jsr $83f4			jsr 	AccessParameters 			; access and get first
.83f0		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte 			; output it.
.83f3		60		rts				rts
.83f4						AccessParameters:
.83f4		8d 1d 04	sta $041d			sta 	ParamStart
.83f7		8e 1e 04	stx $041e			stx 	ParamStart+1
.83fa		a9 01		lda #$01			lda 	#1
.83fc						GetParameter:
.83fc		5a		phy				phy
.83fd		a8		tay				tay
.83fe		ad 1d 04	lda $041d			lda 	ParamStart
.8401		85 36		sta $36				sta 	zTemp0
.8403		ad 1e 04	lda $041e			lda 	ParamStart+1
.8406		85 37		sta $37				sta 	zTemp0+1
.8408		b1 36		lda ($36),y			lda 	(zTemp0),y
.840a		7a		ply				ply
.840b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.840c						AssemblerWriteByte:
.840c		48		pha			pha
.840d		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8410		29 02		and #$02		and 	#2
.8412		f0 1b		beq $842f		beq 	_AWBNoPrint
.8414		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8417		20 4a 84	jsr $844a		jsr 	PrintHex
.841a		ad 1a 04	lda $041a		lda		AssemblerAddress
.841d		20 4a 84	jsr $844a		jsr 	PrintHex
.8420		a9 20		lda #$20		lda 	#' '
.8422		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8425		68		pla			pla 									; print byte
.8426		48		pha			pha
.8427		20 4a 84	jsr $844a		jsr 	PrintHex
.842a		a9 0d		lda #$0d		lda 	#13
.842c		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.842f						_AWBNoPrint:
.842f		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.8432		85 36		sta $36			sta 	zTemp0
.8434		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8437		f0 0e		beq $8447		beq 	_AWBRange
.8439		85 37		sta $37			sta 	zTemp0+1
.843b		68		pla			pla 									; write byte out
.843c		92 36		sta ($36)		sta 	(zTemp0)
.843e		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.8441		d0 03		bne $8446		bne 	_AWBNoCarry
.8443		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8446						_AWBNoCarry:
.8446		60		rts			rts
.8447						_AWBRange:
.8447		4c 1c aa	jmp $aa1c		jmp 	RangeError
.844a						PrintHex:
.844a		48		pha				pha
.844b		4a		lsr a				lsr 	a
.844c		4a		lsr a				lsr 	a
.844d		4a		lsr a				lsr 	a
.844e		4a		lsr a				lsr 	a
.844f		20 53 84	jsr $8453			jsr 	_PrintNibble
.8452		68		pla				pla
.8453						_PrintNibble:
.8453		29 0f		and #$0f			and 	#15
.8455		c9 0a		cmp #$0a			cmp 	#10
.8457		90 02		bcc $845b			bcc 	_NoShift
.8459		69 06		adc #$06			adc 	#6
.845b						_NoShift:
.845b		69 30		adc #$30			adc 	#48
.845d		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8460						AssembleModeX:
.8460		5a		phy				phy
.8461		ad 1f 04	lda $041f			lda 	IsGroup1
.8464		f0 17		beq $847d			beq 	_AMXGroup2
.8466		8a		txa				txa 							; is it in group # 1
.8467		29 40		and #$40			and 	#AM_ISG1
.8469		f0 4d		beq $84b8			beq 	_AMXFail 				; no, give up.
.846b		8a		txa				txa 							; get back.
.846c		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.846e		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8470		d0 22		bne $8494			bne 	_AMXHaveInfo
.8472		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8475		c9 81		cmp #$81			cmp 	#$81
.8477		f0 3f		beq $84b8			beq 	_AMXFail
.8479		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.847b		80 17		bra $8494			bra 	_AMXHaveInfo 			; odd design decision there.
.847d						_AMXGroup2:
.847d		8a		txa				txa 							; is it in group 2 ?
.847e		29 20		and #$20			and 	#AM_ISG2
.8480		f0 36		beq $84b8			beq 	_AMXFail 				; no, give up.
.8482		8a		txa				txa 							; get the offset into Y
.8483		29 1f		and #$1f			and 	#$1F
.8485		4a		lsr a				lsr 	a 						; make it 0-7.
.8486		4a		lsr a				lsr  	a
.8487		a8		tay				tay
.8488		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.848b						_AMXCheckOkay:
.848b		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.848c		88		dey				dey
.848d		10 fc		bpl $848b			bpl 	_AMXCheckOkay
.848f		90 27		bcc $84b8			bcc 	_AMXFail 				; not allowed.
.8491		8a		txa				txa  							; get mask back
.8492		29 1f		and #$1f			and 	#$1F
.8494						_AMXHaveInfo:
.8494		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8496		10 04		bpl $849c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8498		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.849a		d0 1c		bne $84b8			bne 	_AMXFail
.849c						_AMXAnySize:
.849c		18		clc				clc 							; add offset to the base opcode
.849d		6d 20 04	adc $0420			adc 	BaseOpcode
.84a0						_AMXOutputCode:
.84a0		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte 		; write the opcode out.
.84a3		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.84a5		f0 0e		beq $84b5			beq 	_AMXExit
.84a7		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.84a9		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.84ac		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.84ae		30 05		bmi $84b5			bmi 	_AMXExit
.84b0		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.84b2		20 0c 84	jsr $840c			jsr 	AssemblerWriteByte
.84b5						_AMXExit:
.84b5		7a		ply				ply
.84b6		38		sec				sec
.84b7		60		rts				rts
.84b8						_AMXFail:
.84b8		a0 00		ldy #$00			ldy 	#0
.84ba						_AMXCheckOddities:
.84ba		8a		txa				txa
.84bb		d9 e2 84	cmp $84e2,y			cmp 	ExtraOpcode+2,y 		; match address mode
.84be		d0 15		bne $84d5			bne 	_AMXCONext
.84c0		b9 e0 84	lda $84e0,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.84c3		cd 20 04	cmp $0420			cmp 	BaseOpcode
.84c6		d0 0d		bne $84d5			bne 	_AMXCONext
.84c8		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.84ca		10 04		bpl $84d0			bpl 	_AMXCONotZero
.84cc		a5 60		lda $60				lda 	NSMantissa1
.84ce		d0 05		bne $84d5			bne 	_AMXCONext
.84d0						_AMXCONotZero:
.84d0		b9 e1 84	lda $84e1,y			lda 	ExtraOpcode+1,y 		; get new opcode
.84d3		80 cb		bra $84a0			bra 	_AMXOutputCode 			; and assemble it
.84d5						_AMXCONext:
.84d5		c8		iny				iny
.84d6		c8		iny				iny
.84d7		c8		iny				iny
.84d8		b9 e0 84	lda $84e0,y			lda 	ExtraOpcode+0,y 		; end of table
.84db		d0 dd		bne $84ba			bne 	_AMXCheckOddities
.84dd						_AMXCOFail:
.84dd		7a		ply				ply
.84de		18		clc				clc
.84df		60		rts				rts
.84e0						ExtraOpcode:
>84e0		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>84e3		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>84e6		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>84e9		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>84ec		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>84ef		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>84f2		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>84f5		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>84f8		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>84fb		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>84fe		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.84ff						LabelHere:
.84ff		c8		iny				iny 								; skip .
.8500		a2 00		ldx #$00			ldx 	#0 							; get a term
.8502		20 66 a1	jsr $a166			jsr 	EvaluateTerm
.8505		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8507		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8509		d0 22		bne $852d			bne 	_ALType 					; otherwise typing error
.850b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.850d		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.850f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8511		85 37		sta $37				sta 	zTemp0+1
.8513		5a		phy				phy 								; copy address in (64k)
.8514		a0 01		ldy #$01			ldy 	#1
.8516		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8519		92 36		sta ($36)			sta 	(zTemp0)
.851b		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.851e		91 36		sta ($36),y			sta 	(zTemp0),y
.8520		c8		iny				iny
.8521		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8523		91 36		sta ($36),y			sta 	(zTemp0),y
.8525		c8		iny				iny
.8526		91 36		sta ($36),y			sta 	(zTemp0),y
.8528		c8		iny				iny
.8529		91 36		sta ($36),y			sta 	(zTemp0),y
.852b		7a		ply				ply
.852c		60		rts				rts
.852d						_ALType:
.852d		4c 21 aa	jmp $aa21			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8530						TypeAndCalculateOperand:
.8530		b1 30		lda ($30),y			lda 	(codePtr),y
.8532		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8534		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8536		f0 5b		beq $8593			beq 	_TACOExit
.8538		c9 80		cmp #$80			cmp 	#KWC_EOL
.853a		f0 57		beq $8593			beq 	_TACOExit
.853c		c8		iny				iny
.853d		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.853f		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8541		f0 51		beq $8594			beq 	CalculateOperand
.8543		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8545		f0 1f		beq $8566			beq 	_TACOIndirect
.8547		88		dey				dey 								; undo get of first character
.8548		20 94 85	jsr $8594			jsr 	CalculateOperand 			; get operand
.854b		b1 30		lda ($30),y			lda 	(codePtr),y
.854d		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.854f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8551		d0 40		bne $8593			bne 	_TACOExit
.8553		c8		iny				iny
.8554		20 9e 85	jsr $859e			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8557		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8559		c9 58		cmp #$58			cmp 	#'X'
.855b		f0 36		beq $8593			beq 	_TACOExit
.855d		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.855f		c9 59		cmp #$59			cmp 	#'Y'
.8561		f0 30		beq $8593			beq 	_TACOExit
.8563						_TACOSyntax:
.8563		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.8566						_TACOIndirect:
.8566		20 94 85	jsr $8594			jsr 	CalculateOperand 			; get the operand
.8569		b1 30		lda ($30),y			lda 	(codePtr),y
.856b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.856d		f0 17		beq $8586			beq 	_TACOIndX
.856f		20 ff 97	jsr $97ff			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8572		b1 30		lda ($30),y			lda 	(codePtr),y
.8574		a2 d1		ldx #$d1			ldx 	#AM_IND
.8576		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8578		d0 19		bne $8593			bne 	_TACOExit
.857a		c8		iny				iny
.857b		20 9e 85	jsr $859e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.857e		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8580		d0 e1		bne $8563			bne 	_TACOSyntax
.8582		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8584		80 0d		bra $8593			bra 	_TACOExit
.8586						_TACOIndX:
.8586		c8		iny				iny
.8587		20 9e 85	jsr $859e			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.858a		c9 58		cmp #$58			cmp 	#'X' 						; check X
.858c		d0 d5		bne $8563			bne 	_TACOSyntax
.858e		20 ff 97	jsr $97ff			jsr 	CheckRightBracket			; check )
.8591		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8593						_TACOExit:
.8593		60		rts				rts
.8594						CalculateOperand:
.8594		48		pha				pha
.8595		da		phx				phx
.8596		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8598		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.859b		fa		plx				plx
.859c		68		pla				pla
.859d		60		rts				rts
.859e						TACOCheckXY:
.859e		b1 30		lda ($30),y			lda 	(codePtr),y
.85a0		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.85a2		c9 40		cmp #$40			cmp 	#$40
.85a4		d0 21		bne $85c7			bne 	_TCXYFail
.85a6		b1 30		lda ($30),y			lda 	(codePtr),y
.85a8		18		clc				clc
.85a9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.85ab		85 37		sta $37				sta 	zTemp0+1
.85ad		c8		iny				iny
.85ae		b1 30		lda ($30),y			lda 	(codePtr),y
.85b0		c8		iny				iny
.85b1		85 36		sta $36				sta 	zTemp0
.85b3		5a		phy				phy 								; save position
.85b4		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.85b6		b1 36		lda ($36),y			lda 	(zTemp0),y
.85b8		d0 0c		bne $85c6			bne 	_TCXYPopFail
.85ba		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.85bc		b1 36		lda ($36),y			lda 	(zTemp0),y
.85be		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.85c0		f0 08		beq $85ca			beq 	_TCXYFound
.85c2		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.85c4		f0 04		beq $85ca			beq 	_TCXYFound
.85c6						_TCXYPopFail:
.85c6		7a		ply				ply
.85c7						_TCXYFail:
.85c7		a9 00		lda #$00			lda 	#0
.85c9		60		rts				rts
.85ca						_TCXYFound:
.85ca		7a		ply				ply 								; restore position
.85cb		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.85cd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.85ce						BackloadProgram:
.85ce		20 44 92	jsr $9244			jsr 	NewProgram 					; does the actual NEW.
.85d1		a2 86		ldx #$86			ldx 	#_BLLoad >> 8
.85d3		a9 25		lda #$25			lda 	#_BLLoad & $FF
.85d5		20 71 98	jsr $9871			jsr 	PrintStringXA
.85d8		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.85da		8d 95 07	sta $0795			sta 	BackLoadPage
.85dd		a9 00		lda #$00			lda 	#(($6000) & $FF)
.85df		8d 96 07	sta $0796			sta 	0+BackLoadPointer
.85e2		a9 60		lda #$60			lda 	#(($6000) >> 8)
.85e4		8d 97 07	sta $0797			sta 	1+BackLoadPointer
.85e7		a9 ff		lda #$ff			lda 	#$FF
.85e9		8d fa ff	sta $fffa			sta 	$FFFA
.85ec						_BPLoop:
.85ec		a2 ff		ldx #$ff			ldx 	#$FF
.85ee		20 3a 86	jsr $863a			jsr 	BLReadByte 					; read a byte
.85f1		c9 00		cmp #$00			cmp 	#0
.85f3		f0 29		beq $861e			beq 	_BPExit 					; if 0 exit
.85f5		30 27		bmi $861e			bmi 	_BPExit 					; if -ve exit
.85f7						_BPCopy:
.85f7		e8		inx				inx  								; copy byte into the lineBuffer
.85f8		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.85fb		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.85fe		20 3a 86	jsr $863a			jsr 	BLReadByte 					; read next byte
.8601		30 0a		bmi $860d			bmi 	_BPEndLine 					; -ve = EOL
.8603		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8605		d0 02		bne $8609			bne 	_BPNotTab
.8607		a9 20		lda #$20			lda 	#' '
.8609						_BPNotTab:
.8609		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.860b		b0 ea		bcs $85f7			bcs 	_BPCopy 					; until a control character, should be 13 received.
.860d						_BPEndLine:
.860d		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8610		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8613		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8616		f0 d4		beq $85ec			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8618		38		sec				sec 								; append not insert
.8619		20 0b ac	jsr $ac0b			jsr 	MemoryInsertLine 			; append to current program
.861c		80 ce		bra $85ec			bra 	_BPLoop
.861e						_BPExit:
.861e		9c fa ff	stz $fffa			stz 	$FFFA
.8621		20 26 87	jsr $8726			jsr 	ClearCommand 				; clear variables etc.
.8624		60		rts				rts
.8625						_BLLoad:
>8625		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>862d		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.863a						BLReadByte:
.863a		da		phx				phx
.863b		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.863d		ad 95 07	lda $0795			lda 	BackLoadPage	 			; set current page
.8640		85 0b		sta $0b				sta 	8+3
.8642		ad 96 07	lda $0796			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8645		85 36		sta $36				sta 	zTemp0
.8647		ad 97 07	lda $0797			lda 	BackLoadPointer+1
.864a		85 37		sta $37				sta 	zTemp0+1
.864c		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.864e		ee 96 07	inc $0796			inc 	BackLoadPointer 			; bump pointer
.8651		d0 0f		bne $8662			bne 	_BLNoCarry
.8653		ee 97 07	inc $0797			inc 	BackLoadPointer+1
.8656		10 0a		bpl $8662			bpl 	_BLNoCarry 					; need a new page
.8658		48		pha				pha
.8659		a9 60		lda #$60			lda 	#$60 						; reset pointer
.865b		8d 97 07	sta $0797			sta 	BackLoadPointer+1
.865e		ee 95 07	inc $0795			inc 	BackLoadPage 				; next page from source.
.8661		68		pla				pla
.8662						_BLNoCarry:
.8662		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8664		fa		plx				plx
.8665		c9 00		cmp #$00			cmp 	#0
.8667		60		rts				rts
.0795						BackLoadPage:
>0795								.fill  	1
.0796						BackLoadPointer:
>0796								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8668						EditProgramCode:
.8668		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.866b		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.866e		20 af ac	jsr $acaf			jsr 	MemorySearch
.8671		90 05		bcc $8678			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8673		d0 03		bne $8678			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8675		20 d4 ab	jsr $abd4			jsr 	MemoryDeleteLine 			; delete the line
.8678						_EPCNoDelete:
.8678		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.867b		c9 80		cmp #$80			cmp 	#KWC_EOL
.867d		f0 0d		beq $868c			beq 	_EPCNoInsert
.867f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8682		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8685		20 af ac	jsr $acaf			jsr 	MemorySearch
.8688		18		clc				clc 								; insert at this point.
.8689		20 0b ac	jsr $ac0b			jsr 	MemoryInsertLine 			; insert the line
.868c						_EPCNoInsert:
.868c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.868d						WarmStart:
.868d		a2 ff		ldx #$ff			ldx 	#$FF
.868f		9a		txs				txs
.8690		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8692		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8695		20 9c 81	jsr $819c			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8698		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.869b		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.869e		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.86a1		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.86a4		d0 17		bne $86bd			bne 	_WSEditCode 				; if so,edit code.
.86a6		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.86a9		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.86ab		85 30		sta $30				sta 	codePtr
.86ad		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.86af		85 31		sta $31				sta 	codePtr+1
.86b1		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.86b4		c9 80		cmp #$80			cmp 	#KWC_EOL
.86b6		f0 d5		beq $868d			beq 	WarmStart
.86b8		20 e1 93	jsr $93e1			jsr 	RUNCodePointerLine 			; execute that line.
.86bb		80 d0		bra $868d			bra 	WarmStart
.86bd						_WSEditCode:
.86bd		20 68 86	jsr $8668			jsr 	EditProgramCode 			; edit the program code
.86c0		20 26 87	jsr $8726			jsr 	ClearCommand 				; clear all variables etc.
.86c3		80 c8		bra $868d			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.86c5						AssembleCommand:
.86c5		a2 00		ldx #$00			ldx 	#0
.86c7		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger 		; start address
.86ca		a5 58		lda $58				lda 	NSMantissa0
.86cc		8d 1a 04	sta $041a			sta 	AssemblerAddress
.86cf		a5 60		lda $60				lda 	NSMantissa1
.86d1		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.86d4		20 07 98	jsr $9807			jsr 	CheckComma
.86d7		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; options 0-3
.86da		a5 58		lda $58				lda 	NSMantissa0
.86dc		8d 1c 04	sta $041c			sta 	AssemblerControl
.86df		60		rts				rts
.86e0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.86e1						AssertCommand:
.86e1		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.86e3		20 df a6	jsr $a6df			jsr 	EvaluateInteger 			; the assert test
.86e6		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; exit if result is non zero.
.86e9		d0 05		bne $86f0			bne 	_ACExit
.86eb		a9 0a		lda #$0a		lda	#10
.86ed		4c 18 98	jmp $9818		jmp	ErrorHandler
.86f0						_ACExit:
.86f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.86f1						CallCommand:
.86f1		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.86f3		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.86f6						_CCClear
.86f6		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.86f7		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; these are optional sequentially.
.86fa		e0 04		cpx #$04			cpx 	#4
.86fc		d0 f8		bne $86f6			bne 	_CCClear
.86fe		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8700						_CCCParam:
.8700		b1 30		lda ($30),y			lda 	(codePtr),y
.8702		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8704		d0 09		bne $870f			bne 	_CCCRun6502
.8706		c8		iny				iny 								; skip comma
.8707		e8		inx				inx	 								; next level
.8708		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.870b		e0 03		cpx #$03			cpx 	#3
.870d		90 f1		bcc $8700			bcc 	_CCCParam 					; done all 3 ?
.870f						_CCCRun6502:
.870f		5a		phy				phy 								; save position
.8710		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8712		85 37		sta $37				sta 	zTemp0+1
.8714		a5 58		lda $58				lda 	NSMantissa0
.8716		85 36		sta $36				sta 	zTemp0
.8718		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.871a		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.871c		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.871e		20 23 87	jsr $8723			jsr 	_CCCZTemp0 					; call zTemp0
.8721		7a		ply				ply 								; restore position and exit
.8722		60		rts				rts
.8723						_CCCZTemp0:
.8723		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8726						ClearCommand:
.8726		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8728		85 36		sta $36				sta 	0+zTemp0
.872a		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.872c		85 37		sta $37				sta 	1+zTemp0
.872e						_ClearZeroLoop:
.872e		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8730		f0 24		beq $8756			beq 	_ClearZeroEnd
.8732		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8734		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8736						_ClearOneVariable:
.8736		91 36		sta ($36),y			sta 	(zTemp0),y
.8738		c8		iny				iny
.8739		c0 08		cpy #$08			cpy 	#8
.873b		d0 f9		bne $8736			bne 	_ClearOneVariable
.873d		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.873f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8741		c9 18		cmp #$18			cmp 	#NSTProcedure
.8743		d0 04		bne $8749			bne 	_ClearNotProcedure
.8745		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8747		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8749						_ClearNotProcedure:
.8749		18		clc				clc 								; go to the next variable
.874a		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.874c		65 36		adc $36				adc 	zTemp0
.874e		85 36		sta $36				sta 	zTemp0
.8750		90 dc		bcc $872e			bcc 	_ClearZeroLoop
.8752		e6 37		inc $37				inc 	zTemp0+1
.8754		80 d8		bra $872e			bra 	_ClearZeroLoop
.8756						_ClearZeroEnd:
.8756		18		clc				clc
.8757		a5 36		lda $36				lda 	zTemp0
.8759		69 01		adc #$01			adc 	#1
.875b		8d 08 04	sta $0408			sta 	lowMemPtr
.875e		a5 37		lda $37				lda 	zTemp0+1
.8760		69 00		adc #$00			adc 	#0
.8762		8d 09 04	sta $0409			sta 	lowMemPtr+1
.8765		20 f7 b0	jsr $b0f7			jsr 	StackReset
.8768		20 5d b1	jsr $b15d			jsr 	StringSystemInitialise
.876b		20 08 97	jsr $9708			jsr 	ProcedureScan
.876e		20 83 93	jsr $9383			jsr 	Command_Restore
.8771		9c 1a 04	stz $041a			stz 	AssemblerAddress
.8774		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.8777		9c 1c 04	stz $041c			stz 	AssemblerControl
.877a		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.877d		20 52 a3	jsr $a352			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8780		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.8781						XLoadCommand:
.8781		20 44 92	jsr $9244			jsr 	NewProgram
.8784		20 ce 85	jsr $85ce			jsr 	BackloadProgram
.8787		4c 8d 86	jmp $868d			jmp 	WarmStart
.878a						XGoCommand:
.878a		20 44 92	jsr $9244			jsr 	NewProgram
.878d		20 ce 85	jsr $85ce			jsr 	BackloadProgram
.8790		4c cf 93	jmp $93cf			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8793						Command_Data:
.8793		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8795		a2 80		ldx #$80			ldx 	#KWC_EOL
.8797		20 5a 97	jsr $975a			jsr 	ScanForward
.879a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.879b						DimCommand:
.879b		b1 30		lda ($30),y			lda 	(codePtr),y
.879d		29 c0		and #$c0			and 	#$C0
.879f		c9 40		cmp #$40			cmp 	#$40
.87a1		d0 7a		bne $881d			bne 	_DCSyntax 				; n o, error.
.87a3		b1 30		lda ($30),y			lda 	(codePtr),y
.87a5		18		clc				clc
.87a6		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87a8		85 3f		sta $3f				sta 	zaTemp+1
.87aa		c8		iny				iny
.87ab		b1 30		lda ($30),y			lda 	(codePtr),y
.87ad		c8		iny				iny
.87ae		85 3e		sta $3e				sta 	zaTemp
.87b0		5a		phy				phy
.87b1		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87b3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87b5		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87b7		c9 18		cmp #$18			cmp 	#NSTProcedure
.87b9		f0 62		beq $881d			beq 	_DCSyntax
.87bb		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87bd		29 04		and #$04			and 	#NSBIsArray
.87bf		f0 64		beq $8825			beq 	_DCType
.87c1		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87c3		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87c5		d0 59		bne $8820			bne 	_DCRedefine
.87c7		7a		ply				ply
.87c8		20 28 88	jsr $8828			jsr 	_DCGetSize 				; get array size, check it.
.87cb		5a		phy				phy
.87cc		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.87ce		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.87d0		7a		ply				ply 							; is there a second (e.g. ,x)
.87d1		b1 30		lda ($30),y			lda 	(codePtr),y
.87d3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87d5		d0 0a		bne $87e1			bne 	_DCOneDimension
.87d7		c8		iny				iny 							; skip comma
.87d8		20 28 88	jsr $8828			jsr 	_DCGetSize 				; get 2nd array size
.87db		5a		phy				phy
.87dc		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.87de		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87e0		7a		ply				ply
.87e1						_DCOneDimension:
.87e1		5a		phy				phy 							; save position
.87e2		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.87e4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87e6		aa		tax				tax
.87e7		c8		iny				iny
.87e8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87ea		e8		inx				inx 							; bump them.
.87eb		1a		inc a				inc 	a
.87ec		20 1d a7	jsr $a71d			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.87ef		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.87f1		29 e0		and #$e0			and 	#$E0
.87f3		d0 23		bne $8818			bne 	_DCSize
.87f5		a0 02		ldy #$02			ldy 	#2 						; get base type
.87f7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87f9		20 36 88	jsr $8836			jsr 	ScaleByBaseType 		; scale by base type
.87fc		a5 36		lda $36				lda 	zTemp0
.87fe		a6 37		ldx $37				ldx 	zTemp0+1
.8800		20 14 a3	jsr $a314			jsr 	AllocateXABytes 		; allocate memory
.8803		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8805		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8807		c8		iny				iny
.8808		8a		txa				txa
.8809		91 3e		sta ($3e),y			sta 	(zaTemp),y
.880b		7a		ply				ply 							; get position back
.880c		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 		; check )
.880f		b1 30		lda ($30),y			lda 	(codePtr),y
.8811		c8		iny				iny 							; consume in case
.8812		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8814		f0 85		beq $879b			beq 	DimCommand
.8816		88		dey				dey 							; undo consume
.8817		60		rts				rts
.8818						_DCSize:
.8818		a9 16		lda #$16		lda	#22
.881a		4c 18 98	jmp $9818		jmp	ErrorHandler
.881d						_DCSyntax:
.881d		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.8820						_DCRedefine:
.8820		a9 15		lda #$15		lda	#21
.8822		4c 18 98	jmp $9818		jmp	ErrorHandler
.8825						_DCType:
.8825		4c 21 aa	jmp $aa21			jmp 	TypeError
.8828						_DCGetSize:
.8828		a2 00		ldx #$00			ldx 	#0 						; get first index.
.882a		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 	; get array dimension
.882d		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.882f		f0 e7		beq $8818			beq 	_DCSize
.8831		c9 fe		cmp #$fe			cmp 	#254
.8833		f0 e3		beq $8818			beq 	_DCSize
.8835		60		rts				rts
.8836						ScaleByBaseType:
.8836		29 10		and #$10			and 	#NSBIsString 			; is it string
.8838		d0 19		bne $8853			bne 	_SBBTString
.883a		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.883c		48		pha				pha
.883d		a5 36		lda $36				lda 	zTemp0
.883f		48		pha				pha
.8840		06 36		asl $36				asl 	zTemp0 					; x 2
.8842		26 37		rol $37				rol 	zTemp0+1
.8844		06 36		asl $36				asl 	zTemp0 					; x 4
.8846		26 37		rol $37				rol 	zTemp0+1
.8848		68		pla				pla 							; add stacked value = x 5
.8849		65 36		adc $36				adc 	zTemp0
.884b		85 36		sta $36				sta 	zTemp0
.884d		68		pla				pla
.884e		65 37		adc $37				adc 	zTemp0+1
.8850		85 37		sta $37				sta 	zTemp0+1
.8852		60		rts				rts
.8853						_SBBTString:
.8853		06 36		asl $36				asl 	zTemp0
.8855		26 37		rol $37				rol 	zTemp0+1
.8857		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.8858						BootDOS:
.8858		a9 66		lda #$66	            lda     #dosName & $FF
.885a		85 fb		sta $fb		            sta     kernel.args.buf+0
.885c		a9 88		lda #$88	            lda     #dosName >> 8
.885e		85 fc		sta $fc		            sta     kernel.args.buf+1
.8860		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8863		4c 8d 86	jmp $868d	            jmp 	WarmStart
>8866		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.886a						EndCommand:
.886a		4c 8d 86	jmp $868d			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.886d						UnaryEvent:
.886d		fa		plx				plx
.886e		20 f3 96	jsr $96f3			jsr 	TimerToStackX 				; timer in +0
.8871		e8		inx				inx  								; put reference into +1
.8872		20 66 a1	jsr $a166			jsr 	EvaluateTerm
.8875		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.8877		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8879		d0 4c		bne $88c7			bne 	_UEType
.887b		e8		inx				inx 								; put the step in +2
.887c		20 07 98	jsr $9807			jsr 	CheckComma
.887f		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.8882		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.8885		ca		dex				dex
.8886		ca		dex				dex
.8887		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8889		85 36		sta $36				sta 	zTemp0
.888b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.888d		85 37		sta $37				sta 	zTemp0+1
.888f		5a		phy				phy
.8890		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8892		b1 36		lda ($36),y			lda 	(zTemp0),y
.8894		30 2d		bmi $88c3			bmi 	_UEFalse 					; exit if signed.
.8896		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8898		b5 58		lda $58,x			lda 	NSMantissa0,x
.889a		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.889c		c8		iny				iny
.889d		b5 60		lda $60,x			lda 	NSMantissa1,x
.889f		f1 36		sbc ($36),y			sbc		(zTemp0),y
.88a1		c8		iny				iny
.88a2		b5 68		lda $68,x			lda 	NSMantissa2,x
.88a4		f1 36		sbc ($36),y			sbc		(zTemp0),y
.88a6		90 1b		bcc $88c3			bcc 	_UEFalse 					; no, return FALSE.
.88a8		18		clc				clc
.88a9		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.88ab		b5 58		lda $58,x			lda 	NSMantissa0,x
.88ad		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.88af		91 36		sta ($36),y			sta 	(zTemp0),y
.88b1		c8		iny				iny
.88b2		b5 60		lda $60,x			lda 	NSMantissa1,x
.88b4		75 62		adc $62,x			adc 	NSMantissa1+2,x
.88b6		91 36		sta ($36),y			sta 	(zTemp0),y
.88b8		c8		iny				iny
.88b9		b5 68		lda $68,x			lda 	NSMantissa2,x
.88bb		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.88bd		91 36		sta ($36),y			sta 	(zTemp0),y
.88bf		7a		ply				ply
.88c0		4c 85 98	jmp $9885			jmp 	ReturnTrue
.88c3						_UEFalse:
.88c3		7a		ply				ply 								; restore Y
.88c4		4c 90 98	jmp $9890			jmp 	ReturnFalse 				; and return False
.88c7						_UEType:
.88c7		4c 21 aa	jmp $aa21			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.88ca						Command_BLoad:
.88ca		a2 00		ldx #$00			ldx 	#0
.88cc		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; file name to load
.88cf		20 07 98	jsr $9807			jsr 	CheckComma 					; consume comma
.88d2		e8		inx				inx
.88d3		20 df a6	jsr $a6df			jsr 	EvaluateInteger 			; load address (full physical address)
.88d6		5a		phy				phy
.88d7		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.88d9		a6 60		ldx $60				ldx 	NSMantissa1
.88db		20 7e 82	jsr $827e			jsr 	KNLOpenFileRead 			; open file for reading
.88de		b0 4e		bcs $892e			bcs 	CBLErrorHandler 			; error, so fail.
.88e0		8d 9c 07	sta $079c			sta 	BasicFileStream 			; save the reading stream.
.88e3		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.88e5		20 31 89	jsr $8931			jsr 	BLOpenPhysicalMemory 		; open for access.
.88e8						_BLReadFile:
.88e8		ad 9c 07	lda $079c			lda 	BasicFileStream
.88eb		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.88ed		20 d3 82	jsr $82d3			jsr 	KNLReadBlock 				; read next block
.88f0		b0 22		bcs $8914			bcs 	_BLFileError 				; file error, which might be EOF.
.88f2		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.88f4		f0 f2		beq $88e8			beq 	_BLReadFile
.88f6		8d 9a 07	sta $079a			sta 	BLCopyCounter 				; counter.
.88f9		ac 99 07	ldy $0799			ldy 	BLYOffset 					; copy the buffer out here
.88fc		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.88fe						_BLCopyLoop:
.88fe		bd 8d 06	lda $068d,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8901		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8903		c8		iny				iny
.8904		d0 03		bne $8909			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.8906		20 59 89	jsr $8959			jsr 	BLAdvancePhysicalMemory
.8909						_BLNoAdjust:
.8909		e8		inx				inx
.890a		ce 9a 07	dec $079a			dec 	BLCopyCounter
.890d		d0 ef		bne $88fe			bne 	_BLCopyLoop
.890f		8c 99 07	sty $0799			sty 	BLYOffset 					; update Y offset
.8912		80 d4		bra $88e8			bra 	_BLReadFile 				; go ask for more.
.8914						_BLFileError:
.8914		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8916		d0 16		bne $892e			bne 	CBLErrorHandler				; no, it's an actual error
.8918		20 53 89	jsr $8953			jsr 	BLClosePhysicalMemory 		; close the access.
.891b		ad 9c 07	lda $079c			lda 	BasicFileStream 			; close the file
.891e		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8921		7a		ply				ply
.8922		60		rts				rts
.8923						CBLCloseError:
.8923		48		pha				pha
.8924		20 53 89	jsr $8953			jsr 	BLClosePhysicalMemory
.8927		ad 9c 07	lda $079c			lda 	BasicFileStream
.892a		20 48 83	jsr $8348			jsr 	KNLCloseFile
.892d		68		pla				pla
.892e						CBLErrorHandler:
.892e		4c 17 8b	jmp $8b17			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8931						BLOpenPhysicalMemory:
.8931		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8933		8d 98 07	sta $0798			sta 	BLNormalMapping
.8936		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8938		8d 99 07	sta $0799			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.893b		64 3a		stz $3a				stz 	zTemp2
.893d		b5 60		lda $60,x			lda 	NSMantissa1,x
.893f		29 1f		and #$1f			and 	#$1F
.8941		09 60		ora #$60			ora 	#BLAccessPage << 5
.8943		85 3b		sta $3b				sta 	zTemp2+1
.8945		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8947		16 60		asl $60,x			asl 	NSMantissa1,x
.8949		2a		rol a				rol 	a
.894a		16 60		asl $60,x			asl 	NSMantissa1,x
.894c		2a		rol a				rol 	a
.894d		16 60		asl $60,x			asl 	NSMantissa1,x
.894f		2a		rol a				rol 	a
.8950		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8952		60		rts				rts
.8953						BLClosePhysicalMemory:
.8953		ad 98 07	lda $0798			lda 	BLNormalMapping
.8956		85 0b		sta $0b				sta 	BLAccessPage+8
.8958		60		rts				rts
.8959						BLAdvancePhysicalMemory:
.8959		48		pha				pha
.895a		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.895c		a5 3b		lda $3b				lda 	zTemp2+1
.895e		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8960		d0 06		bne $8968			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8962		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8964		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8966		85 3b		sta $3b				sta 	zTemp2+1
.8968						_BLAPMExit:
.8968		68		pla				pla
.8969		60		rts				rts
.0798						BLNormalMapping:
>0798								.fill 	1
.0799						BLYOffset:
>0799								.fill 	1
.079a						BLCopyCounter:
>079a								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.896a						Command_BSave:
.896a		a2 00		ldx #$00			ldx 	#0
.896c		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; file name to load
.896f		20 07 98	jsr $9807			jsr 	CheckComma 					; consume comma
.8972		e8		inx				inx
.8973		20 df a6	jsr $a6df			jsr 	EvaluateInteger 			; load address (full physical address)
.8976		20 07 98	jsr $9807			jsr 	CheckComma 					; consume comma
.8979		e8		inx				inx
.897a		20 df a6	jsr $a6df			jsr 	EvaluateInteger 			; data length (3 bytes only)
.897d		5a		phy				phy
.897e		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8980		a6 60		ldx $60				ldx 	NSMantissa1
.8982		20 79 82	jsr $8279			jsr 	KNLOpenFileWrite 			; open file for reading
.8985		b0 62		bcs $89e9			bcs 	CBSErrorHandler 			; error, so fail.
.8987		8d 9c 07	sta $079c			sta 	BasicFileStream 			; save the reading stream.
.898a		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.898c		20 31 89	jsr $8931			jsr 	BLOpenPhysicalMemory 		; open for access.
.898f		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8991		ac 99 07	ldy $0799			ldy 	BLYOffset 					; used for data offset.
.8994						_BSWriteToFileLoop:
.8994		38		sec				sec 								; pre decrement count.
.8995		a5 5a		lda $5a				lda 	NSMantissa0+2
.8997		e9 01		sbc #$01			sbc 	#1
.8999		85 5a		sta $5a				sta 	NSMantissa0+2
.899b		a5 62		lda $62				lda 	NSMantissa1+2
.899d		e9 00		sbc #$00			sbc 	#0
.899f		85 62		sta $62				sta 	NSMantissa1+2
.89a1		a5 6a		lda $6a				lda 	NSMantissa2+2
.89a3		e9 00		sbc #$00			sbc 	#0
.89a5		85 6a		sta $6a				sta 	NSMantissa2+2
.89a7		30 15		bmi $89be			bmi 	_BSFileComplete 			; undercounted, so exit.
.89a9		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.89ab		9d 8d 06	sta $068d,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.89ae		e8		inx				inx
.89af		c8		iny				iny 								; next byte
.89b0		d0 03		bne $89b5			bne 	_BSNoCheck
.89b2		20 59 89	jsr $8959			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.89b5						_BSNoCheck:
.89b5		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.89b7		d0 db		bne $8994			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.89b9		20 cc 89	jsr $89cc			jsr 	BSFlushBuffer 				; yes, flush the buffer
.89bc		80 d6		bra $8994			bra 	_BSWriteToFileLoop 			; and keep on going
.89be						_BSFileComplete:
.89be		20 cc 89	jsr $89cc			jsr 	BSFlushBuffer 				; write the buffer remainder.
.89c1		20 53 89	jsr $8953			jsr 	BLClosePhysicalMemory 		; close the access.
.89c4		ad 9c 07	lda $079c			lda 	BasicFileStream 			; close the file
.89c7		20 48 83	jsr $8348			jsr 	KNLCloseFile
.89ca		7a		ply				ply
.89cb		60		rts				rts
.89cc						BSFlushBuffer:
.89cc		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.89ce		f0 0d		beq $89dd			beq 	_BSFBExit 					; if so, exit.
.89d0		a9 8d		lda #$8d			lda 	#KNLReadBuffer & $FF 		; where to write from.
.89d2		85 36		sta $36				sta 	zTemp0
.89d4		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.89d6		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.89d8		20 d3 8b	jsr $8bd3			jsr 	CLWriteByteBlock 			; write it.
.89db		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.89dd						_BSFBExit:
.89dd		60		rts				rts
.89de						CBSSCloseError:
.89de		48		pha				pha
.89df		20 53 89	jsr $8953			jsr 	BLClosePhysicalMemory
.89e2		ad 9c 07	lda $079c			lda 	BasicFileStream
.89e5		20 48 83	jsr $8348			jsr 	KNLCloseFile
.89e8		68		pla				pla
.89e9						CBSErrorHandler:
.89e9		4c 17 8b	jmp $8b17			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.89ec						Command_Dir:
.89ec		ad 8d 07	lda $078d			lda     KNLDefaultDrive				; set drive to list.
.89ef		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.89f1		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.89f3		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.89f6		b0 4f		bcs $8a47			bcs     _CDExit
.89f8						_CDEventLoop:
.89f8		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.89fb		20 a5 81	jsr $81a5			jsr     GetNextEvent
.89fe		b0 f8		bcs $89f8			bcs     _CDEventLoop
.8a00		ad 8e 07	lda $078e			lda     KNLEvent.type
.8a03		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8a05		f0 40		beq $8a47			beq    	_CDExit
.8a07		20 0c 8a	jsr $8a0c			jsr     _CDMessages 				; handle various messages
.8a0a		80 ec		bra $89f8			bra     _CDEventLoop
.8a0c						_CDMessages:
.8a0c		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8a0e		f0 15		beq $8a25			beq     _CDEVRead
.8a10		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8a12		f0 19		beq $8a2d			beq     _CDEVVolume
.8a14		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8a16		f0 32		beq $8a4a			beq     _CDEVFile
.8a18		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8a1a		f0 70		beq $8a8c			beq     _CDEVFree
.8a1c		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8a1e		f0 6e		beq $8a8e			beq     _CDEVEOF
.8a20		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8a22		f0 6a		beq $8a8e			beq     _CDEVEOF
.8a24		60		rts				rts
.8a25						_CDEVRead:
.8a25		ad 91 07	lda $0791			lda     KNLEvent.directory.stream
.8a28		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8a2a		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8a2d						_CDEVVolume:
.8a2d		a9 5b		lda #$5b			lda 	#"["
.8a2f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a32		ad 93 07	lda $0793			lda     KNLEvent.directory.volume.len
.8a35		20 96 8a	jsr $8a96			jsr     _CDReadData
.8a38		20 71 98	jsr $9871			jsr 	PrintStringXA
.8a3b		a9 5d		lda #$5d			lda 	#"]"
.8a3d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a40		a9 0d		lda #$0d			lda 	#13
.8a42		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a45		80 de		bra $8a25			bra     _CDEVRead
.8a47						_CDExit:
.8a47		4c 8d 86	jmp $868d			jmp 	WarmStart
.8a4a						_CDEVFile:
.8a4a		a9 20		lda #$20			lda 	#32
.8a4c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a4f		ad 93 07	lda $0793			lda     KNLEvent.directory.file.len
.8a52		48		pha				pha
.8a53		20 96 8a	jsr $8a96			jsr     _CDReadData
.8a56		20 71 98	jsr $9871			jsr 	PrintStringXA
.8a59		68		pla				pla
.8a5a		49 ff		eor #$ff			eor 	#$FF
.8a5c		38		sec				sec
.8a5d		69 10		adc #$10			adc 	#16
.8a5f		aa		tax				tax
.8a60						_CDEVTab:
.8a60		a9 20		lda #$20			lda 	#32
.8a62		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a65		ca		dex				dex
.8a66		10 f8		bpl $8a60			bpl 	_CDEVTab
.8a68		20 ad 8a	jsr $8aad			jsr 	_CDReadExtended
.8a6b		ad 26 05	lda $0526			lda 	lineBuffer
.8a6e		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8a71		20 87 9c	jsr $9c87			jsr 	ConvertInt16
.8a74		20 71 98	jsr $9871			jsr 	PrintStringXA
.8a77		a2 8a		ldx #$8a			ldx 	#_CDEVFMessage >> 8
.8a79		a9 80		lda #$80			lda 	#_CDEVFMessage & $FF
.8a7b		20 71 98	jsr $9871			jsr 	PrintStringXA
.8a7e		80 a5		bra $8a25			bra     _CDEVRead
.8a80						_CDEVFMessage:
>8a80		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8a88		29 2e 0d 00
.8a8c						_CDEVFree:
.8a8c		80 00		bra $8a8e			bra     _CDEVEOF
.8a8e						_CDEVEOF:
.8a8e		ad 91 07	lda $0791			lda     KNLEvent.directory.stream
.8a91		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8a93		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8a96						_CDReadData:
.8a96		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a98		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a9a		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a9c		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a9e		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8aa0		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8aa3		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8aa5		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8aa8		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8aaa		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8aac		60		rts				rts
.8aad						_CDReadExtended:
.8aad		a9 02		lda #$02			lda     #2
.8aaf		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8ab1		a9 26		lda #$26			lda     #lineBuffer & $FF
.8ab3		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8ab5		a9 05		lda #$05			lda     #lineBuffer >> 8
.8ab7		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8ab9		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8abc						Command_Drive:
.8abc		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.8abf		20 75 82	jsr $8275			jsr 	KNLSetDrive
.8ac2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8ac3						Command_Load:
.8ac3		20 c9 8a	jsr $8ac9			jsr 	LoadFile
.8ac6		4c 8d 86	jmp $868d			jmp 	WarmStart
.8ac9						LoadFile:
.8ac9		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; file name to load
.8acc		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8ace		a5 36		lda $36				lda 	zTemp0
.8ad0		20 7e 82	jsr $827e			jsr 	KNLOpenFileRead 			; open file for reading
.8ad3		b0 42		bcs $8b17			bcs 	CLErrorHandler 				; error, so fail.
.8ad5		8d 9c 07	sta $079c			sta 	BasicFileStream 			; save the reading stream.
.8ad8		20 67 8b	jsr $8b67			jsr     LoadReadByteInit            ; Init reader with the stream
.8adb		20 44 92	jsr $9244			jsr 	NewProgram 					; does the actual NEW.
.8ade		9c 9b 07	stz $079b			stz 	LoadEOFFlag 				; clear EOF Flag.
.8ae1						_CLLoop:
.8ae1		20 25 8b	jsr $8b25			jsr 	LoadReadLine 				; get next line.
.8ae4		f0 10		beq $8af6			beq 	_CLExit 					; end, exit.
.8ae6		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8ae9		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8aec		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8aef		f0 f0		beq $8ae1			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8af1		20 68 86	jsr $8668			jsr 	EditProgramCode 			; do the editing etc.
.8af4		80 eb		bra $8ae1			bra 	_CLLoop
.8af6						_CLExit:
.8af6		ad 9c 07	lda $079c			lda 	BasicFileStream
.8af9		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8afc						CLComplete:
.8afc		a9 04		lda #$04			lda 	#_CLCMsg & $FF
.8afe		a2 8b		ldx #$8b			ldx 	#_CLCMsg >> 8
.8b00		20 71 98	jsr $9871			jsr 	PrintStringXA
.8b03		60		rts				rts
.8b04						_CLCMsg:
>8b04		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8b0c		2e 0d 00
.8b0f						CLCloseError:
.8b0f		48		pha				pha
.8b10		ad 9c 07	lda $079c			lda 	BasicFileStream
.8b13		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8b16		68		pla				pla
.8b17						CLErrorHandler:
.8b17		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8b19		f0 05		beq $8b20			beq 	_CLEHNotFound
.8b1b		a9 1a		lda #$1a		lda	#26
.8b1d		4c 18 98	jmp $9818		jmp	ErrorHandler
.8b20						_CLEHNotFound:
.8b20		a9 19		lda #$19		lda	#25
.8b22		4c 18 98	jmp $9818		jmp	ErrorHandler
.8b25						LoadReadLine:
.8b25		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8b27		20 41 8b	jsr $8b41			jsr 	LoadReadCharacter
.8b2a		f0 14		beq $8b40			beq 	_LRLExit 					; eof ?
.8b2c		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8b2e		90 f5		bcc $8b25			bcc 	LoadReadLine
.8b30						_LRLLoop:
.8b30		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8b33		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8b36		e8		inx				inx
.8b37		20 41 8b	jsr $8b41			jsr 	LoadReadCharacter 			; next line
.8b3a		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8b3c		b0 f2		bcs $8b30			bcs 	_LRLLoop
.8b3e		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8b40						_LRLExit:
.8b40		60		rts				rts
.8b41						LoadReadCharacter:
.8b41		da		phx				phx
.8b42		5a		phy				phy
.8b43		ad 9b 07	lda $079b			lda 	LoadEOFFlag 				; already done EOF.
.8b46		d0 0c		bne $8b54			bne 	_LRCIsEOF
.8b48		20 71 8b	jsr $8b71			jsr 	LoadReadByte 				; read a byte
.8b4b		90 09		bcc $8b56			bcc		_LRCExit 					; read okay.
.8b4d		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8b4f		d0 be		bne $8b0f			bne 	CLCloseError
.8b51		ce 9b 07	dec $079b			dec 	LoadEOFFlag
.8b54						_LRCIsEOF:
.8b54		a9 00		lda #$00			lda 	#0
.8b56						_LRCExit:
.8b56		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8b58		d0 02		bne $8b5c			bne 	_LRCNotTab
.8b5a		a9 20		lda #$20			lda 	#' '
.8b5c						_LRCNotTab:
.8b5c		c9 0a		cmp #$0a			cmp 	#$0A
.8b5e		d0 02		bne $8b62			bne 	_LRCNotLF
.8b60		a9 0d		lda #$0d			lda 	#$0D
.8b62						_LRCNotLF:
.8b62		7a		ply				ply
.8b63		fa		plx				plx
.8b64		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b66		60		rts				rts
.8b67						LoadReadByteInit:
.8b67		8d 9d 07	sta $079d			sta     LoadFileStream 				; save stream
.8b6a		9c 9e 07	stz $079e			stz     LoadNextCharacter 			; reset buffer
.8b6d		9c 9f 07	stz $079f			stz     LoadEndCharacter
.8b70		60		rts				rts
.8b71						LoadReadByte:
.8b71		da		phx				phx
.8b72		ae 9e 07	ldx $079e			ldx     LoadNextCharacter 					; all data consumed ?
.8b75		ec 9f 07	cpx $079f			cpx     LoadEndCharacter
.8b78		d0 12		bne $8b8c			bne     _KNLRBGetNextByte
.8b7a		ad 9d 07	lda $079d			lda     LoadFileStream
.8b7d		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8b7f		20 d3 82	jsr $82d3			jsr     KNLReadBlock 				; read next chunk from the stream
.8b82		b0 0f		bcs $8b93			bcs     _KNLRBError 				; error has occurred on read.
.8b84		8d 9f 07	sta $079f			sta     LoadEndCharacter 						; # read is the number available
.8b87		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8b89		8e 9e 07	stx $079e			stx     LoadNextCharacter
.8b8c						_KNLRBGetNextByte:
.8b8c		bd 8d 06	lda $068d,x			lda     KNLReadBuffer,x 			; get the next data item
.8b8f		ee 9e 07	inc $079e			inc     LoadNextCharacter 					; and advance the index
.8b92		18		clc				clc 								; succeeded
.8b93						_KNLRBError:
.8b93		fa		plx				plx
.8b94		60		rts				rts
.079b						LoadEOFFlag:
>079b								.fill 	1
.079c						BasicFileStream:
>079c								.fill 	1
.079d						LoadFileStream:
>079d								.byte   ?
.079e						LoadNextCharacter:
>079e								.byte   ?
.079f						LoadEndCharacter:
>079f								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8b95						Command_Save:
.8b95		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; file name to load
.8b98		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b9a		a5 36		lda $36				lda 	zTemp0
.8b9c		20 79 82	jsr $8279			jsr 	KNLOpenFileWrite 			; open file for writing
.8b9f		b0 2f		bcs $8bd0			bcs 	CSErrorHandler 				; error, so fail.
.8ba1		8d 9c 07	sta $079c			sta 	BasicFileStream 			; save the reading stream.
.8ba4		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ba6		85 30		sta $30				sta 	codePtr
.8ba8		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8baa		85 31		sta $31				sta 	codePtr+1
.8bac						_CSLoop:
.8bac		b2 30		lda ($30)			lda 	(codePtr)
.8bae		f0 17		beq $8bc7			beq 	_CSExit
.8bb0		20 f4 8b	jsr $8bf4			jsr 	CSGetCleanLine
.8bb3		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8bb5		85 36		sta $36				sta 	zTemp0
.8bb7		20 d3 8b	jsr $8bd3			jsr 	CLWriteByteBlock 			; write the block out.
.8bba		18		clc				clc
.8bbb		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bbd		65 30		adc $30				adc 	codePtr
.8bbf		85 30		sta $30				sta 	codePtr
.8bc1		90 02		bcc $8bc5			bcc 	_CREExit
.8bc3		e6 31		inc $31				inc 	codePtr+1 					; carry
.8bc5						_CREExit:
.8bc5		80 e5		bra $8bac			bra 	_CSLoop
.8bc7						_CSExit:
.8bc7		ad 9c 07	lda $079c			lda 	BasicFileStream 			; close file
.8bca		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8bcd		4c fc 8a	jmp $8afc			jmp 	CLComplete 					; display complete message.
.8bd0						CSErrorHandler:
.8bd0		4c 17 8b	jmp $8b17			jmp 	CLErrorHandler
.8bd3						CLWriteByteBlock:
.8bd3		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8bd5		f0 1c		beq $8bf3			beq 	_CLWBBExit					; if so, exit
.8bd7		ad 9c 07	lda $079c			lda 	BasicFileStream 			; stream to write, count in X
.8bda		20 0e 83	jsr $830e			jsr 	KNLWriteBlock 				; call one write attempt
.8bdd		b0 f1		bcs $8bd0			bcs 	CSErrorHandler 				; error occurred
.8bdf		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8be1		8a		txa				txa 								; subtract bytes written from X, total count.
.8be2		38		sec				sec
.8be3		e5 38		sbc $38				sbc 	zTemp1
.8be5		aa		tax				tax
.8be6		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8be7		a5 36		lda $36				lda 	zTemp0
.8be9		65 38		adc $38				adc 	zTemp1
.8beb		85 36		sta $36				sta 	zTemp0
.8bed		90 e4		bcc $8bd3			bcc 	CLWriteByteBlock
.8bef		e6 37		inc $37				inc 	zTemp0+1
.8bf1		80 e0		bra $8bd3			bra 	CLWriteByteBlock 			; and retry write out.
.8bf3						_CLWBBExit:
.8bf3		60		rts				rts
.8bf4						CSGetCleanLine:
.8bf4		a9 00		lda #$00			lda 	#0 							; no indent.
.8bf6		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8bf9		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8bfb		a0 00		ldy #$00			ldy 	#0
.8bfd						_CSClean:
.8bfd		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8c00		f0 09		beq $8c0b			beq 	_CSDoneClean
.8c02		30 04		bmi $8c08			bmi 	_CSIgnoreCharacter
.8c04		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8c07		e8		inx				inx
.8c08						_CSIgnoreCharacter:
.8c08		c8		iny				iny
.8c09		80 f2		bra $8bfd			bra 	_CSClean
.8c0b						_CSDoneClean:
.8c0b		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8c0d		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8c10		e8		inx				inx
.8c11		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8c14		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8c16		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8c18		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.e7fa						m
.8c19						Command_VERIFY:
.8c19		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; file name to verify
.8c1c		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8c1e		a5 36		lda $36				lda 	zTemp0
.8c20		20 7e 82	jsr $827e			jsr 	KNLOpenFileRead 			; open file for reading
.8c23		b0 4b		bcs $8c70			bcs 	_CVErrorHandler 			; error, so fail.
.8c25		8d 9c 07	sta $079c			sta 	BasicFileStream 			; save the reading stream.
.8c28		20 67 8b	jsr $8b67			jsr     LoadReadByteInit            ; Init reader with the stream
.8c2b		9c 9b 07	stz $079b			stz 	LoadEOFFlag 				; clear EOF Flag.
.8c2e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c30		85 30		sta $30				sta 	codePtr
.8c32		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c34		85 31		sta $31				sta 	codePtr+1
.8c36						_CVLoop:
.8c36		20 25 8b	jsr $8b25			jsr 	LoadReadLine 				; get next line.
.8c39		f0 27		beq $8c62			beq 	_CVExit 					; end, exit.
.8c3b		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8c3e		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8c41		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8c44		f0 f0		beq $8c36			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8c46		a0 00		ldy #$00			ldy 	#0 							; start compare
.8c48						_CVCompareLoop:
.8c48		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4a		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8c4d		d0 1c		bne $8c6b			bne 	_CVCompareError
.8c4f		c8		iny				iny
.8c50		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8c53		d0 f3		bne $8c48			bne 	_CVCompareLoop
.8c55		18		clc				clc
.8c56		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c58		65 30		adc $30				adc 	codePtr
.8c5a		85 30		sta $30				sta 	codePtr
.8c5c		90 02		bcc $8c60			bcc 	_CREExit
.8c5e		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c60						_CREExit:
.8c60		80 d4		bra $8c36			bra 	_CVLoop
.8c62						_CVExit:
.8c62		ad 9c 07	lda $079c			lda 	BasicFileStream
.8c65		20 48 83	jsr $8348			jsr 	KNLCloseFile
.8c68		4c fc 8a	jmp $8afc			jmp 	CLComplete
.8c6b						_CVCompareError:
.8c6b		a9 1b		lda #$1b		lda	#27
.8c6d		4c 18 98	jmp $9818		jmp	ErrorHandler
.8c70						_CVErrorHandler:
.8c70		4c 17 8b	jmp $8b17			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c73						ForCommand:
.8c73		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8c75		20 91 b0	jsr $b091			jsr 	StackOpen
.8c78		a2 00		ldx #$00			ldx 	#0
.8c7a		20 66 a1	jsr $a166			jsr 	EvaluateTerm
.8c7d		b5 50		lda $50,x			lda 	NSStatus,x
.8c7f		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c81		d0 47		bne $8cca			bne		_FCError
.8c83		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c85		20 0f 98	jsr $980f			jsr 	CheckNextA
.8c88		e8		inx				inx
.8c89		20 df a6	jsr $a6df			jsr 	EvaluateInteger 			; <from> in +1
.8c8c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8e		c8		iny				iny 								; consume it
.8c8f		48		pha				pha 								; save on stack for later
.8c90		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8c92		f0 04		beq $8c98			beq 	_FCNoSyntax
.8c94		c9 db		cmp #$db			cmp 	#KWD_TO
.8c96		d0 35		bne $8ccd			bne 	_FCSyntaxError
.8c98						_FCNoSyntax:
.8c98		e8		inx				inx
.8c99		20 df a6	jsr $a6df			jsr 	EvaluateInteger
.8c9c		20 d6 b0	jsr $b0d6			jsr 	STKSaveCodePosition 		; save loop back position
.8c9f		68		pla				pla 								; restore DOWNTO or TO
.8ca0		5a		phy				phy 								; save Y on the stack
.8ca1		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8ca3		f0 02		beq $8ca7			beq 	_FCNotDownTo
.8ca5		a9 02		lda #$02			lda 	#2
.8ca7						_FCNotDownTo:
.8ca7		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8ca8		a0 10		ldy #$10			ldy 	#16
.8caa		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8cac		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8cae		a5 58		lda $58				lda 	NSMantissa0
.8cb0		91 34		sta ($34),y			sta 	(basicStack),y
.8cb2		a5 60		lda $60				lda 	NSMantissa1
.8cb4		c8		iny				iny
.8cb5		91 34		sta ($34),y			sta 	(basicStack),y
.8cb7		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8cb9		a2 01		ldx #$01			ldx 	#1
.8cbb		20 d0 8c	jsr $8cd0			jsr 	FCIntegerToStack
.8cbe		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8cc0		a2 02		ldx #$02			ldx 	#2
.8cc2		20 d0 8c	jsr $8cd0			jsr 	FCIntegerToStack
.8cc5		20 eb 8c	jsr $8ceb			jsr 	CopyIndexToReference
.8cc8		7a		ply				ply 								; restore position
.8cc9		60		rts				rts
.8cca						_FCError:
.8cca		4c 21 aa	jmp $aa21			jmp 	TypeError
.8ccd						_FCSyntaxError:
.8ccd		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.8cd0						FCIntegerToStack:
.8cd0		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8cd2		10 03		bpl $8cd7			bpl	 	_FCNotNegative
.8cd4		20 3b a7	jsr $a73b			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8cd7						_FCNotNegative:
.8cd7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8cd9		91 34		sta ($34),y			sta 	(basicStack),y
.8cdb		c8		iny				iny
.8cdc		b5 60		lda $60,x			lda 	NSMantissa1,x
.8cde		91 34		sta ($34),y			sta 	(basicStack),y
.8ce0		c8		iny				iny
.8ce1		b5 68		lda $68,x			lda 	NSMantissa2,x
.8ce3		91 34		sta ($34),y			sta 	(basicStack),y
.8ce5		c8		iny				iny
.8ce6		b5 70		lda $70,x			lda 	NSMantissa3,x
.8ce8		91 34		sta ($34),y			sta 	(basicStack),y
.8cea		60		rts				rts
.8ceb						CopyIndexToReference:
.8ceb		5a		phy				phy
.8cec		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8cee		38		sec				sec 								; (because we copy from offset 8)
.8cef		b1 34		lda ($34),y			lda 	(basicStack),y
.8cf1		e9 08		sbc #$08			sbc 	#8
.8cf3		85 36		sta $36				sta 	zTemp0
.8cf5		c8		iny				iny
.8cf6		b1 34		lda ($34),y			lda 	(basicStack),y
.8cf8		e9 00		sbc #$00			sbc 	#0
.8cfa		85 37		sta $37				sta 	zTemp0+1
.8cfc		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8cfe		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8d00		b1 34		lda ($34),y			lda 	(basicStack),y
.8d02		0a		asl a				asl 	a 							; into carry
.8d03		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8d05		90 14		bcc $8d1b			bcc 	_CITRNormal
.8d07		38		sec				sec
.8d08						_CITRNegative:
.8d08		a9 00		lda #$00			lda 	#0
.8d0a		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d0c		91 36		sta ($36),y			sta 	(zTemp0),y
.8d0e		c8		iny				iny
.8d0f		ca		dex				dex
.8d10		d0 f6		bne $8d08			bne 	_CITRNegative
.8d12		88		dey				dey 								; look at MSB of mantissa
.8d13		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8d15		09 80		ora #$80			ora 	#$80
.8d17		91 36		sta ($36),y			sta 	(zTemp0),y
.8d19		7a		ply				ply
.8d1a		60		rts				rts
.8d1b						_CITRNormal:
.8d1b		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8d1d		91 36		sta ($36),y			sta 	(zTemp0),y
.8d1f		c8		iny				iny
.8d20		ca		dex				dex
.8d21		d0 f8		bne $8d1b			bne 	_CITRNormal
.8d23		7a		ply				ply 								; and exit.
.8d24		60		rts				rts
.8d25						NextCommand:
.8d25		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8d27		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8d29		20 be b0	jsr $b0be			jsr 	StackCheckFrame
.8d2c		5a		phy				phy
.8d2d		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8d2f		b1 34		lda ($34),y			lda 	(basicStack),y
.8d31		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8d33		30 02		bmi $8d37			bmi 	_NCStepNeg
.8d35		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8d37						_NCStepNeg:
.8d37		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8d39		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8d3b		18		clc				clc
.8d3c						_NCBump:
.8d3c		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8d3e		91 34		sta ($34),y			sta 	(basicStack),y
.8d40		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8d42		c8		iny				iny 								; next byte
.8d43		ca		dex				dex 								; do four times
.8d44		d0 f6		bne $8d3c			bne 	_NCBump
.8d46		20 eb 8c	jsr $8ceb			jsr		CopyIndexToReference		; copy it to the reference variable.
.8d49		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8d4b		b1 34		lda ($34),y			lda 	(basicStack),y
.8d4d		0a		asl a				asl 	a 							; sign bit to carry
.8d4e		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8d50		85 38		sta $38				sta 	zTemp1
.8d52		90 02		bcc $8d56			bcc 	_NCCompRev 					; use if step is +ve
.8d54		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8d56						_NCCompRev:
.8d56		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8d58		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8d5a		85 39		sta $39				sta 	zTemp1+1
.8d5c		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8d5e		38		sec				sec
.8d5f						_NCCompare:
.8d5f		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d61		b1 34		lda ($34),y			lda 	(basicStack),y
.8d63		a4 39		ldy $39				ldy 	zTemp1+1
.8d65		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d67		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d69		e6 39		inc $39				inc 	zTemp1+1
.8d6b		ca		dex				dex 								; do it 4 times.
.8d6c		d0 f1		bne $8d5f			bne 	_NCCompare
.8d6e		50 02		bvc $8d72			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d70		49 80		eor #$80			eor 	#$80
.8d72						_NCNoOverflow:
.8d72		7a		ply				ply 								; restore Y position
.8d73		0a		asl a				asl 	a 							; is bit 7 set.
.8d74		90 04		bcc $8d7a			bcc 	_NCLoopBack 				; if no , >= so loop back
.8d76		20 b0 b0	jsr $b0b0			jsr 	StackClose 					; exit the loop
.8d79		60		rts				rts
.8d7a						_NCLoopBack:
.8d7a		20 e7 b0	jsr $b0e7			jsr 	STKLoadCodePosition 		; loop back
.8d7d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d7e						Command_GOSUB:
.8d7e		a2 00		ldx #$00			ldx 	#0
.8d80		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d83		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d85		20 91 b0	jsr $b091			jsr 	StackOpen 					; create frame
.8d88		20 d6 b0	jsr $b0d6			jsr 	STKSaveCodePosition 		; save current position
.8d8b		4c a1 8d	jmp $8da1			jmp 	GotoStackX
.8d8e						Command_RETURN:
.8d8e		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d90		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d92		20 be b0	jsr $b0be			jsr 	StackCheckFrame
.8d95		20 e7 b0	jsr $b0e7			jsr 	STKLoadCodePosition 		; restore code position
.8d98		20 b0 b0	jsr $b0b0			jsr 	StackClose
.8d9b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d9c						GotoCommand:
.8d9c		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d9e		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.8da1						GotoStackX:
.8da1		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8da3		48		pha				pha 								; it is slightly inefficient, just in cases.
.8da4		b5 58		lda $58,x			lda 	NSMantissa0,x
.8da6		fa		plx				plx
.8da7		20 af ac	jsr $acaf			jsr 	MemorySearch 				; transfer to line number AX.
.8daa		90 05		bcc $8db1			bcc 	_GotoError 					; not found, off end.
.8dac		d0 03		bne $8db1			bne 	_GotoError 					; not found exactly
.8dae		4c da 93	jmp $93da			jmp 	RunNewLine 					; and go straight to new line code.
.8db1						_GotoError:
.8db1		a9 0d		lda #$0d		lda	#13
.8db3		4c 18 98	jmp $9818		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8db6						IfCommand:
.8db6		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8db8		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber
.8dbb		b1 30		lda ($30),y			lda 	(codePtr),y
.8dbd		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8dbf		d0 0a		bne $8dcb			bne 	_IfStructured 				; we still support it.
.8dc1		c8		iny				iny 								; consume THEN
.8dc2		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; is it zero
.8dc5		f0 01		beq $8dc8			beq 	_IfFail 					; if fail, go to next line
.8dc7		60		rts				rts 								; if THEN just continue
.8dc8						_IfFail:
.8dc8		4c b5 93	jmp $93b5			jmp 	EOLCommand
.8dcb						_IfStructured:
.8dcb		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; is it zero
.8dce		d0 07		bne $8dd7			bne 	_IfExit 					; if not, then continue normally.
.8dd0		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8dd2		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8dd4		20 5a 97	jsr $975a			jsr 	ScanForward 				; and run from there
.8dd7						_IfExit:
.8dd7		60		rts				rts
.8dd8						ElseCode:
.8dd8		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8dda		aa		tax				tax 								; so just go to the structure exit
.8ddb		20 5a 97	jsr $975a			jsr 	ScanForward
.8dde		60		rts				rts
.8ddf						EndIf:
.8ddf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8de0						Command_Input:
.8de0		9c 24 04	stz $0424			stz 	isPrintFlag
.8de3		80 0c		bra $8df1			bra 	Command_IP_Main
.8de5						Command_CPrint:
.8de5		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8de7		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8dea		80 05		bra $8df1			bra 	Command_IP_Main
.8dec						Command_Print:
.8dec		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8dee		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8df1						Command_IP_Main:
.8df1		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8df2						_CPLoop:
.8df2		08		php				php 								; save last action flag
.8df3		b1 30		lda ($30),y			lda 	(codePtr),y
.8df5		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8df7		f0 54		beq $8e4d			beq 	_CPExit
.8df9		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8dfb		f0 50		beq $8e4d			beq 	_CPExit
.8dfd		68		pla				pla 								; throw last action flag
.8dfe		b1 30		lda ($30),y			lda 	(codePtr),y
.8e00		c8		iny				iny
.8e01		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8e03		f0 45		beq $8e4a			beq 	_CPContinueWithSameLine
.8e05		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8e07		f0 3c		beq $8e45			beq 	_CPTab
.8e09		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8e0b		f0 34		beq $8e41			beq 	_CPNewLine
.8e0d		88		dey				dey 								; undo the get.
.8e0e		20 1a 9d	jsr $9d1a			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8e11		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8e13		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8e15		f0 0d		beq $8e24			beq 	_CPIsValue 					; no, display it.
.8e17		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8e1a		d0 05		bne $8e21			bne 	_CPIsPrint 					; otherwise display.
.8e1c		20 56 8e	jsr $8e56			jsr 	CIInputValue 				; input a value to the reference
.8e1f		80 20		bra $8e41			bra 	_CPNewLine
.8e21						_CPIsPrint:
.8e21		20 df 9f	jsr $9fdf			jsr 	Dereference 				; dereference if required.
.8e24						_CPIsValue:
.8e24		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8e26		29 10		and #$10			and 	#NSBIsString
.8e28		f0 09		beq $8e33			beq 	_CPNumber
.8e2a		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8e2c		a5 58		lda $58				lda 	NSMantissa0
.8e2e		20 b9 8e	jsr $8eb9			jsr 	CPPrintStringXA
.8e31		80 be		bra $8df1			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8e33						_CPNumber:
.8e33		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8e35		20 a7 a5	jsr $a5a7			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8e38		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8e3a		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8e3c		20 b9 8e	jsr $8eb9			jsr 	CPPrintStringXA 			; print it.
.8e3f		80 b0		bra $8df1			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8e41						_CPNewLine:
.8e41		a9 0d		lda #$0d			lda 	#13
.8e43		80 02		bra $8e47			bra 	_CPPrintCharDirect
.8e45						_CPTab:
.8e45		a9 09		lda #$09			lda 	#9 							; print TAB
.8e47						_CPPrintCharDirect:
.8e47		20 d4 8e	jsr $8ed4			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8e4a						_CPContinueWithSameLine:
.8e4a		38		sec				sec 								; loop round with carry set, which
.8e4b		80 a5		bra $8df2			bra 	_CPLoop 					; will inhibit final CR
.8e4d						_CPExit:
.8e4d		28		plp				plp 								; get last action flag
.8e4e		b0 05		bcs $8e55			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e50		a9 0d		lda #$0d			lda 	#13 						; print new line
.8e52		20 d4 8e	jsr $8ed4			jsr 	CPPVControl
.8e55						_CPExit2:
.8e55		60		rts				rts
.8e56						CIInputValue:
.8e56		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8e58						_CIInputLine:
.8e58		20 d7 8e	jsr $8ed7			jsr 	CPInputVector 				; get key
.8e5b		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8e5d		f0 1f		beq $8e7e			beq 	_CIHaveValue
.8e5f		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8e61		f0 11		beq $8e74			beq 	_CIBackspace
.8e63		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8e65		90 f1		bcc $8e58			bcc 	_CIInputLine
.8e67		e0 50		cpx #$50			cpx 	#80 						; max length
.8e69		b0 ed		bcs $8e58			bcs 	_CIInputLine
.8e6b		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8e6e		e8		inx				inx
.8e6f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e72		80 e4		bra $8e58			bra 	_CIInputLine
.8e74						_CIBackspace:
.8e74		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8e76		f0 e0		beq $8e58			beq 	_CIInputLine
.8e78		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e7b		ca		dex				dex
.8e7c		80 da		bra $8e58			bra 	_CIInputLine
.8e7e						_CIHaveValue:
.8e7e		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8e81		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8e83		29 10		and #$10			and 	#NSBIsString
.8e85		f0 17		beq $8e9e			beq 	_CIAssignNumber 			; assign a number
.8e87		a2 01		ldx #$01			ldx 	#1
.8e89		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e8b		95 58		sta $58,x			sta 	NSMantissa0,x
.8e8d		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e8f		95 60		sta $60,x			sta 	NSMantissa1,x
.8e91		74 68		stz $68,x			stz 	NSMantissa2,x
.8e93		74 70		stz $70,x			stz 	NSMantissa3,x
.8e95		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8e97		95 50		sta $50,x			sta  	NSStatus,x
.8e99		ca		dex				dex 								; X = 0
.8e9a		20 4c 8f	jsr $8f4c			jsr 	AssignVariable
.8e9d		60		rts				rts
.8e9e						_CIAssignNumber:
.8e9e		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8ea0		85 36		sta $36				sta 	zTemp0
.8ea2		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8ea4		85 37		sta $37				sta 	zTemp0+1
.8ea6		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8ea8		20 87 a4	jsr $a487			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8eab		90 07		bcc $8eb4			bcc 	_CIIsOkay
.8ead		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8eaf		20 cc 8e	jsr $8ecc			jsr 	CPPrintVector
.8eb2		80 a2		bra $8e56			bra 	CIInputValue
.8eb4						_CIIsOkay:
.8eb4		ca		dex				dex 								; X = 0
.8eb5		20 4c 8f	jsr $8f4c			jsr 	AssignVariable
.8eb8		60		rts				rts
.8eb9						CPPrintStringXA:
.8eb9		5a		phy				phy
.8eba		86 37		stx $37				stx 	zTemp0+1
.8ebc		85 36		sta $36				sta 	zTemp0
.8ebe		a0 00		ldy #$00			ldy 	#0
.8ec0						_PSXALoop:
.8ec0		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ec2		f0 06		beq $8eca			beq 	_PSXAExit
.8ec4		20 cc 8e	jsr $8ecc			jsr 	CPPrintVector
.8ec7		c8		iny				iny
.8ec8		80 f6		bra $8ec0			bra 	_PSXALoop
.8eca						_PSXAExit:
.8eca		7a		ply				ply
.8ecb		60		rts				rts
.8ecc						CPPrintVector:
.8ecc		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8ecf		30 03		bmi $8ed4			bmi 	CPPVControl
.8ed1		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8ed4						CPPVControl:
.8ed4		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8ed7						CPInputVector:
.8ed7		4c 8e 81	jmp $818e			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8eda						UnaryJoyX:
.8eda		18		clc				clc
.8edb		80 01		bra $8ede			bra 	JoyMain
.8edd						UnaryJoyY:
.8edd		38		sec				sec
.8ede						JoyMain:
.8ede		fa		plx				plx 								; get pos
.8edf		08		php				php 								; save carry (set for Y)
.8ee0		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ee3		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.8ee6		20 4e 83	jsr $834e			jsr 	KNLReadController 			; read the controller.
.8ee9		28		plp				plp
.8eea		b0 02		bcs $8eee			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8eec		4a		lsr a				lsr 	a
.8eed		4a		lsr a				lsr 	a
.8eee						_JMNoShift:
.8eee		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8eef		b0 07		bcs $8ef8			bcs 	JMIsLeft
.8ef1		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8ef2		b0 07		bcs $8efb			bcs 	JMIsRight
.8ef4		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; zero result
.8ef7		60		rts				rts
.8ef8						JMIsLeft:
.8ef8		4c 85 98	jmp $9885			jmp 	ReturnTrue
.8efb						JMIsRight:
.8efb		a9 01		lda #$01			lda 	#1
.8efd		20 74 a7	jsr $a774			jsr 	NSMSetByte
.8f00		60		rts				rts
.8f01						UnaryJoyB:
.8f01		fa		plx				plx 								; get pos
.8f02		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8f05		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.8f08		20 4e 83	jsr $834e			jsr 	KNLReadController 			; read the controller.
.8f0b		29 10		and #$10			and 	#$10
.8f0d		d0 e9		bne $8ef8			bne 	JMIsLeft
.8f0f		20 72 a7	jsr $a772			jsr 	NSMSetZero
.8f12		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8f13						LetCommand:
.8f13		a2 00		ldx #$00			ldx 	#0
.8f15		b1 30		lda ($30),y			lda 	(codePtr),y
.8f17		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8f19		d0 14		bne $8f2f			bne 	_LCStandard
.8f1b		c8		iny				iny 								; skip equal
.8f1c		20 66 a1	jsr $a166			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8f1f		20 df 9f	jsr $9fdf			jsr 	Dereference 				; dereference it to a value
.8f22		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8f24		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8f26		95 50		sta $50,x			sta 	NSStatus,x
.8f28		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8f2a		d0 0f		bne $8f3b			bne 	_LCMain
.8f2c		4c 21 aa	jmp $aa21			jmp 	TypeError 					; was a reference before.
.8f2f						_LCStandard:
.8f2f		ad 04 9d	lda $9d04			lda 	PrecedenceLevel+"*"			; precedence > this
.8f32		20 1e 9d	jsr $9d1e			jsr 	EvaluateExpressionAtPrecedence
.8f35		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8f37		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8f39		f0 0e		beq $8f49			beq 	_LetGoProc 					; it's a procedure call.
.8f3b						_LCMain:
.8f3b		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8f3d		20 0f 98	jsr $980f			jsr 	CheckNextA
.8f40		e8		inx				inx 								; RHS
.8f41		20 b7 a6	jsr $a6b7			jsr 	EvaluateValue
.8f44		ca		dex				dex
.8f45		20 4c 8f	jsr $8f4c			jsr 	AssignVariable
.8f48		60		rts				rts
.8f49						_LetGoProc:
.8f49		4c 8b 92	jmp $928b			jmp 	CallProcedure
.8f4c						AssignVariable:
.8f4c		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8f4e		48		pha				pha 								; save a copy
.8f4f		55 51		eor $51,x			eor 	NSStatus+1,x
.8f51		29 10		and #$10			and 	#NSBIsString
.8f53		d0 0b		bne $8f60			bne 	_ASError
.8f55		68		pla				pla 								; get back
.8f56		29 10		and #$10			and 	#NSBIsString 				; check type
.8f58		d0 03		bne $8f5d			bne 	_ASString
.8f5a		4c 1d 9f	jmp $9f1d			jmp 	AssignNumber
.8f5d						_ASString:
.8f5d		4c 7b 9f	jmp $9f7b			jmp 	AssignString
.8f60						_ASError:
.8f60		4c 21 aa	jmp $aa21			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f63						Command_List:
.8f63		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8f66		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8f68		20 75 80	jsr $8075			jsr 	SNDCommand
.8f6b		b1 30		lda ($30),y			lda 	(codePtr),y
.8f6d		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8f6f		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8f71		f0 72		beq $8fe5			beq 	_CLListProcedure
.8f73		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f75		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8f77		a9 ff		lda #$ff			lda 	#$FF
.8f79		85 5f		sta $5f				sta 	NSMantissa0+7
.8f7b		85 67		sta $67				sta 	NSMantissa1+7
.8f7d		b1 30		lda ($30),y			lda 	(codePtr),y
.8f7f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f81		f0 1a		beq $8f9d			beq 	_CLSecond
.8f83		20 62 90	jsr $9062			jsr 	CLIsDigit 					; if not digit, list all
.8f86		b0 20		bcs $8fa8			bcs 	_CLStart
.8f88		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f8a		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.8f8d		b1 30		lda ($30),y			lda 	(codePtr),y
.8f8f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f91		f0 0a		beq $8f9d			beq 	_CLSecond 					; if so go get it
.8f93		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8f95		85 5f		sta $5f				sta 	NSMantissa0+7
.8f97		a5 64		lda $64				lda 	NSMantissa1+4
.8f99		85 67		sta $67				sta 	NSMantissa1+7
.8f9b		80 0b		bra $8fa8			bra 	_CLStart
.8f9d						_CLSecond:
.8f9d		c8		iny				iny 								; consume comma
.8f9e		20 62 90	jsr $9062			jsr 	CLIsDigit 					; digit found
.8fa1		b0 05		bcs $8fa8			bcs 	_CLStart 					; if not, continue listing
.8fa3		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8fa5		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.8fa8						_CLStart
.8fa8		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8faa		85 30		sta $30				sta 	codePtr
.8fac		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fae		85 31		sta $31				sta 	codePtr+1
.8fb0						_CLLoop:
.8fb0		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8fb2		f0 03		beq $8fb7			beq 	_NoEvents					; if zero, skip with Z flag set.
.8fb4		20 34 81	jsr $8134			jsr 	ProcessEvents
.8fb7						_NoEvents:
.8fb7		d0 27		bne $8fe0			bne 	_CLBreak
.8fb9		b2 30		lda ($30)			lda 	(codePtr)
.8fbb		f0 20		beq $8fdd			beq 	_CLExit
.8fbd		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8fbf		20 51 90	jsr $9051			jsr 	CLCompareLineNo
.8fc2		90 0c		bcc $8fd0			bcc 	_CLNext
.8fc4		a2 07		ldx #$07			ldx 	#7
.8fc6		20 51 90	jsr $9051			jsr 	CLCompareLineNo
.8fc9		f0 02		beq $8fcd			beq 	_CLDoThisOne
.8fcb		b0 03		bcs $8fd0			bcs 	_CLNext
.8fcd						_CLDoThisOne:
.8fcd		20 3e 90	jsr $903e			jsr 	CLListOneLine 				; routine to list the current line.
.8fd0						_CLNext:
.8fd0		18		clc				clc
.8fd1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fd3		65 30		adc $30				adc 	codePtr
.8fd5		85 30		sta $30				sta 	codePtr
.8fd7		90 02		bcc $8fdb			bcc 	_CREExit
.8fd9		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fdb						_CREExit:
.8fdb		80 d3		bra $8fb0			bra 	_CLLoop
.8fdd						_CLExit:
.8fdd		4c 8d 86	jmp $868d			jmp 	WarmStart
.8fe0						_CLBreak:
.8fe0		a9 01		lda #$01		lda	#1
.8fe2		4c 18 98	jmp $9818		jmp	ErrorHandler
.8fe5						_CLListProcedure:
.8fe5		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe7		85 38		sta $38				sta 	zTemp1
.8fe9		c8		iny				iny
.8fea		b1 30		lda ($30),y			lda 	(codePtr),y
.8fec		85 39		sta $39				sta 	zTemp1+1
.8fee		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ff0		85 30		sta $30				sta 	codePtr
.8ff2		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ff4		85 31		sta $31				sta 	codePtr+1
.8ff6						_CLLPSearch:
.8ff6		b2 30		lda ($30)			lda 	(codePtr)
.8ff8		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8ffa		f0 e1		beq $8fdd			beq 	_CLExit
.8ffc		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8ffe		b1 30		lda ($30),y			lda 	(codePtr),y
.9000		c9 af		cmp #$af			cmp 	#KWD_PROC
.9002		d0 0e		bne $9012			bne 	_CLLPNext
.9004		c8		iny				iny 								; check if PROC this.
.9005		b1 30		lda ($30),y			lda 	(codePtr),y
.9007		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.9009		d0 07		bne $9012			bne 	_CLLPNext
.900b		c8		iny				iny
.900c		b1 30		lda ($30),y			lda 	(codePtr),y
.900e		c5 39		cmp $39				cmp 	zTemp1+1
.9010		f0 0d		beq $901f			beq 	_CLLPFound
.9012						_CLLPNext:
.9012		18		clc				clc
.9013		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9015		65 30		adc $30				adc 	codePtr
.9017		85 30		sta $30				sta 	codePtr
.9019		90 02		bcc $901d			bcc 	_CREExit
.901b		e6 31		inc $31				inc 	codePtr+1 					; carry
.901d						_CREExit:
.901d		80 d7		bra $8ff6			bra 	_CLLPSearch
.901f						_CLLPFound:
.901f		b2 30		lda ($30)			lda 	(codePtr)
.9021		f0 ba		beq $8fdd			beq 	_CLExit
.9023		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.9025		b1 30		lda ($30),y			lda 	(codePtr),y
.9027		48		pha				pha
.9028		20 3e 90	jsr $903e			jsr 	CLListOneLine 				; list line and go forward
.902b		18		clc				clc
.902c		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.902e		65 30		adc $30				adc 	codePtr
.9030		85 30		sta $30				sta 	codePtr
.9032		90 02		bcc $9036			bcc 	_CREExit
.9034		e6 31		inc $31				inc 	codePtr+1 					; carry
.9036						_CREExit:
.9036		68		pla				pla 								; reached ENDPROC ?
.9037		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.9039		d0 e4		bne $901f			bne 	_CLLPFound
.903b		4c 8d 86	jmp $868d			jmp 	WarmStart
.903e						CLListOneLine:
.903e		20 bd 97	jsr $97bd			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.9041		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.9044		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9046		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.9048		20 71 98	jsr $9871			jsr 	PrintStringXA
.904b		a9 0d		lda #$0d			lda 	#13 						; new line
.904d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9050		60		rts				rts
.9051						CLCompareLineNo:
.9051		38		sec				sec
.9052		a0 01		ldy #$01			ldy 	#1
.9054		b1 30		lda ($30),y			lda 	(codePtr),y
.9056		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9058		85 36		sta $36				sta 	zTemp0
.905a		c8		iny				iny
.905b		b1 30		lda ($30),y			lda 	(codePtr),y
.905d		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.905f		05 36		ora $36				ora 	zTemp0
.9061		60		rts				rts
.9062						CLIsDigit:
.9062		b1 30		lda ($30),y			lda 	(codePtr),y
.9064		c9 30		cmp #$30			cmp 	#"0"
.9066		90 03		bcc $906b			bcc	 	_CLIDExitFalse
.9068		c9 3a		cmp #$3a			cmp 	#"9"+1
.906a		60		rts				rts
.906b						_CLIDExitFalse:
.906b		38		sec				sec
.906c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.906d						Command_LOCAL:
.906d		a2 00		ldx #$00			ldx 	#0 							; at level 0
.906f		20 7b 90	jsr $907b			jsr 	LocaliseNextTerm 			; convert term to a local.
.9072		b1 30		lda ($30),y			lda 	(codePtr),y
.9074		c8		iny				iny
.9075		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9077		f0 f4		beq $906d			beq 	Command_LOCAL 				; if so, localise another variable.
.9079		88		dey				dey 								; unpick pre-get
.907a		60		rts				rts
.907b						LocaliseNextTerm:
.907b		20 66 a1	jsr $a166			jsr 	EvaluateTerm 				; evaluate the term
.907e		b5 50		lda $50,x			lda 	NSStatus,x
.9080		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.9082		f0 5c		beq $90e0			beq		_LNTError
.9084		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9086		85 36		sta $36				sta 	zTemp0
.9088		b5 60		lda $60,x			lda 	NSMantissa1,x
.908a		85 37		sta $37				sta  	zTemp0+1
.908c		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.908e		29 10		and #$10			and 	#NSBIsString
.9090		d0 1e		bne $90b0			bne 	_LNTPushString
.9092		5a		phy				phy
.9093		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9095						_LNTPushNumLoop:
.9095		b1 36		lda ($36),y			lda		(zTemp0),y
.9097		20 70 b0	jsr $b070			jsr 	StackPushByte
.909a		c8		iny				iny
.909b		c0 05		cpy #$05			cpy 	#5
.909d		d0 f6		bne $9095			bne 	_LNTPushNumLoop
.909f		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.90a1		20 70 b0	jsr $b070			jsr 	StackPushByte
.90a4		a5 37		lda $37				lda 	zTemp0+1
.90a6		20 70 b0	jsr $b070			jsr 	StackPushByte
.90a9		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.90ab		20 70 b0	jsr $b070			jsr 	StackPushByte
.90ae		7a		ply				ply
.90af		60		rts				rts
.90b0						_LNTPushString:
.90b0		5a		phy				phy
.90b1		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.90b3		85 38		sta $38				sta 	zTemp1
.90b5		a0 01		ldy #$01			ldy 	#1
.90b7		b1 36		lda ($36),y			lda 	(zTemp0),y
.90b9		85 39		sta $39				sta 	zTemp1+1
.90bb		a0 00		ldy #$00			ldy 	#0 							; output string
.90bd		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.90bf		f0 0a		beq $90cb			beq 	_LNTStringOut
.90c1						_LNTPushStrLoop:
.90c1		b1 38		lda ($38),y			lda 	(zTemp1),y
.90c3		f0 06		beq $90cb			beq 	_LNTStringOut
.90c5		20 70 b0	jsr $b070			jsr 	StackPushByte
.90c8		c8		iny				iny
.90c9		80 f6		bra $90c1			bra 	_LNTPushStrLoop
.90cb						_LNTStringOut:
.90cb		98		tya				tya									; output length (chars written).
.90cc		20 70 b0	jsr $b070			jsr 	StackPushByte
.90cf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.90d1		20 70 b0	jsr $b070			jsr 	StackPushByte
.90d4		b5 60		lda $60,x			lda 	NSMantissa1,x
.90d6		20 70 b0	jsr $b070			jsr 	StackPushByte
.90d9		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.90db		20 70 b0	jsr $b070			jsr 	StackPushByte
.90de		7a		ply				ply
.90df		60		rts				rts
.90e0						_LNTError:
.90e0		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.90e3						LocalPopValue:
.90e3		20 88 b0	jsr $b088			jsr 	StackPopByte
.90e6		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.90e8		d0 17		bne $9101			bne 	_LPVString
.90ea		20 88 b0	jsr $b088			jsr 	StackPopByte 				; address
.90ed		85 37		sta $37				sta 	zTemp0+1
.90ef		20 88 b0	jsr $b088			jsr 	StackPopByte
.90f2		85 36		sta $36				sta 	zTemp0
.90f4		5a		phy				phy
.90f5		a0 04		ldy #$04			ldy 	#4 							; copy back
.90f7						_LPVNumberCopy:
.90f7		20 88 b0	jsr $b088			jsr 	StackPopByte
.90fa		91 36		sta ($36),y			sta 	(zTemp0),y
.90fc		88		dey				dey
.90fd		10 f8		bpl $90f7			bpl 	_LPVNumberCopy
.90ff		7a		ply				ply 								; and complete
.9100		60		rts				rts
.9101						_LPVString:
.9101		20 88 b0	jsr $b088			jsr 	StackPopByte 				; address of record copied to zTemp0
.9104		85 37		sta $37				sta 	zTemp0+1
.9106		20 88 b0	jsr $b088			jsr 	StackPopByte
.9109		85 36		sta $36				sta 	zTemp0
.910b		5a		phy				phy
.910c		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.910e		85 38		sta $38				sta 	zTemp1
.9110		a0 01		ldy #$01			ldy 	#1
.9112		b1 36		lda ($36),y			lda 	(zTemp0),y
.9114		85 39		sta $39				sta 	zTemp1+1
.9116		20 88 b0	jsr $b088			jsr 	StackPopByte 				; # chars to get => y
.9119		a8		tay				tay
.911a		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.911c		f0 0e		beq $912c			beq 	_LPVStringCopied
.911e		a9 00		lda #$00			lda 	#0 							; NULL on end
.9120		91 38		sta ($38),y			sta 	(zTemp1),y
.9122						_LPVStringCopy:
.9122		88		dey				dey
.9123		30 07		bmi $912c			bmi 	_LPVStringCopied
.9125		20 88 b0	jsr $b088			jsr 	StackPopByte
.9128		91 38		sta ($38),y			sta 	(zTemp1),y
.912a		80 f6		bra $9122			bra 	_LPVStringCopy
.912c						_LPVStringCopied:
.912c		fa		plx				plx
.912d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.912e						MCCommand:
.912e		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.9130		48		pha				pha
.9131		64 01		stz $01				stz 	1
.9133		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.9136		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.9138		8d a0 07	sta $07a0			sta 	DMAControlByte
.913b		20 e9 91	jsr $91e9			jsr 	MCPosition 					; start position
.913e		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.9140		20 ba 91	jsr $91ba			jsr 	MCCopyAddress
.9143		a2 08		ldx #$08			ldx 	#8
.9145		20 ba 91	jsr $91ba			jsr 	MCCopyAddress
.9148		b1 30		lda ($30),y			lda 	(codePtr),y
.914a		c8		iny				iny
.914b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.914d		f0 09		beq $9158			beq 	_MCSize1D
.914f		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.9151		f0 11		beq $9164			beq 	_MCRect2D
.9153						_MCSyntax:
.9153		a9 02		lda #$02		lda	#2
.9155		4c 18 98	jmp $9818		jmp	ErrorHandler
.9158						_MCSize1D:
.9158		a2 00		ldx #$00			ldx 	#0 							; get size
.915a		20 df a6	jsr $a6df			jsr 	EvaluateInteger
.915d		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.915f		20 ba 91	jsr $91ba			jsr 	MCCopyAddress
.9162		80 24		bra $9188			bra 	_MCDestination
.9164						_MCRect2D:
.9164		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.9166		20 d7 91	jsr $91d7			jsr 	MCEvalCopyData16
.9169		20 07 98	jsr $9807			jsr 	CheckComma
.916c		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.916e		20 d7 91	jsr $91d7			jsr 	MCEvalCopyData16
.9171		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.9173		20 0f 98	jsr $980f			jsr 	CheckNextA
.9176		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.9178		20 d7 91	jsr $91d7			jsr 	MCEvalCopyData16
.917b		a2 12		ldx #$12			ldx 	#$12
.917d		20 de 91	jsr $91de			jsr 	MCCopyData16
.9180		ad a0 07	lda $07a0			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.9183		09 02		ora #$02			ora 	#$02
.9185		8d a0 07	sta $07a0			sta 	DMAControlByte
.9188						_MCDestination:
.9188		b1 30		lda ($30),y			lda 	(codePtr),y
.918a		c8		iny				iny
.918b		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.918d		f0 0e		beq $919d			beq 	_MCDestPoke
.918f		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.9191		d0 c0		bne $9153			bne 	_MCSyntax
.9193		20 e9 91	jsr $91e9			jsr 	MCPosition 					; get target address
.9196		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.9198		20 ba 91	jsr $91ba			jsr 	MCCopyAddress
.919b		80 0e		bra $91ab			bra 	_MCDoDMA 					; and we can go.
.919d						_MCDestPoke:
.919d		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; POKE what
.91a0		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.91a3		ad a0 07	lda $07a0			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.91a6		09 04		ora #$04			ora 	#$04
.91a8		8d a0 07	sta $07a0			sta 	DMAControlByte
.91ab						_MCDoDMA:
.91ab		ad a0 07	lda $07a0			lda 	DMAControlByte 				; set the DMA Control byte to go !
.91ae		8d 00 df	sta $df00			sta 	$DF00
.91b1						_MCWaitBUSD:
.91b1		ad 01 df	lda $df01			lda 	$DF01
.91b4		30 fb		bmi $91b1			bmi 	_MCWaitBUSD
.91b6		68		pla				pla 								; restore I/O.
.91b7		85 01		sta $01				sta 	1
.91b9		60		rts				rts
.91ba						MCCopyAddress:
.91ba		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.91bc		29 fc		and #$fc			and 	#$FC
.91be		05 70		ora $70				ora 	NSMantissa3
.91c0		d0 10		bne $91d2			bne 	_MCRange
.91c2		a5 58		lda $58				lda 	NSMantissa0
.91c4		9d 00 df	sta $df00,x			sta 	$DF00,x
.91c7		a5 60		lda $60				lda 	NSMantissa1
.91c9		9d 01 df	sta $df01,x			sta 	$DF01,x
.91cc		a5 68		lda $68				lda 	NSMantissa2
.91ce		9d 02 df	sta $df02,x			sta 	$DF02,x
.91d1		60		rts				rts
.91d2						_MCRange:
.91d2		a9 04		lda #$04		lda	#4
.91d4		4c 18 98	jmp $9818		jmp	ErrorHandler
.91d7						MCEvalCopyData16:
.91d7		da		phx				phx
.91d8		a2 00		ldx #$00			ldx 	#0
.91da		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.91dd		fa		plx				plx
.91de						MCCopyData16:
.91de		a5 58		lda $58				lda 	NSMantissa0
.91e0		9d 00 df	sta $df00,x			sta 	$DF00,x
.91e3		a5 60		lda $60				lda 	NSMantissa1
.91e5		9d 01 df	sta $df01,x			sta 	$DF01,x
.91e8		60		rts				rts
.91e9						MCPosition:
.91e9		a2 00		ldx #$00			ldx 	#0 							; get start address.
.91eb		b1 30		lda ($30),y			lda 	(codePtr),y
.91ed		c9 b8		cmp #$b8			cmp 	#KWD_AT
.91ef		f0 04		beq $91f5			beq 	_MCPAt
.91f1		20 df a6	jsr $a6df			jsr 	EvaluateInteger
.91f4		60		rts				rts
.91f5						_MCPAt:
.91f5		c8		iny				iny
.91f6		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; X position
.91f9		48		pha				pha
.91fa		20 07 98	jsr $9807			jsr 	CheckComma
.91fd		e8		inx				inx
.91fe		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; Y position
.9201		ca		dex				dex
.9202		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.9204		64 58		stz $58				stz 	NSMantissa0
.9206		64 68		stz $68				stz 	NSMantissa2
.9208		64 70		stz $70				stz 	NSMantissa3
.920a		46 60		lsr $60				lsr 	NSMantissa1
.920c		66 58		ror $58				ror 	NSMantissa0
.920e		46 60		lsr $60				lsr 	NSMantissa1
.9210		66 58		ror $58				ror 	NSMantissa0
.9212		68		pla				pla
.9213		18		clc				clc
.9214		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.9216		85 58		sta $58				sta 	NSMantissa0
.9218		a5 60		lda $60				lda 	NSMantissa1
.921a		65 59		adc $59				adc 	NSMantissa0+1
.921c		85 60		sta $60				sta 	NSMantissa1
.921e		90 02		bcc $9222			bcc 	_MCPNoCarry
.9220		e6 68		inc $68				inc 	NSMantissa2
.9222						_MCPNoCarry:
.9222		ad c9 07	lda $07c9			lda 	gxBasePage
.9225		85 69		sta $69				sta 	NSMantissa2+1
.9227		64 59		stz $59				stz 	NSMantissa0+1
.9229		64 61		stz $61				stz 	NSMantissa1+1
.922b		64 71		stz $71				stz 	NSMantissa3+1
.922d		a2 01		ldx #$01			ldx 	#1
.922f		20 8b a7	jsr $a78b			jsr 	NSMShiftRight
.9232		20 8b a7	jsr $a78b			jsr 	NSMShiftRight
.9235		20 8b a7	jsr $a78b			jsr 	NSMShiftRight
.9238		a2 00		ldx #$00			ldx 	#0
.923a		20 12 9b	jsr $9b12			jsr 	AddTopTwoStack
.923d		60		rts				rts
.07a0						DMAControlByte:
>07a0								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.923e						NewCommand:
.923e		20 44 92	jsr $9244			jsr 	NewProgram 					; does the actual NEW.
.9241		4c 8d 86	jmp $868d			jmp 	WarmStart 					; and warm starts straight away.
.9244						NewProgram:
.9244		20 91 ac	jsr $ac91			jsr 	MemoryNew
.9247		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.924a		20 26 87	jsr $8726			jsr 	ClearCommand 				; clear everything.
.924d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.924e						PokeBCommand:
.924e		a9 01		lda #$01			lda 	#1
.9250		80 0c		bra $925e			bra 	PokeCommand
.9252						PokeWCommand:
.9252		a9 02		lda #$02			lda 	#2
.9254		80 08		bra $925e			bra 	PokeCommand
.9256						PokeLCommand:
.9256		a9 03		lda #$03			lda 	#3
.9258		80 04		bra $925e			bra 	PokeCommand
.925a						PokeDCommand:
.925a		a9 04		lda #$04			lda 	#4
.925c		80 00		bra $925e			bra 	PokeCommand
.925e						PokeCommand:
.925e		48		pha				pha 								; save count on stack
.925f		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.9261		20 f2 a6	jsr $a6f2			jsr		Evaluate16BitInteger 		; address
.9264		20 07 98	jsr $9807			jsr 	CheckComma
.9267		e8		inx				inx
.9268		20 df a6	jsr $a6df			jsr		EvaluateInteger 			; data
.926b		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.926d		85 36		sta $36				sta 	zTemp0
.926f		a5 60		lda $60				lda 	NSMantissa1
.9271		85 37		sta $37				sta 	zTemp0+1
.9273		68		pla				pla 								; count -> zTemp1
.9274		85 38		sta $38				sta 	zTemp1
.9276		5a		phy				phy 								; save Y position.
.9277		a0 00		ldy #$00			ldy 	#0 							; index to write
.9279		a2 00		ldx #$00			ldx 	#0 							; index to read
.927b						_PCLoop:
.927b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.927d		91 36		sta ($36),y			sta 	(zTemp0),y
.927f		c8		iny				iny 								; next byte to write
.9280		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9281		18		clc				clc
.9282		69 08		adc #$08			adc 	#MathStackSize
.9284		aa		tax				tax
.9285		c6 38		dec $38				dec 	zTemp1 						; done them all
.9287		d0 f2		bne $927b			bne 	_PCLoop
.9289		7a		ply				ply 								; restore position.
.928a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.928b						CallProcedure:
.928b		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.928d		b1 30		lda ($30),y			lda 	(codePtr),y
.928f		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9291		f0 0c		beq $929f			beq 	_CPEndParam
.9293						_CPParamLoop:
.9293		20 b7 a6	jsr $a6b7			jsr 	EvaluateValue 				; get parameter onto stack
.9296		e8		inx				inx 								; bump next stack
.9297		b1 30		lda ($30),y			lda 	(codePtr),y
.9299		c8		iny				iny
.929a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.929c		f0 f5		beq $9293			beq 	_CPParamLoop
.929e		88		dey				dey 								; unpick.
.929f						_CPEndParam:
.929f		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.92a2		c8		iny				iny									; skip right bracket
.92a3		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.92a5		20 91 b0	jsr $b091			jsr 	StackOpen
.92a8		20 d6 b0	jsr $b0d6			jsr 	STKSaveCodePosition 		; save loop position
.92ab		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.92ad		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.92af		a5 60		lda $60				lda 	NSMantissa1
.92b1		85 37		sta $37				sta 	zTemp0+1
.92b3		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.92b5		b2 36		lda ($36)			lda 	(zTemp0)
.92b7		85 30		sta $30				sta 	safePtr
.92b9		b1 36		lda ($36),y			lda 	(zTemp0),y
.92bb		85 31		sta $31				sta 	safePtr+1
.92bd		c8		iny				iny
.92be		b1 36		lda ($36),y			lda 	(zTemp0),y
.92c0		85 32		sta $32				sta 	safePtr+2
.92c2		c8		iny				iny
.92c3		b1 36		lda ($36),y			lda 	(zTemp0),y
.92c5		85 33		sta $33				sta 	safePtr+3
.92c7		c8		iny				iny 								; get Y offset -> Y
.92c8		b1 36		lda ($36),y			lda 	(zTemp0),y
.92ca		a8		tay				tay
.92cb		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.92cd		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.92d0		f0 13		beq $92e5			beq 	_ParamExit 					; if so, exit.
.92d2						_ParamExtract:
.92d2		ca		dex				dex 								; put a local term on the level before
.92d3		20 7b 90	jsr $907b			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.92d6		20 4c 8f	jsr $8f4c			jsr 	AssignVariable 				; assign stacked value to the variable.
.92d9		e8		inx				inx 								; advance to next parameter to do.
.92da		e8		inx				inx
.92db		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.92de		f0 05		beq $92e5			beq 	_ParamExit
.92e0		20 07 98	jsr $9807			jsr 	CheckComma 					; comma seperating parameters
.92e3		80 ed		bra $92d2			bra 	_ParamExtract
.92e5						_ParamExit:
.92e5		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; check )
.92e8		60		rts				rts 								; and continue from here
.92e9						Command_ENDPROC:
.92e9		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.92eb		a2 14		ldx #$14			ldx 	#ERRID_PROC
.92ed		20 be b0	jsr $b0be			jsr 	StackCheckFrame
.92f0		20 e7 b0	jsr $b0e7			jsr 	STKLoadCodePosition 		; restore code position
.92f3		20 b0 b0	jsr $b0b0			jsr 	StackClose
.92f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.92f7						Command_Read:
.92f7		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.92f9		20 66 a1	jsr $a166			jsr 	EvaluateTerm
.92fc		b5 50		lda $50,x			lda 	NSStatus,x
.92fe		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9300		f0 4f		beq $9351			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.9302		20 9a 93	jsr $939a			jsr 	SwapDataCodePtrs 			; swap code and data
.9305		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9308		d0 25		bne $932f			bne 	_CRContinueData  			; forward for the next one.
.930a		b2 30		lda ($30)			lda 	(codePtr)
.930c		f0 1c		beq $932a			beq 	_CRNoData
.930e						_CRKeepSearching:
.930e		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.9310		a2 80		ldx #$80			ldx 	#KWC_EOL
.9312		20 5a 97	jsr $975a			jsr 	ScanForward
.9315		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.9317		f0 16		beq $932f			beq 	_CRHaveData 				; found it
.9319		18		clc				clc
.931a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.931c		65 30		adc $30				adc 	codePtr
.931e		85 30		sta $30				sta 	codePtr
.9320		90 02		bcc $9324			bcc 	_CREExit
.9322		e6 31		inc $31				inc 	codePtr+1 					; carry
.9324						_CREExit:
.9324		a0 03		ldy #$03			ldy 	#3 							; start of line.
.9326		b2 30		lda ($30)			lda 	(codePtr)
.9328		d0 e4		bne $930e			bne 	_CRKeepSearching
.932a						_CRNoData:
.932a		a9 0b		lda #$0b		lda	#11
.932c		4c 18 98	jmp $9818		jmp	ErrorHandler
.932f						_CRHaveData:
.932f						_CRContinueData:
.932f		a2 01		ldx #$01			ldx 	#1
.9331		20 b7 a6	jsr $a6b7			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9334		ca		dex				dex
.9335		20 4c 8f	jsr $8f4c			jsr		AssignVariable 				; do the assignment
.9338		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.933b		b1 30		lda ($30),y			lda 	(codePtr),y
.933d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.933f		d0 04		bne $9345			bne 	_CRSwapBack
.9341		c8		iny				iny 								; consume comma
.9342		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.9345						_CRSwapBack:
.9345		20 9a 93	jsr $939a			jsr 	SwapDataCodePtrs			; swap them back.
.9348		b1 30		lda ($30),y			lda 	(codePtr),y
.934a		c8		iny				iny
.934b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.934d		f0 a8		beq $92f7			beq 	Command_Read 				; if so go round again.
.934f		88		dey				dey 								; unpick get.
.9350		60		rts				rts
.9351						_CRSyntax:
.9351		4c 17 aa	jmp $aa17			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9354						RemCommand:
.9354		b1 30		lda ($30),y			lda 	(codePtr),y
.9356		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9358		d0 06		bne $9360			bne 	_RMExit
.935a		c8		iny				iny 								; point to offset
.935b		98		tya				tya 								; A = offset position
.935c		38		sec				sec 								; add size +1 hence SEC
.935d		71 30		adc ($30),y			adc 	(codePtr),y
.935f		a8		tay				tay 								; make current position.
.9360						_RMExit:
.9360		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9361						Command_REPEAT:
.9361		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9363		20 91 b0	jsr $b091			jsr 	StackOpen
.9366		20 d6 b0	jsr $b0d6			jsr 	STKSaveCodePosition 		; save loop position
.9369		60		rts				rts
.936a						Command_UNTIL:
.936a		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.936c		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.936e		20 be b0	jsr $b0be			jsr 	StackCheckFrame
.9371		a2 00		ldx #$00			ldx 	#0
.9373		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber 				; work out the number
.9376		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; check if zero
.9379		f0 04		beq $937f			beq 	_CULoopBack 				; if so keep looping
.937b		20 b0 b0	jsr $b0b0			jsr 	StackClose		 			; return
.937e		60		rts				rts
.937f						_CULoopBack:
.937f		20 e7 b0	jsr $b0e7			jsr 	STKLoadCodePosition 		; loop back
.9382		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9383						Command_Restore:
.9383		20 9a 93	jsr $939a			jsr 	SwapDataCodePtrs 			; swap code and data
.9386		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9388		85 30		sta $30				sta 	codePtr
.938a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.938c		85 31		sta $31				sta 	codePtr+1
.938e		20 9a 93	jsr $939a			jsr 	SwapDataCodePtrs 			; put them back
.9391		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9393		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.9396		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.9399		60		rts				rts
.939a						SwapDataCodePtrs:
.939a		da		phx				phx
.939b		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.939d						_SDCPLoop:
.939d		b5 30		lda $30,x			lda 	safePtr,x
.939f		48		pha				pha
.93a0		bd 13 04	lda $0413,x			lda 	dataPointer,x
.93a3		95 30		sta $30,x			sta 	safePtr,x
.93a5		68		pla				pla
.93a6		9d 13 04	sta $0413,x			sta 	dataPointer,x
.93a9		ca		dex				dex
.93aa		10 f1		bpl $939d			bpl 	_SDCPLoop
.93ac		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.93af		8c 17 04	sty $0417			sty 	dataPointer+4
.93b2		a8		tay				tay
.93b3		fa		plx				plx
.93b4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.93b5						EOLCommand:
.93b5		18		clc				clc
.93b6		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.93b8		65 30		adc $30				adc 	codePtr
.93ba		85 30		sta $30				sta 	codePtr
.93bc		90 02		bcc $93c0			bcc 	_CREExit
.93be		e6 31		inc $31				inc 	codePtr+1 					; carry
.93c0						_CREExit:
.93c0		80 18		bra $93da			bra 	RunNewLine
.93c2						CommandRUNOptLoad:
.93c2		b1 30		lda ($30),y			lda 	(codePtr),y
.93c4		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.93c6		f0 07		beq $93cf			beq 	RunCurrentProgram
.93c8		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.93ca		f0 03		beq $93cf			beq 	RunCurrentProgram
.93cc		20 c9 8a	jsr $8ac9			jsr 	LoadFile 					; load expected name file.
.93cf						RunCurrentProgram:
.93cf		20 26 87	jsr $8726			jsr 	ClearCommand 				; clear variable/stacks/etc.
.93d2		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93d4		85 30		sta $30				sta 	codePtr
.93d6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93d8		85 31		sta $31				sta 	codePtr+1
.93da						RunNewLine:
.93da		b2 30		lda ($30)			lda 	(codePtr)
.93dc		f0 74		beq $9452			beq 	CRNoProgram         		; no then END.
.93de		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.93e0		9a		txs				txs
.93e1						RUNCodePointerLine:
.93e1		a0 02		ldy #$02			ldy 	#2 							; start of program
.93e3						_CRIncMainLoop:
.93e3		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.93e5		f0 03		beq $93ea			beq 	_NoEvents					; if zero, skip with Z flag set.
.93e7		20 34 81	jsr $8134			jsr 	ProcessEvents
.93ea						_NoEvents:
.93ea		d0 61		bne $944d			bne 	_CRBreak
.93ec		a5 01		lda $01				lda 	1 							; save I/O 0
.93ee		48		pha				pha
.93ef		64 01		stz $01				stz 	1 							; access I/O Page 0
.93f1		38		sec				sec 								; calculate timer - LastTick
.93f2		ad 59 d6	lda $d659			lda 	$D659
.93f5		cd 5e 06	cmp $065e			cmp 	LastTick
.93f8		f0 06		beq $9400			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.93fa		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.93fd		20 96 81	jsr $8196			jsr 	TickHandler 							; go do the code.
.9400						_NoFireTick:
.9400		68		pla				pla 								; restore I/O 0
.9401		85 01		sta $01				sta 	1
.9403						_CRNoBreakCheck:
.9403		c8		iny				iny									; next token
.9404						_CRMainLoop:
.9404		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9407		b1 30		lda ($30),y			lda 	(codePtr),y
.9409		10 10		bpl $941b			bpl 	_CRNotKeyword				; not a token.
.940b		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.940d		b0 04		bcs $9413			bcs 	_CRIsKeyword
.940f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9411		b0 34		bcs $9447			bcs		_CRSyntaxError
.9413						_CRIsKeyword:
.9413		c8		iny				iny 								; consume command
.9414		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9415		aa		tax				tax 								; put in X for vector jump
.9416		20 4a 94	jsr $944a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9419		80 e9		bra $9404			bra 	_CRMainLoop 				; and loop round
.941b						_CRNotKeyword:
.941b		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.941d		f0 c4		beq $93e3			beq 	_CRIncMainLoop
.941f		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9421		90 05		bcc $9428			bcc 	_CRNotVariable
.9423						_CRGoLet:
.9423		20 13 8f	jsr $8f13			jsr 	LetCommand
.9426		80 dc		bra $9404			bra 	_CRMainLoop
.9428						_CRNotVariable:
.9428		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.942a		f0 f7		beq $9423			beq 	_CRGoLet
.942c		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.942e		f0 f3		beq $9423			beq 	_CRGoLet
.9430		c9 21		cmp #$21			cmp 	#KWD_PLING
.9432		f0 ef		beq $9423			beq 	_CRGoLet
.9434		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9436		f0 09		beq $9441			beq 	_CRGoRem
.9438		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.943a		d0 0b		bne $9447			bne 	_CRSyntaxError
.943c		20 ff 84	jsr $84ff			jsr 	LabelHere
.943f		80 c3		bra $9404			bra 	_CRMainLoop
.9441						_CRGoRem:
.9441		c8		iny				iny
.9442		20 54 93	jsr $9354			jsr 	RemCommand
.9445		80 bd		bra $9404			bra 	_CRMainLoop
.9447						_CRSyntaxError:
.9447		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.944a						_CRCallVector0:
.944a		7c e8 94	jmp ($94e8,x)			jmp 	(VectorSet0,x)
.944d						_CRBreak:
.944d		a9 01		lda #$01		lda	#1
.944f		4c 18 98	jmp $9818		jmp	ErrorHandler
.9452						CRNoProgram:
.9452		4c 6a 88	jmp $886a			jmp 	EndCommand
.9455						Shift1Command:
.9455		b1 30		lda ($30),y			lda 	(codePtr),y
.9457		c8		iny				iny
.9458		0a		asl a				asl 	a
.9459		aa		tax				tax
.945a		7c a0 95	jmp ($95a0,x)			jmp 	(VectorSet1,x)
.945d						Shift2Command:
.945d		b1 30		lda ($30),y			lda 	(codePtr),y
.945f		c8		iny				iny
.9460		0a		asl a				asl 	a
.9461		aa		tax				tax
.9462		7c ee 95	jmp ($95ee,x)			jmp 	(VectorSet2,x)
.9465						Unused1:
.9465						Unused2:
.9465						Unused3:
.9465						Unused4:
.9465		4c 17 aa	jmp $aa17			jmp 	SyntaxError
>9468								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9468						VectorSetPunc:
>9468		d0 9a					.word	ShiftLeft                        ; $00 <<
>946a		bb 98					.word	BinaryCompareLessEqual           ; $01 <=
>946c		b1 98					.word	BinaryCompareNotEqual            ; $02 <>
>946e		17 aa					.word	SyntaxError                      ; $03 !!3
>9470		17 aa					.word	SyntaxError                      ; $04 ><
>9472		c5 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>9474		d3 9a					.word	ShiftRight                       ; $06 >>
>9476		17 aa					.word	SyntaxError                      ; $07 !!7
>9478		17 aa					.word	SyntaxError                      ; $08 !!8
>947a		17 aa					.word	SyntaxError                      ; $09 !!9
>947c		17 aa					.word	SyntaxError                      ; $0a !!10
>947e		17 aa					.word	SyntaxError                      ; $0b !!11
>9480		17 aa					.word	SyntaxError                      ; $0c !!12
>9482		17 aa					.word	SyntaxError                      ; $0d !!13
>9484		17 aa					.word	SyntaxError                      ; $0e !!14
>9486		17 aa					.word	SyntaxError                      ; $0f !!15
>9488		17 aa					.word	SyntaxError                      ; $10 @
>948a		17 aa					.word	SyntaxError                      ; $11 !!17
>948c		17 aa					.word	SyntaxError                      ; $12 !!18
>948e		17 aa					.word	SyntaxError                      ; $13 [
>9490		7c 99					.word	IntegerDivide                    ; $14 \
>9492		17 aa					.word	SyntaxError                      ; $15 ]
>9494		0e 9c					.word	EorInteger                       ; $16 ^
>9496		17 aa					.word	SyntaxError                      ; $17 _
>9498		17 aa					.word	SyntaxError                      ; $18 `
>949a		17 aa					.word	SyntaxError                      ; $19 !!25
>949c		17 aa					.word	SyntaxError                      ; $1a !!26
>949e		17 aa					.word	SyntaxError                      ; $1b {
>94a0		d9 9b					.word	OraInteger                       ; $1c |
>94a2		17 aa					.word	SyntaxError                      ; $1d }
>94a4		17 aa					.word	SyntaxError                      ; $1e ~
>94a6		17 aa					.word	SyntaxError                      ; $1f <7F>
>94a8		17 aa					.word	SyntaxError                      ; $20
>94aa		43 9c					.word	WordIndirect                     ; $21 !
>94ac		17 aa					.word	SyntaxError                      ; $22 "
>94ae		17 aa					.word	SyntaxError                      ; $23 #
>94b0		17 aa					.word	SyntaxError                      ; $24 $
>94b2		bd 99					.word	IntegerModulus                   ; $25 %
>94b4		a4 9b					.word	AndInteger                       ; $26 &
>94b6		17 aa					.word	SyntaxError                      ; $27 '
>94b8		17 aa					.word	SyntaxError                      ; $28 (
>94ba		17 aa					.word	SyntaxError                      ; $29 )
>94bc		2b 9a					.word	MulInteger                       ; $2a *
>94be		46 9b					.word	AddInteger                       ; $2b +
>94c0		17 aa					.word	SyntaxError                      ; $2c ,
>94c2		7f 9b					.word	SubInteger                       ; $2d -
>94c4		17 aa					.word	SyntaxError                      ; $2e .
>94c6		fd 9d					.word	FDivideCommand                   ; $2f /
>94c8		17 aa					.word	SyntaxError                      ; $30 0
>94ca		17 aa					.word	SyntaxError                      ; $31 1
>94cc		17 aa					.word	SyntaxError                      ; $32 2
>94ce		17 aa					.word	SyntaxError                      ; $33 3
>94d0		17 aa					.word	SyntaxError                      ; $34 4
>94d2		17 aa					.word	SyntaxError                      ; $35 5
>94d4		17 aa					.word	SyntaxError                      ; $36 6
>94d6		17 aa					.word	SyntaxError                      ; $37 7
>94d8		17 aa					.word	SyntaxError                      ; $38 8
>94da		17 aa					.word	SyntaxError                      ; $39 9
>94dc		17 aa					.word	SyntaxError                      ; $3a :
>94de		17 aa					.word	SyntaxError                      ; $3b ;
>94e0		9d 98					.word	BinaryCompareLess                ; $3c <
>94e2		93 98					.word	BinaryCompareEqual               ; $3d =
>94e4		a7 98					.word	BinaryCompareGreater             ; $3e >
>94e6		65 9c					.word	ByteIndirect                     ; $3f ?
.94e8						VectorSet0:
>94e8		b5 93					.word	EOLCommand                       ; $80 !0:EOF
>94ea		55 94					.word	Shift1Command                    ; $81 !1:SH1
>94ec		5d 94					.word	Shift2Command                    ; $82 !2:SH2
>94ee		e7 a2					.word	AbsUnary                         ; $83 ABS(
>94f0		f5 a2					.word	AllocUnary                       ; $84 ALLOC(
>94f2		65 a3					.word	AscUnary                         ; $85 ASC(
>94f4		b6 a4					.word	ChrUnary                         ; $86 CHR$(
>94f6		6d 88					.word	UnaryEvent                       ; $87 EVENT(
>94f8		8f 98					.word	UnaryFalse                       ; $88 FALSE
>94fa		72 a3					.word	FracUnary                        ; $89 FRAC(
>94fc		1b a8					.word	ChrGet                           ; $8a GET$(
>94fe		f7 a7					.word	AscGet                           ; $8b GET(
>9500		a1 a7					.word	UnaryGetDate                     ; $8c GETDATE$(
>9502		9d a7					.word	UnaryGetTime                     ; $8d GETTIME$(
>9504		32 af					.word	UnaryHit                         ; $8e HIT(
>9506		22 a8					.word	ChrInkey                         ; $8f INKEY$(
>9508		10 a8					.word	AscInkey                         ; $90 INKEY(
>950a		87 a3					.word	IntUnary                         ; $91 INT(
>950c		75 a4					.word	IsValUnary                       ; $92 ISVAL(
>950e		c8 a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>9510		ec a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>9512		01 8f					.word	UnaryJoyB                        ; $95 JOYB(
>9514		da 8e					.word	UnaryJoyX                        ; $96 JOYX(
>9516		dd 8e					.word	UnaryJoyY                        ; $97 JOYY(
>9518		3b a8					.word	KeyDown                          ; $98 KEYDOWN(
>951a		2b a6					.word	Unary_Left                       ; $99 LEFT$(
>951c		98 a3					.word	LenUnary                         ; $9a LEN(
>951e		b6 a3					.word	Unary_Max                        ; $9b MAX(
>9520		4d a6					.word	Unary_Mid                        ; $9c MID$(
>9522		b2 a3					.word	Unary_Min                        ; $9d MIN(
>9524		01 a4					.word	Unary_Not                        ; $9e NOT(
>9526		14 a4					.word	PeekByteUnary                    ; $9f PEEK(
>9528		20 a4					.word	PeekDUnary                       ; $a0 PEEKD(
>952a		1c a4					.word	PeekLUnary                       ; $a1 PEEKL(
>952c		18 a4					.word	PeekWUnary                       ; $a2 PEEKW(
>952e		ee af					.word	UnaryPlaying                     ; $a3 PLAYING(
>9530		55 a8					.word	Unary_Random                     ; $a4 RANDOM(
>9532		38 a6					.word	Unary_Right                      ; $a5 RIGHT$(
>9534		6f a8					.word	Unary_Rnd                        ; $a6 RND(
>9536		4d a4					.word	SgnUnary                         ; $a7 SGN(
>9538		6a a5					.word	SpcUnary                         ; $a8 SPC(
>953a		85 a5					.word	Unary_Str                        ; $a9 STR$(
>953c		ef 96					.word	UnaryTimer                       ; $aa TIMER(
>953e		84 98					.word	UnaryTrue                        ; $ab TRUE
>9540		6b a4					.word	ValUnary                         ; $ac VAL(
>9542		73 8c					.word	ForCommand                       ; $ad FOR
>9544		b6 8d					.word	IfCommand                        ; $ae IF
>9546		65 94					.word	Unused1                          ; $af PROC
>9548		61 93					.word	Command_REPEAT                   ; $b0 REPEAT
>954a		d0 97					.word	Command_WHILE                    ; $b1 WHILE
>954c		df 8d					.word	EndIf                            ; $b2 ENDIF
>954e		e9 92					.word	Command_ENDPROC                  ; $b3 ENDPROC
>9550		25 8d					.word	NextCommand                      ; $b4 NEXT
>9552		65 94					.word	Unused4                          ; $b5 THEN
>9554		6a 93					.word	Command_UNTIL                    ; $b6 UNTIL
>9556		f1 97					.word	Command_WEND                     ; $b7 WEND
>9558		17 aa					.word	SyntaxError                      ; $b8 AT
>955a		17 aa					.word	SyntaxError                      ; $b9 BY
>955c		f1 86					.word	CallCommand                      ; $ba CALL
>955e		e6 ac					.word	CircleCommand                    ; $bb CIRCLE
>9560		26 87					.word	ClearCommand                     ; $bc CLEAR
>9562		17 aa					.word	SyntaxError                      ; $bd COLOR
>9564		17 aa					.word	SyntaxError                      ; $be COLOUR
>9566		93 87					.word	Command_Data                     ; $bf DATA
>9568		9b 87					.word	DimCommand                       ; $c0 DIM
>956a		65 94					.word	Unused3                          ; $c1 DOWNTO
>956c		d8 8d					.word	ElseCode                         ; $c2 ELSE
>956e		17 aa					.word	SyntaxError                      ; $c3 FROM
>9570		05 af					.word	GfxCommand                       ; $c4 GFX
>9572		17 aa					.word	SyntaxError                      ; $c5 HERE
>9574		0f ad					.word	ImageCommand                     ; $c6 IMAGE
>9576		13 8f					.word	LetCommand                       ; $c7 LET
>9578		61 ad					.word	LineCommand                      ; $c8 LINE
>957a		6d 90					.word	Command_LOCAL                    ; $c9 LOCAL
>957c		2e 91					.word	MCCommand                        ; $ca MEMCOPY
>957e		17 aa					.word	SyntaxError                      ; $cb OFF
>9580		17 aa					.word	SyntaxError                      ; $cc ON
>9582		17 aa					.word	SyntaxError                      ; $cd OUTLINE
>9584		56 af					.word	PaletteCommand                   ; $ce PALETTE
>9586		5a ad					.word	PlotCommand                      ; $cf PLOT
>9588		4e 92					.word	PokeBCommand                     ; $d0 POKE
>958a		5a 92					.word	PokeDCommand                     ; $d1 POKED
>958c		56 92					.word	PokeLCommand                     ; $d2 POKEL
>958e		52 92					.word	PokeWCommand                     ; $d3 POKEW
>9590		f7 92					.word	Command_Read                     ; $d4 READ
>9592		e2 ac					.word	RectangleCommand                 ; $d5 RECT
>9594		54 93					.word	RemCommand                       ; $d6 REM
>9596		17 aa					.word	SyntaxError                      ; $d7 SOLID
>9598		0a b0					.word	SoundCommand                     ; $d8 SOUND
>959a		f1 ac					.word	SpriteCommand                    ; $d9 SPRITE
>959c		2b ad					.word	TextCommand                      ; $da TEXT
>959e		65 94					.word	Unused2                          ; $db TO
.95a0						VectorSet1:
>95a0		17 aa					.word	SyntaxError                      ; $80 !0:EOF
>95a2		17 aa					.word	SyntaxError                      ; $81 !1:SH1
>95a4		17 aa					.word	SyntaxError                      ; $82 !2:SH2
>95a6		c5 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>95a8		e1 86					.word	AssertCommand                    ; $84 ASSERT
>95aa		a5 ae					.word	BitmapCtrl                       ; $85 BITMAP
>95ac		ca 88					.word	Command_BLoad                    ; $86 BLOAD
>95ae		6a 89					.word	Command_BSave                    ; $87 BSAVE
>95b0		96 af					.word	ClearScreen                      ; $88 CLS
>95b2		e5 8d					.word	Command_CPrint                   ; $89 CPRINT
>95b4		ec 89					.word	Command_Dir                      ; $8a DIR
>95b6		58 88					.word	BootDOS                          ; $8b DOS
>95b8		bc 8a					.word	Command_Drive                    ; $8c DRIVE
>95ba		6a 88					.word	EndCommand                       ; $8d END
>95bc		c2 af					.word	Explode                          ; $8e EXPLODE
>95be		17 aa					.word	SyntaxError                      ; $8f GO
>95c0		7e 8d					.word	Command_GOSUB                    ; $90 GOSUB
>95c2		9c 8d					.word	GotoCommand                      ; $91 GOTO
>95c4		17 aa					.word	SyntaxError                      ; $92 HIMEM
>95c6		e0 8d					.word	Command_Input                    ; $93 INPUT
>95c8		63 8f					.word	Command_List                     ; $94 LIST
>95ca		c3 8a					.word	Command_Load                     ; $95 LOAD
>95cc		17 aa					.word	SyntaxError                      ; $96 MOUSE
>95ce		3e 92					.word	NewCommand                       ; $97 NEW
>95d0		9e af					.word	PingCommand                      ; $98 PING
>95d2		ec 8d					.word	Command_Print                    ; $99 PRINT
>95d4		83 93					.word	Command_Restore                  ; $9a RESTORE
>95d6		8e 8d					.word	Command_RETURN                   ; $9b RETURN
>95d8		c2 93					.word	CommandRUNOptLoad                ; $9c RUN
>95da		95 8b					.word	Command_Save                     ; $9d SAVE
>95dc		76 96					.word	CommandSetDate                   ; $9e SETDATE
>95de		7a 96					.word	CommandSetTime                   ; $9f SETTIME
>95e0		b6 af					.word	ShootCommand                     ; $a0 SHOOT
>95e2		ea ae					.word	SpritesCtrl                      ; $a1 SPRITES
>95e4		ea 96					.word	StopCommand                      ; $a2 STOP
>95e6		19 8c					.word	Command_VERIFY                   ; $a3 VERIFY
>95e8		8a 87					.word	XGoCommand                       ; $a4 XGO
>95ea		81 87					.word	XLoadCommand                     ; $a5 XLOAD
>95ec		aa af					.word	ZapCommand                       ; $a6 ZAP
.95ee						VectorSet2:
>95ee		17 aa					.word	SyntaxError                      ; $80 !0:EOF
>95f0		17 aa					.word	SyntaxError                      ; $81 !1:SH1
>95f2		17 aa					.word	SyntaxError                      ; $82 !2:SH2
>95f4		d6 a8					.word	Assemble_adc                     ; $83 ADC
>95f6		ce a8					.word	Assemble_and                     ; $84 AND
>95f8		ea a8					.word	Assemble_asl                     ; $85 ASL
>95fa		54 a9					.word	Assemble_bcc                     ; $86 BCC
>95fc		58 a9					.word	Assemble_bcs                     ; $87 BCS
>95fe		60 a9					.word	Assemble_beq                     ; $88 BEQ
>9600		17 a9					.word	Assemble_bit                     ; $89 BIT
>9602		48 a9					.word	Assemble_bmi                     ; $8a BMI
>9604		5c a9					.word	Assemble_bne                     ; $8b BNE
>9606		44 a9					.word	Assemble_bpl                     ; $8c BPL
>9608		64 a9					.word	Assemble_bra                     ; $8d BRA
>960a		68 a9					.word	Assemble_brk                     ; $8e BRK
>960c		4c a9					.word	Assemble_bvc                     ; $8f BVC
>960e		50 a9					.word	Assemble_bvs                     ; $90 BVS
>9610		70 a9					.word	Assemble_clc                     ; $91 CLC
>9612		c4 a9					.word	Assemble_cld                     ; $92 CLD
>9614		84 a9					.word	Assemble_cli                     ; $93 CLI
>9616		b4 a9					.word	Assemble_clv                     ; $94 CLV
>9618		e2 a8					.word	Assemble_cmp                     ; $95 CMP
>961a		2b a9					.word	Assemble_cpx                     ; $96 CPX
>961c		26 a9					.word	Assemble_cpy                     ; $97 CPY
>961e		08 a9					.word	Assemble_dec                     ; $98 DEC
>9620		c0 a9					.word	Assemble_dex                     ; $99 DEX
>9622		9c a9					.word	Assemble_dey                     ; $9a DEY
>9624		d2 a8					.word	Assemble_eor                     ; $9b EOR
>9626		0d a9					.word	Assemble_inc                     ; $9c INC
>9628		d0 a9					.word	Assemble_inx                     ; $9d INX
>962a		bc a9					.word	Assemble_iny                     ; $9e INY
>962c		3f a9					.word	Assemble_jmp                     ; $9f JMP
>962e		3a a9					.word	Assemble_jsr                     ; $a0 JSR
>9630		de a8					.word	Assemble_lda                     ; $a1 LDA
>9632		03 a9					.word	Assemble_ldx                     ; $a2 LDX
>9634		21 a9					.word	Assemble_ldy                     ; $a3 LDY
>9636		f4 a8					.word	Assemble_lsr                     ; $a4 LSR
>9638		d4 a9					.word	Assemble_nop                     ; $a5 NOP
>963a		ca a8					.word	Assemble_ora                     ; $a6 ORA
>963c		80 a9					.word	Assemble_pha                     ; $a7 PHA
>963e		6c a9					.word	Assemble_php                     ; $a8 PHP
>9640		c8 a9					.word	Assemble_phx                     ; $a9 PHX
>9642		88 a9					.word	Assemble_phy                     ; $aa PHY
>9644		90 a9					.word	Assemble_pla                     ; $ab PLA
>9646		74 a9					.word	Assemble_plp                     ; $ac PLP
>9648		dc a9					.word	Assemble_plx                     ; $ad PLX
>964a		98 a9					.word	Assemble_ply                     ; $ae PLY
>964c		ef a8					.word	Assemble_rol                     ; $af ROL
>964e		f9 a8					.word	Assemble_ror                     ; $b0 ROR
>9650		7c a9					.word	Assemble_rti                     ; $b1 RTI
>9652		8c a9					.word	Assemble_rts                     ; $b2 RTS
>9654		e6 a8					.word	Assemble_sbc                     ; $b3 SBC
>9656		78 a9					.word	Assemble_sec                     ; $b4 SEC
>9658		d8 a9					.word	Assemble_sed                     ; $b5 SED
>965a		94 a9					.word	Assemble_sei                     ; $b6 SEI
>965c		da a8					.word	Assemble_sta                     ; $b7 STA
>965e		cc a9					.word	Assemble_stp                     ; $b8 STP
>9660		fe a8					.word	Assemble_stx                     ; $b9 STX
>9662		1c a9					.word	Assemble_sty                     ; $ba STY
>9664		12 a9					.word	Assemble_stz                     ; $bb STZ
>9666		b0 a9					.word	Assemble_tax                     ; $bc TAX
>9668		ac a9					.word	Assemble_tay                     ; $bd TAY
>966a		35 a9					.word	Assemble_trb                     ; $be TRB
>966c		30 a9					.word	Assemble_tsb                     ; $bf TSB
>966e		b8 a9					.word	Assemble_tsx                     ; $c0 TSX
>9670		a0 a9					.word	Assemble_txa                     ; $c1 TXA
>9672		a8 a9					.word	Assemble_txs                     ; $c2 TXS
>9674		a4 a9					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.9676						CommandSetDate:
.9676		a9 03		lda #$03			lda 	#3
.9678		80 02		bra $967c			bra 	CSDTMain
.967a						CommandSetTime:
.967a		a9 00		lda #$00			lda 	#0
.967c						CSDTMain:
.967c		48		pha				pha 								; save table offsets 0 or 3
.967d		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.967f		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.9682		20 07 98	jsr $9807			jsr 	CheckComma
.9685		e8		inx				inx
.9686		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.9689		20 07 98	jsr $9807			jsr 	CheckComma
.968c		e8		inx				inx
.968d		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.9690		68		pla				pla 								; table offset in Y, saving Y
.9691		5a		phy				phy
.9692		a8		tay				tay
.9693		a2 00		ldx #$00			ldx 	#0 							; first number
.9695		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.9697		48		pha				pha
.9698		64 01		stz $01				stz 	1
.969a						_CSDTCopy:
.969a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.969c		d9 de 96	cmp $96de,y			cmp 	RTCWMinValues,y 			; check range
.969f		90 1b		bcc $96bc			bcc 	_CSDTRange
.96a1		d9 e4 96	cmp $96e4,y			cmp 	RTCWMaxValues,y
.96a4		b0 16		bcs $96bc			bcs 	_CSDTRange
.96a6		20 c1 96	jsr $96c1			jsr 	CSDTDecimalToBCD
.96a9		da		phx				phx 								; save X
.96aa		be d8 96	ldx $96d8,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.96ad		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.96b0		fa		plx				plx 								; restore X
.96b1		e8		inx				inx 								; next number
.96b2		c8		iny				iny 								; next table entries
.96b3		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.96b5		d0 e3		bne $969a			bne 	_CSDTCopy
.96b7		68		pla				pla 								; restore I/O space
.96b8		85 01		sta $01				sta 	1
.96ba		7a		ply				ply 								; restore code pos and exit.
.96bb		60		rts				rts
.96bc						_CSDTRange:
.96bc		a9 04		lda #$04		lda	#4
.96be		4c 18 98	jmp $9818		jmp	ErrorHandler
.96c1						CSDTDecimalToBCD:
.96c1		da		phx				phx 								; 10 count in X
.96c2		a2 00		ldx #$00			ldx 	#0
.96c4						_CSDTDBLoop:
.96c4		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.96c6		90 05		bcc $96cd			bcc 	_CSDTDBExit
.96c8		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.96ca		e8		inx				inx 								; one more 10s.
.96cb		80 f7		bra $96c4			bra 	_CSDTDBLoop
.96cd						_CSDTDBExit:
.96cd		85 36		sta $36				sta 	zTemp0 						; units
.96cf		8a		txa				txa 								; 10s x 16
.96d0		0a		asl a				asl 	a
.96d1		0a		asl a				asl 	a
.96d2		0a		asl a				asl 	a
.96d3		0a		asl a				asl 	a
.96d4		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.96d6		fa		plx				plx
.96d7		60		rts				rts
.96d8						RTCWOffset:
>96d8		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.96de						RTCWMinValues:
>96de		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.96e4						RTCWMaxValues:
>96e4		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96ea						StopCommand:
.96ea		a9 08		lda #$08		lda	#8
.96ec		4c 18 98	jmp $9818		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.96ef						UnaryTimer:
.96ef		fa		plx				plx
.96f0		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.96f3						TimerToStackX:
.96f3		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; zero result
.96f6		64 01		stz $01				stz 	1 							; access I/O
.96f8		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96fb		95 58		sta $58,x			sta 	NSMantissa0,x
.96fd		ad 5a d6	lda $d65a			lda 	$D65A
.9700		95 60		sta $60,x			sta 	NSMantissa1,x
.9702		ad 5b d6	lda $d65b			lda 	$D65B
.9705		95 68		sta $68,x			sta 	NSMantissa2,x
.9707		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9708						ProcedureScan:
.9708		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.970a		85 30		sta $30				sta 	codePtr
.970c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.970e		85 31		sta $31				sta 	codePtr+1
.9710						_PSLoop:
.9710		b2 30		lda ($30)			lda 	(codePtr)
.9712		f0 42		beq $9756			beq 	_PSExit
.9714		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9716		b1 30		lda ($30),y			lda 	(codePtr),y
.9718		c9 af		cmp #$af			cmp 	#KWD_PROC
.971a		d0 2d		bne $9749			bne 	_PSNext
.971c		c8		iny				iny 								; get the address of the record to zTemp0 and
.971d		b1 30		lda ($30),y			lda 	(codePtr),y
.971f		29 c0		and #$c0			and 	#$C0
.9721		c9 40		cmp #$40			cmp 	#$40
.9723		d0 32		bne $9757			bne 	_PSSyntax
.9725		b1 30		lda ($30),y			lda 	(codePtr),y
.9727		18		clc				clc
.9728		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.972a		85 37		sta $37				sta 	zTemp0+1
.972c		c8		iny				iny 								; LSB
.972d		b1 30		lda ($30),y			lda 	(codePtr),y
.972f		85 36		sta $36				sta 	zTemp0
.9731		c8		iny				iny 								; character after variable call.
.9732		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9733		a0 07		ldy #$07			ldy 	#7
.9735		91 36		sta ($36),y			sta 	(zTemp0),y
.9737		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9739		a0 02		ldy #$02			ldy 	#2
.973b		91 36		sta ($36),y			sta 	(zTemp0),y
.973d		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.973f						_PSCopy:
.973f		b5 30		lda $30,x			lda 	safePtr,x
.9741		c8		iny				iny
.9742		91 36		sta ($36),y			sta 	(zTemp0),y
.9744		e8		inx				inx
.9745		e0 04		cpx #$04			cpx 	#4
.9747		d0 f6		bne $973f			bne 	_PSCopy
.9749						_PSNext:
.9749		18		clc				clc
.974a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.974c		65 30		adc $30				adc 	codePtr
.974e		85 30		sta $30				sta 	codePtr
.9750		90 02		bcc $9754			bcc 	_CREExit
.9752		e6 31		inc $31				inc 	codePtr+1 					; carry
.9754						_CREExit:
.9754		80 ba		bra $9710			bra 	_PSLoop
.9756						_PSExit:
.9756		60		rts				rts
.9757						_PSSyntax:
.9757		4c 17 aa	jmp $aa17			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.975a						ScanForward:
.975a		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.975c		86 37		stx $37				stx 	zTemp0+1
.975e		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9760						_ScanLoop:
.9760		b1 30		lda ($30),y			lda 	(codePtr),y
.9762		c8		iny				iny
.9763		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9765		d0 0e		bne $9775			bne 	_ScanGoNext
.9767		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9769		f0 04		beq $976f			beq 	_ScanMatch
.976b		c5 37		cmp $37				cmp 	zTemp0+1
.976d		d0 06		bne $9775			bne 	_ScanGoNext
.976f						_ScanMatch:
.976f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9771		d0 01		bne $9774			bne 	_ScanNotEndEOL
.9773		88		dey				dey
.9774						_ScanNotEndEOL:
.9774		60		rts				rts
.9775						_ScanGoNext:
.9775		20 7a 97	jsr $977a			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9778		80 e6		bra $9760			bra 	_ScanLoop
.977a						ScanForwardOne:
.977a		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.977c		90 3e		bcc $97bc			bcc 	_SFWExit
.977e		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9780		90 18		bcc $979a			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9782		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9784		b0 2f		bcs $97b5			bcs 	_ScanSkipData
.9786		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9788		90 32		bcc $97bc			bcc 	_SFWExit 					; if not, ordinary keywords.
.978a		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.978c		b0 2e		bcs $97bc			bcs 	_SFWExit
.978e		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9790		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9792		b0 28		bcs $97bc			bcs 	_SFWExit
.9794		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9796		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9798		80 22		bra $97bc			bra 	_SFWExit
.979a						_ScanSkipOne:
.979a		c8		iny				iny 								; consume the extra one.
.979b		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.979d		d0 1d		bne $97bc			bne 	_SFWExit
.979f		18		clc				clc
.97a0		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.97a2		65 30		adc $30				adc 	codePtr
.97a4		85 30		sta $30				sta 	codePtr
.97a6		90 02		bcc $97aa			bcc 	_CREExit
.97a8		e6 31		inc $31				inc 	codePtr+1 					; carry
.97aa						_CREExit:
.97aa		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.97ac		b2 30		lda ($30)			lda 	(codePtr)
.97ae		d0 0c		bne $97bc			bne 	_SFWExit 					; if not zero, more to scan
.97b0		a9 13		lda #$13		lda	#19
.97b2		4c 18 98	jmp $9818		jmp	ErrorHandler
.97b5						_ScanSkipData:
.97b5		88		dey				dey 								; point at data token
.97b6		c8		iny				iny 								; point to offset
.97b7		98		tya				tya 								; A = offset position
.97b8		38		sec				sec 								; add size +1 hence SEC
.97b9		71 30		adc ($30),y			adc 	(codePtr),y
.97bb		a8		tay				tay 								; make current position.
.97bc						_SFWExit:
.97bc		60		rts				rts
.97bd						ScanGetCurrentLineStep:
.97bd		64 38		stz $38				stz 	zTemp1
.97bf		a0 03		ldy #$03			ldy 	#3
.97c1						_SGCLSLoop:
.97c1		b1 30		lda ($30),y			lda 	(codePtr),y
.97c3		c8		iny				iny
.97c4		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.97c6		f0 05		beq $97cd			beq 	_SGCLSExit
.97c8		20 7a 97	jsr $977a			jsr 	ScanForwardOne
.97cb		80 f4		bra $97c1			bra 	_SGCLSLoop
.97cd						_SGCLSExit:
.97cd		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.97cf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.97d0						Command_WHILE:
.97d0		5a		phy				phy 								; save position of the test
.97d1		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.97d3		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber
.97d6		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; check if zero
.97d9		f0 0e		beq $97e9			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.97db		98		tya				tya 								; position *after* test.
.97dc		7a		ply				ply 								; restore position before test, at WHILE
.97dd		88		dey				dey 								; so we execute the WHILE command again.
.97de		48		pha				pha 								; push after test on the stack
.97df		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.97e1		20 91 b0	jsr $b091			jsr 	StackOpen
.97e4		20 d6 b0	jsr $b0d6			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.97e7		7a		ply				ply 								; restore the position *after* the test
.97e8		60		rts				rts
.97e9						_WHExitLoop:
.97e9		68		pla				pla 								; throw post loop position
.97ea		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.97ec		aa		tax				tax
.97ed		20 5a 97	jsr $975a			jsr 	ScanForward
.97f0		60		rts				rts
.97f1						Command_WEND:
.97f1		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.97f3		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.97f5		20 be b0	jsr $b0be			jsr 	StackCheckFrame
.97f8		20 e7 b0	jsr $b0e7			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.97fb		20 b0 b0	jsr $b0b0			jsr 	StackClose		 			; erase the frame
.97fe		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.97ff						CheckRightBracket:
.97ff		b1 30		lda ($30),y			lda 	(codePtr),y
.9801		c8		iny				iny
.9802		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9804		d0 0f		bne $9815			bne 	CNAFail
.9806		60		rts				rts
.9807						CheckComma:
.9807		b1 30		lda ($30),y			lda 	(codePtr),y
.9809		c8		iny				iny
.980a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.980c		d0 07		bne $9815			bne 	CNAFail
.980e		60		rts				rts
.980f						CheckNextA:
.980f		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9811		d0 02		bne $9815			bne 	CNAFail
.9813		c8		iny				iny 								; skip character
.9814		60		rts				rts 								; and exit
.9815						CNAFail:
.9815		4c 17 aa	jmp $aa17			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9818						ErrorHandler:
.9818		a8		tay				tay 								; find the error text
.9819		f0 49		beq $9864			beq 	_EHEnd
.981b		a2 00		ldx #$00			ldx 	#0
.981d		a9 30		lda #$30			lda 	#((ErrorText) & $FF)
.981f		85 36		sta $36				sta 	0+zTemp0
.9821		a9 aa		lda #$aa			lda 	#((ErrorText) >> 8)
.9823		85 37		sta $37				sta 	1+zTemp0
.9825						_EHFind:
.9825		88		dey				dey 								; keep looking through text
.9826		f0 0e		beq $9836			beq 	_EHFound
.9828						_EHFindZero:
.9828		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.982a		e6 36		inc $36				inc 	zTemp0
.982c		d0 02		bne $9830			bne 	_EHFNoCarry
.982e		e6 37		inc $37				inc 	zTemp0+1
.9830						_EHFNoCarry:
.9830		c9 00		cmp #$00			cmp 	#0
.9832		d0 f4		bne $9828			bne 	_EHFindZero
.9834		80 ef		bra $9825			bra 	_EHFind
.9836						_EHFound:
.9836		a5 36		lda $36				lda 	zTemp0 						; print message
.9838		a6 37		ldx $37				ldx 	zTemp0+1
.983a		20 71 98	jsr $9871			jsr 	PrintStringXA
.983d		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.983f		b1 30		lda ($30),y			lda 	(codePtr),y
.9841		d0 05		bne $9848			bne 	_EHAtMsg
.9843		c8		iny				iny
.9844		b1 30		lda ($30),y			lda 	(codePtr),y
.9846		f0 17		beq $985f			beq 	_EHCREnd
.9848						_EHAtMsg:
.9848		a2 98		ldx #$98			ldx 	#_AtMsg >> 8 				; print " at "
.984a		a9 67		lda #$67			lda 	#_AtMsg & $FF
.984c		20 71 98	jsr $9871			jsr 	PrintStringXA
.984f		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9851		b1 30		lda ($30),y			lda 	(codePtr),y
.9853		48		pha				pha
.9854		c8		iny				iny
.9855		b1 30		lda ($30),y			lda 	(codePtr),y
.9857		aa		tax				tax
.9858		68		pla				pla
.9859		20 87 9c	jsr $9c87			jsr 	ConvertInt16 				; convert XA to string
.985c		20 71 98	jsr $9871			jsr 	PrintStringXA 				; and print it.
.985f						_EHCREnd:
.985f		a9 0d		lda #$0d			lda 	#13 						; new line
.9861		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9864						_EHEnd:
.9864		4c 8d 86	jmp $868d			jmp 	WarmStart
>9867		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>986f		20 00
.9871						PrintStringXA:
.9871		5a		phy				phy
.9872		86 37		stx $37				stx 	zTemp0+1
.9874		85 36		sta $36				sta 	zTemp0
.9876		a0 00		ldy #$00			ldy 	#0
.9878						_PSXALoop:
.9878		b1 36		lda ($36),y			lda 	(zTemp0),y
.987a		f0 06		beq $9882			beq 	_PSXAExit
.987c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.987f		c8		iny				iny
.9880		80 f6		bra $9878			bra 	_PSXALoop
.9882						_PSXAExit:
.9882		7a		ply				ply
.9883		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9884						UnaryTrue:
.9884		fa		plx				plx
.9885						ReturnTrue:
.9885		a9 01		lda #$01			lda 	#1  						; set to 1
.9887		20 74 a7	jsr $a774			jsr 	NSMSetByte
.988a		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.988c		95 50		sta $50,x			sta 	NSStatus,x
.988e		60		rts				rts
.988f						UnaryFalse:
.988f		fa		plx				plx
.9890						ReturnFalse:
.9890		4c 72 a7	jmp $a772			jmp 	NSMSetZero 					; set it all to zero
.9893						BinaryCompareEqual:
.9893		fa		plx				plx
.9894		20 cf 98	jsr $98cf			jsr 	CompareBaseCode
.9897		c9 00		cmp #$00			cmp 	#0
.9899		f0 ea		beq $9885			beq 	ReturnTrue
.989b		80 f3		bra $9890			bra 	ReturnFalse
.989d						BinaryCompareLess:
.989d		fa		plx				plx
.989e		20 cf 98	jsr $98cf			jsr 	CompareBaseCode
.98a1		c9 ff		cmp #$ff			cmp 	#$FF
.98a3		f0 e0		beq $9885			beq 	ReturnTrue
.98a5		80 e9		bra $9890			bra 	ReturnFalse
.98a7						BinaryCompareGreater:
.98a7		fa		plx				plx
.98a8		20 cf 98	jsr $98cf			jsr 	CompareBaseCode
.98ab		c9 01		cmp #$01			cmp 	#1
.98ad		f0 d6		beq $9885			beq 	ReturnTrue
.98af		80 df		bra $9890			bra 	ReturnFalse
.98b1						BinaryCompareNotEqual:
.98b1		fa		plx				plx
.98b2		20 cf 98	jsr $98cf			jsr 	CompareBaseCode
.98b5		c9 00		cmp #$00			cmp 	#0
.98b7		d0 cc		bne $9885			bne 	ReturnTrue
.98b9		80 d5		bra $9890			bra 	ReturnFalse
.98bb						BinaryCompareLessEqual:
.98bb		fa		plx				plx
.98bc		20 cf 98	jsr $98cf			jsr 	CompareBaseCode
.98bf		c9 01		cmp #$01			cmp 	#1
.98c1		d0 c2		bne $9885			bne 	ReturnTrue
.98c3		80 cb		bra $9890			bra 	ReturnFalse
.98c5						BinaryCompareGreaterEqual:
.98c5		fa		plx				plx
.98c6		20 cf 98	jsr $98cf			jsr 	CompareBaseCode
.98c9		c9 ff		cmp #$ff			cmp 	#$FF
.98cb		d0 b8		bne $9885			bne 	ReturnTrue
.98cd		80 c1		bra $9890			bra 	ReturnFalse
.98cf						CompareBaseCode:
.98cf		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; make both values if references.
.98d2		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.98d4		15 51		ora $51,x			ora 	NSStatus+1,x
.98d6		29 10		and #$10			and 	#NSTString
.98d8		d0 37		bne $9911			bne 	_CBCString 					; if so do string code, which will check if both.
.98da		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.98dc		15 79		ora $79,x			ora 	NSExponent+1,x
.98de		d0 34		bne $9914			bne 	_CBCFloat
.98e0		b5 50		lda $50,x			lda 	NSStatus,x
.98e2		15 51		ora $51,x			ora 	NSStatus+1,x
.98e4		29 08		and #$08			and 	#NSTFloat
.98e6		d0 2c		bne $9914			bne 	_CBCFloat
.98e8		20 17 99	jsr $9917			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.98eb		e8		inx				inx
.98ec		20 17 99	jsr $9917			jsr 	CompareFixMinusZero
.98ef		ca		dex				dex
.98f0		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.98f2		55 51		eor $51,x			eor 	NSStatus+1,x
.98f4		10 0a		bpl $9900			bpl 	_CDCSameSign
.98f6		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.98f8		30 14		bmi $990e			bmi 	_CBCLess 					; return $FF
.98fa						_CBCGreater:
.98fa		a9 01		lda #$01			lda 	#1
.98fc		60		rts				rts
.98fd						_CBCEqual:
.98fd		a9 00		lda #$00			lda 	#0
.98ff		60		rts				rts
.9900						_CDCSameSign:
.9900		20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; unsigned subtract
.9903		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; or the mantissa together
.9906		f0 f5		beq $98fd			beq 	_CBCEqual 					; -0 == 0
.9908		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.990a		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.990c		10 ec		bpl $98fa			bpl 	_CBCGreater
.990e						_CBCLess:
.990e		a9 ff		lda #$ff			lda 	#$FF
.9910		60		rts				rts
.9911						_CBCString:
.9911		4c 9d 9a	jmp $9a9d			jmp 	CompareStrings
.9914						_CBCFloat:
.9914		4c e7 9d	jmp $9de7			jmp 	CompareFloat
.9917						CompareFixMinusZero:
.9917		20 94 a7	jsr $a794			jsr 	NSMIsZero
.991a		d0 02		bne $991e			bne 	_CFXMZNotZero
.991c		74 50		stz $50,x			stz 	NSStatus,x
.991e						_CFXMZNotZero:
.991e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.991f						StringConcat:
.991f		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9921		35 51		and $51,x			and 	NSStatus+1,x
.9923		29 18		and #$18			and 	#NSBTypeMask
.9925		c9 10		cmp #$10			cmp 	#NSTString
.9927		d0 50		bne $9979			bne		_SCType
.9929		64 38		stz $38				stz 	zTemp1 						; counting total length
.992b		e8		inx				inx
.992c		20 4a 99	jsr $994a			jsr 	_SCSetupZ0 					; setup for second
.992f		20 53 99	jsr $9953			jsr 	_SCLengthZ0 				; length for second
.9932		ca		dex				dex
.9933		20 4a 99	jsr $994a			jsr 	_SCSetupZ0 					; setup for first
.9936		20 53 99	jsr $9953			jsr 	_SCLengthZ0 				; length for first
.9939		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.993b		20 81 b1	jsr $b181			jsr 	StringTempAllocate
.993e		20 6a 99	jsr $996a			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9941		e8		inx				inx
.9942		20 4a 99	jsr $994a			jsr 	_SCSetupZ0 					; copy second out
.9945		20 6a 99	jsr $996a			jsr 	_SCCopy
.9948		ca		dex				dex
.9949		60		rts				rts
.994a						_SCSetupZ0:
.994a		b5 58		lda $58,x			lda 	NSMantissa0,x
.994c		85 36		sta $36				sta 	zTemp0
.994e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9950		85 37		sta $37				sta 	zTemp0+1
.9952		60		rts				rts
.9953						_SCLengthZ0:
.9953		5a		phy				phy
.9954		a0 00		ldy #$00			ldy 	#0
.9956						_SCLenLoop:
.9956		b1 36		lda ($36),y			lda 	(zTemp0),y
.9958		f0 0e		beq $9968			beq 	_SCLExit
.995a		c8		iny				iny
.995b		e6 38		inc $38				inc 	zTemp1
.995d		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.995f		c9 fd		cmp #$fd			cmp 	#253
.9961		d0 f3		bne $9956			bne		_SCLenLoop
.9963		a9 09		lda #$09		lda	#9
.9965		4c 18 98	jmp $9818		jmp	ErrorHandler
.9968						_SCLExit:
.9968		7a		ply				ply
.9969		60		rts				rts
.996a						_SCCopy:
.996a		5a		phy				phy
.996b		a0 00		ldy #$00			ldy 	#0
.996d						_SCCopyLoop:
.996d		b1 36		lda ($36),y			lda 	(zTemp0),y
.996f		f0 06		beq $9977			beq 	_SCCExit
.9971		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.9974		c8		iny				iny
.9975		80 f6		bra $996d			bra 	_SCCopyLoop
.9977						_SCCExit:
.9977		7a		ply				ply
.9978		60		rts				rts
.9979						_SCType:
.9979		4c 21 aa	jmp $aa21			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.997c						IntegerDivide:
.997c		fa		plx				plx
.997d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.997f		15 51		ora $51,x			ora 	NSStatus+1,x
.9981		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9982		0a		asl a				asl 	a
.9983		10 05		bpl $998a			bpl 	_NotRef
.9985		48		pha				pha
.9986		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9989		68		pla				pla
.998a						_NotRef:
.998a		0a		asl a				asl 	a
.998b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.998d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.998f		15 79		ora $79,x			ora 	NSExponent+1,x
.9991		f0 03		beq $9996			beq 	_IntegerCode 				; if clear, then we have two integers
.9993		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.9996						_IntegerCode:
.9996		20 b0 99	jsr $99b0			jsr 	CheckDivideZero 			; do div zero check
.9999		20 e2 99	jsr $99e2			jsr 	Int32Divide 				; do the division
.999c		20 93 9a	jsr $9a93			jsr 	CalculateSign 				; calculate result sign
.999f						NSMCopyPlusTwoToZero:
.999f		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.99a1		95 58		sta $58,x			sta 	NSMantissa0,x
.99a3		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.99a5		95 60		sta $60,x			sta 	NSMantissa1,x
.99a7		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.99a9		95 68		sta $68,x			sta 	NSMantissa2,x
.99ab		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.99ad		95 70		sta $70,x			sta 	NSMantissa3,x
.99af		60		rts				rts
.99b0						CheckDivideZero:
.99b0		e8		inx				inx
.99b1		20 94 a7	jsr $a794			jsr 	NSMIsZero
.99b4		f0 02		beq $99b8			beq 	_CDVError
.99b6		ca		dex				dex
.99b7		60		rts				rts
.99b8						_CDVError:
.99b8		a9 03		lda #$03		lda	#3
.99ba		4c 18 98	jmp $9818		jmp	ErrorHandler
.99bd						IntegerModulus:
.99bd		fa		plx				plx
.99be		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99c0		15 51		ora $51,x			ora 	NSStatus+1,x
.99c2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99c3		0a		asl a				asl 	a
.99c4		10 05		bpl $99cb			bpl 	_NotRef
.99c6		48		pha				pha
.99c7		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99ca		68		pla				pla
.99cb						_NotRef:
.99cb		0a		asl a				asl 	a
.99cc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99ce		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99d0		15 79		ora $79,x			ora 	NSExponent+1,x
.99d2		f0 03		beq $99d7			beq 	_IntegerCode 				; if clear, then we have two integers
.99d4		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.99d7						_IntegerCode:
.99d7						IntegerModulusNoCheck:
.99d7		20 b0 99	jsr $99b0			jsr 	CheckDivideZero 			; do div zero check
.99da		20 e2 99	jsr $99e2			jsr 	Int32Divide 				; do the division
.99dd		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.99df		56 50		lsr $50,x			lsr 	NSStatus,x
.99e1		60		rts				rts
.99e2						Int32Divide:
.99e2		48		pha				pha 								; save AXY
.99e3		5a		phy				phy
.99e4		20 55 a7	jsr $a755			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99e7		20 6e a7	jsr $a76e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.99ea		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.99ec						_I32DivideLoop:
.99ec		e8		inx				inx
.99ed		e8		inx				inx
.99ee		20 81 a7	jsr $a781			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.99f1		ca		dex				dex
.99f2		ca		dex				dex
.99f3		20 82 a7	jsr $a782			jsr 	NSMRotateLeft
.99f6		20 21 9a	jsr $9a21			jsr 	DivideCheckSubtract 		; check if subtract possible
.99f9		90 02		bcc $99fd			bcc 	_I32DivideNoCarryIn
.99fb		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.99fd						_I32DivideNoCarryIn:
.99fd		88		dey				dey 								; loop round till division completed.
.99fe		d0 ec		bne $99ec			bne 	_I32DivideLoop
.9a00		7a		ply				ply 								; restore AXY and exit
.9a01		68		pla				pla
.9a02		60		rts				rts
.9a03						Int32ShiftDivide:
.9a03		48		pha				pha 								; save AY
.9a04		5a		phy				phy
.9a05		e8		inx				inx 								; clear S[X+2]
.9a06		e8		inx				inx
.9a07		20 72 a7	jsr $a772			jsr 	NSMSetZero
.9a0a		ca		dex				dex
.9a0b		ca		dex				dex
.9a0c		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9a0e						_I32SDLoop:
.9a0e		20 21 9a	jsr $9a21			jsr 	DivideCheckSubtract 		; check if subtract possible
.9a11		e8		inx				inx
.9a12		e8		inx				inx
.9a13		20 82 a7	jsr $a782			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9a16		ca		dex				dex
.9a17		ca		dex				dex
.9a18		20 82 a7	jsr $a782			jsr 	NSMRotateLeft
.9a1b		88		dey				dey 	 							; do 31 times
.9a1c		d0 f0		bne $9a0e			bne 	_I32SDLoop
.9a1e		7a		ply				ply 								; restore AY and exit
.9a1f		68		pla				pla
.9a20		60		rts				rts
.9a21						DivideCheckSubtract:
.9a21		20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9a24		b0 04		bcs $9a2a			bcs 	_DCSExit 					; if carry set, then could do, exit
.9a26		20 12 9b	jsr $9b12			jsr 	AddTopTwoStack 				; add it back in
.9a29		18		clc				clc 								; and return False
.9a2a						_DCSExit:
.9a2a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9a2b						MulInteger:
.9a2b		fa		plx				plx
.9a2c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a2e		15 51		ora $51,x			ora 	NSStatus+1,x
.9a30		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a31		0a		asl a				asl 	a
.9a32		10 05		bpl $9a39			bpl 	_NotRef
.9a34		48		pha				pha
.9a35		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a38		68		pla				pla
.9a39						_NotRef:
.9a39		0a		asl a				asl 	a 							; put MSB of type into A:7
.9a3a		30 09		bmi $9a45			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a3c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a3e		15 79		ora $79,x			ora 	NSExponent+1,x
.9a40		f0 06		beq $9a48			beq 	_IntegerCode 				; if clear, then we have two integers
.9a42		4c a9 9e	jmp $9ea9			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9a45						_StringData:
.9a45		4c 2b aa	jmp $aa2b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9a48						_IntegerCode:
.9a48		20 55 9a	jsr $9a55			jsr 	MultiplyShort
.9a4b		c9 00		cmp #$00			cmp 	#0
.9a4d		f0 05		beq $9a54			beq 	_MIExit
.9a4f		a9 04		lda #$04		lda	#4
.9a51		4c 18 98	jmp $9818		jmp	ErrorHandler
.9a54						_MIExit:
.9a54		60		rts				rts
.9a55						MultiplyShort:
.9a55		5a		phy				phy 								; save Y
.9a56		20 55 a7	jsr $a755			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9a59		20 6e a7	jsr $a76e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9a5c		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9a5e						_I32MLoop:
.9a5e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9a60		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9a62		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9a64		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9a66		f0 25		beq $9a8d			beq 	_I32MExit 					; exit if zero
.9a68		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a6a		29 01		and #$01			and 	#1
.9a6c		f0 0d		beq $9a7b			beq 	_I32MNoAdd
.9a6e		20 12 9b	jsr $9b12			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a71		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a73		10 06		bpl $9a7b			bpl 	_I32MNoAdd
.9a75						_I32ShiftRight:
.9a75		20 8b a7	jsr $a78b			jsr 	NSMShiftRight 				; shift S[X] right
.9a78		c8		iny				iny 								; increment shift count
.9a79		80 09		bra $9a84			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a7b						_I32MNoAdd:
.9a7b		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a7d		70 f6		bvs $9a75			bvs 	_I32ShiftRight 				; instead.
.9a7f		e8		inx				inx
.9a80		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a83		ca		dex				dex
.9a84						_I32MShiftUpper:
.9a84		e8		inx				inx 								; shift S[X+2] right
.9a85		e8		inx				inx
.9a86		20 8b a7	jsr $a78b			jsr 	NSMShiftRight
.9a89		ca		dex				dex
.9a8a		ca		dex				dex
.9a8b		80 d1		bra $9a5e			bra 	_I32MLoop 					; try again.
.9a8d						_I32MExit:
.9a8d		20 93 9a	jsr $9a93			jsr 	CalculateSign
.9a90		98		tya				tya 								; shift in A
.9a91		7a		ply				ply 								; restore Y and exit
.9a92		60		rts				rts
.9a93						CalculateSign:
.9a93		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a95		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9a97		55 51		eor $51,x			eor 	NSStatus+1,x
.9a99		0a		asl a				asl 	a 							; shift bit 7 into carry
.9a9a		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9a9c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a9d						CompareStrings:
.9a9d		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9a9f		35 51		and $51,x			and 	NSStatus+1,x
.9aa1		29 10		and #$10			and 	#NSBIsString
.9aa3		f0 28		beq $9acd			beq 	_CSTypeError
.9aa5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9aa7		85 36		sta $36				sta 	zTemp0
.9aa9		b5 60		lda $60,x			lda 	NSMantissa1,x
.9aab		85 37		sta $37				sta 	zTemp0+1
.9aad		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9aaf		85 38		sta $38				sta 	zTemp1
.9ab1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ab3		85 39		sta $39				sta 	zTemp1+1
.9ab5		5a		phy				phy 								; save Y so we can access strings
.9ab6		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9ab8						_CSLoop:
.9ab8		c8		iny				iny
.9ab9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9abb		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9abd		d0 06		bne $9ac5			bne 	_CSDifferent
.9abf		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9ac1		d0 f5		bne $9ab8			bne 	_CSLoop 					; still comparing
.9ac3						_CSExit:
.9ac3		7a		ply				ply 								; reached end, return zero in A from EOS
.9ac4		60		rts				rts
.9ac5						_CSDifferent:
.9ac5		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9ac7		90 fa		bcc $9ac3			bcc		_CSExit
.9ac9		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9acb		80 f6		bra $9ac3			bra 	_CSExit
.9acd						_CSTypeError:
.9acd		4c 21 aa	jmp $aa21			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9ad0						ShiftLeft:
.9ad0		38		sec				sec 								; common code, carry determines which way.
.9ad1		80 01		bra $9ad4			bra 	ShiftMain
.9ad3						ShiftRight:
.9ad3		18		clc				clc
.9ad4						ShiftMain:
.9ad4		fa		plx				plx 								; restore X
.9ad5		08		php				php 								; save direction
.9ad6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ad8		15 51		ora $51,x			ora 	NSStatus+1,x
.9ada		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9adb		0a		asl a				asl 	a
.9adc		10 05		bpl $9ae3			bpl 	_NotRef
.9ade		48		pha				pha
.9adf		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ae2		68		pla				pla
.9ae3						_NotRef:
.9ae3		0a		asl a				asl 	a
.9ae4		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ae6		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ae8		15 79		ora $79,x			ora 	NSExponent+1,x
.9aea		f0 03		beq $9aef			beq 	_IntegerCode 				; if clear, then we have two integers
.9aec		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.9aef						_IntegerCode:
.9aef		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9af1		29 e0		and #$e0			and 	#$E0
.9af3		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9af5		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9af7		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9af9		d0 12		bne $9b0d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9afb						_SMLoop:
.9afb		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9afd		30 11		bmi $9b10			bmi 	_SMExit 					; exit if done.
.9aff		28		plp				plp 								; restore direction setting
.9b00		08		php				php
.9b01		90 05		bcc $9b08			bcc 	_SMRight
.9b03		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; shift left if CS
.9b06		80 f3		bra $9afb			bra 	_SMLoop
.9b08						_SMRight:
.9b08		20 8b a7	jsr $a78b			jsr 	NSMShiftRight 				; shift right if CC
.9b0b		80 ee		bra $9afb			bra 	_SMLoop
.9b0d						_SMExit0:
.9b0d		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; return zero.
.9b10						_SMExit:
.9b10		28		plp				plp 								; throw direction
.9b11		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9b12						AddTopTwoStack:
.9b12		18		clc				clc
.9b13		b5 58		lda $58,x			lda		NSMantissa0,x
.9b15		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9b17		95 58		sta $58,x			sta 	NSMantissa0,x
.9b19		b5 60		lda $60,x			lda		NSMantissa1,x
.9b1b		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9b1d		95 60		sta $60,x			sta 	NSMantissa1,x
.9b1f		b5 68		lda $68,x			lda		NSMantissa2,x
.9b21		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9b23		95 68		sta $68,x			sta 	NSMantissa2,x
.9b25		b5 70		lda $70,x			lda		NSMantissa3,x
.9b27		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9b29		95 70		sta $70,x			sta 	NSMantissa3,x
.9b2b		60		rts				rts
.9b2c						SubTopTwoStack:
.9b2c		38		sec				sec
.9b2d		b5 58		lda $58,x			lda		NSMantissa0,x
.9b2f		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9b31		95 58		sta $58,x			sta 	NSMantissa0,x
.9b33		b5 60		lda $60,x			lda		NSMantissa1,x
.9b35		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9b37		95 60		sta $60,x			sta 	NSMantissa1,x
.9b39		b5 68		lda $68,x			lda		NSMantissa2,x
.9b3b		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9b3d		95 68		sta $68,x			sta 	NSMantissa2,x
.9b3f		b5 70		lda $70,x			lda		NSMantissa3,x
.9b41		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9b43		95 70		sta $70,x			sta 	NSMantissa3,x
.9b45		60		rts				rts
.9b46						AddInteger:
.9b46		fa		plx				plx
.9b47		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b49		15 51		ora $51,x			ora 	NSStatus+1,x
.9b4b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b4c		0a		asl a				asl 	a
.9b4d		10 05		bpl $9b54			bpl 	_NotRef
.9b4f		48		pha				pha
.9b50		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b53		68		pla				pla
.9b54						_NotRef:
.9b54		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b55		30 09		bmi $9b60			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b57		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b59		15 79		ora $79,x			ora 	NSExponent+1,x
.9b5b		f0 06		beq $9b63			beq 	_IntegerCode 				; if clear, then we have two integers
.9b5d		4c 59 9d	jmp $9d59			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b60						_StringData:
.9b60		4c 1f 99	jmp $991f			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b63						_IntegerCode:
.9b63						AddCode:
.9b63		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b65		55 51		eor $51,x			eor 	NSStatus+1,x
.9b67		10 a9		bpl $9b12			bpl 	AddTopTwoStack
.9b69		20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b6c		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b6e		10 07		bpl $9b77			bpl 	_AddExit
.9b70		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b72		95 50		sta $50,x			sta 	NSStatus,x
.9b74		20 3b a7	jsr $a73b			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b77						_AddExit:
.9b77		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; check for -0
.9b7a		d0 02		bne $9b7e			bne 	_AddNonZero
.9b7c		74 50		stz $50,x			stz 	NSStatus,x
.9b7e						_AddNonZero:
.9b7e		60		rts				rts
.9b7f						SubInteger:
.9b7f		fa		plx				plx
.9b80		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b82		15 51		ora $51,x			ora 	NSStatus+1,x
.9b84		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b85		0a		asl a				asl 	a
.9b86		10 05		bpl $9b8d			bpl 	_NotRef
.9b88		48		pha				pha
.9b89		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b8c		68		pla				pla
.9b8d						_NotRef:
.9b8d		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b8e		30 09		bmi $9b99			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b90		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b92		15 79		ora $79,x			ora 	NSExponent+1,x
.9b94		f0 06		beq $9b9c			beq 	_IntegerCode 				; if clear, then we have two integers
.9b96		4c 5e 9d	jmp $9d5e			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b99						_StringData:
.9b99		4c 2b aa	jmp $aa2b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b9c						_IntegerCode:
.9b9c		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9b9e		49 80		eor #$80			eor 	#$80
.9ba0		95 51		sta $51,x			sta 	NSStatus+1,x
.9ba2		80 bf		bra $9b63			bra 	AddCode 					; and do the same code as add.
.9ba4						AndInteger:
.9ba4		fa		plx				plx
.9ba5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ba7		15 51		ora $51,x			ora 	NSStatus+1,x
.9ba9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9baa		0a		asl a				asl 	a
.9bab		10 05		bpl $9bb2			bpl 	_NotRef
.9bad		48		pha				pha
.9bae		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bb1		68		pla				pla
.9bb2						_NotRef:
.9bb2		0a		asl a				asl 	a
.9bb3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bb5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bb7		15 79		ora $79,x			ora 	NSExponent+1,x
.9bb9		f0 03		beq $9bbe			beq 	_IntegerCode 				; if clear, then we have two integers
.9bbb		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.9bbe						_IntegerCode:
.9bbe		b5 58		lda $58,x			lda		NSMantissa0,x
.9bc0		35 59		and $59,x			and 		NSMantissa0+1,x
.9bc2		95 58		sta $58,x			sta 	NSMantissa0,x
.9bc4		b5 60		lda $60,x			lda		NSMantissa1,x
.9bc6		35 61		and $61,x			and 		NSMantissa1+1,x
.9bc8		95 60		sta $60,x			sta 	NSMantissa1,x
.9bca		b5 68		lda $68,x			lda		NSMantissa2,x
.9bcc		35 69		and $69,x			and 		NSMantissa2+1,x
.9bce		95 68		sta $68,x			sta 	NSMantissa2,x
.9bd0		b5 70		lda $70,x			lda		NSMantissa3,x
.9bd2		35 71		and $71,x			and 		NSMantissa3+1,x
.9bd4		95 70		sta $70,x			sta 	NSMantissa3,x
.9bd6		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9bd8		60		rts				rts
.9bd9						OraInteger:
.9bd9		fa		plx				plx
.9bda		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bdc		15 51		ora $51,x			ora 	NSStatus+1,x
.9bde		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bdf		0a		asl a				asl 	a
.9be0		10 05		bpl $9be7			bpl 	_NotRef
.9be2		48		pha				pha
.9be3		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9be6		68		pla				pla
.9be7						_NotRef:
.9be7		0a		asl a				asl 	a
.9be8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bea		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bec		15 79		ora $79,x			ora 	NSExponent+1,x
.9bee		f0 03		beq $9bf3			beq 	_IntegerCode 				; if clear, then we have two integers
.9bf0		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.9bf3						_IntegerCode:
.9bf3		b5 58		lda $58,x			lda		NSMantissa0,x
.9bf5		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9bf7		95 58		sta $58,x			sta 	NSMantissa0,x
.9bf9		b5 60		lda $60,x			lda		NSMantissa1,x
.9bfb		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9bfd		95 60		sta $60,x			sta 	NSMantissa1,x
.9bff		b5 68		lda $68,x			lda		NSMantissa2,x
.9c01		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9c03		95 68		sta $68,x			sta 	NSMantissa2,x
.9c05		b5 70		lda $70,x			lda		NSMantissa3,x
.9c07		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9c09		95 70		sta $70,x			sta 	NSMantissa3,x
.9c0b		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9c0d		60		rts				rts
.9c0e						EorInteger:
.9c0e		fa		plx				plx
.9c0f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c11		15 51		ora $51,x			ora 	NSStatus+1,x
.9c13		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c14		0a		asl a				asl 	a
.9c15		10 05		bpl $9c1c			bpl 	_NotRef
.9c17		48		pha				pha
.9c18		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c1b		68		pla				pla
.9c1c						_NotRef:
.9c1c		0a		asl a				asl 	a
.9c1d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c1f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c21		15 79		ora $79,x			ora 	NSExponent+1,x
.9c23		f0 03		beq $9c28			beq 	_IntegerCode 				; if clear, then we have two integers
.9c25		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.9c28						_IntegerCode:
.9c28		b5 58		lda $58,x			lda		NSMantissa0,x
.9c2a		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9c2c		95 58		sta $58,x			sta 	NSMantissa0,x
.9c2e		b5 60		lda $60,x			lda		NSMantissa1,x
.9c30		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9c32		95 60		sta $60,x			sta 	NSMantissa1,x
.9c34		b5 68		lda $68,x			lda		NSMantissa2,x
.9c36		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9c38		95 68		sta $68,x			sta 	NSMantissa2,x
.9c3a		b5 70		lda $70,x			lda		NSMantissa3,x
.9c3c		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9c3e		95 70		sta $70,x			sta 	NSMantissa3,x
.9c40		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9c42		60		rts				rts
.9c43						WordIndirect:
.9c43		fa		plx				plx
.9c44		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c46		15 51		ora $51,x			ora 	NSStatus+1,x
.9c48		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c49		0a		asl a				asl 	a
.9c4a		10 05		bpl $9c51			bpl 	_NotRef
.9c4c		48		pha				pha
.9c4d		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c50		68		pla				pla
.9c51						_NotRef:
.9c51		0a		asl a				asl 	a
.9c52		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c54		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c56		15 79		ora $79,x			ora 	NSExponent+1,x
.9c58		f0 03		beq $9c5d			beq 	_IntegerCode 				; if clear, then we have two integers
.9c5a		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.9c5d						_IntegerCode:
.9c5d		20 63 9b	jsr $9b63			jsr 	AddCode 					; add the two values
.9c60		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c62		95 50		sta $50,x			sta 	NSStatus,x
.9c64		60		rts				rts
.9c65						ByteIndirect:
.9c65		fa		plx				plx
.9c66		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c68		15 51		ora $51,x			ora 	NSStatus+1,x
.9c6a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c6b		0a		asl a				asl 	a
.9c6c		10 05		bpl $9c73			bpl 	_NotRef
.9c6e		48		pha				pha
.9c6f		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c72		68		pla				pla
.9c73						_NotRef:
.9c73		0a		asl a				asl 	a
.9c74		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c76		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c78		15 79		ora $79,x			ora 	NSExponent+1,x
.9c7a		f0 03		beq $9c7f			beq 	_IntegerCode 				; if clear, then we have two integers
.9c7c		4c 21 aa	jmp $aa21			jmp 	TypeError 					; anything else, type mismatch.
.9c7f						_IntegerCode:
.9c7f		20 63 9b	jsr $9b63			jsr 	AddCode 					; add the two values
.9c82		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9c84		95 50		sta $50,x			sta 	NSStatus,x
.9c86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9c87						ConvertInt16:
.9c87		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9c89		86 60		stx $60				stx 	NSMantissa1
.9c8b		64 68		stz $68				stz 	NSMantissa2
.9c8d		64 70		stz $70				stz 	NSMantissa3
.9c8f		64 50		stz $50				stz 	NSStatus 					; positive integer
.9c91		a2 00		ldx #$00			ldx 	#0 							; stack level
.9c93		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9c95		80 00		bra $9c97			bra 	ConvertInt32
.9c97						ConvertInt32:
.9c97		5a		phy				phy
.9c98		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9c9a		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9c9c		10 08		bpl $9ca6			bpl 	_CI32NotNeg
.9c9e		48		pha				pha
.9c9f		a9 2d		lda #$2d			lda 	#'-'
.9ca1		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9ca4		c8		iny				iny
.9ca5		68		pla				pla
.9ca6						_CI32NotNeg:
.9ca6		20 b4 9c	jsr $9cb4			jsr 	_CI32DivideConvert 			; recursive conversion
.9ca9		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9cab		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9cae		7a		ply				ply
.9caf		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9cb1		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9cb3		60		rts				rts
.9cb4						_CI32DivideConvert:
.9cb4		e8		inx				inx 								; write to next slot up
.9cb5		20 74 a7	jsr $a774			jsr 	NSMSetByte 		 			; write the base out.
.9cb8		ca		dex				dex
.9cb9		20 e2 99	jsr $99e2			jsr 	Int32Divide 				; divide
.9cbc		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9cbe		48		pha				pha
.9cbf		20 9f 99	jsr $999f			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9cc2		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; is it zero ?
.9cc5		f0 05		beq $9ccc			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9cc7		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9cc9		20 b4 9c	jsr $9cb4			jsr 	_CI32DivideConvert 			; and recusrively call.
.9ccc						_CI32NoRecurse:
.9ccc		68		pla				pla 								; remainder
.9ccd		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9ccf		90 02		bcc $9cd3			bcc 	_CI32NotHex
.9cd1		69 26		adc #$26			adc 	#6+32
.9cd3						_CI32NotHex:
.9cd3		69 30		adc #$30			adc 	#48
.9cd5		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9cd8		c8		iny				iny
.9cd9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cda						PrecedenceLevel:
>9cda		04					.byte	 4	; $00 <<
>9cdb		02					.byte	 2	; $01 <=
>9cdc		02					.byte	 2	; $02 <>
>9cdd		00					.byte	 0	; $03 !!3
>9cde		00					.byte	 0	; $04 ><
>9cdf		02					.byte	 2	; $05 >=
>9ce0		04					.byte	 4	; $06 >>
>9ce1		00					.byte	 0	; $07 !!7
>9ce2		00					.byte	 0	; $08 !!8
>9ce3		00					.byte	 0	; $09 !!9
>9ce4		00					.byte	 0	; $0a !!10
>9ce5		00					.byte	 0	; $0b !!11
>9ce6		00					.byte	 0	; $0c !!12
>9ce7		00					.byte	 0	; $0d !!13
>9ce8		00					.byte	 0	; $0e !!14
>9ce9		00					.byte	 0	; $0f !!15
>9cea		00					.byte	 0	; $10 @
>9ceb		00					.byte	 0	; $11 !!17
>9cec		00					.byte	 0	; $12 !!18
>9ced		00					.byte	 0	; $13 [
>9cee		04					.byte	 4	; $14 \
>9cef		00					.byte	 0	; $15 ]
>9cf0		01					.byte	 1	; $16 ^
>9cf1		00					.byte	 0	; $17 _
>9cf2		00					.byte	 0	; $18 `
>9cf3		00					.byte	 0	; $19 !!25
>9cf4		00					.byte	 0	; $1a !!26
>9cf5		00					.byte	 0	; $1b {
>9cf6		01					.byte	 1	; $1c |
>9cf7		00					.byte	 0	; $1d }
>9cf8		00					.byte	 0	; $1e ~
>9cf9		00					.byte	 0	; $1f <7F>
>9cfa		00					.byte	 0	; $20
>9cfb		05					.byte	 5	; $21 !
>9cfc		00					.byte	 0	; $22 "
>9cfd		00					.byte	 0	; $23 #
>9cfe		05					.byte	 5	; $24 $
>9cff		04					.byte	 4	; $25 %
>9d00		01					.byte	 1	; $26 &
>9d01		00					.byte	 0	; $27 '
>9d02		00					.byte	 0	; $28 (
>9d03		00					.byte	 0	; $29 )
>9d04		04					.byte	 4	; $2a *
>9d05		03					.byte	 3	; $2b +
>9d06		00					.byte	 0	; $2c ,
>9d07		03					.byte	 3	; $2d -
>9d08		00					.byte	 0	; $2e .
>9d09		04					.byte	 4	; $2f /
>9d0a		00					.byte	 0	; $30 0
>9d0b		00					.byte	 0	; $31 1
>9d0c		00					.byte	 0	; $32 2
>9d0d		00					.byte	 0	; $33 3
>9d0e		00					.byte	 0	; $34 4
>9d0f		00					.byte	 0	; $35 5
>9d10		00					.byte	 0	; $36 6
>9d11		00					.byte	 0	; $37 7
>9d12		00					.byte	 0	; $38 8
>9d13		00					.byte	 0	; $39 9
>9d14		00					.byte	 0	; $3a :
>9d15		00					.byte	 0	; $3b ;
>9d16		02					.byte	 2	; $3c <
>9d17		02					.byte	 2	; $3d =
>9d18		02					.byte	 2	; $3e >
>9d19		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9d1a						EvaluateExpressionAt0:
.9d1a		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d1c						EvaluateExpression:
.9d1c		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d1e						EvaluateExpressionAtPrecedence:
.9d1e		48		pha				pha 								; save precedence level
.9d1f		20 66 a1	jsr $a166			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d22		68		pla				pla 								; restore precedence level.
.9d23						_EXPRLoop:
.9d23		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d25		b1 30		lda ($30),y			lda 	(codePtr),y
.9d27		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d29		b0 25		bcs $9d50			bcs 	_EXPRExit
.9d2b		da		phx				phx 								; read the operator precedence
.9d2c		aa		tax				tax
.9d2d		bd da 9c	lda $9cda,x			lda 	PrecedenceLevel,x
.9d30		fa		plx				plx
.9d31		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d33		f0 1b		beq $9d50			beq 	_EXPRExit
.9d35		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d37		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d39		c5 37		cmp $37				cmp 	zTemp0+1
.9d3b		b0 13		bcs $9d50			bcs		_EXPRExit 					; if current >= operator exit
.9d3d		48		pha				pha 								; save current precedence.
.9d3e		b1 30		lda ($30),y			lda 	(codePtr),y
.9d40		c8		iny				iny
.9d41		48		pha				pha
.9d42		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d44		e8		inx				inx 								; work out the right hand side.
.9d45		20 1e 9d	jsr $9d1e			jsr 	EvaluateExpressionAtPrecedence
.9d48		ca		dex				dex
.9d49		68		pla				pla 								; get operator, call the code.
.9d4a		20 53 9d	jsr $9d53			jsr 	_EXPRCaller
.9d4d		68		pla				pla 								; restore precedence level
.9d4e		80 d3		bra $9d23			bra 	_EXPRLoop 					; and go round.
.9d50						_EXPRExit:
.9d50		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d52		60		rts				rts
.9d53						_EXPRCaller:
.9d53		da		phx				phx 								; save on stack, first thing is to restore it
.9d54		0a		asl a				asl 	a 							; double so can use vectors into X
.9d55		aa		tax				tax
.9d56		7c 68 94	jmp ($9468,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9d59						FloatingPointAdd:
.9d59		20 cf 9e	jsr $9ecf			jsr 	FloatPrepare 				; prepare for floats
.9d5c		80 09		bra $9d67			bra 	FloatAdd
.9d5e						FloatingPointSub:
.9d5e		20 cf 9e	jsr $9ecf			jsr 	FloatPrepare 				; prepare for floats
.9d61						FloatSubtract:
.9d61		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9d63		49 80		eor #$80			eor 	#$80
.9d65		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9d67						FloatAdd:
.9d67		48		pha				pha
.9d68		5a		phy				phy
.9d69		20 de 9e	jsr $9ede			jsr 	NSNormalise 				; normalise S[X]
.9d6c		f0 51		beq $9dbf			beq 	_FAReturn1
.9d6e		e8		inx				inx 								; normalise S[X+1]
.9d6f		20 de 9e	jsr $9ede			jsr 	NSNormalise
.9d72		ca		dex				dex
.9d73		c9 00		cmp #$00			cmp 	#0
.9d75		f0 60		beq $9dd7			beq 	_FAExit 					; if so, just return A
.9d77		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9d79		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9d7b		f0 18		beq $9d95			beq 	_FAExponentsEqual
.9d7d		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9d7f		a8		tay				tay
.9d80		38		sec				sec 								; do a signed comparison of the exponents.
.9d81		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d83		50 02		bvc $9d87			bvc 	_FANoSignedChange
.9d85		49 80		eor #$80			eor 	#$80
.9d87						_FANoSignedChange:
.9d87		29 80		and #$80			and 	#$80
.9d89		10 02		bpl $9d8d			bpl 	_FAHaveMax
.9d8b		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9d8d						_FAHaveMax:
.9d8d		20 da 9d	jsr $9dda			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9d90		e8		inx				inx
.9d91		20 da 9d	jsr $9dda			jsr 	_FAShiftToExponent
.9d94		ca		dex				dex
.9d95						_FAExponentsEqual:
.9d95		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9d97		55 51		eor $51,x			eor 	NSStatus+1,x
.9d99		30 0e		bmi $9da9			bmi 	_FADifferentSigns
.9d9b		20 12 9b	jsr $9b12			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9d9e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9da0		10 35		bpl $9dd7			bpl 	_FAExit 					; if no, we are done.
.9da2		20 8b a7	jsr $a78b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9da5		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9da7		80 2e		bra $9dd7			bra 	_FAExit
.9da9						_FADifferentSigns:
.9da9		20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9dac		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9dae		10 06		bpl $9db6			bpl 	_FACheckZero 				; if no, check for -0
.9db0		20 34 a7	jsr $a734			jsr 	NSMNegate 					; netate result
.9db3		20 3b a7	jsr $a73b			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9db6						_FACheckZero:
.9db6		20 94 a7	jsr $a794			jsr 	NSMIsZero	 				; check for -0
.9db9		d0 1c		bne $9dd7			bne 	_FAExit
.9dbb		74 50		stz $50,x			stz 	NSStatus,x
.9dbd		80 18		bra $9dd7			bra 	_FAExit
.9dbf						_FAReturn1:
.9dbf		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9dc1		95 58		sta $58,x			sta 	NSMantissa0,x
.9dc3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9dc5		95 60		sta $60,x			sta 	NSMantissa1,x
.9dc7		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9dc9		95 68		sta $68,x			sta 	NSMantissa2,x
.9dcb		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9dcd		95 70		sta $70,x			sta 	NSMantissa3,x
.9dcf		b5 79		lda $79,x			lda 	NSExponent+1,x
.9dd1		95 78		sta $78,x			sta 	NSExponent,x
.9dd3		b5 51		lda $51,x			lda 	NSStatus+1,x
.9dd5		95 50		sta $50,x			sta 	NSStatus,x
.9dd7						_FAExit:
.9dd7		7a		ply				ply
.9dd8		68		pla				pla
.9dd9		60		rts				rts
.9dda						_FAShiftToExponent:
.9dda						_FAShiftToExponent2:
.9dda		98		tya				tya 								; compare Y to exponent
.9ddb		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9ddd		f0 07		beq $9de6			beq 	_FASEExit 					; exit if so.
.9ddf		20 8b a7	jsr $a78b			jsr 	NSMShiftRight	 			; shift the mantissa right
.9de2		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9de4		80 f4		bra $9dda			bra 	_FAShiftToExponent2
.9de6						_FASEExit:
.9de6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9de7						CompareFloat:
.9de7		20 61 9d	jsr $9d61			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9dea		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9dec		29 f8		and #$f8			and 	#$F8
.9dee		15 68		ora $68,x			ora 	NSMantissa2,x
.9df0		15 70		ora $70,x			ora 	NSMantissa3,x
.9df2		f0 08		beq $9dfc			beq 	_FCExit 					; zero, so approximately identical
.9df4		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9df6		34 50		bit $50,x			bit 	NSStatus,x
.9df8		10 02		bpl $9dfc			bpl 	_FCExit
.9dfa						_FCNegative:
.9dfa		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9dfc						_FCExit:
.9dfc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9dfd						FDivideCommand:
.9dfd		fa		plx				plx	 								; restore stack position
.9dfe		20 cf 9e	jsr $9ecf			jsr 	FloatPrepare 				; prepare for floats
.9e01						FloatDivide:
.9e01		48		pha				pha
.9e02		e8		inx				inx
.9e03		20 de 9e	jsr $9ede			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9e06		ca		dex				dex
.9e07		c9 00		cmp #$00			cmp 	#0
.9e09		f0 1d		beq $9e28			beq 	_FDZero
.9e0b		20 de 9e	jsr $9ede			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9e0e		f0 16		beq $9e26			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9e10		20 03 9a	jsr $9a03			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9e13		20 9f 99	jsr $999f			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9e16		20 de 9e	jsr $9ede			jsr		NSNormalise 				; renormalise
.9e19		20 93 9a	jsr $9a93			jsr 	CalculateSign 				; calculate result sign
.9e1c		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9e1e		38		sec				sec
.9e1f		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9e21		38		sec				sec
.9e22		e9 1e		sbc #$1e			sbc 	#30
.9e24		95 78		sta $78,x			sta 	NSExponent,x
.9e26						_FDExit:
.9e26		68		pla				pla
.9e27		60		rts				rts
.9e28						_FDZero:
.9e28		a9 03		lda #$03		lda	#3
.9e2a		4c 18 98	jmp $9818		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9e2d						FloatFractionalPart:
.9e2d		5a		phy				phy
.9e2e		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9e30		29 7f		and #$7f			and 	#$7F
.9e32		95 50		sta $50,x			sta 	NSStatus,x
.9e34		20 de 9e	jsr $9ede			jsr 	NSNormalise
.9e37		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9e39		38		sec				sec
.9e3a		e9 e0		sbc #$e0			sbc 	#$E0
.9e3c		90 29		bcc $9e67			bcc 	_FFPExit 					; already fractional
.9e3e		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9e40		b0 22		bcs $9e64			bcs 	_FFPZero
.9e42		a8		tay				tay 								; put count to do in Y
.9e43		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9e45		20 69 9e	jsr $9e69			jsr 	_FFPPartial
.9e48		95 70		sta $70,x			sta 	NSMantissa3,x
.9e4a		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e4c		20 69 9e	jsr $9e69			jsr 	_FFPPartial
.9e4f		95 68		sta $68,x			sta 	NSMantissa2,x
.9e51		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e53		20 69 9e	jsr $9e69			jsr 	_FFPPartial
.9e56		95 60		sta $60,x			sta 	NSMantissa1,x
.9e58		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e5a		20 69 9e	jsr $9e69			jsr 	_FFPPartial
.9e5d		95 58		sta $58,x			sta 	NSMantissa0,x
.9e5f		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; zeroed check.
.9e62		d0 03		bne $9e67			bne 	_FFPExit
.9e64						_FFPZero:
.9e64		20 72 a7	jsr $a772			jsr 	NSMSetZero
.9e67						_FFPExit:
.9e67		7a		ply				ply
.9e68		60		rts				rts
.9e69						_FFPPartial:
.9e69		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9e6b		f0 17		beq $9e84			beq 	_FFFPPExit
.9e6d		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9e6f		b0 0c		bcs $9e7d			bcs 	_FFFPPWholeByte
.9e71		5a		phy				phy
.9e72						_FFFPPLeft:
.9e72		0a		asl a				asl 	a
.9e73		88		dey				dey
.9e74		d0 fc		bne $9e72			bne 	_FFFPPLeft
.9e76		7a		ply				ply
.9e77						_FFFPPRight:
.9e77		4a		lsr a				lsr 	a
.9e78		88		dey				dey
.9e79		d0 fc		bne $9e77			bne 	_FFFPPRight
.9e7b		80 07		bra $9e84			bra 	_FFFPPExit
.9e7d						_FFFPPWholeByte:
.9e7d		98		tya				tya 								; subtract 8 from count
.9e7e		38		sec				sec
.9e7f		e9 08		sbc #$08			sbc 	#8
.9e81		a8		tay				tay
.9e82		a9 00		lda #$00			lda 	#0 							; and clear all
.9e84						_FFFPPExit:
.9e84		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9e85						FloatIntegerPart:
.9e85		48		pha				pha
.9e86		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9e88		f0 1d		beq $9ea7			beq 	_FIPExit 					; if so do nothing
.9e8a		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; is it zero ?
.9e8d		f0 15		beq $9ea4			beq 	_FIPZero 					; if so return zero.
.9e8f		20 de 9e	jsr $9ede			jsr 	NSNormalise 				; normalise
.9e92		f0 10		beq $9ea4			beq 	_FIPZero 					; normalised to zero, exit zero
.9e94						_FIPShift:
.9e94		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9e96		10 07		bpl $9e9f			bpl 	_FIPCheckZero
.9e98		20 8b a7	jsr $a78b			jsr 	NSMShiftRight 				; shift mantissa right
.9e9b		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9e9d		80 f5		bra $9e94			bra 	_FIPShift
.9e9f						_FIPCheckZero:
.9e9f		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; avoid -0 problem
.9ea2		d0 03		bne $9ea7			bne 	_FIPExit 					; set to zero if mantissa zero.
.9ea4						_FIPZero:
.9ea4		20 72 a7	jsr $a772			jsr 	NSMSetZero
.9ea7						_FIPExit:
.9ea7		68		pla				pla
.9ea8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9ea9						FloatingPointMultiply:
.9ea9		20 cf 9e	jsr $9ecf			jsr 	FloatPrepare 				; prepare for floats
.9eac						FloatMultiply:
.9eac		48		pha				pha
.9ead		20 de 9e	jsr $9ede			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9eb0		f0 18		beq $9eca			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9eb2		e8		inx				inx
.9eb3		20 de 9e	jsr $9ede			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9eb6		ca		dex				dex
.9eb7		c9 00		cmp #$00			cmp 	#0
.9eb9		f0 0c		beq $9ec7			beq 	_FDSetZero
.9ebb		20 55 9a	jsr $9a55			jsr 	MultiplyShort 				; calculate the result.
.9ebe		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9ec0		18		clc				clc
.9ec1		75 79		adc $79,x			adc 	NSExponent+1,x
.9ec3		95 78		sta $78,x			sta 	NSExponent,x
.9ec5		80 03		bra $9eca			bra 	_FDExit
.9ec7						_FDSetZero:
.9ec7		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; return 0
.9eca						_FDExit:
.9eca		20 de 9e	jsr $9ede			jsr 	NSNormalise 				; normalise the result
.9ecd		68		pla				pla
.9ece		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9ecf						FloatPrepare:
.9ecf		20 da 9f	jsr $9fda			jsr 	DereferenceTopTwo 			; dereference the top two values
.9ed2		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9ed4		15 51		ora $51,x			ora 	NSStatus+1,x
.9ed6		29 10		and #$10			and 	#NSBIsString
.9ed8		d0 01		bne $9edb			bne 	_FDType
.9eda		60		rts				rts
.9edb						_FDType:
.9edb		4c 21 aa	jmp $aa21			jmp 	TypeError
.9ede						NSNormalise:
.9ede		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9ee0		29 80		and #$80			and 	#$80
.9ee2		09 08		ora #$08			ora 	#NSTFloat
.9ee4		95 50		sta $50,x			sta 	NSStatus,x
.9ee6		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; if zero exit
.9ee9		d0 07		bne $9ef2			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9eeb		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9eed		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9eef		a9 00		lda #$00			lda 	#0 							; set Z flag
.9ef1		60		rts				rts
.9ef2						_NSNormaliseOptimise:
.9ef2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9ef4		d0 19		bne $9f0f			bne 	_NSNormaliseLoop
.9ef6		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9ef8		30 15		bmi $9f0f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9efa		95 70		sta $70,x			sta 	NSMantissa3,x
.9efc		b5 60		lda $60,x			lda 	NSMantissa1,x
.9efe		95 68		sta $68,x			sta 	NSMantissa2,x
.9f00		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f02		95 60		sta $60,x			sta 	NSMantissa1,x
.9f04		74 58		stz $58,x			stz 	NSMantissa0,x
.9f06		b5 78		lda $78,x			lda 	NSExponent,x
.9f08		38		sec				sec
.9f09		e9 08		sbc #$08			sbc 	#8
.9f0b		95 78		sta $78,x			sta 	NSExponent,x
.9f0d		80 e3		bra $9ef2			bra 	_NSNormaliseOptimise
.9f0f						_NSNormaliseLoop:
.9f0f		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9f11		70 07		bvs $9f1a			bvs 	_NSNExit 					; exit if so with Z flag clear
.9f13		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; shift mantissa left
.9f16		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9f18		80 f5		bra $9f0f			bra 	_NSNormaliseLoop
.9f1a						_NSNExit:
.9f1a		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9f1c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f1d						AssignNumber:
.9f1d		5a		phy				phy
.9f1e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f20		85 36		sta $36				sta 	zTemp0
.9f22		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f24		85 37		sta $37				sta 	zTemp0+1
.9f26		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9f28		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f2a		95 50		sta $50,x			sta 	NSStatus,x
.9f2c		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f2e		c9 08		cmp #$08			cmp 	#NSTFloat
.9f30		f0 24		beq $9f56			beq 	_ANFloat
.9f32		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9f34		f0 03		beq $9f39			beq		_ANNotFloat
.9f36		4c 1c aa	jmp $aa1c			jmp 	RangeError					; if it is, report an error.
.9f39						_ANNotFloat:
.9f39		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f3b		29 03		and #$03			and 	#3
.9f3d		d0 05		bne $9f44			bne 	_ANByteWord
.9f3f		20 61 9f	jsr $9f61			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f42		80 1b		bra $9f5f			bra 	_ANExit
.9f44						_ANByteWord:
.9f44		48		pha				pha 								; save count
.9f45		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9f47		92 36		sta ($36)			sta 	(zTemp0)
.9f49		68		pla				pla
.9f4a		c9 01		cmp #$01			cmp	 	#1
.9f4c		f0 11		beq $9f5f			beq 	_ANExit
.9f4e		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9f50		a0 01		ldy #$01			ldy 	#1
.9f52		91 36		sta ($36),y			sta 	(zTemp0),y
.9f54		80 09		bra $9f5f			bra 	_ANExit
.9f56						_ANFloat:
.9f56		20 61 9f	jsr $9f61			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f59		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f5b		a0 04		ldy #$04			ldy 	#4
.9f5d		91 36		sta ($36),y			sta 	(zTemp0),y
.9f5f						_ANExit:
.9f5f		7a		ply				ply
.9f60		60		rts				rts
.9f61						_ANCopy4PackSign:
.9f61		a0 03		ldy #$03			ldy 	#3
.9f63		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9f65		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f67		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9f69		91 36		sta ($36),y			sta 	(zTemp0),y
.9f6b		88		dey				dey
.9f6c		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f6e		91 36		sta ($36),y			sta 	(zTemp0),y
.9f70		88		dey				dey
.9f71		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f73		91 36		sta ($36),y			sta 	(zTemp0),y
.9f75		88		dey				dey
.9f76		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f78		91 36		sta ($36),y			sta 	(zTemp0),y
.9f7a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f7b						AssignString:
.9f7b		5a		phy				phy
.9f7c		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f7e		85 38		sta $38				sta 	zTemp1
.9f80		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f82		85 39		sta $39				sta 	zTemp1+1
.9f84		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f86		85 36		sta $36				sta 	zTemp0
.9f88		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f8a		85 37		sta $37				sta 	zTemp0+1
.9f8c		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f8e		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f90		f0 23		beq $9fb5			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f92		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f93		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f95		e9 02		sbc #$02			sbc 	#2
.9f97		85 3c		sta $3c				sta 	zsTemp
.9f99		a0 01		ldy #$01			ldy 	#1
.9f9b		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f9d		e9 00		sbc #$00			sbc 	#0
.9f9f		85 3d		sta $3d				sta 	zsTemp+1
.9fa1		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9fa3						_ASGetLength:
.9fa3		c8		iny				iny
.9fa4		b1 38		lda ($38),y			lda 	(zTemp1),y
.9fa6		d0 fb		bne $9fa3			bne 	_ASGetLength
.9fa8		98		tya				tya 								; is this length <= current length
.9fa9		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9fab		90 1e		bcc $9fcb			bcc 	_ASCopyString
.9fad		f0 1c		beq $9fcb			beq 	_ASCopyString
.9faf		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9fb1		a0 01		ldy #$01			ldy 	#1
.9fb3		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fb5						_ASNewStringRequired:
.9fb5		e8		inx				inx 								; concrete the new string.
.9fb6		20 04 b1	jsr $b104			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9fb9		ca		dex				dex
.9fba		18		clc				clc
.9fbb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fbd		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fbf		92 36		sta ($36)			sta 	(zTemp0)
.9fc1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9fc3		69 00		adc #$00			adc 	#0
.9fc5		a0 01		ldy #$01			ldy 	#1
.9fc7		91 36		sta ($36),y			sta 	(zTemp0),y
.9fc9		80 0d		bra $9fd8			bra 	_ASExit
.9fcb						_ASCopyString:
.9fcb		a0 00		ldy #$00			ldy 	#0
.9fcd						_ASCopyLoop:
.9fcd		b1 38		lda ($38),y			lda 	(zTemp1),y
.9fcf		c8		iny				iny
.9fd0		c8		iny				iny
.9fd1		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fd3		88		dey				dey
.9fd4		c9 00		cmp #$00			cmp 	#0
.9fd6		d0 f5		bne $9fcd			bne 	_ASCopyLoop
.9fd8						_ASExit:
.9fd8		7a		ply				ply
.9fd9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9fda						DereferenceTopTwo:
.9fda		e8		inx				inx
.9fdb		20 df 9f	jsr $9fdf			jsr 	Dereference 				; deref x+1
.9fde		ca		dex				dex  								; falls through to deref x
.9fdf						Dereference:
.9fdf		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9fe1		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9fe3		f0 48		beq $a02d			beq 	_DRFExit 					; not a reference, so exit.
.9fe5		5a		phy				phy
.9fe6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9fe8		85 36		sta $36				sta 	zTemp0
.9fea		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fec		85 37		sta $37				sta 	zTemp0+1
.9fee		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9ff0		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9ff2		95 58		sta $58,x			sta 	NSMantissa0,x
.9ff4		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9ff6		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9ff8		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9ffa		f0 0e		beq $a00a			beq 	_DRFDereferenceTwo
.9ffc		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9ffe		f0 2f		beq $a02f			beq 	_DRFFull
.a000		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a002		29 03		and #$03			and 	#3
.a004		f0 29		beq $a02f			beq 	_DRFFull 					; the whole word
.a006		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a008		f0 06		beq $a010			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a00a						_DRFDereferenceTwo:
.a00a		a0 01		ldy #$01			ldy 	#1
.a00c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a00e		95 60		sta $60,x			sta 	NSMantissa1,x
.a010						_DRFClear23:
.a010		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a012		74 70		stz $70,x			stz 	NSMantissa3,x
.a014		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.a016		29 18		and #$18			and 	#NSBTypeMask
.a018		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.a01a		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a01c		d0 0e		bne $a02c			bne 	_DRFNotString
.a01e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.a020		15 60		ora $60,x			ora 	NSMantissa1,x
.a022		d0 08		bne $a02c			bne 	_DRFNotString
.a024		a9 2e		lda #$2e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a026		95 58		sta $58,x			sta 	NSMantissa0,x
.a028		a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a02a		95 60		sta $60,x			sta 	NSMantissa1,x
.a02c						_DRFNotString
.a02c		7a		ply				ply 								; restore Y and exit
.a02d						_DRFExit:
.a02d		60		rts				rts
.a02e						_DRFNullString:
>a02e		00						.byte 	0
.a02f						_DRFFull:
.a02f		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a031		b1 36		lda ($36),y			lda 	(zTemp0),y
.a033		95 60		sta $60,x			sta 	NSMantissa1,x
.a035		c8		iny				iny
.a036		b1 36		lda ($36),y			lda 	(zTemp0),y
.a038		95 68		sta $68,x			sta 	NSMantissa2,x
.a03a		c8		iny				iny
.a03b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a03d		95 70		sta $70,x			sta 	NSMantissa3,x
.a03f		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.a041		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.a043		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a045		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.a047		f0 05		beq $a04e			beq 	_DRFNoExponent
.a049		c8		iny				iny 								; if not, read the exponent as well.
.a04a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a04c		95 78		sta $78,x			sta 	NSExponent,x
.a04e						_DRFNoExponent:
.a04e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a050		10 0a		bpl $a05c			bpl 	_DRFExit2 					; if not, then exit.
.a052		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a054		95 70		sta $70,x			sta 	NSMantissa3,x
.a056		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.a058		09 80		ora #$80			ora 	#NSBIsNegative
.a05a		95 50		sta $50,x			sta 	NSStatus,x
.a05c						_DRFExit2:
.a05c		7a		ply				ply
.a05d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.a05e						EncodeNumberStart:
.a05e		38		sec				sec
.a05f		80 01		bra $a062			bra 	EncodeNumberContinue+1
.a061						EncodeNumberContinue:
.a061		18		clc				clc
.a062						EncodeNumber:
.a062		08		php				php 								; save reset flag.
.a063		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a065		f0 12		beq $a079			beq 	_ENIsOkay
.a067		c9 30		cmp #$30			cmp 	#"0"
.a069		90 04		bcc $a06f			bcc 	_ENBadNumber
.a06b		c9 3a		cmp #$3a			cmp 	#"9"+1
.a06d		90 0a		bcc $a079			bcc 	_ENIsOkay
.a06f						_ENBadNumber:
.a06f		28		plp				plp 								; throw saved reset
.a070		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.a073		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a075		f0 7b		beq $a0f2			beq 	_ENConstructFinal
.a077						_ENFail:
.a077		18		clc				clc 								; not allowed
.a078		60		rts				rts
.a079						_ENIsOkay:
.a079		28		plp				plp 								; are we restarting
.a07a		90 15		bcc $a091			bcc 	_ENNoRestart
.a07c						_ENStartEncode:
.a07c		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.a07e		f0 0c		beq $a08c			beq 	_ENFirstDP
.a080		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a082		20 74 a7	jsr $a774			jsr 	NSMSetByte 					; in single byte mode.
.a085		a9 01		lda #$01			lda 	#ESTA_Low
.a087						_ENExitChange:
.a087		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a08a		38		sec				sec
.a08b		60		rts				rts
.a08c						_ENFirstDP:
.a08c		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; clear integer part
.a08f		80 3c		bra $a0cd			bra 	_ESTASwitchFloat			; go straight to float and exi
.a091						_ENNoRestart:
.a091		48		pha				pha 								; save digit or DP on stack.
.a092		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a095		c9 01		cmp #$01			cmp 	#ESTA_Low
.a097		f0 09		beq $a0a2			beq  	_ESTALowState
.a099		c9 02		cmp #$02			cmp 	#ESTA_High
.a09b		f0 26		beq $a0c3			beq 	_ESTAHighState
.a09d		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a09f		f0 38		beq $a0d9			beq 	_ESTADecimalState
>a0a1		db						.byte 	$DB 						; causes a break in the emulator
.a0a2						_ESTALowState:
.a0a2		68		pla				pla 								; get value back
.a0a3		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a0a5		f0 26		beq $a0cd			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a0a7		29 0f		and #$0f			and 	#15 						; make digit
.a0a9		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a0ac		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a0ae		0a		asl a				asl 	a
.a0af		0a		asl a				asl 	a
.a0b0		75 58		adc $58,x			adc 	NSMantissa0,x
.a0b2		0a		asl a				asl 	a
.a0b3		6d 06 04	adc $0406			adc 	digitTemp
.a0b6		95 58		sta $58,x			sta 	NSMantissa0,x
.a0b8		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a0ba		90 05		bcc $a0c1			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0bc		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0be		8d 05 04	sta $0405			sta 	encodeState
.a0c1						_ESTANoSwitch:
.a0c1		38		sec				sec
.a0c2		60		rts				rts
.a0c3						_ESTAHighState:
.a0c3		68		pla				pla 								; get value back
.a0c4		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a0c6		f0 05		beq $a0cd			beq 	_ESTASwitchFloat
.a0c8		20 26 a1	jsr $a126			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a0cb		38		sec				sec
.a0cc		60		rts				rts
.a0cd						_ESTASwitchFloat:
.a0cd		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a0d0		e8		inx				inx 								; zero the decimal additive.
.a0d1		20 72 a7	jsr $a772			jsr 	NSMSetZero
.a0d4		ca		dex				dex
.a0d5		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a0d7		80 ae		bra $a087			bra 	_ENExitChange
.a0d9						_ESTADecimalState:
.a0d9		68		pla				pla 								; digit.
.a0da		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a0dc		f0 99		beq $a077			beq 	_ENFail
.a0de		e8		inx				inx 								; put digit into fractional part of X+1
.a0df		20 26 a1	jsr $a126			jsr 	ESTAShiftDigitIntoMantissa
.a0e2		ca		dex				dex
.a0e3		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a0e6		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a0e9		c9 0b		cmp #$0b			cmp 	#11
.a0eb		f0 02		beq $a0ef			beq 	_ESTADSFail
.a0ed		38		sec				sec
.a0ee		60		rts				rts
.a0ef						_ESTADSFail:
.a0ef		4c 1c aa	jmp $aa1c			jmp 	RangeError
.a0f2						_ENConstructFinal:
.a0f2		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a0f5		f0 2d		beq $a124			beq 	_ENCFExit 					; no decimals
.a0f7		5a		phy				phy
.a0f8		0a		asl a				asl 	a 							; x 4 and CLC
.a0f9		0a		asl a				asl 	a
.a0fa		6d 07 04	adc $0407			adc 	decimalCount
.a0fd		a8		tay				tay
.a0fe		b9 db a9	lda $a9db,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a101		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a103		b9 dc a9	lda $a9dc,y			lda 	DecimalScalarTable-5+1,y
.a106		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a108		b9 dd a9	lda $a9dd,y			lda 	DecimalScalarTable-5+2,y
.a10b		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a10d		b9 de a9	lda $a9de,y			lda 	DecimalScalarTable-5+3,y
.a110		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a112		b9 df a9	lda $a9df,y			lda 	DecimalScalarTable-5+4,y
.a115		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a117		a9 08		lda #$08			lda 	#NSTFloat
.a119		95 52		sta $52,x			sta 	NSStatus+2,x
.a11b		7a		ply				ply
.a11c		e8		inx				inx 								; multiply decimal const by decimal scalar
.a11d		20 ac 9e	jsr $9eac			jsr 	FloatMultiply
.a120		ca		dex				dex
.a121		20 67 9d	jsr $9d67			jsr 	FloatAdd 					; add to integer part.
.a124						_ENCFExit:
.a124		18		clc				clc 								; reject the digit.
.a125		60		rts				rts
.a126						ESTAShiftDigitIntoMantissa:
.a126		29 0f		and #$0f			and 	#15 						; save digit
.a128		48		pha				pha
.a129		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a12b		48		pha				pha
.a12c		b5 68		lda $68,x			lda 	NSMantissa2,x
.a12e		48		pha				pha
.a12f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a131		48		pha				pha
.a132		b5 58		lda $58,x			lda 	NSMantissa0,x
.a134		48		pha				pha
.a135		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; x 2
.a138		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; x 4
.a13b		18		clc				clc 								; pop mantissa and add
.a13c		68		pla				pla
.a13d		75 58		adc $58,x			adc 	NSMantissa0,x
.a13f		95 58		sta $58,x			sta 	NSMantissa0,x
.a141		68		pla				pla
.a142		75 60		adc $60,x			adc 	NSMantissa1,x
.a144		95 60		sta $60,x			sta 	NSMantissa1,x
.a146		68		pla				pla
.a147		75 68		adc $68,x			adc 	NSMantissa2,x
.a149		95 68		sta $68,x			sta 	NSMantissa2,x
.a14b		68		pla				pla
.a14c		75 70		adc $70,x			adc 	NSMantissa3,x
.a14e		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a150		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; x 10
.a153		68		pla				pla 								; add digit
.a154		18		clc				clc
.a155		75 58		adc $58,x			adc 	NSMantissa0,x
.a157		95 58		sta $58,x			sta 	NSMantissa0,x
.a159		90 0a		bcc $a165			bcc 	_ESTASDExit
.a15b		f6 60		inc $60,x			inc 	NSMantissa1,x
.a15d		d0 06		bne $a165			bne 	_ESTASDExit
.a15f		f6 68		inc $68,x			inc 	NSMantissa2,x
.a161		d0 02		bne $a165			bne 	_ESTASDExit
.a163		f6 70		inc $70,x			inc 	NSMantissa3,x
.a165						_ESTASDExit:
.a165		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a166						EvaluateTerm:
.a166		b1 30		lda ($30),y			lda 	(codePtr),y
.a168		30 18		bmi $a182			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a16a		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a16c		b0 6c		bcs $a1da			bcs 	_ETVariable
.a16e		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a170		90 6b		bcc $a1dd			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a172		c9 3a		cmp #$3a			cmp 	#'9'+1
.a174		b0 67		bcs $a1dd			bcs 	_ETPuncUnary
.a176		20 5e a0	jsr $a05e			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a179						_ETNumber:
.a179		c8		iny				iny 								; keep encoding until we have the numbers
.a17a		b1 30		lda ($30),y			lda 	(codePtr),y
.a17c		20 61 a0	jsr $a061			jsr 	EncodeNumberContinue
.a17f		b0 f8		bcs $a179			bcs 	_ETNumber 					; go back if accepted.
.a181		60		rts				rts
.a182						_ETCheckUnary:
.a182		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a184		f0 3f		beq $a1c5			beq 	_ETString
.a186		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a188		f0 12		beq $a19c			beq 	_ETHexConstant
.a18a		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a18c		90 0b		bcc $a199			bcc 	_ETSyntaxError
.a18e		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a190		b0 07		bcs $a199			bcs 	_ETSyntaxError
.a192		da		phx				phx 								; push X on the stack
.a193		0a		asl a				asl 	a 							; put vector x 2 into X
.a194		aa		tax				tax
.a195		c8		iny				iny 								; consume unary function token
.a196		7c e8 94	jmp ($94e8,x)			jmp 	(VectorSet0,x) 				; and do it.
.a199						_ETSyntaxError:
.a199		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.a19c						_ETHexConstant:
.a19c		c8		iny				iny 								; skip #
.a19d		c8		iny				iny 								; skip count
.a19e		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; clear result
.a1a1						_ETHLoop:
.a1a1		b1 30		lda ($30),y			lda 	(codePtr),y
.a1a3		c8		iny				iny 								; and consume
.a1a4		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a1a6		f0 1c		beq $a1c4			beq 	_ETHExit
.a1a8		48		pha				pha 								; save on stack.
.a1a9		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; x 2
.a1ac		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; x 4
.a1af		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; x 8
.a1b2		20 81 a7	jsr $a781			jsr 	NSMShiftLeft 				; x 16
.a1b5		68		pla				pla 								; ASCII
.a1b6		c9 41		cmp #$41			cmp 	#'A'
.a1b8		90 02		bcc $a1bc			bcc 	_ETHNotChar
.a1ba		e9 07		sbc #$07			sbc 	#7
.a1bc						_ETHNotChar:
.a1bc		29 0f		and #$0f			and 	#15 						; digit now
.a1be		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a1c0		95 58		sta $58,x			sta 	NSMantissa0,x
.a1c2		80 dd		bra $a1a1			bra 	_ETHLoop 					; go round.
.a1c4						_ETHExit:
.a1c4		60		rts				rts
.a1c5						_ETString:
.a1c5		c8		iny				iny 								; look at length
.a1c6		b1 30		lda ($30),y			lda 	(codePtr),y
.a1c8		48		pha				pha
.a1c9		c8		iny				iny 								; first character
.a1ca		20 9e ac	jsr $ac9e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a1cd		68		pla				pla 								; restore count and save
.a1ce		85 36		sta $36				sta 	zTemp0
.a1d0		98		tya				tya 								; add length to Y to skip it.
.a1d1		18		clc				clc
.a1d2		65 36		adc $36				adc 	zTemp0
.a1d4		a8		tay				tay
.a1d5		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a1d7		95 50		sta $50,x			sta 	NSStatus,x
.a1d9		60		rts				rts
.a1da						_ETVariable:
.a1da		4c 2f a2	jmp $a22f			jmp 	VariableHandler
.a1dd						_ETPuncUnary:
.a1dd		c8		iny				iny 								; consume the unary character
.a1de		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a1e0		f0 2b		beq $a20d			beq 	_ETUnaryNegate
.a1e2		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a1e4		f0 36		beq $a21c			beq 	_ETDereference
.a1e6		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a1e8		f0 3e		beq $a228			beq 	_ETParenthesis
.a1ea		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a1ec		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a1ee		f0 06		beq $a1f6			beq 	_ETIndirection
.a1f0		e6 36		inc $36				inc 	zTemp0
.a1f2		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a1f4		d0 a3		bne $a199			bne 	_ETSyntaxError
.a1f6						_ETIndirection:
.a1f6		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a1f8		1a		inc a				inc 	a
.a1f9		48		pha				pha
.a1fa		20 66 a1	jsr $a166			jsr 	EvaluateTerm				; evaluate the term
.a1fd		20 df 9f	jsr $9fdf			jsr 	Dereference 				; dereference it.
.a200		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a202		d0 06		bne $a20a			bne 	_ETTypeMismatch
.a204		68		pla				pla 								; indirection 1-2
.a205		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a207		95 50		sta $50,x			sta 	NSStatus,x
.a209		60		rts				rts
.a20a						_ETTypeMismatch:
.a20a		4c 21 aa	jmp $aa21			jmp 	TypeError
.a20d						_ETUnaryNegate:
.a20d		20 66 a1	jsr $a166			jsr 	EvaluateTerm				; evaluate the term
.a210		20 df 9f	jsr $9fdf			jsr 	Dereference 				; dereference it.
.a213		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a215		29 10		and #$10			and 	#NSTString
.a217		d0 f1		bne $a20a			bne 	_ETTypeMismatch
.a219		4c 34 a7	jmp $a734			jmp 	NSMNegate  					; just toggles the sign bit.
.a21c						_ETDereference:
.a21c		20 66 a1	jsr $a166			jsr 	EvaluateTerm				; evaluate the term
.a21f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a221		29 20		and #$20			and 	#NSBIsReference
.a223		f0 e5		beq $a20a			beq 	_ETTypeMismatch
.a225		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a227		60		rts				rts
.a228						_ETParenthesis:
.a228		20 1c 9d	jsr $9d1c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a22b		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; check for )
.a22e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a22f						VariableHandler:
.a22f		b1 30		lda ($30),y			lda 	(codePtr),y
.a231		18		clc				clc
.a232		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a234		85 37		sta $37				sta 	zTemp0+1
.a236		c8		iny				iny
.a237		b1 30		lda ($30),y			lda 	(codePtr),y
.a239		85 36		sta $36				sta 	zTemp0
.a23b		c8		iny				iny
.a23c		18		clc				clc									; copy variable address+3 to mantissa
.a23d		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a23f		95 58		sta $58,x			sta 	NSMantissa0,x
.a241		a5 37		lda $37				lda 	zTemp0+1
.a243		69 00		adc #$00			adc 	#0
.a245		95 60		sta $60,x			sta 	NSMantissa1,x
.a247		74 68		stz $68,x			stz 	NSMantissa2,x
.a249		74 70		stz $70,x			stz 	NSMantissa3,x
.a24b		74 78		stz $78,x			stz 	NSExponent,x
.a24d		5a		phy				phy
.a24e		a0 02		ldy #$02			ldy 	#2 							; read type
.a250		b1 36		lda ($36),y			lda 	(zTemp0),y
.a252		7a		ply				ply
.a253		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a255		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a257		95 50		sta $50,x			sta 	NSStatus,x
.a259		29 04		and #$04			and 	#NSBIsArray
.a25b		d0 01		bne $a25e			bne 	_VHArray
.a25d		60		rts				rts
.a25e						_VHArray:
.a25e		e8		inx				inx
.a25f		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a262		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a264		95 51		sta $51,x			sta 	NSStatus+1,x
.a266		b1 30		lda ($30),y			lda 	(codePtr),y
.a268		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a26a		d0 06		bne $a272			bne 	_VHNoSecondIndex
.a26c		c8		iny				iny 								; skip the comma
.a26d		e8		inx				inx
.a26e		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a271		ca		dex				dex
.a272						_VHNoSecondIndex:
.a272		ca		dex				dex 								; set X back.
.a273		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; and check the right bracket.
.a276		5a		phy				phy 								; save position
.a277		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a279		85 3e		sta $3e				sta 	zaTemp
.a27b		b5 60		lda $60,x			lda 	NSMantissa1,x
.a27d		85 3f		sta $3f				sta 	zaTemp+1
.a27f		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a281		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a283		f0 5d		beq $a2e2			beq 	_VHBadArray
.a285		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a287		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a289		f0 02		beq $a28d			beq 	_VHHas2Mask
.a28b		a9 ff		lda #$ff			lda 	#$FF
.a28d						_VHHas2Mask:
.a28d		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a28f		f0 4c		beq $a2dd			beq 	_VHBadIndex
.a291		0a		asl a				asl 	a 							; carry will be set if a second index
.a292		90 08		bcc $a29c			bcc 	_VHCheckFirstIndex
.a294		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a296		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a298		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a29a		90 41		bcc $a2dd			bcc 	_VHBadIndex
.a29c						_VHCheckFirstIndex:
.a29c		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a29e		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2a0		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a2a2		90 39		bcc $a2dd			bcc 	_VHBadIndex
.a2a4		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a2a6		64 37		stz $37				stz 	zTemp0+1
.a2a8		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a2aa		30 0e		bmi $a2ba			bmi 	_VHNoMultiply
.a2ac		da		phx				phx
.a2ad		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a2af		48		pha				pha
.a2b0		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a2b2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2b4		1a		inc a				inc 	a 							; add 1 for zero base
.a2b5		fa		plx				plx
.a2b6		20 1d a7	jsr $a71d			jsr 	Multiply8x8 				; calculate -> Z0
.a2b9		fa		plx				plx
.a2ba						_VHNoMultiply:
.a2ba		18		clc				clc
.a2bb		a5 36		lda $36				lda 	zTemp0
.a2bd		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a2bf		85 36		sta $36				sta 	zTemp0
.a2c1		a5 37		lda $37				lda 	zTemp0+1
.a2c3		69 00		adc #$00			adc 	#0
.a2c5		85 37		sta $37				sta 	zTemp0+1
.a2c7		b5 50		lda $50,x			lda 	NSStatus,x
.a2c9		20 36 88	jsr $8836			jsr 	ScaleByBaseType
.a2cc		18		clc				clc
.a2cd		b2 3e		lda ($3e)			lda 	(zaTemp)
.a2cf		65 36		adc $36				adc 	zTemp0
.a2d1		95 58		sta $58,x			sta 	NSMantissa0,x
.a2d3		a0 01		ldy #$01			ldy 	#1
.a2d5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2d7		65 37		adc $37				adc 	zTemp0+1
.a2d9		95 60		sta $60,x			sta 	NSMantissa1,x
.a2db		7a		ply				ply 								; restore position
.a2dc		60		rts				rts
.a2dd						_VHBadIndex:
.a2dd		a9 17		lda #$17		lda	#23
.a2df		4c 18 98	jmp $9818		jmp	ErrorHandler
.a2e2						_VHBadArray:
.a2e2		a9 18		lda #$18		lda	#24
.a2e4		4c 18 98	jmp $9818		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a2e7						AbsUnary:
.a2e7		fa		plx				plx 								; restore stack pos
.a2e8		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber 				; get a float or int
.a2eb		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a2ee		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a2f0		29 7f		and #$7f			and 	#$7F
.a2f2		95 50		sta $50,x			sta 	NSStatus,x
.a2f4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a2f5						AllocUnary:
.a2f5		fa		plx				plx 								; restore stack pos
.a2f6		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger		; get bytes required.
.a2f9		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a2fc		da		phx				phx 								; save X/Y
.a2fd		5a		phy				phy
.a2fe		8a		txa				txa 								; copy X into Y
.a2ff		a8		tay				tay
.a300		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a303		aa		tax				tax
.a304		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a307		20 14 a3	jsr $a314			jsr 	AllocateXABytes 			; allocate memory
.a30a		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a30d		8a		txa				txa 	 							; typing is 16 bit integer.
.a30e		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a311		7a		ply				ply
.a312		fa		plx				plx
.a313		60		rts				rts
.a314						AllocateXABytes:
.a314		5a		phy				phy
.a315		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a318		84 36		sty $36				sty 	zTemp0
.a31a		5a		phy				phy
.a31b		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a31e		84 37		sty $37				sty 	zTemp0+1
.a320		5a		phy				phy
.a321		18		clc				clc 								; add to low memory pointer
.a322		6d 08 04	adc $0408			adc 	lowMemPtr
.a325		8d 08 04	sta $0408			sta 	lowMemPtr
.a328		8a		txa				txa
.a329		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a32c		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a32f		b0 2f		bcs $a360			bcs 	CISSMemory
.a331		20 52 a3	jsr $a352			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a334						_ClearMemory:
.a334		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a337		c5 36		cmp $36				cmp 	zTemp0
.a339		d0 07		bne $a342			bne 	_CMClearNext
.a33b		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a33e		c5 37		cmp $37				cmp 	zTemp0+1
.a340		f0 0c		beq $a34e			beq 	_CMExit
.a342						_CMClearNext:
.a342		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a344		92 36		sta ($36)			sta 	(zTemp0)
.a346		e6 36		inc $36				inc 	zTemp0
.a348		d0 ea		bne $a334			bne 	_ClearMemory
.a34a		e6 37		inc $37				inc		zTemp0+1
.a34c		80 e6		bra $a334			bra 	_ClearMemory
.a34e						_CMExit:
.a34e		fa		plx				plx
.a34f		68		pla				pla
.a350		7a		ply				ply
.a351		60		rts				rts
.a352						CheckIdentifierStringSpace:
.a352		48		pha				pha
.a353		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a356		18		clc				clc
.a357		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a359		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a35c		b0 02		bcs $a360			bcs 	CISSMemory
.a35e		68		pla				pla
.a35f		60		rts				rts
.a360						CISSMemory:
.a360		a9 06		lda #$06		lda	#6
.a362		4c 18 98	jmp $9818		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a365						AscUnary:
.a365		fa		plx				plx 								; restore stack pos
.a366		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; get a string
.a369		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a36b		20 74 a7	jsr $a774			jsr 	NSMSetByte 					; ASC("") will return zero.
.a36e		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a371		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a372						FracUnary:
.a372		fa		plx				plx 								; restore stack pos
.a373		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber 				; get a float or int
.a376		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a379		b5 50		lda $50,x			lda 	NSStatus,x
.a37b		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a37d		f0 04		beq $a383			beq 	_IUZero
.a37f		20 2d 9e	jsr $9e2d			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a382		60		rts				rts
.a383						_IUZero:
.a383		20 72 a7	jsr $a772			jsr 	NSMSetZero
.a386		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a387						IntUnary:
.a387		fa		plx				plx 								; restore stack pos
.a388		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber 				; get a float or int
.a38b		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a38e		b5 50		lda $50,x			lda 	NSStatus,x
.a390		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a392		f0 03		beq $a397			beq 	_IUExit
.a394		20 85 9e	jsr $9e85			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a397						_IUExit:
.a397		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a398						LenUnary:
.a398		fa		plx				plx 								; restore stack pos
.a399		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; get a string
.a39c		5a		phy				phy
.a39d		a0 00		ldy #$00			ldy 	#0 							; find length
.a39f						_LenFind:
.a39f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a3a1		f0 06		beq $a3a9			beq 	_LenExit
.a3a3		c8		iny				iny
.a3a4		d0 f9		bne $a39f			bne 	_LenFind
.a3a6		4c 1c aa	jmp $aa1c			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a3a9						_LenExit:
.a3a9		98		tya				tya		 							; return length
.a3aa		20 74 a7	jsr $a774			jsr 	NSMSetByte
.a3ad		7a		ply				ply
.a3ae		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a3b1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a3b2						Unary_Min:
.a3b2		a9 01		lda #$01			lda 	#1
.a3b4		80 02		bra $a3b8			bra 	UnaryMinMaxMain
.a3b6						Unary_Max:
.a3b6		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a3b8						UnaryMinMaxMain:
.a3b8		fa		plx				plx 								; get index on number stack
.a3b9		48		pha				pha 								; save comparator
.a3ba		20 b7 a6	jsr $a6b7			jsr 	EvaluateValue 				; get the first value.
.a3bd						_UMMMLoop:
.a3bd		b1 30		lda ($30),y			lda 	(codePtr),y
.a3bf		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3c1		f0 22		beq $a3e5			beq 	_UMMMDone
.a3c3		20 07 98	jsr $9807			jsr 	CheckComma 					; must be a comma
.a3c6		e8		inx				inx
.a3c7		20 b7 a6	jsr $a6b7			jsr 	EvaluateValue
.a3ca		ca		dex				dex
.a3cb		20 55 a7	jsr $a755			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3ce		e8		inx				inx
.a3cf		20 55 a7	jsr $a755			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3d2		e8		inx				inx
.a3d3		20 cf 98	jsr $98cf			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3d6		ca		dex				dex
.a3d7		ca		dex				dex
.a3d8		85 36		sta $36				sta 	zTemp0 						; save required result
.a3da		68		pla				pla 								; get and save comparator
.a3db		48		pha				pha
.a3dc		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3de		d0 dd		bne $a3bd			bne 	_UMMMLoop
.a3e0		20 e8 a3	jsr $a3e8			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3e3		80 d8		bra $a3bd			bra 	_UMMMLoop
.a3e5						_UMMMDone:
.a3e5		68		pla				pla 								; throw the comparator
.a3e6		c8		iny				iny 								; skip )
.a3e7		60		rts				rts
.a3e8						ExpCopyAboveDown:
.a3e8		b5 51		lda $51,x			lda 	NSStatus+1,x
.a3ea		95 50		sta $50,x			sta 	NSStatus,x
.a3ec		b5 79		lda $79,x			lda 	NSExponent+1,x
.a3ee		95 78		sta $78,x			sta 	NSExponent,x
.a3f0		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a3f2		95 58		sta $58,x			sta 	NSMantissa0,x
.a3f4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a3f6		95 60		sta $60,x			sta 	NSMantissa1,x
.a3f8		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a3fa		95 68		sta $68,x			sta 	NSMantissa2,x
.a3fc		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a3fe		95 70		sta $70,x			sta 	NSMantissa3,x
.a400		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a401						Unary_Not:
.a401		fa		plx				plx
.a402		20 df a6	jsr $a6df			jsr 	EvaluateInteger 			; get integer
.a405		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a408		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; zero mantissa ?
.a40b		f0 04		beq $a411			beq 	_NotZero
.a40d		20 72 a7	jsr $a772			jsr 	NSMSetZero
.a410		60		rts				rts
.a411						_NotZero:
.a411		4c 85 98	jmp $9885			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a414						PeekByteUnary:
.a414		a9 01		lda #$01			lda 	#1
.a416		80 0a		bra $a422			bra 	PeekUnary
.a418						PeekWUnary:
.a418		a9 02		lda #$02			lda 	#2
.a41a		80 06		bra $a422			bra 	PeekUnary
.a41c						PeekLUnary:
.a41c		a9 03		lda #$03			lda 	#3
.a41e		80 02		bra $a422			bra 	PeekUnary
.a420						PeekDUnary:
.a420		a9 04		lda #$04			lda 	#4
.a422						PeekUnary:
.a422		fa		plx				plx 								; restore position.
.a423		48		pha				pha 								; save count to copy on stack
.a424		20 f2 a6	jsr $a6f2			jsr		Evaluate16BitInteger 		; address as constant.
.a427		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a42a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a42c		85 36		sta $36				sta 	zTemp0
.a42e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a430		85 37		sta $37				sta 	zTemp0+1
.a432		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; clear the result to zero.
.a435		68		pla				pla 								; count in zTemp2
.a436		85 3a		sta $3a				sta 	zTemp2
.a438		da		phx				phx 								; save stack position and offset of read
.a439		5a		phy				phy
.a43a		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a43c						_PULoop:
.a43c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a43e		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a440		c8		iny				iny 								; next byte to write
.a441		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a442		18		clc				clc
.a443		69 08		adc #$08			adc 	#MathStackSize
.a445		aa		tax				tax
.a446		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a448		d0 f2		bne $a43c			bne 	_PULoop
.a44a		7a		ply				ply 								; restore stack/code pos and exit.
.a44b		fa		plx				plx
.a44c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a44d						SgnUnary:
.a44d		fa		plx				plx 								; restore stack pos
.a44e		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber 				; get a float or int
.a451		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a454		20 94 a7	jsr $a794			jsr 	NSMIsZero 					; if zero
.a457		f0 0e		beq $a467			beq 	_SGZero  					; return Int Zero
.a459		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a45b		48		pha				pha
.a45c		a9 01		lda #$01			lda 	#1 							; set to 1
.a45e		20 74 a7	jsr $a774			jsr 	NSMSetByte
.a461		68		pla				pla
.a462		29 80		and #$80			and		#$80 						; copy the sign byte out
.a464		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a466		60		rts				rts
.a467		20 72 a7	jsr $a772	_SGZero:jsr 	NSMSetZero
.a46a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a46b						ValUnary:
.a46b		fa		plx				plx 								; restore stack pos
.a46c		20 81 a4	jsr $a481			jsr 	ValMainCode 				; do the main val() code
.a46f		b0 01		bcs $a472			bcs 	_VUError 					; couldn't convert
.a471		60		rts				rts
.a472						_VUError:
.a472		4c 21 aa	jmp $aa21			jmp 	TypeError
.a475						IsValUnary:
.a475		fa		plx				plx 								; restore stack pos
.a476		20 81 a4	jsr $a481			jsr 	ValMainCode 				; do the main val() code
.a479		b0 03		bcs $a47e			bcs 	_VUBad
.a47b		4c 85 98	jmp $9885			jmp 	ReturnTrue
.a47e						_VUBad:
.a47e		4c 90 98	jmp $9890			jmp 	ReturnFalse
.a481						ValMainCode:
.a481		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; get a string
.a484		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; check right bracket present
.a487						ValEvaluateZTemp0:
.a487		5a		phy				phy
.a488		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a48a		f0 17		beq $a4a3			beq 	_VMCFail2
.a48c		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a48e		48		pha				pha 								; save first character
.a48f		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a491		d0 01		bne $a494			bne 	_VMCStart
.a493		c8		iny				iny 								; skip over -
.a494						_VMCStart:
.a494		38		sec				sec 								; initialise first time round.
.a495						_VMCNext:
.a495		c8		iny				iny 								; pre-increment
.a496		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a498		f0 0c		beq $a4a6			beq 	_VMCSuccess 				; successful.
.a49a		20 62 a0	jsr $a062			jsr 	EncodeNumber 				; send it to the number-builder
.a49d		90 03		bcc $a4a2			bcc 	_VMCFail 					; if failed, give up.
.a49f		18		clc				clc 								; next time round, countinue
.a4a0		80 f3		bra $a495			bra 	_VMCNext
.a4a2						_VMCFail:
.a4a2		68		pla				pla
.a4a3						_VMCFail2:
.a4a3		7a		ply				ply
.a4a4		38		sec				sec
.a4a5		60		rts				rts
.a4a6						_VMCSuccess:
.a4a6		a9 00		lda #$00			lda 	#0 							; construct final
.a4a8		20 62 a0	jsr $a062			jsr 	EncodeNumber 				; by sending a duff value.
.a4ab		68		pla				pla 								; if it was -ve
.a4ac		c9 2d		cmp #$2d			cmp 	#"-"
.a4ae		d0 03		bne $a4b3			bne 	_VMCNotNegative
.a4b0		20 34 a7	jsr $a734			jsr		NSMNegate 					; negate it.
.a4b3						_VMCNotNegative:
.a4b3		7a		ply				ply
.a4b4		18		clc				clc
.a4b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a4b6						ChrUnary:
.a4b6		fa		plx				plx 								; restore stack pos
.a4b7		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a4ba		48		pha				pha
.a4bb		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a4be		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4c0		20 81 b1	jsr $b181			jsr 	StringTempAllocate
.a4c3		68		pla				pla 								; write number to it
.a4c4		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a4c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a4c8						ItemCountUnary:
.a4c8		fa		plx				plx
.a4c9		20 ca a6	jsr $a6ca			jsr 	EvaluateString
.a4cc		e8		inx				inx
.a4cd		20 40 a5	jsr $a540			jsr 	ICGetSeperator
.a4d0		ca		dex				dex
.a4d1		20 61 a5	jsr $a561			jsr 	ICSetPointer 				; zTemp0 = (string)
.a4d4		20 72 a7	jsr $a772			jsr 	NSMSetZero 					; zero the result.
.a4d7		5a		phy				phy
.a4d8		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a4da						_ICULoop:
.a4da		c8		iny				iny
.a4db		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4dd		cd a1 07	cmp $07a1			cmp 	ICSeperator
.a4e0		d0 02		bne $a4e4			bne 	_ICUNoMatch
.a4e2		f6 58		inc $58,x			inc 	NSMantissa0,x
.a4e4						_ICUNoMatch:
.a4e4		c9 00		cmp #$00			cmp 	#0
.a4e6		d0 f2		bne $a4da			bne 	_ICULoop
.a4e8		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a4ea		7a		ply				ply
.a4eb		60		rts				rts
.a4ec						ItemGetUnary:
.a4ec		fa		plx				plx
.a4ed		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; search string
.a4f0		20 07 98	jsr $9807			jsr 	CheckComma
.a4f3		e8		inx				inx 								; get count
.a4f4		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.a4f7		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a4f9		f0 61		beq $a55c			beq 	ICGSRange
.a4fb		e8		inx				inx 								; get seperator.
.a4fc		20 40 a5	jsr $a540			jsr 	ICGetSeperator
.a4ff		ca		dex				dex
.a500		ca		dex				dex
.a501		5a		phy				phy
.a502		20 61 a5	jsr $a561			jsr 	ICSetPointer 				; zTemp0 points to string.
.a505		a0 00		ldy #$00			ldy 	#0
.a507		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a509		f0 0e		beq $a519			beq 	_IGUFoundStart
.a50b						_IGUFindNext:
.a50b		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a50d		f0 4d		beq $a55c			beq 	ICGSRange 					; eol, not found.
.a50f		c8		iny				iny
.a510		cd a1 07	cmp $07a1			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a513		d0 f6		bne $a50b			bne 	_IGUFindNext
.a515		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a517		d0 f2		bne $a50b			bne 	_IGUFindNext
.a519						_IGUFoundStart:
.a519		84 38		sty $38				sty 	zTemp1 						; save start
.a51b		88		dey				dey
.a51c						_IGUFindLength:
.a51c		c8		iny				iny 								; forward till seperator/EOS
.a51d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a51f		f0 05		beq $a526			beq 	_IGUFoundLength
.a521		cd a1 07	cmp $07a1			cmp 	ICSeperator
.a524		d0 f6		bne $a51c			bne 	_IGUFindLength
.a526						_IGUFoundLength:
.a526		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a528		98		tya				tya 								; calculate length of new string.
.a529		38		sec				sec
.a52a		e5 38		sbc $38				sbc 	zTemp1
.a52c		20 81 b1	jsr $b181			jsr 	StringTempAllocate 			; allocate bytes for it.
.a52f		a4 38		ldy $38				ldy 	zTemp1
.a531						_IGUCopySub:
.a531		c4 39		cpy $39				cpy 	zTemp1+1
.a533		f0 08		beq $a53d			beq 	_IGUCopyOver
.a535		b1 36		lda ($36),y			lda 	(zTemp0),y
.a537		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a53a		c8		iny				iny
.a53b		80 f4		bra $a531			bra 	_IGUCopySub
.a53d						_IGUCopyOver:
.a53d		7a		ply				ply
.a53e		60		rts				rts
>a53f		db						.byte 	$DB 						; causes a break in the emulator
.a540						ICGetSeperator:
.a540		20 07 98	jsr $9807			jsr 	CheckComma 					; preceding comma
.a543		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; seperator string
.a546		20 61 a5	jsr $a561			jsr 	ICSetPointer 				; access it
.a549		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a54b		8d a1 07	sta $07a1			sta 	ICSeperator
.a54e		f0 0c		beq $a55c			beq 	ICGSRange 					; check LEN(seperator) = 1
.a550		5a		phy				phy
.a551		a0 01		ldy #$01			ldy 	#1
.a553		b1 36		lda ($36),y			lda 	(zTemp0),y
.a555		d0 05		bne $a55c			bne 	ICGSRange
.a557		7a		ply				ply
.a558		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; check following )
.a55b		60		rts				rts
.a55c						ICGSRange:
.a55c		a9 04		lda #$04		lda	#4
.a55e		4c 18 98	jmp $9818		jmp	ErrorHandler
.a561						ICSetPointer:
.a561		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a563		85 36		sta $36				sta 	zTemp0
.a565		b5 60		lda $60,x			lda 	NSMantissa1,x
.a567		85 37		sta $37				sta 	zTemp0+1
.a569		60		rts				rts
.07a1						ICSeperator:
>07a1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a56a						SpcUnary:
.a56a		fa		plx				plx 								; restore stack pos
.a56b		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger			; get value
.a56e		5a		phy				phy
.a56f		48		pha				pha 								; save count
.a570		20 81 b1	jsr $b181			jsr 	StringTempAllocate
.a573		7a		ply				ply 								; to do count in Y
.a574						_SpcLoop:
.a574		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a576		f0 08		beq $a580			beq 	_SpcExit
.a578		a9 20		lda #$20			lda 	#32
.a57a		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a57d		88		dey				dey
.a57e		80 f4		bra $a574			bra 	_SpcLoop
.a580						_SpcExit:
.a580		7a		ply				ply
.a581		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a584		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a585						Unary_Str:
.a585		fa		plx				plx
.a586		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber  			; get number
.a589		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; closing bracket
.a58c		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a58e		20 a7 a5	jsr $a5a7			jsr 	ConvertNumberToString 		; do the conversion.
.a591		a9 21		lda #$21			lda		#33 						; create buffer
.a593		20 81 b1	jsr $b181			jsr 	StringTempAllocate 			; allocate memory
.a596		da		phx				phx  								; copy the converted string into the buffer.
.a597		a2 00		ldx #$00			ldx 	#0
.a599						_USCopy:
.a599		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a59c		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a59f		e8		inx				inx
.a5a0		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a5a3		d0 f4		bne $a599			bne 	_USCopy
.a5a5		fa		plx				plx
.a5a6		60		rts				rts
.a5a7						ConvertNumberToString:
.a5a7		5a		phy				phy 								; save code position
.a5a8		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a5ab		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a5ae		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a5b0		10 09		bpl $a5bb			bpl 	_CNTSNotNegative
.a5b2		29 7f		and #$7f			and 	#$7F 						; make +ve
.a5b4		95 50		sta $50,x			sta 	NSStatus,x
.a5b6		a9 2d		lda #$2d			lda 	#"-"
.a5b8		20 1c a6	jsr $a61c			jsr 	WriteDecimalBuffer
.a5bb						_CNTSNotNegative:
.a5bb		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a5bd		f0 12		beq $a5d1			beq 	_CNTSNotFloat
.a5bf		e8		inx				inx 								; round up so we don't get too many 6.999999
.a5c0		a9 01		lda #$01			lda 	#1
.a5c2		20 74 a7	jsr $a774			jsr 	NSMSetByte
.a5c5		ca		dex				dex
.a5c6		b5 78		lda $78,x			lda		NSExponent,x
.a5c8		95 79		sta $79,x			sta 	NSExponent+1,x
.a5ca		a9 08		lda #$08			lda 	#NSTFloat
.a5cc		95 51		sta $51,x			sta 	NSStatus+1,x
.a5ce		20 67 9d	jsr $9d67			jsr 	FloatAdd
.a5d1						_CNTSNotFloat:
.a5d1		20 fe a5	jsr $a5fe			jsr 	MakePlusTwoString 			; do the integer part.
.a5d4		20 2d 9e	jsr $9e2d			jsr 	FloatFractionalPart 		; get the fractional part
.a5d7		20 de 9e	jsr $9ede			jsr 	NSNormalise					; normalise , exit if zero
.a5da		f0 20		beq $a5fc			beq 	_CNTSExit
.a5dc		a9 2e		lda #$2e			lda 	#"."
.a5de		20 1c a6	jsr $a61c			jsr 	WriteDecimalBuffer 			; write decimal place
.a5e1						_CNTSDecimal:
.a5e1		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a5e4		30 16		bmi $a5fc			bmi 	_CNTSExit
.a5e6		e8		inx				inx 								; x 10.0
.a5e7		a9 0a		lda #$0a			lda 	#10
.a5e9		20 74 a7	jsr $a774			jsr 	NSMSetByte
.a5ec		a9 08		lda #$08			lda 	#NSTFloat
.a5ee		95 50		sta $50,x			sta 	NSStatus,x
.a5f0		ca		dex				dex
.a5f1		20 ac 9e	jsr $9eac			jsr 	FloatMultiply
.a5f4		20 fe a5	jsr $a5fe			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a5f7		20 2d 9e	jsr $9e2d			jsr 	FloatFractionalPart 		; get the fractional part
.a5fa		80 e5		bra $a5e1			bra 	_CNTSDecimal 				; keep going.
.a5fc						_CNTSExit:
.a5fc		7a		ply				ply
.a5fd		60		rts				rts
.a5fe						MakePlusTwoString:
.a5fe		da		phx				phx
.a5ff		20 55 a7	jsr $a755			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a602		e8		inx				inx 								; access it
.a603		e8		inx				inx
.a604		20 85 9e	jsr $9e85			jsr 	FloatIntegerPart 			; make it an integer
.a607		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a609		20 97 9c	jsr $9c97			jsr 	ConvertInt32
.a60c		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a60e						_MPTSCopy:
.a60e		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a611		20 1c a6	jsr $a61c			jsr 	WriteDecimalBuffer
.a614		e8		inx				inx
.a615		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a618		d0 f4		bne $a60e			bne 	_MPTSCopy
.a61a		fa		plx				plx
.a61b		60		rts				rts
.a61c						WriteDecimalBuffer:
.a61c		da		phx				phx
.a61d		ae 11 04	ldx $0411			ldx 	dbOffset
.a620		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a623		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a626		ee 11 04	inc $0411			inc 	dbOffset
.a629		fa		plx				plx
.a62a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a62b						Unary_Left:
.a62b		fa		plx				plx
.a62c		18		clc				clc 								; only one parameter
.a62d		20 90 a6	jsr $a690			jsr 	SubstringInitial 			; set up.
.a630		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a632		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a634		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a636		80 25		bra $a65d			bra 	SubstringMain
.a638						Unary_Right:
.a638		fa		plx				plx
.a639		18		clc				clc 								; only one parameter
.a63a		20 90 a6	jsr $a690			jsr 	SubstringInitial 			; set up.
.a63d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a63f		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a641		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a643		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a645		b0 02		bcs $a649			bcs 	_URNotUnderflow
.a647		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a649						_URNotUnderflow:
.a649		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a64b		80 10		bra $a65d			bra 	SubstringMain
.a64d						Unary_Mid:
.a64d		fa		plx				plx
.a64e		38		sec				sec 								; two parameters
.a64f		20 90 a6	jsr $a690			jsr 	SubstringInitial 			; set up.
.a652		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a654		f0 04		beq $a65a			beq 	_UMError
.a656		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a658		80 03		bra $a65d			bra 	SubstringMain
.a65a						_UMError:
.a65a		4c 26 aa	jmp $aa26			jmp 	ArgumentError
.a65d						SubstringMain:
.a65d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a65f		d5 78		cmp $78,x			cmp 	NSExponent,x
.a661		b0 27		bcs $a68a			bcs 	_SSMNull 					; if so, return an empty string.
.a663		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a665		f0 23		beq $a68a			beq 	_SSMNull 					; return empty string.
.a667		18		clc				clc 								; add the offset +1 to the address and
.a668		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a66a		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a66c		85 36		sta $36				sta 	zTemp0
.a66e		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a670		69 00		adc #$00			adc 	#0
.a672		85 37		sta $37				sta 	zTemp0+1
.a674						_SSMNoCarry:
.a674		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a676		20 81 b1	jsr $b181			jsr 	StringTempAllocate 			; allocate that many characters
.a679		5a		phy				phy 								; save Y
.a67a		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a67c						_SSMCopy:
.a67c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a67e		f0 08		beq $a688			beq 	_SSMEString 				; no more to copy
.a680		20 ba b1	jsr $b1ba			jsr 	StringTempWrite 			; and write it out.
.a683		c8		iny				iny
.a684		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a686		d0 f4		bne $a67c			bne 	_SSMCopy
.a688						_SSMEString:
.a688		7a		ply				ply
.a689						_SSMExit:
.a689		60		rts				rts
.a68a						_SSMNull:
.a68a		a9 00		lda #$00			lda 	#0
.a68c		20 81 b1	jsr $b181			jsr 	StringTempAllocate
.a68f		60		rts				rts
.a690						SubstringInitial:
.a690		da		phx				phx 								; save initial stack position
.a691		08		php				php 								; save carry on stack indicating 2 parameters
.a692		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; get a string
.a695		5a		phy				phy 								; calculate length to exponent.
.a696		a0 ff		ldy #$ff			ldy 	#$FF
.a698						_SIFindLength:
.a698		c8		iny				iny
.a699		b1 36		lda ($36),y			lda 	(zTemp0),y
.a69b		d0 fb		bne $a698			bne 	_SIFindLength
.a69d		98		tya				tya
.a69e		95 78		sta $78,x			sta 	NSExponent,x
.a6a0		7a		ply				ply
.a6a1		e8		inx				inx
.a6a2		20 07 98	jsr $9807			jsr 	CheckComma 					; comma next
.a6a5		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get next parameter
.a6a8		28		plp				plp 								; is it the last parameter ?
.a6a9		90 07		bcc $a6b2			bcc 	_SSIExit 					; if so, exit.
.a6ab		e8		inx				inx
.a6ac		20 07 98	jsr $9807			jsr 	CheckComma 					; comma next
.a6af		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get last parameter
.a6b2						_SSIExit:
.a6b2		fa		plx				plx
.a6b3		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; check closing bracket
.a6b6		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a6b7						EvaluateValue:
.a6b7		48		pha				pha
.a6b8		20 1c 9d	jsr $9d1c			jsr		EvaluateExpression 			; expression
.a6bb		20 df 9f	jsr $9fdf			jsr 	Dereference					; derefernce it
.a6be		68		pla				pla
.a6bf		60		rts				rts
.a6c0						EvaluateNumber:
.a6c0		20 b7 a6	jsr $a6b7			jsr 	EvaluateValue 				; get a value
.a6c3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a6c5		29 10		and #$10			and 	#NSBIsString
.a6c7		d0 13		bne $a6dc			bne 	HelperTypeError
.a6c9		60		rts				rts
.a6ca						EvaluateString:
.a6ca		20 b7 a6	jsr $a6b7			jsr 	EvaluateValue 				; get a value
.a6cd		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a6cf		29 10		and #$10			and 	#NSBIsString
.a6d1		f0 09		beq $a6dc			beq 	HelperTypeError
.a6d3						CopyAddressToTemp0:
.a6d3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a6d5		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a6d7		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6d9		85 37		sta $37				sta 	zTemp0+1
.a6db		60		rts				rts
.a6dc						HelperTypeError:
.a6dc		4c 21 aa	jmp $aa21			jmp 	TypeError
.a6df						EvaluateInteger:
.a6df		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber
.a6e2		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a6e4		d0 09		bne $a6ef			bne 	HelperValueError 			; if not, it's a float.
.a6e6		60		rts				rts
.a6e7						EvaluateUnsignedInteger:
.a6e7		20 df a6	jsr $a6df			jsr 	EvaluateInteger 			; check integer is +ve
.a6ea		b5 50		lda $50,x			lda 	NSStatus,x
.a6ec		30 01		bmi $a6ef			bmi 	HelperValueError
.a6ee		60		rts				rts
.a6ef						HelperValueError:
.a6ef		4c 26 aa	jmp $aa26			jmp 	ArgumentError
.a6f2						Evaluate16BitInteger:
.a6f2		20 e7 a6	jsr $a6e7			jsr	 	EvaluateUnsignedInteger		; get integer
.a6f5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6f7		15 68		ora $68,x			ora 	NSMantissa2,x
.a6f9		d0 f4		bne $a6ef			bne 	HelperValueError
.a6fb		60		rts				rts
.a6fc						Evaluate16BitIntegerSigned:
.a6fc		20 df a6	jsr $a6df			jsr	 	EvaluateInteger				; get integer
.a6ff		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a701		15 68		ora $68,x			ora 	NSMantissa2,x
.a703		d0 ea		bne $a6ef			bne 	HelperValueError
.a705		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a707		10 03		bpl $a70c			bpl 	_EISNotSigned
.a709		20 3b a7	jsr $a73b			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a70c						_EISNotSigned:
.a70c		60		rts				rts
.a70d						Evaluate8BitInteger:
.a70d		20 e7 a6	jsr $a6e7			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a710		d0 dd		bne $a6ef			bne 	HelperValueError
.a712		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a714		15 68		ora $68,x			ora 	NSMantissa2,x
.a716		15 60		ora $60,x			ora 	NSMantissa1,x
.a718		d0 d5		bne $a6ef			bne 	HelperValueError
.a71a		b5 58		lda $58,x			lda 	NSMantissa0,x
.a71c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a71d						Multiply8x8:
.a71d		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a71e		85 36		sta $36			  	sta 	zTemp0
.a720		86 37		stx $37				stx 	zTemp0+1
.a722		a9 00		lda #$00			lda 	#0
.a724		a2 08		ldx #$08			ldx 	#8
.a726						_M88Loop:
.a726		90 03		bcc $a72b			bcc 	_M88NoAdd
.a728		18		clc				clc
.a729		65 37		adc $37				adc 	zTemp0+1
.a72b						_M88NoAdd:
.a72b		6a		ror a				ror 	a
.a72c		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a72e		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a72f		d0 f5		bne $a726			bne 	_M88Loop
.a731		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a733		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a734						NSMNegate:
.a734		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a736		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a738		95 50		sta $50,x			sta 	NSStatus,x
.a73a		60		rts				rts
.a73b						NSMNegateMantissa:
.a73b		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a73c		a9 00		lda #$00			lda 	#0
.a73e		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a740		95 58		sta $58,x			sta 	NSMantissa0,x
.a742		a9 00		lda #$00			lda 	#0
.a744		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a746		95 60		sta $60,x			sta 	NSMantissa1,x
.a748		a9 00		lda #$00			lda 	#0
.a74a		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a74c		95 68		sta $68,x			sta 	NSMantissa2,x
.a74e		a9 00		lda #$00			lda 	#0
.a750		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a752		95 70		sta $70,x			sta 	NSMantissa3,x
.a754		60		rts				rts
.a755						NSMShiftUpTwo:
.a755		b5 58		lda $58,x			lda 	NSMantissa0,x
.a757		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a759		b5 60		lda $60,x			lda 	NSMantissa1,x
.a75b		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a75d		b5 68		lda $68,x			lda 	NSMantissa2,x
.a75f		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a761		b5 70		lda $70,x			lda 	NSMantissa3,x
.a763		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a765		b5 78		lda $78,x			lda 	NSExponent,x
.a767		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a769		b5 50		lda $50,x			lda 	NSStatus,x
.a76b		95 52		sta $52,x			sta 	NSStatus+2,x
.a76d		60		rts				rts
.a76e						NSMSetZeroMantissaOnly:
.a76e		a9 00		lda #$00			lda 	#0
.a770		80 06		bra $a778			bra 	NSMSetMantissa
.a772						NSMSetZero:
.a772		a9 00		lda #$00			lda 	#0
.a774						NSMSetByte:
.a774		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a776		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a778						NSMSetMantissa:
.a778		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a77a		74 60		stz $60,x			stz 	NSMantissa1,x
.a77c		74 68		stz $68,x			stz 	NSMantissa2,x
.a77e		74 70		stz $70,x			stz 	NSMantissa3,x
.a780		60		rts				rts
.a781						NSMShiftLeft:
.a781		18		clc				clc
.a782						NSMRotateLeft:
.a782		36 58		rol $58,x			rol 	NSMantissa0,x
.a784		36 60		rol $60,x			rol		NSMantissa1,x
.a786		36 68		rol $68,x			rol		NSMantissa2,x
.a788		36 70		rol $70,x			rol		NSMantissa3,x
.a78a		60		rts				rts
.a78b						NSMShiftRight:
.a78b		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a78d		76 68		ror $68,x			ror		NSMantissa2,x
.a78f		76 60		ror $60,x			ror		NSMantissa1,x
.a791		76 58		ror $58,x			ror		NSMantissa0,x
.a793		60		rts				rts
.a794						NSMIsZero:
.a794		b5 70		lda $70,x			lda 	NSMantissa3,x
.a796		15 68		ora $68,x			ora		NSMantissa2,x
.a798		15 60		ora $60,x			ora		NSMantissa1,x
.a79a		15 58		ora $58,x			ora		NSMantissa0,x
.a79c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.a79d						UnaryGetTime:
.a79d		a9 00		lda #$00			lda 	#0
.a79f		80 02		bra $a7a3			bra 	UGDTMain
.a7a1						UnaryGetDate:
.a7a1		a9 03		lda #$03			lda 	#3
.a7a3						UGDTMain:
.a7a3		fa		plx				plx 								; get stack position back
.a7a4		48		pha				pha 								; save table offset
.a7a5		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger			; ignored parameter
.a7a8		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; closing )
.a7ab		68		pla				pla 								; table offset in A
.a7ac		5a		phy				phy 								; saving Y
.a7ad		a8		tay				tay 								; table offset in Y
.a7ae		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a7b0		20 81 b1	jsr $b181			jsr 	StringTempAllocate
.a7b3		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a7b5		48		pha				pha
.a7b6		64 01		stz $01				stz 	1
.a7b8		20 cb a7	jsr $a7cb			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a7bb		20 c6 a7	jsr $a7c6			jsr 	UGDTColonDigit
.a7be		20 c6 a7	jsr $a7c6			jsr 	UGDTColonDigit
.a7c1		68		pla				pla 								; restore I/O select
.a7c2		85 01		sta $01				sta 	1
.a7c4		7a		ply				ply  								; restore code position
.a7c5		60		rts				rts
.a7c6						UGDTColonDigit:
.a7c6		a9 3a		lda #$3a			lda 	#':'
.a7c8		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a7cb						UGDTDigit:
.a7cb		da		phx				phx 								; save X
.a7cc		b9 eb a7	lda $a7eb,y			lda 	RTCROffset,y 				; get offset in RTC register
.a7cf		aa		tax				tax
.a7d0		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a7d3		39 f1 a7	and $a7f1,y			and 	RTCRMask,y 					; and with Mask.
.a7d6		fa		plx				plx
.a7d7		48		pha				pha 								; output in BCD
.a7d8		4a		lsr a				lsr 	a
.a7d9		4a		lsr a				lsr 	a
.a7da		4a		lsr a				lsr 	a
.a7db		4a		lsr a				lsr 	a
.a7dc		09 30		ora #$30			ora 	#48
.a7de		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a7e1		68		pla				pla
.a7e2		29 0f		and #$0f			and 	#15
.a7e4		09 30		ora #$30			ora 	#48
.a7e6		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a7e9		c8		iny				iny
.a7ea		60		rts				rts
.a7eb						RTCROffset:
>a7eb		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a7f1						RTCRMask:
>a7f1		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.a7f7						AscGet:
.a7f7		fa		plx				plx 								; restore stack pos
.a7f8						AscGet2:
.a7f8		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a7fb		20 34 81	jsr $8134	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a7fe		d0 0b		bne $a80b			bne 	_AGBreak
.a800		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; wait for key.
.a803		c9 00		cmp #$00			cmp 	#0
.a805		f0 f4		beq $a7fb			beq 	_AGKey
.a807		20 74 a7	jsr $a774			jsr 	NSMSetByte
.a80a		60		rts				rts
.a80b						_AGBreak:
.a80b		a9 01		lda #$01		lda	#1
.a80d		4c 18 98	jmp $9818		jmp	ErrorHandler
.a810						AscInkey:
.a810		fa		plx				plx 								; restore stack pos
.a811						AscInkey2:
.a811		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a814		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a817		20 74 a7	jsr $a774			jsr 	NSMSetByte
.a81a		60		rts				rts
.a81b						ChrGet:
.a81b		fa		plx				plx
.a81c		20 f8 a7	jsr $a7f8			jsr 	AscGet2
.a81f		4c 26 a8	jmp $a826			jmp 	GetInkeyToString
.a822						ChrInkey:
.a822		fa		plx				plx
.a823		20 11 a8	jsr $a811			jsr 	AscInkey2
.a826						GetInkeyToString:
.a826		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a828		f0 0b		beq $a835			beq 	_GKISNull
.a82a		48		pha				pha
.a82b		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a82d		20 81 b1	jsr $b181			jsr 	StringTempAllocate
.a830		68		pla				pla 								; write number to it
.a831		20 ba b1	jsr $b1ba			jsr 	StringTempWrite
.a834		60		rts				rts
.a835						_GKISNull:
.a835		a9 00		lda #$00			lda 	#0
.a837		20 81 b1	jsr $b181			jsr 	StringTempAllocate
.a83a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.a83b						KeyDown:
.a83b		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process outstanding events.
.a83e		fa		plx				plx 								; restore stack pos
.a83f		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; key to check.
.a842		48		pha				pha 								; check right bracket.
.a843		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a846		68		pla				pla
.a847		20 61 82	jsr $8261			jsr 	KeyboardConvertXA 			; get offset and mask.
.a84a		3d 5f 06	and $065f,x			and 	KeyStatus,x 				; is it zero ?
.a84d		f0 03		beq $a852			beq 	_KeyUp
.a84f		4c 85 98	jmp $9885			jmp 	ReturnTrue
.a852		4c 90 98	jmp $9890	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.a855						Unary_Random:
.a855		fa		plx				plx
.a856		20 a6 a8	jsr $a8a6			jsr 	URCopyToMantissa  			; put random # in mantissa
.a859		b1 30		lda ($30),y			lda 	(codePtr),y
.a85b		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a85d		f0 08		beq $a867			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a85f		e8		inx				inx
.a860		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a863		ca		dex				dex
.a864		20 d7 99	jsr $99d7			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a867						_URNoModulus:
.a867		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a869		74 78		stz $78,x			stz 	NSExponent,x
.a86b		20 ff 97	jsr $97ff			jsr 	CheckRightBracket
.a86e		60		rts				rts
.a86f						Unary_Rnd:
.a86f		fa		plx				plx
.a870		20 c0 a6	jsr $a6c0			jsr 	EvaluateNumber 				; number to use.
.a873		20 ff 97	jsr $97ff			jsr 	CheckRightBracket 			; closing bracket
.a876		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a878		10 20		bpl $a89a			bpl 	_URDontSeed
.a87a		a5 01		lda $01				lda 	1 							; switch to page 0
.a87c		48		pha				pha
.a87d		64 01		stz $01				stz 	1
.a87f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a881		49 17		eor #$17			eor 	#$17
.a883		8d a4 d6	sta $d6a4			sta 	$D6A4
.a886		b5 60		lda $60,x			lda 	NSMantissa1,x
.a888		49 a5		eor #$a5			eor 	#$A5
.a88a		8d a5 d6	sta $d6a5			sta 	$D6A5
.a88d		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a88f		8d a6 d6	sta $d6a6			sta 	$D6A6
.a892		a9 01		lda #$01			lda 	#1
.a894		8d a6 d6	sta $d6a6			sta 	$D6A6
.a897		68		pla				pla
.a898		85 01		sta $01				sta 	1
.a89a						_URDontSeed:
.a89a		20 a6 a8	jsr $a8a6			jsr 	URCopyToMantissa 			; copy into mantissa
.a89d		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a89f		95 78		sta $78,x			sta 	NSExponent,x
.a8a1		a9 08		lda #$08			lda 	#NSTFloat
.a8a3		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a8a5		60		rts				rts
.a8a6						URCopyToMantissa:
.a8a6		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a8a8		48		pha				pha
.a8a9		64 01		stz $01				stz 	1
.a8ab		a9 01		lda #$01			lda 	#1
.a8ad		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a8b0		ad a4 d6	lda $d6a4			lda 	$D6A4
.a8b3		95 58		sta $58,x			sta 	NSMantissa0,x
.a8b5		ad a5 d6	lda $d6a5			lda 	$D6A5
.a8b8		95 60		sta $60,x			sta 	NSMantissa1,x
.a8ba		ad a4 d6	lda $d6a4			lda 	$D6A4
.a8bd		95 68		sta $68,x			sta 	NSMantissa2,x
.a8bf		ad a5 d6	lda $d6a5			lda 	$D6A5
.a8c2		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a8c4		95 70		sta $70,x			sta 	NSMantissa3,x
.a8c6		68		pla				pla
.a8c7		85 01		sta $01				sta 	1
.a8c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a8ca						Assemble_ora:
.a8ca		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8cd		01					.byte $01
.a8ce						Assemble_and:
.a8ce		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8d1		21					.byte $21
.a8d2						Assemble_eor:
.a8d2		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8d5		41					.byte $41
.a8d6						Assemble_adc:
.a8d6		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8d9		61					.byte $61
.a8da						Assemble_sta:
.a8da		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8dd		81					.byte $81
.a8de						Assemble_lda:
.a8de		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8e1		a1					.byte $a1
.a8e2						Assemble_cmp:
.a8e2		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8e5		c1					.byte $c1
.a8e6						Assemble_sbc:
.a8e6		20 5f 83	jsr $835f		jsr	AssembleGroup1
>a8e9		e1					.byte $e1
.a8ea						Assemble_asl:
.a8ea		20 66 83	jsr $8366		jsr	AssembleGroup2
>a8ed		02					.byte $02
>a8ee		75					.byte $75
.a8ef						Assemble_rol:
.a8ef		20 66 83	jsr $8366		jsr	AssembleGroup2
>a8f2		22					.byte $22
>a8f3		75					.byte $75
.a8f4						Assemble_lsr:
.a8f4		20 66 83	jsr $8366		jsr	AssembleGroup2
>a8f7		42					.byte $42
>a8f8		75					.byte $75
.a8f9						Assemble_ror:
.a8f9		20 66 83	jsr $8366		jsr	AssembleGroup2
>a8fc		62					.byte $62
>a8fd		75					.byte $75
.a8fe						Assemble_stx:
.a8fe		20 66 83	jsr $8366		jsr	AssembleGroup2
>a901		82					.byte $82
>a902		50					.byte $50
.a903						Assemble_ldx:
.a903		20 66 83	jsr $8366		jsr	AssembleGroup2
>a906		a2					.byte $a2
>a907		d0					.byte $d0
.a908						Assemble_dec:
.a908		20 66 83	jsr $8366		jsr	AssembleGroup2
>a90b		c2					.byte $c2
>a90c		55					.byte $55
.a90d						Assemble_inc:
.a90d		20 66 83	jsr $8366		jsr	AssembleGroup2
>a910		e2					.byte $e2
>a911		55					.byte $55
.a912						Assemble_stz:
.a912		20 66 83	jsr $8366		jsr	AssembleGroup2
>a915		60					.byte $60
>a916		44					.byte $44
.a917						Assemble_bit:
.a917		20 66 83	jsr $8366		jsr	AssembleGroup2
>a91a		20					.byte $20
>a91b		55					.byte $55
.a91c						Assemble_sty:
.a91c		20 66 83	jsr $8366		jsr	AssembleGroup2
>a91f		80					.byte $80
>a920		54					.byte $54
.a921						Assemble_ldy:
.a921		20 66 83	jsr $8366		jsr	AssembleGroup2
>a924		a0					.byte $a0
>a925		d5					.byte $d5
.a926						Assemble_cpy:
.a926		20 66 83	jsr $8366		jsr	AssembleGroup2
>a929		c0					.byte $c0
>a92a		d4					.byte $d4
.a92b						Assemble_cpx:
.a92b		20 66 83	jsr $8366		jsr	AssembleGroup2
>a92e		e0					.byte $e0
>a92f		d0					.byte $d0
.a930						Assemble_tsb:
.a930		20 66 83	jsr $8366		jsr	AssembleGroup2
>a933		00					.byte $00
>a934		50					.byte $50
.a935						Assemble_trb:
.a935		20 66 83	jsr $8366		jsr	AssembleGroup2
>a938		10					.byte $10
>a939		50					.byte $50
.a93a						Assemble_jsr:
.a93a		20 66 83	jsr $8366		jsr	AssembleGroup2
>a93d		14					.byte $14
>a93e		10					.byte $10
.a93f						Assemble_jmp:
.a93f		20 66 83	jsr $8366		jsr	AssembleGroup2
>a942		40					.byte $40
>a943		10					.byte $10
.a944						Assemble_bpl:
.a944		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a947		10					.byte $10
.a948						Assemble_bmi:
.a948		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a94b		30					.byte $30
.a94c						Assemble_bvc:
.a94c		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a94f		50					.byte $50
.a950						Assemble_bvs:
.a950		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a953		70					.byte $70
.a954						Assemble_bcc:
.a954		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a957		90					.byte $90
.a958						Assemble_bcs:
.a958		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a95b		b0					.byte $b0
.a95c						Assemble_bne:
.a95c		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a95f		d0					.byte $d0
.a960						Assemble_beq:
.a960		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a963		f0					.byte $f0
.a964						Assemble_bra:
.a964		20 b7 83	jsr $83b7		jsr	AssembleGroup3
>a967		80					.byte $80
.a968						Assemble_brk:
.a968		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a96b		00					.byte $00
.a96c						Assemble_php:
.a96c		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a96f		08					.byte $08
.a970						Assemble_clc:
.a970		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a973		18					.byte $18
.a974						Assemble_plp:
.a974		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a977		28					.byte $28
.a978						Assemble_sec:
.a978		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a97b		38					.byte $38
.a97c						Assemble_rti:
.a97c		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a97f		40					.byte $40
.a980						Assemble_pha:
.a980		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a983		48					.byte $48
.a984						Assemble_cli:
.a984		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a987		58					.byte $58
.a988						Assemble_phy:
.a988		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a98b		5a					.byte $5a
.a98c						Assemble_rts:
.a98c		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a98f		60					.byte $60
.a990						Assemble_pla:
.a990		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a993		68					.byte $68
.a994						Assemble_sei:
.a994		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a997		78					.byte $78
.a998						Assemble_ply:
.a998		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a99b		7a					.byte $7a
.a99c						Assemble_dey:
.a99c		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a99f		88					.byte $88
.a9a0						Assemble_txa:
.a9a0		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9a3		8a					.byte $8a
.a9a4						Assemble_tya:
.a9a4		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9a7		98					.byte $98
.a9a8						Assemble_txs:
.a9a8		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9ab		9a					.byte $9a
.a9ac						Assemble_tay:
.a9ac		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9af		a8					.byte $a8
.a9b0						Assemble_tax:
.a9b0		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9b3		aa					.byte $aa
.a9b4						Assemble_clv:
.a9b4		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9b7		b8					.byte $b8
.a9b8						Assemble_tsx:
.a9b8		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9bb		ba					.byte $ba
.a9bc						Assemble_iny:
.a9bc		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9bf		c8					.byte $c8
.a9c0						Assemble_dex:
.a9c0		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9c3		ca					.byte $ca
.a9c4						Assemble_cld:
.a9c4		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9c7		d8					.byte $d8
.a9c8						Assemble_phx:
.a9c8		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9cb		da					.byte $da
.a9cc						Assemble_stp:
.a9cc		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9cf		db					.byte $db
.a9d0						Assemble_inx:
.a9d0		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9d3		e8					.byte $e8
.a9d4						Assemble_nop:
.a9d4		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9d7		ea					.byte $ea
.a9d8						Assemble_sed:
.a9d8		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9db		f8					.byte $f8
.a9dc						Assemble_plx:
.a9dc		20 eb 83	jsr $83eb		jsr	AssembleGroup4
>a9df		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a9e0						DecimalScalarTable:
>a9e0		66 66 66 66				.dword $66666666 ; 0.1
>a9e4		de					.byte $de
>a9e5		1f 85 eb 51				.dword $51eb851f ; 0.01
>a9e9		db					.byte $db
>a9ea		4c 37 89 41				.dword $4189374c ; 0.001
>a9ee		d8					.byte $d8
>a9ef		ac 8b db 68				.dword $68db8bac ; 0.0001
>a9f3		d4					.byte $d4
>a9f4		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a9f8		d1					.byte $d1
>a9f9		83 de 1b 43				.dword $431bde83 ; 1e-06
>a9fd		ce					.byte $ce
>a9fe		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>aa02		ca					.byte $ca
>aa03		89 3b e6 55				.dword $55e63b89 ; 1e-08
>aa07		c7					.byte $c7
>aa08		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>aa0c		c4					.byte $c4
>aa0d		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>aa11		c0					.byte $c0
>aa12		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>aa16		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.aa17						SyntaxError:
.aa17		a9 02		lda #$02		lda	#2
.aa19		4c 18 98	jmp $9818		jmp	ErrorHandler
.aa1c						RangeError:
.aa1c		a9 04		lda #$04		lda	#4
.aa1e		4c 18 98	jmp $9818		jmp	ErrorHandler
.aa21						TypeError:
.aa21		a9 05		lda #$05		lda	#5
.aa23		4c 18 98	jmp $9818		jmp	ErrorHandler
.aa26						ArgumentError:
.aa26		a9 07		lda #$07		lda	#7
.aa28		4c 18 98	jmp $9818		jmp	ErrorHandler
.aa2b						NotDoneError:
.aa2b		a9 0c		lda #$0c		lda	#12
.aa2d		4c 18 98	jmp $9818		jmp	ErrorHandler
.aa30						ErrorText:
>aa30		42 72 65 61 6b 00			.text	"Break",0
>aa36		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>aa3e		72 72 6f 72 00
>aa43		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aa4b		20 62 79 20 7a 65 72 6f 00
>aa54		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aa5c		61 6e 67 65 00
>aa61		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aa69		6d 61 74 63 68 00
>aa6f		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aa77		65 6d 6f 72 79 00
>aa7d		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>aa85		61 72 67 75 6d 65 6e 74 00
>aa8e		53 74 6f 70 00				.text	"Stop",0
>aa93		53 74 72 69 6e 67 20 74			.text	"String too long",0
>aa9b		6f 6f 20 6c 6f 6e 67 00
>aaa3		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>aaab		6e 20 66 61 69 6c 65 64 00
>aab4		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>aabc		61 74 61 00
>aac0		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>aac8		65 6e 74 65 64 00
>aace		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>aad6		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>aae2		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>aaea		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>aaf7		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aaff		74 68 6f 75 74 20 52 65 70 65 61 74 00
>ab0c		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ab14		68 6f 75 74 20 57 68 69 6c 65 00
>ab1f		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ab27		68 6f 75 74 20 46 6f 72 00
>ab30		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ab38		61 63 6b 20 66 75 6c 6c 00
>ab41		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ab49		75 63 74 75 72 65 00
>ab50		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ab58		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ab65		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ab6d		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ab7b		41 72 72 61 79 20 73 69			.text	"Array size",0
>ab83		7a 65 00
>ab86		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ab8e		79 20 69 6e 64 65 78 00
>ab96		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>ab9e		74 20 64 65 63 6c 61 72 65 64 00
>aba9		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>abb1		20 66 6f 75 6e 64 00
>abb8		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>abc0		65 72 72 6f 72 00
>abc6		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>abce		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e7fa		09 09 32 38 2f 30 31 2f			.text 9,9,"28/01/23 32"
>e802		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.abd4						MemoryDeleteLine:
.abd4		20 f3 ab	jsr $abf3			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.abd7		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.abd9		a8		tay				tay
.abda						_MDDLLoop:
.abda		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.abdc		92 30		sta ($30)			sta 	(codePtr)
.abde		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.abe0		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.abe2		d0 07		bne $abeb			bne 	_MDLDLNext
.abe4		a5 31		lda $31				lda 	codePtr+1
.abe6		c5 3b		cmp $3b				cmp 	zTemp2+1
.abe8		d0 01		bne $abeb			bne 	_MDLDLNext
.abea						_MDDLExit:
.abea		60		rts				rts
.abeb						_MDLDLNext:
.abeb		e6 30		inc $30				inc 	codePtr						; next byte
.abed		d0 eb		bne $abda			bne 	_MDDLLoop
.abef		e6 31		inc $31				inc 	codePtr+1
.abf1		80 e7		bra $abda			bra 	_MDDLLoop
.abf3						IMemoryFindEnd:
.abf3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.abf5		85 3a		sta $3a				sta 	0+zTemp2
.abf7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.abf9		85 3b		sta $3b				sta 	1+zTemp2
.abfb						_MDLFELoop:
.abfb		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.abfd		f0 0b		beq $ac0a			beq 	_MDLFEExit
.abff		18		clc				clc
.ac00		65 3a		adc $3a				adc 	zTemp2
.ac02		85 3a		sta $3a				sta 	zTemp2
.ac04		90 f5		bcc $abfb			bcc 	_MDLFELoop
.ac06		e6 3b		inc $3b				inc 	zTemp2+1
.ac08		80 f1		bra $abfb			bra 	_MDLFELoop
.ac0a						_MDLFEExit:
.ac0a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.ac0b						MemoryInsertLine:
.ac0b		08		php				php
.ac0c		20 f3 ab	jsr $abf3			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac0f		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.ac11		1a		inc a				inc 	a
.ac12		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ac14		b0 36		bcs $ac4c			bcs 	_MDLIError 					; no, fail.
.ac16		28		plp				plp 								; do at a specific point or the end ?
.ac17		90 08		bcc $ac21			bcc 	_MDLIFound 					; if specific point already set.
.ac19		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.ac1b		85 30		sta $30				sta 	codePtr 					; end.
.ac1d		a5 3b		lda $3b				lda 	zTemp2+1
.ac1f		85 31		sta $31				sta 	codePtr+1
.ac21						_MDLIFound:
.ac21		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ac24		a8		tay				tay
.ac25						_MDLIInsert:
.ac25		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.ac27		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ac29		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ac2b		c5 3a		cmp $3a				cmp 	zTemp2
.ac2d		d0 06		bne $ac35			bne 	_MDLINext
.ac2f		a5 31		lda $31				lda 	codePtr+1
.ac31		c5 3b		cmp $3b				cmp 	zTemp2+1
.ac33		f0 0a		beq $ac3f			beq 	_MDLIHaveSpace
.ac35						_MDLINext:
.ac35		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.ac37		d0 02		bne $ac3b			bne 	_MDLINoBorrow
.ac39		c6 3b		dec $3b				dec 	zTemp2+1
.ac3b						_MDLINoBorrow:
.ac3b		c6 3a		dec $3a				dec 	zTemp2
.ac3d		80 e6		bra $ac25			bra 	_MDLIInsert
.ac3f						_MDLIHaveSpace:
.ac3f		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.ac42		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.ac43						_MDLICopy:
.ac43		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ac46		91 30		sta ($30),y			sta 	(codePtr),y
.ac48		88		dey				dey
.ac49		10 f8		bpl $ac43			bpl 	_MDLICopy
.ac4b		60		rts				rts
.ac4c						_MDLIError:
.ac4c		a9 06		lda #$06		lda	#6
.ac4e		4c 18 98	jmp $9818		jmp	ErrorHandler
.ac51						MDLAppendLine:
.ac51		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ac53		85 36		sta $36				sta 	zTemp0
.ac55		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac57		85 38		sta $38				sta 	0+zTemp1
.ac59		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac5b		85 39		sta $39				sta 	1+zTemp1
.ac5d		b2 38		lda ($38)			lda 	(zTemp1)
.ac5f		d0 0a		bne $ac6b			bne 	_MDLANoInitialise
.ac61		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac63		8d a2 07	sta $07a2			sta 	0+AppendPointer
.ac66		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac68		8d a3 07	sta $07a3			sta 	1+AppendPointer
.ac6b						_MDLANoInitialise:
.ac6b		18		clc				clc
.ac6c		ad a2 07	lda $07a2			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ac6f		85 38		sta $38				sta 	zTemp1
.ac71		72 36		adc ($36)			adc 	(zTemp0)
.ac73		8d a2 07	sta $07a2			sta 	AppendPointer
.ac76		ad a3 07	lda $07a3			lda 	AppendPointer+1
.ac79		85 39		sta $39				sta 	zTemp1+1
.ac7b		69 00		adc #$00			adc 	#0
.ac7d		8d a3 07	sta $07a3			sta 	AppendPointer+1
.ac80		a0 00		ldy #$00			ldy 	#0
.ac82						_MDLACopy:
.ac82		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ac84		91 38		sta ($38),y			sta 	(zTemp1),y
.ac86		c8		iny				iny
.ac87		98		tya				tya
.ac88		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ac8a		d0 f6		bne $ac82			bne 	_MDLACopy
.ac8c		a9 00		lda #$00			lda 	#0 							; end of program.
.ac8e		91 38		sta ($38),y			sta 	(zTemp1),y
.ac90		60		rts				rts
.07a2						AppendPointer:
>07a2								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.ac91						MemoryNew:
.ac91		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac93		85 30		sta $30				sta 	codePtr
.ac95		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac97		85 31		sta $31				sta 	codePtr+1
.ac99		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ac9b		92 30		sta ($30)			sta 	(codePtr)
.ac9d		60		rts				rts
.ac9e						MemoryInline:
.ac9e		98		tya				tya 								; put address into stack,x
.ac9f		18		clc				clc  								; get the offset, add codePtr
.aca0		65 30		adc $30				adc 	codePtr
.aca2		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.aca4		a5 31		lda $31				lda 	codePtr+1
.aca6		69 00		adc #$00			adc 	#0
.aca8		95 60		sta $60,x			sta 	NSMantissa1,x
.acaa		74 68		stz $68,x			stz 	NSMantissa2,x
.acac		74 70		stz $70,x			stz 	NSMantissa3,x
.acae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.acaf						MemorySearch:
.acaf		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.acb1		86 37		stx $37				stx 	zTemp0+1
.acb3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.acb5		85 30		sta $30				sta 	codePtr
.acb7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.acb9		85 31		sta $31				sta 	codePtr+1
.acbb						_MTAXLoop:
.acbb		b2 30		lda ($30)			lda 	(codePtr)
.acbd		18		clc				clc
.acbe		f0 21		beq $ace1			beq 	_MTAXExit 					; reached end, exit with CC.
.acc0		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.acc2		b1 30		lda ($30),y			lda 	(codePtr),y
.acc4		38		sec				sec
.acc5		e5 36		sbc $36				sbc 	zTemp0
.acc7		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.acc9		c8		iny				iny 								; do the MSB
.acca		b1 30		lda ($30),y			lda 	(codePtr),y
.accc		e5 37		sbc $37				sbc 	zTemp0+1
.acce		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.acd0		f0 0f		beq $ace1			beq 	_MTAXExit	 				; found so exit (CS will be set)
.acd2		b0 0d		bcs $ace1			bcs 	_MTAXExit 					; current < required exit
.acd4		18		clc				clc
.acd5		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.acd7		65 30		adc $30				adc 	codePtr
.acd9		85 30		sta $30				sta 	codePtr
.acdb		90 02		bcc $acdf			bcc 	_CREExit
.acdd		e6 31		inc $31				inc 	codePtr+1 					; carry
.acdf						_CREExit:
.acdf		80 da		bra $acbb			bra 	_MTAXLoop
.ace1						_MTAXExit:
.ace1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.ace2						RectangleCommand:
.ace2		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.ace4		80 02		bra $ace8			bra 	ShapeDrawCmd
.ace6						CircleCommand:
.ace6		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.ace8						ShapeDrawCmd:
.ace8		20 72 ad	jsr $ad72			jsr 	RunGraphicsCommand
.aceb						ShapeDraw:
.aceb		0d a5 07	ora $07a5			ora 	gxFillSolid  				; adjust AXY for solid fill.
.acee		4c 66 ad	jmp $ad66			jmp 	ExecuteGraphicCommand	 	; and complete
.acf1						SpriteCommand:
.acf1		a2 00		ldx #$00			ldx 	#0
.acf3		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get image number.
.acf6		5a		phy				phy
.acf7		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.acf9		a6 58		ldx $58				ldx 	NSMantissa0
.acfb		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.acfd		b0 0d		bcs $ad0c			bcs 	_SCRange
.acff		a0 ff		ldy #$ff			ldy 	#255
.ad01		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad04		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.ad06		7a		ply				ply
.ad07		20 72 ad	jsr $ad72			jsr 	RunGraphicsCommand
.ad0a		80 5a		bra $ad66			bra 	ExecuteGraphicCommand
.ad0c						_SCRange:
.ad0c		4c 1c aa	jmp $aa1c			jmp 	RangeError
.ad0f						ImageCommand:
.ad0f		a2 00		ldx #$00			ldx 	#0
.ad11		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get image number.
.ad14		20 72 ad	jsr $ad72			jsr 	RunGraphicsCommand
.ad17						ImageRunDraw:
.ad17		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.ad19		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad1c		ad ab 07	lda $07ab			lda 	gxDrawScale
.ad1f		0a		asl a				asl 	a
.ad20		0a		asl a				asl 	a
.ad21		0a		asl a				asl 	a
.ad22		a8		tay				tay
.ad23		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.ad25		a6 58		ldx $58				ldx 	NSMantissa0
.ad27		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad2a		60		rts				rts
.ad2b						TextCommand:
.ad2b		a2 00		ldx #$00			ldx 	#0
.ad2d		20 ca a6	jsr $a6ca			jsr 	EvaluateString 				; get text
.ad30		20 72 ad	jsr $ad72			jsr 	RunGraphicsCommand
.ad33						TextRunDraw:
.ad33		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.ad35		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad38		a0 00		ldy #$00			ldy 	#0
.ad3a						_IRDLoop:
.ad3a		a5 60		lda $60				lda 	NSMantissa1 				; access character
.ad3c		85 37		sta $37				sta 	zTemp0+1
.ad3e		a5 58		lda $58				lda 	NSMantissa0
.ad40		85 36		sta $36				sta 	zTemp0
.ad42		b1 36		lda ($36),y			lda 	(zTemp0),y
.ad44		f0 13		beq $ad59			beq 	_IRDExit
.ad46		5a		phy				phy									; save string pos
.ad47		48		pha				pha 								; save char
.ad48		ad ab 07	lda $07ab			lda 	gxDrawScale 				; get scale
.ad4b		0a		asl a				asl 	a
.ad4c		0a		asl a				asl 	a
.ad4d		0a		asl a				asl 	a
.ad4e		a8		tay				tay
.ad4f		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.ad51		fa		plx				plx 								; char to draw
.ad52		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad55		7a		ply				ply 								; restore string pos
.ad56		c8		iny				iny
.ad57		90 e1		bcc $ad3a			bcc 	_IRDLoop 					; go back if no error.
.ad59						_IRDExit:
.ad59		60		rts				rts
.ad5a						PlotCommand:
.ad5a		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.ad5c		20 72 ad	jsr $ad72			jsr 	RunGraphicsCommand
.ad5f		80 05		bra $ad66			bra 	ExecuteGraphicCommand
.ad61						LineCommand:
.ad61		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.ad63		20 72 ad	jsr $ad72			jsr 	RunGraphicsCommand
.ad66						ExecuteGraphicCommand:
.ad66		0d a4 07	ora $07a4			ora 	gxCommandID 				; make a full command
.ad69		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.ad6c		b0 01		bcs $ad6f			bcs 	_EGCError
.ad6e		60		rts				rts
.ad6f						_EGCError:
.ad6f		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.ad72						RunGraphicsCommand:
.ad72		8d a4 07	sta $07a4			sta 	gxCommandID					; save TODO graphics command.
.ad75		68		pla				pla 								; pop handler address
.ad76		fa		plx				plx
.ad77		1a		inc a				inc 	a
.ad78		d0 01		bne $ad7b			bne 	_RGINoCarry
.ad7a		e8		inx				inx
.ad7b						_RGINoCarry:
.ad7b		8d a9 07	sta $07a9			sta 	gxHandler
.ad7e		8e aa 07	stx $07aa			stx 	gxHandler+1
.ad81						_RGICommandLoop:
.ad81		b1 30		lda ($30),y			lda 	(codePtr),y
.ad83		c8		iny				iny
.ad84		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.ad86		f0 53		beq $addb			beq 	_RGI_To
.ad88		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.ad8a		f0 55		beq $ade1			beq 	_RGI_Here
.ad8c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.ad8e		f0 3d		beq $adcd			beq 	_RGI_Exit
.ad90		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.ad92		f0 39		beq $adcd			beq 	_RGI_Exit
.ad94		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.ad96		f0 3e		beq $add6			beq 	_RGI_Frame
.ad98		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.ad9a		f0 33		beq $adcf			beq 	_RGI_Solid
.ad9c		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.ad9e		f0 4b		beq $adeb			beq 	_RGI_By
.ada0		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.ada2		f0 17		beq $adbb			beq 	_RGI_Move2
.ada4		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.ada6		f0 62		beq $ae0a			beq 	_RGI_Dim
.ada8		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.adaa		f0 74		beq $ae20			beq 	_RGI_Colour
.adac		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.adae		f0 70		beq $ae20			beq 	_RGI_Colour
.adb0		ae a4 07	ldx $07a4			ldx 	gxCommandID
.adb3		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.adb5		d0 03		bne $adba			bne 	_RGI_Move 					; move
.adb7		4c 48 ae	jmp $ae48			jmp		_RGI_SpriteInstructions
.adba						_RGI_Move:
.adba		88		dey				dey 								; unpick get.
.adbb						_RGI_Move2:
.adbb		20 6e ae	jsr $ae6e			jsr 	GCGetCoordinatePair 		; move to here
.adbe		20 95 ae	jsr $ae95			jsr 	GCCopyPairToStore 			; save
.adc1		5a		phy				phy
.adc2		20 8b ae	jsr $ae8b			jsr 	GCLoadAXY 					; load in
.adc5		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.adc7		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.adca		7a		ply				ply
.adcb		80 b4		bra $ad81			bra 	_RGICommandLoop 			; and go round
.adcd						_RGI_Exit:
.adcd		88		dey				dey 								; unpick : / EOL
.adce		60		rts				rts
.adcf						_RGI_Solid:
.adcf		a9 02		lda #$02			lda 	#2
.add1		8d a5 07	sta $07a5			sta 	gxFillSolid
.add4		80 ab		bra $ad81			bra 	_RGICommandLoop
.add6						_RGI_Frame:
.add6		9c a5 07	stz $07a5			stz 	gxFillSolid
.add9		80 a6		bra $ad81			bra 	_RGICommandLoop
.addb						_RGI_To:
.addb		20 6e ae	jsr $ae6e			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.adde		20 95 ae	jsr $ae95			jsr 	GCCopyPairToStore
.ade1						_RGI_Here:
.ade1		5a		phy				phy
.ade2		20 8b ae	jsr $ae8b			jsr 	GCLoadAXY 					; load it into AXY
.ade5		20 45 ae	jsr $ae45			jsr 	_RGICallHandler 			; go do whatever it is.
.ade8		7a		ply				ply
.ade9		80 96		bra $ad81			bra 	_RGICommandLoop 			; and go round
.adeb						_RGI_By:
.adeb		20 7b ae	jsr $ae7b			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.adee		18		clc				clc
.adef		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.adf1		6d a6 07	adc $07a6			adc 	gxXPos
.adf4		8d a6 07	sta $07a6			sta 	gxXPos
.adf7		a5 61		lda $61				lda 	NSMantissa1+1
.adf9		6d a7 07	adc $07a7			adc 	gxXPos+1
.adfc		8d a7 07	sta $07a7			sta 	gxXPos+1
.adff		a5 5a		lda $5a				lda 	NSMantissa0+2
.ae01		18		clc				clc
.ae02		6d a8 07	adc $07a8			adc 	gxYPos
.ae05		8d a8 07	sta $07a8			sta 	gxYPos
.ae08		80 d7		bra $ade1			bra 	_RGI_Here
.ae0a						_RGI_Dim:
.ae0a		a2 01		ldx #$01			ldx	 	#1
.ae0c		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.ae0f		a5 59		lda $59				lda 	NSMantissa0+1
.ae11		c9 00		cmp #$00			cmp 	#0
.ae13		f0 2d		beq $ae42			beq 	_RGIRange
.ae15		c9 09		cmp #$09			cmp 	#8+1
.ae17		b0 29		bcs $ae42			bcs		_RGIRange
.ae19		3a		dec a				dec 	a
.ae1a		8d ab 07	sta $07ab			sta 	gxDrawScale
.ae1d		4c 81 ad	jmp $ad81			jmp 	_RGICommandLoop
.ae20						_RGI_Colour:
.ae20		a2 01		ldx #$01			ldx 	#1 							; colour
.ae22		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.ae25		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.ae27		20 72 a7	jsr $a772			jsr 	NSMSetZero
.ae2a		b1 30		lda ($30),y			lda 	(codePtr),y
.ae2c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.ae2e		d0 04		bne $ae34			bne 	_RGICDefaultMode
.ae30		c8		iny				iny
.ae31		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.ae34						_RGICDefaultMode:
.ae34		5a		phy				phy
.ae35		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.ae37		a6 59		ldx $59				ldx 	NSMantissa0+1
.ae39		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ae3b		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae3e		7a		ply				ply
.ae3f		4c 81 ad	jmp $ad81			jmp 	_RGICommandLoop 			; and go round
.ae42						_RGIRange:
.ae42		4c 1c aa	jmp $aa1c			jmp 	RangeError
.ae45						_RGICallHandler:
.ae45		6c a9 07	jmp ($07a9)			jmp 	(gxHandler)
.ae48						_RGI_SpriteInstructions:
.ae48		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.ae4a		f0 07		beq $ae53			beq 	_RGISpriteOff
.ae4c		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.ae4e		f0 13		beq $ae63			beq 	_RGISetImage
.ae50		4c ba ad	jmp $adba			jmp 	_RGI_Move
.ae53						_RGISpriteOff:
.ae53		5a		phy				phy
.ae54		a0 01		ldy #$01			ldy 	#1
.ae56		a2 00		ldx #$00			ldx 	#0
.ae58						_RGIDoCommandLoop:
.ae58		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.ae5a		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae5d		7a		ply				ply
.ae5e		b0 e2		bcs $ae42			bcs 	_RGIRange
.ae60		4c 81 ad	jmp $ad81			jmp 	_RGICommandLoop
.ae63						_RGISetImage:
.ae63		a2 01		ldx #$01			ldx 	#1
.ae65		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger
.ae68		5a		phy				phy
.ae69		aa		tax				tax
.ae6a		a0 00		ldy #$00			ldy 	#0
.ae6c		80 ea		bra $ae58			bra 	_RGIDoCommandLoop
.ae6e						GCGetCoordinatePair:
.ae6e		a2 01		ldx #$01			ldx 	#1
.ae70		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.ae73		20 07 98	jsr $9807			jsr 	CheckComma
.ae76		e8		inx				inx
.ae77		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger
.ae7a		60		rts				rts
.ae7b						GCSignedCoordinatePair:
.ae7b		a2 01		ldx #$01			ldx 	#1
.ae7d		20 fc a6	jsr $a6fc			jsr 	Evaluate16BitIntegerSigned
.ae80		20 07 98	jsr $9807			jsr 	CheckComma
.ae83		e8		inx				inx
.ae84		20 fc a6	jsr $a6fc			jsr 	Evaluate16BitIntegerSigned
.ae87		60		rts				rts
.ae88						_GCCPRange:
.ae88		4c 1c aa	jmp $aa1c			jmp 	RangeError
.ae8b						GCLoadAXY:
.ae8b		ad a7 07	lda $07a7			lda 	gxXPos+1
.ae8e		ae a6 07	ldx $07a6			ldx 	gxXPos
.ae91		ac a8 07	ldy $07a8			ldy 	gxYPos
.ae94		60		rts				rts
.ae95						GCCopyPairToStore:
.ae95		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ae97		8d a6 07	sta $07a6			sta 	gxXPos
.ae9a		a5 61		lda $61				lda 	NSMantissa1+1
.ae9c		8d a7 07	sta $07a7			sta 	gxXPos+1
.ae9f		a5 5a		lda $5a				lda 	NSMantissa0+2
.aea1		8d a8 07	sta $07a8			sta 	gxYPos
.aea4		60		rts				rts
.07a4						gxCommandID:
>07a4								.fill 	1
.07a5						gxFillSolid:
>07a5								.fill 	1
.07a6						gxXPos:
>07a6								.fill 	2
.07a8						gxYPos:
>07a8								.fill 	1
.07a9						gxHandler:
>07a9								.fill 	2
.07ab						gxDrawScale:
>07ab								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.aea5						BitmapCtrl:
.aea5		b1 30		lda ($30),y			lda 	(codePtr),y
.aea7		c8		iny				iny
.aea8		a2 01		ldx #$01			ldx 	#1
.aeaa		c9 cc		cmp #$cc			cmp 	#KWD_ON
.aeac		f0 11		beq $aebf			beq 	BitmapSwitch
.aeae		ca		dex				dex
.aeaf		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.aeb1		f0 0c		beq $aebf			beq 	BitmapSwitch
.aeb3		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get the colour
.aeb6		5a		phy				phy
.aeb7		aa		tax				tax
.aeb8		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.aeba		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aebd		7a		ply				ply
.aebe		60		rts				rts
.aebf						BitmapSwitch:
.aebf		5a		phy				phy
.aec0		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.aec2		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.aec4		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aec7		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.aec9		a0 00		ldy #$00			ldy 	#0
.aecb		a2 ff		ldx #$ff			ldx 	#$FF
.aecd		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aed0		9c a5 07	stz $07a5			stz 	gxFillSolid
.aed3		9c a6 07	stz $07a6			stz 	gxXPos
.aed6		9c a7 07	stz $07a7			stz 	gxXPos+1
.aed9		9c a8 07	stz $07a8			stz 	gxYPos
.aedc		9c ab 07	stz $07ab			stz 	gxDrawScale
.aedf		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.aee1		a2 00		ldx #$00			ldx 	#0
.aee3		a0 00		ldy #$00			ldy 	#0
.aee5		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aee8		7a		ply				ply
.aee9		60		rts				rts
.aeea						SpritesCtrl:
.aeea		b1 30		lda ($30),y			lda 	(codePtr),y
.aeec		c8		iny				iny
.aeed		a2 01		ldx #$01			ldx 	#1
.aeef		c9 cc		cmp #$cc			cmp 	#KWD_ON
.aef1		f0 08		beq $aefb			beq 	SpriteSwitch
.aef3		ca		dex				dex
.aef4		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.aef6		f0 03		beq $aefb			beq 	SpriteSwitch
.aef8		4c 17 aa	jmp $aa17			jmp 	SyntaxError
.aefb						SpriteSwitch:
.aefb		5a		phy				phy
.aefc		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.aefe		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.af00		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.af03		7a		ply				ply
.af04		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.af05						GfxCommand:
.af05		a2 00		ldx #$00			ldx 	#0
.af07		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; command
.af0a		20 07 98	jsr $9807			jsr 	CheckComma
.af0d		e8		inx				inx
.af0e		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger 		; X
.af11		20 07 98	jsr $9807			jsr 	CheckComma
.af14		e8		inx				inx
.af15		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; Y
.af18		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.af1a		4a		lsr a				lsr 	a
.af1b		d0 12		bne $af2f			bne 	_GfxError
.af1d		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.af1f		b0 0e		bcs $af2f			bcs 	_GfxError 					; bit 7 should have been zero
.af21		5a		phy				phy 								; save pos
.af22		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.af24		a6 59		ldx $59				ldx 	NSMantissa0+1
.af26		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.af28		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.af2b		b0 02		bcs $af2f			bcs 	_GfxError
.af2d		7a		ply				ply 								; restore pos and exit.
.af2e		60		rts				rts
.af2f						_GfxError:
.af2f		4c 1c aa	jmp $aa1c			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.af32						UnaryHit:
.af32		fa		plx				plx
.af33		a9 36		lda #$36			lda 	#zTemp0
.af35		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.af38		20 07 98	jsr $9807			jsr 	CheckComma
.af3b		e8		inx				inx
.af3c		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.af3f		20 ff 97	jsr $97ff			jsr		CheckRightBracket
.af42		ca		dex				dex 								; fix back up again.
.af43		da		phx				phx 								; save X/Y
.af44		5a		phy				phy
.af45		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.af47		b5 58		lda $58,x			lda 	NSMantissa0,x
.af49		aa		tax				tax
.af4a		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.af4c		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.af4f		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.af50		7a		ply				ply 								; restore XY
.af51		fa		plx				plx
.af52		20 74 a7	jsr $a774			jsr 	NSMSetByte 					; return the hit result
.af55		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.af56						PaletteCommand:
.af56		a2 00		ldx #$00			ldx 	#0
.af58		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; colour
.af5b		20 07 98	jsr $9807			jsr 	CheckComma
.af5e		e8		inx				inx
.af5f		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger 		; r
.af62		20 07 98	jsr $9807			jsr 	CheckComma
.af65		e8		inx				inx
.af66		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; g
.af69		20 07 98	jsr $9807			jsr 	CheckComma
.af6c		e8		inx				inx
.af6d		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; b
.af70		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.af72		85 36		sta $36				sta 	zTemp0
.af74		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.af76		85 37		sta $37				sta 	zTemp0+1
.af78		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.af7a		26 37		rol $37				rol	 	zTemp0+1
.af7c		06 36		asl $36				asl 	zTemp0
.af7e		26 37		rol $37				rol	 	zTemp0+1
.af80		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.af82		85 01		sta $01				sta 	1
.af84		5a		phy				phy
.af85		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.af87		92 36		sta ($36)			sta 	(zTemp0)
.af89		a0 01		ldy #$01			ldy 	#1
.af8b		a5 5a		lda $5a				lda 	NSMantissa0+2
.af8d		91 36		sta ($36),y			sta 	(zTemp0),y
.af8f		a5 59		lda $59				lda 	NSMantissa0+1
.af91		c8		iny				iny
.af92		91 36		sta ($36),y			sta 	(zTemp0),y
.af94		7a		ply				ply
.af95		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.af96						ClearScreen:
.af96		5a		phy				phy
.af97		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.af99		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.af9c		7a		ply				ply
.af9d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.af9e						PingCommand:
.af9e		5a		phy				phy 								; save pos
.af9f		a9 01		lda #$01			lda 	#1 						; push channel.
.afa1		48		pha				pha
.afa2		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.afa4		a2 06		ldx #$06			ldx 	#6 						; length
.afa6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.afa8		80 24		bra $afce			bra 	SoundEffectCommand
.afaa						ZapCommand:
.afaa		5a		phy				phy 								; save pos
.afab		a9 01		lda #$01			lda 	#1 						; push channel.
.afad		48		pha				pha
.afae		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.afb0		a2 0a		ldx #$0a			ldx 	#10 						; length
.afb2		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.afb4		80 18		bra $afce			bra 	SoundEffectCommand
.afb6						ShootCommand:
.afb6		5a		phy				phy 								; save pos
.afb7		a9 03		lda #$03			lda 	#3 						; push channel.
.afb9		48		pha				pha
.afba		a9 20		lda #$20			lda 	#32 						; pitch LSB
.afbc		a2 04		ldx #$04			ldx 	#4 						; length
.afbe		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.afc0		80 0c		bra $afce			bra 	SoundEffectCommand
.afc2						Explode:
.afc2		5a		phy				phy 								; save pos
.afc3		a9 03		lda #$03			lda 	#3 						; push channel.
.afc5		48		pha				pha
.afc6		a9 50		lda #$50			lda 	#80 						; pitch LSB
.afc8		a2 0a		ldx #$0a			ldx 	#10 						; length
.afca		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.afcc		80 00		bra $afce			bra 	SoundEffectCommand
.afce						SoundEffectCommand:
.afce		8d ac 07	sta $07ac			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.afd1		9c ad 07	stz $07ad			stz 	SoundCommandBlock+1
.afd4		a9 0f		lda #$0f			lda 	#15
.afd6		8d ae 07	sta $07ae			sta 	SoundCommandBlock+2
.afd9		8e af 07	stx $07af			stx 	SoundCommandBlock+3
.afdc		8c b0 07	sty $07b0			sty 	SoundCommandBlock+4
.afdf		9c b1 07	stz $07b1			stz 	SoundCommandBlock+5
.afe2		68		pla				pla
.afe3		09 10		ora #$10			ora 	#$10  						; execute command $11
.afe5		a2 ac		ldx #$ac			ldx 	#(SoundCommandBlock & $FF)
.afe7		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.afe9		20 75 80	jsr $8075			jsr 	SNDCommand
.afec		7a		ply				ply
.afed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.afee						UnaryPlaying:
.afee		fa		plx				plx
.afef		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; get channel #
.aff2		48		pha				pha
.aff3		20 ff 97	jsr $97ff			jsr		CheckRightBracket
.aff6		68		pla				pla
.aff7		c9 04		cmp #$04			cmp 	#4
.aff9		b0 0c		bcs $b007			bcs 	_UPNotPlaying
.affb		09 20		ora #$20			ora 	#$20 						; query playing ?
.affd		20 75 80	jsr $8075			jsr 	SNDCommand
.b000		c9 00		cmp #$00			cmp 	#0
.b002		f0 03		beq $b007			beq 	_UPNotPlaying
.b004		4c 85 98	jmp $9885			jmp 	ReturnTrue
.b007						_UPNotPlaying:
.b007		4c 90 98	jmp $9890			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b00a						SoundCommand:
.b00a		b1 30		lda ($30),y			lda 	(codePtr),y
.b00c		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.b00e		d0 09		bne $b019			bne 	_SNDMain
.b010		c8		iny				iny 								; skip OFF
.b011		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b013		5a		phy				phy
.b014		20 75 80	jsr $8075			jsr 	SNDCommand
.b017		7a		ply				ply
.b018		60		rts				rts
.b019						_SNDMain:
.b019		a2 00		ldx #$00			ldx 	#0
.b01b		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; channel
.b01e		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b020		b0 4b		bcs $b06d			bcs 	_SndError
.b022		e8		inx				inx 								; do the rest in slot 1.
.b023		20 07 98	jsr $9807			jsr 	CheckComma
.b026		20 f2 a6	jsr $a6f2			jsr 	Evaluate16BitInteger 		; Pitch
.b029		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b02b		c9 10		cmp #$10			cmp 	#16
.b02d		b0 3e		bcs $b06d			bcs 	_SndError
.b02f		8d ad 07	sta $07ad			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b032		b5 58		lda $58,x			lda 	NSMantissa0,x
.b034		8d ac 07	sta $07ac			sta 	SoundCommandBlock
.b037		20 07 98	jsr $9807			jsr 	CheckComma
.b03a		20 0d a7	jsr $a70d			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b03d		8d af 07	sta $07af			sta 	SoundCommandBlock+3
.b040		a9 0f		lda #$0f			lda 	#15
.b042		8d ae 07	sta $07ae			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b045		9c b0 07	stz $07b0			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b048		9c b1 07	stz $07b1			stz 	SoundCommandBlock+5
.b04b		b1 30		lda ($30),y			lda 	(codePtr),y
.b04d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b04f		d0 0e		bne $b05f			bne 	_SNDPlay
.b051		c8		iny				iny
.b052		20 fc a6	jsr $a6fc			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b055		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b057		8d b0 07	sta $07b0			sta 	SoundCommandBlock+4
.b05a		b5 60		lda $60,x			lda 	NSMantissa1,x
.b05c		8d b1 07	sta $07b1			sta 	SoundCommandBlock+5
.b05f						_SNDPlay:
.b05f		5a		phy				phy
.b060		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b062		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b064		a2 ac		ldx #$ac			ldx 	#(SoundCommandBlock & $FF)
.b066		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b068		20 75 80	jsr $8075			jsr 	SNDCommand
.b06b		7a		ply				ply
.b06c		60		rts				rts
.b06d						_SndError:
.b06d		4c 1c aa	jmp $aa1c			jmp 	RangeError
.07ac						SoundCommandBlock:
>07ac								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b070						StackPushByte:
.b070		48		pha				pha 								; save byte on stack
.b071		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b073		d0 08		bne $b07d			bne 	_SPBNoBorrow
.b075		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b077		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b079		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b07b		90 06		bcc $b083			bcc 	_SPBMemory
.b07d						_SPBNoBorrow:
.b07d		c6 34		dec $34				dec 	basicStack
.b07f		68		pla				pla 								; get back and write
.b080		92 34		sta ($34)			sta 	(basicStack)
.b082		60		rts				rts
.b083						_SPBMemory:
.b083		a9 12		lda #$12		lda	#18
.b085		4c 18 98	jmp $9818		jmp	ErrorHandler
.b088						StackPopByte:
.b088		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b08a		e6 34		inc $34				inc 	basicStack
.b08c		d0 02		bne $b090			bne 	_SPBNoCarry
.b08e		e6 35		inc $35				inc 	basicStack+1
.b090						_SPBNoCarry:
.b090		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b091						StackOpen:
.b091		48		pha				pha 								; save frame byte
.b092		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b094		0a		asl a				asl 	a 							; claim twice this for storage
.b095		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b097		38		sec				sec 								; so basically subtracting from
.b098		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b09a		85 34		sta $34				sta 	basicStack
.b09c		b0 09		bcs $b0a7			bcs 	_SONoBorrow
>b09e		db						.byte 	$DB 						; causes a break in the emulator
.b09f		c6 35		dec $35				dec 	basicStack+1
.b0a1		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b0a3		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b0a5		90 04		bcc $b0ab			bcc 	_SOMemory
.b0a7						_SONoBorrow:
.b0a7		68		pla				pla 								; get marker back and write at TOS
.b0a8		92 34		sta ($34)			sta 	(basicStack)
.b0aa		60		rts				rts
.b0ab						_SOMemory:
.b0ab		a9 12		lda #$12		lda	#18
.b0ad		4c 18 98	jmp $9818		jmp	ErrorHandler
.b0b0						StackClose:
.b0b0		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b0b2		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b0b4		0a		asl a				asl 	a 							; claim twice this.
.b0b5		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b0b7		85 34		sta $34				sta 	basicStack
.b0b9		90 02		bcc $b0bd			bcc 	_SCExit
.b0bb		e6 35		inc $35				inc 	basicStack+1
.b0bd						_SCExit:
.b0bd		60		rts				rts
.b0be						StackCheckFrame:
.b0be		48		pha				pha
.b0bf						_StackRemoveLocals:
.b0bf		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b0c1		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b0c3		b0 05		bcs $b0ca			bcs 	_SCNoLocal
.b0c5		20 e3 90	jsr $90e3			jsr 	LocalPopValue 				; restore the local value
.b0c8		80 f5		bra $b0bf			bra 	_StackRemoveLocals 			; gr round again
.b0ca						_SCNoLocal:
.b0ca		68		pla				pla 								; get the frame check.
.b0cb		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b0cd		29 f0		and #$f0			and 	#$F0 						; check type bits
.b0cf		d0 01		bne $b0d2			bne 	_SCFError 					; different, we have structures mixed up
.b0d1		60		rts				rts
.b0d2						_SCFError:
.b0d2		8a		txa				txa 								; report error X
.b0d3		4c 18 98	jmp $9818			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b0d6						STKSaveCodePosition:
.b0d6		5a		phy				phy
.b0d7		98		tya				tya 								; save Y
.b0d8		a0 05		ldy #$05			ldy 	#5
.b0da		91 34		sta ($34),y			sta 	(basicStack),y
.b0dc		88		dey				dey 								; save Code Pointer
.b0dd						_STKSaveLoop:
.b0dd		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b0e0		91 34		sta ($34),y			sta 	(basicStack),y
.b0e2		88		dey				dey
.b0e3		d0 f8		bne $b0dd			bne 	_STKSaveLoop
.b0e5		7a		ply				ply
.b0e6		60		rts				rts
.b0e7						STKLoadCodePosition:
.b0e7		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b0e9						_STKLoadLoop:
.b0e9		b1 34		lda ($34),y			lda 	(basicStack),y
.b0eb		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b0ee		c8		iny				iny
.b0ef		c0 05		cpy #$05			cpy 	#5
.b0f1		d0 f6		bne $b0e9			bne 	_STKLoadLoop
.b0f3		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b0f5		a8		tay				tay
.b0f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b0f7						StackReset:
.b0f7		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b0f9		85 34		sta $34				sta 	0+basicStack
.b0fb		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b0fd		85 35		sta $35				sta 	1+basicStack
.b0ff		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b101		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b103		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b104						StringConcrete:
.b104		5a		phy				phy 								; save position on stack
.b105		20 52 a3	jsr $a352			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b108		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b10a		85 38		sta $38				sta 	zTemp1
.b10c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b10e		85 39		sta $39				sta 	zTemp1+1
.b110		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b112						_SALength:
.b112		c8		iny				iny
.b113		b1 38		lda ($38),y			lda 	(zTemp1),y
.b115		d0 fb		bne $b112			bne 	_SALength
.b117		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b119		b0 3d		bcs $b158			bcs 	_SALengthError
.b11b		98		tya				tya 				 				; length of the new string
.b11c		18		clc				clc
.b11d		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b11f		90 02		bcc $b123			bcc 	_SAHaveLength
.b121		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b123						_SAHaveLength:
.b123		48		pha				pha 								; save length.
.b124		38		sec				sec
.b125		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b127		6d 0a 04	adc $040a			adc 	stringMemory
.b12a		8d 0a 04	sta $040a			sta 	stringMemory
.b12d		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b12f		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b131		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b133		6d 0b 04	adc $040b			adc 	stringMemory+1
.b136		8d 0b 04	sta $040b			sta 	stringMemory+1
.b139		85 3b		sta $3b				sta 	zTemp2+1
.b13b		95 60		sta $60,x			sta 	NSMantissa1,x
.b13d		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b13e		38		sec				sec
.b13f		e9 03		sbc #$03			sbc 	#3
.b141		92 3a		sta ($3a)			sta 	(zTemp2)
.b143		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b145		a0 01		ldy #$01			ldy 	#1
.b147		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b149						_SACopyNewString:
.b149		a0 00		ldy #$00			ldy 	#0
.b14b						_SACopyNSLoop:
.b14b		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b14d		c8		iny				iny 								; write two on in string storage
.b14e		c8		iny				iny
.b14f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b151		88		dey				dey 								; this makes it one one.
.b152		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b154		d0 f5		bne $b14b			bne 	_SACopyNSLoop
.b156		7a		ply				ply
.b157		60		rts				rts
.b158						_SALengthError:
.b158		a9 09		lda #$09		lda	#9
.b15a		4c 18 98	jmp $9818		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b15d						StringSystemInitialise:
.b15d		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b15f		8d 0a 04	sta $040a			sta 	0+stringMemory
.b162		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b164		8d 0b 04	sta $040b			sta 	1+stringMemory
.b167		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b16a		60		rts				rts
.b16b						StringSpaceInitialise:
.b16b		20 52 a3	jsr $a352			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b16e		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b170		8d 0c 04	sta $040c			sta 	stringInitialised
.b173		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b176		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b179		ad 0b 04	lda $040b			lda 	stringMemory+1
.b17c		3a		dec a				dec 	a
.b17d		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b180		60		rts				rts
.b181						StringTempAllocate:
.b181		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b183		b0 30		bcs $b1b5			bcs 	_STALength
.b185		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b188		30 05		bmi $b18f			bmi 	_STAAllocate
.b18a		48		pha				pha 								; save value to subtract.
.b18b		20 6b b1	jsr $b16b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b18e		68		pla				pla 								; restore it
.b18f						_STAAllocate:
.b18f		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b191		18		clc				clc  								; deliberate allows one more
.b192		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b195		8d 0d 04	sta $040d			sta 	stringTempPointer
.b198		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b19a		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b19c		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b19f		69 ff		adc #$ff			adc 	#$FF
.b1a1		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b1a4		85 3d		sta $3d				sta 	zsTemp+1
.b1a6		95 60		sta $60,x			sta 	NSMantissa1,x
.b1a8		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b1aa		74 70		stz $70,x			stz 	NSMantissa3,x
.b1ac		a9 10		lda #$10			lda 	#NSTString
.b1ae		95 50		sta $50,x			sta 	NSStatus,x
.b1b0		a9 00		lda #$00			lda 	#0 							; clear the target string
.b1b2		92 3c		sta ($3c)			sta 	(zsTemp)
.b1b4		60		rts				rts
.b1b5						_STALength:
.b1b5		a9 09		lda #$09		lda	#9
.b1b7		4c 18 98	jmp $9818		jmp	ErrorHandler
.b1ba						StringTempWrite:
.b1ba		48		pha				pha
.b1bb		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b1bd		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b1bf		d0 02		bne $b1c3			bne 	_STWNoCarry
.b1c1		e6 3d		inc $3d				inc 	zsTemp+1
.b1c3						_STWNoCarry:
.b1c3		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b1c5		92 3c		sta ($3c)			sta 	(zsTemp)
.b1c7		68		pla				pla
.b1c8		60		rts				rts

;******  Return to file: _basic.asm

.b1c9						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac b3 07	ldy $07b3			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac b3 07	ldy $07b3			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad b4 07	lda $07b4			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c b3 07	sty $07b3			sty 	EXTColumn
.c02d	a02d	cc b5 07	cpy $07b5			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee b2 07	inc $07b2			inc 	EXTRow  					; bump row
.c035	a035	9c b3 07	stz $07b3			stz 	EXTColumn 					; back to column 0
.c038	a038	ad b2 07	lda $07b2			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd b6 07	cmp $07b6			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d b5 07	adc $07b5			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce b3 07	dec $07b3			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c b3 07	stz $07b3			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce b2 07	dec $07b2			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad b2 07	lda $07b2			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce b2 07	dec $07b2			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed b5 07	sbc $07b5			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c b3 07	sty $07b3			sty 	EXTColumn
.c08c	a08c	cc b5 07	cpy $07b5			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c b3 07	sty $07b3			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad b6 07	lda $07b6			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd b2 07	cmp $07b2			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee b2 07	inc $07b2			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d b5 07	adc $07b5			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad b3 07	lda $07b3			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d b3 07	sta $07b3			sta 	EXTColumn
.c0c9	a0c9	cd b5 07	cmp $07b5			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce b3 07	dec $07b3			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac b5 07	ldy $07b5			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc b5 07	cpy $07b5			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d b4 07	and $07b4			and 	EXTTextColour 				; mask out old.
.c135	a135	8d b4 07	sta $07b4			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d b4 07	ora $07b4			ora 	EXTTextColour
.c13c	a13c	8d b4 07	sta $07b4			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad b4 07	lda $07b4			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad b4 07	lda $07b4			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c b2 07	stz $07b2			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c b3 07	stz $07b3			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad b3 07	lda $07b3			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad b2 07	lda $07b2			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 8e 81	jsr $818e			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad b3 07	lda $07b3			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac b3 07	ldy $07b3			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc b5 07	cpy $07b5			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac b3 07	ldy $07b3			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc b5 07	cpy $07b5			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac b5 07	ldy $07b5			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc b3 07	cpy $07b3			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad b5 07	lda $07b5			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac b5 07	ldy $07b5			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07b2						EXTRow:
>07b2								.fill 	1
.07b3						EXTColumn:
>07b3								.fill 	1
.07b4						EXTTextColour:
>07b4								.fill 	1
.07b5						EXTScreenWidth:
>07b5								.fill 	1
.07b6						EXTScreenHeight:
>07b6								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d b4 07	sta $07b4			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d b5 07	sta $07b5			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d b6 07	sta $07b6			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad b2 07	lda $07b2			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a5 0b		lda $0b				lda 	8+3
.c2ff	a2ff	48		pha				pha
.c300	a300	a5 0c		lda $0c				lda 	8+4
.c302	a302	18		clc				clc
.c303	a303	69 03		adc #$03			adc 	#3
.c305	a305	85 0b		sta $0b				sta 	8+3
.c307	a307	a2 98		ldx #$98			ldx 	#(Header_jchars & $FF)
.c309	a309	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c30b	a30b	64 01		stz $01				stz 	1
.c30d	a30d	ad a7 d6	lda $d6a7			lda 	$D6A7
.c310	a310	29 10		and #$10			and 	#$10
.c312	a312	f0 04		beq $a318			beq 	_EXTSHNotK1
.c314	a314	a2 b0		ldx #$b0			ldx 	#(Header_kchars & $FF)
.c316	a316	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c318	a318					_EXTSHNotK1:
.c318	a318	a9 02		lda #$02			lda 	#2
.c31a	a31a	20 48 a3	jsr $a348			jsr 	_ESHCopyBlock
.c31d	a31d	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c31f	a31f	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c321	a321	64 01		stz $01				stz 	1
.c323	a323	ad a7 d6	lda $d6a7			lda 	$D6A7
.c326	a326	29 10		and #$10			and 	#$10
.c328	a328	f0 04		beq $a32e			beq 	_EXTSHNotK2
.c32a	a32a	a2 c8		ldx #$c8			ldx 	#(Header_kattrs & $FF)
.c32c	a32c	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c32e	a32e					_EXTSHNotK2:
.c32e	a32e	a9 03		lda #$03			lda 	#3
.c330	a330	20 48 a3	jsr $a348			jsr 	_ESHCopyBlock
.c333	a333	64 01		stz $01				stz 	1
.c335	a335	a2 3f		ldx #$3f			ldx 	#16*4-1
.c337	a337					_EXTCopyLUT:
.c337	a337	bd b2 67	lda $67b2,x			lda 	Header_Palette-$4000,x
.c33a	a33a	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33d	a33d	9d 40 d8	sta $d840,x			sta 	$D840,x
.c340	a340	ca		dex				dex
.c341	a341	10 f4		bpl $a337			bpl 	_EXTCopyLUT
.c343	a343	68		pla				pla
.c344	a344	85 0b		sta $0b				sta 	8+3
.c346	a346	68		pla				pla
.c347	a347	60		rts				rts
.c348	a348					_ESHCopyBlock:
.c348	a348	85 01		sta $01				sta 	1
.c34a	a34a	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c34c	a34c	84 37		sty $37				sty 	zTemp0+1
.c34e	a34e	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c350	a350	85 38		sta $38				sta 	0+zTemp1
.c352	a352	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c354	a354	85 39		sta $39				sta 	1+zTemp1
.c356	a356					_ESHCopyLoop:
.c356	a356	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c358	a358	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c35a	a35a	f0 1b		beq $a377			beq 	_ESHUnpack
.c35c	a35c	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35e	a35e	a9 01		lda #$01			lda 	#1 							; source add 1
.c360	a360	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c362	a362					_ESHNext:
.c362	a362	18		clc				clc 								; zTemp0 + A
.c363	a363	65 36		adc $36				adc 	zTemp0
.c365	a365	85 36		sta $36				sta 	zTemp0
.c367	a367	90 02		bcc $a36b			bcc 	_ESHNoCarry
.c369	a369	e6 37		inc $37				inc 	zTemp0+1
.c36b	a36b					_ESHNoCarry:
.c36b	a36b	98		tya				tya 								; zTemp1 + Y
.c36c	a36c	18		clc				clc
.c36d	a36d	65 38		adc $38				adc 	zTemp1
.c36f	a36f	85 38		sta $38				sta 	zTemp1
.c371	a371	90 e3		bcc $a356			bcc 	_ESHCopyLoop
.c373	a373	e6 39		inc $39				inc 	zTemp1+1
.c375	a375	80 df		bra $a356			bra 	_ESHCopyLoop
.c377	a377					_ESHUnpack:
.c377	a377	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	aa		tax				tax
.c37c	a37c	88		dey				dey 								; byte into A
.c37d	a37d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37f	a37f	f0 0c		beq $a38d			beq 	_ESHExit 					; exit if zero.
.c381	a381	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c383	a383					_ESHCopyOut:
.c383	a383	91 38		sta ($38),y			sta 	(zTemp1),y
.c385	a385	c8		iny				iny
.c386	a386	ca		dex				dex
.c387	a387	d0 fa		bne $a383			bne 	_ESHCopyOut
.c389	a389	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c38b	a38b	80 d5		bra $a362			bra 	_ESHNext
.c38d	a38d					_ESHExit:
.c38d	a38d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c38e	a38e					GRVectorTable:
>c38e	a38e	dd a5					.word	GXInitialise             ; $00 Initialise
>c390	a390	f7 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c392	a392	3f a6					.word	GXControlSprite          ; $02 SpriteCtl
>c394	a394	8f a5					.word	GXClearBitmap            ; $03 Clear
>c396	a396	ce a7					.word	GXSetColourMode          ; $04 Colour
>c398	a398	96 a9					.word	GXFontHandler            ; $05 DrawFont
>c39a	a39a	de a9					.word	GXSpriteHandler          ; $06 DrawSprite
>c39c	a39c	4f aa					.word	GXSelect                 ; $07 SpriteUse
>c39e	a39e	78 aa					.word	GXSelectImage            ; $08 SpriteImage
>c3a0	a3a0	ff ab					.word	GXCollide                ; $09 SpriteCollide
>c3a2	a3a2	41 a4					.word	GRUndefined              ; $0a
>c3a4	a3a4	41 a4					.word	GRUndefined              ; $0b
>c3a6	a3a6	41 a4					.word	GRUndefined              ; $0c
>c3a8	a3a8	41 a4					.word	GRUndefined              ; $0d
>c3aa	a3aa	41 a4					.word	GRUndefined              ; $0e
>c3ac	a3ac	41 a4					.word	GRUndefined              ; $0f
>c3ae	a3ae	41 a4					.word	GRUndefined              ; $10
>c3b0	a3b0	41 a4					.word	GRUndefined              ; $11
>c3b2	a3b2	41 a4					.word	GRUndefined              ; $12
>c3b4	a3b4	41 a4					.word	GRUndefined              ; $13
>c3b6	a3b6	41 a4					.word	GRUndefined              ; $14
>c3b8	a3b8	41 a4					.word	GRUndefined              ; $15
>c3ba	a3ba	41 a4					.word	GRUndefined              ; $16
>c3bc	a3bc	41 a4					.word	GRUndefined              ; $17
>c3be	a3be	41 a4					.word	GRUndefined              ; $18
>c3c0	a3c0	41 a4					.word	GRUndefined              ; $19
>c3c2	a3c2	41 a4					.word	GRUndefined              ; $1a
>c3c4	a3c4	41 a4					.word	GRUndefined              ; $1b
>c3c6	a3c6	41 a4					.word	GRUndefined              ; $1c
>c3c8	a3c8	41 a4					.word	GRUndefined              ; $1d
>c3ca	a3ca	41 a4					.word	GRUndefined              ; $1e
>c3cc	a3cc	41 a4					.word	GRUndefined              ; $1f
>c3ce	a3ce	3f a4					.word	GXMove                   ; $20 Move
>c3d0	a3d0	9c a6					.word	GXLine                   ; $21 Line
>c3d2	a3d2	17 a8					.word	GXFrameRectangle         ; $22 FrameRect
>c3d4	a3d4	14 a8					.word	GXFillRectangle          ; $23 FillRect
>c3d6	a3d6	46 a4					.word	GXFrameCircle            ; $24 FrameCircle
>c3d8	a3d8	42 a4					.word	GXFillCircle             ; $25 FillCircle
>c3da	a3da	41 a4					.word	GRUndefined              ; $26
>c3dc	a3dc	41 a4					.word	GRUndefined              ; $27
>c3de	a3de	fc a7					.word	GXPlotPoint              ; $28 Plot
>c3e0	a3e0	0e ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07b7						gxCurrentX:
>07b7								.fill 	2
.07b9						gxCurrentY:
>07b9								.fill 	2
.07bb						gxLastX:
>07bb								.fill 	2
.07bd						gxLastY:
>07bd								.fill 	2
.07bf						gxX0:
>07bf								.fill 	2
.07c1						gxY0:
>07c1								.fill 	2
.07c3						gxX1:
>07c3								.fill 	2
.07c5						gxY1:
>07c5								.fill 	2
.07c7						gxSpritesOn:
>07c7								.fill 	1
.07c8						gxBitmapsOn:
>07c8								.fill 	1
.07c9						gxBasePage:
>07c9								.fill 	1
.07ca						gxSpritePage:
>07ca								.fill 	1
.07cb						gxHeight:
>07cb								.fill 	1
.07cc						gxMode:
>07cc								.fill 	1
.07cd						gxColour:
>07cd								.fill 	1
.07ce						gxEORValue:
>07ce								.fill 	1
.07cf						gxANDValue:
>07cf								.fill 	1
.07d0						gxOriginalLUTValue:
>07d0								.fill 	1
.07d1						gxOffset:
>07d1								.fill 	1
.07d2						GSCurrentSpriteID:
>07d2								.fill 	1
.07d3						GSCurrentSpriteAddr:
>07d3								.fill 	2
.07d5						gxSpriteOffsetBase:
>07d5								.fill 	2
.07d7						gxSpriteLow:
>07d7								.fill 	64
.0817						gxSpriteHigh:
>0817								.fill 	64
.c3e2	a3e2					Export_GXGraphicDraw:
.c3e2	a3e2	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c3e4	a3e4	b0 06		bcs $a3ec			bcs 	_GDCoordinate
.c3e6	a3e6	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c3e8	a3e8	84 37		sty $37				sty 	gxzTemp0+1
.c3ea	a3ea	80 4b		bra $a437			bra 	_GDExecuteA 				; and execute
.c3ec	a3ec					_GDCoordinate:
.c3ec	a3ec	48		pha				pha 								; save AXY
.c3ed	a3ed	da		phx				phx
.c3ee	a3ee	5a		phy				phy
.c3ef	a3ef	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c3f1	a3f1					_GDCopy1:
.c3f1	a3f1	bd b7 07	lda $07b7,x			lda 	gxCurrentX,x
.c3f4	a3f4	9d bb 07	sta $07bb,x			sta 	gxLastX,x
.c3f7	a3f7	ca		dex				dex
.c3f8	a3f8	10 f7		bpl $a3f1			bpl 	_GDCopy1
.c3fa	a3fa	68		pla				pla 								; update Y
.c3fb	a3fb	8d b9 07	sta $07b9			sta 	gxCurrentY
.c3fe	a3fe	9c ba 07	stz $07ba			stz 	gxCurrentY+1
.c401	a401	68		pla				pla
.c402	a402	8d b7 07	sta $07b7			sta 	gxCurrentX
.c405	a405	68		pla				pla 								; get A (command+X.1) back
.c406	a406	48		pha				pha
.c407	a407	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c409	a409	8d b8 07	sta $07b8			sta 	gxCurrentX+1
.c40c	a40c	68		pla				pla 								; get command back
.c40d	a40d	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c40f	a40f	48		pha				pha 								; push back.
.c410	a410	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c412	a412	f0 17		beq $a42b			beq 	_GDCopyToWorkArea
.c414	a414	ad b8 07	lda $07b8			lda 	gxCurrentX+1 				; X < 256 X okay
.c417	a417	f0 07		beq $a420			beq 	_GDCheckY
.c419	a419	ad b7 07	lda $07b7			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c41c	a41c	c9 40		cmp #$40			cmp 	#64
.c41e	a41e	b0 08		bcs $a428			bcs 	_GDError1
.c420	a420					_GDCheckY:
.c420	a420	ad b9 07	lda $07b9			lda 	gxCurrentY 					; check Y < Height.
.c423	a423	cd cb 07	cmp $07cb			cmp 	gxHeight
.c426	a426	90 03		bcc $a42b			bcc 	_GDCopyToWorkArea
.c428	a428					_GDError1:
.c428	a428	68		pla				pla
.c429	a429					_GDError2:
.c429	a429	38		sec				sec
.c42a	a42a	60		rts				rts
.c42b	a42b					_GDCopyToWorkArea:
.c42b	a42b	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c42d	a42d					_GDCopy2:
.c42d	a42d	bd b7 07	lda $07b7,x			lda 	gxCurrentX,x
.c430	a430	9d bf 07	sta $07bf,x			sta 	gxX0,x
.c433	a433	ca		dex				dex
.c434	a434	10 f7		bpl $a42d			bpl 	_GDCopy2
.c436	a436	68		pla				pla 								; get command
.c437	a437					_GDExecuteA:
.c437	a437	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c439	a439	b0 ee		bcs $a429			bcs 	_GDError2
.c43b	a43b	aa		tax				tax
.c43c	a43c	7c 8e a3	jmp ($a38e,x)			jmp 	(GRVectorTable,x)
.c43f	a43f					GXMove:
.c43f	a43f	18		clc				clc
.c440	a440	60		rts				rts
.c441	a441					GRUndefined:
>c441	a441	db						.byte 	$DB 						; causes a break in the emulator
.c442	a442					GXFillCircle:
.c442	a442	a9 ff		lda #$ff			lda 	#255
.c444	a444	80 02		bra $a448			bra 	GXCircle
.c446	a446					GXFrameCircle:
.c446	a446	a9 00		lda #$00			lda 	#0
.c448	a448					GXCircle:
.c448	a448	8d 5a 08	sta $085a			sta 	gxIsFillMode					; save Fill flag
.c44b	a44b	ad c8 07	lda $07c8			lda 	gxBitmapsOn
.c44e	a44e	f0 26		beq $a476			beq 	_GXCFail
.c450	a450	20 a6 ac	jsr $aca6			jsr 	GXSortXY 					; topleft/bottomright
.c453	a453	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start drawing
.c456	a456	20 48 a5	jsr $a548			jsr 	GXCircleSetup 				; set up for drawing
.c459	a459	9c 5b 08	stz $085b			stz 	gxYChanged
.c45c	a45c					_GXCircleDraw:
.c45c	a45c	ad 58 08	lda $0858			lda 	gxxCentre					; while x <= y
.c45f	a45f	cd 59 08	cmp $0859			cmp 	gxYCentre
.c462	a462	90 0a		bcc $a46e			bcc 	_GXCircleContinue
.c464	a464	d0 03		bne $a469			bne 	_GXNoLast
.c466	a466	20 7b a4	jsr $a47b			jsr 	GXPlot1
.c469	a469					_GXNoLast:
.c469	a469	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap 				; close the bitmap
.c46c	a46c	18		clc				clc
.c46d	a46d	60		rts				rts
.c46e	a46e					_GXCircleContinue:
.c46e	a46e	20 78 a4	jsr $a478			jsr 	GXPlot2 					; draw it
.c471	a471	20 f5 a4	jsr $a4f5			jsr 	GXCircleMove 				; adjust the coordinates
.c474	a474	80 e6		bra $a45c			bra 	_GXCircleDraw
.c476	a476					_GXCFail:
.c476	a476	38		sec				sec
.c477	a477	60		rts				rts
.c478	a478					GXPlot2:
.c478	a478	20 7b a4	jsr $a47b			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c47b	a47b					GXPlot1:
.c47b	a47b	ad 59 08	lda $0859			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c47e	a47e	f0 03		beq $a483			beq 	_GXPlot1Only
.c480	a480	20 9f a4	jsr $a49f			jsr 	GXPlot0 						; plot and negate
.c483	a483					_GXPlot1Only:
.c483	a483	20 9f a4	jsr $a49f			jsr 	GXPlot0 						; twice, undoing negation
.c486	a486	ad 58 08	lda $0858			lda 	gxxCentre 						; swap X and Y
.c489	a489	ae 59 08	ldx $0859			ldx	 	gxYCentre
.c48c	a48c	8d 59 08	sta $0859			sta 	gxYCentre
.c48f	a48f	8e 58 08	stx $0858			stx 	gxxCentre
.c492	a492	ad 5b 08	lda $085b			lda 	gxYChanged 						; toggle Y Changed flag
.c495	a495	a9 ff		lda #$ff			lda 	#$FF
.c497	a497	8d 5b 08	sta $085b			sta 	gxYChanged
.c49a	a49a	60		rts				rts
.c49b	a49b	20 9f a4	jsr $a49f			jsr 	GXPlot0 						; do once
.c49e	a49e	60		rts				rts
.c49f	a49f	ad 5a 08	lda $085a	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c4a2	a4a2	f0 05		beq $a4a9			beq 	_GXPlot0Always
.c4a4	a4a4	ad 5b 08	lda $085b			lda 	gxYChanged						; fill mode, only draw if changed.
.c4a7	a4a7	f0 2d		beq $a4d6			beq 	GXPlot0Exit
.c4a9	a4a9					_GXPlot0Always:
.c4a9	a4a9	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c4ab	a4ab	ad 59 08	lda $0859			lda 	gxYCentre
.c4ae	a4ae	20 d7 a4	jsr $a4d7			jsr 	GXSubCopy
.c4b1	a4b1	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c4b3	a4b3	ad 58 08	lda $0858			lda 	gxxCentre
.c4b6	a4b6	20 d7 a4	jsr $a4d7			jsr 	GXSubCopy
.c4b9	a4b9	48		pha				pha 									; save last offset X
.c4ba	a4ba	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 					; calculate position/offset.
.c4bd	a4bd	68		pla				pla
.c4be	a4be	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c4bf	a4bf	85 36		sta $36				sta 	gxzTemp0
.c4c1	a4c1	64 37		stz $37				stz 	gxzTemp0+1
.c4c3	a4c3	26 37		rol $37				rol 	gxzTemp0+1
.c4c5	a4c5	ad 5a 08	lda $085a			lda 	gxIsFillMode
.c4c8	a4c8	69 80		adc #$80			adc 	#128
.c4ca	a4ca	20 67 a8	jsr $a867			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c4cd	a4cd	38		sec				sec 									; GY = -GY
.c4ce	a4ce	a9 00		lda #$00			lda 	#0
.c4d0	a4d0	ed 59 08	sbc $0859			sbc 	gxYCentre
.c4d3	a4d3	8d 59 08	sta $0859			sta 	gxYCentre
.c4d6	a4d6					GXPlot0Exit:
.c4d6	a4d6	60		rts				rts
.c4d7	a4d7					GXSubCopy:
.c4d7	a4d7	85 36		sta $36				sta 	gxzTemp0
.c4d9	a4d9	64 37		stz $37				stz 	gxzTemp0+1
.c4db	a4db	29 80		and #$80			and 	#$80
.c4dd	a4dd	f0 02		beq $a4e1			beq 	_GXNoSx
.c4df	a4df	c6 37		dec $37				dec 	gxzTemp0+1
.c4e1	a4e1					_GXNoSx:
.c4e1	a4e1	38		sec				sec
.c4e2	a4e2	bd c3 07	lda $07c3,x			lda 	gxX1,x
.c4e5	a4e5	e5 36		sbc $36				sbc 	gxzTemp0
.c4e7	a4e7	9d bf 07	sta $07bf,x			sta 	gxX0,x
.c4ea	a4ea	bd c4 07	lda $07c4,x			lda 	gxX1+1,x
.c4ed	a4ed	e5 37		sbc $37				sbc 	gxzTemp0+1
.c4ef	a4ef	9d c0 07	sta $07c0,x			sta 	gxX0+1,x
.c4f2	a4f2	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c4f4	a4f4	60		rts				rts
.c4f5	a4f5					GXCircleMove:
.c4f5	a4f5	9c 5b 08	stz $085b			stz 	gxYChanged 					; clear Y changed flag
.c4f8	a4f8	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c4fa	a4fa	10 0d		bpl $a509			bpl 	_GXEMPositive
.c4fc	a4fc	ee 58 08	inc $0858			inc 	gxxCentre 					; X++
.c4ff	a4ff	ad 58 08	lda $0858			lda 	gxxCentre
.c502	a502	20 28 a5	jsr $a528			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c505	a505	a9 06		lda #$06			lda 	#6  						; and add 6
.c507	a507	80 15		bra $a51e			bra 	_GXEMAddD
.c509	a509					_GXEMPositive:
.c509	a509	ee 58 08	inc $0858			inc 	gxxCentre					; X++
.c50c	a50c	ce 59 08	dec $0859			dec 	gxYCentre 					; Y--
.c50f	a50f	38		sec				sec 								; calculate X-Y
.c510	a510	ad 58 08	lda $0858			lda 	gxxCentre
.c513	a513	ed 59 08	sbc $0859			sbc 	gxYCentre
.c516	a516	20 28 a5	jsr $a528			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c519	a519	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c51b	a51b	ce 5b 08	dec $085b			dec 	gxYChanged
.c51e	a51e					_GXEMAddD:
.c51e	a51e	18		clc				clc
.c51f	a51f	65 38		adc $38				adc 	gxzTemp1
.c521	a521	85 38		sta $38				sta 	gxzTemp1
.c523	a523	90 02		bcc $a527			bcc 	_GXEMNoCarry
.c525	a525	e6 39		inc $39				inc 	gxzTemp1+1
.c527	a527					_GXEMNoCarry:
.c527	a527	60		rts				rts
.c528	a528					_GXAdd4TimesToD:
.c528	a528	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c52a	a52a	29 80		and #$80			and 	#$80
.c52c	a52c	f0 02		beq $a530			beq 	_GXA4Unsigned
.c52e	a52e	a9 ff		lda #$ff			lda 	#$FF
.c530	a530					_GXA4Unsigned:
.c530	a530	85 37		sta $37				sta 	gxzTemp0+1
.c532	a532	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c534	a534	26 37		rol $37				rol 	gxzTemp0+1
.c536	a536	06 36		asl $36				asl 	gxzTemp0
.c538	a538	26 37		rol $37				rol 	gxzTemp0+1
.c53a	a53a	18		clc				clc 								; add
.c53b	a53b	a5 36		lda $36				lda		gxzTemp0
.c53d	a53d	65 38		adc $38				adc 	gxzTemp1
.c53f	a53f	85 38		sta $38				sta 	gxzTemp1
.c541	a541	a5 37		lda $37				lda		gxzTemp0+1
.c543	a543	65 39		adc $39				adc 	gxzTemp1+1
.c545	a545	85 39		sta $39				sta 	gxzTemp1+1
.c547	a547	60		rts				rts
.c548	a548					GXCircleSetup:
.c548	a548	38		sec				sec
.c549	a549	ad c5 07	lda $07c5			lda 	gxY1
.c54c	a54c	ed c1 07	sbc $07c1			sbc 	gxY0
.c54f	a54f	4a		lsr a				lsr 	a
.c550	a550	8d 57 08	sta $0857			sta 	gxRadius
.c553	a553	a2 00		ldx #$00			ldx 	#0
.c555	a555	20 77 a5	jsr $a577			jsr 	_GXCalculateCentre
.c558	a558	a2 02		ldx #$02			ldx 	#2
.c55a	a55a	20 77 a5	jsr $a577			jsr 	_GXCalculateCentre
.c55d	a55d	9c 58 08	stz $0858			stz 	gxxCentre
.c560	a560	ad 57 08	lda $0857			lda 	gxRadius
.c563	a563	8d 59 08	sta $0859			sta 	gxYCentre
.c566	a566	0a		asl a				asl 	a 							; R x 2
.c567	a567	85 36		sta $36				sta 	gxzTemp0
.c569	a569	38		sec				sec
.c56a	a56a	a9 03		lda #$03			lda 	#3
.c56c	a56c	e5 36		sbc $36				sbc 	gxzTemp0
.c56e	a56e	85 38		sta $38				sta 	gxzTemp1
.c570	a570	a9 00		lda #$00			lda 	#0
.c572	a572	e9 00		sbc #$00			sbc 	#0
.c574	a574	85 39		sta $39				sta 	gxzTemp1+1
.c576	a576	60		rts				rts
.c577	a577					_GXCalculateCentre:
.c577	a577	38		sec				sec
.c578	a578	bd c3 07	lda $07c3,x			lda 	gxX1,x
.c57b	a57b	7d bf 07	adc $07bf,x			adc 	gxX0,x
.c57e	a57e	9d c3 07	sta $07c3,x			sta 	gxX1,x
.c581	a581	bd c4 07	lda $07c4,x			lda 	gxX1+1,x
.c584	a584	7d c0 07	adc $07c0,x			adc 	gxX0+1,x
.c587	a587	4a		lsr a				lsr 	a
.c588	a588	9d c4 07	sta $07c4,x			sta 	gxX1+1,x
.c58b	a58b	7e c3 07	ror $07c3,x			ror 	gxX1,x
.c58e	a58e	60		rts				rts
.0857						gxRadius:
>0857								.fill 	1
.0858						gxxCentre:
>0858								.fill 	1
.0859						gxYCentre:
>0859								.fill 	1
.085a						gxIsFillMode:
>085a								.fill 	1
.085b						gxYChanged:
>085b								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c58f	a58f					GXClearBitmap:
.c58f	a58f	ad c8 07	lda $07c8			lda 	gxBitmapsOn 				; check BMP running.
.c592	a592	f0 24		beq $a5b8			beq 	_GXCBFail
.c594	a594	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start access
.c597	a597	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c599	a599	ad cb 07	lda $07cb			lda 	gxHeight
.c59c	a59c	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c59e	a59e	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c5a0	a5a0					_GXCalcLastPage:
.c5a0	a5a0	98		tya				tya 								; add to base page
.c5a1	a5a1	18		clc				clc
.c5a2	a5a2	6d c9 07	adc $07c9			adc 	gxBasePage
.c5a5	a5a5	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c5a7	a5a7					_GXClearAll:
.c5a7	a5a7	20 ba a5	jsr $a5ba			jsr 	_GXClearBlock 				; clear 8k block
.c5aa	a5aa	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c5ac	a5ac	a5 0b		lda $0b				lda 	GXEditSlot
.c5ae	a5ae	cd c9 07	cmp $07c9			cmp 	gxBasePage 					; until before base page
.c5b1	a5b1	b0 f4		bcs $a5a7			bcs 	_GXClearAll
.c5b3	a5b3	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap	 			; stop access
.c5b6	a5b6	18		clc				clc
.c5b7	a5b7	60		rts				rts
.c5b8	a5b8					_GXCBFail:
.c5b8	a5b8	38		sec				sec
.c5b9	a5b9	60		rts				rts
.c5ba	a5ba					_GXClearBlock:
.c5ba	a5ba	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c5bc	a5bc	85 38		sta $38				sta 	0+gxzTemp1
.c5be	a5be	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c5c0	a5c0	85 39		sta $39				sta 	1+gxzTemp1
.c5c2	a5c2					_GXCB0:
.c5c2	a5c2	a5 36		lda $36				lda 	gxzTemp0
.c5c4	a5c4	a0 00		ldy #$00			ldy 	#0
.c5c6	a5c6					_GXCB1:
.c5c6	a5c6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5c8	a5c8	c8		iny				iny
.c5c9	a5c9	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5cb	a5cb	c8		iny				iny
.c5cc	a5cc	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5ce	a5ce	c8		iny				iny
.c5cf	a5cf	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c5d1	a5d1	c8		iny				iny
.c5d2	a5d2	d0 f2		bne $a5c6			bne 	_GXCB1
.c5d4	a5d4	e6 39		inc $39				inc 	gxzTemp1+1
.c5d6	a5d6	a5 39		lda $39				lda 	gxzTemp1+1
.c5d8	a5d8	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c5da	a5da	d0 e6		bne $a5c2			bne 	_GXCB0
.c5dc	a5dc	60		rts				rts
.c5dd	a5dd					GXInitialise:
.c5dd	a5dd	64 01		stz $01				stz 	1
.c5df	a5df	a9 01		lda #$01			lda 	#1
.c5e1	a5e1	8d 00 d0	sta $d000			sta 	$D000
.c5e4	a5e4	18		clc				clc
.c5e5	a5e5	9c c7 07	stz $07c7			stz 	gxSpritesOn
.c5e8	a5e8	9c c8 07	stz $07c8			stz 	gxBitmapsOn
.c5eb	a5eb	a2 0f		ldx #$0f			ldx 	#15
.c5ed	a5ed					_GXIClear:
.c5ed	a5ed	9e b7 07	stz $07b7,x			stz 	gxCurrentX,x
.c5f0	a5f0	ca		dex				dex
.c5f1	a5f1	10 fa		bpl $a5ed			bpl 	_GXIClear
.c5f3	a5f3	20 8e a6	jsr $a68e			jsr 	GXClearSpriteStore
.c5f6	a5f6	60		rts				rts
.c5f7	a5f7					GXControlBitmap:
.c5f7	a5f7	64 01		stz $01				stz 	1
.c5f9	a5f9	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5fb	a5fb	29 01		and #$01			and 	#1 							; set bitmap flag
.c5fd	a5fd	8d c8 07	sta $07c8			sta 	gxBitmapsOn
.c600	a600	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c601	a601	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c604	a604	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c606	a606	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c608	a608	90 02		bcc $a60c			bcc 	_CBNotOn
.c60a	a60a	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c60c	a60c					_CBNotOn:
.c60c	a60c	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c60f	a60f	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c611	a611	29 07		and #$07			and 	#7
.c613	a613	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c616	a616	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c618	a618	d0 02		bne $a61c			bne 	_CBNotDefault
.c61a	a61a	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c61c	a61c					_CBNotDefault:
.c61c	a61c	8d c9 07	sta $07c9			sta 	gxBasePage
.c61f	a61f	20 80 a6	jsr $a680			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c622	a622	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c624	a624	8d 03 d1	sta $d103			sta 	$D103
.c627	a627	a5 36		lda $36				lda 	gxzTemp0
.c629	a629	8d 02 d1	sta $d102			sta 	$D102
.c62c	a62c	9c 01 d1	stz $d101			stz 	$D101
.c62f	a62f	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.c631	a631	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c634	a634	29 01		and #$01			and 	#1
.c636	a636	f0 02		beq $a63a			beq 	_CBHaveHeight
.c638	a638	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c63a	a63a					_CBHaveHeight
.c63a	a63a	8e cb 07	stx $07cb			stx 	gxHeight
.c63d	a63d	18		clc				clc
.c63e	a63e	60		rts				rts
.c63f	a63f					GXControlSprite:
.c63f	a63f	64 01		stz $01				stz 	1
.c641	a641	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c643	a643	29 01		and #$01			and 	#1 							; set sprites flag
.c645	a645	8d c7 07	sta $07c7			sta 	gxSpritesOn
.c648	a648	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c649	a649	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c64c	a64c	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c64e	a64e	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c650	a650	90 02		bcc $a654			bcc 	_CSNotOn
.c652	a652	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c654	a654					_CSNotOn:
.c654	a654	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c657	a657	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c659	a659	d0 02		bne $a65d			bne 	_CSNotDefault
.c65b	a65b	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c65d	a65d					_CSNotDefault:
.c65d	a65d	8d ca 07	sta $07ca			sta 	gxSpritePage
.c660	a660	20 80 a6	jsr $a680			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c663	a663	a5 36		lda $36				lda 	gxzTemp0
.c665	a665	8d d5 07	sta $07d5			sta 	gxSpriteOffsetBase
.c668	a668	a5 37		lda $37				lda 	gxzTemp0+1
.c66a	a66a	8d d6 07	sta $07d6			sta 	gxSpriteOffsetBase+1
.c66d	a66d	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c66f	a66f					_CSClear:
.c66f	a66f	9e 00 d9	stz $d900,x			stz 	$D900,x
.c672	a672	9e 00 da	stz $da00,x			stz 	$DA00,x
.c675	a675	ca		dex				dex
.c676	a676	d0 f7		bne $a66f			bne 	_CSClear
.c678	a678	9c d4 07	stz $07d4			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c67b	a67b	20 8e a6	jsr $a68e			jsr 	GXClearSpriteStore
.c67e	a67e	18		clc				clc
.c67f	a67f	60		rts				rts
.c680	a680					GXCalculateBaseAddress:
.c680	a680	85 36		sta $36				sta 	gxzTemp0
.c682	a682	64 37		stz $37				stz 	gxzTemp0+1
.c684	a684	a9 05		lda #$05			lda 	#5
.c686	a686					_GXShift:
.c686	a686	06 36		asl $36				asl 	gxzTemp0
.c688	a688	26 37		rol $37				rol 	gxzTemp0+1
.c68a	a68a	3a		dec a				dec		a
.c68b	a68b	d0 f9		bne $a686			bne 	_GXShift
.c68d	a68d	60		rts				rts
.c68e	a68e					GXClearSpriteStore:
.c68e	a68e	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c690	a690					_GXCSSLoop:
.c690	a690	9e 17 08	stz $0817,x			stz 	gxSpriteHigh,x
.c693	a693	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c695	a695	9d d7 07	sta $07d7,x			sta 	gxSpriteLow,x
.c698	a698	ca		dex				dex
.c699	a699	10 f5		bpl $a690			bpl 	_GXCSSLoop
.c69b	a69b	60		rts				rts
.c69c	a69c					GXLine:
.c69c	a69c	ad c8 07	lda $07c8			lda 	gxBitmapsOn
.c69f	a69f	f0 28		beq $a6c9			beq 	_GXLFail
.c6a1	a6a1	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap
.c6a4	a6a4	20 c4 ac	jsr $acc4			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6a7	a6a7	20 6f a7	jsr $a76f			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6aa	a6aa	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c6ad	a6ad					_GXDrawLoop:
.c6ad	a6ad	ac d1 07	ldy $07d1			ldy 	gxOffset 					; draw the pixel
.c6b0	a6b0	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6b2	a6b2	2d cf 07	and $07cf			and 	gxANDValue
.c6b5	a6b5	4d ce 07	eor $07ce			eor 	gxEORValue
.c6b8	a6b8	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6ba	a6ba	20 cb a6	jsr $a6cb			jsr 	GXLineIsComplete 			; is the line complete ?
.c6bd	a6bd	f0 05		beq $a6c4			beq 	_GXLExit
.c6bf	a6bf	20 e6 a6	jsr $a6e6			jsr 	GXLineAdvance 				; code as per advance method
.c6c2	a6c2	80 e9		bra $a6ad			bra 	_GXDrawLoop
.c6c4	a6c4					_GXLExit:
.c6c4	a6c4	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.c6c7	a6c7	18		clc				clc
.c6c8	a6c8	60		rts				rts
.c6c9	a6c9					_GXLFail:
.c6c9	a6c9	38		sec				sec
.c6ca	a6ca	60		rts				rts
.c6cb	a6cb					GXLineIsComplete:
.c6cb	a6cb	ad 5e 08	lda $085e			lda 	gxIsDiffYLarger 			; is dy larger
.c6ce	a6ce	d0 0f		bne $a6df			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.c6d0	a6d0	ad bf 07	lda $07bf			lda 	gxX0 						; compare X, LSB and MSB
.c6d3	a6d3	4d c3 07	eor $07c3			eor 	gxX1
.c6d6	a6d6	d0 06		bne $a6de			bne 	_GXLICExit
.c6d8	a6d8	ad c0 07	lda $07c0			lda 	gxX0+1
.c6db	a6db	4d c4 07	eor $07c4			eor 	gxX1+1
.c6de	a6de					_GXLICExit:
.c6de	a6de	60		rts				rts
.c6df	a6df					_GXLICCompareY:
.c6df	a6df	ad c5 07	lda $07c5			lda 	gxY1
.c6e2	a6e2	4d c1 07	eor $07c1			eor 	gxY0
.c6e5	a6e5	60		rts				rts
.c6e6	a6e6					GXLineAdvance:
.c6e6	a6e6	18		clc				clc 								; add adjust to position
.c6e7	a6e7	ad 60 08	lda $0860			lda 	gxPosition
.c6ea	a6ea	6d 61 08	adc $0861			adc 	gxAdjust
.c6ed	a6ed	8d 60 08	sta $0860			sta 	gxPosition
.c6f0	a6f0	9c 63 08	stz $0863			stz 	gxAddSelect 				; clear add select flag
.c6f3	a6f3	b0 05		bcs $a6fa			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c6f5	a6f5	cd 62 08	cmp $0862			cmp 	gxTotal 					; if exceeded total
.c6f8	a6f8	90 0a		bcc $a704			bcc 	_GXLANoExtra
.c6fa	a6fa					_GXLAOverflow:
.c6fa	a6fa	ce 63 08	dec $0863			dec 	gxAddSelect 				; set addselect to $FF
.c6fd	a6fd	38		sec				sec 								; subtract total and write back
.c6fe	a6fe	ed 62 08	sbc $0862			sbc 	gxTotal
.c701	a701	8d 60 08	sta $0860			sta 	gxPosition
.c704	a704					_GXLANoExtra:
.c704	a704	ad 5e 08	lda $085e			lda 	gxIsDiffYLarger
.c707	a707	f0 0d		beq $a716			beq 	_GXDXLarger
.c709	a709	20 68 a7	jsr $a768			jsr 	GXIncrementY
.c70c	a70c	ad 63 08	lda $0863			lda 	gxAddSelect
.c70f	a70f	f0 10		beq $a721			beq 	_GXLAExit
.c711	a711	20 22 a7	jsr $a722			jsr 	gxAdjustX
.c714	a714	80 0b		bra $a721			bra 	_GXLAExit
.c716	a716					_GXDXLarger:
.c716	a716	20 22 a7	jsr $a722			jsr 	gxAdjustX
.c719	a719	ad 63 08	lda $0863			lda 	gxAddSelect
.c71c	a71c	f0 03		beq $a721			beq 	_GXLAExit
.c71e	a71e	20 68 a7	jsr $a768			jsr 	GXIncrementY
.c721	a721					_GXLAExit:
.c721	a721	60		rts				rts
.c722	a722					gxAdjustX:
.c722	a722	ad 5f 08	lda $085f			lda 	gxDXNegative
.c725	a725	10 25		bpl $a74c			bpl 	_GXAXRight
.c727	a727	ad bf 07	lda $07bf			lda 	gxX0
.c72a	a72a	d0 03		bne $a72f			bne 	_GXAXNoBorrow
.c72c	a72c	ce c0 07	dec $07c0			dec 	gxX0+1
.c72f	a72f					_GXAXNoBorrow:
.c72f	a72f	ce bf 07	dec $07bf			dec 	gxX0
.c732	a732	ce d1 07	dec $07d1			dec 	gxOffset 					; pixel left
.c735	a735	ad d1 07	lda $07d1			lda 	gxOffset
.c738	a738	c9 ff		cmp #$ff			cmp 	#$FF
.c73a	a73a	d0 0f		bne $a74b			bne 	_GXAYExit 					; underflow
.c73c	a73c	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c73e	a73e	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c740	a740	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c742	a742	b0 07		bcs $a74b			bcs 	_GXAYExit
.c744	a744	18		clc				clc
.c745	a745	69 20		adc #$20			adc 	#$20 						; fix up
.c747	a747	85 3d		sta $3d				sta 	gxzScreen+1
.c749	a749	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c74b	a74b					_GXAYExit:
.c74b	a74b	60		rts				rts
.c74c	a74c					_GXAXRight:
.c74c	a74c	ee bf 07	inc $07bf			inc 	gxX0
.c74f	a74f	d0 03		bne $a754			bne 	_GXAXNoCarry
.c751	a751	ee c0 07	inc $07c0			inc 	gxX0+1
.c754	a754					_GXAXNoCarry:
.c754	a754	ee d1 07	inc $07d1			inc 	gxOffset 					; pixel right
.c757	a757	d0 0e		bne $a767			bne 	_GXAXExit 					; if not overflowed, exit.
.c759	a759	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c75b	a75b	a5 3d		lda $3d				lda 	gxzScreen+1
.c75d	a75d	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c75f	a75f	90 06		bcc $a767			bcc 	_GXAXExit
.c761	a761	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c763	a763	85 3d		sta $3d				sta 	gxzScreen+1
.c765	a765	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c767	a767					_GXAXExit:
.c767	a767	60		rts				rts
.c768	a768					GXIncrementY:
.c768	a768	ee c1 07	inc $07c1			inc 	gxY0
.c76b	a76b	20 e4 ab	jsr $abe4			jsr 	GXMovePositionDown
.c76e	a76e	60		rts				rts
.c76f	a76f					GXLineSetup:
.c76f	a76f	ad c5 07	lda $07c5			lda 	gxY1
.c772	a772	38		sec				sec
.c773	a773	ed c1 07	sbc $07c1			sbc 	gxY0
.c776	a776	4a		lsr a				lsr 	a
.c777	a777	8d 5d 08	sta $085d			sta 	gxDiffY
.c77a	a77a	9c 5f 08	stz $085f			stz 	gxDXNegative 				; clear -ve flag
.c77d	a77d	38		sec				sec
.c77e	a77e	ad c3 07	lda $07c3			lda 	gxX1
.c781	a781	ed bf 07	sbc $07bf			sbc 	gxX0
.c784	a784	8d 5c 08	sta $085c			sta 	gxDiffX
.c787	a787	ad c4 07	lda $07c4			lda 	gxX1+1 						; calculate MSB
.c78a	a78a	ed c0 07	sbc $07c0			sbc 	gxX0+1
.c78d	a78d	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c78e	a78e	6e 5c 08	ror $085c			ror 	gxDiffX
.c791	a791	0a		asl a				asl 	a
.c792	a792	10 0c		bpl $a7a0			bpl 	_GDXNotNegative
.c794	a794	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c796	a796	38		sec				sec
.c797	a797	ed 5c 08	sbc $085c			sbc 	gxDiffX
.c79a	a79a	8d 5c 08	sta $085c			sta 	gxDiffX
.c79d	a79d	ce 5f 08	dec $085f			dec 	gxDXNegative 				; -ve flag = $FF.
.c7a0	a7a0					_GDXNotNegative:
.c7a0	a7a0	9c 5e 08	stz $085e			stz 	gxIsDiffYLarger 			; clear larger flag
.c7a3	a7a3	ad 5d 08	lda $085d			lda 	gxDiffY 					; set adjust and total.
.c7a6	a7a6	8d 61 08	sta $0861			sta 	gxAdjust
.c7a9	a7a9	ad 5c 08	lda $085c			lda 	gxDiffX
.c7ac	a7ac	8d 62 08	sta $0862			sta 	gxTotal
.c7af	a7af	ad 5d 08	lda $085d			lda 	gxDiffY 					; if dy > dx
.c7b2	a7b2	cd 5c 08	cmp $085c			cmp 	gxDiffX
.c7b5	a7b5	90 0f		bcc $a7c6			bcc 	_GDXNotLarger
.c7b7	a7b7	ce 5e 08	dec $085e			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7ba	a7ba	ad 5c 08	lda $085c			lda 	gxDiffX 					; set adjust and total other way round
.c7bd	a7bd	8d 61 08	sta $0861			sta 	gxAdjust
.c7c0	a7c0	ad 5d 08	lda $085d			lda 	gxDiffY
.c7c3	a7c3	8d 62 08	sta $0862			sta 	gxTotal
.c7c6	a7c6					_GDXNotLarger:
.c7c6	a7c6	ad 62 08	lda $0862			lda 	gxTotal
.c7c9	a7c9	4a		lsr a				lsr 	a
.c7ca	a7ca	8d 60 08	sta $0860			sta 	gxPosition
.c7cd	a7cd	60		rts				rts
.085c						gxDiffX:
>085c								.fill 	1
.085d						gxDiffY:
>085d								.fill 	1
.085e						gxIsDiffYLarger:
>085e								.fill 	1
.085f						gxDXNegative:
>085f								.fill 	1
.0860						gxPosition:
>0860								.fill 	1
.0861						gxAdjust:
>0861								.fill 	1
.0862						gxTotal:
>0862								.fill 	1
.0863						gxAddSelect:
>0863								.fill 	1
.c7ce	a7ce					GXSetColourMode:
.c7ce	a7ce	a6 36		ldx $36				ldx 	gxzTemp0
.c7d0	a7d0	8e cd 07	stx $07cd			stx 	gxColour 								; set colour
.c7d3	a7d3	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7d5	a7d5	8d cc 07	sta $07cc			sta 	gxMode 									; set mode
.c7d8	a7d8	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7da	a7da	9c cf 07	stz $07cf			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7dd	a7dd	ae cd 07	ldx $07cd			ldx 	gxColour
.c7e0	a7e0	8e ce 07	stx $07ce			stx 	gxEORValue
.c7e3	a7e3	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7e5	a7e5	90 03		bcc $a7ea			bcc 	_GXSDCNotAndColour
.c7e7	a7e7	8e cf 07	stx $07cf			stx 	gxANDValue
.c7ea	a7ea					_GXSDCNotAndColour:
.c7ea	a7ea	d0 03		bne $a7ef			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7ec	a7ec	9c ce 07	stz $07ce			stz 	gxEORValue
.c7ef	a7ef					_GXSDCNotAnd:
.c7ef	a7ef	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7f0	a7f0	90 08		bcc $a7fa			bcc 	_GXSDCNoFlip
.c7f2	a7f2	ad cf 07	lda $07cf			lda	 	gxANDValue
.c7f5	a7f5	49 ff		eor #$ff			eor 	#$FF
.c7f7	a7f7	8d cf 07	sta $07cf			sta 	gxANDValue
.c7fa	a7fa					_GXSDCNoFlip:
.c7fa	a7fa	18		clc				clc
.c7fb	a7fb	60		rts				rts
.c7fc	a7fc					GXPlotPoint:
.c7fc	a7fc	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start drawing
.c7ff	a7ff	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c802	a802	ac d1 07	ldy $07d1			ldy 	gxOffset
.c805	a805	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c807	a807	2d cf 07	and $07cf			and 	gxANDValue
.c80a	a80a	4d ce 07	eor $07ce			eor 	gxEORValue
.c80d	a80d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c80f	a80f	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c812	a812	18		clc				clc
.c813	a813	60		rts				rts
.c814	a814					GXFillRectangle:
.c814	a814	38		sec				sec
.c815	a815	80 01		bra $a818			bra 	GXRectangle
.c817	a817					GXFrameRectangle:
.c817	a817	18		clc				clc
.c818	a818					GXRectangle:
.c818	a818	ad c8 07	lda $07c8			lda 	gxBitmapsOn
.c81b	a81b	f0 35		beq $a852			beq 	_GXRFail
.c81d	a81d	08		php				php 								; save Fill flag (CS)
.c81e	a81e	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; start drawing
.c821	a821	20 a6 ac	jsr $aca6			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c824	a824	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c827	a827	38		sec				sec 								; sec = Draw line
.c828	a828	20 54 a8	jsr $a854			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c82b	a82b	ad c1 07	lda $07c1			lda 	gxY0 						; reached end of rectangle ?
.c82e	a82e	cd c5 07	cmp $07c5			cmp 	gxY1
.c831	a831	f0 19		beq $a84c			beq 	_GXRectangleExit
.c833	a833					_GXRectLoop:
.c833	a833	20 e4 ab	jsr $abe4			jsr 	GXMovePositionDown 			; down one.
.c836	a836	ee c1 07	inc $07c1			inc 	gxY0 						; change Y pos
.c839	a839	ad c1 07	lda $07c1			lda 	gxY0 						; reached last line
.c83c	a83c	cd c5 07	cmp $07c5			cmp 	gxY1
.c83f	a83f	f0 07		beq $a848			beq 	_GXLastLine
.c841	a841	28		plp				plp 								; get flag back
.c842	a842	08		php				php
.c843	a843	20 54 a8	jsr $a854			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c846	a846	80 eb		bra $a833			bra 	_GXRectLoop
.c848	a848					_GXLastLine:
.c848	a848	38		sec				sec
.c849	a849	20 54 a8	jsr $a854			jsr 	GXDrawLineX1X0
.c84c	a84c					_GXRectangleExit:
.c84c	a84c	68		pla				pla 								; throw fill flag.
.c84d	a84d	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c850	a850	18		clc				clc
.c851	a851	60		rts				rts
.c852	a852					_GXRFail:
.c852	a852	38		sec				sec
.c853	a853	60		rts				rts
.c854	a854					GXDrawLineX1X0:
.c854	a854	08		php				php 								; save solid/either-end
.c855	a855	38		sec				sec
.c856	a856	ad c3 07	lda $07c3			lda		gxX1
.c859	a859	ed bf 07	sbc $07bf			sbc 	gxX0
.c85c	a85c	85 36		sta $36				sta 	gxzTemp0
.c85e	a85e	ad c4 07	lda $07c4			lda 	gxX1+1
.c861	a861	ed c0 07	sbc $07c0			sbc 	gxX0+1
.c864	a864	85 37		sta $37				sta 	gxzTemp0+1
.c866	a866	28		plp				plp
.c867	a867					GXDrawLineTemp0:
.c867	a867	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.c869	a869	48		pha				pha
.c86a	a86a	a5 3d		lda $3d				lda 	gxzScreen+1
.c86c	a86c	48		pha				pha
.c86d	a86d	ad d1 07	lda $07d1			lda 	gxOffset
.c870	a870	48		pha				pha
.c871	a871	a5 0b		lda $0b				lda 	GXEditSlot
.c873	a873	48		pha				pha
.c874	a874	ac d1 07	ldy $07d1			ldy 	gxOffset 					; Y offset
.c877	a877	90 1e		bcc $a897			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c879	a879					_GXDLTLine:
.c879	a879	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c87b	a87b	2d cf 07	and $07cf			and 	gxANDValue
.c87e	a87e	4d ce 07	eor $07ce			eor 	gxEORValue
.c881	a881	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c883	a883	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c885	a885	d0 04		bne $a88b			bne 	_GXDLTNoBorrow
.c887	a887	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c889	a889	30 2e		bmi $a8b9			bmi 	_GXDLTExit
.c88b	a88b					_GXDLTNoBorrow:
.c88b	a88b	c6 36		dec $36				dec 	gxzTemp0
.c88d	a88d	c8		iny				iny 								; next slot.
.c88e	a88e	d0 e9		bne $a879			bne 	_GXDLTLine
.c890	a890	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.c892	a892	20 c7 a8	jsr $a8c7			jsr 	GXDLTCheckWrap				; check for new page.
.c895	a895	80 e2		bra $a879			bra 	_GXDLTLine
.c897	a897					_GXDLTEndPoints:
.c897	a897	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c899	a899	2d cf 07	and $07cf			and 	gxANDValue
.c89c	a89c	4d ce 07	eor $07ce			eor 	gxEORValue
.c89f	a89f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8a1	a8a1	98		tya				tya 								; advance to right side
.c8a2	a8a2	18		clc				clc
.c8a3	a8a3	65 36		adc $36				adc 	gxzTemp0
.c8a5	a8a5	a8		tay				tay
.c8a6	a8a6	a5 3d		lda $3d				lda 	gxzScreen+1
.c8a8	a8a8	65 37		adc $37				adc 	gxzTemp0+1
.c8aa	a8aa	85 3d		sta $3d				sta 	gxzScreen+1
.c8ac	a8ac	20 c7 a8	jsr $a8c7			jsr 	GXDLTCheckWrap 			; fix up.
.c8af	a8af	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c8b1	a8b1	2d cf 07	and $07cf			and 	gxANDValue
.c8b4	a8b4	4d ce 07	eor $07ce			eor 	gxEORValue
.c8b7	a8b7	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8b9	a8b9					_GXDLTExit:
.c8b9	a8b9	68		pla				pla
.c8ba	a8ba	85 0b		sta $0b				sta 	GXEditSlot
.c8bc	a8bc	68		pla				pla
.c8bd	a8bd	8d d1 07	sta $07d1			sta 	gxOffset
.c8c0	a8c0	68		pla				pla
.c8c1	a8c1	85 3d		sta $3d				sta 	gxzScreen+1
.c8c3	a8c3	68		pla				pla
.c8c4	a8c4	85 3c		sta $3c				sta 	gxzScreen
.c8c6	a8c6	60		rts				rts
.c8c7	a8c7					GXDLTCheckWrap:
.c8c7	a8c7	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.c8c9	a8c9	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8cb	a8cb	90 06		bcc $a8d3			bcc 	_GXDLTCWExit
.c8cd	a8cd	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8cf	a8cf	85 3d		sta $3d				sta 	gxzScreen+1
.c8d1	a8d1	e6 0b		inc $0b				inc 	GXEditSlot
.c8d3	a8d3					_GXDLTCWExit:
.c8d3	a8d3	60		rts				rts
.c8d4	a8d4					GXDrawGraphicElement:
.c8d4	a8d4	8d 64 08	sta $0864			sta 	gxSize 						; save size
.c8d7	a8d7	3a		dec a				dec 	a
.c8d8	a8d8	8d 65 08	sta $0865			sta 	gxMask 						; and mask
.c8db	a8db	ad c8 07	lda $07c8			lda 	gxBitmapsOn 				; check BMP on
.c8de	a8de	f0 67		beq $a947			beq 	_GXSLFail
.c8e0	a8e0	ad c1 07	lda $07c1			lda 	gxY0 						; push Y on stack
.c8e3	a8e3	48		pha				pha
.c8e4	a8e4	8c 67 08	sty $0867			sty 	gxAcquireVector+1 			; and acquisition vector
.c8e7	a8e7	8e 66 08	stx $0866			stx 	gxAcquireVector
.c8ea	a8ea	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; open the bitmap.
.c8ed	a8ed	ad 69 08	lda $0869			lda 	gxUseMode 					; scale bits
.c8f0	a8f0	4a		lsr a				lsr 	a
.c8f1	a8f1	4a		lsr a				lsr 	a
.c8f2	a8f2	4a		lsr a				lsr 	a
.c8f3	a8f3	29 07		and #$07			and		#7
.c8f5	a8f5	1a		inc a				inc 	a
.c8f6	a8f6	8d 68 08	sta $0868			sta 	gxScale
.c8f9	a8f9	64 38		stz $38				stz 	gxzTemp1					; start first line
.c8fb	a8fb					_GXGELoop:
.c8fb	a8fb	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c8fd	a8fd	2c 69 08	bit $0869			bit 	gxUseMode 					; check for flip.
.c900	a900	10 06		bpl $a908			bpl		_GXNoVFlip
.c902	a902	ad 65 08	lda $0865			lda 	gxMask
.c905	a905	38		sec				sec
.c906	a906	e5 38		sbc $38				sbc 	gxzTemp1
.c908	a908					_GXNoVFlip:
.c908	a908	aa		tax				tax 								; get the Xth line.
.c909	a909	20 49 a9	jsr $a949			jsr 	_GXCallAcquire 				; get that data.
.c90c	a90c	ad 68 08	lda $0868			lda 	gxScale 					; do scale identical copies of that line.
.c90f	a90f	85 39		sta $39				sta 	gxzTemp1+1
.c911	a911					_GXGELoop2:
.c911	a911	ad c1 07	lda $07c1			lda 	gxY0 						; off screen
.c914	a914	cd cb 07	cmp $07cb			cmp 	gxHeight
.c917	a917	b0 10		bcs $a929			bcs 	_GXDGEExit
.c919	a919	20 4c a9	jsr $a94c			jsr 	GXRenderOneLine 			; render line
.c91c	a91c	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c91e	a91e	d0 f1		bne $a911			bne 	_GXGELoop2
.c920	a920	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c922	a922	a5 38		lda $38				lda 	gxzTemp1
.c924	a924	cd 64 08	cmp $0864			cmp 	gxSize
.c927	a927	d0 d2		bne $a8fb			bne 	_GXGELoop
.c929	a929					_GXDGEExit:
.c929	a929	68		pla				pla 								; restore Y for next time
.c92a	a92a	8d c1 07	sta $07c1			sta 	gxY0
.c92d	a92d	ae 68 08	ldx $0868			ldx 	gxScale 					; get scale (1-8)
.c930	a930					_GXShiftLeft:
.c930	a930	18		clc				clc
.c931	a931	ad 64 08	lda $0864			lda 	gxSize
.c934	a934	6d bf 07	adc $07bf			adc 	gxX0
.c937	a937	8d bf 07	sta $07bf			sta 	gxX0
.c93a	a93a	90 03		bcc $a93f			bcc 	_GXSLNoCarry
.c93c	a93c	ee c0 07	inc $07c0			inc 	gxX0+1
.c93f	a93f					_GXSLNoCarry:
.c93f	a93f	ca		dex				dex
.c940	a940	d0 ee		bne $a930			bne 	_GXShiftLeft
.c942	a942	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.c945	a945	18		clc				clc
.c946	a946	60		rts				rts
.c947	a947					_GXSLFail:
.c947	a947	38		sec				sec
.c948	a948	60		rts				rts
.c949	a949					_GXCallAcquire:
.c949	a949	6c 66 08	jmp ($0866)			jmp 	(gxAcquireVector)
.c94c	a94c					GXRenderOneLine:
.c94c	a94c	20 8e ab	jsr $ab8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c94f	a94f	ac d1 07	ldy $07d1			ldy 	gxOffset 					; Y contains position.
.c952	a952	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c954	a954					_GXROLLoop1:
.c954	a954	ad 68 08	lda $0868			lda 	gxScale 					; set to do 'scale' times
.c957	a957	85 3b		sta $3b				sta 	gxzTemp2+1
.c959	a959					_GXROLLoop2:
.c959	a959	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c95b	a95b	2c cc 07	bit $07cc			bit 	gxMode 						; check H Flip
.c95e	a95e	50 06		bvc $a966			bvc 	_GXNoHFlip
.c960	a960	ad 65 08	lda $0865			lda 	gxMask
.c963	a963	38		sec				sec
.c964	a964	e5 3a		sbc $3a				sbc 	gxzTemp2
.c966	a966					_GXNoHFlip:
.c966	a966	aa		tax				tax 								; read from the pixel buffer
.c967	a967	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c96a	a96a	d0 07		bne $a973			bne 	_GXDraw 					; draw if non zero
.c96c	a96c	ad 69 08	lda $0869			lda 	gxUseMode 					; check to see if solid background
.c96f	a96f	29 04		and #$04			and 	#4
.c971	a971	f0 0a		beq $a97d			beq 	_GXZeroPixel
.c973	a973					_GXDraw:
.c973	a973	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c975	a975	2d cf 07	and $07cf			and 	gxANDValue
.c978	a978	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c97b	a97b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c97d	a97d					_GXZeroPixel:
.c97d	a97d	c8		iny				iny 								; advance pointer
.c97e	a97e	d0 05		bne $a985			bne 	_GXNoShift
.c980	a980	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c982	a982	20 c7 a8	jsr $a8c7			jsr 	GXDLTCheckWrap				; check for new page.
.c985	a985					_GXNoShift:
.c985	a985	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c987	a987	d0 d0		bne $a959			bne 	_GXROLLoop2
.c989	a989	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c98b	a98b	a5 3a		lda $3a				lda 	gxzTemp2
.c98d	a98d	cd 64 08	cmp $0864			cmp 	gxSize
.c990	a990	d0 c2		bne $a954			bne 	_GXROLLoop1
.c992	a992	ee c1 07	inc $07c1			inc 	gxY0
.c995	a995	60		rts				rts
.0864						gxSize:
>0864								.fill 	1
.0865						gxMask:
>0865								.fill 	1
.0866						gxAcquireVector:
>0866								.fill 	2
.0868						gxScale:
>0868								.fill 	1
.0869						gxUseMode:
>0869								.fill 	1
.c996	a996					GXFontHandler:
.c996	a996	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c998	a998	4d cc 07	eor $07cc			eor 	gxMode
.c99b	a99b	8d 69 08	sta $0869			sta 	gxUseMode
.c99e	a99e	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.c9a0	a9a0	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.c9a2	a9a2	26 37		rol $37				rol	 	gxzTemp0+1
.c9a4	a9a4	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.c9a6	a9a6	26 37		rol $37				rol	 	gxzTemp0+1
.c9a8	a9a8	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.c9aa	a9aa	26 37		rol $37				rol	 	gxzTemp0+1
.c9ac	a9ac	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.c9ae	a9ae	09 c0		ora #$c0			ora 	#$C0
.c9b0	a9b0	85 37		sta $37				sta 	gxzTemp0+1
.c9b2	a9b2	a9 08		lda #$08			lda 	#8 							; size 8x8
.c9b4	a9b4	a2 bc		ldx #$bc			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.c9b6	a9b6	a0 a9		ldy #$a9			ldy 	#GXGetGraphicDataFont >> 8
.c9b8	a9b8	20 d4 a8	jsr $a8d4			jsr 	GXDrawGraphicElement
.c9bb	a9bb	60		rts				rts
.c9bc	a9bc					GXGetGraphicDataFont:
.c9bc	a9bc	8a		txa				txa 								; X->Y
.c9bd	a9bd	a8		tay				tay
.c9be	a9be	a6 01		ldx $01				ldx 	1 							; preserve old value
.c9c0	a9c0	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.c9c2	a9c2	85 01		sta $01				sta 	1
.c9c4	a9c4	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.c9c6	a9c6	86 01		stx $01				stx 	1 							; put old value back.
.c9c8	a9c8	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.c9ca	a9ca					_GXExpand:
.c9ca	a9ca	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.c9cd	a9cd	0a		asl a				asl 	a 							; shift bit 7 into C
.c9ce	a9ce	90 08		bcc $a9d8			bcc 	_GXNoPixel
.c9d0	a9d0	48		pha				pha 								; if set, set pixel buffer to current colour.
.c9d1	a9d1	ad cd 07	lda $07cd			lda 	gxColour
.c9d4	a9d4	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.c9d7	a9d7	68		pla				pla
.c9d8	a9d8					_GXNoPixel:
.c9d8	a9d8	e8		inx				inx 								; do the whole byte.
.c9d9	a9d9	e0 08		cpx #$08			cpx 	#8
.c9db	a9db	d0 ed		bne $a9ca			bne 	_GXExpand
.c9dd	a9dd	60		rts				rts
.c9de	a9de					GXSpriteHandler:
.c9de	a9de	ad c7 07	lda $07c7			lda 	gxSpritesOn 				; sprites on ?
.c9e1	a9e1	f0 23		beq $aa06			beq 	_GXSHExit
.c9e3	a9e3	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9e5	a9e5	4d cc 07	eor $07cc			eor 	gxMode
.c9e8	a9e8	8d 69 08	sta $0869			sta 	gxUseMode
.c9eb	a9eb	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.c9ed	a9ed	da		phx				phx
.c9ee	a9ee	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap 				; can access sprite information
.c9f1	a9f1	68		pla				pla
.c9f2	a9f2	20 5f ac	jsr $ac5f			jsr 	GXFindSprite 				; get the sprite address
.c9f5	a9f5	08		php				php
.c9f6	a9f6	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.c9f9	a9f9	28		plp				plp
.c9fa	a9fa	b0 0a		bcs $aa06			bcs		_GXSHExit 					; exit if find failed.
.c9fc	a9fc	ad 6a 08	lda $086a			lda 	gxSizePixels 				; return size
.c9ff	a9ff	a2 07		ldx #$07			ldx 	#GXSpriteAcquire & $FF
.ca01	aa01	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca03	aa03	20 d4 a8	jsr $a8d4			jsr 	GXDrawGraphicElement
.ca06	aa06					_GXSHExit:
.ca06	aa06	60		rts				rts
.ca07	aa07					GXSpriteAcquire:
.ca07	aa07	ad ca 07	lda $07ca			lda 	gxSpritePage				; point to base page
.ca0a	aa0a	85 0b		sta $0b				sta 	GXEditSlot
.ca0c	aa0c	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca0e	aa0e	a9 00		lda #$00			lda 	#0
.ca10	aa10	ae 6b 08	ldx $086b			ldx 	gxSizeBits
.ca13	aa13					_GXTimesRowNumber:
.ca13	aa13	18		clc				clc
.ca14	aa14	65 36		adc $36				adc 	gxzTemp0
.ca16	aa16	ca		dex				dex
.ca17	aa17	10 fa		bpl $aa13			bpl 	_GXTimesRowNumber
.ca19	aa19	64 37		stz $37				stz 	gxzTemp0+1
.ca1b	aa1b	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca1c	aa1c	26 37		rol $37				rol 	gxzTemp0+1
.ca1e	aa1e	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca1f	aa1f	26 37		rol $37				rol 	gxzTemp0+1
.ca21	aa21	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca22	aa22	26 37		rol $37				rol 	gxzTemp0+1
.ca24	aa24	85 36		sta $36				sta 	gxzTemp0
.ca26	aa26	18		clc				clc 								; add base address.
.ca27	aa27	a5 36		lda $36				lda 	gxzTemp0
.ca29	aa29	6d 6d 08	adc $086d			adc 	gxSpriteOffset
.ca2c	aa2c	85 36		sta $36				sta 	gxzTemp0
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1
.ca30	aa30	6d 6e 08	adc $086e			adc 	gxSpriteOffset+1
.ca33	aa33					_GXSAFindPage:
.ca33	aa33	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca35	aa35	90 06		bcc $aa3d			bcc 	_GXSAFoundPage
.ca37	aa37	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca39	aa39	e6 0b		inc $0b				inc 	GXEditSlot
.ca3b	aa3b	80 f6		bra $aa33			bra 	_GXSAFindPage
.ca3d	aa3d					_GXSAFoundPage:
.ca3d	aa3d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ca3f	aa3f	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ca41	aa41	a0 00		ldy #$00			ldy 	#0
.ca43	aa43					_GXSACopyLoop:
.ca43	aa43	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ca45	aa45	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ca48	aa48	c8		iny				iny
.ca49	aa49	cc 6a 08	cpy $086a			cpy 	gxSizePixels
.ca4c	aa4c	d0 f5		bne $aa43			bne 	_GXSACopyLoop
.ca4e	aa4e	60		rts				rts
.ca4f	aa4f					GXSelect:
.ca4f	aa4f	ad c7 07	lda $07c7			lda 	gxSpritesOn
.ca52	aa52	f0 22		beq $aa76			beq 	_GXSFail
.ca54	aa54	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ca56	aa56	c9 40		cmp #$40			cmp 	#64
.ca58	aa58	b0 1c		bcs $aa76			bcs 	_GXSFail
.ca5a	aa5a	8d d2 07	sta $07d2			sta 	GSCurrentSpriteID
.ca5d	aa5d	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ca5f	aa5f	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ca61	aa61	06 36		asl $36				asl 	gxzTemp0
.ca63	aa63	06 36		asl $36				asl 	gxzTemp0
.ca65	aa65	06 36		asl $36				asl 	gxzTemp0
.ca67	aa67	2a		rol a				rol 	a
.ca68	aa68	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ca6a	aa6a	8d d4 07	sta $07d4			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ca6d	aa6d	85 37		sta $37				sta 	gxzTemp0+1
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d d3 07	sta $07d3			sta 	GSCurrentSpriteAddr
.ca74	aa74	18		clc				clc
.ca75	aa75	60		rts				rts
.ca76	aa76					_GXSFail:
.ca76	aa76	38		sec				sec
.ca77	aa77	60		rts				rts
.ca78	aa78					GXSelectImage:
.ca78	aa78	ad c7 07	lda $07c7			lda 	gxSpritesOn
.ca7b	aa7b	f0 74		beq $aaf1			beq 	_GXSIFail
.ca7d	aa7d	ad d4 07	lda $07d4			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ca80	aa80	f0 6f		beq $aaf1			beq 	_GXSIFail 					; (checking the MSB)
.ca82	aa82	64 01		stz $01				stz 	1
.ca84	aa84	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ca86	aa86	d0 6b		bne $aaf3			bne 	_GXSIHide
.ca88	aa88	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ca8a	aa8a	48		pha				pha
.ca8b	aa8b	20 7e ab	jsr $ab7e			jsr 	GXOpenBitmap
.ca8e	aa8e	68		pla				pla
.ca8f	aa8f	20 5f ac	jsr $ac5f			jsr 	GXFindSprite
.ca92	aa92	b0 5a		bcs $aaee			bcs 	_GXSICloseFail 				; no image
.ca94	aa94	a0 01		ldy #$01			ldy 	#1
.ca96	aa96	ad d3 07	lda $07d3			lda 	GSCurrentSpriteAddr
.ca99	aa99	85 36		sta $36				sta 	gxzTemp0
.ca9b	aa9b	ad d4 07	lda $07d4			lda 	GSCurrentSpriteAddr+1
.ca9e	aa9e	85 37		sta $37				sta 	gxzTemp0+1
.caa0	aaa0	ad 6d 08	lda $086d			lda 	gxSpriteOffset
.caa3	aaa3	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.caa5	aaa5	18		clc				clc
.caa6	aaa6	ad 6e 08	lda $086e			lda 	gxSpriteOffset+1
.caa9	aaa9	6d d5 07	adc $07d5			adc 	gxSpriteOffsetBase
.caac	aaac	c8		iny				iny
.caad	aaad	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.caaf	aaaf	ad d6 07	lda $07d6			lda 	gxSpriteOffsetBase+1
.cab2	aab2	69 00		adc #$00			adc 	#0
.cab4	aab4	c8		iny				iny
.cab5	aab5	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cab7	aab7	ad 6b 08	lda $086b			lda 	gxSizeBits 					; get raw size
.caba	aaba	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cabc	aabc	2a		rol a				rol 	a 							; x 2
.cabd	aabd	0a		asl a				asl 	a 							; x 4
.cabe	aabe	0a		asl a				asl 	a 							; x 8
.cabf	aabf	0a		asl a				asl 	a 							; x 16
.cac0	aac0	0d 6c 08	ora $086c			ora 	gxSpriteLUT 				; Or with LUT
.cac3	aac3	0a		asl a				asl 	a 							; 1 shift
.cac4	aac4	09 01		ora #$01			ora 	#1 							; enable sprite.
.cac6	aac6	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cac8	aac8	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.cacb	aacb	ae d2 07	ldx $07d2			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cace	aace	bd 17 08	lda $0817,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cad1	aad1	29 3f		and #$3f			and 	#$3F
.cad3	aad3	9d 17 08	sta $0817,x			sta 	gxSpriteHigh,x
.cad6	aad6	ad 6b 08	lda $086b			lda 	gxSizeBits 					; get bit size
.cad9	aad9	6a		ror a				ror 	a 							; shift into bits 6/7
.cada	aada	6a		ror a				ror 	a
.cadb	aadb	6a		ror a				ror 	a
.cadc	aadc	29 c0		and #$c0			and 	#$C0
.cade	aade	1d 17 08	ora $0817,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cae1	aae1	9d 17 08	sta $0817,x			sta 	gxSpriteHigh,x
.cae4	aae4	bd d7 07	lda $07d7,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cae7	aae7	29 7f		and #$7f			and 	#$7F
.cae9	aae9	9d d7 07	sta $07d7,x			sta 	gxSpriteLow,x
.caec	aaec	18		clc				clc
.caed	aaed	60		rts				rts
.caee	aaee					_GXSICloseFail:
.caee	aaee	20 86 ab	jsr $ab86			jsr 	GXCloseBitmap
.caf1	aaf1					_GXSIFail:
.caf1	aaf1	38		sec				sec
.caf2	aaf2	60		rts				rts
.caf3	aaf3					_GXSIHide:
.caf3	aaf3	ad d3 07	lda $07d3			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.caf6	aaf6	85 36		sta $36				sta 	gxzTemp0
.caf8	aaf8	ad d4 07	lda $07d4			lda 	GSCurrentSpriteAddr+1
.cafb	aafb	85 37		sta $37				sta 	gxzTemp0+1
.cafd	aafd	a9 00		lda #$00			lda 	#0
.caff	aaff	92 36		sta ($36)			sta 	(gxzTemp0)
.cb01	ab01	ae d2 07	ldx $07d2			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb04	ab04	bd d7 07	lda $07d7,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb07	ab07	09 80		ora #$80			ora 	#$80
.cb09	ab09	9d d7 07	sta $07d7,x			sta 	gxSpriteLow,x
.cb0c	ab0c	18		clc				clc
.cb0d	ab0d	60		rts				rts
.cb0e	ab0e					GXMoveSprite:
.cb0e	ab0e	ad c7 07	lda $07c7			lda 	gxSpritesOn
.cb11	ab11	f0 65		beq $ab78			beq 	_GXSIFail
.cb13	ab13	ad d4 07	lda $07d4			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb16	ab16	f0 60		beq $ab78			beq 	_GXSIFail
.cb18	ab18	85 37		sta $37				sta 	gxzTemp0+1
.cb1a	ab1a	a0 04		ldy #$04			ldy 	#4
.cb1c	ab1c	ad d3 07	lda $07d3			lda 	GSCurrentSpriteAddr
.cb1f	ab1f	85 36		sta $36				sta 	gxzTemp0
.cb21	ab21	ae d2 07	ldx $07d2			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb24	ab24	bd 17 08	lda $0817,x			lda 	gxSpriteHigh,x
.cb27	ab27	2a		rol a				rol 	a	 						; into bits 0,1.
.cb28	ab28	2a		rol a				rol 	a
.cb29	ab29	2a		rol a				rol 	a
.cb2a	ab2a	29 03		and #$03			and 	#3
.cb2c	ab2c	aa		tax				tax
.cb2d	ab2d	bd 7a ab	lda $ab7a,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb30	ab30	48		pha				pha
.cb31	ab31	18		clc				clc
.cb32	ab32	6d bf 07	adc $07bf			adc 	gxX0						; copy position.
.cb35	ab35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb37	ab37	c8		iny				iny
.cb38	ab38	ad c0 07	lda $07c0			lda 	gxX0+1
.cb3b	ab3b	69 00		adc #$00			adc 	#0
.cb3d	ab3d	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb3f	ab3f	c8		iny				iny
.cb40	ab40	68		pla				pla
.cb41	ab41	18		clc				clc
.cb42	ab42	6d c1 07	adc $07c1			adc 	gxY0
.cb45	ab45	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb47	ab47	a9 00		lda #$00			lda 	#0
.cb49	ab49	69 00		adc #$00			adc 	#0
.cb4b	ab4b	c8		iny				iny
.cb4c	ab4c	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb4e	ab4e	4e c0 07	lsr $07c0			lsr 	gxX0+1 						; divide X by 4
.cb51	ab51	6e bf 07	ror $07bf			ror 	gxX0
.cb54	ab54	4e bf 07	lsr $07bf			lsr 	gxX0
.cb57	ab57	4e c1 07	lsr $07c1			lsr 	gxY0 						; divide Y by 4
.cb5a	ab5a	4e c1 07	lsr $07c1			lsr 	gxY0
.cb5d	ab5d	ae d2 07	ldx $07d2			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cb60	ab60	bd d7 07	lda $07d7,x			lda 	gxSpriteLow,x
.cb63	ab63	29 80		and #$80			and 	#$80
.cb65	ab65	0d bf 07	ora $07bf			ora 	gxX0
.cb68	ab68	9d d7 07	sta $07d7,x			sta 	gxSpriteLow,x
.cb6b	ab6b	bd 17 08	lda $0817,x			lda 	gxSpriteHigh,x
.cb6e	ab6e	29 c0		and #$c0			and 	#$C0
.cb70	ab70	0d c1 07	ora $07c1			ora 	gxY0
.cb73	ab73	9d 17 08	sta $0817,x			sta 	gxSpriteHigh,x
.cb76	ab76	18		clc				clc
.cb77	ab77	60		rts				rts
.cb78	ab78					_GXSIFail:
.cb78	ab78	38		sec				sec
.cb79	ab79	60		rts				rts
.cb7a	ab7a					_GXMSOffset:
>cb7a	ab7a	1c						.byte 	32-8/2
>cb7b	ab7b	18						.byte 	32-16/2
>cb7c	ab7c	14						.byte 	32-24/2
>cb7d	ab7d	10						.byte 	32-32/2
.cb7e	ab7e					GXOpenBitmap:
.cb7e	ab7e	78		sei				sei 								; no interrupts here
.cb7f	ab7f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cb81	ab81	8d d0 07	sta $07d0			sta 	gxOriginalLUTValue
.cb84	ab84	58		cli				cli
.cb85	ab85	60		rts				rts
.cb86	ab86					GXCloseBitmap:
.cb86	ab86	78		sei				sei
.cb87	ab87	ad d0 07	lda $07d0			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cb8a	ab8a	85 0b		sta $0b				sta 	GXEditSlot
.cb8c	ab8c	58		cli				cli
.cb8d	ab8d	60		rts				rts
.cb8e	ab8e					gxPositionCalc:
.cb8e	ab8e	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cb90	ab90	48		pha				pha
.cb91	ab91	ad c1 07	lda $07c1			lda 	gxY0 						; gxzScreen = Y0
.cb94	ab94	85 3c		sta $3c				sta 	gxzScreen
.cb96	ab96	64 3d		stz $3d				stz 	gxzScreen+1
.cb98	ab98	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cb9a	ab9a	26 3d		rol $3d				rol 	gxzScreen+1
.cb9c	ab9c	06 3c		asl $3c				asl 	gxzScreen
.cb9e	ab9e	26 3d		rol $3d				rol 	gxzScreen+1
.cba0	aba0	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cba1	aba1	65 3c		adc $3c				adc 	gxzScreen
.cba3	aba3	85 3c		sta $3c				sta 	gxzScreen
.cba5	aba5	90 02		bcc $aba9			bcc 	_GXPCNoCarry
.cba7	aba7	e6 3d		inc $3d				inc 	gxzScreen+1
.cba9	aba9					_GXPCNoCarry:
.cba9	aba9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cbab	abab	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cbad	abad	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cbaf	abaf	85 36		sta $36				sta 	gxzTemp0
.cbb1	abb1	64 3d		stz $3d				stz 	gxzScreen+1
.cbb3	abb3	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cbb5	abb5					_GXPCMultiply32:
.cbb5	abb5	06 3c		asl $3c				asl 	gxzScreen
.cbb7	abb7	26 3d		rol $3d				rol 	gxzScreen+1
.cbb9	abb9	3a		dec a				dec 	a
.cbba	abba	d0 f9		bne $abb5			bne 	_GXPCMultiply32
.cbbc	abbc	18		clc				clc
.cbbd	abbd	ad bf 07	lda $07bf			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cbc0	abc0	65 3c		adc $3c				adc 	gxzScreen
.cbc2	abc2	8d d1 07	sta $07d1			sta 	gxOffset
.cbc5	abc5	ad c0 07	lda $07c0			lda 	gxX0+1
.cbc8	abc8	65 3d		adc $3d				adc 	gxzScreen+1
.cbca	abca	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cbcc	abcc	90 04		bcc $abd2			bcc 	_GXPCNoOverflow
.cbce	abce	29 1f		and #$1f			and 	#$1F 						; fix it up
.cbd0	abd0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cbd2	abd2					_GXPCNoOverflow:
.cbd2	abd2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cbd4	abd4	85 3d		sta $3d				sta 	gxzScreen+1
.cbd6	abd6	64 3c		stz $3c				stz 	gxzScreen
.cbd8	abd8	18		clc				clc
.cbd9	abd9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cbdb	abdb	6d c9 07	adc $07c9			adc 	gxBasePage 					; by adding the base page
.cbde	abde	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cbe0	abe0	68		pla				pla
.cbe1	abe1	85 36		sta $36				sta 	gxzTemp0
.cbe3	abe3	60		rts				rts
.cbe4	abe4					GXMovePositionDown:
.cbe4	abe4	18		clc				clc 								; add 320 to offset/temp+1
.cbe5	abe5	ad d1 07	lda $07d1			lda 	gxOffset
.cbe8	abe8	69 40		adc #$40			adc 	#64
.cbea	abea	8d d1 07	sta $07d1			sta 	gxOffset
.cbed	abed	a5 3d		lda $3d				lda 	gxzScreen+1
.cbef	abef	69 01		adc #$01			adc 	#1
.cbf1	abf1	85 3d		sta $3d				sta 	gxzScreen+1
.cbf3	abf3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cbf5	abf5	90 07		bcc $abfe			bcc 	_GXMPDExit
.cbf7	abf7	38		sec				sec  								; next page
.cbf8	abf8	e9 20		sbc #$20			sbc 	#$20
.cbfa	abfa	85 3d		sta $3d				sta 	gxzScreen+1
.cbfc	abfc	e6 0b		inc $0b				inc 	GXEditSlot
.cbfe	abfe					_GXMPDExit:
.cbfe	abfe	60		rts				rts
.cbff	abff					GXCollide:
.cbff	abff	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cc01	ac01	aa		tax				tax
.cc02	ac02	05 37		ora $37				ora 	gxzTemp0+1
.cc04	ac04	29 c0		and #$c0			and 	#$C0
.cc06	ac06	38		sec				sec
.cc07	ac07	d0 53		bne $ac5c			bne 	_GXCollideFail 				; if either >= 64, fail.
.cc09	ac09	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cc0b	ac0b	b9 d7 07	lda $07d7,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cc0e	ac0e	1d d7 07	ora $07d7,x			ora 	gxSpriteLow,x
.cc11	ac11	30 48		bmi $ac5b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cc13	ac13	18		clc				clc 								; need to calculate sum of sizes.
.cc14	ac14	b9 17 08	lda $0817,y			lda 	gxSpriteHigh,y
.cc17	ac17	7d 17 08	adc $0817,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cc1a	ac1a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cc1c	ac1c	6a		ror a				ror 	a 							; 5/6/7
.cc1d	ac1d	4a		lsr a				lsr 	a 							; 4/5/6
.cc1e	ac1e	4a		lsr a				lsr 	a 							; 3/4/5
.cc1f	ac1f	4a		lsr a				lsr 	a 							; 2/3/4
.cc20	ac20	18		clc				clc
.cc21	ac21	69 08		adc #$08			adc 	#$08
.cc23	ac23	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cc24	ac24	4a		lsr a				lsr 	a
.cc25	ac25	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cc27	ac27	b9 17 08	lda $0817,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cc2a	ac2a	29 3f		and #$3f			and 	#$3F
.cc2c	ac2c	85 39		sta $39				sta 	gxzTemp1+1
.cc2e	ac2e	38		sec				sec
.cc2f	ac2f	bd 17 08	lda $0817,x			lda 	gxSpriteHigh,x
.cc32	ac32	29 3f		and #$3f			and 	#$3F
.cc34	ac34	e5 39		sbc $39				sbc 	gxzTemp1+1
.cc36	ac36	b0 03		bcs $ac3b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cc38	ac38	49 ff		eor #$ff			eor 	#$FF
.cc3a	ac3a	1a		inc a				inc 	a
.cc3b	ac3b					_GXCAbs1:
.cc3b	ac3b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cc3d	ac3d	b0 1c		bcs $ac5b			bcs 	_GXOkayFail
.cc3f	ac3f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cc41	ac41	38		sec				sec 								; calculate |x1-x0|
.cc42	ac42	b9 d7 07	lda $07d7,y			lda 	gxSpriteLow,y
.cc45	ac45	fd d7 07	sbc $07d7,x			sbc 	gxSpriteLow,x
.cc48	ac48	b0 03		bcs $ac4d			bcs 	_GXCAbs2
.cc4a	ac4a	49 ff		eor #$ff			eor 	#$FF
.cc4c	ac4c	1a		inc a				inc 	a
.cc4d	ac4d					_GXCAbs2:
.cc4d	ac4d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cc4f	ac4f	b0 0a		bcs $ac5b			bcs 	_GXOkayFail
.cc51	ac51	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cc53	ac53	90 02		bcc $ac57			bcc 	_GXCHaveLowest
.cc55	ac55	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cc57	ac57					_GXCHaveLowest:
.cc57	ac57	0a		asl a				asl 	a 							; scale to allow for >> 2
.cc58	ac58	0a		asl a				asl 	a
.cc59	ac59	18		clc				clc
.cc5a	ac5a	60		rts				rts
.cc5b	ac5b					_GXOkayFail:
.cc5b	ac5b	18		clc				clc
.cc5c	ac5c					_GXCollideFail:
.cc5c	ac5c	a9 ff		lda #$ff			lda 	#$FF
.cc5e	ac5e	60		rts				rts
.cc5f	ac5f					GXFindSprite:
.cc5f	ac5f	aa		tax				tax
.cc60	ac60	ad ca 07	lda $07ca			lda 	gxSpritePage 				; access the base page of the sprite
.cc63	ac63	85 0b		sta $0b				sta 	GXEditSlot
.cc65	ac65	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.cc68	ac68	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.cc6b	ac6b	f0 33		beq $aca0			beq 	_GXFSFail
.cc6d	ac6d	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.cc70	ac70	8d 6e 08	sta $086e			sta 	gxSpriteOffset+1
.cc73	ac73	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.cc76	ac76	48		pha				pha 								; save twice
.cc77	ac77	48		pha				pha
.cc78	ac78	29 03		and #$03			and 	#3 							; get sprite size
.cc7a	ac7a	8d 6b 08	sta $086b			sta 	gxSizeBits 					; save raw (0-3)
.cc7d	ac7d	aa		tax				tax
.cc7e	ac7e	bd a2 ac	lda $aca2,x			lda 	_GXFXSSTTable,x 			; read sprite size
.cc81	ac81	8d 6a 08	sta $086a			sta 	gxSizePixels 					; save (8/16/24/32)
.cc84	ac84	68		pla				pla 								; get LUT
.cc85	ac85	4a		lsr a				lsr		a
.cc86	ac86	4a		lsr a				lsr		a
.cc87	ac87	29 03		and #$03			and 	#3
.cc89	ac89	8d 6c 08	sta $086c			sta 	gxSpriteLUT
.cc8c	ac8c	68		pla				pla 								; address, neeeds to be x 4
.cc8d	ac8d	29 f0		and #$f0			and 	#$F0
.cc8f	ac8f	8d 6d 08	sta $086d			sta 	gxSpriteOffset
.cc92	ac92	0e 6d 08	asl $086d			asl 	gxSpriteOffset
.cc95	ac95	2e 6e 08	rol $086e			rol 	gxSpriteOffset+1
.cc98	ac98	0e 6d 08	asl $086d			asl 	gxSpriteOffset
.cc9b	ac9b	2e 6e 08	rol $086e			rol 	gxSpriteOffset+1
.cc9e	ac9e	18		clc				clc
.cc9f	ac9f	60		rts				rts
.cca0	aca0					_GXFSFail:
.cca0	aca0	38		sec				sec
.cca1	aca1	60		rts				rts
.cca2	aca2					_GXFXSSTTable:
>cca2	aca2	08 10 18 20					.byte 	8,16,24,32
.086a						gxSizePixels:
>086a								.fill 	1
.086b						gxSizeBits:
>086b								.fill 	1
.086c						gxSpriteLUT:
>086c								.fill 	1
.086d						gxSpriteOffset:
>086d								.fill 	2
.cca6	aca6					GXSortXY:
.cca6	aca6	20 c4 ac	jsr $acc4			jsr 	GXSortY 					; will be sorted on Y now
.cca9	aca9	ad bf 07	lda $07bf			lda 	gxX0 						; compare X0 v X1
.ccac	acac	cd c3 07	cmp $07c3			cmp 	gxX1
.ccaf	acaf	ad c0 07	lda $07c0			lda 	gxX0+1
.ccb2	acb2	ed c4 07	sbc $07c4			sbc 	gxX1+1
.ccb5	acb5	90 0c		bcc $acc3			bcc 	_GXSXYExit 					; X0 < X1 exit
.ccb7	acb7	a2 00		ldx #$00			ldx 	#0 							; swap them over
.ccb9	acb9	a0 04		ldy #$04			ldy 	#4
.ccbb	acbb	20 d8 ac	jsr $acd8			jsr 	GXSwapXY
.ccbe	acbe	e8		inx				inx
.ccbf	acbf	c8		iny				iny
.ccc0	acc0	20 d8 ac	jsr $acd8			jsr 	GXSwapXY
.ccc3	acc3					_GXSXYExit:
.ccc3	acc3	60		rts				rts
.ccc4	acc4					GXSortY:
.ccc4	acc4	ad c1 07	lda $07c1			lda 	gxY0 						; if Y0 >= Y1
.ccc7	acc7	cd c5 07	cmp $07c5			cmp 	gxY1
.ccca	acca	90 0b		bcc $acd7			bcc 	_GXSYSorted
.cccc	accc	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.ccce	acce	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.ccd0	acd0					_GXSwap1:
.ccd0	acd0	20 d8 ac	jsr $acd8			jsr 	GXSwapXY
.ccd3	acd3	88		dey				dey
.ccd4	acd4	ca		dex				dex
.ccd5	acd5	10 f9		bpl $acd0			bpl 	_GXSwap1
.ccd7	acd7					_GXSYSorted:
.ccd7	acd7	60		rts				rts
.ccd8	acd8					GXSwapXY:
.ccd8	acd8	bd bf 07	lda $07bf,x			lda 	gxX0,x
.ccdb	acdb	48		pha				pha
.ccdc	acdc	b9 bf 07	lda $07bf,y			lda 	gxX0,y
.ccdf	acdf	9d bf 07	sta $07bf,x			sta 	gxX0,x
.cce2	ace2	68		pla				pla
.cce3	ace3	99 bf 07	sta $07bf,y			sta 	gxX0,y
.cce6	ace6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cce7	ace7					KeywordSet0:
>cce7	ace7	00 65					.text	0,$65,""               ; $80 !0:EOF
>cce9	ace9	00 58					.text	0,$58,""               ; $81 !1:SH1
>cceb	aceb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cced	aced	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>ccf3	acf3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>ccfb	acfb	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>cd01	ad01	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>cd08	ad08	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>cd10	ad10	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>cd17	ad17	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>cd1e	ad1e	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>cd25	ad25	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>cd2b	ad2b	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>cd33	ad33	45 24 28
>cd36	ad36	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>cd3e	ad3e	45 24 28
>cd41	ad41	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>cd47	ad47	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>cd4f	ad4f	28
>cd50	ad50	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>cd58	ad58	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>cd5e	ad5e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>cd66	ad66	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>cd6e	ad6e	55 4e 54 28
>cd72	ad72	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>cd7a	ad7a	54 24 28
>cd7d	ad7d	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>cd84	ad84	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>cd8b	ad8b	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>cd92	ad92	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>cd9a	ad9a	4e 28
>cd9c	ad9c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>cda4	ada4	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cdaa	adaa	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cdb0	adb0	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cdb7	adb7	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cdbd	adbd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cdc3	adc3	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cdca	adca	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cdd2	add2	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cdda	adda	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cde2	ade2	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cdea	adea	47 28
>cdec	adec	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cdf4	adf4	28
>cdf5	adf5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cdfd	adfd	28
>cdfe	adfe	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>ce04	ae04	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>ce0a	ae0a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>ce10	ae10	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>ce17	ae17	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>ce1f	ae1f	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>ce25	ae25	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>ce2b	ae2b	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>ce30	ae30	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>ce34	ae34	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>ce3a	ae3a	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>ce42	ae42	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>ce49	ae49	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>ce50	ae50	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>ce58	ae58	43
>ce59	ae59	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>ce5f	ae5f	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>ce65	ae65	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>ce6c	ae6c	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>ce72	ae72	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>ce76	ae76	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>ce7a	ae7a	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>ce80	ae80	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>ce88	ae88	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>ce8f	ae8f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>ce96	ae96	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>ce9e	ae9e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>cea4	aea4	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>cea9	aea9	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>ceb1	aeb1	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>ceb7	aeb7	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>cebd	aebd	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>cec2	aec2	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>cec8	aec8	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>cecf	aecf	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>ced4	aed4	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>ceda	aeda	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>cee1	aee1	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>cee9	aee9	59
>ceea	aeea	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>ceef	aeef	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>cef3	aef3	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>cefb	aefb	45
>cefc	aefc	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>cf04	af04	45
>cf05	af05	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>cf0b	af0b	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>cf11	af11	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>cf18	af18	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>cf1f	af1f	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>cf26	af26	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>cf2c	af2c	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>cf32	af32	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>cf37	af37	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>cf3e	af3e	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>cf45	af45	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>cf4d	af4d	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>cf53	af53	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>cf57	af57	ff					.text	$FF
.cf58	af58					KeywordSet1:
>cf58	af58	00 65					.text	0,$65,""               ; $80 !0:EOF
>cf5a	af5a	00 58					.text	0,$58,""               ; $81 !1:SH1
>cf5c	af5c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cf5e	af5e	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>cf66	af66	4c 45
>cf68	af68	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>cf70	af70	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>cf78	af78	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>cf7f	af7f	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>cf86	af86	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>cf8b	af8b	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>cf93	af93	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>cf98	af98	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>cf9d	af9d	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>cfa4	afa4	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>cfa9	afa9	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>cfb1	afb1	45
>cfb2	afb2	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>cfb6	afb6	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>cfbd	afbd	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>cfc3	afc3	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>cfca	afca	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>cfd1	afd1	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>cfd7	afd7	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>cfdd	afdd	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>cfe4	afe4	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>cfe9	afe9	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>cfef	afef	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>cff6	aff6	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>cffe	affe	45
>cfff	afff	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d007	b007	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d00c	b00c	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d012	b012	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d01a	b01a	45
>d01b	b01b	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d023	b023	45
>d024	b024	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d02b	b02b	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d033	b033	53
>d034	b034	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d03a	b03a	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a3 VERIFY
>d042	b042	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a4 XGO
>d047	b047	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a5 XLOAD
>d04e	b04e	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a6 ZAP
>d053	b053	ff					.text	$FF
.d054	b054					KeywordSet2:
>d054	b054	00 65					.text	0,$65,""               ; $80 !0:EOF
>d056	b056	00 58					.text	0,$58,""               ; $81 !1:SH1
>d058	b058	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d05a	b05a	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d05f	b05f	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d064	b064	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d069	b069	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d06e	b06e	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d073	b073	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d078	b078	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d07d	b07d	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d082	b082	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d087	b087	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d08c	b08c	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d091	b091	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d096	b096	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d09b	b09b	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d0a0	b0a0	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d0a5	b0a5	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d0aa	b0aa	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d0af	b0af	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d0b4	b0b4	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d0b9	b0b9	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d0be	b0be	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d0c3	b0c3	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d0c8	b0c8	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d0cd	b0cd	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d0d2	b0d2	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d0d7	b0d7	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d0dc	b0dc	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d0e1	b0e1	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d0e6	b0e6	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d0eb	b0eb	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d0f0	b0f0	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d0f5	b0f5	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d0fa	b0fa	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d0ff	b0ff	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d104	b104	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d109	b109	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d10e	b10e	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d113	b113	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d118	b118	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d11d	b11d	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d122	b122	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d127	b127	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d12c	b12c	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d131	b131	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d136	b136	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d13b	b13b	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d140	b140	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d145	b145	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d14a	b14a	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d14f	b14f	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d154	b154	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d159	b159	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d15e	b15e	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d163	b163	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d168	b168	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d16d	b16d	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d172	b172	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d177	b177	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d17c	b17c	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d181	b181	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d186	b186	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d18b	b18b	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d190	b190	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d195	b195	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d19a	b19a	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d19f	b19f	ff					.text	$FF
.d1a0	b1a0					Export_TKListConvertLine:
.d1a0	b1a0	48		pha				pha 								; save indent on the stack
.d1a1	b1a1	9c 19 04	stz $0419			stz 	tbOffset
.d1a4	b1a4	9c 29 04	stz $0429			stz 	tokenBuffer
.d1a7	b1a7	9c 25 04	stz $0425			stz 	currentListColour
.d1aa	b1aa	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d1ac	b1ac	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d1af	b1af	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d1b1	b1b1	b1 30		lda ($30),y			lda 	(codePtr),y
.d1b3	b1b3	aa		tax				tax
.d1b4	b1b4	88		dey				dey
.d1b5	b1b5	b1 30		lda ($30),y			lda 	(codePtr),y
.d1b7	b1b7	20 9a b3	jsr $b39a			jsr 	LCLWriteNumberXA
.d1ba	b1ba	68		pla				pla 								; adjustment to indent
.d1bb	b1bb	48		pha				pha 								; save on stack
.d1bc	b1bc	10 0c		bpl $b1ca			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d1be	b1be	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d1bf	b1bf	6d 22 04	adc $0422			adc 	listIndent
.d1c2	b1c2	8d 22 04	sta $0422			sta 	listIndent
.d1c5	b1c5	10 03		bpl $b1ca			bpl 	_LCNoAdjust
.d1c7	b1c7	9c 22 04	stz $0422			stz 	listIndent
.d1ca	b1ca					_LCNoAdjust:
.d1ca	b1ca	18		clc				clc		 							; work out actual indent.
.d1cb	b1cb	ad 22 04	lda $0422			lda 	listIndent
.d1ce	b1ce	0a		asl a				asl 	a
.d1cf	b1cf	69 07		adc #$07			adc 	#7
.d1d1	b1d1	85 36		sta $36				sta 	zTemp0
.d1d3	b1d3					_LCPadOut:
.d1d3	b1d3	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d1d5	b1d5	20 32 b3	jsr $b332			jsr 	LCLWrite
.d1d8	b1d8	ad 19 04	lda $0419			lda 	tbOffset
.d1db	b1db	c5 36		cmp $36				cmp 	zTemp0
.d1dd	b1dd	d0 f4		bne $b1d3			bne 	_LCPadOut
.d1df	b1df	a0 03		ldy #$03			ldy 	#3 							; start position.
.d1e1	b1e1					_LCMainLoop:
.d1e1	b1e1	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d1e3	b1e3	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d1e6	b1e6	b1 30		lda ($30),y			lda 	(codePtr),y
.d1e8	b1e8	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d1ea	b1ea	f0 17		beq $b203			beq 	_LCExit
.d1ec	b1ec	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d1ee	b1ee	90 1e		bcc $b20e			bcc 	_LCDoubles
.d1f0	b1f0	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d1f2	b1f2	90 2a		bcc $b21e			bcc 	_LCShiftPunc
.d1f4	b1f4	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d1f6	b1f6	90 35		bcc $b22d			bcc 	_LCPunctuation
.d1f8	b1f8	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d1fa	b1fa	90 51		bcc $b24d			bcc 	_LCIdentifiers
.d1fc	b1fc	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d1fe	b1fe	90 73		bcc $b273			bcc 	_LCTokens
.d200	b200	4c d3 b2	jmp $b2d3			jmp 	_LCData 					; 254-5 are data objects
.d203	b203					_LCExit:
.d203	b203	68		pla				pla 								; get old indent adjust
.d204	b204	30 07		bmi $b20d			bmi 	_LCExit2
.d206	b206	18		clc				clc 								; add to indent if +ve
.d207	b207	6d 22 04	adc $0422			adc 	listIndent
.d20a	b20a	8d 22 04	sta $0422			sta 	listIndent
.d20d	b20d					_LCExit2:
.d20d	b20d	60		rts				rts
.d20e	b20e					_LCDoubles:
.d20e	b20e	48		pha				pha
.d20f	b20f	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d210	b210	29 02		and #$02			and 	#2
.d212	b212	09 3c		ora #$3c			ora 	#60 						; make < >
.d214	b214	20 32 b3	jsr $b332			jsr 	LCLWrite
.d217	b217	68		pla				pla 								; restore, do lower bit
.d218	b218	29 03		and #$03			and 	#3
.d21a	b21a	09 3c		ora #$3c			ora 	#60
.d21c	b21c	80 0f		bra $b22d			bra		_LCPunctuation 				; print, increment, loop
.d21e	b21e					_LCShiftPunc:
.d21e	b21e	aa		tax				tax 								; save in X
.d21f	b21f	29 07		and #$07			and 	#7 							; lower 3 bits
.d221	b221	f0 02		beq $b225			beq 	_LCNoAdd
.d223	b223	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d225	b225					_LCNoAdd:
.d225	b225	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d227	b227	90 02		bcc $b22b			bcc 	_LCNoAdd2
.d229	b229	09 20		ora #$20			ora 	#32 						; adds $20
.d22b	b22b					_LCNoAdd2:
.d22b	b22b	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d22d	b22d					_LCPunctuation:
.d22d	b22d	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d22f	b22f	d0 03		bne $b234			bne 	_LCPContinue
.d231	b231	20 48 b3	jsr $b348			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d234	b234					_LCPContinue:
.d234	b234	c9 2e		cmp #$2e			cmp 	#'.'
.d236	b236	f0 08		beq $b240			beq 	_LCPIsConstant
.d238	b238	c9 30		cmp #$30			cmp 	#'0'
.d23a	b23a	90 0b		bcc $b247			bcc 	_LCPNotConstant
.d23c	b23c	c9 3a		cmp #$3a			cmp 	#'9'+1
.d23e	b23e	b0 07		bcs $b247			bcs 	_LCPNotConstant
.d240	b240					_LCPIsConstant:
.d240	b240	48		pha				pha
.d241	b241	a9 87		lda #$87			lda 	#CLIConstant+$80
.d243	b243	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d246	b246	68		pla				pla
.d247	b247					_LCPNotConstant:
.d247	b247	c8		iny				iny 								; consume character
.d248	b248	20 32 b3	jsr $b332			jsr 	LCLWrite 					; write it out.
.d24b	b24b	80 94		bra $b1e1			bra 	_LCMainLoop 				; go round again.
.d24d	b24d					_LCIdentifiers:
.d24d	b24d	18		clc				clc 								; convert to physical address
.d24e	b24e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d250	b250	85 37		sta $37				sta 	zTemp0+1
.d252	b252	c8		iny				iny
.d253	b253	b1 30		lda ($30),y			lda 	(codePtr),y
.d255	b255	85 36		sta $36				sta 	zTemp0
.d257	b257	c8		iny				iny
.d258	b258	5a		phy				phy 								; save position
.d259	b259	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d25b	b25b	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d25e	b25e	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d260	b260					_LCOutIdentifier:
.d260	b260	c8		iny				iny
.d261	b261	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d263	b263	29 7f		and #$7f			and 	#$7F
.d265	b265	20 84 b3	jsr $b384			jsr 	LCLLowerCase
.d268	b268	20 32 b3	jsr $b332			jsr 	LCLWrite
.d26b	b26b	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d26d	b26d	10 f1		bpl $b260			bpl 	_LCOutIdentifier
.d26f	b26f	7a		ply				ply 								; restore position
.d270	b270	4c e1 b1	jmp $b1e1			jmp 	_LCMainLoop
.d273	b273					_LCTokens:
.d273	b273	aa		tax				tax 								; token in X
.d274	b274	a9 54		lda #$54			lda 	#((KeywordSet2) & $FF)
.d276	b276	85 36		sta $36				sta 	0+zTemp0
.d278	b278	a9 b0		lda #$b0			lda 	#((KeywordSet2) >> 8)
.d27a	b27a	85 37		sta $37				sta 	1+zTemp0
.d27c	b27c	e0 82		cpx #$82			cpx 	#$82
.d27e	b27e	f0 16		beq $b296			beq 	_LCUseShift
.d280	b280	a9 58		lda #$58			lda 	#((KeywordSet1) & $FF)
.d282	b282	85 36		sta $36				sta 	0+zTemp0
.d284	b284	a9 af		lda #$af			lda 	#((KeywordSet1) >> 8)
.d286	b286	85 37		sta $37				sta 	1+zTemp0
.d288	b288	e0 81		cpx #$81			cpx 	#$81
.d28a	b28a	f0 0a		beq $b296			beq 	_LCUseShift
.d28c	b28c	a9 e7		lda #$e7			lda 	#((KeywordSet0) & $FF)
.d28e	b28e	85 36		sta $36				sta 	0+zTemp0
.d290	b290	a9 ac		lda #$ac			lda 	#((KeywordSet0) >> 8)
.d292	b292	85 37		sta $37				sta 	1+zTemp0
.d294	b294	80 01		bra $b297			bra 	_LCNoShift
.d296	b296					_LCUseShift:
.d296	b296	c8		iny				iny
.d297	b297					_LCNoShift:
.d297	b297	20 5c b3	jsr $b35c			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d29a	b29a	b1 30		lda ($30),y			lda 	(codePtr),y
.d29c	b29c	aa		tax				tax 								; into X
.d29d	b29d					_LCFindText:
.d29d	b29d	ca		dex				dex
.d29e	b29e	10 0e		bpl $b2ae			bpl 	_LCFoundText 				; found text.
.d2a0	b2a0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d2a2	b2a2	1a		inc a				inc 	a 							; one extra for size
.d2a3	b2a3	38		sec				sec 								; one extra for checksum
.d2a4	b2a4	65 36		adc $36				adc 	zTemp0 						; go to next token
.d2a6	b2a6	85 36		sta $36				sta 	zTemp0
.d2a8	b2a8	90 f3		bcc $b29d			bcc 	_LCFindText
.d2aa	b2aa	e6 37		inc $37				inc 	zTemp0+1
.d2ac	b2ac	80 ef		bra $b29d			bra 	_LCFindText
.d2ae	b2ae					_LCFoundText:
.d2ae	b2ae	5a		phy				phy 								; save List position
.d2af	b2af	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d2b1	b2b1	aa		tax				tax
.d2b2	b2b2	a9 86		lda #$86			lda 	#CLIToken+$80
.d2b4	b2b4	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d2b7	b2b7	a0 02		ldy #$02			ldy 	#2
.d2b9	b2b9					_LCCopyToken:
.d2b9	b2b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.d2bb	b2bb	20 84 b3	jsr $b384			jsr 	LCLLowerCase
.d2be	b2be	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2c1	b2c1	c8		iny				iny
.d2c2	b2c2	ca		dex				dex
.d2c3	b2c3	d0 f4		bne $b2b9			bne 	_LCCopyToken
.d2c5	b2c5	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d2c7	b2c7	f0 05		beq $b2ce			beq 	_LCNoSpace
.d2c9	b2c9	a9 20		lda #$20			lda 	#' '
.d2cb	b2cb	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2ce	b2ce					_LCNoSpace:
.d2ce	b2ce	7a		ply				ply 								; restore position.
.d2cf	b2cf	c8		iny				iny 								; consume token
.d2d0	b2d0	4c e1 b1	jmp $b1e1			jmp 	_LCMainLoop 				; and go around again.
.d2d3	b2d3					_LCData:
.d2d3	b2d3	48		pha				pha 								; save type $FE/$FF
.d2d4	b2d4	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d2d6	b2d6	c9 fe		cmp #$fe			cmp 	#$FE
.d2d8	b2d8	f0 22		beq $b2fc			beq 	_LCHaveOpener
.d2da	b2da	a2 22		ldx #$22			ldx 	#'"'
.d2dc	b2dc	a9 8f		lda #$8f			lda 	#CLIData+$80
.d2de	b2de	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d2e1	b2e1	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d2e3	b2e3	d0 17		bne $b2fc			bne 	_LCHaveOpener
.d2e5	b2e5	88		dey				dey 								; what precedes it ?
.d2e6	b2e6	b1 30		lda ($30),y			lda 	(codePtr),y
.d2e8	b2e8	c8		iny				iny
.d2e9	b2e9	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d2eb	b2eb	d0 0f		bne $b2fc			bne 	_LCHaveOpener
.d2ed	b2ed	a9 09		lda #$09			lda 	#9 							; tab
.d2ef	b2ef	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2f2	b2f2	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d2f4	b2f4	20 32 b3	jsr $b332			jsr 	LCLWrite
.d2f7	b2f7	a9 85		lda #$85			lda 	#CLIFComment+$80
.d2f9	b2f9	20 29 b3	jsr $b329			jsr 	LCLWriteColour
.d2fc	b2fc					_LCHaveOpener:
.d2fc	b2fc	8a		txa				txa 								; output prefix (# or ")
.d2fd	b2fd	20 32 b3	jsr $b332			jsr 	LCLWrite
.d300	b300	c8		iny				iny 								; get count
.d301	b301	b1 30		lda ($30),y			lda 	(codePtr),y
.d303	b303	aa		tax				tax
.d304	b304	c8		iny				iny 								; point at first character
.d305	b305					_LCOutData:
.d305	b305	b1 30		lda ($30),y			lda 	(codePtr),y
.d307	b307	c9 00		cmp #$00			cmp 	#0
.d309	b309	f0 03		beq $b30e			beq 	_LCNoPrint
.d30b	b30b	20 32 b3	jsr $b332			jsr 	LCLWrite
.d30e	b30e					_LCNoPrint:
.d30e	b30e	c8		iny				iny
.d30f	b30f	ca		dex				dex
.d310	b310	d0 f3		bne $b305			bne 	_LCOutData
.d312	b312	68		pla				pla 								; closing " required ?
.d313	b313	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d315	b315	d0 0f		bne $b326			bne 	_LCNoQuote
.d317	b317	a9 22		lda #$22			lda 	#'"'
.d319	b319	20 32 b3	jsr $b332			jsr 	LCLWrite
.d31c	b31c	ad b4 07	lda $07b4			lda 	EXTTextColour
.d31f	b31f	29 0f		and #$0f			and 	#$0F
.d321	b321	09 90		ora #$90			ora 	#$90
.d323	b323	20 32 b3	jsr $b332			jsr 	LCLWrite
.d326	b326					_LCNoQuote:
.d326	b326	4c e1 b1	jmp $b1e1			jmp 	_LCMainLoop
.d329	b329					LCLWriteColour:
.d329	b329	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d32c	b32c	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d32f	b32f	d0 01		bne $b332			bne 	LCLWrite 					; if different, output it
.d331	b331	60		rts				rts
.d332	b332					LCLWrite:
.d332	b332	da		phx				phx
.d333	b333	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d336	b336	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d339	b339	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d33c	b33c	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d33f	b33f	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d341	b341	30 03		bmi $b346			bmi 	_LCLNoColour
.d343	b343	8d 23 04	sta $0423			sta 	lcLastCharacter
.d346	b346					_LCLNoColour:
.d346	b346	fa		plx				plx
.d347	b347	60		rts				rts
.d348	b348					LCLDeleteLastSpace:
.d348	b348	48		pha				pha
.d349	b349	da		phx				phx
.d34a	b34a	ae 19 04	ldx $0419			ldx 	tbOffset
.d34d	b34d	f0 0a		beq $b359			beq 	_LCDLSExit
.d34f	b34f	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d352	b352	c9 20		cmp #$20			cmp 	#' '
.d354	b354	d0 03		bne $b359			bne 	_LCDLSExit
.d356	b356	ce 19 04	dec $0419			dec 	tbOffset
.d359	b359					_LCDLSExit:
.d359	b359	fa		plx				plx
.d35a	b35a	68		pla				pla
.d35b	b35b	60		rts				rts
.d35c	b35c					LCLCheckSpaceRequired:
.d35c	b35c	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d35f	b35f	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d361	b361	f0 1b		beq $b37e			beq 	_LCCSRSpace
.d363	b363	c9 29		cmp #$29			cmp 	#')'
.d365	b365	f0 17		beq $b37e			beq 	_LCCSRSpace
.d367	b367	c9 23		cmp #$23			cmp 	#'#'
.d369	b369	f0 13		beq $b37e			beq 	_LCCSRSpace
.d36b	b36b	20 84 b3	jsr $b384			jsr 	LCLLowerCase 				; saves a little effort
.d36e	b36e	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d370	b370	90 11		bcc $b383			bcc 	_LCCSRExit
.d372	b372	c9 3a		cmp #$3a			cmp 	#"9"+1
.d374	b374	90 08		bcc $b37e			bcc 	_LCCSRSpace
.d376	b376	c9 61		cmp #$61			cmp 	#"a"
.d378	b378	90 09		bcc $b383			bcc 	_LCCSRExit
.d37a	b37a	c9 7b		cmp #$7b			cmp 	#"z"+1
.d37c	b37c	b0 05		bcs $b383			bcs 	_LCCSRExit
.d37e	b37e					_LCCSRSpace:
.d37e	b37e	a9 20		lda #$20			lda 	#' '
.d380	b380	20 32 b3	jsr $b332			jsr 	LCLWrite
.d383	b383					_LCCSRExit:
.d383	b383	60		rts				rts
.d384	b384					LCLLowerCase:
.d384	b384	c9 41		cmp #$41			cmp 	#"A"
.d386	b386	90 06		bcc $b38e			bcc 	_LCLLCOut
.d388	b388	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d38a	b38a	b0 02		bcs $b38e			bcs 	_LCLLCOut
.d38c	b38c	69 20		adc #$20			adc 	#$20
.d38e	b38e					_LCLLCOut:
.d38e	b38e	60		rts				rts
.d38f	b38f					LCLUpperCase:
.d38f	b38f	c9 61		cmp #$61			cmp 	#"a"
.d391	b391	90 06		bcc $b399			bcc 	_LCLUCOut
.d393	b393	c9 7b		cmp #$7b			cmp 	#"z"+1
.d395	b395	b0 02		bcs $b399			bcs 	_LCLUCOut
.d397	b397	e9 1f		sbc #$1f			sbc 	#$1F
.d399	b399					_LCLUCOut:
.d399	b399	60		rts				rts
.d39a	b39a					LCLWriteNumberXA:
.d39a	b39a	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d39c	b39c					_LCLWNLoop1:
.d39c	b39c	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d39e	b39e					_LCLWNLoop2:
.d39e	b39e	48		pha				pha 								; save initial LSB
.d39f	b39f	38		sec				sec
.d3a0	b3a0	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d3a2	b3a2	f9 d3 b3	sbc $b3d3,y			sbc 	_LCLWNTable,y
.d3a5	b3a5	48		pha				pha
.d3a6	b3a6	8a		txa				txa
.d3a7	b3a7	f9 d4 b3	sbc $b3d4,y			sbc 	_LCLWNTable+1,y
.d3aa	b3aa	90 07		bcc $b3b3			bcc 	_LCLWNUnderflow
.d3ac	b3ac	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d3ae	b3ae	aa		tax				tax 								; update X
.d3af	b3af	68		pla				pla 								; restore A
.d3b0	b3b0	7a		ply				ply 								; throw original
.d3b1	b3b1	80 eb		bra $b39e			bra 	_LCLWNLoop2 				; try again.
.d3b3	b3b3					_LCLWNUnderflow:
.d3b3	b3b3	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d3b5	b3b5	d0 06		bne $b3bd			bne 	_LCLWNOut
.d3b7	b3b7	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d3ba	b3ba	3a		dec a				dec 	a
.d3bb	b3bb	f0 04		beq $b3c1			beq 	_LCLWNNext
.d3bd	b3bd					_LCLWNOut:
.d3bd	b3bd	98		tya				tya
.d3be	b3be	20 cd b3	jsr $b3cd			jsr 	_LCLWNOutDigit
.d3c1	b3c1					_LCLWNNext:
.d3c1	b3c1	7a		ply				ply 							 	; restore original value.
.d3c2	b3c2	68		pla				pla
.d3c3	b3c3	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d3c5	b3c5	c8		iny				iny
.d3c6	b3c6	c8		iny				iny
.d3c7	b3c7	84 37		sty $37				sty 	zTemp0+1
.d3c9	b3c9	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d3cb	b3cb	d0 cf		bne $b39c			bne 	_LCLWNLoop1
.d3cd	b3cd					_LCLWNOutDigit:
.d3cd	b3cd	09 30		ora #$30			ora 	#'0'
.d3cf	b3cf	20 32 b3	jsr $b332			jsr 	LCLWrite
.d3d2	b3d2	60		rts				rts
.d3d3	b3d3					_LCLWNTable:
>d3d3	b3d3	10 27						.word 	10000
>d3d5	b3d5	e8 03						.word 	1000
>d3d7	b3d7	64 00						.word 	100
>d3d9	b3d9	0a 00						.word 	10
.d3db	b3db					TOKSearchTable:
.d3db	b3db	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d3dd	b3dd	85 36		sta $36				sta 	zTemp0
.d3df	b3df	a0 00		ldy #$00			ldy 	#0
.d3e1	b3e1	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d3e3	b3e3	85 38		sta $38				sta 	zTemp1
.d3e5	b3e5					_TSTLoop:
.d3e5	b3e5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d3e7	b3e7	30 49		bmi $b432			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d3e9	b3e9	f0 2e		beq $b419			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d3eb	b3eb	c8		iny				iny 								; get the hash
.d3ec	b3ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.d3ee	b3ee	88		dey				dey
.d3ef	b3ef	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d3f2	b3f2	d0 25		bne $b419			bne 	_TSTNext
.d3f4	b3f4	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d3f7	b3f7	38		sec				sec
.d3f8	b3f8	ed 00 04	sbc $0400			sbc 	identStart
.d3fb	b3fb	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d3fd	b3fd	d0 1a		bne $b419			bne 	_TSTNext
.d3ff	b3ff	5a		phy				phy 								; save Y , we might fail to match.
.d400	b400	c8		iny				iny 								; point to text
.d401	b401	c8		iny				iny
.d402	b402	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d405	b405					_TSTCompareName:
.d405	b405	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d408	b408	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d40a	b40a	d0 0c		bne $b418			bne 	_TSTNextPullY 				; fail, pullY and do next
.d40c	b40c	e8		inx				inx
.d40d	b40d	c8		iny				iny
.d40e	b40e	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d411	b411	d0 f2		bne $b405			bne 	_TSTCompareName
.d413	b413	7a		ply				ply 								; throw Y
.d414	b414	a5 38		lda $38				lda 	zTemp1 						; get token #
.d416	b416	38		sec				sec 								; return with CS = passed.
.d417	b417	60		rts				rts
.d418	b418					_TSTNextPullY:
.d418	b418	7a		ply				ply 								; restore current, fall through.
.d419	b419					_TSTNext:
.d419	b419	e6 38		inc $38				inc 	zTemp1 						; token counter
.d41b	b41b	98		tya				tya
.d41c	b41c	18		clc				clc
.d41d	b41d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d41f	b41f	1a		inc a				inc 	a 							; +1
.d420	b420	1a		inc a				inc 	a 							; +2
.d421	b421	a8		tay				tay
.d422	b422	10 c1		bpl $b3e5			bpl 	_TSTLoop 					; if Y < $80 loop back
.d424	b424	98		tya				tya 								; add Y to zTemp0 and reset Y
.d425	b425	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d427	b427	18		clc				clc  								; but have tables > 255 bytes
.d428	b428	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d42a	b42a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d42c	b42c	90 b7		bcc $b3e5			bcc 	_TSTLoop
.d42e	b42e	e6 37		inc $37				inc 	zTemp0+1
.d430	b430	80 b3		bra $b3e5			bra 	_TSTLoop
.d432	b432					_TSTFail:
.d432	b432	18		clc				clc
.d433	b433	60		rts				rts
.d434	b434					Export_TKTokeniseLine:
.d434	b434	20 01 b6	jsr $b601			jsr 	LCLFixLineBufferCase 		; fix line case
.d437	b437	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d439	b439	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d43c	b43c	9c 27 04	stz $0427			stz 	tokenLineNumber
.d43f	b43f	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d442	b442	a2 ff		ldx #$ff			ldx 	#$FF
.d444	b444					_TKFindFirst:
.d444	b444	e8		inx				inx
.d445	b445	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d448	b448	f0 62		beq $b4ac			beq 	_TKExit
.d44a	b44a	c9 20		cmp #$20			cmp 	#' '
.d44c	b44c	90 f6		bcc $b444			bcc 	_TKFindFirst
.d44e	b44e	c9 30		cmp #$30			cmp 	#'0'
.d450	b450	90 07		bcc $b459			bcc 	_TKNoLineNumber
.d452	b452	c9 3a		cmp #$3a			cmp 	#'9'+1
.d454	b454	b0 03		bcs $b459			bcs 	_TKNoLineNumber
.d456	b456	20 2b b6	jsr $b62b			jsr 	TOKExtractLineNumber
.d459	b459					_TKNoLineNumber:
.d459	b459					_TKTokeniseLoop:
.d459	b459	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d45c	b45c	f0 4e		beq $b4ac			beq 	_TKExit
.d45e	b45e	e8		inx				inx
.d45f	b45f	c9 20		cmp #$20			cmp 	#' '
.d461	b461	f0 f6		beq $b459			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d463	b463	ca		dex				dex 								; undo last get, A contains character, X is position.
.d464	b464	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d466	b466	f0 68		beq $b4d0			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d468	b468	c9 41		cmp #$41			cmp 	#'A'
.d46a	b46a	90 04		bcc $b470			bcc 	_TKTokenisePunctuation
.d46c	b46c	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d46e	b46e	90 60		bcc $b4d0			bcc 	_TKTokeniseIdentifier
.d470	b470					_TKTokenisePunctuation:
.d470	b470	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d472	b472	f0 2e		beq $b4a2			beq 	_TKString
.d474	b474	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d476	b476	f0 2f		beq $b4a7			beq 	_TKHexConstant
.d478	b478	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d47a	b47a	f0 36		beq $b4b2			beq 	_TKCheckDouble
.d47c	b47c	c9 3e		cmp #$3e			cmp 	#'>'
.d47e	b47e	f0 32		beq $b4b2			beq 	_TKCheckDouble
.d480	b480					_TKStandardPunctuation:
.d480	b480	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d483	b483	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d485	b485	90 0e		bcc $b495			bcc 	_TKNoShift
.d487	b487	48		pha				pha 								; save. we are about to convert this punctuation token from
.d488	b488	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d48a	b48a	85 36		sta $36				sta 	zTemp0
.d48c	b48c	68		pla				pla
.d48d	b48d	29 20		and #$20			and 	#32 						; bit 5
.d48f	b48f	4a		lsr a				lsr 	a 							; shift into bit 3
.d490	b490	4a		lsr a				lsr 	a
.d491	b491	05 36		ora $36				ora 	zTemp0
.d493	b493	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d495	b495					_TKNoShift:
.d495	b495	20 70 b6	jsr $b670			jsr 	TOKWriteByte 				; write the punctuation character
.d498	b498	e8		inx				inx 								; consume the character
.d499	b499	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d49b	b49b	d0 bc		bne $b459			bne 	_TKTokeniseLoop 			; and loop round again.
.d49d	b49d	20 63 b5	jsr $b563			jsr 	TOKCheckComment 			; comment checl
.d4a0	b4a0	80 b7		bra $b459			bra 	_TKTokeniseLoop
.d4a2	b4a2					_TKString:
.d4a2	b4a2	20 90 b5	jsr $b590			jsr 	TOKTokenString
.d4a5	b4a5	80 b2		bra $b459			bra 	_TKTokeniseLoop
.d4a7	b4a7					_TKHexConstant:
.d4a7	b4a7	20 cb b5	jsr $b5cb			jsr 	TOKHexConstant
.d4aa	b4aa	80 ad		bra $b459			bra 	_TKTokeniseLoop
.d4ac	b4ac	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d4ae	b4ae	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d4b1	b4b1	60		rts				rts
.d4b2	b4b2					_TKCheckDouble:
.d4b2	b4b2	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d4b5	b4b5	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d4b7	b4b7	90 c7		bcc $b480			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d4b9	b4b9	c9 3f		cmp #$3f			cmp 	#'>'+1
.d4bb	b4bb	b0 c3		bcs $b480			bcs 	_TKStandardPunctuation
.d4bd	b4bd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d4c0	b4c0	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d4c2	b4c2	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d4c3	b4c3	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d4c6	b4c6	38		sec				sec
.d4c7	b4c7	e9 3c		sbc #$3c			sbc 	#'<'
.d4c9	b4c9	20 70 b6	jsr $b670			jsr 	TOKWriteByte 				; this is in the range 0-7
.d4cc	b4cc	e8		inx				inx 								; consume both
.d4cd	b4cd	e8		inx				inx
.d4ce	b4ce	80 89		bra $b459			bra 	_TKTokeniseLoop
.d4d0	b4d0					_TKTokeniseIdentifier:
.d4d0	b4d0	8e 00 04	stx $0400			stx 	identStart 					; save start
.d4d3	b4d3	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d4d6	b4d6					_TKCheckLoop:
.d4d6	b4d6	e8		inx				inx 								; look at next, we know first is identifier already.
.d4d7	b4d7	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d4da	b4da	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d4dc	b4dc	f0 f8		beq $b4d6			beq 	_TKCheckLoop
.d4de	b4de	c9 30		cmp #$30			cmp	 	#"0"
.d4e0	b4e0	90 0c		bcc $b4ee			bcc 	_TKEndIdentifier
.d4e2	b4e2	c9 3a		cmp #$3a			cmp 	#"9"+1
.d4e4	b4e4	90 f0		bcc $b4d6			bcc 	_TKCheckLoop
.d4e6	b4e6	c9 41		cmp #$41			cmp	 	#"A"
.d4e8	b4e8	90 04		bcc $b4ee			bcc 	_TKEndIdentifier
.d4ea	b4ea	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4ec	b4ec	90 e8		bcc $b4d6			bcc 	_TKCheckLoop
.d4ee	b4ee					_TKEndIdentifier:
.d4ee	b4ee	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d4f1	b4f1	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d4f3	b4f3	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d4f5	b4f5	f0 06		beq $b4fd			beq 	_TKHasTypeCharacter
.d4f7	b4f7	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d4f9	b4f9	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d4fb	b4fb	d0 07		bne $b504			bne 	_TKNoTypeCharacter
.d4fd	b4fd					_TKHasTypeCharacter:
.d4fd	b4fd	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d500	b500	e8		inx				inx 								; consume the type character
.d501	b501	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d504	b504					_TKNoTypeCharacter:
.d504	b504	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d506	b506	d0 09		bne $b511			bne 	_TKNoArray
.d508	b508	e8		inx				inx 								; skip the (
.d509	b509	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d50c	b50c	09 04		ora #$04			ora 	#$04
.d50e	b50e	8d 04 04	sta $0404			sta 	identTypeByte
.d511	b511					_TKNoArray:
.d511	b511	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d514	b514	20 ec b5	jsr $b5ec			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d517	b517	a0 ac		ldy #$ac			ldy 	#(KeywordSet0) >> 8
.d519	b519	a9 e7		lda #$e7			lda 	#(KeywordSet0) & $FF
.d51b	b51b	20 db b3	jsr $b3db			jsr 	TOKSearchTable
.d51e	b51e	a2 00		ldx #$00			ldx 	#0
.d520	b520	b0 1f		bcs $b541			bcs 	_TKFoundToken
.d522	b522	a0 af		ldy #$af			ldy 	#(KeywordSet1) >> 8
.d524	b524	a9 58		lda #$58			lda 	#(KeywordSet1) & $FF
.d526	b526	20 db b3	jsr $b3db			jsr 	TOKSearchTable
.d529	b529	a2 81		ldx #$81			ldx 	#$81
.d52b	b52b	b0 14		bcs $b541			bcs 	_TKFoundToken
.d52d	b52d	a0 b0		ldy #$b0			ldy 	#(KeywordSet2) >> 8
.d52f	b52f	a9 54		lda #$54			lda 	#(KeywordSet2) & $FF
.d531	b531	20 db b3	jsr $b3db			jsr 	TOKSearchTable
.d534	b534	a2 82		ldx #$82			ldx 	#$82
.d536	b536	b0 09		bcs $b541			bcs 	_TKFoundToken
.d538	b538	20 7c b6	jsr $b67c			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d53b	b53b	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d53e	b53e	4c 59 b4	jmp $b459			jmp 	_TKTokeniseLoop 			; and go round again.
.d541	b541					_TKFoundToken:
.d541	b541	48		pha				pha 								; save token
.d542	b542	8a		txa				txa 								; shift in X, is there one ?
.d543	b543	f0 03		beq $b548			beq 	_TKNoTShift
.d545	b545	20 70 b6	jsr $b670			jsr 	TOKWriteByte 				; if so, write it out
.d548	b548					_TKNoTShift:
.d548	b548	68		pla				pla 								; restore and write token
.d549	b549	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d54c	b54c	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d54e	b54e	d0 0d		bne $b55d			bne 	_TKNotRem 			 		; not shifted ?
.d550	b550	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d552	b552	d0 09		bne $b55d			bne 	_TKNotRem
.d554	b554	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d557	b557	20 63 b5	jsr $b563			jsr 	TOKCheckComment
.d55a	b55a	4c 59 b4	jmp $b459			jmp 	_TKTokeniseLoop
.d55d	b55d					_TKNotRem:
.d55d	b55d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d560	b560	4c 59 b4	jmp $b459			jmp 	_TKTokeniseLoop 			; and go round again.
.d563	b563					TOKCheckComment:
.d563	b563	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d566	b566	e8		inx				inx
.d567	b567	c9 20		cmp #$20			cmp 	#' '
.d569	b569	f0 f8		beq $b563			beq 	TOKCheckComment
.d56b	b56b	ca		dex				dex 								; first non space character
.d56c	b56c	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d56e	b56e	f0 1f		beq $b58f			beq 	_TOKCCExit 					; then we are okay
.d570	b570	c9 00		cmp #$00			cmp 	#0 							; EOL
.d572	b572	f0 1b		beq $b58f			beq 	_TOKCCExit 					; then we are okay
.d574	b574	da		phx				phx
.d575	b575					_TOKCCLowerCase:
.d575	b575	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d578	b578	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d57a	b57a	90 09		bcc $b585			bcc 	_TOKKCNotUC
.d57c	b57c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d57e	b57e	b0 05		bcs $b585			bcs 	_TOKKCNotUC
.d580	b580	49 20		eor #$20			eor 	#$20
.d582	b582	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d585	b585					_TOKKCNotUC:
.d585	b585	e8		inx				inx
.d586	b586	c9 00		cmp #$00			cmp 	#0
.d588	b588	d0 eb		bne $b575			bne 	_TOKCCLowerCase
.d58a	b58a	fa		plx				plx
.d58b	b58b	ca		dex				dex 								; tokenise string expects initial skip.
.d58c	b58c	20 90 b5	jsr $b590			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d58f	b58f					_TOKCCExit:
.d58f	b58f	60		rts				rts
.d590	b590					TOKTokenString:
.d590	b590	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d592	b592	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d595	b595	e8		inx				inx									; start of quoted string.
.d596	b596	da		phx				phx 								; push start of string on top
.d597	b597	ca		dex				dex 								; because we pre-increment
.d598	b598					_TSFindEnd:
.d598	b598	e8		inx				inx
.d599	b599	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d59c	b59c	f0 04		beq $b5a2			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d59e	b59e	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d5a0	b5a0	d0 f6		bne $b598			bne 	_TSFindEnd
.d5a2	b5a2					_TSEndOfString:
.d5a2	b5a2	7a		ply				ply  								; so now Y is first character, X is character after end.
.d5a3	b5a3	48		pha				pha 								; save terminating character
.d5a4	b5a4	20 ac b5	jsr $b5ac			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d5a7	b5a7	68		pla				pla 								; terminating character
.d5a8	b5a8	f0 01		beq $b5ab			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d5aa	b5aa	e8		inx				inx
.d5ab	b5ab					_TSNotQuote:
.d5ab	b5ab	60		rts				rts
.d5ac	b5ac					TOKWriteBlockXY:
.d5ac	b5ac	86 36		stx $36				stx 	zTemp0 						; save end character
.d5ae	b5ae	98		tya				tya 								; use 2's complement to work out the byte size
.d5af	b5af	49 ff		eor #$ff			eor 	#$FF
.d5b1	b5b1	38		sec				sec
.d5b2	b5b2	65 36		adc $36				adc 	zTemp0
.d5b4	b5b4	1a		inc a				inc 	a 							; one extra for NULL
.d5b5	b5b5	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5b8	b5b8					_TOBlockLoop:
.d5b8	b5b8	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d5ba	b5ba	f0 09		beq $b5c5			beq 	_TOBlockExit
.d5bc	b5bc	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d5bf	b5bf	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5c2	b5c2	c8		iny				iny
.d5c3	b5c3	80 f3		bra $b5b8			bra 	_TOBlockLoop
.d5c5	b5c5					_TOBlockExit:
.d5c5	b5c5	a9 00		lda #$00			lda 	#0 							; add NULL.
.d5c7	b5c7	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5ca	b5ca	60		rts				rts
.d5cb	b5cb					TOKHexConstant:
.d5cb	b5cb	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d5cd	b5cd	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d5d0	b5d0	e8		inx				inx									; start of quoted string.
.d5d1	b5d1	da		phx				phx 								; push start of constant on top
.d5d2	b5d2	ca		dex				dex
.d5d3	b5d3					_THFindLoop:
.d5d3	b5d3	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d5d4	b5d4	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d5d7	b5d7	c9 30		cmp #$30			cmp 	#"0"
.d5d9	b5d9	90 0c		bcc $b5e7			bcc 	_THFoundEnd
.d5db	b5db	c9 3a		cmp #$3a			cmp 	#"9"+1
.d5dd	b5dd	90 f4		bcc $b5d3			bcc 	_THFindLoop
.d5df	b5df	c9 41		cmp #$41			cmp 	#"A"
.d5e1	b5e1	90 04		bcc $b5e7			bcc 	_THFoundEnd
.d5e3	b5e3	c9 47		cmp #$47			cmp 	#"F"+1
.d5e5	b5e5	90 ec		bcc $b5d3			bcc 	_THFindLoop
.d5e7	b5e7					_THFoundEnd:
.d5e7	b5e7	7a		ply				ply 								; restore start
.d5e8	b5e8	20 ac b5	jsr $b5ac			jsr 	TOKWriteBlockXY 			; output the block
.d5eb	b5eb	60		rts				rts
.d5ec	b5ec					TOKCalculateHash:
.d5ec	b5ec	da		phx				phx
.d5ed	b5ed	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d5f0	b5f0	a9 00		lda #$00			lda 	#0
.d5f2	b5f2					_TCHLoop:
.d5f2	b5f2	18		clc				clc
.d5f3	b5f3	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d5f6	b5f6	e8		inx				inx
.d5f7	b5f7	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d5fa	b5fa	d0 f6		bne $b5f2			bne 	_TCHLoop
.d5fc	b5fc	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d5ff	b5ff	fa		plx				plx
.d600	b600	60		rts				rts
.d601	b601					LCLFixLineBufferCase:
.d601	b601	a2 00		ldx #$00			ldx 	#0
.d603	b603					_FLBCLoop:
.d603	b603	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d606	b606	f0 22		beq $b62a			beq 	_FLBCExit 					; end of string.
.d608	b608	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d60a	b60a	f0 11		beq $b61d			beq 	_FLBCInQuotes
.d60c	b60c	e8		inx				inx
.d60d	b60d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d60f	b60f	90 f2		bcc $b603			bcc 	_FLBCLoop
.d611	b611	c9 7b		cmp #$7b			cmp 	#'z'+1
.d613	b613	b0 ee		bcs $b603			bcs 	_FLBCLoop
.d615	b615	38		sec				sec 								; make U/C
.d616	b616	e9 20		sbc #$20			sbc 	#32
.d618	b618	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d61b	b61b	80 e6		bra $b603			bra 	_FLBCLoop
.d61d	b61d					_FLBCInQuotes:
.d61d	b61d	e8		inx				inx 								; advance
.d61e	b61e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d621	b621	f0 07		beq $b62a			beq 	_FLBCExit 					; exit on EOS
.d623	b623	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d625	b625	d0 f6		bne $b61d			bne 	_FLBCInQuotes
.d627	b627	e8		inx				inx 								; skip over it
.d628	b628	80 d9		bra $b603			bra 	_FLBCLoop
.d62a	b62a					_FLBCExit:
.d62a	b62a	60		rts				rts
.d62b	b62b					TOKExtractLineNumber:
.d62b	b62b	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d62e	b62e	48		pha				pha
.d62f	b62f	ad 27 04	lda $0427			lda 	tokenLineNumber
.d632	b632	48		pha				pha
.d633	b633	20 69 b6	jsr $b669			jsr 	_LCLNTimes2 				; line # x 2
.d636	b636	20 69 b6	jsr $b669			jsr 	_LCLNTimes2 				; line # x 4
.d639	b639	18		clc				clc 								; add stacked value
.d63a	b63a	68		pla				pla
.d63b	b63b	6d 27 04	adc $0427			adc 	tokenLineNumber
.d63e	b63e	8d 27 04	sta $0427			sta 	tokenLineNumber
.d641	b641	68		pla				pla
.d642	b642	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d645	b645	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d648	b648	20 69 b6	jsr $b669			jsr 	_LCLNTimes2 				; line # x 10
.d64b	b64b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d64e	b64e	e8		inx				inx
.d64f	b64f	29 0f		and #$0f			and 	#15 						; add to line #
.d651	b651	18		clc				clc
.d652	b652	6d 27 04	adc $0427			adc 	tokenLineNumber
.d655	b655	8d 27 04	sta $0427			sta 	tokenLineNumber
.d658	b658	90 03		bcc $b65d			bcc 	_TLENNoCarry
.d65a	b65a	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d65d	b65d					_TLENNoCarry:
.d65d	b65d	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d660	b660	c9 30		cmp #$30			cmp 	#'0'
.d662	b662	90 04		bcc $b668			bcc 	_TLENExit
.d664	b664	c9 3a		cmp #$3a			cmp 	#'9'+1
.d666	b666	90 c3		bcc $b62b			bcc 	TOKExtractLineNumber
.d668	b668					_TLENExit:
.d668	b668	60		rts				rts
.d669	b669					_LCLNTimes2:
.d669	b669	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d66c	b66c	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d66f	b66f	60		rts				rts
.d670	b670					TOKWriteByte:
.d670	b670	da		phx				phx
.d671	b671	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d674	b674	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d677	b677	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d67a	b67a	fa		plx				plx
.d67b	b67b	60		rts				rts
.d67c	b67c					TOKCheckCreateVariableRecord:
.d67c	b67c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d67e	b67e	85 36		sta $36				sta 	0+zTemp0
.d680	b680	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d682	b682	85 37		sta $37				sta 	1+zTemp0
.d684	b684					_CCVSearch:
.d684	b684	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d686	b686	f0 2c		beq $b6b4			beq 	_CCVFail
.d688	b688	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d68a	b68a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d68c	b68c	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d68f	b68f	d0 16		bne $b6a7			bne 	_CCVNext
.d691	b691	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d693	b693	ae 00 04	ldx $0400			ldx 	identStart
.d696	b696					_CCVCompare:
.d696	b696	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d699	b699	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d69b	b69b	e8		inx				inx 								; advance pointers
.d69c	b69c	c8		iny				iny
.d69d	b69d	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d69e	b69e	d0 07		bne $b6a7			bne 	_CCVNext  					; didn't match go to next.
.d6a0	b6a0	90 f4		bcc $b696			bcc 	_CCVCompare 				; not finished yet.
.d6a2	b6a2	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d6a5	b6a5	f0 41		beq $b6e8			beq 	_CCVFound 					; yes, we were successful
.d6a7	b6a7					_CCVNext:
.d6a7	b6a7	18		clc				clc 								; go to next record.
.d6a8	b6a8	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d6aa	b6aa	65 36		adc $36				adc 	zTemp0
.d6ac	b6ac	85 36		sta $36				sta 	zTemp0
.d6ae	b6ae	90 d4		bcc $b684			bcc 	_CCVSearch
.d6b0	b6b0	e6 37		inc $37				inc 	zTemp0+1
.d6b2	b6b2	80 d0		bra $b684			bra 	_CCVSearch
.d6b4	b6b4					_CCVFail:
.d6b4	b6b4	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d6b6	b6b6	ad 03 04	lda $0403			lda 	identHash
.d6b9	b6b9	91 36		sta ($36),y			sta 	(zTemp0),y
.d6bb	b6bb	c8		iny				iny 								; offset 2 is the type byte
.d6bc	b6bc	ad 04 04	lda $0404			lda 	identTypeByte
.d6bf	b6bf	91 36		sta ($36),y			sta 	(zTemp0),y
.d6c1	b6c1	c8		iny				iny
.d6c2	b6c2					_CCVData:
.d6c2	b6c2	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d6c4	b6c4	91 36		sta ($36),y			sta 	(zTemp0),y
.d6c6	b6c6	c8		iny				iny
.d6c7	b6c7	c0 08		cpy #$08			cpy 	#8
.d6c9	b6c9	90 f7		bcc $b6c2			bcc 	_CCVData
.d6cb	b6cb	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d6ce	b6ce					_CCVCopyName:
.d6ce	b6ce	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d6d1	b6d1	91 36		sta ($36),y			sta 	(zTemp0),y
.d6d3	b6d3	e8		inx				inx
.d6d4	b6d4	c8		iny				iny
.d6d5	b6d5	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d6d8	b6d8	d0 f4		bne $b6ce			bne 	_CCVCopyName
.d6da	b6da	98		tya				tya 								; patch offset
.d6db	b6db	92 36		sta ($36)			sta 	(zTemp0)
.d6dd	b6dd	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d6df	b6df	91 36		sta ($36),y			sta 	(zTemp0),y
.d6e1	b6e1	88		dey				dey
.d6e2	b6e2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d6e4	b6e4	09 80		ora #$80			ora 	#$80
.d6e6	b6e6	91 36		sta ($36),y			sta 	(zTemp0),y
.d6e8	b6e8					_CCVFound:
.d6e8	b6e8	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d6ea	b6ea	38		sec				sec
.d6eb	b6eb	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d6ed	b6ed	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d6ef	b6ef	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d6f2	b6f2	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d6f4	b6f4	20 70 b6	jsr $b670			jsr 	TOKWriteByte
.d6f7	b6f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d6f8	b6f8					SNDCheckChannel:
.d6f8	b6f8	aa		tax				tax
.d6f9	b6f9	bd 7d 09	lda $097d,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d6fc	b6fc	d0 38		bne $b736			bne 	_SNDCCExit
.d6fe	b6fe	da		phx				phx 								; save current channel
.d6ff	b6ff	8a		txa				txa 								; put in A
.d700	b700	20 7c b7	jsr $b77c			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d703	b703	68		pla				pla 								; channel # in A
.d704	b704	90 30		bcc $b736			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d706	b706	a8		tay				tay 								; Y is the channel #
.d707	b707	bd 72 08	lda $0872,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d70a	b70a	99 71 09	sta $0971,y			sta 	SNDPitchLow,y
.d70d	b70d	bd 73 08	lda $0873,x			lda 	SNDQueue+2,x
.d710	b710	99 75 09	sta $0975,y			sta 	SNDPitchHigh,y
.d713	b713	bd 74 08	lda $0874,x			lda 	SNDQueue+3,x
.d716	b716	99 79 09	sta $0979,y			sta 	SNDVolume,y
.d719	b719	bd 75 08	lda $0875,x			lda 	SNDQueue+4,x
.d71c	b71c	99 7d 09	sta $097d,y			sta 	SNDTimeLeft,y
.d71f	b71f	bd 76 08	lda $0876,x			lda 	SNDQueue+5,x
.d722	b722	99 81 09	sta $0981,y			sta 	SNDAdjustLow,y
.d725	b725	bd 77 08	lda $0877,x			lda 	SNDQueue+6,x
.d728	b728	99 85 09	sta $0985,y			sta 	SNDAdjustHigh,y
.d72b	b72b	5a		phy				phy 								; save channel #
.d72c	b72c	20 96 b7	jsr $b796			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d72f	b72f	ce 70 08	dec $0870			dec 	SNDLength 					; reduce the queue length.
.d732	b732	68		pla				pla
.d733	b733	20 37 b7	jsr $b737			jsr 	SNDUpdateNote 				; update channel A
.d736	b736					_SNDCCExit:
.d736	b736	60		rts				rts
.d737	b737					SNDUpdateNote:
.d737	b737	aa		tax				tax 								; so we can access records
.d738	b738	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d739	b739	0a		asl a				asl 	a
.d73a	b73a	0a		asl a				asl 	a
.d73b	b73b	0a		asl a				asl 	a
.d73c	b73c	0a		asl a				asl 	a
.d73d	b73d	8d 6f 08	sta $086f			sta 	SNDChannelBits
.d740	b740	bd 7d 09	lda $097d,x			lda 	SNDTimeLeft,x 				; are we silent
.d743	b743	f0 2e		beq $b773			beq 	_SNDUNIsSilent
.d745	b745	ad 6f 08	lda $086f			lda 	SNDChannelBits 				; push channel bits on stack
.d748	b748	48		pha				pha
.d749	b749	bd 71 09	lda $0971,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d74c	b74c	29 0f		and #$0f			and 	#$0F
.d74e	b74e	0d 6f 08	ora $086f			ora 	SNDChannelBits 				; set channel bits
.d751	b751	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d753	b753	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts
.d756	b756	bd 75 09	lda $0975,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d759	b759	8d 6f 08	sta $086f			sta 	SNDChannelBits
.d75c	b75c	bd 71 09	lda $0971,x			lda 	SNDPitchLow,x
.d75f	b75f	4e 6f 08	lsr $086f			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d762	b762	6a		ror a				ror 	a
.d763	b763	4e 6f 08	lsr $086f			lsr 	SNDChannelBits
.d766	b766	6a		ror a				ror 	a
.d767	b767	4a		lsr a				lsr 	a 							; put in bits 0-5
.d768	b768	4a		lsr a				lsr 	a
.d769	b769	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts 				; write as rest of pitch register
.d76c	b76c	68		pla				pla
.d76d	b76d	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d76f	b76f	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts
.d772	b772	60		rts				rts
.d773	b773					_SNDUNIsSilent:
.d773	b773	ad 6f 08	lda $086f			lda 	SNDChannelBits 				; channel bits
.d776	b776	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d778	b778	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts 				; write to the ports
.d77b	b77b	60		rts				rts
.d77c	b77c					SNDFindNextNoteForA:
.d77c	b77c	ac 70 08	ldy $0870			ldy 	SNDLength 					; queue size into Y
.d77f	b77f	f0 13		beq $b794			beq 	_SNDFNNFail 				; queue empty.
.d781	b781	a2 00		ldx #$00			ldx 	#0
.d783	b783					_SNDFNNSearch:
.d783	b783	dd 71 08	cmp $0871,x			cmp 	SNDQueue,x 					; does it match the channel
.d786	b786	38		sec				sec
.d787	b787	f0 0c		beq $b795			beq 	_SNDFNNExit 				; if so exit with CS.
.d789	b789	e8		inx				inx 								; next queue slot.
.d78a	b78a	e8		inx				inx
.d78b	b78b	e8		inx				inx
.d78c	b78c	e8		inx				inx
.d78d	b78d	e8		inx				inx
.d78e	b78e	e8		inx				inx
.d78f	b78f	e8		inx				inx
.d790	b790	e8		inx				inx
.d791	b791	88		dey				dey 								; done the whole queue
.d792	b792	d0 ef		bne $b783			bne 	_SNDFNNSearch 				; no, go back.
.d794	b794					_SNDFNNFail:
.d794	b794	18		clc				clc
.d795	b795					_SNDFNNExit:
.d795	b795	60		rts				rts
.d796	b796					SNDDeleteXFromQueue:
.d796	b796	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d798	b798	f0 09		beq $b7a3			beq 	_SNDDXExit
.d79a	b79a	bd 79 08	lda $0879,x			lda 	SNDQueue+8,x
.d79d	b79d	9d 71 08	sta $0871,x			sta 	SNDQueue,x
.d7a0	b7a0	e8		inx				inx
.d7a1	b7a1	80 f3		bra $b796			bra 	SNDDeleteXFromQueue
.d7a3	b7a3					_SNDDXExit:
.d7a3	b7a3	60		rts				rts
.086f						SNDChannelBits:
>086f								.fill 	1
.d7a4	b7a4					SNDQueueRequest:
.d7a4	b7a4	86 36		stx $36				stx 	zTemp0						; save queue address
.d7a6	b7a6	84 37		sty $37				sty 	zTemp0+1
.d7a8	b7a8	ae 70 08	ldx $0870			ldx 	SNDLength 					; queue is full, can't take any more.
.d7ab	b7ab	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d7ad	b7ad	f0 21		beq $b7d0			beq 	_SNDQRExit
.d7af	b7af	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d7b1	b7b1	48		pha				pha
.d7b2	b7b2	8a		txa				txa  								; get offset in queue buffer/
.d7b3	b7b3	0a		asl a				asl 	a
.d7b4	b7b4	0a		asl a				asl 	a
.d7b5	b7b5	0a		asl a				asl 	a
.d7b6	b7b6	aa		tax				tax
.d7b7	b7b7	68		pla				pla 								; get back and push again
.d7b8	b7b8	48		pha				pha
.d7b9	b7b9	9d 71 08	sta $0871,x			sta 	SNDQueue+0,x 				; save the channel #
.d7bc	b7bc	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d7be	b7be					_SNDQCopy:
.d7be	b7be	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7c0	b7c0	e8		inx				inx
.d7c1	b7c1	c8		iny				iny
.d7c2	b7c2	9d 71 08	sta $0871,x			sta 	SNDQueue,x
.d7c5	b7c5	c0 06		cpy #$06			cpy 	#6
.d7c7	b7c7	d0 f5		bne $b7be			bne 	_SNDQCopy
.d7c9	b7c9	ee 70 08	inc $0870			inc 	SNDLength 					; bump queue length.
.d7cc	b7cc	68		pla				pla 								; get channel # back
.d7cd	b7cd	20 f8 b6	jsr $b6f8			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d7d0	b7d0					_SNDQRExit:
.d7d0	b7d0	60		rts				rts
.d7d1	b7d1					SNDSilenceChannel:
.d7d1	b7d1	aa		tax				tax 								; zero time left.
.d7d2	b7d2	9e 7d 09	stz $097d,x			stz 	SNDTimeLeft,x
.d7d5	b7d5	0a		asl a				asl 	a 							; shift into position
.d7d6	b7d6	0a		asl a				asl 	a
.d7d7	b7d7	0a		asl a				asl 	a
.d7d8	b7d8	0a		asl a				asl 	a
.d7d9	b7d9	0a		asl a				asl 	a
.d7da	b7da	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d7dc	b7dc	20 e0 b7	jsr $b7e0			jsr 	SNDWritePorts
.d7df	b7df	60		rts				rts
.d7e0	b7e0					SNDWritePorts:
.d7e0	b7e0	da		phx				phx 								; save X
.d7e1	b7e1	a6 01		ldx $01				ldx 	1 							; save I/O status
.d7e3	b7e3	64 01		stz $01				stz 	1 							; access I/O page 0
.d7e5	b7e5	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d7e8	b7e8	8d 10 d6	sta $d610			sta 	$D610
.d7eb	b7eb	86 01		stx $01				stx 	1 							; restore I/O
.d7ed	b7ed	fa		plx				plx 								; restore X
.d7ee	b7ee	60		rts				rts
.d7ef	b7ef					Export_SNDCommand:
.d7ef	b7ef	da		phx				phx 								; save XY
.d7f0	b7f0	5a		phy				phy
.d7f1	b7f1	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d7f3	b7f3	f0 1d		beq $b812			beq 	_SNDInitialise
.d7f5	b7f5	90 28		bcc $b81f			bcc 	_SNDExit
.d7f7	b7f7	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d7f9	b7f9	f0 17		beq $b812			beq 	_SNDSilence
.d7fb	b7fb	b0 22		bcs $b81f			bcs 	_SNDExit
.d7fd	b7fd	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d7ff	b7ff	b0 09		bcs $b80a			bcs 	_SNDQueryPlay
.d801	b801	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d803	b803	b0 1a		bcs $b81f			bcs 	_SNDExit
.d805	b805	20 a4 b7	jsr $b7a4			jsr 	SNDQueueRequest
.d808	b808	80 15		bra $b81f			bra 	_SNDExit
.d80a	b80a					_SNDQueryPlay:
.d80a	b80a	29 03		and #$03			and 	#3 							; get channel #
.d80c	b80c	aa		tax				tax
.d80d	b80d	bd 7d 09	lda $097d,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d810	b810	80 0d		bra $b81f			bra 	_SNDExit
.d812	b812					_SNDInitialise:
.d812	b812					_SNDSilence:
.d812	b812	9c 70 08	stz $0870			stz 	SNDLength 					; empty the queue.
.d815	b815	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d817	b817					_SNDSilenceLoop:
.d817	b817	48		pha				pha
.d818	b818	20 d1 b7	jsr $b7d1			jsr 	SNDSilenceChannel
.d81b	b81b	68		pla				pla
.d81c	b81c	3a		dec a				dec 	a
.d81d	b81d	10 f8		bpl $b817			bpl 	_SNDSilenceLoop
.d81f	b81f					_SNDExit:
.d81f	b81f	7a		ply				ply
.d820	b820	fa		plx				plx
.d821	b821	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0870						SNDLength:
>0870								.fill 	1
.0871						SNDQueue:
>0871								.fill 	SNDQueueSize * 8
.0971						SNDPitchLow:
>0971								.fill 	4
.0975						SNDPitchHigh:
>0975								.fill 	4
.0979						SNDVolume:
>0979								.fill 	4
.097d						SNDTimeLeft:
>097d								.fill 	4
.0981						SNDAdjustLow:
>0981								.fill 	4
.0985						SNDAdjustHigh:
>0985								.fill 	4
.d822	b822					Export_SNDUpdate:
.d822	b822					PagedSNDUpdate:
.d822	b822	ad 7d 09	lda $097d			lda 	SNDTimeLeft+0 				; look at time remaining
.d825	b825	f0 05		beq $b82c			beq 	_SNDUNot0 					; not playing
.d827	b827	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d829	b829	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel 			; update it.
.d82c	b82c					_SNDUNot0:
.d82c	b82c	ad 7e 09	lda $097e			lda 	SNDTimeLeft+1
.d82f	b82f	f0 05		beq $b836			beq 	_SNDUNot1
.d831	b831	a2 01		ldx #$01			ldx 	#1
.d833	b833	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel
.d836	b836					_SNDUNot1:
.d836	b836	ad 7f 09	lda $097f			lda 	SNDTimeLeft+2
.d839	b839	f0 05		beq $b840			beq 	_SNDUNot2
.d83b	b83b	a2 02		ldx #$02			ldx 	#2
.d83d	b83d	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel
.d840	b840					_SNDUNot2:
.d840	b840	ad 80 09	lda $0980			lda 	SNDTimeLeft+3
.d843	b843	f0 05		beq $b84a			beq 	_SNDUNot3
.d845	b845	a2 03		ldx #$03			ldx 	#3
.d847	b847	20 4b b8	jsr $b84b			jsr 	SNDUpdateChannel
.d84a	b84a					_SNDUNot3:
.d84a	b84a	60		rts				rts
.d84b	b84b					SNDUpdateChannel:
.d84b	b84b	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d84d	b84d	f0 2c		beq $b87b			beq 	_SNDUCExit
.d84f	b84f	3a		dec a				dec 	a 							; decrement and update timer
.d850	b850	9d 7d 09	sta $097d,x			sta 	SNDTimeLeft,x
.d853	b853	f0 1d		beq $b872			beq 	_SNDUCUpdate 				; if zero, silence channel
.d855	b855	bd 81 09	lda $0981,x			lda 	SNDAdjustLow,x 				; adjust ?
.d858	b858	1d 85 09	ora $0985,x			ora 	SNDAdjustHigh,x
.d85b	b85b	f0 1e		beq $b87b			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d85d	b85d	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d85e	b85e	bd 71 09	lda $0971,x			lda 	SNDPitchLow,x
.d861	b861	7d 81 09	adc $0981,x			adc 	SNDAdjustLow,x
.d864	b864	9d 71 09	sta $0971,x			sta 	SNDPitchLow,x
.d867	b867	bd 75 09	lda $0975,x			lda 	SNDPitchHigh,x
.d86a	b86a	7d 85 09	adc $0985,x			adc 	SNDAdjustHigh,x
.d86d	b86d	29 03		and #$03			and 	#3
.d86f	b86f	9d 75 09	sta $0975,x			sta 	SNDPitchHigh,x
.d872	b872					_SNDUCUpdate:
.d872	b872	8a		txa				txa 								; which channel.
.d873	b873	48		pha				pha
.d874	b874	20 37 b7	jsr $b737			jsr 	SNDUpdateNote 				; update the current note
.d877	b877	68		pla				pla
.d878	b878	20 f8 b6	jsr $b6f8			jsr 	SNDCheckChannel 			; more to do ?
.d87b	b87b					_SNDUCExit:
.d87b	b87b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>e018	a018	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>e028	a028	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>e038	a038	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>e048	a048	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>e058	a058	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>e068	a068	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>e078	a078	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>e088	a088	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>e098	a098	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>e0a8	a0a8	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>e0b8	a0b8	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>e0c8	a0c8	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>e0d8	a0d8	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>e0e8	a0e8	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>e0f8	a0f8	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>e108	a108	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>e118	a118	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>e128	a128	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>e138	a138	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>e148	a148	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>e158	a158	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>e178	a178	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>e188	a188	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.e198	a198					Header_jchars:
>e198	a198	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e1a0	a1a0	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>e1b0	a1b0	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>e1c0	a1c0	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>e1d0	a1d0	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>e1e0	a1e0	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>e1f0	a1f0	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>e200	a200	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>e210	a210	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>e220	a220	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e230	a230	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>e240	a240	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>e250	a250	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>e260	a260	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>e270	a270	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>e280	a280	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>e290	a290	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e2a0	a2a0	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2b0	a2b0	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2c0	a2c0	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2d0	a2d0	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2e0	a2e0	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2f0	a2f0	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e300	a300	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>e310	a310	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e320	a320	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e330	a330	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e340	a340	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>e350	a350	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e360	a360	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e370	a370	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e380	a380	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>e390	a390	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e3a0	a3a0	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3b0	a3b0	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3c0	a3c0	9d ff 96 18 96 a3 ff 00
.e3c8	a3c8					Header_kattrs:
>e3c8	a3c8	72 ff 62 09 62 ff 72 37			.byte	114,255,98,9,98,255,114,55,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,255,216,7,216,255,114,2,114,255,216,6,216,255,114,2,114,255,216,7,216,255,114,2,114,255,216,6,216,255,114,2,114,210,210,255,114,3,114,210,210,114,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,104,104,255,114,7,114,104,104,255,114,4,114,104,104,114,114,104,104,255,114,7,114,104,104,255,114,4,114,104,104,114,114,210,210,255,114,2,114,210,210,255,114,2,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,232,232,255,114,14,114,232,232,114,114,232,232,255,114,7,114,232,232,255,114,8,114,210,210,114,114,210,210,255,114,3,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,255,56,5,56,255,114,4,114,255,56,6,56,255,114,2,114,255,56,6,56,255,114,2,114,255,56,7,56,255,114,2,114,255,210,4,210,255,114,4,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,120,120,255,114,7,114,120,120,255,114,14,114,113,113,114,114,113,113,255,114,4,114,113,113,114,114,210,210,114,114,210,210,255,114,3,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,168,168,255,114,7,114,168,168,255,114,8,114,168,168,255,114,3,114,168,168,114,114,168,168,255,114,4,114,168,168,114,114,210,210,255,114,2,114,210,210,255,114,2,114,255,98,9,98,255,114,3,114,255,98,9,98,255,114,3,114,72,72,255,114,7,114,255,72,8,72,255,114,2,114,255,72,5,72,255,114,3,114,255,72,6,72,255,114,2,114,210,210,255,114,3,114,210,210,114,114,255,98,9,98,255,114,2,114,255,2,79,2,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3d0	a3d0	72 ff 62 09 62 ff 72 03 72 ff 62 09 62 ff 72 03
>e3e0	a3e0	72 ff d8 07 d8 ff 72 02 72 ff d8 06 d8 ff 72 02
>e3f0	a3f0	72 ff d8 07 d8 ff 72 02 72 ff d8 06 d8 ff 72 02
>e400	a400	72 d2 d2 ff 72 03 72 d2 d2 72 72 ff 62 09 62 ff
>e410	a410	72 03 72 ff 62 09 62 ff 72 03 72 68 68 ff 72 07
>e420	a420	72 68 68 ff 72 04 72 68 68 72 72 68 68 ff 72 07
>e430	a430	72 68 68 ff 72 04 72 68 68 72 72 d2 d2 ff 72 02
>e440	a440	72 d2 d2 ff 72 02 72 ff 62 09 62 ff 72 03 72 ff
>e450	a450	62 09 62 ff 72 03 72 e8 e8 ff 72 0e 72 e8 e8 72
>e460	a460	72 e8 e8 ff 72 07 72 e8 e8 ff 72 08 72 d2 d2 72
>e470	a470	72 d2 d2 ff 72 03 72 ff 62 09 62 ff 72 03 72 ff
>e480	a480	62 09 62 ff 72 03 72 ff 38 05 38 ff 72 04 72 ff
>e490	a490	38 06 38 ff 72 02 72 ff 38 06 38 ff 72 02 72 ff
>e4a0	a4a0	38 07 38 ff 72 02 72 ff d2 04 d2 ff 72 04 72 ff
>e4b0	a4b0	62 09 62 ff 72 03 72 ff 62 09 62 ff 72 03 72 78
>e4c0	a4c0	78 ff 72 07 72 78 78 ff 72 0e 72 71 71 72 72 71
>e4d0	a4d0	71 ff 72 04 72 71 71 72 72 d2 d2 72 72 d2 d2 ff
>e4e0	a4e0	72 03 72 ff 62 09 62 ff 72 03 72 ff 62 09 62 ff
>e4f0	a4f0	72 03 72 a8 a8 ff 72 07 72 a8 a8 ff 72 08 72 a8
>e500	a500	a8 ff 72 03 72 a8 a8 72 72 a8 a8 ff 72 04 72 a8
>e510	a510	a8 72 72 d2 d2 ff 72 02 72 d2 d2 ff 72 02 72 ff
>e520	a520	62 09 62 ff 72 03 72 ff 62 09 62 ff 72 03 72 48
>e530	a530	48 ff 72 07 72 ff 48 08 48 ff 72 02 72 ff 48 05
>e540	a540	48 ff 72 03 72 ff 48 06 48 ff 72 02 72 d2 d2 ff
>e550	a550	72 03 72 d2 d2 72 72 ff 62 09 62 ff 72 02 72 ff
>e560	a560	02 4f 02 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>e570	a570	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e580	a580	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>e590	a590	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>e5a0	a5a0	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.e5b0	a5b0					Header_kchars:
>e5b0	a5b0	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,183,183,255,32,3,32,183,183,255,32,29,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,183,183,255,32,2,32,183,183,255,32,30,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,8,32,183,183,32,32,183,183,255,32,31,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,183,4,183,255,32,32,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,183,183,32,32,183,183,255,32,31,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,183,183,255,32,2,32,183,183,255,32,30,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,2,32,183,183,255,32,3,32,183,183,255,32,94,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e5b8	a5b8	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>e5c8	a5c8	ff 20 02 20 ff 08 06 08 ff 20 02 20 b7 b7 ff 20
>e5d8	a5d8	03 20 b7 b7 ff 20 1d 20 08 08 ff 20 07 20 08 08
>e5e8	a5e8	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>e5f8	a5f8	ff 20 04 20 08 08 20 20 b7 b7 ff 20 02 20 b7 b7
>e608	a608	ff 20 1e 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e618	a618	ff 20 07 20 08 08 ff 20 08 20 b7 b7 20 20 b7 b7
>e628	a628	ff 20 1f 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e638	a638	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>e648	a648	ff 20 02 20 ff b7 04 b7 ff 20 20 20 08 08 ff 20
>e658	a658	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>e668	a668	04 20 08 08 20 20 b7 b7 20 20 b7 b7 ff 20 1f 20
>e678	a678	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e688	a688	03 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e698	a698	b7 b7 ff 20 02 20 b7 b7 ff 20 1e 20 08 08 ff 20
>e6a8	a6a8	07 20 ff 08 08 08 ff 20 02 20 ff 08 05 08 ff 20
>e6b8	a6b8	03 20 ff 08 06 08 ff 20 02 20 b7 b7 ff 20 03 20
>e6c8	a6c8	b7 b7 ff 20 5e 20 a0 ff 96 1b 96 9b ff 96 16 96
>e6d8	a6d8	9b ff 96 18 96 a1 82 48 61 72 64 77 61 72 65 ff
>e6e8	a6e8	20 13 20 82 dd 32 30 32 32 20 53 74 65 66 61 6e
>e6f8	a6f8	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e708	a708	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e718	a718	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e728	a728	6e 65 6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65
>e738	a738	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e748	a748	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e758	a758	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e768	a768	42 41 53 49 43 ff 20 11 20 82 dd 32 30 32 32 20
>e778	a778	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e788	a788	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e798	a798	2e 75 6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96
>e7a8	a7a8	16 96 9d ff 96 18 96 a3 ff 00
.e7b2	a7b2					Header_Palette:
>e7b2	a7b2	00 00 00 00				.dword $000000
>e7b6	a7b6	66 66 66 00				.dword $666666
>e7ba	a7ba	aa 00 00 00				.dword $0000aa
>e7be	a7be	00 aa 00 00				.dword $00aa00
>e7c2	a7c2	ea 41 c0 00				.dword $c041ea
>e7c6	a7c6	00 48 87 00				.dword $874800
>e7ca	a7ca	00 9c ff 00				.dword $ff9c00
>e7ce	a7ce	ff db 57 00				.dword $57dbff
>e7d2	a7d2	28 3f 3f 00				.dword $3f3f28
>e7d6	a7d6	8a aa aa 00				.dword $aaaa8a
>e7da	a7da	ff 55 55 00				.dword $5555ff
>e7de	a7de	55 ff 55 00				.dword $55ff55
>e7e2	a7e2	ed 8d ff 00				.dword $ff8ded
>e7e6	a7e6	00 00 ff 00				.dword $ff0000
>e7ea	a7ea	55 ff ff 00				.dword $ffff55
>e7ee	a7ee	ff ff ff 00				.dword $ffffff
>e7f2	a7f2	ff ff ff 00				.dword $ffffff
>e7f6	a7f6	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
